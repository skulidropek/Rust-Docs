Сборка: EasyRoads3Dv3.dll
==================================================
Класс: <Module>
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: ERSurfaceScript
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void Start()
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OOQOQOODQC
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OCDCCCCCCQ(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, int triArrayElement, int leftrightroad, bool hardEdge)
  void ODCQCQQQCQ(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, int triArrayElement, int leftrightroad, bool hardEdge)
  void OQDDCCCQQQ(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, int triArrayElement, int leftrightroad, bool hardEdge)
  void OODCCQQDOO(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, int triArrayElement, int leftrightroad, bool hardEdge)
  void OQCDQQODOD(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, int triArrayElement, int leftrightroad, bool hardEdge)
  void OCQDQCQDCC(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, int triArrayElement, int leftrightroad, int startEnd, bool hardEdge)
  void ODOODOCDOD(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, int triArrayElement, int leftrightroad, bool hardEdge)
  void OODDQQQDDQ(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, int triArrayElement, int leftrightroad, bool hardEdge)
  void OCCDCDCODO(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, int triArrayElement, int leftrightroad, bool hardEdge)
  void ODOQCDCCOQ(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, int triArrayElement, int leftrightroad, bool hardEdge)
  float OQDDDOODCQ(Vector3 v1, Vector3 v2, float uvRatio, float startUV, float dir)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERCrossings
Наследуется от: MonoBehaviour
Поля:
  ERConnectionData cdata
  List`1<List`1<Vector3>> startConnectionV3
  List`1<List`1<Vector3>> endConnectionV3
  List`1<List`1<Vector3>> leftConnectionV3
  List`1<List`1<Vector3>> rightConnectionV3
  List`1<List`1<Vector2>> startConnectionUV
  List`1<List`1<Vector2>> endConnectionUV
  List`1<List`1<Vector2>> leftConnectionUV
  List`1<List`1<Vector2>> rightConnectionUV
  List`1<List`1<int>> startConnectionTris
  List`1<List`1<int>> endConnectionTris
  List`1<List`1<int>> leftConnectionTris
  List`1<List`1<int>> rightConnectionTris
  List`1<List`1<Vector3>> leftSidewalkStartV3
  List`1<List`1<Vector3>> rightSidewalkStartV3
  List`1<List`1<Vector3>> leftSidewalkEndV3
  List`1<List`1<Vector3>> rightSidewalkEndV3
  List`1<List`1<Vector2>> leftSidewalkStartUV
  List`1<List`1<Vector2>> rightSidewalkStartUV
  List`1<List`1<Vector2>> leftSidewalkEndUV
  List`1<List`1<Vector2>> rightSidewalkEndUV
  List`1<List`1<Vector3>> leftSidewalkLeftV3
  List`1<List`1<Vector3>> leftSidewalkRightV3
  List`1<List`1<Vector3>> rightSidewalkLeftV3
  List`1<List`1<Vector3>> rightSidewalkRightV3
  List`1<List`1<Vector2>> leftSidewalkLeftUV
  List`1<List`1<Vector2>> leftSidewalkRightUV
  List`1<List`1<Vector2>> rightSidewalkLeftUV
  List`1<List`1<Vector2>> rightSidewalkRightUV
  List`1<List`1<int>> leftSidewalkStartTris
  List`1<List`1<int>> rightSidewalkStartTris
  List`1<List`1<int>> leftSidewalkEndTris
  List`1<List`1<int>> rightSidewalkEndTris
  List`1<List`1<int>> leftSidewalkLeftTris
  List`1<List`1<int>> leftSidewalkRightTris
  List`1<List`1<int>> rightSidewalkLeftTris
  List`1<List`1<int>> rightSidewalkRightTris
  List`1<float> uvArrayFront
  List`1<float> uvArrayBack
  List`1<float> uvArrayLeft
  List`1<float> uvArrayRight
  List`1<int> OCCODQDOQO
  List`1<int> OOQODQDOQC
  List`1<int> OQCCQOCQDQ
  List`1<int> OQDQOQOCQD
  List`1<int> ODQDCCQOQD
  List`1<int> ODOQODQODO
  List`1<int> OOOQCQDOCD
  List`1<int> OQCDOOCDCD
  List`1<int> OCCODQDOQOStart
  List`1<int> OOQODQDOQCStart
  List`1<int> OQCCQOCQDQStart
  List`1<int> OQDQOQOCQDStart
  List`1<int> ODQDCCQOQDStart
  List`1<int> ODOQODQODOStart
  List`1<int> OOOQCQDOCDStart
  List`1<int> OQCDOOCDCDStart
  List`1<int> frontLeftRoadInts
  List`1<int> frontRightRoadInts
  List`1<int> backLeftRoadInts
  List`1<int> backRightRoadInts
  List`1<int> leftLeftRoadInts
  List`1<int> leftRightRoadInts
  List`1<int> rightLeftRoadInts
  List`1<int> rightRightRoadInts
  List`1<ERSideWalk> sidewalkCorners
  List`1<float> sidewalkWidths
  List`1<float> curbHeights
  List`1<float> curbDepths
  List`1<bool> beveledCurbs
  List`1<float> beveledHeights
  List`1<float> beveledDepths
  List`1<bool> outerCurbs
  List`1<bool> lockUVs
  List`1<Material> materials
  int leftStartSidewalkCornerInt
  int rightStartSidewalkCornerInt
  int leftEndSidewalkCornerInt
  int rightEndSidewalkCornerInt
  int leftLeftSidewalkCornerInt
  int rightLeftSidewalkCornerInt
  int leftRightSidewalkCornerInt
  int rightRightSidewalkCornerInt
  Vector3[] sidewalkControlPoints
  Boolean[] sidewalkControlStatus
  bool copySettingsFlag
  bool generalSettingsFlag
  bool connectionSettingsFlag
  bool cornerSettingsFlag
  bool sidewalkSettingsFlag
  String[] QDOOOQOOQQQQD
  int selectedConnection
  float startAngle
  bool roundedCorners
  float roundingRadius
  int roundingSegments
  float innerSegmentDistance
  bool tCrossing
  bool tStraightBending
  bool oldTCrossing
  int tCrossingLeftRight
  int oldtCrossingLeftRight
  int geometryType
  float resolution
  bool includeSidewalks
  bool defaultSidewalkEnabledStatus
  bool planarUVs
  float planarTiling
  bool isSceneObject
  int connectionHandling
  List`1<QDQDOOQQDQODD> roadTypesDynamic
  int frontRoadTypeInt
  double frontRoadTypeID
  float frontRoadWidth
  Material frontMaterial
  Material frontRoadMaterial
  float frontRoadUVTiling
  int backRoadTypeInt
  double backRoadTypeID
  float backRoadWidth
  Material backMaterial
  Material backRoadMaterial
  float backRoadUVTiling
  int leftRoadTypeInt
  double leftRoadTypeID
  float leftRoadWidth
  Material leftMaterial
  Material leftRoadMaterial
  float leftRoadUVTiling
  int rightRoadTypeInt
  double rightRoadTypeID
  float rightRoadWidth
  Material rightMaterial
  Material rightRoadMaterial
  float rightRoadUVTiling
  int selectedRoadType
  bool uniformCornersFlag
  int selectedCorner
  int selectedCornerPreset
  string cornerPresetName
  int selectedSidewalkPreset
  string sidewalkPresetName
  int OCOQDODDQQCorner
  Vector3 leftBottom
  Vector3 rightBottom
  Vector3 leftTop
  Vector3 rightTop
  Vector3 frontCenter
  Vector3 backCenter
  Vector3 leftCenter
  Vector3 rightCenter
  int prefabId
  ERCrossingPrefabs prefabScript
  QDOODOQQDQODD connectionElement
  int crossingOuterElement
  string crossingName
  bool guiChanged
  bool includeSidewalkChangeFlag
  List`1<Vector3> debugVecs
  List`1<NormalPairs> normalPairs
  float maxConnectionWidth
  int crossingStructure
  ERModularBase baseScript
  List`1<ERConnectionSibling> siblings1
  List`1<ERConnectionSibling> prioritySiblings
  Vector3 crossPointCenter
  List`1<Vector3> edges
  ERConnectionSibling primaryPriorityConnection
  ERConnectionSibling secondPriorityConnection
  bool adjustMainRadiusFlag
  bool disableAdjustMainRadiusFlag
  bool showScaleSliderAtPrimary
  bool showScaleSliderAtSecondary
  ERRoadWayType priorityWayType
  float leftIntOffset
  float rightIntOffset
  bool isUpdating
  int serializeTest
  int updateQueue
Свойства:
Методы:
  void Refresh()
  void ODOCCDCQOC()
  Vector3 OOQCQDQCOO(int index, Vector3 p0, Vector3 p1, Vector3 p2, bool update)
  void UpdateAllConnectionAngles()
  void OOOCDCQQCO()
  bool UpdateToRoadType(QDQDOOQQDQODD sourcePreset, List`1& updatedRoads)
  bool RoadIsUpdated(ERModularRoad rd, List`1& updatedRoads)
  int SetRoadTypeInt(double id)
  void OCQCQODOQC(ERCrossings source, bool refreshFlag)
  void OQCQCOOCDD()
  void OCQDQODOQD(bool sidewalkSceneHandleFlag, bool rebuildRoads)
  void OQCQDQDCOD()
  void ODDDOCDCQO(bool rebuildRoads)
  void OQCQQCQDCQ(int el, List`1<List`1<int>> trIntArray, List`1<float> uvArray, List`1<List`1<int>> leftSidewalkIntArray, List`1<List`1<int>> rightSidewalkIntArray, int startend)
  void ODQCODQDDQ(int el, Material roadMaterial, int leftCorner, int rightCorner, int leftVecCount, int rightVecCount)
  void OCDDOCDDOQ(List`1<Vector3> meshVecs, List`1<int> connectionVecInts, List`1& roadShapeVecs, List`1<List`1<Vector3>> vecArrays, List`1<List`1<Vector3>> leftSidewalkArray, List`1<List`1<Vector3>> rightSidewalkArray, int connectionElement, int startend)
  void ODOODQDCCQ(List`1<Vector3> sourceVecs, List`1& roadShapeVecs, Vector3 centerPoint, Vector3 startPoint, float halfWayDistance)
  string GetRoadShapeVecString(List`1<Vector2> vecs, List`1<Vector2> lvecs, List`1<Vector2> rvecs, Int32& matchCount)
  void ODCCCQCQOO()
  void ODCDCDDOCC(List`1<SidewalkPresetClass> sidewalkPresets, int el)
  void OCCODQDOCO()
  void OQDOQDQQQQ(int el)
  void OODOQQQQCO()
  void OQCOOQQOOD()
  bool OQDOOCDOCD(ERModularRoad road, float angle)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.QDOQDSQOOQDDD
Наследуется от: object
Поля:
  int crossingElementLeftIndex
  int crossingElementRightIndex
  Vector3 centerHandleV3
  Vector3 centerHandleV3_2
  Vector3 leftHandleV3
  Vector3 rightHandleV3
  bool renderFlag
  bool leftConnectionHandle
  bool rightConnectionHandle
  float sidewalkWidth1
  float sidewalkWidth2
  float curbHeight
  float curbDepth
  bool beveledCurb
  float beveledHeight
  float beveledDepth
  bool outerCurb
  bool roadSideCurbUVControl
  bool outerSideCurbUVControl
  Material sidewalkMaterial
  List`1<float> sidewalkUVs
  List`1<float> curbUVs
  bool lockUVs
  float cornerRadius
  int cornerSegments
  float innerSegmentDistance
  float startAngle
Свойства:
Методы:
  void .ctor(ERModularBase scr)
  void CopyFromSidewalk(ERSideWalk sw)
  bool ERSidewalkMatch(QDOQDSQOOQDDD sw1, QDOQDSQOOQDDD sw2)
--------------------------------------------------
Класс: EasyRoads3Dv3.EasyRoads3DTerrainIDv3
Наследуется от: MonoBehaviour
Поля:
  string terrainid
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERBend
Наследуется от: MonoBehaviour
Поля:
  float roundAboutRadius
  float roundAboutResolution
  float rDist
  Vector3 raStartPos
  float roundaboutWidth
  float bendAngle
  bool meshInstance
  float roadWidth
  bool lockLeftRightRoundingRadius
  float leftRoundingRadius
  float rightRoundingRadius
  int roundingSegments
  float connectionLength
  float maxRoadWidth
  float maxRoundingRadius
  List`1<Vector3> meshVecs
  List`1<Vector3> mainRightPoints
  List`1<Vector3> mainCenterPoints
  List`1<Vector3> mainLeftPoints
  List`1<Vector3> OCCDQOCCDQ
  List`1<Vector3> splinePoints
  List`1<Vector2> mainRightPointsUVs
  List`1<Vector2> mainCenterPointsUVs
  List`1<Vector2> mainLeftPointsUVs
  List`1<Vector2> OCCDQOCCDQUVs
  Vector3 leftPoint
  Vector3 leftPoint1
  Vector3 rightPoint
  Vector3 rightPoint1
  Vector3 centerOnLine
  Vector3 leftOuterPoint
  Vector3 rightOuterPoint
  Vector3 pl
  Vector3 pr
  List`1<Vector3> edgePoints
  int newSegmentInt
  List`1<ERRoundaboutElement> connections
  String[] QDOOOQOOQQQQD
  int selectedConnection
  int tmpSelectedConnection
  int centerInt
  int leftOuterInt
  int rightOuterInt
  List`1<Vector3> leftOuterSegments
  List`1<Vector3> leftInnerSegments
  List`1<Vector3> rightOuterSegments
  List`1<Vector3> rightInnerSegments
  List`1<Vector2> leftOuterSegmentsUVs
  List`1<Vector2> leftInnerSegmentsUVs
  List`1<Vector2> rightOuterSegmentsUVs
  List`1<Vector2> rightInnerSegmentsUVs
  Material roadMaterial
  List`1<Vector3> innerRoundaboutPoints
  List`1<Vector2> innerRoundaboutUVs
  float innerSegmentDistance
  bool leftFlag
  bool rightFlag
Свойства:
Методы:
  void Start()
  void Update()
  void OOCCCDQDCQ()
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERRoundaboutElement
Наследуется от: object
Поля:
  float roadWidth
  float prevRoadWidth
  int roundingSegments
  bool lockLeftRightRoundingRadius
  float leftRoundingRadius
  float prevLeftRoundingRadius
  float rightRoundingRadius
  float prevRightRoundingRadius
  float connectionLength
  int centerInt
  int prevCenterInt
  float positionPercentage
  int leftOuterInt
  int rightOuterInt
  int intsFromCenter
  List`1<Vector3> leftOuterSegments
  List`1<Vector3> leftInnerSegments
  List`1<Vector3> rightOuterSegments
  List`1<Vector3> rightInnerSegments
  List`1<Vector2> leftOuterSegmentsUVs
  List`1<Vector2> leftInnerSegmentsUVs
  List`1<Vector2> rightOuterSegmentsUVs
  List`1<Vector2> rightInnerSegmentsUVs
  List`1<List`1<Vector3>> leftSidewalkV3
  List`1<List`1<Vector3>> rightSidewalkV3
  List`1<List`1<Vector2>> leftSidewalkUV
  List`1<List`1<Vector2>> rightSidewalkUV
  List`1<List`1<int>> leftSidewalkTris
  List`1<List`1<int>> rightSidewalkTris
  List`1<int> leftSidewalkNormalsStart
  List`1<int> leftSidewalkNormalsEnd
  List`1<int> rightSidewalkNormalsStart
  List`1<int> rightSidewalkNormalsEnd
  List`1<List`1<int>> roadConnectionTris
  List`1<Vector3> leftSidewalkSourceVecs
  List`1<Vector3> rightSidewalkSourceVecs
  Vector3 outerCenterPoint
  List`1<Vector3> innerRoundaboutPoints
  List`1<Vector2> innerRoundaboutUVs
  bool leftFlag
  bool rightFlag
  bool blendFlag
  Material roadMaterial
  Material connectionMaterial
  int prefabElement
  List`1<int> connectionVecInts
  List`1<int> fullConnectionVecInts
  Vector3 centerPoint
  Vector3 controlPointV3
  List`1<Vector2> roadShapeVecs
  string roadShapeVecsString
  List`1<float> roadShapeUVY
  List`1<int> blendCornerPointInts
  List`1<float> blendCornerPointWeights
  Vector3 sceneSelectionV3
  Vector3 sceneSelectionV3Global
  List`1<Vector3> rightIndentvecs
  List`1<Vector3> rightSurroundingvecs
  List`1<Vector3> leftIndentvecs
  List`1<Vector3> leftSurroundingvecs
  int rightIndentBorderInt
  int leftIndentBorderInt
  double roadType
  double prevRoadType
  double roadTypeTimestamp
  double prevTimestamp
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERRoundabouts
Наследуется от: MonoBehaviour
Поля:
  float roundAboutRadius
  float prevRoundAboutRadius
  float roundAboutResolution
  float prevRoundAboutResolution
  float rDist
  Vector3 raStartPos
  float roundaboutWidth
  float prevRoundaboutWidth
  int roadTypeInt
  int prevRoadTypeInt
  float roadWidth
  float prevRoadWidth
  bool lockLeftRightRoundingRadius
  float leftRoundingRadius
  float prevLeftRoundingRadius
  float rightRoundingRadius
  float prevRightRoundingRadius
  int roundingSegments
  float connectionLength
  float maxRoadWidth
  float maxRoundingRadius
  List`1<Vector3> meshVecs
  List`1<Vector3> mainRightPoints
  List`1<Vector3> mainCenterPoints
  List`1<Vector3> mainLeftPoints
  List`1<Vector3> OCCDQOCCDQ
  List`1<Vector2> mainRightPointsUVs
  List`1<Vector2> mainCenterPointsUVs
  List`1<Vector2> mainLeftPointsUVs
  List`1<Vector2> OCCDQOCCDQUVs
  List`1<Vector3> innerRoundaboutSidewalkV3
  List`1<Vector2> innerRoundaboutSidewalUV
  List`1<int> innerRoundaboutSidewalTris
  Material innerRoundaboutSidewalkMaterial
  List`1<int> innerRoundaboutSidewalkIntsStart
  List`1<int> innerRoundaboutSidewalkIntsEnd
  int innerSidewalkSegments
  Vector3 leftPoint
  Vector3 leftPoint1
  Vector3 rightPoint
  Vector3 rightPoint1
  Vector3 centerOnLine
  Vector3 leftOuterPoint
  Vector3 rightOuterPoint
  Vector3 pl
  Vector3 pr
  List`1<Vector3> edgePoints
  int newSegmentInt
  int prevNewSegmentInt
  List`1<ERRoundaboutElement> connections
  String[] QDOOOQOOQQQQD
  int selectedConnection
  int activeConnection
  int tmpSelectedConnection
  int minStartInt
  int maxEndInt
  int centerInt
  int leftOuterInt
  int rightOuterInt
  List`1<Vector3> leftOuterSegments
  List`1<Vector3> leftInnerSegments
  List`1<Vector3> rightOuterSegments
  List`1<Vector3> rightInnerSegments
  List`1<Vector2> leftOuterSegmentsUVs
  List`1<Vector2> leftInnerSegmentsUVs
  List`1<Vector2> rightOuterSegmentsUVs
  List`1<Vector2> rightInnerSegmentsUVs
  Vector3 outerCenterPoint
  bool blendFlag
  Material mainRoadMaterial
  Material roadMaterial
  Material connectionMaterial
  Material defaultConnectionMaterial
  double roadType
  double roadTypeTimestamp
  List`1<Vector3> innerRoundaboutPoints
  List`1<Vector2> innerRoundaboutUVs
  float innerSegmentDistance
  float innerSidewalkWidth1
  float innerSidewalkWidth2
  float innerCurbHeight
  float innerCurbDepth
  bool innerBeveledCurb
  float innerBeveledHeight
  float innerBeveledDepth
  bool innerOuterCurb
  bool innerRoadSideCurbUVControl
  bool innerOuterSideCurbUVControl
  Material innerSidewalkMaterial
  List`1<float> innerSidewalkUVs
  List`1<float> innerCurbUVs
  int selectedCorner
  int selectedCornerPreset
  int selectedSidewalkPreset
  string sidewalkPresetName
  int innerRoundaboutPreset
  bool leftFlag
  bool rightFlag
  bool ᙃ
  ERCrossingPrefabs prefabScript
  QDOODOQQDQODD connectionElement
  ERModularBase baseScript
  bool isSceneObject
  bool guiChanged
  string crossingName
  bool activeSidewalks
  bool newConnectionFlag
  Vector3 testIndentMiddlePoint
  List`1<QDQDOOQQDQODD> roadTypesDynamic
Свойства:
Методы:
  void Start()
  bool UpdateToRoadType(QDQDOOQQDQODD sourcePreset)
  void ResetData()
  void ODQDCCOQOD()
  void OOQQDCCCCC()
  void GetConnectionData()
  void UpdateMinMaxInts()
  void ChecknewSegmentInt()
  int GetRoadPresetInt(double id)
  void OCQCQODOQC(ERRoundabouts source, bool refreshFlag)
  void OCDCOQOOQO()
  void ODCDCDDOCC(List`1<SidewalkPresetClass> sidewalkPresets, int el)
  void OOCDDOQDDO()
  void OQQCDOQOOQ()
  void OQCQDQDCOD(int currentIndex)
  void OQQOCQQDOQ(List`1& OCCDQOCCDQ, List`1& innerSegmentPoints, int leftRight, int startElement, Vector3 leftPoint, Vector3 rightPoint, Vector3 forward, int currentIndex)
  void OOCCDCDOQC(int currentIndex)
  void ODDDOCDCQO()
  void OQCQQCQDCQ(int el, List`1<int> trIntArray, List`1<float> uvArray, List`1<List`1<int>> leftSidewalkIntArray, List`1<List`1<int>> rightSidewalkIntArray, int startend)
  void OCDDOCDDOQ(List`1<Vector3> meshVecs, List`1<int> connectionVecInts, List`1& roadShapeVecs, List`1<Vector2> vecArrays, List`1<List`1<Vector3>> leftSidewalkArray, List`1<List`1<Vector3>> rightSidewalkArray, int connectionElement, int startend)
  void ODQCODQDDQ(int el, Material roadMaterial, int leftVecCount, int rightVecCount)
  void ODCQOCOOQO()
  void OCQOCDQQQD(int el)
  bool OQQCODDOOQ(int el, float roundaboutIndent, Vector3 prevVec, bool boolCheck, Vector3& vec, Int32& indentBorderInt)
  void ODQOOCQDDD(float minSurrounding, Vector3 middleVec, Vector3 origVec, bool boolCheck, Vector3& vec)
  void CheckAgainstFirstSurroundingVec(Vector3 firstIndent, Vector3 firstSurrounding, bool boolCheck, Vector3& vec)
  Vector3 OODOQDOODO(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4)
  Vector3 OQDDDODCOC(Vector3 point, Vector3 pivot, Quaternion angle)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OODODOQDCC
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OQCCCDDOQO(ERBend scr, List`1& leftOuterSegments, List`1& leftInnerSegments, List`1& rightOuterSegments, List`1& rightInnerSegments)
  List`1<Vector3> OOOOOOODCO(Vector3 prefabCenterpos, Vector3 cpCenterposV3, Vector3 v1, Vector3 cp, Single& totalDistance, List`1& controlPoints)
  List`1<Vector3> ODQOQQOQOC(Vector3 prefabCenterpos, Vector3 cpCenterposV3, Vector3 v1, Vector3 cp, Single& totalDistance, List`1& controlPoints, float angle, float multiplyFactor)
  Vector3[] OOOOCDQODC(ERCrossingPrefabs scr, int connection, List`1<Vector3> controlPoints, float segmentDistance, float defaultDistance, Vector3[] meshVecs, Vector3[]& tCrossingTmpFullMeshVecs, float multiplyFactor, float angle, float curveStrength)
  Vector3[] OCOOCQDCDD(ERCrossingPrefabs scr, int connection, List`1<Vector3> controlPoints, float segmentDistance, float defaultDistance, Vector3[] meshVecs, Vector3[]& tmpSurfaceVecsTCrossings, float multiplyFactor, float angle, float curveStrength)
  Vector3[] OCDDOQCCQC(ERCrossingPrefabs scr, int connection, List`1<Vector3> controlPoints, float segmentDistance, Vector3[] meshVecs, float multiplyFactor, float angle, Vector3 cpCenterPoint)
  float GetZAdjust(Vector3 vec, float angle)
  void OCQQDDOCCD(ERCrossings scr, int connection, int x, int y, List`1<List`1<Vector3>> vecArray)
  void OQDDOCOOOO(ERCrossings scr, int connection, List`1<List`1<Vector3>> vecArray, int leftright)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ODQDQDQDQO
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  Vector3 OODOQDOODO(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, bool flag)
  float OQDDCCCOQD(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p)
  bool OQCDCDOOCD(Vector3 pTarget, Vector3 pSource, Vector3 pCheck)
  Vector3 OQQCQOCCOQ(Vector3 vA, Vector3 vB, Vector3 vPoint)
  Vector3 OQDDDODCOC(Vector3 point, Vector3 pivot, Quaternion angle)
  float GetYAngleByDir(Vector3 dir)
  Vector3 OCOOCOOODQ(Vector3 point, float angle, Vector3 axis)
  Vector3 OQQDCOCCCO(Vector3 source, float angle)
  int ODOCOCDQCO(List`1<Material> mats, Material mat)
  float OCCQDCCCOD(Vector3 fwd, Vector3 targetDir, Vector3 up)
  bool OQOQCCCODC(GameObject go, Bounds& bounds)
  float OOCQOOCOQC(Vector3 pos, ERModularBase scr)
  Vector3 ODCCDOCDQD(Vector3 pos, Vector3 dir)
  Vector3 OCCDCCQDDO(Vector3 pos, Vector3 dir)
  Vector3 OOQODCCOQD(Vector3 pos, ERModularRoad scr)
  int ODQCDQOOCO(int segmentCount, SideObject so, bool newSegment, ERMesh mobject, bool lastSegment, bool skipStartBlend, bool skipEndBlend)
  void OCCQCDQQOQ(Vector3& v2, Vector3& n, Vector3 v, Vector3 dir, Vector2 vec, ERModularRoad roadScr, Vector3 randomRotation)
  void OQODQODDOQ(Vector3& v2, Vector3& n, Vector3 v, Vector3 dir, Vector2 vec, float angle, Vector3 randomRotation)
  void RandomAlignment(Vector3& v2, Vector3& n, Vector3 v, Vector3 dir, Vector2 vec, Vector3 randomRotation)
  void OCCDCDCQQQ(GameObject go, Vector3 v, ERModularRoad roadScr, Vector3 randomRotation)
  void OQQOODCODQ(GameObject go, Vector3 v1, Vector3 v3, Vector3 dir, Vector3 randomRotation)
  void OCOQCDDODO(GameObject go, Vector3 v1, ERModularRoad roadScr, Vector3 randomRotation, Vector3 cp2, Vector3 cp3)
  void InstantiatedRandomRotation(GameObject go, Vector3 v1, ERModularRoad roadScr, Vector3 randomRotation)
  bool RayTriangleOODOQDOODO(Vector3 p1, Vector3 p2, Vector3 p3, Ray ray)
  void OCDODCQDDO(ERModularBase scr, Vector3 v1, Vector3 v2, Single& minY, Single& maxY)
  List`1<Vector3> GetSoSplinePoints(ERModularRoad scr, List`1<float> sidewaysList, List`1& markerInts, List`1& tValues, List`1& markerDistances, List`1& tmpMarkers)
  List`1<Vector3> OOODQCOOCC(List`1<Vector3> points, float tension, float incr)
  List`1<Vector3> OOODQCOOCC(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, float incr)
  List`1<List`1<Vector2>> GetRoadShapeValues(List`1<float> tValues, List`1<float> markerDistances, List`1<List`1<Vector2>> nodeListValues, int startMarker, int endMarker, List`1<Vector2> roadShape, List`1<int> shapeTransitionTypes, bool closedTrack)
  List`1<Vector3> GetSoMarkerPositionVecs(ERModularRoad scr, List`1<float> sidewaysList, List`1& soMarkerDir, List`1& soMarkerInt)
  void CheckGetSoMarkerPositionVecs(ERModularRoad scr, int marker, List`1& soMarkerVecs, List`1& soMarkerDir, List`1& soMarkerInt)
  void TerrainSmooth(Terrain terrain, ERModularRoad road, float size, int type, Int32& smoothStep)
  bool CheckSmoothPoint(int x, int z, float sampleWidth, float sampleHeight, ERModularBase scr)
  float Smooth(int x, int y, TerrainData terrainInfo)
  float Smooth1(float indent, float surrounding, float posY)
  bool CompareVector2List(List`1<Vector2> list1, List`1<Vector2> list2)
  string CheckMesh(GameObject go)
  void OCQOQODOCQ(Mesh m, MeshRenderer ren)
  List`1<float> OCOCDCOQCD(List`1<Vector2> nodes)
  List`1<Vector2> ODCOCDCDQC(List`1<Vector3> vecs, float x)
  bool CheckConnectAngle(Vector3 r1, Vector3 p1, Vector3 p2)
  void OOQQCCOQOC(Transform parent, GameObject& go, string name, List`1<Vector3> OCDCOCQQOO, Material mat, float OOCODCCCOQ, float OQQDDDQDOQ, float OCCOCCCODQ, float ODCCDDDODQ, float ODDQQCDDOD, float OCQCODCDCO, Vector2 OQCOCDQODQ, Vector2 ODDCOOCQCO, float uvRatio)
  bool InIntArray(int v, List`1<int> arr)
  void OOQCCQCCCC(ERModularBase scr)
  OQQCCQCDQQ OQQOCDDDCC(ERModularRoad road, Vector3 pos, QDQDOOQQDQODD rt, int splineIndex)
  int GetEdgePositionByDistance(List`1<Vector3> splinePoints, float distance, int startSplinePoint)
  int OCOODQDDDO(List`1<Vector3> splinePoints, float distance, int startSplinePoint, Vector3& pos)
  int GetSplinePointIndex(List`1<Vector3> splinePoints, float distance, int startIndex, int dir)
  float OQQOQODCCC(Terrain terrain, Vector3 p1, Vector3 p2)
  bool RaycastRoadsSurfaces(int layer, Vector3 pos, Vector2& uv, GameObject& go, bool checkHeightFlag)
  void GetIndexAndFraction(List`1<Vector3> points, float fraction, int index, float dist, Int32& targetIndex, Single& targetFraction, int dir)
  ERPoint ODCDDDCCDD(ERPoint source)
  void MergeVertices(Mesh m)
  int in_array(List`1<Vector3> vecs, List`1<Color> colors, Vector3 v, Color c)
  bool Vector2ListComparer(List`1<Vector2> list1, List`1<Vector2> list2)
  bool FloatListComparer(List`1<float> list1, List`1<float> list2)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERModularRoad
Наследуется от: MonoBehaviour
Поля:
  ERModularBase baseScript
  string roadName
  bool locked
  double roadType
  QDQDOOQQDQODD rt
  int defaultControlType
  bool isCustomRoadSet
  bool isCustomRoad
  List`1<ERMarker> markers
  List`1<ERMarker> tmpMarkers
  List`1<ERMarkerExt> markersExt
  List`1<ERMarkerExt> tmpMarkersExt
  List`1<float> tValues
  float roadWidth
  float faceDistance
  float angleTreshold
  bool resolutionFlag
  bool angleThresholdFlag
  bool closedTrack
  float minNodeDistance
  int nodeWithinRange
  float uvTiling
  bool planarUVs
  bool flipNormals
  int defaultLeftSidewalk
  int defaultRightSidewalk
  bool leftSidewalkActive
  bool rightSidewalkActive
  List`1<ERSideWalkInstance> leftSidewalks
  List`1<ERSideWalkInstance> rightSidewalks
  List`1<OQQCCQCDQQ> exitRoads
  int selectedExit
  bool randomnessFlag
  bool randomnessMarkerFlag
  float randomYPosition
  float randomMinYPosition
  float randomMaxYPosition
  float minRandomYPositionDistance
  float maxRandomYPositionDistance
  float randomMinRotation
  float randomMaxRotation
  float minRandomRotationDistance
  float maxRandomRotationDistance
  bool vegetationStudioMaskLineActive
  float vegetationStudioGrassPerimeter
  float vegetationStudioPlantPerimeter
  float vegetationStudioTreePerimeter
  float vegetationStudioObjectPerimeter
  float vegetationStudioLargeObjectPerimeter
  bool vegetationStudioBiomeMaskActive
  float vegetationStudioBiomeMaskDistance
  float vegetationStudioBiomeMaskBlendDistance
  float vegetationStudioBiomeMaskNoiseScale
  int vertsStats
  int trisStats
  float indent
  float surrounding
  bool followTerrainContours
  float terrainContoursOffset
  List`1<Vector2> roadShape
  List`1<int> roadShapeIntsStart
  List`1<int> roadShapeIntsEnd
  List`1<int> roadShapeIntsStartFull
  List`1<int> roadShapeIntsEndFull
  string roadShapeString
  string roadShapeReversedString
  int roadShapeMatchCount
  int geoReversed
  int roadShapeCols
  bool flipRoadUVs
  int subSegments
  List`1<float> nodeDistance
  List`1<float> roadShapeUVs
  List`1<float> roadShapeUVs2
  List`1<bool> doConnectionTri
  List`1<float> randomRotations
  List`1<bool> hardEdge
  List`1<int> roadShapeMaterialInts
  int subMeshCount
  List`1<int> roadShapeMaterialIntCounts
  List`1<Vector3> controlPoints
  List`1<Vector3> splinePoints
  List`1<float> distances
  List`1<int> markerInts
  List`1<Vector3> insertSplinePoints
  List`1<Vector3> soSplinePoints
  List`1<Vector3> soSplinePointsLeft
  List`1<Vector3> soSplinePointsRight
  List`1<Vector3> soSplinePointsLeftClamped
  List`1<Vector3> soSplinePointsRightClamped
  List`1<float> OQCOCCQCCD
  List`1<float> OQQOODQCCC
  List`1<float> bendAngles
  List`1<Vector3> meshVecs
  List`1<Vector2> meshUVs
  List`1<Vector2> meshUVs2
  List`1<List`1<int>> tris
  List`1<Vector3> surfaceMeshVecs
  List`1<Vector3> leftIndentVecs
  List`1<Vector3> rightIndentVecs
  List`1<Vector3> middleIndentVecs
  List`1<Vector3> leftSurroundingVecs
  List`1<Vector3> rightSurroundingVecs
  List`1<Vector3> leftIndentVecsSV
  List`1<Vector3> rightIndentVecsSV
  List`1<bool> bridgeElement
  List`1<Vector3> vecsBelowTerrain
  List`1<Vector3> treeVecs
  List`1<Vector3> detailVecs
  List`1<int> vegetationTris
  List`1<bool> doLeftSurrounding
  List`1<bool> doRightSurrounding
  float totalDistance
  List`1<int> nodeSplinePoint
  string totalDistanceString
  ERCrossingPrefabs startPrefabScript
  ERCrossingPrefabs endPrefabScript
  int startConnectionSegment
  bool startConnectionFlag
  int endConnectionSegment
  bool endConnectionFlag
  bool startSegmentIntAdjusted
  bool endSegmentIntAdjusted
  bool tCrossingConnected
  Material roadMaterial
  Material[] roadMaterials
  PhysicMaterial roadPhysicsMaterial
  PhysicMaterial[] roadPhysicsMaterials
  Vector3 startDir
  Vector3 endDir
  float startAngle
  float endAngle
  int ᙃ
  int ᙄ
  int startbendLeftRight
  int endbendLeftRight
  float connectionAdjustDistanceStart
  float connectionAdjustDistanceEnd
  Vector3 pivotp
  Vector3 p1
  Vector3 p2
  Vector3 p3
  Vector3 p4
  Vector3 p5
  Vector3 p6
  Vector3 p7
  Vector3 cp1
  Vector3 cp2
  Vector3 cp3
  Vector3 cp4
  Vector3 cp5
  Vector3 cp6
  Vector3 cp7
  Vector3 cp8
  Vector3 cp9
  Vector3 cpcenter
  Vector3 p1Circle
  Vector3 p2Circle
  float cpradius
  float cpangle
  Vector3 dp1
  Vector3 dp2
  Vector3 dp3
  Vector3 dp4
  List`1<Vector3> segPoints
  List`1<Vector3> testPoints
  List`1<Vector3> testPoints2
  Vector3 OQOQODDQCC
  Vector3 ODQCDQCCOD
  Vector3 endLeft
  Vector3 endRight
  Mesh testmesh
  GameObject surfaceMesh
  Vector3 sv1
  Vector3 sv2
  Vector3 prefabIndentLeft
  Vector3 prefabIndentRight
  Vector3 roadIndent1
  int ODQQCDOQOD
  int OCOQCCDDQC
  int ODCDCCQCQC
  int OQDCDCOCQC
  int OQQQOQOQOQ
  int OQOQDOCQCD
  Vector3 tmpPerpCP
  Vector3 tmpCP
  int ᙅ
  int 4AAAA
  float splinePos
  float camHeight
  Vector3[] flyOverPoints
  Vector3 splinePosV3
  List`1<float> markerDistances
  string osmRoadType
  List`1<ERSORoad> soData
  List`1<ERSORoadExt> soDataExt
  String[] sideObjectNames
  int selectedSO
  bool rebuildSos
  bool sosCleared
  bool isSideObject
  int startOffsetActiveMarker
  int endOffsetActiveMarker
  float leftToCenterPerc
  ERRoad road
  bool splatMapActive
  int splatIndex
  int expandLevel
  int smoothLevel
  float splatOpacity
  int layer
  bool isStatic
  string tag
  int tagInt
  bool castShadow
  bool fadeInFlag
  float fadeInDistance
  bool fadeOutFlag
  float fadeOutDistance
  bool doSurroundingSurfaces
  bool terrainDeformation
  bool snapToTerrain
  List`1<ERSOSection> soSectionList1
  List`1<ERSOSection> soSectionList2
  List`1<ERSOSection> soSectionList3
  List`1<ERSOSection> soSectionList4
  List`1<ERSOSection> soSectionList5
  List`1<ERSOSection> soSectionList6
  List`1<ERSOSection> soSectionList7
  List`1<ERSOSection> soSectionList8
  bool snapVertices
  float snapOffset
  bool hasMeshCollider
  bool isUpdated
  bool QDDDQODQQDQDQQD
  int uv4Type
  float detailDistance
  bool startDecalCollapsed
  ERDecal startDecal
  ERDecal endDecal
  GameObject startDecalPrefab
  GameObject startDecalPrefabSource
  bool endDecalCollapsed
  GameObject endDecalPrefab
  GameObject endDecalPrefabSource
  int startDecalID
  int endDecalID
  Vector3 lastForward
  bool roadUpdate
  Bounds bounds
  List`1<Vector3> debugVecs
  List`1<float> debugFloats
  Vector3 exitExtrudeEnd
  Vector3 exitFixedEnd
  Vector3 exitSplitEnd
  Texture2D splatTextureMask
  bool lockUVs
  List`1<ERLaneData> laneData
  bool oneWayRoad
  ERLaneDirection oneWayDirection
Свойства:
Методы:
  bool ODDQCOCDQQ(ERCrossingPrefabs prefabScript)
  void ODQCQCDCDQ(List`1<ERDecal> decalPresets)
  void OOQOCCOOOD()
  float GetRoadWidth()
  void OQQOCOQDCQ(Vector3 pos)
  int OCDQCCCDCC(Vector3 pos)
  void GetInsertPointExt(Vector3 pos, Int32& n1, int marker)
  void OCOOCCODDD(Vector3 pos, Int32& n1)
  void OOODDDDQQO(Vector3 pos, Int32& n1, int selectedMarker, bool sameRoad)
  int OQCCQDDOQD(Vector3 pos)
  int OOCDODCOOD(Vector3 pos, int selectedMarker)
  int HandleAddMarkerAtStart(Vector3 pos, int selectedMarker)
  void ODDDCDQCCO(ERCrossingPrefabs ODCQDOOOCC, int targetElement, bool reverse, bool uvReverse, bool UpdateResolutionFlag)
  void OOOCDCQQCO(bool ignorePrefabAlignment, int selectedMarker)
  void PrintRoadShape(List`1<Vector2> lst)
  void OCQOQCDCQC(bool ignorePrefabAlignment, bool forceAutoRotate)
  void OCODCOOQOC(List`1& vecs, List`1& uvs, List`1& uvs2, int cols, Int32& addedRows, List`1& isPlanar, List`1& colors, Single& uv, Single& uv4)
  void OCDCOOQOQD(Mesh m)
  void OQOOOOOOCQ(ERDecal decal, GameObject& decalPrefab, string name)
  float ODCDOQOOOO(ERDecal decal, float roadWidth)
  void OOOCOODQCO(string type)
  void OQOCCDCCDD(GameObject decal, int index)
  float OCDDDDQDQQ(int startEnd)
  Vector3[] AdjustNormals(Vector3[] normals)
  void AdjustPrefabNormals(List`1<int> roadInts, List`1<int> prefabInts, Vector3[] normals, GameObject prefab, Vector3[] verts)
  bool OQCDCDOOCD(Vector3 pTarget, Vector3 pSource, Vector3 pCheck)
  void OODCOQOQOD(List`1& surfaceVecs, ERCrossingPrefabs prefabScript, Boolean& startSurfacesSafe, float distance, float minIndent)
  void ODOCCQDCQO(List`1& surfaceVecs, ERCrossingPrefabs prefabScript, int el, Boolean& surfacesSafe, float distance, float minIndent)
  bool OQCODQODCO(Vector3 ODCQDOOOCCIndent, Vector3 otherPrefabIndent, Vector3 v)
  void OCQOQQCDOD(List`1<Vector3> surfaceVecs, List`1<Vector2> uvs, int h, List`1<bool> doBridge, Vector3 firstDir, Vector3 lastDir, float indent, float surrounding, List`1<bool> tunnelSegments)
  void InterpolateSurfaces(List`1& surfaceVecs, List`1& uvs, List`1& tris, Vector3 dir, int vecCount, int startEnd, float indent, float surrounding)
  void OOCCDCDCQD()
  List`1<Vector3> OQDDOOOOQD(List`1<ERMarkerExt> markersExt, float faceDist, bool ignorePrefabAlignment, List`1& tValues, List`1& markerDistances, bool forceAutoRotate, List`1& rotationArray, List`1& bendAngles)
  void OCQOOCCQDD(List`1<ERMarkerExt> tmpMarkers, int j, Vector3[] tr, Vector3 circleDir, float totalDist, Vector3& startCP, int startMarker, List`1<Vector3> p)
  void OQDOQOCDDQ(List`1<ERMarkerExt> tmpMarkersExt, int j, Vector3[] tr, Vector3& endCP, int startMarker)
  void OOCCQCCDQC(Vector3& endCP, Vector3 curV3, Vector3 nextV3, Vector3 nextNextV3)
  List`1<float> OQDOOOQODD(List`1<float> tValues, List`1<float> markerDistances, List`1<ERMarkerExt> markers, int startMarker, int endMarker, List`1& OQQOODQCCC, List`1<float> randomRotations)
  void RoadSmoothness(float curDist, ERMarkerExt marker, float totalDistance, Single& randomYDistanceStart, Single& randomYDistanceEnd, Single& randomYDistanceMiddle, Vector3& randomYDistanceV3, Vector3& v, Single& currentRandomYDistance, Single& randomRotationStart, Single& randomRotationEnd, Single& randomRotationMiddle, Vector3& randomRotationV3, Single& currentRandomRotation, List`1& rotationArray)
  List`1<List`1<Vector2>> GetRoadShapeValues(List`1<float> tValues, List`1<float> markerDistances, List`1<ERMarkerExt> markers, int startMarker, int endMarker, List`1<Vector2> roadShape)
  List`1<float> GetSurfaceValues(List`1<float> tValues, List`1<float> markerDistances, List`1<ERMarkerExt> markers, int startMarker, int endMarker, List`1& leftIndents, List`1& rightIndents, List`1& leftSurrounding, List`1& rightSurrounding, float minRequiredIndent)
  bool OCCQQDDDQC(SideObject obj, bool flag)
  bool ODQCOQQDCD(SideObject obj, int marker, bool flag)
  bool ERSetSideObjectOffset(SideObject obj, int marker, OffsetPosition position, float value)
  bool ODQCOQQDCD(SideObject obj, Int32[] markers, bool flag)
  List`1<Vector3> OQOQDCODCD(bool flag)
  void OQOQDQCDCQ()
  List`1<float> ODQQOQQDOO(Vector3[] tr)
  Vector3 OOOOQCODCQ(float offset)
  Vector3 OODODQQQCD(Vector3 P0, Vector3 P1, Vector3 P2, Vector3 P3, float t, float tension)
  Vector3 OCCDDOCCDQ(int startend, ERCrossingPrefabs prefab)
  void OQDQOOQODD(bool lineMask, bool biomeMask)
  void SetMarkerShape(List`1<Vector2> conVecs, Vector3 scale, ERCrossingPrefabs prefab, int connectionIndex)
  void ODQOCQCCDC(ERIndentAlignment value, int marker, ERRoadSide type)
  ERIndentAlignment ERGetIndentAlignment(int marker, ERRoadSide type)
  void FlipRoadUVs(bool update)
  ERRoadType GetRoadType(ERRoadType[] roadTypes)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERCrossingPrefabs
Наследуется от: MonoBehaviour
Поля:
  List`1<QDOODOQQDQODD> crossingElements
  List`1<QDOQDSQOOQDDD> sidewalkControlElements
  List`1<ERConnectionSibling> siblings
  Vector3[] meshVecs
  Vector3[] fullMeshVecs
  Vector3[] tmpMeshVecs
  Vector3[] tmpFullMeshVecs
  Vector3[] tCrossingTmpFullMeshVecs
  Int32[] outerVecInts
  List`1<Vector3> surfaceVecs
  List`1<int> surfaceVecType
  List`1<int> surfaceConnectionInt
  List`1<ERBlendVecs> tCrossingBlendData
  List`1<Vector3> indentVecs
  GameObject sourcePrefab
  int prefabId
  string guid
  List`1<int> prioritySegments
  float minNodeDistance
  int nodeWithinRange
  GameObject sourceObject
  bool meshInstance
  int selectedConnection
  String[] QDOOOQOOQQQQD
  bool deformTerrain
  bool isRoundabout
  bool isERCrossing
  bool isYConnector
  bool isIConnector
  bool isFlexConnector
  bool isSnapConnector
  bool isExitRoadConnector
  Vector3 prefabCenterDummy
  float snapRadius
  ERRoundabouts roundaboutScript
  ERCrossings crossingsScript
  ERIConnector iConnectorScript
  bool isCustomPrefab
  int customPrefabVersion
  bool recalculateNormals
  bool planarUVs
  float planarTiling
  int lastVecRoadIndex
  bool isSceneObject
  GameObject surfaceObject
  Vector3[] surfaceMeshVecs
  Vector3[] tmpSurfaceMeshVecs
  Vector3[] tmpSurfaceVecsTCrossings
  Int32[] surfaceInts
  Vector3 leftBottomCorner
  Vector3 leftTopCorner
  Vector3 rightBottomCorner
  Vector3 rightTopCorner
  bool tCrossing
  bool tStraightBending
  int tCrossingLeftRight
  float tMainRoadWidth
  float tConnectionRoadWidth
  float bottomLeftSidewalkWidth
  float bottomLeftSidewalkOuterOffset
  float bottomLeftSidewalkCurbDepth
  float bottomRightSidewalkWidth
  float bottomRightSidewalkOuterOffset
  float bottomRightSidewalkCurbDepth
  float topLeftSidewalkWidth
  float topLeftSidewalkOuterOffset
  float topLeftSidewalkCurbDepth
  float topRightSidewalkWidth
  float topRightSidewalkOuterOffset
  float topRightSidewalkCurbDepth
  ERConnection connObject
  Vector3 testVec
  List`1<int> surfaceSurroundingInts
  int rotationPriorityElement
  Vector3 cornerPos
  Vector3 mainCorner
  Vector3 connectedCorner
  Vector3 mainVecOuter
  Vector3 connectionVecOuter
  Vector3 indentTopVec
  Vector3 indentRightVec
  Vector3 mainIndent
  Vector3 connectionIndent
  int selectedRotationConnection
  Vector3 bottomVec
  Vector3 rightVec
  Vector3 bottomIndent
  Vector3 rightIndent
  float sAngle
  ERModularBase baseScript
  bool QDQDQOOQQDQOQQ
  Vector3 tp1
  Vector3 tp2
  bool doTerrainDeformation
  bool includeOuterVertices
  bool averageNormals
  float surroundingDistance
  Mesh surfaceMesh
  List`1<Vector3> debugVecs1
  List`1<Vector3> debugVecs2
  bool lightmapAdjusted
  bool isFlexUpdating
  Vector3 oldPosition
  Vector3 oldRotation
  bool lockScale
  float extraIndentMargin
  float indent
  float surrounding
Свойства:
Методы:
  void OCOODQQDQO()
  void OOCQCCQDOQ(Vector3 v1, Vector3 v2, int connectionElement, ERModularRoad road)
  void OCQDDQODCC(int el)
  void OCDOCCODOC(int elInt, float distance)
  void DeformTCossingConnection(int elInt, float distance, float defaultDistance, List`1<Vector3> controlPoints, float multiplyFactor, float angle, Vector3 cpCenterPoint, float curveStrength)
  void OOODCOOOCQ(List`1<int> affectedVecs, List`1<Vector2> tmpVecs)
  void OQOQDDOCDC(bool ignorePriority, ERModularRoad road)
  void OQQODODQCQ()
  void OQQCDODDQQ(bool forceFlag)
  void CheckPlanarUVs()
  bool OOCCOODCOO(List`1<ERModularRoad> affectedObjects, ERModularRoad roadScr)
  void OCCDCDDOOQ(bool flag)
  void OODODQQCOD(int el)
  bool HasConnections()
  bool HasConnectionsFull()
  void OOQOQQODCD()
  void OCODDQDQCC(int el, int startend)
  void PopulateSiblingsList()
  void InitFlexConnector()
  void AttachRoadToFlexConnector(ERModularBase scr, float OCCDOQCODC, Vector3 OCCQOCQOQD)
  void OQQQQOOCDO(int index)
  void SetElementInfo(int index, int sourceIndex)
  void ODDQDDQOOD()
  bool OQCDCDOOCD(Vector3 pTarget, Vector3 pSource, Vector3 pCheck)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERBlendVecs
Наследуется от: object
Поля:
  int verticeIndex
  int meshIndex
  float blendWeight
  int connection
  int blendType
Свойства:
Методы:
  void .ctor(int index, int mIndex, float weight, int conn, int type)
--------------------------------------------------
Класс: EasyRoads3Dv3.QDOODOQQDQODD
Наследуется от: object
Поля:
  Vector3 centerPoint
  Vector3 tmpCenterPoint
  Vector3 stageCenterPoint
  Vector3 tmpStageCenterPoint
  List`1<ERBlendVecs> blendData
  Vector3 controlPointV3
  Vector2 controlPoint
  float blendDistance
  float extendBounds
  List`1<Vector3> blendCornerPoints
  List`1<int> blendCornerPointInts
  List`1<float> blendCornerPointWeights
  List`1<Vector3> blendCornerPointsTransformed
  float blendRatio
  float curveStrength
  List`1<Vector2> roadShapeVecs
  string roadShapeVecsString
  int roadShapeMatchCount
  List`1<float> roadShapeUVY
  List`1<float> roadShapeUVY2
  List`1<bool> hardEdge
  List`1<int> roadShapeMaterialInts
  List`1<Vector2> sidewalkLeftVecs
  List`1<float> sidewalkLeftUVY
  List`1<int> sidewalkLeftMaterialInts
  List`1<Vector2> sidewalkRightVecs
  List`1<float> sidewalkRightUVY
  List`1<int> sidewalkRightMaterialInts
  List`1<ERConnectionVecs> connectionVecs
  List`1<int> connectionVecInts
  List`1<int> fullConnectionVecInts
  List`1<int> sidewalkLeftConnectionVecInts
  List`1<int> sidewalkRightConnectionVecInts
  List`1<bool> doConnectionTri
  List`1<int> outerVecInts
  bool rotationPriority
  float centerPointAngle
  ERModularRoad connectedRoad
  int connectedMarker
  GameObject connectedRoadGO
  bool includeLeftSidewalk
  bool includeRightSidewalk
  Material roadMaterial
  Material[] roadMaterials
  float centerPointPercentage
  float ᙃ
  int leftIndent
  int rightIndent
  int leftSurrounding
  int rightSurrounding
  Vector3 leftIndentV3
  Vector3 leftSurroundingV3
  Vector3 rightIndentV3
  Vector3 rightSurroundingV3
  Vector3 leftRoadpoint
  Vector3 rightRoadpoint
  int leftCornerInt
  int rightCornerInt
  int leftIndentInt
  int rightIndentInt
  int leftInt
  int rightInt
  int leftIntFull
  int rightIntFull
  Vector3 alignmentHandleVec
  float additionalIndentDistance
  float connectionAngle
  Vector3 alignmentHandleVecRotationGizmo
  bool inwards
  double roadType
  double roadTypeTimestamp
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERConnectionData
Наследуется от: object
Поля:
  ERRoad road
  int marker
  int connectionIndex
  Vector3 position
Свойства:
Методы:
  void .ctor(ERRoad rd, int rm, int index)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERRoad
Наследуется от: object
Поля:
  ERModularRoad roadScript
  GameObject gameObject
  string str
Свойства:
Методы:
  void .ctor()
  void .ctor(ERModularRoad scr)
  void AddInititialMarkers(Vector3 pos)
  void AddMarker(Vector3 pos)
  void ClampUVs(bool value)
  void FlipTexture()
  void AddMarkers(Vector3[] pos)
  void InsertMarker(Vector3 pos)
  void InsertMarkerAt(Vector3 pos, int index)
  void DeleteMarker(int i)
  void SetLayer(int layer)
  void SetTag(string tag)
  void SetWidth(float width)
  float GetWidth()
  ERRoadType GetRoadType(ERRoadType[] roadTypes)
  ERRoadType GetRoadType()
  bool SetRoadType(ERRoadType roadType)
  bool SetMarkerControlType(int marker, ERMarkerControlType type)
  bool SetSplineStrength(int marker, float strength)
  float GetSplineStrength(int marker)
  void IsSideObject(bool isSideObject)
  ERRoad InsertIConnector(int index)
  ERRoad InsertIConnector(int index, string connectionName)
  ERRoad InsertIConnector(int index, string connectionName, ERConnection& connection)
  ERRoad InsertIConnectorCore(int index, ERCrossingPrefabs& pScript)
  ERRoad SplitRoad(int markerIndex)
  ERModularRoad SplitRoadExt(int markerIndex)
  void SetSideObjects(List`1<ERSORoadExt> soDataExt)
  void SetSplatmap(bool active)
  void SetSplatmap(bool active, int splatIndex, int expand, int smoothLevel, float opacity)
  void SetMaterial(Material mat)
  void SetMarkerPosition(int marker, Vector3 vec)
  void SetResolution(float res)
  void IsStatic(bool value)
  bool IsStatic()
  float GetResolution()
  void SetAngleThreshold(float res)
  float GetAngleTreshold(float res)
  bool ClosedTrack(bool value)
  void FollowTerrainContours(bool value)
  void SetFollowTerrainContoursOffset(float value)
  void FollowTerrainContourThreshold(float value)
  void FollowTerrainContours(int markerIndex, bool value)
  bool IsClosedTrack()
  void SetMarkerPositions(Vector3[] vecs)
  void SetMarkerPositions(Vector3[] vecs, int index)
  Vector3 GetMarkerPosition(int marker)
  Vector3[] GetMarkerPositions()
  int GetMarkerCount()
  void SetMarkerTilting(float value, int index)
  float GetMarkerTilting(int index)
  void SetMarkerTiltingCenter(float value, int index)
  float GetRadius(int markerIndex)
  float GetMarkerTiltingCenter(int index)
  Color GetVertexColor(int index)
  void SetVertexColor(int index, Color color)
  void SetDistances()
  Vector3 GetPosition(float distance, Int32& currentElement)
  Vector3 GetLookatSmooth(float distance, int currentElement)
  Vector3 GetLookatAtDistanceSmooth(float distance, Int32& currentElement)
  int GetMarkerByPoint(int el)
  Vector3[] GetSplinePointsCenter()
  Vector3[] GetSplinePointsRightSide()
  Vector3[] GetSplinePointsRightSideExt()
  Vector3[] GetSplinePointsLeftSide()
  float SetIndent(float value, int marker)
  float SetIndent(float value, int marker, ERRoadSide type)
  float SetRightIndent(float value, int marker)
  float SetLeftIndent(float value, int marker)
  float SetSurrounding(float value, int marker)
  float SetSurrounding(float value, int marker, ERRoadSide type)
  void SetIndentAlignment(ERIndentAlignment value, int marker, ERRoadSide type)
  ERIndentAlignment GetIndentAlignment(int marker, ERRoadSide type)
  float SetRightSurrouding(float value, int marker)
  float SetLeftSurrouding(float value, int marker)
  Vector3[] GetRightIndentPoints()
  Vector3[] GetLeftIndentPoints()
  Vector3[] GetRightSurroundingPoints()
  Vector3[] GetLeftSurroudingPoints()
  float GetLength()
  float GetDistance()
  float GetDistance(int markerIndex)
  void SideObjectSetActive(SideObject obj, bool value)
  void SideObjectMarkerSetActive(SideObject obj, int marker, bool value)
  void SideObjectMarkerSetActive(SideObject obj, Int32[] markers, bool value)
  void SetSideObjectOffset(SideObject obj, int marker, OffsetPosition position, float value)
  void SetTerrainDeformation(bool value)
  void SetTerrainDeformation(int markerIndex, bool value)
  void SetMeshCollider(bool flag)
  void Refresh()
  ERConnection GetConnectionAtStart()
  GameObject GetConnectionObjectAtStart()
  ERConnection GetConnectionAtStart(Int32& connectionIndex)
  ERConnection GetConnectionObjectAtEnd()
  ERConnection GetConnectionAtEnd()
  ERConnection GetConnectionAtEnd(Int32& connectionIndex)
  GameObject GetConnectionObjectAtEnd(Int32& connection)
  bool ConnectionCheck(ERCrossingPrefabs prefab, int index, int startEnd)
  bool ConnectToStart(ERConnection connectionObject, int connectionIndex)
  bool ConnectToStart(ERConnection connectionObject, int connectionIndex, bool autoAlign)
  bool ConnectToStartExt(ERConnection connectionObject, int connectionIndex, bool autoAlign)
  bool ConnectToEnd(ERConnection connectionObject, int connectionIndex)
  bool ConnectToEnd(ERConnection connectionObject, int connectionIndex, bool autoAlign)
  bool ConnectToEndEx(ERConnection connectionObject, int connectionIndex, bool autoAlign)
  ERConnection AttachToStart(ERConnection connectionObject)
  ERConnection AttachToEnd(ERConnection connectionObject)
  ERConnection AttachToStart(ERConnection OQQCOQOCDO, int connectionIndex)
  ERConnection AttachToEnd(ERConnection connectionInstance, int connectionIndex)
  bool ConnectionMatch(ERConnection connection)
  void SetCustomMarkerPoints(int markerIndex, List`1<Vector3> points)
  ERConnection InsertConnector(ERConnection connectionObject, int markerIndex, int connectionIndex1, int connectionIndex2, ERRoad& road)
  void UnConnectStart()
  void UnConnectEnd()
  bool ConnectionMatch(ERConnection connection, int connectionIndex)
  void SnapToTerrain(bool flag)
  void SnapToTerrain(bool flag, float offset)
  string GetName()
  void SetName(string name)
  Vector2[] GetShapeNodes()
  Vector2[] GetRoadShapeNodes(int markerIndex)
  void SetRoadShapeNodes(int markerIndex, Vector2[] nodes)
  void SetRoadShapeNodes(Int32[] markerIndexes, Vector2[] nodes)
  void Clear()
  void Destroy()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERPoint
Наследуется от: object
Поля:
  double ᙂ
  double ᙃ
Свойства:
  double x
  double y
Методы:
  void set_x(double value)
  double get_x()
  void set_y(double value)
  double get_y()
  void .ctor(double x, double y)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERDebug
Наследуется от: object
Поля:
  List`1<Vector3> leftTHandles
  List`1<Vector3> rightTHandles
Свойства:
Методы:
  void .ctor()
  void .cctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERConnectionGUIStatus
Наследуется от: ValueType
Поля:
  int id
  bool favourite
Свойства:
Методы:
  void .ctor(int _id, bool value)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERCell
Наследуется от: ValueType
Поля:
  int x
  int y
Свойства:
Методы:
  void .ctor(int _x, int _y)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSOSection
Наследуется от: ValueType
Поля:
  Vector3 startPosition
  Vector3 endPosition
  Vector3 p2
  Vector3 p3
  Vector3 ms1
  Vector3 ms2
  Vector3 ms3
  Vector3 ms4
  Vector3 me1
  Vector3 me2
  Vector3 me3
  Vector3 me4
  Vector3 startSplinePointOrig
  float startDistance
  int startSplinePointObject
  int startSplinePoint
  int endSplinePoint
  float startFraction
  float endFraction
  float hsStart
  float hsEnd
  int startSplinePointGeo
  float startDistanceGeo
  int endSplinePointGeo
  float endDistanceGeo
  float maxHeightDifference
  SideObject so
  bool forceSo
  ERRoadSide roadSide
  double soid
  bool acceptBarriers
  bool active
  double linkedSoId1
  double linkedSoId2
Свойства:
Методы:
  void .ctor(Vector3 _startPos, Vector3 _endPos, int _startIndex, int _endIndex, float _startFraction, float _endFraction, float _hsStart, float _hsEnd)
  ERSOSection GetERSOSection(ERModularRoad road, int listIndex, Int32& index, int leftright, String& soType, List`1& sections)
  ERSOSection AdjustEndOffset(ERSOSection target, ERSOSection source)
--------------------------------------------------
Класс: EasyRoads3Dv3.SideObject
Наследуется от: ScriptableObject
Поля:
  string version
  string name
  double id
  double timestamp
  int objectType
  string gameobjectGUID
  string textureGUID
  float m_distance
  float uvx
  float uvy
  int position
  float splinePosition
  int selectedRotation
  float randomYAxisMinRotation
  float randomYAxisMaxRotation
  List`1<Vector2> nodeList
  List`1<float> uvs
  List`1<float> uvDistances
  bool clampUVs
  bool clampUVY
  float clampUVYValue
  float totalDistance
  bool reverseUVs
  bool terrainUVs
  List`1<bool> snapList
  List`1<float> snapWeightList
  List`1<Color> colorList
  string gameobjectStartGUID
  string gameobjectEndGUID
  int align
  int alignPoint
  bool weld
  bool combine
  bool combineInstantiated
  bool markerActive
  int uvType
  float uv
  bool randomObjects
  float forwardStartOffset
  float sidewaysOffset
  float density
  string goPath
  string startPath
  string endPath
  string texturePath
  int terrainTree
  float minScale
  float maxScale
  bool childOrderActive
  int childOrder
  bool meshBoundsAlignment
  float xPosition
  float xPosition2
  int relativeTo
  float yPosition
  float yRotation
  float oldSidwaysDistance
  int sidewaysDistanceUpdate
  float uvYRound
  bool adjustUV
  bool collider
  bool boxcollider
  bool tangents
  GameObject sourceObject
  bool flipMesh
  GameObject startObject
  GameObject endObject
  GameObject connectionObject
  Material material
  List`1<ERMesh> meshObjects
  Vector2 boxSize
  Vector2 boxOffset
  bool includeStartSegment
  float startSegmentOffset
  bool includeStartEdgeTris
  bool includeEndSegment
  float endSegmentOffset
  bool includeEndEdgeTris
  bool adjustToRoadWidth
  float xOffset
  float startOffset
  float endOffset
  float defaultStartOffset
  float defaultEndOffset
  float totalZDistance
  float middleZDistance
  float startZDistance
  float endZDistance
  float minStartZ
  float maxStartZ
  float minMiddleZ
  float maxMiddleZ
  float minEndZ
  float maxEndZ
  bool smoothStart
  bool smoothMiddle
  bool smoothEnd
  GameObject targetObject
  bool bridgeObject
  bool tunnelObject
  bool snapToTerrain
  int layer
  bool deformationObject
  bool isStatic
  bool castShadows
  bool scaleToRoad
  bool splitInBatches
  List`1<GameObject> instantiatedObjects
  int maxVertices
  bool doTestmesh
  Vector3 testMeshPos
  Vector3 randomRotation
  float randomMinRotation
  float randomMaxRotation
  float minRandomRotationDistance
  float maxRandomRotationDistance
  float randomXPosition
  float randomMinXPosition
  float randomMaxXPosition
  float minRandomXPositionDistance
  float maxRandomXPositionDistance
  Vector3 boxColliderScale
  float randomYPosition
  float randomMinYPosition
  float randomMaxYPosition
  float minRandomYPositionDistance
  float maxRandomYPositionDistance
  bool indentController
  bool excludeTerrainSplats
  float x1
  float x2
  float xf1
  float xf2
  float y1
  float bridgeHeight
  int markerSplineController
  float bridgeLength
  float deformationOffset
  float markerIndent
  float markerSurrounding
  Vector3 scale
  float indentExt
  int category
  Texture2D densityMap
  float densitySize
  float densitySize2
  float densityStrength
  float densityStrength2
  float terrainNormal
  float terrainNormal2
  List`1<ERChildsSO> childObjects
  bool autoGenerate
  float heightThreshold
  float autogenerateStartOffset
  float autogenerateEndOffset
  bool snapIndents
  float snapIndentWidth
  bool cutHoles
  float innerStartOffset
  float innerEndOffset
  bool ignoredForRetainingWalls
  float heightMaxThreshold
  float heightMaxStartThreshold
  float heightMaxEndThreshold
  float xThresholdDistance
  float angleThreshold
  int connectionRatio
  bool retainingWall
  int surroundingControl
  int indentControl
  List`1<Vector2> nodeListMirrored
  List`1<float> uvsMirrored
  List`1<float> snapWeightListMirrored
  List`1<Color> colorListMirrored
  bool hasVertexColors
  float deformationOffsetForward
  float deformationOffsetSideways
  int connectionObjectRotation
  bool subMesh
  bool acceptBarriers
  bool activeOnBridges
  bool dualSided
  int mirrorType
  bool snapVertexColors
  float minSnapRange
  float maxSnapRange
  bool clampUV4
  float geoStartOffset
  float geoEndOffset
  float startOverlapOffset
  float endOverlapOffset
  int lodLevels
  List`1<bool> hardEdge
  float hardEdgePadding
  bool startEndCaps
  List`1<Vector2> endCapUVs
  List`1<Vector2> startCapUVs
  List`1<int> startCapTris
  List`1<int> startCapTrisMirrored
  Vector2 startCapUVOffset
  Vector2 endCapUVOffset
  float startCapUVScale
  float endCapUVScale
  float startCapUVRotation
  float endCapUVRotation
  bool namedChilds
  bool startSection
  bool endSection
  bool stepDown
  bool stepUp
  float stepDistance
  float startDirZOffset
  float endDirZOffset
  bool buildOtherSideObject1
  double defaultOtherSoId1
  bool buildOtherSideObject2
  double defaultOtherSoId2
  List`1<double> buildOtherSideObjects
  bool averageDistance
  bool randomUVx
  bool isUsedAsChild
Свойства:
Методы:
  void SetSideObject(int count, int scategory)
  void UpdateTimeStamp()
  void OOCCDCDOQC()
  void OQOQOQOODC()
  void SetMaxVertices()
  bool CheckSOChildActive(List`1<ERSOSection> sections, SideObject so)
  void OOOCDOQOOC(bool updateTimeStamp)
  void OQDODCOODC()
  void OQDDDDOOQD(Vector3 m_testMeshPos, bool updateTimeStamp)
  void OQOODQQQQC(List`1<Vector3> vecs, float startDistance, List`1<Vector3> vecs1, float endDistance, List`1& startArray, List`1& endArray, int section)
  float OQQDDOCDDQ(List`1<GameObject> goObjects, bool rotate180)
  bool HasMissingData(ERMesh meshData, ERMesh meshData2, int ignore)
  void OODOOOQQCO(SideObject so)
  void OCDOCDQQQO(SideObjectLog so)
  void Clear()
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERRoadSide
Наследуется от: Enum
Поля:
  int value__
  ERRoadSide Left
  ERRoadSide Right
  ERRoadSide Both
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERConnectionSibling
Наследуется от: object
Поля:
  string name
  ERModularRoad road
  Transform transform
  Vector3 angleControlPoint
  QDQDOOQQDQODD roadType
  double roadTypeID
  QDQDOOQQDQODD roadTypeAI
  double roadTypeAIid
  bool aIInit
  int roadTypeIndex
  int priorityLevel
  bool priorityRoad
  int prioritySectionStart
  int prioritySectionEnd
  float angle
  float prevAngle
  float roadWidth
  Vector3 controlPoint
  List`1<Vector2> roadShape
  List`1<bool> hardEdge
  List`1<float> roadShapeUVs
  List`1<bool> originalShapeVecs
  bool includeOuterLaneOffset
  float leftFixedDistance
  float rightFixedDistance
  int buildPriority
  bool highPriorityConnection
  int triangulationType
  bool adjustRadius
  float resolution
  int defaultSegments
  int segments
  float radius
  float leftCornerAngle
  float rightCornerAngle
  Vector3 leftCurvatureDir
  Vector3 leftCurvatureVec
  Vector3 rightCurvatureDir
  Vector3 rightCurvatureVec
  ERFlexConnectionType leftConnectionType
  ERFlexConnectionType rightConnectionType
  Vector3 cp
  Vector3 oldCP
  Vector3 cp1
  Vector3 lStart
  Vector3 lEnd
  Vector3 rStart
  Vector3 rEnd
  Vector3 ip
  Vector3 dir
  Vector3 outerCorner
  float cornerHandleScale
  List`1<Vector3> leftRoundingPoints
  List`1<Vector3> rightRoundingPoints
  List`1<Vector3> innerRoundingPoints
  List`1<Vector3> priorityLeftPoints
  List`1<Vector3> priorityRightPoints
  List`1<Vector3> priorityPointsMain
  List`1<Vector2> priorityPointsMainUVs
  List`1<List`1<Vector3>> roadVecs
  List`1<List`1<Vector3>> roadVecsRight
  List`1<List`1<Vector3>> roadVecsLeft
  List`1<List`1<Vector2>> roadUVs
  List`1<List`1<Vector2>> roadUVsLeft
  List`1<List`1<Vector2>> roadUVsRight
  List`1<int> connectionVecInts
  List`1<float> roadVecPerc
  int leftFixedIndex
  int rightFixedIndex
  int middleIndex
  int middleIndentIndexLeft
  int middleIndentIndexRight
  ERSideWalk leftSidewalk
  ERSideWalk rightSidewalk
  bool leftSidewalkActive
  bool rightSidewalkActive
  List`1<List`1<Vector3>> leftSidewalkVecs
  List`1<List`1<Vector2>> leftSidewalkUVs
  List`1<List`1<Vector3>> rightSidewalkVecs
  List`1<List`1<Vector2>> rightSidewalkUVs
  List`1<Vector3> leftIndentvecs
  List`1<Vector3> rightIndentvecs
  List`1<Vector3> leftSurroundingvecs
  List`1<Vector3> rightSurroundingvecs
  int leftIndent
  int rightIndent
  Vector3 leftIndentV3
  Vector3 rightIndentV3
  int leftSurrounding
  int rightSurrounding
  Vector3 leftSurroundingV3
  Vector3 rightSurroundingV3
  float uvRatio
  float uvy
  int mainRoadConnectionEdgeDecal
  GameObject mainConnectionDecal
  List`1<Vector3> mainConnectionDecalVecs
  Vector3 mainConnectionDecalEndDir
  int middleInt
  bool primaryPriorityConnection
  bool secondaryPriorityConnection
  bool shapeSubSegments
  List`1<int> normalIndexes
  bool primarySection
  ERLaneData laneData
  bool hasChanged
Свойства:
Методы:
  void Clear()
  void Init(ERModularRoad scr, float angle, Vector3 controlPoint, Transform transform)
  ERConnectionSibling CreateInstance(ERModularRoad scr, float angle, Vector3 controlPoint, Transform transform, List`1<ERConnectionSibling> siblings)
  void GetRoadTypeIndex(double id, List`1<QDQDOOQQDQODD> types)
  void ODDQDOCDCC(int index, List`1<QDQDOOQQDQODD> types)
  void OCQQDCCOQO(List`1<QDQDOOQQDQODD> types)
  void BuildRoadShape()
  void SetPriorityConnection(List`1<ERConnectionSibling> siblings, int index)
  Vector2 GetVector2(Vector2 v1, Vector2 v2, Vector2 v3)
  void OCQODDOQQC(double type, List`1<QDQDOOQQDQODD> roadTypes)
  Vector3 GetAngleControlPoint(Vector3 cp, Vector3 p0, Vector3 p1, Vector3 p2)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.QDQDOOQQDQODD
Наследуется от: object
Поля:
  string roadTypeName
  double id
  double timestamp
  float roadWidth
  float faceDistance
  float angleTreshold
  float uvTiling
  int uv4Type
  ERRoadWayType type
  float detailDistance
  bool planarUVs
  float outerIndent
  bool roadShapeDataActive
  ERRoadShape roadShapeData
  float minSpeed
  float maxSpeed
  float speedLimit
  List`1<Vector2> roadShape
  List`1<Vector2> roadShapeExt
  List`1<Vector2> roadShapeExt2
  List`1<bool> doConnectionTri
  List`1<bool> doConnectionTriExt
  List`1<float> roadShapeUVs
  List`1<float> roadShapeExtUVs
  List`1<float> roadShapeExtUVs2
  List`1<float> roadShapeUVs2
  bool preserveUVs
  List`1<bool> hardEdge
  string roadShapeVecsString
  double defaultSidewalk
  bool sidewalks
  float sidewalkHeight
  float sidewalkWidth
  Material roadMaterial
  Material[] roadMaterials
  PhysicMaterial roadPhysicsMaterial
  PhysicMaterial[] roadPhysicsMaterials
  Material connectionMaterial
  bool isSideObject
  bool isCustomRoad
  int subSegments
  List`1<ERSORoad> soData
  List`1<ERSORoadExt> soDataExt
  List`1<ERSORoadLog> soDataLog
  int layer
  bool isStatic
  string tag
  bool splatMapActive
  int splatIndex
  int expandLevel
  int smoothLevel
  float splatOpacity
  bool followTerrainContours
  float terrainContoursOffset
  bool terrainDeformation
  float defaultIndent
  float defaultSurrounding
  bool castShadow
  bool randomnessFlag
  float randomYPosition
  float randomMinYPosition
  float randomMaxYPosition
  float minRandomYPositionDistance
  float maxRandomYPositionDistance
  float randomMinRotation
  float randomMaxRotation
  float minRandomRotationDistance
  float maxRandomRotationDistance
  bool vegetationStudioMaskLineActive
  float vegetationStudioGrassPerimeter
  float vegetationStudioPlantPerimeter
  float vegetationStudioTreePerimeter
  float vegetationStudioObjectPerimeter
  float vegetationStudioLargeObjectPerimeter
  bool vegetationStudioBiomeMaskActive
  float vegetationStudioBiomeMaskDistance
  float vegetationStudioBiomeMaskBlendDistance
  float vegetationStudioBiomeMaskNoiseScale
  List`1<ERDecal> decalPresets
  List`1<ERDecalClass> decalClassPresets
  double defaultRamp
  int extrusionType
  float extrusionDistance
  float fixedDistance
  float connectionAngle
  float connectionRadius
  int isRoadShape
  int controlType
Свойства:
Методы:
  void RoadTypeUpgrade()
  int GetTagIndex(String[] tags)
  int GetTagIndex(String[] tags, string tag)
  void OQQOCCODOD()
  void .ctor(int count)
  void UpdateTimestamp()
  bool ODQDDOCDDC(ERModularBase scr)
  String[] RoadNames(List`1<QDQDOOQQDQODD> roadTypes)
  String[] Nodes(ERRoadShape data)
  String[] LaneNodes(ERRoadShape data)
  GUIContent[] LaneNodesContents(ERRoadShape data)
  void ODQQQODOQD()
  int SetRoadType(List`1<QDQDOOQQDQODD> roadTypes, double roadType)
  void UpdateUVs()
  QDQDOOQQDQODD GetRoadTypeElByID(List`1<QDQDOOQQDQODD> roadTypes, double id)
  int ODDQDCOODD(List`1<QDQDOOQQDQODD> roadTypes, double id, String[]& ramps, QDQDOOQQDQODD[]& rampTypes)
  int GetRoadTypeByID(List`1<QDQDOOQQDQODD> roadTypes, double id)
  bool OOQDCODDCO(List`1<QDQDOOQQDQODD> roadTypes, double id, QDQDOOQQDQODD& motorwayLink)
  String[] ODODCOQODO(List`1<QDQDOOQQDQODD> roadTypes)
  bool GetTerrainDeformationByID(List`1<QDQDOOQQDQODD> roadTypes, double id, Int32& element)
  void UpdateUVTiling(List`1<QDQDOOQQDQODD> roadTypes, double id, float tiling)
  void UpdateResolution(List`1<QDQDOOQQDQODD> roadTypes, double id, Single& resolution, Single& threshold)
  void OCDOCDQQQO(QDQDOOQQDQODD sourcePreset, List`1<SideObject> sceneSideObjects, List`1<SideObjectLog> projectSideObjects, bool copyShapeData)
  void OOOCDCQQCO(QDQDOOQQDQODD sourcePreset, ERModularRoad road, bool update, int customShapeHandling, bool checkRoadWidth)
  void AssignSideObjects(ERModularBase scr, int roadTypeInt, ERModularRoad OCCQOOOQQO)
  void HasActiveSideObjects(List`1<ERSORoadExt> sos1, List`1<ERSORoadExt> sos2, Boolean& flag1, Boolean& flag2)
  int OOOOCQCDDC(int index, ERLaneDirection direction)
  bool ODCDDDQCQQ(QDQDOOQQDQODD rt1, QDQDOOQQDQODD rt2)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERRoadWayType
Наследуется от: Enum
Поля:
  int value__
  ERRoadWayType Primary
  ERRoadWayType Secondary
  ERRoadWayType Tertiary
  ERRoadWayType Path
  ERRoadWayType MotorwayRamp
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERFlexConnectionType
Наследуется от: Enum
Поля:
  int value__
  ERFlexConnectionType Priority
  ERFlexConnectionType SameType
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSideWalk
Наследуется от: object
Поля:
  string name
  double id
  double timestamp
  float sidewalkWidth
  float curbHeight
  float curbDepth
  bool beveledCurb
  float beveledHeight
  float beveledDepth
  bool outerCurb
  bool roadSideCurbUVControl
  bool outerSideCurbUVControl
  Material material
  bool hardEdges
  List`1<Vector2> shape
  List`1<float> sidewalkUVs
  List`1<float> curbUVs
  List`1<bool> doConnectionTri
  Rect tileRect
  float tileSize
  float tiling
  float uvRatio
  float minEnd
  float maxEnd
  bool lockUVs
  float cornerRadius
  int cornerSegments
  float innerSegmentDistance
Свойства:
Методы:
  ERSideWalk CreateInstance(int count)
  void UpdateTimestamp()
  String[] SidewalkNames(List`1<ERSideWalk> sidewalks)
  void CopySidewalk(ERSideWalk source, ERSideWalk target)
  void RefreshSidewalks(List`1<ERSideWalk> sidewalks)
  void OOQQDCCDQO()
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERLaneData
Наследуется от: object
Поля:
  Vector3[] points
  List`1<ERLaneConnector> connectors
  ERLane laneType
  int laneIndex
  ERLaneDirection direction
Свойства:
Методы:
  ERLaneData CreateInstance()
  ERLaneData OOOOCQCDDC(List`1<ERLaneData> laneData, int index)
  bool Exists(int index, int lane)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERModularBase
Наследуется от: MonoBehaviour
Поля:
  int updateInt
  bool newSplatMapRestoreCode
  int toolbarInt
  int oldToolbarInt
  int roadToolbarInt
  int markerToolbarInt
  Texture[] menuTexs
  Texture[] subMenuTexs
  GameObject cprefab
  Texture nodeHandleTexture
  Texture lockedTexture
  Texture unLockedTexture
  Texture favOffTexture
  Texture favOffFreeTexture
  Texture favOnTexture
  Texture selRoadTexture
  Texture headerTexture
  Texture sceneGUITex
  Texture soIcon
  Transform roadObjectsParent
  Transform connectionObjectsParent
  GameObject OCOQDODDQQ
  List`1<QDQDOOQQDQODD> roadTypes
  int selectedRoadType
  int selectedNewRoadType
  List`1<QDQDOOQQDQODD> inspRoadTypes
  List`1<int> inspRoadTypeInts
  List`1<ERDecal> decalPresets
  float roadWidth
  Material roadMaterial
  Material crossingMaterial
  Material roundAboutMaterial
  Material roundAboutConnectionMaterial
  Material roundAboutRoadMaterial
  Material sidewalkMaterial
  Material targetMaterial
  Terrain sourceTerrain
  String[] roadMaterials
  String[] connectionMaterials
  int selectedMaterial
  int selectedConnectionMaterial
  List`1<ERMaterial> materials
  int selectedRoadRoadType
  bool roadOptions
  bool sidewalkOptions
  bool markerOptions
  bool showRoadSideObjects
  bool markerSOOptions
  bool roadTerrainOptions
  bool camFlyOver
  int selectedRoadMaterial
  int roadTextureInfoIndex
  Texture2D selectedRoadTexture
  float selectedRoadWidth
  float selectedRoadLeftOffset
  float selectedRoadRightOffset
  float selectedRoadLeftInnerOffset
  float selectedRoadRightInnerOffset
  int selectedCrossingMaterial
  int crossingTextureInfoIndex
  int handleSelection
  int positionHandleSelection
  bool markerDirXZ
  GameObject defaultCrossing
  GameObject defaultTCrossing
  GameObject defaultCulDeSac
  GameObject defaultRoundabout
  Texture2D tex
  Texture2D infoTexture
  bool showAllPrefabs
  bool standardPrefabsFlag
  bool sceneSettingsFoldOut
  bool sceneRoadsFoldOut
  bool scenePrefabsFoldOut
  bool sidewalksFoldOut
  bool terrainManagementFoldOut
  bool importRoadDataFoldOut
  bool lodGroupsFoldOut
  bool defaultMaterialsFoldOut
  bool aiTrafficFoldout
  bool kmlFlag
  bool osmFlag
  bool useOSMHeights
  float heightRatio
  bool dynamicPrefabsFoldOut
  bool customPrefabsFoldOut
  List`1<ERConnectionGUIStatus> dynamicFavList
  List`1<ERConnectionGUIStatus> customFavList
  float prefabsDisplayType
  bool ignoreTerrainAlerts
  double osmTerrainTopLon
  double osmTerrainBottomLon
  double osmTerrainLeftLat
  double osmTerrainRightLat
  float terrainMinIndent
  float minIndent
  float minSurrounding
  float maxIndentSurrounding
  float terrainY
  float terrainDetailSplatX
  float terrainDetailSplatY
  Vector3 detailOffsetVec
  float raise
  Vector3 baseVector
  bool mirrorCrossings
  String[] terrainNames
  Terrain[] terrainObjects
  String[] terrainSplatTextures
  Terrain activeTerrain
  float activeTerrainY
  int selectedTerrain
  bool selectedRoadsOnly
  bool terrainDone
  bool enableBackWithoutRestore
  float detailDistance
  float treeDistance
  bool doHeightmap
  bool doTrees
  bool soTrees
  bool doDetail
  Rect terrainRect
  List`1<GameObject> tunnelObjects
  List`1<GameObject> surfaceObjects
  float preserveTerrainFloat
  float terrainSmoothIndentDistance
  float terrainSmoothSurroundingDistance
  int indentSmoothStep
  int surroundingSmoothStep
  bool doTangents
  bool doLightmapUVs
  bool doLODGroups
  bool doSplatmaps
  int sLayer
  List`1<Vector3> terrainHits
  List`1<Vector3> osmCrossingPoints
  List`1<CrossingCornerClass> cornerPresets
  List`1<SidewalkPresetClass> sidewalkPresets
  List`1<ERSideWalk> sidewalks
  int selectedSidewalk
  int selectedRoadTypeSidewalk
  int osmMotorway
  int osmMotorwayLink
  int osmTrunk
  int osmPrimary
  int osmSecondary
  int osmTertiary
  int osmUnclassified
  int osmResidential
  int osmService
  int osmTrack
  int osmPath
  int osmWalkway
  int osmRaceway
  int osmHighwayStringInt
  bool osmMotorwayFlag
  bool osmMotorwayLinkFlag
  bool osmTrunkFlag
  bool osmPrimaryFlag
  bool osmSecondaryFlag
  bool osmTertiaryFlag
  bool osmUnclassifiedFlag
  bool osmResidentialFlag
  bool osmServiceFlag
  bool osmTrackFlag
  bool osmPathFlag
  bool osmWalkwayFlag
  bool osmRacewayFlag
  string osmHighwayString
  int kmlRoadType
  bool lodGroups
  int LODLevels
  List`1<float> LODLevelValues
  List`1<float> LODLevelResolution
  bool embedRoadShape
  bool hideSurfaces
  bool showSurfaces
  bool useLightProbes
  bool hideLockedObjects
  bool ODQCODODDD
  bool isInBuildMode
  bool progressFlag
  int progressTerrain
  float progressStatus
  float progressMax
  List`1<SideObject> QOQDQOOQDDQOOQ
  String[] sideObjectNames
  int selSideObject
  int selSubSideObject
  string soID
  string sideObjectName
  int sideObjectType
  GameObject sideObjectSource
  GameObject soEndObject
  int sideObjectTerrainVegetationInt
  int prefabChildHandling
  float sideObjectDistance
  int soYAxisRotation
  float soSidewaysDistance
  int soSidewaysDistanceHandling
  float soDensity
  float soOffset
  int soTerrainAligment
  bool soCombine
  bool soWeld
  int soControllerType
  Material soMaterial
  float soXPosition
  float soYPosition
  bool soMarkerActive
  bool enableSOHandles
  bool enableShapeNodeHandles
  bool enableSOShapeNodeHandles
  bool displayCriticalPoints
  bool highlightRoad
  bool highlightIndents
  bool highlightSurroundings
  bool highlightSideObject
  Color highlightRoadColor
  Color highlightIndentColor
  Color highlightSurroundingColor
  bool onlyShowSelectedRoad
  List`1<GameObject> soDeformationObjects
  List`1<GameObject> soSplatmapObjects
  bool buildSOinEditMode
  bool tangentsInEditMode
  bool calculateSmoothNormals
  bool importSideObjectsAlert
  bool importRoadPresetsAlert
  bool importCrossingPresetsAlert
  bool importSidewalkPresetsAlert
  bool updateSideObjectsAlert
  bool updateRoadPresetsAlert
  bool updateCrossingPresetsAlert
  bool updateSidewalkPresetsAlert
  float waypointDistance
  List`1<ERModularRoad> RoadObjectsSoUpdates
  string assetsFolderID
  GameObject meshSurface
  Collider meshTerrainCollider
  float markerScale
  float markerDistance
  float minMarkerDistance
  float maxMarkerDistance
  bool debugFlag
  List`1<Vector3> leftTHandles
  List`1<Vector3> rightTHandles
  float roadNetworkY
  bool ignoreMinIndents
  Vector3 zoomStart
  Vector3 zoomEnd
  Vector3 lookAtStart
  Vector3 lookAtEnd
  Quaternion zoomRot
  float zoomStartTime
  bool hideSurfaceHandles
  bool dirtyBool
  bool dirtyOnSceneBool
  bool forceRoadNetworkSelect
  bool ODQDQDQDCO
  ERCrossingPrefabs OCOQDODDQQScript
  ERCrossings OOOQDOQCCOCrossingsScript
  ERCrossingPrefabs OOOQDOQCCOScript
  int OCOQDODDQQElement
  int OQCOQCOQQQ
  ERModularRoad OCCQOOOQQO
  ERModularRoad OODDQOOCOD
  int OCODDDQOQC
  int selectedRoadSOMarker
  int selectedMarkerNode
  List`1<int> selectedMarkerNodes
  int selectedMarkerSONode
  List`1<int> selectedMarkerSONodes
  List`1<SelectedObject> selectedObjects
  int selectedExitRoad
  bool newRoadFlag
  bool roadTypeUpdateFlag
  List`1<ERModularRoad> roadScripts
  List`1<ERCrossingPrefabs> prefabScripts
  bool globalGridActive
  bool gridGUIActive
  Color globalGridColor
  float globalGridSize
  float globalGridRadius
  float globalGridRotation
  Vector2 gridOffset
  Vector3 ggTL
  Vector3 ggBL
  Vector3 ggBR
  bool localGridActive
  List`1<ERLocalGrid> localGrids
  int selectedLocalGrid
  MethodInfo crMethod
  MethodInfo upMethod
  MethodInfo hmMethod
  MethodInfo rmMethod
  MethodInfo crBiomeMethod
  MethodInfo upBiomeMethod
  MethodInfo rmBiomeMethod
  MethodInfo thMethodGet
  MethodInfo thMethodSet
  ERSideWalk sw
  bool roadUpdated
  bool clampUVs
  int soCategoryInt
  int soRoadCategoryInt
  float minRoadWidth
  float maxRoadWidth
  float maxCurbHeight
  float minCornerRadius
  float maxCornerRadius
  GameObject SoTestObject
  bool lockRoadNetwork
  bool showNotifications
  bool multipleTerrainsWarning
  Texture2D[] OCDCDDQDQC
  Texture2D[] OCDCOCCCCC
  int textureCounter
  bool AssembliesSet
  bool vegetationStudio
  bool vegetationStudioPro
  bool vegetationStudioActive
  bool vegetationStudioMaskLineActive
  float vegetationStudioGrassPerimeter
  float vegetationStudioPlantPerimeter
  float vegetationStudioTreePerimeter
  float vegetationStudioObjectPerimeter
  float vegetationStudioLargeObjectPerimeter
  bool vegetationStudioBiomeMaskActive
  float vegetationStudioBiomeMaskDistance
  float vegetationStudioBiomeMaskBlendDistance
  float vegetationStudioBiomeMaskNoiseScale
  bool aiTraffic
  bool aiMatchingLanesOnly
  bool aiconnectNonMatchinglaneCounts
  bool aiIgnoreConnections
  bool displayLaneData
  int rightHandDriving
  Color leftLaneHandleColour
  Color rightLaneHandleColour
  Color laneHandleSelectedColour
  float roadUvThreshold
  int updateQueue
  bool checkPresets
  bool logChange
  bool debugMode
  bool RoadNetworkInitFlag
  RoadUpdate onRoadUpdate
  OnBuildMode onBuildModeEnter
  List`1<GameObject> excludeFromSelection
  GameObject addExcludeFromSelection
  Color shapeUVColor
  Color startCapColor
  Color endCapColor
  Material soSectionMaterial
  bool v32b4Flag
Свойства:
Методы:
  void OnBuildModeEnter()
  void OnRoadUpdate(ERRoad road)
  void RoadNetworkInit()
  void UpdateQueue()
  void SetRoadTypeList()
  void UpdateRoadTypeStatus()
  void OCOCQOODCO()
  void OCQODDDCQQ()
  void ODODOQOODO()
  void OOCQCCCQCD()
  void OQDQQODDCD(GameObject go, Vector3 pos)
  void ODCDQQCQOC()
  ERCrossingPrefabs OCDQQCQCQQ(GameObject prefab, ERModularRoad OCCQOOOQQO, int OCODDDQOQC, int connectionSegment)
  ERCrossingPrefabs AttachConnector(ERModularRoad OCCQOOOQQO, int OCODDDQOQC)
  void OCCDCDQOOD(ERModularRoad OCCQOOOQQO, int selectedMarker)
  int OOOCOQQDQO(ERModularRoad OCCQOOOQQO, ERCrossingPrefabs prefabScript, int OCODDDQOQC, int startConnection, bool swapFlag)
  int OOQQQQCCOC(string roadShapeString, List`1<string> strings, List`1<QDOODOQQDQODD> crossingElements)
  GameObject OOQDQOOQQQ(GameObject prefab, Vector3 hitPos, GameObject& newPrefab, ERCrossingPrefabs& prefabScript, ERCrossings& crossingsScript)
  void OQOCDOOQCQ(ERCrossingPrefabs prefabScript)
  void OQCDDCDDQC(GameObject newPrefab, GameObject prefab)
  void ODDQCOQCQC()
  List`1<ERTerrain> OODQQODOOC(Boolean& multTerrainResFlag)
  void ODDCCODOOC()
  void OQQQDCQOOC(bool restoreTerrain)
  void OQQOOCQQCD(Vector3 pos)
  void OCDDQOCDCO(Vector3& pos)
  Vector3 OQOODODDQO(Vector3 pos)
  Vector2 GetTerrainUV(Vector3 pos)
  Terrain OQOQDDOQOD(Vector3& pos, bool setSelected)
  void OQCQQQDQQD()
  void UpdateLODLevels(int levels)
  void UpdateSideObjectsInScene()
  void OOCDOOCQQC()
  void OQQDDOQQOO()
  ERRoadType[] GetRoadTypes()
  ERRoadType GetRoadTypeByName(string name)
  string GetNewRoadName(double id)
  string GetRoadNameByID(double id)
  SideObject OQCDCQCDCQ(string name)
  void InitLoadImage(string url)
  IEnumerator LoadImage(string url)
  IEnumerator BuildTerrainRoutine(ERRoadNetwork roadNetwork)
  float OCCQDCCCOD(Vector3 fwd, Vector3 targetDir, Vector3 up)
  void .ctor()
  void .cctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERRoadShape
Наследуется от: ValueType
Поля:
  List`1<Vector2> nodes
  List`1<bool> hardEdge
  int priorityNodeIndexLeft
  int priorityNodeIndexRight
  List`1<Vector3> nodesV3
  List`1<ERLane> lanes
  int leftLanes
  int rightLanes
  bool symmetrical
  float leftSidewalkOffset
  float rightSidewalkOffset
  int outerLaneMarkingLeftIndex
  bool includeOuterlaneLeftInShape
  bool includeOuterlaneRightInShape
  int outerLaneMarkingRightIndex
  int outerOuterLaneMarkingLeftIndex
  int outerOuterLaneMarkingRightIndex
  int selectedNode
  int selectedLaneNode
  int isSymmetrical
  bool isset
Свойства:
Методы:
  void .ctor(float width)
  void OCCQQDOQOD(List`1<Vector2> _nodes)
  void Copy(ERRoadShape shape)
  void IsSymmetrical()
--------------------------------------------------
Класс: EasyRoads3Dv3.ODCCODOCQQ
Наследуется от: MonoBehaviour
Поля:
  GameObject rtg
  GameObject swgLeft
  GameObject swgRight
  Vector3 camdir
  List`1<List`1<Vector3>> vecs
Свойства:
Методы:
  void OODDQCQQDQ(ERModularBase baseScript, ERModularRoad scr)
  void CleanMeshData(Mesh m, List`1<List`1<int>> mtris, List`1& vecs, List`1& uvs, List`1& uvs2, List`1& normals, List`1& tangents, List`1& colors, List`1& tris)
  void OCDCQCOQQO(Mesh mesh)
  void OOCQQCOQQC(Mesh mesh)
  void GenerateWaypoints(ERModularRoad scr, float distance)
  void OOQDCQODOD(List`1<SelectedObject> selectedObjects, int alignType)
  void OOCDQDQDCQ(GameObject go, SideObject so, List`1<Vector3> vecs, List`1<Vector2> uvs, List`1<Vector2> uvs1, List`1<Color> color, List`1<Vector4> tangents, List`1<int> triangles, List`1<Vector3> normals, List`1<int> normalArray1, List`1<int> normalArray2)
  void GetRoadShape(float width, int subSegments, List`1& roadShape, List`1& uvs, List`1& uvs1, float dir)
  void GetRoadShape(float oldWidth, QDQDOOQQDQODD roadType, float dir)
  void UpdateRoadType(ERModularBase scr, int index)
  bool UpdateRoadTypeByRoad(ERModularBase scr, ERModularRoad road, int index, QDQDOOQQDQODD type)
  int OCDQQQDDQO(List`1<Vector2> roadShape)
  void OCDQCDQQDD(List`1& tmpMarkersExt)
  void ODOCDOQDDQ(QDQDOOQQDQODD roadType)
  void RebuildMainRoadShape(QDQDOOQQDQODD roadType)
  void OQDCDQDCQC(QDQDOOQQDQODD roadType, List`1& roadShape, List`1& roadShapeUVs, List`1& doConnectionTri, List`1& hardEdge, Int32& currentMostLeftInt, Int32& currentMostRightInt, Int32& sectionRoadShapeCols, int leftright, int lineIndexTarget, bool transition, List`1<Vector2> origRoadShape)
  List`1<int> OODCQDDQDC(List`1<Vector2> _rs1, List`1<bool> _hd1, int cols1, List`1<Vector2> _rs2, List`1<bool> _hd2, int cols2, List`1& tris, bool flipNormals, int vecCount, int i1, int i2, int last1, int last2)
  void OOQCCCDODD(QDQDOOQQDQODD roadType, List`1& roadShapeVecs, List`1& roadShapeUVs, List`1& hardEdge, Int32& rightOuterIndex)
  void VisualizeRoadType(ERModularBase baseScript, GameObject prefab, QDQDOOQQDQODD rt, Vector3 pos, Vector3 dir)
  void ODODDQCQQC(QDQDOOQQDQODD rt)
  void OODDDCCOQO(List`1<Vector3> cvecs, float OOCODCCCOQ, float OQQDDDQDOQ, float OCCOCCCODQ, List`1<float> breakpoints, float OQQOOQOOQQ, Vector3 startDir, Vector3 endDir, List`1& vecs, float length, Vector3 firstRounding, float uvRatio)
  void RoadShapeChangeTriangulation(List`1<Vector3> shape1, List`1<Vector3> shape2, int startIndex1, int endIndex1, int startIndex2, int endIndex2, List`1& tris)
  void .ctor()
  void .cctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERExitType
Наследуется от: Enum
Поля:
  int value__
  ERExitType RightExit
  ERExitType RightEntry
  ERExitType LeftExit
  ERExitType LeftEntry
  ERExitType BusStop
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ConnectedTo
Наследуется от: Enum
Поля:
  int value__
  ConnectedTo Start
  ConnectedTo End
  ConnectedTo None
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERDecalPosition
Наследуется от: Enum
Поля:
  int value__
  ERDecalPosition Start
  ERDecalPosition End
  ERDecalPosition Both
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.OffsetPosition
Наследуется от: Enum
Поля:
  int value__
  OffsetPosition Start
  OffsetPosition End
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERTrafficDirection
Наследуется от: Enum
Поля:
  int value__
  ERTrafficDirection LHT
  ERTrafficDirection RHT
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERIndentAlignment
Наследуется от: Enum
Поля:
  int value__
  ERIndentAlignment Road
  ERIndentAlignment Terrain
  ERIndentAlignment Surrounding
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERLocalGrid
Наследуется от: ScriptableObject
Поля:
  int id
  string name
  bool gridActive
  bool gridGUIActive
  Color gridColor
  float gridSize
  float gridRadius
  float gridRotation
  Vector3 tl
  Vector3 bl
  Vector3 br
  float xOffset
  float yOffset
  Vector3 OOCDQCOOQC
Свойства:
Методы:
  void Init(ERModularBase scr)
  ERLocalGrid CreateInstance(ERModularBase scr)
  String[] GridNames(ERModularBase scr)
  void SetOffsets(ERModularBase scr, Vector3 pos, Vector3 v)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERDecal
Наследуется от: ScriptableObject
Поля:
  int id
  string name
  ERDecalType type
  double roadType1
  double roadType2
  int connection
  GameObject decalPrefab
  float baseWidth
  float meshWidth
  float scale
  Vector3 localScale
  int priority
  bool collapsed
  float heightOffset
  Material material
  Vector2 uvLeftTop
  Vector2 uvRightBottom
  float width
  float length
  float xOffset
  float startOffset
  float endOffset
  float endRotation
  List`1<Vector2> uvBreakPoints
  List`1<float> distances
  ERDecalPosition position
  Vector2 uvLeftTop1
  Vector2 uvRightBottom1
  Vector2 uvLeftTop2
  Vector2 uvRightBottom2
  float width1
  float width2
Свойства:
Методы:
  void Init(GameObject prefab, float baseWidth)
  ERDecal CreateInstance(GameObject prefab, float baseWidth)
  void CopyDecal(ERDecalClass source, ERDecal target)
  void OODDOCCOCC(ERDecal source, ERDecal target)
  void OCQCQCOCOO()
  ERDecal OCQCDQDODQ(int id, List`1<ERDecal> decalPresets)
  List`1<ERDecal> FilterByType(List`1<ERDecal> lst, ERDecalType type)
  String[] OQDOCOQOQD(List`1& decals, string firstItem, int id1, int id2, Int32& _index1, Int32& _index2, ERDecalType type, ERDecalPosition position)
  int ODCOCCOOOO(List`1<ERDecal> decals, int tindex, ERDecalType type)
  GameObject[] OCCODDOQDO(List`1<ERDecal> decals, List`1& priority, List`1& scale)
  void MatchDistances(List`1& distances, List`1<Vector2> uvBreakPoints, float length)
  void SetBreakPointDistances(List`1& distances, List`1<Vector2> uvBreakPoints, float length)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERDecalType
Наследуется от: Enum
Поля:
  int value__
  ERDecalType StartEnd
  ERDecalType LineMarking
  ERDecalType StopMarking
  ERDecalType MainConnectionLineMarking
  ERDecalType MotorwayRampLineMarking
  ERDecalType MotorwayRampSplitMarking
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERDecalClass
Наследуется от: object
Поля:
  int id
  ERDecalType type
  string name
  double roadType1
  double roadType2
  int connection
  GameObject decalPrefab
  float baseWidth
  float meshWidth
  float scale
  Vector3 localScale
  int priority
  bool collapsed
  float heightOffset
  Material material
  Vector2 uvLeftTop
  Vector2 uvRightBottom
  float width
  float length
  float xOffset
  float startOffset
  float endOffset
  List`1<Vector2> uvBreakPoints
  List`1<float> distances
  Vector2 uvLeftTop1
  Vector2 uvRightBottom1
  Vector2 uvLeftTop2
  Vector2 uvRightBottom2
  float width1
  float width2
Свойства:
Методы:
  void CopyDecal(ERDecal source, ERDecalClass target)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERTreeInstance
Наследуется от: object
Поля:
  int prototypeIndex
  Vector3 position
Свойства:
Методы:
  void .ctor(TreeInstance tree)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERCamNodes
Наследуется от: ScriptableObject
Поля:
  float sleep
  float speed
  float easeOutDistance
  float easeInDistance
  GameObject startLookat
  GameObject endLookat
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERMarkerControlType
Наследуется от: Enum
Поля:
  int value__
  ERMarkerControlType Spline
  ERMarkerControlType StraightXZ
  ERMarkerControlType StraightXZY
  ERMarkerControlType Circular
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERLane
Наследуется от: ValueType
Поля:
  float position
  ERLaneDirection direction
  ERDirectionType turnDirection
  int laneIndex
Свойства:
Методы:
  void .ctor(float position, ERLaneDirection direction, int index)
  void .ctor(ERLane lane)
  void Copy(ERLane lane)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERVSData
Наследуется от: ValueType
Поля:
  Vector3 position
  bool active
  float width
  Vector3 leftPosition
  Vector3 rightPosition
  Vector3 dir
Свойства:
Методы:
  void .ctor(Vector3 node, bool active, float width, Vector3 leftPosition, Vector3 rightPosition)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSideWalkInstanceScript
Наследуется от: MonoBehaviour
Поля:
  ERSideWalkInstance instance
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSideWalkInstance
Наследуется от: object
Поля:
  ERSideWalk sidewalk
  GameObject swObject
  double id
  float start
  float end
  Vector3 startPos
  Vector3 endPos
Свойства:
Методы:
  void .ctor(ERSideWalk msidewalk, float mStart, float mEnd, Vector3 mStartPos, Vector3 mEndPos, ERModularRoad road, string side)
  void CreateObject(ERModularRoad road, string side)
  void GetObject(ERModularRoad road, string side)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERMaterial
Наследуется от: ScriptableObject
Поля:
  int id
  string name
  double roadType1ID
  double roadType2ID
  double roadType3ID
  Material road1Material
  Material road2Material
  Material road3Material
  float connectorLength1
  float connectorLength2
  float connectorLength3
  float road1Stretch
  float road2Stretch
  float road3Stretch
  int road1StretchType
  int road2StretchType
  int road3StretchType
  int subdivide1
  int subdivide2
  int subdivide3
  float resolution
  bool blend
  float blendDistance
  int blendSection
  bool triangleStrip
  float triangleStripDistance
  float triangleStripUVStart
  float triangleStripUVEnd
  Material triangleStripMaterial
Свойства:
Методы:
  void Init(ERModularBase scr)
  ERMaterial CreateInstance(ERModularBase scr)
  String[] OCQOOCOQQC(ERModularBase scr)
  ERMaterial OQDQOCCODO(ERModularBase scr, ERIConnector prefab, Int32& targetRoad, Int32& index)
  Material OOQCDDQODC(ERModularBase scr, ERIConnector prefab)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERIConnector
Наследуется от: MonoBehaviour
Поля:
  float roadWidth1
  float leftIndentInner1
  float leftIndent1
  float leftUVXInner1
  float leftUVX1
  float rightUVX1
  float rightUVXInner1
  float rightIndentInner1
  float rightIndent1
  float cornerRadius1
  int cornerSegments1
  float angle1
  float prevAngle1
  Material road1Material
  Material road1MaterialActive
  int roadType1
  double roadType1ID
  ERTexture road1ERTexture
  float ᙃ
  float ᙄ
  float ᙅ
  float 4AAAA
  float road1Stretch
  int road1StretchType
  int subdivide1
  float roadWidth2
  float leftIndentInner2
  float leftIndent2
  float leftUVXInner2
  float leftUVX2
  float rightUVX2
  float rightUVXInner2
  float rightIndentInner2
  float rightIndent2
  float cornerRadius2
  int cornerSegments2
  float angle2
  float prevAngle2
  Material road2Material
  Material road2MaterialActive
  int roadType2
  double roadType2ID
  ERTexture road2ERTexture
  float 5AAA1
  float 6AAAA
  float 7AAA1
  float 8AAAA
  float road2Stretch
  int road2StretchType
  int subdivide2
  float resolution
  int crossingStructure
  bool blend
  int textureType
  int roadStructureType
  String[] crossingStructureStrings
  bool clampUVs
  float attachAngle
  List`1<QDQDOOQQDQODD> roadTypesDynamic
  List`1<Vector3> splinePoints1
  List`1<Vector3> splinePoints2
  List`1<int> roadShapeMaterialInts1
  List`1<int> roadShapeMaterialInts2
  List`1<Vector3> leftRoundingPoints1
  List`1<Vector3> centerPoints1
  List`1<Vector3> rightRoundingPoints1
  List`1<Vector3> leftPointsIndents1
  List`1<Vector3> rightPointsIndents1
  List`1<Vector3> middlePoints1
  List`1<Vector3> leftPoints13
  List`1<Vector3> rightPoints12
  List`1<Vector2> leftRoundingPointsUV1
  List`1<Vector2> 9AAA1
  List`1<Vector2> rightRoundingPointsUV1
  List`1<Vector2> leftPointsIndentsUV1
  List`1<Vector2> rightPointsIndentsUV1
  List`1<Vector3> leftRoundingPoints2
  List`1<Vector3> centerPoints2
  List`1<Vector3> rightRoundingPoints2
  List`1<Vector3> leftPointsIndents2
  List`1<Vector3> rightPointsIndents2
  List`1<Vector3> middlePoints2
  List`1<Vector3> rightPoints23
  List`1<Vector2> leftRoundingPointsUV2
  List`1<Vector2> BAAAA
  List`1<Vector2> rightRoundingPointsUV2
  List`1<Vector2> leftPointsIndentsUV2
  List`1<Vector2> rightPointsIndentsUV2
  List`1<Vector3> priorityConnectionPoints
  List`1<Vector2> priorityConnectionPointsUV
  float minAngle12
  float minAngle13
  float minAngle23
  Vector2 cpUV1
  Vector2 cpUV2
  Vector2 cpUV3
  List`1<Vector3> ll1
  List`1<Vector3> ll2
  List`1<Vector3> ll3
  List`1<Vector3> ll4
  Vector3 l1Start
  Vector3 l1End
  Vector3 l2Start
  Vector3 l2End
  Vector3 l3Start
  Vector3 l3End
  Vector3 r1Start
  Vector3 r1End
  Vector3 r2Start
  Vector3 r2End
  Vector3 r3Start
  Vector3 r3End
  Vector3 ip12
  Vector3 ip23
  Vector3 ip13
  Vector3 ip13Left
  Vector3 ip12right
  Vector3 ip23right
  Vector3 cp1Left
  Vector3 cp1Right
  Vector3 cp2Left
  Vector3 cp2Right
  Vector3 cp3Left
  Vector3 cp3Right
  bool lock1
  bool lock2
  bool lock3
  float CAAA1
  float 00AAA
  ERModularRoad road1
  ERModularRoad road2
  List`1<Vector2> roadShape1
  List`1<Vector2> roadShape2
  List`1<float> roadShapeUVs1
  List`1<float> roadShapeUVs2
  List`1<Material> roadMaterials1
  List`1<Material> roadMaterials2
  List`1<Vector3> leftPoints
  List`1<Vector3> rightPoints
  float connectorLength1
  float connectorLength2
  float blendDistance
  int blendSection
  bool triangleStrip
  float triangleStripDistance
  float triangleStripUVStart
  float triangleStripUVEnd
  Material triangleStripMaterial
  Material blendMaterial
  Material transitionMaterial
  bool transitionSwap
  int proceduralMaterialIndex
  bool presetSwapped
  float t1
  float t2
  GameObject go1
  GameObject go2
  GameObject go3
  GameObject go4
  ERCrossingPrefabs prefabScript
  List`1<Vector3> surfaceVecs
  Vector3 testPoint
  GameObject surfaceMesh
  ERModularBase baseScript
  Vector3 centerDir
  Vector3 cp1
  Vector3 cp2
  Vector3 cp3
  Vector3 cp4
  Vector3 tv
  List`1<Vector3> tvecs
Свойства:
Методы:
  void UpdateERTexture(int road)
  void OCQOQCDCQC(ERModularRoad sourceRoad)
  void GetIConnectionData(List`1<Vector3> vecs1, List`1<bool> conInts1, List`1<bool> conInts2, bool reversed1, bool reversed2, int road2Start)
  void GetLeftRightInts(List`1<Vector2> roadShape, Int32& mostLeftInt, Int32& mostRightInt)
  void OQQCQCCODO(List`1<Vector3> splinePoints, List`1<Vector3> splinePointsOther, List`1& vecs, List`1& uvs, List`1& tris, List`1<Vector2> roadShape, List`1<float> roadShapeUVs, List`1<int> roadShapeMaterialInts, float uvRatio, float stretchRatio, float stretchType, List`1& leftPoints, List`1& rightPoints, bool reversed, Vector3 cDir, int firstSecond, int startEnd)
  List`1<Vector2> OODCQQQQCQ(float startY, List`1<Vector3> splinePoints, List`1<float> roadShapeUVs, float uvRatio, bool reversed, float sourceUV)
  void OCOQOQOCOQ(List`1& colors, List`1<Vector3> splinePoints1, List`1<Vector3> splinePoints2, List`1<Vector2> roadShape1, List`1<Vector2> roadShape2)
  void ODDCCDQDCO(List`1& targetArray, List`1<Vector3> otherArray)
  void SetUVS(List`1<Vector3> leftRoundingPoints, List`1<Vector3> leftPointsIndents, List`1<Vector3> centerPoints, List`1<Vector3> rightPointsIndents, List`1<Vector3> rightRoundingPoints, List`1& leftRoundingPointsUV, List`1& leftPointsIndentsUV, List`1& centerPointsUV, List`1& rightPointsIndentsUV, List`1& rightRoundingPointsUV, Vector2& cp, float leftIndentUVX, float rightIndentUVX)
  Mesh ODDDOCDCQO()
  void OCOQOCDCCQ(List`1& tris, List`1& vecs, List`1& uvs, List`1& uvs1, List`1& uvs2, List`1& colors, List`1& trisTmp, List`1& vecsTmp, List`1& uvsTmp, List`1& uvsTmp1, List`1& uvsTmp2, List`1& colorsTmp, bool skipMiddles, bool weldVecs)
  void OCQODCOQDO(List`1& tris, List`1& vecs, List`1& uvs, List`1& uvs1, List`1& uvs2, List`1& colors, List`1& trisTmp, List`1& vecsTmp, List`1& uvsTmp, List`1& uvsTmp1, List`1& uvsTmp2, List`1& colorsTmp, bool skipMiddles, bool weldVecs)
  List`1<int> Triangulate(List`1<Vector3> vecs, List`1<Vector3> edges)
  List`1<Vector3> OQDDOOOOQD(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, float tension, float res, float distance, Single& tValue)
  void OQCDDQOCOD(List`1& splinePoints, float distance)
  void Clear()
  void OOODDOCOOO()
  void OOOQQDDCCQ(ERTexture roadERTexture, Single& roadWidth, Single& leftIndent, Single& rightIndent, Single& leftUVX, Single& rightUVX, Single& leftIndentInner, Single& rightIndentInner, Single& roadOuterUVXInner, float cornerRadius)
  void OCDCCQQQCO(List`1<Vector3> leftPoints, List`1<Vector3> rightPoints, GameObject& surfaceMesh, Transform tr, List`1& surfaceVecs, float indentLeftStart, float indentLeftEnd, float surroundingLeftStart, float surroundingLeftEnd, float indentRightStart, float indentRightEnd, float surroundingRightStart, float surroundingRightEnd, ERModularBase baseScript, bool hasMesh)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERTexture
Наследуется от: object
Поля:
  Texture2D texture
  float roadWidth
  float leftOffset
  float rightOffset
  float leftInnerOffset
  float rightInnerOffset
Свойства:
Методы:
  void .ctor(Texture2D _texture, float _roadWidth, float _leftOffset, float _rightOffset, float _leftInnerOffset, float _rightInnerOffset)
  ERTexture GetERTexture(Material mat)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSideObjectLog
Наследуется от: MonoBehaviour
Поля:
  List`1<SideObjectLog> QOQDQOOQDDQOOQ
  List`1<int> ints
  List`1<QDQDOOQQDQODD> roadPresets
  List`1<CrossingCornerClass> crossingCornerPresets
  List`1<ERSideWalk> sidewalkPresets
  List`1<ERTexture> textureData
  List`1<string> presetAssets
  int logIndex
  int updateInt
Свойства:
Методы:
  void AddRoadPreset(List`1<SideObject> sceneSideObjects, List`1<SideObjectLog> projectSideObjects, QDQDOOQQDQODD sourcePreset)
  void UpdateRoadPreset(QDQDOOQQDQODD sourcePreset, int element, List`1<SideObject> sceneSideObjects, List`1<SideObjectLog> projectSideObjects, bool copyShapeData)
  void UpdateTextureList(int element, Texture2D _texture, float _roadWidth, float _leftOffset, float _rightOffset, float _leftInnerOffset, float _rightInnerOffset)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERRoadType
Наследуется от: object
Поля:
  double id
  string roadTypeName
  List`1<Vector2> roadShape
  List`1<Vector2> roadShapeExt
  List`1<bool> doConnectionTri
  List`1<float> roadShapeUVs
  List`1<float> roadShapeExtUVs
  List`1<float> roadShapeUVs2
  List`1<bool> hardEdge
  float roadWidth
  float faceDistance
  float angleTreshold
  bool sidewalks
  float sidewalkHeight
  float sidewalkWidth
  Material roadMaterial
  PhysicMaterial roadPhysicsMaterial
  Material connectionMaterial
  bool isSideObject
  List`1<ERSORoad> soData
  List`1<ERSORoadExt> soDataExt
  List`1<ERSORoadLog> soDataLog
  int layer
  string tag
  bool hasMeshCollider
  bool terrainDeformation
  ERRoadShape ᙃ
Свойства:
Методы:
  void .ctor()
  void Update()
  QDQDOOQQDQODD GetRoadType(ERRoadType t, ERModularBase baseScript)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSORoad
Наследуется от: object
Поля:
  SideObject sideObject
  double id
  bool active
  List`1<Vector3> vecPositions
  bool toggleActive
  float xPosition
  float yPosition
  Vector3 randomRotation
  float randomMinRotation
  float randomMaxRotation
  float minRandomRotationDistance
  float maxRandomRotationDistance
  bool xPosChange
  bool yPosChange
  bool rotationAngleChange
  bool rotationDistanceChange
  bool lockRandomRotations
  bool randomXPositionChange
  bool xPositionDistanceChange
  bool randomYPositionChange
  bool yPositionDistanceChange
  float randomXPosition
  float randomMinXPosition
  float randomMaxXPosition
  float minRandomXPositionDistance
  float maxRandomXPositionDistance
  float randomYPosition
  float randomMinYPosition
  float randomMaxYPosition
  float minRandomYPositionDistance
  float maxRandomYPositionDistance
Свойства:
Методы:
  void .ctor(SideObject so)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSORoadExt
Наследуется от: ScriptableObject
Поля:
  SideObject sideObject
  double id
  bool active
  List`1<Vector3> vecPositions
  bool toggleActive
  bool autoGenerate
  bool markerActive
  float m_distance
  float xPosition
  float oldXPosition
  float yPosition
  Vector3 randomRotation
  float randomMinRotation
  float randomMaxRotation
  float minRandomRotationDistance
  float maxRandomRotationDistance
  bool distanceChange
  bool xPosChange
  bool yPosChange
  bool rotationAngleChange
  bool rotationDistanceChange
  bool lockRandomRotations
  bool randomXPositionChange
  bool randomYPositionChange
  bool xPositionDistanceChange
  float randomXPosition
  float randomMinXPosition
  float randomMaxXPosition
  float minRandomXPositionDistance
  float maxRandomXPositionDistance
  Vector3 boxColliderScale
  bool yPositionDistanceChange
  float randomYPosition
  float randomMinYPosition
  float randomMaxYPosition
  float minRandomYPositionDistance
  float maxRandomYPositionDistance
  GameObject sourceObject
  List`1<ERSOSection> sections
  List`1<GameObject> objects
  bool clampToMarkers
Свойства:
Методы:
  void Init(SideObject so)
  ERSORoadExt CreateInstance(SideObject so)
  void Copy(ERSORoadExt source, ERSORoadExt target)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSORoadLog
Наследуется от: object
Поля:
  double id
  bool active
Свойства:
Методы:
  void .ctor(double so)
--------------------------------------------------
Класс: EasyRoads3Dv3.ODDQODOOOC
Наследуется от: MonoBehaviour
Поля:
  List`1<Vector3> debugvecs
  bool sidewaysFlag
  bool useLastFowardFlag
  bool lastvecPositionsArray
  int currentSplineInt
  float ᙃ
  float ᙄ
  float ᙅ
  float 4AAAA
  Vector3 5AAA1
  Vector3 6AAAA
  float 7AAA1
  float 8AAAA
  float 9AAA1
  float BAAAA
  float CAAA1
  Vector3 00AAA
  Vector3 10AA1
  float 20AAA
  float 30AA1
  float 40AAA
  float 50AA1
  float 60AAA
  Vector3 70AA1
  Vector3 80AAA
  float 90AA1
  float B0AAA
  float C0AA1
  float 01AAA
  float 11AA1
  float 21AAA
  Vector3 31AA1
  Vector3 41AAA
  float 51AA1
  Bounds 61AAA
  int 71AA1
  int 81AAA
  int 91AA1
  bool B1AAA
  bool C1AA1
  bool 02AAA
Свойства:
Методы:
  void OOCOCOOQCC(List`1<SideObject> QOQDQOOQDDQOOQ, List`1& soDataExt)
  void OOCDDOCODO(ERModularBase scr, SideObject so)
  void OQOCQOCDOO(ERModularBase scr, SideObject so)
  bool ODOOCCCOQD(ERModularRoad scr, SideObject so, bool forceMarkerActive)
  void InitOtherMarkerSO(ERModularRoad scr, ERSOMarkerExt soData, SideObject so)
  ERSOMarkerExt[] ODODCDDCOD(ERModularRoad scr, SideObject so, Boolean& terrainSurfaceFlag)
  void SynchSideObjects(ERModularRoad scr1, ERModularRoad scr2)
  void OCCQDQOQCO(ERModularRoad scr, int marker)
  String[] OODDQDQDOQ(ERModularRoad scr)
  bool OOQDOCDDCO(ERModularRoad scr, SideObject so, int marker, bool mirrored)
  bool OOQDOCDDCO(ERModularRoad scr, SideObject so, int marker, Single& startOffset, Single& endOffset, ERSOMarkerExt& soMarker, bool mirrored)
  bool GetSidewaysPosition(ERModularRoad scr, SideObject so, List`1& sidewaysList, Boolean& customNodelistFlag, List`1& nodeListValues, List`1& shapeTransitionTypes)
  bool OOQOOQCQQO(ERModularBase scr, ERModularRoad roadScr)
  void ODQOCCQQCQ(ERModularRoad rScr, SideObject so)
  bool ODOOODCQCD(ERModularRoad road, int marker, int soIndex)
  bool OCCODCQODC(ERModularRoad road, int marker, int soIndex)
  bool OCOCCOODQC(List`1<SideObject> list, SideObject so)
  void ODQCOCOCOQ(ERModularBase scr, ERModularRoad roadScr, SideObject so)
  void ODOODCCDOC(ERModularBase scr, ERModularRoad roadScr, bool isSideObjectFlag)
  void OODQCDDCQO(ERModularBase scr, ERModularRoad roadScr, SideObject so, bool isParent)
  void OOOCCQDQCC(GameObject go, SideObject so, ERModularRoad roadScr, ERSORoadExt soData, bool mirrored, bool isChild)
  void AddBoxCollider(GameObject go, SideObject so, float zDist, float curDist, List`1<Vector3> vecPositions, List`1<float> vecDistances, int currentVecArrayInt, ERModularRoad roadScr, List`1<Vector3> vecPositionsCenter, List`1<Vector3> vecPositionsRight, ERSORoadExt soData)
  void CheckVertexLimit(SideObject so, int segment, bool force)
  void ODOCOOOQOC(float curDist, ERMesh mobject, int meshSegment, List`1<ERMarkerExt> markers, List`1<float> segmentDistances, List`1<float> segmentAccDistances, int markerIndex, List`1<Vector3> vecPositions, List`1<Vector3> vecPositionsLeft, List`1<Vector3> vecPositionsRight, List`1<Vector3> vecPositionsCenter, List`1<float> vecAngles, List`1<float> vecDistances, int currentVecArrayInt, bool debugFlag, int segmentCount, bool lastSegment, float scaleFactor, SideObject so, float halfRoadWidth, ERModularRoad roadScr, bool newSegment, bool skipStartBlend, bool skipEndBlend, Vector3& forward, Vector3& startPos, ERSORoadExt soData, bool mirrored, Single& steppedHeight, Int32& lastStep)
  void ODCQCCDOQO(float curDist, ERMesh mobject, int meshSegment, List`1<ERMarkerExt> markers, List`1<float> segmentDistances, List`1<float> segmentAccDistances, int markerIndex, List`1<Vector3> vecPositions, List`1<Vector3> vecPositionsLeft, List`1<Vector3> vecPositionsRight, List`1<Vector3> vecPositionsCenter, List`1<float> vecAngles, List`1<float> vecDistances, int currentVecArrayInt, bool debugFlag, int segmentCount, bool lastSegment, float scaleFactor, SideObject so, ERModularRoad roadScr, List`1<List`1<Vector2>> fullNodeList, float clampUVYPerc, float uvyShapeRatio, ERSORoadExt soData, bool mirrored, bool shapeDirFlag)
  void ODOODODODO(GameObject parentGo, float curDist, float scaleFactor, SideObject so, List`1<Vector3> vecPositions, List`1<Vector3> vecPositionsLeft, List`1<Vector3> vecPositionsRight, List`1<Vector3> vecPositionsCenter, List`1<float> vecAngles, List`1<float> vecDistances, int currentVecArrayInt, int num, ERModularRoad roadScr, int startConnectionEnd, ERSORoadExt soData, bool mirrored, bool rotateFlag, List`1<int> sectionIndexes, bool shapeDirFlag, int k)
  void ODCCQODCOQ(float tmpDist, List`1<Vector3> vecPositions, List`1<float> vecDistances, int currentVecArrayInt, Vector3& v, Vector3& v1, bool doSecond, bool debugFlag)
  void GetSplinePositionsMin(float tmpDist, List`1<Vector3> vecPositions, List`1<float> vecDistances, int currentVecArrayInt, Vector3& v, Vector3& v1, bool doSecond, bool debugFlag)
  void OCQCOOQCDO(float curDist, List`1<float> vecDistances, Int32& currentVecArrayInt)
  void GetRandomXDistance(float distance, Vector3& adjustedRotation, Vector3& currentRandomRotation, float randomRotationStart, float randomRotationMiddle, float randomRotationEnd, float randomRotationDistance, Vector3 randomRotation)
  void OCQQCOOQDQ(float distance, Vector3& adjustedRotation, Vector3& currentRandomRotation, float randomRotationStart, float randomRotationMiddle, float randomRotationEnd, float randomRotationDistance, Vector3 randomRotation)
  void OCCOOCDCQQ(float distance, Vector3& adjustedRotation)
  Terrain OQQOOCQQCD(Vector3 pos)
  void .ctor()
  void .cctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERCPUpdate
Наследуется от: ValueType
Поля:
  ERModularRoad road
  ERCrossingPrefabs prefab
  int startEnd
  int connection
  Vector3 cp
Свойства:
Методы:
  void .ctor(ERModularRoad v_road, ERCrossingPrefabs v_prefab, int v_startEnd, int v_connection, Vector3 v_cp)
--------------------------------------------------
Класс: EasyRoads3Dv3.CRedge
Наследуется от: ValueType
Поля:
  int v1
  int v2
  int count
Свойства:
Методы:
  void .ctor(int v_1, int v_2)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERTerrainChange
Наследуется от: ValueType
Поля:
  int index
  int value
Свойства:
Методы:
  void .ctor(int v_index, int v_value)
--------------------------------------------------
Класс: EasyRoads3Dv3.SelectedObject
Наследуется от: ScriptableObject
Поля:
  ERModularRoad roadScr
  ERCrossingPrefabs prefabScr
  List`1<int> markers
  int startEnd
  ERCrossingPrefabs prefab
Свойства:
Методы:
  void Init(ERModularRoad rScr, ERCrossingPrefabs pScr, int marker)
  SelectedObject CreateInstance(ERModularRoad rScr, ERCrossingPrefabs pScr, int marker)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSOMarker
Наследуется от: object
Поля:
  SideObject sideObject
  double id
  bool active
  float startOffset
  float endOffset
  bool splineActive
  float sidewaysDistance
  Vector3 startOffsetV3
  Vector3 endOffsetV3
  Vector3 startOffsetDir
  Vector3 endOffsetDir
  Vector3 startOffsetV3nb
  Vector3 endOffsetV3nb
  int curStartInt
  int curEndInt
  bool startOffsetActive
  bool endOffsetActive
  List`1<Vector2> nodeList
  List`1<Vector3> nodeShapeVecsGlobal
  Vector3 rotation
  float rotationAngle
  float rotationDistance
  float rotationCenter
Свойства:
Методы:
  void .ctor(SideObject so, bool flag)
  void OODOOOQQCO(ERSOMarkerExt source)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSOMarkerExt
Наследуется от: ScriptableObject
Поля:
  SideObject sideObject
  double id
  bool active
  float startOffset
  float endOffset
  bool splineActive
  float sidewaysDistance
  float xPosition
  Vector3 startOffsetV3
  Vector3 endOffsetV3
  Vector3 startOffsetDir
  Vector3 endOffsetDir
  Vector3 startOffsetV3nb
  Vector3 endOffsetV3nb
  int curStartInt
  int curEndInt
  bool startOffsetActive
  bool endOffsetActive
  List`1<Vector2> nodeList
  List`1<Vector3> nodeShapeVecsGlobal
  int shapeTransitionType
  Vector3 rotation
  float rotationAngle
  float rotationDistance
  float rotationCenter
  ERRoadSide side
  ERSOMarkerExt otherSide
Свойства:
Методы:
  void Init(SideObject so, bool flag)
  void OODOOOQQCO(ERSOMarkerExt source)
  void Copy(ERSOMarkerExt source)
  ERSOMarkerExt CreateInstance(SideObject so, bool flag)
  void ODCOCDOOCQ(SideObject so)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.CombineClass
Наследуется от: ValueType
Поля:
  Material m
  List`1<MeshInstance> objects
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERMeshCombineUtility
Наследуется от: object
Поля:
Свойства:
Методы:
  Mesh Combine(Transform container, MeshInstance[] combines, bool generateStrips)
  void Copy(int vertexcount, Vector3[] src, Vector3[] dst, Int32& offset, Matrix4x4 transform)
  void CopyNormal(int vertexcount, Vector3[] src, Vector3[] dst, Int32& offset, Matrix4x4 transform)
  void Copy(int vertexcount, Vector2[] src, Vector2[] dst, Int32& offset)
  void CopyTangents(int vertexcount, Vector4[] src, Vector4[] dst, Int32& offset, Matrix4x4 transform)
  void CombineMesh(GameObject go, Mesh mesh, Transform container, bool isSideObject)
  List`1<MeshInstance> GetCombinedInstances(List`1<CombineClass> mToMesh, Material m)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.SideObjectParams
Наследуется от: object
Поля:
  Boolean[] soActive
  Single[] soDistanceSideWays
  Boolean[] soSplineActive
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ZIndexArray
Наследуется от: object
Поля:
  List`1<int> index
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERLaneConnector
Наследуется от: object
Поля:
  Vector3 connectorStart
  Vector3 connectorEnd
  Vector3 connectorStartLocal
  Vector3 connectorEndLocal
  Vector3[] points
  int startLaneIndex
  int endLaneIndex
  int endConnectionIndex
  ERLane laneType
  ERDirectionType laneDirection
  float startOffset
  float endOffset
  float strength
  bool mainConnection
  bool stop
  float speedLimit
  float minSpeed
  float maxSpeed
Свойства:
Методы:
  ERLaneConnector CreateInstance()
  List`1<ERLaneConnector> GetLaneConnectors(ERLaneData laneData, int index)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERLaneDirection
Наследуется от: Enum
Поля:
  int value__
  ERLaneDirection Left
  ERLaneDirection Right
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERDirectionType
Наследуется от: Enum
Поля:
  int value__
  ERDirectionType Straight
  ERDirectionType Left
  ERDirectionType Right
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.ERChildsSO
Наследуется от: ValueType
Поля:
  double id
  float startOffset
  float endOffset
  float xOffset
  float yOffset
Свойства:
Методы:
  void .ctor(int _id)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERMesh
Наследуется от: object
Поля:
  List`1<int> vecsInt
  List`1<Vector3> vecs
  List`1<Vector2> uv
  List`1<Vector2> uv2
  List`1<Color> colors
  List`1<Vector3> normals
  List`1<Vector4> tangents
  List`1<int> triangles
  List`1<int> triangles2
  List`1<int> startVecsInt
  List`1<Vector3> startVecs
  List`1<Vector2> startUv
  List`1<Vector2> startUv2
  List`1<Color> startColors
  List`1<Vector3> startNormals
  List`1<Vector4> startTangents
  List`1<int> startTriangles
  List`1<int> startTriangles2
  List`1<int> endVecsInt
  List`1<Vector3> endVecs
  List`1<Vector2> endUv
  List`1<Vector2> endUv2
  List`1<Color> endColors
  List`1<Vector3> endNormals
  List`1<Vector4> endTangents
  List`1<int> endTriangles
  List`1<int> endTriangles2
  List`1<int> suVecsInt
  List`1<Vector3> suVecs
  List`1<Vector2> suUv
  List`1<Vector2> suUv2
  List`1<Color> suColors
  List`1<Vector3> suNormals
  List`1<Vector4> suTangents
  List`1<int> suTriangles
  List`1<int> suTriangles2
  List`1<int> sdVecsInt
  List`1<Vector3> sdVecs
  List`1<Vector2> sdUv
  List`1<Vector2> sdUv2
  List`1<Color> sdColors
  List`1<Vector3> sdNormals
  List`1<Vector4> sdTangents
  List`1<int> sdTriangles
  List`1<int> sdTriangles2
  List`1<Material> materials
  List`1<Vector3> sVecs
  List`1<Vector2> sUv
  List`1<Vector2> sUv2
  List`1<Color> sColors
  List`1<Vector3> sNormals
  List`1<Vector4> sTangents
  List`1<int> sTriangles
  List`1<Vector3> sTerrainNormals
  List`1<List`1<Vector3>> sVecsGroups
  List`1<List`1<Vector2>> sUvGroups
  List`1<List`1<Vector2>> sUv2Groups
  List`1<List`1<Color>> sColorsGroups
  List`1<List`1<Vector3>> sNormalsGroups
  List`1<List`1<Vector4>> sTangentsGroups
  List`1<List`1<int>> sTrianglesGroups
  List`1<List`1<Vector3>> sTerrainNormalsGroups
  List`1<Vector3> sStartVecs
  List`1<Vector2> sStartUv
  List`1<Vector2> sStartUv2
  List`1<Color> sStartColors
  List`1<Vector3> sStartNormals
  List`1<Vector4> sStartTangents
  List`1<int> sStartTriangles
  List`1<Vector3> sEndVecs
  List`1<Vector2> sEndUv
  List`1<Vector2> sEndUv2
  List`1<Color> sEndColors
  List`1<Vector3> sEndNormals
  List`1<Vector4> sEndTangents
  List`1<int> sEndTriangles
  List`1<Vector3> sSuVecs
  List`1<Vector2> sSuUv
  List`1<Vector2> sSuUv2
  List`1<Color> sSuColors
  List`1<Vector3> sSuNormals
  List`1<Vector4> sSuTangents
  List`1<int> sSuTriangles
  List`1<Vector3> sSdVecs
  List`1<Vector2> sSdUv
  List`1<Vector2> sSdUv2
  List`1<Color> sSdColors
  List`1<Vector3> sSdNormals
  List`1<Vector4> sSdTangents
  List`1<int> sSdTriangles
  int startEndVecCount
  int middleStartVecCount
  int middleEndVecCount
  int endStartVecCount
  List`1<Vector3> middleEndVecs
  List`1<int> startEndInts
  List`1<int> middleStartInts
  List`1<int> middleEndInts
  List`1<int> middleStartStartInts
  List`1<int> middleEndEndInts
  List`1<int> endStartInts
  List`1<int> startEndIntsNC
  List`1<int> middleStartStartIntsNC
  List`1<int> middleStartIntsNC
  List`1<int> middleEndIntsNC
  List`1<int> middleEndEndIntsNC
  List`1<int> endStartIntsNC
  int OQOQODDQCCInt
  int ODQCDQCCODInt
  int middleLeftInt
  int middleRightInt
  int endLeftInt
  int endRightInt
  List`1<int> normalArray1
  List`1<int> normalArray2
  List`1<List`1<int>> normalArray1Group
  List`1<List`1<int>> normalArray2Group
  int vecCount
  List`1<float> zValues
  List`1<ZIndexArray> zValueVecIndexes
  List`1<float> zValuesStart
  List`1<ZIndexArray> zValueVecIndexesStart
  List`1<float> zValuesEnd
  List`1<ZIndexArray> zValueVecIndexesEnd
  List`1<float> zValuesStepUp
  List`1<ZIndexArray> zValueVecIndexesStepUp
  List`1<float> zValuesStepDown
  List`1<ZIndexArray> zValueVecIndexesStepDown
  float minZ
  float minMiddleZ
  float maxZ
  float maxMiddleZ
  float totalZDistance
  float offset1
  float offset2
  List`1<int> vertexBatches
  List`1<int> triangleBatches
  int lodIndex
  bool castShadows
  string name
  bool terrainMesh
Свойства:
Методы:
  void OCQQQCQQDD()
  void .ctor(GameObject m_go, SideObject soScript, float minZ, Transform sourceTransform, Vector3 scale, Mesh m, Material mat, float startMin, bool rotate180)
  void OCDCDCQQDQ(GameObject m_go, SideObject soScript, float minZ, Transform sourceTransform, Vector3 scale, Mesh m, Material mat, float startMin, bool namingConvention)
  void OCDCQCQQOC(List`1<Vector3> vecs, List`1& zValueVecIndexes, List`1& zValues)
  void GetMiddleSementInfo(List`1<Vector3> vecs, Single& minMiddleZ, Single& maxMiddleZ, List`1& middleStartInts, List`1& middleEndInts)
  void GetMiddleEdges(List`1<Vector3> vecs, float z, List`1& edgeInts)
  bool OOCDOCOCQO(Vector3 v, int index, List`1<float> zV, List`1& zVIndexes)
  void OCDQOQOCCD(int index, Vector3 v, List`1& vecsInts, List`1& vecs, List`1& uv, List`1& uv2, List`1& normals, List`1& colors, List`1& tangents, Vector2 sourceUv, Vector2 sourceUv2, Vector3 sourceNormal, Color sourceColor, Vector4 sourceTangent, Int32& tri)
  void ODDDDDQDOQ(int index, List`1& vecsInts)
  void InEdgePairArray(int index1, int index2, List`1& vecsInts)
  void OQCDQOQOCQ(float adjustZ)
  void OCDDCDODQQ(List`1& groups, List`1<int> triInts, List`1<int> edgeInts)
  void OOQOCOQOOO(List`1<CRedge> edges, Int32& curInt)
  bool OCCCOQOCQO(List`1<CRedge> edges, int index, int curInt)
  bool ODDDDDQDOQ(int index, List`1<int> edgeInts)
  bool OCDOQODCCQ(List`1<CRedge> edges, int index1, int index2)
  void MatchEdgePairs(List`1<CRedge> startEdgePairs, List`1<CRedge> endEdgePairs, List`1& startInts, List`1& endInts, List`1& startIntsNC, List`1& endIntsNC, List`1<Vector3> startVecs, List`1<Vector3> endVecs, List`1<Vector3> startNormals, List`1<Vector3> normals, Int32& OQOQODDQCCInt, Int32& ODQCDQCCODInt)
  void OQOCDDCQDD(List`1<List`1<int>> startGroups, List`1<List`1<int>> endGroups, List`1& startInts, List`1& endInts, List`1<Vector3> startVecs, List`1<Vector3> endVecs)
  void ODDDOCDCQO(ERModularRoad roadScr, GameObject go, SideObject so, ERModularBase scr, bool mirrored, int sectionListIndex, List`1<int> sectionIndexes, int autoSectionStart)
  bool OQCQCDQDOO(ERModularRoad rd, int listIndex, int listItemIndex, SideObject so, bool mirrored)
  void OODCCOCQOC(GameObject go, SideObject so, ERModularBase scr, List`1<Vector3> sVecs, List`1<Vector2> sUv, List`1<Vector2> sUv2, List`1<Color> sColors, List`1<Vector3> sNormals, List`1<Vector4> sTangents, List`1<int> sTriangles, List`1<int> normalArray1, List`1<int> normalArray2, List`1<Material> materials, List`1<Vector3> sTerrainNormals)
  void OCOCOQQOOO(Int32& vecCount, List`1& intList, List`1<Vector3> vecsList, float zValue)
  void OCODQQOCDD(List`1& targetIntList, List`1<int> sourceIntList, List`1<Vector3> targetVecs, List`1<Vector3> sourceVecs)
  void Clear()
--------------------------------------------------
Класс: EasyRoads3Dv3.SideObjectLog
Наследуется от: object
Поля:
  string version
  string name
  double id
  double timestamp
  int objectType
  string gameobjectGUID
  string textureGUID
  float m_distance
  float uvx
  float uvy
  int position
  float splinePosition
  int selectedRotation
  float randomYAxisMinRotation
  float randomYAxisMaxRotation
  List`1<Vector2> nodeList
  List`1<float> uvs
  List`1<float> uvDistances
  bool clampUVs
  bool clampUVY
  float clampUVYValue
  bool terrainUVs
  bool reverseUVs
  float totalDistance
  List`1<bool> snapList
  List`1<float> snapWeightList
  List`1<Color> colorList
  string gameobjectStartGUID
  string gameobjectEndGUID
  int align
  int alignPoint
  bool weld
  bool combine
  bool combineInstantiated
  bool markerActive
  int uvType
  float uv
  bool randomObjects
  float forwardStartOffset
  float sidewaysOffset
  float density
  string goPath
  string startPath
  string endPath
  string texturePath
  int terrainTree
  float minScale
  float maxScale
  bool childOrderActive
  int childOrder
  bool meshBoundsAlignment
  float xPosition
  float xPosition2
  int relativeTo
  float yPosition
  float yRotation
  float oldSidwaysDistance
  int sidewaysDistanceUpdate
  float uvYRound
  bool adjustUV
  bool collider
  bool boxcollider
  bool tangents
  GameObject sourceObject
  bool flipMesh
  GameObject startObject
  GameObject endObject
  GameObject connectionObject
  Material material
  List`1<ERMesh> meshObjects
  Vector2 boxSize
  Vector2 boxOffset
  bool includeStartSegment
  float startSegmentOffset
  bool includeStartEdgeTris
  bool includeEndSegment
  float endSegmentOffset
  bool includeEndEdgeTris
  bool adjustToRoadWidth
  float xOffset
  float startOffset
  float endOffset
  float defaultStartOffset
  float defaultEndOffset
  float totalZDistance
  float middleZDistance
  float startZDistance
  float endZDistance
  float minStartZ
  float maxStartZ
  float minMiddleZ
  float maxMiddleZ
  float minEndZ
  float maxEndZ
  bool smoothStart
  bool smoothMiddle
  bool smoothEnd
  GameObject targetObject
  bool bridgeObject
  bool tunnelObject
  bool snapToTerrain
  int layer
  bool deformationObject
  bool isStatic
  bool castShadows
  bool scaleToRoad
  bool splitInBatches
  Vector3 randomRotation
  float randomMinRotation
  float randomMaxRotation
  float minRandomRotationDistance
  float maxRandomRotationDistance
  float randomXPosition
  float randomMinXPosition
  float randomMaxXPosition
  float minRandomXPositionDistance
  float maxRandomXPositionDistance
  Vector3 boxColliderScale
  float randomYPosition
  float randomMinYPosition
  float randomMaxYPosition
  float minRandomYPositionDistance
  float maxRandomYPositionDistance
  float bridgeHeight
  int markerSplineController
  float bridgeLength
  float deformationOffset
  float markerIndent
  float markerSurrounding
  bool indentController
  bool excludeTerrainSplats
  Vector3 scale
  float indentExt
  int category
  Texture2D densityMap
  float densitySize
  float densitySize2
  float densityStrength
  float densityStrength2
  float terrainNormal
  float terrainNormal2
  List`1<ERChildsSO> childObjects
  bool autoGenerate
  float heightThreshold
  float autogenerateStartOffset
  float autogenerateEndOffset
  bool snapIndents
  float snapIndentWidth
  bool cutHoles
  float innerStartOffset
  float innerEndOffset
  bool ignoredForRetainingWalls
  float heightMaxThreshold
  float heightMaxStartThreshold
  float heightMaxEndThreshold
  float xThresholdDistance
  float angleThreshold
  int connectionRatio
  bool retainingWall
  int surroundingControl
  int indentControl
  List`1<Vector2> nodeListMirrored
  List`1<float> uvsMirrored
  List`1<float> snapWeightListMirrored
  List`1<Color> colorListMirrored
  bool hasVertexColors
  float deformationOffsetForward
  float deformationOffsetSideways
  int connectionObjectRotation
  bool subMesh
  bool acceptBarriers
  bool activeOnBridges
  bool dualSided
  int mirrorType
  bool snapVertexColors
  float minSnapRange
  float maxSnapRange
  bool clampUV4
  float geoStartOffset
  float geoEndOffset
  float startOverlapOffset
  float endOverlapOffset
  int lodLevels
  List`1<bool> hardEdge
  float hardEdgePadding
  bool startEndCaps
  List`1<Vector2> endCapUVs
  List`1<Vector2> startCapUVs
  List`1<int> startCapTris
  List`1<int> startCapTrisMirrored
  Vector2 startCapUVOffset
  Vector2 endCapUVOffset
  float startCapUVScale
  float endCapUVScale
  float startCapUVRotation
  float endCapUVRotation
  bool namedChilds
  bool startSection
  bool endSection
  bool stepDown
  bool stepUp
  float stepDistance
  float startDirZOffset
  float endDirZOffset
  bool buildOtherSideObject1
  double defaultOtherSoId1
  bool buildOtherSideObject2
  double defaultOtherSoId2
  List`1<double> buildOtherSideObjects
  bool averageDistance
  bool randomUVx
  bool isUsedAsChild
Свойства:
Методы:
  void OODOOOQQCO(SideObject so)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERConnectionParent
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ODOCDOQDCO
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OQQQQQODDO(ERCrossings scr, Single& firstSegmentDistance)
  void OODDQCQOQQ(List`1& vecs, float firstX, float firstZ, float lastX, float lastZ)
  Vector3 OCCDQDCQCD(int i, float radius, float angle)
  void OQODOQQCOO(ERCrossings scr)
  void ODOODDOQOQ(List`1<Vector3> vecs, float firstX, float firstZ, float sidewalkWidth, float resolution, float currentDist)
  void OOOCDOCQQO(ERCrossings scr)
  void OOOCOQODOO(List`1<Vector3> targetVecs, float targetValue, float firstX, float firstZ, float resolution, int xorz)
  void OCOOOQQQQO(ERCrossings scr)
  List`1<Vector3> OOOCCCCDDQ(List`1<Vector3> sourceVecs, float leftRight, float distance)
  void OOCCOQQDQQ(ERCrossings scr)
  List`1<Vector3> OOOODDQDCC(List`1<Vector3> sourceVecs, int xorz)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERCrossingMainRoad
Наследуется от: MonoBehaviour
Поля:
  ERModularBase baseScript
  double roadType1
  int roadTypeInt1
  double roadType2
  int roadTypeInt2
  double roadType3
  int roadTypeInt3
  float indent1
  float indent2
  float roadWidth1
  float roadWidth2
  float roadWidth3
  bool tCrossing
  List`1<Vector3> leftOuter1
  List`1<Vector3> rightOuter1
  List`1<Vector2> leftOuterUV1
  List`1<Vector2> rightOuterUV1
  List`1<Vector3> leftOuter2
  List`1<Vector3> rightOuter2
  List`1<Vector2> leftOuterUV2
  List`1<Vector2> rightOuterUV2
  List`1<Vector3> leftOuter3
  List`1<Vector3> rightOuter3
  List`1<Vector2> leftOuterUV3
  List`1<Vector2> rightOuterUV3
  Material sourceMaterial
  Material sourceMaterial1
  Material targetMaterial
  float bottom2
  float bottom2Inner
  float bottom3
  float bottom3Inner
  float top2
  float top2Inner
  float top3
  float top3Inner
  float left2
  float left3
  float right2
  float right3
  int vec2Count
  int vec3Count
  float uvStart1
  float uvEnd1
  float uvStart2
  float uvEnd2
  Vector2 rightTopL
  Vector2 rightTopR
  Vector2 rightBottomL
  Vector2 rightBottomR
  Vector2 leftTopL
  Vector2 leftTopR
  Vector2 leftBottomL
  Vector2 leftBottomR
  float rightLeftUV
  float rightRightUV
  float leftLeftUV
  float leftRightUV
  float bottomuvInner2
  float topuvInner2
  float innerHeight2
  float outerHeight2
  float bottomuvInner3
  float topuvInner3
  float innerHeight3
  float outerHeight3
  float rightInnerStretch
  float leftInnerStretch
  Material mat1
  Material mat2
  Material mat3
  string name
Свойства:
Методы:
  void OCQOQCDCQC()
  void Clear()
  List`1<int> Triangulate(List`1<Vector3> vecs, List`1<Vector3> edges)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ODDCQDDCDD
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void ODQQCQOODQ(List`1<ERRoundaboutElement> connections, List`1<Vector3> mainLeftPoints, List`1& meshVecs, List`1& meshUVs, List`1& fullTris)
  void OODQCCOOQC(List`1<ERRoundaboutElement> connections, List`1<Vector3> meshVecs, int vecCount, List`1& connectionVecs, List`1& connectionUVs, List`1& connectionTris, List`1& triList, List`1& materialList)
  void OCDDOCDDOQ(List`1<Vector3> meshVecs, List`1<int> connectionVecInts, List`1& roadShapeVecs, List`1& roadShapeUVY)
  Vector2 SetUV(Vector3 p1, Vector3 p2, Vector3 p3, Vector2 uv1, Vector2 uv2)
  bool OCCQDQQDCC(int nvert, List`1<Vector2> vert, float testx, float testy)
  bool OCCDQOCQQQ(int nvert, List`1<float> vertx, List`1<float> verty, float testx, float testy)
  bool OQOCDCDOQO(List`1<Vector3> vecs, List`1<OOCOCQCQOQ> edges, int p1, int p2, int p3)
  Vector3 OQQCQOCCOQ(Vector3 vA, Vector3 vB, Vector3 vPoint)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERConnectionVecs
Наследуется от: object
Поля:
  List`1<int> ᙃ
  List`1<int> ᙄ
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.SidewalkPresetClass
Наследуется от: object
Поля:
  string presetName
  double id
  double timestamp
  float sidewalkWidth1
  float sidewalkWidth2
  float curbHeight
  float curbDepth
  bool beveledCurb
  float beveledHeight
  float beveledDepth
  bool outerCurb
  bool roadSideCurbUVControl
  bool outerSideCurbUVControl
  Material sidewalkMaterial
  List`1<Vector2> shape
  List`1<float> sidewalkUVs
  List`1<float> curbUVs
  bool lockUVs
Свойства:
Методы:
  void .ctor(QDOQDSQOOQDDD corner, string name)
--------------------------------------------------
Класс: EasyRoads3Dv3.CrossingCornerClass
Наследуется от: object
Поля:
  string presetName
  double id
  double timestamp
  float cornerRadius
  int cornerSegments
  float innerSegmentDistance
Свойства:
Методы:
  void .ctor(QDOQDSQOOQDDD sw, string name)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERConnection
Наследуется от: object
Поля:
  string name
  ERCrossingPrefabs prefabScript
  GameObject gameObject
  ERConnectionData[] connectionData
  string str
Свойства:
Методы:
  void .ctor(GameObject go, string g_name)
  ERConnection Create(GameObject go)
  void SetPosition(Vector3 pos)
  string GetName()
  void SetName(string name)
  void SetRotation(Vector3 euler)
  void Destroy()
  void UnConnect(int connectionIndex)
  ERConnectionData[] GetConnectionData()
  Vector3 GetLocalConnectionPosition(int connectionIndex)
  Vector3[] GetLocalConnectionPositions()
  Vector3[] GetConnectionWorldPositions()
  Vector3 GetConnectionWorldPosition(int connectionIndex)
  int FindNearestConnectionIndex(Vector3 position)
  bool SwapTurn()
  bool RotateConnections()
  ERRoad GetConnectedRoad(int index, ConnectedTo& connectedTo)
  ERLaneConnector[] GetLaneData(int connectionIndex)
  ERLaneConnector[] GetLaneData(int connectionIndex, int lane)
  int GetConnectionCount()
  void AverageNormals(bool flag)
  bool RecalculateNormals()
  bool RecalculateTangents()
  void Refresh()
  bool IsFlexConnector()
  void .cctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ODDDDDCCQQ
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OQDCOQDQDO(ERCrossings scr, List`1& meshVecs, List`1& meshUVs, List`1& triList, List`1<Material> materialList, List`1<Material> connectionMaterialList)
  float GetCenterUVY(ERCrossings scr, float uvTiling, List`1<List`1<Vector3>> vecArray, int connection)
  void OCODCOCODQ(ERCrossings scr, List`1<List`1<Vector3>> vecArray, List`1<List`1<Vector2>> uvArray, int frontLeft, int topBottom, List`1& meshVecs, List`1& meshUVs, List`1& triList, List`1& intArray, int startRow, int triArrayIndex, int centerPointIndex)
  List`1<int> OODCODOODC(List`1<List`1<int>> intArray)
  List`1<int> OCCQOODCCO(List`1<int> col1, List`1<int> col2, int startRow)
  List`1<int> OOQCQQDDQC(List`1<int> col1, List`1<int> col2, List`1<Vector3> vecs1, List`1<Vector3> vecs2, int frontLeft, int topBottom, int startRow)
  void InitODCOCQQDDC(ERCrossings scr)
  void ODCOCQQDDC(ERCrossings scr, List`1<List`1<Vector3>> vecArray, List`1& uvs, List`1& uvArray, int verthorz, float uvTiling)
  Vector3[] OOQOODDQCC(ERCrossings scr, Vector3[] vecs)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSideWalkVecs
Наследуется от: MonoBehaviour
Поля:
  GameObject sidewalk
Свойства:
Методы:
  void OQOQDODDCD(ERCrossings scr)
  void ODCCDOQOOC(ERCrossings scr)
  void OQOQDOOOQO(ERCrossings scr, List`1<Vector3> vecArray, Vector3 firstOther, float sidewalkWidth, int xorz, Int32& cornerInt)
  void OOOQCOQOOQ(ERCrossings scr, List`1<List`1<Vector3>> vecArray, List`1<List`1<Vector3>> vecArrayOther, QDOQDSQOOQDDD corner, int startEnd, int mainOrConnected, int outerCornerInt)
  void OODDCODCCQ(ERCrossings scr)
  List`1<Vector3> ODCODDCCOC(List`1<Vector3> outer, List`1<Vector3> outerOther, float dist, float height, int startend, int leftright, int outerCornerInt)
  List`1<Vector3> OQCDDCOODQ(ERCrossings scr, List`1<Vector3> innerArray, List`1<Vector3> outerOther, float dist, float height, float sidewalkWidth, int startend, int leftright, int outerCornerInt)
  List`1<Vector3> OQODQDOQOQ(List`1<Vector3> outer, float height)
  void ODQDQQOQCC(ERCrossings scr, List`1<List`1<Vector3>> vecArray, List`1& uvArray, QDOQDSQOOQDDD corner, bool reverse, float uvTiling)
  void ODQOQOCCOC(List`1<List`1<Vector3>> vecArray, List`1& sidewalkUVs)
  void ODDCDODCCQ(List`1& outer1, List`1& outer2)
  Vector3[] OODDQOQDCC(ERCrossings scr, Vector3[] normals)
  Vector4[] AdjustSidewalkTangents1(ERCrossings scr, Vector4[] tangents)
  Vector4[] AdjustSidewalkTangents(ERCrossings scr, Vector4[] tangents)
  Vector3[] ODDQQCCODD(ERRoundabouts scr, Vector3[] normals)
  Vector3[] SnapSidewalkCornersVecs(ERCrossings scr, Vector3[] vecs)
  void ODCQCQDODC(ERModularBase baseScript, ERSideWalk sw, Vector3 pos)
  void OQOOQDCQOC(ERSideWalk sw, GameObject sidewalkGO, List`1<Vector3> vecs, int leftRight, float offsetX, bool updateMesh)
  List`1<Vector2> OCDODCQCCC(ERSideWalk sw, Int32& innerIndex, List`1& trisFlag)
  void ODDDOCDCQO(ERSideWalk sw, List`1<Vector2> shape, List`1<bool> trisFlag, List`1<float> uv, List`1<Vector3> spline, List`1<Vector3> spline2, int leftright, GameObject sidewalkGO, float offsetX, bool closedStart, bool closedEnd)
  void OQCODDOCCD(ERSideWalk sw, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1& vecs, List`1& uvs, List`1& tris, int pointsCount, int leftrightroad, int startEnd)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OCQOCDODDQ
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void ODCOOOQQQD(ERCrossingPrefabs scr, Vector3[] meshVecs, Vector3[]& surfaceMeshVecs)
  void OQCDOQOQDC(ERCrossingPrefabs scr, float angle, int dirInt, bool leftrightFlag)
  Vector3 ODQODDQDQO(Vector3 cornerPos, float indent, Vector3 outerPos, Vector3& dir)
  void OCCCQDODDD(ERCrossingPrefabs scr, Vector3 vecOuter1, Vector3 vecOuter2, Vector3& mainSurrounding, Vector3& connectedSurrounding)
  void CheckIndentOQCDCDOOCD(Vector3 dir1, Vector3 dir2, Vector3 cornerPos, Vector3 outer2, Vector3& indent2, Vector3& indent1, float angle, float minIndent, bool leftrightFlag)
  void OQDCOQOCQC(ERCrossingPrefabs scr, Vector3 corner, Vector3 indentMain, Vector3 indentConnection, Vector3& mainSurrounding, Vector3& connectedSurrounding, int dirInt)
  void ODDDDCCQCD(ERCrossingPrefabs scr, int connection, Vector3 leftIndent, Vector3 leftSurrounding, Vector3 rightIndent, Vector3 rightSurrounding)
  void OOOOCQCOQO(ERCrossingPrefabs scr, int connection, int leftIndent, int leftSurrounding, int rightIndent, int rightSurrounding)
  void ODQDODQOCC(ERCrossingPrefabs scr, int connection, Vector3 outerPoint, Vector3 crosspoint)
  float OOCDQCOCQO(Vector3 v11, Vector3 v12, Vector3 v21, Vector3 v22)
  void OODCQQDCCD(Vector3 inner, Vector3& outer, float minDist)
  void ODOODODQCO(ERCrossingPrefabs scr, Vector3[] meshVecs)
  void ODQQQCOCCD(ERCrossingPrefabs scr, int connection)
  void ODCQDDDOOO(ERCrossingPrefabs scr, QDOODOQQDQODD el1, QDOODOQQDQODD el2, int leftright)
  void OCDOQOOCCC(ERCrossingPrefabs scr)
  Vector3 ODCCDOCDQD(Transform transform, Vector3 pos, ERModularBase scr)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.QDDDQODDQDQDQDD
Наследуется от: MonoBehaviour
Поля:
  Vector3 testPoint
  ERCrossings cScr
  List`1<Vector3> ll1
  List`1<Vector3> ll2
  List`1<Vector3> ll3
  List`1<Vector3> ll4
  int crossingStructure
  List`1<QDQDOOQQDQODD> roadTypesDynamic
  ERModularBase baseScript
  List`1<ERConnectionSibling> siblings
  Vector3 crossPointCenter
  ERCrossingPrefabs prefabScript
  ERConnectionSibling primaryPriorityConnection
  ERConnectionSibling secondPriorityConnection
  float ᙃ
  float ᙄ
  List`1<Vector3> debugEdges
  List`1<Vector3> debugvecs
Свойства:
Методы:
  List`1<QDQDOOQQDQODD> OQQCDQOQCD(List`1<QDQDOOQQDQODD> roadTypes, bool all)
  void OQODQQQCOC(ERCrossings scr)
  void ODODCOOQDO()
  bool OCODDQQOCQ(List`1<ERConnectionSibling> siblings, int thisSibling, int OtherSibling, int startLane)
  void OQCDQDQOOO(bool hasLaneControlData)
  ERLaneConnector OCODCDQQOQ(ERCrossings scr, int startConnectionIndex, int startLaneIndex, int endConnectionIndex, int endLaneIndex, bool stop)
  void OQQDCODOQD(ERCrossingPrefabs scr, ERLaneConnector& conn, int startConnectionIndex)
  bool OQQQQQODQD(Vector3 left, Vector3 rightStart, Vector3 rightEnd, Single& angle1, float prevAngle1, float angle2, bool flag)
  Vector3 OODQQDCDCD(float distance, float angle)
  void OQDOCDCQCD(Vector3 cp, float roadWidth, Vector3& lStart, Vector3& lEnd, Vector3& rStart, Vector3& rEnd, float largestRadius)
  void GetOCOCQCDDCD(Vector3 cp, float radius, int cornerSegments, Vector3 leftPoint, Vector3 rightPoint, List`1& leftpoints, List`1& rightpoints, bool flag)
  void OOCCQCDQQC(List`1<Vector3> rightPoints1, List`1<Vector3> leftPoints1, List`1<Vector3> leftPoints2, List`1<Vector3> rightPoints2, List`1& outerpoints, List`1& innerpoints, float dist)
  void OOOQOQODDD(Single& uvRatio, List`1& priorityLeftPoints, List`1& priorityRightPoints, List`1& rightRoundingPoints, List`1& leftRoundingPoints, List`1& leftRoundingPointsOther, List`1& rightRoundingPointsOther)
  bool OOCOCOCDQD(float radius, int cornerSegments, Vector3 startPoint, Vector3 endPoint, List`1& points, List`1& priorityPoints, float curvature, bool swapflag, bool priorityIsSingleSection, Vector3 prioritySectionDir, int leftright, bool leftRightCheck, Int32& mainIndex, Boolean& insertFlag)
  void MatchLeftRights(List`1& leftRoundingPoints, Vector3 lStart, List`1& rightRoundingPoints, Vector3 rStart)
  void OOCDCOQDDO(List`1<Vector3> leftRoundingPoints, List`1<Vector3> rightRoundingPoints, List`1& roadVecs, List`1<Vector2> roadShape, int leftFixedPoint, int rightFixedPoint, int middleIndex, Vector3 cp, Vector3 cp1, List`1& priorityPointsMain, ERConnectionSibling prioritySibling, bool isSecondary)
  bool OOCOCCQDCQ(Vector3 v, List`1<Vector3> points, int firstIndex, int lastIndex)
  void OODQCOCOQD(List`1<Vector3> leftRoundingPoints, List`1<Vector3> rightRoundingPoints, List`1& roadVecs, List`1<Vector2> roadShape, int leftFixedPoint, int rightFixedPoint, int middleIndex, Vector3 cp, Vector3 cp1)
  void OQQDQCQCDQ(List`1<Vector3> roundingPoints, List`1& pointsIndents, float indent, Vector3 lp, Vector3 rp, bool leftSide)
  void OOQQOOOQOO(List`1& centerPoints, List`1<Vector3> leftRoundingPoints, List`1<Vector3> leftPointsIndents, List`1<Vector3> rightRoundingPoints, List`1<Vector3> rightPointsIndents, Vector3 cp)
  void OOCCDOCDDC(List`1& centerPoints, List`1<Vector3> leftRoundingPoints, List`1<Vector3> leftPointsIndents, List`1<Vector3> rightRoundingPoints, List`1<Vector3> rightPointsIndents)
  void MatchInnerOCOCQCDDCD(List`1& innerArray, List`1<Vector3> startVecs, List`1<Vector3> endVecs)
  void ODDCCDQDCO(List`1& targetArray, List`1<Vector3> otherArray)
  void ERODOCDOOCCC(List`1<List`1<Vector3>> roadVecs, List`1<float> shapeUVs, List`1& uvs, List`1<Vector3> priorityPointsMain, List`1& priorityPointsMainUVs, Vector2 cp, float uvRatio, ERConnectionSibling sibling, bool primarySection)
  void OCQODCQDOD(List`1<Vector3> leftRoundingPoints, List`1<Vector3> leftPointsIndents, List`1<Vector3> centerPoints, List`1<Vector3> rightPointsIndents, List`1<Vector3> rightRoundingPoints, List`1& leftRoundingPointsUV, List`1& leftPointsIndentsUV, List`1& centerPointsUV, List`1& rightPointsIndentsUV, List`1& rightRoundingPointsUV, Vector2& cp, float leftIndentUVX, float rightIndentUVX)
  void OCOQCCQCCC(List`1<Vector3> leftRoundingPoints, List`1<Vector3> rightRoundingPoints, List`1& leftRoundingPointsUV, List`1& rightRoundingPointsUV)
  void OOCDCQQQCD(List`1& leftRoundingPoints, List`1& rightRoundingPoints, List`1& centerPoints, Vector3& cpLeft, Vector3& cpRight, List`1<Vector3> priorityRoad, float cornerRadius, float cornerSegments, Vector3 lStart, Vector3 lEnd, Vector3 rStart, Vector3 rEnd, float leftIndent, float leftIndentUVX, float rightIndent, float rightIndentUVX)
  void OOOQCOOQDD(List`1<Vector3> outerPoints, Vector3 pos, Single& uvX, float indentUVX, float indentdist, int leftright)
  void OCOCCCCDOO(List`1& indentPoints, List`1<Vector3> outerPoints, List`1<Vector3> priorityConnectionPoints, int leftright)
  void OQDQCQCDQQ(List`1& centerPoints, List`1<Vector3> priorityConnectionPoints)
  void ODDDOCDCQO(List`1<ERConnectionSibling> priorityRoads, List`1<ERConnectionSibling> primaryRoads)
  void OQOQDQDOOO(Transform tr, ERConnectionSibling sibling, int index)
  void ODODQCDCOD(List`1& tris, List`1& vecs, List`1& uvs, List`1<List`1<Vector3>> vecsData, List`1<List`1<Vector2>> uvsData, List`1<Vector3> priorityPointsMain, List`1<Vector2> priorityPointsMainUVs, List`1& colors, List`1<bool> originalShapeVecs, List`1& connInts, int totalVecs, List`1& secondPriorityInts, bool singleSectionFlag, ERConnectionSibling sibling)
  void ODDCQODOCD(List`1& tris, List`1& vecs, List`1& uvs, List`1<List`1<Vector3>> vecsData, List`1<List`1<Vector2>> uvsData, List`1<Vector3> priorityPointsMain, List`1<Vector2> priorityPointsMainUVs, List`1& colors, List`1<bool> originalShapeVecs, List`1& connInts, int totalVecs, List`1& secondPriorityInts, bool singleSectionFlag, ERConnectionSibling sibling)
  void OQCDQQOCOC(int curLeft, int endLeft, int curRight, int endRight, List`1<Vector3> vecs, List`1& tris, ERConnectionSibling sibling)
  void OOOQCQDCDD(int curLeft, int endLeft, int curRight, int endRight, List`1<int> rightInts, List`1<Vector3> vecs, List`1& tris, ERConnectionSibling sibling)
  void OCDOQDDCQC(List`1& tris, List`1& vecs, List`1& uvs, List`1<List`1<Vector3>> vecsData, List`1<List`1<Vector2>> uvsData, List`1<Vector3> priorityPointsMain, List`1<Vector2> priorityPointsMainUVs, List`1& colors, List`1<bool> originalShapeVecs, List`1& connInts, int totalVecs, List`1& secondPriorityInts, bool singleSectionFlag, ERConnectionSibling sibling)
  void OOCCQCDDDQ(List`1& tris, List`1& vecs, List`1& uvs, List`1<List`1<Vector3>> vecsData, List`1<List`1<Vector2>> uvsData, List`1<Vector3> priorityPointsMain, List`1<Vector2> priorityPointsMainUVs, List`1& colors, List`1<bool> originalShapeVecs, List`1& connInts, int totalVecs, List`1& secondPriorityInts, bool singleSectionFlag, ERConnectionSibling sibling)
  void OQCQQDDDCQ(List`1& tris, List`1& vecs, List`1& uvs, List`1& uvs1, List`1& uvs2, List`1& colors, List`1<Vector3> mleftPoints, List`1<Vector3> rightPoints, List`1<Vector3> centerPoints, Vector3 leftPoint, Vector3 rightPoint, List`1<Vector2> leftRoundingPointsUV, List`1<Vector2> rightRoundingPointsUV, List`1<Vector2> centerPointsUV, Vector2 cpUV, List`1<Vector3> leftPointsIndents, List`1<Vector2> leftPointsIndentsUV, List`1<Vector3> rightPointsIndents, List`1<Vector2> rightPointsIndentsUV)
  void OCDCQDDDCC(List`1& tris, List`1& vecs, List`1& uvs, List`1& uvs1, List`1& uvs2, List`1& colors, List`1<Vector3> mleftPoints, List`1<Vector3> rightPoints, List`1<Vector3> centerPoints, Vector3 leftPoint, Vector3 rightPoint, List`1<Vector2> leftRoundingPointsUV, List`1<Vector2> rightRoundingPointsUV, List`1<Vector2> centerPointsUV, Vector2 cpUV, List`1<Vector3> leftPointsIndents, List`1<Vector2> leftPointsIndentsUV, List`1<Vector3> rightPointsIndents, List`1<Vector2> rightPointsIndentsUV)
  void ForkPriorityOCODCOCODQ(List`1& tris, List`1& vecs, List`1& uvs, List`1& uvs1, List`1& uvs2, List`1& colors, List`1<Vector3> mleftPoints, List`1<Vector3> rightPoints, List`1<Vector3> centerPoints, Vector3 leftPoint, Vector3 rightPoint, List`1<Vector2> leftRoundingPointsUV, List`1<Vector2> rightRoundingPointsUV, List`1<Vector2> centerPointsUV, Vector2 cpUV, List`1<Vector3> leftPointsIndents, List`1<Vector2> leftPointsIndentsUV, List`1<Vector3> rightPointsIndents, List`1<Vector2> rightPointsIndentsUV, List`1<Vector3> mainPoints, List`1<Vector2> mainPointsUV)
  void OCOQOCDCCQ(List`1& tris, List`1& vecs, List`1& uvs, List`1& uvs1, List`1& uvs2, List`1& colors, List`1& trisTmp, List`1& vecsTmp, List`1& uvsTmp, List`1& uvsTmp1, List`1& uvsTmp2, List`1& colorsTmp, bool skipMiddles, bool weldVecs)
  void MergeMeshDataExt(List`1& tris, List`1& vecs, List`1& uvs, List`1& uvs1, List`1& uvs2, List`1& colors, List`1& trisTmp, List`1& vecsTmp, List`1& uvsTmp, List`1& uvsTmp1, List`1& uvsTmp2, List`1& colorsTmp, bool skipMiddles, bool weldVecs, Material mat, List`1& mats)
  void OCQODCOQDO(List`1& tris, List`1& vecs, List`1& uvs, List`1& uvs1, List`1& uvs2, List`1& colors, List`1& trisTmp, List`1& vecsTmp, List`1& uvsTmp, List`1& uvsTmp1, List`1& uvsTmp2, List`1& colorsTmp, bool skipMiddles, bool weldVecs)
  List`1<int> Triangulate(List`1<Vector3> vecs, List`1<Vector3> edges)
  void OCQDDOQCOQ(QDOODOQQDQODD connection, ERConnectionSibling sibling, int index, int total)
  void OOCQCOOOOO(List`1<ERConnectionSibling> siblings, int index)
  bool OQQQQQQQCD(QDQDOOQQDQODD roadType)
  Vector3 OOQCQDQCOO(int index, Vector3 p0, Vector3 p1, Vector3 p2)
  void Clear()
  void OOODDOCOOO()
  void OOOQQDDCCQ(ERTexture roadERTexture, Single& roadWidth, Single& leftIndent, Single& rightIndent, Single& leftUVX, Single& rightUVX, Single& leftIndentInner, Single& rightIndentInner, Single& roadOuterUVXInner, float cornerRadius)
  void OQOCODDDDC(int connection, QDQDOOQQDQODD roadType)
  float OOCDQCOCQO(Vector3 v1, Vector3 v2, Vector3 n)
  Vector3 OQOQODOOCD(Vector3 dirPos1, Vector3 dirPos2, Vector3 currentPos, List`1<Vector3> vecs, int startend)
  Vector3 ODQQOCDCOC(Vector3 currentPos, List`1<Vector3> vecs, Int32& index, int startend)
  bool OQQOCCCOCD(Vector3 p1, Vector3 p2, Vector3 v)
  void .ctor()
  void .cctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERMarkerExt
Наследуется от: ScriptableObject
Поля:
  bool activeSplineNode
  float leftIndent
  int leftIndentAlignment
  float rightIndent
  int rightIndentAlignment
  float leftSurrounding
  float rightSurrounding
  float radius
  bool bridgeObject
  float bridgeStartLevelDistance
  float bridgeEndLevelDistance
  float rotation
  Vector3 position
  Vector3 oldPosition
  Vector3 positionTmp
  int controlType
  int controlTypeTmp
  int rotations
  float circularRadius
  float circularAngle
  int circularSegments
  float splineStrength
  Vector3 direction
  Vector3 direction1
  Vector3 rl
  Vector3 rr
  bool followTerrainContours
  int startSplinePoint
  float startDistance
  float startUVY
  float totalDistance
  string totalDistanceString
  string angleString
  string gradeString
  float rotationCenter
  List`1<ERSOMarkerExt> soData
  ERMarkerControlType controllerType
  float randomYPosition
  float randomMinYPosition
  float randomMaxYPosition
  float minRandomYPositionDistance
  float maxRandomYPositionDistance
  float randomMinRotation
  float randomMaxRotation
  float minRandomRotationDistance
  float maxRandomRotationDistance
  float prevLeftIndent
  float prevRightIndent
  float prevLeftSurrounding
  float prevRightSurrounding
  int prevControlType
  bool attachExit
  int exitType
  int exitGeometryType
  int startExitInt
  int endExitInt
  float startExitOffset
  float extrusionDistance
  int extrusionType
  float fixedDistance
  float connectionAngle
  float connectionRadius
  Material exitMaterial
  Material connectionMaterial
  int exitRoadType
  int connectionRoadType
  List`1<List`1<Vector3>> exitOuterVerticesExtrusion
  List`1<List`1<Vector3>> exitOuterVerticesFixed
  List`1<List`1<Vector3>> exitOuterVerticesCurve
  List`1<Vector3> exitInnerVertices
  Color customColor
  List`1<Vector2> roadShape
  List`1<Vector3> roadShapeVecsGlobal
  float roadShapeDistanceMin
  float roadShapeDistanceMax
  Vector3 perpDir
  Vector3 perpDirRotated
  float markerStartUVY
  List`1<Vector3> customPoints
Свойства:
Методы:
  void Init(Vector3 pos, ERModularRoad scr, int element)
  ERMarkerExt CreateInstance(Vector3 pos, ERModularRoad scr, int element)
  void SetControlType(ERMarkerControlType type)
  String[] SoNames()
  void OOQQCOQDQC(ERMarkerExt source, ERMarkerExt target, string name)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OOCQQOOQOD
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OOQCQDDOOC(ERModularBase baseScript, ERCrossingPrefabs scr, int connectionSegment, ERModularRoad road, int startend)
  void OCOCOCCDOO(ERModularBase baseScript, ERCrossingPrefabs scr, int connectionSegment, ERModularRoad road, int startend)
  void OODQQOQDOC(ERModularBase baseScript, ERCrossingPrefabs scr, int connectionSegment, ERModularRoad road, ERCrossingPrefabs otherPrefabScript, int otherConnection)
  void ODOCQDCDOQ(ERCrossingPrefabs scr, int lookUpElement, Boolean& roadOnNeighbour, Int32& cornerElement, Boolean& centerStatus)
  void OQOOQCDOCD(ERCrossingPrefabs scr, int lookUpElement, Boolean& roadOnNeighbour, Int32& cornerElement, Boolean& centerStatus)
  bool CheckRoadTypeChanges(ERModularBase baseScript, ERCrossingPrefabs prefabScript, bool ercrossing, bool erroundabout)
  void UpdateToRoadType(ERCrossingPrefabs prefabScript, QDQDOOQQDQODD sourcePreset, List`1& updatedRoads)
  void SwapConnectionInit(ERModularBase scr, ERCrossingPrefabs prefab, Int32& newIndex, Int32& oldIndex, Int32& index1, Int32& index2, ERModularRoad& road1, ERModularRoad& road2)
  void OCCDCDQOOD(ERModularBase scr, ERCrossingPrefabs prefab, int newIndex, int oldIndex, int index1, int index2, ERModularRoad road1, ERModularRoad road2)
  void OCODDODODQ(ERCrossingPrefabs prefab, int index, Int32& newIndex)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OQCDCDQCCD
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OQQODODQCQ(ERCrossingPrefabs scr, Vector3[] meshVecs, Vector3[]& surfaceMeshVecs)
  void UpdateYCrossingSurfaces(ERCrossingPrefabs scr, Vector3[] meshVecs, List`1<ERConnectionSibling> siblings, Vector3[]& surfaceMeshVecs)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OOODCDOCOC
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OCCCOOOCDO(ERCrossingPrefabs scr, ERModularBase baseScript)
  void OQCDCQOQDC(List`1& indentVecs, List`1& baseVecs, List`1& uvs, List`1& doSurroundingTriangle, List`1<Vector3> vecs, List`1<int> surfaceVecType, float indent, float surrounding, ERCrossingPrefabs scr, Boolean& lastIndentIsRight)
  void ODCCDDODCD(Vector3& indentVec, Vector3& dir, Vector3 vec, Vector3 prefVec, Vector3 nextVec, float indent, int leftOrRight)
  bool OCQODQCOOC(Vector3 vec, Vector3& rightIndentVec, Vector3& rightVec, Vector3& leftIndentVec, Vector3& leftVec, Int32& startInt, List`1<Vector3> vecs, List`1<int> surfaceVecType, float indent, Vector3 leftIndentDir, Vector3 checkVec)
  float ERGetInterpolationDistance(Vector3 pos, Vector3 dir, Vector3 vec)
  Vector3 GetNextRightVec(int startInt, List`1<Vector3> vecs, List`1<int> surfaceVecType)
  void ODDDDQDDQC(List`1& indentVecs, List`1& baseVecs, List`1& doSurroundingTriangle, Vector3 rightVec, Vector3 baseVec)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.NormalPairs
Наследуется от: ValueType
Поля:
  int index1
  int index2
Свойства:
Методы:
--------------------------------------------------
Класс: EasyRoads3Dv3.OQOQQODODO
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OQQQQQODDO(ERCrossings scr, Single& firstSegmentDistance)
  void OODDQCQOQQ(List`1& vecs, float firstX, float firstZ, float lastX, float lastZ)
  Vector3 OCCDQDCQCD(int i, float radius, float angle)
  void OQODOQQCOO(ERCrossings scr)
  void ODOODDOQOQ(List`1<Vector3> vecs, float firstX, float firstZ, float sidewalkWidth, float resolution, float currentDist)
  void OOOCDOCQQO(ERCrossings scr)
  void OOOCOQODOO(List`1<Vector3> targetVecs, float targetValue, float firstX, float firstZ, float resolution, int xorz)
  void OCOOOQQQQO(ERCrossings scr)
  List`1<Vector3> OOOCCCCDDQ(List`1<Vector3> sourceVecs, float leftRight, float distance)
  void OOCCOQQDQQ(ERCrossings scr)
  List`1<Vector3> OOOODDQDCC(List`1<Vector3> sourceVecs, int xorz)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OQQDOCQOCO
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OQDCOQDQDO(ERCrossings scr, List`1& meshVecs, List`1& meshUVs, List`1& triList, List`1<Material> materialList, List`1<Material> connectionMaterialList)
  void OCODCOCODQ(ERCrossings scr, List`1<List`1<Vector3>> vecArray, List`1<List`1<Vector2>> uvArray, int frontLeft, int topBottom, List`1& meshVecs, List`1& meshUVs, List`1& triList, List`1& intArray, int startRow, int triArrayIndex, int connection, List`1& borderIntsLeft, List`1& borderIntsRight, int centerPointIndex)
  List`1<int> OODCODOODC(List`1<List`1<int>> intArray)
  List`1<int> OCCQOODCCO(List`1<int> col1, List`1<int> col2, int startRow, int type)
  List`1<int> OOQCQQDDQC(List`1<int> col1, List`1<int> col2, List`1<Vector3> vecs1, List`1<Vector3> vecs2, int frontLeft, int topBottom, int startRow)
  void InitODCOCQQDDC(ERCrossings scr)
  void ODCOCQQDDC(ERCrossings scr, List`1<List`1<Vector3>> vecArray, List`1& uvs, List`1& uvArray, int verthorz, float uvTiling)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ODDCOQCOOO
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OQOQDODDCD(ERCrossings scr)
  void ODCCDOQOOC(ERCrossings scr)
  void OQOQDOOOQO(ERCrossings scr, List`1<Vector3> vecArray, Vector3 firstOther, float sidewalkWidth, int xorz, Int32& cornerInt)
  void OOOQCOQOOQ(ERCrossings scr, List`1<List`1<Vector3>> vecArray, List`1<List`1<Vector3>> vecArrayOther, QDOQDSQOOQDDD corner, int startEnd, int mainOrConnected, int outerCornerInt, bool crossingSide)
  void OODDCODCCQ(ERCrossings scr)
  List`1<Vector3> ODCODDCCOC(List`1<Vector3> outer, List`1<Vector3> outerOther, float dist, float height, int startend, int leftright, int outerCornerInt)
  List`1<Vector3> OOQQQQQCOO(List`1<Vector3> outer, float dist, float height, int startend, int leftright, int outerCornerInt)
  List`1<Vector3> OQCDDCOODQ(ERCrossings scr, List`1<Vector3> innerArray, float dist, float height, float sidewalkWidth, int startend, int leftright, int outerCornerInt)
  List`1<Vector3> OQODQDOQOQ(List`1<Vector3> outer, float height)
  void ODQDQQOQCC(ERCrossings scr, List`1<List`1<Vector3>> vecArray, List`1& uvArray, QDOQDSQOOQDDD corner, bool reverse, float uvTiling)
  void ODQOQOCCOC(List`1<List`1<Vector3>> vecArray, List`1& sidewalkUVs)
  void ODDCDODCCQ(List`1& outer1, List`1& outer2)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OQOQCCCDDQ
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OQDCOQDQDO(ERCrossings scr, List`1& meshVecs, List`1& meshUVs, List`1& triList, List`1& materialList)
  void OQCDQOQCOQ(ERRoundabouts scr, List`1& meshVecs, List`1& meshUVs, List`1& triList, List`1& materialList)
  void OQCCQQOCCO(ERRoundabouts scr, List`1<Vector3> vecs, List`1<Vector2> uvs, List`1<int> tris, List`1& meshVecs, List`1& meshUVs, List`1& triList, List`1& materialList)
  void OQCQDDDOQD(ERCrossings scr, List`1<List`1<Vector3>> vecArray, List`1<List`1<Vector2>> uvArray, int frontLeft, int topBottom, List`1& meshVecs, List`1& meshUVs, List`1& triList, List`1& intArray, List`1& materialList, bool reverse, QDOQDSQOOQDDD corner, int outerCornerInt, List`1& normalInts, List`1& normalIntsStart)
  void OQOCDQDDCO(ERRoundabouts scr, List`1<List`1<Vector3>> vecArray, List`1<List`1<Vector2>> uvArray, int frontLeft, int topBottom, List`1& meshVecs, List`1& startNormalInts, List`1& endNormalInts, List`1& meshUVs, List`1& triList, List`1& intArray, List`1& materialList, bool reverse, QDOQDSQOOQDDD corner, int outerCornerInt)
  List`1<int> OCCQOODCCO(List`1<int> col1, List`1<int> col2)
  List`1<int> OODOODOQOO(int outerPoint, List`1<int> innerCol, int startPoint, bool reverse)
  void OQCODDOCCD(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, List`1<Material> materialList, int leftrightroad)
  void OOCQCDDQOD()
  void ODOOOODDOO(List`1& materialList, List`1& triList, Material sidewalkMaterial, Int32& triArrayElement)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OQQCCQCDQQ
Наследуется от: MonoBehaviour
Поля:
  QDQDOOQQDQODD roadType
  double roadTypeID
  int roadTypeIndex
  int geometryType
  ERExitType exitType
  float offset
  int halfwayIndex
  int startSplineIndex
  int endSplineIndex
  Vector3 endSplinePointRight
  Vector3 endSplinePointLeft
  float startDistance
  float endDistance
  int markerIndex
  int extrusionType
  AnimationCurve extrusionCurve
  float extrusionDistance
  int startDistanceIndex
  float startDecalDistance
  float fixedDistance
  int fixedDistanceIndex
  float splitDistance
  AnimationCurve splitCurve
  float splitEndWidth
  float connectionAngle
  float connectionRadius
  ERModularRoad road
  ERCrossingPrefabs connector
  Vector3 connectionHandlePosition
  Vector3 OCODOQDODQ
  Vector3 handleDirection
  GameObject surfaceMesh
  GameObject exitSignObject
  float exitSignObjectOffset
  GameObject exitSignObjectInstance
  GameObject exitSplitSpawnObject
  int exitSplitSpawnType
  float exitSplitSpawnDistance
  float exitSplitSpawnStartOffset
  float exitSplitSpawnOffset
  float exitSplitSpawnObjectBounds
  List`1<GameObject> spawnedSplitObjects
  List`1<Vector3> soPointsRightStart
  int soRightSplitEndIndex
  List`1<Vector3> soPointsLeftStart
  int startLineMarkingDecal
  bool startDecalFoldout
  int splitLineMarkingDecal1
  bool splitDecal1Foldout
  int splitLineMarkingDecal2
  bool splitDecal2Foldout
  List`1<Vector3> edgeVecs
  List`1<Vector3> vecs
  List`1<Vector2> uvsArray
  List`1<Vector2> uvsArray2
  List`1<Color> customColors
  List`1<Color> colors
  List`1<int> tris
  int ᙃ
  int ᙄ
  int ᙅ
  List`1<Vector3> 4AAAA
  List`1<Vector3> 5AAA1
  List`1<Vector3> 6AAAA
  List`1<float> 7AAA1
  List`1<Vector3> 8AAAA
  Vector3 9AAA1
  float BAAAA
  float CAAA1
  float 00AAA
  float 10AA1
  int 20AAA
  int 30AA1
  List`1<Vector3> treeVecs
  List`1<Vector3> detailVecs
Свойства:
Методы:
  void OOOCDQDQDC(List`1<ERMarkerExt> markers, List`1<OQQCCQCDQQ> exitRoads, List`1& splinePoints, List`1& tValues)
  void ODOCDDDDDO(List`1<ERMarkerExt> markers, OQQCCQCDQQ exitRoad, List`1& splinePoints, List`1& tValues, int currentInt)
  void OQCCQOQDDO(ERModularBase baseScript, ERModularRoad road, List`1<OQQCCQCDQQ> exitRoads, List`1<ERMarkerExt> markers, List`1& soSplinePointsLeft, List`1& soSplinePointsRight, Boolean& hasExits, List`1<float> leftIndentFloats, List`1<float> rightIndentFloats, List`1<float> leftSurroundingFloats, List`1<float> rightSurroundingFloats, List`1& surfaceVecs)
  void OCCCOOCCQC(ERModularBase baseScript, ERModularRoad road, OQQCCQCDQQ exitRoad, List`1& soSplinePointsLeft, List`1& soSplinePointsRight, List`1<float> leftIndentFloats, List`1<float> rightIndentFloats, List`1<float> leftSurroundingFloats, List`1<float> rightSurroundingFloats, List`1& roadSurfaceVecs)
  void BuildMeshInit(OQQCCQCDQQ exitRoad, List`1<Vector3> vecs, List`1<Vector2> uvs, List`1<int> tris, List`1<Color> colors, Material mat, ERModularRoad road)
  void OQDDCODQCD()
  void SpawnSplitObjects()
  void OQDDCCQOOO(Int32& curGo, Vector3 v)
  void OOOOOCODQO(OQQCCQCDQQ exitRoad, int vecCount, List`1<Vector3> vecs, List`1<Vector2> uvsArray, List`1<int> tris)
  void ODQCODOCDO(OQQCCQCDQQ exitRoad, int vecCount, List`1<Vector3> vecs, List`1<Vector2> uvsArray, List`1<int> tris, int decalIndex)
  void OQCCDDDOQQ(int i, int j, Vector3 prevPos, List`1<Vector3> edgeVecs, List`1<Vector3> soSplinePointsRight, float angleThreshold, List`1& tmpvecs)
  void OOOQCQDCDD(int curLeft, int endLeft, int curRight, int endRight, List`1<int> rightInts, List`1<Vector3> vecs, List`1& tris)
  void ODCDCQCOCQ(List`1<Vector3> vecs, List`1& tris)
  void ODQDQDCOQD(ERModularBase baseScript, ERModularRoad road, OQQCCQCDQQ exitRoad, List`1& soSplinePointsLeft, List`1& soSplinePointsRight)
  void ODDDDDDQQD(ERModularBase baseScript, ERModularRoad road, ERMarkerExt marker, List`1& soSplinePointsLeft, List`1& soSplinePointsRight)
  void OQDOQDDCDD(ERModularBase baseScript, ERModularRoad road, OQQCCQCDQQ exitRoad, List`1<ERMarkerExt> markers, List`1<List`1<Vector3>> exitOuterVerticesExtrusion, List`1<List`1<Vector3>> exitOuterVerticesFixed, List`1<List`1<Vector3>> exitOuterVerticesCurve, List`1<Vector3> exitInnerVertices)
  void OCDQCQDDOQ(ERModularBase baseScript, ERModularRoad road, List`1<ERMarkerExt> markers)
  void OCDDDOQCCO(ERModularBase baseScript, List`1<ERMarkerExt> markers, List`1& vecs, List`1& uvsArray, List`1& uvsArray2, List`1& customColors, List`1& colors, List`1& tris, Material[]& materialsList)
  void OCDDCCQCCD(Int32& triIndex, List`1& tris, Material[]& materialsList, Material m)
  float OQQDDDDDOC(Vector3 v, List`1<Vector3> soSplinePointsLeft, List`1<Vector3> soSplinePointsRight, Int32& cInt, bool flag, Int32& match)
  void ODDDOCDCQO(List`1<Vector3> vecs, List`1<Vector2> uvs, List`1<int> tris, List`1<Color> colors, Material mat, GameObject go, ERModularRoad road)
  void OCCDCQQDOQ(List`1<Vector3> vecs, List`1<int> connectionInts, List`1<Vector3> surfaceVecs, Vector3 prefDirVec)
  Vector3 ODCCQQDQQQ()
  void OCQOQQCDOD(List`1<Vector3> surfaceVecs, List`1<Vector2> uvs, int firstSection, int secondSection)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERMeshUtility
Наследуется от: MonoBehaviour
Поля:
  ERModularBase baseScript
  int sourceInt
  string name
Свойства:
Методы:
  void OCQOQCDCQC()
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERRoadNetwork
Наследуется от: object
Поля:
  ERModularBase roadNetwork
  bool isInBuildMode
  string str
  RoadUpdateCallback onRoadUpdate
  BuildModeCallback onBuildModeEnter
  EditModeCallback onEditModeEnter
Свойства:
Методы:
  void OnBuildModeEnter()
  void OnEditModeEnter()
  void OnRoadUpdated(ERRoad road)
  void .ctor()
  void GetTerrainData()
  ERTrafficDirection GetTrafficDirection()
  void Translate(Vector3 pos)
  void CenterPivotPoints()
  ERRoad[] GetRoads()
  ERRoad GetRoadByName(string name)
  ERRoad GetRoadByGameObject(GameObject go)
  ERRoad CreateRoad(string roadName)
  ERRoad CreateRoad(string roadName, Vector3[] markers)
  ERRoad CreateRoad(string roadName, ERRoadType roadType)
  ERRoad CreateRoad(string roadName, ERRoadType roadType, Vector3[] markers)
  ERModularRoad InitRoad(string roadName, ERRoadType roadType, Material roadMaterial)
  void AddInititialMarkers(ERRoad road, Vector3[] markers)
  void AddIntersection(ERCrossingPrefabs crossing, GameObject crossingPrefab)
  void BuildRoadNetwork(bool splatmaps, bool trees, bool detail, ERRoad[] roads)
  void BuildRoadNetwork(bool splatmaps, bool trees, bool detail)
  void BuildRoadNetwork()
  void DoBuildRoadNetwork()
  void RestoreRoadNetwork()
  ERRoadType[] GetRoadTypes()
  ERRoadType GetRoadTypeByName(string name)
  SideObject GetSideObjectByName(string name)
  ERRoadType AddRoadType()
  void HideWhiteSurfaces(bool flag)
  ERConnection[] GetConnections()
  ERConnection GetConnectionByName(string name)
  ERConnection[] LoadConnections()
  ERConnection GetSourceConnectionByName(string name)
  ERConnection GetConnectionPrefabByName(string name)
  ERConnection InstantiateConnection(ERConnection OQQCOQOCDO, string name, Vector3 position, Vector3 euler)
  void SetRaiseOffset(float value)
  ERRoad OODOOOQQCO(ERRoad road)
  float GetRaiseOffset()
  void ClampUVs(bool clamp)
  ERRoad ConnectRoads(ERRoad road1, ERRoad road2)
  ERRoad ConnectRoads(ERRoad road1, int marker1, ERRoad road2, int marker2)
  bool CheckRoads(ERRoad road1, ERRoad road2, String& str)
  void SetTerrainNormals(Mesh m, GameObject go)
  void Refresh()
  void FinalizeObjects()
--------------------------------------------------
Класс: EasyRoads3Dv3.ODQDQDQDQOExt
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OOODCQCQOC(ERModularBase scr)
  String[] OQDQCCCDQO(ERModularRoad scr, String[] prefabs, ERCrossingPrefabs[]& prefs, int type)
  bool OQDOQQDDOC(ERModularRoad road, Boolean& left, Boolean& right)
  bool OCCCQODODQ(ERCrossingPrefabs prefab, ERModularRoad road, int marker, int connection)
  bool OCQDQQDOOD(ERCrossingPrefabs prefab, ERModularRoad road, int marker, int connection)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OCQOQOOOCO
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  float OCOCQCDDCD(List`1& splinePoints, ERModularRoad scr, int marker, List`1& segPoints, List`1& tValues, Single& totalDist, int startMarker, Single& xzDistance, bool getDistance, Single& radius, List`1& bendAngles)
  Vector3 OOODCCODQD(Vector3& m2, Vector3& m1, Vector3& dir1, Vector3& dir2, Vector3 p1, Vector3 p4, Boolean& isAhead, Int32& firstLastAdjust, Boolean& isNoAdjust, ERModularRoad scr)
  float ODOCQOODDO(List`1& splinePoints, ERModularRoad scr, int marker, List`1& segPoints, List`1& tValues, Single& totalDist, int startMarker, Single& xzDistance, bool getDistance, List`1& bendAngles)
  Vector3 OCOCQCDDCD(ERModularRoad scr, int marker, Boolean& flag)
  void OOCCQCOOQQ(List`1& splinePoints, ERModularRoad scr, int marker, Vector3& pivotp, Vector3& p1, Vector3& p2, List`1& segPoints, List`1& tValues)
  void OQCQQDCDQO(ERModularRoad roadScr, List`1& tmpNodes, List`1<float> splineStrength, ERCrossingPrefabs prefabInstance, int connectionSegment, Vector3& connectionDir, Vector3& lastForward, int startEnd)
  int OCCCDCOQCC(ERModularRoad scr, List`1<Vector3> splinePoints, float minIndent, float outerRoadDistance, Vector3 ODCQDOOOCCIndent, Vector3 startPrefabIndent, int leftright)
  int OOQQDDDOQC(ERModularRoad scr, List`1<Vector3> splinePoints, float minIndent, float outerRoadDistance, Vector3 ODCQDOOOCCIndent, Vector3 startPrefabIndent, int leftright, Int32& endAdjustInt, Single& endAdjustDistance)
  ERModularRoad OCQDOCOODD(ERModularRoad scr, int marker)
  ERMarkerExt DuplicateMarker(ERMarkerExt sourceMarker)
  GameObject JoinRoads(List`1& objects, ERModularRoad& road, Int32& marker)
  void SwapIndentsSurroundings(ERModularRoad scr)
  void SwapSideObjects(ERModularRoad scr)
  int SoIndexMatch(ERSOMarkerExt markerSO, List`1<ERSOMarkerExt> Sos, int index)
  bool ODCODDQDCC(List`1<Vector3> splinePoints, int markers)
  void ODQDCODODC(ERModularRoad scr, Vector3 OOCDQCOOQC, ERCrossingPrefabs ODCQDOOOCC, int targetElement, bool reverse, bool uvReverse, bool forceAutoRotate)
  void OODCOQOQOD(ERModularRoad scr, List`1& surfaceVecs, ERCrossingPrefabs prefabScript, Boolean& startSurfacesSafe, float distance, float minIndent)
  void ODOCCQDCQO(ERModularRoad scr, List`1& surfaceVecs, ERCrossingPrefabs prefabScript, int el, Boolean& surfacesSafe, float distance, float minIndent)
  void OCDCDQQQDO(ERModularRoad scr, ERCrossingPrefabs ODCQDOOOCC, int targetElement, bool reverse, bool uvReverse, bool UpdateResolutionFlag)
  void ODQOCCDCOC(List`1& uv1, List`1& uv2)
  List`1<int> OCCCDQCDOC(ERModularRoad scr, List`1<Vector2> roadShapeVecs, List`1<Vector2> connectionVecs, int startend)
  List`1<int> ODDCOQQDCO(ERModularRoad scr, List`1<Vector2> roadShapeVecs, ERCrossingPrefabs prefab, int connection, int startend)
  void OOCQODCOOQ(ERModularBase baseScr, ERModularRoad scr, int m1, int m2, int m3)
  void ODQDQOQQCO(ERModularBase baseScr, ERModularRoad scr, int m1, int m2, int m3)
  void OCDDCDDCQC(ERModularBase baseScript, List`1& vecs, List`1<float> tValues, float heigthOffset, Vector3& lastHeightAdjustCP, float resolution, float distance, bool nextMarkerContourAdjust, List`1<Vector3> currentVecs, List`1& testPoints, List`1& randomRotations)
  void OQDOQOCDCC(int lastInt, int currentInt, List`1<float> tValues, List`1& tmpTValues)
  bool OQCODQODCO(Vector3 ODCQDOOOCCIndent, Vector3 otherPrefabIndent, Vector3 v)
  Vector3 OQOCQCOCQQ(Vector3 position, Vector3 sourceV3, float angle, Vector3 euler)
  Vector3 ODOQCDQQCC(Vector3 position, Vector3 sourceV3, float angle, Vector3 euler)
  Vector3 GetEulerAngles(Vector3 v3direction)
  void ODCQCQCQDQ(GameObject road, Mesh sourceMesh, int LODCount, int LODLevel, int colCount, List`1<bool> hardEdge, List`1<int> roadShapeMaterialIntCounts)
  void ODQCQCOOCQ(ERCrossingPrefabs prefab, ERModularRoad road, int connectionIndex, int startEnd)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERTerrain
Наследуется от: MonoBehaviour
Поля:
  List`1<Vector3> surfacevecs
  Single[] tdataFloat
  TerrainData terrainData
  int xStart
  int zStart
  GameObject roadSurface
  Mesh surfaceMesh
  MeshCollider surfaceCollider
  List`1<ERTerrainData> terrainDataStored
  List`1<ERTerrainChange> terrainChanges
  List`1<ERTree> terrainTrees
  List`1<List`1<tPoint>> detailInstancesOld
  List`1<tPoint> detailInstances
  List`1<int> detailInstanceStarts
  List`1<GameObject> surfaceObjects
  List`1<Vector3> terrainTestPoints
  List`1<ERSplatmap> splatData
  List`1<ERTreeInstance> addedTrees
  List`1<ERCell> holes
  List`1<ERTerrainData> terrainHeightsBackup
  List`1<ERTree> terrainTreesBackup
  List`1<tPoint> terrainDetailBackup
  List`1<ERSplatmap> terrainSplatBackup
  List`1<int> detailInstanceStartsBackUp
  bool heightmapFlag
  bool splatmapFlag
  bool treeFlag
  bool detailFlag
  bool holesFlag
  bool terrainDone
  bool backupFlagNotification
  bool ignore
  GameObject backupObject
  TerrainData terrain
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.QDQDOOQQOOQDD
Наследуется от: MonoBehaviour
Поля:
  List`1<Vector3> ᙃ
  Single[0...,0...] ᙄ
  Single[] ᙅ
  TerrainData 4AAAA
  float minx
  float minz
  float maxx
  float maxz
  Vector2 splatMapScale
  List`1<GameObject> surfaceObjects
  List`1<GameObject> tunnelObjects
  int crossingSurfacesStart
  int sideObjectSurfacesStart
  List`1<GameObject> treeObjects
  List`1<GameObject> detailObjects
Свойства:
Методы:
  void ODDCCODOOC(ERModularBase scr, Terrain terrain)
  void ODCQDDOQCD(ERModularBase scr, ERTerrain terrainScr, Terrain terrain, float m_minx, float m_maxx, float m_minz, float m_maxz)
  void OOCQDQCDOD(int triangleIndex, Collider collider, Vector3 hitPos, Single& perc, Boolean& critical, Single& outerHeight, Vector3& outerPoint, RaycastHit hit)
  void GetHitPointInfoOld(int triangleIndex, Collider collider, Vector3 hitPos, Single& perc, Boolean& critical, Single& outerHeight, Vector3& outerPoint)
  void OQOQCCCODC(ERModularBase scr, Single& minx, Single& minz, Single& maxx, Single& maxz, float splatmapScale)
  void ODQODCQQCQ(ERModularBase scr, ERTerrain terrainScr, Terrain terrain, float minx, float maxx, float minz, float maxz)
  void OOCDDQCCDD(ERModularBase scr, ERTerrain terrainScr, Terrain terrain, float minx, float maxx, float minz, float maxz)
  void OOCDDOOCQC(ERModularBase scr, ERTerrain terrainScr, Terrain terrain, float minx, float maxx, float minz, float maxz)
  void OCCDDODDDD(Boolean[0...,0...]& holes, Single[0...,0...] heights, float height, List`1& terrainScrHoles, Vector3 lp, Vector3 rp, Vector3 terrainPos, float stepx, float stepy, float tHeight, float size)
  bool ODQODDQCCD(Single[0...,0...] heights, float height, int x, int y, float rHeight, float tHeight, float size, float terrainY)
  void ODQCOCOQQD(ERModularBase scr, ERTerrain terrainScr, Terrain terrain, float minx, float maxx, float minz, float maxz)
  Single[0...,0...,0...] OCCODCQOCO(List`1<ERSplatmap> mapData, Single[0...,0...,0...] trmap, int layers)
  void ODODDDDCOQ(ERModularBase scr, ERTerrain terrainScr, Terrain terrain)
  void OQQOQOQQQC(ERTerrain terrainScr, Terrain terrain)
  void ODCOOQCCCD(ERTerrain terrainScr, Terrain terrain)
  void OOQDOQDCOO(TerrainData terrainInfo, int layer, List`1<tPoint> points)
  List`1<tPoint> OQODQCQCCQ(ERModularBase scr, Terrain terrain, TerrainData terrainInfo, float minx, float maxx, float minz, float maxz)
  void OQCQDDOOCQ(ERTerrain tr, Terrain terrain)
  void OOODOOOQCC(ERTerrain tr, Terrain terrain, float perc)
  void OOOCCDQODO(GameObject go, int x, int y, List`1& instances, Single[0...,0...,0...] trmap, int layers, Vector2 uvy)
  void OOQQQQDCCO(ERModularBase baseScript, ERModularRoad scr)
  GameObject CreateMesh(Transform parent, List`1<Vector3> vecs, List`1<int> tris, int layer, ERModularRoad scr, string name)
  void OCCQODOQDD(ERTerrain terrain, string folder)
  void OQCOQDDCCC(ERTerrain terrain, string folder)
  void OOQQOOOQOO(ERTerrain terrain, string folder)
  void ODCOQQQCCO(ERTerrain terrain, string folder)
  void OCCOODODOQ(ERTerrain terrain, string folder)
  void OCCDQQCODQ(ERTerrain terrain, string folder)
  void OOOOCQCDQQ(ERTerrain terrain, string folder)
  void OOQOCCCCDD(ERTerrain terrain, string folder)
  void .ctor()
  void .cctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSideObjectInstance
Наследуется от: MonoBehaviour
Поля:
  SideObject so
  double id
  ERModularRoad roadScript
  List`1<GameObject> childs
  List`1<Vector3> vecs
  List`1<bool> terrainIndexes
  bool buildFlag
  bool postProcess
  bool batches
  bool combined
  List`1<GameObject> batchedObjects
  List`1<Vector3> startEndPositions
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSplatmap
Наследуется от: ValueType
Поля:
  int x
  int y
  int index
  int layer
  float value
  ERModularRoad script
  float tValue1
  float tValue2
  float tValue3
  float tValue4
  float tValue5
  float tValue6
  float tValue7
  float tValue8
  float tValue9
  float tValue10
  float tValue11
  float tValue12
Свойства:
Методы:
  void .ctor(int m_x, int m_y, int m_index, int m_layer, float m_value, ERModularRoad scr, float tv1, float tv2, float tv3, float tv4, float tv5, float tv6, float tv7, float tv8, float tv9, float tv10, float tv11, float tv12)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERTree
Наследуется от: object
Поля:
  Color color
  float heightScale
  Color lightmapColor
  Vector3 position
  int prototypeIndex
  float widthScale
Свойства:
Методы:
  void .ctor(TreeInstance instance)
  TreeInstance SetERTreeInstance(ERTree eRTreeinstance)
--------------------------------------------------
Класс: EasyRoads3Dv3.tPoint
Наследуется от: object
Поля:
  int x
  int z
  bool done
  float dist
  int v
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OOQQQDOCDD
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OCODDOCODQ(Int32& startInt, float startOffset, List`1& markerInts, List`1& vecPositions, List`1& soSplinePointLeft, List`1<Vector3> soSplinePointRight, ERSOMarkerExt& soMarker, ERModularRoad roadScr, List`1& nodeList)
  void OCQCDCDCQC(int startInt, float endOffset, List`1& markerInts, List`1& vecPositions, List`1& soSplinePointLeft, List`1<Vector3> soSplinePointRight, ERSOMarkerExt& soMarker, ERModularRoad roadScr, List`1& nodeList)
  bool MoveDirection(ERModularRoad road, ERSOMarkerExt markerSO, Vector3 v)
  void OQDCCQDCQQ(ERModularRoad road, ERSOMarkerExt markerSO, Vector3 v, Camera cam, Int32& xDir, Int32& yDir)
  void ODODODDCCQ(ERModularRoad road, ERSOMarkerExt markerSO, Vector3 v, Vector3 vOld, float movement)
  void OODCOCOCCO(ERModularRoad road, ERSOMarkerExt markerSO, Vector3 v)
  void OCQQDCQQCO(int startInt, List`1<Vector3> vecPositions, List`1<int> markersInts, ERSOMarkerExt& soMarker, bool startFlag, ERModularRoad roadScr)
  void SynchSoData(ERSORoadExt soData, bool flag)
  void OOQQCOQDQC(ERSORoadExt soData, ERSORoadExt source)
  void UnlockSORotation(List`1<ERSORoadExt> soDataList)
  void CheckMarkerSOData(SideObject so, ERModularRoad road)
  void ResetMarkerSOData(ERModularRoad road)
  void OQOQCQQCQQ(ERModularRoad road, SideObject so)
  void OOCDDOOOOQ(ERModularBase scr, SideObject so, GameObject go)
  bool IsActiveAsChild(ERModularBase scr, double soid, double targetSOId)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERMarker
Наследуется от: object
Поля:
  bool activeSplineNode
  float leftIndent
  int leftIndentAlignment
  float rightIndent
  int rightIndentAlignment
  float leftSurrounding
  float rightSurrounding
  bool bridgeObject
  float bridgeStartLevelDistance
  float bridgeEndLevelDistance
  float rotation
  Vector3 position
  int controlType
  int rotations
  float circularRadius
  float circularAngle
  int circularSegments
  float splineStrength
  Vector3 direction
  Vector3 direction1
  bool followTerrainContours
  int startSplinePoint
  float startDistance
  float startUVY
  float totalDistance
  string totalDistanceString
  string angleString
  float rotationCenter
  List`1<ERSOMarker> soData
  ERMarkerControlType controllerType
  bool attachExit
  int exitType
  int exitGeometryType
  int startExitInt
  int endExitInt
  float startExitOffset
  float extrusionDistance
  int extrusionType
  float fixedDistance
  float connectionAngle
  float connectionRadius
  Material exitMaterial
  Material connectionMaterial
  int exitRoadType
  int connectionRoadType
  List`1<List`1<Vector3>> exitOuterVerticesExtrusion
  List`1<List`1<Vector3>> exitOuterVerticesFixed
  List`1<List`1<Vector3>> exitOuterVerticesCurve
  List`1<Vector3> exitInnerVertices
  List`1<Vector2> roadShape
  List`1<Vector3> roadShapeVecsGlobal
  float markerStartUVY
  Vector3 perpDir
  Vector3 perpDirRotated
Свойства:
Методы:
  void .ctor(Vector3 pos, ERModularRoad scr, int element)
  void SetControlType(ERMarkerControlType type)
--------------------------------------------------
Класс: EasyRoads3Dv3.OCCQQCCDDD
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  List`1<Vector3> OQDDOOOOQD(ERModularRoad scr, int startMarker, int endMarker, List`1<ERMarkerExt> markers, float faceDist, bool ignorePrefabAlignment, List`1& tValues, List`1& markerDistances, List`1& bendAngles)
  void OCQOQCDCQC(ERModularRoad scr, bool ignorePrefabAlignment, List`1<Vector3> splinePoints, List`1<float> tValues, List`1<float> markerDistances, int startMarker, int endMarker, int startInt)
  void OCQOQCDCQC(ERModularRoad scr)
  ERModularRoad DuplicateObject(ERModularRoad scr)
  GameObject ODOCOCQODQ(ERModularRoad scr, Transform parent, Vector3 p1, Vector3 p2, float x1, float x2, float height, Vector3 heighthmapscale)
  void CreateSplatMeshes(ERModularRoad scr, List`1& soSplatmapObjects, float splatSize)
  GameObject BuildSplatMesh(ERModularRoad scr, List`1<Vector3> vecs, List`1<Vector2> uvs, List`1<int> tris, string name, int pos)
  void SetMarkerIndentAlignment(ERMarkerExt m, ERModularRoad scr)
  float GetleftToCenterPerc(List`1<Vector2> nodeList, int left, int right)
  void OQCDDDDOOQ(ERModularRoad r1, ERModularRoad r2, ERCrossingPrefabs prefab)
  void ODOOODOOOQ(ERModularRoad r1, ERModularRoad r2, int road1StartEnd, int road2StartEnd)
  void AverageTangentsRoadPrefab(ERModularRoad r1, ERCrossingPrefabs prefab, int road1StartEnd, int prefabStartEnd)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERPrefab
Наследуется от: MonoBehaviour
Поля:
  bool isRoadType
  bool isSidewalk
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERPrefabInstance
Наследуется от: MonoBehaviour
Поля:
  SideObject so
  GameObject prefab
  ERSORoadExt soData
  double id
  ERModularRoad roadScript
  bool buildFlag
  bool locked
  bool child
  int sectionIndex
Свойства:
Методы:
  void Copy(ERPrefabInstance source)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERMath
Наследуется от: object
Поля:
Свойства:
Методы:
  Vector3 GetPosition(Vector3[] points, Vector3 position, Single& distance, Int32& currentIndex, Single& t)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERRoadNetworkObject
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERRoundaboutsFunctions
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void ODCCQQODCO(ERRoundabouts scr, int currentIndex)
  void OQQDDDCCDO(ERRoundabouts scr, int currentIndex)
  void OOCCDQCCOQ(ERRoundabouts scr, int currentIndex)
  void OOOQCOQOOQ(ERRoundabouts scr, List`1<List`1<Vector3>> vecArray, List`1<List`1<Vector3>> vecArrayOther, QDOQDSQOOQDDD corner, int startEnd, int mainOrConnected, int outerCornerInt)
  List`1<Vector3> ODCODDCCOC(List`1<Vector3> outer, List`1<Vector3> outerOther, float dist, float height, int startend, int leftright, int outerCornerInt)
  List`1<Vector3> OQCDDCOODQ(ERRoundabouts scr, List`1<Vector3> innerArray, List`1<Vector3> outerOther, float dist, float height, float sidewalkWidth, int startend, int leftright, int outerCornerInt)
  List`1<Vector3> OQODQDOQOQ(List`1<Vector3> outer, float height)
  void ODQDQQOQCC(ERRoundabouts scr, List`1<List`1<Vector3>> vecArray, List`1& uvArray, QDOQDSQOOQDDD corner, bool reverse)
  void ODQOQOCCOC(List`1<List`1<Vector3>> vecArray, List`1& sidewalkUVs)
  void OCCQQQDDDQ(ERRoundabouts scr)
  void SetInnerSidewalkVars(ERRoundabouts scr, int preset)
  void BuildInnerRoundaboutSidewalkData(ERRoundabouts scr, ERModularBase baseScr, List`1<Vector3> mainRightPoints, List`1& innerRoundaboutSidewalkV3, List`1& innerRoundaboutSidewalUV, List`1& innerRoundaboutSidewalTris, Int32& innerSidewalkSegments)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERSideObjectSection
Наследуется от: MonoBehaviour
Поля:
  ERModularRoad road
  int sectionListIndex
  int sectionIndex
  double soId
  int leftright
  bool mirrored
Свойства:
Методы:
  void Copy(ERSideObjectSection source)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OCOCDDODDQ
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OQCODQOCQD(ERSideWalk sw, List`1& vecs, Vector3 startVec, int rows, int closedVecCountStart, int closedVecCountEnd, int startEnd)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERTerrainData
Наследуется от: object
Поля:
  int terrainWidth
  int terrainHeight
  float originalHeight
  float flattenedHeight
  float outerHeightDifference
  bool critical
  float perc
  Vector3 hitpos
  Vector3 outerPos
  bool ignorePreserveHeights
Свойства:
Методы:
  void .ctor(int m_terrainWidth, int m_terrainHeight, float m_originalHeight, float m_flattenedHeight, bool m_critical, float m_perc, float m_outerHeight, Vector3 m_hitPoint, Vector3 m_outerPoint)
--------------------------------------------------
Класс: EasyRoads3Dv3.ERTSidewalkTriangulation
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OQDCOQDQDO(ERCrossings scr, List`1& meshVecs, List`1& meshUVs, List`1& triList, List`1& materialList)
  void OQCQDDDOQD(ERCrossings scr, List`1<List`1<Vector3>> vecArray, List`1<List`1<Vector2>> uvArray, int frontLeft, int topBottom, List`1& meshVecs, List`1& meshUVs, List`1& triList, List`1& intArray, List`1& materialList, bool reverse, QDOQDSQOOQDDD corner, int outerCornerInt)
  List`1<int> OCCQOODCCO(List`1<int> col1, List`1<int> col2)
  List`1<int> OODOODOQOO(int outerPoint, List`1<int> innerCol, int startPoint, bool reverse)
  void OQCODDOCCD(ERCrossings scr, QDOQDSQOOQDDD corner, List`1<List`1<Vector3>> sourceVecs, List`1<List`1<Vector2>> sourceUVs, List`1<List`1<int>> sourceTris, List`1& vecs, List`1& uvs, List`1& triList, List`1<Material> materialList, int leftrightroad)
  void OOCQCDDQOD()
  void ODOOOODDOO(List`1& materialList, List`1& triList, Material sidewalkMaterial, Int32& triArrayElement)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.BinaryWriterEx
Наследуется от: BinaryWriter
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(string fileName)
  long Seek(long offset, SeekOrigin origin)
  void WriteStruct(object theStruct)
  void Write(Int32[] array)
  void Write(Single[] array)
--------------------------------------------------
Класс: EasyRoads3Dv3.ODOOCCQDOC
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void ODCQCQCQDQ(Mesh mesh)
  void OptimizeMeshFull(Mesh mesh)
  void OptimizeVertices(List`1<Vector3> vecs, List`1<int> triangles)
  int OQQQCDCOOO(Vector3[]& verts, int start, Vector3 v)
  void OCDDOQQCDO(Int32[]& tris, int old, int newInt)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.ERExtension
Наследуется от: object
Поля:
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.OQDQODQQCC
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  void OODDQOQCCD(int el, List`1& OQCODQQCOO, List`1& OOOQOOOODO, List`1& OCCDOQDDOD, List`1<Vector2> OODQOODCOQ, List`1<Vector2> OCOCQQCDOQ, Int32[] OCQDQOCDCQ, Int32[] OCDCODCDQC, Int32[] ODCQQOQCCC, Int32[] ODCOCDCQDO, Vector3[]& OODOOCCDQO, Vector2[]& OQQOCCDCQO, Int32[]& OOOOQOODCD, Vector3[]& OQCDOCDOQQ, Vector3[]& OOCOOQQDCO, Vector3[]& OCCQCDCOCD, Vector3[]& OCQCCCOOCO, int ODQCCQDCDC, bool OQQOOQCCDD, Vector3 OQCCCODDCD)
  void OCOOQCQOQO(List`1& OOQCOODQDO, List`1& OQQQCQQCOC, List`1& OCQQOCQQQD, List`1& OOOQDCCCQD, List`1<Vector3> vecs, List`1<Vector3> OCDQDQQCCC, int start, int end, Vector3 OQCCCODDCD, string OQDQOQDOCO, bool OQQOOQCCDD, Vector3 OCQQCCCQOQ, Vector3 OCDOOQOOCO, List`1& ODQOOOCDQO, List`1& OCOQQDODOO, List`1<Vector2> UVs)
  void OQCQCDCOQQ(List`1<Vector2> OCOCQQCDOQ, Vector3 OQCCCODDCD, List`1<Vector3> OOCCDCODCC, List`1<Vector3> OQDQQDCOQO, List`1<Vector2> OCDOCDODOD, List`1<Vector2> OCODQCCQOD, int el, Vector3[] OQODCDCQDD, Vector3[] OQQOCQOQQO, Vector2[] OCDOQODDCC, Vector2[] OOOQOCCOQO, Vector3 OCCCOQCCQO, Vector3 OOCCOQDQOD, Vector2 OCCOCQCDCQ, Vector2 OOCQDQCQDO)
  void OCDCOOOCCC(List`1<Vector2> OODQOODCOQ, Vector3 OQCCCODDCD, List`1<Vector3> OQODCDCQDD, List`1<Vector3> OQQOCQOQQO, List`1<Vector2> OCDOCDODOD, List`1<Vector2> OCODQCCQOD, int el, Vector3[] OOCCDCODCC, Vector3[] OQDQQDCOQO, Vector2[] ODQDDQDCCD, Vector2[] ODQQOQQODQ, Vector3 OQOQQDODOO, Vector3 OQOCDOQQOD, Vector2 OQOQQDODOOUV, Vector2 OQOCDOQQODUV)
  void ODDDCOCCQO(int el, Vector3[] OQDOQQCOCQ, Vector2[] ODQOOOCDQO, Vector3[] OQODCDCQDD, Vector3[] OOCCDCODCC, Vector2[] OCDOQODDCC, Vector2[] ODQDDQDCCD, Vector3 OQCCCODDCD)
  void OQQDCQOCQC(int el, Vector3[] OOQCQCOODD, Vector2[] OCOQQDODOO, Vector3[] OQQOCQOQQO, Vector3[] OQDQQDCOQO, Vector2[] OOOQOCCOQO, Vector2[] ODQQOQQODQ, Vector3 OQCCCODDCD)
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.TerrainsV3
Наследуется от: object
Поля:
  Terrain terrain
  string id
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: EasyRoads3Dv3.PointERV3
Наследуется от: object
Поля:
  float timeCreated
  Vector3 position
  bool lineBreak
  int curveFlag
  float Time
  int x
  int y
  int z
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
