Сборка: System.Core.dll
==================================================
Класс: <Module>
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: <>f__AnonymousType0`2
Наследуется от: object
Поля:
  <Info>j__TPar <Info>i__Field
  <GenType>j__TPar <GenType>i__Field
Свойства:
  <Info>j__TPar Info
  <GenType>j__TPar GenType
Методы:
  <Info>j__TPar get_Info()
  <GenType>j__TPar get_GenType()
  void .ctor(<Info>j__TPar Info, <GenType>j__TPar GenType)
  bool Equals(object value)
  int GetHashCode()
  string ToString()
--------------------------------------------------
Класс: Interop
Наследуется от: object
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: Consts
Наследуется от: object
Поля:
  string MonoCorlibVersion
  string MonoVersion
  string MonoCompany
  string MonoProduct
  string MonoCopyright
  string FxVersion
  string FxFileVersion
  string EnvironmentVersion
  string VsVersion
  string VsFileVersion
  string PublicKeyToken
  string AssemblyI18N
  string AssemblyMicrosoft_JScript
  string AssemblyMicrosoft_VisualStudio
  string AssemblyMicrosoft_VisualStudio_Web
  string AssemblyMicrosoft_VSDesigner
  string AssemblyMono_Http
  string AssemblyMono_Posix
  string AssemblyMono_Security
  string AssemblyMono_Messaging_RabbitMQ
  string AssemblyCorlib
  string AssemblySystem
  string AssemblySystem_Data
  string AssemblySystem_Design
  string AssemblySystem_DirectoryServices
  string AssemblySystem_Drawing
  string AssemblySystem_Drawing_Design
  string AssemblySystem_Messaging
  string AssemblySystem_Security
  string AssemblySystem_ServiceProcess
  string AssemblySystem_Web
  string AssemblySystem_Windows_Forms
  string AssemblySystem_2_0
  string AssemblySystemCore_3_5
  string AssemblySystem_Core
  string WindowsBase_3_0
  string AssemblyWindowsBase
  string AssemblyPresentationCore_3_5
  string AssemblyPresentationCore_4_0
  string AssemblyPresentationFramework_3_5
  string AssemblySystemServiceModel_3_0
Свойства:
Методы:
--------------------------------------------------
Класс: SR
Наследуется от: object
Поля:
  string ReducibleMustOverrideReduce
  string MustReduceToDifferent
  string ReducedNotCompatible
  string SetterHasNoParams
  string PropertyCannotHaveRefType
  string IndexesOfSetGetMustMatch
  string AccessorsCannotHaveVarArgs
  string AccessorsCannotHaveByRefArgs
  string BoundsCannotBeLessThanOne
  string TypeMustNotBeByRef
  string TypeMustNotBePointer
  string SetterMustBeVoid
  string PropertyTypeMustMatchGetter
  string PropertyTypeMustMatchSetter
  string BothAccessorsMustBeStatic
  string OnlyStaticFieldsHaveNullInstance
  string OnlyStaticPropertiesHaveNullInstance
  string OnlyStaticMethodsHaveNullInstance
  string PropertyTypeCannotBeVoid
  string InvalidUnboxType
  string ExpressionMustBeWriteable
  string ArgumentMustNotHaveValueType
  string MustBeReducible
  string AllTestValuesMustHaveSameType
  string AllCaseBodiesMustHaveSameType
  string DefaultBodyMustBeSupplied
  string LabelMustBeVoidOrHaveExpression
  string LabelTypeMustBeVoid
  string QuotedExpressionMustBeLambda
  string VariableMustNotBeByRef
  string DuplicateVariable
  string StartEndMustBeOrdered
  string FaultCannotHaveCatchOrFinally
  string TryMustHaveCatchFinallyOrFault
  string BodyOfCatchMustHaveSameTypeAsBodyOfTry
  string ExtensionNodeMustOverrideProperty
  string UserDefinedOperatorMustBeStatic
  string UserDefinedOperatorMustNotBeVoid
  string CoercionOperatorNotDefined
  string UnaryOperatorNotDefined
  string BinaryOperatorNotDefined
  string ReferenceEqualityNotDefined
  string OperandTypesDoNotMatchParameters
  string OverloadOperatorTypeDoesNotMatchConversionType
  string ConversionIsNotSupportedForArithmeticTypes
  string ArgumentMustBeArray
  string ArgumentMustBeBoolean
  string EqualityMustReturnBoolean
  string ArgumentMustBeFieldInfoOrPropertyInfo
  string ArgumentMustBeFieldInfoOrPropertyInfoOrMethod
  string ArgumentMustBeInstanceMember
  string ArgumentMustBeInteger
  string ArgumentMustBeArrayIndexType
  string ArgumentMustBeSingleDimensionalArrayType
  string ArgumentTypesMustMatch
  string CannotAutoInitializeValueTypeElementThroughProperty
  string CannotAutoInitializeValueTypeMemberThroughProperty
  string IncorrectTypeForTypeAs
  string CoalesceUsedOnNonNullType
  string ExpressionTypeCannotInitializeArrayType
  string ArgumentTypeDoesNotMatchMember
  string ArgumentMemberNotDeclOnType
  string ExpressionTypeDoesNotMatchReturn
  string ExpressionTypeDoesNotMatchAssignment
  string ExpressionTypeDoesNotMatchLabel
  string ExpressionTypeNotInvocable
  string FieldNotDefinedForType
  string InstanceFieldNotDefinedForType
  string FieldInfoNotDefinedForType
  string IncorrectNumberOfIndexes
  string IncorrectNumberOfLambdaDeclarationParameters
  string IncorrectNumberOfMembersForGivenConstructor
  string IncorrectNumberOfArgumentsForMembers
  string LambdaTypeMustBeDerivedFromSystemDelegate
  string MemberNotFieldOrProperty
  string MethodContainsGenericParameters
  string MethodIsGeneric
  string MethodNotPropertyAccessor
  string PropertyDoesNotHaveGetter
  string PropertyDoesNotHaveSetter
  string PropertyDoesNotHaveAccessor
  string NotAMemberOfType
  string NotAMemberOfAnyType
  string UnsupportedExpressionType
  string ParameterExpressionNotValidAsDelegate
  string PropertyNotDefinedForType
  string InstancePropertyNotDefinedForType
  string InstancePropertyWithoutParameterNotDefinedForType
  string InstancePropertyWithSpecifiedParametersNotDefinedForType
  string InstanceAndMethodTypeMismatch
  string TypeContainsGenericParameters
  string TypeIsGeneric
  string TypeMissingDefaultConstructor
  string ElementInitializerMethodNotAdd
  string ElementInitializerMethodNoRefOutParam
  string ElementInitializerMethodWithZeroArgs
  string ElementInitializerMethodStatic
  string TypeNotIEnumerable
  string UnhandledBinary
  string UnhandledBinding
  string UnhandledBindingType
  string UnhandledUnary
  string UnknownBindingType
  string UserDefinedOpMustHaveConsistentTypes
  string UserDefinedOpMustHaveValidReturnType
  string LogicalOperatorMustHaveBooleanOperators
  string MethodWithArgsDoesNotExistOnType
  string GenericMethodWithArgsDoesNotExistOnType
  string MethodWithMoreThanOneMatch
  string PropertyWithMoreThanOneMatch
  string IncorrectNumberOfTypeArgsForFunc
  string IncorrectNumberOfTypeArgsForAction
  string ArgumentCannotBeOfTypeVoid
  string OutOfRange
  string LabelTargetAlreadyDefined
  string LabelTargetUndefined
  string ControlCannotLeaveFinally
  string ControlCannotLeaveFilterTest
  string AmbiguousJump
  string ControlCannotEnterTry
  string ControlCannotEnterExpression
  string NonLocalJumpWithValue
  string CannotCompileConstant
  string CannotCompileDynamic
  string InvalidLvalue
  string UndefinedVariable
  string CannotCloseOverByRef
  string UnexpectedVarArgsCall
  string RethrowRequiresCatch
  string TryNotAllowedInFilter
  string MustRewriteToSameNode
  string MustRewriteChildToSameType
  string MustRewriteWithoutMethod
  string InvalidNullValue
  string InvalidObjectType
  string TryNotSupportedForMethodsWithRefArgs
  string TryNotSupportedForValueTypeInstances
  string EnumerationIsDone
  string TestValueTypeDoesNotMatchComparisonMethodParameter
  string SwitchValueTypeDoesNotMatchComparisonMethodParameter
  string PdbGeneratorNeedsExpressionCompiler
  string InvalidArgumentValue
  string NonEmptyCollectionRequired
  string CollectionModifiedWhileEnumerating
  string ExpressionMustBeReadable
  string ExpressionTypeDoesNotMatchMethodParameter
  string ExpressionTypeDoesNotMatchParameter
  string ExpressionTypeDoesNotMatchConstructorParameter
  string IncorrectNumberOfMethodCallArguments
  string IncorrectNumberOfLambdaArguments
  string IncorrectNumberOfConstructorArguments
  string NonStaticConstructorRequired
  string NonAbstractConstructorRequired
  string FirstArgumentMustBeCallSite
  string NoOrInvalidRuleProduced
  string TypeMustBeDerivedFromSystemDelegate
  string TypeParameterIsNotDelegate
  string ArgumentTypeCannotBeVoid
  string ArgCntMustBeGreaterThanNameCnt
  string BinderNotCompatibleWithCallSite
  string BindingCannotBeNull
  string DynamicBinderResultNotAssignable
  string DynamicBindingNeedsRestrictions
  string DynamicObjectResultNotAssignable
  string InvalidMetaObjectCreated
  string AmbiguousMatchInExpandoObject
  string CollectionReadOnly
  string KeyDoesNotExistInExpando
  string SameKeyExistsInExpando
  string Arg_KeyNotFoundWithKey
  string EmptyEnumerable
  string MoreThanOneElement
  string MoreThanOneMatch
  string NoElements
  string NoMatch
  string ParallelPartitionable_NullReturn
  string ParallelPartitionable_IncorretElementCount
  string ParallelPartitionable_NullElement
  string PLINQ_CommonEnumerator_Current_NotStarted
  string PLINQ_ExternalCancellationRequested
  string PLINQ_DisposeRequested
  string ParallelQuery_DuplicateTaskScheduler
  string ParallelQuery_DuplicateDOP
  string ParallelQuery_DuplicateExecutionMode
  string PartitionerQueryOperator_NullPartitionList
  string PartitionerQueryOperator_WrongNumberOfPartitions
  string PartitionerQueryOperator_NullPartition
  string ParallelQuery_DuplicateWithCancellation
  string ParallelQuery_DuplicateMergeOptions
  string PLINQ_EnumerationPreviouslyFailed
  string ParallelQuery_PartitionerNotOrderable
  string ParallelQuery_InvalidAsOrderedCall
  string ParallelQuery_InvalidNonGenericAsOrderedCall
  string ParallelEnumerable_BinaryOpMustUseAsParallel
  string ParallelEnumerable_WithQueryExecutionMode_InvalidMode
  string ParallelEnumerable_WithMergeOptions_InvalidOptions
  string ArgumentNotIEnumerableGeneric
  string ArgumentNotValid
  string NoMethodOnType
  string NoMethodOnTypeMatchingArguments
  string EnumeratingNullEnumerableExpression
  string ArgumentOutOfRange_NeedNonNegNum
  string ArgumentOutOfRange_NeedValidPipeAccessRights
  string Argument_InvalidOffLen
  string Argument_NeedNonemptyPipeName
  string Argument_NonContainerInvalidAnyFlag
  string Argument_EmptyServerName
  string Argument_InvalidHandle
  string ArgumentNull_Buffer
  string ArgumentNull_ServerName
  string ArgumentOutOfRange_AnonymousReserved
  string ArgumentOutOfRange_TransmissionModeByteOrMsg
  string ArgumentOutOfRange_DirectionModeInOutOrInOut
  string ArgumentOutOfRange_ImpersonationInvalid
  string ArgumentOutOfRange_OptionsInvalid
  string ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable
  string ArgumentOutOfRange_InvalidTimeout
  string ArgumentOutOfRange_MaxNumServerInstances
  string ArgumentOutOfRange_NeedPosNum
  string InvalidOperation_PipeNotYetConnected
  string InvalidOperation_PipeDisconnected
  string InvalidOperation_PipeHandleNotSet
  string InvalidOperation_PipeNotAsync
  string InvalidOperation_PipeReadModeNotMessage
  string InvalidOperation_PipeAlreadyConnected
  string InvalidOperation_PipeAlreadyDisconnected
  string IO_EOF_ReadBeyondEOF
  string IO_FileNotFound
  string IO_FileNotFound_FileName
  string IO_AlreadyExists_Name
  string IO_FileExists_Name
  string IO_IO_PipeBroken
  string IO_OperationAborted
  string IO_SharingViolation_File
  string IO_SharingViolation_NoFileName
  string IO_PipeBroken
  string IO_InvalidPipeHandle
  string IO_PathNotFound_Path
  string IO_PathNotFound_NoPathName
  string IO_PathTooLong
  string NotSupported_UnreadableStream
  string NotSupported_UnseekableStream
  string NotSupported_UnwritableStream
  string NotSupported_AnonymousPipeUnidirectional
  string NotSupported_AnonymousPipeMessagesNotSupported
  string ObjectDisposed_PipeClosed
  string UnauthorizedAccess_IODenied_Path
  string UnauthorizedAccess_IODenied_NoPathName
  string ArgumentOutOfRange_FileLengthTooBig
  string PlatformNotSupported_MessageTransmissionMode
  string PlatformNotSupported_RemotePipes
  string PlatformNotSupported_InvalidPipeNameChars
  string ObjectDisposed_StreamClosed
  string PlatformNotSupported_OperatingSystemError
  string IO_AllPipeInstancesAreBusy
  string IO_PathTooLong_Path
  string UnauthorizedAccess_NotOwnedByCurrentUser
  string UnauthorizedAccess_ClientIsNotCurrentUser
  string net_invalidversion
  string net_noseek
  string net_invasync
  string net_io_timeout_use_gt_zero
  string net_notconnected
  string net_notstream
  string net_stopped
  string net_udpconnected
  string net_readonlystream
  string net_writeonlystream
  string net_InvalidAddressFamily
  string net_InvalidEndPointAddressFamily
  string net_InvalidSocketAddressSize
  string net_invalidAddressList
  string net_completed_result
  string net_protocol_invalid_family
  string net_protocol_invalid_multicast_family
  string net_sockets_zerolist
  string net_sockets_blocking
  string net_sockets_useblocking
  string net_sockets_select
  string net_sockets_toolarge_select
  string net_sockets_empty_select
  string net_sockets_mustbind
  string net_sockets_mustlisten
  string net_sockets_mustnotlisten
  string net_sockets_mustnotbebound
  string net_sockets_namedmustnotbebound
  string net_sockets_invalid_ipaddress_length
  string net_sockets_invalid_optionValue
  string net_sockets_invalid_optionValue_all
  string net_sockets_invalid_dnsendpoint
  string net_sockets_disconnectedConnect
  string net_sockets_disconnectedAccept
  string net_tcplistener_mustbestopped
  string net_socketopinprogress
  string net_buffercounttoosmall
  string net_multibuffernotsupported
  string net_ambiguousbuffers
  string net_io_writefailure
  string net_io_readfailure
  string net_io_invalidasyncresult
  string net_io_invalidendcall
  string net_value_cannot_be_negative
  string ArgumentOutOfRange_Bounds_Lower_Upper
  string net_sockets_connect_multiconnect_notsupported
  string net_sockets_dualmode_receivefrom_notsupported
  string net_sockets_accept_receive_notsupported
  string net_sockets_duplicateandclose_notsupported
  string net_sockets_transmitfileoptions_notsupported
  string ArgumentOutOfRange_PathLengthInvalid
  string net_io_readwritefailure
  string PlatformNotSupported_AcceptSocket
  string PlatformNotSupported_IOControl
  string PlatformNotSupported_IPProtectionLevel
  string InvalidOperation_BufferNotExplicitArray
  string InvalidOperation_IncorrectToken
  string InvalidOperation_MultipleContinuations
  string Argument_InvalidOidValue
  string Argument_InvalidValue
  string Arg_CryptographyException
  string Cryptography_ArgECDHKeySizeMismatch
  string Cryptography_ArgECDHRequiresECDHKey
  string Cryptography_TlsRequiresLabelAndSeed
  string Cryptography_TlsRequires64ByteSeed
  string Cryptography_BadHashSize_ForAlgorithm
  string Cryptography_Config_EncodedOIDError
  string Cryptography_CSP_NoPrivateKey
  string Cryptography_Der_Invalid_Encoding
  string Cryptography_DSA_KeyGenNotSupported
  string Cryptography_Encryption_MessageTooLong
  string Cryptography_ECXmlSerializationFormatRequired
  string Cryptography_ECC_NamedCurvesOnly
  string Cryptography_HashAlgorithmNameNullOrEmpty
  string Cryptography_InvalidOID
  string Cryptography_CurveNotSupported
  string Cryptography_InvalidCurveOid
  string Cryptography_InvalidCurveKeyParameters
  string Cryptography_InvalidDsaParameters_MissingFields
  string Cryptography_InvalidDsaParameters_MismatchedPGY
  string Cryptography_InvalidDsaParameters_MismatchedQX
  string Cryptography_InvalidDsaParameters_MismatchedPJ
  string Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey
  string Cryptography_InvalidDsaParameters_QRestriction_ShortKey
  string Cryptography_InvalidDsaParameters_QRestriction_LargeKey
  string Cryptography_InvalidECCharacteristic2Curve
  string Cryptography_InvalidECPrimeCurve
  string Cryptography_InvalidECNamedCurve
  string Cryptography_InvalidKeySize
  string Cryptography_InvalidKey_SemiWeak
  string Cryptography_InvalidKey_Weak
  string Cryptography_InvalidIVSize
  string Cryptography_InvalidOperation
  string Cryptography_InvalidPadding
  string Cryptography_InvalidRsaParameters
  string Cryptography_InvalidPaddingMode
  string Cryptography_Invalid_IA5String
  string Cryptography_KeyTooSmall
  string Cryptography_MissingIV
  string Cryptography_MissingKey
  string Cryptography_MissingOID
  string Cryptography_MustTransformWholeBlock
  string Cryptography_NotValidPrivateKey
  string Cryptography_NotValidPublicOrPrivateKey
  string Cryptography_OAEP_Decryption_Failed
  string Cryptography_OpenInvalidHandle
  string Cryptography_PartialBlock
  string Cryptography_PasswordDerivedBytes_FewBytesSalt
  string Cryptography_RC2_EKS40
  string Cryptography_RC2_EKSKS
  string Cryptography_RC2_EKSKS2
  string Cryptography_Rijndael_BlockSize
  string Cryptography_RSA_DecryptWrongSize
  string Cryptography_SignHash_WrongSize
  string Cryptography_TransformBeyondEndOfBuffer
  string Cryptography_CipherModeNotSupported
  string Cryptography_UnknownHashAlgorithm
  string Cryptography_UnknownPaddingMode
  string Cryptography_UnexpectedTransformTruncation
  string Cryptography_Unmapped_System_Typed_Error
  string Cryptography_UnsupportedPaddingMode
  string NotSupported_Method
  string NotSupported_SubclassOverride
  string Cryptography_AlgorithmTypesMustBeVisible
  string Cryptography_AddNullOrEmptyName
  string Argument_Invalid_SafeHandleInvalidOrClosed
  string Cryptography_ArgExpectedECDiffieHellmanCngPublicKey
  string Cryptography_ArgDSARequiresDSAKey
  string Cryptography_ArgECDsaRequiresECDsaKey
  string Cryptography_ArgRSARequiresRSAKey
  string Cryptography_CngKeyWrongAlgorithm
  string Cryptography_InvalidAlgorithmGroup
  string Cryptography_InvalidAlgorithmName
  string Cryptography_InvalidCipherMode
  string Cryptography_InvalidKeyBlobFormat
  string Cryptography_InvalidProviderName
  string Cryptography_KeyBlobParsingError
  string Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag
  string Cryptography_WeakKey
  string PlatformNotSupported_CryptographyCng
  string CountdownEvent_Increment_AlreadyZero
  string CountdownEvent_Increment_AlreadyMax
  string CountdownEvent_Decrement_BelowZero
  string Common_OperationCanceled
  string Barrier_Dispose
  string Barrier_SignalAndWait_InvalidOperation_ZeroTotal
  string Barrier_SignalAndWait_ArgumentOutOfRange
  string Barrier_RemoveParticipants_InvalidOperation
  string Barrier_RemoveParticipants_ArgumentOutOfRange
  string Barrier_RemoveParticipants_NonPositive_ArgumentOutOfRange
  string Barrier_InvalidOperation_CalledFromPHA
  string Barrier_AddParticipants_NonPositive_ArgumentOutOfRange
  string Barrier_SignalAndWait_InvalidOperation_ThreadsExceeded
  string BarrierPostPhaseException
  string Barrier_ctor_ArgumentOutOfRange
  string Barrier_AddParticipants_Overflow_ArgumentOutOfRange
  string SynchronizationLockException_IncorrectDispose
  string SynchronizationLockException_MisMatchedWrite
  string LockRecursionException_UpgradeAfterReadNotAllowed
  string LockRecursionException_UpgradeAfterWriteNotAllowed
  string SynchronizationLockException_MisMatchedUpgrade
  string SynchronizationLockException_MisMatchedRead
  string LockRecursionException_WriteAfterReadNotAllowed
  string LockRecursionException_RecursiveWriteNotAllowed
  string LockRecursionException_ReadAfterWriteNotAllowed
  string LockRecursionException_RecursiveUpgradeNotAllowed
  string LockRecursionException_RecursiveReadNotAllowed
  string Overflow_UInt16
  string ReaderWriterLock_Timeout
  string ArgumentOutOfRange_TimeoutMilliseconds
  string ReaderWriterLock_NotOwner
  string ExceptionFromHResult
  string ReaderWriterLock_InvalidLockCookie
  string ReaderWriterLock_RestoreLockWithOwnedLocks
  string HostExecutionContextManager_InvalidOperation_NotNewCaptureContext
  string HostExecutionContextManager_InvalidOperation_CannotOverrideSetWithoutRevert
  string HostExecutionContextManager_InvalidOperation_CannotUseSwitcherOtherThread
  string Arg_NonZeroLowerBound
  string Arg_WrongType
  string Arg_ArrayPlusOffTooSmall
  string ArgumentOutOfRange_SmallCapacity
  string Argument_AddingDuplicate
  string InvalidOperation_ConcurrentOperationsNotSupported
  string InvalidOperation_EmptyQueue
  string InvalidOperation_EnumOpCantHappen
  string InvalidOperation_EnumFailedVersion
  string InvalidOperation_EmptyStack
  string InvalidOperation_EnumNotStarted
  string InvalidOperation_EnumEnded
  string NotSupported_KeyCollectionSet
  string NotSupported_ValueCollectionSet
  string Arg_ArrayLengthsDiffer
  string Arg_BitArrayTypeUnsupported
  string Arg_HSCapacityOverflow
  string Arg_HTCapacityOverflow
  string Arg_InsufficientSpace
  string Arg_RankMultiDimNotSupported
  string Argument_ArrayTooLarge
  string Argument_InvalidArrayType
  string ArgumentOutOfRange_BiggerThanCollection
  string ArgumentOutOfRange_Index
  string ExternalLinkedListNode
  string LinkedListEmpty
  string LinkedListNodeIsAttached
  string NotSupported_SortedListNestedWrite
  string SortedSet_LowerValueGreaterThanUpperValue
  string Serialization_InvalidOnDeser
  string Serialization_MismatchedCount
  string Serialization_MissingKeys
  string Serialization_MissingValues
  string Argument_MapNameEmptyString
  string Argument_EmptyFile
  string Argument_NewMMFWriteAccessNotAllowed
  string Argument_ReadAccessWithLargeCapacity
  string Argument_NewMMFAppendModeNotAllowed
  string Argument_NewMMFTruncateModeNotAllowed
  string ArgumentNull_MapName
  string ArgumentNull_FileStream
  string ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed
  string ArgumentOutOfRange_NeedPositiveNumber
  string ArgumentOutOfRange_PositiveOrDefaultCapacityRequired
  string ArgumentOutOfRange_PositiveOrDefaultSizeRequired
  string ArgumentOutOfRange_CapacityGEFileSizeRequired
  string IO_NotEnoughMemory
  string InvalidOperation_CantCreateFileMapping
  string NotSupported_MMViewStreamsFixedLength
  string ObjectDisposed_ViewAccessorClosed
  string ObjectDisposed_StreamIsClosed
  string PlatformNotSupported_NamedMaps
  string MethodBuilderDoesNotHaveTypeBuilder
  string Cryptography_NonCompliantFIPSAlgorithm
  string InvalidOperation_ViewIsNull
  string ArgumentOutOfRange_InvalidPipeAccessRights
  string ArgumentOutOfRange_AdditionalAccessLimited
  string InterfaceType_Must_Be_Interface
  string BaseType_Cannot_Be_Sealed
  string BaseType_Cannot_Be_Abstract
  string BaseType_Must_Have_Default_Ctor
  string Cryptography_Cert_AlreadyHasPrivateKey
  string Cryptography_PrivateKey_WrongAlgorithm
  string Cryptography_PrivateKey_DoesNotMatch
Свойства:
Методы:
  string GetString(string name, Object[] args)
  string GetString(CultureInfo culture, string name, Object[] args)
  string GetString(string name)
  string GetString(CultureInfo culture, string name)
  string Format(string resourceFormat, Object[] args)
  string Format(string resourceFormat, object p1)
  string Format(string resourceFormat, object p1, object p2)
  string Format(CultureInfo ci, string resourceFormat, object p1, object p2)
  string Format(string resourceFormat, object p1, object p2, object p3)
  string GetResourceString(string str)
--------------------------------------------------
Класс: Microsoft.Win32.SafeHandles.SafePipeHandle
Наследуется от: SafeHandleZeroOrMinusOneIsInvalid
Поля:
  int DefaultInvalidHandle
Свойства:
Методы:
  bool ReleaseHandle()
  void .ctor()
  void .ctor(IntPtr preexistingHandle, bool ownsHandle)
  void SetHandle(int descriptor)
--------------------------------------------------
Класс: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
Наследуется от: SafeHandleZeroOrMinusOneIsInvalid
Поля:
Свойства:
Методы:
  void .ctor(IntPtr preexistingHandle, bool ownsHandle)
  bool ReleaseHandle()
  void .ctor()
--------------------------------------------------
Класс: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle
Наследуется от: SafeBuffer
Поля:
  IntPtr mmap_handle
Свойства:
Методы:
  void .ctor(IntPtr mmap_handle, IntPtr base_address, long size)
  void Flush()
  bool ReleaseHandle()
  void .ctor()
--------------------------------------------------
Класс: Microsoft.Win32.SafeHandles.SafeNCryptHandle
Наследуется от: SafeHandleZeroOrMinusOneIsInvalid
Поля:
Свойства:
  bool IsInvalid
Методы:
  void .ctor()
  void .ctor(IntPtr handle, SafeHandle parentHandle)
  bool get_IsInvalid()
  bool ReleaseHandle()
  bool ReleaseNativeHandle()
--------------------------------------------------
Класс: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
Наследуется от: SafeNCryptHandle
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(IntPtr handle, SafeHandle parentHandle)
  bool ReleaseNativeHandle()
--------------------------------------------------
Класс: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle
Наследуется от: SafeNCryptHandle
Поля:
Свойства:
Методы:
  void .ctor()
  bool ReleaseNativeHandle()
--------------------------------------------------
Класс: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
Наследуется от: SafeNCryptHandle
Поля:
Свойства:
Методы:
  void .ctor()
  bool ReleaseNativeHandle()
--------------------------------------------------
Класс: System.NotImplemented
Наследуется от: object
Поля:
Свойства:
  Exception ByDesign
Методы:
  Exception get_ByDesign()
  Exception ByDesignWithMessage(string message)
  Exception ActiveIssue(string issue)
--------------------------------------------------
Класс: System.MonoTODOAttribute
Наследуется от: Attribute
Поля:
  string comment
Свойства:
  string Comment
Методы:
  void .ctor()
  void .ctor(string comment)
  string get_Comment()
--------------------------------------------------
Класс: System.MonoDocumentationNoteAttribute
Наследуется от: MonoTODOAttribute
Поля:
Свойства:
Методы:
  void .ctor(string comment)
--------------------------------------------------
Класс: System.MonoExtensionAttribute
Наследуется от: MonoTODOAttribute
Поля:
Свойства:
Методы:
  void .ctor(string comment)
--------------------------------------------------
Класс: System.MonoInternalNoteAttribute
Наследуется от: MonoTODOAttribute
Поля:
Свойства:
Методы:
  void .ctor(string comment)
--------------------------------------------------
Класс: System.MonoLimitationAttribute
Наследуется от: MonoTODOAttribute
Поля:
Свойства:
Методы:
  void .ctor(string comment)
--------------------------------------------------
Класс: System.MonoNotSupportedAttribute
Наследуется от: MonoTODOAttribute
Поля:
Свойства:
Методы:
  void .ctor(string comment)
--------------------------------------------------
Класс: System.Action`9
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, AsyncCallback callback, object object)
  void EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Action`10
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, AsyncCallback callback, object object)
  void EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Action`11
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, AsyncCallback callback, object object)
  void EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Action`12
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, AsyncCallback callback, object object)
  void EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Action`13
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, AsyncCallback callback, object object)
  void EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Action`14
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, AsyncCallback callback, object object)
  void EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Action`15
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, AsyncCallback callback, object object)
  void EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Action`16
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, AsyncCallback callback, object object)
  void EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Func`10
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, AsyncCallback callback, object object)
  TResult EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Func`11
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, AsyncCallback callback, object object)
  TResult EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Func`12
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, AsyncCallback callback, object object)
  TResult EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Func`13
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, AsyncCallback callback, object object)
  TResult EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Func`14
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, AsyncCallback callback, object object)
  TResult EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Func`15
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, AsyncCallback callback, object object)
  TResult EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Func`16
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, AsyncCallback callback, object object)
  TResult EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.Func`17
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
  IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, AsyncCallback callback, object object)
  TResult EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.MonoUtil
Наследуется от: object
Поля:
  bool IsUnix
Свойства:
Методы:
  void .cctor()
--------------------------------------------------
Класс: System.Security.Cryptography.ECCurve
Наследуется от: ValueType
Поля:
  Byte[] A
  Byte[] B
  ECPoint G
  Byte[] Order
  Byte[] Cofactor
  Byte[] Seed
  ECCurveType CurveType
  Nullable`1<HashAlgorithmName> Hash
  Byte[] Polynomial
  Byte[] Prime
  Oid _oid
Свойства:
  Oid Oid
  bool IsPrime
  bool IsCharacteristic2
  bool IsExplicit
  bool IsNamed
Методы:
  Oid get_Oid()
  void set_Oid(Oid value)
  ECCurve Create(Oid oid)
  ECCurve CreateFromOid(Oid curveOid)
  ECCurve CreateFromFriendlyName(string oidFriendlyName)
  ECCurve CreateFromValue(string oidValue)
  ECCurve CreateFromValueAndName(string oidValue, string oidFriendlyName)
  bool get_IsPrime()
  bool get_IsCharacteristic2()
  bool get_IsExplicit()
  bool get_IsNamed()
  void Validate()
  bool HasAnyExplicitParameters()
--------------------------------------------------
Класс: System.Security.Cryptography.ECParameters
Наследуется от: ValueType
Поля:
  ECPoint Q
  Byte[] D
  ECCurve Curve
Свойства:
Методы:
  void Validate()
--------------------------------------------------
Класс: System.Security.Cryptography.ECPoint
Наследуется от: ValueType
Поля:
  Byte[] X
  Byte[] Y
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.IncrementalHash
Наследуется от: object
Поля:
  int NTE_BAD_ALGID
  HashAlgorithmName _algorithmName
  HashAlgorithm _hash
  bool _disposed
  bool _resetPending
Свойства:
  HashAlgorithmName AlgorithmName
Методы:
  void .ctor(HashAlgorithmName name, HashAlgorithm hash)
  HashAlgorithmName get_AlgorithmName()
  void AppendData(Byte[] data)
  void AppendData(Byte[] data, int offset, int count)
  Byte[] GetHashAndReset()
  void Dispose()
  IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm)
  IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, Byte[] key)
  HashAlgorithm GetHashAlgorithm(HashAlgorithmName hashAlgorithm)
  HashAlgorithm GetHMAC(HashAlgorithmName hashAlgorithm, Byte[] key)
  void AppendData(ReadOnlySpan`1<byte> data)
  bool TryGetHashAndReset(Span`1<byte> destination, Int32& bytesWritten)
  void .ctor()
--------------------------------------------------
Класс: System.Security.Cryptography.AesManaged
Наследуется от: Aes
Поля:
  RijndaelManaged m_rijndael
Свойства:
  int FeedbackSize
  Byte[] IV
  Byte[] Key
  int KeySize
  CipherMode Mode
  PaddingMode Padding
Методы:
  void .ctor()
  int get_FeedbackSize()
  void set_FeedbackSize(int value)
  Byte[] get_IV()
  void set_IV(Byte[] value)
  Byte[] get_Key()
  void set_Key(Byte[] value)
  int get_KeySize()
  void set_KeySize(int value)
  CipherMode get_Mode()
  void set_Mode(CipherMode value)
  PaddingMode get_Padding()
  void set_Padding(PaddingMode value)
  ICryptoTransform CreateDecryptor()
  ICryptoTransform CreateDecryptor(Byte[] key, Byte[] iv)
  ICryptoTransform CreateEncryptor()
  ICryptoTransform CreateEncryptor(Byte[] key, Byte[] iv)
  void Dispose(bool disposing)
  void GenerateIV()
  void GenerateKey()
--------------------------------------------------
Класс: System.Security.Cryptography.AsymmetricPaddingMode
Наследуется от: Enum
Поля:
  int value__
  AsymmetricPaddingMode None
  AsymmetricPaddingMode Pkcs1
  AsymmetricPaddingMode Oaep
  AsymmetricPaddingMode Pss
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.HASHALGORITHM_ENUM
Наследуется от: Enum
Поля:
  int value__
  HASHALGORITHM_ENUM DSA_HASH_ALGORITHM_SHA1
  HASHALGORITHM_ENUM DSA_HASH_ALGORITHM_SHA256
  HASHALGORITHM_ENUM DSA_HASH_ALGORITHM_SHA512
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.DSAFIPSVERSION_ENUM
Наследуется от: Enum
Поля:
  int value__
  DSAFIPSVERSION_ENUM DSA_FIPS186_2
  DSAFIPSVERSION_ENUM DSA_FIPS186_3
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.BCryptNative
Наследуется от: object
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.CngAlgorithm
Наследуется от: object
Поля:
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_ecdh
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_ecdhp256
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_ecdhp384
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_ecdhp521
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_ecdsa
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_ecdsap256
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_ecdsap384
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_ecdsap521
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_md5
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_sha1
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_sha256
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_sha384
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_sha512
  CngAlgorithm modreq(System.Runtime.CompilerServices.IsVolatile) s_rsa
  string m_algorithm
Свойства:
  string Algorithm
  CngAlgorithm Rsa
  CngAlgorithm ECDiffieHellman
  CngAlgorithm ECDiffieHellmanP256
  CngAlgorithm ECDiffieHellmanP384
  CngAlgorithm ECDiffieHellmanP521
  CngAlgorithm ECDsa
  CngAlgorithm ECDsaP256
  CngAlgorithm ECDsaP384
  CngAlgorithm ECDsaP521
  CngAlgorithm MD5
  CngAlgorithm Sha1
  CngAlgorithm Sha256
  CngAlgorithm Sha384
  CngAlgorithm Sha512
Методы:
  void .ctor(string algorithm)
  string get_Algorithm()
  bool op_Equality(CngAlgorithm left, CngAlgorithm right)
  bool op_Inequality(CngAlgorithm left, CngAlgorithm right)
  bool Equals(object obj)
  bool Equals(CngAlgorithm other)
  int GetHashCode()
  string ToString()
  CngAlgorithm get_Rsa()
  CngAlgorithm get_ECDiffieHellman()
  CngAlgorithm get_ECDiffieHellmanP256()
  CngAlgorithm get_ECDiffieHellmanP384()
  CngAlgorithm get_ECDiffieHellmanP521()
  CngAlgorithm get_ECDsa()
  CngAlgorithm get_ECDsaP256()
  CngAlgorithm get_ECDsaP384()
  CngAlgorithm get_ECDsaP521()
  CngAlgorithm get_MD5()
  CngAlgorithm get_Sha1()
  CngAlgorithm get_Sha256()
  CngAlgorithm get_Sha384()
  CngAlgorithm get_Sha512()
--------------------------------------------------
Класс: System.Security.Cryptography.CngAlgorithmGroup
Наследуется от: object
Поля:
  CngAlgorithmGroup modreq(System.Runtime.CompilerServices.IsVolatile) s_dh
  CngAlgorithmGroup modreq(System.Runtime.CompilerServices.IsVolatile) s_dsa
  CngAlgorithmGroup modreq(System.Runtime.CompilerServices.IsVolatile) s_ecdh
  CngAlgorithmGroup modreq(System.Runtime.CompilerServices.IsVolatile) s_ecdsa
  CngAlgorithmGroup modreq(System.Runtime.CompilerServices.IsVolatile) s_rsa
  string m_algorithmGroup
Свойства:
  string AlgorithmGroup
  CngAlgorithmGroup DiffieHellman
  CngAlgorithmGroup Dsa
  CngAlgorithmGroup ECDiffieHellman
  CngAlgorithmGroup ECDsa
  CngAlgorithmGroup Rsa
Методы:
  void .ctor(string algorithmGroup)
  string get_AlgorithmGroup()
  bool op_Equality(CngAlgorithmGroup left, CngAlgorithmGroup right)
  bool op_Inequality(CngAlgorithmGroup left, CngAlgorithmGroup right)
  bool Equals(object obj)
  bool Equals(CngAlgorithmGroup other)
  int GetHashCode()
  string ToString()
  CngAlgorithmGroup get_DiffieHellman()
  CngAlgorithmGroup get_Dsa()
  CngAlgorithmGroup get_ECDiffieHellman()
  CngAlgorithmGroup get_ECDsa()
  CngAlgorithmGroup get_Rsa()
--------------------------------------------------
Класс: System.Security.Cryptography.CngKeyHandleOpenOptions
Наследуется от: Enum
Поля:
  int value__
  CngKeyHandleOpenOptions None
  CngKeyHandleOpenOptions EphemeralKey
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.CngKey
Наследуется от: object
Поля:
Свойства:
  CngAlgorithmGroup AlgorithmGroup
  CngAlgorithm Algorithm
  CngExportPolicies ExportPolicy
  SafeNCryptKeyHandle Handle
  bool IsEphemeral
  bool IsMachineKey
  string KeyName
  int KeySize
  CngKeyUsages KeyUsage
  IntPtr ParentWindowHandle
  CngProvider Provider
  SafeNCryptProviderHandle ProviderHandle
  string UniqueName
  CngUIPolicy UIPolicy
Методы:
  CngAlgorithmGroup get_AlgorithmGroup()
  CngAlgorithm get_Algorithm()
  CngExportPolicies get_ExportPolicy()
  SafeNCryptKeyHandle get_Handle()
  bool get_IsEphemeral()
  void set_IsEphemeral(bool value)
  bool get_IsMachineKey()
  string get_KeyName()
  int get_KeySize()
  CngKeyUsages get_KeyUsage()
  IntPtr get_ParentWindowHandle()
  void set_ParentWindowHandle(IntPtr value)
  CngProvider get_Provider()
  SafeNCryptProviderHandle get_ProviderHandle()
  string get_UniqueName()
  CngUIPolicy get_UIPolicy()
  CngKey Create(CngAlgorithm algorithm)
  CngKey Create(CngAlgorithm algorithm, string keyName)
  CngKey Create(CngAlgorithm algorithm, string keyName, CngKeyCreationParameters creationParameters)
  void Delete()
  void Dispose()
  bool Exists(string keyName)
  bool Exists(string keyName, CngProvider provider)
  bool Exists(string keyName, CngProvider provider, CngKeyOpenOptions options)
  CngKey Import(Byte[] keyBlob, CngKeyBlobFormat format)
  CngKey Import(Byte[] keyBlob, CngKeyBlobFormat format, CngProvider provider)
  Byte[] Export(CngKeyBlobFormat format)
  CngProperty GetProperty(string name, CngPropertyOptions options)
  bool HasProperty(string name, CngPropertyOptions options)
  CngKey Open(string keyName)
  CngKey Open(string keyName, CngProvider provider)
  CngKey Open(string keyName, CngProvider provider, CngKeyOpenOptions openOptions)
  CngKey Open(SafeNCryptKeyHandle keyHandle, CngKeyHandleOpenOptions keyHandleOpenOptions)
  void SetProperty(CngProperty property)
  void .ctor()
--------------------------------------------------
Класс: System.Security.Cryptography.CngKeyBlobFormat
Наследуется от: object
Поля:
  CngKeyBlobFormat modreq(System.Runtime.CompilerServices.IsVolatile) s_eccPrivate
  CngKeyBlobFormat modreq(System.Runtime.CompilerServices.IsVolatile) s_eccPublic
  CngKeyBlobFormat modreq(System.Runtime.CompilerServices.IsVolatile) s_eccFullPrivate
  CngKeyBlobFormat modreq(System.Runtime.CompilerServices.IsVolatile) s_eccFullPublic
  CngKeyBlobFormat modreq(System.Runtime.CompilerServices.IsVolatile) s_genericPrivate
  CngKeyBlobFormat modreq(System.Runtime.CompilerServices.IsVolatile) s_genericPublic
  CngKeyBlobFormat modreq(System.Runtime.CompilerServices.IsVolatile) s_opaqueTransport
  CngKeyBlobFormat modreq(System.Runtime.CompilerServices.IsVolatile) s_pkcs8Private
  string m_format
Свойства:
  string Format
  CngKeyBlobFormat EccPrivateBlob
  CngKeyBlobFormat EccPublicBlob
  CngKeyBlobFormat EccFullPrivateBlob
  CngKeyBlobFormat EccFullPublicBlob
  CngKeyBlobFormat GenericPrivateBlob
  CngKeyBlobFormat GenericPublicBlob
  CngKeyBlobFormat OpaqueTransportBlob
  CngKeyBlobFormat Pkcs8PrivateBlob
Методы:
  void .ctor(string format)
  string get_Format()
  bool op_Equality(CngKeyBlobFormat left, CngKeyBlobFormat right)
  bool op_Inequality(CngKeyBlobFormat left, CngKeyBlobFormat right)
  bool Equals(object obj)
  bool Equals(CngKeyBlobFormat other)
  int GetHashCode()
  string ToString()
  CngKeyBlobFormat get_EccPrivateBlob()
  CngKeyBlobFormat get_EccPublicBlob()
  CngKeyBlobFormat get_EccFullPrivateBlob()
  CngKeyBlobFormat get_EccFullPublicBlob()
  CngKeyBlobFormat get_GenericPrivateBlob()
  CngKeyBlobFormat get_GenericPublicBlob()
  CngKeyBlobFormat get_OpaqueTransportBlob()
  CngKeyBlobFormat get_Pkcs8PrivateBlob()
--------------------------------------------------
Класс: System.Security.Cryptography.CngKeyCreationParameters
Наследуется от: object
Поля:
  Nullable`1<CngExportPolicies> m_exportPolicy
  CngKeyCreationOptions m_keyCreationOptions
  Nullable`1<CngKeyUsages> m_keyUsage
  CngPropertyCollection m_parameters
  IntPtr m_parentWindowHandle
  CngProvider m_provider
  CngUIPolicy m_uiPolicy
Свойства:
  Nullable`1<CngExportPolicies> ExportPolicy
  CngKeyCreationOptions KeyCreationOptions
  Nullable`1<CngKeyUsages> KeyUsage
  IntPtr ParentWindowHandle
  CngPropertyCollection Parameters
  CngPropertyCollection ParametersNoDemand
  CngProvider Provider
  CngUIPolicy UIPolicy
Методы:
  Nullable`1<CngExportPolicies> get_ExportPolicy()
  void set_ExportPolicy(Nullable`1<CngExportPolicies> value)
  CngKeyCreationOptions get_KeyCreationOptions()
  void set_KeyCreationOptions(CngKeyCreationOptions value)
  Nullable`1<CngKeyUsages> get_KeyUsage()
  void set_KeyUsage(Nullable`1<CngKeyUsages> value)
  IntPtr get_ParentWindowHandle()
  void set_ParentWindowHandle(IntPtr value)
  CngPropertyCollection get_Parameters()
  CngPropertyCollection get_ParametersNoDemand()
  CngProvider get_Provider()
  void set_Provider(CngProvider value)
  CngUIPolicy get_UIPolicy()
  void set_UIPolicy(CngUIPolicy value)
  void .ctor()
--------------------------------------------------
Класс: System.Security.Cryptography.CngProperty
Наследуется от: ValueType
Поля:
  string m_name
  CngPropertyOptions m_propertyOptions
  Byte[] m_value
  Nullable`1<int> m_hashCode
Свойства:
  string Name
  CngPropertyOptions Options
  Byte[] Value
Методы:
  void .ctor(string name, Byte[] value, CngPropertyOptions options)
  string get_Name()
  CngPropertyOptions get_Options()
  Byte[] get_Value()
  Byte[] GetValue()
  bool op_Equality(CngProperty left, CngProperty right)
  bool op_Inequality(CngProperty left, CngProperty right)
  bool Equals(object obj)
  bool Equals(CngProperty other)
  int GetHashCode()
--------------------------------------------------
Класс: System.Security.Cryptography.CngPropertyCollection
Наследуется от: Collection`1<CngProperty>
Поля:
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: System.Security.Cryptography.CngProvider
Наследуется от: object
Поля:
  CngProvider modreq(System.Runtime.CompilerServices.IsVolatile) s_msSmartCardKsp
  CngProvider modreq(System.Runtime.CompilerServices.IsVolatile) s_msSoftwareKsp
  string m_provider
Свойства:
  string Provider
  CngProvider MicrosoftSmartCardKeyStorageProvider
  CngProvider MicrosoftSoftwareKeyStorageProvider
Методы:
  void .ctor(string provider)
  string get_Provider()
  bool op_Equality(CngProvider left, CngProvider right)
  bool op_Inequality(CngProvider left, CngProvider right)
  bool Equals(object obj)
  bool Equals(CngProvider other)
  int GetHashCode()
  string ToString()
  CngProvider get_MicrosoftSmartCardKeyStorageProvider()
  CngProvider get_MicrosoftSoftwareKeyStorageProvider()
--------------------------------------------------
Класс: System.Security.Cryptography.CngUIPolicy
Наследуется от: object
Поля:
  string m_creationTitle
  string m_description
  string m_friendlyName
  CngUIProtectionLevels m_protectionLevel
  string m_useContext
Свойства:
  string CreationTitle
  string Description
  string FriendlyName
  CngUIProtectionLevels ProtectionLevel
  string UseContext
Методы:
  void .ctor(CngUIProtectionLevels protectionLevel)
  void .ctor(CngUIProtectionLevels protectionLevel, string friendlyName)
  void .ctor(CngUIProtectionLevels protectionLevel, string friendlyName, string description)
  void .ctor(CngUIProtectionLevels protectionLevel, string friendlyName, string description, string useContext)
  void .ctor(CngUIProtectionLevels protectionLevel, string friendlyName, string description, string useContext, string creationTitle)
  string get_CreationTitle()
  string get_Description()
  string get_FriendlyName()
  CngUIProtectionLevels get_ProtectionLevel()
  string get_UseContext()
--------------------------------------------------
Класс: System.Security.Cryptography.ECDiffieHellman
Наследуется от: AsymmetricAlgorithm
Поля:
Свойства:
  string KeyExchangeAlgorithm
  string SignatureAlgorithm
  ECDiffieHellmanPublicKey PublicKey
Методы:
  string get_KeyExchangeAlgorithm()
  string get_SignatureAlgorithm()
  ECDiffieHellman Create()
  ECDiffieHellman Create(string algorithm)
  ECDiffieHellman Create(ECCurve curve)
  ECDiffieHellman Create(ECParameters parameters)
  ECDiffieHellmanPublicKey get_PublicKey()
  Byte[] DeriveKeyMaterial(ECDiffieHellmanPublicKey otherPartyPublicKey)
  Byte[] DeriveKeyFromHash(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm)
  Byte[] DeriveKeyFromHash(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, Byte[] secretPrepend, Byte[] secretAppend)
  Byte[] DeriveKeyFromHmac(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, Byte[] hmacKey)
  Byte[] DeriveKeyFromHmac(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, Byte[] hmacKey, Byte[] secretPrepend, Byte[] secretAppend)
  Byte[] DeriveKeyTls(ECDiffieHellmanPublicKey otherPartyPublicKey, Byte[] prfLabel, Byte[] prfSeed)
  Exception DerivedClassMustOverride()
  ECParameters ExportParameters(bool includePrivateParameters)
  ECParameters ExportExplicitParameters(bool includePrivateParameters)
  void ImportParameters(ECParameters parameters)
  void GenerateKey(ECCurve curve)
  Byte[] ExportECPrivateKey()
  bool TryExportECPrivateKey(Span`1<byte> destination, Int32& bytesWritten)
  void ImportECPrivateKey(ReadOnlySpan`1<byte> source, Int32& bytesRead)
  void .ctor()
--------------------------------------------------
Класс: System.Security.Cryptography.ECDiffieHellmanPublicKey
Наследуется от: object
Поля:
  Byte[] m_keyBlob
Свойства:
Методы:
  void .ctor()
  void .ctor(Byte[] keyBlob)
  void Dispose()
  void Dispose(bool disposing)
  Byte[] ToByteArray()
  string ToXmlString()
  ECParameters ExportParameters()
  ECParameters ExportExplicitParameters()
--------------------------------------------------
Класс: System.Security.Cryptography.ECDsa
Наследуется от: AsymmetricAlgorithm
Поля:
Свойства:
  string KeyExchangeAlgorithm
  string SignatureAlgorithm
Методы:
  string get_KeyExchangeAlgorithm()
  string get_SignatureAlgorithm()
  ECDsa Create()
  ECDsa Create(string algorithm)
  ECDsa Create(ECCurve curve)
  ECDsa Create(ECParameters parameters)
  Byte[] SignHash(Byte[] hash)
  bool VerifyHash(Byte[] hash, Byte[] signature)
  Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)
  Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm)
  Byte[] SignData(Byte[] data, HashAlgorithmName hashAlgorithm)
  Byte[] SignData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)
  Byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm)
  bool VerifyData(Byte[] data, Byte[] signature, HashAlgorithmName hashAlgorithm)
  bool VerifyData(Byte[] data, int offset, int count, Byte[] signature, HashAlgorithmName hashAlgorithm)
  bool VerifyData(Stream data, Byte[] signature, HashAlgorithmName hashAlgorithm)
  ECParameters ExportParameters(bool includePrivateParameters)
  ECParameters ExportExplicitParameters(bool includePrivateParameters)
  void ImportParameters(ECParameters parameters)
  void GenerateKey(ECCurve curve)
  Exception DerivedClassMustOverride()
  Exception HashAlgorithmNameNullOrEmpty()
  bool TryHashData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten)
  bool TrySignHash(ReadOnlySpan`1<byte> hash, Span`1<byte> destination, Int32& bytesWritten)
  bool VerifyHash(ReadOnlySpan`1<byte> hash, ReadOnlySpan`1<byte> signature)
  bool TrySignData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten)
  bool VerifyData(ReadOnlySpan`1<byte> data, ReadOnlySpan`1<byte> signature, HashAlgorithmName hashAlgorithm)
  Byte[] ExportECPrivateKey()
  bool TryExportECPrivateKey(Span`1<byte> destination, Int32& bytesWritten)
  void ImportECPrivateKey(ReadOnlySpan`1<byte> source, Int32& bytesRead)
  void .ctor()
--------------------------------------------------
Класс: System.Security.Cryptography.ECDsaCng
Наследуется от: ECDsa
Поля:
  CngAlgorithm <HashAlgorithm>k__BackingField
Свойства:
  CngAlgorithm HashAlgorithm
  CngKey Key
Методы:
  void .ctor()
  void .ctor(int keySize)
  void .ctor(CngKey key)
  void .ctor(ECCurve curve)
  CngAlgorithm get_HashAlgorithm()
  void set_HashAlgorithm(CngAlgorithm value)
  CngKey get_Key()
  void set_Key(CngKey value)
  Byte[] SignHash(Byte[] hash)
  bool VerifyHash(Byte[] hash, Byte[] signature)
  void FromXmlString(string xml, ECKeyXmlFormat format)
  Byte[] SignData(Byte[] data)
  Byte[] SignData(Stream data)
  Byte[] SignData(Byte[] data, int offset, int count)
  string ToXmlString(ECKeyXmlFormat format)
  bool VerifyData(Byte[] data, Byte[] signature)
  bool VerifyData(Stream data, Byte[] signature)
  bool VerifyData(Byte[] data, int offset, int count, Byte[] signature)
--------------------------------------------------
Класс: System.Security.Cryptography.ECKeyXmlFormat
Наследуется от: Enum
Поля:
  int value__
  ECKeyXmlFormat Rfc4050
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.CngExportPolicies
Наследуется от: Enum
Поля:
  int value__
  CngExportPolicies None
  CngExportPolicies AllowExport
  CngExportPolicies AllowPlaintextExport
  CngExportPolicies AllowArchiving
  CngExportPolicies AllowPlaintextArchiving
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.CngKeyCreationOptions
Наследуется от: Enum
Поля:
  int value__
  CngKeyCreationOptions None
  CngKeyCreationOptions MachineKey
  CngKeyCreationOptions OverwriteExistingKey
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.CngKeyOpenOptions
Наследуется от: Enum
Поля:
  int value__
  CngKeyOpenOptions None
  CngKeyOpenOptions UserKey
  CngKeyOpenOptions MachineKey
  CngKeyOpenOptions Silent
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.CngKeyTypes
Наследуется от: Enum
Поля:
  int value__
  CngKeyTypes None
  CngKeyTypes MachineKey
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.CngKeyUsages
Наследуется от: Enum
Поля:
  int value__
  CngKeyUsages None
  CngKeyUsages Decryption
  CngKeyUsages Signing
  CngKeyUsages KeyAgreement
  CngKeyUsages AllUsages
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.CngPropertyOptions
Наследуется от: Enum
Поля:
  int value__
  CngPropertyOptions None
  CngPropertyOptions CustomProperty
  CngPropertyOptions Persist
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.CngUIProtectionLevels
Наследуется от: Enum
Поля:
  int value__
  CngUIProtectionLevels None
  CngUIProtectionLevels ProtectKey
  CngUIProtectionLevels ForceHighProtection
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.RSACng
Наследуется от: RSA
Поля:
Свойства:
  CngKey Key
Методы:
  void .ctor()
  void .ctor(int keySize)
  void .ctor(CngKey key)
  CngKey get_Key()
  void set_Key(CngKey value)
  RSAParameters ExportParameters(bool includePrivateParameters)
  void ImportParameters(RSAParameters parameters)
--------------------------------------------------
Класс: System.Security.Cryptography.AesCng
Наследуется от: Aes
Поля:
Свойства:
  Byte[] Key
  int KeySize
Методы:
  void .ctor()
  void .ctor(string keyName)
  void .ctor(string keyName, CngProvider provider)
  void .ctor(string keyName, CngProvider provider, CngKeyOpenOptions openOptions)
  Byte[] get_Key()
  void set_Key(Byte[] value)
  int get_KeySize()
  void set_KeySize(int value)
  ICryptoTransform CreateDecryptor()
  ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV)
  ICryptoTransform CreateEncryptor()
  ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV)
  void Dispose(bool disposing)
  void GenerateIV()
  void GenerateKey()
--------------------------------------------------
Класс: System.Security.Cryptography.AesCryptoServiceProvider
Наследуется от: Aes
Поля:
Свойства:
  Byte[] IV
  Byte[] Key
  int KeySize
  int FeedbackSize
  CipherMode Mode
  PaddingMode Padding
Методы:
  void .ctor()
  void GenerateIV()
  void GenerateKey()
  ICryptoTransform CreateDecryptor(Byte[] key, Byte[] iv)
  ICryptoTransform CreateEncryptor(Byte[] key, Byte[] iv)
  Byte[] get_IV()
  void set_IV(Byte[] value)
  Byte[] get_Key()
  void set_Key(Byte[] value)
  int get_KeySize()
  void set_KeySize(int value)
  int get_FeedbackSize()
  void set_FeedbackSize(int value)
  CipherMode get_Mode()
  void set_Mode(CipherMode value)
  PaddingMode get_Padding()
  void set_Padding(PaddingMode value)
  ICryptoTransform CreateDecryptor()
  ICryptoTransform CreateEncryptor()
  void Dispose(bool disposing)
--------------------------------------------------
Класс: System.Security.Cryptography.AesTransform
Наследуется от: SymmetricTransform
Поля:
  UInt32[] expandedKey
  int Nb
  int Nk
  int Nr
  UInt32[] Rcon
  Byte[] SBox
  Byte[] iSBox
  UInt32[] T0
  UInt32[] T1
  UInt32[] T2
  UInt32[] T3
  UInt32[] iT0
  UInt32[] iT1
  UInt32[] iT2
  UInt32[] iT3
Свойства:
Методы:
  void .ctor(Aes algo, bool encryption, Byte[] key, Byte[] iv)
  void Clear()
  void ECB(Byte[] input, Byte[] output)
  UInt32 SubByte(UInt32 a)
  void Encrypt128(Byte[] indata, Byte[] outdata, UInt32[] ekey)
  void Decrypt128(Byte[] indata, Byte[] outdata, UInt32[] ekey)
  void .cctor()
--------------------------------------------------
Класс: System.Security.Cryptography.MD5Cng
Наследуется от: MD5
Поля:
  Byte[] Empty
  MD5 hash
Свойства:
Методы:
  void .ctor()
  void Initialize()
  void HashCore(Byte[] array, int ibStart, int cbSize)
  Byte[] HashFinal()
  void Dispose(bool disposing)
  void .cctor()
--------------------------------------------------
Класс: System.Security.Cryptography.SHA1Cng
Наследуется от: SHA1
Поля:
  Byte[] Empty
  SHA1 hash
Свойства:
Методы:
  void .ctor()
  void Initialize()
  void HashCore(Byte[] array, int ibStart, int cbSize)
  Byte[] HashFinal()
  void Dispose(bool disposing)
  void .cctor()
--------------------------------------------------
Класс: System.Security.Cryptography.SHA256Cng
Наследуется от: SHA256
Поля:
  Byte[] Empty
  SHA256 hash
Свойства:
Методы:
  void .ctor()
  void Initialize()
  void HashCore(Byte[] array, int ibStart, int cbSize)
  Byte[] HashFinal()
  void Dispose(bool disposing)
  void .cctor()
--------------------------------------------------
Класс: System.Security.Cryptography.SHA256CryptoServiceProvider
Наследуется от: SHA256
Поля:
  Byte[] Empty
  SHA256 hash
Свойства:
Методы:
  void .ctor()
  void Initialize()
  void HashCore(Byte[] array, int ibStart, int cbSize)
  Byte[] HashFinal()
  void Dispose(bool disposing)
  void .cctor()
--------------------------------------------------
Класс: System.Security.Cryptography.SHA384Cng
Наследуется от: SHA384
Поля:
  Byte[] Empty
  SHA384 hash
Свойства:
Методы:
  void .ctor()
  void Initialize()
  void HashCore(Byte[] array, int ibStart, int cbSize)
  Byte[] HashFinal()
  void Dispose(bool disposing)
  void .cctor()
--------------------------------------------------
Класс: System.Security.Cryptography.SHA384CryptoServiceProvider
Наследуется от: SHA384
Поля:
  Byte[] Empty
  SHA384 hash
Свойства:
Методы:
  void .ctor()
  void Initialize()
  void HashCore(Byte[] array, int ibStart, int cbSize)
  Byte[] HashFinal()
  void Dispose(bool disposing)
  void .cctor()
--------------------------------------------------
Класс: System.Security.Cryptography.SHA512Cng
Наследуется от: SHA512
Поля:
  Byte[] Empty
  SHA512 hash
Свойства:
Методы:
  void .ctor()
  void Initialize()
  void HashCore(Byte[] array, int ibStart, int cbSize)
  Byte[] HashFinal()
  void Dispose(bool disposing)
  void .cctor()
--------------------------------------------------
Класс: System.Security.Cryptography.SHA512CryptoServiceProvider
Наследуется от: SHA512
Поля:
  Byte[] Empty
  SHA512 hash
Свойства:
Методы:
  void .ctor()
  void Initialize()
  void HashCore(Byte[] array, int ibStart, int cbSize)
  Byte[] HashFinal()
  void Dispose(bool disposing)
  void .cctor()
--------------------------------------------------
Класс: System.Security.Cryptography.TripleDESCng
Наследуется от: TripleDES
Поля:
Свойства:
  Byte[] Key
  int KeySize
Методы:
  void .ctor()
  void .ctor(string keyName)
  void .ctor(string keyName, CngProvider provider)
  void .ctor(string keyName, CngProvider provider, CngKeyOpenOptions openOptions)
  Byte[] get_Key()
  void set_Key(Byte[] value)
  int get_KeySize()
  void set_KeySize(int value)
  ICryptoTransform CreateDecryptor()
  ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV)
  ICryptoTransform CreateEncryptor()
  ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV)
  void Dispose(bool disposing)
  void GenerateIV()
  void GenerateKey()
--------------------------------------------------
Класс: System.Security.Cryptography.X509Certificates.TrustStatus
Наследуется от: Enum
Поля:
  int value__
  TrustStatus Untrusted
  TrustStatus UnknownIdentity
  TrustStatus KnownIdentity
  TrustStatus Trusted
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.X509Certificates.DSACertificateExtensions
Наследуется от: object
Поля:
Свойства:
Методы:
  DSA GetDSAPublicKey(X509Certificate2 certificate)
  DSA GetDSAPrivateKey(X509Certificate2 certificate)
  X509Certificate2 CopyWithPrivateKey(X509Certificate2 certificate, DSA privateKey)
--------------------------------------------------
Класс: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions
Наследуется от: object
Поля:
Свойства:
Методы:
  ECDsa GetECDsaPrivateKey(X509Certificate2 certificate)
  ECDsa GetECDsaPublicKey(X509Certificate2 certificate)
  X509Certificate2 CopyWithPrivateKey(X509Certificate2 certificate, ECDsa privateKey)
--------------------------------------------------
Класс: System.Security.Cryptography.X509Certificates.RSACertificateExtensions
Наследуется от: object
Поля:
Свойства:
Методы:
  RSA GetRSAPrivateKey(X509Certificate2 certificate)
  RSA GetRSAPublicKey(X509Certificate2 certificate)
  X509Certificate2 CopyWithPrivateKey(X509Certificate2 certificate, RSA privateKey)
--------------------------------------------------
Класс: System.Reflection.DispatchProxy
Наследуется от: object
Поля:
Свойства:
Методы:
  void .ctor()
  object Invoke(MethodInfo targetMethod, Object[] args)
  T Create()
--------------------------------------------------
Класс: System.Reflection.DispatchProxyGenerator
Наследуется от: object
Поля:
  int InvokeActionFieldAndCtorParameterIndex
  Dictionary`2<Type, Dictionary`2<Type, Type>> s_baseTypeAndInterfaceToGeneratedProxyType
  ProxyAssembly s_proxyAssembly
  MethodInfo s_dispatchProxyInvokeMethod
Свойства:
Методы:
  object CreateProxyInstance(Type baseType, Type interfaceType)
  Type GetProxyType(Type baseType, Type interfaceType)
  Type GenerateProxyType(Type baseType, Type interfaceType)
  void Invoke(Object[] args)
  void .cctor()
--------------------------------------------------
Класс: System.Net.Sockets.UnixDomainSocketEndPoint
Наследуется от: EndPoint
Поля:
  int s_nativePathOffset
  int s_nativePathLength
  int s_nativeAddressSize
  AddressFamily EndPointAddressFamily
  Encoding s_pathEncoding
  Lazy`1<bool> s_udsSupported
  string _path
  Byte[] _encodedPath
Свойства:
  AddressFamily AddressFamily
Методы:
  SocketAddress CreateSocketAddressForSerialize()
  void .ctor(string path)
  void .ctor(SocketAddress socketAddress)
  SocketAddress Serialize()
  EndPoint Create(SocketAddress socketAddress)
  AddressFamily get_AddressFamily()
  string ToString()
  bool IsAbstract(string path)
  bool IsAbstract(Byte[] encodedPath)
  void .cctor()
--------------------------------------------------
Класс: System.Linq.IQueryable
Поля:
Свойства:
  Expression Expression
  Type ElementType
  IQueryProvider Provider
Методы:
  Expression get_Expression()
  Type get_ElementType()
  IQueryProvider get_Provider()
--------------------------------------------------
Класс: System.Linq.IQueryable`1
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.IQueryProvider
Поля:
Свойства:
Методы:
  IQueryable CreateQuery(Expression expression)
  IQueryable`1<TElement> CreateQuery(Expression expression)
  object Execute(Expression expression)
  TResult Execute(Expression expression)
--------------------------------------------------
Класс: System.Linq.IOrderedQueryable
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.IOrderedQueryable`1
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.AggregationMinMaxHelpers`1
Наследуется от: object
Поля:
Свойства:
Методы:
  T Reduce(IEnumerable`1<T> source, int sign)
  T ReduceMin(IEnumerable`1<T> source)
  T ReduceMax(IEnumerable`1<T> source)
  Func`3<Pair`2<bool, T>, T, Pair`2<bool, T>> MakeIntermediateReduceFunction(int sign)
  Func`3<Pair`2<bool, T>, Pair`2<bool, T>, Pair`2<bool, T>> MakeFinalReduceFunction(int sign)
  Func`2<Pair`2<bool, T>, T> MakeResultSelectorFunction()
--------------------------------------------------
Класс: System.Linq.OrderedParallelQuery`1
Наследуется от: ParallelQuery`1<TSource>
Поля:
  QueryOperator`1<TSource> _sortOp
Свойства:
  QueryOperator`1<TSource> SortOperator
  IOrderedEnumerable`1<TSource> OrderedEnumerable
Методы:
  void .ctor(QueryOperator`1<TSource> sortOp)
  QueryOperator`1<TSource> get_SortOperator()
  IOrderedEnumerable`1<TSource> get_OrderedEnumerable()
  IEnumerator`1<TSource> GetEnumerator()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.ParallelQuery
Наследуется от: object
Поля:
  QuerySettings _specifiedSettings
Свойства:
  QuerySettings SpecifiedQuerySettings
Методы:
  void .ctor(QuerySettings specifiedSettings)
  QuerySettings get_SpecifiedQuerySettings()
  ParallelQuery`1<TCastTo> Cast()
  ParallelQuery`1<TCastTo> OfType()
  IEnumerator GetEnumeratorUntyped()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.ParallelQuery`1
Наследуется от: ParallelQuery
Поля:
Свойства:
Методы:
  void .ctor(QuerySettings settings)
  ParallelQuery`1<TCastTo> Cast()
  ParallelQuery`1<TCastTo> OfType()
  IEnumerator GetEnumeratorUntyped()
  IEnumerator`1<TSource> GetEnumerator()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.ParallelEnumerable
Наследуется от: object
Поля:
  string RIGHT_SOURCE_NOT_PARALLEL_STR
Свойства:
Методы:
  ParallelQuery`1<TSource> AsParallel(IEnumerable`1<TSource> source)
  ParallelQuery`1<TSource> AsParallel(Partitioner`1<TSource> source)
  ParallelQuery`1<TSource> AsOrdered(ParallelQuery`1<TSource> source)
  ParallelQuery AsOrdered(ParallelQuery source)
  ParallelQuery`1<TSource> AsUnordered(ParallelQuery`1<TSource> source)
  ParallelQuery AsParallel(IEnumerable source)
  IEnumerable`1<TSource> AsSequential(ParallelQuery`1<TSource> source)
  ParallelQuery`1<TSource> WithDegreeOfParallelism(ParallelQuery`1<TSource> source, int degreeOfParallelism)
  ParallelQuery`1<TSource> WithCancellation(ParallelQuery`1<TSource> source, CancellationToken cancellationToken)
  ParallelQuery`1<TSource> WithExecutionMode(ParallelQuery`1<TSource> source, ParallelExecutionMode executionMode)
  ParallelQuery`1<TSource> WithMergeOptions(ParallelQuery`1<TSource> source, ParallelMergeOptions mergeOptions)
  ParallelQuery`1<int> Range(int start, int count)
  ParallelQuery`1<TResult> Repeat(TResult element, int count)
  ParallelQuery`1<TResult> Empty()
  void ForAll(ParallelQuery`1<TSource> source, Action`1<TSource> action)
  ParallelQuery`1<TSource> Where(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  ParallelQuery`1<TSource> Where(ParallelQuery`1<TSource> source, Func`3<TSource, int, bool> predicate)
  ParallelQuery`1<TResult> Select(ParallelQuery`1<TSource> source, Func`2<TSource, TResult> selector)
  ParallelQuery`1<TResult> Select(ParallelQuery`1<TSource> source, Func`3<TSource, int, TResult> selector)
  ParallelQuery`1<TResult> Zip(ParallelQuery`1<TFirst> first, ParallelQuery`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector)
  ParallelQuery`1<TResult> Zip(ParallelQuery`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector)
  ParallelQuery`1<TResult> Join(ParallelQuery`1<TOuter> outer, ParallelQuery`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector)
  ParallelQuery`1<TResult> Join(ParallelQuery`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector)
  ParallelQuery`1<TResult> Join(ParallelQuery`1<TOuter> outer, ParallelQuery`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  ParallelQuery`1<TResult> Join(ParallelQuery`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  ParallelQuery`1<TResult> GroupJoin(ParallelQuery`1<TOuter> outer, ParallelQuery`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector)
  ParallelQuery`1<TResult> GroupJoin(ParallelQuery`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector)
  ParallelQuery`1<TResult> GroupJoin(ParallelQuery`1<TOuter> outer, ParallelQuery`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  ParallelQuery`1<TResult> GroupJoin(ParallelQuery`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  ParallelQuery`1<TResult> SelectMany(ParallelQuery`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> selector)
  ParallelQuery`1<TResult> SelectMany(ParallelQuery`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TResult>> selector)
  ParallelQuery`1<TResult> SelectMany(ParallelQuery`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector)
  ParallelQuery`1<TResult> SelectMany(ParallelQuery`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector)
  OrderedParallelQuery`1<TSource> OrderBy(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector)
  OrderedParallelQuery`1<TSource> OrderBy(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer)
  OrderedParallelQuery`1<TSource> OrderByDescending(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector)
  OrderedParallelQuery`1<TSource> OrderByDescending(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer)
  OrderedParallelQuery`1<TSource> ThenBy(OrderedParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector)
  OrderedParallelQuery`1<TSource> ThenBy(OrderedParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer)
  OrderedParallelQuery`1<TSource> ThenByDescending(OrderedParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector)
  OrderedParallelQuery`1<TSource> ThenByDescending(OrderedParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer)
  ParallelQuery`1<IGrouping`2<TKey, TSource>> GroupBy(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector)
  ParallelQuery`1<IGrouping`2<TKey, TSource>> GroupBy(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  ParallelQuery`1<IGrouping`2<TKey, TElement>> GroupBy(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector)
  ParallelQuery`1<IGrouping`2<TKey, TElement>> GroupBy(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer)
  ParallelQuery`1<TResult> GroupBy(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector)
  ParallelQuery`1<TResult> GroupBy(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  ParallelQuery`1<TResult> GroupBy(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector)
  ParallelQuery`1<TResult> GroupBy(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  T PerformAggregation(ParallelQuery`1<T> source, Func`3<T, T, T> reduce, T seed, bool seedIsSpecified, bool throwIfEmpty, QueryAggregationOptions options)
  TAccumulate PerformSequentialAggregation(ParallelQuery`1<TSource> source, TAccumulate seed, bool seedIsSpecified, Func`3<TAccumulate, TSource, TAccumulate> func)
  TSource Aggregate(ParallelQuery`1<TSource> source, Func`3<TSource, TSource, TSource> func)
  TSource Aggregate(ParallelQuery`1<TSource> source, Func`3<TSource, TSource, TSource> func, QueryAggregationOptions options)
  TAccumulate Aggregate(ParallelQuery`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func)
  TAccumulate Aggregate(ParallelQuery`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, QueryAggregationOptions options)
  TResult Aggregate(ParallelQuery`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector)
  TResult Aggregate(ParallelQuery`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func`3<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func`2<TAccumulate, TResult> resultSelector)
  TResult Aggregate(ParallelQuery`1<TSource> source, Func`1<TAccumulate> seedFactory, Func`3<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func`3<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func`2<TAccumulate, TResult> resultSelector)
  int Count(ParallelQuery`1<TSource> source)
  int Count(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  long LongCount(ParallelQuery`1<TSource> source)
  long LongCount(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  int Sum(ParallelQuery`1<int> source)
  Nullable`1<int> Sum(ParallelQuery`1<Nullable`1<int>> source)
  long Sum(ParallelQuery`1<long> source)
  Nullable`1<long> Sum(ParallelQuery`1<Nullable`1<long>> source)
  float Sum(ParallelQuery`1<float> source)
  Nullable`1<float> Sum(ParallelQuery`1<Nullable`1<float>> source)
  double Sum(ParallelQuery`1<double> source)
  Nullable`1<double> Sum(ParallelQuery`1<Nullable`1<double>> source)
  decimal Sum(ParallelQuery`1<decimal> source)
  Nullable`1<decimal> Sum(ParallelQuery`1<Nullable`1<decimal>> source)
  int Sum(ParallelQuery`1<TSource> source, Func`2<TSource, int> selector)
  Nullable`1<int> Sum(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector)
  long Sum(ParallelQuery`1<TSource> source, Func`2<TSource, long> selector)
  Nullable`1<long> Sum(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector)
  float Sum(ParallelQuery`1<TSource> source, Func`2<TSource, float> selector)
  Nullable`1<float> Sum(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector)
  double Sum(ParallelQuery`1<TSource> source, Func`2<TSource, double> selector)
  Nullable`1<double> Sum(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector)
  decimal Sum(ParallelQuery`1<TSource> source, Func`2<TSource, decimal> selector)
  Nullable`1<decimal> Sum(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector)
  int Min(ParallelQuery`1<int> source)
  Nullable`1<int> Min(ParallelQuery`1<Nullable`1<int>> source)
  long Min(ParallelQuery`1<long> source)
  Nullable`1<long> Min(ParallelQuery`1<Nullable`1<long>> source)
  float Min(ParallelQuery`1<float> source)
  Nullable`1<float> Min(ParallelQuery`1<Nullable`1<float>> source)
  double Min(ParallelQuery`1<double> source)
  Nullable`1<double> Min(ParallelQuery`1<Nullable`1<double>> source)
  decimal Min(ParallelQuery`1<decimal> source)
  Nullable`1<decimal> Min(ParallelQuery`1<Nullable`1<decimal>> source)
  TSource Min(ParallelQuery`1<TSource> source)
  int Min(ParallelQuery`1<TSource> source, Func`2<TSource, int> selector)
  Nullable`1<int> Min(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector)
  long Min(ParallelQuery`1<TSource> source, Func`2<TSource, long> selector)
  Nullable`1<long> Min(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector)
  float Min(ParallelQuery`1<TSource> source, Func`2<TSource, float> selector)
  Nullable`1<float> Min(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector)
  double Min(ParallelQuery`1<TSource> source, Func`2<TSource, double> selector)
  Nullable`1<double> Min(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector)
  decimal Min(ParallelQuery`1<TSource> source, Func`2<TSource, decimal> selector)
  Nullable`1<decimal> Min(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector)
  TResult Min(ParallelQuery`1<TSource> source, Func`2<TSource, TResult> selector)
  int Max(ParallelQuery`1<int> source)
  Nullable`1<int> Max(ParallelQuery`1<Nullable`1<int>> source)
  long Max(ParallelQuery`1<long> source)
  Nullable`1<long> Max(ParallelQuery`1<Nullable`1<long>> source)
  float Max(ParallelQuery`1<float> source)
  Nullable`1<float> Max(ParallelQuery`1<Nullable`1<float>> source)
  double Max(ParallelQuery`1<double> source)
  Nullable`1<double> Max(ParallelQuery`1<Nullable`1<double>> source)
  decimal Max(ParallelQuery`1<decimal> source)
  Nullable`1<decimal> Max(ParallelQuery`1<Nullable`1<decimal>> source)
  TSource Max(ParallelQuery`1<TSource> source)
  int Max(ParallelQuery`1<TSource> source, Func`2<TSource, int> selector)
  Nullable`1<int> Max(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector)
  long Max(ParallelQuery`1<TSource> source, Func`2<TSource, long> selector)
  Nullable`1<long> Max(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector)
  float Max(ParallelQuery`1<TSource> source, Func`2<TSource, float> selector)
  Nullable`1<float> Max(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector)
  double Max(ParallelQuery`1<TSource> source, Func`2<TSource, double> selector)
  Nullable`1<double> Max(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector)
  decimal Max(ParallelQuery`1<TSource> source, Func`2<TSource, decimal> selector)
  Nullable`1<decimal> Max(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector)
  TResult Max(ParallelQuery`1<TSource> source, Func`2<TSource, TResult> selector)
  double Average(ParallelQuery`1<int> source)
  Nullable`1<double> Average(ParallelQuery`1<Nullable`1<int>> source)
  double Average(ParallelQuery`1<long> source)
  Nullable`1<double> Average(ParallelQuery`1<Nullable`1<long>> source)
  float Average(ParallelQuery`1<float> source)
  Nullable`1<float> Average(ParallelQuery`1<Nullable`1<float>> source)
  double Average(ParallelQuery`1<double> source)
  Nullable`1<double> Average(ParallelQuery`1<Nullable`1<double>> source)
  decimal Average(ParallelQuery`1<decimal> source)
  Nullable`1<decimal> Average(ParallelQuery`1<Nullable`1<decimal>> source)
  double Average(ParallelQuery`1<TSource> source, Func`2<TSource, int> selector)
  Nullable`1<double> Average(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector)
  double Average(ParallelQuery`1<TSource> source, Func`2<TSource, long> selector)
  Nullable`1<double> Average(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector)
  float Average(ParallelQuery`1<TSource> source, Func`2<TSource, float> selector)
  Nullable`1<float> Average(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector)
  double Average(ParallelQuery`1<TSource> source, Func`2<TSource, double> selector)
  Nullable`1<double> Average(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector)
  decimal Average(ParallelQuery`1<TSource> source, Func`2<TSource, decimal> selector)
  Nullable`1<decimal> Average(ParallelQuery`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector)
  bool Any(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  bool Any(ParallelQuery`1<TSource> source)
  bool All(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  bool Contains(ParallelQuery`1<TSource> source, TSource value)
  bool Contains(ParallelQuery`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer)
  ParallelQuery`1<TSource> Take(ParallelQuery`1<TSource> source, int count)
  ParallelQuery`1<TSource> TakeWhile(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  ParallelQuery`1<TSource> TakeWhile(ParallelQuery`1<TSource> source, Func`3<TSource, int, bool> predicate)
  ParallelQuery`1<TSource> Skip(ParallelQuery`1<TSource> source, int count)
  ParallelQuery`1<TSource> SkipWhile(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  ParallelQuery`1<TSource> SkipWhile(ParallelQuery`1<TSource> source, Func`3<TSource, int, bool> predicate)
  ParallelQuery`1<TSource> Concat(ParallelQuery`1<TSource> first, ParallelQuery`1<TSource> second)
  ParallelQuery`1<TSource> Concat(ParallelQuery`1<TSource> first, IEnumerable`1<TSource> second)
  bool SequenceEqual(ParallelQuery`1<TSource> first, ParallelQuery`1<TSource> second)
  bool SequenceEqual(ParallelQuery`1<TSource> first, IEnumerable`1<TSource> second)
  bool SequenceEqual(ParallelQuery`1<TSource> first, ParallelQuery`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  void DisposeEnumerator(IEnumerator`1<TSource> e, CancellationState cancelState)
  bool SequenceEqual(ParallelQuery`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  ParallelQuery`1<TSource> Distinct(ParallelQuery`1<TSource> source)
  ParallelQuery`1<TSource> Distinct(ParallelQuery`1<TSource> source, IEqualityComparer`1<TSource> comparer)
  ParallelQuery`1<TSource> Union(ParallelQuery`1<TSource> first, ParallelQuery`1<TSource> second)
  ParallelQuery`1<TSource> Union(ParallelQuery`1<TSource> first, IEnumerable`1<TSource> second)
  ParallelQuery`1<TSource> Union(ParallelQuery`1<TSource> first, ParallelQuery`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  ParallelQuery`1<TSource> Union(ParallelQuery`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  ParallelQuery`1<TSource> Intersect(ParallelQuery`1<TSource> first, ParallelQuery`1<TSource> second)
  ParallelQuery`1<TSource> Intersect(ParallelQuery`1<TSource> first, IEnumerable`1<TSource> second)
  ParallelQuery`1<TSource> Intersect(ParallelQuery`1<TSource> first, ParallelQuery`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  ParallelQuery`1<TSource> Intersect(ParallelQuery`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  ParallelQuery`1<TSource> Except(ParallelQuery`1<TSource> first, ParallelQuery`1<TSource> second)
  ParallelQuery`1<TSource> Except(ParallelQuery`1<TSource> first, IEnumerable`1<TSource> second)
  ParallelQuery`1<TSource> Except(ParallelQuery`1<TSource> first, ParallelQuery`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  ParallelQuery`1<TSource> Except(ParallelQuery`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  IEnumerable`1<TSource> AsEnumerable(ParallelQuery`1<TSource> source)
  TSource[] ToArray(ParallelQuery`1<TSource> source)
  List`1<TSource> ToList(ParallelQuery`1<TSource> source)
  Dictionary`2<TKey, TSource> ToDictionary(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector)
  Dictionary`2<TKey, TSource> ToDictionary(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  Dictionary`2<TKey, TElement> ToDictionary(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector)
  Dictionary`2<TKey, TElement> ToDictionary(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer)
  ILookup`2<TKey, TSource> ToLookup(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector)
  ILookup`2<TKey, TSource> ToLookup(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  ILookup`2<TKey, TElement> ToLookup(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector)
  ILookup`2<TKey, TElement> ToLookup(ParallelQuery`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer)
  ParallelQuery`1<TSource> Reverse(ParallelQuery`1<TSource> source)
  ParallelQuery`1<TResult> OfType(ParallelQuery source)
  ParallelQuery`1<TResult> Cast(ParallelQuery source)
  TSource GetOneWithPossibleDefault(QueryOperator`1<TSource> queryOp, bool throwIfTwo, bool defaultIfEmpty)
  TSource First(ParallelQuery`1<TSource> source)
  TSource First(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  TSource FirstOrDefault(ParallelQuery`1<TSource> source)
  TSource FirstOrDefault(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  TSource Last(ParallelQuery`1<TSource> source)
  TSource Last(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  TSource LastOrDefault(ParallelQuery`1<TSource> source)
  TSource LastOrDefault(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  TSource Single(ParallelQuery`1<TSource> source)
  TSource Single(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  TSource SingleOrDefault(ParallelQuery`1<TSource> source)
  TSource SingleOrDefault(ParallelQuery`1<TSource> source, Func`2<TSource, bool> predicate)
  ParallelQuery`1<TSource> DefaultIfEmpty(ParallelQuery`1<TSource> source)
  ParallelQuery`1<TSource> DefaultIfEmpty(ParallelQuery`1<TSource> source, TSource defaultValue)
  TSource ElementAt(ParallelQuery`1<TSource> source, int index)
  TSource ElementAtOrDefault(ParallelQuery`1<TSource> source, int index)
--------------------------------------------------
Класс: System.Linq.ParallelExecutionMode
Наследуется от: Enum
Поля:
  int value__
  ParallelExecutionMode Default
  ParallelExecutionMode ForceParallelism
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.ParallelMergeOptions
Наследуется от: Enum
Поля:
  int value__
  ParallelMergeOptions Default
  ParallelMergeOptions NotBuffered
  ParallelMergeOptions AutoBuffered
  ParallelMergeOptions FullyBuffered
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.CachedReflectionInfo
Наследуется от: object
Поля:
  MethodInfo s_Aggregate_TSource_2
  MethodInfo s_Aggregate_TSource_TAccumulate_3
  MethodInfo s_Aggregate_TSource_TAccumulate_TResult_4
  MethodInfo s_All_TSource_2
  MethodInfo s_Any_TSource_1
  MethodInfo s_Any_TSource_2
  MethodInfo s_Average_Int32_1
  MethodInfo s_Average_NullableInt32_1
  MethodInfo s_Average_Int64_1
  MethodInfo s_Average_NullableInt64_1
  MethodInfo s_Average_Single_1
  MethodInfo s_Average_NullableSingle_1
  MethodInfo s_Average_Double_1
  MethodInfo s_Average_NullableDouble_1
  MethodInfo s_Average_Decimal_1
  MethodInfo s_Average_NullableDecimal_1
  MethodInfo s_Average_Int32_TSource_2
  MethodInfo s_Average_NullableInt32_TSource_2
  MethodInfo s_Average_Single_TSource_2
  MethodInfo s_Average_NullableSingle_TSource_2
  MethodInfo s_Average_Int64_TSource_2
  MethodInfo s_Average_NullableInt64_TSource_2
  MethodInfo s_Average_Double_TSource_2
  MethodInfo s_Average_NullableDouble_TSource_2
  MethodInfo s_Average_Decimal_TSource_2
  MethodInfo s_Average_NullableDecimal_TSource_2
  MethodInfo s_Cast_TResult_1
  MethodInfo s_Concat_TSource_2
  MethodInfo s_Contains_TSource_2
  MethodInfo s_Contains_TSource_3
  MethodInfo s_Count_TSource_1
  MethodInfo s_Count_TSource_2
  MethodInfo s_DefaultIfEmpty_TSource_1
  MethodInfo s_DefaultIfEmpty_TSource_2
  MethodInfo s_Distinct_TSource_1
  MethodInfo s_Distinct_TSource_2
  MethodInfo s_ElementAt_TSource_2
  MethodInfo s_ElementAtOrDefault_TSource_2
  MethodInfo s_Except_TSource_2
  MethodInfo s_Except_TSource_3
  MethodInfo s_First_TSource_1
  MethodInfo s_First_TSource_2
  MethodInfo s_FirstOrDefault_TSource_1
  MethodInfo s_FirstOrDefault_TSource_2
  MethodInfo s_GroupBy_TSource_TKey_2
  MethodInfo s_GroupBy_TSource_TKey_3
  MethodInfo s_GroupBy_TSource_TKey_TElement_3
  MethodInfo s_GroupBy_TSource_TKey_TElement_4
  MethodInfo s_GroupBy_TSource_TKey_TResult_3
  MethodInfo s_GroupBy_TSource_TKey_TResult_4
  MethodInfo s_GroupBy_TSource_TKey_TElement_TResult_4
  MethodInfo s_GroupBy_TSource_TKey_TElement_TResult_5
  MethodInfo s_GroupJoin_TOuter_TInner_TKey_TResult_5
  MethodInfo s_GroupJoin_TOuter_TInner_TKey_TResult_6
  MethodInfo s_Intersect_TSource_2
  MethodInfo s_Intersect_TSource_3
  MethodInfo s_Join_TOuter_TInner_TKey_TResult_5
  MethodInfo s_Join_TOuter_TInner_TKey_TResult_6
  MethodInfo s_Last_TSource_1
  MethodInfo s_Last_TSource_2
  MethodInfo s_LastOrDefault_TSource_1
  MethodInfo s_LastOrDefault_TSource_2
  MethodInfo s_LongCount_TSource_1
  MethodInfo s_LongCount_TSource_2
  MethodInfo s_Max_TSource_1
  MethodInfo s_Max_TSource_TResult_2
  MethodInfo s_Min_TSource_1
  MethodInfo s_Min_TSource_TResult_2
  MethodInfo s_OfType_TResult_1
  MethodInfo s_OrderBy_TSource_TKey_2
  MethodInfo s_OrderBy_TSource_TKey_3
  MethodInfo s_OrderByDescending_TSource_TKey_2
  MethodInfo s_OrderByDescending_TSource_TKey_3
  MethodInfo s_Reverse_TSource_1
  MethodInfo s_Select_TSource_TResult_2
  MethodInfo s_Select_Index_TSource_TResult_2
  MethodInfo s_SelectMany_TSource_TResult_2
  MethodInfo s_SelectMany_Index_TSource_TResult_2
  MethodInfo s_SelectMany_Index_TSource_TCollection_TResult_3
  MethodInfo s_SelectMany_TSource_TCollection_TResult_3
  MethodInfo s_SequenceEqual_TSource_2
  MethodInfo s_SequenceEqual_TSource_3
  MethodInfo s_Single_TSource_1
  MethodInfo s_Single_TSource_2
  MethodInfo s_SingleOrDefault_TSource_1
  MethodInfo s_SingleOrDefault_TSource_2
  MethodInfo s_Skip_TSource_2
  MethodInfo s_SkipWhile_TSource_2
  MethodInfo s_SkipWhile_Index_TSource_2
  MethodInfo s_Sum_Int32_1
  MethodInfo s_Sum_NullableInt32_1
  MethodInfo s_Sum_Int64_1
  MethodInfo s_Sum_NullableInt64_1
  MethodInfo s_Sum_Single_1
  MethodInfo s_Sum_NullableSingle_1
  MethodInfo s_Sum_Double_1
  MethodInfo s_Sum_NullableDouble_1
  MethodInfo s_Sum_Decimal_1
  MethodInfo s_Sum_NullableDecimal_1
  MethodInfo s_Sum_NullableDecimal_TSource_2
  MethodInfo s_Sum_Int32_TSource_2
  MethodInfo s_Sum_NullableInt32_TSource_2
  MethodInfo s_Sum_Int64_TSource_2
  MethodInfo s_Sum_NullableInt64_TSource_2
  MethodInfo s_Sum_Single_TSource_2
  MethodInfo s_Sum_NullableSingle_TSource_2
  MethodInfo s_Sum_Double_TSource_2
  MethodInfo s_Sum_NullableDouble_TSource_2
  MethodInfo s_Sum_Decimal_TSource_2
  MethodInfo s_Take_TSource_2
  MethodInfo s_TakeWhile_TSource_2
  MethodInfo s_TakeWhile_Index_TSource_2
  MethodInfo s_ThenBy_TSource_TKey_2
  MethodInfo s_ThenBy_TSource_TKey_3
  MethodInfo s_ThenByDescending_TSource_TKey_2
  MethodInfo s_ThenByDescending_TSource_TKey_3
  MethodInfo s_Union_TSource_2
  MethodInfo s_Union_TSource_3
  MethodInfo s_Where_TSource_2
  MethodInfo s_Where_Index_TSource_2
  MethodInfo s_Zip_TFirst_TSecond_TResult_3
  MethodInfo s_SkipLast_TSource_2
  MethodInfo s_TakeLast_TSource_2
  MethodInfo s_Append_TSource_2
  MethodInfo s_Prepend_TSource_2
Свойства:
  MethodInfo Average_Int32_1
  MethodInfo Average_NullableInt32_1
  MethodInfo Average_Int64_1
  MethodInfo Average_NullableInt64_1
  MethodInfo Average_Single_1
  MethodInfo Average_NullableSingle_1
  MethodInfo Average_Double_1
  MethodInfo Average_NullableDouble_1
  MethodInfo Average_Decimal_1
  MethodInfo Average_NullableDecimal_1
  MethodInfo Sum_Int32_1
  MethodInfo Sum_NullableInt32_1
  MethodInfo Sum_Int64_1
  MethodInfo Sum_NullableInt64_1
  MethodInfo Sum_Single_1
  MethodInfo Sum_NullableSingle_1
  MethodInfo Sum_Double_1
  MethodInfo Sum_NullableDouble_1
  MethodInfo Sum_Decimal_1
  MethodInfo Sum_NullableDecimal_1
Методы:
  MethodInfo Aggregate_TSource_2(Type TSource)
  MethodInfo Aggregate_TSource_TAccumulate_3(Type TSource, Type TAccumulate)
  MethodInfo Aggregate_TSource_TAccumulate_TResult_4(Type TSource, Type TAccumulate, Type TResult)
  MethodInfo All_TSource_2(Type TSource)
  MethodInfo Any_TSource_1(Type TSource)
  MethodInfo Any_TSource_2(Type TSource)
  MethodInfo get_Average_Int32_1()
  MethodInfo get_Average_NullableInt32_1()
  MethodInfo get_Average_Int64_1()
  MethodInfo get_Average_NullableInt64_1()
  MethodInfo get_Average_Single_1()
  MethodInfo get_Average_NullableSingle_1()
  MethodInfo get_Average_Double_1()
  MethodInfo get_Average_NullableDouble_1()
  MethodInfo get_Average_Decimal_1()
  MethodInfo get_Average_NullableDecimal_1()
  MethodInfo Average_Int32_TSource_2(Type TSource)
  MethodInfo Average_NullableInt32_TSource_2(Type TSource)
  MethodInfo Average_Single_TSource_2(Type TSource)
  MethodInfo Average_NullableSingle_TSource_2(Type TSource)
  MethodInfo Average_Int64_TSource_2(Type TSource)
  MethodInfo Average_NullableInt64_TSource_2(Type TSource)
  MethodInfo Average_Double_TSource_2(Type TSource)
  MethodInfo Average_NullableDouble_TSource_2(Type TSource)
  MethodInfo Average_Decimal_TSource_2(Type TSource)
  MethodInfo Average_NullableDecimal_TSource_2(Type TSource)
  MethodInfo Cast_TResult_1(Type TResult)
  MethodInfo Concat_TSource_2(Type TSource)
  MethodInfo Contains_TSource_2(Type TSource)
  MethodInfo Contains_TSource_3(Type TSource)
  MethodInfo Count_TSource_1(Type TSource)
  MethodInfo Count_TSource_2(Type TSource)
  MethodInfo DefaultIfEmpty_TSource_1(Type TSource)
  MethodInfo DefaultIfEmpty_TSource_2(Type TSource)
  MethodInfo Distinct_TSource_1(Type TSource)
  MethodInfo Distinct_TSource_2(Type TSource)
  MethodInfo ElementAt_TSource_2(Type TSource)
  MethodInfo ElementAtOrDefault_TSource_2(Type TSource)
  MethodInfo Except_TSource_2(Type TSource)
  MethodInfo Except_TSource_3(Type TSource)
  MethodInfo First_TSource_1(Type TSource)
  MethodInfo First_TSource_2(Type TSource)
  MethodInfo FirstOrDefault_TSource_1(Type TSource)
  MethodInfo FirstOrDefault_TSource_2(Type TSource)
  MethodInfo GroupBy_TSource_TKey_2(Type TSource, Type TKey)
  MethodInfo GroupBy_TSource_TKey_3(Type TSource, Type TKey)
  MethodInfo GroupBy_TSource_TKey_TElement_3(Type TSource, Type TKey, Type TElement)
  MethodInfo GroupBy_TSource_TKey_TElement_4(Type TSource, Type TKey, Type TElement)
  MethodInfo GroupBy_TSource_TKey_TResult_3(Type TSource, Type TKey, Type TResult)
  MethodInfo GroupBy_TSource_TKey_TResult_4(Type TSource, Type TKey, Type TResult)
  MethodInfo GroupBy_TSource_TKey_TElement_TResult_4(Type TSource, Type TKey, Type TElement, Type TResult)
  MethodInfo GroupBy_TSource_TKey_TElement_TResult_5(Type TSource, Type TKey, Type TElement, Type TResult)
  MethodInfo GroupJoin_TOuter_TInner_TKey_TResult_5(Type TOuter, Type TInner, Type TKey, Type TResult)
  MethodInfo GroupJoin_TOuter_TInner_TKey_TResult_6(Type TOuter, Type TInner, Type TKey, Type TResult)
  MethodInfo Intersect_TSource_2(Type TSource)
  MethodInfo Intersect_TSource_3(Type TSource)
  MethodInfo Join_TOuter_TInner_TKey_TResult_5(Type TOuter, Type TInner, Type TKey, Type TResult)
  MethodInfo Join_TOuter_TInner_TKey_TResult_6(Type TOuter, Type TInner, Type TKey, Type TResult)
  MethodInfo Last_TSource_1(Type TSource)
  MethodInfo Last_TSource_2(Type TSource)
  MethodInfo LastOrDefault_TSource_1(Type TSource)
  MethodInfo LastOrDefault_TSource_2(Type TSource)
  MethodInfo LongCount_TSource_1(Type TSource)
  MethodInfo LongCount_TSource_2(Type TSource)
  MethodInfo Max_TSource_1(Type TSource)
  MethodInfo Max_TSource_TResult_2(Type TSource, Type TResult)
  MethodInfo Min_TSource_1(Type TSource)
  MethodInfo Min_TSource_TResult_2(Type TSource, Type TResult)
  MethodInfo OfType_TResult_1(Type TResult)
  MethodInfo OrderBy_TSource_TKey_2(Type TSource, Type TKey)
  MethodInfo OrderBy_TSource_TKey_3(Type TSource, Type TKey)
  MethodInfo OrderByDescending_TSource_TKey_2(Type TSource, Type TKey)
  MethodInfo OrderByDescending_TSource_TKey_3(Type TSource, Type TKey)
  MethodInfo Reverse_TSource_1(Type TSource)
  MethodInfo Select_TSource_TResult_2(Type TSource, Type TResult)
  MethodInfo Select_Index_TSource_TResult_2(Type TSource, Type TResult)
  MethodInfo SelectMany_TSource_TResult_2(Type TSource, Type TResult)
  MethodInfo SelectMany_Index_TSource_TResult_2(Type TSource, Type TResult)
  MethodInfo SelectMany_Index_TSource_TCollection_TResult_3(Type TSource, Type TCollection, Type TResult)
  MethodInfo SelectMany_TSource_TCollection_TResult_3(Type TSource, Type TCollection, Type TResult)
  MethodInfo SequenceEqual_TSource_2(Type TSource)
  MethodInfo SequenceEqual_TSource_3(Type TSource)
  MethodInfo Single_TSource_1(Type TSource)
  MethodInfo Single_TSource_2(Type TSource)
  MethodInfo SingleOrDefault_TSource_1(Type TSource)
  MethodInfo SingleOrDefault_TSource_2(Type TSource)
  MethodInfo Skip_TSource_2(Type TSource)
  MethodInfo SkipWhile_TSource_2(Type TSource)
  MethodInfo SkipWhile_Index_TSource_2(Type TSource)
  MethodInfo get_Sum_Int32_1()
  MethodInfo get_Sum_NullableInt32_1()
  MethodInfo get_Sum_Int64_1()
  MethodInfo get_Sum_NullableInt64_1()
  MethodInfo get_Sum_Single_1()
  MethodInfo get_Sum_NullableSingle_1()
  MethodInfo get_Sum_Double_1()
  MethodInfo get_Sum_NullableDouble_1()
  MethodInfo get_Sum_Decimal_1()
  MethodInfo get_Sum_NullableDecimal_1()
  MethodInfo Sum_NullableDecimal_TSource_2(Type TSource)
  MethodInfo Sum_Int32_TSource_2(Type TSource)
  MethodInfo Sum_NullableInt32_TSource_2(Type TSource)
  MethodInfo Sum_Int64_TSource_2(Type TSource)
  MethodInfo Sum_NullableInt64_TSource_2(Type TSource)
  MethodInfo Sum_Single_TSource_2(Type TSource)
  MethodInfo Sum_NullableSingle_TSource_2(Type TSource)
  MethodInfo Sum_Double_TSource_2(Type TSource)
  MethodInfo Sum_NullableDouble_TSource_2(Type TSource)
  MethodInfo Sum_Decimal_TSource_2(Type TSource)
  MethodInfo Take_TSource_2(Type TSource)
  MethodInfo TakeWhile_TSource_2(Type TSource)
  MethodInfo TakeWhile_Index_TSource_2(Type TSource)
  MethodInfo ThenBy_TSource_TKey_2(Type TSource, Type TKey)
  MethodInfo ThenBy_TSource_TKey_3(Type TSource, Type TKey)
  MethodInfo ThenByDescending_TSource_TKey_2(Type TSource, Type TKey)
  MethodInfo ThenByDescending_TSource_TKey_3(Type TSource, Type TKey)
  MethodInfo Union_TSource_2(Type TSource)
  MethodInfo Union_TSource_3(Type TSource)
  MethodInfo Where_TSource_2(Type TSource)
  MethodInfo Where_Index_TSource_2(Type TSource)
  MethodInfo Zip_TFirst_TSecond_TResult_3(Type TFirst, Type TSecond, Type TResult)
  MethodInfo SkipLast_TSource_2(Type TSource)
  MethodInfo TakeLast_TSource_2(Type TSource)
  MethodInfo Append_TSource_2(Type TSource)
  MethodInfo Prepend_TSource_2(Type TSource)
--------------------------------------------------
Класс: System.Linq.EnumerableExecutor
Наследуется от: object
Поля:
Свойства:
Методы:
  object ExecuteBoxed()
  EnumerableExecutor Create(Expression expression)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.EnumerableExecutor`1
Наследуется от: EnumerableExecutor
Поля:
  Expression _expression
Свойства:
Методы:
  void .ctor(Expression expression)
  object ExecuteBoxed()
  T Execute()
--------------------------------------------------
Класс: System.Linq.EnumerableQuery
Наследуется от: object
Поля:
Свойства:
  Expression Expression
  IEnumerable Enumerable
Методы:
  Expression get_Expression()
  IEnumerable get_Enumerable()
  IQueryable Create(Type elementType, IEnumerable sequence)
  IQueryable Create(Type elementType, Expression expression)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.EnumerableQuery`1
Наследуется от: EnumerableQuery
Поля:
  Expression _expression
  IEnumerable`1<T> _enumerable
Свойства:
  IQueryProvider System.Linq.IQueryable.Provider
  Expression Expression
  IEnumerable Enumerable
  Expression System.Linq.IQueryable.Expression
  Type System.Linq.IQueryable.ElementType
Методы:
  IQueryProvider System.Linq.IQueryable.get_Provider()
  void .ctor(IEnumerable`1<T> enumerable)
  void .ctor(Expression expression)
  Expression get_Expression()
  IEnumerable get_Enumerable()
  Expression System.Linq.IQueryable.get_Expression()
  Type System.Linq.IQueryable.get_ElementType()
  IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression)
  IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression)
  object System.Linq.IQueryProvider.Execute(Expression expression)
  TElement System.Linq.IQueryProvider.Execute(Expression expression)
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  IEnumerator`1<T> GetEnumerator()
  string ToString()
--------------------------------------------------
Класс: System.Linq.EnumerableRewriter
Наследуется от: ExpressionVisitor
Поля:
  Dictionary`2<LabelTarget, LabelTarget> _targetCache
  Dictionary`2<Type, Type> _equivalentTypeCache
  ILookup`2<string, MethodInfo> s_seqMethods
Свойства:
Методы:
  Expression VisitMethodCall(MethodCallExpression m)
  ReadOnlyCollection`1<Expression> FixupQuotedArgs(MethodInfo mi, ReadOnlyCollection`1<Expression> argList)
  Expression FixupQuotedExpression(Type type, Expression expression)
  Expression VisitLambda(Expression`1<T> node)
  Type GetPublicType(Type t)
  Type GetEquivalentType(Type type)
  Expression VisitConstant(ConstantExpression c)
  MethodInfo FindEnumerableMethod(string name, ReadOnlyCollection`1<Expression> args, Type[] typeArgs)
  MethodInfo FindMethod(Type type, string name, ReadOnlyCollection`1<Expression> args, Type[] typeArgs)
  bool ArgsMatch(MethodInfo m, ReadOnlyCollection`1<Expression> args, Type[] typeArgs)
  Type StripExpression(Type type)
  Expression VisitConditional(ConditionalExpression c)
  Expression VisitBlock(BlockExpression node)
  Expression VisitGoto(GotoExpression node)
  LabelTarget VisitLabelTarget(LabelTarget node)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Error
Наследуется от: object
Поля:
Свойства:
Методы:
  Exception ArgumentNotIEnumerableGeneric(string message)
  Exception ArgumentNotValid(string message)
  Exception NoMethodOnType(string name, object type)
  Exception NoMethodOnTypeMatchingArguments(string name, object type)
  Exception EnumeratingNullEnumerableExpression()
  Exception ArgumentNull(string s)
  Exception ArgumentOutOfRange(string s)
  Exception MoreThanOneElement()
  Exception MoreThanOneMatch()
  Exception NoElements()
  Exception NoMatch()
  Exception NotSupported()
--------------------------------------------------
Класс: System.Linq.Queryable
Наследуется от: object
Поля:
Свойства:
Методы:
  IQueryable`1<TElement> AsQueryable(IEnumerable`1<TElement> source)
  IQueryable AsQueryable(IEnumerable source)
  IQueryable`1<TSource> Where(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  IQueryable`1<TSource> Where(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate)
  IQueryable`1<TResult> OfType(IQueryable source)
  IQueryable`1<TResult> Cast(IQueryable source)
  IQueryable`1<TResult> Select(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector)
  IQueryable`1<TResult> Select(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, TResult>> selector)
  IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TResult>>> selector)
  IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, IEnumerable`1<TResult>>> selector)
  IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector)
  IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector)
  Expression GetSourceExpression(IEnumerable`1<TSource> source)
  IQueryable`1<TResult> Join(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector)
  IQueryable`1<TResult> Join(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer)
  IQueryable`1<TResult> GroupJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, IEnumerable`1<TInner>, TResult>> resultSelector)
  IQueryable`1<TResult> GroupJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, IEnumerable`1<TInner>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer)
  IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector)
  IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer)
  IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector)
  IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer)
  IOrderedQueryable`1<TSource> ThenBy(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector)
  IOrderedQueryable`1<TSource> ThenBy(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer)
  IOrderedQueryable`1<TSource> ThenByDescending(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector)
  IOrderedQueryable`1<TSource> ThenByDescending(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer)
  IQueryable`1<TSource> Take(IQueryable`1<TSource> source, int count)
  IQueryable`1<TSource> TakeWhile(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  IQueryable`1<TSource> TakeWhile(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate)
  IQueryable`1<TSource> Skip(IQueryable`1<TSource> source, int count)
  IQueryable`1<TSource> SkipWhile(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  IQueryable`1<TSource> SkipWhile(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate)
  IQueryable`1<IGrouping`2<TKey, TSource>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector)
  IQueryable`1<IGrouping`2<TKey, TElement>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector)
  IQueryable`1<IGrouping`2<TKey, TSource>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer)
  IQueryable`1<IGrouping`2<TKey, TElement>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer)
  IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IEnumerable`1<TElement>, TResult>> resultSelector)
  IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IEnumerable`1<TSource>, TResult>> resultSelector)
  IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IEnumerable`1<TSource>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer)
  IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IEnumerable`1<TElement>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer)
  IQueryable`1<TSource> Distinct(IQueryable`1<TSource> source)
  IQueryable`1<TSource> Distinct(IQueryable`1<TSource> source, IEqualityComparer`1<TSource> comparer)
  IQueryable`1<TSource> Concat(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2)
  IQueryable`1<TResult> Zip(IQueryable`1<TFirst> source1, IEnumerable`1<TSecond> source2, Expression`1<Func`3<TFirst, TSecond, TResult>> resultSelector)
  IQueryable`1<TSource> Union(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2)
  IQueryable`1<TSource> Union(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer)
  IQueryable`1<TSource> Intersect(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2)
  IQueryable`1<TSource> Intersect(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer)
  IQueryable`1<TSource> Except(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2)
  IQueryable`1<TSource> Except(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer)
  TSource First(IQueryable`1<TSource> source)
  TSource First(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  TSource FirstOrDefault(IQueryable`1<TSource> source)
  TSource FirstOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  TSource Last(IQueryable`1<TSource> source)
  TSource Last(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  TSource LastOrDefault(IQueryable`1<TSource> source)
  TSource LastOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  TSource Single(IQueryable`1<TSource> source)
  TSource Single(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  TSource SingleOrDefault(IQueryable`1<TSource> source)
  TSource SingleOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  TSource ElementAt(IQueryable`1<TSource> source, int index)
  TSource ElementAtOrDefault(IQueryable`1<TSource> source, int index)
  IQueryable`1<TSource> DefaultIfEmpty(IQueryable`1<TSource> source)
  IQueryable`1<TSource> DefaultIfEmpty(IQueryable`1<TSource> source, TSource defaultValue)
  bool Contains(IQueryable`1<TSource> source, TSource item)
  bool Contains(IQueryable`1<TSource> source, TSource item, IEqualityComparer`1<TSource> comparer)
  IQueryable`1<TSource> Reverse(IQueryable`1<TSource> source)
  bool SequenceEqual(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2)
  bool SequenceEqual(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer)
  bool Any(IQueryable`1<TSource> source)
  bool Any(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  bool All(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  int Count(IQueryable`1<TSource> source)
  int Count(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  long LongCount(IQueryable`1<TSource> source)
  long LongCount(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate)
  TSource Min(IQueryable`1<TSource> source)
  TResult Min(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector)
  TSource Max(IQueryable`1<TSource> source)
  TResult Max(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector)
  int Sum(IQueryable`1<int> source)
  Nullable`1<int> Sum(IQueryable`1<Nullable`1<int>> source)
  long Sum(IQueryable`1<long> source)
  Nullable`1<long> Sum(IQueryable`1<Nullable`1<long>> source)
  float Sum(IQueryable`1<float> source)
  Nullable`1<float> Sum(IQueryable`1<Nullable`1<float>> source)
  double Sum(IQueryable`1<double> source)
  Nullable`1<double> Sum(IQueryable`1<Nullable`1<double>> source)
  decimal Sum(IQueryable`1<decimal> source)
  Nullable`1<decimal> Sum(IQueryable`1<Nullable`1<decimal>> source)
  int Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector)
  Nullable`1<int> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector)
  long Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector)
  Nullable`1<long> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector)
  float Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector)
  Nullable`1<float> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector)
  double Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector)
  Nullable`1<double> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector)
  decimal Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector)
  Nullable`1<decimal> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector)
  double Average(IQueryable`1<int> source)
  Nullable`1<double> Average(IQueryable`1<Nullable`1<int>> source)
  double Average(IQueryable`1<long> source)
  Nullable`1<double> Average(IQueryable`1<Nullable`1<long>> source)
  float Average(IQueryable`1<float> source)
  Nullable`1<float> Average(IQueryable`1<Nullable`1<float>> source)
  double Average(IQueryable`1<double> source)
  Nullable`1<double> Average(IQueryable`1<Nullable`1<double>> source)
  decimal Average(IQueryable`1<decimal> source)
  Nullable`1<decimal> Average(IQueryable`1<Nullable`1<decimal>> source)
  double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector)
  Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector)
  float Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector)
  Nullable`1<float> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector)
  double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector)
  Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector)
  double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector)
  Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector)
  decimal Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector)
  Nullable`1<decimal> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector)
  TSource Aggregate(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> func)
  TAccumulate Aggregate(IQueryable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> func)
  TResult Aggregate(IQueryable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> func, Expression`1<Func`2<TAccumulate, TResult>> selector)
  IQueryable`1<TSource> SkipLast(IQueryable`1<TSource> source, int count)
  IQueryable`1<TSource> TakeLast(IQueryable`1<TSource> source, int count)
  IQueryable`1<TSource> Append(IQueryable`1<TSource> source, TSource element)
  IQueryable`1<TSource> Prepend(IQueryable`1<TSource> source, TSource element)
--------------------------------------------------
Класс: System.Linq.Strings
Наследуется от: object
Поля:
Свойства:
Методы:
  string ArgumentNotIEnumerableGeneric(string message)
  string ArgumentNotValid(string message)
  string NoMethodOnType(string name, object type)
  string NoMethodOnTypeMatchingArguments(string name, object type)
  string EnumeratingNullEnumerableExpression()
--------------------------------------------------
Класс: System.Linq.TypeHelper
Наследуется от: object
Поля:
Свойства:
Методы:
  Type FindGenericType(Type definition, Type type)
  IEnumerable`1<MethodInfo> GetStaticMethods(Type type)
--------------------------------------------------
Класс: System.Linq.Enumerable
Наследуется от: object
Поля:
Свойства:
Методы:
  TSource Aggregate(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> func)
  TAccumulate Aggregate(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func)
  TResult Aggregate(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector)
  bool Any(IEnumerable`1<TSource> source)
  bool Any(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  bool All(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  IEnumerable`1<TSource> Append(IEnumerable`1<TSource> source, TSource element)
  IEnumerable`1<TSource> Prepend(IEnumerable`1<TSource> source, TSource element)
  double Average(IEnumerable`1<int> source)
  Nullable`1<double> Average(IEnumerable`1<Nullable`1<int>> source)
  double Average(IEnumerable`1<long> source)
  Nullable`1<double> Average(IEnumerable`1<Nullable`1<long>> source)
  float Average(IEnumerable`1<float> source)
  Nullable`1<float> Average(IEnumerable`1<Nullable`1<float>> source)
  double Average(IEnumerable`1<double> source)
  Nullable`1<double> Average(IEnumerable`1<Nullable`1<double>> source)
  decimal Average(IEnumerable`1<decimal> source)
  Nullable`1<decimal> Average(IEnumerable`1<Nullable`1<decimal>> source)
  double Average(IEnumerable`1<TSource> source, Func`2<TSource, int> selector)
  Nullable`1<double> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector)
  double Average(IEnumerable`1<TSource> source, Func`2<TSource, long> selector)
  Nullable`1<double> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector)
  float Average(IEnumerable`1<TSource> source, Func`2<TSource, float> selector)
  Nullable`1<float> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector)
  double Average(IEnumerable`1<TSource> source, Func`2<TSource, double> selector)
  Nullable`1<double> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector)
  decimal Average(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector)
  Nullable`1<decimal> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector)
  IEnumerable`1<TResult> OfType(IEnumerable source)
  IEnumerable`1<TResult> OfTypeIterator(IEnumerable source)
  IEnumerable`1<TResult> Cast(IEnumerable source)
  IEnumerable`1<TResult> CastIterator(IEnumerable source)
  IEnumerable`1<TSource> Concat(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second)
  bool Contains(IEnumerable`1<TSource> source, TSource value)
  bool Contains(IEnumerable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer)
  int Count(IEnumerable`1<TSource> source)
  int Count(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  long LongCount(IEnumerable`1<TSource> source)
  long LongCount(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  IEnumerable`1<TSource> DefaultIfEmpty(IEnumerable`1<TSource> source)
  IEnumerable`1<TSource> DefaultIfEmpty(IEnumerable`1<TSource> source, TSource defaultValue)
  IEnumerable`1<TSource> Distinct(IEnumerable`1<TSource> source)
  IEnumerable`1<TSource> Distinct(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer)
  TSource ElementAt(IEnumerable`1<TSource> source, int index)
  TSource ElementAtOrDefault(IEnumerable`1<TSource> source, int index)
  IEnumerable`1<TSource> AsEnumerable(IEnumerable`1<TSource> source)
  IEnumerable`1<TResult> Empty()
  IEnumerable`1<TSource> Except(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second)
  IEnumerable`1<TSource> Except(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  IEnumerable`1<TSource> ExceptIterator(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  TSource First(IEnumerable`1<TSource> source)
  TSource First(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  TSource FirstOrDefault(IEnumerable`1<TSource> source)
  TSource FirstOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  TSource TryGetFirst(IEnumerable`1<TSource> source, Boolean& found)
  TSource TryGetFirst(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Boolean& found)
  IEnumerable`1<TResult> GroupJoin(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector)
  IEnumerable`1<TResult> GroupJoin(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  IEnumerable`1<TResult> GroupJoinIterator(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  IEnumerable`1<IGrouping`2<TKey, TSource>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector)
  IEnumerable`1<IGrouping`2<TKey, TSource>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  IEnumerable`1<IGrouping`2<TKey, TElement>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector)
  IEnumerable`1<IGrouping`2<TKey, TElement>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer)
  IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector)
  IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector)
  IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  IEnumerable`1<TSource> Intersect(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second)
  IEnumerable`1<TSource> Intersect(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  IEnumerable`1<TSource> IntersectIterator(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  IEnumerable`1<TResult> Join(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector)
  IEnumerable`1<TResult> Join(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  IEnumerable`1<TResult> JoinIterator(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  TSource Last(IEnumerable`1<TSource> source)
  TSource Last(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  TSource LastOrDefault(IEnumerable`1<TSource> source)
  TSource LastOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  TSource TryGetLast(IEnumerable`1<TSource> source, Boolean& found)
  TSource TryGetLast(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Boolean& found)
  ILookup`2<TKey, TSource> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector)
  ILookup`2<TKey, TSource> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  ILookup`2<TKey, TElement> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector)
  ILookup`2<TKey, TElement> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer)
  int Max(IEnumerable`1<int> source)
  Nullable`1<int> Max(IEnumerable`1<Nullable`1<int>> source)
  long Max(IEnumerable`1<long> source)
  Nullable`1<long> Max(IEnumerable`1<Nullable`1<long>> source)
  double Max(IEnumerable`1<double> source)
  Nullable`1<double> Max(IEnumerable`1<Nullable`1<double>> source)
  float Max(IEnumerable`1<float> source)
  Nullable`1<float> Max(IEnumerable`1<Nullable`1<float>> source)
  decimal Max(IEnumerable`1<decimal> source)
  Nullable`1<decimal> Max(IEnumerable`1<Nullable`1<decimal>> source)
  TSource Max(IEnumerable`1<TSource> source)
  int Max(IEnumerable`1<TSource> source, Func`2<TSource, int> selector)
  Nullable`1<int> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector)
  long Max(IEnumerable`1<TSource> source, Func`2<TSource, long> selector)
  Nullable`1<long> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector)
  float Max(IEnumerable`1<TSource> source, Func`2<TSource, float> selector)
  Nullable`1<float> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector)
  double Max(IEnumerable`1<TSource> source, Func`2<TSource, double> selector)
  Nullable`1<double> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector)
  decimal Max(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector)
  Nullable`1<decimal> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector)
  TResult Max(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector)
  int Min(IEnumerable`1<int> source)
  Nullable`1<int> Min(IEnumerable`1<Nullable`1<int>> source)
  long Min(IEnumerable`1<long> source)
  Nullable`1<long> Min(IEnumerable`1<Nullable`1<long>> source)
  float Min(IEnumerable`1<float> source)
  Nullable`1<float> Min(IEnumerable`1<Nullable`1<float>> source)
  double Min(IEnumerable`1<double> source)
  Nullable`1<double> Min(IEnumerable`1<Nullable`1<double>> source)
  decimal Min(IEnumerable`1<decimal> source)
  Nullable`1<decimal> Min(IEnumerable`1<Nullable`1<decimal>> source)
  TSource Min(IEnumerable`1<TSource> source)
  int Min(IEnumerable`1<TSource> source, Func`2<TSource, int> selector)
  Nullable`1<int> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector)
  long Min(IEnumerable`1<TSource> source, Func`2<TSource, long> selector)
  Nullable`1<long> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector)
  float Min(IEnumerable`1<TSource> source, Func`2<TSource, float> selector)
  Nullable`1<float> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector)
  double Min(IEnumerable`1<TSource> source, Func`2<TSource, double> selector)
  Nullable`1<double> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector)
  decimal Min(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector)
  Nullable`1<decimal> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector)
  TResult Min(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector)
  IOrderedEnumerable`1<TSource> OrderBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector)
  IOrderedEnumerable`1<TSource> OrderBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer)
  IOrderedEnumerable`1<TSource> OrderByDescending(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector)
  IOrderedEnumerable`1<TSource> OrderByDescending(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer)
  IOrderedEnumerable`1<TSource> ThenBy(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector)
  IOrderedEnumerable`1<TSource> ThenBy(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer)
  IOrderedEnumerable`1<TSource> ThenByDescending(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector)
  IOrderedEnumerable`1<TSource> ThenByDescending(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer)
  IEnumerable`1<int> Range(int start, int count)
  IEnumerable`1<TResult> Repeat(TResult element, int count)
  IEnumerable`1<TSource> Reverse(IEnumerable`1<TSource> source)
  IEnumerable`1<TResult> Select(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector)
  IEnumerable`1<TResult> Select(IEnumerable`1<TSource> source, Func`3<TSource, int, TResult> selector)
  IEnumerable`1<TResult> SelectIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, TResult> selector)
  IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> selector)
  IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TResult>> selector)
  IEnumerable`1<TResult> SelectManyIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TResult>> selector)
  IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector)
  IEnumerable`1<TResult> SelectManyIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector)
  IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector)
  IEnumerable`1<TResult> SelectManyIterator(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector)
  bool SequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second)
  bool SequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  TSource Single(IEnumerable`1<TSource> source)
  TSource Single(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  TSource SingleOrDefault(IEnumerable`1<TSource> source)
  TSource SingleOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  IEnumerable`1<TSource> Skip(IEnumerable`1<TSource> source, int count)
  IEnumerable`1<TSource> SkipWhile(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  IEnumerable`1<TSource> SkipWhileIterator(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  IEnumerable`1<TSource> SkipWhile(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate)
  IEnumerable`1<TSource> SkipWhileIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate)
  IEnumerable`1<TSource> SkipLast(IEnumerable`1<TSource> source, int count)
  IEnumerable`1<TSource> SkipLastIterator(IEnumerable`1<TSource> source, int count)
  int Sum(IEnumerable`1<int> source)
  Nullable`1<int> Sum(IEnumerable`1<Nullable`1<int>> source)
  long Sum(IEnumerable`1<long> source)
  Nullable`1<long> Sum(IEnumerable`1<Nullable`1<long>> source)
  float Sum(IEnumerable`1<float> source)
  Nullable`1<float> Sum(IEnumerable`1<Nullable`1<float>> source)
  double Sum(IEnumerable`1<double> source)
  Nullable`1<double> Sum(IEnumerable`1<Nullable`1<double>> source)
  decimal Sum(IEnumerable`1<decimal> source)
  Nullable`1<decimal> Sum(IEnumerable`1<Nullable`1<decimal>> source)
  int Sum(IEnumerable`1<TSource> source, Func`2<TSource, int> selector)
  Nullable`1<int> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector)
  long Sum(IEnumerable`1<TSource> source, Func`2<TSource, long> selector)
  Nullable`1<long> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector)
  float Sum(IEnumerable`1<TSource> source, Func`2<TSource, float> selector)
  Nullable`1<float> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector)
  double Sum(IEnumerable`1<TSource> source, Func`2<TSource, double> selector)
  Nullable`1<double> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector)
  decimal Sum(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector)
  Nullable`1<decimal> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector)
  IEnumerable`1<TSource> Take(IEnumerable`1<TSource> source, int count)
  IEnumerable`1<TSource> TakeWhile(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  IEnumerable`1<TSource> TakeWhileIterator(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  IEnumerable`1<TSource> TakeWhile(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate)
  IEnumerable`1<TSource> TakeWhileIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate)
  IEnumerable`1<TSource> TakeLast(IEnumerable`1<TSource> source, int count)
  IEnumerable`1<TSource> TakeLastIterator(IEnumerable`1<TSource> source, int count)
  TSource[] ToArray(IEnumerable`1<TSource> source)
  List`1<TSource> ToList(IEnumerable`1<TSource> source)
  Dictionary`2<TKey, TSource> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector)
  Dictionary`2<TKey, TSource> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  Dictionary`2<TKey, TSource> ToDictionary(TSource[] source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  Dictionary`2<TKey, TSource> ToDictionary(List`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  Dictionary`2<TKey, TElement> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector)
  Dictionary`2<TKey, TElement> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer)
  Dictionary`2<TKey, TElement> ToDictionary(TSource[] source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer)
  Dictionary`2<TKey, TElement> ToDictionary(List`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer)
  HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source)
  HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer)
  IEnumerable`1<TSource> Union(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second)
  IEnumerable`1<TSource> Union(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer)
  IEnumerable`1<TSource> Where(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate)
  IEnumerable`1<TSource> Where(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate)
  IEnumerable`1<TSource> WhereIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate)
  IEnumerable`1<TResult> Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector)
  IEnumerable`1<TResult> ZipIterator(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector)
--------------------------------------------------
Класс: System.Linq.Buffer`1
Наследуется от: ValueType
Поля:
  TElement[] _items
  int _count
Свойства:
Методы:
  void .ctor(IEnumerable`1<TElement> source)
--------------------------------------------------
Класс: System.Linq.SystemCore_EnumerableDebugView`1
Наследуется от: object
Поля:
  IEnumerable`1<T> _enumerable
Свойства:
  T[] Items
Методы:
  void .ctor(IEnumerable`1<T> enumerable)
  T[] get_Items()
--------------------------------------------------
Класс: System.Linq.SystemCore_EnumerableDebugViewEmptyException
Наследуется от: Exception
Поля:
Свойства:
  string Empty
Методы:
  string get_Empty()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.SystemCore_EnumerableDebugView
Наследуется от: object
Поля:
  IEnumerable _enumerable
Свойства:
  Object[] Items
Методы:
  void .ctor(IEnumerable enumerable)
  Object[] get_Items()
--------------------------------------------------
Класс: System.Linq.SystemLinq_GroupingDebugView`2
Наследуется от: object
Поля:
  Grouping`2<TKey, TElement> _grouping
  TElement[] _cachedValues
Свойства:
  TKey Key
  TElement[] Values
Методы:
  void .ctor(Grouping`2<TKey, TElement> grouping)
  TKey get_Key()
  TElement[] get_Values()
--------------------------------------------------
Класс: System.Linq.SystemLinq_LookupDebugView`2
Наследуется от: object
Поля:
  Lookup`2<TKey, TElement> _lookup
  IGrouping`2[] _cachedGroupings
Свойства:
  IGrouping`2[] Groupings
Методы:
  void .ctor(Lookup`2<TKey, TElement> lookup)
  IGrouping`2[] get_Groupings()
--------------------------------------------------
Класс: System.Linq.IGrouping`2
Поля:
Свойства:
  TKey Key
Методы:
  TKey get_Key()
--------------------------------------------------
Класс: System.Linq.Grouping`2
Наследуется от: object
Поля:
  TKey _key
  int _hashCode
  TElement[] _elements
  int _count
  Grouping`2<TKey, TElement> _hashNext
  Grouping`2<TKey, TElement> _next
Свойства:
  TKey Key
  int System.Collections.Generic.ICollection<TElement>.Count
  bool System.Collections.Generic.ICollection<TElement>.IsReadOnly
  TElement System.Collections.Generic.IList<TElement>.Item
Методы:
  void .ctor()
  void Add(TElement element)
  void Trim()
  IEnumerator`1<TElement> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  TKey get_Key()
  int System.Collections.Generic.ICollection<TElement>.get_Count()
  bool System.Collections.Generic.ICollection<TElement>.get_IsReadOnly()
  void System.Collections.Generic.ICollection<TElement>.Add(TElement item)
  void System.Collections.Generic.ICollection<TElement>.Clear()
  bool System.Collections.Generic.ICollection<TElement>.Contains(TElement item)
  void System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[] array, int arrayIndex)
  bool System.Collections.Generic.ICollection<TElement>.Remove(TElement item)
  int System.Collections.Generic.IList<TElement>.IndexOf(TElement item)
  void System.Collections.Generic.IList<TElement>.Insert(int index, TElement item)
  void System.Collections.Generic.IList<TElement>.RemoveAt(int index)
  TElement System.Collections.Generic.IList<TElement>.get_Item(int index)
  void System.Collections.Generic.IList<TElement>.set_Item(int index, TElement value)
--------------------------------------------------
Класс: System.Linq.GroupedResultEnumerable`4
Наследуется от: object
Поля:
  IEnumerable`1<TSource> _source
  Func`2<TSource, TKey> _keySelector
  Func`2<TSource, TElement> _elementSelector
  IEqualityComparer`1<TKey> _comparer
  Func`3<TKey, IEnumerable`1<TElement>, TResult> _resultSelector
Свойства:
Методы:
  void .ctor(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  IEnumerator`1<TResult> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  TResult[] ToArray()
  List`1<TResult> ToList()
  int GetCount(bool onlyIfCheap)
--------------------------------------------------
Класс: System.Linq.GroupedResultEnumerable`3
Наследуется от: object
Поля:
  IEnumerable`1<TSource> _source
  Func`2<TSource, TKey> _keySelector
  IEqualityComparer`1<TKey> _comparer
  Func`3<TKey, IEnumerable`1<TSource>, TResult> _resultSelector
Свойства:
Методы:
  void .ctor(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer)
  IEnumerator`1<TResult> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  TResult[] ToArray()
  List`1<TResult> ToList()
  int GetCount(bool onlyIfCheap)
--------------------------------------------------
Класс: System.Linq.GroupedEnumerable`3
Наследуется от: object
Поля:
  IEnumerable`1<TSource> _source
  Func`2<TSource, TKey> _keySelector
  Func`2<TSource, TElement> _elementSelector
  IEqualityComparer`1<TKey> _comparer
Свойства:
Методы:
  void .ctor(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer)
  IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  IGrouping`2[] ToArray()
  List`1<IGrouping`2<TKey, TElement>> ToList()
  int GetCount(bool onlyIfCheap)
--------------------------------------------------
Класс: System.Linq.GroupedEnumerable`2
Наследуется от: object
Поля:
  IEnumerable`1<TSource> _source
  Func`2<TSource, TKey> _keySelector
  IEqualityComparer`1<TKey> _comparer
Свойства:
Методы:
  void .ctor(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  IEnumerator`1<IGrouping`2<TKey, TSource>> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  IGrouping`2[] ToArray()
  List`1<IGrouping`2<TKey, TSource>> ToList()
  int GetCount(bool onlyIfCheap)
--------------------------------------------------
Класс: System.Linq.ILookup`2
Поля:
Свойства:
  int Count
  IEnumerable`1<TElement> Item
Методы:
  int get_Count()
  IEnumerable`1<TElement> get_Item(TKey key)
  bool Contains(TKey key)
--------------------------------------------------
Класс: System.Linq.Lookup`2
Наследуется от: object
Поля:
  IEqualityComparer`1<TKey> _comparer
  Grouping`2[] _groupings
  Grouping`2<TKey, TElement> _lastGrouping
  int _count
Свойства:
  int Count
  IEnumerable`1<TElement> Item
Методы:
  Lookup`2<TKey, TElement> Create(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer)
  Lookup`2<TKey, TElement> Create(IEnumerable`1<TElement> source, Func`2<TElement, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  Lookup`2<TKey, TElement> CreateForJoin(IEnumerable`1<TElement> source, Func`2<TElement, TKey> keySelector, IEqualityComparer`1<TKey> comparer)
  void .ctor(IEqualityComparer`1<TKey> comparer)
  int get_Count()
  IEnumerable`1<TElement> get_Item(TKey key)
  bool Contains(TKey key)
  IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator()
  IGrouping`2[] System.Linq.IIListProvider<System.Linq.IGrouping<TKey,TElement>>.ToArray()
  TResult[] ToArray(Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector)
  List`1<IGrouping`2<TKey, TElement>> System.Linq.IIListProvider<System.Linq.IGrouping<TKey,TElement>>.ToList()
  List`1<TResult> ToList(Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector)
  int System.Linq.IIListProvider<System.Linq.IGrouping<TKey,TElement>>.GetCount(bool onlyIfCheap)
  IEnumerable`1<TResult> ApplyResultSelector(Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector)
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  int InternalGetHashCode(TKey key)
  Grouping`2<TKey, TElement> GetGrouping(TKey key, bool create)
  void Resize()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.IOrderedEnumerable`1
Поля:
Свойства:
Методы:
  IOrderedEnumerable`1<TElement> CreateOrderedEnumerable(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending)
--------------------------------------------------
Класс: System.Linq.OrderedEnumerable`1
Наследуется от: object
Поля:
  IEnumerable`1<TElement> _source
Свойства:
Методы:
  Int32[] SortedMap(Buffer`1<TElement> buffer)
  Int32[] SortedMap(Buffer`1<TElement> buffer, int minIdx, int maxIdx)
  IEnumerator`1<TElement> GetEnumerator()
  TElement[] ToArray()
  List`1<TElement> ToList()
  int GetCount(bool onlyIfCheap)
  IEnumerator`1<TElement> GetEnumerator(int minIdx, int maxIdx)
  TElement[] ToArray(int minIdx, int maxIdx)
  List`1<TElement> ToList(int minIdx, int maxIdx)
  int GetCount(int minIdx, int maxIdx, bool onlyIfCheap)
  EnumerableSorter`1<TElement> GetEnumerableSorter()
  EnumerableSorter`1<TElement> GetEnumerableSorter(EnumerableSorter`1<TElement> next)
  CachingComparer`1<TElement> GetComparer()
  CachingComparer`1<TElement> GetComparer(CachingComparer`1<TElement> childComparer)
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  IOrderedEnumerable`1<TElement> System.Linq.IOrderedEnumerable<TElement>.CreateOrderedEnumerable(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending)
  IPartition`1<TElement> Skip(int count)
  IPartition`1<TElement> Take(int count)
  TElement TryGetElementAt(int index, Boolean& found)
  TElement TryGetFirst(Boolean& found)
  TElement TryGetFirst(Func`2<TElement, bool> predicate, Boolean& found)
  TElement TryGetLast(Boolean& found)
  TElement TryGetLast(int minIdx, int maxIdx, Boolean& found)
  TElement Last(Buffer`1<TElement> buffer)
  TElement TryGetLast(Func`2<TElement, bool> predicate, Boolean& found)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.OrderedEnumerable`2
Наследуется от: OrderedEnumerable`1<TElement>
Поля:
  OrderedEnumerable`1<TElement> _parent
  Func`2<TElement, TKey> _keySelector
  IComparer`1<TKey> _comparer
  bool _descending
Свойства:
Методы:
  void .ctor(IEnumerable`1<TElement> source, Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending, OrderedEnumerable`1<TElement> parent)
  EnumerableSorter`1<TElement> GetEnumerableSorter(EnumerableSorter`1<TElement> next)
  CachingComparer`1<TElement> GetComparer(CachingComparer`1<TElement> childComparer)
--------------------------------------------------
Класс: System.Linq.CachingComparer`1
Наследуется от: object
Поля:
Свойства:
Методы:
  int Compare(TElement element, bool cacheLower)
  void SetElement(TElement element)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.CachingComparer`2
Наследуется от: CachingComparer`1<TElement>
Поля:
  Func`2<TElement, TKey> _keySelector
  IComparer`1<TKey> _comparer
  bool _descending
  TKey _lastKey
Свойства:
Методы:
  void .ctor(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending)
  int Compare(TElement element, bool cacheLower)
  void SetElement(TElement element)
--------------------------------------------------
Класс: System.Linq.CachingComparerWithChild`2
Наследуется от: CachingComparer`2<TElement, TKey>
Поля:
  CachingComparer`1<TElement> _child
Свойства:
Методы:
  void .ctor(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending, CachingComparer`1<TElement> child)
  int Compare(TElement element, bool cacheLower)
  void SetElement(TElement element)
--------------------------------------------------
Класс: System.Linq.EnumerableSorter`1
Наследуется от: object
Поля:
Свойства:
Методы:
  void ComputeKeys(TElement[] elements, int count)
  int CompareAnyKeys(int index1, int index2)
  Int32[] ComputeMap(TElement[] elements, int count)
  Int32[] Sort(TElement[] elements, int count)
  Int32[] Sort(TElement[] elements, int count, int minIdx, int maxIdx)
  TElement ElementAt(TElement[] elements, int count, int idx)
  void QuickSort(Int32[] map, int left, int right)
  void PartialQuickSort(Int32[] map, int left, int right, int minIdx, int maxIdx)
  int QuickSelect(Int32[] map, int right, int idx)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.EnumerableSorter`2
Наследуется от: EnumerableSorter`1<TElement>
Поля:
  Func`2<TElement, TKey> _keySelector
  IComparer`1<TKey> _comparer
  bool _descending
  EnumerableSorter`1<TElement> _next
  TKey[] _keys
Свойства:
Методы:
  void .ctor(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending, EnumerableSorter`1<TElement> next)
  void ComputeKeys(TElement[] elements, int count)
  int CompareAnyKeys(int index1, int index2)
  int CompareKeys(int index1, int index2)
  void QuickSort(Int32[] keys, int lo, int hi)
  void PartialQuickSort(Int32[] map, int left, int right, int minIdx, int maxIdx)
  int QuickSelect(Int32[] map, int right, int idx)
--------------------------------------------------
Класс: System.Linq.IIListProvider`1
Поля:
Свойства:
Методы:
  TElement[] ToArray()
  List`1<TElement> ToList()
  int GetCount(bool onlyIfCheap)
--------------------------------------------------
Класс: System.Linq.IPartition`1
Поля:
Свойства:
Методы:
  IPartition`1<TElement> Skip(int count)
  IPartition`1<TElement> Take(int count)
  TElement TryGetElementAt(int index, Boolean& found)
  TElement TryGetFirst(Boolean& found)
  TElement TryGetLast(Boolean& found)
--------------------------------------------------
Класс: System.Linq.EmptyPartition`1
Наследуется от: object
Поля:
  IPartition`1<TElement> Instance
Свойства:
  TElement Current
  object System.Collections.IEnumerator.Current
Методы:
  void .ctor()
  IEnumerator`1<TElement> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  bool MoveNext()
  TElement get_Current()
  object System.Collections.IEnumerator.get_Current()
  void System.Collections.IEnumerator.Reset()
  void System.IDisposable.Dispose()
  IPartition`1<TElement> Skip(int count)
  IPartition`1<TElement> Take(int count)
  TElement TryGetElementAt(int index, Boolean& found)
  TElement TryGetFirst(Boolean& found)
  TElement TryGetLast(Boolean& found)
  TElement[] ToArray()
  List`1<TElement> ToList()
  int GetCount(bool onlyIfCheap)
  void .cctor()
--------------------------------------------------
Класс: System.Linq.OrderedPartition`1
Наследуется от: object
Поля:
  OrderedEnumerable`1<TElement> _source
  int _minIndexInclusive
  int _maxIndexInclusive
Свойства:
Методы:
  void .ctor(OrderedEnumerable`1<TElement> source, int minIdxInclusive, int maxIdxInclusive)
  IEnumerator`1<TElement> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  IPartition`1<TElement> Skip(int count)
  IPartition`1<TElement> Take(int count)
  TElement TryGetElementAt(int index, Boolean& found)
  TElement TryGetFirst(Boolean& found)
  TElement TryGetLast(Boolean& found)
  TElement[] ToArray()
  List`1<TElement> ToList()
  int GetCount(bool onlyIfCheap)
--------------------------------------------------
Класс: System.Linq.Set`1
Наследуется от: object
Поля:
  IEqualityComparer`1<TElement> _comparer
  Int32[] _buckets
  Slot[] _slots
  int _count
Свойства:
  int Count
Методы:
  void .ctor(IEqualityComparer`1<TElement> comparer)
  bool Add(TElement value)
  bool Remove(TElement value)
  void Resize()
  TElement[] ToArray()
  List`1<TElement> ToList()
  int get_Count()
  void UnionWith(IEnumerable`1<TElement> other)
  int InternalGetHashCode(TElement value)
--------------------------------------------------
Класс: System.Linq.SingleLinkedNode`1
Наследуется от: object
Поля:
  TSource <Item>k__BackingField
  SingleLinkedNode`1<TSource> <Linked>k__BackingField
Свойства:
  TSource Item
  SingleLinkedNode`1<TSource> Linked
Методы:
  void .ctor(TSource item)
  void .ctor(SingleLinkedNode`1<TSource> linked, TSource item)
  TSource get_Item()
  SingleLinkedNode`1<TSource> get_Linked()
  SingleLinkedNode`1<TSource> Add(TSource item)
  int GetCount()
  IEnumerator`1<TSource> GetEnumerator(int count)
  SingleLinkedNode`1<TSource> GetNode(int index)
  TSource[] ToArray(int count)
--------------------------------------------------
Класс: System.Linq.Utilities
Наследуется от: object
Поля:
Свойства:
Методы:
  bool AreEqualityComparersEqual(IEqualityComparer`1<TSource> left, IEqualityComparer`1<TSource> right)
  Func`2<TSource, bool> CombinePredicates(Func`2<TSource, bool> predicate1, Func`2<TSource, bool> predicate2)
  Func`2<TSource, TResult> CombineSelectors(Func`2<TSource, TMiddle> selector1, Func`2<TMiddle, TResult> selector2)
--------------------------------------------------
Класс: System.Linq.Parallel.AsynchronousChannel`1
Наследуется от: object
Поля:
  T[][] _buffer
  int _index
  Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _producerBufferIndex
  Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _consumerBufferIndex
  Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _done
  T[] _producerChunk
  int _producerChunkIndex
  T[] _consumerChunk
  int _consumerChunkIndex
  int _chunkSize
  ManualResetEventSlim _producerEvent
  IntValueEvent _consumerEvent
  Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _producerIsWaiting
  Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _consumerIsWaiting
  CancellationToken _cancellationToken
Свойства:
  bool IsFull
  bool IsChunkBufferEmpty
  bool IsDone
Методы:
  void .ctor(int index, int chunkSize, CancellationToken cancellationToken, IntValueEvent consumerEvent)
  void .ctor(int index, int capacity, int chunkSize, CancellationToken cancellationToken, IntValueEvent consumerEvent)
  bool get_IsFull()
  bool get_IsChunkBufferEmpty()
  bool get_IsDone()
  void FlushBuffers()
  void SetDone()
  void Enqueue(T item)
  void EnqueueChunk(T[] chunk)
  void WaitUntilNonFull()
  void FlushCachedChunk()
  bool TryDequeue(T& item)
  bool TryDequeueChunk(T[]& chunk)
  bool TryDequeue(T& item, Boolean& isDone)
  bool TryDequeueChunk(T[]& chunk, Boolean& isDone)
  T[] InternalDequeueChunk()
  void DoneWithDequeueWait()
  void Dispose()
--------------------------------------------------
Класс: System.Linq.Parallel.SynchronousChannel`1
Наследуется от: object
Поля:
  Queue`1<T> _queue
Свойства:
  int Count
Методы:
  void .ctor()
  void Init()
  void Enqueue(T item)
  T Dequeue()
  void SetDone()
  void CopyTo(T[] array, int arrayIndex)
  int get_Count()
--------------------------------------------------
Класс: System.Linq.Parallel.EmptyEnumerable`1
Наследуется от: ParallelQuery`1<T>
Поля:
  EmptyEnumerable`1 modreq(System.Runtime.CompilerServices.IsVolatile) s_instance
  EmptyEnumerator`1 modreq(System.Runtime.CompilerServices.IsVolatile) s_enumeratorInstance
Свойства:
  EmptyEnumerable`1<T> Instance
Методы:
  void .ctor()
  EmptyEnumerable`1<T> get_Instance()
  IEnumerator`1<T> GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Parallel.EmptyEnumerator`1
Наследуется от: QueryOperatorEnumerator`2<T, int>
Поля:
Свойства:
  T Current
  object System.Collections.IEnumerator.Current
Методы:
  bool MoveNext(T& currentElement, Int32& currentKey)
  T get_Current()
  object System.Collections.IEnumerator.get_Current()
  bool MoveNext()
  void System.Collections.IEnumerator.Reset()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Parallel.EnumerableWrapperWeakToStrong
Наследуется от: object
Поля:
  IEnumerable _wrappedEnumerable
Свойства:
Методы:
  void .ctor(IEnumerable wrappedEnumerable)
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  IEnumerator`1<object> GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Parallel.IParallelPartitionable`1
Поля:
Свойства:
Методы:
  QueryOperatorEnumerator`2[] GetPartitions(int partitionCount)
--------------------------------------------------
Класс: System.Linq.Parallel.ParallelEnumerableWrapper
Наследуется от: ParallelQuery`1<object>
Поля:
  IEnumerable _source
Свойства:
Методы:
  void .ctor(IEnumerable source)
  IEnumerator GetEnumeratorUntyped()
  IEnumerator`1<object> GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Parallel.ParallelEnumerableWrapper`1
Наследуется от: ParallelQuery`1<T>
Поля:
  IEnumerable`1<T> _wrappedEnumerable
Свойства:
  IEnumerable`1<T> WrappedEnumerable
Методы:
  void .ctor(IEnumerable`1<T> wrappedEnumerable)
  IEnumerable`1<T> get_WrappedEnumerable()
  IEnumerator`1<T> GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Parallel.QueryAggregationOptions
Наследуется от: Enum
Поля:
  int value__
  QueryAggregationOptions None
  QueryAggregationOptions Associative
  QueryAggregationOptions Commutative
  QueryAggregationOptions AssociativeCommutative
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.Parallel.QueryAggregationOptionsExtensions
Наследуется от: object
Поля:
Свойства:
Методы:
  bool IsValidQueryAggregationOption(QueryAggregationOptions value)
--------------------------------------------------
Класс: System.Linq.Parallel.RangeEnumerable
Наследуется от: ParallelQuery`1<int>
Поля:
  int _from
  int _count
Свойства:
Методы:
  void .ctor(int from, int count)
  QueryOperatorEnumerator`2[] GetPartitions(int partitionCount)
  IEnumerator`1<int> GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Parallel.RepeatEnumerable`1
Наследуется от: ParallelQuery`1<TResult>
Поля:
  TResult _element
  int _count
Свойства:
Методы:
  void .ctor(TResult element, int count)
  QueryOperatorEnumerator`2[] GetPartitions(int partitionCount)
  IEnumerator`1<TResult> GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Parallel.JaggedArray`1
Наследуется от: object
Поля:
Свойства:
Методы:
  TElement[][] Allocate(int size1, int size2)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Parallel.Set`1
Наследуется от: object
Поля:
  Int32[] _buckets
  Slot[] _slots
  int _count
  IEqualityComparer`1<TElement> _comparer
  int InitialSize
  int HashCodeMask
Свойства:
Методы:
  void .ctor(IEqualityComparer`1<TElement> comparer)
  bool Add(TElement value)
  bool Contains(TElement value)
  bool Remove(TElement value)
  bool Find(TElement value, bool add)
  void Resize()
  int InternalGetHashCode(TElement value)
--------------------------------------------------
Класс: System.Linq.Parallel.ArrayMergeHelper`1
Наследуется от: object
Поля:
  QueryResults`1<TInputOutput> _queryResults
  TInputOutput[] _outputArray
  QuerySettings _settings
Свойства:
Методы:
  void .ctor(QuerySettings settings, QueryResults`1<TInputOutput> queryResults)
  void ToArrayElement(int index)
  void Execute()
  IEnumerator`1<TInputOutput> GetEnumerator()
  TInputOutput[] GetResultsAsArray()
--------------------------------------------------
Класс: System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1
Наследуется от: MergeEnumerator`1<T>
Поля:
  AsynchronousChannel`1[] _channels
  IntValueEvent _consumerEvent
  Boolean[] _done
  int _channelIndex
  T _currentElement
Свойства:
  T Current
Методы:
  void .ctor(QueryTaskGroupState taskGroupState, AsynchronousChannel`1[] channels, IntValueEvent consumerEvent)
  T get_Current()
  bool MoveNext()
  bool MoveNextSlowPath()
  void Dispose()
--------------------------------------------------
Класс: System.Linq.Parallel.DefaultMergeHelper`2
Наследуется от: object
Поля:
  QueryTaskGroupState _taskGroupState
  PartitionedStream`2<TInputOutput, TIgnoreKey> _partitions
  AsynchronousChannel`1[] _asyncChannels
  SynchronousChannel`1[] _syncChannels
  IEnumerator`1<TInputOutput> _channelEnumerator
  TaskScheduler _taskScheduler
  bool _ignoreOutput
Свойства:
Методы:
  void .ctor(PartitionedStream`2<TInputOutput, TIgnoreKey> partitions, bool ignoreOutput, ParallelMergeOptions options, TaskScheduler taskScheduler, CancellationState cancellationState, int queryId)
  void System.Linq.Parallel.IMergeHelper<TInputOutput>.Execute()
  IEnumerator`1<TInputOutput> System.Linq.Parallel.IMergeHelper<TInputOutput>.GetEnumerator()
  TInputOutput[] GetResultsAsArray()
--------------------------------------------------
Класс: System.Linq.Parallel.IMergeHelper`1
Поля:
Свойства:
Методы:
  void Execute()
  IEnumerator`1<TInputOutput> GetEnumerator()
  TInputOutput[] GetResultsAsArray()
--------------------------------------------------
Класс: System.Linq.Parallel.MergeEnumerator`1
Наследуется от: object
Поля:
  QueryTaskGroupState _taskGroupState
Свойства:
  TInputOutput Current
  object System.Collections.IEnumerator.Current
Методы:
  void .ctor(QueryTaskGroupState taskGroupState)
  TInputOutput get_Current()
  bool MoveNext()
  object System.Collections.IEnumerator.get_Current()
  void Reset()
  void Dispose()
--------------------------------------------------
Класс: System.Linq.Parallel.MergeExecutor`1
Наследуется от: object
Поля:
  IMergeHelper`1<TInputOutput> _mergeHelper
Свойства:
Методы:
  void .ctor()
  MergeExecutor`1<TInputOutput> Execute(PartitionedStream`2<TInputOutput, TKey> partitions, bool ignoreOutput, ParallelMergeOptions options, TaskScheduler taskScheduler, bool isOrdered, CancellationState cancellationState, int queryId)
  void Execute()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  IEnumerator`1<TInputOutput> GetEnumerator()
  TInputOutput[] GetResultsAsArray()
  AsynchronousChannel`1[] MakeAsynchronousChannels(int partitionCount, ParallelMergeOptions options, IntValueEvent consumerEvent, CancellationToken cancellationToken)
  SynchronousChannel`1[] MakeSynchronousChannels(int partitionCount)
--------------------------------------------------
Класс: System.Linq.Parallel.OrderPreservingMergeHelper`2
Наследуется от: object
Поля:
  QueryTaskGroupState _taskGroupState
  PartitionedStream`2<TInputOutput, TKey> _partitions
  Shared`1<TInputOutput[]> _results
  TaskScheduler _taskScheduler
Свойства:
Методы:
  void .ctor(PartitionedStream`2<TInputOutput, TKey> partitions, TaskScheduler taskScheduler, CancellationState cancellationState, int queryId)
  void System.Linq.Parallel.IMergeHelper<TInputOutput>.Execute()
  IEnumerator`1<TInputOutput> System.Linq.Parallel.IMergeHelper<TInputOutput>.GetEnumerator()
  TInputOutput[] GetResultsAsArray()
--------------------------------------------------
Класс: System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2
Наследуется от: object
Поля:
  QueryTaskGroupState _taskGroupState
  PartitionedStream`2<TOutput, TKey> _partitions
  TaskScheduler _taskScheduler
  bool _autoBuffered
  Queue`1[] _buffers
  Boolean[] _producerDone
  Boolean[] _producerWaiting
  Boolean[] _consumerWaiting
  Object[] _bufferLocks
  IComparer`1<Producer`1<TKey>> _producerComparer
  int INITIAL_BUFFER_SIZE
  int STEAL_BUFFER_SIZE
  int MAX_BUFFER_SIZE
Свойства:
Методы:
  void .ctor(PartitionedStream`2<TOutput, TKey> partitions, TaskScheduler taskScheduler, CancellationState cancellationState, bool autoBuffered, int queryId, IComparer`1<TKey> keyComparer)
  void System.Linq.Parallel.IMergeHelper<TOutput>.Execute()
  IEnumerator`1<TOutput> System.Linq.Parallel.IMergeHelper<TOutput>.GetEnumerator()
  TOutput[] GetResultsAsArray()
--------------------------------------------------
Класс: System.Linq.Parallel.Producer`1
Наследуется от: ValueType
Поля:
  TKey MaxKey
  int ProducerIndex
Свойства:
Методы:
  void .ctor(TKey maxKey, int producerIndex)
--------------------------------------------------
Класс: System.Linq.Parallel.ProducerComparerInt
Наследуется от: object
Поля:
Свойства:
Методы:
  int Compare(Producer`1<int> x, Producer`1<int> y)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Parallel.SynchronousChannelMergeEnumerator`1
Наследуется от: MergeEnumerator`1<T>
Поля:
  SynchronousChannel`1[] _channels
  int _channelIndex
  T _currentElement
Свойства:
  T Current
Методы:
  void .ctor(QueryTaskGroupState taskGroupState, SynchronousChannel`1[] channels)
  T get_Current()
  bool MoveNext()
--------------------------------------------------
Класс: System.Linq.Parallel.HashRepartitionEnumerator`3
Наследуется от: QueryOperatorEnumerator`2<Pair`2<TInputOutput, THashKey>, int>
Поля:
  int ENUMERATION_NOT_STARTED
  int _partitionCount
  int _partitionIndex
  Func`2<TInputOutput, THashKey> _keySelector
  HashRepartitionStream`3<TInputOutput, THashKey, int> _repartitionStream
  ListChunk`1[][] _valueExchangeMatrix
  QueryOperatorEnumerator`2<TInputOutput, TIgnoreKey> _source
  CountdownEvent _barrier
  CancellationToken _cancellationToken
  Mutables<TInputOutput, THashKey, TIgnoreKey> _mutables
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<TInputOutput, TIgnoreKey> source, int partitionCount, int partitionIndex, Func`2<TInputOutput, THashKey> keySelector, HashRepartitionStream`3<TInputOutput, THashKey, int> repartitionStream, CountdownEvent barrier, ListChunk`1[][] valueExchangeMatrix, CancellationToken cancellationToken)
  bool MoveNext(Pair`2& currentElement, Int32& currentKey)
  void EnumerateAndRedistributeElements()
  void Dispose(bool disposed)
--------------------------------------------------
Класс: System.Linq.Parallel.HashRepartitionStream`3
Наследуется от: PartitionedStream`2<Pair`2<TInputOutput, THashKey>, TOrderKey>
Поля:
  IEqualityComparer`1<THashKey> _keyComparer
  IEqualityComparer`1<TInputOutput> _elementComparer
  int _distributionMod
  int NULL_ELEMENT_HASH_CODE
  int HashCodeMask
Свойства:
Методы:
  void .ctor(int partitionsCount, IComparer`1<TOrderKey> orderKeyComparer, IEqualityComparer`1<THashKey> hashKeyComparer, IEqualityComparer`1<TInputOutput> elementComparer)
  int GetHashCode(TInputOutput element)
  int GetHashCode(THashKey key)
--------------------------------------------------
Класс: System.Linq.Parallel.IPartitionedStreamRecipient`1
Поля:
Свойства:
Методы:
  void Receive(PartitionedStream`2<TElement, TKey> partitionedStream)
--------------------------------------------------
Класс: System.Linq.Parallel.OrderedHashRepartitionEnumerator`3
Наследуется от: QueryOperatorEnumerator`2<Pair`2<TInputOutput, THashKey>, TOrderKey>
Поля:
  int ENUMERATION_NOT_STARTED
  int _partitionCount
  int _partitionIndex
  Func`2<TInputOutput, THashKey> _keySelector
  HashRepartitionStream`3<TInputOutput, THashKey, TOrderKey> _repartitionStream
  ListChunk`1[][] _valueExchangeMatrix
  ListChunk`1[][] _keyExchangeMatrix
  QueryOperatorEnumerator`2<TInputOutput, TOrderKey> _source
  CountdownEvent _barrier
  CancellationToken _cancellationToken
  Mutables<TInputOutput, THashKey, TOrderKey> _mutables
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<TInputOutput, TOrderKey> source, int partitionCount, int partitionIndex, Func`2<TInputOutput, THashKey> keySelector, OrderedHashRepartitionStream`3<TInputOutput, THashKey, TOrderKey> repartitionStream, CountdownEvent barrier, ListChunk`1[][] valueExchangeMatrix, ListChunk`1[][] keyExchangeMatrix, CancellationToken cancellationToken)
  bool MoveNext(Pair`2& currentElement, TOrderKey& currentKey)
  void EnumerateAndRedistributeElements()
  void Dispose(bool disposing)
--------------------------------------------------
Класс: System.Linq.Parallel.OrderedHashRepartitionStream`3
Наследуется от: HashRepartitionStream`3<TInputOutput, THashKey, TOrderKey>
Поля:
Свойства:
Методы:
  void .ctor(PartitionedStream`2<TInputOutput, TOrderKey> inputStream, Func`2<TInputOutput, THashKey> hashKeySelector, IEqualityComparer`1<THashKey> hashKeyComparer, IEqualityComparer`1<TInputOutput> elementComparer, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.PartitionedDataSource`1
Наследуется от: PartitionedStream`2<T, int>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<T> source, int partitionCount, bool useStriping)
  void InitializePartitions(IEnumerable`1<T> source, int partitionCount, bool useStriping)
  QueryOperatorEnumerator`2[] MakePartitions(IEnumerator`1<T> source, int partitionCount)
--------------------------------------------------
Класс: System.Linq.Parallel.PartitionedStream`2
Наследуется от: object
Поля:
  QueryOperatorEnumerator`2[] _partitions
  IComparer`1<TKey> _keyComparer
  OrdinalIndexState _indexState
Свойства:
  QueryOperatorEnumerator`2<TElement, TKey> Item
  int PartitionCount
  IComparer`1<TKey> KeyComparer
  OrdinalIndexState OrdinalIndexState
Методы:
  void .ctor(int partitionCount, IComparer`1<TKey> keyComparer, OrdinalIndexState indexState)
  QueryOperatorEnumerator`2<TElement, TKey> get_Item(int index)
  void set_Item(int index, QueryOperatorEnumerator`2<TElement, TKey> value)
  int get_PartitionCount()
  IComparer`1<TKey> get_KeyComparer()
  OrdinalIndexState get_OrdinalIndexState()
--------------------------------------------------
Класс: System.Linq.Parallel.UnorderedHashRepartitionStream`3
Наследуется от: HashRepartitionStream`3<TInputOutput, THashKey, int>
Поля:
Свойства:
Методы:
  void .ctor(PartitionedStream`2<TInputOutput, TIgnoreKey> inputStream, Func`2<TInputOutput, THashKey> keySelector, IEqualityComparer`1<THashKey> keyComparer, IEqualityComparer`1<TInputOutput> elementComparer, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.AssociativeAggregationOperator`3
Наследуется от: UnaryQueryOperator`2<TInput, TIntermediate>
Поля:
  TIntermediate _seed
  bool _seedIsSpecified
  bool _throwIfEmpty
  Func`3<TIntermediate, TInput, TIntermediate> _intermediateReduce
  Func`3<TIntermediate, TIntermediate, TIntermediate> _finalReduce
  Func`2<TIntermediate, TOutput> _resultSelector
  Func`1<TIntermediate> _seedFactory
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TInput> child, TIntermediate seed, Func`1<TIntermediate> seedFactory, bool seedIsSpecified, Func`3<TIntermediate, TInput, TIntermediate> intermediateReduce, Func`3<TIntermediate, TIntermediate, TIntermediate> finalReduce, Func`2<TIntermediate, TOutput> resultSelector, bool throwIfEmpty, QueryAggregationOptions options)
  TOutput Aggregate()
  QueryResults`1<TIntermediate> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInput, TKey> inputStream, IPartitionedStreamRecipient`1<TIntermediate> recipient, bool preferStriping, QuerySettings settings)
  IEnumerable`1<TIntermediate> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.ConcatQueryOperator`1
Наследуется от: BinaryQueryOperator`3<TSource, TSource, TSource>
Поля:
  bool _prematureMergeLeft
  bool _prematureMergeRight
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(ParallelQuery`1<TSource> firstChild, ParallelQuery`1<TSource> secondChild)
  QueryResults`1<TSource> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TSource, TLeftKey> leftStream, PartitionedStream`2<TSource, TRightKey> rightStream, IPartitionedStreamRecipient`1<TSource> outputRecipient, bool preferStriping, QuerySettings settings)
  void WrapHelper(PartitionedStream`2<TSource, TLeftKey> leftStreamInc, PartitionedStream`2<TSource, TRightKey> rightStream, IPartitionedStreamRecipient`1<TSource> outputRecipient, QuerySettings settings, bool preferStriping)
  void WrapHelper2(PartitionedStream`2<TSource, TLeftKey> leftStreamInc, PartitionedStream`2<TSource, TRightKey> rightStreamInc, IPartitionedStreamRecipient`1<TSource> outputRecipient)
  IEnumerable`1<TSource> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.ConcatKey`2
Наследуется от: ValueType
Поля:
  TLeftKey _leftKey
  TRightKey _rightKey
  bool _isLeft
Свойства:
Методы:
  void .ctor(TLeftKey leftKey, TRightKey rightKey, bool isLeft)
  ConcatKey`2<TLeftKey, TRightKey> MakeLeft(TLeftKey leftKey)
  ConcatKey`2<TLeftKey, TRightKey> MakeRight(TRightKey rightKey)
  IComparer`1<ConcatKey`2<TLeftKey, TRightKey>> MakeComparer(IComparer`1<TLeftKey> leftComparer, IComparer`1<TRightKey> rightComparer)
--------------------------------------------------
Класс: System.Linq.Parallel.ExceptQueryOperator`1
Наследуется от: BinaryQueryOperator`3<TInputOutput, TInputOutput, TInputOutput>
Поля:
  IEqualityComparer`1<TInputOutput> _comparer
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(ParallelQuery`1<TInputOutput> left, ParallelQuery`1<TInputOutput> right, IEqualityComparer`1<TInputOutput> comparer)
  QueryResults`1<TInputOutput> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInputOutput, TLeftKey> leftStream, PartitionedStream`2<TInputOutput, TRightKey> rightStream, IPartitionedStreamRecipient`1<TInputOutput> outputRecipient, bool preferStriping, QuerySettings settings)
  void WrapPartitionedStreamHelper(PartitionedStream`2<Pair`2<TInputOutput, NoKeyMemoizationRequired>, TLeftKey> leftHashStream, PartitionedStream`2<TInputOutput, TRightKey> rightPartitionedStream, IPartitionedStreamRecipient`1<TInputOutput> outputRecipient, CancellationToken cancellationToken)
  IEnumerable`1<TInputOutput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.GroupJoinQueryOperator`4
Наследуется от: BinaryQueryOperator`3<TLeftInput, TRightInput, TOutput>
Поля:
  Func`2<TLeftInput, TKey> _leftKeySelector
  Func`2<TRightInput, TKey> _rightKeySelector
  Func`3<TLeftInput, IEnumerable`1<TRightInput>, TOutput> _resultSelector
  IEqualityComparer`1<TKey> _keyComparer
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(ParallelQuery`1<TLeftInput> left, ParallelQuery`1<TRightInput> right, Func`2<TLeftInput, TKey> leftKeySelector, Func`2<TRightInput, TKey> rightKeySelector, Func`3<TLeftInput, IEnumerable`1<TRightInput>, TOutput> resultSelector, IEqualityComparer`1<TKey> keyComparer)
  QueryResults`1<TOutput> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TLeftInput, TLeftKey> leftStream, PartitionedStream`2<TRightInput, TRightKey> rightStream, IPartitionedStreamRecipient`1<TOutput> outputRecipient, bool preferStriping, QuerySettings settings)
  void WrapPartitionedStreamHelper(PartitionedStream`2<Pair`2<TLeftInput, TKey>, TLeftKey> leftHashStream, PartitionedStream`2<TRightInput, TRightKey> rightPartitionedStream, IPartitionedStreamRecipient`1<TOutput> outputRecipient, int partitionCount, CancellationToken cancellationToken)
  IEnumerable`1<TOutput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5
Наследуется от: QueryOperatorEnumerator`2<TOutput, TLeftKey>
Поля:
  QueryOperatorEnumerator`2<Pair`2<TLeftInput, THashKey>, TLeftKey> _leftSource
  QueryOperatorEnumerator`2<Pair`2<TRightInput, THashKey>, int> _rightSource
  Func`3<TLeftInput, TRightInput, TOutput> _singleResultSelector
  Func`3<TLeftInput, IEnumerable`1<TRightInput>, TOutput> _groupResultSelector
  IEqualityComparer`1<THashKey> _keyComparer
  CancellationToken _cancellationToken
  Mutables<TLeftInput, TLeftKey, TRightInput, THashKey, TOutput> _mutables
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<Pair`2<TLeftInput, THashKey>, TLeftKey> leftSource, QueryOperatorEnumerator`2<Pair`2<TRightInput, THashKey>, int> rightSource, Func`3<TLeftInput, TRightInput, TOutput> singleResultSelector, Func`3<TLeftInput, IEnumerable`1<TRightInput>, TOutput> groupResultSelector, IEqualityComparer`1<THashKey> keyComparer, CancellationToken cancellationToken)
  bool MoveNext(TOutput& currentElement, TLeftKey& currentKey)
  void Dispose(bool disposing)
--------------------------------------------------
Класс: System.Linq.Parallel.IntersectQueryOperator`1
Наследуется от: BinaryQueryOperator`3<TInputOutput, TInputOutput, TInputOutput>
Поля:
  IEqualityComparer`1<TInputOutput> _comparer
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(ParallelQuery`1<TInputOutput> left, ParallelQuery`1<TInputOutput> right, IEqualityComparer`1<TInputOutput> comparer)
  QueryResults`1<TInputOutput> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInputOutput, TLeftKey> leftPartitionedStream, PartitionedStream`2<TInputOutput, TRightKey> rightPartitionedStream, IPartitionedStreamRecipient`1<TInputOutput> outputRecipient, bool preferStriping, QuerySettings settings)
  void WrapPartitionedStreamHelper(PartitionedStream`2<Pair`2<TInputOutput, NoKeyMemoizationRequired>, TLeftKey> leftHashStream, PartitionedStream`2<TInputOutput, TRightKey> rightPartitionedStream, IPartitionedStreamRecipient`1<TInputOutput> outputRecipient, CancellationToken cancellationToken)
  bool get_LimitsParallelism()
  IEnumerable`1<TInputOutput> AsSequentialQuery(CancellationToken token)
--------------------------------------------------
Класс: System.Linq.Parallel.JoinQueryOperator`4
Наследуется от: BinaryQueryOperator`3<TLeftInput, TRightInput, TOutput>
Поля:
  Func`2<TLeftInput, TKey> _leftKeySelector
  Func`2<TRightInput, TKey> _rightKeySelector
  Func`3<TLeftInput, TRightInput, TOutput> _resultSelector
  IEqualityComparer`1<TKey> _keyComparer
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(ParallelQuery`1<TLeftInput> left, ParallelQuery`1<TRightInput> right, Func`2<TLeftInput, TKey> leftKeySelector, Func`2<TRightInput, TKey> rightKeySelector, Func`3<TLeftInput, TRightInput, TOutput> resultSelector, IEqualityComparer`1<TKey> keyComparer)
  void WrapPartitionedStream(PartitionedStream`2<TLeftInput, TLeftKey> leftStream, PartitionedStream`2<TRightInput, TRightKey> rightStream, IPartitionedStreamRecipient`1<TOutput> outputRecipient, bool preferStriping, QuerySettings settings)
  void WrapPartitionedStreamHelper(PartitionedStream`2<Pair`2<TLeftInput, TKey>, TLeftKey> leftHashStream, PartitionedStream`2<TRightInput, TRightKey> rightPartitionedStream, IPartitionedStreamRecipient`1<TOutput> outputRecipient, CancellationToken cancellationToken)
  QueryResults`1<TOutput> Open(QuerySettings settings, bool preferStriping)
  IEnumerable`1<TOutput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.UnionQueryOperator`1
Наследуется от: BinaryQueryOperator`3<TInputOutput, TInputOutput, TInputOutput>
Поля:
  IEqualityComparer`1<TInputOutput> _comparer
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(ParallelQuery`1<TInputOutput> left, ParallelQuery`1<TInputOutput> right, IEqualityComparer`1<TInputOutput> comparer)
  QueryResults`1<TInputOutput> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInputOutput, TLeftKey> leftStream, PartitionedStream`2<TInputOutput, TRightKey> rightStream, IPartitionedStreamRecipient`1<TInputOutput> outputRecipient, bool preferStriping, QuerySettings settings)
  void WrapPartitionedStreamFixedLeftType(PartitionedStream`2<Pair`2<TInputOutput, NoKeyMemoizationRequired>, TLeftKey> leftHashStream, PartitionedStream`2<TInputOutput, TRightKey> rightStream, IPartitionedStreamRecipient`1<TInputOutput> outputRecipient, int partitionCount, CancellationToken cancellationToken)
  void WrapPartitionedStreamFixedBothTypes(PartitionedStream`2<Pair`2<TInputOutput, NoKeyMemoizationRequired>, TLeftKey> leftHashStream, PartitionedStream`2<Pair`2<TInputOutput, NoKeyMemoizationRequired>, TRightKey> rightHashStream, IPartitionedStreamRecipient`1<TInputOutput> outputRecipient, int partitionCount, CancellationToken cancellationToken)
  IEnumerable`1<TInputOutput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.ZipQueryOperator`3
Наследуется от: QueryOperator`1<TOutput>
Поля:
  Func`3<TLeftInput, TRightInput, TOutput> _resultSelector
  QueryOperator`1<TLeftInput> _leftChild
  QueryOperator`1<TRightInput> _rightChild
  bool _prematureMergeLeft
  bool _prematureMergeRight
  bool _limitsParallelism
Свойства:
  OrdinalIndexState OrdinalIndexState
  bool LimitsParallelism
Методы:
  void .ctor(ParallelQuery`1<TLeftInput> leftChildSource, ParallelQuery`1<TRightInput> rightChildSource, Func`3<TLeftInput, TRightInput, TOutput> resultSelector)
  void .ctor(QueryOperator`1<TLeftInput> left, QueryOperator`1<TRightInput> right, Func`3<TLeftInput, TRightInput, TOutput> resultSelector)
  QueryResults`1<TOutput> Open(QuerySettings settings, bool preferStriping)
  IEnumerable`1<TOutput> AsSequentialQuery(CancellationToken token)
  OrdinalIndexState get_OrdinalIndexState()
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.BinaryQueryOperator`3
Наследуется от: QueryOperator`1<TOutput>
Поля:
  QueryOperator`1<TLeftInput> _leftChild
  QueryOperator`1<TRightInput> _rightChild
  OrdinalIndexState _indexState
Свойства:
  QueryOperator`1<TLeftInput> LeftChild
  QueryOperator`1<TRightInput> RightChild
  OrdinalIndexState OrdinalIndexState
Методы:
  void .ctor(ParallelQuery`1<TLeftInput> leftChild, ParallelQuery`1<TRightInput> rightChild)
  void .ctor(QueryOperator`1<TLeftInput> leftChild, QueryOperator`1<TRightInput> rightChild)
  QueryOperator`1<TLeftInput> get_LeftChild()
  QueryOperator`1<TRightInput> get_RightChild()
  OrdinalIndexState get_OrdinalIndexState()
  void SetOrdinalIndex(OrdinalIndexState indexState)
  void WrapPartitionedStream(PartitionedStream`2<TLeftInput, TLeftKey> leftPartitionedStream, PartitionedStream`2<TRightInput, TRightKey> rightPartitionedStream, IPartitionedStreamRecipient`1<TOutput> outputRecipient, bool preferStriping, QuerySettings settings)
--------------------------------------------------
Класс: System.Linq.Parallel.CountAggregationOperator`1
Наследуется от: InlinedAggregationOperator`3<TSource, int, int>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<TSource> child)
  int InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<int, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<TSource, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.DecimalAverageAggregationOperator
Наследуется от: InlinedAggregationOperator`3<decimal, Pair`2<decimal, long>, decimal>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<decimal> child)
  decimal InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Pair`2<decimal, long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<decimal, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.DecimalMinMaxAggregationOperator
Наследуется от: InlinedAggregationOperator`3<decimal, decimal, decimal>
Поля:
  int _sign
Свойства:
Методы:
  void .ctor(IEnumerable`1<decimal> child, int sign)
  decimal InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<decimal, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<decimal, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.DecimalSumAggregationOperator
Наследуется от: InlinedAggregationOperator`3<decimal, decimal, decimal>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<decimal> child)
  decimal InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<decimal, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<decimal, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.DoubleAverageAggregationOperator
Наследуется от: InlinedAggregationOperator`3<double, Pair`2<double, long>, double>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<double> child)
  double InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Pair`2<double, long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<double, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.DoubleMinMaxAggregationOperator
Наследуется от: InlinedAggregationOperator`3<double, double, double>
Поля:
  int _sign
Свойства:
Методы:
  void .ctor(IEnumerable`1<double> child, int sign)
  double InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<double, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<double, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.DoubleSumAggregationOperator
Наследуется от: InlinedAggregationOperator`3<double, double, double>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<double> child)
  double InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<double, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<double, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.FloatAverageAggregationOperator
Наследуется от: InlinedAggregationOperator`3<float, Pair`2<double, long>, float>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<float> child)
  float InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Pair`2<double, long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<float, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.FloatMinMaxAggregationOperator
Наследуется от: InlinedAggregationOperator`3<float, float, float>
Поля:
  int _sign
Свойства:
Методы:
  void .ctor(IEnumerable`1<float> child, int sign)
  float InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<float, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<float, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.FloatSumAggregationOperator
Наследуется от: InlinedAggregationOperator`3<float, double, float>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<float> child)
  float InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<double, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<float, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.InlinedAggregationOperator`3
Наследуется от: UnaryQueryOperator`2<TSource, TIntermediate>
Поля:
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TSource> child)
  TResult Aggregate()
  TResult InternalAggregate(Exception& singularExceptionToThrow)
  QueryResults`1<TIntermediate> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TSource, TKey> inputStream, IPartitionedStreamRecipient`1<TIntermediate> recipient, bool preferStriping, QuerySettings settings)
  QueryOperatorEnumerator`2<TIntermediate, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<TSource, TKey> source, object sharedData, CancellationToken cancellationToken)
  IEnumerable`1<TIntermediate> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1
Наследуется от: QueryOperatorEnumerator`2<TIntermediate, int>
Поля:
  int _partitionIndex
  bool _done
  CancellationToken _cancellationToken
Свойства:
Методы:
  void .ctor(int partitionIndex, CancellationToken cancellationToken)
  bool MoveNext(TIntermediate& currentElement, Int32& currentKey)
  bool MoveNextCore(TIntermediate& currentElement)
--------------------------------------------------
Класс: System.Linq.Parallel.IntAverageAggregationOperator
Наследуется от: InlinedAggregationOperator`3<int, Pair`2<long, long>, double>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<int> child)
  double InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Pair`2<long, long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<int, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.IntMinMaxAggregationOperator
Наследуется от: InlinedAggregationOperator`3<int, int, int>
Поля:
  int _sign
Свойства:
Методы:
  void .ctor(IEnumerable`1<int> child, int sign)
  int InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<int, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<int, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.IntSumAggregationOperator
Наследуется от: InlinedAggregationOperator`3<int, int, int>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<int> child)
  int InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<int, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<int, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.LongAverageAggregationOperator
Наследуется от: InlinedAggregationOperator`3<long, Pair`2<long, long>, double>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<long> child)
  double InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Pair`2<long, long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<long, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.LongCountAggregationOperator`1
Наследуется от: InlinedAggregationOperator`3<TSource, long, long>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<TSource> child)
  long InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<long, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<TSource, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.LongMinMaxAggregationOperator
Наследуется от: InlinedAggregationOperator`3<long, long, long>
Поля:
  int _sign
Свойства:
Методы:
  void .ctor(IEnumerable`1<long> child, int sign)
  long InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<long, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<long, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.LongSumAggregationOperator
Наследуется от: InlinedAggregationOperator`3<long, long, long>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<long> child)
  long InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<long, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<long, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableDecimalAverageAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<decimal>, Pair`2<decimal, long>, Nullable`1<decimal>>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<decimal>> child)
  Nullable`1<decimal> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Pair`2<decimal, long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<decimal>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<decimal>, Nullable`1<decimal>, Nullable`1<decimal>>
Поля:
  int _sign
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<decimal>> child, int sign)
  Nullable`1<decimal> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Nullable`1<decimal>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<decimal>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableDecimalSumAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<decimal>, Nullable`1<decimal>, Nullable`1<decimal>>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<decimal>> child)
  Nullable`1<decimal> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Nullable`1<decimal>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<decimal>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableDoubleAverageAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<double>, Pair`2<double, long>, Nullable`1<double>>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<double>> child)
  Nullable`1<double> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Pair`2<double, long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<double>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<double>, Nullable`1<double>, Nullable`1<double>>
Поля:
  int _sign
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<double>> child, int sign)
  Nullable`1<double> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Nullable`1<double>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<double>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableDoubleSumAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<double>, Nullable`1<double>, Nullable`1<double>>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<double>> child)
  Nullable`1<double> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Nullable`1<double>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<double>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableFloatAverageAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<float>, Pair`2<double, long>, Nullable`1<float>>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<float>> child)
  Nullable`1<float> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Pair`2<double, long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<float>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableFloatMinMaxAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<float>, Nullable`1<float>, Nullable`1<float>>
Поля:
  int _sign
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<float>> child, int sign)
  Nullable`1<float> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Nullable`1<float>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<float>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableFloatSumAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<float>, Nullable`1<double>, Nullable`1<float>>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<float>> child)
  Nullable`1<float> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Nullable`1<double>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<float>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableIntAverageAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<int>, Pair`2<long, long>, Nullable`1<double>>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<int>> child)
  Nullable`1<double> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Pair`2<long, long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<int>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableIntMinMaxAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<int>, Nullable`1<int>, Nullable`1<int>>
Поля:
  int _sign
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<int>> child, int sign)
  Nullable`1<int> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Nullable`1<int>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<int>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableIntSumAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<int>, Nullable`1<int>, Nullable`1<int>>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<int>> child)
  Nullable`1<int> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Nullable`1<int>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<int>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableLongAverageAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<long>, Pair`2<long, long>, Nullable`1<double>>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<long>> child)
  Nullable`1<double> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Pair`2<long, long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<long>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableLongMinMaxAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<long>, Nullable`1<long>, Nullable`1<long>>
Поля:
  int _sign
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<long>> child, int sign)
  Nullable`1<long> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Nullable`1<long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<long>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.NullableLongSumAggregationOperator
Наследуется от: InlinedAggregationOperator`3<Nullable`1<long>, Nullable`1<long>, Nullable`1<long>>
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<Nullable`1<long>> child)
  Nullable`1<long> InternalAggregate(Exception& singularExceptionToThrow)
  QueryOperatorEnumerator`2<Nullable`1<long>, int> CreateEnumerator(int index, int count, QueryOperatorEnumerator`2<Nullable`1<long>, TKey> source, object sharedData, CancellationToken cancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.ListQueryResults`1
Наследуется от: QueryResults`1<T>
Поля:
  IList`1<T> _source
  int _partitionCount
  bool _useStriping
Свойства:
  bool IsIndexible
  int ElementsCount
Методы:
  void .ctor(IList`1<T> source, int partitionCount, bool useStriping)
  void GivePartitionedStream(IPartitionedStreamRecipient`1<T> recipient)
  bool get_IsIndexible()
  int get_ElementsCount()
  T GetElement(int index)
  PartitionedStream`2<T, int> GetPartitionedStream()
--------------------------------------------------
Класс: System.Linq.Parallel.OrderingQueryOperator`1
Наследуется от: QueryOperator`1<TSource>
Поля:
  QueryOperator`1<TSource> _child
  OrdinalIndexState _ordinalIndexState
Свойства:
  bool LimitsParallelism
  OrdinalIndexState OrdinalIndexState
Методы:
  void .ctor(QueryOperator`1<TSource> child, bool orderOn)
  QueryResults`1<TSource> Open(QuerySettings settings, bool preferStriping)
  IEnumerator`1<TSource> GetEnumerator(Nullable`1<ParallelMergeOptions> mergeOptions, bool suppressOrderPreservation)
  IEnumerable`1<TSource> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
  OrdinalIndexState get_OrdinalIndexState()
--------------------------------------------------
Класс: System.Linq.Parallel.QueryExecutionOption`1
Наследуется от: QueryOperator`1<TSource>
Поля:
  QueryOperator`1<TSource> _child
  OrdinalIndexState _indexState
Свойства:
  OrdinalIndexState OrdinalIndexState
  bool LimitsParallelism
Методы:
  void .ctor(QueryOperator`1<TSource> source, QuerySettings settings)
  QueryResults`1<TSource> Open(QuerySettings settings, bool preferStriping)
  IEnumerable`1<TSource> AsSequentialQuery(CancellationToken token)
  OrdinalIndexState get_OrdinalIndexState()
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.OrdinalIndexState
Наследуется от: Enum
Поля:
  byte value__
  OrdinalIndexState Indexable
  OrdinalIndexState Correct
  OrdinalIndexState Increasing
  OrdinalIndexState Shuffled
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.Parallel.PartitionedStreamMerger`1
Наследуется от: object
Поля:
  bool _forEffectMerge
  ParallelMergeOptions _mergeOptions
  bool _isOrdered
  MergeExecutor`1<TOutput> _mergeExecutor
  TaskScheduler _taskScheduler
  int _queryId
  CancellationState _cancellationState
Свойства:
  MergeExecutor`1<TOutput> MergeExecutor
Методы:
  MergeExecutor`1<TOutput> get_MergeExecutor()
  void .ctor(bool forEffectMerge, ParallelMergeOptions mergeOptions, TaskScheduler taskScheduler, bool outputOrdered, CancellationState cancellationState, int queryId)
  void Receive(PartitionedStream`2<TOutput, TKey> partitionedStream)
--------------------------------------------------
Класс: System.Linq.Parallel.PartitionerQueryOperator`1
Наследуется от: QueryOperator`1<TElement>
Поля:
  Partitioner`1<TElement> _partitioner
Свойства:
  bool Orderable
  OrdinalIndexState OrdinalIndexState
  bool LimitsParallelism
Методы:
  void .ctor(Partitioner`1<TElement> partitioner)
  bool get_Orderable()
  QueryResults`1<TElement> Open(QuerySettings settings, bool preferStriping)
  IEnumerable`1<TElement> AsSequentialQuery(CancellationToken token)
  OrdinalIndexState get_OrdinalIndexState()
  OrdinalIndexState GetOrdinalIndexState(Partitioner`1<TElement> partitioner)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.QueryOpeningEnumerator`1
Наследуется от: object
Поля:
  QueryOperator`1<TOutput> _queryOperator
  IEnumerator`1<TOutput> _openedQueryEnumerator
  QuerySettings _querySettings
  Nullable`1<ParallelMergeOptions> _mergeOptions
  bool _suppressOrderPreservation
  int _moveNextIteration
  bool _hasQueryOpeningFailed
  Shared`1<bool> _topLevelDisposedFlag
  CancellationTokenSource _topLevelCancellationTokenSource
Свойства:
  TOutput Current
  object System.Collections.IEnumerator.Current
Методы:
  void .ctor(QueryOperator`1<TOutput> queryOperator, Nullable`1<ParallelMergeOptions> mergeOptions, bool suppressOrderPreservation)
  TOutput get_Current()
  void Dispose()
  object System.Collections.IEnumerator.get_Current()
  bool MoveNext()
  void OpenQuery()
  void Reset()
--------------------------------------------------
Класс: System.Linq.Parallel.QueryOperator`1
Наследуется от: ParallelQuery`1<TOutput>
Поля:
  bool _outputOrdered
Свойства:
  bool OutputOrdered
  bool LimitsParallelism
  OrdinalIndexState OrdinalIndexState
Методы:
  void .ctor(QuerySettings settings)
  void .ctor(bool isOrdered, QuerySettings settings)
  QueryResults`1<TOutput> Open(QuerySettings settings, bool preferStriping)
  IEnumerator`1<TOutput> GetEnumerator()
  IEnumerator`1<TOutput> GetEnumerator(Nullable`1<ParallelMergeOptions> mergeOptions)
  bool get_OutputOrdered()
  IEnumerator`1<TOutput> GetEnumerator(Nullable`1<ParallelMergeOptions> mergeOptions, bool suppressOrderPreservation)
  IEnumerator`1<TOutput> GetOpenedEnumerator(Nullable`1<ParallelMergeOptions> mergeOptions, bool suppressOrder, bool forEffect, QuerySettings querySettings)
  QueryResults`1<TOutput> GetQueryResults(QuerySettings querySettings)
  TOutput[] ExecuteAndGetResultsAsArray()
  IEnumerable`1<TOutput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
  OrdinalIndexState get_OrdinalIndexState()
  ListQueryResults`1<TOutput> ExecuteAndCollectResults(PartitionedStream`2<TOutput, TKey> openedChild, int partitionCount, bool outputOrdered, bool useStriping, QuerySettings settings)
  QueryOperator`1<TOutput> AsQueryOperator(IEnumerable`1<TOutput> source)
--------------------------------------------------
Класс: System.Linq.Parallel.QueryOperatorEnumerator`2
Наследуется от: object
Поля:
Свойства:
Методы:
  bool MoveNext(TElement& currentElement, TKey& currentKey)
  void Dispose()
  void Dispose(bool disposing)
  void Reset()
  IEnumerator`1<TElement> AsClassicEnumerator()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Parallel.QueryResults`1
Наследуется от: object
Поля:
Свойства:
  bool IsIndexible
  int ElementsCount
  T Item
  int Count
  bool System.Collections.Generic.ICollection<T>.IsReadOnly
Методы:
  void GivePartitionedStream(IPartitionedStreamRecipient`1<T> recipient)
  bool get_IsIndexible()
  T GetElement(int index)
  int get_ElementsCount()
  int System.Collections.Generic.IList<T>.IndexOf(T item)
  void System.Collections.Generic.IList<T>.Insert(int index, T item)
  void System.Collections.Generic.IList<T>.RemoveAt(int index)
  T get_Item(int index)
  void set_Item(int index, T value)
  void System.Collections.Generic.ICollection<T>.Add(T item)
  void System.Collections.Generic.ICollection<T>.Clear()
  bool System.Collections.Generic.ICollection<T>.Contains(T item)
  void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex)
  int get_Count()
  bool System.Collections.Generic.ICollection<T>.get_IsReadOnly()
  bool System.Collections.Generic.ICollection<T>.Remove(T item)
  IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Parallel.QuerySettings
Наследуется от: ValueType
Поля:
  TaskScheduler _taskScheduler
  Nullable`1<int> _degreeOfParallelism
  CancellationState _cancellationState
  Nullable`1<ParallelExecutionMode> _executionMode
  Nullable`1<ParallelMergeOptions> _mergeOptions
  int _queryId
Свойства:
  CancellationState CancellationState
  TaskScheduler TaskScheduler
  Nullable`1<int> DegreeOfParallelism
  Nullable`1<ParallelExecutionMode> ExecutionMode
  Nullable`1<ParallelMergeOptions> MergeOptions
  int QueryId
  QuerySettings Empty
Методы:
  CancellationState get_CancellationState()
  void set_CancellationState(CancellationState value)
  TaskScheduler get_TaskScheduler()
  void set_TaskScheduler(TaskScheduler value)
  Nullable`1<int> get_DegreeOfParallelism()
  void set_DegreeOfParallelism(Nullable`1<int> value)
  Nullable`1<ParallelExecutionMode> get_ExecutionMode()
  void set_ExecutionMode(Nullable`1<ParallelExecutionMode> value)
  Nullable`1<ParallelMergeOptions> get_MergeOptions()
  void set_MergeOptions(Nullable`1<ParallelMergeOptions> value)
  int get_QueryId()
  void .ctor(TaskScheduler taskScheduler, Nullable`1<int> degreeOfParallelism, CancellationToken externalCancellationToken, Nullable`1<ParallelExecutionMode> executionMode, Nullable`1<ParallelMergeOptions> mergeOptions)
  QuerySettings Merge(QuerySettings settings2)
  QuerySettings WithPerExecutionSettings()
  QuerySettings WithPerExecutionSettings(CancellationTokenSource topLevelCancellationTokenSource, Shared`1<bool> topLevelDisposedFlag)
  QuerySettings WithDefaults()
  QuerySettings get_Empty()
  void CleanStateAtQueryEnd()
--------------------------------------------------
Класс: System.Linq.Parallel.ScanQueryOperator`1
Наследуется от: QueryOperator`1<TElement>
Поля:
  IEnumerable`1<TElement> _data
Свойства:
  IEnumerable`1<TElement> Data
  OrdinalIndexState OrdinalIndexState
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TElement> data)
  IEnumerable`1<TElement> get_Data()
  QueryResults`1<TElement> Open(QuerySettings settings, bool preferStriping)
  IEnumerator`1<TElement> GetEnumerator(Nullable`1<ParallelMergeOptions> mergeOptions, bool suppressOrderPreservation)
  IEnumerable`1<TElement> AsSequentialQuery(CancellationToken token)
  OrdinalIndexState get_OrdinalIndexState()
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.AnyAllSearchOperator`1
Наследуется от: UnaryQueryOperator`2<TInput, bool>
Поля:
  Func`2<TInput, bool> _predicate
  bool _qualification
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TInput> child, bool qualification, Func`2<TInput, bool> predicate)
  bool Aggregate()
  QueryResults`1<bool> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInput, TKey> inputStream, IPartitionedStreamRecipient`1<bool> recipient, bool preferStriping, QuerySettings settings)
  IEnumerable`1<bool> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.ContainsSearchOperator`1
Наследуется от: UnaryQueryOperator`2<TInput, bool>
Поля:
  TInput _searchValue
  IEqualityComparer`1<TInput> _comparer
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TInput> child, TInput searchValue, IEqualityComparer`1<TInput> comparer)
  bool Aggregate()
  QueryResults`1<bool> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInput, TKey> inputStream, IPartitionedStreamRecipient`1<bool> recipient, bool preferStriping, QuerySettings settings)
  IEnumerable`1<bool> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.DefaultIfEmptyQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TSource, TSource>
Поля:
  TSource _defaultValue
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TSource> child, TSource defaultValue)
  QueryResults`1<TSource> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TSource, TKey> inputStream, IPartitionedStreamRecipient`1<TSource> recipient, bool preferStriping, QuerySettings settings)
  IEnumerable`1<TSource> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.DistinctQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TInputOutput, TInputOutput>
Поля:
  IEqualityComparer`1<TInputOutput> _comparer
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TInputOutput> source, IEqualityComparer`1<TInputOutput> comparer)
  QueryResults`1<TInputOutput> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInputOutput, TKey> inputStream, IPartitionedStreamRecipient`1<TInputOutput> recipient, bool preferStriping, QuerySettings settings)
  void WrapPartitionedStreamHelper(PartitionedStream`2<Pair`2<TInputOutput, NoKeyMemoizationRequired>, TKey> hashStream, IPartitionedStreamRecipient`1<TInputOutput> recipient, CancellationToken cancellationToken)
  bool get_LimitsParallelism()
  IEnumerable`1<TInputOutput> AsSequentialQuery(CancellationToken token)
--------------------------------------------------
Класс: System.Linq.Parallel.ElementAtQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TSource, TSource>
Поля:
  int _index
  bool _prematureMerge
  bool _limitsParallelism
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TSource> child, int index)
  QueryResults`1<TSource> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TSource, TKey> inputStream, IPartitionedStreamRecipient`1<TSource> recipient, bool preferStriping, QuerySettings settings)
  IEnumerable`1<TSource> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
  bool Aggregate(TSource& result, bool withDefaultValue)
--------------------------------------------------
Класс: System.Linq.Parallel.FirstQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TSource, TSource>
Поля:
  Func`2<TSource, bool> _predicate
  bool _prematureMergeNeeded
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TSource> child, Func`2<TSource, bool> predicate)
  QueryResults`1<TSource> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TSource, TKey> inputStream, IPartitionedStreamRecipient`1<TSource> recipient, bool preferStriping, QuerySettings settings)
  void WrapHelper(PartitionedStream`2<TSource, TKey> inputStream, IPartitionedStreamRecipient`1<TSource> recipient, QuerySettings settings)
  IEnumerable`1<TSource> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.ForAllOperator`1
Наследуется от: UnaryQueryOperator`2<TInput, TInput>
Поля:
  Action`1<TInput> _elementAction
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TInput> child, Action`1<TInput> elementAction)
  void RunSynchronously()
  QueryResults`1<TInput> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInput, TKey> inputStream, IPartitionedStreamRecipient`1<TInput> recipient, bool preferStriping, QuerySettings settings)
  IEnumerable`1<TInput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.GroupByQueryOperator`3
Наследуется от: UnaryQueryOperator`2<TSource, IGrouping`2<TGroupKey, TElement>>
Поля:
  Func`2<TSource, TGroupKey> _keySelector
  Func`2<TSource, TElement> _elementSelector
  IEqualityComparer`1<TGroupKey> _keyComparer
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TSource> child, Func`2<TSource, TGroupKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TGroupKey> keyComparer)
  void WrapPartitionedStream(PartitionedStream`2<TSource, TKey> inputStream, IPartitionedStreamRecipient`1<IGrouping`2<TGroupKey, TElement>> recipient, bool preferStriping, QuerySettings settings)
  void WrapPartitionedStreamHelper(PartitionedStream`2<Pair`2<TSource, TGroupKey>, TKey> hashStream, IPartitionedStreamRecipient`1<IGrouping`2<TGroupKey, TElement>> recipient, CancellationToken cancellationToken)
  void WrapPartitionedStreamHelperOrdered(PartitionedStream`2<Pair`2<TSource, TGroupKey>, TKey> hashStream, IPartitionedStreamRecipient`1<IGrouping`2<TGroupKey, TElement>> recipient, CancellationToken cancellationToken)
  QueryResults`1<IGrouping`2<TGroupKey, TElement>> Open(QuerySettings settings, bool preferStriping)
  IEnumerable`1<IGrouping`2<TGroupKey, TElement>> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.GroupByQueryOperatorEnumerator`4
Наследуется от: QueryOperatorEnumerator`2<IGrouping`2<TGroupKey, TElement>, TOrderKey>
Поля:
  QueryOperatorEnumerator`2<Pair`2<TSource, TGroupKey>, TOrderKey> _source
  IEqualityComparer`1<TGroupKey> _keyComparer
  CancellationToken _cancellationToken
  Mutables<TSource, TGroupKey, TElement, TOrderKey> _mutables
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<Pair`2<TSource, TGroupKey>, TOrderKey> source, IEqualityComparer`1<TGroupKey> keyComparer, CancellationToken cancellationToken)
  bool MoveNext(IGrouping`2& currentElement, TOrderKey& currentKey)
  HashLookup`2<Wrapper`1<TGroupKey>, ListChunk`1<TElement>> BuildHashLookup()
  void Dispose(bool disposing)
--------------------------------------------------
Класс: System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3
Наследуется от: GroupByQueryOperatorEnumerator`4<TSource, TGroupKey, TSource, TOrderKey>
Поля:
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<Pair`2<TSource, TGroupKey>, TOrderKey> source, IEqualityComparer`1<TGroupKey> keyComparer, CancellationToken cancellationToken)
  HashLookup`2<Wrapper`1<TGroupKey>, ListChunk`1<TSource>> BuildHashLookup()
--------------------------------------------------
Класс: System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4
Наследуется от: GroupByQueryOperatorEnumerator`4<TSource, TGroupKey, TElement, TOrderKey>
Поля:
  Func`2<TSource, TElement> _elementSelector
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<Pair`2<TSource, TGroupKey>, TOrderKey> source, IEqualityComparer`1<TGroupKey> keyComparer, Func`2<TSource, TElement> elementSelector, CancellationToken cancellationToken)
  HashLookup`2<Wrapper`1<TGroupKey>, ListChunk`1<TElement>> BuildHashLookup()
--------------------------------------------------
Класс: System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4
Наследуется от: QueryOperatorEnumerator`2<IGrouping`2<TGroupKey, TElement>, TOrderKey>
Поля:
  QueryOperatorEnumerator`2<Pair`2<TSource, TGroupKey>, TOrderKey> _source
  Func`2<TSource, TGroupKey> _keySelector
  IEqualityComparer`1<TGroupKey> _keyComparer
  IComparer`1<TOrderKey> _orderComparer
  CancellationToken _cancellationToken
  Mutables<TSource, TGroupKey, TElement, TOrderKey> _mutables
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<Pair`2<TSource, TGroupKey>, TOrderKey> source, Func`2<TSource, TGroupKey> keySelector, IEqualityComparer`1<TGroupKey> keyComparer, IComparer`1<TOrderKey> orderComparer, CancellationToken cancellationToken)
  bool MoveNext(IGrouping`2& currentElement, TOrderKey& currentKey)
  HashLookup`2<Wrapper`1<TGroupKey>, GroupKeyData<TSource, TGroupKey, TElement, TOrderKey>> BuildHashLookup()
  void Dispose(bool disposing)
--------------------------------------------------
Класс: System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3
Наследуется от: OrderedGroupByQueryOperatorEnumerator`4<TSource, TGroupKey, TSource, TOrderKey>
Поля:
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<Pair`2<TSource, TGroupKey>, TOrderKey> source, Func`2<TSource, TGroupKey> keySelector, IEqualityComparer`1<TGroupKey> keyComparer, IComparer`1<TOrderKey> orderComparer, CancellationToken cancellationToken)
  HashLookup`2<Wrapper`1<TGroupKey>, GroupKeyData<TSource, TGroupKey, TSource, TOrderKey>> BuildHashLookup()
--------------------------------------------------
Класс: System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4
Наследуется от: OrderedGroupByQueryOperatorEnumerator`4<TSource, TGroupKey, TElement, TOrderKey>
Поля:
  Func`2<TSource, TElement> _elementSelector
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<Pair`2<TSource, TGroupKey>, TOrderKey> source, Func`2<TSource, TGroupKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TGroupKey> keyComparer, IComparer`1<TOrderKey> orderComparer, CancellationToken cancellationToken)
  HashLookup`2<Wrapper`1<TGroupKey>, GroupKeyData<TSource, TGroupKey, TElement, TOrderKey>> BuildHashLookup()
--------------------------------------------------
Класс: System.Linq.Parallel.GroupByGrouping`2
Наследуется от: object
Поля:
  KeyValuePair`2<Wrapper`1<TGroupKey>, ListChunk`1<TElement>> _keyValues
Свойства:
  TGroupKey System.Linq.IGrouping<TGroupKey,TElement>.Key
Методы:
  void .ctor(KeyValuePair`2<Wrapper`1<TGroupKey>, ListChunk`1<TElement>> keyValues)
  TGroupKey System.Linq.IGrouping<TGroupKey,TElement>.get_Key()
  IEnumerator`1<TElement> System.Collections.Generic.IEnumerable<TElement>.GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Parallel.OrderedGroupByGrouping`3
Наследуется от: object
Поля:
  TGroupKey _groupKey
  GrowingArray`1<TElement> _values
  GrowingArray`1<TOrderKey> _orderKeys
  IComparer`1<TOrderKey> _orderComparer
  KeyAndValuesComparer<TGroupKey, TOrderKey, TElement> _wrappedComparer
Свойства:
  TGroupKey System.Linq.IGrouping<TGroupKey,TElement>.Key
Методы:
  void .ctor(TGroupKey groupKey, IComparer`1<TOrderKey> orderComparer)
  TGroupKey System.Linq.IGrouping<TGroupKey,TElement>.get_Key()
  IEnumerator`1<TElement> System.Collections.Generic.IEnumerable<TElement>.GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  void Add(TElement value, TOrderKey orderKey)
  void DoneAdding()
--------------------------------------------------
Класс: System.Linq.Parallel.IndexedSelectQueryOperator`2
Наследуется от: UnaryQueryOperator`2<TInput, TOutput>
Поля:
  Func`3<TInput, int, TOutput> _selector
  bool _prematureMerge
  bool _limitsParallelism
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TInput> child, Func`3<TInput, int, TOutput> selector)
  void InitOrdinalIndexState()
  QueryResults`1<TOutput> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInput, TKey> inputStream, IPartitionedStreamRecipient`1<TOutput> recipient, bool preferStriping, QuerySettings settings)
  bool get_LimitsParallelism()
  IEnumerable`1<TOutput> AsSequentialQuery(CancellationToken token)
--------------------------------------------------
Класс: System.Linq.Parallel.IndexedWhereQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TInputOutput, TInputOutput>
Поля:
  Func`3<TInputOutput, int, bool> _predicate
  bool _prematureMerge
  bool _limitsParallelism
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TInputOutput> child, Func`3<TInputOutput, int, bool> predicate)
  void InitOrdinalIndexState()
  QueryResults`1<TInputOutput> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInputOutput, TKey> inputStream, IPartitionedStreamRecipient`1<TInputOutput> recipient, bool preferStriping, QuerySettings settings)
  IEnumerable`1<TInputOutput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.LastQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TSource, TSource>
Поля:
  Func`2<TSource, bool> _predicate
  bool _prematureMergeNeeded
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TSource> child, Func`2<TSource, bool> predicate)
  QueryResults`1<TSource> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TSource, TKey> inputStream, IPartitionedStreamRecipient`1<TSource> recipient, bool preferStriping, QuerySettings settings)
  void WrapHelper(PartitionedStream`2<TSource, TKey> inputStream, IPartitionedStreamRecipient`1<TSource> recipient, QuerySettings settings)
  IEnumerable`1<TSource> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.ReverseQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TSource, TSource>
Поля:
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TSource> child)
  void WrapPartitionedStream(PartitionedStream`2<TSource, TKey> inputStream, IPartitionedStreamRecipient`1<TSource> recipient, bool preferStriping, QuerySettings settings)
  QueryResults`1<TSource> Open(QuerySettings settings, bool preferStriping)
  IEnumerable`1<TSource> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.SelectManyQueryOperator`3
Наследуется от: UnaryQueryOperator`2<TLeftInput, TOutput>
Поля:
  Func`2<TLeftInput, IEnumerable`1<TRightInput>> _rightChildSelector
  Func`3<TLeftInput, int, IEnumerable`1<TRightInput>> _indexedRightChildSelector
  Func`3<TLeftInput, TRightInput, TOutput> _resultSelector
  bool _prematureMerge
  bool _limitsParallelism
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TLeftInput> leftChild, Func`2<TLeftInput, IEnumerable`1<TRightInput>> rightChildSelector, Func`3<TLeftInput, int, IEnumerable`1<TRightInput>> indexedRightChildSelector, Func`3<TLeftInput, TRightInput, TOutput> resultSelector)
  void InitOrderIndex()
  void WrapPartitionedStream(PartitionedStream`2<TLeftInput, TLeftKey> inputStream, IPartitionedStreamRecipient`1<TOutput> recipient, bool preferStriping, QuerySettings settings)
  void WrapPartitionedStreamNotIndexed(PartitionedStream`2<TLeftInput, TLeftKey> inputStream, IPartitionedStreamRecipient`1<TOutput> recipient, QuerySettings settings)
  void WrapPartitionedStreamIndexed(PartitionedStream`2<TLeftInput, int> inputStream, IPartitionedStreamRecipient`1<TOutput> recipient, QuerySettings settings)
  QueryResults`1<TOutput> Open(QuerySettings settings, bool preferStriping)
  IEnumerable`1<TOutput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.SelectQueryOperator`2
Наследуется от: UnaryQueryOperator`2<TInput, TOutput>
Поля:
  Func`2<TInput, TOutput> _selector
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TInput> child, Func`2<TInput, TOutput> selector)
  void WrapPartitionedStream(PartitionedStream`2<TInput, TKey> inputStream, IPartitionedStreamRecipient`1<TOutput> recipient, bool preferStriping, QuerySettings settings)
  QueryResults`1<TOutput> Open(QuerySettings settings, bool preferStriping)
  IEnumerable`1<TOutput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.SingleQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TSource, TSource>
Поля:
  Func`2<TSource, bool> _predicate
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TSource> child, Func`2<TSource, bool> predicate)
  QueryResults`1<TSource> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TSource, TKey> inputStream, IPartitionedStreamRecipient`1<TSource> recipient, bool preferStriping, QuerySettings settings)
  IEnumerable`1<TSource> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.SortQueryOperator`2
Наследуется от: UnaryQueryOperator`2<TInputOutput, TInputOutput>
Поля:
  Func`2<TInputOutput, TSortKey> _keySelector
  IComparer`1<TSortKey> _comparer
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TInputOutput> source, Func`2<TInputOutput, TSortKey> keySelector, IComparer`1<TSortKey> comparer, bool descending)
  IOrderedEnumerable`1<TInputOutput> System.Linq.IOrderedEnumerable<TInputOutput>.CreateOrderedEnumerable(Func`2<TInputOutput, TKey2> key2Selector, IComparer`1<TKey2> key2Comparer, bool descending)
  QueryResults`1<TInputOutput> Open(QuerySettings settings, bool preferStriping)
  void WrapPartitionedStream(PartitionedStream`2<TInputOutput, TKey> inputStream, IPartitionedStreamRecipient`1<TInputOutput> recipient, bool preferStriping, QuerySettings settings)
  IEnumerable`1<TInputOutput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.SortQueryOperatorResults`2
Наследуется от: QueryResults`1<TInputOutput>
Поля:
  QueryResults`1<TInputOutput> _childQueryResults
  SortQueryOperator`2<TInputOutput, TSortKey> _op
  QuerySettings _settings
Свойства:
  bool IsIndexible
Методы:
  void .ctor(QueryResults`1<TInputOutput> childQueryResults, SortQueryOperator`2<TInputOutput, TSortKey> op, QuerySettings settings)
  bool get_IsIndexible()
  void GivePartitionedStream(IPartitionedStreamRecipient`1<TInputOutput> recipient)
--------------------------------------------------
Класс: System.Linq.Parallel.SortQueryOperatorEnumerator`3
Наследуется от: QueryOperatorEnumerator`2<TInputOutput, TSortKey>
Поля:
  QueryOperatorEnumerator`2<TInputOutput, TKey> _source
  Func`2<TInputOutput, TSortKey> _keySelector
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<TInputOutput, TKey> source, Func`2<TInputOutput, TSortKey> keySelector)
  bool MoveNext(TInputOutput& currentElement, TSortKey& currentKey)
  void Dispose(bool disposing)
--------------------------------------------------
Класс: System.Linq.Parallel.TakeOrSkipQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TResult, TResult>
Поля:
  int _count
  bool _take
  bool _prematureMerge
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TResult> child, int count, bool take)
  OrdinalIndexState OutputOrdinalIndexState()
  void WrapPartitionedStream(PartitionedStream`2<TResult, TKey> inputStream, IPartitionedStreamRecipient`1<TResult> recipient, bool preferStriping, QuerySettings settings)
  void WrapHelper(PartitionedStream`2<TResult, TKey> inputStream, IPartitionedStreamRecipient`1<TResult> recipient, QuerySettings settings)
  QueryResults`1<TResult> Open(QuerySettings settings, bool preferStriping)
  bool get_LimitsParallelism()
  IEnumerable`1<TResult> AsSequentialQuery(CancellationToken token)
--------------------------------------------------
Класс: System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TResult, TResult>
Поля:
  Func`2<TResult, bool> _predicate
  Func`3<TResult, int, bool> _indexedPredicate
  bool _take
  bool _prematureMerge
  bool _limitsParallelism
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TResult> child, Func`2<TResult, bool> predicate, Func`3<TResult, int, bool> indexedPredicate, bool take)
  void InitOrderIndexState()
  void WrapPartitionedStream(PartitionedStream`2<TResult, TKey> inputStream, IPartitionedStreamRecipient`1<TResult> recipient, bool preferStriping, QuerySettings settings)
  void WrapHelper(PartitionedStream`2<TResult, TKey> inputStream, IPartitionedStreamRecipient`1<TResult> recipient, QuerySettings settings)
  QueryResults`1<TResult> Open(QuerySettings settings, bool preferStriping)
  IEnumerable`1<TResult> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.WhereQueryOperator`1
Наследуется от: UnaryQueryOperator`2<TInputOutput, TInputOutput>
Поля:
  Func`2<TInputOutput, bool> _predicate
Свойства:
  bool LimitsParallelism
Методы:
  void .ctor(IEnumerable`1<TInputOutput> child, Func`2<TInputOutput, bool> predicate)
  void WrapPartitionedStream(PartitionedStream`2<TInputOutput, TKey> inputStream, IPartitionedStreamRecipient`1<TInputOutput> recipient, bool preferStriping, QuerySettings settings)
  QueryResults`1<TInputOutput> Open(QuerySettings settings, bool preferStriping)
  IEnumerable`1<TInputOutput> AsSequentialQuery(CancellationToken token)
  bool get_LimitsParallelism()
--------------------------------------------------
Класс: System.Linq.Parallel.UnaryQueryOperator`2
Наследуется от: QueryOperator`1<TOutput>
Поля:
  QueryOperator`1<TInput> _child
  OrdinalIndexState _indexState
Свойства:
  QueryOperator`1<TInput> Child
  OrdinalIndexState OrdinalIndexState
Методы:
  void .ctor(IEnumerable`1<TInput> child)
  void .ctor(IEnumerable`1<TInput> child, bool outputOrdered)
  void .ctor(QueryOperator`1<TInput> child)
  void .ctor(QueryOperator`1<TInput> child, bool outputOrdered)
  void .ctor(QueryOperator`1<TInput> child, bool outputOrdered, QuerySettings settings)
  QueryOperator`1<TInput> get_Child()
  OrdinalIndexState get_OrdinalIndexState()
  void SetOrdinalIndexState(OrdinalIndexState indexState)
  void WrapPartitionedStream(PartitionedStream`2<TInput, TKey> inputStream, IPartitionedStreamRecipient`1<TOutput> recipient, bool preferStriping, QuerySettings settings)
--------------------------------------------------
Класс: System.Linq.Parallel.CancellationState
Наследуется от: object
Поля:
  CancellationTokenSource InternalCancellationTokenSource
  CancellationToken ExternalCancellationToken
  CancellationTokenSource MergedCancellationTokenSource
  Shared`1<bool> TopLevelDisposedFlag
  int POLL_INTERVAL
Свойства:
  CancellationToken MergedCancellationToken
Методы:
  CancellationToken get_MergedCancellationToken()
  void .ctor(CancellationToken externalCancellationToken)
  void ThrowIfCanceled(CancellationToken token)
  void ThrowWithStandardMessageIfCanceled(CancellationToken externalCancellationToken)
--------------------------------------------------
Класс: System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`2
Наследуется от: SpoolingTaskBase
Поля:
  QueryTaskGroupState _taskGroupState
  QueryOperatorEnumerator`2<TOutput, TKey> _partition
  Boolean[] _consumerWaiting
  Boolean[] _producerWaiting
  Boolean[] _producerDone
  int _partitionIndex
  Queue`1[] _buffers
  object _bufferLock
  bool _autoBuffered
  int PRODUCER_BUFFER_AUTO_SIZE
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<TOutput, TKey> partition, QueryTaskGroupState taskGroupState, Boolean[] consumerWaiting, Boolean[] producerWaiting, Boolean[] producerDone, int partitionIndex, Queue`1[] buffers, object bufferLock, bool autoBuffered)
  void SpoolingWork()
  void Spool(QueryTaskGroupState groupState, PartitionedStream`2<TOutput, TKey> partitions, Boolean[] consumerWaiting, Boolean[] producerWaiting, Boolean[] producerDone, Queue`1[] buffers, Object[] bufferLocks, TaskScheduler taskScheduler, bool autoBuffered)
  void SpoolingFinally()
--------------------------------------------------
Класс: System.Linq.Parallel.OrderPreservingSpoolingTask`2
Наследуется от: SpoolingTaskBase
Поля:
  Shared`1<TInputOutput[]> _results
  SortHelper`1<TInputOutput> _sortHelper
Свойства:
Методы:
  void .ctor(int taskIndex, QueryTaskGroupState groupState, Shared`1<TInputOutput[]> results, SortHelper`1<TInputOutput> sortHelper)
  void Spool(QueryTaskGroupState groupState, PartitionedStream`2<TInputOutput, TKey> partitions, Shared`1<TInputOutput[]> results, TaskScheduler taskScheduler)
  void SpoolingWork()
--------------------------------------------------
Класс: System.Linq.Parallel.QueryLifecycle
Наследуется от: object
Поля:
Свойства:
Методы:
  void LogicalQueryExecutionBegin(int queryID)
  void LogicalQueryExecutionEnd(int queryID)
--------------------------------------------------
Класс: System.Linq.Parallel.QueryTask
Наследуется от: object
Поля:
  int _taskIndex
  QueryTaskGroupState _groupState
  Action`1<object> s_runTaskSynchronouslyDelegate
  Action`1<object> s_baseWorkDelegate
Свойства:
Методы:
  void .ctor(int taskIndex, QueryTaskGroupState groupState)
  void RunTaskSynchronously(object o)
  Task RunSynchronously(TaskScheduler taskScheduler)
  Task RunAsynchronously(TaskScheduler taskScheduler)
  void BaseWork(object unused)
  void Work()
  void .cctor()
--------------------------------------------------
Класс: System.Linq.Parallel.QueryTaskGroupState
Наследуется от: object
Поля:
  Task _rootTask
  int _alreadyEnded
  CancellationState _cancellationState
  int _queryId
Свойства:
  bool IsAlreadyEnded
  CancellationState CancellationState
  int QueryId
Методы:
  void .ctor(CancellationState cancellationState, int queryId)
  bool get_IsAlreadyEnded()
  CancellationState get_CancellationState()
  int get_QueryId()
  void QueryBegin(Task rootTask)
  void QueryEnd(bool userInitiatedDispose)
--------------------------------------------------
Класс: System.Linq.Parallel.Scheduling
Наследуется от: object
Поля:
  bool DefaultPreserveOrder
  int DefaultDegreeOfParallelism
  int DEFAULT_BOUNDED_BUFFER_CAPACITY
  int DEFAULT_BYTES_PER_CHUNK
  int ZOMBIED_PRODUCER_TIMEOUT
  int MAX_SUPPORTED_DOP
Свойства:
Методы:
  int GetDefaultDegreeOfParallelism()
  int GetDefaultChunkSize()
  void .cctor()
--------------------------------------------------
Класс: System.Linq.Parallel.SpoolingTask
Наследуется от: object
Поля:
Свойства:
Методы:
  void SpoolStopAndGo(QueryTaskGroupState groupState, PartitionedStream`2<TInputOutput, TIgnoreKey> partitions, SynchronousChannel`1[] channels, TaskScheduler taskScheduler)
  void SpoolPipeline(QueryTaskGroupState groupState, PartitionedStream`2<TInputOutput, TIgnoreKey> partitions, AsynchronousChannel`1[] channels, TaskScheduler taskScheduler)
  void SpoolForAll(QueryTaskGroupState groupState, PartitionedStream`2<TInputOutput, TIgnoreKey> partitions, TaskScheduler taskScheduler)
--------------------------------------------------
Класс: System.Linq.Parallel.StopAndGoSpoolingTask`2
Наследуется от: SpoolingTaskBase
Поля:
  QueryOperatorEnumerator`2<TInputOutput, TIgnoreKey> _source
  SynchronousChannel`1<TInputOutput> _destination
Свойства:
Методы:
  void .ctor(int taskIndex, QueryTaskGroupState groupState, QueryOperatorEnumerator`2<TInputOutput, TIgnoreKey> source, SynchronousChannel`1<TInputOutput> destination)
  void SpoolingWork()
  void SpoolingFinally()
--------------------------------------------------
Класс: System.Linq.Parallel.PipelineSpoolingTask`2
Наследуется от: SpoolingTaskBase
Поля:
  QueryOperatorEnumerator`2<TInputOutput, TIgnoreKey> _source
  AsynchronousChannel`1<TInputOutput> _destination
Свойства:
Методы:
  void .ctor(int taskIndex, QueryTaskGroupState groupState, QueryOperatorEnumerator`2<TInputOutput, TIgnoreKey> source, AsynchronousChannel`1<TInputOutput> destination)
  void SpoolingWork()
  void SpoolingFinally()
--------------------------------------------------
Класс: System.Linq.Parallel.ForAllSpoolingTask`2
Наследуется от: SpoolingTaskBase
Поля:
  QueryOperatorEnumerator`2<TInputOutput, TIgnoreKey> _source
Свойства:
Методы:
  void .ctor(int taskIndex, QueryTaskGroupState groupState, QueryOperatorEnumerator`2<TInputOutput, TIgnoreKey> source)
  void SpoolingWork()
  void SpoolingFinally()
--------------------------------------------------
Класс: System.Linq.Parallel.SpoolingTaskBase
Наследуется от: QueryTask
Поля:
Свойства:
Методы:
  void .ctor(int taskIndex, QueryTaskGroupState groupState)
  void Work()
  void SpoolingWork()
  void SpoolingFinally()
--------------------------------------------------
Класс: System.Linq.Parallel.CancellableEnumerable
Наследуется от: object
Поля:
Свойства:
Методы:
  IEnumerable`1<TElement> Wrap(IEnumerable`1<TElement> source, CancellationToken token)
--------------------------------------------------
Класс: System.Linq.Parallel.ExceptionAggregator
Наследуется от: object
Поля:
Свойства:
Методы:
  IEnumerable`1<TElement> WrapEnumerable(IEnumerable`1<TElement> source, CancellationState cancellationState)
  IEnumerable`1<TElement> WrapQueryEnumerator(QueryOperatorEnumerator`2<TElement, TIgnoreKey> source, CancellationState cancellationState)
  void ThrowOCEorAggregateException(Exception ex, CancellationState cancellationState)
  Func`2<T, U> WrapFunc(Func`2<T, U> f, CancellationState cancellationState)
  bool ThrowAnOCE(Exception ex, CancellationState cancellationState)
--------------------------------------------------
Класс: System.Linq.Parallel.ExchangeUtilities
Наследуется от: object
Поля:
Свойства:
Методы:
  PartitionedStream`2<T, int> PartitionDataSource(IEnumerable`1<T> source, int partitionCount, bool useStriping)
  PartitionedStream`2<Pair`2<TElement, THashKey>, int> HashRepartition(PartitionedStream`2<TElement, TIgnoreKey> source, Func`2<TElement, THashKey> keySelector, IEqualityComparer`1<THashKey> keyComparer, IEqualityComparer`1<TElement> elementComparer, CancellationToken cancellationToken)
  PartitionedStream`2<Pair`2<TElement, THashKey>, TOrderKey> HashRepartitionOrdered(PartitionedStream`2<TElement, TOrderKey> source, Func`2<TElement, THashKey> keySelector, IEqualityComparer`1<THashKey> keyComparer, IEqualityComparer`1<TElement> elementComparer, CancellationToken cancellationToken)
  OrdinalIndexState Worse(OrdinalIndexState state1, OrdinalIndexState state2)
  bool IsWorseThan(OrdinalIndexState state1, OrdinalIndexState state2)
--------------------------------------------------
Класс: System.Linq.Parallel.NoKeyMemoizationRequired
Наследуется от: ValueType
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.Parallel.FixedMaxHeap`1
Наследуется от: object
Поля:
  TElement[] _elements
  int _count
  IComparer`1<TElement> _comparer
Свойства:
  int Count
  int Size
  TElement MaxValue
Методы:
  void .ctor(int maximumSize)
  void .ctor(int maximumSize, IComparer`1<TElement> comparer)
  int get_Count()
  int get_Size()
  TElement get_MaxValue()
  void Clear()
  bool Insert(TElement e)
  void ReplaceMax(TElement newValue)
  void RemoveMax()
  void Swap(int i, int j)
  void HeapifyRoot()
  void HeapifyLastLeaf()
--------------------------------------------------
Класс: System.Linq.Parallel.GrowingArray`1
Наследуется от: object
Поля:
  T[] _array
  int _count
  int DEFAULT_ARRAY_SIZE
Свойства:
  T[] InternalArray
  int Count
Методы:
  void .ctor()
  T[] get_InternalArray()
  int get_Count()
  void Add(T element)
  void GrowArray(int newSize)
  void CopyFrom(T[] otherArray, int otherCount)
--------------------------------------------------
Класс: System.Linq.Parallel.HashLookup`2
Наследуется от: object
Поля:
  Int32[] buckets
  Slot[] slots
  int count
  int freeList
  IEqualityComparer`1<TKey> comparer
  int HashCodeMask
Свойства:
  TValue Item
  int Count
  KeyValuePair`2<TKey, TValue> Item
Методы:
  void .ctor()
  void .ctor(IEqualityComparer`1<TKey> comparer)
  bool Add(TKey key, TValue value)
  bool TryGetValue(TKey key, TValue& value)
  void set_Item(TKey key, TValue value)
  int GetKeyHashCode(TKey key)
  bool AreKeysEqual(TKey key1, TKey key2)
  bool Find(TKey key, bool add, bool set, TValue& value)
  void Resize()
  int get_Count()
  KeyValuePair`2<TKey, TValue> get_Item(int index)
--------------------------------------------------
Класс: System.Linq.Parallel.IntValueEvent
Наследуется от: ManualResetEventSlim
Поля:
  int Value
Свойства:
Методы:
  void .ctor()
  void Set(int index)
--------------------------------------------------
Класс: System.Linq.Parallel.ListChunk`1
Наследуется от: object
Поля:
  TInputOutput[] _chunk
  int _chunkCount
  ListChunk`1<TInputOutput> _nextChunk
  ListChunk`1<TInputOutput> _tailChunk
Свойства:
  ListChunk`1<TInputOutput> Next
  int Count
Методы:
  void .ctor(int size)
  void Add(TInputOutput e)
  ListChunk`1<TInputOutput> get_Next()
  int get_Count()
  IEnumerator`1<TInputOutput> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Parallel.Lookup`2
Наследуется от: object
Поля:
  IDictionary`2<TKey, IGrouping`2<TKey, TElement>> _dict
  IEqualityComparer`1<TKey> _comparer
  IGrouping`2<TKey, TElement> _defaultKeyGrouping
Свойства:
  int Count
  IEnumerable`1<TElement> Item
Методы:
  void .ctor(IEqualityComparer`1<TKey> comparer)
  int get_Count()
  IEnumerable`1<TElement> get_Item(TKey key)
  bool Contains(TKey key)
  void Add(IGrouping`2<TKey, TElement> grouping)
  IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Parallel.PlinqEtwProvider
Наследуется от: EventSource
Поля:
  PlinqEtwProvider Log
  int s_defaultSchedulerId
  int s_queryId
  EventKeywords ALL_KEYWORDS
  int PARALLELQUERYBEGIN_EVENTID
  int PARALLELQUERYEND_EVENTID
  int PARALLELQUERYFORK_EVENTID
  int PARALLELQUERYJOIN_EVENTID
Свойства:
Методы:
  void .ctor()
  int NextQueryId()
  void ParallelQueryBegin(int queryId)
  void ParallelQueryBegin(int taskSchedulerId, int taskId, int queryId)
  void ParallelQueryEnd(int queryId)
  void ParallelQueryEnd(int taskSchedulerId, int taskId, int queryId)
  void ParallelQueryFork(int queryId)
  void ParallelQueryFork(int taskSchedulerId, int taskId, int queryId)
  void ParallelQueryJoin(int queryId)
  void ParallelQueryJoin(int taskSchedulerId, int taskId, int queryId)
  void .cctor()
--------------------------------------------------
Класс: System.Linq.Parallel.Pair`2
Наследуется от: ValueType
Поля:
  T _first
  U _second
Свойства:
  T First
  U Second
Методы:
  void .ctor(T first, U second)
  T get_First()
  void set_First(T value)
  U get_Second()
  void set_Second(U value)
--------------------------------------------------
Класс: System.Linq.Parallel.PairComparer`2
Наследуется от: object
Поля:
  IComparer`1<T> _comparer1
  IComparer`1<U> _comparer2
Свойства:
Методы:
  void .ctor(IComparer`1<T> comparer1, IComparer`1<U> comparer2)
  int Compare(Pair`2<T, U> x, Pair`2<T, U> y)
--------------------------------------------------
Класс: System.Linq.Parallel.ReverseComparer`1
Наследуется от: object
Поля:
  IComparer`1<T> _comparer
Свойства:
Методы:
  void .ctor(IComparer`1<T> comparer)
  int Compare(T x, T y)
--------------------------------------------------
Класс: System.Linq.Parallel.Shared`1
Наследуется от: object
Поля:
  T Value
Свойства:
Методы:
  void .ctor(T value)
--------------------------------------------------
Класс: System.Linq.Parallel.SortHelper`1
Наследуется от: object
Поля:
Свойства:
Методы:
  TInputOutput[] Sort()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Parallel.SortHelper`2
Наследуется от: SortHelper`1<TInputOutput>
Поля:
  QueryOperatorEnumerator`2<TInputOutput, TKey> _source
  int _partitionCount
  int _partitionIndex
  QueryTaskGroupState _groupState
  Int32[][] _sharedIndices
  GrowingArray`1[] _sharedKeys
  TInputOutput[][] _sharedValues
  Barrier[][] _sharedBarriers
  OrdinalIndexState _indexState
  IComparer`1<TKey> _keyComparer
Свойства:
Методы:
  void .ctor(QueryOperatorEnumerator`2<TInputOutput, TKey> source, int partitionCount, int partitionIndex, QueryTaskGroupState groupState, Int32[][] sharedIndices, OrdinalIndexState indexState, IComparer`1<TKey> keyComparer, GrowingArray`1[] sharedkeys, TInputOutput[][] sharedValues, Barrier[][] sharedBarriers)
  SortHelper`2[] GenerateSortHelpers(PartitionedStream`2<TInputOutput, TKey> partitions, QueryTaskGroupState groupState)
  void Dispose()
  TInputOutput[] Sort()
  void BuildKeysFromSource(GrowingArray`1& keys, List`1& values)
  void QuickSortIndicesInPlace(GrowingArray`1<TKey> keys, List`1<TInputOutput> values, OrdinalIndexState ordinalIndexState)
  void MergeSortCooperatively()
  int ComputePartnerIndex(int phase)
  void QuickSort(int left, int right, TKey[] keys, Int32[] indices, CancellationToken cancelToken)
--------------------------------------------------
Класс: System.Linq.Parallel.TraceHelpers
Наследуется от: object
Поля:
Свойства:
Методы:
  void TraceInfo(string msg, Object[] args)
--------------------------------------------------
Класс: System.Linq.Parallel.Util
Наследуется от: object
Поля:
  FastIntComparer s_fastIntComparer
  FastLongComparer s_fastLongComparer
  FastFloatComparer s_fastFloatComparer
  FastDoubleComparer s_fastDoubleComparer
  FastDateTimeComparer s_fastDateTimeComparer
Свойства:
Методы:
  int Sign(int x)
  Comparer`1<TKey> GetDefaultComparer()
  void .cctor()
--------------------------------------------------
Класс: System.Linq.Parallel.Wrapper`1
Наследуется от: ValueType
Поля:
  T Value
Свойства:
Методы:
  void .ctor(T value)
--------------------------------------------------
Класс: System.Linq.Parallel.WrapperEqualityComparer`1
Наследуется от: ValueType
Поля:
  IEqualityComparer`1<T> _comparer
Свойства:
Методы:
  void .ctor(IEqualityComparer`1<T> comparer)
  bool Equals(Wrapper`1<T> x, Wrapper`1<T> y)
  int GetHashCode(Wrapper`1<T> x)
--------------------------------------------------
Класс: System.Linq.Expressions.CachedReflectionInfo
Наследуется от: object
Поля:
  MethodInfo s_String_Format_String_ObjectArray
  ConstructorInfo s_InvalidCastException_Ctor_String
  MethodInfo s_CallSiteOps_SetNotMatched
  MethodInfo s_CallSiteOps_CreateMatchmaker
  MethodInfo s_CallSiteOps_GetMatch
  MethodInfo s_CallSiteOps_ClearMatch
  MethodInfo s_CallSiteOps_UpdateRules
  MethodInfo s_CallSiteOps_GetRules
  MethodInfo s_CallSiteOps_GetRuleCache
  MethodInfo s_CallSiteOps_GetCachedRules
  MethodInfo s_CallSiteOps_AddRule
  MethodInfo s_CallSiteOps_MoveRule
  MethodInfo s_CallSiteOps_Bind
  MethodInfo s_DynamicObject_TryGetMember
  MethodInfo s_DynamicObject_TrySetMember
  MethodInfo s_DynamicObject_TryDeleteMember
  MethodInfo s_DynamicObject_TryGetIndex
  MethodInfo s_DynamicObject_TrySetIndex
  MethodInfo s_DynamicObject_TryDeleteIndex
  MethodInfo s_DynamicObject_TryConvert
  MethodInfo s_DynamicObject_TryInvoke
  MethodInfo s_DynamicObject_TryInvokeMember
  MethodInfo s_DynamicObject_TryBinaryOperation
  MethodInfo s_DynamicObject_TryUnaryOperation
  MethodInfo s_DynamicObject_TryCreateInstance
  ConstructorInfo s_Nullable_Boolean_Ctor
  ConstructorInfo s_Decimal_Ctor_Int32
  ConstructorInfo s_Decimal_Ctor_UInt32
  ConstructorInfo s_Decimal_Ctor_Int64
  ConstructorInfo s_Decimal_Ctor_UInt64
  ConstructorInfo s_Decimal_Ctor_Int32_Int32_Int32_Bool_Byte
  FieldInfo s_Decimal_One
  FieldInfo s_Decimal_MinusOne
  FieldInfo s_Decimal_MinValue
  FieldInfo s_Decimal_MaxValue
  FieldInfo s_Decimal_Zero
  FieldInfo s_DateTime_MinValue
  MethodInfo s_MethodBase_GetMethodFromHandle_RuntimeMethodHandle
  MethodInfo s_MethodBase_GetMethodFromHandle_RuntimeMethodHandle_RuntimeTypeHandle
  MethodInfo s_MethodInfo_CreateDelegate_Type_Object
  MethodInfo s_String_op_Equality_String_String
  MethodInfo s_String_Equals_String_String
  MethodInfo s_DictionaryOfStringInt32_Add_String_Int32
  ConstructorInfo s_DictionaryOfStringInt32_Ctor_Int32
  MethodInfo s_Type_GetTypeFromHandle
  MethodInfo s_Object_GetType
  MethodInfo s_Decimal_op_Implicit_Byte
  MethodInfo s_Decimal_op_Implicit_SByte
  MethodInfo s_Decimal_op_Implicit_Int16
  MethodInfo s_Decimal_op_Implicit_UInt16
  MethodInfo s_Decimal_op_Implicit_Int32
  MethodInfo s_Decimal_op_Implicit_UInt32
  MethodInfo s_Decimal_op_Implicit_Int64
  MethodInfo s_Decimal_op_Implicit_UInt64
  MethodInfo s_Decimal_op_Implicit_Char
  MethodInfo s_Math_Pow_Double_Double
  ConstructorInfo s_Closure_ObjectArray_ObjectArray
  FieldInfo s_Closure_Constants
  FieldInfo s_Closure_Locals
  MethodInfo s_RuntimeOps_CreateRuntimeVariables_ObjectArray_Int64Array
  MethodInfo s_RuntimeOps_CreateRuntimeVariables
  MethodInfo s_RuntimeOps_MergeRuntimeVariables
  MethodInfo s_RuntimeOps_Quote
Свойства:
  MethodInfo String_Format_String_ObjectArray
  ConstructorInfo InvalidCastException_Ctor_String
  MethodInfo CallSiteOps_SetNotMatched
  MethodInfo CallSiteOps_CreateMatchmaker
  MethodInfo CallSiteOps_GetMatch
  MethodInfo CallSiteOps_ClearMatch
  MethodInfo CallSiteOps_UpdateRules
  MethodInfo CallSiteOps_GetRules
  MethodInfo CallSiteOps_GetRuleCache
  MethodInfo CallSiteOps_GetCachedRules
  MethodInfo CallSiteOps_AddRule
  MethodInfo CallSiteOps_MoveRule
  MethodInfo CallSiteOps_Bind
  MethodInfo DynamicObject_TryGetMember
  MethodInfo DynamicObject_TrySetMember
  MethodInfo DynamicObject_TryDeleteMember
  MethodInfo DynamicObject_TryGetIndex
  MethodInfo DynamicObject_TrySetIndex
  MethodInfo DynamicObject_TryDeleteIndex
  MethodInfo DynamicObject_TryConvert
  MethodInfo DynamicObject_TryInvoke
  MethodInfo DynamicObject_TryInvokeMember
  MethodInfo DynamicObject_TryBinaryOperation
  MethodInfo DynamicObject_TryUnaryOperation
  MethodInfo DynamicObject_TryCreateInstance
  ConstructorInfo Nullable_Boolean_Ctor
  ConstructorInfo Decimal_Ctor_Int32
  ConstructorInfo Decimal_Ctor_UInt32
  ConstructorInfo Decimal_Ctor_Int64
  ConstructorInfo Decimal_Ctor_UInt64
  ConstructorInfo Decimal_Ctor_Int32_Int32_Int32_Bool_Byte
  FieldInfo Decimal_One
  FieldInfo Decimal_MinusOne
  FieldInfo Decimal_MinValue
  FieldInfo Decimal_MaxValue
  FieldInfo Decimal_Zero
  FieldInfo DateTime_MinValue
  MethodInfo MethodBase_GetMethodFromHandle_RuntimeMethodHandle
  MethodInfo MethodBase_GetMethodFromHandle_RuntimeMethodHandle_RuntimeTypeHandle
  MethodInfo MethodInfo_CreateDelegate_Type_Object
  MethodInfo String_op_Equality_String_String
  MethodInfo String_Equals_String_String
  MethodInfo DictionaryOfStringInt32_Add_String_Int32
  ConstructorInfo DictionaryOfStringInt32_Ctor_Int32
  MethodInfo Type_GetTypeFromHandle
  MethodInfo Object_GetType
  MethodInfo Decimal_op_Implicit_Byte
  MethodInfo Decimal_op_Implicit_SByte
  MethodInfo Decimal_op_Implicit_Int16
  MethodInfo Decimal_op_Implicit_UInt16
  MethodInfo Decimal_op_Implicit_Int32
  MethodInfo Decimal_op_Implicit_UInt32
  MethodInfo Decimal_op_Implicit_Int64
  MethodInfo Decimal_op_Implicit_UInt64
  MethodInfo Decimal_op_Implicit_Char
  MethodInfo Math_Pow_Double_Double
  ConstructorInfo Closure_ObjectArray_ObjectArray
  FieldInfo Closure_Constants
  FieldInfo Closure_Locals
  MethodInfo RuntimeOps_CreateRuntimeVariables_ObjectArray_Int64Array
  MethodInfo RuntimeOps_CreateRuntimeVariables
  MethodInfo RuntimeOps_MergeRuntimeVariables
  MethodInfo RuntimeOps_Quote
Методы:
  MethodInfo get_String_Format_String_ObjectArray()
  ConstructorInfo get_InvalidCastException_Ctor_String()
  MethodInfo get_CallSiteOps_SetNotMatched()
  MethodInfo get_CallSiteOps_CreateMatchmaker()
  MethodInfo get_CallSiteOps_GetMatch()
  MethodInfo get_CallSiteOps_ClearMatch()
  MethodInfo get_CallSiteOps_UpdateRules()
  MethodInfo get_CallSiteOps_GetRules()
  MethodInfo get_CallSiteOps_GetRuleCache()
  MethodInfo get_CallSiteOps_GetCachedRules()
  MethodInfo get_CallSiteOps_AddRule()
  MethodInfo get_CallSiteOps_MoveRule()
  MethodInfo get_CallSiteOps_Bind()
  MethodInfo get_DynamicObject_TryGetMember()
  MethodInfo get_DynamicObject_TrySetMember()
  MethodInfo get_DynamicObject_TryDeleteMember()
  MethodInfo get_DynamicObject_TryGetIndex()
  MethodInfo get_DynamicObject_TrySetIndex()
  MethodInfo get_DynamicObject_TryDeleteIndex()
  MethodInfo get_DynamicObject_TryConvert()
  MethodInfo get_DynamicObject_TryInvoke()
  MethodInfo get_DynamicObject_TryInvokeMember()
  MethodInfo get_DynamicObject_TryBinaryOperation()
  MethodInfo get_DynamicObject_TryUnaryOperation()
  MethodInfo get_DynamicObject_TryCreateInstance()
  ConstructorInfo get_Nullable_Boolean_Ctor()
  ConstructorInfo get_Decimal_Ctor_Int32()
  ConstructorInfo get_Decimal_Ctor_UInt32()
  ConstructorInfo get_Decimal_Ctor_Int64()
  ConstructorInfo get_Decimal_Ctor_UInt64()
  ConstructorInfo get_Decimal_Ctor_Int32_Int32_Int32_Bool_Byte()
  FieldInfo get_Decimal_One()
  FieldInfo get_Decimal_MinusOne()
  FieldInfo get_Decimal_MinValue()
  FieldInfo get_Decimal_MaxValue()
  FieldInfo get_Decimal_Zero()
  FieldInfo get_DateTime_MinValue()
  MethodInfo get_MethodBase_GetMethodFromHandle_RuntimeMethodHandle()
  MethodInfo get_MethodBase_GetMethodFromHandle_RuntimeMethodHandle_RuntimeTypeHandle()
  MethodInfo get_MethodInfo_CreateDelegate_Type_Object()
  MethodInfo get_String_op_Equality_String_String()
  MethodInfo get_String_Equals_String_String()
  MethodInfo get_DictionaryOfStringInt32_Add_String_Int32()
  ConstructorInfo get_DictionaryOfStringInt32_Ctor_Int32()
  MethodInfo get_Type_GetTypeFromHandle()
  MethodInfo get_Object_GetType()
  MethodInfo get_Decimal_op_Implicit_Byte()
  MethodInfo get_Decimal_op_Implicit_SByte()
  MethodInfo get_Decimal_op_Implicit_Int16()
  MethodInfo get_Decimal_op_Implicit_UInt16()
  MethodInfo get_Decimal_op_Implicit_Int32()
  MethodInfo get_Decimal_op_Implicit_UInt32()
  MethodInfo get_Decimal_op_Implicit_Int64()
  MethodInfo get_Decimal_op_Implicit_UInt64()
  MethodInfo get_Decimal_op_Implicit_Char()
  MethodInfo get_Math_Pow_Double_Double()
  ConstructorInfo get_Closure_ObjectArray_ObjectArray()
  FieldInfo get_Closure_Constants()
  FieldInfo get_Closure_Locals()
  MethodInfo get_RuntimeOps_CreateRuntimeVariables_ObjectArray_Int64Array()
  MethodInfo get_RuntimeOps_CreateRuntimeVariables()
  MethodInfo get_RuntimeOps_MergeRuntimeVariables()
  MethodInfo get_RuntimeOps_Quote()
--------------------------------------------------
Класс: System.Linq.Expressions.BinaryExpression
Наследуется от: Expression
Поля:
  Expression <Right>k__BackingField
  Expression <Left>k__BackingField
Свойства:
  bool CanReduce
  Expression Right
  Expression Left
  MethodInfo Method
  LambdaExpression Conversion
  bool IsLifted
  bool IsLiftedToNull
  bool IsLiftedLogical
  bool IsReferenceComparison
Методы:
  void .ctor(Expression left, Expression right)
  bool get_CanReduce()
  bool IsOpAssignment(ExpressionType op)
  Expression get_Right()
  Expression get_Left()
  MethodInfo get_Method()
  MethodInfo GetMethod()
  BinaryExpression Update(Expression left, LambdaExpression conversion, Expression right)
  Expression Reduce()
  ExpressionType GetBinaryOpFromAssignmentOp(ExpressionType op)
  Expression ReduceVariable()
  Expression ReduceMember()
  Expression ReduceIndex()
  LambdaExpression get_Conversion()
  LambdaExpression GetConversion()
  bool get_IsLifted()
  bool get_IsLiftedToNull()
  Expression Accept(ExpressionVisitor visitor)
  BinaryExpression Create(ExpressionType nodeType, Expression left, Expression right, Type type, MethodInfo method, LambdaExpression conversion)
  bool get_IsLiftedLogical()
  bool get_IsReferenceComparison()
  Expression ReduceUserdefinedLifted()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.LogicalBinaryExpression
Наследуется от: BinaryExpression
Поля:
  ExpressionType <NodeType>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
Методы:
  void .ctor(ExpressionType nodeType, Expression left, Expression right)
  Type get_Type()
  ExpressionType get_NodeType()
--------------------------------------------------
Класс: System.Linq.Expressions.AssignBinaryExpression
Наследуется от: BinaryExpression
Поля:
Свойства:
  bool IsByRef
  Type Type
  ExpressionType NodeType
Методы:
  void .ctor(Expression left, Expression right)
  AssignBinaryExpression Make(Expression left, Expression right, bool byRef)
  bool get_IsByRef()
  Type get_Type()
  ExpressionType get_NodeType()
--------------------------------------------------
Класс: System.Linq.Expressions.ByRefAssignBinaryExpression
Наследуется от: AssignBinaryExpression
Поля:
Свойства:
  bool IsByRef
Методы:
  void .ctor(Expression left, Expression right)
  bool get_IsByRef()
--------------------------------------------------
Класс: System.Linq.Expressions.CoalesceConversionBinaryExpression
Наследуется от: BinaryExpression
Поля:
  LambdaExpression _conversion
Свойства:
  ExpressionType NodeType
  Type Type
Методы:
  void .ctor(Expression left, Expression right, LambdaExpression conversion)
  LambdaExpression GetConversion()
  ExpressionType get_NodeType()
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.OpAssignMethodConversionBinaryExpression
Наследуется от: MethodBinaryExpression
Поля:
  LambdaExpression _conversion
Свойства:
Методы:
  void .ctor(ExpressionType nodeType, Expression left, Expression right, Type type, MethodInfo method, LambdaExpression conversion)
  LambdaExpression GetConversion()
--------------------------------------------------
Класс: System.Linq.Expressions.SimpleBinaryExpression
Наследуется от: BinaryExpression
Поля:
  ExpressionType <NodeType>k__BackingField
  Type <Type>k__BackingField
Свойства:
  ExpressionType NodeType
  Type Type
Методы:
  void .ctor(ExpressionType nodeType, Expression left, Expression right, Type type)
  ExpressionType get_NodeType()
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.MethodBinaryExpression
Наследуется от: SimpleBinaryExpression
Поля:
  MethodInfo _method
Свойства:
Методы:
  void .ctor(ExpressionType nodeType, Expression left, Expression right, Type type, MethodInfo method)
  MethodInfo GetMethod()
--------------------------------------------------
Класс: System.Linq.Expressions.Expression
Наследуется от: object
Поля:
  CacheDict`2<Type, MethodInfo> s_lambdaDelegateCache
  CacheDict`2 modreq(System.Runtime.CompilerServices.IsVolatile) s_lambdaFactories
  ConditionalWeakTable`2<Expression, ExtensionInfo> s_legacyCtorSupportTable
Свойства:
  ExpressionType NodeType
  Type Type
  bool CanReduce
  string DebugView
Методы:
  BinaryExpression Assign(Expression left, Expression right)
  BinaryExpression GetUserDefinedBinaryOperator(ExpressionType binaryType, string name, Expression left, Expression right, bool liftToNull)
  BinaryExpression GetMethodBasedBinaryOperator(ExpressionType binaryType, Expression left, Expression right, MethodInfo method, bool liftToNull)
  BinaryExpression GetMethodBasedAssignOperator(ExpressionType binaryType, Expression left, Expression right, MethodInfo method, LambdaExpression conversion, bool liftToNull)
  BinaryExpression GetUserDefinedBinaryOperatorOrThrow(ExpressionType binaryType, string name, Expression left, Expression right, bool liftToNull)
  BinaryExpression GetUserDefinedAssignOperatorOrThrow(ExpressionType binaryType, string name, Expression left, Expression right, LambdaExpression conversion, bool liftToNull)
  MethodInfo GetUserDefinedBinaryOperator(ExpressionType binaryType, Type leftType, Type rightType, string name)
  bool IsLiftingConditionalLogicalOperator(Type left, Type right, MethodInfo method, ExpressionType binaryType)
  bool ParameterIsAssignable(ParameterInfo pi, Type argType)
  void ValidateParamswithOperandsOrThrow(Type paramType, Type operandType, ExpressionType exprType, string name)
  void ValidateOperator(MethodInfo method)
  void ValidateMethodInfo(MethodInfo method, string paramName)
  bool IsNullComparison(Expression left, Expression right)
  bool IsNullConstant(Expression e)
  void ValidateUserDefinedConditionalLogicOperator(ExpressionType nodeType, Type left, Type right, MethodInfo method)
  void VerifyOpTrueFalse(ExpressionType nodeType, Type left, MethodInfo opTrue, string paramName)
  bool IsValidLiftedConditionalLogicalOperator(Type left, Type right, ParameterInfo[] pms)
  BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right)
  BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, MethodInfo method)
  BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, MethodInfo method, LambdaExpression conversion)
  BinaryExpression Equal(Expression left, Expression right)
  BinaryExpression Equal(Expression left, Expression right, bool liftToNull, MethodInfo method)
  BinaryExpression ReferenceEqual(Expression left, Expression right)
  BinaryExpression NotEqual(Expression left, Expression right)
  BinaryExpression NotEqual(Expression left, Expression right, bool liftToNull, MethodInfo method)
  BinaryExpression ReferenceNotEqual(Expression left, Expression right)
  BinaryExpression GetEqualityComparisonOperator(ExpressionType binaryType, string opName, Expression left, Expression right, bool liftToNull)
  BinaryExpression GreaterThan(Expression left, Expression right)
  BinaryExpression GreaterThan(Expression left, Expression right, bool liftToNull, MethodInfo method)
  BinaryExpression LessThan(Expression left, Expression right)
  BinaryExpression LessThan(Expression left, Expression right, bool liftToNull, MethodInfo method)
  BinaryExpression GreaterThanOrEqual(Expression left, Expression right)
  BinaryExpression GreaterThanOrEqual(Expression left, Expression right, bool liftToNull, MethodInfo method)
  BinaryExpression LessThanOrEqual(Expression left, Expression right)
  BinaryExpression LessThanOrEqual(Expression left, Expression right, bool liftToNull, MethodInfo method)
  BinaryExpression GetComparisonOperator(ExpressionType binaryType, string opName, Expression left, Expression right, bool liftToNull)
  BinaryExpression AndAlso(Expression left, Expression right)
  BinaryExpression AndAlso(Expression left, Expression right, MethodInfo method)
  BinaryExpression OrElse(Expression left, Expression right)
  BinaryExpression OrElse(Expression left, Expression right, MethodInfo method)
  BinaryExpression Coalesce(Expression left, Expression right)
  BinaryExpression Coalesce(Expression left, Expression right, LambdaExpression conversion)
  Type ValidateCoalesceArgTypes(Type left, Type right)
  BinaryExpression Add(Expression left, Expression right)
  BinaryExpression Add(Expression left, Expression right, MethodInfo method)
  BinaryExpression AddAssign(Expression left, Expression right)
  BinaryExpression AddAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression AddAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  void ValidateOpAssignConversionLambda(LambdaExpression conversion, Expression left, MethodInfo method, ExpressionType nodeType)
  BinaryExpression AddAssignChecked(Expression left, Expression right)
  BinaryExpression AddAssignChecked(Expression left, Expression right, MethodInfo method)
  BinaryExpression AddAssignChecked(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression AddChecked(Expression left, Expression right)
  BinaryExpression AddChecked(Expression left, Expression right, MethodInfo method)
  BinaryExpression Subtract(Expression left, Expression right)
  BinaryExpression Subtract(Expression left, Expression right, MethodInfo method)
  BinaryExpression SubtractAssign(Expression left, Expression right)
  BinaryExpression SubtractAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression SubtractAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression SubtractAssignChecked(Expression left, Expression right)
  BinaryExpression SubtractAssignChecked(Expression left, Expression right, MethodInfo method)
  BinaryExpression SubtractAssignChecked(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression SubtractChecked(Expression left, Expression right)
  BinaryExpression SubtractChecked(Expression left, Expression right, MethodInfo method)
  BinaryExpression Divide(Expression left, Expression right)
  BinaryExpression Divide(Expression left, Expression right, MethodInfo method)
  BinaryExpression DivideAssign(Expression left, Expression right)
  BinaryExpression DivideAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression DivideAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression Modulo(Expression left, Expression right)
  BinaryExpression Modulo(Expression left, Expression right, MethodInfo method)
  BinaryExpression ModuloAssign(Expression left, Expression right)
  BinaryExpression ModuloAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression ModuloAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression Multiply(Expression left, Expression right)
  BinaryExpression Multiply(Expression left, Expression right, MethodInfo method)
  BinaryExpression MultiplyAssign(Expression left, Expression right)
  BinaryExpression MultiplyAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression MultiplyAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression MultiplyAssignChecked(Expression left, Expression right)
  BinaryExpression MultiplyAssignChecked(Expression left, Expression right, MethodInfo method)
  BinaryExpression MultiplyAssignChecked(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression MultiplyChecked(Expression left, Expression right)
  BinaryExpression MultiplyChecked(Expression left, Expression right, MethodInfo method)
  bool IsSimpleShift(Type left, Type right)
  Type GetResultTypeOfShift(Type left, Type right)
  BinaryExpression LeftShift(Expression left, Expression right)
  BinaryExpression LeftShift(Expression left, Expression right, MethodInfo method)
  BinaryExpression LeftShiftAssign(Expression left, Expression right)
  BinaryExpression LeftShiftAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression LeftShiftAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression RightShift(Expression left, Expression right)
  BinaryExpression RightShift(Expression left, Expression right, MethodInfo method)
  BinaryExpression RightShiftAssign(Expression left, Expression right)
  BinaryExpression RightShiftAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression RightShiftAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression And(Expression left, Expression right)
  BinaryExpression And(Expression left, Expression right, MethodInfo method)
  BinaryExpression AndAssign(Expression left, Expression right)
  BinaryExpression AndAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression AndAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression Or(Expression left, Expression right)
  BinaryExpression Or(Expression left, Expression right, MethodInfo method)
  BinaryExpression OrAssign(Expression left, Expression right)
  BinaryExpression OrAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression OrAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression ExclusiveOr(Expression left, Expression right)
  BinaryExpression ExclusiveOr(Expression left, Expression right, MethodInfo method)
  BinaryExpression ExclusiveOrAssign(Expression left, Expression right)
  BinaryExpression ExclusiveOrAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression ExclusiveOrAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression Power(Expression left, Expression right)
  BinaryExpression Power(Expression left, Expression right, MethodInfo method)
  BinaryExpression PowerAssign(Expression left, Expression right)
  BinaryExpression PowerAssign(Expression left, Expression right, MethodInfo method)
  BinaryExpression PowerAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
  BinaryExpression ArrayIndex(Expression array, Expression index)
  BlockExpression Block(Expression arg0, Expression arg1)
  BlockExpression Block(Expression arg0, Expression arg1, Expression arg2)
  BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
  BlockExpression Block(Expression[] expressions)
  BlockExpression Block(IEnumerable`1<Expression> expressions)
  BlockExpression Block(Type type, Expression[] expressions)
  BlockExpression Block(Type type, IEnumerable`1<Expression> expressions)
  BlockExpression Block(IEnumerable`1<ParameterExpression> variables, Expression[] expressions)
  BlockExpression Block(Type type, IEnumerable`1<ParameterExpression> variables, Expression[] expressions)
  BlockExpression Block(IEnumerable`1<ParameterExpression> variables, IEnumerable`1<Expression> expressions)
  BlockExpression Block(Type type, IEnumerable`1<ParameterExpression> variables, IEnumerable`1<Expression> expressions)
  BlockExpression BlockCore(Type type, ReadOnlyCollection`1<ParameterExpression> variables, ReadOnlyCollection`1<Expression> expressions)
  void ValidateVariables(ReadOnlyCollection`1<ParameterExpression> varList, string collectionName)
  BlockExpression GetOptimizedBlockExpression(IReadOnlyList`1<Expression> expressions)
  CatchBlock Catch(Type type, Expression body)
  CatchBlock Catch(ParameterExpression variable, Expression body)
  CatchBlock Catch(Type type, Expression body, Expression filter)
  CatchBlock Catch(ParameterExpression variable, Expression body, Expression filter)
  CatchBlock MakeCatchBlock(Type type, ParameterExpression variable, Expression body, Expression filter)
  ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse)
  ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse, Type type)
  ConditionalExpression IfThen(Expression test, Expression ifTrue)
  ConditionalExpression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse)
  ConstantExpression Constant(object value)
  ConstantExpression Constant(object value, Type type)
  DebugInfoExpression DebugInfo(SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn)
  DebugInfoExpression ClearDebugInfo(SymbolDocumentInfo document)
  void ValidateSpan(int startLine, int startColumn, int endLine, int endColumn)
  DefaultExpression Empty()
  DefaultExpression Default(Type type)
  ElementInit ElementInit(MethodInfo addMethod, Expression[] arguments)
  ElementInit ElementInit(MethodInfo addMethod, IEnumerable`1<Expression> arguments)
  void ValidateElementInitAddMethodInfo(MethodInfo addMethod, string paramName)
  void .ctor(ExpressionType nodeType, Type type)
  void .ctor()
  ExpressionType get_NodeType()
  Type get_Type()
  bool get_CanReduce()
  Expression Reduce()
  Expression VisitChildren(ExpressionVisitor visitor)
  Expression Accept(ExpressionVisitor visitor)
  Expression ReduceAndCheck()
  Expression ReduceExtensions()
  string ToString()
  string get_DebugView()
  void RequiresCanRead(IReadOnlyList`1<Expression> items, string paramName)
  void RequiresCanWrite(Expression expression, string paramName)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, IEnumerable`1<Expression> arguments)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression[] arguments)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, IEnumerable`1<Expression> arguments)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression[] arguments)
  GotoExpression Break(LabelTarget target)
  GotoExpression Break(LabelTarget target, Expression value)
  GotoExpression Break(LabelTarget target, Type type)
  GotoExpression Break(LabelTarget target, Expression value, Type type)
  GotoExpression Continue(LabelTarget target)
  GotoExpression Continue(LabelTarget target, Type type)
  GotoExpression Return(LabelTarget target)
  GotoExpression Return(LabelTarget target, Type type)
  GotoExpression Return(LabelTarget target, Expression value)
  GotoExpression Return(LabelTarget target, Expression value, Type type)
  GotoExpression Goto(LabelTarget target)
  GotoExpression Goto(LabelTarget target, Type type)
  GotoExpression Goto(LabelTarget target, Expression value)
  GotoExpression Goto(LabelTarget target, Expression value, Type type)
  GotoExpression MakeGoto(GotoExpressionKind kind, LabelTarget target, Expression value, Type type)
  void ValidateGoto(LabelTarget target, Expression& value, string targetParameter, string valueParameter, Type type)
  void ValidateGotoType(Type expectedType, Expression& value, string paramName)
  IndexExpression MakeIndex(Expression instance, PropertyInfo indexer, IEnumerable`1<Expression> arguments)
  IndexExpression ArrayAccess(Expression array, Expression[] indexes)
  IndexExpression ArrayAccess(Expression array, IEnumerable`1<Expression> indexes)
  IndexExpression Property(Expression instance, string propertyName, Expression[] arguments)
  PropertyInfo FindInstanceProperty(Type type, string propertyName, Expression[] arguments)
  string GetArgTypesString(Expression[] arguments)
  PropertyInfo FindProperty(Type type, string propertyName, Expression[] arguments, BindingFlags flags)
  bool IsCompatible(PropertyInfo pi, Expression[] args)
  IndexExpression Property(Expression instance, PropertyInfo indexer, Expression[] arguments)
  IndexExpression Property(Expression instance, PropertyInfo indexer, IEnumerable`1<Expression> arguments)
  IndexExpression MakeIndexProperty(Expression instance, PropertyInfo indexer, string paramName, ReadOnlyCollection`1<Expression> argList)
  void ValidateIndexedProperty(Expression instance, PropertyInfo indexer, string paramName, ReadOnlyCollection`1& argList)
  void ValidateAccessor(Expression instance, MethodInfo method, ParameterInfo[] indexes, ReadOnlyCollection`1& arguments, string paramName)
  void ValidateAccessorArgumentTypes(MethodInfo method, ParameterInfo[] indexes, ReadOnlyCollection`1& arguments, string paramName)
  InvocationExpression Invoke(Expression expression)
  InvocationExpression Invoke(Expression expression, Expression arg0)
  InvocationExpression Invoke(Expression expression, Expression arg0, Expression arg1)
  InvocationExpression Invoke(Expression expression, Expression arg0, Expression arg1, Expression arg2)
  InvocationExpression Invoke(Expression expression, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  InvocationExpression Invoke(Expression expression, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
  InvocationExpression Invoke(Expression expression, Expression[] arguments)
  InvocationExpression Invoke(Expression expression, IEnumerable`1<Expression> arguments)
  MethodInfo GetInvokeMethod(Expression expression)
  LabelExpression Label(LabelTarget target)
  LabelExpression Label(LabelTarget target, Expression defaultValue)
  LabelTarget Label()
  LabelTarget Label(string name)
  LabelTarget Label(Type type)
  LabelTarget Label(Type type, string name)
  LambdaExpression CreateLambda(Type delegateType, Expression body, string name, bool tailCall, ReadOnlyCollection`1<ParameterExpression> parameters)
  Expression`1<TDelegate> Lambda(Expression body, ParameterExpression[] parameters)
  Expression`1<TDelegate> Lambda(Expression body, bool tailCall, ParameterExpression[] parameters)
  Expression`1<TDelegate> Lambda(Expression body, IEnumerable`1<ParameterExpression> parameters)
  Expression`1<TDelegate> Lambda(Expression body, bool tailCall, IEnumerable`1<ParameterExpression> parameters)
  Expression`1<TDelegate> Lambda(Expression body, string name, IEnumerable`1<ParameterExpression> parameters)
  Expression`1<TDelegate> Lambda(Expression body, string name, bool tailCall, IEnumerable`1<ParameterExpression> parameters)
  LambdaExpression Lambda(Expression body, ParameterExpression[] parameters)
  LambdaExpression Lambda(Expression body, bool tailCall, ParameterExpression[] parameters)
  LambdaExpression Lambda(Expression body, IEnumerable`1<ParameterExpression> parameters)
  LambdaExpression Lambda(Expression body, bool tailCall, IEnumerable`1<ParameterExpression> parameters)
  LambdaExpression Lambda(Type delegateType, Expression body, ParameterExpression[] parameters)
  LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, ParameterExpression[] parameters)
  LambdaExpression Lambda(Type delegateType, Expression body, IEnumerable`1<ParameterExpression> parameters)
  LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, IEnumerable`1<ParameterExpression> parameters)
  LambdaExpression Lambda(Expression body, string name, IEnumerable`1<ParameterExpression> parameters)
  LambdaExpression Lambda(Expression body, string name, bool tailCall, IEnumerable`1<ParameterExpression> parameters)
  LambdaExpression Lambda(Type delegateType, Expression body, string name, IEnumerable`1<ParameterExpression> parameters)
  LambdaExpression Lambda(Type delegateType, Expression body, string name, bool tailCall, IEnumerable`1<ParameterExpression> parameters)
  void ValidateLambdaArgs(Type delegateType, Expression& body, ReadOnlyCollection`1<ParameterExpression> parameters, string paramName)
  TryGetFuncActionArgsResult ValidateTryGetFuncActionArgs(Type[] typeArgs)
  Type GetFuncType(Type[] typeArgs)
  bool TryGetFuncType(Type[] typeArgs, Type& funcType)
  Type GetActionType(Type[] typeArgs)
  bool TryGetActionType(Type[] typeArgs, Type& actionType)
  Type GetDelegateType(Type[] typeArgs)
  ListInitExpression ListInit(NewExpression newExpression, Expression[] initializers)
  ListInitExpression ListInit(NewExpression newExpression, IEnumerable`1<Expression> initializers)
  ListInitExpression ListInit(NewExpression newExpression, MethodInfo addMethod, Expression[] initializers)
  ListInitExpression ListInit(NewExpression newExpression, MethodInfo addMethod, IEnumerable`1<Expression> initializers)
  ListInitExpression ListInit(NewExpression newExpression, ElementInit[] initializers)
  ListInitExpression ListInit(NewExpression newExpression, IEnumerable`1<ElementInit> initializers)
  LoopExpression Loop(Expression body)
  LoopExpression Loop(Expression body, LabelTarget break)
  LoopExpression Loop(Expression body, LabelTarget break, LabelTarget continue)
  MemberAssignment Bind(MemberInfo member, Expression expression)
  MemberAssignment Bind(MethodInfo propertyAccessor, Expression expression)
  void ValidateSettableFieldOrPropertyMember(MemberInfo member, Type& memberType)
  MemberExpression Field(Expression expression, FieldInfo field)
  MemberExpression Field(Expression expression, string fieldName)
  MemberExpression Field(Expression expression, Type type, string fieldName)
  MemberExpression Property(Expression expression, string propertyName)
  MemberExpression Property(Expression expression, Type type, string propertyName)
  MemberExpression Property(Expression expression, PropertyInfo property)
  MemberExpression Property(Expression expression, MethodInfo propertyAccessor)
  PropertyInfo GetProperty(MethodInfo mi, string paramName, int index)
  bool CheckMethod(MethodInfo method, MethodInfo propertyMethod)
  MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName)
  MemberExpression MakeMemberAccess(Expression expression, MemberInfo member)
  MemberInitExpression MemberInit(NewExpression newExpression, MemberBinding[] bindings)
  MemberInitExpression MemberInit(NewExpression newExpression, IEnumerable`1<MemberBinding> bindings)
  MemberListBinding ListBind(MemberInfo member, ElementInit[] initializers)
  MemberListBinding ListBind(MemberInfo member, IEnumerable`1<ElementInit> initializers)
  MemberListBinding ListBind(MethodInfo propertyAccessor, ElementInit[] initializers)
  MemberListBinding ListBind(MethodInfo propertyAccessor, IEnumerable`1<ElementInit> initializers)
  void ValidateListInitArgs(Type listType, ReadOnlyCollection`1<ElementInit> initializers, string listTypeParamName)
  MemberMemberBinding MemberBind(MemberInfo member, MemberBinding[] bindings)
  MemberMemberBinding MemberBind(MemberInfo member, IEnumerable`1<MemberBinding> bindings)
  MemberMemberBinding MemberBind(MethodInfo propertyAccessor, MemberBinding[] bindings)
  MemberMemberBinding MemberBind(MethodInfo propertyAccessor, IEnumerable`1<MemberBinding> bindings)
  void ValidateGettableFieldOrPropertyMember(MemberInfo member, Type& memberType)
  void ValidateMemberInitArgs(Type type, ReadOnlyCollection`1<MemberBinding> bindings)
  MethodCallExpression Call(MethodInfo method)
  MethodCallExpression Call(MethodInfo method, Expression arg0)
  MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1)
  MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
  MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
  MethodCallExpression Call(MethodInfo method, Expression[] arguments)
  MethodCallExpression Call(MethodInfo method, IEnumerable`1<Expression> arguments)
  MethodCallExpression Call(Expression instance, MethodInfo method)
  MethodCallExpression Call(Expression instance, MethodInfo method, Expression[] arguments)
  MethodCallExpression Call(Expression instance, MethodInfo method, Expression arg0)
  MethodCallExpression Call(Expression instance, MethodInfo method, Expression arg0, Expression arg1)
  MethodCallExpression Call(Expression instance, MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
  MethodCallExpression Call(Expression instance, string methodName, Type[] typeArguments, Expression[] arguments)
  MethodCallExpression Call(Type type, string methodName, Type[] typeArguments, Expression[] arguments)
  MethodCallExpression Call(Expression instance, MethodInfo method, IEnumerable`1<Expression> arguments)
  ParameterInfo[] ValidateMethodAndGetParameters(Expression instance, MethodInfo method)
  void ValidateStaticOrInstanceMethod(Expression instance, MethodInfo method)
  void ValidateCallInstanceType(Type instanceType, MethodInfo method)
  void ValidateArgumentTypes(MethodBase method, ExpressionType nodeKind, ReadOnlyCollection`1& arguments, string methodParamName)
  ParameterInfo[] GetParametersForValidation(MethodBase method, ExpressionType nodeKind)
  void ValidateArgumentCount(MethodBase method, ExpressionType nodeKind, int count, ParameterInfo[] pis)
  Expression ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arg, ParameterInfo pi, string methodParamName, string argumentParamName)
  bool TryQuote(Type parameterType, Expression& argument)
  MethodInfo FindMethod(Type type, string methodName, Type[] typeArgs, Expression[] args, BindingFlags flags)
  bool IsCompatible(MethodBase m, Expression[] arguments)
  MethodInfo ApplyTypeArgs(MethodInfo m, Type[] typeArgs)
  MethodCallExpression ArrayIndex(Expression array, Expression[] indexes)
  MethodCallExpression ArrayIndex(Expression array, IEnumerable`1<Expression> indexes)
  NewArrayExpression NewArrayInit(Type type, Expression[] initializers)
  NewArrayExpression NewArrayInit(Type type, IEnumerable`1<Expression> initializers)
  NewArrayExpression NewArrayBounds(Type type, Expression[] bounds)
  NewArrayExpression NewArrayBounds(Type type, IEnumerable`1<Expression> bounds)
  NewExpression New(ConstructorInfo constructor)
  NewExpression New(ConstructorInfo constructor, Expression[] arguments)
  NewExpression New(ConstructorInfo constructor, IEnumerable`1<Expression> arguments)
  NewExpression New(ConstructorInfo constructor, IEnumerable`1<Expression> arguments, IEnumerable`1<MemberInfo> members)
  NewExpression New(ConstructorInfo constructor, IEnumerable`1<Expression> arguments, MemberInfo[] members)
  NewExpression New(Type type)
  void ValidateNewArgs(ConstructorInfo constructor, ReadOnlyCollection`1& arguments, ReadOnlyCollection`1& members)
  void ValidateAnonymousTypeMember(MemberInfo& member, Type& memberType, string paramName, int index)
  void ValidateConstructor(ConstructorInfo constructor, string paramName)
  ParameterExpression Parameter(Type type)
  ParameterExpression Variable(Type type)
  ParameterExpression Parameter(Type type, string name)
  ParameterExpression Variable(Type type, string name)
  void Validate(Type type, bool allowByRef)
  RuntimeVariablesExpression RuntimeVariables(ParameterExpression[] variables)
  RuntimeVariablesExpression RuntimeVariables(IEnumerable`1<ParameterExpression> variables)
  SwitchCase SwitchCase(Expression body, Expression[] testValues)
  SwitchCase SwitchCase(Expression body, IEnumerable`1<Expression> testValues)
  SwitchExpression Switch(Expression switchValue, SwitchCase[] cases)
  SwitchExpression Switch(Expression switchValue, Expression defaultBody, SwitchCase[] cases)
  SwitchExpression Switch(Expression switchValue, Expression defaultBody, MethodInfo comparison, SwitchCase[] cases)
  SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, MethodInfo comparison, SwitchCase[] cases)
  SwitchExpression Switch(Expression switchValue, Expression defaultBody, MethodInfo comparison, IEnumerable`1<SwitchCase> cases)
  SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, MethodInfo comparison, IEnumerable`1<SwitchCase> cases)
  void ValidateSwitchCaseType(Expression case, bool customType, Type resultType, string parameterName)
  SymbolDocumentInfo SymbolDocument(string fileName)
  SymbolDocumentInfo SymbolDocument(string fileName, Guid language)
  SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor)
  SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor, Guid documentType)
  TryExpression TryFault(Expression body, Expression fault)
  TryExpression TryFinally(Expression body, Expression finally)
  TryExpression TryCatch(Expression body, CatchBlock[] handlers)
  TryExpression TryCatchFinally(Expression body, Expression finally, CatchBlock[] handlers)
  TryExpression MakeTry(Type type, Expression body, Expression finally, Expression fault, IEnumerable`1<CatchBlock> handlers)
  void ValidateTryAndCatchHaveSameType(Type type, Expression tryBody, ReadOnlyCollection`1<CatchBlock> handlers)
  TypeBinaryExpression TypeIs(Expression expression, Type type)
  TypeBinaryExpression TypeEqual(Expression expression, Type type)
  UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type)
  UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type, MethodInfo method)
  UnaryExpression GetUserDefinedUnaryOperatorOrThrow(ExpressionType unaryType, string name, Expression operand)
  UnaryExpression GetUserDefinedUnaryOperator(ExpressionType unaryType, string name, Expression operand)
  UnaryExpression GetMethodBasedUnaryOperator(ExpressionType unaryType, Expression operand, MethodInfo method)
  UnaryExpression GetUserDefinedCoercionOrThrow(ExpressionType coercionType, Expression expression, Type convertToType)
  UnaryExpression GetUserDefinedCoercion(ExpressionType coercionType, Expression expression, Type convertToType)
  UnaryExpression GetMethodBasedCoercionOperator(ExpressionType unaryType, Expression operand, Type convertToType, MethodInfo method)
  UnaryExpression Negate(Expression expression)
  UnaryExpression Negate(Expression expression, MethodInfo method)
  UnaryExpression UnaryPlus(Expression expression)
  UnaryExpression UnaryPlus(Expression expression, MethodInfo method)
  UnaryExpression NegateChecked(Expression expression)
  UnaryExpression NegateChecked(Expression expression, MethodInfo method)
  UnaryExpression Not(Expression expression)
  UnaryExpression Not(Expression expression, MethodInfo method)
  UnaryExpression IsFalse(Expression expression)
  UnaryExpression IsFalse(Expression expression, MethodInfo method)
  UnaryExpression IsTrue(Expression expression)
  UnaryExpression IsTrue(Expression expression, MethodInfo method)
  UnaryExpression OnesComplement(Expression expression)
  UnaryExpression OnesComplement(Expression expression, MethodInfo method)
  UnaryExpression TypeAs(Expression expression, Type type)
  UnaryExpression Unbox(Expression expression, Type type)
  UnaryExpression Convert(Expression expression, Type type)
  UnaryExpression Convert(Expression expression, Type type, MethodInfo method)
  UnaryExpression ConvertChecked(Expression expression, Type type)
  UnaryExpression ConvertChecked(Expression expression, Type type, MethodInfo method)
  UnaryExpression ArrayLength(Expression array)
  UnaryExpression Quote(Expression expression)
  UnaryExpression Rethrow()
  UnaryExpression Rethrow(Type type)
  UnaryExpression Throw(Expression value)
  UnaryExpression Throw(Expression value, Type type)
  UnaryExpression Increment(Expression expression)
  UnaryExpression Increment(Expression expression, MethodInfo method)
  UnaryExpression Decrement(Expression expression)
  UnaryExpression Decrement(Expression expression, MethodInfo method)
  UnaryExpression PreIncrementAssign(Expression expression)
  UnaryExpression PreIncrementAssign(Expression expression, MethodInfo method)
  UnaryExpression PreDecrementAssign(Expression expression)
  UnaryExpression PreDecrementAssign(Expression expression, MethodInfo method)
  UnaryExpression PostIncrementAssign(Expression expression)
  UnaryExpression PostIncrementAssign(Expression expression, MethodInfo method)
  UnaryExpression PostDecrementAssign(Expression expression)
  UnaryExpression PostDecrementAssign(Expression expression, MethodInfo method)
  UnaryExpression MakeOpAssignUnary(ExpressionType kind, Expression expression, MethodInfo method)
  void .cctor()
--------------------------------------------------
Класс: System.Linq.Expressions.BlockExpression
Наследуется от: Expression
Поля:
Свойства:
  ReadOnlyCollection`1<Expression> Expressions
  ReadOnlyCollection`1<ParameterExpression> Variables
  Expression Result
  ExpressionType NodeType
  Type Type
  int ExpressionCount
Методы:
  ReadOnlyCollection`1<Expression> get_Expressions()
  ReadOnlyCollection`1<ParameterExpression> get_Variables()
  Expression get_Result()
  void .ctor()
  Expression Accept(ExpressionVisitor visitor)
  ExpressionType get_NodeType()
  Type get_Type()
  BlockExpression Update(IEnumerable`1<ParameterExpression> variables, IEnumerable`1<Expression> expressions)
  bool SameVariables(ICollection`1<ParameterExpression> variables)
  bool SameExpressions(ICollection`1<Expression> expressions)
  Expression GetExpression(int index)
  int get_ExpressionCount()
  ReadOnlyCollection`1<Expression> GetOrMakeExpressions()
  ReadOnlyCollection`1<ParameterExpression> GetOrMakeVariables()
  BlockExpression Rewrite(ReadOnlyCollection`1<ParameterExpression> variables, Expression[] args)
  ReadOnlyCollection`1<Expression> ReturnReadOnlyExpressions(BlockExpression provider, Object& collection)
--------------------------------------------------
Класс: System.Linq.Expressions.Block2
Наследуется от: BlockExpression
Поля:
  object _arg0
  Expression _arg1
Свойства:
  int ExpressionCount
Методы:
  void .ctor(Expression arg0, Expression arg1)
  Expression GetExpression(int index)
  bool SameExpressions(ICollection`1<Expression> expressions)
  int get_ExpressionCount()
  ReadOnlyCollection`1<Expression> GetOrMakeExpressions()
  BlockExpression Rewrite(ReadOnlyCollection`1<ParameterExpression> variables, Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.Block3
Наследуется от: BlockExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
Свойства:
  int ExpressionCount
Методы:
  void .ctor(Expression arg0, Expression arg1, Expression arg2)
  bool SameExpressions(ICollection`1<Expression> expressions)
  Expression GetExpression(int index)
  int get_ExpressionCount()
  ReadOnlyCollection`1<Expression> GetOrMakeExpressions()
  BlockExpression Rewrite(ReadOnlyCollection`1<ParameterExpression> variables, Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.Block4
Наследуется от: BlockExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
  Expression _arg3
Свойства:
  int ExpressionCount
Методы:
  void .ctor(Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  bool SameExpressions(ICollection`1<Expression> expressions)
  Expression GetExpression(int index)
  int get_ExpressionCount()
  ReadOnlyCollection`1<Expression> GetOrMakeExpressions()
  BlockExpression Rewrite(ReadOnlyCollection`1<ParameterExpression> variables, Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.Block5
Наследуется от: BlockExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
  Expression _arg3
  Expression _arg4
Свойства:
  int ExpressionCount
Методы:
  void .ctor(Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
  Expression GetExpression(int index)
  bool SameExpressions(ICollection`1<Expression> expressions)
  int get_ExpressionCount()
  ReadOnlyCollection`1<Expression> GetOrMakeExpressions()
  BlockExpression Rewrite(ReadOnlyCollection`1<ParameterExpression> variables, Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.BlockN
Наследуется от: BlockExpression
Поля:
  IReadOnlyList`1<Expression> _expressions
Свойства:
  int ExpressionCount
Методы:
  void .ctor(IReadOnlyList`1<Expression> expressions)
  bool SameExpressions(ICollection`1<Expression> expressions)
  Expression GetExpression(int index)
  int get_ExpressionCount()
  ReadOnlyCollection`1<Expression> GetOrMakeExpressions()
  BlockExpression Rewrite(ReadOnlyCollection`1<ParameterExpression> variables, Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.ScopeExpression
Наследуется от: BlockExpression
Поля:
  IReadOnlyList`1<ParameterExpression> _variables
Свойства:
  IReadOnlyList`1<ParameterExpression> VariablesList
Методы:
  void .ctor(IReadOnlyList`1<ParameterExpression> variables)
  bool SameVariables(ICollection`1<ParameterExpression> variables)
  ReadOnlyCollection`1<ParameterExpression> GetOrMakeVariables()
  IReadOnlyList`1<ParameterExpression> get_VariablesList()
  IReadOnlyList`1<ParameterExpression> ReuseOrValidateVariables(ReadOnlyCollection`1<ParameterExpression> variables)
--------------------------------------------------
Класс: System.Linq.Expressions.Scope1
Наследуется от: ScopeExpression
Поля:
  object _body
Свойства:
  int ExpressionCount
Методы:
  void .ctor(IReadOnlyList`1<ParameterExpression> variables, Expression body)
  void .ctor(IReadOnlyList`1<ParameterExpression> variables, object body)
  bool SameExpressions(ICollection`1<Expression> expressions)
  Expression GetExpression(int index)
  int get_ExpressionCount()
  ReadOnlyCollection`1<Expression> GetOrMakeExpressions()
  BlockExpression Rewrite(ReadOnlyCollection`1<ParameterExpression> variables, Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.ScopeN
Наследуется от: ScopeExpression
Поля:
  IReadOnlyList`1<Expression> _body
Свойства:
  IReadOnlyList`1<Expression> Body
  int ExpressionCount
Методы:
  void .ctor(IReadOnlyList`1<ParameterExpression> variables, IReadOnlyList`1<Expression> body)
  bool SameExpressions(ICollection`1<Expression> expressions)
  IReadOnlyList`1<Expression> get_Body()
  Expression GetExpression(int index)
  int get_ExpressionCount()
  ReadOnlyCollection`1<Expression> GetOrMakeExpressions()
  BlockExpression Rewrite(ReadOnlyCollection`1<ParameterExpression> variables, Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.ScopeWithType
Наследуется от: ScopeN
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
Методы:
  void .ctor(IReadOnlyList`1<ParameterExpression> variables, IReadOnlyList`1<Expression> expressions, Type type)
  Type get_Type()
  BlockExpression Rewrite(ReadOnlyCollection`1<ParameterExpression> variables, Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.BlockExpressionList
Наследуется от: object
Поля:
  BlockExpression _block
  Expression _arg0
Свойства:
  Expression Item
  int Count
  bool IsReadOnly
Методы:
  void .ctor(BlockExpression provider, Expression arg0)
  int IndexOf(Expression item)
  void Insert(int index, Expression item)
  void RemoveAt(int index)
  Expression get_Item(int index)
  void set_Item(int index, Expression value)
  void Add(Expression item)
  void Clear()
  bool Contains(Expression item)
  void CopyTo(Expression[] array, int index)
  int get_Count()
  bool get_IsReadOnly()
  bool Remove(Expression item)
  IEnumerator`1<Expression> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Expressions.CatchBlock
Наследуется от: object
Поля:
  ParameterExpression <Variable>k__BackingField
  Type <Test>k__BackingField
  Expression <Body>k__BackingField
  Expression <Filter>k__BackingField
Свойства:
  ParameterExpression Variable
  Type Test
  Expression Body
  Expression Filter
Методы:
  void .ctor(Type test, ParameterExpression variable, Expression body, Expression filter)
  ParameterExpression get_Variable()
  Type get_Test()
  Expression get_Body()
  Expression get_Filter()
  string ToString()
  CatchBlock Update(ParameterExpression variable, Expression filter, Expression body)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.ArrayBuilderExtensions
Наследуется от: object
Поля:
Свойства:
Методы:
  ReadOnlyCollection`1<T> ToReadOnly(ArrayBuilder`1<T> builder)
--------------------------------------------------
Класс: System.Linq.Expressions.AnalyzeTypeIsResult
Наследуется от: Enum
Поля:
  int value__
  AnalyzeTypeIsResult KnownFalse
  AnalyzeTypeIsResult KnownTrue
  AnalyzeTypeIsResult KnownAssignable
  AnalyzeTypeIsResult Unknown
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.Expressions.ConstantCheck
Наследуется от: object
Поля:
Свойства:
Методы:
  bool IsNull(Expression e)
  AnalyzeTypeIsResult AnalyzeTypeIs(TypeBinaryExpression typeIs)
  AnalyzeTypeIsResult AnalyzeTypeIs(Expression operand, Type testType)
--------------------------------------------------
Класс: System.Linq.Expressions.ConditionalExpression
Наследуется от: Expression
Поля:
  Expression <Test>k__BackingField
  Expression <IfTrue>k__BackingField
Свойства:
  ExpressionType NodeType
  Type Type
  Expression Test
  Expression IfTrue
  Expression IfFalse
Методы:
  void .ctor(Expression test, Expression ifTrue)
  ConditionalExpression Make(Expression test, Expression ifTrue, Expression ifFalse, Type type)
  ExpressionType get_NodeType()
  Type get_Type()
  Expression get_Test()
  Expression get_IfTrue()
  Expression get_IfFalse()
  Expression GetFalse()
  Expression Accept(ExpressionVisitor visitor)
  ConditionalExpression Update(Expression test, Expression ifTrue, Expression ifFalse)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.FullConditionalExpression
Наследуется от: ConditionalExpression
Поля:
  Expression _false
Свойства:
Методы:
  void .ctor(Expression test, Expression ifTrue, Expression ifFalse)
  Expression GetFalse()
--------------------------------------------------
Класс: System.Linq.Expressions.FullConditionalExpressionWithType
Наследуется от: FullConditionalExpression
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
Методы:
  void .ctor(Expression test, Expression ifTrue, Expression ifFalse, Type type)
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.ConstantExpression
Наследуется от: Expression
Поля:
  object <Value>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  object Value
Методы:
  void .ctor(object value)
  Type get_Type()
  ExpressionType get_NodeType()
  object get_Value()
  Expression Accept(ExpressionVisitor visitor)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.TypedConstantExpression
Наследуется от: ConstantExpression
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
Методы:
  void .ctor(object value, Type type)
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.DebugInfoExpression
Наследуется от: Expression
Поля:
  SymbolDocumentInfo <Document>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  int StartLine
  int StartColumn
  int EndLine
  int EndColumn
  SymbolDocumentInfo Document
  bool IsClear
Методы:
  void .ctor(SymbolDocumentInfo document)
  Type get_Type()
  ExpressionType get_NodeType()
  int get_StartLine()
  int get_StartColumn()
  int get_EndLine()
  int get_EndColumn()
  SymbolDocumentInfo get_Document()
  bool get_IsClear()
  Expression Accept(ExpressionVisitor visitor)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.SpanDebugInfoExpression
Наследуется от: DebugInfoExpression
Поля:
  int _startLine
  int _startColumn
  int _endLine
  int _endColumn
Свойства:
  int StartLine
  int StartColumn
  int EndLine
  int EndColumn
  bool IsClear
Методы:
  void .ctor(SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn)
  int get_StartLine()
  int get_StartColumn()
  int get_EndLine()
  int get_EndColumn()
  bool get_IsClear()
  Expression Accept(ExpressionVisitor visitor)
--------------------------------------------------
Класс: System.Linq.Expressions.ClearDebugInfoExpression
Наследуется от: DebugInfoExpression
Поля:
Свойства:
  bool IsClear
  int StartLine
  int StartColumn
  int EndLine
  int EndColumn
Методы:
  void .ctor(SymbolDocumentInfo document)
  bool get_IsClear()
  int get_StartLine()
  int get_StartColumn()
  int get_EndLine()
  int get_EndColumn()
--------------------------------------------------
Класс: System.Linq.Expressions.DebugViewWriter
Наследуется от: ExpressionVisitor
Поля:
  int Tab
  int MaxColumn
  TextWriter _out
  int _column
  Stack`1<int> _stack
  int _delta
  Flow _flow
  Queue`1<LambdaExpression> _lambdas
  Dictionary`2<LambdaExpression, int> _lambdaIds
  Dictionary`2<ParameterExpression, int> _paramIds
  Dictionary`2<LabelTarget, int> _labelIds
Свойства:
  int Base
  int Delta
  int Depth
Методы:
  void .ctor(TextWriter file)
  int get_Base()
  int get_Delta()
  int get_Depth()
  void Indent()
  void Dedent()
  void NewLine()
  int GetId(T e, Dictionary`2& ids)
  int GetLambdaId(LambdaExpression le)
  int GetParamId(ParameterExpression p)
  int GetLabelTargetId(LabelTarget target)
  void WriteTo(Expression node, TextWriter writer)
  void WriteTo(Expression node)
  void Out(string s)
  void Out(Flow before, string s)
  void Out(string s, Flow after)
  void Out(Flow before, string s, Flow after)
  void WriteLine()
  void Write(string s)
  Flow GetFlow(Flow flow)
  Flow CheckBreak(Flow flow)
  void VisitExpressions(char open, IReadOnlyList`1<T> expressions)
  void VisitExpressions(char open, char separator, IReadOnlyList`1<T> expressions)
  void VisitDeclarations(IReadOnlyList`1<ParameterExpression> expressions)
  void VisitExpressions(char open, char separator, IReadOnlyList`1<T> expressions, Action`1<T> visit)
  Expression VisitBinary(BinaryExpression node)
  Expression VisitParameter(ParameterExpression node)
  Expression VisitLambda(Expression`1<T> node)
  bool IsSimpleExpression(Expression node)
  Expression VisitConditional(ConditionalExpression node)
  Expression VisitConstant(ConstantExpression node)
  string GetConstantValueSuffix(Type type)
  Expression VisitRuntimeVariables(RuntimeVariablesExpression node)
  void OutMember(Expression node, Expression instance, MemberInfo member)
  Expression VisitMember(MemberExpression node)
  Expression VisitInvocation(InvocationExpression node)
  bool NeedsParentheses(Expression parent, Expression child)
  int GetOperatorPrecedence(Expression node)
  void ParenthesizedVisit(Expression parent, Expression nodeToVisit)
  Expression VisitMethodCall(MethodCallExpression node)
  Expression VisitNewArray(NewArrayExpression node)
  Expression VisitNew(NewExpression node)
  ElementInit VisitElementInit(ElementInit node)
  Expression VisitListInit(ListInitExpression node)
  MemberAssignment VisitMemberAssignment(MemberAssignment assignment)
  MemberListBinding VisitMemberListBinding(MemberListBinding binding)
  MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding)
  Expression VisitMemberInit(MemberInitExpression node)
  Expression VisitTypeBinary(TypeBinaryExpression node)
  Expression VisitUnary(UnaryExpression node)
  Expression VisitBlock(BlockExpression node)
  Expression VisitDefault(DefaultExpression node)
  Expression VisitLabel(LabelExpression node)
  Expression VisitGoto(GotoExpression node)
  Expression VisitLoop(LoopExpression node)
  SwitchCase VisitSwitchCase(SwitchCase node)
  Expression VisitSwitch(SwitchExpression node)
  CatchBlock VisitCatchBlock(CatchBlock node)
  Expression VisitTry(TryExpression node)
  Expression VisitIndex(IndexExpression node)
  Expression VisitExtension(Expression node)
  Expression VisitDebugInfo(DebugInfoExpression node)
  void DumpLabel(LabelTarget target)
  string GetLabelTargetName(LabelTarget target)
  void WriteLambda(LambdaExpression lambda)
  string GetLambdaName(LambdaExpression lambda)
  bool ContainsWhiteSpace(string name)
  string QuoteName(string name)
  string GetDisplayName(string name)
  void <VisitExpressions>b__37_0(T e)
  void <VisitDeclarations>b__38_0(ParameterExpression variable)
  void <VisitListInit>b__58_0(ElementInit e)
  void <VisitMemberListBinding>b__60_0(ElementInit e)
  void <VisitMemberMemberBinding>b__61_0(MemberBinding e)
  void <VisitMemberInit>b__62_0(MemberBinding e)
--------------------------------------------------
Класс: System.Linq.Expressions.DefaultExpression
Наследуется от: Expression
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
Методы:
  void .ctor(Type type)
  Type get_Type()
  ExpressionType get_NodeType()
  Expression Accept(ExpressionVisitor visitor)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.DynamicExpression
Наследуется от: Expression
Поля:
  CallSiteBinder <Binder>k__BackingField
  Type <DelegateType>k__BackingField
Свойства:
  bool CanReduce
  Type Type
  ExpressionType NodeType
  CallSiteBinder Binder
  Type DelegateType
  ReadOnlyCollection`1<Expression> Arguments
  int System.Linq.Expressions.IArgumentProvider.ArgumentCount
Методы:
  void .ctor(Type delegateType, CallSiteBinder binder)
  bool get_CanReduce()
  Expression Reduce()
  DynamicExpression Make(Type returnType, Type delegateType, CallSiteBinder binder, ReadOnlyCollection`1<Expression> arguments)
  DynamicExpression Make(Type returnType, Type delegateType, CallSiteBinder binder, Expression arg0)
  DynamicExpression Make(Type returnType, Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1)
  DynamicExpression Make(Type returnType, Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2)
  DynamicExpression Make(Type returnType, Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  Type get_Type()
  ExpressionType get_NodeType()
  CallSiteBinder get_Binder()
  Type get_DelegateType()
  ReadOnlyCollection`1<Expression> get_Arguments()
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  Expression Accept(ExpressionVisitor visitor)
  DynamicExpression Rewrite(Expression[] args)
  DynamicExpression Update(IEnumerable`1<Expression> arguments)
  bool SameArguments(ICollection`1<Expression> arguments)
  Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index)
  int System.Linq.Expressions.IArgumentProvider.get_ArgumentCount()
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression[] arguments)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, IEnumerable`1<Expression> arguments)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, IEnumerable`1<Expression> arguments)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression[] arguments)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  Expression System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[] args)
  object System.Linq.Expressions.IDynamicExpression.CreateCallSite()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.DynamicExpressionN
Наследуется от: DynamicExpression
Поля:
  IReadOnlyList`1<Expression> _arguments
Свойства:
  int System.Linq.Expressions.IArgumentProvider.ArgumentCount
Методы:
  void .ctor(Type delegateType, CallSiteBinder binder, IReadOnlyList`1<Expression> arguments)
  Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index)
  bool SameArguments(ICollection`1<Expression> arguments)
  int System.Linq.Expressions.IArgumentProvider.get_ArgumentCount()
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  DynamicExpression Rewrite(Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.TypedDynamicExpressionN
Наследуется от: DynamicExpressionN
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
Методы:
  void .ctor(Type returnType, Type delegateType, CallSiteBinder binder, IReadOnlyList`1<Expression> arguments)
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.DynamicExpression1
Наследуется от: DynamicExpression
Поля:
  object _arg0
Свойства:
  int System.Linq.Expressions.IArgumentProvider.ArgumentCount
Методы:
  void .ctor(Type delegateType, CallSiteBinder binder, Expression arg0)
  Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index)
  int System.Linq.Expressions.IArgumentProvider.get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  DynamicExpression Rewrite(Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.TypedDynamicExpression1
Наследуется от: DynamicExpression1
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
Методы:
  void .ctor(Type retType, Type delegateType, CallSiteBinder binder, Expression arg0)
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.DynamicExpression2
Наследуется от: DynamicExpression
Поля:
  object _arg0
  Expression _arg1
Свойства:
  int System.Linq.Expressions.IArgumentProvider.ArgumentCount
Методы:
  void .ctor(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1)
  Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index)
  int System.Linq.Expressions.IArgumentProvider.get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  DynamicExpression Rewrite(Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.TypedDynamicExpression2
Наследуется от: DynamicExpression2
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
Методы:
  void .ctor(Type retType, Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1)
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.DynamicExpression3
Наследуется от: DynamicExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
Свойства:
  int System.Linq.Expressions.IArgumentProvider.ArgumentCount
Методы:
  void .ctor(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2)
  Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index)
  int System.Linq.Expressions.IArgumentProvider.get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  DynamicExpression Rewrite(Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.TypedDynamicExpression3
Наследуется от: DynamicExpression3
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
Методы:
  void .ctor(Type retType, Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2)
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.DynamicExpression4
Наследуется от: DynamicExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
  Expression _arg3
Свойства:
  int System.Linq.Expressions.IArgumentProvider.ArgumentCount
Методы:
  void .ctor(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index)
  int System.Linq.Expressions.IArgumentProvider.get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  DynamicExpression Rewrite(Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.TypedDynamicExpression4
Наследуется от: DynamicExpression4
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
Методы:
  void .ctor(Type retType, Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.ExpressionExtension
Наследуется от: object
Поля:
Свойства:
Методы:
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression[] arguments)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, IEnumerable`1<Expression> arguments)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2)
  DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  MethodInfo GetValidMethodForDynamic(Type delegateType)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression[] arguments)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, IEnumerable`1<Expression> arguments)
  DynamicExpression MakeDynamic(CallSiteBinder binder, Type returnType, ReadOnlyCollection`1<Expression> arguments)
  void ValidateDynamicArgument(Expression arg, string paramName)
  void ValidateDynamicArgument(Expression arg, string paramName, int index)
--------------------------------------------------
Класс: System.Linq.Expressions.DynamicExpressionVisitor
Наследуется от: ExpressionVisitor
Поля:
Свойства:
Методы:
  Expression VisitDynamic(DynamicExpression node)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.ElementInit
Наследуется от: object
Поля:
  MethodInfo <AddMethod>k__BackingField
  ReadOnlyCollection`1<Expression> <Arguments>k__BackingField
Свойства:
  MethodInfo AddMethod
  ReadOnlyCollection`1<Expression> Arguments
  int ArgumentCount
Методы:
  void .ctor(MethodInfo addMethod, ReadOnlyCollection`1<Expression> arguments)
  MethodInfo get_AddMethod()
  ReadOnlyCollection`1<Expression> get_Arguments()
  Expression GetArgument(int index)
  int get_ArgumentCount()
  string ToString()
  ElementInit Update(IEnumerable`1<Expression> arguments)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.Error
Наследуется от: object
Поля:
Свойства:
Методы:
  Exception ReducibleMustOverrideReduce()
  Exception ArgCntMustBeGreaterThanNameCnt()
  Exception InvalidMetaObjectCreated(object p0)
  Exception AmbiguousMatchInExpandoObject(object p0)
  Exception SameKeyExistsInExpando(object key)
  Exception KeyDoesNotExistInExpando(object p0)
  Exception CollectionModifiedWhileEnumerating()
  Exception CollectionReadOnly()
  Exception MustReduceToDifferent()
  Exception BinderNotCompatibleWithCallSite(object p0, object p1, object p2)
  Exception DynamicBindingNeedsRestrictions(object p0, object p1)
  Exception DynamicObjectResultNotAssignable(object p0, object p1, object p2, object p3)
  Exception DynamicBinderResultNotAssignable(object p0, object p1, object p2)
  Exception BindingCannotBeNull()
  Exception ReducedNotCompatible()
  Exception SetterHasNoParams(string paramName)
  Exception PropertyCannotHaveRefType(string paramName)
  Exception IndexesOfSetGetMustMatch(string paramName)
  Exception TypeParameterIsNotDelegate(object p0)
  Exception FirstArgumentMustBeCallSite()
  Exception AccessorsCannotHaveVarArgs(string paramName)
  Exception AccessorsCannotHaveByRefArgs(string paramName)
  Exception AccessorsCannotHaveByRefArgs(string paramName, int index)
  Exception TypeMustBeDerivedFromSystemDelegate()
  Exception NoOrInvalidRuleProduced()
  Exception BoundsCannotBeLessThanOne(string paramName)
  Exception TypeMustNotBeByRef(string paramName)
  Exception TypeMustNotBePointer(string paramName)
  Exception SetterMustBeVoid(string paramName)
  Exception PropertyTypeMustMatchGetter(string paramName)
  Exception PropertyTypeMustMatchSetter(string paramName)
  Exception BothAccessorsMustBeStatic(string paramName)
  Exception OnlyStaticFieldsHaveNullInstance(string paramName)
  Exception OnlyStaticPropertiesHaveNullInstance(string paramName)
  Exception OnlyStaticMethodsHaveNullInstance()
  Exception PropertyTypeCannotBeVoid(string paramName)
  Exception InvalidUnboxType(string paramName)
  Exception ExpressionMustBeWriteable(string paramName)
  Exception ArgumentMustNotHaveValueType(string paramName)
  Exception MustBeReducible()
  Exception AllTestValuesMustHaveSameType(string paramName)
  Exception AllCaseBodiesMustHaveSameType(string paramName)
  Exception DefaultBodyMustBeSupplied(string paramName)
  Exception LabelMustBeVoidOrHaveExpression(string paramName)
  Exception LabelTypeMustBeVoid(string paramName)
  Exception QuotedExpressionMustBeLambda(string paramName)
  Exception VariableMustNotBeByRef(object p0, object p1, string paramName)
  Exception VariableMustNotBeByRef(object p0, object p1, string paramName, int index)
  Exception DuplicateVariable(object p0, string paramName)
  Exception DuplicateVariable(object p0, string paramName, int index)
  Exception StartEndMustBeOrdered()
  Exception FaultCannotHaveCatchOrFinally(string paramName)
  Exception TryMustHaveCatchFinallyOrFault()
  Exception BodyOfCatchMustHaveSameTypeAsBodyOfTry()
  Exception ExtensionNodeMustOverrideProperty(object p0)
  Exception UserDefinedOperatorMustBeStatic(object p0, string paramName)
  Exception UserDefinedOperatorMustNotBeVoid(object p0, string paramName)
  Exception CoercionOperatorNotDefined(object p0, object p1)
  Exception UnaryOperatorNotDefined(object p0, object p1)
  Exception BinaryOperatorNotDefined(object p0, object p1, object p2)
  Exception ReferenceEqualityNotDefined(object p0, object p1)
  Exception OperandTypesDoNotMatchParameters(object p0, object p1)
  Exception OverloadOperatorTypeDoesNotMatchConversionType(object p0, object p1)
  Exception ConversionIsNotSupportedForArithmeticTypes()
  Exception ArgumentTypeCannotBeVoid()
  Exception ArgumentMustBeArray(string paramName)
  Exception ArgumentMustBeBoolean(string paramName)
  Exception EqualityMustReturnBoolean(object p0, string paramName)
  Exception ArgumentMustBeFieldInfoOrPropertyInfo(string paramName)
  Exception ArgumentMustBeFieldInfoOrPropertyInfoOrMethod(string paramName)
  Exception ArgumentMustBeFieldInfoOrPropertyInfoOrMethod(string paramName, int index)
  Exception ArgumentMustBeInstanceMember(string paramName)
  Exception ArgumentMustBeInstanceMember(string paramName, int index)
  Exception ArgumentMustBeInteger(string paramName)
  Exception ArgumentMustBeInteger(string paramName, int index)
  Exception ArgumentMustBeArrayIndexType(string paramName)
  Exception ArgumentMustBeArrayIndexType(string paramName, int index)
  Exception ArgumentMustBeSingleDimensionalArrayType(string paramName)
  Exception ArgumentTypesMustMatch()
  Exception ArgumentTypesMustMatch(string paramName)
  Exception CannotAutoInitializeValueTypeElementThroughProperty(object p0)
  Exception CannotAutoInitializeValueTypeMemberThroughProperty(object p0)
  Exception IncorrectTypeForTypeAs(object p0, string paramName)
  Exception CoalesceUsedOnNonNullType()
  Exception ExpressionTypeCannotInitializeArrayType(object p0, object p1)
  Exception ArgumentTypeDoesNotMatchMember(object p0, object p1, string paramName)
  Exception ArgumentTypeDoesNotMatchMember(object p0, object p1, string paramName, int index)
  Exception ArgumentMemberNotDeclOnType(object p0, object p1, string paramName)
  Exception ArgumentMemberNotDeclOnType(object p0, object p1, string paramName, int index)
  Exception ExpressionTypeDoesNotMatchReturn(object p0, object p1)
  Exception ExpressionTypeDoesNotMatchAssignment(object p0, object p1)
  Exception ExpressionTypeDoesNotMatchLabel(object p0, object p1)
  Exception ExpressionTypeNotInvocable(object p0, string paramName)
  Exception FieldNotDefinedForType(object p0, object p1)
  Exception InstanceFieldNotDefinedForType(object p0, object p1)
  Exception FieldInfoNotDefinedForType(object p0, object p1, object p2)
  Exception IncorrectNumberOfIndexes()
  Exception IncorrectNumberOfLambdaDeclarationParameters()
  Exception IncorrectNumberOfMembersForGivenConstructor()
  Exception IncorrectNumberOfArgumentsForMembers()
  Exception LambdaTypeMustBeDerivedFromSystemDelegate(string paramName)
  Exception MemberNotFieldOrProperty(object p0, string paramName)
  Exception MethodContainsGenericParameters(object p0, string paramName)
  Exception MethodIsGeneric(object p0, string paramName)
  Exception MethodNotPropertyAccessor(object p0, object p1, string paramName)
  Exception MethodNotPropertyAccessor(object p0, object p1, string paramName, int index)
  Exception PropertyDoesNotHaveGetter(object p0, string paramName)
  Exception PropertyDoesNotHaveGetter(object p0, string paramName, int index)
  Exception PropertyDoesNotHaveSetter(object p0, string paramName)
  Exception PropertyDoesNotHaveAccessor(object p0, string paramName)
  Exception NotAMemberOfType(object p0, object p1, string paramName)
  Exception NotAMemberOfType(object p0, object p1, string paramName, int index)
  Exception NotAMemberOfAnyType(object p0, string paramName)
  Exception ParameterExpressionNotValidAsDelegate(object p0, object p1)
  Exception PropertyNotDefinedForType(object p0, object p1, string paramName)
  Exception InstancePropertyNotDefinedForType(object p0, object p1, string paramName)
  Exception InstancePropertyWithoutParameterNotDefinedForType(object p0, object p1)
  Exception InstancePropertyWithSpecifiedParametersNotDefinedForType(object p0, object p1, object p2, string paramName)
  Exception InstanceAndMethodTypeMismatch(object p0, object p1, object p2)
  Exception TypeMissingDefaultConstructor(object p0, string paramName)
  Exception ElementInitializerMethodNotAdd(string paramName)
  Exception ElementInitializerMethodNoRefOutParam(object p0, object p1, string paramName)
  Exception ElementInitializerMethodWithZeroArgs(string paramName)
  Exception ElementInitializerMethodStatic(string paramName)
  Exception TypeNotIEnumerable(object p0, string paramName)
  Exception UnhandledBinary(object p0, string paramName)
  Exception UnhandledBinding()
  Exception UnhandledBindingType(object p0)
  Exception UnhandledUnary(object p0, string paramName)
  Exception UnknownBindingType(int index)
  Exception UserDefinedOpMustHaveConsistentTypes(object p0, object p1)
  Exception UserDefinedOpMustHaveValidReturnType(object p0, object p1)
  Exception LogicalOperatorMustHaveBooleanOperators(object p0, object p1)
  Exception MethodWithArgsDoesNotExistOnType(object p0, object p1)
  Exception GenericMethodWithArgsDoesNotExistOnType(object p0, object p1)
  Exception MethodWithMoreThanOneMatch(object p0, object p1)
  Exception PropertyWithMoreThanOneMatch(object p0, object p1)
  Exception IncorrectNumberOfTypeArgsForFunc(string paramName)
  Exception IncorrectNumberOfTypeArgsForAction(string paramName)
  Exception ArgumentCannotBeOfTypeVoid(string paramName)
  Exception OutOfRange(string paramName, object p1)
  Exception LabelTargetAlreadyDefined(object p0)
  Exception LabelTargetUndefined(object p0)
  Exception ControlCannotLeaveFinally()
  Exception ControlCannotLeaveFilterTest()
  Exception AmbiguousJump(object p0)
  Exception ControlCannotEnterTry()
  Exception ControlCannotEnterExpression()
  Exception NonLocalJumpWithValue(object p0)
  Exception CannotCompileConstant(object p0)
  Exception CannotCompileDynamic()
  Exception MethodBuilderDoesNotHaveTypeBuilder()
  Exception InvalidLvalue(ExpressionType p0)
  Exception UndefinedVariable(object p0, object p1, object p2)
  Exception CannotCloseOverByRef(object p0, object p1)
  Exception UnexpectedVarArgsCall(object p0)
  Exception RethrowRequiresCatch()
  Exception TryNotAllowedInFilter()
  Exception MustRewriteToSameNode(object p0, object p1, object p2)
  Exception MustRewriteChildToSameType(object p0, object p1, object p2)
  Exception MustRewriteWithoutMethod(object p0, object p1)
  Exception TryNotSupportedForMethodsWithRefArgs(object p0)
  Exception TryNotSupportedForValueTypeInstances(object p0)
  Exception TestValueTypeDoesNotMatchComparisonMethodParameter(object p0, object p1)
  Exception SwitchValueTypeDoesNotMatchComparisonMethodParameter(object p0, object p1)
  Exception ArgumentOutOfRange(string paramName)
  Exception NotSupported()
  Exception NonStaticConstructorRequired(string paramName)
  Exception NonAbstractConstructorRequired()
  Exception InvalidProgram()
  Exception EnumerationIsDone()
  Exception TypeContainsGenericParameters(object p0, string paramName)
  Exception TypeContainsGenericParameters(object p0, string paramName, int index)
  Exception TypeIsGeneric(object p0, string paramName)
  Exception TypeIsGeneric(object p0, string paramName, int index)
  Exception IncorrectNumberOfConstructorArguments()
  Exception ExpressionTypeDoesNotMatchMethodParameter(object p0, object p1, object p2, string paramName)
  Exception ExpressionTypeDoesNotMatchMethodParameter(object p0, object p1, object p2, string paramName, int index)
  Exception ExpressionTypeDoesNotMatchParameter(object p0, object p1, string paramName)
  Exception ExpressionTypeDoesNotMatchParameter(object p0, object p1, string paramName, int index)
  Exception IncorrectNumberOfLambdaArguments()
  Exception IncorrectNumberOfMethodCallArguments(object p0, string paramName)
  Exception ExpressionTypeDoesNotMatchConstructorParameter(object p0, object p1, string paramName)
  Exception ExpressionTypeDoesNotMatchConstructorParameter(object p0, object p1, string paramName, int index)
  Exception ExpressionMustBeReadable(string paramName)
  Exception ExpressionMustBeReadable(string paramName, int index)
  Exception InvalidArgumentValue(string paramName)
  Exception NonEmptyCollectionRequired(string paramName)
  Exception InvalidNullValue(Type type, string paramName)
  Exception InvalidTypeException(object value, Type type, string paramName)
  string GetParamName(string paramName, int index)
--------------------------------------------------
Класс: System.Linq.Expressions.ExpressionStringBuilder
Наследуется от: ExpressionVisitor
Поля:
  StringBuilder _out
  Dictionary`2<object, int> _ids
Свойства:
Методы:
  void .ctor()
  string ToString()
  int GetLabelId(LabelTarget label)
  int GetParamId(ParameterExpression p)
  int GetId(object o)
  void Out(string s)
  void Out(char c)
  string ExpressionToString(Expression node)
  string CatchBlockToString(CatchBlock node)
  string SwitchCaseToString(SwitchCase node)
  string MemberBindingToString(MemberBinding node)
  string ElementInitBindingToString(ElementInit node)
  void VisitExpressions(char open, ReadOnlyCollection`1<T> expressions, char close)
  void VisitExpressions(char open, ReadOnlyCollection`1<T> expressions, char close, string seperator)
  Expression VisitBinary(BinaryExpression node)
  Expression VisitParameter(ParameterExpression node)
  Expression VisitLambda(Expression`1<T> node)
  Expression VisitListInit(ListInitExpression node)
  Expression VisitConditional(ConditionalExpression node)
  Expression VisitConstant(ConstantExpression node)
  Expression VisitDebugInfo(DebugInfoExpression node)
  Expression VisitRuntimeVariables(RuntimeVariablesExpression node)
  void OutMember(Expression instance, MemberInfo member)
  Expression VisitMember(MemberExpression node)
  Expression VisitMemberInit(MemberInitExpression node)
  MemberAssignment VisitMemberAssignment(MemberAssignment assignment)
  MemberListBinding VisitMemberListBinding(MemberListBinding binding)
  MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding)
  ElementInit VisitElementInit(ElementInit initializer)
  Expression VisitInvocation(InvocationExpression node)
  Expression VisitMethodCall(MethodCallExpression node)
  Expression VisitNewArray(NewArrayExpression node)
  Expression VisitNew(NewExpression node)
  Expression VisitTypeBinary(TypeBinaryExpression node)
  Expression VisitUnary(UnaryExpression node)
  Expression VisitBlock(BlockExpression node)
  Expression VisitDefault(DefaultExpression node)
  Expression VisitLabel(LabelExpression node)
  Expression VisitGoto(GotoExpression node)
  Expression VisitLoop(LoopExpression node)
  SwitchCase VisitSwitchCase(SwitchCase node)
  Expression VisitSwitch(SwitchExpression node)
  CatchBlock VisitCatchBlock(CatchBlock node)
  Expression VisitTry(TryExpression node)
  Expression VisitIndex(IndexExpression node)
  Expression VisitExtension(Expression node)
  void DumpLabel(LabelTarget target)
  bool IsBool(Expression node)
--------------------------------------------------
Класс: System.Linq.Expressions.ExpressionType
Наследуется от: Enum
Поля:
  int value__
  ExpressionType Add
  ExpressionType AddChecked
  ExpressionType And
  ExpressionType AndAlso
  ExpressionType ArrayLength
  ExpressionType ArrayIndex
  ExpressionType Call
  ExpressionType Coalesce
  ExpressionType Conditional
  ExpressionType Constant
  ExpressionType Convert
  ExpressionType ConvertChecked
  ExpressionType Divide
  ExpressionType Equal
  ExpressionType ExclusiveOr
  ExpressionType GreaterThan
  ExpressionType GreaterThanOrEqual
  ExpressionType Invoke
  ExpressionType Lambda
  ExpressionType LeftShift
  ExpressionType LessThan
  ExpressionType LessThanOrEqual
  ExpressionType ListInit
  ExpressionType MemberAccess
  ExpressionType MemberInit
  ExpressionType Modulo
  ExpressionType Multiply
  ExpressionType MultiplyChecked
  ExpressionType Negate
  ExpressionType UnaryPlus
  ExpressionType NegateChecked
  ExpressionType New
  ExpressionType NewArrayInit
  ExpressionType NewArrayBounds
  ExpressionType Not
  ExpressionType NotEqual
  ExpressionType Or
  ExpressionType OrElse
  ExpressionType Parameter
  ExpressionType Power
  ExpressionType Quote
  ExpressionType RightShift
  ExpressionType Subtract
  ExpressionType SubtractChecked
  ExpressionType TypeAs
  ExpressionType TypeIs
  ExpressionType Assign
  ExpressionType Block
  ExpressionType DebugInfo
  ExpressionType Decrement
  ExpressionType Dynamic
  ExpressionType Default
  ExpressionType Extension
  ExpressionType Goto
  ExpressionType Increment
  ExpressionType Index
  ExpressionType Label
  ExpressionType RuntimeVariables
  ExpressionType Loop
  ExpressionType Switch
  ExpressionType Throw
  ExpressionType Try
  ExpressionType Unbox
  ExpressionType AddAssign
  ExpressionType AndAssign
  ExpressionType DivideAssign
  ExpressionType ExclusiveOrAssign
  ExpressionType LeftShiftAssign
  ExpressionType ModuloAssign
  ExpressionType MultiplyAssign
  ExpressionType OrAssign
  ExpressionType PowerAssign
  ExpressionType RightShiftAssign
  ExpressionType SubtractAssign
  ExpressionType AddAssignChecked
  ExpressionType MultiplyAssignChecked
  ExpressionType SubtractAssignChecked
  ExpressionType PreIncrementAssign
  ExpressionType PreDecrementAssign
  ExpressionType PostIncrementAssign
  ExpressionType PostDecrementAssign
  ExpressionType TypeEqual
  ExpressionType OnesComplement
  ExpressionType IsTrue
  ExpressionType IsFalse
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.Expressions.ExpressionVisitor
Наследуется от: object
Поля:
Свойства:
Методы:
  void .ctor()
  Expression Visit(Expression node)
  ReadOnlyCollection`1<Expression> Visit(ReadOnlyCollection`1<Expression> nodes)
  Expression[] VisitArguments(IArgumentProvider nodes)
  ParameterExpression[] VisitParameters(IParameterProvider nodes, string callerName)
  ReadOnlyCollection`1<T> Visit(ReadOnlyCollection`1<T> nodes, Func`2<T, T> elementVisitor)
  T VisitAndConvert(T node, string callerName)
  ReadOnlyCollection`1<T> VisitAndConvert(ReadOnlyCollection`1<T> nodes, string callerName)
  Expression VisitBinary(BinaryExpression node)
  Expression VisitBlock(BlockExpression node)
  Expression VisitConditional(ConditionalExpression node)
  Expression VisitConstant(ConstantExpression node)
  Expression VisitDebugInfo(DebugInfoExpression node)
  Expression VisitDefault(DefaultExpression node)
  Expression VisitExtension(Expression node)
  Expression VisitGoto(GotoExpression node)
  Expression VisitInvocation(InvocationExpression node)
  LabelTarget VisitLabelTarget(LabelTarget node)
  Expression VisitLabel(LabelExpression node)
  Expression VisitLambda(Expression`1<T> node)
  Expression VisitLoop(LoopExpression node)
  Expression VisitMember(MemberExpression node)
  Expression VisitIndex(IndexExpression node)
  Expression VisitMethodCall(MethodCallExpression node)
  Expression VisitNewArray(NewArrayExpression node)
  Expression VisitNew(NewExpression node)
  Expression VisitParameter(ParameterExpression node)
  Expression VisitRuntimeVariables(RuntimeVariablesExpression node)
  SwitchCase VisitSwitchCase(SwitchCase node)
  Expression VisitSwitch(SwitchExpression node)
  CatchBlock VisitCatchBlock(CatchBlock node)
  Expression VisitTry(TryExpression node)
  Expression VisitTypeBinary(TypeBinaryExpression node)
  Expression VisitUnary(UnaryExpression node)
  Expression VisitMemberInit(MemberInitExpression node)
  Expression VisitListInit(ListInitExpression node)
  ElementInit VisitElementInit(ElementInit node)
  MemberBinding VisitMemberBinding(MemberBinding node)
  MemberAssignment VisitMemberAssignment(MemberAssignment node)
  MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node)
  MemberListBinding VisitMemberListBinding(MemberListBinding node)
  UnaryExpression ValidateUnary(UnaryExpression before, UnaryExpression after)
  BinaryExpression ValidateBinary(BinaryExpression before, BinaryExpression after)
  SwitchExpression ValidateSwitch(SwitchExpression before, SwitchExpression after)
  void ValidateChildType(Type before, Type after, string methodName)
  Expression VisitDynamic(DynamicExpression node)
--------------------------------------------------
Класс: System.Linq.Expressions.GotoExpressionKind
Наследуется от: Enum
Поля:
  int value__
  GotoExpressionKind Goto
  GotoExpressionKind Return
  GotoExpressionKind Break
  GotoExpressionKind Continue
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.Expressions.GotoExpression
Наследуется от: Expression
Поля:
  Type <Type>k__BackingField
  Expression <Value>k__BackingField
  LabelTarget <Target>k__BackingField
  GotoExpressionKind <Kind>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  Expression Value
  LabelTarget Target
  GotoExpressionKind Kind
Методы:
  void .ctor(GotoExpressionKind kind, LabelTarget target, Expression value, Type type)
  Type get_Type()
  ExpressionType get_NodeType()
  Expression get_Value()
  LabelTarget get_Target()
  GotoExpressionKind get_Kind()
  Expression Accept(ExpressionVisitor visitor)
  GotoExpression Update(LabelTarget target, Expression value)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.IArgumentProvider
Поля:
Свойства:
  int ArgumentCount
Методы:
  Expression GetArgument(int index)
  int get_ArgumentCount()
--------------------------------------------------
Класс: System.Linq.Expressions.IDynamicExpression
Поля:
Свойства:
  Type DelegateType
Методы:
  Type get_DelegateType()
  Expression Rewrite(Expression[] args)
  object CreateCallSite()
--------------------------------------------------
Класс: System.Linq.Expressions.IParameterProvider
Поля:
Свойства:
  int ParameterCount
Методы:
  ParameterExpression GetParameter(int index)
  int get_ParameterCount()
--------------------------------------------------
Класс: System.Linq.Expressions.IndexExpression
Наследуется от: Expression
Поля:
  IReadOnlyList`1<Expression> _arguments
  Expression <Object>k__BackingField
  PropertyInfo <Indexer>k__BackingField
Свойства:
  ExpressionType NodeType
  Type Type
  Expression Object
  PropertyInfo Indexer
  ReadOnlyCollection`1<Expression> Arguments
  int ArgumentCount
Методы:
  void .ctor(Expression instance, PropertyInfo indexer, IReadOnlyList`1<Expression> arguments)
  ExpressionType get_NodeType()
  Type get_Type()
  Expression get_Object()
  PropertyInfo get_Indexer()
  ReadOnlyCollection`1<Expression> get_Arguments()
  IndexExpression Update(Expression object, IEnumerable`1<Expression> arguments)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  Expression Accept(ExpressionVisitor visitor)
  Expression Rewrite(Expression instance, Expression[] arguments)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.InvocationExpression
Наследуется от: Expression
Поля:
  Type <Type>k__BackingField
  Expression <Expression>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  Expression Expression
  ReadOnlyCollection`1<Expression> Arguments
  int ArgumentCount
  LambdaExpression LambdaOperand
Методы:
  void .ctor(Expression expression, Type returnType)
  Type get_Type()
  ExpressionType get_NodeType()
  Expression get_Expression()
  ReadOnlyCollection`1<Expression> get_Arguments()
  InvocationExpression Update(Expression expression, IEnumerable`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  Expression GetArgument(int index)
  int get_ArgumentCount()
  Expression Accept(ExpressionVisitor visitor)
  InvocationExpression Rewrite(Expression lambda, Expression[] arguments)
  LambdaExpression get_LambdaOperand()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.InvocationExpressionN
Наследуется от: InvocationExpression
Поля:
  IReadOnlyList`1<Expression> _arguments
Свойства:
  int ArgumentCount
Методы:
  void .ctor(Expression lambda, IReadOnlyList`1<Expression> arguments, Type returnType)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  Expression GetArgument(int index)
  int get_ArgumentCount()
  InvocationExpression Rewrite(Expression lambda, Expression[] arguments)
--------------------------------------------------
Класс: System.Linq.Expressions.InvocationExpression0
Наследуется от: InvocationExpression
Поля:
Свойства:
  int ArgumentCount
Методы:
  void .ctor(Expression lambda, Type returnType)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  Expression GetArgument(int index)
  int get_ArgumentCount()
  InvocationExpression Rewrite(Expression lambda, Expression[] arguments)
--------------------------------------------------
Класс: System.Linq.Expressions.InvocationExpression1
Наследуется от: InvocationExpression
Поля:
  object _arg0
Свойства:
  int ArgumentCount
Методы:
  void .ctor(Expression lambda, Type returnType, Expression arg0)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  Expression GetArgument(int index)
  int get_ArgumentCount()
  InvocationExpression Rewrite(Expression lambda, Expression[] arguments)
--------------------------------------------------
Класс: System.Linq.Expressions.InvocationExpression2
Наследуется от: InvocationExpression
Поля:
  object _arg0
  Expression _arg1
Свойства:
  int ArgumentCount
Методы:
  void .ctor(Expression lambda, Type returnType, Expression arg0, Expression arg1)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  Expression GetArgument(int index)
  int get_ArgumentCount()
  InvocationExpression Rewrite(Expression lambda, Expression[] arguments)
--------------------------------------------------
Класс: System.Linq.Expressions.InvocationExpression3
Наследуется от: InvocationExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
Свойства:
  int ArgumentCount
Методы:
  void .ctor(Expression lambda, Type returnType, Expression arg0, Expression arg1, Expression arg2)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  Expression GetArgument(int index)
  int get_ArgumentCount()
  InvocationExpression Rewrite(Expression lambda, Expression[] arguments)
--------------------------------------------------
Класс: System.Linq.Expressions.InvocationExpression4
Наследуется от: InvocationExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
  Expression _arg3
Свойства:
  int ArgumentCount
Методы:
  void .ctor(Expression lambda, Type returnType, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  Expression GetArgument(int index)
  int get_ArgumentCount()
  InvocationExpression Rewrite(Expression lambda, Expression[] arguments)
--------------------------------------------------
Класс: System.Linq.Expressions.InvocationExpression5
Наследуется от: InvocationExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
  Expression _arg3
  Expression _arg4
Свойства:
  int ArgumentCount
Методы:
  void .ctor(Expression lambda, Type returnType, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  Expression GetArgument(int index)
  int get_ArgumentCount()
  InvocationExpression Rewrite(Expression lambda, Expression[] arguments)
--------------------------------------------------
Класс: System.Linq.Expressions.LabelExpression
Наследуется от: Expression
Поля:
  LabelTarget <Target>k__BackingField
  Expression <DefaultValue>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  LabelTarget Target
  Expression DefaultValue
Методы:
  void .ctor(LabelTarget label, Expression defaultValue)
  Type get_Type()
  ExpressionType get_NodeType()
  LabelTarget get_Target()
  Expression get_DefaultValue()
  Expression Accept(ExpressionVisitor visitor)
  LabelExpression Update(LabelTarget target, Expression defaultValue)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.LabelTarget
Наследуется от: object
Поля:
  string <Name>k__BackingField
  Type <Type>k__BackingField
Свойства:
  string Name
  Type Type
Методы:
  void .ctor(Type type, string name)
  string get_Name()
  Type get_Type()
  string ToString()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.LambdaExpression
Наследуется от: Expression
Поля:
  Expression _body
Свойства:
  Type Type
  Type TypeCore
  Type PublicType
  ExpressionType NodeType
  ReadOnlyCollection`1<ParameterExpression> Parameters
  string Name
  string NameCore
  Expression Body
  Type ReturnType
  bool TailCall
  bool TailCallCore
  int System.Linq.Expressions.IParameterProvider.ParameterCount
  int ParameterCount
Методы:
  void .ctor(Expression body)
  Type get_Type()
  Type get_TypeCore()
  Type get_PublicType()
  ExpressionType get_NodeType()
  ReadOnlyCollection`1<ParameterExpression> get_Parameters()
  string get_Name()
  string get_NameCore()
  Expression get_Body()
  Type get_ReturnType()
  bool get_TailCall()
  bool get_TailCallCore()
  ReadOnlyCollection`1<ParameterExpression> GetOrMakeParameters()
  ParameterExpression System.Linq.Expressions.IParameterProvider.GetParameter(int index)
  ParameterExpression GetParameter(int index)
  int System.Linq.Expressions.IParameterProvider.get_ParameterCount()
  int get_ParameterCount()
  Delegate Compile()
  Delegate Compile(bool preferInterpretation)
  void CompileToMethod(MethodBuilder method)
  LambdaExpression Accept(StackSpiller spiller)
  Delegate Compile(DebugInfoGenerator debugInfoGenerator)
  void CompileToMethod(MethodBuilder method, DebugInfoGenerator debugInfoGenerator)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.Expression`1
Наследуется от: LambdaExpression
Поля:
Свойства:
  Type TypeCore
  Type PublicType
Методы:
  void .ctor(Expression body)
  Type get_TypeCore()
  Type get_PublicType()
  TDelegate Compile()
  TDelegate Compile(bool preferInterpretation)
  Expression`1<TDelegate> Update(Expression body, IEnumerable`1<ParameterExpression> parameters)
  bool SameParameters(ICollection`1<ParameterExpression> parameters)
  Expression`1<TDelegate> Rewrite(Expression body, ParameterExpression[] parameters)
  Expression Accept(ExpressionVisitor visitor)
  LambdaExpression Accept(StackSpiller spiller)
  Expression`1<TDelegate> Create(Expression body, string name, bool tailCall, IReadOnlyList`1<ParameterExpression> parameters)
  TDelegate Compile(DebugInfoGenerator debugInfoGenerator)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.Expression0`1
Наследуется от: Expression`1<TDelegate>
Поля:
Свойства:
  int ParameterCount
Методы:
  void .ctor(Expression body)
  int get_ParameterCount()
  bool SameParameters(ICollection`1<ParameterExpression> parameters)
  ParameterExpression GetParameter(int index)
  ReadOnlyCollection`1<ParameterExpression> GetOrMakeParameters()
  Expression`1<TDelegate> Rewrite(Expression body, ParameterExpression[] parameters)
--------------------------------------------------
Класс: System.Linq.Expressions.Expression1`1
Наследуется от: Expression`1<TDelegate>
Поля:
  object _par0
Свойства:
  int ParameterCount
Методы:
  void .ctor(Expression body, ParameterExpression par0)
  int get_ParameterCount()
  ParameterExpression GetParameter(int index)
  bool SameParameters(ICollection`1<ParameterExpression> parameters)
  ReadOnlyCollection`1<ParameterExpression> GetOrMakeParameters()
  Expression`1<TDelegate> Rewrite(Expression body, ParameterExpression[] parameters)
--------------------------------------------------
Класс: System.Linq.Expressions.Expression2`1
Наследуется от: Expression`1<TDelegate>
Поля:
  object _par0
  ParameterExpression _par1
Свойства:
  int ParameterCount
Методы:
  void .ctor(Expression body, ParameterExpression par0, ParameterExpression par1)
  int get_ParameterCount()
  ParameterExpression GetParameter(int index)
  bool SameParameters(ICollection`1<ParameterExpression> parameters)
  ReadOnlyCollection`1<ParameterExpression> GetOrMakeParameters()
  Expression`1<TDelegate> Rewrite(Expression body, ParameterExpression[] parameters)
--------------------------------------------------
Класс: System.Linq.Expressions.Expression3`1
Наследуется от: Expression`1<TDelegate>
Поля:
  object _par0
  ParameterExpression _par1
  ParameterExpression _par2
Свойства:
  int ParameterCount
Методы:
  void .ctor(Expression body, ParameterExpression par0, ParameterExpression par1, ParameterExpression par2)
  int get_ParameterCount()
  ParameterExpression GetParameter(int index)
  bool SameParameters(ICollection`1<ParameterExpression> parameters)
  ReadOnlyCollection`1<ParameterExpression> GetOrMakeParameters()
  Expression`1<TDelegate> Rewrite(Expression body, ParameterExpression[] parameters)
--------------------------------------------------
Класс: System.Linq.Expressions.ExpressionN`1
Наследуется от: Expression`1<TDelegate>
Поля:
  IReadOnlyList`1<ParameterExpression> _parameters
Свойства:
  int ParameterCount
Методы:
  void .ctor(Expression body, IReadOnlyList`1<ParameterExpression> parameters)
  int get_ParameterCount()
  ParameterExpression GetParameter(int index)
  bool SameParameters(ICollection`1<ParameterExpression> parameters)
  ReadOnlyCollection`1<ParameterExpression> GetOrMakeParameters()
  Expression`1<TDelegate> Rewrite(Expression body, ParameterExpression[] parameters)
--------------------------------------------------
Класс: System.Linq.Expressions.FullExpression`1
Наследуется от: ExpressionN`1<TDelegate>
Поля:
  string <NameCore>k__BackingField
  bool <TailCallCore>k__BackingField
Свойства:
  string NameCore
  bool TailCallCore
Методы:
  void .ctor(Expression body, string name, bool tailCall, IReadOnlyList`1<ParameterExpression> parameters)
  string get_NameCore()
  bool get_TailCallCore()
--------------------------------------------------
Класс: System.Linq.Expressions.ListInitExpression
Наследуется от: Expression
Поля:
  NewExpression <NewExpression>k__BackingField
  ReadOnlyCollection`1<ElementInit> <Initializers>k__BackingField
Свойства:
  ExpressionType NodeType
  Type Type
  bool CanReduce
  NewExpression NewExpression
  ReadOnlyCollection`1<ElementInit> Initializers
Методы:
  void .ctor(NewExpression newExpression, ReadOnlyCollection`1<ElementInit> initializers)
  ExpressionType get_NodeType()
  Type get_Type()
  bool get_CanReduce()
  NewExpression get_NewExpression()
  ReadOnlyCollection`1<ElementInit> get_Initializers()
  Expression Accept(ExpressionVisitor visitor)
  Expression Reduce()
  ListInitExpression Update(NewExpression newExpression, IEnumerable`1<ElementInit> initializers)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.LoopExpression
Наследуется от: Expression
Поля:
  Expression <Body>k__BackingField
  LabelTarget <BreakLabel>k__BackingField
  LabelTarget <ContinueLabel>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  Expression Body
  LabelTarget BreakLabel
  LabelTarget ContinueLabel
Методы:
  void .ctor(Expression body, LabelTarget break, LabelTarget continue)
  Type get_Type()
  ExpressionType get_NodeType()
  Expression get_Body()
  LabelTarget get_BreakLabel()
  LabelTarget get_ContinueLabel()
  Expression Accept(ExpressionVisitor visitor)
  LoopExpression Update(LabelTarget breakLabel, LabelTarget continueLabel, Expression body)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.MemberAssignment
Наследуется от: MemberBinding
Поля:
  Expression _expression
Свойства:
  Expression Expression
Методы:
  void .ctor(MemberInfo member, Expression expression)
  Expression get_Expression()
  MemberAssignment Update(Expression expression)
  void ValidateAsDefinedHere(int index)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.MemberBindingType
Наследуется от: Enum
Поля:
  int value__
  MemberBindingType Assignment
  MemberBindingType MemberBinding
  MemberBindingType ListBinding
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.Expressions.MemberBinding
Наследуется от: object
Поля:
  MemberBindingType <BindingType>k__BackingField
  MemberInfo <Member>k__BackingField
Свойства:
  MemberBindingType BindingType
  MemberInfo Member
Методы:
  void .ctor(MemberBindingType type, MemberInfo member)
  MemberBindingType get_BindingType()
  MemberInfo get_Member()
  string ToString()
  void ValidateAsDefinedHere(int index)
--------------------------------------------------
Класс: System.Linq.Expressions.MemberExpression
Наследуется от: Expression
Поля:
  Expression <Expression>k__BackingField
Свойства:
  MemberInfo Member
  Expression Expression
  ExpressionType NodeType
Методы:
  MemberInfo get_Member()
  Expression get_Expression()
  void .ctor(Expression expression)
  PropertyExpression Make(Expression expression, PropertyInfo property)
  FieldExpression Make(Expression expression, FieldInfo field)
  MemberExpression Make(Expression expression, MemberInfo member)
  ExpressionType get_NodeType()
  MemberInfo GetMember()
  Expression Accept(ExpressionVisitor visitor)
  MemberExpression Update(Expression expression)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.FieldExpression
Наследуется от: MemberExpression
Поля:
  FieldInfo _field
Свойства:
  Type Type
Методы:
  void .ctor(Expression expression, FieldInfo member)
  MemberInfo GetMember()
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.PropertyExpression
Наследуется от: MemberExpression
Поля:
  PropertyInfo _property
Свойства:
  Type Type
Методы:
  void .ctor(Expression expression, PropertyInfo member)
  MemberInfo GetMember()
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.MemberInitExpression
Наследуется от: Expression
Поля:
  NewExpression <NewExpression>k__BackingField
  ReadOnlyCollection`1<MemberBinding> <Bindings>k__BackingField
Свойства:
  Type Type
  bool CanReduce
  ExpressionType NodeType
  NewExpression NewExpression
  ReadOnlyCollection`1<MemberBinding> Bindings
Методы:
  void .ctor(NewExpression newExpression, ReadOnlyCollection`1<MemberBinding> bindings)
  Type get_Type()
  bool get_CanReduce()
  ExpressionType get_NodeType()
  NewExpression get_NewExpression()
  ReadOnlyCollection`1<MemberBinding> get_Bindings()
  Expression Accept(ExpressionVisitor visitor)
  Expression Reduce()
  Expression ReduceMemberInit(Expression objExpression, ReadOnlyCollection`1<MemberBinding> bindings, bool keepOnStack)
  Expression ReduceListInit(Expression listExpression, ReadOnlyCollection`1<ElementInit> initializers, bool keepOnStack)
  Expression ReduceMemberBinding(ParameterExpression objVar, MemberBinding binding)
  MemberInitExpression Update(NewExpression newExpression, IEnumerable`1<MemberBinding> bindings)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.MemberListBinding
Наследуется от: MemberBinding
Поля:
  ReadOnlyCollection`1<ElementInit> <Initializers>k__BackingField
Свойства:
  ReadOnlyCollection`1<ElementInit> Initializers
Методы:
  void .ctor(MemberInfo member, ReadOnlyCollection`1<ElementInit> initializers)
  ReadOnlyCollection`1<ElementInit> get_Initializers()
  MemberListBinding Update(IEnumerable`1<ElementInit> initializers)
  void ValidateAsDefinedHere(int index)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.MemberMemberBinding
Наследуется от: MemberBinding
Поля:
  ReadOnlyCollection`1<MemberBinding> <Bindings>k__BackingField
Свойства:
  ReadOnlyCollection`1<MemberBinding> Bindings
Методы:
  void .ctor(MemberInfo member, ReadOnlyCollection`1<MemberBinding> bindings)
  ReadOnlyCollection`1<MemberBinding> get_Bindings()
  MemberMemberBinding Update(IEnumerable`1<MemberBinding> bindings)
  void ValidateAsDefinedHere(int index)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.MethodCallExpression
Наследуется от: Expression
Поля:
  MethodInfo <Method>k__BackingField
Свойства:
  ExpressionType NodeType
  Type Type
  MethodInfo Method
  Expression Object
  ReadOnlyCollection`1<Expression> Arguments
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method)
  Expression GetInstance()
  ExpressionType get_NodeType()
  Type get_Type()
  MethodInfo get_Method()
  Expression get_Object()
  ReadOnlyCollection`1<Expression> get_Arguments()
  MethodCallExpression Update(Expression object, IEnumerable`1<Expression> arguments)
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  Expression Accept(ExpressionVisitor visitor)
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.InstanceMethodCallExpression
Наследуется от: MethodCallExpression
Поля:
  Expression _instance
Свойства:
Методы:
  void .ctor(MethodInfo method, Expression instance)
  Expression GetInstance()
--------------------------------------------------
Класс: System.Linq.Expressions.MethodCallExpressionN
Наследуется от: MethodCallExpression
Поля:
  IReadOnlyList`1<Expression> _arguments
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, IReadOnlyList`1<Expression> args)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  bool SameArguments(ICollection`1<Expression> arguments)
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.InstanceMethodCallExpressionN
Наследуется от: InstanceMethodCallExpression
Поля:
  IReadOnlyList`1<Expression> _arguments
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, Expression instance, IReadOnlyList`1<Expression> args)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.MethodCallExpression0
Наследуется от: MethodCallExpression
Поля:
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  bool SameArguments(ICollection`1<Expression> arguments)
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.MethodCallExpression1
Наследуется от: MethodCallExpression
Поля:
  object _arg0
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, Expression arg0)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  bool SameArguments(ICollection`1<Expression> arguments)
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.MethodCallExpression2
Наследуется от: MethodCallExpression
Поля:
  object _arg0
  Expression _arg1
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, Expression arg0, Expression arg1)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.MethodCallExpression3
Наследуется от: MethodCallExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.MethodCallExpression4
Наследуется от: MethodCallExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
  Expression _arg3
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.MethodCallExpression5
Наследуется от: MethodCallExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
  Expression _arg3
  Expression _arg4
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.InstanceMethodCallExpression0
Наследуется от: InstanceMethodCallExpression
Поля:
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, Expression instance)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  bool SameArguments(ICollection`1<Expression> arguments)
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.InstanceMethodCallExpression1
Наследуется от: InstanceMethodCallExpression
Поля:
  object _arg0
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, Expression instance, Expression arg0)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.InstanceMethodCallExpression2
Наследуется от: InstanceMethodCallExpression
Поля:
  object _arg0
  Expression _arg1
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, Expression instance, Expression arg0, Expression arg1)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.InstanceMethodCallExpression3
Наследуется от: InstanceMethodCallExpression
Поля:
  object _arg0
  Expression _arg1
  Expression _arg2
Свойства:
  int ArgumentCount
Методы:
  void .ctor(MethodInfo method, Expression instance, Expression arg0, Expression arg1, Expression arg2)
  Expression GetArgument(int index)
  int get_ArgumentCount()
  bool SameArguments(ICollection`1<Expression> arguments)
  ReadOnlyCollection`1<Expression> GetOrMakeArguments()
  MethodCallExpression Rewrite(Expression instance, IReadOnlyList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.NewArrayExpression
Наследуется от: Expression
Поля:
  Type <Type>k__BackingField
  ReadOnlyCollection`1<Expression> <Expressions>k__BackingField
Свойства:
  Type Type
  ReadOnlyCollection`1<Expression> Expressions
Методы:
  void .ctor(Type type, ReadOnlyCollection`1<Expression> expressions)
  NewArrayExpression Make(ExpressionType nodeType, Type type, ReadOnlyCollection`1<Expression> expressions)
  Type get_Type()
  ReadOnlyCollection`1<Expression> get_Expressions()
  Expression Accept(ExpressionVisitor visitor)
  NewArrayExpression Update(IEnumerable`1<Expression> expressions)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.NewArrayInitExpression
Наследуется от: NewArrayExpression
Поля:
Свойства:
  ExpressionType NodeType
Методы:
  void .ctor(Type type, ReadOnlyCollection`1<Expression> expressions)
  ExpressionType get_NodeType()
--------------------------------------------------
Класс: System.Linq.Expressions.NewArrayBoundsExpression
Наследуется от: NewArrayExpression
Поля:
Свойства:
  ExpressionType NodeType
Методы:
  void .ctor(Type type, ReadOnlyCollection`1<Expression> expressions)
  ExpressionType get_NodeType()
--------------------------------------------------
Класс: System.Linq.Expressions.NewExpression
Наследуется от: Expression
Поля:
  IReadOnlyList`1<Expression> _arguments
  ConstructorInfo <Constructor>k__BackingField
  ReadOnlyCollection`1<MemberInfo> <Members>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  ConstructorInfo Constructor
  ReadOnlyCollection`1<Expression> Arguments
  int ArgumentCount
  ReadOnlyCollection`1<MemberInfo> Members
Методы:
  void .ctor(ConstructorInfo constructor, IReadOnlyList`1<Expression> arguments, ReadOnlyCollection`1<MemberInfo> members)
  Type get_Type()
  ExpressionType get_NodeType()
  ConstructorInfo get_Constructor()
  ReadOnlyCollection`1<Expression> get_Arguments()
  Expression GetArgument(int index)
  int get_ArgumentCount()
  ReadOnlyCollection`1<MemberInfo> get_Members()
  Expression Accept(ExpressionVisitor visitor)
  NewExpression Update(IEnumerable`1<Expression> arguments)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.NewValueTypeExpression
Наследуется от: NewExpression
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
Методы:
  void .ctor(Type type, ReadOnlyCollection`1<Expression> arguments, ReadOnlyCollection`1<MemberInfo> members)
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.ParameterExpression
Наследуется от: Expression
Поля:
  string <Name>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  string Name
  bool IsByRef
Методы:
  void .ctor(string name)
  ParameterExpression Make(Type type, string name, bool isByRef)
  Type get_Type()
  ExpressionType get_NodeType()
  string get_Name()
  bool get_IsByRef()
  bool GetIsByRef()
  Expression Accept(ExpressionVisitor visitor)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.ByRefParameterExpression
Наследуется от: TypedParameterExpression
Поля:
Свойства:
Методы:
  void .ctor(Type type, string name)
  bool GetIsByRef()
--------------------------------------------------
Класс: System.Linq.Expressions.TypedParameterExpression
Наследуется от: ParameterExpression
Поля:
  Type <Type>k__BackingField
Свойства:
  Type Type
Методы:
  void .ctor(Type type, string name)
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.PrimitiveParameterExpression`1
Наследуется от: ParameterExpression
Поля:
Свойства:
  Type Type
Методы:
  void .ctor(string name)
  Type get_Type()
--------------------------------------------------
Класс: System.Linq.Expressions.RuntimeVariablesExpression
Наследуется от: Expression
Поля:
  ReadOnlyCollection`1<ParameterExpression> <Variables>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  ReadOnlyCollection`1<ParameterExpression> Variables
Методы:
  void .ctor(ReadOnlyCollection`1<ParameterExpression> variables)
  Type get_Type()
  ExpressionType get_NodeType()
  ReadOnlyCollection`1<ParameterExpression> get_Variables()
  Expression Accept(ExpressionVisitor visitor)
  RuntimeVariablesExpression Update(IEnumerable`1<ParameterExpression> variables)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.StackGuard
Наследуется от: object
Поля:
  int MaxExecutionStackCount
  int _executionStackCount
Свойства:
Методы:
  bool TryEnterOnCurrentStack()
  void RunOnEmptyStack(Action`2<T1, T2> action, T1 arg1, T2 arg2)
  void RunOnEmptyStack(Action`3<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3)
  R RunOnEmptyStack(Func`3<T1, T2, R> action, T1 arg1, T2 arg2)
  R RunOnEmptyStack(Func`4<T1, T2, T3, R> action, T1 arg1, T2 arg2, T3 arg3)
  R RunOnEmptyStackCore(Func`2<object, R> action, object state)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.Strings
Наследуется от: object
Поля:
Свойства:
  string ReducibleMustOverrideReduce
  string MustReduceToDifferent
  string ReducedNotCompatible
  string SetterHasNoParams
  string PropertyCannotHaveRefType
  string IndexesOfSetGetMustMatch
  string AccessorsCannotHaveVarArgs
  string AccessorsCannotHaveByRefArgs
  string BoundsCannotBeLessThanOne
  string TypeMustNotBeByRef
  string TypeMustNotBePointer
  string SetterMustBeVoid
  string PropertyTypeMustMatchGetter
  string PropertyTypeMustMatchSetter
  string BothAccessorsMustBeStatic
  string OnlyStaticFieldsHaveNullInstance
  string OnlyStaticPropertiesHaveNullInstance
  string OnlyStaticMethodsHaveNullInstance
  string PropertyTypeCannotBeVoid
  string InvalidUnboxType
  string ExpressionMustBeWriteable
  string ArgumentMustNotHaveValueType
  string MustBeReducible
  string AllTestValuesMustHaveSameType
  string AllCaseBodiesMustHaveSameType
  string DefaultBodyMustBeSupplied
  string LabelMustBeVoidOrHaveExpression
  string LabelTypeMustBeVoid
  string QuotedExpressionMustBeLambda
  string CollectionModifiedWhileEnumerating
  string CollectionReadOnly
  string ArgCntMustBeGreaterThanNameCnt
  string BindingCannotBeNull
  string ArgumentTypeCannotBeVoid
  string NoOrInvalidRuleProduced
  string TypeMustBeDerivedFromSystemDelegate
  string FirstArgumentMustBeCallSite
  string StartEndMustBeOrdered
  string FaultCannotHaveCatchOrFinally
  string TryMustHaveCatchFinallyOrFault
  string BodyOfCatchMustHaveSameTypeAsBodyOfTry
  string ConversionIsNotSupportedForArithmeticTypes
  string ArgumentMustBeArray
  string ArgumentMustBeBoolean
  string ArgumentMustBeFieldInfoOrPropertyInfo
  string ArgumentMustBeFieldInfoOrPropertyInfoOrMethod
  string ArgumentMustBeInstanceMember
  string ArgumentMustBeInteger
  string ArgumentMustBeArrayIndexType
  string ArgumentMustBeSingleDimensionalArrayType
  string ArgumentTypesMustMatch
  string CoalesceUsedOnNonNullType
  string IncorrectNumberOfIndexes
  string IncorrectNumberOfLambdaDeclarationParameters
  string IncorrectNumberOfMembersForGivenConstructor
  string IncorrectNumberOfArgumentsForMembers
  string LambdaTypeMustBeDerivedFromSystemDelegate
  string ElementInitializerMethodNotAdd
  string ElementInitializerMethodWithZeroArgs
  string ElementInitializerMethodStatic
  string UnhandledBinding
  string UnknownBindingType
  string IncorrectNumberOfTypeArgsForFunc
  string IncorrectNumberOfTypeArgsForAction
  string ArgumentCannotBeOfTypeVoid
  string ControlCannotLeaveFinally
  string ControlCannotLeaveFilterTest
  string ControlCannotEnterTry
  string ControlCannotEnterExpression
  string CannotCompileDynamic
  string MethodBuilderDoesNotHaveTypeBuilder
  string RethrowRequiresCatch
  string TryNotAllowedInFilter
  string NonStaticConstructorRequired
  string NonAbstractConstructorRequired
  string ExpressionMustBeReadable
  string EnumerationIsDone
  string InvalidArgumentValue
  string NonEmptyCollectionRequired
  string IncorrectNumberOfLambdaArguments
  string IncorrectNumberOfConstructorArguments
Методы:
  string get_ReducibleMustOverrideReduce()
  string get_MustReduceToDifferent()
  string get_ReducedNotCompatible()
  string get_SetterHasNoParams()
  string get_PropertyCannotHaveRefType()
  string get_IndexesOfSetGetMustMatch()
  string get_AccessorsCannotHaveVarArgs()
  string get_AccessorsCannotHaveByRefArgs()
  string get_BoundsCannotBeLessThanOne()
  string get_TypeMustNotBeByRef()
  string get_TypeMustNotBePointer()
  string get_SetterMustBeVoid()
  string get_PropertyTypeMustMatchGetter()
  string get_PropertyTypeMustMatchSetter()
  string get_BothAccessorsMustBeStatic()
  string get_OnlyStaticFieldsHaveNullInstance()
  string get_OnlyStaticPropertiesHaveNullInstance()
  string get_OnlyStaticMethodsHaveNullInstance()
  string get_PropertyTypeCannotBeVoid()
  string get_InvalidUnboxType()
  string get_ExpressionMustBeWriteable()
  string get_ArgumentMustNotHaveValueType()
  string get_MustBeReducible()
  string get_AllTestValuesMustHaveSameType()
  string get_AllCaseBodiesMustHaveSameType()
  string get_DefaultBodyMustBeSupplied()
  string get_LabelMustBeVoidOrHaveExpression()
  string get_LabelTypeMustBeVoid()
  string get_QuotedExpressionMustBeLambda()
  string get_CollectionModifiedWhileEnumerating()
  string VariableMustNotBeByRef(object p0, object p1)
  string get_CollectionReadOnly()
  string AmbiguousMatchInExpandoObject(object p0)
  string SameKeyExistsInExpando(object p0)
  string KeyDoesNotExistInExpando(object p0)
  string get_ArgCntMustBeGreaterThanNameCnt()
  string InvalidMetaObjectCreated(object p0)
  string BinderNotCompatibleWithCallSite(object p0, object p1, object p2)
  string DynamicBindingNeedsRestrictions(object p0, object p1)
  string DynamicObjectResultNotAssignable(object p0, object p1, object p2, object p3)
  string DynamicBinderResultNotAssignable(object p0, object p1, object p2)
  string get_BindingCannotBeNull()
  string DuplicateVariable(object p0)
  string get_ArgumentTypeCannotBeVoid()
  string TypeParameterIsNotDelegate(object p0)
  string get_NoOrInvalidRuleProduced()
  string get_TypeMustBeDerivedFromSystemDelegate()
  string get_FirstArgumentMustBeCallSite()
  string get_StartEndMustBeOrdered()
  string get_FaultCannotHaveCatchOrFinally()
  string get_TryMustHaveCatchFinallyOrFault()
  string get_BodyOfCatchMustHaveSameTypeAsBodyOfTry()
  string ExtensionNodeMustOverrideProperty(object p0)
  string UserDefinedOperatorMustBeStatic(object p0)
  string UserDefinedOperatorMustNotBeVoid(object p0)
  string CoercionOperatorNotDefined(object p0, object p1)
  string UnaryOperatorNotDefined(object p0, object p1)
  string BinaryOperatorNotDefined(object p0, object p1, object p2)
  string ReferenceEqualityNotDefined(object p0, object p1)
  string OperandTypesDoNotMatchParameters(object p0, object p1)
  string OverloadOperatorTypeDoesNotMatchConversionType(object p0, object p1)
  string get_ConversionIsNotSupportedForArithmeticTypes()
  string get_ArgumentMustBeArray()
  string get_ArgumentMustBeBoolean()
  string EqualityMustReturnBoolean(object p0)
  string get_ArgumentMustBeFieldInfoOrPropertyInfo()
  string get_ArgumentMustBeFieldInfoOrPropertyInfoOrMethod()
  string get_ArgumentMustBeInstanceMember()
  string get_ArgumentMustBeInteger()
  string get_ArgumentMustBeArrayIndexType()
  string get_ArgumentMustBeSingleDimensionalArrayType()
  string get_ArgumentTypesMustMatch()
  string CannotAutoInitializeValueTypeElementThroughProperty(object p0)
  string CannotAutoInitializeValueTypeMemberThroughProperty(object p0)
  string IncorrectTypeForTypeAs(object p0)
  string get_CoalesceUsedOnNonNullType()
  string ExpressionTypeCannotInitializeArrayType(object p0, object p1)
  string ArgumentTypeDoesNotMatchMember(object p0, object p1)
  string ArgumentMemberNotDeclOnType(object p0, object p1)
  string ExpressionTypeDoesNotMatchReturn(object p0, object p1)
  string ExpressionTypeDoesNotMatchAssignment(object p0, object p1)
  string ExpressionTypeDoesNotMatchLabel(object p0, object p1)
  string ExpressionTypeNotInvocable(object p0)
  string FieldNotDefinedForType(object p0, object p1)
  string InstanceFieldNotDefinedForType(object p0, object p1)
  string FieldInfoNotDefinedForType(object p0, object p1, object p2)
  string get_IncorrectNumberOfIndexes()
  string get_IncorrectNumberOfLambdaDeclarationParameters()
  string get_IncorrectNumberOfMembersForGivenConstructor()
  string get_IncorrectNumberOfArgumentsForMembers()
  string get_LambdaTypeMustBeDerivedFromSystemDelegate()
  string MemberNotFieldOrProperty(object p0)
  string MethodContainsGenericParameters(object p0)
  string MethodIsGeneric(object p0)
  string MethodNotPropertyAccessor(object p0, object p1)
  string PropertyDoesNotHaveGetter(object p0)
  string PropertyDoesNotHaveSetter(object p0)
  string PropertyDoesNotHaveAccessor(object p0)
  string NotAMemberOfType(object p0, object p1)
  string NotAMemberOfAnyType(object p0)
  string ParameterExpressionNotValidAsDelegate(object p0, object p1)
  string PropertyNotDefinedForType(object p0, object p1)
  string InstancePropertyNotDefinedForType(object p0, object p1)
  string InstancePropertyWithoutParameterNotDefinedForType(object p0, object p1)
  string InstancePropertyWithSpecifiedParametersNotDefinedForType(object p0, object p1, object p2)
  string InstanceAndMethodTypeMismatch(object p0, object p1, object p2)
  string TypeMissingDefaultConstructor(object p0)
  string get_ElementInitializerMethodNotAdd()
  string ElementInitializerMethodNoRefOutParam(object p0, object p1)
  string get_ElementInitializerMethodWithZeroArgs()
  string get_ElementInitializerMethodStatic()
  string TypeNotIEnumerable(object p0)
  string UnhandledBinary(object p0)
  string get_UnhandledBinding()
  string UnhandledBindingType(object p0)
  string UnhandledUnary(object p0)
  string get_UnknownBindingType()
  string UserDefinedOpMustHaveConsistentTypes(object p0, object p1)
  string UserDefinedOpMustHaveValidReturnType(object p0, object p1)
  string LogicalOperatorMustHaveBooleanOperators(object p0, object p1)
  string MethodWithArgsDoesNotExistOnType(object p0, object p1)
  string GenericMethodWithArgsDoesNotExistOnType(object p0, object p1)
  string MethodWithMoreThanOneMatch(object p0, object p1)
  string PropertyWithMoreThanOneMatch(object p0, object p1)
  string get_IncorrectNumberOfTypeArgsForFunc()
  string get_IncorrectNumberOfTypeArgsForAction()
  string get_ArgumentCannotBeOfTypeVoid()
  string OutOfRange(object p0, object p1)
  string LabelTargetAlreadyDefined(object p0)
  string LabelTargetUndefined(object p0)
  string get_ControlCannotLeaveFinally()
  string get_ControlCannotLeaveFilterTest()
  string AmbiguousJump(object p0)
  string get_ControlCannotEnterTry()
  string get_ControlCannotEnterExpression()
  string NonLocalJumpWithValue(object p0)
  string CannotCompileConstant(object p0)
  string get_CannotCompileDynamic()
  string get_MethodBuilderDoesNotHaveTypeBuilder()
  string InvalidLvalue(object p0)
  string UndefinedVariable(object p0, object p1, object p2)
  string CannotCloseOverByRef(object p0, object p1)
  string UnexpectedVarArgsCall(object p0)
  string get_RethrowRequiresCatch()
  string get_TryNotAllowedInFilter()
  string MustRewriteToSameNode(object p0, object p1, object p2)
  string MustRewriteChildToSameType(object p0, object p1, object p2)
  string MustRewriteWithoutMethod(object p0, object p1)
  string TryNotSupportedForMethodsWithRefArgs(object p0)
  string TryNotSupportedForValueTypeInstances(object p0)
  string TestValueTypeDoesNotMatchComparisonMethodParameter(object p0, object p1)
  string SwitchValueTypeDoesNotMatchComparisonMethodParameter(object p0, object p1)
  string get_NonStaticConstructorRequired()
  string get_NonAbstractConstructorRequired()
  string get_ExpressionMustBeReadable()
  string ExpressionTypeDoesNotMatchConstructorParameter(object p0, object p1)
  string get_EnumerationIsDone()
  string TypeContainsGenericParameters(object p0)
  string TypeIsGeneric(object p0)
  string get_InvalidArgumentValue()
  string get_NonEmptyCollectionRequired()
  string InvalidNullValue(object p0)
  string InvalidObjectType(object p0, object p1)
  string ExpressionTypeDoesNotMatchMethodParameter(object p0, object p1, object p2)
  string ExpressionTypeDoesNotMatchParameter(object p0, object p1)
  string IncorrectNumberOfMethodCallArguments(object p0)
  string get_IncorrectNumberOfLambdaArguments()
  string get_IncorrectNumberOfConstructorArguments()
--------------------------------------------------
Класс: System.Linq.Expressions.SwitchCase
Наследуется от: object
Поля:
  ReadOnlyCollection`1<Expression> <TestValues>k__BackingField
  Expression <Body>k__BackingField
Свойства:
  ReadOnlyCollection`1<Expression> TestValues
  Expression Body
Методы:
  void .ctor(Expression body, ReadOnlyCollection`1<Expression> testValues)
  ReadOnlyCollection`1<Expression> get_TestValues()
  Expression get_Body()
  string ToString()
  SwitchCase Update(IEnumerable`1<Expression> testValues, Expression body)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.SwitchExpression
Наследуется от: Expression
Поля:
  Type <Type>k__BackingField
  Expression <SwitchValue>k__BackingField
  ReadOnlyCollection`1<SwitchCase> <Cases>k__BackingField
  Expression <DefaultBody>k__BackingField
  MethodInfo <Comparison>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  Expression SwitchValue
  ReadOnlyCollection`1<SwitchCase> Cases
  Expression DefaultBody
  MethodInfo Comparison
  bool IsLifted
Методы:
  void .ctor(Type type, Expression switchValue, Expression defaultBody, MethodInfo comparison, ReadOnlyCollection`1<SwitchCase> cases)
  Type get_Type()
  ExpressionType get_NodeType()
  Expression get_SwitchValue()
  ReadOnlyCollection`1<SwitchCase> get_Cases()
  Expression get_DefaultBody()
  MethodInfo get_Comparison()
  Expression Accept(ExpressionVisitor visitor)
  bool get_IsLifted()
  SwitchExpression Update(Expression switchValue, IEnumerable`1<SwitchCase> cases, Expression defaultBody)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.SymbolDocumentInfo
Наследуется от: object
Поля:
  string <FileName>k__BackingField
  Guid DocumentType_Text
Свойства:
  string FileName
  Guid Language
  Guid LanguageVendor
  Guid DocumentType
Методы:
  void .ctor(string fileName)
  string get_FileName()
  Guid get_Language()
  Guid get_LanguageVendor()
  Guid get_DocumentType()
  void .cctor()
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.SymbolDocumentWithGuids
Наследуется от: SymbolDocumentInfo
Поля:
  Guid <Language>k__BackingField
  Guid <LanguageVendor>k__BackingField
  Guid <DocumentType>k__BackingField
Свойства:
  Guid Language
  Guid LanguageVendor
  Guid DocumentType
Методы:
  void .ctor(string fileName, Guid& language)
  void .ctor(string fileName, Guid& language, Guid& vendor)
  void .ctor(string fileName, Guid& language, Guid& vendor, Guid& documentType)
  Guid get_Language()
  Guid get_LanguageVendor()
  Guid get_DocumentType()
--------------------------------------------------
Класс: System.Linq.Expressions.TryExpression
Наследуется от: Expression
Поля:
  Type <Type>k__BackingField
  Expression <Body>k__BackingField
  ReadOnlyCollection`1<CatchBlock> <Handlers>k__BackingField
  Expression <Finally>k__BackingField
  Expression <Fault>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  Expression Body
  ReadOnlyCollection`1<CatchBlock> Handlers
  Expression Finally
  Expression Fault
Методы:
  void .ctor(Type type, Expression body, Expression finally, Expression fault, ReadOnlyCollection`1<CatchBlock> handlers)
  Type get_Type()
  ExpressionType get_NodeType()
  Expression get_Body()
  ReadOnlyCollection`1<CatchBlock> get_Handlers()
  Expression get_Finally()
  Expression get_Fault()
  Expression Accept(ExpressionVisitor visitor)
  TryExpression Update(Expression body, IEnumerable`1<CatchBlock> handlers, Expression finally, Expression fault)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.TypeBinaryExpression
Наследуется от: Expression
Поля:
  ExpressionType <NodeType>k__BackingField
  Expression <Expression>k__BackingField
  Type <TypeOperand>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  Expression Expression
  Type TypeOperand
Методы:
  void .ctor(Expression expression, Type typeOperand, ExpressionType nodeType)
  Type get_Type()
  ExpressionType get_NodeType()
  Expression get_Expression()
  Type get_TypeOperand()
  Expression ReduceTypeEqual()
  Expression ByValParameterTypeEqual(ParameterExpression value)
  Expression ReduceConstantTypeEqual()
  Expression Accept(ExpressionVisitor visitor)
  TypeBinaryExpression Update(Expression expression)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.UnaryExpression
Наследуется от: Expression
Поля:
  Type <Type>k__BackingField
  ExpressionType <NodeType>k__BackingField
  Expression <Operand>k__BackingField
  MethodInfo <Method>k__BackingField
Свойства:
  Type Type
  ExpressionType NodeType
  Expression Operand
  MethodInfo Method
  bool IsLifted
  bool IsLiftedToNull
  bool CanReduce
  bool IsPrefix
Методы:
  void .ctor(ExpressionType nodeType, Expression expression, Type type, MethodInfo method)
  Type get_Type()
  ExpressionType get_NodeType()
  Expression get_Operand()
  MethodInfo get_Method()
  bool get_IsLifted()
  bool get_IsLiftedToNull()
  Expression Accept(ExpressionVisitor visitor)
  bool get_CanReduce()
  Expression Reduce()
  bool get_IsPrefix()
  UnaryExpression FunctionalOp(Expression operand)
  Expression ReduceVariable()
  Expression ReduceMember()
  Expression ReduceIndex()
  UnaryExpression Update(Expression operand)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.Utils
Наследуется от: object
Поля:
  object BoxedFalse
  object BoxedTrue
  object BoxedIntM1
  object BoxedInt0
  object BoxedInt1
  object BoxedInt2
  object BoxedInt3
  object BoxedDefaultSByte
  object BoxedDefaultChar
  object BoxedDefaultInt16
  object BoxedDefaultInt64
  object BoxedDefaultByte
  object BoxedDefaultUInt16
  object BoxedDefaultUInt32
  object BoxedDefaultUInt64
  object BoxedDefaultSingle
  object BoxedDefaultDouble
  object BoxedDefaultDecimal
  object BoxedDefaultDateTime
  ConstantExpression s_true
  ConstantExpression s_false
  ConstantExpression s_m1
  ConstantExpression s_0
  ConstantExpression s_1
  ConstantExpression s_2
  ConstantExpression s_3
  DefaultExpression Empty
  ConstantExpression Null
Свойства:
Методы:
  ConstantExpression Constant(bool value)
  ConstantExpression Constant(int value)
  void .cctor()
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.AnalyzedTree
Наследуется от: object
Поля:
  Dictionary`2<object, CompilerScope> Scopes
  Dictionary`2<LambdaExpression, BoundConstants> Constants
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.AssemblyGen
Наследуется от: object
Поля:
  AssemblyGen s_assembly
  ModuleBuilder _myModule
  int _index
Свойства:
  AssemblyGen Assembly
Методы:
  AssemblyGen get_Assembly()
  void .ctor()
  TypeBuilder DefineType(string name, Type parent, TypeAttributes attr)
  TypeBuilder DefineDelegateType(string name)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.BoundConstants
Наследуется от: object
Поля:
  List`1<object> _values
  Dictionary`2<object, int> _indexes
  Dictionary`2<TypedConstant, int> _references
  Dictionary`2<TypedConstant, LocalBuilder> _cache
Свойства:
  int Count
Методы:
  int get_Count()
  Object[] ToArray()
  void AddReference(object value, Type type)
  void EmitConstant(LambdaCompiler lc, object value, Type type)
  void EmitCacheConstants(LambdaCompiler lc)
  bool ShouldCache(int refCount)
  void EmitConstantsArray(LambdaCompiler lc)
  void EmitConstantFromArray(LambdaCompiler lc, object value, Type type)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.CompilerScope
Наследуется от: object
Поля:
  CompilerScope _parent
  object Node
  bool IsMethod
  bool NeedsClosure
  Dictionary`2<ParameterExpression, VariableStorageKind> Definitions
  Dictionary`2<ParameterExpression, int> ReferenceCount
  HashSet`1<BlockExpression> MergedScopes
  HoistedLocals _hoistedLocals
  HoistedLocals _closureHoistedLocals
  Dictionary`2<ParameterExpression, Storage> _locals
Свойства:
  HoistedLocals NearestHoistedLocals
  string CurrentLambdaName
Методы:
  void .ctor(object node, bool isMethod)
  HoistedLocals get_NearestHoistedLocals()
  CompilerScope Enter(LambdaCompiler lc, CompilerScope parent)
  CompilerScope Exit()
  void EmitVariableAccess(LambdaCompiler lc, ReadOnlyCollection`1<ParameterExpression> vars)
  void AddLocal(LambdaCompiler gen, ParameterExpression variable)
  void EmitGet(ParameterExpression variable)
  void EmitSet(ParameterExpression variable)
  void EmitAddressOf(ParameterExpression variable)
  Storage ResolveVariable(ParameterExpression variable)
  Storage ResolveVariable(ParameterExpression variable, HoistedLocals hoistedLocals)
  void SetParent(LambdaCompiler lc, CompilerScope parent)
  void EmitNewHoistedLocals(LambdaCompiler lc)
  void EmitCachedVariables()
  bool ShouldCache(ParameterExpression v, int refCount)
  bool ShouldCache(ParameterExpression v)
  void CacheBoxToLocal(LambdaCompiler lc, ParameterExpression v)
  void EmitClosureAccess(LambdaCompiler lc, HoistedLocals locals)
  void EmitClosureToVariable(LambdaCompiler lc, HoistedLocals locals)
  void AllocateLocals(LambdaCompiler lc)
  IEnumerable`1<ParameterExpression> GetVariables()
  IEnumerable`1<ParameterExpression> GetVariablesIncludingMerged()
  IReadOnlyList`1<ParameterExpression> GetVariables(object scope)
  string get_CurrentLambdaName()
  bool <SetParent>b__27_0(ParameterExpression p)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.VariableStorageKind
Наследуется от: Enum
Поля:
  int value__
  VariableStorageKind Local
  VariableStorageKind Hoisted
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.ParameterProviderExtensions
Наследуется от: object
Поля:
Свойства:
Методы:
  int IndexOf(IParameterProvider provider, ParameterExpression parameter)
  bool Contains(IParameterProvider provider, ParameterExpression parameter)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.ParameterList
Наследуется от: object
Поля:
  IParameterProvider _provider
Свойства:
  ParameterExpression Item
  int Count
Методы:
  void .ctor(IParameterProvider provider)
  ParameterExpression get_Item(int index)
  int get_Count()
  IEnumerator`1<ParameterExpression> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.DelegateHelpers
Наследуется от: object
Поля:
  TypeInfo _DelegateCache
  int MaximumArity
  MethodAttributes CtorAttributes
  MethodImplAttributes ImplAttributes
  MethodAttributes InvokeAttributes
  Type[] s_delegateCtorSignature
Свойства:
Методы:
  Type MakeDelegateType(Type[] types)
  TypeInfo NextTypeInfo(Type initialArg)
  TypeInfo GetNextTypeInfo(Type initialArg, TypeInfo curTypeInfo)
  TypeInfo NextTypeInfo(Type initialArg, TypeInfo curTypeInfo)
  Type MakeNewDelegate(Type[] types)
  Type GetFuncType(Type[] types)
  Type GetActionType(Type[] types)
  Type MakeCallSiteDelegate(ReadOnlyCollection`1<Expression> types, Type returnType)
  Type MakeDeferredSiteDelegate(DynamicMetaObject[] args, Type returnType)
  bool IsByRef(DynamicMetaObject mo)
  Type MakeNewCustomDelegate(Type[] types)
  void .cctor()
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.HoistedLocals
Наследуется от: object
Поля:
  HoistedLocals Parent
  ReadOnlyDictionary`2<Expression, int> Indexes
  ReadOnlyCollection`1<ParameterExpression> Variables
  ParameterExpression SelfVariable
Свойства:
  ParameterExpression ParentVariable
Методы:
  void .ctor(HoistedLocals parent, ReadOnlyCollection`1<ParameterExpression> vars)
  ParameterExpression get_ParentVariable()
  Object[] GetParent(Object[] locals)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.ILGen
Наследуется от: object
Поля:
Свойства:
Методы:
  void Emit(ILGenerator il, OpCode opcode, MethodBase methodBase)
  void EmitLoadArg(ILGenerator il, int index)
  void EmitLoadArgAddress(ILGenerator il, int index)
  void EmitStoreArg(ILGenerator il, int index)
  void EmitLoadValueIndirect(ILGenerator il, Type type)
  void EmitStoreValueIndirect(ILGenerator il, Type type)
  void EmitLoadElement(ILGenerator il, Type type)
  void EmitStoreElement(ILGenerator il, Type type)
  void EmitType(ILGenerator il, Type type)
  void EmitFieldAddress(ILGenerator il, FieldInfo fi)
  void EmitFieldGet(ILGenerator il, FieldInfo fi)
  void EmitFieldSet(ILGenerator il, FieldInfo fi)
  void EmitNew(ILGenerator il, ConstructorInfo ci)
  void EmitNull(ILGenerator il)
  void EmitString(ILGenerator il, string value)
  void EmitPrimitive(ILGenerator il, bool value)
  void EmitPrimitive(ILGenerator il, int value)
  void EmitPrimitive(ILGenerator il, UInt32 value)
  void EmitPrimitive(ILGenerator il, long value)
  void EmitPrimitive(ILGenerator il, ulong value)
  void EmitPrimitive(ILGenerator il, double value)
  void EmitPrimitive(ILGenerator il, float value)
  bool CanEmitConstant(object value, Type type)
  bool CanEmitILConstant(Type type)
  bool TryEmitConstant(ILGenerator il, object value, Type type, ILocalCache locals)
  bool ShouldLdtoken(Type t)
  bool ShouldLdtoken(MethodBase mb)
  bool TryEmitILConstant(ILGenerator il, object value, Type type)
  void EmitConvertToType(ILGenerator il, Type typeFrom, Type typeTo, bool isChecked, ILocalCache locals)
  void EmitCastToType(ILGenerator il, Type typeFrom, Type typeTo)
  void EmitNumericConversion(ILGenerator il, Type typeFrom, Type typeTo, bool isChecked)
  void EmitNullableToNullableConversion(ILGenerator il, Type typeFrom, Type typeTo, bool isChecked, ILocalCache locals)
  void EmitNonNullableToNullableConversion(ILGenerator il, Type typeFrom, Type typeTo, bool isChecked, ILocalCache locals)
  void EmitNullableToNonNullableConversion(ILGenerator il, Type typeFrom, Type typeTo, bool isChecked, ILocalCache locals)
  void EmitNullableToNonNullableStructConversion(ILGenerator il, Type typeFrom, Type typeTo, bool isChecked, ILocalCache locals)
  void EmitNullableToReferenceConversion(ILGenerator il, Type typeFrom)
  void EmitNullableConversion(ILGenerator il, Type typeFrom, Type typeTo, bool isChecked, ILocalCache locals)
  void EmitHasValue(ILGenerator il, Type nullableType)
  void EmitGetValue(ILGenerator il, Type nullableType)
  void EmitGetValueOrDefault(ILGenerator il, Type nullableType)
  void EmitArray(ILGenerator il, T[] items, ILocalCache locals)
  void EmitArray(ILGenerator il, Type elementType, int count)
  void EmitArray(ILGenerator il, Type arrayType)
  void EmitDecimal(ILGenerator il, decimal value)
  void EmitDefault(ILGenerator il, Type type, ILocalCache locals)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.KeyedStack`2
Наследуется от: object
Поля:
  Dictionary`2<TKey, Stack`1<TValue>> _data
Свойства:
Методы:
  void Push(TKey key, TValue value)
  TValue TryPop(TKey key)
  void .ctor()
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.LabelInfo
Наследуется от: object
Поля:
  LabelTarget _node
  Label _label
  bool _labelDefined
  LocalBuilder _value
  HashSet`1<LabelScopeInfo> _definitions
  List`1<LabelScopeInfo> _references
  bool _canReturn
  bool _acrossBlockJump
  OpCode _opCode
  ILGenerator _ilg
Свойства:
  Label Label
  bool CanReturn
  bool CanBranch
Методы:
  Label get_Label()
  void .ctor(ILGenerator il, LabelTarget node, bool canReturn)
  bool get_CanReturn()
  bool get_CanBranch()
  void Reference(LabelScopeInfo block)
  void Define(LabelScopeInfo block)
  void ValidateJump(LabelScopeInfo reference)
  void ValidateFinish()
  void EmitJump()
  void StoreValue()
  void Mark()
  void MarkWithEmptyStack()
  void EnsureLabelAndValue()
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.LabelScopeKind
Наследуется от: Enum
Поля:
  int value__
  LabelScopeKind Statement
  LabelScopeKind Block
  LabelScopeKind Switch
  LabelScopeKind Lambda
  LabelScopeKind Try
  LabelScopeKind Catch
  LabelScopeKind Finally
  LabelScopeKind Filter
  LabelScopeKind Expression
Свойства:
Методы:
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.LabelScopeInfo
Наследуется от: object
Поля:
  Dictionary`2<LabelTarget, LabelInfo> _labels
  LabelScopeKind Kind
  LabelScopeInfo Parent
Свойства:
  bool CanJumpInto
Методы:
  void .ctor(LabelScopeInfo parent, LabelScopeKind kind)
  bool get_CanJumpInto()
  bool ContainsTarget(LabelTarget target)
  bool TryGetLabelInfo(LabelTarget target, LabelInfo& info)
  void AddLabelInfo(LabelTarget target, LabelInfo info)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.LambdaCompiler
Наследуется от: object
Поля:
  StackGuard _guard
  int s_counter
  AnalyzedTree _tree
  ILGenerator _ilg
  TypeBuilder _typeBuilder
  MethodInfo _method
  LabelScopeInfo _labelBlock
  Dictionary`2<LabelTarget, LabelInfo> _labelInfo
  CompilerScope _scope
  LambdaExpression _lambda
  bool _hasClosureArgument
  BoundConstants _boundConstants
  KeyedStack`2<Type, LocalBuilder> _freeLocals
Свойства:
  ILGenerator IL
  IParameterProvider Parameters
  bool CanEmitBoundConstants
Методы:
  void EmitAddress(Expression node, Type type)
  void EmitAddress(Expression node, Type type, CompilationFlags flags)
  void AddressOf(BinaryExpression node, Type type)
  void AddressOf(ParameterExpression node, Type type)
  void AddressOf(MemberExpression node, Type type)
  void EmitMemberAddress(MemberInfo member, Type objectType)
  void AddressOf(MethodCallExpression node, Type type)
  void AddressOf(IndexExpression node, Type type)
  void AddressOf(UnaryExpression node, Type type)
  void EmitExpressionAddress(Expression node, Type type)
  WriteBack EmitAddressWriteBack(Expression node, Type type)
  WriteBack AddressOfWriteBack(MemberExpression node)
  WriteBack AddressOfWriteBackCore(MemberExpression node)
  WriteBack AddressOfWriteBack(IndexExpression node)
  WriteBack AddressOfWriteBackCore(IndexExpression node)
  LocalBuilder GetInstanceLocal(Type type)
  void EmitBinaryExpression(Expression expr)
  void EmitBinaryExpression(Expression expr, CompilationFlags flags)
  void EmitNullEquality(ExpressionType op, Expression e, bool isLiftedToNull)
  void EmitBinaryMethod(BinaryExpression b, CompilationFlags flags)
  void EmitBinaryOperator(ExpressionType op, Type leftType, Type rightType, Type resultType, bool liftedToNull)
  void EmitUnliftedBinaryOp(ExpressionType op, Type leftType, Type rightType)
  void EmitShiftMask(Type leftType)
  void EmitConvertArithmeticResult(ExpressionType op, Type resultType)
  void EmitLiftedBinaryOp(ExpressionType op, Type leftType, Type rightType, Type resultType, bool liftedToNull)
  void EmitLiftedRelational(ExpressionType op, Type type)
  void EmitLiftedToNullRelational(ExpressionType op, Type type)
  void EmitLiftedBinaryArithmetic(ExpressionType op, Type leftType, Type rightType, Type resultType)
  void EmitLiftedBooleanAnd()
  void EmitLiftedBooleanOr()
  LabelInfo EnsureLabel(LabelTarget node)
  LabelInfo ReferenceLabel(LabelTarget node)
  LabelInfo DefineLabel(LabelTarget node)
  void PushLabelBlock(LabelScopeKind type)
  void PopLabelBlock(LabelScopeKind kind)
  void EmitLabelExpression(Expression expr, CompilationFlags flags)
  void EmitGotoExpression(Expression expr, CompilationFlags flags)
  void EmitUnreachable(Expression node, CompilationFlags flags)
  bool TryPushLabelBlock(Expression node)
  void DefineBlockLabels(Expression node)
  void AddReturnLabel(LambdaExpression lambda)
  CompilationFlags UpdateEmitAsTailCallFlag(CompilationFlags flags, CompilationFlags newValue)
  CompilationFlags UpdateEmitExpressionStartFlag(CompilationFlags flags, CompilationFlags newValue)
  CompilationFlags UpdateEmitAsTypeFlag(CompilationFlags flags, CompilationFlags newValue)
  void EmitExpression(Expression node)
  void EmitExpressionAsVoid(Expression node)
  void EmitExpressionAsVoid(Expression node, CompilationFlags flags)
  void EmitExpressionAsType(Expression node, Type type, CompilationFlags flags)
  CompilationFlags EmitExpressionStart(Expression node)
  void EmitExpressionEnd(CompilationFlags flags)
  void EmitInvocationExpression(Expression expr, CompilationFlags flags)
  void EmitInlinedInvoke(InvocationExpression invoke, CompilationFlags flags)
  void EmitIndexExpression(Expression expr)
  void EmitIndexAssignment(AssignBinaryExpression node, CompilationFlags flags)
  void EmitGetIndexCall(IndexExpression node, Type objectType)
  void EmitGetArrayElement(Type arrayType)
  void EmitSetIndexCall(IndexExpression node, Type objectType)
  void EmitSetArrayElement(Type arrayType)
  void EmitMethodCallExpression(Expression expr, CompilationFlags flags)
  void EmitMethodCallExpression(Expression expr)
  void EmitMethodCall(Expression obj, MethodInfo method, IArgumentProvider methodCallExpr)
  void EmitMethodCall(Expression obj, MethodInfo method, IArgumentProvider methodCallExpr, CompilationFlags flags)
  void EmitMethodCall(MethodInfo mi, IArgumentProvider args, Type objectType)
  void EmitMethodCall(MethodInfo mi, IArgumentProvider args, Type objectType, CompilationFlags flags)
  bool MethodHasByRefParameter(MethodInfo mi)
  void EmitCall(Type objectType, MethodInfo method)
  bool UseVirtual(MethodInfo mi)
  List`1<WriteBack> EmitArguments(MethodBase method, IArgumentProvider args)
  List`1<WriteBack> EmitArguments(MethodBase method, IArgumentProvider args, int skipParameters)
  void EmitWriteBack(List`1<WriteBack> writeBacks)
  void EmitConstantExpression(Expression expr)
  void EmitConstant(object value)
  void EmitConstant(object value, Type type)
  void EmitDynamicExpression(Expression expr)
  void EmitNewExpression(Expression expr)
  void EmitTypeBinaryExpression(Expression expr)
  void EmitVariableAssignment(AssignBinaryExpression node, CompilationFlags flags)
  void EmitAssignBinaryExpression(Expression expr)
  void EmitAssign(AssignBinaryExpression node, CompilationFlags emitAs)
  void EmitParameterExpression(Expression expr)
  void EmitLambdaExpression(Expression expr)
  void EmitRuntimeVariablesExpression(Expression expr)
  void EmitMemberAssignment(AssignBinaryExpression node, CompilationFlags flags)
  void EmitMemberExpression(Expression expr)
  void EmitMemberGet(MemberInfo member, Type objectType)
  void EmitInstance(Expression instance, Type& type)
  void EmitNewArrayExpression(Expression expr)
  void EmitDebugInfoExpression(Expression expr)
  void EmitListInitExpression(Expression expr)
  void EmitMemberInitExpression(Expression expr)
  void EmitBinding(MemberBinding binding, Type objectType)
  void EmitMemberAssignment(MemberAssignment binding, Type objectType)
  void EmitMemberMemberBinding(MemberMemberBinding binding)
  void EmitMemberListBinding(MemberListBinding binding)
  void EmitMemberInit(MemberInitExpression init)
  void EmitMemberInit(ReadOnlyCollection`1<MemberBinding> bindings, bool keepOnStack, Type objectType)
  void EmitListInit(ListInitExpression init)
  void EmitListInit(ReadOnlyCollection`1<ElementInit> initializers, bool keepOnStack, Type objectType)
  Type GetMemberType(MemberInfo member)
  void EmitLift(ExpressionType nodeType, Type resultType, MethodCallExpression mc, ParameterExpression[] paramList, Expression[] argList)
  void EmitExpression(Expression node, CompilationFlags flags)
  bool IsChecked(ExpressionType op)
  void EmitConstantArray(T[] array)
  void EmitClosureCreation(LambdaCompiler inner)
  void EmitDelegateConstruction(LambdaCompiler inner)
  void EmitDelegateConstruction(LambdaExpression lambda)
  Type[] GetParameterTypes(LambdaExpression lambda, Type firstType)
  string GetUniqueMethodName()
  void EmitLambdaBody()
  void EmitLambdaBody(CompilerScope parent, bool inlined, CompilationFlags flags)
  void EmitConditionalExpression(Expression expr, CompilationFlags flags)
  bool NotEmpty(Expression node)
  bool Significant(Expression node)
  void EmitCoalesceBinaryExpression(Expression expr)
  void EmitNullableCoalesce(BinaryExpression b)
  void EmitLambdaReferenceCoalesce(BinaryExpression b)
  void EmitReferenceCoalesceWithoutConversion(BinaryExpression b)
  void EmitLiftedAndAlso(BinaryExpression b)
  void EmitMethodAndAlso(BinaryExpression b, CompilationFlags flags)
  void EmitUnliftedAndAlso(BinaryExpression b)
  void EmitAndAlsoBinaryExpression(Expression expr, CompilationFlags flags)
  void EmitLiftedOrElse(BinaryExpression b)
  void EmitUnliftedOrElse(BinaryExpression b)
  void EmitMethodOrElse(BinaryExpression b, CompilationFlags flags)
  void EmitOrElseBinaryExpression(Expression expr, CompilationFlags flags)
  void EmitExpressionAndBranch(bool branchValue, Expression node, Label label)
  void EmitBranchOp(bool branch, Label label)
  void EmitBranchNot(bool branch, UnaryExpression node, Label label)
  void EmitBranchComparison(bool branch, BinaryExpression node, Label label)
  Expression GetEqualityOperand(Expression expression)
  void EmitBranchLogical(bool branch, BinaryExpression node, Label label)
  void EmitBranchAnd(bool branch, BinaryExpression node, Label label)
  void EmitBranchOr(bool branch, BinaryExpression node, Label label)
  void EmitBranchBlock(bool branch, BlockExpression node, Label label)
  void EmitBlockExpression(Expression expr, CompilationFlags flags)
  void Emit(BlockExpression node, CompilationFlags flags)
  void EnterScope(object node)
  bool HasVariables(object node)
  void ExitScope(object node)
  void EmitDefaultExpression(Expression expr)
  void EmitLoopExpression(Expression expr)
  void EmitSwitchExpression(Expression expr, CompilationFlags flags)
  Type GetTestValueType(SwitchExpression node)
  bool FitsInBucket(List`1<SwitchLabel> buckets, decimal key, int count)
  void MergeBuckets(List`1<List`1<SwitchLabel>> buckets)
  void AddToBuckets(List`1<List`1<SwitchLabel>> buckets, SwitchLabel key)
  bool CanOptimizeSwitchType(Type valueType)
  bool TryEmitSwitchInstruction(SwitchExpression node, CompilationFlags flags)
  decimal ConvertSwitchValue(object value)
  void DefineSwitchCaseLabel(SwitchCase case, Label& label, Boolean& isGoto)
  void EmitSwitchCases(SwitchExpression node, Label[] labels, Boolean[] isGoto, Label default, Label end, CompilationFlags flags)
  void EmitSwitchBuckets(SwitchInfo info, List`1<List`1<SwitchLabel>> buckets, int first, int last)
  void EmitSwitchBucket(SwitchInfo info, List`1<SwitchLabel> bucket)
  bool TryEmitHashtableSwitch(SwitchExpression node, CompilationFlags flags)
  void CheckRethrow()
  void CheckTry()
  void EmitSaveExceptionOrPop(CatchBlock cb)
  void EmitTryExpression(Expression expr)
  void EmitCatchStart(CatchBlock cb)
  void EmitQuoteUnaryExpression(Expression expr)
  void EmitQuote(UnaryExpression quote)
  void EmitThrowUnaryExpression(Expression expr)
  void EmitThrow(UnaryExpression expr, CompilationFlags flags)
  void EmitUnaryExpression(Expression expr, CompilationFlags flags)
  void EmitUnary(UnaryExpression node, CompilationFlags flags)
  void EmitUnaryOperator(ExpressionType op, Type operandType, Type resultType)
  void EmitConstantOne(Type type)
  void EmitUnboxUnaryExpression(Expression expr)
  void EmitConvertUnaryExpression(Expression expr, CompilationFlags flags)
  void EmitConvert(UnaryExpression node, CompilationFlags flags)
  void EmitUnaryMethod(UnaryExpression node, CompilationFlags flags)
  void .ctor(AnalyzedTree tree, LambdaExpression lambda)
  void .ctor(AnalyzedTree tree, LambdaExpression lambda, MethodBuilder method)
  void .ctor(LambdaCompiler parent, LambdaExpression lambda, InvocationExpression invocation)
  void InitializeMethod()
  ILGenerator get_IL()
  IParameterProvider get_Parameters()
  bool get_CanEmitBoundConstants()
  Delegate Compile(LambdaExpression lambda)
  void Compile(LambdaExpression lambda, MethodBuilder method)
  AnalyzedTree AnalyzeLambda(LambdaExpression& lambda)
  LocalBuilder GetLocal(Type type)
  void FreeLocal(LocalBuilder local)
  int GetLambdaArgument(int index)
  void EmitLambdaArgument(int index)
  void EmitClosureArgument()
  Delegate CreateDelegate()
  FieldBuilder CreateStaticField(string name, Type type)
  MemberExpression CreateLazyInitializedField(string name)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.ILocalCache
Поля:
Свойства:
Методы:
  LocalBuilder GetLocal(Type type)
  void FreeLocal(LocalBuilder local)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.StackSpiller
Наследуется от: object
Поля:
  StackGuard _guard
  TempMaker _tm
  Stack _startingStack
  RewriteAction _lambdaRewrite
Свойства:
Методы:
  Result RewriteExpression(Expression node, Stack stack)
  Expression MakeBlock(ArrayBuilder`1<Expression> expressions)
  Expression MakeBlock(Expression[] expressions)
  Expression MakeBlock(IReadOnlyList`1<Expression> expressions)
  ParameterExpression MakeTemp(Type type)
  int Mark()
  void Free(int mark)
  void VerifyTemps()
  ParameterExpression ToTemp(Expression expression, Expression& save, bool byRef)
  LambdaExpression AnalyzeLambda(LambdaExpression lambda)
  void .ctor(Stack stack)
  Expression`1<T> Rewrite(Expression`1<T> lambda)
  void VerifyRewrite(Result result, Expression node)
  Result RewriteExpressionFreeTemps(Expression expression, Stack stack)
  Result RewriteDynamicExpression(Expression expr)
  Result RewriteIndexAssignment(BinaryExpression node, Stack stack)
  Result RewriteLogicalBinaryExpression(Expression expr, Stack stack)
  Result RewriteReducibleExpression(Expression expr, Stack stack)
  Result RewriteBinaryExpression(Expression expr, Stack stack)
  Result RewriteVariableAssignment(BinaryExpression node, Stack stack)
  Result RewriteAssignBinaryExpression(Expression expr, Stack stack)
  Result RewriteExtensionAssignment(BinaryExpression node, Stack stack)
  Result RewriteLambdaExpression(Expression expr)
  Result RewriteConditionalExpression(Expression expr, Stack stack)
  Result RewriteMemberAssignment(BinaryExpression node, Stack stack)
  Result RewriteMemberExpression(Expression expr, Stack stack)
  Result RewriteIndexExpression(Expression expr, Stack stack)
  Result RewriteMethodCallExpression(Expression expr, Stack stack)
  Result RewriteNewArrayExpression(Expression expr, Stack stack)
  Result RewriteInvocationExpression(Expression expr, Stack stack)
  Result RewriteNewExpression(Expression expr, Stack stack)
  Result RewriteTypeBinaryExpression(Expression expr, Stack stack)
  Result RewriteThrowUnaryExpression(Expression expr, Stack stack)
  Result RewriteUnaryExpression(Expression expr, Stack stack)
  Result RewriteListInitExpression(Expression expr, Stack stack)
  Result RewriteMemberInitExpression(Expression expr, Stack stack)
  Result RewriteBlockExpression(Expression expr, Stack stack)
  Result RewriteLabelExpression(Expression expr, Stack stack)
  Result RewriteLoopExpression(Expression expr, Stack stack)
  Result RewriteGotoExpression(Expression expr, Stack stack)
  Result RewriteSwitchExpression(Expression expr, Stack stack)
  Result RewriteTryExpression(Expression expr, Stack stack)
  Result RewriteExtensionExpression(Expression expr, Stack stack)
  T[] Clone(ReadOnlyCollection`1<T> original, int max)
  void RequireNoRefArgs(MethodBase method)
  void RequireNotRefInstance(Expression instance)
  bool IsRefInstance(Expression instance)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.SpilledExpressionBlock
Наследуется от: BlockN
Поля:
Свойства:
Методы:
  void .ctor(IReadOnlyList`1<Expression> expressions)
  BlockExpression Rewrite(ReadOnlyCollection`1<ParameterExpression> variables, Expression[] args)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.TypeInfoExtensions
Наследуется от: object
Поля:
Свойства:
Методы:
  Type MakeDelegateType(TypeInfo info, Type retType, Expression[] args)
  Type MakeDelegateType(TypeInfo info, Type retType, IList`1<Expression> args)
--------------------------------------------------
Класс: System.Linq.Expressions.Compiler.VariableBinder
Наследуется от: ExpressionVisitor
Поля:
  AnalyzedTree _tree
  Stack`1<CompilerScope> _scopes
  Stack`1<BoundConstants> _constants
  StackGuard _guard
  bool _inQuote
Свойства:
  string CurrentLambdaName
Методы:
  AnalyzedTree Bind(LambdaExpression lambda)
  void .ctor()
  Expression Visit(Expression node)
  Expression VisitConstant(ConstantExpression node)
  Expression VisitUnary(UnaryExpression node)
  Expression VisitLambda(Expression`1<T> node)
  Expression VisitInvocation(InvocationExpression node)
  Expression VisitBlock(BlockExpression node)
  CatchBlock VisitCatchBlock(CatchBlock node)
  ReadOnlyCollection`1<Expression> MergeScopes(Expression node)
  Expression VisitParameter(ParameterExpression node)
  Expression VisitRuntimeVariables(RuntimeVariablesExpression node)
  void Reference(ParameterExpression node, VariableStorageKind storage)
  string get_CurrentLambdaName()
--------------------------------------------------
Класс: System.Runtime.InteropServices.ComAwareEventInfo
Наследуется от: EventInfo
Поля:
Свойства:
  EventAttributes Attributes
  Type DeclaringType
  string Name
  Type ReflectedType
Методы:
  EventAttributes get_Attributes()
  Type get_DeclaringType()
  string get_Name()
  void .ctor(Type type, string eventName)
  void AddEventHandler(object target, Delegate handler)
  void RemoveEventHandler(object target, Delegate handler)
  MethodInfo GetAddMethod(bool nonPublic)
  MethodInfo GetRaiseMethod(bool nonPublic)
  MethodInfo GetRemoveMethod(bool nonPublic)
  Object[] GetCustomAttributes(Type attributeType, bool inherit)
  Object[] GetCustomAttributes(bool inherit)
  bool IsDefined(Type attributeType, bool inherit)
  Type get_ReflectedType()
--------------------------------------------------
Класс: System.Runtime.CompilerServices.RuntimeOps
Наследуется от: object
Поля:
Свойства:
Методы:
  bool ExpandoTryGetValue(ExpandoObject expando, object indexClass, int index, string name, bool ignoreCase, Object& value)
  object ExpandoTrySetValue(ExpandoObject expando, object indexClass, int index, object value, string name, bool ignoreCase)
  bool ExpandoTryDeleteValue(ExpandoObject expando, object indexClass, int index, string name, bool ignoreCase)
  bool ExpandoCheckVersion(ExpandoObject expando, object version)
  void ExpandoPromoteClass(ExpandoObject expando, object oldClass, object newClass)
  Expression Quote(Expression expression, object hoistedLocals, Object[] locals)
  IRuntimeVariables MergeRuntimeVariables(IRuntimeVariables first, IRuntimeVariables second, Int32[] indexes)
  IRuntimeVariables CreateRuntimeVariables(Object[] data, Int64[] indexes)
  IRuntimeVariables CreateRuntimeVariables()
--------------------------------------------------
Класс: System.Runtime.CompilerServices.CallSite
Наследуется от: object
Поля:
  string CallSiteTargetMethodName
  CacheDict`2 modreq(System.Runtime.CompilerServices.IsVolatile) s_siteCtors
  CallSiteBinder _binder
  bool _match
Свойства:
  CallSiteBinder Binder
Методы:
  void .ctor(CallSiteBinder binder)
  CallSiteBinder get_Binder()
  CallSite Create(Type delegateType, CallSiteBinder binder)
  void .ctor()
--------------------------------------------------
Класс: System.Runtime.CompilerServices.CallSite`1
Наследуется от: CallSite
Поля:
  T Target
  T[] Rules
  CallSite _cachedMatchmaker
  T s_cachedUpdate
  T modreq(System.Runtime.CompilerServices.IsVolatile) s_cachedNoMatch
  int MaxRules
Свойства:
  T Update
Методы:
  T get_Update()
  void .ctor(CallSiteBinder binder)
  void .ctor()
  CallSite`1<T> CreateMatchMaker()
  CallSite GetMatchmaker()
  void ReleaseMatchmaker(CallSite matchMaker)
  CallSite`1<T> Create(CallSiteBinder binder)
  T GetUpdateDelegate()
  T GetUpdateDelegate(T& addr)
  void ClearRuleCache()
  void AddRule(T newRule)
  void MoveRule(int i)
  T MakeUpdateDelegate()
  bool IsSimpleSignature(MethodInfo invoke, Type[]& sig)
  T CreateCustomUpdateDelegate(MethodInfo invoke)
  T CreateCustomNoMatchDelegate(MethodInfo invoke)
  Expression Convert(Expression arg, Type type)
--------------------------------------------------
Класс: System.Runtime.CompilerServices.CallSiteBinder
Наследуется от: object
Поля:
  Dictionary`2<Type, object> Cache
  LabelTarget <UpdateLabel>k__BackingField
Свойства:
  LabelTarget UpdateLabel
Методы:
  void .ctor()
  LabelTarget get_UpdateLabel()
  Expression Bind(Object[] args, ReadOnlyCollection`1<ParameterExpression> parameters, LabelTarget returnLabel)
  T BindDelegate(CallSite`1<T> site, Object[] args)
  T BindCore(CallSite`1<T> site, Object[] args)
  void CacheTarget(T target)
  Expression`1<T> Stitch(Expression binding, LambdaSignature`1<T> signature)
  RuleCache`1<T> GetRuleCache()
  void .cctor()
--------------------------------------------------
Класс: System.Runtime.CompilerServices.CallSiteHelpers
Наследуется от: object
Поля:
  Type s_knownNonDynamicMethodType
Свойства:
Методы:
  bool IsInternalFrame(MethodBase mb)
  void .cctor()
--------------------------------------------------
Класс: System.Runtime.CompilerServices.CallSiteOps
Наследуется от: object
Поля:
Свойства:
Методы:
  CallSite`1<T> CreateMatchmaker(CallSite`1<T> site)
  bool SetNotMatched(CallSite site)
  bool GetMatch(CallSite site)
  void ClearMatch(CallSite site)
  void AddRule(CallSite`1<T> site, T rule)
  void UpdateRules(CallSite`1<T> this, int matched)
  T[] GetRules(CallSite`1<T> site)
  RuleCache`1<T> GetRuleCache(CallSite`1<T> site)
  void MoveRule(RuleCache`1<T> cache, T rule, int i)
  T[] GetCachedRules(RuleCache`1<T> cache)
  T Bind(CallSiteBinder binder, CallSite`1<T> site, Object[] args)
--------------------------------------------------
Класс: System.Runtime.CompilerServices.Closure
Наследуется от: object
Поля:
  Object[] Constants
  Object[] Locals
Свойства:
Методы:
  void .ctor(Object[] constants, Object[] locals)
--------------------------------------------------
Класс: System.Runtime.CompilerServices.DebugInfoGenerator
Наследуется от: object
Поля:
Свойства:
Методы:
  DebugInfoGenerator CreatePdbGenerator()
  void MarkSequencePoint(LambdaExpression method, int ilOffset, DebugInfoExpression sequencePoint)
  void MarkSequencePoint(LambdaExpression method, MethodBase methodBase, ILGenerator ilg, DebugInfoExpression sequencePoint)
  void SetLocalName(LocalBuilder localBuilder, string name)
  void .ctor()
--------------------------------------------------
Класс: System.Runtime.CompilerServices.IRuntimeVariables
Поля:
Свойства:
  int Count
  object Item
Методы:
  int get_Count()
  object get_Item(int index)
  void set_Item(int index, object value)
--------------------------------------------------
Класс: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1
Наследуется от: object
Поля:
  int DefaultCapacity
  T[] _items
  int _size
  int _version
Свойства:
  int Capacity
  int Count
  T Item
  bool System.Collections.Generic.ICollection<T>.IsReadOnly
  bool System.Collections.IList.IsReadOnly
  bool System.Collections.IList.IsFixedSize
  object System.Collections.IList.Item
  bool System.Collections.ICollection.IsSynchronized
  object System.Collections.ICollection.SyncRoot
Методы:
  void .ctor()
  void .ctor(int capacity)
  void .ctor(IEnumerable`1<T> collection)
  int get_Capacity()
  void set_Capacity(int value)
  int get_Count()
  int IndexOf(T item)
  void Insert(int index, T item)
  void RemoveAt(int index)
  T get_Item(int index)
  void set_Item(int index, T value)
  void Add(T item)
  void Clear()
  bool Contains(T item)
  void CopyTo(T[] array, int arrayIndex)
  bool System.Collections.Generic.ICollection<T>.get_IsReadOnly()
  bool Remove(T item)
  IEnumerator`1<T> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  bool System.Collections.IList.get_IsReadOnly()
  int System.Collections.IList.Add(object value)
  bool System.Collections.IList.Contains(object value)
  int System.Collections.IList.IndexOf(object value)
  void System.Collections.IList.Insert(int index, object value)
  bool System.Collections.IList.get_IsFixedSize()
  void System.Collections.IList.Remove(object value)
  object System.Collections.IList.get_Item(int index)
  void System.Collections.IList.set_Item(int index, object value)
  void System.Collections.ICollection.CopyTo(Array array, int index)
  bool System.Collections.ICollection.get_IsSynchronized()
  object System.Collections.ICollection.get_SyncRoot()
  void Reverse()
  void Reverse(int index, int count)
  T[] ToArray()
  ReadOnlyCollection`1<T> ToReadOnlyCollection()
  void EnsureCapacity(int min)
  bool IsCompatibleObject(object value)
  void ValidateNullValue(object value, string argument)
--------------------------------------------------
Класс: System.Runtime.CompilerServices.RuleCache`1
Наследуется от: object
Поля:
  T[] _rules
  object _cacheLock
  int MaxRules
  int InsertPosition
Свойства:
Методы:
  void .ctor()
  T[] GetRules()
  void MoveRule(T rule, int i)
  void AddRule(T newRule)
  void ReplaceRule(T oldRule, T newRule)
  T[] AddOrInsert(T[] rules, T item)
--------------------------------------------------
Класс: System.Runtime.CompilerServices.TrueReadOnlyCollection`1
Наследуется от: ReadOnlyCollection`1<T>
Поля:
Свойства:
Методы:
  void .ctor(T[] list)
--------------------------------------------------
Класс: System.Runtime.CompilerServices.FriendAccessAllowedAttribute
Наследуется от: Attribute
Поля:
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: System.Runtime.CompilerServices.PreserveDependencyAttribute
Наследуется от: Attribute
Поля:
  string <Condition>k__BackingField
Свойства:
  string Condition
Методы:
  void .ctor(string memberSignature)
  void .ctor(string memberSignature, string typeName)
  void .ctor(string memberSignature, string typeName, string assembly)
  string get_Condition()
  void set_Condition(string value)
--------------------------------------------------
Класс: System.Runtime.CompilerServices.StrongBox`1
Наследуется от: object
Поля:
  T Value
Свойства:
  object System.Runtime.CompilerServices.IStrongBox.Value
Методы:
  void .ctor()
  void .ctor(T value)
  object System.Runtime.CompilerServices.IStrongBox.get_Value()
  void System.Runtime.CompilerServices.IStrongBox.set_Value(object value)
--------------------------------------------------
Класс: System.Runtime.CompilerServices.IStrongBox
Поля:
Свойства:
  object Value
Методы:
  object get_Value()
  void set_Value(object value)
--------------------------------------------------
Класс: System.Runtime.CompilerServices.DynamicAttribute
Наследуется от: Attribute
Поля:
  Boolean[] _transformFlags
Свойства:
  IList`1<bool> TransformFlags
Методы:
  void .ctor()
  void .ctor(Boolean[] transformFlags)
  IList`1<bool> get_TransformFlags()
--------------------------------------------------
Класс: System.Runtime.CompilerServices.ExecutionScope
Наследуется от: object
Поля:
  ExecutionScope Parent
  Object[] Globals
  Object[] Locals
Свойства:
Методы:
  void .ctor()
  Object[] CreateHoistedLocals()
  Delegate CreateDelegate(int indexLambda, Object[] locals)
  Expression IsolateExpression(Expression expression, Object[] locals)
--------------------------------------------------
Класс: System.Dynamic.BinaryOperationBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  ExpressionType <Operation>k__BackingField
Свойства:
  Type ReturnType
  ExpressionType Operation
  bool IsStandardBinder
Методы:
  void .ctor(ExpressionType operation)
  Type get_ReturnType()
  ExpressionType get_Operation()
  DynamicMetaObject FallbackBinaryOperation(DynamicMetaObject target, DynamicMetaObject arg)
  DynamicMetaObject FallbackBinaryOperation(DynamicMetaObject target, DynamicMetaObject arg, DynamicMetaObject errorSuggestion)
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
  bool OperationIsValid(ExpressionType operation)
--------------------------------------------------
Класс: System.Dynamic.BindingRestrictions
Наследуется от: object
Поля:
  BindingRestrictions Empty
  int TypeRestrictionHash
  int InstanceRestrictionHash
  int CustomRestrictionHash
Свойства:
  string DebugView
Методы:
  void .ctor()
  Expression GetExpression()
  BindingRestrictions Merge(BindingRestrictions restrictions)
  BindingRestrictions GetTypeRestriction(Expression expression, Type type)
  BindingRestrictions GetTypeRestriction(DynamicMetaObject obj)
  BindingRestrictions GetInstanceRestriction(Expression expression, object instance)
  BindingRestrictions GetExpressionRestriction(Expression expression)
  BindingRestrictions Combine(IList`1<DynamicMetaObject> contributingObjects)
  Expression ToExpression()
  string get_DebugView()
  void .cctor()
--------------------------------------------------
Класс: System.Dynamic.CallInfo
Наследуется от: object
Поля:
  int <ArgumentCount>k__BackingField
  ReadOnlyCollection`1<string> <ArgumentNames>k__BackingField
Свойства:
  int ArgumentCount
  ReadOnlyCollection`1<string> ArgumentNames
Методы:
  void .ctor(int argCount, String[] argNames)
  void .ctor(int argCount, IEnumerable`1<string> argNames)
  int get_ArgumentCount()
  ReadOnlyCollection`1<string> get_ArgumentNames()
  int GetHashCode()
  bool Equals(object obj)
--------------------------------------------------
Класс: System.Dynamic.ConvertBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  Type <Type>k__BackingField
  bool <Explicit>k__BackingField
Свойства:
  Type Type
  bool Explicit
  bool IsStandardBinder
  Type ReturnType
Методы:
  void .ctor(Type type, bool explicit)
  Type get_Type()
  bool get_Explicit()
  DynamicMetaObject FallbackConvert(DynamicMetaObject target)
  DynamicMetaObject FallbackConvert(DynamicMetaObject target, DynamicMetaObject errorSuggestion)
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
  Type get_ReturnType()
--------------------------------------------------
Класс: System.Dynamic.CreateInstanceBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  CallInfo <CallInfo>k__BackingField
Свойства:
  Type ReturnType
  CallInfo CallInfo
  bool IsStandardBinder
Методы:
  void .ctor(CallInfo callInfo)
  Type get_ReturnType()
  CallInfo get_CallInfo()
  DynamicMetaObject FallbackCreateInstance(DynamicMetaObject target, DynamicMetaObject[] args)
  DynamicMetaObject FallbackCreateInstance(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion)
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
--------------------------------------------------
Класс: System.Dynamic.DeleteIndexBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  CallInfo <CallInfo>k__BackingField
Свойства:
  Type ReturnType
  CallInfo CallInfo
  bool IsStandardBinder
Методы:
  void .ctor(CallInfo callInfo)
  Type get_ReturnType()
  CallInfo get_CallInfo()
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
  DynamicMetaObject FallbackDeleteIndex(DynamicMetaObject target, DynamicMetaObject[] indexes)
  DynamicMetaObject FallbackDeleteIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject errorSuggestion)
--------------------------------------------------
Класс: System.Dynamic.DeleteMemberBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  string <Name>k__BackingField
  bool <IgnoreCase>k__BackingField
Свойства:
  string Name
  bool IgnoreCase
  Type ReturnType
  bool IsStandardBinder
Методы:
  void .ctor(string name, bool ignoreCase)
  string get_Name()
  bool get_IgnoreCase()
  Type get_ReturnType()
  DynamicMetaObject FallbackDeleteMember(DynamicMetaObject target)
  DynamicMetaObject FallbackDeleteMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion)
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
--------------------------------------------------
Класс: System.Dynamic.DynamicMetaObject
Наследуется от: object
Поля:
  DynamicMetaObject[] EmptyMetaObjects
  object s_noValueSentinel
  object _value
  Expression <Expression>k__BackingField
  BindingRestrictions <Restrictions>k__BackingField
Свойства:
  Expression Expression
  BindingRestrictions Restrictions
  object Value
  bool HasValue
  Type RuntimeType
  Type LimitType
Методы:
  void .ctor(Expression expression, BindingRestrictions restrictions)
  void .ctor(Expression expression, BindingRestrictions restrictions, object value)
  Expression get_Expression()
  BindingRestrictions get_Restrictions()
  object get_Value()
  bool get_HasValue()
  Type get_RuntimeType()
  Type get_LimitType()
  DynamicMetaObject BindConvert(ConvertBinder binder)
  DynamicMetaObject BindGetMember(GetMemberBinder binder)
  DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value)
  DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder)
  DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes)
  DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value)
  DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes)
  DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args)
  DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args)
  DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args)
  DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder)
  DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg)
  IEnumerable`1<string> GetDynamicMemberNames()
  Expression[] GetExpressions(DynamicMetaObject[] objects)
  DynamicMetaObject Create(object value, Expression expression)
  void .cctor()
--------------------------------------------------
Класс: System.Dynamic.DynamicMetaObjectBinder
Наследуется от: CallSiteBinder
Поля:
Свойства:
  Type ReturnType
  bool IsStandardBinder
Методы:
  void .ctor()
  Type get_ReturnType()
  Expression Bind(Object[] args, ReadOnlyCollection`1<ParameterExpression> parameters, LabelTarget returnLabel)
  DynamicMetaObject[] CreateArgumentMetaObjects(Object[] args, ReadOnlyCollection`1<ParameterExpression> parameters)
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  Expression GetUpdateExpression(Type type)
  DynamicMetaObject Defer(DynamicMetaObject target, DynamicMetaObject[] args)
  DynamicMetaObject Defer(DynamicMetaObject[] args)
  DynamicMetaObject MakeDeferred(BindingRestrictions rs, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
--------------------------------------------------
Класс: System.Dynamic.DynamicObject
Наследуется от: object
Поля:
Свойства:
Методы:
  void .ctor()
  bool TryGetMember(GetMemberBinder binder, Object& result)
  bool TrySetMember(SetMemberBinder binder, object value)
  bool TryDeleteMember(DeleteMemberBinder binder)
  bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result)
  bool TryConvert(ConvertBinder binder, Object& result)
  bool TryCreateInstance(CreateInstanceBinder binder, Object[] args, Object& result)
  bool TryInvoke(InvokeBinder binder, Object[] args, Object& result)
  bool TryBinaryOperation(BinaryOperationBinder binder, object arg, Object& result)
  bool TryUnaryOperation(UnaryOperationBinder binder, Object& result)
  bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result)
  bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value)
  bool TryDeleteIndex(DeleteIndexBinder binder, Object[] indexes)
  IEnumerable`1<string> GetDynamicMemberNames()
  DynamicMetaObject GetMetaObject(Expression parameter)
--------------------------------------------------
Класс: System.Dynamic.ExpandoClass
Наследуется от: object
Поля:
  String[] _keys
  int _hashCode
  Dictionary`2<int, List`1<WeakReference>> _transitions
  int EmptyHashCode
  ExpandoClass Empty
Свойства:
  String[] Keys
Методы:
  void .ctor()
  void .ctor(String[] keys, int hashCode)
  ExpandoClass FindNewClass(string newKey)
  List`1<WeakReference> GetTransitionList(int hashCode)
  int GetValueIndex(string name, bool caseInsensitive, ExpandoObject obj)
  int GetValueIndexCaseSensitive(string name)
  int GetValueIndexCaseInsensitive(string name, ExpandoObject obj)
  String[] get_Keys()
  void .cctor()
--------------------------------------------------
Класс: System.Dynamic.ExpandoObject
Наследуется от: object
Поля:
  MethodInfo s_expandoTryGetValue
  MethodInfo s_expandoTrySetValue
  MethodInfo s_expandoTryDeleteValue
  MethodInfo s_expandoPromoteClass
  MethodInfo s_expandoCheckVersion
  object LockObject
  ExpandoData _data
  int _count
  object Uninitialized
  int AmbiguousMatchFound
  int NoMatch
  PropertyChangedEventHandler _propertyChanged
Свойства:
  ExpandoClass Class
  ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.Keys
  ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.Values
  object System.Collections.Generic.IDictionary<System.String,System.Object>.Item
  int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count
  bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly
Методы:
  void .ctor()
  bool TryGetValue(object indexClass, int index, string name, bool ignoreCase, Object& value)
  void TrySetValue(object indexClass, int index, object value, string name, bool ignoreCase, bool add)
  bool TryDeleteValue(object indexClass, int index, string name, bool ignoreCase, object deleteValue)
  bool IsDeletedMember(int index)
  ExpandoClass get_Class()
  ExpandoData PromoteClassCore(ExpandoClass oldClass, ExpandoClass newClass)
  void PromoteClass(object oldClass, object newClass)
  DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter)
  void TryAddMember(string key, object value)
  bool TryGetValueForKey(string key, Object& value)
  bool ExpandoContainsKey(string key)
  ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Keys()
  ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Values()
  object System.Collections.Generic.IDictionary<System.String,System.Object>.get_Item(string key)
  void System.Collections.Generic.IDictionary<System.String,System.Object>.set_Item(string key, object value)
  void System.Collections.Generic.IDictionary<System.String,System.Object>.Add(string key, object value)
  bool System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(string key)
  bool System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(string key)
  bool System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue(string key, Object& value)
  int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Count()
  bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly()
  void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item)
  void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear()
  bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item)
  void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex)
  bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item)
  IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  IEnumerator`1<KeyValuePair`2<string, object>> GetExpandoEnumerator(ExpandoData data, int version)
  void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value)
  void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value)
  void .cctor()
--------------------------------------------------
Класс: System.Dynamic.GetIndexBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  CallInfo <CallInfo>k__BackingField
Свойства:
  Type ReturnType
  CallInfo CallInfo
  bool IsStandardBinder
Методы:
  void .ctor(CallInfo callInfo)
  Type get_ReturnType()
  CallInfo get_CallInfo()
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
  DynamicMetaObject FallbackGetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes)
  DynamicMetaObject FallbackGetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject errorSuggestion)
--------------------------------------------------
Класс: System.Dynamic.GetMemberBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  string <Name>k__BackingField
  bool <IgnoreCase>k__BackingField
Свойства:
  Type ReturnType
  string Name
  bool IgnoreCase
  bool IsStandardBinder
Методы:
  void .ctor(string name, bool ignoreCase)
  Type get_ReturnType()
  string get_Name()
  bool get_IgnoreCase()
  DynamicMetaObject FallbackGetMember(DynamicMetaObject target)
  DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion)
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
--------------------------------------------------
Класс: System.Dynamic.IDynamicMetaObjectProvider
Поля:
Свойства:
Методы:
  DynamicMetaObject GetMetaObject(Expression parameter)
--------------------------------------------------
Класс: System.Dynamic.IInvokeOnGetBinder
Поля:
Свойства:
  bool InvokeOnGet
Методы:
  bool get_InvokeOnGet()
--------------------------------------------------
Класс: System.Dynamic.InvokeBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  CallInfo <CallInfo>k__BackingField
Свойства:
  Type ReturnType
  CallInfo CallInfo
  bool IsStandardBinder
Методы:
  void .ctor(CallInfo callInfo)
  Type get_ReturnType()
  CallInfo get_CallInfo()
  DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args)
  DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion)
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
--------------------------------------------------
Класс: System.Dynamic.InvokeMemberBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  string <Name>k__BackingField
  bool <IgnoreCase>k__BackingField
  CallInfo <CallInfo>k__BackingField
Свойства:
  Type ReturnType
  string Name
  bool IgnoreCase
  CallInfo CallInfo
  bool IsStandardBinder
Методы:
  void .ctor(string name, bool ignoreCase, CallInfo callInfo)
  Type get_ReturnType()
  string get_Name()
  bool get_IgnoreCase()
  CallInfo get_CallInfo()
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
  DynamicMetaObject FallbackInvokeMember(DynamicMetaObject target, DynamicMetaObject[] args)
  DynamicMetaObject FallbackInvokeMember(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion)
  DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion)
--------------------------------------------------
Класс: System.Dynamic.SetIndexBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  CallInfo <CallInfo>k__BackingField
Свойства:
  Type ReturnType
  CallInfo CallInfo
  bool IsStandardBinder
Методы:
  void .ctor(CallInfo callInfo)
  Type get_ReturnType()
  CallInfo get_CallInfo()
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
  DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject value)
  DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject value, DynamicMetaObject errorSuggestion)
--------------------------------------------------
Класс: System.Dynamic.SetMemberBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  string <Name>k__BackingField
  bool <IgnoreCase>k__BackingField
Свойства:
  Type ReturnType
  string Name
  bool IgnoreCase
  bool IsStandardBinder
Методы:
  void .ctor(string name, bool ignoreCase)
  Type get_ReturnType()
  string get_Name()
  bool get_IgnoreCase()
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
  DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value)
  DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion)
--------------------------------------------------
Класс: System.Dynamic.UnaryOperationBinder
Наследуется от: DynamicMetaObjectBinder
Поля:
  ExpressionType <Operation>k__BackingField
Свойства:
  Type ReturnType
  ExpressionType Operation
  bool IsStandardBinder
Методы:
  void .ctor(ExpressionType operation)
  Type get_ReturnType()
  ExpressionType get_Operation()
  DynamicMetaObject FallbackUnaryOperation(DynamicMetaObject target)
  DynamicMetaObject FallbackUnaryOperation(DynamicMetaObject target, DynamicMetaObject errorSuggestion)
  DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args)
  bool get_IsStandardBinder()
  bool OperationIsValid(ExpressionType operation)
--------------------------------------------------
Класс: System.Dynamic.UpdateDelegates
Наследуется от: object
Поля:
Свойства:
Методы:
  TRet UpdateAndExecute1(CallSite site, T0 arg0)
  TRet NoMatch1(CallSite site, T0 arg0)
  TRet UpdateAndExecute2(CallSite site, T0 arg0, T1 arg1)
  TRet NoMatch2(CallSite site, T0 arg0, T1 arg1)
  TRet UpdateAndExecute3(CallSite site, T0 arg0, T1 arg1, T2 arg2)
  TRet NoMatch3(CallSite site, T0 arg0, T1 arg1, T2 arg2)
  TRet UpdateAndExecute4(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
  TRet NoMatch4(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
  TRet UpdateAndExecute5(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
  TRet NoMatch5(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
  TRet UpdateAndExecute6(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
  TRet NoMatch6(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
  TRet UpdateAndExecute7(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
  TRet NoMatch7(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
  TRet UpdateAndExecute8(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
  TRet NoMatch8(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
  TRet UpdateAndExecute9(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
  TRet NoMatch9(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
  TRet UpdateAndExecute10(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
  TRet NoMatch10(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
  void UpdateAndExecuteVoid1(CallSite site, T0 arg0)
  void NoMatchVoid1(CallSite site, T0 arg0)
  void UpdateAndExecuteVoid2(CallSite site, T0 arg0, T1 arg1)
  void NoMatchVoid2(CallSite site, T0 arg0, T1 arg1)
  void UpdateAndExecuteVoid3(CallSite site, T0 arg0, T1 arg1, T2 arg2)
  void NoMatchVoid3(CallSite site, T0 arg0, T1 arg1, T2 arg2)
  void UpdateAndExecuteVoid4(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
  void NoMatchVoid4(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
  void UpdateAndExecuteVoid5(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
  void NoMatchVoid5(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
  void UpdateAndExecuteVoid6(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
  void NoMatchVoid6(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
  void UpdateAndExecuteVoid7(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
  void NoMatchVoid7(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
  void UpdateAndExecuteVoid8(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
  void NoMatchVoid8(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
  void UpdateAndExecuteVoid9(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
  void NoMatchVoid9(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
  void UpdateAndExecuteVoid10(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
  void NoMatchVoid10(CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
--------------------------------------------------
Класс: System.Dynamic.Utils.CacheDict`2
Наследуется от: object
Поля:
  int _mask
  Entry[] _entries
Свойства:
  TValue Item
Методы:
  void .ctor(int size)
  int AlignSize(int size)
  bool TryGetValue(TKey key, TValue& value)
  void Add(TKey key, TValue value)
  void set_Item(TKey key, TValue value)
--------------------------------------------------
Класс: System.Dynamic.Utils.CollectionExtensions
Наследуется от: object
Поля:
Свойства:
Методы:
  TrueReadOnlyCollection`1<T> AddFirst(ReadOnlyCollection`1<T> list, T item)
  T[] AddFirst(T[] array, T item)
  T[] AddLast(T[] array, T item)
  T[] RemoveFirst(T[] array)
  T[] RemoveLast(T[] array)
  ReadOnlyCollection`1<T> ToReadOnly(IEnumerable`1<T> enumerable)
  int ListHashCode(ReadOnlyCollection`1<T> list)
  bool ListEquals(ReadOnlyCollection`1<T> first, ReadOnlyCollection`1<T> second)
--------------------------------------------------
Класс: System.Dynamic.Utils.ContractUtils
Наследуется от: object
Поля:
Свойства:
  Exception Unreachable
Методы:
  Exception get_Unreachable()
  void Requires(bool precondition, string paramName)
  void RequiresNotNull(object value, string paramName)
  void RequiresNotNull(object value, string paramName, int index)
  void RequiresNotEmpty(ICollection`1<T> collection, string paramName)
  void RequiresNotNullItems(IList`1<T> array, string arrayName)
  void AssertLockHeld(object lockObject)
  string GetParamName(string paramName, int index)
  void RequiresArrayRange(IList`1<T> array, int offset, int count, string offsetName, string countName)
--------------------------------------------------
Класс: System.Dynamic.Utils.EmptyReadOnlyCollection`1
Наследуется от: object
Поля:
  ReadOnlyCollection`1<T> Instance
Свойства:
Методы:
  void .cctor()
--------------------------------------------------
Класс: System.Dynamic.Utils.ExpressionUtils
Наследуется от: object
Поля:
Свойства:
Методы:
  ReadOnlyCollection`1<ParameterExpression> ReturnReadOnly(IParameterProvider provider, Object& collection)
  ReadOnlyCollection`1<T> ReturnReadOnly(IReadOnlyList`1& collection)
  ReadOnlyCollection`1<Expression> ReturnReadOnly(IArgumentProvider provider, Object& collection)
  T ReturnObject(object collectionOrT)
  void ValidateArgumentTypes(MethodBase method, ExpressionType nodeKind, ReadOnlyCollection`1& arguments, string methodParamName)
  void ValidateArgumentCount(MethodBase method, ExpressionType nodeKind, int count, ParameterInfo[] pis)
  Expression ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arguments, ParameterInfo pi, string methodParamName, string argumentParamName, int index)
  void RequiresCanRead(Expression expression, string paramName)
  void RequiresCanRead(Expression expression, string paramName, int idx)
  bool TryQuote(Type parameterType, Expression& argument)
  ParameterInfo[] GetParametersForValidation(MethodBase method, ExpressionType nodeKind)
  bool SameElements(ICollection`1<T> replacement, IReadOnlyList`1<T> current)
  bool SameElements(IEnumerable`1& replacement, IReadOnlyList`1<T> current)
  bool SameElementsInCollection(ICollection`1<T> replacement, IReadOnlyList`1<T> current)
  void ValidateArgumentCount(LambdaExpression lambda)
--------------------------------------------------
Класс: System.Dynamic.Utils.ExpressionVisitorUtils
Наследуется от: object
Поля:
Свойства:
Методы:
  Expression[] VisitBlockExpressions(ExpressionVisitor visitor, BlockExpression block)
  ParameterExpression[] VisitParameters(ExpressionVisitor visitor, IParameterProvider nodes, string callerName)
  Expression[] VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)
--------------------------------------------------
Класс: System.Dynamic.Utils.Helpers
Наследуется от: object
Поля:
Свойства:
Методы:
  T CommonNode(T first, T second, Func`2<T, T> parent)
  void IncrementCount(T key, Dictionary`2<T, int> dict)
--------------------------------------------------
Класс: System.Dynamic.Utils.ListProvider`1
Наследуется от: object
Поля:
Свойства:
  T First
  int ElementCount
  T Item
  int Count
  bool IsReadOnly
Методы:
  T get_First()
  int get_ElementCount()
  T GetElement(int index)
  int IndexOf(T item)
  void Insert(int index, T item)
  void RemoveAt(int index)
  T get_Item(int index)
  void set_Item(int index, T value)
  void Add(T item)
  void Clear()
  bool Contains(T item)
  void CopyTo(T[] array, int index)
  int get_Count()
  bool get_IsReadOnly()
  bool Remove(T item)
  IEnumerator`1<T> GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  void .ctor()
--------------------------------------------------
Класс: System.Dynamic.Utils.ListArgumentProvider
Наследуется от: ListProvider`1<Expression>
Поля:
  IArgumentProvider _provider
  Expression _arg0
Свойства:
  Expression First
  int ElementCount
Методы:
  void .ctor(IArgumentProvider provider, Expression arg0)
  Expression get_First()
  int get_ElementCount()
  Expression GetElement(int index)
--------------------------------------------------
Класс: System.Dynamic.Utils.ListParameterProvider
Наследуется от: ListProvider`1<ParameterExpression>
Поля:
  IParameterProvider _provider
  ParameterExpression _arg0
Свойства:
  ParameterExpression First
  int ElementCount
Методы:
  void .ctor(IParameterProvider provider, ParameterExpression arg0)
  ParameterExpression get_First()
  int get_ElementCount()
  ParameterExpression GetElement(int index)
--------------------------------------------------
Класс: System.Dynamic.Utils.TypeExtensions
Наследуется от: object
Поля:
  CacheDict`2<MethodBase, ParameterInfo[]> s_paramInfoCache
Свойства:
Методы:
  MethodInfo GetAnyStaticMethodValidated(Type type, string name, Type[] types)
  bool MatchesArgumentTypes(MethodInfo mi, Type[] argTypes)
  Type GetReturnType(MethodBase mi)
  TypeCode GetTypeCode(Type type)
  ParameterInfo[] GetParametersCached(MethodBase method)
  bool IsByRefParameter(ParameterInfo pi)
  void .cctor()
--------------------------------------------------
Класс: System.Dynamic.Utils.TypeUtils
Наследуется от: object
Поля:
  Type[] s_arrayAssignableInterfaces
Свойства:
Методы:
  Type GetNonNullableType(Type type)
  Type GetNullableType(Type type)
  bool IsNullableType(Type type)
  bool IsNullableOrReferenceType(Type type)
  bool IsBool(Type type)
  bool IsNumeric(Type type)
  bool IsInteger(Type type)
  bool IsInteger64(Type type)
  bool IsArithmetic(Type type)
  bool IsUnsignedInt(Type type)
  bool IsIntegerOrBool(Type type)
  bool IsNumericOrBool(Type type)
  bool IsValidInstanceType(MemberInfo member, Type instanceType)
  bool HasIdentityPrimitiveOrNullableConversionTo(Type source, Type dest)
  bool HasReferenceConversionTo(Type source, Type dest)
  bool StrictHasReferenceConversionTo(Type source, Type dest, bool skipNonArray)
  bool HasArrayToInterfaceConversion(Type source, Type dest)
  bool HasInterfaceToArrayConversion(Type source, Type dest)
  bool IsCovariant(Type t)
  bool IsContravariant(Type t)
  bool IsInvariant(Type t)
  bool IsDelegate(Type t)
  bool IsLegalExplicitVariantDelegateConversion(Type source, Type dest)
  bool IsConvertible(Type type)
  bool HasReferenceEquality(Type left, Type right)
  bool HasBuiltInEqualityOperator(Type left, Type right)
  bool IsImplicitlyConvertibleTo(Type source, Type destination)
  MethodInfo GetUserDefinedCoercionMethod(Type convertFrom, Type convertToType)
  MethodInfo FindConversionOperator(MethodInfo[] methods, Type typeFrom, Type typeTo)
  bool IsImplicitNumericConversion(Type source, Type destination)
  bool IsImplicitReferenceConversion(Type source, Type destination)
  bool IsImplicitBoxingConversion(Type source, Type destination)
  bool IsImplicitNullableConversion(Type source, Type destination)
  Type FindGenericType(Type definition, Type type)
  MethodInfo GetBooleanOperator(Type type, string name)
  Type GetNonRefType(Type type)
  bool AreEquivalent(Type t1, Type t2)
  bool AreReferenceAssignable(Type dest, Type src)
  bool IsSameOrSubclass(Type type, Type subType)
  void ValidateType(Type type, string paramName)
  void ValidateType(Type type, string paramName, bool allowByRef, bool allowPointer)
  bool ValidateType(Type type, string paramName, int index)
  MethodInfo GetInvokeMethod(Type delegateType)
  bool IsUnsigned(Type type)
  bool IsUnsigned(TypeCode typeCode)
  bool IsFloatingPoint(Type type)
  bool IsFloatingPoint(TypeCode typeCode)
  void .cctor()
--------------------------------------------------
Класс: System.IO.Error
Наследуется от: object
Поля:
Свойства:
Методы:
  Exception GetEndOfFile()
  Exception GetPipeNotOpen()
  Exception GetReadNotSupported()
  Exception GetSeekNotSupported()
  Exception GetWriteNotSupported()
  Exception GetOperationAborted()
--------------------------------------------------
Класс: System.IO.HandleInheritability
Наследуется от: Enum
Поля:
  int value__
  HandleInheritability None
  HandleInheritability Inheritable
Свойства:
Методы:
--------------------------------------------------
Класс: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
Наследуется от: Enum
Поля:
  int value__
  MemoryMappedFileAccess ReadWrite
  MemoryMappedFileAccess Read
  MemoryMappedFileAccess Write
  MemoryMappedFileAccess CopyOnWrite
  MemoryMappedFileAccess ReadExecute
  MemoryMappedFileAccess ReadWriteExecute
Свойства:
Методы:
--------------------------------------------------
Класс: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
Наследуется от: Enum
Поля:
  int value__
  MemoryMappedFileOptions None
  MemoryMappedFileOptions DelayAllocatePages
Свойства:
Методы:
--------------------------------------------------
Класс: System.IO.MemoryMappedFiles.MemoryMappedFileRights
Наследуется от: Enum
Поля:
  int value__
  MemoryMappedFileRights CopyOnWrite
  MemoryMappedFileRights Write
  MemoryMappedFileRights Read
  MemoryMappedFileRights Execute
  MemoryMappedFileRights Delete
  MemoryMappedFileRights ReadPermissions
  MemoryMappedFileRights ChangePermissions
  MemoryMappedFileRights TakeOwnership
  MemoryMappedFileRights ReadWrite
  MemoryMappedFileRights ReadExecute
  MemoryMappedFileRights ReadWriteExecute
  MemoryMappedFileRights FullControl
  MemoryMappedFileRights AccessSystemSecurity
Свойства:
Методы:
--------------------------------------------------
Класс: System.IO.MemoryMappedFiles.MemoryMappedFileSecurity
Наследуется от: ObjectSecurity`1<MemoryMappedFileRights>
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(SafeMemoryMappedFileHandle safeHandle, AccessControlSections includeSections)
  void PersistHandle(SafeHandle handle)
--------------------------------------------------
Класс: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
Наследуется от: UnmanagedMemoryAccessor
Поля:
  MemoryMappedView m_view
Свойства:
  SafeMemoryMappedViewHandle SafeMemoryMappedViewHandle
  long PointerOffset
Методы:
  void .ctor(MemoryMappedView view)
  SafeMemoryMappedViewHandle get_SafeMemoryMappedViewHandle()
  long get_PointerOffset()
  void Dispose(bool disposing)
  void Flush()
  void .ctor()
--------------------------------------------------
Класс: System.IO.MemoryMappedFiles.MemoryMappedViewStream
Наследуется от: UnmanagedMemoryStream
Поля:
  MemoryMappedView m_view
Свойства:
  SafeMemoryMappedViewHandle SafeMemoryMappedViewHandle
  long PointerOffset
Методы:
  void .ctor(MemoryMappedView view)
  SafeMemoryMappedViewHandle get_SafeMemoryMappedViewHandle()
  void SetLength(long value)
  long get_PointerOffset()
  void Dispose(bool disposing)
  void Flush()
  void .ctor()
--------------------------------------------------
Класс: System.IO.MemoryMappedFiles.MemoryMapImpl
Наследуется от: object
Поля:
Свойства:
Методы:
  IntPtr OpenFileInternal(Char* path, int path_length, FileMode mode, Char* mapName, int mapName_length, Int64& capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, Int32& error)
  IntPtr OpenHandleInternal(IntPtr handle, Char* mapName, int mapName_length, Int64& capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, Int32& error)
  void CloseMapping(IntPtr handle)
  void Flush(IntPtr file_handle)
  void ConfigureHandleInheritability(IntPtr handle, HandleInheritability inheritability)
  bool Unmap(IntPtr mmap_handle)
  int MapInternal(IntPtr handle, long offset, Int64& size, MemoryMappedFileAccess access, IntPtr& mmap_handle, IntPtr& base_address)
  void Map(IntPtr handle, long offset, Int64& size, MemoryMappedFileAccess access, IntPtr& mmap_handle, IntPtr& base_address)
  Exception CreateException(int error, string path)
  int StringLength(string a)
  void CheckString(string name, string value)
  IntPtr OpenFile(string path, FileMode mode, string mapName, Int64& capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options)
  IntPtr OpenHandle(IntPtr handle, string mapName, Int64& capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options)
--------------------------------------------------
Класс: System.IO.MemoryMappedFiles.MemoryMappedFile
Наследуется от: object
Поля:
  FileStream stream
  bool keepOpen
  SafeMemoryMappedFileHandle handle
Свойства:
  SafeMemoryMappedFileHandle SafeMemoryMappedFileHandle
Методы:
  MemoryMappedFile CreateFromFile(string path)
  MemoryMappedFile CreateFromFile(string path, FileMode mode)
  MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName)
  MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName, long capacity)
  MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName, long capacity, MemoryMappedFileAccess access)
  MemoryMappedFile CreateFromFile(FileStream fileStream, string mapName, long capacity, MemoryMappedFileAccess access, HandleInheritability inheritability, bool leaveOpen)
  MemoryMappedFile CreateFromFile(FileStream fileStream, string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileSecurity memoryMappedFileSecurity, HandleInheritability inheritability, bool leaveOpen)
  MemoryMappedFile CoreShmCreate(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, MemoryMappedFileSecurity memoryMappedFileSecurity, HandleInheritability inheritability, FileMode mode)
  MemoryMappedFile CreateNew(string mapName, long capacity)
  MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access)
  MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, HandleInheritability inheritability)
  MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, MemoryMappedFileSecurity memoryMappedFileSecurity, HandleInheritability inheritability)
  MemoryMappedFile CreateOrOpen(string mapName, long capacity)
  MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access)
  MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, HandleInheritability inheritability)
  MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, MemoryMappedFileSecurity memoryMappedFileSecurity, HandleInheritability inheritability)
  MemoryMappedFile OpenExisting(string mapName)
  MemoryMappedFile OpenExisting(string mapName, MemoryMappedFileRights desiredAccessRights)
  MemoryMappedFile OpenExisting(string mapName, MemoryMappedFileRights desiredAccessRights, HandleInheritability inheritability)
  MemoryMappedViewStream CreateViewStream()
  MemoryMappedViewStream CreateViewStream(long offset, long size)
  MemoryMappedViewStream CreateViewStream(long offset, long size, MemoryMappedFileAccess access)
  MemoryMappedViewAccessor CreateViewAccessor()
  MemoryMappedViewAccessor CreateViewAccessor(long offset, long size)
  MemoryMappedViewAccessor CreateViewAccessor(long offset, long size, MemoryMappedFileAccess access)
  void .ctor()
  void Dispose()
  void Dispose(bool disposing)
  MemoryMappedFileSecurity GetAccessControl()
  void SetAccessControl(MemoryMappedFileSecurity memoryMappedFileSecurity)
  SafeMemoryMappedFileHandle get_SafeMemoryMappedFileHandle()
  FileAccess GetFileAccess(MemoryMappedFileAccess access)
--------------------------------------------------
Класс: System.IO.MemoryMappedFiles.MemoryMappedView
Наследуется от: object
Поля:
  SafeMemoryMappedViewHandle m_viewHandle
  long m_pointerOffset
  long m_size
  MemoryMappedFileAccess m_access
Свойства:
  SafeMemoryMappedViewHandle ViewHandle
  long PointerOffset
  long Size
  MemoryMappedFileAccess Access
  bool IsClosed
Методы:
  void .ctor(SafeMemoryMappedViewHandle viewHandle, long pointerOffset, long size, MemoryMappedFileAccess access)
  SafeMemoryMappedViewHandle get_ViewHandle()
  long get_PointerOffset()
  long get_Size()
  MemoryMappedFileAccess get_Access()
  MemoryMappedView Create(IntPtr handle, long offset, long size, MemoryMappedFileAccess access)
  void Flush(IntPtr capacity)
  void Dispose(bool disposing)
  void Dispose()
  bool get_IsClosed()
--------------------------------------------------
Класс: System.IO.Pipes.AnonymousPipeClientStream
Наследуется от: PipeStream
Поля:
Свойства:
  PipeTransmissionMode TransmissionMode
  PipeTransmissionMode ReadMode
Методы:
  void .ctor(string pipeHandleAsString)
  void .ctor(PipeDirection direction, string pipeHandleAsString)
  void .ctor(PipeDirection direction, SafePipeHandle safePipeHandle)
  void Init(PipeDirection direction, SafePipeHandle safePipeHandle)
  void Finalize()
  PipeTransmissionMode get_TransmissionMode()
  void set_ReadMode(PipeTransmissionMode value)
--------------------------------------------------
Класс: System.IO.Pipes.AnonymousPipeServerStream
Наследуется от: PipeStream
Поля:
  SafePipeHandle _clientHandle
  bool _clientHandleExposed
Свойства:
  SafePipeHandle ClientSafePipeHandle
  PipeTransmissionMode TransmissionMode
  PipeTransmissionMode ReadMode
Методы:
  void Create(PipeDirection direction, HandleInheritability inheritability, int bufferSize)
  void Create(PipeDirection direction, HandleInheritability inheritability, int bufferSize, PipeSecurity pipeSecurity)
  void .ctor()
  void .ctor(PipeDirection direction)
  void .ctor(PipeDirection direction, HandleInheritability inheritability)
  void .ctor(PipeDirection direction, SafePipeHandle serverSafePipeHandle, SafePipeHandle clientSafePipeHandle)
  void .ctor(PipeDirection direction, HandleInheritability inheritability, int bufferSize)
  void Finalize()
  string GetClientHandleAsString()
  SafePipeHandle get_ClientSafePipeHandle()
  void DisposeLocalCopyOfClientHandle()
  void Dispose(bool disposing)
  PipeTransmissionMode get_TransmissionMode()
  void set_ReadMode(PipeTransmissionMode value)
  void .ctor(PipeDirection direction, HandleInheritability inheritability, int bufferSize, PipeSecurity pipeSecurity)
--------------------------------------------------
Класс: System.IO.Pipes.ConnectionCompletionSource
Наследуется от: PipeCompletionSource`1<VoidResult>
Поля:
  NamedPipeServerStream _serverStream
Свойства:
Методы:
  void .ctor(NamedPipeServerStream server)
  void SetCompletedSynchronously()
  void AsyncCallback(UInt32 errorCode, UInt32 numBytes)
  void HandleError(int errorCode)
  void HandleUnexpectedCancellation()
--------------------------------------------------
Класс: System.IO.Pipes.VoidResult
Наследуется от: ValueType
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: System.IO.Pipes.NamedPipeClientStream
Наследуется от: PipeStream
Поля:
  int CancellationCheckInterval
  string _normalizedPipePath
  TokenImpersonationLevel _impersonationLevel
  PipeOptions _pipeOptions
  HandleInheritability _inheritability
  PipeDirection _direction
  int _access
Свойства:
  int NumberOfServerInstances
Методы:
  bool TryConnect(int timeout, CancellationToken cancellationToken)
  int get_NumberOfServerInstances()
  void ValidateRemotePipeUser()
  void .ctor(string pipeName)
  void .ctor(string serverName, string pipeName)
  void .ctor(string serverName, string pipeName, PipeDirection direction)
  void .ctor(string serverName, string pipeName, PipeDirection direction, PipeOptions options)
  void .ctor(string serverName, string pipeName, PipeDirection direction, PipeOptions options, TokenImpersonationLevel impersonationLevel)
  void .ctor(string serverName, string pipeName, PipeDirection direction, PipeOptions options, TokenImpersonationLevel impersonationLevel, HandleInheritability inheritability)
  void .ctor(PipeDirection direction, bool isAsync, bool isConnected, SafePipeHandle safePipeHandle)
  void Finalize()
  void Connect()
  void Connect(int timeout)
  void ConnectInternal(int timeout, CancellationToken cancellationToken, int startTime)
  Task ConnectAsync()
  Task ConnectAsync(int timeout)
  Task ConnectAsync(CancellationToken cancellationToken)
  Task ConnectAsync(int timeout, CancellationToken cancellationToken)
  void CheckPipePropertyOperations()
  void CheckConnectOperationsClient()
  void .ctor(string serverName, string pipeName, PipeAccessRights desiredAccessRights, PipeOptions options, TokenImpersonationLevel impersonationLevel, HandleInheritability inheritability)
--------------------------------------------------
Класс: System.IO.Pipes.NamedPipeServerStream
Наследуется от: PipeStream
Поля:
  TryCode tryCode
  CleanupCode cleanupCode
  int MaxAllowedServerInstances
Свойства:
Методы:
  void Create(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, HandleInheritability inheritability)
  void Create(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, PipeSecurity pipeSecurity, HandleInheritability inheritability, PipeAccessRights additionalAccessRights)
  void WaitForConnection()
  Task WaitForConnectionAsync(CancellationToken cancellationToken)
  void Disconnect()
  string GetImpersonationUserName()
  void RunAsClient(PipeStreamImpersonationWorker impersonationWorker)
  void ImpersonateAndTryCode(object helper)
  void RevertImpersonationOnBackout(object helper, bool exceptionThrown)
  Task WaitForConnectionCoreAsync(CancellationToken cancellationToken)
  void CheckConnectOperationsServerWithHandle()
  void .ctor(string pipeName)
  void .ctor(string pipeName, PipeDirection direction)
  void .ctor(string pipeName, PipeDirection direction, int maxNumberOfServerInstances)
  void .ctor(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode)
  void .ctor(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options)
  void .ctor(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize)
  void .ctor(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, HandleInheritability inheritability)
  void .ctor(PipeDirection direction, bool isAsync, bool isConnected, SafePipeHandle safePipeHandle)
  void Finalize()
  Task WaitForConnectionAsync()
  IAsyncResult BeginWaitForConnection(AsyncCallback callback, object state)
  void EndWaitForConnection(IAsyncResult asyncResult)
  void CheckConnectOperationsServer()
  void CheckDisconnectOperations()
  void .ctor(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, PipeSecurity pipeSecurity)
  void .ctor(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, PipeSecurity pipeSecurity, HandleInheritability inheritability)
  void .ctor(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, PipeSecurity pipeSecurity, HandleInheritability inheritability, PipeAccessRights additionalAccessRights)
  void .cctor()
--------------------------------------------------
Класс: System.IO.Pipes.PipeStreamImpersonationWorker
Наследуется от: MulticastDelegate
Поля:
Свойства:
Методы:
  void .ctor(object object, IntPtr method)
  void Invoke()
  IAsyncResult BeginInvoke(AsyncCallback callback, object object)
  void EndInvoke(IAsyncResult result)
--------------------------------------------------
Класс: System.IO.Pipes.PipeAccessRights
Наследуется от: Enum
Поля:
  int value__
  PipeAccessRights ReadData
  PipeAccessRights WriteData
  PipeAccessRights ReadAttributes
  PipeAccessRights WriteAttributes
  PipeAccessRights ReadExtendedAttributes
  PipeAccessRights WriteExtendedAttributes
  PipeAccessRights CreateNewInstance
  PipeAccessRights Delete
  PipeAccessRights ReadPermissions
  PipeAccessRights ChangePermissions
  PipeAccessRights TakeOwnership
  PipeAccessRights Synchronize
  PipeAccessRights FullControl
  PipeAccessRights Read
  PipeAccessRights Write
  PipeAccessRights ReadWrite
  PipeAccessRights AccessSystemSecurity
Свойства:
Методы:
--------------------------------------------------
Класс: System.IO.Pipes.PipeAccessRule
Наследуется от: AccessRule
Поля:
Свойства:
  PipeAccessRights PipeAccessRights
Методы:
  void .ctor(string identity, PipeAccessRights rights, AccessControlType type)
  void .ctor(IdentityReference identity, PipeAccessRights rights, AccessControlType type)
  void .ctor(IdentityReference identity, int accessMask, bool isInherited, AccessControlType type)
  PipeAccessRights get_PipeAccessRights()
  int AccessMaskFromRights(PipeAccessRights rights, AccessControlType controlType)
  PipeAccessRights RightsFromAccessMask(int accessMask)
--------------------------------------------------
Класс: System.IO.Pipes.PipeAuditRule
Наследуется от: AuditRule
Поля:
Свойства:
  PipeAccessRights PipeAccessRights
Методы:
  void .ctor(IdentityReference identity, PipeAccessRights rights, AuditFlags flags)
  void .ctor(string identity, PipeAccessRights rights, AuditFlags flags)
  void .ctor(IdentityReference identity, int accessMask, bool isInherited, AuditFlags flags)
  int AccessMaskFromRights(PipeAccessRights rights)
  PipeAccessRights get_PipeAccessRights()
--------------------------------------------------
Класс: System.IO.Pipes.PipeCompletionSource`1
Наследуется от: TaskCompletionSource`1<TResult>
Поля:
  int NoResult
  int ResultSuccess
  int ResultError
  int RegisteringCancellation
  int CompletedCallback
  ThreadPoolBoundHandle _threadPoolBinding
  CancellationTokenRegistration _cancellationRegistration
  int _errorCode
  NativeOverlapped* _overlapped
  MemoryHandle _pinnedMemory
  int _state
Свойства:
  NativeOverlapped* Overlapped
Методы:
  void .ctor(ThreadPoolBoundHandle handle, ReadOnlyMemory`1<byte> bufferToPin)
  NativeOverlapped* get_Overlapped()
  void RegisterForCancellation(CancellationToken cancellationToken)
  void ReleaseResources()
  void SetCompletedSynchronously()
  void AsyncCallback(UInt32 errorCode, UInt32 numBytes)
  void HandleError(int errorCode)
  void Cancel()
  void HandleUnexpectedCancellation()
  void CompleteCallback(int resultState)
--------------------------------------------------
Класс: System.IO.Pipes.PipeDirection
Наследуется от: Enum
Поля:
  int value__
  PipeDirection In
  PipeDirection Out
  PipeDirection InOut
Свойства:
Методы:
--------------------------------------------------
Класс: System.IO.Pipes.PipeOptions
Наследуется от: Enum
Поля:
  int value__
  PipeOptions None
  PipeOptions WriteThrough
  PipeOptions Asynchronous
  PipeOptions CurrentUserOnly
Свойства:
Методы:
--------------------------------------------------
Класс: System.IO.Pipes.PipeSecurity
Наследуется от: NativeObjectSecurity
Поля:
Свойства:
  Type AccessRightType
  Type AccessRuleType
  Type AuditRuleType
Методы:
  void .ctor()
  void .ctor(SafePipeHandle safeHandle, AccessControlSections includeSections)
  void AddAccessRule(PipeAccessRule rule)
  void SetAccessRule(PipeAccessRule rule)
  void ResetAccessRule(PipeAccessRule rule)
  bool RemoveAccessRule(PipeAccessRule rule)
  void RemoveAccessRuleSpecific(PipeAccessRule rule)
  void AddAuditRule(PipeAuditRule rule)
  void SetAuditRule(PipeAuditRule rule)
  bool RemoveAuditRule(PipeAuditRule rule)
  void RemoveAuditRuleAll(PipeAuditRule rule)
  void RemoveAuditRuleSpecific(PipeAuditRule rule)
  AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)
  AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags)
  AccessControlSections GetAccessControlSectionsFromChanges()
  void Persist(SafeHandle handle)
  void Persist(string name)
  Type get_AccessRightType()
  Type get_AccessRuleType()
  Type get_AuditRuleType()
--------------------------------------------------
Класс: System.IO.Pipes.PipeState
Наследуется от: Enum
Поля:
  int value__
  PipeState WaitingToConnect
  PipeState Connected
  PipeState Broken
  PipeState Disconnected
  PipeState Closed
Свойства:
Методы:
--------------------------------------------------
Класс: System.IO.Pipes.PipeStream
Наследуется от: Stream
Поля:
  bool CheckOperationsRequiresSetHandle
  ThreadPoolBoundHandle _threadPoolBinding
  string AnonymousPipeName
  Task`1<int> s_zeroTask
  SafePipeHandle _handle
  bool _canRead
  bool _canWrite
  bool _isAsync
  bool _isCurrentUserOnly
  bool _isMessageComplete
  bool _isFromExistingHandle
  bool _isHandleExposed
  PipeTransmissionMode _readMode
  PipeTransmissionMode _transmissionMode
  PipeDirection _pipeDirection
  int _outBufferSize
  PipeState _state
Свойства:
  PipeTransmissionMode TransmissionMode
  int InBufferSize
  int OutBufferSize
  PipeTransmissionMode ReadMode
  bool IsConnected
  bool IsAsync
  bool IsMessageComplete
  SafePipeHandle SafePipeHandle
  SafePipeHandle InternalHandle
  bool IsHandleExposed
  bool CanRead
  bool CanWrite
  bool CanSeek
  long Length
  long Position
  PipeState State
  bool IsCurrentUserOnly
Методы:
  string GetPipePath(string serverName, string pipeName)
  void ValidateHandleIsPipe(SafePipeHandle safePipeHandle)
  void InitializeAsyncHandle(SafePipeHandle handle)
  void DisposeCore(bool disposing)
  int ReadCore(Span`1<byte> buffer)
  Task`1<int> ReadAsyncCore(Memory`1<byte> buffer, CancellationToken cancellationToken)
  void WriteCore(ReadOnlySpan`1<byte> buffer)
  Task WriteAsyncCore(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken)
  void WaitForPipeDrain()
  PipeTransmissionMode get_TransmissionMode()
  int get_InBufferSize()
  int get_OutBufferSize()
  PipeTransmissionMode get_ReadMode()
  void set_ReadMode(PipeTransmissionMode value)
  int ReadFileNative(SafePipeHandle handle, Span`1<byte> buffer, NativeOverlapped* overlapped, Int32& errorCode)
  int WriteFileNative(SafePipeHandle handle, ReadOnlySpan`1<byte> buffer, NativeOverlapped* overlapped, Int32& errorCode)
  SECURITY_ATTRIBUTES GetSecAttrs(HandleInheritability inheritability)
  SECURITY_ATTRIBUTES GetSecAttrs(HandleInheritability inheritability, PipeSecurity pipeSecurity, GCHandle& pinningHandle)
  void UpdateReadMode()
  Exception WinIOError(int errorCode)
  void .ctor(PipeDirection direction, int bufferSize)
  void .ctor(PipeDirection direction, PipeTransmissionMode transmissionMode, int outBufferSize)
  void Init(PipeDirection direction, PipeTransmissionMode transmissionMode, int outBufferSize)
  void InitializeHandle(SafePipeHandle handle, bool isExposed, bool isAsync)
  int Read(Byte[] buffer, int offset, int count)
  int Read(Span`1<byte> buffer)
  Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken)
  ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken)
  IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
  int EndRead(IAsyncResult asyncResult)
  void Write(Byte[] buffer, int offset, int count)
  void Write(ReadOnlySpan`1<byte> buffer)
  Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken)
  ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken)
  IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
  void EndWrite(IAsyncResult asyncResult)
  void CheckReadWriteArgs(Byte[] buffer, int offset, int count)
  void DebugAssertHandleValid(SafePipeHandle handle)
  void DebugAssertReadWriteArgs(Byte[] buffer, int offset, int count, SafePipeHandle handle)
  int ReadByte()
  void WriteByte(byte value)
  void Flush()
  void Dispose(bool disposing)
  bool get_IsConnected()
  void set_IsConnected(bool value)
  bool get_IsAsync()
  bool get_IsMessageComplete()
  void UpdateMessageCompletion(bool completion)
  SafePipeHandle get_SafePipeHandle()
  SafePipeHandle get_InternalHandle()
  bool get_IsHandleExposed()
  bool get_CanRead()
  bool get_CanWrite()
  bool get_CanSeek()
  long get_Length()
  long get_Position()
  void set_Position(long value)
  void SetLength(long value)
  long Seek(long offset, SeekOrigin origin)
  void CheckPipePropertyOperations()
  void CheckReadOperations()
  void CheckWriteOperations()
  PipeState get_State()
  void set_State(PipeState value)
  bool get_IsCurrentUserOnly()
  void set_IsCurrentUserOnly(bool value)
  PipeSecurity GetAccessControl()
  void SetAccessControl(PipeSecurity pipeSecurity)
  void .cctor()
--------------------------------------------------
Класс: System.IO.Pipes.PipeTransmissionMode
Наследуется от: Enum
Поля:
  int value__
  PipeTransmissionMode Byte
  PipeTransmissionMode Message
Свойства:
Методы:
--------------------------------------------------
Класс: System.IO.Pipes.ReadWriteCompletionSource
Наследуется от: PipeCompletionSource`1<int>
Поля:
  bool _isWrite
  PipeStream _pipeStream
  bool _isMessageComplete
  int _numBytes
Свойства:
Методы:
  void .ctor(PipeStream stream, ReadOnlyMemory`1<byte> bufferToPin, bool isWrite)
  void SetCompletedSynchronously()
  void AsyncCallback(UInt32 errorCode, UInt32 numBytes)
  void HandleError(int errorCode)
--------------------------------------------------
Класс: System.Collections.Generic.ArrayBuilder`1
Наследуется от: ValueType
Поля:
  int DefaultCapacity
  int MaxCoreClrArrayLength
  T[] _array
  int _count
Свойства:
  int Capacity
  int Count
  T Item
Методы:
  void .ctor(int capacity)
  int get_Capacity()
  int get_Count()
  T get_Item(int index)
  void set_Item(int index, T value)
  void Add(T item)
  T First()
  T Last()
  T[] ToArray()
  void UncheckedAdd(T item)
  void EnsureCapacity(int minimum)
--------------------------------------------------
Класс: System.Collections.Generic.EnumerableHelpers
Наследуется от: object
Поля:
Свойства:
Методы:
  bool TryGetCount(IEnumerable`1<T> source, Int32& count)
  void Copy(IEnumerable`1<T> source, T[] array, int arrayIndex, int count)
  void IterativeCopy(IEnumerable`1<T> source, T[] array, int arrayIndex, int count)
  T[] ToArray(IEnumerable`1<T> source)
  T[] ToArray(IEnumerable`1<T> source, Int32& length)
--------------------------------------------------
Класс: System.Collections.Generic.CopyPosition
Наследуется от: ValueType
Поля:
  int <Row>k__BackingField
  int <Column>k__BackingField
Свойства:
  CopyPosition Start
  int Row
  int Column
  string DebuggerDisplay
Методы:
  void .ctor(int row, int column)
  CopyPosition get_Start()
  int get_Row()
  int get_Column()
  CopyPosition Normalize(int endColumn)
  string get_DebuggerDisplay()
--------------------------------------------------
Класс: System.Collections.Generic.LargeArrayBuilder`1
Наследуется от: ValueType
Поля:
  int StartingCapacity
  int ResizeLimit
  int _maxCapacity
  T[] _first
  ArrayBuilder`1<T[]> _buffers
  T[] _current
  int _index
  int _count
Свойства:
  int Count
Методы:
  void .ctor(bool initialize)
  void .ctor(int maxCapacity)
  int get_Count()
  void Add(T item)
  void AddWithBufferAllocation(T item)
  void AddRange(IEnumerable`1<T> items)
  void AddWithBufferAllocation(T item, T[]& destination, Int32& index)
  void CopyTo(T[] array, int arrayIndex, int count)
  CopyPosition CopyTo(CopyPosition position, T[] array, int arrayIndex, int count)
  T[] GetBuffer(int index)
  void SlowAdd(T item)
  T[] ToArray()
  bool TryMove(T[]& array)
  void AllocateBuffer()
  int <CopyTo>g__CopyToCore|17_0(T[] sourceBuffer, int sourceIndex, <>c__DisplayClass17_0& )
--------------------------------------------------
Класс: System.Collections.Generic.ReferenceEqualityComparer`1
Наследуется от: object
Поля:
  ReferenceEqualityComparer`1<T> Instance
Свойства:
Методы:
  void .ctor()
  bool Equals(T x, T y)
  int GetHashCode(T obj)
  void .cctor()
--------------------------------------------------
Класс: System.Collections.Generic.Marker
Наследуется от: ValueType
Поля:
  int <Count>k__BackingField
  int <Index>k__BackingField
Свойства:
  int Count
  int Index
  string DebuggerDisplay
Методы:
  void .ctor(int count, int index)
  int get_Count()
  int get_Index()
  string get_DebuggerDisplay()
--------------------------------------------------
Класс: System.Collections.Generic.SparseArrayBuilder`1
Наследуется от: ValueType
Поля:
  LargeArrayBuilder`1<T> _builder
  ArrayBuilder`1<Marker> _markers
  int _reservedCount
Свойства:
  int Count
  ArrayBuilder`1<Marker> Markers
Методы:
  void .ctor(bool initialize)
  int get_Count()
  ArrayBuilder`1<Marker> get_Markers()
  void Add(T item)
  void AddRange(IEnumerable`1<T> items)
  void CopyTo(T[] array, int arrayIndex, int count)
  void Reserve(int count)
  bool ReserveOrAdd(IEnumerable`1<T> items)
  T[] ToArray()
--------------------------------------------------
Класс: System.Collections.Generic.BitHelper
Наследуется от: object
Поля:
  byte MarkedBitFlag
  byte IntSize
  int _length
  Int32* _arrayPtr
  Int32[] _array
  bool _useStackAlloc
Свойства:
Методы:
  void .ctor(Int32* bitArrayPtr, int length)
  void .ctor(Int32[] bitArray, int length)
  void MarkBit(int bitPosition)
  bool IsMarked(int bitPosition)
  int ToIntArrayLength(int n)
--------------------------------------------------
Класс: System.Collections.Generic.HashSet`1
Наследуется от: object
Поля:
  int Lower31BitMask
  int StackAllocThreshold
  int ShrinkThreshold
  string CapacityName
  string ElementsName
  string ComparerName
  string VersionName
  Int32[] _buckets
  Slot[] _slots
  int _count
  int _lastIndex
  int _freeList
  IEqualityComparer`1<T> _comparer
  int _version
  SerializationInfo _siInfo
Свойства:
  int Count
  bool System.Collections.Generic.ICollection<T>.IsReadOnly
  IEqualityComparer`1<T> Comparer
Методы:
  void .ctor()
  void .ctor(IEqualityComparer`1<T> comparer)
  void .ctor(int capacity)
  void .ctor(IEnumerable`1<T> collection)
  void .ctor(IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer)
  void .ctor(SerializationInfo info, StreamingContext context)
  void CopyFrom(HashSet`1<T> source)
  void .ctor(int capacity, IEqualityComparer`1<T> comparer)
  void System.Collections.Generic.ICollection<T>.Add(T item)
  void Clear()
  bool Contains(T item)
  void CopyTo(T[] array, int arrayIndex)
  bool Remove(T item)
  int get_Count()
  bool System.Collections.Generic.ICollection<T>.get_IsReadOnly()
  Enumerator<T> GetEnumerator()
  IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  IEnumerator System.Collections.IEnumerable.GetEnumerator()
  void GetObjectData(SerializationInfo info, StreamingContext context)
  void OnDeserialization(object sender)
  bool Add(T item)
  bool TryGetValue(T equalValue, T& actualValue)
  void UnionWith(IEnumerable`1<T> other)
  void IntersectWith(IEnumerable`1<T> other)
  void ExceptWith(IEnumerable`1<T> other)
  void SymmetricExceptWith(IEnumerable`1<T> other)
  bool IsSubsetOf(IEnumerable`1<T> other)
  bool IsProperSubsetOf(IEnumerable`1<T> other)
  bool IsSupersetOf(IEnumerable`1<T> other)
  bool IsProperSupersetOf(IEnumerable`1<T> other)
  bool Overlaps(IEnumerable`1<T> other)
  bool SetEquals(IEnumerable`1<T> other)
  void CopyTo(T[] array)
  void CopyTo(T[] array, int arrayIndex, int count)
  int RemoveWhere(Predicate`1<T> match)
  IEqualityComparer`1<T> get_Comparer()
  int EnsureCapacity(int capacity)
  void TrimExcess()
  IEqualityComparer`1<HashSet`1<T>> CreateSetComparer()
  int Initialize(int capacity)
  void IncreaseCapacity()
  void SetCapacity(int newSize)
  bool AddIfNotPresent(T value)
  void AddValue(int index, int hashCode, T value)
  bool ContainsAllElements(IEnumerable`1<T> other)
  bool IsSubsetOfHashSetWithSameEC(HashSet`1<T> other)
  void IntersectWithHashSetWithSameEC(HashSet`1<T> other)
  void IntersectWithEnumerable(IEnumerable`1<T> other)
  int InternalIndexOf(T item)
  void SymmetricExceptWithUniqueHashSet(HashSet`1<T> other)
  void SymmetricExceptWithEnumerable(IEnumerable`1<T> other)
  bool AddOrGetLocation(T value, Int32& location)
  ElementCount<T> CheckUniqueAndUnfoundElements(IEnumerable`1<T> other, bool returnIfUnfound)
  bool HashSetEquals(HashSet`1<T> set1, HashSet`1<T> set2, IEqualityComparer`1<T> comparer)
  bool AreEqualityComparersEqual(HashSet`1<T> set1, HashSet`1<T> set2)
  int InternalGetHashCode(T item)
--------------------------------------------------
Класс: System.Collections.Generic.HashSetEqualityComparer`1
Наследуется от: object
Поля:
  IEqualityComparer`1<T> _comparer
Свойства:
Методы:
  void .ctor()
  bool Equals(HashSet`1<T> x, HashSet`1<T> y)
  int GetHashCode(HashSet`1<T> obj)
  bool Equals(object obj)
  int GetHashCode()
--------------------------------------------------
Класс: System.Collections.Generic.ICollectionDebugView`1
Наследуется от: object
Поля:
  ICollection`1<T> _collection
Свойства:
  T[] Items
Методы:
  void .ctor(ICollection`1<T> collection)
  T[] get_Items()
--------------------------------------------------
Класс: System.Threading.LockRecursionPolicy
Наследуется от: Enum
Поля:
  int value__
  LockRecursionPolicy NoRecursion
  LockRecursionPolicy SupportsRecursion
Свойства:
Методы:
--------------------------------------------------
Класс: System.Threading.ReaderWriterCount
Наследуется от: object
Поля:
  long lockID
  int readercount
  int writercount
  int upgradecount
  ReaderWriterCount next
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: System.Threading.ReaderWriterLockSlim
Наследуется от: object
Поля:
  bool fIsReentrant
  int myLock
  int LockSpinCycles
  int LockSpinCount
  int LockSleep0Count
  UInt32 numWriteWaiters
  UInt32 numReadWaiters
  UInt32 numWriteUpgradeWaiters
  UInt32 numUpgradeWaiters
  bool fNoWaiters
  int upgradeLockOwnerId
  int writeLockOwnerId
  EventWaitHandle writeEvent
  EventWaitHandle readEvent
  EventWaitHandle upgradeEvent
  EventWaitHandle waitUpgradeEvent
  long s_nextLockID
  long lockID
  ReaderWriterCount t_rwc
  bool fUpgradeThreadHoldingRead
  int MaxSpinCount
  UInt32 owners
  UInt32 WRITER_HELD
  UInt32 WAITING_WRITERS
  UInt32 WAITING_UPGRADER
  UInt32 MAX_READER
  UInt32 READER_MASK
  bool fDisposed
Свойства:
  bool IsReadLockHeld
  bool IsUpgradeableReadLockHeld
  bool IsWriteLockHeld
  LockRecursionPolicy RecursionPolicy
  int CurrentReadCount
  int RecursiveReadCount
  int RecursiveUpgradeCount
  int RecursiveWriteCount
  int WaitingReadCount
  int WaitingUpgradeCount
  int WaitingWriteCount
Методы:
  void InitializeThreadCounts()
  void .ctor()
  void .ctor(LockRecursionPolicy recursionPolicy)
  bool IsRWEntryEmpty(ReaderWriterCount rwc)
  bool IsRwHashEntryChanged(ReaderWriterCount lrwc)
  ReaderWriterCount GetThreadRWCount(bool dontAllocate)
  void EnterReadLock()
  bool TryEnterReadLock(TimeSpan timeout)
  bool TryEnterReadLock(int millisecondsTimeout)
  bool TryEnterReadLock(TimeoutTracker timeout)
  bool TryEnterReadLockCore(TimeoutTracker timeout)
  void EnterWriteLock()
  bool TryEnterWriteLock(TimeSpan timeout)
  bool TryEnterWriteLock(int millisecondsTimeout)
  bool TryEnterWriteLock(TimeoutTracker timeout)
  bool TryEnterWriteLockCore(TimeoutTracker timeout)
  void EnterUpgradeableReadLock()
  bool TryEnterUpgradeableReadLock(TimeSpan timeout)
  bool TryEnterUpgradeableReadLock(int millisecondsTimeout)
  bool TryEnterUpgradeableReadLock(TimeoutTracker timeout)
  bool TryEnterUpgradeableReadLockCore(TimeoutTracker timeout)
  void ExitReadLock()
  void ExitWriteLock()
  void ExitUpgradeableReadLock()
  void LazyCreateEvent(EventWaitHandle& waitEvent, bool makeAutoResetEvent)
  bool WaitOnEvent(EventWaitHandle waitEvent, UInt32& numWaiters, TimeoutTracker timeout, bool isWriteWaiter)
  void ExitAndWakeUpAppropriateWaiters()
  void ExitAndWakeUpAppropriateWaitersPreferringWriters()
  void ExitAndWakeUpAppropriateReadWaiters()
  bool IsWriterAcquired()
  void SetWriterAcquired()
  void ClearWriterAcquired()
  void SetWritersWaiting()
  void ClearWritersWaiting()
  void SetUpgraderWaiting()
  void ClearUpgraderWaiting()
  UInt32 GetNumReaders()
  void EnterMyLock()
  void EnterMyLockSpin()
  void ExitMyLock()
  void SpinWait(int SpinCount)
  void Dispose()
  void Dispose(bool disposing)
  bool get_IsReadLockHeld()
  bool get_IsUpgradeableReadLockHeld()
  bool get_IsWriteLockHeld()
  LockRecursionPolicy get_RecursionPolicy()
  int get_CurrentReadCount()
  int get_RecursiveReadCount()
  int get_RecursiveUpgradeCount()
  int get_RecursiveWriteCount()
  int get_WaitingReadCount()
  int get_WaitingUpgradeCount()
  int get_WaitingWriteCount()
--------------------------------------------------
Класс: System.Threading.Tasks.TaskExtensions
Наследуется от: object
Поля:
Свойства:
Методы:
  Task Unwrap(Task`1<Task> task)
  Task`1<TResult> Unwrap(Task`1<Task`1<TResult>> task)
--------------------------------------------------
Класс: <PrivateImplementationDetails>
Наследуется от: object
Поля:
  __StaticArrayInitTypeSize=1024 0270BFF41CB170C33C20788C368CB1B5A66B0FD0B98D638A827B783537583821
  __StaticArrayInitTypeSize=1024 09FDC69AA887AC8D36E0C8284C7B1D53E580E4880B72A67FF80D7E38317115D9
  __StaticArrayInitTypeSize=1024 0F4764044BF2E91EFEFAF3D4F1E81C10A2B7F0F45305489925CFC01198CF45B5
  __StaticArrayInitTypeSize=1024 15A0E7628178B3FE6546E9B60F35E2B1C4864E020B16376866F38F72C74B45A9
  __StaticArrayInitTypeSize=1024 4CF8DC711CD3210D673D86981355E2609233025ED22E4DC7A1F9B8E75ADE35F4
  __StaticArrayInitTypeSize=1024 783FB0A44BE7670EB6EC170CF7F16BB2B6F23F4964B87B60C4EB506C7C6A286D
  __StaticArrayInitTypeSize=120 914FCE8DC82DA59038745B264F743222527FBAE2E4A28E71C89760B7E3DBBA67
  __StaticArrayInitTypeSize=256 93631B0726F6FE6629DAA743EE51B49F4477ED07391B68EEEA0672A4A90018AA
  __StaticArrayInitTypeSize=256 C2D8E5EED6CBEBD8625FC18F81486A7733C04F9B0129FFBE974C68B90308B4F2
  __StaticArrayInitTypeSize=1024 C40A9A77EE05E10AF16DA9D1781A2053159EA8570ADA03637BB5FE3D076C9F89
  __StaticArrayInitTypeSize=1024 E8058399671D13082C35B6B3CE7F9E282507EDD458CCFDD3BAD9F35D90016F62
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.ManifestKinds
Наследуется от: Enum
Поля:
  int value__
  ManifestKinds Application
  ManifestKinds ApplicationAndDeployment
  ManifestKinds Deployment
  ManifestKinds None
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.DSACng
Наследуется от: DSA
Поля:
Свойства:
  CngKey Key
Методы:
  void .ctor()
  void .ctor(int keySize)
  void .ctor(CngKey key)
  CngKey get_Key()
  Byte[] CreateSignature(Byte[] rgbHash)
  DSAParameters ExportParameters(bool includePrivateParameters)
  void ImportParameters(DSAParameters parameters)
  bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature)
--------------------------------------------------
Класс: System.Security.Cryptography.ECDiffieHellmanCng
Наследуется от: ECDiffieHellman
Поля:
Свойства:
  CngAlgorithm HashAlgorithm
  Byte[] HmacKey
  CngKey Key
  ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction
  Byte[] Label
  ECDiffieHellmanPublicKey PublicKey
  Byte[] SecretAppend
  Byte[] SecretPrepend
  Byte[] Seed
  bool UseSecretAgreementAsHmacKey
Методы:
  void .ctor()
  void .ctor(int keySize)
  void .ctor(CngKey key)
  void .ctor(ECCurve curve)
  CngAlgorithm get_HashAlgorithm()
  void set_HashAlgorithm(CngAlgorithm value)
  Byte[] get_HmacKey()
  void set_HmacKey(Byte[] value)
  CngKey get_Key()
  ECDiffieHellmanKeyDerivationFunction get_KeyDerivationFunction()
  void set_KeyDerivationFunction(ECDiffieHellmanKeyDerivationFunction value)
  Byte[] get_Label()
  void set_Label(Byte[] value)
  ECDiffieHellmanPublicKey get_PublicKey()
  Byte[] get_SecretAppend()
  void set_SecretAppend(Byte[] value)
  Byte[] get_SecretPrepend()
  void set_SecretPrepend(Byte[] value)
  Byte[] get_Seed()
  void set_Seed(Byte[] value)
  bool get_UseSecretAgreementAsHmacKey()
  Byte[] DeriveKeyMaterial(CngKey otherPartyPublicKey)
  SafeNCryptSecretHandle DeriveSecretAgreementHandle(CngKey otherPartyPublicKey)
  SafeNCryptSecretHandle DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey otherPartyPublicKey)
  void FromXmlString(string xml, ECKeyXmlFormat format)
  string ToXmlString(ECKeyXmlFormat format)
--------------------------------------------------
Класс: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
Наследуется от: Enum
Поля:
  int value__
  ECDiffieHellmanKeyDerivationFunction Hash
  ECDiffieHellmanKeyDerivationFunction Hmac
  ECDiffieHellmanKeyDerivationFunction Tls
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.ECDiffieHellmanCngPublicKey
Наследуется от: ECDiffieHellmanPublicKey
Поля:
Свойства:
  CngKeyBlobFormat BlobFormat
Методы:
  void .ctor()
  CngKeyBlobFormat get_BlobFormat()
  ECDiffieHellmanPublicKey FromByteArray(Byte[] publicKeyBlob, CngKeyBlobFormat format)
  ECDiffieHellmanCngPublicKey FromXmlString(string xml)
  CngKey Import()
--------------------------------------------------
Класс: System.Security.Cryptography.ManifestSignatureInformation
Наследуется от: object
Поля:
Свойства:
  AuthenticodeSignatureInformation AuthenticodeSignature
  ManifestKinds Manifest
  StrongNameSignatureInformation StrongNameSignature
Методы:
  void .ctor()
  AuthenticodeSignatureInformation get_AuthenticodeSignature()
  ManifestKinds get_Manifest()
  StrongNameSignatureInformation get_StrongNameSignature()
  ManifestSignatureInformationCollection VerifySignature(ActivationContext application)
  ManifestSignatureInformationCollection VerifySignature(ActivationContext application, ManifestKinds manifests)
  ManifestSignatureInformationCollection VerifySignature(ActivationContext application, ManifestKinds manifests, X509RevocationFlag revocationFlag, X509RevocationMode revocationMode)
--------------------------------------------------
Класс: System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation
Наследуется от: object
Поля:
Свойства:
  string Description
  Uri DescriptionUrl
  string HashAlgorithm
  int HResult
  X509Chain SignatureChain
  X509Certificate2 SigningCertificate
  TimestampInformation Timestamp
  TrustStatus TrustStatus
  SignatureVerificationResult VerificationResult
Методы:
  void .ctor()
  string get_Description()
  Uri get_DescriptionUrl()
  string get_HashAlgorithm()
  int get_HResult()
  X509Chain get_SignatureChain()
  X509Certificate2 get_SigningCertificate()
  TimestampInformation get_Timestamp()
  TrustStatus get_TrustStatus()
  SignatureVerificationResult get_VerificationResult()
--------------------------------------------------
Класс: System.Security.Cryptography.X509Certificates.TimestampInformation
Наследуется от: object
Поля:
Свойства:
  string HashAlgorithm
  int HResult
  bool IsValid
  X509Chain SignatureChain
  X509Certificate2 SigningCertificate
  DateTime Timestamp
  SignatureVerificationResult VerificationResult
Методы:
  void .ctor()
  string get_HashAlgorithm()
  int get_HResult()
  bool get_IsValid()
  X509Chain get_SignatureChain()
  X509Certificate2 get_SigningCertificate()
  DateTime get_Timestamp()
  SignatureVerificationResult get_VerificationResult()
--------------------------------------------------
Класс: System.Security.Cryptography.SignatureVerificationResult
Наследуется от: Enum
Поля:
  int value__
  SignatureVerificationResult AssemblyIdentityMismatch
  SignatureVerificationResult BadDigest
  SignatureVerificationResult BadSignatureFormat
  SignatureVerificationResult BasicConstraintsNotObserved
  SignatureVerificationResult CertificateExpired
  SignatureVerificationResult CertificateExplicitlyDistrusted
  SignatureVerificationResult CertificateMalformed
  SignatureVerificationResult CertificateNotExplicitlyTrusted
  SignatureVerificationResult CertificateRevoked
  SignatureVerificationResult CertificateUsageNotAllowed
  SignatureVerificationResult ContainingSignatureInvalid
  SignatureVerificationResult CouldNotBuildChain
  SignatureVerificationResult GenericTrustFailure
  SignatureVerificationResult InvalidCertificateName
  SignatureVerificationResult InvalidCertificatePolicy
  SignatureVerificationResult InvalidCertificateRole
  SignatureVerificationResult InvalidCertificateSignature
  SignatureVerificationResult InvalidCertificateUsage
  SignatureVerificationResult InvalidCountersignature
  SignatureVerificationResult InvalidSignerCertificate
  SignatureVerificationResult InvalidTimePeriodNesting
  SignatureVerificationResult InvalidTimestamp
  SignatureVerificationResult IssuerChainingError
  SignatureVerificationResult MissingSignature
  SignatureVerificationResult PathLengthConstraintViolated
  SignatureVerificationResult PublicKeyTokenMismatch
  SignatureVerificationResult PublisherMismatch
  SignatureVerificationResult RevocationCheckFailure
  SignatureVerificationResult SystemError
  SignatureVerificationResult UnknownCriticalExtension
  SignatureVerificationResult UnknownTrustProvider
  SignatureVerificationResult UnknownVerificationAction
  SignatureVerificationResult UntrustedCertificationAuthority
  SignatureVerificationResult UntrustedRootCertificate
  SignatureVerificationResult UntrustedTestRootCertificate
  SignatureVerificationResult Valid
Свойства:
Методы:
--------------------------------------------------
Класс: System.Security.Cryptography.StrongNameSignatureInformation
Наследуется от: object
Поля:
Свойства:
  string HashAlgorithm
  int HResult
  bool IsValid
  AsymmetricAlgorithm PublicKey
  SignatureVerificationResult VerificationResult
Методы:
  void .ctor()
  string get_HashAlgorithm()
  int get_HResult()
  bool get_IsValid()
  AsymmetricAlgorithm get_PublicKey()
  SignatureVerificationResult get_VerificationResult()
--------------------------------------------------
Класс: System.Security.Cryptography.ManifestSignatureInformationCollection
Наследуется от: ReadOnlyCollection`1<ManifestSignatureInformation>
Поля:
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: System.Management.Instrumentation.InstanceNotFoundException
Наследуется от: InstrumentationException
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(SerializationInfo info, StreamingContext context)
  void .ctor(string message)
  void .ctor(string message, Exception innerException)
--------------------------------------------------
Класс: System.Management.Instrumentation.InstrumentationException
Наследуется от: InstrumentationBaseException
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(Exception innerException)
  void .ctor(SerializationInfo info, StreamingContext context)
  void .ctor(string message)
  void .ctor(string message, Exception innerException)
--------------------------------------------------
Класс: System.Management.Instrumentation.InstrumentationBaseException
Наследуется от: Exception
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(SerializationInfo info, StreamingContext context)
  void .ctor(string message)
  void .ctor(string message, Exception innerException)
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementBindAttribute
Наследуется от: ManagementNewInstanceAttribute
Поля:
Свойства:
  Type Schema
Методы:
  void .ctor()
  Type get_Schema()
  void set_Schema(Type value)
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementNewInstanceAttribute
Наследуется от: ManagementMemberAttribute
Поля:
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementMemberAttribute
Наследуется от: Attribute
Поля:
Свойства:
  string Name
Методы:
  void .ctor()
  string get_Name()
  void set_Name(string value)
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementCommitAttribute
Наследуется от: ManagementMemberAttribute
Поля:
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementConfigurationAttribute
Наследуется от: ManagementMemberAttribute
Поля:
Свойства:
  ManagementConfigurationType Mode
  Type Schema
Методы:
  void .ctor()
  ManagementConfigurationType get_Mode()
  void set_Mode(ManagementConfigurationType value)
  Type get_Schema()
  void set_Schema(Type value)
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementConfigurationType
Наследуется от: Enum
Поля:
  int value__
  ManagementConfigurationType Apply
  ManagementConfigurationType OnCommit
Свойства:
Методы:
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementCreateAttribute
Наследуется от: ManagementNewInstanceAttribute
Поля:
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementEntityAttribute
Наследуется от: Attribute
Поля:
Свойства:
  bool External
  string Name
  bool Singleton
Методы:
  void .ctor()
  bool get_External()
  void set_External(bool value)
  string get_Name()
  void set_Name(string value)
  bool get_Singleton()
  void set_Singleton(bool value)
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementEnumeratorAttribute
Наследуется от: ManagementNewInstanceAttribute
Поля:
Свойства:
  Type Schema
Методы:
  void .ctor()
  Type get_Schema()
  void set_Schema(Type value)
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementHostingModel
Наследуется от: Enum
Поля:
  int value__
  ManagementHostingModel Decoupled
  ManagementHostingModel LocalService
  ManagementHostingModel LocalSystem
  ManagementHostingModel NetworkService
Свойства:
Методы:
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementKeyAttribute
Наследуется от: ManagementMemberAttribute
Поля:
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementNameAttribute
Наследуется от: Attribute
Поля:
Свойства:
  string Name
Методы:
  void .ctor(string name)
  string get_Name()
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementProbeAttribute
Наследуется от: ManagementMemberAttribute
Поля:
Свойства:
  Type Schema
Методы:
  void .ctor()
  Type get_Schema()
  void set_Schema(Type value)
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementReferenceAttribute
Наследуется от: Attribute
Поля:
Свойства:
  string Type
Методы:
  void .ctor()
  string get_Type()
  void set_Type(string value)
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementRemoveAttribute
Наследуется от: ManagementMemberAttribute
Поля:
Свойства:
  Type Schema
Методы:
  void .ctor()
  Type get_Schema()
  void set_Schema(Type value)
--------------------------------------------------
Класс: System.Management.Instrumentation.ManagementTaskAttribute
Наследуется от: ManagementMemberAttribute
Поля:
Свойства:
  Type Schema
Методы:
  void .ctor()
  Type get_Schema()
  void set_Schema(Type value)
--------------------------------------------------
Класс: System.Management.Instrumentation.WmiConfigurationAttribute
Наследуется от: Attribute
Поля:
Свойства:
  string HostingGroup
  ManagementHostingModel HostingModel
  bool IdentifyLevel
  string NamespaceSecurity
  string Scope
  string SecurityRestriction
Методы:
  void .ctor(string scope)
  string get_HostingGroup()
  void set_HostingGroup(string value)
  ManagementHostingModel get_HostingModel()
  void set_HostingModel(ManagementHostingModel value)
  bool get_IdentifyLevel()
  void set_IdentifyLevel(bool value)
  string get_NamespaceSecurity()
  void set_NamespaceSecurity(string value)
  string get_Scope()
  string get_SecurityRestriction()
  void set_SecurityRestriction(string value)
--------------------------------------------------
Класс: System.Diagnostics.EventSchemaTraceListener
Наследуется от: TextWriterTraceListener
Поля:
Свойства:
  int BufferSize
  long MaximumFileSize
  int MaximumNumberOfFiles
  TraceLogRetentionOption TraceLogRetentionOption
Методы:
  void .ctor(string fileName)
  void .ctor(string fileName, string name)
  void .ctor(string fileName, string name, int bufferSize)
  void .ctor(string fileName, string name, int bufferSize, TraceLogRetentionOption logRetentionOption)
  void .ctor(string fileName, string name, int bufferSize, TraceLogRetentionOption logRetentionOption, long maximumFileSize)
  void .ctor(string fileName, string name, int bufferSize, TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles)
  int get_BufferSize()
  long get_MaximumFileSize()
  int get_MaximumNumberOfFiles()
  TraceLogRetentionOption get_TraceLogRetentionOption()
--------------------------------------------------
Класс: System.Diagnostics.TraceLogRetentionOption
Наследуется от: Enum
Поля:
  int value__
  TraceLogRetentionOption LimitedCircularFiles
  TraceLogRetentionOption LimitedSequentialFiles
  TraceLogRetentionOption SingleFileBoundedSize
  TraceLogRetentionOption SingleFileUnboundedSize
  TraceLogRetentionOption UnlimitedSequentialFiles
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.UnescapedXmlDiagnosticData
Наследуется от: object
Поля:
Свойства:
  string UnescapedXml
Методы:
  void .ctor(string xmlPayload)
  string get_UnescapedXml()
  void set_UnescapedXml(string value)
--------------------------------------------------
Класс: System.Diagnostics.PerformanceData.CounterData
Наследуется от: object
Поля:
Свойства:
  long RawValue
  long Value
Методы:
  void .ctor()
  long get_RawValue()
  void set_RawValue(long value)
  long get_Value()
  void set_Value(long value)
  void Decrement()
  void Increment()
  void IncrementBy(long value)
--------------------------------------------------
Класс: System.Diagnostics.PerformanceData.CounterSet
Наследуется от: object
Поля:
Свойства:
Методы:
  void .ctor(Guid providerGuid, Guid counterSetGuid, CounterSetInstanceType instanceType)
  void AddCounter(int counterId, CounterType counterType)
  void AddCounter(int counterId, CounterType counterType, string counterName)
  CounterSetInstance CreateCounterSetInstance(string instanceName)
  void Dispose()
  void Dispose(bool disposing)
--------------------------------------------------
Класс: System.Diagnostics.PerformanceData.CounterSetInstanceType
Наследуется от: Enum
Поля:
  int value__
  CounterSetInstanceType GlobalAggregate
  CounterSetInstanceType GlobalAggregateWithHistory
  CounterSetInstanceType InstanceAggregate
  CounterSetInstanceType Multiple
  CounterSetInstanceType MultipleAggregate
  CounterSetInstanceType Single
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.PerformanceData.CounterType
Наследуется от: Enum
Поля:
  int value__
  CounterType AverageBase
  CounterType AverageCount64
  CounterType AverageTimer32
  CounterType Delta32
  CounterType Delta64
  CounterType ElapsedTime
  CounterType LargeQueueLength
  CounterType MultiTimerBase
  CounterType MultiTimerPercentageActive
  CounterType MultiTimerPercentageActive100Ns
  CounterType MultiTimerPercentageNotActive
  CounterType MultiTimerPercentageNotActive100Ns
  CounterType ObjectSpecificTimer
  CounterType PercentageActive
  CounterType PercentageActive100Ns
  CounterType PercentageNotActive
  CounterType PercentageNotActive100Ns
  CounterType PrecisionObjectSpecificTimer
  CounterType PrecisionSystemTimer
  CounterType PrecisionTimer100Ns
  CounterType QueueLength
  CounterType QueueLength100Ns
  CounterType QueueLengthObjectTime
  CounterType RateOfCountPerSecond32
  CounterType RateOfCountPerSecond64
  CounterType RawBase32
  CounterType RawBase64
  CounterType RawData32
  CounterType RawData64
  CounterType RawDataHex32
  CounterType RawDataHex64
  CounterType RawFraction32
  CounterType RawFraction64
  CounterType SampleBase
  CounterType SampleCounter
  CounterType SampleFraction
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.PerformanceData.CounterSetInstance
Наследуется от: object
Поля:
Свойства:
  CounterSetInstanceCounterDataSet Counters
Методы:
  void .ctor()
  CounterSetInstanceCounterDataSet get_Counters()
  void Dispose()
--------------------------------------------------
Класс: System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet
Наследуется от: object
Поля:
Свойства:
  CounterData Item
Методы:
  void .ctor()
  CounterData get_Item(int counterId)
  CounterData get_Item(string counterName)
  void Dispose()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.EventDescriptor
Наследуется от: ValueType
Поля:
Свойства:
  byte Channel
  int EventId
  long Keywords
  byte Level
  byte Opcode
  int Task
  byte Version
Методы:
  void .ctor(int id, byte version, byte channel, byte level, byte opcode, int task, long keywords)
  byte get_Channel()
  int get_EventId()
  long get_Keywords()
  byte get_Level()
  byte get_Opcode()
  int get_Task()
  byte get_Version()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.EventProvider
Наследуется от: object
Поля:
Свойства:
Методы:
  void .ctor(Guid providerGuid)
  void Close()
  Guid CreateActivityId()
  void Dispose()
  void Dispose(bool disposing)
  WriteEventErrorCode GetLastWriteEventError()
  bool IsEnabled()
  bool IsEnabled(byte level, long keywords)
  void SetActivityId(Guid& id)
  bool WriteEvent(EventDescriptor& eventDescriptor, int dataCount, IntPtr data)
  bool WriteEvent(EventDescriptor& eventDescriptor, Object[] eventPayload)
  bool WriteEvent(EventDescriptor& eventDescriptor, string data)
  bool WriteMessageEvent(string eventMessage)
  bool WriteMessageEvent(string eventMessage, byte eventLevel, long eventKeywords)
  bool WriteTransferEvent(EventDescriptor& eventDescriptor, Guid relatedActivityId, int dataCount, IntPtr data)
  bool WriteTransferEvent(EventDescriptor& eventDescriptor, Guid relatedActivityId, Object[] eventPayload)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.EventProviderTraceListener
Наследуется от: TraceListener
Поля:
Свойства:
  string Delimiter
Методы:
  void .ctor(string providerId)
  void .ctor(string providerId, string name)
  void .ctor(string providerId, string name, string delimiter)
  string get_Delimiter()
  void set_Delimiter(string value)
  void Write(string message)
  void WriteLine(string message)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventBookmark
Наследуется от: object
Поля:
Свойства:
Методы:
  void .ctor(SerializationInfo info, StreamingContext context)
  void GetObjectData(SerializationInfo info, StreamingContext context)
  void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventKeyword
Наследуется от: object
Поля:
Свойства:
  string DisplayName
  string Name
  long Value
Методы:
  void .ctor()
  string get_DisplayName()
  string get_Name()
  long get_Value()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLevel
Наследуется от: object
Поля:
Свойства:
  string DisplayName
  string Name
  int Value
Методы:
  void .ctor()
  string get_DisplayName()
  string get_Name()
  int get_Value()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogConfiguration
Наследуется от: object
Поля:
Свойства:
  bool IsClassicLog
  bool IsEnabled
  string LogFilePath
  EventLogIsolation LogIsolation
  EventLogMode LogMode
  string LogName
  EventLogType LogType
  long MaximumSizeInBytes
  string OwningProviderName
  Nullable`1<int> ProviderBufferSize
  Nullable`1<Guid> ProviderControlGuid
  Nullable`1<long> ProviderKeywords
  Nullable`1<int> ProviderLatency
  Nullable`1<int> ProviderLevel
  Nullable`1<int> ProviderMaximumNumberOfBuffers
  Nullable`1<int> ProviderMinimumNumberOfBuffers
  IEnumerable`1<string> ProviderNames
  string SecurityDescriptor
Методы:
  void .ctor(string logName)
  void .ctor(string logName, EventLogSession session)
  bool get_IsClassicLog()
  bool get_IsEnabled()
  void set_IsEnabled(bool value)
  string get_LogFilePath()
  void set_LogFilePath(string value)
  EventLogIsolation get_LogIsolation()
  EventLogMode get_LogMode()
  void set_LogMode(EventLogMode value)
  string get_LogName()
  EventLogType get_LogType()
  long get_MaximumSizeInBytes()
  void set_MaximumSizeInBytes(long value)
  string get_OwningProviderName()
  Nullable`1<int> get_ProviderBufferSize()
  Nullable`1<Guid> get_ProviderControlGuid()
  Nullable`1<long> get_ProviderKeywords()
  void set_ProviderKeywords(Nullable`1<long> value)
  Nullable`1<int> get_ProviderLatency()
  Nullable`1<int> get_ProviderLevel()
  void set_ProviderLevel(Nullable`1<int> value)
  Nullable`1<int> get_ProviderMaximumNumberOfBuffers()
  Nullable`1<int> get_ProviderMinimumNumberOfBuffers()
  IEnumerable`1<string> get_ProviderNames()
  string get_SecurityDescriptor()
  void set_SecurityDescriptor(string value)
  void Dispose()
  void Dispose(bool disposing)
  void SaveChanges()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogSession
Наследуется от: object
Поля:
Свойства:
  EventLogSession GlobalSession
Методы:
  void .ctor()
  void .ctor(string server)
  void .ctor(string server, string domain, string user, SecureString password, SessionAuthentication logOnType)
  EventLogSession get_GlobalSession()
  void CancelCurrentOperations()
  void ClearLog(string logName)
  void ClearLog(string logName, string backupPath)
  void Dispose()
  void Dispose(bool disposing)
  void ExportLog(string path, PathType pathType, string query, string targetFilePath)
  void ExportLog(string path, PathType pathType, string query, string targetFilePath, bool tolerateQueryErrors)
  void ExportLogAndMessages(string path, PathType pathType, string query, string targetFilePath)
  void ExportLogAndMessages(string path, PathType pathType, string query, string targetFilePath, bool tolerateQueryErrors, CultureInfo targetCultureInfo)
  EventLogInformation GetLogInformation(string logName, PathType pathType)
  IEnumerable`1<string> GetLogNames()
  IEnumerable`1<string> GetProviderNames()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.SessionAuthentication
Наследуется от: Enum
Поля:
  int value__
  SessionAuthentication Default
  SessionAuthentication Kerberos
  SessionAuthentication Negotiate
  SessionAuthentication Ntlm
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.PathType
Наследуется от: Enum
Поля:
  int value__
  PathType FilePath
  PathType LogName
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogInformation
Наследуется от: object
Поля:
Свойства:
  Nullable`1<int> Attributes
  Nullable`1<DateTime> CreationTime
  Nullable`1<long> FileSize
  Nullable`1<bool> IsLogFull
  Nullable`1<DateTime> LastAccessTime
  Nullable`1<DateTime> LastWriteTime
  Nullable`1<long> OldestRecordNumber
  Nullable`1<long> RecordCount
Методы:
  void .ctor()
  Nullable`1<int> get_Attributes()
  Nullable`1<DateTime> get_CreationTime()
  Nullable`1<long> get_FileSize()
  Nullable`1<bool> get_IsLogFull()
  Nullable`1<DateTime> get_LastAccessTime()
  Nullable`1<DateTime> get_LastWriteTime()
  Nullable`1<long> get_OldestRecordNumber()
  Nullable`1<long> get_RecordCount()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogIsolation
Наследуется от: Enum
Поля:
  int value__
  EventLogIsolation Application
  EventLogIsolation Custom
  EventLogIsolation System
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogMode
Наследуется от: Enum
Поля:
  int value__
  EventLogMode AutoBackup
  EventLogMode Circular
  EventLogMode Retain
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogType
Наследуется от: Enum
Поля:
  int value__
  EventLogType Administrative
  EventLogType Analytical
  EventLogType Debug
  EventLogType Operational
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogException
Наследуется от: Exception
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(int errorCode)
  void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext)
  void .ctor(string message)
  void .ctor(string message, Exception innerException)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogInvalidDataException
Наследуется от: EventLogException
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext)
  void .ctor(string message)
  void .ctor(string message, Exception innerException)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogLink
Наследуется от: object
Поля:
Свойства:
  string DisplayName
  bool IsImported
  string LogName
Методы:
  void .ctor()
  string get_DisplayName()
  bool get_IsImported()
  string get_LogName()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogNotFoundException
Наследуется от: EventLogException
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext)
  void .ctor(string message)
  void .ctor(string message, Exception innerException)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogPropertySelector
Наследуется от: object
Поля:
Свойства:
Методы:
  void .ctor(IEnumerable`1<string> propertyQueries)
  void Dispose()
  void Dispose(bool disposing)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException
Наследуется от: EventLogException
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext)
  void .ctor(string message)
  void .ctor(string message, Exception innerException)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogQuery
Наследуется от: object
Поля:
Свойства:
  bool ReverseDirection
  EventLogSession Session
  bool TolerateQueryErrors
Методы:
  void .ctor(string path, PathType pathType)
  void .ctor(string path, PathType pathType, string query)
  bool get_ReverseDirection()
  void set_ReverseDirection(bool value)
  EventLogSession get_Session()
  void set_Session(EventLogSession value)
  bool get_TolerateQueryErrors()
  void set_TolerateQueryErrors(bool value)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogReader
Наследуется от: object
Поля:
Свойства:
  int BatchSize
  IList`1<EventLogStatus> LogStatus
Методы:
  void .ctor(EventLogQuery eventQuery)
  void .ctor(EventLogQuery eventQuery, EventBookmark bookmark)
  void .ctor(string path)
  void .ctor(string path, PathType pathType)
  int get_BatchSize()
  void set_BatchSize(int value)
  IList`1<EventLogStatus> get_LogStatus()
  void CancelReading()
  void Dispose()
  void Dispose(bool disposing)
  EventRecord ReadEvent()
  EventRecord ReadEvent(TimeSpan timeout)
  void Seek(EventBookmark bookmark)
  void Seek(EventBookmark bookmark, long offset)
  void Seek(SeekOrigin origin, long offset)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogStatus
Наследуется от: object
Поля:
Свойства:
  string LogName
  int StatusCode
Методы:
  void .ctor()
  string get_LogName()
  int get_StatusCode()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventRecord
Наследуется от: object
Поля:
Свойства:
  Nullable`1<Guid> ActivityId
  EventBookmark Bookmark
  int Id
  Nullable`1<long> Keywords
  IEnumerable`1<string> KeywordsDisplayNames
  Nullable`1<byte> Level
  string LevelDisplayName
  string LogName
  string MachineName
  Nullable`1<short> Opcode
  string OpcodeDisplayName
  Nullable`1<int> ProcessId
  IList`1<EventProperty> Properties
  Nullable`1<Guid> ProviderId
  string ProviderName
  Nullable`1<int> Qualifiers
  Nullable`1<long> RecordId
  Nullable`1<Guid> RelatedActivityId
  Nullable`1<int> Task
  string TaskDisplayName
  Nullable`1<int> ThreadId
  Nullable`1<DateTime> TimeCreated
  SecurityIdentifier UserId
  Nullable`1<byte> Version
Методы:
  void .ctor()
  Nullable`1<Guid> get_ActivityId()
  EventBookmark get_Bookmark()
  int get_Id()
  Nullable`1<long> get_Keywords()
  IEnumerable`1<string> get_KeywordsDisplayNames()
  Nullable`1<byte> get_Level()
  string get_LevelDisplayName()
  string get_LogName()
  string get_MachineName()
  Nullable`1<short> get_Opcode()
  string get_OpcodeDisplayName()
  Nullable`1<int> get_ProcessId()
  IList`1<EventProperty> get_Properties()
  Nullable`1<Guid> get_ProviderId()
  string get_ProviderName()
  Nullable`1<int> get_Qualifiers()
  Nullable`1<long> get_RecordId()
  Nullable`1<Guid> get_RelatedActivityId()
  Nullable`1<int> get_Task()
  string get_TaskDisplayName()
  Nullable`1<int> get_ThreadId()
  Nullable`1<DateTime> get_TimeCreated()
  SecurityIdentifier get_UserId()
  Nullable`1<byte> get_Version()
  void Dispose()
  void Dispose(bool disposing)
  string FormatDescription()
  string FormatDescription(IEnumerable`1<object> values)
  string ToXml()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventProperty
Наследуется от: object
Поля:
Свойства:
  object Value
Методы:
  void .ctor()
  object get_Value()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogReadingException
Наследуется от: EventLogException
Поля:
Свойства:
Методы:
  void .ctor()
  void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext)
  void .ctor(string message)
  void .ctor(string message, Exception innerException)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogRecord
Наследуется от: EventRecord
Поля:
Свойства:
  Nullable`1<Guid> ActivityId
  EventBookmark Bookmark
  string ContainerLog
  int Id
  Nullable`1<long> Keywords
  IEnumerable`1<string> KeywordsDisplayNames
  Nullable`1<byte> Level
  string LevelDisplayName
  string LogName
  string MachineName
  IEnumerable`1<int> MatchedQueryIds
  Nullable`1<short> Opcode
  string OpcodeDisplayName
  Nullable`1<int> ProcessId
  IList`1<EventProperty> Properties
  Nullable`1<Guid> ProviderId
  string ProviderName
  Nullable`1<int> Qualifiers
  Nullable`1<long> RecordId
  Nullable`1<Guid> RelatedActivityId
  Nullable`1<int> Task
  string TaskDisplayName
  Nullable`1<int> ThreadId
  Nullable`1<DateTime> TimeCreated
  SecurityIdentifier UserId
  Nullable`1<byte> Version
Методы:
  void .ctor()
  Nullable`1<Guid> get_ActivityId()
  EventBookmark get_Bookmark()
  string get_ContainerLog()
  int get_Id()
  Nullable`1<long> get_Keywords()
  IEnumerable`1<string> get_KeywordsDisplayNames()
  Nullable`1<byte> get_Level()
  string get_LevelDisplayName()
  string get_LogName()
  string get_MachineName()
  IEnumerable`1<int> get_MatchedQueryIds()
  Nullable`1<short> get_Opcode()
  string get_OpcodeDisplayName()
  Nullable`1<int> get_ProcessId()
  IList`1<EventProperty> get_Properties()
  Nullable`1<Guid> get_ProviderId()
  string get_ProviderName()
  Nullable`1<int> get_Qualifiers()
  Nullable`1<long> get_RecordId()
  Nullable`1<Guid> get_RelatedActivityId()
  Nullable`1<int> get_Task()
  string get_TaskDisplayName()
  Nullable`1<int> get_ThreadId()
  Nullable`1<DateTime> get_TimeCreated()
  SecurityIdentifier get_UserId()
  Nullable`1<byte> get_Version()
  void Dispose(bool disposing)
  string FormatDescription()
  string FormatDescription(IEnumerable`1<object> values)
  IList`1<object> GetPropertyValues(EventLogPropertySelector propertySelector)
  string ToXml()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventLogWatcher
Наследуется от: object
Поля:
Свойства:
  bool Enabled
Методы:
  void .ctor(EventLogQuery eventQuery)
  void .ctor(EventLogQuery eventQuery, EventBookmark bookmark)
  void .ctor(EventLogQuery eventQuery, EventBookmark bookmark, bool readExistingEvents)
  void .ctor(string path)
  bool get_Enabled()
  void set_Enabled(bool value)
  void add_EventRecordWritten(EventHandler`1<EventRecordWrittenEventArgs> value)
  void remove_EventRecordWritten(EventHandler`1<EventRecordWrittenEventArgs> value)
  void Dispose()
  void Dispose(bool disposing)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs
Наследуется от: EventArgs
Поля:
Свойства:
  Exception EventException
  EventRecord EventRecord
Методы:
  void .ctor()
  Exception get_EventException()
  EventRecord get_EventRecord()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventMetadata
Наследуется от: object
Поля:
Свойства:
  string Description
  long Id
  IEnumerable`1<EventKeyword> Keywords
  EventLevel Level
  EventLogLink LogLink
  EventOpcode Opcode
  EventTask Task
  string Template
  byte Version
Методы:
  void .ctor()
  string get_Description()
  long get_Id()
  IEnumerable`1<EventKeyword> get_Keywords()
  EventLevel get_Level()
  EventLogLink get_LogLink()
  EventOpcode get_Opcode()
  EventTask get_Task()
  string get_Template()
  byte get_Version()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventOpcode
Наследуется от: object
Поля:
Свойства:
  string DisplayName
  string Name
  int Value
Методы:
  void .ctor()
  string get_DisplayName()
  string get_Name()
  int get_Value()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.EventTask
Наследуется от: object
Поля:
Свойства:
  string DisplayName
  Guid EventGuid
  string Name
  int Value
Методы:
  void .ctor()
  string get_DisplayName()
  Guid get_EventGuid()
  string get_Name()
  int get_Value()
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.ProviderMetadata
Наследуется от: object
Поля:
Свойства:
  string DisplayName
  IEnumerable`1<EventMetadata> Events
  Uri HelpLink
  Guid Id
  IList`1<EventKeyword> Keywords
  IList`1<EventLevel> Levels
  IList`1<EventLogLink> LogLinks
  string MessageFilePath
  string Name
  IList`1<EventOpcode> Opcodes
  string ParameterFilePath
  string ResourceFilePath
  IList`1<EventTask> Tasks
Методы:
  void .ctor(string providerName)
  void .ctor(string providerName, EventLogSession session, CultureInfo targetCultureInfo)
  string get_DisplayName()
  IEnumerable`1<EventMetadata> get_Events()
  Uri get_HelpLink()
  Guid get_Id()
  IList`1<EventKeyword> get_Keywords()
  IList`1<EventLevel> get_Levels()
  IList`1<EventLogLink> get_LogLinks()
  string get_MessageFilePath()
  string get_Name()
  IList`1<EventOpcode> get_Opcodes()
  string get_ParameterFilePath()
  string get_ResourceFilePath()
  IList`1<EventTask> get_Tasks()
  void Dispose()
  void Dispose(bool disposing)
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.StandardEventKeywords
Наследуется от: Enum
Поля:
  long value__
  StandardEventKeywords AuditFailure
  StandardEventKeywords AuditSuccess
  StandardEventKeywords CorrelationHint
  StandardEventKeywords CorrelationHint2
  StandardEventKeywords EventLogClassic
  StandardEventKeywords None
  StandardEventKeywords ResponseTime
  StandardEventKeywords Sqm
  StandardEventKeywords WdiContext
  StandardEventKeywords WdiDiagnostic
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.StandardEventLevel
Наследуется от: Enum
Поля:
  int value__
  StandardEventLevel Critical
  StandardEventLevel Error
  StandardEventLevel Informational
  StandardEventLevel LogAlways
  StandardEventLevel Verbose
  StandardEventLevel Warning
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.StandardEventOpcode
Наследуется от: Enum
Поля:
  int value__
  StandardEventOpcode DataCollectionStart
  StandardEventOpcode DataCollectionStop
  StandardEventOpcode Extension
  StandardEventOpcode Info
  StandardEventOpcode Receive
  StandardEventOpcode Reply
  StandardEventOpcode Resume
  StandardEventOpcode Send
  StandardEventOpcode Start
  StandardEventOpcode Stop
  StandardEventOpcode Suspend
Свойства:
Методы:
--------------------------------------------------
Класс: System.Diagnostics.Eventing.Reader.StandardEventTask
Наследуется от: Enum
Поля:
  int value__
  StandardEventTask None
Свойства:
Методы:
--------------------------------------------------
Класс: Unity.ThrowStub
Наследуется от: ObjectDisposedException
Поля:
Свойства:
Методы:
  void ThrowNotSupportedException()
--------------------------------------------------
