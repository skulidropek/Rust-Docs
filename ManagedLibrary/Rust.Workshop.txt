Сборка: Rust.Workshop.dll
==================================================
Класс: <Module>
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: Skinnable
Наследуется от: ScriptableObject
Поля:
  string Name
  string ItemName
  GameObject EntityPrefab
  string EntityPrefabName
  GameObject ViewmodelPrefab
  string ViewmodelPrefabName
  Mesh[] MeshDownloads
  String[] MeshDownloadPaths
  Category Category
  bool HideInWorkshopUpload
  Group[] Groups
  Skinnable[] All
  Material[] _sourceMaterials
Свойства:
  Material[] SourceMaterials
Методы:
  Skinnable FindForItem(string itemType)
  Skinnable FindForEntity(string entityName)
  Material[] get_SourceMaterials()
  void .ctor()
--------------------------------------------------
Класс: WorkshopBase
Наследуется от: ScriptableObject
Поля:
  ulong itemID
  string title
  string description
  Texture2D previewImage
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: WorkshopSkinBase
Наследуется от: WorkshopBase
Поля:
  String[] itemName
  SkinType skinType
  Material skinMaterial0
  Material skinMaterial1
  Material skinMaterial2
  Material skinMaterial3
Свойства:
Методы:
  void .ctor()
  void .cctor()
--------------------------------------------------
Класс: Rust.Workshop.Approved
Наследуется от: object
Поля:
  Dictionary`2<ulong, ApprovedSkinInfo> _all
Свойства:
  IReadOnlyDictionary`2<ulong, ApprovedSkinInfo> All
Методы:
  void Add_2016()
  void Add_December_29_2016()
  void Add_December_22_2016()
  void Add_December_15_2016()
  void Add_December_8_2016()
  void Add_December_2_2018()
  void Add_December_1_2016()
  void Add_November_24_2016()
  void Add_November_17_2016()
  void Add_November_16_2016()
  void Add_November_10_2016()
  void Add_November_3_2016()
  void Add_2017()
  void Add_December_28_2017()
  void Add_December_21_2017()
  void Add_December_14_2017()
  void Add_December_7_2017()
  void Add_November_30_2017()
  void Add_November_23_2017()
  void Add_November_16_2017()
  void Add_November_9_2017()
  void Add_November_2_2017()
  void Add_October_26_2017()
  void Add_October_19_2017()
  void Add_October_12_2017()
  void Add_October_5_2017()
  void Add_September_28_2017()
  void Add_September_21_2017()
  void Add_September_14_2017()
  void Add_September_7_2017()
  void Add_August_31_2017()
  void Add_August_24_2017()
  void Add_August_17_2017()
  void Add_August_10_2017()
  void Add_August_3_2017()
  void Add_July_27_2017()
  void Add_July_20_2017()
  void Add_July_13_2017()
  void Add_July_6_2017()
  void Add_June_29_2017()
  void Add_June_15_2017()
  void Add_June_8_2017()
  void Add_June_1_2017()
  void Add_May_25_2017()
  void Add_May_18_2017()
  void Add_May_11_2017()
  void Add_May_4_2017()
  void Add_April_27_2017()
  void Add_April_20_2017()
  void Add_April_13_2017()
  void Add_April_6_2017()
  void Add_March_30_2017()
  void Add_March_23_2017()
  void Add_March_15_2017()
  void Add_March_8_2017()
  void Add_March_2_2017()
  void Add_February_23_2017()
  void Add_February_16_2017()
  void Add_February_9_2017()
  void Add_February_2_2017()
  void Add_January_18_2017()
  void Add_January_12_2017()
  void Add_January_4_2017()
  void Add_2018()
  void Add_December_20_2018()
  void Add_December_13_2020()
  void Add_December_6_2018()
  void Add_November_29_2018()
  void Add_November_22_2018()
  void Add_November_15_2018()
  void Add_November_9_2018()
  void Add_November_1_2018()
  void Add_October_26_2018()
  void Add_October_19_2018()
  void Add_October_11_2018()
  void Add_October_4_2018()
  void Add_September_27_2018()
  void Add_September_20_2018()
  void Add_September_14_2018()
  void Add_September_5_2018()
  void Add_August_23_2018()
  void Add_August_16_2018()
  void Add_August_9_2018()
  void Add_August_2_2018()
  void Add_July_26_2018()
  void Add_July_19_2018()
  void Add_July_12_2018()
  void Add_July_5_2018()
  void Add_June_28_2018()
  void Add_June_22_2018()
  void Add_June_14_2018()
  void Add_June_7_2018()
  void Add_May_31_2018()
  void Add_May_24_2018()
  void Add_May_2_2018()
  void Add_April_26_2018()
  void Add_April_19_2018()
  void Add_April_12_2018()
  void Add_April_5_2018()
  void Add_March_29_2018()
  void Add_March_22_2018()
  void Add_March_15_2018()
  void Add_March_8_2018()
  void Add_March_1_2018()
  void Add_February_22_2018()
  void Add_February_15_2018()
  void Add_February_8_2018()
  void Add_February_1_2018()
  void Add_January_25_2018()
  void Add_January_18_2018()
  void Add_January_11_2018()
  void Add_January_4_2018()
  void Add_2019()
  void Add_December_27_2019()
  void Add_December_19_2019()
  void Add_December_12_2019()
  void Add_December_5_2019()
  void Add_November_28_2019()
  void Add_November_21_2019()
  void Add_November_14_2019()
  void Add_November_7_2019()
  void Add_October_31_2019()
  void Add_October_24_2019()
  void Add_October_18_2019()
  void Add_October_11_2019()
  void Add_October_3_2019()
  void Add_September_26_2019()
  void Add_September_19_2019()
  void Add_September_12_2019()
  void Add_September_9_2019()
  void Add_August_29_2019()
  void Add_August_22_2019()
  void Add_August_15_2019()
  void Add_August_9_2019()
  void Add_August_1_2019()
  void Add_July_26_2019()
  void Add_July_19_2019()
  void Add_July_12_2019()
  void Add_July_5_2019()
  void Add_June_28_2019()
  void Add_June_21_2019()
  void Add_June_14_2019()
  void Add_June_6_2019()
  void Add_May_30_2019()
  void Add_May_23_2019()
  void Add_May_16_2019()
  void Add_May_9_2019()
  void Add_May_2_2019()
  void Add_April_25_2019()
  void Add_April_19_2019()
  void Add_April_11_2019()
  void Add_April_5_2019()
  void Add_March_28_2019()
  void Add_March_22_2019()
  void Add_March_14_2019()
  void Add_March_7_2019()
  void Add_February_28_2019()
  void Add_February_22_2019()
  void Add_February_14_2019()
  void Add_February_7_2019()
  void Add_January_31_2019()
  void Add_January_24_2019()
  void Add_January_17_2019()
  void Add_January_10_2019()
  void Add_January_3_2019()
  void Add_2020()
  void Add_December_31_2020()
  void Add_December_24_2020()
  void Add_December_18_2020()
  void Add_December_10_2020()
  void Add_December_03_2020()
  void Add_November_26_2020()
  void Add_November_19_2020()
  void Add_November_12_2020()
  void Add_November_05_2020()
  void Add_October_29_2020()
  void Add_October_22_2020()
  void Add_October_16_2020()
  void Add_October_8_2020()
  void Add_October_1_2020()
  void Add_September_24_2020()
  void Add_September_17_2020()
  void Add_September_10_2020()
  void Add_September_3_2020()
  void Add_August_27_2020()
  void Add_August_21_2020()
  void Add_August_13_2020()
  void Add_August_06_2020()
  void Add_July_31_2020()
  void Add_July_24_2020()
  void Add_July_17_2020()
  void Add_July_9_2020()
  void Add_July_2_2020()
  void Add_June_26_2020()
  void Add_June_19_2020()
  void Add_June_11_2020()
  void Add_June_4_2020()
  void Add_May_28_2020()
  void Add_May_21_2020()
  void Add_May_14_2020()
  void Add_May_8_2020()
  void Add_April_30_2020()
  void Add_April_24_2020()
  void Add_April_16_2020()
  void Add_April_9_2020()
  void Add_April_2_2020()
  void Add_March_28_2020()
  void Add_March_20_2020()
  void Add_March_13_2020()
  void Add_March_5_2020()
  void Add_February_27_2020()
  void Add_February_21_2020()
  void Add_February_13_2020()
  void Add_February_6_2020()
  void Add_January_31_2020()
  void Add_January_17_2020()
  void Add_January_10_2020()
  void Add_January_2_2020()
  void Add_2021()
  void Add_December_30_2021()
  void Add_December_23_2021()
  void Add_December_16_2021()
  void Add_December_09_2021()
  void Add_December_02_2021()
  void Add_November_25_2021()
  void Add_November_19_2021_TWITCHDROPS()
  void Add_November_18_2021()
  void Add_November_19_2021_CHARITABLE_RUST()
  void Add_November_11_2021()
  void Add_November_04_2021()
  void Add_October_27_2021()
  void Add_October_21_2021()
  void Add_October_14_2021()
  void Add_October_07_2021()
  void Add_September_30_2021()
  void Add_September_23_2021()
  void Add_September_16_2021()
  void Add_September_09_2021()
  void Add_September_02_2021()
  void Add_September_01_2021_STREAMERSKINS()
  void Add_August_26_2021()
  void Add_August_19_2021()
  void Add_August_12_2021()
  void Add_August_04_2021()
  void Add_July_29_2021()
  void Add_July_22_2021()
  void Add_July_15_2021_STREAMERSKINS()
  void Add_July_15_2021()
  void Add_July_08_2021()
  void Add_July_05_2021_STREAMERSKINS()
  void Add_July_01_2021()
  void Add_June_24_2021()
  void Add_June_17_2021()
  void Add_June_10_2021()
  void Add_June_03_2021()
  void Add_May_27_2021()
  void Add_May_20_2021()
  void Add_May_13_2021()
  void Add_May_06_2021()
  void Add_May_05_2021_STREAMERSKINS()
  void Add_April_29_2021()
  void Add_April_22_2021()
  void Add_April_15_2021()
  void Add_April_09_2021()
  void Add_April_01_2021()
  void Add_March_31_2021_STREAMERSKINS()
  void Add_March_25_2021()
  void Add_March_18_2021()
  void Add_March_11_2021()
  void Add_March_04_2021()
  void Add_March_03_2021_STREAMERSKINS()
  void Add_February_25_2021()
  void Add_February_18_2021()
  void Add_February_11_2021()
  void Add_February_10_2021_STREAMERSKINS()
  void Add_February_04_2021()
  void Add_February_03_2021_STREAMERSKINS()
  void Add_January_28_2021()
  void Add_January_21_2021()
  void Add_January_15_2021_STREAMERSKINS()
  void Add_January_14_2021()
  void Add_January_07_2021()
  void Add_January_06_2021_STREAMERSKINS()
  void Add_2022()
  void Add_December_29_2022()
  void Add_December_22_2022()
  void Add_December_15_2022()
  void Add_December_08_2022()
  void Add_December_01_2022()
  void Add_November_24_2022()
  void Add_november_18_CHARITABLERUST_FORSALE()
  void Add_November_18_2022()
  void Add_November_10_2022_CHARITABLERUST()
  void Add_November_10_2022()
  void Add_November_03_2022()
  void Add_October_27_2022()
  void Add_October_20_2022()
  void Add_October_13_2022()
  void Add_October_06_2022()
  void Add_October_04_2022_STREAMERSKINS()
  void Add_September_28_2022()
  void Add_September_22_2022()
  void Add_September_15_2022()
  void Add_September_08_2022()
  void Add_September_01_2022()
  void Add_August_25_2022()
  void Add_August_18_2022()
  void Add_August_11_2022()
  void Add_August_08_2022_STREAMERSKINS()
  void Add_August_04_2022()
  void Add_July_28_2022()
  void Add_July_21_2022()
  void Add_July_14_2022()
  void Add_July_07_2022()
  void Add_June_30_2022()
  void Add_June_23_2022()
  void Add_June_16_2022()
  void Add_June_09_2022()
  void Add_June_02_2022()
  void Add_May_26_2022()
  void Add_May_19_2022()
  void Add_May_12_2022()
  void Add_May_05_2022()
  void Add_May_04_2022_STREAMERSKINS()
  void Add_April_28_2022()
  void Add_April_21_2022()
  void Add_April_14_2022_EASTER()
  void Add_April_13_2022_STREAMERSKINS()
  void Add_April_07_2022()
  void Add_March_31_2022()
  void Add_March_24_2022()
  void Add_March_17_2022_STREAMERSKINS()
  void Add_March_17_2022()
  void Add_March_10_2022()
  void Add_March_03_2022()
  void Add_February_24_2022()
  void Add_February_17_2022()
  void Add_February_10_2022()
  void Add_February_03_2022()
  void Add_February_01_2022_STREAMERSKINS()
  void Add_January_28_2022()
  void Add_January_20_2022()
  void Add_January_13_2022()
  void Add_January_06_2022_STREAMERSKINS()
  void Add_January_06_2022()
  void Add_2023()
  void Add_October_26_2023()
  void Add_October_19_2023()
  void Add_October_12_2023()
  void Add_October_12_2023_CHARITABLERUST_FORSALE()
  void Add_October_10_2023_CHARITABLERUST()
  void Add_October_05_2023()
  void Add_September_28_2023()
  void Add_September_21_2023()
  void Add_September_14_2023()
  void Add_September_07_2023()
  void Add_September_06_2023_TWITCHDROPS()
  void Add_August_31_2023()
  void Add_August_24_2023()
  void Add_August_17_2023()
  void Add_August_10_2023()
  void Add_August_03_2023()
  void Add_July_27_2023()
  void Add_July_20_2023()
  void Add_July_13_2023()
  void Add_July_06_2023()
  void Add_June_29_2023()
  void Add_June_22_2023()
  void Add_June_15_2023()
  void Add_June_08_2023_STREAMERSKINS()
  void Add_June_08_2023()
  void Add_June_01_2023()
  void Add_May_25_2023()
  void Add_May_18_2023()
  void Add_May_11_2023()
  void Add_May_11_2023_TWITCHDROPS()
  void Add_May_04_2023()
  void Add_April_27_2023()
  void Add_April_21_2023()
  void Add_April_13_2023_EASTER2()
  void Add_April_06_2023_EASTER()
  void Add_March_30_2023()
  void Add_March_23_2023()
  void Add_March_17_2023()
  void Add_March_09_2023()
  void Add_March_01_2023()
  void Add_February_23_2023()
  void Add_February_16_2023()
  void Add_February_09_VALENTINES()
  void Add_February_02_2023()
  void Add_January_26_2023()
  void Add_January_18_2023_LUNAR()
  void Add_January_12_2023()
  void Add_January_12_2023_TRUST_IN_RUST_TWITCH_DROPS()
  void Add_January_12_2023_TRUST_IN_RUST_STORE()
  void Add_January_05_2023()
  IReadOnlyDictionary`2<ulong, ApprovedSkinInfo> get_All()
  void Initialize()
  void Add(ApprovedSkinInfo skin)
  ApprovedSkinInfo FindByInventoryId(int id)
  void EnsureInitialized()
  void Add_Unlimited()
--------------------------------------------------
Класс: Rust.Workshop.WorkshopSkin
Наследуется от: MonoBehaviour
Поля:
  float DefaultTimeout
  bool AllowApply
  bool AllowUnload
  float DownloadTimeout
  WaitForSeconds waitForSeconds
  AssetBundleCreateRequest[] bundleRequests
  AssetBundle[] bundles
  ListDictionary`2<ulong, ListHashSet`1<WorkshopSkin>> RefreshQueue
  Queue`1<ulong> ItemQueue
  Queue`1<ulong> SkinQueue
  ListDictionary`2<ulong, IWorkshopContent> ItemCache
  ListDictionary`2<ulong, Skin> SkinCache
  ulong RequestedWorkshopID
  ulong AppliedWorkshopID
  Action`1<Skin> OnRefresh
  Skin AppliedSkin
Свойства:
  int QueuedCount
  int LoadedCount
Методы:
  string GetStatus()
  int get_QueuedCount()
  int get_LoadedCount()
  Skin GetSkin(ulong workshopId)
  IWorkshopContent GetItem(ulong workshopId)
  void Apply(GameObject gameobj, ulong workshopId, Action`1<Skin> callback)
  void Reset(GameObject gameobj)
  void Prepare(GameObject gameobj)
  void OnDestroy()
  void Apply(ulong workshopId, Action`1<Skin> callback)
  void EnqueueSkinRefresh(ulong workshopId)
  void LoadFromWorkshop(ulong workshopId)
  void DequeueSkinRefresh(ulong workshopId)
  void LoadOrUnloadSkinAssets(ulong workshopId)
  IEnumerator ItemQueueCoroutine()
  IEnumerator SkinQueueCoroutine()
  IEnumerator LoadItem(ulong workshopId)
  IEnumerator LoadSkin(ulong workshopId)
  int GetBundleIndex(ulong workshopId)
  void ApplySkin(Skin skin, ulong workshopId)
  void UpdateSkinReference(Skin skin, ulong workshopId)
  void .ctor()
  void .cctor()
--------------------------------------------------
Класс: Rust.Workshop.Skin
Наследуется от: object
Поля:
  string manifestName
  string manifestContent
  TextAsset manifestAsset
  Manifest manifest
  string iconName
  Sprite sprite
  int references
  Skinnable Skinnable
  Material[] Materials
  Material[] DefaultMaterials
  List`1<Texture> TextureAssets
  List`1<Texture> TextureObjects
  bool <AssetsRequested>k__BackingField
  bool <IconRequested>k__BackingField
  bool <AssetsLoaded>k__BackingField
  bool <IconLoaded>k__BackingField
  Action OnLoaded
  Action OnIconLoaded
Свойства:
  bool AssetsRequested
  bool IconRequested
  bool AssetsLoaded
  bool IconLoaded
Методы:
  void LoadManifestFromFile()
  void DeserializeManifest()
  IEnumerator LoadIcon(ulong workshopId, string directory, AssetBundle bundle)
  IEnumerator LoadAssets(ulong workshopId, string directory, AssetBundle bundle)
  void UnloadAssets()
  void UpdateTextureMetadata(Texture2D texture, string textureName, bool anisoFiltering, bool trilinearFiltering)
  void Apply(GameObject gameObject)
  int GetSizeInBytes()
  bool get_AssetsRequested()
  void set_AssetsRequested(bool value)
  bool get_IconRequested()
  void set_IconRequested(bool value)
  bool get_AssetsLoaded()
  void set_AssetsLoaded(bool value)
  bool get_IconLoaded()
  void set_IconLoaded(bool value)
  void Apply(GameObject obj, Skinnable skinnable, Material[] Materials)
  void ReadDefaults()
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.Price
Наследуется от: Enum
Поля:
  int value__
  Price NotForSale
  Price TwentyFiveCents
  Price FiftyCents
  Price OneDollar
  Price OneDollarFifty
  Price TwoDollars
  Price TwoDollarsFifty
  Price ThreeDollars
  Price ThreeDollarsFifty
  Price FourDollars
  Price FourDollarsFifty
  Price FiveDollars
  Price SixDollars
  Price SevenFifty
  Price TenDollars
  Price FifteenDollars
  Price TwentyDollars
  Price TwentyFiveDollars
Свойства:
Методы:
--------------------------------------------------
Класс: Rust.Workshop.DropChance
Наследуется от: Enum
Поля:
  int value__
  DropChance Never
  DropChance VeryLow
  DropChance Low
  DropChance Medium
  DropChance High
  DropChance VeryHigh
Свойства:
Методы:
--------------------------------------------------
Класс: Rust.Workshop.Category
Наследуется от: Enum
Поля:
  int value__
  Category Shirt
  Category Pants
  Category Jacket
  Category Hat
  Category Mask
  Category Footwear
  Category Weapon
  Category Misc
  Category Deployable
  Category Gloves
Свойства:
Методы:
--------------------------------------------------
Класс: Rust.Workshop.ApprovedSkinInfo
Наследуется от: object
Поля:
  ulong <InventoryId>k__BackingField
  string <Desc>k__BackingField
  string <Name>k__BackingField
  ulong <WorkshopdId>k__BackingField
  Price <Price>k__BackingField
  bool <Tradable>k__BackingField
  DropChance <DropChance>k__BackingField
  bool <Marketable>k__BackingField
  Skinnable <Skinnable>k__BackingField
  bool <AllowInCrates>k__BackingField
  bool <IsLimitedTimeOffer>k__BackingField
Свойства:
  ulong InventoryId
  string Desc
  string Name
  ulong WorkshopdId
  Price Price
  bool Tradable
  DropChance DropChance
  bool Marketable
  Skinnable Skinnable
  bool AllowInCrates
  bool IsLimitedTimeOffer
Методы:
  ulong get_InventoryId()
  void set_InventoryId(ulong value)
  string get_Desc()
  void set_Desc(string value)
  string get_Name()
  void set_Name(string value)
  ulong get_WorkshopdId()
  void set_WorkshopdId(ulong value)
  Price get_Price()
  void set_Price(Price value)
  bool get_Tradable()
  void set_Tradable(bool value)
  DropChance get_DropChance()
  void set_DropChance(DropChance value)
  bool get_Marketable()
  void set_Marketable(bool value)
  Skinnable get_Skinnable()
  void set_Skinnable(Skinnable value)
  bool get_AllowInCrates()
  void set_AllowInCrates(bool value)
  bool get_IsLimitedTimeOffer()
  void set_IsLimitedTimeOffer(bool value)
  void .ctor(ulong WorkshopdId, string Name, string Desc, string ItemName)
  ApprovedSkinInfo Store(Price Price, bool CanBeTraded, bool CanBeSold)
  ApprovedSkinInfo TimeLimited()
  ApprovedSkinInfo Unlimited()
  ApprovedSkinInfo NoCrate()
  ApprovedSkinInfo Drops(DropChance DropChance)
  ApprovedSkinInfo ItemId(ulong InventoryId)
  Item op_Implicit(ApprovedSkinInfo o)
--------------------------------------------------
Класс: Rust.Workshop.ItemSchema
Наследуется от: object
Поля:
  int appid
  Item[] items
Свойства:
Методы:
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.WorkshopItemButton
Наследуется от: MonoBehaviour
Поля:
  TextMeshProUGUI Name
  TextMeshProUGUI Description
  HttpImage Icon
  GameObject OldIndicator
  GameObject Incompatible
  GameObject ItemDownloaded
  GameObject ItemDownloadPending
  GameObject ItemDownloading
  IWorkshopContent Item
Свойства:
Методы:
  void Init(IWorkshopContent item)
  void Update()
  void OpenWebpage()
  void StartEditing()
  void StartViewing()
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.WorkshopItemList
Наследуется от: MonoBehaviour
Поля:
  int StaticRefresh
  WorkshopItemButton ButtonPrefab
  GameObject Container
  ListType ListType
  int PerPage
  int Page
  Button PreviousPage
  Button NextPage
  Text PageInfo
  string ItemFilter
  Dropdown ItemTypeSelector
  int ForcedRefresh
  int TotalResults
  bool Refreshing
Свойства:
  int NumPages
Методы:
  void RefreshAll()
  int get_NumPages()
  void Awake()
  void PageNext()
  void PagePrev()
  void OnChangedItemType(int type)
  void Update()
  void SwitchToLatest()
  void SwitchToTrending()
  void SwitchToPopular()
  void SwitchToAccepted()
  Task Refresh()
  void .ctor()
  void .cctor()
--------------------------------------------------
Класс: Rust.Workshop.ListType
Наследуется от: Enum
Поля:
  int value__
  ListType MyItems
  ListType MostRecent
  ListType MostPopular
  ListType Trending
  ListType Accepted
Свойства:
Методы:
--------------------------------------------------
Класс: Rust.Workshop.WorkshopViewmodelControls
Наследуется от: MonoBehaviour
Поля:
  Toggle Enabled
  Toggle Ironsights
  Toggle admire
Свойства:
Методы:
  void Clear()
  void DoUpdate(GameObject ViewModel)
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.WorkshopIconLoader
Наследуется от: MonoBehaviour
Поля:
Свойства:
Методы:
  Sprite Find(ulong workshopId, Sprite placeholder, Action callback)
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.WorkshopInterface
Наследуется от: SingletonComponent`1<WorkshopInterface>
Поля:
Свойства:
  WorkshopItemEditor Editor
Методы:
  WorkshopItemEditor get_Editor()
  void Exit()
  void RenderAllIcons()
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.WorkshopItemEditor
Наследуется от: SingletonComponent`1<WorkshopItemEditor>
Поля:
  GameObject <Prefab>k__BackingField
  GameObject <ViewModel>k__BackingField
  Skinnable <Skinnable>k__BackingField
  Skin <Skin>k__BackingField
  ulong <ItemId>k__BackingField
  Action`2<bool, string> OnLoading
  Dropdown ItemTypeSelector
  InputField ItemTitleLabel
  WorkshopViewmodelControls ViewmodelControls
  GameObject MaterialTabHolder
  GameObject FileDialogObject
  GameObject[] EditorElements
  GameObject[] ClothOnlyElements
  GameObject[] DetailOnlyElements
  GameObject[] DirtOnlyElements
  Toggle[] MaterialTabs
  int EditingMaterial
  GameObject item_position_a
  GameObject item_position_b
  Regex ModelCleanup
Свойства:
  GameObject Prefab
  GameObject ViewModel
  Skinnable Skinnable
  Skin Skin
  ulong ItemId
  WorkshopInterface Interface
  Publisher Publisher
  FileDialog FileDialog
  string ItemTitle
  string ChangeLog
Методы:
  GameObject get_Prefab()
  void set_Prefab(GameObject value)
  GameObject get_ViewModel()
  void set_ViewModel(GameObject value)
  Skinnable get_Skinnable()
  void set_Skinnable(Skinnable value)
  Skin get_Skin()
  void set_Skin(Skin value)
  ulong get_ItemId()
  void set_ItemId(ulong value)
  WorkshopInterface get_Interface()
  void Loading(bool v1, string v2, string v3, float v4)
  Publisher get_Publisher()
  FileDialog get_FileDialog()
  string get_ItemTitle()
  void set_ItemTitle(string value)
  string get_ChangeLog()
  void set_ChangeLog(string value)
  void OnEnable()
  void ClearEditor()
  void StartNewItem(string type)
  IEnumerator StartViewingItem(IWorkshopContent item)
  IEnumerator StartEditingItem(IWorkshopContent item)
  void HideEditor()
  void ShowEditor()
  IEnumerator OpenItem(IWorkshopContent item)
  void OnImportFinished()
  Texture2D SetTexture(string paramName, string fullName, bool isNormalMap)
  void SetFloat(string paramName, float value)
  void SetColor(string paramName, Color val)
  void SetTexture(string paramName, Texture tex)
  bool LoadItemType(IEnumerable`1<string> tags)
  bool LoadItemType(string v)
  GameObject LoadForPreview(string entityPrefabName, bool preprocess)
  void OnChangedItemType(int type)
  void UpdateMaterialRows()
  void UpdateMaterialTabs()
  void InitScene()
  void InitPlayerPreview(ulong playerid, bool focus)
  void RandomizePlayerPreview()
  void DownloadModel()
  bool IsLesserLOD(string name)
  void RemoveLODs(GameObject prefab)
  void RemoveComponents(GameObject prefab)
  IEnumerator DoDownloadModel()
  void Update()
  void LateUpdate()
  void SwitchMaterial(int i)
  void .ctor()
  void .cctor()
  bool <LoadItemType>b__61_0(OptionData x)
--------------------------------------------------
Класс: Rust.Workshop.Editor.ColorRow
Наследуется от: MaterialRow
Поля:
  Button Reset
  Slider Red
  Slider Green
  Slider Blue
  Color Default
Свойства:
  bool IsDefault
Методы:
  void Update()
  bool get_IsDefault()
  void Read(Material source, Material def)
  void ResetToDefault()
  void OnChanged()
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.Editor.FloatRow
Наследуется от: MaterialRow
Поля:
  Button Reset
  Slider Slider
  float Default
Свойства:
  bool IsDefault
Методы:
  void Update()
  bool get_IsDefault()
  void Read(Material source, Material def)
  void ResetToDefault()
  void OnChanged()
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.Editor.MaterialRow
Наследуется от: MonoBehaviour
Поля:
  string ParamName
Свойства:
  WorkshopItemEditor Editor
Методы:
  WorkshopItemEditor get_Editor()
  void Read(Material source, Material def)
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.Editor.TextureRow
Наследуется от: MaterialRow
Поля:
  string Filename
  bool IsNormalMap
  RawImage TargetImage
  Text FilenameLabel
  Button Reset
  Button Clear
  bool HasChanges
  Texture Default
  FileSystemWatcher watcher
Свойства:
  bool IsDefault
  bool IsClear
Методы:
  void Update()
  void SetFilenameText(string filename)
  void OnDisable()
  void OpenFileBrowser()
  IEnumerator BrowseForTexture()
  void Load(string fullname)
  void SetTexture(Texture tex)
  bool get_IsDefault()
  bool get_IsClear()
  void Read(Material source, Material def)
  void OpenFileLocation()
  void SaveFile()
  IEnumerator DoSaveFile()
  void ResetToDefault()
  void ResetToClear()
  void StartWatching()
  void FileChanged(string name)
  void StopWatching()
  void .ctor()
  void <StartWatching>b__26_0(object a, FileSystemEventArgs e)
--------------------------------------------------
Класс: Rust.Workshop.Editor.Publisher
Наследуется от: MonoBehaviour
Поля:
  InputField ChangeLog
  Button PublishButton
  Texture2D IconBackground
  Skinnable Skinnable
  Skin Skin
  ulong ItemId
  string Title
  GameObject Prefab
Свойства:
  WorkshopInterface Interface
  WorkshopItemEditor Editor
Методы:
  WorkshopInterface get_Interface()
  WorkshopItemEditor get_Editor()
  void StartExport()
  void Update()
  bool CanPublish()
  Task DoExport(bool publishToSteam, bool OpenFolder, string forceFolderName)
  Task ExportToFolder(string folder, bool OpenFolder)
  void CreateWorkshopIcon(string folder)
  Task PublishToSteam(string folder)
  Task ExportTexture(Dictionary`2<string, string> data, string folder, int group, string paramname, Material mat, Material defaultMat, bool isNormalMap)
  void Export()
  Task DoExport()
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.Editor.WorkshopPlayerPreview
Наследуется от: MonoBehaviour
Поля:
  GameObject Instance
Свойства:
  WorkshopInterface Interface
Методы:
  WorkshopInterface get_Interface()
  void Setup(GameObject ClothingPrefab, ulong id, bool focus, bool IsClothing)
  void Cleanup()
  void OnDisable()
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.Editor.WorkshopView
Наследуется от: MonoBehaviour
Поля:
  TextMeshProUGUI Title
  TextMeshProUGUI AuthorName
  TextMeshProUGUI VoteInfo
  Button VoteUp
  Button VoteDown
  IWorkshopContent item
Свойства:
  WorkshopInterface Interface
  WorkshopItemEditor Editor
Методы:
  WorkshopInterface get_Interface()
  WorkshopItemEditor get_Editor()
  void Update()
  void UpdateFrom(IWorkshopContent item)
  void OnVoteUp()
  void OnVoteDown()
  void OpenWeb()
  void Clear()
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.Import.ImportVersion1
Наследуется от: SingletonComponent`1<ImportVersion1>
Поля:
Свойства:
Методы:
  IEnumerator DoImport(IWorkshopContent item, Skin skin)
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.Import.ImportVersion2
Наследуется от: SingletonComponent`1<ImportVersion2>
Поля:
  AssetBundle Bundle
Свойства:
Методы:
  void OnDisable()
  IEnumerator DoImport(IWorkshopContent item, Skin skin)
  IEnumerator LoadItem(string Folder, string BundleName, Skin skin)
  IEnumerator ProcessMaterial(int v, Material inputMaterial, Skin skin)
  Texture2D ImportTexture(string name, Material inputMaterial, Material outputMaterial, bool normal, Skin skin, int group, string targetName)
  Texture2D ConvertMetalToSpec(Texture2D tex, Material outputMaterial)
  void .ctor()
--------------------------------------------------
Класс: Rust.Workshop.Import.ImportVersion3
Наследуется от: SingletonComponent`1<ImportVersion3>
Поля:
Свойства:
Методы:
  IEnumerator DoImport(IWorkshopContent item, Skin skin)
  IEnumerator DownloadFromWorkshop(IWorkshopContent item)
  void .ctor()
--------------------------------------------------
