public Microsoft.Cci.ILocalScope {
public UInt32 Offset
public UInt32 Length
public UInt32 get_Offset()
public UInt32 get_Length()
}
public Microsoft.Cci.IName {
public int UniqueKey
public int UniqueKeyIgnoringCase
public string Value
public int get_UniqueKey()
public int get_UniqueKeyIgnoringCase()
public string get_Value()
}
public Microsoft.Cci.INamespaceScope {
public IEnumerable`1<IUsedNamespace> UsedNamespaces
public IEnumerable`1<IUsedNamespace> get_UsedNamespaces()
}
public Microsoft.Cci.IUsedNamespace {
public IName Alias
public IName NamespaceName
public IName get_Alias()
public IName get_NamespaceName()
}
internal Microsoft.Cci.Pdb.AnnotationSym : ValueType {
internal UInt32 off
internal ushort seg
internal ushort csz
internal String[] rgsz
}
internal Microsoft.Cci.Pdb.AttrManyRegSym : ValueType {
internal UInt32 typind
internal UInt32 offCod
internal ushort segCod
internal ushort flags
internal byte count
internal Byte[] reg
internal string name
}
internal Microsoft.Cci.Pdb.AttrManyRegSym2 : ValueType {
internal UInt32 typind
internal UInt32 offCod
internal ushort segCod
internal ushort flags
internal ushort count
internal UInt16[] reg
internal string name
}
internal Microsoft.Cci.Pdb.AttrRegRel : ValueType {
internal UInt32 off
internal UInt32 typind
internal ushort reg
internal UInt32 offCod
internal ushort segCod
internal ushort flags
internal string name
}
internal Microsoft.Cci.Pdb.AttrRegSym : ValueType {
internal UInt32 typind
internal UInt32 offCod
internal ushort segCod
internal ushort flags
internal ushort reg
internal string name
}
internal Microsoft.Cci.Pdb.AttrSlotSym : ValueType {
internal UInt32 index
internal UInt32 typind
internal UInt32 offCod
internal ushort segCod
internal ushort flags
internal string name
}
internal Microsoft.Cci.Pdb.BitAccess : object {
private Byte[] buffer
private int offset
internal Byte[] Buffer
internal int Position
internal void .ctor(int capacity)
internal Byte[] get_Buffer()
internal void FillBuffer(Stream stream, int capacity)
internal void Append(Stream stream, int count)
internal int get_Position()
internal void set_Position(int value)
internal void MinCapacity(int capacity)
internal void Align(int alignment)
internal void ReadInt16(Int16& value)
internal void ReadInt8(SByte& value)
internal void ReadInt32(Int32& value)
internal void ReadInt64(Int64& value)
internal void ReadUInt16(UInt16& value)
internal void ReadUInt8(Byte& value)
internal void ReadUInt32(UInt32& value)
internal void ReadUInt64(UInt64& value)
internal void ReadInt32(Int32[] values)
internal void ReadUInt32(UInt32[] values)
internal void ReadBytes(Byte[] bytes)
internal float ReadFloat()
internal double ReadDouble()
internal decimal ReadDecimal()
internal void ReadBString(String& value)
internal string ReadBString(int len)
internal void ReadCString(String& value)
internal void SkipCString(String& value)
internal void ReadGuid(Guid& guid)
internal string ReadString()
}
internal Microsoft.Cci.Pdb.BitSet : ValueType {
private int size
private UInt32[] words
internal bool IsEmpty
internal void .ctor(BitAccess bits)
internal bool IsSet(int index)
private UInt32 GetBit(int index)
internal bool get_IsEmpty()
}
internal Microsoft.Cci.Pdb.BlockSym32 : ValueType {
internal UInt32 parent
internal UInt32 end
internal UInt32 len
internal UInt32 off
internal ushort seg
internal string name
}
internal Microsoft.Cci.Pdb.BpRelSym32 : ValueType {
internal int off
internal UInt32 typind
internal string name
}
internal Microsoft.Cci.Pdb.CallsiteInfo : ValueType {
internal int off
internal ushort ect
internal ushort pad0
internal UInt32 typind
}
internal Microsoft.Cci.Pdb.CFlagSym : ValueType {
internal byte machine
internal byte language
internal ushort flags
internal string ver
}
internal Microsoft.Cci.Pdb.CFLAGSYM_FLAGS : Enum {
public ushort value__
public CFLAGSYM_FLAGS pcode
public CFLAGSYM_FLAGS floatprec
public CFLAGSYM_FLAGS floatpkg
public CFLAGSYM_FLAGS ambdata
public CFLAGSYM_FLAGS ambcode
public CFLAGSYM_FLAGS mode32
}
internal Microsoft.Cci.Pdb.CoffGroupSym : ValueType {
internal UInt32 cb
internal UInt32 characteristics
internal UInt32 off
internal ushort seg
internal string name
}
internal Microsoft.Cci.Pdb.CompileSym : ValueType {
internal UInt32 flags
internal ushort machine
internal ushort verFEMajor
internal ushort verFEMinor
internal ushort verFEBuild
internal ushort verMajor
internal ushort verMinor
internal ushort verBuild
internal string verSt
internal String[] verArgs
}
internal Microsoft.Cci.Pdb.COMPILESYM_FLAGS : Enum {
public UInt32 value__
public COMPILESYM_FLAGS iLanguage
public COMPILESYM_FLAGS fEC
public COMPILESYM_FLAGS fNoDbgInfo
public COMPILESYM_FLAGS fLTCG
public COMPILESYM_FLAGS fNoDataAlign
public COMPILESYM_FLAGS fManagedPresent
public COMPILESYM_FLAGS fSecurityChecks
public COMPILESYM_FLAGS fHotPatch
public COMPILESYM_FLAGS fCVTCIL
public COMPILESYM_FLAGS fMSILModule
}
internal Microsoft.Cci.Pdb.ConstSym : ValueType {
internal UInt32 typind
internal ushort value
internal string name
}
internal Microsoft.Cci.Pdb.CV_CFL_CODE : Enum {
public int value__
public CV_CFL_CODE CV_CFL_CNEAR
public CV_CFL_CODE CV_CFL_CFAR
public CV_CFL_CODE CV_CFL_CHUGE
}
internal Microsoft.Cci.Pdb.CV_CFL_DATA : Enum {
public int value__
public CV_CFL_DATA CV_CFL_DNEAR
public CV_CFL_DATA CV_CFL_DFAR
public CV_CFL_DATA CV_CFL_DHUGE
}
internal Microsoft.Cci.Pdb.CV_CFL_FPKG : Enum {
public int value__
public CV_CFL_FPKG CV_CFL_NDP
public CV_CFL_FPKG CV_CFL_EMU
public CV_CFL_FPKG CV_CFL_ALT
}
internal Microsoft.Cci.Pdb.CV_Column : ValueType {
internal ushort offColumnStart
internal ushort offColumnEnd
}
internal Microsoft.Cci.Pdb.CV_cookietype : Enum {
public int value__
public CV_cookietype CV_COOKIETYPE_COPY
public CV_cookietype CV_COOKIETYPE_XOR_SP
public CV_cookietype CV_COOKIETYPE_XOR_BP
public CV_cookietype CV_COOKIETYPE_XOR_R13
}
internal Microsoft.Cci.Pdb.CV_DISCARDED : Enum {
public UInt32 value__
public CV_DISCARDED CV_DISCARDED_UNKNOWN
public CV_DISCARDED CV_DISCARDED_NOT_SELECTED
public CV_DISCARDED CV_DISCARDED_NOT_REFERENCED
}
internal Microsoft.Cci.Pdb.CV_EXPROCFLAGS : ValueType {
internal byte flags
internal byte reserved
}
internal Microsoft.Cci.Pdb.CV_FILE_CHECKSUM_TYPE : Enum {
public byte value__
public CV_FILE_CHECKSUM_TYPE None
public CV_FILE_CHECKSUM_TYPE MD5
}
internal Microsoft.Cci.Pdb.CV_FileCheckSum : ValueType {
internal UInt32 name
internal byte len
internal byte type
}
internal Microsoft.Cci.Pdb.CV_fldattr : Enum {
public int value__
public CV_fldattr access
public CV_fldattr mprop
public CV_fldattr pseudo
public CV_fldattr noinherit
public CV_fldattr noconstruct
public CV_fldattr compgenx
}
internal Microsoft.Cci.Pdb.CV_GENERIC_FLAG : Enum {
public ushort value__
public CV_GENERIC_FLAG cstyle
public CV_GENERIC_FLAG rsclean
}
internal Microsoft.Cci.Pdb.CV_GENERIC_STYLE : Enum {
public int value__
public CV_GENERIC_STYLE CV_GENERIC_VOID
public CV_GENERIC_STYLE CV_GENERIC_REG
public CV_GENERIC_STYLE CV_GENERIC_ICAN
public CV_GENERIC_STYLE CV_GENERIC_ICAF
public CV_GENERIC_STYLE CV_GENERIC_IRAN
public CV_GENERIC_STYLE CV_GENERIC_IRAF
public CV_GENERIC_STYLE CV_GENERIC_UNUSED
}
internal Microsoft.Cci.Pdb.CV_int : Enum {
public int value__
public CV_int CV_RI_CHAR
public CV_int CV_RI_INT1
public CV_int CV_RI_WCHAR
public CV_int CV_RI_UINT1
public CV_int CV_RI_INT2
public CV_int CV_RI_UINT2
public CV_int CV_RI_INT4
public CV_int CV_RI_UINT4
public CV_int CV_RI_INT8
public CV_int CV_RI_UINT8
public CV_int CV_RI_INT16
public CV_int CV_RI_UINT16
}
internal Microsoft.Cci.Pdb.CV_integral : Enum {
public int value__
public CV_integral CV_IN_1BYTE
public CV_integral CV_IN_2BYTE
public CV_integral CV_IN_4BYTE
public CV_integral CV_IN_8BYTE
public CV_integral CV_IN_16BYTE
}
internal Microsoft.Cci.Pdb.CV_LABEL_TYPE : Enum {
public int value__
public CV_LABEL_TYPE CV_LABEL_NEAR
public CV_LABEL_TYPE CV_LABEL_FAR
}
internal Microsoft.Cci.Pdb.CV_Line : ValueType {
internal UInt32 offset
internal UInt32 flags
}
internal Microsoft.Cci.Pdb.CV_Line_Flags : Enum {
public UInt32 value__
public CV_Line_Flags linenumStart
public CV_Line_Flags deltaLineEnd
public CV_Line_Flags fStatement
}
internal Microsoft.Cci.Pdb.CV_LINE_SUBSECTION_FLAGS : Enum {
public ushort value__
public CV_LINE_SUBSECTION_FLAGS CV_LINES_HAVE_COLUMNS
}
internal Microsoft.Cci.Pdb.CV_LineSection : ValueType {
internal UInt32 off
internal ushort sec
internal ushort flags
internal UInt32 cod
}
internal Microsoft.Cci.Pdb.CV_lvar_addr_range : ValueType {
internal UInt32 offStart
internal ushort isectStart
internal UInt32 cbRange
}
internal Microsoft.Cci.Pdb.CV_LVARFLAGS : Enum {
public ushort value__
public CV_LVARFLAGS fIsParam
public CV_LVARFLAGS fAddrTaken
public CV_LVARFLAGS fCompGenx
public CV_LVARFLAGS fIsAggregate
public CV_LVARFLAGS fIsAggregated
public CV_LVARFLAGS fIsAliased
public CV_LVARFLAGS fIsAlias
}
internal Microsoft.Cci.Pdb.CV_methodprop : Enum {
public int value__
public CV_methodprop CV_MTvanilla
public CV_methodprop CV_MTvirtual
public CV_methodprop CV_MTstatic
public CV_methodprop CV_MTfriend
public CV_methodprop CV_MTintro
public CV_methodprop CV_MTpurevirt
public CV_methodprop CV_MTpureintro
}
internal Microsoft.Cci.Pdb.CV_modifier : Enum {
public ushort value__
public CV_modifier MOD_const
public CV_modifier MOD_volatile
public CV_modifier MOD_unaligned
}
internal Microsoft.Cci.Pdb.CV_PDMR32_NVVFCN : ValueType {
internal int mdisp
}
internal Microsoft.Cci.Pdb.CV_PDMR32_VBASE : ValueType {
internal int mdisp
internal int pdisp
internal int vdisp
}
internal Microsoft.Cci.Pdb.CV_PMFR32_NVMA : ValueType {
internal UInt32 off
internal int disp
}
internal Microsoft.Cci.Pdb.CV_PMFR32_NVSA : ValueType {
internal UInt32 off
}
internal Microsoft.Cci.Pdb.CV_PMFR32_VBASE : ValueType {
internal UInt32 off
internal int mdisp
internal int pdisp
internal int vdisp
}
internal Microsoft.Cci.Pdb.CV_pmtype : Enum {
public int value__
public CV_pmtype CV_PMTYPE_Undef
public CV_pmtype CV_PMTYPE_D_Single
public CV_pmtype CV_PMTYPE_D_Multiple
public CV_pmtype CV_PMTYPE_D_Virtual
public CV_pmtype CV_PMTYPE_D_General
public CV_pmtype CV_PMTYPE_F_Single
public CV_pmtype CV_PMTYPE_F_Multiple
public CV_pmtype CV_PMTYPE_F_Virtual
public CV_pmtype CV_PMTYPE_F_General
}
internal Microsoft.Cci.Pdb.CV_PRIMITIVE_TYPE : ValueType {
private UInt32 CV_MMASK
private UInt32 CV_TMASK
private UInt32 CV_SMASK
private int CV_MSHIFT
private int CV_TSHIFT
private int CV_SSHIFT
private UInt32 CV_FIRST_NONPRIM
}
internal Microsoft.Cci.Pdb.CV_prmode : Enum {
public int value__
public CV_prmode CV_TM_DIRECT
public CV_prmode CV_TM_NPTR32
public CV_prmode CV_TM_NPTR64
public CV_prmode CV_TM_NPTR128
}
internal Microsoft.Cci.Pdb.CV_PROCFLAGS : Enum {
public byte value__
public CV_PROCFLAGS CV_PFLAG_NOFPO
public CV_PROCFLAGS CV_PFLAG_INT
public CV_PROCFLAGS CV_PFLAG_FAR
public CV_PROCFLAGS CV_PFLAG_NEVER
public CV_PROCFLAGS CV_PFLAG_NOTREACHED
public CV_PROCFLAGS CV_PFLAG_CUST_CALL
public CV_PROCFLAGS CV_PFLAG_NOINLINE
public CV_PROCFLAGS CV_PFLAG_OPTDBGINFO
}
internal Microsoft.Cci.Pdb.CV_prop : Enum {
public ushort value__
public CV_prop packed
public CV_prop ctor
public CV_prop ovlops
public CV_prop isnested
public CV_prop cnested
public CV_prop opassign
public CV_prop opcast
public CV_prop fwdref
public CV_prop scoped
}
internal Microsoft.Cci.Pdb.CV_ptrmode : Enum {
public int value__
public CV_ptrmode CV_PTR_MODE_PTR
public CV_ptrmode CV_PTR_MODE_REF
public CV_ptrmode CV_PTR_MODE_PMEM
public CV_ptrmode CV_PTR_MODE_PMFUNC
public CV_ptrmode CV_PTR_MODE_RESERVED
}
internal Microsoft.Cci.Pdb.CV_ptrtype : Enum {
public int value__
public CV_ptrtype CV_PTR_BASE_SEG
public CV_ptrtype CV_PTR_BASE_VAL
public CV_ptrtype CV_PTR_BASE_SEGVAL
public CV_ptrtype CV_PTR_BASE_ADDR
public CV_ptrtype CV_PTR_BASE_SEGADDR
public CV_ptrtype CV_PTR_BASE_TYPE
public CV_ptrtype CV_PTR_BASE_SELF
public CV_ptrtype CV_PTR_NEAR32
public CV_ptrtype CV_PTR_64
public CV_ptrtype CV_PTR_UNUSEDPTR
}
internal Microsoft.Cci.Pdb.CV_PUBSYMFLAGS : Enum {
public UInt32 value__
public CV_PUBSYMFLAGS fNone
public CV_PUBSYMFLAGS fCode
public CV_PUBSYMFLAGS fFunction
public CV_PUBSYMFLAGS fManaged
public CV_PUBSYMFLAGS fMSIL
}
internal Microsoft.Cci.Pdb.CV_real : Enum {
public int value__
public CV_real CV_RC_REAL32
public CV_real CV_RC_REAL64
public CV_real CV_RC_REAL80
public CV_real CV_RC_REAL128
}
internal Microsoft.Cci.Pdb.CV_SEPCODEFLAGS : Enum {
public UInt32 value__
public CV_SEPCODEFLAGS fIsLexicalScope
public CV_SEPCODEFLAGS fReturnsToParent
}
internal Microsoft.Cci.Pdb.CV_SIGNATURE : Enum {
public int value__
public CV_SIGNATURE C6
public CV_SIGNATURE C7
public CV_SIGNATURE C11
public CV_SIGNATURE C13
public CV_SIGNATURE RESERVERD
}
internal Microsoft.Cci.Pdb.CV_SourceFile : ValueType {
internal UInt32 index
internal UInt32 count
internal UInt32 linsiz
}
internal Microsoft.Cci.Pdb.CV_special : Enum {
public int value__
public CV_special CV_SP_NOTYPE
public CV_special CV_SP_ABS
public CV_special CV_SP_SEGMENT
public CV_special CV_SP_VOID
public CV_special CV_SP_CURRENCY
public CV_special CV_SP_NBASICSTR
public CV_special CV_SP_FBASICSTR
public CV_special CV_SP_NOTTRANS
public CV_special CV_SP_HRESULT
}
internal Microsoft.Cci.Pdb.CV_special2 : Enum {
public int value__
public CV_special2 CV_S2_BIT
public CV_special2 CV_S2_PASCHAR
}
internal Microsoft.Cci.Pdb.CV_type : Enum {
public int value__
public CV_type CV_SPECIAL
public CV_type CV_SIGNED
public CV_type CV_UNSIGNED
public CV_type CV_BOOLEAN
public CV_type CV_REAL
public CV_type CV_COMPLEX
public CV_type CV_SPECIAL2
public CV_type CV_INT
public CV_type CV_CVRESERVED
}
internal Microsoft.Cci.Pdb.CV_VTS_desc : Enum {
public int value__
public CV_VTS_desc CV_VTS_near
public CV_VTS_desc CV_VTS_far
public CV_VTS_desc CV_VTS_thin
public CV_VTS_desc CV_VTS_outer
public CV_VTS_desc CV_VTS_meta
public CV_VTS_desc CV_VTS_near32
public CV_VTS_desc CV_VTS_far32
public CV_VTS_desc CV_VTS_unused
}
internal Microsoft.Cci.Pdb.DatasSym32 : ValueType {
internal UInt32 typind
internal UInt32 off
internal ushort seg
internal string name
}
internal Microsoft.Cci.Pdb.DataStream : object {
internal int contentSize
internal Int32[] pages
internal int Length
internal void .ctor(int contentSize, BitAccess bits, int count)
internal void Read(PdbReader reader, BitAccess bits)
internal void Read(PdbReader reader, int position, Byte[] bytes, int offset, int data)
internal int get_Length()
}
internal Microsoft.Cci.Pdb.DbiDbgHdr : ValueType {
internal ushort snFPO
internal ushort snException
internal ushort snFixup
internal ushort snOmapToSrc
internal ushort snOmapFromSrc
internal ushort snSectionHdr
internal ushort snTokenRidMap
internal ushort snXdata
internal ushort snPdata
internal ushort snNewFPO
internal ushort snSectionHdrOrig
internal void .ctor(BitAccess bits)
}
internal Microsoft.Cci.Pdb.DbiHeader : ValueType {
internal int sig
internal int ver
internal int age
internal short gssymStream
internal ushort vers
internal short pssymStream
internal ushort pdbver
internal short symrecStream
internal ushort pdbver2
internal int gpmodiSize
internal int secconSize
internal int secmapSize
internal int filinfSize
internal int tsmapSize
internal int mfcIndex
internal int dbghdrSize
internal int ecinfoSize
internal ushort flags
internal ushort machine
internal int reserved
internal void .ctor(BitAccess bits)
}
internal Microsoft.Cci.Pdb.DbiModuleInfo : object {
internal int opened
internal ushort flags
internal short stream
internal int cbSyms
internal int cbOldLines
internal int cbLines
internal short files
internal short pad1
internal UInt32 offsets
internal int niSource
internal int niCompiler
internal string moduleName
internal string objectName
internal void .ctor(BitAccess bits, bool readStrings)
}
internal Microsoft.Cci.Pdb.DbiSecCon : ValueType {
internal short section
internal short pad1
internal int offset
internal int size
internal UInt32 flags
internal short module
internal short pad2
internal UInt32 dataCrc
internal UInt32 relocCrc
internal void .ctor(BitAccess bits)
}
internal Microsoft.Cci.Pdb.DEBUG_S_SUBSECTION : Enum {
public int value__
public DEBUG_S_SUBSECTION SYMBOLS
public DEBUG_S_SUBSECTION LINES
public DEBUG_S_SUBSECTION STRINGTABLE
public DEBUG_S_SUBSECTION FILECHKSMS
public DEBUG_S_SUBSECTION FRAMEDATA
}
internal Microsoft.Cci.Pdb.DEBUG_S_SUBSECTION_TYPE : Enum {
public UInt32 value__
public DEBUG_S_SUBSECTION_TYPE DEBUG_S_IGNORE
public DEBUG_S_SUBSECTION_TYPE DEBUG_S_SYMBOLS
public DEBUG_S_SUBSECTION_TYPE DEBUG_S_LINES
public DEBUG_S_SUBSECTION_TYPE DEBUG_S_STRINGTABLE
public DEBUG_S_SUBSECTION_TYPE DEBUG_S_FILECHKSMS
public DEBUG_S_SUBSECTION_TYPE DEBUG_S_FRAMEDATA
}
internal Microsoft.Cci.Pdb.DefRangeSym : ValueType {
internal UInt32 id
internal UInt32 program
internal CV_lvar_addr_range range
}
internal Microsoft.Cci.Pdb.DefRangeSym2 : ValueType {
internal UInt32 id
internal UInt32 program
internal ushort count
internal CV_lvar_addr_range[] range
}
internal Microsoft.Cci.Pdb.DiscardedSym : ValueType {
internal CV_DISCARDED iscarded
internal UInt32 fileid
internal UInt32 linenum
internal Byte[] data
}
internal Microsoft.Cci.Pdb.EntryThisSym : ValueType {
internal byte thissym
}
internal Microsoft.Cci.Pdb.ExportSym : ValueType {
internal ushort ordinal
internal ushort flags
internal string name
}
internal Microsoft.Cci.Pdb.EXPORTSYM_FLAGS : Enum {
public ushort value__
public EXPORTSYM_FLAGS fConstant
public EXPORTSYM_FLAGS fData
public EXPORTSYM_FLAGS fPrivate
public EXPORTSYM_FLAGS fNoName
public EXPORTSYM_FLAGS fOrdinal
public EXPORTSYM_FLAGS fForwarder
}
internal Microsoft.Cci.Pdb.FLOAT10 : ValueType {
internal byte Data_0
internal byte Data_1
internal byte Data_2
internal byte Data_3
internal byte Data_4
internal byte Data_5
internal byte Data_6
internal byte Data_7
internal byte Data_8
internal byte Data_9
}
internal Microsoft.Cci.Pdb.FrameCookie : ValueType {
internal int off
internal ushort reg
internal int cookietype
internal byte flags
}
internal Microsoft.Cci.Pdb.FrameData : ValueType {
internal UInt32 ulRvaStart
internal UInt32 cbBlock
internal UInt32 cbLocals
internal UInt32 cbParams
internal UInt32 cbStkMax
internal UInt32 frameFunc
internal ushort cbProlog
internal ushort cbSavedRegs
internal UInt32 flags
}
internal Microsoft.Cci.Pdb.FRAMEDATA_FLAGS : Enum {
public UInt32 value__
public FRAMEDATA_FLAGS fHasSEH
public FRAMEDATA_FLAGS fHasEH
public FRAMEDATA_FLAGS fIsFunctionStart
}
internal Microsoft.Cci.Pdb.FrameProcSym : ValueType {
internal UInt32 cbFrame
internal UInt32 cbPad
internal UInt32 offPad
internal UInt32 cbSaveRegs
internal UInt32 offExHdlr
internal ushort secExHdlr
internal UInt32 flags
}
internal Microsoft.Cci.Pdb.FRAMEPROCSYM_FLAGS : Enum {
public UInt32 value__
public FRAMEPROCSYM_FLAGS fHasAlloca
public FRAMEPROCSYM_FLAGS fHasSetJmp
public FRAMEPROCSYM_FLAGS fHasLongJmp
public FRAMEPROCSYM_FLAGS fHasInlAsm
public FRAMEPROCSYM_FLAGS fHasEH
public FRAMEPROCSYM_FLAGS fInlSpec
public FRAMEPROCSYM_FLAGS fHasSEH
public FRAMEPROCSYM_FLAGS fNaked
public FRAMEPROCSYM_FLAGS fSecurityChecks
public FRAMEPROCSYM_FLAGS fAsyncEH
public FRAMEPROCSYM_FLAGS fGSNoStackOrdering
public FRAMEPROCSYM_FLAGS fWasInlined
}
internal Microsoft.Cci.Pdb.FrameRelSym : ValueType {
internal int off
internal UInt32 typind
internal UInt32 offCod
internal ushort segCod
internal ushort flags
internal string name
}
internal Microsoft.Cci.Pdb.IntHashTable : object {
private Int32[] primes
private bucket[] buckets
private int count
private int occupancy
private int loadsize
private int loadFactorPerc
private int version
internal object Item
private int GetPrime(int minSize)
internal void .ctor(int capacity, int loadFactorPerc)
private UInt32 InitHash(int key, int hashsize, UInt32& seed, UInt32& incr)
internal void Add(int key, object value)
internal object get_Item(int key)
private void expand()
private void rehash()
private void rehash(int newsize)
private void Insert(int key, object nvalue, bool add)
private void putEntry(bucket[] newBuckets, int key, object nvalue, int hashcode)
}
internal Microsoft.Cci.Pdb.LabelSym32 : ValueType {
internal UInt32 off
internal ushort seg
internal byte flags
internal string name
}
internal Microsoft.Cci.Pdb.LEAF : Enum {
public int value__
public LEAF LF_VTSHAPE
public LEAF LF_COBOL1
public LEAF LF_LABEL
public LEAF LF_NULL
public LEAF LF_NOTTRAN
public LEAF LF_ENDPRECOMP
public LEAF LF_TYPESERVER_ST
public LEAF LF_LIST
public LEAF LF_REFSYM
public LEAF LF_ENUMERATE_ST
public LEAF LF_TI16_MAX
public LEAF LF_MODIFIER
public LEAF LF_POINTER
public LEAF LF_ARRAY_ST
public LEAF LF_CLASS_ST
public LEAF LF_STRUCTURE_ST
public LEAF LF_UNION_ST
public LEAF LF_ENUM_ST
public LEAF LF_PROCEDURE
public LEAF LF_MFUNCTION
public LEAF LF_COBOL0
public LEAF LF_BARRAY
public LEAF LF_DIMARRAY_ST
public LEAF LF_VFTPATH
public LEAF LF_PRECOMP_ST
public LEAF LF_OEM
public LEAF LF_ALIAS_ST
public LEAF LF_OEM2
public LEAF LF_SKIP
public LEAF LF_ARGLIST
public LEAF LF_DEFARG_ST
public LEAF LF_FIELDLIST
public LEAF LF_DERIVED
public LEAF LF_BITFIELD
public LEAF LF_METHODLIST
public LEAF LF_DIMCONU
public LEAF LF_DIMCONLU
public LEAF LF_DIMVARU
public LEAF LF_DIMVARLU
public LEAF LF_BCLASS
public LEAF LF_VBCLASS
public LEAF LF_IVBCLASS
public LEAF LF_FRIENDFCN_ST
public LEAF LF_INDEX
public LEAF LF_MEMBER_ST
public LEAF LF_STMEMBER_ST
public LEAF LF_METHOD_ST
public LEAF LF_NESTTYPE_ST
public LEAF LF_VFUNCTAB
public LEAF LF_FRIENDCLS
public LEAF LF_ONEMETHOD_ST
public LEAF LF_VFUNCOFF
public LEAF LF_NESTTYPEEX_ST
public LEAF LF_MEMBERMODIFY_ST
public LEAF LF_MANAGED_ST
public LEAF LF_ST_MAX
public LEAF LF_TYPESERVER
public LEAF LF_ENUMERATE
public LEAF LF_ARRAY
public LEAF LF_CLASS
public LEAF LF_STRUCTURE
public LEAF LF_UNION
public LEAF LF_ENUM
public LEAF LF_DIMARRAY
public LEAF LF_PRECOMP
public LEAF LF_ALIAS
public LEAF LF_DEFARG
public LEAF LF_FRIENDFCN
public LEAF LF_MEMBER
public LEAF LF_STMEMBER
public LEAF LF_METHOD
public LEAF LF_NESTTYPE
public LEAF LF_ONEMETHOD
public LEAF LF_NESTTYPEEX
public LEAF LF_MEMBERMODIFY
public LEAF LF_MANAGED
public LEAF LF_TYPESERVER2
public LEAF LF_NUMERIC
public LEAF LF_CHAR
public LEAF LF_SHORT
public LEAF LF_USHORT
public LEAF LF_LONG
public LEAF LF_ULONG
public LEAF LF_REAL32
public LEAF LF_REAL64
public LEAF LF_REAL80
public LEAF LF_REAL128
public LEAF LF_QUADWORD
public LEAF LF_UQUADWORD
public LEAF LF_COMPLEX32
public LEAF LF_COMPLEX64
public LEAF LF_COMPLEX80
public LEAF LF_COMPLEX128
public LEAF LF_VARSTRING
public LEAF LF_OCTWORD
public LEAF LF_UOCTWORD
public LEAF LF_DECIMAL
public LEAF LF_DATE
public LEAF LF_UTF8STRING
public LEAF LF_PAD0
public LEAF LF_PAD1
public LEAF LF_PAD2
public LEAF LF_PAD3
public LEAF LF_PAD4
public LEAF LF_PAD5
public LEAF LF_PAD6
public LEAF LF_PAD7
public LEAF LF_PAD8
public LEAF LF_PAD9
public LEAF LF_PAD10
public LEAF LF_PAD11
public LEAF LF_PAD12
public LEAF LF_PAD13
public LEAF LF_PAD14
public LEAF LF_PAD15
}
internal Microsoft.Cci.Pdb.LeafAlias : ValueType {
internal UInt32 utype
internal string name
}
internal Microsoft.Cci.Pdb.LeafArgList : ValueType {
internal UInt32 count
internal UInt32[] arg
}
internal Microsoft.Cci.Pdb.LeafArray : ValueType {
internal UInt32 elemtype
internal UInt32 idxtype
internal Byte[] data
internal string name
}
internal Microsoft.Cci.Pdb.LeafBArray : ValueType {
internal UInt32 utype
}
internal Microsoft.Cci.Pdb.LeafBClass : ValueType {
internal ushort attr
internal UInt32 index
internal Byte[] offset
}
internal Microsoft.Cci.Pdb.LeafBitfield : ValueType {
internal UInt32 type
internal byte length
internal byte position
}
internal Microsoft.Cci.Pdb.LeafChar : ValueType {
internal sbyte val
}
internal Microsoft.Cci.Pdb.LeafClass : ValueType {
internal ushort count
internal ushort property
internal UInt32 field
internal UInt32 derived
internal UInt32 vshape
internal Byte[] data
internal string name
}
internal Microsoft.Cci.Pdb.LeafCmplx128 : ValueType {
internal ulong val0_real
internal ulong val1_real
internal ulong val0_imag
internal ulong val1_imag
}
internal Microsoft.Cci.Pdb.LeafCmplx32 : ValueType {
internal float val_real
internal float val_imag
}
internal Microsoft.Cci.Pdb.LeafCmplx64 : ValueType {
internal double val_real
internal double val_imag
}
internal Microsoft.Cci.Pdb.LeafCmplx80 : ValueType {
internal FLOAT10 val_real
internal FLOAT10 val_imag
}
internal Microsoft.Cci.Pdb.LeafCobol0 : ValueType {
internal UInt32 type
internal Byte[] data
}
internal Microsoft.Cci.Pdb.LeafCobol1 : ValueType {
internal Byte[] data
}
internal Microsoft.Cci.Pdb.LeafDefArg : ValueType {
internal UInt32 type
internal Byte[] expr
}
internal Microsoft.Cci.Pdb.LeafDerived : ValueType {
internal UInt32 count
internal UInt32[] drvdcls
}
internal Microsoft.Cci.Pdb.LeafDimArray : ValueType {
internal UInt32 utype
internal UInt32 diminfo
internal string name
}
internal Microsoft.Cci.Pdb.LeafDimCon : ValueType {
internal UInt32 typ
internal ushort rank
internal Byte[] dim
}
internal Microsoft.Cci.Pdb.LeafDimVar : ValueType {
internal UInt32 rank
internal UInt32 typ
internal UInt32[] dim
}
internal Microsoft.Cci.Pdb.LeafEndPreComp : ValueType {
internal UInt32 signature
}
internal Microsoft.Cci.Pdb.LeafEnum : ValueType {
internal ushort count
internal ushort property
internal UInt32 utype
internal UInt32 field
internal string name
}
internal Microsoft.Cci.Pdb.LeafEnumerate : ValueType {
internal ushort attr
internal Byte[] value
internal string name
}
internal Microsoft.Cci.Pdb.LeafFieldList : ValueType {
internal Char[] data
}
internal Microsoft.Cci.Pdb.LeafFriendCls : ValueType {
internal ushort pad0
internal UInt32 index
}
internal Microsoft.Cci.Pdb.LeafFriendFcn : ValueType {
internal ushort pad0
internal UInt32 index
internal string name
}
internal Microsoft.Cci.Pdb.LeafIndex : ValueType {
internal ushort pad0
internal UInt32 index
}
internal Microsoft.Cci.Pdb.LeafLabel : ValueType {
internal ushort mode
}
internal Microsoft.Cci.Pdb.LeafList : ValueType {
internal Byte[] data
}
internal Microsoft.Cci.Pdb.LeafLong : ValueType {
internal int val
}
internal Microsoft.Cci.Pdb.LeafManaged : ValueType {
internal string name
}
internal Microsoft.Cci.Pdb.LeafMember : ValueType {
internal ushort attr
internal UInt32 index
internal Byte[] offset
internal string name
}
internal Microsoft.Cci.Pdb.LeafMemberModify : ValueType {
internal ushort attr
internal UInt32 index
internal string name
}
internal Microsoft.Cci.Pdb.LeafMethod : ValueType {
internal ushort count
internal UInt32 mList
internal string name
}
internal Microsoft.Cci.Pdb.LeafMethodList : ValueType {
internal Byte[] mList
}
internal Microsoft.Cci.Pdb.LeafMFunc : ValueType {
internal UInt32 rvtype
internal UInt32 classtype
internal UInt32 thistype
internal byte calltype
internal byte reserved
internal ushort parmcount
internal UInt32 arglist
internal int thisadjust
}
internal Microsoft.Cci.Pdb.LeafModifier : ValueType {
internal UInt32 type
internal CV_modifier attr
}
internal Microsoft.Cci.Pdb.LeafNestType : ValueType {
internal ushort pad0
internal UInt32 index
internal string name
}
internal Microsoft.Cci.Pdb.LeafNestTypeEx : ValueType {
internal ushort attr
internal UInt32 index
internal string name
}
internal Microsoft.Cci.Pdb.LeafOct : ValueType {
internal ulong val0
internal ulong val1
}
internal Microsoft.Cci.Pdb.LeafOEM : ValueType {
internal ushort cvOEM
internal ushort recOEM
internal UInt32 count
internal UInt32[] index
}
internal Microsoft.Cci.Pdb.LeafOEM2 : ValueType {
internal Guid idOem
internal UInt32 count
internal UInt32[] index
}
internal Microsoft.Cci.Pdb.LeafOneMethod : ValueType {
internal ushort attr
internal UInt32 index
internal UInt32[] vbaseoff
internal string name
}
internal Microsoft.Cci.Pdb.LeafPad : ValueType {
internal byte leaf
}
internal Microsoft.Cci.Pdb.LeafPointerAttr : Enum {
public UInt32 value__
public LeafPointerAttr ptrtype
public LeafPointerAttr ptrmode
public LeafPointerAttr isflat32
public LeafPointerAttr isvolatile
public LeafPointerAttr isconst
public LeafPointerAttr isunaligned
public LeafPointerAttr isrestrict
}
internal Microsoft.Cci.Pdb.LeafPreComp : ValueType {
internal UInt32 start
internal UInt32 count
internal UInt32 signature
internal string name
}
internal Microsoft.Cci.Pdb.LeafProc : ValueType {
internal UInt32 rvtype
internal byte calltype
internal byte reserved
internal ushort parmcount
internal UInt32 arglist
}
internal Microsoft.Cci.Pdb.LeafQuad : ValueType {
internal long val
}
internal Microsoft.Cci.Pdb.LeafReal128 : ValueType {
internal ulong val0
internal ulong val1
}
internal Microsoft.Cci.Pdb.LeafReal32 : ValueType {
internal float val
}
internal Microsoft.Cci.Pdb.LeafReal64 : ValueType {
internal double val
}
internal Microsoft.Cci.Pdb.LeafReal80 : ValueType {
internal FLOAT10 val
}
internal Microsoft.Cci.Pdb.LeafRefSym : ValueType {
internal Byte[] Sym
}
internal Microsoft.Cci.Pdb.LeafShort : ValueType {
internal short val
}
internal Microsoft.Cci.Pdb.LeafSkip : ValueType {
internal UInt32 type
internal Byte[] data
}
internal Microsoft.Cci.Pdb.LeafSTMember : ValueType {
internal ushort attr
internal UInt32 index
internal string name
}
internal Microsoft.Cci.Pdb.LeafTypeServer : ValueType {
internal UInt32 signature
internal UInt32 age
internal string name
}
internal Microsoft.Cci.Pdb.LeafTypeServer2 : ValueType {
internal Guid sig70
internal UInt32 age
internal string name
}
internal Microsoft.Cci.Pdb.LeafULong : ValueType {
internal UInt32 val
}
internal Microsoft.Cci.Pdb.LeafUnion : ValueType {
internal ushort count
internal ushort property
internal UInt32 field
internal Byte[] data
internal string name
}
internal Microsoft.Cci.Pdb.LeafUOct : ValueType {
internal ulong val0
internal ulong val1
}
internal Microsoft.Cci.Pdb.LeafUQuad : ValueType {
internal ulong val
}
internal Microsoft.Cci.Pdb.LeafUShort : ValueType {
internal ushort val
}
internal Microsoft.Cci.Pdb.LeafVarString : ValueType {
internal ushort len
internal Byte[] value
}
internal Microsoft.Cci.Pdb.LeafVBClass : ValueType {
internal ushort attr
internal UInt32 index
internal UInt32 vbptr
internal Byte[] vbpoff
}
internal Microsoft.Cci.Pdb.LeafVFTPath : ValueType {
internal UInt32 count
internal UInt32[] bases
}
internal Microsoft.Cci.Pdb.LeafVFuncOff : ValueType {
internal ushort pad0
internal UInt32 type
internal int offset
}
internal Microsoft.Cci.Pdb.LeafVFuncTab : ValueType {
internal ushort pad0
internal UInt32 type
}
internal Microsoft.Cci.Pdb.LeafVTShape : ValueType {
internal ushort count
internal Byte[] desc
}
internal Microsoft.Cci.Pdb.LocalSym : ValueType {
internal UInt32 id
internal UInt32 typind
internal ushort flags
internal UInt32 idParent
internal UInt32 offParent
internal UInt32 expr
internal UInt32 pad0
internal UInt32 pad1
internal string name
}
internal Microsoft.Cci.Pdb.ManProcSym : ValueType {
internal UInt32 parent
internal UInt32 end
internal UInt32 next
internal UInt32 len
internal UInt32 dbgStart
internal UInt32 dbgEnd
internal UInt32 token
internal UInt32 off
internal ushort seg
internal byte flags
internal ushort retReg
internal string name
}
internal Microsoft.Cci.Pdb.ManProcSymMips : ValueType {
internal UInt32 parent
internal UInt32 end
internal UInt32 next
internal UInt32 len
internal UInt32 dbgStart
internal UInt32 dbgEnd
internal UInt32 regSave
internal UInt32 fpSave
internal UInt32 intOff
internal UInt32 fpOff
internal UInt32 token
internal UInt32 off
internal ushort seg
internal byte retReg
internal byte frameReg
internal string name
}
internal Microsoft.Cci.Pdb.ManyRegSym : ValueType {
internal UInt32 typind
internal byte count
internal Byte[] reg
internal string name
}
internal Microsoft.Cci.Pdb.ManyRegSym2 : ValueType {
internal UInt32 typind
internal ushort count
internal UInt16[] reg
internal string name
}
internal Microsoft.Cci.Pdb.ManyTypRef : ValueType {
internal UInt32 typind
}
internal Microsoft.Cci.Pdb.mlMethod : ValueType {
internal ushort attr
internal ushort pad0
internal UInt32 index
internal UInt32[] vbaseoff
}
internal Microsoft.Cci.Pdb.MsfDirectory : object {
internal DataStream[] streams
internal void .ctor(PdbReader reader, PdbFileHeader head, BitAccess bits)
}
internal Microsoft.Cci.Pdb.ObjNameSym : ValueType {
internal UInt32 signature
internal string name
}
internal Microsoft.Cci.Pdb.OEM_ID : Enum {
public int value__
public OEM_ID OEM_MS_FORTRAN90
public OEM_ID OEM_ODI
public OEM_ID OEM_THOMSON_SOFTWARE
public OEM_ID OEM_ODI_REC_BASELIST
}
internal Microsoft.Cci.Pdb.OemSymbol : ValueType {
internal Guid idOem
internal UInt32 typind
internal Byte[] rgl
}
internal Microsoft.Cci.Pdb.PdbConstant : object {
internal string name
internal UInt32 token
internal object value
internal void .ctor(BitAccess bits)
}
internal Microsoft.Cci.Pdb.PdbDebugException : IOException {
internal void .ctor(string format, Object[] args)
}
internal Microsoft.Cci.Pdb.PdbException : IOException {
internal void .ctor(string format, Object[] args)
}
internal Microsoft.Cci.Pdb.PdbFile : object {
private void LoadGuidStream(BitAccess bits, Guid& doctype, Guid& language, Guid& vendor)
private Dictionary`2<string, int> LoadNameIndex(BitAccess bits, Int32& age, Guid& guid)
private IntHashTable LoadNameStream(BitAccess bits)
private int FindFunction(PdbFunction[] funcs, ushort sec, UInt32 off)
private void LoadManagedLines(PdbFunction[] funcs, IntHashTable names, BitAccess bits, MsfDirectory dir, Dictionary`2<string, int> nameIndex, PdbReader reader, UInt32 limit)
private void LoadFuncsFromDbiModule(BitAccess bits, DbiModuleInfo info, IntHashTable names, ArrayList funcList, bool readStrings, MsfDirectory dir, Dictionary`2<string, int> nameIndex, PdbReader reader)
private void LoadDbiStream(BitAccess bits, DbiModuleInfo[]& modules, DbiDbgHdr& header, bool readStrings)
internal PdbFunction[] LoadFunctions(Stream read, Dictionary`2& tokenToSourceMapping, String& sourceServerData, Int32& age, Guid& guid)
private void LoadTokenToSourceInfo(BitAccess bits, DbiModuleInfo module, IntHashTable names, MsfDirectory dir, Dictionary`2<string, int> nameIndex, PdbReader reader, Dictionary`2<UInt32, PdbTokenLine> tokenToSourceMapping)
private IntHashTable ReadSourceFileInfo(BitAccess bits, UInt32 limit, IntHashTable names, MsfDirectory dir, Dictionary`2<string, int> nameIndex, PdbReader reader)
}
internal Microsoft.Cci.Pdb.PdbFileHeader : object {
internal Byte[] magic
internal int pageSize
internal int freePageMap
internal int pagesUsed
internal int directorySize
internal int zero
internal Int32[] directoryRoot
internal void .ctor(Stream reader, BitAccess bits)
}
internal Microsoft.Cci.Pdb.PdbFunction : object {
internal Guid msilMetaData
internal IComparer byAddress
internal IComparer byAddressAndToken
internal UInt32 token
internal UInt32 slotToken
internal UInt32 tokenOfMethodWhoseUsingInfoAppliesToThisMethod
internal UInt32 segment
internal UInt32 address
internal PdbScope[] scopes
internal PdbSlot[] slots
internal PdbConstant[] constants
internal String[] usedNamespaces
internal PdbLines[] lines
internal UInt16[] usingCounts
internal IEnumerable`1<INamespaceScope> namespaceScopes
internal string iteratorClass
internal List`1<ILocalScope> iteratorScopes
internal PdbSynchronizationInformation synchronizationInformation
private string StripNamespace(string module)
internal PdbFunction[] LoadManagedFunctions(BitAccess bits, UInt32 limit, bool readStrings)
internal void CountScopesAndSlots(BitAccess bits, UInt32 limit, Int32& constants, Int32& scopes, Int32& slots, Int32& usedNamespaces)
internal void .ctor(ManProcSym proc, BitAccess bits)
private void ReadCustomMetadata(BitAccess bits)
private void ReadForwardIterator(BitAccess bits)
private void ReadIteratorLocals(BitAccess bits)
private void ReadForwardInfo(BitAccess bits)
private void ReadUsingInfo(BitAccess bits)
}
internal Microsoft.Cci.Pdb.PdbLine : ValueType {
internal UInt32 offset
internal UInt32 lineBegin
internal UInt32 lineEnd
internal ushort colBegin
internal ushort colEnd
internal void .ctor(UInt32 offset, UInt32 lineBegin, ushort colBegin, UInt32 lineEnd, ushort colEnd)
}
internal Microsoft.Cci.Pdb.PdbLines : object {
internal PdbSource file
internal PdbLine[] lines
internal void .ctor(PdbSource file, UInt32 count)
}
internal Microsoft.Cci.Pdb.PdbReader : object {
internal int pageSize
internal Stream reader
internal void .ctor(Stream reader, int pageSize)
internal void Seek(int page, int offset)
internal void Read(Byte[] bytes, int offset, int count)
internal int PagesFromSize(int size)
}
internal Microsoft.Cci.Pdb.PdbScope : object {
internal PdbConstant[] constants
internal PdbSlot[] slots
internal PdbScope[] scopes
internal String[] usedNamespaces
internal UInt32 address
internal UInt32 offset
internal UInt32 length
internal void .ctor(UInt32 address, UInt32 length, PdbSlot[] slots, PdbConstant[] constants, String[] usedNamespaces)
internal void .ctor(UInt32 funcOffset, BlockSym32 block, BitAccess bits, UInt32& typind)
}
internal Microsoft.Cci.Pdb.PdbSlot : object {
internal UInt32 slot
internal UInt32 typeToken
internal string name
internal ushort flags
internal void .ctor(BitAccess bits)
}
internal Microsoft.Cci.Pdb.PdbSource : object {
internal string name
internal Guid doctype
internal Guid language
internal Guid vendor
internal void .ctor(string name, Guid doctype, Guid language, Guid vendor)
}
internal Microsoft.Cci.Pdb.PdbSynchronizationInformation : object {
internal UInt32 kickoffMethodToken
internal UInt32 generatedCatchHandlerIlOffset
internal PdbSynchronizationPoint[] synchronizationPoints
public UInt32 GeneratedCatchHandlerOffset
internal void .ctor(BitAccess bits)
public UInt32 get_GeneratedCatchHandlerOffset()
}
internal Microsoft.Cci.Pdb.PdbSynchronizationPoint : object {
internal UInt32 synchronizeOffset
internal UInt32 continuationMethodToken
internal UInt32 continuationOffset
public UInt32 SynchronizeOffset
public UInt32 ContinuationOffset
internal void .ctor(BitAccess bits)
public UInt32 get_SynchronizeOffset()
public UInt32 get_ContinuationOffset()
}
internal Microsoft.Cci.Pdb.PdbTokenLine : object {
internal UInt32 token
internal UInt32 file_id
internal UInt32 line
internal UInt32 column
internal UInt32 endLine
internal UInt32 endColumn
internal PdbSource sourceFile
internal PdbTokenLine nextLine
internal void .ctor(UInt32 token, UInt32 file_id, UInt32 line, UInt32 column, UInt32 endLine, UInt32 endColumn)
}
internal Microsoft.Cci.Pdb.ProcSym32 : ValueType {
internal UInt32 parent
internal UInt32 end
internal UInt32 next
internal UInt32 len
internal UInt32 dbgStart
internal UInt32 dbgEnd
internal UInt32 typind
internal UInt32 off
internal ushort seg
internal byte flags
internal string name
}
internal Microsoft.Cci.Pdb.ProcSymIa64 : ValueType {
internal UInt32 parent
internal UInt32 end
internal UInt32 next
internal UInt32 len
internal UInt32 dbgStart
internal UInt32 dbgEnd
internal UInt32 typind
internal UInt32 off
internal ushort seg
internal ushort retReg
internal byte flags
internal string name
}
internal Microsoft.Cci.Pdb.ProcSymMips : ValueType {
internal UInt32 parent
internal UInt32 end
internal UInt32 next
internal UInt32 len
internal UInt32 dbgStart
internal UInt32 dbgEnd
internal UInt32 regSave
internal UInt32 fpSave
internal UInt32 intOff
internal UInt32 fpOff
internal UInt32 typind
internal UInt32 off
internal ushort seg
internal byte retReg
internal byte frameReg
internal string name
}
internal Microsoft.Cci.Pdb.PubSym32 : ValueType {
internal UInt32 flags
internal UInt32 off
internal ushort seg
internal string name
}
internal Microsoft.Cci.Pdb.RefSym : ValueType {
internal UInt32 sumName
internal UInt32 ibSym
internal ushort imod
internal ushort usFill
}
internal Microsoft.Cci.Pdb.RefSym2 : ValueType {
internal UInt32 sumName
internal UInt32 ibSym
internal ushort imod
internal string name
}
internal Microsoft.Cci.Pdb.RegRel32 : ValueType {
internal UInt32 off
internal UInt32 typind
internal ushort reg
internal string name
}
internal Microsoft.Cci.Pdb.RegSym : ValueType {
internal UInt32 typind
internal ushort reg
internal string name
}
internal Microsoft.Cci.Pdb.ReturnSym : ValueType {
internal CV_GENERIC_FLAG flags
internal byte style
}
internal Microsoft.Cci.Pdb.SearchSym : ValueType {
internal UInt32 startsym
internal ushort seg
}
internal Microsoft.Cci.Pdb.SectionSym : ValueType {
internal ushort isec
internal byte align
internal byte bReserved
internal UInt32 rva
internal UInt32 cb
internal UInt32 characteristics
internal string name
}
internal Microsoft.Cci.Pdb.SepCodSym : ValueType {
internal UInt32 parent
internal UInt32 end
internal UInt32 length
internal UInt32 scf
internal UInt32 off
internal UInt32 offParent
internal ushort sec
internal ushort secParent
}
internal Microsoft.Cci.Pdb.Slink32 : ValueType {
internal UInt32 framesize
internal int off
internal ushort reg
}
internal Microsoft.Cci.Pdb.SlotSym32 : ValueType {
internal UInt32 index
internal UInt32 typind
internal string name
}
internal Microsoft.Cci.Pdb.SYM : Enum {
public int value__
public SYM S_END
public SYM S_OEM
public SYM S_REGISTER_ST
public SYM S_CONSTANT_ST
public SYM S_UDT_ST
public SYM S_COBOLUDT_ST
public SYM S_MANYREG_ST
public SYM S_BPREL32_ST
public SYM S_LDATA32_ST
public SYM S_GDATA32_ST
public SYM S_PUB32_ST
public SYM S_LPROC32_ST
public SYM S_GPROC32_ST
public SYM S_VFTABLE32
public SYM S_REGREL32_ST
public SYM S_LTHREAD32_ST
public SYM S_GTHREAD32_ST
public SYM S_LPROCMIPS_ST
public SYM S_GPROCMIPS_ST
public SYM S_FRAMEPROC
public SYM S_COMPILE2_ST
public SYM S_MANYREG2_ST
public SYM S_LPROCIA64_ST
public SYM S_GPROCIA64_ST
public SYM S_LOCALSLOT_ST
public SYM S_PARAMSLOT_ST
public SYM S_ANNOTATION
public SYM S_GMANPROC_ST
public SYM S_LMANPROC_ST
public SYM S_RESERVED1
public SYM S_RESERVED2
public SYM S_RESERVED3
public SYM S_RESERVED4
public SYM S_LMANDATA_ST
public SYM S_GMANDATA_ST
public SYM S_MANFRAMEREL_ST
public SYM S_MANREGISTER_ST
public SYM S_MANSLOT_ST
public SYM S_MANMANYREG_ST
public SYM S_MANREGREL_ST
public SYM S_MANMANYREG2_ST
public SYM S_MANTYPREF
public SYM S_UNAMESPACE_ST
public SYM S_ST_MAX
public SYM S_OBJNAME
public SYM S_THUNK32
public SYM S_BLOCK32
public SYM S_WITH32
public SYM S_LABEL32
public SYM S_REGISTER
public SYM S_CONSTANT
public SYM S_UDT
public SYM S_COBOLUDT
public SYM S_MANYREG
public SYM S_BPREL32
public SYM S_LDATA32
public SYM S_GDATA32
public SYM S_PUB32
public SYM S_LPROC32
public SYM S_GPROC32
public SYM S_REGREL32
public SYM S_LTHREAD32
public SYM S_GTHREAD32
public SYM S_LPROCMIPS
public SYM S_GPROCMIPS
public SYM S_COMPILE2
public SYM S_MANYREG2
public SYM S_LPROCIA64
public SYM S_GPROCIA64
public SYM S_LOCALSLOT
public SYM S_SLOT
public SYM S_PARAMSLOT
public SYM S_LMANDATA
public SYM S_GMANDATA
public SYM S_MANFRAMEREL
public SYM S_MANREGISTER
public SYM S_MANSLOT
public SYM S_MANMANYREG
public SYM S_MANREGREL
public SYM S_MANMANYREG2
public SYM S_UNAMESPACE
public SYM S_PROCREF
public SYM S_DATAREF
public SYM S_LPROCREF
public SYM S_ANNOTATIONREF
public SYM S_TOKENREF
public SYM S_GMANPROC
public SYM S_LMANPROC
public SYM S_TRAMPOLINE
public SYM S_MANCONSTANT
public SYM S_ATTR_FRAMEREL
public SYM S_ATTR_REGISTER
public SYM S_ATTR_REGREL
public SYM S_ATTR_MANYREG
public SYM S_SEPCODE
public SYM S_LOCAL
public SYM S_DEFRANGE
public SYM S_DEFRANGE2
public SYM S_SECTION
public SYM S_COFFGROUP
public SYM S_EXPORT
public SYM S_CALLSITEINFO
public SYM S_FRAMECOOKIE
public SYM S_DISCARDED
public SYM S_RECTYPE_MAX
public SYM S_RECTYPE_LAST
}
internal Microsoft.Cci.Pdb.SYMTYPE : ValueType {
internal ushort reclen
internal ushort rectyp
}
internal Microsoft.Cci.Pdb.ThreadSym32 : ValueType {
internal UInt32 typind
internal UInt32 off
internal ushort seg
internal string name
}
internal Microsoft.Cci.Pdb.ThunkSym32 : ValueType {
internal UInt32 parent
internal UInt32 end
internal UInt32 next
internal UInt32 off
internal ushort seg
internal ushort len
internal byte ord
internal string name
internal Byte[] variant
}
internal Microsoft.Cci.Pdb.TRAMP : Enum {
public int value__
public TRAMP trampIncremental
public TRAMP trampBranchIsland
}
internal Microsoft.Cci.Pdb.TrampolineSym : ValueType {
internal ushort trampType
internal ushort cbThunk
internal UInt32 offThunk
internal UInt32 offTarget
internal ushort sectThunk
internal ushort sectTarget
}
internal Microsoft.Cci.Pdb.TYPE_ENUM : Enum {
public int value__
public TYPE_ENUM T_NOTYPE
public TYPE_ENUM T_ABS
public TYPE_ENUM T_SEGMENT
public TYPE_ENUM T_VOID
public TYPE_ENUM T_HRESULT
public TYPE_ENUM T_32PHRESULT
public TYPE_ENUM T_64PHRESULT
public TYPE_ENUM T_PVOID
public TYPE_ENUM T_PFVOID
public TYPE_ENUM T_PHVOID
public TYPE_ENUM T_32PVOID
public TYPE_ENUM T_64PVOID
public TYPE_ENUM T_CURRENCY
public TYPE_ENUM T_NOTTRANS
public TYPE_ENUM T_BIT
public TYPE_ENUM T_PASCHAR
public TYPE_ENUM T_CHAR
public TYPE_ENUM T_32PCHAR
public TYPE_ENUM T_64PCHAR
public TYPE_ENUM T_UCHAR
public TYPE_ENUM T_32PUCHAR
public TYPE_ENUM T_64PUCHAR
public TYPE_ENUM T_RCHAR
public TYPE_ENUM T_32PRCHAR
public TYPE_ENUM T_64PRCHAR
public TYPE_ENUM T_WCHAR
public TYPE_ENUM T_32PWCHAR
public TYPE_ENUM T_64PWCHAR
public TYPE_ENUM T_INT1
public TYPE_ENUM T_32PINT1
public TYPE_ENUM T_64PINT1
public TYPE_ENUM T_UINT1
public TYPE_ENUM T_32PUINT1
public TYPE_ENUM T_64PUINT1
public TYPE_ENUM T_SHORT
public TYPE_ENUM T_32PSHORT
public TYPE_ENUM T_64PSHORT
public TYPE_ENUM T_USHORT
public TYPE_ENUM T_32PUSHORT
public TYPE_ENUM T_64PUSHORT
public TYPE_ENUM T_INT2
public TYPE_ENUM T_32PINT2
public TYPE_ENUM T_64PINT2
public TYPE_ENUM T_UINT2
public TYPE_ENUM T_32PUINT2
public TYPE_ENUM T_64PUINT2
public TYPE_ENUM T_LONG
public TYPE_ENUM T_ULONG
public TYPE_ENUM T_32PLONG
public TYPE_ENUM T_32PULONG
public TYPE_ENUM T_64PLONG
public TYPE_ENUM T_64PULONG
public TYPE_ENUM T_INT4
public TYPE_ENUM T_32PINT4
public TYPE_ENUM T_64PINT4
public TYPE_ENUM T_UINT4
public TYPE_ENUM T_32PUINT4
public TYPE_ENUM T_64PUINT4
public TYPE_ENUM T_QUAD
public TYPE_ENUM T_32PQUAD
public TYPE_ENUM T_64PQUAD
public TYPE_ENUM T_UQUAD
public TYPE_ENUM T_32PUQUAD
public TYPE_ENUM T_64PUQUAD
public TYPE_ENUM T_INT8
public TYPE_ENUM T_32PINT8
public TYPE_ENUM T_64PINT8
public TYPE_ENUM T_UINT8
public TYPE_ENUM T_32PUINT8
public TYPE_ENUM T_64PUINT8
public TYPE_ENUM T_OCT
public TYPE_ENUM T_32POCT
public TYPE_ENUM T_64POCT
public TYPE_ENUM T_UOCT
public TYPE_ENUM T_32PUOCT
public TYPE_ENUM T_64PUOCT
public TYPE_ENUM T_INT16
public TYPE_ENUM T_32PINT16
public TYPE_ENUM T_64PINT16
public TYPE_ENUM T_UINT16
public TYPE_ENUM T_32PUINT16
public TYPE_ENUM T_64PUINT16
public TYPE_ENUM T_REAL32
public TYPE_ENUM T_32PREAL32
public TYPE_ENUM T_64PREAL32
public TYPE_ENUM T_REAL64
public TYPE_ENUM T_32PREAL64
public TYPE_ENUM T_64PREAL64
public TYPE_ENUM T_REAL80
public TYPE_ENUM T_32PREAL80
public TYPE_ENUM T_64PREAL80
public TYPE_ENUM T_REAL128
public TYPE_ENUM T_32PREAL128
public TYPE_ENUM T_64PREAL128
public TYPE_ENUM T_CPLX32
public TYPE_ENUM T_32PCPLX32
public TYPE_ENUM T_64PCPLX32
public TYPE_ENUM T_CPLX64
public TYPE_ENUM T_32PCPLX64
public TYPE_ENUM T_64PCPLX64
public TYPE_ENUM T_CPLX80
public TYPE_ENUM T_32PCPLX80
public TYPE_ENUM T_64PCPLX80
public TYPE_ENUM T_CPLX128
public TYPE_ENUM T_32PCPLX128
public TYPE_ENUM T_64PCPLX128
public TYPE_ENUM T_BOOL08
public TYPE_ENUM T_32PBOOL08
public TYPE_ENUM T_64PBOOL08
public TYPE_ENUM T_BOOL16
public TYPE_ENUM T_32PBOOL16
public TYPE_ENUM T_64PBOOL16
public TYPE_ENUM T_BOOL32
public TYPE_ENUM T_32PBOOL32
public TYPE_ENUM T_64PBOOL32
public TYPE_ENUM T_BOOL64
public TYPE_ENUM T_32PBOOL64
public TYPE_ENUM T_64PBOOL64
}
internal Microsoft.Cci.Pdb.TYPTYPE : ValueType {
internal ushort len
internal ushort leaf
}
internal Microsoft.Cci.Pdb.UdtSym : ValueType {
internal UInt32 typind
internal string name
}
internal Microsoft.Cci.Pdb.UnamespaceSym : ValueType {
internal string name
}
internal Microsoft.Cci.Pdb.VpathSym32 : ValueType {
internal UInt32 root
internal UInt32 path
internal UInt32 off
internal ushort seg
}
internal Microsoft.Cci.Pdb.WithSym32 : ValueType {
internal UInt32 parent
internal UInt32 end
internal UInt32 len
internal UInt32 off
internal ushort seg
internal string expr
}
internal Microsoft.Cci.Pdb.XFixupData : ValueType {
internal ushort wType
internal ushort wExtra
internal UInt32 rva
internal UInt32 rvaTarget
}
internal Microsoft.Cci.PdbIteratorScope : object {
private UInt32 offset
private UInt32 length
public UInt32 Offset
public UInt32 Length
internal void .ctor(UInt32 offset, UInt32 length)
public UInt32 get_Offset()
public UInt32 get_Length()
}
internal Mono.Cecil.Pdb.GuidMapping : object {
private Dictionary`2<Guid, DocumentLanguage> guid_language
private Dictionary`2<DocumentLanguage, Guid> language_guid
private Guid type_text
private Guid hash_md5
private Guid hash_sha1
private Guid vendor_ms
private void AddMapping(DocumentLanguage language, Guid guid)
public DocumentType ToType(Guid guid)
public Guid ToGuid(DocumentType type)
public DocumentHashAlgorithm ToHashAlgorithm(Guid guid)
public Guid ToGuid(DocumentHashAlgorithm hash_algo)
public DocumentLanguage ToLanguage(Guid guid)
public Guid ToGuid(DocumentLanguage language)
public DocumentLanguageVendor ToVendor(Guid guid)
public Guid ToGuid(DocumentLanguageVendor vendor)
}
internal Mono.Cecil.Pdb.IMetaDataEmit {
public void SetModuleProps(string szName)
public void Save(string szFile, UInt32 dwSaveFlags)
public void SaveToStream(IntPtr pIStream, UInt32 dwSaveFlags)
public UInt32 GetSaveSize(UInt32 fSave)
public UInt32 DefineTypeDef(IntPtr szTypeDef, UInt32 dwTypeDefFlags, UInt32 tkExtends, IntPtr rtkImplements)
public UInt32 DefineNestedType(IntPtr szTypeDef, UInt32 dwTypeDefFlags, UInt32 tkExtends, IntPtr rtkImplements, UInt32 tdEncloser)
public void SetHandler(object pUnk)
public UInt32 DefineMethod(UInt32 td, IntPtr zName, UInt32 dwMethodFlags, IntPtr pvSigBlob, UInt32 cbSigBlob, UInt32 ulCodeRVA, UInt32 dwImplFlags)
public void DefineMethodImpl(UInt32 td, UInt32 tkBody, UInt32 tkDecl)
public UInt32 DefineTypeRefByName(UInt32 tkResolutionScope, IntPtr szName)
public UInt32 DefineImportType(IntPtr pAssemImport, IntPtr pbHashValue, UInt32 cbHashValue, IMetaDataImport pImport, UInt32 tdImport, IntPtr pAssemEmit)
public UInt32 DefineMemberRef(UInt32 tkImport, string szName, IntPtr pvSigBlob, UInt32 cbSigBlob)
public UInt32 DefineImportMember(IntPtr pAssemImport, IntPtr pbHashValue, UInt32 cbHashValue, IMetaDataImport pImport, UInt32 mbMember, IntPtr pAssemEmit, UInt32 tkParent)
public UInt32 DefineEvent(UInt32 td, string szEvent, UInt32 dwEventFlags, UInt32 tkEventType, UInt32 mdAddOn, UInt32 mdRemoveOn, UInt32 mdFire, IntPtr rmdOtherMethods)
public void SetClassLayout(UInt32 td, UInt32 dwPackSize, IntPtr rFieldOffsets, UInt32 ulClassSize)
public void DeleteClassLayout(UInt32 td)
public void SetFieldMarshal(UInt32 tk, IntPtr pvNativeType, UInt32 cbNativeType)
public void DeleteFieldMarshal(UInt32 tk)
public UInt32 DefinePermissionSet(UInt32 tk, UInt32 dwAction, IntPtr pvPermission, UInt32 cbPermission)
public void SetRVA(UInt32 md, UInt32 ulRVA)
public UInt32 GetTokenFromSig(IntPtr pvSig, UInt32 cbSig)
public UInt32 DefineModuleRef(string szName)
public void SetParent(UInt32 mr, UInt32 tk)
public UInt32 GetTokenFromTypeSpec(IntPtr pvSig, UInt32 cbSig)
public void SaveToMemory(IntPtr pbData, UInt32 cbData)
public UInt32 DefineUserString(string szString, UInt32 cchString)
public void DeleteToken(UInt32 tkObj)
public void SetMethodProps(UInt32 md, UInt32 dwMethodFlags, UInt32 ulCodeRVA, UInt32 dwImplFlags)
public void SetTypeDefProps(UInt32 td, UInt32 dwTypeDefFlags, UInt32 tkExtends, IntPtr rtkImplements)
public void SetEventProps(UInt32 ev, UInt32 dwEventFlags, UInt32 tkEventType, UInt32 mdAddOn, UInt32 mdRemoveOn, UInt32 mdFire, IntPtr rmdOtherMethods)
public UInt32 SetPermissionSetProps(UInt32 tk, UInt32 dwAction, IntPtr pvPermission, UInt32 cbPermission)
public void DefinePinvokeMap(UInt32 tk, UInt32 dwMappingFlags, string szImportName, UInt32 mrImportDLL)
public void SetPinvokeMap(UInt32 tk, UInt32 dwMappingFlags, string szImportName, UInt32 mrImportDLL)
public void DeletePinvokeMap(UInt32 tk)
public UInt32 DefineCustomAttribute(UInt32 tkObj, UInt32 tkType, IntPtr pCustomAttribute, UInt32 cbCustomAttribute)
public void SetCustomAttributeValue(UInt32 pcv, IntPtr pCustomAttribute, UInt32 cbCustomAttribute)
public UInt32 DefineField(UInt32 td, string szName, UInt32 dwFieldFlags, IntPtr pvSigBlob, UInt32 cbSigBlob, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue)
public UInt32 DefineProperty(UInt32 td, string szProperty, UInt32 dwPropFlags, IntPtr pvSig, UInt32 cbSig, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue, UInt32 mdSetter, UInt32 mdGetter, IntPtr rmdOtherMethods)
public UInt32 DefineParam(UInt32 md, UInt32 ulParamSeq, string szName, UInt32 dwParamFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue)
public void SetFieldProps(UInt32 fd, UInt32 dwFieldFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue)
public void SetPropertyProps(UInt32 pr, UInt32 dwPropFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue, UInt32 mdSetter, UInt32 mdGetter, IntPtr rmdOtherMethods)
public void SetParamProps(UInt32 pd, string szName, UInt32 dwParamFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue)
public UInt32 DefineSecurityAttributeSet(UInt32 tkObj, IntPtr rSecAttrs, UInt32 cSecAttrs)
public void ApplyEditAndContinue(object pImport)
public UInt32 TranslateSigWithScope(IntPtr pAssemImport, IntPtr pbHashValue, UInt32 cbHashValue, IMetaDataImport import, IntPtr pbSigBlob, UInt32 cbSigBlob, IntPtr pAssemEmit, IMetaDataEmit emit, IntPtr pvTranslatedSig, UInt32 cbTranslatedSigMax)
public void SetMethodImplFlags(UInt32 md, UInt32 dwImplFlags)
public void SetFieldRVA(UInt32 fd, UInt32 ulRVA)
public void Merge(IMetaDataImport pImport, IntPtr pHostMapToken, object pHandler)
public void MergeEnd()
}
internal Mono.Cecil.Pdb.IMetaDataImport {
public void CloseEnum(UInt32 hEnum)
public UInt32 CountEnum(UInt32 hEnum)
public void ResetEnum(UInt32 hEnum, UInt32 ulPos)
public UInt32 EnumTypeDefs(UInt32& phEnum, UInt32[] rTypeDefs, UInt32 cMax)
public UInt32 EnumInterfaceImpls(UInt32& phEnum, UInt32 td, UInt32[] rImpls, UInt32 cMax)
public UInt32 EnumTypeRefs(UInt32& phEnum, UInt32[] rTypeRefs, UInt32 cMax)
public UInt32 FindTypeDefByName(string szTypeDef, UInt32 tkEnclosingClass)
public Guid GetScopeProps(StringBuilder szName, UInt32 cchName, UInt32& pchName)
public UInt32 GetModuleFromScope()
public UInt32 GetTypeDefProps(UInt32 td, IntPtr szTypeDef, UInt32 cchTypeDef, UInt32& pchTypeDef, IntPtr pdwTypeDefFlags)
public UInt32 GetInterfaceImplProps(UInt32 iiImpl, UInt32& pClass)
public UInt32 GetTypeRefProps(UInt32 tr, UInt32& ptkResolutionScope, StringBuilder szName, UInt32 cchName)
public UInt32 ResolveTypeRef(UInt32 tr, Guid& riid, Object& ppIScope)
public UInt32 EnumMembers(UInt32& phEnum, UInt32 cl, UInt32[] rMembers, UInt32 cMax)
public UInt32 EnumMembersWithName(UInt32& phEnum, UInt32 cl, string szName, UInt32[] rMembers, UInt32 cMax)
public UInt32 EnumMethods(UInt32& phEnum, UInt32 cl, IntPtr rMethods, UInt32 cMax)
public UInt32 EnumMethodsWithName(UInt32& phEnum, UInt32 cl, string szName, UInt32[] rMethods, UInt32 cMax)
public UInt32 EnumFields(UInt32& phEnum, UInt32 cl, IntPtr rFields, UInt32 cMax)
public UInt32 EnumFieldsWithName(UInt32& phEnum, UInt32 cl, string szName, UInt32[] rFields, UInt32 cMax)
public UInt32 EnumParams(UInt32& phEnum, UInt32 mb, UInt32[] rParams, UInt32 cMax)
public UInt32 EnumMemberRefs(UInt32& phEnum, UInt32 tkParent, UInt32[] rMemberRefs, UInt32 cMax)
public UInt32 EnumMethodImpls(UInt32& phEnum, UInt32 td, UInt32[] rMethodBody, UInt32[] rMethodDecl, UInt32 cMax)
public UInt32 EnumPermissionSets(UInt32& phEnum, UInt32 tk, UInt32 dwActions, UInt32[] rPermission, UInt32 cMax)
public UInt32 FindMember(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob)
public UInt32 FindMethod(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob)
public UInt32 FindField(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob)
public UInt32 FindMemberRef(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob)
public UInt32 GetMethodProps(UInt32 mb, UInt32& pClass, IntPtr szMethod, UInt32 cchMethod, UInt32& pchMethod, IntPtr pdwAttr, IntPtr ppvSigBlob, IntPtr pcbSigBlob, IntPtr pulCodeRVA)
public UInt32 GetMemberRefProps(UInt32 mr, UInt32& ptk, StringBuilder szMember, UInt32 cchMember, UInt32& pchMember, IntPtr& ppvSigBlob)
public UInt32 EnumProperties(UInt32& phEnum, UInt32 td, IntPtr rProperties, UInt32 cMax)
public UInt32 EnumEvents(UInt32& phEnum, UInt32 td, IntPtr rEvents, UInt32 cMax)
public UInt32 GetEventProps(UInt32 ev, UInt32& pClass, StringBuilder szEvent, UInt32 cchEvent, UInt32& pchEvent, UInt32& pdwEventFlags, UInt32& ptkEventType, UInt32& pmdAddOn, UInt32& pmdRemoveOn, UInt32& pmdFire, UInt32[] rmdOtherMethod, UInt32 cMax)
public UInt32 EnumMethodSemantics(UInt32& phEnum, UInt32 mb, UInt32[] rEventProp, UInt32 cMax)
public UInt32 GetMethodSemantics(UInt32 mb, UInt32 tkEventProp)
public UInt32 GetClassLayout(UInt32 td, UInt32& pdwPackSize, IntPtr rFieldOffset, UInt32 cMax, UInt32& pcFieldOffset)
public UInt32 GetFieldMarshal(UInt32 tk, IntPtr& ppvNativeType)
public UInt32 GetRVA(UInt32 tk, UInt32& pulCodeRVA)
public UInt32 GetPermissionSetProps(UInt32 pm, UInt32& pdwAction, IntPtr& ppvPermission)
public UInt32 GetSigFromToken(UInt32 mdSig, IntPtr& ppvSig)
public UInt32 GetModuleRefProps(UInt32 mur, StringBuilder szName, UInt32 cchName)
public UInt32 EnumModuleRefs(UInt32& phEnum, UInt32[] rModuleRefs, UInt32 cmax)
public UInt32 GetTypeSpecFromToken(UInt32 typespec, IntPtr& ppvSig)
public UInt32 GetNameFromToken(UInt32 tk)
public UInt32 EnumUnresolvedMethods(UInt32& phEnum, UInt32[] rMethods, UInt32 cMax)
public UInt32 GetUserString(UInt32 stk, StringBuilder szString, UInt32 cchString)
public UInt32 GetPinvokeMap(UInt32 tk, UInt32& pdwMappingFlags, StringBuilder szImportName, UInt32 cchImportName, UInt32& pchImportName)
public UInt32 EnumSignatures(UInt32& phEnum, UInt32[] rSignatures, UInt32 cmax)
public UInt32 EnumTypeSpecs(UInt32& phEnum, UInt32[] rTypeSpecs, UInt32 cmax)
public UInt32 EnumUserStrings(UInt32& phEnum, UInt32[] rStrings, UInt32 cmax)
public int GetParamForMethodIndex(UInt32 md, UInt32 ulParamSeq, UInt32& pParam)
public UInt32 EnumCustomAttributes(UInt32& phEnum, UInt32 tk, UInt32 tkType, UInt32[] rCustomAttributes, UInt32 cMax)
public UInt32 GetCustomAttributeProps(UInt32 cv, UInt32& ptkObj, UInt32& ptkType, IntPtr& ppBlob)
public UInt32 FindTypeRef(UInt32 tkResolutionScope, string szName)
public UInt32 GetMemberProps(UInt32 mb, UInt32& pClass, StringBuilder szMember, UInt32 cchMember, UInt32& pchMember, UInt32& pdwAttr, IntPtr& ppvSigBlob, UInt32& pcbSigBlob, UInt32& pulCodeRVA, UInt32& pdwImplFlags, UInt32& pdwCPlusTypeFlag, IntPtr& ppValue)
public UInt32 GetFieldProps(UInt32 mb, UInt32& pClass, StringBuilder szField, UInt32 cchField, UInt32& pchField, UInt32& pdwAttr, IntPtr& ppvSigBlob, UInt32& pcbSigBlob, UInt32& pdwCPlusTypeFlag, IntPtr& ppValue)
public UInt32 GetPropertyProps(UInt32 prop, UInt32& pClass, StringBuilder szProperty, UInt32 cchProperty, UInt32& pchProperty, UInt32& pdwPropFlags, IntPtr& ppvSig, UInt32& pbSig, UInt32& pdwCPlusTypeFlag, IntPtr& ppDefaultValue, UInt32& pcchDefaultValue, UInt32& pmdSetter, UInt32& pmdGetter, UInt32[] rmdOtherMethod, UInt32 cMax)
public UInt32 GetParamProps(UInt32 tk, UInt32& pmd, UInt32& pulSequence, StringBuilder szName, UInt32 cchName, UInt32& pchName, UInt32& pdwAttr, UInt32& pdwCPlusTypeFlag, IntPtr& ppValue)
public UInt32 GetCustomAttributeByName(UInt32 tkObj, string szName, IntPtr& ppData)
public bool IsValidToken(UInt32 tk)
public UInt32 GetNestedClassProps(UInt32 tdNestedClass)
public UInt32 GetNativeCallConvFromSig(IntPtr pvSig, UInt32 cbSig)
public int IsGlobal(UInt32 pd)
}
internal Mono.Cecil.Pdb.ISymUnmanagedWriter2 {
public void DefineDocument(string url, Guid& langauge, Guid& languageVendor, Guid& documentType, ISymUnmanagedDocumentWriter& pRetVal)
public void SetUserEntryPoint(SymbolToken method)
public void OpenMethod(SymbolToken method)
public void CloseMethod()
public void OpenScope(int startOffset, Int32& pRetVal)
public void CloseScope(int endOffset)
public void SetScopeRange_Placeholder()
public void DefineLocalVariable_Placeholder()
public void DefineParameter_Placeholder()
public void DefineField_Placeholder()
public void DefineGlobalVariable_Placeholder()
public void Close()
public void SetSymAttribute_Placeholder()
public void OpenNamespace(string name)
public void CloseNamespace()
public void UsingNamespace(string fullName)
public void SetMethodSourceRange_Placeholder()
public void Initialize(object emitter, string filename, IStream pIStream, bool fFullBuild)
public void GetDebugInfo(ImageDebugDirectory& pIDD, int cData, Int32& pcData, Byte[] data)
public void DefineSequencePoints(ISymUnmanagedDocumentWriter document, int spCount, Int32[] offsets, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns)
public void RemapToken_Placeholder()
public void Initialize2_Placeholder()
public void DefineConstant_Placeholder()
public void Abort_Placeholder()
public void DefineLocalVariable2(string name, int attributes, SymbolToken sigToken, int addrKind, int addr1, int addr2, int addr3, int startOffset, int endOffset)
}
internal Mono.Cecil.Pdb.ModuleMetadata : object {
private ModuleDefinition module
private Dictionary`2<UInt32, TypeDefinition> types
private Dictionary`2<UInt32, MethodDefinition> methods
public void .ctor(ModuleDefinition module)
private bool TryGetType(UInt32 token, TypeDefinition& type)
private bool TryGetMethod(UInt32 token, MethodDefinition& method)
private void InitializeMetadata(ModuleDefinition module)
private void InitializeMethods(TypeDefinition type)
public void SetModuleProps(string szName)
public void Save(string szFile, UInt32 dwSaveFlags)
public void SaveToStream(IntPtr pIStream, UInt32 dwSaveFlags)
public UInt32 GetSaveSize(UInt32 fSave)
public UInt32 DefineTypeDef(IntPtr szTypeDef, UInt32 dwTypeDefFlags, UInt32 tkExtends, IntPtr rtkImplements)
public UInt32 DefineNestedType(IntPtr szTypeDef, UInt32 dwTypeDefFlags, UInt32 tkExtends, IntPtr rtkImplements, UInt32 tdEncloser)
public void SetHandler(object pUnk)
public UInt32 DefineMethod(UInt32 td, IntPtr zName, UInt32 dwMethodFlags, IntPtr pvSigBlob, UInt32 cbSigBlob, UInt32 ulCodeRVA, UInt32 dwImplFlags)
public void DefineMethodImpl(UInt32 td, UInt32 tkBody, UInt32 tkDecl)
public UInt32 DefineTypeRefByName(UInt32 tkResolutionScope, IntPtr szName)
public UInt32 DefineImportType(IntPtr pAssemImport, IntPtr pbHashValue, UInt32 cbHashValue, IMetaDataImport pImport, UInt32 tdImport, IntPtr pAssemEmit)
public UInt32 DefineMemberRef(UInt32 tkImport, string szName, IntPtr pvSigBlob, UInt32 cbSigBlob)
public UInt32 DefineImportMember(IntPtr pAssemImport, IntPtr pbHashValue, UInt32 cbHashValue, IMetaDataImport pImport, UInt32 mbMember, IntPtr pAssemEmit, UInt32 tkParent)
public UInt32 DefineEvent(UInt32 td, string szEvent, UInt32 dwEventFlags, UInt32 tkEventType, UInt32 mdAddOn, UInt32 mdRemoveOn, UInt32 mdFire, IntPtr rmdOtherMethods)
public void SetClassLayout(UInt32 td, UInt32 dwPackSize, IntPtr rFieldOffsets, UInt32 ulClassSize)
public void DeleteClassLayout(UInt32 td)
public void SetFieldMarshal(UInt32 tk, IntPtr pvNativeType, UInt32 cbNativeType)
public void DeleteFieldMarshal(UInt32 tk)
public UInt32 DefinePermissionSet(UInt32 tk, UInt32 dwAction, IntPtr pvPermission, UInt32 cbPermission)
public void SetRVA(UInt32 md, UInt32 ulRVA)
public UInt32 GetTokenFromSig(IntPtr pvSig, UInt32 cbSig)
public UInt32 DefineModuleRef(string szName)
public void SetParent(UInt32 mr, UInt32 tk)
public UInt32 GetTokenFromTypeSpec(IntPtr pvSig, UInt32 cbSig)
public void SaveToMemory(IntPtr pbData, UInt32 cbData)
public UInt32 DefineUserString(string szString, UInt32 cchString)
public void DeleteToken(UInt32 tkObj)
public void SetMethodProps(UInt32 md, UInt32 dwMethodFlags, UInt32 ulCodeRVA, UInt32 dwImplFlags)
public void SetTypeDefProps(UInt32 td, UInt32 dwTypeDefFlags, UInt32 tkExtends, IntPtr rtkImplements)
public void SetEventProps(UInt32 ev, UInt32 dwEventFlags, UInt32 tkEventType, UInt32 mdAddOn, UInt32 mdRemoveOn, UInt32 mdFire, IntPtr rmdOtherMethods)
public UInt32 SetPermissionSetProps(UInt32 tk, UInt32 dwAction, IntPtr pvPermission, UInt32 cbPermission)
public void DefinePinvokeMap(UInt32 tk, UInt32 dwMappingFlags, string szImportName, UInt32 mrImportDLL)
public void SetPinvokeMap(UInt32 tk, UInt32 dwMappingFlags, string szImportName, UInt32 mrImportDLL)
public void DeletePinvokeMap(UInt32 tk)
public UInt32 DefineCustomAttribute(UInt32 tkObj, UInt32 tkType, IntPtr pCustomAttribute, UInt32 cbCustomAttribute)
public void SetCustomAttributeValue(UInt32 pcv, IntPtr pCustomAttribute, UInt32 cbCustomAttribute)
public UInt32 DefineField(UInt32 td, string szName, UInt32 dwFieldFlags, IntPtr pvSigBlob, UInt32 cbSigBlob, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue)
public UInt32 DefineProperty(UInt32 td, string szProperty, UInt32 dwPropFlags, IntPtr pvSig, UInt32 cbSig, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue, UInt32 mdSetter, UInt32 mdGetter, IntPtr rmdOtherMethods)
public UInt32 DefineParam(UInt32 md, UInt32 ulParamSeq, string szName, UInt32 dwParamFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue)
public void SetFieldProps(UInt32 fd, UInt32 dwFieldFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue)
public void SetPropertyProps(UInt32 pr, UInt32 dwPropFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue, UInt32 mdSetter, UInt32 mdGetter, IntPtr rmdOtherMethods)
public void SetParamProps(UInt32 pd, string szName, UInt32 dwParamFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue)
public UInt32 DefineSecurityAttributeSet(UInt32 tkObj, IntPtr rSecAttrs, UInt32 cSecAttrs)
public void ApplyEditAndContinue(object pImport)
public UInt32 TranslateSigWithScope(IntPtr pAssemImport, IntPtr pbHashValue, UInt32 cbHashValue, IMetaDataImport import, IntPtr pbSigBlob, UInt32 cbSigBlob, IntPtr pAssemEmit, IMetaDataEmit emit, IntPtr pvTranslatedSig, UInt32 cbTranslatedSigMax)
public void SetMethodImplFlags(UInt32 md, UInt32 dwImplFlags)
public void SetFieldRVA(UInt32 fd, UInt32 ulRVA)
public void Merge(IMetaDataImport pImport, IntPtr pHostMapToken, object pHandler)
public void MergeEnd()
public void CloseEnum(UInt32 hEnum)
public UInt32 CountEnum(UInt32 hEnum)
public void ResetEnum(UInt32 hEnum, UInt32 ulPos)
public UInt32 EnumTypeDefs(UInt32& phEnum, UInt32[] rTypeDefs, UInt32 cMax)
public UInt32 EnumInterfaceImpls(UInt32& phEnum, UInt32 td, UInt32[] rImpls, UInt32 cMax)
public UInt32 EnumTypeRefs(UInt32& phEnum, UInt32[] rTypeRefs, UInt32 cMax)
public UInt32 FindTypeDefByName(string szTypeDef, UInt32 tkEnclosingClass)
public Guid GetScopeProps(StringBuilder szName, UInt32 cchName, UInt32& pchName)
public UInt32 GetModuleFromScope()
public UInt32 GetTypeDefProps(UInt32 td, IntPtr szTypeDef, UInt32 cchTypeDef, UInt32& pchTypeDef, IntPtr pdwTypeDefFlags)
private void WriteIntPtr(IntPtr ptr, UInt32 value)
private void WriteString(string str, IntPtr buffer, UInt32 bufferSize, UInt32& chars)
public UInt32 GetInterfaceImplProps(UInt32 iiImpl, UInt32& pClass)
public UInt32 GetTypeRefProps(UInt32 tr, UInt32& ptkResolutionScope, StringBuilder szName, UInt32 cchName)
public UInt32 ResolveTypeRef(UInt32 tr, Guid& riid, Object& ppIScope)
public UInt32 EnumMembers(UInt32& phEnum, UInt32 cl, UInt32[] rMembers, UInt32 cMax)
public UInt32 EnumMembersWithName(UInt32& phEnum, UInt32 cl, string szName, UInt32[] rMembers, UInt32 cMax)
public UInt32 EnumMethods(UInt32& phEnum, UInt32 cl, IntPtr rMethods, UInt32 cMax)
public UInt32 EnumMethodsWithName(UInt32& phEnum, UInt32 cl, string szName, UInt32[] rMethods, UInt32 cMax)
public UInt32 EnumFields(UInt32& phEnum, UInt32 cl, IntPtr rFields, UInt32 cMax)
public UInt32 EnumFieldsWithName(UInt32& phEnum, UInt32 cl, string szName, UInt32[] rFields, UInt32 cMax)
public UInt32 EnumParams(UInt32& phEnum, UInt32 mb, UInt32[] rParams, UInt32 cMax)
public UInt32 EnumMemberRefs(UInt32& phEnum, UInt32 tkParent, UInt32[] rMemberRefs, UInt32 cMax)
public UInt32 EnumMethodImpls(UInt32& phEnum, UInt32 td, UInt32[] rMethodBody, UInt32[] rMethodDecl, UInt32 cMax)
public UInt32 EnumPermissionSets(UInt32& phEnum, UInt32 tk, UInt32 dwActions, UInt32[] rPermission, UInt32 cMax)
public UInt32 FindMember(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob)
public UInt32 FindMethod(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob)
public UInt32 FindField(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob)
public UInt32 FindMemberRef(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob)
public UInt32 GetMethodProps(UInt32 mb, UInt32& pClass, IntPtr szMethod, UInt32 cchMethod, UInt32& pchMethod, IntPtr pdwAttr, IntPtr ppvSigBlob, IntPtr pcbSigBlob, IntPtr pulCodeRVA)
public UInt32 GetMemberRefProps(UInt32 mr, UInt32& ptk, StringBuilder szMember, UInt32 cchMember, UInt32& pchMember, IntPtr& ppvSigBlob)
public UInt32 EnumProperties(UInt32& phEnum, UInt32 td, IntPtr rProperties, UInt32 cMax)
public UInt32 EnumEvents(UInt32& phEnum, UInt32 td, IntPtr rEvents, UInt32 cMax)
public UInt32 GetEventProps(UInt32 ev, UInt32& pClass, StringBuilder szEvent, UInt32 cchEvent, UInt32& pchEvent, UInt32& pdwEventFlags, UInt32& ptkEventType, UInt32& pmdAddOn, UInt32& pmdRemoveOn, UInt32& pmdFire, UInt32[] rmdOtherMethod, UInt32 cMax)
public UInt32 EnumMethodSemantics(UInt32& phEnum, UInt32 mb, UInt32[] rEventProp, UInt32 cMax)
public UInt32 GetMethodSemantics(UInt32 mb, UInt32 tkEventProp)
public UInt32 GetClassLayout(UInt32 td, UInt32& pdwPackSize, IntPtr rFieldOffset, UInt32 cMax, UInt32& pcFieldOffset)
public UInt32 GetFieldMarshal(UInt32 tk, IntPtr& ppvNativeType)
public UInt32 GetRVA(UInt32 tk, UInt32& pulCodeRVA)
public UInt32 GetPermissionSetProps(UInt32 pm, UInt32& pdwAction, IntPtr& ppvPermission)
public UInt32 GetSigFromToken(UInt32 mdSig, IntPtr& ppvSig)
public UInt32 GetModuleRefProps(UInt32 mur, StringBuilder szName, UInt32 cchName)
public UInt32 EnumModuleRefs(UInt32& phEnum, UInt32[] rModuleRefs, UInt32 cmax)
public UInt32 GetTypeSpecFromToken(UInt32 typespec, IntPtr& ppvSig)
public UInt32 GetNameFromToken(UInt32 tk)
public UInt32 EnumUnresolvedMethods(UInt32& phEnum, UInt32[] rMethods, UInt32 cMax)
public UInt32 GetUserString(UInt32 stk, StringBuilder szString, UInt32 cchString)
public UInt32 GetPinvokeMap(UInt32 tk, UInt32& pdwMappingFlags, StringBuilder szImportName, UInt32 cchImportName, UInt32& pchImportName)
public UInt32 EnumSignatures(UInt32& phEnum, UInt32[] rSignatures, UInt32 cmax)
public UInt32 EnumTypeSpecs(UInt32& phEnum, UInt32[] rTypeSpecs, UInt32 cmax)
public UInt32 EnumUserStrings(UInt32& phEnum, UInt32[] rStrings, UInt32 cmax)
public int GetParamForMethodIndex(UInt32 md, UInt32 ulParamSeq, UInt32& pParam)
public UInt32 EnumCustomAttributes(UInt32& phEnum, UInt32 tk, UInt32 tkType, UInt32[] rCustomAttributes, UInt32 cMax)
public UInt32 GetCustomAttributeProps(UInt32 cv, UInt32& ptkObj, UInt32& ptkType, IntPtr& ppBlob)
public UInt32 FindTypeRef(UInt32 tkResolutionScope, string szName)
public UInt32 GetMemberProps(UInt32 mb, UInt32& pClass, StringBuilder szMember, UInt32 cchMember, UInt32& pchMember, UInt32& pdwAttr, IntPtr& ppvSigBlob, UInt32& pcbSigBlob, UInt32& pulCodeRVA, UInt32& pdwImplFlags, UInt32& pdwCPlusTypeFlag, IntPtr& ppValue)
public UInt32 GetFieldProps(UInt32 mb, UInt32& pClass, StringBuilder szField, UInt32 cchField, UInt32& pchField, UInt32& pdwAttr, IntPtr& ppvSigBlob, UInt32& pcbSigBlob, UInt32& pdwCPlusTypeFlag, IntPtr& ppValue)
public UInt32 GetPropertyProps(UInt32 prop, UInt32& pClass, StringBuilder szProperty, UInt32 cchProperty, UInt32& pchProperty, UInt32& pdwPropFlags, IntPtr& ppvSig, UInt32& pbSig, UInt32& pdwCPlusTypeFlag, IntPtr& ppDefaultValue, UInt32& pcchDefaultValue, UInt32& pmdSetter, UInt32& pmdGetter, UInt32[] rmdOtherMethod, UInt32 cMax)
public UInt32 GetParamProps(UInt32 tk, UInt32& pmd, UInt32& pulSequence, StringBuilder szName, UInt32 cchName, UInt32& pchName, UInt32& pdwAttr, UInt32& pdwCPlusTypeFlag, IntPtr& ppValue)
public UInt32 GetCustomAttributeByName(UInt32 tkObj, string szName, IntPtr& ppData)
public bool IsValidToken(UInt32 tk)
public UInt32 GetNestedClassProps(UInt32 tdNestedClass)
public UInt32 GetNativeCallConvFromSig(IntPtr pvSig, UInt32 cbSig)
public int IsGlobal(UInt32 pd)
}
internal Mono.Cecil.Pdb.PdbHelper : object {
public SymWriter CreateWriter(ModuleDefinition module, string pdb)
public string GetPdbFileName(string assemblyFileName)
}
public Mono.Cecil.Pdb.PdbReader : object {
private int age
private Guid guid
private Stream pdb_file
private Dictionary`2<string, Document> documents
private Dictionary`2<UInt32, PdbFunction> functions
internal void .ctor(Stream file)
public bool ProcessDebugHeader(ImageDebugDirectory directory, Byte[] header)
private int ReadInt32(Byte[] bytes, int start)
private bool PopulateFunctions()
public void Read(MethodBody body, InstructionMapper mapper)
private void ReadScopeAndLocals(PdbScope[] scopes, Scope parent, MethodBody body, InstructionMapper mapper)
private void CreateRootScope(MethodBody body)
private void ReadScopeAndLocals(PdbScope scope, Scope parent, MethodBody body, InstructionMapper mapper)
private void ReadSequencePoints(PdbFunction function, InstructionMapper mapper)
private void ReadLines(PdbLines lines, InstructionMapper mapper)
private void ReadLine(PdbLine line, Document document, InstructionMapper mapper)
private Document GetDocument(PdbSource source)
public void Read(MethodSymbols symbols)
private void ReadLocals(PdbScope[] scopes, MethodSymbols symbols)
private void ReadLocals(PdbScope scope, MethodSymbols symbols)
private void ReadSequencePoints(PdbFunction function, MethodSymbols symbols)
private void ReadLines(PdbLines lines, MethodSymbols symbols)
public void Dispose()
}
public Mono.Cecil.Pdb.PdbReaderProvider : object {
public ISymbolReader GetSymbolReader(ModuleDefinition module, string fileName)
public ISymbolReader GetSymbolReader(ModuleDefinition module, Stream symbolStream)
}
public Mono.Cecil.Pdb.PdbWriter : object {
private ModuleDefinition module
private SymWriter writer
private Dictionary`2<string, SymDocumentWriter> documents
internal void .ctor(ModuleDefinition module, SymWriter writer)
public bool GetDebugHeader(ImageDebugDirectory& directory, Byte[]& header)
public void Write(MethodBody body)
private Collection`1<Instruction> CollectInstructions(MethodBody body)
private void DefineVariables(MethodBody body, int start_offset, int end_offset)
private void DefineSequencePoints(Collection`1<Instruction> instructions)
private void CreateLocalVariable(VariableDefinition variable, SymbolToken local_var_token, int start_offset, int end_offset)
private SymDocumentWriter GetDocument(Document document)
public void Write(MethodSymbols symbols)
private void DefineSequencePoints(MethodSymbols symbols)
private void DefineVariables(MethodSymbols symbols, int start_offset, int end_offset)
public void Dispose()
}
public Mono.Cecil.Pdb.PdbWriterProvider : object {
public ISymbolWriter GetSymbolWriter(ModuleDefinition module, string fileName)
public ISymbolWriter GetSymbolWriter(ModuleDefinition module, Stream symbolStream)
}
internal Mono.Cecil.Pdb.SymDocumentWriter : object {
private ISymUnmanagedDocumentWriter m_unmanagedDocumentWriter
public void .ctor(ISymUnmanagedDocumentWriter unmanagedDocumentWriter)
public ISymUnmanagedDocumentWriter GetUnmanaged()
}
internal Mono.Cecil.Pdb.SymWriter : object {
private Guid s_symUnmangedWriterIID
private Guid s_CorSymWriter_SxS_ClassID
private ISymUnmanagedWriter2 m_writer
private Collection`1<ISymUnmanagedDocumentWriter> documents
private int CoCreateInstance(Guid& rclsid, object pUnkOuter, UInt32 dwClsContext, Guid& riid, Object& ppv)
public Byte[] GetDebugInfo(ImageDebugDirectory& idd)
public void DefineLocalVariable2(string name, FieldAttributes attributes, SymbolToken sigToken, SymAddressKind addrKind, int addr1, int addr2, int addr3, int startOffset, int endOffset)
public void Close()
public void CloseMethod()
public void CloseNamespace()
public void CloseScope(int endOffset)
public SymDocumentWriter DefineDocument(string url, Guid language, Guid languageVendor, Guid documentType)
public void DefineParameter(string name, ParameterAttributes attributes, int sequence, SymAddressKind addrKind, int addr1, int addr2, int addr3)
public void DefineSequencePoints(SymDocumentWriter document, Int32[] offsets, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns)
public void Initialize(object emitter, string filename, bool fFullBuild)
public void SetUserEntryPoint(SymbolToken method)
public void OpenMethod(SymbolToken method)
public void OpenNamespace(string name)
public int OpenScope(int startOffset)
public void UsingNamespace(string fullName)
}
