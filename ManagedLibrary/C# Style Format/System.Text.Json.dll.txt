internal System.Buffers.ArrayBufferWriter`1 : object {
private int ArrayMaxLength
private int DefaultInitialBufferSize
private T[] _buffer
private int _index
public ReadOnlyMemory`1<T> WrittenMemory
public ReadOnlySpan`1<T> WrittenSpan
public int WrittenCount
public int Capacity
public int FreeCapacity
public void .ctor(int initialCapacity)
public ReadOnlyMemory`1<T> get_WrittenMemory()
public ReadOnlySpan`1<T> get_WrittenSpan()
public int get_WrittenCount()
public int get_Capacity()
public int get_FreeCapacity()
public void Clear()
public void ResetWrittenCount()
public void Advance(int count)
public Memory`1<T> GetMemory(int sizeHint)
public Span`1<T> GetSpan(int sizeHint)
private void CheckAndResizeBuffer(int sizeHint)
private void ThrowInvalidOperationException_AdvancedTooFar(int capacity)
private void ThrowOutOfMemoryException(UInt32 capacity)
}
internal System.Buffers.Text.SequenceValidity : Enum {
public int value__
public SequenceValidity Empty
public SequenceValidity WellFormed
public SequenceValidity Incomplete
public SequenceValidity Invalid
}
internal System.Collections.Generic.ReferenceEqualityComparer : object {
private ReferenceEqualityComparer <Instance>k__BackingField
public ReferenceEqualityComparer Instance
public ReferenceEqualityComparer get_Instance()
public bool Equals(object x, object y)
public int GetHashCode(object obj)
}
internal System.Collections.Generic.StackExtensions : object {
public bool TryPeek(Stack`1<T> stack, T& result)
public bool TryPop(Stack`1<T> stack, T& result)
}
internal System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
private bool <ParameterValue>k__BackingField
public bool ParameterValue
public void .ctor(bool parameterValue)
public bool get_ParameterValue()
}
internal System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField
public DynamicallyAccessedMemberTypes MemberTypes
public void .ctor(DynamicallyAccessedMemberTypes memberTypes)
public DynamicallyAccessedMemberTypes get_MemberTypes()
}
internal System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
public int value__
public DynamicallyAccessedMemberTypes None
public DynamicallyAccessedMemberTypes PublicParameterlessConstructor
public DynamicallyAccessedMemberTypes PublicConstructors
public DynamicallyAccessedMemberTypes NonPublicConstructors
public DynamicallyAccessedMemberTypes PublicMethods
public DynamicallyAccessedMemberTypes NonPublicMethods
public DynamicallyAccessedMemberTypes PublicFields
public DynamicallyAccessedMemberTypes NonPublicFields
public DynamicallyAccessedMemberTypes PublicNestedTypes
public DynamicallyAccessedMemberTypes NonPublicNestedTypes
public DynamicallyAccessedMemberTypes PublicProperties
public DynamicallyAccessedMemberTypes NonPublicProperties
public DynamicallyAccessedMemberTypes PublicEvents
public DynamicallyAccessedMemberTypes NonPublicEvents
public DynamicallyAccessedMemberTypes Interfaces
public DynamicallyAccessedMemberTypes All
}
internal System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
private string <MemberSignature>k__BackingField
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField
private Type <Type>k__BackingField
private string <TypeName>k__BackingField
private string <AssemblyName>k__BackingField
private string <Condition>k__BackingField
public string MemberSignature
public DynamicallyAccessedMemberTypes MemberTypes
public Type Type
public string TypeName
public string AssemblyName
public string Condition
public void .ctor(string memberSignature)
public void .ctor(string memberSignature, Type type)
public void .ctor(string memberSignature, string typeName, string assemblyName)
public void .ctor(DynamicallyAccessedMemberTypes memberTypes, Type type)
public void .ctor(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName)
public string get_MemberSignature()
public DynamicallyAccessedMemberTypes get_MemberTypes()
public Type get_Type()
public string get_TypeName()
public string get_AssemblyName()
public string get_Condition()
public void set_Condition(string value)
}
internal System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
private bool <ReturnValue>k__BackingField
public bool ReturnValue
public void .ctor(bool returnValue)
public bool get_ReturnValue()
}
internal System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
private String[] <Members>k__BackingField
public String[] Members
public void .ctor(string member)
public void .ctor(String[] members)
public String[] get_Members()
}
internal System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
private bool <ReturnValue>k__BackingField
private String[] <Members>k__BackingField
public bool ReturnValue
public String[] Members
public void .ctor(bool returnValue, string member)
public void .ctor(bool returnValue, String[] members)
public bool get_ReturnValue()
public String[] get_Members()
}
internal System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
private string <ParameterName>k__BackingField
public string ParameterName
public void .ctor(string parameterName)
public string get_ParameterName()
}
internal System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
private bool <ReturnValue>k__BackingField
public bool ReturnValue
public void .ctor(bool returnValue)
public bool get_ReturnValue()
}
internal System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
private string <Message>k__BackingField
private string <Url>k__BackingField
public string Message
public string Url
public void .ctor(string message)
public string get_Message()
public string get_Url()
public void set_Url(string value)
}
internal System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
private string <Message>k__BackingField
private string <Url>k__BackingField
public string Message
public string Url
public void .ctor(string message)
public string get_Message()
public string get_Url()
public void set_Url(string value)
}
internal System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
private string <Syntax>k__BackingField
private Object[] <Arguments>k__BackingField
public string CompositeFormat
public string DateOnlyFormat
public string DateTimeFormat
public string EnumFormat
public string GuidFormat
public string Json
public string NumericFormat
public string Regex
public string TimeOnlyFormat
public string TimeSpanFormat
public string Uri
public string Xml
public string Syntax
public Object[] Arguments
public void .ctor(string syntax)
public void .ctor(string syntax, Object[] arguments)
public string get_Syntax()
public Object[] get_Arguments()
}
internal System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
private string <Category>k__BackingField
private string <CheckId>k__BackingField
private string <Scope>k__BackingField
private string <Target>k__BackingField
private string <MessageId>k__BackingField
private string <Justification>k__BackingField
public string Category
public string CheckId
public string Scope
public string Target
public string MessageId
public string Justification
public void .ctor(string category, string checkId)
public string get_Category()
public string get_CheckId()
public string get_Scope()
public void set_Scope(string value)
public string get_Target()
public void set_Target(string value)
public string get_MessageId()
public void set_MessageId(string value)
public string get_Justification()
public void set_Justification(string value)
}
internal System.HexConverter : object {
public ReadOnlySpan`1<byte> CharToHexLookup
public void ToBytesBuffer(byte value, Span`1<byte> buffer, int startingIndex, Casing casing)
public void ToCharsBuffer(byte value, Span`1<char> buffer, int startingIndex, Casing casing)
public void EncodeToUtf16(ReadOnlySpan`1<byte> bytes, Span`1<char> chars, Casing casing)
public string ToString(ReadOnlySpan`1<byte> bytes, Casing casing)
public char ToCharUpper(int value)
public char ToCharLower(int value)
public bool TryDecodeFromUtf16(ReadOnlySpan`1<char> chars, Span`1<byte> bytes)
public bool TryDecodeFromUtf16(ReadOnlySpan`1<char> chars, Span`1<byte> bytes, Int32& charsProcessed)
public int FromChar(int c)
public int FromUpperChar(int c)
public int FromLowerChar(int c)
public bool IsHexChar(int c)
public bool IsHexUpperChar(int c)
public bool IsHexLowerChar(int c)
public ReadOnlySpan`1<byte> get_CharToHexLookup()
}
internal System.ObsoleteAttribute : Attribute {
private string <Message>k__BackingField
private bool <IsError>k__BackingField
private string <DiagnosticId>k__BackingField
private string <UrlFormat>k__BackingField
public string Message
public bool IsError
public string DiagnosticId
public string UrlFormat
public void .ctor(string message)
public void .ctor(string message, bool error)
public string get_Message()
public bool get_IsError()
public string get_DiagnosticId()
public void set_DiagnosticId(string value)
public string get_UrlFormat()
public void set_UrlFormat(string value)
}
internal System.Obsoletions : object {
internal string SharedUrlFormat
internal string SystemTextEncodingUTF7Message
internal string SystemTextEncodingUTF7DiagId
internal string PrincipalPermissionAttributeMessage
internal string PrincipalPermissionAttributeDiagId
internal string CodeAccessSecurityMessage
internal string CodeAccessSecurityDiagId
internal string ConstrainedExecutionRegionMessage
internal string ConstrainedExecutionRegionDiagId
internal string GlobalAssemblyCacheMessage
internal string GlobalAssemblyCacheDiagId
internal string ThreadAbortMessage
internal string ThreadResetAbortMessage
internal string ThreadAbortDiagId
internal string DefaultCryptoAlgorithmsMessage
internal string DefaultCryptoAlgorithmsDiagId
internal string CreatePdbGeneratorMessage
internal string CreatePdbGeneratorDiagId
internal string AuthenticationManagerMessage
internal string AuthenticationManagerDiagId
internal string RemotingApisMessage
internal string RemotingApisDiagId
internal string BinaryFormatterMessage
internal string BinaryFormatterDiagId
internal string CodeBaseMessage
internal string CodeBaseDiagId
internal string EscapeUriStringMessage
internal string EscapeUriStringDiagId
internal string WebRequestMessage
internal string WebRequestDiagId
internal string DisablePrivateReflectionAttributeMessage
internal string DisablePrivateReflectionAttributeDiagId
internal string GetContextInfoMessage
internal string GetContextInfoDiagId
internal string StrongNameKeyPairMessage
internal string StrongNameKeyPairDiagId
internal string ReflectionOnlyLoadingMessage
internal string ReflectionOnlyLoadingDiagId
internal string RuntimeEnvironmentMessage
internal string RuntimeEnvironmentDiagId
internal string JsonSerializerOptionsIgnoreNullValuesMessage
internal string JsonSerializerOptionsIgnoreNullValuesDiagId
internal string DerivedCryptographicTypesMessage
internal string DerivedCryptographicTypesDiagId
internal string RijndaelMessage
internal string RijndaelDiagId
internal string RNGCryptoServiceProviderMessage
internal string RNGCryptoServiceProviderDiagId
internal string AppDomainCreateUnloadMessage
internal string AppDomainCreateUnloadDiagId
internal string SuppressIldasmAttributeMessage
internal string SuppressIldasmAttributeDiagId
internal string X509CertificateImmutableMessage
internal string X509CertificateImmutableDiagId
internal string PublicKeyPropertyMessage
internal string PublicKeyPropertyDiagId
internal string X509CertificatePrivateKeyMessage
internal string X509CertificatePrivateKeyDiagId
internal string ProduceLegacyHmacValuesMessage
internal string ProduceLegacyHmacValuesDiagId
internal string UseManagedSha1Message
internal string UseManagedSha1DiagId
internal string CryptoConfigEncodeOIDMessage
internal string CryptoConfigEncodeOIDDiagId
internal string CorruptedStateRecoveryMessage
internal string CorruptedStateRecoveryDiagId
internal string Rfc2898CryptDeriveKeyMessage
internal string Rfc2898CryptDeriveKeyDiagId
internal string CmsSignerCspParamsCtorMessage
internal string CmsSignerCspParamsCtorDiagId
internal string SignerInfoCounterSigMessage
internal string SignerInfoCounterSigDiagId
internal string RegexCompileToAssemblyMessage
internal string RegexCompileToAssemblyDiagId
internal string AssemblyNameMembersMessage
internal string AssemblyNameMembersDiagId
internal string SystemDataSerializationFormatBinaryMessage
internal string SystemDataSerializationFormatBinaryDiagId
internal string TlsVersion10and11Message
internal string TlsVersion10and11DiagId
internal string EncryptionPolicyMessage
internal string EncryptionPolicyDiagId
internal string Rfc2898OutdatedCtorMessage
internal string Rfc2898OutdatedCtorDiagId
internal string EccXmlExportImportMessage
internal string EccXmlExportImportDiagId
internal string EcDhPublicKeyBlobMessage
internal string EcDhPublicKeyBlobDiagId
internal string AssemblyNameCodeBaseMessage
internal string AssemblyNameCodeBaseDiagId
internal string CryptoStringFactoryMessage
internal string CryptoStringFactoryDiagId
internal string ControlledExecutionRunMessage
internal string ControlledExecutionRunDiagId
internal string XmlSecureResolverMessage
internal string XmlSecureResolverDiagId
internal string RsaEncryptDecryptValueMessage
internal string RsaEncryptDecryptDiagId
internal string JsonSerializerOptionsAddContextMessage
internal string JsonSerializerOptionsAddContextDiagId
internal string LegacyFormatterMessage
internal string LegacyFormatterDiagId
internal string LegacyFormatterImplMessage
internal string LegacyFormatterImplDiagId
internal string RegexExtensibilityImplMessage
internal string RegexExtensibilityDiagId
internal string AesGcmTagConstructorMessage
internal string AesGcmTagConstructorDiagId
}
internal System.Runtime.CompilerServices.NullableAttribute : Attribute {
public Byte[] NullableFlags
public void .ctor(byte )
public void .ctor(Byte[] )
}
internal System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
public byte Flag
public void .ctor(byte )
}
internal System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
public bool IncludesInternals
public void .ctor(bool )
}
internal System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
public int Version
public void .ctor(int )
}
internal System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
private string <LibraryName>k__BackingField
private string <EntryPoint>k__BackingField
private StringMarshalling <StringMarshalling>k__BackingField
private Type <StringMarshallingCustomType>k__BackingField
private bool <SetLastError>k__BackingField
public string LibraryName
public string EntryPoint
public StringMarshalling StringMarshalling
public Type StringMarshallingCustomType
public bool SetLastError
public void .ctor(string libraryName)
public string get_LibraryName()
public string get_EntryPoint()
public void set_EntryPoint(string value)
public StringMarshalling get_StringMarshalling()
public void set_StringMarshalling(StringMarshalling value)
public Type get_StringMarshallingCustomType()
public void set_StringMarshallingCustomType(Type value)
public bool get_SetLastError()
public void set_SetLastError(bool value)
}
internal System.Runtime.InteropServices.StringMarshalling : Enum {
public int value__
public StringMarshalling Custom
public StringMarshalling Utf8
public StringMarshalling Utf16
}
internal System.Runtime.Versioning.RequiresPreviewFeaturesAttribute : Attribute {
private string <Message>k__BackingField
private string <Url>k__BackingField
public string Message
public string Url
public void .ctor(string message)
public string get_Message()
public string get_Url()
public void set_Url(string value)
}
internal System.SR : object {
private bool s_usingResourceKeys
private ResourceManager s_resourceManager
internal ResourceManager ResourceManager
internal string ArrayDepthTooLarge
internal string CallFlushToAvoidDataLoss
internal string CannotReadIncompleteUTF16
internal string CannotReadInvalidUTF16
internal string CannotStartObjectArrayAfterPrimitiveOrClose
internal string CannotStartObjectArrayWithoutProperty
internal string CannotTranscodeInvalidUtf8
internal string CannotDecodeInvalidBase64
internal string CannotTranscodeInvalidUtf16
internal string CannotEncodeInvalidUTF16
internal string CannotEncodeInvalidUTF8
internal string CannotWritePropertyWithinArray
internal string CannotWritePropertyAfterProperty
internal string CannotWriteValueAfterPrimitiveOrClose
internal string CannotWriteValueWithinObject
internal string DepthTooLarge
internal string DestinationTooShort
internal string EmptyJsonIsInvalid
internal string EndOfCommentNotFound
internal string EndOfStringNotFound
internal string ExpectedEndAfterSingleJson
internal string ExpectedEndOfDigitNotFound
internal string ExpectedFalse
internal string ExpectedJsonTokens
internal string ExpectedOneCompleteToken
internal string ExpectedNextDigitEValueNotFound
internal string ExpectedNull
internal string ExpectedSeparatorAfterPropertyNameNotFound
internal string ExpectedStartOfPropertyNotFound
internal string ExpectedStartOfPropertyOrValueNotFound
internal string ExpectedStartOfValueNotFound
internal string ExpectedTrue
internal string ExpectedValueAfterPropertyNameNotFound
internal string FailedToGetLargerSpan
internal string FoundInvalidCharacter
internal string InvalidCast
internal string InvalidCharacterAfterEscapeWithinString
internal string InvalidCharacterWithinString
internal string InvalidEnumTypeWithSpecialChar
internal string InvalidEndOfJsonNonPrimitive
internal string InvalidHexCharacterWithinString
internal string JsonDocumentDoesNotSupportComments
internal string JsonElementHasWrongType
internal string DefaultTypeInfoResolverImmutable
internal string TypeInfoResolverChainImmutable
internal string TypeInfoImmutable
internal string MaxDepthMustBePositive
internal string CommentHandlingMustBeValid
internal string MismatchedObjectArray
internal string CannotWriteEndAfterProperty
internal string ObjectDepthTooLarge
internal string PropertyNameTooLarge
internal string FormatDecimal
internal string FormatDouble
internal string FormatInt32
internal string FormatInt64
internal string FormatSingle
internal string FormatUInt32
internal string FormatUInt64
internal string RequiredDigitNotFoundAfterDecimal
internal string RequiredDigitNotFoundAfterSign
internal string RequiredDigitNotFoundEndOfData
internal string SpecialNumberValuesNotSupported
internal string ValueTooLarge
internal string ZeroDepthAtEnd
internal string DeserializeUnableToConvertValue
internal string DeserializeWrongType
internal string SerializationInvalidBufferSize
internal string BufferWriterAdvancedTooFar
internal string InvalidComparison
internal string UnsupportedFormat
internal string ExpectedStartOfPropertyOrValueAfterComment
internal string TrailingCommaNotAllowedBeforeArrayEnd
internal string TrailingCommaNotAllowedBeforeObjectEnd
internal string SerializerOptionsReadOnly
internal string SerializerOptions_InvalidChainedResolver
internal string StreamNotWritable
internal string CannotWriteCommentWithEmbeddedDelimiter
internal string SerializerPropertyNameConflict
internal string SerializerPropertyNameNull
internal string SerializationDataExtensionPropertyInvalid
internal string SerializationDuplicateTypeAttribute
internal string ExtensionDataConflictsWithUnmappedMemberHandling
internal string SerializationNotSupportedType
internal string TypeRequiresAsyncSerialization
internal string InvalidCharacterAtStartOfComment
internal string UnexpectedEndOfDataWhileReadingComment
internal string CannotSkip
internal string NotEnoughData
internal string UnexpectedEndOfLineSeparator
internal string JsonSerializerDoesNotSupportComments
internal string DeserializeNoConstructor
internal string DeserializePolymorphicInterface
internal string SerializationConverterOnAttributeNotCompatible
internal string SerializationConverterOnAttributeInvalid
internal string SerializationConverterRead
internal string SerializationConverterNotCompatible
internal string ResolverTypeNotCompatible
internal string ResolverTypeInfoOptionsNotCompatible
internal string SerializationConverterWrite
internal string NamingPolicyReturnNull
internal string SerializationDuplicateAttribute
internal string SerializeUnableToSerialize
internal string FormatByte
internal string FormatInt16
internal string FormatSByte
internal string FormatUInt16
internal string SerializerCycleDetected
internal string InvalidLeadingZeroInNumber
internal string MetadataCannotParsePreservedObjectToImmutable
internal string MetadataDuplicateIdFound
internal string MetadataIdIsNotFirstProperty
internal string MetadataInvalidReferenceToValueType
internal string MetadataInvalidTokenAfterValues
internal string MetadataPreservedArrayFailed
internal string MetadataInvalidPropertyInArrayMetadata
internal string MetadataStandaloneValuesProperty
internal string MetadataReferenceCannotContainOtherProperties
internal string MetadataReferenceNotFound
internal string MetadataValueWasNotString
internal string MetadataInvalidPropertyWithLeadingDollarSign
internal string MetadataUnexpectedProperty
internal string UnmappedJsonProperty
internal string MetadataDuplicateTypeProperty
internal string MultipleMembersBindWithConstructorParameter
internal string ConstructorParamIncompleteBinding
internal string ObjectWithParameterizedCtorRefMetadataNotSupported
internal string SerializerConverterFactoryReturnsNull
internal string SerializationNotSupportedParentType
internal string ExtensionDataCannotBindToCtorParam
internal string BufferMaximumSizeExceeded
internal string CannotSerializeInvalidType
internal string SerializeTypeInstanceNotSupported
internal string JsonIncludeOnInaccessibleProperty
internal string CannotSerializeInvalidMember
internal string CannotPopulateCollection
internal string ConstructorContainsNullParameterNames
internal string DefaultIgnoreConditionAlreadySpecified
internal string DefaultIgnoreConditionInvalid
internal string DictionaryKeyTypeNotSupported
internal string IgnoreConditionOnValueTypeInvalid
internal string NumberHandlingOnPropertyInvalid
internal string ConverterCanConvertMultipleTypes
internal string MetadataReferenceOfTypeCannotBeAssignedToType
internal string DeserializeUnableToAssignValue
internal string DeserializeUnableToAssignNull
internal string SerializerConverterFactoryReturnsJsonConverterFactory
internal string SerializerConverterFactoryInvalidArgument
internal string NodeElementWrongType
internal string NodeElementCannotBeObjectOrArray
internal string NodeAlreadyHasParent
internal string NodeCycleDetected
internal string NodeUnableToConvert
internal string NodeUnableToConvertElement
internal string NodeValueNotAllowed
internal string NodeWrongType
internal string NodeParentWrongType
internal string NodeDuplicateKey
internal string SerializerContextOptionsReadOnly
internal string ConverterForPropertyMustBeValid
internal string NoMetadataForType
internal string AmbiguousMetadataForType
internal string CollectionIsReadOnly
internal string ArrayIndexNegative
internal string ArrayTooSmall
internal string NodeJsonObjectCustomConverterNotAllowedOnExtensionProperty
internal string NoMetadataForTypeProperties
internal string FieldCannotBeVirtual
internal string MissingFSharpCoreMember
internal string FSharpDiscriminatedUnionsNotSupported
internal string Polymorphism_BaseConverterDoesNotSupportMetadata
internal string Polymorphism_DerivedConverterDoesNotSupportMetadata
internal string Polymorphism_TypeDoesNotSupportPolymorphism
internal string Polymorphism_DerivedTypeIsNotSupported
internal string Polymorphism_DerivedTypeIsAlreadySpecified
internal string Polymorphism_TypeDicriminatorIdIsAlreadySpecified
internal string Polymorphism_InvalidCustomTypeDiscriminatorPropertyName
internal string Polymorphism_ConfigurationDoesNotSpecifyDerivedTypes
internal string Polymorphism_UnrecognizedTypeDiscriminator
internal string Polymorphism_RuntimeTypeNotSupported
internal string Polymorphism_RuntimeTypeDiamondAmbiguity
internal string InvalidJsonTypeInfoOperationForKind
internal string CreateObjectConverterNotCompatible
internal string JsonPropertyInfoBoundToDifferentParent
internal string JsonSerializerOptionsNoTypeInfoResolverSpecified
internal string JsonSerializerIsReflectionDisabled
internal string JsonPolymorphismOptionsAssociatedWithDifferentJsonTypeInfo
internal string JsonPropertyRequiredAndNotDeserializable
internal string JsonPropertyRequiredAndExtensionData
internal string JsonRequiredPropertiesMissing
internal string ObjectCreationHandlingPopulateNotSupportedByConverter
internal string ObjectCreationHandlingPropertyMustHaveAGetter
internal string ObjectCreationHandlingPropertyValueTypeMustHaveASetter
internal string ObjectCreationHandlingPropertyCannotAllowPolymorphicDeserialization
internal string ObjectCreationHandlingPropertyCannotAllowReadOnlyMember
internal string ObjectCreationHandlingPropertyCannotAllowReferenceHandling
internal string ObjectCreationHandlingPropertyDoesNotSupportParameterizedConstructors
internal string FormatInt128
internal string FormatUInt128
internal string FormatHalf
internal bool UsingResourceKeys()
private string GetResourceString(string resourceKey)
private string GetResourceString(string resourceKey, string defaultString)
internal string Format(string resourceFormat, object p1)
internal string Format(string resourceFormat, object p1, object p2)
internal string Format(string resourceFormat, object p1, object p2, object p3)
internal string Format(string resourceFormat, Object[] args)
internal string Format(IFormatProvider provider, string resourceFormat, object p1)
internal string Format(IFormatProvider provider, string resourceFormat, object p1, object p2)
internal string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3)
internal string Format(IFormatProvider provider, string resourceFormat, Object[] args)
internal ResourceManager get_ResourceManager()
internal string get_ArrayDepthTooLarge()
internal string get_CallFlushToAvoidDataLoss()
internal string get_CannotReadIncompleteUTF16()
internal string get_CannotReadInvalidUTF16()
internal string get_CannotStartObjectArrayAfterPrimitiveOrClose()
internal string get_CannotStartObjectArrayWithoutProperty()
internal string get_CannotTranscodeInvalidUtf8()
internal string get_CannotDecodeInvalidBase64()
internal string get_CannotTranscodeInvalidUtf16()
internal string get_CannotEncodeInvalidUTF16()
internal string get_CannotEncodeInvalidUTF8()
internal string get_CannotWritePropertyWithinArray()
internal string get_CannotWritePropertyAfterProperty()
internal string get_CannotWriteValueAfterPrimitiveOrClose()
internal string get_CannotWriteValueWithinObject()
internal string get_DepthTooLarge()
internal string get_DestinationTooShort()
internal string get_EmptyJsonIsInvalid()
internal string get_EndOfCommentNotFound()
internal string get_EndOfStringNotFound()
internal string get_ExpectedEndAfterSingleJson()
internal string get_ExpectedEndOfDigitNotFound()
internal string get_ExpectedFalse()
internal string get_ExpectedJsonTokens()
internal string get_ExpectedOneCompleteToken()
internal string get_ExpectedNextDigitEValueNotFound()
internal string get_ExpectedNull()
internal string get_ExpectedSeparatorAfterPropertyNameNotFound()
internal string get_ExpectedStartOfPropertyNotFound()
internal string get_ExpectedStartOfPropertyOrValueNotFound()
internal string get_ExpectedStartOfValueNotFound()
internal string get_ExpectedTrue()
internal string get_ExpectedValueAfterPropertyNameNotFound()
internal string get_FailedToGetLargerSpan()
internal string get_FoundInvalidCharacter()
internal string get_InvalidCast()
internal string get_InvalidCharacterAfterEscapeWithinString()
internal string get_InvalidCharacterWithinString()
internal string get_InvalidEnumTypeWithSpecialChar()
internal string get_InvalidEndOfJsonNonPrimitive()
internal string get_InvalidHexCharacterWithinString()
internal string get_JsonDocumentDoesNotSupportComments()
internal string get_JsonElementHasWrongType()
internal string get_DefaultTypeInfoResolverImmutable()
internal string get_TypeInfoResolverChainImmutable()
internal string get_TypeInfoImmutable()
internal string get_MaxDepthMustBePositive()
internal string get_CommentHandlingMustBeValid()
internal string get_MismatchedObjectArray()
internal string get_CannotWriteEndAfterProperty()
internal string get_ObjectDepthTooLarge()
internal string get_PropertyNameTooLarge()
internal string get_FormatDecimal()
internal string get_FormatDouble()
internal string get_FormatInt32()
internal string get_FormatInt64()
internal string get_FormatSingle()
internal string get_FormatUInt32()
internal string get_FormatUInt64()
internal string get_RequiredDigitNotFoundAfterDecimal()
internal string get_RequiredDigitNotFoundAfterSign()
internal string get_RequiredDigitNotFoundEndOfData()
internal string get_SpecialNumberValuesNotSupported()
internal string get_ValueTooLarge()
internal string get_ZeroDepthAtEnd()
internal string get_DeserializeUnableToConvertValue()
internal string get_DeserializeWrongType()
internal string get_SerializationInvalidBufferSize()
internal string get_BufferWriterAdvancedTooFar()
internal string get_InvalidComparison()
internal string get_UnsupportedFormat()
internal string get_ExpectedStartOfPropertyOrValueAfterComment()
internal string get_TrailingCommaNotAllowedBeforeArrayEnd()
internal string get_TrailingCommaNotAllowedBeforeObjectEnd()
internal string get_SerializerOptionsReadOnly()
internal string get_SerializerOptions_InvalidChainedResolver()
internal string get_StreamNotWritable()
internal string get_CannotWriteCommentWithEmbeddedDelimiter()
internal string get_SerializerPropertyNameConflict()
internal string get_SerializerPropertyNameNull()
internal string get_SerializationDataExtensionPropertyInvalid()
internal string get_SerializationDuplicateTypeAttribute()
internal string get_ExtensionDataConflictsWithUnmappedMemberHandling()
internal string get_SerializationNotSupportedType()
internal string get_TypeRequiresAsyncSerialization()
internal string get_InvalidCharacterAtStartOfComment()
internal string get_UnexpectedEndOfDataWhileReadingComment()
internal string get_CannotSkip()
internal string get_NotEnoughData()
internal string get_UnexpectedEndOfLineSeparator()
internal string get_JsonSerializerDoesNotSupportComments()
internal string get_DeserializeNoConstructor()
internal string get_DeserializePolymorphicInterface()
internal string get_SerializationConverterOnAttributeNotCompatible()
internal string get_SerializationConverterOnAttributeInvalid()
internal string get_SerializationConverterRead()
internal string get_SerializationConverterNotCompatible()
internal string get_ResolverTypeNotCompatible()
internal string get_ResolverTypeInfoOptionsNotCompatible()
internal string get_SerializationConverterWrite()
internal string get_NamingPolicyReturnNull()
internal string get_SerializationDuplicateAttribute()
internal string get_SerializeUnableToSerialize()
internal string get_FormatByte()
internal string get_FormatInt16()
internal string get_FormatSByte()
internal string get_FormatUInt16()
internal string get_SerializerCycleDetected()
internal string get_InvalidLeadingZeroInNumber()
internal string get_MetadataCannotParsePreservedObjectToImmutable()
internal string get_MetadataDuplicateIdFound()
internal string get_MetadataIdIsNotFirstProperty()
internal string get_MetadataInvalidReferenceToValueType()
internal string get_MetadataInvalidTokenAfterValues()
internal string get_MetadataPreservedArrayFailed()
internal string get_MetadataInvalidPropertyInArrayMetadata()
internal string get_MetadataStandaloneValuesProperty()
internal string get_MetadataReferenceCannotContainOtherProperties()
internal string get_MetadataReferenceNotFound()
internal string get_MetadataValueWasNotString()
internal string get_MetadataInvalidPropertyWithLeadingDollarSign()
internal string get_MetadataUnexpectedProperty()
internal string get_UnmappedJsonProperty()
internal string get_MetadataDuplicateTypeProperty()
internal string get_MultipleMembersBindWithConstructorParameter()
internal string get_ConstructorParamIncompleteBinding()
internal string get_ObjectWithParameterizedCtorRefMetadataNotSupported()
internal string get_SerializerConverterFactoryReturnsNull()
internal string get_SerializationNotSupportedParentType()
internal string get_ExtensionDataCannotBindToCtorParam()
internal string get_BufferMaximumSizeExceeded()
internal string get_CannotSerializeInvalidType()
internal string get_SerializeTypeInstanceNotSupported()
internal string get_JsonIncludeOnInaccessibleProperty()
internal string get_CannotSerializeInvalidMember()
internal string get_CannotPopulateCollection()
internal string get_ConstructorContainsNullParameterNames()
internal string get_DefaultIgnoreConditionAlreadySpecified()
internal string get_DefaultIgnoreConditionInvalid()
internal string get_DictionaryKeyTypeNotSupported()
internal string get_IgnoreConditionOnValueTypeInvalid()
internal string get_NumberHandlingOnPropertyInvalid()
internal string get_ConverterCanConvertMultipleTypes()
internal string get_MetadataReferenceOfTypeCannotBeAssignedToType()
internal string get_DeserializeUnableToAssignValue()
internal string get_DeserializeUnableToAssignNull()
internal string get_SerializerConverterFactoryReturnsJsonConverterFactory()
internal string get_SerializerConverterFactoryInvalidArgument()
internal string get_NodeElementWrongType()
internal string get_NodeElementCannotBeObjectOrArray()
internal string get_NodeAlreadyHasParent()
internal string get_NodeCycleDetected()
internal string get_NodeUnableToConvert()
internal string get_NodeUnableToConvertElement()
internal string get_NodeValueNotAllowed()
internal string get_NodeWrongType()
internal string get_NodeParentWrongType()
internal string get_NodeDuplicateKey()
internal string get_SerializerContextOptionsReadOnly()
internal string get_ConverterForPropertyMustBeValid()
internal string get_NoMetadataForType()
internal string get_AmbiguousMetadataForType()
internal string get_CollectionIsReadOnly()
internal string get_ArrayIndexNegative()
internal string get_ArrayTooSmall()
internal string get_NodeJsonObjectCustomConverterNotAllowedOnExtensionProperty()
internal string get_NoMetadataForTypeProperties()
internal string get_FieldCannotBeVirtual()
internal string get_MissingFSharpCoreMember()
internal string get_FSharpDiscriminatedUnionsNotSupported()
internal string get_Polymorphism_BaseConverterDoesNotSupportMetadata()
internal string get_Polymorphism_DerivedConverterDoesNotSupportMetadata()
internal string get_Polymorphism_TypeDoesNotSupportPolymorphism()
internal string get_Polymorphism_DerivedTypeIsNotSupported()
internal string get_Polymorphism_DerivedTypeIsAlreadySpecified()
internal string get_Polymorphism_TypeDicriminatorIdIsAlreadySpecified()
internal string get_Polymorphism_InvalidCustomTypeDiscriminatorPropertyName()
internal string get_Polymorphism_ConfigurationDoesNotSpecifyDerivedTypes()
internal string get_Polymorphism_UnrecognizedTypeDiscriminator()
internal string get_Polymorphism_RuntimeTypeNotSupported()
internal string get_Polymorphism_RuntimeTypeDiamondAmbiguity()
internal string get_InvalidJsonTypeInfoOperationForKind()
internal string get_CreateObjectConverterNotCompatible()
internal string get_JsonPropertyInfoBoundToDifferentParent()
internal string get_JsonSerializerOptionsNoTypeInfoResolverSpecified()
internal string get_JsonSerializerIsReflectionDisabled()
internal string get_JsonPolymorphismOptionsAssociatedWithDifferentJsonTypeInfo()
internal string get_JsonPropertyRequiredAndNotDeserializable()
internal string get_JsonPropertyRequiredAndExtensionData()
internal string get_JsonRequiredPropertiesMissing()
internal string get_ObjectCreationHandlingPopulateNotSupportedByConverter()
internal string get_ObjectCreationHandlingPropertyMustHaveAGetter()
internal string get_ObjectCreationHandlingPropertyValueTypeMustHaveASetter()
internal string get_ObjectCreationHandlingPropertyCannotAllowPolymorphicDeserialization()
internal string get_ObjectCreationHandlingPropertyCannotAllowReadOnlyMember()
internal string get_ObjectCreationHandlingPropertyCannotAllowReferenceHandling()
internal string get_ObjectCreationHandlingPropertyDoesNotSupportParameterizedConstructors()
internal string get_FormatInt128()
internal string get_FormatUInt128()
internal string get_FormatHalf()
}
internal System.Text.Json.AppContextSwitchHelper : object {
private bool <IsSourceGenReflectionFallbackEnabled>k__BackingField
public bool IsSourceGenReflectionFallbackEnabled
public bool get_IsSourceGenReflectionFallbackEnabled()
}
internal System.Text.Json.Arguments`4 : object {
public TArg0 Arg0
public TArg1 Arg1
public TArg2 Arg2
public TArg3 Arg3
}
internal System.Text.Json.ArgumentState : object {
public object Arguments
public ValueTuple`5[] FoundProperties
public ValueTuple`3[] FoundPropertiesAsync
public int FoundPropertyCount
public JsonParameterInfo JsonParameterInfo
public int ParameterIndex
public List`1<ParameterRef> ParameterRefCache
}
internal System.Text.Json.BitStack : ValueType {
private int AllocationFreeMaxDepth
private int DefaultInitialArraySize
private Int32[] _array
private ulong _allocationFreeContainer
private int _currentDepth
public int CurrentDepth
public int get_CurrentDepth()
public void PushTrue()
public void PushFalse()
private void PushToArray(bool value)
public bool Pop()
private bool PopFromArray()
private void DoubleArray(int minSize)
public void SetFirstBit()
public void ResetFirstBit()
private int Div32Rem(int number, Int32& remainder)
}
internal System.Text.Json.ConsumeNumberResult : Enum {
public byte value__
public ConsumeNumberResult Success
public ConsumeNumberResult OperationIncomplete
public ConsumeNumberResult NeedMoreData
}
internal System.Text.Json.ConsumeTokenResult : Enum {
public byte value__
public ConsumeTokenResult Success
public ConsumeTokenResult NotEnoughDataRollBackState
public ConsumeTokenResult IncompleteNoRollBackNecessary
}
internal System.Text.Json.ConverterStrategy : Enum {
public byte value__
public ConverterStrategy None
public ConverterStrategy Object
public ConverterStrategy Value
public ConverterStrategy Enumerable
public ConverterStrategy Dictionary
}
internal System.Text.Json.DataType : Enum {
public int value__
public DataType Boolean
public DataType DateOnly
public DataType DateTime
public DataType DateTimeOffset
public DataType TimeOnly
public DataType TimeSpan
public DataType Base64String
public DataType Guid
public DataType Version
}
internal System.Text.Json.ExceptionResource : Enum {
public int value__
public ExceptionResource ArrayDepthTooLarge
public ExceptionResource EndOfCommentNotFound
public ExceptionResource EndOfStringNotFound
public ExceptionResource RequiredDigitNotFoundAfterDecimal
public ExceptionResource RequiredDigitNotFoundAfterSign
public ExceptionResource RequiredDigitNotFoundEndOfData
public ExceptionResource ExpectedEndAfterSingleJson
public ExceptionResource ExpectedEndOfDigitNotFound
public ExceptionResource ExpectedFalse
public ExceptionResource ExpectedNextDigitEValueNotFound
public ExceptionResource ExpectedNull
public ExceptionResource ExpectedSeparatorAfterPropertyNameNotFound
public ExceptionResource ExpectedStartOfPropertyNotFound
public ExceptionResource ExpectedStartOfPropertyOrValueNotFound
public ExceptionResource ExpectedStartOfPropertyOrValueAfterComment
public ExceptionResource ExpectedStartOfValueNotFound
public ExceptionResource ExpectedTrue
public ExceptionResource ExpectedValueAfterPropertyNameNotFound
public ExceptionResource FoundInvalidCharacter
public ExceptionResource InvalidCharacterWithinString
public ExceptionResource InvalidCharacterAfterEscapeWithinString
public ExceptionResource InvalidHexCharacterWithinString
public ExceptionResource InvalidEndOfJsonNonPrimitive
public ExceptionResource MismatchedObjectArray
public ExceptionResource ObjectDepthTooLarge
public ExceptionResource ZeroDepthAtEnd
public ExceptionResource DepthTooLarge
public ExceptionResource CannotStartObjectArrayWithoutProperty
public ExceptionResource CannotStartObjectArrayAfterPrimitiveOrClose
public ExceptionResource CannotWriteValueWithinObject
public ExceptionResource CannotWriteValueAfterPrimitiveOrClose
public ExceptionResource CannotWritePropertyWithinArray
public ExceptionResource ExpectedJsonTokens
public ExceptionResource TrailingCommaNotAllowedBeforeArrayEnd
public ExceptionResource TrailingCommaNotAllowedBeforeObjectEnd
public ExceptionResource InvalidCharacterAtStartOfComment
public ExceptionResource UnexpectedEndOfDataWhileReadingComment
public ExceptionResource UnexpectedEndOfLineSeparator
public ExceptionResource ExpectedOneCompleteToken
public ExceptionResource NotEnoughData
public ExceptionResource InvalidLeadingZeroInNumber
}
internal System.Text.Json.JsonCamelCaseNamingPolicy : JsonNamingPolicy {
public string ConvertName(string name)
private void FixCasing(Span`1<char> chars)
}
public System.Text.Json.JsonCommentHandling : Enum {
public byte value__
public JsonCommentHandling Disallow
public JsonCommentHandling Skip
public JsonCommentHandling Allow
}
internal System.Text.Json.JsonConstants : object {
public string DoubleFormatString
public string SingleFormatString
public int StackallocByteThreshold
public int StackallocCharThreshold
public byte OpenBrace
public byte CloseBrace
public byte OpenBracket
public byte CloseBracket
public byte Space
public byte CarriageReturn
public byte LineFeed
public byte Tab
public byte ListSeparator
public byte KeyValueSeparator
public byte Quote
public byte BackSlash
public byte Slash
public byte BackSpace
public byte FormFeed
public byte Asterisk
public byte Colon
public byte Period
public byte Plus
public byte Hyphen
public byte UtcOffsetToken
public byte TimePrefix
public byte StartingByteOfNonStandardSeparator
public int SpacesPerIndent
public int RemoveFlagsBitMask
public int MaxExpansionFactorWhileEscaping
public int MaxExpansionFactorWhileTranscoding
public long ArrayPoolMaxSizeBeforeUsingNormalAlloc
public int MaxUtf16RawValueLength
public int MaxEscapedTokenSize
public int MaxUnescapedTokenSize
public int MaxCharacterTokenSize
public int MaximumFormatBooleanLength
public int MaximumFormatInt64Length
public int MaximumFormatUInt64Length
public int MaximumFormatDoubleLength
public int MaximumFormatSingleLength
public int MaximumFormatDecimalLength
public int MaximumFormatGuidLength
public int MaximumEscapedGuidLength
public int MaximumFormatDateTimeLength
public int MaximumFormatDateTimeOffsetLength
public int MaxDateTimeUtcOffsetHours
public int DateTimeNumFractionDigits
public int MaxDateTimeFraction
public int DateTimeParseNumFractionDigits
public int MaximumDateTimeOffsetParseLength
public int MinimumDateTimeParseLength
public int MaximumEscapedDateTimeOffsetParseLength
public int MaximumLiteralLength
public char HighSurrogateStart
public char HighSurrogateEnd
public char LowSurrogateStart
public char LowSurrogateEnd
public int UnicodePlane01StartValue
public int HighSurrogateStartValue
public int HighSurrogateEndValue
public int LowSurrogateStartValue
public int LowSurrogateEndValue
public int BitShiftBy10
public int UnboxedParameterCountThreshold
public ReadOnlySpan`1<byte> Utf8Bom
public ReadOnlySpan`1<byte> TrueValue
public ReadOnlySpan`1<byte> FalseValue
public ReadOnlySpan`1<byte> NullValue
public ReadOnlySpan`1<byte> NaNValue
public ReadOnlySpan`1<byte> PositiveInfinityValue
public ReadOnlySpan`1<byte> NegativeInfinityValue
public ReadOnlySpan`1<byte> Delimiters
public ReadOnlySpan`1<byte> EscapableChars
public ReadOnlySpan`1<byte> get_Utf8Bom()
public ReadOnlySpan`1<byte> get_TrueValue()
public ReadOnlySpan`1<byte> get_FalseValue()
public ReadOnlySpan`1<byte> get_NullValue()
public ReadOnlySpan`1<byte> get_NaNValue()
public ReadOnlySpan`1<byte> get_PositiveInfinityValue()
public ReadOnlySpan`1<byte> get_NegativeInfinityValue()
public ReadOnlySpan`1<byte> get_Delimiters()
public ReadOnlySpan`1<byte> get_EscapableChars()
}
public System.Text.Json.JsonDocument : object {
private ReadOnlyMemory`1<byte> _utf8Json
private MetadataDb _parsedData
private Byte[] _extraRentedArrayPoolBytes
private PooledByteBufferWriter _extraPooledByteBufferWriter
private bool <IsDisposable>k__BackingField
private JsonDocument s_nullLiteral
private JsonDocument s_trueLiteral
private JsonDocument s_falseLiteral
private int UnseekableStreamInitialRentSize
internal bool IsDisposable
public JsonElement RootElement
internal bool get_IsDisposable()
public JsonElement get_RootElement()
private void .ctor(ReadOnlyMemory`1<byte> utf8Json, MetadataDb parsedData, Byte[] extraRentedArrayPoolBytes, PooledByteBufferWriter extraPooledByteBufferWriter, bool isDisposable)
public void Dispose()
public void WriteTo(Utf8JsonWriter writer)
internal JsonTokenType GetJsonTokenType(int index)
internal int GetArrayLength(int index)
internal JsonElement GetArrayIndexElement(int currentIndex, int arrayIndex)
internal int GetEndIndex(int index, bool includeEndElement)
internal ReadOnlyMemory`1<byte> GetRootRawValue()
internal ReadOnlyMemory`1<byte> GetRawValue(int index, bool includeQuotes)
private ReadOnlyMemory`1<byte> GetPropertyRawValue(int valueIndex)
internal string GetString(int index, JsonTokenType expectedType)
internal bool TextEquals(int index, ReadOnlySpan`1<char> otherText, bool isPropertyName)
internal bool TextEquals(int index, ReadOnlySpan`1<byte> otherUtf8Text, bool isPropertyName, bool shouldUnescape)
internal string GetNameOfPropertyValue(int index)
internal bool TryGetValue(int index, Byte[]& value)
internal bool TryGetValue(int index, SByte& value)
internal bool TryGetValue(int index, Byte& value)
internal bool TryGetValue(int index, Int16& value)
internal bool TryGetValue(int index, UInt16& value)
internal bool TryGetValue(int index, Int32& value)
internal bool TryGetValue(int index, UInt32& value)
internal bool TryGetValue(int index, Int64& value)
internal bool TryGetValue(int index, UInt64& value)
internal bool TryGetValue(int index, Double& value)
internal bool TryGetValue(int index, Single& value)
internal bool TryGetValue(int index, Decimal& value)
internal bool TryGetValue(int index, DateTime& value)
internal bool TryGetValue(int index, DateTimeOffset& value)
internal bool TryGetValue(int index, Guid& value)
internal string GetRawValueAsString(int index)
internal string GetPropertyRawValueAsString(int valueIndex)
internal JsonElement CloneElement(int index)
internal void WriteElementTo(int index, Utf8JsonWriter writer)
private void WriteComplexElement(int index, Utf8JsonWriter writer)
private ReadOnlySpan`1<byte> UnescapeString(DbRow& row, ArraySegment`1& rented)
private void ClearAndReturn(ArraySegment`1<byte> rented)
private void WritePropertyName(DbRow& row, Utf8JsonWriter writer)
private void WriteString(DbRow& row, Utf8JsonWriter writer)
private void Parse(ReadOnlySpan`1<byte> utf8JsonSpan, JsonReaderOptions readerOptions, MetadataDb& database, StackRowStack& stack)
private void CheckNotDisposed()
private void CheckExpectedType(JsonTokenType expected, JsonTokenType actual)
private void CheckSupportedOptions(JsonReaderOptions readerOptions, string paramName)
public JsonDocument Parse(ReadOnlyMemory`1<byte> utf8Json, JsonDocumentOptions options)
public JsonDocument Parse(ReadOnlySequence`1<byte> utf8Json, JsonDocumentOptions options)
public JsonDocument Parse(Stream utf8Json, JsonDocumentOptions options)
internal JsonDocument ParseRented(PooledByteBufferWriter utf8Json, JsonDocumentOptions options)
internal JsonDocument ParseValue(Stream utf8Json, JsonDocumentOptions options)
internal JsonDocument ParseValue(ReadOnlySpan`1<byte> utf8Json, JsonDocumentOptions options)
internal JsonDocument ParseValue(string json, JsonDocumentOptions options)
public Task`1<JsonDocument> ParseAsync(Stream utf8Json, JsonDocumentOptions options, CancellationToken cancellationToken)
private Task`1<JsonDocument> ParseAsyncCore(Stream utf8Json, JsonDocumentOptions options, CancellationToken cancellationToken)
internal Task`1<JsonDocument> ParseAsyncCoreUnrented(Stream utf8Json, JsonDocumentOptions options, CancellationToken cancellationToken)
public JsonDocument Parse(ReadOnlyMemory`1<char> json, JsonDocumentOptions options)
internal JsonDocument ParseValue(ReadOnlyMemory`1<char> json, JsonDocumentOptions options)
public JsonDocument Parse(string json, JsonDocumentOptions options)
public bool TryParseValue(Utf8JsonReader& reader, JsonDocument& document)
public JsonDocument ParseValue(Utf8JsonReader& reader)
internal bool TryParseValue(Utf8JsonReader& reader, JsonDocument& document, bool shouldThrow, bool useArrayPools)
private JsonDocument CreateForLiteral(JsonTokenType tokenType)
private JsonDocument Parse(ReadOnlyMemory`1<byte> utf8Json, JsonReaderOptions readerOptions, Byte[] extraRentedArrayPoolBytes, PooledByteBufferWriter extraPooledByteBufferWriter)
private JsonDocument ParseUnrented(ReadOnlyMemory`1<byte> utf8Json, JsonReaderOptions readerOptions, JsonTokenType tokenType)
private ArraySegment`1<byte> ReadToEnd(Stream stream)
private Task`1<ArraySegment`1<byte>> ReadToEndAsync(Stream stream, CancellationToken cancellationToken)
internal bool TryGetNamedPropertyValue(int index, ReadOnlySpan`1<char> propertyName, JsonElement& value)
internal bool TryGetNamedPropertyValue(int index, ReadOnlySpan`1<byte> propertyName, JsonElement& value)
private bool TryGetNamedPropertyValue(int startIndex, int endIndex, ReadOnlySpan`1<byte> propertyName, JsonElement& value)
internal JsonDocument <CreateForLiteral>g__Create|73_0(Byte[] utf8Json, <>c__DisplayClass73_0& )
}
public System.Text.Json.JsonDocumentOptions : ValueType {
internal int DefaultMaxDepth
private int _maxDepth
private JsonCommentHandling _commentHandling
private bool <AllowTrailingCommas>k__BackingField
public JsonCommentHandling CommentHandling
public int MaxDepth
public bool AllowTrailingCommas
public JsonCommentHandling get_CommentHandling()
public void set_CommentHandling(JsonCommentHandling value)
public int get_MaxDepth()
public void set_MaxDepth(int value)
public bool get_AllowTrailingCommas()
public void set_AllowTrailingCommas(bool value)
internal JsonReaderOptions GetReaderOptions()
}
public System.Text.Json.JsonElement : ValueType {
private JsonDocument _parent
private int _idx
private JsonTokenType TokenType
public JsonValueKind ValueKind
public JsonElement Item
private string DebuggerDisplay
internal void .ctor(JsonDocument parent, int idx)
private JsonTokenType get_TokenType()
public JsonValueKind get_ValueKind()
public JsonElement get_Item(int index)
public int GetArrayLength()
public JsonElement GetProperty(string propertyName)
public JsonElement GetProperty(ReadOnlySpan`1<char> propertyName)
public JsonElement GetProperty(ReadOnlySpan`1<byte> utf8PropertyName)
public bool TryGetProperty(string propertyName, JsonElement& value)
public bool TryGetProperty(ReadOnlySpan`1<char> propertyName, JsonElement& value)
public bool TryGetProperty(ReadOnlySpan`1<byte> utf8PropertyName, JsonElement& value)
public bool GetBoolean()
public string GetString()
public bool TryGetBytesFromBase64(Byte[]& value)
public Byte[] GetBytesFromBase64()
public bool TryGetSByte(SByte& value)
public sbyte GetSByte()
public bool TryGetByte(Byte& value)
public byte GetByte()
public bool TryGetInt16(Int16& value)
public short GetInt16()
public bool TryGetUInt16(UInt16& value)
public ushort GetUInt16()
public bool TryGetInt32(Int32& value)
public int GetInt32()
public bool TryGetUInt32(UInt32& value)
public UInt32 GetUInt32()
public bool TryGetInt64(Int64& value)
public long GetInt64()
public bool TryGetUInt64(UInt64& value)
public ulong GetUInt64()
public bool TryGetDouble(Double& value)
public double GetDouble()
public bool TryGetSingle(Single& value)
public float GetSingle()
public bool TryGetDecimal(Decimal& value)
public decimal GetDecimal()
public bool TryGetDateTime(DateTime& value)
public DateTime GetDateTime()
public bool TryGetDateTimeOffset(DateTimeOffset& value)
public DateTimeOffset GetDateTimeOffset()
public bool TryGetGuid(Guid& value)
public Guid GetGuid()
internal string GetPropertyName()
public string GetRawText()
internal ReadOnlyMemory`1<byte> GetRawValue()
internal string GetPropertyRawText()
public bool ValueEquals(string text)
public bool ValueEquals(ReadOnlySpan`1<byte> utf8Text)
public bool ValueEquals(ReadOnlySpan`1<char> text)
internal bool TextEqualsHelper(ReadOnlySpan`1<byte> utf8Text, bool isPropertyName, bool shouldUnescape)
internal bool TextEqualsHelper(ReadOnlySpan`1<char> text, bool isPropertyName)
public void WriteTo(Utf8JsonWriter writer)
public ArrayEnumerator EnumerateArray()
public ObjectEnumerator EnumerateObject()
public string ToString()
public JsonElement Clone()
private void CheckValidInstance()
private string get_DebuggerDisplay()
public JsonElement ParseValue(Utf8JsonReader& reader)
internal JsonElement ParseValue(Stream utf8Json, JsonDocumentOptions options)
internal JsonElement ParseValue(ReadOnlySpan`1<byte> utf8Json, JsonDocumentOptions options)
internal JsonElement ParseValue(string json, JsonDocumentOptions options)
public bool TryParseValue(Utf8JsonReader& reader, Nullable`1& element)
internal bool <GetBoolean>g__ThrowJsonElementWrongTypeException|17_0(JsonTokenType actualType)
}
public System.Text.Json.JsonEncodedText : ValueType {
internal Byte[] _utf8Value
internal string _value
public ReadOnlySpan`1<byte> EncodedUtf8Bytes
public string Value
public ReadOnlySpan`1<byte> get_EncodedUtf8Bytes()
public string get_Value()
private void .ctor(Byte[] utf8Value)
public JsonEncodedText Encode(string value, JavaScriptEncoder encoder)
public JsonEncodedText Encode(ReadOnlySpan`1<char> value, JavaScriptEncoder encoder)
private JsonEncodedText TranscodeAndEncode(ReadOnlySpan`1<char> value, JavaScriptEncoder encoder)
public JsonEncodedText Encode(ReadOnlySpan`1<byte> utf8Value, JavaScriptEncoder encoder)
private JsonEncodedText EncodeHelper(ReadOnlySpan`1<byte> utf8Value, JavaScriptEncoder encoder)
public bool Equals(JsonEncodedText other)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
public System.Text.Json.JsonException : Exception {
internal string _message
private bool <AppendPathInformation>k__BackingField
private Nullable`1<long> <LineNumber>k__BackingField
private Nullable`1<long> <BytePositionInLine>k__BackingField
private string <Path>k__BackingField
internal bool AppendPathInformation
public Nullable`1<long> LineNumber
public Nullable`1<long> BytePositionInLine
public string Path
public string Message
public void .ctor(string message, string path, Nullable`1<long> lineNumber, Nullable`1<long> bytePositionInLine, Exception innerException)
public void .ctor(string message, string path, Nullable`1<long> lineNumber, Nullable`1<long> bytePositionInLine)
public void .ctor(string message, Exception innerException)
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
internal bool get_AppendPathInformation()
internal void set_AppendPathInformation(bool value)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public Nullable`1<long> get_LineNumber()
internal void set_LineNumber(Nullable`1<long> value)
public Nullable`1<long> get_BytePositionInLine()
internal void set_BytePositionInLine(Nullable`1<long> value)
public string get_Path()
internal void set_Path(string value)
public string get_Message()
internal void SetMessage(string message)
}
internal System.Text.Json.JsonHelpers : object {
private ReadOnlySpan`1<int> DaysToMonth365
private ReadOnlySpan`1<int> DaysToMonth366
public bool TryAdd(Dictionary`2<TKey, TValue> dictionary, TKey key, TValue value)
public bool TryDequeue(Queue`1<T> queue, T& result)
internal bool RequiresSpecialNumberHandlingOnWrite(Nullable`1<JsonNumberHandling> handling)
internal void StableSortByKey(List`1<T> items, Func`2<T, TKey> keySelector)
public T[] TraverseGraphWithTopologicalSort(T entryNode, Func`2<T, ICollection`1<T>> getChildren, IEqualityComparer`1<T> comparer)
public ReadOnlySpan`1<byte> GetSpan(Utf8JsonReader& reader)
public bool IsValidUnicodeScalar(UInt32 value)
public bool IsInRangeInclusive(UInt32 value, UInt32 lowerBound, UInt32 upperBound)
public bool IsInRangeInclusive(int value, int lowerBound, int upperBound)
public bool IsInRangeInclusive(long value, long lowerBound, long upperBound)
public bool IsInRangeInclusive(JsonTokenType value, JsonTokenType lowerBound, JsonTokenType upperBound)
public bool IsDigit(byte value)
public void ReadWithVerify(Utf8JsonReader& reader)
public string Utf8GetString(ReadOnlySpan`1<byte> bytes)
public Dictionary`2<TKey, TValue> CreateDictionaryFromCollection(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer)
public bool IsFinite(double value)
public bool IsFinite(float value)
public void ValidateInt32MaxArrayLength(UInt32 length)
public bool HasAllSet(BitArray bitArray)
public bool IsValidDateTimeOffsetParseLength(int length)
public bool IsValidUnescapedDateTimeOffsetParseLength(int length)
public bool TryParseAsISO(ReadOnlySpan`1<byte> source, DateTime& value)
public bool TryParseAsISO(ReadOnlySpan`1<byte> source, DateTimeOffset& value)
private bool TryParseDateTimeOffset(ReadOnlySpan`1<byte> source, DateTimeParseData& parseData)
private bool TryGetNextTwoDigits(ReadOnlySpan`1<byte> source, Int32& value)
private bool TryCreateDateTimeOffset(DateTime dateTime, DateTimeParseData& parseData, DateTimeOffset& value)
private bool TryCreateDateTimeOffset(DateTimeParseData& parseData, DateTimeOffset& value)
private bool TryCreateDateTimeOffsetInterpretingDataAsLocalTime(DateTimeParseData parseData, DateTimeOffset& value)
private bool TryCreateDateTime(DateTimeParseData parseData, DateTimeKind kind, DateTime& value)
private ReadOnlySpan`1<int> get_DaysToMonth365()
private ReadOnlySpan`1<int> get_DaysToMonth366()
public Byte[] GetEscapedPropertyNameSection(ReadOnlySpan`1<byte> utf8Value, JavaScriptEncoder encoder)
public Byte[] EscapeValue(ReadOnlySpan`1<byte> utf8Value, int firstEscapeIndexVal, JavaScriptEncoder encoder)
private Byte[] GetEscapedPropertyNameSection(ReadOnlySpan`1<byte> utf8Value, int firstEscapeIndexVal, JavaScriptEncoder encoder)
private Byte[] GetPropertyNameSection(ReadOnlySpan`1<byte> utf8Value)
internal bool <TryParseDateTimeOffset>g__ParseOffset|24_0(DateTimeParseData& parseData, ReadOnlySpan`1<byte> offsetData)
}
public System.Text.Json.JsonNamingPolicy : object {
private JsonNamingPolicy <CamelCase>k__BackingField
private JsonNamingPolicy <SnakeCaseLower>k__BackingField
private JsonNamingPolicy <SnakeCaseUpper>k__BackingField
private JsonNamingPolicy <KebabCaseLower>k__BackingField
private JsonNamingPolicy <KebabCaseUpper>k__BackingField
public JsonNamingPolicy CamelCase
public JsonNamingPolicy SnakeCaseLower
public JsonNamingPolicy SnakeCaseUpper
public JsonNamingPolicy KebabCaseLower
public JsonNamingPolicy KebabCaseUpper
public JsonNamingPolicy get_CamelCase()
public JsonNamingPolicy get_SnakeCaseLower()
public JsonNamingPolicy get_SnakeCaseUpper()
public JsonNamingPolicy get_KebabCaseLower()
public JsonNamingPolicy get_KebabCaseUpper()
public string ConvertName(string name)
}
public System.Text.Json.JsonProperty : ValueType {
private JsonElement <Value>k__BackingField
private string <_name>k__BackingField
public JsonElement Value
private string _name
public string Name
private string DebuggerDisplay
public JsonElement get_Value()
private string get__name()
internal void .ctor(JsonElement value, string name)
public string get_Name()
public bool NameEquals(string text)
public bool NameEquals(ReadOnlySpan`1<byte> utf8Text)
public bool NameEquals(ReadOnlySpan`1<char> text)
internal bool EscapedNameEquals(ReadOnlySpan`1<byte> utf8Text)
public void WriteTo(Utf8JsonWriter writer)
public string ToString()
private string get_DebuggerDisplay()
}
internal System.Text.Json.JsonPropertyDictionary`1 : object {
private int ListToDictionaryThreshold
private Dictionary`2<string, T> _propertyDictionary
private List`1<KeyValuePair`2<string, T>> _propertyList
private StringComparer _stringComparer
private bool <IsReadOnly>k__BackingField
private KeyCollection<T> _keyCollection
private ValueCollection<T> _valueCollection
public List`1<KeyValuePair`2<string, T>> List
public int Count
public IList`1<string> Keys
public IList`1<T> Values
public bool IsReadOnly
public T Item
public void .ctor(bool caseInsensitive)
public void .ctor(bool caseInsensitive, int capacity)
public List`1<KeyValuePair`2<string, T>> get_List()
public void Add(string propertyName, T value)
public void Add(KeyValuePair`2<string, T> property)
public bool TryAdd(string propertyName, T value)
public void Clear()
public bool ContainsKey(string propertyName)
public int get_Count()
public bool Remove(string propertyName)
public bool Contains(KeyValuePair`2<string, T> item)
public void CopyTo(KeyValuePair`2[] array, int index)
public Enumerator<KeyValuePair`2<string, T>> GetEnumerator()
public IList`1<string> get_Keys()
public IList`1<T> get_Values()
public bool TryGetValue(string propertyName, T& value)
public bool get_IsReadOnly()
public void set_IsReadOnly(bool value)
public T get_Item(string propertyName)
public void set_Item(string propertyName, T value)
public T SetValue(string propertyName, T value, Boolean& valueAlreadyInDictionary)
private void AddValue(string propertyName, T value)
internal bool TryAddValue(string propertyName, T value)
private void CreateDictionaryIfThresholdMet()
internal bool ContainsValue(T value)
public Nullable`1<KeyValuePair`2<string, T>> FindValue(T value)
private bool ContainsProperty(string propertyName)
private int FindValueIndex(string propertyName)
public bool TryGetPropertyValue(string propertyName, T& value)
public bool TryRemoveProperty(string propertyName, T& existing)
public IList`1<string> GetKeyCollection()
public IList`1<T> GetValueCollection()
}
internal System.Text.Json.JsonReaderException : JsonException {
public void .ctor(string message, long lineNumber, long bytePositionInLine)
private void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Text.Json.JsonReaderHelper : object {
private string SpecialCharacters
public UTF8Encoding s_utf8Encoding
private ulong XorPowerOfTwoToHighByte
public bool ContainsSpecialCharacters(ReadOnlySpan`1<char> text)
public ValueTuple`2<int, int> CountNewLines(ReadOnlySpan`1<byte> data)
internal JsonValueKind ToValueKind(JsonTokenType tokenType)
public bool IsTokenTypePrimitive(JsonTokenType tokenType)
public bool IsHexDigit(byte nextByte)
public bool TryGetEscapedDateTime(ReadOnlySpan`1<byte> source, DateTime& value)
public bool TryGetEscapedDateTimeOffset(ReadOnlySpan`1<byte> source, DateTimeOffset& value)
public bool TryGetEscapedGuid(ReadOnlySpan`1<byte> source, Guid& value)
public bool TryGetFloatingPointConstant(ReadOnlySpan`1<byte> span, Single& value)
public bool TryGetFloatingPointConstant(ReadOnlySpan`1<byte> span, Double& value)
public bool TryGetUnescapedBase64Bytes(ReadOnlySpan`1<byte> utf8Source, Byte[]& bytes)
public string GetUnescapedString(ReadOnlySpan`1<byte> utf8Source)
public ReadOnlySpan`1<byte> GetUnescapedSpan(ReadOnlySpan`1<byte> utf8Source)
public bool UnescapeAndCompare(ReadOnlySpan`1<byte> utf8Source, ReadOnlySpan`1<byte> other)
public bool UnescapeAndCompare(ReadOnlySequence`1<byte> utf8Source, ReadOnlySpan`1<byte> other)
public bool TryDecodeBase64InPlace(Span`1<byte> utf8Unescaped, Byte[]& bytes)
public bool TryDecodeBase64(ReadOnlySpan`1<byte> utf8Unescaped, Byte[]& bytes)
public string TranscodeHelper(ReadOnlySpan`1<byte> utf8Unescaped)
public int TranscodeHelper(ReadOnlySpan`1<byte> utf8Unescaped, Span`1<char> destination)
public void ValidateUtf8(ReadOnlySpan`1<byte> utf8Buffer)
internal int GetUtf8ByteCount(ReadOnlySpan`1<char> text)
internal int GetUtf8FromText(ReadOnlySpan`1<char> text, Span`1<byte> dest)
internal string GetTextFromUtf8(ReadOnlySpan`1<byte> utf8Text)
internal void Unescape(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& written)
internal void Unescape(ReadOnlySpan`1<byte> source, Span`1<byte> destination, int idx, Int32& written)
internal bool TryUnescape(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& written)
private bool TryUnescape(ReadOnlySpan`1<byte> source, Span`1<byte> destination, int idx, Int32& written)
private bool TryEncodeToUtf8Bytes(UInt32 scalar, Span`1<byte> utf8Destination, Int32& bytesWritten)
public int IndexOfQuoteOrAnyControlOrBackSlash(ReadOnlySpan`1<byte> span)
private int LocateFirstFoundByte(Vector`1<byte> match)
private int LocateFirstFoundByte(ulong match)
}
public System.Text.Json.JsonReaderOptions : ValueType {
internal int DefaultMaxDepth
private int _maxDepth
private JsonCommentHandling _commentHandling
private bool <AllowTrailingCommas>k__BackingField
public JsonCommentHandling CommentHandling
public int MaxDepth
public bool AllowTrailingCommas
public JsonCommentHandling get_CommentHandling()
public void set_CommentHandling(JsonCommentHandling value)
public int get_MaxDepth()
public void set_MaxDepth(int value)
public bool get_AllowTrailingCommas()
public void set_AllowTrailingCommas(bool value)
}
public System.Text.Json.JsonReaderState : ValueType {
internal long _lineNumber
internal long _bytePositionInLine
internal bool _inObject
internal bool _isNotPrimitive
internal bool _valueIsEscaped
internal bool _trailingCommaBeforeComment
internal JsonTokenType _tokenType
internal JsonTokenType _previousTokenType
internal JsonReaderOptions _readerOptions
internal BitStack _bitStack
public JsonReaderOptions Options
public void .ctor(JsonReaderOptions options)
public JsonReaderOptions get_Options()
}
internal System.Text.Json.JsonSeparatorNamingPolicy : JsonNamingPolicy {
private bool _lowercase
private char _separator
internal void .ctor(bool lowercase, char separator)
public string ConvertName(string name)
private string ConvertNameCore(char separator, bool lowercase, ReadOnlySpan`1<char> chars)
internal void <ConvertNameCore>g__WriteChar|4_0(char value, Span`1& destination, <>c__DisplayClass4_0& )
internal void <ConvertNameCore>g__ExpandBuffer|4_1(Span`1& destination, <>c__DisplayClass4_0& )
}
public System.Text.Json.JsonSerializer : object {
internal string SerializationUnreferencedCodeMessage
internal string SerializationRequiresDynamicCodeMessage
private bool <IsReflectionEnabledByDefault>k__BackingField
internal string IdPropertyName
internal string RefPropertyName
internal string TypePropertyName
internal string ValuesPropertyName
private Byte[] s_idPropertyName
private Byte[] s_refPropertyName
private Byte[] s_typePropertyName
private Byte[] s_valuesPropertyName
internal JsonEncodedText s_metadataId
internal JsonEncodedText s_metadataRef
internal JsonEncodedText s_metadataType
internal JsonEncodedText s_metadataValues
internal float FlushThreshold
public bool IsReflectionEnabledByDefault
public TValue Deserialize(JsonDocument document, JsonSerializerOptions options)
public object Deserialize(JsonDocument document, Type returnType, JsonSerializerOptions options)
public TValue Deserialize(JsonDocument document, JsonTypeInfo`1<TValue> jsonTypeInfo)
public object Deserialize(JsonDocument document, JsonTypeInfo jsonTypeInfo)
public object Deserialize(JsonDocument document, Type returnType, JsonSerializerContext context)
public TValue Deserialize(JsonElement element, JsonSerializerOptions options)
public object Deserialize(JsonElement element, Type returnType, JsonSerializerOptions options)
public TValue Deserialize(JsonElement element, JsonTypeInfo`1<TValue> jsonTypeInfo)
public object Deserialize(JsonElement element, JsonTypeInfo jsonTypeInfo)
public object Deserialize(JsonElement element, Type returnType, JsonSerializerContext context)
public TValue Deserialize(JsonNode node, JsonSerializerOptions options)
public object Deserialize(JsonNode node, Type returnType, JsonSerializerOptions options)
public TValue Deserialize(JsonNode node, JsonTypeInfo`1<TValue> jsonTypeInfo)
public object Deserialize(JsonNode node, JsonTypeInfo jsonTypeInfo)
public object Deserialize(JsonNode node, Type returnType, JsonSerializerContext context)
private TValue ReadFromNode(JsonNode node, JsonTypeInfo`1<TValue> jsonTypeInfo)
private object ReadFromNodeAsObject(JsonNode node, JsonTypeInfo jsonTypeInfo)
public JsonDocument SerializeToDocument(TValue value, JsonSerializerOptions options)
public JsonDocument SerializeToDocument(object value, Type inputType, JsonSerializerOptions options)
public JsonDocument SerializeToDocument(TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo)
public JsonDocument SerializeToDocument(object value, JsonTypeInfo jsonTypeInfo)
public JsonDocument SerializeToDocument(object value, Type inputType, JsonSerializerContext context)
private JsonDocument WriteDocument(TValue& value, JsonTypeInfo`1<TValue> jsonTypeInfo)
private JsonDocument WriteDocumentAsObject(object value, JsonTypeInfo jsonTypeInfo)
public JsonElement SerializeToElement(TValue value, JsonSerializerOptions options)
public JsonElement SerializeToElement(object value, Type inputType, JsonSerializerOptions options)
public JsonElement SerializeToElement(TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo)
public JsonElement SerializeToElement(object value, JsonTypeInfo jsonTypeInfo)
public JsonElement SerializeToElement(object value, Type inputType, JsonSerializerContext context)
private JsonElement WriteElement(TValue& value, JsonTypeInfo`1<TValue> jsonTypeInfo)
private JsonElement WriteElementAsObject(object value, JsonTypeInfo jsonTypeInfo)
public JsonNode SerializeToNode(TValue value, JsonSerializerOptions options)
public JsonNode SerializeToNode(object value, Type inputType, JsonSerializerOptions options)
public JsonNode SerializeToNode(TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo)
public JsonNode SerializeToNode(object value, JsonTypeInfo jsonTypeInfo)
public JsonNode SerializeToNode(object value, Type inputType, JsonSerializerContext context)
private JsonNode WriteNode(TValue& value, JsonTypeInfo`1<TValue> jsonTypeInfo)
private JsonNode WriteNodeAsObject(object value, JsonTypeInfo jsonTypeInfo)
public bool get_IsReflectionEnabledByDefault()
private JsonTypeInfo GetTypeInfo(JsonSerializerOptions options, Type inputType)
private JsonTypeInfo`1<T> GetTypeInfo(JsonSerializerOptions options)
private JsonTypeInfo GetTypeInfo(JsonSerializerContext context, Type inputType)
private void ValidateInputType(object value, Type inputType)
internal bool IsValidNumberHandlingValue(JsonNumberHandling handling)
internal bool IsValidCreationHandlingValue(JsonObjectCreationHandling handling)
internal bool IsValidUnmappedMemberHandlingValue(JsonUnmappedMemberHandling handling)
internal T UnboxOnRead(object value)
internal T UnboxOnWrite(object value)
internal bool TryReadMetadata(JsonConverter converter, JsonTypeInfo jsonTypeInfo, Utf8JsonReader& reader, ReadStack& state)
internal bool IsMetadataPropertyName(ReadOnlySpan`1<byte> propertyName, PolymorphicTypeResolver resolver)
internal MetadataPropertyName GetMetadataPropertyName(ReadOnlySpan`1<byte> propertyName, PolymorphicTypeResolver resolver)
internal bool TryHandleReferenceFromJsonElement(Utf8JsonReader& reader, ReadStack& state, JsonElement element, Object& referenceValue)
internal bool TryHandleReferenceFromJsonNode(Utf8JsonReader& reader, ReadStack& state, JsonNode jsonNode, Object& referenceValue)
internal void ValidateMetadataForObjectConverter(ReadStack& state)
internal void ValidateMetadataForArrayConverter(JsonConverter converter, Utf8JsonReader& reader, ReadStack& state)
internal T ResolveReferenceId(ReadStack& state)
internal JsonPropertyInfo LookupProperty(object obj, ReadOnlySpan`1<byte> unescapedPropertyName, ReadStack& state, JsonSerializerOptions options, Boolean& useExtensionProperty, bool createExtensionProperty)
internal ReadOnlySpan`1<byte> GetPropertyName(ReadStack& state, Utf8JsonReader& reader)
internal void CreateExtensionDataProperty(object obj, JsonPropertyInfo jsonPropertyInfo, JsonSerializerOptions options)
public TValue Deserialize(ReadOnlySpan`1<byte> utf8Json, JsonSerializerOptions options)
public object Deserialize(ReadOnlySpan`1<byte> utf8Json, Type returnType, JsonSerializerOptions options)
public TValue Deserialize(ReadOnlySpan`1<byte> utf8Json, JsonTypeInfo`1<TValue> jsonTypeInfo)
public object Deserialize(ReadOnlySpan`1<byte> utf8Json, JsonTypeInfo jsonTypeInfo)
public object Deserialize(ReadOnlySpan`1<byte> utf8Json, Type returnType, JsonSerializerContext context)
private TValue ReadFromSpan(ReadOnlySpan`1<byte> utf8Json, JsonTypeInfo`1<TValue> jsonTypeInfo, Nullable`1<int> actualByteCount)
private object ReadFromSpanAsObject(ReadOnlySpan`1<byte> utf8Json, JsonTypeInfo jsonTypeInfo, Nullable`1<int> actualByteCount)
public ValueTask`1<TValue> DeserializeAsync(Stream utf8Json, JsonSerializerOptions options, CancellationToken cancellationToken)
public TValue Deserialize(Stream utf8Json, JsonSerializerOptions options)
public ValueTask`1<object> DeserializeAsync(Stream utf8Json, Type returnType, JsonSerializerOptions options, CancellationToken cancellationToken)
public object Deserialize(Stream utf8Json, Type returnType, JsonSerializerOptions options)
public ValueTask`1<TValue> DeserializeAsync(Stream utf8Json, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken)
public ValueTask`1<object> DeserializeAsync(Stream utf8Json, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
public TValue Deserialize(Stream utf8Json, JsonTypeInfo`1<TValue> jsonTypeInfo)
public object Deserialize(Stream utf8Json, JsonTypeInfo jsonTypeInfo)
public ValueTask`1<object> DeserializeAsync(Stream utf8Json, Type returnType, JsonSerializerContext context, CancellationToken cancellationToken)
public object Deserialize(Stream utf8Json, Type returnType, JsonSerializerContext context)
public IAsyncEnumerable`1<TValue> DeserializeAsyncEnumerable(Stream utf8Json, JsonSerializerOptions options, CancellationToken cancellationToken)
public IAsyncEnumerable`1<TValue> DeserializeAsyncEnumerable(Stream utf8Json, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken)
private IAsyncEnumerable`1<T> DeserializeAsyncEnumerableCore(Stream utf8Json, JsonTypeInfo`1<T> jsonTypeInfo, CancellationToken cancellationToken)
public TValue Deserialize(string json, JsonSerializerOptions options)
public TValue Deserialize(ReadOnlySpan`1<char> json, JsonSerializerOptions options)
public object Deserialize(string json, Type returnType, JsonSerializerOptions options)
public object Deserialize(ReadOnlySpan`1<char> json, Type returnType, JsonSerializerOptions options)
public TValue Deserialize(string json, JsonTypeInfo`1<TValue> jsonTypeInfo)
public TValue Deserialize(ReadOnlySpan`1<char> json, JsonTypeInfo`1<TValue> jsonTypeInfo)
public object Deserialize(string json, JsonTypeInfo jsonTypeInfo)
public object Deserialize(ReadOnlySpan`1<char> json, JsonTypeInfo jsonTypeInfo)
public object Deserialize(string json, Type returnType, JsonSerializerContext context)
public object Deserialize(ReadOnlySpan`1<char> json, Type returnType, JsonSerializerContext context)
private TValue ReadFromSpan(ReadOnlySpan`1<char> json, JsonTypeInfo`1<TValue> jsonTypeInfo)
private object ReadFromSpanAsObject(ReadOnlySpan`1<char> json, JsonTypeInfo jsonTypeInfo)
public TValue Deserialize(Utf8JsonReader& reader, JsonSerializerOptions options)
public object Deserialize(Utf8JsonReader& reader, Type returnType, JsonSerializerOptions options)
public TValue Deserialize(Utf8JsonReader& reader, JsonTypeInfo`1<TValue> jsonTypeInfo)
public object Deserialize(Utf8JsonReader& reader, JsonTypeInfo jsonTypeInfo)
public object Deserialize(Utf8JsonReader& reader, Type returnType, JsonSerializerContext context)
private TValue Read(Utf8JsonReader& reader, JsonTypeInfo`1<TValue> jsonTypeInfo)
private object ReadAsObject(Utf8JsonReader& reader, JsonTypeInfo jsonTypeInfo)
private Utf8JsonReader GetReaderScopedToNextValue(Utf8JsonReader& reader, ReadStack& state)
public Byte[] SerializeToUtf8Bytes(TValue value, JsonSerializerOptions options)
public Byte[] SerializeToUtf8Bytes(object value, Type inputType, JsonSerializerOptions options)
public Byte[] SerializeToUtf8Bytes(TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo)
public Byte[] SerializeToUtf8Bytes(object value, JsonTypeInfo jsonTypeInfo)
public Byte[] SerializeToUtf8Bytes(object value, Type inputType, JsonSerializerContext context)
private Byte[] WriteBytes(TValue& value, JsonTypeInfo`1<TValue> jsonTypeInfo)
private Byte[] WriteBytesAsObject(object value, JsonTypeInfo jsonTypeInfo)
internal MetadataPropertyName WriteMetadataForObject(JsonConverter jsonConverter, WriteStack& state, Utf8JsonWriter writer)
internal MetadataPropertyName WriteMetadataForCollection(JsonConverter jsonConverter, WriteStack& state, Utf8JsonWriter writer)
internal bool TryGetReferenceForValue(object currentValue, WriteStack& state, Utf8JsonWriter writer)
public Task SerializeAsync(Stream utf8Json, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken)
public void Serialize(Stream utf8Json, TValue value, JsonSerializerOptions options)
public Task SerializeAsync(Stream utf8Json, object value, Type inputType, JsonSerializerOptions options, CancellationToken cancellationToken)
public void Serialize(Stream utf8Json, object value, Type inputType, JsonSerializerOptions options)
public Task SerializeAsync(Stream utf8Json, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken)
public void Serialize(Stream utf8Json, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo)
public Task SerializeAsync(Stream utf8Json, object value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
public void Serialize(Stream utf8Json, object value, JsonTypeInfo jsonTypeInfo)
public Task SerializeAsync(Stream utf8Json, object value, Type inputType, JsonSerializerContext context, CancellationToken cancellationToken)
public void Serialize(Stream utf8Json, object value, Type inputType, JsonSerializerContext context)
public string Serialize(TValue value, JsonSerializerOptions options)
public string Serialize(object value, Type inputType, JsonSerializerOptions options)
public string Serialize(TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo)
public string Serialize(object value, JsonTypeInfo jsonTypeInfo)
public string Serialize(object value, Type inputType, JsonSerializerContext context)
private string WriteString(TValue& value, JsonTypeInfo`1<TValue> jsonTypeInfo)
private string WriteStringAsObject(object value, JsonTypeInfo jsonTypeInfo)
public void Serialize(Utf8JsonWriter writer, TValue value, JsonSerializerOptions options)
public void Serialize(Utf8JsonWriter writer, object value, Type inputType, JsonSerializerOptions options)
public void Serialize(Utf8JsonWriter writer, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo)
public void Serialize(Utf8JsonWriter writer, object value, JsonTypeInfo jsonTypeInfo)
public void Serialize(Utf8JsonWriter writer, object value, Type inputType, JsonSerializerContext context)
internal void <UnboxOnRead>g__ThrowUnableToCastValue|50_0(object value)
internal string <TryHandleReferenceFromJsonNode>g__ReadAsStringMetadataValue|64_0(JsonNode jsonNode)
internal IAsyncEnumerable`1<T> <DeserializeAsyncEnumerableCore>g__CreateAsyncEnumerable|90_0(Stream utf8Json, JsonTypeInfo`1<Queue`1<T>> queueTypeInfo, CancellationToken cancellationToken)
internal JsonTypeInfo`1<Queue`1<T>> <DeserializeAsyncEnumerableCore>g__CreateQueueTypeInfo|90_1(JsonTypeInfo`1<T> jsonTypeInfo)
}
public System.Text.Json.JsonSerializerDefaults : Enum {
public int value__
public JsonSerializerDefaults General
public JsonSerializerDefaults Web
}
public System.Text.Json.JsonSerializerOptions : object {
private CachingContext _cachingContext
private JsonTypeInfo modreq(System.Runtime.CompilerServices.IsVolatile) _lastTypeInfo
private JsonTypeInfo _objectTypeInfo
internal int BufferSizeDefault
internal int DefaultMaxDepth
private JsonSerializerOptions s_defaultOptions
private IJsonTypeInfoResolver _typeInfoResolver
private JsonNamingPolicy _dictionaryKeyPolicy
private JsonNamingPolicy _jsonPropertyNamingPolicy
private JsonCommentHandling _readCommentHandling
private ReferenceHandler _referenceHandler
private JavaScriptEncoder _encoder
private ConverterList _converters
private JsonIgnoreCondition _defaultIgnoreCondition
private JsonNumberHandling _numberHandling
private JsonObjectCreationHandling _preferredObjectCreationHandling
private JsonUnknownTypeHandling _unknownTypeHandling
private JsonUnmappedMemberHandling _unmappedMemberHandling
private int _defaultBufferSize
private int _maxDepth
private bool _allowTrailingCommas
private bool _ignoreNullValues
private bool _ignoreReadOnlyProperties
private bool _ignoreReadonlyFields
private bool _includeFields
private bool _propertyNameCaseInsensitive
private bool _writeIndented
private OptionsBoundJsonTypeInfoResolverChain _typeInfoResolverChain
private int <EffectiveMaxDepth>k__BackingField
private Nullable`1<bool> _canUseFastPathSerializationLogic
internal ReferenceHandlingStrategy ReferenceHandlingStrategy
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isReadOnly
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isConfiguredForJsonSerializer
private IJsonTypeInfoResolver _effectiveJsonTypeInfoResolver
internal CachingContext CacheContext
internal JsonTypeInfo ObjectTypeInfo
public IList`1<JsonConverter> Converters
public JsonSerializerOptions Default
public IJsonTypeInfoResolver TypeInfoResolver
public IList`1<IJsonTypeInfoResolver> TypeInfoResolverChain
public bool AllowTrailingCommas
public int DefaultBufferSize
public JavaScriptEncoder Encoder
public JsonNamingPolicy DictionaryKeyPolicy
public bool IgnoreNullValues
public JsonIgnoreCondition DefaultIgnoreCondition
public JsonNumberHandling NumberHandling
public JsonObjectCreationHandling PreferredObjectCreationHandling
public bool IgnoreReadOnlyProperties
public bool IgnoreReadOnlyFields
public bool IncludeFields
public int MaxDepth
internal int EffectiveMaxDepth
public JsonNamingPolicy PropertyNamingPolicy
public bool PropertyNameCaseInsensitive
public JsonCommentHandling ReadCommentHandling
public JsonUnknownTypeHandling UnknownTypeHandling
public JsonUnmappedMemberHandling UnmappedMemberHandling
public bool WriteIndented
public ReferenceHandler ReferenceHandler
internal bool CanUseFastPathSerializationLogic
public bool IsReadOnly
private string DebuggerDisplay
internal CachingContext get_CacheContext()
public JsonTypeInfo GetTypeInfo(Type type)
public bool TryGetTypeInfo(Type type, JsonTypeInfo& typeInfo)
internal JsonTypeInfo GetTypeInfoInternal(Type type, bool ensureConfigured, Nullable`1<bool> ensureNotNull, bool resolveIfMutable, bool fallBackToNearestAncestorType)
internal bool TryGetTypeInfoCached(Type type, JsonTypeInfo& typeInfo)
internal JsonTypeInfo GetTypeInfoForRootType(Type type, bool fallBackToNearestAncestorType)
internal bool TryGetPolymorphicTypeInfoForRootType(object rootValue, JsonTypeInfo& polymorphicTypeInfo)
internal JsonTypeInfo get_ObjectTypeInfo()
internal void ClearCaches()
public IList`1<JsonConverter> get_Converters()
public JsonConverter GetConverter(Type typeToConvert)
internal JsonConverter GetConverterInternal(Type typeToConvert)
internal JsonConverter GetConverterFromList(Type typeToConvert)
internal JsonConverter ExpandConverterFactory(JsonConverter converter, Type typeToConvert)
internal void CheckConverterNullabilityIsSameAsPropertyType(JsonConverter converter, Type propertyType)
public JsonSerializerOptions get_Default()
public void .ctor(JsonSerializerOptions options)
public void .ctor(JsonSerializerDefaults defaults)
private void TrackOptionsInstance(JsonSerializerOptions options)
public void AddContext()
public IJsonTypeInfoResolver get_TypeInfoResolver()
public void set_TypeInfoResolver(IJsonTypeInfoResolver value)
public IList`1<IJsonTypeInfoResolver> get_TypeInfoResolverChain()
public bool get_AllowTrailingCommas()
public void set_AllowTrailingCommas(bool value)
public int get_DefaultBufferSize()
public void set_DefaultBufferSize(int value)
public JavaScriptEncoder get_Encoder()
public void set_Encoder(JavaScriptEncoder value)
public JsonNamingPolicy get_DictionaryKeyPolicy()
public void set_DictionaryKeyPolicy(JsonNamingPolicy value)
public bool get_IgnoreNullValues()
public void set_IgnoreNullValues(bool value)
public JsonIgnoreCondition get_DefaultIgnoreCondition()
public void set_DefaultIgnoreCondition(JsonIgnoreCondition value)
public JsonNumberHandling get_NumberHandling()
public void set_NumberHandling(JsonNumberHandling value)
public JsonObjectCreationHandling get_PreferredObjectCreationHandling()
public void set_PreferredObjectCreationHandling(JsonObjectCreationHandling value)
public bool get_IgnoreReadOnlyProperties()
public void set_IgnoreReadOnlyProperties(bool value)
public bool get_IgnoreReadOnlyFields()
public void set_IgnoreReadOnlyFields(bool value)
public bool get_IncludeFields()
public void set_IncludeFields(bool value)
public int get_MaxDepth()
public void set_MaxDepth(int value)
internal int get_EffectiveMaxDepth()
private void set_EffectiveMaxDepth(int value)
public JsonNamingPolicy get_PropertyNamingPolicy()
public void set_PropertyNamingPolicy(JsonNamingPolicy value)
public bool get_PropertyNameCaseInsensitive()
public void set_PropertyNameCaseInsensitive(bool value)
public JsonCommentHandling get_ReadCommentHandling()
public void set_ReadCommentHandling(JsonCommentHandling value)
public JsonUnknownTypeHandling get_UnknownTypeHandling()
public void set_UnknownTypeHandling(JsonUnknownTypeHandling value)
public JsonUnmappedMemberHandling get_UnmappedMemberHandling()
public void set_UnmappedMemberHandling(JsonUnmappedMemberHandling value)
public bool get_WriteIndented()
public void set_WriteIndented(bool value)
public ReferenceHandler get_ReferenceHandler()
public void set_ReferenceHandler(ReferenceHandler value)
internal bool get_CanUseFastPathSerializationLogic()
public bool get_IsReadOnly()
public void MakeReadOnly()
public void MakeReadOnly(bool populateMissingResolver)
private void ConfigureForJsonSerializer()
private JsonTypeInfo GetTypeInfoNoCaching(Type type)
internal JsonDocumentOptions GetDocumentOptions()
internal JsonNodeOptions GetNodeOptions()
internal JsonReaderOptions GetReaderOptions()
internal JsonWriterOptions GetWriterOptions()
internal void VerifyMutable()
private JsonSerializerOptions GetOrCreateDefaultOptionsInstance()
private string get_DebuggerDisplay()
}
public System.Text.Json.JsonTokenType : Enum {
public byte value__
public JsonTokenType None
public JsonTokenType StartObject
public JsonTokenType EndObject
public JsonTokenType StartArray
public JsonTokenType EndArray
public JsonTokenType PropertyName
public JsonTokenType Comment
public JsonTokenType String
public JsonTokenType Number
public JsonTokenType True
public JsonTokenType False
public JsonTokenType Null
}
public System.Text.Json.JsonValueKind : Enum {
public byte value__
public JsonValueKind Undefined
public JsonValueKind Object
public JsonValueKind Array
public JsonValueKind String
public JsonValueKind Number
public JsonValueKind True
public JsonValueKind False
public JsonValueKind Null
}
internal System.Text.Json.JsonWriterHelper : object {
private UTF8Encoding s_utf8Encoding
private StandardFormat s_dateTimeStandardFormat
public int LastAsciiCharacter
private StandardFormat s_hexStandardFormat
private ReadOnlySpan`1<byte> AllowList
public void WriteIndentation(Span`1<byte> buffer, int indent)
public void ValidateProperty(ReadOnlySpan`1<byte> propertyName)
public void ValidateValue(ReadOnlySpan`1<byte> value)
public void ValidateDouble(double value)
public void ValidateSingle(float value)
public void ValidateProperty(ReadOnlySpan`1<char> propertyName)
public void ValidateValue(ReadOnlySpan`1<char> value)
public void ValidatePropertyAndValue(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> value)
public void ValidatePropertyAndValue(ReadOnlySpan`1<byte> propertyName, ReadOnlySpan`1<char> value)
public void ValidatePropertyAndValue(ReadOnlySpan`1<byte> propertyName, ReadOnlySpan`1<byte> value)
public void ValidatePropertyAndValue(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> value)
public void ValidatePropertyNameLength(ReadOnlySpan`1<char> propertyName)
public void ValidatePropertyNameLength(ReadOnlySpan`1<byte> propertyName)
internal void ValidateNumber(ReadOnlySpan`1<byte> utf8FormattedNumber)
public bool IsValidUtf8String(ReadOnlySpan`1<byte> bytes)
internal OperationStatus ToUtf8(ReadOnlySpan`1<char> source, Span`1<byte> destination, Int32& written)
public void WriteDateTimeTrimmed(Span`1<byte> buffer, DateTime value, Int32& bytesWritten)
public void WriteDateTimeOffsetTrimmed(Span`1<byte> buffer, DateTimeOffset value, Int32& bytesWritten)
public void TrimDateTimeOffset(Span`1<byte> buffer, Int32& bytesWritten)
private ReadOnlySpan`1<byte> get_AllowList()
private bool NeedsEscaping(byte value)
private bool NeedsEscapingNoBoundsCheck(char value)
public int NeedsEscaping(ReadOnlySpan`1<byte> value, JavaScriptEncoder encoder)
public int NeedsEscaping(ReadOnlySpan`1<char> value, JavaScriptEncoder encoder)
public int GetMaxEscapedLength(int textLength, int firstIndexToEscape)
private void EscapeString(ReadOnlySpan`1<byte> value, Span`1<byte> destination, JavaScriptEncoder encoder, Int32& written)
public void EscapeString(ReadOnlySpan`1<byte> value, Span`1<byte> destination, int indexOfFirstByteToEscape, JavaScriptEncoder encoder, Int32& written)
private void EscapeNextBytes(byte value, Span`1<byte> destination, Int32& written)
private bool IsAsciiValue(byte value)
private bool IsAsciiValue(char value)
private void EscapeString(ReadOnlySpan`1<char> value, Span`1<char> destination, JavaScriptEncoder encoder, Int32& written)
public void EscapeString(ReadOnlySpan`1<char> value, Span`1<char> destination, int indexOfFirstByteToEscape, JavaScriptEncoder encoder, Int32& written)
private void EscapeNextChars(char value, Span`1<char> destination, Int32& written)
private int WriteHex(int value, Span`1<char> destination, int written)
}
public System.Text.Json.JsonWriterOptions : ValueType {
internal int DefaultMaxDepth
private int _maxDepth
private int _optionsMask
private JavaScriptEncoder <Encoder>k__BackingField
private int IndentBit
private int SkipValidationBit
public JavaScriptEncoder Encoder
public bool Indented
public int MaxDepth
public bool SkipValidation
internal bool IndentedOrNotSkipValidation
public JavaScriptEncoder get_Encoder()
public void set_Encoder(JavaScriptEncoder value)
public bool get_Indented()
public void set_Indented(bool value)
public int get_MaxDepth()
public void set_MaxDepth(int value)
public bool get_SkipValidation()
public void set_SkipValidation(bool value)
internal bool get_IndentedOrNotSkipValidation()
}
internal System.Text.Json.MetadataPropertyName : Enum {
public byte value__
public MetadataPropertyName None
public MetadataPropertyName Values
public MetadataPropertyName Id
public MetadataPropertyName Ref
public MetadataPropertyName Type
}
public System.Text.Json.Nodes.JsonArray : JsonNode {
private Nullable`1<JsonElement> _jsonElement
private List`1<JsonNode> _list
internal List`1<JsonNode> List
public int Count
private bool System.Collections.Generic.ICollection<System.Text.Json.Nodes.JsonNode>.IsReadOnly
public void .ctor(Nullable`1<JsonNodeOptions> options)
public void .ctor(JsonNodeOptions options, JsonNode[] items)
public void .ctor(JsonNode[] items)
internal JsonValueKind GetValueKindCore()
internal JsonNode DeepCloneCore()
internal bool DeepEqualsCore(JsonNode node)
internal int GetElementIndex(JsonNode node)
public IEnumerable`1<T> GetValues()
private void InitializeFromArray(JsonNode[] items)
public JsonArray Create(JsonElement element, Nullable`1<JsonNodeOptions> options)
internal void .ctor(JsonElement element, Nullable`1<JsonNodeOptions> options)
public void Add(T value)
internal List`1<JsonNode> get_List()
internal JsonNode GetItem(int index)
internal void SetItem(int index, JsonNode value)
internal void GetPath(List`1<string> path, JsonNode child)
public void WriteTo(Utf8JsonWriter writer, JsonSerializerOptions options)
private List`1<JsonNode> InitializeList()
private void GetUnderlyingRepresentation(List`1& list, Nullable`1& jsonElement)
public int get_Count()
public void Add(JsonNode item)
public void Clear()
public bool Contains(JsonNode item)
public int IndexOf(JsonNode item)
public void Insert(int index, JsonNode item)
public bool Remove(JsonNode item)
public void RemoveAt(int index)
private void System.Collections.Generic.ICollection<System.Text.Json.Nodes.JsonNode>.CopyTo(JsonNode[] array, int index)
public IEnumerator`1<JsonNode> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private bool System.Collections.Generic.ICollection<System.Text.Json.Nodes.JsonNode>.get_IsReadOnly()
private void DetachParent(JsonNode item)
}
public System.Text.Json.Nodes.JsonNode : object {
private JsonNode _parent
private Nullable`1<JsonNodeOptions> _options
public Nullable`1<JsonNodeOptions> Options
public JsonNode Parent
public JsonNode Root
public JsonNode Item
public JsonNode Item
public Nullable`1<JsonNodeOptions> get_Options()
internal void .ctor(Nullable`1<JsonNodeOptions> options)
public JsonArray AsArray()
public JsonObject AsObject()
public JsonValue AsValue()
public JsonNode get_Parent()
internal void set_Parent(JsonNode value)
public string GetPath()
internal void GetPath(List`1<string> path, JsonNode child)
public JsonNode get_Root()
public T GetValue()
public JsonNode get_Item(int index)
public void set_Item(int index, JsonNode value)
public JsonNode get_Item(string propertyName)
public void set_Item(string propertyName, JsonNode value)
public JsonNode DeepClone()
internal JsonNode DeepCloneCore()
public JsonValueKind GetValueKind()
internal JsonValueKind GetValueKindCore()
public string GetPropertyName()
public int GetElementIndex()
public bool DeepEquals(JsonNode node1, JsonNode node2)
internal bool DeepEqualsCore(JsonNode node)
public void ReplaceWith(T value)
internal void AssignParent(JsonNode parent)
internal JsonNode ConvertFromValue(T value, Nullable`1<JsonNodeOptions> options)
public JsonNode op_Implicit(bool value)
public JsonNode op_Implicit(Nullable`1<bool> value)
public JsonNode op_Implicit(byte value)
public JsonNode op_Implicit(Nullable`1<byte> value)
public JsonNode op_Implicit(char value)
public JsonNode op_Implicit(Nullable`1<char> value)
public JsonNode op_Implicit(DateTime value)
public JsonNode op_Implicit(Nullable`1<DateTime> value)
public JsonNode op_Implicit(DateTimeOffset value)
public JsonNode op_Implicit(Nullable`1<DateTimeOffset> value)
public JsonNode op_Implicit(decimal value)
public JsonNode op_Implicit(Nullable`1<decimal> value)
public JsonNode op_Implicit(double value)
public JsonNode op_Implicit(Nullable`1<double> value)
public JsonNode op_Implicit(Guid value)
public JsonNode op_Implicit(Nullable`1<Guid> value)
public JsonNode op_Implicit(short value)
public JsonNode op_Implicit(Nullable`1<short> value)
public JsonNode op_Implicit(int value)
public JsonNode op_Implicit(Nullable`1<int> value)
public JsonNode op_Implicit(long value)
public JsonNode op_Implicit(Nullable`1<long> value)
public JsonNode op_Implicit(sbyte value)
public JsonNode op_Implicit(Nullable`1<sbyte> value)
public JsonNode op_Implicit(float value)
public JsonNode op_Implicit(Nullable`1<float> value)
public JsonNode op_Implicit(string value)
public JsonNode op_Implicit(ushort value)
public JsonNode op_Implicit(Nullable`1<ushort> value)
public JsonNode op_Implicit(UInt32 value)
public JsonNode op_Implicit(Nullable`1<UInt32> value)
public JsonNode op_Implicit(ulong value)
public JsonNode op_Implicit(Nullable`1<ulong> value)
public bool op_Explicit(JsonNode value)
public Nullable`1<bool> op_Explicit(JsonNode value)
public byte op_Explicit(JsonNode value)
public Nullable`1<byte> op_Explicit(JsonNode value)
public char op_Explicit(JsonNode value)
public Nullable`1<char> op_Explicit(JsonNode value)
public DateTime op_Explicit(JsonNode value)
public Nullable`1<DateTime> op_Explicit(JsonNode value)
public DateTimeOffset op_Explicit(JsonNode value)
public Nullable`1<DateTimeOffset> op_Explicit(JsonNode value)
public decimal op_Explicit(JsonNode value)
public Nullable`1<decimal> op_Explicit(JsonNode value)
public double op_Explicit(JsonNode value)
public Nullable`1<double> op_Explicit(JsonNode value)
public Guid op_Explicit(JsonNode value)
public Nullable`1<Guid> op_Explicit(JsonNode value)
public short op_Explicit(JsonNode value)
public Nullable`1<short> op_Explicit(JsonNode value)
public int op_Explicit(JsonNode value)
public Nullable`1<int> op_Explicit(JsonNode value)
public long op_Explicit(JsonNode value)
public Nullable`1<long> op_Explicit(JsonNode value)
public sbyte op_Explicit(JsonNode value)
public Nullable`1<sbyte> op_Explicit(JsonNode value)
public float op_Explicit(JsonNode value)
public Nullable`1<float> op_Explicit(JsonNode value)
public string op_Explicit(JsonNode value)
public ushort op_Explicit(JsonNode value)
public Nullable`1<ushort> op_Explicit(JsonNode value)
public UInt32 op_Explicit(JsonNode value)
public Nullable`1<UInt32> op_Explicit(JsonNode value)
public ulong op_Explicit(JsonNode value)
public Nullable`1<ulong> op_Explicit(JsonNode value)
public JsonNode Parse(Utf8JsonReader& reader, Nullable`1<JsonNodeOptions> nodeOptions)
public JsonNode Parse(string json, Nullable`1<JsonNodeOptions> nodeOptions, JsonDocumentOptions documentOptions)
public JsonNode Parse(ReadOnlySpan`1<byte> utf8Json, Nullable`1<JsonNodeOptions> nodeOptions, JsonDocumentOptions documentOptions)
public JsonNode Parse(Stream utf8Json, Nullable`1<JsonNodeOptions> nodeOptions, JsonDocumentOptions documentOptions)
public Task`1<JsonNode> ParseAsync(Stream utf8Json, Nullable`1<JsonNodeOptions> nodeOptions, JsonDocumentOptions documentOptions, CancellationToken cancellationToken)
public string ToJsonString(JsonSerializerOptions options)
public string ToString()
public void WriteTo(Utf8JsonWriter writer, JsonSerializerOptions options)
internal PooledByteBufferWriter WriteToPooledBuffer(JsonSerializerOptions options, JsonWriterOptions writerOptions, int bufferSize)
}
public System.Text.Json.Nodes.JsonNodeOptions : ValueType {
private bool <PropertyNameCaseInsensitive>k__BackingField
public bool PropertyNameCaseInsensitive
public bool get_PropertyNameCaseInsensitive()
public void set_PropertyNameCaseInsensitive(bool value)
}
public System.Text.Json.Nodes.JsonObject : JsonNode {
private Nullable`1<JsonElement> _jsonElement
private JsonPropertyDictionary`1<JsonNode> _dictionary
internal JsonPropertyDictionary`1<JsonNode> Dictionary
public int Count
private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Text.Json.Nodes.JsonNode>.Keys
private ICollection`1<JsonNode> System.Collections.Generic.IDictionary<System.String,System.Text.Json.Nodes.JsonNode>.Values
private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Text.Json.Nodes.JsonNode>>.IsReadOnly
public void .ctor(Nullable`1<JsonNodeOptions> options)
public void .ctor(IEnumerable`1<KeyValuePair`2<string, JsonNode>> properties, Nullable`1<JsonNodeOptions> options)
public JsonObject Create(JsonElement element, Nullable`1<JsonNodeOptions> options)
internal void .ctor(JsonElement element, Nullable`1<JsonNodeOptions> options)
internal JsonPropertyDictionary`1<JsonNode> get_Dictionary()
internal JsonNode DeepCloneCore()
internal string GetPropertyName(JsonNode node)
public bool TryGetPropertyValue(string propertyName, JsonNode& jsonNode)
public void WriteTo(Utf8JsonWriter writer, JsonSerializerOptions options)
internal JsonValueKind GetValueKindCore()
internal bool DeepEqualsCore(JsonNode node)
internal JsonNode GetItem(string propertyName)
internal void GetPath(List`1<string> path, JsonNode child)
internal void SetItem(string propertyName, JsonNode value)
private void DetachParent(JsonNode item)
public void Add(string propertyName, JsonNode value)
public void Add(KeyValuePair`2<string, JsonNode> property)
public void Clear()
public bool ContainsKey(string propertyName)
public int get_Count()
public bool Remove(string propertyName)
private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Text.Json.Nodes.JsonNode>>.Contains(KeyValuePair`2<string, JsonNode> item)
private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Text.Json.Nodes.JsonNode>>.CopyTo(KeyValuePair`2[] array, int index)
public IEnumerator`1<KeyValuePair`2<string, JsonNode>> GetEnumerator()
private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Text.Json.Nodes.JsonNode>>.Remove(KeyValuePair`2<string, JsonNode> item)
private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Text.Json.Nodes.JsonNode>.get_Keys()
private ICollection`1<JsonNode> System.Collections.Generic.IDictionary<System.String,System.Text.Json.Nodes.JsonNode>.get_Values()
private bool System.Collections.Generic.IDictionary<System.String,System.Text.Json.Nodes.JsonNode>.TryGetValue(string propertyName, JsonNode& jsonNode)
private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Text.Json.Nodes.JsonNode>>.get_IsReadOnly()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private JsonPropertyDictionary`1<JsonNode> InitializeDictionary()
private void GetUnderlyingRepresentation(JsonPropertyDictionary`1& dictionary, Nullable`1& jsonElement)
}
public System.Text.Json.Nodes.JsonValue : JsonNode {
internal string CreateUnreferencedCodeMessage
internal string CreateDynamicCodeMessage
public JsonValue Create(bool value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<bool> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(byte value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<byte> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(char value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<char> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(DateTime value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<DateTime> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(DateTimeOffset value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<DateTimeOffset> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(decimal value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<decimal> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(double value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<double> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Guid value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<Guid> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(short value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<short> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(int value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<int> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(long value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<long> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(sbyte value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<sbyte> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(float value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<float> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(string value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(ushort value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<ushort> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(UInt32 value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<UInt32> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(ulong value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<ulong> value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(JsonElement value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(Nullable`1<JsonElement> value, Nullable`1<JsonNodeOptions> options)
private protected void .ctor(Nullable`1<JsonNodeOptions> options)
public JsonValue Create(T value, Nullable`1<JsonNodeOptions> options)
public JsonValue Create(T value, JsonTypeInfo`1<T> jsonTypeInfo, Nullable`1<JsonNodeOptions> options)
internal void GetPath(List`1<string> path, JsonNode child)
public bool TryGetValue(T& value)
private void VerifyJsonElementIsNotArrayOrObject(JsonElement& element)
}
internal System.Text.Json.Nodes.JsonValue`1 : JsonValue {
internal TValue Value
protected void .ctor(TValue value, Nullable`1<JsonNodeOptions> options)
public T GetValue()
public bool TryGetValue(T& value)
internal JsonValueKind GetValueKindCore()
internal bool DeepEqualsCore(JsonNode otherNode)
internal TypeToConvert ConvertJsonElement()
internal bool TryConvertJsonElement(TypeToConvert& result)
}
internal System.Text.Json.Nodes.JsonValueCustomized`1 : JsonValue`1<TValue> {
private JsonTypeInfo`1<TValue> _jsonTypeInfo
public void .ctor(TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, Nullable`1<JsonNodeOptions> options)
public void WriteTo(Utf8JsonWriter writer, JsonSerializerOptions options)
internal JsonNode DeepCloneCore()
}
internal System.Text.Json.Nodes.JsonValuePrimitive`1 : JsonValue`1<TValue> {
private JsonSerializerOptions s_defaultOptions
private JsonConverter`1<TValue> _converter
public void .ctor(TValue value, JsonConverter`1<TValue> converter, Nullable`1<JsonNodeOptions> options)
public void WriteTo(Utf8JsonWriter writer, JsonSerializerOptions options)
internal JsonNode DeepCloneCore()
}
internal System.Text.Json.NumericType : Enum {
public int value__
public NumericType Byte
public NumericType SByte
public NumericType Int16
public NumericType Int32
public NumericType Int64
public NumericType Int128
public NumericType UInt16
public NumericType UInt32
public NumericType UInt64
public NumericType UInt128
public NumericType Half
public NumericType Single
public NumericType Double
public NumericType Decimal
}
internal System.Text.Json.PolymorphicSerializationState : Enum {
public byte value__
public PolymorphicSerializationState None
public PolymorphicSerializationState PolymorphicReEntryStarted
public PolymorphicSerializationState PolymorphicReEntrySuspended
public PolymorphicSerializationState PolymorphicReEntryNotFound
}
internal System.Text.Json.PooledByteBufferWriter : object {
private Byte[] _rentedBuffer
private int _index
private int MinimumBufferSize
public int MaximumBufferSize
public ReadOnlyMemory`1<byte> WrittenMemory
public int WrittenCount
public int Capacity
public int FreeCapacity
public void .ctor(int initialCapacity)
public ReadOnlyMemory`1<byte> get_WrittenMemory()
public int get_WrittenCount()
public int get_Capacity()
public int get_FreeCapacity()
public void Clear()
public void ClearAndReturnBuffers()
private void ClearHelper()
public void Dispose()
public void InitializeEmptyInstance(int initialCapacity)
public PooledByteBufferWriter CreateEmptyInstanceForCaching()
public void Advance(int count)
public Memory`1<byte> GetMemory(int sizeHint)
public Span`1<byte> GetSpan(int sizeHint)
internal Task WriteToStreamAsync(Stream destination, CancellationToken cancellationToken)
internal void WriteToStream(Stream destination)
private void CheckAndResizeBuffer(int sizeHint)
}
internal System.Text.Json.ReadStack : ValueType {
public ReadStackFrame Current
private ReadStackFrame[] _stack
private int _count
private int _continuationCount
public long BytesConsumed
public bool ReadAhead
public ReferenceResolver ReferenceResolver
public bool SupportContinuation
public string ReferenceId
public object PolymorphicTypeDiscriminator
public bool PreserveReferences
public ReadStackFrame& Parent
public JsonPropertyInfo ParentProperty
public bool IsContinuation
private string DebuggerDisplay
public ReadStackFrame& get_Parent()
public JsonPropertyInfo get_ParentProperty()
public bool get_IsContinuation()
private void EnsurePushCapacity()
internal void Initialize(JsonTypeInfo jsonTypeInfo, bool supportContinuation)
public void Push()
public void Pop(bool success)
public JsonConverter InitializePolymorphicReEntry(JsonTypeInfo derivedJsonTypeInfo)
public JsonConverter ResumePolymorphicReEntry()
public void ExitPolymorphicConverter(bool success)
public string JsonPath()
public JsonTypeInfo GetTopJsonTypeInfoWithParameterizedConstructor()
private void SetConstructorArgumentState()
private string get_DebuggerDisplay()
internal void <JsonPath>g__AppendStackFrame|24_0(StringBuilder sb, ReadStackFrame& frame)
internal int <JsonPath>g__GetCount|24_1(IEnumerable enumerable)
internal void <JsonPath>g__AppendPropertyName|24_2(StringBuilder sb, string propertyName)
internal string <JsonPath>g__GetPropertyName|24_3(ReadStackFrame& frame)
}
internal System.Text.Json.ReadStackFrame : ValueType {
public JsonPropertyInfo JsonPropertyInfo
public StackFramePropertyState PropertyState
public bool UseExtensionProperty
public Byte[] JsonPropertyName
public string JsonPropertyNameAsString
public object DictionaryKey
public object ReturnValue
public JsonTypeInfo JsonTypeInfo
public StackFrameObjectState ObjectState
public bool CanContainMetadata
public MetadataPropertyName LatestMetadataPropertyName
public MetadataPropertyName MetadataPropertyNames
public PolymorphicSerializationState PolymorphicSerializationState
public JsonTypeInfo PolymorphicJsonTypeInfo
public int PropertyIndex
public List`1<PropertyRef> PropertyRefCache
public ArgumentState CtorArgumentState
public Nullable`1<JsonNumberHandling> NumberHandling
public BitArray RequiredPropertiesSet
public bool HasParentObject
public bool IsPopulating
public JsonTypeInfo BaseJsonTypeInfo
private string DebuggerDisplay
public JsonTypeInfo get_BaseJsonTypeInfo()
public void EndConstructorParameter()
public void EndProperty()
public void EndElement()
public bool IsProcessingDictionary()
public bool IsProcessingEnumerable()
public void MarkRequiredPropertyAsRead(JsonPropertyInfo propertyInfo)
internal void InitializeRequiredPropertiesValidationState(JsonTypeInfo typeInfo)
internal void ValidateAllRequiredPropertiesAreRead(JsonTypeInfo typeInfo)
private string get_DebuggerDisplay()
}
internal System.Text.Json.Reflection.ReflectionExtensions : object {
private string ImmutableArrayGenericTypeName
private string ImmutableListGenericTypeName
private string ImmutableListGenericInterfaceTypeName
private string ImmutableStackGenericTypeName
private string ImmutableStackGenericInterfaceTypeName
private string ImmutableQueueGenericTypeName
private string ImmutableQueueGenericInterfaceTypeName
private string ImmutableSortedSetGenericTypeName
private string ImmutableHashSetGenericTypeName
private string ImmutableSetGenericInterfaceTypeName
private string ImmutableDictionaryGenericTypeName
private string ImmutableDictionaryGenericInterfaceTypeName
private string ImmutableSortedDictionaryGenericTypeName
private string ImmutableArrayTypeName
private string ImmutableListTypeName
private string ImmutableStackTypeName
private string ImmutableQueueTypeName
private string ImmutableSortedSetTypeName
private string ImmutableHashSetTypeName
private string ImmutableDictionaryTypeName
private string ImmutableSortedDictionaryTypeName
public string CreateRangeMethodName
private Type s_nullableType
public Type GetCompatibleGenericBaseClass(Type type, Type baseType)
public Type GetCompatibleGenericInterface(Type type, Type interfaceType)
public bool IsImmutableDictionaryType(Type type)
public bool IsImmutableEnumerableType(Type type)
public string GetImmutableDictionaryConstructingTypeName(Type type)
public string GetImmutableEnumerableConstructingTypeName(Type type)
private string GetBaseNameFromGenericType(Type genericType)
public bool IsVirtual(PropertyInfo propertyInfo)
public bool IsKeyValuePair(Type type)
public bool TryGetDeserializationConstructor(Type type, bool useDefaultCtorInAnnotatedStructs, ConstructorInfo& deserializationCtor)
public object GetDefaultValue(ParameterInfo parameterInfo)
public Type[] GetSortedTypeHierarchy(Type type)
public bool IsNullableOfT(Type type)
public bool IsAssignableFromInternal(Type type, Type from)
public bool IsInSubtypeRelationshipWith(Type type, Type other)
private bool HasJsonConstructorAttribute(ConstructorInfo constructorInfo)
public bool HasRequiredMemberAttribute(MemberInfo memberInfo)
public bool HasSetsRequiredMembersAttribute(MemberInfo memberInfo)
private bool HasCustomAttributeWithName(MemberInfo memberInfo, string fullName, bool inherit)
public TAttribute GetUniqueCustomAttribute(MemberInfo memberInfo, bool inherit)
public object CreateInstanceNoWrapExceptions(Type type, Type[] parameterTypes, Object[] parameters)
}
internal System.Text.Json.Serialization.ConfigurationList`1 : object {
protected List`1<TItem> _list
public bool IsReadOnly
public TItem Item
public int Count
private string DebuggerDisplay
public void .ctor(IEnumerable`1<TItem> source)
public bool get_IsReadOnly()
protected void OnCollectionModifying()
protected void ValidateAddedValue(TItem item)
public TItem get_Item(int index)
public void set_Item(int index, TItem value)
public int get_Count()
public void Add(TItem item)
public void Clear()
public bool Contains(TItem item)
public void CopyTo(TItem[] array, int arrayIndex)
public Enumerator<TItem> GetEnumerator()
public int IndexOf(TItem item)
public void Insert(int index, TItem item)
public bool Remove(TItem item)
public void RemoveAt(int index)
private IEnumerator`1<TItem> System.Collections.Generic.IEnumerable<TItem>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private string get_DebuggerDisplay()
}
internal System.Text.Json.Serialization.Converters.ArrayConverter`2 : IEnumerableDefaultConverter`2<TElement[], TElement> {
internal bool CanHaveMetadata
internal bool SupportsCreateObjectDelegate
internal bool get_CanHaveMetadata()
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
internal bool get_SupportsCreateObjectDelegate()
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected void ConvertCollection(ReadStack& state, JsonSerializerOptions options)
protected bool OnWriteResume(Utf8JsonWriter writer, TElement[] array, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.Converters.BooleanConverter : JsonPrimitiveConverter`1<bool> {
public bool Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, bool value, JsonSerializerOptions options)
internal bool ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, bool value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
}
internal System.Text.Json.Serialization.Converters.ByteArrayConverter : JsonConverter`1<Byte[]> {
public Byte[] Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, Byte[] value, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.ByteConverter : JsonPrimitiveConverter`1<byte> {
public byte Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, byte value, JsonSerializerOptions options)
internal byte ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, byte value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal byte ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, byte value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.CastingConverter`1 : JsonConverter`1<T> {
private JsonConverter _sourceConverter
private bool <HandleNull>k__BackingField
internal Type KeyType
internal Type ElementType
public bool HandleNull
internal bool SupportsCreateObjectDelegate
internal JsonConverter SourceConverterForCastingConverter
internal Type get_KeyType()
internal Type get_ElementType()
public bool get_HandleNull()
internal bool get_SupportsCreateObjectDelegate()
internal void .ctor(JsonConverter sourceConverter)
internal JsonConverter get_SourceConverterForCastingConverter()
public T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, T& value)
internal bool OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
public T ReadAsPropertyName(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal T ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void WriteAsPropertyName(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, T value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal T ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, T value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.CharConverter : JsonPrimitiveConverter`1<char> {
private int MaxEscapedCharacterLength
public char Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, char value, JsonSerializerOptions options)
internal char ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, char value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
}
internal System.Text.Json.Serialization.Converters.ConcurrentQueueOfTConverter`2 : IEnumerableDefaultConverter`2<TCollection, TElement> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
}
internal System.Text.Json.Serialization.Converters.ConcurrentStackOfTConverter`2 : IEnumerableDefaultConverter`2<TCollection, TElement> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
}
internal System.Text.Json.Serialization.Converters.DateTimeConverter : JsonPrimitiveConverter`1<DateTime> {
public DateTime Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options)
internal DateTime ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
}
internal System.Text.Json.Serialization.Converters.DateTimeOffsetConverter : JsonPrimitiveConverter`1<DateTimeOffset> {
public DateTimeOffset Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
internal DateTimeOffset ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
}
internal System.Text.Json.Serialization.Converters.DecimalConverter : JsonPrimitiveConverter`1<decimal> {
public decimal Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, decimal value, JsonSerializerOptions options)
internal decimal ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, decimal value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal decimal ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, decimal value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.DefaultObjectConverter : ObjectConverter {
public object Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, Object& value)
}
internal System.Text.Json.Serialization.Converters.DictionaryDefaultConverter`3 : JsonDictionaryConverter`3<TDictionary, TKey, TValue> {
internal bool CanHaveMetadata
internal bool get_CanHaveMetadata()
protected internal bool OnWriteResume(Utf8JsonWriter writer, TDictionary value, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.Converters.DictionaryOfTKeyTValueConverter`3 : DictionaryDefaultConverter`3<TCollection, TKey, TValue> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(TKey key, TValue& modreq(System.Runtime.InteropServices.InAttribute) value, JsonSerializerOptions options, ReadStack& state)
protected internal bool OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.Converters.DoubleConverter : JsonPrimitiveConverter`1<double> {
public double Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, double value, JsonSerializerOptions options)
internal double ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, double value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal double ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, double value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.EnumConverter`1 : JsonPrimitiveConverter`1<T> {
private TypeCode s_enumTypeCode
private bool s_isSignedEnum
private string ValueSeparator
private EnumConverterOptions _converterOptions
private JsonNamingPolicy _namingPolicy
private ConcurrentDictionary`2<ulong, JsonEncodedText> _nameCacheForWriting
private ConcurrentDictionary`2<string, T> _nameCacheForReading
private int NameCacheSizeSoftLimit
public bool CanConvert(Type type)
public void .ctor(EnumConverterOptions converterOptions, JsonSerializerOptions serializerOptions)
public void .ctor(EnumConverterOptions converterOptions, JsonNamingPolicy namingPolicy, JsonSerializerOptions serializerOptions)
public T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
internal T ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, T value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
private bool TryParseEnumCore(string enumString, JsonSerializerOptions _, T& value)
private T ReadEnumUsingNamingPolicy(string enumString)
private ulong ConvertToUInt64(object value)
private bool IsValidIdentifier(string value)
private string FormatJsonName(string value, JsonNamingPolicy namingPolicy)
private String[] SplitFlagsEnum(string value)
}
internal System.Text.Json.Serialization.Converters.EnumConverterFactory : JsonConverterFactory {
public bool CanConvert(Type type)
public JsonConverter CreateConverter(Type type, JsonSerializerOptions options)
internal JsonConverter Create(Type enumType, EnumConverterOptions converterOptions, JsonNamingPolicy namingPolicy, JsonSerializerOptions options)
private Type GetEnumConverterType(Type enumType)
}
internal System.Text.Json.Serialization.Converters.EnumConverterOptions : Enum {
public int value__
public EnumConverterOptions AllowStrings
public EnumConverterOptions AllowNumbers
}
internal System.Text.Json.Serialization.Converters.FSharpListConverter`2 : IEnumerableDefaultConverter`2<TList, TElement> {
private Func`2<IEnumerable`1<TElement>, TList> _listConstructor
internal bool SupportsCreateObjectDelegate
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
internal bool get_SupportsCreateObjectDelegate()
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected void ConvertCollection(ReadStack& state, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.FSharpMapConverter`3 : DictionaryDefaultConverter`3<TMap, TKey, TValue> {
private Func`2<IEnumerable`1<Tuple`2<TKey, TValue>>, TMap> _mapConstructor
internal bool CanHaveMetadata
internal bool SupportsCreateObjectDelegate
protected void Add(TKey key, TValue& modreq(System.Runtime.InteropServices.InAttribute) value, JsonSerializerOptions options, ReadStack& state)
internal bool get_CanHaveMetadata()
internal bool get_SupportsCreateObjectDelegate()
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state)
protected void ConvertCollection(ReadStack& state, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.FSharpOptionConverter`2 : JsonConverter`1<TOption> {
private JsonConverter`1<TElement> _elementConverter
private Func`2<TOption, TElement> _optionValueGetter
private Func`2<TElement, TOption> _optionConstructor
internal Type ElementType
public bool HandleNull
internal Type get_ElementType()
public bool get_HandleNull()
public void .ctor(JsonConverter`1<TElement> elementConverter)
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, TOption& value)
internal bool OnTryWrite(Utf8JsonWriter writer, TOption value, JsonSerializerOptions options, WriteStack& state)
public void Write(Utf8JsonWriter writer, TOption value, JsonSerializerOptions options)
public TOption Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.FSharpSetConverter`2 : IEnumerableDefaultConverter`2<TSet, TElement> {
private Func`2<IEnumerable`1<TElement>, TSet> _setConstructor
internal bool SupportsCreateObjectDelegate
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
internal bool get_SupportsCreateObjectDelegate()
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected void ConvertCollection(ReadStack& state, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.FSharpTypeConverterFactory : JsonConverterFactory {
private ObjectConverterFactory _recordConverterFactory
public bool CanConvert(Type typeToConvert)
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.FSharpValueOptionConverter`2 : JsonConverter`1<TValueOption> {
private JsonConverter`1<TElement> _elementConverter
private StructGetter`2<TValueOption, TElement> _optionValueGetter
private Func`2<TElement, TValueOption> _optionConstructor
internal Type ElementType
public bool HandleNull
internal Type get_ElementType()
public bool get_HandleNull()
public void .ctor(JsonConverter`1<TElement> elementConverter)
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, TValueOption& value)
internal bool OnTryWrite(Utf8JsonWriter writer, TValueOption value, JsonSerializerOptions options, WriteStack& state)
public void Write(Utf8JsonWriter writer, TValueOption value, JsonSerializerOptions options)
public TValueOption Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.GuidConverter : JsonPrimitiveConverter`1<Guid> {
public Guid Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, Guid value, JsonSerializerOptions options)
internal Guid ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, Guid value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
}
internal System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2 : JsonCollectionConverter`2<TAsyncEnumerable, TElement> {
internal bool SupportsCreateObjectDelegate
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, TAsyncEnumerable& value)
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
internal bool get_SupportsCreateObjectDelegate()
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
internal bool OnTryWrite(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
protected bool OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.Converters.ICollectionOfTConverter`2 : IEnumerableDefaultConverter`2<TCollection, TElement> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
internal void ConfigureJsonTypeInfo(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.IDictionaryConverter`1 : JsonDictionaryConverter`3<TDictionary, string, object> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(string key, Object& modreq(System.Runtime.InteropServices.InAttribute) value, JsonSerializerOptions options, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state)
protected internal bool OnWriteResume(Utf8JsonWriter writer, TDictionary value, JsonSerializerOptions options, WriteStack& state)
internal void ConfigureJsonTypeInfo(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.IDictionaryOfTKeyTValueConverter`3 : DictionaryDefaultConverter`3<TDictionary, TKey, TValue> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(TKey key, TValue& modreq(System.Runtime.InteropServices.InAttribute) value, JsonSerializerOptions options, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state)
internal void ConfigureJsonTypeInfo(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.IEnumerableConverter`1 : JsonCollectionConverter`2<TCollection, object> {
private bool _isDeserializable
internal bool SupportsCreateObjectDelegate
protected void Add(Object& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
internal bool get_SupportsCreateObjectDelegate()
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected bool OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.Converters.IEnumerableConverterFactory : JsonConverterFactory {
private IDictionaryConverter`1<IDictionary> s_converterForIDictionary
private IEnumerableConverter`1<IEnumerable> s_converterForIEnumerable
private IListConverter`1<IList> s_converterForIList
public bool CanConvert(Type typeToConvert)
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2 : JsonCollectionConverter`2<TCollection, TElement> {
internal bool CanHaveMetadata
internal bool get_CanHaveMetadata()
protected bool OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.Converters.IEnumerableOfTConverter`2 : IEnumerableDefaultConverter`2<TCollection, TElement> {
private bool _isDeserializable
internal bool SupportsCreateObjectDelegate
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
internal bool get_SupportsCreateObjectDelegate()
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.IListConverter`1 : JsonCollectionConverter`2<TCollection, object> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(Object& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected bool OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
internal void ConfigureJsonTypeInfo(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.IListOfTConverter`2 : IEnumerableDefaultConverter`2<TCollection, TElement> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
internal void ConfigureJsonTypeInfo(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.ImmutableDictionaryOfTKeyTValueConverter`3 : DictionaryDefaultConverter`3<TDictionary, TKey, TValue> {
internal bool CanHaveMetadata
internal bool SupportsCreateObjectDelegate
protected void Add(TKey key, TValue& modreq(System.Runtime.InteropServices.InAttribute) value, JsonSerializerOptions options, ReadStack& state)
internal bool get_CanHaveMetadata()
internal bool get_SupportsCreateObjectDelegate()
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state)
protected void ConvertCollection(ReadStack& state, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.ImmutableDictionaryOfTKeyTValueConverterWithReflection`3 : ImmutableDictionaryOfTKeyTValueConverter`3<TCollection, TKey, TValue> {
internal void ConfigureJsonTypeInfoUsingReflection(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.ImmutableEnumerableOfTConverter`2 : IEnumerableDefaultConverter`2<TCollection, TElement> {
internal bool CanHaveMetadata
internal bool SupportsCreateObjectDelegate
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
internal bool get_CanHaveMetadata()
internal bool get_SupportsCreateObjectDelegate()
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected void ConvertCollection(ReadStack& state, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.ImmutableEnumerableOfTConverterWithReflection`2 : ImmutableEnumerableOfTConverter`2<TCollection, TElement> {
internal void ConfigureJsonTypeInfoUsingReflection(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.Int16Converter : JsonPrimitiveConverter`1<short> {
public short Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, short value, JsonSerializerOptions options)
internal short ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, short value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal short ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, short value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.Int32Converter : JsonPrimitiveConverter`1<int> {
public int Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, int value, JsonSerializerOptions options)
internal int ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, int value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal int ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, int value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.Int64Converter : JsonPrimitiveConverter`1<long> {
public long Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
internal long ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, long value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal long ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, long value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.IReadOnlyDictionaryOfTKeyTValueConverter`3 : DictionaryDefaultConverter`3<TDictionary, TKey, TValue> {
private bool _isDeserializable
internal bool SupportsCreateObjectDelegate
protected void Add(TKey key, TValue& modreq(System.Runtime.InteropServices.InAttribute) value, JsonSerializerOptions options, ReadStack& state)
internal bool get_SupportsCreateObjectDelegate()
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state)
}
internal System.Text.Json.Serialization.Converters.ISetOfTConverter`2 : IEnumerableDefaultConverter`2<TCollection, TElement> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
internal void ConfigureJsonTypeInfo(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.JsonArrayConverter : JsonConverter`1<JsonArray> {
public void Write(Utf8JsonWriter writer, JsonArray value, JsonSerializerOptions options)
public JsonArray Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public JsonArray ReadList(Utf8JsonReader& reader, Nullable`1<JsonNodeOptions> options)
}
internal System.Text.Json.Serialization.Converters.JsonDocumentConverter : JsonConverter`1<JsonDocument> {
public JsonDocument Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, JsonDocument value, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.JsonElementConverter : JsonConverter`1<JsonElement> {
public JsonElement Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, JsonElement value, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.JsonMetadataServicesConverter`1 : JsonResumableConverter`1<T> {
private JsonConverter`1<T> <Converter>k__BackingField
internal JsonConverter`1<T> Converter
internal Type KeyType
internal Type ElementType
internal bool ConstructorIsParameterized
internal bool SupportsCreateObjectDelegate
internal bool CanHaveMetadata
internal bool CanPopulate
internal JsonConverter`1<T> get_Converter()
internal Type get_KeyType()
internal Type get_ElementType()
internal bool get_ConstructorIsParameterized()
internal bool get_SupportsCreateObjectDelegate()
internal bool get_CanHaveMetadata()
internal bool get_CanPopulate()
public void .ctor(JsonConverter`1<T> converter)
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, T& value)
internal bool OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
internal void ConfigureJsonTypeInfo(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.JsonNodeConverter : JsonConverter`1<JsonNode> {
private JsonNodeConverter s_nodeConverter
private JsonArrayConverter s_arrayConverter
private JsonObjectConverter s_objectConverter
private JsonValueConverter s_valueConverter
public JsonNodeConverter Instance
public JsonArrayConverter ArrayConverter
public JsonObjectConverter ObjectConverter
public JsonValueConverter ValueConverter
public JsonNodeConverter get_Instance()
public JsonArrayConverter get_ArrayConverter()
public JsonObjectConverter get_ObjectConverter()
public JsonValueConverter get_ValueConverter()
public void Write(Utf8JsonWriter writer, JsonNode value, JsonSerializerOptions options)
public JsonNode Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public JsonNode Create(JsonElement element, Nullable`1<JsonNodeOptions> options)
}
internal System.Text.Json.Serialization.Converters.JsonNodeConverterFactory : JsonConverterFactory {
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
public bool CanConvert(Type typeToConvert)
}
internal System.Text.Json.Serialization.Converters.JsonObjectConverter : JsonConverter`1<JsonObject> {
internal void ConfigureJsonTypeInfo(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
internal void ReadElementAndSetProperty(object obj, string propertyName, Utf8JsonReader& reader, JsonSerializerOptions options, ReadStack& state)
public void Write(Utf8JsonWriter writer, JsonObject value, JsonSerializerOptions options)
public JsonObject Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public JsonObject ReadObject(Utf8JsonReader& reader, Nullable`1<JsonNodeOptions> options)
}
internal System.Text.Json.Serialization.Converters.JsonPrimitiveConverter`1 : JsonConverter`1<T> {
public void WriteAsPropertyName(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
public T ReadAsPropertyName(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.JsonValueConverter : JsonConverter`1<JsonValue> {
public void Write(Utf8JsonWriter writer, JsonValue value, JsonSerializerOptions options)
public JsonValue Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.LargeObjectWithParameterizedConstructorConverter`1 : ObjectWithParameterizedConstructorConverter`1<T> {
protected bool ReadAndCacheConstructorArgument(ReadStack& state, Utf8JsonReader& reader, JsonParameterInfo jsonParameterInfo)
protected object CreateObject(ReadStackFrame& frame)
protected void InitializeConstructorArgumentCaches(ReadStack& state, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.LargeObjectWithParameterizedConstructorConverterWithReflection`1 : LargeObjectWithParameterizedConstructorConverter`1<T> {
internal void ConfigureJsonTypeInfoUsingReflection(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.ListOfTConverter`2 : IEnumerableDefaultConverter`2<TCollection, TElement> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected bool OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.Converters.MemoryByteConverter : JsonConverter`1<Memory`1<byte>> {
public Memory`1<byte> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, Memory`1<byte> value, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.MemoryConverter`1 : JsonCollectionConverter`2<Memory`1<T>, T> {
internal bool CanHaveMetadata
internal bool get_CanHaveMetadata()
protected void Add(T& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected void ConvertCollection(ReadStack& state, JsonSerializerOptions options)
protected bool OnWriteResume(Utf8JsonWriter writer, Memory`1<T> value, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.Converters.MemoryConverterFactory : JsonConverterFactory {
public bool CanConvert(Type typeToConvert)
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.NullableConverter`1 : JsonConverter`1<Nullable`1<T>> {
private JsonConverter`1<T> _elementConverter
internal Type ElementType
public bool HandleNull
internal bool CanPopulate
internal bool ConstructorIsParameterized
internal Type get_ElementType()
public bool get_HandleNull()
internal bool get_CanPopulate()
internal bool get_ConstructorIsParameterized()
public void .ctor(JsonConverter`1<T> elementConverter)
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, Nullable`1& value)
internal bool OnTryWrite(Utf8JsonWriter writer, Nullable`1<T> value, JsonSerializerOptions options, WriteStack& state)
public Nullable`1<T> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, Nullable`1<T> value, JsonSerializerOptions options)
internal Nullable`1<T> ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling numberHandling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, Nullable`1<T> value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.NullableConverterFactory : JsonConverterFactory {
public bool CanConvert(Type typeToConvert)
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
public JsonConverter CreateValueConverter(Type valueTypeToConvert, JsonConverter valueConverter)
private Type GetNullableConverterType(Type valueTypeToConvert)
}
internal System.Text.Json.Serialization.Converters.ObjectConverter : JsonConverter`1<object> {
private protected ConverterStrategy GetDefaultConverterStrategy()
public object ReadAsPropertyName(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal object ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, object value, JsonSerializerOptions options)
public void WriteAsPropertyName(Utf8JsonWriter writer, object value, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, object value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
}
internal System.Text.Json.Serialization.Converters.ObjectConverterFactory : JsonConverterFactory {
private bool _useDefaultConstructorInUnannotatedStructs
public void .ctor(bool useDefaultConstructorInUnannotatedStructs)
public bool CanConvert(Type typeToConvert)
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1 : JsonObjectConverter`1<T> {
internal bool CanHaveMetadata
internal bool SupportsCreateObjectDelegate
internal bool get_CanHaveMetadata()
internal bool get_SupportsCreateObjectDelegate()
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, T& value)
internal void PopulatePropertiesFastPath(object obj, JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)
internal bool OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
protected void ReadPropertyValue(object obj, ReadStack& state, Utf8JsonReader& reader, JsonPropertyInfo jsonPropertyInfo, bool useExtensionProperty)
protected bool ReadAheadPropertyValue(ReadStack& state, Utf8JsonReader& reader, JsonPropertyInfo jsonPropertyInfo)
}
internal System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1 : ObjectDefaultConverter`1<T> {
internal bool ConstructorIsParameterized
internal bool get_ConstructorIsParameterized()
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, T& value)
protected void InitializeConstructorArgumentCaches(ReadStack& state, JsonSerializerOptions options)
protected bool ReadAndCacheConstructorArgument(ReadStack& state, Utf8JsonReader& reader, JsonParameterInfo jsonParameterInfo)
protected object CreateObject(ReadStackFrame& frame)
private void ReadConstructorArguments(ReadStack& state, Utf8JsonReader& reader, JsonSerializerOptions options)
private bool ReadConstructorArgumentsWithContinuation(ReadStack& state, Utf8JsonReader& reader, JsonSerializerOptions options)
private bool HandleConstructorArgumentWithContinuation(ReadStack& state, Utf8JsonReader& reader, JsonParameterInfo jsonParameterInfo)
private bool HandlePropertyWithContinuation(ReadStack& state, Utf8JsonReader& reader, JsonPropertyInfo jsonPropertyInfo)
private void BeginRead(ReadStack& state, JsonSerializerOptions options)
protected bool TryLookupConstructorParameter(ReadStack& state, Utf8JsonReader& reader, JsonSerializerOptions options, JsonParameterInfo& jsonParameterInfo)
}
internal System.Text.Json.Serialization.Converters.QueueOfTConverter`2 : IEnumerableDefaultConverter`2<TCollection, TElement> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.ReadOnlyMemoryByteConverter : JsonConverter`1<ReadOnlyMemory`1<byte>> {
public ReadOnlyMemory`1<byte> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, ReadOnlyMemory`1<byte> value, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.ReadOnlyMemoryConverter`1 : JsonCollectionConverter`2<ReadOnlyMemory`1<T>, T> {
internal bool CanHaveMetadata
internal bool get_CanHaveMetadata()
protected void Add(T& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected void ConvertCollection(ReadStack& state, JsonSerializerOptions options)
protected bool OnWriteResume(Utf8JsonWriter writer, ReadOnlyMemory`1<T> value, JsonSerializerOptions options, WriteStack& state)
internal bool OnWriteResume(Utf8JsonWriter writer, ReadOnlySpan`1<T> value, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.Converters.SByteConverter : JsonPrimitiveConverter`1<sbyte> {
public sbyte Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, sbyte value, JsonSerializerOptions options)
internal sbyte ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, sbyte value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal sbyte ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, sbyte value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.SingleConverter : JsonPrimitiveConverter`1<float> {
public float Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, float value, JsonSerializerOptions options)
internal float ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, float value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal float ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, float value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.SlimObjectConverter : ObjectConverter {
private IJsonTypeInfoResolver _originatingResolver
public void .ctor(IJsonTypeInfoResolver originatingResolver)
public object Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.SmallObjectWithParameterizedConstructorConverter`5 : ObjectWithParameterizedConstructorConverter`1<T> {
protected object CreateObject(ReadStackFrame& frame)
protected bool ReadAndCacheConstructorArgument(ReadStack& state, Utf8JsonReader& reader, JsonParameterInfo jsonParameterInfo)
private bool TryRead(ReadStack& state, Utf8JsonReader& reader, JsonParameterInfo jsonParameterInfo, TArg& arg)
protected void InitializeConstructorArgumentCaches(ReadStack& state, JsonSerializerOptions options)
internal void ConfigureJsonTypeInfoUsingReflection(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.StackOfTConverter`2 : IEnumerableDefaultConverter`2<TCollection, TElement> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.StackOrQueueConverter`1 : JsonCollectionConverter`2<TCollection, object> {
internal bool CanPopulate
internal bool get_CanPopulate()
protected void Add(Object& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected bool OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.Converters.StackOrQueueConverterWithReflection`1 : StackOrQueueConverter`1<TCollection> {
internal void ConfigureJsonTypeInfoUsingReflection(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.StringConverter : JsonPrimitiveConverter`1<string> {
public string Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options)
internal string ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, string value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
}
internal System.Text.Json.Serialization.Converters.TimeSpanConverter : JsonPrimitiveConverter`1<TimeSpan> {
private int MinimumTimeSpanFormatLength
private int MaximumTimeSpanFormatLength
private int MaximumEscapedTimeSpanFormatLength
public TimeSpan Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal TimeSpan ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
private TimeSpan ReadCore(Utf8JsonReader& reader)
public void Write(Utf8JsonWriter writer, TimeSpan value, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, TimeSpan value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
}
internal System.Text.Json.Serialization.Converters.UInt16Converter : JsonPrimitiveConverter`1<ushort> {
public ushort Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, ushort value, JsonSerializerOptions options)
internal ushort ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, ushort value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal ushort ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, ushort value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.UInt32Converter : JsonPrimitiveConverter`1<UInt32> {
public UInt32 Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, UInt32 value, JsonSerializerOptions options)
internal UInt32 ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, UInt32 value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal UInt32 ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, UInt32 value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.UInt64Converter : JsonPrimitiveConverter`1<ulong> {
public ulong Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, ulong value, JsonSerializerOptions options)
internal ulong ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, ulong value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal ulong ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, ulong value, JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1 : JsonConverter`1<T> {
private string _errorMessage
public string ErrorMessage
public void .ctor(string errorMessage)
public string get_ErrorMessage()
public T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Converters.UnsupportedTypeConverterFactory : JsonConverterFactory {
public bool CanConvert(Type type)
public JsonConverter CreateConverter(Type type, JsonSerializerOptions options)
internal JsonConverter CreateUnsupportedConverterForType(Type type, string errorMessage)
}
internal System.Text.Json.Serialization.Converters.UriConverter : JsonPrimitiveConverter`1<Uri> {
public Uri Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, Uri value, JsonSerializerOptions options)
internal Uri ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
private Uri ReadCore(Utf8JsonReader& reader)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, Uri value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
}
internal System.Text.Json.Serialization.Converters.VersionConverter : JsonPrimitiveConverter`1<Version> {
public Version Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
private Version ReadCore(Utf8JsonReader& reader)
public void Write(Utf8JsonWriter writer, Version value, JsonSerializerOptions options)
internal Version ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, Version value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
}
internal System.Text.Json.Serialization.IAsyncEnumerableConverterFactory : JsonConverterFactory {
public bool CanConvert(Type typeToConvert)
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
private Type GetAsyncEnumerableInterface(Type type)
}
internal System.Text.Json.Serialization.IEnumerableConverterFactoryHelpers : object {
internal string ImmutableConvertersUnreferencedCodeMessage
public MethodInfo GetImmutableEnumerableCreateRangeMethod(Type type, Type elementType)
public MethodInfo GetImmutableDictionaryCreateRangeMethod(Type type, Type keyType, Type valueType)
private Type GetImmutableEnumerableConstructingType(Type type)
private Type GetImmutableDictionaryConstructingType(Type type)
public bool IsNonGenericStackOrQueue(Type type)
private Type GetTypeIfExists(string name)
}
internal System.Text.Json.Serialization.IgnoreReferenceHandler : ReferenceHandler {
public ReferenceResolver CreateResolver()
}
internal System.Text.Json.Serialization.IgnoreReferenceResolver : ReferenceResolver {
private Stack`1<ReferenceEqualsWrapper> _stackForCycleDetection
internal void PopReferenceForCycleDetection()
internal bool ContainsReferenceForCycleDetection(object value)
internal void PushReferenceForCycleDetection(object value)
public void AddReference(string referenceId, object value)
public string GetReference(object value, Boolean& alreadyExists)
public object ResolveReference(string referenceId)
}
public System.Text.Json.Serialization.IJsonOnDeserialized {
public void OnDeserialized()
}
public System.Text.Json.Serialization.IJsonOnDeserializing {
public void OnDeserializing()
}
public System.Text.Json.Serialization.IJsonOnSerialized {
public void OnSerialized()
}
public System.Text.Json.Serialization.IJsonOnSerializing {
public void OnSerializing()
}
internal System.Text.Json.Serialization.JsonCollectionConverter`2 : JsonResumableConverter`1<TCollection> {
internal bool SupportsCreateObjectDelegate
internal Type ElementType
internal bool get_SupportsCreateObjectDelegate()
private protected ConverterStrategy GetDefaultConverterStrategy()
internal Type get_ElementType()
protected void Add(TElement& modreq(System.Runtime.InteropServices.InAttribute) value, ReadStack& state)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
protected void ConvertCollection(ReadStack& state, JsonSerializerOptions options)
protected JsonConverter`1<TElement> GetElementConverter(JsonTypeInfo elementTypeInfo)
protected JsonConverter`1<TElement> GetElementConverter(WriteStack& state)
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, TCollection& value)
internal bool OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
protected bool OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
}
public System.Text.Json.Serialization.JsonConverter : object {
private ConverterStrategy _converterStrategy
private bool <CanUseDirectReadOrWrite>k__BackingField
private bool <CanBePolymorphic>k__BackingField
private bool <RequiresReadAhead>k__BackingField
private bool <UsesDefaultHandleNull>k__BackingField
private bool <HandleNullOnRead>k__BackingField
private bool <HandleNullOnWrite>k__BackingField
private bool <IsValueType>k__BackingField
private bool <IsInternalConverter>k__BackingField
private bool <IsInternalConverterForNumberType>k__BackingField
private bool <ConstructorIsParameterized>k__BackingField
private ConstructorInfo <ConstructorInfo>k__BackingField
public Type Type
internal ConverterStrategy ConverterStrategy
internal bool SupportsCreateObjectDelegate
internal bool CanPopulate
internal bool CanUseDirectReadOrWrite
internal bool CanHaveMetadata
internal bool CanBePolymorphic
internal bool RequiresReadAhead
internal bool UsesDefaultHandleNull
internal bool HandleNullOnRead
internal bool HandleNullOnWrite
internal JsonConverter SourceConverterForCastingConverter
internal Type ElementType
internal Type KeyType
internal bool IsValueType
internal bool IsInternalConverter
internal bool IsInternalConverterForNumberType
internal bool ConstructorIsParameterized
internal ConstructorInfo ConstructorInfo
public Type get_Type()
public bool CanConvert(Type typeToConvert)
internal ConverterStrategy get_ConverterStrategy()
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConverterStrategy(ConverterStrategy value)
private protected ConverterStrategy GetDefaultConverterStrategy()
internal bool get_SupportsCreateObjectDelegate()
internal bool get_CanPopulate()
internal bool get_CanUseDirectReadOrWrite()
internal void set_CanUseDirectReadOrWrite(bool value)
internal bool get_CanHaveMetadata()
internal bool get_CanBePolymorphic()
internal void set_CanBePolymorphic(bool value)
internal bool get_RequiresReadAhead()
internal void set_RequiresReadAhead(bool value)
internal void ReadElementAndSetProperty(object obj, string propertyName, Utf8JsonReader& reader, JsonSerializerOptions options, ReadStack& state)
internal JsonTypeInfo CreateJsonTypeInfo(JsonSerializerOptions options)
internal JsonConverter`1<TTarget> CreateCastingConverter()
internal bool get_UsesDefaultHandleNull()
private protected void set_UsesDefaultHandleNull(bool value)
internal bool get_HandleNullOnRead()
private protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HandleNullOnRead(bool value)
internal bool get_HandleNullOnWrite()
private protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HandleNullOnWrite(bool value)
internal JsonConverter get_SourceConverterForCastingConverter()
internal Type get_ElementType()
internal Type get_KeyType()
internal bool get_IsValueType()
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsValueType(bool value)
internal bool get_IsInternalConverter()
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsInternalConverter(bool value)
internal bool get_IsInternalConverterForNumberType()
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsInternalConverterForNumberType(bool value)
internal bool ShouldFlush(Utf8JsonWriter writer, WriteStack& state)
internal object ReadAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal bool OnTryReadAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, Object& value)
internal bool TryReadAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, Object& value)
internal object ReadAsPropertyNameAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal object ReadAsPropertyNameCoreAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal object ReadNumberWithCustomHandlingAsObject(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options)
internal bool OnTryWriteAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options, WriteStack& state)
internal bool TryWriteAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options, WriteStack& state)
internal void WriteAsPropertyNameAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options)
internal void WriteAsPropertyNameCoreAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal void WriteNumberWithCustomHandlingAsObject(Utf8JsonWriter writer, object value, JsonNumberHandling handling)
internal bool get_ConstructorIsParameterized()
internal ConstructorInfo get_ConstructorInfo()
internal void set_ConstructorInfo(ConstructorInfo value)
internal void ConfigureJsonTypeInfo(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
internal void ConfigureJsonTypeInfoUsingReflection(JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options)
internal JsonConverter ResolvePolymorphicConverter(JsonTypeInfo jsonTypeInfo, ReadStack& state)
internal JsonConverter ResolvePolymorphicConverter(object value, JsonTypeInfo jsonTypeInfo, JsonSerializerOptions options, WriteStack& state)
internal bool TryHandleSerializedObjectReference(Utf8JsonWriter writer, object value, JsonSerializerOptions options, JsonConverter polymorphicConverter, WriteStack& state)
internal bool SingleValueReadWithReadAhead(bool requiresReadAhead, Utf8JsonReader& reader, ReadStack& state)
internal bool DoSingleValueReadWithReadAhead(Utf8JsonReader& reader)
}
public System.Text.Json.Serialization.JsonConverter`1 : JsonConverter {
private Type <Type>k__BackingField
private JsonConverter`1<T> _fallbackConverterForPropertyNameSerialization
internal Type KeyType
internal Type ElementType
public bool HandleNull
public Type Type
internal T ReadCore(Utf8JsonReader& reader, JsonSerializerOptions options, ReadStack& state)
internal bool WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
public bool CanConvert(Type typeToConvert)
private protected ConverterStrategy GetDefaultConverterStrategy()
internal JsonTypeInfo CreateJsonTypeInfo(JsonSerializerOptions options)
internal Type get_KeyType()
internal Type get_ElementType()
public bool get_HandleNull()
internal void WriteAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options)
internal bool OnTryWriteAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options, WriteStack& state)
internal void WriteAsPropertyNameAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options)
internal void WriteAsPropertyNameCoreAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal void WriteNumberWithCustomHandlingAsObject(Utf8JsonWriter writer, object value, JsonNumberHandling handling)
internal bool TryWriteAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options, WriteStack& state)
internal bool OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, T& value)
public T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal bool TryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, T& value, Boolean& isPopulatedValue)
internal bool OnTryReadAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, Object& value)
internal bool TryReadAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, Object& value)
internal object ReadAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal object ReadAsPropertyNameAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal object ReadAsPropertyNameCoreAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal object ReadNumberWithCustomHandlingAsObject(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
private bool IsNull(T value)
internal bool TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
internal bool TryWriteDataExtensionProperty(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
public Type get_Type()
internal void VerifyRead(JsonTokenType tokenType, int depth, long bytesConsumed, bool isValueConverter, Utf8JsonReader& reader)
internal void VerifyWrite(int originalDepth, Utf8JsonWriter writer)
public void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
public T ReadAsPropertyName(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal T ReadAsPropertyNameCore(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void WriteAsPropertyName(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
internal void WriteAsPropertyNameCore(Utf8JsonWriter writer, T value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
private JsonConverter`1<T> GetFallbackConverterForPropertyNameSerialization(JsonSerializerOptions options)
internal T ReadNumberWithCustomHandling(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteNumberWithCustomHandling(Utf8JsonWriter writer, T value, JsonNumberHandling handling)
}
public System.Text.Json.Serialization.JsonConverterAttribute : JsonAttribute {
private Type <ConverterType>k__BackingField
public Type ConverterType
public void .ctor(Type converterType)
public Type get_ConverterType()
private void set_ConverterType(Type value)
public JsonConverter CreateConverter(Type typeToConvert)
}
public System.Text.Json.Serialization.JsonConverterFactory : JsonConverter {
internal Type KeyType
internal Type ElementType
public Type Type
private protected ConverterStrategy GetDefaultConverterStrategy()
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
internal Type get_KeyType()
internal Type get_ElementType()
internal JsonConverter GetConverterInternal(Type typeToConvert, JsonSerializerOptions options)
internal object ReadAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal bool OnTryReadAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, Object& value)
internal bool TryReadAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, Object& value)
internal object ReadAsPropertyNameAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal object ReadAsPropertyNameCoreAsObject(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
internal object ReadNumberWithCustomHandlingAsObject(Utf8JsonReader& reader, JsonNumberHandling handling, JsonSerializerOptions options)
internal void WriteAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options)
internal bool OnTryWriteAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options, WriteStack& state)
internal bool TryWriteAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options, WriteStack& state)
internal void WriteAsPropertyNameAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options)
public Type get_Type()
internal void WriteAsPropertyNameCoreAsObject(Utf8JsonWriter writer, object value, JsonSerializerOptions options, bool isWritingExtensionDataProperty)
internal void WriteNumberWithCustomHandlingAsObject(Utf8JsonWriter writer, object value, JsonNumberHandling handling)
}
public System.Text.Json.Serialization.JsonDerivedTypeAttribute : JsonAttribute {
private Type <DerivedType>k__BackingField
private object <TypeDiscriminator>k__BackingField
public Type DerivedType
public object TypeDiscriminator
public void .ctor(Type derivedType)
public void .ctor(Type derivedType, string typeDiscriminator)
public void .ctor(Type derivedType, int typeDiscriminator)
public Type get_DerivedType()
public object get_TypeDiscriminator()
}
internal System.Text.Json.Serialization.JsonDictionaryConverter`1 : JsonResumableConverter`1<TDictionary> {
internal bool SupportsCreateObjectDelegate
internal bool get_SupportsCreateObjectDelegate()
private protected ConverterStrategy GetDefaultConverterStrategy()
protected internal bool OnWriteResume(Utf8JsonWriter writer, TDictionary dictionary, JsonSerializerOptions options, WriteStack& state)
}
internal System.Text.Json.Serialization.JsonDictionaryConverter`3 : JsonDictionaryConverter`1<TDictionary> {
protected JsonConverter`1<TKey> _keyConverter
protected JsonConverter`1<TValue> _valueConverter
internal Type ElementType
internal Type KeyType
protected void Add(TKey key, TValue& modreq(System.Runtime.InteropServices.InAttribute) value, JsonSerializerOptions options, ReadStack& state)
protected void ConvertCollection(ReadStack& state, JsonSerializerOptions options)
protected void CreateCollection(Utf8JsonReader& reader, ReadStack& state)
internal Type get_ElementType()
internal Type get_KeyType()
protected JsonConverter`1<T> GetConverter(JsonTypeInfo typeInfo)
internal bool OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, TDictionary& value)
internal bool OnTryWrite(Utf8JsonWriter writer, TDictionary dictionary, JsonSerializerOptions options, WriteStack& state)
internal TKey <OnTryRead>g__ReadDictionaryKey|10_0(JsonConverter`1<TKey> keyConverter, Utf8JsonReader& reader, ReadStack& state, JsonSerializerOptions options)
}
public System.Text.Json.Serialization.JsonIgnoreAttribute : JsonAttribute {
private JsonIgnoreCondition <Condition>k__BackingField
public JsonIgnoreCondition Condition
public JsonIgnoreCondition get_Condition()
public void set_Condition(JsonIgnoreCondition value)
}
public System.Text.Json.Serialization.JsonIgnoreCondition : Enum {
public int value__
public JsonIgnoreCondition Never
public JsonIgnoreCondition Always
public JsonIgnoreCondition WhenWritingDefault
public JsonIgnoreCondition WhenWritingNull
}
public System.Text.Json.Serialization.JsonKnownNamingPolicy : Enum {
public int value__
public JsonKnownNamingPolicy Unspecified
public JsonKnownNamingPolicy CamelCase
public JsonKnownNamingPolicy SnakeCaseLower
public JsonKnownNamingPolicy SnakeCaseUpper
public JsonKnownNamingPolicy KebabCaseLower
public JsonKnownNamingPolicy KebabCaseUpper
}
public System.Text.Json.Serialization.JsonNumberEnumConverter`1 : JsonConverterFactory {
public bool CanConvert(Type typeToConvert)
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
}
public System.Text.Json.Serialization.JsonNumberHandling : Enum {
public int value__
public JsonNumberHandling Strict
public JsonNumberHandling AllowReadingFromString
public JsonNumberHandling WriteAsString
public JsonNumberHandling AllowNamedFloatingPointLiterals
}
public System.Text.Json.Serialization.JsonNumberHandlingAttribute : JsonAttribute {
private JsonNumberHandling <Handling>k__BackingField
public JsonNumberHandling Handling
public JsonNumberHandling get_Handling()
public void .ctor(JsonNumberHandling handling)
}
internal System.Text.Json.Serialization.JsonObjectConverter`1 : JsonResumableConverter`1<T> {
internal bool CanPopulate
internal Type ElementType
private protected ConverterStrategy GetDefaultConverterStrategy()
internal bool get_CanPopulate()
internal Type get_ElementType()
}
public System.Text.Json.Serialization.JsonObjectCreationHandling : Enum {
public int value__
public JsonObjectCreationHandling Replace
public JsonObjectCreationHandling Populate
}
public System.Text.Json.Serialization.JsonObjectCreationHandlingAttribute : JsonAttribute {
private JsonObjectCreationHandling <Handling>k__BackingField
public JsonObjectCreationHandling Handling
public JsonObjectCreationHandling get_Handling()
public void .ctor(JsonObjectCreationHandling handling)
}
public System.Text.Json.Serialization.JsonPolymorphicAttribute : JsonAttribute {
private string <TypeDiscriminatorPropertyName>k__BackingField
private JsonUnknownDerivedTypeHandling <UnknownDerivedTypeHandling>k__BackingField
private bool <IgnoreUnrecognizedTypeDiscriminators>k__BackingField
public string TypeDiscriminatorPropertyName
public JsonUnknownDerivedTypeHandling UnknownDerivedTypeHandling
public bool IgnoreUnrecognizedTypeDiscriminators
public string get_TypeDiscriminatorPropertyName()
public void set_TypeDiscriminatorPropertyName(string value)
public JsonUnknownDerivedTypeHandling get_UnknownDerivedTypeHandling()
public void set_UnknownDerivedTypeHandling(JsonUnknownDerivedTypeHandling value)
public bool get_IgnoreUnrecognizedTypeDiscriminators()
public void set_IgnoreUnrecognizedTypeDiscriminators(bool value)
}
public System.Text.Json.Serialization.JsonPropertyNameAttribute : JsonAttribute {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
}
public System.Text.Json.Serialization.JsonPropertyOrderAttribute : JsonAttribute {
private int <Order>k__BackingField
public int Order
public void .ctor(int order)
public int get_Order()
}
internal System.Text.Json.Serialization.JsonResumableConverter`1 : JsonConverter`1<T> {
public bool HandleNull
public T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)
public void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
public bool get_HandleNull()
}
public System.Text.Json.Serialization.JsonSerializableAttribute : JsonAttribute {
private string <TypeInfoPropertyName>k__BackingField
private JsonSourceGenerationMode <GenerationMode>k__BackingField
public string TypeInfoPropertyName
public JsonSourceGenerationMode GenerationMode
public void .ctor(Type type)
public string get_TypeInfoPropertyName()
public void set_TypeInfoPropertyName(string value)
public JsonSourceGenerationMode get_GenerationMode()
public void set_GenerationMode(JsonSourceGenerationMode value)
}
public System.Text.Json.Serialization.JsonSerializerContext : object {
private JsonSerializerOptions _options
public JsonSerializerOptions Options
protected JsonSerializerOptions GeneratedSerializerOptions
public JsonSerializerOptions get_Options()
internal void AssociateWithOptions(JsonSerializerOptions options)
private bool System.Text.Json.Serialization.Metadata.IBuiltInJsonTypeInfoResolver.IsCompatibleWithOptions(JsonSerializerOptions options)
protected JsonSerializerOptions get_GeneratedSerializerOptions()
protected void .ctor(JsonSerializerOptions options)
public JsonTypeInfo GetTypeInfo(Type type)
private JsonTypeInfo System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver.GetTypeInfo(Type type, JsonSerializerOptions options)
}
public System.Text.Json.Serialization.JsonSourceGenerationMode : Enum {
public int value__
public JsonSourceGenerationMode Default
public JsonSourceGenerationMode Metadata
public JsonSourceGenerationMode Serialization
}
public System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute : JsonAttribute {
private bool <AllowTrailingCommas>k__BackingField
private Type[] <Converters>k__BackingField
private int <DefaultBufferSize>k__BackingField
private JsonIgnoreCondition <DefaultIgnoreCondition>k__BackingField
private JsonKnownNamingPolicy <DictionaryKeyPolicy>k__BackingField
private bool <IgnoreReadOnlyFields>k__BackingField
private bool <IgnoreReadOnlyProperties>k__BackingField
private bool <IncludeFields>k__BackingField
private int <MaxDepth>k__BackingField
private JsonNumberHandling <NumberHandling>k__BackingField
private JsonObjectCreationHandling <PreferredObjectCreationHandling>k__BackingField
private bool <PropertyNameCaseInsensitive>k__BackingField
private JsonKnownNamingPolicy <PropertyNamingPolicy>k__BackingField
private JsonCommentHandling <ReadCommentHandling>k__BackingField
private JsonUnknownTypeHandling <UnknownTypeHandling>k__BackingField
private JsonUnmappedMemberHandling <UnmappedMemberHandling>k__BackingField
private bool <WriteIndented>k__BackingField
private JsonSourceGenerationMode <GenerationMode>k__BackingField
private bool <UseStringEnumConverter>k__BackingField
public bool AllowTrailingCommas
public Type[] Converters
public int DefaultBufferSize
public JsonIgnoreCondition DefaultIgnoreCondition
public JsonKnownNamingPolicy DictionaryKeyPolicy
public bool IgnoreReadOnlyFields
public bool IgnoreReadOnlyProperties
public bool IncludeFields
public int MaxDepth
public JsonNumberHandling NumberHandling
public JsonObjectCreationHandling PreferredObjectCreationHandling
public bool PropertyNameCaseInsensitive
public JsonKnownNamingPolicy PropertyNamingPolicy
public JsonCommentHandling ReadCommentHandling
public JsonUnknownTypeHandling UnknownTypeHandling
public JsonUnmappedMemberHandling UnmappedMemberHandling
public bool WriteIndented
public JsonSourceGenerationMode GenerationMode
public bool UseStringEnumConverter
public void .ctor(JsonSerializerDefaults defaults)
public bool get_AllowTrailingCommas()
public void set_AllowTrailingCommas(bool value)
public Type[] get_Converters()
public void set_Converters(Type[] value)
public int get_DefaultBufferSize()
public void set_DefaultBufferSize(int value)
public JsonIgnoreCondition get_DefaultIgnoreCondition()
public void set_DefaultIgnoreCondition(JsonIgnoreCondition value)
public JsonKnownNamingPolicy get_DictionaryKeyPolicy()
public void set_DictionaryKeyPolicy(JsonKnownNamingPolicy value)
public bool get_IgnoreReadOnlyFields()
public void set_IgnoreReadOnlyFields(bool value)
public bool get_IgnoreReadOnlyProperties()
public void set_IgnoreReadOnlyProperties(bool value)
public bool get_IncludeFields()
public void set_IncludeFields(bool value)
public int get_MaxDepth()
public void set_MaxDepth(int value)
public JsonNumberHandling get_NumberHandling()
public void set_NumberHandling(JsonNumberHandling value)
public JsonObjectCreationHandling get_PreferredObjectCreationHandling()
public void set_PreferredObjectCreationHandling(JsonObjectCreationHandling value)
public bool get_PropertyNameCaseInsensitive()
public void set_PropertyNameCaseInsensitive(bool value)
public JsonKnownNamingPolicy get_PropertyNamingPolicy()
public void set_PropertyNamingPolicy(JsonKnownNamingPolicy value)
public JsonCommentHandling get_ReadCommentHandling()
public void set_ReadCommentHandling(JsonCommentHandling value)
public JsonUnknownTypeHandling get_UnknownTypeHandling()
public void set_UnknownTypeHandling(JsonUnknownTypeHandling value)
public JsonUnmappedMemberHandling get_UnmappedMemberHandling()
public void set_UnmappedMemberHandling(JsonUnmappedMemberHandling value)
public bool get_WriteIndented()
public void set_WriteIndented(bool value)
public JsonSourceGenerationMode get_GenerationMode()
public void set_GenerationMode(JsonSourceGenerationMode value)
public bool get_UseStringEnumConverter()
public void set_UseStringEnumConverter(bool value)
}
public System.Text.Json.Serialization.JsonStringEnumConverter : JsonConverterFactory {
private JsonNamingPolicy _namingPolicy
private EnumConverterOptions _converterOptions
public void .ctor(JsonNamingPolicy namingPolicy, bool allowIntegerValues)
public bool CanConvert(Type typeToConvert)
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
}
public System.Text.Json.Serialization.JsonStringEnumConverter`1 : JsonConverterFactory {
private JsonNamingPolicy _namingPolicy
private EnumConverterOptions _converterOptions
public void .ctor(JsonNamingPolicy namingPolicy, bool allowIntegerValues)
public bool CanConvert(Type typeToConvert)
public JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
}
public System.Text.Json.Serialization.JsonUnknownDerivedTypeHandling : Enum {
public int value__
public JsonUnknownDerivedTypeHandling FailSerialization
public JsonUnknownDerivedTypeHandling FallBackToBaseType
public JsonUnknownDerivedTypeHandling FallBackToNearestAncestor
}
public System.Text.Json.Serialization.JsonUnknownTypeHandling : Enum {
public int value__
public JsonUnknownTypeHandling JsonElement
public JsonUnknownTypeHandling JsonNode
}
public System.Text.Json.Serialization.JsonUnmappedMemberHandling : Enum {
public int value__
public JsonUnmappedMemberHandling Skip
public JsonUnmappedMemberHandling Disallow
}
public System.Text.Json.Serialization.JsonUnmappedMemberHandlingAttribute : JsonAttribute {
private JsonUnmappedMemberHandling <UnmappedMemberHandling>k__BackingField
public JsonUnmappedMemberHandling UnmappedMemberHandling
public void .ctor(JsonUnmappedMemberHandling unmappedMemberHandling)
public JsonUnmappedMemberHandling get_UnmappedMemberHandling()
}
public System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver : object {
private Dictionary`2<Type, JsonConverter> s_defaultSimpleConverters
private JsonConverterFactory[] s_defaultFactoryConverters
private MemberAccessor s_memberAccessor
private bool _mutable
private ModifierCollection _modifiers
private DefaultJsonTypeInfoResolver s_defaultInstance
internal MemberAccessor MemberAccessor
public IList`1<Action`1<JsonTypeInfo>> Modifiers
internal bool IsDefaultInstanceRooted
private JsonConverterFactory[] GetDefaultFactoryConverters()
private Dictionary`2<Type, JsonConverter> GetDefaultSimpleConverters()
private JsonConverter GetBuiltInConverter(Type typeToConvert)
internal bool TryGetDefaultSimpleConverter(Type typeToConvert, JsonConverter& converter)
private JsonConverter GetCustomConverterForMember(Type typeToConvert, MemberInfo memberInfo, JsonSerializerOptions options)
internal JsonConverter GetConverterForType(Type typeToConvert, JsonSerializerOptions options, bool resolveJsonConverterAttribute)
private JsonConverter GetConverterFromAttribute(JsonConverterAttribute converterAttribute, Type typeToConvert, MemberInfo memberInfo, JsonSerializerOptions options)
internal MemberAccessor get_MemberAccessor()
private JsonTypeInfo CreateTypeInfoCore(Type type, JsonConverter converter, JsonSerializerOptions options)
private void PopulateProperties(JsonTypeInfo typeInfo)
private void AddMembersDeclaredBySuperType(JsonTypeInfo typeInfo, Type currentType, bool constructorHasSetsRequiredMembersAttribute, PropertyHierarchyResolutionState& state)
private void AddMember(JsonTypeInfo typeInfo, Type typeToConvert, MemberInfo memberInfo, bool shouldCheckForRequiredKeyword, bool hasJsonIncludeAttribute, PropertyHierarchyResolutionState& state)
private JsonPropertyInfo CreatePropertyInfo(JsonTypeInfo typeInfo, Type typeToConvert, MemberInfo memberInfo, JsonSerializerOptions options, bool shouldCheckForRequiredKeyword, bool hasJsonIncludeAttribute)
private Nullable`1<JsonNumberHandling> GetNumberHandlingForType(Type type)
private Nullable`1<JsonObjectCreationHandling> GetObjectCreationHandlingForType(Type type)
private Nullable`1<JsonUnmappedMemberHandling> GetUnmappedMemberHandling(Type type)
private bool PropertyIsOverriddenAndIgnored(PropertyInfo propertyInfo, Dictionary`2<string, JsonPropertyInfo> ignoredMembers)
private void PopulateParameterInfoValues(JsonTypeInfo typeInfo)
private void PopulatePropertyInfo(JsonPropertyInfo jsonPropertyInfo, MemberInfo memberInfo, JsonConverter customConverter, Nullable`1<JsonIgnoreCondition> ignoreCondition, bool shouldCheckForRequiredKeyword, bool hasJsonIncludeAttribute)
private void DeterminePropertyPolicies(JsonPropertyInfo propertyInfo, MemberInfo memberInfo)
private void DeterminePropertyName(JsonPropertyInfo propertyInfo, MemberInfo memberInfo)
private void DeterminePropertyIsRequired(JsonPropertyInfo propertyInfo, MemberInfo memberInfo, bool shouldCheckForRequiredKeyword)
internal void DeterminePropertyAccessors(JsonPropertyInfo`1<T> jsonPropertyInfo, MemberInfo memberInfo, bool useNonPublicAccessors)
private Func`1<object> DetermineCreateObjectDelegate(Type type, JsonConverter converter)
private void .ctor(bool mutable)
public JsonTypeInfo GetTypeInfo(Type type, JsonSerializerOptions options)
private JsonTypeInfo CreateJsonTypeInfo(Type type, JsonSerializerOptions options)
public IList`1<Action`1<JsonTypeInfo>> get_Modifiers()
private bool System.Text.Json.Serialization.Metadata.IBuiltInJsonTypeInfoResolver.IsCompatibleWithOptions(JsonSerializerOptions _)
internal bool get_IsDefaultInstanceRooted()
internal DefaultJsonTypeInfoResolver RootDefaultInstance()
internal void <GetDefaultSimpleConverters>g__Add|3_0(JsonConverter converter, <>c__DisplayClass3_0& )
}
internal System.Text.Json.Serialization.Metadata.EmptyJsonTypeInfoResolver : object {
public JsonTypeInfo GetTypeInfo(Type type, JsonSerializerOptions options)
public bool IsCompatibleWithOptions(JsonSerializerOptions _)
}
internal System.Text.Json.Serialization.Metadata.FSharpCoreReflectionProxy : object {
public string FSharpCoreUnreferencedCodeMessage
private FSharpCoreReflectionProxy s_singletonInstance
private string CompilationMappingAttributeTypeName
private Type _compilationMappingAttributeType
private MethodInfo _sourceConstructFlagsGetter
private Type _fsharpOptionType
private Type _fsharpValueOptionType
private Type _fsharpListType
private Type _fsharpSetType
private Type _fsharpMapType
private MethodInfo _fsharpListCtor
private MethodInfo _fsharpSetCtor
private MethodInfo _fsharpMapCtor
public FSharpCoreReflectionProxy Instance
public bool IsFSharpType(Type type)
public FSharpCoreReflectionProxy get_Instance()
private void .ctor(Assembly fsharpCoreAssembly)
public FSharpKind DetectFSharpKind(Type type)
public Func`2<TFSharpOption, T> CreateFSharpOptionValueGetter()
public Func`2<TElement, TFSharpOption> CreateFSharpOptionSomeConstructor()
public StructGetter`2<TFSharpValueOption, TElement> CreateFSharpValueOptionValueGetter()
public Func`2<TElement, TFSharpOption> CreateFSharpValueOptionSomeConstructor()
public Func`2<IEnumerable`1<TElement>, TFSharpList> CreateFSharpListConstructor()
public Func`2<IEnumerable`1<TElement>, TFSharpSet> CreateFSharpSetConstructor()
public Func`2<IEnumerable`1<Tuple`2<TKey, TValue>>, TFSharpMap> CreateFSharpMapConstructor()
private Attribute GetFSharpCompilationMappingAttribute(Type type)
private SourceConstructFlags GetSourceConstructFlags(Attribute compilationMappingAttribute)
private Assembly GetFSharpCoreAssembly(Type type)
private TDelegate CreateDelegate(MethodInfo methodInfo)
private TMemberInfo EnsureMemberExists(TMemberInfo memberInfo, string memberName)
}
internal System.Text.Json.Serialization.Metadata.IBuiltInJsonTypeInfoResolver {
public bool IsCompatibleWithOptions(JsonSerializerOptions options)
}
public System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver {
public JsonTypeInfo GetTypeInfo(Type type, JsonSerializerOptions options)
}
public System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues`1 : object {
private Func`1<TCollection> <ObjectCreator>k__BackingField
private JsonTypeInfo <KeyInfo>k__BackingField
private JsonTypeInfo <ElementInfo>k__BackingField
private JsonNumberHandling <NumberHandling>k__BackingField
private Action`2<Utf8JsonWriter, TCollection> <SerializeHandler>k__BackingField
public Func`1<TCollection> ObjectCreator
public JsonTypeInfo KeyInfo
public JsonTypeInfo ElementInfo
public JsonNumberHandling NumberHandling
public Action`2<Utf8JsonWriter, TCollection> SerializeHandler
public Func`1<TCollection> get_ObjectCreator()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ObjectCreator(Func`1<TCollection> value)
public JsonTypeInfo get_KeyInfo()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_KeyInfo(JsonTypeInfo value)
public JsonTypeInfo get_ElementInfo()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ElementInfo(JsonTypeInfo value)
public JsonNumberHandling get_NumberHandling()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NumberHandling(JsonNumberHandling value)
public Action`2<Utf8JsonWriter, TCollection> get_SerializeHandler()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SerializeHandler(Action`2<Utf8JsonWriter, TCollection> value)
}
public System.Text.Json.Serialization.Metadata.JsonDerivedType : ValueType {
private Type <DerivedType>k__BackingField
private object <TypeDiscriminator>k__BackingField
public Type DerivedType
public object TypeDiscriminator
public void .ctor(Type derivedType)
public void .ctor(Type derivedType, int typeDiscriminator)
public void .ctor(Type derivedType, string typeDiscriminator)
internal void .ctor(Type derivedType, object typeDiscriminator)
public Type get_DerivedType()
public object get_TypeDiscriminator()
internal void Deconstruct(Type& derivedType, Object& typeDiscriminator)
}
public System.Text.Json.Serialization.Metadata.JsonMetadataServices : object {
private JsonConverter`1<bool> s_booleanConverter
private JsonConverter`1<Byte[]> s_byteArrayConverter
private JsonConverter`1<byte> s_byteConverter
private JsonConverter`1<char> s_charConverter
private JsonConverter`1<DateTime> s_dateTimeConverter
private JsonConverter`1<DateTimeOffset> s_dateTimeOffsetConverter
private JsonConverter`1<decimal> s_decimalConverter
private JsonConverter`1<double> s_doubleConverter
private JsonConverter`1<Guid> s_guidConverter
private JsonConverter`1<short> s_int16Converter
private JsonConverter`1<int> s_int32Converter
private JsonConverter`1<long> s_int64Converter
private JsonConverter`1<JsonArray> s_jsonArrayConverter
private JsonConverter`1<JsonElement> s_jsonElementConverter
private JsonConverter`1<JsonNode> s_jsonNodeConverter
private JsonConverter`1<JsonObject> s_jsonObjectConverter
private JsonConverter`1<JsonValue> s_jsonValueConverter
private JsonConverter`1<JsonDocument> s_jsonDocumentConverter
private JsonConverter`1<Memory`1<byte>> s_memoryByteConverter
private JsonConverter`1<ReadOnlyMemory`1<byte>> s_readOnlyMemoryByteConverter
private JsonConverter`1<object> s_objectConverter
private JsonConverter`1<float> s_singleConverter
private JsonConverter`1<sbyte> s_sbyteConverter
private JsonConverter`1<string> s_stringConverter
private JsonConverter`1<TimeSpan> s_timeSpanConverter
private JsonConverter`1<ushort> s_uint16Converter
private JsonConverter`1<UInt32> s_uint32Converter
private JsonConverter`1<ulong> s_uint64Converter
private JsonConverter`1<Uri> s_uriConverter
private JsonConverter`1<Version> s_versionConverter
public JsonConverter`1<bool> BooleanConverter
public JsonConverter`1<Byte[]> ByteArrayConverter
public JsonConverter`1<byte> ByteConverter
public JsonConverter`1<char> CharConverter
public JsonConverter`1<DateTime> DateTimeConverter
public JsonConverter`1<DateTimeOffset> DateTimeOffsetConverter
public JsonConverter`1<decimal> DecimalConverter
public JsonConverter`1<double> DoubleConverter
public JsonConverter`1<Guid> GuidConverter
public JsonConverter`1<short> Int16Converter
public JsonConverter`1<int> Int32Converter
public JsonConverter`1<long> Int64Converter
public JsonConverter`1<JsonArray> JsonArrayConverter
public JsonConverter`1<JsonElement> JsonElementConverter
public JsonConverter`1<JsonNode> JsonNodeConverter
public JsonConverter`1<JsonObject> JsonObjectConverter
public JsonConverter`1<JsonValue> JsonValueConverter
public JsonConverter`1<JsonDocument> JsonDocumentConverter
public JsonConverter`1<Memory`1<byte>> MemoryByteConverter
public JsonConverter`1<ReadOnlyMemory`1<byte>> ReadOnlyMemoryByteConverter
public JsonConverter`1<object> ObjectConverter
public JsonConverter`1<float> SingleConverter
public JsonConverter`1<sbyte> SByteConverter
public JsonConverter`1<string> StringConverter
public JsonConverter`1<TimeSpan> TimeSpanConverter
public JsonConverter`1<ushort> UInt16Converter
public JsonConverter`1<UInt32> UInt32Converter
public JsonConverter`1<ulong> UInt64Converter
public JsonConverter`1<Uri> UriConverter
public JsonConverter`1<Version> VersionConverter
public JsonTypeInfo`1<TElement[]> CreateArrayInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TElement[]> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateListInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateDictionaryInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateImmutableDictionaryInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo, Func`2<IEnumerable`1<KeyValuePair`2<TKey, TValue>>, TCollection> createRangeFunc)
public JsonTypeInfo`1<TCollection> CreateIDictionaryInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateIReadOnlyDictionaryInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateImmutableEnumerableInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo, Func`2<IEnumerable`1<TElement>, TCollection> createRangeFunc)
public JsonTypeInfo`1<TCollection> CreateIListInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateIListInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateISetInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateICollectionInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateStackInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateQueueInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateConcurrentStackInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateConcurrentQueueInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateIEnumerableInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateIAsyncEnumerableInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateIDictionaryInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<TCollection> CreateStackInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo, Action`2<TCollection, object> addFunc)
public JsonTypeInfo`1<TCollection> CreateQueueInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo, Action`2<TCollection, object> addFunc)
private JsonTypeInfo`1<TCollection> CreateStackOrQueueInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo, Action`2<TCollection, object> addFunc)
public JsonTypeInfo`1<TCollection> CreateIEnumerableInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<TCollection> collectionInfo)
public JsonTypeInfo`1<Memory`1<TElement>> CreateMemoryInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<Memory`1<TElement>> collectionInfo)
public JsonTypeInfo`1<ReadOnlyMemory`1<TElement>> CreateReadOnlyMemoryInfo(JsonSerializerOptions options, JsonCollectionInfoValues`1<ReadOnlyMemory`1<TElement>> collectionInfo)
public JsonConverter`1<bool> get_BooleanConverter()
public JsonConverter`1<Byte[]> get_ByteArrayConverter()
public JsonConverter`1<byte> get_ByteConverter()
public JsonConverter`1<char> get_CharConverter()
public JsonConverter`1<DateTime> get_DateTimeConverter()
public JsonConverter`1<DateTimeOffset> get_DateTimeOffsetConverter()
public JsonConverter`1<decimal> get_DecimalConverter()
public JsonConverter`1<double> get_DoubleConverter()
public JsonConverter`1<Guid> get_GuidConverter()
public JsonConverter`1<short> get_Int16Converter()
public JsonConverter`1<int> get_Int32Converter()
public JsonConverter`1<long> get_Int64Converter()
public JsonConverter`1<JsonArray> get_JsonArrayConverter()
public JsonConverter`1<JsonElement> get_JsonElementConverter()
public JsonConverter`1<JsonNode> get_JsonNodeConverter()
public JsonConverter`1<JsonObject> get_JsonObjectConverter()
public JsonConverter`1<JsonValue> get_JsonValueConverter()
public JsonConverter`1<JsonDocument> get_JsonDocumentConverter()
public JsonConverter`1<Memory`1<byte>> get_MemoryByteConverter()
public JsonConverter`1<ReadOnlyMemory`1<byte>> get_ReadOnlyMemoryByteConverter()
public JsonConverter`1<object> get_ObjectConverter()
public JsonConverter`1<float> get_SingleConverter()
public JsonConverter`1<sbyte> get_SByteConverter()
public JsonConverter`1<string> get_StringConverter()
public JsonConverter`1<TimeSpan> get_TimeSpanConverter()
public JsonConverter`1<ushort> get_UInt16Converter()
public JsonConverter`1<UInt32> get_UInt32Converter()
public JsonConverter`1<ulong> get_UInt64Converter()
public JsonConverter`1<Uri> get_UriConverter()
public JsonConverter`1<Version> get_VersionConverter()
public JsonConverter`1<T> GetUnsupportedTypeConverter()
public JsonConverter`1<T> GetEnumConverter(JsonSerializerOptions options)
public JsonConverter`1<Nullable`1<T>> GetNullableConverter(JsonTypeInfo`1<T> underlyingTypeInfo)
public JsonConverter`1<Nullable`1<T>> GetNullableConverter(JsonSerializerOptions options)
internal JsonConverter`1<T> GetTypedConverter(JsonConverter converter)
private JsonTypeInfo`1<T> CreateCore(JsonConverter converter, JsonSerializerOptions options)
private JsonTypeInfo`1<T> CreateCore(JsonSerializerOptions options, JsonObjectInfoValues`1<T> objectInfo)
private JsonTypeInfo`1<T> CreateCore(JsonSerializerOptions options, JsonCollectionInfoValues`1<T> collectionInfo, JsonConverter`1<T> converter, object createObjectWithArgs, object addFunc)
private JsonConverter`1<T> GetConverter(JsonObjectInfoValues`1<T> objectInfo)
private void PopulateParameterInfoValues(JsonTypeInfo typeInfo, Func`1<JsonParameterInfoValues[]> paramFactory)
internal void PopulateProperties(JsonTypeInfo typeInfo, JsonPropertyInfoList propertyList, Func`2<JsonSerializerContext, JsonPropertyInfo[]> propInitFunc)
private JsonPropertyInfo`1<T> CreatePropertyInfoCore(JsonPropertyInfoValues`1<T> propertyInfoValues, JsonSerializerOptions options)
private void DeterminePropertyName(JsonPropertyInfo propertyInfo, string declaredPropertyName, string declaredJsonPropertyName)
public JsonPropertyInfo CreatePropertyInfo(JsonSerializerOptions options, JsonPropertyInfoValues`1<T> propertyInfo)
public JsonTypeInfo`1<T> CreateObjectInfo(JsonSerializerOptions options, JsonObjectInfoValues`1<T> objectInfo)
public JsonTypeInfo`1<T> CreateValueInfo(JsonSerializerOptions options, JsonConverter converter)
}
public System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1 : object {
private Func`1<T> <ObjectCreator>k__BackingField
private Func`2<Object[], T> <ObjectWithParameterizedConstructorCreator>k__BackingField
private Func`2<JsonSerializerContext, JsonPropertyInfo[]> <PropertyMetadataInitializer>k__BackingField
private Func`1<JsonParameterInfoValues[]> <ConstructorParameterMetadataInitializer>k__BackingField
private JsonNumberHandling <NumberHandling>k__BackingField
private Action`2<Utf8JsonWriter, T> <SerializeHandler>k__BackingField
public Func`1<T> ObjectCreator
public Func`2<Object[], T> ObjectWithParameterizedConstructorCreator
public Func`2<JsonSerializerContext, JsonPropertyInfo[]> PropertyMetadataInitializer
public Func`1<JsonParameterInfoValues[]> ConstructorParameterMetadataInitializer
public JsonNumberHandling NumberHandling
public Action`2<Utf8JsonWriter, T> SerializeHandler
public Func`1<T> get_ObjectCreator()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ObjectCreator(Func`1<T> value)
public Func`2<Object[], T> get_ObjectWithParameterizedConstructorCreator()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ObjectWithParameterizedConstructorCreator(Func`2<Object[], T> value)
public Func`2<JsonSerializerContext, JsonPropertyInfo[]> get_PropertyMetadataInitializer()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PropertyMetadataInitializer(Func`2<JsonSerializerContext, JsonPropertyInfo[]> value)
public Func`1<JsonParameterInfoValues[]> get_ConstructorParameterMetadataInitializer()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConstructorParameterMetadataInitializer(Func`1<JsonParameterInfoValues[]> value)
public JsonNumberHandling get_NumberHandling()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NumberHandling(JsonNumberHandling value)
public Action`2<Utf8JsonWriter, T> get_SerializeHandler()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SerializeHandler(Action`2<Utf8JsonWriter, T> value)
}
internal System.Text.Json.Serialization.Metadata.JsonParameterInfo : object {
private object <DefaultValue>k__BackingField
private bool <IgnoreNullTokensOnRead>k__BackingField
private JsonSerializerOptions <Options>k__BackingField
private Byte[] <NameAsUtf8Bytes>k__BackingField
private Nullable`1<JsonNumberHandling> <NumberHandling>k__BackingField
private int <Position>k__BackingField
private Type <ParameterType>k__BackingField
private bool <ShouldDeserialize>k__BackingField
private JsonPropertyInfo <MatchingProperty>k__BackingField
public JsonConverter EffectiveConverter
public object DefaultValue
public bool IgnoreNullTokensOnRead
public JsonSerializerOptions Options
public Byte[] NameAsUtf8Bytes
public Nullable`1<JsonNumberHandling> NumberHandling
public int Position
public JsonTypeInfo JsonTypeInfo
public Type ParameterType
public bool ShouldDeserialize
public JsonPropertyInfo MatchingProperty
public JsonConverter get_EffectiveConverter()
public object get_DefaultValue()
private protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DefaultValue(object value)
public bool get_IgnoreNullTokensOnRead()
public JsonSerializerOptions get_Options()
public Byte[] get_NameAsUtf8Bytes()
public Nullable`1<JsonNumberHandling> get_NumberHandling()
public int get_Position()
public JsonTypeInfo get_JsonTypeInfo()
public Type get_ParameterType()
public bool get_ShouldDeserialize()
public JsonPropertyInfo get_MatchingProperty()
public void .ctor(JsonParameterInfoValues parameterInfoValues, JsonPropertyInfo matchingProperty)
}
internal System.Text.Json.Serialization.Metadata.JsonParameterInfo`1 : JsonParameterInfo {
private JsonPropertyInfo`1<T> <MatchingProperty>k__BackingField
private T <DefaultValue>k__BackingField
public JsonConverter`1<T> EffectiveConverter
public JsonPropertyInfo`1<T> MatchingProperty
public T DefaultValue
public JsonConverter`1<T> get_EffectiveConverter()
public JsonPropertyInfo`1<T> get_MatchingProperty()
public T get_DefaultValue()
public void .ctor(JsonParameterInfoValues parameterInfoValues, JsonPropertyInfo`1<T> matchingPropertyInfo)
}
public System.Text.Json.Serialization.Metadata.JsonParameterInfoValues : object {
private string <Name>k__BackingField
private Type <ParameterType>k__BackingField
private int <Position>k__BackingField
private bool <HasDefaultValue>k__BackingField
private object <DefaultValue>k__BackingField
public string Name
public Type ParameterType
public int Position
public bool HasDefaultValue
public object DefaultValue
public string get_Name()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value)
public Type get_ParameterType()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParameterType(Type value)
public int get_Position()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Position(int value)
public bool get_HasDefaultValue()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HasDefaultValue(bool value)
public object get_DefaultValue()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DefaultValue(object value)
}
public System.Text.Json.Serialization.Metadata.JsonPolymorphismOptions : object {
private DerivedTypeList _derivedTypes
private bool _ignoreUnrecognizedTypeDiscriminators
private JsonUnknownDerivedTypeHandling _unknownDerivedTypeHandling
private string _typeDiscriminatorPropertyName
private JsonTypeInfo <DeclaringTypeInfo>k__BackingField
public IList`1<JsonDerivedType> DerivedTypes
public bool IgnoreUnrecognizedTypeDiscriminators
public JsonUnknownDerivedTypeHandling UnknownDerivedTypeHandling
public string TypeDiscriminatorPropertyName
internal JsonTypeInfo DeclaringTypeInfo
public IList`1<JsonDerivedType> get_DerivedTypes()
public bool get_IgnoreUnrecognizedTypeDiscriminators()
public void set_IgnoreUnrecognizedTypeDiscriminators(bool value)
public JsonUnknownDerivedTypeHandling get_UnknownDerivedTypeHandling()
public void set_UnknownDerivedTypeHandling(JsonUnknownDerivedTypeHandling value)
public string get_TypeDiscriminatorPropertyName()
public void set_TypeDiscriminatorPropertyName(string value)
private void VerifyMutable()
internal JsonTypeInfo get_DeclaringTypeInfo()
internal void set_DeclaringTypeInfo(JsonTypeInfo value)
internal JsonPolymorphismOptions CreateFromAttributeDeclarations(Type baseType)
}
public System.Text.Json.Serialization.Metadata.JsonPropertyInfo : object {
internal JsonPropertyInfo s_missingProperty
private JsonTypeInfo <ParentTypeInfo>k__BackingField
private protected JsonConverter _effectiveConverter
private JsonConverter _customConverter
private protected Func`2<object, object> _untypedGet
private protected Action`2<object, object> _untypedSet
private bool _isUserSpecifiedSetter
private protected Func`3<object, object, bool> _shouldSerialize
private bool _isUserSpecifiedShouldSerialize
private Nullable`1<JsonIgnoreCondition> _ignoreCondition
private Nullable`1<JsonObjectCreationHandling> _objectCreationHandling
private JsonObjectCreationHandling <EffectiveObjectCreationHandling>k__BackingField
private ICustomAttributeProvider _attributeProvider
private string <MemberName>k__BackingField
private MemberTypes <MemberType>k__BackingField
private bool <IsVirtual>k__BackingField
private bool _isExtensionDataProperty
private bool _isRequired
private Type <PropertyType>k__BackingField
private bool <IsConfigured>k__BackingField
private bool <IgnoreNullTokensOnRead>k__BackingField
private bool <IgnoreDefaultValuesOnWrite>k__BackingField
private bool <IsForTypeInfo>k__BackingField
private string _name
private Byte[] <NameAsUtf8Bytes>k__BackingField
private Byte[] <EscapedNameSection>k__BackingField
private JsonSerializerOptions <Options>k__BackingField
private int _order
private Type <DeclaringType>k__BackingField
private JsonTypeInfo _jsonTypeInfo
private bool <CanSerialize>k__BackingField
private bool <CanDeserialize>k__BackingField
private bool <CanDeserializeOrPopulate>k__BackingField
private bool <SrcGen_HasJsonInclude>k__BackingField
private bool <SrcGen_IsPublic>k__BackingField
private Nullable`1<JsonNumberHandling> _numberHandling
private Nullable`1<JsonNumberHandling> <EffectiveNumberHandling>k__BackingField
private int _index
internal JsonTypeInfo ParentTypeInfo
internal JsonConverter EffectiveConverter
public JsonConverter CustomConverter
public Func`2<object, object> Get
public Action`2<object, object> Set
public Func`3<object, object, bool> ShouldSerialize
internal Nullable`1<JsonIgnoreCondition> IgnoreCondition
public ICustomAttributeProvider AttributeProvider
internal JsonObjectCreationHandling EffectiveObjectCreationHandling
public Nullable`1<JsonObjectCreationHandling> ObjectCreationHandling
internal string MemberName
internal MemberTypes MemberType
internal bool IsVirtual
public bool IsExtensionData
public bool IsRequired
public Type PropertyType
internal bool IsConfigured
internal bool HasGetter
internal bool HasSetter
internal bool IgnoreNullTokensOnRead
internal bool IgnoreDefaultValuesOnWrite
internal bool IgnoreReadOnlyMember
internal bool IsForTypeInfo
public string Name
internal Byte[] NameAsUtf8Bytes
internal Byte[] EscapedNameSection
public JsonSerializerOptions Options
public int Order
internal Type DeclaringType
internal JsonTypeInfo JsonTypeInfo
internal bool IsPropertyTypeInfoConfigured
internal bool IsIgnored
internal bool CanSerialize
internal bool CanDeserialize
internal bool CanDeserializeOrPopulate
internal bool SrcGen_HasJsonInclude
internal bool SrcGen_IsPublic
public Nullable`1<JsonNumberHandling> NumberHandling
internal Nullable`1<JsonNumberHandling> EffectiveNumberHandling
internal bool PropertyTypeCanBeNull
internal object DefaultValue
internal int RequiredPropertyIndex
private string DebuggerDisplay
internal JsonTypeInfo get_ParentTypeInfo()
private void set_ParentTypeInfo(JsonTypeInfo value)
internal JsonConverter get_EffectiveConverter()
public JsonConverter get_CustomConverter()
public void set_CustomConverter(JsonConverter value)
public Func`2<object, object> get_Get()
public void set_Get(Func`2<object, object> value)
public Action`2<object, object> get_Set()
public void set_Set(Action`2<object, object> value)
private protected void SetGetter(Delegate getter)
private protected void SetSetter(Delegate setter)
public Func`3<object, object, bool> get_ShouldSerialize()
public void set_ShouldSerialize(Func`3<object, object, bool> value)
private protected void SetShouldSerialize(Delegate predicate)
internal Nullable`1<JsonIgnoreCondition> get_IgnoreCondition()
internal void set_IgnoreCondition(Nullable`1<JsonIgnoreCondition> value)
private protected void ConfigureIgnoreCondition(Nullable`1<JsonIgnoreCondition> ignoreCondition)
public ICustomAttributeProvider get_AttributeProvider()
public void set_AttributeProvider(ICustomAttributeProvider value)
internal JsonObjectCreationHandling get_EffectiveObjectCreationHandling()
private void set_EffectiveObjectCreationHandling(JsonObjectCreationHandling value)
public Nullable`1<JsonObjectCreationHandling> get_ObjectCreationHandling()
public void set_ObjectCreationHandling(Nullable`1<JsonObjectCreationHandling> value)
internal string get_MemberName()
internal void set_MemberName(string value)
internal MemberTypes get_MemberType()
internal void set_MemberType(MemberTypes value)
internal bool get_IsVirtual()
internal void set_IsVirtual(bool value)
public bool get_IsExtensionData()
public void set_IsExtensionData(bool value)
public bool get_IsRequired()
public void set_IsRequired(bool value)
internal void .ctor(Type declaringType, Type propertyType, JsonTypeInfo declaringTypeInfo, JsonSerializerOptions options)
internal JsonPropertyInfo GetPropertyPlaceholder()
public Type get_PropertyType()
private protected void VerifyMutable()
internal bool get_IsConfigured()
private void set_IsConfigured(bool value)
internal void Configure()
private protected void DetermineEffectiveConverter(JsonTypeInfo jsonTypeInfo)
internal void DetermineReflectionPropertyAccessors(MemberInfo memberInfo, bool useNonPublicAccessors)
private void CacheNameAsUtf8BytesAndEscapedNameSection()
private void DetermineIgnoreCondition()
private void DetermineSerializationCapabilities()
private void DetermineNumberHandlingForTypeInfo()
private void DetermineNumberHandlingForProperty()
private void DetermineEffectiveObjectCreationHandlingForProperty()
private bool NumberHandingIsApplicable()
internal JsonParameterInfo CreateJsonParameterInfo(JsonParameterInfoValues parameterInfoValues)
internal bool GetMemberAndWriteJson(object obj, WriteStack& state, Utf8JsonWriter writer)
internal bool GetMemberAndWriteJsonExtensionData(object obj, WriteStack& state, Utf8JsonWriter writer)
internal object GetValueAsObject(object obj)
internal bool get_HasGetter()
internal bool get_HasSetter()
internal bool get_IgnoreNullTokensOnRead()
private protected void set_IgnoreNullTokensOnRead(bool value)
internal bool get_IgnoreDefaultValuesOnWrite()
private protected void set_IgnoreDefaultValuesOnWrite(bool value)
internal bool get_IgnoreReadOnlyMember()
internal bool get_IsForTypeInfo()
internal void set_IsForTypeInfo(bool value)
public string get_Name()
public void set_Name(string value)
internal Byte[] get_NameAsUtf8Bytes()
internal void set_NameAsUtf8Bytes(Byte[] value)
internal Byte[] get_EscapedNameSection()
internal void set_EscapedNameSection(Byte[] value)
public JsonSerializerOptions get_Options()
public int get_Order()
public void set_Order(int value)
internal bool ReadJsonAndAddExtensionProperty(object obj, ReadStack& state, Utf8JsonReader& reader)
internal bool ReadJsonAndSetMember(object obj, ReadStack& state, Utf8JsonReader& reader)
internal bool ReadJsonAsObject(ReadStack& state, Utf8JsonReader& reader, Object& value)
internal bool ReadJsonExtensionDataValue(ReadStack& state, Utf8JsonReader& reader, Object& value)
internal void EnsureChildOf(JsonTypeInfo parent)
internal bool TryGetPrePopulatedValue(ReadStack& state)
internal Type get_DeclaringType()
internal JsonTypeInfo get_JsonTypeInfo()
internal void set_JsonTypeInfo(JsonTypeInfo value)
internal bool get_IsPropertyTypeInfoConfigured()
internal bool get_IsIgnored()
internal bool get_CanSerialize()
private void set_CanSerialize(bool value)
internal bool get_CanDeserialize()
private void set_CanDeserialize(bool value)
internal bool get_CanDeserializeOrPopulate()
private void set_CanDeserializeOrPopulate(bool value)
internal bool get_SrcGen_HasJsonInclude()
internal void set_SrcGen_HasJsonInclude(bool value)
internal bool get_SrcGen_IsPublic()
internal void set_SrcGen_IsPublic(bool value)
public Nullable`1<JsonNumberHandling> get_NumberHandling()
public void set_NumberHandling(Nullable`1<JsonNumberHandling> value)
internal Nullable`1<JsonNumberHandling> get_EffectiveNumberHandling()
internal void set_EffectiveNumberHandling(Nullable`1<JsonNumberHandling> value)
internal bool get_PropertyTypeCanBeNull()
internal object get_DefaultValue()
internal int get_RequiredPropertyIndex()
internal void set_RequiredPropertyIndex(int value)
internal bool IsOverriddenOrShadowedBy(JsonPropertyInfo other)
private string get_DebuggerDisplay()
private JsonConverter`1<TValue> <ReadJsonAndAddExtensionProperty>g__GetDictionaryValueConverter|127_0()
}
internal System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1 : JsonPropertyInfo {
private Func`2<object, T> _typedGet
private Action`2<object, T> _typedSet
private Func`3<object, T, bool> _shouldSerializeTyped
private JsonConverter`1<T> _typedEffectiveConverter
internal Func`2<object, T> Get
internal Action`2<object, T> Set
internal Func`3<object, T, bool> ShouldSerialize
internal object DefaultValue
internal bool PropertyTypeCanBeNull
internal JsonConverter`1<T> EffectiveConverter
internal void .ctor(Type declaringType, JsonTypeInfo declaringTypeInfo, JsonSerializerOptions options)
internal Func`2<object, T> get_Get()
internal void set_Get(Func`2<object, T> value)
internal Action`2<object, T> get_Set()
internal void set_Set(Action`2<object, T> value)
private protected void SetGetter(Delegate getter)
private protected void SetSetter(Delegate setter)
internal Func`3<object, T, bool> get_ShouldSerialize()
internal void set_ShouldSerialize(Func`3<object, T, bool> value)
private protected void SetShouldSerialize(Delegate predicate)
internal object get_DefaultValue()
internal bool get_PropertyTypeCanBeNull()
internal JsonParameterInfo CreateJsonParameterInfo(JsonParameterInfoValues parameterInfoValues)
internal JsonConverter`1<T> get_EffectiveConverter()
internal void DetermineReflectionPropertyAccessors(MemberInfo memberInfo, bool useNonPublicAccessors)
private protected void DetermineEffectiveConverter(JsonTypeInfo jsonTypeInfo)
internal object GetValueAsObject(object obj)
internal bool GetMemberAndWriteJson(object obj, WriteStack& state, Utf8JsonWriter writer)
internal bool GetMemberAndWriteJsonExtensionData(object obj, WriteStack& state, Utf8JsonWriter writer)
internal bool ReadJsonAndSetMember(object obj, ReadStack& state, Utf8JsonReader& reader)
internal bool ReadJsonAsObject(ReadStack& state, Utf8JsonReader& reader, Object& value)
private protected void ConfigureIgnoreCondition(Nullable`1<JsonIgnoreCondition> ignoreCondition)
private bool IsDefaultValue(T value)
internal bool <ConfigureIgnoreCondition>g__ShouldSerializeIgnoreConditionNever|31_0(object _, T value)
internal bool <ConfigureIgnoreCondition>g__ShouldSerializeIgnoreConditionAlways|31_1(object _, T value)
internal bool <ConfigureIgnoreCondition>g__ShouldSerializeIgnoreWhenWritingDefault|31_2(object _, T value)
}
public System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1 : object {
private bool <IsProperty>k__BackingField
private bool <IsPublic>k__BackingField
private bool <IsVirtual>k__BackingField
private Type <DeclaringType>k__BackingField
private JsonTypeInfo <PropertyTypeInfo>k__BackingField
private JsonConverter`1<T> <Converter>k__BackingField
private Func`2<object, T> <Getter>k__BackingField
private Action`2<object, T> <Setter>k__BackingField
private Nullable`1<JsonIgnoreCondition> <IgnoreCondition>k__BackingField
private bool <HasJsonInclude>k__BackingField
private bool <IsExtensionData>k__BackingField
private Nullable`1<JsonNumberHandling> <NumberHandling>k__BackingField
private string <PropertyName>k__BackingField
private string <JsonPropertyName>k__BackingField
public bool IsProperty
public bool IsPublic
public bool IsVirtual
public Type DeclaringType
public JsonTypeInfo PropertyTypeInfo
public JsonConverter`1<T> Converter
public Func`2<object, T> Getter
public Action`2<object, T> Setter
public Nullable`1<JsonIgnoreCondition> IgnoreCondition
public bool HasJsonInclude
public bool IsExtensionData
public Nullable`1<JsonNumberHandling> NumberHandling
public string PropertyName
public string JsonPropertyName
public bool get_IsProperty()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsProperty(bool value)
public bool get_IsPublic()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsPublic(bool value)
public bool get_IsVirtual()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsVirtual(bool value)
public Type get_DeclaringType()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DeclaringType(Type value)
public JsonTypeInfo get_PropertyTypeInfo()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PropertyTypeInfo(JsonTypeInfo value)
public JsonConverter`1<T> get_Converter()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Converter(JsonConverter`1<T> value)
public Func`2<object, T> get_Getter()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Getter(Func`2<object, T> value)
public Action`2<object, T> get_Setter()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Setter(Action`2<object, T> value)
public Nullable`1<JsonIgnoreCondition> get_IgnoreCondition()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IgnoreCondition(Nullable`1<JsonIgnoreCondition> value)
public bool get_HasJsonInclude()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HasJsonInclude(bool value)
public bool get_IsExtensionData()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsExtensionData(bool value)
public Nullable`1<JsonNumberHandling> get_NumberHandling()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NumberHandling(Nullable`1<JsonNumberHandling> value)
public string get_PropertyName()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PropertyName(string value)
public string get_JsonPropertyName()
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_JsonPropertyName(string value)
}
public System.Text.Json.Serialization.Metadata.JsonTypeInfo : object {
internal Type ObjectType
private int PropertyNameKeyLength
private int ParameterNameCountCacheThreshold
private int PropertyNameCountCacheThreshold
private int <ParameterCount>k__BackingField
private JsonPropertyDictionary`1<JsonParameterInfo> <ParameterCache>k__BackingField
private JsonPropertyDictionary`1<JsonPropertyInfo> <PropertyCache>k__BackingField
private ParameterRef[] modreq(System.Runtime.CompilerServices.IsVolatile) _parameterRefsSorted
private PropertyRef[] modreq(System.Runtime.CompilerServices.IsVolatile) _propertyRefsSorted
internal string MetadataFactoryRequiresUnreferencedCode
internal string JsonObjectTypeName
private int <NumberOfRequiredProperties>k__BackingField
private Action`1<object> _onSerializing
private Action`1<object> _onSerialized
private Action`1<object> _onDeserializing
private Action`1<object> _onDeserialized
private protected Func`1<object> _createObject
private Func`1<object> <CreateObjectForExtensionDataProperty>k__BackingField
private Func`2<JsonSerializerContext, JsonPropertyInfo[]> _sourceGenDelayedPropertyInitializer
private JsonPropertyInfoList _properties
private bool <IsReadOnly>k__BackingField
private protected JsonPolymorphismOptions _polymorphismOptions
private object <CreateObjectWithArgs>k__BackingField
private object <AddMethodDelegate>k__BackingField
private JsonPropertyInfo <ExtensionDataProperty>k__BackingField
private PolymorphicTypeResolver <PolymorphicTypeResolver>k__BackingField
private bool <HasSerializeHandler>k__BackingField
private bool <CanUseSerializeHandler>k__BackingField
private bool <PropertyMetadataSerializationNotSupported>k__BackingField
private Type <ElementType>k__BackingField
private Type <KeyType>k__BackingField
private JsonTypeInfo _elementTypeInfo
private JsonTypeInfo _keyTypeInfo
private JsonSerializerOptions <Options>k__BackingField
private Type <Type>k__BackingField
private JsonConverter <Converter>k__BackingField
private JsonTypeInfoKind <Kind>k__BackingField
private JsonPropertyInfo <PropertyInfoForTypeInfo>k__BackingField
private Nullable`1<JsonNumberHandling> _numberHandling
private Nullable`1<JsonUnmappedMemberHandling> _unmappedMemberHandling
private JsonUnmappedMemberHandling <EffectiveUnmappedMemberHandling>k__BackingField
private Nullable`1<JsonObjectCreationHandling> _preferredPropertyObjectCreationHandling
private IJsonTypeInfoResolver _originatingResolver
private bool <IsCustomized>k__BackingField
private ConfigurationState modreq(System.Runtime.CompilerServices.IsVolatile) _configurationState
private ExceptionDispatchInfo _cachedConfigureError
private JsonTypeInfo _ancestorPolymorhicType
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isAncestorPolymorphicTypeResolved
private bool <IsCompatibleWithCurrentOptions>k__BackingField
private JsonParameterInfoValues[] <ParameterInfoValues>k__BackingField
internal int ParameterCount
internal JsonPropertyDictionary`1<JsonParameterInfo> ParameterCache
internal bool UsesParameterizedConstructor
internal JsonPropertyDictionary`1<JsonPropertyInfo> PropertyCache
internal int NumberOfRequiredProperties
public Func`1<object> CreateObject
internal Func`1<object> CreateObjectForExtensionDataProperty
public Action`1<object> OnSerializing
public Action`1<object> OnSerialized
public Action`1<object> OnDeserializing
public Action`1<object> OnDeserialized
public IList`1<JsonPropertyInfo> Properties
internal JsonPropertyInfoList PropertyList
internal Func`2<JsonSerializerContext, JsonPropertyInfo[]> SourceGenDelayedPropertyInitializer
public JsonPolymorphismOptions PolymorphismOptions
public bool IsReadOnly
internal object CreateObjectWithArgs
internal object AddMethodDelegate
internal JsonPropertyInfo ExtensionDataProperty
internal PolymorphicTypeResolver PolymorphicTypeResolver
internal bool HasSerializeHandler
internal bool CanUseSerializeHandler
internal bool PropertyMetadataSerializationNotSupported
internal Type ElementType
internal Type KeyType
internal JsonTypeInfo ElementTypeInfo
internal JsonTypeInfo KeyTypeInfo
public JsonSerializerOptions Options
public Type Type
public JsonConverter Converter
public JsonTypeInfoKind Kind
internal JsonPropertyInfo PropertyInfoForTypeInfo
public Nullable`1<JsonNumberHandling> NumberHandling
public Nullable`1<JsonUnmappedMemberHandling> UnmappedMemberHandling
internal JsonUnmappedMemberHandling EffectiveUnmappedMemberHandling
public Nullable`1<JsonObjectCreationHandling> PreferredPropertyObjectCreationHandling
public IJsonTypeInfoResolver OriginatingResolver
internal bool IsCustomized
internal bool IsConfigured
internal bool IsConfigurationStarted
internal JsonTypeInfo AncestorPolymorphicType
private bool IsCompatibleWithCurrentOptions
internal JsonParameterInfoValues[] ParameterInfoValues
internal bool SupportsPolymorphicDeserialization
private string DebuggerDisplay
internal int get_ParameterCount()
private void set_ParameterCount(int value)
internal JsonPropertyDictionary`1<JsonParameterInfo> get_ParameterCache()
private void set_ParameterCache(JsonPropertyDictionary`1<JsonParameterInfo> value)
internal bool get_UsesParameterizedConstructor()
internal JsonPropertyDictionary`1<JsonPropertyInfo> get_PropertyCache()
private void set_PropertyCache(JsonPropertyDictionary`1<JsonPropertyInfo> value)
internal JsonPropertyInfo CreatePropertyUsingReflection(Type propertyType, Type declaringType)
private protected JsonPropertyInfo CreateJsonPropertyInfo(JsonTypeInfo declaringTypeInfo, Type declaringType, JsonSerializerOptions options)
internal JsonPropertyInfo GetProperty(ReadOnlySpan`1<byte> propertyName, ReadStackFrame& frame, Byte[]& utf8PropertyName)
internal JsonParameterInfo GetParameter(ReadOnlySpan`1<byte> propertyName, ReadStackFrame& frame, Byte[]& utf8PropertyName)
private bool IsPropertyRefEqual(PropertyRef& propertyRef, ReadOnlySpan`1<byte> propertyName, ulong key)
private bool IsParameterRefEqual(ParameterRef& parameterRef, ReadOnlySpan`1<byte> parameterName, ulong key)
internal ulong GetKey(ReadOnlySpan`1<byte> name)
internal void UpdateSortedPropertyCache(ReadStackFrame& frame)
internal void UpdateSortedParameterCache(ReadStackFrame& frame)
internal int get_NumberOfRequiredProperties()
private void set_NumberOfRequiredProperties(int value)
internal void .ctor(Type type, JsonConverter converter, JsonSerializerOptions options)
public Func`1<object> get_CreateObject()
public void set_CreateObject(Func`1<object> value)
private protected void SetCreateObject(Delegate createObject)
internal Func`1<object> get_CreateObjectForExtensionDataProperty()
internal void set_CreateObjectForExtensionDataProperty(Func`1<object> value)
public Action`1<object> get_OnSerializing()
public void set_OnSerializing(Action`1<object> value)
public Action`1<object> get_OnSerialized()
public void set_OnSerialized(Action`1<object> value)
public Action`1<object> get_OnDeserializing()
public void set_OnDeserializing(Action`1<object> value)
public Action`1<object> get_OnDeserialized()
public void set_OnDeserialized(Action`1<object> value)
public IList`1<JsonPropertyInfo> get_Properties()
internal JsonPropertyInfoList get_PropertyList()
internal Func`2<JsonSerializerContext, JsonPropertyInfo[]> get_SourceGenDelayedPropertyInitializer()
internal void set_SourceGenDelayedPropertyInitializer(Func`2<JsonSerializerContext, JsonPropertyInfo[]> value)
public JsonPolymorphismOptions get_PolymorphismOptions()
public void set_PolymorphismOptions(JsonPolymorphismOptions value)
public bool get_IsReadOnly()
private void set_IsReadOnly(bool value)
public void MakeReadOnly()
internal object get_CreateObjectWithArgs()
internal void set_CreateObjectWithArgs(object value)
internal object get_AddMethodDelegate()
internal void set_AddMethodDelegate(object value)
internal JsonPropertyInfo get_ExtensionDataProperty()
private void set_ExtensionDataProperty(JsonPropertyInfo value)
internal PolymorphicTypeResolver get_PolymorphicTypeResolver()
private void set_PolymorphicTypeResolver(PolymorphicTypeResolver value)
internal bool get_HasSerializeHandler()
private protected void set_HasSerializeHandler(bool value)
internal bool get_CanUseSerializeHandler()
private void set_CanUseSerializeHandler(bool value)
internal bool get_PropertyMetadataSerializationNotSupported()
internal void set_PropertyMetadataSerializationNotSupported(bool value)
internal void ValidateCanBeUsedForPropertyMetadataSerialization()
internal Type get_ElementType()
internal Type get_KeyType()
internal JsonTypeInfo get_ElementTypeInfo()
internal void set_ElementTypeInfo(JsonTypeInfo value)
internal JsonTypeInfo get_KeyTypeInfo()
internal void set_KeyTypeInfo(JsonTypeInfo value)
public JsonSerializerOptions get_Options()
public Type get_Type()
public JsonConverter get_Converter()
public JsonTypeInfoKind get_Kind()
private void set_Kind(JsonTypeInfoKind value)
internal JsonPropertyInfo get_PropertyInfoForTypeInfo()
private protected JsonPropertyInfo CreatePropertyInfoForTypeInfo()
public Nullable`1<JsonNumberHandling> get_NumberHandling()
public void set_NumberHandling(Nullable`1<JsonNumberHandling> value)
public Nullable`1<JsonUnmappedMemberHandling> get_UnmappedMemberHandling()
public void set_UnmappedMemberHandling(Nullable`1<JsonUnmappedMemberHandling> value)
internal JsonUnmappedMemberHandling get_EffectiveUnmappedMemberHandling()
private void set_EffectiveUnmappedMemberHandling(JsonUnmappedMemberHandling value)
public Nullable`1<JsonObjectCreationHandling> get_PreferredPropertyObjectCreationHandling()
public void set_PreferredPropertyObjectCreationHandling(Nullable`1<JsonObjectCreationHandling> value)
public IJsonTypeInfoResolver get_OriginatingResolver()
public void set_OriginatingResolver(IJsonTypeInfoResolver value)
internal void VerifyMutable()
internal bool get_IsCustomized()
internal void set_IsCustomized(bool value)
internal bool get_IsConfigured()
internal bool get_IsConfigurationStarted()
internal void EnsureConfigured()
private void Configure()
internal JsonTypeInfo get_AncestorPolymorphicType()
private void DetermineIsCompatibleWithCurrentOptions()
private bool get_IsCompatibleWithCurrentOptions()
private void set_IsCompatibleWithCurrentOptions(bool value)
internal bool DetermineUsesParameterizedConstructor()
public JsonTypeInfo`1<T> CreateJsonTypeInfo(JsonSerializerOptions options)
public JsonTypeInfo CreateJsonTypeInfo(Type type, JsonSerializerOptions options)
internal JsonTypeInfo CreateJsonTypeInfo(Type type, JsonConverter converter, JsonSerializerOptions options)
public JsonPropertyInfo CreateJsonPropertyInfo(Type propertyType, string name)
internal JsonParameterInfoValues[] get_ParameterInfoValues()
internal void set_ParameterInfoValues(JsonParameterInfoValues[] value)
internal void SerializeAsObject(Utf8JsonWriter writer, object rootValue)
internal Task SerializeAsObjectAsync(Stream utf8Json, object rootValue, CancellationToken cancellationToken)
internal void SerializeAsObject(Stream utf8Json, object rootValue)
internal object DeserializeAsObject(Utf8JsonReader& reader, ReadStack& state)
internal ValueTask`1<object> DeserializeAsObjectAsync(Stream utf8Json, CancellationToken cancellationToken)
internal object DeserializeAsObject(Stream utf8Json)
internal void ConfigureProperties()
internal void ConfigureConstructorParameters()
internal void ValidateType(Type type)
internal bool IsInvalidForSerialization(Type type)
internal void PopulatePolymorphismMetadata()
internal void MapInterfaceTypesToCallbacks()
internal void SetCreateObjectIfCompatible(Delegate createObject)
private bool IsByRefLike(Type type)
internal bool get_SupportsPolymorphicDeserialization()
internal bool IsValidExtensionDataProperty(Type propertyType)
internal JsonPropertyDictionary`1<JsonPropertyInfo> CreatePropertyCache(int capacity)
private JsonTypeInfoKind GetTypeInfoKind(Type type, JsonConverter converter)
private string get_DebuggerDisplay()
private JsonPropertyInfoList <get_PropertyList>g__CreatePropertyList|65_0()
private void <EnsureConfigured>g__ConfigureSynchronized|172_0()
private bool <DetermineIsCompatibleWithCurrentOptions>g__IsCurrentNodeCompatible|178_0()
}
public System.Text.Json.Serialization.Metadata.JsonTypeInfo`1 : JsonTypeInfo {
internal JsonTypeInfo _asyncEnumerableQueueTypeInfo
private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _canUseSerializeHandlerInStreamingState
private int MinSerializationsSampleSize
private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _serializationCount
private Action`2<Utf8JsonWriter, T> _serialize
private Func`1<T> _typedCreateObject
private JsonConverter`1<T> <EffectiveConverter>k__BackingField
private bool CanUseSerializeHandlerInStreaming
internal JsonConverter`1<T> EffectiveConverter
public Func`1<T> CreateObject
public Action`2<Utf8JsonWriter, T> SerializeHandler
internal T Deserialize(Utf8JsonReader& reader, ReadStack& state)
internal ValueTask`1<T> DeserializeAsync(Stream utf8Json, CancellationToken cancellationToken)
internal T Deserialize(Stream utf8Json)
internal object DeserializeAsObject(Utf8JsonReader& reader, ReadStack& state)
internal ValueTask`1<object> DeserializeAsObjectAsync(Stream utf8Json, CancellationToken cancellationToken)
internal object DeserializeAsObject(Stream utf8Json)
internal T ContinueDeserialize(ReadBufferState& bufferState, JsonReaderState& jsonReaderState, ReadStack& readStack)
internal void Serialize(Utf8JsonWriter writer, T& rootValue, object rootValueBoxed)
internal Task SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, object rootValueBoxed)
internal void Serialize(Stream utf8Json, T& rootValue, object rootValueBoxed)
internal void SerializeAsObject(Utf8JsonWriter writer, object rootValue)
internal Task SerializeAsObjectAsync(Stream utf8Json, object rootValue, CancellationToken cancellationToken)
internal void SerializeAsObject(Stream utf8Json, object rootValue)
private bool get_CanUseSerializeHandlerInStreaming()
private void OnRootLevelAsyncSerializationCompleted(long serializationSize)
internal void .ctor(JsonConverter converter, JsonSerializerOptions options)
internal JsonConverter`1<T> get_EffectiveConverter()
public Func`1<T> get_CreateObject()
public void set_CreateObject(Func`1<T> value)
private protected void SetCreateObject(Delegate createObject)
public Action`2<Utf8JsonWriter, T> get_SerializeHandler()
internal void set_SerializeHandler(Action`2<Utf8JsonWriter, T> value)
private protected JsonPropertyInfo CreatePropertyInfoForTypeInfo()
private protected JsonPropertyInfo CreateJsonPropertyInfo(JsonTypeInfo declaringTypeInfo, Type declaringType, JsonSerializerOptions options)
}
public System.Text.Json.Serialization.Metadata.JsonTypeInfoKind : Enum {
public int value__
public JsonTypeInfoKind None
public JsonTypeInfoKind Object
public JsonTypeInfoKind Enumerable
public JsonTypeInfoKind Dictionary
}
public System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver : object {
private IJsonTypeInfoResolver <Empty>k__BackingField
internal IJsonTypeInfoResolver Empty
public IJsonTypeInfoResolver Combine(IJsonTypeInfoResolver[] resolvers)
public IJsonTypeInfoResolver WithAddedModifier(IJsonTypeInfoResolver resolver, Action`1<JsonTypeInfo> modifier)
internal IJsonTypeInfoResolver get_Empty()
internal bool IsCompatibleWithOptions(IJsonTypeInfoResolver resolver, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Metadata.JsonTypeInfoResolverChain : ConfigurationList`1<IJsonTypeInfoResolver> {
public bool IsReadOnly
public bool get_IsReadOnly()
protected void OnCollectionModifying()
public JsonTypeInfo GetTypeInfo(Type type, JsonSerializerOptions options)
internal void AddFlattened(IJsonTypeInfoResolver resolver)
private bool System.Text.Json.Serialization.Metadata.IBuiltInJsonTypeInfoResolver.IsCompatibleWithOptions(JsonSerializerOptions options)
public string ToString()
}
internal System.Text.Json.Serialization.Metadata.JsonTypeInfoResolverWithAddedModifiers : object {
private IJsonTypeInfoResolver _source
private Action`1[] _modifiers
public void .ctor(IJsonTypeInfoResolver source, Action`1[] modifiers)
public JsonTypeInfoResolverWithAddedModifiers WithAddedModifier(Action`1<JsonTypeInfo> modifier)
public JsonTypeInfo GetTypeInfo(Type type, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Metadata.MemberAccessor : object {
public Func`1<object> CreateParameterlessConstructor(Type type, ConstructorInfo constructorInfo)
public Func`2<Object[], T> CreateParameterizedConstructor(ConstructorInfo constructor)
public ParameterizedConstructorDelegate`5<T, TArg0, TArg1, TArg2, TArg3> CreateParameterizedConstructor(ConstructorInfo constructor)
public Action`2<TCollection, object> CreateAddMethodDelegate()
public Func`2<IEnumerable`1<TElement>, TCollection> CreateImmutableEnumerableCreateRangeDelegate()
public Func`2<IEnumerable`1<KeyValuePair`2<TKey, TValue>>, TCollection> CreateImmutableDictionaryCreateRangeDelegate()
public Func`2<object, TProperty> CreatePropertyGetter(PropertyInfo propertyInfo)
public Action`2<object, TProperty> CreatePropertySetter(PropertyInfo propertyInfo)
public Func`2<object, TProperty> CreateFieldGetter(FieldInfo fieldInfo)
public Action`2<object, TProperty> CreateFieldSetter(FieldInfo fieldInfo)
}
internal System.Text.Json.Serialization.Metadata.ParameterRef : ValueType {
public ulong Key
public JsonParameterInfo Info
public Byte[] NameFromJson
public void .ctor(ulong key, JsonParameterInfo info, Byte[] nameFromJson)
}
internal System.Text.Json.Serialization.Metadata.PolymorphicTypeResolver : object {
private ConcurrentDictionary`2<Type, DerivedJsonTypeInfo> _typeToDiscriminatorId
private Dictionary`2<object, DerivedJsonTypeInfo> _discriminatorIdtoType
private JsonSerializerOptions _options
private Type <BaseType>k__BackingField
private JsonUnknownDerivedTypeHandling <UnknownDerivedTypeHandling>k__BackingField
private bool <UsesTypeDiscriminators>k__BackingField
private bool <IgnoreUnrecognizedTypeDiscriminators>k__BackingField
private string <TypeDiscriminatorPropertyName>k__BackingField
private Byte[] <TypeDiscriminatorPropertyNameUtf8>k__BackingField
private Nullable`1<JsonEncodedText> <CustomTypeDiscriminatorPropertyNameJsonEncoded>k__BackingField
public Type BaseType
public JsonUnknownDerivedTypeHandling UnknownDerivedTypeHandling
public bool UsesTypeDiscriminators
public bool IgnoreUnrecognizedTypeDiscriminators
public string TypeDiscriminatorPropertyName
public Byte[] TypeDiscriminatorPropertyNameUtf8
public Nullable`1<JsonEncodedText> CustomTypeDiscriminatorPropertyNameJsonEncoded
public void .ctor(JsonSerializerOptions options, JsonPolymorphismOptions polymorphismOptions, Type baseType, bool converterCanHaveMetadata)
public Type get_BaseType()
public JsonUnknownDerivedTypeHandling get_UnknownDerivedTypeHandling()
public bool get_UsesTypeDiscriminators()
public bool get_IgnoreUnrecognizedTypeDiscriminators()
public string get_TypeDiscriminatorPropertyName()
public Byte[] get_TypeDiscriminatorPropertyNameUtf8()
public Nullable`1<JsonEncodedText> get_CustomTypeDiscriminatorPropertyNameJsonEncoded()
public bool TryGetDerivedJsonTypeInfo(Type runtimeType, JsonTypeInfo& jsonTypeInfo, Object& typeDiscriminator)
public bool TryGetDerivedJsonTypeInfo(object typeDiscriminator, JsonTypeInfo& jsonTypeInfo)
public bool IsSupportedPolymorphicBaseType(Type type)
public bool IsSupportedDerivedType(Type baseType, Type derivedType)
private DerivedJsonTypeInfo CalculateNearestAncestor(Type type)
internal JsonTypeInfo FindNearestPolymorphicBaseType(JsonTypeInfo typeInfo)
internal JsonTypeInfo <FindNearestPolymorphicBaseType>g__ResolveAncestorTypeInfo|30_0(Type type, JsonSerializerOptions options)
}
internal System.Text.Json.Serialization.Metadata.PropertyRef : ValueType {
public ulong Key
public JsonPropertyInfo Info
public Byte[] NameFromJson
public void .ctor(ulong key, JsonPropertyInfo info, Byte[] nameFromJson)
}
internal System.Text.Json.Serialization.Metadata.ReflectionMemberAccessor : MemberAccessor {
public Func`1<object> CreateParameterlessConstructor(Type type, ConstructorInfo ctorInfo)
public Func`2<Object[], T> CreateParameterizedConstructor(ConstructorInfo constructor)
public ParameterizedConstructorDelegate`5<T, TArg0, TArg1, TArg2, TArg3> CreateParameterizedConstructor(ConstructorInfo constructor)
public Action`2<TCollection, object> CreateAddMethodDelegate()
public Func`2<IEnumerable`1<TElement>, TCollection> CreateImmutableEnumerableCreateRangeDelegate()
public Func`2<IEnumerable`1<KeyValuePair`2<TKey, TValue>>, TCollection> CreateImmutableDictionaryCreateRangeDelegate()
public Func`2<object, TProperty> CreatePropertyGetter(PropertyInfo propertyInfo)
public Action`2<object, TProperty> CreatePropertySetter(PropertyInfo propertyInfo)
public Func`2<object, TProperty> CreateFieldGetter(FieldInfo fieldInfo)
public Action`2<object, TProperty> CreateFieldSetter(FieldInfo fieldInfo)
}
internal System.Text.Json.Serialization.PreserveReferenceHandler : ReferenceHandler {
public ReferenceResolver CreateResolver()
internal ReferenceResolver CreateResolver(bool writing)
}
internal System.Text.Json.Serialization.PreserveReferenceResolver : ReferenceResolver {
private UInt32 _referenceCount
private Dictionary`2<string, object> _referenceIdToObjectMap
private Dictionary`2<object, string> _objectToReferenceIdMap
public void .ctor(bool writing)
public void AddReference(string referenceId, object value)
public string GetReference(object value, Boolean& alreadyExists)
public object ResolveReference(string referenceId)
}
internal System.Text.Json.Serialization.ReadBufferState : ValueType {
private Byte[] _buffer
private byte _offset
private int _count
private int _maxCount
private bool _isFirstBlock
private bool _isFinalBlock
public bool IsFinalBlock
public ReadOnlySpan`1<byte> Bytes
public void .ctor(int initialBufferSize)
public bool get_IsFinalBlock()
public ReadOnlySpan`1<byte> get_Bytes()
public ValueTask`1<ReadBufferState> ReadFromStreamAsync(Stream utf8Json, CancellationToken cancellationToken, bool fillBuffer)
public void ReadFromStream(Stream utf8Json)
public void AdvanceBuffer(int bytesConsumed)
private void ProcessReadBytes()
public void Dispose()
}
internal System.Text.Json.Serialization.ReferenceEqualsWrapper : ValueType {
private object _object
public void .ctor(object obj)
public bool Equals(object obj)
public bool Equals(ReferenceEqualsWrapper obj)
public int GetHashCode()
}
public System.Text.Json.Serialization.ReferenceHandler : object {
internal ReferenceHandlingStrategy HandlingStrategy
private ReferenceHandler <Preserve>k__BackingField
private ReferenceHandler <IgnoreCycles>k__BackingField
public ReferenceHandler Preserve
public ReferenceHandler IgnoreCycles
public ReferenceHandler get_Preserve()
public ReferenceHandler get_IgnoreCycles()
public ReferenceResolver CreateResolver()
internal ReferenceResolver CreateResolver(bool writing)
}
public System.Text.Json.Serialization.ReferenceHandler`1 : ReferenceHandler {
public ReferenceResolver CreateResolver()
}
internal System.Text.Json.Serialization.ReferenceHandlingStrategy : Enum {
public int value__
public ReferenceHandlingStrategy None
public ReferenceHandlingStrategy Preserve
public ReferenceHandlingStrategy IgnoreCycles
}
public System.Text.Json.Serialization.ReferenceResolver : object {
public void AddReference(string referenceId, object value)
public string GetReference(object value, Boolean& alreadyExists)
public object ResolveReference(string referenceId)
internal void PopReferenceForCycleDetection()
internal void PushReferenceForCycleDetection(object value)
internal bool ContainsReferenceForCycleDetection(object value)
}
internal System.Text.Json.StackFrameObjectState : Enum {
public byte value__
public StackFrameObjectState None
public StackFrameObjectState StartToken
public StackFrameObjectState ReadMetadata
public StackFrameObjectState ConstructorArguments
public StackFrameObjectState CreatedObject
public StackFrameObjectState ReadElements
public StackFrameObjectState EndToken
public StackFrameObjectState EndTokenValidation
}
internal System.Text.Json.StackFramePropertyState : Enum {
public byte value__
public StackFramePropertyState None
public StackFramePropertyState ReadName
public StackFramePropertyState Name
public StackFramePropertyState ReadValue
public StackFramePropertyState ReadValueIsEnd
public StackFramePropertyState TryRead
}
internal System.Text.Json.ThrowHelper : object {
public string ExceptionSourceValueToRethrowAsJsonException
public void ThrowOutOfMemoryException_BufferMaximumSizeExceeded(UInt32 capacity)
public void ThrowArgumentNullException(string parameterName)
public void ThrowArgumentOutOfRangeException_MaxDepthMustBePositive(string parameterName)
private ArgumentOutOfRangeException GetArgumentOutOfRangeException(string parameterName, string message)
public void ThrowArgumentOutOfRangeException_CommentEnumMustBeInRange(string parameterName)
public void ThrowArgumentOutOfRangeException_ArrayIndexNegative(string paramName)
public void ThrowArgumentOutOfRangeException_JsonConverterFactory_TypeNotSupported(Type typeToConvert)
public void ThrowArgumentException_ArrayTooSmall(string paramName)
private ArgumentException GetArgumentException(string message)
public void ThrowArgumentException(string message)
public InvalidOperationException GetInvalidOperationException_CallFlushFirst(int _buffered)
public void ThrowArgumentException_DestinationTooShort()
public void ThrowArgumentException_PropertyNameTooLarge(int tokenLength)
public void ThrowArgumentException_ValueTooLarge(long tokenLength)
public void ThrowArgumentException_ValueNotSupported()
public void ThrowInvalidOperationException_NeedLargerSpan()
public void ThrowPropertyNameTooLargeArgumentException(int length)
public void ThrowArgumentException(ReadOnlySpan`1<byte> propertyName, ReadOnlySpan`1<byte> value)
public void ThrowArgumentException(ReadOnlySpan`1<byte> propertyName, ReadOnlySpan`1<char> value)
public void ThrowArgumentException(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> value)
public void ThrowArgumentException(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> value)
public void ThrowInvalidOperationOrArgumentException(ReadOnlySpan`1<byte> propertyName, int currentDepth, int maxDepth)
public void ThrowInvalidOperationException(int currentDepth, int maxDepth)
public void ThrowInvalidOperationException(string message)
private InvalidOperationException GetInvalidOperationException(string message)
public void ThrowInvalidOperationException_DepthNonZeroOrEmptyJson(int currentDepth)
private InvalidOperationException GetInvalidOperationException(int currentDepth)
public void ThrowInvalidOperationOrArgumentException(ReadOnlySpan`1<char> propertyName, int currentDepth, int maxDepth)
public InvalidOperationException GetInvalidOperationException_ExpectedArray(JsonTokenType tokenType)
public InvalidOperationException GetInvalidOperationException_ExpectedObject(JsonTokenType tokenType)
public void ThrowInvalidOperationException_ExpectedNumber(JsonTokenType tokenType)
public void ThrowInvalidOperationException_ExpectedBoolean(JsonTokenType tokenType)
public void ThrowInvalidOperationException_ExpectedString(JsonTokenType tokenType)
public void ThrowInvalidOperationException_ExpectedPropertyName(JsonTokenType tokenType)
public void ThrowInvalidOperationException_ExpectedStringComparison(JsonTokenType tokenType)
public void ThrowInvalidOperationException_ExpectedComment(JsonTokenType tokenType)
public void ThrowInvalidOperationException_CannotSkipOnPartial()
private InvalidOperationException GetInvalidOperationException(string message, JsonTokenType tokenType)
private InvalidOperationException GetInvalidOperationException(JsonTokenType tokenType)
internal void ThrowJsonElementWrongTypeException(JsonTokenType expectedType, JsonTokenType actualType)
internal InvalidOperationException GetJsonElementWrongTypeException(JsonValueKind expectedType, JsonValueKind actualType)
internal InvalidOperationException GetJsonElementWrongTypeException(string expectedTypeName, JsonValueKind actualType)
public void ThrowJsonReaderException(Utf8JsonReader& json, ExceptionResource resource, byte nextByte, ReadOnlySpan`1<byte> bytes)
public JsonException GetJsonReaderException(Utf8JsonReader& json, ExceptionResource resource, byte nextByte, ReadOnlySpan`1<byte> bytes)
private bool IsPrintable(byte value)
internal string GetPrintableString(byte value)
private string GetResourceString(Utf8JsonReader& json, ExceptionResource resource, byte nextByte, string characters)
public void ThrowInvalidOperationException(ExceptionResource resource, int currentDepth, int maxDepth, byte token, JsonTokenType tokenType)
public void ThrowArgumentException_InvalidCommentValue()
public void ThrowArgumentException_InvalidUTF8(ReadOnlySpan`1<byte> value)
public void ThrowArgumentException_InvalidUTF16(int charAsInt)
public void ThrowInvalidOperationException_ReadInvalidUTF16(int charAsInt)
public void ThrowInvalidOperationException_ReadIncompleteUTF16()
public InvalidOperationException GetInvalidOperationException_ReadInvalidUTF8(DecoderFallbackException innerException)
public ArgumentException GetArgumentException_ReadInvalidUTF16(EncoderFallbackException innerException)
public InvalidOperationException GetInvalidOperationException(string message, Exception innerException)
public InvalidOperationException GetInvalidOperationException(ExceptionResource resource, int currentDepth, int maxDepth, byte token, JsonTokenType tokenType)
public void ThrowOutOfMemoryException(UInt32 capacity)
private string GetResourceString(ExceptionResource resource, int currentDepth, int maxDepth, byte token, JsonTokenType tokenType)
public void ThrowFormatException()
public void ThrowFormatException(NumericType numericType)
public void ThrowFormatException(DataType dataType)
public void ThrowInvalidOperationException_ExpectedChar(JsonTokenType tokenType)
public void ThrowObjectDisposedException_Utf8JsonWriter()
public void ThrowObjectDisposedException_JsonDocument()
public void ThrowArgumentException_NodeValueNotAllowed(string paramName)
public void ThrowArgumentException_DuplicateKey(string paramName, string propertyName)
public void ThrowInvalidOperationException_NodeAlreadyHasParent()
public void ThrowInvalidOperationException_NodeCycleDetected()
public void ThrowInvalidOperationException_NodeElementCannotBeObjectOrArray()
public void ThrowNotSupportedException_CollectionIsReadOnly()
public void ThrowInvalidOperationException_NodeWrongType(string typeName)
public void ThrowInvalidOperationException_NodeParentWrongType(string typeName)
public NotSupportedException GetNotSupportedException_CollectionIsReadOnly()
public void ThrowArgumentException_DeserializeWrongType(Type type, object value)
public void ThrowArgumentException_SerializerDoesNotSupportComments(string paramName)
public void ThrowNotSupportedException_SerializationNotSupported(Type propertyType)
public void ThrowNotSupportedException_TypeRequiresAsyncSerialization(Type propertyType)
public void ThrowNotSupportedException_DictionaryKeyTypeNotSupported(Type keyType, JsonConverter converter)
public void ThrowJsonException_DeserializeUnableToConvertValue(Type propertyType)
public void ThrowInvalidCastException_DeserializeUnableToAssignValue(Type typeOfValue, Type declaredType)
public void ThrowInvalidOperationException_DeserializeUnableToAssignNull(Type declaredType)
public void ThrowInvalidOperationException_ObjectCreationHandlingPopulateNotSupportedByConverter(JsonPropertyInfo propertyInfo)
public void ThrowInvalidOperationException_ObjectCreationHandlingPropertyMustHaveAGetter(JsonPropertyInfo propertyInfo)
public void ThrowInvalidOperationException_ObjectCreationHandlingPropertyValueTypeMustHaveASetter(JsonPropertyInfo propertyInfo)
public void ThrowInvalidOperationException_ObjectCreationHandlingPropertyCannotAllowPolymorphicDeserialization(JsonPropertyInfo propertyInfo)
public void ThrowInvalidOperationException_ObjectCreationHandlingPropertyCannotAllowReadOnlyMember(JsonPropertyInfo propertyInfo)
public void ThrowInvalidOperationException_ObjectCreationHandlingPropertyCannotAllowReferenceHandling()
public void ThrowNotSupportedException_ObjectCreationHandlingPropertyDoesNotSupportParameterizedConstructors()
public void ThrowJsonException_SerializationConverterRead(JsonConverter converter)
public void ThrowJsonException_SerializationConverterWrite(JsonConverter converter)
public void ThrowJsonException_SerializerCycleDetected(int maxDepth)
public void ThrowJsonException(string message)
public void ThrowArgumentException_CannotSerializeInvalidType(string paramName, Type typeToConvert, Type declaringType, string propertyName)
public void ThrowInvalidOperationException_CannotSerializeInvalidType(Type typeToConvert, Type declaringType, MemberInfo memberInfo)
public void ThrowInvalidOperationException_SerializationConverterNotCompatible(Type converterType, Type type)
public void ThrowInvalidOperationException_ResolverTypeNotCompatible(Type requestedType, Type actualType)
public void ThrowInvalidOperationException_ResolverTypeInfoOptionsNotCompatible()
public void ThrowInvalidOperationException_JsonSerializerOptionsNoTypeInfoResolverSpecified()
public void ThrowInvalidOperationException_JsonSerializerIsReflectionDisabled()
public void ThrowInvalidOperationException_SerializationConverterOnAttributeInvalid(Type classType, MemberInfo memberInfo)
public void ThrowInvalidOperationException_SerializationConverterOnAttributeNotCompatible(Type classTypeAttributeIsOn, MemberInfo memberInfo, Type typeToConvert)
public void ThrowInvalidOperationException_SerializerOptionsReadOnly(JsonSerializerContext context)
public void ThrowInvalidOperationException_DefaultTypeInfoResolverImmutable()
public void ThrowInvalidOperationException_TypeInfoResolverChainImmutable()
public void ThrowInvalidOperationException_TypeInfoImmutable()
public void ThrowInvalidOperationException_InvalidChainedResolver()
public void ThrowInvalidOperationException_SerializerPropertyNameConflict(Type type, string propertyName)
public void ThrowInvalidOperationException_SerializerPropertyNameNull(JsonPropertyInfo jsonPropertyInfo)
public void ThrowInvalidOperationException_JsonPropertyRequiredAndNotDeserializable(JsonPropertyInfo jsonPropertyInfo)
public void ThrowInvalidOperationException_JsonPropertyRequiredAndExtensionData(JsonPropertyInfo jsonPropertyInfo)
public void ThrowJsonException_JsonRequiredPropertyMissing(JsonTypeInfo parent, BitArray requiredPropertiesSet)
public void ThrowInvalidOperationException_NamingPolicyReturnNull(JsonNamingPolicy namingPolicy)
public void ThrowInvalidOperationException_SerializerConverterFactoryReturnsNull(Type converterType)
public void ThrowInvalidOperationException_SerializerConverterFactoryReturnsJsonConverterFactorty(Type converterType)
public void ThrowInvalidOperationException_MultiplePropertiesBindToConstructorParameters(Type parentType, string parameterName, string firstMatchName, string secondMatchName)
public void ThrowInvalidOperationException_ConstructorParameterIncompleteBinding(Type parentType)
public void ThrowInvalidOperationException_ExtensionDataCannotBindToCtorParam(string propertyName, JsonPropertyInfo jsonPropertyInfo)
public void ThrowInvalidOperationException_JsonIncludeOnInaccessibleProperty(string memberName, Type declaringType)
public void ThrowInvalidOperationException_IgnoreConditionOnValueTypeInvalid(string clrPropertyName, Type propertyDeclaringType)
public void ThrowInvalidOperationException_NumberHandlingOnPropertyInvalid(JsonPropertyInfo jsonPropertyInfo)
public void ThrowInvalidOperationException_ConverterCanConvertMultipleTypes(Type runtimePropertyType, JsonConverter jsonConverter)
public void ThrowNotSupportedException_ObjectWithParameterizedCtorRefMetadataNotSupported(ReadOnlySpan`1<byte> propertyName, Utf8JsonReader& reader, ReadStack& state)
public void ThrowInvalidOperationException_JsonTypeInfoOperationNotPossibleForKind(JsonTypeInfoKind kind)
public void ThrowInvalidOperationException_CreateObjectConverterNotCompatible(Type type)
public void ReThrowWithPath(ReadStack& state, JsonReaderException ex)
public void ReThrowWithPath(ReadStack& state, Utf8JsonReader& reader, Exception ex)
public void AddJsonExceptionInformation(ReadStack& state, Utf8JsonReader& reader, JsonException ex)
public void ReThrowWithPath(WriteStack& state, Exception ex)
public void AddJsonExceptionInformation(WriteStack& state, JsonException ex)
public void ThrowInvalidOperationException_SerializationDuplicateAttribute(Type attribute, MemberInfo memberInfo)
public void ThrowInvalidOperationException_SerializationDuplicateTypeAttribute(Type classType, Type attribute)
public void ThrowInvalidOperationException_SerializationDuplicateTypeAttribute(Type classType)
public void ThrowInvalidOperationException_ExtensionDataConflictsWithUnmappedMemberHandling(Type classType, JsonPropertyInfo jsonPropertyInfo)
public void ThrowInvalidOperationException_SerializationDataExtensionPropertyInvalid(JsonPropertyInfo jsonPropertyInfo)
public void ThrowInvalidOperationException_NodeJsonObjectCustomConverterNotAllowedOnExtensionProperty()
public void ThrowNotSupportedException(ReadStack& state, Utf8JsonReader& reader, NotSupportedException ex)
public void ThrowNotSupportedException(WriteStack& state, NotSupportedException ex)
public void ThrowNotSupportedException_DeserializeNoConstructor(Type type, Utf8JsonReader& reader, ReadStack& state)
public void ThrowNotSupportedException_CannotPopulateCollection(Type type, Utf8JsonReader& reader, ReadStack& state)
public void ThrowJsonException_MetadataValuesInvalidToken(JsonTokenType tokenType)
public void ThrowJsonException_MetadataReferenceNotFound(string id)
public void ThrowJsonException_MetadataValueWasNotString(JsonTokenType tokenType)
public void ThrowJsonException_MetadataValueWasNotString(JsonValueKind valueKind)
public void ThrowJsonException_MetadataReferenceObjectCannotContainOtherProperties(ReadOnlySpan`1<byte> propertyName, ReadStack& state)
public void ThrowJsonException_MetadataUnexpectedProperty(ReadOnlySpan`1<byte> propertyName, ReadStack& state)
public void ThrowJsonException_UnmappedJsonProperty(Type type, string unmappedPropertyName)
public void ThrowJsonException_MetadataReferenceObjectCannotContainOtherProperties()
public void ThrowJsonException_MetadataIdIsNotFirstProperty(ReadOnlySpan`1<byte> propertyName, ReadStack& state)
public void ThrowJsonException_MetadataStandaloneValuesProperty(ReadStack& state, ReadOnlySpan`1<byte> propertyName)
public void ThrowJsonException_MetadataInvalidPropertyWithLeadingDollarSign(ReadOnlySpan`1<byte> propertyName, ReadStack& state, Utf8JsonReader& reader)
public void ThrowJsonException_MetadataDuplicateIdFound(string id)
public void ThrowJsonException_MetadataDuplicateTypeProperty()
public void ThrowJsonException_MetadataInvalidReferenceToValueType(Type propertyType)
public void ThrowJsonException_MetadataInvalidPropertyInArrayMetadata(ReadStack& state, Type propertyType, Utf8JsonReader& reader)
public void ThrowJsonException_MetadataPreservedArrayValuesNotFound(ReadStack& state, Type propertyType)
public void ThrowJsonException_MetadataCannotParsePreservedObjectIntoImmutable(Type propertyType)
public void ThrowInvalidOperationException_MetadataReferenceOfTypeCannotBeAssignedToType(string referenceId, Type currentType, Type typeToConvert)
public void ThrowInvalidOperationException_JsonPropertyInfoIsBoundToDifferentJsonTypeInfo(JsonPropertyInfo propertyInfo)
internal void ThrowUnexpectedMetadataException(ReadOnlySpan`1<byte> propertyName, Utf8JsonReader& reader, ReadStack& state)
public void ThrowNotSupportedException_NoMetadataForType(Type type, IJsonTypeInfoResolver resolver)
public NotSupportedException GetNotSupportedException_AmbiguousMetadataForType(Type type, Type match1, Type match2)
public void ThrowNotSupportedException_ConstructorContainsNullParameterNames(Type declaringType)
public void ThrowInvalidOperationException_NoMetadataForType(Type type, IJsonTypeInfoResolver resolver)
public Exception GetInvalidOperationException_NoMetadataForTypeProperties(IJsonTypeInfoResolver resolver, Type type)
public void ThrowInvalidOperationException_NoMetadataForTypeProperties(IJsonTypeInfoResolver resolver, Type type)
public void ThrowMissingMemberException_MissingFSharpCoreMember(string missingFsharpCoreMember)
public void ThrowNotSupportedException_BaseConverterDoesNotSupportMetadata(Type derivedType)
public void ThrowNotSupportedException_DerivedConverterDoesNotSupportMetadata(Type derivedType)
public void ThrowNotSupportedException_RuntimeTypeNotSupported(Type baseType, Type runtimeType)
public void ThrowNotSupportedException_RuntimeTypeDiamondAmbiguity(Type baseType, Type runtimeType, Type derivedType1, Type derivedType2)
public void ThrowInvalidOperationException_TypeDoesNotSupportPolymorphism(Type baseType)
public void ThrowInvalidOperationException_DerivedTypeNotSupported(Type baseType, Type derivedType)
public void ThrowInvalidOperationException_DerivedTypeIsAlreadySpecified(Type baseType, Type derivedType)
public void ThrowInvalidOperationException_TypeDicriminatorIdIsAlreadySpecified(Type baseType, object typeDiscriminator)
public void ThrowInvalidOperationException_InvalidCustomTypeDiscriminatorPropertyName()
public void ThrowInvalidOperationException_PolymorphicTypeConfigurationDoesNotSpecifyDerivedTypes(Type baseType)
public void ThrowInvalidOperationException_InvalidEnumTypeWithSpecialChar(Type enumType, string enumName)
public void ThrowJsonException_UnrecognizedTypeDiscriminator(object typeDiscriminator)
public void ThrowArgumentException_JsonPolymorphismOptionsAssociatedWithDifferentJsonTypeInfo(string parameterName)
}
public System.Text.Json.Utf8JsonReader : ValueType {
private ReadOnlySpan`1<byte> _buffer
private bool _isFinalBlock
private bool _isInputSequence
private long _lineNumber
private long _bytePositionInLine
private int _consumed
private bool _inObject
private bool _isNotPrimitive
private JsonTokenType _tokenType
private JsonTokenType _previousTokenType
private JsonReaderOptions _readerOptions
private BitStack _bitStack
private long _totalConsumed
private bool _isLastSegment
private bool _isMultiSegment
private bool _trailingCommaBeforeComment
private SequencePosition _nextPosition
private SequencePosition _currentPosition
private ReadOnlySequence`1<byte> _sequence
private ReadOnlySpan`1<byte> <ValueSpan>k__BackingField
private long <TokenStartIndex>k__BackingField
private bool <HasValueSequence>k__BackingField
private bool <ValueIsEscaped>k__BackingField
private ReadOnlySequence`1<byte> <ValueSequence>k__BackingField
private bool IsLastSpan
internal ReadOnlySequence`1<byte> OriginalSequence
internal ReadOnlySpan`1<byte> OriginalSpan
internal int ValueLength
public ReadOnlySpan`1<byte> ValueSpan
public long BytesConsumed
public long TokenStartIndex
public int CurrentDepth
internal bool IsInArray
public JsonTokenType TokenType
public bool HasValueSequence
public bool ValueIsEscaped
public bool IsFinalBlock
public ReadOnlySequence`1<byte> ValueSequence
public SequencePosition Position
public JsonReaderState CurrentState
private string DebuggerDisplay
private string DebugTokenType
private bool get_IsLastSpan()
internal ReadOnlySequence`1<byte> get_OriginalSequence()
internal ReadOnlySpan`1<byte> get_OriginalSpan()
internal int get_ValueLength()
public ReadOnlySpan`1<byte> get_ValueSpan()
private void set_ValueSpan(ReadOnlySpan`1<byte> value)
public long get_BytesConsumed()
public long get_TokenStartIndex()
private void set_TokenStartIndex(long value)
public int get_CurrentDepth()
internal bool get_IsInArray()
public JsonTokenType get_TokenType()
public bool get_HasValueSequence()
private void set_HasValueSequence(bool value)
public bool get_ValueIsEscaped()
private void set_ValueIsEscaped(bool value)
public bool get_IsFinalBlock()
public ReadOnlySequence`1<byte> get_ValueSequence()
private void set_ValueSequence(ReadOnlySequence`1<byte> value)
public SequencePosition get_Position()
public JsonReaderState get_CurrentState()
public void .ctor(ReadOnlySpan`1<byte> jsonData, bool isFinalBlock, JsonReaderState state)
public void .ctor(ReadOnlySpan`1<byte> jsonData, JsonReaderOptions options)
public bool Read()
public void Skip()
private void SkipHelper()
public bool TrySkip()
private bool TrySkipHelper()
public bool ValueTextEquals(ReadOnlySpan`1<byte> utf8Text)
public bool ValueTextEquals(string text)
private bool TextEqualsHelper(ReadOnlySpan`1<byte> otherUtf8Text)
public bool ValueTextEquals(ReadOnlySpan`1<char> text)
private bool CompareToSequence(ReadOnlySpan`1<byte> other)
private bool UnescapeAndCompare(ReadOnlySpan`1<byte> other)
private bool UnescapeSequenceAndCompare(ReadOnlySpan`1<byte> other)
private bool IsTokenTypeString(JsonTokenType tokenType)
private bool MatchNotPossible(int charTextLength)
private bool MatchNotPossibleSequence(int charTextLength)
private void StartObject()
private void EndObject()
private void StartArray()
private void EndArray()
private void UpdateBitStackOnEndToken()
private bool ReadSingleSegment()
private bool HasMoreData()
private bool HasMoreData(ExceptionResource resource)
private bool ReadFirstToken(byte first)
private void SkipWhiteSpace()
private bool ConsumeValue(byte marker)
private bool ConsumeLiteral(ReadOnlySpan`1<byte> literal, JsonTokenType tokenType)
private bool CheckLiteral(ReadOnlySpan`1<byte> span, ReadOnlySpan`1<byte> literal)
private void ThrowInvalidLiteral(ReadOnlySpan`1<byte> span)
private bool ConsumeNumber()
private bool ConsumePropertyName()
private bool ConsumeString()
private bool ConsumeStringAndValidate(ReadOnlySpan`1<byte> data, int idx)
private bool ValidateHexDigits(ReadOnlySpan`1<byte> data, int idx)
private bool TryGetNumber(ReadOnlySpan`1<byte> data, Int32& consumed)
private ConsumeNumberResult ConsumeNegativeSign(ReadOnlySpan`1& data, Int32& i)
private ConsumeNumberResult ConsumeZero(ReadOnlySpan`1& data, Int32& i)
private ConsumeNumberResult ConsumeIntegerDigits(ReadOnlySpan`1& data, Int32& i)
private ConsumeNumberResult ConsumeDecimalDigits(ReadOnlySpan`1& data, Int32& i)
private ConsumeNumberResult ConsumeSign(ReadOnlySpan`1& data, Int32& i)
private bool ConsumeNextTokenOrRollback(byte marker)
private ConsumeTokenResult ConsumeNextToken(byte marker)
private ConsumeTokenResult ConsumeNextTokenFromLastNonCommentToken()
private bool SkipAllComments(Byte& marker)
private bool SkipAllComments(Byte& marker, ExceptionResource resource)
private ConsumeTokenResult ConsumeNextTokenUntilAfterAllCommentsAreSkipped(byte marker)
private bool SkipComment()
private bool SkipSingleLineComment(ReadOnlySpan`1<byte> localBuffer, Int32& idx)
private int FindLineSeparator(ReadOnlySpan`1<byte> localBuffer)
private void ThrowOnDangerousLineSeparator(ReadOnlySpan`1<byte> localBuffer)
private bool SkipMultiLineComment(ReadOnlySpan`1<byte> localBuffer, Int32& idx)
private bool ConsumeComment()
private bool ConsumeSingleLineComment(ReadOnlySpan`1<byte> localBuffer, int previousConsumed)
private bool ConsumeMultiLineComment(ReadOnlySpan`1<byte> localBuffer, int previousConsumed)
private string get_DebuggerDisplay()
private string get_DebugTokenType()
private ReadOnlySpan`1<byte> GetUnescapedSpan()
public void .ctor(ReadOnlySequence`1<byte> jsonData, bool isFinalBlock, JsonReaderState state)
public void .ctor(ReadOnlySequence`1<byte> jsonData, JsonReaderOptions options)
private bool ReadMultiSegment()
private bool ValidateStateAtEndOfData()
private bool HasMoreDataMultiSegment()
private bool HasMoreDataMultiSegment(ExceptionResource resource)
private bool GetNextSpan()
private bool ReadFirstTokenMultiSegment(byte first)
private void SkipWhiteSpaceMultiSegment()
private bool ConsumeValueMultiSegment(byte marker)
private bool ConsumeLiteralMultiSegment(ReadOnlySpan`1<byte> literal, JsonTokenType tokenType)
private bool CheckLiteralMultiSegment(ReadOnlySpan`1<byte> span, ReadOnlySpan`1<byte> literal, Int32& consumed)
private int FindMismatch(ReadOnlySpan`1<byte> span, ReadOnlySpan`1<byte> literal)
private JsonException GetInvalidLiteralMultiSegment(ReadOnlySpan`1<byte> span)
private bool ConsumeNumberMultiSegment()
private bool ConsumePropertyNameMultiSegment()
private bool ConsumeStringMultiSegment()
private bool ConsumeStringNextSegment()
private bool ConsumeStringAndValidateMultiSegment(ReadOnlySpan`1<byte> data, int idx)
private void RollBackState(PartialStateForRollback& state, bool isError)
private bool TryGetNumberMultiSegment(ReadOnlySpan`1<byte> data, Int32& consumed)
private ConsumeNumberResult ConsumeNegativeSignMultiSegment(ReadOnlySpan`1& data, Int32& i, PartialStateForRollback& rollBackState)
private ConsumeNumberResult ConsumeZeroMultiSegment(ReadOnlySpan`1& data, Int32& i, PartialStateForRollback& rollBackState)
private ConsumeNumberResult ConsumeIntegerDigitsMultiSegment(ReadOnlySpan`1& data, Int32& i)
private ConsumeNumberResult ConsumeDecimalDigitsMultiSegment(ReadOnlySpan`1& data, Int32& i, PartialStateForRollback& rollBackState)
private ConsumeNumberResult ConsumeSignMultiSegment(ReadOnlySpan`1& data, Int32& i, PartialStateForRollback& rollBackState)
private bool ConsumeNextTokenOrRollbackMultiSegment(byte marker)
private ConsumeTokenResult ConsumeNextTokenMultiSegment(byte marker)
private ConsumeTokenResult ConsumeNextTokenFromLastNonCommentTokenMultiSegment()
private bool SkipAllCommentsMultiSegment(Byte& marker)
private bool SkipAllCommentsMultiSegment(Byte& marker, ExceptionResource resource)
private ConsumeTokenResult ConsumeNextTokenUntilAfterAllCommentsAreSkippedMultiSegment(byte marker)
private bool SkipOrConsumeCommentMultiSegmentWithRollback()
private bool SkipCommentMultiSegment(Int32& tailBytesToIgnore)
private bool SkipSingleLineCommentMultiSegment(ReadOnlySpan`1<byte> localBuffer, Int32& tailBytesToSkip)
private int FindLineSeparatorMultiSegment(ReadOnlySpan`1<byte> localBuffer, Int32& dangerousLineSeparatorBytesConsumed)
private void ThrowOnDangerousLineSeparatorMultiSegment(ReadOnlySpan`1<byte> localBuffer, Int32& dangerousLineSeparatorBytesConsumed)
private bool SkipMultiLineCommentMultiSegment(ReadOnlySpan`1<byte> localBuffer)
private PartialStateForRollback CaptureState()
public string GetString()
public int CopyString(Span`1<byte> utf8Destination)
internal int CopyValue(Span`1<byte> utf8Destination)
public int CopyString(Span`1<char> destination)
internal int CopyValue(Span`1<char> destination)
private bool TryCopyEscapedString(Span`1<byte> destination, Int32& bytesWritten)
public string GetComment()
public bool GetBoolean()
public Byte[] GetBytesFromBase64()
public byte GetByte()
internal byte GetByteWithQuotes()
public sbyte GetSByte()
internal sbyte GetSByteWithQuotes()
public short GetInt16()
internal short GetInt16WithQuotes()
public int GetInt32()
internal int GetInt32WithQuotes()
public long GetInt64()
internal long GetInt64WithQuotes()
public ushort GetUInt16()
internal ushort GetUInt16WithQuotes()
public UInt32 GetUInt32()
internal UInt32 GetUInt32WithQuotes()
public ulong GetUInt64()
internal ulong GetUInt64WithQuotes()
public float GetSingle()
internal float GetSingleWithQuotes()
internal float GetSingleFloatingPointConstant()
public double GetDouble()
internal double GetDoubleWithQuotes()
internal double GetDoubleFloatingPointConstant()
public decimal GetDecimal()
internal decimal GetDecimalWithQuotes()
public DateTime GetDateTime()
internal DateTime GetDateTimeNoValidation()
public DateTimeOffset GetDateTimeOffset()
internal DateTimeOffset GetDateTimeOffsetNoValidation()
public Guid GetGuid()
internal Guid GetGuidNoValidation()
public bool TryGetBytesFromBase64(Byte[]& value)
public bool TryGetByte(Byte& value)
internal bool TryGetByteCore(Byte& value, ReadOnlySpan`1<byte> span)
public bool TryGetSByte(SByte& value)
internal bool TryGetSByteCore(SByte& value, ReadOnlySpan`1<byte> span)
public bool TryGetInt16(Int16& value)
internal bool TryGetInt16Core(Int16& value, ReadOnlySpan`1<byte> span)
public bool TryGetInt32(Int32& value)
internal bool TryGetInt32Core(Int32& value, ReadOnlySpan`1<byte> span)
public bool TryGetInt64(Int64& value)
internal bool TryGetInt64Core(Int64& value, ReadOnlySpan`1<byte> span)
public bool TryGetUInt16(UInt16& value)
internal bool TryGetUInt16Core(UInt16& value, ReadOnlySpan`1<byte> span)
public bool TryGetUInt32(UInt32& value)
internal bool TryGetUInt32Core(UInt32& value, ReadOnlySpan`1<byte> span)
public bool TryGetUInt64(UInt64& value)
internal bool TryGetUInt64Core(UInt64& value, ReadOnlySpan`1<byte> span)
public bool TryGetSingle(Single& value)
public bool TryGetDouble(Double& value)
public bool TryGetDecimal(Decimal& value)
internal bool TryGetDecimalCore(Decimal& value, ReadOnlySpan`1<byte> span)
public bool TryGetDateTime(DateTime& value)
internal bool TryGetDateTimeCore(DateTime& value)
public bool TryGetDateTimeOffset(DateTimeOffset& value)
internal bool TryGetDateTimeOffsetCore(DateTimeOffset& value)
public bool TryGetGuid(Guid& value)
internal bool TryGetGuidCore(Guid& value)
}
public System.Text.Json.Utf8JsonWriter : object {
private int s_newLineLength
private int DefaultGrowthSize
private int InitialGrowthSize
private IBufferWriter`1<byte> _output
private Stream _stream
private ArrayBufferWriter`1<byte> _arrayBufferWriter
private Memory`1<byte> _memory
private bool _inObject
private bool _commentAfterNoneOrPropertyName
private JsonTokenType _tokenType
private BitStack _bitStack
private int _currentDepth
private JsonWriterOptions _options
private int <BytesPending>k__BackingField
private long <BytesCommitted>k__BackingField
private Char[] s_singleLineCommentDelimiter
public int BytesPending
public long BytesCommitted
public JsonWriterOptions Options
private int Indentation
internal JsonTokenType TokenType
public int CurrentDepth
private string DebuggerDisplay
private ReadOnlySpan`1<byte> SingleLineCommentDelimiterUtf8
public int get_BytesPending()
private void set_BytesPending(int value)
public long get_BytesCommitted()
private void set_BytesCommitted(long value)
public JsonWriterOptions get_Options()
private int get_Indentation()
internal JsonTokenType get_TokenType()
public int get_CurrentDepth()
public void .ctor(IBufferWriter`1<byte> bufferWriter, JsonWriterOptions options)
public void .ctor(Stream utf8Json, JsonWriterOptions options)
public void Reset()
public void Reset(Stream utf8Json)
public void Reset(IBufferWriter`1<byte> bufferWriter)
internal void ResetAllStateForCacheReuse()
internal void Reset(IBufferWriter`1<byte> bufferWriter, JsonWriterOptions options)
internal Utf8JsonWriter CreateEmptyInstanceForCaching()
private void ResetHelper()
private void CheckNotDisposed()
public void Flush()
public void Dispose()
public ValueTask DisposeAsync()
public Task FlushAsync(CancellationToken cancellationToken)
public void WriteStartArray()
public void WriteStartObject()
private void WriteStart(byte token)
private void WriteStartMinimized(byte token)
private void WriteStartSlow(byte token)
private void ValidateStart()
private void WriteStartIndented(byte token)
public void WriteStartArray(JsonEncodedText propertyName)
public void WriteStartObject(JsonEncodedText propertyName)
private void WriteStartHelper(ReadOnlySpan`1<byte> utf8PropertyName, byte token)
public void WriteStartArray(ReadOnlySpan`1<byte> utf8PropertyName)
public void WriteStartObject(ReadOnlySpan`1<byte> utf8PropertyName)
private void WriteStartEscape(ReadOnlySpan`1<byte> utf8PropertyName, byte token)
private void WriteStartByOptions(ReadOnlySpan`1<byte> utf8PropertyName, byte token)
private void WriteStartEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, byte token, int firstEscapeIndexProp)
public void WriteStartArray(string propertyName)
public void WriteStartObject(string propertyName)
public void WriteStartArray(ReadOnlySpan`1<char> propertyName)
public void WriteStartObject(ReadOnlySpan`1<char> propertyName)
private void WriteStartEscape(ReadOnlySpan`1<char> propertyName, byte token)
private void WriteStartByOptions(ReadOnlySpan`1<char> propertyName, byte token)
private void WriteStartEscapeProperty(ReadOnlySpan`1<char> propertyName, byte token, int firstEscapeIndexProp)
public void WriteEndArray()
public void WriteEndObject()
private void WriteEnd(byte token)
private void WriteEndMinimized(byte token)
private void WriteEndSlow(byte token)
private void ValidateEnd(byte token)
private void WriteEndIndented(byte token)
private void WriteNewLine(Span`1<byte> output)
private void UpdateBitStackOnStart(byte token)
private void Grow(int requiredSize)
private void FirstCallToGetMemory(int requiredSize)
private void SetFlagToAddListSeparatorBeforeNextItem()
private string get_DebuggerDisplay()
public void WriteBase64String(JsonEncodedText propertyName, ReadOnlySpan`1<byte> bytes)
public void WriteBase64String(string propertyName, ReadOnlySpan`1<byte> bytes)
public void WriteBase64String(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> bytes)
public void WriteBase64String(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> bytes)
private void WriteBase64Escape(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> bytes)
private void WriteBase64Escape(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> bytes)
private void WriteBase64EscapeProperty(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> bytes, int firstEscapeIndexProp)
private void WriteBase64EscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> bytes, int firstEscapeIndexProp)
private void WriteBase64ByOptions(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> bytes)
private void WriteBase64ByOptions(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> bytes)
private void WriteBase64Minimized(ReadOnlySpan`1<char> escapedPropertyName, ReadOnlySpan`1<byte> bytes)
private void WriteBase64Minimized(ReadOnlySpan`1<byte> escapedPropertyName, ReadOnlySpan`1<byte> bytes)
private void WriteBase64Indented(ReadOnlySpan`1<char> escapedPropertyName, ReadOnlySpan`1<byte> bytes)
private void WriteBase64Indented(ReadOnlySpan`1<byte> escapedPropertyName, ReadOnlySpan`1<byte> bytes)
public void WriteString(JsonEncodedText propertyName, DateTime value)
public void WriteString(string propertyName, DateTime value)
public void WriteString(ReadOnlySpan`1<char> propertyName, DateTime value)
public void WriteString(ReadOnlySpan`1<byte> utf8PropertyName, DateTime value)
private void WriteStringEscape(ReadOnlySpan`1<char> propertyName, DateTime value)
private void WriteStringEscape(ReadOnlySpan`1<byte> utf8PropertyName, DateTime value)
private void WriteStringEscapeProperty(ReadOnlySpan`1<char> propertyName, DateTime value, int firstEscapeIndexProp)
private void WriteStringEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, DateTime value, int firstEscapeIndexProp)
private void WriteStringByOptions(ReadOnlySpan`1<char> propertyName, DateTime value)
private void WriteStringByOptions(ReadOnlySpan`1<byte> utf8PropertyName, DateTime value)
private void WriteStringMinimized(ReadOnlySpan`1<char> escapedPropertyName, DateTime value)
private void WriteStringMinimized(ReadOnlySpan`1<byte> escapedPropertyName, DateTime value)
private void WriteStringIndented(ReadOnlySpan`1<char> escapedPropertyName, DateTime value)
private void WriteStringIndented(ReadOnlySpan`1<byte> escapedPropertyName, DateTime value)
internal void WritePropertyName(DateTime value)
public void WriteString(JsonEncodedText propertyName, DateTimeOffset value)
public void WriteString(string propertyName, DateTimeOffset value)
public void WriteString(ReadOnlySpan`1<char> propertyName, DateTimeOffset value)
public void WriteString(ReadOnlySpan`1<byte> utf8PropertyName, DateTimeOffset value)
private void WriteStringEscape(ReadOnlySpan`1<char> propertyName, DateTimeOffset value)
private void WriteStringEscape(ReadOnlySpan`1<byte> utf8PropertyName, DateTimeOffset value)
private void WriteStringEscapeProperty(ReadOnlySpan`1<char> propertyName, DateTimeOffset value, int firstEscapeIndexProp)
private void WriteStringEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, DateTimeOffset value, int firstEscapeIndexProp)
private void WriteStringByOptions(ReadOnlySpan`1<char> propertyName, DateTimeOffset value)
private void WriteStringByOptions(ReadOnlySpan`1<byte> utf8PropertyName, DateTimeOffset value)
private void WriteStringMinimized(ReadOnlySpan`1<char> escapedPropertyName, DateTimeOffset value)
private void WriteStringMinimized(ReadOnlySpan`1<byte> escapedPropertyName, DateTimeOffset value)
private void WriteStringIndented(ReadOnlySpan`1<char> escapedPropertyName, DateTimeOffset value)
private void WriteStringIndented(ReadOnlySpan`1<byte> escapedPropertyName, DateTimeOffset value)
internal void WritePropertyName(DateTimeOffset value)
public void WriteNumber(JsonEncodedText propertyName, decimal value)
public void WriteNumber(string propertyName, decimal value)
public void WriteNumber(ReadOnlySpan`1<char> propertyName, decimal value)
public void WriteNumber(ReadOnlySpan`1<byte> utf8PropertyName, decimal value)
private void WriteNumberEscape(ReadOnlySpan`1<char> propertyName, decimal value)
private void WriteNumberEscape(ReadOnlySpan`1<byte> utf8PropertyName, decimal value)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<char> propertyName, decimal value, int firstEscapeIndexProp)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, decimal value, int firstEscapeIndexProp)
private void WriteNumberByOptions(ReadOnlySpan`1<char> propertyName, decimal value)
private void WriteNumberByOptions(ReadOnlySpan`1<byte> utf8PropertyName, decimal value)
private void WriteNumberMinimized(ReadOnlySpan`1<char> escapedPropertyName, decimal value)
private void WriteNumberMinimized(ReadOnlySpan`1<byte> escapedPropertyName, decimal value)
private void WriteNumberIndented(ReadOnlySpan`1<char> escapedPropertyName, decimal value)
private void WriteNumberIndented(ReadOnlySpan`1<byte> escapedPropertyName, decimal value)
internal void WritePropertyName(decimal value)
public void WriteNumber(JsonEncodedText propertyName, double value)
public void WriteNumber(string propertyName, double value)
public void WriteNumber(ReadOnlySpan`1<char> propertyName, double value)
public void WriteNumber(ReadOnlySpan`1<byte> utf8PropertyName, double value)
private void WriteNumberEscape(ReadOnlySpan`1<char> propertyName, double value)
private void WriteNumberEscape(ReadOnlySpan`1<byte> utf8PropertyName, double value)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<char> propertyName, double value, int firstEscapeIndexProp)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, double value, int firstEscapeIndexProp)
private void WriteNumberByOptions(ReadOnlySpan`1<char> propertyName, double value)
private void WriteNumberByOptions(ReadOnlySpan`1<byte> utf8PropertyName, double value)
private void WriteNumberMinimized(ReadOnlySpan`1<char> escapedPropertyName, double value)
private void WriteNumberMinimized(ReadOnlySpan`1<byte> escapedPropertyName, double value)
private void WriteNumberIndented(ReadOnlySpan`1<char> escapedPropertyName, double value)
private void WriteNumberIndented(ReadOnlySpan`1<byte> escapedPropertyName, double value)
internal void WritePropertyName(double value)
public void WriteNumber(JsonEncodedText propertyName, float value)
public void WriteNumber(string propertyName, float value)
public void WriteNumber(ReadOnlySpan`1<char> propertyName, float value)
public void WriteNumber(ReadOnlySpan`1<byte> utf8PropertyName, float value)
private void WriteNumberEscape(ReadOnlySpan`1<char> propertyName, float value)
private void WriteNumberEscape(ReadOnlySpan`1<byte> utf8PropertyName, float value)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<char> propertyName, float value, int firstEscapeIndexProp)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, float value, int firstEscapeIndexProp)
private void WriteNumberByOptions(ReadOnlySpan`1<char> propertyName, float value)
private void WriteNumberByOptions(ReadOnlySpan`1<byte> utf8PropertyName, float value)
private void WriteNumberMinimized(ReadOnlySpan`1<char> escapedPropertyName, float value)
private void WriteNumberMinimized(ReadOnlySpan`1<byte> escapedPropertyName, float value)
private void WriteNumberIndented(ReadOnlySpan`1<char> escapedPropertyName, float value)
private void WriteNumberIndented(ReadOnlySpan`1<byte> escapedPropertyName, float value)
internal void WritePropertyName(float value)
internal void WriteNumber(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> utf8FormattedNumber)
internal void WriteNumber(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> utf8FormattedNumber)
internal void WriteNumber(JsonEncodedText propertyName, ReadOnlySpan`1<byte> utf8FormattedNumber)
private void WriteNumberEscape(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> value)
private void WriteNumberEscape(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> value)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> value, int firstEscapeIndexProp)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> value, int firstEscapeIndexProp)
private void WriteNumberByOptions(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> value)
private void WriteNumberByOptions(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> value)
public void WriteString(JsonEncodedText propertyName, Guid value)
public void WriteString(string propertyName, Guid value)
public void WriteString(ReadOnlySpan`1<char> propertyName, Guid value)
public void WriteString(ReadOnlySpan`1<byte> utf8PropertyName, Guid value)
private void WriteStringEscape(ReadOnlySpan`1<char> propertyName, Guid value)
private void WriteStringEscape(ReadOnlySpan`1<byte> utf8PropertyName, Guid value)
private void WriteStringEscapeProperty(ReadOnlySpan`1<char> propertyName, Guid value, int firstEscapeIndexProp)
private void WriteStringEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, Guid value, int firstEscapeIndexProp)
private void WriteStringByOptions(ReadOnlySpan`1<char> propertyName, Guid value)
private void WriteStringByOptions(ReadOnlySpan`1<byte> utf8PropertyName, Guid value)
private void WriteStringMinimized(ReadOnlySpan`1<char> escapedPropertyName, Guid value)
private void WriteStringMinimized(ReadOnlySpan`1<byte> escapedPropertyName, Guid value)
private void WriteStringIndented(ReadOnlySpan`1<char> escapedPropertyName, Guid value)
private void WriteStringIndented(ReadOnlySpan`1<byte> escapedPropertyName, Guid value)
internal void WritePropertyName(Guid value)
private void ValidatePropertyNameAndDepth(ReadOnlySpan`1<char> propertyName)
private void ValidatePropertyNameAndDepth(ReadOnlySpan`1<byte> utf8PropertyName)
private void ValidateDepth()
private void ValidateWritingProperty()
private void ValidateWritingProperty(byte token)
private void WritePropertyNameMinimized(ReadOnlySpan`1<byte> escapedPropertyName, byte token)
private void WritePropertyNameIndented(ReadOnlySpan`1<byte> escapedPropertyName, byte token)
private void WritePropertyNameMinimized(ReadOnlySpan`1<char> escapedPropertyName, byte token)
private void WritePropertyNameIndented(ReadOnlySpan`1<char> escapedPropertyName, byte token)
private void TranscodeAndWrite(ReadOnlySpan`1<char> escapedPropertyName, Span`1<byte> output)
public void WriteNull(JsonEncodedText propertyName)
internal void WriteNullSection(ReadOnlySpan`1<byte> escapedPropertyNameSection)
private void WriteLiteralHelper(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> value)
public void WriteNull(string propertyName)
public void WriteNull(ReadOnlySpan`1<char> propertyName)
public void WriteNull(ReadOnlySpan`1<byte> utf8PropertyName)
public void WriteBoolean(JsonEncodedText propertyName, bool value)
public void WriteBoolean(string propertyName, bool value)
public void WriteBoolean(ReadOnlySpan`1<char> propertyName, bool value)
public void WriteBoolean(ReadOnlySpan`1<byte> utf8PropertyName, bool value)
private void WriteLiteralEscape(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> value)
private void WriteLiteralEscape(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> value)
private void WriteLiteralEscapeProperty(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> value, int firstEscapeIndexProp)
private void WriteLiteralEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> value, int firstEscapeIndexProp)
private void WriteLiteralByOptions(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> value)
private void WriteLiteralByOptions(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> value)
private void WriteLiteralMinimized(ReadOnlySpan`1<char> escapedPropertyName, ReadOnlySpan`1<byte> value)
private void WriteLiteralMinimized(ReadOnlySpan`1<byte> escapedPropertyName, ReadOnlySpan`1<byte> value)
private void WriteLiteralSection(ReadOnlySpan`1<byte> escapedPropertyNameSection, ReadOnlySpan`1<byte> value)
private void WriteLiteralIndented(ReadOnlySpan`1<char> escapedPropertyName, ReadOnlySpan`1<byte> value)
private void WriteLiteralIndented(ReadOnlySpan`1<byte> escapedPropertyName, ReadOnlySpan`1<byte> value)
internal void WritePropertyName(bool value)
public void WriteNumber(JsonEncodedText propertyName, long value)
public void WriteNumber(string propertyName, long value)
public void WriteNumber(ReadOnlySpan`1<char> propertyName, long value)
public void WriteNumber(ReadOnlySpan`1<byte> utf8PropertyName, long value)
public void WriteNumber(JsonEncodedText propertyName, int value)
public void WriteNumber(string propertyName, int value)
public void WriteNumber(ReadOnlySpan`1<char> propertyName, int value)
public void WriteNumber(ReadOnlySpan`1<byte> utf8PropertyName, int value)
private void WriteNumberEscape(ReadOnlySpan`1<char> propertyName, long value)
private void WriteNumberEscape(ReadOnlySpan`1<byte> utf8PropertyName, long value)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<char> propertyName, long value, int firstEscapeIndexProp)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, long value, int firstEscapeIndexProp)
private void WriteNumberByOptions(ReadOnlySpan`1<char> propertyName, long value)
private void WriteNumberByOptions(ReadOnlySpan`1<byte> utf8PropertyName, long value)
private void WriteNumberMinimized(ReadOnlySpan`1<char> escapedPropertyName, long value)
private void WriteNumberMinimized(ReadOnlySpan`1<byte> escapedPropertyName, long value)
private void WriteNumberIndented(ReadOnlySpan`1<char> escapedPropertyName, long value)
private void WriteNumberIndented(ReadOnlySpan`1<byte> escapedPropertyName, long value)
internal void WritePropertyName(int value)
internal void WritePropertyName(long value)
public void WritePropertyName(JsonEncodedText propertyName)
internal void WritePropertyNameSection(ReadOnlySpan`1<byte> escapedPropertyNameSection)
private void WritePropertyNameHelper(ReadOnlySpan`1<byte> utf8PropertyName)
public void WritePropertyName(string propertyName)
public void WritePropertyName(ReadOnlySpan`1<char> propertyName)
private void WriteStringEscapeProperty(ReadOnlySpan`1<char> propertyName, int firstEscapeIndexProp)
private void WriteStringByOptionsPropertyName(ReadOnlySpan`1<char> propertyName)
private void WriteStringMinimizedPropertyName(ReadOnlySpan`1<char> escapedPropertyName)
private void WriteStringIndentedPropertyName(ReadOnlySpan`1<char> escapedPropertyName)
public void WritePropertyName(ReadOnlySpan`1<byte> utf8PropertyName)
private void WritePropertyNameUnescaped(ReadOnlySpan`1<byte> utf8PropertyName)
private void WriteStringEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, int firstEscapeIndexProp)
private void WriteStringByOptionsPropertyName(ReadOnlySpan`1<byte> utf8PropertyName)
private void WriteStringMinimizedPropertyName(ReadOnlySpan`1<byte> escapedPropertyName)
private void WriteStringPropertyNameSection(ReadOnlySpan`1<byte> escapedPropertyNameSection)
private void WriteStringIndentedPropertyName(ReadOnlySpan`1<byte> escapedPropertyName)
public void WriteString(JsonEncodedText propertyName, JsonEncodedText value)
private void WriteStringHelper(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> utf8Value)
public void WriteString(string propertyName, JsonEncodedText value)
public void WriteString(string propertyName, string value)
public void WriteString(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> value)
public void WriteString(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> utf8Value)
public void WriteString(JsonEncodedText propertyName, string value)
public void WriteString(JsonEncodedText propertyName, ReadOnlySpan`1<char> value)
private void WriteStringHelperEscapeValue(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<char> value)
public void WriteString(string propertyName, ReadOnlySpan`1<char> value)
public void WriteString(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<char> value)
public void WriteString(JsonEncodedText propertyName, ReadOnlySpan`1<byte> utf8Value)
private void WriteStringHelperEscapeValue(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> utf8Value)
public void WriteString(string propertyName, ReadOnlySpan`1<byte> utf8Value)
public void WriteString(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> utf8Value)
public void WriteString(ReadOnlySpan`1<char> propertyName, JsonEncodedText value)
private void WriteStringHelperEscapeProperty(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> utf8Value)
public void WriteString(ReadOnlySpan`1<char> propertyName, string value)
public void WriteString(ReadOnlySpan`1<byte> utf8PropertyName, JsonEncodedText value)
private void WriteStringHelperEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> utf8Value)
public void WriteString(ReadOnlySpan`1<byte> utf8PropertyName, string value)
private void WriteStringEscapeValueOnly(ReadOnlySpan`1<byte> escapedPropertyName, ReadOnlySpan`1<byte> utf8Value, int firstEscapeIndex)
private void WriteStringEscapeValueOnly(ReadOnlySpan`1<byte> escapedPropertyName, ReadOnlySpan`1<char> value, int firstEscapeIndex)
private void WriteStringEscapePropertyOnly(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> escapedValue, int firstEscapeIndex)
private void WriteStringEscapePropertyOnly(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> escapedValue, int firstEscapeIndex)
private void WriteStringEscape(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> value)
private void WriteStringEscape(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> utf8Value)
private void WriteStringEscape(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> utf8Value)
private void WriteStringEscape(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<char> value)
private void WriteStringEscapePropertyOrValue(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> value, int firstEscapeIndexProp, int firstEscapeIndexVal)
private void WriteStringEscapePropertyOrValue(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> utf8Value, int firstEscapeIndexProp, int firstEscapeIndexVal)
private void WriteStringEscapePropertyOrValue(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> utf8Value, int firstEscapeIndexProp, int firstEscapeIndexVal)
private void WriteStringEscapePropertyOrValue(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<char> value, int firstEscapeIndexProp, int firstEscapeIndexVal)
private void WriteStringByOptions(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> value)
private void WriteStringByOptions(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<byte> utf8Value)
private void WriteStringByOptions(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<byte> utf8Value)
private void WriteStringByOptions(ReadOnlySpan`1<byte> utf8PropertyName, ReadOnlySpan`1<char> value)
private void WriteStringMinimized(ReadOnlySpan`1<char> escapedPropertyName, ReadOnlySpan`1<char> escapedValue)
private void WriteStringMinimized(ReadOnlySpan`1<byte> escapedPropertyName, ReadOnlySpan`1<byte> escapedValue)
private void WriteStringMinimized(ReadOnlySpan`1<char> escapedPropertyName, ReadOnlySpan`1<byte> escapedValue)
private void WriteStringMinimized(ReadOnlySpan`1<byte> escapedPropertyName, ReadOnlySpan`1<char> escapedValue)
private void WriteStringIndented(ReadOnlySpan`1<char> escapedPropertyName, ReadOnlySpan`1<char> escapedValue)
private void WriteStringIndented(ReadOnlySpan`1<byte> escapedPropertyName, ReadOnlySpan`1<byte> escapedValue)
private void WriteStringIndented(ReadOnlySpan`1<char> escapedPropertyName, ReadOnlySpan`1<byte> escapedValue)
private void WriteStringIndented(ReadOnlySpan`1<byte> escapedPropertyName, ReadOnlySpan`1<char> escapedValue)
public void WriteNumber(JsonEncodedText propertyName, ulong value)
public void WriteNumber(string propertyName, ulong value)
public void WriteNumber(ReadOnlySpan`1<char> propertyName, ulong value)
public void WriteNumber(ReadOnlySpan`1<byte> utf8PropertyName, ulong value)
public void WriteNumber(JsonEncodedText propertyName, UInt32 value)
public void WriteNumber(string propertyName, UInt32 value)
public void WriteNumber(ReadOnlySpan`1<char> propertyName, UInt32 value)
public void WriteNumber(ReadOnlySpan`1<byte> utf8PropertyName, UInt32 value)
private void WriteNumberEscape(ReadOnlySpan`1<char> propertyName, ulong value)
private void WriteNumberEscape(ReadOnlySpan`1<byte> utf8PropertyName, ulong value)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<char> propertyName, ulong value, int firstEscapeIndexProp)
private void WriteNumberEscapeProperty(ReadOnlySpan`1<byte> utf8PropertyName, ulong value, int firstEscapeIndexProp)
private void WriteNumberByOptions(ReadOnlySpan`1<char> propertyName, ulong value)
private void WriteNumberByOptions(ReadOnlySpan`1<byte> utf8PropertyName, ulong value)
private void WriteNumberMinimized(ReadOnlySpan`1<char> escapedPropertyName, ulong value)
private void WriteNumberMinimized(ReadOnlySpan`1<byte> escapedPropertyName, ulong value)
private void WriteNumberIndented(ReadOnlySpan`1<char> escapedPropertyName, ulong value)
private void WriteNumberIndented(ReadOnlySpan`1<byte> escapedPropertyName, ulong value)
internal void WritePropertyName(UInt32 value)
internal void WritePropertyName(ulong value)
public void WriteBase64StringValue(ReadOnlySpan`1<byte> bytes)
private void WriteBase64ByOptions(ReadOnlySpan`1<byte> bytes)
private void WriteBase64Minimized(ReadOnlySpan`1<byte> bytes)
private void WriteBase64Indented(ReadOnlySpan`1<byte> bytes)
private ReadOnlySpan`1<byte> get_SingleLineCommentDelimiterUtf8()
public void WriteCommentValue(string value)
public void WriteCommentValue(ReadOnlySpan`1<char> value)
private void WriteCommentByOptions(ReadOnlySpan`1<char> value)
private void WriteCommentMinimized(ReadOnlySpan`1<char> value)
private void WriteCommentIndented(ReadOnlySpan`1<char> value)
public void WriteCommentValue(ReadOnlySpan`1<byte> utf8Value)
private void WriteCommentByOptions(ReadOnlySpan`1<byte> utf8Value)
private void WriteCommentMinimized(ReadOnlySpan`1<byte> utf8Value)
private void WriteCommentIndented(ReadOnlySpan`1<byte> utf8Value)
public void WriteStringValue(DateTime value)
private void WriteStringValueMinimized(DateTime value)
private void WriteStringValueIndented(DateTime value)
public void WriteStringValue(DateTimeOffset value)
private void WriteStringValueMinimized(DateTimeOffset value)
private void WriteStringValueIndented(DateTimeOffset value)
public void WriteNumberValue(decimal value)
private void WriteNumberValueMinimized(decimal value)
private void WriteNumberValueIndented(decimal value)
internal void WriteNumberValueAsString(decimal value)
public void WriteNumberValue(double value)
private void WriteNumberValueMinimized(double value)
private void WriteNumberValueIndented(double value)
private bool TryFormatDouble(double value, Span`1<byte> destination, Int32& bytesWritten)
internal void WriteNumberValueAsString(double value)
internal void WriteFloatingPointConstant(double value)
public void WriteNumberValue(float value)
private void WriteNumberValueMinimized(float value)
private void WriteNumberValueIndented(float value)
private bool TryFormatSingle(float value, Span`1<byte> destination, Int32& bytesWritten)
internal void WriteNumberValueAsString(float value)
internal void WriteFloatingPointConstant(float value)
internal void WriteNumberValue(ReadOnlySpan`1<byte> utf8FormattedNumber)
private void WriteNumberValueMinimized(ReadOnlySpan`1<byte> utf8Value)
private void WriteNumberValueIndented(ReadOnlySpan`1<byte> utf8Value)
public void WriteStringValue(Guid value)
private void WriteStringValueMinimized(Guid value)
private void WriteStringValueIndented(Guid value)
private void ValidateWritingValue()
private void Base64EncodeAndWrite(ReadOnlySpan`1<byte> bytes, Span`1<byte> output, int encodingLength)
public void WriteNullValue()
public void WriteBooleanValue(bool value)
private void WriteLiteralByOptions(ReadOnlySpan`1<byte> utf8Value)
private void WriteLiteralMinimized(ReadOnlySpan`1<byte> utf8Value)
private void WriteLiteralIndented(ReadOnlySpan`1<byte> utf8Value)
public void WriteRawValue(string json, bool skipInputValidation)
public void WriteRawValue(ReadOnlySpan`1<char> json, bool skipInputValidation)
public void WriteRawValue(ReadOnlySpan`1<byte> utf8Json, bool skipInputValidation)
public void WriteRawValue(ReadOnlySequence`1<byte> utf8Json, bool skipInputValidation)
private void TranscodeAndWriteRawValue(ReadOnlySpan`1<char> json, bool skipInputValidation)
private void WriteRawValueCore(ReadOnlySpan`1<byte> utf8Json, bool skipInputValidation)
public void WriteNumberValue(int value)
public void WriteNumberValue(long value)
private void WriteNumberValueMinimized(long value)
private void WriteNumberValueIndented(long value)
internal void WriteNumberValueAsString(long value)
public void WriteStringValue(JsonEncodedText value)
public void WriteStringValue(string value)
public void WriteStringValue(ReadOnlySpan`1<char> value)
private void WriteStringEscape(ReadOnlySpan`1<char> value)
private void WriteStringByOptions(ReadOnlySpan`1<char> value)
private void WriteStringMinimized(ReadOnlySpan`1<char> escapedValue)
private void WriteStringIndented(ReadOnlySpan`1<char> escapedValue)
private void WriteStringEscapeValue(ReadOnlySpan`1<char> value, int firstEscapeIndexVal)
public void WriteStringValue(ReadOnlySpan`1<byte> utf8Value)
private void WriteStringEscape(ReadOnlySpan`1<byte> utf8Value)
private void WriteStringByOptions(ReadOnlySpan`1<byte> utf8Value)
private void WriteStringMinimized(ReadOnlySpan`1<byte> escapedValue)
private void WriteStringIndented(ReadOnlySpan`1<byte> escapedValue)
private void WriteStringEscapeValue(ReadOnlySpan`1<byte> utf8Value, int firstEscapeIndexVal)
internal void WriteNumberValueAsStringUnescaped(ReadOnlySpan`1<byte> utf8Value)
public void WriteNumberValue(UInt32 value)
public void WriteNumberValue(ulong value)
private void WriteNumberValueMinimized(ulong value)
private void WriteNumberValueIndented(ulong value)
internal void WriteNumberValueAsString(ulong value)
}
internal System.Text.Json.Utf8JsonWriterCache : object {
private ThreadLocalState t_threadLocalState
public Utf8JsonWriter RentWriterAndBuffer(JsonSerializerOptions options, PooledByteBufferWriter& bufferWriter)
public Utf8JsonWriter RentWriter(JsonSerializerOptions options, PooledByteBufferWriter bufferWriter)
public void ReturnWriterAndBuffer(Utf8JsonWriter writer, PooledByteBufferWriter bufferWriter)
public void ReturnWriter(Utf8JsonWriter writer)
}
internal System.Text.Json.WriteStack : ValueType {
public WriteStackFrame Current
private WriteStackFrame[] _stack
private int _count
private int _continuationCount
private byte _indexOffset
public CancellationToken CancellationToken
public bool SuppressFlush
public Task PendingTask
public List`1<IAsyncDisposable> CompletedAsyncDisposables
public int FlushThreshold
public ReferenceResolver ReferenceResolver
public bool SupportContinuation
public bool SupportAsync
public string NewReferenceId
public object PolymorphicTypeDiscriminator
public PolymorphicTypeResolver PolymorphicTypeResolver
public int CurrentDepth
public WriteStackFrame& Parent
public bool IsContinuation
public bool CurrentContainsMetadata
private string DebuggerDisplay
public int get_CurrentDepth()
public WriteStackFrame& get_Parent()
public bool get_IsContinuation()
public bool get_CurrentContainsMetadata()
private void EnsurePushCapacity()
internal void Initialize(JsonTypeInfo jsonTypeInfo, object rootValueBoxed, bool supportContinuation, bool supportAsync)
public JsonTypeInfo PeekNestedJsonTypeInfo()
public void Push()
public void Pop(bool success)
public void AddCompletedAsyncDisposable(IAsyncDisposable asyncDisposable)
public ValueTask DisposeCompletedAsyncDisposables()
public void DisposePendingDisposablesOnException()
public ValueTask DisposePendingDisposablesOnExceptionAsync()
public string PropertyPath()
private string get_DebuggerDisplay()
internal void <DisposePendingDisposablesOnException>g__DisposeFrame|31_0(IEnumerator collectionEnumerator, Exception& exception)
internal ValueTask`1<Exception> <DisposePendingDisposablesOnExceptionAsync>g__DisposeFrame|32_0(IEnumerator collectionEnumerator, IAsyncDisposable asyncDisposable, Exception exception)
internal void <PropertyPath>g__AppendStackFrame|33_0(StringBuilder sb, WriteStackFrame& frame)
internal void <PropertyPath>g__AppendPropertyName|33_1(StringBuilder sb, string propertyName)
}
internal System.Text.Json.WriteStackFrame : ValueType {
public IEnumerator CollectionEnumerator
public IAsyncDisposable AsyncDisposable
public bool AsyncEnumeratorIsPendingCompletion
public JsonPropertyInfo JsonPropertyInfo
public bool IsWritingExtensionDataProperty
public JsonTypeInfo JsonTypeInfo
public int OriginalDepth
public bool ProcessedStartToken
public bool ProcessedEndToken
public StackFramePropertyState PropertyState
public int EnumeratorIndex
public string JsonPropertyNameAsString
public MetadataPropertyName MetadataPropertyName
public PolymorphicSerializationState PolymorphicSerializationState
public JsonTypeInfo PolymorphicTypeInfo
public Nullable`1<JsonNumberHandling> NumberHandling
public bool IsPushedReferenceForCycleDetection
private string DebuggerDisplay
public void EndCollectionElement()
public void EndDictionaryEntry()
public void EndProperty()
public JsonTypeInfo GetNestedJsonTypeInfo()
public JsonTypeInfo InitializePolymorphicReEntry(Type runtimeType, JsonSerializerOptions options)
public JsonConverter InitializePolymorphicReEntry(JsonTypeInfo derivedJsonTypeInfo)
public JsonConverter ResumePolymorphicReEntry()
public void ExitPolymorphicConverter(bool success)
private string get_DebuggerDisplay()
}
