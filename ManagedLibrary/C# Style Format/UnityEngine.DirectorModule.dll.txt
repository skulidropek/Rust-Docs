public UnityEngine.Playables.DirectorWrapMode : Enum {
public int value__
public DirectorWrapMode Hold
public DirectorWrapMode Loop
public DirectorWrapMode None
}
public UnityEngine.Playables.PlayableDirector : Behaviour {
private Action`1<PlayableDirector> played
private Action`1<PlayableDirector> paused
private Action`1<PlayableDirector> stopped
public PlayState state
public DirectorWrapMode extrapolationMode
public PlayableAsset playableAsset
public PlayableGraph playableGraph
public bool playOnAwake
public DirectorUpdateMode timeUpdateMode
public double time
public double initialTime
public double duration
public PlayState get_state()
public void set_extrapolationMode(DirectorWrapMode value)
public DirectorWrapMode get_extrapolationMode()
public PlayableAsset get_playableAsset()
public void set_playableAsset(PlayableAsset value)
public PlayableGraph get_playableGraph()
public bool get_playOnAwake()
public void set_playOnAwake(bool value)
public void DeferredEvaluate()
public void Play(PlayableAsset asset)
public void Play(PlayableAsset asset, DirectorWrapMode mode)
public void SetGenericBinding(Object key, Object value)
public void set_timeUpdateMode(DirectorUpdateMode value)
public DirectorUpdateMode get_timeUpdateMode()
public void set_time(double value)
public double get_time()
public void set_initialTime(double value)
public double get_initialTime()
public double get_duration()
public void Evaluate()
public void Play()
public void Stop()
public void Pause()
public void Resume()
public void RebuildGraph()
public void ClearReferenceValue(PropertyName id)
public void SetReferenceValue(PropertyName id, Object value)
public Object GetReferenceValue(PropertyName id, Boolean& idValid)
public Object GetGenericBinding(Object key)
internal void ProcessPendingGraphChanges()
internal bool HasGenericBinding(Object key)
private PlayState GetPlayState()
private void SetWrapMode(DirectorWrapMode mode)
private DirectorWrapMode GetWrapMode()
private void EvaluateNextFrame()
private PlayableGraph GetGraphHandle()
private void SetPlayOnAwake(bool on)
private bool GetPlayOnAwake()
private void Internal_SetGenericBinding(Object key, Object value)
private void SetPlayableAsset(ScriptableObject asset)
private ScriptableObject Internal_GetPlayableAsset()
public void add_played(Action`1<PlayableDirector> value)
public void remove_played(Action`1<PlayableDirector> value)
public void add_paused(Action`1<PlayableDirector> value)
public void remove_paused(Action`1<PlayableDirector> value)
public void add_stopped(Action`1<PlayableDirector> value)
public void remove_stopped(Action`1<PlayableDirector> value)
private void SendOnPlayableDirectorPlay()
private void SendOnPlayableDirectorPause()
private void SendOnPlayableDirectorStop()
private void ClearReferenceValue_Injected(PropertyName& id)
private void SetReferenceValue_Injected(PropertyName& id, Object value)
private Object GetReferenceValue_Injected(PropertyName& id, Boolean& idValid)
private void GetGraphHandle_Injected(PlayableGraph& ret)
}
