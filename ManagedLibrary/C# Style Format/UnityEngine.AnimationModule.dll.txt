public UnityEngine.Animation : Behaviour {
public AnimationClip clip
public bool playAutomatically
public WrapMode wrapMode
public bool isPlaying
public AnimationState Item
public bool animatePhysics
public bool animateOnlyIfVisible
public AnimationCullingType cullingType
public Bounds localBounds
public AnimationClip get_clip()
public void set_clip(AnimationClip value)
public bool get_playAutomatically()
public void set_playAutomatically(bool value)
public WrapMode get_wrapMode()
public void set_wrapMode(WrapMode value)
public void Stop()
private void INTERNAL_CALL_Stop(Animation self)
public void Stop(string name)
private void Internal_StopByName(string name)
public void Rewind(string name)
private void Internal_RewindByName(string name)
public void Rewind()
private void INTERNAL_CALL_Rewind(Animation self)
public void Sample()
private void INTERNAL_CALL_Sample(Animation self)
public bool get_isPlaying()
public bool IsPlaying(string name)
public AnimationState get_Item(string name)
public bool Play()
public bool Play(PlayMode mode)
public bool Play(string animation, PlayMode mode)
public bool Play(string animation)
public void CrossFade(string animation, float fadeLength, PlayMode mode)
public void CrossFade(string animation, float fadeLength)
public void CrossFade(string animation)
public void Blend(string animation, float targetWeight, float fadeLength)
public void Blend(string animation, float targetWeight)
public void Blend(string animation)
public AnimationState CrossFadeQueued(string animation, float fadeLength, QueueMode queue, PlayMode mode)
public AnimationState CrossFadeQueued(string animation, float fadeLength, QueueMode queue)
public AnimationState CrossFadeQueued(string animation, float fadeLength)
public AnimationState CrossFadeQueued(string animation)
public AnimationState PlayQueued(string animation, QueueMode queue, PlayMode mode)
public AnimationState PlayQueued(string animation, QueueMode queue)
public AnimationState PlayQueued(string animation)
public void AddClip(AnimationClip clip, string newName)
public void AddClip(AnimationClip clip, string newName, int firstFrame, int lastFrame, bool addLoopFrame)
public void AddClip(AnimationClip clip, string newName, int firstFrame, int lastFrame)
public void RemoveClip(AnimationClip clip)
public void RemoveClip(string clipName)
public int GetClipCount()
private void RemoveClip2(string clipName)
private bool PlayDefaultAnimation(PlayMode mode)
public bool Play(AnimationPlayMode mode)
public bool Play(string animation, AnimationPlayMode mode)
public void SyncLayer(int layer)
private void INTERNAL_CALL_SyncLayer(Animation self, int layer)
public IEnumerator GetEnumerator()
internal AnimationState GetState(string name)
internal AnimationState GetStateAtIndex(int index)
internal int GetStateCount()
public AnimationClip GetClip(string name)
public bool get_animatePhysics()
public void set_animatePhysics(bool value)
public bool get_animateOnlyIfVisible()
public void set_animateOnlyIfVisible(bool value)
public AnimationCullingType get_cullingType()
public void set_cullingType(AnimationCullingType value)
public Bounds get_localBounds()
public void set_localBounds(Bounds value)
private void INTERNAL_get_localBounds(Bounds& value)
private void INTERNAL_set_localBounds(Bounds& value)
}
public UnityEngine.AnimationBlendMode : Enum {
public int value__
public AnimationBlendMode Blend
public AnimationBlendMode Additive
}
public UnityEngine.AnimationClip : Motion {
public AnimationEvent[] events
public float length
internal float startTime
internal float stopTime
public float frameRate
public WrapMode wrapMode
public Bounds localBounds
public bool legacy
public bool humanMotion
public bool empty
internal bool hasRootMotion
public void AddEvent(AnimationEvent evt)
internal void AddEventInternal(object evt)
public AnimationEvent[] get_events()
public void set_events(AnimationEvent[] value)
internal void SetEventsInternal(Array value)
internal Array GetEventsInternal()
private void Internal_CreateAnimationClip(AnimationClip self)
public void SampleAnimation(GameObject go, float time)
internal void SampleAnimation(GameObject go, AnimationClip clip, float inTime, WrapMode wrapMode)
public float get_length()
internal float get_startTime()
internal float get_stopTime()
public float get_frameRate()
public void set_frameRate(float value)
public void SetCurve(string relativePath, Type type, string propertyName, AnimationCurve curve)
public void EnsureQuaternionContinuity()
public void ClearCurves()
public WrapMode get_wrapMode()
public void set_wrapMode(WrapMode value)
public Bounds get_localBounds()
public void set_localBounds(Bounds value)
public bool get_legacy()
public void set_legacy(bool value)
public bool get_humanMotion()
public bool get_empty()
internal bool get_hasRootMotion()
private void get_localBounds_Injected(Bounds& ret)
private void set_localBounds_Injected(Bounds& value)
}
public UnityEngine.AnimationClipPair : object {
public AnimationClip originalClip
public AnimationClip overrideClip
}
public UnityEngine.AnimationCullingType : Enum {
public int value__
public AnimationCullingType AlwaysAnimate
public AnimationCullingType BasedOnRenderers
public AnimationCullingType BasedOnClipBounds
public AnimationCullingType BasedOnUserBounds
}
public UnityEngine.AnimationEvent : object {
internal float m_Time
internal string m_FunctionName
internal string m_StringParameter
internal Object m_ObjectReferenceParameter
internal float m_FloatParameter
internal int m_IntParameter
internal int m_MessageOptions
internal AnimationEventSource m_Source
internal AnimationState m_StateSender
internal AnimatorStateInfo m_AnimatorStateInfo
internal AnimatorClipInfo m_AnimatorClipInfo
public string data
public string stringParameter
public float floatParameter
public int intParameter
public Object objectReferenceParameter
public string functionName
public float time
public SendMessageOptions messageOptions
public bool isFiredByLegacy
public bool isFiredByAnimator
public AnimationState animationState
public AnimatorStateInfo animatorStateInfo
public AnimatorClipInfo animatorClipInfo
public string get_data()
public void set_data(string value)
public string get_stringParameter()
public void set_stringParameter(string value)
public float get_floatParameter()
public void set_floatParameter(float value)
public int get_intParameter()
public void set_intParameter(int value)
public Object get_objectReferenceParameter()
public void set_objectReferenceParameter(Object value)
public string get_functionName()
public void set_functionName(string value)
public float get_time()
public void set_time(float value)
public SendMessageOptions get_messageOptions()
public void set_messageOptions(SendMessageOptions value)
public bool get_isFiredByLegacy()
public bool get_isFiredByAnimator()
public AnimationState get_animationState()
public AnimatorStateInfo get_animatorStateInfo()
public AnimatorClipInfo get_animatorClipInfo()
internal int GetHash()
}
internal UnityEngine.AnimationEventSource : Enum {
public int value__
public AnimationEventSource NoSource
public AnimationEventSource Legacy
public AnimationEventSource Animator
}
public UnityEngine.AnimationPlayMode : Enum {
public int value__
public AnimationPlayMode Stop
public AnimationPlayMode Queue
public AnimationPlayMode Mix
}
public UnityEngine.Animations.AimConstraint : Behaviour {
public float weight
public bool constraintActive
public bool locked
public Vector3 rotationAtRest
public Vector3 rotationOffset
public Axis rotationAxis
public Vector3 aimVector
public Vector3 upVector
public Vector3 worldUpVector
public Transform worldUpObject
public WorldUpType worldUpType
public int sourceCount
private void Internal_Create(AimConstraint self)
public float get_weight()
public void set_weight(float value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public Vector3 get_rotationAtRest()
public void set_rotationAtRest(Vector3 value)
public Vector3 get_rotationOffset()
public void set_rotationOffset(Vector3 value)
public Axis get_rotationAxis()
public void set_rotationAxis(Axis value)
public Vector3 get_aimVector()
public void set_aimVector(Vector3 value)
public Vector3 get_upVector()
public void set_upVector(Vector3 value)
public Vector3 get_worldUpVector()
public void set_worldUpVector(Vector3 value)
public Transform get_worldUpObject()
public void set_worldUpObject(Transform value)
public WorldUpType get_worldUpType()
public void set_worldUpType(WorldUpType value)
public int get_sourceCount()
private int GetSourceCountInternal(AimConstraint self)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(AimConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void ValidateSourceIndex(int index)
private void get_rotationAtRest_Injected(Vector3& ret)
private void set_rotationAtRest_Injected(Vector3& value)
private void get_rotationOffset_Injected(Vector3& ret)
private void set_rotationOffset_Injected(Vector3& value)
private void get_aimVector_Injected(Vector3& ret)
private void set_aimVector_Injected(Vector3& value)
private void get_upVector_Injected(Vector3& ret)
private void set_upVector_Injected(Vector3& value)
private void get_worldUpVector_Injected(Vector3& ret)
private void set_worldUpVector_Injected(Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
public UnityEngine.Animations.AnimationClipPlayable : ValueType {
private PlayableHandle m_Handle
internal void .ctor(PlayableHandle handle)
public AnimationClipPlayable Create(PlayableGraph graph, AnimationClip clip)
private PlayableHandle CreateHandle(PlayableGraph graph, AnimationClip clip)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationClipPlayable playable)
public AnimationClipPlayable op_Explicit(Playable playable)
public bool Equals(AnimationClipPlayable other)
public AnimationClip GetAnimationClip()
public bool GetApplyFootIK()
public void SetApplyFootIK(bool value)
public bool GetApplyPlayableIK()
public void SetApplyPlayableIK(bool value)
internal bool GetRemoveStartOffset()
internal void SetRemoveStartOffset(bool value)
private bool CreateHandleInternal(PlayableGraph graph, AnimationClip clip, PlayableHandle& handle)
private AnimationClip GetAnimationClipInternal(PlayableHandle& handle)
private bool GetApplyFootIKInternal(PlayableHandle& handle)
private void SetApplyFootIKInternal(PlayableHandle& handle, bool value)
private bool GetApplyPlayableIKInternal(PlayableHandle& handle)
private void SetApplyPlayableIKInternal(PlayableHandle& handle, bool value)
private bool GetRemoveStartOffsetInternal(PlayableHandle& handle)
private void SetRemoveStartOffsetInternal(PlayableHandle& handle, bool value)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, AnimationClip clip, PlayableHandle& handle)
}
public UnityEngine.Animations.AnimationLayerMixerPlayable : ValueType {
private PlayableHandle m_Handle
private AnimationLayerMixerPlayable m_NullPlayable
public AnimationLayerMixerPlayable Null
internal void .ctor(PlayableHandle handle)
public AnimationLayerMixerPlayable get_Null()
public AnimationLayerMixerPlayable Create(PlayableGraph graph, int inputCount)
private PlayableHandle CreateHandle(PlayableGraph graph, int inputCount)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationLayerMixerPlayable playable)
public AnimationLayerMixerPlayable op_Explicit(Playable playable)
public bool Equals(AnimationLayerMixerPlayable other)
public bool IsLayerAdditive(UInt32 layerIndex)
public void SetLayerAdditive(UInt32 layerIndex, bool value)
public void SetLayerMaskFromAvatarMask(UInt32 layerIndex, AvatarMask mask)
private bool CreateHandleInternal(PlayableGraph graph, PlayableHandle& handle)
private bool IsLayerAdditiveInternal(PlayableHandle& handle, UInt32 layerIndex)
private void SetLayerAdditiveInternal(PlayableHandle& handle, UInt32 layerIndex, bool value)
private void SetLayerMaskFromAvatarMaskInternal(PlayableHandle& handle, UInt32 layerIndex, AvatarMask mask)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, PlayableHandle& handle)
}
public UnityEngine.Animations.AnimationMixerPlayable : ValueType {
private PlayableHandle m_Handle
internal void .ctor(PlayableHandle handle)
public AnimationMixerPlayable Create(PlayableGraph graph, int inputCount, bool normalizeWeights)
private PlayableHandle CreateHandle(PlayableGraph graph, int inputCount, bool normalizeWeights)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationMixerPlayable playable)
public AnimationMixerPlayable op_Explicit(Playable playable)
public bool Equals(AnimationMixerPlayable other)
private bool CreateHandleInternal(PlayableGraph graph, int inputCount, bool normalizeWeights, PlayableHandle& handle)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, int inputCount, bool normalizeWeights, PlayableHandle& handle)
}
internal UnityEngine.Animations.AnimationMotionXToDeltaPlayable : ValueType {
private PlayableHandle m_Handle
private void .ctor(PlayableHandle handle)
public AnimationMotionXToDeltaPlayable Create(PlayableGraph graph)
private PlayableHandle CreateHandle(PlayableGraph graph)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationMotionXToDeltaPlayable playable)
public AnimationMotionXToDeltaPlayable op_Explicit(Playable playable)
public bool Equals(AnimationMotionXToDeltaPlayable other)
private bool CreateHandleInternal(PlayableGraph graph, PlayableHandle& handle)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, PlayableHandle& handle)
}
internal UnityEngine.Animations.AnimationOffsetPlayable : ValueType {
private PlayableHandle m_Handle
private AnimationOffsetPlayable m_NullPlayable
public AnimationOffsetPlayable Null
internal void .ctor(PlayableHandle handle)
public AnimationOffsetPlayable get_Null()
public AnimationOffsetPlayable Create(PlayableGraph graph, Vector3 position, Quaternion rotation, int inputCount)
private PlayableHandle CreateHandle(PlayableGraph graph, Vector3 position, Quaternion rotation, int inputCount)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationOffsetPlayable playable)
public AnimationOffsetPlayable op_Explicit(Playable playable)
public bool Equals(AnimationOffsetPlayable other)
public Vector3 GetPosition()
public void SetPosition(Vector3 value)
public Quaternion GetRotation()
public void SetRotation(Quaternion value)
private bool CreateHandleInternal(PlayableGraph graph, Vector3 position, Quaternion rotation, PlayableHandle& handle)
private Vector3 GetPositionInternal(PlayableHandle& handle)
private void SetPositionInternal(PlayableHandle& handle, Vector3 value)
private Quaternion GetRotationInternal(PlayableHandle& handle)
private void SetRotationInternal(PlayableHandle& handle, Quaternion value)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, Vector3& position, Quaternion& rotation, PlayableHandle& handle)
private void GetPositionInternal_Injected(PlayableHandle& handle, Vector3& ret)
private void SetPositionInternal_Injected(PlayableHandle& handle, Vector3& value)
private void GetRotationInternal_Injected(PlayableHandle& handle, Quaternion& ret)
private void SetRotationInternal_Injected(PlayableHandle& handle, Quaternion& value)
}
public UnityEngine.Animations.AnimationPlayableExtensions : object {
public void SetAnimatedProperties(U playable, AnimationClip clip)
internal void SetAnimatedPropertiesInternal(PlayableHandle& playable, AnimationClip animatedProperties)
}
internal UnityEngine.Animations.AnimationPlayableGraphExtensions : object {
internal void SyncUpdateAndTimeMode(PlayableGraph graph, Animator animator)
internal void DestroyOutput(PlayableGraph graph, PlayableOutputHandle handle)
internal bool InternalCreateAnimationOutput(PlayableGraph& graph, string name, PlayableOutputHandle& handle)
internal void InternalSyncUpdateAndTimeMode(PlayableGraph& graph, Animator animator)
private void InternalDestroyOutput(PlayableGraph& graph, PlayableOutputHandle& handle)
private int InternalAnimationOutputCount(PlayableGraph& graph)
private bool InternalGetAnimationOutput(PlayableGraph& graph, int index, PlayableOutputHandle& handle)
}
public UnityEngine.Animations.AnimationPlayableOutput : ValueType {
private PlayableOutputHandle m_Handle
public AnimationPlayableOutput Null
internal void .ctor(PlayableOutputHandle handle)
public AnimationPlayableOutput Create(PlayableGraph graph, string name, Animator target)
public AnimationPlayableOutput get_Null()
public PlayableOutputHandle GetHandle()
public PlayableOutput op_Implicit(AnimationPlayableOutput output)
public AnimationPlayableOutput op_Explicit(PlayableOutput output)
public Animator GetTarget()
public void SetTarget(Animator value)
private Animator InternalGetTarget(PlayableOutputHandle& handle)
private void InternalSetTarget(PlayableOutputHandle& handle, Animator target)
}
public UnityEngine.Animations.AnimatorControllerPlayable : ValueType {
private PlayableHandle m_Handle
private AnimatorControllerPlayable m_NullPlayable
public AnimatorControllerPlayable Null
internal void .ctor(PlayableHandle handle)
public AnimatorControllerPlayable get_Null()
public AnimatorControllerPlayable Create(PlayableGraph graph, RuntimeAnimatorController controller)
private PlayableHandle CreateHandle(PlayableGraph graph, RuntimeAnimatorController controller)
public PlayableHandle GetHandle()
public void SetHandle(PlayableHandle handle)
public Playable op_Implicit(AnimatorControllerPlayable playable)
public AnimatorControllerPlayable op_Explicit(Playable playable)
public bool Equals(AnimatorControllerPlayable other)
public float GetFloat(string name)
public float GetFloat(int id)
public void SetFloat(string name, float value)
public void SetFloat(int id, float value)
public bool GetBool(string name)
public bool GetBool(int id)
public void SetBool(string name, bool value)
public void SetBool(int id, bool value)
public int GetInteger(string name)
public int GetInteger(int id)
public void SetInteger(string name, int value)
public void SetInteger(int id, int value)
public void SetTrigger(string name)
public void SetTrigger(int id)
public void ResetTrigger(string name)
public void ResetTrigger(int id)
public bool IsParameterControlledByCurve(string name)
public bool IsParameterControlledByCurve(int id)
public int GetLayerCount()
public string GetLayerName(int layerIndex)
public int GetLayerIndex(string layerName)
public float GetLayerWeight(int layerIndex)
public void SetLayerWeight(int layerIndex, float weight)
public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex)
public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex)
public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex)
public AnimatorClipInfo[] GetCurrentAnimatorClipInfo(int layerIndex)
public void GetCurrentAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
public void GetNextAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
private void GetAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex, bool isCurrent, object clips)
public int GetCurrentAnimatorClipInfoCount(int layerIndex)
public int GetNextAnimatorClipInfoCount(int layerIndex)
public AnimatorClipInfo[] GetNextAnimatorClipInfo(int layerIndex)
public bool IsInTransition(int layerIndex)
public int GetParameterCount()
public AnimatorControllerParameter GetParameter(int index)
public void CrossFadeInFixedTime(string stateName, float transitionDuration)
public void CrossFadeInFixedTime(string stateName, float transitionDuration, int layer)
public void CrossFadeInFixedTime(string stateName, float transitionDuration, int layer, float fixedTime)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration, int layer)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration, int layer, float fixedTime)
public void CrossFade(string stateName, float transitionDuration)
public void CrossFade(string stateName, float transitionDuration, int layer)
public void CrossFade(string stateName, float transitionDuration, int layer, float normalizedTime)
public void CrossFade(int stateNameHash, float transitionDuration)
public void CrossFade(int stateNameHash, float transitionDuration, int layer)
public void CrossFade(int stateNameHash, float transitionDuration, int layer, float normalizedTime)
public void PlayInFixedTime(string stateName)
public void PlayInFixedTime(string stateName, int layer)
public void PlayInFixedTime(string stateName, int layer, float fixedTime)
public void PlayInFixedTime(int stateNameHash)
public void PlayInFixedTime(int stateNameHash, int layer)
public void PlayInFixedTime(int stateNameHash, int layer, float fixedTime)
public void Play(string stateName)
public void Play(string stateName, int layer)
public void Play(string stateName, int layer, float normalizedTime)
public void Play(int stateNameHash)
public void Play(int stateNameHash, int layer)
public void Play(int stateNameHash, int layer, float normalizedTime)
public bool HasState(int layerIndex, int stateID)
internal string ResolveHash(int hash)
private bool CreateHandleInternal(PlayableGraph graph, RuntimeAnimatorController controller, PlayableHandle& handle)
private RuntimeAnimatorController GetAnimatorControllerInternal(PlayableHandle& handle)
private int GetLayerCountInternal(PlayableHandle& handle)
private string GetLayerNameInternal(PlayableHandle& handle, int layerIndex)
private int GetLayerIndexInternal(PlayableHandle& handle, string layerName)
private float GetLayerWeightInternal(PlayableHandle& handle, int layerIndex)
private void SetLayerWeightInternal(PlayableHandle& handle, int layerIndex, float weight)
private AnimatorStateInfo GetCurrentAnimatorStateInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorStateInfo GetNextAnimatorStateInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorTransitionInfo GetAnimatorTransitionInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorClipInfo[] GetCurrentAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex)
private int GetAnimatorClipInfoCountInternal(PlayableHandle& handle, int layerIndex, bool current)
private AnimatorClipInfo[] GetNextAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex)
private string ResolveHashInternal(PlayableHandle& handle, int hash)
private bool IsInTransitionInternal(PlayableHandle& handle, int layerIndex)
private AnimatorControllerParameter[] GetParametersArrayInternal(PlayableHandle& handle)
private int GetParameterCountInternal(PlayableHandle& handle)
private int StringToHash(string name)
private void CrossFadeInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration, int layer, float fixedTime)
private void CrossFadeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration, int layer, float normalizedTime)
private void PlayInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, int layer, float fixedTime)
private void PlayInternal(PlayableHandle& handle, int stateNameHash, int layer, float normalizedTime)
private bool HasStateInternal(PlayableHandle& handle, int layerIndex, int stateID)
private void SetFloatString(PlayableHandle& handle, string name, float value)
private void SetFloatID(PlayableHandle& handle, int id, float value)
private float GetFloatString(PlayableHandle& handle, string name)
private float GetFloatID(PlayableHandle& handle, int id)
private void SetBoolString(PlayableHandle& handle, string name, bool value)
private void SetBoolID(PlayableHandle& handle, int id, bool value)
private bool GetBoolString(PlayableHandle& handle, string name)
private bool GetBoolID(PlayableHandle& handle, int id)
private void SetIntegerString(PlayableHandle& handle, string name, int value)
private void SetIntegerID(PlayableHandle& handle, int id, int value)
private int GetIntegerString(PlayableHandle& handle, string name)
private int GetIntegerID(PlayableHandle& handle, int id)
private void SetTriggerString(PlayableHandle& handle, string name)
private void SetTriggerID(PlayableHandle& handle, int id)
private void ResetTriggerString(PlayableHandle& handle, string name)
private void ResetTriggerID(PlayableHandle& handle, int id)
private bool IsParameterControlledByCurveString(PlayableHandle& handle, string name)
private bool IsParameterControlledByCurveID(PlayableHandle& handle, int id)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, RuntimeAnimatorController controller, PlayableHandle& handle)
private void GetCurrentAnimatorStateInfoInternal_Injected(PlayableHandle& handle, int layerIndex, AnimatorStateInfo& ret)
private void GetNextAnimatorStateInfoInternal_Injected(PlayableHandle& handle, int layerIndex, AnimatorStateInfo& ret)
private void GetAnimatorTransitionInfoInternal_Injected(PlayableHandle& handle, int layerIndex, AnimatorTransitionInfo& ret)
}
public UnityEngine.Animations.Axis : Enum {
public int value__
public Axis None
public Axis X
public Axis Y
public Axis Z
}
public UnityEngine.Animations.ConstraintSource : ValueType {
private Transform m_SourceTransform
private float m_Weight
public Transform sourceTransform
public float weight
public Transform get_sourceTransform()
public void set_sourceTransform(Transform value)
public float get_weight()
public void set_weight(float value)
}
public UnityEngine.Animations.IConstraint {
public float weight
public bool constraintActive
public bool locked
public int sourceCount
public float get_weight()
public void set_weight(float value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public int get_sourceCount()
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
public ConstraintSource GetSource(int index)
public void SetSource(int index, ConstraintSource source)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
}
public UnityEngine.Animations.ParentConstraint : Behaviour {
public float weight
public bool constraintActive
public bool locked
public int sourceCount
public Vector3 translationAtRest
public Vector3 rotationAtRest
public Vector3[] translationOffsets
public Vector3[] rotationOffsets
public Axis translationAxis
public Axis rotationAxis
private void Internal_Create(ParentConstraint self)
public float get_weight()
public void set_weight(float value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public int get_sourceCount()
private int GetSourceCountInternal(ParentConstraint self)
public Vector3 get_translationAtRest()
public void set_translationAtRest(Vector3 value)
public Vector3 get_rotationAtRest()
public void set_rotationAtRest(Vector3 value)
public Vector3[] get_translationOffsets()
public void set_translationOffsets(Vector3[] value)
public Vector3[] get_rotationOffsets()
public void set_rotationOffsets(Vector3[] value)
public Axis get_translationAxis()
public void set_translationAxis(Axis value)
public Axis get_rotationAxis()
public void set_rotationAxis(Axis value)
public Vector3 GetTranslationOffset(int index)
public void SetTranslationOffset(int index, Vector3 value)
private Vector3 GetTranslationOffsetInternal(int index)
private void SetTranslationOffsetInternal(int index, Vector3 value)
public Vector3 GetRotationOffset(int index)
public void SetRotationOffset(int index, Vector3 value)
private Vector3 GetRotationOffsetInternal(int index)
private void SetRotationOffsetInternal(int index, Vector3 value)
private void ValidateSourceIndex(int index)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(ParentConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void get_translationAtRest_Injected(Vector3& ret)
private void set_translationAtRest_Injected(Vector3& value)
private void get_rotationAtRest_Injected(Vector3& ret)
private void set_rotationAtRest_Injected(Vector3& value)
private void GetTranslationOffsetInternal_Injected(int index, Vector3& ret)
private void SetTranslationOffsetInternal_Injected(int index, Vector3& value)
private void GetRotationOffsetInternal_Injected(int index, Vector3& ret)
private void SetRotationOffsetInternal_Injected(int index, Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
public UnityEngine.Animations.PositionConstraint : Behaviour {
public float weight
public Vector3 translationAtRest
public Vector3 translationOffset
public Axis translationAxis
public bool constraintActive
public bool locked
public int sourceCount
private void Internal_Create(PositionConstraint self)
public float get_weight()
public void set_weight(float value)
public Vector3 get_translationAtRest()
public void set_translationAtRest(Vector3 value)
public Vector3 get_translationOffset()
public void set_translationOffset(Vector3 value)
public Axis get_translationAxis()
public void set_translationAxis(Axis value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public int get_sourceCount()
private int GetSourceCountInternal(PositionConstraint self)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(PositionConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void ValidateSourceIndex(int index)
private void get_translationAtRest_Injected(Vector3& ret)
private void set_translationAtRest_Injected(Vector3& value)
private void get_translationOffset_Injected(Vector3& ret)
private void set_translationOffset_Injected(Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
public UnityEngine.Animations.RotationConstraint : Behaviour {
public float weight
public Vector3 rotationAtRest
public Vector3 rotationOffset
public Axis rotationAxis
public bool constraintActive
public bool locked
public int sourceCount
private void Internal_Create(RotationConstraint self)
public float get_weight()
public void set_weight(float value)
public Vector3 get_rotationAtRest()
public void set_rotationAtRest(Vector3 value)
public Vector3 get_rotationOffset()
public void set_rotationOffset(Vector3 value)
public Axis get_rotationAxis()
public void set_rotationAxis(Axis value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public int get_sourceCount()
private int GetSourceCountInternal(RotationConstraint self)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(RotationConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void ValidateSourceIndex(int index)
private void get_rotationAtRest_Injected(Vector3& ret)
private void set_rotationAtRest_Injected(Vector3& value)
private void get_rotationOffset_Injected(Vector3& ret)
private void set_rotationOffset_Injected(Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
public UnityEngine.Animations.ScaleConstraint : Behaviour {
public float weight
public Vector3 scaleAtRest
public Vector3 scaleOffset
public Axis scalingAxis
public bool constraintActive
public bool locked
public int sourceCount
private void Internal_Create(ScaleConstraint self)
public float get_weight()
public void set_weight(float value)
public Vector3 get_scaleAtRest()
public void set_scaleAtRest(Vector3 value)
public Vector3 get_scaleOffset()
public void set_scaleOffset(Vector3 value)
public Axis get_scalingAxis()
public void set_scalingAxis(Axis value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public int get_sourceCount()
private int GetSourceCountInternal(ScaleConstraint self)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(ScaleConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void ValidateSourceIndex(int index)
private void get_scaleAtRest_Injected(Vector3& ret)
private void set_scaleAtRest_Injected(Vector3& value)
private void get_scaleOffset_Injected(Vector3& ret)
private void set_scaleOffset_Injected(Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
public UnityEngine.AnimationState : TrackedReference {
public bool enabled
public float weight
public WrapMode wrapMode
public float time
public float normalizedTime
public float speed
public float normalizedSpeed
public float length
public int layer
public AnimationClip clip
public string name
public AnimationBlendMode blendMode
public bool get_enabled()
public void set_enabled(bool value)
public float get_weight()
public void set_weight(float value)
public WrapMode get_wrapMode()
public void set_wrapMode(WrapMode value)
public float get_time()
public void set_time(float value)
public float get_normalizedTime()
public void set_normalizedTime(float value)
public float get_speed()
public void set_speed(float value)
public float get_normalizedSpeed()
public void set_normalizedSpeed(float value)
public float get_length()
public int get_layer()
public void set_layer(int value)
public AnimationClip get_clip()
public void AddMixingTransform(Transform mix, bool recursive)
public void AddMixingTransform(Transform mix)
public void RemoveMixingTransform(Transform mix)
public string get_name()
public void set_name(string value)
public AnimationBlendMode get_blendMode()
public void set_blendMode(AnimationBlendMode value)
}
public UnityEngine.Animator : Behaviour {
public bool isOptimizable
public bool isHuman
public bool hasRootMotion
internal bool isRootPositionOrRotationControlledByCurves
public float humanScale
public bool isInitialized
public Vector3 deltaPosition
public Quaternion deltaRotation
public Vector3 velocity
public Vector3 angularVelocity
public Vector3 rootPosition
public Quaternion rootRotation
public bool applyRootMotion
public bool linearVelocityBlending
public bool animatePhysics
public AnimatorUpdateMode updateMode
public bool hasTransformHierarchy
internal bool allowConstantClipSamplingOptimization
public float gravityWeight
public Vector3 bodyPosition
internal Vector3 bodyPositionInternal
public Quaternion bodyRotation
internal Quaternion bodyRotationInternal
public bool stabilizeFeet
public int layerCount
public AnimatorControllerParameter[] parameters
public int parameterCount
public float feetPivotActive
public float pivotWeight
public Vector3 pivotPosition
public bool isMatchingTarget
public float speed
public Vector3 targetPosition
public Quaternion targetRotation
internal Transform avatarRoot
public AnimatorCullingMode cullingMode
public float playbackTime
public float recorderStartTime
public float recorderStopTime
public AnimatorRecorderMode recorderMode
public RuntimeAnimatorController runtimeAnimatorController
public bool hasBoundPlayables
public Avatar avatar
public PlayableGraph playableGraph
public bool layersAffectMassCenter
public float leftFeetBottomHeight
public float rightFeetBottomHeight
internal bool supportsOnAnimatorMove
public bool logWarnings
public bool fireEvents
public bool keepAnimatorControllerStateOnDisable
public bool get_isOptimizable()
public bool get_isHuman()
public bool get_hasRootMotion()
internal bool get_isRootPositionOrRotationControlledByCurves()
public float get_humanScale()
public bool get_isInitialized()
public float GetFloat(string name)
public float GetFloat(int id)
public void SetFloat(string name, float value)
public void SetFloat(string name, float value, float dampTime, float deltaTime)
public void SetFloat(int id, float value)
public void SetFloat(int id, float value, float dampTime, float deltaTime)
public bool GetBool(string name)
public bool GetBool(int id)
public void SetBool(string name, bool value)
public void SetBool(int id, bool value)
public int GetInteger(string name)
public int GetInteger(int id)
public void SetInteger(string name, int value)
public void SetInteger(int id, int value)
public void SetTrigger(string name)
public void SetTrigger(int id)
public void ResetTrigger(string name)
public void ResetTrigger(int id)
public bool IsParameterControlledByCurve(string name)
public bool IsParameterControlledByCurve(int id)
public Vector3 get_deltaPosition()
public Quaternion get_deltaRotation()
public Vector3 get_velocity()
public Vector3 get_angularVelocity()
public Vector3 get_rootPosition()
public void set_rootPosition(Vector3 value)
public Quaternion get_rootRotation()
public void set_rootRotation(Quaternion value)
public bool get_applyRootMotion()
public void set_applyRootMotion(bool value)
public bool get_linearVelocityBlending()
public void set_linearVelocityBlending(bool value)
public bool get_animatePhysics()
public void set_animatePhysics(bool value)
public AnimatorUpdateMode get_updateMode()
public void set_updateMode(AnimatorUpdateMode value)
public bool get_hasTransformHierarchy()
internal bool get_allowConstantClipSamplingOptimization()
internal void set_allowConstantClipSamplingOptimization(bool value)
public float get_gravityWeight()
public Vector3 get_bodyPosition()
public void set_bodyPosition(Vector3 value)
internal Vector3 get_bodyPositionInternal()
internal void set_bodyPositionInternal(Vector3 value)
public Quaternion get_bodyRotation()
public void set_bodyRotation(Quaternion value)
internal Quaternion get_bodyRotationInternal()
internal void set_bodyRotationInternal(Quaternion value)
public Vector3 GetIKPosition(AvatarIKGoal goal)
private Vector3 GetGoalPosition(AvatarIKGoal goal)
public void SetIKPosition(AvatarIKGoal goal, Vector3 goalPosition)
private void SetGoalPosition(AvatarIKGoal goal, Vector3 goalPosition)
public Quaternion GetIKRotation(AvatarIKGoal goal)
private Quaternion GetGoalRotation(AvatarIKGoal goal)
public void SetIKRotation(AvatarIKGoal goal, Quaternion goalRotation)
private void SetGoalRotation(AvatarIKGoal goal, Quaternion goalRotation)
public float GetIKPositionWeight(AvatarIKGoal goal)
private float GetGoalWeightPosition(AvatarIKGoal goal)
public void SetIKPositionWeight(AvatarIKGoal goal, float value)
private void SetGoalWeightPosition(AvatarIKGoal goal, float value)
public float GetIKRotationWeight(AvatarIKGoal goal)
private float GetGoalWeightRotation(AvatarIKGoal goal)
public void SetIKRotationWeight(AvatarIKGoal goal, float value)
private void SetGoalWeightRotation(AvatarIKGoal goal, float value)
public Vector3 GetIKHintPosition(AvatarIKHint hint)
private Vector3 GetHintPosition(AvatarIKHint hint)
public void SetIKHintPosition(AvatarIKHint hint, Vector3 hintPosition)
private void SetHintPosition(AvatarIKHint hint, Vector3 hintPosition)
public float GetIKHintPositionWeight(AvatarIKHint hint)
private float GetHintWeightPosition(AvatarIKHint hint)
public void SetIKHintPositionWeight(AvatarIKHint hint, float value)
private void SetHintWeightPosition(AvatarIKHint hint, float value)
public void SetLookAtPosition(Vector3 lookAtPosition)
private void SetLookAtPositionInternal(Vector3 lookAtPosition)
public void SetLookAtWeight(float weight)
public void SetLookAtWeight(float weight, float bodyWeight)
public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
private void SetLookAtWeightInternal(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
public void SetBoneLocalRotation(HumanBodyBones humanBoneId, Quaternion rotation)
private void SetBoneLocalRotationInternal(int humanBoneId, Quaternion rotation)
private ScriptableObject GetBehaviour(Type type)
public T GetBehaviour()
private T[] ConvertStateMachineBehaviour(ScriptableObject[] rawObjects)
public T[] GetBehaviours()
internal ScriptableObject[] InternalGetBehaviours(Type type)
public StateMachineBehaviour[] GetBehaviours(int fullPathHash, int layerIndex)
internal ScriptableObject[] InternalGetBehavioursByKey(int fullPathHash, int layerIndex, Type type)
public bool get_stabilizeFeet()
public void set_stabilizeFeet(bool value)
public int get_layerCount()
public string GetLayerName(int layerIndex)
public int GetLayerIndex(string layerName)
public float GetLayerWeight(int layerIndex)
public void SetLayerWeight(int layerIndex, float weight)
private void GetAnimatorStateInfo(int layerIndex, StateInfoIndex stateInfoIndex, AnimatorStateInfo& info)
public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex)
public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex)
private void GetAnimatorTransitionInfo(int layerIndex, AnimatorTransitionInfo& info)
public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex)
internal int GetAnimatorClipInfoCount(int layerIndex, bool current)
public int GetCurrentAnimatorClipInfoCount(int layerIndex)
public int GetNextAnimatorClipInfoCount(int layerIndex)
public AnimatorClipInfo[] GetCurrentAnimatorClipInfo(int layerIndex)
public AnimatorClipInfo[] GetNextAnimatorClipInfo(int layerIndex)
public void GetCurrentAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
private void GetAnimatorClipInfoInternal(int layerIndex, bool isCurrent, object clips)
private AnimatorClipInfo[] GetAnimatorClipInfoInternalWinRT(int layerIndex, bool isCurrent)
public void GetNextAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
public bool IsInTransition(int layerIndex)
public AnimatorControllerParameter[] get_parameters()
public int get_parameterCount()
public AnimatorControllerParameter GetParameter(int index)
public float get_feetPivotActive()
public void set_feetPivotActive(float value)
public float get_pivotWeight()
public Vector3 get_pivotPosition()
private void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, int targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime)
public void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, AvatarTarget targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime)
public void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, AvatarTarget targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime)
public void InterruptMatchTarget()
public void InterruptMatchTarget(bool completeMatch)
public bool get_isMatchingTarget()
public float get_speed()
public void set_speed(float value)
public void ForceStateNormalizedTime(float normalizedTime)
public void CrossFadeInFixedTime(string stateName, float fixedTransitionDuration)
public void CrossFadeInFixedTime(string stateName, float fixedTransitionDuration, int layer)
public void CrossFadeInFixedTime(string stateName, float fixedTransitionDuration, int layer, float fixedTimeOffset)
public void CrossFadeInFixedTime(string stateName, float fixedTransitionDuration, int layer, float fixedTimeOffset, float normalizedTransitionTime)
public void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration, int layer, float fixedTimeOffset)
public void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration, int layer)
public void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration)
public void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration, int layer, float fixedTimeOffset, float normalizedTransitionTime)
public void CrossFade(string stateName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset)
public void CrossFade(string stateName, float normalizedTransitionDuration, int layer)
public void CrossFade(string stateName, float normalizedTransitionDuration)
public void CrossFade(string stateName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset, float normalizedTransitionTime)
public void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset, float normalizedTransitionTime)
public void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset)
public void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer)
public void CrossFade(int stateHashName, float normalizedTransitionDuration)
public void PlayInFixedTime(string stateName, int layer)
public void PlayInFixedTime(string stateName)
public void PlayInFixedTime(string stateName, int layer, float fixedTime)
public void PlayInFixedTime(int stateNameHash, int layer, float fixedTime)
public void PlayInFixedTime(int stateNameHash, int layer)
public void PlayInFixedTime(int stateNameHash)
public void Play(string stateName, int layer)
public void Play(string stateName)
public void Play(string stateName, int layer, float normalizedTime)
public void Play(int stateNameHash, int layer, float normalizedTime)
public void Play(int stateNameHash, int layer)
public void Play(int stateNameHash)
public void SetTarget(AvatarTarget targetIndex, float targetNormalizedTime)
public Vector3 get_targetPosition()
public Quaternion get_targetRotation()
public bool IsControlled(Transform transform)
internal bool IsBoneTransform(Transform transform)
internal Transform get_avatarRoot()
public Transform GetBoneTransform(HumanBodyBones humanBoneId)
internal Transform GetBoneTransformInternal(int humanBoneId)
public AnimatorCullingMode get_cullingMode()
public void set_cullingMode(AnimatorCullingMode value)
public void StartPlayback()
public void StopPlayback()
public float get_playbackTime()
public void set_playbackTime(float value)
public void StartRecording(int frameCount)
public void StopRecording()
public float get_recorderStartTime()
public void set_recorderStartTime(float value)
private float GetRecorderStartTime()
public float get_recorderStopTime()
public void set_recorderStopTime(float value)
private float GetRecorderStopTime()
public AnimatorRecorderMode get_recorderMode()
public RuntimeAnimatorController get_runtimeAnimatorController()
public void set_runtimeAnimatorController(RuntimeAnimatorController value)
public bool get_hasBoundPlayables()
internal void ClearInternalControllerPlayable()
public bool HasState(int layerIndex, int stateID)
public int StringToHash(string name)
public Avatar get_avatar()
public void set_avatar(Avatar value)
internal string GetStats()
public PlayableGraph get_playableGraph()
private void GetCurrentGraph(PlayableGraph& graph)
private void CheckIfInIKPass()
private bool IsInIKPass()
private void SetFloatString(string name, float value)
private void SetFloatID(int id, float value)
private float GetFloatString(string name)
private float GetFloatID(int id)
private void SetBoolString(string name, bool value)
private void SetBoolID(int id, bool value)
private bool GetBoolString(string name)
private bool GetBoolID(int id)
private void SetIntegerString(string name, int value)
private void SetIntegerID(int id, int value)
private int GetIntegerString(string name)
private int GetIntegerID(int id)
private void SetTriggerString(string name)
private void SetTriggerID(int id)
private void ResetTriggerString(string name)
private void ResetTriggerID(int id)
private bool IsParameterControlledByCurveString(string name)
private bool IsParameterControlledByCurveID(int id)
private void SetFloatStringDamp(string name, float value, float dampTime, float deltaTime)
private void SetFloatIDDamp(int id, float value, float dampTime, float deltaTime)
public bool get_layersAffectMassCenter()
public void set_layersAffectMassCenter(bool value)
public float get_leftFeetBottomHeight()
public float get_rightFeetBottomHeight()
internal bool get_supportsOnAnimatorMove()
internal void OnUpdateModeChanged()
internal void OnCullingModeChanged()
internal void WriteDefaultPose()
public void Update(float deltaTime)
public void Rebind()
private void Rebind(bool writeDefaultValues)
public void ApplyBuiltinRootMotion()
internal void EvaluateController()
private void EvaluateController(float deltaTime)
internal string GetCurrentStateName(int layerIndex)
internal string GetNextStateName(int layerIndex)
private string GetAnimatorStateName(int layerIndex, bool current)
internal string ResolveHash(int hash)
public bool get_logWarnings()
public void set_logWarnings(bool value)
public bool get_fireEvents()
public void set_fireEvents(bool value)
public bool get_keepAnimatorControllerStateOnDisable()
public void set_keepAnimatorControllerStateOnDisable(bool value)
public Vector3 GetVector(string name)
public Vector3 GetVector(int id)
public void SetVector(string name, Vector3 value)
public void SetVector(int id, Vector3 value)
public Quaternion GetQuaternion(string name)
public Quaternion GetQuaternion(int id)
public void SetQuaternion(string name, Quaternion value)
public void SetQuaternion(int id, Quaternion value)
private void get_deltaPosition_Injected(Vector3& ret)
private void get_deltaRotation_Injected(Quaternion& ret)
private void get_velocity_Injected(Vector3& ret)
private void get_angularVelocity_Injected(Vector3& ret)
private void get_rootPosition_Injected(Vector3& ret)
private void set_rootPosition_Injected(Vector3& value)
private void get_rootRotation_Injected(Quaternion& ret)
private void set_rootRotation_Injected(Quaternion& value)
private void get_bodyPositionInternal_Injected(Vector3& ret)
private void set_bodyPositionInternal_Injected(Vector3& value)
private void get_bodyRotationInternal_Injected(Quaternion& ret)
private void set_bodyRotationInternal_Injected(Quaternion& value)
private void GetGoalPosition_Injected(AvatarIKGoal goal, Vector3& ret)
private void SetGoalPosition_Injected(AvatarIKGoal goal, Vector3& goalPosition)
private void GetGoalRotation_Injected(AvatarIKGoal goal, Quaternion& ret)
private void SetGoalRotation_Injected(AvatarIKGoal goal, Quaternion& goalRotation)
private void GetHintPosition_Injected(AvatarIKHint hint, Vector3& ret)
private void SetHintPosition_Injected(AvatarIKHint hint, Vector3& hintPosition)
private void SetLookAtPositionInternal_Injected(Vector3& lookAtPosition)
private void SetBoneLocalRotationInternal_Injected(int humanBoneId, Quaternion& rotation)
private void get_pivotPosition_Injected(Vector3& ret)
private void MatchTarget_Injected(Vector3& matchPosition, Quaternion& matchRotation, int targetBodyPart, MatchTargetWeightMask& weightMask, float startNormalizedTime, float targetNormalizedTime)
private void get_targetPosition_Injected(Vector3& ret)
private void get_targetRotation_Injected(Quaternion& ret)
}
public UnityEngine.AnimatorClipInfo : ValueType {
private int m_ClipInstanceID
private float m_Weight
public AnimationClip clip
public float weight
public AnimationClip get_clip()
public float get_weight()
private AnimationClip InstanceIDToAnimationClipPPtr(int instanceID)
}
public UnityEngine.AnimatorControllerParameter : object {
internal string m_Name
internal AnimatorControllerParameterType m_Type
internal float m_DefaultFloat
internal int m_DefaultInt
internal bool m_DefaultBool
public string name
public int nameHash
public AnimatorControllerParameterType type
public float defaultFloat
public int defaultInt
public bool defaultBool
public string get_name()
public int get_nameHash()
public AnimatorControllerParameterType get_type()
public void set_type(AnimatorControllerParameterType value)
public float get_defaultFloat()
public void set_defaultFloat(float value)
public int get_defaultInt()
public void set_defaultInt(int value)
public bool get_defaultBool()
public void set_defaultBool(bool value)
public bool Equals(object o)
public int GetHashCode()
}
public UnityEngine.AnimatorControllerParameterType : Enum {
public int value__
public AnimatorControllerParameterType Float
public AnimatorControllerParameterType Int
public AnimatorControllerParameterType Bool
public AnimatorControllerParameterType Trigger
}
public UnityEngine.AnimatorCullingMode : Enum {
public int value__
public AnimatorCullingMode AlwaysAnimate
public AnimatorCullingMode CullUpdateTransforms
public AnimatorCullingMode CullCompletely
}
public UnityEngine.AnimatorOverrideController : RuntimeAnimatorController {
internal OnOverrideControllerDirtyCallback OnOverrideControllerDirty
public RuntimeAnimatorController runtimeAnimatorController
public AnimationClip Item
public AnimationClip Item
public int overridesCount
public AnimationClipPair[] clips
public void .ctor(RuntimeAnimatorController controller)
private void Internal_Create(AnimatorOverrideController self, RuntimeAnimatorController controller)
public RuntimeAnimatorController get_runtimeAnimatorController()
public void set_runtimeAnimatorController(RuntimeAnimatorController value)
public AnimationClip get_Item(string name)
public void set_Item(string name, AnimationClip value)
private AnimationClip Internal_GetClipByName(string name, bool returnEffectiveClip)
private void Internal_SetClipByName(string name, AnimationClip clip)
public AnimationClip get_Item(AnimationClip clip)
public void set_Item(AnimationClip clip, AnimationClip value)
private AnimationClip GetClip(AnimationClip originalClip, bool returnEffectiveClip)
private void SetClip(AnimationClip originalClip, AnimationClip overrideClip, bool notify)
private void SendNotification()
private AnimationClip GetOriginalClip(int index)
private AnimationClip GetOverrideClip(AnimationClip originalClip)
public int get_overridesCount()
public void GetOverrides(List`1<KeyValuePair`2<AnimationClip, AnimationClip>> overrides)
public void ApplyOverrides(IList`1<KeyValuePair`2<AnimationClip, AnimationClip>> overrides)
public AnimationClipPair[] get_clips()
public void set_clips(AnimationClipPair[] value)
internal void PerformOverrideClipListCleanup()
internal void OnInvalidateOverrideController(AnimatorOverrideController controller)
}
public UnityEngine.AnimatorRecorderMode : Enum {
public int value__
public AnimatorRecorderMode Offline
public AnimatorRecorderMode Playback
public AnimatorRecorderMode Record
}
public UnityEngine.AnimatorStateInfo : ValueType {
private int m_Name
private int m_Path
private int m_FullPath
private float m_NormalizedTime
private float m_Length
private float m_Speed
private float m_SpeedMultiplier
private int m_Tag
private int m_Loop
public int fullPathHash
public int nameHash
public int shortNameHash
public float normalizedTime
public float length
public float speed
public float speedMultiplier
public int tagHash
public bool loop
public bool IsName(string name)
public int get_fullPathHash()
public int get_nameHash()
public int get_shortNameHash()
public float get_normalizedTime()
public float get_length()
public float get_speed()
public float get_speedMultiplier()
public int get_tagHash()
public bool IsTag(string tag)
public bool get_loop()
}
public UnityEngine.AnimatorTransitionInfo : ValueType {
private int m_FullPath
private int m_UserName
private int m_Name
private bool m_HasFixedDuration
private float m_Duration
private float m_NormalizedTime
private bool m_AnyState
private int m_TransitionType
public int fullPathHash
public int nameHash
public int userNameHash
public DurationUnit durationUnit
public float duration
public float normalizedTime
public bool anyState
internal bool entry
internal bool exit
public bool IsName(string name)
public bool IsUserName(string name)
public int get_fullPathHash()
public int get_nameHash()
public int get_userNameHash()
public DurationUnit get_durationUnit()
public float get_duration()
public float get_normalizedTime()
public bool get_anyState()
internal bool get_entry()
internal bool get_exit()
}
public UnityEngine.AnimatorUpdateMode : Enum {
public int value__
public AnimatorUpdateMode Normal
public AnimatorUpdateMode AnimatePhysics
public AnimatorUpdateMode UnscaledTime
}
public UnityEngine.AnimatorUtility : object {
public void OptimizeTransformHierarchy(GameObject go, String[] exposedTransforms)
public void DeoptimizeTransformHierarchy(GameObject go)
}
internal UnityEngine.ArmDoF : Enum {
public int value__
public ArmDoF ShoulderDownUp
public ArmDoF ShoulderFrontBack
public ArmDoF ArmDownUp
public ArmDoF ArmFrontBack
public ArmDoF ArmRollInOut
public ArmDoF ForeArmCloseOpen
public ArmDoF ForeArmRollInOut
public ArmDoF HandDownUp
public ArmDoF HandInOut
public ArmDoF LastArmDoF
}
public UnityEngine.Avatar : Object {
public bool isValid
public bool isHuman
public bool get_isValid()
public bool get_isHuman()
internal void SetMuscleMinMax(int muscleId, float min, float max)
internal void SetParameter(int parameterId, float value)
internal float GetAxisLength(int humanId)
internal Quaternion GetPreRotation(int humanId)
internal Quaternion GetPostRotation(int humanId)
internal Quaternion GetZYPostQ(int humanId, Quaternion parentQ, Quaternion q)
internal Quaternion GetZYRoll(int humanId, Vector3 uvw)
internal Vector3 GetLimitSign(int humanId)
internal float Internal_GetAxisLength(int humanId)
internal Quaternion Internal_GetPreRotation(int humanId)
internal Quaternion Internal_GetPostRotation(int humanId)
internal Quaternion Internal_GetZYPostQ(int humanId, Quaternion parentQ, Quaternion q)
internal Quaternion Internal_GetZYRoll(int humanId, Vector3 uvw)
internal Vector3 Internal_GetLimitSign(int humanId)
private void Internal_GetPreRotation_Injected(int humanId, Quaternion& ret)
private void Internal_GetPostRotation_Injected(int humanId, Quaternion& ret)
private void Internal_GetZYPostQ_Injected(int humanId, Quaternion& parentQ, Quaternion& q, Quaternion& ret)
private void Internal_GetZYRoll_Injected(int humanId, Vector3& uvw, Quaternion& ret)
private void Internal_GetLimitSign_Injected(int humanId, Vector3& ret)
}
public UnityEngine.AvatarBuilder : object {
public Avatar BuildHumanAvatar(GameObject go, HumanDescription humanDescription)
private Avatar BuildHumanAvatarInternal(GameObject go, HumanDescription humanDescription)
public Avatar BuildGenericAvatar(GameObject go, string rootMotionTransformName)
private Avatar BuildHumanAvatarInternal_Injected(GameObject go, HumanDescription& humanDescription)
}
public UnityEngine.AvatarIKGoal : Enum {
public int value__
public AvatarIKGoal LeftFoot
public AvatarIKGoal RightFoot
public AvatarIKGoal LeftHand
public AvatarIKGoal RightHand
}
public UnityEngine.AvatarIKHint : Enum {
public int value__
public AvatarIKHint LeftKnee
public AvatarIKHint RightKnee
public AvatarIKHint LeftElbow
public AvatarIKHint RightElbow
}
public UnityEngine.AvatarMask : Object {
public int humanoidBodyPartCount
public int transformCount
internal bool hasFeetIK
private void Internal_Create(AvatarMask self)
public int get_humanoidBodyPartCount()
public bool GetHumanoidBodyPartActive(AvatarMaskBodyPart index)
public void SetHumanoidBodyPartActive(AvatarMaskBodyPart index, bool value)
public int get_transformCount()
public void set_transformCount(int value)
public void AddTransformPath(Transform transform)
public void AddTransformPath(Transform transform, bool recursive)
public void RemoveTransformPath(Transform transform)
public void RemoveTransformPath(Transform transform, bool recursive)
public string GetTransformPath(int index)
public void SetTransformPath(int index, string path)
private float GetTransformWeight(int index)
private void SetTransformWeight(int index, float weight)
public bool GetTransformActive(int index)
public void SetTransformActive(int index, bool value)
internal bool get_hasFeetIK()
internal void Copy(AvatarMask other)
}
public UnityEngine.AvatarMaskBodyPart : Enum {
public int value__
public AvatarMaskBodyPart Root
public AvatarMaskBodyPart Body
public AvatarMaskBodyPart Head
public AvatarMaskBodyPart LeftLeg
public AvatarMaskBodyPart RightLeg
public AvatarMaskBodyPart LeftArm
public AvatarMaskBodyPart RightArm
public AvatarMaskBodyPart LeftFingers
public AvatarMaskBodyPart RightFingers
public AvatarMaskBodyPart LeftFootIK
public AvatarMaskBodyPart RightFootIK
public AvatarMaskBodyPart LeftHandIK
public AvatarMaskBodyPart RightHandIK
public AvatarMaskBodyPart LastBodyPart
}
public UnityEngine.AvatarTarget : Enum {
public int value__
public AvatarTarget Root
public AvatarTarget Body
public AvatarTarget LeftFoot
public AvatarTarget RightFoot
public AvatarTarget LeftHand
public AvatarTarget RightHand
}
internal UnityEngine.BodyDoF : Enum {
public int value__
public BodyDoF SpineFrontBack
public BodyDoF SpineLeftRight
public BodyDoF SpineRollLeftRight
public BodyDoF ChestFrontBack
public BodyDoF ChestLeftRight
public BodyDoF ChestRollLeftRight
public BodyDoF UpperChestFrontBack
public BodyDoF UpperChestLeftRight
public BodyDoF UpperChestRollLeftRight
public BodyDoF LastBodyDoF
}
internal UnityEngine.DoF : Enum {
public int value__
public DoF BodyDoFStart
public DoF HeadDoFStart
public DoF LeftLegDoFStart
public DoF RightLegDoFStart
public DoF LeftArmDoFStart
public DoF RightArmDoFStart
public DoF LeftThumbDoFStart
public DoF LeftIndexDoFStart
public DoF LeftMiddleDoFStart
public DoF LeftRingDoFStart
public DoF LeftLittleDoFStart
public DoF RightThumbDoFStart
public DoF RightIndexDoFStart
public DoF RightMiddleDoFStart
public DoF RightRingDoFStart
public DoF RightLittleDoFStart
public DoF LastDoF
}
public UnityEngine.DurationUnit : Enum {
public int value__
public DurationUnit Fixed
public DurationUnit Normalized
}
internal UnityEngine.FingerDoF : Enum {
public int value__
public FingerDoF ProximalDownUp
public FingerDoF ProximalInOut
public FingerDoF IntermediateCloseOpen
public FingerDoF DistalCloseOpen
public FingerDoF LastFingerDoF
}
internal UnityEngine.HeadDoF : Enum {
public int value__
public HeadDoF NeckFrontBack
public HeadDoF NeckLeftRight
public HeadDoF NeckRollLeftRight
public HeadDoF HeadFrontBack
public HeadDoF HeadLeftRight
public HeadDoF HeadRollLeftRight
public HeadDoF LeftEyeDownUp
public HeadDoF LeftEyeInOut
public HeadDoF RightEyeDownUp
public HeadDoF RightEyeInOut
public HeadDoF JawDownUp
public HeadDoF JawLeftRight
public HeadDoF LastHeadDoF
}
public UnityEngine.HumanBodyBones : Enum {
public int value__
public HumanBodyBones Hips
public HumanBodyBones LeftUpperLeg
public HumanBodyBones RightUpperLeg
public HumanBodyBones LeftLowerLeg
public HumanBodyBones RightLowerLeg
public HumanBodyBones LeftFoot
public HumanBodyBones RightFoot
public HumanBodyBones Spine
public HumanBodyBones Chest
public HumanBodyBones UpperChest
public HumanBodyBones Neck
public HumanBodyBones Head
public HumanBodyBones LeftShoulder
public HumanBodyBones RightShoulder
public HumanBodyBones LeftUpperArm
public HumanBodyBones RightUpperArm
public HumanBodyBones LeftLowerArm
public HumanBodyBones RightLowerArm
public HumanBodyBones LeftHand
public HumanBodyBones RightHand
public HumanBodyBones LeftToes
public HumanBodyBones RightToes
public HumanBodyBones LeftEye
public HumanBodyBones RightEye
public HumanBodyBones Jaw
public HumanBodyBones LeftThumbProximal
public HumanBodyBones LeftThumbIntermediate
public HumanBodyBones LeftThumbDistal
public HumanBodyBones LeftIndexProximal
public HumanBodyBones LeftIndexIntermediate
public HumanBodyBones LeftIndexDistal
public HumanBodyBones LeftMiddleProximal
public HumanBodyBones LeftMiddleIntermediate
public HumanBodyBones LeftMiddleDistal
public HumanBodyBones LeftRingProximal
public HumanBodyBones LeftRingIntermediate
public HumanBodyBones LeftRingDistal
public HumanBodyBones LeftLittleProximal
public HumanBodyBones LeftLittleIntermediate
public HumanBodyBones LeftLittleDistal
public HumanBodyBones RightThumbProximal
public HumanBodyBones RightThumbIntermediate
public HumanBodyBones RightThumbDistal
public HumanBodyBones RightIndexProximal
public HumanBodyBones RightIndexIntermediate
public HumanBodyBones RightIndexDistal
public HumanBodyBones RightMiddleProximal
public HumanBodyBones RightMiddleIntermediate
public HumanBodyBones RightMiddleDistal
public HumanBodyBones RightRingProximal
public HumanBodyBones RightRingIntermediate
public HumanBodyBones RightRingDistal
public HumanBodyBones RightLittleProximal
public HumanBodyBones RightLittleIntermediate
public HumanBodyBones RightLittleDistal
public HumanBodyBones LastBone
}
public UnityEngine.HumanBone : ValueType {
private string m_BoneName
private string m_HumanName
public HumanLimit limit
public string boneName
public string humanName
public string get_boneName()
public void set_boneName(string value)
public string get_humanName()
public void set_humanName(string value)
}
public UnityEngine.HumanDescription : ValueType {
public HumanBone[] human
public SkeletonBone[] skeleton
internal float m_ArmTwist
internal float m_ForeArmTwist
internal float m_UpperLegTwist
internal float m_LegTwist
internal float m_ArmStretch
internal float m_LegStretch
internal float m_FeetSpacing
internal string m_RootMotionBoneName
internal Quaternion m_RootMotionBoneRotation
internal bool m_HasTranslationDoF
internal bool m_HasExtraRoot
internal bool m_SkeletonHasParents
public float upperArmTwist
public float lowerArmTwist
public float upperLegTwist
public float lowerLegTwist
public float armStretch
public float legStretch
public float feetSpacing
public bool hasTranslationDoF
public float get_upperArmTwist()
public void set_upperArmTwist(float value)
public float get_lowerArmTwist()
public void set_lowerArmTwist(float value)
public float get_upperLegTwist()
public void set_upperLegTwist(float value)
public float get_lowerLegTwist()
public void set_lowerLegTwist(float value)
public float get_armStretch()
public void set_armStretch(float value)
public float get_legStretch()
public void set_legStretch(float value)
public float get_feetSpacing()
public void set_feetSpacing(float value)
public bool get_hasTranslationDoF()
public void set_hasTranslationDoF(bool value)
}
public UnityEngine.HumanLimit : ValueType {
private Vector3 m_Min
private Vector3 m_Max
private Vector3 m_Center
private float m_AxisLength
private int m_UseDefaultValues
public bool useDefaultValues
public Vector3 min
public Vector3 max
public Vector3 center
public float axisLength
public bool get_useDefaultValues()
public void set_useDefaultValues(bool value)
public Vector3 get_min()
public void set_min(Vector3 value)
public Vector3 get_max()
public void set_max(Vector3 value)
public Vector3 get_center()
public void set_center(Vector3 value)
public float get_axisLength()
public void set_axisLength(float value)
}
internal UnityEngine.HumanParameter : Enum {
public int value__
public HumanParameter UpperArmTwist
public HumanParameter LowerArmTwist
public HumanParameter UpperLegTwist
public HumanParameter LowerLegTwist
public HumanParameter ArmStretch
public HumanParameter LegStretch
public HumanParameter FeetSpacing
}
public UnityEngine.HumanPose : ValueType {
public Vector3 bodyPosition
public Quaternion bodyRotation
public Single[] muscles
internal void Init()
}
public UnityEngine.HumanPoseHandler : object {
internal IntPtr m_Ptr
public void .ctor(Avatar avatar, Transform root)
private IntPtr Internal_Create(Avatar avatar, Transform root)
private void Internal_Destroy(IntPtr ptr)
private void GetHumanPose(Vector3& bodyPosition, Quaternion& bodyRotation, Single[] muscles)
private void SetHumanPose(Vector3& bodyPosition, Quaternion& bodyRotation, Single[] muscles)
public void Dispose()
public void GetHumanPose(HumanPose& humanPose)
public void SetHumanPose(HumanPose& humanPose)
}
public UnityEngine.HumanTrait : object {
public int MuscleCount
public String[] MuscleName
public int BoneCount
public String[] BoneName
public int RequiredBoneCount
public int get_MuscleCount()
internal int GetBoneIndexFromMono(int humanId)
internal int GetBoneIndexToMono(int boneIndex)
public String[] get_MuscleName()
public int get_BoneCount()
public String[] get_BoneName()
public int MuscleFromBone(int i, int dofIndex)
private int Internal_MuscleFromBone(int i, int dofIndex)
public int BoneFromMuscle(int i)
private int Internal_BoneFromMuscle(int i)
public bool RequiredBone(int i)
private bool Internal_RequiredBone(int i)
public int get_RequiredBoneCount()
internal bool HasCollider(Avatar avatar, int i)
private bool Internal_HasCollider(Avatar avatar, int i)
public float GetMuscleDefaultMin(int i)
public float GetMuscleDefaultMax(int i)
public int GetParentBone(int i)
private int Internal_GetParent(int i)
}
internal UnityEngine.LegDoF : Enum {
public int value__
public LegDoF UpperLegFrontBack
public LegDoF UpperLegInOut
public LegDoF UpperLegRollInOut
public LegDoF LegCloseOpen
public LegDoF LegRollInOut
public LegDoF FootCloseOpen
public LegDoF FootInOut
public LegDoF ToesUpDown
public LegDoF LastLegDoF
}
public UnityEngine.MatchTargetWeightMask : ValueType {
private Vector3 m_PositionXYZWeight
private float m_RotationWeight
public Vector3 positionXYZWeight
public float rotationWeight
public void .ctor(Vector3 positionXYZWeight, float rotationWeight)
public Vector3 get_positionXYZWeight()
public void set_positionXYZWeight(Vector3 value)
public float get_rotationWeight()
public void set_rotationWeight(float value)
}
public UnityEngine.Motion : Object {
private bool <isAnimatorMotion>k__BackingField
public float averageDuration
public float averageAngularSpeed
public Vector3 averageSpeed
public float apparentSpeed
public bool isLooping
public bool legacy
public bool isHumanMotion
public bool isAnimatorMotion
public float get_averageDuration()
public float get_averageAngularSpeed()
public Vector3 get_averageSpeed()
public float get_apparentSpeed()
public bool get_isLooping()
public bool get_legacy()
public bool get_isHumanMotion()
public bool ValidateIfRetargetable(bool val)
public bool get_isAnimatorMotion()
private void get_averageSpeed_Injected(Vector3& ret)
}
public UnityEngine.Playables.AnimationPlayableUtilities : object {
public void Play(Animator animator, Playable playable, PlayableGraph graph)
public AnimationClipPlayable PlayClip(Animator animator, AnimationClip clip, PlayableGraph& graph)
public AnimationMixerPlayable PlayMixer(Animator animator, int inputCount, PlayableGraph& graph)
public AnimationLayerMixerPlayable PlayLayerMixer(Animator animator, int inputCount, PlayableGraph& graph)
public AnimatorControllerPlayable PlayAnimatorController(Animator animator, RuntimeAnimatorController controller, PlayableGraph& graph)
}
public UnityEngine.PlayMode : Enum {
public int value__
public PlayMode StopSameLayer
public PlayMode StopAll
}
public UnityEngine.QueueMode : Enum {
public int value__
public QueueMode CompleteOthers
public QueueMode PlayNow
}
public UnityEngine.RuntimeAnimatorController : Object {
public AnimationClip[] animationClips
public AnimationClip[] get_animationClips()
}
public UnityEngine.SkeletonBone : ValueType {
public string name
internal string parentName
public Vector3 position
public Quaternion rotation
public Vector3 scale
public int transformModified
public int get_transformModified()
public void set_transformModified(int value)
}
internal UnityEngine.StateInfoIndex : Enum {
public int value__
public StateInfoIndex CurrentState
public StateInfoIndex NextState
public StateInfoIndex ExitState
public StateInfoIndex InterruptedState
}
public UnityEngine.StateMachineBehaviour : ScriptableObject {
public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
public void OnStateMachineExit(Animator animator, int stateMachinePathHash)
public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateMachineEnter(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller)
public void OnStateMachineExit(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller)
}
internal UnityEngine.TransitionType : Enum {
public int value__
public TransitionType Normal
public TransitionType Entry
public TransitionType Exit
}
