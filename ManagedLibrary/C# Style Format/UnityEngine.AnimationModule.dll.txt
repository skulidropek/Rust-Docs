public UnityEngine.Animation : Behaviour {
public AnimationClip clip
public bool playAutomatically
public WrapMode wrapMode
public bool isPlaying
public AnimationState Item
public bool animatePhysics
public bool animateOnlyIfVisible
public AnimationCullingType cullingType
public Bounds localBounds
public AnimationClip get_clip()
public void set_clip(AnimationClip value)
public bool get_playAutomatically()
public void set_playAutomatically(bool value)
public WrapMode get_wrapMode()
public void set_wrapMode(WrapMode value)
public void Stop()
private void INTERNAL_CALL_Stop(Animation self)
public void Stop(string name)
private void Internal_StopByName(string name)
public void Rewind(string name)
private void Internal_RewindByName(string name)
public void Rewind()
private void INTERNAL_CALL_Rewind(Animation self)
public void Sample()
private void INTERNAL_CALL_Sample(Animation self)
public bool get_isPlaying()
public bool IsPlaying(string name)
public AnimationState get_Item(string name)
public bool Play()
public bool Play(PlayMode mode)
public bool Play(string animation, PlayMode mode)
public bool Play(string animation)
public void CrossFade(string animation, float fadeLength, PlayMode mode)
public void CrossFade(string animation, float fadeLength)
public void CrossFade(string animation)
public void Blend(string animation, float targetWeight, float fadeLength)
public void Blend(string animation, float targetWeight)
public void Blend(string animation)
public AnimationState CrossFadeQueued(string animation, float fadeLength, QueueMode queue, PlayMode mode)
public AnimationState CrossFadeQueued(string animation, float fadeLength, QueueMode queue)
public AnimationState CrossFadeQueued(string animation, float fadeLength)
public AnimationState CrossFadeQueued(string animation)
public AnimationState PlayQueued(string animation, QueueMode queue, PlayMode mode)
public AnimationState PlayQueued(string animation, QueueMode queue)
public AnimationState PlayQueued(string animation)
public void AddClip(AnimationClip clip, string newName)
public void AddClip(AnimationClip clip, string newName, int firstFrame, int lastFrame, bool addLoopFrame)
public void AddClip(AnimationClip clip, string newName, int firstFrame, int lastFrame)
public void RemoveClip(AnimationClip clip)
public void RemoveClip(string clipName)
public int GetClipCount()
private void RemoveClip2(string clipName)
private bool PlayDefaultAnimation(PlayMode mode)
public bool Play(AnimationPlayMode mode)
public bool Play(string animation, AnimationPlayMode mode)
public void SyncLayer(int layer)
private void INTERNAL_CALL_SyncLayer(Animation self, int layer)
public IEnumerator GetEnumerator()
internal AnimationState GetState(string name)
internal AnimationState GetStateAtIndex(int index)
internal int GetStateCount()
public AnimationClip GetClip(string name)
public bool get_animatePhysics()
public void set_animatePhysics(bool value)
public bool get_animateOnlyIfVisible()
public void set_animateOnlyIfVisible(bool value)
public AnimationCullingType get_cullingType()
public void set_cullingType(AnimationCullingType value)
public Bounds get_localBounds()
public void set_localBounds(Bounds value)
private void INTERNAL_get_localBounds(Bounds& value)
private void INTERNAL_set_localBounds(Bounds& value)
}
public UnityEngine.AnimationBlendMode : Enum {
public int value__
public AnimationBlendMode Blend
public AnimationBlendMode Additive
}
public UnityEngine.AnimationClip : Motion {
public float length
internal float startTime
internal float stopTime
public float frameRate
public WrapMode wrapMode
public Bounds localBounds
public bool legacy
public bool humanMotion
public bool empty
public bool hasGenericRootTransform
public bool hasMotionFloatCurves
public bool hasMotionCurves
public bool hasRootCurves
internal bool hasRootMotion
public AnimationEvent[] events
private void Internal_CreateAnimationClip(AnimationClip self)
public void SampleAnimation(GameObject go, float time)
internal void SampleAnimation(GameObject go, AnimationClip clip, float inTime, WrapMode wrapMode)
public float get_length()
internal float get_startTime()
internal float get_stopTime()
public float get_frameRate()
public void set_frameRate(float value)
public void SetCurve(string relativePath, Type type, string propertyName, AnimationCurve curve)
public void EnsureQuaternionContinuity()
public void ClearCurves()
public WrapMode get_wrapMode()
public void set_wrapMode(WrapMode value)
public Bounds get_localBounds()
public void set_localBounds(Bounds value)
public bool get_legacy()
public void set_legacy(bool value)
public bool get_humanMotion()
public bool get_empty()
public bool get_hasGenericRootTransform()
public bool get_hasMotionFloatCurves()
public bool get_hasMotionCurves()
public bool get_hasRootCurves()
internal bool get_hasRootMotion()
public void AddEvent(AnimationEvent evt)
internal void AddEventInternal(object evt)
public AnimationEvent[] get_events()
public void set_events(AnimationEvent[] value)
internal void SetEventsInternal(Array value)
internal Array GetEventsInternal()
private void get_localBounds_Injected(Bounds& ret)
private void set_localBounds_Injected(Bounds& value)
}
public UnityEngine.AnimationClipPair : object {
public AnimationClip originalClip
public AnimationClip overrideClip
}
public UnityEngine.AnimationCullingType : Enum {
public int value__
public AnimationCullingType AlwaysAnimate
public AnimationCullingType BasedOnRenderers
public AnimationCullingType BasedOnClipBounds
public AnimationCullingType BasedOnUserBounds
}
public UnityEngine.AnimationEvent : object {
internal float m_Time
internal string m_FunctionName
internal string m_StringParameter
internal Object m_ObjectReferenceParameter
internal float m_FloatParameter
internal int m_IntParameter
internal int m_MessageOptions
internal AnimationEventSource m_Source
internal AnimationState m_StateSender
internal AnimatorStateInfo m_AnimatorStateInfo
internal AnimatorClipInfo m_AnimatorClipInfo
public string data
public string stringParameter
public float floatParameter
public int intParameter
public Object objectReferenceParameter
public string functionName
public float time
public SendMessageOptions messageOptions
public bool isFiredByLegacy
public bool isFiredByAnimator
public AnimationState animationState
public AnimatorStateInfo animatorStateInfo
public AnimatorClipInfo animatorClipInfo
public string get_data()
public void set_data(string value)
public string get_stringParameter()
public void set_stringParameter(string value)
public float get_floatParameter()
public void set_floatParameter(float value)
public int get_intParameter()
public void set_intParameter(int value)
public Object get_objectReferenceParameter()
public void set_objectReferenceParameter(Object value)
public string get_functionName()
public void set_functionName(string value)
public float get_time()
public void set_time(float value)
public SendMessageOptions get_messageOptions()
public void set_messageOptions(SendMessageOptions value)
public bool get_isFiredByLegacy()
public bool get_isFiredByAnimator()
public AnimationState get_animationState()
public AnimatorStateInfo get_animatorStateInfo()
public AnimatorClipInfo get_animatorClipInfo()
internal int GetHash()
}
internal UnityEngine.AnimationEventSource : Enum {
public int value__
public AnimationEventSource NoSource
public AnimationEventSource Legacy
public AnimationEventSource Animator
}
public UnityEngine.AnimationPlayMode : Enum {
public int value__
public AnimationPlayMode Stop
public AnimationPlayMode Queue
public AnimationPlayMode Mix
}
public UnityEngine.Animations.AimConstraint : Behaviour {
public float weight
public bool constraintActive
public bool locked
public Vector3 rotationAtRest
public Vector3 rotationOffset
public Axis rotationAxis
public Vector3 aimVector
public Vector3 upVector
public Vector3 worldUpVector
public Transform worldUpObject
public WorldUpType worldUpType
public int sourceCount
private void Internal_Create(AimConstraint self)
public float get_weight()
public void set_weight(float value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public Vector3 get_rotationAtRest()
public void set_rotationAtRest(Vector3 value)
public Vector3 get_rotationOffset()
public void set_rotationOffset(Vector3 value)
public Axis get_rotationAxis()
public void set_rotationAxis(Axis value)
public Vector3 get_aimVector()
public void set_aimVector(Vector3 value)
public Vector3 get_upVector()
public void set_upVector(Vector3 value)
public Vector3 get_worldUpVector()
public void set_worldUpVector(Vector3 value)
public Transform get_worldUpObject()
public void set_worldUpObject(Transform value)
public WorldUpType get_worldUpType()
public void set_worldUpType(WorldUpType value)
public int get_sourceCount()
private int GetSourceCountInternal(AimConstraint self)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(AimConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void ValidateSourceIndex(int index)
private void get_rotationAtRest_Injected(Vector3& ret)
private void set_rotationAtRest_Injected(Vector3& value)
private void get_rotationOffset_Injected(Vector3& ret)
private void set_rotationOffset_Injected(Vector3& value)
private void get_aimVector_Injected(Vector3& ret)
private void set_aimVector_Injected(Vector3& value)
private void get_upVector_Injected(Vector3& ret)
private void set_upVector_Injected(Vector3& value)
private void get_worldUpVector_Injected(Vector3& ret)
private void set_worldUpVector_Injected(Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
public UnityEngine.Animations.AnimationClipPlayable : ValueType {
private PlayableHandle m_Handle
public AnimationClipPlayable Create(PlayableGraph graph, AnimationClip clip)
private PlayableHandle CreateHandle(PlayableGraph graph, AnimationClip clip)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationClipPlayable playable)
public AnimationClipPlayable op_Explicit(Playable playable)
public bool Equals(AnimationClipPlayable other)
public AnimationClip GetAnimationClip()
public bool GetApplyFootIK()
public void SetApplyFootIK(bool value)
public bool GetApplyPlayableIK()
public void SetApplyPlayableIK(bool value)
internal bool GetRemoveStartOffset()
internal void SetRemoveStartOffset(bool value)
internal bool GetOverrideLoopTime()
internal void SetOverrideLoopTime(bool value)
internal bool GetLoopTime()
internal void SetLoopTime(bool value)
internal float GetSampleRate()
internal void SetSampleRate(float value)
private bool CreateHandleInternal(PlayableGraph graph, AnimationClip clip, PlayableHandle& handle)
private AnimationClip GetAnimationClipInternal(PlayableHandle& handle)
private bool GetApplyFootIKInternal(PlayableHandle& handle)
private void SetApplyFootIKInternal(PlayableHandle& handle, bool value)
private bool GetApplyPlayableIKInternal(PlayableHandle& handle)
private void SetApplyPlayableIKInternal(PlayableHandle& handle, bool value)
private bool GetRemoveStartOffsetInternal(PlayableHandle& handle)
private void SetRemoveStartOffsetInternal(PlayableHandle& handle, bool value)
private bool GetOverrideLoopTimeInternal(PlayableHandle& handle)
private void SetOverrideLoopTimeInternal(PlayableHandle& handle, bool value)
private bool GetLoopTimeInternal(PlayableHandle& handle)
private void SetLoopTimeInternal(PlayableHandle& handle, bool value)
private float GetSampleRateInternal(PlayableHandle& handle)
private void SetSampleRateInternal(PlayableHandle& handle, float value)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, AnimationClip clip, PlayableHandle& handle)
}
public UnityEngine.Animations.AnimationHumanStream : ValueType {
private IntPtr stream
public bool isValid
public float humanScale
public float leftFootHeight
public float rightFootHeight
public Vector3 bodyLocalPosition
public Quaternion bodyLocalRotation
public Vector3 bodyPosition
public Quaternion bodyRotation
public Vector3 leftFootVelocity
public Vector3 rightFootVelocity
public bool get_isValid()
private void ThrowIfInvalid()
public float get_humanScale()
public float get_leftFootHeight()
public float get_rightFootHeight()
public Vector3 get_bodyLocalPosition()
public void set_bodyLocalPosition(Vector3 value)
public Quaternion get_bodyLocalRotation()
public void set_bodyLocalRotation(Quaternion value)
public Vector3 get_bodyPosition()
public void set_bodyPosition(Vector3 value)
public Quaternion get_bodyRotation()
public void set_bodyRotation(Quaternion value)
public float GetMuscle(MuscleHandle muscle)
public void SetMuscle(MuscleHandle muscle, float value)
public Vector3 get_leftFootVelocity()
public Vector3 get_rightFootVelocity()
public void ResetToStancePose()
public Vector3 GetGoalPositionFromPose(AvatarIKGoal index)
public Quaternion GetGoalRotationFromPose(AvatarIKGoal index)
public Vector3 GetGoalLocalPosition(AvatarIKGoal index)
public void SetGoalLocalPosition(AvatarIKGoal index, Vector3 pos)
public Quaternion GetGoalLocalRotation(AvatarIKGoal index)
public void SetGoalLocalRotation(AvatarIKGoal index, Quaternion rot)
public Vector3 GetGoalPosition(AvatarIKGoal index)
public void SetGoalPosition(AvatarIKGoal index, Vector3 pos)
public Quaternion GetGoalRotation(AvatarIKGoal index)
public void SetGoalRotation(AvatarIKGoal index, Quaternion rot)
public void SetGoalWeightPosition(AvatarIKGoal index, float value)
public void SetGoalWeightRotation(AvatarIKGoal index, float value)
public float GetGoalWeightPosition(AvatarIKGoal index)
public float GetGoalWeightRotation(AvatarIKGoal index)
public Vector3 GetHintPosition(AvatarIKHint index)
public void SetHintPosition(AvatarIKHint index, Vector3 pos)
public void SetHintWeightPosition(AvatarIKHint index, float value)
public float GetHintWeightPosition(AvatarIKHint index)
public void SetLookAtPosition(Vector3 lookAtPosition)
public void SetLookAtClampWeight(float weight)
public void SetLookAtBodyWeight(float weight)
public void SetLookAtHeadWeight(float weight)
public void SetLookAtEyesWeight(float weight)
public void SolveIK()
private float GetHumanScale()
private float GetFootHeight(bool left)
private void InternalResetToStancePose()
private Vector3 InternalGetGoalPositionFromPose(AvatarIKGoal index)
private Quaternion InternalGetGoalRotationFromPose(AvatarIKGoal index)
private Vector3 InternalGetBodyLocalPosition()
private void InternalSetBodyLocalPosition(Vector3 value)
private Quaternion InternalGetBodyLocalRotation()
private void InternalSetBodyLocalRotation(Quaternion value)
private Vector3 InternalGetBodyPosition()
private void InternalSetBodyPosition(Vector3 value)
private Quaternion InternalGetBodyRotation()
private void InternalSetBodyRotation(Quaternion value)
private float InternalGetMuscle(MuscleHandle muscle)
private void InternalSetMuscle(MuscleHandle muscle, float value)
private Vector3 GetLeftFootVelocity()
private Vector3 GetRightFootVelocity()
private Vector3 InternalGetGoalLocalPosition(AvatarIKGoal index)
private void InternalSetGoalLocalPosition(AvatarIKGoal index, Vector3 pos)
private Quaternion InternalGetGoalLocalRotation(AvatarIKGoal index)
private void InternalSetGoalLocalRotation(AvatarIKGoal index, Quaternion rot)
private Vector3 InternalGetGoalPosition(AvatarIKGoal index)
private void InternalSetGoalPosition(AvatarIKGoal index, Vector3 pos)
private Quaternion InternalGetGoalRotation(AvatarIKGoal index)
private void InternalSetGoalRotation(AvatarIKGoal index, Quaternion rot)
private void InternalSetGoalWeightPosition(AvatarIKGoal index, float value)
private void InternalSetGoalWeightRotation(AvatarIKGoal index, float value)
private float InternalGetGoalWeightPosition(AvatarIKGoal index)
private float InternalGetGoalWeightRotation(AvatarIKGoal index)
private Vector3 InternalGetHintPosition(AvatarIKHint index)
private void InternalSetHintPosition(AvatarIKHint index, Vector3 pos)
private void InternalSetHintWeightPosition(AvatarIKHint index, float value)
private float InternalGetHintWeightPosition(AvatarIKHint index)
private void InternalSetLookAtPosition(Vector3 lookAtPosition)
private void InternalSetLookAtClampWeight(float weight)
private void InternalSetLookAtBodyWeight(float weight)
private void InternalSetLookAtHeadWeight(float weight)
private void InternalSetLookAtEyesWeight(float weight)
private void InternalSolveIK()
private float GetHumanScale_Injected(AnimationHumanStream& _unity_self)
private float GetFootHeight_Injected(AnimationHumanStream& _unity_self, bool left)
private void InternalResetToStancePose_Injected(AnimationHumanStream& _unity_self)
private void InternalGetGoalPositionFromPose_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, Vector3& ret)
private void InternalGetGoalRotationFromPose_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, Quaternion& ret)
private void InternalGetBodyLocalPosition_Injected(AnimationHumanStream& _unity_self, Vector3& ret)
private void InternalSetBodyLocalPosition_Injected(AnimationHumanStream& _unity_self, Vector3& value)
private void InternalGetBodyLocalRotation_Injected(AnimationHumanStream& _unity_self, Quaternion& ret)
private void InternalSetBodyLocalRotation_Injected(AnimationHumanStream& _unity_self, Quaternion& value)
private void InternalGetBodyPosition_Injected(AnimationHumanStream& _unity_self, Vector3& ret)
private void InternalSetBodyPosition_Injected(AnimationHumanStream& _unity_self, Vector3& value)
private void InternalGetBodyRotation_Injected(AnimationHumanStream& _unity_self, Quaternion& ret)
private void InternalSetBodyRotation_Injected(AnimationHumanStream& _unity_self, Quaternion& value)
private float InternalGetMuscle_Injected(AnimationHumanStream& _unity_self, MuscleHandle& muscle)
private void InternalSetMuscle_Injected(AnimationHumanStream& _unity_self, MuscleHandle& muscle, float value)
private void GetLeftFootVelocity_Injected(AnimationHumanStream& _unity_self, Vector3& ret)
private void GetRightFootVelocity_Injected(AnimationHumanStream& _unity_self, Vector3& ret)
private void InternalGetGoalLocalPosition_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, Vector3& ret)
private void InternalSetGoalLocalPosition_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, Vector3& pos)
private void InternalGetGoalLocalRotation_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, Quaternion& ret)
private void InternalSetGoalLocalRotation_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, Quaternion& rot)
private void InternalGetGoalPosition_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, Vector3& ret)
private void InternalSetGoalPosition_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, Vector3& pos)
private void InternalGetGoalRotation_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, Quaternion& ret)
private void InternalSetGoalRotation_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, Quaternion& rot)
private void InternalSetGoalWeightPosition_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, float value)
private void InternalSetGoalWeightRotation_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index, float value)
private float InternalGetGoalWeightPosition_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index)
private float InternalGetGoalWeightRotation_Injected(AnimationHumanStream& _unity_self, AvatarIKGoal index)
private void InternalGetHintPosition_Injected(AnimationHumanStream& _unity_self, AvatarIKHint index, Vector3& ret)
private void InternalSetHintPosition_Injected(AnimationHumanStream& _unity_self, AvatarIKHint index, Vector3& pos)
private void InternalSetHintWeightPosition_Injected(AnimationHumanStream& _unity_self, AvatarIKHint index, float value)
private float InternalGetHintWeightPosition_Injected(AnimationHumanStream& _unity_self, AvatarIKHint index)
private void InternalSetLookAtPosition_Injected(AnimationHumanStream& _unity_self, Vector3& lookAtPosition)
private void InternalSetLookAtClampWeight_Injected(AnimationHumanStream& _unity_self, float weight)
private void InternalSetLookAtBodyWeight_Injected(AnimationHumanStream& _unity_self, float weight)
private void InternalSetLookAtHeadWeight_Injected(AnimationHumanStream& _unity_self, float weight)
private void InternalSetLookAtEyesWeight_Injected(AnimationHumanStream& _unity_self, float weight)
private void InternalSolveIK_Injected(AnimationHumanStream& _unity_self)
}
public UnityEngine.Animations.AnimationLayerMixerPlayable : ValueType {
private PlayableHandle m_Handle
private AnimationLayerMixerPlayable m_NullPlayable
public AnimationLayerMixerPlayable Null
public AnimationLayerMixerPlayable get_Null()
public AnimationLayerMixerPlayable Create(PlayableGraph graph, int inputCount)
private PlayableHandle CreateHandle(PlayableGraph graph, int inputCount)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationLayerMixerPlayable playable)
public AnimationLayerMixerPlayable op_Explicit(Playable playable)
public bool Equals(AnimationLayerMixerPlayable other)
public bool IsLayerAdditive(UInt32 layerIndex)
public void SetLayerAdditive(UInt32 layerIndex, bool value)
public void SetLayerMaskFromAvatarMask(UInt32 layerIndex, AvatarMask mask)
private bool CreateHandleInternal(PlayableGraph graph, PlayableHandle& handle)
private bool IsLayerAdditiveInternal(PlayableHandle& handle, UInt32 layerIndex)
private void SetLayerAdditiveInternal(PlayableHandle& handle, UInt32 layerIndex, bool value)
private void SetLayerMaskFromAvatarMaskInternal(PlayableHandle& handle, UInt32 layerIndex, AvatarMask mask)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, PlayableHandle& handle)
}
public UnityEngine.Animations.AnimationMixerPlayable : ValueType {
private PlayableHandle m_Handle
private AnimationMixerPlayable m_NullPlayable
public AnimationMixerPlayable Null
public AnimationMixerPlayable get_Null()
public AnimationMixerPlayable Create(PlayableGraph graph, int inputCount, bool normalizeWeights)
private PlayableHandle CreateHandle(PlayableGraph graph, int inputCount, bool normalizeWeights)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationMixerPlayable playable)
public AnimationMixerPlayable op_Explicit(Playable playable)
public bool Equals(AnimationMixerPlayable other)
private bool CreateHandleInternal(PlayableGraph graph, bool normalizeWeights, PlayableHandle& handle)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, bool normalizeWeights, PlayableHandle& handle)
}
internal UnityEngine.Animations.AnimationMotionXToDeltaPlayable : ValueType {
private PlayableHandle m_Handle
private AnimationMotionXToDeltaPlayable m_NullPlayable
public AnimationMotionXToDeltaPlayable Null
public AnimationMotionXToDeltaPlayable get_Null()
public AnimationMotionXToDeltaPlayable Create(PlayableGraph graph)
private PlayableHandle CreateHandle(PlayableGraph graph)
private void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationMotionXToDeltaPlayable playable)
public AnimationMotionXToDeltaPlayable op_Explicit(Playable playable)
public bool Equals(AnimationMotionXToDeltaPlayable other)
public bool IsAbsoluteMotion()
public void SetAbsoluteMotion(bool value)
private bool CreateHandleInternal(PlayableGraph graph, PlayableHandle& handle)
private bool IsAbsoluteMotionInternal(PlayableHandle& handle)
private void SetAbsoluteMotionInternal(PlayableHandle& handle, bool value)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, PlayableHandle& handle)
}
internal UnityEngine.Animations.AnimationOffsetPlayable : ValueType {
private PlayableHandle m_Handle
private AnimationOffsetPlayable m_NullPlayable
public AnimationOffsetPlayable Null
public AnimationOffsetPlayable get_Null()
public AnimationOffsetPlayable Create(PlayableGraph graph, Vector3 position, Quaternion rotation, int inputCount)
private PlayableHandle CreateHandle(PlayableGraph graph, Vector3 position, Quaternion rotation, int inputCount)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationOffsetPlayable playable)
public AnimationOffsetPlayable op_Explicit(Playable playable)
public bool Equals(AnimationOffsetPlayable other)
public Vector3 GetPosition()
public void SetPosition(Vector3 value)
public Quaternion GetRotation()
public void SetRotation(Quaternion value)
private bool CreateHandleInternal(PlayableGraph graph, Vector3 position, Quaternion rotation, PlayableHandle& handle)
private Vector3 GetPositionInternal(PlayableHandle& handle)
private void SetPositionInternal(PlayableHandle& handle, Vector3 value)
private Quaternion GetRotationInternal(PlayableHandle& handle)
private void SetRotationInternal(PlayableHandle& handle, Quaternion value)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, Vector3& position, Quaternion& rotation, PlayableHandle& handle)
private void GetPositionInternal_Injected(PlayableHandle& handle, Vector3& ret)
private void SetPositionInternal_Injected(PlayableHandle& handle, Vector3& value)
private void GetRotationInternal_Injected(PlayableHandle& handle, Quaternion& ret)
private void SetRotationInternal_Injected(PlayableHandle& handle, Quaternion& value)
}
public UnityEngine.Animations.AnimationPlayableBinding : object {
public PlayableBinding Create(string name, Object key)
private PlayableOutput CreateAnimationOutput(PlayableGraph graph, string name)
}
public UnityEngine.Animations.AnimationPlayableExtensions : object {
public void SetAnimatedProperties(U playable, AnimationClip clip)
internal void SetAnimatedPropertiesInternal(PlayableHandle& playable, AnimationClip animatedProperties)
}
internal UnityEngine.Animations.AnimationPlayableGraphExtensions : object {
internal void SyncUpdateAndTimeMode(PlayableGraph graph, Animator animator)
internal void DestroyOutput(PlayableGraph graph, PlayableOutputHandle handle)
internal bool InternalCreateAnimationOutput(PlayableGraph& graph, string name, PlayableOutputHandle& handle)
internal void InternalSyncUpdateAndTimeMode(PlayableGraph& graph, Animator animator)
private void InternalDestroyOutput(PlayableGraph& graph, PlayableOutputHandle& handle)
private int InternalAnimationOutputCount(PlayableGraph& graph)
private bool InternalGetAnimationOutput(PlayableGraph& graph, int index, PlayableOutputHandle& handle)
}
public UnityEngine.Animations.AnimationPlayableOutput : ValueType {
private PlayableOutputHandle m_Handle
public AnimationPlayableOutput Null
public AnimationPlayableOutput Create(PlayableGraph graph, string name, Animator target)
internal void .ctor(PlayableOutputHandle handle)
public AnimationPlayableOutput get_Null()
public PlayableOutputHandle GetHandle()
public PlayableOutput op_Implicit(AnimationPlayableOutput output)
public AnimationPlayableOutput op_Explicit(PlayableOutput output)
public Animator GetTarget()
public void SetTarget(Animator value)
private Animator InternalGetTarget(PlayableOutputHandle& handle)
private void InternalSetTarget(PlayableOutputHandle& handle, Animator target)
}
internal UnityEngine.Animations.AnimationPosePlayable : ValueType {
private PlayableHandle m_Handle
private AnimationPosePlayable m_NullPlayable
public AnimationPosePlayable Null
public AnimationPosePlayable get_Null()
public AnimationPosePlayable Create(PlayableGraph graph)
private PlayableHandle CreateHandle(PlayableGraph graph)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationPosePlayable playable)
public AnimationPosePlayable op_Explicit(Playable playable)
public bool Equals(AnimationPosePlayable other)
public bool GetMustReadPreviousPose()
public void SetMustReadPreviousPose(bool value)
public bool GetReadDefaultPose()
public void SetReadDefaultPose(bool value)
public bool GetApplyFootIK()
public void SetApplyFootIK(bool value)
private bool CreateHandleInternal(PlayableGraph graph, PlayableHandle& handle)
private bool GetMustReadPreviousPoseInternal(PlayableHandle& handle)
private void SetMustReadPreviousPoseInternal(PlayableHandle& handle, bool value)
private bool GetReadDefaultPoseInternal(PlayableHandle& handle)
private void SetReadDefaultPoseInternal(PlayableHandle& handle, bool value)
private bool GetApplyFootIKInternal(PlayableHandle& handle)
private void SetApplyFootIKInternal(PlayableHandle& handle, bool value)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, PlayableHandle& handle)
}
internal UnityEngine.Animations.AnimationRemoveScalePlayable : ValueType {
private PlayableHandle m_Handle
private AnimationRemoveScalePlayable m_NullPlayable
public AnimationRemoveScalePlayable Null
public AnimationRemoveScalePlayable get_Null()
public AnimationRemoveScalePlayable Create(PlayableGraph graph, int inputCount)
private PlayableHandle CreateHandle(PlayableGraph graph, int inputCount)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationRemoveScalePlayable playable)
public AnimationRemoveScalePlayable op_Explicit(Playable playable)
public bool Equals(AnimationRemoveScalePlayable other)
private bool CreateHandleInternal(PlayableGraph graph, PlayableHandle& handle)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, PlayableHandle& handle)
}
public UnityEngine.Animations.AnimationSceneHandleUtility : object {
public void ReadInts(AnimationStream stream, NativeArray`1<PropertySceneHandle> handles, NativeArray`1<int> buffer)
public void ReadFloats(AnimationStream stream, NativeArray`1<PropertySceneHandle> handles, NativeArray`1<float> buffer)
internal int ValidateAndGetArrayCount(AnimationStream& stream, NativeArray`1<T0> handles, NativeArray`1<T1> buffer)
private void ReadSceneIntsInternal(AnimationStream& stream, Void* propertySceneHandles, Void* intBuffer, int count)
private void ReadSceneFloatsInternal(AnimationStream& stream, Void* propertySceneHandles, Void* floatBuffer, int count)
}
public UnityEngine.Animations.AnimationScriptPlayable : ValueType {
private PlayableHandle m_Handle
private AnimationScriptPlayable m_NullPlayable
public AnimationScriptPlayable Null
public AnimationScriptPlayable get_Null()
public AnimationScriptPlayable Create(PlayableGraph graph, T jobData, int inputCount)
private PlayableHandle CreateHandle(PlayableGraph graph, int inputCount)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
private void CheckJobTypeValidity()
public T GetJobData()
public void SetJobData(T jobData)
public Playable op_Implicit(AnimationScriptPlayable playable)
public AnimationScriptPlayable op_Explicit(Playable playable)
public bool Equals(AnimationScriptPlayable other)
public void SetProcessInputs(bool value)
public bool GetProcessInputs()
private bool CreateHandleInternal(PlayableGraph graph, PlayableHandle& handle, IntPtr jobReflectionData)
private void SetProcessInputsInternal(PlayableHandle handle, bool value)
private bool GetProcessInputsInternal(PlayableHandle handle)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, PlayableHandle& handle, IntPtr jobReflectionData)
private void SetProcessInputsInternal_Injected(PlayableHandle& handle, bool value)
private bool GetProcessInputsInternal_Injected(PlayableHandle& handle)
}
public UnityEngine.Animations.AnimationStream : ValueType {
private UInt32 m_AnimatorBindingsVersion
private IntPtr constant
private IntPtr input
private IntPtr output
private IntPtr workspace
private IntPtr inputStreamAccessor
private IntPtr animationHandleBinder
internal int InvalidIndex
internal UInt32 animatorBindingsVersion
public bool isValid
public float deltaTime
public Vector3 velocity
public Vector3 angularVelocity
public Vector3 rootMotionPosition
public Quaternion rootMotionRotation
public bool isHumanStream
public int inputStreamCount
internal UInt32 get_animatorBindingsVersion()
public bool get_isValid()
internal void CheckIsValid()
public float get_deltaTime()
public Vector3 get_velocity()
public void set_velocity(Vector3 value)
public Vector3 get_angularVelocity()
public void set_angularVelocity(Vector3 value)
public Vector3 get_rootMotionPosition()
public Quaternion get_rootMotionRotation()
public bool get_isHumanStream()
public AnimationHumanStream AsHuman()
public int get_inputStreamCount()
public AnimationStream GetInputStream(int index)
public float GetInputWeight(int index)
private void ReadSceneTransforms()
private void WriteSceneTransforms()
private float GetDeltaTime()
private bool GetIsHumanStream()
private Vector3 GetVelocity()
private void SetVelocity(Vector3 velocity)
private Vector3 GetAngularVelocity()
private void SetAngularVelocity(Vector3 velocity)
private Vector3 GetRootMotionPosition()
private Quaternion GetRootMotionRotation()
private int GetInputStreamCount()
private AnimationStream InternalGetInputStream(int index)
private float InternalGetInputWeight(int index)
private AnimationHumanStream GetHumanStream()
private void InternalReadSceneTransforms()
private void InternalWriteSceneTransforms()
private float GetDeltaTime_Injected(AnimationStream& _unity_self)
private bool GetIsHumanStream_Injected(AnimationStream& _unity_self)
private void GetVelocity_Injected(AnimationStream& _unity_self, Vector3& ret)
private void SetVelocity_Injected(AnimationStream& _unity_self, Vector3& velocity)
private void GetAngularVelocity_Injected(AnimationStream& _unity_self, Vector3& ret)
private void SetAngularVelocity_Injected(AnimationStream& _unity_self, Vector3& velocity)
private void GetRootMotionPosition_Injected(AnimationStream& _unity_self, Vector3& ret)
private void GetRootMotionRotation_Injected(AnimationStream& _unity_self, Quaternion& ret)
private int GetInputStreamCount_Injected(AnimationStream& _unity_self)
private void InternalGetInputStream_Injected(AnimationStream& _unity_self, int index, AnimationStream& ret)
private float InternalGetInputWeight_Injected(AnimationStream& _unity_self, int index)
private void GetHumanStream_Injected(AnimationStream& _unity_self, AnimationHumanStream& ret)
private void InternalReadSceneTransforms_Injected(AnimationStream& _unity_self)
private void InternalWriteSceneTransforms_Injected(AnimationStream& _unity_self)
}
public UnityEngine.Animations.AnimationStreamHandleUtility : object {
public void WriteInts(AnimationStream stream, NativeArray`1<PropertyStreamHandle> handles, NativeArray`1<int> buffer, bool useMask)
public void WriteFloats(AnimationStream stream, NativeArray`1<PropertyStreamHandle> handles, NativeArray`1<float> buffer, bool useMask)
public void ReadInts(AnimationStream stream, NativeArray`1<PropertyStreamHandle> handles, NativeArray`1<int> buffer)
public void ReadFloats(AnimationStream stream, NativeArray`1<PropertyStreamHandle> handles, NativeArray`1<float> buffer)
private void ReadStreamIntsInternal(AnimationStream& stream, Void* propertyStreamHandles, Void* intBuffer, int count)
private void ReadStreamFloatsInternal(AnimationStream& stream, Void* propertyStreamHandles, Void* floatBuffer, int count)
private void WriteStreamIntsInternal(AnimationStream& stream, Void* propertyStreamHandles, Void* intBuffer, int count, bool useMask)
private void WriteStreamFloatsInternal(AnimationStream& stream, Void* propertyStreamHandles, Void* floatBuffer, int count, bool useMask)
}
internal UnityEngine.Animations.AnimatorBindingsVersion : Enum {
public int value__
public AnimatorBindingsVersion kInvalidNotNative
public AnimatorBindingsVersion kInvalidUnresolved
public AnimatorBindingsVersion kValidMinVersion
}
public UnityEngine.Animations.AnimatorControllerPlayable : ValueType {
private PlayableHandle m_Handle
private AnimatorControllerPlayable m_NullPlayable
public AnimatorControllerPlayable Null
public AnimatorControllerPlayable get_Null()
public AnimatorControllerPlayable Create(PlayableGraph graph, RuntimeAnimatorController controller)
private PlayableHandle CreateHandle(PlayableGraph graph, RuntimeAnimatorController controller)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public void SetHandle(PlayableHandle handle)
public Playable op_Implicit(AnimatorControllerPlayable playable)
public AnimatorControllerPlayable op_Explicit(Playable playable)
public bool Equals(AnimatorControllerPlayable other)
public float GetFloat(string name)
public float GetFloat(int id)
public void SetFloat(string name, float value)
public void SetFloat(int id, float value)
public bool GetBool(string name)
public bool GetBool(int id)
public void SetBool(string name, bool value)
public void SetBool(int id, bool value)
public int GetInteger(string name)
public int GetInteger(int id)
public void SetInteger(string name, int value)
public void SetInteger(int id, int value)
public void SetTrigger(string name)
public void SetTrigger(int id)
public void ResetTrigger(string name)
public void ResetTrigger(int id)
public bool IsParameterControlledByCurve(string name)
public bool IsParameterControlledByCurve(int id)
public int GetLayerCount()
public string GetLayerName(int layerIndex)
public int GetLayerIndex(string layerName)
public float GetLayerWeight(int layerIndex)
public void SetLayerWeight(int layerIndex, float weight)
public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex)
public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex)
public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex)
public AnimatorClipInfo[] GetCurrentAnimatorClipInfo(int layerIndex)
public void GetCurrentAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
public void GetNextAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
private void GetAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex, bool isCurrent, object clips)
public int GetCurrentAnimatorClipInfoCount(int layerIndex)
public int GetNextAnimatorClipInfoCount(int layerIndex)
public AnimatorClipInfo[] GetNextAnimatorClipInfo(int layerIndex)
public bool IsInTransition(int layerIndex)
public int GetParameterCount()
public AnimatorControllerParameter GetParameter(int index)
public void CrossFadeInFixedTime(string stateName, float transitionDuration)
public void CrossFadeInFixedTime(string stateName, float transitionDuration, int layer)
public void CrossFadeInFixedTime(string stateName, float transitionDuration, int layer, float fixedTime)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration, int layer)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration, int layer, float fixedTime)
public void CrossFade(string stateName, float transitionDuration)
public void CrossFade(string stateName, float transitionDuration, int layer)
public void CrossFade(string stateName, float transitionDuration, int layer, float normalizedTime)
public void CrossFade(int stateNameHash, float transitionDuration)
public void CrossFade(int stateNameHash, float transitionDuration, int layer)
public void CrossFade(int stateNameHash, float transitionDuration, int layer, float normalizedTime)
public void PlayInFixedTime(string stateName)
public void PlayInFixedTime(string stateName, int layer)
public void PlayInFixedTime(string stateName, int layer, float fixedTime)
public void PlayInFixedTime(int stateNameHash)
public void PlayInFixedTime(int stateNameHash, int layer)
public void PlayInFixedTime(int stateNameHash, int layer, float fixedTime)
public void Play(string stateName)
public void Play(string stateName, int layer)
public void Play(string stateName, int layer, float normalizedTime)
public void Play(int stateNameHash)
public void Play(int stateNameHash, int layer)
public void Play(int stateNameHash, int layer, float normalizedTime)
public bool HasState(int layerIndex, int stateID)
internal string ResolveHash(int hash)
private bool CreateHandleInternal(PlayableGraph graph, RuntimeAnimatorController controller, PlayableHandle& handle)
private RuntimeAnimatorController GetAnimatorControllerInternal(PlayableHandle& handle)
private int GetLayerCountInternal(PlayableHandle& handle)
private string GetLayerNameInternal(PlayableHandle& handle, int layerIndex)
private int GetLayerIndexInternal(PlayableHandle& handle, string layerName)
private float GetLayerWeightInternal(PlayableHandle& handle, int layerIndex)
private void SetLayerWeightInternal(PlayableHandle& handle, int layerIndex, float weight)
private AnimatorStateInfo GetCurrentAnimatorStateInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorStateInfo GetNextAnimatorStateInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorTransitionInfo GetAnimatorTransitionInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorClipInfo[] GetCurrentAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex)
private int GetAnimatorClipInfoCountInternal(PlayableHandle& handle, int layerIndex, bool current)
private AnimatorClipInfo[] GetNextAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex)
private string ResolveHashInternal(PlayableHandle& handle, int hash)
private bool IsInTransitionInternal(PlayableHandle& handle, int layerIndex)
private AnimatorControllerParameter[] GetParametersArrayInternal(PlayableHandle& handle)
private int GetParameterCountInternal(PlayableHandle& handle)
private int StringToHash(string name)
private void CrossFadeInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration, int layer, float fixedTime)
private void CrossFadeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration, int layer, float normalizedTime)
private void PlayInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, int layer, float fixedTime)
private void PlayInternal(PlayableHandle& handle, int stateNameHash, int layer, float normalizedTime)
private bool HasStateInternal(PlayableHandle& handle, int layerIndex, int stateID)
private void SetFloatString(PlayableHandle& handle, string name, float value)
private void SetFloatID(PlayableHandle& handle, int id, float value)
private float GetFloatString(PlayableHandle& handle, string name)
private float GetFloatID(PlayableHandle& handle, int id)
private void SetBoolString(PlayableHandle& handle, string name, bool value)
private void SetBoolID(PlayableHandle& handle, int id, bool value)
private bool GetBoolString(PlayableHandle& handle, string name)
private bool GetBoolID(PlayableHandle& handle, int id)
private void SetIntegerString(PlayableHandle& handle, string name, int value)
private void SetIntegerID(PlayableHandle& handle, int id, int value)
private int GetIntegerString(PlayableHandle& handle, string name)
private int GetIntegerID(PlayableHandle& handle, int id)
private void SetTriggerString(PlayableHandle& handle, string name)
private void SetTriggerID(PlayableHandle& handle, int id)
private void ResetTriggerString(PlayableHandle& handle, string name)
private void ResetTriggerID(PlayableHandle& handle, int id)
private bool IsParameterControlledByCurveString(PlayableHandle& handle, string name)
private bool IsParameterControlledByCurveID(PlayableHandle& handle, int id)
private bool CreateHandleInternal_Injected(PlayableGraph& graph, RuntimeAnimatorController controller, PlayableHandle& handle)
private void GetCurrentAnimatorStateInfoInternal_Injected(PlayableHandle& handle, int layerIndex, AnimatorStateInfo& ret)
private void GetNextAnimatorStateInfoInternal_Injected(PlayableHandle& handle, int layerIndex, AnimatorStateInfo& ret)
private void GetAnimatorTransitionInfoInternal_Injected(PlayableHandle& handle, int layerIndex, AnimatorTransitionInfo& ret)
}
public UnityEngine.Animations.AnimatorJobExtensions : object {
public void AddJobDependency(Animator animator, JobHandle jobHandle)
public TransformStreamHandle BindStreamTransform(Animator animator, Transform transform)
public PropertyStreamHandle BindStreamProperty(Animator animator, Transform transform, Type type, string property)
public PropertyStreamHandle BindCustomStreamProperty(Animator animator, string property, CustomStreamPropertyType type)
public PropertyStreamHandle BindStreamProperty(Animator animator, Transform transform, Type type, string property, bool isObjectReference)
public TransformSceneHandle BindSceneTransform(Animator animator, Transform transform)
public PropertySceneHandle BindSceneProperty(Animator animator, Transform transform, Type type, string property)
public PropertySceneHandle BindSceneProperty(Animator animator, Transform transform, Type type, string property, bool isObjectReference)
public bool OpenAnimationStream(Animator animator, AnimationStream& stream)
public void CloseAnimationStream(Animator animator, AnimationStream& stream)
public void ResolveAllStreamHandles(Animator animator)
public void ResolveAllSceneHandles(Animator animator)
internal void UnbindAllHandles(Animator animator)
private void InternalAddJobDependency(Animator animator, JobHandle jobHandle)
private void InternalBindStreamTransform(Animator animator, Transform transform, TransformStreamHandle& transformStreamHandle)
private void InternalBindStreamProperty(Animator animator, Transform transform, Type type, string property, bool isObjectReference, PropertyStreamHandle& propertyStreamHandle)
private void InternalBindCustomStreamProperty(Animator animator, string property, CustomStreamPropertyType propertyType, PropertyStreamHandle& propertyStreamHandle)
private void InternalBindSceneTransform(Animator animator, Transform transform, TransformSceneHandle& transformSceneHandle)
private void InternalBindSceneProperty(Animator animator, Transform transform, Type type, string property, bool isObjectReference, PropertySceneHandle& propertySceneHandle)
private bool InternalOpenAnimationStream(Animator animator, AnimationStream& stream)
private void InternalCloseAnimationStream(Animator animator, AnimationStream& stream)
private void InternalResolveAllStreamHandles(Animator animator)
private void InternalResolveAllSceneHandles(Animator animator)
private void InternalUnbindAllHandles(Animator animator)
private void InternalAddJobDependency_Injected(Animator animator, JobHandle& jobHandle)
}
public UnityEngine.Animations.Axis : Enum {
public int value__
public Axis None
public Axis X
public Axis Y
public Axis Z
}
internal UnityEngine.Animations.BindType : Enum {
public int value__
public BindType Unbound
public BindType Float
public BindType Bool
public BindType GameObjectActive
public BindType ObjectReference
public BindType Int
public BindType DiscreetInt
}
public UnityEngine.Animations.ConstraintSource : ValueType {
private Transform m_SourceTransform
private float m_Weight
public Transform sourceTransform
public float weight
public Transform get_sourceTransform()
public void set_sourceTransform(Transform value)
public float get_weight()
public void set_weight(float value)
}
public UnityEngine.Animations.CustomStreamPropertyType : Enum {
public int value__
public CustomStreamPropertyType Float
public CustomStreamPropertyType Bool
public CustomStreamPropertyType Int
}
public UnityEngine.Animations.IAnimationJob {
public void ProcessAnimation(AnimationStream stream)
public void ProcessRootMotion(AnimationStream stream)
}
public UnityEngine.Animations.IAnimationJobPlayable {
public T GetJobData()
public void SetJobData(T jobData)
}
public UnityEngine.Animations.IConstraint {
public float weight
public bool constraintActive
public bool locked
public int sourceCount
public float get_weight()
public void set_weight(float value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public int get_sourceCount()
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
public ConstraintSource GetSource(int index)
public void SetSource(int index, ConstraintSource source)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
}
internal UnityEngine.Animations.JobMethodIndex : Enum {
public int value__
public JobMethodIndex ProcessRootMotionMethodIndex
public JobMethodIndex ProcessAnimationMethodIndex
public JobMethodIndex MethodIndexCount
}
public UnityEngine.Animations.LookAtConstraint : Behaviour {
public float weight
public float roll
public bool constraintActive
public bool locked
public Vector3 rotationAtRest
public Vector3 rotationOffset
public Transform worldUpObject
public bool useUpObject
public int sourceCount
private void Internal_Create(LookAtConstraint self)
public float get_weight()
public void set_weight(float value)
public float get_roll()
public void set_roll(float value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public Vector3 get_rotationAtRest()
public void set_rotationAtRest(Vector3 value)
public Vector3 get_rotationOffset()
public void set_rotationOffset(Vector3 value)
public Transform get_worldUpObject()
public void set_worldUpObject(Transform value)
public bool get_useUpObject()
public void set_useUpObject(bool value)
public int get_sourceCount()
private int GetSourceCountInternal(LookAtConstraint self)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(LookAtConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void ValidateSourceIndex(int index)
private void get_rotationAtRest_Injected(Vector3& ret)
private void set_rotationAtRest_Injected(Vector3& value)
private void get_rotationOffset_Injected(Vector3& ret)
private void set_rotationOffset_Injected(Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
public UnityEngine.Animations.MuscleHandle : ValueType {
private HumanPartDof <humanPartDof>k__BackingField
private int <dof>k__BackingField
public HumanPartDof humanPartDof
public int dof
public string name
public int muscleHandleCount
public HumanPartDof get_humanPartDof()
private void set_humanPartDof(HumanPartDof value)
public int get_dof()
private void set_dof(int value)
public void .ctor(BodyDof bodyDof)
public void .ctor(HeadDof headDof)
public void .ctor(HumanPartDof partDof, LegDof legDof)
public void .ctor(HumanPartDof partDof, ArmDof armDof)
public void .ctor(HumanPartDof partDof, FingerDof fingerDof)
public string get_name()
public int get_muscleHandleCount()
public void GetMuscleHandles(MuscleHandle[] muscleHandles)
private string GetName()
private int GetMuscleHandleCount()
private string GetName_Injected(MuscleHandle& _unity_self)
}
public UnityEngine.Animations.ParentConstraint : Behaviour {
public float weight
public bool constraintActive
public bool locked
public int sourceCount
public Vector3 translationAtRest
public Vector3 rotationAtRest
public Vector3[] translationOffsets
public Vector3[] rotationOffsets
public Axis translationAxis
public Axis rotationAxis
private void Internal_Create(ParentConstraint self)
public float get_weight()
public void set_weight(float value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public int get_sourceCount()
private int GetSourceCountInternal(ParentConstraint self)
public Vector3 get_translationAtRest()
public void set_translationAtRest(Vector3 value)
public Vector3 get_rotationAtRest()
public void set_rotationAtRest(Vector3 value)
public Vector3[] get_translationOffsets()
public void set_translationOffsets(Vector3[] value)
public Vector3[] get_rotationOffsets()
public void set_rotationOffsets(Vector3[] value)
public Axis get_translationAxis()
public void set_translationAxis(Axis value)
public Axis get_rotationAxis()
public void set_rotationAxis(Axis value)
public Vector3 GetTranslationOffset(int index)
public void SetTranslationOffset(int index, Vector3 value)
private Vector3 GetTranslationOffsetInternal(int index)
private void SetTranslationOffsetInternal(int index, Vector3 value)
public Vector3 GetRotationOffset(int index)
public void SetRotationOffset(int index, Vector3 value)
private Vector3 GetRotationOffsetInternal(int index)
private void SetRotationOffsetInternal(int index, Vector3 value)
private void ValidateSourceIndex(int index)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(ParentConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void get_translationAtRest_Injected(Vector3& ret)
private void set_translationAtRest_Injected(Vector3& value)
private void get_rotationAtRest_Injected(Vector3& ret)
private void set_rotationAtRest_Injected(Vector3& value)
private void GetTranslationOffsetInternal_Injected(int index, Vector3& ret)
private void SetTranslationOffsetInternal_Injected(int index, Vector3& value)
private void GetRotationOffsetInternal_Injected(int index, Vector3& ret)
private void SetRotationOffsetInternal_Injected(int index, Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
public UnityEngine.Animations.PositionConstraint : Behaviour {
public float weight
public Vector3 translationAtRest
public Vector3 translationOffset
public Axis translationAxis
public bool constraintActive
public bool locked
public int sourceCount
private void Internal_Create(PositionConstraint self)
public float get_weight()
public void set_weight(float value)
public Vector3 get_translationAtRest()
public void set_translationAtRest(Vector3 value)
public Vector3 get_translationOffset()
public void set_translationOffset(Vector3 value)
public Axis get_translationAxis()
public void set_translationAxis(Axis value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public int get_sourceCount()
private int GetSourceCountInternal(PositionConstraint self)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(PositionConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void ValidateSourceIndex(int index)
private void get_translationAtRest_Injected(Vector3& ret)
private void set_translationAtRest_Injected(Vector3& value)
private void get_translationOffset_Injected(Vector3& ret)
private void set_translationOffset_Injected(Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
internal UnityEngine.Animations.ProcessAnimationJobStruct`1 : ValueType {
private IntPtr jobReflectionData
public IntPtr GetJobReflectionData()
public void Execute(T& data, IntPtr animationStreamPtr, IntPtr methodIndex, JobRanges& ranges, int jobIndex)
}
public UnityEngine.Animations.PropertySceneHandle : ValueType {
private UInt32 valid
private int handleIndex
private bool createdByNative
private bool hasHandleIndex
public bool IsValid(AnimationStream stream)
private bool IsValidInternal(AnimationStream& stream)
private bool get_createdByNative()
private bool get_hasHandleIndex()
public void Resolve(AnimationStream stream)
public bool IsResolved(AnimationStream stream)
private void CheckIsValid(AnimationStream& stream)
public float GetFloat(AnimationStream stream)
public void SetFloat(AnimationStream stream, float value)
public int GetInt(AnimationStream stream)
public void SetInt(AnimationStream stream, int value)
public bool GetBool(AnimationStream stream)
public void SetBool(AnimationStream stream, bool value)
private bool HasValidTransform(AnimationStream& stream)
private bool IsBound(AnimationStream& stream)
private void ResolveInternal(AnimationStream& stream)
private float GetFloatInternal(AnimationStream& stream)
private int GetIntInternal(AnimationStream& stream)
private bool GetBoolInternal(AnimationStream& stream)
private bool HasValidTransform_Injected(PropertySceneHandle& _unity_self, AnimationStream& stream)
private bool IsBound_Injected(PropertySceneHandle& _unity_self, AnimationStream& stream)
private void ResolveInternal_Injected(PropertySceneHandle& _unity_self, AnimationStream& stream)
private float GetFloatInternal_Injected(PropertySceneHandle& _unity_self, AnimationStream& stream)
private int GetIntInternal_Injected(PropertySceneHandle& _unity_self, AnimationStream& stream)
private bool GetBoolInternal_Injected(PropertySceneHandle& _unity_self, AnimationStream& stream)
}
public UnityEngine.Animations.PropertyStreamHandle : ValueType {
private UInt32 m_AnimatorBindingsVersion
private int handleIndex
private int valueArrayIndex
private int bindType
private bool createdByNative
private bool hasHandleIndex
private bool hasValueArrayIndex
private bool hasBindType
internal UInt32 animatorBindingsVersion
public bool IsValid(AnimationStream stream)
private bool IsValidInternal(AnimationStream& stream)
private bool get_createdByNative()
private bool IsSameVersionAsStream(AnimationStream& stream)
private bool get_hasHandleIndex()
private bool get_hasValueArrayIndex()
private bool get_hasBindType()
private void set_animatorBindingsVersion(UInt32 value)
internal UInt32 get_animatorBindingsVersion()
public void Resolve(AnimationStream stream)
public bool IsResolved(AnimationStream stream)
private bool IsResolvedInternal(AnimationStream& stream)
private void CheckIsValidAndResolve(AnimationStream& stream)
public float GetFloat(AnimationStream stream)
public void SetFloat(AnimationStream stream, float value)
public int GetInt(AnimationStream stream)
public void SetInt(AnimationStream stream, int value)
public bool GetBool(AnimationStream stream)
public void SetBool(AnimationStream stream, bool value)
public bool GetReadMask(AnimationStream stream)
private void ResolveInternal(AnimationStream& stream)
private float GetFloatInternal(AnimationStream& stream)
private void SetFloatInternal(AnimationStream& stream, float value)
private int GetIntInternal(AnimationStream& stream)
private void SetIntInternal(AnimationStream& stream, int value)
private bool GetBoolInternal(AnimationStream& stream)
private void SetBoolInternal(AnimationStream& stream, bool value)
private bool GetReadMaskInternal(AnimationStream& stream)
private void ResolveInternal_Injected(PropertyStreamHandle& _unity_self, AnimationStream& stream)
private float GetFloatInternal_Injected(PropertyStreamHandle& _unity_self, AnimationStream& stream)
private void SetFloatInternal_Injected(PropertyStreamHandle& _unity_self, AnimationStream& stream, float value)
private int GetIntInternal_Injected(PropertyStreamHandle& _unity_self, AnimationStream& stream)
private void SetIntInternal_Injected(PropertyStreamHandle& _unity_self, AnimationStream& stream, int value)
private bool GetBoolInternal_Injected(PropertyStreamHandle& _unity_self, AnimationStream& stream)
private void SetBoolInternal_Injected(PropertyStreamHandle& _unity_self, AnimationStream& stream, bool value)
private bool GetReadMaskInternal_Injected(PropertyStreamHandle& _unity_self, AnimationStream& stream)
}
public UnityEngine.Animations.RotationConstraint : Behaviour {
public float weight
public Vector3 rotationAtRest
public Vector3 rotationOffset
public Axis rotationAxis
public bool constraintActive
public bool locked
public int sourceCount
private void Internal_Create(RotationConstraint self)
public float get_weight()
public void set_weight(float value)
public Vector3 get_rotationAtRest()
public void set_rotationAtRest(Vector3 value)
public Vector3 get_rotationOffset()
public void set_rotationOffset(Vector3 value)
public Axis get_rotationAxis()
public void set_rotationAxis(Axis value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public int get_sourceCount()
private int GetSourceCountInternal(RotationConstraint self)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(RotationConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void ValidateSourceIndex(int index)
private void get_rotationAtRest_Injected(Vector3& ret)
private void set_rotationAtRest_Injected(Vector3& value)
private void get_rotationOffset_Injected(Vector3& ret)
private void set_rotationOffset_Injected(Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
public UnityEngine.Animations.ScaleConstraint : Behaviour {
public float weight
public Vector3 scaleAtRest
public Vector3 scaleOffset
public Axis scalingAxis
public bool constraintActive
public bool locked
public int sourceCount
private void Internal_Create(ScaleConstraint self)
public float get_weight()
public void set_weight(float value)
public Vector3 get_scaleAtRest()
public void set_scaleAtRest(Vector3 value)
public Vector3 get_scaleOffset()
public void set_scaleOffset(Vector3 value)
public Axis get_scalingAxis()
public void set_scalingAxis(Axis value)
public bool get_constraintActive()
public void set_constraintActive(bool value)
public bool get_locked()
public void set_locked(bool value)
public int get_sourceCount()
private int GetSourceCountInternal(ScaleConstraint self)
public void GetSources(List`1<ConstraintSource> sources)
public void SetSources(List`1<ConstraintSource> sources)
private void SetSourcesInternal(ScaleConstraint self, List`1<ConstraintSource> sources)
public int AddSource(ConstraintSource source)
public void RemoveSource(int index)
private void RemoveSourceInternal(int index)
public ConstraintSource GetSource(int index)
private ConstraintSource GetSourceInternal(int index)
public void SetSource(int index, ConstraintSource source)
private void SetSourceInternal(int index, ConstraintSource source)
private void ValidateSourceIndex(int index)
private void get_scaleAtRest_Injected(Vector3& ret)
private void set_scaleAtRest_Injected(Vector3& value)
private void get_scaleOffset_Injected(Vector3& ret)
private void set_scaleOffset_Injected(Vector3& value)
private int AddSource_Injected(ConstraintSource& source)
private void GetSourceInternal_Injected(int index, ConstraintSource& ret)
private void SetSourceInternal_Injected(int index, ConstraintSource& source)
}
public UnityEngine.Animations.TransformSceneHandle : ValueType {
private UInt32 valid
private int transformSceneHandleDefinitionIndex
private bool createdByNative
private bool hasTransformSceneHandleDefinitionIndex
public bool IsValid(AnimationStream stream)
private bool get_createdByNative()
private bool get_hasTransformSceneHandleDefinitionIndex()
private void CheckIsValid(AnimationStream& stream)
public Vector3 GetPosition(AnimationStream stream)
public void SetPosition(AnimationStream stream, Vector3 position)
public Vector3 GetLocalPosition(AnimationStream stream)
public void SetLocalPosition(AnimationStream stream, Vector3 position)
public Quaternion GetRotation(AnimationStream stream)
public void SetRotation(AnimationStream stream, Quaternion rotation)
public Quaternion GetLocalRotation(AnimationStream stream)
public void SetLocalRotation(AnimationStream stream, Quaternion rotation)
public Vector3 GetLocalScale(AnimationStream stream)
public void GetLocalTRS(AnimationStream stream, Vector3& position, Quaternion& rotation, Vector3& scale)
public void GetGlobalTR(AnimationStream stream, Vector3& position, Quaternion& rotation)
public void SetLocalScale(AnimationStream stream, Vector3 scale)
private bool HasValidTransform(AnimationStream& stream)
private Vector3 GetPositionInternal(AnimationStream& stream)
private Vector3 GetLocalPositionInternal(AnimationStream& stream)
private Quaternion GetRotationInternal(AnimationStream& stream)
private Quaternion GetLocalRotationInternal(AnimationStream& stream)
private Vector3 GetLocalScaleInternal(AnimationStream& stream)
private void GetLocalTRSInternal(AnimationStream& stream, Vector3& position, Quaternion& rotation, Vector3& scale)
private void GetGlobalTRInternal(AnimationStream& stream, Vector3& position, Quaternion& rotation)
private bool HasValidTransform_Injected(TransformSceneHandle& _unity_self, AnimationStream& stream)
private void GetPositionInternal_Injected(TransformSceneHandle& _unity_self, AnimationStream& stream, Vector3& ret)
private void GetLocalPositionInternal_Injected(TransformSceneHandle& _unity_self, AnimationStream& stream, Vector3& ret)
private void GetRotationInternal_Injected(TransformSceneHandle& _unity_self, AnimationStream& stream, Quaternion& ret)
private void GetLocalRotationInternal_Injected(TransformSceneHandle& _unity_self, AnimationStream& stream, Quaternion& ret)
private void GetLocalScaleInternal_Injected(TransformSceneHandle& _unity_self, AnimationStream& stream, Vector3& ret)
private void GetLocalTRSInternal_Injected(TransformSceneHandle& _unity_self, AnimationStream& stream, Vector3& position, Quaternion& rotation, Vector3& scale)
private void GetGlobalTRInternal_Injected(TransformSceneHandle& _unity_self, AnimationStream& stream, Vector3& position, Quaternion& rotation)
}
public UnityEngine.Animations.TransformStreamHandle : ValueType {
private UInt32 m_AnimatorBindingsVersion
private int handleIndex
private int skeletonIndex
private bool createdByNative
private bool hasHandleIndex
private bool hasSkeletonIndex
internal UInt32 animatorBindingsVersion
public bool IsValid(AnimationStream stream)
private bool IsValidInternal(AnimationStream& stream)
private bool get_createdByNative()
private bool IsSameVersionAsStream(AnimationStream& stream)
private bool get_hasHandleIndex()
private bool get_hasSkeletonIndex()
private void set_animatorBindingsVersion(UInt32 value)
internal UInt32 get_animatorBindingsVersion()
public void Resolve(AnimationStream stream)
public bool IsResolved(AnimationStream stream)
private bool IsResolvedInternal(AnimationStream& stream)
private void CheckIsValidAndResolve(AnimationStream& stream)
public Vector3 GetPosition(AnimationStream stream)
public void SetPosition(AnimationStream stream, Vector3 position)
public Quaternion GetRotation(AnimationStream stream)
public void SetRotation(AnimationStream stream, Quaternion rotation)
public Vector3 GetLocalPosition(AnimationStream stream)
public void SetLocalPosition(AnimationStream stream, Vector3 position)
public Quaternion GetLocalRotation(AnimationStream stream)
public void SetLocalRotation(AnimationStream stream, Quaternion rotation)
public Vector3 GetLocalScale(AnimationStream stream)
public void SetLocalScale(AnimationStream stream, Vector3 scale)
public bool GetPositionReadMask(AnimationStream stream)
public bool GetRotationReadMask(AnimationStream stream)
public bool GetScaleReadMask(AnimationStream stream)
public void GetLocalTRS(AnimationStream stream, Vector3& position, Quaternion& rotation, Vector3& scale)
public void SetLocalTRS(AnimationStream stream, Vector3 position, Quaternion rotation, Vector3 scale, bool useMask)
public void GetGlobalTR(AnimationStream stream, Vector3& position, Quaternion& rotation)
public void SetGlobalTR(AnimationStream stream, Vector3 position, Quaternion rotation, bool useMask)
private void ResolveInternal(AnimationStream& stream)
private Vector3 GetPositionInternal(AnimationStream& stream)
private void SetPositionInternal(AnimationStream& stream, Vector3 position)
private Quaternion GetRotationInternal(AnimationStream& stream)
private void SetRotationInternal(AnimationStream& stream, Quaternion rotation)
private Vector3 GetLocalPositionInternal(AnimationStream& stream)
private void SetLocalPositionInternal(AnimationStream& stream, Vector3 position)
private Quaternion GetLocalRotationInternal(AnimationStream& stream)
private void SetLocalRotationInternal(AnimationStream& stream, Quaternion rotation)
private Vector3 GetLocalScaleInternal(AnimationStream& stream)
private void SetLocalScaleInternal(AnimationStream& stream, Vector3 scale)
private bool GetPositionReadMaskInternal(AnimationStream& stream)
private bool GetRotationReadMaskInternal(AnimationStream& stream)
private bool GetScaleReadMaskInternal(AnimationStream& stream)
private void GetLocalTRSInternal(AnimationStream& stream, Vector3& position, Quaternion& rotation, Vector3& scale)
private void SetLocalTRSInternal(AnimationStream& stream, Vector3 position, Quaternion rotation, Vector3 scale, bool useMask)
private void GetGlobalTRInternal(AnimationStream& stream, Vector3& position, Quaternion& rotation)
private void SetGlobalTRInternal(AnimationStream& stream, Vector3 position, Quaternion rotation, bool useMask)
private void ResolveInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream)
private void GetPositionInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Vector3& ret)
private void SetPositionInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Vector3& position)
private void GetRotationInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Quaternion& ret)
private void SetRotationInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Quaternion& rotation)
private void GetLocalPositionInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Vector3& ret)
private void SetLocalPositionInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Vector3& position)
private void GetLocalRotationInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Quaternion& ret)
private void SetLocalRotationInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Quaternion& rotation)
private void GetLocalScaleInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Vector3& ret)
private void SetLocalScaleInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Vector3& scale)
private bool GetPositionReadMaskInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream)
private bool GetRotationReadMaskInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream)
private bool GetScaleReadMaskInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream)
private void GetLocalTRSInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Vector3& position, Quaternion& rotation, Vector3& scale)
private void SetLocalTRSInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Vector3& position, Quaternion& rotation, Vector3& scale, bool useMask)
private void GetGlobalTRInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Vector3& position, Quaternion& rotation)
private void SetGlobalTRInternal_Injected(TransformStreamHandle& _unity_self, AnimationStream& stream, Vector3& position, Quaternion& rotation, bool useMask)
}
public UnityEngine.AnimationState : TrackedReference {
public bool enabled
public float weight
public WrapMode wrapMode
public float time
public float normalizedTime
public float speed
public float normalizedSpeed
public float length
public int layer
public AnimationClip clip
public string name
public AnimationBlendMode blendMode
public bool get_enabled()
public void set_enabled(bool value)
public float get_weight()
public void set_weight(float value)
public WrapMode get_wrapMode()
public void set_wrapMode(WrapMode value)
public float get_time()
public void set_time(float value)
public float get_normalizedTime()
public void set_normalizedTime(float value)
public float get_speed()
public void set_speed(float value)
public float get_normalizedSpeed()
public void set_normalizedSpeed(float value)
public float get_length()
public int get_layer()
public void set_layer(int value)
public AnimationClip get_clip()
public void AddMixingTransform(Transform mix, bool recursive)
public void AddMixingTransform(Transform mix)
public void RemoveMixingTransform(Transform mix)
public string get_name()
public void set_name(string value)
public AnimationBlendMode get_blendMode()
public void set_blendMode(AnimationBlendMode value)
}
public UnityEngine.Animator : Behaviour {
public bool isOptimizable
public bool isHuman
public bool hasRootMotion
internal bool isRootPositionOrRotationControlledByCurves
public float humanScale
public bool isInitialized
public Vector3 deltaPosition
public Quaternion deltaRotation
public Vector3 velocity
public Vector3 angularVelocity
public Vector3 rootPosition
public Quaternion rootRotation
public bool applyRootMotion
public bool linearVelocityBlending
public bool animatePhysics
public AnimatorUpdateMode updateMode
public bool hasTransformHierarchy
internal bool allowConstantClipSamplingOptimization
public float gravityWeight
public Vector3 bodyPosition
internal Vector3 bodyPositionInternal
public Quaternion bodyRotation
internal Quaternion bodyRotationInternal
public bool stabilizeFeet
public int layerCount
public AnimatorControllerParameter[] parameters
public int parameterCount
public float feetPivotActive
public float pivotWeight
public Vector3 pivotPosition
public bool isMatchingTarget
public float speed
public Vector3 targetPosition
public Quaternion targetRotation
internal Transform avatarRoot
public AnimatorCullingMode cullingMode
public float playbackTime
public float recorderStartTime
public float recorderStopTime
public AnimatorRecorderMode recorderMode
public RuntimeAnimatorController runtimeAnimatorController
public bool hasBoundPlayables
public Avatar avatar
public PlayableGraph playableGraph
public bool layersAffectMassCenter
public float leftFeetBottomHeight
public float rightFeetBottomHeight
internal bool supportsOnAnimatorMove
public bool logWarnings
public bool fireEvents
public bool keepAnimatorControllerStateOnDisable
public bool get_isOptimizable()
public bool get_isHuman()
public bool get_hasRootMotion()
internal bool get_isRootPositionOrRotationControlledByCurves()
public float get_humanScale()
public bool get_isInitialized()
public float GetFloat(string name)
public float GetFloat(int id)
public void SetFloat(string name, float value)
public void SetFloat(string name, float value, float dampTime, float deltaTime)
public void SetFloat(int id, float value)
public void SetFloat(int id, float value, float dampTime, float deltaTime)
public bool GetBool(string name)
public bool GetBool(int id)
public void SetBool(string name, bool value)
public void SetBool(int id, bool value)
public int GetInteger(string name)
public int GetInteger(int id)
public void SetInteger(string name, int value)
public void SetInteger(int id, int value)
public void SetTrigger(string name)
public void SetTrigger(int id)
public void ResetTrigger(string name)
public void ResetTrigger(int id)
public bool IsParameterControlledByCurve(string name)
public bool IsParameterControlledByCurve(int id)
public Vector3 get_deltaPosition()
public Quaternion get_deltaRotation()
public Vector3 get_velocity()
public Vector3 get_angularVelocity()
public Vector3 get_rootPosition()
public void set_rootPosition(Vector3 value)
public Quaternion get_rootRotation()
public void set_rootRotation(Quaternion value)
public bool get_applyRootMotion()
public void set_applyRootMotion(bool value)
public bool get_linearVelocityBlending()
public void set_linearVelocityBlending(bool value)
public bool get_animatePhysics()
public void set_animatePhysics(bool value)
public AnimatorUpdateMode get_updateMode()
public void set_updateMode(AnimatorUpdateMode value)
public bool get_hasTransformHierarchy()
internal bool get_allowConstantClipSamplingOptimization()
internal void set_allowConstantClipSamplingOptimization(bool value)
public float get_gravityWeight()
public Vector3 get_bodyPosition()
public void set_bodyPosition(Vector3 value)
internal Vector3 get_bodyPositionInternal()
internal void set_bodyPositionInternal(Vector3 value)
public Quaternion get_bodyRotation()
public void set_bodyRotation(Quaternion value)
internal Quaternion get_bodyRotationInternal()
internal void set_bodyRotationInternal(Quaternion value)
public Vector3 GetIKPosition(AvatarIKGoal goal)
private Vector3 GetGoalPosition(AvatarIKGoal goal)
public void SetIKPosition(AvatarIKGoal goal, Vector3 goalPosition)
private void SetGoalPosition(AvatarIKGoal goal, Vector3 goalPosition)
public Quaternion GetIKRotation(AvatarIKGoal goal)
private Quaternion GetGoalRotation(AvatarIKGoal goal)
public void SetIKRotation(AvatarIKGoal goal, Quaternion goalRotation)
private void SetGoalRotation(AvatarIKGoal goal, Quaternion goalRotation)
public float GetIKPositionWeight(AvatarIKGoal goal)
private float GetGoalWeightPosition(AvatarIKGoal goal)
public void SetIKPositionWeight(AvatarIKGoal goal, float value)
private void SetGoalWeightPosition(AvatarIKGoal goal, float value)
public float GetIKRotationWeight(AvatarIKGoal goal)
private float GetGoalWeightRotation(AvatarIKGoal goal)
public void SetIKRotationWeight(AvatarIKGoal goal, float value)
private void SetGoalWeightRotation(AvatarIKGoal goal, float value)
public Vector3 GetIKHintPosition(AvatarIKHint hint)
private Vector3 GetHintPosition(AvatarIKHint hint)
public void SetIKHintPosition(AvatarIKHint hint, Vector3 hintPosition)
private void SetHintPosition(AvatarIKHint hint, Vector3 hintPosition)
public float GetIKHintPositionWeight(AvatarIKHint hint)
private float GetHintWeightPosition(AvatarIKHint hint)
public void SetIKHintPositionWeight(AvatarIKHint hint, float value)
private void SetHintWeightPosition(AvatarIKHint hint, float value)
public void SetLookAtPosition(Vector3 lookAtPosition)
private void SetLookAtPositionInternal(Vector3 lookAtPosition)
public void SetLookAtWeight(float weight)
public void SetLookAtWeight(float weight, float bodyWeight)
public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
private void SetLookAtWeightInternal(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
public void SetBoneLocalRotation(HumanBodyBones humanBoneId, Quaternion rotation)
private void SetBoneLocalRotationInternal(int humanBoneId, Quaternion rotation)
private ScriptableObject GetBehaviour(Type type)
public T GetBehaviour()
private T[] ConvertStateMachineBehaviour(ScriptableObject[] rawObjects)
public T[] GetBehaviours()
internal ScriptableObject[] InternalGetBehaviours(Type type)
public StateMachineBehaviour[] GetBehaviours(int fullPathHash, int layerIndex)
internal ScriptableObject[] InternalGetBehavioursByKey(int fullPathHash, int layerIndex, Type type)
public bool get_stabilizeFeet()
public void set_stabilizeFeet(bool value)
public int get_layerCount()
public string GetLayerName(int layerIndex)
public int GetLayerIndex(string layerName)
public float GetLayerWeight(int layerIndex)
public void SetLayerWeight(int layerIndex, float weight)
private void GetAnimatorStateInfo(int layerIndex, StateInfoIndex stateInfoIndex, AnimatorStateInfo& info)
public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex)
public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex)
private void GetAnimatorTransitionInfo(int layerIndex, AnimatorTransitionInfo& info)
public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex)
internal int GetAnimatorClipInfoCount(int layerIndex, bool current)
public int GetCurrentAnimatorClipInfoCount(int layerIndex)
public int GetNextAnimatorClipInfoCount(int layerIndex)
public AnimatorClipInfo[] GetCurrentAnimatorClipInfo(int layerIndex)
public AnimatorClipInfo[] GetNextAnimatorClipInfo(int layerIndex)
public void GetCurrentAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
private void GetAnimatorClipInfoInternal(int layerIndex, bool isCurrent, object clips)
public void GetNextAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
public bool IsInTransition(int layerIndex)
public AnimatorControllerParameter[] get_parameters()
public int get_parameterCount()
public AnimatorControllerParameter GetParameter(int index)
public float get_feetPivotActive()
public void set_feetPivotActive(float value)
public float get_pivotWeight()
public Vector3 get_pivotPosition()
private void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, int targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime)
public void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, AvatarTarget targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime)
public void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, AvatarTarget targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime)
public void InterruptMatchTarget()
public void InterruptMatchTarget(bool completeMatch)
public bool get_isMatchingTarget()
public float get_speed()
public void set_speed(float value)
public void ForceStateNormalizedTime(float normalizedTime)
public void CrossFadeInFixedTime(string stateName, float fixedTransitionDuration)
public void CrossFadeInFixedTime(string stateName, float fixedTransitionDuration, int layer)
public void CrossFadeInFixedTime(string stateName, float fixedTransitionDuration, int layer, float fixedTimeOffset)
public void CrossFadeInFixedTime(string stateName, float fixedTransitionDuration, int layer, float fixedTimeOffset, float normalizedTransitionTime)
public void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration, int layer, float fixedTimeOffset)
public void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration, int layer)
public void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration)
public void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration, int layer, float fixedTimeOffset, float normalizedTransitionTime)
public void WriteDefaultValues()
public void CrossFade(string stateName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset)
public void CrossFade(string stateName, float normalizedTransitionDuration, int layer)
public void CrossFade(string stateName, float normalizedTransitionDuration)
public void CrossFade(string stateName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset, float normalizedTransitionTime)
public void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset, float normalizedTransitionTime)
public void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset)
public void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer)
public void CrossFade(int stateHashName, float normalizedTransitionDuration)
public void PlayInFixedTime(string stateName, int layer)
public void PlayInFixedTime(string stateName)
public void PlayInFixedTime(string stateName, int layer, float fixedTime)
public void PlayInFixedTime(int stateNameHash, int layer, float fixedTime)
public void PlayInFixedTime(int stateNameHash, int layer)
public void PlayInFixedTime(int stateNameHash)
public void Play(string stateName, int layer)
public void Play(string stateName)
public void Play(string stateName, int layer, float normalizedTime)
public void Play(int stateNameHash, int layer, float normalizedTime)
public void Play(int stateNameHash, int layer)
public void Play(int stateNameHash)
public void SetTarget(AvatarTarget targetIndex, float targetNormalizedTime)
public Vector3 get_targetPosition()
public Quaternion get_targetRotation()
public bool IsControlled(Transform transform)
internal bool IsBoneTransform(Transform transform)
internal Transform get_avatarRoot()
public Transform GetBoneTransform(HumanBodyBones humanBoneId)
internal Transform GetBoneTransformInternal(int humanBoneId)
public AnimatorCullingMode get_cullingMode()
public void set_cullingMode(AnimatorCullingMode value)
public void StartPlayback()
public void StopPlayback()
public float get_playbackTime()
public void set_playbackTime(float value)
public void StartRecording(int frameCount)
public void StopRecording()
public float get_recorderStartTime()
public void set_recorderStartTime(float value)
private float GetRecorderStartTime()
public float get_recorderStopTime()
public void set_recorderStopTime(float value)
private float GetRecorderStopTime()
public AnimatorRecorderMode get_recorderMode()
public RuntimeAnimatorController get_runtimeAnimatorController()
public void set_runtimeAnimatorController(RuntimeAnimatorController value)
public bool get_hasBoundPlayables()
internal void ClearInternalControllerPlayable()
public bool HasState(int layerIndex, int stateID)
public int StringToHash(string name)
public Avatar get_avatar()
public void set_avatar(Avatar value)
internal string GetStats()
public PlayableGraph get_playableGraph()
private void GetCurrentGraph(PlayableGraph& graph)
private void CheckIfInIKPass()
private bool IsInIKPass()
private void SetFloatString(string name, float value)
private void SetFloatID(int id, float value)
private float GetFloatString(string name)
private float GetFloatID(int id)
private void SetBoolString(string name, bool value)
private void SetBoolID(int id, bool value)
private bool GetBoolString(string name)
private bool GetBoolID(int id)
private void SetIntegerString(string name, int value)
private void SetIntegerID(int id, int value)
private int GetIntegerString(string name)
private int GetIntegerID(int id)
private void SetTriggerString(string name)
private void SetTriggerID(int id)
private void ResetTriggerString(string name)
private void ResetTriggerID(int id)
private bool IsParameterControlledByCurveString(string name)
private bool IsParameterControlledByCurveID(int id)
private void SetFloatStringDamp(string name, float value, float dampTime, float deltaTime)
private void SetFloatIDDamp(int id, float value, float dampTime, float deltaTime)
public bool get_layersAffectMassCenter()
public void set_layersAffectMassCenter(bool value)
public float get_leftFeetBottomHeight()
public float get_rightFeetBottomHeight()
internal bool get_supportsOnAnimatorMove()
internal void OnUpdateModeChanged()
internal void OnCullingModeChanged()
internal void WriteDefaultPose()
public void Update(float deltaTime)
public void Rebind()
private void Rebind(bool writeDefaultValues)
public void ApplyBuiltinRootMotion()
internal void EvaluateController()
private void EvaluateController(float deltaTime)
internal string GetCurrentStateName(int layerIndex)
internal string GetNextStateName(int layerIndex)
private string GetAnimatorStateName(int layerIndex, bool current)
internal string ResolveHash(int hash)
public bool get_logWarnings()
public void set_logWarnings(bool value)
public bool get_fireEvents()
public void set_fireEvents(bool value)
public bool get_keepAnimatorControllerStateOnDisable()
public void set_keepAnimatorControllerStateOnDisable(bool value)
public Vector3 GetVector(string name)
public Vector3 GetVector(int id)
public void SetVector(string name, Vector3 value)
public void SetVector(int id, Vector3 value)
public Quaternion GetQuaternion(string name)
public Quaternion GetQuaternion(int id)
public void SetQuaternion(string name, Quaternion value)
public void SetQuaternion(int id, Quaternion value)
private void get_deltaPosition_Injected(Vector3& ret)
private void get_deltaRotation_Injected(Quaternion& ret)
private void get_velocity_Injected(Vector3& ret)
private void get_angularVelocity_Injected(Vector3& ret)
private void get_rootPosition_Injected(Vector3& ret)
private void set_rootPosition_Injected(Vector3& value)
private void get_rootRotation_Injected(Quaternion& ret)
private void set_rootRotation_Injected(Quaternion& value)
private void get_bodyPositionInternal_Injected(Vector3& ret)
private void set_bodyPositionInternal_Injected(Vector3& value)
private void get_bodyRotationInternal_Injected(Quaternion& ret)
private void set_bodyRotationInternal_Injected(Quaternion& value)
private void GetGoalPosition_Injected(AvatarIKGoal goal, Vector3& ret)
private void SetGoalPosition_Injected(AvatarIKGoal goal, Vector3& goalPosition)
private void GetGoalRotation_Injected(AvatarIKGoal goal, Quaternion& ret)
private void SetGoalRotation_Injected(AvatarIKGoal goal, Quaternion& goalRotation)
private void GetHintPosition_Injected(AvatarIKHint hint, Vector3& ret)
private void SetHintPosition_Injected(AvatarIKHint hint, Vector3& hintPosition)
private void SetLookAtPositionInternal_Injected(Vector3& lookAtPosition)
private void SetBoneLocalRotationInternal_Injected(int humanBoneId, Quaternion& rotation)
private void get_pivotPosition_Injected(Vector3& ret)
private void MatchTarget_Injected(Vector3& matchPosition, Quaternion& matchRotation, int targetBodyPart, MatchTargetWeightMask& weightMask, float startNormalizedTime, float targetNormalizedTime)
private void get_targetPosition_Injected(Vector3& ret)
private void get_targetRotation_Injected(Quaternion& ret)
}
public UnityEngine.AnimatorClipInfo : ValueType {
private int m_ClipInstanceID
private float m_Weight
public AnimationClip clip
public float weight
public AnimationClip get_clip()
public float get_weight()
private AnimationClip InstanceIDToAnimationClipPPtr(int instanceID)
}
public UnityEngine.AnimatorControllerParameter : object {
internal string m_Name
internal AnimatorControllerParameterType m_Type
internal float m_DefaultFloat
internal int m_DefaultInt
internal bool m_DefaultBool
public string name
public int nameHash
public AnimatorControllerParameterType type
public float defaultFloat
public int defaultInt
public bool defaultBool
public string get_name()
public int get_nameHash()
public AnimatorControllerParameterType get_type()
public void set_type(AnimatorControllerParameterType value)
public float get_defaultFloat()
public void set_defaultFloat(float value)
public int get_defaultInt()
public void set_defaultInt(int value)
public bool get_defaultBool()
public void set_defaultBool(bool value)
public bool Equals(object o)
public int GetHashCode()
}
public UnityEngine.AnimatorControllerParameterType : Enum {
public int value__
public AnimatorControllerParameterType Float
public AnimatorControllerParameterType Int
public AnimatorControllerParameterType Bool
public AnimatorControllerParameterType Trigger
}
public UnityEngine.AnimatorCullingMode : Enum {
public int value__
public AnimatorCullingMode AlwaysAnimate
public AnimatorCullingMode CullUpdateTransforms
public AnimatorCullingMode CullCompletely
}
public UnityEngine.AnimatorOverrideController : RuntimeAnimatorController {
internal OnOverrideControllerDirtyCallback OnOverrideControllerDirty
public RuntimeAnimatorController runtimeAnimatorController
public AnimationClip Item
public AnimationClip Item
public int overridesCount
public AnimationClipPair[] clips
public void .ctor(RuntimeAnimatorController controller)
private void Internal_Create(AnimatorOverrideController self, RuntimeAnimatorController controller)
public RuntimeAnimatorController get_runtimeAnimatorController()
public void set_runtimeAnimatorController(RuntimeAnimatorController value)
public AnimationClip get_Item(string name)
public void set_Item(string name, AnimationClip value)
private AnimationClip Internal_GetClipByName(string name, bool returnEffectiveClip)
private void Internal_SetClipByName(string name, AnimationClip clip)
public AnimationClip get_Item(AnimationClip clip)
public void set_Item(AnimationClip clip, AnimationClip value)
private AnimationClip GetClip(AnimationClip originalClip, bool returnEffectiveClip)
private void SetClip(AnimationClip originalClip, AnimationClip overrideClip, bool notify)
private void SendNotification()
private AnimationClip GetOriginalClip(int index)
private AnimationClip GetOverrideClip(AnimationClip originalClip)
public int get_overridesCount()
public void GetOverrides(List`1<KeyValuePair`2<AnimationClip, AnimationClip>> overrides)
public void ApplyOverrides(IList`1<KeyValuePair`2<AnimationClip, AnimationClip>> overrides)
public AnimationClipPair[] get_clips()
public void set_clips(AnimationClipPair[] value)
internal void PerformOverrideClipListCleanup()
internal void OnInvalidateOverrideController(AnimatorOverrideController controller)
}
public UnityEngine.AnimatorRecorderMode : Enum {
public int value__
public AnimatorRecorderMode Offline
public AnimatorRecorderMode Playback
public AnimatorRecorderMode Record
}
public UnityEngine.AnimatorStateInfo : ValueType {
private int m_Name
private int m_Path
private int m_FullPath
private float m_NormalizedTime
private float m_Length
private float m_Speed
private float m_SpeedMultiplier
private int m_Tag
private int m_Loop
public int fullPathHash
public int nameHash
public int shortNameHash
public float normalizedTime
public float length
public float speed
public float speedMultiplier
public int tagHash
public bool loop
public bool IsName(string name)
public int get_fullPathHash()
public int get_nameHash()
public int get_shortNameHash()
public float get_normalizedTime()
public float get_length()
public float get_speed()
public float get_speedMultiplier()
public int get_tagHash()
public bool IsTag(string tag)
public bool get_loop()
}
public UnityEngine.AnimatorTransitionInfo : ValueType {
private int m_FullPath
private int m_UserName
private int m_Name
private bool m_HasFixedDuration
private float m_Duration
private float m_NormalizedTime
private bool m_AnyState
private int m_TransitionType
public int fullPathHash
public int nameHash
public int userNameHash
public DurationUnit durationUnit
public float duration
public float normalizedTime
public bool anyState
internal bool entry
internal bool exit
public bool IsName(string name)
public bool IsUserName(string name)
public int get_fullPathHash()
public int get_nameHash()
public int get_userNameHash()
public DurationUnit get_durationUnit()
public float get_duration()
public float get_normalizedTime()
public bool get_anyState()
internal bool get_entry()
internal bool get_exit()
}
public UnityEngine.AnimatorUpdateMode : Enum {
public int value__
public AnimatorUpdateMode Normal
public AnimatorUpdateMode AnimatePhysics
public AnimatorUpdateMode UnscaledTime
}
public UnityEngine.AnimatorUtility : object {
public void OptimizeTransformHierarchy(GameObject go, String[] exposedTransforms)
public void DeoptimizeTransformHierarchy(GameObject go)
}
public UnityEngine.ArmDof : Enum {
public int value__
public ArmDof ShoulderDownUp
public ArmDof ShoulderFrontBack
public ArmDof ArmDownUp
public ArmDof ArmFrontBack
public ArmDof ArmRollInOut
public ArmDof ForeArmCloseOpen
public ArmDof ForeArmRollInOut
public ArmDof HandDownUp
public ArmDof HandInOut
public ArmDof LastArmDof
}
public UnityEngine.Avatar : Object {
public bool isValid
public bool isHuman
public HumanDescription humanDescription
public bool get_isValid()
public bool get_isHuman()
public HumanDescription get_humanDescription()
internal void SetMuscleMinMax(int muscleId, float min, float max)
internal void SetParameter(int parameterId, float value)
internal float GetAxisLength(int humanId)
internal Quaternion GetPreRotation(int humanId)
internal Quaternion GetPostRotation(int humanId)
internal Quaternion GetZYPostQ(int humanId, Quaternion parentQ, Quaternion q)
internal Quaternion GetZYRoll(int humanId, Vector3 uvw)
internal Vector3 GetLimitSign(int humanId)
internal float Internal_GetAxisLength(int humanId)
internal Quaternion Internal_GetPreRotation(int humanId)
internal Quaternion Internal_GetPostRotation(int humanId)
internal Quaternion Internal_GetZYPostQ(int humanId, Quaternion parentQ, Quaternion q)
internal Quaternion Internal_GetZYRoll(int humanId, Vector3 uvw)
internal Vector3 Internal_GetLimitSign(int humanId)
private void get_humanDescription_Injected(HumanDescription& ret)
private void Internal_GetPreRotation_Injected(int humanId, Quaternion& ret)
private void Internal_GetPostRotation_Injected(int humanId, Quaternion& ret)
private void Internal_GetZYPostQ_Injected(int humanId, Quaternion& parentQ, Quaternion& q, Quaternion& ret)
private void Internal_GetZYRoll_Injected(int humanId, Vector3& uvw, Quaternion& ret)
private void Internal_GetLimitSign_Injected(int humanId, Vector3& ret)
}
public UnityEngine.AvatarBuilder : object {
public Avatar BuildHumanAvatar(GameObject go, HumanDescription humanDescription)
private Avatar BuildHumanAvatarInternal(GameObject go, HumanDescription humanDescription)
public Avatar BuildGenericAvatar(GameObject go, string rootMotionTransformName)
private Avatar BuildHumanAvatarInternal_Injected(GameObject go, HumanDescription& humanDescription)
}
public UnityEngine.AvatarIKGoal : Enum {
public int value__
public AvatarIKGoal LeftFoot
public AvatarIKGoal RightFoot
public AvatarIKGoal LeftHand
public AvatarIKGoal RightHand
}
public UnityEngine.AvatarIKHint : Enum {
public int value__
public AvatarIKHint LeftKnee
public AvatarIKHint RightKnee
public AvatarIKHint LeftElbow
public AvatarIKHint RightElbow
}
public UnityEngine.AvatarMask : Object {
public int humanoidBodyPartCount
public int transformCount
internal bool hasFeetIK
private void Internal_Create(AvatarMask self)
public int get_humanoidBodyPartCount()
public bool GetHumanoidBodyPartActive(AvatarMaskBodyPart index)
public void SetHumanoidBodyPartActive(AvatarMaskBodyPart index, bool value)
public int get_transformCount()
public void set_transformCount(int value)
public void AddTransformPath(Transform transform)
public void AddTransformPath(Transform transform, bool recursive)
public void RemoveTransformPath(Transform transform)
public void RemoveTransformPath(Transform transform, bool recursive)
public string GetTransformPath(int index)
public void SetTransformPath(int index, string path)
private float GetTransformWeight(int index)
private void SetTransformWeight(int index, float weight)
public bool GetTransformActive(int index)
public void SetTransformActive(int index, bool value)
internal bool get_hasFeetIK()
internal void Copy(AvatarMask other)
}
public UnityEngine.AvatarMaskBodyPart : Enum {
public int value__
public AvatarMaskBodyPart Root
public AvatarMaskBodyPart Body
public AvatarMaskBodyPart Head
public AvatarMaskBodyPart LeftLeg
public AvatarMaskBodyPart RightLeg
public AvatarMaskBodyPart LeftArm
public AvatarMaskBodyPart RightArm
public AvatarMaskBodyPart LeftFingers
public AvatarMaskBodyPart RightFingers
public AvatarMaskBodyPart LeftFootIK
public AvatarMaskBodyPart RightFootIK
public AvatarMaskBodyPart LeftHandIK
public AvatarMaskBodyPart RightHandIK
public AvatarMaskBodyPart LastBodyPart
}
public UnityEngine.AvatarTarget : Enum {
public int value__
public AvatarTarget Root
public AvatarTarget Body
public AvatarTarget LeftFoot
public AvatarTarget RightFoot
public AvatarTarget LeftHand
public AvatarTarget RightHand
}
public UnityEngine.BodyDof : Enum {
public int value__
public BodyDof SpineFrontBack
public BodyDof SpineLeftRight
public BodyDof SpineRollLeftRight
public BodyDof ChestFrontBack
public BodyDof ChestLeftRight
public BodyDof ChestRollLeftRight
public BodyDof UpperChestFrontBack
public BodyDof UpperChestLeftRight
public BodyDof UpperChestRollLeftRight
public BodyDof LastBodyDof
}
internal UnityEngine.Dof : Enum {
public int value__
public Dof BodyDofStart
public Dof HeadDofStart
public Dof LeftLegDofStart
public Dof RightLegDofStart
public Dof LeftArmDofStart
public Dof RightArmDofStart
public Dof LeftThumbDofStart
public Dof LeftIndexDofStart
public Dof LeftMiddleDofStart
public Dof LeftRingDofStart
public Dof LeftLittleDofStart
public Dof RightThumbDofStart
public Dof RightIndexDofStart
public Dof RightMiddleDofStart
public Dof RightRingDofStart
public Dof RightLittleDofStart
public Dof LastDof
}
public UnityEngine.DurationUnit : Enum {
public int value__
public DurationUnit Fixed
public DurationUnit Normalized
}
public UnityEngine.Experimental.Animations.AnimationPlayableOutputExtensions : object {
public AnimationStreamSource GetAnimationStreamSource(AnimationPlayableOutput output)
public void SetAnimationStreamSource(AnimationPlayableOutput output, AnimationStreamSource streamSource)
public ushort GetSortingOrder(AnimationPlayableOutput output)
public void SetSortingOrder(AnimationPlayableOutput output, ushort sortingOrder)
private AnimationStreamSource InternalGetAnimationStreamSource(PlayableOutputHandle output)
private void InternalSetAnimationStreamSource(PlayableOutputHandle output, AnimationStreamSource streamSource)
private int InternalGetSortingOrder(PlayableOutputHandle output)
private void InternalSetSortingOrder(PlayableOutputHandle output, int sortingOrder)
private AnimationStreamSource InternalGetAnimationStreamSource_Injected(PlayableOutputHandle& output)
private void InternalSetAnimationStreamSource_Injected(PlayableOutputHandle& output, AnimationStreamSource streamSource)
private int InternalGetSortingOrder_Injected(PlayableOutputHandle& output)
private void InternalSetSortingOrder_Injected(PlayableOutputHandle& output, int sortingOrder)
}
public UnityEngine.Experimental.Animations.AnimationStreamSource : Enum {
public int value__
public AnimationStreamSource DefaultValues
public AnimationStreamSource PreviousInputs
}
public UnityEngine.Experimental.Animations.IAnimationWindowPreview {
public void StartPreview()
public void StopPreview()
public void UpdatePreviewGraph(PlayableGraph graph)
public Playable BuildPreviewGraph(PlayableGraph graph, Playable inputPlayable)
}
public UnityEngine.FingerDof : Enum {
public int value__
public FingerDof ProximalDownUp
public FingerDof ProximalInOut
public FingerDof IntermediateCloseOpen
public FingerDof DistalCloseOpen
public FingerDof LastFingerDof
}
public UnityEngine.HeadDof : Enum {
public int value__
public HeadDof NeckFrontBack
public HeadDof NeckLeftRight
public HeadDof NeckRollLeftRight
public HeadDof HeadFrontBack
public HeadDof HeadLeftRight
public HeadDof HeadRollLeftRight
public HeadDof LeftEyeDownUp
public HeadDof LeftEyeInOut
public HeadDof RightEyeDownUp
public HeadDof RightEyeInOut
public HeadDof JawDownUp
public HeadDof JawLeftRight
public HeadDof LastHeadDof
}
public UnityEngine.HumanBodyBones : Enum {
public int value__
public HumanBodyBones Hips
public HumanBodyBones LeftUpperLeg
public HumanBodyBones RightUpperLeg
public HumanBodyBones LeftLowerLeg
public HumanBodyBones RightLowerLeg
public HumanBodyBones LeftFoot
public HumanBodyBones RightFoot
public HumanBodyBones Spine
public HumanBodyBones Chest
public HumanBodyBones UpperChest
public HumanBodyBones Neck
public HumanBodyBones Head
public HumanBodyBones LeftShoulder
public HumanBodyBones RightShoulder
public HumanBodyBones LeftUpperArm
public HumanBodyBones RightUpperArm
public HumanBodyBones LeftLowerArm
public HumanBodyBones RightLowerArm
public HumanBodyBones LeftHand
public HumanBodyBones RightHand
public HumanBodyBones LeftToes
public HumanBodyBones RightToes
public HumanBodyBones LeftEye
public HumanBodyBones RightEye
public HumanBodyBones Jaw
public HumanBodyBones LeftThumbProximal
public HumanBodyBones LeftThumbIntermediate
public HumanBodyBones LeftThumbDistal
public HumanBodyBones LeftIndexProximal
public HumanBodyBones LeftIndexIntermediate
public HumanBodyBones LeftIndexDistal
public HumanBodyBones LeftMiddleProximal
public HumanBodyBones LeftMiddleIntermediate
public HumanBodyBones LeftMiddleDistal
public HumanBodyBones LeftRingProximal
public HumanBodyBones LeftRingIntermediate
public HumanBodyBones LeftRingDistal
public HumanBodyBones LeftLittleProximal
public HumanBodyBones LeftLittleIntermediate
public HumanBodyBones LeftLittleDistal
public HumanBodyBones RightThumbProximal
public HumanBodyBones RightThumbIntermediate
public HumanBodyBones RightThumbDistal
public HumanBodyBones RightIndexProximal
public HumanBodyBones RightIndexIntermediate
public HumanBodyBones RightIndexDistal
public HumanBodyBones RightMiddleProximal
public HumanBodyBones RightMiddleIntermediate
public HumanBodyBones RightMiddleDistal
public HumanBodyBones RightRingProximal
public HumanBodyBones RightRingIntermediate
public HumanBodyBones RightRingDistal
public HumanBodyBones RightLittleProximal
public HumanBodyBones RightLittleIntermediate
public HumanBodyBones RightLittleDistal
public HumanBodyBones LastBone
}
public UnityEngine.HumanBone : ValueType {
private string m_BoneName
private string m_HumanName
public HumanLimit limit
public string boneName
public string humanName
public string get_boneName()
public void set_boneName(string value)
public string get_humanName()
public void set_humanName(string value)
}
public UnityEngine.HumanDescription : ValueType {
public HumanBone[] human
public SkeletonBone[] skeleton
internal float m_ArmTwist
internal float m_ForeArmTwist
internal float m_UpperLegTwist
internal float m_LegTwist
internal float m_ArmStretch
internal float m_LegStretch
internal float m_FeetSpacing
internal float m_GlobalScale
internal string m_RootMotionBoneName
internal bool m_HasTranslationDoF
internal bool m_HasExtraRoot
internal bool m_SkeletonHasParents
public float upperArmTwist
public float lowerArmTwist
public float upperLegTwist
public float lowerLegTwist
public float armStretch
public float legStretch
public float feetSpacing
public bool hasTranslationDoF
public float get_upperArmTwist()
public void set_upperArmTwist(float value)
public float get_lowerArmTwist()
public void set_lowerArmTwist(float value)
public float get_upperLegTwist()
public void set_upperLegTwist(float value)
public float get_lowerLegTwist()
public void set_lowerLegTwist(float value)
public float get_armStretch()
public void set_armStretch(float value)
public float get_legStretch()
public void set_legStretch(float value)
public float get_feetSpacing()
public void set_feetSpacing(float value)
public bool get_hasTranslationDoF()
public void set_hasTranslationDoF(bool value)
}
public UnityEngine.HumanLimit : ValueType {
private Vector3 m_Min
private Vector3 m_Max
private Vector3 m_Center
private float m_AxisLength
private int m_UseDefaultValues
public bool useDefaultValues
public Vector3 min
public Vector3 max
public Vector3 center
public float axisLength
public bool get_useDefaultValues()
public void set_useDefaultValues(bool value)
public Vector3 get_min()
public void set_min(Vector3 value)
public Vector3 get_max()
public void set_max(Vector3 value)
public Vector3 get_center()
public void set_center(Vector3 value)
public float get_axisLength()
public void set_axisLength(float value)
}
internal UnityEngine.HumanParameter : Enum {
public int value__
public HumanParameter UpperArmTwist
public HumanParameter LowerArmTwist
public HumanParameter UpperLegTwist
public HumanParameter LowerLegTwist
public HumanParameter ArmStretch
public HumanParameter LegStretch
public HumanParameter FeetSpacing
}
public UnityEngine.HumanPartDof : Enum {
public int value__
public HumanPartDof Body
public HumanPartDof Head
public HumanPartDof LeftLeg
public HumanPartDof RightLeg
public HumanPartDof LeftArm
public HumanPartDof RightArm
public HumanPartDof LeftThumb
public HumanPartDof LeftIndex
public HumanPartDof LeftMiddle
public HumanPartDof LeftRing
public HumanPartDof LeftLittle
public HumanPartDof RightThumb
public HumanPartDof RightIndex
public HumanPartDof RightMiddle
public HumanPartDof RightRing
public HumanPartDof RightLittle
public HumanPartDof LastHumanPartDof
}
public UnityEngine.HumanPose : ValueType {
public Vector3 bodyPosition
public Quaternion bodyRotation
public Single[] muscles
internal void Init()
}
public UnityEngine.HumanPoseHandler : object {
internal IntPtr m_Ptr
private IntPtr Internal_Create(Avatar avatar, Transform root)
private void Internal_Destroy(IntPtr ptr)
private void GetHumanPose(Vector3& bodyPosition, Quaternion& bodyRotation, Single[] muscles)
private void SetHumanPose(Vector3& bodyPosition, Quaternion& bodyRotation, Single[] muscles)
public void Dispose()
public void .ctor(Avatar avatar, Transform root)
public void GetHumanPose(HumanPose& humanPose)
public void SetHumanPose(HumanPose& humanPose)
}
public UnityEngine.HumanTrait : object {
public int MuscleCount
public String[] MuscleName
public int BoneCount
public String[] BoneName
public int RequiredBoneCount
public int get_MuscleCount()
internal int GetBoneIndexFromMono(int humanId)
internal int GetBoneIndexToMono(int boneIndex)
public String[] get_MuscleName()
public int get_BoneCount()
public String[] get_BoneName()
public int MuscleFromBone(int i, int dofIndex)
private int Internal_MuscleFromBone(int i, int dofIndex)
public int BoneFromMuscle(int i)
private int Internal_BoneFromMuscle(int i)
public bool RequiredBone(int i)
private bool Internal_RequiredBone(int i)
public int get_RequiredBoneCount()
public float GetMuscleDefaultMin(int i)
public float GetMuscleDefaultMax(int i)
public float GetBoneDefaultHierarchyMass(int i)
public int GetParentBone(int i)
private float Internal_GetBoneHierarchyMass(int i)
private int Internal_GetParent(int i)
}
public UnityEngine.IAnimationClipSource {
public void GetAnimationClips(List`1<AnimationClip> results)
}
public UnityEngine.LegDof : Enum {
public int value__
public LegDof UpperLegFrontBack
public LegDof UpperLegInOut
public LegDof UpperLegRollInOut
public LegDof LegCloseOpen
public LegDof LegRollInOut
public LegDof FootCloseOpen
public LegDof FootInOut
public LegDof ToesUpDown
public LegDof LastLegDof
}
public UnityEngine.MatchTargetWeightMask : ValueType {
private Vector3 m_PositionXYZWeight
private float m_RotationWeight
public Vector3 positionXYZWeight
public float rotationWeight
public void .ctor(Vector3 positionXYZWeight, float rotationWeight)
public Vector3 get_positionXYZWeight()
public void set_positionXYZWeight(Vector3 value)
public float get_rotationWeight()
public void set_rotationWeight(float value)
}
public UnityEngine.Motion : Object {
private bool <isAnimatorMotion>k__BackingField
public float averageDuration
public float averageAngularSpeed
public Vector3 averageSpeed
public float apparentSpeed
public bool isLooping
public bool legacy
public bool isHumanMotion
public bool isAnimatorMotion
public float get_averageDuration()
public float get_averageAngularSpeed()
public Vector3 get_averageSpeed()
public float get_apparentSpeed()
public bool get_isLooping()
public bool get_legacy()
public bool get_isHumanMotion()
public bool ValidateIfRetargetable(bool val)
public bool get_isAnimatorMotion()
private void get_averageSpeed_Injected(Vector3& ret)
}
public UnityEngine.Playables.AnimationPlayableUtilities : object {
public void Play(Animator animator, Playable playable, PlayableGraph graph)
public AnimationClipPlayable PlayClip(Animator animator, AnimationClip clip, PlayableGraph& graph)
public AnimationMixerPlayable PlayMixer(Animator animator, int inputCount, PlayableGraph& graph)
public AnimationLayerMixerPlayable PlayLayerMixer(Animator animator, int inputCount, PlayableGraph& graph)
public AnimatorControllerPlayable PlayAnimatorController(Animator animator, RuntimeAnimatorController controller, PlayableGraph& graph)
}
public UnityEngine.PlayMode : Enum {
public int value__
public PlayMode StopSameLayer
public PlayMode StopAll
}
public UnityEngine.QueueMode : Enum {
public int value__
public QueueMode CompleteOthers
public QueueMode PlayNow
}
public UnityEngine.RuntimeAnimatorController : Object {
public AnimationClip[] animationClips
public AnimationClip[] get_animationClips()
}
public UnityEngine.SkeletonBone : ValueType {
public string name
internal string parentName
public Vector3 position
public Quaternion rotation
public Vector3 scale
public int transformModified
public int get_transformModified()
public void set_transformModified(int value)
}
internal UnityEngine.StateInfoIndex : Enum {
public int value__
public StateInfoIndex CurrentState
public StateInfoIndex NextState
public StateInfoIndex ExitState
public StateInfoIndex InterruptedState
}
public UnityEngine.StateMachineBehaviour : ScriptableObject {
public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
public void OnStateMachineExit(Animator animator, int stateMachinePathHash)
public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateMachineEnter(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller)
public void OnStateMachineExit(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller)
}
internal UnityEngine.TransitionType : Enum {
public int value__
public TransitionType Normal
public TransitionType Entry
public TransitionType Exit
}
