public Facepunch.AccountNotice : object {
private int <NoticeId>k__BackingField
private DateTime <Created>k__BackingField
private string <Json>k__BackingField
private string <Seen>k__BackingField
public int NoticeId
public DateTime Created
public string Json
public string Seen
public int get_NoticeId()
public void set_NoticeId(int value)
public DateTime get_Created()
public void set_Created(DateTime value)
public string get_Json()
public void set_Json(string value)
public string get_Seen()
public void set_Seen(string value)
}
public Facepunch.Application : object {
private MonoBehaviour _controller
public Manifest Manifest
private BaseIntegration <Integration>k__BackingField
public MonoBehaviour Controller
public BaseIntegration Integration
public MonoBehaviour get_Controller()
public void Initialize(BaseIntegration integration)
public BaseIntegration get_Integration()
public void set_Integration(BaseIntegration value)
}
internal Facepunch.ApplicationControllerMonobehaviour : MonoBehaviour {
public void OnApplicationQuit()
public void Update()
}
public Facepunch.BaseIntegration : object {
public string PublicKey
public string Bucket
public string UserId
public string UserName
public string ServerAddress
public string ServerName
public string LevelName
public int MinutesPlayed
public Auth Auth
public bool RestrictEditorFunctionality
public bool LocalApi
public string ApiUrl
public bool DebugOutput
public string get_PublicKey()
public string get_Bucket()
public void OnManifestFile(Manifest manifest)
public string get_UserId()
public string get_UserName()
public string get_ServerAddress()
public string get_ServerName()
public string get_LevelName()
public int get_MinutesPlayed()
public Auth get_Auth()
public bool get_RestrictEditorFunctionality()
public bool get_LocalApi()
public string get_ApiUrl()
public bool get_DebugOutput()
public bool ShouldReportException(string message, string stackTrace, LogType type)
}
public Facepunch.BenchmarkData : object {
public BenchmarkData Current
public Dictionary`2<string, float> Results
public string ComputerName
public string BuildDate
public string BranchName
public string Changeset
public string BuildId
public bool Auto
public int Version
public AppInfo AppInfo
public SystemInformation SystemInfo
private int frames
private int hitches
private int freezes
private float lastTime
private double frameTimes
private float AvgMilliseconds
private float avgFrameRate
public BenchmarkData New()
public void WriteTimersToResults()
public Task`1<string> Upload()
public string WriteJSON()
private float get_AvgMilliseconds()
private float get_avgFrameRate()
public void ResetCounters()
public void Frame()
public void CompleteDemoBenchmark(string benchmarkLabel)
}
public Facepunch.BenchmarkTimer : object {
public bool Enabled
public Dictionary`2<string, Stopwatch> All
private Stopwatch stopwatch
public BenchmarkTimer New(string name)
public void .ctor(string name)
public void Dispose()
}
public Facepunch.BinaryReaderExtensions : object {
public Vector3 ReadVector3(BinaryReader o)
}
public Facepunch.BinaryWriterExtensions : object {
public void Write(BinaryWriter o, Vector3 vec)
}
public Facepunch.BuildInfo : object {
private int <Date>k__BackingField
private ScmInfo <Scm>k__BackingField
private BuildDesc <Build>k__BackingField
private bool <Valid>k__BackingField
private BuildInfo _current
public int Date
public DateTime BuildDate
public ScmInfo Scm
public BuildDesc Build
public bool Valid
public BuildInfo Current
public int get_Date()
public void set_Date(int value)
public DateTime get_BuildDate()
public ScmInfo get_Scm()
public void set_Scm(ScmInfo value)
public BuildDesc get_Build()
public void set_Build(BuildDesc value)
public bool get_Valid()
public void set_Valid(bool value)
public BuildInfo get_Current()
}
public Facepunch.ComponentExtensions : object {
public T Duplicate(T obj)
public T[] Duplicate(T obj, int amount, bool includeOriginalInArray)
public void SetActive(T obj, bool active)
public Vector2 WorldToRectTransform(T obj, Vector2 worldPos)
public Rect GetWorldRect(T obj)
public bool GetComponent(T obj, U& value)
public bool GetComponentInParent(T obj, U& value)
public bool GetComponentInChildren(T obj, U& value)
}
public Facepunch.Database : object {
public void Insert(string parent, object contents, Action`1<bool> onFinished)
public void Insert(string parent, object contents, Action`2<bool, string> onFinished)
public void Remove(string parent, string id, Action`1<bool> onFinished)
public Result`1<T> Query(string parent, int limit, Action`1<Result`1<T>> onFinished)
public void Count(string parent, Action`1<int> onResult)
}
public Facepunch.DebugDraw : object {
public void Point(Vector3 position, Color color, float scale, float duration, bool depthTest)
public void Point(Vector3 position, float scale, float duration, bool depthTest)
public void Bounds(Bounds bounds, Color color, float duration, bool depthTest)
public void Normal(Vector3 point, Vector3 normal, float size, Color color, float duration, bool depthtest)
public void Bounds(Bounds bounds, float duration, bool depthTest)
public void LocalCube(Transform transform, Vector3 size, Color color, Vector3 center, float duration, bool depthTest)
public void LocalCube(Transform transform, Vector3 size, Vector3 center, float duration, bool depthTest)
public void LocalCube(Matrix4x4 space, Vector3 size, Color color, Vector3 center, float duration, bool depthTest)
public void LocalCube(Matrix4x4 space, Vector3 size, Vector3 center, float duration, bool depthTest)
public void Circle(Vector3 position, Vector3 up, Color color, float radius, float duration, bool depthTest)
public void Circle(Vector3 position, Color color, float radius, float duration, bool depthTest)
public void Circle(Vector3 position, Vector3 up, float radius, float duration, bool depthTest)
public void Circle(Vector3 position, float radius, float duration, bool depthTest)
public void Sphere(Vector3 position, Color color, float radius, float duration, bool depthTest)
public void Sphere(Vector3 position, float radius, float duration, bool depthTest)
public void Cylinder(Vector3 start, Vector3 end, Color color, float radius, float duration, bool depthTest)
public void Cylinder(Vector3 start, Vector3 end, float radius, float duration, bool depthTest)
public void Cone(Vector3 position, Vector3 direction, Color color, float angle, float duration, bool depthTest)
public void Cone(Vector3 position, Vector3 direction, float angle, float duration, bool depthTest)
public void Cone(Vector3 position, Color color, float angle, float duration, bool depthTest)
public void Cone(Vector3 position, float angle, float duration, bool depthTest)
public void Line(Vector3 position, Vector3 endposition, Color color, float duration, bool depthTest)
public void Arrow(Vector3 position, Vector3 direction, Color color, float duration, bool depthTest)
public void Arrow(Vector3 position, Vector3 direction, float duration, bool depthTest)
public void Capsule(Vector3 start, Vector3 end, Color color, float radius, float duration, bool depthTest)
public void Capsule(Vector3 start, Vector3 end, float radius, float duration, bool depthTest)
}
public Facepunch.DestroyInSeconds : MonoBehaviour {
public float TimeToDie
public float TimeToDieVariance
private void Start()
}
public Facepunch.ExceptionReporter : MonoBehaviour {
private bool <Disabled>k__BackingField
private Stopwatch LastReportTime
private int _reportsSentCounter
private string <PublicKey>k__BackingField
private string <SecretKey>k__BackingField
private string <Host>k__BackingField
private string <ProjectId>k__BackingField
public bool Disabled
public string PublicKey
public string SecretKey
public string Host
public string ProjectId
private Dictionary`2<string, string> Headers
public bool get_Disabled()
public void set_Disabled(bool value)
internal void InstallHooks()
private void OnLogMessage(string message, string stackTrace, LogType type)
public string get_PublicKey()
private void set_PublicKey(string value)
public string get_SecretKey()
private void set_SecretKey(string value)
public string get_Host()
private void set_Host(string value)
public string get_ProjectId()
private void set_ProjectId(string value)
public void InitializeFromUrl(string url)
public void SendReport(string exception, string stacktrace, LogType logType)
private Dictionary`2<string, string> get_Headers()
}
public Facepunch.Extend.RayExtensions : object {
public Vector3 ClosestPoint(Ray ray, Vector3 position)
public float ClosestDistance(Ray ray, Vector3 position)
}
public Facepunch.Feedback : object {
public Task`1<string> Report(Feedback feedback)
public Task`1<string> ServerReport(string endpoint, ulong fromPlayer, string key, Feedback feedback)
}
public Facepunch.FrameRateCategory : Enum {
public int value__
public FrameRateCategory Unplayable
public FrameRateCategory VeryBad
public FrameRateCategory Bad
public FrameRateCategory Average
public FrameRateCategory Good
public FrameRateCategory VeryGood
public FrameRateCategory Count
}
public Facepunch.GameObjectExtensions : object {
public void SetIgnoreCollisions(GameObject self, GameObject other, bool ignore)
}
public Facepunch.Hero : object {
private string <Ident>k__BackingField
private string <MediaUrl>k__BackingField
private string <TitleText>k__BackingField
private string <ActionText>k__BackingField
private string <TargetUrl>k__BackingField
private string <Conditions>k__BackingField
private double <Chance>k__BackingField
public string Ident
public string MediaUrl
public string TitleText
public string ActionText
public string TargetUrl
public string Conditions
public double Chance
public string get_Ident()
public void set_Ident(string value)
public string get_MediaUrl()
public void set_MediaUrl(string value)
public string get_TitleText()
public void set_TitleText(string value)
public string get_ActionText()
public void set_ActionText(string value)
public string get_TargetUrl()
public void set_TargetUrl(string value)
public string get_Conditions()
public void set_Conditions(string value)
public double get_Chance()
public void set_Chance(double value)
}
public Facepunch.Leaderboard : object {
public void Insert(string board, float score, bool OnlyIfLower, bool OnlyIfHigher, string extra, Action`1<string> result)
public void GetRank(string board, string userid, bool desc, String[] friends, Action`1<Rank> result)
public void GetPage(string board, string country, string city, int skip, int take, bool desc, String[] friends, Action`1<Entry[]> result)
}
public Facepunch.ListComponent : MonoBehaviour {
public void Setup()
public void Clear()
protected void OnEnable()
protected void OnDisable()
}
public Facepunch.ListComponent`1 : ListComponent {
private ListHashSet`1<T> instanceList
public ListHashSet`1<T> InstanceList
public ListHashSet`1<T> get_InstanceList()
public void Setup()
public void Clear()
}
public Facepunch.Manifest : object {
private DateTime <LastDownloaded>k__BackingField
private string <Contents>k__BackingField
public DateTime LastDownloaded
public string Contents
public DateTime get_LastDownloaded()
internal void set_LastDownloaded(DateTime value)
public string get_Contents()
internal void set_Contents(string value)
internal void Download()
private IEnumerator UpdateManifest()
private void LoadManifest(string text)
private void OnManifestLoaded(Manifest manifest)
}
public Facepunch.Math.Epoch : object {
private DateTime epoch
public int Current
public int get_Current()
public DateTime ToDateTime(long unixTime)
public int FromDateTime(DateTime time)
}
public Facepunch.Models.AppInfo : ValueType {
private string <Image>k__BackingField
public int Version
public BuildInfo Build
public string Name
public string Os
public string Cpu
public int CpuCount
public int Mem
public string Gpu
public int GpuMem
public string Arch
public string UserId
public string UserName
public string ServerAddress
public string ServerName
public string LevelName
public string LevelPos
public string LevelRot
public int MinutesPlayed
public string Image
public int get_Version()
public BuildInfo get_Build()
public string get_Name()
public string get_Os()
public string get_Cpu()
public int get_CpuCount()
public int get_Mem()
public string get_Gpu()
public int get_GpuMem()
public string get_Arch()
public string get_UserId()
public string get_UserName()
public string get_ServerAddress()
public string get_ServerName()
public string get_LevelName()
public string get_LevelPos()
public string get_LevelRot()
public int get_MinutesPlayed()
public string get_Image()
public void set_Image(string value)
}
public Facepunch.Models.Auth : object {
public string Type
public string Id
public string Ticket
public string Name
public Auth Steam(string ticket, ulong steamId, string username)
}
public Facepunch.Models.Database.Add : Base {
public string Content
}
internal Facepunch.Models.Database.AddResponse : BaseResponse {
public string Id
}
public Facepunch.Models.Database.Base : object {
public string Parent
public Auth Auth
public int Version
public int get_Version()
}
internal Facepunch.Models.Database.BaseResponse : object {
public string Status
public string Reason
}
internal Facepunch.Models.Database.QueryResponse : object {
public string Content
public string Id
public DateTime Created
public DateTime Updated
public string AuthorId
public string AuthType
}
public Facepunch.Models.Database.Remove : Base {
public string Id
}
public Facepunch.Models.Database.Result`1 : object {
public bool Running
public bool Success
public Entry[] Entries
}
public Facepunch.Models.FeaturesInfo : object {
public bool ClientAnalytics
public bool ServerAnalytics
}
public Facepunch.Models.Feedback : ValueType {
public string Subject
public string Message
public ReportType Type
public string TargetReportType
public string TargetId
public string TargetName
public string TargetEntity
public List`1<ulong> UsersInRange
public AppInfo AppInfo
}
public Facepunch.Models.Leaderboard.Add : object {
public string Parent
public float Score
public string Extra
public bool ReplaceIfHigher
public bool ReplaceIfLower
public Auth Auth
public int Version
public int get_Version()
}
public Facepunch.Models.Leaderboard.Entry : object {
public int Rank
public float Score
public string UserId
public string Name
public string Country
public string City
public DateTime Created
}
public Facepunch.Models.Leaderboard.Rank : object {
public float Score
public int GlobalCount
public int GlobalRank
public string Country
public int CountryCount
public int CountryRank
public string City
public int CityCount
public int CityRank
public int FriendRank
public DateTime Created
}
public Facepunch.Models.Manifest : object {
public NewsInfo News
public ServersInfo Servers
public FeaturesInfo Features
public string ExceptionReportingUrl
public string BenchmarkUrl
public string AnalyticUrl
public string DatabaseUrl
public string LeaderboardUrl
public string ReportUrl
public string AccountUrl
public Hero[] Heroes
public Administrator[] Administrators
public JObject Metadata
internal Manifest FromJson(string text)
}
public Facepunch.Models.PlayerInfo : ValueType {
private string <Name>k__BackingField
private string <Id>k__BackingField
public string Name
public string Id
public string get_Name()
public void set_Name(string value)
public string get_Id()
public void set_Id(string value)
}
public Facepunch.Models.ReportType : Enum {
public int value__
public ReportType General
public ReportType Bug
public ReportType Cheat
public ReportType Abuse
public ReportType Idea
public ReportType OffensiveContent
public ReportType FIRST
public ReportType LAST
}
internal Facepunch.Mono : object {
internal void FixHttpsValidation()
}
public Facepunch.NoticeData : ValueType {
public string Type
public string SteamId
public string DisplayName
public int Reports
public DateTime ReportDate
}
public Facepunch.Performance : object {
public Func`1<int> GetMemoryUsage
public Func`1<int> GetGarbageCollections
private Stopwatch Stopwatch
private int frames
private int <FrameCountLastSecond>k__BackingField
private int <MemoryUsage>k__BackingField
private int <GarbageCollections>k__BackingField
private float <SecondsSinceLastConnection>k__BackingField
public int TargetFrameRate
private Int32[] frameBuckets
private Single[] frameBucketFractions
public FrameRateCategory FrameRateCategory
public int FrameCountLastSecond
public double AvgFrameTimeLastSecond
public int MemoryUsage
public int GarbageCollections
public float SecondsSinceLastConnection
public Int32[] CategorizedFrameCount
public FrameRateCategory get_FrameRateCategory()
public int get_FrameCountLastSecond()
private void set_FrameCountLastSecond(int value)
public double get_AvgFrameTimeLastSecond()
public int get_MemoryUsage()
private void set_MemoryUsage(int value)
public int get_GarbageCollections()
private void set_GarbageCollections(int value)
public float get_SecondsSinceLastConnection()
private void set_SecondsSinceLastConnection(float value)
public Int32[] get_CategorizedFrameCount()
internal void Frame()
private void OneSecond(double timelapse)
private FrameRateCategory CategorizeFrameRate(int i)
private void UpdateFrameBuckets()
public int GetFrameCount(FrameRateCategory category)
public float GetFrameFraction(FrameRateCategory category)
}
public Facepunch.PerformanceUI : MonoBehaviour {
public LayoutElement[] rainbow
public Text info
public Text fps
public Text ms
public Text mb
public Text gc
private Canvas Canvas
private float updateTime
private void Awake()
private void Update()
private void UpdateRainbow()
public void SpawnPrefab()
}
public Facepunch.Report : object {
private string <release>k__BackingField
private string <message>k__BackingField
private string <platform>k__BackingField
private string <event_id>k__BackingField
private Dictionary`2<string, string> <tags>k__BackingField
private StackTrace <stacktrace>k__BackingField
private User <user>k__BackingField
public string release
public string message
public string platform
public string event_id
public Dictionary`2<string, string> tags
public StackTrace stacktrace
public User user
public string get_release()
public void set_release(string value)
public string get_message()
public void set_message(string value)
public string get_platform()
public void set_platform(string value)
public string get_event_id()
public void set_event_id(string value)
public Dictionary`2<string, string> get_tags()
public void set_tags(Dictionary`2<string, string> value)
public StackTrace get_stacktrace()
public void set_stacktrace(StackTrace value)
public User get_user()
public void set_user(User value)
}
public Facepunch.SystemInformation : ValueType {
public Hardware hardware
public Environment environment
}
public Facepunch.Threading : object {
private int mainThread
private List`1<Action> actions
public bool IsMainThread
public bool get_IsMainThread()
public void QueueOnMainThread(Action action)
internal void RunQueuedFunctionsOnMainThread()
}
public Facepunch.Utility.CommandLine : object {
private bool initialized
private string commandline
private Dictionary`2<string, string> switches
public string Full
public string get_Full()
public void Force(string val)
private void Initalize()
public bool HasSwitch(string strName)
public string GetSwitch(string strName, string strDefault)
public int GetSwitchInt(string strName, int iDefault)
public Dictionary`2<string, string> GetSwitches()
}
public Facepunch.Vector3Extensions : object {
public Vector3 XZ(Vector3 o, float y)
public Vector3 RemoveAxis(Vector3 o, Vector3 axis)
}
public Facepunch.WebUtil : object {
internal void Get(string url, Action`1<string> result)
private IEnumerator DownloadStringCoroutine(UnityWebRequest www, Action`1<string> result)
public Task`1<string> DownloadFileTemp(string url, bool keepextension)
private void DownloadString(UnityWebRequest www, Action`1<string> result)
internal void Post(string url, Dictionary`2<string, string> data, bool wait, Action`1<string> result)
internal Task`1<string> PostAsync(string url, Dictionary`2<string, string> data)
internal void PostData(string url, object dataObject, Action`1<string> result, bool wait)
internal Task`1<string> PostDataAsync(string url, object dataObject)
private IEnumerator PostValuesCoroutine(WWW www, Action`1<string> result)
internal string Escape(string type)
}
public Facepunch.WeightedStringList : object {
public List`1<Container> Objects
private float _total
private float Total
private float get_Total()
public string Get(float f)
public string GetRandom()
}
public RealTimeSince : ValueType {
private float time
public float op_Implicit(RealTimeSince ts)
public RealTimeSince op_Implicit(float ts)
public string ToString()
}
public RealTimeUntil : ValueType {
private float time
public float op_Implicit(RealTimeUntil ts)
public RealTimeUntil op_Implicit(float ts)
public string ToString()
}
public SceneField : object {
private Object sceneAsset
private string sceneName
public string SceneName
public string get_SceneName()
public string op_Implicit(SceneField sceneField)
}
public TimeSince : ValueType {
private float time
public float op_Implicit(TimeSince ts)
public TimeSince op_Implicit(float ts)
public string ToString()
}
public TimeUntil : ValueType {
private float time
public float op_Implicit(TimeUntil ts)
public TimeUntil op_Implicit(float ts)
public string ToString()
}
public TimeUntilWithDuration : ValueType {
private float time
public float Duration
public float op_Implicit(TimeUntilWithDuration ts)
public TimeUntilWithDuration op_Implicit(float ts)
public string ToString()
}
public UnityEngine.WaitForSecondsRealtimeEx : CustomYieldInstruction {
private bool _isInPool
private float _waitUntilTime
private float <WaitTime>k__BackingField
public float WaitTime
public bool keepWaiting
public float get_WaitTime()
public void set_WaitTime(float value)
public bool get_keepWaiting()
public void EnterPool()
public void LeavePool()
}
