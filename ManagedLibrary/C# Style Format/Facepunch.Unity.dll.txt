[JsonModelAttribute]
public class Facepunch.AccountNotice : object {
    [CompilerGeneratedAttribute]
private int <NoticeId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Json>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Seen>k__BackingField;
    public int NoticeId { get; public set; }
    public DateTime Created { get; public set; }
    public string Json { get; public set; }
    public string Seen { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NoticeId();
    [CompilerGeneratedAttribute]
public void set_NoticeId(int value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Json();
    [CompilerGeneratedAttribute]
public void set_Json(string value);
    [CompilerGeneratedAttribute]
public string get_Seen();
    [CompilerGeneratedAttribute]
public void set_Seen(string value);
}
[ExtensionAttribute]
public static class Facepunch.AnimationCurveEx : object {
    [ExtensionAttribute]
public static Keyframe First(AnimationCurve curve);
    [ExtensionAttribute]
public static Keyframe Last(AnimationCurve curve);
}
public static class Facepunch.Application : object {
    private static MonoBehaviour _controller;
    public static Manifest Manifest;
    [CompilerGeneratedAttribute]
private static BaseIntegration <Integration>k__BackingField;
    public static MonoBehaviour Controller { get; }
    public static BaseIntegration Integration { get; public set; }
    public static MonoBehaviour get_Controller();
    public static void Initialize(BaseIntegration integration);
    [CompilerGeneratedAttribute]
public static BaseIntegration get_Integration();
    [CompilerGeneratedAttribute]
public static void set_Integration(BaseIntegration value);
}
internal class Facepunch.ApplicationControllerMonobehaviour : MonoBehaviour {
    public void OnApplicationQuit();
    public void Update();
}
public abstract class Facepunch.BaseIntegration : object {
    public string PublicKey { get; }
    public string Bucket { get; }
    public string UserId { get; }
    public string UserName { get; }
    public string ServerAddress { get; }
    public string ServerName { get; }
    public string LevelName { get; }
    public int MinutesPlayed { get; }
    public Auth Auth { get; }
    public bool RestrictEditorFunctionality { get; }
    public bool LocalApi { get; }
    public string ApiUrl { get; }
    public bool DebugOutput { get; }
    public abstract virtual string get_PublicKey();
    public virtual string get_Bucket();
    public virtual void OnManifestFile(Manifest manifest);
    public virtual string get_UserId();
    public virtual string get_UserName();
    public virtual string get_ServerAddress();
    public virtual string get_ServerName();
    public virtual string get_LevelName();
    public virtual int get_MinutesPlayed();
    public virtual Auth get_Auth();
    public virtual bool get_RestrictEditorFunctionality();
    public virtual bool get_LocalApi();
    public virtual string get_ApiUrl();
    public virtual bool get_DebugOutput();
    public virtual bool ShouldReportException(string message, string stackTrace, LogType type);
}
[JsonModelAttribute]
public class Facepunch.BenchmarkData : object {
    public static BenchmarkData Current;
    public Dictionary`2<string, float> Results;
    public string ComputerName;
    public string BuildDate;
    public string BranchName;
    public string Changeset;
    public string BuildId;
    public bool Auto;
    public int Version;
    public AppInfo AppInfo;
    public SystemInformation SystemInfo;
    private int frames;
    private int hitches;
    private int freezes;
    private float lastTime;
    private double frameTimes;
    private float AvgMilliseconds { get; }
    private float avgFrameRate { get; }
    public static BenchmarkData New();
    public void WriteTimersToResults();
    [AsyncStateMachineAttribute("Facepunch.BenchmarkData/<Upload>d__13")]
public Task`1<string> Upload();
    public string WriteJSON();
    private float get_AvgMilliseconds();
    private float get_avgFrameRate();
    public void ResetCounters();
    public void Frame();
    public void CompleteDemoBenchmark(string benchmarkLabel);
}
public class Facepunch.BenchmarkTimer : object {
    public static bool Enabled;
    public static Dictionary`2<string, Stopwatch> All;
    private Stopwatch stopwatch;
    public BenchmarkTimer(string name);
    private static BenchmarkTimer();
    public static BenchmarkTimer New(string name);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Facepunch.BinaryReaderExtensions : object {
    [ExtensionAttribute]
public static Vector3 ReadVector3(BinaryReader o);
}
[ExtensionAttribute]
public static class Facepunch.BinaryWriterExtensions : object {
    [ExtensionAttribute]
public static void Write(BinaryWriter o, Vector3 vec);
}
[JsonModelAttribute]
public class Facepunch.BuildInfo : object {
    [CompilerGeneratedAttribute]
private int <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private ScmInfo <Scm>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildDesc <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Valid>k__BackingField;
    private static BuildInfo _current;
    public int Date { get; public set; }
    [JsonIgnoreAttribute]
public DateTime BuildDate { get; }
    public ScmInfo Scm { get; public set; }
    public BuildDesc Build { get; public set; }
    public bool Valid { get; public set; }
    public static BuildInfo Current { get; }
    [CompilerGeneratedAttribute]
public int get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(int value);
    public DateTime get_BuildDate();
    [CompilerGeneratedAttribute]
public ScmInfo get_Scm();
    [CompilerGeneratedAttribute]
public void set_Scm(ScmInfo value);
    [CompilerGeneratedAttribute]
public BuildDesc get_Build();
    [CompilerGeneratedAttribute]
public void set_Build(BuildDesc value);
    [CompilerGeneratedAttribute]
public bool get_Valid();
    [CompilerGeneratedAttribute]
public void set_Valid(bool value);
    public static BuildInfo get_Current();
}
[ExtensionAttribute]
public static class Facepunch.ComponentExtensions : object {
    [ExtensionAttribute]
public static T Duplicate(T obj);
    [ExtensionAttribute]
public static T[] Duplicate(T obj, int amount, bool includeOriginalInArray);
    [ExtensionAttribute]
public static void SetActive(T obj, bool active);
    [ExtensionAttribute]
public static Vector2 WorldToRectTransform(T obj, Vector2 worldPos);
    [ExtensionAttribute]
public static Rect GetWorldRect(T obj);
    [ExtensionAttribute]
public static bool GetComponent(T obj, U& value);
    [ExtensionAttribute]
public static bool GetComponentInParent(T obj, U& value);
    [ExtensionAttribute]
public static bool GetComponentInChildren(T obj, U& value);
}
public static class Facepunch.Database : object {
    public static void Insert(string parent, object contents, Action`1<bool> onFinished);
    public static void Insert(string parent, object contents, Action`2<bool, string> onFinished);
    public static void Remove(string parent, string id, Action`1<bool> onFinished);
    public static Result`1<T> Query(string parent, int limit, Action`1<Result`1<T>> onFinished);
    public static void Count(string parent, Action`1<int> onResult);
}
public static class Facepunch.DebugDraw : object {
    public static void Point(Vector3 position, Color color, float scale, float duration, bool depthTest);
    public static void Point(Vector3 position, float scale, float duration, bool depthTest);
    public static void Bounds(Bounds bounds, Color color, float duration, bool depthTest);
    public static void Normal(Vector3 point, Vector3 normal, float size, Color color, float duration, bool depthtest);
    public static void Bounds(Bounds bounds, float duration, bool depthTest);
    public static void LocalCube(Transform transform, Vector3 size, Color color, Vector3 center, float duration, bool depthTest);
    public static void LocalCube(Transform transform, Vector3 size, Vector3 center, float duration, bool depthTest);
    public static void LocalCube(Matrix4x4 space, Vector3 size, Color color, Vector3 center, float duration, bool depthTest);
    public static void LocalCube(Matrix4x4 space, Vector3 size, Vector3 center, float duration, bool depthTest);
    public static void Circle(Vector3 position, Vector3 up, Color color, float radius, float duration, bool depthTest);
    public static void Circle(Vector3 position, Color color, float radius, float duration, bool depthTest);
    public static void Circle(Vector3 position, Vector3 up, float radius, float duration, bool depthTest);
    public static void Circle(Vector3 position, float radius, float duration, bool depthTest);
    public static void Sphere(Vector3 position, Color color, float radius, float duration, bool depthTest);
    public static void Sphere(Vector3 position, float radius, float duration, bool depthTest);
    public static void Cylinder(Vector3 start, Vector3 end, Color color, float radius, float duration, bool depthTest);
    public static void Cylinder(Vector3 start, Vector3 end, float radius, float duration, bool depthTest);
    public static void Cone(Vector3 position, Vector3 direction, Color color, float angle, float duration, bool depthTest);
    public static void Cone(Vector3 position, Vector3 direction, float angle, float duration, bool depthTest);
    public static void Cone(Vector3 position, Color color, float angle, float duration, bool depthTest);
    public static void Cone(Vector3 position, float angle, float duration, bool depthTest);
    public static void Line(Vector3 position, Vector3 endposition, Color color, float duration, bool depthTest);
    public static void Arrow(Vector3 position, Vector3 direction, Color color, float duration, bool depthTest);
    public static void Arrow(Vector3 position, Vector3 direction, float duration, bool depthTest);
    public static void Capsule(Vector3 start, Vector3 end, Color color, float radius, float duration, bool depthTest);
    public static void Capsule(Vector3 start, Vector3 end, float radius, float duration, bool depthTest);
}
public class Facepunch.DestroyInSeconds : MonoBehaviour {
    public float TimeToDie;
    public float TimeToDieVariance;
    private void Start();
}
public class Facepunch.ExceptionReporter : MonoBehaviour {
    [CompilerGeneratedAttribute]
private static bool <Disabled>k__BackingField;
    private static Stopwatch LastReportTime;
    private static int _reportsSentCounter;
    [CompilerGeneratedAttribute]
private static string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <SecretKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <ReportMessageMaxLength>k__BackingField;
    public static bool Disabled { get; public set; }
    public static string PublicKey { get; private set; }
    public static string SecretKey { get; private set; }
    public static string Host { get; private set; }
    public static string ProjectId { get; private set; }
    public static int ReportMessageMaxLength { get; public set; }
    private static Dictionary`2<string, string> Headers { get; }
    private static ExceptionReporter();
    [CompilerGeneratedAttribute]
public static bool get_Disabled();
    [CompilerGeneratedAttribute]
public static void set_Disabled(bool value);
    internal static void InstallHooks();
    private static void OnLogMessage(string message, string stackTrace, LogType type);
    [CompilerGeneratedAttribute]
public static string get_PublicKey();
    [CompilerGeneratedAttribute]
private static void set_PublicKey(string value);
    [CompilerGeneratedAttribute]
public static string get_SecretKey();
    [CompilerGeneratedAttribute]
private static void set_SecretKey(string value);
    [CompilerGeneratedAttribute]
public static string get_Host();
    [CompilerGeneratedAttribute]
private static void set_Host(string value);
    [CompilerGeneratedAttribute]
public static string get_ProjectId();
    [CompilerGeneratedAttribute]
private static void set_ProjectId(string value);
    [CompilerGeneratedAttribute]
public static int get_ReportMessageMaxLength();
    [CompilerGeneratedAttribute]
public static void set_ReportMessageMaxLength(int value);
    public static void InitializeFromUrl(string url);
    public static void SendReport(string exception, string stacktrace, LogType logType);
    private static Dictionary`2<string, string> get_Headers();
}
[ExtensionAttribute]
public static class Facepunch.Extend.RayExtensions : object {
    [ExtensionAttribute]
public static Vector3 ClosestPoint(Ray ray, Vector3 position);
    [ExtensionAttribute]
public static float ClosestDistance(Ray ray, Vector3 position);
}
public static class Facepunch.Feedback : object {
    [AsyncStateMachineAttribute("Facepunch.Feedback/<Report>d__0")]
public static Task`1<string> Report(Feedback feedback);
    [AsyncStateMachineAttribute("Facepunch.Feedback/<ServerReport>d__1")]
public static Task`1<string> ServerReport(string endpoint, ulong fromPlayer, string key, Feedback feedback);
}
public enum Facepunch.FrameRateCategory : Enum {
    public int value__;
    public static FrameRateCategory Unplayable;
    public static FrameRateCategory VeryBad;
    public static FrameRateCategory Bad;
    public static FrameRateCategory Average;
    public static FrameRateCategory Good;
    public static FrameRateCategory VeryGood;
    public static FrameRateCategory Count;
}
[ExtensionAttribute]
public static class Facepunch.GameObjectExtensions : object {
    [ExtensionAttribute]
public static void SetIgnoreCollisions(GameObject self, GameObject other, bool ignore);
}
[JsonModelAttribute]
public class Facepunch.Hero : object {
    [CompilerGeneratedAttribute]
private string <Ident>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MediaUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Conditions>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Chance>k__BackingField;
    public string Ident { get; public set; }
    public string MediaUrl { get; public set; }
    public string TitleText { get; public set; }
    public string ActionText { get; public set; }
    public string TargetUrl { get; public set; }
    public string Conditions { get; public set; }
    public double Chance { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Ident();
    [CompilerGeneratedAttribute]
public void set_Ident(string value);
    [CompilerGeneratedAttribute]
public string get_MediaUrl();
    [CompilerGeneratedAttribute]
public void set_MediaUrl(string value);
    [CompilerGeneratedAttribute]
public string get_TitleText();
    [CompilerGeneratedAttribute]
public void set_TitleText(string value);
    [CompilerGeneratedAttribute]
public string get_ActionText();
    [CompilerGeneratedAttribute]
public void set_ActionText(string value);
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
public void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Conditions();
    [CompilerGeneratedAttribute]
public void set_Conditions(string value);
    [CompilerGeneratedAttribute]
public double get_Chance();
    [CompilerGeneratedAttribute]
public void set_Chance(double value);
}
public class Facepunch.InspectorFlagsAttribute : PropertyAttribute {
}
public static class Facepunch.Leaderboard : object {
    public static void Insert(string board, float score, bool OnlyIfLower, bool OnlyIfHigher, string extra, Action`1<string> result);
    public static void GetRank(string board, string userid, bool desc, String[] friends, Action`1<Rank> result);
    public static void GetPage(string board, string country, string city, int skip, int take, bool desc, String[] friends, Action`1<Entry[]> result);
}
public abstract class Facepunch.ListComponent : MonoBehaviour {
    public abstract virtual void Setup();
    public abstract virtual void Clear();
    protected virtual void OnEnable();
    protected virtual void OnDisable();
}
public abstract class Facepunch.ListComponent`1 : ListComponent {
    private static ListHashSet`1<T> instanceList;
    public static ListHashSet`1<T> InstanceList { get; }
    private static ListComponent`1();
    public static ListHashSet`1<T> get_InstanceList();
    public virtual void Setup();
    public virtual void Clear();
}
public static class Facepunch.Manifest : object {
    [CompilerGeneratedAttribute]
private static DateTime <LastDownloaded>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Contents>k__BackingField;
    public static DateTime LastDownloaded { get; internal set; }
    public static string Contents { get; internal set; }
    [CompilerGeneratedAttribute]
public static DateTime get_LastDownloaded();
    [CompilerGeneratedAttribute]
internal static void set_LastDownloaded(DateTime value);
    [CompilerGeneratedAttribute]
public static string get_Contents();
    [CompilerGeneratedAttribute]
internal static void set_Contents(string value);
    internal static void Download();
    [IteratorStateMachineAttribute("Facepunch.Manifest/<AutoUpdateManifest>d__9")]
private static IEnumerator AutoUpdateManifest();
    public static void UpdateManifest();
    private static void LoadManifest(string text);
    private static void OnManifestLoaded(Manifest manifest);
}
public static class Facepunch.Math.Epoch : object {
    private static DateTime epoch;
    public static int Current { get; }
    private static Epoch();
    public static int get_Current();
    public static DateTime ToDateTime(long unixTime);
    public static int FromDateTime(DateTime time);
}
[JsonModelAttribute]
public class Facepunch.Models.AppInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    public int Version { get; }
    public BuildInfo Build { get; }
    public string Name { get; }
    public string Os { get; }
    public string Cpu { get; }
    public int CpuCount { get; }
    public int Mem { get; }
    public string Gpu { get; }
    public int GpuMem { get; }
    public string Arch { get; }
    public string UserId { get; }
    public string UserName { get; }
    public string ServerAddress { get; }
    public string ServerName { get; }
    public string LevelName { get; }
    public string LevelPos { get; }
    public string LevelRot { get; }
    public int MinutesPlayed { get; }
    public string Image { get; public set; }
    public int get_Version();
    public BuildInfo get_Build();
    public string get_Name();
    public string get_Os();
    public string get_Cpu();
    public int get_CpuCount();
    public int get_Mem();
    public string get_Gpu();
    public int get_GpuMem();
    public string get_Arch();
    public string get_UserId();
    public string get_UserName();
    public string get_ServerAddress();
    public string get_ServerName();
    public string get_LevelName();
    public string get_LevelPos();
    public string get_LevelRot();
    public int get_MinutesPlayed();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
}
[JsonModelAttribute]
public class Facepunch.Models.Auth : object {
    public string Type;
    public string Id;
    public string Ticket;
    public string Name;
    public static Auth Steam(string ticket, ulong steamId, string username);
}
[JsonModelAttribute]
public class Facepunch.Models.Database.Add : Base {
    public string Content;
}
[JsonModelAttribute]
internal class Facepunch.Models.Database.AddResponse : BaseResponse {
    public string Id;
}
[JsonModelAttribute]
public class Facepunch.Models.Database.Base : object {
    public string Parent;
    public Auth Auth;
    public int Version { get; }
    public int get_Version();
}
[JsonModelAttribute]
internal class Facepunch.Models.Database.BaseResponse : object {
    public string Status;
    public string Reason;
}
[JsonModelAttribute]
internal class Facepunch.Models.Database.QueryResponse : object {
    public string Content;
    public string Id;
    public DateTime Created;
    public DateTime Updated;
    public string AuthorId;
    public string AuthType;
}
[JsonModelAttribute]
public class Facepunch.Models.Database.Remove : Base {
    public string Id;
}
[JsonModelAttribute]
public class Facepunch.Models.Database.Result`1 : object {
    public bool Running;
    public bool Success;
    public Entry[] Entries;
}
[JsonModelAttribute]
public class Facepunch.Models.FeaturesInfo : object {
    [JsonPropertyAttribute("client_analytics")]
public bool ClientAnalytics;
    [JsonPropertyAttribute("server_analytics")]
public bool ServerAnalytics;
}
[JsonModelAttribute]
public class Facepunch.Models.Feedback : ValueType {
    public string Subject;
    public string Message;
    public ReportType Type;
    public string TargetReportType;
    public string TargetId;
    public string TargetName;
    public string TargetEntity;
    public List`1<ulong> UsersInRange;
    public AppInfo AppInfo;
}
[JsonModelAttribute]
public class Facepunch.Models.Leaderboard.Add : object {
    public string Parent;
    public float Score;
    public string Extra;
    public bool ReplaceIfHigher;
    public bool ReplaceIfLower;
    public Auth Auth;
    public int Version { get; }
    public int get_Version();
}
[JsonModelAttribute]
public class Facepunch.Models.Leaderboard.Entry : object {
    public int Rank;
    public float Score;
    public string UserId;
    public string Name;
    public string Country;
    public string City;
    public DateTime Created;
}
[JsonModelAttribute]
public class Facepunch.Models.Leaderboard.Rank : object {
    public float Score;
    public int GlobalCount;
    public int GlobalRank;
    public string Country;
    public int CountryCount;
    public int CountryRank;
    public string City;
    public int CityCount;
    public int CityRank;
    public int FriendRank;
    public DateTime Created;
}
[JsonModelAttribute]
public class Facepunch.Models.Manifest : object {
    public NewsInfo News;
    public ServersInfo Servers;
    public FeaturesInfo Features;
    public string ExceptionReportingUrl;
    public string BenchmarkUrl;
    public string AnalyticUrl;
    public string DatabaseUrl;
    public string LeaderboardUrl;
    public string ReportUrl;
    public string AccountUrl;
    public Hero[] Heroes;
    public Administrator[] Administrators;
    public JObject Metadata;
    internal static Manifest FromJson(string text);
}
[JsonModelAttribute]
public class Facepunch.Models.PlayerInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Name { get; public set; }
    public string Id { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
}
public enum Facepunch.Models.ReportType : Enum {
    public int value__;
    public static ReportType General;
    public static ReportType Bug;
    public static ReportType Cheat;
    public static ReportType Abuse;
    public static ReportType Idea;
    public static ReportType OffensiveContent;
    public static ReportType FIRST;
    public static ReportType LAST;
}
internal static class Facepunch.Mono : object {
    internal static void FixHttpsValidation();
}
[JsonModelAttribute]
public class Facepunch.NoticeData : ValueType {
    public string Type;
    public string SteamId;
    public string DisplayName;
    public int Reports;
    public DateTime ReportDate;
}
public static class Facepunch.Performance : object {
    public static Func`1<int> GetMemoryUsage;
    public static Func`1<int> GetGarbageCollections;
    private static Stopwatch Stopwatch;
    private static int frames;
    [CompilerGeneratedAttribute]
private static int <FrameCountLastSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <MemoryUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <GarbageCollections>k__BackingField;
    [CompilerGeneratedAttribute]
private static float <SecondsSinceLastConnection>k__BackingField;
    public static int TargetFrameRate;
    private static Int32[] frameBuckets;
    private static Single[] frameBucketFractions;
    public static FrameRateCategory FrameRateCategory { get; }
    public static int FrameCountLastSecond { get; private set; }
    public static double AvgFrameTimeLastSecond { get; }
    public static int MemoryUsage { get; private set; }
    public static int GarbageCollections { get; private set; }
    public static float SecondsSinceLastConnection { get; private set; }
    public static Int32[] CategorizedFrameCount { get; }
    private static Performance();
    public static FrameRateCategory get_FrameRateCategory();
    [CompilerGeneratedAttribute]
public static int get_FrameCountLastSecond();
    [CompilerGeneratedAttribute]
private static void set_FrameCountLastSecond(int value);
    public static double get_AvgFrameTimeLastSecond();
    [CompilerGeneratedAttribute]
public static int get_MemoryUsage();
    [CompilerGeneratedAttribute]
private static void set_MemoryUsage(int value);
    [CompilerGeneratedAttribute]
public static int get_GarbageCollections();
    [CompilerGeneratedAttribute]
private static void set_GarbageCollections(int value);
    [CompilerGeneratedAttribute]
public static float get_SecondsSinceLastConnection();
    [CompilerGeneratedAttribute]
private static void set_SecondsSinceLastConnection(float value);
    public static Int32[] get_CategorizedFrameCount();
    internal static void Frame();
    private static void OneSecond(double timelapse);
    private static FrameRateCategory CategorizeFrameRate(int i);
    private static void UpdateFrameBuckets();
    public static int GetFrameCount(FrameRateCategory category);
    public static float GetFrameFraction(FrameRateCategory category);
}
public class Facepunch.PerformanceUI : MonoBehaviour {
    public LayoutElement[] rainbow;
    public Text info;
    public Text fps;
    public Text ms;
    public Text mb;
    public Text gc;
    private Canvas Canvas;
    private float updateTime;
}
[JsonModelAttribute]
public class Facepunch.Report : object {
    [CompilerGeneratedAttribute]
private string <release>k__BackingField;
    [CompilerGeneratedAttribute]
private string <message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <event_id>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <tags>k__BackingField;
    [CompilerGeneratedAttribute]
private StackTrace <stacktrace>k__BackingField;
    [CompilerGeneratedAttribute]
private User <user>k__BackingField;
    public string release { get; public set; }
    public string message { get; public set; }
    public string platform { get; public set; }
    public string event_id { get; public set; }
    public Dictionary`2<string, string> tags { get; public set; }
    public StackTrace stacktrace { get; public set; }
    public User user { get; public set; }
    [CompilerGeneratedAttribute]
public string get_release();
    [CompilerGeneratedAttribute]
public void set_release(string value);
    [CompilerGeneratedAttribute]
public string get_message();
    [CompilerGeneratedAttribute]
public void set_message(string value);
    [CompilerGeneratedAttribute]
public string get_platform();
    [CompilerGeneratedAttribute]
public void set_platform(string value);
    [CompilerGeneratedAttribute]
public string get_event_id();
    [CompilerGeneratedAttribute]
public void set_event_id(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_tags();
    [CompilerGeneratedAttribute]
public void set_tags(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public StackTrace get_stacktrace();
    [CompilerGeneratedAttribute]
public void set_stacktrace(StackTrace value);
    [CompilerGeneratedAttribute]
public User get_user();
    [CompilerGeneratedAttribute]
public void set_user(User value);
}
[JsonModelAttribute]
public class Facepunch.SystemInformation : ValueType {
    public Hardware hardware;
    public Environment environment;
}
public static class Facepunch.Threading : object {
    private static int mainThread;
    private static List`1<Action> actions;
    public static bool IsMainThread { get; }
    private static Threading();
    public static bool get_IsMainThread();
    public static void QueueOnMainThread(Action action);
    internal static void RunQueuedFunctionsOnMainThread();
}
public static class Facepunch.Utility.CommandLine : object {
    private static bool initialized;
    private static string commandline;
    private static Dictionary`2<string, string> switches;
    public static string Full { get; }
    private static CommandLine();
    public static string get_Full();
    public static void Force(string val);
    private static void Initalize();
    public static bool HasSwitch(string strName);
    public static string GetSwitch(string strName, string strDefault);
    public static int GetSwitchInt(string strName, int iDefault);
    public static Dictionary`2<string, string> GetSwitches();
}
[ExtensionAttribute]
public static class Facepunch.Vector3Extensions : object {
    [ExtensionAttribute]
public static Vector3 XZ(Vector3 o, float y);
    [ExtensionAttribute]
public static Vector3 RemoveAxis(Vector3 o, Vector3 axis);
}
public static class Facepunch.WebUtil : object {
    internal static void Get(string url, Action`1<string> result);
    [IteratorStateMachineAttribute("Facepunch.WebUtil/<DownloadStringCoroutine>d__2")]
private static IEnumerator DownloadStringCoroutine(UnityWebRequest www, Action`1<string> result);
    [AsyncStateMachineAttribute("Facepunch.WebUtil/<DownloadFileTemp>d__3")]
public static Task`1<string> DownloadFileTemp(string url, bool keepextension);
    private static void DownloadString(UnityWebRequest www, Action`1<string> result);
    internal static void Post(string url, Dictionary`2<string, string> data, bool wait, Action`1<string> result);
    [AsyncStateMachineAttribute("Facepunch.WebUtil/<PostAsync>d__6")]
internal static Task`1<string> PostAsync(string url, Dictionary`2<string, string> data);
    internal static void PostData(string url, object dataObject, Action`1<string> result, bool wait);
    [AsyncStateMachineAttribute("Facepunch.WebUtil/<PostDataAsync>d__8")]
internal static Task`1<string> PostDataAsync(string url, object dataObject);
    [IteratorStateMachineAttribute("Facepunch.WebUtil/<PostValuesCoroutine>d__9")]
private static IEnumerator PostValuesCoroutine(WWW www, Action`1<string> result);
    internal static string Escape(string type);
}
public class Facepunch.WeightedStringList : object {
    public List`1<Container> Objects;
    private float _total;
    private float Total { get; }
    private float get_Total();
    public string Get(float f);
    public string GetRandom();
}
[AttributeUsageAttribute("12")]
public class Il2CppEagerStaticClassConstructionAttribute : Attribute {
}
public class RealTimeSince : ValueType {
    private float time;
    public static float op_Implicit(RealTimeSince ts);
    public static RealTimeSince op_Implicit(float ts);
    public virtual string ToString();
}
public class RealTimeUntil : ValueType {
    private float time;
    public static float op_Implicit(RealTimeUntil ts);
    public static RealTimeUntil op_Implicit(float ts);
    public virtual string ToString();
}
public class SceneField : object {
    [SerializeField]
private Object sceneAsset;
    [SerializeField]
private string sceneName;
    public string SceneName { get; }
    public string get_SceneName();
    public static string op_Implicit(SceneField sceneField);
}
public class TimeSince : ValueType {
    private float time;
    public static float op_Implicit(TimeSince ts);
    public static TimeSince op_Implicit(float ts);
    public virtual string ToString();
}
public class TimeUntil : ValueType {
    private float time;
    public static float op_Implicit(TimeUntil ts);
    public static TimeUntil op_Implicit(float ts);
    public virtual string ToString();
}
public class TimeUntilWithDuration : ValueType {
    private float time;
    public float Duration;
    public static float op_Implicit(TimeUntilWithDuration ts);
    public static TimeUntilWithDuration op_Implicit(float ts);
    public virtual string ToString();
}
public class UnityEngine.WaitForSecondsRealtimeEx : CustomYieldInstruction {
    private bool _isInPool;
    private float _waitUntilTime;
    [CompilerGeneratedAttribute]
private float <WaitTime>k__BackingField;
    public float WaitTime { get; public set; }
    public bool keepWaiting { get; }
    [CompilerGeneratedAttribute]
public float get_WaitTime();
    [CompilerGeneratedAttribute]
public void set_WaitTime(float value);
    public virtual bool get_keepWaiting();
    public sealed virtual void EnterPool();
    public sealed virtual void LeavePool();
}
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", "")]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1 : object {
    private static MonoScriptData Get();
}
