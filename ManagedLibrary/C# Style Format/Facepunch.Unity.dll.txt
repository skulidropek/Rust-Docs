public Facepunch.Analytics : object {
private string <Uid>k__BackingField
private string <SessionId>k__BackingField
private string <ReportUrl>k__BackingField
private Stat Stats
private DateTime <LastSend>k__BackingField
private string <LastMessage>k__BackingField
private string <LastResponse>k__BackingField
internal string Uid
internal string SessionId
internal string ReportUrl
public DateTime LastSend
public string LastMessage
public string LastResponse
internal string get_Uid()
internal void set_Uid(string value)
internal string get_SessionId()
private void set_SessionId(string value)
internal string get_ReportUrl()
private void set_ReportUrl(string value)
public DateTime get_LastSend()
internal void set_LastSend(DateTime value)
public string get_LastMessage()
internal void set_LastMessage(string value)
public string get_LastResponse()
internal void set_LastResponse(string value)
internal void .ctor(string reportUrl)
internal void OnQuit()
private void Send(string action, object obj, bool andWait)
public IEnumerator KeepAlive()
private void SendSessionUpdate(bool andWait)
public void ForceSendSessionUpdateDebug()
public void RecordAdd(string category, string name, double val)
public void RecordReplace(string category, string name, double val)
public void RecordAverage(string category, string name, double val)
}
public Facepunch.Application : object {
public Analytics Analytics
public Manifest Manifest
private MonoBehaviour _controller
private BaseIntegration <Integration>k__BackingField
public MonoBehaviour Controller
public BaseIntegration Integration
public void Initialize(BaseIntegration integration)
public MonoBehaviour get_Controller()
public BaseIntegration get_Integration()
public void set_Integration(BaseIntegration value)
}
internal Facepunch.ApplicationControllerMonobehaviour : MonoBehaviour {
public void OnApplicationQuit()
public void Update()
}
public Facepunch.BaseIntegration : object {
public string PublicKey
public string Bucket
public string UserId
public string UserName
public string ServerAddress
public string ServerName
public string LevelName
public int MinutesPlayed
public Auth Auth
public bool RestrictEditorFunctionality
public bool LocalApi
public bool DebugOutput
public string get_PublicKey()
public string get_Bucket()
public void OnManifestFile(Manifest manifest)
public string get_UserId()
public string get_UserName()
public string get_ServerAddress()
public string get_ServerName()
public string get_LevelName()
public int get_MinutesPlayed()
public Auth get_Auth()
public bool get_RestrictEditorFunctionality()
public bool get_LocalApi()
public bool get_DebugOutput()
}
public Facepunch.BenchmarkData : object {
public Result[] Results
public string UserID
public string BuildDate
public string BranchName
public string Changeset
public string BuildId
public AppInfo AppInfo
public BenchmarkData New()
public string Upload()
}
public Facepunch.BuildInfo : object {
private int <Date>k__BackingField
private ScmInfo <Scm>k__BackingField
private BuildDesc <Build>k__BackingField
private bool <Valid>k__BackingField
private BuildInfo _current
public int Date
public DateTime BuildDate
public ScmInfo Scm
public BuildDesc Build
public bool Valid
public BuildInfo Current
public int get_Date()
public void set_Date(int value)
public DateTime get_BuildDate()
public ScmInfo get_Scm()
public void set_Scm(ScmInfo value)
public BuildDesc get_Build()
public void set_Build(BuildDesc value)
public bool get_Valid()
public void set_Valid(bool value)
public BuildInfo get_Current()
}
public Facepunch.Database : object {
public void Insert(string parent, object contents, Action`1<bool> onFinished)
public Result`1<T> Query(string parent, int limit, Action`1<Result`1<T>> onFinished)
public void Count(string parent, Action`1<int> onResult)
}
public Facepunch.ExceptionReporter : MonoBehaviour {
private bool <Disabled>k__BackingField
private Stopwatch LastReportTime
private int _reportsSentCounter
private string <PublicKey>k__BackingField
private string <SecretKey>k__BackingField
private string <Host>k__BackingField
private string <ProjectId>k__BackingField
public bool Disabled
public string PublicKey
public string SecretKey
public string Host
public string ProjectId
private Dictionary`2<string, string> Headers
public bool get_Disabled()
public void set_Disabled(bool value)
internal void InstallHooks()
private void OnLogMessage(string message, string stackTrace, LogType type)
public string get_PublicKey()
public void set_PublicKey(string value)
public string get_SecretKey()
public void set_SecretKey(string value)
public string get_Host()
public void set_Host(string value)
public string get_ProjectId()
public void set_ProjectId(string value)
public void InitializeFromUrl(string url)
public void SendReport(string exception, string stacktrace)
private Dictionary`2<string, string> get_Headers()
}
public Facepunch.Extend.RayExtensions : object {
public Vector3 ClosestPoint(Ray ray, Vector3 position)
public float ClosestDistance(Ray ray, Vector3 position)
}
public Facepunch.Feedback : object {
private bool <IsOpening>k__BackingField
public Action`1<List`1<PlayerInfo>> GetPlayersForFeedback
public bool IsOpening
public bool get_IsOpening()
private void set_IsOpening(bool value)
internal void Frame()
public bool Open(string section)
}
public Facepunch.FrameRateCategory : Enum {
public int value__
public FrameRateCategory Unplayable
public FrameRateCategory VeryBad
public FrameRateCategory Bad
public FrameRateCategory Average
public FrameRateCategory Good
public FrameRateCategory VeryGood
public FrameRateCategory Count
}
public Facepunch.Leaderboard : object {
public void Insert(string board, float score, bool OnlyIfLower, bool OnlyIfHigher, string extra, Action`1<string> result)
public void GetRank(string board, string userid, bool desc, String[] friends, Action`1<Rank> result)
public void GetPage(string board, string country, string city, int skip, int take, bool desc, String[] friends, Action`1<Entry[]> result)
}
public Facepunch.Manifest : object {
private DateTime <LastDownloaded>k__BackingField
private string <Contents>k__BackingField
public DateTime LastDownloaded
public string Contents
public DateTime get_LastDownloaded()
internal void set_LastDownloaded(DateTime value)
public string get_Contents()
internal void set_Contents(string value)
internal void Download()
private IEnumerator UpdateManifest()
private void LoadManifest(string text)
private void OnManifestLoaded(Manifest manifest)
}
public Facepunch.Math.Epoch : object {
private DateTime epoch
public int Current
public int get_Current()
public DateTime ToDateTime(decimal unixTime)
public int FromDateTime(DateTime time)
}
internal Facepunch.Models.Analytics.SessionClose : object {
public string Uid
public string Sid
public SessionUpdate FinalUpdate
public int Version
public int get_Version()
}
internal Facepunch.Models.Analytics.SessionStart : object {
public string Uid
public string Sid
public string Bucket
public string ChangeSet
public string Branch
public string Os
public string Gpu
public string Cpu
public int CpuCnt
public int Mem
public int GpuMem
public int CpuFrq
public string Arch
public bool Fullscreen
public int Height
public int Width
public int RR
public int Version
public int get_Version()
}
internal Facepunch.Models.Analytics.SessionUpdate : object {
public string Uid
public string Sid
public Int32[] Frames
public int Mem
public int Gc
public string StatText
public string PerfText
public int Version
public int get_Version()
}
internal Facepunch.Models.Analytics.Stat : Dictionary`2<string, Container> {
public Container GetCategory(string name)
}
public Facepunch.Models.AppInfo : ValueType {
public int Version
public BuildInfo Build
public string Name
public string Os
public string Cpu
public int CpuCount
public int Mem
public string Gpu
public int GpuMem
public string Arch
public string UserId
public string UserName
public string ServerAddress
public string ServerName
public string LevelName
public string LevelPos
public string LevelRot
public int MinutesPlayed
public int get_Version()
public BuildInfo get_Build()
public string get_Name()
public string get_Os()
public string get_Cpu()
public int get_CpuCount()
public int get_Mem()
public string get_Gpu()
public int get_GpuMem()
public string get_Arch()
public string get_UserId()
public string get_UserName()
public string get_ServerAddress()
public string get_ServerName()
public string get_LevelName()
public string get_LevelPos()
public string get_LevelRot()
public int get_MinutesPlayed()
}
public Facepunch.Models.Auth : object {
public string Type
public string Id
public string Ticket
public string Name
public Auth Steam(Byte[] ticket, ulong steamId, string username)
}
public Facepunch.Models.Database.Add : object {
public string Parent
public string Content
public Auth Auth
public int Version
public int get_Version()
}
internal Facepunch.Models.Database.QueryResponse : object {
public string Content
public string Id
public DateTime Created
public DateTime Updated
public string AuthorId
public string AuthType
}
public Facepunch.Models.Database.Result`1 : object {
public bool Running
public bool Success
public Entry[] Entries
}
public Facepunch.Models.Feedback.GameInfo : ValueType {
public AppInfo AppInfo
public Auth Auth
public PlayerInfo[] Players
public int Version
public int get_Version()
}
public Facepunch.Models.Leaderboard.Add : object {
public string Parent
public float Score
public string Extra
public bool ReplaceIfHigher
public bool ReplaceIfLower
public Auth Auth
public int Version
public int get_Version()
}
public Facepunch.Models.Leaderboard.Entry : object {
public int Rank
public float Score
public string UserId
public string Name
public string Country
public string City
public DateTime Created
}
public Facepunch.Models.Leaderboard.Rank : object {
public float Score
public int GlobalCount
public int GlobalRank
public string Country
public int CountryCount
public int CountryRank
public string City
public int CityCount
public int CityRank
public int FriendRank
public DateTime Created
}
public Facepunch.Models.Manifest : object {
public NewsInfo News
public ServersInfo Servers
public string ExceptionReportingUrl
public string BenchmarkUrl
public string AnalyticUrl
public string DatabaseUrl
public string LeaderboardUrl
public string FeedbackUrl
public Administrator[] Administrators
internal Manifest FromJson(string text)
}
public Facepunch.Models.PlayerInfo : ValueType {
private string <Name>k__BackingField
private string <Id>k__BackingField
public string Name
public string Id
public string get_Name()
public void set_Name(string value)
public string get_Id()
public void set_Id(string value)
}
internal Facepunch.Mono : object {
internal void FixHttpsValidation()
}
public Facepunch.Performance : object {
private Stopwatch Stopwatch
private int frames
private int <FrameCountLastSecond>k__BackingField
private int <MemoryUsage>k__BackingField
private int <GarbageCollections>k__BackingField
private float <SecondsSinceLastConnection>k__BackingField
public int TargetFrameRate
private Int32[] frameBuckets
private Single[] frameBucketFractions
public FrameRateCategory FrameRateCategory
public int FrameCountLastSecond
public double AvgFrameTimeLastSecond
public int MemoryUsage
public int GarbageCollections
public float SecondsSinceLastConnection
public Int32[] CategorizedFrameCount
public FrameRateCategory get_FrameRateCategory()
public int get_FrameCountLastSecond()
private void set_FrameCountLastSecond(int value)
public double get_AvgFrameTimeLastSecond()
public int get_MemoryUsage()
private void set_MemoryUsage(int value)
public int get_GarbageCollections()
private void set_GarbageCollections(int value)
public float get_SecondsSinceLastConnection()
private void set_SecondsSinceLastConnection(float value)
public Int32[] get_CategorizedFrameCount()
internal void Frame()
private void OneSecond(double timelapse)
private FrameRateCategory CategorizeFrameRate(int i)
private void UpdateFrameBuckets()
public int GetFrameCount(FrameRateCategory category)
public float GetFrameFraction(FrameRateCategory category)
}
public Facepunch.PerformanceUI : MonoBehaviour {
public LayoutElement[] rainbow
public Text info
public Text fps
public Text ms
public Text mb
public Text gc
private Canvas Canvas
private float updateTime
private void Awake()
private void Update()
private void UpdateRainbow()
internal void SpawnPrefab()
}
public Facepunch.Report : object {
private string <release>k__BackingField
private string <message>k__BackingField
private string <platform>k__BackingField
private string <event_id>k__BackingField
private Dictionary`2<string, string> <tags>k__BackingField
private StackTrace <stacktrace>k__BackingField
public string release
public string message
public string platform
public string event_id
public Dictionary`2<string, string> tags
public StackTrace stacktrace
public string get_release()
public void set_release(string value)
public string get_message()
public void set_message(string value)
public string get_platform()
public void set_platform(string value)
public string get_event_id()
public void set_event_id(string value)
public Dictionary`2<string, string> get_tags()
public void set_tags(Dictionary`2<string, string> value)
public StackTrace get_stacktrace()
public void set_stacktrace(StackTrace value)
}
public Facepunch.SingletonComponent : MonoBehaviour {
public void SingletonSetup()
public void SingletonClear()
protected void Awake()
protected void OnDestroy()
}
public Facepunch.SingletonComponent`1 : SingletonComponent {
private T instance
public T Instance
public T get_Instance()
public void SingletonSetup()
public void SingletonClear()
}
public Facepunch.Threading : object {
private int mainThread
private List`1<Action> actions
public bool IsMainThread
public bool get_IsMainThread()
public void QueueOnMainThread(Action action)
internal void RunQueuedFunctionsOnMainThread()
}
public Facepunch.Utility.CommandLine : object {
private bool initialized
private string commandline
private Dictionary`2<string, string> switches
public string Full
public string get_Full()
public void Force(string val)
private void Initalize()
public bool HasSwitch(string strName)
public string GetSwitch(string strName, string strDefault)
public int GetSwitchInt(string strName, int iDefault)
public Dictionary`2<string, string> GetSwitches()
}
public Facepunch.WebUtil : object {
public void Get(string url, Action`1<string> result)
private IEnumerator DownloadStringCoroutine(WWW www, Action`1<string> result)
internal void Post(string url, Dictionary`2<string, string> data, bool wait, Action`1<string> result)
private IEnumerator PostValuesCoroutine(WWW www, Action`1<string> result)
}
internal Properties.Resources : object {
private ResourceManager resourceMan
private CultureInfo resourceCulture
internal ResourceManager ResourceManager
internal CultureInfo Culture
internal ResourceManager get_ResourceManager()
internal CultureInfo get_Culture()
internal void set_Culture(CultureInfo value)
}
