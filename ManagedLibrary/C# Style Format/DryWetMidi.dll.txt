public Melanchall.DryWetMidi.Common.ControlName : Enum {
public byte value__
public ControlName BankSelect
public ControlName Modulation
public ControlName BreathController
public ControlName FootController
public ControlName PortamentoTime
public ControlName DataEntryMsb
public ControlName ChannelVolume
public ControlName Balance
public ControlName Pan
public ControlName ExpressionController
public ControlName EffectControl1
public ControlName EffectControl2
public ControlName GeneralPurposeController1
public ControlName GeneralPurposeController2
public ControlName GeneralPurposeController3
public ControlName GeneralPurposeController4
public ControlName LsbForBankSelect
public ControlName LsbForModulation
public ControlName LsbForBreathController
public ControlName LsbForController3
public ControlName LsbForFootController
public ControlName LsbForPortamentoTime
public ControlName LsbForDataEntry
public ControlName LsbForChannelVolume
public ControlName LsbForBalance
public ControlName LsbForController9
public ControlName LsbForPan
public ControlName LsbForExpressionController
public ControlName LsbForEffectControl1
public ControlName LsbForEffectControl2
public ControlName LsbForController14
public ControlName LsbForController15
public ControlName LsbForGeneralPurposeController1
public ControlName LsbForGeneralPurposeController2
public ControlName LsbForGeneralPurposeController3
public ControlName LsbForGeneralPurposeController4
public ControlName LsbForController20
public ControlName LsbForController21
public ControlName LsbForController22
public ControlName LsbForController23
public ControlName LsbForController24
public ControlName LsbForController25
public ControlName LsbForController26
public ControlName LsbForController27
public ControlName LsbForController28
public ControlName LsbForController29
public ControlName LsbForController30
public ControlName LsbForController31
public ControlName DamperPedal
public ControlName Portamento
public ControlName Sostenuto
public ControlName SoftPedal
public ControlName LegatoFootswitch
public ControlName Hold2
public ControlName SoundController1
public ControlName SoundController2
public ControlName SoundController3
public ControlName SoundController4
public ControlName SoundController5
public ControlName SoundController6
public ControlName SoundController7
public ControlName SoundController8
public ControlName SoundController9
public ControlName SoundController10
public ControlName GeneralPurposeController5
public ControlName GeneralPurposeController6
public ControlName GeneralPurposeController7
public ControlName GeneralPurposeController8
public ControlName PortamentoControl
public ControlName HighResolutionVelocityPrefix
public ControlName Effects1Depth
public ControlName Effects2Depth
public ControlName Effects3Depth
public ControlName Effects4Depth
public ControlName Effects5Depth
public ControlName DataIncrement
public ControlName DataDecrement
public ControlName NonRegisteredParameterNumberLsb
public ControlName NonRegisteredParameterNumberMsb
public ControlName RegisteredParameterNumberLsb
public ControlName RegisteredParameterNumberMsb
public ControlName AllSoundOff
public ControlName ResetAllControllers
public ControlName LocalControl
public ControlName AllNotesOff
public ControlName OmniModeOff
public ControlName OmniModeOn
public ControlName MonoModeOn
public ControlName PolyModeOn
public ControlName Undefined
}
public Melanchall.DryWetMidi.Common.DataTypesUtilities : object {
public byte Combine(FourBitNumber head, FourBitNumber tail)
public ushort Combine(SevenBitNumber head, SevenBitNumber tail)
public UInt32 Combine(SevenBitNumber head, SevenBitNumber middle, SevenBitNumber tail)
public ushort Combine(byte head, byte tail)
public UInt32 Combine(ushort head, ushort tail)
public FourBitNumber GetTail(byte number)
public SevenBitNumber GetTail(ushort number)
public byte GetTail(short number)
public ushort GetTail(UInt32 number)
public FourBitNumber GetHead(byte number)
public SevenBitNumber GetHead(ushort number)
public byte GetHead(short number)
public ushort GetHead(UInt32 number)
public int GetVlqLength(int number)
public int GetVlqLength(long number)
public Byte[] GetVlqBytes(int number)
public Byte[] GetVlqBytes(long number)
public byte GetFirstByte(int number)
public byte GetSecondByte(int number)
public byte GetThirdByte(int number)
public byte GetFourthByte(int number)
}
internal Melanchall.DryWetMidi.Common.DisplayNameAttribute : Attribute {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
}
public Melanchall.DryWetMidi.Common.FourBitNumber : ValueType {
public FourBitNumber MinValue
public FourBitNumber MaxValue
public FourBitNumber[] Values
private byte Min
private byte Max
private byte _value
public void .ctor(byte value)
public bool TryParse(string input, FourBitNumber& fourBitNumber)
public FourBitNumber Parse(string input)
public byte op_Implicit(FourBitNumber number)
public FourBitNumber op_Explicit(byte number)
public int CompareTo(FourBitNumber other)
public TypeCode GetTypeCode()
private bool System.IConvertible.ToBoolean(IFormatProvider provider)
private char System.IConvertible.ToChar(IFormatProvider provider)
private sbyte System.IConvertible.ToSByte(IFormatProvider provider)
private byte System.IConvertible.ToByte(IFormatProvider provider)
private short System.IConvertible.ToInt16(IFormatProvider provider)
private ushort System.IConvertible.ToUInt16(IFormatProvider provider)
private int System.IConvertible.ToInt32(IFormatProvider provider)
private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider)
private long System.IConvertible.ToInt64(IFormatProvider provider)
private ulong System.IConvertible.ToUInt64(IFormatProvider provider)
private float System.IConvertible.ToSingle(IFormatProvider provider)
private double System.IConvertible.ToDouble(IFormatProvider provider)
private decimal System.IConvertible.ToDecimal(IFormatProvider provider)
private DateTime System.IConvertible.ToDateTime(IFormatProvider provider)
private string System.IConvertible.ToString(IFormatProvider provider)
private object System.IConvertible.ToType(Type conversionType, IFormatProvider provider)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
internal Melanchall.DryWetMidi.Common.MathUtilities : object {
internal bool IsPowerOfTwo(int value)
internal long LeastCommonMultiple(long a, long b)
internal long GreatestCommonDivisor(long a, long b)
internal Tuple`2<long, long> SolveDiophantineEquation(long a, long b)
internal double Round(double value)
internal double Round(double value, int digits)
internal long RoundToLong(double value)
}
internal Melanchall.DryWetMidi.Common.Parsing`1 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ParsingResult Invoke(string input, T& result)
public IAsyncResult BeginInvoke(string input, T& result, AsyncCallback callback, object object)
public ParsingResult EndInvoke(T& result, IAsyncResult __result)
}
internal Melanchall.DryWetMidi.Common.ParsingResult : object {
public ParsingResult Parsed
public ParsingResult EmptyInputString
public ParsingResult NotMatched
private string _error
private ParsingStatus <Status>k__BackingField
public ParsingStatus Status
public Exception Exception
private void .ctor(string error)
private void .ctor(ParsingStatus status)
private void .ctor(ParsingStatus status, string error)
public ParsingStatus get_Status()
public Exception get_Exception()
public ParsingResult Error(string error)
}
internal Melanchall.DryWetMidi.Common.ParsingStatus : Enum {
public int value__
public ParsingStatus Parsed
public ParsingStatus EmptyInputString
public ParsingStatus NotMatched
public ParsingStatus FormatError
}
internal Melanchall.DryWetMidi.Common.ParsingUtilities : object {
private NumberStyles NonnegativeIntegerNumberStyle
private NumberStyles IntegerNumberStyle
private NumberStyles NonnegativeDoubleNumberStyle
public bool TryParse(string input, Parsing`1<T> parsing, T& result)
public T Parse(string input, Parsing`1<T> parsing)
public string GetNonnegativeIntegerNumberGroup(string groupName)
public string GetIntegerNumberGroup(string groupName)
public string GetNonnegativeDoubleNumberGroup(string groupName)
public Match Match(string input, IEnumerable`1<string> patterns, bool ignoreCase)
public Match[] Matches(string input, IEnumerable`1<string> patterns, bool ignoreCase)
public bool ParseNonnegativeInt(Match match, string groupName, int defaultValue, Int32& value)
public bool ParseInt(Match match, string groupName, int defaultValue, Int32& value)
public bool ParseNonnegativeDouble(Match match, string groupName, double defaultValue, Double& value)
public bool ParseNonnegativeLong(Match match, string groupName, long defaultValue, Int64& value)
private bool ParseInt(Match match, string groupName, int defaultValue, NumberStyles numberStyle, Int32& value)
private bool ParseDouble(Match match, string groupName, double defaultValue, NumberStyles numberStyle, Double& value)
}
internal Melanchall.DryWetMidi.Common.ReflectionUtilities : object {
public TValue[] GetConstantsValues(Type type)
}
public Melanchall.DryWetMidi.Common.SevenBitNumber : ValueType {
public SevenBitNumber MinValue
public SevenBitNumber MaxValue
public SevenBitNumber[] Values
private byte Min
private byte Max
private byte _value
public void .ctor(byte value)
public bool TryParse(string input, SevenBitNumber& sevenBitNumber)
public SevenBitNumber Parse(string input)
public byte op_Implicit(SevenBitNumber number)
public SevenBitNumber op_Explicit(byte number)
public int CompareTo(SevenBitNumber other)
public TypeCode GetTypeCode()
private bool System.IConvertible.ToBoolean(IFormatProvider provider)
private char System.IConvertible.ToChar(IFormatProvider provider)
private sbyte System.IConvertible.ToSByte(IFormatProvider provider)
private byte System.IConvertible.ToByte(IFormatProvider provider)
private short System.IConvertible.ToInt16(IFormatProvider provider)
private ushort System.IConvertible.ToUInt16(IFormatProvider provider)
private int System.IConvertible.ToInt32(IFormatProvider provider)
private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider)
private long System.IConvertible.ToInt64(IFormatProvider provider)
private ulong System.IConvertible.ToUInt64(IFormatProvider provider)
private float System.IConvertible.ToSingle(IFormatProvider provider)
private double System.IConvertible.ToDouble(IFormatProvider provider)
private decimal System.IConvertible.ToDecimal(IFormatProvider provider)
private DateTime System.IConvertible.ToDateTime(IFormatProvider provider)
private string System.IConvertible.ToString(IFormatProvider provider)
private object System.IConvertible.ToType(Type conversionType, IFormatProvider provider)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
internal Melanchall.DryWetMidi.Common.ShortByteParser : object {
internal ParsingResult TryParse(string input, byte minValue, byte maxValue, Byte& result)
}
public Melanchall.DryWetMidi.Common.SmpteFormat : Enum {
public byte value__
public SmpteFormat TwentyFour
public SmpteFormat TwentyFive
public SmpteFormat ThirtyDrop
public SmpteFormat Thirty
}
internal Melanchall.DryWetMidi.Common.ThrowIfArgument : object {
private int MinNonnegativeValue
private int MinPositiveValue
internal void IsNull(string parameterName, object argument)
internal void ContainsNull(string parameterName, IEnumerable`1<T> argument)
internal void IsInvalidEnumValue(string parameterName, TEnum argument)
internal void IsOutOfRange(string parameterName, TimeSpan value, TimeSpan min, TimeSpan max, string message)
internal void IsOutOfRange(string parameterName, int value, int min, int max, string message)
internal void IsOutOfRange(string parameterName, long value, long min, long max, string message)
internal void IsOutOfRange(string parameterName, double value, double min, double max, string message)
internal void DoesntSatisfyCondition(string parameterName, int value, Predicate`1<int> condition, string message)
internal void IsGreaterThan(string parameterName, int value, int reference, string message)
internal void IsGreaterThan(string parameterName, long value, long reference, string message)
internal void IsLessThan(string parameterName, int value, int reference, string message)
internal void IsLessThan(string parameterName, long value, long reference, string message)
internal void IsLessThan(string parameterName, double value, double reference, string message)
internal void IsNegative(string parameterName, int value, string message)
internal void IsNegative(string parameterName, long value, string message)
internal void IsNegative(string parameterName, double value, string message)
internal void IsNonpositive(string parameterName, int value, string message)
internal void IsNonpositive(string parameterName, long value, string message)
internal void IsNonpositive(string parameterName, double value, string message)
internal void IsNullOrWhiteSpaceString(string parameterName, string value, string stringDescription)
internal void IsNullOrEmptyString(string parameterName, string value, string stringDescription)
internal void IsInvalidIndex(string parameterName, int index, int collectionSize)
internal void IsEmptyCollection(string parameterName, IEnumerable`1<T> collection, string message)
internal void ContainsInvalidEnumValue(string parameterName, IEnumerable`1<TEnum> argument)
}
internal Melanchall.DryWetMidi.Composing.AddAnchorAction : object {
private object <Anchor>k__BackingField
public object Anchor
public void .ctor(object anchor)
public object get_Anchor()
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.AddChordAction : object {
private ChordDescriptor <ChordDescriptor>k__BackingField
public ChordDescriptor ChordDescriptor
public void .ctor(ChordDescriptor chordDescriptor)
public ChordDescriptor get_ChordDescriptor()
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.AddNoteAction : object {
private NoteDescriptor <NoteDescriptor>k__BackingField
public NoteDescriptor NoteDescriptor
public void .ctor(NoteDescriptor noteDescriptor)
public NoteDescriptor get_NoteDescriptor()
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.AddPatternAction : object {
private Pattern <Pattern>k__BackingField
public Pattern Pattern
public void .ctor(Pattern pattern)
public Pattern get_Pattern()
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.AddTextEventAction`1 : object {
private string <Text>k__BackingField
public string Text
public void .ctor(string text)
public string get_Text()
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.AnchorPosition : Enum {
public int value__
public AnchorPosition First
public AnchorPosition Last
public AnchorPosition Nth
}
public Melanchall.DryWetMidi.Composing.ChordDescriptor : object {
private IEnumerable`1<Note> <Notes>k__BackingField
private SevenBitNumber <Velocity>k__BackingField
private ITimeSpan <Length>k__BackingField
public IEnumerable`1<Note> Notes
public SevenBitNumber Velocity
public ITimeSpan Length
public void .ctor(IEnumerable`1<Note> notes, SevenBitNumber velocity, ITimeSpan length)
public IEnumerable`1<Note> get_Notes()
public SevenBitNumber get_Velocity()
public ITimeSpan get_Length()
public bool op_Equality(ChordDescriptor chordDescriptor1, ChordDescriptor chordDescriptor2)
public bool op_Inequality(ChordDescriptor chordDescriptor1, ChordDescriptor chordDescriptor2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Composing.ChordTransformation : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ChordDescriptor Invoke(ChordDescriptor chordDescriptor)
public IAsyncResult BeginInvoke(ChordDescriptor chordDescriptor, AsyncCallback callback, object object)
public ChordDescriptor EndInvoke(IAsyncResult result)
}
internal Melanchall.DryWetMidi.Composing.IPatternAction {
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.MoveToAnchorAction : object {
private object <Anchor>k__BackingField
private AnchorPosition <AnchorPosition>k__BackingField
private int <Index>k__BackingField
public object Anchor
public AnchorPosition AnchorPosition
public int Index
public void .ctor(AnchorPosition position)
public void .ctor(object anchor, AnchorPosition position)
public void .ctor(AnchorPosition position, int index)
public void .ctor(object anchor, AnchorPosition position, int index)
public object get_Anchor()
public AnchorPosition get_AnchorPosition()
public int get_Index()
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.MoveToTimeAction : object {
private ITimeSpan <Time>k__BackingField
public ITimeSpan Time
public void .ctor(ITimeSpan time)
public ITimeSpan get_Time()
public PatternActionResult Invoke(long time, PatternContext context)
}
public Melanchall.DryWetMidi.Composing.NoteDescriptor : object {
private Note <Note>k__BackingField
private SevenBitNumber <Velocity>k__BackingField
private ITimeSpan <Length>k__BackingField
public Note Note
public SevenBitNumber Velocity
public ITimeSpan Length
public void .ctor(Note note, SevenBitNumber velocity, ITimeSpan length)
public Note get_Note()
public SevenBitNumber get_Velocity()
public ITimeSpan get_Length()
public void set_Length(ITimeSpan value)
public bool op_Equality(NoteDescriptor noteDescriptor1, NoteDescriptor noteDescriptor2)
public bool op_Inequality(NoteDescriptor noteDescriptor1, NoteDescriptor noteDescriptor2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Composing.NoteTransformation : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public NoteDescriptor Invoke(NoteDescriptor noteDescriptor)
public IAsyncResult BeginInvoke(NoteDescriptor noteDescriptor, AsyncCallback callback, object object)
public NoteDescriptor EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Composing.Pattern : object {
private IEnumerable`1<IPatternAction> <Actions>k__BackingField
internal IEnumerable`1<IPatternAction> Actions
internal void .ctor(IEnumerable`1<IPatternAction> actions)
internal IEnumerable`1<IPatternAction> get_Actions()
public TrackChunk ToTrackChunk(TempoMap tempoMap, FourBitNumber channel)
public TrackChunk ToTrackChunk(TempoMap tempoMap)
public MidiFile ToFile(TempoMap tempoMap, FourBitNumber channel)
public MidiFile ToFile(TempoMap tempoMap)
public Pattern Clone()
internal PatternActionResult InvokeActions(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.PatternActionResult : object {
public PatternActionResult DoNothing
private Nullable`1<long> <Time>k__BackingField
private IEnumerable`1<Note> <Notes>k__BackingField
private IEnumerable`1<TimedEvent> <Events>k__BackingField
public Nullable`1<long> Time
public IEnumerable`1<Note> Notes
public IEnumerable`1<TimedEvent> Events
public void .ctor(Nullable`1<long> time)
public void .ctor(Nullable`1<long> time, IEnumerable`1<Note> notes)
public void .ctor(Nullable`1<long> time, IEnumerable`1<TimedEvent> events)
public void .ctor(Nullable`1<long> time, IEnumerable`1<Note> notes, IEnumerable`1<TimedEvent> events)
public Nullable`1<long> get_Time()
public IEnumerable`1<Note> get_Notes()
public IEnumerable`1<TimedEvent> get_Events()
}
public Melanchall.DryWetMidi.Composing.PatternBuilder : object {
public SevenBitNumber DefaultVelocity
public ITimeSpan DefaultNoteLength
public ITimeSpan DefaultStep
public Octave DefaultOctave
public Note DefaultRootNote
private List`1<IPatternAction> _actions
private Dictionary`2<object, int> _anchorCounters
private int _globalAnchorsCounter
private SevenBitNumber <Velocity>k__BackingField
private ITimeSpan <NoteLength>k__BackingField
private ITimeSpan <Step>k__BackingField
private Octave <Octave>k__BackingField
private Note <RootNote>k__BackingField
public SevenBitNumber Velocity
public ITimeSpan NoteLength
public ITimeSpan Step
public Octave Octave
public Note RootNote
public void .ctor(Pattern pattern)
public SevenBitNumber get_Velocity()
private void set_Velocity(SevenBitNumber value)
public ITimeSpan get_NoteLength()
private void set_NoteLength(ITimeSpan value)
public ITimeSpan get_Step()
private void set_Step(ITimeSpan value)
public Octave get_Octave()
private void set_Octave(Octave value)
public Note get_RootNote()
private void set_RootNote(Note value)
public PatternBuilder Note(Interval interval)
public PatternBuilder Note(Interval interval, ITimeSpan length)
public PatternBuilder Note(Interval interval, SevenBitNumber velocity)
public PatternBuilder Note(Interval interval, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Note(NoteName noteName)
public PatternBuilder Note(NoteName noteName, ITimeSpan length)
public PatternBuilder Note(NoteName noteName, SevenBitNumber velocity)
public PatternBuilder Note(NoteName noteName, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Note(Note note)
public PatternBuilder Note(Note note, ITimeSpan length)
public PatternBuilder Note(Note note, SevenBitNumber velocity)
public PatternBuilder Note(Note note, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(Chord chord)
public PatternBuilder Chord(Chord chord, Octave octave)
public PatternBuilder Chord(Chord chord, ITimeSpan length)
public PatternBuilder Chord(Chord chord, Octave octave, ITimeSpan length)
public PatternBuilder Chord(Chord chord, SevenBitNumber velocity)
public PatternBuilder Chord(Chord chord, Octave octave, SevenBitNumber velocity)
public PatternBuilder Chord(Chord chord, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(Chord chord, Octave octave, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName, ITimeSpan length)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, Note rootNote)
public PatternBuilder Chord(IEnumerable`1<Interval> interval, Note rootNote, ITimeSpan length)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, Note rootNote, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, Note rootNote, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames)
public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames, ITimeSpan length)
public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Note> notes)
public PatternBuilder Chord(IEnumerable`1<Note> notes, ITimeSpan length)
public PatternBuilder Chord(IEnumerable`1<Note> notes, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Note> notes, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Pattern(Pattern pattern)
public PatternBuilder Anchor(object anchor)
public PatternBuilder Anchor()
public PatternBuilder MoveToFirstAnchor(object anchor)
public PatternBuilder MoveToFirstAnchor()
public PatternBuilder MoveToLastAnchor(object anchor)
public PatternBuilder MoveToLastAnchor()
public PatternBuilder MoveToNthAnchor(object anchor, int index)
public PatternBuilder MoveToNthAnchor(int index)
public PatternBuilder StepForward(ITimeSpan step)
public PatternBuilder StepForward()
public PatternBuilder StepBack(ITimeSpan step)
public PatternBuilder StepBack()
public PatternBuilder MoveToTime(ITimeSpan time)
public PatternBuilder MoveToPreviousTime()
public PatternBuilder Repeat(int actionsCount, int repetitionsCount)
public PatternBuilder Repeat(int repetitionsCount)
public PatternBuilder Repeat()
public PatternBuilder Lyrics(string text)
public PatternBuilder Marker(string marker)
public PatternBuilder ProgramChange(SevenBitNumber programNumber)
public PatternBuilder ProgramChange(GeneralMidiProgram program)
public PatternBuilder ProgramChange(GeneralMidi2Program program)
public PatternBuilder SetRootNote(Note rootNote)
public PatternBuilder SetVelocity(SevenBitNumber velocity)
public PatternBuilder SetNoteLength(ITimeSpan length)
public PatternBuilder SetStep(ITimeSpan step)
public PatternBuilder SetOctave(Octave octave)
public Pattern Build()
public PatternBuilder ReplayPattern(Pattern pattern)
private PatternBuilder AddAction(IPatternAction patternAction)
private int GetAnchorCounter(object anchor)
private void UpdateAnchorsCounters(object anchor)
private PatternBuilder RepeatActions(int actionsCount, int repetitionsCount)
private Note <Chord>b__61_0(NoteName n)
}
internal Melanchall.DryWetMidi.Composing.PatternContext : object {
private Stack`1<long> _timeHistory
private Dictionary`2<object, List`1<long>> _anchors
private List`1<long> _anchorsList
private TempoMap <TempoMap>k__BackingField
private FourBitNumber <Channel>k__BackingField
public TempoMap TempoMap
public FourBitNumber Channel
public void .ctor(TempoMap tempoMap, FourBitNumber channel)
public TempoMap get_TempoMap()
public FourBitNumber get_Channel()
public void SaveTime(long time)
public Nullable`1<long> RestoreTime()
public void AnchorTime(object anchor, long time)
public IReadOnlyList`1<long> GetAnchorTimes(object anchor)
private List`1<long> GetAnchorTimesList(object anchor)
}
public Melanchall.DryWetMidi.Composing.PatternUtilities : object {
public Pattern TransformNotes(Pattern pattern, NoteTransformation noteTransformation, bool recursive)
public Pattern TransformChords(Pattern pattern, ChordTransformation chordTransformation, bool recursive)
public IEnumerable`1<Pattern> SplitAtAnchor(Pattern pattern, object anchor, bool removeEmptyPatterns)
public IEnumerable`1<Pattern> SplitAtAllAnchors(Pattern pattern, bool removeEmptyPatterns)
public IEnumerable`1<Pattern> SplitAtMarker(Pattern pattern, string marker, bool removeEmptyPatterns, StringComparison stringComparison)
public IEnumerable`1<Pattern> SplitAtAllMarkers(Pattern pattern, bool removeEmptyPatterns)
public Pattern CombineInSequence(IEnumerable`1<Pattern> patterns)
public Pattern CombineInParallel(IEnumerable`1<Pattern> patterns)
private IEnumerable`1<Pattern> SplitAtActions(Pattern pattern, Predicate`1<IPatternAction> actionSelector, bool removeEmptyPatterns)
}
internal Melanchall.DryWetMidi.Composing.SetGeneralMidi2ProgramAction : object {
private GeneralMidi2Program <Program>k__BackingField
public GeneralMidi2Program Program
public void .ctor(GeneralMidi2Program program)
public GeneralMidi2Program get_Program()
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.SetGeneralMidiProgramAction : object {
private GeneralMidiProgram <Program>k__BackingField
public GeneralMidiProgram Program
public void .ctor(GeneralMidiProgram program)
public GeneralMidiProgram get_Program()
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.SetProgramNumberAction : object {
private SevenBitNumber <ProgramNumber>k__BackingField
public SevenBitNumber ProgramNumber
public void .ctor(SevenBitNumber programNumber)
public SevenBitNumber get_ProgramNumber()
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.StepAction : object {
private ITimeSpan <Step>k__BackingField
public ITimeSpan Step
public void .ctor(ITimeSpan step)
public ITimeSpan get_Step()
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.StepBackAction : StepAction {
public void .ctor(ITimeSpan step)
public PatternActionResult Invoke(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.StepForwardAction : StepAction {
public void .ctor(ITimeSpan step)
public PatternActionResult Invoke(long time, PatternContext context)
}
public Melanchall.DryWetMidi.Core.ActiveSensingEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
internal Melanchall.DryWetMidi.Core.ArrayUtilities : object {
internal bool Equals(T[] array1, T[] array2)
internal int GetHashCode(T[] array)
}
public Melanchall.DryWetMidi.Core.BaseTextEvent : MetaEvent {
private string <Text>k__BackingField
public string Text
public void .ctor(MidiEventType eventType)
public void .ctor(MidiEventType eventType, string text)
public string get_Text()
public void set_Text(string value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
}
public Melanchall.DryWetMidi.Core.ChannelAftertouchEvent : ChannelEvent {
private int ParametersCount
private int AftertouchValueParameterIndex
public SevenBitNumber AftertouchValue
public void .ctor(SevenBitNumber aftertouchValue)
public SevenBitNumber get_AftertouchValue()
public void set_AftertouchValue(SevenBitNumber value)
public string ToString()
}
public Melanchall.DryWetMidi.Core.ChannelEvent : MidiEvent {
private SevenBitNumber[] _parameters
private FourBitNumber <Channel>k__BackingField
public FourBitNumber Channel
protected SevenBitNumber Item
protected void .ctor(MidiEventType eventType, int parametersCount)
public FourBitNumber get_Channel()
public void set_Channel(FourBitNumber value)
protected SevenBitNumber get_Item(int index)
protected void set_Item(int index, SevenBitNumber value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
}
internal Melanchall.DryWetMidi.Core.ChannelEventReader : object {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
}
internal Melanchall.DryWetMidi.Core.ChannelEventWriter : object {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.ChannelPrefixEvent : MetaEvent {
private byte <Channel>k__BackingField
public byte Channel
public void .ctor(byte channel)
public byte get_Channel()
public void set_Channel(byte value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ChunksCollection : object {
private List`1<MidiChunk> _chunks
public MidiChunk Item
public int Count
public MidiChunk get_Item(int index)
public void set_Item(int index, MidiChunk value)
public int get_Count()
public void Add(MidiChunk chunk)
public void AddRange(IEnumerable`1<MidiChunk> chunks)
public void Insert(int index, MidiChunk chunk)
public void InsertRange(int index, IEnumerable`1<MidiChunk> chunks)
public bool Remove(MidiChunk chunk)
public void RemoveAt(int index)
public int RemoveAll(Predicate`1<MidiChunk> match)
public int IndexOf(MidiChunk chunk)
public void Clear()
public IEnumerator`1<MidiChunk> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
internal Melanchall.DryWetMidi.Core.ChunksConverterFactory : object {
private Dictionary`2<MidiFileFormat, IChunksConverter> _converters
public IChunksConverter GetConverter(MidiFileFormat format)
}
public Melanchall.DryWetMidi.Core.ChunkType : object {
private Type <Type>k__BackingField
private string <Id>k__BackingField
public Type Type
public string Id
public void .ctor(Type type, string id)
public Type get_Type()
public string get_Id()
}
public Melanchall.DryWetMidi.Core.ChunkTypesCollection : object {
private Dictionary`2<Type, string> _ids
private Dictionary`2<string, Type> _types
public void Add(Type type, string id)
public bool TryGetType(string id, Type& type)
public bool TryGetId(Type type, String& id)
public IEnumerator`1<ChunkType> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public Melanchall.DryWetMidi.Core.CompressionPolicy : Enum {
public int value__
public CompressionPolicy NoCompression
public CompressionPolicy Default
public CompressionPolicy UseRunningStatus
public CompressionPolicy NoteOffAsSilentNoteOn
public CompressionPolicy DeleteDefaultTimeSignature
public CompressionPolicy DeleteDefaultKeySignature
public CompressionPolicy DeleteDefaultSetTempo
public CompressionPolicy DeleteUnknownMetaEvents
public CompressionPolicy DeleteUnknownChunks
}
public Melanchall.DryWetMidi.Core.ContinueEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ControlChangeEvent : ChannelEvent {
private int ParametersCount
private int ControlNumberParameterIndex
private int ControlValueParameterIndex
public SevenBitNumber ControlNumber
public SevenBitNumber ControlValue
public void .ctor(SevenBitNumber controlNumber, SevenBitNumber controlValue)
public SevenBitNumber get_ControlNumber()
public void set_ControlNumber(SevenBitNumber value)
public SevenBitNumber get_ControlValue()
public void set_ControlValue(SevenBitNumber value)
public string ToString()
}
public Melanchall.DryWetMidi.Core.ControlUtilities : object {
public ControlName GetControlName(ControlChangeEvent controlChangeEvent)
public SevenBitNumber AsSevenBitNumber(ControlName controlName)
public ControlChangeEvent GetControlChangeEvent(ControlName controlName, SevenBitNumber controlValue, FourBitNumber channel)
private ControlName GetControlName(SevenBitNumber controlNumber)
}
public Melanchall.DryWetMidi.Core.CopyrightNoticeEvent : BaseTextEvent {
public void .ctor(string text)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.CuePointEvent : BaseTextEvent {
public void .ctor(string text)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.DecodeTextCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public string Invoke(Byte[] bytes, ReadingSettings settings)
public IAsyncResult BeginInvoke(Byte[] bytes, ReadingSettings settings, AsyncCallback callback, object object)
public string EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Core.DeviceNameEvent : BaseTextEvent {
public void .ctor(string deviceName)
protected MidiEvent CloneEvent()
public string ToString()
}
internal Melanchall.DryWetMidi.Core.EndOfTrackEvent : MetaEvent {
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.EscapeSysExEvent : SysExEvent {
public void .ctor(Byte[] data)
public string ToString()
}
internal Melanchall.DryWetMidi.Core.EventReaderFactory : object {
private IEventReader _metaEventReader
private IEventReader _channelEventReader
private IEventReader _sysExEventReader
private IEventReader _systemRealTimeEventReader
private IEventReader _systemCommonEventReader
internal IEventReader GetReader(byte statusByte, bool smfOnly)
}
public Melanchall.DryWetMidi.Core.EventsCollection : object {
private List`1<MidiEvent> _events
public MidiEvent Item
public int Count
public MidiEvent get_Item(int index)
public void set_Item(int index, MidiEvent value)
public int get_Count()
public void Add(MidiEvent midiEvent)
public void AddRange(IEnumerable`1<MidiEvent> events)
public void Insert(int index, MidiEvent midiEvent)
public void InsertRange(int index, IEnumerable`1<MidiEvent> midiEvents)
public bool Remove(MidiEvent midiEvent)
public void RemoveAt(int index)
public int RemoveAll(Predicate`1<MidiEvent> match)
public int IndexOf(MidiEvent midiEvent)
public void Clear()
public IEnumerator`1<MidiEvent> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public Melanchall.DryWetMidi.Core.EventType : object {
private Type <Type>k__BackingField
private byte <StatusByte>k__BackingField
public Type Type
public byte StatusByte
public void .ctor(Type type, byte statusByte)
public Type get_Type()
public byte get_StatusByte()
}
public Melanchall.DryWetMidi.Core.EventTypesCollection : object {
private Dictionary`2<Type, byte> _statusBytes
private Dictionary`2<byte, Type> _types
public void Add(Type type, byte statusByte)
public bool TryGetType(byte statusByte, Type& type)
public bool TryGetStatusByte(Type type, Byte& statusByte)
public IEnumerator`1<EventType> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
internal Melanchall.DryWetMidi.Core.EventWriterFactory : object {
private IEventWriter _metaEventWriter
private IEventWriter _channelEventWriter
private IEventWriter _sysExEventWriter
private IEventWriter _systemRealTimeEventWriter
private IEventWriter _systemCommonEventWriter
internal IEventWriter GetWriter(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.ExtraTrackChunkPolicy : Enum {
public byte value__
public ExtraTrackChunkPolicy Read
public ExtraTrackChunkPolicy Skip
}
internal Melanchall.DryWetMidi.Core.FileUtilities : object {
private UInt32 GENERIC_READ
private UInt32 GENERIC_WRITE
private UInt32 CREATE_NEW
private UInt32 CREATE_ALWAYS
private UInt32 OPEN_EXISTING
private UInt32 FILE_SHARE_NONE
private SafeFileHandle CreateFile(string lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, IntPtr lpSecurityAttributes, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, IntPtr hTemplateFile)
internal FileStream OpenFileForRead(string filePath)
internal FileStream OpenFileForWrite(string filePath, bool overwriteFile)
private SafeFileHandle GetFileHandle(string filePath, UInt32 fileAccess, UInt32 creationDisposition)
}
internal Melanchall.DryWetMidi.Core.HeaderChunk : MidiChunk {
public string Id
private ushort <FileFormat>k__BackingField
private TimeDivision <TimeDivision>k__BackingField
private ushort <TracksNumber>k__BackingField
public ushort FileFormat
public TimeDivision TimeDivision
public ushort TracksNumber
public ushort get_FileFormat()
public void set_FileFormat(ushort value)
public TimeDivision get_TimeDivision()
public void set_TimeDivision(TimeDivision value)
public ushort get_TracksNumber()
public void set_TracksNumber(ushort value)
public MidiChunk Clone()
protected void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected UInt32 GetContentSize(WritingSettings settings)
}
internal Melanchall.DryWetMidi.Core.IChunksConverter {
public IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks)
}
internal Melanchall.DryWetMidi.Core.IEventReader {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
}
internal Melanchall.DryWetMidi.Core.IEventWriter {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.InstrumentNameEvent : BaseTextEvent {
public void .ctor(string instrumentName)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValueException : MidiException {
private string ValueSerializationPropertyName
private byte <Value>k__BackingField
public byte Value
public void .ctor(string message, byte value)
private void .ctor(SerializationInfo info, StreamingContext context)
public byte get_Value()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValuePolicy : Enum {
public byte value__
public InvalidChannelEventParameterValuePolicy Abort
public InvalidChannelEventParameterValuePolicy ReadValid
public InvalidChannelEventParameterValuePolicy SnapToLimits
}
public Melanchall.DryWetMidi.Core.InvalidChunkSizeException : MidiException {
private string ExpectedSizeSerializationPropertyName
private string ActualSizeSerializationPropertyName
private long <ExpectedSize>k__BackingField
private long <ActualSize>k__BackingField
public long ExpectedSize
public long ActualSize
public void .ctor(long expectedSize, long actualSize)
private void .ctor(SerializationInfo info, StreamingContext context)
public long get_ExpectedSize()
public long get_ActualSize()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.InvalidChunkSizePolicy : Enum {
public byte value__
public InvalidChunkSizePolicy Abort
public InvalidChunkSizePolicy Ignore
}
public Melanchall.DryWetMidi.Core.InvalidEventSizePolicy : Enum {
public byte value__
public InvalidEventSizePolicy Ignore
public InvalidEventSizePolicy Abort
}
public Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValueException : MidiException {
private string ValueSerializationPropertyName
private int <Value>k__BackingField
public int Value
public void .ctor(string message, int value)
private void .ctor(SerializationInfo info, StreamingContext context)
public int get_Value()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValuePolicy : Enum {
public int value__
public InvalidMetaEventParameterValuePolicy Abort
public InvalidMetaEventParameterValuePolicy SnapToLimits
}
public Melanchall.DryWetMidi.Core.InvalidMidiTimeCodeComponentException : MidiException {
private string ValueSerializationPropertyName
private byte <Value>k__BackingField
public byte Value
public void .ctor(string message, byte value)
private void .ctor(SerializationInfo info, StreamingContext context)
public byte get_Value()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValueException : MidiException {
private string ValueSerializationPropertyName
private int <Value>k__BackingField
public int Value
public void .ctor(string message, int value)
private void .ctor(SerializationInfo info, StreamingContext context)
public int get_Value()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValuePolicy : Enum {
public int value__
public InvalidSystemCommonEventParameterValuePolicy Abort
public InvalidSystemCommonEventParameterValuePolicy SnapToLimits
}
public Melanchall.DryWetMidi.Core.KeySignatureEvent : MetaEvent {
public sbyte DefaultKey
public byte DefaultScale
private sbyte MinKey
private sbyte MaxKey
private byte MinScale
private byte MaxScale
private sbyte _key
private byte _scale
public sbyte Key
public byte Scale
public void .ctor(sbyte key, byte scale)
public sbyte get_Key()
public void set_Key(sbyte value)
public byte get_Scale()
public void set_Scale(byte value)
private int ProcessValue(int value, string property, int min, int max, InvalidMetaEventParameterValuePolicy policy)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.LyricEvent : BaseTextEvent {
public void .ctor(string text)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.MarkerEvent : BaseTextEvent {
public void .ctor(string text)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.MetaEvent : MidiEvent {
protected void .ctor(MidiEventType eventType)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
}
internal Melanchall.DryWetMidi.Core.MetaEventReader : object {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
private bool TryGetEventType(EventTypesCollection customMetaEventTypes, byte statusByte, Type& eventType)
private bool IsMetaEventType(Type type)
}
internal Melanchall.DryWetMidi.Core.MetaEventWriter : object {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.MidiChunk : object {
public int IdLength
private string <ChunkId>k__BackingField
public string ChunkId
public void .ctor(string id)
public string get_ChunkId()
public MidiChunk Clone()
internal void Read(MidiReader reader, ReadingSettings settings)
internal void Write(MidiWriter writer, WritingSettings settings)
protected void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected UInt32 GetContentSize(WritingSettings settings)
}
public Melanchall.DryWetMidi.Core.MidiEvent : object {
public int UnknownContentSize
private long _deltaTime
private MidiEventType <EventType>k__BackingField
public MidiEventType EventType
public long DeltaTime
public void .ctor(MidiEventType eventType)
public MidiEventType get_EventType()
public long get_DeltaTime()
public void set_DeltaTime(long value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public MidiEvent Clone()
}
public Melanchall.DryWetMidi.Core.MidiEventType : Enum {
public int value__
public MidiEventType NormalSysEx
public MidiEventType EscapeSysEx
public MidiEventType SequenceNumber
public MidiEventType Text
public MidiEventType CopyrightNotice
public MidiEventType SequenceTrackName
public MidiEventType InstrumentName
public MidiEventType Lyric
public MidiEventType Marker
public MidiEventType CuePoint
public MidiEventType ProgramName
public MidiEventType DeviceName
public MidiEventType ChannelPrefix
public MidiEventType PortPrefix
public MidiEventType EndOfTrack
public MidiEventType SetTempo
public MidiEventType SmpteOffset
public MidiEventType TimeSignature
public MidiEventType KeySignature
public MidiEventType SequencerSpecific
public MidiEventType UnknownMeta
public MidiEventType CustomMeta
public MidiEventType NoteOff
public MidiEventType NoteOn
public MidiEventType NoteAftertouch
public MidiEventType ControlChange
public MidiEventType ProgramChange
public MidiEventType ChannelAftertouch
public MidiEventType PitchBend
public MidiEventType TimingClock
public MidiEventType Start
public MidiEventType Continue
public MidiEventType Stop
public MidiEventType ActiveSensing
public MidiEventType Reset
public MidiEventType MidiTimeCode
public MidiEventType SongPositionPointer
public MidiEventType SongSelect
public MidiEventType TuneRequest
}
public Melanchall.DryWetMidi.Core.MidiException : Exception {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.MidiFile : object {
private string RiffChunkId
private int RmidPreambleSize
private Nullable`1<ushort> _originalFormat
private TimeDivision <TimeDivision>k__BackingField
private ChunksCollection <Chunks>k__BackingField
public TimeDivision TimeDivision
public ChunksCollection Chunks
public MidiFileFormat OriginalFormat
public void .ctor(IEnumerable`1<MidiChunk> chunks)
public void .ctor(MidiChunk[] chunks)
public TimeDivision get_TimeDivision()
public void set_TimeDivision(TimeDivision value)
public ChunksCollection get_Chunks()
public MidiFileFormat get_OriginalFormat()
internal void set_OriginalFormat(MidiFileFormat value)
public MidiFile Read(string filePath, ReadingSettings settings)
public void Write(string filePath, bool overwriteFile, MidiFileFormat format, WritingSettings settings)
public MidiFile Read(Stream stream, ReadingSettings settings)
public void Write(Stream stream, MidiFileFormat format, WritingSettings settings)
public MidiFile Clone()
private MidiChunk ReadChunk(MidiReader reader, ReadingSettings settings, int actualTrackChunksCount, Nullable`1<int> expectedTrackChunksCount)
private void ReactOnUnexpectedTrackChunksCount(UnexpectedTrackChunksCountPolicy policy, int actualTrackChunksCount, int expectedTrackChunksCount)
private void ReactOnNotEnoughBytes(NotEnoughBytesPolicy policy, Exception exception)
private MidiChunk TryCreateChunk(string chunkId, ChunkTypesCollection chunksTypes)
private bool IsChunkType(Type type)
}
public Melanchall.DryWetMidi.Core.MidiFileFormat : Enum {
public ushort value__
public MidiFileFormat SingleTrack
public MidiFileFormat MultiTrack
public MidiFileFormat MultiSequence
}
public Melanchall.DryWetMidi.Core.MidiFileUtilities : object {
public IEnumerable`1<FourBitNumber> GetChannels(MidiFile midiFile)
internal IEnumerable`1<MidiEvent> GetEvents(MidiFile midiFile)
}
public Melanchall.DryWetMidi.Core.MidiReader : object {
private BinaryReader _binaryReader
private bool _disposed
public long Position
public long Length
public bool EndReached
public void .ctor(Stream stream)
public long get_Position()
public void set_Position(long value)
public long get_Length()
public bool get_EndReached()
public Byte[] ReadAllBytes()
public byte ReadByte()
public sbyte ReadSByte()
public Byte[] ReadBytes(int count)
public ushort ReadWord()
public UInt32 ReadDword()
public short ReadInt16()
public string ReadString(int count)
public int ReadVlqNumber()
public long ReadVlqLongNumber()
public UInt32 Read3ByteDword()
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Core.MidiTimeCodeComponent : Enum {
public byte value__
public MidiTimeCodeComponent FramesLsb
public MidiTimeCodeComponent FramesMsb
public MidiTimeCodeComponent SecondsLsb
public MidiTimeCodeComponent SecondsMsb
public MidiTimeCodeComponent MinutesLsb
public MidiTimeCodeComponent MinutesMsb
public MidiTimeCodeComponent HoursLsb
public MidiTimeCodeComponent HoursMsbAndTimeCodeType
}
public Melanchall.DryWetMidi.Core.MidiTimeCodeEvent : SystemCommonEvent {
private Dictionary`2<MidiTimeCodeComponent, byte> ComponentValueMasks
private MidiTimeCodeComponent <Component>k__BackingField
private FourBitNumber <ComponentValue>k__BackingField
public MidiTimeCodeComponent Component
public FourBitNumber ComponentValue
public void .ctor(MidiTimeCodeComponent component, FourBitNumber componentValue)
public MidiTimeCodeComponent get_Component()
public void set_Component(MidiTimeCodeComponent value)
public FourBitNumber get_ComponentValue()
public void set_ComponentValue(FourBitNumber value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.MidiTimeCodeType : Enum {
public byte value__
public MidiTimeCodeType TwentyFour
public MidiTimeCodeType TwentyFive
public MidiTimeCodeType ThirtyDrop
public MidiTimeCodeType Thirty
}
public Melanchall.DryWetMidi.Core.MidiWriter : object {
private BinaryWriter _binaryWriter
private bool _disposed
public void .ctor(Stream stream)
public void Flush()
public void WriteByte(byte value)
public void WriteBytes(Byte[] bytes)
public void WriteSByte(sbyte value)
public void WriteWord(ushort value)
public void WriteDword(UInt32 value)
public void WriteInt16(short value)
public void WriteString(string value)
public void WriteVlqNumber(int value)
public void WriteVlqNumber(long value)
public void Write3ByteDword(UInt32 value)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Core.MissedEndOfTrackEventException : MidiException {
private void .ctor(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.MissedEndOfTrackPolicy : Enum {
public byte value__
public MissedEndOfTrackPolicy Ignore
public MissedEndOfTrackPolicy Abort
}
internal Melanchall.DryWetMidi.Core.MultiSequenceChunksConverter : object {
public IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks)
private Nullable`1<ushort> GetSequenceNumber(TrackChunk trackChunk)
}
internal Melanchall.DryWetMidi.Core.MultiTrackChunksConverter : object {
private int ChannelsCount
public IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks)
}
public Melanchall.DryWetMidi.Core.NoHeaderChunkException : MidiException {
public void .ctor(string message)
private void .ctor(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.NoHeaderChunkPolicy : Enum {
public int value__
public NoHeaderChunkPolicy Abort
public NoHeaderChunkPolicy Ignore
}
public Melanchall.DryWetMidi.Core.NormalSysExEvent : SysExEvent {
public void .ctor(Byte[] data)
public string ToString()
}
public Melanchall.DryWetMidi.Core.NoteAftertouchEvent : ChannelEvent {
private int ParametersCount
private int NoteNumberParameterIndex
private int AftertouchValueParameterIndex
public SevenBitNumber NoteNumber
public SevenBitNumber AftertouchValue
public void .ctor(SevenBitNumber noteNumber, SevenBitNumber aftertouchValue)
public SevenBitNumber get_NoteNumber()
public void set_NoteNumber(SevenBitNumber value)
public SevenBitNumber get_AftertouchValue()
public void set_AftertouchValue(SevenBitNumber value)
public string ToString()
}
public Melanchall.DryWetMidi.Core.NoteEvent : ChannelEvent {
private int ParametersCount
private int NoteNumberParameterIndex
private int VelocityParameterIndex
public SevenBitNumber NoteNumber
public SevenBitNumber Velocity
protected void .ctor(MidiEventType eventType)
protected void .ctor(MidiEventType eventType, SevenBitNumber noteNumber, SevenBitNumber velocity)
public SevenBitNumber get_NoteNumber()
public void set_NoteNumber(SevenBitNumber value)
public SevenBitNumber get_Velocity()
public void set_Velocity(SevenBitNumber value)
}
public Melanchall.DryWetMidi.Core.NoteEventUtilities : object {
public NoteName GetNoteName(NoteEvent noteEvent)
public int GetNoteOctave(NoteEvent noteEvent)
public void SetNoteNumber(NoteEvent noteEvent, NoteName noteName, int octave)
public bool IsNoteOnCorrespondToNoteOff(NoteOnEvent noteOnEvent, NoteOffEvent noteOffEvent)
}
public Melanchall.DryWetMidi.Core.NotEnoughBytesException : MidiException {
private string ExpectedCountSerializationPropertyName
private string ActualCountSerializationPropertyName
private long <ExpectedCount>k__BackingField
private long <ActualCount>k__BackingField
public long ExpectedCount
public long ActualCount
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(string message, long expectedCount, long actualCount)
private void .ctor(SerializationInfo info, StreamingContext context)
public long get_ExpectedCount()
public long get_ActualCount()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.NotEnoughBytesPolicy : Enum {
public int value__
public NotEnoughBytesPolicy Abort
public NotEnoughBytesPolicy Ignore
}
public Melanchall.DryWetMidi.Core.NoteOffEvent : NoteEvent {
public void .ctor(SevenBitNumber noteNumber, SevenBitNumber velocity)
public string ToString()
}
public Melanchall.DryWetMidi.Core.NoteOnEvent : NoteEvent {
public void .ctor(SevenBitNumber noteNumber, SevenBitNumber velocity)
public string ToString()
}
public Melanchall.DryWetMidi.Core.PitchBendEvent : ChannelEvent {
private int ParametersCount
private int PitchValueLsbParameterIndex
private int PitchValueMsbParameterIndex
public ushort PitchValue
public void .ctor(ushort pitchValue)
public ushort get_PitchValue()
public void set_PitchValue(ushort value)
public string ToString()
}
public Melanchall.DryWetMidi.Core.PortPrefixEvent : MetaEvent {
private byte <Port>k__BackingField
public byte Port
public void .ctor(byte port)
public byte get_Port()
public void set_Port(byte value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ProgramChangeEvent : ChannelEvent {
private int ParametersCount
private int ProgramNumberParameterIndex
public SevenBitNumber ProgramNumber
public void .ctor(SevenBitNumber programNumber)
public SevenBitNumber get_ProgramNumber()
public void set_ProgramNumber(SevenBitNumber value)
public string ToString()
}
public Melanchall.DryWetMidi.Core.ProgramNameEvent : BaseTextEvent {
public void .ctor(string programName)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ReadingSettings : object {
private UnexpectedTrackChunksCountPolicy <UnexpectedTrackChunksCountPolicy>k__BackingField
private ExtraTrackChunkPolicy <ExtraTrackChunkPolicy>k__BackingField
private UnknownChunkIdPolicy <UnknownChunkIdPolicy>k__BackingField
private MissedEndOfTrackPolicy <MissedEndOfTrackPolicy>k__BackingField
private SilentNoteOnPolicy <SilentNoteOnPolicy>k__BackingField
private InvalidChunkSizePolicy <InvalidChunkSizePolicy>k__BackingField
private UnknownFileFormatPolicy <UnknownFileFormatPolicy>k__BackingField
private InvalidChannelEventParameterValuePolicy <InvalidChannelEventParameterValuePolicy>k__BackingField
private InvalidMetaEventParameterValuePolicy <InvalidMetaEventParameterValuePolicy>k__BackingField
private InvalidSystemCommonEventParameterValuePolicy <InvalidSystemCommonEventParameterValuePolicy>k__BackingField
private NotEnoughBytesPolicy <NotEnoughBytesPolicy>k__BackingField
private NoHeaderChunkPolicy <NoHeaderChunkPolicy>k__BackingField
private ChunkTypesCollection <CustomChunkTypes>k__BackingField
private EventTypesCollection <CustomMetaEventTypes>k__BackingField
private Encoding <TextEncoding>k__BackingField
private DecodeTextCallback <DecodeTextCallback>k__BackingField
public UnexpectedTrackChunksCountPolicy UnexpectedTrackChunksCountPolicy
public ExtraTrackChunkPolicy ExtraTrackChunkPolicy
public UnknownChunkIdPolicy UnknownChunkIdPolicy
public MissedEndOfTrackPolicy MissedEndOfTrackPolicy
public SilentNoteOnPolicy SilentNoteOnPolicy
public InvalidChunkSizePolicy InvalidChunkSizePolicy
public UnknownFileFormatPolicy UnknownFileFormatPolicy
public InvalidChannelEventParameterValuePolicy InvalidChannelEventParameterValuePolicy
public InvalidMetaEventParameterValuePolicy InvalidMetaEventParameterValuePolicy
public InvalidSystemCommonEventParameterValuePolicy InvalidSystemCommonEventParameterValuePolicy
public NotEnoughBytesPolicy NotEnoughBytesPolicy
public NoHeaderChunkPolicy NoHeaderChunkPolicy
public ChunkTypesCollection CustomChunkTypes
public EventTypesCollection CustomMetaEventTypes
public Encoding TextEncoding
public DecodeTextCallback DecodeTextCallback
public UnexpectedTrackChunksCountPolicy get_UnexpectedTrackChunksCountPolicy()
public void set_UnexpectedTrackChunksCountPolicy(UnexpectedTrackChunksCountPolicy value)
public ExtraTrackChunkPolicy get_ExtraTrackChunkPolicy()
public void set_ExtraTrackChunkPolicy(ExtraTrackChunkPolicy value)
public UnknownChunkIdPolicy get_UnknownChunkIdPolicy()
public void set_UnknownChunkIdPolicy(UnknownChunkIdPolicy value)
public MissedEndOfTrackPolicy get_MissedEndOfTrackPolicy()
public void set_MissedEndOfTrackPolicy(MissedEndOfTrackPolicy value)
public SilentNoteOnPolicy get_SilentNoteOnPolicy()
public void set_SilentNoteOnPolicy(SilentNoteOnPolicy value)
public InvalidChunkSizePolicy get_InvalidChunkSizePolicy()
public void set_InvalidChunkSizePolicy(InvalidChunkSizePolicy value)
public UnknownFileFormatPolicy get_UnknownFileFormatPolicy()
public void set_UnknownFileFormatPolicy(UnknownFileFormatPolicy value)
public InvalidChannelEventParameterValuePolicy get_InvalidChannelEventParameterValuePolicy()
public void set_InvalidChannelEventParameterValuePolicy(InvalidChannelEventParameterValuePolicy value)
public InvalidMetaEventParameterValuePolicy get_InvalidMetaEventParameterValuePolicy()
public void set_InvalidMetaEventParameterValuePolicy(InvalidMetaEventParameterValuePolicy value)
public InvalidSystemCommonEventParameterValuePolicy get_InvalidSystemCommonEventParameterValuePolicy()
public void set_InvalidSystemCommonEventParameterValuePolicy(InvalidSystemCommonEventParameterValuePolicy value)
public NotEnoughBytesPolicy get_NotEnoughBytesPolicy()
public void set_NotEnoughBytesPolicy(NotEnoughBytesPolicy value)
public NoHeaderChunkPolicy get_NoHeaderChunkPolicy()
public void set_NoHeaderChunkPolicy(NoHeaderChunkPolicy value)
public ChunkTypesCollection get_CustomChunkTypes()
public void set_CustomChunkTypes(ChunkTypesCollection value)
public EventTypesCollection get_CustomMetaEventTypes()
public void set_CustomMetaEventTypes(EventTypesCollection value)
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public DecodeTextCallback get_DecodeTextCallback()
public void set_DecodeTextCallback(DecodeTextCallback value)
}
public Melanchall.DryWetMidi.Core.ResetEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SequenceNumberEvent : MetaEvent {
private ushort <Number>k__BackingField
public ushort Number
public void .ctor(ushort number)
public ushort get_Number()
public void set_Number(ushort value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SequencerSpecificEvent : MetaEvent {
private Byte[] <Data>k__BackingField
public Byte[] Data
public void .ctor(Byte[] data)
public Byte[] get_Data()
public void set_Data(Byte[] value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SequenceTrackNameEvent : BaseTextEvent {
public void .ctor(string name)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SetTempoEvent : MetaEvent {
public long DefaultTempo
private long _microsecondsPerBeat
public long MicrosecondsPerQuarterNote
public void .ctor(long microsecondsPerQuarterNote)
public long get_MicrosecondsPerQuarterNote()
public void set_MicrosecondsPerQuarterNote(long value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SilentNoteOnPolicy : Enum {
public byte value__
public SilentNoteOnPolicy NoteOff
public SilentNoteOnPolicy NoteOn
}
internal Melanchall.DryWetMidi.Core.SingleTrackChunksConverter : object {
public IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks)
}
public Melanchall.DryWetMidi.Core.SmfConstants : object {
public Encoding DefaultTextEncoding
public Encoding get_DefaultTextEncoding()
}
internal Melanchall.DryWetMidi.Core.SmpteData : object {
private byte MaxHours
private byte MaxMinutes
private byte MaxSeconds
private byte MaxSubFrames
private int FormatMask
private int FormatOffset
private int HoursMask
private Dictionary`2<SmpteFormat, byte> MaxFrames
private Dictionary`2<int, SmpteFormat> Formats
private SmpteFormat _format
private byte _hours
private byte _minutes
private byte _seconds
private byte _frames
private byte _subFrames
public SmpteFormat Format
public byte Hours
public byte Minutes
public byte Seconds
public byte Frames
public byte SubFrames
public void .ctor(SmpteFormat format, byte hours, byte minutes, byte seconds, byte frames, byte subFrames)
public SmpteFormat get_Format()
public void set_Format(SmpteFormat value)
public byte get_Hours()
public void set_Hours(byte value)
public byte get_Minutes()
public void set_Minutes(byte value)
public byte get_Seconds()
public void set_Seconds(byte value)
public byte get_Frames()
public void set_Frames(byte value)
public byte get_SubFrames()
public void set_SubFrames(byte value)
public SmpteData Read(Func`1<byte> byteReader, Func`4<byte, string, byte, byte> valueProcessor)
public void Write(Action`1<byte> byteWriter)
internal SmpteFormat GetFormat(byte formatAndHours)
internal byte GetHours(byte formatAndHours)
internal byte GetFormatAndHours()
internal byte GetFormatAndHours(SmpteFormat smpteFormat, byte hours)
}
public Melanchall.DryWetMidi.Core.SmpteOffsetEvent : MetaEvent {
private SmpteData _smpteData
public SmpteFormat Format
public byte Hours
public byte Minutes
public byte Seconds
public byte Frames
public byte SubFrames
public void .ctor(SmpteFormat format, byte hours, byte minutes, byte seconds, byte frames, byte subFrames)
public SmpteFormat get_Format()
public void set_Format(SmpteFormat value)
public byte get_Hours()
public void set_Hours(byte value)
public byte get_Minutes()
public void set_Minutes(byte value)
public byte get_Seconds()
public void set_Seconds(byte value)
public byte get_Frames()
public void set_Frames(byte value)
public byte get_SubFrames()
public void set_SubFrames(byte value)
private byte ProcessValue(byte value, string property, byte max, InvalidMetaEventParameterValuePolicy policy)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SmpteTimeDivision : TimeDivision {
private SmpteFormat <Format>k__BackingField
private byte <Resolution>k__BackingField
public SmpteFormat Format
public byte Resolution
public void .ctor(SmpteFormat format, byte resolution)
public SmpteFormat get_Format()
public byte get_Resolution()
public bool op_Equality(SmpteTimeDivision timeDivision1, SmpteTimeDivision timeDivision2)
public bool op_Inequality(SmpteTimeDivision timeDivision1, SmpteTimeDivision timeDivision2)
internal short ToInt16()
public TimeDivision Clone()
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Core.SongPositionPointerEvent : SystemCommonEvent {
private SevenBitNumber _lsb
private SevenBitNumber _msb
public ushort PointerValue
public void .ctor(ushort pointerValue)
public ushort get_PointerValue()
public void set_PointerValue(ushort value)
private SevenBitNumber ProcessValue(byte value, string property, InvalidSystemCommonEventParameterValuePolicy policy)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SongSelectEvent : SystemCommonEvent {
private SevenBitNumber <Number>k__BackingField
public SevenBitNumber Number
public void .ctor(SevenBitNumber number)
public SevenBitNumber get_Number()
public void set_Number(SevenBitNumber value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
internal Melanchall.DryWetMidi.Core.StandardEventTypes : object {
internal EventTypesCollection Channel
internal EventTypesCollection Meta
internal EventTypesCollection SysEx
internal EventTypesCollection SystemRealTime
internal EventTypesCollection SystemCommon
}
public Melanchall.DryWetMidi.Core.StartEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.StopEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SysExEvent : MidiEvent {
public byte EndOfEventByte
private Byte[] <Data>k__BackingField
public bool Completed
public Byte[] Data
protected void .ctor(MidiEventType eventType)
public bool get_Completed()
public Byte[] get_Data()
public void set_Data(Byte[] value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
}
internal Melanchall.DryWetMidi.Core.SysExEventReader : object {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
}
internal Melanchall.DryWetMidi.Core.SysExEventWriter : object {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.SystemCommonEvent : MidiEvent {
protected void .ctor(MidiEventType eventType)
}
internal Melanchall.DryWetMidi.Core.SystemCommonEventReader : object {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
}
internal Melanchall.DryWetMidi.Core.SystemCommonEventWriter : object {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.SystemRealTimeEvent : MidiEvent {
protected void .ctor(MidiEventType eventType)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
}
internal Melanchall.DryWetMidi.Core.SystemRealTimeEventReader : object {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
}
internal Melanchall.DryWetMidi.Core.SystemRealTimeEventWriter : object {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.TextEvent : BaseTextEvent {
public void .ctor(string text)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.TicksPerQuarterNoteTimeDivision : TimeDivision {
public short DefaultTicksPerQuarterNote
private short <TicksPerQuarterNote>k__BackingField
public short TicksPerQuarterNote
public void .ctor(short ticksPerQuarterNote)
public short get_TicksPerQuarterNote()
public bool op_Equality(TicksPerQuarterNoteTimeDivision timeDivision1, TicksPerQuarterNoteTimeDivision timeDivision2)
public bool op_Inequality(TicksPerQuarterNoteTimeDivision timeDivision1, TicksPerQuarterNoteTimeDivision timeDivision2)
internal short ToInt16()
public TimeDivision Clone()
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Core.TimeDivision : object {
internal short ToInt16()
public TimeDivision Clone()
}
internal Melanchall.DryWetMidi.Core.TimeDivisionFactory : object {
internal TimeDivision GetTimeDivision(short division)
}
public Melanchall.DryWetMidi.Core.TimeSignatureEvent : MetaEvent {
public byte DefaultNumerator
public byte DefaultDenominator
public byte DefaultClocksPerClick
public byte DefaultThirtySecondNotesPerBeat
private byte _denominator
private byte <Numerator>k__BackingField
private byte <ClocksPerClick>k__BackingField
private byte <ThirtySecondNotesPerBeat>k__BackingField
public byte Numerator
public byte Denominator
public byte ClocksPerClick
public byte ThirtySecondNotesPerBeat
public void .ctor(byte numerator, byte denominator)
public void .ctor(byte numerator, byte denominator, byte clocksPerClick, byte thirtySecondNotesPerBeat)
public byte get_Numerator()
public void set_Numerator(byte value)
public byte get_Denominator()
public void set_Denominator(byte value)
public byte get_ClocksPerClick()
public void set_ClocksPerClick(byte value)
public byte get_ThirtySecondNotesPerBeat()
public void set_ThirtySecondNotesPerBeat(byte value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.TimingClockEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.TooManyTrackChunksException : MidiException {
private string TrackChunksCountSerializationPropertyName
private int <TrackChunksCount>k__BackingField
public int TrackChunksCount
public void .ctor(string message, int trackChunksCount)
private void .ctor(SerializationInfo info, StreamingContext context)
public int get_TrackChunksCount()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.TrackChunk : MidiChunk {
public string Id
private EventsCollection <Events>k__BackingField
public EventsCollection Events
public void .ctor(IEnumerable`1<MidiEvent> events)
public void .ctor(MidiEvent[] events)
public EventsCollection get_Events()
public MidiChunk Clone()
protected void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected UInt32 GetContentSize(WritingSettings settings)
private MidiEvent ReadEvent(MidiReader reader, ReadingSettings settings, Nullable`1& channelEventStatusByte)
private void ProcessEvents(WritingSettings settings, Action`3<IEventWriter, MidiEvent, bool> eventHandler)
private IEnumerable`1<MidiEvent> GetEventsToWrite()
private bool TrySkipDefaultSetTempo(MidiEvent midiEvent, Boolean& skip)
private bool TrySkipDefaultKeySignature(MidiEvent midiEvent, Boolean& skip)
private bool TrySkipDefaultTimeSignature(MidiEvent midiEvent, Boolean& skip)
}
public Melanchall.DryWetMidi.Core.TrackChunkUtilities : object {
public IEnumerable`1<TrackChunk> GetTrackChunks(MidiFile midiFile)
public TrackChunk Merge(IEnumerable`1<TrackChunk> trackChunks)
public IEnumerable`1<TrackChunk> Explode(TrackChunk trackChunk)
public IEnumerable`1<FourBitNumber> GetChannels(TrackChunk trackChunk)
public IEnumerable`1<FourBitNumber> GetChannels(IEnumerable`1<TrackChunk> trackChunks)
private IEnumerable`1<TrackChunk> ConvertTrackChunks(IEnumerable`1<TrackChunk> trackChunks, MidiFileFormat format)
}
public Melanchall.DryWetMidi.Core.TuneRequestEvent : SystemCommonEvent {
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.UnexpectedRunningStatusException : MidiException {
private void .ctor(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountException : MidiException {
private string ExpectedCountSerializationPropertyName
private string ActualCountSerializationPropertyName
private int <ExpectedCount>k__BackingField
private int <ActualCount>k__BackingField
public int ExpectedCount
public int ActualCount
public void .ctor(string message, int expectedCount, int actualCount)
private void .ctor(SerializationInfo info, StreamingContext context)
public int get_ExpectedCount()
public int get_ActualCount()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountPolicy : Enum {
public int value__
public UnexpectedTrackChunksCountPolicy Ignore
public UnexpectedTrackChunksCountPolicy Abort
}
public Melanchall.DryWetMidi.Core.UnknownChannelEventException : MidiException {
private string ChannelSerializationPropertyName
private string StatusByteSerializationPropertyName
private FourBitNumber <Channel>k__BackingField
private FourBitNumber <StatusByte>k__BackingField
public FourBitNumber Channel
public FourBitNumber StatusByte
public void .ctor(FourBitNumber statusByte, FourBitNumber channel)
private void .ctor(SerializationInfo info, StreamingContext context)
public FourBitNumber get_Channel()
public FourBitNumber get_StatusByte()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.UnknownChunk : MidiChunk {
private Byte[] <Data>k__BackingField
public Byte[] Data
internal void .ctor(string id)
public Byte[] get_Data()
private void set_Data(Byte[] value)
public MidiChunk Clone()
protected void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected UInt32 GetContentSize(WritingSettings settings)
public string ToString()
}
public Melanchall.DryWetMidi.Core.UnknownChunkException : MidiException {
private string ChunkIdSerializationPropertyName
private string <ChunkId>k__BackingField
public string ChunkId
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(string message, string chunkId)
private void .ctor(SerializationInfo info, StreamingContext context)
public string get_ChunkId()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.UnknownChunkIdPolicy : Enum {
public byte value__
public UnknownChunkIdPolicy ReadAsUnknownChunk
public UnknownChunkIdPolicy Skip
public UnknownChunkIdPolicy Abort
}
public Melanchall.DryWetMidi.Core.UnknownFileFormatException : MidiException {
private string FileFormatSerializationPropertyName
private ushort <FileFormat>k__BackingField
public ushort FileFormat
public void .ctor(string message)
public void .ctor(string message, ushort fileFormat)
private void .ctor(SerializationInfo info, StreamingContext context)
public ushort get_FileFormat()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public Melanchall.DryWetMidi.Core.UnknownFileFormatPolicy : Enum {
public int value__
public UnknownFileFormatPolicy Ignore
public UnknownFileFormatPolicy Abort
}
public Melanchall.DryWetMidi.Core.UnknownMetaEvent : MetaEvent {
private byte <StatusByte>k__BackingField
private Byte[] <Data>k__BackingField
public byte StatusByte
public Byte[] Data
internal void .ctor(byte statusByte)
internal void .ctor(byte statusByte, Byte[] data)
public byte get_StatusByte()
public Byte[] get_Data()
private void set_Data(Byte[] value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.WritingSettings : object {
private CompressionPolicy <CompressionPolicy>k__BackingField
private EventTypesCollection <CustomMetaEventTypes>k__BackingField
private Encoding <TextEncoding>k__BackingField
public CompressionPolicy CompressionPolicy
public EventTypesCollection CustomMetaEventTypes
public Encoding TextEncoding
public CompressionPolicy get_CompressionPolicy()
public void set_CompressionPolicy(CompressionPolicy value)
public EventTypesCollection get_CustomMetaEventTypes()
public void set_CustomMetaEventTypes(EventTypesCollection value)
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
}
public Melanchall.DryWetMidi.Devices.CreateTickGeneratorCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ITickGenerator Invoke(TimeSpan interval)
public IAsyncResult BeginInvoke(TimeSpan interval, AsyncCallback callback, object object)
public ITickGenerator EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Devices.DevicesConnector : object {
private bool _disposed
private InputDevice <InputDevice>k__BackingField
private IReadOnlyCollection`1<OutputDevice> <OutputDevices>k__BackingField
public InputDevice InputDevice
public IReadOnlyCollection`1<OutputDevice> OutputDevices
public void .ctor(InputDevice inputDevice, OutputDevice[] outputDevices)
protected void Finalize()
public InputDevice get_InputDevice()
public IReadOnlyCollection`1<OutputDevice> get_OutputDevices()
public void Connect()
public void Disconnect()
private void OnEventReceived(object sender, MidiEventReceivedEventArgs e)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Devices.DevicesConnectorUtilities : object {
public DevicesConnector Connect(InputDevice inputDevice, OutputDevice[] outputDevices)
}
public Melanchall.DryWetMidi.Devices.ErrorOccurredEventArgs : EventArgs {
private Exception <Exception>k__BackingField
public Exception Exception
internal void .ctor(Exception exception)
public Exception get_Exception()
}
public Melanchall.DryWetMidi.Devices.EventCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public MidiEvent Invoke(MidiEvent rawEvent, long rawTime, TimeSpan playbackTime)
public IAsyncResult BeginInvoke(MidiEvent rawEvent, long rawTime, TimeSpan playbackTime, AsyncCallback callback, object object)
public MidiEvent EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Devices.HighPrecisionTickGenerator : object {
public TimeSpan MinInterval
public TimeSpan MaxInterval
private UInt32 NoTimerId
private EventHandler TickGenerated
private bool _disposed
private UInt32 _interval
private UInt32 _resolution
private TimeProc _tickCallback
private UInt32 _timerId
public void add_TickGenerated(EventHandler value)
public void remove_TickGenerated(EventHandler value)
public void .ctor(TimeSpan interval)
protected void Finalize()
public void TryStart()
private void OnTick(UInt32 uID, UInt32 uMsg, UInt32 dwUser, UInt32 dw1, UInt32 dw2)
private void ProcessMmResult(UInt32 mmResult)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Devices.IClockDrivenObject {
public void TickClock()
}
public Melanchall.DryWetMidi.Devices.InputDevice : MidiDevice {
private int SysExBufferLength
private int ChannelParametersBufferSize
private ReadingSettings ReadingSettings
private int MidiTimeCodeComponentsCount
private EventHandler`1<MidiEventReceivedEventArgs> EventReceived
private EventHandler`1<MidiTimeCodeReceivedEventArgs> MidiTimeCodeReceived
private EventHandler`1<InvalidSysExEventReceivedEventArgs> InvalidSysExEventReceived
private EventHandler`1<InvalidShortEventReceivedEventArgs> InvalidShortEventReceived
private MemoryStream _channelMessageMemoryStream
private MidiReader _channelEventReader
private IntPtr _sysExHeaderPointer
private MidiMessageCallback _callback
private Dictionary`2<MidiTimeCodeComponent, FourBitNumber> _midiTimeCodeComponents
private bool <RaiseMidiTimeCodeReceived>k__BackingField
private bool <IsListeningForEvents>k__BackingField
public bool RaiseMidiTimeCodeReceived
public bool IsListeningForEvents
public void add_EventReceived(EventHandler`1<MidiEventReceivedEventArgs> value)
public void remove_EventReceived(EventHandler`1<MidiEventReceivedEventArgs> value)
public void add_MidiTimeCodeReceived(EventHandler`1<MidiTimeCodeReceivedEventArgs> value)
public void remove_MidiTimeCodeReceived(EventHandler`1<MidiTimeCodeReceivedEventArgs> value)
public void add_InvalidSysExEventReceived(EventHandler`1<InvalidSysExEventReceivedEventArgs> value)
public void remove_InvalidSysExEventReceived(EventHandler`1<InvalidSysExEventReceivedEventArgs> value)
public void add_InvalidShortEventReceived(EventHandler`1<InvalidShortEventReceivedEventArgs> value)
public void remove_InvalidShortEventReceived(EventHandler`1<InvalidShortEventReceivedEventArgs> value)
private void .ctor(int id)
protected void Finalize()
public bool get_RaiseMidiTimeCodeReceived()
public void set_RaiseMidiTimeCodeReceived(bool value)
public bool get_IsListeningForEvents()
private void set_IsListeningForEvents(bool value)
public void StartEventsListening()
public void StopEventsListening()
public void Reset()
public int GetDevicesCount()
public IEnumerable`1<InputDevice> GetAll()
public InputDevice GetByName(string name)
public InputDevice GetById(int id)
protected UInt32 GetErrorText(UInt32 mmrError, StringBuilder pszText, UInt32 cchText)
private void OnEventReceived(MidiEvent midiEvent)
private void OnMidiTimeCodeReceived(MidiTimeCodeType timeCodeType, int hours, int minutes, int seconds, int frames)
private void OnInvalidSysExEventReceived(Byte[] data)
private void OnInvalidShortEventReceived(byte statusByte, byte firstDataByte, byte secondDataByte)
private void PrepareSysExBuffer()
private void UnprepareSysExBuffer(IntPtr headerPointer)
private void EnsureHandleIsCreated()
private void DestroyHandle()
private void SetDeviceInformation()
private void OnMessage(IntPtr hMidi, MidiMessage wMsg, IntPtr dwInstance, IntPtr dwParam1, IntPtr dwParam2)
private void OnShortMessage(int message)
private void OnSysExMessage(IntPtr sysExHeaderPointer)
private void TryRaiseMidiTimeCodeReceived(MidiTimeCodeEvent midiTimeCodeEvent)
protected void Dispose(bool disposing)
internal IntPtr GetHandle()
}
public Melanchall.DryWetMidi.Devices.InvalidShortEventReceivedEventArgs : EventArgs {
private byte <StatusByte>k__BackingField
private byte <FirstDataByte>k__BackingField
private byte <SecondDataByte>k__BackingField
public byte StatusByte
public byte FirstDataByte
public byte SecondDataByte
internal void .ctor(byte statusByte, byte firstDataByte, byte secondDataByte)
public byte get_StatusByte()
public byte get_FirstDataByte()
public byte get_SecondDataByte()
}
public Melanchall.DryWetMidi.Devices.InvalidSysExEventReceivedEventArgs : EventArgs {
private Byte[] <Data>k__BackingField
public Byte[] Data
internal void .ctor(Byte[] data)
public Byte[] get_Data()
}
public Melanchall.DryWetMidi.Devices.ITickGenerator {
public void add_TickGenerated(EventHandler value)
public void remove_TickGenerated(EventHandler value)
public void TryStart()
}
public Melanchall.DryWetMidi.Devices.Manufacturer : Enum {
public ushort value__
public Manufacturer Unknown
public Manufacturer Antex
public Manufacturer Apps
public Manufacturer Apt
public Manufacturer Artisoft
public Manufacturer Ast
public Manufacturer Ati
public Manufacturer Audiofile
public Manufacturer Audiopt
public Manufacturer Auravision
public Manufacturer Aztech
public Manufacturer Canopus
public Manufacturer Cat
public Manufacturer Compusic
public Manufacturer ComputerFriends
public Manufacturer Controlres
public Manufacturer Creative
public Manufacturer Dialogic
public Manufacturer Dolby
public Manufacturer DspGroup
public Manufacturer DspSolutions
public Manufacturer Echo
public Manufacturer Epson
public Manufacturer Ess
public Manufacturer Everex
public Manufacturer Exan
public Manufacturer Fujitsu
public Manufacturer Gravis
public Manufacturer Ibm
public Manufacturer IclPs
public Manufacturer Ics
public Manufacturer Intel
public Manufacturer Interactive
public Manufacturer Iomagic
public Manufacturer Iteratedsys
public Manufacturer Korg
public Manufacturer Logitech
public Manufacturer Lyrrus
public Manufacturer Matsushita
public Manufacturer Mediavision
public Manufacturer Melabs
public Manufacturer Metheus
public Manufacturer Microsoft
public Manufacturer Moscom
public Manufacturer Motorola
public Manufacturer Ncr
public Manufacturer Nec
public Manufacturer Newmedia
public Manufacturer Nms
public Manufacturer Oki
public Manufacturer Olivetti
public Manufacturer Opti
public Manufacturer Roland
public Manufacturer Scalacs
public Manufacturer Sierra
public Manufacturer Siliconsoft
public Manufacturer Sonicfoundry
public Manufacturer Speechcomp
public Manufacturer Supermac
public Manufacturer Tandy
public Manufacturer Truevision
public Manufacturer TurtleBeach
public Manufacturer Val
public Manufacturer Videologic
public Manufacturer Vitec
public Manufacturer Vocaltec
public Manufacturer Voyetra
public Manufacturer Wanglabs
public Manufacturer Willowpond
public Manufacturer Winnov
public Manufacturer Yamaha
public Manufacturer Xebec
}
public Melanchall.DryWetMidi.Devices.MidiClock : object {
private double DefaultSpeed
private EventHandler`1<TickedEventArgs> Ticked
private bool _disposed
private bool _startImmediately
private Stopwatch _stopwatch
private TimeSpan _startTime
private double _speed
private bool _started
private ITickGenerator _tickGenerator
private TimeSpan <CurrentTime>k__BackingField
public bool IsRunning
public TimeSpan CurrentTime
public double Speed
public void add_Ticked(EventHandler`1<TickedEventArgs> value)
public void remove_Ticked(EventHandler`1<TickedEventArgs> value)
public void .ctor(bool startImmediately, ITickGenerator tickGenerator)
protected void Finalize()
public bool get_IsRunning()
public TimeSpan get_CurrentTime()
private void set_CurrentTime(TimeSpan value)
public double get_Speed()
public void set_Speed(double value)
public void Start()
public void Stop()
public void Restart()
public void ResetCurrentTime()
public void SetCurrentTime(TimeSpan time)
public void Tick()
private void OnTickGenerated(object sender, EventArgs e)
private void OnTicked()
private void EnsureIsNotDisposed()
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Devices.MidiClockSettings : object {
private CreateTickGeneratorCallback _createTickGeneratorCallback
public CreateTickGeneratorCallback CreateTickGeneratorCallback
public CreateTickGeneratorCallback get_CreateTickGeneratorCallback()
public void set_CreateTickGeneratorCallback(CreateTickGeneratorCallback value)
}
public Melanchall.DryWetMidi.Devices.MidiDevice : object {
private EventHandler`1<ErrorOccurredEventArgs> ErrorOccurred
protected IntPtr _handle
protected bool _disposed
private int <Id>k__BackingField
private string <Name>k__BackingField
private Manufacturer <DriverManufacturer>k__BackingField
private ushort <ProductIdentifier>k__BackingField
private Version <DriverVersion>k__BackingField
public int Id
public string Name
public Manufacturer DriverManufacturer
public ushort ProductIdentifier
public Version DriverVersion
public void add_ErrorOccurred(EventHandler`1<ErrorOccurredEventArgs> value)
public void remove_ErrorOccurred(EventHandler`1<ErrorOccurredEventArgs> value)
internal void .ctor(int id)
protected void Finalize()
public int get_Id()
public string get_Name()
private void set_Name(string value)
public Manufacturer get_DriverManufacturer()
private void set_DriverManufacturer(Manufacturer value)
public ushort get_ProductIdentifier()
private void set_ProductIdentifier(ushort value)
public Version get_DriverVersion()
private void set_DriverVersion(Version value)
protected void SetBasicDeviceInformation(ushort manufacturerIdentifier, ushort productIdentifier, UInt32 driverVersion, string name)
protected void EnsureDeviceIsNotDisposed()
protected void ProcessMmResult(UInt32 mmResult)
protected void OnError(Exception exception)
protected UInt32 GetErrorText(UInt32 mmrError, StringBuilder pszText, UInt32 cchText)
protected void WriteBytesToStream(MemoryStream memoryStream, Byte[] bytes)
internal IntPtr GetHandle()
public string ToString()
public void Dispose()
protected void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Devices.MidiDeviceException : Exception {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
}
public Melanchall.DryWetMidi.Devices.MidiEventPlayedEventArgs : EventArgs {
private MidiEvent <Event>k__BackingField
public MidiEvent Event
internal void .ctor(MidiEvent midiEvent)
public MidiEvent get_Event()
}
public Melanchall.DryWetMidi.Devices.MidiEventReceivedEventArgs : EventArgs {
private MidiEvent <Event>k__BackingField
public MidiEvent Event
internal void .ctor(MidiEvent midiEvent)
public MidiEvent get_Event()
}
public Melanchall.DryWetMidi.Devices.MidiEventSentEventArgs : EventArgs {
private MidiEvent <Event>k__BackingField
public MidiEvent Event
internal void .ctor(MidiEvent midiEvent)
public MidiEvent get_Event()
}
internal Melanchall.DryWetMidi.Devices.MidiInWinApi : object {
public UInt32 midiInGetDevCaps(IntPtr uDeviceID, MIDIINCAPS& caps, UInt32 cbMidiInCaps)
public UInt32 midiInGetErrorText(UInt32 wError, StringBuilder lpText, UInt32 cchText)
public UInt32 midiInGetNumDevs()
public UInt32 midiInOpen(IntPtr& lphMidiIn, int uDeviceID, MidiMessageCallback dwCallback, IntPtr dwInstance, UInt32 dwFlags)
public UInt32 midiInClose(IntPtr hMidiIn)
public UInt32 midiInStart(IntPtr hMidiIn)
public UInt32 midiInStop(IntPtr hMidiIn)
public UInt32 midiInReset(IntPtr hMidiIn)
public UInt32 midiInPrepareHeader(IntPtr hMidiIn, IntPtr lpMidiInHdr, int cbMidiInHdr)
public UInt32 midiInUnprepareHeader(IntPtr hMidiIn, IntPtr lpMidiInHdr, int cbMidiInHdr)
public UInt32 midiInAddBuffer(IntPtr hMidiIn, IntPtr lpMidiInHdr, int cbMidiInHdr)
}
internal Melanchall.DryWetMidi.Devices.MidiMessage : Enum {
public int value__
public MidiMessage MIM_CLOSE
public MidiMessage MIM_DATA
public MidiMessage MIM_ERROR
public MidiMessage MIM_LONGDATA
public MidiMessage MIM_LONGERROR
public MidiMessage MIM_MOREDATA
public MidiMessage MIM_OPEN
public MidiMessage MOM_CLOSE
public MidiMessage MOM_DONE
public MidiMessage MOM_OPEN
public MidiMessage MOM_POSITIONCB
}
internal Melanchall.DryWetMidi.Devices.MidiOutWinApi : object {
public UInt32 midiOutGetDevCaps(IntPtr uDeviceID, MIDIOUTCAPS& lpMidiOutCaps, UInt32 cbMidiOutCaps)
public UInt32 midiOutGetErrorText(UInt32 mmrError, StringBuilder pszText, UInt32 cchText)
public UInt32 midiOutGetNumDevs()
public UInt32 midiOutOpen(IntPtr& lphmo, int uDeviceID, MidiMessageCallback dwCallback, IntPtr dwInstance, UInt32 dwFlags)
public UInt32 midiOutClose(IntPtr hmo)
public UInt32 midiOutShortMsg(IntPtr hMidiOut, UInt32 dwMsg)
public UInt32 midiOutGetVolume(IntPtr hmo, UInt32& lpdwVolume)
public UInt32 midiOutSetVolume(IntPtr hmo, UInt32 dwVolume)
public UInt32 midiOutPrepareHeader(IntPtr hmo, IntPtr lpMidiOutHdr, int cbMidiOutHdr)
public UInt32 midiOutUnprepareHeader(IntPtr hmo, IntPtr lpMidiOutHdr, int cbMidiOutHdr)
public UInt32 midiOutLongMsg(IntPtr hmo, IntPtr lpMidiOutHdr, int cbMidiOutHdr)
}
public Melanchall.DryWetMidi.Devices.MidiTimeCodeReceivedEventArgs : EventArgs {
private MidiTimeCodeType <Format>k__BackingField
private int <Hours>k__BackingField
private int <Minutes>k__BackingField
private int <Seconds>k__BackingField
private int <Frames>k__BackingField
public MidiTimeCodeType Format
public int Hours
public int Minutes
public int Seconds
public int Frames
internal void .ctor(MidiTimeCodeType timeCodeType, int hours, int minutes, int seconds, int frames)
public MidiTimeCodeType get_Format()
public int get_Hours()
public int get_Minutes()
public int get_Seconds()
public int get_Frames()
}
internal Melanchall.DryWetMidi.Devices.MidiTimerWinApi : object {
public UInt32 TIME_ONESHOT
public UInt32 TIME_PERIODIC
public UInt32 timeGetDevCaps(TIMECAPS& timeCaps, UInt32 sizeTimeCaps)
public UInt32 timeBeginPeriod(UInt32 uPeriod)
public UInt32 timeEndPeriod(UInt32 uPeriod)
public UInt32 timeSetEvent(UInt32 uDelay, UInt32 uResolution, TimeProc lpTimeProc, IntPtr dwUser, UInt32 fuEvent)
public UInt32 timeKillEvent(UInt32 uTimerID)
}
internal Melanchall.DryWetMidi.Devices.MidiWinApi : object {
public UInt32 MaxErrorLength
public UInt32 CallbackFunction
public int MidiHeaderSize
public UInt32 MMSYSERR_NOERROR
public UInt32 MMSYSERR_ERROR
public UInt32 MMSYSERR_INVALHANDLE
public UInt32 MIDIERR_NOTREADY
public UInt32 TIMERR_NOCANDO
public Byte[] UnpackSysExBytes(IntPtr headerPointer)
public void UnpackShortEventBytes(int message, Byte& statusByte, Byte& firstDataByte, Byte& secondDataByte)
}
public Melanchall.DryWetMidi.Devices.NoteCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public NotePlaybackData Invoke(NotePlaybackData rawNoteData, long rawTime, long rawLength, TimeSpan playbackTime)
public IAsyncResult BeginInvoke(NotePlaybackData rawNoteData, long rawTime, long rawLength, TimeSpan playbackTime, AsyncCallback callback, object object)
public NotePlaybackData EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Devices.NotePlaybackData : object {
public NotePlaybackData SkipNote
private SevenBitNumber <NoteNumber>k__BackingField
private SevenBitNumber <Velocity>k__BackingField
private SevenBitNumber <OffVelocity>k__BackingField
private FourBitNumber <Channel>k__BackingField
private bool <PlayNote>k__BackingField
public SevenBitNumber NoteNumber
public SevenBitNumber Velocity
public SevenBitNumber OffVelocity
public FourBitNumber Channel
internal bool PlayNote
public void .ctor(SevenBitNumber noteNumber, SevenBitNumber velocity, SevenBitNumber offVelocity, FourBitNumber channel)
private void .ctor(bool playNote)
public SevenBitNumber get_NoteNumber()
public SevenBitNumber get_Velocity()
public SevenBitNumber get_OffVelocity()
public FourBitNumber get_Channel()
internal bool get_PlayNote()
internal NoteOnEvent GetNoteOnEvent()
internal NoteOffEvent GetNoteOffEvent()
}
internal Melanchall.DryWetMidi.Devices.NotePlaybackEventMetadata : object {
private Note <RawNote>k__BackingField
private TimeSpan <StartTime>k__BackingField
private TimeSpan <EndTime>k__BackingField
private NotePlaybackData <RawNotePlaybackData>k__BackingField
private NotePlaybackData <NotePlaybackData>k__BackingField
private bool <IsCustomNotePlaybackDataSet>k__BackingField
public Note RawNote
public TimeSpan StartTime
public TimeSpan EndTime
public NotePlaybackData RawNotePlaybackData
public NotePlaybackData NotePlaybackData
public bool IsCustomNotePlaybackDataSet
public void .ctor(Note note, TimeSpan startTime, TimeSpan endTime)
public Note get_RawNote()
public TimeSpan get_StartTime()
public TimeSpan get_EndTime()
public NotePlaybackData get_RawNotePlaybackData()
public NotePlaybackData get_NotePlaybackData()
private void set_NotePlaybackData(NotePlaybackData value)
public bool get_IsCustomNotePlaybackDataSet()
private void set_IsCustomNotePlaybackDataSet(bool value)
public Note GetEffectiveNote()
public void SetCustomNotePlaybackData(NotePlaybackData notePlaybackData)
}
public Melanchall.DryWetMidi.Devices.NotesEventArgs : EventArgs {
private IEnumerable`1<Note> <Notes>k__BackingField
public IEnumerable`1<Note> Notes
internal void .ctor(Note[] notes)
public IEnumerable`1<Note> get_Notes()
}
public Melanchall.DryWetMidi.Devices.OutputDevice : MidiDevice {
private int ChannelEventBufferSize
private Byte[] ZeroBuffer
private EventHandler`1<MidiEventSentEventArgs> EventSent
private MemoryStream _memoryStream
private MidiWriter _midiWriter
private WritingSettings _writingSettings
private MidiMessageCallback _callback
private HashSet`1<IntPtr> _sysExHeadersPointers
private OutputDeviceType <DeviceType>k__BackingField
private int <VoicesNumber>k__BackingField
private int <NotesNumber>k__BackingField
private IEnumerable`1<FourBitNumber> <Channels>k__BackingField
private bool <SupportsPatchCaching>k__BackingField
private bool <SupportsLeftRightVolumeControl>k__BackingField
private bool <SupportsVolumeControl>k__BackingField
public OutputDeviceType DeviceType
public int VoicesNumber
public int NotesNumber
public IEnumerable`1<FourBitNumber> Channels
public bool SupportsPatchCaching
public bool SupportsLeftRightVolumeControl
public bool SupportsVolumeControl
public Volume Volume
public void add_EventSent(EventHandler`1<MidiEventSentEventArgs> value)
public void remove_EventSent(EventHandler`1<MidiEventSentEventArgs> value)
internal void .ctor(int id)
protected void Finalize()
public OutputDeviceType get_DeviceType()
private void set_DeviceType(OutputDeviceType value)
public int get_VoicesNumber()
private void set_VoicesNumber(int value)
public int get_NotesNumber()
private void set_NotesNumber(int value)
public IEnumerable`1<FourBitNumber> get_Channels()
private void set_Channels(IEnumerable`1<FourBitNumber> value)
public bool get_SupportsPatchCaching()
private void set_SupportsPatchCaching(bool value)
public bool get_SupportsLeftRightVolumeControl()
private void set_SupportsLeftRightVolumeControl(bool value)
public bool get_SupportsVolumeControl()
private void set_SupportsVolumeControl(bool value)
public Volume get_Volume()
public void set_Volume(Volume value)
public void SendEvent(MidiEvent midiEvent)
public void TurnAllNotesOff()
public void PrepareForEventsSending()
public int GetDevicesCount()
public IEnumerable`1<OutputDevice> GetAll()
public OutputDevice GetByName(string name)
public OutputDevice GetById(int id)
protected UInt32 GetErrorText(UInt32 mmrError, StringBuilder pszText, UInt32 cchText)
private void EnsureHandleIsCreated()
private void DestroyHandle()
private void SetDeviceInformation()
private void SendShortEvent(MidiEvent midiEvent)
private void SendSysExEvent(SysExEvent sysExEvent)
private int PackShortEvent(MidiEvent midiEvent)
private void OnMessage(IntPtr hMidi, MidiMessage wMsg, IntPtr dwInstance, IntPtr dwParam1, IntPtr dwParam2)
private void OnSysExEventSent(IntPtr sysExHeaderPointer)
private IntPtr PrepareSysExBuffer(Byte[] data)
private void UnprepareSysExBuffer(IntPtr headerPointer)
private void OnEventSent(MidiEvent midiEvent)
protected void Dispose(bool disposing)
internal IntPtr GetHandle()
}
public Melanchall.DryWetMidi.Devices.OutputDeviceType : Enum {
public ushort value__
public OutputDeviceType MidiPort
public OutputDeviceType Synth
public OutputDeviceType SquareWaveSynth
public OutputDeviceType FmSynth
public OutputDeviceType MidiMapper
public OutputDeviceType WavetableSynth
public OutputDeviceType SoftwareSynth
}
public Melanchall.DryWetMidi.Devices.Playback : object {
private TimeSpan ClockInterval
private EventHandler Started
private EventHandler Stopped
private EventHandler Finished
private EventHandler`1<NotesEventArgs> NotesPlaybackStarted
private EventHandler`1<NotesEventArgs> NotesPlaybackFinished
private EventHandler`1<MidiEventPlayedEventArgs> EventPlayed
private IEnumerator`1<PlaybackEvent> _eventsEnumerator
private TimeSpan _duration
private long _durationInTicks
private MidiClock _clock
private HashSet`1<NotePlaybackEventMetadata> _activeNotesMetadata
private List`1<NotePlaybackEventMetadata> _notesMetadata
private bool _disposed
private TempoMap <TempoMap>k__BackingField
private OutputDevice <OutputDevice>k__BackingField
private bool <Loop>k__BackingField
private bool <InterruptNotesOnStop>k__BackingField
private bool <TrackNotes>k__BackingField
private PlaybackSnapping <Snapping>k__BackingField
private NoteCallback <NoteCallback>k__BackingField
private EventCallback <EventCallback>k__BackingField
public TempoMap TempoMap
public OutputDevice OutputDevice
public bool IsRunning
public bool Loop
public bool InterruptNotesOnStop
public bool TrackNotes
public double Speed
public PlaybackSnapping Snapping
public NoteCallback NoteCallback
public EventCallback EventCallback
public void add_Started(EventHandler value)
public void remove_Started(EventHandler value)
public void add_Stopped(EventHandler value)
public void remove_Stopped(EventHandler value)
public void add_Finished(EventHandler value)
public void remove_Finished(EventHandler value)
public void add_NotesPlaybackStarted(EventHandler`1<NotesEventArgs> value)
public void remove_NotesPlaybackStarted(EventHandler`1<NotesEventArgs> value)
public void add_NotesPlaybackFinished(EventHandler`1<NotesEventArgs> value)
public void remove_NotesPlaybackFinished(EventHandler`1<NotesEventArgs> value)
public void add_EventPlayed(EventHandler`1<MidiEventPlayedEventArgs> value)
public void remove_EventPlayed(EventHandler`1<MidiEventPlayedEventArgs> value)
public void .ctor(IEnumerable`1<MidiEvent> events, TempoMap tempoMap, MidiClockSettings clockSettings)
public void .ctor(IEnumerable`1<MidiEvent> events, TempoMap tempoMap, OutputDevice outputDevice, MidiClockSettings clockSettings)
public void .ctor(IEnumerable`1<IEnumerable`1<MidiEvent>> events, TempoMap tempoMap, MidiClockSettings clockSettings)
public void .ctor(IEnumerable`1<IEnumerable`1<MidiEvent>> events, TempoMap tempoMap, OutputDevice outputDevice, MidiClockSettings clockSettings)
public void .ctor(IEnumerable`1<ITimedObject> timedObjects, TempoMap tempoMap, MidiClockSettings clockSettings)
public void .ctor(IEnumerable`1<ITimedObject> timedObjects, TempoMap tempoMap, OutputDevice outputDevice, MidiClockSettings clockSettings)
protected void Finalize()
public TempoMap get_TempoMap()
public OutputDevice get_OutputDevice()
public void set_OutputDevice(OutputDevice value)
public bool get_IsRunning()
public bool get_Loop()
public void set_Loop(bool value)
public bool get_InterruptNotesOnStop()
public void set_InterruptNotesOnStop(bool value)
public bool get_TrackNotes()
public void set_TrackNotes(bool value)
public double get_Speed()
public void set_Speed(double value)
public PlaybackSnapping get_Snapping()
public NoteCallback get_NoteCallback()
public void set_NoteCallback(NoteCallback value)
public EventCallback get_EventCallback()
public void set_EventCallback(EventCallback value)
public ITimeSpan GetDuration(TimeSpanType durationType)
public TTimeSpan GetDuration()
public ITimeSpan GetCurrentTime(TimeSpanType timeType)
public TTimeSpan GetCurrentTime()
public void Start()
public void Stop()
public void Play()
public void MoveToSnapPoint(SnapPoint snapPoint)
public void MoveToPreviousSnapPoint(SnapPointsGroup snapPointsGroup)
public void MoveToPreviousSnapPoint()
public void MoveToNextSnapPoint(SnapPointsGroup snapPointsGroup)
public void MoveToNextSnapPoint()
public void MoveToStart()
public void MoveToTime(ITimeSpan time)
public void MoveForward(ITimeSpan step)
public void MoveBack(ITimeSpan step)
private void StopStartNotes()
private void OnStarted()
private void OnStopped()
private void OnFinished()
private void OnNotesPlaybackStarted(Note[] notes)
private void OnNotesPlaybackFinished(Note[] notes)
private void OnEventPlayed(MidiEvent midiEvent)
private void OnClockTicked(object sender, TickedEventArgs e)
private void EnsureIsNotDisposed()
private void SetStartTime(ITimeSpan time)
private void SendEvent(MidiEvent midiEvent)
private bool TryPlayNoteEvent(NotePlaybackEventMetadata noteMetadata, bool isNoteOnEvent, TimeSpan time, Note& note)
private bool TryPlayNoteEvent(PlaybackEvent playbackEvent, Note& note)
private bool TryPlayNoteEvent(NotePlaybackEventMetadata noteMetadata, MidiEvent midiEvent, bool isNoteOnEvent, TimeSpan time, Note& note)
private ICollection`1<PlaybackEvent> GetPlaybackEvents(IEnumerable`1<ITimedObject> timedObjects, TempoMap tempoMap)
private IEnumerable`1<PlaybackEvent> GetPlaybackEvents(Chord chord, TempoMap tempoMap)
private IEnumerable`1<PlaybackEvent> GetPlaybackEvents(Note note, TempoMap tempoMap)
private PlaybackEvent GetPlaybackEventWithNoteMetadata(TimedEvent timedEvent, TempoMap tempoMap, NotePlaybackEventMetadata noteMetadata)
private IEnumerable`1<ITimedObject> GetTimedObjects(IEnumerable`1<IEnumerable`1<MidiEvent>> events)
public void TickClock()
public void Dispose()
private void Dispose(bool disposing)
private bool <Play>b__74_0()
}
public Melanchall.DryWetMidi.Devices.PlaybackCurrentTime : object {
private Playback <Playback>k__BackingField
private ITimeSpan <Time>k__BackingField
public Playback Playback
public ITimeSpan Time
internal void .ctor(Playback playback, ITimeSpan time)
public Playback get_Playback()
public ITimeSpan get_Time()
}
public Melanchall.DryWetMidi.Devices.PlaybackCurrentTimeChangedEventArgs : EventArgs {
private IEnumerable`1<PlaybackCurrentTime> <Times>k__BackingField
public IEnumerable`1<PlaybackCurrentTime> Times
internal void .ctor(IEnumerable`1<PlaybackCurrentTime> times)
public IEnumerable`1<PlaybackCurrentTime> get_Times()
}
public Melanchall.DryWetMidi.Devices.PlaybackCurrentTimeWatcher : object {
private TimeSpan DefaultPollingInterval
private EventHandler`1<PlaybackCurrentTimeChangedEventArgs> CurrentTimeChanged
private Lazy`1<PlaybackCurrentTimeWatcher> _lazyInstance
private Dictionary`2<Playback, TimeSpanType> _playbacks
private object _playbacksLock
private MidiClockSettings _clockSettings
private MidiClock _clock
private TimeSpan _pollingInterval
private bool _disposed
public PlaybackCurrentTimeWatcher Instance
public TimeSpan PollingInterval
public IEnumerable`1<Playback> Playbacks
public bool IsWatching
public void add_CurrentTimeChanged(EventHandler`1<PlaybackCurrentTimeChangedEventArgs> value)
public void remove_CurrentTimeChanged(EventHandler`1<PlaybackCurrentTimeChangedEventArgs> value)
private void .ctor(MidiClockSettings clockSettings)
public PlaybackCurrentTimeWatcher get_Instance()
public TimeSpan get_PollingInterval()
public void set_PollingInterval(TimeSpan value)
public IEnumerable`1<Playback> get_Playbacks()
public bool get_IsWatching()
public void Start()
public void Stop()
public void AddPlayback(Playback playback, TimeSpanType timeType)
public void RemovePlayback(Playback playback)
public void RemoveAllPlaybacks()
private void OnTick(object sender, TickedEventArgs e)
private void OnCurrentTimeChanged(IEnumerable`1<PlaybackCurrentTime> times)
private void EnsureIsNotDisposed()
private void DisposeClock()
private void CreateClock(TimeSpan pollingInterval)
private void RecreateClock()
public void TickClock()
public void Dispose()
private void Dispose(bool disposing)
}
internal Melanchall.DryWetMidi.Devices.PlaybackEvent : object {
private MidiEvent <Event>k__BackingField
private TimeSpan <Time>k__BackingField
private long <RawTime>k__BackingField
private PlaybackEventMetadata <Metadata>k__BackingField
public MidiEvent Event
public TimeSpan Time
public long RawTime
public PlaybackEventMetadata Metadata
public void .ctor(MidiEvent midiEvent, TimeSpan time, long rawTime)
public MidiEvent get_Event()
public TimeSpan get_Time()
public long get_RawTime()
public PlaybackEventMetadata get_Metadata()
}
public Melanchall.DryWetMidi.Devices.PlaybackEventCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public MidiEvent Invoke(MidiEvent midiEvent, TimeSpan time, long rawTime)
public IAsyncResult BeginInvoke(MidiEvent midiEvent, TimeSpan time, long rawTime, AsyncCallback callback, object object)
public MidiEvent EndInvoke(IAsyncResult result)
}
internal Melanchall.DryWetMidi.Devices.PlaybackEventMetadata : object {
private NotePlaybackEventMetadata <Note>k__BackingField
public NotePlaybackEventMetadata Note
public NotePlaybackEventMetadata get_Note()
public void set_Note(NotePlaybackEventMetadata value)
}
internal Melanchall.DryWetMidi.Devices.PlaybackEventsComparer : object {
public int Compare(PlaybackEvent x, PlaybackEvent y)
}
public Melanchall.DryWetMidi.Devices.PlaybackSnapping : object {
private List`1<SnapPoint> _snapPoints
private IEnumerable`1<PlaybackEvent> _playbackEvents
private TempoMap _tempoMap
private TimeSpan _maxTime
private SnapPointsGroup _noteStartSnapPointsGroup
private SnapPointsGroup _noteEndSnapPointsGroup
public IEnumerable`1<SnapPoint> SnapPoints
internal void .ctor(IEnumerable`1<PlaybackEvent> playbackEvents, TempoMap tempoMap)
public IEnumerable`1<SnapPoint> get_SnapPoints()
public SnapPoint`1<TData> AddSnapPoint(ITimeSpan time, TData data)
public SnapPoint`1<Guid> AddSnapPoint(ITimeSpan time)
public void RemoveSnapPoint(SnapPoint`1<TData> snapPoint)
public void RemoveSnapPointsByData(Predicate`1<TData> predicate)
public SnapPointsGroup SnapToGrid(IGrid grid)
public SnapPointsGroup SnapToNotesStarts()
public SnapPointsGroup SnapToNotesEnds()
internal SnapPoint GetNextSnapPoint(TimeSpan time, SnapPointsGroup snapPointsGroup)
internal SnapPoint GetNextSnapPoint(TimeSpan time)
internal SnapPoint GetPreviousSnapPoint(TimeSpan time, SnapPointsGroup snapPointsGroup)
internal SnapPoint GetPreviousSnapPoint(TimeSpan time)
private SnapPointsGroup SnapToNoteEvents(bool snapToNoteOn)
private IEnumerable`1<SnapPoint> GetActiveSnapPoints()
private IEnumerable`1<SnapPoint> GetActiveSnapPoints(SnapPointsGroup snapPointsGroup)
}
public Melanchall.DryWetMidi.Devices.PlaybackUtilities : object {
public Playback GetPlayback(TrackChunk trackChunk, TempoMap tempoMap, OutputDevice outputDevice, MidiClockSettings clockSettings)
public Playback GetPlayback(TrackChunk trackChunk, TempoMap tempoMap, MidiClockSettings clockSettings)
public Playback GetPlayback(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, OutputDevice outputDevice, MidiClockSettings clockSettings)
public Playback GetPlayback(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, MidiClockSettings clockSettings)
public Playback GetPlayback(MidiFile midiFile, OutputDevice outputDevice, MidiClockSettings clockSettings)
public Playback GetPlayback(MidiFile midiFile, MidiClockSettings clockSettings)
public Playback GetPlayback(Pattern pattern, TempoMap tempoMap, FourBitNumber channel, OutputDevice outputDevice, MidiClockSettings clockSettings)
public Playback GetPlayback(Pattern pattern, TempoMap tempoMap, FourBitNumber channel, MidiClockSettings clockSettings)
public Playback GetPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, OutputDevice outputDevice, SevenBitNumber programNumber, MidiClockSettings clockSettings)
public Playback GetPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, OutputDevice outputDevice, GeneralMidiProgram generalMidiProgram, MidiClockSettings clockSettings)
public Playback GetPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, OutputDevice outputDevice, GeneralMidi2Program generalMidi2Program, MidiClockSettings clockSettings)
public void Play(TrackChunk trackChunk, TempoMap tempoMap, OutputDevice outputDevice, MidiClockSettings clockSettings)
public void Play(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, OutputDevice outputDevice, MidiClockSettings clockSettings)
public void Play(MidiFile midiFile, OutputDevice outputDevice, MidiClockSettings clockSettings)
public void Play(Pattern pattern, TempoMap tempoMap, FourBitNumber channel, OutputDevice outputDevice, MidiClockSettings clockSettings)
public void Play(IEnumerable`1<TObject> objects, TempoMap tempoMap, OutputDevice outputDevice, SevenBitNumber programNumber, MidiClockSettings clockSettings)
public void Play(IEnumerable`1<TObject> objects, TempoMap tempoMap, OutputDevice outputDevice, GeneralMidiProgram generalMidiProgram, MidiClockSettings clockSettings)
public void Play(IEnumerable`1<TObject> objects, TempoMap tempoMap, OutputDevice outputDevice, GeneralMidi2Program generalMidi2Program, MidiClockSettings clockSettings)
private Playback GetMusicalObjectsPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, OutputDevice outputDevice, Func`2<FourBitNumber, IEnumerable`1<MidiEvent>> programChangeEventsGetter, MidiClockSettings clockSettings)
}
public Melanchall.DryWetMidi.Devices.Recording : object {
private EventHandler Started
private EventHandler Stopped
private List`1<RecordingEvent> _events
private Stopwatch _stopwatch
private bool _disposed
private TempoMap <TempoMap>k__BackingField
private InputDevice <InputDevice>k__BackingField
public TempoMap TempoMap
public InputDevice InputDevice
public bool IsRunning
public void add_Started(EventHandler value)
public void remove_Started(EventHandler value)
public void add_Stopped(EventHandler value)
public void remove_Stopped(EventHandler value)
public void .ctor(TempoMap tempoMap, InputDevice inputDevice)
public TempoMap get_TempoMap()
public InputDevice get_InputDevice()
public bool get_IsRunning()
public ITimeSpan GetDuration(TimeSpanType durationType)
public TTimeSpan GetDuration()
public IReadOnlyList`1<TimedEvent> GetEvents()
public void Start()
public void Stop()
private void OnStarted()
private void OnStopped()
private void OnEventReceived(object sender, MidiEventReceivedEventArgs e)
public void Dispose()
private void Dispose(bool disposing)
private TimedEvent <GetEvents>b__20_0(RecordingEvent e)
}
internal Melanchall.DryWetMidi.Devices.RecordingEvent : object {
private MidiEvent <Event>k__BackingField
private TimeSpan <Time>k__BackingField
public MidiEvent Event
public TimeSpan Time
public void .ctor(MidiEvent midiEvent, TimeSpan time)
public MidiEvent get_Event()
public TimeSpan get_Time()
}
public Melanchall.DryWetMidi.Devices.RecordingUtilities : object {
public TrackChunk ToTrackChunk(Recording recording)
public MidiFile ToFile(Recording recording)
}
public Melanchall.DryWetMidi.Devices.RegularPrecisionTickGenerator : object {
public TimeSpan MinInterval
public TimeSpan MaxInterval
private EventHandler TickGenerated
private bool _disposed
private bool _started
private Timer _timer
public void add_TickGenerated(EventHandler value)
public void remove_TickGenerated(EventHandler value)
public void .ctor(TimeSpan interval)
public void TryStart()
private void OnElapsed(object sender, ElapsedEventArgs e)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Devices.SnapPoint : object {
private bool <IsEnabled>k__BackingField
private TimeSpan <Time>k__BackingField
private SnapPointsGroup <SnapPointsGroup>k__BackingField
public bool IsEnabled
public TimeSpan Time
public SnapPointsGroup SnapPointsGroup
internal void .ctor(TimeSpan time)
public bool get_IsEnabled()
public void set_IsEnabled(bool value)
public TimeSpan get_Time()
public SnapPointsGroup get_SnapPointsGroup()
internal void set_SnapPointsGroup(SnapPointsGroup value)
}
public Melanchall.DryWetMidi.Devices.SnapPoint`1 : SnapPoint {
private TData <Data>k__BackingField
public TData Data
internal void .ctor(TimeSpan time, TData data)
public TData get_Data()
}
public Melanchall.DryWetMidi.Devices.SnapPointsGroup : object {
private bool <IsEnabled>k__BackingField
public bool IsEnabled
public bool get_IsEnabled()
public void set_IsEnabled(bool value)
}
public Melanchall.DryWetMidi.Devices.TickedEventArgs : EventArgs {
private TimeSpan <Time>k__BackingField
public TimeSpan Time
internal void .ctor(TimeSpan time)
public TimeSpan get_Time()
}
public Melanchall.DryWetMidi.Devices.Volume : ValueType {
public Volume Zero
public Volume FullLeft
public Volume FullRight
private ushort <LeftVolume>k__BackingField
private ushort <RightVolume>k__BackingField
public ushort LeftVolume
public ushort RightVolume
public void .ctor(ushort volume)
public void .ctor(ushort leftVolume, ushort rightVolume)
public ushort get_LeftVolume()
public ushort get_RightVolume()
public Volume Right(ushort volume)
public Volume Left(ushort volume)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.ArbitraryGrid : object {
private IEnumerable`1<ITimeSpan> <Times>k__BackingField
public IEnumerable`1<ITimeSpan> Times
public void .ctor(IEnumerable`1<ITimeSpan> times)
public void .ctor(ITimeSpan[] times)
public IEnumerable`1<ITimeSpan> get_Times()
public IEnumerable`1<long> GetTimes(TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpan : object {
private long <Bars>k__BackingField
private double <Beats>k__BackingField
public long Bars
public double Beats
public void .ctor(long bars)
public void .ctor(long bars, double beats)
public long get_Bars()
public double get_Beats()
public bool TryParse(string input, BarBeatFractionTimeSpan& timeSpan)
public BarBeatFractionTimeSpan Parse(string input)
public bool op_Equality(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool op_Inequality(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public BarBeatFractionTimeSpan op_Addition(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public BarBeatFractionTimeSpan op_Subtraction(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool op_LessThan(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool op_GreaterThan(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool op_LessThanOrEqual(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool op_GreaterThanOrEqual(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object obj)
public int CompareTo(BarBeatFractionTimeSpan other)
public bool Equals(BarBeatFractionTimeSpan other)
}
internal Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpanConverter : object {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
private void CalculateComponents(long totalTicks, TimeSignature timeSignature, short ticksPerQuarterNote, Int64& bars, Int64& beats, Double& fraction)
private long ConvertFractionToTicks(double fraction, long beatLength)
}
internal Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpanParser : object {
private string BarsGroupName
private string BeatsGroupName
private string BarsGroup
private string BeatsGroup
private string Divider
private String[] Patterns
private string BarsIsOutOfRange
private string BeatsIsOutOfRange
internal ParsingResult TryParse(string input, BarBeatFractionTimeSpan& timeSpan)
}
public Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpan : object {
private long <Bars>k__BackingField
private long <Beats>k__BackingField
private long <Ticks>k__BackingField
public long Bars
public long Beats
public long Ticks
public void .ctor(long bars)
public void .ctor(long bars, long beats)
public void .ctor(long bars, long beats, long ticks)
public long get_Bars()
public long get_Beats()
public long get_Ticks()
public bool TryParse(string input, BarBeatTicksTimeSpan& timeSpan)
public BarBeatTicksTimeSpan Parse(string input)
public bool op_Equality(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool op_Inequality(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public BarBeatTicksTimeSpan op_Addition(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public BarBeatTicksTimeSpan op_Subtraction(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool op_LessThan(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool op_GreaterThan(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool op_LessThanOrEqual(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool op_GreaterThanOrEqual(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object obj)
public int CompareTo(BarBeatTicksTimeSpan other)
public bool Equals(BarBeatTicksTimeSpan other)
}
internal Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpanConverter : object {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
private void CalculateComponents(long totalTicks, TimeSignature timeSignature, short ticksPerQuarterNote, Int64& bars, Int64& beats, Int64& ticks)
}
internal Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpanParser : object {
private string BarsGroupName
private string BeatsGroupName
private string TicksGroupName
private string BarsGroup
private string BeatsGroup
private string TicksGroup
private string Divider
private String[] Patterns
private string BarsIsOutOfRange
private string BeatsIsOutOfRange
private string TicksIsOutOfRange
internal ParsingResult TryParse(string input, BarBeatTicksTimeSpan& timeSpan)
}
public Melanchall.DryWetMidi.Interaction.BarBeatUtilities : object {
public int GetBarLength(long bars, TempoMap tempoMap)
public int GetBeatLength(long bars, TempoMap tempoMap)
internal int GetBarLength(TimeSignature timeSignature, short ticksPerQuarterNote)
internal int GetBeatLength(TimeSignature timeSignature, short ticksPerQuarterNote)
private Tuple`2<TimeSignature, short> GetTimeSignatureAndTicksPerQuarterNote(long bars, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.Chord : object {
private NotesCollectionChangedEventHandler NotesCollectionChanged
private Expression`1<Func`2<Note, FourBitNumber>> ChannelPropertySelector
private Expression`1<Func`2<Note, SevenBitNumber>> VelocityPropertySelector
private Expression`1<Func`2<Note, SevenBitNumber>> OffVelocityPropertySelector
private NotesCollection <Notes>k__BackingField
public NotesCollection Notes
public long Time
public long Length
public FourBitNumber Channel
public SevenBitNumber Velocity
public SevenBitNumber OffVelocity
public void add_NotesCollectionChanged(NotesCollectionChangedEventHandler value)
public void remove_NotesCollectionChanged(NotesCollectionChangedEventHandler value)
public void .ctor(IEnumerable`1<Note> notes)
public void .ctor(Note[] notes)
public void .ctor(IEnumerable`1<Note> notes, long time)
public NotesCollection get_Notes()
public long get_Time()
public void set_Time(long value)
public long get_Length()
public void set_Length(long value)
public FourBitNumber get_Channel()
public void set_Channel(FourBitNumber value)
public SevenBitNumber get_Velocity()
public void set_Velocity(SevenBitNumber value)
public SevenBitNumber get_OffVelocity()
public void set_OffVelocity(SevenBitNumber value)
public Chord Clone()
public SplittedLengthedObject`1<Chord> Split(long time)
private void OnNotesCollectionChanged(NotesCollection collection, NotesCollectionChangedEventArgs args)
private TValue GetNotesProperty(Expression`1<Func`2<Note, TValue>> propertySelector)
private void SetNotesProperty(Expression`1<Func`2<Note, TValue>> propertySelector, TValue value)
private PropertyInfo GetPropertyInfo(Expression`1<Func`2<Note, TValue>> propertySelector)
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.ChordsCollection : TimedObjectsCollection`1<Chord> {
private ChordsCollectionChangedEventHandler CollectionChanged
public void add_CollectionChanged(ChordsCollectionChangedEventHandler value)
public void remove_CollectionChanged(ChordsCollectionChangedEventHandler value)
internal void .ctor(IEnumerable`1<Chord> chords)
protected void OnObjectsAdded(IEnumerable`1<Chord> addedObjects)
protected void OnObjectsRemoved(IEnumerable`1<Chord> removedObjects)
private void OnCollectionChanged(IEnumerable`1<Chord> addedChords, IEnumerable`1<Chord> removedChords)
}
public Melanchall.DryWetMidi.Interaction.ChordsCollectionChangedEventArgs : EventArgs {
private IEnumerable`1<Chord> <AddedChords>k__BackingField
private IEnumerable`1<Chord> <RemovedChords>k__BackingField
public IEnumerable`1<Chord> AddedChords
public IEnumerable`1<Chord> RemovedChords
public void .ctor(IEnumerable`1<Chord> addedChords, IEnumerable`1<Chord> removedChords)
public IEnumerable`1<Chord> get_AddedChords()
public IEnumerable`1<Chord> get_RemovedChords()
}
public Melanchall.DryWetMidi.Interaction.ChordsCollectionChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ChordsCollection collection, ChordsCollectionChangedEventArgs args)
public IAsyncResult BeginInvoke(ChordsCollection collection, ChordsCollectionChangedEventArgs args, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Interaction.ChordsManager : object {
private NotesManager _notesManager
private bool _disposed
private ChordsCollection <Chords>k__BackingField
public ChordsCollection Chords
public void .ctor(EventsCollection eventsCollection, long notesTolerance, Comparison`1<MidiEvent> sameTimeEventsComparison)
public ChordsCollection get_Chords()
public void SaveChanges()
private void OnChordsCollectionChanged(ChordsCollection collection, ChordsCollectionChangedEventArgs args)
private void OnChordNotesCollectionChanged(NotesCollection collection, NotesCollectionChangedEventArgs args)
private void SubscribeToChordEvents(Chord chord)
private void UnsubscribeFromChordEvents(Chord chord)
private void AddNotes(IEnumerable`1<Note> notes)
private void RemoveNotes(IEnumerable`1<Note> notes)
internal IEnumerable`1<Chord> CreateChords(IEnumerable`1<Note> notes, long notesTolerance)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities : object {
public Chord SetTimeAndLength(Chord chord, ITimeSpan time, ITimeSpan length, TempoMap tempoMap)
public ChordsManager ManageChords(EventsCollection eventsCollection, long notesTolerance, Comparison`1<MidiEvent> sameTimeEventsComparison)
public ChordsManager ManageChords(TrackChunk trackChunk, long notesTolerance, Comparison`1<MidiEvent> sameTimeEventsComparison)
public IEnumerable`1<Chord> GetChords(IEnumerable`1<MidiEvent> events, long notesTolerance)
public IEnumerable`1<Chord> GetChords(EventsCollection eventsCollection, long notesTolerance)
public IEnumerable`1<Chord> GetChords(TrackChunk trackChunk, long notesTolerance)
public IEnumerable`1<Chord> GetChords(IEnumerable`1<TrackChunk> trackChunks, long notesTolerance)
public IEnumerable`1<Chord> GetChords(MidiFile file, long notesTolerance)
public IEnumerable`1<Chord> GetChords(IEnumerable`1<Note> notes, long notesTolerance)
public void ProcessChords(EventsCollection eventsCollection, Action`1<Chord> action, Predicate`1<Chord> match, long notesTolerance)
public void ProcessChords(TrackChunk trackChunk, Action`1<Chord> action, Predicate`1<Chord> match, long notesTolerance)
public void ProcessChords(IEnumerable`1<TrackChunk> trackChunks, Action`1<Chord> action, Predicate`1<Chord> match, long notesTolerance)
public void ProcessChords(MidiFile file, Action`1<Chord> action, Predicate`1<Chord> match, long notesTolerance)
public void RemoveChords(EventsCollection eventsCollection, Predicate`1<Chord> match, long notesTolerance)
public void RemoveChords(TrackChunk trackChunk, Predicate`1<Chord> match, long notesTolerance)
public void RemoveChords(IEnumerable`1<TrackChunk> trackChunks, Predicate`1<Chord> match, long notesTolerance)
public void RemoveChords(MidiFile file, Predicate`1<Chord> match, long notesTolerance)
public void AddChords(EventsCollection eventsCollection, IEnumerable`1<Chord> chords)
public void AddChords(TrackChunk trackChunk, IEnumerable`1<Chord> chords)
public TrackChunk ToTrackChunk(IEnumerable`1<Chord> chords)
public MidiFile ToFile(IEnumerable`1<Chord> chords)
}
public Melanchall.DryWetMidi.Interaction.GetNotesAndRestsUtilities : object {
private object NoSeparationNoteDescriptor
public IEnumerable`1<ILengthedObject> GetNotesAndRests(IEnumerable`1<Note> notes, RestSeparationPolicy restSeparationPolicy)
public IEnumerable`1<ILengthedObject> GetNotesAndRests(TrackChunk trackChunk, RestSeparationPolicy restSeparationPolicy)
public IEnumerable`1<ILengthedObject> GetNotesAndRests(IEnumerable`1<TrackChunk> trackChunks, RestSeparationPolicy restSeparationPolicy)
public IEnumerable`1<ILengthedObject> GetNotesAndRests(MidiFile midiFile, RestSeparationPolicy restSeparationPolicy)
private IEnumerable`1<ILengthedObject> GetNotesAndRests(IEnumerable`1<Note> notes, Func`2<Note, TDescriptor> noteDescriptorGetter, bool setRestChannel, bool setRestNoteNumber)
}
public Melanchall.DryWetMidi.Interaction.GetTimedEventsAndNotesUtilities : object {
public IEnumerable`1<ITimedObject> GetTimedEventsAndNotes(IEnumerable`1<TimedEvent> timedEvents)
public IEnumerable`1<ITimedObject> GetTimedEventsAndNotes(TrackChunk trackChunk)
public IEnumerable`1<ITimedObject> GetTimedEventsAndNotes(IEnumerable`1<TrackChunk> trackChunks)
public IEnumerable`1<ITimedObject> GetTimedEventsAndNotes(MidiFile midiFile)
}
public Melanchall.DryWetMidi.Interaction.IGrid {
public IEnumerable`1<long> GetTimes(TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.ILengthedObject {
public long Length
public long get_Length()
}
public Melanchall.DryWetMidi.Interaction.IMusicalObject {
public FourBitNumber Channel
public FourBitNumber get_Channel()
}
internal Melanchall.DryWetMidi.Interaction.ITempoMapValuesCache {
public IEnumerable`1<TempoMapLine> InvalidateOnLines
public IEnumerable`1<TempoMapLine> get_InvalidateOnLines()
public void Invalidate(TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.ITimedObject {
public long Time
public long get_Time()
}
public Melanchall.DryWetMidi.Interaction.ITimeSpan {
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
}
internal Melanchall.DryWetMidi.Interaction.ITimeSpanConverter {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.LengthConverter : object {
public TTimeSpan ConvertTo(long length, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(long length, TimeSpanType lengthType, long time, TempoMap tempoMap)
public TTimeSpan ConvertTo(long length, ITimeSpan time, TempoMap tempoMap)
public ITimeSpan ConvertTo(long length, TimeSpanType lengthType, ITimeSpan time, TempoMap tempoMap)
public TTimeSpan ConvertTo(ITimeSpan length, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan length, TimeSpanType lengthType, long time, TempoMap tempoMap)
public TTimeSpan ConvertTo(ITimeSpan length, ITimeSpan time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan length, TimeSpanType lengthType, ITimeSpan time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan length, Type lengthType, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan length, Type lengthType, ITimeSpan time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan length, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan length, ITimeSpan time, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.LengthedObjectPart : Enum {
public int value__
public LengthedObjectPart Start
public LengthedObjectPart End
public LengthedObjectPart Entire
}
public Melanchall.DryWetMidi.Interaction.LengthedObjectUtilities : object {
public TLength LengthAs(ILengthedObject obj, TempoMap tempoMap)
public ITimeSpan LengthAs(ILengthedObject obj, TimeSpanType lengthType, TempoMap tempoMap)
public TTime EndTimeAs(ILengthedObject obj, TempoMap tempoMap)
public ITimeSpan EndTimeAs(ILengthedObject obj, TimeSpanType timeType, TempoMap tempoMap)
public IEnumerable`1<TObject> StartAtTime(IEnumerable`1<TObject> objects, long time)
public IEnumerable`1<TObject> EndAtTime(IEnumerable`1<TObject> objects, long time)
public IEnumerable`1<TObject> StartAtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap)
public IEnumerable`1<TObject> EndAtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap)
public IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, long time, LengthedObjectPart matchBy)
public IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap, LengthedObjectPart matchBy)
private bool IsObjectAtTime(TObject obj, long time, LengthedObjectPart matchBy)
}
public Melanchall.DryWetMidi.Interaction.MathOperation : Enum {
public int value__
public MathOperation Add
public MathOperation Subtract
}
public Melanchall.DryWetMidi.Interaction.MathTimeSpan : object {
private string TimeModeString
private string LengthModeString
private Dictionary`2<TimeSpanMode, Tuple`2<string, string>> ModeStrings
private ITimeSpan <TimeSpan1>k__BackingField
private ITimeSpan <TimeSpan2>k__BackingField
private MathOperation <Operation>k__BackingField
private TimeSpanMode <Mode>k__BackingField
public ITimeSpan TimeSpan1
public ITimeSpan TimeSpan2
public MathOperation Operation
public TimeSpanMode Mode
internal void .ctor(ITimeSpan timeSpan1, ITimeSpan timeSpan2, MathOperation operation, TimeSpanMode mode)
public ITimeSpan get_TimeSpan1()
public ITimeSpan get_TimeSpan2()
public MathOperation get_Operation()
public TimeSpanMode get_Mode()
public bool op_Equality(MathTimeSpan timeSpan1, MathTimeSpan timeSpan2)
public bool op_Inequality(MathTimeSpan timeSpan1, MathTimeSpan timeSpan2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object obj)
}
internal Melanchall.DryWetMidi.Interaction.MathTimeSpanConverter : object {
private Dictionary`2<TimeSpanMode, Func`4<MathTimeSpan, long, TempoMap, long>> Converters
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
private long ConvertFromLengthLength(MathTimeSpan mathTimeSpan, long time, TempoMap tempoMap)
private long ConvertFromTimeLength(MathTimeSpan mathTimeSpan, long time, TempoMap tempoMap)
private long ConvertFromTimeTime(MathTimeSpan mathTimeSpan, long time, TempoMap tempoMap)
}
internal Melanchall.DryWetMidi.Interaction.MetricTempoMapValuesCache : object {
private IEnumerable`1<AccumulatedMicroseconds> <Microseconds>k__BackingField
private double <DefaultMicrosecondsPerTick>k__BackingField
private double <DefaultTicksPerMicrosecond>k__BackingField
private IEnumerable`1<TempoMapLine> <InvalidateOnLines>k__BackingField
public IEnumerable`1<AccumulatedMicroseconds> Microseconds
public double DefaultMicrosecondsPerTick
public double DefaultTicksPerMicrosecond
public IEnumerable`1<TempoMapLine> InvalidateOnLines
public IEnumerable`1<AccumulatedMicroseconds> get_Microseconds()
private void set_Microseconds(IEnumerable`1<AccumulatedMicroseconds> value)
public double get_DefaultMicrosecondsPerTick()
private void set_DefaultMicrosecondsPerTick(double value)
public double get_DefaultTicksPerMicrosecond()
private void set_DefaultTicksPerMicrosecond(double value)
private double GetMicroseconds(long time, Tempo tempo, short ticksPerQuarterNote)
public IEnumerable`1<TempoMapLine> get_InvalidateOnLines()
public void Invalidate(TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.MetricTimeSpan : object {
private int MicrosecondsInMillisecond
private long TicksInMicrosecond
private TimeSpan _timeSpan
public long TotalMicroseconds
public int Hours
public int Minutes
public int Seconds
public int Milliseconds
public void .ctor(long totalMicroseconds)
public void .ctor(TimeSpan timeSpan)
public void .ctor(int hours, int minutes, int seconds)
public void .ctor(int hours, int minutes, int seconds, int milliseconds)
public long get_TotalMicroseconds()
public int get_Hours()
public int get_Minutes()
public int get_Seconds()
public int get_Milliseconds()
public double Divide(MetricTimeSpan timeSpan)
public bool TryParse(string input, MetricTimeSpan& timeSpan)
public MetricTimeSpan Parse(string input)
public MetricTimeSpan op_Implicit(TimeSpan timeSpan)
public TimeSpan op_Implicit(MetricTimeSpan timeSpan)
public bool op_Equality(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool op_Inequality(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public MetricTimeSpan op_Addition(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public MetricTimeSpan op_Subtraction(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool op_LessThan(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool op_GreaterThan(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool op_LessThanOrEqual(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool op_GreaterThanOrEqual(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object obj)
public int CompareTo(MetricTimeSpan other)
public bool Equals(MetricTimeSpan other)
}
internal Melanchall.DryWetMidi.Interaction.MetricTimeSpanConverter : object {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
private MetricTimeSpan TicksToMetricTimeSpan(long timeSpan, TempoMap tempoMap)
private long MetricTimeSpanToTicks(MetricTimeSpan timeSpan, TempoMap tempoMap)
private double GetMicroseconds(long time, double microsecondsPerTick)
private long RoundMicroseconds(double microseconds)
}
internal Melanchall.DryWetMidi.Interaction.MetricTimeSpanParser : object {
private string HoursGroupName
private string MinutesGroupName
private string SecondsGroupName
private string MillisecondsGroupName
private string HoursGroup
private string MinutesGroup
private string SecondsGroup
private string MillisecondsGroup
private string LetteredHoursGroup
private string LetteredMinutesGroup
private string LetteredSecondsGroup
private string LetteredMillisecondsGroup
private string Divider
private String[] Patterns
private string HoursIsOutOfRange
private string MinutesIsOutOfRange
private string SecondsIsOutOfRange
private string MillisecondsIsOutOfRange
internal ParsingResult TryParse(string input, MetricTimeSpan& timeSpan)
}
public Melanchall.DryWetMidi.Interaction.MidiFileUtilities : object {
public TTimeSpan GetDuration(MidiFile midiFile)
public ITimeSpan GetDuration(MidiFile midiFile, TimeSpanType durationType)
public bool IsEmpty(MidiFile midiFile)
public void ShiftEvents(MidiFile midiFile, ITimeSpan distance)
public void Resize(MidiFile midiFile, ITimeSpan length)
public void Resize(MidiFile midiFile, double ratio)
private void ResizeByRatio(MidiFile midiFile, double ratio)
}
public Melanchall.DryWetMidi.Interaction.MidiTimeSpan : object {
private long <TimeSpan>k__BackingField
public long TimeSpan
public void .ctor(long timeSpan)
public long get_TimeSpan()
public double Divide(MidiTimeSpan timeSpan)
public bool TryParse(string input, MidiTimeSpan& timeSpan)
public MidiTimeSpan Parse(string input)
public MidiTimeSpan op_Explicit(long timeSpan)
public long op_Implicit(MidiTimeSpan timeSpan)
public bool op_Equality(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public bool op_Inequality(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public MidiTimeSpan op_Addition(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public MidiTimeSpan op_Subtraction(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public bool op_LessThan(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public bool op_GreaterThan(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public bool op_LessThanOrEqual(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public bool op_GreaterThanOrEqual(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object obj)
public int CompareTo(MidiTimeSpan other)
public bool Equals(MidiTimeSpan other)
}
internal Melanchall.DryWetMidi.Interaction.MidiTimeSpanConverter : object {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
}
internal Melanchall.DryWetMidi.Interaction.MidiTimeSpanParser : object {
private string TimeSpanGroupName
private string TimeSpanGroup
private String[] Patterns
private string OutOfRange
internal ParsingResult TryParse(string input, MidiTimeSpan& timeSpan)
}
public Melanchall.DryWetMidi.Interaction.MusicalTimeSpan : object {
public MusicalTimeSpan Whole
public MusicalTimeSpan Half
public MusicalTimeSpan Quarter
public MusicalTimeSpan Eighth
public MusicalTimeSpan Sixteenth
public MusicalTimeSpan ThirtySecond
public MusicalTimeSpan SixtyFourth
private long ZeroTimeSpanNumerator
private long ZeroTimeSpanDenominator
private long FractionNumerator
private int WholeFraction
private int HalfFraction
private int QuarterFraction
private int EighthFraction
private int SixteenthFraction
private int ThirtySecondFraction
private int SixtyFourthFraction
private int TripletNotesCount
private int TripletSpaceSize
private int DupletNotesCount
private int DupletSpaceSize
private int SingleDotCount
private int DoubleDotCount
private int NumberOfDigitsAfterDecimalPoint
private int FractionPartMultiplier
private long <Numerator>k__BackingField
private long <Denominator>k__BackingField
public long Numerator
public long Denominator
public void .ctor(long fraction)
public void .ctor(long numerator, long denominator, bool simplify)
public long get_Numerator()
public long get_Denominator()
public MusicalTimeSpan Dotted(int dotsCount)
public MusicalTimeSpan SingleDotted()
public MusicalTimeSpan DoubleDotted()
public MusicalTimeSpan Tuplet(int tupletNotesCount, int tupletSpaceSize)
public MusicalTimeSpan Triplet()
public MusicalTimeSpan Duplet()
public double Divide(MusicalTimeSpan timeSpan)
public MusicalTimeSpan ChangeDenominator(long denominator)
public bool TryParse(string input, MusicalTimeSpan& timeSpan)
public MusicalTimeSpan Parse(string input)
private void ReduceToCommonDenominator(MusicalTimeSpan fraction1, MusicalTimeSpan fraction2, Int64& numerator1, Int64& numerator2, Int64& denominator)
public bool op_Equality(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool op_Inequality(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public MusicalTimeSpan op_Multiply(MusicalTimeSpan timeSpan, long number)
public MusicalTimeSpan op_Multiply(long number, MusicalTimeSpan timeSpan)
public MusicalTimeSpan op_Division(MusicalTimeSpan timeSpan, long number)
public MusicalTimeSpan op_Addition(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public MusicalTimeSpan op_Subtraction(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool op_LessThan(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool op_GreaterThan(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool op_LessThanOrEqual(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool op_GreaterThanOrEqual(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object obj)
public int CompareTo(MusicalTimeSpan other)
public bool Equals(MusicalTimeSpan other)
}
internal Melanchall.DryWetMidi.Interaction.MusicalTimeSpanConverter : object {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
}
internal Melanchall.DryWetMidi.Interaction.MusicalTimeSpanParser : object {
private Dictionary`2<string, Tuple`2<int, int>> Fractions
private Dictionary`2<string, Tuple`2<int, int>> Tuplets
private string NumeratorGroupName
private string DenominatorGroupName
private string FractionMnemonicGroupName
private string TupletNotesCountGroupName
private string TupletSpaceSizeGroupName
private string TupletMnemonicGroupName
private string DotsGroupName
private string FractionGroup
private string FractionMnemonicGroup
private string TupletGroup
private string TupletMnemonicGroup
private string DotsGroup
private String[] Patterns
private string NumeratorIsOutOfRange
private string DenominatorIsOutOfRange
private string TupletNotesCountIsOutOfRange
private string TupletSpaceSizeIsOutOfRange
internal ParsingResult TryParse(string input, MusicalTimeSpan& timeSpan)
private string GetMnemonicGroup(string groupName, IEnumerable`1<string> mnemonics)
}
public Melanchall.DryWetMidi.Interaction.Note : object {
public SevenBitNumber DefaultVelocity
private Note _note
private SevenBitNumber <Velocity>k__BackingField
private SevenBitNumber <OffVelocity>k__BackingField
private FourBitNumber <Channel>k__BackingField
private TimedEvent <TimedNoteOnEvent>k__BackingField
private TimedEvent <TimedNoteOffEvent>k__BackingField
public long Time
public long Length
public SevenBitNumber NoteNumber
public SevenBitNumber Velocity
public SevenBitNumber OffVelocity
public FourBitNumber Channel
public NoteName NoteName
public int Octave
internal TimedEvent TimedNoteOnEvent
internal TimedEvent TimedNoteOffEvent
public void .ctor(NoteName noteName, int octave)
public void .ctor(NoteName noteName, int octave, long length)
public void .ctor(NoteName noteName, int octave, long length, long time)
public void .ctor(SevenBitNumber noteNumber)
public void .ctor(SevenBitNumber noteNumber, long length)
public void .ctor(SevenBitNumber noteNumber, long length, long time)
internal void .ctor(TimedEvent timedNoteOnEvent, TimedEvent timedNoteOffEvent)
public long get_Time()
public void set_Time(long value)
public long get_Length()
public void set_Length(long value)
public SevenBitNumber get_NoteNumber()
public void set_NoteNumber(SevenBitNumber value)
public SevenBitNumber get_Velocity()
public void set_Velocity(SevenBitNumber value)
public SevenBitNumber get_OffVelocity()
public void set_OffVelocity(SevenBitNumber value)
public FourBitNumber get_Channel()
public void set_Channel(FourBitNumber value)
public NoteName get_NoteName()
public int get_Octave()
internal TimedEvent get_TimedNoteOnEvent()
internal TimedEvent get_TimedNoteOffEvent()
public TimedEvent GetTimedNoteOnEvent()
public TimedEvent GetTimedNoteOffEvent()
public void SetNoteNameAndOctave(NoteName noteName, int octave)
public Note Clone()
public SplittedLengthedObject`1<Note> Split(long time)
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.NoteId : object {
private FourBitNumber <Channel>k__BackingField
private SevenBitNumber <NoteNumber>k__BackingField
public FourBitNumber Channel
public SevenBitNumber NoteNumber
public void .ctor(FourBitNumber channel, SevenBitNumber noteNumber)
public FourBitNumber get_Channel()
public SevenBitNumber get_NoteNumber()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.NoteIdUtilities : object {
public NoteId GetNoteId(Note note)
public NoteId GetNoteId(NoteEvent noteEvent)
}
public Melanchall.DryWetMidi.Interaction.NotesCollection : TimedObjectsCollection`1<Note> {
private NotesCollectionChangedEventHandler CollectionChanged
public void add_CollectionChanged(NotesCollectionChangedEventHandler value)
public void remove_CollectionChanged(NotesCollectionChangedEventHandler value)
internal void .ctor(IEnumerable`1<Note> notes)
protected void OnObjectsAdded(IEnumerable`1<Note> addedObjects)
protected void OnObjectsRemoved(IEnumerable`1<Note> removedObjects)
private void OnCollectionChanged(IEnumerable`1<Note> addedNotes, IEnumerable`1<Note> removedNotes)
}
public Melanchall.DryWetMidi.Interaction.NotesCollectionChangedEventArgs : EventArgs {
private IEnumerable`1<Note> <AddedNotes>k__BackingField
private IEnumerable`1<Note> <RemovedNotes>k__BackingField
public IEnumerable`1<Note> AddedNotes
public IEnumerable`1<Note> RemovedNotes
public void .ctor(IEnumerable`1<Note> addedNotes, IEnumerable`1<Note> removedNotes)
public IEnumerable`1<Note> get_AddedNotes()
public IEnumerable`1<Note> get_RemovedNotes()
}
public Melanchall.DryWetMidi.Interaction.NotesCollectionChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(NotesCollection collection, NotesCollectionChangedEventArgs args)
public IAsyncResult BeginInvoke(NotesCollection collection, NotesCollectionChangedEventArgs args, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Interaction.NotesManager : object {
private TimedEventsManager _timedEventsManager
private bool _disposed
private NotesCollection <Notes>k__BackingField
public NotesCollection Notes
public void .ctor(EventsCollection eventsCollection, Comparison`1<MidiEvent> sameTimeEventsComparison)
public NotesCollection get_Notes()
public void SaveChanges()
private void OnNotesCollectionChanged(NotesCollection collection, NotesCollectionChangedEventArgs args)
private IEnumerable`1<Note> CreateNotes(IEnumerable`1<TimedEvent> events)
private IEnumerable`1<TimedEvent> GetNotesTimedEvents(IEnumerable`1<Note> notes)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Interaction.NotesManagingUtilities : object {
public Note SetTimeAndLength(Note note, ITimeSpan time, ITimeSpan length, TempoMap tempoMap)
public NotesManager ManageNotes(EventsCollection eventsCollection, Comparison`1<MidiEvent> sameTimeEventsComparison)
public NotesManager ManageNotes(TrackChunk trackChunk, Comparison`1<MidiEvent> sameTimeEventsComparison)
public IEnumerable`1<Note> GetNotes(IEnumerable`1<MidiEvent> events)
public IEnumerable`1<Note> GetNotes(EventsCollection eventsCollection)
public IEnumerable`1<Note> GetNotes(TrackChunk trackChunk)
public IEnumerable`1<Note> GetNotes(IEnumerable`1<TrackChunk> trackChunks)
public IEnumerable`1<Note> GetNotes(MidiFile file)
public void ProcessNotes(EventsCollection eventsCollection, Action`1<Note> action, Predicate`1<Note> match)
public void ProcessNotes(TrackChunk trackChunk, Action`1<Note> action, Predicate`1<Note> match)
public void ProcessNotes(IEnumerable`1<TrackChunk> trackChunks, Action`1<Note> action, Predicate`1<Note> match)
public void ProcessNotes(MidiFile file, Action`1<Note> action, Predicate`1<Note> match)
public void RemoveNotes(EventsCollection eventsCollection, Predicate`1<Note> match)
public void RemoveNotes(TrackChunk trackChunk, Predicate`1<Note> match)
public void RemoveNotes(IEnumerable`1<TrackChunk> trackChunks, Predicate`1<Note> match)
public void RemoveNotes(MidiFile file, Predicate`1<Note> match)
public void AddNotes(EventsCollection eventsCollection, IEnumerable`1<Note> notes)
public void AddNotes(TrackChunk trackChunk, IEnumerable`1<Note> notes)
public TrackChunk ToTrackChunk(IEnumerable`1<Note> notes)
public MidiFile ToFile(IEnumerable`1<Note> notes)
}
public Melanchall.DryWetMidi.Interaction.ResizeNotesUtilities : object {
public void ResizeNotes(IEnumerable`1<Note> notes, ITimeSpan length, TimeSpanType distanceCalculationType, TempoMap tempoMap)
public void ResizeNotes(IEnumerable`1<Note> notes, double ratio, TimeSpanType distanceCalculationType, TempoMap tempoMap)
private void ResizeNotesByRatio(IEnumerable`1<Note> notes, double ratio, TimeSpanType distanceCalculationType, TempoMap tempoMap, ITimeSpan startTime)
}
public Melanchall.DryWetMidi.Interaction.Rest : object {
private long <Time>k__BackingField
private long <Length>k__BackingField
private Nullable`1<FourBitNumber> <Channel>k__BackingField
private Nullable`1<SevenBitNumber> <NoteNumber>k__BackingField
public long Time
public long Length
public Nullable`1<FourBitNumber> Channel
public Nullable`1<SevenBitNumber> NoteNumber
internal void .ctor(long time, long length, Nullable`1<FourBitNumber> channel, Nullable`1<SevenBitNumber> noteNumber)
public long get_Time()
public long get_Length()
public Nullable`1<FourBitNumber> get_Channel()
public Nullable`1<SevenBitNumber> get_NoteNumber()
public bool op_Equality(Rest rest1, Rest rest2)
public bool op_Inequality(Rest rest1, Rest rest2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.RestSeparationPolicy : Enum {
public int value__
public RestSeparationPolicy NoSeparation
public RestSeparationPolicy SeparateByChannel
public RestSeparationPolicy SeparateByNoteNumber
public RestSeparationPolicy SeparateByChannelAndNoteNumber
}
public Melanchall.DryWetMidi.Interaction.SplittedLengthedObject`1 : object {
private TObject <LeftPart>k__BackingField
private TObject <RightPart>k__BackingField
public TObject LeftPart
public TObject RightPart
internal void .ctor(TObject leftPart, TObject rightPart)
public TObject get_LeftPart()
public TObject get_RightPart()
}
public Melanchall.DryWetMidi.Interaction.SteppedGrid : object {
private ITimeSpan <Start>k__BackingField
private IEnumerable`1<ITimeSpan> <Steps>k__BackingField
public ITimeSpan Start
public IEnumerable`1<ITimeSpan> Steps
public void .ctor(ITimeSpan step)
public void .ctor(ITimeSpan start, ITimeSpan step)
public void .ctor(IEnumerable`1<ITimeSpan> steps)
public void .ctor(ITimeSpan start, IEnumerable`1<ITimeSpan> steps)
public ITimeSpan get_Start()
public IEnumerable`1<ITimeSpan> get_Steps()
public IEnumerable`1<long> GetTimes(TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.Tempo : object {
public Tempo Default
private int MicrosecondsInMinute
private int MicrosecondsInMillisecond
private long <MicrosecondsPerQuarterNote>k__BackingField
public long MicrosecondsPerQuarterNote
public long BeatsPerMinute
public void .ctor(long microsecondsPerQuarterNote)
public long get_MicrosecondsPerQuarterNote()
public long get_BeatsPerMinute()
public Tempo FromMillisecondsPerQuarterNote(long millisecondsPerQuarterNote)
public Tempo FromBeatsPerMinute(int beatsPerMinute)
public bool op_Equality(Tempo tempo1, Tempo tempo2)
public bool op_Inequality(Tempo tempo1, Tempo tempo2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.TempoMap : object {
public TempoMap Default
private ValueLine`1<TimeSignature> _timeSignature
private ValueLine`1<Tempo> _tempo
private List`1<ITempoMapValuesCache> _valuesCaches
private TimeDivision <TimeDivision>k__BackingField
public TimeDivision TimeDivision
public ValueLine`1<TimeSignature> TimeSignature
public ValueLine`1<Tempo> Tempo
internal void .ctor(TimeDivision timeDivision)
public TimeDivision get_TimeDivision()
internal void set_TimeDivision(TimeDivision value)
public ValueLine`1<TimeSignature> get_TimeSignature()
private void set_TimeSignature(ValueLine`1<TimeSignature> value)
public ValueLine`1<Tempo> get_Tempo()
private void set_Tempo(ValueLine`1<Tempo> value)
public TempoMap Clone()
public TempoMap Create(Tempo tempo, TimeSignature timeSignature)
public TempoMap Create(Tempo tempo)
public TempoMap Create(TimeSignature timeSignature)
public TempoMap Create(TimeDivision timeDivision)
public TempoMap Create(TimeDivision timeDivision, Tempo tempo)
public TempoMap Create(TimeDivision timeDivision, TimeSignature timeSignature)
public TempoMap Create(TimeDivision timeDivision, Tempo tempo, TimeSignature timeSignature)
internal TempoMap Flip(long centerTime)
internal TCache GetValuesCache()
private void SetGlobalTempo(TempoMap tempoMap, Tempo tempo)
private void SetGlobalTimeSignature(TempoMap tempoMap, TimeSignature timeSignature)
private void InvalidateCaches(TempoMapLine tempoMapLine)
private void OnTimeSignatureChanged(object sender, EventArgs args)
private void OnTempoChanged(object sender, EventArgs args)
}
internal Melanchall.DryWetMidi.Interaction.TempoMapLine : Enum {
public int value__
public TempoMapLine Tempo
public TempoMapLine TimeSignature
}
public Melanchall.DryWetMidi.Interaction.TempoMapManager : object {
private IEnumerable`1<TimedEventsManager> _timedEventsManagers
private bool _disposed
private TempoMap <TempoMap>k__BackingField
public TempoMap TempoMap
public void .ctor(TimeDivision timeDivision)
public void .ctor(TimeDivision timeDivision, IEnumerable`1<EventsCollection> eventsCollections)
public TempoMap get_TempoMap()
public void SetTimeSignature(long time, TimeSignature timeSignature)
public void SetTimeSignature(ITimeSpan time, TimeSignature timeSignature)
public void ClearTimeSignature(long startTime)
public void ClearTimeSignature(ITimeSpan startTime)
public void ClearTimeSignature(long startTime, long endTime)
public void ClearTimeSignature(ITimeSpan startTime, ITimeSpan endTime)
public void SetTempo(long time, Tempo tempo)
public void SetTempo(ITimeSpan time, Tempo tempo)
public void ClearTempo(long startTime)
public void ClearTempo(ITimeSpan startTime)
public void ClearTempo(long startTime, long endTime)
public void ClearTempo(ITimeSpan startTime, ITimeSpan endTime)
public void ClearTempoMap()
public void ReplaceTempoMap(TempoMap tempoMap)
public void SaveChanges()
private IEnumerable`1<TimedEvent> GetTimedEvents(Func`2<TimedEvent, bool> predicate)
private void CollectTimeSignatureChanges()
private void CollectTempoChanges()
private bool IsTempoMapEvent(TimedEvent timedEvent)
private bool IsTempoEvent(TimedEvent timedEvent)
private bool IsTimeSignatureEvent(TimedEvent timedEvent)
private TimedEvent GetSetTempoTimedEvent(ValueChange`1<Tempo> tempoChange)
private TimedEvent GetTimeSignatureTimedEvent(ValueChange`1<TimeSignature> timeSignatureChange)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Interaction.TempoMapManagingUtilities : object {
public TempoMapManager ManageTempoMap(IEnumerable`1<EventsCollection> eventsCollections, TimeDivision timeDivision)
public TempoMapManager ManageTempoMap(IEnumerable`1<TrackChunk> trackChunks, TimeDivision timeDivision)
public TempoMapManager ManageTempoMap(MidiFile file)
public TempoMap GetTempoMap(IEnumerable`1<EventsCollection> eventsCollections, TimeDivision timeDivision)
public TempoMap GetTempoMap(IEnumerable`1<TrackChunk> trackChunks, TimeDivision timeDivision)
public TempoMap GetTempoMap(MidiFile file)
public void ReplaceTempoMap(IEnumerable`1<EventsCollection> eventsCollections, TempoMap tempoMap)
public void ReplaceTempoMap(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap)
public void ReplaceTempoMap(MidiFile file, TempoMap tempoMap)
}
internal Melanchall.DryWetMidi.Interaction.ThrowIfLengthArgument : object {
internal void IsNegative(string parameterName, long length)
}
internal Melanchall.DryWetMidi.Interaction.ThrowIfNotesTolerance : object {
internal void IsNegative(string parameterName, long notesTolerance)
}
internal Melanchall.DryWetMidi.Interaction.ThrowIfTimeArgument : object {
internal void IsNegative(string parameterName, long time)
internal void StartIsNegative(string parameterName, long time)
internal void EndIsNegative(string parameterName, long time)
}
public Melanchall.DryWetMidi.Interaction.TimeConverter : object {
public TTimeSpan ConvertTo(long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(long time, TimeSpanType timeType, TempoMap tempoMap)
public TTimeSpan ConvertTo(ITimeSpan time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan time, TimeSpanType timeType, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan time, Type timeType, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan time, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.TimedEvent : object {
private long _time
private MidiEvent <Event>k__BackingField
public MidiEvent Event
public long Time
public void .ctor(MidiEvent midiEvent)
public void .ctor(MidiEvent midiEvent, long time)
public MidiEvent get_Event()
public long get_Time()
public void set_Time(long value)
public TimedEvent Clone()
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.TimedEventsCollection : TimedObjectsCollection`1<TimedEvent> {
private TimedEventsComparer _eventsComparer
internal void .ctor(IEnumerable`1<TimedEvent> events, Comparison`1<MidiEvent> sameTimeEventsComparison)
public IEnumerator`1<TimedEvent> GetEnumerator()
}
internal Melanchall.DryWetMidi.Interaction.TimedEventsComparer : object {
private Comparison`1<MidiEvent> _sameTimeEventsComparison
internal void .ctor(Comparison`1<MidiEvent> sameTimeEventsComparison)
public int Compare(TimedEvent x, TimedEvent y)
}
public Melanchall.DryWetMidi.Interaction.TimedEventsManager : object {
private EventsCollection _eventsCollection
private bool _disposed
private TimedEventsCollection <Events>k__BackingField
public TimedEventsCollection Events
public void .ctor(EventsCollection eventsCollection, Comparison`1<MidiEvent> sameTimeEventsComparison)
public TimedEventsCollection get_Events()
public void SaveChanges()
private IEnumerable`1<TimedEvent> CreateTimedEvents(EventsCollection events)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Interaction.TimedEventsManagingUtilities : object {
public TimedEvent SetTime(TimedEvent timedEvent, ITimeSpan time, TempoMap tempoMap)
public TimedEventsManager ManageTimedEvents(EventsCollection eventsCollection, Comparison`1<MidiEvent> sameTimeEventsComparison)
public TimedEventsManager ManageTimedEvents(TrackChunk trackChunk, Comparison`1<MidiEvent> sameTimeEventsComparison)
public IEnumerable`1<TimedEvent> GetTimedEvents(IEnumerable`1<MidiEvent> events)
public IEnumerable`1<TimedEvent> GetTimedEvents(EventsCollection eventsCollection)
public IEnumerable`1<TimedEvent> GetTimedEvents(TrackChunk trackChunk)
public IEnumerable`1<TimedEvent> GetTimedEvents(IEnumerable`1<TrackChunk> trackChunks)
public IEnumerable`1<TimedEvent> GetTimedEvents(MidiFile file)
public void AddEvent(TimedEventsCollection eventsCollection, MidiEvent midiEvent, long time)
public void AddEvent(TimedEventsCollection eventsCollection, MidiEvent midiEvent, ITimeSpan time, TempoMap tempoMap)
public void ProcessTimedEvents(EventsCollection eventsCollection, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match)
public void ProcessTimedEvents(TrackChunk trackChunk, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match)
public void ProcessTimedEvents(IEnumerable`1<TrackChunk> trackChunks, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match)
public void ProcessTimedEvents(MidiFile file, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match)
public void RemoveTimedEvents(EventsCollection eventsCollection, Predicate`1<TimedEvent> match)
public void RemoveTimedEvents(TrackChunk trackChunk, Predicate`1<TimedEvent> match)
public void RemoveTimedEvents(IEnumerable`1<TrackChunk> trackChunks, Predicate`1<TimedEvent> match)
public void RemoveTimedEvents(MidiFile file, Predicate`1<TimedEvent> match)
public void AddTimedEvents(EventsCollection eventsCollection, IEnumerable`1<TimedEvent> events)
public void AddTimedEvents(TrackChunk trackChunk, IEnumerable`1<TimedEvent> events)
public TrackChunk ToTrackChunk(IEnumerable`1<TimedEvent> events)
public MidiFile ToFile(IEnumerable`1<TimedEvent> events)
}
public Melanchall.DryWetMidi.Interaction.TimedObjectsCollection`1 : object {
protected List`1<TObject> _objects
internal void .ctor(IEnumerable`1<TObject> objects)
public void Add(IEnumerable`1<TObject> objects)
public void Add(TObject[] objects)
public void Remove(IEnumerable`1<TObject> objects)
public void Remove(TObject[] objects)
public void RemoveAll(Predicate`1<TObject> match)
public void Clear()
protected void OnObjectsAdded(IEnumerable`1<TObject> addedObjects)
protected void OnObjectsRemoved(IEnumerable`1<TObject> removedObjects)
public IEnumerator`1<TObject> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
internal Melanchall.DryWetMidi.Interaction.TimedObjectsComparer`1 : object {
public int Compare(TObject x, TObject y)
}
public Melanchall.DryWetMidi.Interaction.TimedObjectUtilities : object {
public TTime TimeAs(ITimedObject obj, TempoMap tempoMap)
public ITimeSpan TimeAs(ITimedObject obj, TimeSpanType timeType, TempoMap tempoMap)
public IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, long time)
public IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.TimeSignature : object {
public TimeSignature Default
private int <Numerator>k__BackingField
private int <Denominator>k__BackingField
public int Numerator
public int Denominator
public void .ctor(int numerator, int denominator)
public int get_Numerator()
public int get_Denominator()
public bool op_Equality(TimeSignature timeSignature1, TimeSignature timeSignature2)
public bool op_Inequality(TimeSignature timeSignature1, TimeSignature timeSignature2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.TimeSpanComparer : object {
public int Compare(ITimeSpan x, ITimeSpan y)
}
internal Melanchall.DryWetMidi.Interaction.TimeSpanConverter : object {
private Dictionary`2<TimeSpanType, Type> TimeSpansTypes
private Dictionary`2<Type, ITimeSpanConverter> Converters
public TTimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(long timeSpan, TimeSpanType timeSpanType, long time, TempoMap tempoMap)
public TTimeSpan ConvertTo(ITimeSpan timeSpan, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan timeSpan, TimeSpanType timeSpanType, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan timeSpan, Type timeSpanType, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
private ITimeSpanConverter GetConverter()
private ITimeSpanConverter GetConverter(TimeSpanType timeSpanType)
private ITimeSpanConverter GetConverter(Type timeSpanType)
}
public Melanchall.DryWetMidi.Interaction.TimeSpanMode : Enum {
public int value__
public TimeSpanMode TimeTime
public TimeSpanMode TimeLength
public TimeSpanMode LengthLength
}
public Melanchall.DryWetMidi.Interaction.TimeSpanType : Enum {
public int value__
public TimeSpanType Metric
public TimeSpanType Musical
public TimeSpanType BarBeatTicks
public TimeSpanType BarBeatFraction
public TimeSpanType Midi
}
public Melanchall.DryWetMidi.Interaction.TimeSpanUtilities : object {
private Dictionary`2<TimeSpanType, Parsing`1<ITimeSpan>> Parsers
private Dictionary`2<TimeSpanType, ITimeSpan> MaximumTimeSpans
private Dictionary`2<TimeSpanType, ITimeSpan> ZeroTimeSpans
public bool TryParse(string input, ITimeSpan& timeSpan)
public bool TryParse(string input, TimeSpanType timeSpanType, ITimeSpan& timeSpan)
public ITimeSpan Parse(string input)
public ITimeSpan GetMaxTimeSpan(TimeSpanType timeSpanType)
public ITimeSpan GetZeroTimeSpan(TimeSpanType timeSpanType)
public TTimeSpan GetZeroTimeSpan()
internal double Divide(ITimeSpan timeSpan1, ITimeSpan timeSpan2)
internal ITimeSpan Add(ITimeSpan timeSpan1, ITimeSpan timeSpan2, TimeSpanMode mode)
internal ITimeSpan Subtract(ITimeSpan timeSpan1, ITimeSpan timeSpan2, TimeSpanMode mode)
private Parsing`1<ITimeSpan> GetParsing(Parsing`1<TTimeSpan> parsing)
}
public Melanchall.DryWetMidi.Interaction.TrackChunkUtilities : object {
public void ShiftEvents(TrackChunk trackChunk, ITimeSpan distance, TempoMap tempoMap)
public void ShiftEvents(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan distance, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.ValueChange`1 : object {
private long <Time>k__BackingField
private TValue <Value>k__BackingField
public long Time
public TValue Value
internal void .ctor(long time, TValue value)
public long get_Time()
public TValue get_Value()
public bool op_Equality(ValueChange`1<TValue> change1, ValueChange`1<TValue> change2)
public bool op_Inequality(ValueChange`1<TValue> change1, ValueChange`1<TValue> change2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.ValueLine`1 : object {
private EventHandler ValuesChanged
private List`1<ValueChange`1<TValue>> _values
private TValue _defaultValue
private bool _valuesChanged
internal void add_ValuesChanged(EventHandler value)
internal void remove_ValuesChanged(EventHandler value)
internal void .ctor(TValue defaultValue)
public TValue AtTime(long time)
internal void SetValue(long time, TValue value)
internal void DeleteValues(long startTime)
internal void DeleteValues(long startTime, long endTime)
internal void Clear()
internal void ReplaceValues(ValueLine`1<TValue> valueLine)
internal ValueLine`1<TValue> Reverse(long centerTime)
private void OnValuesChanged()
private void OnValuesNeedSorting()
private void OnValuesSortingCompleted()
public IEnumerator`1<ValueChange`1<TValue>> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public Melanchall.DryWetMidi.MusicTheory.Chord : object {
private Dictionary`2<ChordQuality, Interval[]> IntervalsByQuality
private ICollection`1<NoteName> <NotesNames>k__BackingField
public ICollection`1<NoteName> NotesNames
public NoteName RootNoteName
public void .ctor(ICollection`1<NoteName> notesNames)
public void .ctor(NoteName rootNoteName, NoteName[] notesNamesAboveRoot)
public void .ctor(NoteName rootNoteName, IEnumerable`1<Interval> intervalsFromRoot)
public void .ctor(NoteName rootNoteName, Interval[] intervalsFromRoot)
public ICollection`1<NoteName> get_NotesNames()
public NoteName get_RootNoteName()
public IEnumerable`1<Chord> GetInversions()
public bool TryParse(string input, Chord& chord)
public Chord Parse(string input)
public Chord GetByTriad(NoteName rootNoteName, ChordQuality chordQuality, Interval[] intervalsFromRoot)
public bool op_Equality(Chord chord1, Chord chord2)
public bool op_Inequality(Chord chord1, Chord chord2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
internal Melanchall.DryWetMidi.MusicTheory.ChordParser : object {
private string RootNoteNameGroupName
private string IntervalGroupName
private string ChordQualityGroupName
private string MajorQualityGroupName
private string MinorQualityGroupName
private string DiminishedQualityGroupName
private string AugmentedQualityGroupName
private string HalfDiminishedQualityGroupName
private string DominantQualityGroupName
private string BassNoteNameGroupName
private string ChordIntervalsGroupName
private string ChordNameGroupName
private string ExtensionQualityGroupName
private string ExtensionMajorQualityGroupName
private string ExtensionMinorQualityGroupName
private string ExtensionDiminishedQualityGroupName
private string ExtensionAugmentedQualityGroupName
private string ExtensionGroupName
private string ExtensionNumberGroupName
private string SuspendedNumberGroupName
private string SuspendedGroupName
private string AddedToneNumberGroupName
private string AddedToneGroupName
private string AlteredToneNumberGroupName
private string AlteredToneAccidentalGroupName
private string AlteredToneGroupName
private string IntervalGroup
private string RootNoteNameGroup
private string BassNoteNameGroup
private string ChordQualityGroup
private string ChordExtensionQualityGroup
private string ChordExtensionGroup
private string SuspendedGroup
private string AddedToneGroup
private string AlteredToneGroup
internal string ChordCharacteristicsGroup
private String[] Patterns
private Dictionary`2<string, Quality> GroupsQualities
private Dictionary`2<string, IntervalQuality> GroupsExtensionQualities
private Dictionary`2<Quality, ChordQuality> ChordQualities
private Dictionary`2<Quality, IntervalQuality> ChordToIntervalQualities
private string ExtensionNumberIsOutOfRange
private string HalfDiminishedOrDominantIsNotSeventh
private string SuspensionNumberIsOutOfRange
private string AddedToneNumberIsOutOfRange
private string AlteredToneNumberIsOutOfRange
internal ParsingResult TryParse(string input, Chord& chord)
internal ParsingResult TryParseChordName(Match match, NoteName rootNoteName, Chord& chord)
private ParsingResult TryParseChordIntervals(Match match, NoteName rootNoteName, Chord& chord)
private IDictionary`2<NoteName, int> GetExtensionNotes(Nullable`1<Quality> quality, NoteName rootNoteName, int extensionIntervalNumber, Nullable`1<IntervalQuality> extensionIntervalQuality)
}
public Melanchall.DryWetMidi.MusicTheory.ChordProgression : object {
private IEnumerable`1<Chord> <Chords>k__BackingField
public IEnumerable`1<Chord> Chords
public void .ctor(IEnumerable`1<Chord> chords)
public void .ctor(Chord[] chords)
public IEnumerable`1<Chord> get_Chords()
public bool TryParse(string input, Scale scale, ChordProgression& chordProgression)
public ChordProgression Parse(string input, Scale scale)
private Parsing`1<ChordProgression> GetParsing(string input, Scale scale)
public bool op_Equality(ChordProgression chordProgression1, ChordProgression chordProgression2)
public bool op_Inequality(ChordProgression chordProgression1, ChordProgression chordProgression2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
internal Melanchall.DryWetMidi.MusicTheory.ChordProgressionParser : object {
private string ScaleDegreeGroupName
private string ChordCharacteristicsGroupName
private string ScaleDegreeGroup
private string ChordCharacteristicsGroup
private String[] Patterns
private Dictionary`2<char, int> RomanMap
private string InvalidChordCharacteristicsString
internal ParsingResult TryParse(string input, Scale scale, ChordProgression& chordProgression)
private int RomanToInteger(string roman)
}
public Melanchall.DryWetMidi.MusicTheory.ChordQuality : Enum {
public int value__
public ChordQuality Major
public ChordQuality Minor
public ChordQuality Augmented
public ChordQuality Diminished
}
public Melanchall.DryWetMidi.MusicTheory.ChordUtilities : object {
public IEnumerable`1<Interval> GetIntervalsFromRootNote(Chord chord)
public IEnumerable`1<Interval> GetIntervalsBetweenNotes(Chord chord)
public Note ResolveRootNote(Chord chord, Octave octave)
public IEnumerable`1<Note> ResolveNotes(Chord chord, Octave octave)
private IEnumerable`1<SevenBitNumber> GetIntervals(Chord chord)
}
public Melanchall.DryWetMidi.MusicTheory.Interval : object {
private Dictionary`2<SevenBitNumber, Dictionary`2<IntervalDirection, Interval>> _cache
public Interval Zero
public Interval One
public Interval Two
public Interval Three
public Interval Four
public Interval Five
public Interval Six
public Interval Seven
public Interval Eight
public Interval Nine
public Interval Ten
public Interval Eleven
public Interval Twelve
private Dictionary`2<IntervalQuality, Dictionary`2<int, int>> IntervalsHalfTones
private SevenBitNumber <Size>k__BackingField
private IntervalDirection <Direction>k__BackingField
public SevenBitNumber Size
public IntervalDirection Direction
public int HalfSteps
private void .ctor(SevenBitNumber size, IntervalDirection direction)
public SevenBitNumber get_Size()
public IntervalDirection get_Direction()
public int get_HalfSteps()
public Interval Up()
public Interval Down()
public bool IsPerfect(int intervalNumber)
public bool IsQualityApplicable(IntervalQuality intervalQuality, int intervalNumber)
public Interval Get(IntervalQuality intervalQuality, int intervalNumber)
public Interval Get(SevenBitNumber intervalSize, IntervalDirection direction)
public Interval GetUp(SevenBitNumber intervalSize)
public Interval GetDown(SevenBitNumber intervalSize)
public Interval FromHalfSteps(int halfSteps)
public bool TryParse(string input, Interval& interval)
public Interval Parse(string input)
public int op_Implicit(Interval interval)
public Interval op_Implicit(SevenBitNumber interval)
public bool op_Equality(Interval interval1, Interval interval2)
public bool op_Inequality(Interval interval1, Interval interval2)
public Interval op_Addition(Interval interval, int halfSteps)
public Interval op_Subtraction(Interval interval, int halfSteps)
public Interval op_Multiply(Interval interval, int multiplier)
public Interval op_Division(Interval interval, int divisor)
public Interval op_UnaryPlus(Interval interval)
public Interval op_UnaryNegation(Interval interval)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.MusicTheory.IntervalDirection : Enum {
public int value__
public IntervalDirection Up
public IntervalDirection Down
}
internal Melanchall.DryWetMidi.MusicTheory.IntervalParser : object {
private string HalfStepsGroupName
private string IntervalQualityGroupName
private string IntervalNumberGroupName
private string HalfStepsGroup
private string IntervalGroup
private String[] Patterns
private Dictionary`2<string, IntervalQuality> IntervalQualitiesByLetters
private string HalfStepsNumberIsOutOfRange
private string IntervalNumberIsOutOfRange
internal IEnumerable`1<string> GetPatterns()
internal ParsingResult TryParse(string input, Interval& interval)
}
public Melanchall.DryWetMidi.MusicTheory.IntervalQuality : Enum {
public int value__
public IntervalQuality Perfect
public IntervalQuality Major
public IntervalQuality Minor
public IntervalQuality Augmented
public IntervalQuality Diminished
}
internal Melanchall.DryWetMidi.MusicTheory.IntervalUtilities : object {
internal bool IsIntervalValid(int halfSteps)
}
public Melanchall.DryWetMidi.MusicTheory.Note : object {
internal string SharpLongString
internal string SharpShortString
internal string FlatLongString
internal string FlatShortString
private Dictionary`2<SevenBitNumber, Note> _cache
private SevenBitNumber <NoteNumber>k__BackingField
public SevenBitNumber NoteNumber
public NoteName NoteName
public int Octave
private void .ctor(SevenBitNumber noteNumber)
public SevenBitNumber get_NoteNumber()
public NoteName get_NoteName()
public int get_Octave()
public Note Transpose(Interval interval)
public Note Get(SevenBitNumber noteNumber)
public Note Get(NoteName noteName, int octave)
public bool TryParse(string input, Note& note)
public Note Parse(string input)
public bool op_Equality(Note note1, Note note2)
public bool op_Inequality(Note note1, Note note2)
public Note op_Addition(Note note, int halfSteps)
public Note op_Subtraction(Note note, int halfSteps)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.MusicTheory.NoteName : Enum {
public int value__
public NoteName C
public NoteName CSharp
public NoteName D
public NoteName DSharp
public NoteName E
public NoteName F
public NoteName FSharp
public NoteName G
public NoteName GSharp
public NoteName A
public NoteName ASharp
public NoteName B
}
internal Melanchall.DryWetMidi.MusicTheory.NoteNameParser : object {
private string NoteLetterGroupName
private string AccidentalGroupName
private string NoteNameGroup
private string AccidentalGroup
private String[] Patterns
internal IEnumerable`1<string> GetPatterns()
internal ParsingResult TryParse(string input, NoteName& noteName)
}
internal Melanchall.DryWetMidi.MusicTheory.NoteParser : object {
private string NoteNameGroupName
private string OctaveGroupName
private string OctaveGroup
private String[] Patterns
private string OctaveIsOutOfRange
private string NoteIsOutOfRange
internal ParsingResult TryParse(string input, Note& note)
}
public Melanchall.DryWetMidi.MusicTheory.Notes : object {
public Note CMinus1
public Note CSharpMinus1
public Note DMinus1
public Note DSharpMinus1
public Note EMinus1
public Note FMinus1
public Note FSharpMinus1
public Note GMinus1
public Note GSharpMinus1
public Note AMinus1
public Note ASharpMinus1
public Note BMinus1
public Note C0
public Note CSharp0
public Note D0
public Note DSharp0
public Note E0
public Note F0
public Note FSharp0
public Note G0
public Note GSharp0
public Note A0
public Note ASharp0
public Note B0
public Note C1
public Note CSharp1
public Note D1
public Note DSharp1
public Note E1
public Note F1
public Note FSharp1
public Note G1
public Note GSharp1
public Note A1
public Note ASharp1
public Note B1
public Note C2
public Note CSharp2
public Note D2
public Note DSharp2
public Note E2
public Note F2
public Note FSharp2
public Note G2
public Note GSharp2
public Note A2
public Note ASharp2
public Note B2
public Note C3
public Note CSharp3
public Note D3
public Note DSharp3
public Note E3
public Note F3
public Note FSharp3
public Note G3
public Note GSharp3
public Note A3
public Note ASharp3
public Note B3
public Note C4
public Note CSharp4
public Note D4
public Note DSharp4
public Note E4
public Note F4
public Note FSharp4
public Note G4
public Note GSharp4
public Note A4
public Note ASharp4
public Note B4
public Note C5
public Note CSharp5
public Note D5
public Note DSharp5
public Note E5
public Note F5
public Note FSharp5
public Note G5
public Note GSharp5
public Note A5
public Note ASharp5
public Note B5
public Note C6
public Note CSharp6
public Note D6
public Note DSharp6
public Note E6
public Note F6
public Note FSharp6
public Note G6
public Note GSharp6
public Note A6
public Note ASharp6
public Note B6
public Note C7
public Note CSharp7
public Note D7
public Note DSharp7
public Note E7
public Note F7
public Note FSharp7
public Note G7
public Note GSharp7
public Note A7
public Note ASharp7
public Note B7
public Note C8
public Note CSharp8
public Note D8
public Note DSharp8
public Note E8
public Note F8
public Note FSharp8
public Note G8
public Note GSharp8
public Note A8
public Note ASharp8
public Note B8
public Note C9
public Note CSharp9
public Note D9
public Note DSharp9
public Note E9
public Note F9
public Note FSharp9
public Note G9
}
public Melanchall.DryWetMidi.MusicTheory.NoteUtilities : object {
private int OctaveOffset
public NoteName Transpose(NoteName noteName, Interval interval)
public NoteName GetNoteName(SevenBitNumber noteNumber)
public int GetNoteOctave(SevenBitNumber noteNumber)
public SevenBitNumber GetNoteNumber(NoteName noteName, int octave)
internal bool IsNoteValid(NoteName noteName, int octave)
internal bool IsNoteNumberValid(int noteNumber)
private int CalculateNoteNumber(NoteName noteName, int octave)
}
public Melanchall.DryWetMidi.MusicTheory.Octave : object {
private Dictionary`2<int, Octave> _cache
private Dictionary`2<NoteName, Note> _notes
public int OctaveSize
public int MinOctaveNumber
public int MaxOctaveNumber
public Octave Middle
private int <Number>k__BackingField
public int Number
public Note C
public Note CSharp
public Note D
public Note DSharp
public Note E
public Note F
public Note FSharp
public Note G
public Note GSharp
public Note A
public Note ASharp
public Note B
private void .ctor(int octave)
public int get_Number()
public Note get_C()
public Note get_CSharp()
public Note get_D()
public Note get_DSharp()
public Note get_E()
public Note get_F()
public Note get_FSharp()
public Note get_G()
public Note get_GSharp()
public Note get_A()
public Note get_ASharp()
public Note get_B()
public Note GetNote(NoteName noteName)
public Octave Get(int octaveNumber)
public bool op_Equality(Octave octave1, Octave octave2)
public bool op_Inequality(Octave octave1, Octave octave2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.MusicTheory.Scale : object {
private IEnumerable`1<Interval> <Intervals>k__BackingField
private NoteName <RootNote>k__BackingField
public IEnumerable`1<Interval> Intervals
public NoteName RootNote
public void .ctor(IEnumerable`1<Interval> intervals, NoteName rootNote)
public IEnumerable`1<Interval> get_Intervals()
public NoteName get_RootNote()
public bool TryParse(string input, Scale& scale)
public Scale Parse(string input)
public bool op_Equality(Scale scale1, Scale scale2)
public bool op_Inequality(Scale scale1, Scale scale2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.MusicTheory.ScaleDegree : Enum {
public int value__
public ScaleDegree Tonic
public ScaleDegree Supertonic
public ScaleDegree Mediant
public ScaleDegree Subdominant
public ScaleDegree Dominant
public ScaleDegree Submediant
public ScaleDegree LeadingTone
}
public Melanchall.DryWetMidi.MusicTheory.ScaleIntervals : object {
public IEnumerable`1<Interval> Aeolian
public IEnumerable`1<Interval> Altered
public IEnumerable`1<Interval> Arabian
public IEnumerable`1<Interval> Augmented
public IEnumerable`1<Interval> AugmentedHeptatonic
public IEnumerable`1<Interval> Balinese
public IEnumerable`1<Interval> Bebop
public IEnumerable`1<Interval> BebopDominant
public IEnumerable`1<Interval> BebopLocrian
public IEnumerable`1<Interval> BebopMajor
public IEnumerable`1<Interval> BebopMinor
public IEnumerable`1<Interval> Blues
public IEnumerable`1<Interval> Chinese
public IEnumerable`1<Interval> Chromatic
public IEnumerable`1<Interval> CompositeBlues
public IEnumerable`1<Interval> Diminished
public IEnumerable`1<Interval> DiminishedWholeTone
public IEnumerable`1<Interval> Dominant
public IEnumerable`1<Interval> Dorian
public IEnumerable`1<Interval> Dorian4
public IEnumerable`1<Interval> DorianB2
public IEnumerable`1<Interval> DoubleHarmonicLydian
public IEnumerable`1<Interval> DoubleHarmonicMajor
public IEnumerable`1<Interval> Egyptian
public IEnumerable`1<Interval> Enigmatic
public IEnumerable`1<Interval> Flamenco
public IEnumerable`1<Interval> FlatSixPentatonic
public IEnumerable`1<Interval> FlatThreePentatonic
public IEnumerable`1<Interval> Gypsy
public IEnumerable`1<Interval> HarmonicMajor
public IEnumerable`1<Interval> HarmonicMinor
public IEnumerable`1<Interval> Hindu
public IEnumerable`1<Interval> Hirajoshi
public IEnumerable`1<Interval> HungarianMajor
public IEnumerable`1<Interval> HungarianMinor
public IEnumerable`1<Interval> Ichikosucho
public IEnumerable`1<Interval> InSen
public IEnumerable`1<Interval> Indian
public IEnumerable`1<Interval> Ionian
public IEnumerable`1<Interval> IonianAugmented
public IEnumerable`1<Interval> IonianPentatonic
public IEnumerable`1<Interval> Iwato
public IEnumerable`1<Interval> KafiRaga
public IEnumerable`1<Interval> Kumoi
public IEnumerable`1<Interval> Kumoijoshi
public IEnumerable`1<Interval> LeadingWholeTone
public IEnumerable`1<Interval> Locrian
public IEnumerable`1<Interval> Locrian2
public IEnumerable`1<Interval> LocrianMajor
public IEnumerable`1<Interval> LocrianPentatonic
public IEnumerable`1<Interval> Lydian
public IEnumerable`1<Interval> Lydian5PPentatonic
public IEnumerable`1<Interval> Lydian9
public IEnumerable`1<Interval> LydianAugmented
public IEnumerable`1<Interval> LydianB7
public IEnumerable`1<Interval> LydianDiminished
public IEnumerable`1<Interval> LydianDominant
public IEnumerable`1<Interval> LydianDominantPentatonic
public IEnumerable`1<Interval> LydianMinor
public IEnumerable`1<Interval> LydianPentatonic
public IEnumerable`1<Interval> Major
public IEnumerable`1<Interval> MajorBlues
public IEnumerable`1<Interval> MajorFlatTwoPentatonic
public IEnumerable`1<Interval> MajorPentatonic
public IEnumerable`1<Interval> MalkosRaga
public IEnumerable`1<Interval> MelodicMinor
public IEnumerable`1<Interval> MelodicMinorFifthMode
public IEnumerable`1<Interval> MelodicMinorSecondMode
public IEnumerable`1<Interval> Minor
public IEnumerable`1<Interval> Minor7MPentatonic
public IEnumerable`1<Interval> MinorBebop
public IEnumerable`1<Interval> MinorBlues
public IEnumerable`1<Interval> MinorHexatonic
public IEnumerable`1<Interval> MinorPentatonic
public IEnumerable`1<Interval> MinorSevenFlatFivePentatonic
public IEnumerable`1<Interval> MinorSixDiminished
public IEnumerable`1<Interval> MinorSixPentatonic
public IEnumerable`1<Interval> Mixolydian
public IEnumerable`1<Interval> MixolydianB6M
public IEnumerable`1<Interval> MixolydianPentatonic
public IEnumerable`1<Interval> Mystery1
public IEnumerable`1<Interval> Neopolitan
public IEnumerable`1<Interval> NeopolitanMajor
public IEnumerable`1<Interval> NeopolitanMajorPentatonic
public IEnumerable`1<Interval> NeopolitanMinor
public IEnumerable`1<Interval> Oriental
public IEnumerable`1<Interval> Pelog
public IEnumerable`1<Interval> Pentatonic
public IEnumerable`1<Interval> Persian
public IEnumerable`1<Interval> Phrygian
public IEnumerable`1<Interval> PhrygianMajor
public IEnumerable`1<Interval> Piongio
public IEnumerable`1<Interval> Pomeroy
public IEnumerable`1<Interval> Prometheus
public IEnumerable`1<Interval> PrometheusNeopolitan
public IEnumerable`1<Interval> PurviRaga
public IEnumerable`1<Interval> Ritusen
public IEnumerable`1<Interval> RomanianMinor
public IEnumerable`1<Interval> Scriabin
public IEnumerable`1<Interval> SixToneSymmetric
public IEnumerable`1<Interval> Spanish
public IEnumerable`1<Interval> SpanishHeptatonic
public IEnumerable`1<Interval> SuperLocrian
public IEnumerable`1<Interval> SuperLocrianPentatonic
public IEnumerable`1<Interval> TodiRaga
public IEnumerable`1<Interval> Vietnamese1
public IEnumerable`1<Interval> Vietnamese2
public IEnumerable`1<Interval> WholeTone
public IEnumerable`1<Interval> WholeTonePentatonic
public IEnumerable`1<Interval> GetByName(string name)
private IEnumerable`1<Interval> GetIntervals(Int32[] intervalsInHalfSteps)
}
internal Melanchall.DryWetMidi.MusicTheory.ScaleParser : object {
private string RootNoteNameGroupName
private string IntervalsMnemonicGroupName
private string IntervalGroupName
private string IntervalGroup
private string IntervalsMnemonicGroup
private String[] Patterns
private string ScaleIsUnknown
internal ParsingResult TryParse(string input, Scale& scale)
}
public Melanchall.DryWetMidi.MusicTheory.ScaleUtilities : object {
public NoteName GetDegree(Scale scale, ScaleDegree degree)
public NoteName GetStep(Scale scale, int step)
public IEnumerable`1<Note> GetNotes(Scale scale)
public IEnumerable`1<NoteName> GetNotesNames(Scale scale)
public IEnumerable`1<Note> GetAscendingNotes(Scale scale, Note rootNote)
public IEnumerable`1<Note> GetDescendingNotes(Scale scale, Note rootNote)
public bool IsNoteInScale(Scale scale, Note note)
public Note GetNextNote(Scale scale, Note note)
public Note GetPreviousNote(Scale scale, Note note)
private void ThrowIfDegreeIsOutOfRange(Scale scale, ScaleDegree degree)
}
public Melanchall.DryWetMidi.Standards.GeneralMidi : object {
public FourBitNumber PercussionChannel
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2Program : Enum {
public int value__
public GeneralMidi2Program AcousticGrandPiano
public GeneralMidi2Program AcousticGrandPianoWide
public GeneralMidi2Program AcousticGrandPianoDark
public GeneralMidi2Program BrightAcousticPiano
public GeneralMidi2Program BrightAcousticPianoWide
public GeneralMidi2Program ElectricGrandPiano
public GeneralMidi2Program ElectricGrandPianoWide
public GeneralMidi2Program HonkyTonkPiano
public GeneralMidi2Program HonkyTonkPianoWide
public GeneralMidi2Program ElectricPiano1
public GeneralMidi2Program DetunedElectricPiano1
public GeneralMidi2Program ElectricPiano1VelocityMix
public GeneralMidi2Program SixtiesElectricPiano
public GeneralMidi2Program ElectricPiano2
public GeneralMidi2Program DetunedElectricPiano2
public GeneralMidi2Program ElectricPiano2VelocityMix
public GeneralMidi2Program EpLegend
public GeneralMidi2Program EpPhase
public GeneralMidi2Program Harpsichord
public GeneralMidi2Program HarpsichordOctaveMix
public GeneralMidi2Program HarpsichordWide
public GeneralMidi2Program HarpsichordWithKeyOff
public GeneralMidi2Program Clavi
public GeneralMidi2Program PulseClavi
public GeneralMidi2Program Celesta
public GeneralMidi2Program Glockenspiel
public GeneralMidi2Program MusicBox
public GeneralMidi2Program Vibraphone
public GeneralMidi2Program VibraphoneWide
public GeneralMidi2Program Marimba
public GeneralMidi2Program MarimbaWide
public GeneralMidi2Program Xylophone
public GeneralMidi2Program TubularBells
public GeneralMidi2Program ChurchBell
public GeneralMidi2Program Carillon
public GeneralMidi2Program Dulcimer
public GeneralMidi2Program DrawbarOrgan
public GeneralMidi2Program DetunedDrawbarOrgan
public GeneralMidi2Program ItalianSixtiesOrgan
public GeneralMidi2Program DrawbarOrgan2
public GeneralMidi2Program PercussiveOrgan
public GeneralMidi2Program DetunedPercussiveOrgan
public GeneralMidi2Program PercussiveOrgan2
public GeneralMidi2Program RockOrgan
public GeneralMidi2Program ChurchOrgan
public GeneralMidi2Program ChurchOrganOctaveMix
public GeneralMidi2Program DetunedChurchOrgan
public GeneralMidi2Program ReedOrgan
public GeneralMidi2Program PuffOrgan
public GeneralMidi2Program Accordion
public GeneralMidi2Program Accordion2
public GeneralMidi2Program Harmonica
public GeneralMidi2Program TangoAccordion
public GeneralMidi2Program AcousticGuitarNylon
public GeneralMidi2Program Ukulele
public GeneralMidi2Program AcousticGuitarNylonKeyOff
public GeneralMidi2Program AcousticGuitarNylon2
public GeneralMidi2Program AcousticGuitarSteel
public GeneralMidi2Program TwelveStringsGuitar
public GeneralMidi2Program Mandolin
public GeneralMidi2Program SteelGuitarWithBodySound
public GeneralMidi2Program ElectricGuitarJazz
public GeneralMidi2Program ElectricGuitarPedalSteel
public GeneralMidi2Program ElectricGuitarClean
public GeneralMidi2Program ElectricGuitarDetunedClean
public GeneralMidi2Program MidToneGuitar
public GeneralMidi2Program ElectricGuitarMuted
public GeneralMidi2Program ElectricGuitarFunkyCutting
public GeneralMidi2Program ElectricGuitarMutedVeloSw
public GeneralMidi2Program JazzMan
public GeneralMidi2Program OverdrivenGuitar
public GeneralMidi2Program GuitarPinch
public GeneralMidi2Program DistortionGuitar
public GeneralMidi2Program DistortionGuitarWithFeedback
public GeneralMidi2Program DistortedRhythmGuitar
public GeneralMidi2Program GuitarHarmonics
public GeneralMidi2Program GuitarFeedback
public GeneralMidi2Program AcousticBass
public GeneralMidi2Program ElectricBassFinger
public GeneralMidi2Program FingerSlapBass
public GeneralMidi2Program ElectricBassPick
public GeneralMidi2Program FretlessBass
public GeneralMidi2Program SlapBass1
public GeneralMidi2Program SlapBass2
public GeneralMidi2Program SynthBass1
public GeneralMidi2Program SynthBassWarm
public GeneralMidi2Program SynthBass3Resonance
public GeneralMidi2Program ClaviBass
public GeneralMidi2Program Hammer
public GeneralMidi2Program SynthBass2
public GeneralMidi2Program SynthBass4Attack
public GeneralMidi2Program SynthBassRubber
public GeneralMidi2Program AttackPulse
public GeneralMidi2Program Violin
public GeneralMidi2Program ViolinSlowAttack
public GeneralMidi2Program Viola
public GeneralMidi2Program Cello
public GeneralMidi2Program Contrabass
public GeneralMidi2Program TremoloStrings
public GeneralMidi2Program PizzicatoStrings
public GeneralMidi2Program OrchestralHarp
public GeneralMidi2Program YangChin
public GeneralMidi2Program Timpani
public GeneralMidi2Program StringEnsembles1
public GeneralMidi2Program StringsAndBrass
public GeneralMidi2Program SixtiesStrings
public GeneralMidi2Program StringEnsembles2
public GeneralMidi2Program SynthStrings1
public GeneralMidi2Program SynthStrings3
public GeneralMidi2Program SynthStrings2
public GeneralMidi2Program ChoirAahs
public GeneralMidi2Program ChoirAahs2
public GeneralMidi2Program VoiceOohs
public GeneralMidi2Program Humming
public GeneralMidi2Program SynthVoice
public GeneralMidi2Program AnalogVoice
public GeneralMidi2Program OrchestraHit
public GeneralMidi2Program BassHitPlus
public GeneralMidi2Program SixthHit
public GeneralMidi2Program EuroHit
public GeneralMidi2Program Trumpet
public GeneralMidi2Program DarkTrumpetSoft
public GeneralMidi2Program Trombone
public GeneralMidi2Program Trombone2
public GeneralMidi2Program BrightTrombone
public GeneralMidi2Program Tuba
public GeneralMidi2Program MutedTrumpet
public GeneralMidi2Program MutedTrumpet2
public GeneralMidi2Program FrenchHorn
public GeneralMidi2Program FrenchHorn2Warm
public GeneralMidi2Program BrassSection
public GeneralMidi2Program BrassSection2OctaveMix
public GeneralMidi2Program SynthBrass1
public GeneralMidi2Program SynthBrass3
public GeneralMidi2Program AnalogSynthBrass1
public GeneralMidi2Program JumpBrass
public GeneralMidi2Program SynthBrass2
public GeneralMidi2Program SynthBrass4
public GeneralMidi2Program AnalogSynthBrass2
public GeneralMidi2Program SopranoSax
public GeneralMidi2Program AltoSax
public GeneralMidi2Program TenorSax
public GeneralMidi2Program BaritoneSax
public GeneralMidi2Program Oboe
public GeneralMidi2Program EnglishHorn
public GeneralMidi2Program Bassoon
public GeneralMidi2Program Clarinet
public GeneralMidi2Program Piccolo
public GeneralMidi2Program Flute
public GeneralMidi2Program Recorder
public GeneralMidi2Program PanFlute
public GeneralMidi2Program BlownBottle
public GeneralMidi2Program Shakuhachi
public GeneralMidi2Program Whistle
public GeneralMidi2Program Ocarina
public GeneralMidi2Program Lead1Square
public GeneralMidi2Program Lead1ASquare2
public GeneralMidi2Program Lead1BSine
public GeneralMidi2Program Lead2Sawtooth
public GeneralMidi2Program Lead2ASawtooth2
public GeneralMidi2Program Lead2BSawPulse
public GeneralMidi2Program Lead2CDoubleSawtooth
public GeneralMidi2Program Lead2DSequencedAnalog
public GeneralMidi2Program Lead3Calliope
public GeneralMidi2Program Lead4Chiff
public GeneralMidi2Program Lead5Charang
public GeneralMidi2Program Lead5AWireLead
public GeneralMidi2Program Lead6Voice
public GeneralMidi2Program Lead7Fifths
public GeneralMidi2Program Lead8BassLead
public GeneralMidi2Program Lead8ASoftWrl
public GeneralMidi2Program Pad1NewAge
public GeneralMidi2Program Pad2Warm
public GeneralMidi2Program Pad2ASinePad
public GeneralMidi2Program Pad3Polysynth
public GeneralMidi2Program Pad4Choir
public GeneralMidi2Program Pad4AItopia
public GeneralMidi2Program Pad5Bowed
public GeneralMidi2Program Pad6Metallic
public GeneralMidi2Program Pad7Halo
public GeneralMidi2Program Pad8Sweep
public GeneralMidi2Program Fx1Rain
public GeneralMidi2Program Fx2Soundtrack
public GeneralMidi2Program Fx3Crystal
public GeneralMidi2Program Fx3ASynthMallet
public GeneralMidi2Program Fx4Atmosphere
public GeneralMidi2Program Fx5Brightness
public GeneralMidi2Program Fx6Goblins
public GeneralMidi2Program Fx7Echoes
public GeneralMidi2Program Fx7AEchoBell
public GeneralMidi2Program Fx7BEchoPan
public GeneralMidi2Program Fx8SciFi
public GeneralMidi2Program Sitar
public GeneralMidi2Program Sitar2Bend
public GeneralMidi2Program Banjo
public GeneralMidi2Program Shamisen
public GeneralMidi2Program Koto
public GeneralMidi2Program TaishoKoto
public GeneralMidi2Program Kalimba
public GeneralMidi2Program BagPipe
public GeneralMidi2Program Fiddle
public GeneralMidi2Program Shanai
public GeneralMidi2Program TinkleBell
public GeneralMidi2Program Agogo
public GeneralMidi2Program SteelDrums
public GeneralMidi2Program Woodblock
public GeneralMidi2Program Castanets
public GeneralMidi2Program TaikoDrum
public GeneralMidi2Program ConcertBassDrum
public GeneralMidi2Program MelodicTom
public GeneralMidi2Program MelodicTom2Power
public GeneralMidi2Program SynthDrum
public GeneralMidi2Program RhythmBoxTom
public GeneralMidi2Program ElectricDrum
public GeneralMidi2Program ReverseCymbal
public GeneralMidi2Program GuitarFretNoise
public GeneralMidi2Program GuitarCuttingNoise
public GeneralMidi2Program AcousticBassStringSlap
public GeneralMidi2Program BreathNoise
public GeneralMidi2Program FluteKeyClick
public GeneralMidi2Program Seashore
public GeneralMidi2Program Rain
public GeneralMidi2Program Thunder
public GeneralMidi2Program Wind
public GeneralMidi2Program Stream
public GeneralMidi2Program Bubble
public GeneralMidi2Program BirdTweet
public GeneralMidi2Program Dog
public GeneralMidi2Program HorseGallop
public GeneralMidi2Program BirdTweet2
public GeneralMidi2Program TelephoneRing
public GeneralMidi2Program TelephoneRing2
public GeneralMidi2Program DoorCreaking
public GeneralMidi2Program Door
public GeneralMidi2Program Scratch
public GeneralMidi2Program WindChime
public GeneralMidi2Program Helicopter
public GeneralMidi2Program CarEngine
public GeneralMidi2Program CarStop
public GeneralMidi2Program CarPass
public GeneralMidi2Program CarCrash
public GeneralMidi2Program Siren
public GeneralMidi2Program Train
public GeneralMidi2Program Jetplane
public GeneralMidi2Program Starship
public GeneralMidi2Program BurstNoise
public GeneralMidi2Program Applause
public GeneralMidi2Program Laughing
public GeneralMidi2Program Screaming
public GeneralMidi2Program Punch
public GeneralMidi2Program HeartBeat
public GeneralMidi2Program Footsteps
public GeneralMidi2Program Gunshot
public GeneralMidi2Program MachineGun
public GeneralMidi2Program Lasergun
public GeneralMidi2Program Explosion
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2Utilities : object {
private byte MelodyChannelBankMsb
private Dictionary`2<GeneralMidi2Program, GeneralMidi2ProgramData> ProgramsData
public IEnumerable`1<MidiEvent> GetProgramEvents(GeneralMidi2Program program, FourBitNumber channel)
private IEnumerable`1<GeneralMidi2ProgramData> GetProgramsData(GeneralMidiProgram generalMidiProgram, GeneralMidi2Program[] programs)
private GeneralMidi2ProgramData GetProgramData(GeneralMidi2Program generalMidi2Program, GeneralMidiProgram generalMidiProgram, byte bankMsb, byte bankLsb)
}
public Melanchall.DryWetMidi.Standards.GeneralMidiPercussion : Enum {
public byte value__
public GeneralMidiPercussion AcousticBassDrum
public GeneralMidiPercussion BassDrum1
public GeneralMidiPercussion SideStick
public GeneralMidiPercussion AcousticSnare
public GeneralMidiPercussion HandClap
public GeneralMidiPercussion ElectricSnare
public GeneralMidiPercussion LowFloorTom
public GeneralMidiPercussion ClosedHiHat
public GeneralMidiPercussion HighFloorTom
public GeneralMidiPercussion PedalHiHat
public GeneralMidiPercussion LowTom
public GeneralMidiPercussion OpenHiHat
public GeneralMidiPercussion LowMidTom
public GeneralMidiPercussion HiMidTom
public GeneralMidiPercussion CrashCymbal1
public GeneralMidiPercussion HighTom
public GeneralMidiPercussion RideCymbal1
public GeneralMidiPercussion ChineseCymbal
public GeneralMidiPercussion RideBell
public GeneralMidiPercussion Tambourine
public GeneralMidiPercussion SplashCymbal
public GeneralMidiPercussion Cowbell
public GeneralMidiPercussion CrashCymbal2
public GeneralMidiPercussion Vibraslap
public GeneralMidiPercussion RideCymbal2
public GeneralMidiPercussion HiBongo
public GeneralMidiPercussion LowBongo
public GeneralMidiPercussion MuteHiConga
public GeneralMidiPercussion OpenHiConga
public GeneralMidiPercussion LowConga
public GeneralMidiPercussion HighTimbale
public GeneralMidiPercussion LowTimbale
public GeneralMidiPercussion HighAgogo
public GeneralMidiPercussion LowAgogo
public GeneralMidiPercussion Cabasa
public GeneralMidiPercussion Maracas
public GeneralMidiPercussion ShortWhistle
public GeneralMidiPercussion LongWhistle
public GeneralMidiPercussion ShortGuiro
public GeneralMidiPercussion LongGuiro
public GeneralMidiPercussion Claves
public GeneralMidiPercussion HiWoodBlock
public GeneralMidiPercussion LowWoodBlock
public GeneralMidiPercussion MuteCuica
public GeneralMidiPercussion OpenCuica
public GeneralMidiPercussion MuteTriangle
public GeneralMidiPercussion OpenTriangle
}
public Melanchall.DryWetMidi.Standards.GeneralMidiProgram : Enum {
public byte value__
public GeneralMidiProgram AcousticGrandPiano
public GeneralMidiProgram BrightAcousticPiano
public GeneralMidiProgram ElectricGrandPiano
public GeneralMidiProgram HonkyTonkPiano
public GeneralMidiProgram ElectricPiano1
public GeneralMidiProgram ElectricPiano2
public GeneralMidiProgram Harpsichord
public GeneralMidiProgram Clavi
public GeneralMidiProgram Celesta
public GeneralMidiProgram Glockenspiel
public GeneralMidiProgram MusicBox
public GeneralMidiProgram Vibraphone
public GeneralMidiProgram Marimba
public GeneralMidiProgram Xylophone
public GeneralMidiProgram TubularBells
public GeneralMidiProgram Dulcimer
public GeneralMidiProgram DrawbarOrgan
public GeneralMidiProgram PercussiveOrgan
public GeneralMidiProgram RockOrgan
public GeneralMidiProgram ChurchOrgan
public GeneralMidiProgram ReedOrgan
public GeneralMidiProgram Accordion
public GeneralMidiProgram Harmonica
public GeneralMidiProgram TangoAccordion
public GeneralMidiProgram AcousticGuitar1
public GeneralMidiProgram AcousticGuitar2
public GeneralMidiProgram ElectricGuitar1
public GeneralMidiProgram ElectricGuitar2
public GeneralMidiProgram ElectricGuitar3
public GeneralMidiProgram OverdrivenGuitar
public GeneralMidiProgram DistortionGuitar
public GeneralMidiProgram GuitarHarmonics
public GeneralMidiProgram AcousticBass
public GeneralMidiProgram ElectricBass1
public GeneralMidiProgram ElectricBass2
public GeneralMidiProgram FretlessBass
public GeneralMidiProgram SlapBass1
public GeneralMidiProgram SlapBass2
public GeneralMidiProgram SynthBass1
public GeneralMidiProgram SynthBass2
public GeneralMidiProgram Violin
public GeneralMidiProgram Viola
public GeneralMidiProgram Cello
public GeneralMidiProgram Contrabass
public GeneralMidiProgram TremoloStrings
public GeneralMidiProgram PizzicatoStrings
public GeneralMidiProgram OrchestralHarp
public GeneralMidiProgram Timpani
public GeneralMidiProgram StringEnsemble1
public GeneralMidiProgram StringEnsemble2
public GeneralMidiProgram SynthStrings1
public GeneralMidiProgram SynthStrings2
public GeneralMidiProgram ChoirAahs
public GeneralMidiProgram VoiceOohs
public GeneralMidiProgram SynthVoice
public GeneralMidiProgram OrchestraHit
public GeneralMidiProgram Trumpet
public GeneralMidiProgram Trombone
public GeneralMidiProgram Tuba
public GeneralMidiProgram MutedTrumpet
public GeneralMidiProgram FrenchHorn
public GeneralMidiProgram BrassSection
public GeneralMidiProgram SynthBrass1
public GeneralMidiProgram SynthBrass2
public GeneralMidiProgram SopranoSax
public GeneralMidiProgram AltoSax
public GeneralMidiProgram TenorSax
public GeneralMidiProgram BaritoneSax
public GeneralMidiProgram Oboe
public GeneralMidiProgram EnglishHorn
public GeneralMidiProgram Bassoon
public GeneralMidiProgram Clarinet
public GeneralMidiProgram Piccolo
public GeneralMidiProgram Flute
public GeneralMidiProgram Recorder
public GeneralMidiProgram PanFlute
public GeneralMidiProgram BlownBottle
public GeneralMidiProgram Shakuhachi
public GeneralMidiProgram Whistle
public GeneralMidiProgram Ocarina
public GeneralMidiProgram Lead1
public GeneralMidiProgram Lead2
public GeneralMidiProgram Lead3
public GeneralMidiProgram Lead4
public GeneralMidiProgram Lead5
public GeneralMidiProgram Lead6
public GeneralMidiProgram Lead7
public GeneralMidiProgram Lead8
public GeneralMidiProgram Pad1
public GeneralMidiProgram Pad2
public GeneralMidiProgram Pad3
public GeneralMidiProgram Pad4
public GeneralMidiProgram Pad5
public GeneralMidiProgram Pad6
public GeneralMidiProgram Pad7
public GeneralMidiProgram Pad8
public GeneralMidiProgram Fx1
public GeneralMidiProgram Fx2
public GeneralMidiProgram Fx3
public GeneralMidiProgram Fx4
public GeneralMidiProgram Fx5
public GeneralMidiProgram Fx6
public GeneralMidiProgram Fx7
public GeneralMidiProgram Fx8
public GeneralMidiProgram Sitar
public GeneralMidiProgram Banjo
public GeneralMidiProgram Shamisen
public GeneralMidiProgram Koto
public GeneralMidiProgram Kalimba
public GeneralMidiProgram BagPipe
public GeneralMidiProgram Fiddle
public GeneralMidiProgram Shanai
public GeneralMidiProgram TinkleBell
public GeneralMidiProgram Agogo
public GeneralMidiProgram SteelDrums
public GeneralMidiProgram Woodblock
public GeneralMidiProgram TaikoDrum
public GeneralMidiProgram MelodicTom
public GeneralMidiProgram SynthDrum
public GeneralMidiProgram ReverseCymbal
public GeneralMidiProgram GuitarFretNoise
public GeneralMidiProgram BreathNoise
public GeneralMidiProgram Seashore
public GeneralMidiProgram BirdTweet
public GeneralMidiProgram TelephoneRing
public GeneralMidiProgram Helicopter
public GeneralMidiProgram Applause
public GeneralMidiProgram Gunshot
}
public Melanchall.DryWetMidi.Standards.GeneralMidiUtilities : object {
public SevenBitNumber AsSevenBitNumber(GeneralMidiProgram program)
public SevenBitNumber AsSevenBitNumber(GeneralMidiPercussion percussion)
public MidiEvent GetProgramEvent(GeneralMidiProgram program, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralMidiPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidiPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
}
internal Melanchall.DryWetMidi.Tools.AverageVelocityMerger : VelocityMerger {
private List`1<SevenBitNumber> _velocities
public SevenBitNumber Velocity
public SevenBitNumber get_Velocity()
public void Initialize(SevenBitNumber velocity)
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities : object {
public void QuantizeChords(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, long notesTolerance, ChordsQuantizingSettings settings)
public void QuantizeChords(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, long notesTolerance, ChordsQuantizingSettings settings)
public void QuantizeChords(MidiFile midiFile, IGrid grid, long notesTolerance, ChordsQuantizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities : object {
public void RandomizeChords(TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, long notesTolerance, ChordsRandomizingSettings settings)
public void RandomizeChords(IEnumerable`1<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, long notesTolerance, ChordsRandomizingSettings settings)
public void RandomizeChords(MidiFile midiFile, IBounds bounds, long notesTolerance, ChordsRandomizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.ChordsSplitter : LengthedObjectsSplitter`1<Chord> {
protected Chord CloneObject(Chord obj)
protected SplittedLengthedObject`1<Chord> SplitObject(Chord obj, long time)
}
public Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities : object {
public void SplitChordsByStep(TrackChunk trackChunk, ITimeSpan step, TempoMap tempoMap, long notesTolerance)
public void SplitChordsByStep(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan step, TempoMap tempoMap, long notesTolerance)
public void SplitChordsByStep(MidiFile midiFile, ITimeSpan step, long notesTolerance)
public void SplitChordsByPartsNumber(TrackChunk trackChunk, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, long notesTolerance)
public void SplitChordsByPartsNumber(IEnumerable`1<TrackChunk> trackChunks, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, long notesTolerance)
public void SplitChordsByPartsNumber(MidiFile midiFile, int partsNumber, TimeSpanType lengthType, long notesTolerance)
public void SplitChordsByGrid(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, long notesTolerance)
public void SplitChordsByGrid(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, long notesTolerance)
public void SplitChordsByGrid(MidiFile midiFile, IGrid grid, long notesTolerance)
public void SplitChordsAtDistance(TrackChunk trackChunk, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, long notesTolerance)
public void SplitChordsAtDistance(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, long notesTolerance)
public void SplitChordsAtDistance(MidiFile midiFile, ITimeSpan distance, LengthedObjectTarget from, long notesTolerance)
public void SplitChordsAtDistance(TrackChunk trackChunk, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, long notesTolerance)
public void SplitChordsAtDistance(IEnumerable`1<TrackChunk> trackChunks, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, long notesTolerance)
public void SplitChordsAtDistance(MidiFile midiFile, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, long notesTolerance)
private void SplitTrackChunkChords(TrackChunk trackChunk, Func`3<ChordsSplitter, IEnumerable`1<Chord>, IEnumerable`1<Chord>> splitOperation, long notesTolerance)
}
public Melanchall.DryWetMidi.Tools.ConstantBounds : object {
private ITimeSpan <LeftSize>k__BackingField
private ITimeSpan <RightSize>k__BackingField
public ITimeSpan LeftSize
public ITimeSpan RightSize
public void .ctor(ITimeSpan size)
public void .ctor(ITimeSpan leftSize, ITimeSpan rightSize)
public ITimeSpan get_LeftSize()
public ITimeSpan get_RightSize()
private long CalculateBoundaryTime(long time, ITimeSpan size, MathOperation operation, TempoMap tempoMap)
public Tuple`2<long, long> GetBounds(long time, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Tools.CsvConverter : object {
public void ConvertMidiFileToCsv(MidiFile midiFile, string filePath, bool overwriteFile, MidiFileCsvConversionSettings settings)
public void ConvertMidiFileToCsv(MidiFile midiFile, Stream stream, MidiFileCsvConversionSettings settings)
public MidiFile ConvertCsvToMidiFile(string filePath, MidiFileCsvConversionSettings settings)
public MidiFile ConvertCsvToMidiFile(Stream stream, MidiFileCsvConversionSettings settings)
public void ConvertNotesToCsv(IEnumerable`1<Note> notes, string filePath, TempoMap tempoMap, bool overwriteFile, NoteCsvConversionSettings settings)
public void ConvertNotesToCsv(IEnumerable`1<Note> notes, Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings)
public IEnumerable`1<Note> ConvertCsvToNotes(string filePath, TempoMap tempoMap, NoteCsvConversionSettings settings)
public IEnumerable`1<Note> ConvertCsvToNotes(Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings)
}
internal Melanchall.DryWetMidi.Tools.CsvError : object {
public void ThrowBadFormat(int lineNumber, string message, Exception innerException)
public void ThrowBadFormat(string message, Exception innerException)
}
internal Melanchall.DryWetMidi.Tools.CsvReader : object {
private char Quote
private StreamReader _streamReader
private char _delimiter
private bool _disposed
private int _currentLineNumber
public void .ctor(Stream stream, char delimiter)
public CsvRecord ReadRecord()
private string GetNextLine()
private IEnumerable`1<string> SplitValues(string input, char delimiter)
private bool IsValueClosed(string value)
private void Dispose(bool disposing)
public void Dispose()
}
internal Melanchall.DryWetMidi.Tools.CsvRecord : object {
private int <LineNumber>k__BackingField
private int <LinesCount>k__BackingField
private String[] <Values>k__BackingField
public int LineNumber
public int LinesCount
public String[] Values
public void .ctor(int lineNumber, int linesCount, String[] values)
public int get_LineNumber()
public int get_LinesCount()
public String[] get_Values()
}
internal Melanchall.DryWetMidi.Tools.CsvToMidiFileConverter : object {
private Dictionary`2<string, RecordType> RecordTypes_DryWetMidi
private Dictionary`2<string, RecordType> RecordTypes_MidiCsv
public MidiFile ConvertToMidiFile(Stream stream, MidiFileCsvConversionSettings settings)
private void AddTimedEvents(Dictionary`2<int, List`1<TimedMidiEvent>> eventsMap, int trackChunkNumber, TimedMidiEvent[] events)
private TempoMap GetTempoMap(IEnumerable`1<TimedMidiEvent> timedMidiEvents, TimeDivision timeDivision)
private Nullable`1<RecordType> GetRecordType(string recordType, MidiFileCsvConversionSettings settings)
private HeaderChunk ParseHeader(Record record, MidiFileCsvConversionSettings settings)
private MidiEvent ParseEvent(Record record, MidiFileCsvConversionSettings settings)
private TimedMidiEvent[] ParseNote(Record record, MidiFileCsvConversionSettings settings)
private Record ReadRecord(CsvReader csvReader, MidiFileCsvConversionSettings settings)
}
internal Melanchall.DryWetMidi.Tools.CsvToNotesConverter : object {
public IEnumerable`1<Note> ConvertToNotes(Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings)
public bool TryParseNoteNumber(string input, NoteNumberFormat noteNumberFormat, SevenBitNumber& result)
}
internal Melanchall.DryWetMidi.Tools.CsvUtilities : object {
private char Quote
private string QuoteString
private string DoubleQuote
public string EscapeString(string input)
public string UnescapeString(string input)
}
internal Melanchall.DryWetMidi.Tools.CsvWriter : object {
private StreamWriter _streamWriter
private char _delimiter
private bool _disposed
public void .ctor(Stream stream, char delimiter)
public void WriteRecord(IEnumerable`1<object> values)
private void Dispose(bool disposing)
public void Dispose()
}
internal Melanchall.DryWetMidi.Tools.DryWetMidiRecordTypes : object {
public string Note
}
internal Melanchall.DryWetMidi.Tools.EventNameGetter : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public string Invoke(MidiEvent midiEvent)
public IAsyncResult BeginInvoke(MidiEvent midiEvent, AsyncCallback callback, object object)
public string EndInvoke(IAsyncResult result)
}
internal Melanchall.DryWetMidi.Tools.EventNameGetterProvider : object {
private Dictionary`2<Type, EventNameGetter> EventsTypes_MidiCsv
private Dictionary`2<Type, EventNameGetter> EventsTypes_DryWetMidi
public EventNameGetter Get(Type eventType, MidiFileCsvLayout layout)
private EventNameGetter GetType(string type)
private EventNameGetter GetSysExType(string completedType, string incompletedType)
}
internal Melanchall.DryWetMidi.Tools.EventParametersGetter : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Object[] Invoke(MidiEvent midiEvent, MidiFileCsvConversionSettings settings)
public IAsyncResult BeginInvoke(MidiEvent midiEvent, MidiFileCsvConversionSettings settings, AsyncCallback callback, object object)
public Object[] EndInvoke(IAsyncResult result)
}
internal Melanchall.DryWetMidi.Tools.EventParametersGetterProvider : object {
private Dictionary`2<Type, EventParametersGetter> EventsParametersGetters
public EventParametersGetter Get(Type eventType)
private EventParametersGetter GetParameters(Func`3[] parametersGetters)
private object FormatNoteNumber(SevenBitNumber noteNumber, MidiFileCsvConversionSettings settings)
}
internal Melanchall.DryWetMidi.Tools.EventParser : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public MidiEvent Invoke(String[] parameters, MidiFileCsvConversionSettings settings)
public IAsyncResult BeginInvoke(String[] parameters, MidiFileCsvConversionSettings settings, AsyncCallback callback, object object)
public MidiEvent EndInvoke(IAsyncResult result)
}
internal Melanchall.DryWetMidi.Tools.EventParserProvider : object {
private Dictionary`2<string, EventParser> EventsParsers_MidiCsv
private Dictionary`2<string, EventParser> EventsParsers_DryWetMidi
public EventParser Get(string eventName, MidiFileCsvLayout layout)
private EventParser GetBytesBasedEventParser(Func`2<Object[], MidiEvent> eventCreator, ParameterParser[] parametersParsers)
private EventParser GetTextEventParser()
private EventParser GetNoteEventParser(int parametersNumber)
private EventParser GetChannelEventParser(int parametersNumber)
private EventParser GetChannelEventParser(ParameterParser[] parametersParsers)
private EventParser GetEventParser(Func`2<Object[], MidiEvent> eventCreator, ParameterParser[] parametersParsers)
}
internal Melanchall.DryWetMidi.Tools.EventsNamesProvider : object {
private Dictionary`2<MidiFileCsvLayout, String[]> EventsNames
public String[] Get(MidiFileCsvLayout layout)
private String[] GetEventsNames(Type eventNamesClassType)
}
internal Melanchall.DryWetMidi.Tools.FirstVelocityMerger : VelocityMerger {
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.IBounds {
public Tuple`2<long, long> GetBounds(long time, TempoMap tempoMap)
}
internal Melanchall.DryWetMidi.Tools.LastVelocityMerger : VelocityMerger {
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizer`2 : Quantizer`2<TObject, TSettings> {
public void Quantize(IEnumerable`1<TObject> objects, IGrid grid, TempoMap tempoMap, TSettings settings)
private TimeProcessingInstruction CorrectObjectOnStartQuantizing(TObject obj, long time, TempoMap tempoMap, TSettings settings)
private TimeProcessingInstruction CorrectObjectOnEndQuantizing(TObject obj, long time, TempoMap tempoMap, TSettings settings)
private TimeProcessingInstruction ProcessQuantizingBeyondFixedEnd(Int64& newTime, Int64& oldTime, QuantizingBeyondFixedEndPolicy quantizingBeyondFixedEndPolicy, string errorMessage)
protected long GetObjectTime(TObject obj, TSettings settings)
protected void SetObjectTime(TObject obj, long time, TSettings settings)
protected TimeProcessingInstruction OnObjectQuantizing(TObject obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TSettings settings)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings`1 : QuantizingSettings`1<TObject> {
private TimeSpanType _lengthType
private LengthedObjectTarget _quantizingTarget
private QuantizingBeyondZeroPolicy _quantizingBeyondZeroPolicy
private QuantizingBeyondFixedEndPolicy _quantizingBeyondFixedEndPolicy
private bool <FixOppositeEnd>k__BackingField
public TimeSpanType LengthType
public LengthedObjectTarget QuantizingTarget
public QuantizingBeyondZeroPolicy QuantizingBeyondZeroPolicy
public QuantizingBeyondFixedEndPolicy QuantizingBeyondFixedEndPolicy
public bool FixOppositeEnd
public TimeSpanType get_LengthType()
public void set_LengthType(TimeSpanType value)
public LengthedObjectTarget get_QuantizingTarget()
public void set_QuantizingTarget(LengthedObjectTarget value)
public QuantizingBeyondZeroPolicy get_QuantizingBeyondZeroPolicy()
public void set_QuantizingBeyondZeroPolicy(QuantizingBeyondZeroPolicy value)
public QuantizingBeyondFixedEndPolicy get_QuantizingBeyondFixedEndPolicy()
public void set_QuantizingBeyondFixedEndPolicy(QuantizingBeyondFixedEndPolicy value)
public bool get_FixOppositeEnd()
public void set_FixOppositeEnd(bool value)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer`2 : Randomizer`2<TObject, TSettings> {
public void Randomize(IEnumerable`1<TObject> objects, IBounds bounds, TempoMap tempoMap, TSettings settings)
protected long GetObjectTime(TObject obj, TSettings settings)
protected void SetObjectTime(TObject obj, long time, TSettings settings)
protected TimeProcessingInstruction OnObjectRandomizing(TObject obj, long time, TSettings settings)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizingSettings`1 : RandomizingSettings`1<TObject> {
private LengthedObjectTarget _randomizingTarget
private bool <FixOppositeEnd>k__BackingField
public LengthedObjectTarget RandomizingTarget
public bool FixOppositeEnd
public LengthedObjectTarget get_RandomizingTarget()
public void set_RandomizingTarget(LengthedObjectTarget value)
public bool get_FixOppositeEnd()
public void set_FixOppositeEnd(bool value)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1 : object {
internal double ZeroRatio
internal double FullLengthRatio
public IEnumerable`1<TObject> SplitByStep(IEnumerable`1<TObject> objects, ITimeSpan step, TempoMap tempoMap)
public IEnumerable`1<TObject> SplitByPartsNumber(IEnumerable`1<TObject> objects, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap)
public IEnumerable`1<TObject> SplitByGrid(IEnumerable`1<TObject> objects, IGrid grid, TempoMap tempoMap)
public IEnumerable`1<TObject> SplitAtDistance(IEnumerable`1<TObject> objects, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap)
public IEnumerable`1<TObject> SplitAtDistance(IEnumerable`1<TObject> objects, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap)
protected TObject CloneObject(TObject obj)
protected SplittedLengthedObject`1<TObject> SplitObject(TObject obj, long time)
private SplittedLengthedObject`1<TObject> SplitObjectAtDistance(TObject obj, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectTarget : Enum {
public int value__
public LengthedObjectTarget Start
public LengthedObjectTarget End
}
internal Melanchall.DryWetMidi.Tools.LengthSetter : object {
private Dictionary`2<Type, Action`2<ILengthedObject, long>> LengthSetters
public void SetObjectLength(TObject obj, long time)
}
internal Melanchall.DryWetMidi.Tools.MaxVelocityMerger : VelocityMerger {
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings : object {
private char DefaultCsvDelimiter
private MidiFileCsvLayout _csvLayout
private TimeSpanType _timeType
private TimeSpanType _noteLengthType
private NoteFormat _noteFormat
private NoteNumberFormat _noteNumberFormat
private char <CsvDelimiter>k__BackingField
public MidiFileCsvLayout CsvLayout
public TimeSpanType TimeType
public char CsvDelimiter
public TimeSpanType NoteLengthType
public NoteFormat NoteFormat
public NoteNumberFormat NoteNumberFormat
public MidiFileCsvLayout get_CsvLayout()
public void set_CsvLayout(MidiFileCsvLayout value)
public TimeSpanType get_TimeType()
public void set_TimeType(TimeSpanType value)
public char get_CsvDelimiter()
public void set_CsvDelimiter(char value)
public TimeSpanType get_NoteLengthType()
public void set_NoteLengthType(TimeSpanType value)
public NoteFormat get_NoteFormat()
public void set_NoteFormat(NoteFormat value)
public NoteNumberFormat get_NoteNumberFormat()
public void set_NoteNumberFormat(NoteNumberFormat value)
}
public Melanchall.DryWetMidi.Tools.MidiFileCsvLayout : Enum {
public int value__
public MidiFileCsvLayout DryWetMidi
public MidiFileCsvLayout MidiCsv
}
internal Melanchall.DryWetMidi.Tools.MidiFileSlicer : object {
private Type[] EventsTypesToCopyToNextPart
private TimedEventsHolder[] _timedEventsHolders
private TimeDivision _timeDivision
private long _lastTime
private bool _disposed
public bool AllEventsProcessed
private void .ctor(TimeDivision timeDivision, IEnumerator`1[] timedEventsEnumerators)
public bool get_AllEventsProcessed()
public MidiFile GetNextSlice(long endTime, SliceMidiFileSettings settings)
private IEnumerable`1<IEnumerable`1<TimedEvent>> GetNextTimedEvents(long endTime, bool preserveTimes)
public MidiFileSlicer CreateFromFile(MidiFile midiFile)
private void TryToUpdateNotesInformation(MidiEvent midiEvent, List`1<NoteId> noteOnIds)
private void TryToMoveEdgeNoteOffsToPreviousPart(TimedEvent timedEvent, List`1<NoteId> noteOnIds, List`1<TimedEvent> takenTimedEvents, List`1<TimedEvent> eventsToStartNextPart)
private void MoveEventsToStart(List`1<TimedEvent> takenTimedEvents, int startIndex, long partStartTime)
private List`1<TimedEvent> PrepareTakenTimedEvents(Dictionary`2<Type, TimedEvent> eventsToCopyToNextPart, List`1<NoteId> noteOnIds, bool preserveTimes, List`1<TimedEvent> eventsToStartNextPart, Int32& newEventsStartIndex)
private void UpdateEventsToCopyToNextPart(Dictionary`2<Type, TimedEvent> eventsToCopyToNextPart, TimedEvent timedEvent)
private void Dispose(bool disposing)
public void Dispose()
}
public Melanchall.DryWetMidi.Tools.MidiFileSplitter : object {
public IEnumerable`1<MidiFile> SplitByChannel(MidiFile midiFile)
public IEnumerable`1<MidiFile> SplitByNotes(MidiFile midiFile)
public IEnumerable`1<MidiFile> SplitByGrid(MidiFile midiFile, IGrid grid, SliceMidiFileSettings settings)
public MidiFile SkipPart(MidiFile midiFile, ITimeSpan partLength, SliceMidiFileSettings settings)
public MidiFile TakePart(MidiFile midiFile, ITimeSpan partLength, SliceMidiFileSettings settings)
public MidiFile TakePart(MidiFile midiFile, ITimeSpan partStart, ITimeSpan partLength, SliceMidiFileSettings settings)
private MidiFile PrepareMidiFileForSlicing(MidiFile midiFile, IGrid grid, SliceMidiFileSettings settings)
}
internal Melanchall.DryWetMidi.Tools.MidiFileToCsvConverter : object {
public void ConvertToCsv(MidiFile midiFile, Stream stream, MidiFileCsvConversionSettings settings)
private void WriteNote(Note note, CsvWriter csvWriter, int trackNumber, long time, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteTimedEvent(TimedEvent timedEvent, CsvWriter csvWriter, int trackNumber, long time, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteHeader(CsvWriter csvWriter, MidiFile midiFile, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteTrackChunkStart(CsvWriter csvWriter, int trackNumber, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteTrackChunkEnd(CsvWriter csvWriter, int trackNumber, long time, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteFileEnd(CsvWriter csvWriter, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteRecord(CsvWriter csvWriter, Nullable`1<int> trackNumber, Nullable`1<long> time, string type, MidiFileCsvConversionSettings settings, TempoMap tempoMap, Object[] parameters)
private Object[] ProcessParameter(object parameter)
}
internal Melanchall.DryWetMidi.Tools.MinVelocityMerger : VelocityMerger {
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings : object {
private TimeSpanType _timeType
private TimeSpanType _noteLengthType
private NoteNumberFormat _noteNumberFormat
private char <CsvDelimiter>k__BackingField
public char CsvDelimiter
public TimeSpanType TimeType
public TimeSpanType NoteLengthType
public NoteNumberFormat NoteNumberFormat
public char get_CsvDelimiter()
public void set_CsvDelimiter(char value)
public TimeSpanType get_TimeType()
public void set_TimeType(TimeSpanType value)
public TimeSpanType get_NoteLengthType()
public void set_NoteLengthType(TimeSpanType value)
public NoteNumberFormat get_NoteNumberFormat()
public void set_NoteNumberFormat(NoteNumberFormat value)
}
internal Melanchall.DryWetMidi.Tools.NoteCsvConversionUtilities : object {
public object FormatNoteNumber(SevenBitNumber noteNumber, NoteNumberFormat noteNumberFormat)
}
public Melanchall.DryWetMidi.Tools.NoteFormat : Enum {
public int value__
public NoteFormat Note
public NoteFormat Events
}
public Melanchall.DryWetMidi.Tools.NoteNumberFormat : Enum {
public int value__
public NoteNumberFormat NoteNumber
public NoteNumberFormat Letter
}
public Melanchall.DryWetMidi.Tools.NotesMerger : object {
private Dictionary`2<VelocityMergingPolicy, Func`1<VelocityMerger>> VelocityMergers
public IEnumerable`1<Note> Merge(IEnumerable`1<Note> notes, TempoMap tempoMap, NotesMergingSettings settings)
private NoteHolder CreateNoteHolder(Note note, NotesMergingSettings settings)
}
public Melanchall.DryWetMidi.Tools.NotesMergerUtilities : object {
public void MergeNotes(TrackChunk trackChunk, TempoMap tempoMap, NotesMergingSettings settings, Predicate`1<Note> filter)
public void MergeNotes(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, NotesMergingSettings settings, Predicate`1<Note> filter)
public void MergeNotes(MidiFile midiFile, NotesMergingSettings settings, Predicate`1<Note> filter)
}
public Melanchall.DryWetMidi.Tools.NotesMergingSettings : object {
private VelocityMergingPolicy _velocityMergingPolicy
private VelocityMergingPolicy _offVelocityMergingPolicy
private ITimeSpan _tolerance
public VelocityMergingPolicy VelocityMergingPolicy
public VelocityMergingPolicy OffVelocityMergingPolicy
public ITimeSpan Tolerance
public VelocityMergingPolicy get_VelocityMergingPolicy()
public void set_VelocityMergingPolicy(VelocityMergingPolicy value)
public VelocityMergingPolicy get_OffVelocityMergingPolicy()
public void set_OffVelocityMergingPolicy(VelocityMergingPolicy value)
public ITimeSpan get_Tolerance()
public void set_Tolerance(ITimeSpan value)
}
public Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities : object {
public void QuantizeNotes(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, NotesQuantizingSettings settings)
public void QuantizeNotes(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, NotesQuantizingSettings settings)
public void QuantizeNotes(MidiFile midiFile, IGrid grid, NotesQuantizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities : object {
public void RandomizeNotes(TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, NotesRandomizingSettings settings)
public void RandomizeNotes(IEnumerable`1<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, NotesRandomizingSettings settings)
public void RandomizeNotes(MidiFile midiFile, IBounds bounds, NotesRandomizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.NotesSplitter : LengthedObjectsSplitter`1<Note> {
protected Note CloneObject(Note obj)
protected SplittedLengthedObject`1<Note> SplitObject(Note obj, long time)
}
public Melanchall.DryWetMidi.Tools.NotesSplitterUtilities : object {
public void SplitNotesByStep(TrackChunk trackChunk, ITimeSpan step, TempoMap tempoMap)
public void SplitNotesByStep(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan step, TempoMap tempoMap)
public void SplitNotesByStep(MidiFile midiFile, ITimeSpan step)
public void SplitNotesByPartsNumber(TrackChunk trackChunk, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap)
public void SplitNotesByPartsNumber(IEnumerable`1<TrackChunk> trackChunks, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap)
public void SplitNotesByPartsNumber(MidiFile midiFile, int partsNumber, TimeSpanType lengthType)
public void SplitNotesByGrid(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap)
public void SplitNotesByGrid(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap)
public void SplitNotesByGrid(MidiFile midiFile, IGrid grid)
public void SplitNotesAtDistance(TrackChunk trackChunk, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap)
public void SplitNotesAtDistance(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap)
public void SplitNotesAtDistance(MidiFile midiFile, ITimeSpan distance, LengthedObjectTarget from)
public void SplitNotesAtDistance(TrackChunk trackChunk, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap)
public void SplitNotesAtDistance(IEnumerable`1<TrackChunk> trackChunks, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap)
public void SplitNotesAtDistance(MidiFile midiFile, double ratio, TimeSpanType lengthType, LengthedObjectTarget from)
private void SplitTrackChunkNotes(TrackChunk trackChunk, Func`3<NotesSplitter, IEnumerable`1<Note>, IEnumerable`1<Note>> splitOperation)
}
internal Melanchall.DryWetMidi.Tools.NotesToCsvConverter : object {
public void ConvertToCsv(IEnumerable`1<Note> notes, Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings)
}
internal Melanchall.DryWetMidi.Tools.ParameterParser : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke(string parameter, MidiFileCsvConversionSettings settings)
public IAsyncResult BeginInvoke(string parameter, MidiFileCsvConversionSettings settings, AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Tools.QuantizedTime : object {
private long <NewTime>k__BackingField
private long <GridTime>k__BackingField
private ITimeSpan <Shift>k__BackingField
private long <DistanceToGridTime>k__BackingField
private ITimeSpan <ConvertedDistanceToGridTime>k__BackingField
public long NewTime
public long GridTime
public ITimeSpan Shift
public long DistanceToGridTime
public ITimeSpan ConvertedDistanceToGridTime
internal void .ctor(long newTime, long gridTime, ITimeSpan shift, long distanceToGridTime, ITimeSpan convertedDistanceToGridTime)
public long get_NewTime()
public long get_GridTime()
public ITimeSpan get_Shift()
public long get_DistanceToGridTime()
public ITimeSpan get_ConvertedDistanceToGridTime()
}
public Melanchall.DryWetMidi.Tools.Quantizer`2 : object {
protected void QuantizeInternal(IEnumerable`1<TObject> objects, IGrid grid, TempoMap tempoMap, TSettings settings)
protected long GetObjectTime(TObject obj, TSettings settings)
protected void SetObjectTime(TObject obj, long time, TSettings settings)
protected TimeProcessingInstruction OnObjectQuantizing(TObject obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TSettings settings)
private IEnumerable`1<long> GetGridTimes(IGrid grid, long lastTime, TempoMap tempoMap)
private QuantizedTime FindNearestTime(IReadOnlyList`1<long> grid, long time, TimeSpanType distanceCalculationType, double quantizingLevel, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy : Enum {
public int value__
public QuantizingBeyondFixedEndPolicy CollapseAndFix
public QuantizingBeyondFixedEndPolicy CollapseAndMove
public QuantizingBeyondFixedEndPolicy SwapEnds
public QuantizingBeyondFixedEndPolicy Skip
public QuantizingBeyondFixedEndPolicy Abort
}
public Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy : Enum {
public int value__
public QuantizingBeyondZeroPolicy FixAtZero
public QuantizingBeyondZeroPolicy Skip
public QuantizingBeyondZeroPolicy Abort
}
public Melanchall.DryWetMidi.Tools.QuantizingSettings`1 : object {
private double NoQuantizingLevel
private double FullQuantizingLevel
private TimeSpanType _distanceCalculationType
private double _quantizingLevel
private Predicate`1<TObject> <Filter>k__BackingField
public TimeSpanType DistanceCalculationType
public double QuantizingLevel
public Predicate`1<TObject> Filter
public TimeSpanType get_DistanceCalculationType()
public void set_DistanceCalculationType(TimeSpanType value)
public double get_QuantizingLevel()
public void set_QuantizingLevel(double value)
public Predicate`1<TObject> get_Filter()
public void set_Filter(Predicate`1<TObject> value)
}
public Melanchall.DryWetMidi.Tools.Randomizer`2 : object {
private Random _random
protected void RandomizeInternal(IEnumerable`1<TObject> objects, IBounds bounds, TempoMap tempoMap, TSettings settings)
protected long GetObjectTime(TObject obj, TSettings settings)
protected void SetObjectTime(TObject obj, long time, TSettings settings)
protected TimeProcessingInstruction OnObjectRandomizing(TObject obj, long time, TSettings settings)
private long RandomizeTime(long time, IBounds bounds, Random random, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Tools.RandomizingSettings`1 : object {
private Predicate`1<TObject> <Filter>k__BackingField
public Predicate`1<TObject> Filter
public Predicate`1<TObject> get_Filter()
public void set_Filter(Predicate`1<TObject> value)
}
internal Melanchall.DryWetMidi.Tools.Record : object {
private int <LineNumber>k__BackingField
private Nullable`1<int> <TrackNumber>k__BackingField
private ITimeSpan <Time>k__BackingField
private string <RecordType>k__BackingField
private String[] <Parameters>k__BackingField
public int LineNumber
public Nullable`1<int> TrackNumber
public ITimeSpan Time
public string RecordType
public String[] Parameters
public void .ctor(int lineNumber, Nullable`1<int> trackNumber, ITimeSpan time, string recordType, String[] parameters)
public int get_LineNumber()
public Nullable`1<int> get_TrackNumber()
public ITimeSpan get_Time()
public string get_RecordType()
public String[] get_Parameters()
}
internal Melanchall.DryWetMidi.Tools.RecordType : Enum {
public int value__
public RecordType Header
public RecordType TrackChunkStart
public RecordType TrackChunkEnd
public RecordType FileEnd
public RecordType Event
public RecordType Note
}
public Melanchall.DryWetMidi.Tools.SliceMidiFileSettings : object {
private bool <SplitNotes>k__BackingField
private bool <PreserveTimes>k__BackingField
private bool <PreserveTrackChunks>k__BackingField
public bool SplitNotes
public bool PreserveTimes
public bool PreserveTrackChunks
public bool get_SplitNotes()
public void set_SplitNotes(bool value)
public bool get_PreserveTimes()
public void set_PreserveTimes(bool value)
public bool get_PreserveTrackChunks()
public void set_PreserveTrackChunks(bool value)
}
public Melanchall.DryWetMidi.Tools.TimedEventsQuantizer : Quantizer`2<TimedEvent, TimedEventsQuantizingSettings> {
public void Quantize(IEnumerable`1<TimedEvent> objects, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings)
protected long GetObjectTime(TimedEvent obj, TimedEventsQuantizingSettings settings)
protected void SetObjectTime(TimedEvent obj, long time, TimedEventsQuantizingSettings settings)
protected TimeProcessingInstruction OnObjectQuantizing(TimedEvent obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities : object {
public void QuantizeTimedEvents(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings)
public void QuantizeTimedEvents(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings)
public void QuantizeTimedEvents(MidiFile midiFile, IGrid grid, TimedEventsQuantizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.TimedEventsRandomizer : Randomizer`2<TimedEvent, TimedEventsRandomizingSettings> {
public void Randomize(IEnumerable`1<TimedEvent> objects, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings)
protected long GetObjectTime(TimedEvent obj, TimedEventsRandomizingSettings settings)
protected void SetObjectTime(TimedEvent obj, long time, TimedEventsRandomizingSettings settings)
protected TimeProcessingInstruction OnObjectRandomizing(TimedEvent obj, long time, TimedEventsRandomizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities : object {
public void RandomizeTimedEvents(TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings)
public void RandomizeTimedEvents(IEnumerable`1<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings)
public void RandomizeTimedEvents(MidiFile midiFile, IBounds bounds, TimedEventsRandomizingSettings settings)
}
internal Melanchall.DryWetMidi.Tools.TimedMidiEvent : object {
private ITimeSpan <Time>k__BackingField
private MidiEvent <Event>k__BackingField
public ITimeSpan Time
public MidiEvent Event
public void .ctor(ITimeSpan time, MidiEvent midiEvent)
public ITimeSpan get_Time()
public MidiEvent get_Event()
}
public Melanchall.DryWetMidi.Tools.TimeProcessingAction : Enum {
public int value__
public TimeProcessingAction Apply
public TimeProcessingAction Skip
}
public Melanchall.DryWetMidi.Tools.TimeProcessingInstruction : object {
public TimeProcessingInstruction Skip
private long InvalidTime
private TimeProcessingAction <Action>k__BackingField
private long <Time>k__BackingField
public TimeProcessingAction Action
public long Time
public void .ctor(long time)
private void .ctor(TimeProcessingAction quantizingInstruction, long time)
public TimeProcessingAction get_Action()
public long get_Time()
}
internal Melanchall.DryWetMidi.Tools.TimeSetter : object {
private Dictionary`2<Type, Action`2<ITimedObject, long>> TimeSetters
public void SetObjectTime(TObject obj, long time)
}
internal Melanchall.DryWetMidi.Tools.TypeParser : object {
public ParameterParser Byte
public ParameterParser SByte
public ParameterParser Long
public ParameterParser UShort
public ParameterParser String
public ParameterParser Int
public ParameterParser FourBitNumber
public ParameterParser SevenBitNumber
public ParameterParser NoteNumber
}
internal Melanchall.DryWetMidi.Tools.VelocityMerger : object {
protected SevenBitNumber _velocity
public SevenBitNumber Velocity
public SevenBitNumber get_Velocity()
public void Initialize(SevenBitNumber velocity)
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.VelocityMergingPolicy : Enum {
public int value__
public VelocityMergingPolicy First
public VelocityMergingPolicy Last
public VelocityMergingPolicy Min
public VelocityMergingPolicy Max
public VelocityMergingPolicy Average
}
