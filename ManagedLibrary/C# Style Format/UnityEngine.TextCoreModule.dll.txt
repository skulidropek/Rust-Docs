internal UnityEngine.TextCore.Character : TextElement {
public void .ctor(UInt32 unicode, Glyph glyph)
}
internal UnityEngine.TextCore.ColorMode : Enum {
public int value__
public ColorMode Single
public ColorMode HorizontalGradient
public ColorMode VerticalGradient
public ColorMode FourCornersGradient
}
internal UnityEngine.TextCore.ColorUtilities : object {
internal bool CompareColors(Color32 a, Color32 b)
internal bool CompareColorsRgb(Color32 a, Color32 b)
internal bool CompareColors(Color a, Color b)
internal bool CompareColorsRgb(Color a, Color b)
internal Color32 MultiplyColors(Color32 c1, Color32 c2)
}
internal UnityEngine.TextCore.Extents : ValueType {
public Vector2 min
public Vector2 max
public void .ctor(Vector2 min, Vector2 max)
public string ToString()
}
public UnityEngine.TextCore.FaceInfo : ValueType {
private int m_FaceIndex
private string m_FamilyName
private string m_StyleName
private int m_PointSize
private float m_Scale
private float m_LineHeight
private float m_AscentLine
private float m_CapLine
private float m_MeanLine
private float m_Baseline
private float m_DescentLine
private float m_SuperscriptOffset
private float m_SuperscriptSize
private float m_SubscriptOffset
private float m_SubscriptSize
private float m_UnderlineOffset
private float m_UnderlineThickness
private float m_StrikethroughOffset
private float m_StrikethroughThickness
private float m_TabWidth
internal int faceIndex
public string familyName
public string styleName
public int pointSize
public float scale
public float lineHeight
public float ascentLine
public float capLine
public float meanLine
public float baseline
public float descentLine
public float superscriptOffset
public float superscriptSize
public float subscriptOffset
public float subscriptSize
public float underlineOffset
public float underlineThickness
public float strikethroughOffset
public float strikethroughThickness
public float tabWidth
internal int get_faceIndex()
internal void set_faceIndex(int value)
public string get_familyName()
public void set_familyName(string value)
public string get_styleName()
public void set_styleName(string value)
public int get_pointSize()
public void set_pointSize(int value)
public float get_scale()
public void set_scale(float value)
public float get_lineHeight()
public void set_lineHeight(float value)
public float get_ascentLine()
public void set_ascentLine(float value)
public float get_capLine()
public void set_capLine(float value)
public float get_meanLine()
public void set_meanLine(float value)
public float get_baseline()
public void set_baseline(float value)
public float get_descentLine()
public void set_descentLine(float value)
public float get_superscriptOffset()
public void set_superscriptOffset(float value)
public float get_superscriptSize()
public void set_superscriptSize(float value)
public float get_subscriptOffset()
public void set_subscriptOffset(float value)
public float get_subscriptSize()
public void set_subscriptSize(float value)
public float get_underlineOffset()
public void set_underlineOffset(float value)
public float get_underlineThickness()
public void set_underlineThickness(float value)
public float get_strikethroughOffset()
public void set_strikethroughOffset(float value)
public float get_strikethroughThickness()
public void set_strikethroughThickness(float value)
public float get_tabWidth()
public void set_tabWidth(float value)
internal void .ctor(string familyName, string styleName, int pointSize, float scale, float lineHeight, float ascentLine, float capLine, float meanLine, float baseline, float descentLine, float superscriptOffset, float superscriptSize, float subscriptOffset, float subscriptSize, float underlineOffset, float underlineThickness, float strikethroughOffset, float strikethroughThickness, float tabWidth)
public bool Compare(FaceInfo other)
}
internal UnityEngine.TextCore.FontAsset : ScriptableObject {
private string m_Version
private int m_HashCode
private FaceInfo m_FaceInfo
internal string m_SourceFontFileGUID
internal Font m_SourceFontFile_EditorRef
internal Font m_SourceFontFile
private AtlasPopulationMode m_AtlasPopulationMode
private List`1<Glyph> m_GlyphTable
private Dictionary`2<UInt32, Glyph> m_GlyphLookupDictionary
private List`1<Character> m_CharacterTable
private Dictionary`2<UInt32, Character> m_CharacterLookupDictionary
private Texture2D m_AtlasTexture
private Texture2D[] m_AtlasTextures
internal int m_AtlasTextureIndex
private int m_AtlasWidth
private int m_AtlasHeight
private int m_AtlasPadding
private GlyphRenderMode m_AtlasRenderMode
private List`1<GlyphRect> m_UsedGlyphRects
private List`1<GlyphRect> m_FreeGlyphRects
private List`1<UInt32> m_GlyphIndexes
private Dictionary`2<UInt32, List`1<UInt32>> s_GlyphLookupMap
private Material m_Material
internal int m_MaterialHashCode
internal KerningTable m_KerningTable
private Dictionary`2<int, KerningPair> m_KerningLookupDictionary
internal KerningPair m_EmptyKerningPair
internal List`1<FontAsset> m_FallbackFontAssetTable
internal FontAssetCreationSettings m_FontAssetCreationSettings
internal FontWeights[] m_FontWeightTable
private float m_RegularStyleWeight
private float m_RegularStyleSpacing
private float m_BoldStyleWeight
private float m_BoldStyleSpacing
private byte m_ItalicStyleSlant
private byte m_TabMultiple
internal bool m_IsFontAssetLookupTablesDirty
private List`1<Glyph> m_GlyphsToPack
private List`1<Glyph> m_GlyphsPacked
private List`1<Glyph> m_GlyphsToRender
public string version
public int hashCode
public FaceInfo faceInfo
public Font sourceFontFile
public AtlasPopulationMode atlasPopulationMode
public List`1<Glyph> glyphTable
public Dictionary`2<UInt32, Glyph> glyphLookupTable
public List`1<Character> characterTable
public Dictionary`2<UInt32, Character> characterLookupTable
public Texture2D atlasTexture
public Texture2D[] atlasTextures
public int atlasWidth
public int atlasHeight
public int atlasPadding
public GlyphRenderMode atlasRenderMode
internal List`1<GlyphRect> usedGlyphRects
internal List`1<GlyphRect> freeGlyphRects
public Material material
public int materialHashCode
public KerningTable kerningTable
public Dictionary`2<int, KerningPair> kerningLookupDictionary
public List`1<FontAsset> fallbackFontAssetTable
public FontAssetCreationSettings fontAssetCreationSettings
public FontWeights[] fontWeightTable
public float regularStyleWeight
public float regularStyleSpacing
public float boldStyleWeight
public float boldStyleSpacing
public byte italicStyleSlant
public byte tabMultiple
public string get_version()
public void set_version(string value)
public int get_hashCode()
public void set_hashCode(int value)
public FaceInfo get_faceInfo()
public void set_faceInfo(FaceInfo value)
public Font get_sourceFontFile()
public AtlasPopulationMode get_atlasPopulationMode()
public void set_atlasPopulationMode(AtlasPopulationMode value)
public List`1<Glyph> get_glyphTable()
public void set_glyphTable(List`1<Glyph> value)
public Dictionary`2<UInt32, Glyph> get_glyphLookupTable()
public List`1<Character> get_characterTable()
public void set_characterTable(List`1<Character> value)
public Dictionary`2<UInt32, Character> get_characterLookupTable()
public Texture2D get_atlasTexture()
public Texture2D[] get_atlasTextures()
public void set_atlasTextures(Texture2D[] value)
public int get_atlasWidth()
public void set_atlasWidth(int value)
public int get_atlasHeight()
public void set_atlasHeight(int value)
public int get_atlasPadding()
public void set_atlasPadding(int value)
public GlyphRenderMode get_atlasRenderMode()
public void set_atlasRenderMode(GlyphRenderMode value)
internal List`1<GlyphRect> get_usedGlyphRects()
internal void set_usedGlyphRects(List`1<GlyphRect> value)
internal List`1<GlyphRect> get_freeGlyphRects()
internal void set_freeGlyphRects(List`1<GlyphRect> value)
public Material get_material()
public void set_material(Material value)
public int get_materialHashCode()
public void set_materialHashCode(int value)
public KerningTable get_kerningTable()
public void set_kerningTable(KerningTable value)
public Dictionary`2<int, KerningPair> get_kerningLookupDictionary()
public List`1<FontAsset> get_fallbackFontAssetTable()
public void set_fallbackFontAssetTable(List`1<FontAsset> value)
public FontAssetCreationSettings get_fontAssetCreationSettings()
public void set_fontAssetCreationSettings(FontAssetCreationSettings value)
public FontWeights[] get_fontWeightTable()
public void set_fontWeightTable(FontWeights[] value)
public float get_regularStyleWeight()
public void set_regularStyleWeight(float value)
public float get_regularStyleSpacing()
public void set_regularStyleSpacing(float value)
public float get_boldStyleWeight()
public void set_boldStyleWeight(float value)
public float get_boldStyleSpacing()
public void set_boldStyleSpacing(float value)
public byte get_italicStyleSlant()
public void set_italicStyleSlant(byte value)
public byte get_tabMultiple()
public void set_tabMultiple(byte value)
public FontAsset CreateFontAsset(Font font)
public FontAsset CreateFontAsset(Font font, int samplingPointSize, int atlasPadding, GlyphRenderMode renderMode, int atlasWidth, int atlasHeight, AtlasPopulationMode atlasPopulationMode)
private void Awake()
internal void InitializeDictionaryLookupTables()
internal void ReadFontAssetDefinition()
internal void SortCharacterTable()
internal void SortGlyphTable()
internal void SortGlyphAndCharacterTables()
internal bool HasCharacter(int character)
internal bool HasCharacter(char character)
internal bool HasCharacter(char character, bool searchFallbacks)
private bool HasCharacter_Internal(char character, bool searchFallbacks)
internal bool HasCharacters(string text, List`1& missingCharacters)
internal bool HasCharacters(string text)
internal string GetCharacters(FontAsset fontAsset)
internal Int32[] GetCharactersArray(FontAsset fontAsset)
internal Character AddCharacter_Internal(UInt32 unicode, Glyph glyph)
internal bool TryAddCharacter(UInt32 unicode, Character& character)
internal void UpdateAtlasTexture()
public bool TryAddCharacters(UInt32[] unicodes)
public bool TryAddCharacters(string characters)
internal void ClearFontAssetData()
}
internal UnityEngine.TextCore.FontAssetCreationSettings : ValueType {
public string fontFileGUID
public int pointSizeSamplingMode
public int pointSize
public int padding
public int packingMode
public int atlasWidth
public int atlasHeight
public int characterSetSelectionMode
public string characterSequence
public string referencedFontAssetGUID
public string referencedTextAssetGUID
public int fontStyle
public float fontStyleModifier
public int renderMode
public bool includeFontFeatures
internal void .ctor(string fontFileGUID, int pointSize, int pointSizeSamplingMode, int padding, int packingMode, int atlasWidth, int atlasHeight, int characterSelectionMode, string characterSet, int renderMode)
}
internal UnityEngine.TextCore.FontStyles : Enum {
public int value__
public FontStyles Normal
public FontStyles Bold
public FontStyles Italic
public FontStyles Underline
public FontStyles LowerCase
public FontStyles UpperCase
public FontStyles SmallCaps
public FontStyles Strikethrough
public FontStyles Superscript
public FontStyles Subscript
public FontStyles Highlight
}
internal UnityEngine.TextCore.FontStyleStack : ValueType {
public byte bold
public byte italic
public byte underline
public byte strikethrough
public byte highlight
public byte superscript
public byte subscript
public byte uppercase
public byte lowercase
public byte smallcaps
public void Clear()
public byte Add(FontStyles style)
public byte Remove(FontStyles style)
}
internal UnityEngine.TextCore.FontUtilities : object {
private List`1<int> s_SearchedFontAssets
internal Character GetCharacterFromFontAsset(UInt32 unicode, FontAsset sourceFontAsset, bool includeFallbacks, FontStyles fontStyle, FontWeight fontWeight, Boolean& isAlternativeTypeface, FontAsset& fontAsset)
internal Character GetCharacterFromFontAssets(UInt32 unicode, List`1<FontAsset> fontAssets, bool includeFallbacks, FontStyles fontStyle, FontWeight fontWeight, Boolean& isAlternativeTypeface, FontAsset& fontAsset)
private Character GetCharacterFromFontAsset_Internal(UInt32 unicode, FontAsset sourceFontAsset, bool includeFallbacks, FontStyles fontStyle, FontWeight fontWeight, Boolean& isAlternativeTypeface, FontAsset& fontAsset)
}
internal UnityEngine.TextCore.FontWeight : Enum {
public int value__
public FontWeight Thin
public FontWeight ExtraLight
public FontWeight Light
public FontWeight Regular
public FontWeight Medium
public FontWeight SemiBold
public FontWeight Bold
public FontWeight Heavy
public FontWeight Black
}
internal UnityEngine.TextCore.FontWeights : ValueType {
public FontAsset regularTypeface
public FontAsset italicTypeface
}
public UnityEngine.TextCore.Glyph : object {
private UInt32 m_Index
private GlyphMetrics m_Metrics
private GlyphRect m_GlyphRect
private float m_Scale
private int m_AtlasIndex
public UInt32 index
public GlyphMetrics metrics
public GlyphRect glyphRect
public float scale
public int atlasIndex
public UInt32 get_index()
public void set_index(UInt32 value)
public GlyphMetrics get_metrics()
public void set_metrics(GlyphMetrics value)
public GlyphRect get_glyphRect()
public void set_glyphRect(GlyphRect value)
public float get_scale()
public void set_scale(float value)
public int get_atlasIndex()
public void set_atlasIndex(int value)
public void .ctor(Glyph glyph)
internal void .ctor(GlyphMarshallingStruct glyphStruct)
public void .ctor(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect)
public void .ctor(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex)
public bool Compare(Glyph other)
}
public UnityEngine.TextCore.GlyphMetrics : ValueType {
private float m_Width
private float m_Height
private float m_HorizontalBearingX
private float m_HorizontalBearingY
private float m_HorizontalAdvance
public float width
public float height
public float horizontalBearingX
public float horizontalBearingY
public float horizontalAdvance
public float get_width()
public void set_width(float value)
public float get_height()
public void set_height(float value)
public float get_horizontalBearingX()
public void set_horizontalBearingX(float value)
public float get_horizontalBearingY()
public void set_horizontalBearingY(float value)
public float get_horizontalAdvance()
public void set_horizontalAdvance(float value)
public void .ctor(float width, float height, float bearingX, float bearingY, float advance)
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(GlyphMetrics other)
public bool op_Equality(GlyphMetrics lhs, GlyphMetrics rhs)
public bool op_Inequality(GlyphMetrics lhs, GlyphMetrics rhs)
}
public UnityEngine.TextCore.GlyphRect : ValueType {
private int m_X
private int m_Y
private int m_Width
private int m_Height
private GlyphRect s_ZeroGlyphRect
public int x
public int y
public int width
public int height
public GlyphRect zero
public int get_x()
public void set_x(int value)
public int get_y()
public void set_y(int value)
public int get_width()
public void set_width(int value)
public int get_height()
public void set_height(int value)
public GlyphRect get_zero()
public void .ctor(int x, int y, int width, int height)
public void .ctor(Rect rect)
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(GlyphRect other)
public bool op_Equality(GlyphRect lhs, GlyphRect rhs)
public bool op_Inequality(GlyphRect lhs, GlyphRect rhs)
}
internal UnityEngine.TextCore.HorizontalAlignment : Enum {
public int value__
public HorizontalAlignment Left
public HorizontalAlignment Center
public HorizontalAlignment Right
public HorizontalAlignment Justified
public HorizontalAlignment Flush
public HorizontalAlignment Geometry
}
internal UnityEngine.TextCore.KerningPair : object {
private UInt32 m_FirstGlyph
private GlyphValueRecord m_FirstGlyphAdjustments
private UInt32 m_SecondGlyph
private GlyphValueRecord m_SecondGlyphAdjustments
public float xOffset
public UInt32 firstGlyph
public GlyphValueRecord firstGlyphAdjustments
public UInt32 secondGlyph
public GlyphValueRecord secondGlyphAdjustments
public UInt32 get_firstGlyph()
public void set_firstGlyph(UInt32 value)
public GlyphValueRecord get_firstGlyphAdjustments()
public UInt32 get_secondGlyph()
public void set_secondGlyph(UInt32 value)
public GlyphValueRecord get_secondGlyphAdjustments()
public void .ctor(UInt32 left, UInt32 right, float offset)
public void .ctor(UInt32 firstGlyph, GlyphValueRecord firstGlyphAdjustments, UInt32 secondGlyph, GlyphValueRecord secondGlyphAdjustments)
internal void ConvertLegacyKerningData()
}
internal UnityEngine.TextCore.KerningPairKey : ValueType {
public UInt32 ascii_Left
public UInt32 ascii_Right
public UInt32 key
public void .ctor(UInt32 ascii_left, UInt32 ascii_right)
}
internal UnityEngine.TextCore.KerningTable : object {
public List`1<KerningPair> kerningPairs
public int AddGlyphPairAdjustmentRecord(UInt32 first, GlyphValueRecord firstAdjustments, UInt32 second, GlyphValueRecord secondAdjustments)
public void RemoveKerningPair(int left, int right)
public void RemoveKerningPair(int index)
public void SortKerningPairs()
}
internal UnityEngine.TextCore.LineInfo : ValueType {
internal int controlCharacterCount
public int characterCount
public int visibleCharacterCount
public int spaceCount
public int wordCount
public int firstCharacterIndex
public int firstVisibleCharacterIndex
public int lastCharacterIndex
public int lastVisibleCharacterIndex
public float length
public float lineHeight
public float ascender
public float baseline
public float descender
public float maxAdvance
public float width
public float marginLeft
public float marginRight
public TextAlignment alignment
public Extents lineExtents
}
internal UnityEngine.TextCore.LinkInfo : ValueType {
public int hashCode
public int linkIdFirstCharacterIndex
public int linkIdLength
public int linkTextfirstCharacterIndex
public int linkTextLength
internal Char[] linkId
internal void SetLinkId(Char[] text, int startIndex, int length)
public string GetLinkText(TextInfo textInfo)
public string GetLinkId()
}
public UnityEngine.TextCore.LowLevel.FontEngine : object {
private String[] s_FontFaces
private Glyph[] s_Glyphs
private UInt32[] s_GlyphIndexes_MarshallingArray_A
private UInt32[] s_GlyphIndexes_MarshallingArray_B
private GlyphMarshallingStruct[] s_GlyphMarshallingStruct_IN
private GlyphMarshallingStruct[] s_GlyphMarshallingStruct_OUT
private GlyphRect[] s_FreeGlyphRects
private GlyphRect[] s_UsedGlyphRects
private GlyphPairAdjustmentRecord[] s_PairAdjustmentRecords_MarshallingArray
private Dictionary`2<UInt32, Glyph> s_GlyphLookupDictionary
internal bool isProcessingDone
internal float generationProgress
public FontEngineError InitializeFontEngine()
private int InitializeFontEngine_Internal()
public FontEngineError DestroyFontEngine()
private int DestroyFontEngine_Internal()
internal void SendCancellationRequest()
private void SendCancellationRequest_Internal()
internal bool get_isProcessingDone()
internal float get_generationProgress()
public FontEngineError LoadFontFace(string filePath)
private int LoadFontFace_Internal(string filePath)
public FontEngineError LoadFontFace(string filePath, int pointSize)
private int LoadFontFace_With_Size_Internal(string filePath, int pointSize)
public FontEngineError LoadFontFace(string filePath, int pointSize, int faceIndex)
private int LoadFontFace_With_Size_And_FaceIndex_Internal(string filePath, int pointSize, int faceIndex)
public FontEngineError LoadFontFace(Byte[] sourceFontFile)
private int LoadFontFace_FromSourceFontFile_Internal(Byte[] sourceFontFile)
public FontEngineError LoadFontFace(Byte[] sourceFontFile, int pointSize)
private int LoadFontFace_With_Size_FromSourceFontFile_Internal(Byte[] sourceFontFile, int pointSize)
public FontEngineError LoadFontFace(Byte[] sourceFontFile, int pointSize, int faceIndex)
private int LoadFontFace_With_Size_And_FaceIndex_FromSourceFontFile_Internal(Byte[] sourceFontFile, int pointSize, int faceIndex)
public FontEngineError LoadFontFace(Font font)
private int LoadFontFace_FromFont_Internal(Font font)
public FontEngineError LoadFontFace(Font font, int pointSize)
private int LoadFontFace_With_Size_FromFont_Internal(Font font, int pointSize)
public FontEngineError LoadFontFace(Font font, int pointSize, int faceIndex)
private int LoadFontFace_With_Size_and_FaceIndex_FromFont_Internal(Font font, int pointSize, int faceIndex)
public FontEngineError UnloadFontFace()
private int UnloadFontFace_Internal()
public FontEngineError UnloadAllFontFaces()
private int UnloadAllFontFaces_Internal()
public FontEngineError SetFaceSize(int pointSize)
private int SetFaceSize_Internal(int pointSize)
public FaceInfo GetFaceInfo()
private int GetFaceInfo_Internal(FaceInfo& faceInfo)
internal int GetFaceCount()
public String[] GetFontFaces()
private int GetFontFaces_Internal(String[] fontFaces)
internal UInt32 GetGlyphIndex(UInt32 unicode)
public bool TryGetGlyphIndex(UInt32 unicode, UInt32& glyphIndex)
internal FontEngineError LoadGlyph(UInt32 unicode, GlyphLoadFlags flags)
private int LoadGlyph_Internal(UInt32 unicode, GlyphLoadFlags loadFlags)
public bool TryGetGlyphWithUnicodeValue(UInt32 unicode, GlyphLoadFlags flags, Glyph& glyph)
private bool TryGetGlyphWithUnicodeValue_Internal(UInt32 unicode, GlyphLoadFlags loadFlags, GlyphMarshallingStruct& glyphStruct)
public bool TryGetGlyphWithIndexValue(UInt32 glyphIndex, GlyphLoadFlags flags, Glyph& glyph)
private bool TryGetGlyphWithIndexValue_Internal(UInt32 glyphIndex, GlyphLoadFlags loadFlags, GlyphMarshallingStruct& glyphStruct)
internal bool TryPackGlyphInAtlas(Glyph glyph, int padding, GlyphPackingMode packingMode, GlyphRenderMode renderMode, int width, int height, List`1<GlyphRect> freeGlyphRects, List`1<GlyphRect> usedGlyphRects)
private bool TryPackGlyphInAtlas_Internal(GlyphMarshallingStruct& glyph, int padding, GlyphPackingMode packingMode, GlyphRenderMode renderMode, int width, int height, GlyphRect[] freeGlyphRects, Int32& freeGlyphRectCount, GlyphRect[] usedGlyphRects, Int32& usedGlyphRectCount)
internal bool TryPackGlyphsInAtlas(List`1<Glyph> glyphsToAdd, List`1<Glyph> glyphsAdded, int padding, GlyphPackingMode packingMode, GlyphRenderMode renderMode, int width, int height, List`1<GlyphRect> freeGlyphRects, List`1<GlyphRect> usedGlyphRects)
private bool TryPackGlyphsInAtlas_Internal(GlyphMarshallingStruct[] glyphsToAdd, Int32& glyphsToAddCount, GlyphMarshallingStruct[] glyphsAdded, Int32& glyphsAddedCount, int padding, GlyphPackingMode packingMode, GlyphRenderMode renderMode, int width, int height, GlyphRect[] freeGlyphRects, Int32& freeGlyphRectCount, GlyphRect[] usedGlyphRects, Int32& usedGlyphRectCount)
internal FontEngineError RenderGlyphToTexture(Glyph glyph, int padding, GlyphRenderMode renderMode, Texture2D texture)
private int RenderGlyphToTexture_Internal(GlyphMarshallingStruct glyphStruct, int padding, GlyphRenderMode renderMode, Texture2D texture)
internal FontEngineError RenderGlyphsToTexture(List`1<Glyph> glyphs, int padding, GlyphRenderMode renderMode, Texture2D texture)
private int RenderGlyphsToTexture_Internal(GlyphMarshallingStruct[] glyphs, int glyphCount, int padding, GlyphRenderMode renderMode, Texture2D texture)
internal FontEngineError RenderGlyphsToTexture(List`1<Glyph> glyphs, int padding, GlyphRenderMode renderMode, Byte[] texBuffer, int texWidth, int texHeight)
private int RenderGlyphsToTextureBuffer_Internal(GlyphMarshallingStruct[] glyphs, int glyphCount, int padding, GlyphRenderMode renderMode, Byte[] texBuffer, int texWidth, int texHeight)
internal FontEngineError RenderGlyphsToSharedTexture(List`1<Glyph> glyphs, int padding, GlyphRenderMode renderMode)
private int RenderGlyphsToSharedTexture_Internal(GlyphMarshallingStruct[] glyphs, int glyphCount, int padding, GlyphRenderMode renderMode)
internal void SetSharedTexture(Texture2D texture)
internal void ReleaseSharedTexture()
internal bool TryAddGlyphToTexture(UInt32 glyphIndex, int padding, GlyphPackingMode packingMode, List`1<GlyphRect> freeGlyphRects, List`1<GlyphRect> usedGlyphRects, GlyphRenderMode renderMode, Texture2D texture, Glyph& glyph)
private bool TryAddGlyphToTexture_Internal(UInt32 glyphIndex, int padding, GlyphPackingMode packingMode, GlyphRect[] freeGlyphRects, Int32& freeGlyphRectCount, GlyphRect[] usedGlyphRects, Int32& usedGlyphRectCount, GlyphRenderMode renderMode, Texture2D texture, GlyphMarshallingStruct& glyph)
internal bool TryAddGlyphsToTexture(List`1<Glyph> glyphsToAdd, List`1<Glyph> glyphsAdded, int padding, GlyphPackingMode packingMode, List`1<GlyphRect> freeGlyphRects, List`1<GlyphRect> usedGlyphRects, GlyphRenderMode renderMode, Texture2D texture)
private bool TryAddGlyphsToTexture_Internal_MultiThread(GlyphMarshallingStruct[] glyphsToAdd, Int32& glyphsToAddCount, GlyphMarshallingStruct[] glyphsAdded, Int32& glyphsAddedCount, int padding, GlyphPackingMode packingMode, GlyphRect[] freeGlyphRects, Int32& freeGlyphRectCount, GlyphRect[] usedGlyphRects, Int32& usedGlyphRectCount, GlyphRenderMode renderMode, Texture2D texture)
internal bool TryAddGlyphsToTexture(List`1<UInt32> glyphIndexes, int padding, GlyphPackingMode packingMode, List`1<GlyphRect> freeGlyphRects, List`1<GlyphRect> usedGlyphRects, GlyphRenderMode renderMode, Texture2D texture, Glyph[]& glyphs)
private bool TryAddGlyphsToTexture_Internal(UInt32[] glyphIndex, int padding, GlyphPackingMode packingMode, GlyphRect[] freeGlyphRects, Int32& freeGlyphRectCount, GlyphRect[] usedGlyphRects, Int32& usedGlyphRectCount, GlyphRenderMode renderMode, Texture2D texture, GlyphMarshallingStruct[] glyphs, Int32& glyphCount)
internal int GetOpenTypeFontFeatureTable()
internal GlyphPairAdjustmentRecord[] GetGlyphPairAdjustmentTable(UInt32[] glyphIndexes)
private int GetGlyphPairAdjustmentTable_Internal(UInt32[] glyphIndexes, GlyphPairAdjustmentRecord[] glyphPairAdjustmentRecords, Int32& adjustmentRecordCount)
internal GlyphPairAdjustmentRecord GetGlyphPairAdjustmentRecord(UInt32 firstGlyphIndex, UInt32 secondGlyphIndex)
internal GlyphPairAdjustmentRecord[] GetGlyphPairAdjustmentRecords(List`1<UInt32> newGlyphIndexes, List`1<UInt32> allGlyphIndexes)
internal GlyphPairAdjustmentRecord[] GetGlyphPairAdjustmentRecords(List`1<UInt32> glyphIndexes, Int32& recordCount)
internal GlyphPairAdjustmentRecord[] GetGlyphPairAdjustmentRecords(UInt32 glyphIndex, Int32& recordCount)
private int PopulatePairAdjustmentRecordMarshallingArray_from_GlyphIndexes(UInt32[] glyphIndexes, Int32& recordCount)
private int PopulatePairAdjustmentRecordMarshallingArray_for_NewlyAddedGlyphIndexes(UInt32[] newGlyphIndexes, UInt32[] allGlyphIndexes, Int32& recordCount)
private int PopulatePairAdjustmentRecordMarshallingArray_from_GlyphIndex(UInt32 glyphIndex, Int32& recordCount)
private int GetGlyphPairAdjustmentRecordsFromMarshallingArray(GlyphPairAdjustmentRecord[] glyphPairAdjustmentRecords)
private void GenericListToMarshallingArray(List`1& srcList, T[]& dstArray)
private void SetMarshallingArraySize(T[]& marshallingArray, int recordCount)
internal void ResetAtlasTexture(Texture2D texture)
internal void RenderBufferToTexture(Texture2D srcTexture, int padding, GlyphRenderMode renderMode, Texture2D dstTexture)
private int RenderGlyphToTexture_Internal_Injected(GlyphMarshallingStruct& glyphStruct, int padding, GlyphRenderMode renderMode, Texture2D texture)
private void GetGlyphPairAdjustmentRecord_Injected(UInt32 firstGlyphIndex, UInt32 secondGlyphIndex, GlyphPairAdjustmentRecord& ret)
}
public UnityEngine.TextCore.LowLevel.FontEngineError : Enum {
public int value__
public FontEngineError Success
public FontEngineError Invalid_File_Path
public FontEngineError Invalid_File_Format
public FontEngineError Invalid_File_Structure
public FontEngineError Invalid_File
public FontEngineError Invalid_Table
public FontEngineError Invalid_Glyph_Index
public FontEngineError Invalid_Character_Code
public FontEngineError Invalid_Pixel_Size
public FontEngineError Invalid_Library
public FontEngineError Invalid_Face
public FontEngineError Invalid_Library_or_Face
public FontEngineError Atlas_Generation_Cancelled
public FontEngineError Invalid_SharedTextureData
}
internal UnityEngine.TextCore.LowLevel.FontEngineUtilities : ValueType {
internal bool Approximately(float a, float b)
internal int MaxValue(int a, int b, int c)
}
public UnityEngine.TextCore.LowLevel.FontFeatureLookupFlags : Enum {
public int value__
public FontFeatureLookupFlags None
public FontFeatureLookupFlags IgnoreLigatures
public FontFeatureLookupFlags IgnoreSpacingAdjustments
}
public UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord : ValueType {
private UInt32 m_GlyphIndex
private GlyphValueRecord m_GlyphValueRecord
public UInt32 glyphIndex
public GlyphValueRecord glyphValueRecord
public UInt32 get_glyphIndex()
public void set_glyphIndex(UInt32 value)
public GlyphValueRecord get_glyphValueRecord()
public void set_glyphValueRecord(GlyphValueRecord value)
public void .ctor(UInt32 glyphIndex, GlyphValueRecord glyphValueRecord)
}
public UnityEngine.TextCore.LowLevel.GlyphLoadFlags : Enum {
public int value__
public GlyphLoadFlags LOAD_DEFAULT
public GlyphLoadFlags LOAD_NO_SCALE
public GlyphLoadFlags LOAD_NO_HINTING
public GlyphLoadFlags LOAD_RENDER
public GlyphLoadFlags LOAD_NO_BITMAP
public GlyphLoadFlags LOAD_FORCE_AUTOHINT
public GlyphLoadFlags LOAD_MONOCHROME
public GlyphLoadFlags LOAD_NO_AUTOHINT
public GlyphLoadFlags LOAD_COMPUTE_METRICS
public GlyphLoadFlags LOAD_BITMAP_METRICS_ONLY
}
internal UnityEngine.TextCore.LowLevel.GlyphMarshallingStruct : ValueType {
public UInt32 index
public GlyphMetrics metrics
public GlyphRect glyphRect
public float scale
public int atlasIndex
public void .ctor(Glyph glyph)
public void .ctor(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex)
}
public UnityEngine.TextCore.LowLevel.GlyphPackingMode : Enum {
public int value__
public GlyphPackingMode BestShortSideFit
public GlyphPackingMode BestLongSideFit
public GlyphPackingMode BestAreaFit
public GlyphPackingMode BottomLeftRule
public GlyphPackingMode ContactPointRule
}
public UnityEngine.TextCore.LowLevel.GlyphPairAdjustmentRecord : ValueType {
private GlyphAdjustmentRecord m_FirstAdjustmentRecord
private GlyphAdjustmentRecord m_SecondAdjustmentRecord
private FontFeatureLookupFlags m_FeatureLookupFlags
public GlyphAdjustmentRecord firstAdjustmentRecord
public GlyphAdjustmentRecord secondAdjustmentRecord
public FontFeatureLookupFlags featureLookupFlags
public GlyphAdjustmentRecord get_firstAdjustmentRecord()
public void set_firstAdjustmentRecord(GlyphAdjustmentRecord value)
public GlyphAdjustmentRecord get_secondAdjustmentRecord()
public void set_secondAdjustmentRecord(GlyphAdjustmentRecord value)
public FontFeatureLookupFlags get_featureLookupFlags()
public void set_featureLookupFlags(FontFeatureLookupFlags value)
public void .ctor(GlyphAdjustmentRecord firstAdjustmentRecord, GlyphAdjustmentRecord secondAdjustmentRecord)
}
internal UnityEngine.TextCore.LowLevel.GlyphRasterModes : Enum {
public int value__
public GlyphRasterModes RASTER_MODE_8BIT
public GlyphRasterModes RASTER_MODE_MONO
public GlyphRasterModes RASTER_MODE_NO_HINTING
public GlyphRasterModes RASTER_MODE_HINTED
public GlyphRasterModes RASTER_MODE_BITMAP
public GlyphRasterModes RASTER_MODE_SDF
public GlyphRasterModes RASTER_MODE_SDFAA
public GlyphRasterModes RASTER_MODE_MSDF
public GlyphRasterModes RASTER_MODE_MSDFA
public GlyphRasterModes RASTER_MODE_1X
public GlyphRasterModes RASTER_MODE_8X
public GlyphRasterModes RASTER_MODE_16X
public GlyphRasterModes RASTER_MODE_32X
}
public UnityEngine.TextCore.LowLevel.GlyphRenderMode : Enum {
public int value__
public GlyphRenderMode SMOOTH_HINTED
public GlyphRenderMode SMOOTH
public GlyphRenderMode RASTER_HINTED
public GlyphRenderMode RASTER
public GlyphRenderMode SDF
public GlyphRenderMode SDF8
public GlyphRenderMode SDF16
public GlyphRenderMode SDF32
public GlyphRenderMode SDFAA_HINTED
public GlyphRenderMode SDFAA
}
public UnityEngine.TextCore.LowLevel.GlyphValueRecord : ValueType {
private float m_XPlacement
private float m_YPlacement
private float m_XAdvance
private float m_YAdvance
public float xPlacement
public float yPlacement
public float xAdvance
public float yAdvance
public float get_xPlacement()
public void set_xPlacement(float value)
public float get_yPlacement()
public void set_yPlacement(float value)
public float get_xAdvance()
public void set_xAdvance(float value)
public float get_yAdvance()
public void set_yAdvance(float value)
public void .ctor(float xPlacement, float yPlacement, float xAdvance, float yAdvance)
public GlyphValueRecord op_Addition(GlyphValueRecord a, GlyphValueRecord b)
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(GlyphValueRecord other)
public bool op_Equality(GlyphValueRecord lhs, GlyphValueRecord rhs)
public bool op_Inequality(GlyphValueRecord lhs, GlyphValueRecord rhs)
}
internal UnityEngine.TextCore.LowLevel.OTFLayoutTableType : Enum {
public int value__
public OTFLayoutTableType BASE
public OTFLayoutTableType GDEF
public OTFLayoutTableType GPOS
public OTFLayoutTableType GSUB
public OTFLayoutTableType JSTF
public OTFLayoutTableType MATH
}
internal UnityEngine.TextCore.LowLevel.OTFLookupTableType : Enum {
public int value__
public OTFLookupTableType Single_Adjustment
public OTFLookupTableType Pair_Adjustment
public OTFLookupTableType Cursive_Attachment
public OTFLookupTableType Mark_to_Base_Attachment
public OTFLookupTableType Mark_to_Ligature_Attachment
public OTFLookupTableType Mark_to_Mark_Attachment
public OTFLookupTableType Contextual_Positioning
public OTFLookupTableType Chaining_Contextual_Positioning
public OTFLookupTableType Extension_Positioning
public OTFLookupTableType Single_Substitution
public OTFLookupTableType Multiple_Substitution
public OTFLookupTableType Alternate_Substitution
public OTFLookupTableType Ligature_Substitution
public OTFLookupTableType Contextual_Substitution
public OTFLookupTableType Chaining_Contextual_Substitution
public OTFLookupTableType Extension_Substitution
public OTFLookupTableType Reverse_Chaining_Contextual_Single_Substitution
}
internal UnityEngine.TextCore.MaterialManager : object {
private Dictionary`2<long, Material> s_FallbackMaterials
public Material GetFallbackMaterial(Material sourceMaterial, Material targetMaterial)
}
internal UnityEngine.TextCore.MaterialReference : ValueType {
public int index
public FontAsset fontAsset
public TextSpriteAsset spriteAsset
public Material material
public bool isDefaultMaterial
public bool isFallbackMaterial
public Material fallbackMaterial
public float padding
public int referenceCount
public void .ctor(int index, FontAsset fontAsset, TextSpriteAsset spriteAsset, Material material, float padding)
public bool Contains(MaterialReference[] materialReferences, FontAsset fontAsset)
public int AddMaterialReference(Material material, FontAsset fontAsset, MaterialReference[] materialReferences, Dictionary`2<int, int> materialReferenceIndexLookup)
public int AddMaterialReference(Material material, TextSpriteAsset spriteAsset, MaterialReference[] materialReferences, Dictionary`2<int, int> materialReferenceIndexLookup)
}
internal UnityEngine.TextCore.MaterialReferenceManager : object {
private MaterialReferenceManager s_Instance
private Dictionary`2<int, Material> m_FontMaterialReferenceLookup
private Dictionary`2<int, FontAsset> m_FontAssetReferenceLookup
private Dictionary`2<int, TextSpriteAsset> m_SpriteAssetReferenceLookup
private Dictionary`2<int, TextGradientPreset> m_ColorGradientReferenceLookup
public MaterialReferenceManager instance
public MaterialReferenceManager get_instance()
public void AddFontAsset(FontAsset fontAsset)
private void AddFontAssetInternal(FontAsset fontAsset)
public void AddSpriteAsset(TextSpriteAsset spriteAsset)
private void AddSpriteAssetInternal(TextSpriteAsset spriteAsset)
public void AddSpriteAsset(int hashCode, TextSpriteAsset spriteAsset)
private void AddSpriteAssetInternal(int hashCode, TextSpriteAsset spriteAsset)
public void AddFontMaterial(int hashCode, Material material)
private void AddFontMaterialInternal(int hashCode, Material material)
public void AddColorGradientPreset(int hashCode, TextGradientPreset spriteAsset)
private void AddColorGradientPreset_Internal(int hashCode, TextGradientPreset spriteAsset)
public bool Contains(FontAsset font)
public bool Contains(TextSpriteAsset sprite)
public bool TryGetFontAsset(int hashCode, FontAsset& fontAsset)
private bool TryGetFontAssetInternal(int hashCode, FontAsset& fontAsset)
public bool TryGetSpriteAsset(int hashCode, TextSpriteAsset& spriteAsset)
private bool TryGetSpriteAssetInternal(int hashCode, TextSpriteAsset& spriteAsset)
public bool TryGetColorGradientPreset(int hashCode, TextGradientPreset& gradientPreset)
private bool TryGetColorGradientPresetInternal(int hashCode, TextGradientPreset& gradientPreset)
public bool TryGetMaterial(int hashCode, Material& material)
private bool TryGetMaterialInternal(int hashCode, Material& material)
}
internal UnityEngine.TextCore.MeshExtents : ValueType {
public Vector2 min
public Vector2 max
public void .ctor(Vector2 min, Vector2 max)
public string ToString()
}
internal UnityEngine.TextCore.MeshInfo : ValueType {
private Color32 k_DefaultColor
public int vertexCount
public Vector3[] vertices
public Vector2[] uvs0
public Vector2[] uvs2
public Color32[] colors32
public Int32[] triangles
public Material material
public void .ctor(int size)
internal void ResizeMeshInfo(int size)
internal void Clear(bool uploadChanges)
internal void ClearUnusedVertices()
internal void ClearUnusedVertices(int startIndex)
internal void SortGeometry(VertexSortingOrder order)
internal void SwapVertexData(int src, int dst)
}
internal UnityEngine.TextCore.PageInfo : ValueType {
public int firstCharacterIndex
public int lastCharacterIndex
public float ascender
public float baseLine
public float descender
}
internal UnityEngine.TextCore.RichTextTagAttribute : ValueType {
public int nameHashCode
public int valueHashCode
public TagValueType valueType
public int valueStartIndex
public int valueLength
}
internal UnityEngine.TextCore.RichTextTagStack`1 : ValueType {
public T[] m_ItemStack
public int m_Index
private int m_Capacity
private T m_DefaultItem
private int k_DefaultCapacity
public void .ctor(T[] tagStack)
public void .ctor(int capacity)
public void Clear()
public void SetDefault(T item)
public void Add(T item)
public T Remove()
public void Push(T item)
public T Pop()
public T Peek()
public T CurrentItem()
public T PreviousItem()
}
internal UnityEngine.TextCore.ShaderUtilities : object {
public int ID_MainTex
public int ID_FaceTex
public int ID_FaceColor
public int ID_FaceDilate
public int ID_Shininess
public int ID_UnderlayColor
public int ID_UnderlayOffsetX
public int ID_UnderlayOffsetY
public int ID_UnderlayDilate
public int ID_UnderlaySoftness
public int ID_WeightNormal
public int ID_WeightBold
public int ID_OutlineTex
public int ID_OutlineWidth
public int ID_OutlineSoftness
public int ID_OutlineColor
public int ID_GradientScale
public int ID_ScaleX
public int ID_ScaleY
public int ID_PerspectiveFilter
public int ID_TextureWidth
public int ID_TextureHeight
public int ID_BevelAmount
public int ID_GlowColor
public int ID_GlowOffset
public int ID_GlowPower
public int ID_GlowOuter
public int ID_LightAngle
public int ID_EnvMap
public int ID_EnvMatrix
public int ID_EnvMatrixRotation
public int ID_MaskCoord
public int ID_ClipRect
public int ID_MaskSoftnessX
public int ID_MaskSoftnessY
public int ID_VertexOffsetX
public int ID_VertexOffsetY
public int ID_UseClipRect
public int ID_StencilID
public int ID_StencilOp
public int ID_StencilComp
public int ID_StencilReadMask
public int ID_StencilWriteMask
public int ID_ShaderFlags
public int ID_ScaleRatio_A
public int ID_ScaleRatio_B
public int ID_ScaleRatio_C
public string Keyword_Bevel
public string Keyword_Glow
public string Keyword_Underlay
public string Keyword_Ratios
public string Keyword_MASK_SOFT
public string Keyword_MASK_HARD
public string Keyword_MASK_TEX
public string Keyword_Outline
public string ShaderTag_ZTestMode
public string ShaderTag_CullMode
private float m_clamp
public bool isInitialized
private Shader k_ShaderRef_MobileSDF
private Shader k_ShaderRef_MobileBitmap
internal Shader ShaderRef_MobileSDF
internal Shader ShaderRef_MobileBitmap
internal Shader get_ShaderRef_MobileSDF()
internal Shader get_ShaderRef_MobileBitmap()
public void GetShaderPropertyIDs()
public void UpdateShaderRatios(Material mat)
public bool IsMaskingEnabled(Material material)
public float GetPadding(Material material, bool enableExtraPadding, bool isBold)
}
internal UnityEngine.TextCore.SpriteCharacter : TextElement {
private string m_Name
private int m_HashCode
public string name
public int hashCode
public string get_name()
public void set_name(string value)
public int get_hashCode()
public void .ctor(UInt32 unicode, SpriteGlyph glyph)
}
internal UnityEngine.TextCore.SpriteGlyph : Glyph {
public Sprite sprite
public void .ctor(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex)
public void .ctor(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex, Sprite sprite)
}
internal UnityEngine.TextCore.TagHashCode : Enum {
public int value__
public TagHashCode BOLD
public TagHashCode SLASH_BOLD
public TagHashCode ITALIC
public TagHashCode SLASH_ITALIC
public TagHashCode UNDERLINE
public TagHashCode SLASH_UNDERLINE
public TagHashCode STRIKETHROUGH
public TagHashCode SLASH_STRIKETHROUGH
public TagHashCode MARK
public TagHashCode SLASH_MARK
public TagHashCode SUBSCRIPT
public TagHashCode SLASH_SUBSCRIPT
public TagHashCode SUPERSCRIPT
public TagHashCode SLASH_SUPERSCRIPT
public TagHashCode COLOR
public TagHashCode SLASH_COLOR
public TagHashCode ALPHA
public TagHashCode A
public TagHashCode SLASH_A
public TagHashCode SIZE
public TagHashCode SLASH_SIZE
public TagHashCode SPRITE
public TagHashCode BR
public TagHashCode NO_BREAK
public TagHashCode SLASH_NO_BREAK
public TagHashCode STYLE
public TagHashCode SLASH_STYLE
public TagHashCode FONT
public TagHashCode SLASH_FONT
public TagHashCode SLASH_MATERIAL
public TagHashCode LINK
public TagHashCode SLASH_LINK
public TagHashCode FONT_WEIGHT
public TagHashCode SLASH_FONT_WEIGHT
public TagHashCode NO_PARSE
public TagHashCode SLASH_NO_PARSE
public TagHashCode POSITION
public TagHashCode SLASH_POSITION
public TagHashCode VERTICAL_OFFSET
public TagHashCode SLASH_VERTICAL_OFFSET
public TagHashCode SPACE
public TagHashCode SLASH_SPACE
public TagHashCode PAGE
public TagHashCode SLASH_PAGE
public TagHashCode ALIGN
public TagHashCode SLASH_ALIGN
public TagHashCode WIDTH
public TagHashCode SLASH_WIDTH
public TagHashCode GRADIENT
public TagHashCode SLASH_GRADIENT
public TagHashCode CHARACTER_SPACE
public TagHashCode SLASH_CHARACTER_SPACE
public TagHashCode MONOSPACE
public TagHashCode SLASH_MONOSPACE
public TagHashCode CLASS
public TagHashCode INDENT
public TagHashCode SLASH_INDENT
public TagHashCode LINE_INDENT
public TagHashCode SLASH_LINE_INDENT
public TagHashCode MARGIN
public TagHashCode SLASH_MARGIN
public TagHashCode MARGIN_LEFT
public TagHashCode MARGIN_RIGHT
public TagHashCode LINE_HEIGHT
public TagHashCode SLASH_LINE_HEIGHT
public TagHashCode ACTION
public TagHashCode SLASH_ACTION
public TagHashCode SCALE
public TagHashCode SLASH_SCALE
public TagHashCode ROTATE
public TagHashCode SLASH_ROTATE
public TagHashCode LOWERCASE
public TagHashCode SLASH_LOWERCASE
public TagHashCode ALLCAPS
public TagHashCode SLASH_ALLCAPS
public TagHashCode UPPERCASE
public TagHashCode SLASH_UPPERCASE
public TagHashCode SMALLCAPS
public TagHashCode SLASH_SMALLCAPS
public TagHashCode LIGA
public TagHashCode SLASH_LIGA
public TagHashCode FRAC
public TagHashCode SLASH_FRAC
public TagHashCode NAME
public TagHashCode INDEX
public TagHashCode TINT
public TagHashCode ANIM
public TagHashCode MATERIAL
public TagHashCode HREF
public TagHashCode RED
public TagHashCode GREEN
public TagHashCode BLUE
public TagHashCode YELLOW
public TagHashCode ORANGE
public TagHashCode BLACK
public TagHashCode WHITE
public TagHashCode PURPLE
public TagHashCode LEFT
public TagHashCode RIGHT
public TagHashCode CENTER
public TagHashCode JUSTIFIED
public TagHashCode FLUSH
public TagHashCode PLUS
public TagHashCode MINUS
public TagHashCode PX
public TagHashCode PLUS_PX
public TagHashCode MINUS_PX
public TagHashCode EM
public TagHashCode PLUS_EM
public TagHashCode MINUS_EM
public TagHashCode PCT
public TagHashCode PLUS_PCT
public TagHashCode MINUS_PCT
public TagHashCode PERCENTAGE
public TagHashCode PLUS_PERCENTAGE
public TagHashCode MINUS_PERCENTAGE
public TagHashCode TRUE
public TagHashCode FALSE
public TagHashCode DEFAULT
}
internal UnityEngine.TextCore.TagUnitType : Enum {
public int value__
public TagUnitType Pixels
public TagUnitType FontUnits
public TagUnitType Percentage
}
internal UnityEngine.TextCore.TagValueType : Enum {
public int value__
public TagValueType None
public TagValueType NumericalValue
public TagValueType StringValue
public TagValueType ColorValue
}
internal UnityEngine.TextCore.TextAlignment : Enum {
public int value__
public TextAlignment TopLeft
public TextAlignment TopCenter
public TextAlignment TopRight
public TextAlignment TopJustified
public TextAlignment TopFlush
public TextAlignment TopGeoAligned
public TextAlignment MiddleLeft
public TextAlignment MiddleCenter
public TextAlignment MiddleRight
public TextAlignment MiddleJustified
public TextAlignment MiddleFlush
public TextAlignment MiddleGeoAligned
public TextAlignment BottomLeft
public TextAlignment BottomCenter
public TextAlignment BottomRight
public TextAlignment BottomJustified
public TextAlignment BottomFlush
public TextAlignment BottomGeoAligned
public TextAlignment BaselineLeft
public TextAlignment BaselineCenter
public TextAlignment BaselineRight
public TextAlignment BaselineJustified
public TextAlignment BaselineFlush
public TextAlignment BaselineGeoAligned
public TextAlignment MidlineLeft
public TextAlignment MidlineCenter
public TextAlignment MidlineRight
public TextAlignment MidlineJustified
public TextAlignment MidlineFlush
public TextAlignment MidlineGeoAligned
public TextAlignment CaplineLeft
public TextAlignment CaplineCenter
public TextAlignment CaplineRight
public TextAlignment CaplineJustified
public TextAlignment CaplineFlush
public TextAlignment CaplineGeoAligned
}
internal UnityEngine.TextCore.TextElement : object {
protected TextElementType m_ElementType
private UInt32 m_Unicode
private Glyph m_Glyph
private UInt32 m_GlyphIndex
private float m_Scale
public TextElementType elementType
public UInt32 unicode
public Glyph glyph
public UInt32 glyphIndex
public float scale
public TextElementType get_elementType()
public UInt32 get_unicode()
public void set_unicode(UInt32 value)
public Glyph get_glyph()
public void set_glyph(Glyph value)
public UInt32 get_glyphIndex()
public void set_glyphIndex(UInt32 value)
public float get_scale()
public void set_scale(float value)
}
internal UnityEngine.TextCore.TextElementInfo : ValueType {
public char character
public int index
public TextElementType elementType
public TextElement textElement
public FontAsset fontAsset
public TextSpriteAsset spriteAsset
public int spriteIndex
public Material material
public int materialReferenceIndex
public bool isUsingAlternateTypeface
public float pointSize
public int lineNumber
public int pageNumber
public int vertexIndex
public TextVertex vertexTopLeft
public TextVertex vertexBottomLeft
public TextVertex vertexTopRight
public TextVertex vertexBottomRight
public Vector3 topLeft
public Vector3 bottomLeft
public Vector3 topRight
public Vector3 bottomRight
public float origin
public float ascender
public float baseLine
public float descender
public float xAdvance
public float aspectRatio
public float scale
public Color32 color
public Color32 underlineColor
public Color32 strikethroughColor
public Color32 highlightColor
public FontStyles style
public bool isVisible
}
internal UnityEngine.TextCore.TextElementType : Enum {
public int value__
public TextElementType Character
public TextElementType Sprite
}
internal UnityEngine.TextCore.TextGenerationSettings : object {
public string text
public Rect screenRect
public Vector4 margins
public float scale
public FontAsset fontAsset
public Material material
public TextSpriteAsset spriteAsset
public FontStyles fontStyle
public TextAlignment textAlignment
public TextOverflowMode overflowMode
public bool wordWrap
public float wordWrappingRatio
public Color color
public TextGradientPreset fontColorGradient
public bool tintSprites
public bool overrideRichTextColors
public float fontSize
public bool autoSize
public float fontSizeMin
public float fontSizeMax
public bool enableKerning
public bool richText
public bool isRightToLeft
public bool extraPadding
public bool parseControlCharacters
public float characterSpacing
public float wordSpacing
public float lineSpacing
public float paragraphSpacing
public float lineSpacingMax
public int maxVisibleCharacters
public int maxVisibleWords
public int maxVisibleLines
public int firstVisibleCharacter
public bool useMaxVisibleDescender
public FontWeight fontWeight
public int pageToDisplay
public TextureMapping horizontalMapping
public TextureMapping verticalMapping
public float uvLineOffset
public VertexSortingOrder geometrySortingOrder
public bool inverseYAxis
public float charWidthMaxAdj
protected bool Equals(TextGenerationSettings other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(TextGenerationSettings left, TextGenerationSettings right)
public bool op_Inequality(TextGenerationSettings left, TextGenerationSettings right)
public void Copy(TextGenerationSettings other)
}
internal UnityEngine.TextCore.TextGenerator : object {
private int k_Tab
private int k_LineFeed
private int k_CarriageReturn
private int k_Space
private int k_DoubleQuotes
private int k_NumberSign
private int k_PercentSign
private int k_SingleQuote
private int k_Plus
private int k_Minus
private int k_Period
private int k_LesserThan
private int k_Equal
private int k_GreaterThan
private int k_Underline
private int k_NoBreakSpace
private int k_SoftHyphen
private int k_HyphenMinus
private int k_FigureSpace
private int k_Hyphen
private int k_NonBreakingHyphen
private int k_ZeroWidthSpace
private int k_NarrowNoBreakSpace
private int k_WordJoiner
private int k_HorizontalEllipsis
private int k_RightSingleQuote
private int k_Square
private int k_HangulJamoStart
private int k_HangulJamoEnd
private int k_CjkStart
private int k_CjkEnd
private int k_HangulJameExtendedStart
private int k_HangulJameExtendedEnd
private int k_HangulSyllablesStart
private int k_HangulSyllablesEnd
private int k_CjkIdeographsStart
private int k_CjkIdeographsEnd
private int k_CjkFormsStart
private int k_CjkFormsEnd
private int k_CjkHalfwidthStart
private int k_CjkHalfwidthEnd
private int k_VerticesMax
private int k_SpritesStart
private float k_FloatUnset
private int k_MaxCharacters
private TextGenerator s_TextGenerator
private Vector3[] m_RectTransformCorners
private float m_MarginWidth
private float m_MarginHeight
private Int32[] m_CharBuffer
private float m_PreferredWidth
private float m_PreferredHeight
private FontAsset m_CurrentFontAsset
private Material m_CurrentMaterial
private int m_CurrentMaterialIndex
private RichTextTagStack`1<MaterialReference> m_MaterialReferenceStack
private float m_Padding
private TextSpriteAsset m_CurrentSpriteAsset
private int m_TotalCharacterCount
private float m_FontScale
private float m_FontSize
private float m_FontScaleMultiplier
private float m_CurrentFontSize
private RichTextTagStack`1<float> m_SizeStack
private FontStyles m_FontStyleInternal
private FontStyleStack m_FontStyleStack
private FontWeight m_FontWeightInternal
private RichTextTagStack`1<FontWeight> m_FontWeightStack
private TextAlignment m_LineJustification
private RichTextTagStack`1<TextAlignment> m_LineJustificationStack
private float m_BaselineOffset
private RichTextTagStack`1<float> m_BaselineOffsetStack
private Color32 m_FontColor32
private Color32 m_HtmlColor
private Color32 m_UnderlineColor
private Color32 m_StrikethroughColor
private RichTextTagStack`1<Color32> m_ColorStack
private RichTextTagStack`1<Color32> m_UnderlineColorStack
private RichTextTagStack`1<Color32> m_StrikethroughColorStack
private RichTextTagStack`1<Color32> m_HighlightColorStack
private TextGradientPreset m_ColorGradientPreset
private RichTextTagStack`1<TextGradientPreset> m_ColorGradientStack
private RichTextTagStack`1<int> m_ActionStack
private bool m_IsFxMatrixSet
private float m_LineOffset
private float m_LineHeight
private float m_CSpacing
private float m_MonoSpacing
private float m_XAdvance
private float m_TagLineIndent
private float m_TagIndent
private RichTextTagStack`1<float> m_IndentStack
private bool m_TagNoParsing
private int m_CharacterCount
private int m_FirstCharacterOfLine
private int m_LastCharacterOfLine
private int m_FirstVisibleCharacterOfLine
private int m_LastVisibleCharacterOfLine
private float m_MaxLineAscender
private float m_MaxLineDescender
private int m_LineNumber
private int m_LineVisibleCharacterCount
private int m_FirstOverflowCharacterIndex
private int m_PageNumber
private float m_MarginLeft
private float m_MarginRight
private float m_Width
private Extents m_MeshExtents
private float m_MaxCapHeight
private float m_MaxAscender
private float m_MaxDescender
private bool m_IsNewPage
private bool m_IsNonBreakingSpace
private WordWrapState m_SavedWordWrapState
private WordWrapState m_SavedLineState
private int m_LoopCountA
private TextElementType m_TextElementType
private bool m_IsParsingText
private int m_SpriteIndex
private Color32 m_SpriteColor
private TextElement m_CachedTextElement
private Color32 m_HighlightColor
private float m_CharWidthAdjDelta
private Matrix4x4 m_FxMatrix
private float m_MaxFontSize
private float m_MinFontSize
private bool m_IsCharacterWrappingEnabled
private float m_StartOfLineAscender
private float m_LineSpacingDelta
private bool m_IsMaskingEnabled
private MaterialReference[] m_MaterialReferences
private int m_SpriteCount
private RichTextTagStack`1<int> m_StyleStack
private int m_SpriteAnimationId
private UInt32[] m_InternalTextParsingBuffer
private RichTextTagAttribute[] m_Attributes
private XmlTagAttribute[] m_XmlAttribute
private Char[] m_RichTextTag
private Dictionary`2<int, int> m_MaterialReferenceIndexLookup
private bool m_IsCalculatingPreferredValues
private TextSpriteAsset m_DefaultSpriteAsset
private bool m_TintSprite
private Character m_CachedEllipsisGlyphInfo
private Character m_CachedUnderlineGlyphInfo
private bool m_IsUsingBold
private bool m_IsSdfShader
private TextElementInfo[] m_InternalTextElementInfo
private int m_RecursiveCount
private TextGenerator GetTextGenerator()
public void GenerateText(TextGenerationSettings settings, TextInfo textInfo)
public Vector2 GetCursorPosition(TextGenerationSettings settings, int index)
public Vector2 GetCursorPosition(TextInfo textInfo, Rect screenRect, int index)
public float GetPreferredWidth(TextGenerationSettings settings, TextInfo textInfo)
public float GetPreferredHeight(TextGenerationSettings settings, TextInfo textInfo)
public Vector2 GetPreferredValues(TextGenerationSettings settings, TextInfo textInfo)
private void Prepare(TextGenerationSettings generationSettings, TextInfo textInfo)
private void GenerateTextMesh(TextGenerationSettings generationSettings, TextInfo textInfo)
private void SaveWordWrappingState(WordWrapState& state, int index, int count, TextInfo textInfo)
protected int RestoreWordWrappingState(WordWrapState& state, TextInfo textInfo)
private bool ValidateRichTextTag(string sourceText, Int32& readIndex, Int32& writeIndex, TextGenerationSettings generationSettings, TextInfo textInfo)
protected bool ValidateHtmlTag(Int32[] chars, int startIndex, Int32& endIndex, TextGenerationSettings generationSettings, TextInfo textInfo)
private void SaveGlyphVertexInfo(float padding, float stylePadding, Color32 vertexColor, TextGenerationSettings generationSettings, TextInfo textInfo)
private void SaveSpriteVertexInfo(Color32 vertexColor, TextGenerationSettings generationSettings, TextInfo textInfo)
private void DrawUnderlineMesh(Vector3 start, Vector3 end, Int32& index, float startScale, float endScale, float maxScale, float sdfScale, Color32 underlineColor, TextGenerationSettings generationSettings, TextInfo textInfo)
private void DrawTextHighlight(Vector3 start, Vector3 end, Int32& index, Color32 highlightColor, TextGenerationSettings generationSettings, TextInfo textInfo)
private void ClearMesh(bool updateMesh, TextInfo textInfo)
private void EnableMasking()
private void DisableMasking()
private void SetArraySizes(Int32[] chars, TextGenerationSettings generationSettings, TextInfo textInfo)
private void ComputeMarginSize(Rect rect, Vector4 margins)
private void GetSpecialCharacters(FontAsset fontAsset)
private float GetPaddingForMaterial(Material material, bool extraPadding)
private float GetPreferredWidthInternal(TextGenerationSettings generationSettings, TextInfo textInfo)
private float GetPreferredHeightInternal(TextGenerationSettings generationSettings, TextInfo textInfo)
private Vector2 GetPreferredValuesInternal(TextGenerationSettings generationSettings, TextInfo textInfo)
protected Vector2 CalculatePreferredValues(float defaultFontSize, Vector2 marginSize, bool ignoreTextAutoSizing, TextGenerationSettings generationSettings, TextInfo textInfo)
}
internal UnityEngine.TextCore.TextGeneratorUtilities : object {
public Vector2 largePositiveVector2
public Vector2 largeNegativeVector2
public float largePositiveFloat
public float largeNegativeFloat
public bool Approximately(float a, float b)
public Color32 HexCharsToColor(Char[] hexChars, int tagCount)
public Color32 HexCharsToColor(Char[] hexChars, int startIndex, int length)
public int HexToInt(char hex)
public float ConvertToFloat(Char[] chars, int startIndex, int length)
public float ConvertToFloat(Char[] chars, int startIndex, int length, Int32& lastIndex)
public Vector2 PackUV(float x, float y, float scale)
public void StringToCharArray(string sourceText, Int32[]& charBuffer, RichTextTagStack`1& styleStack, TextGenerationSettings generationSettings)
private void ResizeInternalArray(T[]& array)
internal void ResizeArray(T[] array)
private bool IsTagName(String& text, string tag, int index)
private bool IsTagName(Int32[]& text, string tag, int index)
private bool ReplaceOpeningStyleTag(Int32[]& sourceText, int srcIndex, Int32& srcOffset, Int32[]& charBuffer, Int32& writeIndex, RichTextTagStack`1& styleStack)
private bool ReplaceOpeningStyleTag(String& sourceText, int srcIndex, Int32& srcOffset, Int32[]& charBuffer, Int32& writeIndex, RichTextTagStack`1& styleStack)
private void ReplaceClosingStyleTag(Int32[]& charBuffer, Int32& writeIndex, RichTextTagStack`1& styleStack)
private int GetUtf32(string text, int i)
private int GetUtf16(string text, int i)
private int GetTagHashCode(Int32[]& text, int index, Int32& closeIndex)
private int GetTagHashCode(String& text, int index, Int32& closeIndex)
public void FillCharacterVertexBuffers(int i, TextGenerationSettings generationSettings, TextInfo textInfo)
public void FillSpriteVertexBuffers(int i, TextGenerationSettings generationSettings, TextInfo textInfo)
public void AdjustLineOffset(int startIndex, int endIndex, float offset, TextInfo textInfo)
public void ResizeLineExtents(int size, TextInfo textInfo)
public FontStyles LegacyStyleToNewStyle(FontStyle fontStyle)
public TextAlignment LegacyAlignmentToNewAlignment(TextAnchor anchor)
}
internal UnityEngine.TextCore.TextGradientPreset : ScriptableObject {
public ColorMode colorMode
public Color topLeft
public Color topRight
public Color bottomLeft
public Color bottomRight
public void .ctor(Color color)
public void .ctor(Color color0, Color color1, Color color2, Color color3)
}
internal UnityEngine.TextCore.TextInfo : object {
private Vector2 s_InfinityVectorPositive
private Vector2 s_InfinityVectorNegative
public int characterCount
public int spriteCount
public int spaceCount
public int wordCount
public int linkCount
public int lineCount
public int pageCount
public int materialCount
public TextElementInfo[] textElementInfo
public WordInfo[] wordInfo
public LinkInfo[] linkInfo
public LineInfo[] lineInfo
public PageInfo[] pageInfo
public MeshInfo[] meshInfo
public bool isDirty
internal void Clear()
internal void ClearMeshInfo(bool updateMesh)
internal void ClearLineInfo()
internal void Resize(T[]& array, int size)
internal void Resize(T[]& array, int size, bool isBlockAllocated)
}
internal UnityEngine.TextCore.TextOverflowMode : Enum {
public int value__
public TextOverflowMode Overflow
public TextOverflowMode Ellipsis
public TextOverflowMode Masking
public TextOverflowMode Truncate
public TextOverflowMode ScrollRect
public TextOverflowMode Page
public TextOverflowMode Linked
}
internal UnityEngine.TextCore.TextSettings : ScriptableObject {
private string k_DefaultLeadingCharacters
private string k_DefaultFollowingCharacters
private TextSettings s_Instance
private int m_missingGlyphCharacter
private bool m_warningsDisabled
private FontAsset m_defaultFontAsset
private string m_defaultFontAssetPath
private List`1<FontAsset> m_fallbackFontAssets
private bool m_matchMaterialPreset
private TextSpriteAsset m_defaultSpriteAsset
private string m_defaultSpriteAssetPath
private string m_defaultColorGradientPresetsPath
private TextStyleSheet m_defaultStyleSheet
private TextAsset m_leadingCharacters
private TextAsset m_followingCharacters
private LineBreakingTable m_linebreakingRules
public int missingGlyphCharacter
public bool warningsDisabled
public FontAsset defaultFontAsset
public string defaultFontAssetPath
public List`1<FontAsset> fallbackFontAssets
public bool matchMaterialPreset
public TextSpriteAsset defaultSpriteAsset
public string defaultSpriteAssetPath
public string defaultColorGradientPresetsPath
public TextStyleSheet defaultStyleSheet
public LineBreakingTable linebreakingRules
public TextSettings instance
public int get_missingGlyphCharacter()
public void set_missingGlyphCharacter(int value)
public bool get_warningsDisabled()
public void set_warningsDisabled(bool value)
public FontAsset get_defaultFontAsset()
public void set_defaultFontAsset(FontAsset value)
public string get_defaultFontAssetPath()
public void set_defaultFontAssetPath(string value)
public List`1<FontAsset> get_fallbackFontAssets()
public void set_fallbackFontAssets(List`1<FontAsset> value)
public bool get_matchMaterialPreset()
public void set_matchMaterialPreset(bool value)
public TextSpriteAsset get_defaultSpriteAsset()
public void set_defaultSpriteAsset(TextSpriteAsset value)
public string get_defaultSpriteAssetPath()
public void set_defaultSpriteAssetPath(string value)
public string get_defaultColorGradientPresetsPath()
public void set_defaultColorGradientPresetsPath(string value)
public TextStyleSheet get_defaultStyleSheet()
public void set_defaultStyleSheet(TextStyleSheet value)
public LineBreakingTable get_linebreakingRules()
public TextSettings get_instance()
public void LoadLinebreakingRules()
private Dictionary`2<int, char> GetCharacters(string text)
}
internal UnityEngine.TextCore.TextSpriteAsset : ScriptableObject {
internal Dictionary`2<UInt32, int> m_UnicodeLookup
internal Dictionary`2<int, int> m_NameLookup
internal Dictionary`2<UInt32, int> m_GlyphIndexLookup
private string m_Version
private int m_HashCode
public Texture spriteSheet
private Material m_Material
private int m_MaterialHashCode
private List`1<SpriteCharacter> m_SpriteCharacterTable
private List`1<SpriteGlyph> m_SpriteGlyphTable
public List`1<TextSpriteAsset> fallbackSpriteAssets
internal bool m_IsSpriteAssetLookupTablesDirty
private List`1<int> s_SearchedSpriteAssets
public string version
public int hashCode
public Material material
public int materialHashCode
public List`1<SpriteCharacter> spriteCharacterTable
public List`1<SpriteGlyph> spriteGlyphTable
public string get_version()
public void set_version(string value)
public int get_hashCode()
public void set_hashCode(int value)
public Material get_material()
public void set_material(Material value)
public int get_materialHashCode()
public List`1<SpriteCharacter> get_spriteCharacterTable()
internal void set_spriteCharacterTable(List`1<SpriteCharacter> value)
public List`1<SpriteGlyph> get_spriteGlyphTable()
internal void set_spriteGlyphTable(List`1<SpriteGlyph> value)
private void Awake()
private Material GetDefaultSpriteMaterial()
public void UpdateLookupTables()
public int GetSpriteIndexFromHashcode(int hashCode)
public int GetSpriteIndexFromUnicode(UInt32 unicode)
public int GetSpriteIndexFromName(string spriteName)
public TextSpriteAsset SearchForSpriteByUnicode(TextSpriteAsset spriteAsset, UInt32 unicode, bool includeFallbacks, Int32& spriteIndex)
private TextSpriteAsset SearchForSpriteByUnicodeInternal(List`1<TextSpriteAsset> spriteAssets, UInt32 unicode, bool includeFallbacks, Int32& spriteIndex)
private TextSpriteAsset SearchForSpriteByUnicodeInternal(TextSpriteAsset spriteAsset, UInt32 unicode, bool includeFallbacks, Int32& spriteIndex)
public TextSpriteAsset SearchForSpriteByHashCode(TextSpriteAsset spriteAsset, int hashCode, bool includeFallbacks, Int32& spriteIndex)
private TextSpriteAsset SearchForSpriteByHashCodeInternal(List`1<TextSpriteAsset> spriteAssets, int hashCode, bool searchFallbacks, Int32& spriteIndex)
private TextSpriteAsset SearchForSpriteByHashCodeInternal(TextSpriteAsset spriteAsset, int hashCode, bool searchFallbacks, Int32& spriteIndex)
public void SortGlyphTable()
internal void SortCharacterTable()
internal void SortGlyphAndCharacterTables()
}
internal UnityEngine.TextCore.TextStyle : object {
private string m_Name
private int m_HashCode
private string m_OpeningDefinition
private string m_ClosingDefinition
private Int32[] m_OpeningTagArray
private Int32[] m_ClosingTagArray
public string name
public int hashCode
public string styleOpeningDefinition
public string styleClosingDefinition
public Int32[] styleOpeningTagArray
public Int32[] styleClosingTagArray
public string get_name()
public void set_name(string value)
public int get_hashCode()
public void set_hashCode(int value)
public string get_styleOpeningDefinition()
public string get_styleClosingDefinition()
public Int32[] get_styleOpeningTagArray()
public Int32[] get_styleClosingTagArray()
public void RefreshStyle()
}
internal UnityEngine.TextCore.TextStyleSheet : ScriptableObject {
private TextStyleSheet s_Instance
private List`1<TextStyle> m_StyleList
private Dictionary`2<int, TextStyle> m_StyleDictionary
public TextStyleSheet instance
public TextStyleSheet get_instance()
public TextStyleSheet LoadDefaultStyleSheet()
public TextStyle GetStyle(int hashCode)
private TextStyle GetStyleInternal(int hashCode)
public void UpdateStyleDictionaryKey(int old_key, int new_key)
public void RefreshStyles()
private void LoadStyleDictionaryInternal()
}
internal UnityEngine.TextCore.TextureMapping : Enum {
public int value__
public TextureMapping Character
public TextureMapping Line
public TextureMapping Paragraph
public TextureMapping MatchAspect
}
internal UnityEngine.TextCore.TextUtilities : object {
private Vector3[] s_RectWorldCorners
private string k_LookupStringL
private string k_LookupStringU
public bool IsIntersectingRectTransform(RectTransform rectTransform, Vector3 position, Camera camera)
private bool PointIntersectRectangle(Vector3 m, Vector3 a, Vector3 b, Vector3 c, Vector3 d)
public bool ScreenPointToWorldPointInRectangle(Transform transform, Vector2 screenPoint, Camera cam, Vector3& worldPoint)
private bool IntersectLinePlane(LineSegment line, Vector3 point, Vector3 normal, Vector3& intersectingPoint)
public float DistanceToLine(Vector3 a, Vector3 b, Vector3 point)
public char ToLowerFast(char c)
public char ToUpperFast(char c)
public UInt32 ToUpperASCIIFast(UInt32 c)
public UInt32 ToLowerASCIIFast(UInt32 c)
public int GetHashCodeCaseSensitive(string s)
public int GetHashCodeCaseInSensitive(string s)
public UInt32 GetSimpleHashCodeLowercase(string s)
public int HexToInt(char hex)
public int StringHexToInt(string s)
}
internal UnityEngine.TextCore.TextVertex : ValueType {
public Vector3 position
public Vector2 uv
public Vector2 uv2
public Vector2 uv4
public Color32 color
}
internal UnityEngine.TextCore.Unicode : Enum {
public UInt32 value__
public Unicode SPACE
public Unicode DOUBLE_QUOTE
public Unicode NUMBER_SIGN
public Unicode PERCENTAGE
public Unicode PLUS
public Unicode MINUS
public Unicode PERIOD
public Unicode HYPHEN_MINUS
public Unicode SOFT_HYPHEN
public Unicode HYPHEN
public Unicode NON_BREAKING_HYPHEN
public Unicode ZERO_WIDTH_SPACE
public Unicode RIGHT_SINGLE_QUOTATION
public Unicode APOSTROPHE
public Unicode WORD_JOINER
}
internal UnityEngine.TextCore.VertexSortingOrder : Enum {
public int value__
public VertexSortingOrder Normal
public VertexSortingOrder Reverse
}
internal UnityEngine.TextCore.VerticalAlignment : Enum {
public int value__
public VerticalAlignment Top
public VerticalAlignment Middle
public VerticalAlignment Bottom
public VerticalAlignment Baseline
public VerticalAlignment Midline
public VerticalAlignment Capline
}
internal UnityEngine.TextCore.WordInfo : ValueType {
public int firstCharacterIndex
public int lastCharacterIndex
public int characterCount
}
internal UnityEngine.TextCore.WordWrapState : ValueType {
public int previousWordBreak
public int totalCharacterCount
public int visibleCharacterCount
public int visibleSpriteCount
public int visibleLinkCount
public int firstCharacterIndex
public int firstVisibleCharacterIndex
public int lastCharacterIndex
public int lastVisibleCharIndex
public int lineNumber
public float maxCapHeight
public float maxAscender
public float maxDescender
public float maxLineAscender
public float maxLineDescender
public float previousLineAscender
public float xAdvance
public float preferredWidth
public float preferredHeight
public float previousLineScale
public int wordCount
public FontStyles fontStyle
public float fontScale
public float fontScaleMultiplier
public float currentFontSize
public float baselineOffset
public float lineOffset
public TextInfo textInfo
public LineInfo lineInfo
public Color32 vertexColor
public Color32 underlineColor
public Color32 strikethroughColor
public Color32 highlightColor
public FontStyleStack basicStyleStack
public RichTextTagStack`1<Color32> colorStack
public RichTextTagStack`1<Color32> underlineColorStack
public RichTextTagStack`1<Color32> strikethroughColorStack
public RichTextTagStack`1<Color32> highlightColorStack
public RichTextTagStack`1<TextGradientPreset> colorGradientStack
public RichTextTagStack`1<float> sizeStack
public RichTextTagStack`1<float> indentStack
public RichTextTagStack`1<FontWeight> fontWeightStack
public RichTextTagStack`1<int> styleStack
public RichTextTagStack`1<float> baselineStack
public RichTextTagStack`1<int> actionStack
public RichTextTagStack`1<MaterialReference> materialReferenceStack
public RichTextTagStack`1<TextAlignment> lineJustificationStack
public int spriteAnimationId
public FontAsset currentFontAsset
public TextSpriteAsset currentSpriteAsset
public Material currentMaterial
public int currentMaterialIndex
public Extents meshExtents
public bool tagNoParsing
public bool isNonBreakingSpace
}
internal UnityEngine.TextCore.XmlTagAttribute : ValueType {
public int nameHashCode
public TagValueType valueType
public int valueStartIndex
public int valueLength
public int valueHashCode
}
