internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public Mono.Messaging.AcknowledgeTypes : Enum {
public int value__
public AcknowledgeTypes FullReachQueue
public AcknowledgeTypes FullReceive
public AcknowledgeTypes NegativeReceive
public AcknowledgeTypes None
public AcknowledgeTypes NotAcknowledgeReachQueue
public AcknowledgeTypes NotAcknowledgeReceive
public AcknowledgeTypes PositiveArrival
public AcknowledgeTypes PositiveReceive
}
public Mono.Messaging.Acknowledgment : Enum {
public int value__
public Acknowledgment AccessDenied
public Acknowledgment BadDestinationQueue
public Acknowledgment BadEncryption
public Acknowledgment BadSignature
public Acknowledgment CouldNotEncrypt
public Acknowledgment HopCountExceeded
public Acknowledgment None
public Acknowledgment NotTransactionalMessage
public Acknowledgment NotTransactionalQueue
public Acknowledgment Purged
public Acknowledgment QueueDeleted
public Acknowledgment QueueExceedMaximumSize
public Acknowledgment QueuePurged
public Acknowledgment ReachQueue
public Acknowledgment ReachQueueTimeout
public Acknowledgment Receive
public Acknowledgment ReceiveTimeout
}
public Mono.Messaging.CompletedEventArgs : EventArgs {
private IAsyncResult _result
public IAsyncResult AsyncResult
public void .ctor(IAsyncResult result)
public IAsyncResult get_AsyncResult()
public void set_AsyncResult(IAsyncResult value)
}
public Mono.Messaging.CompletedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, CompletedEventArgs e)
public IAsyncResult BeginInvoke(object sender, CompletedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.Messaging.ConcurrentLinkedQueue`1 : object {
private Node`1<T, T> head
private Node`1<T, T> tail
public void Enqueue(T context)
public T Dequeue()
public string ToString()
}
public Mono.Messaging.ConnectionException : MonoMessagingException {
private QueueReference qRef
public QueueReference QRef
public void .ctor(QueueReference qRef, Exception e)
public void .ctor(QueueReference qRef)
public QueueReference get_QRef()
}
public Mono.Messaging.CryptographicProviderType : Enum {
public int value__
public CryptographicProviderType Dss
public CryptographicProviderType Fortezza
public CryptographicProviderType MicrosoftExchange
public CryptographicProviderType None
public CryptographicProviderType RsaFull
public CryptographicProviderType RsqSig
public CryptographicProviderType Ssl
public CryptographicProviderType SttAcq
public CryptographicProviderType SttBrnd
public CryptographicProviderType SttIss
public CryptographicProviderType SttMer
public CryptographicProviderType SttRoot
}
public Mono.Messaging.EncryptionAlgorithm : Enum {
public int value__
public EncryptionAlgorithm None
public EncryptionAlgorithm Rc2
public EncryptionAlgorithm Rc4
}
public Mono.Messaging.EncryptionRequired : Enum {
public int value__
public EncryptionRequired Body
public EncryptionRequired None
public EncryptionRequired Optional
}
public Mono.Messaging.HashAlgorithm : Enum {
public int value__
public HashAlgorithm Mac
public HashAlgorithm Md2
public HashAlgorithm Md4
public HashAlgorithm Md5
public HashAlgorithm None
public HashAlgorithm Sha
}
public Mono.Messaging.IMessage {
public AcknowledgeTypes AcknowledgeType
public Acknowledgment Acknowledgment
public IMessageQueue AdministrationQueue
public int AppSpecific
public DateTime ArrivedTime
public bool AttachSenderId
public bool Authenticated
public string AuthenticationProviderName
public CryptographicProviderType AuthenticationProviderType
public Stream BodyStream
public int BodyType
public Guid ConnectorType
public string CorrelationId
public IMessageQueue DestinationQueue
public Byte[] DestinationSymmetricKey
public Byte[] DigitalSignature
public EncryptionAlgorithm EncryptionAlgorithm
public Byte[] Extension
public HashAlgorithm HashAlgorithm
public string Id
public bool IsFirstInTransaction
public bool IsLastInTransaction
public string Label
public MessageType MessageType
public MessagePriority Priority
public bool Recoverable
public IMessageQueue ResponseQueue
public Byte[] SenderCertificate
public Byte[] SenderId
public long SenderVersion
public DateTime SentTime
public string SourceMachine
public TimeSpan TimeToBeReceived
public TimeSpan TimeToReachQueue
public string TransactionId
public IMessageQueue TransactionStatusQueue
public bool UseAuthentication
public bool UseDeadLetterQueue
public bool UseEncryption
public bool UseJournalQueue
public bool UseTracing
public AcknowledgeTypes get_AcknowledgeType()
public void set_AcknowledgeType(AcknowledgeTypes value)
public Acknowledgment get_Acknowledgment()
public IMessageQueue get_AdministrationQueue()
public void set_AdministrationQueue(IMessageQueue value)
public int get_AppSpecific()
public void set_AppSpecific(int value)
public DateTime get_ArrivedTime()
public bool get_AttachSenderId()
public void set_AttachSenderId(bool value)
public bool get_Authenticated()
public string get_AuthenticationProviderName()
public void set_AuthenticationProviderName(string value)
public CryptographicProviderType get_AuthenticationProviderType()
public void set_AuthenticationProviderType(CryptographicProviderType value)
public Stream get_BodyStream()
public void set_BodyStream(Stream value)
public int get_BodyType()
public void set_BodyType(int value)
public Guid get_ConnectorType()
public void set_ConnectorType(Guid value)
public string get_CorrelationId()
public void set_CorrelationId(string value)
public IMessageQueue get_DestinationQueue()
public Byte[] get_DestinationSymmetricKey()
public void set_DestinationSymmetricKey(Byte[] value)
public Byte[] get_DigitalSignature()
public void set_DigitalSignature(Byte[] value)
public EncryptionAlgorithm get_EncryptionAlgorithm()
public void set_EncryptionAlgorithm(EncryptionAlgorithm value)
public Byte[] get_Extension()
public void set_Extension(Byte[] value)
public HashAlgorithm get_HashAlgorithm()
public void set_HashAlgorithm(HashAlgorithm value)
public string get_Id()
public bool get_IsFirstInTransaction()
public bool get_IsLastInTransaction()
public string get_Label()
public void set_Label(string value)
public MessageType get_MessageType()
public MessagePriority get_Priority()
public void set_Priority(MessagePriority value)
public bool get_Recoverable()
public void set_Recoverable(bool value)
public IMessageQueue get_ResponseQueue()
public void set_ResponseQueue(IMessageQueue value)
public Byte[] get_SenderCertificate()
public void set_SenderCertificate(Byte[] value)
public Byte[] get_SenderId()
public long get_SenderVersion()
public DateTime get_SentTime()
public string get_SourceMachine()
public TimeSpan get_TimeToBeReceived()
public void set_TimeToBeReceived(TimeSpan value)
public TimeSpan get_TimeToReachQueue()
public void set_TimeToReachQueue(TimeSpan value)
public string get_TransactionId()
public IMessageQueue get_TransactionStatusQueue()
public void set_TransactionStatusQueue(IMessageQueue value)
public bool get_UseAuthentication()
public void set_UseAuthentication(bool value)
public bool get_UseDeadLetterQueue()
public void set_UseDeadLetterQueue(bool value)
public bool get_UseEncryption()
public void set_UseEncryption(bool value)
public bool get_UseJournalQueue()
public void set_UseJournalQueue(bool value)
public bool get_UseTracing()
public void set_UseTracing(bool value)
public void SetDeliveryInfo(Acknowledgment acknowledgment, DateTime arrivedTime, IMessageQueue destinationQueue, string id, MessageType messageType, Byte[] senderId, long senderVersion, DateTime sentTime, string sourceMachine, string transactionId)
}
public Mono.Messaging.IMessageEnumerator {
public IMessage Current
public IntPtr CursorHandle
public IMessage get_Current()
public IntPtr get_CursorHandle()
public void Close()
public void Dispose(bool disposing)
public bool MoveNext()
public bool MoveNext(TimeSpan timeout)
public IMessage RemoveCurrent()
public IMessage RemoveCurrent(IMessageQueueTransaction transaction)
public IMessage RemoveCurrent(MessageQueueTransactionType transactionType)
public IMessage RemoveCurrent(TimeSpan timeout)
public IMessage RemoveCurrent(TimeSpan timeout, IMessageQueueTransaction transaction)
public IMessage RemoveCurrent(TimeSpan timeout, MessageQueueTransactionType transactionType)
}
public Mono.Messaging.IMessageQueue {
public bool Authenticate
public short BasePriority
public bool CanRead
public bool CanWrite
public Guid Category
public DateTime CreateTime
public bool DenySharedReceive
public EncryptionRequired EncryptionRequired
public Guid Id
public DateTime LastModifyTime
public long MaximumJournalSize
public long MaximumQueueSize
public IntPtr ReadHandle
public ISynchronizeInvoke SynchronizingObject
public bool Transactional
public bool UseJournalQueue
public IntPtr WriteHandle
public QueueReference QRef
public bool get_Authenticate()
public void set_Authenticate(bool value)
public short get_BasePriority()
public void set_BasePriority(short value)
public bool get_CanRead()
public bool get_CanWrite()
public Guid get_Category()
public void set_Category(Guid value)
public DateTime get_CreateTime()
public bool get_DenySharedReceive()
public void set_DenySharedReceive(bool value)
public EncryptionRequired get_EncryptionRequired()
public void set_EncryptionRequired(EncryptionRequired value)
public Guid get_Id()
public DateTime get_LastModifyTime()
public long get_MaximumJournalSize()
public void set_MaximumJournalSize(long value)
public long get_MaximumQueueSize()
public void set_MaximumQueueSize(long value)
public IntPtr get_ReadHandle()
public ISynchronizeInvoke get_SynchronizingObject()
public void set_SynchronizingObject(ISynchronizeInvoke value)
public bool get_Transactional()
public bool get_UseJournalQueue()
public void set_UseJournalQueue(bool value)
public IntPtr get_WriteHandle()
public QueueReference get_QRef()
public void set_QRef(QueueReference value)
public void Close()
public void Purge()
public void Send(IMessage message)
public void Send(IMessage message, IMessageQueueTransaction transaction)
public void Send(IMessage message, MessageQueueTransactionType transactionType)
public IMessage Peek()
public IMessage Peek(TimeSpan timeout)
public IMessage PeekById(string id)
public IMessage PeekById(string id, TimeSpan timeout)
public IMessage PeekByCorrelationId(string correlationId)
public IMessage PeekByCorrelationId(string correlationId, TimeSpan timeout)
public IMessage Receive()
public IMessage Receive(TimeSpan timeout)
public IMessage Receive(IMessageQueueTransaction transaction)
public IMessage Receive(TimeSpan timeout, IMessageQueueTransaction transaction)
public IMessage Receive(MessageQueueTransactionType transactionType)
public IMessage Receive(TimeSpan timeout, MessageQueueTransactionType transactionType)
public IMessage ReceiveById(string id)
public IMessage ReceiveById(string id, TimeSpan timeout)
public IMessage ReceiveById(string id, IMessageQueueTransaction transaction)
public IMessage ReceiveById(string id, MessageQueueTransactionType transactionType)
public IMessage ReceiveById(string id, TimeSpan timeout, IMessageQueueTransaction transaction)
public IMessage ReceiveById(string id, TimeSpan timeout, MessageQueueTransactionType transactionType)
public IMessage ReceiveByCorrelationId(string correlationId)
public IMessage ReceiveByCorrelationId(string correlationId, TimeSpan timeout)
public IMessage ReceiveByCorrelationId(string correlationId, IMessageQueueTransaction transaction)
public IMessage ReceiveByCorrelationId(string correlationId, MessageQueueTransactionType transactionType)
public IMessage ReceiveByCorrelationId(string correlationId, TimeSpan timeout, IMessageQueueTransaction transaction)
public IMessage ReceiveByCorrelationId(string correlationId, TimeSpan timeout, MessageQueueTransactionType transactionType)
public IAsyncResult BeginPeek()
public IAsyncResult BeginPeek(TimeSpan timeout)
public IAsyncResult BeginPeek(TimeSpan timeout, object stateObject)
public IAsyncResult BeginPeek(TimeSpan timeout, object stateObject, AsyncCallback callback)
public IMessage EndPeek(IAsyncResult asyncResult)
public IAsyncResult BeginReceive()
public IAsyncResult BeginReceive(TimeSpan timeout)
public IAsyncResult BeginReceive(TimeSpan timeout, object stateObject)
public IAsyncResult BeginReceive(TimeSpan timeout, object stateObject, AsyncCallback callback)
public IMessage EndReceive(IAsyncResult asyncResult)
public IMessageEnumerator GetMessageEnumerator()
public void add_PeekCompleted(CompletedEventHandler value)
public void remove_PeekCompleted(CompletedEventHandler value)
public void add_ReceiveCompleted(CompletedEventHandler value)
public void remove_ReceiveCompleted(CompletedEventHandler value)
public void SendReceiveCompleted(IAsyncResult result)
public void SendPeekCompleted(IAsyncResult result)
}
public Mono.Messaging.IMessageQueueTransaction {
public MessageQueueTransactionStatus Status
public MessageQueueTransactionStatus get_Status()
public void Abort()
public void Begin()
public void Commit()
}
public Mono.Messaging.IMessagingProvider {
public bool Exists(QueueReference qRef)
public IMessageQueue CreateMessageQueue(QueueReference qRef, bool transactional)
public IMessageQueue GetMessageQueue(QueueReference qRef)
public IMessage CreateMessage()
public IMessageQueueTransaction CreateMessageQueueTransaction()
public void DeleteQueue(QueueReference qRef)
public IMessageQueue[] GetPublicQueues()
}
public Mono.Messaging.MessageBase : object {
private AcknowledgeTypes acknowledgeType
private Acknowledgment acknowledgment
private IMessageQueue administrationQueue
private int appSpecific
private DateTime arrivedTime
private bool attachSenderId
private bool authenticated
private string authenticationProviderName
private CryptographicProviderType authenticationProviderType
private Stream bodyStream
private int bodyType
private Guid connectorType
private string correlationId
private IMessageQueue destinationQueue
private Byte[] destinationSymmetricKey
private Byte[] digitalSignature
private EncryptionAlgorithm encryptionAlgorithm
private Byte[] extension
private HashAlgorithm hashAlgorithm
private string id
private bool isFirstInTransaction
private bool isLastInTransaction
private string label
private MessageType messageType
private MessagePriority priority
private bool recoverable
private IMessageQueue responseQueue
private Byte[] senderCertificate
private Byte[] senderId
private long senderVersion
private DateTime sentTime
private string sourceMachine
private TimeSpan timeToBeReceived
private TimeSpan timeToReachQueue
private string transactionId
private IMessageQueue transactionStatusQueue
private bool useAuthentication
private bool useDeadLetterQueue
private bool useEncryption
private bool useJournalQueue
private bool useTracing
private bool isDelivered
public AcknowledgeTypes AcknowledgeType
public Acknowledgment Acknowledgment
public IMessageQueue AdministrationQueue
public int AppSpecific
public DateTime ArrivedTime
public bool AttachSenderId
public bool Authenticated
public string AuthenticationProviderName
public CryptographicProviderType AuthenticationProviderType
public Stream BodyStream
public int BodyType
public Guid ConnectorType
public string CorrelationId
public IMessageQueue DestinationQueue
public Byte[] DestinationSymmetricKey
public Byte[] DigitalSignature
public EncryptionAlgorithm EncryptionAlgorithm
public Byte[] Extension
public HashAlgorithm HashAlgorithm
public string Id
public bool IsFirstInTransaction
public bool IsLastInTransaction
public string Label
public MessageType MessageType
public MessagePriority Priority
public bool Recoverable
public IMessageQueue ResponseQueue
public Byte[] SenderCertificate
public Byte[] SenderId
public long SenderVersion
public DateTime SentTime
public string SourceMachine
public TimeSpan TimeToBeReceived
public TimeSpan TimeToReachQueue
public string TransactionId
public IMessageQueue TransactionStatusQueue
public bool UseAuthentication
public bool UseDeadLetterQueue
public bool UseEncryption
public bool UseJournalQueue
public bool UseTracing
public AcknowledgeTypes get_AcknowledgeType()
public void set_AcknowledgeType(AcknowledgeTypes value)
public Acknowledgment get_Acknowledgment()
public IMessageQueue get_AdministrationQueue()
public void set_AdministrationQueue(IMessageQueue value)
public int get_AppSpecific()
public void set_AppSpecific(int value)
public DateTime get_ArrivedTime()
public bool get_AttachSenderId()
public void set_AttachSenderId(bool value)
public bool get_Authenticated()
public string get_AuthenticationProviderName()
public void set_AuthenticationProviderName(string value)
public CryptographicProviderType get_AuthenticationProviderType()
public void set_AuthenticationProviderType(CryptographicProviderType value)
public Stream get_BodyStream()
public void set_BodyStream(Stream value)
public int get_BodyType()
public void set_BodyType(int value)
public Guid get_ConnectorType()
public void set_ConnectorType(Guid value)
public string get_CorrelationId()
public void set_CorrelationId(string value)
public IMessageQueue get_DestinationQueue()
public Byte[] get_DestinationSymmetricKey()
public void set_DestinationSymmetricKey(Byte[] value)
public Byte[] get_DigitalSignature()
public void set_DigitalSignature(Byte[] value)
public EncryptionAlgorithm get_EncryptionAlgorithm()
public void set_EncryptionAlgorithm(EncryptionAlgorithm value)
public Byte[] get_Extension()
public void set_Extension(Byte[] value)
public HashAlgorithm get_HashAlgorithm()
public void set_HashAlgorithm(HashAlgorithm value)
public string get_Id()
public bool get_IsFirstInTransaction()
public bool get_IsLastInTransaction()
public string get_Label()
public void set_Label(string value)
public MessageType get_MessageType()
public MessagePriority get_Priority()
public void set_Priority(MessagePriority value)
public bool get_Recoverable()
public void set_Recoverable(bool value)
public IMessageQueue get_ResponseQueue()
public void set_ResponseQueue(IMessageQueue value)
public Byte[] get_SenderCertificate()
public void set_SenderCertificate(Byte[] value)
public Byte[] get_SenderId()
public long get_SenderVersion()
public DateTime get_SentTime()
public string get_SourceMachine()
public TimeSpan get_TimeToBeReceived()
public void set_TimeToBeReceived(TimeSpan value)
public TimeSpan get_TimeToReachQueue()
public void set_TimeToReachQueue(TimeSpan value)
public string get_TransactionId()
public IMessageQueue get_TransactionStatusQueue()
public void set_TransactionStatusQueue(IMessageQueue value)
public bool get_UseAuthentication()
public void set_UseAuthentication(bool value)
public bool get_UseDeadLetterQueue()
public void set_UseDeadLetterQueue(bool value)
public bool get_UseEncryption()
public void set_UseEncryption(bool value)
public bool get_UseJournalQueue()
public void set_UseJournalQueue(bool value)
public bool get_UseTracing()
public void set_UseTracing(bool value)
private void CheckDelivered()
public void SetDeliveryInfo(Acknowledgment acknowledgment, DateTime arrivedTime, IMessageQueue destinationQueue, string id, MessageType messageType, Byte[] senderId, long senderVersion, DateTime sentTime, string sourceMachine, string transactionId)
}
public Mono.Messaging.MessagePriority : Enum {
public int value__
public MessagePriority AboveNormal
public MessagePriority High
public MessagePriority Highest
public MessagePriority Low
public MessagePriority Lowest
public MessagePriority Normal
public MessagePriority VeryHigh
public MessagePriority VeryLow
}
public Mono.Messaging.MessageQueueBase : object {
private CompletedEventHandler PeekCompleted
private CompletedEventHandler ReceiveCompleted
protected IMessageQueue Queue
protected IMessageQueue get_Queue()
public void add_PeekCompleted(CompletedEventHandler value)
public void remove_PeekCompleted(CompletedEventHandler value)
public void add_ReceiveCompleted(CompletedEventHandler value)
public void remove_ReceiveCompleted(CompletedEventHandler value)
public IAsyncResult BeginPeek()
public IAsyncResult BeginPeek(TimeSpan timeout)
public IAsyncResult BeginPeek(TimeSpan timeout, object stateObject)
public IAsyncResult BeginPeek(TimeSpan timeout, object stateObject, AsyncCallback callback)
public IMessage EndPeek(IAsyncResult asyncResult)
public IAsyncResult BeginReceive()
public IAsyncResult BeginReceive(TimeSpan timeout)
public IAsyncResult BeginReceive(TimeSpan timeout, object stateObject)
public IAsyncResult BeginReceive(TimeSpan timeout, object stateObject, AsyncCallback callback)
public IMessage EndReceive(IAsyncResult asyncResult)
public void SendReceiveCompleted(IAsyncResult result)
public void SendPeekCompleted(IAsyncResult result)
internal void NullAsyncCallback(IAsyncResult result)
}
public Mono.Messaging.MessageQueueTransactionStatus : Enum {
public int value__
public MessageQueueTransactionStatus Aborted
public MessageQueueTransactionStatus Committed
public MessageQueueTransactionStatus Initialized
public MessageQueueTransactionStatus Pending
}
public Mono.Messaging.MessageQueueTransactionType : Enum {
public int value__
public MessageQueueTransactionType Automatic
public MessageQueueTransactionType None
public MessageQueueTransactionType Single
}
public Mono.Messaging.MessageType : Enum {
public int value__
public MessageType Acknowledgment
public MessageType Normal
public MessageType Report
}
public Mono.Messaging.MessageUnavailableException : MonoMessagingException {
public void .ctor(string msg)
public void .ctor(string msg, Exception e)
}
public Mono.Messaging.MessagingProviderLocator : object {
public TimeSpan InfiniteTimeout
private MessagingProviderLocator instance
private IMessagingProvider provider
private string MESSAGING_PROVIDER_KEY
private string RABBIT_MQ_CLASS_NAME
private string RABBIT_MQ_FULL_CLASS_NAME
private string RABBIT_MQ_ALIAS
public MessagingProviderLocator Instance
public MessagingProviderLocator get_Instance()
public IMessagingProvider GetProvider()
private string GetProviderClassName()
private IMessagingProvider CreateProvider(string className)
private Type ResolveType(string classNameOrAlias)
}
public Mono.Messaging.MonoMessagingException : Exception {
public void .ctor(string msg)
public void .ctor(string msg, Exception e)
}
public Mono.Messaging.QueueReference : object {
private Char[] DELIM
private string host
private bool isPrivate
private string queue
public string LOCALHOST
public QueueReference DEFAULT
private string PRIVATE_STR
public string Host
public string Queue
public bool IsPrivate
public void .ctor(string host, string queue, bool isPrivate)
public string get_Host()
public string get_Queue()
public bool get_IsPrivate()
public QueueReference SetHost(string host)
public QueueReference SetQueue(string queue)
public bool Equals(object other)
public bool Equals(QueueReference other)
public int GetHashCode()
public QueueReference Parse(string path)
public bool IsPrivateStr(string s)
public string RemoveLeadingSlashes(string s)
public string ToString()
public bool op_Equality(QueueReference a, QueueReference b)
public bool op_Inequality(QueueReference a, QueueReference b)
}
