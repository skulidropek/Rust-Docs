public Mono.Cecil.ArrayDimension : ValueType {
private Nullable`1<int> lower_bound
private Nullable`1<int> upper_bound
public Nullable`1<int> LowerBound
public Nullable`1<int> UpperBound
public bool IsSized
public Nullable`1<int> get_LowerBound()
public void set_LowerBound(Nullable`1<int> value)
public Nullable`1<int> get_UpperBound()
public void set_UpperBound(Nullable`1<int> value)
public bool get_IsSized()
public void .ctor(Nullable`1<int> lowerBound, Nullable`1<int> upperBound)
public string ToString()
}
public Mono.Cecil.ArrayMarshalInfo : MarshalInfo {
internal NativeType element_type
internal int size_parameter_index
internal int size
internal int size_parameter_multiplier
public NativeType ElementType
public int SizeParameterIndex
public int Size
public int SizeParameterMultiplier
public NativeType get_ElementType()
public void set_ElementType(NativeType value)
public int get_SizeParameterIndex()
public void set_SizeParameterIndex(int value)
public int get_Size()
public void set_Size(int value)
public int get_SizeParameterMultiplier()
public void set_SizeParameterMultiplier(int value)
}
public Mono.Cecil.ArrayType : TypeSpecification {
private Collection`1<ArrayDimension> dimensions
public Collection`1<ArrayDimension> Dimensions
public int Rank
public bool IsVector
public bool IsValueType
public string Name
public string FullName
private string Suffix
public bool IsArray
public Collection`1<ArrayDimension> get_Dimensions()
public int get_Rank()
public bool get_IsVector()
public bool get_IsValueType()
public void set_IsValueType(bool value)
public string get_Name()
public string get_FullName()
private string get_Suffix()
public bool get_IsArray()
public void .ctor(TypeReference type)
public void .ctor(TypeReference type, int rank)
}
public Mono.Cecil.AssemblyAttributes : Enum {
public UInt32 value__
public AssemblyAttributes PublicKey
public AssemblyAttributes SideBySideCompatible
public AssemblyAttributes Retargetable
public AssemblyAttributes WindowsRuntime
public AssemblyAttributes DisableJITCompileOptimizer
public AssemblyAttributes EnableJITCompileTracking
}
public Mono.Cecil.AssemblyDefinition : object {
private AssemblyNameDefinition name
internal ModuleDefinition main_module
private Collection`1<ModuleDefinition> modules
private Collection`1<CustomAttribute> custom_attributes
private Collection`1<SecurityDeclaration> security_declarations
public AssemblyNameDefinition Name
public string FullName
public MetadataToken MetadataToken
public Collection`1<ModuleDefinition> Modules
public ModuleDefinition MainModule
public MethodDefinition EntryPoint
public bool HasCustomAttributes
public Collection`1<CustomAttribute> CustomAttributes
public bool HasSecurityDeclarations
public Collection`1<SecurityDeclaration> SecurityDeclarations
public AssemblyNameDefinition get_Name()
public void set_Name(AssemblyNameDefinition value)
public string get_FullName()
public MetadataToken get_MetadataToken()
public void set_MetadataToken(MetadataToken value)
public Collection`1<ModuleDefinition> get_Modules()
public ModuleDefinition get_MainModule()
public MethodDefinition get_EntryPoint()
public void set_EntryPoint(MethodDefinition value)
public bool get_HasCustomAttributes()
public Collection`1<CustomAttribute> get_CustomAttributes()
public bool get_HasSecurityDeclarations()
public Collection`1<SecurityDeclaration> get_SecurityDeclarations()
public AssemblyDefinition CreateAssembly(AssemblyNameDefinition assemblyName, string moduleName, ModuleKind kind)
public AssemblyDefinition CreateAssembly(AssemblyNameDefinition assemblyName, string moduleName, ModuleParameters parameters)
public AssemblyDefinition ReadAssembly(string fileName)
public AssemblyDefinition ReadAssembly(string fileName, ReaderParameters parameters)
public AssemblyDefinition ReadAssembly(Stream stream)
public AssemblyDefinition ReadAssembly(Stream stream, ReaderParameters parameters)
private AssemblyDefinition ReadAssembly(ModuleDefinition module)
public void Write(string fileName)
public void Write(Stream stream)
public void Write(string fileName, WriterParameters parameters)
public void Write(Stream stream, WriterParameters parameters)
public string ToString()
}
public Mono.Cecil.AssemblyHashAlgorithm : Enum {
public UInt32 value__
public AssemblyHashAlgorithm None
public AssemblyHashAlgorithm Reserved
public AssemblyHashAlgorithm SHA1
}
public Mono.Cecil.AssemblyLinkedResource : Resource {
private AssemblyNameReference reference
public AssemblyNameReference Assembly
public ResourceType ResourceType
public AssemblyNameReference get_Assembly()
public void set_Assembly(AssemblyNameReference value)
public ResourceType get_ResourceType()
public void .ctor(string name, ManifestResourceAttributes flags)
public void .ctor(string name, ManifestResourceAttributes flags, AssemblyNameReference reference)
}
public Mono.Cecil.AssemblyNameDefinition : AssemblyNameReference {
public Byte[] Hash
public Byte[] get_Hash()
public void .ctor(string name, Version version)
}
public Mono.Cecil.AssemblyNameReference : object {
private string name
private string culture
private Version version
private UInt32 attributes
private Byte[] public_key
private Byte[] public_key_token
private AssemblyHashAlgorithm hash_algorithm
private Byte[] hash
internal MetadataToken token
private string full_name
public string Name
public string Culture
public Version Version
public AssemblyAttributes Attributes
public bool HasPublicKey
public bool IsSideBySideCompatible
public bool IsRetargetable
public bool IsWindowsRuntime
public Byte[] PublicKey
public Byte[] PublicKeyToken
public MetadataScopeType MetadataScopeType
public string FullName
public AssemblyHashAlgorithm HashAlgorithm
public Byte[] Hash
public MetadataToken MetadataToken
public string get_Name()
public void set_Name(string value)
public string get_Culture()
public void set_Culture(string value)
public Version get_Version()
public void set_Version(Version value)
public AssemblyAttributes get_Attributes()
public void set_Attributes(AssemblyAttributes value)
public bool get_HasPublicKey()
public void set_HasPublicKey(bool value)
public bool get_IsSideBySideCompatible()
public void set_IsSideBySideCompatible(bool value)
public bool get_IsRetargetable()
public void set_IsRetargetable(bool value)
public bool get_IsWindowsRuntime()
public void set_IsWindowsRuntime(bool value)
public Byte[] get_PublicKey()
public void set_PublicKey(Byte[] value)
public Byte[] get_PublicKeyToken()
public void set_PublicKeyToken(Byte[] value)
private Byte[] HashPublicKey()
public MetadataScopeType get_MetadataScopeType()
public string get_FullName()
public AssemblyNameReference Parse(string fullName)
public AssemblyHashAlgorithm get_HashAlgorithm()
public void set_HashAlgorithm(AssemblyHashAlgorithm value)
public Byte[] get_Hash()
public void set_Hash(Byte[] value)
public MetadataToken get_MetadataToken()
public void set_MetadataToken(MetadataToken value)
public void .ctor(string name, Version version)
public string ToString()
}
internal Mono.Cecil.AssemblyRefTable : MetadataTable`1<Row`9<ushort, ushort, ushort, ushort, AssemblyAttributes, UInt32, UInt32, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.AssemblyResolutionException : FileNotFoundException {
private AssemblyNameReference reference
public AssemblyNameReference AssemblyReference
public AssemblyNameReference get_AssemblyReference()
public void .ctor(AssemblyNameReference reference)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public Mono.Cecil.AssemblyResolveEventArgs : EventArgs {
private AssemblyNameReference reference
public AssemblyNameReference AssemblyReference
public AssemblyNameReference get_AssemblyReference()
public void .ctor(AssemblyNameReference reference)
}
public Mono.Cecil.AssemblyResolveEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public AssemblyDefinition Invoke(object sender, AssemblyNameReference reference)
public IAsyncResult BeginInvoke(object sender, AssemblyNameReference reference, AsyncCallback callback, object object)
public AssemblyDefinition EndInvoke(IAsyncResult result)
}
internal Mono.Cecil.AssemblyTable : OneRowTable`1<Row`9<AssemblyHashAlgorithm, ushort, ushort, ushort, ushort, AssemblyAttributes, UInt32, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.BaseAssemblyResolver : object {
private bool on_mono
private Collection`1<string> directories
private Collection`1<string> gac_paths
private AssemblyResolveEventHandler ResolveFailure
public void AddSearchDirectory(string directory)
public void RemoveSearchDirectory(string directory)
public String[] GetSearchDirectories()
public AssemblyDefinition Resolve(string fullName)
public AssemblyDefinition Resolve(string fullName, ReaderParameters parameters)
public void add_ResolveFailure(AssemblyResolveEventHandler value)
public void remove_ResolveFailure(AssemblyResolveEventHandler value)
private AssemblyDefinition GetAssembly(string file, ReaderParameters parameters)
public AssemblyDefinition Resolve(AssemblyNameReference name)
public AssemblyDefinition Resolve(AssemblyNameReference name, ReaderParameters parameters)
private AssemblyDefinition SearchDirectory(AssemblyNameReference name, IEnumerable`1<string> directories, ReaderParameters parameters)
private bool IsZero(Version version)
private AssemblyDefinition GetCorlib(AssemblyNameReference reference, ReaderParameters parameters)
private Collection`1<string> GetGacPaths()
private Collection`1<string> GetDefaultMonoGacPaths()
private string GetCurrentMonoGac()
private AssemblyDefinition GetAssemblyInGac(AssemblyNameReference reference, ReaderParameters parameters)
private AssemblyDefinition GetAssemblyInMonoGac(AssemblyNameReference reference, ReaderParameters parameters)
private AssemblyDefinition GetAssemblyInNetGac(AssemblyNameReference reference, ReaderParameters parameters)
private string GetAssemblyFile(AssemblyNameReference reference, string prefix, string gac)
}
public Mono.Cecil.ByReferenceType : TypeSpecification {
public string Name
public string FullName
public bool IsValueType
public bool IsByReference
public string get_Name()
public string get_FullName()
public bool get_IsValueType()
public void set_IsValueType(bool value)
public bool get_IsByReference()
public void .ctor(TypeReference type)
}
public Mono.Cecil.CallSite : object {
private MethodReference signature
public bool HasThis
public bool ExplicitThis
public MethodCallingConvention CallingConvention
public bool HasParameters
public Collection`1<ParameterDefinition> Parameters
public TypeReference ReturnType
public MethodReturnType MethodReturnType
public string Name
public string Namespace
public ModuleDefinition Module
public IMetadataScope Scope
public MetadataToken MetadataToken
public string FullName
public bool get_HasThis()
public void set_HasThis(bool value)
public bool get_ExplicitThis()
public void set_ExplicitThis(bool value)
public MethodCallingConvention get_CallingConvention()
public void set_CallingConvention(MethodCallingConvention value)
public bool get_HasParameters()
public Collection`1<ParameterDefinition> get_Parameters()
public TypeReference get_ReturnType()
public void set_ReturnType(TypeReference value)
public MethodReturnType get_MethodReturnType()
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public ModuleDefinition get_Module()
public IMetadataScope get_Scope()
public MetadataToken get_MetadataToken()
public void set_MetadataToken(MetadataToken value)
public string get_FullName()
public void .ctor(TypeReference returnType)
public string ToString()
}
public Mono.Cecil.Cil.Code : Enum {
public int value__
public Code Nop
public Code Break
public Code Ldarg_0
public Code Ldarg_1
public Code Ldarg_2
public Code Ldarg_3
public Code Ldloc_0
public Code Ldloc_1
public Code Ldloc_2
public Code Ldloc_3
public Code Stloc_0
public Code Stloc_1
public Code Stloc_2
public Code Stloc_3
public Code Ldarg_S
public Code Ldarga_S
public Code Starg_S
public Code Ldloc_S
public Code Ldloca_S
public Code Stloc_S
public Code Ldnull
public Code Ldc_I4_M1
public Code Ldc_I4_0
public Code Ldc_I4_1
public Code Ldc_I4_2
public Code Ldc_I4_3
public Code Ldc_I4_4
public Code Ldc_I4_5
public Code Ldc_I4_6
public Code Ldc_I4_7
public Code Ldc_I4_8
public Code Ldc_I4_S
public Code Ldc_I4
public Code Ldc_I8
public Code Ldc_R4
public Code Ldc_R8
public Code Dup
public Code Pop
public Code Jmp
public Code Call
public Code Calli
public Code Ret
public Code Br_S
public Code Brfalse_S
public Code Brtrue_S
public Code Beq_S
public Code Bge_S
public Code Bgt_S
public Code Ble_S
public Code Blt_S
public Code Bne_Un_S
public Code Bge_Un_S
public Code Bgt_Un_S
public Code Ble_Un_S
public Code Blt_Un_S
public Code Br
public Code Brfalse
public Code Brtrue
public Code Beq
public Code Bge
public Code Bgt
public Code Ble
public Code Blt
public Code Bne_Un
public Code Bge_Un
public Code Bgt_Un
public Code Ble_Un
public Code Blt_Un
public Code Switch
public Code Ldind_I1
public Code Ldind_U1
public Code Ldind_I2
public Code Ldind_U2
public Code Ldind_I4
public Code Ldind_U4
public Code Ldind_I8
public Code Ldind_I
public Code Ldind_R4
public Code Ldind_R8
public Code Ldind_Ref
public Code Stind_Ref
public Code Stind_I1
public Code Stind_I2
public Code Stind_I4
public Code Stind_I8
public Code Stind_R4
public Code Stind_R8
public Code Add
public Code Sub
public Code Mul
public Code Div
public Code Div_Un
public Code Rem
public Code Rem_Un
public Code And
public Code Or
public Code Xor
public Code Shl
public Code Shr
public Code Shr_Un
public Code Neg
public Code Not
public Code Conv_I1
public Code Conv_I2
public Code Conv_I4
public Code Conv_I8
public Code Conv_R4
public Code Conv_R8
public Code Conv_U4
public Code Conv_U8
public Code Callvirt
public Code Cpobj
public Code Ldobj
public Code Ldstr
public Code Newobj
public Code Castclass
public Code Isinst
public Code Conv_R_Un
public Code Unbox
public Code Throw
public Code Ldfld
public Code Ldflda
public Code Stfld
public Code Ldsfld
public Code Ldsflda
public Code Stsfld
public Code Stobj
public Code Conv_Ovf_I1_Un
public Code Conv_Ovf_I2_Un
public Code Conv_Ovf_I4_Un
public Code Conv_Ovf_I8_Un
public Code Conv_Ovf_U1_Un
public Code Conv_Ovf_U2_Un
public Code Conv_Ovf_U4_Un
public Code Conv_Ovf_U8_Un
public Code Conv_Ovf_I_Un
public Code Conv_Ovf_U_Un
public Code Box
public Code Newarr
public Code Ldlen
public Code Ldelema
public Code Ldelem_I1
public Code Ldelem_U1
public Code Ldelem_I2
public Code Ldelem_U2
public Code Ldelem_I4
public Code Ldelem_U4
public Code Ldelem_I8
public Code Ldelem_I
public Code Ldelem_R4
public Code Ldelem_R8
public Code Ldelem_Ref
public Code Stelem_I
public Code Stelem_I1
public Code Stelem_I2
public Code Stelem_I4
public Code Stelem_I8
public Code Stelem_R4
public Code Stelem_R8
public Code Stelem_Ref
public Code Ldelem_Any
public Code Stelem_Any
public Code Unbox_Any
public Code Conv_Ovf_I1
public Code Conv_Ovf_U1
public Code Conv_Ovf_I2
public Code Conv_Ovf_U2
public Code Conv_Ovf_I4
public Code Conv_Ovf_U4
public Code Conv_Ovf_I8
public Code Conv_Ovf_U8
public Code Refanyval
public Code Ckfinite
public Code Mkrefany
public Code Ldtoken
public Code Conv_U2
public Code Conv_U1
public Code Conv_I
public Code Conv_Ovf_I
public Code Conv_Ovf_U
public Code Add_Ovf
public Code Add_Ovf_Un
public Code Mul_Ovf
public Code Mul_Ovf_Un
public Code Sub_Ovf
public Code Sub_Ovf_Un
public Code Endfinally
public Code Leave
public Code Leave_S
public Code Stind_I
public Code Conv_U
public Code Arglist
public Code Ceq
public Code Cgt
public Code Cgt_Un
public Code Clt
public Code Clt_Un
public Code Ldftn
public Code Ldvirtftn
public Code Ldarg
public Code Ldarga
public Code Starg
public Code Ldloc
public Code Ldloca
public Code Stloc
public Code Localloc
public Code Endfilter
public Code Unaligned
public Code Volatile
public Code Tail
public Code Initobj
public Code Constrained
public Code Cpblk
public Code Initblk
public Code No
public Code Rethrow
public Code Sizeof
public Code Refanytype
public Code Readonly
}
internal Mono.Cecil.Cil.CodeReader : ByteBuffer {
internal MetadataReader reader
private int start
private Section code_section
private MethodDefinition method
private MethodBody body
private int Offset
private int get_Offset()
public void .ctor(Section section, MetadataReader reader)
public MethodBody ReadMethodBody(MethodDefinition method)
public void MoveTo(int rva)
private bool IsInSection(int rva)
private void ReadMethodBody()
private void ReadFatMethod()
public VariableDefinitionCollection ReadVariables(MetadataToken local_var_token)
private void ReadCode()
private OpCode ReadOpCode()
private object ReadOperand(Instruction instruction)
public string GetString(MetadataToken token)
public ParameterDefinition GetParameter(int index)
public VariableDefinition GetVariable(int index)
public CallSite GetCallSite(MetadataToken token)
private void ResolveBranches(Collection`1<Instruction> instructions)
private Instruction GetInstruction(int offset)
private Instruction GetInstruction(Collection`1<Instruction> instructions, int offset)
private void ReadSection()
private void ReadSmallSection()
private void ReadFatSection()
private void ReadExceptionHandlers(int count, Func`1<int> read_entry, Func`1<int> read_length)
private void ReadExceptionHandlerSpecific(ExceptionHandler handler)
private void Align(int align)
public MetadataToken ReadToken()
public ByteBuffer PatchRawMethodBody(MethodDefinition method, CodeWriter writer, MethodSymbols& symbols)
private void PatchRawFatMethod(ByteBuffer buffer, MethodSymbols symbols, CodeWriter writer, MetadataToken& local_var_token)
private MetadataToken GetOriginalToken(MetadataBuilder metadata, MethodDefinition method)
private void PatchRawCode(ByteBuffer buffer, int code_size, CodeWriter writer)
private void PatchRawSection(ByteBuffer buffer, MetadataBuilder metadata)
private void PatchRawSmallSection(ByteBuffer buffer, MetadataBuilder metadata)
private void PatchRawFatSection(ByteBuffer buffer, MetadataBuilder metadata)
private void PatchRawExceptionHandlers(ByteBuffer buffer, MetadataBuilder metadata, int count, bool fat_entry)
private int <ReadSmallSection>b__25_0()
private int <ReadSmallSection>b__25_1()
}
internal Mono.Cecil.Cil.CodeWriter : ByteBuffer {
private UInt32 code_base
internal MetadataBuilder metadata
private Dictionary`2<UInt32, MetadataToken> standalone_signatures
private UInt32 current
private MethodBody body
public void .ctor(MetadataBuilder metadata)
public UInt32 WriteMethodBody(MethodDefinition method)
private bool IsEmptyMethodBody(MethodBody body)
private bool IsUnresolved(MethodDefinition method)
private void WriteUnresolvedMethodBody(MethodDefinition method)
private MetadataToken GetLocalVarToken(ByteBuffer buffer, MethodSymbols symbols)
private void WriteResolvedMethodBody(MethodDefinition method)
private void WriteFatHeader()
private void WriteInstructions()
private void WriteOpCode(OpCode opcode)
private void WriteOperand(Instruction instruction)
private int GetTargetOffset(Instruction instruction)
private UInt32 GetUserStringIndex(string string)
private int GetVariableIndex(VariableDefinition variable)
private int GetParameterIndex(ParameterDefinition parameter)
private bool RequiresFatHeader()
private void ComputeHeader()
private void ComputeExceptionHandlerStackSize(Dictionary`2& stack_sizes)
private void AddExceptionStackSize(Instruction handler_start, Dictionary`2& stack_sizes)
private void ComputeStackSize(Instruction instruction, Dictionary`2& stack_sizes, Int32& stack_size, Int32& max_stack)
private void CopyBranchStackSize(Instruction instruction, Dictionary`2& stack_sizes, int stack_size)
private void CopyBranchStackSize(Dictionary`2& stack_sizes, Instruction target, int stack_size)
private void ComputeStackSize(Instruction instruction, Int32& stack_size)
private void ComputeStackDelta(Instruction instruction, Int32& stack_size)
private void ComputePopDelta(StackBehaviour pop_behavior, Int32& stack_size)
private void ComputePushDelta(StackBehaviour push_behaviour, Int32& stack_size)
private void WriteExceptionHandlers()
private bool RequiresFatSection(Collection`1<ExceptionHandler> handlers)
private bool IsFatRange(Instruction start, Instruction end)
private void WriteSmallSection(Collection`1<ExceptionHandler> handlers)
private void WriteFatSection(Collection`1<ExceptionHandler> handlers)
private void WriteExceptionHandlers(Collection`1<ExceptionHandler> handlers, Action`1<int> write_entry, Action`1<int> write_length)
private void WriteExceptionHandlerSpecific(ExceptionHandler handler)
public MetadataToken GetStandAloneSignature(Collection`1<VariableDefinition> variables)
public MetadataToken GetStandAloneSignature(CallSite call_site)
private MetadataToken GetStandAloneSignatureToken(UInt32 signature)
private UInt32 BeginMethod()
private void WriteMetadataToken(MetadataToken token)
private void Align(int align)
private void EndMethod()
private void <WriteSmallSection>b__34_0(int i)
private void <WriteSmallSection>b__34_1(int i)
}
public Mono.Cecil.Cil.Document : object {
private string url
private byte type
private byte hash_algorithm
private byte language
private byte language_vendor
private Byte[] hash
public string Url
public DocumentType Type
public DocumentHashAlgorithm HashAlgorithm
public DocumentLanguage Language
public DocumentLanguageVendor LanguageVendor
public Byte[] Hash
public string get_Url()
public void set_Url(string value)
public DocumentType get_Type()
public void set_Type(DocumentType value)
public DocumentHashAlgorithm get_HashAlgorithm()
public void set_HashAlgorithm(DocumentHashAlgorithm value)
public DocumentLanguage get_Language()
public void set_Language(DocumentLanguage value)
public DocumentLanguageVendor get_LanguageVendor()
public void set_LanguageVendor(DocumentLanguageVendor value)
public Byte[] get_Hash()
public void set_Hash(Byte[] value)
public void .ctor(string url)
}
public Mono.Cecil.Cil.DocumentHashAlgorithm : Enum {
public int value__
public DocumentHashAlgorithm None
public DocumentHashAlgorithm MD5
public DocumentHashAlgorithm SHA1
}
public Mono.Cecil.Cil.DocumentLanguage : Enum {
public int value__
public DocumentLanguage Other
public DocumentLanguage C
public DocumentLanguage Cpp
public DocumentLanguage CSharp
public DocumentLanguage Basic
public DocumentLanguage Java
public DocumentLanguage Cobol
public DocumentLanguage Pascal
public DocumentLanguage Cil
public DocumentLanguage JScript
public DocumentLanguage Smc
public DocumentLanguage MCpp
public DocumentLanguage FSharp
}
public Mono.Cecil.Cil.DocumentLanguageVendor : Enum {
public int value__
public DocumentLanguageVendor Other
public DocumentLanguageVendor Microsoft
}
public Mono.Cecil.Cil.DocumentType : Enum {
public int value__
public DocumentType Other
public DocumentType Text
}
public Mono.Cecil.Cil.ExceptionHandler : object {
private Instruction try_start
private Instruction try_end
private Instruction filter_start
private Instruction handler_start
private Instruction handler_end
private TypeReference catch_type
private ExceptionHandlerType handler_type
public Instruction TryStart
public Instruction TryEnd
public Instruction FilterStart
public Instruction HandlerStart
public Instruction HandlerEnd
public TypeReference CatchType
public ExceptionHandlerType HandlerType
public Instruction get_TryStart()
public void set_TryStart(Instruction value)
public Instruction get_TryEnd()
public void set_TryEnd(Instruction value)
public Instruction get_FilterStart()
public void set_FilterStart(Instruction value)
public Instruction get_HandlerStart()
public void set_HandlerStart(Instruction value)
public Instruction get_HandlerEnd()
public void set_HandlerEnd(Instruction value)
public TypeReference get_CatchType()
public void set_CatchType(TypeReference value)
public ExceptionHandlerType get_HandlerType()
public void set_HandlerType(ExceptionHandlerType value)
public void .ctor(ExceptionHandlerType handlerType)
}
public Mono.Cecil.Cil.ExceptionHandlerType : Enum {
public int value__
public ExceptionHandlerType Catch
public ExceptionHandlerType Filter
public ExceptionHandlerType Finally
public ExceptionHandlerType Fault
}
public Mono.Cecil.Cil.FlowControl : Enum {
public int value__
public FlowControl Branch
public FlowControl Break
public FlowControl Call
public FlowControl Cond_Branch
public FlowControl Meta
public FlowControl Next
public FlowControl Phi
public FlowControl Return
public FlowControl Throw
}
public Mono.Cecil.Cil.ILProcessor : object {
private MethodBody body
private Collection`1<Instruction> instructions
public MethodBody Body
public MethodBody get_Body()
internal void .ctor(MethodBody body)
public Instruction Create(OpCode opcode)
public Instruction Create(OpCode opcode, TypeReference type)
public Instruction Create(OpCode opcode, CallSite site)
public Instruction Create(OpCode opcode, MethodReference method)
public Instruction Create(OpCode opcode, FieldReference field)
public Instruction Create(OpCode opcode, string value)
public Instruction Create(OpCode opcode, sbyte value)
public Instruction Create(OpCode opcode, byte value)
public Instruction Create(OpCode opcode, int value)
public Instruction Create(OpCode opcode, long value)
public Instruction Create(OpCode opcode, float value)
public Instruction Create(OpCode opcode, double value)
public Instruction Create(OpCode opcode, Instruction target)
public Instruction Create(OpCode opcode, Instruction[] targets)
public Instruction Create(OpCode opcode, VariableDefinition variable)
public Instruction Create(OpCode opcode, ParameterDefinition parameter)
public void Emit(OpCode opcode)
public void Emit(OpCode opcode, TypeReference type)
public void Emit(OpCode opcode, MethodReference method)
public void Emit(OpCode opcode, CallSite site)
public void Emit(OpCode opcode, FieldReference field)
public void Emit(OpCode opcode, string value)
public void Emit(OpCode opcode, byte value)
public void Emit(OpCode opcode, sbyte value)
public void Emit(OpCode opcode, int value)
public void Emit(OpCode opcode, long value)
public void Emit(OpCode opcode, float value)
public void Emit(OpCode opcode, double value)
public void Emit(OpCode opcode, Instruction target)
public void Emit(OpCode opcode, Instruction[] targets)
public void Emit(OpCode opcode, VariableDefinition variable)
public void Emit(OpCode opcode, ParameterDefinition parameter)
public void InsertBefore(Instruction target, Instruction instruction)
public void InsertAfter(Instruction target, Instruction instruction)
public void Append(Instruction instruction)
public void Replace(Instruction target, Instruction instruction)
public void Remove(Instruction instruction)
}
public Mono.Cecil.Cil.ImageDebugDirectory : ValueType {
public int Characteristics
public int TimeDateStamp
public short MajorVersion
public short MinorVersion
public int Type
public int SizeOfData
public int AddressOfRawData
public int PointerToRawData
}
public Mono.Cecil.Cil.Instruction : object {
internal int offset
internal OpCode opcode
internal object operand
internal Instruction previous
internal Instruction next
private SequencePoint sequence_point
public int Offset
public OpCode OpCode
public object Operand
public Instruction Previous
public Instruction Next
public SequencePoint SequencePoint
public int get_Offset()
public void set_Offset(int value)
public OpCode get_OpCode()
public void set_OpCode(OpCode value)
public object get_Operand()
public void set_Operand(object value)
public Instruction get_Previous()
public void set_Previous(Instruction value)
public Instruction get_Next()
public void set_Next(Instruction value)
public SequencePoint get_SequencePoint()
public void set_SequencePoint(SequencePoint value)
internal void .ctor(int offset, OpCode opCode)
internal void .ctor(OpCode opcode, object operand)
public int GetSize()
public string ToString()
private void AppendLabel(StringBuilder builder, Instruction instruction)
public Instruction Create(OpCode opcode)
public Instruction Create(OpCode opcode, TypeReference type)
public Instruction Create(OpCode opcode, CallSite site)
public Instruction Create(OpCode opcode, MethodReference method)
public Instruction Create(OpCode opcode, FieldReference field)
public Instruction Create(OpCode opcode, string value)
public Instruction Create(OpCode opcode, sbyte value)
public Instruction Create(OpCode opcode, byte value)
public Instruction Create(OpCode opcode, int value)
public Instruction Create(OpCode opcode, long value)
public Instruction Create(OpCode opcode, float value)
public Instruction Create(OpCode opcode, double value)
public Instruction Create(OpCode opcode, Instruction target)
public Instruction Create(OpCode opcode, Instruction[] targets)
public Instruction Create(OpCode opcode, VariableDefinition variable)
public Instruction Create(OpCode opcode, ParameterDefinition parameter)
}
internal Mono.Cecil.Cil.InstructionCollection : Collection`1<Instruction> {
internal void .ctor(int capacity)
protected void OnAdd(Instruction item, int index)
protected void OnInsert(Instruction item, int index)
protected void OnSet(Instruction item, int index)
protected void OnRemove(Instruction item, int index)
}
public Mono.Cecil.Cil.InstructionMapper : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Instruction Invoke(int offset)
public IAsyncResult BeginInvoke(int offset, AsyncCallback callback, object object)
public Instruction EndInvoke(IAsyncResult result)
}
public Mono.Cecil.Cil.InstructionSymbol : ValueType {
public int Offset
public SequencePoint SequencePoint
public void .ctor(int offset, SequencePoint sequencePoint)
}
public Mono.Cecil.Cil.ISymbolReader {
public bool ProcessDebugHeader(ImageDebugDirectory directory, Byte[] header)
public void Read(MethodBody body, InstructionMapper mapper)
public void Read(MethodSymbols symbols)
}
public Mono.Cecil.Cil.ISymbolReaderProvider {
public ISymbolReader GetSymbolReader(ModuleDefinition module, string fileName)
public ISymbolReader GetSymbolReader(ModuleDefinition module, Stream symbolStream)
}
public Mono.Cecil.Cil.ISymbolWriter {
public bool GetDebugHeader(ImageDebugDirectory& directory, Byte[]& header)
public void Write(MethodBody body)
public void Write(MethodSymbols symbols)
}
public Mono.Cecil.Cil.ISymbolWriterProvider {
public ISymbolWriter GetSymbolWriter(ModuleDefinition module, string fileName)
public ISymbolWriter GetSymbolWriter(ModuleDefinition module, Stream symbolStream)
}
public Mono.Cecil.Cil.IVariableDefinitionProvider {
public bool HasVariables
public Collection`1<VariableDefinition> Variables
public bool get_HasVariables()
public Collection`1<VariableDefinition> get_Variables()
}
public Mono.Cecil.Cil.MethodBody : object {
internal MethodDefinition method
internal ParameterDefinition this_parameter
internal int max_stack_size
internal int code_size
internal bool init_locals
internal MetadataToken local_var_token
internal Collection`1<Instruction> instructions
internal Collection`1<ExceptionHandler> exceptions
internal Collection`1<VariableDefinition> variables
private Scope scope
public MethodDefinition Method
public int MaxStackSize
public int CodeSize
public bool InitLocals
public MetadataToken LocalVarToken
public Collection`1<Instruction> Instructions
public bool HasExceptionHandlers
public Collection`1<ExceptionHandler> ExceptionHandlers
public bool HasVariables
public Collection`1<VariableDefinition> Variables
public Scope Scope
public ParameterDefinition ThisParameter
public MethodDefinition get_Method()
public int get_MaxStackSize()
public void set_MaxStackSize(int value)
public int get_CodeSize()
public bool get_InitLocals()
public void set_InitLocals(bool value)
public MetadataToken get_LocalVarToken()
public void set_LocalVarToken(MetadataToken value)
public Collection`1<Instruction> get_Instructions()
public bool get_HasExceptionHandlers()
public Collection`1<ExceptionHandler> get_ExceptionHandlers()
public bool get_HasVariables()
public Collection`1<VariableDefinition> get_Variables()
public Scope get_Scope()
public void set_Scope(Scope value)
public ParameterDefinition get_ThisParameter()
private ParameterDefinition CreateThisParameter(MethodDefinition method)
public void .ctor(MethodDefinition method)
public ILProcessor GetILProcessor()
}
public Mono.Cecil.Cil.MethodSymbols : object {
internal int code_size
internal string method_name
internal MetadataToken method_token
internal MetadataToken local_var_token
internal Collection`1<VariableDefinition> variables
internal Collection`1<InstructionSymbol> instructions
public bool HasVariables
public Collection`1<VariableDefinition> Variables
public Collection`1<InstructionSymbol> Instructions
public int CodeSize
public string MethodName
public MetadataToken MethodToken
public MetadataToken LocalVarToken
public bool get_HasVariables()
public Collection`1<VariableDefinition> get_Variables()
public Collection`1<InstructionSymbol> get_Instructions()
public int get_CodeSize()
public string get_MethodName()
public MetadataToken get_MethodToken()
public MetadataToken get_LocalVarToken()
internal void .ctor(string methodName)
public void .ctor(MetadataToken methodToken)
}
public Mono.Cecil.Cil.OpCode : ValueType {
private byte op1
private byte op2
private byte code
private byte flow_control
private byte opcode_type
private byte operand_type
private byte stack_behavior_pop
private byte stack_behavior_push
public string Name
public int Size
public byte Op1
public byte Op2
public short Value
public Code Code
public FlowControl FlowControl
public OpCodeType OpCodeType
public OperandType OperandType
public StackBehaviour StackBehaviourPop
public StackBehaviour StackBehaviourPush
public string get_Name()
public int get_Size()
public byte get_Op1()
public byte get_Op2()
public short get_Value()
public Code get_Code()
public FlowControl get_FlowControl()
public OpCodeType get_OpCodeType()
public OperandType get_OperandType()
public StackBehaviour get_StackBehaviourPop()
public StackBehaviour get_StackBehaviourPush()
internal void .ctor(int x, int y)
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(OpCode opcode)
public bool op_Equality(OpCode one, OpCode other)
public bool op_Inequality(OpCode one, OpCode other)
public string ToString()
}
internal Mono.Cecil.Cil.OpCodeNames : object {
internal String[] names
}
public Mono.Cecil.Cil.OpCodes : object {
internal OpCode[] OneByteOpCode
internal OpCode[] TwoBytesOpCode
public OpCode Nop
public OpCode Break
public OpCode Ldarg_0
public OpCode Ldarg_1
public OpCode Ldarg_2
public OpCode Ldarg_3
public OpCode Ldloc_0
public OpCode Ldloc_1
public OpCode Ldloc_2
public OpCode Ldloc_3
public OpCode Stloc_0
public OpCode Stloc_1
public OpCode Stloc_2
public OpCode Stloc_3
public OpCode Ldarg_S
public OpCode Ldarga_S
public OpCode Starg_S
public OpCode Ldloc_S
public OpCode Ldloca_S
public OpCode Stloc_S
public OpCode Ldnull
public OpCode Ldc_I4_M1
public OpCode Ldc_I4_0
public OpCode Ldc_I4_1
public OpCode Ldc_I4_2
public OpCode Ldc_I4_3
public OpCode Ldc_I4_4
public OpCode Ldc_I4_5
public OpCode Ldc_I4_6
public OpCode Ldc_I4_7
public OpCode Ldc_I4_8
public OpCode Ldc_I4_S
public OpCode Ldc_I4
public OpCode Ldc_I8
public OpCode Ldc_R4
public OpCode Ldc_R8
public OpCode Dup
public OpCode Pop
public OpCode Jmp
public OpCode Call
public OpCode Calli
public OpCode Ret
public OpCode Br_S
public OpCode Brfalse_S
public OpCode Brtrue_S
public OpCode Beq_S
public OpCode Bge_S
public OpCode Bgt_S
public OpCode Ble_S
public OpCode Blt_S
public OpCode Bne_Un_S
public OpCode Bge_Un_S
public OpCode Bgt_Un_S
public OpCode Ble_Un_S
public OpCode Blt_Un_S
public OpCode Br
public OpCode Brfalse
public OpCode Brtrue
public OpCode Beq
public OpCode Bge
public OpCode Bgt
public OpCode Ble
public OpCode Blt
public OpCode Bne_Un
public OpCode Bge_Un
public OpCode Bgt_Un
public OpCode Ble_Un
public OpCode Blt_Un
public OpCode Switch
public OpCode Ldind_I1
public OpCode Ldind_U1
public OpCode Ldind_I2
public OpCode Ldind_U2
public OpCode Ldind_I4
public OpCode Ldind_U4
public OpCode Ldind_I8
public OpCode Ldind_I
public OpCode Ldind_R4
public OpCode Ldind_R8
public OpCode Ldind_Ref
public OpCode Stind_Ref
public OpCode Stind_I1
public OpCode Stind_I2
public OpCode Stind_I4
public OpCode Stind_I8
public OpCode Stind_R4
public OpCode Stind_R8
public OpCode Add
public OpCode Sub
public OpCode Mul
public OpCode Div
public OpCode Div_Un
public OpCode Rem
public OpCode Rem_Un
public OpCode And
public OpCode Or
public OpCode Xor
public OpCode Shl
public OpCode Shr
public OpCode Shr_Un
public OpCode Neg
public OpCode Not
public OpCode Conv_I1
public OpCode Conv_I2
public OpCode Conv_I4
public OpCode Conv_I8
public OpCode Conv_R4
public OpCode Conv_R8
public OpCode Conv_U4
public OpCode Conv_U8
public OpCode Callvirt
public OpCode Cpobj
public OpCode Ldobj
public OpCode Ldstr
public OpCode Newobj
public OpCode Castclass
public OpCode Isinst
public OpCode Conv_R_Un
public OpCode Unbox
public OpCode Throw
public OpCode Ldfld
public OpCode Ldflda
public OpCode Stfld
public OpCode Ldsfld
public OpCode Ldsflda
public OpCode Stsfld
public OpCode Stobj
public OpCode Conv_Ovf_I1_Un
public OpCode Conv_Ovf_I2_Un
public OpCode Conv_Ovf_I4_Un
public OpCode Conv_Ovf_I8_Un
public OpCode Conv_Ovf_U1_Un
public OpCode Conv_Ovf_U2_Un
public OpCode Conv_Ovf_U4_Un
public OpCode Conv_Ovf_U8_Un
public OpCode Conv_Ovf_I_Un
public OpCode Conv_Ovf_U_Un
public OpCode Box
public OpCode Newarr
public OpCode Ldlen
public OpCode Ldelema
public OpCode Ldelem_I1
public OpCode Ldelem_U1
public OpCode Ldelem_I2
public OpCode Ldelem_U2
public OpCode Ldelem_I4
public OpCode Ldelem_U4
public OpCode Ldelem_I8
public OpCode Ldelem_I
public OpCode Ldelem_R4
public OpCode Ldelem_R8
public OpCode Ldelem_Ref
public OpCode Stelem_I
public OpCode Stelem_I1
public OpCode Stelem_I2
public OpCode Stelem_I4
public OpCode Stelem_I8
public OpCode Stelem_R4
public OpCode Stelem_R8
public OpCode Stelem_Ref
public OpCode Ldelem_Any
public OpCode Stelem_Any
public OpCode Unbox_Any
public OpCode Conv_Ovf_I1
public OpCode Conv_Ovf_U1
public OpCode Conv_Ovf_I2
public OpCode Conv_Ovf_U2
public OpCode Conv_Ovf_I4
public OpCode Conv_Ovf_U4
public OpCode Conv_Ovf_I8
public OpCode Conv_Ovf_U8
public OpCode Refanyval
public OpCode Ckfinite
public OpCode Mkrefany
public OpCode Ldtoken
public OpCode Conv_U2
public OpCode Conv_U1
public OpCode Conv_I
public OpCode Conv_Ovf_I
public OpCode Conv_Ovf_U
public OpCode Add_Ovf
public OpCode Add_Ovf_Un
public OpCode Mul_Ovf
public OpCode Mul_Ovf_Un
public OpCode Sub_Ovf
public OpCode Sub_Ovf_Un
public OpCode Endfinally
public OpCode Leave
public OpCode Leave_S
public OpCode Stind_I
public OpCode Conv_U
public OpCode Arglist
public OpCode Ceq
public OpCode Cgt
public OpCode Cgt_Un
public OpCode Clt
public OpCode Clt_Un
public OpCode Ldftn
public OpCode Ldvirtftn
public OpCode Ldarg
public OpCode Ldarga
public OpCode Starg
public OpCode Ldloc
public OpCode Ldloca
public OpCode Stloc
public OpCode Localloc
public OpCode Endfilter
public OpCode Unaligned
public OpCode Volatile
public OpCode Tail
public OpCode Initobj
public OpCode Constrained
public OpCode Cpblk
public OpCode Initblk
public OpCode No
public OpCode Rethrow
public OpCode Sizeof
public OpCode Refanytype
public OpCode Readonly
}
public Mono.Cecil.Cil.OpCodeType : Enum {
public int value__
public OpCodeType Annotation
public OpCodeType Macro
public OpCodeType Nternal
public OpCodeType Objmodel
public OpCodeType Prefix
public OpCodeType Primitive
}
public Mono.Cecil.Cil.OperandType : Enum {
public int value__
public OperandType InlineBrTarget
public OperandType InlineField
public OperandType InlineI
public OperandType InlineI8
public OperandType InlineMethod
public OperandType InlineNone
public OperandType InlinePhi
public OperandType InlineR
public OperandType InlineSig
public OperandType InlineString
public OperandType InlineSwitch
public OperandType InlineTok
public OperandType InlineType
public OperandType InlineVar
public OperandType InlineArg
public OperandType ShortInlineBrTarget
public OperandType ShortInlineI
public OperandType ShortInlineR
public OperandType ShortInlineVar
public OperandType ShortInlineArg
}
public Mono.Cecil.Cil.Scope : object {
private Instruction start
private Instruction end
private Collection`1<Scope> scopes
private Collection`1<VariableDefinition> variables
public Instruction Start
public Instruction End
public bool HasScopes
public Collection`1<Scope> Scopes
public bool HasVariables
public Collection`1<VariableDefinition> Variables
public Instruction get_Start()
public void set_Start(Instruction value)
public Instruction get_End()
public void set_End(Instruction value)
public bool get_HasScopes()
public Collection`1<Scope> get_Scopes()
public bool get_HasVariables()
public Collection`1<VariableDefinition> get_Variables()
}
public Mono.Cecil.Cil.SequencePoint : object {
private Document document
private int start_line
private int start_column
private int end_line
private int end_column
public int StartLine
public int StartColumn
public int EndLine
public int EndColumn
public Document Document
public int get_StartLine()
public void set_StartLine(int value)
public int get_StartColumn()
public void set_StartColumn(int value)
public int get_EndLine()
public void set_EndLine(int value)
public int get_EndColumn()
public void set_EndColumn(int value)
public Document get_Document()
public void set_Document(Document value)
public void .ctor(Document document)
}
public Mono.Cecil.Cil.StackBehaviour : Enum {
public int value__
public StackBehaviour Pop0
public StackBehaviour Pop1
public StackBehaviour Pop1_pop1
public StackBehaviour Popi
public StackBehaviour Popi_pop1
public StackBehaviour Popi_popi
public StackBehaviour Popi_popi8
public StackBehaviour Popi_popi_popi
public StackBehaviour Popi_popr4
public StackBehaviour Popi_popr8
public StackBehaviour Popref
public StackBehaviour Popref_pop1
public StackBehaviour Popref_popi
public StackBehaviour Popref_popi_popi
public StackBehaviour Popref_popi_popi8
public StackBehaviour Popref_popi_popr4
public StackBehaviour Popref_popi_popr8
public StackBehaviour Popref_popi_popref
public StackBehaviour PopAll
public StackBehaviour Push0
public StackBehaviour Push1
public StackBehaviour Push1_push1
public StackBehaviour Pushi
public StackBehaviour Pushi8
public StackBehaviour Pushr4
public StackBehaviour Pushr8
public StackBehaviour Pushref
public StackBehaviour Varpop
public StackBehaviour Varpush
}
internal Mono.Cecil.Cil.SymbolProvider : object {
private string symbol_kind
private ISymbolReaderProvider reader_provider
private ISymbolWriterProvider writer_provider
private AssemblyName GetPlatformSymbolAssemblyName()
private Type GetPlatformType(string fullname)
public ISymbolReaderProvider GetPlatformReaderProvider()
private string GetProviderTypeName(string name)
public ISymbolWriterProvider GetPlatformWriterProvider()
}
public Mono.Cecil.Cil.VariableDefinition : VariableReference {
public bool IsPinned
public bool get_IsPinned()
public void .ctor(TypeReference variableType)
public void .ctor(string name, TypeReference variableType)
public VariableDefinition Resolve()
}
internal Mono.Cecil.Cil.VariableDefinitionCollection : Collection`1<VariableDefinition> {
internal void .ctor(int capacity)
protected void OnAdd(VariableDefinition item, int index)
protected void OnInsert(VariableDefinition item, int index)
protected void OnSet(VariableDefinition item, int index)
protected void OnRemove(VariableDefinition item, int index)
}
public Mono.Cecil.Cil.VariableReference : object {
private string name
internal int index
protected TypeReference variable_type
public string Name
public TypeReference VariableType
public int Index
public string get_Name()
public void set_Name(string value)
public TypeReference get_VariableType()
public void set_VariableType(TypeReference value)
public int get_Index()
internal void .ctor(TypeReference variable_type)
internal void .ctor(string name, TypeReference variable_type)
public VariableDefinition Resolve()
public string ToString()
}
internal Mono.Cecil.ClassLayoutTable : SortedTable`1<Row`3<ushort, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
public int Compare(Row`3<ushort, UInt32, UInt32> x, Row`3<ushort, UInt32, UInt32> y)
}
internal Mono.Cecil.ConstantTable : SortedTable`1<Row`3<ElementType, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
public int Compare(Row`3<ElementType, UInt32, UInt32> x, Row`3<ElementType, UInt32, UInt32> y)
}
internal Mono.Cecil.CryptoService : object {
public void StrongName(Stream stream, ImageWriter writer, StrongNameKeyPair key_pair)
private void PatchStrongName(Stream stream, int strong_name_pointer, Byte[] strong_name)
private Byte[] CreateStrongName(StrongNameKeyPair key_pair, Byte[] hash)
private Byte[] HashStream(Stream stream, ImageWriter writer, Int32& strong_name_pointer)
private void CopyStreamChunk(Stream stream, Stream dest_stream, Byte[] buffer, int length)
public Byte[] ComputeHash(string file)
}
public Mono.Cecil.CustomAttribute : object {
internal UInt32 signature
internal bool resolved
private MethodReference constructor
private Byte[] blob
internal Collection`1<CustomAttributeArgument> arguments
internal Collection`1<CustomAttributeNamedArgument> fields
internal Collection`1<CustomAttributeNamedArgument> properties
public MethodReference Constructor
public TypeReference AttributeType
public bool IsResolved
public bool HasConstructorArguments
public Collection`1<CustomAttributeArgument> ConstructorArguments
public bool HasFields
public Collection`1<CustomAttributeNamedArgument> Fields
public bool HasProperties
public Collection`1<CustomAttributeNamedArgument> Properties
internal bool HasImage
internal ModuleDefinition Module
public MethodReference get_Constructor()
public void set_Constructor(MethodReference value)
public TypeReference get_AttributeType()
public bool get_IsResolved()
public bool get_HasConstructorArguments()
public Collection`1<CustomAttributeArgument> get_ConstructorArguments()
public bool get_HasFields()
public Collection`1<CustomAttributeNamedArgument> get_Fields()
public bool get_HasProperties()
public Collection`1<CustomAttributeNamedArgument> get_Properties()
internal bool get_HasImage()
internal ModuleDefinition get_Module()
internal void .ctor(UInt32 signature, MethodReference constructor)
public void .ctor(MethodReference constructor)
public void .ctor(MethodReference constructor, Byte[] blob)
public Byte[] GetBlob()
private void Resolve()
private CustomAttribute <Resolve>b__34_0(CustomAttribute attribute, MetadataReader reader)
}
public Mono.Cecil.CustomAttributeArgument : ValueType {
private TypeReference type
private object value
public TypeReference Type
public object Value
public TypeReference get_Type()
public object get_Value()
public void .ctor(TypeReference type, object value)
}
public Mono.Cecil.CustomAttributeNamedArgument : ValueType {
private string name
private CustomAttributeArgument argument
public string Name
public CustomAttributeArgument Argument
public string get_Name()
public CustomAttributeArgument get_Argument()
public void .ctor(string name, CustomAttributeArgument argument)
}
internal Mono.Cecil.CustomAttributeTable : SortedTable`1<Row`3<UInt32, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
public int Compare(Row`3<UInt32, UInt32, UInt32> x, Row`3<UInt32, UInt32, UInt32> y)
}
public Mono.Cecil.CustomMarshalInfo : MarshalInfo {
internal Guid guid
internal string unmanaged_type
internal TypeReference managed_type
internal string cookie
public Guid Guid
public string UnmanagedType
public TypeReference ManagedType
public string Cookie
public Guid get_Guid()
public void set_Guid(Guid value)
public string get_UnmanagedType()
public void set_UnmanagedType(string value)
public TypeReference get_ManagedType()
public void set_ManagedType(TypeReference value)
public string get_Cookie()
public void set_Cookie(string value)
}
internal Mono.Cecil.DeclSecurityTable : SortedTable`1<Row`3<SecurityAction, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
public int Compare(Row`3<SecurityAction, UInt32, UInt32> x, Row`3<SecurityAction, UInt32, UInt32> y)
}
public Mono.Cecil.DefaultAssemblyResolver : BaseAssemblyResolver {
private IDictionary`2<string, AssemblyDefinition> cache
public AssemblyDefinition Resolve(AssemblyNameReference name)
protected void RegisterAssembly(AssemblyDefinition assembly)
}
internal Mono.Cecil.DeferredModuleReader : ModuleReader {
public void .ctor(Image image)
protected void ReadModule()
private ModuleDefinition <ReadModule>b__1_0(ModuleDefinition module, MetadataReader reader)
}
public Mono.Cecil.EmbeddedResource : Resource {
private MetadataReader reader
private Nullable`1<UInt32> offset
private Byte[] data
private Stream stream
public ResourceType ResourceType
public ResourceType get_ResourceType()
public void .ctor(string name, ManifestResourceAttributes attributes, Byte[] data)
public void .ctor(string name, ManifestResourceAttributes attributes, Stream stream)
internal void .ctor(string name, ManifestResourceAttributes attributes, UInt32 offset, MetadataReader reader)
public Stream GetResourceStream()
public Byte[] GetResourceData()
private Byte[] ReadStream(Stream stream)
}
public Mono.Cecil.EventAttributes : Enum {
public ushort value__
public EventAttributes None
public EventAttributes SpecialName
public EventAttributes RTSpecialName
}
public Mono.Cecil.EventDefinition : EventReference {
private ushort attributes
private Collection`1<CustomAttribute> custom_attributes
internal MethodDefinition add_method
internal MethodDefinition invoke_method
internal MethodDefinition remove_method
internal Collection`1<MethodDefinition> other_methods
public EventAttributes Attributes
public MethodDefinition AddMethod
public MethodDefinition InvokeMethod
public MethodDefinition RemoveMethod
public bool HasOtherMethods
public Collection`1<MethodDefinition> OtherMethods
public bool HasCustomAttributes
public Collection`1<CustomAttribute> CustomAttributes
public bool IsSpecialName
public bool IsRuntimeSpecialName
public TypeDefinition DeclaringType
public bool IsDefinition
public EventAttributes get_Attributes()
public void set_Attributes(EventAttributes value)
public MethodDefinition get_AddMethod()
public void set_AddMethod(MethodDefinition value)
public MethodDefinition get_InvokeMethod()
public void set_InvokeMethod(MethodDefinition value)
public MethodDefinition get_RemoveMethod()
public void set_RemoveMethod(MethodDefinition value)
public bool get_HasOtherMethods()
public Collection`1<MethodDefinition> get_OtherMethods()
public bool get_HasCustomAttributes()
public Collection`1<CustomAttribute> get_CustomAttributes()
public bool get_IsSpecialName()
public void set_IsSpecialName(bool value)
public bool get_IsRuntimeSpecialName()
public void set_IsRuntimeSpecialName(bool value)
public TypeDefinition get_DeclaringType()
public void set_DeclaringType(TypeDefinition value)
public bool get_IsDefinition()
public void .ctor(string name, EventAttributes attributes, TypeReference eventType)
private void InitializeMethods()
public EventDefinition Resolve()
}
internal Mono.Cecil.EventMapTable : MetadataTable`1<Row`2<UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.EventReference : MemberReference {
private TypeReference event_type
public TypeReference EventType
public string FullName
public TypeReference get_EventType()
public void set_EventType(TypeReference value)
public string get_FullName()
protected void .ctor(string name, TypeReference eventType)
public EventDefinition Resolve()
}
internal Mono.Cecil.EventTable : MetadataTable`1<Row`3<EventAttributes, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.ExportedType : object {
private string namespace
private string name
private UInt32 attributes
private IMetadataScope scope
private ModuleDefinition module
private int identifier
private ExportedType declaring_type
internal MetadataToken token
public string Namespace
public string Name
public TypeAttributes Attributes
public IMetadataScope Scope
public ExportedType DeclaringType
public MetadataToken MetadataToken
public int Identifier
public bool IsNotPublic
public bool IsPublic
public bool IsNestedPublic
public bool IsNestedPrivate
public bool IsNestedFamily
public bool IsNestedAssembly
public bool IsNestedFamilyAndAssembly
public bool IsNestedFamilyOrAssembly
public bool IsAutoLayout
public bool IsSequentialLayout
public bool IsExplicitLayout
public bool IsClass
public bool IsInterface
public bool IsAbstract
public bool IsSealed
public bool IsSpecialName
public bool IsImport
public bool IsSerializable
public bool IsAnsiClass
public bool IsUnicodeClass
public bool IsAutoClass
public bool IsBeforeFieldInit
public bool IsRuntimeSpecialName
public bool HasSecurity
public bool IsForwarder
public string FullName
public string get_Namespace()
public void set_Namespace(string value)
public string get_Name()
public void set_Name(string value)
public TypeAttributes get_Attributes()
public void set_Attributes(TypeAttributes value)
public IMetadataScope get_Scope()
public ExportedType get_DeclaringType()
public void set_DeclaringType(ExportedType value)
public MetadataToken get_MetadataToken()
public void set_MetadataToken(MetadataToken value)
public int get_Identifier()
public void set_Identifier(int value)
public bool get_IsNotPublic()
public void set_IsNotPublic(bool value)
public bool get_IsPublic()
public void set_IsPublic(bool value)
public bool get_IsNestedPublic()
public void set_IsNestedPublic(bool value)
public bool get_IsNestedPrivate()
public void set_IsNestedPrivate(bool value)
public bool get_IsNestedFamily()
public void set_IsNestedFamily(bool value)
public bool get_IsNestedAssembly()
public void set_IsNestedAssembly(bool value)
public bool get_IsNestedFamilyAndAssembly()
public void set_IsNestedFamilyAndAssembly(bool value)
public bool get_IsNestedFamilyOrAssembly()
public void set_IsNestedFamilyOrAssembly(bool value)
public bool get_IsAutoLayout()
public void set_IsAutoLayout(bool value)
public bool get_IsSequentialLayout()
public void set_IsSequentialLayout(bool value)
public bool get_IsExplicitLayout()
public void set_IsExplicitLayout(bool value)
public bool get_IsClass()
public void set_IsClass(bool value)
public bool get_IsInterface()
public void set_IsInterface(bool value)
public bool get_IsAbstract()
public void set_IsAbstract(bool value)
public bool get_IsSealed()
public void set_IsSealed(bool value)
public bool get_IsSpecialName()
public void set_IsSpecialName(bool value)
public bool get_IsImport()
public void set_IsImport(bool value)
public bool get_IsSerializable()
public void set_IsSerializable(bool value)
public bool get_IsAnsiClass()
public void set_IsAnsiClass(bool value)
public bool get_IsUnicodeClass()
public void set_IsUnicodeClass(bool value)
public bool get_IsAutoClass()
public void set_IsAutoClass(bool value)
public bool get_IsBeforeFieldInit()
public void set_IsBeforeFieldInit(bool value)
public bool get_IsRuntimeSpecialName()
public void set_IsRuntimeSpecialName(bool value)
public bool get_HasSecurity()
public void set_HasSecurity(bool value)
public bool get_IsForwarder()
public void set_IsForwarder(bool value)
public string get_FullName()
public void .ctor(string namespace, string name, ModuleDefinition module, IMetadataScope scope)
public string ToString()
public TypeDefinition Resolve()
internal TypeReference CreateReference()
}
internal Mono.Cecil.ExportedTypeTable : MetadataTable`1<Row`5<TypeAttributes, UInt32, UInt32, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.FieldAttributes : Enum {
public ushort value__
public FieldAttributes FieldAccessMask
public FieldAttributes CompilerControlled
public FieldAttributes Private
public FieldAttributes FamANDAssem
public FieldAttributes Assembly
public FieldAttributes Family
public FieldAttributes FamORAssem
public FieldAttributes Public
public FieldAttributes Static
public FieldAttributes InitOnly
public FieldAttributes Literal
public FieldAttributes NotSerialized
public FieldAttributes SpecialName
public FieldAttributes PInvokeImpl
public FieldAttributes RTSpecialName
public FieldAttributes HasFieldMarshal
public FieldAttributes HasDefault
public FieldAttributes HasFieldRVA
}
public Mono.Cecil.FieldDefinition : FieldReference {
private ushort attributes
private Collection`1<CustomAttribute> custom_attributes
private int offset
internal int rva
private Byte[] initial_value
private object constant
private MarshalInfo marshal_info
public bool HasLayoutInfo
public int Offset
public int RVA
public Byte[] InitialValue
public FieldAttributes Attributes
public bool HasConstant
public object Constant
public bool HasCustomAttributes
public Collection`1<CustomAttribute> CustomAttributes
public bool HasMarshalInfo
public MarshalInfo MarshalInfo
public bool IsCompilerControlled
public bool IsPrivate
public bool IsFamilyAndAssembly
public bool IsAssembly
public bool IsFamily
public bool IsFamilyOrAssembly
public bool IsPublic
public bool IsStatic
public bool IsInitOnly
public bool IsLiteral
public bool IsNotSerialized
public bool IsSpecialName
public bool IsPInvokeImpl
public bool IsRuntimeSpecialName
public bool HasDefault
public bool IsDefinition
public TypeDefinition DeclaringType
private void ResolveLayout()
public bool get_HasLayoutInfo()
public int get_Offset()
public void set_Offset(int value)
private void ResolveRVA()
public int get_RVA()
public Byte[] get_InitialValue()
public void set_InitialValue(Byte[] value)
public FieldAttributes get_Attributes()
public void set_Attributes(FieldAttributes value)
public bool get_HasConstant()
public void set_HasConstant(bool value)
public object get_Constant()
public void set_Constant(object value)
public bool get_HasCustomAttributes()
public Collection`1<CustomAttribute> get_CustomAttributes()
public bool get_HasMarshalInfo()
public MarshalInfo get_MarshalInfo()
public void set_MarshalInfo(MarshalInfo value)
public bool get_IsCompilerControlled()
public void set_IsCompilerControlled(bool value)
public bool get_IsPrivate()
public void set_IsPrivate(bool value)
public bool get_IsFamilyAndAssembly()
public void set_IsFamilyAndAssembly(bool value)
public bool get_IsAssembly()
public void set_IsAssembly(bool value)
public bool get_IsFamily()
public void set_IsFamily(bool value)
public bool get_IsFamilyOrAssembly()
public void set_IsFamilyOrAssembly(bool value)
public bool get_IsPublic()
public void set_IsPublic(bool value)
public bool get_IsStatic()
public void set_IsStatic(bool value)
public bool get_IsInitOnly()
public void set_IsInitOnly(bool value)
public bool get_IsLiteral()
public void set_IsLiteral(bool value)
public bool get_IsNotSerialized()
public void set_IsNotSerialized(bool value)
public bool get_IsSpecialName()
public void set_IsSpecialName(bool value)
public bool get_IsPInvokeImpl()
public void set_IsPInvokeImpl(bool value)
public bool get_IsRuntimeSpecialName()
public void set_IsRuntimeSpecialName(bool value)
public bool get_HasDefault()
public void set_HasDefault(bool value)
public bool get_IsDefinition()
public TypeDefinition get_DeclaringType()
public void set_DeclaringType(TypeDefinition value)
public void .ctor(string name, FieldAttributes attributes, TypeReference fieldType)
public FieldDefinition Resolve()
}
internal Mono.Cecil.FieldLayoutTable : SortedTable`1<Row`2<UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
public int Compare(Row`2<UInt32, UInt32> x, Row`2<UInt32, UInt32> y)
}
internal Mono.Cecil.FieldMarshalTable : SortedTable`1<Row`2<UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
public int Compare(Row`2<UInt32, UInt32> x, Row`2<UInt32, UInt32> y)
}
public Mono.Cecil.FieldReference : MemberReference {
private TypeReference field_type
public TypeReference FieldType
public string FullName
public bool ContainsGenericParameter
public TypeReference get_FieldType()
public void set_FieldType(TypeReference value)
public string get_FullName()
public bool get_ContainsGenericParameter()
public void .ctor(string name, TypeReference fieldType)
public void .ctor(string name, TypeReference fieldType, TypeReference declaringType)
public FieldDefinition Resolve()
}
internal Mono.Cecil.FieldRVATable : SortedTable`1<Row`2<UInt32, UInt32>> {
internal int position
public void Write(TableHeapBuffer buffer)
public int Compare(Row`2<UInt32, UInt32> x, Row`2<UInt32, UInt32> y)
}
internal Mono.Cecil.FieldTable : MetadataTable`1<Row`3<FieldAttributes, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
internal Mono.Cecil.FileAttributes : Enum {
public UInt32 value__
public FileAttributes ContainsMetaData
public FileAttributes ContainsNoMetaData
}
internal Mono.Cecil.FileTable : MetadataTable`1<Row`3<FileAttributes, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.FixedArrayMarshalInfo : MarshalInfo {
internal NativeType element_type
internal int size
public NativeType ElementType
public int Size
public NativeType get_ElementType()
public void set_ElementType(NativeType value)
public int get_Size()
public void set_Size(int value)
}
public Mono.Cecil.FixedSysStringMarshalInfo : MarshalInfo {
internal int size
public int Size
public int get_Size()
public void set_Size(int value)
}
public Mono.Cecil.FunctionPointerType : TypeSpecification {
private MethodReference function
public bool HasThis
public bool ExplicitThis
public MethodCallingConvention CallingConvention
public bool HasParameters
public Collection`1<ParameterDefinition> Parameters
public TypeReference ReturnType
public MethodReturnType MethodReturnType
public string Name
public string Namespace
public ModuleDefinition Module
public IMetadataScope Scope
public bool IsFunctionPointer
public bool ContainsGenericParameter
public string FullName
public bool get_HasThis()
public void set_HasThis(bool value)
public bool get_ExplicitThis()
public void set_ExplicitThis(bool value)
public MethodCallingConvention get_CallingConvention()
public void set_CallingConvention(MethodCallingConvention value)
public bool get_HasParameters()
public Collection`1<ParameterDefinition> get_Parameters()
public TypeReference get_ReturnType()
public void set_ReturnType(TypeReference value)
public MethodReturnType get_MethodReturnType()
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public ModuleDefinition get_Module()
public IMetadataScope get_Scope()
public void set_Scope(IMetadataScope value)
public bool get_IsFunctionPointer()
public bool get_ContainsGenericParameter()
public string get_FullName()
public TypeDefinition Resolve()
public TypeReference GetElementType()
}
public Mono.Cecil.GenericInstanceMethod : MethodSpecification {
private Collection`1<TypeReference> arguments
public bool HasGenericArguments
public Collection`1<TypeReference> GenericArguments
public bool IsGenericInstance
private IGenericParameterProvider Mono.Cecil.IGenericContext.Method
private IGenericParameterProvider Mono.Cecil.IGenericContext.Type
public bool ContainsGenericParameter
public string FullName
public bool get_HasGenericArguments()
public Collection`1<TypeReference> get_GenericArguments()
public bool get_IsGenericInstance()
private IGenericParameterProvider Mono.Cecil.IGenericContext.get_Method()
private IGenericParameterProvider Mono.Cecil.IGenericContext.get_Type()
public bool get_ContainsGenericParameter()
public string get_FullName()
public void .ctor(MethodReference method)
}
public Mono.Cecil.GenericInstanceType : TypeSpecification {
private Collection`1<TypeReference> arguments
public bool HasGenericArguments
public Collection`1<TypeReference> GenericArguments
public TypeReference DeclaringType
public string FullName
public bool IsGenericInstance
public bool ContainsGenericParameter
private IGenericParameterProvider Mono.Cecil.IGenericContext.Type
public bool get_HasGenericArguments()
public Collection`1<TypeReference> get_GenericArguments()
public TypeReference get_DeclaringType()
public void set_DeclaringType(TypeReference value)
public string get_FullName()
public bool get_IsGenericInstance()
public bool get_ContainsGenericParameter()
private IGenericParameterProvider Mono.Cecil.IGenericContext.get_Type()
public void .ctor(TypeReference type)
}
internal Mono.Cecil.GenericParamConstraintTable : MetadataTable`1<Row`2<UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.GenericParameter : TypeReference {
internal int position
internal GenericParameterType type
internal IGenericParameterProvider owner
private ushort attributes
private Collection`1<TypeReference> constraints
private Collection`1<CustomAttribute> custom_attributes
public GenericParameterAttributes Attributes
public int Position
public GenericParameterType Type
public IGenericParameterProvider Owner
public bool HasConstraints
public Collection`1<TypeReference> Constraints
public bool HasCustomAttributes
public Collection`1<CustomAttribute> CustomAttributes
public IMetadataScope Scope
public TypeReference DeclaringType
public MethodReference DeclaringMethod
public ModuleDefinition Module
public string Name
public string Namespace
public string FullName
public bool IsGenericParameter
public bool ContainsGenericParameter
public MetadataType MetadataType
public bool IsNonVariant
public bool IsCovariant
public bool IsContravariant
public bool HasReferenceTypeConstraint
public bool HasNotNullableValueTypeConstraint
public bool HasDefaultConstructorConstraint
public GenericParameterAttributes get_Attributes()
public void set_Attributes(GenericParameterAttributes value)
public int get_Position()
public GenericParameterType get_Type()
public IGenericParameterProvider get_Owner()
public bool get_HasConstraints()
public Collection`1<TypeReference> get_Constraints()
public bool get_HasCustomAttributes()
public Collection`1<CustomAttribute> get_CustomAttributes()
public IMetadataScope get_Scope()
public void set_Scope(IMetadataScope value)
public TypeReference get_DeclaringType()
public void set_DeclaringType(TypeReference value)
public MethodReference get_DeclaringMethod()
public ModuleDefinition get_Module()
public string get_Name()
public string get_Namespace()
public void set_Namespace(string value)
public string get_FullName()
public bool get_IsGenericParameter()
public bool get_ContainsGenericParameter()
public MetadataType get_MetadataType()
public bool get_IsNonVariant()
public void set_IsNonVariant(bool value)
public bool get_IsCovariant()
public void set_IsCovariant(bool value)
public bool get_IsContravariant()
public void set_IsContravariant(bool value)
public bool get_HasReferenceTypeConstraint()
public void set_HasReferenceTypeConstraint(bool value)
public bool get_HasNotNullableValueTypeConstraint()
public void set_HasNotNullableValueTypeConstraint(bool value)
public bool get_HasDefaultConstructorConstraint()
public void set_HasDefaultConstructorConstraint(bool value)
public void .ctor(IGenericParameterProvider owner)
public void .ctor(string name, IGenericParameterProvider owner)
internal void .ctor(int position, GenericParameterType type, ModuleDefinition module)
private ElementType ConvertGenericParameterType(GenericParameterType type)
public TypeDefinition Resolve()
}
public Mono.Cecil.GenericParameterAttributes : Enum {
public ushort value__
public GenericParameterAttributes VarianceMask
public GenericParameterAttributes NonVariant
public GenericParameterAttributes Covariant
public GenericParameterAttributes Contravariant
public GenericParameterAttributes SpecialConstraintMask
public GenericParameterAttributes ReferenceTypeConstraint
public GenericParameterAttributes NotNullableValueTypeConstraint
public GenericParameterAttributes DefaultConstructorConstraint
}
internal Mono.Cecil.GenericParameterCollection : Collection`1<GenericParameter> {
private IGenericParameterProvider owner
internal void .ctor(IGenericParameterProvider owner)
internal void .ctor(IGenericParameterProvider owner, int capacity)
protected void OnAdd(GenericParameter item, int index)
protected void OnInsert(GenericParameter item, int index)
protected void OnSet(GenericParameter item, int index)
private void UpdateGenericParameter(GenericParameter item, int index)
protected void OnRemove(GenericParameter item, int index)
}
public Mono.Cecil.GenericParameterType : Enum {
public int value__
public GenericParameterType Type
public GenericParameterType Method
}
internal Mono.Cecil.GenericParamTable : MetadataTable`1<Row`4<ushort, GenericParameterAttributes, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.IAssemblyResolver {
public AssemblyDefinition Resolve(AssemblyNameReference name)
public AssemblyDefinition Resolve(AssemblyNameReference name, ReaderParameters parameters)
public AssemblyDefinition Resolve(string fullName)
public AssemblyDefinition Resolve(string fullName, ReaderParameters parameters)
}
public Mono.Cecil.IConstantProvider {
public bool HasConstant
public object Constant
public bool get_HasConstant()
public void set_HasConstant(bool value)
public object get_Constant()
public void set_Constant(object value)
}
public Mono.Cecil.ICustomAttribute {
public TypeReference AttributeType
public bool HasFields
public bool HasProperties
public Collection`1<CustomAttributeNamedArgument> Fields
public Collection`1<CustomAttributeNamedArgument> Properties
public TypeReference get_AttributeType()
public bool get_HasFields()
public bool get_HasProperties()
public Collection`1<CustomAttributeNamedArgument> get_Fields()
public Collection`1<CustomAttributeNamedArgument> get_Properties()
}
public Mono.Cecil.ICustomAttributeProvider {
public Collection`1<CustomAttribute> CustomAttributes
public bool HasCustomAttributes
public Collection`1<CustomAttribute> get_CustomAttributes()
public bool get_HasCustomAttributes()
}
internal Mono.Cecil.IGenericContext {
public bool IsDefinition
public IGenericParameterProvider Type
public IGenericParameterProvider Method
public bool get_IsDefinition()
public IGenericParameterProvider get_Type()
public IGenericParameterProvider get_Method()
}
public Mono.Cecil.IGenericInstance {
public bool HasGenericArguments
public Collection`1<TypeReference> GenericArguments
public bool get_HasGenericArguments()
public Collection`1<TypeReference> get_GenericArguments()
}
public Mono.Cecil.IGenericParameterProvider {
public bool HasGenericParameters
public bool IsDefinition
public ModuleDefinition Module
public Collection`1<GenericParameter> GenericParameters
public GenericParameterType GenericParameterType
public bool get_HasGenericParameters()
public bool get_IsDefinition()
public ModuleDefinition get_Module()
public Collection`1<GenericParameter> get_GenericParameters()
public GenericParameterType get_GenericParameterType()
}
public Mono.Cecil.IMarshalInfoProvider {
public bool HasMarshalInfo
public MarshalInfo MarshalInfo
public bool get_HasMarshalInfo()
public MarshalInfo get_MarshalInfo()
public void set_MarshalInfo(MarshalInfo value)
}
public Mono.Cecil.IMemberDefinition {
public string Name
public string FullName
public bool IsSpecialName
public bool IsRuntimeSpecialName
public TypeDefinition DeclaringType
public string get_Name()
public void set_Name(string value)
public string get_FullName()
public bool get_IsSpecialName()
public void set_IsSpecialName(bool value)
public bool get_IsRuntimeSpecialName()
public void set_IsRuntimeSpecialName(bool value)
public TypeDefinition get_DeclaringType()
public void set_DeclaringType(TypeDefinition value)
}
public Mono.Cecil.IMetadataResolver {
public TypeDefinition Resolve(TypeReference type)
public FieldDefinition Resolve(FieldReference field)
public MethodDefinition Resolve(MethodReference method)
}
public Mono.Cecil.IMetadataScope {
public MetadataScopeType MetadataScopeType
public string Name
public MetadataScopeType get_MetadataScopeType()
public string get_Name()
public void set_Name(string value)
}
public Mono.Cecil.IMetadataTokenProvider {
public MetadataToken MetadataToken
public MetadataToken get_MetadataToken()
public void set_MetadataToken(MetadataToken value)
}
public Mono.Cecil.IMethodSignature {
public bool HasThis
public bool ExplicitThis
public MethodCallingConvention CallingConvention
public bool HasParameters
public Collection`1<ParameterDefinition> Parameters
public TypeReference ReturnType
public MethodReturnType MethodReturnType
public bool get_HasThis()
public void set_HasThis(bool value)
public bool get_ExplicitThis()
public void set_ExplicitThis(bool value)
public MethodCallingConvention get_CallingConvention()
public void set_CallingConvention(MethodCallingConvention value)
public bool get_HasParameters()
public Collection`1<ParameterDefinition> get_Parameters()
public TypeReference get_ReturnType()
public void set_ReturnType(TypeReference value)
public MethodReturnType get_MethodReturnType()
}
internal Mono.Cecil.ImmediateModuleReader : ModuleReader {
public void .ctor(Image image)
protected void ReadModule()
public void ReadModule(ModuleDefinition module)
private void ReadTypes(Collection`1<TypeDefinition> types)
private void ReadType(TypeDefinition type)
private void ReadGenericParameters(IGenericParameterProvider provider)
private void ReadSecurityDeclarations(ISecurityDeclarationProvider provider)
private void ReadCustomAttributes(ICustomAttributeProvider provider)
private void ReadFields(TypeDefinition type)
private void ReadMethods(TypeDefinition type)
private void ReadParameters(MethodDefinition method)
private void ReadProperties(TypeDefinition type)
private void ReadEvents(TypeDefinition type)
private void Read(object collection)
private ModuleDefinition <ReadModule>b__1_0(ModuleDefinition module, MetadataReader reader)
}
public Mono.Cecil.IModifierType {
public TypeReference ModifierType
public TypeReference ElementType
public TypeReference get_ModifierType()
public TypeReference get_ElementType()
}
internal Mono.Cecil.ImplMapTable : SortedTable`1<Row`4<PInvokeAttributes, UInt32, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
public int Compare(Row`4<PInvokeAttributes, UInt32, UInt32, UInt32> x, Row`4<PInvokeAttributes, UInt32, UInt32, UInt32> y)
}
internal Mono.Cecil.ImportGenericContext : ValueType {
private Collection`1<IGenericParameterProvider> stack
public bool IsEmpty
public bool get_IsEmpty()
public void .ctor(IGenericParameterProvider provider)
public void Push(IGenericParameterProvider provider)
public void Pop()
public TypeReference MethodParameter(string method, int position)
public string NormalizeMethodName(MethodReference method)
public TypeReference TypeParameter(string type, int position)
private TypeReference GenericTypeFor(IGenericParameterProvider context)
}
internal Mono.Cecil.ImportGenericKind : Enum {
public int value__
public ImportGenericKind Definition
public ImportGenericKind Open
}
internal Mono.Cecil.InterfaceImplTable : MetadataTable`1<Row`2<UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.ISecurityDeclarationProvider {
public bool HasSecurityDeclarations
public Collection`1<SecurityDeclaration> SecurityDeclarations
public bool get_HasSecurityDeclarations()
public Collection`1<SecurityDeclaration> get_SecurityDeclarations()
}
public Mono.Cecil.LinkedResource : Resource {
internal Byte[] hash
private string file
public Byte[] Hash
public string File
public ResourceType ResourceType
public Byte[] get_Hash()
public string get_File()
public void set_File(string value)
public ResourceType get_ResourceType()
public void .ctor(string name, ManifestResourceAttributes flags)
public void .ctor(string name, ManifestResourceAttributes flags, string file)
}
public Mono.Cecil.ManifestResourceAttributes : Enum {
public UInt32 value__
public ManifestResourceAttributes VisibilityMask
public ManifestResourceAttributes Public
public ManifestResourceAttributes Private
}
internal Mono.Cecil.ManifestResourceTable : MetadataTable`1<Row`4<UInt32, ManifestResourceAttributes, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.MarshalInfo : object {
internal NativeType native
public NativeType NativeType
public NativeType get_NativeType()
public void set_NativeType(NativeType value)
public void .ctor(NativeType native)
}
internal Mono.Cecil.MemberDefinitionCollection`1 : Collection`1<T> {
private TypeDefinition container
internal void .ctor(TypeDefinition container)
internal void .ctor(TypeDefinition container, int capacity)
protected void OnAdd(T item, int index)
protected void OnSet(T item, int index)
protected void OnInsert(T item, int index)
protected void OnRemove(T item, int index)
protected void OnClear()
private void Attach(T element)
private void Detach(T element)
}
public Mono.Cecil.MemberReference : object {
private string name
private TypeReference declaring_type
internal MetadataToken token
public string Name
public string FullName
public TypeReference DeclaringType
public MetadataToken MetadataToken
internal bool HasImage
public ModuleDefinition Module
public bool IsDefinition
public bool ContainsGenericParameter
public string get_Name()
public void set_Name(string value)
public string get_FullName()
public TypeReference get_DeclaringType()
public void set_DeclaringType(TypeReference value)
public MetadataToken get_MetadataToken()
public void set_MetadataToken(MetadataToken value)
internal bool get_HasImage()
public ModuleDefinition get_Module()
public bool get_IsDefinition()
public bool get_ContainsGenericParameter()
internal void .ctor(string name)
internal string MemberFullName()
public string ToString()
}
internal Mono.Cecil.MemberRefTable : MetadataTable`1<Row`3<UInt32, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
internal Mono.Cecil.Metadata.BlobHeap : Heap {
public void .ctor(Section section, UInt32 start, UInt32 size)
public Byte[] Read(UInt32 index)
}
internal Mono.Cecil.Metadata.BlobHeapBuffer : HeapBuffer {
private Dictionary`2<ByteBuffer, UInt32> blobs
public bool IsEmpty
public bool get_IsEmpty()
public UInt32 GetBlobIndex(ByteBuffer blob)
private void WriteBlob(ByteBuffer blob)
}
internal Mono.Cecil.Metadata.CodedIndex : Enum {
public int value__
public CodedIndex TypeDefOrRef
public CodedIndex HasConstant
public CodedIndex HasCustomAttribute
public CodedIndex HasFieldMarshal
public CodedIndex HasDeclSecurity
public CodedIndex MemberRefParent
public CodedIndex HasSemantics
public CodedIndex MethodDefOrRef
public CodedIndex MemberForwarded
public CodedIndex Implementation
public CodedIndex CustomAttributeType
public CodedIndex ResolutionScope
public CodedIndex TypeOrMethodDef
}
internal Mono.Cecil.Metadata.DataBuffer : ByteBuffer {
public UInt32 AddData(Byte[] data)
}
internal Mono.Cecil.Metadata.ElementType : Enum {
public byte value__
public ElementType None
public ElementType Void
public ElementType Boolean
public ElementType Char
public ElementType I1
public ElementType U1
public ElementType I2
public ElementType U2
public ElementType I4
public ElementType U4
public ElementType I8
public ElementType U8
public ElementType R4
public ElementType R8
public ElementType String
public ElementType Ptr
public ElementType ByRef
public ElementType ValueType
public ElementType Class
public ElementType Var
public ElementType Array
public ElementType GenericInst
public ElementType TypedByRef
public ElementType I
public ElementType U
public ElementType FnPtr
public ElementType Object
public ElementType SzArray
public ElementType MVar
public ElementType CModReqD
public ElementType CModOpt
public ElementType Internal
public ElementType Modifier
public ElementType Sentinel
public ElementType Pinned
public ElementType Type
public ElementType Boxed
public ElementType Enum
}
internal Mono.Cecil.Metadata.GuidHeap : Heap {
public void .ctor(Section section, UInt32 start, UInt32 size)
public Guid Read(UInt32 index)
}
internal Mono.Cecil.Metadata.Heap : object {
public int IndexSize
public Section Section
public UInt32 Offset
public UInt32 Size
protected void .ctor(Section section, UInt32 offset, UInt32 size)
}
internal Mono.Cecil.Metadata.HeapBuffer : ByteBuffer {
public bool IsLarge
public bool IsEmpty
public bool get_IsLarge()
public bool get_IsEmpty()
protected void .ctor(int length)
}
internal Mono.Cecil.Metadata.ResourceBuffer : ByteBuffer {
public UInt32 AddResource(Byte[] resource)
}
internal Mono.Cecil.Metadata.Row`2 : ValueType {
internal T1 Col1
internal T2 Col2
public void .ctor(T1 col1, T2 col2)
}
internal Mono.Cecil.Metadata.Row`3 : ValueType {
internal T1 Col1
internal T2 Col2
internal T3 Col3
public void .ctor(T1 col1, T2 col2, T3 col3)
}
internal Mono.Cecil.Metadata.Row`4 : ValueType {
internal T1 Col1
internal T2 Col2
internal T3 Col3
internal T4 Col4
public void .ctor(T1 col1, T2 col2, T3 col3, T4 col4)
}
internal Mono.Cecil.Metadata.Row`5 : ValueType {
internal T1 Col1
internal T2 Col2
internal T3 Col3
internal T4 Col4
internal T5 Col5
public void .ctor(T1 col1, T2 col2, T3 col3, T4 col4, T5 col5)
}
internal Mono.Cecil.Metadata.Row`6 : ValueType {
internal T1 Col1
internal T2 Col2
internal T3 Col3
internal T4 Col4
internal T5 Col5
internal T6 Col6
public void .ctor(T1 col1, T2 col2, T3 col3, T4 col4, T5 col5, T6 col6)
}
internal Mono.Cecil.Metadata.Row`9 : ValueType {
internal T1 Col1
internal T2 Col2
internal T3 Col3
internal T4 Col4
internal T5 Col5
internal T6 Col6
internal T7 Col7
internal T8 Col8
internal T9 Col9
public void .ctor(T1 col1, T2 col2, T3 col3, T4 col4, T5 col5, T6 col6, T7 col7, T8 col8, T9 col9)
}
internal Mono.Cecil.Metadata.RowEqualityComparer : object {
public bool Equals(Row`2<string, string> x, Row`2<string, string> y)
public int GetHashCode(Row`2<string, string> obj)
public bool Equals(Row`2<UInt32, UInt32> x, Row`2<UInt32, UInt32> y)
public int GetHashCode(Row`2<UInt32, UInt32> obj)
public bool Equals(Row`3<UInt32, UInt32, UInt32> x, Row`3<UInt32, UInt32, UInt32> y)
public int GetHashCode(Row`3<UInt32, UInt32, UInt32> obj)
}
internal Mono.Cecil.Metadata.StringHeap : Heap {
private Dictionary`2<UInt32, string> strings
public void .ctor(Section section, UInt32 start, UInt32 size)
public string Read(UInt32 index)
protected string ReadStringAt(UInt32 index)
}
internal Mono.Cecil.Metadata.StringHeapBuffer : HeapBuffer {
private Dictionary`2<string, UInt32> strings
public bool IsEmpty
public bool get_IsEmpty()
public UInt32 GetStringIndex(string string)
protected void WriteString(string string)
}
internal Mono.Cecil.Metadata.Table : Enum {
public byte value__
public Table Module
public Table TypeRef
public Table TypeDef
public Table FieldPtr
public Table Field
public Table MethodPtr
public Table Method
public Table ParamPtr
public Table Param
public Table InterfaceImpl
public Table MemberRef
public Table Constant
public Table CustomAttribute
public Table FieldMarshal
public Table DeclSecurity
public Table ClassLayout
public Table FieldLayout
public Table StandAloneSig
public Table EventMap
public Table EventPtr
public Table Event
public Table PropertyMap
public Table PropertyPtr
public Table Property
public Table MethodSemantics
public Table MethodImpl
public Table ModuleRef
public Table TypeSpec
public Table ImplMap
public Table FieldRVA
public Table EncLog
public Table EncMap
public Table Assembly
public Table AssemblyProcessor
public Table AssemblyOS
public Table AssemblyRef
public Table AssemblyRefProcessor
public Table AssemblyRefOS
public Table File
public Table ExportedType
public Table ManifestResource
public Table NestedClass
public Table GenericParam
public Table MethodSpec
public Table GenericParamConstraint
}
internal Mono.Cecil.Metadata.TableHeap : Heap {
public long Valid
public long Sorted
public int TableCount
public TableInformation[] Tables
public TableInformation Item
public TableInformation get_Item(Table table)
public void .ctor(Section section, UInt32 start, UInt32 size)
public bool HasTable(Table table)
}
internal Mono.Cecil.Metadata.TableHeapBuffer : HeapBuffer {
private ModuleDefinition module
private MetadataBuilder metadata
internal MetadataTable[] tables
private bool large_string
private bool large_blob
private Int32[] coded_index_sizes
private Func`2<Table, int> counter
public bool IsEmpty
public bool get_IsEmpty()
public void .ctor(ModuleDefinition module, MetadataBuilder metadata)
private int GetTableLength(Table table)
public TTable GetTable(Table table)
public void WriteBySize(UInt32 value, int size)
public void WriteBySize(UInt32 value, bool large)
public void WriteString(UInt32 string)
public void WriteBlob(UInt32 blob)
public void WriteRID(UInt32 rid, Table table)
private int GetCodedIndexSize(CodedIndex coded_index)
public void WriteCodedRID(UInt32 rid, CodedIndex coded_index)
public void WriteTableHeap()
private void WriteRowCount()
private void WriteTables()
private ulong GetValid()
private byte GetHeapSizes()
private byte GetTableHeapVersion()
public void FixupData(UInt32 data_rva)
}
internal Mono.Cecil.Metadata.TableInformation : ValueType {
public UInt32 Offset
public UInt32 Length
public UInt32 RowSize
}
internal Mono.Cecil.Metadata.UserStringHeap : StringHeap {
public void .ctor(Section section, UInt32 start, UInt32 size)
protected string ReadStringAt(UInt32 index)
}
internal Mono.Cecil.Metadata.UserStringHeapBuffer : StringHeapBuffer {
protected void WriteString(string string)
}
internal Mono.Cecil.MetadataBuilder : object {
internal ModuleDefinition module
internal ISymbolWriterProvider symbol_writer_provider
internal ISymbolWriter symbol_writer
internal TextMap text_map
internal string fq_name
private Dictionary`2<Row`3<UInt32, UInt32, UInt32>, MetadataToken> type_ref_map
private Dictionary`2<UInt32, MetadataToken> type_spec_map
private Dictionary`2<Row`3<UInt32, UInt32, UInt32>, MetadataToken> member_ref_map
private Dictionary`2<Row`2<UInt32, UInt32>, MetadataToken> method_spec_map
private Collection`1<GenericParameter> generic_parameters
private Dictionary`2<MetadataToken, MetadataToken> method_def_map
internal CodeWriter code
internal DataBuffer data
internal ResourceBuffer resources
internal StringHeapBuffer string_heap
internal UserStringHeapBuffer user_string_heap
internal BlobHeapBuffer blob_heap
internal TableHeapBuffer table_heap
internal MetadataToken entry_point
private UInt32 type_rid
private UInt32 field_rid
private UInt32 method_rid
private UInt32 param_rid
private UInt32 property_rid
private UInt32 event_rid
private TypeRefTable type_ref_table
private TypeDefTable type_def_table
private FieldTable field_table
private MethodTable method_table
private ParamTable param_table
private InterfaceImplTable iface_impl_table
private MemberRefTable member_ref_table
private ConstantTable constant_table
private CustomAttributeTable custom_attribute_table
private DeclSecurityTable declsec_table
private StandAloneSigTable standalone_sig_table
private EventMapTable event_map_table
private EventTable event_table
private PropertyMapTable property_map_table
private PropertyTable property_table
private TypeSpecTable typespec_table
private MethodSpecTable method_spec_table
internal bool write_symbols
public void .ctor(ModuleDefinition module, string fq_name, ISymbolWriterProvider symbol_writer_provider, ISymbolWriter symbol_writer)
private TextMap CreateTextMap()
private TTable GetTable(Table table)
private UInt32 GetStringIndex(string string)
private UInt32 GetBlobIndex(ByteBuffer blob)
private UInt32 GetBlobIndex(Byte[] blob)
public void BuildMetadata()
private void BuildModule()
private void BuildAssembly()
private void BuildModules()
private string GetModuleFileName(string name)
private void AddAssemblyReferences()
private void AddModuleReferences()
private void AddResources()
private UInt32 AddLinkedResource(LinkedResource resource)
private UInt32 AddEmbeddedResource(EmbeddedResource resource)
private void AddExportedTypes()
private MetadataToken GetExportedTypeScope(ExportedType exported_type)
private void BuildTypes()
private void AttachTokens()
private void AttachTypeDefToken(TypeDefinition type)
private void AttachNestedTypesDefToken(TypeDefinition type)
private void AttachFieldsDefToken(TypeDefinition type)
private void AttachMethodsDefToken(TypeDefinition type)
public bool TryGetOriginalMethodToken(MetadataToken new_token, MetadataToken& original)
private MetadataToken GetTypeToken(TypeReference type)
private MetadataToken GetTypeSpecToken(TypeReference type)
private MetadataToken AddTypeSpecification(TypeReference type, UInt32 row)
private MetadataToken GetTypeRefToken(TypeReference type)
private Row`3<UInt32, UInt32, UInt32> CreateTypeRefRow(TypeReference type)
private MetadataToken GetScopeToken(TypeReference type)
private UInt32 MakeCodedRID(IMetadataTokenProvider provider, CodedIndex index)
private UInt32 MakeCodedRID(MetadataToken token, CodedIndex index)
private MetadataToken AddTypeReference(TypeReference type, Row`3<UInt32, UInt32, UInt32> row)
private void AddTypeDefs()
private void AddType(TypeDefinition type)
private void AddGenericParameters(IGenericParameterProvider owner)
private void AddGenericParameters()
private void AddConstraints(GenericParameter generic_parameter, GenericParamConstraintTable table)
private void AddInterfaces(TypeDefinition type)
private void AddLayoutInfo(TypeDefinition type)
private void AddNestedTypes(TypeDefinition type)
private void AddFields(TypeDefinition type)
private void AddField(FieldDefinition field)
private void AddFieldRVA(FieldDefinition field)
private void AddFieldLayout(FieldDefinition field)
private void AddMethods(TypeDefinition type)
private void AddMethod(MethodDefinition method)
private void AddParameters(MethodDefinition method)
private void AddPInvokeInfo(MethodDefinition method)
private void AddOverrides(MethodDefinition method)
private bool RequiresParameterRow(ParameterDefinition parameter)
private void AddParameter(ushort sequence, ParameterDefinition parameter, ParamTable table)
private void AddMarshalInfo(IMarshalInfoProvider owner)
private void AddProperties(TypeDefinition type)
private void AddProperty(PropertyDefinition property)
private void AddOtherSemantic(IMetadataTokenProvider owner, Collection`1<MethodDefinition> others)
private void AddEvents(TypeDefinition type)
private void AddEvent(EventDefinition event)
private void AddSemantic(MethodSemanticsAttributes semantics, IMetadataTokenProvider provider, MethodDefinition method)
private void AddConstant(IConstantProvider owner, TypeReference type)
private ElementType GetConstantType(TypeReference constant_type, object constant)
private ElementType GetConstantType(Type type)
private void AddCustomAttributes(ICustomAttributeProvider owner)
private void AddSecurityDeclarations(ISecurityDeclarationProvider owner)
private MetadataToken GetMemberRefToken(MemberReference member)
private Row`3<UInt32, UInt32, UInt32> CreateMemberRefRow(MemberReference member)
private void AddMemberReference(MemberReference member, Row`3<UInt32, UInt32, UInt32> row)
private MetadataToken GetMethodSpecToken(MethodSpecification method_spec)
private void AddMethodSpecification(MethodSpecification method_spec, Row`2<UInt32, UInt32> row)
private Row`2<UInt32, UInt32> CreateMethodSpecRow(MethodSpecification method_spec)
private SignatureWriter CreateSignatureWriter()
private SignatureWriter GetMethodSpecSignature(MethodSpecification method_spec)
public UInt32 AddStandAloneSignature(UInt32 signature)
public UInt32 GetLocalVariableBlobIndex(Collection`1<VariableDefinition> variables)
public UInt32 GetCallSiteBlobIndex(CallSite call_site)
private SignatureWriter GetVariablesSignature(Collection`1<VariableDefinition> variables)
private SignatureWriter GetFieldSignature(FieldReference field)
private SignatureWriter GetMethodSignature(IMethodSignature method)
private SignatureWriter GetMemberRefSignature(MemberReference member)
private SignatureWriter GetPropertySignature(PropertyDefinition property)
private SignatureWriter GetTypeSpecSignature(TypeReference type)
private SignatureWriter GetConstantSignature(ElementType type, object value)
private SignatureWriter GetCustomAttributeSignature(CustomAttribute attribute)
private SignatureWriter GetSecurityDeclarationSignature(SecurityDeclaration declaration)
private SignatureWriter GetMarshalInfoSignature(IMarshalInfoProvider owner)
private Exception CreateForeignMemberException(MemberReference member)
public MetadataToken LookupToken(IMetadataTokenProvider provider)
}
internal Mono.Cecil.MetadataImporter : object {
private ModuleDefinition module
private Dictionary`2<Type, ElementType> type_etype_mapping
public void .ctor(ModuleDefinition module)
public TypeReference ImportType(Type type, ImportGenericContext context)
public TypeReference ImportType(Type type, ImportGenericContext context, ImportGenericKind import_kind)
private bool ImportOpenGenericType(Type type, ImportGenericKind import_kind)
private bool ImportOpenGenericMethod(MethodBase method, ImportGenericKind import_kind)
private bool IsNestedType(Type type)
private TypeReference ImportTypeSpecification(Type type, ImportGenericContext context)
private TypeReference ImportGenericParameter(Type type, ImportGenericContext context)
private string NormalizeMethodName(MethodBase method)
private string NormalizeTypeFullName(Type type)
private TypeReference ImportGenericInstance(Type type, ImportGenericContext context)
private bool IsTypeSpecification(Type type)
private bool IsGenericInstance(Type type)
private ElementType ImportElementType(Type type)
private AssemblyNameReference ImportScope(Assembly assembly)
private bool TryGetAssemblyNameReference(AssemblyName name, AssemblyNameReference& assembly_reference)
public FieldReference ImportField(FieldInfo field, ImportGenericContext context)
private FieldInfo ResolveFieldDefinition(FieldInfo field)
public MethodReference ImportMethod(MethodBase method, ImportGenericContext context, ImportGenericKind import_kind)
private void ImportGenericParameters(IGenericParameterProvider provider, Type[] arguments)
private bool IsMethodSpecification(MethodBase method)
private MethodReference ImportMethodSpecification(MethodBase method, ImportGenericContext context)
private bool HasCallingConvention(MethodBase method, CallingConventions conventions)
public TypeReference ImportType(TypeReference type, ImportGenericContext context)
private IMetadataScope ImportScope(IMetadataScope scope)
private AssemblyNameReference ImportAssemblyName(AssemblyNameReference name)
private bool TryGetAssemblyNameReference(AssemblyNameReference name_reference, AssemblyNameReference& assembly_reference)
private void ImportGenericParameters(IGenericParameterProvider imported, IGenericParameterProvider original)
private TypeReference ImportTypeSpecification(TypeReference type, ImportGenericContext context)
public FieldReference ImportField(FieldReference field, ImportGenericContext context)
public MethodReference ImportMethod(MethodReference method, ImportGenericContext context)
private MethodSpecification ImportMethodSpecification(MethodReference method, ImportGenericContext context)
}
internal Mono.Cecil.MetadataReader : ByteBuffer {
internal Image image
internal ModuleDefinition module
internal MetadataSystem metadata
internal IGenericContext context
internal CodeReader code
private UInt32 Position
private UInt32 get_Position()
private void set_Position(UInt32 value)
public void .ctor(ModuleDefinition module)
private int GetCodedIndexSize(CodedIndex index)
private UInt32 ReadByIndexSize(int size)
private Byte[] ReadBlob()
private Byte[] ReadBlob(UInt32 signature)
private UInt32 ReadBlobIndex()
private string ReadString()
private UInt32 ReadStringIndex()
private UInt32 ReadTableIndex(Table table)
private MetadataToken ReadMetadataToken(CodedIndex index)
private int MoveTo(Table table)
private bool MoveTo(Table table, UInt32 row)
public AssemblyNameDefinition ReadAssemblyNameDefinition()
public ModuleDefinition Populate(ModuleDefinition module)
private void InitializeAssemblyReferences()
public Collection`1<AssemblyNameReference> ReadAssemblyReferences()
public MethodDefinition ReadEntryPoint()
public Collection`1<ModuleDefinition> ReadModules()
private string GetModuleFileName(string name)
private void InitializeModuleReferences()
public Collection`1<ModuleReference> ReadModuleReferences()
public bool HasFileResource()
public Collection`1<Resource> ReadResources()
private Row`3<FileAttributes, string, UInt32> ReadFileRecord(UInt32 rid)
public MemoryStream GetManagedResourceStream(UInt32 offset)
private void PopulateVersionAndFlags(AssemblyNameReference name)
private void PopulateNameAndCulture(AssemblyNameReference name)
public TypeDefinitionCollection ReadTypes()
private void CompleteTypes()
private void InitializeTypeDefinitions()
private bool IsNested(TypeAttributes attributes)
public bool HasNestedTypes(TypeDefinition type)
public Collection`1<TypeDefinition> ReadNestedTypes(TypeDefinition type)
private void InitializeNestedTypes()
private void AddNestedMapping(UInt32 declaring, UInt32 nested)
private TValue[] AddMapping(Dictionary`2<TKey, TValue[]> cache, TKey key, TValue value)
private TypeDefinition ReadType(UInt32 rid)
private TypeDefinition GetNestedTypeDeclaringType(TypeDefinition type)
private Range ReadFieldsRange(UInt32 type_index)
private Range ReadMethodsRange(UInt32 type_index)
private Range ReadListRange(UInt32 current_index, Table current, Table target)
public Row`2<short, int> ReadTypeLayout(TypeDefinition type)
private void InitializeTypeLayouts()
public TypeReference GetTypeDefOrRef(MetadataToken token)
public TypeDefinition GetTypeDefinition(UInt32 rid)
private TypeDefinition ReadTypeDefinition(UInt32 rid)
private void InitializeTypeReferences()
public TypeReference GetTypeReference(string scope, string full_name)
private TypeReference GetTypeReference(UInt32 rid)
private TypeReference ReadTypeReference(UInt32 rid)
private IMetadataScope GetTypeReferenceScope(MetadataToken scope)
public IEnumerable`1<TypeReference> GetTypeReferences()
private TypeReference GetTypeSpecification(UInt32 rid)
private SignatureReader ReadSignature(UInt32 signature)
public bool HasInterfaces(TypeDefinition type)
public Collection`1<TypeReference> ReadInterfaces(TypeDefinition type)
private void InitializeInterfaces()
private void AddInterfaceMapping(UInt32 type, MetadataToken interface)
public Collection`1<FieldDefinition> ReadFields(TypeDefinition type)
private void ReadField(UInt32 field_rid, Collection`1<FieldDefinition> fields)
private void InitializeFields()
private TypeReference ReadFieldType(UInt32 signature)
public int ReadFieldRVA(FieldDefinition field)
private Byte[] GetFieldInitializeValue(int size, UInt32 rva)
private int GetFieldTypeSize(TypeReference type)
private void InitializeFieldRVAs()
public int ReadFieldLayout(FieldDefinition field)
private void InitializeFieldLayouts()
public bool HasEvents(TypeDefinition type)
public Collection`1<EventDefinition> ReadEvents(TypeDefinition type)
private void ReadEvent(UInt32 event_rid, Collection`1<EventDefinition> events)
private void InitializeEvents()
private Range ReadEventsRange(UInt32 rid)
public bool HasProperties(TypeDefinition type)
public Collection`1<PropertyDefinition> ReadProperties(TypeDefinition type)
private void ReadProperty(UInt32 property_rid, Collection`1<PropertyDefinition> properties)
private void InitializeProperties()
private Range ReadPropertiesRange(UInt32 rid)
private MethodSemanticsAttributes ReadMethodSemantics(MethodDefinition method)
private EventDefinition GetEvent(TypeDefinition type, MetadataToken token)
private PropertyDefinition GetProperty(TypeDefinition type, MetadataToken token)
private TMember GetMember(Collection`1<TMember> members, MetadataToken token)
private void InitializeMethodSemantics()
public PropertyDefinition ReadMethods(PropertyDefinition property)
public EventDefinition ReadMethods(EventDefinition event)
public MethodSemanticsAttributes ReadAllSemantics(MethodDefinition method)
private void ReadAllSemantics(TypeDefinition type)
private Range ReadParametersRange(UInt32 method_rid)
public Collection`1<MethodDefinition> ReadMethods(TypeDefinition type)
private void ReadPointers(Table ptr, Table table, Range range, Collection`1<TMember> members, Action`2<UInt32, Collection`1<TMember>> reader)
private bool IsDeleted(IMemberDefinition member)
private void InitializeMethods()
private void ReadMethod(UInt32 method_rid, Collection`1<MethodDefinition> methods)
private void ReadParameters(MethodDefinition method, Range param_range)
private void ReadParameterPointers(MethodDefinition method, Range range)
private void ReadParameter(UInt32 param_rid, MethodDefinition method)
private void ReadMethodSignature(UInt32 signature, IMethodSignature method)
public PInvokeInfo ReadPInvokeInfo(MethodDefinition method)
private void InitializePInvokes()
public bool HasGenericParameters(IGenericParameterProvider provider)
public Collection`1<GenericParameter> ReadGenericParameters(IGenericParameterProvider provider)
private void ReadGenericParametersRange(Range range, IGenericParameterProvider provider, GenericParameterCollection generic_parameters)
private void InitializeGenericParameters()
private Dictionary`2<MetadataToken, Range[]> InitializeRanges(Table table, Func`1<MetadataToken> get_next)
private void AddRange(Dictionary`2<MetadataToken, Range[]> ranges, MetadataToken owner, Range range)
public bool HasGenericConstraints(GenericParameter generic_parameter)
public Collection`1<TypeReference> ReadGenericConstraints(GenericParameter generic_parameter)
private void InitializeGenericConstraints()
private void AddGenericConstraintMapping(UInt32 generic_parameter, MetadataToken constraint)
public bool HasOverrides(MethodDefinition method)
public Collection`1<MethodReference> ReadOverrides(MethodDefinition method)
private void InitializeOverrides()
private void AddOverrideMapping(UInt32 method_rid, MetadataToken override)
public MethodBody ReadMethodBody(MethodDefinition method)
public CallSite ReadCallSite(MetadataToken token)
public VariableDefinitionCollection ReadVariables(MetadataToken local_var_token)
public IMetadataTokenProvider LookupToken(MetadataToken token)
public FieldDefinition GetFieldDefinition(UInt32 rid)
private FieldDefinition LookupField(UInt32 rid)
public MethodDefinition GetMethodDefinition(UInt32 rid)
private MethodDefinition LookupMethod(UInt32 rid)
private MethodSpecification GetMethodSpecification(UInt32 rid)
private MethodSpecification ReadMethodSpecSignature(UInt32 signature, MethodReference method)
private MemberReference GetMemberReference(UInt32 rid)
private MemberReference ReadMemberReference(UInt32 rid)
private MemberReference ReadTypeMemberReference(MetadataToken type, string name, UInt32 signature)
private MemberReference ReadMemberReferenceSignature(UInt32 signature, TypeReference declaring_type)
private MemberReference ReadMethodMemberReference(MetadataToken token, string name, UInt32 signature)
private void InitializeMemberReferences()
public IEnumerable`1<MemberReference> GetMemberReferences()
private void InitializeConstants()
public object ReadConstant(IConstantProvider owner)
private string ReadConstantString(Byte[] blob)
private object ReadConstantPrimitive(ElementType type, UInt32 signature)
private void InitializeCustomAttributes()
public bool HasCustomAttributes(ICustomAttributeProvider owner)
public Collection`1<CustomAttribute> ReadCustomAttributes(ICustomAttributeProvider owner)
private void ReadCustomAttributeRange(Range range, Collection`1<CustomAttribute> custom_attributes)
private int RangesSize(Range[] ranges)
public Byte[] ReadCustomAttributeBlob(UInt32 signature)
public void ReadCustomAttributeSignature(CustomAttribute attribute)
private void InitializeMarshalInfos()
public bool HasMarshalInfo(IMarshalInfoProvider owner)
public MarshalInfo ReadMarshalInfo(IMarshalInfoProvider owner)
private void InitializeSecurityDeclarations()
public bool HasSecurityDeclarations(ISecurityDeclarationProvider owner)
public Collection`1<SecurityDeclaration> ReadSecurityDeclarations(ISecurityDeclarationProvider owner)
private void ReadSecurityDeclarationRange(Range range, Collection`1<SecurityDeclaration> security_declarations)
public Byte[] ReadSecurityDeclarationBlob(UInt32 signature)
public void ReadSecurityDeclarationSignature(SecurityDeclaration declaration)
private void ReadXmlSecurityDeclaration(UInt32 signature, SecurityDeclaration declaration)
public Collection`1<ExportedType> ReadExportedTypes()
private IMetadataScope GetExportedTypeScope(MetadataToken token)
private ModuleReference GetModuleReferenceFromFile(MetadataToken token)
private void InitializeCollection(object o)
private MetadataToken <InitializeGenericParameters>b__110_0()
private MetadataToken <InitializeCustomAttributes>b__142_0()
private MetadataToken <InitializeSecurityDeclarations>b__152_0()
}
public Mono.Cecil.MetadataResolver : object {
private IAssemblyResolver assembly_resolver
public IAssemblyResolver AssemblyResolver
public IAssemblyResolver get_AssemblyResolver()
public void .ctor(IAssemblyResolver assemblyResolver)
public TypeDefinition Resolve(TypeReference type)
private TypeDefinition GetType(ModuleDefinition module, TypeReference reference)
private TypeDefinition GetTypeDefinition(ModuleDefinition module, TypeReference type)
public FieldDefinition Resolve(FieldReference field)
private FieldDefinition GetField(TypeDefinition type, FieldReference reference)
private FieldDefinition GetField(Collection`1<FieldDefinition> fields, FieldReference reference)
public MethodDefinition Resolve(MethodReference method)
private MethodDefinition GetMethod(TypeDefinition type, MethodReference reference)
public MethodDefinition GetMethod(Collection`1<MethodDefinition> methods, MethodReference reference)
private bool AreSame(Collection`1<ParameterDefinition> a, Collection`1<ParameterDefinition> b)
private bool AreSame(TypeSpecification a, TypeSpecification b)
private bool AreSame(ArrayType a, ArrayType b)
private bool AreSame(IModifierType a, IModifierType b)
private bool AreSame(GenericInstanceType a, GenericInstanceType b)
private bool AreSame(GenericParameter a, GenericParameter b)
private bool AreSame(TypeReference a, TypeReference b)
}
public Mono.Cecil.MetadataScopeType : Enum {
public int value__
public MetadataScopeType AssemblyNameReference
public MetadataScopeType ModuleReference
public MetadataScopeType ModuleDefinition
}
internal Mono.Cecil.MetadataSystem : object {
internal AssemblyNameReference[] AssemblyReferences
internal ModuleReference[] ModuleReferences
internal TypeDefinition[] Types
internal TypeReference[] TypeReferences
internal FieldDefinition[] Fields
internal MethodDefinition[] Methods
internal MemberReference[] MemberReferences
internal Dictionary`2<UInt32, UInt32[]> NestedTypes
internal Dictionary`2<UInt32, UInt32> ReverseNestedTypes
internal Dictionary`2<UInt32, MetadataToken[]> Interfaces
internal Dictionary`2<UInt32, Row`2<ushort, UInt32>> ClassLayouts
internal Dictionary`2<UInt32, UInt32> FieldLayouts
internal Dictionary`2<UInt32, UInt32> FieldRVAs
internal Dictionary`2<MetadataToken, UInt32> FieldMarshals
internal Dictionary`2<MetadataToken, Row`2<ElementType, UInt32>> Constants
internal Dictionary`2<UInt32, MetadataToken[]> Overrides
internal Dictionary`2<MetadataToken, Range[]> CustomAttributes
internal Dictionary`2<MetadataToken, Range[]> SecurityDeclarations
internal Dictionary`2<UInt32, Range> Events
internal Dictionary`2<UInt32, Range> Properties
internal Dictionary`2<UInt32, Row`2<MethodSemanticsAttributes, MetadataToken>> Semantics
internal Dictionary`2<UInt32, Row`3<PInvokeAttributes, UInt32, UInt32>> PInvokes
internal Dictionary`2<MetadataToken, Range[]> GenericParameters
internal Dictionary`2<UInt32, MetadataToken[]> GenericConstraints
private Dictionary`2<string, Row`2<ElementType, bool>> primitive_value_types
private void InitializePrimitives()
public void TryProcessPrimitiveTypeReference(TypeReference type)
public bool TryGetPrimitiveElementType(TypeDefinition type, ElementType& etype)
private bool TryGetPrimitiveData(TypeReference type, Row`2& primitive_data)
public void Clear()
public TypeDefinition GetTypeDefinition(UInt32 rid)
public void AddTypeDefinition(TypeDefinition type)
public TypeReference GetTypeReference(UInt32 rid)
public void AddTypeReference(TypeReference type)
public FieldDefinition GetFieldDefinition(UInt32 rid)
public void AddFieldDefinition(FieldDefinition field)
public MethodDefinition GetMethodDefinition(UInt32 rid)
public void AddMethodDefinition(MethodDefinition method)
public MemberReference GetMemberReference(UInt32 rid)
public void AddMemberReference(MemberReference member)
public bool TryGetNestedTypeMapping(TypeDefinition type, UInt32[]& mapping)
public void SetNestedTypeMapping(UInt32 type_rid, UInt32[] mapping)
public void RemoveNestedTypeMapping(TypeDefinition type)
public bool TryGetReverseNestedTypeMapping(TypeDefinition type, UInt32& declaring)
public void SetReverseNestedTypeMapping(UInt32 nested, UInt32 declaring)
public void RemoveReverseNestedTypeMapping(TypeDefinition type)
public bool TryGetInterfaceMapping(TypeDefinition type, MetadataToken[]& mapping)
public void SetInterfaceMapping(UInt32 type_rid, MetadataToken[] mapping)
public void RemoveInterfaceMapping(TypeDefinition type)
public void AddPropertiesRange(UInt32 type_rid, Range range)
public bool TryGetPropertiesRange(TypeDefinition type, Range& range)
public void RemovePropertiesRange(TypeDefinition type)
public void AddEventsRange(UInt32 type_rid, Range range)
public bool TryGetEventsRange(TypeDefinition type, Range& range)
public void RemoveEventsRange(TypeDefinition type)
public bool TryGetGenericParameterRanges(IGenericParameterProvider owner, Range[]& ranges)
public void RemoveGenericParameterRange(IGenericParameterProvider owner)
public bool TryGetCustomAttributeRanges(ICustomAttributeProvider owner, Range[]& ranges)
public void RemoveCustomAttributeRange(ICustomAttributeProvider owner)
public bool TryGetSecurityDeclarationRanges(ISecurityDeclarationProvider owner, Range[]& ranges)
public void RemoveSecurityDeclarationRange(ISecurityDeclarationProvider owner)
public bool TryGetGenericConstraintMapping(GenericParameter generic_parameter, MetadataToken[]& mapping)
public void SetGenericConstraintMapping(UInt32 gp_rid, MetadataToken[] mapping)
public void RemoveGenericConstraintMapping(GenericParameter generic_parameter)
public bool TryGetOverrideMapping(MethodDefinition method, MetadataToken[]& mapping)
public void SetOverrideMapping(UInt32 rid, MetadataToken[] mapping)
public void RemoveOverrideMapping(MethodDefinition method)
public TypeDefinition GetFieldDeclaringType(UInt32 field_rid)
public TypeDefinition GetMethodDeclaringType(UInt32 method_rid)
private TypeDefinition BinaryRangeSearch(TypeDefinition[] types, UInt32 rid, bool field)
}
internal Mono.Cecil.MetadataTable : object {
public int Length
public bool IsLarge
public int get_Length()
public bool get_IsLarge()
public void Write(TableHeapBuffer buffer)
public void Sort()
}
internal Mono.Cecil.MetadataTable`1 : MetadataTable {
internal TRow[] rows
internal int length
public int Length
public int get_Length()
public int AddRow(TRow row)
private void Grow()
public void Sort()
}
public Mono.Cecil.MetadataToken : ValueType {
private UInt32 token
public MetadataToken Zero
public UInt32 RID
public TokenType TokenType
public UInt32 get_RID()
public TokenType get_TokenType()
public void .ctor(UInt32 token)
public void .ctor(TokenType type)
public void .ctor(TokenType type, UInt32 rid)
public void .ctor(TokenType type, int rid)
public int ToInt32()
public UInt32 ToUInt32()
public int GetHashCode()
public bool Equals(object obj)
public bool op_Equality(MetadataToken one, MetadataToken other)
public bool op_Inequality(MetadataToken one, MetadataToken other)
public string ToString()
}
public Mono.Cecil.MetadataType : Enum {
public byte value__
public MetadataType Void
public MetadataType Boolean
public MetadataType Char
public MetadataType SByte
public MetadataType Byte
public MetadataType Int16
public MetadataType UInt16
public MetadataType Int32
public MetadataType UInt32
public MetadataType Int64
public MetadataType UInt64
public MetadataType Single
public MetadataType Double
public MetadataType String
public MetadataType Pointer
public MetadataType ByReference
public MetadataType ValueType
public MetadataType Class
public MetadataType Var
public MetadataType Array
public MetadataType GenericInstance
public MetadataType TypedByReference
public MetadataType IntPtr
public MetadataType UIntPtr
public MetadataType FunctionPointer
public MetadataType Object
public MetadataType MVar
public MetadataType RequiredModifier
public MetadataType OptionalModifier
public MetadataType Sentinel
public MetadataType Pinned
}
public Mono.Cecil.MethodAttributes : Enum {
public ushort value__
public MethodAttributes MemberAccessMask
public MethodAttributes CompilerControlled
public MethodAttributes Private
public MethodAttributes FamANDAssem
public MethodAttributes Assembly
public MethodAttributes Family
public MethodAttributes FamORAssem
public MethodAttributes Public
public MethodAttributes Static
public MethodAttributes Final
public MethodAttributes Virtual
public MethodAttributes HideBySig
public MethodAttributes VtableLayoutMask
public MethodAttributes ReuseSlot
public MethodAttributes NewSlot
public MethodAttributes CheckAccessOnOverride
public MethodAttributes Abstract
public MethodAttributes SpecialName
public MethodAttributes PInvokeImpl
public MethodAttributes UnmanagedExport
public MethodAttributes RTSpecialName
public MethodAttributes HasSecurity
public MethodAttributes RequireSecObject
}
public Mono.Cecil.MethodCallingConvention : Enum {
public byte value__
public MethodCallingConvention Default
public MethodCallingConvention C
public MethodCallingConvention StdCall
public MethodCallingConvention ThisCall
public MethodCallingConvention FastCall
public MethodCallingConvention VarArg
public MethodCallingConvention Generic
}
public Mono.Cecil.MethodDefinition : MethodReference {
private ushort attributes
private ushort impl_attributes
internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) sem_attrs_ready
internal MethodSemanticsAttributes sem_attrs
private Collection`1<CustomAttribute> custom_attributes
private Collection`1<SecurityDeclaration> security_declarations
internal UInt32 rva
internal PInvokeInfo pinvoke
private Collection`1<MethodReference> overrides
internal MethodBody body
public MethodAttributes Attributes
public MethodImplAttributes ImplAttributes
public MethodSemanticsAttributes SemanticsAttributes
public bool HasSecurityDeclarations
public Collection`1<SecurityDeclaration> SecurityDeclarations
public bool HasCustomAttributes
public Collection`1<CustomAttribute> CustomAttributes
public int RVA
public bool HasBody
public MethodBody Body
public bool HasPInvokeInfo
public PInvokeInfo PInvokeInfo
public bool HasOverrides
public Collection`1<MethodReference> Overrides
public bool HasGenericParameters
public Collection`1<GenericParameter> GenericParameters
public bool IsCompilerControlled
public bool IsPrivate
public bool IsFamilyAndAssembly
public bool IsAssembly
public bool IsFamily
public bool IsFamilyOrAssembly
public bool IsPublic
public bool IsStatic
public bool IsFinal
public bool IsVirtual
public bool IsHideBySig
public bool IsReuseSlot
public bool IsNewSlot
public bool IsCheckAccessOnOverride
public bool IsAbstract
public bool IsSpecialName
public bool IsPInvokeImpl
public bool IsUnmanagedExport
public bool IsRuntimeSpecialName
public bool HasSecurity
public bool IsIL
public bool IsNative
public bool IsRuntime
public bool IsUnmanaged
public bool IsManaged
public bool IsForwardRef
public bool IsPreserveSig
public bool IsInternalCall
public bool IsSynchronized
public bool NoInlining
public bool NoOptimization
public bool IsSetter
public bool IsGetter
public bool IsOther
public bool IsAddOn
public bool IsRemoveOn
public bool IsFire
public TypeDefinition DeclaringType
public bool IsConstructor
public bool IsDefinition
public MethodAttributes get_Attributes()
public void set_Attributes(MethodAttributes value)
public MethodImplAttributes get_ImplAttributes()
public void set_ImplAttributes(MethodImplAttributes value)
public MethodSemanticsAttributes get_SemanticsAttributes()
public void set_SemanticsAttributes(MethodSemanticsAttributes value)
internal void ReadSemantics()
public bool get_HasSecurityDeclarations()
public Collection`1<SecurityDeclaration> get_SecurityDeclarations()
public bool get_HasCustomAttributes()
public Collection`1<CustomAttribute> get_CustomAttributes()
public int get_RVA()
public bool get_HasBody()
public MethodBody get_Body()
public void set_Body(MethodBody value)
public bool get_HasPInvokeInfo()
public PInvokeInfo get_PInvokeInfo()
public void set_PInvokeInfo(PInvokeInfo value)
public bool get_HasOverrides()
public Collection`1<MethodReference> get_Overrides()
public bool get_HasGenericParameters()
public Collection`1<GenericParameter> get_GenericParameters()
public bool get_IsCompilerControlled()
public void set_IsCompilerControlled(bool value)
public bool get_IsPrivate()
public void set_IsPrivate(bool value)
public bool get_IsFamilyAndAssembly()
public void set_IsFamilyAndAssembly(bool value)
public bool get_IsAssembly()
public void set_IsAssembly(bool value)
public bool get_IsFamily()
public void set_IsFamily(bool value)
public bool get_IsFamilyOrAssembly()
public void set_IsFamilyOrAssembly(bool value)
public bool get_IsPublic()
public void set_IsPublic(bool value)
public bool get_IsStatic()
public void set_IsStatic(bool value)
public bool get_IsFinal()
public void set_IsFinal(bool value)
public bool get_IsVirtual()
public void set_IsVirtual(bool value)
public bool get_IsHideBySig()
public void set_IsHideBySig(bool value)
public bool get_IsReuseSlot()
public void set_IsReuseSlot(bool value)
public bool get_IsNewSlot()
public void set_IsNewSlot(bool value)
public bool get_IsCheckAccessOnOverride()
public void set_IsCheckAccessOnOverride(bool value)
public bool get_IsAbstract()
public void set_IsAbstract(bool value)
public bool get_IsSpecialName()
public void set_IsSpecialName(bool value)
public bool get_IsPInvokeImpl()
public void set_IsPInvokeImpl(bool value)
public bool get_IsUnmanagedExport()
public void set_IsUnmanagedExport(bool value)
public bool get_IsRuntimeSpecialName()
public void set_IsRuntimeSpecialName(bool value)
public bool get_HasSecurity()
public void set_HasSecurity(bool value)
public bool get_IsIL()
public void set_IsIL(bool value)
public bool get_IsNative()
public void set_IsNative(bool value)
public bool get_IsRuntime()
public void set_IsRuntime(bool value)
public bool get_IsUnmanaged()
public void set_IsUnmanaged(bool value)
public bool get_IsManaged()
public void set_IsManaged(bool value)
public bool get_IsForwardRef()
public void set_IsForwardRef(bool value)
public bool get_IsPreserveSig()
public void set_IsPreserveSig(bool value)
public bool get_IsInternalCall()
public void set_IsInternalCall(bool value)
public bool get_IsSynchronized()
public void set_IsSynchronized(bool value)
public bool get_NoInlining()
public void set_NoInlining(bool value)
public bool get_NoOptimization()
public void set_NoOptimization(bool value)
public bool get_IsSetter()
public void set_IsSetter(bool value)
public bool get_IsGetter()
public void set_IsGetter(bool value)
public bool get_IsOther()
public void set_IsOther(bool value)
public bool get_IsAddOn()
public void set_IsAddOn(bool value)
public bool get_IsRemoveOn()
public void set_IsRemoveOn(bool value)
public bool get_IsFire()
public void set_IsFire(bool value)
public TypeDefinition get_DeclaringType()
public void set_DeclaringType(TypeDefinition value)
public bool get_IsConstructor()
public bool get_IsDefinition()
public void .ctor(string name, MethodAttributes attributes, TypeReference returnType)
public MethodDefinition Resolve()
}
public Mono.Cecil.MethodImplAttributes : Enum {
public ushort value__
public MethodImplAttributes CodeTypeMask
public MethodImplAttributes IL
public MethodImplAttributes Native
public MethodImplAttributes OPTIL
public MethodImplAttributes Runtime
public MethodImplAttributes ManagedMask
public MethodImplAttributes Unmanaged
public MethodImplAttributes Managed
public MethodImplAttributes ForwardRef
public MethodImplAttributes PreserveSig
public MethodImplAttributes InternalCall
public MethodImplAttributes Synchronized
public MethodImplAttributes NoOptimization
public MethodImplAttributes NoInlining
}
internal Mono.Cecil.MethodImplTable : MetadataTable`1<Row`3<UInt32, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.MethodReference : MemberReference {
internal ParameterDefinitionCollection parameters
private MethodReturnType return_type
private bool has_this
private bool explicit_this
private MethodCallingConvention calling_convention
internal Collection`1<GenericParameter> generic_parameters
public bool HasThis
public bool ExplicitThis
public MethodCallingConvention CallingConvention
public bool HasParameters
public Collection`1<ParameterDefinition> Parameters
private IGenericParameterProvider Mono.Cecil.IGenericContext.Type
private IGenericParameterProvider Mono.Cecil.IGenericContext.Method
private GenericParameterType Mono.Cecil.IGenericParameterProvider.GenericParameterType
public bool HasGenericParameters
public Collection`1<GenericParameter> GenericParameters
public TypeReference ReturnType
public MethodReturnType MethodReturnType
public string FullName
public bool IsGenericInstance
public bool ContainsGenericParameter
public bool get_HasThis()
public void set_HasThis(bool value)
public bool get_ExplicitThis()
public void set_ExplicitThis(bool value)
public MethodCallingConvention get_CallingConvention()
public void set_CallingConvention(MethodCallingConvention value)
public bool get_HasParameters()
public Collection`1<ParameterDefinition> get_Parameters()
private IGenericParameterProvider Mono.Cecil.IGenericContext.get_Type()
private IGenericParameterProvider Mono.Cecil.IGenericContext.get_Method()
private GenericParameterType Mono.Cecil.IGenericParameterProvider.get_GenericParameterType()
public bool get_HasGenericParameters()
public Collection`1<GenericParameter> get_GenericParameters()
public TypeReference get_ReturnType()
public void set_ReturnType(TypeReference value)
public MethodReturnType get_MethodReturnType()
public void set_MethodReturnType(MethodReturnType value)
public string get_FullName()
public bool get_IsGenericInstance()
public bool get_ContainsGenericParameter()
public void .ctor(string name, TypeReference returnType)
public void .ctor(string name, TypeReference returnType, TypeReference declaringType)
public MethodReference GetElementMethod()
public MethodDefinition Resolve()
}
public Mono.Cecil.MethodReturnType : object {
internal IMethodSignature method
internal ParameterDefinition parameter
private TypeReference return_type
public IMethodSignature Method
public TypeReference ReturnType
internal ParameterDefinition Parameter
public MetadataToken MetadataToken
public ParameterAttributes Attributes
public bool HasCustomAttributes
public Collection`1<CustomAttribute> CustomAttributes
public bool HasDefault
public bool HasConstant
public object Constant
public bool HasFieldMarshal
public bool HasMarshalInfo
public MarshalInfo MarshalInfo
public IMethodSignature get_Method()
public TypeReference get_ReturnType()
public void set_ReturnType(TypeReference value)
internal ParameterDefinition get_Parameter()
public MetadataToken get_MetadataToken()
public void set_MetadataToken(MetadataToken value)
public ParameterAttributes get_Attributes()
public void set_Attributes(ParameterAttributes value)
public bool get_HasCustomAttributes()
public Collection`1<CustomAttribute> get_CustomAttributes()
public bool get_HasDefault()
public void set_HasDefault(bool value)
public bool get_HasConstant()
public void set_HasConstant(bool value)
public object get_Constant()
public void set_Constant(object value)
public bool get_HasFieldMarshal()
public void set_HasFieldMarshal(bool value)
public bool get_HasMarshalInfo()
public MarshalInfo get_MarshalInfo()
public void set_MarshalInfo(MarshalInfo value)
public void .ctor(IMethodSignature method)
}
public Mono.Cecil.MethodSemanticsAttributes : Enum {
public ushort value__
public MethodSemanticsAttributes None
public MethodSemanticsAttributes Setter
public MethodSemanticsAttributes Getter
public MethodSemanticsAttributes Other
public MethodSemanticsAttributes AddOn
public MethodSemanticsAttributes RemoveOn
public MethodSemanticsAttributes Fire
}
internal Mono.Cecil.MethodSemanticsTable : SortedTable`1<Row`3<MethodSemanticsAttributes, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
public int Compare(Row`3<MethodSemanticsAttributes, UInt32, UInt32> x, Row`3<MethodSemanticsAttributes, UInt32, UInt32> y)
}
public Mono.Cecil.MethodSpecification : MethodReference {
private MethodReference method
public MethodReference ElementMethod
public string Name
public MethodCallingConvention CallingConvention
public bool HasThis
public bool ExplicitThis
public MethodReturnType MethodReturnType
public TypeReference DeclaringType
public ModuleDefinition Module
public bool HasParameters
public Collection`1<ParameterDefinition> Parameters
public bool ContainsGenericParameter
public MethodReference get_ElementMethod()
public string get_Name()
public void set_Name(string value)
public MethodCallingConvention get_CallingConvention()
public void set_CallingConvention(MethodCallingConvention value)
public bool get_HasThis()
public void set_HasThis(bool value)
public bool get_ExplicitThis()
public void set_ExplicitThis(bool value)
public MethodReturnType get_MethodReturnType()
public void set_MethodReturnType(MethodReturnType value)
public TypeReference get_DeclaringType()
public void set_DeclaringType(TypeReference value)
public ModuleDefinition get_Module()
public bool get_HasParameters()
public Collection`1<ParameterDefinition> get_Parameters()
public bool get_ContainsGenericParameter()
internal void .ctor(MethodReference method)
public MethodReference GetElementMethod()
}
internal Mono.Cecil.MethodSpecTable : MetadataTable`1<Row`2<UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
internal Mono.Cecil.MethodTable : MetadataTable`1<Row`6<UInt32, MethodImplAttributes, MethodAttributes, UInt32, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
internal Mono.Cecil.Mixin : object {
internal object NoValue
internal object NotResolved
public int NotResolvedMarker
public int NoDataMarker
public UInt32 ReadCompressedUInt32(Byte[] data, Int32& position)
public MetadataToken GetMetadataToken(CodedIndex self, UInt32 data)
public UInt32 CompressMetadataToken(CodedIndex self, MetadataToken token)
public int GetSize(CodedIndex self, Func`2<Table, int> counter)
public bool GetHasSecurityDeclarations(ISecurityDeclarationProvider self, ModuleDefinition module)
public Collection`1<SecurityDeclaration> GetSecurityDeclarations(ISecurityDeclarationProvider self, Collection`1& variable, ModuleDefinition module)
public void CheckName(string name)
public void ResolveConstant(IConstantProvider self, Object& constant, ModuleDefinition module)
public bool GetHasCustomAttributes(ICustomAttributeProvider self, ModuleDefinition module)
public Collection`1<CustomAttribute> GetCustomAttributes(ICustomAttributeProvider self, Collection`1& variable, ModuleDefinition module)
public bool ContainsGenericParameter(IGenericInstance self)
public void GenericInstanceFullName(IGenericInstance self, StringBuilder builder)
public bool GetHasGenericParameters(IGenericParameterProvider self, ModuleDefinition module)
public Collection`1<GenericParameter> GetGenericParameters(IGenericParameterProvider self, Collection`1& collection, ModuleDefinition module)
public bool GetHasMarshalInfo(IMarshalInfoProvider self, ModuleDefinition module)
public MarshalInfo GetMarshalInfo(IMarshalInfoProvider self, MarshalInfo& variable, ModuleDefinition module)
public void CheckModifier(TypeReference modifierType, TypeReference type)
public bool HasImplicitThis(IMethodSignature self)
public void MethodSignatureFullName(IMethodSignature self, StringBuilder builder)
public bool GetAttributes(UInt32 self, UInt32 attributes)
public UInt32 SetAttributes(UInt32 self, UInt32 attributes, bool value)
public bool GetMaskedAttributes(UInt32 self, UInt32 mask, UInt32 attributes)
public UInt32 SetMaskedAttributes(UInt32 self, UInt32 mask, UInt32 attributes, bool value)
public bool GetAttributes(ushort self, ushort attributes)
public ushort SetAttributes(ushort self, ushort attributes, bool value)
public bool GetMaskedAttributes(ushort self, ushort mask, UInt32 attributes)
public ushort SetMaskedAttributes(ushort self, ushort mask, UInt32 attributes, bool value)
public ParameterDefinition GetParameter(MethodBody self, int index)
public VariableDefinition GetVariable(MethodBody self, int index)
public bool GetSemantics(MethodDefinition self, MethodSemanticsAttributes semantics)
public void SetSemantics(MethodDefinition self, MethodSemanticsAttributes semantics, bool value)
public bool IsVarArg(IMethodSignature self)
public int GetSentinelPosition(IMethodSignature self)
public void CheckParameters(object parameters)
public bool HasImage(ModuleDefinition self)
public bool IsCorlib(ModuleDefinition module)
public string GetFullyQualifiedName(Stream self)
public TargetRuntime ParseRuntime(string self)
public string RuntimeVersionString(TargetRuntime runtime)
public TypeReference GetEnumUnderlyingType(TypeDefinition self)
public TypeDefinition GetNestedType(TypeDefinition self, string fullname)
public bool IsPrimitive(ElementType self)
public string TypeFullName(TypeReference self)
public bool IsTypeOf(TypeReference self, string namespace, string name)
public bool IsTypeSpecification(TypeReference type)
public TypeDefinition CheckedResolve(TypeReference self)
public void CheckType(TypeReference type)
public RSA CreateRSA(StrongNameKeyPair key_pair)
private bool TryGetKeyContainer(ISerializable key_pair, Byte[]& key, String& key_container)
public bool IsNullOrEmpty(T[] self)
public bool IsNullOrEmpty(Collection`1<T> self)
public T[] Resize(T[] self, int length)
}
public Mono.Cecil.ModuleAttributes : Enum {
public int value__
public ModuleAttributes ILOnly
public ModuleAttributes Required32Bit
public ModuleAttributes StrongNameSigned
public ModuleAttributes Preferred32Bit
}
public Mono.Cecil.ModuleCharacteristics : Enum {
public int value__
public ModuleCharacteristics HighEntropyVA
public ModuleCharacteristics DynamicBase
public ModuleCharacteristics NoSEH
public ModuleCharacteristics NXCompat
public ModuleCharacteristics AppContainer
public ModuleCharacteristics TerminalServerAware
}
public Mono.Cecil.ModuleDefinition : ModuleReference {
internal Image Image
internal MetadataSystem MetadataSystem
internal ReadingMode ReadingMode
internal ISymbolReaderProvider SymbolReaderProvider
internal ISymbolReader symbol_reader
internal IAssemblyResolver assembly_resolver
internal IMetadataResolver metadata_resolver
internal TypeSystem type_system
private MetadataReader reader
private string fq_name
internal string runtime_version
internal ModuleKind kind
private TargetRuntime runtime
private TargetArchitecture architecture
private ModuleAttributes attributes
private ModuleCharacteristics characteristics
private Guid mvid
internal AssemblyDefinition assembly
private MethodDefinition entry_point
private MetadataImporter importer
private Collection`1<CustomAttribute> custom_attributes
private Collection`1<AssemblyNameReference> references
private Collection`1<ModuleReference> modules
private Collection`1<Resource> resources
private Collection`1<ExportedType> exported_types
private TypeDefinitionCollection types
private object module_lock
public bool IsMain
public ModuleKind Kind
public TargetRuntime Runtime
public string RuntimeVersion
public TargetArchitecture Architecture
public ModuleAttributes Attributes
public ModuleCharacteristics Characteristics
public string FullyQualifiedName
public Guid Mvid
internal bool HasImage
public bool HasSymbols
public ISymbolReader SymbolReader
public MetadataScopeType MetadataScopeType
public AssemblyDefinition Assembly
internal MetadataImporter MetadataImporter
public IAssemblyResolver AssemblyResolver
public IMetadataResolver MetadataResolver
public TypeSystem TypeSystem
public bool HasAssemblyReferences
public Collection`1<AssemblyNameReference> AssemblyReferences
public bool HasModuleReferences
public Collection`1<ModuleReference> ModuleReferences
public bool HasResources
public Collection`1<Resource> Resources
public bool HasCustomAttributes
public Collection`1<CustomAttribute> CustomAttributes
public bool HasTypes
public Collection`1<TypeDefinition> Types
public bool HasExportedTypes
public Collection`1<ExportedType> ExportedTypes
public MethodDefinition EntryPoint
internal object SyncRoot
public bool HasDebugHeader
public bool get_IsMain()
public ModuleKind get_Kind()
public void set_Kind(ModuleKind value)
public TargetRuntime get_Runtime()
public void set_Runtime(TargetRuntime value)
public string get_RuntimeVersion()
public void set_RuntimeVersion(string value)
public TargetArchitecture get_Architecture()
public void set_Architecture(TargetArchitecture value)
public ModuleAttributes get_Attributes()
public void set_Attributes(ModuleAttributes value)
public ModuleCharacteristics get_Characteristics()
public void set_Characteristics(ModuleCharacteristics value)
public string get_FullyQualifiedName()
public Guid get_Mvid()
public void set_Mvid(Guid value)
internal bool get_HasImage()
public bool get_HasSymbols()
public ISymbolReader get_SymbolReader()
public MetadataScopeType get_MetadataScopeType()
public AssemblyDefinition get_Assembly()
internal MetadataImporter get_MetadataImporter()
public IAssemblyResolver get_AssemblyResolver()
public IMetadataResolver get_MetadataResolver()
public TypeSystem get_TypeSystem()
public bool get_HasAssemblyReferences()
public Collection`1<AssemblyNameReference> get_AssemblyReferences()
public bool get_HasModuleReferences()
public Collection`1<ModuleReference> get_ModuleReferences()
public bool get_HasResources()
public Collection`1<Resource> get_Resources()
public bool get_HasCustomAttributes()
public Collection`1<CustomAttribute> get_CustomAttributes()
public bool get_HasTypes()
public Collection`1<TypeDefinition> get_Types()
public bool get_HasExportedTypes()
public Collection`1<ExportedType> get_ExportedTypes()
public MethodDefinition get_EntryPoint()
public void set_EntryPoint(MethodDefinition value)
internal void .ctor(Image image)
public bool HasTypeReference(string fullName)
public bool HasTypeReference(string scope, string fullName)
public bool TryGetTypeReference(string fullName, TypeReference& type)
public bool TryGetTypeReference(string scope, string fullName, TypeReference& type)
private TypeReference GetTypeReference(string scope, string fullname)
public IEnumerable`1<TypeReference> GetTypeReferences()
public IEnumerable`1<MemberReference> GetMemberReferences()
public TypeReference GetType(string fullName, bool runtimeName)
public TypeDefinition GetType(string fullName)
public TypeDefinition GetType(string namespace, string name)
public IEnumerable`1<TypeDefinition> GetTypes()
private IEnumerable`1<TypeDefinition> GetTypes(Collection`1<TypeDefinition> types)
private void CheckFullName(string fullName)
private TypeDefinition GetNestedType(string fullname)
internal FieldDefinition Resolve(FieldReference field)
internal MethodDefinition Resolve(MethodReference method)
internal TypeDefinition Resolve(TypeReference type)
private void CheckType(object type)
private void CheckField(object field)
private void CheckMethod(object method)
private void CheckContext(IGenericParameterProvider context, ModuleDefinition module)
private ImportGenericContext GenericContextFor(IGenericParameterProvider context)
public TypeReference Import(Type type)
public TypeReference Import(Type type, IGenericParameterProvider context)
public FieldReference Import(FieldInfo field)
public FieldReference Import(FieldInfo field, IGenericParameterProvider context)
public MethodReference Import(MethodBase method)
public MethodReference Import(MethodBase method, IGenericParameterProvider context)
public TypeReference Import(TypeReference type)
public TypeReference Import(TypeReference type, IGenericParameterProvider context)
public FieldReference Import(FieldReference field)
public FieldReference Import(FieldReference field, IGenericParameterProvider context)
public MethodReference Import(MethodReference method)
public MethodReference Import(MethodReference method, IGenericParameterProvider context)
public IMetadataTokenProvider LookupToken(int token)
public IMetadataTokenProvider LookupToken(MetadataToken token)
internal object get_SyncRoot()
internal TRet Read(TItem item, Func`3<TItem, MetadataReader, TRet> read)
internal TRet Read(TRet& variable, TItem item, Func`3<TItem, MetadataReader, TRet> read)
public bool get_HasDebugHeader()
public ImageDebugDirectory GetDebugHeader(Byte[]& header)
private void ProcessDebugHeader()
public ModuleDefinition CreateModule(string name, ModuleKind kind)
public ModuleDefinition CreateModule(string name, ModuleParameters parameters)
private AssemblyNameDefinition CreateAssemblyName(string name)
public void ReadSymbols()
public void ReadSymbols(ISymbolReader reader)
public ModuleDefinition ReadModule(string fileName)
public ModuleDefinition ReadModule(Stream stream)
public ModuleDefinition ReadModule(string fileName, ReaderParameters parameters)
private void CheckStream(object stream)
public ModuleDefinition ReadModule(Stream stream, ReaderParameters parameters)
private Stream GetFileStream(string fileName, FileMode mode, FileAccess access, FileShare share)
public void Write(string fileName)
public void Write(Stream stream)
public void Write(string fileName, WriterParameters parameters)
public void Write(Stream stream, WriterParameters parameters)
}
public Mono.Cecil.ModuleKind : Enum {
public int value__
public ModuleKind Dll
public ModuleKind Console
public ModuleKind Windows
public ModuleKind NetModule
}
public Mono.Cecil.ModuleParameters : object {
private ModuleKind kind
private TargetRuntime runtime
private TargetArchitecture architecture
private IAssemblyResolver assembly_resolver
private IMetadataResolver metadata_resolver
public ModuleKind Kind
public TargetRuntime Runtime
public TargetArchitecture Architecture
public IAssemblyResolver AssemblyResolver
public IMetadataResolver MetadataResolver
public ModuleKind get_Kind()
public void set_Kind(ModuleKind value)
public TargetRuntime get_Runtime()
public void set_Runtime(TargetRuntime value)
public TargetArchitecture get_Architecture()
public void set_Architecture(TargetArchitecture value)
public IAssemblyResolver get_AssemblyResolver()
public void set_AssemblyResolver(IAssemblyResolver value)
public IMetadataResolver get_MetadataResolver()
public void set_MetadataResolver(IMetadataResolver value)
private TargetRuntime GetCurrentRuntime()
}
internal Mono.Cecil.ModuleReader : object {
protected Image image
protected ModuleDefinition module
protected void .ctor(Image image, ReadingMode mode)
protected void ReadModule()
protected void ReadModuleManifest(MetadataReader reader)
private void ReadAssembly(MetadataReader reader)
public ModuleDefinition CreateModuleFrom(Image image, ReaderParameters parameters)
private void ReadSymbols(ModuleDefinition module, ReaderParameters parameters)
private ModuleReader CreateModuleReader(Image image, ReadingMode mode)
}
public Mono.Cecil.ModuleReference : object {
private string name
internal MetadataToken token
public string Name
public MetadataScopeType MetadataScopeType
public MetadataToken MetadataToken
public string get_Name()
public void set_Name(string value)
public MetadataScopeType get_MetadataScopeType()
public MetadataToken get_MetadataToken()
public void set_MetadataToken(MetadataToken value)
public void .ctor(string name)
public string ToString()
}
internal Mono.Cecil.ModuleRefTable : MetadataTable`1<UInt32> {
public void Write(TableHeapBuffer buffer)
}
internal Mono.Cecil.ModuleTable : OneRowTable`1<UInt32> {
public void Write(TableHeapBuffer buffer)
}
internal Mono.Cecil.ModuleWriter : object {
public void WriteModuleTo(ModuleDefinition module, Stream stream, WriterParameters parameters)
private void BuildMetadata(ModuleDefinition module, MetadataBuilder metadata)
private ISymbolWriter GetSymbolWriter(ModuleDefinition module, string fq_name, ISymbolWriterProvider symbol_writer_provider)
}
public Mono.Cecil.NativeType : Enum {
public int value__
public NativeType None
public NativeType Boolean
public NativeType I1
public NativeType U1
public NativeType I2
public NativeType U2
public NativeType I4
public NativeType U4
public NativeType I8
public NativeType U8
public NativeType R4
public NativeType R8
public NativeType LPStr
public NativeType Int
public NativeType UInt
public NativeType Func
public NativeType Array
public NativeType Currency
public NativeType BStr
public NativeType LPWStr
public NativeType LPTStr
public NativeType FixedSysString
public NativeType IUnknown
public NativeType IDispatch
public NativeType Struct
public NativeType IntF
public NativeType SafeArray
public NativeType FixedArray
public NativeType ByValStr
public NativeType ANSIBStr
public NativeType TBStr
public NativeType VariantBool
public NativeType ASAny
public NativeType LPStruct
public NativeType CustomMarshaler
public NativeType Error
public NativeType Max
}
internal Mono.Cecil.NestedClassTable : SortedTable`1<Row`2<UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
public int Compare(Row`2<UInt32, UInt32> x, Row`2<UInt32, UInt32> y)
}
internal Mono.Cecil.OneRowTable`1 : MetadataTable {
internal TRow row
public int Length
public int get_Length()
public void Sort()
}
public Mono.Cecil.OptionalModifierType : TypeSpecification {
private TypeReference modifier_type
public TypeReference ModifierType
public string Name
public string FullName
private string Suffix
public bool IsValueType
public bool IsOptionalModifier
public bool ContainsGenericParameter
public TypeReference get_ModifierType()
public void set_ModifierType(TypeReference value)
public string get_Name()
public string get_FullName()
private string get_Suffix()
public bool get_IsValueType()
public void set_IsValueType(bool value)
public bool get_IsOptionalModifier()
public bool get_ContainsGenericParameter()
public void .ctor(TypeReference modifierType, TypeReference type)
}
public Mono.Cecil.ParameterAttributes : Enum {
public ushort value__
public ParameterAttributes None
public ParameterAttributes In
public ParameterAttributes Out
public ParameterAttributes Lcid
public ParameterAttributes Retval
public ParameterAttributes Optional
public ParameterAttributes HasDefault
public ParameterAttributes HasFieldMarshal
public ParameterAttributes Unused
}
public Mono.Cecil.ParameterDefinition : ParameterReference {
private ushort attributes
internal IMethodSignature method
private object constant
private Collection`1<CustomAttribute> custom_attributes
private MarshalInfo marshal_info
public ParameterAttributes Attributes
public IMethodSignature Method
public int Sequence
public bool HasConstant
public object Constant
public bool HasCustomAttributes
public Collection`1<CustomAttribute> CustomAttributes
public bool HasMarshalInfo
public MarshalInfo MarshalInfo
public bool IsIn
public bool IsOut
public bool IsLcid
public bool IsReturnValue
public bool IsOptional
public bool HasDefault
public bool HasFieldMarshal
public ParameterAttributes get_Attributes()
public void set_Attributes(ParameterAttributes value)
public IMethodSignature get_Method()
public int get_Sequence()
public bool get_HasConstant()
public void set_HasConstant(bool value)
public object get_Constant()
public void set_Constant(object value)
public bool get_HasCustomAttributes()
public Collection`1<CustomAttribute> get_CustomAttributes()
public bool get_HasMarshalInfo()
public MarshalInfo get_MarshalInfo()
public void set_MarshalInfo(MarshalInfo value)
public bool get_IsIn()
public void set_IsIn(bool value)
public bool get_IsOut()
public void set_IsOut(bool value)
public bool get_IsLcid()
public void set_IsLcid(bool value)
public bool get_IsReturnValue()
public void set_IsReturnValue(bool value)
public bool get_IsOptional()
public void set_IsOptional(bool value)
public bool get_HasDefault()
public void set_HasDefault(bool value)
public bool get_HasFieldMarshal()
public void set_HasFieldMarshal(bool value)
internal void .ctor(TypeReference parameterType, IMethodSignature method)
public void .ctor(TypeReference parameterType)
public void .ctor(string name, ParameterAttributes attributes, TypeReference parameterType)
public ParameterDefinition Resolve()
}
internal Mono.Cecil.ParameterDefinitionCollection : Collection`1<ParameterDefinition> {
private IMethodSignature method
internal void .ctor(IMethodSignature method)
internal void .ctor(IMethodSignature method, int capacity)
protected void OnAdd(ParameterDefinition item, int index)
protected void OnInsert(ParameterDefinition item, int index)
protected void OnSet(ParameterDefinition item, int index)
protected void OnRemove(ParameterDefinition item, int index)
}
public Mono.Cecil.ParameterReference : object {
private string name
internal int index
protected TypeReference parameter_type
internal MetadataToken token
public string Name
public int Index
public TypeReference ParameterType
public MetadataToken MetadataToken
public string get_Name()
public void set_Name(string value)
public int get_Index()
public TypeReference get_ParameterType()
public void set_ParameterType(TypeReference value)
public MetadataToken get_MetadataToken()
public void set_MetadataToken(MetadataToken value)
internal void .ctor(string name, TypeReference parameterType)
public string ToString()
public ParameterDefinition Resolve()
}
internal Mono.Cecil.ParamTable : MetadataTable`1<Row`3<ParameterAttributes, ushort, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
internal Mono.Cecil.PE.BinaryStreamReader : BinaryReader {
public void .ctor(Stream stream)
protected void Advance(int bytes)
protected DataDirectory ReadDataDirectory()
}
internal Mono.Cecil.PE.BinaryStreamWriter : BinaryWriter {
public void .ctor(Stream stream)
public void WriteByte(byte value)
public void WriteUInt16(ushort value)
public void WriteInt16(short value)
public void WriteUInt32(UInt32 value)
public void WriteInt32(int value)
public void WriteUInt64(ulong value)
public void WriteBytes(Byte[] bytes)
public void WriteDataDirectory(DataDirectory directory)
public void WriteBuffer(ByteBuffer buffer)
protected void Advance(int bytes)
}
internal Mono.Cecil.PE.ByteBuffer : object {
internal Byte[] buffer
internal int length
internal int position
public void .ctor(int length)
public void .ctor(Byte[] buffer)
public void Reset(Byte[] buffer)
public void Advance(int length)
public byte ReadByte()
public sbyte ReadSByte()
public Byte[] ReadBytes(int length)
public ushort ReadUInt16()
public short ReadInt16()
public UInt32 ReadUInt32()
public int ReadInt32()
public ulong ReadUInt64()
public long ReadInt64()
public UInt32 ReadCompressedUInt32()
public int ReadCompressedInt32()
public float ReadSingle()
public double ReadDouble()
public void WriteByte(byte value)
public void WriteSByte(sbyte value)
public void WriteUInt16(ushort value)
public void WriteInt16(short value)
public void WriteUInt32(UInt32 value)
public void WriteInt32(int value)
public void WriteUInt64(ulong value)
public void WriteInt64(long value)
public void WriteCompressedUInt32(UInt32 value)
public void WriteCompressedInt32(int value)
public void WriteBytes(Byte[] bytes)
public void WriteBytes(int length)
public void WriteBytes(ByteBuffer buffer)
public void WriteSingle(float value)
public void WriteDouble(double value)
private void Grow(int desired)
}
internal Mono.Cecil.PE.ByteBufferEqualityComparer : object {
public bool Equals(ByteBuffer x, ByteBuffer y)
public int GetHashCode(ByteBuffer buffer)
}
internal Mono.Cecil.PE.DataDirectory : ValueType {
public UInt32 VirtualAddress
public UInt32 Size
public bool IsZero
public bool get_IsZero()
public void .ctor(UInt32 rva, UInt32 size)
}
internal Mono.Cecil.PE.Image : object {
public ModuleKind Kind
public string RuntimeVersion
public TargetArchitecture Architecture
public ModuleCharacteristics Characteristics
public string FileName
public Section[] Sections
public Section MetadataSection
public UInt32 EntryPointToken
public ModuleAttributes Attributes
public DataDirectory Debug
public DataDirectory Resources
public DataDirectory StrongName
public StringHeap StringHeap
public BlobHeap BlobHeap
public UserStringHeap UserStringHeap
public GuidHeap GuidHeap
public TableHeap TableHeap
private Int32[] coded_index_sizes
private Func`2<Table, int> counter
public bool HasTable(Table table)
public int GetTableLength(Table table)
public int GetTableIndexSize(Table table)
public int GetCodedIndexSize(CodedIndex coded_index)
public UInt32 ResolveVirtualAddress(UInt32 rva)
public UInt32 ResolveVirtualAddressInSection(UInt32 rva, Section section)
public Section GetSection(string name)
public Section GetSectionAtVirtualAddress(UInt32 rva)
public ImageDebugDirectory GetDebugHeader(Byte[]& header)
}
internal Mono.Cecil.PE.ImageReader : BinaryStreamReader {
private Image image
private DataDirectory cli
private DataDirectory metadata
public void .ctor(Stream stream)
private void MoveTo(DataDirectory directory)
private void MoveTo(UInt32 position)
private void ReadImage()
private TargetArchitecture ReadArchitecture()
private ModuleKind GetModuleKind(ushort characteristics, ushort subsystem)
private void ReadOptionalHeaders(UInt16& subsystem, UInt16& dll_characteristics)
private string ReadAlignedString(int length)
private string ReadZeroTerminatedString(int length)
private void ReadSections(ushort count)
private void ReadSectionData(Section section)
private void ReadCLIHeader()
private void ReadMetadata()
private void ReadMetadataStream(Section section)
private void ReadTableHeap()
private void SetIndexSize(Heap heap, UInt32 sizes, byte flag)
private int GetTableIndexSize(Table table)
private int GetCodedIndexSize(CodedIndex index)
private void ComputeTableInformations()
public Image ReadImageFrom(Stream stream)
}
internal Mono.Cecil.PE.ImageWriter : BinaryStreamWriter {
private ModuleDefinition module
private MetadataBuilder metadata
private TextMap text_map
private ImageDebugDirectory debug_directory
private Byte[] debug_data
private ByteBuffer win32_resources
private UInt32 pe_header_size
private UInt32 section_header_size
private UInt32 file_alignment
private UInt32 section_alignment
private ulong image_base
internal UInt32 text_rva
private bool pe64
private bool has_reloc
private UInt32 time_stamp
internal Section text
internal Section rsrc
internal Section reloc
private ushort sections
private void .ctor(ModuleDefinition module, MetadataBuilder metadata, Stream stream)
private void GetDebugHeader()
private void GetWin32Resources()
private Section GetImageResourceSection()
public ImageWriter CreateWriter(ModuleDefinition module, MetadataBuilder metadata, Stream stream)
private void BuildSections()
private Section CreateSection(string name, UInt32 size, Section previous)
private UInt32 Align(UInt32 value, UInt32 align)
private void WriteDOSHeader()
private ushort SizeOfOptionalHeader()
private void WritePEFileHeader()
private ushort GetMachine()
private Section LastSection()
private void WriteOptionalHeaders()
private void WriteZeroDataDirectory()
private ushort GetSubSystem()
private void WriteSectionHeaders()
private void WriteSection(Section section, UInt32 characteristics)
private void MoveTo(UInt32 pointer)
private void MoveToRVA(Section section, UInt32 rva)
private void MoveToRVA(TextSegment segment)
private void WriteRVA(UInt32 rva)
private void PrepareSection(Section section)
private void WriteText()
private UInt32 GetMetadataLength()
private void WriteMetadataHeader()
private ushort GetStreamCount()
private void WriteStreamHeader(UInt32& offset, TextSegment heap, string name)
private Byte[] GetZeroTerminatedString(string string)
private Byte[] GetSimpleString(string string)
private Byte[] GetString(string string, int length)
private void WriteMetadata()
private void WriteHeap(TextSegment heap, HeapBuffer buffer)
private void WriteGuidHeap()
private void WriteDebugDirectory()
private void WriteImportDirectory()
private Byte[] GetRuntimeMain()
private void WriteStartupStub()
private void WriteRsrc()
private void WriteReloc()
public void WriteImage()
private TextMap BuildTextMap()
private UInt32 GetStartupStubLength()
private int GetMetadataHeaderLength()
private int GetStrongNameLength()
public DataDirectory GetStrongNameSignatureDirectory()
public UInt32 GetHeaderSize()
private void PatchWin32Resources(ByteBuffer resources)
private void PatchResourceDirectoryTable(ByteBuffer resources)
private void PatchResourceDirectoryEntry(ByteBuffer resources)
private void PatchResourceDataEntry(ByteBuffer resources)
}
internal Mono.Cecil.PE.Section : object {
public string Name
public UInt32 VirtualAddress
public UInt32 VirtualSize
public UInt32 SizeOfRawData
public UInt32 PointerToRawData
public Byte[] Data
}
internal Mono.Cecil.PE.TextMap : object {
private Range[] map
public void AddMap(TextSegment segment, int length)
public void AddMap(TextSegment segment, int length, int align)
public void AddMap(TextSegment segment, Range range)
public Range GetRange(TextSegment segment)
public DataDirectory GetDataDirectory(TextSegment segment)
public UInt32 GetRVA(TextSegment segment)
public UInt32 GetNextRVA(TextSegment segment)
public int GetLength(TextSegment segment)
private UInt32 GetStart(TextSegment segment)
private UInt32 ComputeStart(int index)
public UInt32 GetLength()
}
internal Mono.Cecil.PE.TextSegment : Enum {
public int value__
public TextSegment ImportAddressTable
public TextSegment CLIHeader
public TextSegment Code
public TextSegment Resources
public TextSegment Data
public TextSegment StrongNameSignature
public TextSegment MetadataHeader
public TextSegment TableHeap
public TextSegment StringHeap
public TextSegment UserStringHeap
public TextSegment GuidHeap
public TextSegment BlobHeap
public TextSegment DebugDirectory
public TextSegment ImportDirectory
public TextSegment ImportHintNameTable
public TextSegment StartupStub
}
public Mono.Cecil.PinnedType : TypeSpecification {
public bool IsValueType
public bool IsPinned
public bool get_IsValueType()
public void set_IsValueType(bool value)
public bool get_IsPinned()
public void .ctor(TypeReference type)
}
public Mono.Cecil.PInvokeAttributes : Enum {
public ushort value__
public PInvokeAttributes NoMangle
public PInvokeAttributes CharSetMask
public PInvokeAttributes CharSetNotSpec
public PInvokeAttributes CharSetAnsi
public PInvokeAttributes CharSetUnicode
public PInvokeAttributes CharSetAuto
public PInvokeAttributes SupportsLastError
public PInvokeAttributes CallConvMask
public PInvokeAttributes CallConvWinapi
public PInvokeAttributes CallConvCdecl
public PInvokeAttributes CallConvStdCall
public PInvokeAttributes CallConvThiscall
public PInvokeAttributes CallConvFastcall
public PInvokeAttributes BestFitMask
public PInvokeAttributes BestFitEnabled
public PInvokeAttributes BestFitDisabled
public PInvokeAttributes ThrowOnUnmappableCharMask
public PInvokeAttributes ThrowOnUnmappableCharEnabled
public PInvokeAttributes ThrowOnUnmappableCharDisabled
}
public Mono.Cecil.PInvokeInfo : object {
private ushort attributes
private string entry_point
private ModuleReference module
public PInvokeAttributes Attributes
public string EntryPoint
public ModuleReference Module
public bool IsNoMangle
public bool IsCharSetNotSpec
public bool IsCharSetAnsi
public bool IsCharSetUnicode
public bool IsCharSetAuto
public bool SupportsLastError
public bool IsCallConvWinapi
public bool IsCallConvCdecl
public bool IsCallConvStdCall
public bool IsCallConvThiscall
public bool IsCallConvFastcall
public bool IsBestFitEnabled
public bool IsBestFitDisabled
public bool IsThrowOnUnmappableCharEnabled
public bool IsThrowOnUnmappableCharDisabled
public PInvokeAttributes get_Attributes()
public void set_Attributes(PInvokeAttributes value)
public string get_EntryPoint()
public void set_EntryPoint(string value)
public ModuleReference get_Module()
public void set_Module(ModuleReference value)
public bool get_IsNoMangle()
public void set_IsNoMangle(bool value)
public bool get_IsCharSetNotSpec()
public void set_IsCharSetNotSpec(bool value)
public bool get_IsCharSetAnsi()
public void set_IsCharSetAnsi(bool value)
public bool get_IsCharSetUnicode()
public void set_IsCharSetUnicode(bool value)
public bool get_IsCharSetAuto()
public void set_IsCharSetAuto(bool value)
public bool get_SupportsLastError()
public void set_SupportsLastError(bool value)
public bool get_IsCallConvWinapi()
public void set_IsCallConvWinapi(bool value)
public bool get_IsCallConvCdecl()
public void set_IsCallConvCdecl(bool value)
public bool get_IsCallConvStdCall()
public void set_IsCallConvStdCall(bool value)
public bool get_IsCallConvThiscall()
public void set_IsCallConvThiscall(bool value)
public bool get_IsCallConvFastcall()
public void set_IsCallConvFastcall(bool value)
public bool get_IsBestFitEnabled()
public void set_IsBestFitEnabled(bool value)
public bool get_IsBestFitDisabled()
public void set_IsBestFitDisabled(bool value)
public bool get_IsThrowOnUnmappableCharEnabled()
public void set_IsThrowOnUnmappableCharEnabled(bool value)
public bool get_IsThrowOnUnmappableCharDisabled()
public void set_IsThrowOnUnmappableCharDisabled(bool value)
public void .ctor(PInvokeAttributes attributes, string entryPoint, ModuleReference module)
}
public Mono.Cecil.PointerType : TypeSpecification {
public string Name
public string FullName
public bool IsValueType
public bool IsPointer
public string get_Name()
public string get_FullName()
public bool get_IsValueType()
public void set_IsValueType(bool value)
public bool get_IsPointer()
public void .ctor(TypeReference type)
}
public Mono.Cecil.PropertyAttributes : Enum {
public ushort value__
public PropertyAttributes None
public PropertyAttributes SpecialName
public PropertyAttributes RTSpecialName
public PropertyAttributes HasDefault
public PropertyAttributes Unused
}
public Mono.Cecil.PropertyDefinition : PropertyReference {
private Nullable`1<bool> has_this
private ushort attributes
private Collection`1<CustomAttribute> custom_attributes
internal MethodDefinition get_method
internal MethodDefinition set_method
internal Collection`1<MethodDefinition> other_methods
private object constant
public PropertyAttributes Attributes
public bool HasThis
public bool HasCustomAttributes
public Collection`1<CustomAttribute> CustomAttributes
public MethodDefinition GetMethod
public MethodDefinition SetMethod
public bool HasOtherMethods
public Collection`1<MethodDefinition> OtherMethods
public bool HasParameters
public Collection`1<ParameterDefinition> Parameters
public bool HasConstant
public object Constant
public bool IsSpecialName
public bool IsRuntimeSpecialName
public bool HasDefault
public TypeDefinition DeclaringType
public bool IsDefinition
public string FullName
public PropertyAttributes get_Attributes()
public void set_Attributes(PropertyAttributes value)
public bool get_HasThis()
public void set_HasThis(bool value)
public bool get_HasCustomAttributes()
public Collection`1<CustomAttribute> get_CustomAttributes()
public MethodDefinition get_GetMethod()
public void set_GetMethod(MethodDefinition value)
public MethodDefinition get_SetMethod()
public void set_SetMethod(MethodDefinition value)
public bool get_HasOtherMethods()
public Collection`1<MethodDefinition> get_OtherMethods()
public bool get_HasParameters()
public Collection`1<ParameterDefinition> get_Parameters()
private Collection`1<ParameterDefinition> MirrorParameters(MethodDefinition method, int bound)
public bool get_HasConstant()
public void set_HasConstant(bool value)
public object get_Constant()
public void set_Constant(object value)
public bool get_IsSpecialName()
public void set_IsSpecialName(bool value)
public bool get_IsRuntimeSpecialName()
public void set_IsRuntimeSpecialName(bool value)
public bool get_HasDefault()
public void set_HasDefault(bool value)
public TypeDefinition get_DeclaringType()
public void set_DeclaringType(TypeDefinition value)
public bool get_IsDefinition()
public string get_FullName()
public void .ctor(string name, PropertyAttributes attributes, TypeReference propertyType)
private void InitializeMethods()
public PropertyDefinition Resolve()
}
internal Mono.Cecil.PropertyMapTable : MetadataTable`1<Row`2<UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.PropertyReference : MemberReference {
private TypeReference property_type
public TypeReference PropertyType
public Collection`1<ParameterDefinition> Parameters
public TypeReference get_PropertyType()
public void set_PropertyType(TypeReference value)
public Collection`1<ParameterDefinition> get_Parameters()
internal void .ctor(string name, TypeReference propertyType)
public PropertyDefinition Resolve()
}
internal Mono.Cecil.PropertyTable : MetadataTable`1<Row`3<PropertyAttributes, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
internal Mono.Cecil.Range : ValueType {
public UInt32 Start
public UInt32 Length
public void .ctor(UInt32 index, UInt32 length)
}
public Mono.Cecil.ReaderParameters : object {
private ReadingMode reading_mode
private IAssemblyResolver assembly_resolver
private IMetadataResolver metadata_resolver
private Stream symbol_stream
private ISymbolReaderProvider symbol_reader_provider
private bool read_symbols
public ReadingMode ReadingMode
public IAssemblyResolver AssemblyResolver
public IMetadataResolver MetadataResolver
public Stream SymbolStream
public ISymbolReaderProvider SymbolReaderProvider
public bool ReadSymbols
public ReadingMode get_ReadingMode()
public void set_ReadingMode(ReadingMode value)
public IAssemblyResolver get_AssemblyResolver()
public void set_AssemblyResolver(IAssemblyResolver value)
public IMetadataResolver get_MetadataResolver()
public void set_MetadataResolver(IMetadataResolver value)
public Stream get_SymbolStream()
public void set_SymbolStream(Stream value)
public ISymbolReaderProvider get_SymbolReaderProvider()
public void set_SymbolReaderProvider(ISymbolReaderProvider value)
public bool get_ReadSymbols()
public void set_ReadSymbols(bool value)
public void .ctor(ReadingMode readingMode)
}
public Mono.Cecil.ReadingMode : Enum {
public int value__
public ReadingMode Immediate
public ReadingMode Deferred
}
public Mono.Cecil.RequiredModifierType : TypeSpecification {
private TypeReference modifier_type
public TypeReference ModifierType
public string Name
public string FullName
private string Suffix
public bool IsValueType
public bool IsRequiredModifier
public bool ContainsGenericParameter
public TypeReference get_ModifierType()
public void set_ModifierType(TypeReference value)
public string get_Name()
public string get_FullName()
private string get_Suffix()
public bool get_IsValueType()
public void set_IsValueType(bool value)
public bool get_IsRequiredModifier()
public bool get_ContainsGenericParameter()
public void .ctor(TypeReference modifierType, TypeReference type)
}
public Mono.Cecil.ResolutionException : Exception {
private MemberReference member
public MemberReference Member
public IMetadataScope Scope
public MemberReference get_Member()
public IMetadataScope get_Scope()
public void .ctor(MemberReference member)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public Mono.Cecil.Resource : object {
private string name
private UInt32 attributes
public string Name
public ManifestResourceAttributes Attributes
public ResourceType ResourceType
public bool IsPublic
public bool IsPrivate
public string get_Name()
public void set_Name(string value)
public ManifestResourceAttributes get_Attributes()
public void set_Attributes(ManifestResourceAttributes value)
public ResourceType get_ResourceType()
public bool get_IsPublic()
public void set_IsPublic(bool value)
public bool get_IsPrivate()
public void set_IsPrivate(bool value)
internal void .ctor(string name, ManifestResourceAttributes attributes)
}
public Mono.Cecil.ResourceType : Enum {
public int value__
public ResourceType Linked
public ResourceType Embedded
public ResourceType AssemblyLinked
}
public Mono.Cecil.SafeArrayMarshalInfo : MarshalInfo {
internal VariantType element_type
public VariantType ElementType
public VariantType get_ElementType()
public void set_ElementType(VariantType value)
}
public Mono.Cecil.SecurityAction : Enum {
public ushort value__
public SecurityAction Request
public SecurityAction Demand
public SecurityAction Assert
public SecurityAction Deny
public SecurityAction PermitOnly
public SecurityAction LinkDemand
public SecurityAction InheritDemand
public SecurityAction RequestMinimum
public SecurityAction RequestOptional
public SecurityAction RequestRefuse
public SecurityAction PreJitGrant
public SecurityAction PreJitDeny
public SecurityAction NonCasDemand
public SecurityAction NonCasLinkDemand
public SecurityAction NonCasInheritance
}
public Mono.Cecil.SecurityAttribute : object {
private TypeReference attribute_type
internal Collection`1<CustomAttributeNamedArgument> fields
internal Collection`1<CustomAttributeNamedArgument> properties
public TypeReference AttributeType
public bool HasFields
public Collection`1<CustomAttributeNamedArgument> Fields
public bool HasProperties
public Collection`1<CustomAttributeNamedArgument> Properties
public TypeReference get_AttributeType()
public void set_AttributeType(TypeReference value)
public bool get_HasFields()
public Collection`1<CustomAttributeNamedArgument> get_Fields()
public bool get_HasProperties()
public Collection`1<CustomAttributeNamedArgument> get_Properties()
public void .ctor(TypeReference attributeType)
}
public Mono.Cecil.SecurityDeclaration : object {
internal UInt32 signature
private Byte[] blob
private ModuleDefinition module
internal bool resolved
private SecurityAction action
internal Collection`1<SecurityAttribute> security_attributes
public SecurityAction Action
public bool HasSecurityAttributes
public Collection`1<SecurityAttribute> SecurityAttributes
internal bool HasImage
public SecurityAction get_Action()
public void set_Action(SecurityAction value)
public bool get_HasSecurityAttributes()
public Collection`1<SecurityAttribute> get_SecurityAttributes()
internal bool get_HasImage()
internal void .ctor(SecurityAction action, UInt32 signature, ModuleDefinition module)
public void .ctor(SecurityAction action)
public void .ctor(SecurityAction action, Byte[] blob)
public Byte[] GetBlob()
private void Resolve()
private SecurityDeclaration <Resolve>b__19_0(SecurityDeclaration declaration, MetadataReader reader)
}
public Mono.Cecil.SentinelType : TypeSpecification {
public bool IsValueType
public bool IsSentinel
public bool get_IsValueType()
public void set_IsValueType(bool value)
public bool get_IsSentinel()
public void .ctor(TypeReference type)
}
internal Mono.Cecil.SignatureReader : ByteBuffer {
private MetadataReader reader
private UInt32 start
private UInt32 sig_length
private TypeSystem TypeSystem
private TypeSystem get_TypeSystem()
public void .ctor(UInt32 blob, MetadataReader reader)
private void MoveToBlob(UInt32 blob)
private MetadataToken ReadTypeTokenSignature()
private GenericParameter GetGenericParameter(GenericParameterType type, UInt32 var)
private GenericParameter GetUnboundGenericParameter(GenericParameterType type, int index)
private void CheckGenericContext(IGenericParameterProvider owner, int index)
public void ReadGenericInstanceSignature(IGenericParameterProvider provider, IGenericInstance instance)
private ArrayType ReadArrayTypeSignature()
private TypeReference GetTypeDefOrRef(MetadataToken token)
public TypeReference ReadTypeSignature()
private TypeReference ReadTypeSignature(ElementType etype)
public void ReadMethodSignature(IMethodSignature method)
public object ReadConstantSignature(ElementType type)
public void ReadCustomAttributeConstructorArguments(CustomAttribute attribute, Collection`1<ParameterDefinition> parameters)
private CustomAttributeArgument ReadCustomAttributeFixedArgument(TypeReference type)
public void ReadCustomAttributeNamedArguments(ushort count, Collection`1& fields, Collection`1& properties)
private void ReadCustomAttributeNamedArgument(Collection`1& fields, Collection`1& properties)
private Collection`1<CustomAttributeNamedArgument> GetCustomAttributeNamedArgumentCollection(Collection`1& collection)
private CustomAttributeArgument ReadCustomAttributeFixedArrayArgument(ArrayType type)
private CustomAttributeArgument ReadCustomAttributeElement(TypeReference type)
private object ReadCustomAttributeElementValue(TypeReference type)
private object ReadPrimitiveValue(ElementType type)
private TypeReference GetPrimitiveType(ElementType etype)
private TypeReference ReadCustomAttributeFieldOrPropType()
public TypeReference ReadTypeReference()
private object ReadCustomAttributeEnum(TypeReference enum_type)
public SecurityAttribute ReadSecurityAttribute()
public MarshalInfo ReadMarshalInfo()
private NativeType ReadNativeType()
private VariantType ReadVariantType()
private string ReadUTF8String()
public bool CanReadMore()
}
internal Mono.Cecil.SignatureWriter : ByteBuffer {
private MetadataBuilder metadata
public void .ctor(MetadataBuilder metadata)
public void WriteElementType(ElementType element_type)
public void WriteUTF8String(string string)
public void WriteMethodSignature(IMethodSignature method)
private UInt32 MakeTypeDefOrRefCodedRID(TypeReference type)
public void WriteTypeSignature(TypeReference type)
private void WriteArrayTypeSignature(ArrayType array)
public void WriteGenericInstanceSignature(IGenericInstance instance)
private void WriteModifierSignature(ElementType element_type, IModifierType type)
private bool TryWriteElementType(TypeReference type)
public void WriteConstantString(string value)
public void WriteConstantPrimitive(object value)
public void WriteCustomAttributeConstructorArguments(CustomAttribute attribute)
private void WriteCustomAttributeFixedArgument(TypeReference type, CustomAttributeArgument argument)
private void WriteCustomAttributeFixedArrayArgument(ArrayType type, CustomAttributeArgument argument)
private void WriteCustomAttributeElement(TypeReference type, CustomAttributeArgument argument)
private void WriteCustomAttributeValue(TypeReference type, object value)
private void WritePrimitiveValue(object value)
private void WriteCustomAttributeEnumValue(TypeReference enum_type, object value)
private void WriteCustomAttributeFieldOrPropType(TypeReference type)
public void WriteCustomAttributeNamedArguments(CustomAttribute attribute)
private int GetNamedArgumentCount(ICustomAttribute attribute)
private void WriteICustomAttributeNamedArguments(ICustomAttribute attribute)
private void WriteCustomAttributeNamedArguments(byte kind, Collection`1<CustomAttributeNamedArgument> named_arguments)
private void WriteCustomAttributeNamedArgument(byte kind, CustomAttributeNamedArgument named_argument)
private void WriteSecurityAttribute(SecurityAttribute attribute)
public void WriteSecurityDeclaration(SecurityDeclaration declaration)
public void WriteXmlSecurityDeclaration(SecurityDeclaration declaration)
private string GetXmlSecurityDeclaration(SecurityDeclaration declaration)
private void WriteTypeReference(TypeReference type)
public void WriteMarshalInfo(MarshalInfo marshal_info)
private void WriteNativeType(NativeType native)
private void WriteVariantType(VariantType variant)
}
internal Mono.Cecil.SortedTable`1 : MetadataTable`1<TRow> {
public void Sort()
protected int Compare(UInt32 x, UInt32 y)
public int Compare(TRow x, TRow y)
}
internal Mono.Cecil.StandAloneSigTable : MetadataTable`1<UInt32> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.TargetArchitecture : Enum {
public int value__
public TargetArchitecture I386
public TargetArchitecture AMD64
public TargetArchitecture IA64
public TargetArchitecture ARMv7
}
public Mono.Cecil.TargetRuntime : Enum {
public int value__
public TargetRuntime Net_1_0
public TargetRuntime Net_1_1
public TargetRuntime Net_2_0
public TargetRuntime Net_4_0
}
public Mono.Cecil.TokenType : Enum {
public UInt32 value__
public TokenType Module
public TokenType TypeRef
public TokenType TypeDef
public TokenType Field
public TokenType Method
public TokenType Param
public TokenType InterfaceImpl
public TokenType MemberRef
public TokenType CustomAttribute
public TokenType Permission
public TokenType Signature
public TokenType Event
public TokenType Property
public TokenType ModuleRef
public TokenType TypeSpec
public TokenType Assembly
public TokenType AssemblyRef
public TokenType File
public TokenType ExportedType
public TokenType ManifestResource
public TokenType GenericParam
public TokenType MethodSpec
public TokenType String
}
public Mono.Cecil.TypeAttributes : Enum {
public UInt32 value__
public TypeAttributes VisibilityMask
public TypeAttributes NotPublic
public TypeAttributes Public
public TypeAttributes NestedPublic
public TypeAttributes NestedPrivate
public TypeAttributes NestedFamily
public TypeAttributes NestedAssembly
public TypeAttributes NestedFamANDAssem
public TypeAttributes NestedFamORAssem
public TypeAttributes LayoutMask
public TypeAttributes AutoLayout
public TypeAttributes SequentialLayout
public TypeAttributes ExplicitLayout
public TypeAttributes ClassSemanticMask
public TypeAttributes Class
public TypeAttributes Interface
public TypeAttributes Abstract
public TypeAttributes Sealed
public TypeAttributes SpecialName
public TypeAttributes Import
public TypeAttributes Serializable
public TypeAttributes WindowsRuntime
public TypeAttributes StringFormatMask
public TypeAttributes AnsiClass
public TypeAttributes UnicodeClass
public TypeAttributes AutoClass
public TypeAttributes BeforeFieldInit
public TypeAttributes RTSpecialName
public TypeAttributes HasSecurity
public TypeAttributes Forwarder
}
public Mono.Cecil.TypeDefinition : TypeReference {
private UInt32 attributes
private TypeReference base_type
internal Range fields_range
internal Range methods_range
private short packing_size
private int class_size
private Collection`1<TypeReference> interfaces
private Collection`1<TypeDefinition> nested_types
private Collection`1<MethodDefinition> methods
private Collection`1<FieldDefinition> fields
private Collection`1<EventDefinition> events
private Collection`1<PropertyDefinition> properties
private Collection`1<CustomAttribute> custom_attributes
private Collection`1<SecurityDeclaration> security_declarations
public TypeAttributes Attributes
public TypeReference BaseType
public bool HasLayoutInfo
public short PackingSize
public int ClassSize
public bool HasInterfaces
public Collection`1<TypeReference> Interfaces
public bool HasNestedTypes
public Collection`1<TypeDefinition> NestedTypes
public bool HasMethods
public Collection`1<MethodDefinition> Methods
public bool HasFields
public Collection`1<FieldDefinition> Fields
public bool HasEvents
public Collection`1<EventDefinition> Events
public bool HasProperties
public Collection`1<PropertyDefinition> Properties
public bool HasSecurityDeclarations
public Collection`1<SecurityDeclaration> SecurityDeclarations
public bool HasCustomAttributes
public Collection`1<CustomAttribute> CustomAttributes
public bool HasGenericParameters
public Collection`1<GenericParameter> GenericParameters
public bool IsNotPublic
public bool IsPublic
public bool IsNestedPublic
public bool IsNestedPrivate
public bool IsNestedFamily
public bool IsNestedAssembly
public bool IsNestedFamilyAndAssembly
public bool IsNestedFamilyOrAssembly
public bool IsAutoLayout
public bool IsSequentialLayout
public bool IsExplicitLayout
public bool IsClass
public bool IsInterface
public bool IsAbstract
public bool IsSealed
public bool IsSpecialName
public bool IsImport
public bool IsSerializable
public bool IsWindowsRuntime
public bool IsAnsiClass
public bool IsUnicodeClass
public bool IsAutoClass
public bool IsBeforeFieldInit
public bool IsRuntimeSpecialName
public bool HasSecurity
public bool IsEnum
public bool IsValueType
public bool IsPrimitive
public MetadataType MetadataType
public bool IsDefinition
public TypeDefinition DeclaringType
public TypeAttributes get_Attributes()
public void set_Attributes(TypeAttributes value)
public TypeReference get_BaseType()
public void set_BaseType(TypeReference value)
private void ResolveLayout()
public bool get_HasLayoutInfo()
public short get_PackingSize()
public void set_PackingSize(short value)
public int get_ClassSize()
public void set_ClassSize(int value)
public bool get_HasInterfaces()
public Collection`1<TypeReference> get_Interfaces()
public bool get_HasNestedTypes()
public Collection`1<TypeDefinition> get_NestedTypes()
public bool get_HasMethods()
public Collection`1<MethodDefinition> get_Methods()
public bool get_HasFields()
public Collection`1<FieldDefinition> get_Fields()
public bool get_HasEvents()
public Collection`1<EventDefinition> get_Events()
public bool get_HasProperties()
public Collection`1<PropertyDefinition> get_Properties()
public bool get_HasSecurityDeclarations()
public Collection`1<SecurityDeclaration> get_SecurityDeclarations()
public bool get_HasCustomAttributes()
public Collection`1<CustomAttribute> get_CustomAttributes()
public bool get_HasGenericParameters()
public Collection`1<GenericParameter> get_GenericParameters()
public bool get_IsNotPublic()
public void set_IsNotPublic(bool value)
public bool get_IsPublic()
public void set_IsPublic(bool value)
public bool get_IsNestedPublic()
public void set_IsNestedPublic(bool value)
public bool get_IsNestedPrivate()
public void set_IsNestedPrivate(bool value)
public bool get_IsNestedFamily()
public void set_IsNestedFamily(bool value)
public bool get_IsNestedAssembly()
public void set_IsNestedAssembly(bool value)
public bool get_IsNestedFamilyAndAssembly()
public void set_IsNestedFamilyAndAssembly(bool value)
public bool get_IsNestedFamilyOrAssembly()
public void set_IsNestedFamilyOrAssembly(bool value)
public bool get_IsAutoLayout()
public void set_IsAutoLayout(bool value)
public bool get_IsSequentialLayout()
public void set_IsSequentialLayout(bool value)
public bool get_IsExplicitLayout()
public void set_IsExplicitLayout(bool value)
public bool get_IsClass()
public void set_IsClass(bool value)
public bool get_IsInterface()
public void set_IsInterface(bool value)
public bool get_IsAbstract()
public void set_IsAbstract(bool value)
public bool get_IsSealed()
public void set_IsSealed(bool value)
public bool get_IsSpecialName()
public void set_IsSpecialName(bool value)
public bool get_IsImport()
public void set_IsImport(bool value)
public bool get_IsSerializable()
public void set_IsSerializable(bool value)
public bool get_IsWindowsRuntime()
public void set_IsWindowsRuntime(bool value)
public bool get_IsAnsiClass()
public void set_IsAnsiClass(bool value)
public bool get_IsUnicodeClass()
public void set_IsUnicodeClass(bool value)
public bool get_IsAutoClass()
public void set_IsAutoClass(bool value)
public bool get_IsBeforeFieldInit()
public void set_IsBeforeFieldInit(bool value)
public bool get_IsRuntimeSpecialName()
public void set_IsRuntimeSpecialName(bool value)
public bool get_HasSecurity()
public void set_HasSecurity(bool value)
public bool get_IsEnum()
public bool get_IsValueType()
public bool get_IsPrimitive()
public MetadataType get_MetadataType()
public bool get_IsDefinition()
public TypeDefinition get_DeclaringType()
public void set_DeclaringType(TypeDefinition value)
public void .ctor(string namespace, string name, TypeAttributes attributes)
public void .ctor(string namespace, string name, TypeAttributes attributes, TypeReference baseType)
public TypeDefinition Resolve()
}
internal Mono.Cecil.TypeDefinitionCollection : Collection`1<TypeDefinition> {
private ModuleDefinition container
private Dictionary`2<Row`2<string, string>, TypeDefinition> name_cache
internal void .ctor(ModuleDefinition container)
internal void .ctor(ModuleDefinition container, int capacity)
protected void OnAdd(TypeDefinition item, int index)
protected void OnSet(TypeDefinition item, int index)
protected void OnInsert(TypeDefinition item, int index)
protected void OnRemove(TypeDefinition item, int index)
protected void OnClear()
private void Attach(TypeDefinition type)
private void Detach(TypeDefinition type)
public TypeDefinition GetType(string fullname)
public TypeDefinition GetType(string namespace, string name)
}
internal Mono.Cecil.TypeDefTable : MetadataTable`1<Row`6<TypeAttributes, UInt32, UInt32, UInt32, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
internal Mono.Cecil.TypeParser : object {
private string fullname
private int length
private int position
private void .ctor(string fullname)
private Type ParseType(bool fq_name)
private bool TryGetArity(Type type)
private bool TryGetArity(string name, Int32& arity)
private bool ParseInt32(string value, Int32& result)
private void TryAddArity(string name, Int32& arity)
private string ParsePart()
private bool IsDelimiter(char chr)
private void TryParseWhiteSpace()
private String[] ParseNestedNames()
private bool TryParse(char chr)
private void Add(T[]& array, T item)
private Int32[] ParseSpecs()
private Type[] ParseGenericArguments(int arity)
private string ParseAssemblyName()
public TypeReference ParseType(ModuleDefinition module, string fullname)
private TypeReference GetTypeReference(ModuleDefinition module, Type type_info)
private TypeReference CreateSpecs(TypeReference type, Type type_info)
private TypeReference TryCreateGenericInstanceType(TypeReference type, Type type_info)
public void SplitFullName(string fullname, String& namespace, String& name)
private TypeReference CreateReference(Type type_info, ModuleDefinition module, IMetadataScope scope)
private void AdjustGenericParameters(TypeReference type)
private IMetadataScope GetMetadataScope(ModuleDefinition module, Type type_info)
private AssemblyNameReference MatchReference(ModuleDefinition module, AssemblyNameReference pattern)
private bool TryGetDefinition(ModuleDefinition module, Type type_info, TypeReference& type)
private bool TryCurrentModule(ModuleDefinition module, Type type_info)
public string ToParseable(TypeReference type)
private void AppendNamePart(string part, StringBuilder name)
private void AppendType(TypeReference type, StringBuilder name, bool fq_name, bool top_level)
private string GetScopeFullName(TypeReference type)
private void AppendTypeSpecification(TypeSpecification type, StringBuilder name)
private bool RequiresFullyQualifiedName(TypeReference type, bool top_level)
}
public Mono.Cecil.TypeReference : MemberReference {
private string namespace
private bool value_type
internal IMetadataScope scope
internal ModuleDefinition module
internal ElementType etype
private string fullname
protected Collection`1<GenericParameter> generic_parameters
public string Name
public string Namespace
public bool IsValueType
public ModuleDefinition Module
private IGenericParameterProvider Mono.Cecil.IGenericContext.Type
private IGenericParameterProvider Mono.Cecil.IGenericContext.Method
private GenericParameterType Mono.Cecil.IGenericParameterProvider.GenericParameterType
public bool HasGenericParameters
public Collection`1<GenericParameter> GenericParameters
public IMetadataScope Scope
public bool IsNested
public TypeReference DeclaringType
public string FullName
public bool IsByReference
public bool IsPointer
public bool IsSentinel
public bool IsArray
public bool IsGenericParameter
public bool IsGenericInstance
public bool IsRequiredModifier
public bool IsOptionalModifier
public bool IsPinned
public bool IsFunctionPointer
public bool IsPrimitive
public MetadataType MetadataType
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public bool get_IsValueType()
public void set_IsValueType(bool value)
public ModuleDefinition get_Module()
private IGenericParameterProvider Mono.Cecil.IGenericContext.get_Type()
private IGenericParameterProvider Mono.Cecil.IGenericContext.get_Method()
private GenericParameterType Mono.Cecil.IGenericParameterProvider.get_GenericParameterType()
public bool get_HasGenericParameters()
public Collection`1<GenericParameter> get_GenericParameters()
public IMetadataScope get_Scope()
public void set_Scope(IMetadataScope value)
public bool get_IsNested()
public TypeReference get_DeclaringType()
public void set_DeclaringType(TypeReference value)
public string get_FullName()
public bool get_IsByReference()
public bool get_IsPointer()
public bool get_IsSentinel()
public bool get_IsArray()
public bool get_IsGenericParameter()
public bool get_IsGenericInstance()
public bool get_IsRequiredModifier()
public bool get_IsOptionalModifier()
public bool get_IsPinned()
public bool get_IsFunctionPointer()
public bool get_IsPrimitive()
public MetadataType get_MetadataType()
protected void .ctor(string namespace, string name)
public void .ctor(string namespace, string name, ModuleDefinition module, IMetadataScope scope)
public void .ctor(string namespace, string name, ModuleDefinition module, IMetadataScope scope, bool valueType)
public TypeReference GetElementType()
public TypeDefinition Resolve()
}
internal Mono.Cecil.TypeRefTable : MetadataTable`1<Row`3<UInt32, UInt32, UInt32>> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.TypeSpecification : TypeReference {
private TypeReference element_type
public TypeReference ElementType
public string Name
public string Namespace
public IMetadataScope Scope
public ModuleDefinition Module
public string FullName
public bool ContainsGenericParameter
public MetadataType MetadataType
public TypeReference get_ElementType()
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public IMetadataScope get_Scope()
public void set_Scope(IMetadataScope value)
public ModuleDefinition get_Module()
public string get_FullName()
public bool get_ContainsGenericParameter()
public MetadataType get_MetadataType()
internal void .ctor(TypeReference type)
public TypeReference GetElementType()
}
internal Mono.Cecil.TypeSpecTable : MetadataTable`1<UInt32> {
public void Write(TableHeapBuffer buffer)
}
public Mono.Cecil.TypeSystem : object {
private ModuleDefinition module
private TypeReference type_object
private TypeReference type_void
private TypeReference type_bool
private TypeReference type_char
private TypeReference type_sbyte
private TypeReference type_byte
private TypeReference type_int16
private TypeReference type_uint16
private TypeReference type_int32
private TypeReference type_uint32
private TypeReference type_int64
private TypeReference type_uint64
private TypeReference type_single
private TypeReference type_double
private TypeReference type_intptr
private TypeReference type_uintptr
private TypeReference type_string
private TypeReference type_typedref
public IMetadataScope Corlib
public TypeReference Object
public TypeReference Void
public TypeReference Boolean
public TypeReference Char
public TypeReference SByte
public TypeReference Byte
public TypeReference Int16
public TypeReference UInt16
public TypeReference Int32
public TypeReference UInt32
public TypeReference Int64
public TypeReference UInt64
public TypeReference Single
public TypeReference Double
public TypeReference IntPtr
public TypeReference UIntPtr
public TypeReference String
public TypeReference TypedReference
private void .ctor(ModuleDefinition module)
internal TypeSystem CreateTypeSystem(ModuleDefinition module)
internal TypeReference LookupType(string namespace, string name)
private TypeReference LookupSystemType(TypeReference& reference, string name, ElementType element_type)
private TypeReference LookupSystemValueType(TypeReference& typeRef, string name, ElementType element_type)
public IMetadataScope get_Corlib()
public TypeReference get_Object()
public TypeReference get_Void()
public TypeReference get_Boolean()
public TypeReference get_Char()
public TypeReference get_SByte()
public TypeReference get_Byte()
public TypeReference get_Int16()
public TypeReference get_UInt16()
public TypeReference get_Int32()
public TypeReference get_UInt32()
public TypeReference get_Int64()
public TypeReference get_UInt64()
public TypeReference get_Single()
public TypeReference get_Double()
public TypeReference get_IntPtr()
public TypeReference get_UIntPtr()
public TypeReference get_String()
public TypeReference get_TypedReference()
}
public Mono.Cecil.VariantType : Enum {
public int value__
public VariantType None
public VariantType I2
public VariantType I4
public VariantType R4
public VariantType R8
public VariantType CY
public VariantType Date
public VariantType BStr
public VariantType Dispatch
public VariantType Error
public VariantType Bool
public VariantType Variant
public VariantType Unknown
public VariantType Decimal
public VariantType I1
public VariantType UI1
public VariantType UI2
public VariantType UI4
public VariantType Int
public VariantType UInt
}
public Mono.Cecil.WriterParameters : object {
private Stream symbol_stream
private ISymbolWriterProvider symbol_writer_provider
private bool write_symbols
private StrongNameKeyPair key_pair
public Stream SymbolStream
public ISymbolWriterProvider SymbolWriterProvider
public bool WriteSymbols
public StrongNameKeyPair StrongNameKeyPair
public Stream get_SymbolStream()
public void set_SymbolStream(Stream value)
public ISymbolWriterProvider get_SymbolWriterProvider()
public void set_SymbolWriterProvider(ISymbolWriterProvider value)
public bool get_WriteSymbols()
public void set_WriteSymbols(bool value)
public StrongNameKeyPair get_StrongNameKeyPair()
public void set_StrongNameKeyPair(StrongNameKeyPair value)
}
public Mono.Collections.Generic.Collection`1 : object {
internal T[] items
internal int size
private int version
public int Count
public T Item
public int Capacity
private bool System.Collections.Generic.ICollection<T>.IsReadOnly
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
public int get_Count()
public T get_Item(int index)
public void set_Item(int index, T value)
public int get_Capacity()
public void set_Capacity(int value)
private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
public void .ctor(int capacity)
public void .ctor(ICollection`1<T> items)
public void Add(T item)
public bool Contains(T item)
public int IndexOf(T item)
public void Insert(int index, T item)
public void RemoveAt(int index)
public bool Remove(T item)
public void Clear()
public void CopyTo(T[] array, int arrayIndex)
public T[] ToArray()
private void CheckIndex(int index)
private void Shift(int start, int delta)
protected void OnAdd(T item, int index)
protected void OnInsert(T item, int index)
protected void OnSet(T item, int index)
protected void OnRemove(T item, int index)
protected void OnClear()
internal void Grow(int desired)
protected void Resize(int new_size)
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
private void System.Collections.ICollection.CopyTo(Array array, int index)
public Enumerator<T> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
}
public Mono.Collections.Generic.ReadOnlyCollection`1 : Collection`1<T> {
private ReadOnlyCollection`1<T> empty
public ReadOnlyCollection`1<T> Empty
private bool System.Collections.Generic.ICollection<T>.IsReadOnly
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
public ReadOnlyCollection`1<T> get_Empty()
private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
public void .ctor(T[] array)
public void .ctor(Collection`1<T> collection)
private void Initialize(T[] items, int size)
internal void Grow(int desired)
protected void OnAdd(T item, int index)
protected void OnClear()
protected void OnInsert(T item, int index)
protected void OnRemove(T item, int index)
protected void OnSet(T item, int index)
}
internal Mono.Empty`1 : object {
public T[] Array
}
internal Mono.Security.Cryptography.CryptoConvert : object {
private int ToInt32LE(Byte[] bytes, int offset)
private UInt32 ToUInt32LE(Byte[] bytes, int offset)
private Byte[] Trim(Byte[] array)
private RSA FromCapiPrivateKeyBlob(Byte[] blob, int offset)
private RSA FromCapiPublicKeyBlob(Byte[] blob, int offset)
public RSA FromCapiKeyBlob(Byte[] blob)
public RSA FromCapiKeyBlob(Byte[] blob, int offset)
}
