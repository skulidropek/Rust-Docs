internal static class Consts : object {
    
public static string MonoVersion;
    
public static string MonoCompany;
    
public static string MonoProduct;
    
public static string MonoCopyright;
    
public static string FxVersion;
    
public static string VsVersion;
    
public static string FxFileVersion;
    
public static string VsFileVersion;
    
public static string AssemblyI18N;
    
public static string AssemblyMicrosoft_VisualStudio;
    
public static string AssemblyMicrosoft_VisualStudio_Web;
    
public static string AssemblyMicrosoft_VSDesigner;
    
public static string AssemblyMono_Http;
    
public static string AssemblyMono_Posix;
    
public static string AssemblyMono_Security;
    
public static string AssemblyMono_Messaging_RabbitMQ;
    
public static string AssemblyCorlib;
    
public static string AssemblySystem;
    
public static string AssemblySystem_Data;
    
public static string AssemblySystem_Design;
    
public static string AssemblySystem_DirectoryServices;
    
public static string AssemblySystem_Drawing;
    
public static string AssemblySystem_Drawing_Design;
    
public static string AssemblySystem_Messaging;
    
public static string AssemblySystem_Security;
    
public static string AssemblySystem_ServiceProcess;
    
public static string AssemblySystem_Web;
    
public static string AssemblySystem_Windows_Forms;
    
public static string AssemblySystem_Core;
}
public class I18N.Other.CP1251 : ByteEncoding {
    
private static Char[] ToChars;
    private static CP1251();
    protected virtual void ToBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
}
public class I18N.Other.CP1257 : ByteEncoding {
    
private static Char[] ToChars;
    private static CP1257();
    protected virtual void ToBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
}
public class I18N.Other.CP1258 : ByteEncoding {
    
private static Char[] ToChars;
    private static CP1258();
    protected virtual void ToBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
}
public class I18N.Other.CP20866 : ByteEncoding {
    
private static Char[] ToChars;
    private static CP20866();
    protected virtual void ToBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
}
public class I18N.Other.CP21866 : ByteEncoding {
    
private static Char[] ToChars;
    private static CP21866();
    protected virtual void ToBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
}
public class I18N.Other.CP28594 : ByteEncoding {
    
private static Char[] ToChars;
    private static CP28594();
    protected virtual void ToBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
}
public class I18N.Other.CP28595 : ByteEncoding {
    
private static Char[] ToChars;
    private static CP28595();
    protected virtual void ToBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
}
public class I18N.Other.CP57002 : ISCIIEncoding {
}
public class I18N.Other.CP57003 : ISCIIEncoding {
}
public class I18N.Other.CP57004 : ISCIIEncoding {
}
public class I18N.Other.CP57005 : ISCIIEncoding {
}
public class I18N.Other.CP57006 : ISCIIEncoding {
}
public class I18N.Other.CP57007 : ISCIIEncoding {
}
public class I18N.Other.CP57008 : ISCIIEncoding {
}
public class I18N.Other.CP57009 : ISCIIEncoding {
}
public class I18N.Other.CP57010 : ISCIIEncoding {
}
public class I18N.Other.CP57011 : ISCIIEncoding {
}
public class I18N.Other.CP874 : ByteEncoding {
    
private static Char[] ToChars;
    private static CP874();
    protected virtual void ToBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
}
public class I18N.Other.ENCiso_8859_4 : CP28594 {
}
public class I18N.Other.ENCiso_8859_5 : CP28595 {
}
public class I18N.Other.ENCkoi8_r : CP20866 {
}
public class I18N.Other.ENCkoi8_u : CP21866 {
}
public class I18N.Other.ENCwindows_1251 : CP1251 {
}
public class I18N.Other.ENCwindows_1257 : CP1257 {
}
public class I18N.Other.ENCwindows_1258 : CP1258 {
}
public class I18N.Other.ENCwindows_874 : CP874 {
}
public class I18N.Other.ENCx_iscii_as : CP57006 {
}
public class I18N.Other.ENCx_iscii_be : CP57003 {
}
public class I18N.Other.ENCx_iscii_de : CP57002 {
}
public class I18N.Other.ENCx_iscii_gu : CP57010 {
}
public class I18N.Other.ENCx_iscii_ka : CP57008 {
}
public class I18N.Other.ENCx_iscii_ma : CP57009 {
}
public class I18N.Other.ENCx_iscii_or : CP57007 {
}
public class I18N.Other.ENCx_iscii_pa : CP57011 {
}
public class I18N.Other.ENCx_iscii_ta : CP57004 {
}
public class I18N.Other.ENCx_iscii_te : CP57005 {
}
public abstract class I18N.Other.ISCIIEncoding : MonoEncoding {
    
private int shift;
    
private string encodingName;
    
private string webName;
    
public string BodyName { get; }
    
public string EncodingName { get; }
    
public string HeaderName { get; }
    
public string WebName { get; }
    protected ISCIIEncoding(int codePage, int shift, string encodingName, string webName);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(string s);
    public virtual int GetByteCountImpl(Char* chars, int count);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual string get_BodyName();
    public virtual string get_EncodingName();
    public virtual string get_HeaderName();
    public virtual string get_WebName();
}
