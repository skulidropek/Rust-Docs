internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
public Integer32 : object {
private int _wintv
public int intValue
public void .ctor(int ival)
public int get_intValue()
public void set_intValue(int value)
}
public IThreadRunnable {
public void Run()
}
public Novell.Directory.Ldap.Asn1.Asn1Boolean : Asn1Object {
private bool content
public int TAG
public Asn1Identifier ID
public void .ctor(bool content)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void encode(Asn1Encoder enc, Stream out_Renamed)
public bool booleanValue()
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1Choice : Asn1Object {
private Asn1Object content
protected internal Asn1Object ChoiceValue
protected internal void set_ChoiceValue(Asn1Object value)
public void .ctor(Asn1Object content)
public void encode(Asn1Encoder enc, Stream out_Renamed)
public Asn1Object choiceValue()
public Asn1Identifier getIdentifier()
public void setIdentifier(Asn1Identifier id)
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1Decoder {
public Asn1Object decode(SByte[] value_Renamed)
public Asn1Object decode(Stream in_Renamed)
public Asn1Object decode(Stream in_Renamed, Int32[] length)
public object decodeBoolean(Stream in_Renamed, int len)
public object decodeNumeric(Stream in_Renamed, int len)
public object decodeOctetString(Stream in_Renamed, int len)
public object decodeCharacterString(Stream in_Renamed, int len)
}
public Novell.Directory.Ldap.Asn1.Asn1Encoder {
public void encode(Asn1Boolean b, Stream out_Renamed)
public void encode(Asn1Numeric n, Stream out_Renamed)
public void encode(Asn1Null n, Stream out_Renamed)
public void encode(Asn1OctetString os, Stream out_Renamed)
public void encode(Asn1Structured c, Stream out_Renamed)
public void encode(Asn1Tagged t, Stream out_Renamed)
public void encode(Asn1Identifier id, Stream out_Renamed)
}
public Novell.Directory.Ldap.Asn1.Asn1Enumerated : Asn1Numeric {
public int TAG
public Asn1Identifier ID
public void .ctor(int content)
public void .ctor(long content)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void encode(Asn1Encoder enc, Stream out_Renamed)
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1Identifier : object {
public int UNIVERSAL
public int APPLICATION
public int CONTEXT
public int PRIVATE
private int tagClass
private bool constructed
private int tag
private int encodedLength
public int Asn1Class
public bool Constructed
public int Tag
public int EncodedLength
public bool Universal
public bool Application
public bool Context
public bool Private
public int get_Asn1Class()
public bool get_Constructed()
public int get_Tag()
public int get_EncodedLength()
public bool get_Universal()
public bool get_Application()
public bool get_Context()
public bool get_Private()
public void .ctor(int tagClass, bool constructed, int tag)
public void .ctor(Stream in_Renamed)
public void reset(Stream in_Renamed)
private int decodeTagNumber(Stream in_Renamed)
public object Clone()
}
public Novell.Directory.Ldap.Asn1.Asn1Integer : Asn1Numeric {
public int TAG
public Asn1Identifier ID
public void .ctor(int content)
public void .ctor(long content)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void encode(Asn1Encoder enc, Stream out_Renamed)
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1Length : object {
private int length
private int encodedLength
public int Length
public int EncodedLength
public int get_Length()
public int get_EncodedLength()
public void .ctor(int length)
public void .ctor(Stream in_Renamed)
public void reset(Stream in_Renamed)
}
public Novell.Directory.Ldap.Asn1.Asn1Null : Asn1Object {
public int TAG
public Asn1Identifier ID
public void encode(Asn1Encoder enc, Stream out_Renamed)
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1Numeric : Asn1Object {
private long content
internal void .ctor(Asn1Identifier id, int value_Renamed)
internal void .ctor(Asn1Identifier id, long value_Renamed)
public int intValue()
public long longValue()
}
public Novell.Directory.Ldap.Asn1.Asn1Object : object {
private Asn1Identifier id
public void .ctor(Asn1Identifier id)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void encode(Asn1Encoder enc, Stream out_Renamed)
public Asn1Identifier getIdentifier()
public void setIdentifier(Asn1Identifier id)
public SByte[] getEncoding(Asn1Encoder enc)
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1OctetString : Asn1Object {
private SByte[] content
public int TAG
protected internal Asn1Identifier ID
public void .ctor(SByte[] content)
public void .ctor(string content)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void encode(Asn1Encoder enc, Stream out_Renamed)
public SByte[] byteValue()
public string stringValue()
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1Sequence : Asn1Structured {
public int TAG
private Asn1Identifier ID
public void .ctor(int size)
public void .ctor(Asn1Object[] newContent, int size)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1SequenceOf : Asn1Structured {
public int TAG
public Asn1Identifier ID
public void .ctor(int size)
public void .ctor(Asn1Sequence sequence)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1Set : Asn1Structured {
public int TAG
public Asn1Identifier ID
public void .ctor(int size)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1SetOf : Asn1Structured {
public int TAG
public Asn1Identifier ID
public void .ctor(int size)
public void .ctor(Asn1Set set_Renamed)
public string ToString()
}
public Novell.Directory.Ldap.Asn1.Asn1Structured : Asn1Object {
private Asn1Object[] content
private int contentIndex
protected internal void .ctor(Asn1Identifier id)
protected internal void .ctor(Asn1Identifier id, int size)
protected internal void .ctor(Asn1Identifier id, Asn1Object[] newContent, int size)
public void encode(Asn1Encoder enc, Stream out_Renamed)
protected internal void decodeStructured(Asn1Decoder dec, Stream in_Renamed, int len)
public Asn1Object[] toArray()
public void add(Asn1Object value_Renamed)
public void set_Renamed(int index, Asn1Object value_Renamed)
public Asn1Object get_Renamed(int index)
public int size()
public string toString(string type)
}
public Novell.Directory.Ldap.Asn1.Asn1Tagged : Asn1Object {
private bool explicit_Renamed
private Asn1Object content
public Asn1Object TaggedValue
public bool Explicit
public void set_TaggedValue(Asn1Object value)
public bool get_Explicit()
public void .ctor(Asn1Identifier identifier, Asn1Object object_Renamed)
public void .ctor(Asn1Identifier identifier, Asn1Object object_Renamed, bool explicit_Renamed)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len, Asn1Identifier identifier)
public void encode(Asn1Encoder enc, Stream out_Renamed)
public Asn1Object taggedValue()
public string ToString()
}
public Novell.Directory.Ldap.Asn1.LBERDecoder : object {
private Asn1Identifier asn1ID
private Asn1Length asn1Len
public void GetObjectData(SerializationInfo info, StreamingContext context)
private void InitBlock()
public Asn1Object decode(SByte[] value_Renamed)
public Asn1Object decode(Stream in_Renamed)
public Asn1Object decode(Stream in_Renamed, Int32[] len)
public object decodeBoolean(Stream in_Renamed, int len)
public object decodeNumeric(Stream in_Renamed, int len)
public object decodeOctetString(Stream in_Renamed, int len)
public object decodeCharacterString(Stream in_Renamed, int len)
}
public Novell.Directory.Ldap.Asn1.LBEREncoder : object {
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void encode(Asn1Boolean b, Stream out_Renamed)
public void encode(Asn1Numeric n, Stream out_Renamed)
public void encode(Asn1Null n, Stream out_Renamed)
public void encode(Asn1OctetString os, Stream out_Renamed)
public void encode(Asn1Structured c, Stream out_Renamed)
public void encode(Asn1Tagged t, Stream out_Renamed)
public void encode(Asn1Identifier id, Stream out_Renamed)
private void encodeLength(int length, Stream out_Renamed)
private void encodeTagInteger(int value_Renamed, Stream out_Renamed)
}
public Novell.Directory.Ldap.AuthenticationTypes : Enum {
public int value__
public AuthenticationTypes Anonymous
public AuthenticationTypes Delegation
public AuthenticationTypes Encryption
public AuthenticationTypes FastBind
public AuthenticationTypes None
public AuthenticationTypes ReadonlyServer
public AuthenticationTypes Sealing
public AuthenticationTypes Secure
public AuthenticationTypes SecureSocketsLayer
public AuthenticationTypes ServerBind
public AuthenticationTypes Signing
}
public Novell.Directory.Ldap.CertificateValidationCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(X509Certificate certificate, Int32[] certificateErrors)
public IAsyncResult BeginInvoke(X509Certificate certificate, Int32[] certificateErrors, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
internal Novell.Directory.Ldap.Connection : object {
private CertificateValidationCallback OnCertificateValidation
private ArrayList handshakeProblemsEncountered
private object writeSemaphore
private int writeSemaphoreOwner
private int writeSemaphoreCount
private int ephemeralId
private BindProperties bindProperties
private int bindSemaphoreId
private Thread reader
private Thread deadReader
private IOException deadReaderException
private LBEREncoder encoder
private LBERDecoder decoder
private Socket sock
private TcpClient socket
private TcpClient nonTLSBackup
private Stream in_Renamed
private Stream out_Renamed
private bool clientActive
private bool ssl
private bool unsolSvrShutDnNotification
private int CONTINUE_READING
private int STOP_READING
private int stopReaderMessageID
private MessageVector messages
private ReferralInfo activeReferral
private ArrayList unsolicitedListeners
private string host
private int port
private int cloneCount
private string name
private object nameLock
private int connNum
internal string sdk
internal int protocol
internal string security
internal bool Cloned
internal bool Ssl
internal string Host
internal int Port
internal int BindSemId
internal bool BindSemIdClear
internal bool Bound
internal bool Connected
internal BindProperties BindProperties
internal ReferralInfo ActiveReferral
internal string ConnectionName
internal bool TLS
internal Stream InputStream
internal Stream OutputStream
public void add_OnCertificateValidation(CertificateValidationCallback value)
public void remove_OnCertificateValidation(CertificateValidationCallback value)
private string GetProblemMessage(CertificateProblem Problem)
private void InitBlock()
internal bool get_Cloned()
internal bool get_Ssl()
internal void set_Ssl(bool value)
internal string get_Host()
internal int get_Port()
internal int get_BindSemId()
internal void set_BindSemId(int value)
internal bool get_BindSemIdClear()
internal bool get_Bound()
internal bool get_Connected()
internal BindProperties get_BindProperties()
internal void set_BindProperties(BindProperties value)
internal ReferralInfo get_ActiveReferral()
internal void set_ActiveReferral(ReferralInfo value)
internal string get_ConnectionName()
internal object copy()
internal int acquireWriteSemaphore()
internal int acquireWriteSemaphore(int msgId)
internal void freeWriteSemaphore(int msgId)
private void waitForReader(Thread thread)
internal void connect(string host, int port)
public bool ServerCertificateValidation(X509Certificate certificate, Int32[] certificateErrors)
public bool DefaultCertificateValidationHandler(X509Certificate certificate, Int32[] certificateErrors)
private void connect(string host, int port, int semaphoreId)
internal void incrCloneCount()
internal Connection destroyClone(bool apiCall)
internal void clearBindSemId()
internal void writeMessage(Message info)
internal void writeMessage(LdapMessage msg)
internal MessageAgent getMessageAgent(int msgId)
internal void removeMessage(Message info)
protected void Finalize()
private void shutdown(string reason, int semaphoreId, InterThreadException notifyUser)
internal bool areMessagesComplete()
internal void stopReaderOnReply(int messageID)
internal void startReader()
internal bool get_TLS()
internal void startTLS()
internal void stopTLS()
internal Stream get_InputStream()
internal Stream get_OutputStream()
internal void ReplaceStreams(Stream newIn, Stream newOut)
internal void AddUnsolicitedNotificationListener(LdapUnsolicitedNotificationListener listener)
internal void RemoveUnsolicitedNotificationListener(LdapUnsolicitedNotificationListener listener)
private void notifyAllUnsolicitedListeners(RfcLdapMessage message)
}
public Novell.Directory.Ldap.Controls.LdapEntryChangeControl : LdapControl {
private int m_changeType
private string m_previousDN
private bool m_hasChangeNumber
private int m_changeNumber
public bool HasChangeNumber
public int ChangeNumber
public int ChangeType
public string PreviousDN
public bool get_HasChangeNumber()
public int get_ChangeNumber()
public int get_ChangeType()
public string get_PreviousDN()
public void .ctor(string oid, bool critical, SByte[] value_Renamed)
public string ToString()
}
public Novell.Directory.Ldap.Controls.LdapPersistSearchControl : LdapControl {
private int SEQUENCE_SIZE
private int CHANGETYPES_INDEX
private int CHANGESONLY_INDEX
private int RETURNCONTROLS_INDEX
private LBEREncoder s_encoder
private int m_changeTypes
private bool m_changesOnly
private bool m_returnControls
private Asn1Sequence m_sequence
private string requestOID
private string responseOID
public int ADD
public int DELETE
public int MODIFY
public int MODDN
public int ANY
public int ChangeTypes
public bool ReturnControls
public bool ChangesOnly
public int get_ChangeTypes()
public void set_ChangeTypes(int value)
public bool get_ReturnControls()
public void set_ReturnControls(bool value)
public bool get_ChangesOnly()
public void set_ChangesOnly(bool value)
public void .ctor(int changeTypes, bool changesOnly, bool returnControls, bool isCritical)
public string ToString()
private void setValue()
}
public Novell.Directory.Ldap.Controls.LdapSortControl : LdapControl {
private int ORDERING_RULE
private int REVERSE_ORDER
private string requestOID
private string responseOID
public void .ctor(LdapSortKey key, bool critical)
public void .ctor(LdapSortKey[] keys, bool critical)
}
public Novell.Directory.Ldap.Controls.LdapSortKey : object {
private string key
private bool reverse
private string matchRule
public string Key
public bool Reverse
public string MatchRule
public string get_Key()
public bool get_Reverse()
public string get_MatchRule()
public void .ctor(string keyDescription)
public void .ctor(string key, bool reverse)
public void .ctor(string key, bool reverse, string matchRule)
}
public Novell.Directory.Ldap.Controls.LdapSortResponse : LdapControl {
private string failedAttribute
private int resultCode
public string FailedAttribute
public int ResultCode
public string get_FailedAttribute()
public int get_ResultCode()
public void .ctor(string oid, bool critical, SByte[] values)
}
public Novell.Directory.Ldap.Controls.LdapVirtualListControl : LdapControl {
private int BYOFFSET
private int GREATERTHANOREQUAL
private string requestOID
private string responseOID
private Asn1Sequence m_vlvRequest
private int m_beforeCount
private int m_afterCount
private string m_jumpTo
private string m_context
private int m_startIndex
private int m_contentCount
public int AfterCount
public int BeforeCount
public int ListSize
public string Context
public int get_AfterCount()
public int get_BeforeCount()
public int get_ListSize()
public void set_ListSize(int value)
public string get_Context()
public void set_Context(string value)
public void .ctor(string jumpTo, int beforeCount, int afterCount)
public void .ctor(string jumpTo, int beforeCount, int afterCount, string context)
private void BuildTypedVLVRequest()
public void .ctor(int startIndex, int beforeCount, int afterCount, int contentCount)
public void .ctor(int startIndex, int beforeCount, int afterCount, int contentCount, string context)
private void BuildIndexedVLVRequest()
public void setRange(int listIndex, int beforeCount, int afterCount)
public void setRange(string jumpTo, int beforeCount, int afterCount)
}
public Novell.Directory.Ldap.Controls.LdapVirtualListResponse : LdapControl {
private int m_firstPosition
private int m_ContentCount
private int m_resultCode
private string m_context
public int ContentCount
public int FirstPosition
public int ResultCode
public string Context
public int get_ContentCount()
public int get_FirstPosition()
public int get_ResultCode()
public string get_Context()
public void .ctor(string oid, bool critical, SByte[] values)
}
public Novell.Directory.Ldap.Events.BaseEventArgs : EventArgs {
protected LdapMessage ldap_message
public LdapMessage ContianedEventInformation
public LdapMessage get_ContianedEventInformation()
public void .ctor(LdapMessage message)
}
public Novell.Directory.Ldap.Events.DirectoryEventArgs : BaseEventArgs {
protected EventClassifiers eClassification
public EventClassifiers EventClassification
public EventClassifiers get_EventClassification()
public void set_EventClassification(EventClassifiers value)
public void .ctor(LdapMessage sourceMessage, EventClassifiers aClassification)
}
public Novell.Directory.Ldap.Events.DirectoryExceptionEventArgs : BaseEventArgs {
protected LdapException ldap_exception_object
public LdapException LdapExceptionObject
public LdapException get_LdapExceptionObject()
public void .ctor(LdapMessage message, LdapException ldapException)
}
public Novell.Directory.Ldap.Events.Edir.DebugParameterType : Enum {
public int value__
public DebugParameterType ENTRYID
public DebugParameterType STRING
public DebugParameterType BINARY
public DebugParameterType INTEGER
public DebugParameterType ADDRESS
public DebugParameterType TIMESTAMP
public DebugParameterType TIMEVECTOR
}
public Novell.Directory.Ldap.Events.Edir.DSETimeStamp : object {
protected int nSeconds
protected int replica_number
protected int nEvent
public int Seconds
public int ReplicaNumber
public int Event
public int get_Seconds()
public int get_ReplicaNumber()
public int get_Event()
public void .ctor(Asn1Sequence dseObject)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EdirEventArgs : DirectoryEventArgs {
public EdirEventIntermediateResponse IntermediateResponse
public EdirEventIntermediateResponse get_IntermediateResponse()
public void .ctor(LdapMessage sourceMessage, EventClassifiers aClassification)
}
public Novell.Directory.Ldap.Events.Edir.EdirEventDataType : Enum {
public int value__
public EdirEventDataType EDIR_TAG_ENTRY_EVENT_DATA
public EdirEventDataType EDIR_TAG_VALUE_EVENT_DATA
public EdirEventDataType EDIR_TAG_GENERAL_EVENT_DATA
public EdirEventDataType EDIR_TAG_SKULK_DATA
public EdirEventDataType EDIR_TAG_BINDERY_EVENT_DATA
public EdirEventDataType EDIR_TAG_DSESEV_INFO
public EdirEventDataType EDIR_TAG_MODULE_STATE_DATA
public EdirEventDataType EDIR_TAG_NETWORK_ADDRESS
public EdirEventDataType EDIR_TAG_CONNECTION_STATE
public EdirEventDataType EDIR_TAG_CHANGE_SERVER_ADDRESS
public EdirEventDataType EDIR_TAG_CHANGE_CONFIG_PARAM
public EdirEventDataType EDIR_TAG_NO_DATA
public EdirEventDataType EDIR_TAG_STATUS_LOG
public EdirEventDataType EDIR_TAG_DEBUG_EVENT_DATA
}
public Novell.Directory.Ldap.Events.Edir.EdirEventIntermediateResponse : LdapIntermediateResponse {
protected EdirEventType event_type
protected EdirEventResultType event_result_type
protected BaseEdirEventData event_response_data
public EdirEventType EventType
public EdirEventResultType EventResultType
public BaseEdirEventData EventResponseDataObject
public EdirEventType get_EventType()
public EdirEventResultType get_EventResultType()
public BaseEdirEventData get_EventResponseDataObject()
public void .ctor(RfcLdapMessage message)
public void .ctor(Byte[] message)
protected void ProcessMessage(SByte[] returnedValue)
}
public Novell.Directory.Ldap.Events.Edir.EdirEventResultType : Enum {
public int value__
public EdirEventResultType EVT_STATUS_ALL
public EdirEventResultType EVT_STATUS_SUCCESS
public EdirEventResultType EVT_STATUS_FAILURE
}
public Novell.Directory.Ldap.Events.Edir.EdirEventSource : LdapEventSource {
protected EdirEventHandler edir_event
protected LdapConnection mConnection
protected MonitorEventRequest mRequestOperation
protected LdapResponseQueue mQueue
public void add_EdirEvent(EdirEventHandler value)
public void remove_EdirEvent(EdirEventHandler value)
protected int GetListeners()
public void .ctor(EdirEventSpecifier[] specifier, LdapConnection conn)
protected void StartSearchAndPolling()
protected void StopSearchAndPolling()
protected bool NotifyEventListeners(LdapMessage sourceMessage, EventClassifiers aClassification, int nType)
}
public Novell.Directory.Ldap.Events.Edir.EdirEventSpecifier : object {
private EdirEventType event_type
private EdirEventResultType event_result_type
private string event_filter
public EdirEventType EventType
public EdirEventResultType EventResultType
public string EventFilter
public EdirEventType get_EventType()
public EdirEventResultType get_EventResultType()
public string get_EventFilter()
public void .ctor(EdirEventType eventType, EdirEventResultType eventResultType)
public void .ctor(EdirEventType eventType, EdirEventResultType eventResultType, string filter)
}
public Novell.Directory.Ldap.Events.Edir.EdirEventType : Enum {
public int value__
public EdirEventType EVT_INVALID
public EdirEventType EVT_CREATE_ENTRY
public EdirEventType EVT_DELETE_ENTRY
public EdirEventType EVT_RENAME_ENTRY
public EdirEventType EVT_MOVE_SOURCE_ENTRY
public EdirEventType EVT_ADD_VALUE
public EdirEventType EVT_DELETE_VALUE
public EdirEventType EVT_CLOSE_STREAM
public EdirEventType EVT_DELETE_ATTRIBUTE
public EdirEventType EVT_SET_BINDERY_CONTEXT
public EdirEventType EVT_CREATE_BINDERY_OBJECT
public EdirEventType EVT_DELETE_BINDERY_OBJECT
public EdirEventType EVT_CHECK_SEV
public EdirEventType EVT_UPDATE_SEV
public EdirEventType EVT_MOVE_DEST_ENTRY
public EdirEventType EVT_DELETE_UNUSED_EXTREF
public EdirEventType EVT_REMOTE_SERVER_DOWN
public EdirEventType EVT_NCP_RETRY_EXPENDED
public EdirEventType EVT_PARTITION_OPERATION_EVENT
public EdirEventType EVT_CHANGE_MODULE_STATE
public EdirEventType EVT_DB_AUTHEN
public EdirEventType EVT_DB_BACKLINK
public EdirEventType EVT_DB_BUFFERS
public EdirEventType EVT_DB_COLL
public EdirEventType EVT_DB_DSAGENT
public EdirEventType EVT_DB_EMU
public EdirEventType EVT_DB_FRAGGER
public EdirEventType EVT_DB_INIT
public EdirEventType EVT_DB_INSPECTOR
public EdirEventType EVT_DB_JANITOR
public EdirEventType EVT_DB_LIMBER
public EdirEventType EVT_DB_LOCKING
public EdirEventType EVT_DB_MOVE
public EdirEventType EVT_DB_MIN
public EdirEventType EVT_DB_MISC
public EdirEventType EVT_DB_PART
public EdirEventType EVT_DB_RECMAN
public EdirEventType EVT_DB_RESNAME
public EdirEventType EVT_DB_SAP
public EdirEventType EVT_DB_SCHEMA
public EdirEventType EVT_DB_SKULKER
public EdirEventType EVT_DB_STREAMS
public EdirEventType EVT_DB_SYNC_IN
public EdirEventType EVT_DB_THREADS
public EdirEventType EVT_DB_TIMEVECTOR
public EdirEventType EVT_DB_VCLIENT
public EdirEventType EVT_AGENT_OPEN_LOCAL
public EdirEventType EVT_AGENT_CLOSE_LOCAL
public EdirEventType EVT_DS_ERR_VIA_BINDERY
public EdirEventType EVT_DSA_BAD_VERB
public EdirEventType EVT_DSA_REQUEST_START
public EdirEventType EVT_DSA_REQUEST_END
public EdirEventType EVT_MOVE_SUBTREE
public EdirEventType EVT_NO_REPLICA_PTR
public EdirEventType EVT_SYNC_IN_END
public EdirEventType EVT_BKLINK_SEV
public EdirEventType EVT_BKLINK_OPERATOR
public EdirEventType EVT_DELETE_SUBTREE
public EdirEventType EVT_REFERRAL
public EdirEventType EVT_UPDATE_CLASS_DEF
public EdirEventType EVT_UPDATE_ATTR_DEF
public EdirEventType EVT_LOST_ENTRY
public EdirEventType EVT_PURGE_ENTRY_FAIL
public EdirEventType EVT_PURGE_START
public EdirEventType EVT_PURGE_END
public EdirEventType EVT_LIMBER_DONE
public EdirEventType EVT_SPLIT_DONE
public EdirEventType EVT_SYNC_SVR_OUT_START
public EdirEventType EVT_SYNC_SVR_OUT_END
public EdirEventType EVT_SYNC_PART_START
public EdirEventType EVT_SYNC_PART_END
public EdirEventType EVT_MOVE_TREE_START
public EdirEventType EVT_MOVE_TREE_END
public EdirEventType EVT_JOIN_DONE
public EdirEventType EVT_PARTITION_LOCKED
public EdirEventType EVT_PARTITION_UNLOCKED
public EdirEventType EVT_SCHEMA_SYNC
public EdirEventType EVT_NAME_COLLISION
public EdirEventType EVT_NLM_LOADED
public EdirEventType EVT_LUMBER_DONE
public EdirEventType EVT_BACKLINK_PROC_DONE
public EdirEventType EVT_SERVER_RENAME
public EdirEventType EVT_SYNTHETIC_TIME
public EdirEventType EVT_SERVER_ADDRESS_CHANGE
public EdirEventType EVT_DSA_READ
public EdirEventType EVT_LOGIN
public EdirEventType EVT_CHGPASS
public EdirEventType EVT_LOGOUT
public EdirEventType EVT_ADD_REPLICA
public EdirEventType EVT_REMOVE_REPLICA
public EdirEventType EVT_SPLIT_PARTITION
public EdirEventType EVT_JOIN_PARTITIONS
public EdirEventType EVT_CHANGE_REPLICA_TYPE
public EdirEventType EVT_REMOVE_ENTRY
public EdirEventType EVT_ABORT_PARTITION_OP
public EdirEventType EVT_RECV_REPLICA_UPDATES
public EdirEventType EVT_REPAIR_TIME_STAMPS
public EdirEventType EVT_SEND_REPLICA_UPDATES
public EdirEventType EVT_VERIFY_PASS
public EdirEventType EVT_BACKUP_ENTRY
public EdirEventType EVT_RESTORE_ENTRY
public EdirEventType EVT_DEFINE_ATTR_DEF
public EdirEventType EVT_REMOVE_ATTR_DEF
public EdirEventType EVT_REMOVE_CLASS_DEF
public EdirEventType EVT_DEFINE_CLASS_DEF
public EdirEventType EVT_MODIFY_CLASS_DEF
public EdirEventType EVT_RESET_DS_COUNTERS
public EdirEventType EVT_REMOVE_ENTRY_DIR
public EdirEventType EVT_COMPARE_ATTR_VALUE
public EdirEventType EVT_STREAM
public EdirEventType EVT_LIST_SUBORDINATES
public EdirEventType EVT_LIST_CONT_CLASSES
public EdirEventType EVT_INSPECT_ENTRY
public EdirEventType EVT_RESEND_ENTRY
public EdirEventType EVT_MUTATE_ENTRY
public EdirEventType EVT_MERGE_ENTRIES
public EdirEventType EVT_MERGE_TREE
public EdirEventType EVT_CREATE_SUBREF
public EdirEventType EVT_LIST_PARTITIONS
public EdirEventType EVT_READ_ATTR
public EdirEventType EVT_READ_REFERENCES
public EdirEventType EVT_UPDATE_REPLICA
public EdirEventType EVT_START_UPDATE_REPLICA
public EdirEventType EVT_END_UPDATE_REPLICA
public EdirEventType EVT_SYNC_PARTITION
public EdirEventType EVT_SYNC_SCHEMA
public EdirEventType EVT_CREATE_BACKLINK
public EdirEventType EVT_CHECK_CONSOLE_OPERATOR
public EdirEventType EVT_CHANGE_TREE_NAME
public EdirEventType EVT_START_JOIN
public EdirEventType EVT_ABORT_JOIN
public EdirEventType EVT_UPDATE_SCHEMA
public EdirEventType EVT_START_UPDATE_SCHEMA
public EdirEventType EVT_END_UPDATE_SCHEMA
public EdirEventType EVT_MOVE_TREE
public EdirEventType EVT_RELOAD_DS
public EdirEventType EVT_ADD_PROPERTY
public EdirEventType EVT_DELETE_PROPERTY
public EdirEventType EVT_ADD_MEMBER
public EdirEventType EVT_DELETE_MEMBER
public EdirEventType EVT_CHANGE_PROP_SECURITY
public EdirEventType EVT_CHANGE_OBJ_SECURITY
public EdirEventType EVT_CONNECT_TO_ADDRESS
public EdirEventType EVT_SEARCH
public EdirEventType EVT_PARTITION_STATE_CHG
public EdirEventType EVT_REMOVE_BACKLINK
public EdirEventType EVT_LOW_LEVEL_JOIN
public EdirEventType EVT_CREATE_NAMEBASE
public EdirEventType EVT_CHANGE_SECURITY_EQUALS
public EdirEventType EVT_DB_NCPENG
public EdirEventType EVT_CRC_FAILURE
public EdirEventType EVT_ADD_ENTRY
public EdirEventType EVT_MODIFY_ENTRY
public EdirEventType EVT_OPEN_BINDERY
public EdirEventType EVT_CLOSE_BINDERY
public EdirEventType EVT_CHANGE_CONN_STATE
public EdirEventType EVT_NEW_SCHEMA_EPOCH
public EdirEventType EVT_DB_AUDIT
public EdirEventType EVT_DB_AUDIT_NCP
public EdirEventType EVT_DB_AUDIT_SKULK
public EdirEventType EVT_MODIFY_RDN
public EdirEventType EVT_ENTRYID_SWAP
public EdirEventType EVT_INSIDE_NCP_REQUEST
public EdirEventType EVT_DB_LOST_ENTRY
public EdirEventType EVT_DB_CHANGE_CACHE
public EdirEventType EVT_LOW_LEVEL_SPLIT
public EdirEventType EVT_DB_PURGE
public EdirEventType EVT_END_NAMEBASE_TRANSACTION
public EdirEventType EVT_ALLOW_LOGIN
public EdirEventType EVT_DB_CLIENT_BUFFERS
public EdirEventType EVT_DB_WANMAN
public EdirEventType EVT_LOCAL_REPLICA_CHANGE
public EdirEventType EVT_DB_DRL
public EdirEventType EVT_MOVE_ENTRY_SOURCE
public EdirEventType EVT_MOVE_ENTRY_DEST
public EdirEventType EVT_NOTIFY_REF_CHANGE
public EdirEventType EVT_DB_ALLOC
public EdirEventType EVT_CONSOLE_OPERATION
public EdirEventType EVT_DB_SERVER_PACKET
public EdirEventType EVT_DB_OBIT
public EdirEventType EVT_REPLICA_IN_TRANSITION
public EdirEventType EVT_DB_SYNC_DETAIL
public EdirEventType EVT_DB_CONN_TRACE
public EdirEventType EVT_BEGIN_NAMEBASE_TRANSACTION
public EdirEventType EVT_DB_DIRXML
public EdirEventType EVT_VR_DRIVER_STATE_CHANGE
public EdirEventType EVT_REQ_UPDATE_SERVER_STATUS
public EdirEventType EVT_DB_DIRXML_DRIVERS
public EdirEventType EVT_DB_NDSMON
public EdirEventType EVT_CHANGE_SERVER_ADDRS
public EdirEventType EVT_DB_DNS
public EdirEventType EVT_DB_REPAIR
public EdirEventType EVT_DB_REPAIR_DEBUG
public EdirEventType EVT_ITERATOR
public EdirEventType EVT_DB_SCHEMA_DETAIL
public EdirEventType EVT_LOW_LEVEL_JOIN_BEGIN
public EdirEventType EVT_DB_IN_SYNC_DETAIL
public EdirEventType EVT_PRE_DELETE_ENTRY
public EdirEventType EVT_DB_SSL
public EdirEventType EVT_DB_PKI
public EdirEventType EVT_DB_HTTPSTK
public EdirEventType EVT_DB_LDAPSTK
public EdirEventType EVT_DB_NICIEXT
public EdirEventType EVT_DB_SECRET_STORE
public EdirEventType EVT_DB_NMAS
public EdirEventType EVT_DB_BACKLINK_DETAIL
public EdirEventType EVT_DB_DRL_DETAIL
public EdirEventType EVT_DB_OBJECT_PRODUCER
public EdirEventType EVT_DB_SEARCH
public EdirEventType EVT_DB_SEARCH_DETAIL
public EdirEventType EVT_STATUS_LOG
public EdirEventType EVT_DB_NPKI_API
public EdirEventType EVT_MAX_EVENTS
}
public Novell.Directory.Ldap.Events.Edir.EventData.BaseEdirEventData : object {
protected MemoryStream decodedData
protected LBERDecoder decoder
protected EdirEventDataType event_data_type
public EdirEventDataType EventDataType
public EdirEventDataType get_EventDataType()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
protected void DataInitDone()
}
public Novell.Directory.Ldap.Events.Edir.EventData.BinderyObjectEventData : BaseEdirEventData {
protected string strEntryDN
protected int nType
protected int nEmuObjFlags
protected int nSecurity
protected string strName
public string EntryDN
public int ValueType
public int EmuObjFlags
public int Security
public string Name
public string get_EntryDN()
public int get_ValueType()
public int get_EmuObjFlags()
public int get_Security()
public string get_Name()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventData.ChangeAddressEventData : BaseEdirEventData {
protected int nFlags
protected int nProto
protected int address_family
protected string strAddress
protected string pstk_name
protected string source_module
public int Flags
public int Proto
public int AddressFamily
public string Address
public string PstkName
public string SourceModule
public int get_Flags()
public int get_Proto()
public int get_AddressFamily()
public string get_Address()
public string get_PstkName()
public string get_SourceModule()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventData.ConnectionStateEventData : BaseEdirEventData {
protected string strConnectionDN
protected int old_flags
protected int new_flags
protected string source_module
public string ConnectionDN
public int OldFlags
public int NewFlags
public string SourceModule
public string get_ConnectionDN()
public int get_OldFlags()
public int get_NewFlags()
public string get_SourceModule()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventData.DebugEventData : BaseEdirEventData {
protected int ds_time
protected int milli_seconds
protected string strPerpetratorDN
protected string strFormatString
protected int nVerb
protected int parameter_count
protected ArrayList parameter_collection
public int DSTime
public int MilliSeconds
public string PerpetratorDN
public string FormatString
public int Verb
public int ParameterCount
public ArrayList Parameters
public int get_DSTime()
public int get_MilliSeconds()
public string get_PerpetratorDN()
public string get_FormatString()
public int get_Verb()
public int get_ParameterCount()
public ArrayList get_Parameters()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventData.DebugParameter : object {
protected DebugParameterType debug_type
protected object objData
public DebugParameterType DebugType
public object Data
public DebugParameterType get_DebugType()
public object get_Data()
public void .ctor(Asn1Tagged dseObject)
protected int getTaggedIntValue(Asn1Tagged tagVal)
protected Asn1Sequence getTaggedSequence(Asn1Tagged tagVal)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventData.EntryEventData : BaseEdirEventData {
protected string strPerpetratorDN
protected string strEntry
protected string strNewDN
protected string strClassId
protected int nVerb
protected int nFlags
protected DSETimeStamp timeStampObj
public string PerpetratorDN
public string Entry
public string NewDN
public string ClassId
public int Verb
public int Flags
public DSETimeStamp TimeStamp
public string get_PerpetratorDN()
public string get_Entry()
public string get_NewDN()
public string get_ClassId()
public int get_Verb()
public int get_Flags()
public DSETimeStamp get_TimeStamp()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventData.GeneralDSEventData : BaseEdirEventData {
protected int ds_time
protected int milli_seconds
protected int nVerb
protected int current_process
protected string strPerpetratorDN
protected Int32[] integer_values
protected String[] string_values
public int DSTime
public int MilliSeconds
public int Verb
public int CurrentProcess
public string PerpetratorDN
public Int32[] IntegerValues
public String[] StringValues
public int get_DSTime()
public int get_MilliSeconds()
public int get_Verb()
public int get_CurrentProcess()
public string get_PerpetratorDN()
public Int32[] get_IntegerValues()
public String[] get_StringValues()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
protected int getTaggedIntValue(Asn1Tagged tagvalue, GeneralEventField tagid)
protected string getTaggedStringValue(Asn1Tagged tagvalue, GeneralEventField tagid)
protected Asn1Sequence getTaggedSequence(Asn1Tagged tagvalue, GeneralEventField tagid)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventData.ModuleStateEventData : BaseEdirEventData {
protected string strConnectionDN
protected int nFlags
protected string strName
protected string strDescription
protected string strSource
public string ConnectionDN
public int Flags
public string Name
public string Description
public string Source
public string get_ConnectionDN()
public int get_Flags()
public string get_Name()
public string get_Description()
public string get_Source()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventData.NetworkAddressEventData : BaseEdirEventData {
protected int nType
protected string strData
public int ValueType
public string Data
public int get_ValueType()
public string get_Data()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventData.ReferralAddress : object {
protected int address_type
protected string strAddress
public int AddressType
public string Address
public int get_AddressType()
public string get_Address()
public void .ctor(Asn1Sequence dseObject)
}
public Novell.Directory.Ldap.Events.Edir.EventData.SecurityEquivalenceEventData : BaseEdirEventData {
protected string strEntryDN
protected int retry_count
protected string strValueDN
protected int referral_count
protected ArrayList referral_list
public string EntryDN
public int RetryCount
public string ValueDN
public int ReferralCount
public ArrayList ReferralList
public string get_EntryDN()
public int get_RetryCount()
public string get_ValueDN()
public int get_ReferralCount()
public ArrayList get_ReferralList()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventData.ValueEventData : BaseEdirEventData {
protected string strAttribute
protected string strClassId
protected string strData
protected Byte[] binData
protected string strEntry
protected string strPerpetratorDN
protected string strSyntax
protected DSETimeStamp timeStampObj
protected int nVerb
public string Attribute
public string ClassId
public string Data
public Byte[] BinaryData
public string Entry
public string PerpetratorDN
public string Syntax
public DSETimeStamp TimeStamp
public int Verb
public string get_Attribute()
public string get_ClassId()
public string get_Data()
public Byte[] get_BinaryData()
public string get_Entry()
public string get_PerpetratorDN()
public string get_Syntax()
public DSETimeStamp get_TimeStamp()
public int get_Verb()
public void .ctor(EdirEventDataType eventDataType, Asn1Object message)
public string ToString()
}
public Novell.Directory.Ldap.Events.Edir.EventOids : object {
public string NLDAP_MONITOR_EVENTS_REQUEST
public string NLDAP_MONITOR_EVENTS_RESPONSE
public string NLDAP_EVENT_NOTIFICATION
public string NLDAP_FILTERED_MONITOR_EVENTS_REQUEST
}
public Novell.Directory.Ldap.Events.Edir.GeneralEventField : Enum {
public int value__
public GeneralEventField EVT_TAG_GEN_DSTIME
public GeneralEventField EVT_TAG_GEN_MILLISEC
public GeneralEventField EVT_TAG_GEN_VERB
public GeneralEventField EVT_TAG_GEN_CURRPROC
public GeneralEventField EVT_TAG_GEN_PERP
public GeneralEventField EVT_TAG_GEN_INTEGERS
public GeneralEventField EVT_TAG_GEN_STRINGS
}
public Novell.Directory.Ldap.Events.Edir.MonitorEventRequest : LdapExtendedOperation {
public void .ctor(EdirEventSpecifier[] specifiers)
}
public Novell.Directory.Ldap.Events.Edir.MonitorEventResponse : LdapExtendedResponse {
protected EdirEventSpecifier[] specifier_list
public EdirEventSpecifier[] SpecifierList
public EdirEventSpecifier[] get_SpecifierList()
public void .ctor(RfcLdapMessage message)
}
public Novell.Directory.Ldap.Events.EventClassifiers : Enum {
public int value__
public EventClassifiers CLASSIFICATION_UNKNOWN
public EventClassifiers CLASSIFICATION_LDAP_PSEARCH
public EventClassifiers CLASSIFICATION_EDIR_EVENT
}
public Novell.Directory.Ldap.Events.LdapEventArgs : DirectoryEventArgs {
protected LdapEventType eType
public LdapEventType EventType
public LdapEventType get_EventType()
public void set_EventType(LdapEventType value)
public void .ctor(LdapMessage sourceMessage, EventClassifiers aClassification, LdapEventType aType)
public string ToString()
}
public Novell.Directory.Ldap.Events.LdapEventSource : object {
protected internal int EVENT_TYPE_UNKNOWN
protected int DEFAULT_SLEEP_TIME
protected int sleep_interval
protected DirectoryEventHandler directory_event
protected DirectoryExceptionEventHandler directory_exception_event
protected EventsGenerator m_objEventsGenerator
public int SleepInterval
public int get_SleepInterval()
public void set_SleepInterval(int value)
protected int GetListeners()
protected LISTENERS_COUNT GetCurrentListenersState()
protected void ListenerAdded()
protected void ListenerRemoved()
protected void StartSearchAndPolling()
protected void StopSearchAndPolling()
public void add_DirectoryEvent(DirectoryEventHandler value)
public void remove_DirectoryEvent(DirectoryEventHandler value)
public void add_DirectoryExceptionEvent(DirectoryExceptionEventHandler value)
public void remove_DirectoryExceptionEvent(DirectoryExceptionEventHandler value)
protected void StartEventPolling(LdapMessageQueue queue, LdapConnection conn, int msgid)
protected void StopEventPolling()
protected bool NotifyEventListeners(LdapMessage sourceMessage, EventClassifiers aClassification, int nType)
protected void NotifyListeners(LdapMessage sourceMessage, EventClassifiers aClassification, int nType)
protected void NotifyDirectoryListeners(LdapMessage sourceMessage, EventClassifiers aClassification)
protected void NotifyDirectoryListeners(DirectoryEventArgs objDirectoryEventArgs)
protected void NotifyExceptionListeners(LdapMessage sourceMessage, LdapException ldapException)
}
public Novell.Directory.Ldap.Events.LdapEventType : Enum {
public int value__
public LdapEventType TYPE_UNKNOWN
public LdapEventType LDAP_PSEARCH_ADD
public LdapEventType LDAP_PSEARCH_DELETE
public LdapEventType LDAP_PSEARCH_MODIFY
public LdapEventType LDAP_PSEARCH_MODDN
public LdapEventType LDAP_PSEARCH_ANY
}
public Novell.Directory.Ldap.Events.PSearchEventSource : LdapEventSource {
protected SearchResultEventHandler search_result_event
protected SearchReferralEventHandler search_referral_event
protected LdapConnection mConnection
protected string mSearchBase
protected int mScope
protected String[] mAttrs
protected string mFilter
protected bool mTypesOnly
protected LdapSearchConstraints mSearchConstraints
protected LdapEventType mEventChangeType
protected LdapSearchQueue mQueue
public void add_SearchResultEvent(SearchResultEventHandler value)
public void remove_SearchResultEvent(SearchResultEventHandler value)
public void add_SearchReferralEvent(SearchReferralEventHandler value)
public void remove_SearchReferralEvent(SearchReferralEventHandler value)
protected int GetListeners()
public void .ctor(LdapConnection conn, string searchBase, int scope, string filter, String[] attrs, bool typesOnly, LdapSearchConstraints constraints, LdapEventType eventchangetype, bool changeonly)
protected void StartSearchAndPolling()
protected void StopSearchAndPolling()
protected bool NotifyEventListeners(LdapMessage sourceMessage, EventClassifiers aClassification, int nType)
}
public Novell.Directory.Ldap.Events.SearchReferralEventArgs : LdapEventArgs {
public void .ctor(LdapMessage sourceMessage, EventClassifiers aClassification, LdapEventType aType)
public String[] getUrls()
}
public Novell.Directory.Ldap.Events.SearchResultEventArgs : LdapEventArgs {
public LdapEntry Entry
public void .ctor(LdapMessage sourceMessage, EventClassifiers aClassification, LdapEventType aType)
public LdapEntry get_Entry()
public string ToString()
private string getStringRepresentaionOfEventInformation()
private string getChangeTypeString()
}
public Novell.Directory.Ldap.Extensions.AbortPartitionOperationRequest : LdapExtendedOperation {
public void .ctor(string partitionDN, int flags)
}
public Novell.Directory.Ldap.Extensions.AddReplicaRequest : LdapExtendedOperation {
public void .ctor(string dn, string serverDN, int replicaType, int flags)
}
public Novell.Directory.Ldap.Extensions.BackupRestoreConstants : object {
public string NLDAP_LDAP_BACKUP_REQUEST
public string NLDAP_LDAP_BACKUP_RESPONSE
public string NLDAP_LDAP_RESTORE_REQUEST
public string NLDAP_LDAP_RESTORE_RESPONSE
}
public Novell.Directory.Ldap.Extensions.ChangeReplicaTypeRequest : LdapExtendedOperation {
public void .ctor(string dn, string serverDN, int replicaType, int flags)
}
public Novell.Directory.Ldap.Extensions.GetBindDNResponse : LdapExtendedResponse {
private string identity
public string Identity
public string get_Identity()
public void .ctor(RfcLdapMessage rfcMessage)
}
public Novell.Directory.Ldap.Extensions.GetEffectivePrivilegesRequest : LdapExtendedOperation {
public void .ctor(string dn, string trusteeDN, string attrName)
}
public Novell.Directory.Ldap.Extensions.GetEffectivePrivilegesResponse : LdapExtendedResponse {
private int privileges
public int Privileges
public int get_Privileges()
public void .ctor(RfcLdapMessage rfcMessage)
}
public Novell.Directory.Ldap.Extensions.GetReplicaInfoRequest : LdapExtendedOperation {
public void .ctor(string serverDN, string partitionDN)
}
public Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse : LdapExtendedResponse {
private int partitionID
private int replicaState
private int modificationTime
private int purgeTime
private int localPartitionID
private string partitionDN
private int replicaType
private int flags
public void .ctor(RfcLdapMessage rfcMessage)
public int getpartitionID()
public int getreplicaState()
public int getmodificationTime()
public int getpurgeTime()
public int getlocalPartitionID()
public string getpartitionDN()
public int getreplicaType()
public int getflags()
}
public Novell.Directory.Ldap.Extensions.GetReplicationFilterRequest : LdapExtendedOperation {
public void .ctor(string serverDN)
}
public Novell.Directory.Ldap.Extensions.GetReplicationFilterResponse : LdapExtendedResponse {
internal String[][] returnedFilter
public String[][] ReplicationFilter
public String[][] get_ReplicationFilter()
public void .ctor(RfcLdapMessage rfcMessage)
}
public Novell.Directory.Ldap.Extensions.LdapBackupRequest : LdapExtendedOperation {
public void .ctor(string objectDN, Byte[] passwd, string stateInfo)
}
public Novell.Directory.Ldap.Extensions.LdapBackupResponse : LdapExtendedResponse {
private int bufferLength
private string stateInfo
private string chunkSizesString
private Byte[] returnedBuffer
public void .ctor(RfcLdapMessage rfcMessage)
public int getBufferLength()
public string getStatusInfo()
public string getChunkSizesString()
public Byte[] getReturnedBuffer()
}
public Novell.Directory.Ldap.Extensions.LdapRestoreRequest : LdapExtendedOperation {
public void .ctor(string objectDN, Byte[] passwd, int bufferLength, string chunkSizesString, Byte[] returnedBuffer)
}
public Novell.Directory.Ldap.Extensions.ListReplicasRequest : LdapExtendedOperation {
public void .ctor(string serverName)
}
public Novell.Directory.Ldap.Extensions.ListReplicasResponse : LdapExtendedResponse {
private String[] replicaList
public String[] ReplicaList
public String[] get_ReplicaList()
public void .ctor(RfcLdapMessage rfcMessage)
}
public Novell.Directory.Ldap.Extensions.MergePartitionsRequest : LdapExtendedOperation {
public void .ctor(string dn, int flags)
}
public Novell.Directory.Ldap.Extensions.NamingContextConstants : object {
public string CREATE_NAMING_CONTEXT_REQ
public string CREATE_NAMING_CONTEXT_RES
public string MERGE_NAMING_CONTEXT_REQ
public string MERGE_NAMING_CONTEXT_RES
public string ADD_REPLICA_REQ
public string ADD_REPLICA_RES
public string REFRESH_SERVER_REQ
public string REFRESH_SERVER_RES
public string DELETE_REPLICA_REQ
public string DELETE_REPLICA_RES
public string NAMING_CONTEXT_COUNT_REQ
public string NAMING_CONTEXT_COUNT_RES
public string CHANGE_REPLICA_TYPE_REQ
public string CHANGE_REPLICA_TYPE_RES
public string GET_REPLICA_INFO_REQ
public string GET_REPLICA_INFO_RES
public string LIST_REPLICAS_REQ
public string LIST_REPLICAS_RES
public string RECEIVE_ALL_UPDATES_REQ
public string RECEIVE_ALL_UPDATES_RES
public string SEND_ALL_UPDATES_REQ
public string SEND_ALL_UPDATES_RES
public string NAMING_CONTEXT_SYNC_REQ
public string NAMING_CONTEXT_SYNC_RES
public string SCHEMA_SYNC_REQ
public string SCHEMA_SYNC_RES
public string ABORT_NAMING_CONTEXT_OP_REQ
public string ABORT_NAMING_CONTEXT_OP_RES
public string GET_IDENTITY_NAME_REQ
public string GET_IDENTITY_NAME_RES
public string GET_EFFECTIVE_PRIVILEGES_REQ
public string GET_EFFECTIVE_PRIVILEGES_RES
public string SET_REPLICATION_FILTER_REQ
public string SET_REPLICATION_FILTER_RES
public string GET_REPLICATION_FILTER_REQ
public string GET_REPLICATION_FILTER_RES
public string CREATE_ORPHAN_NAMING_CONTEXT_REQ
public string CREATE_ORPHAN_NAMING_CONTEXT_RES
public string REMOVE_ORPHAN_NAMING_CONTEXT_REQ
public string REMOVE_ORPHAN_NAMING_CONTEXT_RES
public string TRIGGER_BKLINKER_REQ
public string TRIGGER_BKLINKER_RES
public string TRIGGER_JANITOR_REQ
public string TRIGGER_JANITOR_RES
public string TRIGGER_LIMBER_REQ
public string TRIGGER_LIMBER_RES
public string TRIGGER_SKULKER_REQ
public string TRIGGER_SKULKER_RES
public string TRIGGER_SCHEMA_SYNC_REQ
public string TRIGGER_SCHEMA_SYNC_RES
public string TRIGGER_PART_PURGE_REQ
public string TRIGGER_PART_PURGE_RES
public int Ldap_ENSURE_SERVERS_UP
public int Ldap_RT_MASTER
public int Ldap_RT_SECONDARY
public int Ldap_RT_READONLY
public int Ldap_RT_SUBREF
public int Ldap_RT_SPARSE_WRITE
public int Ldap_RT_SPARSE_READ
public int Ldap_RS_ON
public int Ldap_RS_NEW_REPLICA
public int Ldap_RS_DYING_REPLICA
public int Ldap_RS_LOCKED
public int Ldap_RS_TRANSITION_ON
public int Ldap_RS_DEAD_REPLICA
public int Ldap_RS_BEGIN_ADD
public int Ldap_RS_MASTER_START
public int Ldap_RS_MASTER_DONE
public int Ldap_RS_SS_0
public int Ldap_RS_SS_1
public int Ldap_RS_JS_0
public int Ldap_RS_JS_1
public int Ldap_RS_JS_2
public int Ldap_DS_FLAG_BUSY
public int Ldap_DS_FLAG_BOUNDARY
}
public Novell.Directory.Ldap.Extensions.PartitionEntryCountRequest : LdapExtendedOperation {
public void .ctor(string dn)
}
public Novell.Directory.Ldap.Extensions.PartitionEntryCountResponse : LdapExtendedResponse {
private int count
public int Count
public int get_Count()
public void .ctor(RfcLdapMessage rfcMessage)
}
public Novell.Directory.Ldap.Extensions.PartitionSyncRequest : LdapExtendedOperation {
public void .ctor(string serverName, string partitionRoot, int delay)
}
public Novell.Directory.Ldap.Extensions.ReceiveAllUpdatesRequest : LdapExtendedOperation {
public void .ctor(string partitionRoot, string toServerDN, string fromServerDN)
}
public Novell.Directory.Ldap.Extensions.RemoveOrphanPartitionRequest : LdapExtendedOperation {
public void .ctor(string serverDN, string contextName)
}
public Novell.Directory.Ldap.Extensions.RemoveReplicaRequest : LdapExtendedOperation {
public void .ctor(string dn, string serverDN, int flags)
}
public Novell.Directory.Ldap.Extensions.ReplicationConstants : object {
public string CREATE_NAMING_CONTEXT_REQ
public string CREATE_NAMING_CONTEXT_RES
public string MERGE_NAMING_CONTEXT_REQ
public string MERGE_NAMING_CONTEXT_RES
public string ADD_REPLICA_REQ
public string ADD_REPLICA_RES
public string REFRESH_SERVER_REQ
public string REFRESH_SERVER_RES
public string DELETE_REPLICA_REQ
public string DELETE_REPLICA_RES
public string NAMING_CONTEXT_COUNT_REQ
public string NAMING_CONTEXT_COUNT_RES
public string CHANGE_REPLICA_TYPE_REQ
public string CHANGE_REPLICA_TYPE_RES
public string GET_REPLICA_INFO_REQ
public string GET_REPLICA_INFO_RES
public string LIST_REPLICAS_REQ
public string LIST_REPLICAS_RES
public string RECEIVE_ALL_UPDATES_REQ
public string RECEIVE_ALL_UPDATES_RES
public string SEND_ALL_UPDATES_REQ
public string SEND_ALL_UPDATES_RES
public string NAMING_CONTEXT_SYNC_REQ
public string NAMING_CONTEXT_SYNC_RES
public string SCHEMA_SYNC_REQ
public string SCHEMA_SYNC_RES
public string ABORT_NAMING_CONTEXT_OP_REQ
public string ABORT_NAMING_CONTEXT_OP_RES
public string GET_IDENTITY_NAME_REQ
public string GET_IDENTITY_NAME_RES
public string GET_EFFECTIVE_PRIVILEGES_REQ
public string GET_EFFECTIVE_PRIVILEGES_RES
public string SET_REPLICATION_FILTER_REQ
public string SET_REPLICATION_FILTER_RES
public string GET_REPLICATION_FILTER_REQ
public string GET_REPLICATION_FILTER_RES
public string CREATE_ORPHAN_NAMING_CONTEXT_REQ
public string CREATE_ORPHAN_NAMING_CONTEXT_RES
public string REMOVE_ORPHAN_NAMING_CONTEXT_REQ
public string REMOVE_ORPHAN_NAMING_CONTEXT_RES
public string TRIGGER_BKLINKER_REQ
public string TRIGGER_BKLINKER_RES
public string TRIGGER_JANITOR_REQ
public string TRIGGER_JANITOR_RES
public string TRIGGER_LIMBER_REQ
public string TRIGGER_LIMBER_RES
public string TRIGGER_SKULKER_REQ
public string TRIGGER_SKULKER_RES
public string TRIGGER_SCHEMA_SYNC_REQ
public string TRIGGER_SCHEMA_SYNC_RES
public string TRIGGER_PART_PURGE_REQ
public string TRIGGER_PART_PURGE_RES
public int Ldap_ENSURE_SERVERS_UP
public int Ldap_RT_MASTER
public int Ldap_RT_SECONDARY
public int Ldap_RT_READONLY
public int Ldap_RT_SUBREF
public int Ldap_RT_SPARSE_WRITE
public int Ldap_RT_SPARSE_READ
public int Ldap_RS_ON
public int Ldap_RS_NEW_REPLICA
public int Ldap_RS_DYING_REPLICA
public int Ldap_RS_LOCKED
public int Ldap_RS_TRANSITION_ON
public int Ldap_RS_DEAD_REPLICA
public int Ldap_RS_BEGIN_ADD
public int Ldap_RS_MASTER_START
public int Ldap_RS_MASTER_DONE
public int Ldap_RS_SS_0
public int Ldap_RS_SS_1
public int Ldap_RS_JS_0
public int Ldap_RS_JS_1
public int Ldap_RS_JS_2
public int Ldap_DS_FLAG_BUSY
public int Ldap_DS_FLAG_BOUNDARY
}
public Novell.Directory.Ldap.Extensions.SchemaSyncRequest : LdapExtendedOperation {
public void .ctor(string serverName, int delay)
}
public Novell.Directory.Ldap.Extensions.SendAllUpdatesRequest : LdapExtendedOperation {
public void .ctor(string partitionRoot, string origServerDN)
}
public Novell.Directory.Ldap.Extensions.SetReplicationFilterRequest : LdapExtendedOperation {
public void .ctor(string serverDN, String[][] replicationFilter)
}
public Novell.Directory.Ldap.Extensions.SplitOrphanPartitionRequest : LdapExtendedOperation {
public void .ctor(string serverDN, string contextName)
}
public Novell.Directory.Ldap.Extensions.SplitPartitionRequest : LdapExtendedOperation {
public void .ctor(string dn, int flags)
}
public Novell.Directory.Ldap.Extensions.TriggerBackgroundProcessRequest : LdapExtendedOperation {
public int Ldap_BK_PROCESS_BKLINKER
public int Ldap_BK_PROCESS_JANITOR
public int Ldap_BK_PROCESS_LIMBER
public int Ldap_BK_PROCESS_SKULKER
public int Ldap_BK_PROCESS_SCHEMA_SYNC
public int Ldap_BK_PROCESS_PART_PURGE
public void .ctor(int processID)
}
public Novell.Directory.Ldap.InterThreadException : LdapException {
private Message request
internal int MessageID
internal int ReplyType
internal int get_MessageID()
internal int get_ReplyType()
internal void .ctor(string message, Object[] arguments, int resultCode, Exception rootException, Message request)
}
public Novell.Directory.Ldap.LdapAbandonRequest : LdapMessage {
public void .ctor(int id, LdapControl[] cont)
}
public Novell.Directory.Ldap.LdapAddRequest : LdapMessage {
public LdapEntry Entry
public LdapEntry get_Entry()
public void .ctor(LdapEntry entry, LdapControl[] cont)
private RfcAttributeList makeRfcAttrList(LdapEntry entry)
public string ToString()
}
public Novell.Directory.Ldap.LdapAttribute : object {
private string name
private string baseName
private String[] subTypes
private Object[] values
public IEnumerator ByteValues
public IEnumerator StringValues
public SByte[][] ByteValueArray
public String[] StringValueArray
public string StringValue
public SByte[] ByteValue
public string LangSubtype
public string Name
protected internal string Value
public IEnumerator get_ByteValues()
public IEnumerator get_StringValues()
public SByte[][] get_ByteValueArray()
public String[] get_StringValueArray()
public string get_StringValue()
public SByte[] get_ByteValue()
public string get_LangSubtype()
public string get_Name()
protected internal void set_Value(string value)
public void .ctor(LdapAttribute attr)
public void .ctor(string attrName)
public void .ctor(string attrName, SByte[] attrBytes)
public void .ctor(string attrName, string attrString)
public void .ctor(string attrName, String[] attrStrings)
public object Clone()
public void addValue(string attrString)
public void addValue(SByte[] attrBytes)
public void addBase64Value(string attrString)
public void addBase64Value(StringBuilder attrString, int start, int end)
public void addBase64Value(Char[] attrChars)
public void addURLValue(string url)
public void addURLValue(Uri url)
public string getBaseName()
public string getBaseName(string attrName)
public String[] getSubtypes()
public String[] getSubtypes(string attrName)
public bool hasSubtype(string subtype)
public bool hasSubtypes(String[] subtypes)
public void removeValue(string attrString)
public void removeValue(SByte[] attrBytes)
public int size()
public int CompareTo(object attribute)
private void add(SByte[] bytes)
private bool equals(SByte[] e1, SByte[] e2)
public string ToString()
}
public Novell.Directory.Ldap.LdapAttributeSchema : LdapSchemaElement {
private string syntaxString
private bool single
private string superior
private string equality
private string ordering
private string substring
private bool collective
private bool userMod
private int usage
public int USER_APPLICATIONS
public int DIRECTORY_OPERATION
public int DISTRIBUTED_OPERATION
public int DSA_OPERATION
public string SyntaxString
public string Superior
public bool SingleValued
public string EqualityMatchingRule
public string OrderingMatchingRule
public string SubstringMatchingRule
public bool Collective
public bool UserModifiable
public int Usage
private void InitBlock()
public string get_SyntaxString()
public string get_Superior()
public bool get_SingleValued()
public string get_EqualityMatchingRule()
public string get_OrderingMatchingRule()
public string get_SubstringMatchingRule()
public bool get_Collective()
public bool get_UserModifiable()
public int get_Usage()
public void .ctor(String[] names, string oid, string description, string syntaxString, bool single, string superior, bool obsolete, string equality, string ordering, string substring, bool collective, bool isUserModifiable, int usage)
public void .ctor(string raw)
protected internal string formatString()
}
public Novell.Directory.Ldap.LdapAttributeSet : AbstractSetSupport {
private Hashtable map
public int Count
public int get_Count()
public object Clone()
public LdapAttribute getAttribute(string attrName)
public LdapAttribute getAttribute(string attrName, string lang)
public LdapAttributeSet getSubset(string subtype)
public IEnumerator GetEnumerator()
public bool IsEmpty()
public bool Contains(object attr)
public bool Add(object attr)
public bool Remove(object object_Renamed)
public void Clear()
public bool AddAll(ICollection c)
public string ToString()
}
public Novell.Directory.Ldap.LdapAuthHandler {
public LdapAuthProvider getAuthProvider(string host, int port)
}
public Novell.Directory.Ldap.LdapAuthProvider : object {
private string dn
private SByte[] password
public string DN
public SByte[] Password
public string get_DN()
public SByte[] get_Password()
public void .ctor(string dn, SByte[] password)
}
public Novell.Directory.Ldap.LdapBindHandler {
public LdapConnection Bind(String[] ldapurl, LdapConnection conn)
}
public Novell.Directory.Ldap.LdapBindRequest : LdapMessage {
public string AuthenticationDN
public string get_AuthenticationDN()
public void .ctor(int version, string dn, SByte[] passwd, LdapControl[] cont)
public void .ctor(int version, string dn, string mechanism, SByte[] credentials, LdapControl[] cont)
public string ToString()
}
public Novell.Directory.Ldap.LdapCompareAttrNames : object {
private String[] sortByNames
private Boolean[] sortAscending
private CultureInfo location
private CompareInfo collator
public CultureInfo Locale
private void InitBlock()
public CultureInfo get_Locale()
public void set_Locale(CultureInfo value)
public void .ctor(string attrName)
public void .ctor(string attrName, bool ascendingFlag)
public void .ctor(String[] attrNames)
public void .ctor(String[] attrNames, Boolean[] ascendingFlags)
public int Compare(object object1, object object2)
public bool Equals(object comparator)
}
public Novell.Directory.Ldap.LdapCompareRequest : LdapMessage {
public string AttributeDescription
public SByte[] AssertionValue
public string DN
public string get_AttributeDescription()
public SByte[] get_AssertionValue()
public string get_DN()
public void .ctor(string dn, string name, SByte[] value_Renamed, LdapControl[] cont)
}
public Novell.Directory.Ldap.LdapConnection : object {
private LdapSearchConstraints defSearchCons
private LdapControl[] responseCtls
private object responseCtlSemaphore
private Connection conn
private object nameLock
private int lConnNum
private string name
public int SCOPE_BASE
public int SCOPE_ONE
public int SCOPE_SUB
public string NO_ATTRS
public string ALL_USER_ATTRS
public int Ldap_V3
public int DEFAULT_PORT
public int DEFAULT_SSL_PORT
public string Ldap_PROPERTY_SDK
public string Ldap_PROPERTY_PROTOCOL
public string Ldap_PROPERTY_SECURITY
public string SERVER_SHUTDOWN_OID
private string START_TLS_OID
public int ProtocolVersion
public string AuthenticationDN
public string AuthenticationMethod
public IDictionary SaslBindProperties
public object SaslBindCallbackHandler
public LdapConstraints Constraints
public string Host
public int Port
public LdapSearchConstraints SearchConstraints
public bool SecureSocketLayer
public bool Bound
public bool Connected
public bool TLS
public LdapControl[] ResponseControls
internal Connection Connection
internal string ConnectionName
private void InitBlock()
public int get_ProtocolVersion()
public string get_AuthenticationDN()
public string get_AuthenticationMethod()
public IDictionary get_SaslBindProperties()
public object get_SaslBindCallbackHandler()
public LdapConstraints get_Constraints()
public void set_Constraints(LdapConstraints value)
public string get_Host()
public int get_Port()
public LdapSearchConstraints get_SearchConstraints()
public bool get_SecureSocketLayer()
public void set_SecureSocketLayer(bool value)
public bool get_Bound()
public bool get_Connected()
public bool get_TLS()
public LdapControl[] get_ResponseControls()
internal Connection get_Connection()
internal string get_ConnectionName()
public void add_UserDefinedServerCertValidationDelegate(CertificateValidationCallback value)
public void remove_UserDefinedServerCertValidationDelegate(CertificateValidationCallback value)
public object Clone()
protected void Finalize()
public object getProperty(string name)
public void AddUnsolicitedNotificationListener(LdapUnsolicitedNotificationListener listener)
public void RemoveUnsolicitedNotificationListener(LdapUnsolicitedNotificationListener listener)
public void startTLS()
public void stopTLS()
public void Abandon(LdapSearchResults results)
public void Abandon(LdapSearchResults results, LdapConstraints cons)
public void Abandon(int id)
public void Abandon(int id, LdapConstraints cons)
public void Abandon(LdapMessageQueue queue)
public void Abandon(LdapMessageQueue queue, LdapConstraints cons)
public void Add(LdapEntry entry)
public void Add(LdapEntry entry, LdapConstraints cons)
public LdapResponseQueue Add(LdapEntry entry, LdapResponseQueue queue)
public LdapResponseQueue Add(LdapEntry entry, LdapResponseQueue queue, LdapConstraints cons)
public void Bind(string dn, string passwd)
public void Bind(string dn, string passwd, AuthenticationTypes authenticationTypes)
public void Bind(int version, string dn, string passwd)
public void Bind(string dn, string passwd, LdapConstraints cons)
public void Bind(int version, string dn, string passwd, LdapConstraints cons)
public void Bind(int version, string dn, SByte[] passwd)
public void Bind(int version, string dn, SByte[] passwd, LdapConstraints cons)
public LdapResponseQueue Bind(int version, string dn, SByte[] passwd, LdapResponseQueue queue)
public LdapResponseQueue Bind(int version, string dn, SByte[] passwd, LdapResponseQueue queue, LdapConstraints cons, string mech)
public bool Compare(string dn, LdapAttribute attr)
public bool Compare(string dn, LdapAttribute attr, LdapConstraints cons)
public LdapResponseQueue Compare(string dn, LdapAttribute attr, LdapResponseQueue queue)
public LdapResponseQueue Compare(string dn, LdapAttribute attr, LdapResponseQueue queue, LdapConstraints cons)
public void Connect(string host, int port)
public void Delete(string dn)
public void Delete(string dn, LdapConstraints cons)
public LdapResponseQueue Delete(string dn, LdapResponseQueue queue)
public LdapResponseQueue Delete(string dn, LdapResponseQueue queue, LdapConstraints cons)
public void Disconnect()
public void Disconnect(LdapConstraints cons)
private void Disconnect(LdapConstraints cons, bool how)
public LdapExtendedResponse ExtendedOperation(LdapExtendedOperation op)
public LdapExtendedResponse ExtendedOperation(LdapExtendedOperation op, LdapConstraints cons)
public LdapResponseQueue ExtendedOperation(LdapExtendedOperation op, LdapResponseQueue queue)
public LdapResponseQueue ExtendedOperation(LdapExtendedOperation op, LdapConstraints cons, LdapResponseQueue queue)
protected internal LdapMessage MakeExtendedOperation(LdapExtendedOperation op, LdapConstraints cons)
public void Modify(string dn, LdapModification mod)
public void Modify(string dn, LdapModification mod, LdapConstraints cons)
public void Modify(string dn, LdapModification[] mods)
public void Modify(string dn, LdapModification[] mods, LdapConstraints cons)
public LdapResponseQueue Modify(string dn, LdapModification mod, LdapResponseQueue queue)
public LdapResponseQueue Modify(string dn, LdapModification mod, LdapResponseQueue queue, LdapConstraints cons)
public LdapResponseQueue Modify(string dn, LdapModification[] mods, LdapResponseQueue queue)
public LdapResponseQueue Modify(string dn, LdapModification[] mods, LdapResponseQueue queue, LdapConstraints cons)
public LdapEntry Read(string dn)
public LdapEntry Read(string dn, LdapSearchConstraints cons)
public LdapEntry Read(string dn, String[] attrs)
public LdapEntry Read(string dn, String[] attrs, LdapSearchConstraints cons)
public LdapEntry Read(LdapUrl toGet)
public LdapEntry Read(LdapUrl toGet, LdapSearchConstraints cons)
public void Rename(string dn, string newRdn, bool deleteOldRdn)
public void Rename(string dn, string newRdn, bool deleteOldRdn, LdapConstraints cons)
public void Rename(string dn, string newRdn, string newParentdn, bool deleteOldRdn)
public void Rename(string dn, string newRdn, string newParentdn, bool deleteOldRdn, LdapConstraints cons)
public LdapResponseQueue Rename(string dn, string newRdn, bool deleteOldRdn, LdapResponseQueue queue)
public LdapResponseQueue Rename(string dn, string newRdn, bool deleteOldRdn, LdapResponseQueue queue, LdapConstraints cons)
public LdapResponseQueue Rename(string dn, string newRdn, string newParentdn, bool deleteOldRdn, LdapResponseQueue queue)
public LdapResponseQueue Rename(string dn, string newRdn, string newParentdn, bool deleteOldRdn, LdapResponseQueue queue, LdapConstraints cons)
public LdapSearchResults Search(string base_Renamed, int scope, string filter, String[] attrs, bool typesOnly)
public LdapSearchResults Search(string base_Renamed, int scope, string filter, String[] attrs, bool typesOnly, LdapSearchConstraints cons)
public LdapSearchQueue Search(string base_Renamed, int scope, string filter, String[] attrs, bool typesOnly, LdapSearchQueue queue)
public LdapSearchQueue Search(string base_Renamed, int scope, string filter, String[] attrs, bool typesOnly, LdapSearchQueue queue, LdapSearchConstraints cons)
public LdapSearchResults Search(LdapUrl toGet)
public LdapSearchResults Search(LdapUrl toGet, LdapSearchConstraints cons)
public LdapMessageQueue SendRequest(LdapMessage request, LdapMessageQueue queue)
public LdapMessageQueue SendRequest(LdapMessage request, LdapMessageQueue queue, LdapConstraints cons)
private LdapResponseQueue SendRequestToServer(LdapMessage msg, int timeout, LdapResponseQueue queue, BindProperties bindProps)
private ReferralInfo getReferralConnection(String[] referrals)
private void chkResultCode(LdapMessageQueue queue, LdapConstraints cons, LdapResponse response)
internal ArrayList chaseReferral(LdapMessageQueue queue, LdapConstraints cons, LdapMessage msg, String[] initialReferrals, int hopCount, bool searchReference, ArrayList connectionList)
private LdapMessage rebuildRequest(LdapMessage msg, LdapUrl url, bool reference)
internal void releaseReferralConnections(ArrayList list)
public LdapSchema FetchSchema(string schemaDN)
public string GetSchemaDN()
public string GetSchemaDN(string dn)
}
public Novell.Directory.Ldap.LdapConstraints : object {
private int msLimit
private int hopLimit
private bool doReferrals
private LdapReferralHandler refHandler
private LdapControl[] controls
private object nameLock
private int lConsNum
private string name
private Hashtable properties
public int HopLimit
internal Hashtable Properties
public bool ReferralFollowing
public int TimeLimit
public int get_HopLimit()
public void set_HopLimit(int value)
internal Hashtable get_Properties()
internal void set_Properties(Hashtable value)
public bool get_ReferralFollowing()
public void set_ReferralFollowing(bool value)
public int get_TimeLimit()
public void set_TimeLimit(int value)
public void .ctor(int msLimit, bool doReferrals, LdapReferralHandler handler, int hop_limit)
public LdapControl[] getControls()
public object getProperty(string name)
internal LdapReferralHandler getReferralHandler()
public void setControls(LdapControl control)
public void setControls(LdapControl[] controls)
public void setProperty(string name, object value_Renamed)
public void setReferralHandler(LdapReferralHandler handler)
public object Clone()
}
public Novell.Directory.Ldap.LdapControl : object {
private RespControlVector registeredControls
private RfcControl control
public string ID
public bool Critical
internal RespControlVector RegisteredControls
internal RfcControl Asn1Object
public string get_ID()
public bool get_Critical()
internal RespControlVector get_RegisteredControls()
internal RfcControl get_Asn1Object()
public void .ctor(string oid, bool critical, SByte[] values)
protected internal void .ctor(RfcControl control)
public object Clone()
public SByte[] getValue()
protected internal void setValue(SByte[] controlValue)
public void register(string oid, Type controlClass)
}
public Novell.Directory.Ldap.LdapDeleteRequest : LdapMessage {
public string DN
public string get_DN()
public void .ctor(string dn, LdapControl[] cont)
public string ToString()
}
public Novell.Directory.Ldap.LdapDITContentRuleSchema : LdapSchemaElement {
private String[] auxiliary
private String[] required
private String[] optional
private String[] precluded
public String[] AuxiliaryClasses
public String[] RequiredAttributes
public String[] OptionalAttributes
public String[] PrecludedAttributes
public String[] get_AuxiliaryClasses()
public String[] get_RequiredAttributes()
public String[] get_OptionalAttributes()
public String[] get_PrecludedAttributes()
public void .ctor(String[] names, string oid, string description, bool obsolete, String[] auxiliary, String[] required, String[] optional, String[] precluded)
public void .ctor(string raw)
protected internal string formatString()
}
public Novell.Directory.Ldap.LdapDITStructureRuleSchema : LdapSchemaElement {
private int ruleID
private string nameForm
private String[] superiorIDs
public int RuleID
public string NameForm
public String[] Superiors
public int get_RuleID()
public string get_NameForm()
public String[] get_Superiors()
public void .ctor(String[] names, int ruleID, string description, bool obsolete, string nameForm, String[] superiorIDs)
public void .ctor(string raw)
protected internal string formatString()
}
public Novell.Directory.Ldap.LdapDN : object {
public bool equals(string dn1, string dn2)
public string escapeRDN(string rdn)
public String[] explodeDN(string dn, bool noTypes)
public String[] explodeRDN(string rdn, bool noTypes)
public bool isValid(string dn)
public string normalize(string dn)
public string unescapeRDN(string rdn)
}
public Novell.Directory.Ldap.LdapDSConstants : ValueType {
public long LDAP_DS_ENTRY_BROWSE
public long LDAP_DS_ENTRY_ADD
public long LDAP_DS_ENTRY_DELETE
public long LDAP_DS_ENTRY_RENAME
public long LDAP_DS_ENTRY_SUPERVISOR
public long LDAP_DS_ENTRY_INHERIT_CTL
public long LDAP_DS_ATTR_COMPARE
public long LDAP_DS_ATTR_READ
public long LDAP_DS_ATTR_WRITE
public long LDAP_DS_ATTR_SELF
public long LDAP_DS_ATTR_SUPERVISOR
public long LDAP_DS_ATTR_INHERIT_CTL
public long LDAP_DS_DYNAMIC_ACL
public int LDAP_DS_ALIAS_ENTRY
public int LDAP_DS_PARTITION_ROOT
public int LDAP_DS_CONTAINER_ENTRY
public int LDAP_DS_CONTAINER_ALIAS
public int LDAP_DS_MATCHES_LIST_FILTER
public int LDAP_DS_REFERENCE_ENTRY
public int LDAP_DS_40X_REFERENCE_ENTRY
public int LDAP_DS_BACKLINKED
public int LDAP_DS_NEW_ENTRY
public int LDAP_DS_TEMPORARY_REFERENCE
public int LDAP_DS_AUDITED
public int LDAP_DS_ENTRY_NOT_PRESENT
public int LDAP_DS_ENTRY_VERIFY_CTS
public int LDAP_DS_ENTRY_DAMAGED
}
public Novell.Directory.Ldap.LdapEntry : object {
protected internal string dn
protected internal LdapAttributeSet attrs
public string DN
public string get_DN()
public void .ctor(string dn)
public void .ctor(string dn, LdapAttributeSet attrs)
public LdapAttribute getAttribute(string attrName)
public LdapAttributeSet getAttributeSet()
public LdapAttributeSet getAttributeSet(string subtype)
public int CompareTo(object entry)
public string ToString()
}
public Novell.Directory.Ldap.LdapException : Exception {
private int resultCode
private string messageOrKey
private Object[] arguments
private string matchedDN
private Exception rootException
private string serverMessage
public int SUCCESS
public int OPERATIONS_ERROR
public int PROTOCOL_ERROR
public int TIME_LIMIT_EXCEEDED
public int SIZE_LIMIT_EXCEEDED
public int COMPARE_FALSE
public int COMPARE_TRUE
public int AUTH_METHOD_NOT_SUPPORTED
public int STRONG_AUTH_REQUIRED
public int Ldap_PARTIAL_RESULTS
public int REFERRAL
public int ADMIN_LIMIT_EXCEEDED
public int UNAVAILABLE_CRITICAL_EXTENSION
public int CONFIDENTIALITY_REQUIRED
public int SASL_BIND_IN_PROGRESS
public int NO_SUCH_ATTRIBUTE
public int UNDEFINED_ATTRIBUTE_TYPE
public int INAPPROPRIATE_MATCHING
public int CONSTRAINT_VIOLATION
public int ATTRIBUTE_OR_VALUE_EXISTS
public int INVALID_ATTRIBUTE_SYNTAX
public int NO_SUCH_OBJECT
public int ALIAS_PROBLEM
public int INVALID_DN_SYNTAX
public int IS_LEAF
public int ALIAS_DEREFERENCING_PROBLEM
public int INAPPROPRIATE_AUTHENTICATION
public int INVALID_CREDENTIALS
public int INSUFFICIENT_ACCESS_RIGHTS
public int BUSY
public int UNAVAILABLE
public int UNWILLING_TO_PERFORM
public int LOOP_DETECT
public int NAMING_VIOLATION
public int OBJECT_CLASS_VIOLATION
public int NOT_ALLOWED_ON_NONLEAF
public int NOT_ALLOWED_ON_RDN
public int ENTRY_ALREADY_EXISTS
public int OBJECT_CLASS_MODS_PROHIBITED
public int AFFECTS_MULTIPLE_DSAS
public int OTHER
public int SERVER_DOWN
public int LOCAL_ERROR
public int ENCODING_ERROR
public int DECODING_ERROR
public int Ldap_TIMEOUT
public int AUTH_UNKNOWN
public int FILTER_ERROR
public int USER_CANCELLED
public int NO_MEMORY
public int CONNECT_ERROR
public int Ldap_NOT_SUPPORTED
public int CONTROL_NOT_FOUND
public int NO_RESULTS_RETURNED
public int MORE_RESULTS_TO_RETURN
public int CLIENT_LOOP
public int REFERRAL_LIMIT_EXCEEDED
public int INVALID_RESPONSE
public int AMBIGUOUS_RESPONSE
public int TLS_NOT_SUPPORTED
public int SSL_HANDSHAKE_FAILED
public int SSL_PROVIDER_NOT_FOUND
public string LdapErrorMessage
public Exception Cause
public int ResultCode
public string MatchedDN
public string Message
public string get_LdapErrorMessage()
public Exception get_Cause()
public int get_ResultCode()
public string get_MatchedDN()
public string get_Message()
public void .ctor(string messageOrKey, int resultCode, string serverMsg)
public void .ctor(string messageOrKey, Object[] arguments, int resultCode, string serverMsg)
public void .ctor(string messageOrKey, int resultCode, string serverMsg, Exception rootException)
public void .ctor(string messageOrKey, Object[] arguments, int resultCode, string serverMsg, Exception rootException)
public void .ctor(string messageOrKey, int resultCode, string serverMsg, string matchedDN)
public void .ctor(string messageOrKey, Object[] arguments, int resultCode, string serverMsg, string matchedDN)
internal void .ctor(string messageOrKey, Object[] arguments, int resultCode, string serverMsg, string matchedDN, Exception rootException)
public string resultCodeToString()
public string resultCodeToString(int code)
public string resultCodeToString(CultureInfo locale)
public string resultCodeToString(int code, CultureInfo locale)
public string ToString()
internal string getExceptionString(string exception)
}
public Novell.Directory.Ldap.LdapExtendedOperation : object {
private string oid
private SByte[] vals
public void .ctor(string oid, SByte[] vals)
public object Clone()
public string getID()
public SByte[] getValue()
protected internal void setValue(SByte[] newVals)
protected internal void setID(string newoid)
}
public Novell.Directory.Ldap.LdapExtendedRequest : LdapMessage {
public LdapExtendedOperation ExtendedOperation
public LdapExtendedOperation get_ExtendedOperation()
public void .ctor(LdapExtendedOperation op, LdapControl[] cont)
}
public Novell.Directory.Ldap.LdapExtendedResponse : LdapResponse {
private RespExtensionSet registeredResponses
public string ID
public RespExtensionSet RegisteredResponses
public SByte[] Value
public string get_ID()
public RespExtensionSet get_RegisteredResponses()
public SByte[] get_Value()
public void .ctor(RfcLdapMessage message)
public void register(string oid, Type extendedResponseClass)
}
public Novell.Directory.Ldap.LdapIntermediateResponse : LdapResponse {
private RespExtensionSet registeredResponses
public void register(string oid, Type extendedResponseClass)
public RespExtensionSet getRegisteredResponses()
public void .ctor(RfcLdapMessage message)
public string getID()
public SByte[] getValue()
}
public Novell.Directory.Ldap.LdapLocalException : LdapException {
public void .ctor(string messageOrKey, int resultCode)
public void .ctor(string messageOrKey, Object[] arguments, int resultCode)
public void .ctor(string messageOrKey, int resultCode, Exception rootException)
public void .ctor(string messageOrKey, Object[] arguments, int resultCode, Exception rootException)
public string ToString()
}
public Novell.Directory.Ldap.LdapMatchingRuleSchema : LdapSchemaElement {
private string syntaxString
private String[] attributes
public String[] Attributes
public string SyntaxString
public String[] get_Attributes()
public string get_SyntaxString()
public void .ctor(String[] names, string oid, string description, String[] attributes, bool obsolete, string syntaxString)
public void .ctor(string rawMatchingRule, string rawMatchingRuleUse)
protected internal string formatString()
}
public Novell.Directory.Ldap.LdapMatchingRuleUseSchema : LdapSchemaElement {
private String[] attributes
public String[] Attributes
public String[] get_Attributes()
public void .ctor(String[] names, string oid, string description, bool obsolete, String[] attributes)
public void .ctor(string raw)
protected internal string formatString()
}
public Novell.Directory.Ldap.LdapMessage : object {
public int BIND_REQUEST
public int BIND_RESPONSE
public int UNBIND_REQUEST
public int SEARCH_REQUEST
public int SEARCH_RESPONSE
public int SEARCH_RESULT
public int MODIFY_REQUEST
public int MODIFY_RESPONSE
public int ADD_REQUEST
public int ADD_RESPONSE
public int DEL_REQUEST
public int DEL_RESPONSE
public int MODIFY_RDN_REQUEST
public int MODIFY_RDN_RESPONSE
public int COMPARE_REQUEST
public int COMPARE_RESPONSE
public int ABANDON_REQUEST
public int SEARCH_RESULT_REFERENCE
public int EXTENDED_REQUEST
public int EXTENDED_RESPONSE
public int INTERMEDIATE_RESPONSE
protected internal RfcLdapMessage message
private int imsgNum
private int messageType
private string stringTag
internal LdapMessage RequestingMessage
public LdapControl[] Controls
public int MessageID
public int Type
public bool Request
internal RfcLdapMessage Asn1Object
private string Name
public string Tag
internal LdapMessage get_RequestingMessage()
public LdapControl[] get_Controls()
public int get_MessageID()
public int get_Type()
public bool get_Request()
internal RfcLdapMessage get_Asn1Object()
private string get_Name()
public string get_Tag()
public void set_Tag(string value)
internal void .ctor(int type, RfcRequest op, LdapControl[] controls)
protected internal void .ctor(RfcLdapMessage message)
internal LdapMessage Clone(string dn, string filter, bool reference)
private LdapControl controlFactory(string oid, bool critical, SByte[] value_Renamed)
public string ToString()
}
public Novell.Directory.Ldap.LdapMessageQueue : object {
internal MessageAgent agent
internal string name
internal object nameLock
internal int queueNum
internal string DebugName
internal MessageAgent MessageAgent
public Int32[] MessageIDs
internal string get_DebugName()
internal MessageAgent get_MessageAgent()
public Int32[] get_MessageIDs()
internal void .ctor(string myname, MessageAgent agent)
public LdapMessage getResponse()
public LdapMessage getResponse(int msgid)
private LdapMessage getResponse(Integer32 msgid)
public bool isResponseReceived()
public bool isResponseReceived(int msgid)
public bool isComplete(int msgid)
}
public Novell.Directory.Ldap.LdapModification : object {
private int op
private LdapAttribute attr
public int ADD
public int DELETE
public int REPLACE
public LdapAttribute Attribute
public int Op
public LdapAttribute get_Attribute()
public int get_Op()
public void .ctor(int op, LdapAttribute attr)
}
public Novell.Directory.Ldap.LdapModifyDNRequest : LdapMessage {
public string DN
public string NewRDN
public bool DeleteOldRDN
public string ParentDN
public string get_DN()
public string get_NewRDN()
public bool get_DeleteOldRDN()
public string get_ParentDN()
public void .ctor(string dn, string newRdn, string newParentdn, bool deleteOldRdn, LdapControl[] cont)
public string ToString()
}
public Novell.Directory.Ldap.LdapModifyRequest : LdapMessage {
public string DN
public LdapModification[] Modifications
public string get_DN()
public LdapModification[] get_Modifications()
public void .ctor(string dn, LdapModification[] mods, LdapControl[] cont)
private Asn1SequenceOf encodeModifications(LdapModification[] mods)
public string ToString()
}
public Novell.Directory.Ldap.LdapNameFormSchema : LdapSchemaElement {
private string objectClass
private String[] required
private String[] optional
public string ObjectClass
public String[] RequiredNamingAttributes
public String[] OptionalNamingAttributes
public string get_ObjectClass()
public String[] get_RequiredNamingAttributes()
public String[] get_OptionalNamingAttributes()
public void .ctor(String[] names, string oid, string description, bool obsolete, string objectClass, String[] required, String[] optional)
public void .ctor(string raw)
protected internal string formatString()
}
public Novell.Directory.Ldap.LdapObjectClassSchema : LdapSchemaElement {
internal String[] superiors
internal String[] required
internal String[] optional
internal int type
public int ABSTRACT
public int STRUCTURAL
public int AUXILIARY
public String[] Superiors
public String[] RequiredAttributes
public String[] OptionalAttributes
public int Type
public String[] get_Superiors()
public String[] get_RequiredAttributes()
public String[] get_OptionalAttributes()
public int get_Type()
public void .ctor(String[] names, string oid, String[] superiors, string description, String[] required, String[] optional, int type, bool obsolete)
public void .ctor(string raw)
protected internal string formatString()
}
public Novell.Directory.Ldap.LdapReferralException : LdapException {
private string failedReferral
private String[] referrals
public string FailedReferral
public string get_FailedReferral()
public void set_FailedReferral(string value)
public void .ctor(string message)
public void .ctor(string message, Object[] arguments)
public void .ctor(string message, Exception rootException)
public void .ctor(string message, Object[] arguments, Exception rootException)
public void .ctor(string message, int resultCode, string serverMessage)
public void .ctor(string message, Object[] arguments, int resultCode, string serverMessage)
public void .ctor(string message, int resultCode, string serverMessage, Exception rootException)
public void .ctor(string message, Object[] arguments, int resultCode, string serverMessage, Exception rootException)
public String[] getReferrals()
internal void setReferrals(String[] urls)
public string ToString()
}
public Novell.Directory.Ldap.LdapResponse : LdapMessage {
private InterThreadException exception
private ReferralInfo activeReferral
public string ErrorMessage
public string MatchedDN
public String[] Referrals
public int ResultCode
internal LdapException ResultException
public LdapControl[] Controls
public int MessageID
public int Type
internal LdapException Exception
internal ReferralInfo ActiveReferral
public string get_ErrorMessage()
public string get_MatchedDN()
public String[] get_Referrals()
public int get_ResultCode()
internal LdapException get_ResultException()
public LdapControl[] get_Controls()
public int get_MessageID()
public int get_Type()
internal LdapException get_Exception()
internal ReferralInfo get_ActiveReferral()
public void .ctor(InterThreadException ex, ReferralInfo activeReferral)
internal void .ctor(RfcLdapMessage message)
public void .ctor(int type)
public void .ctor(int type, int resultCode, string matchedDN, string serverMessage, String[] referrals, LdapControl[] controls)
private Asn1Sequence RfcResultFactory(int type, int resultCode, string matchedDN, string serverMessage, String[] referrals)
internal void chkResultCode()
internal bool hasException()
}
public Novell.Directory.Ldap.LdapResponseQueue : LdapMessageQueue {
internal void .ctor(MessageAgent agent)
public void merge(LdapMessageQueue queue2)
}
public Novell.Directory.Ldap.LdapSchema : LdapEntry {
private Hashtable[] idTable
private Hashtable[] nameTable
internal String[] schemaTypeNames
internal int ATTRIBUTE
internal int OBJECT_CLASS
internal int SYNTAX
internal int NAME_FORM
internal int DITCONTENT
internal int DITSTRUCTURE
internal int MATCHING
internal int MATCHING_USE
public IEnumerator AttributeSchemas
public IEnumerator DITContentRuleSchemas
public IEnumerator DITStructureRuleSchemas
public IEnumerator MatchingRuleSchemas
public IEnumerator MatchingRuleUseSchemas
public IEnumerator NameFormSchemas
public IEnumerator ObjectClassSchemas
public IEnumerator SyntaxSchemas
public IEnumerator AttributeNames
public IEnumerator DITContentRuleNames
public IEnumerator DITStructureRuleNames
public IEnumerator MatchingRuleNames
public IEnumerator MatchingRuleUseNames
public IEnumerator NameFormNames
public IEnumerator ObjectClassNames
private void InitBlock()
public IEnumerator get_AttributeSchemas()
public IEnumerator get_DITContentRuleSchemas()
public IEnumerator get_DITStructureRuleSchemas()
public IEnumerator get_MatchingRuleSchemas()
public IEnumerator get_MatchingRuleUseSchemas()
public IEnumerator get_NameFormSchemas()
public IEnumerator get_ObjectClassSchemas()
public IEnumerator get_SyntaxSchemas()
public IEnumerator get_AttributeNames()
public IEnumerator get_DITContentRuleNames()
public IEnumerator get_DITStructureRuleNames()
public IEnumerator get_MatchingRuleNames()
public IEnumerator get_MatchingRuleUseNames()
public IEnumerator get_NameFormNames()
public IEnumerator get_ObjectClassNames()
public void .ctor(LdapEntry ent)
private void addElement(int schemaType, LdapSchemaElement element)
private LdapSchemaElement getSchemaElement(int schemaType, string key)
public LdapAttributeSchema getAttributeSchema(string name)
public LdapDITContentRuleSchema getDITContentRuleSchema(string name)
public LdapDITStructureRuleSchema getDITStructureRuleSchema(string name)
public LdapDITStructureRuleSchema getDITStructureRuleSchema(int ID)
public LdapMatchingRuleSchema getMatchingRuleSchema(string name)
public LdapMatchingRuleUseSchema getMatchingRuleUseSchema(string name)
public LdapNameFormSchema getNameFormSchema(string name)
public LdapObjectClassSchema getObjectClassSchema(string name)
public LdapSyntaxSchema getSyntaxSchema(string oid)
private int getType(LdapSchemaElement element)
}
public Novell.Directory.Ldap.LdapSchemaElement : LdapAttribute {
protected internal String[] names
protected internal string oid
protected internal string description
protected internal bool obsolete
protected internal String[] qualifier
protected internal Hashtable hashQualifier
public String[] Names
public string Description
public string ID
public IEnumerator QualifierNames
public bool Obsolete
private void InitBlock()
public String[] get_Names()
public string get_Description()
public string get_ID()
public IEnumerator get_QualifierNames()
public bool get_Obsolete()
protected internal void .ctor(string attrName)
public String[] getQualifier(string name)
public string ToString()
protected internal string formatString()
public void setQualifier(string name, String[] values)
public void addValue(string value_Renamed)
public void addValue(Byte[] value_Renamed)
public void removeValue(string value_Renamed)
public void removeValue(Byte[] value_Renamed)
}
public Novell.Directory.Ldap.LdapSearchConstraints : LdapConstraints {
private int dereference
private int serverTimeLimit
private int maxResults
private int batchSize
private object nameLock
private int lSConsNum
private string name
public int DEREF_NEVER
public int DEREF_SEARCHING
public int DEREF_FINDING
public int DEREF_ALWAYS
public int BatchSize
public int Dereference
public int MaxResults
public int ServerTimeLimit
private void InitBlock()
public int get_BatchSize()
public void set_BatchSize(int value)
public int get_Dereference()
public void set_Dereference(int value)
public int get_MaxResults()
public void set_MaxResults(int value)
public int get_ServerTimeLimit()
public void set_ServerTimeLimit(int value)
public void .ctor(LdapConstraints cons)
public void .ctor(int msLimit, int serverTimeLimit, int dereference, int maxResults, bool doReferrals, int batchSize, LdapReferralHandler handler, int hop_limit)
}
public Novell.Directory.Ldap.LdapSearchQueue : LdapMessageQueue {
internal void .ctor(MessageAgent agent)
public void merge(LdapMessageQueue queue2)
}
public Novell.Directory.Ldap.LdapSearchRequest : LdapMessage {
public int AND
public int OR
public int NOT
public int EQUALITY_MATCH
public int SUBSTRINGS
public int GREATER_OR_EQUAL
public int LESS_OR_EQUAL
public int PRESENT
public int APPROX_MATCH
public int EXTENSIBLE_MATCH
public int INITIAL
public int ANY
public int FINAL
public string DN
public int Scope
public int Dereference
public int MaxResults
public int ServerTimeLimit
public bool TypesOnly
public String[] Attributes
public string StringFilter
private RfcFilter RfcFilter
public IEnumerator SearchFilter
public string get_DN()
public int get_Scope()
public int get_Dereference()
public int get_MaxResults()
public int get_ServerTimeLimit()
public bool get_TypesOnly()
public String[] get_Attributes()
public string get_StringFilter()
private RfcFilter get_RfcFilter()
public IEnumerator get_SearchFilter()
public void .ctor(string base_Renamed, int scope, string filter, String[] attrs, int dereference, int maxResults, int serverTimeLimit, bool typesOnly, LdapControl[] cont)
public void .ctor(string base_Renamed, int scope, RfcFilter filter, String[] attrs, int dereference, int maxResults, int serverTimeLimit, bool typesOnly, LdapControl[] cont)
}
public Novell.Directory.Ldap.LdapSearchResult : LdapMessage {
private LdapEntry entry
public LdapEntry Entry
public LdapEntry get_Entry()
internal void .ctor(RfcLdapMessage message)
public void .ctor(LdapEntry entry, LdapControl[] cont)
public string ToString()
}
public Novell.Directory.Ldap.LdapSearchResultReference : LdapMessage {
private String[] srefs
private object nameLock
private int refNum
private string name
public String[] Referrals
public String[] get_Referrals()
internal void .ctor(RfcLdapMessage message)
}
public Novell.Directory.Ldap.LdapSearchResults : object {
private ArrayList entries
private int entryCount
private int entryIndex
private ArrayList references
private int referenceCount
private int referenceIndex
private int batchSize
private bool completed
private LdapControl[] controls
private LdapSearchQueue queue
private object nameLock
private int resultsNum
private string name
private LdapConnection conn
private LdapSearchConstraints cons
private ArrayList referralConn
public int Count
public LdapControl[] ResponseControls
private bool BatchOfResults
public int get_Count()
public LdapControl[] get_ResponseControls()
private bool get_BatchOfResults()
internal void .ctor(LdapConnection conn, LdapSearchQueue queue, LdapSearchConstraints cons)
public bool hasMore()
private void resetVectors()
public LdapEntry next()
internal void Abandon()
}
public Novell.Directory.Ldap.LdapSyntaxSchema : LdapSchemaElement {
public void .ctor(string oid, string description)
public void .ctor(string raw)
protected internal string formatString()
}
public Novell.Directory.Ldap.LdapUnbindRequest : LdapMessage {
public void .ctor(LdapControl[] cont)
}
public Novell.Directory.Ldap.LdapUnsolicitedNotificationListener {
public void messageReceived(LdapExtendedResponse msg)
}
public Novell.Directory.Ldap.LdapUrl : object {
private int DEFAULT_SCOPE
private bool secure
private bool ipV6
private string host
private int port
private string dn
private String[] attrs
private string filter
private int scope
private String[] extensions
public String[] AttributeArray
public IEnumerator Attributes
public String[] Extensions
public string Filter
public string Host
public int Port
public int Scope
public bool Secure
private void InitBlock()
public String[] get_AttributeArray()
public IEnumerator get_Attributes()
public String[] get_Extensions()
public string get_Filter()
public string get_Host()
public int get_Port()
public int get_Scope()
public bool get_Secure()
public void .ctor(string url)
public void .ctor(string host, int port, string dn)
public void .ctor(string host, int port, string dn, String[] attrNames, int scope, string filter, String[] extensions)
public void .ctor(string host, int port, string dn, String[] attrNames, int scope, string filter, String[] extensions, bool secure)
public object Clone()
public string decode(string URLEncoded)
public string encode(string toEncode)
public string getDN()
internal void setDN(string dn)
public string ToString()
private String[] parseList(string listStr, char delimiter, int listStart, int listEnd)
private void parseURL(string url)
}
internal Novell.Directory.Ldap.Message : object {
private LdapMessage msg
private Connection conn
private MessageAgent agent
private LdapMessageQueue queue
private int mslimit
private ThreadClass timer
private MessageVector replies
private int msgId
private bool acceptReplies
private bool waitForReply_Renamed_Field
private bool complete
private string name
private BindProperties bindprops
internal int Count
internal MessageAgent Agent
internal int MessageType
internal int MessageID
internal bool Complete
internal object Reply
internal LdapMessage Request
internal bool BindRequest
internal MessageAgent MessageAgent
private void InitBlock()
internal int get_Count()
internal void set_Agent(MessageAgent value)
internal bool hasReplies()
internal int get_MessageType()
internal int get_MessageID()
internal bool get_Complete()
internal object waitForReply()
internal object get_Reply()
internal bool acceptsReplies()
internal LdapMessage get_Request()
internal bool get_BindRequest()
internal MessageAgent get_MessageAgent()
internal void .ctor(LdapMessage msg, int mslimit, Connection conn, MessageAgent agent, LdapMessageQueue queue, BindProperties bindprops)
internal void sendMessage()
internal void Abandon(LdapConstraints cons, InterThreadException informUserEx)
private void cleanup()
protected void Finalize()
internal void putReply(RfcLdapMessage message)
internal void stopTimer()
private void sleepersAwake()
}
internal Novell.Directory.Ldap.MessageAgent : object {
private MessageVector messages
private int indexLastRead
private object nameLock
private int agentNum
private string name
internal Object[] MessageArray
internal Int32[] MessageIDs
internal string AgentName
internal int Count
private void InitBlock()
internal Object[] get_MessageArray()
internal Int32[] get_MessageIDs()
internal string get_AgentName()
internal int get_Count()
internal void merge(MessageAgent fromAgent)
internal void sleepersAwake(bool all)
internal bool isResponseReceived()
internal bool isResponseReceived(int msgId)
internal void Abandon(int msgId, LdapConstraints cons)
internal void AbandonAll()
internal bool isComplete(int msgid)
internal Message getMessage(int msgid)
internal void sendMessage(Connection conn, LdapMessage msg, int timeOut, LdapMessageQueue queue, BindProperties bindProps)
internal object getLdapMessage(int msgId)
internal object getLdapMessage(Integer32 msgId)
private void debugDisplayMessages()
}
internal Novell.Directory.Ldap.MessageVector : object {
private ArrayList _innerList
internal Object[] ObjectArray
public bool IsFixedSize
public bool IsReadOnly
public object Item
public int Count
public bool IsSynchronized
public object SyncRoot
internal Object[] get_ObjectArray()
internal void .ctor(int cap, int incr)
internal Message findMessageById(int msgId)
public Object[] ToArray()
public int Add(object value)
public void Clear()
public bool Contains(object value)
public int IndexOf(object value)
public void Insert(int index, object value)
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public void Remove(object value)
public void RemoveAt(int index)
public object get_Item(int index)
public void set_Item(int index, object value)
public void CopyTo(Array array, int index)
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
public IEnumerator GetEnumerator()
}
internal Novell.Directory.Ldap.Rfc2251.RfcAbandonRequest : RfcMessageID {
public void .ctor(int msgId)
public Asn1Identifier getIdentifier()
public RfcRequest dupRequest(string base_Renamed, string filter, bool reference)
public string getRequestDN()
}
public Novell.Directory.Ldap.Rfc2251.RfcAddRequest : Asn1Sequence {
public RfcAttributeList Attributes
public RfcAttributeList get_Attributes()
public void .ctor(RfcLdapDN entry, RfcAttributeList attributes)
internal void .ctor(Asn1Object[] origRequest, string base_Renamed)
public Asn1Identifier getIdentifier()
public RfcRequest dupRequest(string base_Renamed, string filter, bool request)
public string getRequestDN()
}
public Novell.Directory.Ldap.Rfc2251.RfcAddResponse : RfcLdapResult {
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void .ctor(Asn1Enumerated resultCode, RfcLdapDN matchedDN, RfcLdapString errorMessage, RfcReferral referral)
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcAssertionValue : Asn1OctetString {
public void .ctor(SByte[] value_Renamed)
}
public Novell.Directory.Ldap.Rfc2251.RfcAttributeDescription : RfcLdapString {
public void .ctor(string s)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
}
public Novell.Directory.Ldap.Rfc2251.RfcAttributeDescriptionList : Asn1SequenceOf {
public void .ctor(int size)
public void .ctor(String[] attrs)
}
public Novell.Directory.Ldap.Rfc2251.RfcAttributeList : Asn1SequenceOf {
public void .ctor(int size)
}
public Novell.Directory.Ldap.Rfc2251.RfcAttributeTypeAndValues : Asn1Sequence {
public void .ctor(RfcAttributeDescription type, Asn1SetOf vals)
}
public Novell.Directory.Ldap.Rfc2251.RfcAttributeValue : Asn1OctetString {
public void .ctor(string value_Renamed)
public void .ctor(SByte[] value_Renamed)
}
public Novell.Directory.Ldap.Rfc2251.RfcAttributeValueAssertion : Asn1Sequence {
public string AttributeDescription
public SByte[] AssertionValue
public string get_AttributeDescription()
public SByte[] get_AssertionValue()
public void .ctor(RfcAttributeDescription ad, RfcAssertionValue av)
}
public Novell.Directory.Ldap.Rfc2251.RfcAuthenticationChoice : Asn1Choice {
public void .ctor(Asn1Tagged choice)
public void .ctor(string mechanism, SByte[] credentials)
}
public Novell.Directory.Ldap.Rfc2251.RfcBindRequest : Asn1Sequence {
private Asn1Identifier ID
public Asn1Integer Version
public RfcLdapDN Name
public RfcAuthenticationChoice AuthenticationChoice
public Asn1Integer get_Version()
public void set_Version(Asn1Integer value)
public RfcLdapDN get_Name()
public void set_Name(RfcLdapDN value)
public RfcAuthenticationChoice get_AuthenticationChoice()
public void set_AuthenticationChoice(RfcAuthenticationChoice value)
public void .ctor(Asn1Integer version, RfcLdapDN name, RfcAuthenticationChoice auth)
public void .ctor(int version, string dn, string mechanism, SByte[] credentials)
internal void .ctor(Asn1Object[] origRequest, string base_Renamed)
public Asn1Identifier getIdentifier()
public RfcRequest dupRequest(string base_Renamed, string filter, bool request)
public string getRequestDN()
}
public Novell.Directory.Ldap.Rfc2251.RfcBindResponse : Asn1Sequence {
public Asn1OctetString ServerSaslCreds
public Asn1OctetString get_ServerSaslCreds()
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public Asn1Enumerated getResultCode()
public RfcLdapDN getMatchedDN()
public RfcLdapString getErrorMessage()
public RfcReferral getReferral()
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcCompareRequest : Asn1Sequence {
public RfcAttributeValueAssertion AttributeValueAssertion
public RfcAttributeValueAssertion get_AttributeValueAssertion()
public void .ctor(RfcLdapDN entry, RfcAttributeValueAssertion ava)
internal void .ctor(Asn1Object[] origRequest, string base_Renamed)
public Asn1Identifier getIdentifier()
public RfcRequest dupRequest(string base_Renamed, string filter, bool request)
public string getRequestDN()
}
public Novell.Directory.Ldap.Rfc2251.RfcCompareResponse : RfcLdapResult {
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void .ctor(Asn1Enumerated resultCode, RfcLdapDN matchedDN, RfcLdapString errorMessage, RfcReferral referral)
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcControl : Asn1Sequence {
public Asn1OctetString ControlType
public Asn1Boolean Criticality
public Asn1OctetString ControlValue
public Asn1OctetString get_ControlType()
public Asn1Boolean get_Criticality()
public Asn1OctetString get_ControlValue()
public void set_ControlValue(Asn1OctetString value)
public void .ctor(RfcLdapOID controlType)
public void .ctor(RfcLdapOID controlType, Asn1Boolean criticality)
public void .ctor(RfcLdapOID controlType, Asn1Boolean criticality, Asn1OctetString controlValue)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void .ctor(Asn1Sequence seqObj)
}
public Novell.Directory.Ldap.Rfc2251.RfcControls : Asn1SequenceOf {
public int CONTROLS
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void add(RfcControl control)
public void set_Renamed(int index, RfcControl control)
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcDelRequest : RfcLdapDN {
public void .ctor(string dn)
public void .ctor(SByte[] dn)
public Asn1Identifier getIdentifier()
public RfcRequest dupRequest(string base_Renamed, string filter, bool request)
public string getRequestDN()
}
public Novell.Directory.Ldap.Rfc2251.RfcDelResponse : RfcLdapResult {
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void .ctor(Asn1Enumerated resultCode, RfcLdapDN matchedDN, RfcLdapString errorMessage, RfcReferral referral)
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcExtendedRequest : Asn1Sequence {
public int REQUEST_NAME
public int REQUEST_VALUE
public void .ctor(RfcLdapOID requestName)
public void .ctor(RfcLdapOID requestName, Asn1OctetString requestValue)
public void .ctor(Asn1Object[] origRequest)
public Asn1Identifier getIdentifier()
public RfcRequest dupRequest(string base_Renamed, string filter, bool request)
public string getRequestDN()
}
public Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse : Asn1Sequence {
public int RESPONSE_NAME
public int RESPONSE
private int referralIndex
private int responseNameIndex
private int responseIndex
public RfcLdapOID ResponseName
public Asn1OctetString Response
public RfcLdapOID get_ResponseName()
public Asn1OctetString get_Response()
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public Asn1Enumerated getResultCode()
public RfcLdapDN getMatchedDN()
public RfcLdapString getErrorMessage()
public RfcReferral getReferral()
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcFilter : Asn1Choice {
public int AND
public int OR
public int NOT
public int EQUALITY_MATCH
public int SUBSTRINGS
public int GREATER_OR_EQUAL
public int LESS_OR_EQUAL
public int PRESENT
public int APPROX_MATCH
public int EXTENSIBLE_MATCH
public int INITIAL
public int ANY
public int FINAL
private FilterTokenizer ft
private Stack filterStack
private bool finalFound
public void .ctor(string filter)
private Asn1Tagged parse(string filterExpr)
private Asn1Tagged parseFilter()
private Asn1Tagged parseFilterComp()
private Asn1SetOf parseFilterList()
internal int hex2int(char c)
private SByte[] unescapeString(string string_Renamed)
private void addObject(Asn1Object current)
public void startSubstrings(string attrName)
public void addSubstring(int type, SByte[] value_Renamed)
public void endSubstrings()
public void addAttributeValueAssertion(int rfcType, string attrName, SByte[] value_Renamed)
public void addPresent(string attrName)
public void addExtensibleMatch(string matchingRule, string attrName, SByte[] value_Renamed, bool useDNMatching)
public void startNestedFilter(int rfcType)
public void endNestedFilter(int rfcType)
public IEnumerator getFilterIterator()
public string filterToString()
private void stringFilter(IEnumerator itr, StringBuilder filter)
private string byteString(SByte[] value_Renamed)
}
public Novell.Directory.Ldap.Rfc2251.RfcIntermediateResponse : Asn1Sequence {
public int TAG_RESPONSE_NAME
public int TAG_RESPONSE
private int m_referralIndex
private int m_responseNameIndex
private int m_responseValueIndex
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public Asn1Enumerated getResultCode()
public RfcLdapDN getMatchedDN()
public RfcLdapString getErrorMessage()
public RfcReferral getReferral()
public RfcLdapOID getResponseName()
public Asn1OctetString getResponse()
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcLdapDN : RfcLdapString {
public void .ctor(string s)
public void .ctor(SByte[] s)
}
public Novell.Directory.Ldap.Rfc2251.RfcLdapMessage : Asn1Sequence {
private Asn1Object op
private RfcControls controls
private LdapMessage requestMessage
public int MessageID
public int Type
public Asn1Object Response
public RfcControls Controls
public string RequestDN
public LdapMessage RequestingMessage
public int get_MessageID()
public int get_Type()
public Asn1Object get_Response()
public RfcControls get_Controls()
public string get_RequestDN()
public LdapMessage get_RequestingMessage()
public void set_RequestingMessage(LdapMessage value)
internal void .ctor(Asn1Object[] origContent, RfcRequest origRequest, string dn, string filter, bool reference)
public void .ctor(RfcRequest op)
public void .ctor(RfcRequest op, RfcControls controls)
public void .ctor(Asn1Sequence op)
public void .ctor(Asn1Sequence op, RfcControls controls)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public RfcRequest getRequest()
public bool isRequest()
public object dupMessage(string dn, string filter, bool reference)
}
public Novell.Directory.Ldap.Rfc2251.RfcLdapOID : Asn1OctetString {
public void .ctor(string s)
public void .ctor(SByte[] s)
}
public Novell.Directory.Ldap.Rfc2251.RfcLdapResult : Asn1Sequence {
public int REFERRAL
public void .ctor(Asn1Enumerated resultCode, RfcLdapDN matchedDN, RfcLdapString errorMessage)
public void .ctor(Asn1Enumerated resultCode, RfcLdapDN matchedDN, RfcLdapString errorMessage, RfcReferral referral)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public Asn1Enumerated getResultCode()
public RfcLdapDN getMatchedDN()
public RfcLdapString getErrorMessage()
public RfcReferral getReferral()
}
public Novell.Directory.Ldap.Rfc2251.RfcLdapString : Asn1OctetString {
public void .ctor(string s)
public void .ctor(SByte[] ba)
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
}
public Novell.Directory.Ldap.Rfc2251.RfcLdapSuperDN : Asn1Tagged {
private SByte[] content
public int TAG
protected Asn1Identifier ID
public void .ctor(string s)
public void .ctor(SByte[] ba)
public void encode(Asn1Encoder enc, Stream out_Renamed)
public SByte[] byteValue()
public string stringValue()
public string ToString()
}
public Novell.Directory.Ldap.Rfc2251.RfcMatchingRuleAssertion : Asn1Sequence {
public void .ctor(RfcAssertionValue matchValue)
public void .ctor(RfcMatchingRuleId matchingRule, RfcAttributeDescription type, RfcAssertionValue matchValue, Asn1Boolean dnAttributes)
}
public Novell.Directory.Ldap.Rfc2251.RfcMatchingRuleId : RfcLdapString {
public void .ctor(string s)
}
internal Novell.Directory.Ldap.Rfc2251.RfcMessageID : Asn1Integer {
private int messageID
private object lock_Renamed
private int MessageID
private int get_MessageID()
protected internal void .ctor(int i)
}
public Novell.Directory.Ldap.Rfc2251.RfcModifyDNRequest : Asn1Sequence {
public void .ctor(RfcLdapDN entry, RfcRelativeLdapDN newrdn, Asn1Boolean deleteoldrdn)
public void .ctor(RfcLdapDN entry, RfcRelativeLdapDN newrdn, Asn1Boolean deleteoldrdn, RfcLdapSuperDN newSuperior)
internal void .ctor(Asn1Object[] origRequest, string base_Renamed)
public Asn1Identifier getIdentifier()
public RfcRequest dupRequest(string base_Renamed, string filter, bool request)
public string getRequestDN()
}
public Novell.Directory.Ldap.Rfc2251.RfcModifyDNResponse : RfcLdapResult {
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void .ctor(Asn1Enumerated resultCode, RfcLdapDN matchedDN, RfcLdapString errorMessage, RfcReferral referral)
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcModifyRequest : Asn1Sequence {
public Asn1SequenceOf Modifications
public Asn1SequenceOf get_Modifications()
public void .ctor(RfcLdapDN object_Renamed, Asn1SequenceOf modification)
internal void .ctor(Asn1Object[] origRequest, string base_Renamed)
public Asn1Identifier getIdentifier()
public RfcRequest dupRequest(string base_Renamed, string filter, bool request)
public string getRequestDN()
}
public Novell.Directory.Ldap.Rfc2251.RfcModifyResponse : RfcLdapResult {
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void .ctor(Asn1Enumerated resultCode, RfcLdapDN matchedDN, RfcLdapString errorMessage, RfcReferral referral)
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcReferral : Asn1SequenceOf {
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
}
public Novell.Directory.Ldap.Rfc2251.RfcRelativeLdapDN : RfcLdapString {
public void .ctor(string s)
}
public Novell.Directory.Ldap.Rfc2251.RfcRequest {
public RfcRequest dupRequest(string base_Renamed, string filter, bool reference)
public string getRequestDN()
}
public Novell.Directory.Ldap.Rfc2251.RfcResponse {
public Asn1Enumerated getResultCode()
public RfcLdapDN getMatchedDN()
public RfcLdapString getErrorMessage()
public RfcReferral getReferral()
}
public Novell.Directory.Ldap.Rfc2251.RfcSaslCredentials : Asn1Sequence {
public void .ctor(RfcLdapString mechanism)
public void .ctor(RfcLdapString mechanism, Asn1OctetString credentials)
}
public Novell.Directory.Ldap.Rfc2251.RfcSearchRequest : Asn1Sequence {
public void .ctor(RfcLdapDN baseObject, Asn1Enumerated scope, Asn1Enumerated derefAliases, Asn1Integer sizeLimit, Asn1Integer timeLimit, Asn1Boolean typesOnly, RfcFilter filter, RfcAttributeDescriptionList attributes)
internal void .ctor(Asn1Object[] origRequest, string base_Renamed, string filter, bool request)
public Asn1Identifier getIdentifier()
public RfcRequest dupRequest(string base_Renamed, string filter, bool request)
public string getRequestDN()
}
public Novell.Directory.Ldap.Rfc2251.RfcSearchResultDone : RfcLdapResult {
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public void .ctor(Asn1Enumerated resultCode, RfcLdapDN matchedDN, RfcLdapString errorMessage, RfcReferral referral)
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcSearchResultEntry : Asn1Sequence {
public Asn1OctetString ObjectName
public Asn1Sequence Attributes
public Asn1OctetString get_ObjectName()
public Asn1Sequence get_Attributes()
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcSearchResultReference : Asn1SequenceOf {
public void .ctor(Asn1Decoder dec, Stream in_Renamed, int len)
public Asn1Identifier getIdentifier()
}
public Novell.Directory.Ldap.Rfc2251.RfcSubstringFilter : Asn1Sequence {
public void .ctor(RfcAttributeDescription type, Asn1SequenceOf substrings)
}
public Novell.Directory.Ldap.Rfc2251.RfcUnbindRequest : Asn1Null {
public Asn1Identifier getIdentifier()
public RfcRequest dupRequest(string base_Renamed, string filter, bool request)
public string getRequestDN()
}
public Novell.Directory.Ldap.Utilclass.ArrayEnumeration : object {
private object tempAuxObj
private Object[] eArray
private int index
public object Current
public bool MoveNext()
public void Reset()
public object get_Current()
public void .ctor(Object[] eArray)
public bool hasMoreElements()
public object nextElement()
}
public Novell.Directory.Ldap.Utilclass.AttributeQualifier : object {
internal string name
internal ArrayList values
public string Name
public String[] Values
public string get_Name()
public String[] get_Values()
public void .ctor(string name, String[] value_Renamed)
}
public Novell.Directory.Ldap.Utilclass.Base64 : object {
private Char[] emap
private SByte[] dmap
private SByte[][] lowerBoundMask
private sbyte continuationMask
private sbyte continuationResult
public string encode(string inputString)
public string encode(SByte[] inputBytes)
public SByte[] decode(string encodedString)
public SByte[] decode(Char[] encodedChars)
public SByte[] decode(StringBuilder encodedSBuf, int start, int end)
public bool isLDIFSafe(SByte[] bytes)
public bool isLDIFSafe(string str)
private int getByteCount(sbyte b)
public bool isValidUTF8(SByte[] array, bool isUCS2Only)
}
public Novell.Directory.Ldap.Utilclass.BindProperties : object {
private int version
private string dn
private string method
private bool anonymous
private Hashtable bindProperties
private object bindCallbackHandler
public int ProtocolVersion
public string AuthenticationDN
public string AuthenticationMethod
public Hashtable SaslBindProperties
public object SaslCallbackHandler
public bool Anonymous
public int get_ProtocolVersion()
public string get_AuthenticationDN()
public string get_AuthenticationMethod()
public Hashtable get_SaslBindProperties()
public object get_SaslCallbackHandler()
public bool get_Anonymous()
public void .ctor(int version, string dn, string method, bool anonymous, Hashtable bindProperties, object bindCallbackHandler)
}
public Novell.Directory.Ldap.Utilclass.CharacterTypes : Enum {
public sbyte value__
public CharacterTypes WHITESPACE
public CharacterTypes NUMERIC
public CharacterTypes ALPHABETIC
public CharacterTypes STRINGQUOTE
public CharacterTypes COMMENTCHAR
}
public Novell.Directory.Ldap.Utilclass.DN : object {
private int LOOK_FOR_RDN_ATTR_TYPE
private int ALPHA_ATTR_TYPE
private int OID_ATTR_TYPE
private int LOOK_FOR_RDN_VALUE
private int QUOTED_RDN_VALUE
private int HEX_RDN_VALUE
private int UNQUOTED_RDN_VALUE
private ArrayList rdnList
public ArrayList RDNs
public DN Parent
private void InitBlock()
public ArrayList get_RDNs()
public DN get_Parent()
public void .ctor(string dnString)
private bool isAlpha(char ch)
private bool isDigit(char ch)
private bool isHexDigit(char ch)
private bool needsEscape(char ch)
private char hexToChar(char hex1, char hex0)
public string ToString()
public ArrayList getrdnList()
public bool Equals(object toDN)
public bool Equals(DN toDN)
public String[] explodeDN(bool noTypes)
public int countRDNs()
public bool isDescendantOf(DN containerDN)
public void addRDN(RDN rdn)
public void addRDNToFront(RDN rdn)
public void addRDNToBack(RDN rdn)
}
public Novell.Directory.Ldap.Utilclass.EnumeratedIterator : object {
private object tempAuxObj
private IEnumerator i
public object Current
public bool MoveNext()
public void Reset()
public object get_Current()
public void .ctor(IEnumerator iterator)
public bool hasMoreElements()
public object nextElement()
}
public Novell.Directory.Ldap.Utilclass.ExceptionMessages : ResourceManager {
public string TOSTRING
public string SERVER_MSG
public string MATCHED_DN
public string FAILED_REFERRAL
public string REFERRAL_ITEM
public string CONNECTION_ERROR
public string CONNECTION_IMPOSSIBLE
public string CONNECTION_WAIT
public string CONNECTION_FINALIZED
public string CONNECTION_CLOSED
public string CONNECTION_READER
public string DUP_ERROR
public string REFERRAL_ERROR
public string REFERRAL_LOCAL
public string REFERENCE_ERROR
public string REFERRAL_SEND
public string REFERENCE_NOFOLLOW
public string REFERRAL_BIND
public string REFERRAL_BIND_MATCH
public string NO_DUP_REQUEST
public string SERVER_CONNECT_ERROR
public string NO_SUP_PROPERTY
public string ENTRY_PARAM_ERROR
public string DN_PARAM_ERROR
public string RDN_PARAM_ERROR
public string OP_PARAM_ERROR
public string PARAM_ERROR
public string DECODING_ERROR
public string ENCODING_ERROR
public string IO_EXCEPTION
public string INVALID_ESCAPE
public string SHORT_ESCAPE
public string INVALID_CHAR_IN_FILTER
public string INVALID_CHAR_IN_DESCR
public string INVALID_ESC_IN_DESCR
public string UNEXPECTED_END
public string MISSING_LEFT_PAREN
public string MISSING_RIGHT_PAREN
public string EXPECTING_RIGHT_PAREN
public string EXPECTING_LEFT_PAREN
public string NO_OPTION
public string INVALID_FILTER_COMPARISON
public string NO_MATCHING_RULE
public string NO_ATTRIBUTE_NAME
public string NO_DN_NOR_MATCHING_RULE
public string NOT_AN_ATTRIBUTE
public string UNEQUAL_LENGTHS
public string IMPROPER_REFERRAL
public string NOT_IMPLEMENTED
public string NO_MEMORY
public string SERVER_SHUTDOWN_REQ
public string INVALID_ADDRESS
public string UNKNOWN_RESULT
public string OUTSTANDING_OPERATIONS
public string WRONG_FACTORY
public string NO_TLS_FACTORY
public string NO_STARTTLS
public string STOPTLS_ERROR
public string MULTIPLE_SCHEMA
public string NO_SCHEMA
public string READ_MULTIPLE
public string CANNOT_BIND
public string SSL_PROVIDER_MISSING
internal Object[][] contents
public Object[][] getContents()
}
public Novell.Directory.Ldap.Utilclass.ExtResponseFactory : object {
public LdapExtendedResponse convertToExtendedResponse(RfcLdapMessage inResponse)
}
public Novell.Directory.Ldap.Utilclass.IntermediateResponseFactory : object {
public LdapIntermediateResponse convertToIntermediateResponse(RfcLdapMessage inResponse)
}
public Novell.Directory.Ldap.Utilclass.RDN : object {
private ArrayList types
private ArrayList values
private string rawValue
protected internal string RawValue
public string Type
public String[] Types
public string Value
public String[] Values
public bool Multivalued
protected internal string get_RawValue()
public string get_Type()
public String[] get_Types()
public string get_Value()
public String[] get_Values()
public bool get_Multivalued()
public void .ctor(string rdn)
public bool equals(RDN rdn)
private bool equalAttrType(string attr1, string attr2)
public void add(string attrType, string attrValue, string rawValue)
public string ToString()
public string toString(bool noTypes)
public String[] explodeRDN(bool noTypes)
}
public Novell.Directory.Ldap.Utilclass.ReferralInfo : object {
private LdapConnection conn
private LdapUrl referralUrl
private String[] referralList
public LdapUrl ReferralUrl
public LdapConnection ReferralConnection
public String[] ReferralList
public LdapUrl get_ReferralUrl()
public LdapConnection get_ReferralConnection()
public String[] get_ReferralList()
public void .ctor(LdapConnection lc, String[] refList, LdapUrl refUrl)
}
public Novell.Directory.Ldap.Utilclass.ResourcesHandler : object {
private ResourceManager defaultResultCodes
private ResourceManager defaultMessages
private string pkg
private CultureInfo defaultLocale
public string getMessage(string messageOrKey, Object[] arguments)
public string getMessage(string messageOrKey, Object[] arguments, CultureInfo locale)
public string getResultString(int code)
public string getResultString(int code, CultureInfo locale)
}
public Novell.Directory.Ldap.Utilclass.RespControlVector : ArrayList {
public void .ctor(int cap, int incr)
public void registerResponseControl(string oid, Type controlClass)
public Type findResponseControl(string searchOID)
}
public Novell.Directory.Ldap.Utilclass.RespExtensionSet : AbstractSetSupport {
private Hashtable map
public int Count
public int get_Count()
public void registerResponseExtension(string oid, Type extClass)
public IEnumerator GetEnumerator()
public Type findResponseExtension(string searchOID)
}
public Novell.Directory.Ldap.Utilclass.ResultCodeMessages : ResourceManager {
internal Object[][] contents
public Object[][] getContents()
}
public Novell.Directory.Ldap.Utilclass.SchemaParser : object {
internal string rawString
internal String[] names
internal string id
internal string description
internal string syntax
internal string superior
internal string nameForm
internal string objectClass
internal String[] superiors
internal String[] required
internal String[] optional
internal String[] auxiliary
internal String[] precluded
internal String[] applies
internal bool single
internal bool obsolete
internal string equality
internal string ordering
internal string substring
internal bool collective
internal bool userMod
internal int usage
internal int type
internal int result
internal ArrayList qualifiers
public string RawString
public String[] Names
public IEnumerator Qualifiers
public string ID
public string Description
public string Syntax
public string Superior
public bool Single
public bool Obsolete
public string Equality
public string Ordering
public string Substring
public bool Collective
public bool UserMod
public int Usage
public int Type
public String[] Superiors
public String[] Required
public String[] Optional
public String[] Auxiliary
public String[] Precluded
public String[] Applies
public string NameForm
public string ObjectClass
private void InitBlock()
public string get_RawString()
public void set_RawString(string value)
public String[] get_Names()
public IEnumerator get_Qualifiers()
public string get_ID()
public string get_Description()
public string get_Syntax()
public string get_Superior()
public bool get_Single()
public bool get_Obsolete()
public string get_Equality()
public string get_Ordering()
public string get_Substring()
public bool get_Collective()
public bool get_UserMod()
public int get_Usage()
public int get_Type()
public String[] get_Superiors()
public String[] get_Required()
public String[] get_Optional()
public String[] get_Auxiliary()
public String[] get_Precluded()
public String[] get_Applies()
public string get_NameForm()
public string get_ObjectClass()
public void .ctor(string aString)
private AttributeQualifier parseQualifier(SchemaTokenCreator st, string name)
}
public Novell.Directory.Ldap.Utilclass.SchemaTokenCreator : object {
private string basestring
private bool cppcomments
private bool ccomments
private bool iseolsig
private bool cidtolower
private bool pushedback
private int peekchar
private SByte[] ctype
private int linenumber
private int ichar
private Char[] buf
private StreamReader reader
private StringReader sreader
private Stream input
public string StringValue
public double NumberValue
public int lastttype
public int CurrentLine
private void Initialise()
public void .ctor(Stream instream)
public void .ctor(StreamReader r)
public void .ctor(StringReader r)
public void pushBack()
public int get_CurrentLine()
public string ToStringValue()
public void WordCharacters(int min, int max)
public void WhitespaceCharacters(int min, int max)
public void OrdinaryCharacters(int min, int max)
public void OrdinaryCharacter(int ch)
public void CommentCharacter(int ch)
public void InitTable()
public void QuoteCharacter(int ch)
public void parseNumbers()
private int read()
public int nextToken()
}
public Novell.Directory.Ldap.Utilclass.TokenTypes : Enum {
public int value__
public TokenTypes EOL
public TokenTypes EOF
public TokenTypes NUMBER
public TokenTypes WORD
public TokenTypes REAL
public TokenTypes STRING
}
public SupportClass : object {
public SByte[] ToSByteArray(Byte[] byteArray)
public Byte[] ToByteArray(SByte[] sbyteArray)
public Byte[] ToByteArray(string sourceString)
public Byte[] ToByteArray(Object[] tempObjectArray)
public int ReadInput(Stream sourceStream, SByte[]& target, int start, int count)
public int ReadInput(TextReader sourceTextReader, SByte[]& target, int start, int count)
public long Identity(long literal)
public ulong Identity(ulong literal)
public float Identity(float literal)
public double Identity(double literal)
public string FormatDateTime(DateTimeFormatInfo format, DateTime date)
public object PutElement(IDictionary collection, object key, object newValue)
public bool VectorRemoveElement(IList arrayList, object element)
public object HashtableRemove(Hashtable hashtable, object key)
public void SetSize(ArrayList arrayList, int newSize)
public object StackPush(Stack stack, object element)
public void GetCharsFromString(string sourceString, int sourceStart, int sourceEnd, Char[]& destinationArray, int destinationStart)
public FileStream GetFileStream(string FileName, bool Append)
public Char[] ToCharArray(SByte[] sByteArray)
public Char[] ToCharArray(Byte[] byteArray)
public object CreateNewInstance(Type classType)
public void WriteStackTrace(Exception throwable, TextWriter stream)
public bool EqualsSupport(ICollection source, ICollection target)
public bool EqualsSupport(ICollection source, object target)
public bool EqualsSupport(IDictionaryEnumerator source, object target)
public bool EqualsSupport(IDictionaryEnumerator source, IDictionaryEnumerator target)
public IEnumerator ReverseStack(ICollection collection)
}
