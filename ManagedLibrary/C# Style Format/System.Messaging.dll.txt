internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public System.Messaging.AccessControlEntry : object {
public AccessControlEntryType EntryType
public GenericAccessRights GenericAccessRights
public StandardAccessRights StandardAccessRights
public Trustee Trustee
protected int CustomAccessRights
public void .ctor(Trustee trustee)
public void .ctor(Trustee trustee, GenericAccessRights genericAccessRights, StandardAccessRights standardAccessRights, AccessControlEntryType entryType)
public AccessControlEntryType get_EntryType()
public void set_EntryType(AccessControlEntryType value)
public GenericAccessRights get_GenericAccessRights()
public void set_GenericAccessRights(GenericAccessRights value)
public StandardAccessRights get_StandardAccessRights()
public void set_StandardAccessRights(StandardAccessRights value)
public Trustee get_Trustee()
public void set_Trustee(Trustee value)
protected int get_CustomAccessRights()
protected void set_CustomAccessRights(int value)
}
public System.Messaging.AccessControlEntryType : Enum {
public int value__
public AccessControlEntryType Allow
public AccessControlEntryType Deny
public AccessControlEntryType Revoke
public AccessControlEntryType Set
}
public System.Messaging.AccessControlList : CollectionBase {
public int Add(AccessControlEntry entry)
public bool Contains(AccessControlEntry entry)
public void CopyTo(AccessControlEntry[] array, int index)
public int IndexOf(AccessControlEntry entry)
public void Insert(int index, AccessControlEntry entry)
public void Remove(AccessControlEntry entry)
}
public System.Messaging.AcknowledgeTypes : Enum {
public int value__
public AcknowledgeTypes FullReachQueue
public AcknowledgeTypes FullReceive
public AcknowledgeTypes NegativeReceive
public AcknowledgeTypes None
public AcknowledgeTypes NotAcknowledgeReachQueue
public AcknowledgeTypes NotAcknowledgeReceive
public AcknowledgeTypes PositiveArrival
public AcknowledgeTypes PositiveReceive
}
public System.Messaging.Acknowledgment : Enum {
public int value__
public Acknowledgment AccessDenied
public Acknowledgment BadDestinationQueue
public Acknowledgment BadEncryption
public Acknowledgment BadSignature
public Acknowledgment CouldNotEncrypt
public Acknowledgment HopCountExceeded
public Acknowledgment None
public Acknowledgment NotTransactionalMessage
public Acknowledgment NotTransactionalQueue
public Acknowledgment Purged
public Acknowledgment QueueDeleted
public Acknowledgment QueueExceedMaximumSize
public Acknowledgment QueuePurged
public Acknowledgment ReachQueue
public Acknowledgment ReachQueueTimeout
public Acknowledgment Receive
public Acknowledgment ReceiveTimeout
}
public System.Messaging.ActiveXMessageFormatter : object {
public bool CanRead(Message message)
public object Clone()
public void InitStreamedObject(object streamedObject)
public object Read(Message message)
public void Write(Message message, object obj)
}
public System.Messaging.BinaryMessageFormatter : object {
private BinaryFormatter _formatter
public FormatterAssemblyStyle TopObjectFormat
public FormatterTypeStyle TypeFormat
public void .ctor(FormatterAssemblyStyle topObjectFormat, FormatterTypeStyle typeFormat)
public FormatterAssemblyStyle get_TopObjectFormat()
public void set_TopObjectFormat(FormatterAssemblyStyle value)
public FormatterTypeStyle get_TypeFormat()
public void set_TypeFormat(FormatterTypeStyle value)
public bool CanRead(Message message)
public object Read(Message message)
public void Write(Message message, object obj)
public object Clone()
}
public System.Messaging.CryptographicProviderType : Enum {
public int value__
public CryptographicProviderType Dss
public CryptographicProviderType Fortezza
public CryptographicProviderType MicrosoftExchange
public CryptographicProviderType None
public CryptographicProviderType RsaFull
public CryptographicProviderType RsqSig
public CryptographicProviderType Ssl
public CryptographicProviderType SttAcq
public CryptographicProviderType SttBrnd
public CryptographicProviderType SttIss
public CryptographicProviderType SttMer
public CryptographicProviderType SttRoot
}
public System.Messaging.Cursor : object {
public void Close()
public void Dispose()
}
public System.Messaging.DefaultPropertiesToSend : object {
public AcknowledgeTypes AcknowledgeType
public MessageQueue AdministrationQueue
public int AppSpecific
public bool AttachSenderId
public EncryptionAlgorithm EncryptionAlgorithm
public Byte[] Extension
public HashAlgorithm HashAlgorithm
public string Label
public MessagePriority Priority
public bool Recoverable
public MessageQueue ResponseQueue
public TimeSpan TimeToBeReceived
public TimeSpan TimeToReachQueue
public MessageQueue TransactionStatusQueue
public bool UseAuthentication
public bool UseDeadLetterQueue
public bool UseEncryption
public bool UseJournalQueue
public bool UseTracing
public AcknowledgeTypes get_AcknowledgeType()
public void set_AcknowledgeType(AcknowledgeTypes value)
public MessageQueue get_AdministrationQueue()
public void set_AdministrationQueue(MessageQueue value)
public int get_AppSpecific()
public void set_AppSpecific(int value)
public bool get_AttachSenderId()
public void set_AttachSenderId(bool value)
public EncryptionAlgorithm get_EncryptionAlgorithm()
public void set_EncryptionAlgorithm(EncryptionAlgorithm value)
public Byte[] get_Extension()
public void set_Extension(Byte[] value)
public HashAlgorithm get_HashAlgorithm()
public void set_HashAlgorithm(HashAlgorithm value)
public string get_Label()
public void set_Label(string value)
public MessagePriority get_Priority()
public void set_Priority(MessagePriority value)
public bool get_Recoverable()
public void set_Recoverable(bool value)
public MessageQueue get_ResponseQueue()
public void set_ResponseQueue(MessageQueue value)
public TimeSpan get_TimeToBeReceived()
public void set_TimeToBeReceived(TimeSpan value)
public TimeSpan get_TimeToReachQueue()
public void set_TimeToReachQueue(TimeSpan value)
public MessageQueue get_TransactionStatusQueue()
public void set_TransactionStatusQueue(MessageQueue value)
public bool get_UseAuthentication()
public void set_UseAuthentication(bool value)
public bool get_UseDeadLetterQueue()
public void set_UseDeadLetterQueue(bool value)
public bool get_UseEncryption()
public void set_UseEncryption(bool value)
public bool get_UseJournalQueue()
public void set_UseJournalQueue(bool value)
public bool get_UseTracing()
public void set_UseTracing(bool value)
}
internal System.Messaging.Design.MessageFormatterConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
internal System.Messaging.Design.MessageQueueConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Messaging.Design.QueuePathDialog : Form {
public string Path
public void .ctor(IServiceProvider provider)
public void .ctor(IUIService uiService)
public void ChoosePath()
public void DoubleClicked(object source, EventArgs e)
public void SelectQueue(MessageQueue queue)
public string get_Path()
}
public System.Messaging.Design.QueuePathEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.Messaging.EncryptionAlgorithm : Enum {
public int value__
public EncryptionAlgorithm None
public EncryptionAlgorithm Rc2
public EncryptionAlgorithm Rc4
}
public System.Messaging.EncryptionRequired : Enum {
public int value__
public EncryptionRequired Body
public EncryptionRequired None
public EncryptionRequired Optional
}
internal System.Messaging.FormatterTypes : Enum {
public int value__
public FormatterTypes Xml
public FormatterTypes Binary
}
public System.Messaging.GenericAccessRights : Enum {
public int value__
public GenericAccessRights All
public GenericAccessRights Execute
public GenericAccessRights None
public GenericAccessRights Read
public GenericAccessRights Write
}
public System.Messaging.HashAlgorithm : Enum {
public int value__
public HashAlgorithm Mac
public HashAlgorithm Md2
public HashAlgorithm Md4
public HashAlgorithm Md5
public HashAlgorithm None
public HashAlgorithm Sha
public HashAlgorithm Sha256
public HashAlgorithm Sha384
public HashAlgorithm Sha512
}
public System.Messaging.IMessageFormatter {
public bool CanRead(Message message)
public object Read(Message message)
public void Write(Message message, object obj)
}
public System.Messaging.Message : Component {
private IMessage delegateMessage
private IMessageFormatter formatter
private object body
public TimeSpan InfiniteTimeout
public AcknowledgeTypes AcknowledgeType
public Acknowledgment Acknowledgment
public MessageQueue AdministrationQueue
public int AppSpecific
public DateTime ArrivedTime
public bool AttachSenderId
public bool Authenticated
public string AuthenticationProviderName
public CryptographicProviderType AuthenticationProviderType
public object Body
public Stream BodyStream
public int BodyType
public Guid ConnectorType
public string CorrelationId
public MessageQueue DestinationQueue
public Byte[] DestinationSymmetricKey
public Byte[] DigitalSignature
public EncryptionAlgorithm EncryptionAlgorithm
public Byte[] Extension
public IMessageFormatter Formatter
public HashAlgorithm HashAlgorithm
public string Id
public bool IsFirstInTransaction
public bool IsLastInTransaction
public string Label
public MessageType MessageType
public MessagePriority Priority
public bool Recoverable
public MessageQueue ResponseQueue
public Byte[] SenderCertificate
public Byte[] SenderId
public long SenderVersion
public DateTime SentTime
public string SourceMachine
public TimeSpan TimeToBeReceived
public TimeSpan TimeToReachQueue
public string TransactionId
public MessageQueue TransactionStatusQueue
public bool UseAuthentication
public bool UseDeadLetterQueue
public bool UseEncryption
public bool UseJournalQueue
public bool UseTracing
internal IMessage DelegateMessage
public long LookupId
public SecurityContext SecurityContext
public void .ctor(object body)
public void .ctor(object body, IMessageFormatter formatter)
internal void .ctor(IMessage delegateMessage, object body, IMessageFormatter formatter)
public AcknowledgeTypes get_AcknowledgeType()
public void set_AcknowledgeType(AcknowledgeTypes value)
public Acknowledgment get_Acknowledgment()
public MessageQueue get_AdministrationQueue()
public void set_AdministrationQueue(MessageQueue value)
public int get_AppSpecific()
public void set_AppSpecific(int value)
public DateTime get_ArrivedTime()
public bool get_AttachSenderId()
public void set_AttachSenderId(bool value)
public bool get_Authenticated()
public string get_AuthenticationProviderName()
public void set_AuthenticationProviderName(string value)
public CryptographicProviderType get_AuthenticationProviderType()
public void set_AuthenticationProviderType(CryptographicProviderType value)
public object get_Body()
public void set_Body(object value)
public Stream get_BodyStream()
public void set_BodyStream(Stream value)
public int get_BodyType()
public void set_BodyType(int value)
public Guid get_ConnectorType()
public void set_ConnectorType(Guid value)
public string get_CorrelationId()
public void set_CorrelationId(string value)
public MessageQueue get_DestinationQueue()
public Byte[] get_DestinationSymmetricKey()
public void set_DestinationSymmetricKey(Byte[] value)
public Byte[] get_DigitalSignature()
public void set_DigitalSignature(Byte[] value)
public EncryptionAlgorithm get_EncryptionAlgorithm()
public void set_EncryptionAlgorithm(EncryptionAlgorithm value)
public Byte[] get_Extension()
public void set_Extension(Byte[] value)
public IMessageFormatter get_Formatter()
public void set_Formatter(IMessageFormatter value)
public HashAlgorithm get_HashAlgorithm()
public void set_HashAlgorithm(HashAlgorithm value)
public string get_Id()
public bool get_IsFirstInTransaction()
public bool get_IsLastInTransaction()
public string get_Label()
public void set_Label(string value)
public MessageType get_MessageType()
public MessagePriority get_Priority()
public void set_Priority(MessagePriority value)
public bool get_Recoverable()
public void set_Recoverable(bool value)
public MessageQueue get_ResponseQueue()
public void set_ResponseQueue(MessageQueue value)
public Byte[] get_SenderCertificate()
public void set_SenderCertificate(Byte[] value)
public Byte[] get_SenderId()
public long get_SenderVersion()
public DateTime get_SentTime()
public string get_SourceMachine()
public TimeSpan get_TimeToBeReceived()
public void set_TimeToBeReceived(TimeSpan value)
public TimeSpan get_TimeToReachQueue()
public void set_TimeToReachQueue(TimeSpan value)
public string get_TransactionId()
public MessageQueue get_TransactionStatusQueue()
public void set_TransactionStatusQueue(MessageQueue value)
public bool get_UseAuthentication()
public void set_UseAuthentication(bool value)
public bool get_UseDeadLetterQueue()
public void set_UseDeadLetterQueue(bool value)
public bool get_UseEncryption()
public void set_UseEncryption(bool value)
public bool get_UseJournalQueue()
public void set_UseJournalQueue(bool value)
public bool get_UseTracing()
public void set_UseTracing(bool value)
internal IMessage get_DelegateMessage()
internal IMessage CreateMessage()
public long get_LookupId()
public SecurityContext get_SecurityContext()
public void set_SecurityContext(SecurityContext value)
}
public System.Messaging.MessageEnumerator : MarshalByRefObject {
private IMessageEnumerator delegateEnumerator
private IMessageFormatter formatter
public Message Current
private object System.Collections.IEnumerator.Current
public IntPtr CursorHandle
internal void .ctor(IMessageEnumerator delegateEnumerator, IMessageFormatter formatter)
public Message get_Current()
private object System.Collections.IEnumerator.get_Current()
public IntPtr get_CursorHandle()
public void Close()
public void Dispose()
protected void Dispose(bool disposing)
public bool MoveNext()
public bool MoveNext(TimeSpan timeout)
public Message RemoveCurrent()
public Message RemoveCurrent(MessageQueueTransaction transaction)
public Message RemoveCurrent(MessageQueueTransactionType transactionType)
public Message RemoveCurrent(TimeSpan timeout)
public Message RemoveCurrent(TimeSpan timeout, MessageQueueTransaction transaction)
public Message RemoveCurrent(TimeSpan timeout, MessageQueueTransactionType transactionType)
public void Reset()
protected void Finalize()
}
public System.Messaging.MessageLookupAction : Enum {
public int value__
public MessageLookupAction Current
public MessageLookupAction First
public MessageLookupAction Last
public MessageLookupAction Next
public MessageLookupAction Previous
}
public System.Messaging.MessagePriority : Enum {
public int value__
public MessagePriority AboveNormal
public MessagePriority High
public MessagePriority Highest
public MessagePriority Low
public MessagePriority Lowest
public MessagePriority Normal
public MessagePriority VeryHigh
public MessagePriority VeryLow
}
public System.Messaging.MessagePropertyFilter : object {
private bool acknowledgeType
private bool acknowledgment
private bool administrationQueue
private bool appSpecific
private bool arrivedTime
private bool attachSenderId
private bool authenticated
private bool authenticationProviderName
private bool authenticationProviderType
private bool body
private bool connectorType
private bool correlationId
private int defaultBodySize
private int defaultExtensionSize
private int defaultLabelSize
private bool destinationQueue
private bool destinationSymmetricKey
private bool digitalSignature
private bool encryptionAlgorithm
private bool extension
private bool hashAlgorithm
private bool id
private bool isFirstInTransaction
private bool isLastInTransaction
private bool label
private bool messageType
private bool priority
private bool recoverable
private bool responseQueue
private bool senderCertificate
private bool senderId
private bool senderVersion
private bool sentTime
private bool sourceMachine
private bool timeToBeReceived
private bool timeToReachQueue
private bool transactionId
private bool transactionStatusQueue
private bool useAuthentication
private bool useDeadLetterQueue
private bool useEncryption
private bool useJournalQueue
private bool useTracing
public bool AcknowledgeType
public bool Acknowledgment
public bool AdministrationQueue
public bool AppSpecific
public bool ArrivedTime
public bool AttachSenderId
public bool Authenticated
public bool AuthenticationProviderName
public bool AuthenticationProviderType
public bool Body
public bool ConnectorType
public bool CorrelationId
public int DefaultBodySize
public int DefaultExtensionSize
public int DefaultLabelSize
public bool DestinationQueue
public bool DestinationSymmetricKey
public bool DigitalSignature
public bool EncryptionAlgorithm
public bool Extension
public bool HashAlgorithm
public bool Id
public bool IsFirstInTransaction
public bool IsLastInTransaction
public bool Label
public bool MessageType
public bool Priority
public bool Recoverable
public bool ResponseQueue
public bool SenderCertificate
public bool SenderId
public bool SenderVersion
public bool SentTime
public bool SourceMachine
public bool TimeToBeReceived
public bool TimeToReachQueue
public bool TransactionId
public bool TransactionStatusQueue
public bool UseAuthentication
public bool UseDeadLetterQueue
public bool UseEncryption
public bool UseJournalQueue
public bool UseTracing
public bool LookupId
public bool get_AcknowledgeType()
public void set_AcknowledgeType(bool value)
public bool get_Acknowledgment()
public void set_Acknowledgment(bool value)
public bool get_AdministrationQueue()
public void set_AdministrationQueue(bool value)
public bool get_AppSpecific()
public void set_AppSpecific(bool value)
public bool get_ArrivedTime()
public void set_ArrivedTime(bool value)
public bool get_AttachSenderId()
public void set_AttachSenderId(bool value)
public bool get_Authenticated()
public void set_Authenticated(bool value)
public bool get_AuthenticationProviderName()
public void set_AuthenticationProviderName(bool value)
public bool get_AuthenticationProviderType()
public void set_AuthenticationProviderType(bool value)
public bool get_Body()
public void set_Body(bool value)
public bool get_ConnectorType()
public void set_ConnectorType(bool value)
public bool get_CorrelationId()
public void set_CorrelationId(bool value)
public int get_DefaultBodySize()
public void set_DefaultBodySize(int value)
public int get_DefaultExtensionSize()
public void set_DefaultExtensionSize(int value)
public int get_DefaultLabelSize()
public void set_DefaultLabelSize(int value)
public bool get_DestinationQueue()
public void set_DestinationQueue(bool value)
public bool get_DestinationSymmetricKey()
public void set_DestinationSymmetricKey(bool value)
public bool get_DigitalSignature()
public void set_DigitalSignature(bool value)
public bool get_EncryptionAlgorithm()
public void set_EncryptionAlgorithm(bool value)
public bool get_Extension()
public void set_Extension(bool value)
public bool get_HashAlgorithm()
public void set_HashAlgorithm(bool value)
public bool get_Id()
public void set_Id(bool value)
public bool get_IsFirstInTransaction()
public void set_IsFirstInTransaction(bool value)
public bool get_IsLastInTransaction()
public void set_IsLastInTransaction(bool value)
public bool get_Label()
public void set_Label(bool value)
public bool get_MessageType()
public void set_MessageType(bool value)
public bool get_Priority()
public void set_Priority(bool value)
public bool get_Recoverable()
public void set_Recoverable(bool value)
public bool get_ResponseQueue()
public void set_ResponseQueue(bool value)
public bool get_SenderCertificate()
public void set_SenderCertificate(bool value)
public bool get_SenderId()
public void set_SenderId(bool value)
public bool get_SenderVersion()
public void set_SenderVersion(bool value)
public bool get_SentTime()
public void set_SentTime(bool value)
public bool get_SourceMachine()
public void set_SourceMachine(bool value)
public bool get_TimeToBeReceived()
public void set_TimeToBeReceived(bool value)
public bool get_TimeToReachQueue()
public void set_TimeToReachQueue(bool value)
public bool get_TransactionId()
public void set_TransactionId(bool value)
public bool get_TransactionStatusQueue()
public void set_TransactionStatusQueue(bool value)
public bool get_UseAuthentication()
public void set_UseAuthentication(bool value)
public bool get_UseDeadLetterQueue()
public void set_UseDeadLetterQueue(bool value)
public bool get_UseEncryption()
public void set_UseEncryption(bool value)
public bool get_UseJournalQueue()
public void set_UseJournalQueue(bool value)
public bool get_UseTracing()
public void set_UseTracing(bool value)
public void ClearAll()
public void SetAll()
public void SetDefaults()
public bool get_LookupId()
public void set_LookupId(bool value)
public object Clone()
}
public System.Messaging.MessageQueue : Component {
public long InfiniteQueueSize
public TimeSpan InfiniteTimeout
private IMessageFormatter formatter
private MessagePropertyFilter messageReadPropertyFilter
private IMessageQueue delegateQueue
private PeekCompletedEventHandler PeekCompleted
private ReceiveCompletedEventHandler ReceiveCompleted
public bool Authenticate
public short BasePriority
public bool CanRead
public bool CanWrite
public Guid Category
public DateTime CreateTime
public DefaultPropertiesToSend DefaultPropertiesToSend
public bool DenySharedReceive
public bool EnableConnectionCache
public EncryptionRequired EncryptionRequired
public string FormatName
public IMessageFormatter Formatter
public Guid Id
public string Label
public DateTime LastModifyTime
public string MachineName
public long MaximumJournalSize
public long MaximumQueueSize
public MessagePropertyFilter MessageReadPropertyFilter
public string Path
public string QueueName
public IntPtr ReadHandle
public ISynchronizeInvoke SynchronizingObject
public bool Transactional
public bool UseJournalQueue
public IntPtr WriteHandle
internal IMessageQueue DelegateQueue
public QueueAccessMode AccessMode
public string MulticastAddress
public void .ctor(string path)
public void .ctor(string path, bool sharedModeDenyReceive)
public void .ctor(string path, QueueAccessMode accessMode)
internal void .ctor(IMessageQueue delegateQueue)
public bool get_Authenticate()
public void set_Authenticate(bool value)
public short get_BasePriority()
public void set_BasePriority(short value)
public bool get_CanRead()
public bool get_CanWrite()
public Guid get_Category()
public void set_Category(Guid value)
public DateTime get_CreateTime()
public DefaultPropertiesToSend get_DefaultPropertiesToSend()
public void set_DefaultPropertiesToSend(DefaultPropertiesToSend value)
public bool get_DenySharedReceive()
public void set_DenySharedReceive(bool value)
public bool get_EnableConnectionCache()
public void set_EnableConnectionCache(bool value)
public EncryptionRequired get_EncryptionRequired()
public void set_EncryptionRequired(EncryptionRequired value)
public string get_FormatName()
public IMessageFormatter get_Formatter()
public void set_Formatter(IMessageFormatter value)
public Guid get_Id()
public string get_Label()
public void set_Label(string value)
public DateTime get_LastModifyTime()
public string get_MachineName()
public void set_MachineName(string value)
public long get_MaximumJournalSize()
public void set_MaximumJournalSize(long value)
public long get_MaximumQueueSize()
public void set_MaximumQueueSize(long value)
public MessagePropertyFilter get_MessageReadPropertyFilter()
public void set_MessageReadPropertyFilter(MessagePropertyFilter value)
public string get_Path()
public void set_Path(string value)
public string get_QueueName()
public void set_QueueName(string value)
public IntPtr get_ReadHandle()
public ISynchronizeInvoke get_SynchronizingObject()
public void set_SynchronizingObject(ISynchronizeInvoke value)
public bool get_Transactional()
public bool get_UseJournalQueue()
public void set_UseJournalQueue(bool value)
public IntPtr get_WriteHandle()
internal IMessageQueue get_DelegateQueue()
public IAsyncResult BeginPeek()
public IAsyncResult BeginPeek(TimeSpan timeout)
public IAsyncResult BeginPeek(TimeSpan timeout, object stateObject)
public IAsyncResult BeginPeek(TimeSpan timeout, object stateObject, AsyncCallback callback)
public IAsyncResult BeginReceive()
public IAsyncResult BeginReceive(TimeSpan timeout)
public IAsyncResult BeginReceive(TimeSpan timeout, object stateObject)
public IAsyncResult BeginReceive(TimeSpan timeout, object stateObject, AsyncCallback callback)
public void ClearConnectionCache()
public void Close()
public MessageQueue Create(string path)
public MessageQueue Create(string path, bool transactional)
public void Delete(string path)
public Message EndPeek(IAsyncResult asyncResult)
public Message EndReceive(IAsyncResult asyncResult)
public bool Exists(string path)
public Message[] GetAllMessages()
public IEnumerator GetEnumerator()
public Guid GetMachineId(string machineName)
public MessageEnumerator GetMessageEnumerator()
public MessageQueueEnumerator GetMessageQueueEnumerator()
public MessageEnumerator GetMessageEnumerator2()
private ArrayList filteredQueueList(MessageQueueCriteria criteria)
public MessageQueueEnumerator GetMessageQueueEnumerator(MessageQueueCriteria criteria)
public MessageQueue[] GetPrivateQueuesByMachine(string machineName)
public MessageQueue[] GetPublicQueues()
public MessageQueue[] GetPublicQueues(MessageQueueCriteria criteria)
public MessageQueue[] GetPublicQueuesByCategory(Guid category)
public MessageQueue[] GetPublicQueuesByLabel(string label)
public MessageQueue[] GetPublicQueuesByMachine(string machineName)
public Message Peek()
public Message Peek(TimeSpan timeout)
public Message PeekByCorrelationId(string correlationId)
public Message PeekByCorrelationId(string correlationId, TimeSpan timeout)
public Message PeekById(string id)
public Message PeekById(string id, TimeSpan timeout)
public void Purge()
public Message Receive()
public Message Receive(MessageQueueTransaction transaction)
public Message Receive(MessageQueueTransactionType transactionType)
public Message Receive(TimeSpan timeout)
public Message Receive(TimeSpan timeout, MessageQueueTransaction transaction)
public Message Receive(TimeSpan timeout, MessageQueueTransactionType transactionType)
public Message ReceiveByCorrelationId(string correlationId)
public Message ReceiveByCorrelationId(string correlationId, MessageQueueTransaction transaction)
public Message ReceiveByCorrelationId(string correlationId, MessageQueueTransactionType transactionType)
public Message ReceiveByCorrelationId(string correlationId, TimeSpan timeout)
public Message ReceiveByCorrelationId(string correlationId, TimeSpan timeout, MessageQueueTransaction transaction)
public Message ReceiveByCorrelationId(string correlationId, TimeSpan timeout, MessageQueueTransactionType transactionType)
public Message ReceiveById(string id)
public Message ReceiveById(string id, MessageQueueTransaction transaction)
public Message ReceiveById(string id, MessageQueueTransactionType transactionType)
public Message ReceiveById(string id, TimeSpan timeout)
public Message ReceiveById(string id, TimeSpan timeout, MessageQueueTransaction transaction)
public Message ReceiveById(string id, TimeSpan timeout, MessageQueueTransactionType transactionType)
public void Refresh()
public void ResetPermissions()
public void Send(object obj)
public void Send(object obj, MessageQueueTransaction transaction)
public void Send(object obj, MessageQueueTransactionType transactionType)
public void Send(object obj, string label)
public void Send(object obj, string label, MessageQueueTransaction transaction)
public void Send(object obj, string label, MessageQueueTransactionType transactionType)
public void SetPermissions(AccessControlList dacl)
public void SetPermissions(MessageQueueAccessControlEntry ace)
public void SetPermissions(string user, MessageQueueAccessRights rights)
public void SetPermissions(string user, MessageQueueAccessRights rights, AccessControlEntryType entryType)
protected void Dispose(bool disposing)
public void add_PeekCompleted(PeekCompletedEventHandler value)
public void remove_PeekCompleted(PeekCompletedEventHandler value)
private void DelegatePeekCompleted(object sender, CompletedEventArgs args)
public void add_ReceiveCompleted(ReceiveCompletedEventHandler value)
public void remove_ReceiveCompleted(ReceiveCompletedEventHandler value)
private void DelegateReceiveCompleted(object sender, CompletedEventArgs args)
private IMessageQueue GetMessageQueue(string path)
private IMessageQueue GetMessageQueue()
private IMessageQueue CreateMessageQueue(QueueReference qRef, bool transactional)
private bool Exists(QueueReference qRef)
public void .ctor(string path, bool sharedModeDenyReceive, bool enableCache)
public void .ctor(string path, bool sharedModeDenyReceive, bool enableCache, QueueAccessMode accessMode)
public QueueAccessMode get_AccessMode()
public string get_MulticastAddress()
public void set_MulticastAddress(string value)
public IAsyncResult BeginPeek(TimeSpan timeout, Cursor cursor, PeekAction action, object state, AsyncCallback callback)
public IAsyncResult BeginReceive(TimeSpan timeout, Cursor cursor, object state, AsyncCallback callback)
public Cursor CreateCursor()
public SecurityContext GetSecurityContext()
public Message Peek(TimeSpan timeout, Cursor cursor, PeekAction action)
public Message PeekByLookupId(long lookupId)
public Message PeekByLookupId(MessageLookupAction action, long lookupId)
public Message Receive(TimeSpan timeout, Cursor cursor, MessageQueueTransaction transaction)
public Message Receive(TimeSpan timeout, Cursor cursor, MessageQueueTransactionType transactionType)
public Message ReceiveByLookupId(long lookupId)
public Message ReceiveByLookupId(MessageLookupAction action, long lookupId, MessageQueueTransaction transaction)
public Message ReceiveByLookupId(MessageLookupAction action, long lookupId, MessageQueueTransactionType transactionType)
}
public System.Messaging.MessageQueueAccessControlEntry : AccessControlEntry {
public MessageQueueAccessRights MessageQueueAccessRights
public void .ctor(Trustee trustee, MessageQueueAccessRights rights)
public void .ctor(Trustee trustee, MessageQueueAccessRights rights, AccessControlEntryType entryType)
public MessageQueueAccessRights get_MessageQueueAccessRights()
public void set_MessageQueueAccessRights(MessageQueueAccessRights value)
}
public System.Messaging.MessageQueueAccessRights : Enum {
public int value__
public MessageQueueAccessRights ChangeQueuePermissions
public MessageQueueAccessRights DeleteJournalMessage
public MessageQueueAccessRights DeleteMessage
public MessageQueueAccessRights DeleteQueue
public MessageQueueAccessRights FullControl
public MessageQueueAccessRights GenericRead
public MessageQueueAccessRights GenericWrite
public MessageQueueAccessRights GetQueuePermissions
public MessageQueueAccessRights GetQueueProperties
public MessageQueueAccessRights PeekMessage
public MessageQueueAccessRights ReceiveJournalMessage
public MessageQueueAccessRights ReceiveMessage
public MessageQueueAccessRights SetQueueProperties
public MessageQueueAccessRights TakeQueueOwnership
public MessageQueueAccessRights WriteMessage
}
public System.Messaging.MessageQueueCriteria : object {
private bool setCategory
private Guid category
private bool setCreatedAfter
private DateTime createdAfter
private bool setCreatedBefore
private DateTime createdBefore
private bool setLabel
private string label
private bool setMachineName
private string machineName
private bool setModifiedAfter
private DateTime modifiedAfter
private bool setModifiedBefore
private DateTime modifiedBefore
public Guid Category
public DateTime CreatedAfter
public DateTime CreatedBefore
public string Label
public string MachineName
public DateTime ModifiedAfter
public DateTime ModifiedBefore
public Guid get_Category()
public void set_Category(Guid value)
public DateTime get_CreatedAfter()
public void set_CreatedAfter(DateTime value)
public DateTime get_CreatedBefore()
public void set_CreatedBefore(DateTime value)
public string get_Label()
public void set_Label(string value)
private bool invalidMachineName(string name)
public string get_MachineName()
public void set_MachineName(string value)
public DateTime get_ModifiedAfter()
public void set_ModifiedAfter(DateTime value)
public DateTime get_ModifiedBefore()
public void set_ModifiedBefore(DateTime value)
public void ClearAll()
internal bool Match(Guid category, DateTime created, string label, string machineName, DateTime modified)
}
public System.Messaging.MessageQueueEnumerator : MarshalByRefObject {
private bool disposed
private ArrayList queueList
private int currentIndex
public MessageQueue Current
private object System.Collections.IEnumerator.Current
public IntPtr LocatorHandle
internal void .ctor(ArrayList queueList)
public MessageQueue get_Current()
private object System.Collections.IEnumerator.get_Current()
public IntPtr get_LocatorHandle()
public void Close()
public void Dispose()
protected void Dispose(bool disposing)
public bool MoveNext()
public void Reset()
protected void Finalize()
}
public System.Messaging.MessageQueueErrorCode : Enum {
public int value__
public MessageQueueErrorCode AccessDenied
public MessageQueueErrorCode BadSecurityContext
public MessageQueueErrorCode Base
public MessageQueueErrorCode BufferOverflow
public MessageQueueErrorCode CannotCreateCertificateStore
public MessageQueueErrorCode CannotCreateHashEx
public MessageQueueErrorCode CannotCreateOnGlobalCatalog
public MessageQueueErrorCode CannotGetDistinguishedName
public MessageQueueErrorCode CannotGrantAddGuid
public MessageQueueErrorCode CannotHashDataEx
public MessageQueueErrorCode CannotImpersonateClient
public MessageQueueErrorCode CannotJoinDomain
public MessageQueueErrorCode CannotLoadMsmqOcm
public MessageQueueErrorCode CannotOpenCertificateStore
public MessageQueueErrorCode CannotSetCryptographicSecurityDescriptor
public MessageQueueErrorCode CannotSignDataEx
public MessageQueueErrorCode CertificateNotProvided
public MessageQueueErrorCode ComputerDoesNotSupportEncryption
public MessageQueueErrorCode CorruptedInternalCertificate
public MessageQueueErrorCode CorruptedPersonalCertStore
public MessageQueueErrorCode CorruptedQueueWasDeleted
public MessageQueueErrorCode CorruptedSecurityData
public MessageQueueErrorCode CouldNotGetAccountInfo
public MessageQueueErrorCode CouldNotGetUserSid
public MessageQueueErrorCode DeleteConnectedNetworkInUse
public MessageQueueErrorCode DependentClientLicenseOverflow
public MessageQueueErrorCode DsError
public MessageQueueErrorCode DsIsFull
public MessageQueueErrorCode DtcConnect
public MessageQueueErrorCode EncryptionProviderNotSupported
public MessageQueueErrorCode FailVerifySignatureEx
public MessageQueueErrorCode FormatNameBufferTooSmall
public MessageQueueErrorCode Generic
public MessageQueueErrorCode GuidNotMatching
public MessageQueueErrorCode IllegalContext
public MessageQueueErrorCode IllegalCriteriaColumns
public MessageQueueErrorCode IllegalCursorAction
public MessageQueueErrorCode IllegalEnterpriseOperation
public MessageQueueErrorCode IllegalFormatName
public MessageQueueErrorCode IllegalMessageProperties
public MessageQueueErrorCode IllegalOperation
public MessageQueueErrorCode IllegalPrivateProperties
public MessageQueueErrorCode IllegalPropertyId
public MessageQueueErrorCode IllegalPropertySize
public MessageQueueErrorCode IllegalPropertyValue
public MessageQueueErrorCode IllegalPropertyVt
public MessageQueueErrorCode IllegalQueuePathName
public MessageQueueErrorCode IllegalQueueProperties
public MessageQueueErrorCode IllegalRelation
public MessageQueueErrorCode IllegalRestrictionPropertyId
public MessageQueueErrorCode IllegalSecurityDescriptor
public MessageQueueErrorCode IllegalSort
public MessageQueueErrorCode IllegalSortPropertyId
public MessageQueueErrorCode IllegalUser
public MessageQueueErrorCode InsufficientProperties
public MessageQueueErrorCode InsufficientResources
public MessageQueueErrorCode InvalidCertificate
public MessageQueueErrorCode InvalidHandle
public MessageQueueErrorCode InvalidOwner
public MessageQueueErrorCode InvalidParameter
public MessageQueueErrorCode IOTimeout
public MessageQueueErrorCode LabelBufferTooSmall
public MessageQueueErrorCode MachineExists
public MessageQueueErrorCode MachineNotFound
public MessageQueueErrorCode MessageAlreadyReceived
public MessageQueueErrorCode MessageStorageFailed
public MessageQueueErrorCode MissingConnectorType
public MessageQueueErrorCode MqisReadOnlyMode
public MessageQueueErrorCode MqisServerEmpty
public MessageQueueErrorCode NoDs
public MessageQueueErrorCode NoEntryPointMsmqOcm
public MessageQueueErrorCode NoGlobalCatalogInDomain
public MessageQueueErrorCode NoInternalUserCertificate
public MessageQueueErrorCode NoMsmqServersOnDc
public MessageQueueErrorCode NoMsmqServersOnGlobalCatalog
public MessageQueueErrorCode NoResponseFromObjectServer
public MessageQueueErrorCode ObjectServerNotAvailable
public MessageQueueErrorCode OperationCanceled
public MessageQueueErrorCode PrivilegeNotHeld
public MessageQueueErrorCode Property
public MessageQueueErrorCode PropertyNotAllowed
public MessageQueueErrorCode ProviderNameBufferTooSmall
public MessageQueueErrorCode PublicKeyDoesNotExist
public MessageQueueErrorCode PublicKeyNotFound
public MessageQueueErrorCode QDnsPropertyNotSupported
public MessageQueueErrorCode QueueDeleted
public MessageQueueErrorCode QueueExists
public MessageQueueErrorCode QueueNotAvailable
public MessageQueueErrorCode QueueNotFound
public MessageQueueErrorCode RemoteMachineNotAvailable
public MessageQueueErrorCode ResultBufferTooSmall
public MessageQueueErrorCode SecurityDescriptorBufferTooSmall
public MessageQueueErrorCode SenderCertificateBufferTooSmall
public MessageQueueErrorCode SenderIdBufferTooSmall
public MessageQueueErrorCode ServiceNotAvailable
public MessageQueueErrorCode SharingViolation
public MessageQueueErrorCode SignatureBufferTooSmall
public MessageQueueErrorCode StaleHandle
public MessageQueueErrorCode SymmetricKeyBufferTooSmall
public MessageQueueErrorCode TransactionEnlist
public MessageQueueErrorCode TransactionImport
public MessageQueueErrorCode TransactionSequence
public MessageQueueErrorCode TransactionUsage
public MessageQueueErrorCode UnsupportedAccessMode
public MessageQueueErrorCode UnsupportedFormatNameOperation
public MessageQueueErrorCode UnsupportedOperation
public MessageQueueErrorCode UserBufferTooSmall
public MessageQueueErrorCode WksCantServeClient
public MessageQueueErrorCode WriteNotAllowed
public MessageQueueErrorCode MessageNotFound
}
public System.Messaging.MessageQueueException : ExternalException {
private MessageQueueErrorCode _messageQueueErrorCode
public string Message
public MessageQueueErrorCode MessageQueueErrorCode
internal void .ctor(MessageQueueErrorCode messageQueueErrorCode, string message)
internal void .ctor(MessageQueueErrorCode messageQueueErrorCode)
protected void .ctor(SerializationInfo info, StreamingContext context)
private string TranslateCodeToDescription()
public string get_Message()
public MessageQueueErrorCode get_MessageQueueErrorCode()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Messaging.MessageQueueInstaller : ComponentInstaller {
public bool Authenticate
public short BasePriority
public Guid Category
public EncryptionRequired EncryptionRequired
public string Label
public long MaximumJournalSize
public long MaximumQueueSize
public string Path
public AccessControlList Permissions
public bool Transactional
public UninstallAction UninstallAction
public bool UseJournalQueue
public string MulticastAddress
public void .ctor(MessageQueue componentToCopy)
public bool get_Authenticate()
public void set_Authenticate(bool value)
public short get_BasePriority()
public void set_BasePriority(short value)
public Guid get_Category()
public void set_Category(Guid value)
public EncryptionRequired get_EncryptionRequired()
public void set_EncryptionRequired(EncryptionRequired value)
public string get_Label()
public void set_Label(string value)
public long get_MaximumJournalSize()
public void set_MaximumJournalSize(long value)
public long get_MaximumQueueSize()
public void set_MaximumQueueSize(long value)
public string get_Path()
public void set_Path(string value)
public AccessControlList get_Permissions()
public void set_Permissions(AccessControlList value)
public bool get_Transactional()
public void set_Transactional(bool value)
public UninstallAction get_UninstallAction()
public void set_UninstallAction(UninstallAction value)
public bool get_UseJournalQueue()
public void set_UseJournalQueue(bool value)
public void Commit(IDictionary savedState)
public void CopyFromComponent(IComponent component)
public void Install(IDictionary stateSaver)
public bool IsEquivalentInstaller(ComponentInstaller otherInstaller)
public void Rollback(IDictionary savedState)
public void Uninstall(IDictionary savedState)
public string get_MulticastAddress()
public void set_MulticastAddress(string value)
}
public System.Messaging.MessageQueuePermission : CodeAccessPermission {
private int version
private MessageQueuePermissionEntryCollection _list
private bool _unrestricted
private Char[] invalidChars
public MessageQueuePermissionEntryCollection PermissionEntries
public void .ctor(MessageQueuePermissionEntry[] permissionAccessEntries)
public void .ctor(PermissionState state)
public void .ctor(MessageQueuePermissionAccess permissionAccess, string path)
public void .ctor(MessageQueuePermissionAccess permissionAccess, string machineName, string label, string category)
public MessageQueuePermissionEntryCollection get_PermissionEntries()
public IPermission Copy()
public bool IsUnrestricted()
public void FromXml(SecurityElement securityElement)
public IPermission Intersect(IPermission target)
public bool IsSubsetOf(IPermission target)
public SecurityElement ToXml()
public IPermission Union(IPermission target)
private bool IsEmpty()
private MessageQueuePermission Cast(IPermission target)
internal void ValidateMachineName(string name)
internal void ValidatePath(string path)
internal SecurityElement Element(int version)
internal PermissionState CheckPermissionState(PermissionState state, bool allowUnrestricted)
internal int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion)
internal bool IsUnrestricted(SecurityElement se)
internal void ThrowInvalidPermission(IPermission target, Type expected)
}
public System.Messaging.MessageQueuePermissionAccess : Enum {
public int value__
public MessageQueuePermissionAccess Administer
public MessageQueuePermissionAccess Browse
public MessageQueuePermissionAccess None
public MessageQueuePermissionAccess Peek
public MessageQueuePermissionAccess Receive
public MessageQueuePermissionAccess Send
}
public System.Messaging.MessageQueuePermissionAttribute : CodeAccessSecurityAttribute {
private MessageQueuePermissionAccess _permissionAccess
private string _machineName
private string _label
private string _category
private string _path
public string Category
public string Label
public string MachineName
public string Path
public MessageQueuePermissionAccess PermissionAccess
public void .ctor(SecurityAction action)
public string get_Category()
public void set_Category(string value)
public string get_Label()
public void set_Label(string value)
public string get_MachineName()
public void set_MachineName(string value)
public string get_Path()
public void set_Path(string value)
public MessageQueuePermissionAccess get_PermissionAccess()
public void set_PermissionAccess(MessageQueuePermissionAccess value)
public IPermission CreatePermission()
}
public System.Messaging.MessageQueuePermissionEntry : object {
private MessageQueuePermissionAccess _permissionAccess
private string _machineName
private string _label
private string _category
private string _path
public string Category
public string Label
public string MachineName
public string Path
public MessageQueuePermissionAccess PermissionAccess
public void .ctor(MessageQueuePermissionAccess permissionAccess, string path)
public void .ctor(MessageQueuePermissionAccess permissionAccess, string machineName, string label, string category)
public string get_Category()
public string get_Label()
public string get_MachineName()
public string get_Path()
public MessageQueuePermissionAccess get_PermissionAccess()
}
public System.Messaging.MessageQueuePermissionEntryCollection : CollectionBase {
private MessageQueuePermission owner
public MessageQueuePermissionEntry Item
internal void .ctor(MessageQueuePermission owner)
public MessageQueuePermissionEntry get_Item(int index)
public void set_Item(int index, MessageQueuePermissionEntry value)
public int Add(MessageQueuePermissionEntry value)
public void AddRange(MessageQueuePermissionEntry[] value)
public void AddRange(MessageQueuePermissionEntryCollection value)
public bool Contains(MessageQueuePermissionEntry value)
public void CopyTo(MessageQueuePermissionEntry[] array, int index)
public int IndexOf(MessageQueuePermissionEntry value)
public void Insert(int index, MessageQueuePermissionEntry value)
public void Remove(MessageQueuePermissionEntry value)
protected void OnClear()
protected void OnInsert(int index, object value)
protected void OnRemove(int index, object value)
protected void OnSet(int index, object oldValue, object newValue)
}
public System.Messaging.MessageQueueTransaction : object {
private IMessageQueueTransaction delegateTx
private object syncObj
private bool isDisposed
public MessageQueueTransactionStatus Status
internal IMessageQueueTransaction DelegateTx
internal void .ctor(IMessageQueueTransaction delegateTx)
public MessageQueueTransactionStatus get_Status()
internal IMessageQueueTransaction get_DelegateTx()
private IMessageQueueTransaction GetMessageQueueTransaction()
public void Abort()
public void Begin()
public void Commit()
public void Dispose()
protected void Dispose(bool disposing)
protected void Finalize()
}
public System.Messaging.MessageQueueTransactionStatus : Enum {
public int value__
public MessageQueueTransactionStatus Aborted
public MessageQueueTransactionStatus Committed
public MessageQueueTransactionStatus Initialized
public MessageQueueTransactionStatus Pending
}
public System.Messaging.MessageQueueTransactionType : Enum {
public int value__
public MessageQueueTransactionType Automatic
public MessageQueueTransactionType None
public MessageQueueTransactionType Single
}
public System.Messaging.MessageType : Enum {
public int value__
public MessageType Acknowledgment
public MessageType Normal
public MessageType Report
}
public System.Messaging.MessagingDescriptionAttribute : DescriptionAttribute {
public string Description
public void .ctor(string description)
public string get_Description()
}
public System.Messaging.PeekAction : Enum {
public int value__
public PeekAction Current
public PeekAction Next
}
public System.Messaging.PeekCompletedEventArgs : EventArgs {
private MessageQueue _sender
private IAsyncResult _result
private Message _message
public IAsyncResult AsyncResult
public Message Message
internal void .ctor(MessageQueue sender, IAsyncResult result)
public IAsyncResult get_AsyncResult()
public void set_AsyncResult(IAsyncResult value)
public Message get_Message()
}
public System.Messaging.PeekCompletedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, PeekCompletedEventArgs e)
public IAsyncResult BeginInvoke(object sender, PeekCompletedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Messaging.QueueAccessMode : Enum {
public int value__
public QueueAccessMode Receive
public QueueAccessMode Send
public QueueAccessMode SendAndReceive
public QueueAccessMode Peek
public QueueAccessMode PeekAndAdmin
public QueueAccessMode ReceiveAndAdmin
}
public System.Messaging.ReceiveCompletedEventArgs : EventArgs {
private MessageQueue _sender
private IAsyncResult _result
private Message _message
public IAsyncResult AsyncResult
public Message Message
internal void .ctor(MessageQueue sender, IAsyncResult result)
public IAsyncResult get_AsyncResult()
public void set_AsyncResult(IAsyncResult value)
public Message get_Message()
}
public System.Messaging.ReceiveCompletedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ReceiveCompletedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ReceiveCompletedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Messaging.SecurityContext : object {
public void Dispose()
}
public System.Messaging.StandardAccessRights : Enum {
public int value__
public StandardAccessRights All
public StandardAccessRights Delete
public StandardAccessRights Execute
public StandardAccessRights ModifyOwner
public StandardAccessRights None
public StandardAccessRights Read
public StandardAccessRights ReadSecurity
public StandardAccessRights Required
public StandardAccessRights Synchronize
public StandardAccessRights Write
public StandardAccessRights WriteSecurity
}
internal System.Messaging.TimeoutConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Messaging.Trustee : object {
private string name
private string systemName
private TrusteeType trusteeType
public string Name
public string SystemName
public TrusteeType TrusteeType
public void .ctor(string name)
public void .ctor(string name, string systemName)
public void .ctor(string name, string systemName, TrusteeType trusteeType)
public string get_Name()
public void set_Name(string value)
public string get_SystemName()
public void set_SystemName(string value)
public TrusteeType get_TrusteeType()
public void set_TrusteeType(TrusteeType value)
}
public System.Messaging.TrusteeType : Enum {
public int value__
public TrusteeType Alias
public TrusteeType Computer
public TrusteeType Domain
public TrusteeType Group
public TrusteeType Unknown
public TrusteeType User
}
public System.Messaging.XmlMessageFormatter : object {
private ArrayList targetTypes
public String[] TargetTypeNames
public Type[] TargetTypes
public void .ctor(String[] targetTypeNames)
public void .ctor(Type[] targetTypes)
private Type[] GetTypesFromNames(String[] targetTypeNames)
public String[] get_TargetTypeNames()
public void set_TargetTypeNames(String[] value)
public Type[] get_TargetTypes()
public void set_TargetTypes(Type[] value)
public bool CanRead(Message message)
public object Clone()
private void AddType(Type t)
public object Read(Message message)
public void Write(Message message, object obj)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
