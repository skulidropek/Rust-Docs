public UnityEngine.Experimental.U2D.AngleRangeInfo : ValueType {
public float start
public float end
public UInt32 order
public Int32[] sprites
}
public UnityEngine.Experimental.U2D.ShapeControlPoint : ValueType {
public Vector3 position
public Vector3 leftTangent
public Vector3 rightTangent
public int mode
}
public UnityEngine.Experimental.U2D.SpriteShapeMetaData : ValueType {
public float height
public float bevelCutoff
public float bevelSize
public UInt32 spriteIndex
public bool corner
}
public UnityEngine.Experimental.U2D.SpriteShapeParameters : ValueType {
public Matrix4x4 transform
public Texture2D fillTexture
public UInt32 fillScale
public UInt32 splineDetail
public float angleThreshold
public float borderPivot
public float bevelCutoff
public float bevelSize
public bool carpet
public bool smartSprite
public bool adaptiveUV
public bool spriteBorders
}
public UnityEngine.Experimental.U2D.SpriteShapeUtility : object {
public Int32[] Generate(Mesh mesh, SpriteShapeParameters shapeParams, ShapeControlPoint[] points, SpriteShapeMetaData[] metaData, AngleRangeInfo[] angleRange, Sprite[] sprites, Sprite[] corners)
public void GenerateSpriteShape(SpriteShapeRenderer renderer, SpriteShapeParameters shapeParams, ShapeControlPoint[] points, SpriteShapeMetaData[] metaData, AngleRangeInfo[] angleRange, Sprite[] sprites, Sprite[] corners)
private Int32[] Generate_Injected(Mesh mesh, SpriteShapeParameters& shapeParams, ShapeControlPoint[] points, SpriteShapeMetaData[] metaData, AngleRangeInfo[] angleRange, Sprite[] sprites, Sprite[] corners)
private void GenerateSpriteShape_Injected(SpriteShapeRenderer renderer, SpriteShapeParameters& shapeParams, ShapeControlPoint[] points, SpriteShapeMetaData[] metaData, AngleRangeInfo[] angleRange, Sprite[] sprites, Sprite[] corners)
}
