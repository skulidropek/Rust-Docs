internal MySql.Data.Common.Cache`2 : object {
private int _capacity
private Queue`1<KeyType> _keyQ
private Dictionary`2<KeyType, ValueType> _contents
public ValueType Item
public void .ctor(int initialCapacity, int capacity)
public ValueType get_Item(KeyType key)
public void set_Item(KeyType key, ValueType value)
public void Add(KeyType key, ValueType value)
private void InternalAdd(KeyType key, ValueType value)
}
internal MySql.Data.Common.ContextString : object {
private string contextMarkers
private bool escapeBackslash
public string ContextMarkers
public void .ctor(string contextMarkers, bool escapeBackslash)
public string get_ContextMarkers()
public void set_ContextMarkers(string value)
public int IndexOf(string src, string target)
public int IndexOf(string src, string target, int startIndex)
private bool IndexInQuotes(string src, int index, int startIndex)
public int IndexOf(string src, char target)
public String[] Split(string src, string delimiters)
}
internal MySql.Data.Common.DBVersion : ValueType {
private int major
private int minor
private int build
private string srcString
public int Major
public int Minor
public int Build
public void .ctor(string s, int major, int minor, int build)
public int get_Major()
public int get_Minor()
public int get_Build()
public DBVersion Parse(string versionString)
public bool isAtLeast(int majorNum, int minorNum, int buildNum)
public string ToString()
}
internal MySql.Data.Common.LowResolutionStopwatch : object {
private long millis
private long startTime
public long Frequency
public bool isHighResolution
public long ElapsedMilliseconds
public TimeSpan Elapsed
public long get_ElapsedMilliseconds()
public void Start()
public void Stop()
public void Reset()
public TimeSpan get_Elapsed()
public LowResolutionStopwatch StartNew()
public long GetTimestamp()
private bool IsRunning()
}
internal MySql.Data.Common.MyNetworkStream : NetworkStream {
private int MaxRetryCount
private Socket socket
public void .ctor(Socket socket, bool ownsSocket)
private bool IsTimeoutException(SocketException e)
private bool IsWouldBlockException(SocketException e)
private void HandleOrRethrowException(Exception e)
public int Read(Byte[] buffer, int offset, int count)
public int ReadByte()
public void Write(Byte[] buffer, int offset, int count)
public void Flush()
public MyNetworkStream CreateStream(MySqlConnectionStringBuilder settings, bool unix)
private IPHostEntry ParseIPAddress(string hostname)
private IPHostEntry GetHostEntry(string hostname)
private EndPoint CreateUnixEndPoint(string host)
private MyNetworkStream CreateSocketStream(MySqlConnectionStringBuilder settings, IPAddress ip, bool unix)
private void SetKeepAlive(Socket s, UInt32 time)
}
internal MySql.Data.Common.NamedPipeStream : Stream {
private int ERROR_PIPE_BUSY
private int ERROR_SEM_TIMEOUT
private SafeFileHandle handle
private Stream fileStream
private int readTimeout
private int writeTimeout
public bool CanRead
public bool CanWrite
public bool CanSeek
public long Length
public long Position
public bool CanTimeout
public int ReadTimeout
public int WriteTimeout
public void .ctor(string path, FileAccess mode, UInt32 timeout)
private void CancelIo()
public void Open(string path, FileAccess mode, UInt32 timeout)
public bool get_CanRead()
public bool get_CanWrite()
public bool get_CanSeek()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public void Write(Byte[] buffer, int offset, int count)
public void Close()
public void SetLength(long length)
public bool get_CanTimeout()
public int get_ReadTimeout()
public void set_ReadTimeout(int value)
public int get_WriteTimeout()
public void set_WriteTimeout(int value)
public long Seek(long offset, SeekOrigin origin)
internal Stream Create(string pipeName, string hostname, UInt32 timeout)
}
internal MySql.Data.Common.NativeMethods : object {
public UInt32 GENERIC_READ
public UInt32 GENERIC_WRITE
public int INVALIDpipeHandle_VALUE
public UInt32 FILE_FLAG_OVERLAPPED
public UInt32 FILE_FLAG_NO_BUFFERING
public UInt32 OPEN_EXISTING
public IntPtr CreateFile(string fileName, UInt32 desiredAccess, UInt32 shareMode, SecurityAttributes securityAttributes, UInt32 creationDisposition, UInt32 flagsAndAttributes, UInt32 templateFile)
public bool PeekNamedPipe(IntPtr handle, Byte[] buffer, UInt32 nBufferSize, UInt32& bytesRead, UInt32& bytesAvail, UInt32& BytesLeftThisMessage)
public bool ReadFile(IntPtr hFile, Byte[] lpBuffer, UInt32 nNumberOfBytesToRead, UInt32& lpNumberOfBytesRead, IntPtr lpOverlapped)
public bool WriteFile(IntPtr hFile, Byte[] buffer, UInt32 numberOfBytesToWrite, UInt32& numberOfBytesWritten, IntPtr lpOverlapped)
public bool CloseHandle(IntPtr handle)
public bool CancelIo(IntPtr handle)
public bool FlushFileBuffers(IntPtr handle)
public IntPtr OpenEvent(UInt32 dwDesiredAccess, bool bInheritHandle, string lpName)
public IntPtr OpenFileMapping(UInt32 dwDesiredAccess, bool bInheritHandle, string lpName)
public IntPtr MapViewOfFile(IntPtr hFileMappingObject, UInt32 dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, IntPtr dwNumberOfBytesToMap)
public bool UnmapViewOfFile(IntPtr lpBaseAddress)
public int FlushViewOfFile(IntPtr address, UInt32 numBytes)
public bool WaitNamedPipe(string namedPipeName, UInt32 timeOut)
public IntPtr socket(int af, int type, int protocol)
public int ioctlsocket(IntPtr socket, UInt32 cmd, UInt32& arg)
public int WSAIoctl(IntPtr s, UInt32 dwIoControlCode, Byte[] inBuffer, UInt32 cbInBuffer, Byte[] outBuffer, UInt32 cbOutBuffer, IntPtr lpcbBytesReturned, IntPtr lpOverlapped, IntPtr lpCompletionRoutine)
public int WSAGetLastError()
public int connect(IntPtr socket, Byte[] addr, int addrlen)
public int recv(IntPtr socket, Byte[] buff, int len, int flags)
public int send(IntPtr socket, Byte[] buff, int len, int flags)
}
internal MySql.Data.Common.Platform : object {
private bool inited
private bool isMono
public char DirectorySeparatorChar
public bool IsWindows()
public char get_DirectorySeparatorChar()
public bool IsMono()
private void Init()
}
internal MySql.Data.Common.QueryNormalizer : object {
private List`1<string> keywords
private List`1<Token> tokens
private int pos
private string fullSql
private string queryType
public string QueryType
public string get_QueryType()
public string Normalize(string sql)
private void DetermineStatementType(List`1<Token> tok)
private void ProcessMathSymbols(List`1<Token> tok)
private void CollapseWhitespace(List`1<Token> tok)
private void CollapseValueLists(List`1<Token> tok)
private void CollapseValueList(List`1<Token> tok, Int32& pos)
private void CollapseInLists(List`1<Token> tok)
private Token GetNextRealToken(List`1<Token> tok, Int32& pos)
private void CollapseInList(List`1<Token> tok, Int32& pos)
private void TokenizeSql(string sql)
private bool LetterStartsComment(char c)
private bool IsSpecialCharacter(char c)
private bool ConsumeComment()
private void ConsumeSymbol()
private void ConsumeQuotedToken(char c)
private void ConsumeUnquotedToken()
private void ConsumeWhitespace()
private bool IsKeyword(string word)
}
internal MySql.Data.Common.SharedMemory : object {
private UInt32 FILE_MAP_WRITE
private IntPtr fileMapping
private IntPtr view
public IntPtr View
public void .ctor(string name, IntPtr size)
protected void Finalize()
public IntPtr get_View()
public void Dispose()
protected void Dispose(bool disposing)
}
internal MySql.Data.Common.SharedMemoryStream : Stream {
private int BUFFERLENGTH
private string memoryName
private EventWaitHandle serverRead
private EventWaitHandle serverWrote
private EventWaitHandle clientRead
private EventWaitHandle clientWrote
private EventWaitHandle connectionClosed
private SharedMemory data
private int bytesLeft
private int position
private int connectNumber
private int readTimeout
private int writeTimeout
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public bool CanTimeout
public int ReadTimeout
public int WriteTimeout
public void .ctor(string memName)
public void Open(UInt32 timeOut)
public void Close()
private void GetConnectNumber(UInt32 timeOut)
private void SetupEvents()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void Write(Byte[] buffer, int offset, int count)
public void SetLength(long value)
public bool get_CanTimeout()
public int get_ReadTimeout()
public void set_ReadTimeout(int value)
public int get_WriteTimeout()
public void set_WriteTimeout(int value)
}
internal MySql.Data.Common.StreamCreator : object {
private string hostList
private UInt32 port
private string pipeName
private UInt32 timeOut
private UInt32 keepalive
private DBVersion driverVersion
public void .ctor(string hosts, UInt32 port, string pipeName, UInt32 keepalive, DBVersion driverVersion)
public Stream GetStream(string server, UInt32 port, string pipename, UInt32 keepalive, DBVersion v, UInt32 timeout)
public Stream GetStream(MySqlConnectionStringBuilder settings)
private Stream GetTcpStream(MySqlConnectionStringBuilder settings)
private Stream GetUnixSocketStream(MySqlConnectionStringBuilder settings)
private Stream GetSharedMemoryStream(MySqlConnectionStringBuilder settings)
private Stream GetNamedPipeStream(MySqlConnectionStringBuilder settings)
}
internal MySql.Data.Common.Token : object {
public TokenType Type
public string Text
public bool Output
public bool IsRealToken
public void .ctor(TokenType type, string text)
public bool get_IsRealToken()
}
internal MySql.Data.Common.TokenType : Enum {
public int value__
public TokenType Keyword
public TokenType String
public TokenType Number
public TokenType Symbol
public TokenType Identifier
public TokenType Comment
public TokenType CommandComment
public TokenType Whitespace
}
internal MySql.Data.MySqlClient.Authentication.AuthenticationPluginManager : object {
private Dictionary`2<string, PluginInfo> plugins
public MySqlAuthenticationPlugin GetPlugin(string method)
private MySqlAuthenticationPlugin CreatePlugin(string method)
}
public MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin : object {
private NativeDriver driver
protected Byte[] AuthenticationData
protected MySqlConnectionStringBuilder Settings
protected Version ServerVersion
internal ClientFlags Flags
protected Encoding Encoding
public string PluginName
internal MySqlAuthenticationPlugin GetPlugin(string method, NativeDriver driver, Byte[] authData)
protected MySqlConnectionStringBuilder get_Settings()
protected Version get_ServerVersion()
internal ClientFlags get_Flags()
protected Encoding get_Encoding()
protected void SetAuthData(Byte[] data)
protected void CheckConstraints()
protected void AuthenticationFailed(Exception ex)
protected void AuthenticationSuccessful()
protected Byte[] MoreData(Byte[] data)
internal void Authenticate(bool reset)
private void WritePassword(MySqlPacket packet)
private MySqlPacket ReadPacket()
private void HandleAuthChange(MySqlPacket packet)
private void AuthenticationChange()
public string get_PluginName()
public string GetUsername()
public object GetPassword()
}
public MySql.Data.MySqlClient.Authentication.MySqlNativePasswordPlugin : MySqlAuthenticationPlugin {
public string PluginName
public string get_PluginName()
protected void SetAuthData(Byte[] data)
protected Byte[] MoreData(Byte[] data)
public object GetPassword()
private Byte[] Get411Password(string password, Byte[] seedBytes)
}
internal MySql.Data.MySqlClient.Authentication.MySqlWindowsAuthenticationPlugin : MySqlAuthenticationPlugin {
private int SEC_E_OK
private int SEC_I_CONTINUE_NEEDED
private int SEC_I_COMPLETE_NEEDED
private int SEC_I_COMPLETE_AND_CONTINUE
private int SECPKG_CRED_OUTBOUND
private int SECURITY_NETWORK_DREP
private int SECURITY_NATIVE_DREP
private int SECPKG_CRED_INBOUND
private int MAX_TOKEN_SIZE
private int SECPKG_ATTR_SIZES
private int STANDARD_CONTEXT_ATTRIBUTES
private SECURITY_HANDLE outboundCredentials
private SECURITY_HANDLE clientContext
private SECURITY_INTEGER lifetime
private bool continueProcessing
private string targetName
public string PluginName
protected void CheckConstraints()
public string GetUsername()
public string get_PluginName()
protected Byte[] MoreData(Byte[] moreData)
private void InitializeClient(Byte[]& clientBlob, Byte[] serverBlob, Boolean& continueProcessing)
private string GetTargetName()
private void AcquireCredentials()
private int AcquireCredentialsHandle(string pszPrincipal, string pszPackage, int fCredentialUse, IntPtr PAuthenticationID, IntPtr pAuthData, int pGetKeyFn, IntPtr pvGetKeyArgument, SECURITY_HANDLE& phCredential, SECURITY_INTEGER& ptsExpiry)
private int InitializeSecurityContext(SECURITY_HANDLE& phCredential, IntPtr phContext, string pszTargetName, int fContextReq, int Reserved1, int TargetDataRep, IntPtr pInput, int Reserved2, SECURITY_HANDLE& phNewContext, SecBufferDesc& pOutput, UInt32& pfContextAttr, SECURITY_INTEGER& ptsExpiry)
private int InitializeSecurityContext(SECURITY_HANDLE& phCredential, SECURITY_HANDLE& phContext, string pszTargetName, int fContextReq, int Reserved1, int TargetDataRep, SecBufferDesc& SecBufferDesc, int Reserved2, SECURITY_HANDLE& phNewContext, SecBufferDesc& pOutput, UInt32& pfContextAttr, SECURITY_INTEGER& ptsExpiry)
private int CompleteAuthToken(SECURITY_HANDLE& phContext, SecBufferDesc& pToken)
public int QueryContextAttributes(SECURITY_HANDLE& phContext, UInt32 ulAttribute, SecPkgContext_Sizes& pContextAttributes)
public int FreeCredentialsHandle(SECURITY_HANDLE& pCred)
public int DeleteSecurityContext(SECURITY_HANDLE& pCred)
}
internal MySql.Data.MySqlClient.Authentication.PluginInfo : ValueType {
public string Type
public Assembly Assembly
public void .ctor(string type)
}
public MySql.Data.MySqlClient.Authentication.SecBuffer : ValueType {
public int cbBuffer
public int BufferType
public IntPtr pvBuffer
public void .ctor(int bufferSize)
public void .ctor(Byte[] secBufferBytes)
public void .ctor(Byte[] secBufferBytes, SecBufferType bufferType)
public void Dispose()
}
internal MySql.Data.MySqlClient.Authentication.SecBufferDesc : ValueType {
public int ulVersion
public int cBuffers
public IntPtr pBuffers
public void .ctor(int bufferSize)
public void .ctor(Byte[] secBufferBytes)
public void Dispose()
public Byte[] GetSecBufferByteArray()
}
public MySql.Data.MySqlClient.Authentication.SecBufferType : Enum {
public int value__
public SecBufferType SECBUFFER_VERSION
public SecBufferType SECBUFFER_EMPTY
public SecBufferType SECBUFFER_DATA
public SecBufferType SECBUFFER_TOKEN
}
public MySql.Data.MySqlClient.Authentication.SecHandle : ValueType {
private IntPtr dwLower
private IntPtr dwUpper
}
public MySql.Data.MySqlClient.Authentication.SecPkgContext_Sizes : ValueType {
public UInt32 cbMaxToken
public UInt32 cbMaxSignature
public UInt32 cbBlockSize
public UInt32 cbSecurityTrailer
}
public MySql.Data.MySqlClient.Authentication.SECURITY_HANDLE : ValueType {
public IntPtr LowPart
public IntPtr HighPart
public void .ctor(int dummy)
}
public MySql.Data.MySqlClient.Authentication.SECURITY_INTEGER : ValueType {
public UInt32 LowPart
public int HighPart
public void .ctor(int dummy)
}
public MySql.Data.MySqlClient.Authentication.Sha256AuthenticationPlugin : MySqlAuthenticationPlugin {
private Byte[] rawPubkey
public string PluginName
public string get_PluginName()
protected Byte[] MoreData(Byte[] data)
public object GetPassword()
}
public MySql.Data.MySqlClient.AuthenticationPluginConfigurationElement : ConfigurationElement {
public string Name
public string Type
public string get_Name()
public void set_Name(string value)
public string get_Type()
public void set_Type(string value)
}
public MySql.Data.MySqlClient.BaseCommandInterceptor : object {
private MySqlConnection <ActiveConnection>k__BackingField
protected MySqlConnection ActiveConnection
protected MySqlConnection get_ActiveConnection()
private void set_ActiveConnection(MySqlConnection value)
public bool ExecuteScalar(string sql, Object& returnValue)
public bool ExecuteNonQuery(string sql, Int32& returnValue)
public bool ExecuteReader(string sql, CommandBehavior behavior, MySqlDataReader& returnValue)
public void Init(MySqlConnection connection)
}
public MySql.Data.MySqlClient.BaseExceptionInterceptor : object {
private MySqlConnection <ActiveConnection>k__BackingField
protected MySqlConnection ActiveConnection
public Exception InterceptException(Exception exception)
protected MySqlConnection get_ActiveConnection()
private void set_ActiveConnection(MySqlConnection value)
public void Init(MySqlConnection connection)
}
public MySql.Data.MySqlClient.BaseTableCache : object {
protected int MaxCacheAge
private Dictionary`2<string, CacheEntry> cache
public void .ctor(int maxCacheAge)
public void AddToCache(string commandText, object resultSet)
public object RetrieveFromCache(string commandText, int cacheAge)
public void RemoveFromCache(string commandText)
public void Dump()
protected void CleanCache()
}
internal MySql.Data.MySqlClient.CharacterSet : object {
public string name
public int byteCount
public void .ctor(string name, int byteCount)
}
internal MySql.Data.MySqlClient.CharSetMap : object {
private Dictionary`2<string, string> defaultCollations
private Dictionary`2<string, int> maxLengths
private Dictionary`2<string, CharacterSet> mapping
private object lockObject
public CharacterSet GetCharacterSet(DBVersion version, string CharSetName)
public Encoding GetEncoding(DBVersion version, string CharSetName)
private void InitializeMapping()
private void LoadCharsetMap()
internal void InitCollections(MySqlConnection connection)
internal string GetDefaultCollation(string charset, MySqlConnection connection)
internal int GetMaxLength(string charset, MySqlConnection connection)
}
internal MySql.Data.MySqlClient.ClientFlags : Enum {
public ulong value__
public ClientFlags LONG_PASSWORD
public ClientFlags FOUND_ROWS
public ClientFlags LONG_FLAG
public ClientFlags CONNECT_WITH_DB
public ClientFlags NO_SCHEMA
public ClientFlags COMPRESS
public ClientFlags ODBC
public ClientFlags LOCAL_FILES
public ClientFlags IGNORE_SPACE
public ClientFlags PROTOCOL_41
public ClientFlags INTERACTIVE
public ClientFlags SSL
public ClientFlags IGNORE_SIGPIPE
public ClientFlags TRANSACTIONS
public ClientFlags RESERVED
public ClientFlags SECURE_CONNECTION
public ClientFlags MULTI_STATEMENTS
public ClientFlags MULTI_RESULTS
public ClientFlags PS_MULTI_RESULTS
public ClientFlags PLUGIN_AUTH
public ClientFlags CONNECT_ATTRS
public ClientFlags CAN_HANDLE_EXPIRED_PASSWORD
public ClientFlags CLIENT_SSL_VERIFY_SERVER_CERT
public ClientFlags CLIENT_REMEMBER_OPTIONS
}
internal MySql.Data.MySqlClient.ColumnFlags : Enum {
public int value__
public ColumnFlags NOT_NULL
public ColumnFlags PRIMARY_KEY
public ColumnFlags UNIQUE_KEY
public ColumnFlags MULTIPLE_KEY
public ColumnFlags BLOB
public ColumnFlags UNSIGNED
public ColumnFlags ZERO_FILL
public ColumnFlags BINARY
public ColumnFlags ENUM
public ColumnFlags AUTO_INCREMENT
public ColumnFlags TIMESTAMP
public ColumnFlags SET
public ColumnFlags NUMBER
}
internal MySql.Data.MySqlClient.CommandInterceptor : Interceptor {
private bool insideInterceptor
private List`1<BaseCommandInterceptor> interceptors
public void .ctor(MySqlConnection connection)
public bool ExecuteScalar(string sql, Object& returnValue)
public bool ExecuteNonQuery(string sql, Int32& returnValue)
public bool ExecuteReader(string sql, CommandBehavior behavior, MySqlDataReader& returnValue)
protected void AddInterceptor(object o)
protected string ResolveType(string nameOrType)
}
internal MySql.Data.MySqlClient.CommandTimer : object {
private bool timeoutSet
private MySqlConnection connection
public void .ctor(MySqlConnection connection, int timeout)
public void Dispose()
}
internal MySql.Data.MySqlClient.CompressedStream : Stream {
private Stream baseStream
private MemoryStream cache
private Byte[] localByte
private Byte[] inBuffer
private Byte[] lengthBytes
private WeakReference inBufferRef
private int inPos
private int maxInPos
private ZInputStream zInStream
public bool CanRead
public bool CanWrite
public bool CanSeek
public long Length
public long Position
public bool CanTimeout
public int ReadTimeout
public int WriteTimeout
public void .ctor(Stream baseStream)
public bool get_CanRead()
public bool get_CanWrite()
public bool get_CanSeek()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public void Close()
public void SetLength(long value)
public int ReadByte()
public bool get_CanTimeout()
public int get_ReadTimeout()
public void set_ReadTimeout(int value)
public int get_WriteTimeout()
public void set_WriteTimeout(int value)
public int Read(Byte[] buffer, int offset, int count)
private void PrepareNextPacket()
private void ReadNextPacket(int len)
private MemoryStream CompressCache()
private void CompressAndSendCache()
public void Flush()
private bool InputDone()
public void WriteByte(byte value)
public void Write(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
}
internal MySql.Data.MySqlClient.Crypt : object {
private void XorScramble(Byte[] from, int fromIndex, Byte[] to, int toIndex, Byte[] password, int length)
public Byte[] Get411Password(string password, string seed)
private double rand(Int64& seed1, Int64& seed2, long max)
public string EncryptPassword(string password, string seed, bool new_ver)
private Int64[] Hash(string P)
}
public MySql.Data.MySqlClient.CustomInstaller : Installer {
public void Install(IDictionary stateSaver)
private void AddProviderToMachineConfig()
internal void UpdateMachineConfigs(string rootPath, bool add)
private XmlElement CreateNodeAssemblyBindingRedirection(XmlElement mysqlNode, XmlDocument doc, string oldVersion, string newVersion)
private void AddProviderToMachineConfigInDir(string path)
private XmlDocument RemoveOldBindingRedirection(XmlDocument doc)
public void Uninstall(IDictionary savedState)
private void RemoveProviderFromMachineConfig()
private void RemoveProviderFromMachineConfigInDir(string path)
}
internal MySql.Data.MySqlClient.DBCmd : Enum {
public byte value__
public DBCmd SLEEP
public DBCmd QUIT
public DBCmd INIT_DB
public DBCmd QUERY
public DBCmd FIELD_LIST
public DBCmd CREATE_DB
public DBCmd DROP_DB
public DBCmd RELOAD
public DBCmd SHUTDOWN
public DBCmd STATISTICS
public DBCmd PROCESS_INFO
public DBCmd CONNECT
public DBCmd PROCESS_KILL
public DBCmd DEBUG
public DBCmd PING
public DBCmd TIME
public DBCmd DELAYED_INSERT
public DBCmd CHANGE_USER
public DBCmd BINLOG_DUMP
public DBCmd TABLE_DUMP
public DBCmd CONNECT_OUT
public DBCmd REGISTER_SLAVE
public DBCmd PREPARE
public DBCmd EXECUTE
public DBCmd LONG_DATA
public DBCmd CLOSE_STMT
public DBCmd RESET_STMT
public DBCmd SET_OPTION
public DBCmd FETCH
}
internal MySql.Data.MySqlClient.Driver : object {
protected Encoding encoding
protected MySqlConnectionStringBuilder connectionString
protected bool isOpen
protected DateTime creationTime
protected string serverCharSet
protected int serverCharSetIndex
protected Dictionary`2<string, string> serverProps
protected Dictionary`2<int, string> charSets
protected long maxPacketSize
internal int timeZoneOffset
private DateTime idleSince
protected MySqlPromotableTransaction currentTransaction
protected bool inActiveUse
protected MySqlPool pool
private bool firstResult
protected IDriver handler
internal MySqlDataReader reader
private bool disposeInProgress
internal bool isFabric
private bool <IsPasswordExpired>k__BackingField
public DateTime IdleSince
public int ThreadID
public DBVersion Version
public MySqlConnectionStringBuilder Settings
public Encoding Encoding
public MySqlPromotableTransaction CurrentTransaction
public bool IsInActiveUse
public bool IsOpen
public MySqlPool Pool
public long MaxPacketSize
internal int ConnectionCharSetIndex
internal Dictionary`2<int, string> CharacterSets
public bool SupportsOutputParameters
public bool SupportsBatch
public bool SupportsConnectAttrs
public bool SupportsPasswordExpiration
public bool IsPasswordExpired
public DateTime get_IdleSince()
public void set_IdleSince(DateTime value)
public void .ctor(MySqlConnectionStringBuilder settings)
protected void Finalize()
public int get_ThreadID()
public DBVersion get_Version()
public MySqlConnectionStringBuilder get_Settings()
public void set_Settings(MySqlConnectionStringBuilder value)
public Encoding get_Encoding()
public void set_Encoding(Encoding value)
public MySqlPromotableTransaction get_CurrentTransaction()
public void set_CurrentTransaction(MySqlPromotableTransaction value)
public bool get_IsInActiveUse()
public void set_IsInActiveUse(bool value)
public bool get_IsOpen()
public MySqlPool get_Pool()
public void set_Pool(MySqlPool value)
public long get_MaxPacketSize()
internal int get_ConnectionCharSetIndex()
internal void set_ConnectionCharSetIndex(int value)
internal Dictionary`2<int, string> get_CharacterSets()
public bool get_SupportsOutputParameters()
public bool get_SupportsBatch()
public bool get_SupportsConnectAttrs()
public bool get_SupportsPasswordExpiration()
public bool get_IsPasswordExpired()
internal void set_IsPasswordExpired(bool value)
public string Property(string key)
public bool ConnectionLifetimeExpired()
public Driver Create(MySqlConnectionStringBuilder settings)
public bool HasStatus(ServerStatusFlags flag)
public void Open()
public void Close()
public void Configure(MySqlConnection connection)
private Dictionary`2<string, string> LoadServerProperties(MySqlConnection connection)
private int GetTimeZoneOffset(MySqlConnection con)
private void LoadCharacterSets(MySqlConnection connection)
public List`1<MySqlError> ReportWarnings(MySqlConnection connection)
public void SendQuery(MySqlPacket p)
public ResultSet NextResult(int statementId, bool force)
protected int GetResult(int statementId, Int32& affectedRows, Int64& insertedId)
public bool FetchDataRow(int statementId, int columns)
public bool SkipDataRow()
public void ExecuteDirect(string sql)
public MySqlField[] GetColumns(int count)
public int PrepareStatement(string sql, MySqlField[]& parameters)
public IMySqlValue ReadColumnValue(int index, MySqlField field, IMySqlValue value)
public void SkipColumnValue(IMySqlValue valObject)
public void ResetTimeout(int timeoutMilliseconds)
public bool Ping()
public void SetDatabase(string dbName)
public void ExecuteStatement(MySqlPacket packetToExecute)
public void CloseStatement(int id)
public void Reset()
public void CloseQuery(MySqlConnection connection, int statementId)
protected void Dispose(bool disposing)
public void Dispose()
}
internal MySql.Data.MySqlClient.DriverTransactionManager : object {
private Hashtable driversInUse
public Driver GetDriverInTransaction(Transaction transaction)
public void SetDriverInTransaction(Driver driver)
public void RemoveDriverInTransaction(Transaction transaction)
}
internal MySql.Data.MySqlClient.ExceptionInterceptor : Interceptor {
private List`1<BaseExceptionInterceptor> interceptors
public void .ctor(MySqlConnection connection)
protected void AddInterceptor(object o)
public void Throw(Exception exception)
protected string ResolveType(string nameOrType)
}
internal MySql.Data.MySqlClient.Field_Type : Enum {
public byte value__
public Field_Type DECIMAL
public Field_Type BYTE
public Field_Type SHORT
public Field_Type LONG
public Field_Type FLOAT
public Field_Type DOUBLE
public Field_Type NULL
public Field_Type TIMESTAMP
public Field_Type LONGLONG
public Field_Type INT24
public Field_Type DATE
public Field_Type TIME
public Field_Type DATETIME
public Field_Type YEAR
public Field_Type NEWDATE
public Field_Type ENUM
public Field_Type SET
public Field_Type TINY_BLOB
public Field_Type MEDIUM_BLOB
public Field_Type LONG_BLOB
public Field_Type BLOB
public Field_Type VAR_STRING
public Field_Type STRING
}
public MySql.Data.MySqlClient.GenericConfigurationElementCollection`1 : ConfigurationElementCollection {
private List`1<T> _elements
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public IEnumerator`1<T> GetEnumerator()
}
internal MySql.Data.MySqlClient.IDriver {
public int ThreadId
public DBVersion Version
public ServerStatusFlags ServerStatus
public ClientFlags Flags
public int WarningCount
public int get_ThreadId()
public DBVersion get_Version()
public ServerStatusFlags get_ServerStatus()
public ClientFlags get_Flags()
public void Configure()
public void Open()
public void SendQuery(MySqlPacket packet)
public void Close(bool isOpen)
public bool Ping()
public int GetResult(Int32& affectedRows, Int64& insertedId)
public bool FetchDataRow(int statementId, int columns)
public int PrepareStatement(string sql, MySqlField[]& parameters)
public void ExecuteStatement(MySqlPacket packet)
public void CloseStatement(int statementId)
public void SetDatabase(string dbName)
public void Reset()
public IMySqlValue ReadColumnValue(int index, MySqlField field, IMySqlValue valObject)
public void SkipColumnValue(IMySqlValue valueObject)
public void GetColumnsData(MySqlField[] columns)
public void ResetTimeout(int timeout)
public int get_WarningCount()
}
internal MySql.Data.MySqlClient.Interceptor : object {
protected MySqlConnection connection
protected void LoadInterceptors(string interceptorList)
protected void AddInterceptor(object o)
protected string ResolveType(string nameOrType)
}
public MySql.Data.MySqlClient.InterceptorConfigurationElement : ConfigurationElement {
public string Name
public string Type
public string get_Name()
public void set_Name(string value)
public string get_Type()
public void set_Type(string value)
}
internal MySql.Data.MySqlClient.ISSchemaProvider : SchemaProvider {
public void .ctor(MySqlConnection connection)
protected MySqlSchemaCollection GetCollections()
protected MySqlSchemaCollection GetRestrictions()
public MySqlSchemaCollection GetDatabases(String[] restrictions)
public MySqlSchemaCollection GetTables(String[] restrictions)
public MySqlSchemaCollection GetColumns(String[] restrictions)
private MySqlSchemaCollection GetViews(String[] restrictions)
private MySqlSchemaCollection GetViewColumns(String[] restrictions)
private MySqlSchemaCollection GetTriggers(String[] restrictions)
public MySqlSchemaCollection GetProcedures(String[] restrictions)
private MySqlSchemaCollection GetProceduresWithParameters(String[] restrictions)
private string GetProcedureParameterLine(MySqlSchemaRow isRow)
private MySqlSchemaCollection GetParametersForRoutineFromIS(String[] restrictions)
private MySqlSchemaCollection GetParametersFromIS(String[] restrictions, MySqlSchemaCollection routines)
internal MySqlSchemaCollection CreateParametersTable()
public MySqlSchemaCollection GetProcedureParameters(String[] restrictions, MySqlSchemaCollection routines)
protected MySqlSchemaCollection GetSchemaInternal(string collection, String[] restrictions)
private string GetWhereClause(string initial_where, String[] keys, String[] values)
private MySqlSchemaCollection Query(string table_name, string initial_where, String[] keys, String[] values)
private MySqlSchemaCollection GetTable(string sql)
public MySqlSchemaCollection GetForeignKeys(String[] restrictions)
public MySqlSchemaCollection GetForeignKeyColumns(String[] restrictions)
internal void GetParametersFromShowCreate(MySqlSchemaCollection parametersTable, String[] restrictions, MySqlSchemaCollection routines)
private void ParseProcedureBody(MySqlSchemaCollection parametersTable, string body, MySqlSchemaRow row, string nameToRestrict)
private void InitParameterRow(MySqlSchemaRow procedure, MySqlSchemaRow parameter)
private string ParseDataType(MySqlSchemaRow row, MySqlTokenizer tokenizer)
private string GetDataTypeDefaults(string type, MySqlSchemaRow row)
private void ParseDataTypeSize(MySqlSchemaRow row, string size)
}
public MySql.Data.MySqlClient.Memcached.BinaryClient : Client {
private Encoding encoding
public void .ctor(string server, UInt32 port)
public void Add(string key, object data, TimeSpan expiration)
public void Append(string key, object data)
public void Cas(string key, object data, TimeSpan expiration, ulong casUnique)
public void Decrement(string key, int amount)
public void Delete(string key)
public void FlushAll(TimeSpan delay)
public KeyValuePair`2<string, object> Get(string key)
public void Increment(string key, int amount)
public void Prepend(string key, object data)
public void Replace(string key, object data, TimeSpan expiration)
public void Set(string key, object data, TimeSpan expiration)
private void SendCommand(byte magic, byte opcode, string key, object data, TimeSpan expiration, bool hasExtra)
private void SendCommand(byte magic, byte opcode, string key, String& value)
private void SendCommand(byte magic, byte opcode, string key)
private void SendCommand(byte magic, byte opcode, TimeSpan expiration)
private void SendCommand(byte magic, byte opcode, string key, int amount)
private Byte[] GetResponse()
private void ValidateResponse(Byte[] res)
private Byte[] EncodeStoreCommand(byte magic, byte opcode, string key, object data, TimeSpan expiration, bool hasExtra)
private Byte[] EncodeGetCommand(byte magic, byte opcode, string key)
private Byte[] EncodeFlushCommand(byte magic, byte opcode, TimeSpan expiration)
private Byte[] EncodeIncrCommand(byte magic, byte opcode, string key, int amount)
private void WriteToMemoryStream(Byte[] data, MemoryStream ms)
}
public MySql.Data.MySqlClient.Memcached.Client : object {
protected UInt32 port
protected string server
protected Stream stream
public Client GetInstance(string server, UInt32 port, MemcachedFlags flags)
public void Open()
public void Close()
protected void .ctor(string server, UInt32 port)
public void Add(string key, object data, TimeSpan expiration)
public void Append(string key, object data)
public void Cas(string key, object data, TimeSpan expiration, ulong casUnique)
public void Decrement(string key, int amount)
public void Delete(string key)
public void FlushAll(TimeSpan delay)
public KeyValuePair`2<string, object> Get(string key)
public void Increment(string key, int amount)
public void Prepend(string key, object data)
public void Replace(string key, object data, TimeSpan expiration)
public void Set(string key, object data, TimeSpan expiration)
}
public MySql.Data.MySqlClient.Memcached.MemcachedException : Exception {
public void .ctor(string msg)
public void .ctor(string msg, Exception e)
}
public MySql.Data.MySqlClient.Memcached.MemcachedFlags : Enum {
public ushort value__
public MemcachedFlags TextProtocol
public MemcachedFlags BinaryProtocol
public MemcachedFlags Tcp
}
public MySql.Data.MySqlClient.Memcached.TextClient : Client {
private Encoding encoding
private string PROTOCOL_ADD
private string PROTOCOL_APPEND
private string PROTOCOL_CAS
private string PROTOCOL_DECREMENT
private string PROTOCOL_DELETE
private string PROTOCOL_FLUSHALL
private string PROTOCOL_GET
private string PROTOCOL_GETS
private string PROTOCOL_INCREMENT
private string PROTOCOL_PREPEND
private string PROTOCOL_REPLACE
private string PROTOCOL_SET
private string VALUE
private string END
private string ERR_ERROR
private string ERR_CLIENT_ERROR
private string ERR_SERVER_ERROR
protected internal void .ctor(string server, UInt32 port)
public void Add(string key, object data, TimeSpan expiration)
public void Append(string key, object data)
public void Cas(string key, object data, TimeSpan expiration, ulong casUnique)
public void Decrement(string key, int amount)
public void Delete(string key)
public void FlushAll(TimeSpan delay)
public KeyValuePair`2<string, object> Get(string key)
private KeyValuePair`2[] Gets(String[] keys)
public void Increment(string key, int amount)
public void Prepend(string key, object data)
public void Replace(string key, object data, TimeSpan expiration)
public void Set(string key, object data, TimeSpan expiration)
private void SendCommand(string cmd, string key, object data, TimeSpan expiration, ulong casUnique)
private void SendCommand(string cmd, string key, object data, TimeSpan expiration)
private void SendCommand(string cmd, string key, object data)
private void SendCommand(string cmd, string key)
private void SendCommand(string cmd, string key, int amount)
private void SendCommand(string cmd, TimeSpan expiration)
private void ValidateErrorResponse(Byte[] res)
private void SendData(string sData)
private KeyValuePair`2[] ParseGetResponse(Byte[] input)
private Byte[] GetResponse()
}
public MySql.Data.MySqlClient.MySqlBulkLoader : object {
private string defaultFieldTerminator
private string defaultLineTerminator
private char defaultEscapeCharacter
private string fieldTerminator
private string lineTerminator
private string charSet
private string tableName
private int numLinesToIgnore
private MySqlConnection connection
private string filename
private int timeout
private bool local
private string linePrefix
private char fieldQuotationCharacter
private bool fieldQuotationOptional
private char escapeChar
private MySqlBulkLoaderPriority priority
private MySqlBulkLoaderConflictOption conflictOption
private List`1<string> columns
private List`1<string> expressions
public MySqlConnection Connection
public string FieldTerminator
public string LineTerminator
public string TableName
public string CharacterSet
public string FileName
public int Timeout
public bool Local
public int NumberOfLinesToSkip
public string LinePrefix
public char FieldQuotationCharacter
public bool FieldQuotationOptional
public char EscapeCharacter
public MySqlBulkLoaderConflictOption ConflictOption
public MySqlBulkLoaderPriority Priority
public List`1<string> Columns
public List`1<string> Expressions
public void .ctor(MySqlConnection connection)
public MySqlConnection get_Connection()
public void set_Connection(MySqlConnection value)
public string get_FieldTerminator()
public void set_FieldTerminator(string value)
public string get_LineTerminator()
public void set_LineTerminator(string value)
public string get_TableName()
public void set_TableName(string value)
public string get_CharacterSet()
public void set_CharacterSet(string value)
public string get_FileName()
public void set_FileName(string value)
public int get_Timeout()
public void set_Timeout(int value)
public bool get_Local()
public void set_Local(bool value)
public int get_NumberOfLinesToSkip()
public void set_NumberOfLinesToSkip(int value)
public string get_LinePrefix()
public void set_LinePrefix(string value)
public char get_FieldQuotationCharacter()
public void set_FieldQuotationCharacter(char value)
public bool get_FieldQuotationOptional()
public void set_FieldQuotationOptional(bool value)
public char get_EscapeCharacter()
public void set_EscapeCharacter(char value)
public MySqlBulkLoaderConflictOption get_ConflictOption()
public void set_ConflictOption(MySqlBulkLoaderConflictOption value)
public MySqlBulkLoaderPriority get_Priority()
public void set_Priority(MySqlBulkLoaderPriority value)
public List`1<string> get_Columns()
public List`1<string> get_Expressions()
public int Load()
private string BuildSqlCommand()
}
public MySql.Data.MySqlClient.MySqlBulkLoaderConflictOption : Enum {
public int value__
public MySqlBulkLoaderConflictOption None
public MySqlBulkLoaderConflictOption Replace
public MySqlBulkLoaderConflictOption Ignore
}
public MySql.Data.MySqlClient.MySqlBulkLoaderPriority : Enum {
public int value__
public MySqlBulkLoaderPriority None
public MySqlBulkLoaderPriority Low
public MySqlBulkLoaderPriority Concurrent
}
public MySql.Data.MySqlClient.MySqlCertificateStoreLocation : Enum {
public int value__
public MySqlCertificateStoreLocation None
public MySqlCertificateStoreLocation CurrentUser
public MySqlCertificateStoreLocation LocalMachine
}
public MySql.Data.MySqlClient.MySqlClientFactory : DbProviderFactory {
public MySqlClientFactory Instance
private Type dbServicesType
private FieldInfo mySqlDbProviderServicesInstance
public bool CanCreateDataSourceEnumerator
private Type DbServicesType
private FieldInfo MySqlDbProviderServicesInstance
public DbCommandBuilder CreateCommandBuilder()
public DbCommand CreateCommand()
public DbConnection CreateConnection()
public DbDataAdapter CreateDataAdapter()
public DbParameter CreateParameter()
public DbConnectionStringBuilder CreateConnectionStringBuilder()
public bool get_CanCreateDataSourceEnumerator()
private Type get_DbServicesType()
private FieldInfo get_MySqlDbProviderServicesInstance()
private object System.IServiceProvider.GetService(Type serviceType)
}
public MySql.Data.MySqlClient.MySqlClientPermission : DBDataPermission {
public void .ctor(PermissionState permissionState)
private void .ctor(MySqlClientPermission permission)
internal void .ctor(MySqlClientPermissionAttribute permissionAttribute)
internal void .ctor(DBDataPermission permission)
internal void .ctor(string connectionString)
public void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior)
public IPermission Copy()
}
public MySql.Data.MySqlClient.MySqlClientPermissionAttribute : DBDataPermissionAttribute {
public void .ctor(SecurityAction action)
public IPermission CreatePermission()
}
public MySql.Data.MySqlClient.MySqlCommand : DbCommand {
private MySqlConnection connection
private MySqlTransaction curTransaction
private string cmdText
private CommandType cmdType
private long updatedRowCount
private MySqlParameterCollection parameters
private IAsyncResult asyncResult
internal long lastInsertedId
private PreparableStatement statement
private int commandTimeout
private bool canceled
private bool resetSqlSelect
private List`1<MySqlCommand> batch
private string batchableCommandText
private CommandTimer commandTimer
private bool useDefaultTimeout
private bool shouldCache
private int cacheAge
private bool internallyCreated
internal AsyncDelegate caller
internal Exception thrownException
private UpdateRowSource <UpdatedRowSource>k__BackingField
private bool <DesignTimeVisible>k__BackingField
public long LastInsertedId
public string CommandText
public int CommandTimeout
public CommandType CommandType
public bool IsPrepared
public MySqlConnection Connection
public MySqlParameterCollection Parameters
public MySqlTransaction Transaction
public bool EnableCaching
public int CacheAge
internal List`1<MySqlCommand> Batch
internal bool Canceled
internal string BatchableCommandText
internal bool InternallyCreated
public UpdateRowSource UpdatedRowSource
public bool DesignTimeVisible
protected DbConnection DbConnection
protected DbParameterCollection DbParameterCollection
protected DbTransaction DbTransaction
public void .ctor(string cmdText)
public void .ctor(string cmdText, MySqlConnection connection)
public void .ctor(string cmdText, MySqlConnection connection, MySqlTransaction transaction)
protected void Finalize()
public long get_LastInsertedId()
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public bool get_IsPrepared()
public MySqlConnection get_Connection()
public void set_Connection(MySqlConnection value)
public MySqlParameterCollection get_Parameters()
public MySqlTransaction get_Transaction()
public void set_Transaction(MySqlTransaction value)
public bool get_EnableCaching()
public void set_EnableCaching(bool value)
public int get_CacheAge()
public void set_CacheAge(int value)
internal List`1<MySqlCommand> get_Batch()
internal bool get_Canceled()
internal string get_BatchableCommandText()
internal bool get_InternallyCreated()
internal void set_InternallyCreated(bool value)
public void Cancel()
public MySqlParameter CreateParameter()
private void CheckState()
public int ExecuteNonQuery()
internal void ClearCommandTimer()
internal void Close(MySqlDataReader reader)
private void ResetReader()
internal void ResetSqlSelectLimit()
public MySqlDataReader ExecuteReader()
public MySqlDataReader ExecuteReader(CommandBehavior behavior)
private void EnsureCommandIsReadOnly(string sql)
private bool IsReadOnlyCommand(string sql)
public object ExecuteScalar()
private void HandleCommandBehaviors(CommandBehavior behavior)
private void Prepare(int cursorPageSize)
public void Prepare()
internal object AsyncExecuteWrapper(int type, CommandBehavior behavior)
public IAsyncResult BeginExecuteReader()
public IAsyncResult BeginExecuteReader(CommandBehavior behavior)
public MySqlDataReader EndExecuteReader(IAsyncResult result)
public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject)
public IAsyncResult BeginExecuteNonQuery()
public int EndExecuteNonQuery(IAsyncResult asyncResult)
internal long EstimatedSize()
private bool AddCallStatement(string query)
public MySqlCommand Clone()
private object System.ICloneable.Clone()
internal void AddToBatch(MySqlCommand command)
internal string GetCommandTextForBatching()
private void Throw(Exception ex)
public void Dispose()
protected void Dispose(bool disposing)
private void Constructor()
private void PartialClone(MySqlCommand clone)
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
protected DbParameter CreateDbParameter()
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
protected DbParameterCollection get_DbParameterCollection()
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
}
public MySql.Data.MySqlClient.MySqlCommandBuilder : DbCommandBuilder {
public MySqlDataAdapter DataAdapter
public void .ctor(MySqlDataAdapter adapter)
public MySqlDataAdapter get_DataAdapter()
public void set_DataAdapter(MySqlDataAdapter value)
public void DeriveParameters(MySqlCommand command)
private List`1<string> GetPossibleValues(MySqlSchemaRow row)
private ParameterDirection GetDirection(MySqlSchemaRow row)
public MySqlCommand GetDeleteCommand()
public MySqlCommand GetUpdateCommand()
public MySqlCommand GetInsertCommand()
public string QuoteIdentifier(string unquotedIdentifier)
public string UnquoteIdentifier(string quotedIdentifier)
protected DataTable GetSchemaTable(DbCommand sourceCommand)
protected string GetParameterName(string parameterName)
protected void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause)
protected string GetParameterName(int parameterOrdinal)
protected string GetParameterPlaceholder(int parameterOrdinal)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
private void RowUpdating(object sender, MySqlRowUpdatingEventArgs args)
}
public MySql.Data.MySqlClient.MySqlConfiguration : ConfigurationSection {
private MySqlConfiguration settings
public MySqlConfiguration Settings
public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> ExceptionInterceptors
public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> CommandInterceptors
public GenericConfigurationElementCollection`1<AuthenticationPluginConfigurationElement> AuthenticationPlugins
public ReplicationConfigurationElement Replication
public MySqlConfiguration get_Settings()
public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> get_ExceptionInterceptors()
public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> get_CommandInterceptors()
public GenericConfigurationElementCollection`1<AuthenticationPluginConfigurationElement> get_AuthenticationPlugins()
public ReplicationConfigurationElement get_Replication()
public void set_Replication(ReplicationConfigurationElement value)
}
internal MySql.Data.MySqlClient.MySqlConnectAttrs : object {
public string ClientName
public string PID
public string ClientVersion
public string Platform
public string ProgramName
public string OS
public string OSDetails
public string Thread
public string get_ClientName()
public string get_PID()
public string get_ClientVersion()
public string get_Platform()
public string get_ProgramName()
public string get_OS()
public string get_OSDetails()
public string get_Thread()
private bool Is64BitOS()
}
public MySql.Data.MySqlClient.MySqlConnection : DbConnection {
internal ConnectionState connectionState
internal Driver driver
internal bool hasBeenOpen
private SchemaProvider schemaProvider
private ProcedureCache procedureCache
private bool isInUse
private PerformanceMonitor perfMonitor
private ExceptionInterceptor exceptionInterceptor
internal CommandInterceptor commandInterceptor
private bool isKillQueryConnection
private string database
private int commandTimeout
private MySqlInfoMessageEventHandler InfoMessage
private Cache`2<string, MySqlConnectionStringBuilder> connectionStringCache
private MySqlConnectionStringBuilder <Settings>k__BackingField
internal PerformanceMonitor PerfMonitor
internal ProcedureCache ProcedureCache
internal MySqlConnectionStringBuilder Settings
internal MySqlDataReader Reader
internal bool SoftClosed
internal bool IsInUse
public int ServerThread
public string DataSource
public int ConnectionTimeout
public string Database
public bool UseCompression
public ConnectionState State
public string ServerVersion
public string ConnectionString
protected DbProviderFactory DbProviderFactory
public bool IsPasswordExpired
public void add_InfoMessage(MySqlInfoMessageEventHandler value)
public void remove_InfoMessage(MySqlInfoMessageEventHandler value)
public void .ctor(string connectionString)
protected void Finalize()
internal PerformanceMonitor get_PerfMonitor()
internal ProcedureCache get_ProcedureCache()
internal MySqlConnectionStringBuilder get_Settings()
private void set_Settings(MySqlConnectionStringBuilder value)
internal MySqlDataReader get_Reader()
internal void set_Reader(MySqlDataReader value)
internal void OnInfoMessage(MySqlInfoMessageEventArgs args)
internal bool get_SoftClosed()
internal bool get_IsInUse()
internal void set_IsInUse(bool value)
public int get_ServerThread()
public string get_DataSource()
public int get_ConnectionTimeout()
public string get_Database()
public bool get_UseCompression()
public ConnectionState get_State()
public string get_ServerVersion()
public string get_ConnectionString()
public void set_ConnectionString(string value)
protected DbProviderFactory get_DbProviderFactory()
public bool get_IsPasswordExpired()
public void EnlistTransaction(Transaction transaction)
public MySqlTransaction BeginTransaction()
public MySqlTransaction BeginTransaction(IsolationLevel iso)
public void ChangeDatabase(string databaseName)
internal void SetState(ConnectionState newConnectionState, bool broadcast)
public bool Ping()
public void Open()
public MySqlCommand CreateCommand()
public object Clone()
internal void Abort()
internal void CloseFully()
public void Close()
internal string CurrentDatabase()
internal void HandleTimeoutOrThreadAbort(Exception ex)
public void CancelQuery(int timeout)
internal bool SetCommandTimeout(int value)
internal void ClearCommandTimeout()
public MySqlSchemaCollection GetSchemaCollection(string collectionName, String[] restrictionValues)
public void ClearPool(MySqlConnection connection)
public void ClearAllPools()
internal void Throw(Exception ex)
public void Dispose()
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
protected DbCommand CreateDbCommand()
private void AssertPermissions()
protected void Dispose(bool disposing)
}
public MySql.Data.MySqlClient.MySqlConnectionProtocol : Enum {
public int value__
public MySqlConnectionProtocol Sockets
public MySqlConnectionProtocol Socket
public MySqlConnectionProtocol Tcp
public MySqlConnectionProtocol Pipe
public MySqlConnectionProtocol NamedPipe
public MySqlConnectionProtocol UnixSocket
public MySqlConnectionProtocol Unix
public MySqlConnectionProtocol SharedMemory
public MySqlConnectionProtocol Memory
}
public MySql.Data.MySqlClient.MySqlConnectionStringBuilder : DbConnectionStringBuilder {
internal Dictionary`2<string, object> values
private MySqlConnectionStringOptionCollection options
private string <FabricGroup>k__BackingField
private string <ShardingTable>k__BackingField
private object <ShardingKey>k__BackingField
private Nullable`1<int> <FabricServerMode>k__BackingField
private Nullable`1<int> <FabricScope>k__BackingField
private bool <HasProcAccess>k__BackingField
private SetterDelegate CS$<>9__CachedAnonymousMethodDelegatea
private GetterDelegate CS$<>9__CachedAnonymousMethodDelegateb
private SetterDelegate CS$<>9__CachedAnonymousMethodDelegatec
private GetterDelegate CS$<>9__CachedAnonymousMethodDelegated
private SetterDelegate CS$<>9__CachedAnonymousMethodDelegatee
private GetterDelegate CS$<>9__CachedAnonymousMethodDelegatef
private SetterDelegate CS$<>9__CachedAnonymousMethodDelegate10
private GetterDelegate CS$<>9__CachedAnonymousMethodDelegate11
private SetterDelegate CS$<>9__CachedAnonymousMethodDelegate12
private GetterDelegate CS$<>9__CachedAnonymousMethodDelegate13
public string Server
public string Database
public MySqlConnectionProtocol ConnectionProtocol
public string PipeName
public bool UseCompression
public bool AllowBatch
public bool Logging
public string SharedMemoryName
public bool UseOldSyntax
public UInt32 Port
public UInt32 ConnectionTimeout
public UInt32 DefaultCommandTimeout
public string UserID
public string Password
public bool PersistSecurityInfo
internal bool Encrypt
public string CertificateFile
public string CertificatePassword
public MySqlCertificateStoreLocation CertificateStoreLocation
public string CertificateThumbprint
public bool IntegratedSecurity
public bool AllowZeroDateTime
public bool ConvertZeroDateTime
public bool UseUsageAdvisor
public UInt32 ProcedureCacheSize
public bool UsePerformanceMonitor
public bool IgnorePrepare
public bool UseProcedureBodies
public bool AutoEnlist
public bool RespectBinaryFlags
public bool TreatTinyAsBoolean
public bool AllowUserVariables
public bool InteractiveSession
public bool FunctionsReturnString
public bool UseAffectedRows
public bool OldGuids
public UInt32 Keepalive
public bool SqlServerMode
public bool TableCaching
public int DefaultTableCacheAge
public bool CheckParameters
public bool Replication
public string ExceptionInterceptors
public string CommandInterceptors
public bool IncludeSecurityAsserts
public UInt32 ConnectionLifeTime
public bool Pooling
public UInt32 MinimumPoolSize
public UInt32 MaximumPoolSize
public bool ConnectionReset
public bool CacheServerProperties
public string CharacterSet
public bool TreatBlobsAsUTF8
public string BlobAsUTF8IncludePattern
public string BlobAsUTF8ExcludePattern
public MySqlSslMode SslMode
public bool UseDefaultCommandTimeoutForEF
public string FabricGroup
public string ShardingTable
public object ShardingKey
public Nullable`1<int> FabricServerMode
public Nullable`1<int> FabricScope
internal bool HasProcAccess
public object Item
public void .ctor(string connStr)
public string get_Server()
public void set_Server(string value)
public string get_Database()
public void set_Database(string value)
public MySqlConnectionProtocol get_ConnectionProtocol()
public void set_ConnectionProtocol(MySqlConnectionProtocol value)
public string get_PipeName()
public void set_PipeName(string value)
public bool get_UseCompression()
public void set_UseCompression(bool value)
public bool get_AllowBatch()
public void set_AllowBatch(bool value)
public bool get_Logging()
public void set_Logging(bool value)
public string get_SharedMemoryName()
public void set_SharedMemoryName(string value)
public bool get_UseOldSyntax()
public void set_UseOldSyntax(bool value)
public UInt32 get_Port()
public void set_Port(UInt32 value)
public UInt32 get_ConnectionTimeout()
public void set_ConnectionTimeout(UInt32 value)
public UInt32 get_DefaultCommandTimeout()
public void set_DefaultCommandTimeout(UInt32 value)
public string get_UserID()
public void set_UserID(string value)
public string get_Password()
public void set_Password(string value)
public bool get_PersistSecurityInfo()
public void set_PersistSecurityInfo(bool value)
internal bool get_Encrypt()
internal void set_Encrypt(bool value)
public string get_CertificateFile()
public void set_CertificateFile(string value)
public string get_CertificatePassword()
public void set_CertificatePassword(string value)
public MySqlCertificateStoreLocation get_CertificateStoreLocation()
public void set_CertificateStoreLocation(MySqlCertificateStoreLocation value)
public string get_CertificateThumbprint()
public void set_CertificateThumbprint(string value)
public bool get_IntegratedSecurity()
public void set_IntegratedSecurity(bool value)
public bool get_AllowZeroDateTime()
public void set_AllowZeroDateTime(bool value)
public bool get_ConvertZeroDateTime()
public void set_ConvertZeroDateTime(bool value)
public bool get_UseUsageAdvisor()
public void set_UseUsageAdvisor(bool value)
public UInt32 get_ProcedureCacheSize()
public void set_ProcedureCacheSize(UInt32 value)
public bool get_UsePerformanceMonitor()
public void set_UsePerformanceMonitor(bool value)
public bool get_IgnorePrepare()
public void set_IgnorePrepare(bool value)
public bool get_UseProcedureBodies()
public void set_UseProcedureBodies(bool value)
public bool get_AutoEnlist()
public void set_AutoEnlist(bool value)
public bool get_RespectBinaryFlags()
public void set_RespectBinaryFlags(bool value)
public bool get_TreatTinyAsBoolean()
public void set_TreatTinyAsBoolean(bool value)
public bool get_AllowUserVariables()
public void set_AllowUserVariables(bool value)
public bool get_InteractiveSession()
public void set_InteractiveSession(bool value)
public bool get_FunctionsReturnString()
public void set_FunctionsReturnString(bool value)
public bool get_UseAffectedRows()
public void set_UseAffectedRows(bool value)
public bool get_OldGuids()
public void set_OldGuids(bool value)
public UInt32 get_Keepalive()
public void set_Keepalive(UInt32 value)
public bool get_SqlServerMode()
public void set_SqlServerMode(bool value)
public bool get_TableCaching()
public void set_TableCaching(bool value)
public int get_DefaultTableCacheAge()
public void set_DefaultTableCacheAge(int value)
public bool get_CheckParameters()
public void set_CheckParameters(bool value)
public bool get_Replication()
public void set_Replication(bool value)
public string get_ExceptionInterceptors()
public void set_ExceptionInterceptors(string value)
public string get_CommandInterceptors()
public void set_CommandInterceptors(string value)
public bool get_IncludeSecurityAsserts()
public void set_IncludeSecurityAsserts(bool value)
public UInt32 get_ConnectionLifeTime()
public void set_ConnectionLifeTime(UInt32 value)
public bool get_Pooling()
public void set_Pooling(bool value)
public UInt32 get_MinimumPoolSize()
public void set_MinimumPoolSize(UInt32 value)
public UInt32 get_MaximumPoolSize()
public void set_MaximumPoolSize(UInt32 value)
public bool get_ConnectionReset()
public void set_ConnectionReset(bool value)
public bool get_CacheServerProperties()
public void set_CacheServerProperties(bool value)
public string get_CharacterSet()
public void set_CharacterSet(string value)
public bool get_TreatBlobsAsUTF8()
public void set_TreatBlobsAsUTF8(bool value)
public string get_BlobAsUTF8IncludePattern()
public void set_BlobAsUTF8IncludePattern(string value)
public string get_BlobAsUTF8ExcludePattern()
public void set_BlobAsUTF8ExcludePattern(string value)
public MySqlSslMode get_SslMode()
public void set_SslMode(MySqlSslMode value)
public bool get_UseDefaultCommandTimeoutForEF()
public void set_UseDefaultCommandTimeoutForEF(bool value)
public string get_FabricGroup()
internal void set_FabricGroup(string value)
public string get_ShardingTable()
internal void set_ShardingTable(string value)
public object get_ShardingKey()
internal void set_ShardingKey(object value)
public Nullable`1<int> get_FabricServerMode()
internal void set_FabricServerMode(Nullable`1<int> value)
public Nullable`1<int> get_FabricScope()
internal void set_FabricScope(Nullable`1<int> value)
internal bool get_HasProcAccess()
internal void set_HasProcAccess(bool value)
public object get_Item(string keyword)
public void set_Item(string keyword, object value)
internal Regex GetBlobAsUTF8IncludeRegex()
internal Regex GetBlobAsUTF8ExcludeRegex()
public void Clear()
internal void SetValue(string keyword, object value)
private MySqlConnectionStringOption GetOption(string key)
public bool ContainsKey(string keyword)
public bool Remove(string keyword)
public string GetConnectionString(bool includePass)
public bool Equals(object obj)
private void <.cctor>b__0(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object value)
private object <.cctor>b__1(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender)
private void <.cctor>b__2(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object Value)
private object <.cctor>b__3(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender)
private void <.cctor>b__4(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object value)
private object <.cctor>b__5(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender)
private void <.cctor>b__6(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object value)
private object <.cctor>b__7(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender)
private void <.cctor>b__8(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object value)
private object <.cctor>b__9(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender)
}
internal MySql.Data.MySqlClient.MySqlConnectionStringOption : object {
private String[] <Synonyms>k__BackingField
private bool <Obsolete>k__BackingField
private Type <BaseType>k__BackingField
private string <Keyword>k__BackingField
private object <DefaultValue>k__BackingField
private SetterDelegate <Setter>k__BackingField
private GetterDelegate <Getter>k__BackingField
private SetterDelegate CS$<>9__CachedAnonymousMethodDelegate2
private GetterDelegate CS$<>9__CachedAnonymousMethodDelegate3
public String[] Synonyms
public bool Obsolete
public Type BaseType
public string Keyword
public object DefaultValue
public SetterDelegate Setter
public GetterDelegate Getter
public void .ctor(string keyword, string synonyms, Type baseType, object defaultValue, bool obsolete, SetterDelegate setter, GetterDelegate getter)
public void .ctor(string keyword, string synonyms, Type baseType, object defaultValue, bool obsolete)
public String[] get_Synonyms()
private void set_Synonyms(String[] value)
public bool get_Obsolete()
private void set_Obsolete(bool value)
public Type get_BaseType()
private void set_BaseType(Type value)
public string get_Keyword()
private void set_Keyword(string value)
public object get_DefaultValue()
private void set_DefaultValue(object value)
public SetterDelegate get_Setter()
private void set_Setter(SetterDelegate value)
public GetterDelegate get_Getter()
private void set_Getter(GetterDelegate value)
public bool HasKeyword(string key)
public void Clean(MySqlConnectionStringBuilder builder)
public void ValidateValue(Object& value)
private bool ParseEnum(string requestedValue, Object& value)
private void <.ctor>b__0(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object value)
private object <.ctor>b__1(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender)
}
internal MySql.Data.MySqlClient.MySqlConnectionStringOptionCollection : Dictionary`2<string, MySqlConnectionStringOption> {
private List`1<MySqlConnectionStringOption> options
internal List`1<MySqlConnectionStringOption> Options
internal List`1<MySqlConnectionStringOption> get_Options()
internal void Add(MySqlConnectionStringOption option)
internal MySqlConnectionStringOption Get(string keyword)
}
public MySql.Data.MySqlClient.MySqlDataAdapter : DbDataAdapter {
private bool loadingDefaults
private int updateBatchSize
private List`1<IDbCommand> commandBatch
private MySqlRowUpdatingEventHandler RowUpdating
private MySqlRowUpdatedEventHandler RowUpdated
public MySqlCommand DeleteCommand
public MySqlCommand InsertCommand
public MySqlCommand SelectCommand
public MySqlCommand UpdateCommand
internal bool LoadDefaults
public int UpdateBatchSize
public void add_RowUpdating(MySqlRowUpdatingEventHandler value)
public void remove_RowUpdating(MySqlRowUpdatingEventHandler value)
public void add_RowUpdated(MySqlRowUpdatedEventHandler value)
public void remove_RowUpdated(MySqlRowUpdatedEventHandler value)
public void .ctor(MySqlCommand selectCommand)
public void .ctor(string selectCommandText, MySqlConnection connection)
public void .ctor(string selectCommandText, string selectConnString)
public MySqlCommand get_DeleteCommand()
public void set_DeleteCommand(MySqlCommand value)
public MySqlCommand get_InsertCommand()
public void set_InsertCommand(MySqlCommand value)
public MySqlCommand get_SelectCommand()
public void set_SelectCommand(MySqlCommand value)
public MySqlCommand get_UpdateCommand()
public void set_UpdateCommand(MySqlCommand value)
internal bool get_LoadDefaults()
internal void set_LoadDefaults(bool value)
private void OpenConnectionIfClosed(DataRowState state, List`1<MySqlConnection> openedConnections)
protected int Update(DataRow[] dataRows, DataTableMapping tableMapping)
public int get_UpdateBatchSize()
public void set_UpdateBatchSize(int value)
protected void InitializeBatching()
protected int AddToBatch(IDbCommand command)
protected int ExecuteBatch()
protected void ClearBatch()
protected void TerminateBatching()
protected IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex)
protected RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected void OnRowUpdating(RowUpdatingEventArgs value)
protected void OnRowUpdated(RowUpdatedEventArgs value)
}
public MySql.Data.MySqlClient.MySqlDataReader : DbDataReader {
private bool isOpen
private CommandBehavior commandBehavior
private MySqlCommand command
internal long affectedRows
internal Driver driver
private PreparableStatement statement
private ResultSet resultSet
private bool disableZeroAffectedRows
private MySqlConnection connection
internal PreparableStatement Statement
internal MySqlCommand Command
internal ResultSet ResultSet
internal CommandBehavior CommandBehavior
public int FieldCount
public bool HasRows
public bool IsClosed
public int RecordsAffected
public object Item
public object Item
public int Depth
internal void .ctor(MySqlCommand cmd, PreparableStatement statement, CommandBehavior behavior)
internal PreparableStatement get_Statement()
internal MySqlCommand get_Command()
internal ResultSet get_ResultSet()
internal CommandBehavior get_CommandBehavior()
public int get_FieldCount()
public bool get_HasRows()
public bool get_IsClosed()
public int get_RecordsAffected()
public object get_Item(int i)
public object get_Item(string name)
public void Close()
public bool GetBoolean(string name)
public bool GetBoolean(int i)
public byte GetByte(string name)
public byte GetByte(int i)
public sbyte GetSByte(string name)
public sbyte GetSByte(int i)
public long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length)
private object ChangeType(IMySqlValue value, int fieldIndex, Type newType)
public char GetChar(string name)
public char GetChar(int i)
public long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length)
public string GetDataTypeName(int i)
public MySqlDateTime GetMySqlDateTime(string column)
public MySqlDateTime GetMySqlDateTime(int column)
public DateTime GetDateTime(string column)
public DateTime GetDateTime(int i)
public MySqlDecimal GetMySqlDecimal(string column)
public MySqlDecimal GetMySqlDecimal(int i)
public decimal GetDecimal(string column)
public decimal GetDecimal(int i)
public double GetDouble(string column)
public double GetDouble(int i)
public Type GetFieldType(string column)
public Type GetFieldType(int i)
public float GetFloat(string column)
public float GetFloat(int i)
public Guid GetGuid(string column)
public Guid GetGuid(int i)
public short GetInt16(string column)
public short GetInt16(int i)
public int GetInt32(string column)
public int GetInt32(int i)
public long GetInt64(string column)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public string GetString(string column)
public string GetString(int i)
public TimeSpan GetTimeSpan(string column)
public TimeSpan GetTimeSpan(int column)
public object GetValue(int i)
public int GetValues(Object[] values)
public ushort GetUInt16(string column)
public ushort GetUInt16(int column)
public UInt32 GetUInt32(string column)
public UInt32 GetUInt32(int column)
public ulong GetUInt64(string column)
public ulong GetUInt64(int column)
private IDataReader System.Data.IDataRecord.GetData(int i)
public bool IsDBNull(int i)
public bool NextResult()
public bool Read()
private IMySqlValue GetFieldValue(int index, bool checkNull)
private void ClearKillFlag()
private void ProcessOutputParameters()
private void AdjustOutputTypes()
private void Throw(Exception ex)
public void Dispose()
internal void Dispose(bool disposing)
protected void Finalize()
public int get_Depth()
public MySqlGeometry GetMySqlGeometry(int i)
public MySqlGeometry GetMySqlGeometry(string column)
public DataTable GetSchemaTable()
public IEnumerator GetEnumerator()
}
public MySql.Data.MySqlClient.MySqlDbType : Enum {
public int value__
public MySqlDbType Decimal
public MySqlDbType Byte
public MySqlDbType Int16
public MySqlDbType Int24
public MySqlDbType Int32
public MySqlDbType Int64
public MySqlDbType Float
public MySqlDbType Double
public MySqlDbType Timestamp
public MySqlDbType Date
public MySqlDbType Time
public MySqlDbType DateTime
public MySqlDbType Datetime
public MySqlDbType Year
public MySqlDbType Newdate
public MySqlDbType VarString
public MySqlDbType Bit
public MySqlDbType NewDecimal
public MySqlDbType Enum
public MySqlDbType Set
public MySqlDbType TinyBlob
public MySqlDbType MediumBlob
public MySqlDbType LongBlob
public MySqlDbType Blob
public MySqlDbType VarChar
public MySqlDbType String
public MySqlDbType Geometry
public MySqlDbType UByte
public MySqlDbType UInt16
public MySqlDbType UInt24
public MySqlDbType UInt32
public MySqlDbType UInt64
public MySqlDbType Binary
public MySqlDbType VarBinary
public MySqlDbType TinyText
public MySqlDbType MediumText
public MySqlDbType LongText
public MySqlDbType Text
public MySqlDbType Guid
}
public MySql.Data.MySqlClient.MySqlDriverType : Enum {
public int value__
public MySqlDriverType Native
public MySqlDriverType Client
public MySqlDriverType Embedded
}
public MySql.Data.MySqlClient.MySqlError : object {
private string level
private int code
private string message
public string Level
public int Code
public string Message
public void .ctor(string level, int code, string message)
public string get_Level()
public int get_Code()
public string get_Message()
}
public MySql.Data.MySqlClient.MySqlErrorCode : Enum {
public int value__
public MySqlErrorCode None
public MySqlErrorCode HashCheck
public MySqlErrorCode ISAMCheck
public MySqlErrorCode No
public MySqlErrorCode Yes
public MySqlErrorCode CannotCreateFile
public MySqlErrorCode CannotCreateTable
public MySqlErrorCode CannotCreateDatabase
public MySqlErrorCode DatabaseCreateExists
public MySqlErrorCode DatabaseDropExists
public MySqlErrorCode DatabaseDropDelete
public MySqlErrorCode DatabaseDropRemoveDir
public MySqlErrorCode CannotDeleteFile
public MySqlErrorCode CannotFindSystemRecord
public MySqlErrorCode CannotGetStatus
public MySqlErrorCode CannotGetWorkingDirectory
public MySqlErrorCode CannotLock
public MySqlErrorCode CannotOpenFile
public MySqlErrorCode FileNotFound
public MySqlErrorCode CannotReadDirectory
public MySqlErrorCode CannotSetWorkingDirectory
public MySqlErrorCode CheckRead
public MySqlErrorCode DiskFull
public MySqlErrorCode DuplicateKey
public MySqlErrorCode ErrorOnClose
public MySqlErrorCode ErrorOnRead
public MySqlErrorCode ErrorOnRename
public MySqlErrorCode ErrorOnWrite
public MySqlErrorCode FileUsed
public MySqlErrorCode FileSortAborted
public MySqlErrorCode FormNotFound
public MySqlErrorCode GetErrorNumber
public MySqlErrorCode IllegalHA
public MySqlErrorCode KeyNotFound
public MySqlErrorCode NotFormFile
public MySqlErrorCode NotKeyFile
public MySqlErrorCode OldKeyFile
public MySqlErrorCode OpenAsReadOnly
public MySqlErrorCode OutOfMemory
public MySqlErrorCode OutOfSortMemory
public MySqlErrorCode UnexepectedEOF
public MySqlErrorCode ConnectionCountError
public MySqlErrorCode OutOfResources
public MySqlErrorCode UnableToConnectToHost
public MySqlErrorCode HandshakeError
public MySqlErrorCode DatabaseAccessDenied
public MySqlErrorCode AccessDenied
public MySqlErrorCode NoDatabaseSelected
public MySqlErrorCode UnknownCommand
public MySqlErrorCode ColumnCannotBeNull
public MySqlErrorCode UnknownDatabase
public MySqlErrorCode TableExists
public MySqlErrorCode BadTable
public MySqlErrorCode NonUnique
public MySqlErrorCode ServerShutdown
public MySqlErrorCode BadFieldError
public MySqlErrorCode WrongFieldWithGroup
public MySqlErrorCode WrongGroupField
public MySqlErrorCode WrongSumSelected
public MySqlErrorCode WrongValueCount
public MySqlErrorCode TooLongIdentifier
public MySqlErrorCode DuplicateFieldName
public MySqlErrorCode DuplicateKeyName
public MySqlErrorCode DuplicateKeyEntry
public MySqlErrorCode WrongFieldSpecifier
public MySqlErrorCode ParseError
public MySqlErrorCode EmptyQuery
public MySqlErrorCode NonUniqueTable
public MySqlErrorCode InvalidDefault
public MySqlErrorCode MultiplePrimaryKey
public MySqlErrorCode TooManyKeys
public MySqlErrorCode TooManyKeysParts
public MySqlErrorCode TooLongKey
public MySqlErrorCode KeyColumnDoesNotExist
public MySqlErrorCode BlobUsedAsKey
public MySqlErrorCode TooBigFieldLength
public MySqlErrorCode WrongAutoKey
public MySqlErrorCode Ready
public MySqlErrorCode NormalShutdown
public MySqlErrorCode GotSignal
public MySqlErrorCode ShutdownComplete
public MySqlErrorCode ForcingClose
public MySqlErrorCode IPSocketError
public MySqlErrorCode NoSuchIndex
public MySqlErrorCode WrongFieldTerminators
public MySqlErrorCode BlobsAndNoTerminated
public MySqlErrorCode TextFileNotReadable
public MySqlErrorCode FileExists
public MySqlErrorCode LoadInfo
public MySqlErrorCode AlterInfo
public MySqlErrorCode WrongSubKey
public MySqlErrorCode CannotRemoveAllFields
public MySqlErrorCode CannotDropFieldOrKey
public MySqlErrorCode InsertInfo
public MySqlErrorCode UpdateTableUsed
public MySqlErrorCode NoSuchThread
public MySqlErrorCode KillDenied
public MySqlErrorCode NoTablesUsed
public MySqlErrorCode TooBigSet
public MySqlErrorCode NoUniqueLogFile
public MySqlErrorCode TableNotLockedForWrite
public MySqlErrorCode TableNotLocked
public MySqlErrorCode BlobCannotHaveDefault
public MySqlErrorCode WrongDatabaseName
public MySqlErrorCode WrongTableName
public MySqlErrorCode TooBigSelect
public MySqlErrorCode UnknownError
public MySqlErrorCode UnknownProcedure
public MySqlErrorCode WrongParameterCountToProcedure
public MySqlErrorCode WrongParametersToProcedure
public MySqlErrorCode UnknownTable
public MySqlErrorCode FieldSpecifiedTwice
public MySqlErrorCode InvalidGroupFunctionUse
public MySqlErrorCode UnsupportedExtenstion
public MySqlErrorCode TableMustHaveColumns
public MySqlErrorCode RecordFileFull
public MySqlErrorCode UnknownCharacterSet
public MySqlErrorCode TooManyTables
public MySqlErrorCode TooManyFields
public MySqlErrorCode TooBigRowSize
public MySqlErrorCode StackOverrun
public MySqlErrorCode WrongOuterJoin
public MySqlErrorCode NullColumnInIndex
public MySqlErrorCode CannotFindUDF
public MySqlErrorCode CannotInitializeUDF
public MySqlErrorCode UDFNoPaths
public MySqlErrorCode UDFExists
public MySqlErrorCode CannotOpenLibrary
public MySqlErrorCode CannotFindDLEntry
public MySqlErrorCode FunctionNotDefined
public MySqlErrorCode HostIsBlocked
public MySqlErrorCode HostNotPrivileged
public MySqlErrorCode AnonymousUser
public MySqlErrorCode PasswordNotAllowed
public MySqlErrorCode PasswordNoMatch
public MySqlErrorCode UpdateInfo
public MySqlErrorCode CannotCreateThread
public MySqlErrorCode WrongValueCountOnRow
public MySqlErrorCode CannotReopenTable
public MySqlErrorCode InvalidUseOfNull
public MySqlErrorCode RegExpError
public MySqlErrorCode MixOfGroupFunctionAndFields
public MySqlErrorCode NonExistingGrant
public MySqlErrorCode TableAccessDenied
public MySqlErrorCode ColumnAccessDenied
public MySqlErrorCode IllegalGrantForTable
public MySqlErrorCode GrantWrongHostOrUser
public MySqlErrorCode NoSuchTable
public MySqlErrorCode NonExistingTableGrant
public MySqlErrorCode NotAllowedCommand
public MySqlErrorCode SyntaxError
public MySqlErrorCode DelayedCannotChangeLock
public MySqlErrorCode TooManyDelayedThreads
public MySqlErrorCode AbortingConnection
public MySqlErrorCode PacketTooLarge
public MySqlErrorCode NetReadErrorFromPipe
public MySqlErrorCode NetFCntlError
public MySqlErrorCode NetPacketsOutOfOrder
public MySqlErrorCode NetUncompressError
public MySqlErrorCode NetReadError
public MySqlErrorCode NetReadInterrupted
public MySqlErrorCode NetErrorOnWrite
public MySqlErrorCode NetWriteInterrupted
public MySqlErrorCode TooLongString
public MySqlErrorCode TableCannotHandleBlob
public MySqlErrorCode TableCannotHandleAutoIncrement
public MySqlErrorCode DelayedInsertTableLocked
public MySqlErrorCode WrongColumnName
public MySqlErrorCode WrongKeyColumn
public MySqlErrorCode WrongMergeTable
public MySqlErrorCode DuplicateUnique
public MySqlErrorCode BlobKeyWithoutLength
public MySqlErrorCode PrimaryCannotHaveNull
public MySqlErrorCode TooManyRows
public MySqlErrorCode RequiresPrimaryKey
public MySqlErrorCode NoRAIDCompiled
public MySqlErrorCode UpdateWithoutKeysInSafeMode
public MySqlErrorCode KeyDoesNotExist
public MySqlErrorCode CheckNoSuchTable
public MySqlErrorCode CheckNotImplemented
public MySqlErrorCode CannotDoThisDuringATransaction
public MySqlErrorCode ErrorDuringCommit
public MySqlErrorCode ErrorDuringRollback
public MySqlErrorCode ErrorDuringFlushLogs
public MySqlErrorCode ErrorDuringCheckpoint
public MySqlErrorCode NewAbortingConnection
public MySqlErrorCode DumpNotImplemented
public MySqlErrorCode FlushMasterBinLogClosed
public MySqlErrorCode IndexRebuild
public MySqlErrorCode MasterError
public MySqlErrorCode MasterNetRead
public MySqlErrorCode MasterNetWrite
public MySqlErrorCode FullTextMatchingKeyNotFound
public MySqlErrorCode LockOrActiveTransaction
public MySqlErrorCode UnknownSystemVariable
public MySqlErrorCode CrashedOnUsage
public MySqlErrorCode CrashedOnRepair
public MySqlErrorCode WarningNotCompleteRollback
public MySqlErrorCode TransactionCacheFull
public MySqlErrorCode SlaveMustStop
public MySqlErrorCode SlaveNotRunning
public MySqlErrorCode BadSlave
public MySqlErrorCode MasterInfo
public MySqlErrorCode SlaveThread
public MySqlErrorCode TooManyUserConnections
public MySqlErrorCode SetConstantsOnly
public MySqlErrorCode LockWaitTimeout
public MySqlErrorCode LockTableFull
public MySqlErrorCode ReadOnlyTransaction
public MySqlErrorCode DropDatabaseWithReadLock
public MySqlErrorCode CreateDatabaseWithReadLock
public MySqlErrorCode WrongArguments
public MySqlErrorCode NoPermissionToCreateUser
public MySqlErrorCode UnionTablesInDifferentDirectory
public MySqlErrorCode LockDeadlock
public MySqlErrorCode TableCannotHandleFullText
public MySqlErrorCode CannotAddForeignConstraint
public MySqlErrorCode NoReferencedRow
public MySqlErrorCode RowIsReferenced
public MySqlErrorCode ConnectToMaster
public MySqlErrorCode QueryOnMaster
public MySqlErrorCode ErrorWhenExecutingCommand
public MySqlErrorCode WrongUsage
public MySqlErrorCode WrongNumberOfColumnsInSelect
public MySqlErrorCode CannotUpdateWithReadLock
public MySqlErrorCode MixingNotAllowed
public MySqlErrorCode DuplicateArgument
public MySqlErrorCode UserLimitReached
public MySqlErrorCode SpecifiedAccessDeniedError
public MySqlErrorCode LocalVariableError
public MySqlErrorCode GlobalVariableError
public MySqlErrorCode NotDefaultError
public MySqlErrorCode WrongValueForVariable
public MySqlErrorCode WrongTypeForVariable
public MySqlErrorCode VariableCannotBeRead
public MySqlErrorCode CannotUseOptionHere
public MySqlErrorCode NotSupportedYet
public MySqlErrorCode MasterFatalErrorReadingBinLog
public MySqlErrorCode SlaveIgnoredTable
public MySqlErrorCode IncorrectGlobalLocalVariable
public MySqlErrorCode WrongForeignKeyDefinition
public MySqlErrorCode KeyReferenceDoesNotMatchTableReference
public MySqlErrorCode OpearnColumnsError
public MySqlErrorCode SubQueryNoOneRow
public MySqlErrorCode UnknownStatementHandler
public MySqlErrorCode CorruptHelpDatabase
public MySqlErrorCode CyclicReference
public MySqlErrorCode AutoConvert
public MySqlErrorCode IllegalReference
public MySqlErrorCode DerivedMustHaveAlias
public MySqlErrorCode SelectReduced
public MySqlErrorCode TableNameNotAllowedHere
public MySqlErrorCode NotSupportedAuthMode
public MySqlErrorCode SpatialCannotHaveNull
public MySqlErrorCode CollationCharsetMismatch
public MySqlErrorCode SlaveWasRunning
public MySqlErrorCode SlaveWasNotRunning
public MySqlErrorCode TooBigForUncompress
public MySqlErrorCode ZipLibMemoryError
public MySqlErrorCode ZipLibBufferError
public MySqlErrorCode ZipLibDataError
public MySqlErrorCode CutValueGroupConcat
public MySqlErrorCode WarningTooFewRecords
public MySqlErrorCode WarningTooManyRecords
public MySqlErrorCode WarningNullToNotNull
public MySqlErrorCode WarningDataOutOfRange
public MySqlErrorCode WaningDataTruncated
public MySqlErrorCode WaningUsingOtherHandler
public MySqlErrorCode CannotAggregateTwoCollations
public MySqlErrorCode DropUserError
public MySqlErrorCode RevokeGrantsError
public MySqlErrorCode CannotAggregateThreeCollations
public MySqlErrorCode CannotAggregateNCollations
public MySqlErrorCode VariableIsNotStructure
public MySqlErrorCode UnknownCollation
public MySqlErrorCode SlaveIgnoreSSLParameters
public MySqlErrorCode ServerIsInSecureAuthMode
public MySqlErrorCode WaningFieldResolved
public MySqlErrorCode BadSlaveUntilCondition
public MySqlErrorCode MissingSkipSlave
public MySqlErrorCode ErrorUntilConditionIgnored
public MySqlErrorCode WrongNameForIndex
public MySqlErrorCode WrongNameForCatalog
public MySqlErrorCode WarningQueryCacheResize
public MySqlErrorCode BadFullTextColumn
public MySqlErrorCode UnknownKeyCache
public MySqlErrorCode WarningHostnameWillNotWork
public MySqlErrorCode UnknownStorageEngine
public MySqlErrorCode WaningDeprecatedSyntax
public MySqlErrorCode NonUpdateableTable
public MySqlErrorCode FeatureDisabled
public MySqlErrorCode OptionPreventsStatement
public MySqlErrorCode DuplicatedValueInType
public MySqlErrorCode TruncatedWrongValue
public MySqlErrorCode TooMuchAutoTimestampColumns
public MySqlErrorCode InvalidOnUpdate
public MySqlErrorCode UnsupportedPreparedStatement
public MySqlErrorCode GetErroMessage
public MySqlErrorCode GetTemporaryErrorMessage
public MySqlErrorCode UnknownTimeZone
public MySqlErrorCode WarningInvalidTimestamp
public MySqlErrorCode InvalidCharacterString
public MySqlErrorCode WarningAllowedPacketOverflowed
public MySqlErrorCode ConflictingDeclarations
public MySqlErrorCode StoredProcedureNoRecursiveCreate
public MySqlErrorCode StoredProcedureAlreadyExists
public MySqlErrorCode StoredProcedureDoesNotExist
public MySqlErrorCode StoredProcedureDropFailed
public MySqlErrorCode StoredProcedureStoreFailed
public MySqlErrorCode StoredProcedureLiLabelMismatch
public MySqlErrorCode StoredProcedureLabelRedefine
public MySqlErrorCode StoredProcedureLabelMismatch
public MySqlErrorCode StoredProcedureUninitializedVariable
public MySqlErrorCode StoredProcedureBadSelect
public MySqlErrorCode StoredProcedureBadReturn
public MySqlErrorCode StoredProcedureBadStatement
public MySqlErrorCode UpdateLogDeprecatedIgnored
public MySqlErrorCode UpdateLogDeprecatedTranslated
public MySqlErrorCode QueryInterrupted
public MySqlErrorCode StoredProcedureNumberOfArguments
public MySqlErrorCode StoredProcedureConditionMismatch
public MySqlErrorCode StoredProcedureNoReturn
public MySqlErrorCode StoredProcedureNoReturnEnd
public MySqlErrorCode StoredProcedureBadCursorQuery
public MySqlErrorCode StoredProcedureBadCursorSelect
public MySqlErrorCode StoredProcedureCursorMismatch
public MySqlErrorCode StoredProcedureAlreadyOpen
public MySqlErrorCode StoredProcedureCursorNotOpen
public MySqlErrorCode StoredProcedureUndeclaredVariabel
public MySqlErrorCode StoredProcedureWrongNumberOfFetchArguments
public MySqlErrorCode StoredProcedureFetchNoData
public MySqlErrorCode StoredProcedureDuplicateParameter
public MySqlErrorCode StoredProcedureDuplicateVariable
public MySqlErrorCode StoredProcedureDuplicateCondition
public MySqlErrorCode StoredProcedureDuplicateCursor
public MySqlErrorCode StoredProcedureCannotAlter
public MySqlErrorCode StoredProcedureSubSelectNYI
public MySqlErrorCode StatementNotAllowedInStoredFunctionOrTrigger
public MySqlErrorCode StoredProcedureVariableConditionAfterCursorHandler
public MySqlErrorCode StoredProcedureCursorAfterHandler
public MySqlErrorCode StoredProcedureCaseNotFound
public MySqlErrorCode FileParserTooBigFile
public MySqlErrorCode FileParserBadHeader
public MySqlErrorCode FileParserEOFInComment
public MySqlErrorCode FileParserErrorInParameter
public MySqlErrorCode FileParserEOFInUnknownParameter
public MySqlErrorCode ViewNoExplain
public MySqlErrorCode FrmUnknownType
public MySqlErrorCode WrongObject
public MySqlErrorCode NonUpdateableColumn
public MySqlErrorCode ViewSelectDerived
public MySqlErrorCode ViewSelectClause
public MySqlErrorCode ViewSelectVariable
public MySqlErrorCode ViewSelectTempTable
public MySqlErrorCode ViewWrongList
public MySqlErrorCode WarningViewMerge
public MySqlErrorCode WarningViewWithoutKey
public MySqlErrorCode ViewInvalid
public MySqlErrorCode StoredProcedureNoDropStoredProcedure
public MySqlErrorCode StoredProcedureGotoInHandler
public MySqlErrorCode TriggerAlreadyExists
public MySqlErrorCode TriggerDoesNotExist
public MySqlErrorCode TriggerOnViewOrTempTable
public MySqlErrorCode TriggerCannotChangeRow
public MySqlErrorCode TriggerNoSuchRowInTrigger
public MySqlErrorCode NoDefaultForField
public MySqlErrorCode DivisionByZero
public MySqlErrorCode TruncatedWrongValueForField
public MySqlErrorCode IllegalValueForType
public MySqlErrorCode ViewNonUpdatableCheck
public MySqlErrorCode ViewCheckFailed
public MySqlErrorCode PrecedureAccessDenied
public MySqlErrorCode RelayLogFail
public MySqlErrorCode PasswordLength
public MySqlErrorCode UnknownTargetBinLog
public MySqlErrorCode IOErrorLogIndexRead
public MySqlErrorCode BinLogPurgeProhibited
public MySqlErrorCode FSeekFail
public MySqlErrorCode BinLogPurgeFatalError
public MySqlErrorCode LogInUse
public MySqlErrorCode LogPurgeUnknownError
public MySqlErrorCode RelayLogInit
public MySqlErrorCode NoBinaryLogging
public MySqlErrorCode ReservedSyntax
public MySqlErrorCode WSAStartupFailed
public MySqlErrorCode DifferentGroupsProcedure
public MySqlErrorCode NoGroupForProcedure
public MySqlErrorCode OrderWithProcedure
public MySqlErrorCode LoggingProhibitsChangingOf
public MySqlErrorCode NoFileMapping
public MySqlErrorCode WrongMagic
public MySqlErrorCode PreparedStatementManyParameters
public MySqlErrorCode KeyPartZero
public MySqlErrorCode ViewChecksum
public MySqlErrorCode ViewMultiUpdate
public MySqlErrorCode ViewNoInsertFieldList
public MySqlErrorCode ViewDeleteMergeView
public MySqlErrorCode CannotUser
public MySqlErrorCode XAERNotA
public MySqlErrorCode XAERInvalid
public MySqlErrorCode XAERRemoveFail
public MySqlErrorCode XAEROutside
public MySqlErrorCode XAERRemoveError
public MySqlErrorCode XARBRollback
public MySqlErrorCode NonExistingProcedureGrant
public MySqlErrorCode ProcedureAutoGrantFail
public MySqlErrorCode ProcedureAutoRevokeFail
public MySqlErrorCode DataTooLong
public MySqlErrorCode StoredProcedureSQLState
public MySqlErrorCode StartupError
public MySqlErrorCode LoadFromFixedSizeRowsToVariable
public MySqlErrorCode CannotCreateUserWithGrant
public MySqlErrorCode WrongValueForType
public MySqlErrorCode TableDefinitionChanged
public MySqlErrorCode StoredProcedureDuplicateHandler
public MySqlErrorCode StoredProcedureNotVariableArgument
public MySqlErrorCode StoredProcedureNoReturnSet
public MySqlErrorCode CannotCreateGeometryObject
public MySqlErrorCode FailedRoutineBreaksBinLog
public MySqlErrorCode BinLogUnsafeRoutine
public MySqlErrorCode BinLogCreateRoutineNeedSuper
public MySqlErrorCode ExecuteStatementWithOpenCursor
public MySqlErrorCode StatementHasNoOpenCursor
public MySqlErrorCode CommitNotAllowedIfStoredFunctionOrTrigger
public MySqlErrorCode NoDefaultForViewField
public MySqlErrorCode StoredProcedureNoRecursion
public MySqlErrorCode TooBigScale
public MySqlErrorCode TooBigPrecision
public MySqlErrorCode MBiggerThanD
public MySqlErrorCode WrongLockOfSystemTable
public MySqlErrorCode ConnectToForeignDataSource
public MySqlErrorCode QueryOnForeignDataSource
public MySqlErrorCode ForeignDataSourceDoesNotExist
public MySqlErrorCode ForeignDataStringInvalidCannotCreate
public MySqlErrorCode ForeignDataStringInvalid
public MySqlErrorCode CannotCreateFederatedTable
public MySqlErrorCode TriggerInWrongSchema
public MySqlErrorCode StackOverrunNeedMore
public MySqlErrorCode TooLongBody
public MySqlErrorCode WarningCannotDropDefaultKeyCache
public MySqlErrorCode TooBigDisplayWidth
public MySqlErrorCode XAERDuplicateID
public MySqlErrorCode DateTimeFunctionOverflow
public MySqlErrorCode CannotUpdateUsedTableInStoredFunctionOrTrigger
public MySqlErrorCode ViewPreventUpdate
public MySqlErrorCode PreparedStatementNoRecursion
public MySqlErrorCode StoredProcedureCannotSetAutoCommit
public MySqlErrorCode MalformedDefiner
public MySqlErrorCode ViewFrmNoUser
public MySqlErrorCode ViewOtherUser
public MySqlErrorCode NoSuchUser
public MySqlErrorCode ForbidSchemaChange
public MySqlErrorCode RowIsReferenced2
public MySqlErrorCode NoReferencedRow2
public MySqlErrorCode StoredProcedureBadVariableShadow
public MySqlErrorCode TriggerNoDefiner
public MySqlErrorCode OldFileFormat
public MySqlErrorCode StoredProcedureRecursionLimit
public MySqlErrorCode StoredProcedureTableCorrupt
public MySqlErrorCode StoredProcedureWrongName
public MySqlErrorCode TableNeedsUpgrade
public MySqlErrorCode StoredProcedureNoAggregate
public MySqlErrorCode MaxPreparedStatementCountReached
public MySqlErrorCode ViewRecursive
public MySqlErrorCode NonGroupingFieldUsed
public MySqlErrorCode TableCannotHandleSpatialKeys
public MySqlErrorCode NoTriggersOnSystemSchema
public MySqlErrorCode RemovedSpaces
public MySqlErrorCode AutoIncrementReadFailed
public MySqlErrorCode UserNameError
public MySqlErrorCode HostNameError
public MySqlErrorCode WrongStringLength
public MySqlErrorCode NonInsertableTable
public MySqlErrorCode AdminWrongMergeTable
public MySqlErrorCode TooHighLevelOfNestingForSelect
public MySqlErrorCode NameBecomesEmpty
public MySqlErrorCode AmbiguousFieldTerm
public MySqlErrorCode ForeignServerExists
public MySqlErrorCode ForeignServerDoesNotExist
public MySqlErrorCode IllegalHACreateOption
public MySqlErrorCode PartitionRequiresValues
public MySqlErrorCode PartitionWrongValues
public MySqlErrorCode PartitionMaxValue
public MySqlErrorCode PartitionSubPartition
public MySqlErrorCode PartitionSubPartMix
public MySqlErrorCode PartitionWrongNoPart
public MySqlErrorCode PartitionWrongNoSubPart
public MySqlErrorCode WrongExpressionInParitionFunction
public MySqlErrorCode NoConstantExpressionInRangeOrListError
public MySqlErrorCode FieldNotFoundPartitionErrror
public MySqlErrorCode ListOfFieldsOnlyInHash
public MySqlErrorCode InconsistentPartitionInfo
public MySqlErrorCode PartitionFunctionNotAllowed
public MySqlErrorCode PartitionsMustBeDefined
public MySqlErrorCode RangeNotIncreasing
public MySqlErrorCode InconsistentTypeOfFunctions
public MySqlErrorCode MultipleDefinitionsConstantInListPartition
public MySqlErrorCode PartitionEntryError
public MySqlErrorCode MixHandlerError
public MySqlErrorCode PartitionNotDefined
public MySqlErrorCode TooManyPartitions
public MySqlErrorCode SubPartitionError
public MySqlErrorCode CannotCreateHandlerFile
public MySqlErrorCode BlobFieldInPartitionFunction
public MySqlErrorCode UniqueKeyNeedAllFieldsInPartitioningFunction
public MySqlErrorCode NoPartitions
public MySqlErrorCode PartitionManagementOnNoPartitioned
public MySqlErrorCode ForeignKeyOnPartitioned
public MySqlErrorCode DropPartitionNonExistent
public MySqlErrorCode DropLastPartition
public MySqlErrorCode CoalesceOnlyOnHashPartition
public MySqlErrorCode ReorganizeHashOnlyOnSameNumber
public MySqlErrorCode ReorganizeNoParameter
public MySqlErrorCode OnlyOnRangeListPartition
public MySqlErrorCode AddPartitionSubPartition
public MySqlErrorCode AddPartitionNoNewPartition
public MySqlErrorCode CoalescePartitionNoPartition
public MySqlErrorCode ReorganizePartitionNotExist
public MySqlErrorCode SameNamePartition
public MySqlErrorCode NoBinLog
public MySqlErrorCode ConsecutiveReorganizePartitions
public MySqlErrorCode ReorganizeOutsideRange
public MySqlErrorCode PartitionFunctionFailure
public MySqlErrorCode PartitionStateError
public MySqlErrorCode LimitedPartitionRange
public MySqlErrorCode PluginIsNotLoaded
public MySqlErrorCode WrongValue
public MySqlErrorCode NoPartitionForGivenValue
public MySqlErrorCode FileGroupOptionOnlyOnce
public MySqlErrorCode CreateFileGroupFailed
public MySqlErrorCode DropFileGroupFailed
public MySqlErrorCode TableSpaceAutoExtend
public MySqlErrorCode WrongSizeNumber
public MySqlErrorCode SizeOverflow
public MySqlErrorCode AlterFileGroupFailed
public MySqlErrorCode BinLogRowLogginFailed
public MySqlErrorCode BinLogRowWrongTableDefinition
public MySqlErrorCode BinLogRowRBRToSBR
public MySqlErrorCode EventAlreadyExists
public MySqlErrorCode EventStoreFailed
public MySqlErrorCode EventDoesNotExist
public MySqlErrorCode EventCannotAlter
public MySqlErrorCode EventDropFailed
public MySqlErrorCode EventIntervalNotPositiveOrTooBig
public MySqlErrorCode EventEndsBeforeStarts
public MySqlErrorCode EventExecTimeInThePast
public MySqlErrorCode EventOpenTableFailed
public MySqlErrorCode EventNeitherMExpresssionNorMAt
public MySqlErrorCode ColumnCountDoesNotMatchCorrupted
public MySqlErrorCode CannotLoadFromTable
public MySqlErrorCode EventCannotDelete
public MySqlErrorCode EventCompileError
public MySqlErrorCode EventSameName
public MySqlErrorCode EventDataTooLong
public MySqlErrorCode DropIndexForeignKey
public MySqlErrorCode WarningDeprecatedSyntaxWithVersion
public MySqlErrorCode CannotWriteLockLogTable
public MySqlErrorCode CannotLockLogTable
public MySqlErrorCode ForeignDuplicateKey
public MySqlErrorCode ColumnCountDoesNotMatchPleaseUpdate
public MySqlErrorCode TemoraryTablePreventSwitchOutOfRBR
public MySqlErrorCode StoredFunctionPreventsSwitchBinLogFormat
public MySqlErrorCode NDBCannotSwitchBinLogFormat
public MySqlErrorCode PartitionNoTemporary
public MySqlErrorCode PartitionConstantDomain
public MySqlErrorCode PartitionFunctionIsNotAllowed
public MySqlErrorCode DDLLogError
public MySqlErrorCode NullInValuesLessThan
public MySqlErrorCode WrongPartitionName
public MySqlErrorCode CannotChangeTransactionIsolation
public MySqlErrorCode DuplicateEntryAutoIncrementCase
public MySqlErrorCode EventModifyQueueError
public MySqlErrorCode EventSetVariableError
public MySqlErrorCode PartitionMergeError
public MySqlErrorCode CannotActivateLog
public MySqlErrorCode RBRNotAvailable
public MySqlErrorCode Base64DecodeError
public MySqlErrorCode EventRecursionForbidden
public MySqlErrorCode EventsDatabaseError
public MySqlErrorCode OnlyIntegersAllowed
public MySqlErrorCode UnsupportedLogEngine
public MySqlErrorCode BadLogStatement
public MySqlErrorCode CannotRenameLogTable
public MySqlErrorCode WrongParameterCountToNativeFCT
public MySqlErrorCode WrongParametersToNativeFCT
public MySqlErrorCode WrongParametersToStoredFCT
public MySqlErrorCode NativeFCTNameCollision
public MySqlErrorCode DuplicateEntryWithKeyName
public MySqlErrorCode BinLogPurgeEMFile
public MySqlErrorCode EventCannotCreateInThePast
public MySqlErrorCode EventCannotAlterInThePast
public MySqlErrorCode SlaveIncident
public MySqlErrorCode NoPartitionForGivenValueSilent
public MySqlErrorCode BinLogUnsafeStatement
public MySqlErrorCode SlaveFatalError
public MySqlErrorCode SlaveRelayLogReadFailure
public MySqlErrorCode SlaveRelayLogWriteFailure
public MySqlErrorCode SlaveCreateEventFailure
public MySqlErrorCode SlaveMasterComFailure
public MySqlErrorCode BinLogLoggingImpossible
public MySqlErrorCode ViewNoCreationContext
public MySqlErrorCode ViewInvalidCreationContext
public MySqlErrorCode StoredRoutineInvalidCreateionContext
public MySqlErrorCode TiggerCorruptedFile
public MySqlErrorCode TriggerNoCreationContext
public MySqlErrorCode TriggerInvalidCreationContext
public MySqlErrorCode EventInvalidCreationContext
public MySqlErrorCode TriggerCannotOpenTable
public MySqlErrorCode CannoCreateSubRoutine
public MySqlErrorCode SlaveAmbiguousExecMode
public MySqlErrorCode NoFormatDescriptionEventBeforeBinLogStatement
public MySqlErrorCode SlaveCorruptEvent
public MySqlErrorCode LoadDataInvalidColumn
public MySqlErrorCode LogPurgeNoFile
public MySqlErrorCode XARBTimeout
public MySqlErrorCode XARBDeadlock
public MySqlErrorCode NeedRePrepare
public MySqlErrorCode DelayedNotSupported
public MySqlErrorCode WarningNoMasterInfo
public MySqlErrorCode WarningOptionIgnored
public MySqlErrorCode WarningPluginDeleteBuiltIn
public MySqlErrorCode WarningPluginBusy
public MySqlErrorCode VariableIsReadonly
public MySqlErrorCode WarningEngineTransactionRollback
public MySqlErrorCode SlaveHeartbeatFailure
public MySqlErrorCode SlaveHeartbeatValueOutOfRange
public MySqlErrorCode NDBReplicationSchemaError
public MySqlErrorCode ConflictFunctionParseError
public MySqlErrorCode ExcepionsWriteError
public MySqlErrorCode TooLongTableComment
public MySqlErrorCode TooLongFieldComment
public MySqlErrorCode FunctionInExistentNameCollision
public MySqlErrorCode DatabaseNameError
public MySqlErrorCode TableNameErrror
public MySqlErrorCode PartitionNameError
public MySqlErrorCode SubPartitionNameError
public MySqlErrorCode TemporaryNameError
public MySqlErrorCode RenamedNameError
public MySqlErrorCode TooManyConcurrentTransactions
public MySqlErrorCode WarningNonASCIISeparatorNotImplemented
public MySqlErrorCode DebugSyncTimeout
public MySqlErrorCode DebugSyncHitLimit
public MySqlErrorCode ErrorLast
}
public MySql.Data.MySqlClient.MySqlException : DbException {
private int errorCode
private bool isFatal
public int Number
internal bool IsFatal
internal bool IsQueryAborted
internal void .ctor(string msg)
internal void .ctor(string msg, Exception ex)
internal void .ctor(string msg, bool isFatal, Exception inner)
internal void .ctor(string msg, int errno, Exception inner)
internal void .ctor(string msg, int errno)
private void .ctor(SerializationInfo info, StreamingContext context)
public int get_Number()
internal bool get_IsFatal()
internal bool get_IsQueryAborted()
}
internal MySql.Data.MySqlClient.MySqlField : object {
public string CatalogName
public int ColumnLength
public string ColumnName
public string OriginalColumnName
public string TableName
public string RealTableName
public string DatabaseName
public Encoding Encoding
public int maxLength
protected ColumnFlags colFlags
protected int charSetIndex
protected byte precision
protected byte scale
protected MySqlDbType mySqlDbType
protected DBVersion connVersion
protected Driver driver
protected bool binaryOk
protected List`1<Type> typeConversions
public int CharacterSetIndex
public MySqlDbType Type
public byte Precision
public byte Scale
public int MaxLength
public ColumnFlags Flags
public bool IsAutoIncrement
public bool IsNumeric
public bool AllowsNull
public bool IsUnique
public bool IsPrimaryKey
public bool IsBlob
public bool IsBinary
public bool IsUnsigned
public bool IsTextField
public int CharacterLength
public List`1<Type> TypeConversions
public void .ctor(Driver driver)
public int get_CharacterSetIndex()
public void set_CharacterSetIndex(int value)
public MySqlDbType get_Type()
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
public int get_MaxLength()
public void set_MaxLength(int value)
public ColumnFlags get_Flags()
public bool get_IsAutoIncrement()
public bool get_IsNumeric()
public bool get_AllowsNull()
public bool get_IsUnique()
public bool get_IsPrimaryKey()
public bool get_IsBlob()
public bool get_IsBinary()
public bool get_IsUnsigned()
public bool get_IsTextField()
public int get_CharacterLength()
public List`1<Type> get_TypeConversions()
public void SetTypeAndFlags(MySqlDbType type, ColumnFlags flags)
public void AddTypeConversion(Type t)
private void CheckForExceptions()
public IMySqlValue GetValueObject()
public IMySqlValue GetIMySqlValue(MySqlDbType type)
private void SetFieldEncoding()
}
public MySql.Data.MySqlClient.MySqlHelper : object {
private string stringOfBackslashChars
private string stringOfQuoteChars
private CharClass[] charClassArray
public int ExecuteNonQuery(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters)
public int ExecuteNonQuery(string connectionString, string commandText, MySqlParameter[] parms)
public DataRow ExecuteDataRow(string connectionString, string commandText, MySqlParameter[] parms)
public DataSet ExecuteDataset(string connectionString, string commandText)
public DataSet ExecuteDataset(string connectionString, string commandText, MySqlParameter[] commandParameters)
public DataSet ExecuteDataset(MySqlConnection connection, string commandText)
public DataSet ExecuteDataset(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters)
public void UpdateDataSet(string connectionString, string commandText, DataSet ds, string tablename)
private MySqlDataReader ExecuteReader(MySqlConnection connection, MySqlTransaction transaction, string commandText, MySqlParameter[] commandParameters, bool ExternalConn)
public MySqlDataReader ExecuteReader(string connectionString, string commandText)
public MySqlDataReader ExecuteReader(MySqlConnection connection, string commandText)
public MySqlDataReader ExecuteReader(string connectionString, string commandText, MySqlParameter[] commandParameters)
public MySqlDataReader ExecuteReader(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters)
public object ExecuteScalar(string connectionString, string commandText)
public object ExecuteScalar(string connectionString, string commandText, MySqlParameter[] commandParameters)
public object ExecuteScalar(MySqlConnection connection, string commandText)
public object ExecuteScalar(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters)
private CharClass[] makeCharClassArray()
private bool needsQuoting(string s)
public string EscapeString(string value)
public string DoubleQuoteString(string value)
}
public MySql.Data.MySqlClient.MySqlInfoMessageEventArgs : EventArgs {
public MySqlError[] errors
}
public MySql.Data.MySqlClient.MySqlInfoMessageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MySqlInfoMessageEventArgs args)
public IAsyncResult BeginInvoke(object sender, MySqlInfoMessageEventArgs args, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal MySql.Data.MySqlClient.MySqlPacket : object {
private Byte[] tempBuffer
private Encoding encoding
private MemoryStream buffer
private DBVersion version
public Encoding Encoding
public bool HasMoreData
public int Position
public int Length
public bool IsLastPacket
public Byte[] Buffer
public DBVersion Version
public void .ctor(Encoding enc)
public void .ctor(MemoryStream stream)
public Encoding get_Encoding()
public void set_Encoding(Encoding value)
public bool get_HasMoreData()
public int get_Position()
public void set_Position(int value)
public int get_Length()
public void set_Length(int value)
public bool get_IsLastPacket()
public Byte[] get_Buffer()
public DBVersion get_Version()
public void set_Version(DBVersion value)
public void Clear()
public byte ReadByte()
public int Read(Byte[] byteBuffer, int offset, int count)
public void WriteByte(byte b)
public void Write(Byte[] bytesToWrite)
public void Write(Byte[] bytesToWrite, int offset, int countToWrite)
public int ReadNBytes()
public void SetByte(long position, byte value)
public long ReadFieldLength()
public ulong ReadBitValue(int numbytes)
public long ReadLong(int numbytes)
public ulong ReadULong(int numbytes)
public int Read3ByteInt()
public int ReadInteger(int numbytes)
public void WriteInteger(long v, int numbytes)
public int ReadPackedInteger()
public void WriteLength(long length)
public void WriteLenString(string s)
public void WriteStringNoNull(string v)
public void WriteString(string v)
public string ReadLenString()
public string ReadAsciiString(long length)
public string ReadString(long length)
public string ReadString()
public string ReadString(Encoding theEncoding)
}
public MySql.Data.MySqlClient.MySqlParameter : DbParameter {
private int UNSIGNED_MASK
private int GEOMETRY_LENGTH
private DbType dbType
private object paramValue
private string paramName
private MySqlDbType mySqlDbType
private bool inferType
private IMySqlValue _valueObject
private DataRowVersion <SourceVersion>k__BackingField
private string <SourceColumn>k__BackingField
private bool <SourceColumnNullMapping>k__BackingField
private MySqlParameterCollection <Collection>k__BackingField
private Encoding <Encoding>k__BackingField
private ParameterDirection <Direction>k__BackingField
private bool <IsNullable>k__BackingField
private byte <Precision>k__BackingField
private byte <Scale>k__BackingField
private int <Size>k__BackingField
private IList <PossibleValues>k__BackingField
public DataRowVersion SourceVersion
public string SourceColumn
public bool SourceColumnNullMapping
public DbType DbType
public string ParameterName
internal MySqlParameterCollection Collection
internal Encoding Encoding
internal bool TypeHasBeenSet
internal string BaseName
public ParameterDirection Direction
public bool IsNullable
public MySqlDbType MySqlDbType
public byte Precision
public byte Scale
public int Size
public object Value
internal IMySqlValue ValueObject
public IList PossibleValues
public void .ctor(string parameterName, MySqlDbType dbType, int size, string sourceColumn)
public void .ctor(string parameterName, MySqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value)
internal void .ctor(string name, MySqlDbType type, ParameterDirection dir, string col, DataRowVersion ver, object val)
private void Init()
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public void ResetDbType()
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public DbType get_DbType()
public void set_DbType(DbType value)
private void SetDbTypeFromMySqlDbType()
private void SetDbType(DbType db_type)
public void .ctor(string parameterName, object value)
public void .ctor(string parameterName, MySqlDbType dbType)
public void .ctor(string parameterName, MySqlDbType dbType, int size)
public string get_ParameterName()
public void set_ParameterName(string value)
internal MySqlParameterCollection get_Collection()
internal void set_Collection(MySqlParameterCollection value)
internal Encoding get_Encoding()
internal void set_Encoding(Encoding value)
internal bool get_TypeHasBeenSet()
internal string get_BaseName()
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public MySqlDbType get_MySqlDbType()
public void set_MySqlDbType(MySqlDbType value)
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
public int get_Size()
public void set_Size(int value)
public object get_Value()
public void set_Value(object value)
internal IMySqlValue get_ValueObject()
private void set_ValueObject(IMySqlValue value)
public IList get_PossibleValues()
internal void set_PossibleValues(IList value)
private void SetParameterName(string name)
public string ToString()
internal int GetPSType()
internal void Serialize(MySqlPacket packet, bool binary, MySqlConnectionStringBuilder settings)
private void SetMySqlDbType(MySqlDbType mysql_dbtype)
private void SetTypeFromValue()
public MySqlParameter Clone()
private object System.ICloneable.Clone()
internal long EstimatedSize()
}
public MySql.Data.MySqlClient.MySqlParameterCollection : DbParameterCollection {
private List`1<MySqlParameter> items
private Dictionary`2<string, int> indexHashCS
private Dictionary`2<string, int> indexHashCI
internal bool containsUnnamedParameters
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
public int Count
public MySqlParameter Item
public MySqlParameter Item
public MySqlParameter Add(string parameterName, MySqlDbType dbType, int size, string sourceColumn)
public void AddRange(Array values)
protected DbParameter GetParameter(string parameterName)
protected DbParameter GetParameter(int index)
protected void SetParameter(string parameterName, DbParameter value)
protected void SetParameter(int index, DbParameter value)
public int Add(object value)
public bool Contains(string parameterName)
public bool Contains(object value)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void Insert(int index, object value)
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public void Remove(object value)
public void RemoveAt(string parameterName)
public void RemoveAt(int index)
public object get_SyncRoot()
internal void .ctor(MySqlCommand cmd)
public int get_Count()
public MySqlParameter get_Item(int index)
public void set_Item(int index, MySqlParameter value)
public MySqlParameter get_Item(string name)
public void set_Item(string name, MySqlParameter value)
public MySqlParameter Add(MySqlParameter value)
public MySqlParameter Add(string parameterName, object value)
public MySqlParameter AddWithValue(string parameterName, object value)
public MySqlParameter Add(string parameterName, MySqlDbType dbType)
public MySqlParameter Add(string parameterName, MySqlDbType dbType, int size)
public void Clear()
private void CheckIndex(int index)
private MySqlParameter InternalGetParameter(int index)
private MySqlParameter InternalGetParameter(string parameterName)
private void InternalSetParameter(string parameterName, MySqlParameter value)
private void InternalSetParameter(int index, MySqlParameter value)
public int IndexOf(string parameterName)
public int IndexOf(object value)
internal void ParameterNameChanged(MySqlParameter p, string oldName, string newName)
private MySqlParameter InternalAdd(MySqlParameter value, int index)
private int GetNextIndex()
private void AdjustHash(Dictionary`2<string, int> hash, string parameterName, int keyIndex, bool addEntry)
private void AdjustHashes(int keyIndex, bool addEntry)
private MySqlParameter GetParameterFlexibleInternal(string baseName)
internal MySqlParameter GetParameterFlexible(string parameterName, bool throwOnNotFound)
}
internal MySql.Data.MySqlClient.MySqlParameterConverter : TypeConverter {
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
internal MySql.Data.MySqlClient.MySqlPool : object {
private List`1<Driver> inUsePool
private Queue`1<Driver> idlePool
private MySqlConnectionStringBuilder settings
private UInt32 minSize
private UInt32 maxSize
private ProcedureCache procedureCache
private bool beingCleared
private int available
private AutoResetEvent autoEvent
private Dictionary`2<string, string> <ServerProperties>k__BackingField
public MySqlConnectionStringBuilder Settings
public ProcedureCache ProcedureCache
private bool HasIdleConnections
private int NumConnections
public bool BeingCleared
internal Dictionary`2<string, string> ServerProperties
private void EnqueueIdle(Driver driver)
public void .ctor(MySqlConnectionStringBuilder settings)
public MySqlConnectionStringBuilder get_Settings()
public void set_Settings(MySqlConnectionStringBuilder value)
public ProcedureCache get_ProcedureCache()
private bool get_HasIdleConnections()
private int get_NumConnections()
public bool get_BeingCleared()
internal Dictionary`2<string, string> get_ServerProperties()
internal void set_ServerProperties(Dictionary`2<string, string> value)
private Driver GetPooledConnection()
private Driver CreateNewPooledConnection()
public void ReleaseConnection(Driver driver)
public void RemoveConnection(Driver driver)
private Driver TryToGetDriver()
public Driver GetConnection()
internal void Clear()
internal List`1<Driver> RemoveOldIdleConnections()
}
internal MySql.Data.MySqlClient.MySqlPoolManager : object {
private Dictionary`2<string, MySqlPool> pools
private List`1<MySqlPool> clearingPools
internal int maxConnectionIdleTime
private Timer timer
private void EnsureClearingPools(object sender, EventArgs e)
private string GetKey(MySqlConnectionStringBuilder settings)
public MySqlPool GetPool(MySqlConnectionStringBuilder settings)
public void RemoveConnection(Driver driver)
public void ReleaseConnection(Driver driver)
public void ClearPool(MySqlConnectionStringBuilder settings)
private void ClearPoolByText(string key)
public void ClearAllPools()
public void RemoveClearedPool(MySqlPool pool)
public void CleanIdleConnections(object obj)
}
internal MySql.Data.MySqlClient.MySqlPromotableTransaction : object {
private Stack`1<MySqlTransactionScope> globalScopeStack
private MySqlConnection connection
private Transaction baseTransaction
private Stack`1<MySqlTransactionScope> scopeStack
public Transaction BaseTransaction
public bool InRollback
public void .ctor(MySqlConnection connection, Transaction baseTransaction)
public Transaction get_BaseTransaction()
public bool get_InRollback()
private void System.Transactions.IPromotableSinglePhaseNotification.Initialize()
private void System.Transactions.IPromotableSinglePhaseNotification.Rollback(SinglePhaseEnlistment singlePhaseEnlistment)
private void System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment)
private Byte[] System.Transactions.ITransactionPromoter.Promote()
}
public MySql.Data.MySqlClient.MySqlRowUpdatedEventArgs : RowUpdatedEventArgs {
public MySqlCommand Command
public void .ctor(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public MySqlCommand get_Command()
}
public MySql.Data.MySqlClient.MySqlRowUpdatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MySqlRowUpdatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, MySqlRowUpdatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public MySql.Data.MySqlClient.MySqlRowUpdatingEventArgs : RowUpdatingEventArgs {
public MySqlCommand Command
public void .ctor(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public MySqlCommand get_Command()
public void set_Command(MySqlCommand value)
}
public MySql.Data.MySqlClient.MySqlRowUpdatingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MySqlRowUpdatingEventArgs e)
public IAsyncResult BeginInvoke(object sender, MySqlRowUpdatingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public MySql.Data.MySqlClient.MySqlSchemaCollection : object {
private List`1<SchemaColumn> columns
private List`1<MySqlSchemaRow> rows
private DataTable _table
internal Dictionary`2<string, int> Mapping
internal Dictionary`2<int, int> LogicalMappings
private string <Name>k__BackingField
public string Name
public IList`1<SchemaColumn> Columns
public IList`1<MySqlSchemaRow> Rows
public void .ctor(string name)
public void .ctor(DataTable dt)
public string get_Name()
public void set_Name(string value)
public IList`1<SchemaColumn> get_Columns()
public IList`1<MySqlSchemaRow> get_Rows()
internal SchemaColumn AddColumn(string name, Type t)
internal int ColumnIndex(string name)
internal void RemoveColumn(string name)
internal bool ContainsColumn(string name)
internal MySqlSchemaRow AddRow()
internal MySqlSchemaRow NewRow()
internal DataTable AsDataTable()
}
public MySql.Data.MySqlClient.MySqlSchemaRow : object {
private Dictionary`2<int, object> data
private MySqlSchemaCollection <Collection>k__BackingField
internal MySqlSchemaCollection Collection
internal object Item
internal object Item
public void .ctor(MySqlSchemaCollection c)
internal void InitMetadata()
internal MySqlSchemaCollection get_Collection()
private void set_Collection(MySqlSchemaCollection value)
internal object get_Item(string s)
internal void set_Item(string s, object value)
internal object get_Item(int i)
internal void set_Item(int i, object value)
private void SetValueForName(string colName, object value)
private object GetValueForName(string colName)
internal void CopyRow(MySqlSchemaRow row)
}
public MySql.Data.MySqlClient.MySqlScript : object {
private MySqlConnection connection
private string query
private string delimiter
private MySqlStatementExecutedEventHandler StatementExecuted
private MySqlScriptErrorEventHandler Error
private EventHandler ScriptCompleted
public MySqlConnection Connection
public string Query
public string Delimiter
public void add_StatementExecuted(MySqlStatementExecutedEventHandler value)
public void remove_StatementExecuted(MySqlStatementExecutedEventHandler value)
public void add_Error(MySqlScriptErrorEventHandler value)
public void remove_Error(MySqlScriptErrorEventHandler value)
public void add_ScriptCompleted(EventHandler value)
public void remove_ScriptCompleted(EventHandler value)
public void .ctor(MySqlConnection connection)
public void .ctor(string query)
public void .ctor(MySqlConnection connection, string query)
public MySqlConnection get_Connection()
public void set_Connection(MySqlConnection value)
public string get_Query()
public void set_Query(string value)
public string get_Delimiter()
public void set_Delimiter(string value)
public int Execute()
private void OnQueryExecuted(ScriptStatement statement)
private void OnScriptCompleted()
private bool OnScriptError(Exception ex)
private List`1<int> BreakScriptIntoLines()
private int FindLineNumber(int position, List`1<int> lineNumbers)
private List`1<ScriptStatement> BreakIntoStatements(bool ansiQuotes, bool noBackslashEscapes)
private void AdjustDelimiterEnd(MySqlTokenizer tokenizer)
}
public MySql.Data.MySqlClient.MySqlScriptErrorEventArgs : MySqlScriptEventArgs {
private Exception exception
private bool ignore
public Exception Exception
public bool Ignore
public void .ctor(Exception exception)
public Exception get_Exception()
public bool get_Ignore()
public void set_Ignore(bool value)
}
public MySql.Data.MySqlClient.MySqlScriptErrorEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MySqlScriptErrorEventArgs args)
public IAsyncResult BeginInvoke(object sender, MySqlScriptErrorEventArgs args, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public MySql.Data.MySqlClient.MySqlScriptEventArgs : EventArgs {
private ScriptStatement statement
internal ScriptStatement Statement
public string StatementText
public int Line
public int Position
internal void set_Statement(ScriptStatement value)
public string get_StatementText()
public int get_Line()
public int get_Position()
}
public MySql.Data.MySqlClient.MySqlSecurityPermission : MarshalByRefObject {
public PermissionSet CreatePermissionSet(bool includeReflectionPermission)
}
public MySql.Data.MySqlClient.MySqlSslMode : Enum {
public int value__
public MySqlSslMode None
public MySqlSslMode Preferred
public MySqlSslMode Prefered
public MySqlSslMode Required
public MySqlSslMode VerifyCA
public MySqlSslMode VerifyFull
}
public MySql.Data.MySqlClient.MySqlStatementExecutedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MySqlScriptEventArgs args)
public IAsyncResult BeginInvoke(object sender, MySqlScriptEventArgs args, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal MySql.Data.MySqlClient.MySqlStream : object {
private byte sequenceByte
private int maxBlockSize
private ulong maxPacketSize
private Byte[] packetHeader
private MySqlPacket packet
private TimedStream timedStream
private Stream inStream
private Stream outStream
internal Stream BaseStream
public Encoding Encoding
public byte SequenceByte
public int MaxBlockSize
public ulong MaxPacketSize
internal Stream get_BaseStream()
public void .ctor(Encoding encoding)
public void .ctor(Stream baseStream, Encoding encoding, bool compress)
public void Close()
public Encoding get_Encoding()
public void set_Encoding(Encoding value)
public void ResetTimeout(int timeout)
public byte get_SequenceByte()
public void set_SequenceByte(byte value)
public int get_MaxBlockSize()
public void set_MaxBlockSize(int value)
public ulong get_MaxPacketSize()
public void set_MaxPacketSize(ulong value)
public MySqlPacket ReadPacket()
internal void ReadFully(Stream stream, Byte[] buffer, int offset, int count)
public void LoadPacket()
public void SendPacket(MySqlPacket packet)
public void SendEntirePacketDirectly(Byte[] buffer, int count)
}
internal MySql.Data.MySqlClient.MySqlTokenizer : object {
private string sql
private int startIndex
private int stopIndex
private bool ansiQuotes
private bool backslashEscapes
private bool returnComments
private bool multiLine
private bool sqlServerMode
private bool quoted
private bool isComment
private int pos
public string Text
public bool AnsiQuotes
public bool BackslashEscapes
public bool MultiLine
public bool SqlServerMode
public bool Quoted
public bool IsComment
public int StartIndex
public int StopIndex
public int Position
public bool ReturnComments
public void .ctor(string input)
public string get_Text()
public void set_Text(string value)
public bool get_AnsiQuotes()
public void set_AnsiQuotes(bool value)
public bool get_BackslashEscapes()
public void set_BackslashEscapes(bool value)
public bool get_MultiLine()
public void set_MultiLine(bool value)
public bool get_SqlServerMode()
public void set_SqlServerMode(bool value)
public bool get_Quoted()
private void set_Quoted(bool value)
public bool get_IsComment()
public int get_StartIndex()
public void set_StartIndex(int value)
public int get_StopIndex()
public void set_StopIndex(int value)
public int get_Position()
public void set_Position(int value)
public bool get_ReturnComments()
public void set_ReturnComments(bool value)
public List`1<string> GetAllTokens()
public string NextToken()
public bool IsParameter(string s)
public string NextParameter()
public bool FindToken()
public string ReadParenthesis()
private bool ReadComment(char c)
private void CalculatePosition(int start, int stop)
private void ReadUnquotedToken()
private void ReadSpecialToken()
private void ReadQuotedToken(char quoteChar)
private bool IsQuoteChar(char c)
private bool IsParameterMarker(char c)
private bool IsSpecialCharacter(char c)
}
public MySql.Data.MySqlClient.MySqlTrace : object {
private TraceSource source
protected string qaHost
protected bool qaEnabled
public TraceListenerCollection Listeners
public SourceSwitch Switch
public bool QueryAnalysisEnabled
internal TraceSource Source
public TraceListenerCollection get_Listeners()
public SourceSwitch get_Switch()
public void set_Switch(SourceSwitch value)
public bool get_QueryAnalysisEnabled()
public void EnableQueryAnalyzer(string host, int postInterval)
public void DisableQueryAnalyzer()
internal TraceSource get_Source()
internal void LogInformation(int id, string msg)
internal void LogWarning(int id, string msg)
internal void LogError(int id, string msg)
internal void TraceEvent(TraceEventType eventType, MySqlTraceEventType mysqlEventType, string msgFormat, Object[] args)
}
public MySql.Data.MySqlClient.MySqlTraceEventType : Enum {
public int value__
public MySqlTraceEventType ConnectionOpened
public MySqlTraceEventType ConnectionClosed
public MySqlTraceEventType QueryOpened
public MySqlTraceEventType ResultOpened
public MySqlTraceEventType ResultClosed
public MySqlTraceEventType QueryClosed
public MySqlTraceEventType StatementPrepared
public MySqlTraceEventType StatementExecuted
public MySqlTraceEventType StatementClosed
public MySqlTraceEventType NonQuery
public MySqlTraceEventType UsageAdvisorWarning
public MySqlTraceEventType Warning
public MySqlTraceEventType Error
public MySqlTraceEventType QueryNormalized
}
public MySql.Data.MySqlClient.MySqlTransaction : DbTransaction {
private IsolationLevel level
private MySqlConnection conn
private bool open
protected DbConnection DbConnection
public MySqlConnection Connection
public IsolationLevel IsolationLevel
protected DbConnection get_DbConnection()
internal void .ctor(MySqlConnection c, IsolationLevel il)
protected void Finalize()
public MySqlConnection get_Connection()
public IsolationLevel get_IsolationLevel()
public void Dispose()
internal void Dispose(bool disposing)
public void Commit()
public void Rollback()
}
internal MySql.Data.MySqlClient.MySqlTransactionScope : object {
public MySqlConnection connection
public Transaction baseTransaction
public MySqlTransaction simpleTransaction
public int rollbackThreadId
public void .ctor(MySqlConnection con, Transaction trans, MySqlTransaction simpleTransaction)
public void Rollback(SinglePhaseEnlistment singlePhaseEnlistment)
public void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment)
}
internal MySql.Data.MySqlClient.NativeDriver : object {
private string AuthenticationWindowsPlugin
private string AuthenticationWindowsUser
private DBVersion version
private int threadId
protected string encryptionSeed
protected ServerStatusFlags serverStatus
protected MySqlStream stream
protected Stream baseStream
private BitArray nullMap
private MySqlPacket packet
private ClientFlags connectionFlags
private Driver owner
private int warnings
private MySqlAuthenticationPlugin authPlugin
public ClientFlags Flags
public int ThreadId
public DBVersion Version
public ServerStatusFlags ServerStatus
public int WarningCount
public MySqlPacket Packet
internal MySqlConnectionStringBuilder Settings
internal Encoding Encoding
public void .ctor(Driver owner)
public ClientFlags get_Flags()
public int get_ThreadId()
public DBVersion get_Version()
public ServerStatusFlags get_ServerStatus()
public int get_WarningCount()
public MySqlPacket get_Packet()
internal MySqlConnectionStringBuilder get_Settings()
internal Encoding get_Encoding()
private void HandleException(MySqlException ex)
internal void SendPacket(MySqlPacket p)
internal void SendEmptyPacket()
internal MySqlPacket ReadPacket()
internal void ReadOk(bool read)
public void SetDatabase(string dbName)
public void Configure()
public void Open()
private X509CertificateCollection GetClientCertificates()
private void StartSSL()
private bool ServerCheckValidation(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
private void SetConnectionFlags(ClientFlags serverCaps)
public void Authenticate(string authMethod, bool reset)
public void Reset()
public void SendQuery(MySqlPacket queryPacket)
public void Close(bool isOpen)
public bool Ping()
public int GetResult(Int32& affectedRow, Int64& insertedId)
private void SendFileToServer(string filename)
private void ReadNullMap(int fieldCount)
public IMySqlValue ReadColumnValue(int index, MySqlField field, IMySqlValue valObject)
public void SkipColumnValue(IMySqlValue valObject)
public void GetColumnsData(MySqlField[] columns)
private void GetColumnData(MySqlField field)
private void ExecutePacket(MySqlPacket packetToExecute)
public void ExecuteStatement(MySqlPacket packetToExecute)
private void CheckEOF()
private void ReadEOF()
public int PrepareStatement(string sql, MySqlField[]& parameters)
public bool FetchDataRow(int statementId, int columns)
public void CloseStatement(int statementId)
public void ResetTimeout(int timeout)
internal void SetConnectAttrs()
}
internal MySql.Data.MySqlClient.PerformanceMonitor : object {
private MySqlConnection connection
private MySqlConnection <Connection>k__BackingField
public MySqlConnection Connection
public void .ctor(MySqlConnection connection)
public MySqlConnection get_Connection()
private void set_Connection(MySqlConnection value)
public void AddHardProcedureQuery()
public void AddSoftProcedureQuery()
}
internal MySql.Data.MySqlClient.PreparableStatement : Statement {
private int executionCount
private int statementId
private BitArray nullMap
private List`1<MySqlParameter> parametersToSend
private MySqlPacket packet
private int dataPosition
private int nullMapPosition
public int ExecutionCount
public bool IsPrepared
public int StatementId
public void .ctor(MySqlCommand command, string text)
public int get_ExecutionCount()
public void set_ExecutionCount(int value)
public bool get_IsPrepared()
public int get_StatementId()
public void Prepare()
public void Execute()
public bool ExecuteNext()
private List`1<string> PrepareCommandText(String& stripped_sql)
public void CloseStatement()
}
internal MySql.Data.MySqlClient.ProcedureCache : object {
private Dictionary`2<int, ProcedureCacheEntry> procHash
private Queue`1<int> hashQueue
private int maxSize
public void .ctor(int size)
public ProcedureCacheEntry GetProcedure(MySqlConnection conn, string spName, string cacheKey)
internal string GetCacheKey(string spName, ProcedureCacheEntry proc)
private ProcedureCacheEntry AddNew(MySqlConnection connection, string spName)
private void TrimHash()
private ProcedureCacheEntry GetProcData(MySqlConnection connection, string spName)
}
internal MySql.Data.MySqlClient.ProcedureCacheEntry : object {
public MySqlSchemaCollection procedure
public MySqlSchemaCollection parameters
}
public MySql.Data.MySqlClient.Properties.Resources : object {
private ResourceManager resourceMan
private CultureInfo resourceCulture
public ResourceManager ResourceManager
public CultureInfo Culture
public string AdapterIsNull
public string AdapterSelectIsNull
public string AttemptToAccessBeforeRead
public string AuthenticationFailed
public string AuthenticationMethodNotSupported
public string BadVersionFormat
public string BufferCannotBeNull
public string BufferNotLargeEnough
public string CancelNeeds50
public string CancelNotSupported
public string CanNotDeriveParametersForTextCommands
public string CBMultiTableNotSupported
public string CBNoKeyColumn
public string ChaosNotSupported
public string CommandTextNotInitialized
public string ConnectionAlreadyOpen
public string ConnectionBroken
public string ConnectionMustBeOpen
public string ConnectionNotOpen
public string ConnectionNotSet
public string CouldNotFindColumnName
public string CountCannotBeNegative
public string CSNoSetLength
public string DataNotInSupportedFormat
public string DataReaderOpen
public string DefaultEncodingNotFound
public string DistributedTxnNotSupported
public string ErrorCreatingSocket
public string FatalErrorDuringExecute
public string FatalErrorDuringRead
public string FatalErrorReadingResult
public string FileBasedCertificateNotSupported
public string FromAndLengthTooBig
public string FromIndexMustBeValid
public string GetHostEntryFailed
public string HardProcQuery
public string ImproperValueFormat
public string IncorrectTransmission
public string IndexAndLengthTooBig
public string IndexMustBeValid
public string InvalidColumnOrdinal
public string InvalidConnectionStringValue
public string InvalidMicrosecondValue
public string InvalidMillisecondValue
public string InvalidProcName
public string InvalidValueForBoolean
public string KeywordNoNull
public string KeywordNotSupported
public string keywords
public string MixedParameterNamingNotAllowed
public string MoreThanOneOPRow
public string MultipleConnectionsInTransactionNotSupported
public string NamedPipeNoSeek
public string NamedPipeNoSetLength
public string NewValueShouldBeMySqlParameter
public string NextResultIsClosed
public string NoBodiesAndTypeNotSet
public string NoNestedTransactions
public string NoServerSSLSupport
public string NoUnixSocketsOnWindows
public string NoWindowsIdentity
public string ObjectDisposed
public string OffsetCannotBeNegative
public string OffsetMustBeValid
public string OldPasswordsNotSupported
public string ParameterAlreadyDefined
public string ParameterCannotBeNegative
public string ParameterCannotBeNull
public string ParameterIndexNotFound
public string ParameterIsInvalid
public string ParameterMustBeDefined
public string ParameterNotFoundDuringPrepare
public string PasswordMustHaveLegalChars
public string PerfMonCategoryHelp
public string PerfMonCategoryName
public string PerfMonHardProcHelp
public string PerfMonHardProcName
public string PerfMonSoftProcHelp
public string PerfMonSoftProcName
public string ProcAndFuncSameName
public string QueryTooLarge
public string ReadFromStreamFailed
public string ReadingPriorColumnUsingSeqAccess
public string ReplicatedConnectionsAllowOnlyReadonlyStatements
public string Replication_ConnectionAttemptFailed
public string Replication_NoAvailableServer
public string ReplicationGroupNotFound
public string ReplicationServerNotFound
public string RoutineNotFound
public string RoutineRequiresReturnParameter
public string ServerTooOld
public string SnapshotNotSupported
public string SocketNoSeek
public string SoftProcQuery
public string SPNotSupported
public string StreamAlreadyClosed
public string StreamNoRead
public string StreamNoWrite
public string Timeout
public string TimeoutGettingConnection
public string TraceCloseConnection
public string TraceErrorMoreThanMaxValueConnections
public string TraceFetchError
public string TraceOpenConnection
public string TraceOpenResultError
public string TraceQueryDone
public string TraceQueryNormalized
public string TraceQueryOpened
public string TraceResult
public string TraceResultClosed
public string TraceSetDatabase
public string TraceStatementClosed
public string TraceStatementExecuted
public string TraceStatementPrepared
public string TraceUAWarningBadIndex
public string TraceUAWarningFieldConversion
public string TraceUAWarningNoIndex
public string TraceUAWarningSkippedColumns
public string TraceUAWarningSkippedRows
public string TraceWarning
public string TypeIsNotCommandInterceptor
public string TypeIsNotExceptionInterceptor
public string UnableToConnectToHost
public string UnableToCreateAuthPlugin
public string UnableToDeriveParameters
public string UnableToEnableQueryAnalysis
public string UnableToEnumerateUDF
public string UnableToExecuteSP
public string UnableToParseFK
public string UnableToRetrieveParameters
public string UnableToStartSecondAsyncOp
public string UnixSocketsNotSupported
public string UnknownAuthenticationMethod
public string UnknownConnectionProtocol
public string ValueNotCorrectType
public string ValueNotSupportedForGuid
public string WinAuthNotSupportOnPlatform
public string WriteToStreamFailed
public string WrongParameterName
public ResourceManager get_ResourceManager()
public CultureInfo get_Culture()
public void set_Culture(CultureInfo value)
public string get_AdapterIsNull()
public string get_AdapterSelectIsNull()
public string get_AttemptToAccessBeforeRead()
public string get_AuthenticationFailed()
public string get_AuthenticationMethodNotSupported()
public string get_BadVersionFormat()
public string get_BufferCannotBeNull()
public string get_BufferNotLargeEnough()
public string get_CancelNeeds50()
public string get_CancelNotSupported()
public string get_CanNotDeriveParametersForTextCommands()
public string get_CBMultiTableNotSupported()
public string get_CBNoKeyColumn()
public string get_ChaosNotSupported()
public string get_CommandTextNotInitialized()
public string get_ConnectionAlreadyOpen()
public string get_ConnectionBroken()
public string get_ConnectionMustBeOpen()
public string get_ConnectionNotOpen()
public string get_ConnectionNotSet()
public string get_CouldNotFindColumnName()
public string get_CountCannotBeNegative()
public string get_CSNoSetLength()
public string get_DataNotInSupportedFormat()
public string get_DataReaderOpen()
public string get_DefaultEncodingNotFound()
public string get_DistributedTxnNotSupported()
public string get_ErrorCreatingSocket()
public string get_FatalErrorDuringExecute()
public string get_FatalErrorDuringRead()
public string get_FatalErrorReadingResult()
public string get_FileBasedCertificateNotSupported()
public string get_FromAndLengthTooBig()
public string get_FromIndexMustBeValid()
public string get_GetHostEntryFailed()
public string get_HardProcQuery()
public string get_ImproperValueFormat()
public string get_IncorrectTransmission()
public string get_IndexAndLengthTooBig()
public string get_IndexMustBeValid()
public string get_InvalidColumnOrdinal()
public string get_InvalidConnectionStringValue()
public string get_InvalidMicrosecondValue()
public string get_InvalidMillisecondValue()
public string get_InvalidProcName()
public string get_InvalidValueForBoolean()
public string get_KeywordNoNull()
public string get_KeywordNotSupported()
public string get_keywords()
public string get_MixedParameterNamingNotAllowed()
public string get_MoreThanOneOPRow()
public string get_MultipleConnectionsInTransactionNotSupported()
public string get_NamedPipeNoSeek()
public string get_NamedPipeNoSetLength()
public string get_NewValueShouldBeMySqlParameter()
public string get_NextResultIsClosed()
public string get_NoBodiesAndTypeNotSet()
public string get_NoNestedTransactions()
public string get_NoServerSSLSupport()
public string get_NoUnixSocketsOnWindows()
public string get_NoWindowsIdentity()
public string get_ObjectDisposed()
public string get_OffsetCannotBeNegative()
public string get_OffsetMustBeValid()
public string get_OldPasswordsNotSupported()
public string get_ParameterAlreadyDefined()
public string get_ParameterCannotBeNegative()
public string get_ParameterCannotBeNull()
public string get_ParameterIndexNotFound()
public string get_ParameterIsInvalid()
public string get_ParameterMustBeDefined()
public string get_ParameterNotFoundDuringPrepare()
public string get_PasswordMustHaveLegalChars()
public string get_PerfMonCategoryHelp()
public string get_PerfMonCategoryName()
public string get_PerfMonHardProcHelp()
public string get_PerfMonHardProcName()
public string get_PerfMonSoftProcHelp()
public string get_PerfMonSoftProcName()
public string get_ProcAndFuncSameName()
public string get_QueryTooLarge()
public string get_ReadFromStreamFailed()
public string get_ReadingPriorColumnUsingSeqAccess()
public string get_ReplicatedConnectionsAllowOnlyReadonlyStatements()
public string get_Replication_ConnectionAttemptFailed()
public string get_Replication_NoAvailableServer()
public string get_ReplicationGroupNotFound()
public string get_ReplicationServerNotFound()
public string get_RoutineNotFound()
public string get_RoutineRequiresReturnParameter()
public string get_ServerTooOld()
public string get_SnapshotNotSupported()
public string get_SocketNoSeek()
public string get_SoftProcQuery()
public string get_SPNotSupported()
public string get_StreamAlreadyClosed()
public string get_StreamNoRead()
public string get_StreamNoWrite()
public string get_Timeout()
public string get_TimeoutGettingConnection()
public string get_TraceCloseConnection()
public string get_TraceErrorMoreThanMaxValueConnections()
public string get_TraceFetchError()
public string get_TraceOpenConnection()
public string get_TraceOpenResultError()
public string get_TraceQueryDone()
public string get_TraceQueryNormalized()
public string get_TraceQueryOpened()
public string get_TraceResult()
public string get_TraceResultClosed()
public string get_TraceSetDatabase()
public string get_TraceStatementClosed()
public string get_TraceStatementExecuted()
public string get_TraceStatementPrepared()
public string get_TraceUAWarningBadIndex()
public string get_TraceUAWarningFieldConversion()
public string get_TraceUAWarningNoIndex()
public string get_TraceUAWarningSkippedColumns()
public string get_TraceUAWarningSkippedRows()
public string get_TraceWarning()
public string get_TypeIsNotCommandInterceptor()
public string get_TypeIsNotExceptionInterceptor()
public string get_UnableToConnectToHost()
public string get_UnableToCreateAuthPlugin()
public string get_UnableToDeriveParameters()
public string get_UnableToEnableQueryAnalysis()
public string get_UnableToEnumerateUDF()
public string get_UnableToExecuteSP()
public string get_UnableToParseFK()
public string get_UnableToRetrieveParameters()
public string get_UnableToStartSecondAsyncOp()
public string get_UnixSocketsNotSupported()
public string get_UnknownAuthenticationMethod()
public string get_UnknownConnectionProtocol()
public string get_ValueNotCorrectType()
public string get_ValueNotSupportedForGuid()
public string get_WinAuthNotSupportOnPlatform()
public string get_WriteToStreamFailed()
public string get_WrongParameterName()
}
internal MySql.Data.MySqlClient.Replication.ReplicationManager : object {
private List`1<ReplicationServerGroup> groups
private object thisLock
private IList`1<ReplicationServerGroup> <Groups>k__BackingField
internal IList`1<ReplicationServerGroup> Groups
internal IList`1<ReplicationServerGroup> get_Groups()
private void set_Groups(IList`1<ReplicationServerGroup> value)
internal ReplicationServerGroup AddGroup(string name, int retryTime)
internal ReplicationServerGroup AddGroup(string name, string groupType, int retryTime)
internal ReplicationServer GetServer(string groupName, bool isMaster)
internal ReplicationServerGroup GetGroup(string groupName)
internal bool IsReplicationGroup(string groupName)
internal void GetNewConnection(string groupName, bool master, MySqlConnection connection)
}
public MySql.Data.MySqlClient.Replication.ReplicationRoundRobinServerGroup : ReplicationServerGroup {
private int nextServer
public void .ctor(string name, int retryTime)
protected internal ReplicationServer GetServer(bool isMaster)
}
public MySql.Data.MySqlClient.Replication.ReplicationServer : object {
private string <Name>k__BackingField
private bool <IsMaster>k__BackingField
private string <ConnectionString>k__BackingField
private bool <IsAvailable>k__BackingField
public string Name
public bool IsMaster
public string ConnectionString
public bool IsAvailable
public void .ctor(string name, bool isMaster, string connectionString)
public string get_Name()
private void set_Name(string value)
public bool get_IsMaster()
private void set_IsMaster(bool value)
public string get_ConnectionString()
internal void set_ConnectionString(string value)
public bool get_IsAvailable()
public void set_IsAvailable(bool value)
}
public MySql.Data.MySqlClient.Replication.ReplicationServerGroup : object {
protected List`1<ReplicationServer> servers
private string <Name>k__BackingField
private int <RetryTime>k__BackingField
private IList`1<ReplicationServer> <Servers>k__BackingField
public string Name
public int RetryTime
protected IList`1<ReplicationServer> Servers
public void .ctor(string name, int retryTime)
public string get_Name()
protected void set_Name(string value)
public int get_RetryTime()
protected void set_RetryTime(int value)
protected IList`1<ReplicationServer> get_Servers()
private void set_Servers(IList`1<ReplicationServer> value)
protected internal ReplicationServer AddServer(string name, bool isMaster, string connectionString)
protected internal void RemoveServer(string name)
protected internal ReplicationServer GetServer(string name)
protected internal ReplicationServer GetServer(bool isMaster)
protected internal ReplicationServer GetServer(bool isMaster, MySqlConnectionStringBuilder settings)
protected internal void HandleFailover(ReplicationServer server)
protected internal void HandleFailover(ReplicationServer server, Exception exception)
}
public MySql.Data.MySqlClient.ReplicationConfigurationElement : ConfigurationElement {
public GenericConfigurationElementCollection`1<ReplicationServerGroupConfigurationElement> ServerGroups
public GenericConfigurationElementCollection`1<ReplicationServerGroupConfigurationElement> get_ServerGroups()
}
public MySql.Data.MySqlClient.ReplicationServerConfigurationElement : ConfigurationElement {
public string Name
public bool IsMaster
public string ConnectionString
public string get_Name()
public void set_Name(string value)
public bool get_IsMaster()
public void set_IsMaster(bool value)
public string get_ConnectionString()
public void set_ConnectionString(string value)
}
public MySql.Data.MySqlClient.ReplicationServerGroupConfigurationElement : ConfigurationElement {
public string Name
public string GroupType
public int RetryTime
public GenericConfigurationElementCollection`1<ReplicationServerConfigurationElement> Servers
public string get_Name()
public void set_Name(string value)
public string get_GroupType()
public void set_GroupType(string value)
public int get_RetryTime()
public void set_RetryTime(int value)
public GenericConfigurationElementCollection`1<ReplicationServerConfigurationElement> get_Servers()
}
internal MySql.Data.MySqlClient.ResultSet : object {
private Driver driver
private bool hasRows
private Boolean[] uaFieldsUsed
private MySqlField[] fields
private IMySqlValue[] values
private Dictionary`2<string, int> fieldHashCS
private Dictionary`2<string, int> fieldHashCI
private int rowIndex
private bool readDone
private bool isSequential
private int seqIndex
private bool isOutputParameters
private int affectedRows
private long insertedId
private int statementId
private int totalRows
private int skippedRows
private bool cached
private List`1<IMySqlValue[]> cachedValues
public bool HasRows
public int Size
public MySqlField[] Fields
public IMySqlValue[] Values
public bool IsOutputParameters
public int AffectedRows
public long InsertedId
public int TotalRows
public int SkippedRows
public bool Cached
public IMySqlValue Item
public void .ctor(int affectedRows, long insertedId)
public void .ctor(Driver d, int statementId, int numCols)
public bool get_HasRows()
public int get_Size()
public MySqlField[] get_Fields()
public IMySqlValue[] get_Values()
public bool get_IsOutputParameters()
public void set_IsOutputParameters(bool value)
public int get_AffectedRows()
public long get_InsertedId()
public int get_TotalRows()
public int get_SkippedRows()
public bool get_Cached()
public void set_Cached(bool value)
public int GetOrdinal(string name)
public IMySqlValue get_Item(int index)
private bool GetNextRow()
public bool NextRow(CommandBehavior behavior)
private bool CachedNextRow(CommandBehavior behavior)
public void Close()
private void CacheClose()
private void CacheReset()
public bool FieldRead(int index)
public void SetValueObject(int i, IMySqlValue valueObject)
private bool IsOutputParameterResultSet()
private void LoadColumns(int numCols)
private void ReadColumnData(bool outputParms)
}
public MySql.Data.MySqlClient.SchemaColumn : object {
private string <Name>k__BackingField
private Type <Type>k__BackingField
public string Name
public Type Type
public string get_Name()
public void set_Name(string value)
public Type get_Type()
public void set_Type(Type value)
}
internal MySql.Data.MySqlClient.SchemaProvider : object {
protected MySqlConnection connection
public string MetaCollection
public void .ctor(MySqlConnection connectionToUse)
public MySqlSchemaCollection GetSchema(string collection, String[] restrictions)
public MySqlSchemaCollection GetDatabases(String[] restrictions)
public MySqlSchemaCollection GetTables(String[] restrictions)
protected void QuoteDefaultValues(MySqlSchemaCollection schemaCollection)
public MySqlSchemaCollection GetColumns(String[] restrictions)
private void LoadTableColumns(MySqlSchemaCollection schemaCollection, string schema, string tableName, string columnRestriction)
private void ParseColumnRow(MySqlSchemaRow row)
public MySqlSchemaCollection GetIndexes(String[] restrictions)
public MySqlSchemaCollection GetIndexColumns(String[] restrictions)
public MySqlSchemaCollection GetForeignKeys(String[] restrictions)
public MySqlSchemaCollection GetForeignKeyColumns(String[] restrictions)
private string GetSqlMode()
private void GetForeignKeysOnTable(MySqlSchemaCollection fkTable, MySqlSchemaRow tableToParse, string filterName, bool includeColumns)
private void ParseConstraint(MySqlSchemaCollection fkTable, MySqlSchemaRow table, MySqlTokenizer tokenizer, bool includeColumns)
private List`1<string> ParseColumns(MySqlTokenizer tokenizer)
private void ProcessColumns(MySqlSchemaCollection fkTable, MySqlSchemaRow row, List`1<string> srcColumns, List`1<string> targetColumns)
public MySqlSchemaCollection GetUsers(String[] restrictions)
public MySqlSchemaCollection GetProcedures(String[] restrictions)
protected MySqlSchemaCollection GetCollections()
private MySqlSchemaCollection GetDataSourceInformation()
private MySqlSchemaCollection GetDataTypes()
protected MySqlSchemaCollection GetRestrictions()
private MySqlSchemaCollection GetReservedWords()
protected void FillTable(MySqlSchemaCollection dt, Object[][] data)
private void FindTables(MySqlSchemaCollection schema, String[] restrictions)
private string GetString(MySqlDataReader reader, int index)
public MySqlSchemaCollection GetUDF(String[] restrictions)
protected MySqlSchemaCollection GetSchemaInternal(string collection, String[] restrictions)
internal String[] CleanRestrictions(String[] restrictionValues)
protected MySqlSchemaCollection QueryCollection(string name, string sql)
}
internal MySql.Data.MySqlClient.ScriptStatement : ValueType {
public string text
public int line
public int position
}
internal MySql.Data.MySqlClient.ServerStatusFlags : Enum {
public int value__
public ServerStatusFlags InTransaction
public ServerStatusFlags AutoCommitMode
public ServerStatusFlags MoreResults
public ServerStatusFlags AnotherQuery
public ServerStatusFlags BadIndex
public ServerStatusFlags NoIndex
public ServerStatusFlags CursorExists
public ServerStatusFlags LastRowSent
public ServerStatusFlags OutputParameters
}
internal MySql.Data.MySqlClient.StandardExceptionInterceptor : BaseExceptionInterceptor {
public Exception InterceptException(Exception exception)
}
internal MySql.Data.MySqlClient.Statement : object {
protected MySqlCommand command
protected string commandText
private List`1<MySqlPacket> buffers
public string ResolvedCommandText
protected Driver Driver
protected MySqlConnection Connection
protected MySqlParameterCollection Parameters
private void .ctor(MySqlCommand cmd)
public void .ctor(MySqlCommand cmd, string text)
public string get_ResolvedCommandText()
protected Driver get_Driver()
protected MySqlConnection get_Connection()
protected MySqlParameterCollection get_Parameters()
public void Close(MySqlDataReader reader)
public void Resolve(bool preparing)
public void Execute()
public bool ExecuteNext()
protected void BindParameters()
private void InternalBindParameters(string sql, MySqlParameterCollection parameters, MySqlPacket packet)
protected bool ShouldIgnoreMissingParameter(string parameterName)
private bool SerializeParameter(MySqlParameterCollection parameters, MySqlPacket packet, string parmName, int parameterIndex)
}
internal MySql.Data.MySqlClient.StoredProcedure : PreparableStatement {
internal string ParameterPrefix
private string outSelect
private string resolvedCommandText
private bool serverProvidingOutputParameters
public bool ServerProvidingOutputParameters
public string ResolvedCommandText
public void .ctor(MySqlCommand cmd, string text)
private MySqlParameter GetReturnParameter()
public bool get_ServerProvidingOutputParameters()
public string get_ResolvedCommandText()
internal string GetCacheKey(string spName)
private ProcedureCacheEntry GetParameters(string procName)
public string GetFlags(string dtd)
private string FixProcedureName(string name)
private MySqlParameter GetAndFixParameter(string spName, MySqlSchemaRow param, bool realAsFloat, MySqlParameter returnParameter)
private MySqlParameterCollection CheckParameters(string spName)
public void Resolve(bool preparing)
private string SetUserVariables(MySqlParameterCollection parms, bool preparing)
private string CreateCallStatement(string spName, MySqlParameter returnParameter, MySqlParameterCollection parms)
private string CreateOutputSelect(MySqlParameterCollection parms, bool preparing)
internal void ProcessOutputParameters(MySqlDataReader reader)
private void AdjustOutputTypes(MySqlDataReader reader)
public void Close(MySqlDataReader reader)
}
public MySql.Data.MySqlClient.StringUtility : object {
public string ToUpperInvariant(string s)
public string ToLowerInvariant(string s)
}
internal MySql.Data.MySqlClient.SystemPerformanceMonitor : PerformanceMonitor {
private PerformanceCounter procedureHardQueries
private PerformanceCounter procedureSoftQueries
public void .ctor(MySqlConnection connection)
public void AddHardProcedureQuery()
public void AddSoftProcedureQuery()
}
internal MySql.Data.MySqlClient.TableCache : object {
private BaseTableCache cache
public void AddToCache(string commandText, ResultSet resultSet)
public ResultSet RetrieveFromCache(string commandText, int cacheAge)
public void RemoveFromCache(string commandText)
public void DumpCache()
}
internal MySql.Data.MySqlClient.TimedStream : Stream {
private Stream baseStream
private int timeout
private int lastReadTimeout
private int lastWriteTimeout
private LowResolutionStopwatch stopwatch
private bool isClosed
internal bool IsClosed
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public bool CanTimeout
public int ReadTimeout
public int WriteTimeout
internal bool get_IsClosed()
public void .ctor(Stream baseStream)
private bool ShouldResetStreamTimeout(int currentValue, int newValue)
private void StartTimer(IOKind op)
private void StopTimer()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public int Read(Byte[] buffer, int offset, int count)
public int ReadByte()
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
public bool get_CanTimeout()
public int get_ReadTimeout()
public void set_ReadTimeout(int value)
public int get_WriteTimeout()
public void set_WriteTimeout(int value)
public void Close()
public void ResetTimeout(int newTimeout)
private void HandleException(Exception e)
}
internal MySql.Data.MySqlClient.TracingDriver : Driver {
private long driverCounter
private long driverId
private ResultSet activeResult
private int rowSizeInBytes
public void .ctor(MySqlConnectionStringBuilder settings)
public void Open()
public void Close()
public void SendQuery(MySqlPacket p)
protected int GetResult(int statementId, Int32& affectedRows, Int64& insertedId)
public ResultSet NextResult(int statementId, bool force)
public int PrepareStatement(string sql, MySqlField[]& parameters)
public void CloseStatement(int id)
public void SetDatabase(string dbName)
public void ExecuteStatement(MySqlPacket packetToExecute)
public bool FetchDataRow(int statementId, int columns)
public void CloseQuery(MySqlConnection connection, int statementId)
public List`1<MySqlError> ReportWarnings(MySqlConnection connection)
private bool AllFieldsAccessed(ResultSet rs)
private void ReportUsageAdvisorWarnings(int statementId, ResultSet rs)
}
public MySql.Data.MySqlClient.UsageAdvisorWarningFlags : Enum {
public int value__
public UsageAdvisorWarningFlags NoIndex
public UsageAdvisorWarningFlags BadIndex
public UsageAdvisorWarningFlags SkippedRows
public UsageAdvisorWarningFlags SkippedColumns
public UsageAdvisorWarningFlags FieldConversion
}
internal MySql.Data.Types.IMySqlValue {
public bool IsNull
public MySqlDbType MySqlDbType
public object Value
public Type SystemType
public string MySqlTypeName
public bool get_IsNull()
public MySqlDbType get_MySqlDbType()
public object get_Value()
public Type get_SystemType()
public string get_MySqlTypeName()
public void WriteValue(MySqlPacket packet, bool binary, object value, int length)
public IMySqlValue ReadValue(MySqlPacket packet, long length, bool isNull)
public void SkipValue(MySqlPacket packet)
}
internal MySql.Data.Types.MetaData : object {
public bool IsNumericType(string typename)
public bool IsTextType(string typename)
public bool SupportScale(string typename)
public MySqlDbType NameToType(string typeName, bool unsigned, bool realAsFloat, MySqlConnection connection)
}
internal MySql.Data.Types.MySqlBinary : ValueType {
private MySqlDbType type
private Byte[] mValue
private bool isNull
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public Byte[] Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(MySqlDbType type, bool isNull)
public void .ctor(MySqlDbType type, Byte[] val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public Byte[] get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private void EscapeByteArray(Byte[] bytes, int length, MySqlPacket packet)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
public void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlBit : ValueType {
private ulong mValue
private bool isNull
private bool readAsString
public bool ReadAsString
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(bool isnull)
public bool get_ReadAsString()
public void set_ReadAsString(bool value)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
public void WriteValue(MySqlPacket packet, bool binary, object value, int length)
public IMySqlValue ReadValue(MySqlPacket packet, long length, bool isNull)
public void SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlByte : ValueType {
private sbyte mValue
private bool isNull
private bool treatAsBool
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public sbyte Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
internal bool TreatAsBoolean
public void .ctor(bool isNull)
public void .ctor(sbyte val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public sbyte get_Value()
public void set_Value(sbyte value)
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal bool get_TreatAsBoolean()
internal void set_TreatAsBoolean(bool value)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
public MySql.Data.Types.MySqlConversionException : Exception {
public void .ctor(string msg)
}
public MySql.Data.Types.MySqlDateTime : ValueType {
private bool isNull
private MySqlDbType type
private int year
private int month
private int day
private int hour
private int minute
private int second
private int millisecond
private int microsecond
public int TimezoneOffset
public bool IsValidDateTime
public int Year
public int Month
public int Day
public int Hour
public int Minute
public int Second
public int Millisecond
public int Microsecond
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public DateTime Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
private ulong System.IConvertible.ToUInt64(IFormatProvider provider)
private sbyte System.IConvertible.ToSByte(IFormatProvider provider)
private double System.IConvertible.ToDouble(IFormatProvider provider)
private DateTime System.IConvertible.ToDateTime(IFormatProvider provider)
private float System.IConvertible.ToSingle(IFormatProvider provider)
private bool System.IConvertible.ToBoolean(IFormatProvider provider)
private int System.IConvertible.ToInt32(IFormatProvider provider)
private ushort System.IConvertible.ToUInt16(IFormatProvider provider)
private short System.IConvertible.ToInt16(IFormatProvider provider)
private string System.IConvertible.ToString(IFormatProvider provider)
private byte System.IConvertible.ToByte(IFormatProvider provider)
private char System.IConvertible.ToChar(IFormatProvider provider)
private long System.IConvertible.ToInt64(IFormatProvider provider)
private TypeCode System.IConvertible.GetTypeCode()
private decimal System.IConvertible.ToDecimal(IFormatProvider provider)
private object System.IConvertible.ToType(Type conversionType, IFormatProvider provider)
private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider)
public void .ctor(int year, int month, int day, int hour, int minute, int second, int microsecond)
public void .ctor(DateTime dt)
public void .ctor(MySqlDateTime mdt)
public void .ctor(string dateTime)
internal void .ctor(MySqlDbType type, int year, int month, int day, int hour, int minute, int second, int microsecond)
internal void .ctor(MySqlDbType type, bool isNull)
internal void .ctor(MySqlDbType type, DateTime val)
public bool get_IsValidDateTime()
public int get_Year()
public void set_Year(int value)
public int get_Month()
public void set_Month(int value)
public int get_Day()
public void set_Day(int value)
public int get_Hour()
public void set_Hour(int value)
public int get_Minute()
public void set_Minute(int value)
public int get_Second()
public void set_Second(int value)
public int get_Millisecond()
public void set_Millisecond(int value)
public int get_Microsecond()
public void set_Microsecond(int value)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public DateTime get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void SerializeText(MySqlPacket packet, MySqlDateTime value)
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object value, int length)
internal MySqlDateTime Parse(string s)
internal MySqlDateTime Parse(string s, DBVersion version)
private MySqlDateTime ParseMySql(string s)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
public DateTime GetDateTime()
private string FormatDateCustom(string format, int monthVal, int dayVal, int yearVal)
public string ToString()
public DateTime op_Explicit(MySqlDateTime val)
internal void SetDSInfo(MySqlSchemaCollection sc)
private int System.IComparable.CompareTo(object obj)
}
public MySql.Data.Types.MySqlDecimal : ValueType {
private byte precision
private byte scale
private string mValue
private bool isNull
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
public byte Precision
public byte Scale
private object MySql.Data.Types.IMySqlValue.Value
public decimal Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
internal void .ctor(bool isNull)
internal void .ctor(string val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
private object MySql.Data.Types.IMySqlValue.get_Value()
public decimal get_Value()
public double ToDouble()
public string ToString()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlDouble : ValueType {
private double mValue
private bool isNull
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public double Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(bool isNull)
public void .ctor(double val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public double get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
public MySql.Data.Types.MySqlGeometry : ValueType {
private int GEOMETRY_LENGTH
private MySqlDbType _type
private double _xValue
private double _yValue
private int _srid
private Byte[] _valBinary
private bool _isNull
public Nullable`1<double> XCoordinate
public Nullable`1<double> YCoordinate
public Nullable`1<int> SRID
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
public bool IsNull
private object MySql.Data.Types.IMySqlValue.Value
public Byte[] Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public Nullable`1<double> get_XCoordinate()
public Nullable`1<double> get_YCoordinate()
public Nullable`1<int> get_SRID()
public void .ctor(bool isNull)
public void .ctor(double xValue, double yValue)
public void .ctor(double xValue, double yValue, int srid)
internal void .ctor(MySqlDbType type, bool isNull)
internal void .ctor(MySqlDbType type, double xValue, double yValue, int srid)
public void .ctor(MySqlDbType type, Byte[] val)
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
public bool get_IsNull()
private object MySql.Data.Types.IMySqlValue.get_Value()
public Byte[] get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private void EscapeByteArray(Byte[] bytes, int length, MySqlPacket packet)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
public string ToString()
public MySqlGeometry Parse(string value)
public bool TryParse(string value, MySqlGeometry& mySqlGeometryValue)
public void SetDSInfo(MySqlSchemaCollection dsTable)
public string GetWKT()
}
internal MySql.Data.Types.MySqlGuid : ValueType {
private Guid mValue
private bool isNull
private Byte[] bytes
private bool oldGuids
public Byte[] Bytes
public bool OldGuids
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public Guid Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(Byte[] buff)
public Byte[] get_Bytes()
public bool get_OldGuids()
public void set_OldGuids(bool value)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public Guid get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private void WriteOldGuid(MySqlPacket packet, Guid guid, bool binary)
private void EscapeByteArray(Byte[] bytes, int length, MySqlPacket packet)
private MySqlGuid ReadOldGuid(MySqlPacket packet, long length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
public void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlInt16 : ValueType {
private short mValue
private bool isNull
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public short Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(bool isNull)
public void .ctor(short val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public short get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlInt32 : ValueType {
private int mValue
private bool isNull
private bool is24Bit
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public int Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
private void .ctor(MySqlDbType type)
public void .ctor(MySqlDbType type, bool isNull)
public void .ctor(MySqlDbType type, int val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public int get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlInt64 : ValueType {
private long mValue
private bool isNull
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public long Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(bool isNull)
public void .ctor(long val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public long get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlSingle : ValueType {
private float mValue
private bool isNull
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public float Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(bool isNull)
public void .ctor(float val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public float get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlString : ValueType {
private string mValue
private bool isNull
private MySqlDbType type
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public string Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(MySqlDbType type, bool isNull)
public void .ctor(MySqlDbType type, string val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public string get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlTimeSpan : ValueType {
private TimeSpan mValue
private bool isNull
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public TimeSpan Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(bool isNull)
public void .ctor(TimeSpan val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public TimeSpan get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
public string ToString()
private void ParseMySql(string s)
}
internal MySql.Data.Types.MySqlUByte : ValueType {
private byte mValue
private bool isNull
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public byte Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(bool isNull)
public void .ctor(byte val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public byte get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlUInt16 : ValueType {
private ushort mValue
private bool isNull
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public ushort Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(bool isNull)
public void .ctor(ushort val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public ushort get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlUInt32 : ValueType {
private UInt32 mValue
private bool isNull
private bool is24Bit
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public UInt32 Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
private void .ctor(MySqlDbType type)
public void .ctor(MySqlDbType type, bool isNull)
public void .ctor(MySqlDbType type, UInt32 val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public UInt32 get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object v, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal MySql.Data.Types.MySqlUInt64 : ValueType {
private ulong mValue
private bool isNull
public bool IsNull
private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType
private object MySql.Data.Types.IMySqlValue.Value
public ulong Value
private Type MySql.Data.Types.IMySqlValue.SystemType
private string MySql.Data.Types.IMySqlValue.MySqlTypeName
public void .ctor(bool isNull)
public void .ctor(ulong val)
public bool get_IsNull()
private MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType()
private object MySql.Data.Types.IMySqlValue.get_Value()
public ulong get_Value()
private Type MySql.Data.Types.IMySqlValue.get_SystemType()
private string MySql.Data.Types.IMySqlValue.get_MySqlTypeName()
private void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length)
private IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal)
private void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet)
internal void SetDSInfo(MySqlSchemaCollection sc)
}
internal zlib.Adler32 : object {
private int BASE
private int NMAX
internal long adler32(long adler, Byte[] buf, int index, int len)
}
internal zlib.Deflate : object {
private int MAX_MEM_LEVEL
private int Z_DEFAULT_COMPRESSION
private int MAX_WBITS
private int DEF_MEM_LEVEL
private int STORED
private int FAST
private int SLOW
private int NeedMore
private int BlockDone
private int FinishStarted
private int FinishDone
private int PRESET_DICT
private int Z_FILTERED
private int Z_HUFFMAN_ONLY
private int Z_DEFAULT_STRATEGY
private int Z_NO_FLUSH
private int Z_PARTIAL_FLUSH
private int Z_SYNC_FLUSH
private int Z_FULL_FLUSH
private int Z_FINISH
private int Z_OK
private int Z_STREAM_END
private int Z_NEED_DICT
private int Z_ERRNO
private int Z_STREAM_ERROR
private int Z_DATA_ERROR
private int Z_MEM_ERROR
private int Z_BUF_ERROR
private int Z_VERSION_ERROR
private int INIT_STATE
private int BUSY_STATE
private int FINISH_STATE
private int Z_DEFLATED
private int STORED_BLOCK
private int STATIC_TREES
private int DYN_TREES
private int Z_BINARY
private int Z_ASCII
private int Z_UNKNOWN
private int Buf_size
private int REP_3_6
private int REPZ_3_10
private int REPZ_11_138
private int MIN_MATCH
private int MAX_MATCH
private int MAX_BITS
private int D_CODES
private int BL_CODES
private int LENGTH_CODES
private int LITERALS
private int END_BLOCK
private Config[] config_table
private String[] z_errmsg
private int MIN_LOOKAHEAD
private int L_CODES
private int HEAP_SIZE
internal ZStream strm
internal int status
internal Byte[] pending_buf
internal int pending_buf_size
internal int pending_out
internal int pending
internal int noheader
internal byte data_type
internal byte method
internal int last_flush
internal int w_size
internal int w_bits
internal int w_mask
internal Byte[] window
internal int window_size
internal Int16[] prev
internal Int16[] head
internal int ins_h
internal int hash_size
internal int hash_bits
internal int hash_mask
internal int hash_shift
internal int block_start
internal int match_length
internal int prev_match
internal int match_available
internal int strstart
internal int match_start
internal int lookahead
internal int prev_length
internal int max_chain_length
internal int max_lazy_match
internal int level
internal int strategy
internal int good_match
internal int nice_match
internal Int16[] dyn_ltree
internal Int16[] dyn_dtree
internal Int16[] bl_tree
internal Tree l_desc
internal Tree d_desc
internal Tree bl_desc
internal Int16[] bl_count
internal Int32[] heap
internal int heap_len
internal int heap_max
internal Byte[] depth
internal int l_buf
internal int lit_bufsize
internal int last_lit
internal int d_buf
internal int opt_len
internal int static_len
internal int matches
internal int last_eob_len
internal short bi_buf
internal int bi_valid
internal void lm_init()
internal void tr_init()
internal void init_block()
internal void pqdownheap(Int16[] tree, int k)
internal bool smaller(Int16[] tree, int n, int m, Byte[] depth)
internal void scan_tree(Int16[] tree, int max_code)
internal int build_bl_tree()
internal void send_all_trees(int lcodes, int dcodes, int blcodes)
internal void send_tree(Int16[] tree, int max_code)
internal void put_byte(Byte[] p, int start, int len)
internal void put_byte(byte c)
internal void put_short(int w)
internal void putShortMSB(int b)
internal void send_code(int c, Int16[] tree)
internal void send_bits(int value_Renamed, int length)
internal void _tr_align()
internal bool _tr_tally(int dist, int lc)
internal void compress_block(Int16[] ltree, Int16[] dtree)
internal void set_data_type()
internal void bi_flush()
internal void bi_windup()
internal void copy_block(int buf, int len, bool header)
internal void flush_block_only(bool eof)
internal int deflate_stored(int flush)
internal void _tr_stored_block(int buf, int stored_len, bool eof)
internal void _tr_flush_block(int buf, int stored_len, bool eof)
internal void fill_window()
internal int deflate_fast(int flush)
internal int deflate_slow(int flush)
internal int longest_match(int cur_match)
internal int deflateInit(ZStream strm, int level, int bits)
internal int deflateInit(ZStream strm, int level)
internal int deflateInit2(ZStream strm, int level, int method, int windowBits, int memLevel, int strategy)
internal int deflateReset(ZStream strm)
internal int deflateEnd()
internal int deflateParams(ZStream strm, int _level, int _strategy)
internal int deflateSetDictionary(ZStream strm, Byte[] dictionary, int dictLength)
internal int deflate(ZStream strm, int flush)
}
internal zlib.InfBlocks : object {
private int MANY
private int Z_OK
private int Z_STREAM_END
private int Z_NEED_DICT
private int Z_ERRNO
private int Z_STREAM_ERROR
private int Z_DATA_ERROR
private int Z_MEM_ERROR
private int Z_BUF_ERROR
private int Z_VERSION_ERROR
private int TYPE
private int LENS
private int STORED
private int TABLE
private int BTREE
private int DTREE
private int CODES
private int DRY
private int DONE
private int BAD
private Int32[] inflate_mask
internal Int32[] border
internal int mode
internal int left
internal int table
internal int index
internal Int32[] blens
internal Int32[] bb
internal Int32[] tb
internal InfCodes codes
internal int last
internal int bitk
internal int bitb
internal Int32[] hufts
internal Byte[] window
internal int end
internal int read
internal int write
internal object checkfn
internal long check
internal void .ctor(ZStream z, object checkfn, int w)
internal void reset(ZStream z, Int64[] c)
internal int proc(ZStream z, int r)
internal void free(ZStream z)
internal void set_dictionary(Byte[] d, int start, int n)
internal int sync_point()
internal int inflate_flush(ZStream z, int r)
}
internal zlib.InfCodes : object {
private int Z_OK
private int Z_STREAM_END
private int Z_NEED_DICT
private int Z_ERRNO
private int Z_STREAM_ERROR
private int Z_DATA_ERROR
private int Z_MEM_ERROR
private int Z_BUF_ERROR
private int Z_VERSION_ERROR
private int START
private int LEN
private int LENEXT
private int DIST
private int DISTEXT
private int COPY
private int LIT
private int WASH
private int END
private int BADCODE
private Int32[] inflate_mask
internal int mode
internal int len
internal Int32[] tree
internal int tree_index
internal int need
internal int lit
internal int get_Renamed
internal int dist
internal byte lbits
internal byte dbits
internal Int32[] ltree
internal int ltree_index
internal Int32[] dtree
internal int dtree_index
internal void .ctor(int bl, int bd, Int32[] tl, int tl_index, Int32[] td, int td_index, ZStream z)
internal void .ctor(int bl, int bd, Int32[] tl, Int32[] td, ZStream z)
internal int proc(InfBlocks s, ZStream z, int r)
internal void free(ZStream z)
internal int inflate_fast(int bl, int bd, Int32[] tl, int tl_index, Int32[] td, int td_index, InfBlocks s, ZStream z)
}
internal zlib.Inflate : object {
private int MAX_WBITS
private int PRESET_DICT
internal int Z_NO_FLUSH
internal int Z_PARTIAL_FLUSH
internal int Z_SYNC_FLUSH
internal int Z_FULL_FLUSH
internal int Z_FINISH
private int Z_DEFLATED
private int Z_OK
private int Z_STREAM_END
private int Z_NEED_DICT
private int Z_ERRNO
private int Z_STREAM_ERROR
private int Z_DATA_ERROR
private int Z_MEM_ERROR
private int Z_BUF_ERROR
private int Z_VERSION_ERROR
private int METHOD
private int FLAG
private int DICT4
private int DICT3
private int DICT2
private int DICT1
private int DICT0
private int BLOCKS
private int CHECK4
private int CHECK3
private int CHECK2
private int CHECK1
private int DONE
private int BAD
internal int mode
internal int method
internal Int64[] was
internal long need
internal int marker
internal int nowrap
internal int wbits
internal InfBlocks blocks
private Byte[] mark
internal int inflateReset(ZStream z)
internal int inflateEnd(ZStream z)
internal int inflateInit(ZStream z, int w)
internal int inflate(ZStream z, int f)
internal int inflateSetDictionary(ZStream z, Byte[] dictionary, int dictLength)
internal int inflateSync(ZStream z)
internal int inflateSyncPoint(ZStream z)
}
internal zlib.InfTree : object {
private int MANY
private int Z_OK
private int Z_STREAM_END
private int Z_NEED_DICT
private int Z_ERRNO
private int Z_STREAM_ERROR
private int Z_DATA_ERROR
private int Z_MEM_ERROR
private int Z_BUF_ERROR
private int Z_VERSION_ERROR
internal int fixed_bl
internal int fixed_bd
internal int BMAX
internal Int32[] fixed_tl
internal Int32[] fixed_td
internal Int32[] cplens
internal Int32[] cplext
internal Int32[] cpdist
internal Int32[] cpdext
internal int huft_build(Int32[] b, int bindex, int n, int s, Int32[] d, Int32[] e, Int32[] t, Int32[] m, Int32[] hp, Int32[] hn, Int32[] v)
internal int inflate_trees_bits(Int32[] c, Int32[] bb, Int32[] tb, Int32[] hp, ZStream z)
internal int inflate_trees_dynamic(int nl, int nd, Int32[] c, Int32[] bl, Int32[] bd, Int32[] tl, Int32[] td, Int32[] hp, ZStream z)
internal int inflate_trees_fixed(Int32[] bl, Int32[] bd, Int32[][] tl, Int32[][] td, ZStream z)
}
internal zlib.StaticTree : object {
private int MAX_BITS
private int BL_CODES
private int D_CODES
private int LITERALS
private int LENGTH_CODES
internal int MAX_BL_BITS
private int L_CODES
internal Int16[] static_ltree
internal Int16[] static_dtree
internal StaticTree static_l_desc
internal StaticTree static_d_desc
internal StaticTree static_bl_desc
internal Int16[] static_tree
internal Int32[] extra_bits
internal int extra_base
internal int elems
internal int max_length
internal void .ctor(Int16[] static_tree, Int32[] extra_bits, int extra_base, int elems, int max_length)
}
internal zlib.SupportClass : object {
public long Identity(long literal)
public ulong Identity(ulong literal)
public float Identity(float literal)
public double Identity(double literal)
public int URShift(int number, int bits)
public int URShift(int number, long bits)
public long URShift(long number, int bits)
public long URShift(long number, long bits)
public int ReadInput(Stream sourceStream, Byte[] target, int start, int count)
public int ReadInput(TextReader sourceTextReader, Byte[] target, int start, int count)
public Byte[] ToByteArray(string sourceString)
public Char[] ToCharArray(Byte[] byteArray)
public void Serialize(Stream stream, object objectToSend)
public void Serialize(BinaryWriter binaryWriter, object objectToSend)
public object Deserialize(BinaryReader binaryReader)
public void WriteStackTrace(Exception throwable, TextWriter stream)
}
internal zlib.Tree : object {
private int MAX_BITS
private int BL_CODES
private int D_CODES
private int LITERALS
private int LENGTH_CODES
internal int MAX_BL_BITS
internal int END_BLOCK
internal int REP_3_6
internal int REPZ_3_10
internal int REPZ_11_138
internal int Buf_size
internal int DIST_CODE_LEN
private int L_CODES
private int HEAP_SIZE
internal Int32[] extra_lbits
internal Int32[] extra_dbits
internal Int32[] extra_blbits
internal Byte[] bl_order
internal Byte[] _dist_code
internal Byte[] _length_code
internal Int32[] base_length
internal Int32[] base_dist
internal Int16[] dyn_tree
internal int max_code
internal StaticTree stat_desc
internal int d_code(int dist)
internal void gen_bitlen(Deflate s)
internal void build_tree(Deflate s)
internal void gen_codes(Int16[] tree, int max_code, Int16[] bl_count)
internal int bi_reverse(int code, int len)
}
internal zlib.ZInputStream : BinaryReader {
public long maxInput
protected internal ZStream z
protected internal int bufsize
protected internal int flush
protected internal Byte[] buf
protected internal Byte[] buf1
protected internal bool compress
private Stream in_Renamed
private bool nomoreinput
public int FlushMode
public long TotalIn
public long TotalOut
private void InitBlock()
public int get_FlushMode()
public void set_FlushMode(int value)
public long get_TotalIn()
public long get_TotalOut()
public void .ctor(Stream in_Renamed)
public void .ctor(Stream in_Renamed, int level)
public int Read()
public int read(Byte[] b, int off, int len)
public long skip(long n)
public void Close()
}
internal zlib.zlibConst : object {
private string version_Renamed_Field
public int Z_NO_COMPRESSION
public int Z_BEST_SPEED
public int Z_BEST_COMPRESSION
public int Z_DEFAULT_COMPRESSION
public int Z_FILTERED
public int Z_HUFFMAN_ONLY
public int Z_DEFAULT_STRATEGY
public int Z_NO_FLUSH
public int Z_PARTIAL_FLUSH
public int Z_SYNC_FLUSH
public int Z_FULL_FLUSH
public int Z_FINISH
public int Z_OK
public int Z_STREAM_END
public int Z_NEED_DICT
public int Z_ERRNO
public int Z_STREAM_ERROR
public int Z_DATA_ERROR
public int Z_MEM_ERROR
public int Z_BUF_ERROR
public int Z_VERSION_ERROR
public string version()
}
internal zlib.ZOutputStream : Stream {
protected internal ZStream z
protected internal int bufsize
protected internal int flush_Renamed_Field
protected internal Byte[] buf
protected internal Byte[] buf1
protected internal bool compress
private Stream out_Renamed
public int FlushMode
public long TotalIn
public long TotalOut
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
private void InitBlock()
public int get_FlushMode()
public void set_FlushMode(int value)
public long get_TotalIn()
public long get_TotalOut()
public void .ctor(Stream out_Renamed)
public void .ctor(Stream out_Renamed, int level)
public void WriteByte(int b)
public void WriteByte(byte b)
public void Write(Byte[] b1, int off, int len)
public void finish()
public void end()
public void Close()
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public void SetLength(long value)
public long Seek(long offset, SeekOrigin origin)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
}
internal zlib.ZStream : object {
private int MAX_WBITS
private int Z_NO_FLUSH
private int Z_PARTIAL_FLUSH
private int Z_SYNC_FLUSH
private int Z_FULL_FLUSH
private int Z_FINISH
private int MAX_MEM_LEVEL
private int Z_OK
private int Z_STREAM_END
private int Z_NEED_DICT
private int Z_ERRNO
private int Z_STREAM_ERROR
private int Z_DATA_ERROR
private int Z_MEM_ERROR
private int Z_BUF_ERROR
private int Z_VERSION_ERROR
private int DEF_WBITS
public Byte[] next_in
public int next_in_index
public int avail_in
public long total_in
public Byte[] next_out
public int next_out_index
public int avail_out
public long total_out
public string msg
internal Deflate dstate
internal Inflate istate
internal int data_type
public long adler
internal Adler32 _adler
public int inflateInit()
public int inflateInit(int w)
public int inflate(int f)
public int inflateEnd()
public int inflateSync()
public int inflateSetDictionary(Byte[] dictionary, int dictLength)
public int deflateInit(int level)
public int deflateInit(int level, int bits)
public int deflate(int flush)
public int deflateEnd()
public int deflateParams(int level, int strategy)
public int deflateSetDictionary(Byte[] dictionary, int dictLength)
internal void flush_pending()
internal int read_buf(Byte[] buf, int start, int size)
public void free()
}
internal zlib.ZStreamException : IOException {
public void .ctor(string s)
}
