[DefaultMemberAttribute("Item")]
internal class MySql.Data.Common.Cache`2 : object {
    private int _capacity;
    private Queue`1<KeyType> _keyQ;
    private Dictionary`2<KeyType, ValueType> _contents;
    public ValueType Item { get; public set; }
    public Cache`2(int initialCapacity, int capacity);
    public ValueType get_Item(KeyType key);
    public void set_Item(KeyType key, ValueType value);
    public void Add(KeyType key, ValueType value);
    private void InternalAdd(KeyType key, ValueType value);
}
internal class MySql.Data.Common.ContextString : object {
    private string contextMarkers;
    private bool escapeBackslash;
    public string ContextMarkers { get; public set; }
    public ContextString(string contextMarkers, bool escapeBackslash);
    public string get_ContextMarkers();
    public void set_ContextMarkers(string value);
    public int IndexOf(string src, string target);
    public int IndexOf(string src, string target, int startIndex);
    private bool IndexInQuotes(string src, int index, int startIndex);
    public int IndexOf(string src, char target);
    public String[] Split(string src, string delimiters);
}
internal class MySql.Data.Common.DBVersion : ValueType {
    private int major;
    private int minor;
    private int build;
    private string srcString;
    public int Major { get; }
    public int Minor { get; }
    public int Build { get; }
    public DBVersion(string s, int major, int minor, int build);
    public int get_Major();
    public int get_Minor();
    public int get_Build();
    public static DBVersion Parse(string versionString);
    public bool isAtLeast(int majorNum, int minorNum, int buildNum);
    public virtual string ToString();
}
internal class MySql.Data.Common.LowResolutionStopwatch : object {
    private long millis;
    private long startTime;
    public static long Frequency;
    public static bool isHighResolution;
    public long ElapsedMilliseconds { get; }
    public TimeSpan Elapsed { get; }
    private static LowResolutionStopwatch();
    public long get_ElapsedMilliseconds();
    public void Start();
    public void Stop();
    public void Reset();
    public TimeSpan get_Elapsed();
    public static LowResolutionStopwatch StartNew();
    public static long GetTimestamp();
    private bool IsRunning();
}
internal class MySql.Data.Common.MyNetworkStream : NetworkStream {
    private static int MaxRetryCount;
    private Socket socket;
    public MyNetworkStream(Socket socket, bool ownsSocket);
    private bool IsTimeoutException(SocketException e);
    private bool IsWouldBlockException(SocketException e);
    private void HandleOrRethrowException(Exception e);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public static MyNetworkStream CreateStream(MySqlConnectionStringBuilder settings, bool unix);
    private static IPHostEntry ParseIPAddress(string hostname);
    private static IPHostEntry GetHostEntry(string hostname);
    private static EndPoint CreateUnixEndPoint(string host);
    private static MyNetworkStream CreateSocketStream(MySqlConnectionStringBuilder settings, IPAddress ip, bool unix);
    private static void SetKeepAlive(Socket s, UInt32 time);
}
[SuppressUnmanagedCodeSecurityAttribute]
internal class MySql.Data.Common.NamedPipeStream : Stream {
    private static int ERROR_PIPE_BUSY;
    private static int ERROR_SEM_TIMEOUT;
    private SafeFileHandle handle;
    private Stream fileStream;
    private int readTimeout;
    private int writeTimeout;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public NamedPipeStream(string path, FileAccess mode, UInt32 timeout);
    private void CancelIo();
    public void Open(string path, FileAccess mode, UInt32 timeout);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Close();
    public virtual void SetLength(long length);
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual long Seek(long offset, SeekOrigin origin);
    internal static Stream Create(string pipeName, string hostname, UInt32 timeout);
}
internal class MySql.Data.Common.NativeMethods : object {
    public static UInt32 GENERIC_READ;
    public static UInt32 GENERIC_WRITE;
    public static int INVALIDpipeHandle_VALUE;
    public static UInt32 FILE_FLAG_OVERLAPPED;
    public static UInt32 FILE_FLAG_NO_BUFFERING;
    public static UInt32 OPEN_EXISTING;
    public static IntPtr CreateFile(string fileName, UInt32 desiredAccess, UInt32 shareMode, SecurityAttributes securityAttributes, UInt32 creationDisposition, UInt32 flagsAndAttributes, UInt32 templateFile);
    public static bool PeekNamedPipe(IntPtr handle, Byte[] buffer, UInt32 nBufferSize, UInt32& bytesRead, UInt32& bytesAvail, UInt32& BytesLeftThisMessage);
    public static bool ReadFile(IntPtr hFile, Byte[] lpBuffer, UInt32 nNumberOfBytesToRead, UInt32& lpNumberOfBytesRead, IntPtr lpOverlapped);
    public static bool WriteFile(IntPtr hFile, Byte[] buffer, UInt32 numberOfBytesToWrite, UInt32& numberOfBytesWritten, IntPtr lpOverlapped);
    public static bool CloseHandle(IntPtr handle);
    public static bool CancelIo(IntPtr handle);
    public static bool FlushFileBuffers(IntPtr handle);
    public static IntPtr OpenEvent(UInt32 dwDesiredAccess, bool bInheritHandle, string lpName);
    public static IntPtr OpenFileMapping(UInt32 dwDesiredAccess, bool bInheritHandle, string lpName);
    public static IntPtr MapViewOfFile(IntPtr hFileMappingObject, UInt32 dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, IntPtr dwNumberOfBytesToMap);
    public static bool UnmapViewOfFile(IntPtr lpBaseAddress);
    public static int FlushViewOfFile(IntPtr address, UInt32 numBytes);
    public static bool WaitNamedPipe(string namedPipeName, UInt32 timeOut);
    public static IntPtr socket(int af, int type, int protocol);
    public static int ioctlsocket(IntPtr socket, UInt32 cmd, UInt32& arg);
    public static int WSAIoctl(IntPtr s, UInt32 dwIoControlCode, Byte[] inBuffer, UInt32 cbInBuffer, Byte[] outBuffer, UInt32 cbOutBuffer, IntPtr lpcbBytesReturned, IntPtr lpOverlapped, IntPtr lpCompletionRoutine);
    public static int WSAGetLastError();
    public static int connect(IntPtr socket, Byte[] addr, int addrlen);
    public static int recv(IntPtr socket, Byte[] buff, int len, int flags);
    public static int send(IntPtr socket, Byte[] buff, int len, int flags);
}
internal class MySql.Data.Common.Platform : object {
    private static bool inited;
    private static bool isMono;
    public static char DirectorySeparatorChar { get; }
    public static bool IsWindows();
    public static char get_DirectorySeparatorChar();
    public static bool IsMono();
    private static void Init();
}
internal class MySql.Data.Common.QueryNormalizer : object {
    private static List`1<string> keywords;
    private List`1<Token> tokens;
    private int pos;
    private string fullSql;
    private string queryType;
    public string QueryType { get; }
    private static QueryNormalizer();
    public string get_QueryType();
    public string Normalize(string sql);
    private void DetermineStatementType(List`1<Token> tok);
    private void ProcessMathSymbols(List`1<Token> tok);
    private void CollapseWhitespace(List`1<Token> tok);
    private void CollapseValueLists(List`1<Token> tok);
    private void CollapseValueList(List`1<Token> tok, Int32& pos);
    private void CollapseInLists(List`1<Token> tok);
    private Token GetNextRealToken(List`1<Token> tok, Int32& pos);
    private void CollapseInList(List`1<Token> tok, Int32& pos);
    private void TokenizeSql(string sql);
    private bool LetterStartsComment(char c);
    private bool IsSpecialCharacter(char c);
    private bool ConsumeComment();
    private void ConsumeSymbol();
    private void ConsumeQuotedToken(char c);
    private void ConsumeUnquotedToken();
    private void ConsumeWhitespace();
    private bool IsKeyword(string word);
}
internal class MySql.Data.Common.SharedMemory : object {
    private static UInt32 FILE_MAP_WRITE;
    private IntPtr fileMapping;
    private IntPtr view;
    public IntPtr View { get; }
    public SharedMemory(string name, IntPtr size);
    protected virtual void Finalize();
    public IntPtr get_View();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class MySql.Data.Common.SharedMemoryStream : Stream {
    private static int BUFFERLENGTH;
    private string memoryName;
    private EventWaitHandle serverRead;
    private EventWaitHandle serverWrote;
    private EventWaitHandle clientRead;
    private EventWaitHandle clientWrote;
    private EventWaitHandle connectionClosed;
    private SharedMemory data;
    private int bytesLeft;
    private int position;
    private int connectNumber;
    private int readTimeout;
    private int writeTimeout;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public SharedMemoryStream(string memName);
    public void Open(UInt32 timeOut);
    public virtual void Close();
    private void GetConnectNumber(UInt32 timeOut);
    private void SetupEvents();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void SetLength(long value);
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
}
internal class MySql.Data.Common.StreamCreator : object {
    private string hostList;
    private UInt32 port;
    private string pipeName;
    private UInt32 timeOut;
    private UInt32 keepalive;
    private DBVersion driverVersion;
    public StreamCreator(string hosts, UInt32 port, string pipeName, UInt32 keepalive, DBVersion driverVersion);
    public static Stream GetStream(string server, UInt32 port, string pipename, UInt32 keepalive, DBVersion v, UInt32 timeout);
    public static Stream GetStream(MySqlConnectionStringBuilder settings);
    private static Stream GetTcpStream(MySqlConnectionStringBuilder settings);
    private static Stream GetUnixSocketStream(MySqlConnectionStringBuilder settings);
    private static Stream GetSharedMemoryStream(MySqlConnectionStringBuilder settings);
    private static Stream GetNamedPipeStream(MySqlConnectionStringBuilder settings);
}
internal class MySql.Data.Common.Token : object {
    public TokenType Type;
    public string Text;
    public bool Output;
    public bool IsRealToken { get; }
    public Token(TokenType type, string text);
    public bool get_IsRealToken();
}
internal enum MySql.Data.Common.TokenType : Enum {
    public int value__;
    public static TokenType Keyword;
    public static TokenType String;
    public static TokenType Number;
    public static TokenType Symbol;
    public static TokenType Identifier;
    public static TokenType Comment;
    public static TokenType CommandComment;
    public static TokenType Whitespace;
}
internal class MySql.Data.MySqlClient.Authentication.AuthenticationPluginManager : object {
    private static Dictionary`2<string, PluginInfo> plugins;
    private static AuthenticationPluginManager();
    public static MySqlAuthenticationPlugin GetPlugin(string method);
    private static MySqlAuthenticationPlugin CreatePlugin(string method);
}
public abstract class MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin : object {
    private NativeDriver driver;
    protected Byte[] AuthenticationData;
    protected MySqlConnectionStringBuilder Settings { get; }
    protected Version ServerVersion { get; }
    internal ClientFlags Flags { get; }
    protected Encoding Encoding { get; }
    public string PluginName { get; }
    internal static MySqlAuthenticationPlugin GetPlugin(string method, NativeDriver driver, Byte[] authData);
    protected MySqlConnectionStringBuilder get_Settings();
    protected Version get_ServerVersion();
    internal ClientFlags get_Flags();
    protected Encoding get_Encoding();
    protected virtual void SetAuthData(Byte[] data);
    protected virtual void CheckConstraints();
    protected virtual void AuthenticationFailed(Exception ex);
    protected virtual void AuthenticationSuccessful();
    protected virtual Byte[] MoreData(Byte[] data);
    internal void Authenticate(bool reset);
    private void WritePassword(MySqlPacket packet);
    private MySqlPacket ReadPacket();
    private void HandleAuthChange(MySqlPacket packet);
    private void AuthenticationChange();
    public abstract virtual string get_PluginName();
    public virtual string GetUsername();
    public virtual object GetPassword();
}
public class MySql.Data.MySqlClient.Authentication.MySqlNativePasswordPlugin : MySqlAuthenticationPlugin {
    public string PluginName { get; }
    public virtual string get_PluginName();
    protected virtual void SetAuthData(Byte[] data);
    protected virtual Byte[] MoreData(Byte[] data);
    public virtual object GetPassword();
    private Byte[] Get411Password(string password, Byte[] seedBytes);
}
[SuppressUnmanagedCodeSecurityAttribute]
internal class MySql.Data.MySqlClient.Authentication.MySqlWindowsAuthenticationPlugin : MySqlAuthenticationPlugin {
    private static int SEC_E_OK;
    private static int SEC_I_CONTINUE_NEEDED;
    private static int SEC_I_COMPLETE_NEEDED;
    private static int SEC_I_COMPLETE_AND_CONTINUE;
    private static int SECPKG_CRED_OUTBOUND;
    private static int SECURITY_NETWORK_DREP;
    private static int SECURITY_NATIVE_DREP;
    private static int SECPKG_CRED_INBOUND;
    private static int MAX_TOKEN_SIZE;
    private static int SECPKG_ATTR_SIZES;
    private static int STANDARD_CONTEXT_ATTRIBUTES;
    private SECURITY_HANDLE outboundCredentials;
    private SECURITY_HANDLE clientContext;
    private SECURITY_INTEGER lifetime;
    private bool continueProcessing;
    private string targetName;
    public string PluginName { get; }
    protected virtual void CheckConstraints();
    public virtual string GetUsername();
    public virtual string get_PluginName();
    protected virtual Byte[] MoreData(Byte[] moreData);
    private void InitializeClient(Byte[]& clientBlob, Byte[] serverBlob, Boolean& continueProcessing);
    private string GetTargetName();
    private void AcquireCredentials();
    private static int AcquireCredentialsHandle(string pszPrincipal, string pszPackage, int fCredentialUse, IntPtr PAuthenticationID, IntPtr pAuthData, int pGetKeyFn, IntPtr pvGetKeyArgument, SECURITY_HANDLE& phCredential, SECURITY_INTEGER& ptsExpiry);
    private static int InitializeSecurityContext(SECURITY_HANDLE& phCredential, IntPtr phContext, string pszTargetName, int fContextReq, int Reserved1, int TargetDataRep, IntPtr pInput, int Reserved2, SECURITY_HANDLE& phNewContext, SecBufferDesc& pOutput, UInt32& pfContextAttr, SECURITY_INTEGER& ptsExpiry);
    private static int InitializeSecurityContext(SECURITY_HANDLE& phCredential, SECURITY_HANDLE& phContext, string pszTargetName, int fContextReq, int Reserved1, int TargetDataRep, SecBufferDesc& SecBufferDesc, int Reserved2, SECURITY_HANDLE& phNewContext, SecBufferDesc& pOutput, UInt32& pfContextAttr, SECURITY_INTEGER& ptsExpiry);
    private static int CompleteAuthToken(SECURITY_HANDLE& phContext, SecBufferDesc& pToken);
    public static int QueryContextAttributes(SECURITY_HANDLE& phContext, UInt32 ulAttribute, SecPkgContext_Sizes& pContextAttributes);
    public static int FreeCredentialsHandle(SECURITY_HANDLE& pCred);
    public static int DeleteSecurityContext(SECURITY_HANDLE& pCred);
}
internal class MySql.Data.MySqlClient.Authentication.PluginInfo : ValueType {
    public string Type;
    public Assembly Assembly;
    public PluginInfo(string type);
}
public class MySql.Data.MySqlClient.Authentication.SecBuffer : ValueType {
    public int cbBuffer;
    public int BufferType;
    public IntPtr pvBuffer;
    public SecBuffer(int bufferSize);
    public SecBuffer(Byte[] secBufferBytes);
    public SecBuffer(Byte[] secBufferBytes, SecBufferType bufferType);
    public sealed virtual void Dispose();
}
internal class MySql.Data.MySqlClient.Authentication.SecBufferDesc : ValueType {
    public int ulVersion;
    public int cBuffers;
    public IntPtr pBuffers;
    public SecBufferDesc(int bufferSize);
    public SecBufferDesc(Byte[] secBufferBytes);
    public sealed virtual void Dispose();
    public Byte[] GetSecBufferByteArray();
}
public enum MySql.Data.MySqlClient.Authentication.SecBufferType : Enum {
    public int value__;
    public static SecBufferType SECBUFFER_VERSION;
    public static SecBufferType SECBUFFER_EMPTY;
    public static SecBufferType SECBUFFER_DATA;
    public static SecBufferType SECBUFFER_TOKEN;
}
public class MySql.Data.MySqlClient.Authentication.SecHandle : ValueType {
    private IntPtr dwLower;
    private IntPtr dwUpper;
}
public class MySql.Data.MySqlClient.Authentication.SecPkgContext_Sizes : ValueType {
    public UInt32 cbMaxToken;
    public UInt32 cbMaxSignature;
    public UInt32 cbBlockSize;
    public UInt32 cbSecurityTrailer;
}
public class MySql.Data.MySqlClient.Authentication.SECURITY_HANDLE : ValueType {
    public IntPtr LowPart;
    public IntPtr HighPart;
    public SECURITY_HANDLE(int dummy);
}
public class MySql.Data.MySqlClient.Authentication.SECURITY_INTEGER : ValueType {
    public UInt32 LowPart;
    public int HighPart;
    public SECURITY_INTEGER(int dummy);
}
public class MySql.Data.MySqlClient.Authentication.Sha256AuthenticationPlugin : MySqlAuthenticationPlugin {
    private Byte[] rawPubkey;
    public string PluginName { get; }
    public virtual string get_PluginName();
    protected virtual Byte[] MoreData(Byte[] data);
    public virtual object GetPassword();
}
public class MySql.Data.MySqlClient.AuthenticationPluginConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
}
public abstract class MySql.Data.MySqlClient.BaseCommandInterceptor : object {
    [CompilerGeneratedAttribute]
private MySqlConnection <ActiveConnection>k__BackingField;
    protected MySqlConnection ActiveConnection { get; private set; }
    [CompilerGeneratedAttribute]
protected MySqlConnection get_ActiveConnection();
    [CompilerGeneratedAttribute]
private void set_ActiveConnection(MySqlConnection value);
    public virtual bool ExecuteScalar(string sql, Object& returnValue);
    public virtual bool ExecuteNonQuery(string sql, Int32& returnValue);
    public virtual bool ExecuteReader(string sql, CommandBehavior behavior, MySqlDataReader& returnValue);
    public virtual void Init(MySqlConnection connection);
}
public abstract class MySql.Data.MySqlClient.BaseExceptionInterceptor : object {
    [CompilerGeneratedAttribute]
private MySqlConnection <ActiveConnection>k__BackingField;
    protected MySqlConnection ActiveConnection { get; private set; }
    public abstract virtual Exception InterceptException(Exception exception);
    [CompilerGeneratedAttribute]
protected MySqlConnection get_ActiveConnection();
    [CompilerGeneratedAttribute]
private void set_ActiveConnection(MySqlConnection value);
    public virtual void Init(MySqlConnection connection);
}
public class MySql.Data.MySqlClient.BaseTableCache : object {
    protected int MaxCacheAge;
    private Dictionary`2<string, CacheEntry> cache;
    public BaseTableCache(int maxCacheAge);
    public virtual void AddToCache(string commandText, object resultSet);
    public virtual object RetrieveFromCache(string commandText, int cacheAge);
    public void RemoveFromCache(string commandText);
    public virtual void Dump();
    protected virtual void CleanCache();
}
internal class MySql.Data.MySqlClient.CharacterSet : object {
    public string name;
    public int byteCount;
    public CharacterSet(string name, int byteCount);
}
internal class MySql.Data.MySqlClient.CharSetMap : object {
    private static Dictionary`2<string, string> defaultCollations;
    private static Dictionary`2<string, int> maxLengths;
    private static Dictionary`2<string, CharacterSet> mapping;
    private static object lockObject;
    private static CharSetMap();
    public static CharacterSet GetCharacterSet(DBVersion version, string CharSetName);
    public static Encoding GetEncoding(DBVersion version, string CharSetName);
    private static void InitializeMapping();
    private static void LoadCharsetMap();
    internal static void InitCollections(MySqlConnection connection);
    internal static string GetDefaultCollation(string charset, MySqlConnection connection);
    internal static int GetMaxLength(string charset, MySqlConnection connection);
}
[FlagsAttribute]
internal enum MySql.Data.MySqlClient.ClientFlags : Enum {
    public ulong value__;
    public static ClientFlags LONG_PASSWORD;
    public static ClientFlags FOUND_ROWS;
    public static ClientFlags LONG_FLAG;
    public static ClientFlags CONNECT_WITH_DB;
    public static ClientFlags NO_SCHEMA;
    public static ClientFlags COMPRESS;
    public static ClientFlags ODBC;
    public static ClientFlags LOCAL_FILES;
    public static ClientFlags IGNORE_SPACE;
    public static ClientFlags PROTOCOL_41;
    public static ClientFlags INTERACTIVE;
    public static ClientFlags SSL;
    public static ClientFlags IGNORE_SIGPIPE;
    public static ClientFlags TRANSACTIONS;
    public static ClientFlags RESERVED;
    public static ClientFlags SECURE_CONNECTION;
    public static ClientFlags MULTI_STATEMENTS;
    public static ClientFlags MULTI_RESULTS;
    public static ClientFlags PS_MULTI_RESULTS;
    public static ClientFlags PLUGIN_AUTH;
    public static ClientFlags CONNECT_ATTRS;
    public static ClientFlags CAN_HANDLE_EXPIRED_PASSWORD;
    public static ClientFlags CLIENT_SSL_VERIFY_SERVER_CERT;
    public static ClientFlags CLIENT_REMEMBER_OPTIONS;
}
internal enum MySql.Data.MySqlClient.ColumnFlags : Enum {
    public int value__;
    public static ColumnFlags NOT_NULL;
    public static ColumnFlags PRIMARY_KEY;
    public static ColumnFlags UNIQUE_KEY;
    public static ColumnFlags MULTIPLE_KEY;
    public static ColumnFlags BLOB;
    public static ColumnFlags UNSIGNED;
    public static ColumnFlags ZERO_FILL;
    public static ColumnFlags BINARY;
    public static ColumnFlags ENUM;
    public static ColumnFlags AUTO_INCREMENT;
    public static ColumnFlags TIMESTAMP;
    public static ColumnFlags SET;
    public static ColumnFlags NUMBER;
}
internal class MySql.Data.MySqlClient.CommandInterceptor : Interceptor {
    private bool insideInterceptor;
    private List`1<BaseCommandInterceptor> interceptors;
    public CommandInterceptor(MySqlConnection connection);
    public bool ExecuteScalar(string sql, Object& returnValue);
    public bool ExecuteNonQuery(string sql, Int32& returnValue);
    public bool ExecuteReader(string sql, CommandBehavior behavior, MySqlDataReader& returnValue);
    protected virtual void AddInterceptor(object o);
    protected virtual string ResolveType(string nameOrType);
}
internal class MySql.Data.MySqlClient.CommandTimer : object {
    private bool timeoutSet;
    private MySqlConnection connection;
    public CommandTimer(MySqlConnection connection, int timeout);
    public sealed virtual void Dispose();
}
internal class MySql.Data.MySqlClient.CompressedStream : Stream {
    private Stream baseStream;
    private MemoryStream cache;
    private Byte[] localByte;
    private Byte[] inBuffer;
    private Byte[] lengthBytes;
    private WeakReference inBufferRef;
    private int inPos;
    private int maxInPos;
    private ZInputStream zInStream;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public CompressedStream(Stream baseStream);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Close();
    public virtual void SetLength(long value);
    public virtual int ReadByte();
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    private void PrepareNextPacket();
    private void ReadNextPacket(int len);
    private MemoryStream CompressCache();
    private void CompressAndSendCache();
    public virtual void Flush();
    private bool InputDone();
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
}
internal class MySql.Data.MySqlClient.Crypt : object {
    private static void XorScramble(Byte[] from, int fromIndex, Byte[] to, int toIndex, Byte[] password, int length);
    public static Byte[] Get411Password(string password, string seed);
    private static double rand(Int64& seed1, Int64& seed2, long max);
    public static string EncryptPassword(string password, string seed, bool new_ver);
    private static Int64[] Hash(string P);
}
[RunInstallerAttribute("True")]
public class MySql.Data.MySqlClient.CustomInstaller : Installer {
    public virtual void Install(IDictionary stateSaver);
    private static void AddProviderToMachineConfig();
    internal static void UpdateMachineConfigs(string rootPath, bool add);
    private static XmlElement CreateNodeAssemblyBindingRedirection(XmlElement mysqlNode, XmlDocument doc, string oldVersion, string newVersion);
    private static void AddProviderToMachineConfigInDir(string path);
    private static XmlDocument RemoveOldBindingRedirection(XmlDocument doc);
    public virtual void Uninstall(IDictionary savedState);
    private static void RemoveProviderFromMachineConfig();
    private static void RemoveProviderFromMachineConfigInDir(string path);
}
internal enum MySql.Data.MySqlClient.DBCmd : Enum {
    public byte value__;
    public static DBCmd SLEEP;
    public static DBCmd QUIT;
    public static DBCmd INIT_DB;
    public static DBCmd QUERY;
    public static DBCmd FIELD_LIST;
    public static DBCmd CREATE_DB;
    public static DBCmd DROP_DB;
    public static DBCmd RELOAD;
    public static DBCmd SHUTDOWN;
    public static DBCmd STATISTICS;
    public static DBCmd PROCESS_INFO;
    public static DBCmd CONNECT;
    public static DBCmd PROCESS_KILL;
    public static DBCmd DEBUG;
    public static DBCmd PING;
    public static DBCmd TIME;
    public static DBCmd DELAYED_INSERT;
    public static DBCmd CHANGE_USER;
    public static DBCmd BINLOG_DUMP;
    public static DBCmd TABLE_DUMP;
    public static DBCmd CONNECT_OUT;
    public static DBCmd REGISTER_SLAVE;
    public static DBCmd PREPARE;
    public static DBCmd EXECUTE;
    public static DBCmd LONG_DATA;
    public static DBCmd CLOSE_STMT;
    public static DBCmd RESET_STMT;
    public static DBCmd SET_OPTION;
    public static DBCmd FETCH;
}
internal class MySql.Data.MySqlClient.Driver : object {
    protected Encoding encoding;
    protected MySqlConnectionStringBuilder connectionString;
    protected bool isOpen;
    protected DateTime creationTime;
    protected string serverCharSet;
    protected int serverCharSetIndex;
    protected Dictionary`2<string, string> serverProps;
    protected Dictionary`2<int, string> charSets;
    protected long maxPacketSize;
    internal int timeZoneOffset;
    private DateTime idleSince;
    protected MySqlPromotableTransaction currentTransaction;
    protected bool inActiveUse;
    protected MySqlPool pool;
    private bool firstResult;
    protected IDriver handler;
    internal MySqlDataReader reader;
    private bool disposeInProgress;
    internal bool isFabric;
    [CompilerGeneratedAttribute]
private bool <IsPasswordExpired>k__BackingField;
    public DateTime IdleSince { get; public set; }
    public int ThreadID { get; }
    public DBVersion Version { get; }
    public MySqlConnectionStringBuilder Settings { get; public set; }
    public Encoding Encoding { get; public set; }
    public MySqlPromotableTransaction CurrentTransaction { get; public set; }
    public bool IsInActiveUse { get; public set; }
    public bool IsOpen { get; }
    public MySqlPool Pool { get; public set; }
    public long MaxPacketSize { get; }
    internal int ConnectionCharSetIndex { get; internal set; }
    internal Dictionary`2<int, string> CharacterSets { get; }
    public bool SupportsOutputParameters { get; }
    public bool SupportsBatch { get; }
    public bool SupportsConnectAttrs { get; }
    public bool SupportsPasswordExpiration { get; }
    public bool IsPasswordExpired { get; internal set; }
    public Driver(MySqlConnectionStringBuilder settings);
    public DateTime get_IdleSince();
    public void set_IdleSince(DateTime value);
    protected virtual void Finalize();
    public int get_ThreadID();
    public DBVersion get_Version();
    public MySqlConnectionStringBuilder get_Settings();
    public void set_Settings(MySqlConnectionStringBuilder value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public MySqlPromotableTransaction get_CurrentTransaction();
    public void set_CurrentTransaction(MySqlPromotableTransaction value);
    public bool get_IsInActiveUse();
    public void set_IsInActiveUse(bool value);
    public bool get_IsOpen();
    public MySqlPool get_Pool();
    public void set_Pool(MySqlPool value);
    public long get_MaxPacketSize();
    internal int get_ConnectionCharSetIndex();
    internal void set_ConnectionCharSetIndex(int value);
    internal Dictionary`2<int, string> get_CharacterSets();
    public bool get_SupportsOutputParameters();
    public bool get_SupportsBatch();
    public bool get_SupportsConnectAttrs();
    public bool get_SupportsPasswordExpiration();
    [CompilerGeneratedAttribute]
public bool get_IsPasswordExpired();
    [CompilerGeneratedAttribute]
internal void set_IsPasswordExpired(bool value);
    public string Property(string key);
    public bool ConnectionLifetimeExpired();
    public static Driver Create(MySqlConnectionStringBuilder settings);
    public bool HasStatus(ServerStatusFlags flag);
    public virtual void Open();
    public virtual void Close();
    public virtual void Configure(MySqlConnection connection);
    private Dictionary`2<string, string> LoadServerProperties(MySqlConnection connection);
    private int GetTimeZoneOffset(MySqlConnection con);
    private void LoadCharacterSets(MySqlConnection connection);
    public virtual List`1<MySqlError> ReportWarnings(MySqlConnection connection);
    public virtual void SendQuery(MySqlPacket p);
    public virtual ResultSet NextResult(int statementId, bool force);
    protected virtual int GetResult(int statementId, Int32& affectedRows, Int64& insertedId);
    public virtual bool FetchDataRow(int statementId, int columns);
    public virtual bool SkipDataRow();
    public virtual void ExecuteDirect(string sql);
    public MySqlField[] GetColumns(int count);
    public virtual int PrepareStatement(string sql, MySqlField[]& parameters);
    public IMySqlValue ReadColumnValue(int index, MySqlField field, IMySqlValue value);
    public void SkipColumnValue(IMySqlValue valObject);
    public void ResetTimeout(int timeoutMilliseconds);
    public bool Ping();
    public virtual void SetDatabase(string dbName);
    public virtual void ExecuteStatement(MySqlPacket packetToExecute);
    public virtual void CloseStatement(int id);
    public virtual void Reset();
    public virtual void CloseQuery(MySqlConnection connection, int statementId);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class MySql.Data.MySqlClient.DriverTransactionManager : object {
    private static Hashtable driversInUse;
    private static DriverTransactionManager();
    public static Driver GetDriverInTransaction(Transaction transaction);
    public static void SetDriverInTransaction(Driver driver);
    public static void RemoveDriverInTransaction(Transaction transaction);
}
internal class MySql.Data.MySqlClient.ExceptionInterceptor : Interceptor {
    private List`1<BaseExceptionInterceptor> interceptors;
    public ExceptionInterceptor(MySqlConnection connection);
    protected virtual void AddInterceptor(object o);
    public void Throw(Exception exception);
    protected virtual string ResolveType(string nameOrType);
}
internal enum MySql.Data.MySqlClient.Field_Type : Enum {
    public byte value__;
    public static Field_Type DECIMAL;
    public static Field_Type BYTE;
    public static Field_Type SHORT;
    public static Field_Type LONG;
    public static Field_Type FLOAT;
    public static Field_Type DOUBLE;
    public static Field_Type NULL;
    public static Field_Type TIMESTAMP;
    public static Field_Type LONGLONG;
    public static Field_Type INT24;
    public static Field_Type DATE;
    public static Field_Type TIME;
    public static Field_Type DATETIME;
    public static Field_Type YEAR;
    public static Field_Type NEWDATE;
    public static Field_Type ENUM;
    public static Field_Type SET;
    public static Field_Type TINY_BLOB;
    public static Field_Type MEDIUM_BLOB;
    public static Field_Type LONG_BLOB;
    public static Field_Type BLOB;
    public static Field_Type VAR_STRING;
    public static Field_Type STRING;
}
public class MySql.Data.MySqlClient.GenericConfigurationElementCollection`1 : ConfigurationElementCollection {
    private List`1<T> _elements;
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
}
internal interface MySql.Data.MySqlClient.IDriver {
    public int ThreadId { get; }
    public DBVersion Version { get; }
    public ServerStatusFlags ServerStatus { get; }
    public ClientFlags Flags { get; }
    public int WarningCount { get; }
    public abstract virtual int get_ThreadId();
    public abstract virtual DBVersion get_Version();
    public abstract virtual ServerStatusFlags get_ServerStatus();
    public abstract virtual ClientFlags get_Flags();
    public abstract virtual void Configure();
    public abstract virtual void Open();
    public abstract virtual void SendQuery(MySqlPacket packet);
    public abstract virtual void Close(bool isOpen);
    public abstract virtual bool Ping();
    public abstract virtual int GetResult(Int32& affectedRows, Int64& insertedId);
    public abstract virtual bool FetchDataRow(int statementId, int columns);
    public abstract virtual int PrepareStatement(string sql, MySqlField[]& parameters);
    public abstract virtual void ExecuteStatement(MySqlPacket packet);
    public abstract virtual void CloseStatement(int statementId);
    public abstract virtual void SetDatabase(string dbName);
    public abstract virtual void Reset();
    public abstract virtual IMySqlValue ReadColumnValue(int index, MySqlField field, IMySqlValue valObject);
    public abstract virtual void SkipColumnValue(IMySqlValue valueObject);
    public abstract virtual void GetColumnsData(MySqlField[] columns);
    public abstract virtual void ResetTimeout(int timeout);
    public abstract virtual int get_WarningCount();
}
internal abstract class MySql.Data.MySqlClient.Interceptor : object {
    protected MySqlConnection connection;
    protected void LoadInterceptors(string interceptorList);
    protected abstract virtual void AddInterceptor(object o);
    protected virtual string ResolveType(string nameOrType);
}
public class MySql.Data.MySqlClient.InterceptorConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
}
internal class MySql.Data.MySqlClient.ISSchemaProvider : SchemaProvider {
    public ISSchemaProvider(MySqlConnection connection);
    protected virtual MySqlSchemaCollection GetCollections();
    protected virtual MySqlSchemaCollection GetRestrictions();
    public virtual MySqlSchemaCollection GetDatabases(String[] restrictions);
    public virtual MySqlSchemaCollection GetTables(String[] restrictions);
    public virtual MySqlSchemaCollection GetColumns(String[] restrictions);
    private MySqlSchemaCollection GetViews(String[] restrictions);
    private MySqlSchemaCollection GetViewColumns(String[] restrictions);
    private MySqlSchemaCollection GetTriggers(String[] restrictions);
    public virtual MySqlSchemaCollection GetProcedures(String[] restrictions);
    private MySqlSchemaCollection GetProceduresWithParameters(String[] restrictions);
    private string GetProcedureParameterLine(MySqlSchemaRow isRow);
    private MySqlSchemaCollection GetParametersForRoutineFromIS(String[] restrictions);
    private MySqlSchemaCollection GetParametersFromIS(String[] restrictions, MySqlSchemaCollection routines);
    internal MySqlSchemaCollection CreateParametersTable();
    public virtual MySqlSchemaCollection GetProcedureParameters(String[] restrictions, MySqlSchemaCollection routines);
    protected virtual MySqlSchemaCollection GetSchemaInternal(string collection, String[] restrictions);
    private static string GetWhereClause(string initial_where, String[] keys, String[] values);
    private MySqlSchemaCollection Query(string table_name, string initial_where, String[] keys, String[] values);
    private MySqlSchemaCollection GetTable(string sql);
    public virtual MySqlSchemaCollection GetForeignKeys(String[] restrictions);
    public virtual MySqlSchemaCollection GetForeignKeyColumns(String[] restrictions);
    internal void GetParametersFromShowCreate(MySqlSchemaCollection parametersTable, String[] restrictions, MySqlSchemaCollection routines);
    private void ParseProcedureBody(MySqlSchemaCollection parametersTable, string body, MySqlSchemaRow row, string nameToRestrict);
    private static void InitParameterRow(MySqlSchemaRow procedure, MySqlSchemaRow parameter);
    private string ParseDataType(MySqlSchemaRow row, MySqlTokenizer tokenizer);
    private static string GetDataTypeDefaults(string type, MySqlSchemaRow row);
    private static void ParseDataTypeSize(MySqlSchemaRow row, string size);
}
public class MySql.Data.MySqlClient.Memcached.BinaryClient : Client {
    private Encoding encoding;
    public BinaryClient(string server, UInt32 port);
    public virtual void Add(string key, object data, TimeSpan expiration);
    public virtual void Append(string key, object data);
    public virtual void Cas(string key, object data, TimeSpan expiration, ulong casUnique);
    public virtual void Decrement(string key, int amount);
    public virtual void Delete(string key);
    public virtual void FlushAll(TimeSpan delay);
    public virtual KeyValuePair`2<string, object> Get(string key);
    public virtual void Increment(string key, int amount);
    public virtual void Prepend(string key, object data);
    public virtual void Replace(string key, object data, TimeSpan expiration);
    public virtual void Set(string key, object data, TimeSpan expiration);
    private void SendCommand(byte magic, byte opcode, string key, object data, TimeSpan expiration, bool hasExtra);
    private void SendCommand(byte magic, byte opcode, string key, String& value);
    private void SendCommand(byte magic, byte opcode, string key);
    private void SendCommand(byte magic, byte opcode, TimeSpan expiration);
    private void SendCommand(byte magic, byte opcode, string key, int amount);
    private Byte[] GetResponse();
    private void ValidateResponse(Byte[] res);
    private Byte[] EncodeStoreCommand(byte magic, byte opcode, string key, object data, TimeSpan expiration, bool hasExtra);
    private Byte[] EncodeGetCommand(byte magic, byte opcode, string key);
    private Byte[] EncodeFlushCommand(byte magic, byte opcode, TimeSpan expiration);
    private Byte[] EncodeIncrCommand(byte magic, byte opcode, string key, int amount);
    private void WriteToMemoryStream(Byte[] data, MemoryStream ms);
}
public abstract class MySql.Data.MySqlClient.Memcached.Client : object {
    protected UInt32 port;
    protected string server;
    protected Stream stream;
    protected Client(string server, UInt32 port);
    public static Client GetInstance(string server, UInt32 port, MemcachedFlags flags);
    public virtual void Open();
    public virtual void Close();
    public abstract virtual void Add(string key, object data, TimeSpan expiration);
    public abstract virtual void Append(string key, object data);
    public abstract virtual void Cas(string key, object data, TimeSpan expiration, ulong casUnique);
    public abstract virtual void Decrement(string key, int amount);
    public abstract virtual void Delete(string key);
    public abstract virtual void FlushAll(TimeSpan delay);
    public abstract virtual KeyValuePair`2<string, object> Get(string key);
    public abstract virtual void Increment(string key, int amount);
    public abstract virtual void Prepend(string key, object data);
    public abstract virtual void Replace(string key, object data, TimeSpan expiration);
    public abstract virtual void Set(string key, object data, TimeSpan expiration);
}
public class MySql.Data.MySqlClient.Memcached.MemcachedException : Exception {
    public MemcachedException(string msg);
    public MemcachedException(string msg, Exception e);
}
[FlagsAttribute]
public enum MySql.Data.MySqlClient.Memcached.MemcachedFlags : Enum {
    public ushort value__;
    public static MemcachedFlags TextProtocol;
    public static MemcachedFlags BinaryProtocol;
    public static MemcachedFlags Tcp;
}
public class MySql.Data.MySqlClient.Memcached.TextClient : Client {
    private Encoding encoding;
    private static string PROTOCOL_ADD;
    private static string PROTOCOL_APPEND;
    private static string PROTOCOL_CAS;
    private static string PROTOCOL_DECREMENT;
    private static string PROTOCOL_DELETE;
    private static string PROTOCOL_FLUSHALL;
    private static string PROTOCOL_GET;
    private static string PROTOCOL_GETS;
    private static string PROTOCOL_INCREMENT;
    private static string PROTOCOL_PREPEND;
    private static string PROTOCOL_REPLACE;
    private static string PROTOCOL_SET;
    private static string VALUE;
    private static string END;
    private static string ERR_ERROR;
    private static string ERR_CLIENT_ERROR;
    private static string ERR_SERVER_ERROR;
    protected internal TextClient(string server, UInt32 port);
    private static TextClient();
    public virtual void Add(string key, object data, TimeSpan expiration);
    public virtual void Append(string key, object data);
    public virtual void Cas(string key, object data, TimeSpan expiration, ulong casUnique);
    public virtual void Decrement(string key, int amount);
    public virtual void Delete(string key);
    public virtual void FlushAll(TimeSpan delay);
    public virtual KeyValuePair`2<string, object> Get(string key);
    private KeyValuePair`2[] Gets(String[] keys);
    public virtual void Increment(string key, int amount);
    public virtual void Prepend(string key, object data);
    public virtual void Replace(string key, object data, TimeSpan expiration);
    public virtual void Set(string key, object data, TimeSpan expiration);
    private void SendCommand(string cmd, string key, object data, TimeSpan expiration, ulong casUnique);
    private void SendCommand(string cmd, string key, object data, TimeSpan expiration);
    private void SendCommand(string cmd, string key, object data);
    private void SendCommand(string cmd, string key);
    private void SendCommand(string cmd, string key, int amount);
    private void SendCommand(string cmd, TimeSpan expiration);
    private void ValidateErrorResponse(Byte[] res);
    private void SendData(string sData);
    private KeyValuePair`2[] ParseGetResponse(Byte[] input);
    private Byte[] GetResponse();
}
public class MySql.Data.MySqlClient.MySqlBulkLoader : object {
    private static string defaultFieldTerminator;
    private static string defaultLineTerminator;
    private static char defaultEscapeCharacter;
    private string fieldTerminator;
    private string lineTerminator;
    private string charSet;
    private string tableName;
    private int numLinesToIgnore;
    private MySqlConnection connection;
    private string filename;
    private int timeout;
    private bool local;
    private string linePrefix;
    private char fieldQuotationCharacter;
    private bool fieldQuotationOptional;
    private char escapeChar;
    private MySqlBulkLoaderPriority priority;
    private MySqlBulkLoaderConflictOption conflictOption;
    private List`1<string> columns;
    private List`1<string> expressions;
    public MySqlConnection Connection { get; public set; }
    public string FieldTerminator { get; public set; }
    public string LineTerminator { get; public set; }
    public string TableName { get; public set; }
    public string CharacterSet { get; public set; }
    public string FileName { get; public set; }
    public int Timeout { get; public set; }
    public bool Local { get; public set; }
    public int NumberOfLinesToSkip { get; public set; }
    public string LinePrefix { get; public set; }
    public char FieldQuotationCharacter { get; public set; }
    public bool FieldQuotationOptional { get; public set; }
    public char EscapeCharacter { get; public set; }
    public MySqlBulkLoaderConflictOption ConflictOption { get; public set; }
    public MySqlBulkLoaderPriority Priority { get; public set; }
    public List`1<string> Columns { get; }
    public List`1<string> Expressions { get; }
    public MySqlBulkLoader(MySqlConnection connection);
    public MySqlConnection get_Connection();
    public void set_Connection(MySqlConnection value);
    public string get_FieldTerminator();
    public void set_FieldTerminator(string value);
    public string get_LineTerminator();
    public void set_LineTerminator(string value);
    public string get_TableName();
    public void set_TableName(string value);
    public string get_CharacterSet();
    public void set_CharacterSet(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public bool get_Local();
    public void set_Local(bool value);
    public int get_NumberOfLinesToSkip();
    public void set_NumberOfLinesToSkip(int value);
    public string get_LinePrefix();
    public void set_LinePrefix(string value);
    public char get_FieldQuotationCharacter();
    public void set_FieldQuotationCharacter(char value);
    public bool get_FieldQuotationOptional();
    public void set_FieldQuotationOptional(bool value);
    public char get_EscapeCharacter();
    public void set_EscapeCharacter(char value);
    public MySqlBulkLoaderConflictOption get_ConflictOption();
    public void set_ConflictOption(MySqlBulkLoaderConflictOption value);
    public MySqlBulkLoaderPriority get_Priority();
    public void set_Priority(MySqlBulkLoaderPriority value);
    public List`1<string> get_Columns();
    public List`1<string> get_Expressions();
    public int Load();
    private string BuildSqlCommand();
}
public enum MySql.Data.MySqlClient.MySqlBulkLoaderConflictOption : Enum {
    public int value__;
    public static MySqlBulkLoaderConflictOption None;
    public static MySqlBulkLoaderConflictOption Replace;
    public static MySqlBulkLoaderConflictOption Ignore;
}
public enum MySql.Data.MySqlClient.MySqlBulkLoaderPriority : Enum {
    public int value__;
    public static MySqlBulkLoaderPriority None;
    public static MySqlBulkLoaderPriority Low;
    public static MySqlBulkLoaderPriority Concurrent;
}
public enum MySql.Data.MySqlClient.MySqlCertificateStoreLocation : Enum {
    public int value__;
    public static MySqlCertificateStoreLocation None;
    public static MySqlCertificateStoreLocation CurrentUser;
    public static MySqlCertificateStoreLocation LocalMachine;
}
public class MySql.Data.MySqlClient.MySqlClientFactory : DbProviderFactory {
    public static MySqlClientFactory Instance;
    private Type dbServicesType;
    private FieldInfo mySqlDbProviderServicesInstance;
    public bool CanCreateDataSourceEnumerator { get; }
    private Type DbServicesType { get; }
    private FieldInfo MySqlDbProviderServicesInstance { get; }
    private static MySqlClientFactory();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual bool get_CanCreateDataSourceEnumerator();
    private Type get_DbServicesType();
    private FieldInfo get_MySqlDbProviderServicesInstance();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
public class MySql.Data.MySqlClient.MySqlClientPermission : DBDataPermission {
    public MySqlClientPermission(PermissionState permissionState);
    private MySqlClientPermission(MySqlClientPermission permission);
    internal MySqlClientPermission(MySqlClientPermissionAttribute permissionAttribute);
    internal MySqlClientPermission(DBDataPermission permission);
    internal MySqlClientPermission(string connectionString);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class MySql.Data.MySqlClient.MySqlClientPermissionAttribute : DBDataPermissionAttribute {
    public MySqlClientPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
[DesignerCategoryAttribute("Code")]
[ToolboxBitmapAttribute("MySql.Data.MySqlClient.MySqlCommand", "MySqlClient.resources.command.bmp")]
public class MySql.Data.MySqlClient.MySqlCommand : DbCommand {
    private MySqlConnection connection;
    private MySqlTransaction curTransaction;
    private string cmdText;
    private CommandType cmdType;
    private long updatedRowCount;
    private MySqlParameterCollection parameters;
    private IAsyncResult asyncResult;
    internal long lastInsertedId;
    private PreparableStatement statement;
    private int commandTimeout;
    private bool canceled;
    private bool resetSqlSelect;
    private List`1<MySqlCommand> batch;
    private string batchableCommandText;
    private CommandTimer commandTimer;
    private bool useDefaultTimeout;
    private bool shouldCache;
    private int cacheAge;
    private bool internallyCreated;
    internal AsyncDelegate caller;
    internal Exception thrownException;
    [CompilerGeneratedAttribute]
private UpdateRowSource <UpdatedRowSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeVisible>k__BackingField;
    [BrowsableAttribute("False")]
public long LastInsertedId { get; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("Command text to execute")]
[EditorAttribute("MySql.Data.Common.Design.SqlCommandTextEditor,MySqlClient.Design", "System.Drawing.Design.UITypeEditor")]
public string CommandText { get; public set; }
    [DescriptionAttribute("Time to wait for command to execute")]
[DefaultValueAttribute("30")]
[CategoryAttribute("Misc")]
public int CommandTimeout { get; public set; }
    [CategoryAttribute("Data")]
public CommandType CommandType { get; public set; }
    [BrowsableAttribute("False")]
public bool IsPrepared { get; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Connection used by the command")]
public MySqlConnection Connection { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The parameters collection")]
[CategoryAttribute("Data")]
public MySqlParameterCollection Parameters { get; }
    [BrowsableAttribute("False")]
public MySqlTransaction Transaction { get; public set; }
    public bool EnableCaching { get; public set; }
    public int CacheAge { get; public set; }
    internal List`1<MySqlCommand> Batch { get; }
    internal bool Canceled { get; }
    internal string BatchableCommandText { get; }
    internal bool InternallyCreated { get; internal set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    [BrowsableAttribute("False")]
public bool DesignTimeVisible { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    public MySqlCommand(string cmdText);
    public MySqlCommand(string cmdText, MySqlConnection connection);
    public MySqlCommand(string cmdText, MySqlConnection connection, MySqlTransaction transaction);
    protected virtual void Finalize();
    public long get_LastInsertedId();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public bool get_IsPrepared();
    public MySqlConnection get_Connection();
    public void set_Connection(MySqlConnection value);
    public MySqlParameterCollection get_Parameters();
    public MySqlTransaction get_Transaction();
    public void set_Transaction(MySqlTransaction value);
    public bool get_EnableCaching();
    public void set_EnableCaching(bool value);
    public int get_CacheAge();
    public void set_CacheAge(int value);
    internal List`1<MySqlCommand> get_Batch();
    internal bool get_Canceled();
    internal string get_BatchableCommandText();
    internal bool get_InternallyCreated();
    internal void set_InternallyCreated(bool value);
    public virtual void Cancel();
    public MySqlParameter CreateParameter();
    private void CheckState();
    public virtual int ExecuteNonQuery();
    internal void ClearCommandTimer();
    internal void Close(MySqlDataReader reader);
    private void ResetReader();
    internal void ResetSqlSelectLimit();
    public MySqlDataReader ExecuteReader();
    public MySqlDataReader ExecuteReader(CommandBehavior behavior);
    private void EnsureCommandIsReadOnly(string sql);
    private bool IsReadOnlyCommand(string sql);
    public virtual object ExecuteScalar();
    private void HandleCommandBehaviors(CommandBehavior behavior);
    private void Prepare(int cursorPageSize);
    public virtual void Prepare();
    internal object AsyncExecuteWrapper(int type, CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader();
    public IAsyncResult BeginExecuteReader(CommandBehavior behavior);
    public MySqlDataReader EndExecuteReader(IAsyncResult result);
    public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginExecuteNonQuery();
    public int EndExecuteNonQuery(IAsyncResult asyncResult);
    internal long EstimatedSize();
    private bool AddCallStatement(string query);
    public MySqlCommand Clone();
    private sealed virtual override object System.ICloneable.Clone();
    internal void AddToBatch(MySqlCommand command);
    internal string GetCommandTextForBatching();
    private void Throw(Exception ex);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void Constructor();
    private void PartialClone(MySqlCommand clone);
    [CompilerGeneratedAttribute]
public virtual UpdateRowSource get_UpdatedRowSource();
    [CompilerGeneratedAttribute]
public virtual void set_UpdatedRowSource(UpdateRowSource value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeVisible();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeVisible(bool value);
    protected virtual DbParameter CreateDbParameter();
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
}
[ToolboxItemAttribute("False")]
[DesignerCategoryAttribute("Code")]
public class MySql.Data.MySqlClient.MySqlCommandBuilder : DbCommandBuilder {
    public MySqlDataAdapter DataAdapter { get; public set; }
    public MySqlCommandBuilder(MySqlDataAdapter adapter);
    public MySqlDataAdapter get_DataAdapter();
    public void set_DataAdapter(MySqlDataAdapter value);
    public static void DeriveParameters(MySqlCommand command);
    private static List`1<string> GetPossibleValues(MySqlSchemaRow row);
    private static ParameterDirection GetDirection(MySqlSchemaRow row);
    public MySqlCommand GetDeleteCommand();
    public MySqlCommand GetUpdateCommand();
    public MySqlCommand GetInsertCommand();
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    protected virtual DataTable GetSchemaTable(DbCommand sourceCommand);
    protected virtual string GetParameterName(string parameterName);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    private void RowUpdating(object sender, MySqlRowUpdatingEventArgs args);
}
public class MySql.Data.MySqlClient.MySqlConfiguration : ConfigurationSection {
    private static MySqlConfiguration settings;
    public static MySqlConfiguration Settings { get; }
    [ConfigurationCollectionAttribute("MySql.Data.MySqlClient.InterceptorConfigurationElement")]
[ConfigurationPropertyAttribute("ExceptionInterceptors")]
public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> ExceptionInterceptors { get; }
    [ConfigurationPropertyAttribute("CommandInterceptors")]
[ConfigurationCollectionAttribute("MySql.Data.MySqlClient.InterceptorConfigurationElement")]
public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> CommandInterceptors { get; }
    [ConfigurationCollectionAttribute("MySql.Data.MySqlClient.AuthenticationPluginConfigurationElement")]
[ConfigurationPropertyAttribute("AuthenticationPlugins")]
public GenericConfigurationElementCollection`1<AuthenticationPluginConfigurationElement> AuthenticationPlugins { get; }
    [ConfigurationPropertyAttribute("Replication")]
public ReplicationConfigurationElement Replication { get; public set; }
    private static MySqlConfiguration();
    public static MySqlConfiguration get_Settings();
    public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> get_ExceptionInterceptors();
    public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> get_CommandInterceptors();
    public GenericConfigurationElementCollection`1<AuthenticationPluginConfigurationElement> get_AuthenticationPlugins();
    public ReplicationConfigurationElement get_Replication();
    public void set_Replication(ReplicationConfigurationElement value);
}
internal class MySql.Data.MySqlClient.MySqlConnectAttrs : object {
    [DisplayNameAttribute("_client_name")]
public string ClientName { get; }
    [DisplayNameAttribute("_pid")]
public string PID { get; }
    [DisplayNameAttribute("_client_version")]
public string ClientVersion { get; }
    [DisplayNameAttribute("_platform")]
public string Platform { get; }
    [DisplayNameAttribute("program_name")]
public string ProgramName { get; }
    [DisplayNameAttribute("_os")]
public string OS { get; }
    [DisplayNameAttribute("_os_details")]
public string OSDetails { get; }
    [DisplayNameAttribute("_thread")]
public string Thread { get; }
    public string get_ClientName();
    public string get_PID();
    public string get_ClientVersion();
    public string get_Platform();
    public string get_ProgramName();
    public string get_OS();
    public string get_OSDetails();
    public string get_Thread();
    private bool Is64BitOS();
}
[ToolboxBitmapAttribute("MySql.Data.MySqlClient.MySqlConnection", "MySqlClient.resources.connection.bmp")]
[DesignerCategoryAttribute("Code")]
[ToolboxItemAttribute("True")]
public class MySql.Data.MySqlClient.MySqlConnection : DbConnection {
    internal ConnectionState connectionState;
    internal Driver driver;
    internal bool hasBeenOpen;
    private SchemaProvider schemaProvider;
    private ProcedureCache procedureCache;
    private bool isInUse;
    private PerformanceMonitor perfMonitor;
    private ExceptionInterceptor exceptionInterceptor;
    internal CommandInterceptor commandInterceptor;
    private bool isKillQueryConnection;
    private string database;
    private int commandTimeout;
    private MySqlInfoMessageEventHandler InfoMessage;
    private static Cache`2<string, MySqlConnectionStringBuilder> connectionStringCache;
    [CompilerGeneratedAttribute]
private MySqlConnectionStringBuilder <Settings>k__BackingField;
    internal PerformanceMonitor PerfMonitor { get; }
    internal ProcedureCache ProcedureCache { get; }
    internal MySqlConnectionStringBuilder Settings { get; private set; }
    internal MySqlDataReader Reader { get; internal set; }
    internal bool SoftClosed { get; }
    internal bool IsInUse { get; internal set; }
    [BrowsableAttribute("False")]
public int ServerThread { get; }
    [BrowsableAttribute("True")]
public string DataSource { get; }
    [BrowsableAttribute("True")]
public int ConnectionTimeout { get; }
    [BrowsableAttribute("True")]
public string Database { get; }
    [BrowsableAttribute("False")]
public bool UseCompression { get; }
    [BrowsableAttribute("False")]
public ConnectionState State { get; }
    [BrowsableAttribute("False")]
public string ServerVersion { get; }
    [EditorAttribute("MySql.Data.MySqlClient.Design.ConnectionStringTypeEditor,MySqlClient.Design", "System.Drawing.Design.UITypeEditor")]
[CategoryAttribute("Data")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Information used to connect to a DataSource, such as 'Server=xxx;UserId=yyy;Password=zzz;Database=dbdb'.")]
public string ConnectionString { get; public set; }
    protected DbProviderFactory DbProviderFactory { get; }
    public bool IsPasswordExpired { get; }
    public MySqlConnection(string connectionString);
    private static MySqlConnection();
    public void add_InfoMessage(MySqlInfoMessageEventHandler value);
    public void remove_InfoMessage(MySqlInfoMessageEventHandler value);
    protected virtual void Finalize();
    internal PerformanceMonitor get_PerfMonitor();
    internal ProcedureCache get_ProcedureCache();
    [CompilerGeneratedAttribute]
internal MySqlConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(MySqlConnectionStringBuilder value);
    internal MySqlDataReader get_Reader();
    internal void set_Reader(MySqlDataReader value);
    internal void OnInfoMessage(MySqlInfoMessageEventArgs args);
    internal bool get_SoftClosed();
    internal bool get_IsInUse();
    internal void set_IsInUse(bool value);
    public int get_ServerThread();
    public virtual string get_DataSource();
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public bool get_UseCompression();
    public virtual ConnectionState get_State();
    public virtual string get_ServerVersion();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    protected virtual DbProviderFactory get_DbProviderFactory();
    public bool get_IsPasswordExpired();
    public virtual void EnlistTransaction(Transaction transaction);
    public MySqlTransaction BeginTransaction();
    public MySqlTransaction BeginTransaction(IsolationLevel iso);
    public virtual void ChangeDatabase(string databaseName);
    internal void SetState(ConnectionState newConnectionState, bool broadcast);
    public bool Ping();
    public virtual void Open();
    public MySqlCommand CreateCommand();
    public sealed virtual object Clone();
    internal void Abort();
    internal void CloseFully();
    public virtual void Close();
    internal string CurrentDatabase();
    internal void HandleTimeoutOrThreadAbort(Exception ex);
    public void CancelQuery(int timeout);
    internal bool SetCommandTimeout(int value);
    internal void ClearCommandTimeout();
    public MySqlSchemaCollection GetSchemaCollection(string collectionName, String[] restrictionValues);
    public static void ClearPool(MySqlConnection connection);
    public static void ClearAllPools();
    internal void Throw(Exception ex);
    public sealed virtual void Dispose();
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    protected virtual DbCommand CreateDbCommand();
    private void AssertPermissions();
    protected virtual void Dispose(bool disposing);
}
public enum MySql.Data.MySqlClient.MySqlConnectionProtocol : Enum {
    public int value__;
    public static MySqlConnectionProtocol Sockets;
    public static MySqlConnectionProtocol Socket;
    public static MySqlConnectionProtocol Tcp;
    public static MySqlConnectionProtocol Pipe;
    public static MySqlConnectionProtocol NamedPipe;
    public static MySqlConnectionProtocol UnixSocket;
    public static MySqlConnectionProtocol Unix;
    public static MySqlConnectionProtocol SharedMemory;
    public static MySqlConnectionProtocol Memory;
}
[DefaultMemberAttribute("Item")]
public class MySql.Data.MySqlClient.MySqlConnectionStringBuilder : DbConnectionStringBuilder {
    internal Dictionary`2<string, object> values;
    private static MySqlConnectionStringOptionCollection options;
    [CompilerGeneratedAttribute]
private string <FabricGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShardingTable>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ShardingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FabricServerMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FabricScope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasProcAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private static SetterDelegate CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static GetterDelegate CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static SetterDelegate CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static GetterDelegate CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static SetterDelegate CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static GetterDelegate CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static SetterDelegate CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static GetterDelegate CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static SetterDelegate CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static GetterDelegate CS$<>9__CachedAnonymousMethodDelegate13;
    [RefreshPropertiesAttribute("1")]
[CategoryAttribute("Connection")]
[DescriptionAttribute("Server to connect to")]
public string Server { get; public set; }
    [DescriptionAttribute("Database to use initially")]
[CategoryAttribute("Connection")]
[RefreshPropertiesAttribute("1")]
public string Database { get; public set; }
    [RefreshPropertiesAttribute("1")]
[CategoryAttribute("Connection")]
[DisplayNameAttribute("Connection Protocol")]
[DescriptionAttribute("Protocol to use for connection to MySQL")]
public MySqlConnectionProtocol ConnectionProtocol { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Pipe Name")]
[DescriptionAttribute("Name of pipe to use when connecting with named pipes (Win32 only)")]
[CategoryAttribute("Connection")]
public string PipeName { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Use Compression")]
[RefreshPropertiesAttribute("1")]
[DescriptionAttribute("Should the connection use compression")]
public bool UseCompression { get; public set; }
    [DescriptionAttribute("Allows execution of multiple SQL commands in a single statement")]
[CategoryAttribute("Connection")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Allow Batch")]
public bool AllowBatch { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DescriptionAttribute("Enables output of diagnostic messages")]
[CategoryAttribute("Connection")]
public bool Logging { get; public set; }
    [DisplayNameAttribute("Shared Memory Name")]
[DescriptionAttribute("Name of the shared memory object to use")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Connection")]
public string SharedMemoryName { get; public set; }
    [DescriptionAttribute("Allows the use of old style @ syntax for parameters")]
[CategoryAttribute("Connection")]
[DisplayNameAttribute("Use Old Syntax")]
[ObsoleteAttribute("Use Old Syntax is no longer needed.  See documentation")]
[RefreshPropertiesAttribute("1")]
public bool UseOldSyntax { get; public set; }
    [RefreshPropertiesAttribute("1")]
[CategoryAttribute("Connection")]
[DescriptionAttribute("Port to use for TCP/IP connections")]
public UInt32 Port { get; public set; }
    [CategoryAttribute("Connection")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Connect Timeout")]
[DescriptionAttribute("The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.")]
public UInt32 ConnectionTimeout { get; public set; }
    [DisplayNameAttribute("Default Command Timeout")]
[RefreshPropertiesAttribute("1")]
[DescriptionAttribute("The default timeout that MySqlCommand objects will use
                     unless changed.")]
[CategoryAttribute("Connection")]
public UInt32 DefaultCommandTimeout { get; public set; }
    [CategoryAttribute("Security")]
[DisplayNameAttribute("User Id")]
[DescriptionAttribute("Indicates the user ID to be used when connecting to the data source.")]
[RefreshPropertiesAttribute("1")]
public string UserID { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DescriptionAttribute("Indicates the password to be used when connecting to the data source.")]
[PasswordPropertyTextAttribute("True")]
[CategoryAttribute("Security")]
public string Password { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Persist Security Info")]
[CategoryAttribute("Security")]
[DescriptionAttribute("When false, security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.")]
public bool PersistSecurityInfo { get; public set; }
    [DescriptionAttribute("Should the connection use SSL.")]
[CategoryAttribute("Authentication")]
[ObsoleteAttribute("Use Ssl Mode instead.")]
internal bool Encrypt { get; internal set; }
    [CategoryAttribute("Authentication")]
[DescriptionAttribute("Certificate file in PKCS#12 format (.pfx)")]
[DisplayNameAttribute("Certificate File")]
public string CertificateFile { get; public set; }
    [DescriptionAttribute("Password for certificate file")]
[DisplayNameAttribute("Certificate Password")]
[CategoryAttribute("Authentication")]
public string CertificatePassword { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Certificate Store Location")]
[DescriptionAttribute("Certificate Store Location for client certificates")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MySqlCertificateStoreLocation CertificateStoreLocation { get; public set; }
    [CategoryAttribute("Authentication")]
[DescriptionAttribute("Certificate thumbprint. Can be used together with Certificate Store Location parameter to uniquely identify certificate to be used for SSL authentication.")]
[DisplayNameAttribute("Certificate Thumbprint")]
public string CertificateThumbprint { get; public set; }
    [DescriptionAttribute("Use windows authentication when connecting to server")]
[CategoryAttribute("Authentication")]
[DisplayNameAttribute("Integrated Security")]
[DefaultValueAttribute("False")]
public bool IntegratedSecurity { get; public set; }
    [CategoryAttribute("Advanced")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Allow Zero Datetime")]
[DescriptionAttribute("Should zero datetimes be supported")]
[DefaultValueAttribute("False")]
public bool AllowZeroDateTime { get; public set; }
    [DescriptionAttribute("Should illegal datetime values be converted to DateTime.MinValue")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Convert Zero Datetime")]
[DefaultValueAttribute("False")]
public bool ConvertZeroDateTime { get; public set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Use Usage Advisor")]
[DescriptionAttribute("Logs inefficient database operations")]
public bool UseUsageAdvisor { get; public set; }
    [CategoryAttribute("Advanced")]
[DefaultValueAttribute("25")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Procedure Cache Size")]
[DescriptionAttribute("Indicates how many stored procedures can be cached at one time. A value of 0 effectively disables the procedure cache.")]
public UInt32 ProcedureCacheSize { get; public set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Use Performance Monitor")]
[DescriptionAttribute("Indicates that performance counters should be updated during execution.")]
public bool UsePerformanceMonitor { get; public set; }
    [CategoryAttribute("Advanced")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("True")]
[DisplayNameAttribute("Ignore Prepare")]
[DescriptionAttribute("Instructs the provider to ignore any attempts to prepare a command.")]
public bool IgnorePrepare { get; public set; }
    [ObsoleteAttribute("Use CheckParameters instead")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Use Procedure Bodies")]
[DescriptionAttribute("Indicates if stored procedure bodies will be available for parameter detection.")]
[DefaultValueAttribute("True")]
public bool UseProcedureBodies { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Auto Enlist")]
[DescriptionAttribute("Should the connetion automatically enlist in the active connection, if there are any.")]
public bool AutoEnlist { get; public set; }
    [DisplayNameAttribute("Respect Binary Flags")]
[RefreshPropertiesAttribute("1")]
[DescriptionAttribute("Should binary flags on column metadata be respected.")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Advanced")]
public bool RespectBinaryFlags { get; public set; }
    [CategoryAttribute("Advanced")]
[DefaultValueAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Treat Tiny As Boolean")]
[DescriptionAttribute("Should the provider treat TINYINT(1) columns as boolean.")]
public bool TreatTinyAsBoolean { get; public set; }
    [RefreshPropertiesAttribute("1")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Allow User Variables")]
[DescriptionAttribute("Should the provider expect user variables to appear in the SQL.")]
[DefaultValueAttribute("False")]
public bool AllowUserVariables { get; public set; }
    [DescriptionAttribute("Should this session be considered interactive?")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Interactive Session")]
public bool InteractiveSession { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Should all server functions be treated as returning string?")]
[DefaultValueAttribute("False")]
[DisplayNameAttribute("Functions Return String")]
public bool FunctionsReturnString { get; public set; }
    [DescriptionAttribute("Should the returned affected row count reflect affected rows instead of found rows?")]
[DisplayNameAttribute("Use Affected Rows")]
[CategoryAttribute("Advanced")]
[DefaultValueAttribute("False")]
public bool UseAffectedRows { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Old Guids")]
[DescriptionAttribute("Treat binary(16) columns as guids")]
[DefaultValueAttribute("False")]
public bool OldGuids { get; public set; }
    [DisplayNameAttribute("Keep Alive")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("For TCP connections, idle connection time measured in seconds, before the first keepalive packet is sent.A value of 0 indicates that keepalive is not used.")]
public UInt32 Keepalive { get; public set; }
    [DisplayNameAttribute("Sql Server Mode")]
[DescriptionAttribute("Allow Sql Server syntax.  A value of yes allows symbols to be enclosed with [] instead of ``.  This does incur a performance hit so only use when necessary.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Advanced")]
public bool SqlServerMode { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Enables or disables caching of TableDirect command.  
            A value of yes enables the cache while no disables it.")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Table Cache")]
public bool TableCaching { get; public set; }
    [DefaultValueAttribute("60")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Default Table Cache Age")]
[DescriptionAttribute("Specifies how long a TableDirect result should be cached in seconds.")]
public int DefaultTableCacheAge { get; public set; }
    [CategoryAttribute("Advanced")]
[DefaultValueAttribute("True")]
[DisplayNameAttribute("Check Parameters")]
[DescriptionAttribute("Indicates if stored routine parameters should be checked against the server.")]
public bool CheckParameters { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Indicates if this connection is to use replicated servers.")]
[DisplayNameAttribute("Replication")]
[DefaultValueAttribute("False")]
public bool Replication { get; public set; }
    [DescriptionAttribute("The list of interceptors that can triage thrown MySqlExceptions.")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Exception Interceptors")]
public string ExceptionInterceptors { get; public set; }
    [DescriptionAttribute("The list of interceptors that can intercept command operations.")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Command Interceptors")]
public string CommandInterceptors { get; public set; }
    [DefaultValueAttribute("False")]
[DisplayNameAttribute("Include Security Asserts")]
[DescriptionAttribute("Include security asserts to support Medium Trust")]
[CategoryAttribute("Advanced")]
public bool IncludeSecurityAsserts { get; public set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("Connection Lifetime")]
[DescriptionAttribute("The minimum amount of time (in seconds) for this connection to live in the pool before being destroyed.")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
public UInt32 ConnectionLifeTime { get; public set; }
    [CategoryAttribute("Pooling")]
[RefreshPropertiesAttribute("1")]
[DescriptionAttribute("When true, the connection object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool.")]
[DefaultValueAttribute("True")]
public bool Pooling { get; public set; }
    [DescriptionAttribute("The minimum number of connections allowed in the pool.")]
[CategoryAttribute("Pooling")]
[DisplayNameAttribute("Minimum Pool Size")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("0")]
public UInt32 MinimumPoolSize { get; public set; }
    [RefreshPropertiesAttribute("1")]
[CategoryAttribute("Pooling")]
[DisplayNameAttribute("Maximum Pool Size")]
[DescriptionAttribute("The maximum number of connections allowed in the pool.")]
[DefaultValueAttribute("100")]
public UInt32 MaximumPoolSize { get; public set; }
    [DescriptionAttribute("When true, indicates the connection state is reset when removed from the pool.")]
[CategoryAttribute("Pooling")]
[DisplayNameAttribute("Connection Reset")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
public bool ConnectionReset { get; public set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("Cache Server Properties")]
[DescriptionAttribute("When true, server properties will be cached after the first server in the pool is created")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
public bool CacheServerProperties { get; public set; }
    [DescriptionAttribute("Character set this connection should use")]
[DisplayNameAttribute("Character Set")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Advanced")]
public string CharacterSet { get; public set; }
    [DescriptionAttribute("Should binary blobs be treated as UTF8")]
[CategoryAttribute("Advanced")]
[DisplayNameAttribute("Treat Blobs As UTF8")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
public bool TreatBlobsAsUTF8 { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Pattern that matches columns that should be treated as UTF8")]
[RefreshPropertiesAttribute("1")]
public string BlobAsUTF8IncludePattern { get; public set; }
    [RefreshPropertiesAttribute("1")]
[CategoryAttribute("Advanced")]
[DescriptionAttribute("Pattern that matches columns that should not be treated as UTF8")]
public string BlobAsUTF8ExcludePattern { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("SSL properties for connection")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DisplayNameAttribute("Ssl Mode")]
public MySqlSslMode SslMode { get; public set; }
    [DisplayNameAttribute("Use Default Command Timeout For EF")]
[DescriptionAttribute("Enforces the command timeout of EFMySqlCommand to the value provided in 'DefaultCommandTimeout' property")]
[CategoryAttribute("Backwards Compatibility")]
[DefaultValueAttribute("False")]
public bool UseDefaultCommandTimeoutForEF { get; public set; }
    public string FabricGroup { get; internal set; }
    public string ShardingTable { get; internal set; }
    public object ShardingKey { get; internal set; }
    public Nullable`1<int> FabricServerMode { get; internal set; }
    public Nullable`1<int> FabricScope { get; internal set; }
    internal bool HasProcAccess { get; internal set; }
    public object Item { get; public set; }
    private static MySqlConnectionStringBuilder();
    public MySqlConnectionStringBuilder(string connStr);
    public string get_Server();
    public void set_Server(string value);
    public string get_Database();
    public void set_Database(string value);
    public MySqlConnectionProtocol get_ConnectionProtocol();
    public void set_ConnectionProtocol(MySqlConnectionProtocol value);
    public string get_PipeName();
    public void set_PipeName(string value);
    public bool get_UseCompression();
    public void set_UseCompression(bool value);
    public bool get_AllowBatch();
    public void set_AllowBatch(bool value);
    public bool get_Logging();
    public void set_Logging(bool value);
    public string get_SharedMemoryName();
    public void set_SharedMemoryName(string value);
    public bool get_UseOldSyntax();
    public void set_UseOldSyntax(bool value);
    public UInt32 get_Port();
    public void set_Port(UInt32 value);
    public UInt32 get_ConnectionTimeout();
    public void set_ConnectionTimeout(UInt32 value);
    public UInt32 get_DefaultCommandTimeout();
    public void set_DefaultCommandTimeout(UInt32 value);
    public string get_UserID();
    public void set_UserID(string value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    internal bool get_Encrypt();
    internal void set_Encrypt(bool value);
    public string get_CertificateFile();
    public void set_CertificateFile(string value);
    public string get_CertificatePassword();
    public void set_CertificatePassword(string value);
    public MySqlCertificateStoreLocation get_CertificateStoreLocation();
    public void set_CertificateStoreLocation(MySqlCertificateStoreLocation value);
    public string get_CertificateThumbprint();
    public void set_CertificateThumbprint(string value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public bool get_AllowZeroDateTime();
    public void set_AllowZeroDateTime(bool value);
    public bool get_ConvertZeroDateTime();
    public void set_ConvertZeroDateTime(bool value);
    public bool get_UseUsageAdvisor();
    public void set_UseUsageAdvisor(bool value);
    public UInt32 get_ProcedureCacheSize();
    public void set_ProcedureCacheSize(UInt32 value);
    public bool get_UsePerformanceMonitor();
    public void set_UsePerformanceMonitor(bool value);
    public bool get_IgnorePrepare();
    public void set_IgnorePrepare(bool value);
    public bool get_UseProcedureBodies();
    public void set_UseProcedureBodies(bool value);
    public bool get_AutoEnlist();
    public void set_AutoEnlist(bool value);
    public bool get_RespectBinaryFlags();
    public void set_RespectBinaryFlags(bool value);
    public bool get_TreatTinyAsBoolean();
    public void set_TreatTinyAsBoolean(bool value);
    public bool get_AllowUserVariables();
    public void set_AllowUserVariables(bool value);
    public bool get_InteractiveSession();
    public void set_InteractiveSession(bool value);
    public bool get_FunctionsReturnString();
    public void set_FunctionsReturnString(bool value);
    public bool get_UseAffectedRows();
    public void set_UseAffectedRows(bool value);
    public bool get_OldGuids();
    public void set_OldGuids(bool value);
    public UInt32 get_Keepalive();
    public void set_Keepalive(UInt32 value);
    public bool get_SqlServerMode();
    public void set_SqlServerMode(bool value);
    public bool get_TableCaching();
    public void set_TableCaching(bool value);
    public int get_DefaultTableCacheAge();
    public void set_DefaultTableCacheAge(int value);
    public bool get_CheckParameters();
    public void set_CheckParameters(bool value);
    public bool get_Replication();
    public void set_Replication(bool value);
    public string get_ExceptionInterceptors();
    public void set_ExceptionInterceptors(string value);
    public string get_CommandInterceptors();
    public void set_CommandInterceptors(string value);
    public bool get_IncludeSecurityAsserts();
    public void set_IncludeSecurityAsserts(bool value);
    public UInt32 get_ConnectionLifeTime();
    public void set_ConnectionLifeTime(UInt32 value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public UInt32 get_MinimumPoolSize();
    public void set_MinimumPoolSize(UInt32 value);
    public UInt32 get_MaximumPoolSize();
    public void set_MaximumPoolSize(UInt32 value);
    public bool get_ConnectionReset();
    public void set_ConnectionReset(bool value);
    public bool get_CacheServerProperties();
    public void set_CacheServerProperties(bool value);
    public string get_CharacterSet();
    public void set_CharacterSet(string value);
    public bool get_TreatBlobsAsUTF8();
    public void set_TreatBlobsAsUTF8(bool value);
    public string get_BlobAsUTF8IncludePattern();
    public void set_BlobAsUTF8IncludePattern(string value);
    public string get_BlobAsUTF8ExcludePattern();
    public void set_BlobAsUTF8ExcludePattern(string value);
    public MySqlSslMode get_SslMode();
    public void set_SslMode(MySqlSslMode value);
    public bool get_UseDefaultCommandTimeoutForEF();
    public void set_UseDefaultCommandTimeoutForEF(bool value);
    [CompilerGeneratedAttribute]
public string get_FabricGroup();
    [CompilerGeneratedAttribute]
internal void set_FabricGroup(string value);
    [CompilerGeneratedAttribute]
public string get_ShardingTable();
    [CompilerGeneratedAttribute]
internal void set_ShardingTable(string value);
    [CompilerGeneratedAttribute]
public object get_ShardingKey();
    [CompilerGeneratedAttribute]
internal void set_ShardingKey(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FabricServerMode();
    [CompilerGeneratedAttribute]
internal void set_FabricServerMode(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FabricScope();
    [CompilerGeneratedAttribute]
internal void set_FabricScope(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal bool get_HasProcAccess();
    [CompilerGeneratedAttribute]
internal void set_HasProcAccess(bool value);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    internal Regex GetBlobAsUTF8IncludeRegex();
    internal Regex GetBlobAsUTF8ExcludeRegex();
    public virtual void Clear();
    internal void SetValue(string keyword, object value);
    private MySqlConnectionStringOption GetOption(string key);
    public virtual bool ContainsKey(string keyword);
    public virtual bool Remove(string keyword);
    public string GetConnectionString(bool includePass);
    public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object value);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__1(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object Value);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__3(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object value);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__5(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object value);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__7(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__8(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object value);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__9(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender);
}
internal class MySql.Data.MySqlClient.MySqlConnectionStringOption : object {
    [CompilerGeneratedAttribute]
private String[] <Synonyms>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Obsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Keyword>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private SetterDelegate <Setter>k__BackingField;
    [CompilerGeneratedAttribute]
private GetterDelegate <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private static SetterDelegate CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static GetterDelegate CS$<>9__CachedAnonymousMethodDelegate3;
    public String[] Synonyms { get; private set; }
    public bool Obsolete { get; private set; }
    public Type BaseType { get; private set; }
    public string Keyword { get; private set; }
    public object DefaultValue { get; private set; }
    public SetterDelegate Setter { get; private set; }
    public GetterDelegate Getter { get; private set; }
    public MySqlConnectionStringOption(string keyword, string synonyms, Type baseType, object defaultValue, bool obsolete, SetterDelegate setter, GetterDelegate getter);
    public MySqlConnectionStringOption(string keyword, string synonyms, Type baseType, object defaultValue, bool obsolete);
    [CompilerGeneratedAttribute]
public String[] get_Synonyms();
    [CompilerGeneratedAttribute]
private void set_Synonyms(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Obsolete();
    [CompilerGeneratedAttribute]
private void set_Obsolete(bool value);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
    [CompilerGeneratedAttribute]
private void set_BaseType(Type value);
    [CompilerGeneratedAttribute]
public string get_Keyword();
    [CompilerGeneratedAttribute]
private void set_Keyword(string value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
private void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public SetterDelegate get_Setter();
    [CompilerGeneratedAttribute]
private void set_Setter(SetterDelegate value);
    [CompilerGeneratedAttribute]
public GetterDelegate get_Getter();
    [CompilerGeneratedAttribute]
private void set_Getter(GetterDelegate value);
    public bool HasKeyword(string key);
    public void Clean(MySqlConnectionStringBuilder builder);
    public void ValidateValue(Object& value);
    private bool ParseEnum(string requestedValue, Object& value);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender, object value);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__1(MySqlConnectionStringBuilder msb, MySqlConnectionStringOption sender);
}
internal class MySql.Data.MySqlClient.MySqlConnectionStringOptionCollection : Dictionary`2<string, MySqlConnectionStringOption> {
    private List`1<MySqlConnectionStringOption> options;
    internal List`1<MySqlConnectionStringOption> Options { get; }
    internal List`1<MySqlConnectionStringOption> get_Options();
    internal void Add(MySqlConnectionStringOption option);
    internal MySqlConnectionStringOption Get(string keyword);
}
[DesignerCategoryAttribute("Code")]
[ToolboxBitmapAttribute("MySql.Data.MySqlClient.MySqlDataAdapter", "MySqlClient.resources.dataadapter.bmp")]
[DesignerAttribute("MySql.Data.MySqlClient.Design.MySqlDataAdapterDesigner,MySqlClient.Design")]
public class MySql.Data.MySqlClient.MySqlDataAdapter : DbDataAdapter {
    private bool loadingDefaults;
    private int updateBatchSize;
    private List`1<IDbCommand> commandBatch;
    private MySqlRowUpdatingEventHandler RowUpdating;
    private MySqlRowUpdatedEventHandler RowUpdated;
    [DescriptionAttribute("Used during Update for deleted rows in Dataset.")]
public MySqlCommand DeleteCommand { get; public set; }
    [DescriptionAttribute("Used during Update for new rows in Dataset.")]
public MySqlCommand InsertCommand { get; public set; }
    [DescriptionAttribute("Used during Fill/FillSchema")]
[CategoryAttribute("Fill")]
public MySqlCommand SelectCommand { get; public set; }
    [DescriptionAttribute("Used during Update for modified rows in Dataset.")]
public MySqlCommand UpdateCommand { get; public set; }
    internal bool LoadDefaults { get; internal set; }
    public int UpdateBatchSize { get; public set; }
    public MySqlDataAdapter(MySqlCommand selectCommand);
    public MySqlDataAdapter(string selectCommandText, MySqlConnection connection);
    public MySqlDataAdapter(string selectCommandText, string selectConnString);
    public void add_RowUpdating(MySqlRowUpdatingEventHandler value);
    public void remove_RowUpdating(MySqlRowUpdatingEventHandler value);
    public void add_RowUpdated(MySqlRowUpdatedEventHandler value);
    public void remove_RowUpdated(MySqlRowUpdatedEventHandler value);
    public MySqlCommand get_DeleteCommand();
    public void set_DeleteCommand(MySqlCommand value);
    public MySqlCommand get_InsertCommand();
    public void set_InsertCommand(MySqlCommand value);
    public MySqlCommand get_SelectCommand();
    public void set_SelectCommand(MySqlCommand value);
    public MySqlCommand get_UpdateCommand();
    public void set_UpdateCommand(MySqlCommand value);
    internal bool get_LoadDefaults();
    internal void set_LoadDefaults(bool value);
    private void OpenConnectionIfClosed(DataRowState state, List`1<MySqlConnection> openedConnections);
    protected virtual int Update(DataRow[] dataRows, DataTableMapping tableMapping);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    protected virtual void InitializeBatching();
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual int ExecuteBatch();
    protected virtual void ClearBatch();
    protected virtual void TerminateBatching();
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
}
[DefaultMemberAttribute("Item")]
public class MySql.Data.MySqlClient.MySqlDataReader : DbDataReader {
    private bool isOpen;
    private CommandBehavior commandBehavior;
    private MySqlCommand command;
    internal long affectedRows;
    internal Driver driver;
    private PreparableStatement statement;
    private ResultSet resultSet;
    private bool disableZeroAffectedRows;
    private MySqlConnection connection;
    internal PreparableStatement Statement { get; }
    internal MySqlCommand Command { get; }
    internal ResultSet ResultSet { get; }
    internal CommandBehavior CommandBehavior { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    internal MySqlDataReader(MySqlCommand cmd, PreparableStatement statement, CommandBehavior behavior);
    internal PreparableStatement get_Statement();
    internal MySqlCommand get_Command();
    internal ResultSet get_ResultSet();
    internal CommandBehavior get_CommandBehavior();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    public virtual void Close();
    public bool GetBoolean(string name);
    public virtual bool GetBoolean(int i);
    public byte GetByte(string name);
    public virtual byte GetByte(int i);
    public sbyte GetSByte(string name);
    public sbyte GetSByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    private object ChangeType(IMySqlValue value, int fieldIndex, Type newType);
    public char GetChar(string name);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual string GetDataTypeName(int i);
    public MySqlDateTime GetMySqlDateTime(string column);
    public MySqlDateTime GetMySqlDateTime(int column);
    public DateTime GetDateTime(string column);
    public virtual DateTime GetDateTime(int i);
    public MySqlDecimal GetMySqlDecimal(string column);
    public MySqlDecimal GetMySqlDecimal(int i);
    public decimal GetDecimal(string column);
    public virtual decimal GetDecimal(int i);
    public double GetDouble(string column);
    public virtual double GetDouble(int i);
    public Type GetFieldType(string column);
    public virtual Type GetFieldType(int i);
    public float GetFloat(string column);
    public virtual float GetFloat(int i);
    public Guid GetGuid(string column);
    public virtual Guid GetGuid(int i);
    public short GetInt16(string column);
    public virtual short GetInt16(int i);
    public int GetInt32(string column);
    public virtual int GetInt32(int i);
    public long GetInt64(string column);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public string GetString(string column);
    public virtual string GetString(int i);
    public TimeSpan GetTimeSpan(string column);
    public TimeSpan GetTimeSpan(int column);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public ushort GetUInt16(string column);
    public ushort GetUInt16(int column);
    public UInt32 GetUInt32(string column);
    public UInt32 GetUInt32(int column);
    public ulong GetUInt64(string column);
    public ulong GetUInt64(int column);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int i);
    public virtual bool IsDBNull(int i);
    public virtual bool NextResult();
    public virtual bool Read();
    private IMySqlValue GetFieldValue(int index, bool checkNull);
    private void ClearKillFlag();
    private void ProcessOutputParameters();
    private void AdjustOutputTypes();
    private void Throw(Exception ex);
    public sealed virtual void Dispose();
    internal void Dispose(bool disposing);
    protected virtual void Finalize();
    public virtual int get_Depth();
    public MySqlGeometry GetMySqlGeometry(int i);
    public MySqlGeometry GetMySqlGeometry(string column);
    public virtual DataTable GetSchemaTable();
    public virtual IEnumerator GetEnumerator();
}
public enum MySql.Data.MySqlClient.MySqlDbType : Enum {
    public int value__;
    public static MySqlDbType Decimal;
    public static MySqlDbType Byte;
    public static MySqlDbType Int16;
    public static MySqlDbType Int24;
    public static MySqlDbType Int32;
    public static MySqlDbType Int64;
    public static MySqlDbType Float;
    public static MySqlDbType Double;
    public static MySqlDbType Timestamp;
    public static MySqlDbType Date;
    public static MySqlDbType Time;
    public static MySqlDbType DateTime;
    [ObsoleteAttribute("The Datetime enum value is obsolete.  Please use DateTime.")]
public static MySqlDbType Datetime;
    public static MySqlDbType Year;
    public static MySqlDbType Newdate;
    public static MySqlDbType VarString;
    public static MySqlDbType Bit;
    public static MySqlDbType NewDecimal;
    public static MySqlDbType Enum;
    public static MySqlDbType Set;
    public static MySqlDbType TinyBlob;
    public static MySqlDbType MediumBlob;
    public static MySqlDbType LongBlob;
    public static MySqlDbType Blob;
    public static MySqlDbType VarChar;
    public static MySqlDbType String;
    public static MySqlDbType Geometry;
    public static MySqlDbType UByte;
    public static MySqlDbType UInt16;
    public static MySqlDbType UInt24;
    public static MySqlDbType UInt32;
    public static MySqlDbType UInt64;
    public static MySqlDbType Binary;
    public static MySqlDbType VarBinary;
    public static MySqlDbType TinyText;
    public static MySqlDbType MediumText;
    public static MySqlDbType LongText;
    public static MySqlDbType Text;
    public static MySqlDbType Guid;
}
public enum MySql.Data.MySqlClient.MySqlDriverType : Enum {
    public int value__;
    public static MySqlDriverType Native;
    public static MySqlDriverType Client;
    public static MySqlDriverType Embedded;
}
public class MySql.Data.MySqlClient.MySqlError : object {
    private string level;
    private int code;
    private string message;
    public string Level { get; }
    public int Code { get; }
    public string Message { get; }
    public MySqlError(string level, int code, string message);
    public string get_Level();
    public int get_Code();
    public string get_Message();
}
public enum MySql.Data.MySqlClient.MySqlErrorCode : Enum {
    public int value__;
    public static MySqlErrorCode None;
    public static MySqlErrorCode HashCheck;
    public static MySqlErrorCode ISAMCheck;
    public static MySqlErrorCode No;
    public static MySqlErrorCode Yes;
    public static MySqlErrorCode CannotCreateFile;
    public static MySqlErrorCode CannotCreateTable;
    public static MySqlErrorCode CannotCreateDatabase;
    public static MySqlErrorCode DatabaseCreateExists;
    public static MySqlErrorCode DatabaseDropExists;
    public static MySqlErrorCode DatabaseDropDelete;
    public static MySqlErrorCode DatabaseDropRemoveDir;
    public static MySqlErrorCode CannotDeleteFile;
    public static MySqlErrorCode CannotFindSystemRecord;
    public static MySqlErrorCode CannotGetStatus;
    public static MySqlErrorCode CannotGetWorkingDirectory;
    public static MySqlErrorCode CannotLock;
    public static MySqlErrorCode CannotOpenFile;
    public static MySqlErrorCode FileNotFound;
    public static MySqlErrorCode CannotReadDirectory;
    public static MySqlErrorCode CannotSetWorkingDirectory;
    public static MySqlErrorCode CheckRead;
    public static MySqlErrorCode DiskFull;
    public static MySqlErrorCode DuplicateKey;
    public static MySqlErrorCode ErrorOnClose;
    public static MySqlErrorCode ErrorOnRead;
    public static MySqlErrorCode ErrorOnRename;
    public static MySqlErrorCode ErrorOnWrite;
    public static MySqlErrorCode FileUsed;
    public static MySqlErrorCode FileSortAborted;
    public static MySqlErrorCode FormNotFound;
    public static MySqlErrorCode GetErrorNumber;
    public static MySqlErrorCode IllegalHA;
    public static MySqlErrorCode KeyNotFound;
    public static MySqlErrorCode NotFormFile;
    public static MySqlErrorCode NotKeyFile;
    public static MySqlErrorCode OldKeyFile;
    public static MySqlErrorCode OpenAsReadOnly;
    public static MySqlErrorCode OutOfMemory;
    public static MySqlErrorCode OutOfSortMemory;
    public static MySqlErrorCode UnexepectedEOF;
    public static MySqlErrorCode ConnectionCountError;
    public static MySqlErrorCode OutOfResources;
    public static MySqlErrorCode UnableToConnectToHost;
    public static MySqlErrorCode HandshakeError;
    public static MySqlErrorCode DatabaseAccessDenied;
    public static MySqlErrorCode AccessDenied;
    public static MySqlErrorCode NoDatabaseSelected;
    public static MySqlErrorCode UnknownCommand;
    public static MySqlErrorCode ColumnCannotBeNull;
    public static MySqlErrorCode UnknownDatabase;
    public static MySqlErrorCode TableExists;
    public static MySqlErrorCode BadTable;
    public static MySqlErrorCode NonUnique;
    public static MySqlErrorCode ServerShutdown;
    public static MySqlErrorCode BadFieldError;
    public static MySqlErrorCode WrongFieldWithGroup;
    public static MySqlErrorCode WrongGroupField;
    public static MySqlErrorCode WrongSumSelected;
    public static MySqlErrorCode WrongValueCount;
    public static MySqlErrorCode TooLongIdentifier;
    public static MySqlErrorCode DuplicateFieldName;
    public static MySqlErrorCode DuplicateKeyName;
    public static MySqlErrorCode DuplicateKeyEntry;
    public static MySqlErrorCode WrongFieldSpecifier;
    public static MySqlErrorCode ParseError;
    public static MySqlErrorCode EmptyQuery;
    public static MySqlErrorCode NonUniqueTable;
    public static MySqlErrorCode InvalidDefault;
    public static MySqlErrorCode MultiplePrimaryKey;
    public static MySqlErrorCode TooManyKeys;
    public static MySqlErrorCode TooManyKeysParts;
    public static MySqlErrorCode TooLongKey;
    public static MySqlErrorCode KeyColumnDoesNotExist;
    public static MySqlErrorCode BlobUsedAsKey;
    public static MySqlErrorCode TooBigFieldLength;
    public static MySqlErrorCode WrongAutoKey;
    public static MySqlErrorCode Ready;
    public static MySqlErrorCode NormalShutdown;
    public static MySqlErrorCode GotSignal;
    public static MySqlErrorCode ShutdownComplete;
    public static MySqlErrorCode ForcingClose;
    public static MySqlErrorCode IPSocketError;
    public static MySqlErrorCode NoSuchIndex;
    public static MySqlErrorCode WrongFieldTerminators;
    public static MySqlErrorCode BlobsAndNoTerminated;
    public static MySqlErrorCode TextFileNotReadable;
    public static MySqlErrorCode FileExists;
    public static MySqlErrorCode LoadInfo;
    public static MySqlErrorCode AlterInfo;
    public static MySqlErrorCode WrongSubKey;
    public static MySqlErrorCode CannotRemoveAllFields;
    public static MySqlErrorCode CannotDropFieldOrKey;
    public static MySqlErrorCode InsertInfo;
    public static MySqlErrorCode UpdateTableUsed;
    public static MySqlErrorCode NoSuchThread;
    public static MySqlErrorCode KillDenied;
    public static MySqlErrorCode NoTablesUsed;
    public static MySqlErrorCode TooBigSet;
    public static MySqlErrorCode NoUniqueLogFile;
    public static MySqlErrorCode TableNotLockedForWrite;
    public static MySqlErrorCode TableNotLocked;
    public static MySqlErrorCode BlobCannotHaveDefault;
    public static MySqlErrorCode WrongDatabaseName;
    public static MySqlErrorCode WrongTableName;
    public static MySqlErrorCode TooBigSelect;
    public static MySqlErrorCode UnknownError;
    public static MySqlErrorCode UnknownProcedure;
    public static MySqlErrorCode WrongParameterCountToProcedure;
    public static MySqlErrorCode WrongParametersToProcedure;
    public static MySqlErrorCode UnknownTable;
    public static MySqlErrorCode FieldSpecifiedTwice;
    public static MySqlErrorCode InvalidGroupFunctionUse;
    public static MySqlErrorCode UnsupportedExtenstion;
    public static MySqlErrorCode TableMustHaveColumns;
    public static MySqlErrorCode RecordFileFull;
    public static MySqlErrorCode UnknownCharacterSet;
    public static MySqlErrorCode TooManyTables;
    public static MySqlErrorCode TooManyFields;
    public static MySqlErrorCode TooBigRowSize;
    public static MySqlErrorCode StackOverrun;
    public static MySqlErrorCode WrongOuterJoin;
    public static MySqlErrorCode NullColumnInIndex;
    public static MySqlErrorCode CannotFindUDF;
    public static MySqlErrorCode CannotInitializeUDF;
    public static MySqlErrorCode UDFNoPaths;
    public static MySqlErrorCode UDFExists;
    public static MySqlErrorCode CannotOpenLibrary;
    public static MySqlErrorCode CannotFindDLEntry;
    public static MySqlErrorCode FunctionNotDefined;
    public static MySqlErrorCode HostIsBlocked;
    public static MySqlErrorCode HostNotPrivileged;
    public static MySqlErrorCode AnonymousUser;
    public static MySqlErrorCode PasswordNotAllowed;
    public static MySqlErrorCode PasswordNoMatch;
    public static MySqlErrorCode UpdateInfo;
    public static MySqlErrorCode CannotCreateThread;
    public static MySqlErrorCode WrongValueCountOnRow;
    public static MySqlErrorCode CannotReopenTable;
    public static MySqlErrorCode InvalidUseOfNull;
    public static MySqlErrorCode RegExpError;
    public static MySqlErrorCode MixOfGroupFunctionAndFields;
    public static MySqlErrorCode NonExistingGrant;
    public static MySqlErrorCode TableAccessDenied;
    public static MySqlErrorCode ColumnAccessDenied;
    public static MySqlErrorCode IllegalGrantForTable;
    public static MySqlErrorCode GrantWrongHostOrUser;
    public static MySqlErrorCode NoSuchTable;
    public static MySqlErrorCode NonExistingTableGrant;
    public static MySqlErrorCode NotAllowedCommand;
    public static MySqlErrorCode SyntaxError;
    public static MySqlErrorCode DelayedCannotChangeLock;
    public static MySqlErrorCode TooManyDelayedThreads;
    public static MySqlErrorCode AbortingConnection;
    public static MySqlErrorCode PacketTooLarge;
    public static MySqlErrorCode NetReadErrorFromPipe;
    public static MySqlErrorCode NetFCntlError;
    public static MySqlErrorCode NetPacketsOutOfOrder;
    public static MySqlErrorCode NetUncompressError;
    public static MySqlErrorCode NetReadError;
    public static MySqlErrorCode NetReadInterrupted;
    public static MySqlErrorCode NetErrorOnWrite;
    public static MySqlErrorCode NetWriteInterrupted;
    public static MySqlErrorCode TooLongString;
    public static MySqlErrorCode TableCannotHandleBlob;
    public static MySqlErrorCode TableCannotHandleAutoIncrement;
    public static MySqlErrorCode DelayedInsertTableLocked;
    public static MySqlErrorCode WrongColumnName;
    public static MySqlErrorCode WrongKeyColumn;
    public static MySqlErrorCode WrongMergeTable;
    public static MySqlErrorCode DuplicateUnique;
    public static MySqlErrorCode BlobKeyWithoutLength;
    public static MySqlErrorCode PrimaryCannotHaveNull;
    public static MySqlErrorCode TooManyRows;
    public static MySqlErrorCode RequiresPrimaryKey;
    public static MySqlErrorCode NoRAIDCompiled;
    public static MySqlErrorCode UpdateWithoutKeysInSafeMode;
    public static MySqlErrorCode KeyDoesNotExist;
    public static MySqlErrorCode CheckNoSuchTable;
    public static MySqlErrorCode CheckNotImplemented;
    public static MySqlErrorCode CannotDoThisDuringATransaction;
    public static MySqlErrorCode ErrorDuringCommit;
    public static MySqlErrorCode ErrorDuringRollback;
    public static MySqlErrorCode ErrorDuringFlushLogs;
    public static MySqlErrorCode ErrorDuringCheckpoint;
    public static MySqlErrorCode NewAbortingConnection;
    public static MySqlErrorCode DumpNotImplemented;
    public static MySqlErrorCode FlushMasterBinLogClosed;
    public static MySqlErrorCode IndexRebuild;
    public static MySqlErrorCode MasterError;
    public static MySqlErrorCode MasterNetRead;
    public static MySqlErrorCode MasterNetWrite;
    public static MySqlErrorCode FullTextMatchingKeyNotFound;
    public static MySqlErrorCode LockOrActiveTransaction;
    public static MySqlErrorCode UnknownSystemVariable;
    public static MySqlErrorCode CrashedOnUsage;
    public static MySqlErrorCode CrashedOnRepair;
    public static MySqlErrorCode WarningNotCompleteRollback;
    public static MySqlErrorCode TransactionCacheFull;
    public static MySqlErrorCode SlaveMustStop;
    public static MySqlErrorCode SlaveNotRunning;
    public static MySqlErrorCode BadSlave;
    public static MySqlErrorCode MasterInfo;
    public static MySqlErrorCode SlaveThread;
    public static MySqlErrorCode TooManyUserConnections;
    public static MySqlErrorCode SetConstantsOnly;
    public static MySqlErrorCode LockWaitTimeout;
    public static MySqlErrorCode LockTableFull;
    public static MySqlErrorCode ReadOnlyTransaction;
    public static MySqlErrorCode DropDatabaseWithReadLock;
    public static MySqlErrorCode CreateDatabaseWithReadLock;
    public static MySqlErrorCode WrongArguments;
    public static MySqlErrorCode NoPermissionToCreateUser;
    public static MySqlErrorCode UnionTablesInDifferentDirectory;
    public static MySqlErrorCode LockDeadlock;
    public static MySqlErrorCode TableCannotHandleFullText;
    public static MySqlErrorCode CannotAddForeignConstraint;
    public static MySqlErrorCode NoReferencedRow;
    public static MySqlErrorCode RowIsReferenced;
    public static MySqlErrorCode ConnectToMaster;
    public static MySqlErrorCode QueryOnMaster;
    public static MySqlErrorCode ErrorWhenExecutingCommand;
    public static MySqlErrorCode WrongUsage;
    public static MySqlErrorCode WrongNumberOfColumnsInSelect;
    public static MySqlErrorCode CannotUpdateWithReadLock;
    public static MySqlErrorCode MixingNotAllowed;
    public static MySqlErrorCode DuplicateArgument;
    public static MySqlErrorCode UserLimitReached;
    public static MySqlErrorCode SpecifiedAccessDeniedError;
    public static MySqlErrorCode LocalVariableError;
    public static MySqlErrorCode GlobalVariableError;
    public static MySqlErrorCode NotDefaultError;
    public static MySqlErrorCode WrongValueForVariable;
    public static MySqlErrorCode WrongTypeForVariable;
    public static MySqlErrorCode VariableCannotBeRead;
    public static MySqlErrorCode CannotUseOptionHere;
    public static MySqlErrorCode NotSupportedYet;
    public static MySqlErrorCode MasterFatalErrorReadingBinLog;
    public static MySqlErrorCode SlaveIgnoredTable;
    public static MySqlErrorCode IncorrectGlobalLocalVariable;
    public static MySqlErrorCode WrongForeignKeyDefinition;
    public static MySqlErrorCode KeyReferenceDoesNotMatchTableReference;
    public static MySqlErrorCode OpearnColumnsError;
    public static MySqlErrorCode SubQueryNoOneRow;
    public static MySqlErrorCode UnknownStatementHandler;
    public static MySqlErrorCode CorruptHelpDatabase;
    public static MySqlErrorCode CyclicReference;
    public static MySqlErrorCode AutoConvert;
    public static MySqlErrorCode IllegalReference;
    public static MySqlErrorCode DerivedMustHaveAlias;
    public static MySqlErrorCode SelectReduced;
    public static MySqlErrorCode TableNameNotAllowedHere;
    public static MySqlErrorCode NotSupportedAuthMode;
    public static MySqlErrorCode SpatialCannotHaveNull;
    public static MySqlErrorCode CollationCharsetMismatch;
    public static MySqlErrorCode SlaveWasRunning;
    public static MySqlErrorCode SlaveWasNotRunning;
    public static MySqlErrorCode TooBigForUncompress;
    public static MySqlErrorCode ZipLibMemoryError;
    public static MySqlErrorCode ZipLibBufferError;
    public static MySqlErrorCode ZipLibDataError;
    public static MySqlErrorCode CutValueGroupConcat;
    public static MySqlErrorCode WarningTooFewRecords;
    public static MySqlErrorCode WarningTooManyRecords;
    public static MySqlErrorCode WarningNullToNotNull;
    public static MySqlErrorCode WarningDataOutOfRange;
    public static MySqlErrorCode WaningDataTruncated;
    public static MySqlErrorCode WaningUsingOtherHandler;
    public static MySqlErrorCode CannotAggregateTwoCollations;
    public static MySqlErrorCode DropUserError;
    public static MySqlErrorCode RevokeGrantsError;
    public static MySqlErrorCode CannotAggregateThreeCollations;
    public static MySqlErrorCode CannotAggregateNCollations;
    public static MySqlErrorCode VariableIsNotStructure;
    public static MySqlErrorCode UnknownCollation;
    public static MySqlErrorCode SlaveIgnoreSSLParameters;
    public static MySqlErrorCode ServerIsInSecureAuthMode;
    public static MySqlErrorCode WaningFieldResolved;
    public static MySqlErrorCode BadSlaveUntilCondition;
    public static MySqlErrorCode MissingSkipSlave;
    public static MySqlErrorCode ErrorUntilConditionIgnored;
    public static MySqlErrorCode WrongNameForIndex;
    public static MySqlErrorCode WrongNameForCatalog;
    public static MySqlErrorCode WarningQueryCacheResize;
    public static MySqlErrorCode BadFullTextColumn;
    public static MySqlErrorCode UnknownKeyCache;
    public static MySqlErrorCode WarningHostnameWillNotWork;
    public static MySqlErrorCode UnknownStorageEngine;
    public static MySqlErrorCode WaningDeprecatedSyntax;
    public static MySqlErrorCode NonUpdateableTable;
    public static MySqlErrorCode FeatureDisabled;
    public static MySqlErrorCode OptionPreventsStatement;
    public static MySqlErrorCode DuplicatedValueInType;
    public static MySqlErrorCode TruncatedWrongValue;
    public static MySqlErrorCode TooMuchAutoTimestampColumns;
    public static MySqlErrorCode InvalidOnUpdate;
    public static MySqlErrorCode UnsupportedPreparedStatement;
    public static MySqlErrorCode GetErroMessage;
    public static MySqlErrorCode GetTemporaryErrorMessage;
    public static MySqlErrorCode UnknownTimeZone;
    public static MySqlErrorCode WarningInvalidTimestamp;
    public static MySqlErrorCode InvalidCharacterString;
    public static MySqlErrorCode WarningAllowedPacketOverflowed;
    public static MySqlErrorCode ConflictingDeclarations;
    public static MySqlErrorCode StoredProcedureNoRecursiveCreate;
    public static MySqlErrorCode StoredProcedureAlreadyExists;
    public static MySqlErrorCode StoredProcedureDoesNotExist;
    public static MySqlErrorCode StoredProcedureDropFailed;
    public static MySqlErrorCode StoredProcedureStoreFailed;
    public static MySqlErrorCode StoredProcedureLiLabelMismatch;
    public static MySqlErrorCode StoredProcedureLabelRedefine;
    public static MySqlErrorCode StoredProcedureLabelMismatch;
    public static MySqlErrorCode StoredProcedureUninitializedVariable;
    public static MySqlErrorCode StoredProcedureBadSelect;
    public static MySqlErrorCode StoredProcedureBadReturn;
    public static MySqlErrorCode StoredProcedureBadStatement;
    public static MySqlErrorCode UpdateLogDeprecatedIgnored;
    public static MySqlErrorCode UpdateLogDeprecatedTranslated;
    public static MySqlErrorCode QueryInterrupted;
    public static MySqlErrorCode StoredProcedureNumberOfArguments;
    public static MySqlErrorCode StoredProcedureConditionMismatch;
    public static MySqlErrorCode StoredProcedureNoReturn;
    public static MySqlErrorCode StoredProcedureNoReturnEnd;
    public static MySqlErrorCode StoredProcedureBadCursorQuery;
    public static MySqlErrorCode StoredProcedureBadCursorSelect;
    public static MySqlErrorCode StoredProcedureCursorMismatch;
    public static MySqlErrorCode StoredProcedureAlreadyOpen;
    public static MySqlErrorCode StoredProcedureCursorNotOpen;
    public static MySqlErrorCode StoredProcedureUndeclaredVariabel;
    public static MySqlErrorCode StoredProcedureWrongNumberOfFetchArguments;
    public static MySqlErrorCode StoredProcedureFetchNoData;
    public static MySqlErrorCode StoredProcedureDuplicateParameter;
    public static MySqlErrorCode StoredProcedureDuplicateVariable;
    public static MySqlErrorCode StoredProcedureDuplicateCondition;
    public static MySqlErrorCode StoredProcedureDuplicateCursor;
    public static MySqlErrorCode StoredProcedureCannotAlter;
    public static MySqlErrorCode StoredProcedureSubSelectNYI;
    public static MySqlErrorCode StatementNotAllowedInStoredFunctionOrTrigger;
    public static MySqlErrorCode StoredProcedureVariableConditionAfterCursorHandler;
    public static MySqlErrorCode StoredProcedureCursorAfterHandler;
    public static MySqlErrorCode StoredProcedureCaseNotFound;
    public static MySqlErrorCode FileParserTooBigFile;
    public static MySqlErrorCode FileParserBadHeader;
    public static MySqlErrorCode FileParserEOFInComment;
    public static MySqlErrorCode FileParserErrorInParameter;
    public static MySqlErrorCode FileParserEOFInUnknownParameter;
    public static MySqlErrorCode ViewNoExplain;
    public static MySqlErrorCode FrmUnknownType;
    public static MySqlErrorCode WrongObject;
    public static MySqlErrorCode NonUpdateableColumn;
    public static MySqlErrorCode ViewSelectDerived;
    public static MySqlErrorCode ViewSelectClause;
    public static MySqlErrorCode ViewSelectVariable;
    public static MySqlErrorCode ViewSelectTempTable;
    public static MySqlErrorCode ViewWrongList;
    public static MySqlErrorCode WarningViewMerge;
    public static MySqlErrorCode WarningViewWithoutKey;
    public static MySqlErrorCode ViewInvalid;
    public static MySqlErrorCode StoredProcedureNoDropStoredProcedure;
    public static MySqlErrorCode StoredProcedureGotoInHandler;
    public static MySqlErrorCode TriggerAlreadyExists;
    public static MySqlErrorCode TriggerDoesNotExist;
    public static MySqlErrorCode TriggerOnViewOrTempTable;
    public static MySqlErrorCode TriggerCannotChangeRow;
    public static MySqlErrorCode TriggerNoSuchRowInTrigger;
    public static MySqlErrorCode NoDefaultForField;
    public static MySqlErrorCode DivisionByZero;
    public static MySqlErrorCode TruncatedWrongValueForField;
    public static MySqlErrorCode IllegalValueForType;
    public static MySqlErrorCode ViewNonUpdatableCheck;
    public static MySqlErrorCode ViewCheckFailed;
    public static MySqlErrorCode PrecedureAccessDenied;
    public static MySqlErrorCode RelayLogFail;
    public static MySqlErrorCode PasswordLength;
    public static MySqlErrorCode UnknownTargetBinLog;
    public static MySqlErrorCode IOErrorLogIndexRead;
    public static MySqlErrorCode BinLogPurgeProhibited;
    public static MySqlErrorCode FSeekFail;
    public static MySqlErrorCode BinLogPurgeFatalError;
    public static MySqlErrorCode LogInUse;
    public static MySqlErrorCode LogPurgeUnknownError;
    public static MySqlErrorCode RelayLogInit;
    public static MySqlErrorCode NoBinaryLogging;
    public static MySqlErrorCode ReservedSyntax;
    public static MySqlErrorCode WSAStartupFailed;
    public static MySqlErrorCode DifferentGroupsProcedure;
    public static MySqlErrorCode NoGroupForProcedure;
    public static MySqlErrorCode OrderWithProcedure;
    public static MySqlErrorCode LoggingProhibitsChangingOf;
    public static MySqlErrorCode NoFileMapping;
    public static MySqlErrorCode WrongMagic;
    public static MySqlErrorCode PreparedStatementManyParameters;
    public static MySqlErrorCode KeyPartZero;
    public static MySqlErrorCode ViewChecksum;
    public static MySqlErrorCode ViewMultiUpdate;
    public static MySqlErrorCode ViewNoInsertFieldList;
    public static MySqlErrorCode ViewDeleteMergeView;
    public static MySqlErrorCode CannotUser;
    public static MySqlErrorCode XAERNotA;
    public static MySqlErrorCode XAERInvalid;
    public static MySqlErrorCode XAERRemoveFail;
    public static MySqlErrorCode XAEROutside;
    public static MySqlErrorCode XAERRemoveError;
    public static MySqlErrorCode XARBRollback;
    public static MySqlErrorCode NonExistingProcedureGrant;
    public static MySqlErrorCode ProcedureAutoGrantFail;
    public static MySqlErrorCode ProcedureAutoRevokeFail;
    public static MySqlErrorCode DataTooLong;
    public static MySqlErrorCode StoredProcedureSQLState;
    public static MySqlErrorCode StartupError;
    public static MySqlErrorCode LoadFromFixedSizeRowsToVariable;
    public static MySqlErrorCode CannotCreateUserWithGrant;
    public static MySqlErrorCode WrongValueForType;
    public static MySqlErrorCode TableDefinitionChanged;
    public static MySqlErrorCode StoredProcedureDuplicateHandler;
    public static MySqlErrorCode StoredProcedureNotVariableArgument;
    public static MySqlErrorCode StoredProcedureNoReturnSet;
    public static MySqlErrorCode CannotCreateGeometryObject;
    public static MySqlErrorCode FailedRoutineBreaksBinLog;
    public static MySqlErrorCode BinLogUnsafeRoutine;
    public static MySqlErrorCode BinLogCreateRoutineNeedSuper;
    public static MySqlErrorCode ExecuteStatementWithOpenCursor;
    public static MySqlErrorCode StatementHasNoOpenCursor;
    public static MySqlErrorCode CommitNotAllowedIfStoredFunctionOrTrigger;
    public static MySqlErrorCode NoDefaultForViewField;
    public static MySqlErrorCode StoredProcedureNoRecursion;
    public static MySqlErrorCode TooBigScale;
    public static MySqlErrorCode TooBigPrecision;
    public static MySqlErrorCode MBiggerThanD;
    public static MySqlErrorCode WrongLockOfSystemTable;
    public static MySqlErrorCode ConnectToForeignDataSource;
    public static MySqlErrorCode QueryOnForeignDataSource;
    public static MySqlErrorCode ForeignDataSourceDoesNotExist;
    public static MySqlErrorCode ForeignDataStringInvalidCannotCreate;
    public static MySqlErrorCode ForeignDataStringInvalid;
    public static MySqlErrorCode CannotCreateFederatedTable;
    public static MySqlErrorCode TriggerInWrongSchema;
    public static MySqlErrorCode StackOverrunNeedMore;
    public static MySqlErrorCode TooLongBody;
    public static MySqlErrorCode WarningCannotDropDefaultKeyCache;
    public static MySqlErrorCode TooBigDisplayWidth;
    public static MySqlErrorCode XAERDuplicateID;
    public static MySqlErrorCode DateTimeFunctionOverflow;
    public static MySqlErrorCode CannotUpdateUsedTableInStoredFunctionOrTrigger;
    public static MySqlErrorCode ViewPreventUpdate;
    public static MySqlErrorCode PreparedStatementNoRecursion;
    public static MySqlErrorCode StoredProcedureCannotSetAutoCommit;
    public static MySqlErrorCode MalformedDefiner;
    public static MySqlErrorCode ViewFrmNoUser;
    public static MySqlErrorCode ViewOtherUser;
    public static MySqlErrorCode NoSuchUser;
    public static MySqlErrorCode ForbidSchemaChange;
    public static MySqlErrorCode RowIsReferenced2;
    public static MySqlErrorCode NoReferencedRow2;
    public static MySqlErrorCode StoredProcedureBadVariableShadow;
    public static MySqlErrorCode TriggerNoDefiner;
    public static MySqlErrorCode OldFileFormat;
    public static MySqlErrorCode StoredProcedureRecursionLimit;
    public static MySqlErrorCode StoredProcedureTableCorrupt;
    public static MySqlErrorCode StoredProcedureWrongName;
    public static MySqlErrorCode TableNeedsUpgrade;
    public static MySqlErrorCode StoredProcedureNoAggregate;
    public static MySqlErrorCode MaxPreparedStatementCountReached;
    public static MySqlErrorCode ViewRecursive;
    public static MySqlErrorCode NonGroupingFieldUsed;
    public static MySqlErrorCode TableCannotHandleSpatialKeys;
    public static MySqlErrorCode NoTriggersOnSystemSchema;
    public static MySqlErrorCode RemovedSpaces;
    public static MySqlErrorCode AutoIncrementReadFailed;
    public static MySqlErrorCode UserNameError;
    public static MySqlErrorCode HostNameError;
    public static MySqlErrorCode WrongStringLength;
    public static MySqlErrorCode NonInsertableTable;
    public static MySqlErrorCode AdminWrongMergeTable;
    public static MySqlErrorCode TooHighLevelOfNestingForSelect;
    public static MySqlErrorCode NameBecomesEmpty;
    public static MySqlErrorCode AmbiguousFieldTerm;
    public static MySqlErrorCode ForeignServerExists;
    public static MySqlErrorCode ForeignServerDoesNotExist;
    public static MySqlErrorCode IllegalHACreateOption;
    public static MySqlErrorCode PartitionRequiresValues;
    public static MySqlErrorCode PartitionWrongValues;
    public static MySqlErrorCode PartitionMaxValue;
    public static MySqlErrorCode PartitionSubPartition;
    public static MySqlErrorCode PartitionSubPartMix;
    public static MySqlErrorCode PartitionWrongNoPart;
    public static MySqlErrorCode PartitionWrongNoSubPart;
    public static MySqlErrorCode WrongExpressionInParitionFunction;
    public static MySqlErrorCode NoConstantExpressionInRangeOrListError;
    public static MySqlErrorCode FieldNotFoundPartitionErrror;
    public static MySqlErrorCode ListOfFieldsOnlyInHash;
    public static MySqlErrorCode InconsistentPartitionInfo;
    public static MySqlErrorCode PartitionFunctionNotAllowed;
    public static MySqlErrorCode PartitionsMustBeDefined;
    public static MySqlErrorCode RangeNotIncreasing;
    public static MySqlErrorCode InconsistentTypeOfFunctions;
    public static MySqlErrorCode MultipleDefinitionsConstantInListPartition;
    public static MySqlErrorCode PartitionEntryError;
    public static MySqlErrorCode MixHandlerError;
    public static MySqlErrorCode PartitionNotDefined;
    public static MySqlErrorCode TooManyPartitions;
    public static MySqlErrorCode SubPartitionError;
    public static MySqlErrorCode CannotCreateHandlerFile;
    public static MySqlErrorCode BlobFieldInPartitionFunction;
    public static MySqlErrorCode UniqueKeyNeedAllFieldsInPartitioningFunction;
    public static MySqlErrorCode NoPartitions;
    public static MySqlErrorCode PartitionManagementOnNoPartitioned;
    public static MySqlErrorCode ForeignKeyOnPartitioned;
    public static MySqlErrorCode DropPartitionNonExistent;
    public static MySqlErrorCode DropLastPartition;
    public static MySqlErrorCode CoalesceOnlyOnHashPartition;
    public static MySqlErrorCode ReorganizeHashOnlyOnSameNumber;
    public static MySqlErrorCode ReorganizeNoParameter;
    public static MySqlErrorCode OnlyOnRangeListPartition;
    public static MySqlErrorCode AddPartitionSubPartition;
    public static MySqlErrorCode AddPartitionNoNewPartition;
    public static MySqlErrorCode CoalescePartitionNoPartition;
    public static MySqlErrorCode ReorganizePartitionNotExist;
    public static MySqlErrorCode SameNamePartition;
    public static MySqlErrorCode NoBinLog;
    public static MySqlErrorCode ConsecutiveReorganizePartitions;
    public static MySqlErrorCode ReorganizeOutsideRange;
    public static MySqlErrorCode PartitionFunctionFailure;
    public static MySqlErrorCode PartitionStateError;
    public static MySqlErrorCode LimitedPartitionRange;
    public static MySqlErrorCode PluginIsNotLoaded;
    public static MySqlErrorCode WrongValue;
    public static MySqlErrorCode NoPartitionForGivenValue;
    public static MySqlErrorCode FileGroupOptionOnlyOnce;
    public static MySqlErrorCode CreateFileGroupFailed;
    public static MySqlErrorCode DropFileGroupFailed;
    public static MySqlErrorCode TableSpaceAutoExtend;
    public static MySqlErrorCode WrongSizeNumber;
    public static MySqlErrorCode SizeOverflow;
    public static MySqlErrorCode AlterFileGroupFailed;
    public static MySqlErrorCode BinLogRowLogginFailed;
    public static MySqlErrorCode BinLogRowWrongTableDefinition;
    public static MySqlErrorCode BinLogRowRBRToSBR;
    public static MySqlErrorCode EventAlreadyExists;
    public static MySqlErrorCode EventStoreFailed;
    public static MySqlErrorCode EventDoesNotExist;
    public static MySqlErrorCode EventCannotAlter;
    public static MySqlErrorCode EventDropFailed;
    public static MySqlErrorCode EventIntervalNotPositiveOrTooBig;
    public static MySqlErrorCode EventEndsBeforeStarts;
    public static MySqlErrorCode EventExecTimeInThePast;
    public static MySqlErrorCode EventOpenTableFailed;
    public static MySqlErrorCode EventNeitherMExpresssionNorMAt;
    public static MySqlErrorCode ColumnCountDoesNotMatchCorrupted;
    public static MySqlErrorCode CannotLoadFromTable;
    public static MySqlErrorCode EventCannotDelete;
    public static MySqlErrorCode EventCompileError;
    public static MySqlErrorCode EventSameName;
    public static MySqlErrorCode EventDataTooLong;
    public static MySqlErrorCode DropIndexForeignKey;
    public static MySqlErrorCode WarningDeprecatedSyntaxWithVersion;
    public static MySqlErrorCode CannotWriteLockLogTable;
    public static MySqlErrorCode CannotLockLogTable;
    public static MySqlErrorCode ForeignDuplicateKey;
    public static MySqlErrorCode ColumnCountDoesNotMatchPleaseUpdate;
    public static MySqlErrorCode TemoraryTablePreventSwitchOutOfRBR;
    public static MySqlErrorCode StoredFunctionPreventsSwitchBinLogFormat;
    public static MySqlErrorCode NDBCannotSwitchBinLogFormat;
    public static MySqlErrorCode PartitionNoTemporary;
    public static MySqlErrorCode PartitionConstantDomain;
    public static MySqlErrorCode PartitionFunctionIsNotAllowed;
    public static MySqlErrorCode DDLLogError;
    public static MySqlErrorCode NullInValuesLessThan;
    public static MySqlErrorCode WrongPartitionName;
    public static MySqlErrorCode CannotChangeTransactionIsolation;
    public static MySqlErrorCode DuplicateEntryAutoIncrementCase;
    public static MySqlErrorCode EventModifyQueueError;
    public static MySqlErrorCode EventSetVariableError;
    public static MySqlErrorCode PartitionMergeError;
    public static MySqlErrorCode CannotActivateLog;
    public static MySqlErrorCode RBRNotAvailable;
    public static MySqlErrorCode Base64DecodeError;
    public static MySqlErrorCode EventRecursionForbidden;
    public static MySqlErrorCode EventsDatabaseError;
    public static MySqlErrorCode OnlyIntegersAllowed;
    public static MySqlErrorCode UnsupportedLogEngine;
    public static MySqlErrorCode BadLogStatement;
    public static MySqlErrorCode CannotRenameLogTable;
    public static MySqlErrorCode WrongParameterCountToNativeFCT;
    public static MySqlErrorCode WrongParametersToNativeFCT;
    public static MySqlErrorCode WrongParametersToStoredFCT;
    public static MySqlErrorCode NativeFCTNameCollision;
    public static MySqlErrorCode DuplicateEntryWithKeyName;
    public static MySqlErrorCode BinLogPurgeEMFile;
    public static MySqlErrorCode EventCannotCreateInThePast;
    public static MySqlErrorCode EventCannotAlterInThePast;
    public static MySqlErrorCode SlaveIncident;
    public static MySqlErrorCode NoPartitionForGivenValueSilent;
    public static MySqlErrorCode BinLogUnsafeStatement;
    public static MySqlErrorCode SlaveFatalError;
    public static MySqlErrorCode SlaveRelayLogReadFailure;
    public static MySqlErrorCode SlaveRelayLogWriteFailure;
    public static MySqlErrorCode SlaveCreateEventFailure;
    public static MySqlErrorCode SlaveMasterComFailure;
    public static MySqlErrorCode BinLogLoggingImpossible;
    public static MySqlErrorCode ViewNoCreationContext;
    public static MySqlErrorCode ViewInvalidCreationContext;
    public static MySqlErrorCode StoredRoutineInvalidCreateionContext;
    public static MySqlErrorCode TiggerCorruptedFile;
    public static MySqlErrorCode TriggerNoCreationContext;
    public static MySqlErrorCode TriggerInvalidCreationContext;
    public static MySqlErrorCode EventInvalidCreationContext;
    public static MySqlErrorCode TriggerCannotOpenTable;
    public static MySqlErrorCode CannoCreateSubRoutine;
    public static MySqlErrorCode SlaveAmbiguousExecMode;
    public static MySqlErrorCode NoFormatDescriptionEventBeforeBinLogStatement;
    public static MySqlErrorCode SlaveCorruptEvent;
    public static MySqlErrorCode LoadDataInvalidColumn;
    public static MySqlErrorCode LogPurgeNoFile;
    public static MySqlErrorCode XARBTimeout;
    public static MySqlErrorCode XARBDeadlock;
    public static MySqlErrorCode NeedRePrepare;
    public static MySqlErrorCode DelayedNotSupported;
    public static MySqlErrorCode WarningNoMasterInfo;
    public static MySqlErrorCode WarningOptionIgnored;
    public static MySqlErrorCode WarningPluginDeleteBuiltIn;
    public static MySqlErrorCode WarningPluginBusy;
    public static MySqlErrorCode VariableIsReadonly;
    public static MySqlErrorCode WarningEngineTransactionRollback;
    public static MySqlErrorCode SlaveHeartbeatFailure;
    public static MySqlErrorCode SlaveHeartbeatValueOutOfRange;
    public static MySqlErrorCode NDBReplicationSchemaError;
    public static MySqlErrorCode ConflictFunctionParseError;
    public static MySqlErrorCode ExcepionsWriteError;
    public static MySqlErrorCode TooLongTableComment;
    public static MySqlErrorCode TooLongFieldComment;
    public static MySqlErrorCode FunctionInExistentNameCollision;
    public static MySqlErrorCode DatabaseNameError;
    public static MySqlErrorCode TableNameErrror;
    public static MySqlErrorCode PartitionNameError;
    public static MySqlErrorCode SubPartitionNameError;
    public static MySqlErrorCode TemporaryNameError;
    public static MySqlErrorCode RenamedNameError;
    public static MySqlErrorCode TooManyConcurrentTransactions;
    public static MySqlErrorCode WarningNonASCIISeparatorNotImplemented;
    public static MySqlErrorCode DebugSyncTimeout;
    public static MySqlErrorCode DebugSyncHitLimit;
    public static MySqlErrorCode ErrorLast;
}
public class MySql.Data.MySqlClient.MySqlException : DbException {
    private int errorCode;
    private bool isFatal;
    public int Number { get; }
    internal bool IsFatal { get; }
    internal bool IsQueryAborted { get; }
    internal MySqlException(string msg);
    internal MySqlException(string msg, Exception ex);
    internal MySqlException(string msg, bool isFatal, Exception inner);
    internal MySqlException(string msg, int errno, Exception inner);
    internal MySqlException(string msg, int errno);
    private MySqlException(SerializationInfo info, StreamingContext context);
    public int get_Number();
    internal bool get_IsFatal();
    internal bool get_IsQueryAborted();
}
internal class MySql.Data.MySqlClient.MySqlField : object {
    public string CatalogName;
    public int ColumnLength;
    public string ColumnName;
    public string OriginalColumnName;
    public string TableName;
    public string RealTableName;
    public string DatabaseName;
    public Encoding Encoding;
    public int maxLength;
    protected ColumnFlags colFlags;
    protected int charSetIndex;
    protected byte precision;
    protected byte scale;
    protected MySqlDbType mySqlDbType;
    protected DBVersion connVersion;
    protected Driver driver;
    protected bool binaryOk;
    protected List`1<Type> typeConversions;
    public int CharacterSetIndex { get; public set; }
    public MySqlDbType Type { get; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int MaxLength { get; public set; }
    public ColumnFlags Flags { get; }
    public bool IsAutoIncrement { get; }
    public bool IsNumeric { get; }
    public bool AllowsNull { get; }
    public bool IsUnique { get; }
    public bool IsPrimaryKey { get; }
    public bool IsBlob { get; }
    public bool IsBinary { get; }
    public bool IsUnsigned { get; }
    public bool IsTextField { get; }
    public int CharacterLength { get; }
    public List`1<Type> TypeConversions { get; }
    public MySqlField(Driver driver);
    public int get_CharacterSetIndex();
    public void set_CharacterSetIndex(int value);
    public MySqlDbType get_Type();
    public byte get_Precision();
    public void set_Precision(byte value);
    public byte get_Scale();
    public void set_Scale(byte value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public ColumnFlags get_Flags();
    public bool get_IsAutoIncrement();
    public bool get_IsNumeric();
    public bool get_AllowsNull();
    public bool get_IsUnique();
    public bool get_IsPrimaryKey();
    public bool get_IsBlob();
    public bool get_IsBinary();
    public bool get_IsUnsigned();
    public bool get_IsTextField();
    public int get_CharacterLength();
    public List`1<Type> get_TypeConversions();
    public void SetTypeAndFlags(MySqlDbType type, ColumnFlags flags);
    public void AddTypeConversion(Type t);
    private void CheckForExceptions();
    public IMySqlValue GetValueObject();
    public static IMySqlValue GetIMySqlValue(MySqlDbType type);
    private void SetFieldEncoding();
}
public class MySql.Data.MySqlClient.MySqlHelper : object {
    private static string stringOfBackslashChars;
    private static string stringOfQuoteChars;
    private static CharClass[] charClassArray;
    private static MySqlHelper();
    public static int ExecuteNonQuery(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    public static int ExecuteNonQuery(string connectionString, string commandText, MySqlParameter[] parms);
    public static DataRow ExecuteDataRow(string connectionString, string commandText, MySqlParameter[] parms);
    public static DataSet ExecuteDataset(string connectionString, string commandText);
    public static DataSet ExecuteDataset(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static DataSet ExecuteDataset(MySqlConnection connection, string commandText);
    public static DataSet ExecuteDataset(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    public static void UpdateDataSet(string connectionString, string commandText, DataSet ds, string tablename);
    private static MySqlDataReader ExecuteReader(MySqlConnection connection, MySqlTransaction transaction, string commandText, MySqlParameter[] commandParameters, bool ExternalConn);
    public static MySqlDataReader ExecuteReader(string connectionString, string commandText);
    public static MySqlDataReader ExecuteReader(MySqlConnection connection, string commandText);
    public static MySqlDataReader ExecuteReader(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static MySqlDataReader ExecuteReader(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    public static object ExecuteScalar(string connectionString, string commandText);
    public static object ExecuteScalar(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static object ExecuteScalar(MySqlConnection connection, string commandText);
    public static object ExecuteScalar(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    private static CharClass[] makeCharClassArray();
    private static bool needsQuoting(string s);
    public static string EscapeString(string value);
    public static string DoubleQuoteString(string value);
}
public class MySql.Data.MySqlClient.MySqlInfoMessageEventArgs : EventArgs {
    public MySqlError[] errors;
}
public class MySql.Data.MySqlClient.MySqlInfoMessageEventHandler : MulticastDelegate {
    public MySqlInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MySqlInfoMessageEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlInfoMessageEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class MySql.Data.MySqlClient.MySqlPacket : object {
    private Byte[] tempBuffer;
    private Encoding encoding;
    private MemoryStream buffer;
    private DBVersion version;
    public Encoding Encoding { get; public set; }
    public bool HasMoreData { get; }
    public int Position { get; public set; }
    public int Length { get; public set; }
    public bool IsLastPacket { get; }
    public Byte[] Buffer { get; }
    public DBVersion Version { get; public set; }
    public MySqlPacket(Encoding enc);
    public MySqlPacket(MemoryStream stream);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_HasMoreData();
    public int get_Position();
    public void set_Position(int value);
    public int get_Length();
    public void set_Length(int value);
    public bool get_IsLastPacket();
    public Byte[] get_Buffer();
    public DBVersion get_Version();
    public void set_Version(DBVersion value);
    public void Clear();
    public byte ReadByte();
    public int Read(Byte[] byteBuffer, int offset, int count);
    public void WriteByte(byte b);
    public void Write(Byte[] bytesToWrite);
    public void Write(Byte[] bytesToWrite, int offset, int countToWrite);
    public int ReadNBytes();
    public void SetByte(long position, byte value);
    public long ReadFieldLength();
    public ulong ReadBitValue(int numbytes);
    public long ReadLong(int numbytes);
    public ulong ReadULong(int numbytes);
    public int Read3ByteInt();
    public int ReadInteger(int numbytes);
    public void WriteInteger(long v, int numbytes);
    public int ReadPackedInteger();
    public void WriteLength(long length);
    public void WriteLenString(string s);
    public void WriteStringNoNull(string v);
    public void WriteString(string v);
    public string ReadLenString();
    public string ReadAsciiString(long length);
    public string ReadString(long length);
    public string ReadString();
    public string ReadString(Encoding theEncoding);
}
[TypeConverterAttribute("MySql.Data.MySqlClient.MySqlParameterConverter")]
public class MySql.Data.MySqlClient.MySqlParameter : DbParameter {
    private static int UNSIGNED_MASK;
    private static int GEOMETRY_LENGTH;
    private DbType dbType;
    private object paramValue;
    private string paramName;
    private MySqlDbType mySqlDbType;
    private bool inferType;
    private IMySqlValue _valueObject;
    [CompilerGeneratedAttribute]
private DataRowVersion <SourceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceColumnNullMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlParameterCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private IList <PossibleValues>k__BackingField;
    [CategoryAttribute("Data")]
public DataRowVersion SourceVersion { get; public set; }
    [CategoryAttribute("Data")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public DbType DbType { get; public set; }
    [CategoryAttribute("Misc")]
public string ParameterName { get; public set; }
    internal MySqlParameterCollection Collection { get; internal set; }
    internal Encoding Encoding { get; internal set; }
    internal bool TypeHasBeenSet { get; }
    internal string BaseName { get; }
    [CategoryAttribute("Data")]
public ParameterDirection Direction { get; public set; }
    [BrowsableAttribute("False")]
public bool IsNullable { get; public set; }
    [CategoryAttribute("Data")]
[DbProviderSpecificTypePropertyAttribute("True")]
public MySqlDbType MySqlDbType { get; public set; }
    [CategoryAttribute("Data")]
public byte Precision { get; public set; }
    [CategoryAttribute("Data")]
public byte Scale { get; public set; }
    [CategoryAttribute("Data")]
public int Size { get; public set; }
    [CategoryAttribute("Data")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Value { get; public set; }
    internal IMySqlValue ValueObject { get; private set; }
    public IList PossibleValues { get; internal set; }
    public MySqlParameter(string parameterName, MySqlDbType dbType, int size, string sourceColumn);
    public MySqlParameter(string parameterName, MySqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    internal MySqlParameter(string name, MySqlDbType type, ParameterDirection dir, string col, DataRowVersion ver, object val);
    public MySqlParameter(string parameterName, object value);
    public MySqlParameter(string parameterName, MySqlDbType dbType);
    public MySqlParameter(string parameterName, MySqlDbType dbType, int size);
    private void Init();
    [CompilerGeneratedAttribute]
public virtual DataRowVersion get_SourceVersion();
    [CompilerGeneratedAttribute]
public virtual void set_SourceVersion(DataRowVersion value);
    [CompilerGeneratedAttribute]
public virtual string get_SourceColumn();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumn(string value);
    public virtual void ResetDbType();
    [CompilerGeneratedAttribute]
public virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    private void SetDbTypeFromMySqlDbType();
    private void SetDbType(DbType db_type);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
internal MySqlParameterCollection get_Collection();
    [CompilerGeneratedAttribute]
internal void set_Collection(MySqlParameterCollection value);
    [CompilerGeneratedAttribute]
internal Encoding get_Encoding();
    [CompilerGeneratedAttribute]
internal void set_Encoding(Encoding value);
    internal bool get_TypeHasBeenSet();
    internal string get_BaseName();
    [CompilerGeneratedAttribute]
public virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(ParameterDirection value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    public MySqlDbType get_MySqlDbType();
    public void set_MySqlDbType(MySqlDbType value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Precision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Precision(byte value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Scale();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scale(byte value);
    [CompilerGeneratedAttribute]
public virtual int get_Size();
    [CompilerGeneratedAttribute]
public virtual void set_Size(int value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    internal IMySqlValue get_ValueObject();
    private void set_ValueObject(IMySqlValue value);
    [CompilerGeneratedAttribute]
public IList get_PossibleValues();
    [CompilerGeneratedAttribute]
internal void set_PossibleValues(IList value);
    private void SetParameterName(string name);
    public virtual string ToString();
    internal int GetPSType();
    internal void Serialize(MySqlPacket packet, bool binary, MySqlConnectionStringBuilder settings);
    private void SetMySqlDbType(MySqlDbType mysql_dbtype);
    private void SetTypeFromValue();
    public MySqlParameter Clone();
    private sealed virtual override object System.ICloneable.Clone();
    internal long EstimatedSize();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("True")]
[EditorAttribute("MySql.Data.MySqlClient.Design.DBParametersEditor,MySql.Design", "System.Drawing.Design.UITypeEditor")]
public class MySql.Data.MySqlClient.MySqlParameterCollection : DbParameterCollection {
    private List`1<MySqlParameter> items;
    private Dictionary`2<string, int> indexHashCS;
    private Dictionary`2<string, int> indexHashCI;
    internal bool containsUnnamedParameters;
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public int Count { get; }
    public MySqlParameter Item { get; public set; }
    public MySqlParameter Item { get; public set; }
    internal MySqlParameterCollection(MySqlCommand cmd);
    public MySqlParameter Add(string parameterName, MySqlDbType dbType, int size, string sourceColumn);
    public virtual void AddRange(Array values);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    protected virtual void SetParameter(int index, DbParameter value);
    public virtual int Add(object value);
    public virtual bool Contains(string parameterName);
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual void Insert(int index, object value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual void Remove(object value);
    public virtual void RemoveAt(string parameterName);
    public virtual void RemoveAt(int index);
    public virtual object get_SyncRoot();
    public virtual int get_Count();
    public MySqlParameter get_Item(int index);
    public void set_Item(int index, MySqlParameter value);
    public MySqlParameter get_Item(string name);
    public void set_Item(string name, MySqlParameter value);
    public MySqlParameter Add(MySqlParameter value);
    [ObsoleteAttribute("Add(String parameterName, Object value) has been deprecated.  Use AddWithValue(String parameterName, Object value)")]
public MySqlParameter Add(string parameterName, object value);
    public MySqlParameter AddWithValue(string parameterName, object value);
    public MySqlParameter Add(string parameterName, MySqlDbType dbType);
    public MySqlParameter Add(string parameterName, MySqlDbType dbType, int size);
    public virtual void Clear();
    private void CheckIndex(int index);
    private MySqlParameter InternalGetParameter(int index);
    private MySqlParameter InternalGetParameter(string parameterName);
    private void InternalSetParameter(string parameterName, MySqlParameter value);
    private void InternalSetParameter(int index, MySqlParameter value);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    internal void ParameterNameChanged(MySqlParameter p, string oldName, string newName);
    private MySqlParameter InternalAdd(MySqlParameter value, int index);
    private int GetNextIndex();
    private static void AdjustHash(Dictionary`2<string, int> hash, string parameterName, int keyIndex, bool addEntry);
    private void AdjustHashes(int keyIndex, bool addEntry);
    private MySqlParameter GetParameterFlexibleInternal(string baseName);
    internal MySqlParameter GetParameterFlexible(string parameterName, bool throwOnNotFound);
}
internal class MySql.Data.MySqlClient.MySqlParameterConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class MySql.Data.MySqlClient.MySqlPool : object {
    private List`1<Driver> inUsePool;
    private Queue`1<Driver> idlePool;
    private MySqlConnectionStringBuilder settings;
    private UInt32 minSize;
    private UInt32 maxSize;
    private ProcedureCache procedureCache;
    private bool beingCleared;
    private int available;
    private AutoResetEvent autoEvent;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ServerProperties>k__BackingField;
    public MySqlConnectionStringBuilder Settings { get; public set; }
    public ProcedureCache ProcedureCache { get; }
    private bool HasIdleConnections { get; }
    private int NumConnections { get; }
    public bool BeingCleared { get; }
    internal Dictionary`2<string, string> ServerProperties { get; internal set; }
    public MySqlPool(MySqlConnectionStringBuilder settings);
    private void EnqueueIdle(Driver driver);
    public MySqlConnectionStringBuilder get_Settings();
    public void set_Settings(MySqlConnectionStringBuilder value);
    public ProcedureCache get_ProcedureCache();
    private bool get_HasIdleConnections();
    private int get_NumConnections();
    public bool get_BeingCleared();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_ServerProperties();
    [CompilerGeneratedAttribute]
internal void set_ServerProperties(Dictionary`2<string, string> value);
    private Driver GetPooledConnection();
    private Driver CreateNewPooledConnection();
    public void ReleaseConnection(Driver driver);
    public void RemoveConnection(Driver driver);
    private Driver TryToGetDriver();
    public Driver GetConnection();
    internal void Clear();
    internal List`1<Driver> RemoveOldIdleConnections();
}
internal class MySql.Data.MySqlClient.MySqlPoolManager : object {
    private static Dictionary`2<string, MySqlPool> pools;
    private static List`1<MySqlPool> clearingPools;
    internal static int maxConnectionIdleTime;
    private static Timer timer;
    private static MySqlPoolManager();
    private static void EnsureClearingPools(object sender, EventArgs e);
    private static string GetKey(MySqlConnectionStringBuilder settings);
    public static MySqlPool GetPool(MySqlConnectionStringBuilder settings);
    public static void RemoveConnection(Driver driver);
    public static void ReleaseConnection(Driver driver);
    public static void ClearPool(MySqlConnectionStringBuilder settings);
    private static void ClearPoolByText(string key);
    public static void ClearAllPools();
    public static void RemoveClearedPool(MySqlPool pool);
    public static void CleanIdleConnections(object obj);
}
internal class MySql.Data.MySqlClient.MySqlPromotableTransaction : object {
    [ThreadStaticAttribute]
private static Stack`1<MySqlTransactionScope> globalScopeStack;
    private MySqlConnection connection;
    private Transaction baseTransaction;
    private Stack`1<MySqlTransactionScope> scopeStack;
    public Transaction BaseTransaction { get; }
    public bool InRollback { get; }
    public MySqlPromotableTransaction(MySqlConnection connection, Transaction baseTransaction);
    public Transaction get_BaseTransaction();
    public bool get_InRollback();
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.Initialize();
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.Rollback(SinglePhaseEnlistment singlePhaseEnlistment);
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
    private sealed virtual override Byte[] System.Transactions.ITransactionPromoter.Promote();
}
public class MySql.Data.MySqlClient.MySqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    public MySqlCommand Command { get; }
    public MySqlRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public MySqlCommand get_Command();
}
public class MySql.Data.MySqlClient.MySqlRowUpdatedEventHandler : MulticastDelegate {
    public MySqlRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MySqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MySql.Data.MySqlClient.MySqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    public MySqlCommand Command { get; public set; }
    public MySqlRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public MySqlCommand get_Command();
    public void set_Command(MySqlCommand value);
}
public class MySql.Data.MySqlClient.MySqlRowUpdatingEventHandler : MulticastDelegate {
    public MySqlRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MySqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MySql.Data.MySqlClient.MySqlSchemaCollection : object {
    private List`1<SchemaColumn> columns;
    private List`1<MySqlSchemaRow> rows;
    private DataTable _table;
    internal Dictionary`2<string, int> Mapping;
    internal Dictionary`2<int, int> LogicalMappings;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public IList`1<SchemaColumn> Columns { get; }
    public IList`1<MySqlSchemaRow> Rows { get; }
    public MySqlSchemaCollection(string name);
    public MySqlSchemaCollection(DataTable dt);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public IList`1<SchemaColumn> get_Columns();
    public IList`1<MySqlSchemaRow> get_Rows();
    internal SchemaColumn AddColumn(string name, Type t);
    internal int ColumnIndex(string name);
    internal void RemoveColumn(string name);
    internal bool ContainsColumn(string name);
    internal MySqlSchemaRow AddRow();
    internal MySqlSchemaRow NewRow();
    internal DataTable AsDataTable();
}
[DefaultMemberAttribute("Item")]
public class MySql.Data.MySqlClient.MySqlSchemaRow : object {
    private Dictionary`2<int, object> data;
    [CompilerGeneratedAttribute]
private MySqlSchemaCollection <Collection>k__BackingField;
    internal MySqlSchemaCollection Collection { get; private set; }
    internal object Item { get; internal set; }
    internal object Item { get; internal set; }
    public MySqlSchemaRow(MySqlSchemaCollection c);
    internal void InitMetadata();
    [CompilerGeneratedAttribute]
internal MySqlSchemaCollection get_Collection();
    [CompilerGeneratedAttribute]
private void set_Collection(MySqlSchemaCollection value);
    internal object get_Item(string s);
    internal void set_Item(string s, object value);
    internal object get_Item(int i);
    internal void set_Item(int i, object value);
    private void SetValueForName(string colName, object value);
    private object GetValueForName(string colName);
    internal void CopyRow(MySqlSchemaRow row);
}
public class MySql.Data.MySqlClient.MySqlScript : object {
    private MySqlConnection connection;
    private string query;
    private string delimiter;
    private MySqlStatementExecutedEventHandler StatementExecuted;
    private MySqlScriptErrorEventHandler Error;
    private EventHandler ScriptCompleted;
    public MySqlConnection Connection { get; public set; }
    public string Query { get; public set; }
    public string Delimiter { get; public set; }
    public MySqlScript(MySqlConnection connection);
    public MySqlScript(string query);
    public MySqlScript(MySqlConnection connection, string query);
    public void add_StatementExecuted(MySqlStatementExecutedEventHandler value);
    public void remove_StatementExecuted(MySqlStatementExecutedEventHandler value);
    public void add_Error(MySqlScriptErrorEventHandler value);
    public void remove_Error(MySqlScriptErrorEventHandler value);
    public void add_ScriptCompleted(EventHandler value);
    public void remove_ScriptCompleted(EventHandler value);
    public MySqlConnection get_Connection();
    public void set_Connection(MySqlConnection value);
    public string get_Query();
    public void set_Query(string value);
    public string get_Delimiter();
    public void set_Delimiter(string value);
    public int Execute();
    private void OnQueryExecuted(ScriptStatement statement);
    private void OnScriptCompleted();
    private bool OnScriptError(Exception ex);
    private List`1<int> BreakScriptIntoLines();
    private static int FindLineNumber(int position, List`1<int> lineNumbers);
    private List`1<ScriptStatement> BreakIntoStatements(bool ansiQuotes, bool noBackslashEscapes);
    private void AdjustDelimiterEnd(MySqlTokenizer tokenizer);
}
public class MySql.Data.MySqlClient.MySqlScriptErrorEventArgs : MySqlScriptEventArgs {
    private Exception exception;
    private bool ignore;
    public Exception Exception { get; }
    public bool Ignore { get; public set; }
    public MySqlScriptErrorEventArgs(Exception exception);
    public Exception get_Exception();
    public bool get_Ignore();
    public void set_Ignore(bool value);
}
public class MySql.Data.MySqlClient.MySqlScriptErrorEventHandler : MulticastDelegate {
    public MySqlScriptErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MySqlScriptErrorEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlScriptErrorEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MySql.Data.MySqlClient.MySqlScriptEventArgs : EventArgs {
    private ScriptStatement statement;
    unknown ScriptStatement Statement {internal set; }
    public string StatementText { get; }
    public int Line { get; }
    public int Position { get; }
    internal void set_Statement(ScriptStatement value);
    public string get_StatementText();
    public int get_Line();
    public int get_Position();
}
public class MySql.Data.MySqlClient.MySqlSecurityPermission : MarshalByRefObject {
    public static PermissionSet CreatePermissionSet(bool includeReflectionPermission);
}
public enum MySql.Data.MySqlClient.MySqlSslMode : Enum {
    public int value__;
    public static MySqlSslMode None;
    public static MySqlSslMode Preferred;
    public static MySqlSslMode Prefered;
    public static MySqlSslMode Required;
    public static MySqlSslMode VerifyCA;
    public static MySqlSslMode VerifyFull;
}
public class MySql.Data.MySqlClient.MySqlStatementExecutedEventHandler : MulticastDelegate {
    public MySqlStatementExecutedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MySqlScriptEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlScriptEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class MySql.Data.MySqlClient.MySqlStream : object {
    private byte sequenceByte;
    private int maxBlockSize;
    private ulong maxPacketSize;
    private Byte[] packetHeader;
    private MySqlPacket packet;
    private TimedStream timedStream;
    private Stream inStream;
    private Stream outStream;
    internal Stream BaseStream { get; }
    public Encoding Encoding { get; public set; }
    public byte SequenceByte { get; public set; }
    public int MaxBlockSize { get; public set; }
    public ulong MaxPacketSize { get; public set; }
    public MySqlStream(Encoding encoding);
    public MySqlStream(Stream baseStream, Encoding encoding, bool compress);
    internal Stream get_BaseStream();
    public void Close();
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public void ResetTimeout(int timeout);
    public byte get_SequenceByte();
    public void set_SequenceByte(byte value);
    public int get_MaxBlockSize();
    public void set_MaxBlockSize(int value);
    public ulong get_MaxPacketSize();
    public void set_MaxPacketSize(ulong value);
    public MySqlPacket ReadPacket();
    internal static void ReadFully(Stream stream, Byte[] buffer, int offset, int count);
    public void LoadPacket();
    public void SendPacket(MySqlPacket packet);
    public void SendEntirePacketDirectly(Byte[] buffer, int count);
}
internal class MySql.Data.MySqlClient.MySqlTokenizer : object {
    private string sql;
    private int startIndex;
    private int stopIndex;
    private bool ansiQuotes;
    private bool backslashEscapes;
    private bool returnComments;
    private bool multiLine;
    private bool sqlServerMode;
    private bool quoted;
    private bool isComment;
    private int pos;
    public string Text { get; public set; }
    public bool AnsiQuotes { get; public set; }
    public bool BackslashEscapes { get; public set; }
    public bool MultiLine { get; public set; }
    public bool SqlServerMode { get; public set; }
    public bool Quoted { get; private set; }
    public bool IsComment { get; }
    public int StartIndex { get; public set; }
    public int StopIndex { get; public set; }
    public int Position { get; public set; }
    public bool ReturnComments { get; public set; }
    public MySqlTokenizer(string input);
    public string get_Text();
    public void set_Text(string value);
    public bool get_AnsiQuotes();
    public void set_AnsiQuotes(bool value);
    public bool get_BackslashEscapes();
    public void set_BackslashEscapes(bool value);
    public bool get_MultiLine();
    public void set_MultiLine(bool value);
    public bool get_SqlServerMode();
    public void set_SqlServerMode(bool value);
    public bool get_Quoted();
    private void set_Quoted(bool value);
    public bool get_IsComment();
    public int get_StartIndex();
    public void set_StartIndex(int value);
    public int get_StopIndex();
    public void set_StopIndex(int value);
    public int get_Position();
    public void set_Position(int value);
    public bool get_ReturnComments();
    public void set_ReturnComments(bool value);
    public List`1<string> GetAllTokens();
    public string NextToken();
    public static bool IsParameter(string s);
    public string NextParameter();
    public bool FindToken();
    public string ReadParenthesis();
    private bool ReadComment(char c);
    private void CalculatePosition(int start, int stop);
    private void ReadUnquotedToken();
    private void ReadSpecialToken();
    private void ReadQuotedToken(char quoteChar);
    private bool IsQuoteChar(char c);
    private bool IsParameterMarker(char c);
    private bool IsSpecialCharacter(char c);
}
public class MySql.Data.MySqlClient.MySqlTrace : object {
    private static TraceSource source;
    protected static string qaHost;
    protected static bool qaEnabled;
    public static TraceListenerCollection Listeners { get; }
    public static SourceSwitch Switch { get; public set; }
    public static bool QueryAnalysisEnabled { get; }
    internal static TraceSource Source { get; }
    private static MySqlTrace();
    public static TraceListenerCollection get_Listeners();
    public static SourceSwitch get_Switch();
    public static void set_Switch(SourceSwitch value);
    public static bool get_QueryAnalysisEnabled();
    public static void EnableQueryAnalyzer(string host, int postInterval);
    public static void DisableQueryAnalyzer();
    internal static TraceSource get_Source();
    internal static void LogInformation(int id, string msg);
    internal static void LogWarning(int id, string msg);
    internal static void LogError(int id, string msg);
    internal static void TraceEvent(TraceEventType eventType, MySqlTraceEventType mysqlEventType, string msgFormat, Object[] args);
}
public enum MySql.Data.MySqlClient.MySqlTraceEventType : Enum {
    public int value__;
    public static MySqlTraceEventType ConnectionOpened;
    public static MySqlTraceEventType ConnectionClosed;
    public static MySqlTraceEventType QueryOpened;
    public static MySqlTraceEventType ResultOpened;
    public static MySqlTraceEventType ResultClosed;
    public static MySqlTraceEventType QueryClosed;
    public static MySqlTraceEventType StatementPrepared;
    public static MySqlTraceEventType StatementExecuted;
    public static MySqlTraceEventType StatementClosed;
    public static MySqlTraceEventType NonQuery;
    public static MySqlTraceEventType UsageAdvisorWarning;
    public static MySqlTraceEventType Warning;
    public static MySqlTraceEventType Error;
    public static MySqlTraceEventType QueryNormalized;
}
public class MySql.Data.MySqlClient.MySqlTransaction : DbTransaction {
    private IsolationLevel level;
    private MySqlConnection conn;
    private bool open;
    protected DbConnection DbConnection { get; }
    public MySqlConnection Connection { get; }
    public IsolationLevel IsolationLevel { get; }
    internal MySqlTransaction(MySqlConnection c, IsolationLevel il);
    protected virtual DbConnection get_DbConnection();
    protected virtual void Finalize();
    public MySqlConnection get_Connection();
    public virtual IsolationLevel get_IsolationLevel();
    public sealed virtual void Dispose();
    internal void Dispose(bool disposing);
    public virtual void Commit();
    public virtual void Rollback();
}
internal class MySql.Data.MySqlClient.MySqlTransactionScope : object {
    public MySqlConnection connection;
    public Transaction baseTransaction;
    public MySqlTransaction simpleTransaction;
    public int rollbackThreadId;
    public MySqlTransactionScope(MySqlConnection con, Transaction trans, MySqlTransaction simpleTransaction);
    public void Rollback(SinglePhaseEnlistment singlePhaseEnlistment);
    public void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
}
internal class MySql.Data.MySqlClient.NativeDriver : object {
    private static string AuthenticationWindowsPlugin;
    private static string AuthenticationWindowsUser;
    private DBVersion version;
    private int threadId;
    protected string encryptionSeed;
    protected ServerStatusFlags serverStatus;
    protected MySqlStream stream;
    protected Stream baseStream;
    private BitArray nullMap;
    private MySqlPacket packet;
    private ClientFlags connectionFlags;
    private Driver owner;
    private int warnings;
    private MySqlAuthenticationPlugin authPlugin;
    public ClientFlags Flags { get; }
    public int ThreadId { get; }
    public DBVersion Version { get; }
    public ServerStatusFlags ServerStatus { get; }
    public int WarningCount { get; }
    public MySqlPacket Packet { get; }
    internal MySqlConnectionStringBuilder Settings { get; }
    internal Encoding Encoding { get; }
    public NativeDriver(Driver owner);
    public sealed virtual ClientFlags get_Flags();
    public sealed virtual int get_ThreadId();
    public sealed virtual DBVersion get_Version();
    public sealed virtual ServerStatusFlags get_ServerStatus();
    public sealed virtual int get_WarningCount();
    public MySqlPacket get_Packet();
    internal MySqlConnectionStringBuilder get_Settings();
    internal Encoding get_Encoding();
    private void HandleException(MySqlException ex);
    internal void SendPacket(MySqlPacket p);
    internal void SendEmptyPacket();
    internal MySqlPacket ReadPacket();
    internal void ReadOk(bool read);
    public sealed virtual void SetDatabase(string dbName);
    public sealed virtual void Configure();
    public sealed virtual void Open();
    private X509CertificateCollection GetClientCertificates();
    private void StartSSL();
    private bool ServerCheckValidation(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private void SetConnectionFlags(ClientFlags serverCaps);
    public void Authenticate(string authMethod, bool reset);
    public sealed virtual void Reset();
    public sealed virtual void SendQuery(MySqlPacket queryPacket);
    public sealed virtual void Close(bool isOpen);
    public sealed virtual bool Ping();
    public sealed virtual int GetResult(Int32& affectedRow, Int64& insertedId);
    private void SendFileToServer(string filename);
    private void ReadNullMap(int fieldCount);
    public sealed virtual IMySqlValue ReadColumnValue(int index, MySqlField field, IMySqlValue valObject);
    public sealed virtual void SkipColumnValue(IMySqlValue valObject);
    public sealed virtual void GetColumnsData(MySqlField[] columns);
    private void GetColumnData(MySqlField field);
    private void ExecutePacket(MySqlPacket packetToExecute);
    public sealed virtual void ExecuteStatement(MySqlPacket packetToExecute);
    private void CheckEOF();
    private void ReadEOF();
    public sealed virtual int PrepareStatement(string sql, MySqlField[]& parameters);
    public sealed virtual bool FetchDataRow(int statementId, int columns);
    public sealed virtual void CloseStatement(int statementId);
    public sealed virtual void ResetTimeout(int timeout);
    internal void SetConnectAttrs();
}
internal class MySql.Data.MySqlClient.PerformanceMonitor : object {
    private MySqlConnection connection;
    [CompilerGeneratedAttribute]
private MySqlConnection <Connection>k__BackingField;
    public MySqlConnection Connection { get; private set; }
    public PerformanceMonitor(MySqlConnection connection);
    [CompilerGeneratedAttribute]
public MySqlConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(MySqlConnection value);
    public virtual void AddHardProcedureQuery();
    public virtual void AddSoftProcedureQuery();
}
internal class MySql.Data.MySqlClient.PreparableStatement : Statement {
    private int executionCount;
    private int statementId;
    private BitArray nullMap;
    private List`1<MySqlParameter> parametersToSend;
    private MySqlPacket packet;
    private int dataPosition;
    private int nullMapPosition;
    public int ExecutionCount { get; public set; }
    public bool IsPrepared { get; }
    public int StatementId { get; }
    public PreparableStatement(MySqlCommand command, string text);
    public int get_ExecutionCount();
    public void set_ExecutionCount(int value);
    public bool get_IsPrepared();
    public int get_StatementId();
    public virtual void Prepare();
    public virtual void Execute();
    public virtual bool ExecuteNext();
    private List`1<string> PrepareCommandText(String& stripped_sql);
    public virtual void CloseStatement();
}
internal class MySql.Data.MySqlClient.ProcedureCache : object {
    private Dictionary`2<int, ProcedureCacheEntry> procHash;
    private Queue`1<int> hashQueue;
    private int maxSize;
    public ProcedureCache(int size);
    public ProcedureCacheEntry GetProcedure(MySqlConnection conn, string spName, string cacheKey);
    internal string GetCacheKey(string spName, ProcedureCacheEntry proc);
    private ProcedureCacheEntry AddNew(MySqlConnection connection, string spName);
    private void TrimHash();
    private static ProcedureCacheEntry GetProcData(MySqlConnection connection, string spName);
}
internal class MySql.Data.MySqlClient.ProcedureCacheEntry : object {
    public MySqlSchemaCollection procedure;
    public MySqlSchemaCollection parameters;
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
public class MySql.Data.MySqlClient.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AdapterIsNull { get; }
    public static string AdapterSelectIsNull { get; }
    public static string AttemptToAccessBeforeRead { get; }
    public static string AuthenticationFailed { get; }
    public static string AuthenticationMethodNotSupported { get; }
    public static string BadVersionFormat { get; }
    public static string BufferCannotBeNull { get; }
    public static string BufferNotLargeEnough { get; }
    public static string CancelNeeds50 { get; }
    public static string CancelNotSupported { get; }
    public static string CanNotDeriveParametersForTextCommands { get; }
    public static string CBMultiTableNotSupported { get; }
    public static string CBNoKeyColumn { get; }
    public static string ChaosNotSupported { get; }
    public static string CommandTextNotInitialized { get; }
    public static string ConnectionAlreadyOpen { get; }
    public static string ConnectionBroken { get; }
    public static string ConnectionMustBeOpen { get; }
    public static string ConnectionNotOpen { get; }
    public static string ConnectionNotSet { get; }
    public static string CouldNotFindColumnName { get; }
    public static string CountCannotBeNegative { get; }
    public static string CSNoSetLength { get; }
    public static string DataNotInSupportedFormat { get; }
    public static string DataReaderOpen { get; }
    public static string DefaultEncodingNotFound { get; }
    public static string DistributedTxnNotSupported { get; }
    public static string ErrorCreatingSocket { get; }
    public static string FatalErrorDuringExecute { get; }
    public static string FatalErrorDuringRead { get; }
    public static string FatalErrorReadingResult { get; }
    public static string FileBasedCertificateNotSupported { get; }
    public static string FromAndLengthTooBig { get; }
    public static string FromIndexMustBeValid { get; }
    public static string GetHostEntryFailed { get; }
    public static string HardProcQuery { get; }
    public static string ImproperValueFormat { get; }
    public static string IncorrectTransmission { get; }
    public static string IndexAndLengthTooBig { get; }
    public static string IndexMustBeValid { get; }
    public static string InvalidColumnOrdinal { get; }
    public static string InvalidConnectionStringValue { get; }
    public static string InvalidMicrosecondValue { get; }
    public static string InvalidMillisecondValue { get; }
    public static string InvalidProcName { get; }
    public static string InvalidValueForBoolean { get; }
    public static string KeywordNoNull { get; }
    public static string KeywordNotSupported { get; }
    public static string keywords { get; }
    public static string MixedParameterNamingNotAllowed { get; }
    public static string MoreThanOneOPRow { get; }
    public static string MultipleConnectionsInTransactionNotSupported { get; }
    public static string NamedPipeNoSeek { get; }
    public static string NamedPipeNoSetLength { get; }
    public static string NewValueShouldBeMySqlParameter { get; }
    public static string NextResultIsClosed { get; }
    public static string NoBodiesAndTypeNotSet { get; }
    public static string NoNestedTransactions { get; }
    public static string NoServerSSLSupport { get; }
    public static string NoUnixSocketsOnWindows { get; }
    public static string NoWindowsIdentity { get; }
    public static string ObjectDisposed { get; }
    public static string OffsetCannotBeNegative { get; }
    public static string OffsetMustBeValid { get; }
    public static string OldPasswordsNotSupported { get; }
    public static string ParameterAlreadyDefined { get; }
    public static string ParameterCannotBeNegative { get; }
    public static string ParameterCannotBeNull { get; }
    public static string ParameterIndexNotFound { get; }
    public static string ParameterIsInvalid { get; }
    public static string ParameterMustBeDefined { get; }
    public static string ParameterNotFoundDuringPrepare { get; }
    public static string PasswordMustHaveLegalChars { get; }
    public static string PerfMonCategoryHelp { get; }
    public static string PerfMonCategoryName { get; }
    public static string PerfMonHardProcHelp { get; }
    public static string PerfMonHardProcName { get; }
    public static string PerfMonSoftProcHelp { get; }
    public static string PerfMonSoftProcName { get; }
    public static string ProcAndFuncSameName { get; }
    public static string QueryTooLarge { get; }
    public static string ReadFromStreamFailed { get; }
    public static string ReadingPriorColumnUsingSeqAccess { get; }
    public static string ReplicatedConnectionsAllowOnlyReadonlyStatements { get; }
    public static string Replication_ConnectionAttemptFailed { get; }
    public static string Replication_NoAvailableServer { get; }
    public static string ReplicationGroupNotFound { get; }
    public static string ReplicationServerNotFound { get; }
    public static string RoutineNotFound { get; }
    public static string RoutineRequiresReturnParameter { get; }
    public static string ServerTooOld { get; }
    public static string SnapshotNotSupported { get; }
    public static string SocketNoSeek { get; }
    public static string SoftProcQuery { get; }
    public static string SPNotSupported { get; }
    public static string StreamAlreadyClosed { get; }
    public static string StreamNoRead { get; }
    public static string StreamNoWrite { get; }
    public static string Timeout { get; }
    public static string TimeoutGettingConnection { get; }
    public static string TraceCloseConnection { get; }
    public static string TraceErrorMoreThanMaxValueConnections { get; }
    public static string TraceFetchError { get; }
    public static string TraceOpenConnection { get; }
    public static string TraceOpenResultError { get; }
    public static string TraceQueryDone { get; }
    public static string TraceQueryNormalized { get; }
    public static string TraceQueryOpened { get; }
    public static string TraceResult { get; }
    public static string TraceResultClosed { get; }
    public static string TraceSetDatabase { get; }
    public static string TraceStatementClosed { get; }
    public static string TraceStatementExecuted { get; }
    public static string TraceStatementPrepared { get; }
    public static string TraceUAWarningBadIndex { get; }
    public static string TraceUAWarningFieldConversion { get; }
    public static string TraceUAWarningNoIndex { get; }
    public static string TraceUAWarningSkippedColumns { get; }
    public static string TraceUAWarningSkippedRows { get; }
    public static string TraceWarning { get; }
    public static string TypeIsNotCommandInterceptor { get; }
    public static string TypeIsNotExceptionInterceptor { get; }
    public static string UnableToConnectToHost { get; }
    public static string UnableToCreateAuthPlugin { get; }
    public static string UnableToDeriveParameters { get; }
    public static string UnableToEnableQueryAnalysis { get; }
    public static string UnableToEnumerateUDF { get; }
    public static string UnableToExecuteSP { get; }
    public static string UnableToParseFK { get; }
    public static string UnableToRetrieveParameters { get; }
    public static string UnableToStartSecondAsyncOp { get; }
    public static string UnixSocketsNotSupported { get; }
    public static string UnknownAuthenticationMethod { get; }
    public static string UnknownConnectionProtocol { get; }
    public static string ValueNotCorrectType { get; }
    public static string ValueNotSupportedForGuid { get; }
    public static string WinAuthNotSupportOnPlatform { get; }
    public static string WriteToStreamFailed { get; }
    public static string WrongParameterName { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AdapterIsNull();
    public static string get_AdapterSelectIsNull();
    public static string get_AttemptToAccessBeforeRead();
    public static string get_AuthenticationFailed();
    public static string get_AuthenticationMethodNotSupported();
    public static string get_BadVersionFormat();
    public static string get_BufferCannotBeNull();
    public static string get_BufferNotLargeEnough();
    public static string get_CancelNeeds50();
    public static string get_CancelNotSupported();
    public static string get_CanNotDeriveParametersForTextCommands();
    public static string get_CBMultiTableNotSupported();
    public static string get_CBNoKeyColumn();
    public static string get_ChaosNotSupported();
    public static string get_CommandTextNotInitialized();
    public static string get_ConnectionAlreadyOpen();
    public static string get_ConnectionBroken();
    public static string get_ConnectionMustBeOpen();
    public static string get_ConnectionNotOpen();
    public static string get_ConnectionNotSet();
    public static string get_CouldNotFindColumnName();
    public static string get_CountCannotBeNegative();
    public static string get_CSNoSetLength();
    public static string get_DataNotInSupportedFormat();
    public static string get_DataReaderOpen();
    public static string get_DefaultEncodingNotFound();
    public static string get_DistributedTxnNotSupported();
    public static string get_ErrorCreatingSocket();
    public static string get_FatalErrorDuringExecute();
    public static string get_FatalErrorDuringRead();
    public static string get_FatalErrorReadingResult();
    public static string get_FileBasedCertificateNotSupported();
    public static string get_FromAndLengthTooBig();
    public static string get_FromIndexMustBeValid();
    public static string get_GetHostEntryFailed();
    public static string get_HardProcQuery();
    public static string get_ImproperValueFormat();
    public static string get_IncorrectTransmission();
    public static string get_IndexAndLengthTooBig();
    public static string get_IndexMustBeValid();
    public static string get_InvalidColumnOrdinal();
    public static string get_InvalidConnectionStringValue();
    public static string get_InvalidMicrosecondValue();
    public static string get_InvalidMillisecondValue();
    public static string get_InvalidProcName();
    public static string get_InvalidValueForBoolean();
    public static string get_KeywordNoNull();
    public static string get_KeywordNotSupported();
    public static string get_keywords();
    public static string get_MixedParameterNamingNotAllowed();
    public static string get_MoreThanOneOPRow();
    public static string get_MultipleConnectionsInTransactionNotSupported();
    public static string get_NamedPipeNoSeek();
    public static string get_NamedPipeNoSetLength();
    public static string get_NewValueShouldBeMySqlParameter();
    public static string get_NextResultIsClosed();
    public static string get_NoBodiesAndTypeNotSet();
    public static string get_NoNestedTransactions();
    public static string get_NoServerSSLSupport();
    public static string get_NoUnixSocketsOnWindows();
    public static string get_NoWindowsIdentity();
    public static string get_ObjectDisposed();
    public static string get_OffsetCannotBeNegative();
    public static string get_OffsetMustBeValid();
    public static string get_OldPasswordsNotSupported();
    public static string get_ParameterAlreadyDefined();
    public static string get_ParameterCannotBeNegative();
    public static string get_ParameterCannotBeNull();
    public static string get_ParameterIndexNotFound();
    public static string get_ParameterIsInvalid();
    public static string get_ParameterMustBeDefined();
    public static string get_ParameterNotFoundDuringPrepare();
    public static string get_PasswordMustHaveLegalChars();
    public static string get_PerfMonCategoryHelp();
    public static string get_PerfMonCategoryName();
    public static string get_PerfMonHardProcHelp();
    public static string get_PerfMonHardProcName();
    public static string get_PerfMonSoftProcHelp();
    public static string get_PerfMonSoftProcName();
    public static string get_ProcAndFuncSameName();
    public static string get_QueryTooLarge();
    public static string get_ReadFromStreamFailed();
    public static string get_ReadingPriorColumnUsingSeqAccess();
    public static string get_ReplicatedConnectionsAllowOnlyReadonlyStatements();
    public static string get_Replication_ConnectionAttemptFailed();
    public static string get_Replication_NoAvailableServer();
    public static string get_ReplicationGroupNotFound();
    public static string get_ReplicationServerNotFound();
    public static string get_RoutineNotFound();
    public static string get_RoutineRequiresReturnParameter();
    public static string get_ServerTooOld();
    public static string get_SnapshotNotSupported();
    public static string get_SocketNoSeek();
    public static string get_SoftProcQuery();
    public static string get_SPNotSupported();
    public static string get_StreamAlreadyClosed();
    public static string get_StreamNoRead();
    public static string get_StreamNoWrite();
    public static string get_Timeout();
    public static string get_TimeoutGettingConnection();
    public static string get_TraceCloseConnection();
    public static string get_TraceErrorMoreThanMaxValueConnections();
    public static string get_TraceFetchError();
    public static string get_TraceOpenConnection();
    public static string get_TraceOpenResultError();
    public static string get_TraceQueryDone();
    public static string get_TraceQueryNormalized();
    public static string get_TraceQueryOpened();
    public static string get_TraceResult();
    public static string get_TraceResultClosed();
    public static string get_TraceSetDatabase();
    public static string get_TraceStatementClosed();
    public static string get_TraceStatementExecuted();
    public static string get_TraceStatementPrepared();
    public static string get_TraceUAWarningBadIndex();
    public static string get_TraceUAWarningFieldConversion();
    public static string get_TraceUAWarningNoIndex();
    public static string get_TraceUAWarningSkippedColumns();
    public static string get_TraceUAWarningSkippedRows();
    public static string get_TraceWarning();
    public static string get_TypeIsNotCommandInterceptor();
    public static string get_TypeIsNotExceptionInterceptor();
    public static string get_UnableToConnectToHost();
    public static string get_UnableToCreateAuthPlugin();
    public static string get_UnableToDeriveParameters();
    public static string get_UnableToEnableQueryAnalysis();
    public static string get_UnableToEnumerateUDF();
    public static string get_UnableToExecuteSP();
    public static string get_UnableToParseFK();
    public static string get_UnableToRetrieveParameters();
    public static string get_UnableToStartSecondAsyncOp();
    public static string get_UnixSocketsNotSupported();
    public static string get_UnknownAuthenticationMethod();
    public static string get_UnknownConnectionProtocol();
    public static string get_ValueNotCorrectType();
    public static string get_ValueNotSupportedForGuid();
    public static string get_WinAuthNotSupportOnPlatform();
    public static string get_WriteToStreamFailed();
    public static string get_WrongParameterName();
}
internal static class MySql.Data.MySqlClient.Replication.ReplicationManager : object {
    private static List`1<ReplicationServerGroup> groups;
    private static object thisLock;
    [CompilerGeneratedAttribute]
private static IList`1<ReplicationServerGroup> <Groups>k__BackingField;
    internal static IList`1<ReplicationServerGroup> Groups { get; private set; }
    private static ReplicationManager();
    [CompilerGeneratedAttribute]
internal static IList`1<ReplicationServerGroup> get_Groups();
    [CompilerGeneratedAttribute]
private static void set_Groups(IList`1<ReplicationServerGroup> value);
    internal static ReplicationServerGroup AddGroup(string name, int retryTime);
    internal static ReplicationServerGroup AddGroup(string name, string groupType, int retryTime);
    internal static ReplicationServer GetServer(string groupName, bool isMaster);
    internal static ReplicationServerGroup GetGroup(string groupName);
    internal static bool IsReplicationGroup(string groupName);
    internal static void GetNewConnection(string groupName, bool master, MySqlConnection connection);
}
public class MySql.Data.MySqlClient.Replication.ReplicationRoundRobinServerGroup : ReplicationServerGroup {
    private int nextServer;
    public ReplicationRoundRobinServerGroup(string name, int retryTime);
    protected internal virtual ReplicationServer GetServer(bool isMaster);
}
public class MySql.Data.MySqlClient.Replication.ReplicationServer : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMaster>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAvailable>k__BackingField;
    public string Name { get; private set; }
    public bool IsMaster { get; private set; }
    public string ConnectionString { get; internal set; }
    public bool IsAvailable { get; public set; }
    public ReplicationServer(string name, bool isMaster, string connectionString);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsMaster();
    [CompilerGeneratedAttribute]
private void set_IsMaster(bool value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
internal void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAvailable();
    [CompilerGeneratedAttribute]
public void set_IsAvailable(bool value);
}
public abstract class MySql.Data.MySqlClient.Replication.ReplicationServerGroup : object {
    protected List`1<ReplicationServer> servers;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplicationServer> <Servers>k__BackingField;
    public string Name { get; protected set; }
    public int RetryTime { get; protected set; }
    protected IList`1<ReplicationServer> Servers { get; private set; }
    public ReplicationServerGroup(string name, int retryTime);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_RetryTime();
    [CompilerGeneratedAttribute]
protected void set_RetryTime(int value);
    [CompilerGeneratedAttribute]
protected IList`1<ReplicationServer> get_Servers();
    [CompilerGeneratedAttribute]
private void set_Servers(IList`1<ReplicationServer> value);
    protected internal ReplicationServer AddServer(string name, bool isMaster, string connectionString);
    protected internal void RemoveServer(string name);
    protected internal ReplicationServer GetServer(string name);
    protected internal abstract virtual ReplicationServer GetServer(bool isMaster);
    protected internal virtual ReplicationServer GetServer(bool isMaster, MySqlConnectionStringBuilder settings);
    protected internal virtual void HandleFailover(ReplicationServer server);
    protected internal virtual void HandleFailover(ReplicationServer server, Exception exception);
}
public class MySql.Data.MySqlClient.ReplicationConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("ServerGroups")]
[ConfigurationCollectionAttribute("MySql.Data.MySqlClient.ReplicationServerGroupConfigurationElement")]
public GenericConfigurationElementCollection`1<ReplicationServerGroupConfigurationElement> ServerGroups { get; }
    public GenericConfigurationElementCollection`1<ReplicationServerGroupConfigurationElement> get_ServerGroups();
}
public class MySql.Data.MySqlClient.ReplicationServerConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("IsMaster")]
public bool IsMaster { get; public set; }
    [ConfigurationPropertyAttribute("connectionstring")]
public string ConnectionString { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsMaster();
    public void set_IsMaster(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
}
public class MySql.Data.MySqlClient.ReplicationServerGroupConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("groupType")]
public string GroupType { get; public set; }
    [ConfigurationPropertyAttribute("retryTime")]
public int RetryTime { get; public set; }
    [ConfigurationPropertyAttribute("Servers")]
[ConfigurationCollectionAttribute("MySql.Data.MySqlClient.ReplicationServerConfigurationElement")]
public GenericConfigurationElementCollection`1<ReplicationServerConfigurationElement> Servers { get; }
    public string get_Name();
    public void set_Name(string value);
    public string get_GroupType();
    public void set_GroupType(string value);
    public int get_RetryTime();
    public void set_RetryTime(int value);
    public GenericConfigurationElementCollection`1<ReplicationServerConfigurationElement> get_Servers();
}
[DefaultMemberAttribute("Item")]
internal class MySql.Data.MySqlClient.ResultSet : object {
    private Driver driver;
    private bool hasRows;
    private Boolean[] uaFieldsUsed;
    private MySqlField[] fields;
    private IMySqlValue[] values;
    private Dictionary`2<string, int> fieldHashCS;
    private Dictionary`2<string, int> fieldHashCI;
    private int rowIndex;
    private bool readDone;
    private bool isSequential;
    private int seqIndex;
    private bool isOutputParameters;
    private int affectedRows;
    private long insertedId;
    private int statementId;
    private int totalRows;
    private int skippedRows;
    private bool cached;
    private List`1<IMySqlValue[]> cachedValues;
    public bool HasRows { get; }
    public int Size { get; }
    public MySqlField[] Fields { get; }
    public IMySqlValue[] Values { get; }
    public bool IsOutputParameters { get; public set; }
    public int AffectedRows { get; }
    public long InsertedId { get; }
    public int TotalRows { get; }
    public int SkippedRows { get; }
    public bool Cached { get; public set; }
    public IMySqlValue Item { get; }
    public ResultSet(int affectedRows, long insertedId);
    public ResultSet(Driver d, int statementId, int numCols);
    public bool get_HasRows();
    public int get_Size();
    public MySqlField[] get_Fields();
    public IMySqlValue[] get_Values();
    public bool get_IsOutputParameters();
    public void set_IsOutputParameters(bool value);
    public int get_AffectedRows();
    public long get_InsertedId();
    public int get_TotalRows();
    public int get_SkippedRows();
    public bool get_Cached();
    public void set_Cached(bool value);
    public int GetOrdinal(string name);
    public IMySqlValue get_Item(int index);
    private bool GetNextRow();
    public bool NextRow(CommandBehavior behavior);
    private bool CachedNextRow(CommandBehavior behavior);
    public void Close();
    private void CacheClose();
    private void CacheReset();
    public bool FieldRead(int index);
    public void SetValueObject(int i, IMySqlValue valueObject);
    private bool IsOutputParameterResultSet();
    private void LoadColumns(int numCols);
    private void ReadColumnData(bool outputParms);
}
public class MySql.Data.MySqlClient.SchemaColumn : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Name { get; public set; }
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
internal class MySql.Data.MySqlClient.SchemaProvider : object {
    protected MySqlConnection connection;
    public static string MetaCollection;
    public SchemaProvider(MySqlConnection connectionToUse);
    private static SchemaProvider();
    public virtual MySqlSchemaCollection GetSchema(string collection, String[] restrictions);
    public virtual MySqlSchemaCollection GetDatabases(String[] restrictions);
    public virtual MySqlSchemaCollection GetTables(String[] restrictions);
    protected void QuoteDefaultValues(MySqlSchemaCollection schemaCollection);
    public virtual MySqlSchemaCollection GetColumns(String[] restrictions);
    private void LoadTableColumns(MySqlSchemaCollection schemaCollection, string schema, string tableName, string columnRestriction);
    private static void ParseColumnRow(MySqlSchemaRow row);
    public virtual MySqlSchemaCollection GetIndexes(String[] restrictions);
    public virtual MySqlSchemaCollection GetIndexColumns(String[] restrictions);
    public virtual MySqlSchemaCollection GetForeignKeys(String[] restrictions);
    public virtual MySqlSchemaCollection GetForeignKeyColumns(String[] restrictions);
    private string GetSqlMode();
    private void GetForeignKeysOnTable(MySqlSchemaCollection fkTable, MySqlSchemaRow tableToParse, string filterName, bool includeColumns);
    private static void ParseConstraint(MySqlSchemaCollection fkTable, MySqlSchemaRow table, MySqlTokenizer tokenizer, bool includeColumns);
    private static List`1<string> ParseColumns(MySqlTokenizer tokenizer);
    private static void ProcessColumns(MySqlSchemaCollection fkTable, MySqlSchemaRow row, List`1<string> srcColumns, List`1<string> targetColumns);
    public virtual MySqlSchemaCollection GetUsers(String[] restrictions);
    public virtual MySqlSchemaCollection GetProcedures(String[] restrictions);
    protected virtual MySqlSchemaCollection GetCollections();
    private MySqlSchemaCollection GetDataSourceInformation();
    private static MySqlSchemaCollection GetDataTypes();
    protected virtual MySqlSchemaCollection GetRestrictions();
    private static MySqlSchemaCollection GetReservedWords();
    protected static void FillTable(MySqlSchemaCollection dt, Object[][] data);
    private void FindTables(MySqlSchemaCollection schema, String[] restrictions);
    private static string GetString(MySqlDataReader reader, int index);
    public virtual MySqlSchemaCollection GetUDF(String[] restrictions);
    protected virtual MySqlSchemaCollection GetSchemaInternal(string collection, String[] restrictions);
    internal String[] CleanRestrictions(String[] restrictionValues);
    protected MySqlSchemaCollection QueryCollection(string name, string sql);
}
internal class MySql.Data.MySqlClient.ScriptStatement : ValueType {
    public string text;
    public int line;
    public int position;
}
[FlagsAttribute]
internal enum MySql.Data.MySqlClient.ServerStatusFlags : Enum {
    public int value__;
    public static ServerStatusFlags InTransaction;
    public static ServerStatusFlags AutoCommitMode;
    public static ServerStatusFlags MoreResults;
    public static ServerStatusFlags AnotherQuery;
    public static ServerStatusFlags BadIndex;
    public static ServerStatusFlags NoIndex;
    public static ServerStatusFlags CursorExists;
    public static ServerStatusFlags LastRowSent;
    public static ServerStatusFlags OutputParameters;
}
internal class MySql.Data.MySqlClient.StandardExceptionInterceptor : BaseExceptionInterceptor {
    public virtual Exception InterceptException(Exception exception);
}
internal abstract class MySql.Data.MySqlClient.Statement : object {
    protected MySqlCommand command;
    protected string commandText;
    private List`1<MySqlPacket> buffers;
    public string ResolvedCommandText { get; }
    protected Driver Driver { get; }
    protected MySqlConnection Connection { get; }
    protected MySqlParameterCollection Parameters { get; }
    private Statement(MySqlCommand cmd);
    public Statement(MySqlCommand cmd, string text);
    public virtual string get_ResolvedCommandText();
    protected Driver get_Driver();
    protected MySqlConnection get_Connection();
    protected MySqlParameterCollection get_Parameters();
    public virtual void Close(MySqlDataReader reader);
    public virtual void Resolve(bool preparing);
    public virtual void Execute();
    public virtual bool ExecuteNext();
    protected virtual void BindParameters();
    private void InternalBindParameters(string sql, MySqlParameterCollection parameters, MySqlPacket packet);
    protected virtual bool ShouldIgnoreMissingParameter(string parameterName);
    private bool SerializeParameter(MySqlParameterCollection parameters, MySqlPacket packet, string parmName, int parameterIndex);
}
internal class MySql.Data.MySqlClient.StoredProcedure : PreparableStatement {
    internal static string ParameterPrefix;
    private string outSelect;
    private string resolvedCommandText;
    private bool serverProvidingOutputParameters;
    public bool ServerProvidingOutputParameters { get; }
    public string ResolvedCommandText { get; }
    public StoredProcedure(MySqlCommand cmd, string text);
    private MySqlParameter GetReturnParameter();
    public bool get_ServerProvidingOutputParameters();
    public virtual string get_ResolvedCommandText();
    internal string GetCacheKey(string spName);
    private ProcedureCacheEntry GetParameters(string procName);
    public static string GetFlags(string dtd);
    private string FixProcedureName(string name);
    private MySqlParameter GetAndFixParameter(string spName, MySqlSchemaRow param, bool realAsFloat, MySqlParameter returnParameter);
    private MySqlParameterCollection CheckParameters(string spName);
    public virtual void Resolve(bool preparing);
    private string SetUserVariables(MySqlParameterCollection parms, bool preparing);
    private string CreateCallStatement(string spName, MySqlParameter returnParameter, MySqlParameterCollection parms);
    private string CreateOutputSelect(MySqlParameterCollection parms, bool preparing);
    internal void ProcessOutputParameters(MySqlDataReader reader);
    private void AdjustOutputTypes(MySqlDataReader reader);
    public virtual void Close(MySqlDataReader reader);
}
public class MySql.Data.MySqlClient.StringUtility : object {
    public static string ToUpperInvariant(string s);
    public static string ToLowerInvariant(string s);
}
internal class MySql.Data.MySqlClient.SystemPerformanceMonitor : PerformanceMonitor {
    private static PerformanceCounter procedureHardQueries;
    private static PerformanceCounter procedureSoftQueries;
    public SystemPerformanceMonitor(MySqlConnection connection);
    public void AddHardProcedureQuery();
    public void AddSoftProcedureQuery();
}
internal class MySql.Data.MySqlClient.TableCache : object {
    private static BaseTableCache cache;
    private static TableCache();
    public static void AddToCache(string commandText, ResultSet resultSet);
    public static ResultSet RetrieveFromCache(string commandText, int cacheAge);
    public static void RemoveFromCache(string commandText);
    public static void DumpCache();
}
internal class MySql.Data.MySqlClient.TimedStream : Stream {
    private Stream baseStream;
    private int timeout;
    private int lastReadTimeout;
    private int lastWriteTimeout;
    private LowResolutionStopwatch stopwatch;
    private bool isClosed;
    internal bool IsClosed { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public TimedStream(Stream baseStream);
    internal bool get_IsClosed();
    private bool ShouldResetStreamTimeout(int currentValue, int newValue);
    private void StartTimer(IOKind op);
    private void StopTimer();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual void Close();
    public void ResetTimeout(int newTimeout);
    private void HandleException(Exception e);
}
internal class MySql.Data.MySqlClient.TracingDriver : Driver {
    private static long driverCounter;
    private long driverId;
    private ResultSet activeResult;
    private int rowSizeInBytes;
    public TracingDriver(MySqlConnectionStringBuilder settings);
    public virtual void Open();
    public virtual void Close();
    public virtual void SendQuery(MySqlPacket p);
    protected virtual int GetResult(int statementId, Int32& affectedRows, Int64& insertedId);
    public virtual ResultSet NextResult(int statementId, bool force);
    public virtual int PrepareStatement(string sql, MySqlField[]& parameters);
    public virtual void CloseStatement(int id);
    public virtual void SetDatabase(string dbName);
    public virtual void ExecuteStatement(MySqlPacket packetToExecute);
    public virtual bool FetchDataRow(int statementId, int columns);
    public virtual void CloseQuery(MySqlConnection connection, int statementId);
    public virtual List`1<MySqlError> ReportWarnings(MySqlConnection connection);
    private bool AllFieldsAccessed(ResultSet rs);
    private void ReportUsageAdvisorWarnings(int statementId, ResultSet rs);
}
public enum MySql.Data.MySqlClient.UsageAdvisorWarningFlags : Enum {
    public int value__;
    public static UsageAdvisorWarningFlags NoIndex;
    public static UsageAdvisorWarningFlags BadIndex;
    public static UsageAdvisorWarningFlags SkippedRows;
    public static UsageAdvisorWarningFlags SkippedColumns;
    public static UsageAdvisorWarningFlags FieldConversion;
}
internal interface MySql.Data.Types.IMySqlValue {
    public bool IsNull { get; }
    public MySqlDbType MySqlDbType { get; }
    public object Value { get; }
    public Type SystemType { get; }
    public string MySqlTypeName { get; }
    public abstract virtual bool get_IsNull();
    public abstract virtual MySqlDbType get_MySqlDbType();
    public abstract virtual object get_Value();
    public abstract virtual Type get_SystemType();
    public abstract virtual string get_MySqlTypeName();
    public abstract virtual void WriteValue(MySqlPacket packet, bool binary, object value, int length);
    public abstract virtual IMySqlValue ReadValue(MySqlPacket packet, long length, bool isNull);
    public abstract virtual void SkipValue(MySqlPacket packet);
}
internal class MySql.Data.Types.MetaData : object {
    public static bool IsNumericType(string typename);
    public static bool IsTextType(string typename);
    public static bool SupportScale(string typename);
    public static MySqlDbType NameToType(string typeName, bool unsigned, bool realAsFloat, MySqlConnection connection);
}
internal class MySql.Data.Types.MySqlBinary : ValueType {
    private MySqlDbType type;
    private Byte[] mValue;
    private bool isNull;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public Byte[] Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlBinary(MySqlDbType type, bool isNull);
    public MySqlBinary(MySqlDbType type, Byte[] val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public Byte[] get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private static void EscapeByteArray(Byte[] bytes, int length, MySqlPacket packet);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    public static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlBit : ValueType {
    private ulong mValue;
    private bool isNull;
    private bool readAsString;
    public bool ReadAsString { get; public set; }
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlBit(bool isnull);
    public bool get_ReadAsString();
    public void set_ReadAsString(bool value);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    public sealed virtual void WriteValue(MySqlPacket packet, bool binary, object value, int length);
    public sealed virtual IMySqlValue ReadValue(MySqlPacket packet, long length, bool isNull);
    public sealed virtual void SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlByte : ValueType {
    private sbyte mValue;
    private bool isNull;
    private bool treatAsBool;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public sbyte Value { get; public set; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    internal bool TreatAsBoolean { get; internal set; }
    public MySqlByte(bool isNull);
    public MySqlByte(sbyte val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public sbyte get_Value();
    public void set_Value(sbyte value);
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal bool get_TreatAsBoolean();
    internal void set_TreatAsBoolean(bool value);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
public class MySql.Data.Types.MySqlConversionException : Exception {
    public MySqlConversionException(string msg);
}
public class MySql.Data.Types.MySqlDateTime : ValueType {
    private bool isNull;
    private MySqlDbType type;
    private int year;
    private int month;
    private int day;
    private int hour;
    private int minute;
    private int second;
    private int millisecond;
    private int microsecond;
    public int TimezoneOffset;
    public bool IsValidDateTime { get; }
    public int Year { get; public set; }
    public int Month { get; public set; }
    public int Day { get; public set; }
    public int Hour { get; public set; }
    public int Minute { get; public set; }
    public int Second { get; public set; }
    public int Millisecond { get; public set; }
    public int Microsecond { get; public set; }
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public DateTime Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlDateTime(int year, int month, int day, int hour, int minute, int second, int microsecond);
    public MySqlDateTime(DateTime dt);
    public MySqlDateTime(MySqlDateTime mdt);
    public MySqlDateTime(string dateTime);
    internal MySqlDateTime(MySqlDbType type, int year, int month, int day, int hour, int minute, int second, int microsecond);
    internal MySqlDateTime(MySqlDbType type, bool isNull);
    internal MySqlDateTime(MySqlDbType type, DateTime val);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    public bool get_IsValidDateTime();
    public int get_Year();
    public void set_Year(int value);
    public int get_Month();
    public void set_Month(int value);
    public int get_Day();
    public void set_Day(int value);
    public int get_Hour();
    public void set_Hour(int value);
    public int get_Minute();
    public void set_Minute(int value);
    public int get_Second();
    public void set_Second(int value);
    public int get_Millisecond();
    public void set_Millisecond(int value);
    public int get_Microsecond();
    public void set_Microsecond(int value);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public DateTime get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private void SerializeText(MySqlPacket packet, MySqlDateTime value);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object value, int length);
    internal static MySqlDateTime Parse(string s);
    internal static MySqlDateTime Parse(string s, DBVersion version);
    private MySqlDateTime ParseMySql(string s);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    public DateTime GetDateTime();
    private static string FormatDateCustom(string format, int monthVal, int dayVal, int yearVal);
    public virtual string ToString();
    public static DateTime op_Explicit(MySqlDateTime val);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
}
public class MySql.Data.Types.MySqlDecimal : ValueType {
    private byte precision;
    private byte scale;
    private string mValue;
    private bool isNull;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public decimal Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    internal MySqlDecimal(bool isNull);
    internal MySqlDecimal(string val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    public byte get_Precision();
    public void set_Precision(byte value);
    public byte get_Scale();
    public void set_Scale(byte value);
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public decimal get_Value();
    public double ToDouble();
    public virtual string ToString();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlDouble : ValueType {
    private double mValue;
    private bool isNull;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public double Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlDouble(bool isNull);
    public MySqlDouble(double val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public double get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
public class MySql.Data.Types.MySqlGeometry : ValueType {
    private static int GEOMETRY_LENGTH;
    private MySqlDbType _type;
    private double _xValue;
    private double _yValue;
    private int _srid;
    private Byte[] _valBinary;
    private bool _isNull;
    public Nullable`1<double> XCoordinate { get; }
    public Nullable`1<double> YCoordinate { get; }
    public Nullable`1<int> SRID { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    public bool IsNull { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public Byte[] Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlGeometry(bool isNull);
    public MySqlGeometry(double xValue, double yValue);
    public MySqlGeometry(double xValue, double yValue, int srid);
    internal MySqlGeometry(MySqlDbType type, bool isNull);
    internal MySqlGeometry(MySqlDbType type, double xValue, double yValue, int srid);
    public MySqlGeometry(MySqlDbType type, Byte[] val);
    public Nullable`1<double> get_XCoordinate();
    public Nullable`1<double> get_YCoordinate();
    public Nullable`1<int> get_SRID();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    public sealed virtual bool get_IsNull();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public Byte[] get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private static void EscapeByteArray(Byte[] bytes, int length, MySqlPacket packet);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    public virtual string ToString();
    public static MySqlGeometry Parse(string value);
    public static bool TryParse(string value, MySqlGeometry& mySqlGeometryValue);
    public static void SetDSInfo(MySqlSchemaCollection dsTable);
    public string GetWKT();
}
internal class MySql.Data.Types.MySqlGuid : ValueType {
    private Guid mValue;
    private bool isNull;
    private Byte[] bytes;
    private bool oldGuids;
    public Byte[] Bytes { get; }
    public bool OldGuids { get; public set; }
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public Guid Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlGuid(Byte[] buff);
    public Byte[] get_Bytes();
    public bool get_OldGuids();
    public void set_OldGuids(bool value);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public Guid get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private void WriteOldGuid(MySqlPacket packet, Guid guid, bool binary);
    private static void EscapeByteArray(Byte[] bytes, int length, MySqlPacket packet);
    private MySqlGuid ReadOldGuid(MySqlPacket packet, long length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    public static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlInt16 : ValueType {
    private short mValue;
    private bool isNull;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public short Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlInt16(bool isNull);
    public MySqlInt16(short val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public short get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlInt32 : ValueType {
    private int mValue;
    private bool isNull;
    private bool is24Bit;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public int Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    private MySqlInt32(MySqlDbType type);
    public MySqlInt32(MySqlDbType type, bool isNull);
    public MySqlInt32(MySqlDbType type, int val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public int get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlInt64 : ValueType {
    private long mValue;
    private bool isNull;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public long Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlInt64(bool isNull);
    public MySqlInt64(long val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public long get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlSingle : ValueType {
    private float mValue;
    private bool isNull;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public float Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlSingle(bool isNull);
    public MySqlSingle(float val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public float get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlString : ValueType {
    private string mValue;
    private bool isNull;
    private MySqlDbType type;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public string Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlString(MySqlDbType type, bool isNull);
    public MySqlString(MySqlDbType type, string val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public string get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlTimeSpan : ValueType {
    private TimeSpan mValue;
    private bool isNull;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public TimeSpan Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlTimeSpan(bool isNull);
    public MySqlTimeSpan(TimeSpan val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public TimeSpan get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
    public virtual string ToString();
    private void ParseMySql(string s);
}
internal class MySql.Data.Types.MySqlUByte : ValueType {
    private byte mValue;
    private bool isNull;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public byte Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlUByte(bool isNull);
    public MySqlUByte(byte val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public byte get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlUInt16 : ValueType {
    private ushort mValue;
    private bool isNull;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public ushort Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlUInt16(bool isNull);
    public MySqlUInt16(ushort val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public ushort get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlUInt32 : ValueType {
    private UInt32 mValue;
    private bool isNull;
    private bool is24Bit;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public UInt32 Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    private MySqlUInt32(MySqlDbType type);
    public MySqlUInt32(MySqlDbType type, bool isNull);
    public MySqlUInt32(MySqlDbType type, UInt32 val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public UInt32 get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object v, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlUInt64 : ValueType {
    private ulong mValue;
    private bool isNull;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public ulong Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlUInt64(bool isNull);
    public MySqlUInt64(ulong val);
    public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public ulong get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    private sealed virtual override void MySql.Data.Types.IMySqlValue.WriteValue(MySqlPacket packet, bool binary, object val, int length);
    private sealed virtual override IMySqlValue MySql.Data.Types.IMySqlValue.ReadValue(MySqlPacket packet, long length, bool nullVal);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class zlib.Adler32 : object {
    private static int BASE;
    private static int NMAX;
    internal long adler32(long adler, Byte[] buf, int index, int len);
}
internal class zlib.Deflate : object {
    private static int MAX_MEM_LEVEL;
    private static int Z_DEFAULT_COMPRESSION;
    private static int MAX_WBITS;
    private static int DEF_MEM_LEVEL;
    private static int STORED;
    private static int FAST;
    private static int SLOW;
    private static int NeedMore;
    private static int BlockDone;
    private static int FinishStarted;
    private static int FinishDone;
    private static int PRESET_DICT;
    private static int Z_FILTERED;
    private static int Z_HUFFMAN_ONLY;
    private static int Z_DEFAULT_STRATEGY;
    private static int Z_NO_FLUSH;
    private static int Z_PARTIAL_FLUSH;
    private static int Z_SYNC_FLUSH;
    private static int Z_FULL_FLUSH;
    private static int Z_FINISH;
    private static int Z_OK;
    private static int Z_STREAM_END;
    private static int Z_NEED_DICT;
    private static int Z_ERRNO;
    private static int Z_STREAM_ERROR;
    private static int Z_DATA_ERROR;
    private static int Z_MEM_ERROR;
    private static int Z_BUF_ERROR;
    private static int Z_VERSION_ERROR;
    private static int INIT_STATE;
    private static int BUSY_STATE;
    private static int FINISH_STATE;
    private static int Z_DEFLATED;
    private static int STORED_BLOCK;
    private static int STATIC_TREES;
    private static int DYN_TREES;
    private static int Z_BINARY;
    private static int Z_ASCII;
    private static int Z_UNKNOWN;
    private static int Buf_size;
    private static int REP_3_6;
    private static int REPZ_3_10;
    private static int REPZ_11_138;
    private static int MIN_MATCH;
    private static int MAX_MATCH;
    private static int MAX_BITS;
    private static int D_CODES;
    private static int BL_CODES;
    private static int LENGTH_CODES;
    private static int LITERALS;
    private static int END_BLOCK;
    private static Config[] config_table;
    private static String[] z_errmsg;
    private static int MIN_LOOKAHEAD;
    private static int L_CODES;
    private static int HEAP_SIZE;
    internal ZStream strm;
    internal int status;
    internal Byte[] pending_buf;
    internal int pending_buf_size;
    internal int pending_out;
    internal int pending;
    internal int noheader;
    internal byte data_type;
    internal byte method;
    internal int last_flush;
    internal int w_size;
    internal int w_bits;
    internal int w_mask;
    internal Byte[] window;
    internal int window_size;
    internal Int16[] prev;
    internal Int16[] head;
    internal int ins_h;
    internal int hash_size;
    internal int hash_bits;
    internal int hash_mask;
    internal int hash_shift;
    internal int block_start;
    internal int match_length;
    internal int prev_match;
    internal int match_available;
    internal int strstart;
    internal int match_start;
    internal int lookahead;
    internal int prev_length;
    internal int max_chain_length;
    internal int max_lazy_match;
    internal int level;
    internal int strategy;
    internal int good_match;
    internal int nice_match;
    internal Int16[] dyn_ltree;
    internal Int16[] dyn_dtree;
    internal Int16[] bl_tree;
    internal Tree l_desc;
    internal Tree d_desc;
    internal Tree bl_desc;
    internal Int16[] bl_count;
    internal Int32[] heap;
    internal int heap_len;
    internal int heap_max;
    internal Byte[] depth;
    internal int l_buf;
    internal int lit_bufsize;
    internal int last_lit;
    internal int d_buf;
    internal int opt_len;
    internal int static_len;
    internal int matches;
    internal int last_eob_len;
    internal short bi_buf;
    internal int bi_valid;
    private static Deflate();
    internal void lm_init();
    internal void tr_init();
    internal void init_block();
    internal void pqdownheap(Int16[] tree, int k);
    internal static bool smaller(Int16[] tree, int n, int m, Byte[] depth);
    internal void scan_tree(Int16[] tree, int max_code);
    internal int build_bl_tree();
    internal void send_all_trees(int lcodes, int dcodes, int blcodes);
    internal void send_tree(Int16[] tree, int max_code);
    internal void put_byte(Byte[] p, int start, int len);
    internal void put_byte(byte c);
    internal void put_short(int w);
    internal void putShortMSB(int b);
    internal void send_code(int c, Int16[] tree);
    internal void send_bits(int value_Renamed, int length);
    internal void _tr_align();
    internal bool _tr_tally(int dist, int lc);
    internal void compress_block(Int16[] ltree, Int16[] dtree);
    internal void set_data_type();
    internal void bi_flush();
    internal void bi_windup();
    internal void copy_block(int buf, int len, bool header);
    internal void flush_block_only(bool eof);
    internal int deflate_stored(int flush);
    internal void _tr_stored_block(int buf, int stored_len, bool eof);
    internal void _tr_flush_block(int buf, int stored_len, bool eof);
    internal void fill_window();
    internal int deflate_fast(int flush);
    internal int deflate_slow(int flush);
    internal int longest_match(int cur_match);
    internal int deflateInit(ZStream strm, int level, int bits);
    internal int deflateInit(ZStream strm, int level);
    internal int deflateInit2(ZStream strm, int level, int method, int windowBits, int memLevel, int strategy);
    internal int deflateReset(ZStream strm);
    internal int deflateEnd();
    internal int deflateParams(ZStream strm, int _level, int _strategy);
    internal int deflateSetDictionary(ZStream strm, Byte[] dictionary, int dictLength);
    internal int deflate(ZStream strm, int flush);
}
internal class zlib.InfBlocks : object {
    private static int MANY;
    private static int Z_OK;
    private static int Z_STREAM_END;
    private static int Z_NEED_DICT;
    private static int Z_ERRNO;
    private static int Z_STREAM_ERROR;
    private static int Z_DATA_ERROR;
    private static int Z_MEM_ERROR;
    private static int Z_BUF_ERROR;
    private static int Z_VERSION_ERROR;
    private static int TYPE;
    private static int LENS;
    private static int STORED;
    private static int TABLE;
    private static int BTREE;
    private static int DTREE;
    private static int CODES;
    private static int DRY;
    private static int DONE;
    private static int BAD;
    private static Int32[] inflate_mask;
    internal static Int32[] border;
    internal int mode;
    internal int left;
    internal int table;
    internal int index;
    internal Int32[] blens;
    internal Int32[] bb;
    internal Int32[] tb;
    internal InfCodes codes;
    internal int last;
    internal int bitk;
    internal int bitb;
    internal Int32[] hufts;
    internal Byte[] window;
    internal int end;
    internal int read;
    internal int write;
    internal object checkfn;
    internal long check;
    internal InfBlocks(ZStream z, object checkfn, int w);
    private static InfBlocks();
    internal void reset(ZStream z, Int64[] c);
    internal int proc(ZStream z, int r);
    internal void free(ZStream z);
    internal void set_dictionary(Byte[] d, int start, int n);
    internal int sync_point();
    internal int inflate_flush(ZStream z, int r);
}
internal class zlib.InfCodes : object {
    private static int Z_OK;
    private static int Z_STREAM_END;
    private static int Z_NEED_DICT;
    private static int Z_ERRNO;
    private static int Z_STREAM_ERROR;
    private static int Z_DATA_ERROR;
    private static int Z_MEM_ERROR;
    private static int Z_BUF_ERROR;
    private static int Z_VERSION_ERROR;
    private static int START;
    private static int LEN;
    private static int LENEXT;
    private static int DIST;
    private static int DISTEXT;
    private static int COPY;
    private static int LIT;
    private static int WASH;
    private static int END;
    private static int BADCODE;
    private static Int32[] inflate_mask;
    internal int mode;
    internal int len;
    internal Int32[] tree;
    internal int tree_index;
    internal int need;
    internal int lit;
    internal int get_Renamed;
    internal int dist;
    internal byte lbits;
    internal byte dbits;
    internal Int32[] ltree;
    internal int ltree_index;
    internal Int32[] dtree;
    internal int dtree_index;
    internal InfCodes(int bl, int bd, Int32[] tl, int tl_index, Int32[] td, int td_index, ZStream z);
    internal InfCodes(int bl, int bd, Int32[] tl, Int32[] td, ZStream z);
    private static InfCodes();
    internal int proc(InfBlocks s, ZStream z, int r);
    internal void free(ZStream z);
    internal int inflate_fast(int bl, int bd, Int32[] tl, int tl_index, Int32[] td, int td_index, InfBlocks s, ZStream z);
}
internal class zlib.Inflate : object {
    private static int MAX_WBITS;
    private static int PRESET_DICT;
    internal static int Z_NO_FLUSH;
    internal static int Z_PARTIAL_FLUSH;
    internal static int Z_SYNC_FLUSH;
    internal static int Z_FULL_FLUSH;
    internal static int Z_FINISH;
    private static int Z_DEFLATED;
    private static int Z_OK;
    private static int Z_STREAM_END;
    private static int Z_NEED_DICT;
    private static int Z_ERRNO;
    private static int Z_STREAM_ERROR;
    private static int Z_DATA_ERROR;
    private static int Z_MEM_ERROR;
    private static int Z_BUF_ERROR;
    private static int Z_VERSION_ERROR;
    private static int METHOD;
    private static int FLAG;
    private static int DICT4;
    private static int DICT3;
    private static int DICT2;
    private static int DICT1;
    private static int DICT0;
    private static int BLOCKS;
    private static int CHECK4;
    private static int CHECK3;
    private static int CHECK2;
    private static int CHECK1;
    private static int DONE;
    private static int BAD;
    internal int mode;
    internal int method;
    internal Int64[] was;
    internal long need;
    internal int marker;
    internal int nowrap;
    internal int wbits;
    internal InfBlocks blocks;
    private static Byte[] mark;
    private static Inflate();
    internal int inflateReset(ZStream z);
    internal int inflateEnd(ZStream z);
    internal int inflateInit(ZStream z, int w);
    internal int inflate(ZStream z, int f);
    internal int inflateSetDictionary(ZStream z, Byte[] dictionary, int dictLength);
    internal int inflateSync(ZStream z);
    internal int inflateSyncPoint(ZStream z);
}
internal class zlib.InfTree : object {
    private static int MANY;
    private static int Z_OK;
    private static int Z_STREAM_END;
    private static int Z_NEED_DICT;
    private static int Z_ERRNO;
    private static int Z_STREAM_ERROR;
    private static int Z_DATA_ERROR;
    private static int Z_MEM_ERROR;
    private static int Z_BUF_ERROR;
    private static int Z_VERSION_ERROR;
    internal static int fixed_bl;
    internal static int fixed_bd;
    internal static int BMAX;
    internal static Int32[] fixed_tl;
    internal static Int32[] fixed_td;
    internal static Int32[] cplens;
    internal static Int32[] cplext;
    internal static Int32[] cpdist;
    internal static Int32[] cpdext;
    private static InfTree();
    internal static int huft_build(Int32[] b, int bindex, int n, int s, Int32[] d, Int32[] e, Int32[] t, Int32[] m, Int32[] hp, Int32[] hn, Int32[] v);
    internal static int inflate_trees_bits(Int32[] c, Int32[] bb, Int32[] tb, Int32[] hp, ZStream z);
    internal static int inflate_trees_dynamic(int nl, int nd, Int32[] c, Int32[] bl, Int32[] bd, Int32[] tl, Int32[] td, Int32[] hp, ZStream z);
    internal static int inflate_trees_fixed(Int32[] bl, Int32[] bd, Int32[][] tl, Int32[][] td, ZStream z);
}
internal class zlib.StaticTree : object {
    private static int MAX_BITS;
    private static int BL_CODES;
    private static int D_CODES;
    private static int LITERALS;
    private static int LENGTH_CODES;
    internal static int MAX_BL_BITS;
    private static int L_CODES;
    internal static Int16[] static_ltree;
    internal static Int16[] static_dtree;
    internal static StaticTree static_l_desc;
    internal static StaticTree static_d_desc;
    internal static StaticTree static_bl_desc;
    internal Int16[] static_tree;
    internal Int32[] extra_bits;
    internal int extra_base;
    internal int elems;
    internal int max_length;
    internal StaticTree(Int16[] static_tree, Int32[] extra_bits, int extra_base, int elems, int max_length);
    private static StaticTree();
}
internal class zlib.SupportClass : object {
    public static long Identity(long literal);
    public static ulong Identity(ulong literal);
    public static float Identity(float literal);
    public static double Identity(double literal);
    public static int URShift(int number, int bits);
    public static int URShift(int number, long bits);
    public static long URShift(long number, int bits);
    public static long URShift(long number, long bits);
    public static int ReadInput(Stream sourceStream, Byte[] target, int start, int count);
    public static int ReadInput(TextReader sourceTextReader, Byte[] target, int start, int count);
    public static Byte[] ToByteArray(string sourceString);
    public static Char[] ToCharArray(Byte[] byteArray);
    public static void Serialize(Stream stream, object objectToSend);
    public static void Serialize(BinaryWriter binaryWriter, object objectToSend);
    public static object Deserialize(BinaryReader binaryReader);
    public static void WriteStackTrace(Exception throwable, TextWriter stream);
}
internal class zlib.Tree : object {
    private static int MAX_BITS;
    private static int BL_CODES;
    private static int D_CODES;
    private static int LITERALS;
    private static int LENGTH_CODES;
    internal static int MAX_BL_BITS;
    internal static int END_BLOCK;
    internal static int REP_3_6;
    internal static int REPZ_3_10;
    internal static int REPZ_11_138;
    internal static int Buf_size;
    internal static int DIST_CODE_LEN;
    private static int L_CODES;
    private static int HEAP_SIZE;
    internal static Int32[] extra_lbits;
    internal static Int32[] extra_dbits;
    internal static Int32[] extra_blbits;
    internal static Byte[] bl_order;
    internal static Byte[] _dist_code;
    internal static Byte[] _length_code;
    internal static Int32[] base_length;
    internal static Int32[] base_dist;
    internal Int16[] dyn_tree;
    internal int max_code;
    internal StaticTree stat_desc;
    private static Tree();
    internal static int d_code(int dist);
    internal void gen_bitlen(Deflate s);
    internal void build_tree(Deflate s);
    internal static void gen_codes(Int16[] tree, int max_code, Int16[] bl_count);
    internal static int bi_reverse(int code, int len);
}
internal class zlib.ZInputStream : BinaryReader {
    public long maxInput;
    protected internal ZStream z;
    protected internal int bufsize;
    protected internal int flush;
    protected internal Byte[] buf;
    protected internal Byte[] buf1;
    protected internal bool compress;
    private Stream in_Renamed;
    private bool nomoreinput;
    public int FlushMode { get; public set; }
    public long TotalIn { get; }
    public long TotalOut { get; }
    public ZInputStream(Stream in_Renamed);
    public ZInputStream(Stream in_Renamed, int level);
    private void InitBlock();
    public virtual int get_FlushMode();
    public virtual void set_FlushMode(int value);
    public virtual long get_TotalIn();
    public virtual long get_TotalOut();
    public virtual int Read();
    public int read(Byte[] b, int off, int len);
    public long skip(long n);
    public virtual void Close();
}
internal class zlib.zlibConst : object {
    private static string version_Renamed_Field;
    public static int Z_NO_COMPRESSION;
    public static int Z_BEST_SPEED;
    public static int Z_BEST_COMPRESSION;
    public static int Z_DEFAULT_COMPRESSION;
    public static int Z_FILTERED;
    public static int Z_HUFFMAN_ONLY;
    public static int Z_DEFAULT_STRATEGY;
    public static int Z_NO_FLUSH;
    public static int Z_PARTIAL_FLUSH;
    public static int Z_SYNC_FLUSH;
    public static int Z_FULL_FLUSH;
    public static int Z_FINISH;
    public static int Z_OK;
    public static int Z_STREAM_END;
    public static int Z_NEED_DICT;
    public static int Z_ERRNO;
    public static int Z_STREAM_ERROR;
    public static int Z_DATA_ERROR;
    public static int Z_MEM_ERROR;
    public static int Z_BUF_ERROR;
    public static int Z_VERSION_ERROR;
    public static string version();
}
internal class zlib.ZOutputStream : Stream {
    protected internal ZStream z;
    protected internal int bufsize;
    protected internal int flush_Renamed_Field;
    protected internal Byte[] buf;
    protected internal Byte[] buf1;
    protected internal bool compress;
    private Stream out_Renamed;
    public int FlushMode { get; public set; }
    public long TotalIn { get; }
    public long TotalOut { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ZOutputStream(Stream out_Renamed);
    public ZOutputStream(Stream out_Renamed, int level);
    private void InitBlock();
    public virtual int get_FlushMode();
    public virtual void set_FlushMode(int value);
    public virtual long get_TotalIn();
    public virtual long get_TotalOut();
    public void WriteByte(int b);
    public virtual void WriteByte(byte b);
    public virtual void Write(Byte[] b1, int off, int len);
    public virtual void finish();
    public virtual void end();
    public virtual void Close();
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
internal class zlib.ZStream : object {
    private static int MAX_WBITS;
    private static int Z_NO_FLUSH;
    private static int Z_PARTIAL_FLUSH;
    private static int Z_SYNC_FLUSH;
    private static int Z_FULL_FLUSH;
    private static int Z_FINISH;
    private static int MAX_MEM_LEVEL;
    private static int Z_OK;
    private static int Z_STREAM_END;
    private static int Z_NEED_DICT;
    private static int Z_ERRNO;
    private static int Z_STREAM_ERROR;
    private static int Z_DATA_ERROR;
    private static int Z_MEM_ERROR;
    private static int Z_BUF_ERROR;
    private static int Z_VERSION_ERROR;
    private static int DEF_WBITS;
    public Byte[] next_in;
    public int next_in_index;
    public int avail_in;
    public long total_in;
    public Byte[] next_out;
    public int next_out_index;
    public int avail_out;
    public long total_out;
    public string msg;
    internal Deflate dstate;
    internal Inflate istate;
    internal int data_type;
    public long adler;
    internal Adler32 _adler;
    private static ZStream();
    public int inflateInit();
    public int inflateInit(int w);
    public int inflate(int f);
    public int inflateEnd();
    public int inflateSync();
    public int inflateSetDictionary(Byte[] dictionary, int dictLength);
    public int deflateInit(int level);
    public int deflateInit(int level, int bits);
    public int deflate(int flush);
    public int deflateEnd();
    public int deflateParams(int level, int strategy);
    public int deflateSetDictionary(Byte[] dictionary, int dictLength);
    internal void flush_pending();
    internal int read_buf(Byte[] buf, int start, int size);
    public void free();
}
internal class zlib.ZStreamException : IOException {
    public ZStreamException(string s);
}
