internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string VsVersion
public string FxFileVersion
public string VsFileVersion
public string AssemblyI18N
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_Core
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public Mono.Data.Tds.FrameworkValueGetter : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke(object rawValue, Boolean& updated)
public IAsyncResult BeginInvoke(object rawValue, Boolean& updated, AsyncCallback callback, object object)
public object EndInvoke(Boolean& updated, IAsyncResult result)
}
public Mono.Data.Tds.Protocol.Tds : object {
private TdsComm comm
private TdsVersion tdsVersion
protected internal TdsConnectionParameters connectionParms
protected Byte[] NTLMSSP_ID
private int packetSize
private string dataSource
private string database
private string originalDatabase
private string databaseProductName
private string databaseProductVersion
private int databaseMajorVersion
private CultureInfo locale
private string charset
private string language
private bool connected
private bool moreResults
private Encoding encoder
private bool doneProc
private bool pooling
private TdsDataRow currentRow
private TdsDataColumnCollection columns
private ArrayList tableNames
private ArrayList columnNames
private TdsMetaParameterCollection parameters
private bool queryInProgress
private int cancelsRequested
private int cancelsProcessed
private ArrayList outputParameters
protected TdsInternalErrorCollection messages
private int recordsAffected
private long StreamLength
private long StreamIndex
private int StreamColumnIndex
private bool sequentialAccess
private bool isRowRead
private bool isResultRead
private bool LoadInProgress
private Byte[] collation
internal int poolStatus
private TdsInternalErrorMessageEventHandler TdsErrorMessage
private TdsInternalInfoMessageEventHandler TdsInfoMessage
protected string Charset
protected CultureInfo Locale
public bool DoneProc
protected string Language
protected ArrayList ColumnNames
public TdsDataRow ColumnValues
internal TdsComm Comm
public string Database
public string DataSource
public bool IsConnected
public bool Pooling
public bool MoreResults
public int PacketSize
public int RecordsAffected
public string ServerVersion
public TdsDataColumnCollection Columns
public TdsVersion TdsVersion
public ArrayList OutputParameters
protected TdsMetaParameterCollection Parameters
public bool SequentialAccess
public Byte[] Collation
public TdsVersion ServerTdsVersion
public void .ctor(string dataSource, int port, int packetSize, int timeout, TdsVersion tdsVersion)
public void add_TdsErrorMessage(TdsInternalErrorMessageEventHandler value)
public void remove_TdsErrorMessage(TdsInternalErrorMessageEventHandler value)
public void add_TdsInfoMessage(TdsInternalInfoMessageEventHandler value)
public void remove_TdsInfoMessage(TdsInternalInfoMessageEventHandler value)
protected string get_Charset()
protected CultureInfo get_Locale()
public bool get_DoneProc()
protected string get_Language()
protected ArrayList get_ColumnNames()
public TdsDataRow get_ColumnValues()
internal TdsComm get_Comm()
public string get_Database()
public string get_DataSource()
public bool get_IsConnected()
public void set_IsConnected(bool value)
public bool get_Pooling()
public void set_Pooling(bool value)
public bool get_MoreResults()
public void set_MoreResults(bool value)
public int get_PacketSize()
public int get_RecordsAffected()
public void set_RecordsAffected(int value)
public string get_ServerVersion()
public TdsDataColumnCollection get_Columns()
public TdsVersion get_TdsVersion()
public ArrayList get_OutputParameters()
public void set_OutputParameters(ArrayList value)
protected TdsMetaParameterCollection get_Parameters()
protected void set_Parameters(TdsMetaParameterCollection value)
public bool get_SequentialAccess()
public void set_SequentialAccess(bool value)
public Byte[] get_Collation()
public TdsVersion get_ServerTdsVersion()
private void SkipRow()
private void SkipToColumnIndex(int colIndex)
public object GetSequentialColumnValue(int colIndex)
public long GetSequentialColumnValue(int colIndex, long fieldIndex, Byte[] buffer, int bufferIndex, int size)
private void BeginLoad(Nullable`1<TdsColumnType> colType)
private void EndLoad()
private long LoadData(long fieldIndex, Byte[] buffer, int bufferIndex, int size)
protected internal void InitExec()
public void Cancel()
public bool Connect(TdsConnectionParameters connectionParameters)
public TdsTimeoutException CreateTimeoutException(string dataSource, string method)
public void Disconnect()
public bool Reset()
protected bool IsValidRowCount(byte status, byte op)
public void Execute(string sql)
public void ExecProc(string sql)
public void Execute(string sql, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
public void ExecProc(string sql, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
public void ExecPrepared(string sql, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
internal void ExecBulkCopyMetaData(int timeout, bool wantResults)
internal void ExecBulkCopy(int timeout, bool wantResults)
protected void ExecuteQuery(string sql, int timeout, bool wantResults)
protected void ExecRPC(string rpcName, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
public bool NextResult()
public bool NextRow()
public string Prepare(string sql, TdsMetaParameterCollection parameters)
public void SkipToEnd()
public void Unprepare(string statementId)
protected void CheckForData(int timeout)
protected TdsInternalInfoMessageEventArgs CreateTdsInfoMessageEvent(TdsInternalErrorCollection errors)
protected TdsInternalErrorMessageEventArgs CreateTdsErrorMessageEvent(byte theClass, int lineNumber, string message, int number, string procedure, string server, string source, byte state)
private Encoding GetEncodingFromColumnCollation(int lcid, int sortId)
protected object GetColumnValue(Nullable`1<TdsColumnType> colType, bool outParam)
private object GetColumnValue(Nullable`1<TdsColumnType> colType, bool outParam, int ordinal)
private object GetBinaryValue()
private object GetDateTimeValue(Nullable`1<TdsColumnType> type)
private object GetDecimalValue(byte precision, byte scale)
private object GetDecimalValueTds70(byte precision, byte scale)
private object GetDecimalValueTds50(byte precision, byte scale)
private object GetFloatValue(Nullable`1<TdsColumnType> columnType)
private object GetImageValue()
private object GetIntValue(Nullable`1<TdsColumnType> type)
private object GetMoneyValue(Nullable`1<TdsColumnType> type)
protected object GetStringValue(Nullable`1<TdsColumnType> colType, bool wideChars, bool outputParam, Encoding encoder)
protected object GetStringValue(bool wideChars, int len, Encoding enc)
protected int GetSubPacketLength()
private object GetTextValue(bool wideChars, Encoding encoder)
internal bool IsBlobType(TdsColumnType columnType)
internal bool IsLargeType(TdsColumnType columnType)
protected bool IsWideType(TdsColumnType columnType)
internal bool IsFixedSizeColumn(TdsColumnType columnType)
protected void LoadRow()
internal int LookupBufferSize(TdsColumnType columnType)
protected internal int ProcessAuthentication()
protected void ProcessColumnDetail()
protected void ProcessColumnInfo()
protected void ProcessColumnNames()
protected void ProcessEndToken(TdsPacketSubType type)
protected void ProcessEnvironmentChange()
protected void ProcessLoginAck()
protected void OnTdsErrorMessage(TdsInternalErrorMessageEventArgs e)
protected void OnTdsInfoMessage(TdsInternalInfoMessageEventArgs e)
protected void ProcessMessage(TdsPacketSubType subType)
protected void ProcessOutputParam()
protected void ProcessDynamic()
protected TdsPacketSubType ProcessSubPacket()
protected void ProcessTableName()
protected void SetCharset(Encoding encoder)
protected void SetCharset(string charset)
protected void SetLanguage(string language)
protected void ProcessReturnStatus()
protected IAsyncResult BeginExecuteQueryInternal(string sql, bool wantResults, AsyncCallback callback, object state)
protected void EndExecuteQueryInternal(IAsyncResult ar)
protected void OnBeginExecuteQueryCallback(IAsyncResult ar)
public IAsyncResult BeginExecuteNonQuery(string sql, TdsMetaParameterCollection parameters, AsyncCallback callback, object state)
public void EndExecuteNonQuery(IAsyncResult ar)
public IAsyncResult BeginExecuteQuery(string sql, TdsMetaParameterCollection parameters, AsyncCallback callback, object state)
public void EndExecuteQuery(IAsyncResult ar)
public IAsyncResult BeginExecuteProcedure(string prolog, string epilog, string cmdText, bool IsNonQuery, TdsMetaParameterCollection parameters, AsyncCallback callback, object state)
public void EndExecuteProcedure(IAsyncResult ar)
public void WaitFor(IAsyncResult ar)
public void CheckAndThrowException(IAsyncResult ar)
}
public Mono.Data.Tds.Protocol.Tds42 : Tds {
public TdsVersion Version
public void .ctor(string server, int port)
public void .ctor(string server, int port, int packetSize, int timeout)
public bool Connect(TdsConnectionParameters connectionParameters)
protected void ProcessColumnInfo()
}
public Mono.Data.Tds.Protocol.Tds50 : Tds {
public TdsVersion Version
private int packetSize
private bool isSelectQuery
private Dictionary`2<string, int> <>f__switch$map5
public void .ctor(string server, int port)
public void .ctor(string server, int port, int packetSize, int timeout)
public string BuildExec(string sql)
public bool Connect(TdsConnectionParameters connectionParameters)
public void ExecPrepared(string id, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
public void Execute(string sql, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
public void ExecProc(string commandText, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
private string BuildProcedureCall(string procedure)
private string BuildParameters()
private string FormatParameter(TdsMetaParameter parameter)
public string Prepare(string sql, TdsMetaParameterCollection parameters)
protected void ProcessColumnInfo()
private void SendParamFormat()
private void SendParams()
public void Unprepare(string statementId)
protected bool IsValidRowCount(byte status, byte op)
}
public Mono.Data.Tds.Protocol.Tds70 : Tds {
private decimal SMALLMONEY_MIN
private decimal SMALLMONEY_MAX
private Dictionary`2<string, int> <>f__switch$map6
private Dictionary`2<string, int> <>f__switch$map7
protected Byte[] ClientVersion
public void .ctor(string server, int port)
public void .ctor(string server, int port, int packetSize, int timeout)
public void .ctor(string server, int port, int packetSize, int timeout, TdsVersion version)
protected Byte[] get_ClientVersion()
private string BuildExec(string sql)
private string BuildParameters()
private string BuildPreparedParameters()
private string BuildPreparedQuery(string id)
private string BuildProcedureCall(string procedure)
public bool Connect(TdsConnectionParameters connectionParameters)
private string EncryptPassword(string pass)
public bool Reset()
public void ExecPrepared(string commandText, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
public void ExecProc(string commandText, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
private void WriteRpcParameterInfo(TdsMetaParameterCollection parameters)
private void WritePreparedParameterInfo(TdsMetaParameterCollection parameters)
private void ExecRPC(TdsRpcProcId rpcId, string sql, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
protected void ExecRPC(string rpcName, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
private void WriteParameterInfo(TdsMetaParameter param)
public void Execute(string commandText, TdsMetaParameterCollection parameters, int timeout, bool wantResults)
private string FormatParameter(TdsMetaParameter parameter)
public string Prepare(string commandText, TdsMetaParameterCollection parameters)
protected void ProcessColumnInfo()
public void Unprepare(string statementId)
protected bool IsValidRowCount(byte status, byte op)
protected void ProcessReturnStatus()
private byte GetScale(TdsColumnType type, int columnSize)
private byte GetPrecision(TdsColumnType type, int columnSize)
public IAsyncResult BeginExecuteNonQuery(string cmdText, TdsMetaParameterCollection parameters, AsyncCallback callback, object state)
public void EndExecuteNonQuery(IAsyncResult ar)
public IAsyncResult BeginExecuteQuery(string cmdText, TdsMetaParameterCollection parameters, AsyncCallback callback, object state)
public void EndExecuteQuery(IAsyncResult ar)
public IAsyncResult BeginExecuteProcedure(string prolog, string epilog, string cmdText, bool IsNonQuery, TdsMetaParameterCollection parameters, AsyncCallback callback, object state)
public void EndExecuteProcedure(IAsyncResult ar)
}
public Mono.Data.Tds.Protocol.Tds80 : Tds70 {
public TdsVersion Version
protected Byte[] ClientVersion
public void .ctor(string server, int port)
public void .ctor(string server, int port, int packetSize, int timeout)
protected Byte[] get_ClientVersion()
public bool Connect(TdsConnectionParameters connectionParameters)
protected void ProcessColumnInfo()
protected void ProcessOutputParam()
}
internal Mono.Data.Tds.Protocol.TdsAsyncResult : object {
private TdsAsyncState _tdsState
private WaitHandle _waitHandle
private bool _completed
private bool _completedSyncly
private AsyncCallback _userCallback
private object _retValue
private Exception _exception
public object AsyncState
internal TdsAsyncState TdsAsyncState
public WaitHandle AsyncWaitHandle
public bool IsCompleted
public bool IsCompletedWithException
public Exception Exception
public bool CompletedSynchronously
internal object ReturnValue
public void .ctor(AsyncCallback userCallback, TdsAsyncState tdsState)
public void .ctor(AsyncCallback userCallback, object state)
public object get_AsyncState()
internal TdsAsyncState get_TdsAsyncState()
public WaitHandle get_AsyncWaitHandle()
public bool get_IsCompleted()
public bool get_IsCompletedWithException()
public Exception get_Exception()
public bool get_CompletedSynchronously()
internal object get_ReturnValue()
internal void set_ReturnValue(object value)
internal void MarkComplete()
internal void MarkComplete(Exception e)
}
internal Mono.Data.Tds.Protocol.TdsAsyncState : object {
private object _userState
private bool _wantResults
public object UserState
public bool WantResults
public void .ctor(object userState)
public object get_UserState()
public void set_UserState(object value)
public bool get_WantResults()
public void set_WantResults(bool value)
}
public Mono.Data.Tds.Protocol.TdsBigDecimal : object {
private bool isNegative
private byte precision
private byte scale
private Int32[] data
public Int32[] Data
public byte Precision
public byte Scale
public bool IsNegative
public void .ctor(byte precision, byte scale, bool isNegative, Int32[] data)
public Int32[] get_Data()
public byte get_Precision()
public byte get_Scale()
public bool get_IsNegative()
}
public Mono.Data.Tds.Protocol.TdsBulkCopy : object {
private Tds tds
public void .ctor(Tds tds)
public bool SendColumnMetaData(string colMetaData)
public bool BulkCopyStart(TdsMetaParameterCollection parameters)
public bool BulkCopyData(object o, int size, bool isNewRow)
public bool BulkCopyEnd()
private void WriteParameterInfo(TdsMetaParameter param)
}
public Mono.Data.Tds.Protocol.TdsColumnStatus : Enum {
public int value__
public TdsColumnStatus IsExpression
public TdsColumnStatus IsKey
public TdsColumnStatus Hidden
public TdsColumnStatus Rename
}
public Mono.Data.Tds.Protocol.TdsColumnType : Enum {
public int value__
public TdsColumnType Binary
public TdsColumnType Bit
public TdsColumnType Char
public TdsColumnType DateTime
public TdsColumnType DateTime4
public TdsColumnType DateTimeN
public TdsColumnType Decimal
public TdsColumnType Real
public TdsColumnType Float8
public TdsColumnType FloatN
public TdsColumnType Image
public TdsColumnType Int1
public TdsColumnType Int2
public TdsColumnType Int4
public TdsColumnType IntN
public TdsColumnType Void
public TdsColumnType Text
public TdsColumnType UniqueIdentifier
public TdsColumnType VarBinary
public TdsColumnType VarChar
public TdsColumnType Money
public TdsColumnType NText
public TdsColumnType NVarChar
public TdsColumnType BitN
public TdsColumnType Numeric
public TdsColumnType MoneyN
public TdsColumnType Money4
public TdsColumnType NChar
public TdsColumnType BigBinary
public TdsColumnType BigVarBinary
public TdsColumnType BigVarChar
public TdsColumnType BigNVarChar
public TdsColumnType BigChar
public TdsColumnType SmallMoney
public TdsColumnType Variant
public TdsColumnType BigInt
}
internal Mono.Data.Tds.Protocol.TdsComm : object {
private NetworkStream stream
private int packetSize
private TdsPacketType packetType
private bool connReset
private Encoding encoder
private string dataSource
private int commandTimeout
private Byte[] outBuffer
private int outBufferLength
private int nextOutBufferIndex
private bool lsb
private Byte[] inBuffer
private int inBufferLength
private int inBufferIndex
private int headerLength
private Byte[] tmpBuf
private Byte[] resBuffer
private int packetsSent
private int packetsReceived
private Socket socket
private TdsVersion tdsVersion
public int CommandTimeout
internal Encoding Encoder
public int PacketSize
public bool TdsByteOrder
public bool ResetConnection
public void .ctor(string dataSource, int port, int packetSize, int timeout, TdsVersion tdsVersion)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
internal Encoding get_Encoder()
internal void set_Encoder(Encoding value)
public int get_PacketSize()
public void set_PacketSize(int value)
public bool get_TdsByteOrder()
public void set_TdsByteOrder(bool value)
public Byte[] Swap(Byte[] toswap)
public void SendIfFull()
public void SendIfFull(int reserve)
public void Append(object o)
public void Append(byte b)
public void Append(DateTime t, int bytes)
public void Append(Byte[] b)
public void Append(Byte[] b, int len, byte pad)
private void AppendInternal(short s)
public void Append(short s)
public void Append(ushort s)
private void AppendInternal(int i)
public void Append(int i)
public void Append(string s)
public Byte[] Append(string s, int len, byte pad)
public void Append(double value)
public void Append(float value)
public void Append(long l)
public void Append(decimal d, int bytes)
public void Close()
public bool IsConnected()
public byte GetByte()
public Byte[] GetBytes(int len, bool exclusiveBuffer)
public string GetString(int len, Encoding enc)
public string GetString(int len)
public string GetString(int len, bool wide, Encoding enc)
public string GetString(int len, bool wide)
public int GetNetShort()
public short GetTdsShort()
public int GetTdsInt()
public long GetTdsInt64()
private void GetPhysicalPacket()
private int Read(Byte[] buffer, int offset, int count)
private int GetPhysicalPacketHeader()
private void GetPhysicalPacketData(int length)
private int Ntohs(Byte[] buf, int offset)
public byte Peek()
public bool Poll(int seconds, SelectMode selectMode)
private bool Poll(Socket s, int seconds, SelectMode selectMode)
internal void ResizeOutBuf(int newSize)
public bool get_ResetConnection()
public void set_ResetConnection(bool value)
public void SendPacket()
private void SendPhysicalPacket(bool isLastSegment)
public void Skip(long i)
public void StartPacket(TdsPacketType type)
private void Store(int index, byte value)
private void Store(int index, short value)
public IAsyncResult BeginReadPacket(AsyncCallback callback, object stateObject)
public int EndReadPacket(IAsyncResult ar)
public void OnReadPacketCallback(IAsyncResult socketAsyncResult)
}
public Mono.Data.Tds.Protocol.TdsConnectionInfo : object {
public string DataSource
public int Port
public int PacketSize
public int Timeout
public int PoolMinSize
public int PoolMaxSize
public void .ctor(string dataSource, int port, int packetSize, int timeout, int minSize, int maxSize)
public string ToString()
}
public Mono.Data.Tds.Protocol.TdsConnectionParameters : object {
public string ApplicationName
public string Database
public string Charset
public string Hostname
public string Language
public string LibraryName
public string Password
public string ProgName
public string User
public bool DomainLogin
public string DefaultDomain
public string AttachDBFileName
public void Reset()
}
public Mono.Data.Tds.Protocol.TdsConnectionPool : object {
private TdsConnectionInfo info
private bool no_pooling
private TdsConnectionPoolManager manager
private Queue available
private ArrayList conns
private int in_progress
public bool Pooling
public void .ctor(TdsConnectionPoolManager manager, TdsConnectionInfo info)
private void InitializePool()
public bool get_Pooling()
public void set_Pooling(bool value)
public Tds GetConnection()
public void ReleaseConnection(Tds connection)
public void ResetConnectionPool()
}
public Mono.Data.Tds.Protocol.TdsConnectionPoolManager : object {
private Hashtable pools
private TdsVersion version
public void .ctor(TdsVersion version)
public TdsConnectionPool GetConnectionPool(string connectionString, TdsConnectionInfo info)
public TdsConnectionPool GetConnectionPool(string connectionString)
public Tds CreateConnection(TdsConnectionInfo info)
public IDictionary GetConnectionPool()
}
public Mono.Data.Tds.Protocol.TdsDataColumn : object {
private Hashtable properties
private Nullable`1<TdsColumnType> <ColumnType>k__BackingField
private string <ColumnName>k__BackingField
private Nullable`1<int> <ColumnSize>k__BackingField
private Nullable`1<int> <ColumnOrdinal>k__BackingField
private Nullable`1<bool> <IsAutoIncrement>k__BackingField
private Nullable`1<bool> <IsIdentity>k__BackingField
private Nullable`1<bool> <IsRowVersion>k__BackingField
private Nullable`1<bool> <IsUnique>k__BackingField
private Nullable`1<bool> <IsHidden>k__BackingField
private Nullable`1<bool> <IsKey>k__BackingField
private Nullable`1<bool> <IsAliased>k__BackingField
private Nullable`1<bool> <IsExpression>k__BackingField
private Nullable`1<bool> <IsReadOnly>k__BackingField
private Nullable`1<short> <NumericPrecision>k__BackingField
private Nullable`1<short> <NumericScale>k__BackingField
private string <BaseServerName>k__BackingField
private string <BaseCatalogName>k__BackingField
private string <BaseColumnName>k__BackingField
private string <BaseSchemaName>k__BackingField
private string <BaseTableName>k__BackingField
private Nullable`1<bool> <AllowDBNull>k__BackingField
private Nullable`1<int> <LCID>k__BackingField
private Nullable`1<int> <SortOrder>k__BackingField
private string <DataTypeName>k__BackingField
public Nullable`1<TdsColumnType> ColumnType
public string ColumnName
public Nullable`1<int> ColumnSize
public Nullable`1<int> ColumnOrdinal
public Nullable`1<bool> IsAutoIncrement
public Nullable`1<bool> IsIdentity
public Nullable`1<bool> IsRowVersion
public Nullable`1<bool> IsUnique
public Nullable`1<bool> IsHidden
public Nullable`1<bool> IsKey
public Nullable`1<bool> IsAliased
public Nullable`1<bool> IsExpression
public Nullable`1<bool> IsReadOnly
public Nullable`1<short> NumericPrecision
public Nullable`1<short> NumericScale
public string BaseServerName
public string BaseCatalogName
public string BaseColumnName
public string BaseSchemaName
public string BaseTableName
public Nullable`1<bool> AllowDBNull
public Nullable`1<int> LCID
public Nullable`1<int> SortOrder
public string DataTypeName
public object Item
public Nullable`1<TdsColumnType> get_ColumnType()
public void set_ColumnType(Nullable`1<TdsColumnType> value)
public string get_ColumnName()
public void set_ColumnName(string value)
public Nullable`1<int> get_ColumnSize()
public void set_ColumnSize(Nullable`1<int> value)
public Nullable`1<int> get_ColumnOrdinal()
public void set_ColumnOrdinal(Nullable`1<int> value)
public Nullable`1<bool> get_IsAutoIncrement()
public void set_IsAutoIncrement(Nullable`1<bool> value)
public Nullable`1<bool> get_IsIdentity()
public void set_IsIdentity(Nullable`1<bool> value)
public Nullable`1<bool> get_IsRowVersion()
public void set_IsRowVersion(Nullable`1<bool> value)
public Nullable`1<bool> get_IsUnique()
public void set_IsUnique(Nullable`1<bool> value)
public Nullable`1<bool> get_IsHidden()
public void set_IsHidden(Nullable`1<bool> value)
public Nullable`1<bool> get_IsKey()
public void set_IsKey(Nullable`1<bool> value)
public Nullable`1<bool> get_IsAliased()
public void set_IsAliased(Nullable`1<bool> value)
public Nullable`1<bool> get_IsExpression()
public void set_IsExpression(Nullable`1<bool> value)
public Nullable`1<bool> get_IsReadOnly()
public void set_IsReadOnly(Nullable`1<bool> value)
public Nullable`1<short> get_NumericPrecision()
public void set_NumericPrecision(Nullable`1<short> value)
public Nullable`1<short> get_NumericScale()
public void set_NumericScale(Nullable`1<short> value)
public string get_BaseServerName()
public void set_BaseServerName(string value)
public string get_BaseCatalogName()
public void set_BaseCatalogName(string value)
public string get_BaseColumnName()
public void set_BaseColumnName(string value)
public string get_BaseSchemaName()
public void set_BaseSchemaName(string value)
public string get_BaseTableName()
public void set_BaseTableName(string value)
public Nullable`1<bool> get_AllowDBNull()
public void set_AllowDBNull(Nullable`1<bool> value)
public Nullable`1<int> get_LCID()
public void set_LCID(Nullable`1<int> value)
public Nullable`1<int> get_SortOrder()
public void set_SortOrder(Nullable`1<int> value)
public string get_DataTypeName()
public void set_DataTypeName(string value)
public object get_Item(string key)
public void set_Item(string key, object value)
}
public Mono.Data.Tds.Protocol.TdsDataColumnCollection : object {
private ArrayList list
public TdsDataColumn Item
public int Count
public TdsDataColumn get_Item(int index)
public void set_Item(int index, TdsDataColumn value)
public int get_Count()
public int Add(TdsDataColumn schema)
public void Add(TdsDataColumnCollection columns)
public IEnumerator GetEnumerator()
public void Clear()
}
public Mono.Data.Tds.Protocol.TdsDataRow : object {
private ArrayList list
private int bigDecimalIndex
public int BigDecimalIndex
public int Count
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
public object Item
public int get_BigDecimalIndex()
public void set_BigDecimalIndex(int value)
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
public object get_Item(int index)
public void set_Item(int index, object value)
public int Add(object value)
public void Clear()
public bool Contains(object value)
public void CopyTo(Array array, int index)
public void CopyTo(int index, Array array, int arrayIndex, int count)
public IEnumerator GetEnumerator()
public int IndexOf(object value)
public void Insert(int index, object value)
public void Remove(object value)
public void RemoveAt(int index)
}
public Mono.Data.Tds.Protocol.TdsEnvPacketSubType : Enum {
public int value__
public TdsEnvPacketSubType Database
public TdsEnvPacketSubType CharSet
public TdsEnvPacketSubType BlockSize
public TdsEnvPacketSubType Locale
public TdsEnvPacketSubType CollationInfo
}
public Mono.Data.Tds.Protocol.TdsInternalError : object {
private byte theClass
private int lineNumber
private string message
private int number
private string procedure
private string server
private string source
private byte state
public byte Class
public int LineNumber
public string Message
public int Number
public string Procedure
public string Server
public string Source
public byte State
public void .ctor(byte theClass, int lineNumber, string message, int number, string procedure, string server, string source, byte state)
public byte get_Class()
public void set_Class(byte value)
public int get_LineNumber()
public void set_LineNumber(int value)
public string get_Message()
public void set_Message(string value)
public int get_Number()
public void set_Number(int value)
public string get_Procedure()
public void set_Procedure(string value)
public string get_Server()
public void set_Server(string value)
public string get_Source()
public void set_Source(string value)
public byte get_State()
public void set_State(byte value)
}
public Mono.Data.Tds.Protocol.TdsInternalErrorCollection : object {
private ArrayList list
public int Count
public TdsInternalError Item
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int get_Count()
public TdsInternalError get_Item(int index)
public void set_Item(int index, TdsInternalError value)
public int Add(TdsInternalError error)
public void Clear()
}
public Mono.Data.Tds.Protocol.TdsInternalErrorMessageEventArgs : TdsInternalInfoMessageEventArgs {
public void .ctor(TdsInternalError error)
}
public Mono.Data.Tds.Protocol.TdsInternalErrorMessageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TdsInternalErrorMessageEventArgs e)
public IAsyncResult BeginInvoke(object sender, TdsInternalErrorMessageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.Data.Tds.Protocol.TdsInternalException : SystemException {
private byte theClass
private int lineNumber
private int number
private string procedure
private string server
private string source
private byte state
public byte Class
public int LineNumber
public string Message
public int Number
public string Procedure
public string Server
public string Source
public byte State
internal void .ctor(string message, Exception innerException)
internal void .ctor(byte theClass, int lineNumber, string message, int number, string procedure, string server, string source, byte state)
public byte get_Class()
public int get_LineNumber()
public string get_Message()
public int get_Number()
public string get_Procedure()
public string get_Server()
public string get_Source()
public byte get_State()
public void GetObjectData(SerializationInfo si, StreamingContext context)
}
public Mono.Data.Tds.Protocol.TdsInternalInfoMessageEventArgs : EventArgs {
private TdsInternalErrorCollection errors
public TdsInternalErrorCollection Errors
public byte Class
public int LineNumber
public string Message
public int Number
public string Procedure
public string Server
public string Source
public byte State
public void .ctor(TdsInternalErrorCollection errors)
public void .ctor(TdsInternalError error)
public TdsInternalErrorCollection get_Errors()
public byte get_Class()
public int get_LineNumber()
public string get_Message()
public int get_Number()
public string get_Procedure()
public string get_Server()
public string get_Source()
public byte get_State()
public int Add(byte theClass, int lineNumber, string message, int number, string procedure, string server, string source, byte state)
}
public Mono.Data.Tds.Protocol.TdsInternalInfoMessageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TdsInternalInfoMessageEventArgs e)
public IAsyncResult BeginInvoke(object sender, TdsInternalInfoMessageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.Data.Tds.Protocol.TdsPacketSubType : Enum {
public int value__
public TdsPacketSubType Capability
public TdsPacketSubType Dynamic
public TdsPacketSubType Dynamic2
public TdsPacketSubType EnvironmentChange
public TdsPacketSubType Error
public TdsPacketSubType Info
public TdsPacketSubType EED
public TdsPacketSubType Param
public TdsPacketSubType Authentication
public TdsPacketSubType LoginAck
public TdsPacketSubType ReturnStatus
public TdsPacketSubType ProcId
public TdsPacketSubType Done
public TdsPacketSubType DoneProc
public TdsPacketSubType DoneInProc
public TdsPacketSubType ColumnName
public TdsPacketSubType ColumnInfo
public TdsPacketSubType ColumnDetail
public TdsPacketSubType AltName
public TdsPacketSubType AltFormat
public TdsPacketSubType TableName
public TdsPacketSubType ColumnOrder
public TdsPacketSubType Control
public TdsPacketSubType Row
public TdsPacketSubType ColumnMetadata
public TdsPacketSubType RowFormat
public TdsPacketSubType ParamFormat
public TdsPacketSubType Parameters
}
public Mono.Data.Tds.Protocol.TdsPacketType : Enum {
public int value__
public TdsPacketType None
public TdsPacketType Query
public TdsPacketType Logon
public TdsPacketType Proc
public TdsPacketType Reply
public TdsPacketType Cancel
public TdsPacketType Bulk
public TdsPacketType Logon70
public TdsPacketType SspAuth
public TdsPacketType Logoff
public TdsPacketType Normal
public TdsPacketType DBRPC
public TdsPacketType RPC
}
public Mono.Data.Tds.Protocol.TdsRpcProcId : Enum {
public int value__
public TdsRpcProcId Cursor
public TdsRpcProcId CursorOpen
public TdsRpcProcId CursorPrepare
public TdsRpcProcId CursorExecute
public TdsRpcProcId CursorPrepExec
public TdsRpcProcId CursorUnprepare
public TdsRpcProcId CursorFetch
public TdsRpcProcId CursorOption
public TdsRpcProcId CursorClose
public TdsRpcProcId ExecuteSql
public TdsRpcProcId Prepare
public TdsRpcProcId Execute
public TdsRpcProcId PrepExec
public TdsRpcProcId PrepExecRpc
public TdsRpcProcId Unprepare
}
public Mono.Data.Tds.Protocol.TdsTimeoutException : TdsInternalException {
internal void .ctor(byte theClass, int lineNumber, string message, int number, string procedure, string server, string source, byte state)
}
public Mono.Data.Tds.Protocol.TdsVersion : Enum {
public int value__
public TdsVersion tds42
public TdsVersion tds50
public TdsVersion tds70
public TdsVersion tds80
public TdsVersion tds81
public TdsVersion tds90
public TdsVersion tds100
}
internal Mono.Data.Tds.TdsCharset : object {
private Hashtable lcidCodes
private Hashtable sortCodes
public Encoding GetEncoding(Byte[] collation)
public Encoding GetEncodingFromLCID(Byte[] collation)
public Encoding GetEncodingFromLCID(int lcid)
public Encoding GetEncodingFromSortOrder(Byte[] collation)
public Encoding GetEncodingFromSortOrder(int sortId)
}
internal Mono.Data.Tds.TdsCollation : object {
public int LCID(Byte[] collation)
public int CollationFlags(Byte[] collation)
public int Version(Byte[] collation)
public int SortId(Byte[] collation)
}
public Mono.Data.Tds.TdsMetaParameter : object {
private TdsParameterDirection direction
private byte precision
private byte scale
private int size
private string typeName
private string name
private bool isSizeSet
private bool isNullable
private object value
private bool isVariableSizeType
private FrameworkValueGetter frameworkValueGetter
private object rawValue
private bool isUpdated
private Dictionary`2<string, int> <>f__switch$map0
private Dictionary`2<string, int> <>f__switch$map1
private Dictionary`2<string, int> <>f__switch$map2
private Dictionary`2<string, int> <>f__switch$map3
private Dictionary`2<string, int> <>f__switch$map4
public TdsParameterDirection Direction
public string TypeName
public string ParameterName
public bool IsNullable
public object Value
public object RawValue
public byte Precision
public byte Scale
public int Size
public bool IsVariableSizeType
public void .ctor(string name, object value)
public void .ctor(string name, FrameworkValueGetter valueGetter)
public void .ctor(string name, string typeName, object value)
public void .ctor(string name, int size, bool isNullable, byte precision, byte scale, object value)
public void .ctor(string name, int size, bool isNullable, byte precision, byte scale, FrameworkValueGetter valueGetter)
public TdsParameterDirection get_Direction()
public void set_Direction(TdsParameterDirection value)
public string get_TypeName()
public void set_TypeName(string value)
public string get_ParameterName()
public void set_ParameterName(string value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public object get_Value()
public void set_Value(object value)
public object get_RawValue()
public void set_RawValue(object value)
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
public int get_Size()
public void set_Size(int value)
public bool get_IsVariableSizeType()
public void set_IsVariableSizeType(bool value)
private object ResizeValue(object newValue)
internal string Prepare()
internal int GetActualSize()
private int GetSize()
internal Byte[] GetBytes()
internal TdsColumnType GetMetaType()
public void Validate(int index)
}
public Mono.Data.Tds.TdsMetaParameterCollection : object {
private ArrayList list
public int Count
public bool IsSynchronized
public TdsMetaParameter Item
public TdsMetaParameter Item
public object SyncRoot
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int get_Count()
public bool get_IsSynchronized()
public TdsMetaParameter get_Item(int index)
public TdsMetaParameter get_Item(string name)
public object get_SyncRoot()
public int Add(TdsMetaParameter value)
public void Clear()
public bool Contains(TdsMetaParameter value)
public void CopyTo(Array array, int index)
public int IndexOf(TdsMetaParameter value)
public int IndexOf(string name)
public void Insert(int index, TdsMetaParameter value)
public void Remove(TdsMetaParameter value)
public void Remove(string name)
public void RemoveAt(int index)
}
public Mono.Data.Tds.TdsParameterDirection : Enum {
public int value__
public TdsParameterDirection Input
public TdsParameterDirection Output
public TdsParameterDirection InputOutput
public TdsParameterDirection ReturnValue
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
