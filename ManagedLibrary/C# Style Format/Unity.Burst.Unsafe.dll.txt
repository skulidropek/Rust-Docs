internal Unity.Burst.Unsafe : object {
public T Read(Void* source)
public T ReadUnaligned(Void* source)
public T ReadUnaligned(Byte& source)
public void Write(Void* destination, T value)
public void WriteUnaligned(Void* destination, T value)
public void WriteUnaligned(Byte& destination, T value)
public void Copy(Void* destination, T& source)
public void Copy(T& destination, Void* source)
public Void* AsPointer(T& value)
public int SizeOf()
public void CopyBlock(Void* destination, Void* source, UInt32 byteCount)
public void CopyBlock(Byte& destination, Byte& source, UInt32 byteCount)
public void CopyBlockUnaligned(Void* destination, Void* source, UInt32 byteCount)
public void CopyBlockUnaligned(Byte& destination, Byte& source, UInt32 byteCount)
public void InitBlock(Void* startAddress, byte value, UInt32 byteCount)
public void InitBlock(Byte& startAddress, byte value, UInt32 byteCount)
public void InitBlockUnaligned(Void* startAddress, byte value, UInt32 byteCount)
public void InitBlockUnaligned(Byte& startAddress, byte value, UInt32 byteCount)
public T As(object o)
public T& AsRef(Void* source)
public T& AsRef(T& source)
public TTo& As(TFrom& source)
public T& Unbox(object box)
public T& Add(T& source, int elementOffset)
public Void* Add(Void* source, int elementOffset)
public T& Add(T& source, IntPtr elementOffset)
public T& AddByteOffset(T& source, IntPtr byteOffset)
public T& Subtract(T& source, int elementOffset)
public Void* Subtract(Void* source, int elementOffset)
public T& Subtract(T& source, IntPtr elementOffset)
public T& SubtractByteOffset(T& source, IntPtr byteOffset)
public IntPtr ByteOffset(T& origin, T& target)
public bool AreSame(T& left, T& right)
public bool IsAddressGreaterThan(T& left, T& right)
public bool IsAddressLessThan(T& left, T& right)
}
