public Facepunch.Flexbox.FlexAlign : Enum {
public int value__
public FlexAlign Start
public FlexAlign End
public FlexAlign Center
public FlexAlign Stretch
}
public Facepunch.Flexbox.FlexAlignSelf : ValueType {
public bool HasValue
public FlexAlign Value
internal FlexAlign GetValueOrDefault(FlexAlign defaultValue)
}
internal Facepunch.Flexbox.FlexChildEnumerable : ValueType {
private FlexElement _parent
private bool _reversed
public void .ctor(FlexElement parent, bool reversed)
public FlexChildEnumerator GetEnumerator()
private IEnumerator`1<IFlexNode> System.Collections.Generic.IEnumerable<Facepunch.Flexbox.IFlexNode>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
internal Facepunch.Flexbox.FlexChildEnumerator : ValueType {
private Transform _parent
private int _childCount
private bool _reversed
private int _index
private IFlexNode <Current>k__BackingField
public IFlexNode Current
private object System.Collections.IEnumerator.Current
public IFlexNode get_Current()
private void set_Current(IFlexNode value)
public void .ctor(FlexElement parent, bool reversed)
public bool MoveNext()
private object System.Collections.IEnumerator.get_Current()
public void Reset()
public void Dispose()
}
public Facepunch.Flexbox.FlexDirection : Enum {
public int value__
public FlexDirection Row
public FlexDirection RowReverse
public FlexDirection Column
public FlexDirection ColumnReverse
}
public Facepunch.Flexbox.FlexElement : UIBehaviour {
private List`1<IFlexNode> SizingChildren
public FlexDirection FlexDirection
public FlexJustify JustifyContent
public FlexAlign AlignItems
public FlexPadding Padding
public float Gap
public FlexLength Basis
public int Grow
public FlexAlignSelf AlignSelf
public int Shrink
public bool IsAbsolute
public bool AutoSizeX
public bool AutoSizeY
public FlexLength MinWidth
public FlexLength MaxWidth
public FlexLength MinHeight
public FlexLength MaxHeight
private bool _isDirty
private bool _isDoingLayout
private float _prefWidth
private float _prefHeight
private int _growSum
private int _shrinkSum
private List`1<IFlexNode> _children
private ChildSizingParameters[] _childSizes
private bool IsHorizontal
private bool IsReversed
private RectTransform Facepunch.Flexbox.IFlexNode.Transform
private bool Facepunch.Flexbox.IFlexNode.IsActive
private bool Facepunch.Flexbox.IFlexNode.IsAbsolute
private bool Facepunch.Flexbox.IFlexNode.IsDirty
private FlexLength Facepunch.Flexbox.IFlexNode.MinWidth
private FlexLength Facepunch.Flexbox.IFlexNode.MaxWidth
private FlexLength Facepunch.Flexbox.IFlexNode.MinHeight
private FlexLength Facepunch.Flexbox.IFlexNode.MaxHeight
private FlexLength Facepunch.Flexbox.IFlexNode.Basis
private int Facepunch.Flexbox.IFlexNode.Grow
private int Facepunch.Flexbox.IFlexNode.Shrink
private FlexAlignSelf Facepunch.Flexbox.IFlexNode.AlignSelf
private bool get_IsHorizontal()
private bool get_IsReversed()
public void SetLayoutDirty(bool force)
internal void PerformLayout()
private void MeasureMainAxis()
private void LayoutMainAxis(float maxWidth, float maxHeight)
private void MeasureCrossAxis()
private void LayoutCrossAxis(float maxWidth, float maxHeight)
private T& Pick(bool value, T& ifTrue, T& ifFalse)
private float CalculateLengthValue(FlexLength& length, float fillValue, float defaultValue)
private void SetupTransform()
private RectTransform Facepunch.Flexbox.IFlexNode.get_Transform()
private bool Facepunch.Flexbox.IFlexNode.get_IsActive()
private bool Facepunch.Flexbox.IFlexNode.get_IsAbsolute()
private bool Facepunch.Flexbox.IFlexNode.get_IsDirty()
private FlexLength Facepunch.Flexbox.IFlexNode.get_MinWidth()
private FlexLength Facepunch.Flexbox.IFlexNode.get_MaxWidth()
private FlexLength Facepunch.Flexbox.IFlexNode.get_MinHeight()
private FlexLength Facepunch.Flexbox.IFlexNode.get_MaxHeight()
private FlexLength Facepunch.Flexbox.IFlexNode.get_Basis()
private int Facepunch.Flexbox.IFlexNode.get_Grow()
private int Facepunch.Flexbox.IFlexNode.get_Shrink()
private FlexAlignSelf Facepunch.Flexbox.IFlexNode.get_AlignSelf()
private void Facepunch.Flexbox.IFlexNode.MeasureHorizontal()
private void Facepunch.Flexbox.IFlexNode.LayoutHorizontal(float maxWidth, float maxHeight)
private void Facepunch.Flexbox.IFlexNode.MeasureVertical()
private void Facepunch.Flexbox.IFlexNode.LayoutVertical(float maxWidth, float maxHeight)
private void Facepunch.Flexbox.IFlexNode.GetScale(Single& scaleX, Single& scaleY)
private void Facepunch.Flexbox.IFlexNode.GetPreferredSize(Single& preferredWidth, Single& preferredHeight)
protected void OnEnable()
protected void OnDisable()
protected void OnRectTransformDimensionsChange()
protected void OnBeforeTransformParentChanged()
protected void OnTransformParentChanged()
protected void OnTransformChildrenChanged()
private bool <LayoutMainAxis>g__TakeGrowth|33_2(Single& value, float maxValue, float scale, <>c__DisplayClass33_0& , <>c__DisplayClass33_1& , <>c__DisplayClass33_2& )
private bool <LayoutMainAxis>g__TakeShrink|33_3(Single& value, float minValue, float scale, <>c__DisplayClass33_0& , <>c__DisplayClass33_1& , <>c__DisplayClass33_2& )
private float <LayoutMainAxis>g__GetMainAxisStart|33_1(bool isHorizontal, bool isReversed, <>c__DisplayClass33_0& )
private float <LayoutCrossAxis>g__GetCrossAxis|35_0(FlexAlign align, bool isHorizontal, float childWidth, float childHeight, <>c__DisplayClass35_0& )
}
public Facepunch.Flexbox.FlexJustify : Enum {
public int value__
public FlexJustify Start
public FlexJustify End
public FlexJustify Center
}
public Facepunch.Flexbox.FlexLayoutManager : MonoBehaviour {
private FlexLayoutManager <Instance>k__BackingField
private List`1<FlexElement> DirtyElements
private List`1<FlexElement> UpdatingElements
public FlexLayoutManager Instance
public FlexLayoutManager get_Instance()
private void set_Instance(FlexLayoutManager value)
public void OnEnable()
public void OnDisable()
public void LateUpdate()
public void EnqueueLayout(FlexElement element)
private void FlushQueue()
}
public Facepunch.Flexbox.FlexLength : ValueType {
public bool HasValue
public float Value
public FlexUnit Unit
}
public Facepunch.Flexbox.FlexPadding : ValueType {
public float left
public float right
public float top
public float bottom
public void .ctor(float value)
public void .ctor(float left, float right, float top, float bottom)
}
public Facepunch.Flexbox.FlexText : TextMeshProUGUI {
public FlexLength Basis
public int Grow
public int Shrink
public FlexAlignSelf AlignSelf
public FlexLength MinWidth
public FlexLength MaxWidth
public FlexLength MinHeight
public FlexLength MaxHeight
private bool _isDirty
private float _preferredWidth
private float _preferredHeight
private RectTransform Facepunch.Flexbox.IFlexNode.Transform
private bool Facepunch.Flexbox.IFlexNode.IsActive
private bool Facepunch.Flexbox.IFlexNode.IsAbsolute
private bool Facepunch.Flexbox.IFlexNode.IsDirty
private FlexLength Facepunch.Flexbox.IFlexNode.MinWidth
private FlexLength Facepunch.Flexbox.IFlexNode.MaxWidth
private FlexLength Facepunch.Flexbox.IFlexNode.MinHeight
private FlexLength Facepunch.Flexbox.IFlexNode.MaxHeight
private FlexLength Facepunch.Flexbox.IFlexNode.Basis
private int Facepunch.Flexbox.IFlexNode.Grow
private int Facepunch.Flexbox.IFlexNode.Shrink
private FlexAlignSelf Facepunch.Flexbox.IFlexNode.AlignSelf
protected void OnEnable()
protected void OnDisable()
public void SetLayoutDirty()
private void SetupTransform()
private RectTransform Facepunch.Flexbox.IFlexNode.get_Transform()
private bool Facepunch.Flexbox.IFlexNode.get_IsActive()
private bool Facepunch.Flexbox.IFlexNode.get_IsAbsolute()
private bool Facepunch.Flexbox.IFlexNode.get_IsDirty()
private FlexLength Facepunch.Flexbox.IFlexNode.get_MinWidth()
private FlexLength Facepunch.Flexbox.IFlexNode.get_MaxWidth()
private FlexLength Facepunch.Flexbox.IFlexNode.get_MinHeight()
private FlexLength Facepunch.Flexbox.IFlexNode.get_MaxHeight()
private FlexLength Facepunch.Flexbox.IFlexNode.get_Basis()
private int Facepunch.Flexbox.IFlexNode.get_Grow()
private int Facepunch.Flexbox.IFlexNode.get_Shrink()
private FlexAlignSelf Facepunch.Flexbox.IFlexNode.get_AlignSelf()
private void Facepunch.Flexbox.IFlexNode.SetLayoutDirty(bool force)
private void Facepunch.Flexbox.IFlexNode.MeasureHorizontal()
private void Facepunch.Flexbox.IFlexNode.LayoutHorizontal(float maxWidth, float maxHeight)
private void Facepunch.Flexbox.IFlexNode.MeasureVertical()
private void Facepunch.Flexbox.IFlexNode.LayoutVertical(float maxWidth, float maxHeight)
private void Facepunch.Flexbox.IFlexNode.GetScale(Single& scaleX, Single& scaleY)
private void Facepunch.Flexbox.IFlexNode.GetPreferredSize(Single& preferredWidth, Single& preferredHeight)
}
public Facepunch.Flexbox.FlexTransition : MonoBehaviour {
public Definition[] Transitions
private List`1<int> _pendingIds
private bool _currentState
public void Start()
public void SwitchState(bool enabled, bool animate)
public void SwitchState(bool enabled)
public void ToggleState()
private LTDescr RunTransitionImpl(Definition& transition, bool animate)
private Single& Property(FlexElement element, TransitionProperty property)
}
public Facepunch.Flexbox.FlexUnit : Enum {
public int value__
public FlexUnit Pixels
public FlexUnit Percent
}
public Facepunch.Flexbox.IFlexNode {
public RectTransform Transform
public bool IsActive
public bool IsAbsolute
public bool IsDirty
public FlexLength MinWidth
public FlexLength MaxWidth
public FlexLength MinHeight
public FlexLength MaxHeight
public int Grow
public int Shrink
public FlexLength Basis
public FlexAlignSelf AlignSelf
public RectTransform get_Transform()
public bool get_IsActive()
public bool get_IsAbsolute()
public bool get_IsDirty()
public FlexLength get_MinWidth()
public FlexLength get_MaxWidth()
public FlexLength get_MinHeight()
public FlexLength get_MaxHeight()
public int get_Grow()
public int get_Shrink()
public FlexLength get_Basis()
public FlexAlignSelf get_AlignSelf()
public void SetLayoutDirty(bool force)
public void MeasureHorizontal()
public void LayoutHorizontal(float maxWidth, float maxHeight)
public void MeasureVertical()
public void LayoutVertical(float maxWidth, float maxHeight)
public void GetScale(Single& scaleX, Single& scaleY)
public void GetPreferredSize(Single& preferredWidth, Single& preferredHeight)
}
public Facepunch.Flexbox.Utility.FlexUtility : object {
public bool IsPrefabRoot(GameObject gameObject)
}
