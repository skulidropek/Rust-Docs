public Facepunch.BurstCloth.BurstCloth : MonoBehaviour {
internal int TickRateMultiplier
internal int MaximumTickRate
private List`1<SphereParams> SphereParamsShared
public Transform[] RootBones
public bool SiblingConstraints
public float LengthModifier
public BurstClothMaterial Material
public Vector3 Gravity
public Transform SimulationSpace
public float RootMotionStrength
public Vector2 DefaultLengthConstraint
public bool EnableCollisions
public float CollisionRadius
public AnimationCurve CollisionRadiusCurve
public bool EnableSimulation
public int TickRate
public int MaxTicksPerFrame
public int ConstraintIterationCount
internal List`1<Chain> _chains
internal List`1<BoneData> _boneDataOriginal
internal List`1<RotationConstraint> _rotationConstraintsDataOriginal
private Vector3 _origin
private Quaternion _rotation
private Vector3 _up
private Vector3 _simulationSpaceDelta
private Transform _prevSimulationSpace
private Nullable`1<Vector3> _prevSimulationOrigin
private Vector3 _originDelta
private Nullable`1<Vector3> _prevOrigin
private float _accumulator
private int _boneCount
private int _maxBoneDepth
private Dictionary`2<Transform, int> _boneToIndex
private TransformAccessArray _boneTransforms
private NativeArray`1<BoneData> _boneData
private NativeArray`1<BoneState> _boneState
private NativeArray`1<RotationConstraint> _rotationConstraints
private TransformAccessArray _sphereColliderTransforms
private NativeArray`1<SphereColliderData> _sphereColliderData
private NativeArray`1<SphereColliderState> _sphereColliderState
protected void Initialize()
protected void Awake()
protected void OnEnable()
private void ResetBoneTransforms()
protected void OnDisable()
protected internal void FrameUpdate()
internal JobHandle SimulateSystem()
private void SetupData()
private void SetupManagedData()
private void SetupNativeData()
protected ValueTuple`3<Vector3, Quaternion, Vector3> GetOriginTransform()
protected void GatherColliders(List`1<SphereParams> sphereColliders)
private ValueTuple`2<Vector3, float> GetBoneLocalPositionAndLength(Transform parent, Transform child)
private ValueTuple`2<Transform, int> GetSiblingAndIndex(int chainIndex, int depth)
private void BuildBoneToIndexMap(Dictionary`2<Transform, int> boneToIndex)
protected void UpdateCachedMaterialData()
}
public Facepunch.BurstCloth.BurstClothConstraint : MonoBehaviour {
public bool ConstrainRotateX
public Vector2 RotateX
public bool ConstrainRotateY
public Vector2 RotateY
public bool ConstrainRotateZ
public Vector2 RotateZ
public bool ConstrainLength
public Vector2 Length
}
public Facepunch.BurstCloth.BurstClothCurveRectAttribute : PropertyAttribute {
public Rect Rect
public Color Color
public void .ctor(Rect rect)
public void .ctor(float x, float y, float width, float height)
public void .ctor(Rect rect, Color color)
public void .ctor(float x, float y, float width, float height, Color color)
}
public Facepunch.BurstCloth.BurstClothManager : MonoBehaviour {
private BurstClothManager _instance
internal List`1<BurstCloth> Instances
public void LateUpdate()
public BurstClothManager Get()
}
public Facepunch.BurstCloth.BurstClothMaterial : ScriptableObject {
private float lengthRelaxation
private float shapeRelaxation
private float siblingRelaxation
private float _damping
private AnimationCurve _dampingCurve
private AnimationCurve _lengthRelaxationCurve
private AnimationCurve _shapeRelaxationCurve
private AnimationCurve _siblingConstraintWeightCurve
private bool _forceSyncInEditor
private BurstClothMaterial _defaultMaterial
public bool ForceSyncInEditor
public BurstClothMaterial DefaultMaterial
public bool get_ForceSyncInEditor()
public BurstClothMaterial get_DefaultMaterial()
public float GetLengthRelaxation(float t)
public float GetShapeRelaxation(float t)
public float GetSiblingRelaxation(float t)
public float GetDamping(float t)
}
internal Facepunch.BurstCloth.Jobs.BoneData : ValueType {
public int Depth
public int Parent
public int Child
public float Length
public float3 NormalFromParent
public int LeftSibling
public float3 NormalFromLeft
public float LengthToLeft
public int RightSibling
public float3 NormalFromRight
public float LengthToRight
public float3 LocalPosition
public quaternion LocalRotation
public float3 DirectionFromOrigin
public float CollisionRadius
public float DampingInv
public float LengthRelaxation
public float ShapeRelaxation
public float SiblingRelaxation
public int RotationConstraintIndex
public float2 LengthConstraint
}
internal Facepunch.BurstCloth.Jobs.BoneState : ValueType {
public float3 Position
public quaternion Rotation
public float3 OldPosition
public float3 Delta
}
internal Facepunch.BurstCloth.Jobs.InitializeBoneStateJob : ValueType {
public NativeArray`1<BoneData> Data
public NativeArray`1<BoneState> State
public float DeltaTime
public int IterationCount
public void Execute(int index, TransformAccess transform)
}
internal Facepunch.BurstCloth.Jobs.InitializeSphereColliderStateJob : ValueType {
public NativeArray`1<SphereColliderData> Data
public NativeArray`1<SphereColliderState> State
public void Execute(int index, TransformAccess transform)
}
internal Facepunch.BurstCloth.Jobs.RotationConstraint : ValueType {
public bool3 Constraints
public float2 X
public float2 Y
public float2 Z
public void .ctor(bool3 constraints, float2 x, float2 y, float2 z)
}
internal Facepunch.BurstCloth.Jobs.SimulatePositionsJob : ValueType {
public NativeArray`1<SphereColliderData> ColliderData
public NativeArray`1<SphereColliderState> ColliderState
public NativeArray`1<RotationConstraint> RotationConstraints
public NativeArray`1<BoneData> BoneData
public NativeArray`1<BoneState> BoneStates
public int TickRate
public float DeltaTime
public int IterationCount
public int ConstraintIterationCount
public float3 SimulationSpaceDelta
public float3 OriginDelta
public float3 Gravity
public float LengthModifier
public bool SiblingConstraints
public bool EnableCollisions
public float3 Origin
public quaternion Rotation
public float3 Up
public float Radius
public void Execute()
private void AdjustSimulationSpace()
private void MovePositions(BoneData& data, BoneState& newState)
private void ApplyLinearConstraints(BoneData& data, BoneState& state, NativeArray`1& workBoneState, Collision& collision)
private void VerletIntegrate(BoneState& state, float3 acceleration, float dt, float damping)
private void PopulateCollisions(NativeArray`1<Collision> collisions)
private void ApplyRotationConstraints(BoneData& data, BoneState& state)
private quaternion ApplyAngleLimitsConstraint(BoneData& data, NativeArray`1& rotationConstraints, quaternion rotation, quaternion parentRotation)
private float3 RayMarch(float3& origin, float3& direction, float radius, float maxDistance, Boolean& hit)
private float Scene(float3& position)
private float Union(float d1, float d2)
private float SphereSignedDistance(float3& p, float3& pSphere, Single& r)
private float Capsule(float3& p, float3& a, float3& b, float r)
private float3 Slerp(float3 a, float3 b, float t)
private quaternion FromToRotation(float3 from, float3 to)
private float ClampAngle(float current, float min, float max)
private float MoveTowardsAngle(float current, float target, float maxDelta)
private float MoveTowards(float current, float target, float maxDelta)
private float DeltaAngle(float current, float target)
private float Repeat(float t, float length)
private float3 ToEuler(quaternion q, RotationOrder order)
private float3 EulerReorderBack(float3 euler, RotationOrder order)
}
internal Facepunch.BurstCloth.Jobs.SphereColliderData : ValueType {
public float Radius
public float RadiusSqr
public float3 LocalPosition
}
internal Facepunch.BurstCloth.Jobs.SphereColliderState : ValueType {
public float3 Position
}
internal Facepunch.BurstCloth.Jobs.UpdateTransformsJob : ValueType {
public NativeArray`1<BoneData> Data
public NativeArray`1<BoneState> State
public void Execute(int index, TransformAccess transform)
}
public Facepunch.BurstCloth.SphereParams : ValueType {
public Transform Transform
public Vector3 Point
public float Radius
}
internal UnitySourceGeneratedAssemblyMonoScriptTypes_v1 : object {
private MonoScriptData Get()
}
