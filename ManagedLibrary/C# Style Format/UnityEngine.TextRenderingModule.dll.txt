public UnityEngine.CharacterInfo : ValueType {
public int index
public Rect uv
public Rect vert
public float width
public int size
public FontStyle style
public bool flipped
public int advance
public int glyphWidth
public int glyphHeight
public int bearing
public int minY
public int maxY
public int minX
public int maxX
internal Vector2 uvBottomLeftUnFlipped
internal Vector2 uvBottomRightUnFlipped
internal Vector2 uvTopRightUnFlipped
internal Vector2 uvTopLeftUnFlipped
public Vector2 uvBottomLeft
public Vector2 uvBottomRight
public Vector2 uvTopRight
public Vector2 uvTopLeft
public int get_advance()
public void set_advance(int value)
public int get_glyphWidth()
public void set_glyphWidth(int value)
public int get_glyphHeight()
public void set_glyphHeight(int value)
public int get_bearing()
public void set_bearing(int value)
public int get_minY()
public void set_minY(int value)
public int get_maxY()
public void set_maxY(int value)
public int get_minX()
public void set_minX(int value)
public int get_maxX()
public void set_maxX(int value)
internal Vector2 get_uvBottomLeftUnFlipped()
internal void set_uvBottomLeftUnFlipped(Vector2 value)
internal Vector2 get_uvBottomRightUnFlipped()
internal void set_uvBottomRightUnFlipped(Vector2 value)
internal Vector2 get_uvTopRightUnFlipped()
internal void set_uvTopRightUnFlipped(Vector2 value)
internal Vector2 get_uvTopLeftUnFlipped()
internal void set_uvTopLeftUnFlipped(Vector2 value)
public Vector2 get_uvBottomLeft()
public void set_uvBottomLeft(Vector2 value)
public Vector2 get_uvBottomRight()
public void set_uvBottomRight(Vector2 value)
public Vector2 get_uvTopRight()
public void set_uvTopRight(Vector2 value)
public Vector2 get_uvTopLeft()
public void set_uvTopLeft(Vector2 value)
}
public UnityEngine.Font : Object {
private Action`1<Font> textureRebuilt
private FontTextureRebuildCallback m_FontTextureRebuildCallback
public Material material
public String[] fontNames
public bool dynamic
public int ascent
public int fontSize
public CharacterInfo[] characterInfo
public int lineHeight
public FontTextureRebuildCallback textureRebuildCallback
public void add_textureRebuilt(Action`1<Font> value)
public void remove_textureRebuilt(Action`1<Font> value)
private void add_m_FontTextureRebuildCallback(FontTextureRebuildCallback value)
private void remove_m_FontTextureRebuildCallback(FontTextureRebuildCallback value)
public Material get_material()
public void set_material(Material value)
public String[] get_fontNames()
public void set_fontNames(String[] value)
public bool get_dynamic()
public int get_ascent()
public int get_fontSize()
public CharacterInfo[] get_characterInfo()
public void set_characterInfo(CharacterInfo[] value)
public int get_lineHeight()
public FontTextureRebuildCallback get_textureRebuildCallback()
public void set_textureRebuildCallback(FontTextureRebuildCallback value)
public void .ctor(string name)
private void .ctor(String[] names, int size)
public Font CreateDynamicFontFromOSFont(string fontname, int size)
public Font CreateDynamicFontFromOSFont(String[] fontnames, int size)
internal void InvokeTextureRebuilt_Internal(Font font)
public int GetMaxVertsForString(string str)
internal Font GetDefault()
public bool HasCharacter(char c)
private bool HasCharacter(int c)
public String[] GetOSInstalledFontNames()
public String[] GetPathsToOSFonts()
private void Internal_CreateFont(Font self, string name)
private void Internal_CreateFontFromPath(Font self, string fontPath)
private void Internal_CreateDynamicFont(Font self, String[] _names, int size)
public bool GetCharacterInfo(char ch, CharacterInfo& info, int size, FontStyle style)
public bool GetCharacterInfo(char ch, CharacterInfo& info, int size)
public bool GetCharacterInfo(char ch, CharacterInfo& info)
public void RequestCharactersInTexture(string characters, int size, FontStyle style)
public void RequestCharactersInTexture(string characters, int size)
public void RequestCharactersInTexture(string characters)
}
public UnityEngine.FontStyle : Enum {
public int value__
public FontStyle Normal
public FontStyle Bold
public FontStyle Italic
public FontStyle BoldAndItalic
}
public UnityEngine.GUIText : object {
public bool text
public Material material
public Font font
public TextAlignment alignment
public TextAnchor anchor
public float lineSpacing
public float tabSize
public int fontSize
public FontStyle fontStyle
public bool richText
public Color color
public Vector2 pixelOffset
private void FeatureRemoved()
public bool get_text()
public void set_text(bool value)
public Material get_material()
public void set_material(Material value)
public Font get_font()
public void set_font(Font value)
public TextAlignment get_alignment()
public void set_alignment(TextAlignment value)
public TextAnchor get_anchor()
public void set_anchor(TextAnchor value)
public float get_lineSpacing()
public void set_lineSpacing(float value)
public float get_tabSize()
public void set_tabSize(float value)
public int get_fontSize()
public void set_fontSize(int value)
public FontStyle get_fontStyle()
public void set_fontStyle(FontStyle value)
public bool get_richText()
public void set_richText(bool value)
public Color get_color()
public void set_color(Color value)
public Vector2 get_pixelOffset()
public void set_pixelOffset(Vector2 value)
}
public UnityEngine.HorizontalWrapMode : Enum {
public int value__
public HorizontalWrapMode Wrap
public HorizontalWrapMode Overflow
}
public UnityEngine.TextAlignment : Enum {
public int value__
public TextAlignment Left
public TextAlignment Center
public TextAlignment Right
}
public UnityEngine.TextAnchor : Enum {
public int value__
public TextAnchor UpperLeft
public TextAnchor UpperCenter
public TextAnchor UpperRight
public TextAnchor MiddleLeft
public TextAnchor MiddleCenter
public TextAnchor MiddleRight
public TextAnchor LowerLeft
public TextAnchor LowerCenter
public TextAnchor LowerRight
}
internal UnityEngine.TextGenerationError : Enum {
public int value__
public TextGenerationError None
public TextGenerationError CustomSizeOnNonDynamicFont
public TextGenerationError CustomStyleOnNonDynamicFont
public TextGenerationError NoFont
}
public UnityEngine.TextGenerationSettings : ValueType {
public Font font
public Color color
public int fontSize
public float lineSpacing
public bool richText
public float scaleFactor
public FontStyle fontStyle
public TextAnchor textAnchor
public bool alignByGeometry
public bool resizeTextForBestFit
public int resizeTextMinSize
public int resizeTextMaxSize
public bool updateBounds
public VerticalWrapMode verticalOverflow
public HorizontalWrapMode horizontalOverflow
public Vector2 generationExtents
public Vector2 pivot
public bool generateOutOfBounds
private bool CompareColors(Color left, Color right)
private bool CompareVector2(Vector2 left, Vector2 right)
public bool Equals(TextGenerationSettings other)
}
public UnityEngine.TextGenerator : object {
internal IntPtr m_Ptr
private string m_LastString
private TextGenerationSettings m_LastSettings
private bool m_HasGenerated
private TextGenerationError m_LastValid
private List`1<UIVertex> m_Verts
private List`1<UICharInfo> m_Characters
private List`1<UILineInfo> m_Lines
private bool m_CachedVerts
private bool m_CachedCharacters
private bool m_CachedLines
public int characterCountVisible
public IList`1<UIVertex> verts
public IList`1<UICharInfo> characters
public IList`1<UILineInfo> lines
public Rect rectExtents
public int vertexCount
public int characterCount
public int lineCount
public int fontSizeUsedForBestFit
public void .ctor(int initialCapacity)
protected void Finalize()
private void System.IDisposable.Dispose()
public int get_characterCountVisible()
private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings)
public void Invalidate()
public void GetCharacters(List`1<UICharInfo> characters)
public void GetLines(List`1<UILineInfo> lines)
public void GetVertices(List`1<UIVertex> vertices)
public float GetPreferredWidth(string str, TextGenerationSettings settings)
public float GetPreferredHeight(string str, TextGenerationSettings settings)
public bool PopulateWithErrors(string str, TextGenerationSettings settings, GameObject context)
public bool Populate(string str, TextGenerationSettings settings)
private TextGenerationError PopulateWithError(string str, TextGenerationSettings settings)
private TextGenerationError PopulateAlways(string str, TextGenerationSettings settings)
public IList`1<UIVertex> get_verts()
public IList`1<UICharInfo> get_characters()
public IList`1<UILineInfo> get_lines()
public Rect get_rectExtents()
public int get_vertexCount()
public int get_characterCount()
public int get_lineCount()
public int get_fontSizeUsedForBestFit()
private IntPtr Internal_Create()
private void Internal_Destroy(IntPtr ptr)
internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, UInt32& error)
internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, VerticalWrapMode verticalOverFlow, HorizontalWrapMode horizontalOverflow, bool updateBounds, TextAnchor anchor, Vector2 extents, Vector2 pivot, bool generateOutOfBounds, bool alignByGeometry, TextGenerationError& error)
public UIVertex[] GetVerticesArray()
public UICharInfo[] GetCharactersArray()
public UILineInfo[] GetLinesArray()
private void GetVerticesInternal(object vertices)
private void GetCharactersInternal(object characters)
private void GetLinesInternal(object lines)
private void get_rectExtents_Injected(Rect& ret)
private bool Populate_Internal_Injected(string str, Font font, Color& color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, UInt32& error)
}
public UnityEngine.TextMesh : Component {
public string text
public Font font
public int fontSize
public FontStyle fontStyle
public float offsetZ
public TextAlignment alignment
public TextAnchor anchor
public float characterSize
public float lineSpacing
public float tabSize
public bool richText
public Color color
public string get_text()
public void set_text(string value)
public Font get_font()
public void set_font(Font value)
public int get_fontSize()
public void set_fontSize(int value)
public FontStyle get_fontStyle()
public void set_fontStyle(FontStyle value)
public float get_offsetZ()
public void set_offsetZ(float value)
public TextAlignment get_alignment()
public void set_alignment(TextAlignment value)
public TextAnchor get_anchor()
public void set_anchor(TextAnchor value)
public float get_characterSize()
public void set_characterSize(float value)
public float get_lineSpacing()
public void set_lineSpacing(float value)
public float get_tabSize()
public void set_tabSize(float value)
public bool get_richText()
public void set_richText(bool value)
public Color get_color()
public void set_color(Color value)
private void get_color_Injected(Color& ret)
private void set_color_Injected(Color& value)
}
public UnityEngine.UICharInfo : ValueType {
public Vector2 cursorPos
public float charWidth
}
public UnityEngine.UILineInfo : ValueType {
public int startCharIdx
public int height
public float topY
public float leading
}
public UnityEngine.UIVertex : ValueType {
public Vector3 position
public Vector3 normal
public Vector4 tangent
public Color32 color
public Vector2 uv0
public Vector2 uv1
public Vector2 uv2
public Vector2 uv3
private Color32 s_DefaultColor
private Vector4 s_DefaultTangent
public UIVertex simpleVert
}
public UnityEngine.VerticalWrapMode : Enum {
public int value__
public VerticalWrapMode Truncate
public VerticalWrapMode Overflow
}
