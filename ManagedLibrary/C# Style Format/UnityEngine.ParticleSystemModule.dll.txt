public UnityEngine.ParticleCollisionEvent : ValueType {
internal Vector3 m_Intersection
internal Vector3 m_Normal
internal Vector3 m_Velocity
internal int m_ColliderInstanceID
public Vector3 intersection
public Vector3 normal
public Vector3 velocity
public Component colliderComponent
public Vector3 get_intersection()
public Vector3 get_normal()
public Vector3 get_velocity()
public Component get_colliderComponent()
private Component InstanceIDToColliderComponent(int instanceID)
}
public UnityEngine.ParticlePhysicsExtensions : object {
public int GetCollisionEvents(ParticleSystem ps, GameObject go, ParticleCollisionEvent[] collisionEvents)
public int GetSafeCollisionEventSize(ParticleSystem ps)
public int GetCollisionEvents(ParticleSystem ps, GameObject go, List`1<ParticleCollisionEvent> collisionEvents)
public int GetSafeTriggerParticlesSize(ParticleSystem ps, ParticleSystemTriggerEventType type)
public int GetTriggerParticles(ParticleSystem ps, ParticleSystemTriggerEventType type, List`1<Particle> particles)
public int GetTriggerParticles(ParticleSystem ps, ParticleSystemTriggerEventType type, List`1<Particle> particles, ColliderData& colliderData)
public void SetTriggerParticles(ParticleSystem ps, ParticleSystemTriggerEventType type, List`1<Particle> particles, int offset, int count)
public void SetTriggerParticles(ParticleSystem ps, ParticleSystemTriggerEventType type, List`1<Particle> particles)
}
public UnityEngine.ParticleSystem : Component {
public float startDelay
public bool loop
public bool playOnAwake
public float duration
public float playbackSpeed
public bool enableEmission
public float emissionRate
public float startSpeed
public float startSize
public Color startColor
public float startRotation
public Vector3 startRotation3D
public float startLifetime
public float gravityModifier
public int maxParticles
public ParticleSystemSimulationSpace simulationSpace
public ParticleSystemScalingMode scalingMode
public bool automaticCullingEnabled
public bool isPlaying
public bool isEmitting
public bool isStopped
public bool isPaused
public int particleCount
public float time
public UInt32 randomSeed
public bool useAutoRandomSeed
public bool proceduralSimulationSupported
public MainModule main
public EmissionModule emission
public ShapeModule shape
public VelocityOverLifetimeModule velocityOverLifetime
public LimitVelocityOverLifetimeModule limitVelocityOverLifetime
public InheritVelocityModule inheritVelocity
public LifetimeByEmitterSpeedModule lifetimeByEmitterSpeed
public ForceOverLifetimeModule forceOverLifetime
public ColorOverLifetimeModule colorOverLifetime
public ColorBySpeedModule colorBySpeed
public SizeOverLifetimeModule sizeOverLifetime
public SizeBySpeedModule sizeBySpeed
public RotationOverLifetimeModule rotationOverLifetime
public RotationBySpeedModule rotationBySpeed
public ExternalForcesModule externalForces
public NoiseModule noise
public CollisionModule collision
public TriggerModule trigger
public SubEmittersModule subEmitters
public TextureSheetAnimationModule textureSheetAnimation
public LightsModule lights
public TrailModule trails
public CustomDataModule customData
public void Emit(Vector3 position, Vector3 velocity, float size, float lifetime, Color32 color)
public void Emit(Particle particle)
public float get_startDelay()
public void set_startDelay(float value)
public bool get_loop()
public void set_loop(bool value)
public bool get_playOnAwake()
public void set_playOnAwake(bool value)
public float get_duration()
public float get_playbackSpeed()
public void set_playbackSpeed(float value)
public bool get_enableEmission()
public void set_enableEmission(bool value)
public float get_emissionRate()
public void set_emissionRate(float value)
public float get_startSpeed()
public void set_startSpeed(float value)
public float get_startSize()
public void set_startSize(float value)
public Color get_startColor()
public void set_startColor(Color value)
public float get_startRotation()
public void set_startRotation(float value)
public Vector3 get_startRotation3D()
public void set_startRotation3D(Vector3 value)
public float get_startLifetime()
public void set_startLifetime(float value)
public float get_gravityModifier()
public void set_gravityModifier(float value)
public int get_maxParticles()
public void set_maxParticles(int value)
public ParticleSystemSimulationSpace get_simulationSpace()
public void set_simulationSpace(ParticleSystemSimulationSpace value)
public ParticleSystemScalingMode get_scalingMode()
public void set_scalingMode(ParticleSystemScalingMode value)
public bool get_automaticCullingEnabled()
public bool get_isPlaying()
public bool get_isEmitting()
public bool get_isStopped()
public bool get_isPaused()
public int get_particleCount()
public float get_time()
public void set_time(float value)
public UInt32 get_randomSeed()
public void set_randomSeed(UInt32 value)
public bool get_useAutoRandomSeed()
public void set_useAutoRandomSeed(bool value)
public bool get_proceduralSimulationSupported()
internal float GetParticleCurrentSize(Particle& particle)
internal Vector3 GetParticleCurrentSize3D(Particle& particle)
internal Color32 GetParticleCurrentColor(Particle& particle)
internal int GetParticleMeshIndex(Particle& particle)
public void SetParticles(Particle[] particles, int size, int offset)
public void SetParticles(Particle[] particles, int size)
public void SetParticles(Particle[] particles)
private void SetParticlesWithNativeArray(IntPtr particles, int particlesLength, int size, int offset)
public void SetParticles(NativeArray`1<Particle> particles, int size, int offset)
public void SetParticles(NativeArray`1<Particle> particles, int size)
public void SetParticles(NativeArray`1<Particle> particles)
public int GetParticles(Particle[] particles, int size, int offset)
public int GetParticles(Particle[] particles, int size)
public int GetParticles(Particle[] particles)
private int GetParticlesWithNativeArray(IntPtr particles, int particlesLength, int size, int offset)
public int GetParticles(NativeArray`1<Particle> particles, int size, int offset)
public int GetParticles(NativeArray`1<Particle> particles, int size)
public int GetParticles(NativeArray`1<Particle> particles)
public void SetCustomParticleData(List`1<Vector4> customData, ParticleSystemCustomData streamIndex)
public int GetCustomParticleData(List`1<Vector4> customData, ParticleSystemCustomData streamIndex)
public PlaybackState GetPlaybackState()
public void SetPlaybackState(PlaybackState playbackState)
private void GetTrailDataInternal(Trails& trailData)
public Trails GetTrails()
public int GetTrails(Trails& trailData)
public void SetTrails(Trails trailData)
public void Simulate(float t, bool withChildren, bool restart, bool fixedTimeStep)
public void Simulate(float t, bool withChildren, bool restart)
public void Simulate(float t, bool withChildren)
public void Simulate(float t)
public void Play(bool withChildren)
public void Play()
public void Pause(bool withChildren)
public void Pause()
public void Stop(bool withChildren, ParticleSystemStopBehavior stopBehavior)
public void Stop(bool withChildren)
public void Stop()
public void Clear(bool withChildren)
public void Clear()
public bool IsAlive(bool withChildren)
public bool IsAlive()
public void Emit(int count)
private void Emit_Internal(int count)
public void Emit(EmitParams emitParams, int count)
private void EmitOld_Internal(Particle& particle)
public void TriggerSubEmitter(int subEmitterIndex)
public void TriggerSubEmitter(int subEmitterIndex, Particle& particle)
internal void TriggerSubEmitterForParticle(int subEmitterIndex, Particle particle)
public void TriggerSubEmitter(int subEmitterIndex, List`1<Particle> particles)
public void ResetPreMappedBufferMemory()
public void SetMaximumPreMappedBufferCounts(int vertexBuffersCount, int indexBuffersCount)
public void AllocateAxisOfRotationAttribute()
public void AllocateMeshIndexAttribute()
public void AllocateCustomDataAttribute(ParticleSystemCustomData stream)
internal Void* GetManagedJobData()
internal JobHandle GetManagedJobHandle()
internal void SetManagedJobHandle(JobHandle handle)
internal JobHandle ScheduleManagedJob(JobScheduleParameters& parameters, Void* additionalData)
internal void CopyManagedJobData(Void* systemPtr, NativeParticleData& particleData)
public MainModule get_main()
public EmissionModule get_emission()
public ShapeModule get_shape()
public VelocityOverLifetimeModule get_velocityOverLifetime()
public LimitVelocityOverLifetimeModule get_limitVelocityOverLifetime()
public InheritVelocityModule get_inheritVelocity()
public LifetimeByEmitterSpeedModule get_lifetimeByEmitterSpeed()
public ForceOverLifetimeModule get_forceOverLifetime()
public ColorOverLifetimeModule get_colorOverLifetime()
public ColorBySpeedModule get_colorBySpeed()
public SizeOverLifetimeModule get_sizeOverLifetime()
public SizeBySpeedModule get_sizeBySpeed()
public RotationOverLifetimeModule get_rotationOverLifetime()
public RotationBySpeedModule get_rotationBySpeed()
public ExternalForcesModule get_externalForces()
public NoiseModule get_noise()
public CollisionModule get_collision()
public TriggerModule get_trigger()
public SubEmittersModule get_subEmitters()
public TextureSheetAnimationModule get_textureSheetAnimation()
public LightsModule get_lights()
public TrailModule get_trails()
public CustomDataModule get_customData()
private void GetParticleCurrentSize3D_Injected(Particle& particle, Vector3& ret)
private void GetParticleCurrentColor_Injected(Particle& particle, Color32& ret)
private void GetPlaybackState_Injected(PlaybackState& ret)
private void SetPlaybackState_Injected(PlaybackState& playbackState)
private void SetTrails_Injected(Trails& trailData)
private void Emit_Injected(EmitParams& emitParams, int count)
private void TriggerSubEmitterForParticle_Injected(int subEmitterIndex, Particle& particle)
private void GetManagedJobHandle_Injected(JobHandle& ret)
private void SetManagedJobHandle_Injected(JobHandle& handle)
private void ScheduleManagedJob_Injected(JobScheduleParameters& parameters, Void* additionalData, JobHandle& ret)
}
public UnityEngine.ParticleSystemAnimationMode : Enum {
public int value__
public ParticleSystemAnimationMode Grid
public ParticleSystemAnimationMode Sprites
}
public UnityEngine.ParticleSystemAnimationRowMode : Enum {
public int value__
public ParticleSystemAnimationRowMode Custom
public ParticleSystemAnimationRowMode Random
public ParticleSystemAnimationRowMode MeshIndex
}
public UnityEngine.ParticleSystemAnimationTimeMode : Enum {
public int value__
public ParticleSystemAnimationTimeMode Lifetime
public ParticleSystemAnimationTimeMode Speed
public ParticleSystemAnimationTimeMode FPS
}
public UnityEngine.ParticleSystemAnimationType : Enum {
public int value__
public ParticleSystemAnimationType WholeSheet
public ParticleSystemAnimationType SingleRow
}
public UnityEngine.ParticleSystemColliderQueryMode : Enum {
public int value__
public ParticleSystemColliderQueryMode Disabled
public ParticleSystemColliderQueryMode One
public ParticleSystemColliderQueryMode All
}
public UnityEngine.ParticleSystemCollisionMode : Enum {
public int value__
public ParticleSystemCollisionMode Collision3D
public ParticleSystemCollisionMode Collision2D
}
public UnityEngine.ParticleSystemCollisionQuality : Enum {
public int value__
public ParticleSystemCollisionQuality High
public ParticleSystemCollisionQuality Medium
public ParticleSystemCollisionQuality Low
}
public UnityEngine.ParticleSystemCollisionType : Enum {
public int value__
public ParticleSystemCollisionType Planes
public ParticleSystemCollisionType World
}
public UnityEngine.ParticleSystemCullingMode : Enum {
public int value__
public ParticleSystemCullingMode Automatic
public ParticleSystemCullingMode PauseAndCatchup
public ParticleSystemCullingMode Pause
public ParticleSystemCullingMode AlwaysSimulate
}
public UnityEngine.ParticleSystemCurveMode : Enum {
public int value__
public ParticleSystemCurveMode Constant
public ParticleSystemCurveMode Curve
public ParticleSystemCurveMode TwoCurves
public ParticleSystemCurveMode TwoConstants
}
public UnityEngine.ParticleSystemCustomData : Enum {
public int value__
public ParticleSystemCustomData Custom1
public ParticleSystemCustomData Custom2
}
public UnityEngine.ParticleSystemCustomDataMode : Enum {
public int value__
public ParticleSystemCustomDataMode Disabled
public ParticleSystemCustomDataMode Vector
public ParticleSystemCustomDataMode Color
}
public UnityEngine.ParticleSystemEmissionType : Enum {
public int value__
public ParticleSystemEmissionType Time
public ParticleSystemEmissionType Distance
}
public UnityEngine.ParticleSystemEmitterVelocityMode : Enum {
public int value__
public ParticleSystemEmitterVelocityMode Transform
public ParticleSystemEmitterVelocityMode Rigidbody
public ParticleSystemEmitterVelocityMode Custom
}
internal UnityEngine.ParticleSystemExtensionsImpl : object {
internal int GetSafeCollisionEventSize(ParticleSystem ps)
internal int GetCollisionEventsDeprecated(ParticleSystem ps, GameObject go, ParticleCollisionEvent[] collisionEvents)
internal int GetSafeTriggerParticlesSize(ParticleSystem ps, int type)
internal int GetCollisionEvents(ParticleSystem ps, GameObject go, List`1<ParticleCollisionEvent> collisionEvents)
internal int GetTriggerParticles(ParticleSystem ps, int type, List`1<Particle> particles)
internal int GetTriggerParticlesWithData(ParticleSystem ps, int type, List`1<Particle> particles, ColliderData& colliderData)
internal void SetTriggerParticles(ParticleSystem ps, int type, List`1<Particle> particles, int offset, int count)
}
public UnityEngine.ParticleSystemForceField : Behaviour {
public ParticleSystemForceFieldShape shape
public float startRange
public float endRange
public float length
public float gravityFocus
public Vector2 rotationRandomness
public bool multiplyDragByParticleSize
public bool multiplyDragByParticleVelocity
public Texture3D vectorField
public MinMaxCurve directionX
public MinMaxCurve directionY
public MinMaxCurve directionZ
public MinMaxCurve gravity
public MinMaxCurve rotationSpeed
public MinMaxCurve rotationAttraction
public MinMaxCurve drag
public MinMaxCurve vectorFieldSpeed
public MinMaxCurve vectorFieldAttraction
public ParticleSystemForceFieldShape get_shape()
public void set_shape(ParticleSystemForceFieldShape value)
public float get_startRange()
public void set_startRange(float value)
public float get_endRange()
public void set_endRange(float value)
public float get_length()
public void set_length(float value)
public float get_gravityFocus()
public void set_gravityFocus(float value)
public Vector2 get_rotationRandomness()
public void set_rotationRandomness(Vector2 value)
public bool get_multiplyDragByParticleSize()
public void set_multiplyDragByParticleSize(bool value)
public bool get_multiplyDragByParticleVelocity()
public void set_multiplyDragByParticleVelocity(bool value)
public Texture3D get_vectorField()
public void set_vectorField(Texture3D value)
public MinMaxCurve get_directionX()
public void set_directionX(MinMaxCurve value)
public MinMaxCurve get_directionY()
public void set_directionY(MinMaxCurve value)
public MinMaxCurve get_directionZ()
public void set_directionZ(MinMaxCurve value)
public MinMaxCurve get_gravity()
public void set_gravity(MinMaxCurve value)
public MinMaxCurve get_rotationSpeed()
public void set_rotationSpeed(MinMaxCurve value)
public MinMaxCurve get_rotationAttraction()
public void set_rotationAttraction(MinMaxCurve value)
public MinMaxCurve get_drag()
public void set_drag(MinMaxCurve value)
public MinMaxCurve get_vectorFieldSpeed()
public void set_vectorFieldSpeed(MinMaxCurve value)
public MinMaxCurve get_vectorFieldAttraction()
public void set_vectorFieldAttraction(MinMaxCurve value)
private void get_rotationRandomness_Injected(Vector2& ret)
private void set_rotationRandomness_Injected(Vector2& value)
private void get_directionX_Injected(MinMaxCurve& ret)
private void set_directionX_Injected(MinMaxCurve& value)
private void get_directionY_Injected(MinMaxCurve& ret)
private void set_directionY_Injected(MinMaxCurve& value)
private void get_directionZ_Injected(MinMaxCurve& ret)
private void set_directionZ_Injected(MinMaxCurve& value)
private void get_gravity_Injected(MinMaxCurve& ret)
private void set_gravity_Injected(MinMaxCurve& value)
private void get_rotationSpeed_Injected(MinMaxCurve& ret)
private void set_rotationSpeed_Injected(MinMaxCurve& value)
private void get_rotationAttraction_Injected(MinMaxCurve& ret)
private void set_rotationAttraction_Injected(MinMaxCurve& value)
private void get_drag_Injected(MinMaxCurve& ret)
private void set_drag_Injected(MinMaxCurve& value)
private void get_vectorFieldSpeed_Injected(MinMaxCurve& ret)
private void set_vectorFieldSpeed_Injected(MinMaxCurve& value)
private void get_vectorFieldAttraction_Injected(MinMaxCurve& ret)
private void set_vectorFieldAttraction_Injected(MinMaxCurve& value)
}
public UnityEngine.ParticleSystemForceFieldShape : Enum {
public int value__
public ParticleSystemForceFieldShape Sphere
public ParticleSystemForceFieldShape Hemisphere
public ParticleSystemForceFieldShape Cylinder
public ParticleSystemForceFieldShape Box
}
public UnityEngine.ParticleSystemGameObjectFilter : Enum {
public int value__
public ParticleSystemGameObjectFilter LayerMask
public ParticleSystemGameObjectFilter List
public ParticleSystemGameObjectFilter LayerMaskAndList
}
public UnityEngine.ParticleSystemGradientMode : Enum {
public int value__
public ParticleSystemGradientMode Color
public ParticleSystemGradientMode Gradient
public ParticleSystemGradientMode TwoColors
public ParticleSystemGradientMode TwoGradients
public ParticleSystemGradientMode RandomColor
}
public UnityEngine.ParticleSystemInheritVelocityMode : Enum {
public int value__
public ParticleSystemInheritVelocityMode Initial
public ParticleSystemInheritVelocityMode Current
}
public UnityEngine.ParticleSystemJobs.IJobParticleSystem {
public void Execute(ParticleSystemJobData jobData)
}
public UnityEngine.ParticleSystemJobs.IJobParticleSystemParallelFor {
public void Execute(ParticleSystemJobData jobData, int index)
}
public UnityEngine.ParticleSystemJobs.IJobParticleSystemParallelForBatch {
public void Execute(ParticleSystemJobData jobData, int startIndex, int count)
}
public UnityEngine.ParticleSystemJobs.IParticleSystemJobExtensions : object {
public JobHandle Schedule(T jobData, ParticleSystem ps, JobHandle dependsOn)
public JobHandle Schedule(T jobData, ParticleSystem ps, int minIndicesPerJobCount, JobHandle dependsOn)
public JobHandle ScheduleBatch(T jobData, ParticleSystem ps, int innerLoopBatchCount, JobHandle dependsOn)
private JobScheduleParameters CreateScheduleParams(T& jobData, ParticleSystem ps, JobHandle dependsOn, IntPtr jobReflectionData)
}
internal UnityEngine.ParticleSystemJobs.NativeListData : ValueType {
public Void* system
public int length
public int capacity
}
internal UnityEngine.ParticleSystemJobs.NativeParticleData : ValueType {
internal int count
internal Array3 positions
internal Array3 velocities
internal Array3 axisOfRotations
internal Array3 rotations
internal Array3 rotationalSpeeds
internal Array3 sizes
internal Void* startColors
internal Void* aliveTimePercent
internal Void* inverseStartLifetimes
internal Void* randomSeeds
internal Array4 customData1
internal Array4 customData2
internal Void* meshIndices
}
public UnityEngine.ParticleSystemJobs.ParticleSystemJobData : ValueType {
private int <count>k__BackingField
private ParticleSystemNativeArray3 <positions>k__BackingField
private ParticleSystemNativeArray3 <velocities>k__BackingField
private ParticleSystemNativeArray3 <axisOfRotations>k__BackingField
private ParticleSystemNativeArray3 <rotations>k__BackingField
private ParticleSystemNativeArray3 <rotationalSpeeds>k__BackingField
private ParticleSystemNativeArray3 <sizes>k__BackingField
private NativeArray`1<Color32> <startColors>k__BackingField
private NativeArray`1<float> <aliveTimePercent>k__BackingField
private NativeArray`1<float> <inverseStartLifetimes>k__BackingField
private NativeArray`1<UInt32> <randomSeeds>k__BackingField
private ParticleSystemNativeArray4 <customData1>k__BackingField
private ParticleSystemNativeArray4 <customData2>k__BackingField
private NativeArray`1<int> <meshIndices>k__BackingField
public int count
public ParticleSystemNativeArray3 positions
public ParticleSystemNativeArray3 velocities
public ParticleSystemNativeArray3 axisOfRotations
public ParticleSystemNativeArray3 rotations
public ParticleSystemNativeArray3 rotationalSpeeds
public ParticleSystemNativeArray3 sizes
public NativeArray`1<Color32> startColors
public NativeArray`1<float> aliveTimePercent
public NativeArray`1<float> inverseStartLifetimes
public NativeArray`1<UInt32> randomSeeds
public ParticleSystemNativeArray4 customData1
public ParticleSystemNativeArray4 customData2
public NativeArray`1<int> meshIndices
public int get_count()
public ParticleSystemNativeArray3 get_positions()
public ParticleSystemNativeArray3 get_velocities()
public ParticleSystemNativeArray3 get_axisOfRotations()
public ParticleSystemNativeArray3 get_rotations()
public ParticleSystemNativeArray3 get_rotationalSpeeds()
public ParticleSystemNativeArray3 get_sizes()
public NativeArray`1<Color32> get_startColors()
public NativeArray`1<float> get_aliveTimePercent()
public NativeArray`1<float> get_inverseStartLifetimes()
public NativeArray`1<UInt32> get_randomSeeds()
public ParticleSystemNativeArray4 get_customData1()
public ParticleSystemNativeArray4 get_customData2()
public NativeArray`1<int> get_meshIndices()
internal void .ctor(NativeParticleData& nativeData)
internal NativeArray`1<T> CreateNativeArray(Void* src, int count)
internal ParticleSystemNativeArray3 CreateNativeArray3(Array3& ptrs, int count)
internal ParticleSystemNativeArray4 CreateNativeArray4(Array4& ptrs, int count)
}
internal UnityEngine.ParticleSystemJobs.ParticleSystemJobStruct`1 : ValueType {
public IntPtr jobReflectionData
public IntPtr Initialize()
public void Execute(T& data, IntPtr listDataPtr, IntPtr unusedPtr, JobRanges& ranges, int jobIndex)
}
public UnityEngine.ParticleSystemJobs.ParticleSystemNativeArray3 : ValueType {
public NativeArray`1<float> x
public NativeArray`1<float> y
public NativeArray`1<float> z
public Vector3 Item
public Vector3 get_Item(int index)
public void set_Item(int index, Vector3 value)
}
public UnityEngine.ParticleSystemJobs.ParticleSystemNativeArray4 : ValueType {
public NativeArray`1<float> x
public NativeArray`1<float> y
public NativeArray`1<float> z
public NativeArray`1<float> w
public Vector4 Item
public Vector4 get_Item(int index)
public void set_Item(int index, Vector4 value)
}
internal UnityEngine.ParticleSystemJobs.ParticleSystemParallelForBatchJobStruct`1 : ValueType {
public IntPtr jobReflectionData
public IntPtr Initialize()
public void Execute(T& data, IntPtr listDataPtr, IntPtr bufferRangePatchData, JobRanges& ranges, int jobIndex)
}
internal UnityEngine.ParticleSystemJobs.ParticleSystemParallelForJobStruct`1 : ValueType {
public IntPtr jobReflectionData
public IntPtr Initialize()
public void Execute(T& data, IntPtr listDataPtr, IntPtr bufferRangePatchData, JobRanges& ranges, int jobIndex)
}
public UnityEngine.ParticleSystemMeshDistribution : Enum {
public int value__
public ParticleSystemMeshDistribution UniformRandom
public ParticleSystemMeshDistribution NonUniformRandom
}
public UnityEngine.ParticleSystemMeshShapeType : Enum {
public int value__
public ParticleSystemMeshShapeType Vertex
public ParticleSystemMeshShapeType Edge
public ParticleSystemMeshShapeType Triangle
}
public UnityEngine.ParticleSystemNoiseQuality : Enum {
public int value__
public ParticleSystemNoiseQuality Low
public ParticleSystemNoiseQuality Medium
public ParticleSystemNoiseQuality High
}
public UnityEngine.ParticleSystemOverlapAction : Enum {
public int value__
public ParticleSystemOverlapAction Ignore
public ParticleSystemOverlapAction Kill
public ParticleSystemOverlapAction Callback
}
public UnityEngine.ParticleSystemRenderer : Renderer {
public ParticleSystemRenderSpace alignment
public ParticleSystemRenderMode renderMode
public ParticleSystemMeshDistribution meshDistribution
public ParticleSystemSortMode sortMode
public float lengthScale
public float velocityScale
public float cameraVelocityScale
public float normalDirection
public float shadowBias
public float sortingFudge
public float minParticleSize
public float maxParticleSize
public Vector3 pivot
public Vector3 flip
public SpriteMaskInteraction maskInteraction
public Material trailMaterial
internal Material oldTrailMaterial
public bool enableGPUInstancing
public bool allowRoll
public bool freeformStretching
public bool rotateWithStretchDirection
public Mesh mesh
public int meshCount
public int activeVertexStreamsCount
public void EnableVertexStreams(ParticleSystemVertexStreams streams)
public void DisableVertexStreams(ParticleSystemVertexStreams streams)
public bool AreVertexStreamsEnabled(ParticleSystemVertexStreams streams)
public ParticleSystemVertexStreams GetEnabledVertexStreams(ParticleSystemVertexStreams streams)
internal void Internal_SetVertexStreams(ParticleSystemVertexStreams streams, bool enabled)
internal ParticleSystemVertexStreams Internal_GetEnabledVertexStreams(ParticleSystemVertexStreams streams)
public ParticleSystemRenderSpace get_alignment()
public void set_alignment(ParticleSystemRenderSpace value)
public ParticleSystemRenderMode get_renderMode()
public void set_renderMode(ParticleSystemRenderMode value)
public ParticleSystemMeshDistribution get_meshDistribution()
public void set_meshDistribution(ParticleSystemMeshDistribution value)
public ParticleSystemSortMode get_sortMode()
public void set_sortMode(ParticleSystemSortMode value)
public float get_lengthScale()
public void set_lengthScale(float value)
public float get_velocityScale()
public void set_velocityScale(float value)
public float get_cameraVelocityScale()
public void set_cameraVelocityScale(float value)
public float get_normalDirection()
public void set_normalDirection(float value)
public float get_shadowBias()
public void set_shadowBias(float value)
public float get_sortingFudge()
public void set_sortingFudge(float value)
public float get_minParticleSize()
public void set_minParticleSize(float value)
public float get_maxParticleSize()
public void set_maxParticleSize(float value)
public Vector3 get_pivot()
public void set_pivot(Vector3 value)
public Vector3 get_flip()
public void set_flip(Vector3 value)
public SpriteMaskInteraction get_maskInteraction()
public void set_maskInteraction(SpriteMaskInteraction value)
public Material get_trailMaterial()
public void set_trailMaterial(Material value)
internal void set_oldTrailMaterial(Material value)
public bool get_enableGPUInstancing()
public void set_enableGPUInstancing(bool value)
public bool get_allowRoll()
public void set_allowRoll(bool value)
public bool get_freeformStretching()
public void set_freeformStretching(bool value)
public bool get_rotateWithStretchDirection()
public void set_rotateWithStretchDirection(bool value)
public Mesh get_mesh()
public void set_mesh(Mesh value)
public int GetMeshes(Mesh[] meshes)
public void SetMeshes(Mesh[] meshes, int size)
public void SetMeshes(Mesh[] meshes)
public int GetMeshWeightings(Single[] weightings)
public void SetMeshWeightings(Single[] weightings, int size)
public void SetMeshWeightings(Single[] weightings)
public int get_meshCount()
public void BakeMesh(Mesh mesh, bool useTransform)
public void BakeMesh(Mesh mesh, Camera camera, bool useTransform)
public void BakeTrailsMesh(Mesh mesh, bool useTransform)
public void BakeTrailsMesh(Mesh mesh, Camera camera, bool useTransform)
public int get_activeVertexStreamsCount()
public void SetActiveVertexStreams(List`1<ParticleSystemVertexStream> streams)
public void GetActiveVertexStreams(List`1<ParticleSystemVertexStream> streams)
private void get_pivot_Injected(Vector3& ret)
private void set_pivot_Injected(Vector3& value)
private void get_flip_Injected(Vector3& ret)
private void set_flip_Injected(Vector3& value)
}
public UnityEngine.ParticleSystemRenderMode : Enum {
public int value__
public ParticleSystemRenderMode Billboard
public ParticleSystemRenderMode Stretch
public ParticleSystemRenderMode HorizontalBillboard
public ParticleSystemRenderMode VerticalBillboard
public ParticleSystemRenderMode Mesh
public ParticleSystemRenderMode None
}
public UnityEngine.ParticleSystemRenderSpace : Enum {
public int value__
public ParticleSystemRenderSpace View
public ParticleSystemRenderSpace World
public ParticleSystemRenderSpace Local
public ParticleSystemRenderSpace Facing
public ParticleSystemRenderSpace Velocity
}
public UnityEngine.ParticleSystemRingBufferMode : Enum {
public int value__
public ParticleSystemRingBufferMode Disabled
public ParticleSystemRingBufferMode PauseUntilReplaced
public ParticleSystemRingBufferMode LoopUntilReplaced
}
public UnityEngine.ParticleSystemScalingMode : Enum {
public int value__
public ParticleSystemScalingMode Hierarchy
public ParticleSystemScalingMode Local
public ParticleSystemScalingMode Shape
}
public UnityEngine.ParticleSystemShapeMultiModeValue : Enum {
public int value__
public ParticleSystemShapeMultiModeValue Random
public ParticleSystemShapeMultiModeValue Loop
public ParticleSystemShapeMultiModeValue PingPong
public ParticleSystemShapeMultiModeValue BurstSpread
}
public UnityEngine.ParticleSystemShapeTextureChannel : Enum {
public int value__
public ParticleSystemShapeTextureChannel Red
public ParticleSystemShapeTextureChannel Green
public ParticleSystemShapeTextureChannel Blue
public ParticleSystemShapeTextureChannel Alpha
}
public UnityEngine.ParticleSystemShapeType : Enum {
public int value__
public ParticleSystemShapeType Sphere
public ParticleSystemShapeType SphereShell
public ParticleSystemShapeType Hemisphere
public ParticleSystemShapeType HemisphereShell
public ParticleSystemShapeType Cone
public ParticleSystemShapeType Box
public ParticleSystemShapeType Mesh
public ParticleSystemShapeType ConeShell
public ParticleSystemShapeType ConeVolume
public ParticleSystemShapeType ConeVolumeShell
public ParticleSystemShapeType Circle
public ParticleSystemShapeType CircleEdge
public ParticleSystemShapeType SingleSidedEdge
public ParticleSystemShapeType MeshRenderer
public ParticleSystemShapeType SkinnedMeshRenderer
public ParticleSystemShapeType BoxShell
public ParticleSystemShapeType BoxEdge
public ParticleSystemShapeType Donut
public ParticleSystemShapeType Rectangle
public ParticleSystemShapeType Sprite
public ParticleSystemShapeType SpriteRenderer
}
public UnityEngine.ParticleSystemSimulationSpace : Enum {
public int value__
public ParticleSystemSimulationSpace Local
public ParticleSystemSimulationSpace World
public ParticleSystemSimulationSpace Custom
}
public UnityEngine.ParticleSystemSortMode : Enum {
public int value__
public ParticleSystemSortMode None
public ParticleSystemSortMode Distance
public ParticleSystemSortMode OldestInFront
public ParticleSystemSortMode YoungestInFront
public ParticleSystemSortMode Depth
}
public UnityEngine.ParticleSystemStopAction : Enum {
public int value__
public ParticleSystemStopAction None
public ParticleSystemStopAction Disable
public ParticleSystemStopAction Destroy
public ParticleSystemStopAction Callback
}
public UnityEngine.ParticleSystemStopBehavior : Enum {
public int value__
public ParticleSystemStopBehavior StopEmittingAndClear
public ParticleSystemStopBehavior StopEmitting
}
public UnityEngine.ParticleSystemSubEmitterProperties : Enum {
public int value__
public ParticleSystemSubEmitterProperties InheritNothing
public ParticleSystemSubEmitterProperties InheritEverything
public ParticleSystemSubEmitterProperties InheritColor
public ParticleSystemSubEmitterProperties InheritSize
public ParticleSystemSubEmitterProperties InheritRotation
public ParticleSystemSubEmitterProperties InheritLifetime
public ParticleSystemSubEmitterProperties InheritDuration
}
public UnityEngine.ParticleSystemSubEmitterType : Enum {
public int value__
public ParticleSystemSubEmitterType Birth
public ParticleSystemSubEmitterType Collision
public ParticleSystemSubEmitterType Death
public ParticleSystemSubEmitterType Trigger
public ParticleSystemSubEmitterType Manual
}
public UnityEngine.ParticleSystemTrailMode : Enum {
public int value__
public ParticleSystemTrailMode PerParticle
public ParticleSystemTrailMode Ribbon
}
public UnityEngine.ParticleSystemTrailTextureMode : Enum {
public int value__
public ParticleSystemTrailTextureMode Stretch
public ParticleSystemTrailTextureMode Tile
public ParticleSystemTrailTextureMode DistributePerSegment
public ParticleSystemTrailTextureMode RepeatPerSegment
}
public UnityEngine.ParticleSystemTriggerEventType : Enum {
public int value__
public ParticleSystemTriggerEventType Inside
public ParticleSystemTriggerEventType Outside
public ParticleSystemTriggerEventType Enter
public ParticleSystemTriggerEventType Exit
}
public UnityEngine.ParticleSystemVertexStream : Enum {
public int value__
public ParticleSystemVertexStream Position
public ParticleSystemVertexStream Normal
public ParticleSystemVertexStream Tangent
public ParticleSystemVertexStream Color
public ParticleSystemVertexStream UV
public ParticleSystemVertexStream UV2
public ParticleSystemVertexStream UV3
public ParticleSystemVertexStream UV4
public ParticleSystemVertexStream AnimBlend
public ParticleSystemVertexStream AnimFrame
public ParticleSystemVertexStream Center
public ParticleSystemVertexStream VertexID
public ParticleSystemVertexStream SizeX
public ParticleSystemVertexStream SizeXY
public ParticleSystemVertexStream SizeXYZ
public ParticleSystemVertexStream Rotation
public ParticleSystemVertexStream Rotation3D
public ParticleSystemVertexStream RotationSpeed
public ParticleSystemVertexStream RotationSpeed3D
public ParticleSystemVertexStream Velocity
public ParticleSystemVertexStream Speed
public ParticleSystemVertexStream AgePercent
public ParticleSystemVertexStream InvStartLifetime
public ParticleSystemVertexStream StableRandomX
public ParticleSystemVertexStream StableRandomXY
public ParticleSystemVertexStream StableRandomXYZ
public ParticleSystemVertexStream StableRandomXYZW
public ParticleSystemVertexStream VaryingRandomX
public ParticleSystemVertexStream VaryingRandomXY
public ParticleSystemVertexStream VaryingRandomXYZ
public ParticleSystemVertexStream VaryingRandomXYZW
public ParticleSystemVertexStream Custom1X
public ParticleSystemVertexStream Custom1XY
public ParticleSystemVertexStream Custom1XYZ
public ParticleSystemVertexStream Custom1XYZW
public ParticleSystemVertexStream Custom2X
public ParticleSystemVertexStream Custom2XY
public ParticleSystemVertexStream Custom2XYZ
public ParticleSystemVertexStream Custom2XYZW
public ParticleSystemVertexStream NoiseSumX
public ParticleSystemVertexStream NoiseSumXY
public ParticleSystemVertexStream NoiseSumXYZ
public ParticleSystemVertexStream NoiseImpulseX
public ParticleSystemVertexStream NoiseImpulseXY
public ParticleSystemVertexStream NoiseImpulseXYZ
public ParticleSystemVertexStream MeshIndex
}
public UnityEngine.ParticleSystemVertexStreams : Enum {
public int value__
public ParticleSystemVertexStreams Position
public ParticleSystemVertexStreams Normal
public ParticleSystemVertexStreams Tangent
public ParticleSystemVertexStreams Color
public ParticleSystemVertexStreams UV
public ParticleSystemVertexStreams UV2BlendAndFrame
public ParticleSystemVertexStreams CenterAndVertexID
public ParticleSystemVertexStreams Size
public ParticleSystemVertexStreams Rotation
public ParticleSystemVertexStreams Velocity
public ParticleSystemVertexStreams Lifetime
public ParticleSystemVertexStreams Custom1
public ParticleSystemVertexStreams Custom2
public ParticleSystemVertexStreams Random
public ParticleSystemVertexStreams None
public ParticleSystemVertexStreams All
}
public UnityEngine.Rendering.UVChannelFlags : Enum {
public int value__
public UVChannelFlags UV0
public UVChannelFlags UV1
public UVChannelFlags UV2
public UVChannelFlags UV3
}
