internal Unity.TLS.LowLevel.Binding : object {
public int UNITYTLS_SUCCESS
public int UNITYTLS_INVALID_ARGUMENT
public int UNITYTLS_INVALID_FORMAT
public int UNITYTLS_INVALID_PASSWORD
public int UNITYTLS_INVALID_STATE
public int UNITYTLS_BUFFER_OVERFLOW
public int UNITYTLS_OUT_OF_MEMORY
public int UNITYTLS_INTERNAL_ERROR
public int UNITYTLS_NOT_SUPPORTED
public int UNITYTLS_ENTROPY_SOURCE_FAILED
public int UNITYTLS_STREAM_CLOSED
public int UNITYTLS_DER_PARSE_ERROR
public int UNITYTLS_KEY_PARSE_ERROR
public int UNITYTLS_SSL_ERROR
public int UNITYTLS_USER_CUSTOM_ERROR_START
public int UNITYTLS_USER_WOULD_BLOCK
public int UNITYTLS_USER_WOULD_BLOCK_READ
public int UNITYTLS_USER_WOULD_BLOCK_WRITE
public int UNITYTLS_USER_READ_FAILED
public int UNITYTLS_USER_WRITE_FAILED
public int UNITYTLS_USER_UNKNOWN_ERROR
public int UNITYTLS_SSL_NEEDS_VERIFY
public int UNITYTLS_HANDSHAKE_STEP
public int UNITYTLS_USER_CUSTOM_ERROR_END
public int UNITYTLS_LOGLEVEL_MIN
public int UNITYTLS_LOGLEVEL_FATAL
public int UNITYTLS_LOGLEVEL_ERROR
public int UNITYTLS_LOGLEVEL_WARN
public int UNITYTLS_LOGLEVEL_INFO
public int UNITYTLS_LOGLEVEL_DEBUG
public int UNITYTLS_LOGLEVEL_TRACE
public int UNITYTLS_LOGLEVEL_MAX
public int UNITYTLS_SSL_HANDSHAKE_HELLO_REQUEST
public int UNITYTLS_SSL_HANDSHAKE_CLIENT_HELLO
public int UNITYTLS_SSL_HANDSHAKE_SERVER_HELLO
public int UNITYTLS_SSL_HANDSHAKE_SERVER_CERTIFICATE
public int UNITYTLS_SSL_HANDSHAKE_SERVER_KEY_EXCHANGE
public int UNITYTLS_SSL_HANDSHAKE_CERTIFICATE_REQUEST
public int UNITYTLS_SSL_HANDSHAKE_SERVER_HELLO_DONE
public int UNITYTLS_SSL_HANDSHAKE_CLIENT_CERTIFICATE
public int UNITYTLS_SSL_HANDSHAKE_CLIENT_KEY_EXCHANGE
public int UNITYTLS_SSL_HANDSHAKE_CERTIFICATE_VERIFY
public int UNITYTLS_SSL_HANDSHAKE_CLIENT_CHANGE_CIPHER_SPEC
public int UNITYTLS_SSL_HANDSHAKE_CLIENT_FINISHED
public int UNITYTLS_SSL_HANDSHAKE_SERVER_CHANGE_CIPHER_SPEC
public int UNITYTLS_SSL_HANDSHAKE_SERVER_FINISHED
public int UNITYTLS_SSL_HANDSHAKE_FLUSH_BUFFERS
public int UNITYTLS_SSL_HANDSHAKE_WRAPUP
public int UNITYTLS_SSL_HANDSHAKE_OVER
public int UNITYTLS_SSL_HANDSHAKE_SERVER_NEW_SESSION_TICKET
public int UNITYTLS_SSL_HANDSHAKE_HELLO_VERIFY_REQUIRED
public int UNITYTLS_SSL_HANDSHAKE_COUNT
public int UNITYTLS_SSL_HANDSHAKE_BEGIN
public int UNITYTLS_SSL_HANDSHAKE_DONE
public int UNITYTLS_SSL_HANDSHAKE_HANDSHAKE_FLUSH_BUFFERS
public int UNITYTLS_SSL_HANDSHAKE_HANDSHAKE_WRAPUP
public int UNITYTLS_SSL_HANDSHAKE_HANDSHAKE_OVER
public int UnityTLSClientAuth_None
public int UnityTLSClientAuth_Optional
public int UnityTLSClientAuth_Required
public int UnityTLSRole_None
public int UnityTLSRole_Server
public int UnityTLSRole_Client
public int UnityTLSTransportProtocol_Stream
public int UnityTLSTransportProtocol_Datagram
public int UnityTLSClientState_None
public int UnityTLSClientState_Init
public int UnityTLSClientState_Handshake
public int UnityTLSClientState_Messaging
public int UnityTLSClientState_Fail
public UInt32 unitytls_client_send_data(unitytls_client* clientInstance, Byte* data, UIntPtr dataLen)
public UInt32 unitytls_client_read_data(unitytls_client* clientInstance, Byte* buffer, UIntPtr bufferLen, UIntPtr* bytesRead)
public void unitytls_client_add_ciphersuite(unitytls_client* clientInstance, UInt32 suite)
public UInt32 unitytls_client_get_ciphersuite(unitytls_client* clientInstance, int ndx)
public int unitytls_client_get_ciphersuite_cnt(unitytls_client* clientInstance)
public void unitytls_client_init_config(unitytls_client_config* config)
public unitytls_client* unitytls_client_create(UInt32 role, unitytls_client_config* config)
public void unitytls_client_destroy(unitytls_client* clientInstance)
public int unitytls_client_init(unitytls_client* clientInstance)
public UInt32 unitytls_client_handshake(unitytls_client* clientInstance)
public UInt32 unitytls_client_set_cookie_info(unitytls_client* clientInstance, Byte* peerIdDataPtr, int peerIdDataLen)
public UInt32 unitytls_client_get_handshake_state(unitytls_client* clientInstance)
public UInt32 unitytls_client_get_errorsState(unitytls_client* clientInstance, UInt64* reserved)
public UInt32 unitytls_client_get_state(unitytls_client* clientInstance)
public UInt32 unitytls_client_get_role(unitytls_client* clientInstance)
}
