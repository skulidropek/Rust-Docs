public Coffee.UIEffects.BaseMaterialEffect : BaseMeshEffect {
protected Hash128 k_InvalidHash
protected List`1<UIVertex> s_TempVerts
private StringBuilder s_StringBuilder
private Hash128 _effectMaterialHash
private int <parameterIndex>k__BackingField
public int parameterIndex
public ParameterTexture paramTex
public int get_parameterIndex()
public void set_parameterIndex(int value)
public ParameterTexture get_paramTex()
public void SetMaterialDirty()
public Hash128 GetMaterialHash(Material baseMaterial)
public Material GetModifiedMaterial(Material baseMaterial)
public Material GetModifiedMaterial(Material baseMaterial, Graphic graphic)
public void ModifyMaterial(Material newMaterial, Graphic graphic)
protected void SetShaderVariants(Material newMaterial, Object[] variants)
protected void OnEnable()
protected void OnDisable()
}
public Coffee.UIEffects.BaseMeshEffect : UIBehaviour {
private RectTransform _rectTransform
private Graphic _graphic
private GraphicConnector _connector
internal List`1<UISyncEffect> syncEffects
protected GraphicConnector connector
public Graphic graphic
protected RectTransform rectTransform
protected GraphicConnector get_connector()
public Graphic get_graphic()
protected RectTransform get_rectTransform()
public void ModifyMesh(Mesh mesh)
public void ModifyMesh(VertexHelper vh)
public void ModifyMesh(VertexHelper vh, Graphic graphic)
protected void SetVerticesDirty()
protected void OnEnable()
protected void OnDisable()
protected void SetEffectParamsDirty()
protected void OnDidApplyAnimationProperties()
}
public Coffee.UIEffects.BlurMode : Enum {
public int value__
public BlurMode None
public BlurMode FastBlur
public BlurMode MediumBlur
public BlurMode DetailBlur
}
public Coffee.UIEffects.ColorMode : Enum {
public int value__
public ColorMode Multiply
public ColorMode Fill
public ColorMode Add
public ColorMode Subtract
}
public Coffee.UIEffects.EffectArea : Enum {
public int value__
public EffectArea RectTransform
public EffectArea Fit
public EffectArea Character
}
public Coffee.UIEffects.EffectAreaExtensions : object {
private Rect rectForCharacter
private Vector2[] splitedCharacterPosition
public Rect GetEffectArea(EffectArea area, VertexHelper vh, Rect rectangle, float aspectRatio)
public void GetPositionFactor(EffectArea area, int index, Rect rect, Vector2 position, bool isText, bool isTMPro, Single& x, Single& y)
public void GetNormalizedFactor(EffectArea area, int index, Matrix2x3 matrix, Vector2 position, bool isText, Vector2& nomalizedPos)
}
public Coffee.UIEffects.EffectMode : Enum {
public int value__
public EffectMode None
public EffectMode Grayscale
public EffectMode Sepia
public EffectMode Nega
public EffectMode Pixel
}
public Coffee.UIEffects.GraphicConnector : object {
private List`1<GraphicConnector> s_Connectors
private Dictionary`2<Type, GraphicConnector> s_ConnectorMap
private GraphicConnector s_EmptyConnector
protected int priority
public AdditionalCanvasShaderChannels extraChannel
private void Init()
protected void AddConnector(GraphicConnector connector)
public GraphicConnector FindConnector(Graphic graphic)
protected int get_priority()
public AdditionalCanvasShaderChannels get_extraChannel()
protected bool IsValid(Graphic graphic)
public Shader FindShader(string shaderName)
public void OnEnable(Graphic graphic)
public void OnDisable(Graphic graphic)
public void SetVerticesDirty(Graphic graphic)
public void SetMaterialDirty(Graphic graphic)
public void GetPositionFactor(EffectArea area, int index, Rect rect, Vector2 position, Single& x, Single& y)
public bool IsText(Graphic graphic)
public void SetExtraChannel(UIVertex& vertex, Vector2 value)
public void GetNormalizedFactor(EffectArea area, int index, Matrix2x3 matrix, Vector2 position, Vector2& normalizedPos)
}
public Coffee.UIEffects.IParameterTexture {
public int parameterIndex
public ParameterTexture paramTex
public int get_parameterIndex()
public void set_parameterIndex(int value)
public ParameterTexture get_paramTex()
}
public Coffee.UIEffects.MaterialCache : object {
private Dictionary`2<Hash128, MaterialEntry> materialMap
public Material Register(Material baseMaterial, Hash128 hash, Action`2<Material, Graphic> onModifyMaterial, Graphic graphic)
public void Unregister(Hash128 hash)
}
public Coffee.UIEffects.Matrix2x3 : ValueType {
public float m00
public float m01
public float m02
public float m10
public float m11
public float m12
public void .ctor(Rect rect, float cos, float sin)
public Vector2 op_Multiply(Matrix2x3 m, Vector2 v)
}
public Coffee.UIEffects.ParameterTexture : object {
private Texture2D _texture
private bool _needUpload
private int _propertyId
private string _propertyName
private int _channels
private int _instanceLimit
private Byte[] _data
private Stack`1<int> _stack
private List`1<Action> updates
public void .ctor(int channels, int instanceLimit, string propertyName)
public void Register(IParameterTexture target)
public void Unregister(IParameterTexture target)
public void SetData(IParameterTexture target, int channelId, byte value)
public void SetData(IParameterTexture target, int channelId, float value)
public void RegisterMaterial(Material mat)
public float GetNormalizedIndex(IParameterTexture target)
private void Initialize()
private void UpdateParameterTexture()
}
public Coffee.UIEffects.ShadowStyle : Enum {
public int value__
public ShadowStyle None
public ShadowStyle Shadow
public ShadowStyle Outline
public ShadowStyle Outline8
public ShadowStyle Shadow3
}
public Coffee.UIEffects.UIDissolve : BaseMaterialEffect {
private UInt32 k_ShaderId
private ParameterTexture s_ParamTex
private int k_TransitionTexId
private bool _lastKeepAspectRatio
private EffectArea _lastEffectArea
private Texture _defaultTransitionTexture
private float m_EffectFactor
private float m_Width
private float m_Softness
private Color m_Color
private ColorMode m_ColorMode
private Texture m_TransitionTexture
protected EffectArea m_EffectArea
private bool m_KeepAspectRatio
public float effectFactor
public float width
public float softness
public Color color
public Texture transitionTexture
private Texture defaultTransitionTexture
public EffectArea effectArea
public bool keepAspectRatio
public ColorMode colorMode
public ParameterTexture paramTex
public float get_effectFactor()
public void set_effectFactor(float value)
public float get_width()
public void set_width(float value)
public float get_softness()
public void set_softness(float value)
public Color get_color()
public void set_color(Color value)
public Texture get_transitionTexture()
public void set_transitionTexture(Texture value)
private Texture get_defaultTransitionTexture()
public EffectArea get_effectArea()
public void set_effectArea(EffectArea value)
public bool get_keepAspectRatio()
public void set_keepAspectRatio(bool value)
public ColorMode get_colorMode()
public void set_colorMode(ColorMode value)
public ParameterTexture get_paramTex()
public Hash128 GetMaterialHash(Material material)
public void ModifyMaterial(Material newMaterial, Graphic graphic)
public void ModifyMesh(VertexHelper vh, Graphic graphic)
protected void SetEffectParamsDirty()
protected void SetVerticesDirty()
protected void OnDidApplyAnimationProperties()
}
public Coffee.UIEffects.UIEffect : BaseMaterialEffect {
private UInt32 k_ShaderId
private ParameterTexture s_ParamTex
private float m_EffectFactor
private float m_ColorFactor
private float m_BlurFactor
private EffectMode m_EffectMode
private ColorMode m_ColorMode
private BlurMode m_BlurMode
private bool m_AdvancedBlur
public AdditionalCanvasShaderChannels uvMaskChannel
public float effectFactor
public float colorFactor
public float blurFactor
public EffectMode effectMode
public ColorMode colorMode
public BlurMode blurMode
public ParameterTexture paramTex
public bool advancedBlur
public AdditionalCanvasShaderChannels get_uvMaskChannel()
public float get_effectFactor()
public void set_effectFactor(float value)
public float get_colorFactor()
public void set_colorFactor(float value)
public float get_blurFactor()
public void set_blurFactor(float value)
public EffectMode get_effectMode()
public void set_effectMode(EffectMode value)
public ColorMode get_colorMode()
public void set_colorMode(ColorMode value)
public BlurMode get_blurMode()
public void set_blurMode(BlurMode value)
public ParameterTexture get_paramTex()
public bool get_advancedBlur()
public void set_advancedBlur(bool value)
public Hash128 GetMaterialHash(Material material)
public void ModifyMaterial(Material newMaterial, Graphic graphic)
public void ModifyMesh(VertexHelper vh, Graphic graphic)
protected void SetEffectParamsDirty()
private void GetBounds(List`1<UIVertex> verts, int start, int count, Rect& posBounds, Rect& uvBounds, bool global)
}
public Coffee.UIEffects.UIFlip : BaseMeshEffect {
private bool m_Horizontal
private bool m_Veritical
public bool horizontal
public bool vertical
public bool get_horizontal()
public void set_horizontal(bool value)
public bool get_vertical()
public void set_vertical(bool value)
public void ModifyMesh(VertexHelper vh, Graphic graphic)
}
public Coffee.UIEffects.UIGradient : BaseMeshEffect {
private Vector2[] s_SplitedCharacterPosition
private Direction m_Direction
private Color m_Color1
private Color m_Color2
private Color m_Color3
private Color m_Color4
private float m_Rotation
private float m_Offset1
private float m_Offset2
private GradientStyle m_GradientStyle
private ColorSpace m_ColorSpace
private bool m_IgnoreAspectRatio
public Direction direction
public Color color1
public Color color2
public Color color3
public Color color4
public float rotation
public float offset
public Vector2 offset2
public GradientStyle gradientStyle
public ColorSpace colorSpace
public bool ignoreAspectRatio
public Direction get_direction()
public void set_direction(Direction value)
public Color get_color1()
public void set_color1(Color value)
public Color get_color2()
public void set_color2(Color value)
public Color get_color3()
public void set_color3(Color value)
public Color get_color4()
public void set_color4(Color value)
public float get_rotation()
public void set_rotation(float value)
public float get_offset()
public void set_offset(float value)
public Vector2 get_offset2()
public void set_offset2(Vector2 value)
public GradientStyle get_gradientStyle()
public void set_gradientStyle(GradientStyle value)
public ColorSpace get_colorSpace()
public void set_colorSpace(ColorSpace value)
public bool get_ignoreAspectRatio()
public void set_ignoreAspectRatio(bool value)
public void ModifyMesh(VertexHelper vh, Graphic graphic)
}
public Coffee.UIEffects.UIHsvModifier : BaseMaterialEffect {
private UInt32 k_ShaderId
private ParameterTexture s_ParamTex
private Color m_TargetColor
private float m_Range
private float m_Hue
private float m_Saturation
private float m_Value
public Color targetColor
public float range
public float saturation
public float value
public float hue
public ParameterTexture paramTex
public Color get_targetColor()
public void set_targetColor(Color value)
public float get_range()
public void set_range(float value)
public float get_saturation()
public void set_saturation(float value)
public float get_value()
public void set_value(float value)
public float get_hue()
public void set_hue(float value)
public ParameterTexture get_paramTex()
public Hash128 GetMaterialHash(Material material)
public void ModifyMaterial(Material newMaterial, Graphic graphic)
public void ModifyMesh(VertexHelper vh, Graphic graphic)
protected void SetEffectParamsDirty()
}
public Coffee.UIEffects.UIShadow : BaseMeshEffect {
private List`1<UIShadow> tmpShadows
private List`1<UIVertex> s_Verts
private int _graphicVertexCount
private UIEffect _uiEffect
private float m_BlurFactor
private ShadowStyle m_Style
private Color m_EffectColor
private Vector2 m_EffectDistance
private bool m_UseGraphicAlpha
private float kMaxEffectDistance
private int <parameterIndex>k__BackingField
private ParameterTexture <paramTex>k__BackingField
public Color effectColor
public Vector2 effectDistance
public bool useGraphicAlpha
public float blurFactor
public ShadowStyle style
public int parameterIndex
public ParameterTexture paramTex
public Color get_effectColor()
public void set_effectColor(Color value)
public Vector2 get_effectDistance()
public void set_effectDistance(Vector2 value)
public bool get_useGraphicAlpha()
public void set_useGraphicAlpha(bool value)
public float get_blurFactor()
public void set_blurFactor(float value)
public ShadowStyle get_style()
public void set_style(ShadowStyle value)
public int get_parameterIndex()
public void set_parameterIndex(int value)
public ParameterTexture get_paramTex()
private void set_paramTex(ParameterTexture value)
protected void OnEnable()
protected void OnDisable()
public void ModifyMesh(VertexHelper vh, Graphic graphic)
private void ApplyShadow(List`1<UIVertex> verts, Color color, Int32& start, Int32& end, Vector2 distance, ShadowStyle style, bool alpha)
private void ApplyShadowZeroAlloc(List`1<UIVertex> verts, Color color, Int32& start, Int32& end, float x, float y, bool alpha)
}
public Coffee.UIEffects.UIShiny : BaseMaterialEffect {
private UInt32 k_ShaderId
private ParameterTexture s_ParamTex
private float _lastRotation
private EffectArea _lastEffectArea
private float m_EffectFactor
private float m_Width
private float m_Rotation
private float m_Softness
private float m_Brightness
private float m_Gloss
protected EffectArea m_EffectArea
public float effectFactor
public float width
public float softness
public float brightness
public float gloss
public float rotation
public EffectArea effectArea
public ParameterTexture paramTex
public float get_effectFactor()
public void set_effectFactor(float value)
public float get_width()
public void set_width(float value)
public float get_softness()
public void set_softness(float value)
public float get_brightness()
public void set_brightness(float value)
public float get_gloss()
public void set_gloss(float value)
public float get_rotation()
public void set_rotation(float value)
public EffectArea get_effectArea()
public void set_effectArea(EffectArea value)
public ParameterTexture get_paramTex()
public Hash128 GetMaterialHash(Material material)
public void ModifyMaterial(Material newMaterial, Graphic graphic)
public void ModifyMesh(VertexHelper vh, Graphic graphic)
protected void SetEffectParamsDirty()
protected void SetVerticesDirty()
protected void OnDidApplyAnimationProperties()
}
public Coffee.UIEffects.UISyncEffect : BaseMaterialEffect {
private BaseMeshEffect m_TargetEffect
public BaseMeshEffect targetEffect
public BaseMeshEffect get_targetEffect()
public void set_targetEffect(BaseMeshEffect value)
protected void OnEnable()
protected void OnDisable()
public Hash128 GetMaterialHash(Material baseMaterial)
public void ModifyMaterial(Material newMaterial, Graphic graphic)
public void ModifyMesh(VertexHelper vh, Graphic graphic)
}
public Coffee.UIEffects.UITransitionEffect : BaseMaterialEffect {
private UInt32 k_ShaderId
private int k_TransitionTexId
private ParameterTexture s_ParamTex
private bool _lastKeepAspectRatio
private Texture _defaultTransitionTexture
private EffectMode m_EffectMode
private float m_EffectFactor
private Texture m_TransitionTexture
private EffectArea m_EffectArea
private bool m_KeepAspectRatio
private float m_DissolveWidth
private float m_DissolveSoftness
private Color m_DissolveColor
private bool m_PassRayOnHidden
public float effectFactor
public Texture transitionTexture
private Texture defaultTransitionTexture
public EffectMode effectMode
public bool keepAspectRatio
public ParameterTexture paramTex
public float dissolveWidth
public float dissolveSoftness
public Color dissolveColor
public bool passRayOnHidden
public float get_effectFactor()
public void set_effectFactor(float value)
public Texture get_transitionTexture()
public void set_transitionTexture(Texture value)
private Texture get_defaultTransitionTexture()
public EffectMode get_effectMode()
public void set_effectMode(EffectMode value)
public bool get_keepAspectRatio()
public void set_keepAspectRatio(bool value)
public ParameterTexture get_paramTex()
public float get_dissolveWidth()
public void set_dissolveWidth(float value)
public float get_dissolveSoftness()
public void set_dissolveSoftness(float value)
public Color get_dissolveColor()
public void set_dissolveColor(Color value)
public bool get_passRayOnHidden()
public void set_passRayOnHidden(bool value)
public Hash128 GetMaterialHash(Material material)
public void ModifyMaterial(Material newMaterial, Graphic graphic)
public void ModifyMesh(VertexHelper vh, Graphic graphic)
protected void SetEffectParamsDirty()
protected void SetVerticesDirty()
protected void OnDidApplyAnimationProperties()
}
public Packer : object {
public float ToFloat(float x, float y, float z, float w)
public float ToFloat(Vector4 factor)
public float ToFloat(float x, float y, float z)
public float ToFloat(float x, float y)
}
internal UnitySourceGeneratedAssemblyMonoScriptTypes_v1 : object {
private MonoScriptData Get()
}
