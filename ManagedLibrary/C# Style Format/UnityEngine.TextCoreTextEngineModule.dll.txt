public UnityEngine.TextCore.Text.AtlasPopulationMode : Enum {
public int value__
public AtlasPopulationMode Static
public AtlasPopulationMode Dynamic
public AtlasPopulationMode DynamicOS
}
public UnityEngine.TextCore.Text.Character : TextElement {
public void .ctor(UInt32 unicode, Glyph glyph)
public void .ctor(UInt32 unicode, FontAsset fontAsset, Glyph glyph)
internal void .ctor(UInt32 unicode, UInt32 glyphIndex)
}
public UnityEngine.TextCore.Text.ColorGradientMode : Enum {
public int value__
public ColorGradientMode Single
public ColorGradientMode HorizontalGradient
public ColorGradientMode VerticalGradient
public ColorGradientMode FourCornersGradient
}
internal UnityEngine.TextCore.Text.ColorUtilities : object {
internal bool CompareColors(Color32 a, Color32 b)
internal bool CompareColorsRgb(Color32 a, Color32 b)
internal bool CompareColors(Color a, Color b)
internal bool CompareColorsRgb(Color a, Color b)
internal Color32 MultiplyColors(Color32 c1, Color32 c2)
}
internal UnityEngine.TextCore.Text.Extents : ValueType {
public Vector2 min
public Vector2 max
public void .ctor(Vector2 min, Vector2 max)
public string ToString()
}
public UnityEngine.TextCore.Text.FastAction : object {
private LinkedList`1<Action> delegates
private Dictionary`2<Action, LinkedListNode`1<Action>> lookup
public void Add(Action rhs)
public void Remove(Action rhs)
public void Call()
}
public UnityEngine.TextCore.Text.FastAction`1 : object {
private LinkedList`1<Action`1<A>> delegates
private Dictionary`2<Action`1<A>, LinkedListNode`1<Action`1<A>>> lookup
public void Add(Action`1<A> rhs)
public void Remove(Action`1<A> rhs)
public void Call(A a)
}
public UnityEngine.TextCore.Text.FastAction`2 : object {
private LinkedList`1<Action`2<A, B>> delegates
private Dictionary`2<Action`2<A, B>, LinkedListNode`1<Action`2<A, B>>> lookup
public void Add(Action`2<A, B> rhs)
public void Remove(Action`2<A, B> rhs)
public void Call(A a, B b)
}
public UnityEngine.TextCore.Text.FastAction`3 : object {
private LinkedList`1<Action`3<A, B, C>> delegates
private Dictionary`2<Action`3<A, B, C>, LinkedListNode`1<Action`3<A, B, C>>> lookup
public void Add(Action`3<A, B, C> rhs)
public void Remove(Action`3<A, B, C> rhs)
public void Call(A a, B b, C c)
}
public UnityEngine.TextCore.Text.FontAsset : TextAsset {
internal string m_SourceFontFileGUID
private Font m_SourceFontFile
private AtlasPopulationMode m_AtlasPopulationMode
internal bool InternalDynamicOS
internal FaceInfo m_FaceInfo
private int m_FamilyNameHashCode
private int m_StyleNameHashCode
private FontWeightPair[] m_FontWeightTable
internal List`1<Glyph> m_GlyphTable
internal Dictionary`2<UInt32, Glyph> m_GlyphLookupDictionary
internal List`1<Character> m_CharacterTable
internal Dictionary`2<UInt32, Character> m_CharacterLookupDictionary
internal Texture2D m_AtlasTexture
internal Texture2D[] m_AtlasTextures
internal int m_AtlasTextureIndex
private bool m_IsMultiAtlasTexturesEnabled
private bool m_ClearDynamicDataOnBuild
internal int m_AtlasWidth
internal int m_AtlasHeight
internal int m_AtlasPadding
internal GlyphRenderMode m_AtlasRenderMode
private List`1<GlyphRect> m_UsedGlyphRects
private List`1<GlyphRect> m_FreeGlyphRects
internal FontFeatureTable m_FontFeatureTable
internal List`1<FontAsset> m_FallbackFontAssetTable
internal FontAssetCreationEditorSettings m_fontAssetCreationEditorSettings
internal float m_RegularStyleWeight
internal float m_RegularStyleSpacing
internal float m_BoldStyleWeight
internal float m_BoldStyleSpacing
internal byte m_ItalicStyleSlant
internal byte m_TabMultiple
internal bool IsFontAssetLookupTablesDirty
private ProfilerMarker k_ReadFontAssetDefinitionMarker
private ProfilerMarker k_AddSynthesizedCharactersMarker
private ProfilerMarker k_TryAddCharacterMarker
private ProfilerMarker k_TryAddCharactersMarker
private ProfilerMarker k_UpdateGlyphAdjustmentRecordsMarker
private ProfilerMarker k_ClearFontAssetDataMarker
private ProfilerMarker k_UpdateFontAssetDataMarker
private string s_DefaultMaterialSuffix
private HashSet`1<int> k_SearchedFontAssetLookup
private List`1<FontAsset> k_FontAssets_FontFeaturesUpdateQueue
private HashSet`1<int> k_FontAssets_FontFeaturesUpdateQueueLookup
private List`1<Texture2D> k_FontAssets_AtlasTexturesUpdateQueue
private HashSet`1<int> k_FontAssets_AtlasTexturesUpdateQueueLookup
private List`1<Glyph> m_GlyphsToRender
private List`1<Glyph> m_GlyphsRendered
private List`1<UInt32> m_GlyphIndexList
private List`1<UInt32> m_GlyphIndexListNewlyAdded
internal List`1<UInt32> m_GlyphsToAdd
internal HashSet`1<UInt32> m_GlyphsToAddLookup
internal List`1<Character> m_CharactersToAdd
internal HashSet`1<UInt32> m_CharactersToAddLookup
internal List`1<UInt32> s_MissingCharacterList
internal HashSet`1<UInt32> m_MissingUnicodesFromFontFile
internal UInt32[] k_GlyphIndexArray
public Font sourceFontFile
public AtlasPopulationMode atlasPopulationMode
public FaceInfo faceInfo
internal int familyNameHashCode
internal int styleNameHashCode
public FontWeightPair[] fontWeightTable
public List`1<Glyph> glyphTable
public Dictionary`2<UInt32, Glyph> glyphLookupTable
public List`1<Character> characterTable
public Dictionary`2<UInt32, Character> characterLookupTable
public Texture2D atlasTexture
public Texture2D[] atlasTextures
public int atlasTextureCount
public bool isMultiAtlasTexturesEnabled
internal bool clearDynamicDataOnBuild
public int atlasWidth
public int atlasHeight
public int atlasPadding
public GlyphRenderMode atlasRenderMode
internal List`1<GlyphRect> usedGlyphRects
internal List`1<GlyphRect> freeGlyphRects
public FontFeatureTable fontFeatureTable
public List`1<FontAsset> fallbackFontAssetTable
public FontAssetCreationEditorSettings fontAssetCreationEditorSettings
public float regularStyleWeight
public float regularStyleSpacing
public float boldStyleWeight
public float boldStyleSpacing
public byte italicStyleSlant
public byte tabMultiple
public Font get_sourceFontFile()
internal void set_sourceFontFile(Font value)
public AtlasPopulationMode get_atlasPopulationMode()
public void set_atlasPopulationMode(AtlasPopulationMode value)
public FaceInfo get_faceInfo()
public void set_faceInfo(FaceInfo value)
internal int get_familyNameHashCode()
internal void set_familyNameHashCode(int value)
internal int get_styleNameHashCode()
internal void set_styleNameHashCode(int value)
public FontWeightPair[] get_fontWeightTable()
internal void set_fontWeightTable(FontWeightPair[] value)
public List`1<Glyph> get_glyphTable()
internal void set_glyphTable(List`1<Glyph> value)
public Dictionary`2<UInt32, Glyph> get_glyphLookupTable()
public List`1<Character> get_characterTable()
internal void set_characterTable(List`1<Character> value)
public Dictionary`2<UInt32, Character> get_characterLookupTable()
public Texture2D get_atlasTexture()
public Texture2D[] get_atlasTextures()
public void set_atlasTextures(Texture2D[] value)
public int get_atlasTextureCount()
public bool get_isMultiAtlasTexturesEnabled()
public void set_isMultiAtlasTexturesEnabled(bool value)
internal bool get_clearDynamicDataOnBuild()
internal void set_clearDynamicDataOnBuild(bool value)
public int get_atlasWidth()
internal void set_atlasWidth(int value)
public int get_atlasHeight()
internal void set_atlasHeight(int value)
public int get_atlasPadding()
internal void set_atlasPadding(int value)
public GlyphRenderMode get_atlasRenderMode()
internal void set_atlasRenderMode(GlyphRenderMode value)
internal List`1<GlyphRect> get_usedGlyphRects()
internal void set_usedGlyphRects(List`1<GlyphRect> value)
internal List`1<GlyphRect> get_freeGlyphRects()
internal void set_freeGlyphRects(List`1<GlyphRect> value)
public FontFeatureTable get_fontFeatureTable()
internal void set_fontFeatureTable(FontFeatureTable value)
public List`1<FontAsset> get_fallbackFontAssetTable()
public void set_fallbackFontAssetTable(List`1<FontAsset> value)
public FontAssetCreationEditorSettings get_fontAssetCreationEditorSettings()
public void set_fontAssetCreationEditorSettings(FontAssetCreationEditorSettings value)
public float get_regularStyleWeight()
public void set_regularStyleWeight(float value)
public float get_regularStyleSpacing()
public void set_regularStyleSpacing(float value)
public float get_boldStyleWeight()
public void set_boldStyleWeight(float value)
public float get_boldStyleSpacing()
public void set_boldStyleSpacing(float value)
public byte get_italicStyleSlant()
public void set_italicStyleSlant(byte value)
public byte get_tabMultiple()
public void set_tabMultiple(byte value)
public FontAsset CreateFontAsset(string familyName, string styleName, int pointSize)
private FontAsset CreateFontAsset(string fontFilePath, int faceIndex, int samplingPointSize, int atlasPadding, GlyphRenderMode renderMode, int atlasWidth, int atlasHeight, AtlasPopulationMode atlasPopulationMode, bool enableMultiAtlasSupport)
public FontAsset CreateFontAsset(Font font)
public FontAsset CreateFontAsset(Font font, int samplingPointSize, int atlasPadding, GlyphRenderMode renderMode, int atlasWidth, int atlasHeight, AtlasPopulationMode atlasPopulationMode, bool enableMultiAtlasSupport)
private FontAsset CreateFontAsset(Font font, int faceIndex, int samplingPointSize, int atlasPadding, GlyphRenderMode renderMode, int atlasWidth, int atlasHeight, AtlasPopulationMode atlasPopulationMode, bool enableMultiAtlasSupport)
private FontAsset CreateFontAssetInstance(Font font, int atlasPadding, GlyphRenderMode renderMode, int atlasWidth, int atlasHeight, AtlasPopulationMode atlasPopulationMode, bool enableMultiAtlasSupport)
private void Awake()
private void OnDestroy()
public void ReadFontAssetDefinition()
internal void InitializeDictionaryLookupTables()
internal void InitializeGlyphLookupDictionary()
internal void InitializeCharacterLookupDictionary()
internal void InitializeGlyphPaidAdjustmentRecordsLookupDictionary()
internal void AddSynthesizedCharactersAndFaceMetrics()
private void AddSynthesizedCharacter(UInt32 unicode, bool isFontFaceLoaded, bool addImmediately)
internal void AddCharacterToLookupCache(UInt32 unicode, Character character)
private FontEngineError LoadFontFace()
internal void SortCharacterTable()
internal void SortGlyphTable()
internal void SortFontFeatureTable()
internal void SortAllTables()
public bool HasCharacter(int character)
public bool HasCharacter(char character, bool searchFallbacks, bool tryAddCharacter)
private bool HasCharacter_Internal(UInt32 character, bool searchFallbacks, bool tryAddCharacter)
public bool HasCharacters(string text, List`1& missingCharacters)
public bool HasCharacters(string text, UInt32[]& missingCharacters, bool searchFallbacks, bool tryAddCharacter)
public bool HasCharacters(string text)
public string GetCharacters(FontAsset fontAsset)
public Int32[] GetCharactersArray(FontAsset fontAsset)
internal UInt32 GetGlyphIndex(UInt32 unicode)
internal void RegisterFontAssetForFontFeatureUpdate(FontAsset fontAsset)
internal void UpdateFontFeaturesForFontAssetsInQueue()
internal void RegisterAtlasTextureForApply(Texture2D texture)
internal void UpdateAtlasTexturesInQueue()
internal void UpdateFontAssetInUpdateQueue()
public bool TryAddCharacters(UInt32[] unicodes, bool includeFontFeatures)
public bool TryAddCharacters(UInt32[] unicodes, UInt32[]& missingUnicodes, bool includeFontFeatures)
public bool TryAddCharacters(string characters, bool includeFontFeatures)
public bool TryAddCharacters(string characters, String& missingCharacters, bool includeFontFeatures)
internal bool TryAddCharacterInternal(UInt32 unicode, Character& character, bool shouldGetFontFeatures)
internal bool TryGetCharacter_and_QueueRenderToTexture(UInt32 unicode, Character& character, bool shouldGetFontFeatures)
internal void TryAddGlyphsToAtlasTextures()
private bool TryAddGlyphsToNewAtlasTexture()
private void SetupNewAtlasTexture()
internal void UpdateAtlasTexture()
internal void UpdateGlyphAdjustmentRecords()
internal void UpdateGlyphAdjustmentRecords(UInt32[] glyphIndexes)
internal void UpdateGlyphAdjustmentRecords(List`1<UInt32> glyphIndexes)
internal void UpdateGlyphAdjustmentRecords(List`1<UInt32> newGlyphIndexes, List`1<UInt32> allGlyphIndexes)
private void CopyListDataToArray(List`1<T> srcList, T[]& dstArray)
public void ClearFontAssetData(bool setAtlasSizeToZero)
internal void ClearFontAssetDataInternal()
internal void UpdateFontAssetData()
internal void ClearFontAssetTables()
internal void ClearAtlasTextures(bool setAtlasSizeToZero)
private void DestroyAtlasTextures()
}
public UnityEngine.TextCore.Text.FontAssetCreationEditorSettings : ValueType {
public string sourceFontFileGUID
public int faceIndex
public int pointSizeSamplingMode
public int pointSize
public int padding
public int packingMode
public int atlasWidth
public int atlasHeight
public int characterSetSelectionMode
public string characterSequence
public string referencedFontAssetGUID
public string referencedTextAssetGUID
public int fontStyle
public float fontStyleModifier
public int renderMode
public bool includeFontFeatures
internal void .ctor(string sourceFontFileGUID, int pointSize, int pointSizeSamplingMode, int padding, int packingMode, int atlasWidth, int atlasHeight, int characterSelectionMode, string characterSet, int renderMode)
}
internal UnityEngine.TextCore.Text.FontAssetUtilities : object {
private HashSet`1<int> k_SearchedAssets
internal Character GetCharacterFromFontAsset(UInt32 unicode, FontAsset sourceFontAsset, bool includeFallbacks, FontStyles fontStyle, TextFontWeight fontWeight, Boolean& isAlternativeTypeface)
private Character GetCharacterFromFontAsset_Internal(UInt32 unicode, FontAsset sourceFontAsset, bool includeFallbacks, FontStyles fontStyle, TextFontWeight fontWeight, Boolean& isAlternativeTypeface)
public Character GetCharacterFromFontAssets(UInt32 unicode, FontAsset sourceFontAsset, List`1<FontAsset> fontAssets, bool includeFallbacks, FontStyles fontStyle, TextFontWeight fontWeight, Boolean& isAlternativeTypeface)
public SpriteCharacter GetSpriteCharacterFromSpriteAsset(UInt32 unicode, SpriteAsset spriteAsset, bool includeFallbacks)
private SpriteCharacter GetSpriteCharacterFromSpriteAsset_Internal(UInt32 unicode, SpriteAsset spriteAsset, bool includeFallbacks)
}
public UnityEngine.TextCore.Text.FontFeatureTable : object {
internal List`1<GlyphPairAdjustmentRecord> m_GlyphPairAdjustmentRecords
internal Dictionary`2<UInt32, GlyphPairAdjustmentRecord> m_GlyphPairAdjustmentRecordLookup
internal List`1<GlyphPairAdjustmentRecord> glyphPairAdjustmentRecords
internal List`1<GlyphPairAdjustmentRecord> get_glyphPairAdjustmentRecords()
internal void set_glyphPairAdjustmentRecords(List`1<GlyphPairAdjustmentRecord> value)
public void SortGlyphPairAdjustmentRecords()
}
public UnityEngine.TextCore.Text.FontStyles : Enum {
public int value__
public FontStyles Normal
public FontStyles Bold
public FontStyles Italic
public FontStyles Underline
public FontStyles LowerCase
public FontStyles UpperCase
public FontStyles SmallCaps
public FontStyles Strikethrough
public FontStyles Superscript
public FontStyles Subscript
public FontStyles Highlight
}
internal UnityEngine.TextCore.Text.FontStyleStack : ValueType {
public byte bold
public byte italic
public byte underline
public byte strikethrough
public byte highlight
public byte superscript
public byte subscript
public byte uppercase
public byte lowercase
public byte smallcaps
public void Clear()
public byte Add(FontStyles style)
public byte Remove(FontStyles style)
}
public UnityEngine.TextCore.Text.FontWeightPair : ValueType {
public FontAsset regularTypeface
public FontAsset italicTypeface
}
internal UnityEngine.TextCore.Text.HorizontalAlignment : Enum {
public int value__
public HorizontalAlignment Left
public HorizontalAlignment Center
public HorizontalAlignment Right
public HorizontalAlignment Justified
public HorizontalAlignment Flush
public HorizontalAlignment Geometry
}
internal UnityEngine.TextCore.Text.LineInfo : ValueType {
internal int controlCharacterCount
public int characterCount
public int visibleCharacterCount
public int spaceCount
public int visibleSpaceCount
public int wordCount
public int firstCharacterIndex
public int firstVisibleCharacterIndex
public int lastCharacterIndex
public int lastVisibleCharacterIndex
public float length
public float lineHeight
public float ascender
public float baseline
public float descender
public float maxAdvance
public float width
public float marginLeft
public float marginRight
public TextAlignment alignment
public Extents lineExtents
}
internal UnityEngine.TextCore.Text.LinkInfo : ValueType {
public int hashCode
public int linkIdFirstCharacterIndex
public int linkIdLength
public int linkTextfirstCharacterIndex
public int linkTextLength
internal Char[] linkId
internal void SetLinkId(Char[] text, int startIndex, int length)
public string GetLinkText(TextInfo textInfo)
public string GetLinkId()
}
internal UnityEngine.TextCore.Text.MarkupTag : Enum {
public int value__
public MarkupTag BOLD
public MarkupTag SLASH_BOLD
public MarkupTag ITALIC
public MarkupTag SLASH_ITALIC
public MarkupTag UNDERLINE
public MarkupTag SLASH_UNDERLINE
public MarkupTag STRIKETHROUGH
public MarkupTag SLASH_STRIKETHROUGH
public MarkupTag MARK
public MarkupTag SLASH_MARK
public MarkupTag SUBSCRIPT
public MarkupTag SLASH_SUBSCRIPT
public MarkupTag SUPERSCRIPT
public MarkupTag SLASH_SUPERSCRIPT
public MarkupTag COLOR
public MarkupTag SLASH_COLOR
public MarkupTag ALPHA
public MarkupTag A
public MarkupTag SLASH_A
public MarkupTag SIZE
public MarkupTag SLASH_SIZE
public MarkupTag SPRITE
public MarkupTag NO_BREAK
public MarkupTag SLASH_NO_BREAK
public MarkupTag STYLE
public MarkupTag SLASH_STYLE
public MarkupTag FONT
public MarkupTag SLASH_FONT
public MarkupTag SLASH_MATERIAL
public MarkupTag LINK
public MarkupTag SLASH_LINK
public MarkupTag FONT_WEIGHT
public MarkupTag SLASH_FONT_WEIGHT
public MarkupTag NO_PARSE
public MarkupTag SLASH_NO_PARSE
public MarkupTag POSITION
public MarkupTag SLASH_POSITION
public MarkupTag VERTICAL_OFFSET
public MarkupTag SLASH_VERTICAL_OFFSET
public MarkupTag SPACE
public MarkupTag SLASH_SPACE
public MarkupTag PAGE
public MarkupTag SLASH_PAGE
public MarkupTag ALIGN
public MarkupTag SLASH_ALIGN
public MarkupTag WIDTH
public MarkupTag SLASH_WIDTH
public MarkupTag GRADIENT
public MarkupTag SLASH_GRADIENT
public MarkupTag CHARACTER_SPACE
public MarkupTag SLASH_CHARACTER_SPACE
public MarkupTag MONOSPACE
public MarkupTag SLASH_MONOSPACE
public MarkupTag CLASS
public MarkupTag INDENT
public MarkupTag SLASH_INDENT
public MarkupTag LINE_INDENT
public MarkupTag SLASH_LINE_INDENT
public MarkupTag MARGIN
public MarkupTag SLASH_MARGIN
public MarkupTag MARGIN_LEFT
public MarkupTag MARGIN_RIGHT
public MarkupTag LINE_HEIGHT
public MarkupTag SLASH_LINE_HEIGHT
public MarkupTag ACTION
public MarkupTag SLASH_ACTION
public MarkupTag SCALE
public MarkupTag SLASH_SCALE
public MarkupTag ROTATE
public MarkupTag SLASH_ROTATE
public MarkupTag LOWERCASE
public MarkupTag SLASH_LOWERCASE
public MarkupTag ALLCAPS
public MarkupTag SLASH_ALLCAPS
public MarkupTag UPPERCASE
public MarkupTag SLASH_UPPERCASE
public MarkupTag SMALLCAPS
public MarkupTag SLASH_SMALLCAPS
public MarkupTag LIGA
public MarkupTag SLASH_LIGA
public MarkupTag FRAC
public MarkupTag SLASH_FRAC
public MarkupTag NAME
public MarkupTag INDEX
public MarkupTag TINT
public MarkupTag ANIM
public MarkupTag MATERIAL
public MarkupTag HREF
public MarkupTag ANGLE
public MarkupTag RED
public MarkupTag GREEN
public MarkupTag BLUE
public MarkupTag YELLOW
public MarkupTag ORANGE
public MarkupTag BLACK
public MarkupTag WHITE
public MarkupTag PURPLE
public MarkupTag BR
public MarkupTag ZWSP
public MarkupTag NBSP
public MarkupTag SHY
public MarkupTag LEFT
public MarkupTag RIGHT
public MarkupTag CENTER
public MarkupTag JUSTIFIED
public MarkupTag FLUSH
public MarkupTag NONE
public MarkupTag PLUS
public MarkupTag MINUS
public MarkupTag PX
public MarkupTag PLUS_PX
public MarkupTag MINUS_PX
public MarkupTag EM
public MarkupTag PLUS_EM
public MarkupTag MINUS_EM
public MarkupTag PCT
public MarkupTag PLUS_PCT
public MarkupTag MINUS_PCT
public MarkupTag PERCENTAGE
public MarkupTag PLUS_PERCENTAGE
public MarkupTag MINUS_PERCENTAGE
public MarkupTag TRUE
public MarkupTag FALSE
public MarkupTag INVALID
public MarkupTag NORMAL
public MarkupTag DEFAULT
}
internal UnityEngine.TextCore.Text.MaterialManager : object {
private Dictionary`2<long, Material> s_FallbackMaterials
public Material GetFallbackMaterial(Material sourceMaterial, Material targetMaterial)
public Material GetFallbackMaterial(FontAsset fontAsset, Material sourceMaterial, int atlasIndex)
}
internal UnityEngine.TextCore.Text.MaterialReference : ValueType {
public int index
public FontAsset fontAsset
public SpriteAsset spriteAsset
public Material material
public bool isDefaultMaterial
public bool isFallbackMaterial
public Material fallbackMaterial
public float padding
public int referenceCount
public void .ctor(int index, FontAsset fontAsset, SpriteAsset spriteAsset, Material material, float padding)
public bool Contains(MaterialReference[] materialReferences, FontAsset fontAsset)
public int AddMaterialReference(Material material, FontAsset fontAsset, MaterialReference[]& materialReferences, Dictionary`2<int, int> materialReferenceIndexLookup)
public int AddMaterialReference(Material material, SpriteAsset spriteAsset, MaterialReference[]& materialReferences, Dictionary`2<int, int> materialReferenceIndexLookup)
}
internal UnityEngine.TextCore.Text.MaterialReferenceManager : object {
private MaterialReferenceManager s_Instance
private Dictionary`2<int, Material> m_FontMaterialReferenceLookup
private Dictionary`2<int, FontAsset> m_FontAssetReferenceLookup
private Dictionary`2<int, SpriteAsset> m_SpriteAssetReferenceLookup
private Dictionary`2<int, TextColorGradient> m_ColorGradientReferenceLookup
public MaterialReferenceManager instance
public MaterialReferenceManager get_instance()
public void AddFontAsset(FontAsset fontAsset)
private void AddFontAssetInternal(FontAsset fontAsset)
public void AddSpriteAsset(SpriteAsset spriteAsset)
private void AddSpriteAssetInternal(SpriteAsset spriteAsset)
public void AddSpriteAsset(int hashCode, SpriteAsset spriteAsset)
private void AddSpriteAssetInternal(int hashCode, SpriteAsset spriteAsset)
public void AddFontMaterial(int hashCode, Material material)
private void AddFontMaterialInternal(int hashCode, Material material)
public void AddColorGradientPreset(int hashCode, TextColorGradient spriteAsset)
private void AddColorGradientPreset_Internal(int hashCode, TextColorGradient spriteAsset)
public bool Contains(FontAsset font)
public bool Contains(SpriteAsset sprite)
public bool TryGetFontAsset(int hashCode, FontAsset& fontAsset)
private bool TryGetFontAssetInternal(int hashCode, FontAsset& fontAsset)
public bool TryGetSpriteAsset(int hashCode, SpriteAsset& spriteAsset)
private bool TryGetSpriteAssetInternal(int hashCode, SpriteAsset& spriteAsset)
public bool TryGetColorGradientPreset(int hashCode, TextColorGradient& gradientPreset)
private bool TryGetColorGradientPresetInternal(int hashCode, TextColorGradient& gradientPreset)
public bool TryGetMaterial(int hashCode, Material& material)
private bool TryGetMaterialInternal(int hashCode, Material& material)
}
internal UnityEngine.TextCore.Text.MeshExtents : ValueType {
public Vector2 min
public Vector2 max
public void .ctor(Vector2 min, Vector2 max)
public string ToString()
}
internal UnityEngine.TextCore.Text.MeshInfo : ValueType {
private Color32 k_DefaultColor
public int vertexCount
public Vector3[] vertices
public Vector2[] uvs0
public Vector2[] uvs2
public Color32[] colors32
public Int32[] triangles
public Material material
public void .ctor(int size)
internal void ResizeMeshInfo(int size)
internal void Clear(bool uploadChanges)
internal void ClearUnusedVertices()
internal void ClearUnusedVertices(int startIndex)
internal void SortGeometry(VertexSortingOrder order)
internal void SwapVertexData(int src, int dst)
}
internal UnityEngine.TextCore.Text.PageInfo : ValueType {
public int firstCharacterIndex
public int lastCharacterIndex
public float ascender
public float baseLine
public float descender
}
internal UnityEngine.TextCore.Text.RichTextTagAttribute : ValueType {
public int nameHashCode
public int valueHashCode
public TagValueType valueType
public int valueStartIndex
public int valueLength
}
public UnityEngine.TextCore.Text.SpriteAsset : TextAsset {
internal Dictionary`2<int, int> m_NameLookup
internal Dictionary`2<UInt32, int> m_GlyphIndexLookup
internal FaceInfo m_FaceInfo
internal Texture m_SpriteAtlasTexture
private List`1<SpriteCharacter> m_SpriteCharacterTable
internal Dictionary`2<UInt32, SpriteCharacter> m_SpriteCharacterLookup
private List`1<SpriteGlyph> m_SpriteGlyphTable
internal Dictionary`2<UInt32, SpriteGlyph> m_SpriteGlyphLookup
public List`1<SpriteAsset> fallbackSpriteAssets
internal bool m_IsSpriteAssetLookupTablesDirty
private HashSet`1<int> k_searchedSpriteAssets
public FaceInfo faceInfo
public Texture spriteSheet
public List`1<SpriteCharacter> spriteCharacterTable
public Dictionary`2<UInt32, SpriteCharacter> spriteCharacterLookupTable
public List`1<SpriteGlyph> spriteGlyphTable
public FaceInfo get_faceInfo()
internal void set_faceInfo(FaceInfo value)
public Texture get_spriteSheet()
internal void set_spriteSheet(Texture value)
public List`1<SpriteCharacter> get_spriteCharacterTable()
internal void set_spriteCharacterTable(List`1<SpriteCharacter> value)
public Dictionary`2<UInt32, SpriteCharacter> get_spriteCharacterLookupTable()
internal void set_spriteCharacterLookupTable(Dictionary`2<UInt32, SpriteCharacter> value)
public List`1<SpriteGlyph> get_spriteGlyphTable()
internal void set_spriteGlyphTable(List`1<SpriteGlyph> value)
private void Awake()
public void UpdateLookupTables()
public int GetSpriteIndexFromHashcode(int hashCode)
public int GetSpriteIndexFromUnicode(UInt32 unicode)
public int GetSpriteIndexFromName(string name)
public SpriteAsset SearchForSpriteByUnicode(SpriteAsset spriteAsset, UInt32 unicode, bool includeFallbacks, Int32& spriteIndex)
private SpriteAsset SearchForSpriteByUnicodeInternal(List`1<SpriteAsset> spriteAssets, UInt32 unicode, bool includeFallbacks, Int32& spriteIndex)
private SpriteAsset SearchForSpriteByUnicodeInternal(SpriteAsset spriteAsset, UInt32 unicode, bool includeFallbacks, Int32& spriteIndex)
public SpriteAsset SearchForSpriteByHashCode(SpriteAsset spriteAsset, int hashCode, bool includeFallbacks, Int32& spriteIndex, TextSettings textSettings)
private SpriteAsset SearchForSpriteByHashCodeInternal(List`1<SpriteAsset> spriteAssets, int hashCode, bool searchFallbacks, Int32& spriteIndex)
private SpriteAsset SearchForSpriteByHashCodeInternal(SpriteAsset spriteAsset, int hashCode, bool searchFallbacks, Int32& spriteIndex)
public void SortGlyphTable()
internal void SortCharacterTable()
internal void SortGlyphAndCharacterTables()
}
public UnityEngine.TextCore.Text.SpriteCharacter : TextElement {
private string m_Name
private int m_HashCode
public string name
public int hashCode
public string get_name()
public void set_name(string value)
public int get_hashCode()
public void .ctor(UInt32 unicode, SpriteGlyph glyph)
public void .ctor(UInt32 unicode, SpriteAsset spriteAsset, SpriteGlyph glyph)
}
public UnityEngine.TextCore.Text.SpriteGlyph : Glyph {
public Sprite sprite
public void .ctor(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex)
public void .ctor(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex, Sprite sprite)
}
internal UnityEngine.TextCore.Text.TagUnitType : Enum {
public int value__
public TagUnitType Pixels
public TagUnitType FontUnits
public TagUnitType Percentage
}
internal UnityEngine.TextCore.Text.TagValueType : Enum {
public int value__
public TagValueType None
public TagValueType NumericalValue
public TagValueType StringValue
public TagValueType ColorValue
}
internal UnityEngine.TextCore.Text.TextAlignment : Enum {
public int value__
public TextAlignment TopLeft
public TextAlignment TopCenter
public TextAlignment TopRight
public TextAlignment TopJustified
public TextAlignment TopFlush
public TextAlignment TopGeoAligned
public TextAlignment MiddleLeft
public TextAlignment MiddleCenter
public TextAlignment MiddleRight
public TextAlignment MiddleJustified
public TextAlignment MiddleFlush
public TextAlignment MiddleGeoAligned
public TextAlignment BottomLeft
public TextAlignment BottomCenter
public TextAlignment BottomRight
public TextAlignment BottomJustified
public TextAlignment BottomFlush
public TextAlignment BottomGeoAligned
public TextAlignment BaselineLeft
public TextAlignment BaselineCenter
public TextAlignment BaselineRight
public TextAlignment BaselineJustified
public TextAlignment BaselineFlush
public TextAlignment BaselineGeoAligned
public TextAlignment MidlineLeft
public TextAlignment MidlineCenter
public TextAlignment MidlineRight
public TextAlignment MidlineJustified
public TextAlignment MidlineFlush
public TextAlignment MidlineGeoAligned
public TextAlignment CaplineLeft
public TextAlignment CaplineCenter
public TextAlignment CaplineRight
public TextAlignment CaplineJustified
public TextAlignment CaplineFlush
public TextAlignment CaplineGeoAligned
}
public UnityEngine.TextCore.Text.TextAsset : ScriptableObject {
internal string m_Version
internal int m_InstanceID
internal int m_HashCode
internal Material m_Material
internal int m_MaterialHashCode
public string version
public int instanceID
public int hashCode
public Material material
public int materialHashCode
public string get_version()
internal void set_version(string value)
public int get_instanceID()
public int get_hashCode()
public void set_hashCode(int value)
public Material get_material()
public void set_material(Material value)
public int get_materialHashCode()
public void set_materialHashCode(int value)
}
public UnityEngine.TextCore.Text.TextColorGradient : ScriptableObject {
public ColorGradientMode colorMode
public Color topLeft
public Color topRight
public Color bottomLeft
public Color bottomRight
private ColorGradientMode k_DefaultColorMode
private Color k_DefaultColor
public void .ctor(Color color)
public void .ctor(Color color0, Color color1, Color color2, Color color3)
}
public UnityEngine.TextCore.Text.TextElement : object {
protected TextElementType m_ElementType
internal UInt32 m_Unicode
internal TextAsset m_TextAsset
internal Glyph m_Glyph
internal UInt32 m_GlyphIndex
internal float m_Scale
public TextElementType elementType
public UInt32 unicode
public TextAsset textAsset
public Glyph glyph
public UInt32 glyphIndex
public float scale
public TextElementType get_elementType()
public UInt32 get_unicode()
public void set_unicode(UInt32 value)
public TextAsset get_textAsset()
public void set_textAsset(TextAsset value)
public Glyph get_glyph()
public void set_glyph(Glyph value)
public UInt32 get_glyphIndex()
public void set_glyphIndex(UInt32 value)
public float get_scale()
public void set_scale(float value)
}
internal UnityEngine.TextCore.Text.TextElementInfo : ValueType {
public char character
public int index
public TextElementType elementType
public TextElement textElement
public FontAsset fontAsset
public SpriteAsset spriteAsset
public int spriteIndex
public Material material
public int materialReferenceIndex
public bool isUsingAlternateTypeface
public float pointSize
public int lineNumber
public int pageNumber
public int vertexIndex
public TextVertex vertexTopLeft
public TextVertex vertexBottomLeft
public TextVertex vertexTopRight
public TextVertex vertexBottomRight
public Vector3 topLeft
public Vector3 bottomLeft
public Vector3 topRight
public Vector3 bottomRight
public float origin
public float ascender
public float baseLine
public float descender
public float xAdvance
public float aspectRatio
public float scale
public Color32 color
public Color32 underlineColor
public Color32 strikethroughColor
public Color32 highlightColor
public FontStyles style
public bool isVisible
}
public UnityEngine.TextCore.Text.TextElementType : Enum {
public byte value__
public TextElementType Character
public TextElementType Sprite
}
public UnityEngine.TextCore.Text.TextEventManager : object {
public FastAction`2<bool, Material> MATERIAL_PROPERTY_EVENT
public FastAction`2<bool, Object> FONT_PROPERTY_EVENT
public FastAction`2<bool, Object> SPRITE_ASSET_PROPERTY_EVENT
public FastAction`2<bool, Object> TEXTMESHPRO_PROPERTY_EVENT
public FastAction`3<GameObject, Material, Material> DRAG_AND_DROP_MATERIAL_EVENT
public FastAction`1<bool> TEXT_STYLE_PROPERTY_EVENT
public FastAction`1<Object> COLOR_GRADIENT_PROPERTY_EVENT
public FastAction TMP_SETTINGS_PROPERTY_EVENT
public FastAction RESOURCE_LOAD_EVENT
public FastAction`2<bool, Object> TEXTMESHPRO_UGUI_PROPERTY_EVENT
public FastAction OnPreRenderObject_Event
public FastAction`1<Object> TEXT_CHANGED_EVENT
public void ON_PRE_RENDER_OBJECT_CHANGED()
public void ON_MATERIAL_PROPERTY_CHANGED(bool isChanged, Material mat)
public void ON_FONT_PROPERTY_CHANGED(bool isChanged, Object font)
public void ON_SPRITE_ASSET_PROPERTY_CHANGED(bool isChanged, Object obj)
public void ON_TEXTMESHPRO_PROPERTY_CHANGED(bool isChanged, Object obj)
public void ON_DRAG_AND_DROP_MATERIAL_CHANGED(GameObject sender, Material currentMaterial, Material newMaterial)
public void ON_TEXT_STYLE_PROPERTY_CHANGED(bool isChanged)
public void ON_COLOR_GRADIENT_PROPERTY_CHANGED(Object gradient)
public void ON_TEXT_CHANGED(Object obj)
public void ON_TMP_SETTINGS_CHANGED()
public void ON_RESOURCES_LOADED()
public void ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED(bool isChanged, Object obj)
}
public UnityEngine.TextCore.Text.TextFontWeight : Enum {
public int value__
public TextFontWeight Thin
public TextFontWeight ExtraLight
public TextFontWeight Light
public TextFontWeight Regular
public TextFontWeight Medium
public TextFontWeight SemiBold
public TextFontWeight Bold
public TextFontWeight Heavy
public TextFontWeight Black
}
internal UnityEngine.TextCore.Text.TextGenerationSettings : object {
public string text
public Rect screenRect
public Vector4 margins
public float scale
public FontAsset fontAsset
public Material material
public SpriteAsset spriteAsset
public TextStyleSheet styleSheet
public FontStyles fontStyle
public TextSettings textSettings
public TextAlignment textAlignment
public TextOverflowMode overflowMode
public bool wordWrap
public float wordWrappingRatio
public Color color
public TextColorGradient fontColorGradient
public bool tintSprites
public bool overrideRichTextColors
public float fontSize
public bool autoSize
public float fontSizeMin
public float fontSizeMax
public bool enableKerning
public bool richText
public bool isRightToLeft
public bool extraPadding
public bool parseControlCharacters
public float characterSpacing
public float wordSpacing
public float lineSpacing
public float paragraphSpacing
public float lineSpacingMax
public int maxVisibleCharacters
public int maxVisibleWords
public int maxVisibleLines
public int firstVisibleCharacter
public bool useMaxVisibleDescender
public TextFontWeight fontWeight
public int pageToDisplay
public TextureMapping horizontalMapping
public TextureMapping verticalMapping
public float uvLineOffset
public VertexSortingOrder geometrySortingOrder
public bool inverseYAxis
public float charWidthMaxAdj
public bool Equals(TextGenerationSettings other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(TextGenerationSettings left, TextGenerationSettings right)
public bool op_Inequality(TextGenerationSettings left, TextGenerationSettings right)
public string ToString()
}
internal UnityEngine.TextCore.Text.TextGenerator : object {
private int k_Tab
private int k_LineFeed
private int k_CarriageReturn
private int k_Space
private int k_DoubleQuotes
private int k_NumberSign
private int k_PercentSign
private int k_SingleQuote
private int k_Plus
private int k_Minus
private int k_Period
private int k_LesserThan
private int k_Equal
private int k_GreaterThan
private int k_Underline
private int k_NoBreakSpace
private int k_SoftHyphen
private int k_HyphenMinus
private int k_FigureSpace
private int k_Hyphen
private int k_NonBreakingHyphen
private int k_ZeroWidthSpace
private int k_NarrowNoBreakSpace
private int k_WordJoiner
private int k_HorizontalEllipsis
private int k_RightSingleQuote
private int k_Square
private int k_HangulJamoStart
private int k_HangulJamoEnd
private int k_CjkStart
private int k_CjkEnd
private int k_HangulJameExtendedStart
private int k_HangulJameExtendedEnd
private int k_HangulSyllablesStart
private int k_HangulSyllablesEnd
private int k_CjkIdeographsStart
private int k_CjkIdeographsEnd
private int k_CjkFormsStart
private int k_CjkFormsEnd
private int k_CjkHalfwidthStart
private int k_CjkHalfwidthEnd
private int k_VerticesMax
private int k_SpritesStart
private float k_FloatUnset
private int k_MaxCharacters
private TextGenerator s_TextGenerator
private Vector3[] m_RectTransformCorners
private float m_MarginWidth
private float m_MarginHeight
private Int32[] m_CharBuffer
private float m_PreferredWidth
private float m_PreferredHeight
private FontAsset m_CurrentFontAsset
private Material m_CurrentMaterial
private int m_CurrentMaterialIndex
private TextProcessingStack`1<MaterialReference> m_MaterialReferenceStack
private float m_Padding
private SpriteAsset m_CurrentSpriteAsset
private int m_TotalCharacterCount
private float m_FontScale
private float m_FontSize
private float m_FontScaleMultiplier
private float m_CurrentFontSize
private TextProcessingStack`1<float> m_SizeStack
private FontStyles m_FontStyleInternal
private FontStyleStack m_FontStyleStack
private TextFontWeight m_FontWeightInternal
private TextProcessingStack`1<TextFontWeight> m_FontWeightStack
private TextAlignment m_LineJustification
private TextProcessingStack`1<TextAlignment> m_LineJustificationStack
private float m_BaselineOffset
private TextProcessingStack`1<float> m_BaselineOffsetStack
private Color32 m_FontColor32
private Color32 m_HtmlColor
private Color32 m_UnderlineColor
private Color32 m_StrikethroughColor
private TextProcessingStack`1<Color32> m_ColorStack
private TextProcessingStack`1<Color32> m_UnderlineColorStack
private TextProcessingStack`1<Color32> m_StrikethroughColorStack
private TextProcessingStack`1<Color32> m_HighlightColorStack
private TextColorGradient m_ColorGradientPreset
private TextProcessingStack`1<TextColorGradient> m_ColorGradientStack
private TextProcessingStack`1<int> m_ActionStack
private bool m_IsFxMatrixSet
private float m_LineOffset
private float m_LineHeight
private float m_CSpacing
private float m_MonoSpacing
private float m_XAdvance
private float m_TagLineIndent
private float m_TagIndent
private TextProcessingStack`1<float> m_IndentStack
private bool m_TagNoParsing
private int m_CharacterCount
private int m_FirstCharacterOfLine
private int m_LastCharacterOfLine
private int m_FirstVisibleCharacterOfLine
private int m_LastVisibleCharacterOfLine
private float m_MaxLineAscender
private float m_MaxLineDescender
private int m_LineNumber
private int m_LineVisibleCharacterCount
private int m_FirstOverflowCharacterIndex
private int m_PageNumber
private float m_MarginLeft
private float m_MarginRight
private float m_Width
private Extents m_MeshExtents
private float m_MaxCapHeight
private float m_MaxAscender
private float m_MaxDescender
private bool m_IsNewPage
private bool m_IsNonBreakingSpace
private WordWrapState m_SavedWordWrapState
private WordWrapState m_SavedLineState
private int m_LoopCountA
private TextElementType m_TextElementType
private bool m_IsParsingText
private int m_SpriteIndex
private Color32 m_SpriteColor
private TextElement m_CachedTextElement
private Color32 m_HighlightColor
private float m_CharWidthAdjDelta
private Matrix4x4 m_FxMatrix
private float m_MaxFontSize
private float m_MinFontSize
private bool m_IsCharacterWrappingEnabled
private float m_StartOfLineAscender
private float m_LineSpacingDelta
private bool m_IsMaskingEnabled
private MaterialReference[] m_MaterialReferences
private int m_SpriteCount
private TextProcessingStack`1<int> m_StyleStack
private int m_SpriteAnimationId
private UInt32[] m_InternalTextParsingBuffer
private RichTextTagAttribute[] m_Attributes
private XmlTagAttribute[] m_XmlAttribute
private Char[] m_RichTextTag
private Dictionary`2<int, int> m_MaterialReferenceIndexLookup
private bool m_IsCalculatingPreferredValues
private SpriteAsset m_DefaultSpriteAsset
private bool m_TintSprite
protected SpecialCharacter m_Ellipsis
protected SpecialCharacter m_Underline
private bool m_IsUsingBold
private bool m_IsSdfShader
private TextElementInfo[] m_InternalTextElementInfo
private int m_RecursiveCount
private TextGenerator GetTextGenerator()
public void GenerateText(TextGenerationSettings settings, TextInfo textInfo)
public Vector2 GetCursorPosition(TextGenerationSettings settings, int index)
public Vector2 GetCursorPosition(TextInfo textInfo, Rect screenRect, int index, bool inverseYAxis)
public float GetPreferredWidth(TextGenerationSettings settings, TextInfo textInfo)
public float GetPreferredHeight(TextGenerationSettings settings, TextInfo textInfo)
public Vector2 GetPreferredValues(TextGenerationSettings settings, TextInfo textInfo)
private void Prepare(TextGenerationSettings generationSettings, TextInfo textInfo)
private void GenerateTextMesh(TextGenerationSettings generationSettings, TextInfo textInfo)
private void SaveWordWrappingState(WordWrapState& state, int index, int count, TextInfo textInfo)
protected int RestoreWordWrappingState(WordWrapState& state, TextInfo textInfo)
private bool ValidateRichTextTag(string sourceText, Int32& readIndex, Int32& writeIndex, TextGenerationSettings generationSettings, TextInfo textInfo)
protected bool ValidateHtmlTag(Int32[] chars, int startIndex, Int32& endIndex, TextGenerationSettings generationSettings, TextInfo textInfo)
private void SaveGlyphVertexInfo(float padding, float stylePadding, Color32 vertexColor, TextGenerationSettings generationSettings, TextInfo textInfo)
private void SaveSpriteVertexInfo(Color32 vertexColor, TextGenerationSettings generationSettings, TextInfo textInfo)
private void DrawUnderlineMesh(Vector3 start, Vector3 end, Int32& index, float startScale, float endScale, float maxScale, float sdfScale, Color32 underlineColor, TextGenerationSettings generationSettings, TextInfo textInfo)
private void DrawTextHighlight(Vector3 start, Vector3 end, Int32& index, Color32 highlightColor, TextGenerationSettings generationSettings, TextInfo textInfo)
private void ClearMesh(bool updateMesh, TextInfo textInfo)
private void EnableMasking()
private void DisableMasking()
private void SetArraySizes(Int32[] chars, TextGenerationSettings generationSettings, TextInfo textInfo)
internal TextElement GetTextElement(TextGenerationSettings generationSettings, UInt32 unicode, FontAsset fontAsset, FontStyles fontStyle, TextFontWeight fontWeight, Boolean& isUsingAlternativeTypeface)
private void ComputeMarginSize(Rect rect, Vector4 margins)
protected void GetSpecialCharacters(TextGenerationSettings generationSettings)
protected void GetEllipsisSpecialCharacter(TextGenerationSettings generationSettings)
protected void GetUnderlineSpecialCharacter(TextGenerationSettings generationSettings)
private float GetPaddingForMaterial(Material material, bool extraPadding)
private float GetPreferredWidthInternal(TextGenerationSettings generationSettings, TextInfo textInfo)
private float GetPreferredHeightInternal(TextGenerationSettings generationSettings, TextInfo textInfo)
private Vector2 GetPreferredValuesInternal(TextGenerationSettings generationSettings, TextInfo textInfo)
protected Vector2 CalculatePreferredValues(float defaultFontSize, Vector2 marginSize, bool ignoreTextAutoSizing, TextGenerationSettings generationSettings, TextInfo textInfo)
}
internal UnityEngine.TextCore.Text.TextGeneratorUtilities : object {
public Vector2 largePositiveVector2
public Vector2 largeNegativeVector2
public float largePositiveFloat
public float largeNegativeFloat
public bool Approximately(float a, float b)
public Color32 HexCharsToColor(Char[] hexChars, int tagCount)
public Color32 HexCharsToColor(Char[] hexChars, int startIndex, int length)
public int HexToInt(char hex)
public float ConvertToFloat(Char[] chars, int startIndex, int length)
public float ConvertToFloat(Char[] chars, int startIndex, int length, Int32& lastIndex)
public Vector2 PackUV(float x, float y, float scale)
public void StringToCharArray(string sourceText, Int32[]& charBuffer, TextProcessingStack`1& styleStack, TextGenerationSettings generationSettings)
private void ResizeInternalArray(T[]& array)
internal void ResizeArray(T[] array)
private bool IsTagName(String& text, string tag, int index)
private bool IsTagName(Int32[]& text, string tag, int index)
private bool ReplaceOpeningStyleTag(Int32[]& sourceText, int srcIndex, Int32& srcOffset, Int32[]& charBuffer, Int32& writeIndex, TextProcessingStack`1& styleStack, TextGenerationSettings& generationSettings)
private bool ReplaceOpeningStyleTag(String& sourceText, int srcIndex, Int32& srcOffset, Int32[]& charBuffer, Int32& writeIndex, TextProcessingStack`1& styleStack, TextGenerationSettings& generationSettings)
private void ReplaceClosingStyleTag(Int32[]& charBuffer, Int32& writeIndex, TextProcessingStack`1& styleStack, TextGenerationSettings& generationSettings)
private TextStyle GetStyle(TextGenerationSettings generationSetting, int hashCode)
private int GetUtf32(string text, int i)
private int GetUtf16(string text, int i)
private int GetTagHashCode(Int32[]& text, int index, Int32& closeIndex)
private int GetTagHashCode(String& text, int index, Int32& closeIndex)
public void FillCharacterVertexBuffers(int i, TextGenerationSettings generationSettings, TextInfo textInfo)
public void FillSpriteVertexBuffers(int i, TextGenerationSettings generationSettings, TextInfo textInfo)
public void AdjustLineOffset(int startIndex, int endIndex, float offset, TextInfo textInfo)
public void ResizeLineExtents(int size, TextInfo textInfo)
public FontStyles LegacyStyleToNewStyle(FontStyle fontStyle)
public TextAlignment LegacyAlignmentToNewAlignment(TextAnchor anchor)
}
internal UnityEngine.TextCore.Text.TextInfo : object {
private Vector2 s_InfinityVectorPositive
private Vector2 s_InfinityVectorNegative
public int characterCount
public int spriteCount
public int spaceCount
public int wordCount
public int linkCount
public int lineCount
public int pageCount
public int materialCount
public TextElementInfo[] textElementInfo
public WordInfo[] wordInfo
public LinkInfo[] linkInfo
public LineInfo[] lineInfo
public PageInfo[] pageInfo
public MeshInfo[] meshInfo
public bool isDirty
internal void Clear()
internal void ClearMeshInfo(bool updateMesh)
internal void ClearLineInfo()
internal void Resize(T[]& array, int size)
internal void Resize(T[]& array, int size, bool isBlockAllocated)
}
internal UnityEngine.TextCore.Text.TextOverflowMode : Enum {
public int value__
public TextOverflowMode Overflow
public TextOverflowMode Ellipsis
public TextOverflowMode Masking
public TextOverflowMode Truncate
public TextOverflowMode ScrollRect
public TextOverflowMode Page
public TextOverflowMode Linked
}
internal UnityEngine.TextCore.Text.TextProcessingStack`1 : ValueType {
public T[] itemStack
public int index
private T m_DefaultItem
private int m_Capacity
private int m_RolloverSize
private int m_Count
private int k_DefaultCapacity
public int Count
public T current
public int rolloverSize
public void .ctor(T[] stack)
public void .ctor(int capacity)
public void .ctor(int capacity, int rolloverSize)
public int get_Count()
public T get_current()
public int get_rolloverSize()
public void set_rolloverSize(int value)
internal void SetDefault(TextProcessingStack`1[] stack, T item)
public void Clear()
public void SetDefault(T item)
public void Add(T item)
public T Remove()
public void Push(T item)
public T Pop()
public T Peek()
public T CurrentItem()
public T PreviousItem()
}
internal UnityEngine.TextCore.Text.TextResourceManager : object {
private Dictionary`2<int, FontAssetRef> s_FontAssetReferences
private Dictionary`2<int, FontAsset> s_FontAssetNameReferenceLookup
private Dictionary`2<long, FontAsset> s_FontAssetFamilyNameAndStyleReferenceLookup
private List`1<int> s_FontAssetRemovalList
private int k_RegularStyleHashCode
internal void AddFontAsset(FontAsset fontAsset)
internal void RemoveFontAsset(FontAsset fontAsset)
internal bool TryGetFontAssetByName(int nameHashcode, FontAsset& fontAsset)
internal bool TryGetFontAssetByFamilyName(int familyNameHashCode, int styleNameHashCode, FontAsset& fontAsset)
internal void RebuildFontAssetCache()
}
public UnityEngine.TextCore.Text.TextSettings : ScriptableObject {
protected string m_Version
protected FontAsset m_DefaultFontAsset
protected string m_DefaultFontAssetPath
protected List`1<FontAsset> m_FallbackFontAssets
protected bool m_MatchMaterialPreset
protected int m_MissingCharacterUnicode
protected bool m_ClearDynamicDataOnBuild
protected SpriteAsset m_DefaultSpriteAsset
protected string m_DefaultSpriteAssetPath
protected List`1<SpriteAsset> m_FallbackSpriteAssets
protected UInt32 m_MissingSpriteCharacterUnicode
protected TextStyleSheet m_DefaultStyleSheet
protected string m_StyleSheetsResourcePath
protected string m_DefaultColorGradientPresetsPath
protected UnicodeLineBreakingRules m_UnicodeLineBreakingRules
protected bool m_DisplayWarnings
internal Dictionary`2<int, FontAsset> m_FontLookup
private List`1<FontReferenceMap> m_FontReferences
public string version
public FontAsset defaultFontAsset
public string defaultFontAssetPath
public List`1<FontAsset> fallbackFontAssets
public bool matchMaterialPreset
public int missingCharacterUnicode
public bool clearDynamicDataOnBuild
public SpriteAsset defaultSpriteAsset
public string defaultSpriteAssetPath
public List`1<SpriteAsset> fallbackSpriteAssets
public UInt32 missingSpriteCharacterUnicode
public TextStyleSheet defaultStyleSheet
public string styleSheetsResourcePath
public string defaultColorGradientPresetsPath
public UnicodeLineBreakingRules lineBreakingRules
public bool displayWarnings
public string get_version()
internal void set_version(string value)
public FontAsset get_defaultFontAsset()
public void set_defaultFontAsset(FontAsset value)
public string get_defaultFontAssetPath()
public void set_defaultFontAssetPath(string value)
public List`1<FontAsset> get_fallbackFontAssets()
public void set_fallbackFontAssets(List`1<FontAsset> value)
public bool get_matchMaterialPreset()
public void set_matchMaterialPreset(bool value)
public int get_missingCharacterUnicode()
public void set_missingCharacterUnicode(int value)
public bool get_clearDynamicDataOnBuild()
public void set_clearDynamicDataOnBuild(bool value)
public SpriteAsset get_defaultSpriteAsset()
public void set_defaultSpriteAsset(SpriteAsset value)
public string get_defaultSpriteAssetPath()
public void set_defaultSpriteAssetPath(string value)
public List`1<SpriteAsset> get_fallbackSpriteAssets()
public void set_fallbackSpriteAssets(List`1<SpriteAsset> value)
public UInt32 get_missingSpriteCharacterUnicode()
public void set_missingSpriteCharacterUnicode(UInt32 value)
public TextStyleSheet get_defaultStyleSheet()
public void set_defaultStyleSheet(TextStyleSheet value)
public string get_styleSheetsResourcePath()
public void set_styleSheetsResourcePath(string value)
public string get_defaultColorGradientPresetsPath()
public void set_defaultColorGradientPresetsPath(string value)
public UnicodeLineBreakingRules get_lineBreakingRules()
public void set_lineBreakingRules(UnicodeLineBreakingRules value)
public bool get_displayWarnings()
public void set_displayWarnings(bool value)
protected void InitializeFontReferenceLookup()
protected FontAsset GetCachedFontAssetInternal(Font font)
}
public UnityEngine.TextCore.Text.TextShaderUtilities : object {
public int ID_MainTex
public int ID_FaceTex
public int ID_FaceColor
public int ID_FaceDilate
public int ID_Shininess
public int ID_UnderlayColor
public int ID_UnderlayOffsetX
public int ID_UnderlayOffsetY
public int ID_UnderlayDilate
public int ID_UnderlaySoftness
public int ID_WeightNormal
public int ID_WeightBold
public int ID_OutlineTex
public int ID_OutlineWidth
public int ID_OutlineSoftness
public int ID_OutlineColor
public int ID_Outline2Color
public int ID_Outline2Width
public int ID_Padding
public int ID_GradientScale
public int ID_ScaleX
public int ID_ScaleY
public int ID_PerspectiveFilter
public int ID_Sharpness
public int ID_TextureWidth
public int ID_TextureHeight
public int ID_BevelAmount
public int ID_GlowColor
public int ID_GlowOffset
public int ID_GlowPower
public int ID_GlowOuter
public int ID_GlowInner
public int ID_LightAngle
public int ID_EnvMap
public int ID_EnvMatrix
public int ID_EnvMatrixRotation
public int ID_MaskCoord
public int ID_ClipRect
public int ID_MaskSoftnessX
public int ID_MaskSoftnessY
public int ID_VertexOffsetX
public int ID_VertexOffsetY
public int ID_UseClipRect
public int ID_StencilID
public int ID_StencilOp
public int ID_StencilComp
public int ID_StencilReadMask
public int ID_StencilWriteMask
public int ID_ShaderFlags
public int ID_ScaleRatio_A
public int ID_ScaleRatio_B
public int ID_ScaleRatio_C
public string Keyword_Bevel
public string Keyword_Glow
public string Keyword_Underlay
public string Keyword_Ratios
public string Keyword_MASK_SOFT
public string Keyword_MASK_HARD
public string Keyword_MASK_TEX
public string Keyword_Outline
public string ShaderTag_ZTestMode
public string ShaderTag_CullMode
private float m_clamp
public bool isInitialized
private Shader k_ShaderRef_MobileSDF
private Shader k_ShaderRef_MobileBitmap
private Shader k_ShaderRef_Sprite
internal Shader ShaderRef_MobileSDF
internal Shader ShaderRef_MobileBitmap
internal Shader ShaderRef_Sprite
internal Shader get_ShaderRef_MobileSDF()
internal Shader get_ShaderRef_MobileBitmap()
internal Shader get_ShaderRef_Sprite()
internal void GetShaderPropertyIDs()
private void UpdateShaderRatios(Material mat)
internal Vector4 GetFontExtent(Material material)
internal bool IsMaskingEnabled(Material material)
internal float GetPadding(Material material, bool enableExtraPadding, bool isBold)
internal float GetPadding(Material[] materials, bool enableExtraPadding, bool isBold)
}
public UnityEngine.TextCore.Text.TextStyle : object {
internal TextStyle k_NormalStyle
private string m_Name
private int m_HashCode
private string m_OpeningDefinition
private string m_ClosingDefinition
private Int32[] m_OpeningTagArray
private Int32[] m_ClosingTagArray
internal UInt32[] m_OpeningTagUnicodeArray
internal UInt32[] m_ClosingTagUnicodeArray
public TextStyle NormalStyle
public string name
public int hashCode
public string styleOpeningDefinition
public string styleClosingDefinition
public Int32[] styleOpeningTagArray
public Int32[] styleClosingTagArray
public TextStyle get_NormalStyle()
public string get_name()
public void set_name(string value)
public int get_hashCode()
public void set_hashCode(int value)
public string get_styleOpeningDefinition()
public string get_styleClosingDefinition()
public Int32[] get_styleOpeningTagArray()
public Int32[] get_styleClosingTagArray()
internal void .ctor(string styleName, string styleOpeningDefinition, string styleClosingDefinition)
public void RefreshStyle()
}
public UnityEngine.TextCore.Text.TextStyleSheet : ScriptableObject {
private List`1<TextStyle> m_StyleList
private Dictionary`2<int, TextStyle> m_StyleLookupDictionary
internal List`1<TextStyle> styles
internal List`1<TextStyle> get_styles()
public TextStyle GetStyle(int hashCode)
public TextStyle GetStyle(string name)
public void RefreshStyles()
private void LoadStyleDictionaryInternal()
}
internal UnityEngine.TextCore.Text.TextureMapping : Enum {
public int value__
public TextureMapping Character
public TextureMapping Line
public TextureMapping Paragraph
public TextureMapping MatchAspect
}
internal UnityEngine.TextCore.Text.TextUtilities : object {
private string k_LookupStringL
private string k_LookupStringU
internal void ResizeArray(T[]& array)
internal void ResizeArray(T[]& array, int size)
internal int NextPowerOfTwo(int v)
internal char ToLowerFast(char c)
internal char ToUpperFast(char c)
internal UInt32 ToUpperASCIIFast(UInt32 c)
internal UInt32 ToLowerASCIIFast(UInt32 c)
public int GetHashCodeCaseSensitive(string s)
public int GetHashCodeCaseInSensitive(string s)
public UInt32 GetSimpleHashCodeLowercase(string s)
internal UInt32 ConvertToUTF32(UInt32 highSurrogate, UInt32 lowSurrogate)
internal UInt32 ReadUTF16(UInt32[] text, int index)
internal UInt32 ReadUTF32(UInt32[] text, int index)
private UInt32 HexToInt(char hex)
public UInt32 StringHexToInt(string s)
internal string UintToString(List`1<UInt32> unicodes)
}
internal UnityEngine.TextCore.Text.TextVertex : ValueType {
public Vector3 position
public Vector2 uv
public Vector2 uv2
public Vector2 uv4
public Color32 color
}
internal UnityEngine.TextCore.Text.UnicodeCodePoint : object {
public UInt32 SPACE
public UInt32 DOUBLE_QUOTE
public UInt32 NUMBER_SIGN
public UInt32 PERCENTAGE
public UInt32 PLUS
public UInt32 MINUS
public UInt32 PERIOD
public UInt32 HYPHEN_MINUS
public UInt32 SOFT_HYPHEN
public UInt32 HYPHEN
public UInt32 NON_BREAKING_HYPHEN
public UInt32 ZERO_WIDTH_SPACE
public UInt32 RIGHT_SINGLE_QUOTATION
public UInt32 APOSTROPHE
public UInt32 WORD_JOINER
public UInt32 HIGH_SURROGATE_START
public UInt32 HIGH_SURROGATE_END
public UInt32 LOW_SURROGATE_START
public UInt32 LOW_SURROGATE_END
public int UNICODE_PLANE01_START
}
public UnityEngine.TextCore.Text.UnicodeLineBreakingRules : object {
private UnicodeLineBreakingRules s_Instance
private TextAsset m_UnicodeLineBreakingRules
private TextAsset m_LeadingCharacters
private TextAsset m_FollowingCharacters
private bool m_UseModernHangulLineBreakingRules
private HashSet`1<UInt32> s_LeadingCharactersLookup
private HashSet`1<UInt32> s_FollowingCharactersLookup
public TextAsset lineBreakingRules
public TextAsset leadingCharacters
public TextAsset followingCharacters
internal HashSet`1<UInt32> leadingCharactersLookup
internal HashSet`1<UInt32> followingCharactersLookup
public bool useModernHangulLineBreakingRules
public TextAsset get_lineBreakingRules()
public TextAsset get_leadingCharacters()
public TextAsset get_followingCharacters()
internal HashSet`1<UInt32> get_leadingCharactersLookup()
internal void set_leadingCharactersLookup(HashSet`1<UInt32> value)
internal HashSet`1<UInt32> get_followingCharactersLookup()
internal void set_followingCharactersLookup(HashSet`1<UInt32> value)
public bool get_useModernHangulLineBreakingRules()
public void set_useModernHangulLineBreakingRules(bool value)
internal void LoadLineBreakingRules()
internal void LoadLineBreakingRules(TextAsset leadingRules, TextAsset followingRules)
private HashSet`1<UInt32> GetCharacters(TextAsset file)
}
internal UnityEngine.TextCore.Text.VertexSortingOrder : Enum {
public int value__
public VertexSortingOrder Normal
public VertexSortingOrder Reverse
}
internal UnityEngine.TextCore.Text.VerticalAlignment : Enum {
public int value__
public VerticalAlignment Top
public VerticalAlignment Middle
public VerticalAlignment Bottom
public VerticalAlignment Baseline
public VerticalAlignment Midline
public VerticalAlignment Capline
}
internal UnityEngine.TextCore.Text.WordInfo : ValueType {
public int firstCharacterIndex
public int lastCharacterIndex
public int characterCount
}
internal UnityEngine.TextCore.Text.WordWrapState : ValueType {
public int previousWordBreak
public int totalCharacterCount
public int visibleCharacterCount
public int visibleSpriteCount
public int visibleLinkCount
public int firstCharacterIndex
public int firstVisibleCharacterIndex
public int lastCharacterIndex
public int lastVisibleCharIndex
public int lineNumber
public float maxCapHeight
public float maxAscender
public float maxDescender
public float maxLineAscender
public float maxLineDescender
public float previousLineAscender
public float xAdvance
public float preferredWidth
public float preferredHeight
public float previousLineScale
public int wordCount
public FontStyles fontStyle
public float fontScale
public float fontScaleMultiplier
public float currentFontSize
public float baselineOffset
public float lineOffset
public TextInfo textInfo
public LineInfo lineInfo
public Color32 vertexColor
public Color32 underlineColor
public Color32 strikethroughColor
public Color32 highlightColor
public FontStyleStack basicStyleStack
public TextProcessingStack`1<Color32> colorStack
public TextProcessingStack`1<Color32> underlineColorStack
public TextProcessingStack`1<Color32> strikethroughColorStack
public TextProcessingStack`1<Color32> highlightColorStack
public TextProcessingStack`1<TextColorGradient> colorGradientStack
public TextProcessingStack`1<float> sizeStack
public TextProcessingStack`1<float> indentStack
public TextProcessingStack`1<TextFontWeight> fontWeightStack
public TextProcessingStack`1<int> styleStack
public TextProcessingStack`1<float> baselineStack
public TextProcessingStack`1<int> actionStack
public TextProcessingStack`1<MaterialReference> materialReferenceStack
public TextProcessingStack`1<TextAlignment> lineJustificationStack
public int spriteAnimationId
public FontAsset currentFontAsset
public SpriteAsset currentSpriteAsset
public Material currentMaterial
public int currentMaterialIndex
public Extents meshExtents
public bool tagNoParsing
public bool isNonBreakingSpace
}
internal UnityEngine.TextCore.Text.XmlTagAttribute : ValueType {
public int nameHashCode
public TagValueType valueType
public int valueStartIndex
public int valueLength
public int valueHashCode
}
