public AOT.MonoPInvokeCallbackAttribute : Attribute {
public void .ctor(Type type)
}
public JetBrains.Annotations.BaseTypeRequiredAttribute : Attribute {
private Type <BaseType>k__BackingField
public Type BaseType
public void .ctor(Type baseType)
public Type get_BaseType()
private void set_BaseType(Type value)
}
public JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
private string <Contract>k__BackingField
private bool <ForceFullStates>k__BackingField
public string Contract
public bool ForceFullStates
public void .ctor(string contract)
public void .ctor(string contract, bool forceFullStates)
public string get_Contract()
private void set_Contract(string value)
public bool get_ForceFullStates()
private void set_ForceFullStates(bool value)
}
public JetBrains.Annotations.ImplicitUseKindFlags : Enum {
public int value__
public ImplicitUseKindFlags Default
public ImplicitUseKindFlags Access
public ImplicitUseKindFlags Assign
public ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature
public ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature
}
public JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
public int value__
public ImplicitUseTargetFlags Default
public ImplicitUseTargetFlags Itself
public ImplicitUseTargetFlags Members
public ImplicitUseTargetFlags WithMembers
}
public JetBrains.Annotations.LocalizationRequiredAttribute : Attribute {
private bool <Required>k__BackingField
public bool Required
public void .ctor(bool required)
public bool get_Required()
private void set_Required(bool value)
}
public JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
private ImplicitUseKindFlags <UseKindFlags>k__BackingField
private ImplicitUseTargetFlags <TargetFlags>k__BackingField
public ImplicitUseKindFlags UseKindFlags
public ImplicitUseTargetFlags TargetFlags
public void .ctor(ImplicitUseKindFlags useKindFlags)
public void .ctor(ImplicitUseTargetFlags targetFlags)
public void .ctor(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags)
public ImplicitUseKindFlags get_UseKindFlags()
private void set_UseKindFlags(ImplicitUseKindFlags value)
public ImplicitUseTargetFlags get_TargetFlags()
private void set_TargetFlags(ImplicitUseTargetFlags value)
}
public JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute : Attribute {
private string <ParameterName>k__BackingField
public string ParameterName
public void .ctor(string parameterName)
public string get_ParameterName()
private void set_ParameterName(string value)
}
public JetBrains.Annotations.PathReferenceAttribute : Attribute {
private string <BasePath>k__BackingField
public string BasePath
public void .ctor(string basePath)
public string get_BasePath()
private void set_BasePath(string value)
}
public JetBrains.Annotations.PublicAPIAttribute : Attribute {
private string <Comment>k__BackingField
public string Comment
public void .ctor(string comment)
public string get_Comment()
private void set_Comment(string value)
}
public JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
private string <FormatParameterName>k__BackingField
public string FormatParameterName
public void .ctor(string formatParameterName)
public string get_FormatParameterName()
private void set_FormatParameterName(string value)
}
public JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
private ImplicitUseKindFlags <UseKindFlags>k__BackingField
private ImplicitUseTargetFlags <TargetFlags>k__BackingField
public ImplicitUseKindFlags UseKindFlags
public ImplicitUseTargetFlags TargetFlags
public void .ctor(ImplicitUseKindFlags useKindFlags)
public void .ctor(ImplicitUseTargetFlags targetFlags)
public void .ctor(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags)
public ImplicitUseKindFlags get_UseKindFlags()
private void set_UseKindFlags(ImplicitUseKindFlags value)
public ImplicitUseTargetFlags get_TargetFlags()
private void set_TargetFlags(ImplicitUseTargetFlags value)
}
internal SimpleJson.IJsonSerializerStrategy {
public bool TrySerializeNonPrimitiveObject(object input, Object& output)
public object DeserializeObject(object value, Type type)
}
internal SimpleJson.JsonArray : List`1<object> {
public void .ctor(int capacity)
public string ToString()
}
internal SimpleJson.JsonObject : object {
private Dictionary`2<string, object> _members
public object Item
public ICollection`1<string> Keys
public ICollection`1<object> Values
public object Item
public int Count
public bool IsReadOnly
public void .ctor(IEqualityComparer`1<string> comparer)
public object get_Item(int index)
internal object GetAtIndex(IDictionary`2<string, object> obj, int index)
public void Add(string key, object value)
public bool ContainsKey(string key)
public ICollection`1<string> get_Keys()
public bool Remove(string key)
public bool TryGetValue(string key, Object& value)
public ICollection`1<object> get_Values()
public object get_Item(string key)
public void set_Item(string key, object value)
public void Add(KeyValuePair`2<string, object> item)
public void Clear()
public bool Contains(KeyValuePair`2<string, object> item)
public void CopyTo(KeyValuePair`2[] array, int arrayIndex)
public int get_Count()
public bool get_IsReadOnly()
public bool Remove(KeyValuePair`2<string, object> item)
public IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public string ToString()
}
internal SimpleJson.PocoJsonSerializerStrategy : object {
internal IDictionary`2<Type, ConstructorDelegate> ConstructorCache
internal IDictionary`2<Type, IDictionary`2<string, GetDelegate>> GetCache
internal IDictionary`2<Type, IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>>> SetCache
internal Type[] EmptyTypes
internal Type[] ArrayConstructorParameterTypes
private String[] Iso8601Format
protected string MapClrMemberNameToJsonFieldName(string clrPropertyName)
internal ConstructorDelegate ContructorDelegateFactory(Type key)
internal IDictionary`2<string, GetDelegate> GetterValueFactory(Type type)
internal IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type)
public bool TrySerializeNonPrimitiveObject(object input, Object& output)
public object DeserializeObject(object value, Type type)
protected object SerializeEnum(Enum p)
protected bool TrySerializeKnownTypes(object input, Object& output)
protected bool TrySerializeUnknownTypes(object input, Object& output)
}
internal SimpleJson.Reflection.ReflectionUtils : object {
private Object[] EmptyObjects
public Attribute GetAttribute(MemberInfo info, Type type)
public Attribute GetAttribute(Type objectType, Type attributeType)
public Type[] GetGenericTypeArguments(Type type)
public bool IsTypeGenericeCollectionInterface(Type type)
public bool IsAssignableFrom(Type type1, Type type2)
public bool IsTypeDictionary(Type type)
public bool IsNullableType(Type type)
public object ToNullableType(object obj, Type nullableType)
public bool IsValueType(Type type)
public IEnumerable`1<ConstructorInfo> GetConstructors(Type type)
public ConstructorInfo GetConstructorInfo(Type type, Type[] argsType)
public IEnumerable`1<PropertyInfo> GetProperties(Type type)
public IEnumerable`1<FieldInfo> GetFields(Type type)
public MethodInfo GetGetterMethodInfo(PropertyInfo propertyInfo)
public MethodInfo GetSetterMethodInfo(PropertyInfo propertyInfo)
public ConstructorDelegate GetContructor(ConstructorInfo constructorInfo)
public ConstructorDelegate GetContructor(Type type, Type[] argsType)
public ConstructorDelegate GetConstructorByReflection(ConstructorInfo constructorInfo)
public ConstructorDelegate GetConstructorByReflection(Type type, Type[] argsType)
public GetDelegate GetGetMethod(PropertyInfo propertyInfo)
public GetDelegate GetGetMethod(FieldInfo fieldInfo)
public GetDelegate GetGetMethodByReflection(PropertyInfo propertyInfo)
public GetDelegate GetGetMethodByReflection(FieldInfo fieldInfo)
public SetDelegate GetSetMethod(PropertyInfo propertyInfo)
public SetDelegate GetSetMethod(FieldInfo fieldInfo)
public SetDelegate GetSetMethodByReflection(PropertyInfo propertyInfo)
public SetDelegate GetSetMethodByReflection(FieldInfo fieldInfo)
}
internal SimpleJson.SimpleJson : object {
private int TOKEN_NONE
private int TOKEN_CURLY_OPEN
private int TOKEN_CURLY_CLOSE
private int TOKEN_SQUARED_OPEN
private int TOKEN_SQUARED_CLOSE
private int TOKEN_COLON
private int TOKEN_COMMA
private int TOKEN_STRING
private int TOKEN_NUMBER
private int TOKEN_TRUE
private int TOKEN_FALSE
private int TOKEN_NULL
private int BUILDER_CAPACITY
private IJsonSerializerStrategy _currentJsonSerializerStrategy
private PocoJsonSerializerStrategy _pocoJsonSerializerStrategy
public IJsonSerializerStrategy CurrentJsonSerializerStrategy
public PocoJsonSerializerStrategy PocoJsonSerializerStrategy
public object DeserializeObject(string json)
public bool TryDeserializeObject(string json, Object& obj)
public object DeserializeObject(string json, Type type, IJsonSerializerStrategy jsonSerializerStrategy)
public object DeserializeObject(string json, Type type)
public T DeserializeObject(string json, IJsonSerializerStrategy jsonSerializerStrategy)
public T DeserializeObject(string json)
public string SerializeObject(object json, IJsonSerializerStrategy jsonSerializerStrategy)
public string SerializeObject(object json)
public string EscapeToJavascriptString(string jsonString)
private IDictionary`2<string, object> ParseObject(Char[] json, Int32& index, Boolean& success)
private JsonArray ParseArray(Char[] json, Int32& index, Boolean& success)
private object ParseValue(Char[] json, Int32& index, Boolean& success)
private string ParseString(Char[] json, Int32& index, Boolean& success)
private string ConvertFromUtf32(int utf32)
private object ParseNumber(Char[] json, Int32& index, Boolean& success)
private int GetLastIndexOfNumber(Char[] json, int index)
private void EatWhitespace(Char[] json, Int32& index)
private int LookAhead(Char[] json, int index)
private int NextToken(Char[] json, Int32& index)
private bool SerializeValue(IJsonSerializerStrategy jsonSerializerStrategy, object value, StringBuilder builder)
private bool SerializeObject(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable keys, IEnumerable values, StringBuilder builder)
private bool SerializeArray(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable anArray, StringBuilder builder)
private bool SerializeString(string aString, StringBuilder builder)
private bool SerializeNumber(object number, StringBuilder builder)
private bool IsNumeric(object value)
public IJsonSerializerStrategy get_CurrentJsonSerializerStrategy()
public void set_CurrentJsonSerializerStrategy(IJsonSerializerStrategy value)
public PocoJsonSerializerStrategy get_PocoJsonSerializerStrategy()
}
internal UnityEngine._AndroidJNIHelper : object {
public IntPtr CreateJavaProxy(int delegateHandle, AndroidJavaProxy proxy)
public IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable)
public IntPtr InvokeJavaProxyMethod(AndroidJavaProxy proxy, IntPtr jmethodName, IntPtr jargs)
public jvalue[] CreateJNIArgArray(Object[] args)
public object UnboxArray(AndroidJavaObject obj)
public object Unbox(AndroidJavaObject obj)
public AndroidJavaObject Box(object obj)
public void DeleteJNIArgArray(Object[] args, jvalue[] jniArgs)
public IntPtr ConvertToJNIArray(Array array)
public ArrayType ConvertFromJNIArray(IntPtr array)
public IntPtr GetConstructorID(IntPtr jclass, Object[] args)
public IntPtr GetMethodID(IntPtr jclass, string methodName, Object[] args, bool isStatic)
public IntPtr GetMethodID(IntPtr jclass, string methodName, Object[] args, bool isStatic)
public IntPtr GetFieldID(IntPtr jclass, string fieldName, bool isStatic)
public IntPtr GetConstructorID(IntPtr jclass, string signature)
public IntPtr GetMethodID(IntPtr jclass, string methodName, string signature, bool isStatic)
private IntPtr GetMethodIDFallback(IntPtr jclass, string methodName, string signature, bool isStatic)
public IntPtr GetFieldID(IntPtr jclass, string fieldName, string signature, bool isStatic)
public string GetSignature(object obj)
public string GetSignature(Object[] args)
public string GetSignature(Object[] args)
}
public UnityEngine.AccelerationEvent : ValueType {
private float x
private float y
private float z
private float m_TimeDelta
public Vector3 acceleration
public float deltaTime
public Vector3 get_acceleration()
public float get_deltaTime()
}
public UnityEngine.AddComponentMenu : Attribute {
private string m_AddComponentMenu
private int m_Ordering
public string componentMenu
public int componentOrder
public void .ctor(string menuName)
public void .ctor(string menuName, int order)
public string get_componentMenu()
public int get_componentOrder()
}
public UnityEngine.AdditionalCanvasShaderChannels : Enum {
public int value__
public AdditionalCanvasShaderChannels None
public AdditionalCanvasShaderChannels TexCoord1
public AdditionalCanvasShaderChannels TexCoord2
public AdditionalCanvasShaderChannels TexCoord3
public AdditionalCanvasShaderChannels Normal
public AdditionalCanvasShaderChannels Tangent
}
internal UnityEngine.Advertisements.UnityAdsSettings : object {
public bool enabled
public bool initializeOnStartup
public bool testMode
public bool get_enabled()
public void set_enabled(bool value)
public bool IsPlatformEnabled(RuntimePlatform platform)
public void SetPlatformEnabled(RuntimePlatform platform, bool value)
public bool get_initializeOnStartup()
public void set_initializeOnStartup(bool value)
public bool get_testMode()
public void set_testMode(bool value)
public string GetGameId(RuntimePlatform platform)
public void SetGameId(RuntimePlatform platform, string gameId)
}
public UnityEngine.AI.NavMesh : object {
public OnNavMeshPreUpdate onPreUpdate
public int AllAreas
public float avoidancePredictionTime
public int pathfindingIterationsPerFrame
private void Internal_CallOnNavMeshPreUpdate()
public bool Raycast(Vector3 sourcePosition, Vector3 targetPosition, NavMeshHit& hit, int areaMask)
private bool INTERNAL_CALL_Raycast(Vector3& sourcePosition, Vector3& targetPosition, NavMeshHit& hit, int areaMask)
public bool CalculatePath(Vector3 sourcePosition, Vector3 targetPosition, int areaMask, NavMeshPath path)
internal bool CalculatePathInternal(Vector3 sourcePosition, Vector3 targetPosition, int areaMask, NavMeshPath path)
private bool INTERNAL_CALL_CalculatePathInternal(Vector3& sourcePosition, Vector3& targetPosition, int areaMask, NavMeshPath path)
public bool FindClosestEdge(Vector3 sourcePosition, NavMeshHit& hit, int areaMask)
private bool INTERNAL_CALL_FindClosestEdge(Vector3& sourcePosition, NavMeshHit& hit, int areaMask)
public bool SamplePosition(Vector3 sourcePosition, NavMeshHit& hit, float maxDistance, int areaMask)
private bool INTERNAL_CALL_SamplePosition(Vector3& sourcePosition, NavMeshHit& hit, float maxDistance, int areaMask)
public void SetLayerCost(int layer, float cost)
public float GetLayerCost(int layer)
public int GetNavMeshLayerFromName(string layerName)
public void SetAreaCost(int areaIndex, float cost)
public float GetAreaCost(int areaIndex)
public int GetAreaFromName(string areaName)
public NavMeshTriangulation CalculateTriangulation()
internal object TriangulateInternal()
public void Triangulate(Vector3[]& vertices, Int32[]& indices)
public void AddOffMeshLinks()
public void RestoreNavMesh()
public float get_avoidancePredictionTime()
public void set_avoidancePredictionTime(float value)
internal void SetAvoidancePredictionTime(float t)
internal float GetAvoidancePredictionTime()
public int get_pathfindingIterationsPerFrame()
public void set_pathfindingIterationsPerFrame(int value)
internal void SetPathfindingIterationsPerFrame(int iter)
internal int GetPathfindingIterationsPerFrame()
public NavMeshDataInstance AddNavMeshData(NavMeshData navMeshData)
public NavMeshDataInstance AddNavMeshData(NavMeshData navMeshData, Vector3 position, Quaternion rotation)
public void RemoveNavMeshData(NavMeshDataInstance handle)
internal bool IsValidNavMeshDataHandle(int handle)
internal bool IsValidLinkHandle(int handle)
internal Object InternalGetOwner(int dataID)
internal bool InternalSetOwner(int dataID, int ownerID)
internal Object InternalGetLinkOwner(int linkID)
internal bool InternalSetLinkOwner(int linkID, int ownerID)
internal int AddNavMeshDataInternal(NavMeshData navMeshData)
internal int AddNavMeshDataTransformedInternal(NavMeshData navMeshData, Vector3 position, Quaternion rotation)
private int INTERNAL_CALL_AddNavMeshDataTransformedInternal(NavMeshData navMeshData, Vector3& position, Quaternion& rotation)
internal void RemoveNavMeshDataInternal(int handle)
public NavMeshLinkInstance AddLink(NavMeshLinkData link)
public NavMeshLinkInstance AddLink(NavMeshLinkData link, Vector3 position, Quaternion rotation)
public void RemoveLink(NavMeshLinkInstance handle)
internal int AddLinkInternal(NavMeshLinkData link, Vector3 position, Quaternion rotation)
private int INTERNAL_CALL_AddLinkInternal(NavMeshLinkData& link, Vector3& position, Quaternion& rotation)
internal void RemoveLinkInternal(int handle)
public bool SamplePosition(Vector3 sourcePosition, NavMeshHit& hit, float maxDistance, NavMeshQueryFilter filter)
private bool SamplePositionFilter(Vector3 sourcePosition, NavMeshHit& hit, float maxDistance, int type, int mask)
private bool INTERNAL_CALL_SamplePositionFilter(Vector3& sourcePosition, NavMeshHit& hit, float maxDistance, int type, int mask)
public bool FindClosestEdge(Vector3 sourcePosition, NavMeshHit& hit, NavMeshQueryFilter filter)
private bool FindClosestEdgeFilter(Vector3 sourcePosition, NavMeshHit& hit, int type, int mask)
private bool INTERNAL_CALL_FindClosestEdgeFilter(Vector3& sourcePosition, NavMeshHit& hit, int type, int mask)
public bool Raycast(Vector3 sourcePosition, Vector3 targetPosition, NavMeshHit& hit, NavMeshQueryFilter filter)
private bool RaycastFilter(Vector3 sourcePosition, Vector3 targetPosition, NavMeshHit& hit, int type, int mask)
private bool INTERNAL_CALL_RaycastFilter(Vector3& sourcePosition, Vector3& targetPosition, NavMeshHit& hit, int type, int mask)
public bool CalculatePath(Vector3 sourcePosition, Vector3 targetPosition, NavMeshQueryFilter filter, NavMeshPath path)
internal bool CalculatePathFilterInternal(Vector3 sourcePosition, Vector3 targetPosition, NavMeshPath path, int type, int mask, Single[] costs)
private bool INTERNAL_CALL_CalculatePathFilterInternal(Vector3& sourcePosition, Vector3& targetPosition, NavMeshPath path, int type, int mask, Single[] costs)
public NavMeshBuildSettings CreateSettings()
private void INTERNAL_CALL_CreateSettings(NavMeshBuildSettings& value)
public void RemoveSettings(int agentTypeID)
public NavMeshBuildSettings GetSettingsByID(int agentTypeID)
private void INTERNAL_CALL_GetSettingsByID(int agentTypeID, NavMeshBuildSettings& value)
public int GetSettingsCount()
public NavMeshBuildSettings GetSettingsByIndex(int index)
private void INTERNAL_CALL_GetSettingsByIndex(int index, NavMeshBuildSettings& value)
public string GetSettingsNameFromID(int agentTypeID)
}
public UnityEngine.AI.NavMeshAgent : Behaviour {
public Vector3 destination
public float stoppingDistance
public Vector3 velocity
public Vector3 nextPosition
public Vector3 steeringTarget
public Vector3 desiredVelocity
public float remainingDistance
public float baseOffset
public bool isOnOffMeshLink
public OffMeshLinkData currentOffMeshLinkData
public OffMeshLinkData nextOffMeshLinkData
public bool autoTraverseOffMeshLink
public bool autoBraking
public bool autoRepath
public bool hasPath
public bool pathPending
public bool isPathStale
public NavMeshPathStatus pathStatus
public Vector3 pathEndPosition
public bool isStopped
public NavMeshPath path
public Object navMeshOwner
public int agentTypeID
public int walkableMask
public int areaMask
public float speed
public float angularSpeed
public float acceleration
public bool updatePosition
public bool updateRotation
public bool updateUpAxis
public float radius
public float height
public ObstacleAvoidanceType obstacleAvoidanceType
public int avoidancePriority
public bool isOnNavMesh
public bool SetDestination(Vector3 target)
private bool INTERNAL_CALL_SetDestination(NavMeshAgent self, Vector3& target)
public Vector3 get_destination()
public void set_destination(Vector3 value)
private void INTERNAL_get_destination(Vector3& value)
private void INTERNAL_set_destination(Vector3& value)
public float get_stoppingDistance()
public void set_stoppingDistance(float value)
public Vector3 get_velocity()
public void set_velocity(Vector3 value)
private void INTERNAL_get_velocity(Vector3& value)
private void INTERNAL_set_velocity(Vector3& value)
public Vector3 get_nextPosition()
public void set_nextPosition(Vector3 value)
private void INTERNAL_get_nextPosition(Vector3& value)
private void INTERNAL_set_nextPosition(Vector3& value)
public Vector3 get_steeringTarget()
private void INTERNAL_get_steeringTarget(Vector3& value)
public Vector3 get_desiredVelocity()
private void INTERNAL_get_desiredVelocity(Vector3& value)
public float get_remainingDistance()
public float get_baseOffset()
public void set_baseOffset(float value)
public bool get_isOnOffMeshLink()
public void ActivateCurrentOffMeshLink(bool activated)
public OffMeshLinkData get_currentOffMeshLinkData()
internal OffMeshLinkData GetCurrentOffMeshLinkDataInternal()
public OffMeshLinkData get_nextOffMeshLinkData()
internal OffMeshLinkData GetNextOffMeshLinkDataInternal()
public void CompleteOffMeshLink()
public bool get_autoTraverseOffMeshLink()
public void set_autoTraverseOffMeshLink(bool value)
public bool get_autoBraking()
public void set_autoBraking(bool value)
public bool get_autoRepath()
public void set_autoRepath(bool value)
public bool get_hasPath()
public bool get_pathPending()
public bool get_isPathStale()
public NavMeshPathStatus get_pathStatus()
public Vector3 get_pathEndPosition()
private void INTERNAL_get_pathEndPosition(Vector3& value)
public bool Warp(Vector3 newPosition)
private bool INTERNAL_CALL_Warp(NavMeshAgent self, Vector3& newPosition)
public void Move(Vector3 offset)
private void INTERNAL_CALL_Move(NavMeshAgent self, Vector3& offset)
public void Stop()
internal void StopInternal()
public void Stop(bool stopUpdates)
public void Resume()
public bool get_isStopped()
public void set_isStopped(bool value)
public void ResetPath()
public bool SetPath(NavMeshPath path)
public NavMeshPath get_path()
public void set_path(NavMeshPath value)
internal void CopyPathTo(NavMeshPath path)
public bool FindClosestEdge(NavMeshHit& hit)
public bool Raycast(Vector3 targetPosition, NavMeshHit& hit)
private bool INTERNAL_CALL_Raycast(NavMeshAgent self, Vector3& targetPosition, NavMeshHit& hit)
public bool CalculatePath(Vector3 targetPosition, NavMeshPath path)
private bool CalculatePathInternal(Vector3 targetPosition, NavMeshPath path)
private bool INTERNAL_CALL_CalculatePathInternal(NavMeshAgent self, Vector3& targetPosition, NavMeshPath path)
public bool SamplePathPosition(int areaMask, float maxDistance, NavMeshHit& hit)
public void SetLayerCost(int layer, float cost)
public float GetLayerCost(int layer)
public void SetAreaCost(int areaIndex, float areaCost)
public float GetAreaCost(int areaIndex)
public Object get_navMeshOwner()
public int get_agentTypeID()
public void set_agentTypeID(int value)
private Object GetOwnerInternal()
public int get_walkableMask()
public void set_walkableMask(int value)
public int get_areaMask()
public void set_areaMask(int value)
public float get_speed()
public void set_speed(float value)
public float get_angularSpeed()
public void set_angularSpeed(float value)
public float get_acceleration()
public void set_acceleration(float value)
public bool get_updatePosition()
public void set_updatePosition(bool value)
public bool get_updateRotation()
public void set_updateRotation(bool value)
public bool get_updateUpAxis()
public void set_updateUpAxis(bool value)
public float get_radius()
public void set_radius(float value)
public float get_height()
public void set_height(float value)
public ObstacleAvoidanceType get_obstacleAvoidanceType()
public void set_obstacleAvoidanceType(ObstacleAvoidanceType value)
public int get_avoidancePriority()
public void set_avoidancePriority(int value)
public bool get_isOnNavMesh()
}
internal UnityEngine.AI.NavMeshBuildDebugSettings : ValueType {
private int m_ShowInputGeom
private int m_ShowVoxels
private int m_ShowRegions
private int m_ShowRawContours
private int m_ShowContours
private int m_ShowPolyMesh
private int m_ShowPolyMeshDetail
private int m_UseFocus
private Vector3 m_FocusPoint
public bool showInputGeom
public bool showVoxels
public bool showRegions
public bool showRawContours
public bool showContours
public bool showPolyMesh
public bool showPolyMeshDetail
public bool useFocus
public Vector3 focusPoint
public bool get_showInputGeom()
public void set_showInputGeom(bool value)
public bool get_showVoxels()
public void set_showVoxels(bool value)
public bool get_showRegions()
public void set_showRegions(bool value)
public bool get_showRawContours()
public void set_showRawContours(bool value)
public bool get_showContours()
public void set_showContours(bool value)
public bool get_showPolyMesh()
public void set_showPolyMesh(bool value)
public bool get_showPolyMeshDetail()
public void set_showPolyMeshDetail(bool value)
public bool get_useFocus()
public void set_useFocus(bool value)
public Vector3 get_focusPoint()
public void set_focusPoint(Vector3 value)
}
public UnityEngine.AI.NavMeshBuilder : object {
public void CollectSources(Bounds includedWorldBounds, int includedLayerMask, NavMeshCollectGeometry geometry, int defaultArea, List`1<NavMeshBuildMarkup> markups, List`1<NavMeshBuildSource> results)
public void CollectSources(Transform root, int includedLayerMask, NavMeshCollectGeometry geometry, int defaultArea, List`1<NavMeshBuildMarkup> markups, List`1<NavMeshBuildSource> results)
private NavMeshBuildSource[] CollectSourcesInternal(int includedLayerMask, Bounds includedWorldBounds, Transform root, bool useBounds, NavMeshCollectGeometry geometry, int defaultArea, NavMeshBuildMarkup[] markups)
private NavMeshBuildSource[] INTERNAL_CALL_CollectSourcesInternal(int includedLayerMask, Bounds& includedWorldBounds, Transform root, bool useBounds, NavMeshCollectGeometry geometry, int defaultArea, NavMeshBuildMarkup[] markups)
public NavMeshData BuildNavMeshData(NavMeshBuildSettings buildSettings, List`1<NavMeshBuildSource> sources, Bounds localBounds, Vector3 position, Quaternion rotation)
private NavMeshData BuildNavMeshData(NavMeshBuildSettings buildSettings, List`1<NavMeshBuildSource> sources, Bounds localBounds, Vector3 position, Quaternion rotation, NavMeshBuildDebugSettings debug)
public bool UpdateNavMeshData(NavMeshData data, NavMeshBuildSettings buildSettings, List`1<NavMeshBuildSource> sources, Bounds localBounds)
private bool UpdateNavMeshData(NavMeshData data, NavMeshBuildSettings buildSettings, List`1<NavMeshBuildSource> sources, Bounds localBounds, NavMeshBuildDebugSettings debug)
private bool UpdateNavMeshDataListInternal(NavMeshData data, NavMeshBuildSettings buildSettings, object sources, Bounds localBounds, NavMeshBuildDebugSettings debug)
private bool INTERNAL_CALL_UpdateNavMeshDataListInternal(NavMeshData data, NavMeshBuildSettings& buildSettings, object sources, Bounds& localBounds, NavMeshBuildDebugSettings& debug)
public AsyncOperation UpdateNavMeshDataAsync(NavMeshData data, NavMeshBuildSettings buildSettings, List`1<NavMeshBuildSource> sources, Bounds localBounds)
private AsyncOperation UpdateNavMeshDataAsync(NavMeshData data, NavMeshBuildSettings buildSettings, List`1<NavMeshBuildSource> sources, Bounds localBounds, NavMeshBuildDebugSettings debug)
public void Cancel(NavMeshData data)
private AsyncOperation UpdateNavMeshDataAsyncListInternal(NavMeshData data, NavMeshBuildSettings buildSettings, object sources, Bounds localBounds, NavMeshBuildDebugSettings debug)
private AsyncOperation INTERNAL_CALL_UpdateNavMeshDataAsyncListInternal(NavMeshData data, NavMeshBuildSettings& buildSettings, object sources, Bounds& localBounds, NavMeshBuildDebugSettings& debug)
}
public UnityEngine.AI.NavMeshBuildMarkup : ValueType {
private int m_OverrideArea
private int m_Area
private int m_IgnoreFromBuild
private int m_InstanceID
public bool overrideArea
public int area
public bool ignoreFromBuild
public Transform root
public bool get_overrideArea()
public void set_overrideArea(bool value)
public int get_area()
public void set_area(int value)
public bool get_ignoreFromBuild()
public void set_ignoreFromBuild(bool value)
public Transform get_root()
public void set_root(Transform value)
private Transform InternalGetRootGO(int instanceID)
}
public UnityEngine.AI.NavMeshBuildSettings : ValueType {
private int m_AgentTypeID
private float m_AgentRadius
private float m_AgentHeight
private float m_AgentSlope
private float m_AgentClimb
private float m_LedgeDropHeight
private float m_MaxJumpAcrossDistance
private float m_MinRegionArea
private int m_OverrideVoxelSize
private float m_VoxelSize
private int m_OverrideTileSize
private int m_TileSize
private int m_AccuratePlacement
public int agentTypeID
public float agentRadius
public float agentHeight
public float agentSlope
public float agentClimb
public float minRegionArea
public bool overrideVoxelSize
public float voxelSize
public bool overrideTileSize
public int tileSize
public int get_agentTypeID()
public void set_agentTypeID(int value)
public float get_agentRadius()
public void set_agentRadius(float value)
public float get_agentHeight()
public void set_agentHeight(float value)
public float get_agentSlope()
public void set_agentSlope(float value)
public float get_agentClimb()
public void set_agentClimb(float value)
public float get_minRegionArea()
public void set_minRegionArea(float value)
public bool get_overrideVoxelSize()
public void set_overrideVoxelSize(bool value)
public float get_voxelSize()
public void set_voxelSize(float value)
public bool get_overrideTileSize()
public void set_overrideTileSize(bool value)
public int get_tileSize()
public void set_tileSize(int value)
public String[] ValidationReport(Bounds buildBounds)
private String[] InternalValidationReport(NavMeshBuildSettings buildSettings, Bounds buildBounds)
private String[] INTERNAL_CALL_InternalValidationReport(NavMeshBuildSettings& buildSettings, Bounds& buildBounds)
}
public UnityEngine.AI.NavMeshBuildSource : ValueType {
private Matrix4x4 m_Transform
private Vector3 m_Size
private NavMeshBuildSourceShape m_Shape
private int m_Area
private int m_InstanceID
private int m_ComponentID
public Matrix4x4 transform
public Vector3 size
public NavMeshBuildSourceShape shape
public int area
public Object sourceObject
public Component component
public Matrix4x4 get_transform()
public void set_transform(Matrix4x4 value)
public Vector3 get_size()
public void set_size(Vector3 value)
public NavMeshBuildSourceShape get_shape()
public void set_shape(NavMeshBuildSourceShape value)
public int get_area()
public void set_area(int value)
public Object get_sourceObject()
public void set_sourceObject(Object value)
public Component get_component()
public void set_component(Component value)
private Component InternalGetComponent(int instanceID)
private Object InternalGetObject(int instanceID)
}
public UnityEngine.AI.NavMeshBuildSourceShape : Enum {
public int value__
public NavMeshBuildSourceShape Mesh
public NavMeshBuildSourceShape Terrain
public NavMeshBuildSourceShape Box
public NavMeshBuildSourceShape Sphere
public NavMeshBuildSourceShape Capsule
public NavMeshBuildSourceShape ModifierBox
}
public UnityEngine.AI.NavMeshCollectGeometry : Enum {
public int value__
public NavMeshCollectGeometry RenderMeshes
public NavMeshCollectGeometry PhysicsColliders
}
public UnityEngine.AI.NavMeshData : Object {
public Bounds sourceBounds
public Vector3 position
public Quaternion rotation
public void .ctor(int agentTypeID)
private void Internal_Create(NavMeshData mono, int agentTypeID)
public Bounds get_sourceBounds()
private void INTERNAL_get_sourceBounds(Bounds& value)
public Vector3 get_position()
public void set_position(Vector3 value)
private void INTERNAL_get_position(Vector3& value)
private void INTERNAL_set_position(Vector3& value)
public Quaternion get_rotation()
public void set_rotation(Quaternion value)
private void INTERNAL_get_rotation(Quaternion& value)
private void INTERNAL_set_rotation(Quaternion& value)
}
public UnityEngine.AI.NavMeshDataInstance : ValueType {
private int m_Handle
public bool valid
internal int id
public Object owner
public bool get_valid()
internal int get_id()
internal void set_id(int value)
public void Remove()
public Object get_owner()
public void set_owner(Object value)
}
public UnityEngine.AI.NavMeshHit : ValueType {
private Vector3 m_Position
private Vector3 m_Normal
private float m_Distance
private int m_Mask
private int m_Hit
public Vector3 position
public Vector3 normal
public float distance
public int mask
public bool hit
public Vector3 get_position()
public void set_position(Vector3 value)
public Vector3 get_normal()
public void set_normal(Vector3 value)
public float get_distance()
public void set_distance(float value)
public int get_mask()
public void set_mask(int value)
public bool get_hit()
public void set_hit(bool value)
}
public UnityEngine.AI.NavMeshLinkData : ValueType {
private Vector3 m_StartPosition
private Vector3 m_EndPosition
private float m_CostModifier
private int m_Bidirectional
private float m_Width
private int m_Area
private int m_AgentTypeID
public Vector3 startPosition
public Vector3 endPosition
public float costModifier
public bool bidirectional
public float width
public int area
public int agentTypeID
public Vector3 get_startPosition()
public void set_startPosition(Vector3 value)
public Vector3 get_endPosition()
public void set_endPosition(Vector3 value)
public float get_costModifier()
public void set_costModifier(float value)
public bool get_bidirectional()
public void set_bidirectional(bool value)
public float get_width()
public void set_width(float value)
public int get_area()
public void set_area(int value)
public int get_agentTypeID()
public void set_agentTypeID(int value)
}
public UnityEngine.AI.NavMeshLinkInstance : ValueType {
private int m_Handle
public bool valid
internal int id
public Object owner
public bool get_valid()
internal int get_id()
internal void set_id(int value)
public void Remove()
public Object get_owner()
public void set_owner(Object value)
}
public UnityEngine.AI.NavMeshObstacle : Behaviour {
public float height
public float radius
public Vector3 velocity
public bool carving
public bool carveOnlyStationary
public float carvingMoveThreshold
public float carvingTimeToStationary
public NavMeshObstacleShape shape
public Vector3 center
public Vector3 size
public float get_height()
public void set_height(float value)
public float get_radius()
public void set_radius(float value)
public Vector3 get_velocity()
public void set_velocity(Vector3 value)
private void INTERNAL_get_velocity(Vector3& value)
private void INTERNAL_set_velocity(Vector3& value)
public bool get_carving()
public void set_carving(bool value)
public bool get_carveOnlyStationary()
public void set_carveOnlyStationary(bool value)
public float get_carvingMoveThreshold()
public void set_carvingMoveThreshold(float value)
public float get_carvingTimeToStationary()
public void set_carvingTimeToStationary(float value)
public NavMeshObstacleShape get_shape()
public void set_shape(NavMeshObstacleShape value)
public Vector3 get_center()
public void set_center(Vector3 value)
private void INTERNAL_get_center(Vector3& value)
private void INTERNAL_set_center(Vector3& value)
public Vector3 get_size()
public void set_size(Vector3 value)
private void INTERNAL_get_size(Vector3& value)
private void INTERNAL_set_size(Vector3& value)
internal void FitExtents()
}
public UnityEngine.AI.NavMeshObstacleShape : Enum {
public int value__
public NavMeshObstacleShape Capsule
public NavMeshObstacleShape Box
}
public UnityEngine.AI.NavMeshPath : object {
internal IntPtr m_Ptr
internal Vector3[] m_corners
public Vector3[] corners
public NavMeshPathStatus status
private void DestroyNavMeshPath()
protected void Finalize()
public int GetCornersNonAlloc(Vector3[] results)
private Vector3[] CalculateCornersInternal()
private void ClearCornersInternal()
public void ClearCorners()
private void CalculateCorners()
public Vector3[] get_corners()
public NavMeshPathStatus get_status()
}
public UnityEngine.AI.NavMeshPathStatus : Enum {
public int value__
public NavMeshPathStatus PathComplete
public NavMeshPathStatus PathPartial
public NavMeshPathStatus PathInvalid
}
public UnityEngine.AI.NavMeshQueryFilter : ValueType {
private int AREA_COST_ELEMENT_COUNT
private int m_AreaMask
private int m_AgentTypeID
private Single[] m_AreaCost
internal Single[] costs
public int areaMask
public int agentTypeID
internal Single[] get_costs()
public int get_areaMask()
public void set_areaMask(int value)
public int get_agentTypeID()
public void set_agentTypeID(int value)
public float GetAreaCost(int areaIndex)
public void SetAreaCost(int areaIndex, float cost)
}
public UnityEngine.AI.NavMeshTriangulation : ValueType {
public Vector3[] vertices
public Int32[] indices
public Int32[] areas
public Int32[] layers
public Int32[] get_layers()
}
public UnityEngine.AI.ObstacleAvoidanceType : Enum {
public int value__
public ObstacleAvoidanceType NoObstacleAvoidance
public ObstacleAvoidanceType LowQualityObstacleAvoidance
public ObstacleAvoidanceType MedQualityObstacleAvoidance
public ObstacleAvoidanceType GoodQualityObstacleAvoidance
public ObstacleAvoidanceType HighQualityObstacleAvoidance
}
public UnityEngine.AI.OffMeshLink : Behaviour {
public bool activated
public bool occupied
public float costOverride
public bool biDirectional
public int navMeshLayer
public int area
public bool autoUpdatePositions
public Transform startTransform
public Transform endTransform
public bool get_activated()
public void set_activated(bool value)
public bool get_occupied()
public float get_costOverride()
public void set_costOverride(float value)
public bool get_biDirectional()
public void set_biDirectional(bool value)
public void UpdatePositions()
public int get_navMeshLayer()
public void set_navMeshLayer(int value)
public int get_area()
public void set_area(int value)
public bool get_autoUpdatePositions()
public void set_autoUpdatePositions(bool value)
public Transform get_startTransform()
public void set_startTransform(Transform value)
public Transform get_endTransform()
public void set_endTransform(Transform value)
}
public UnityEngine.AI.OffMeshLinkData : ValueType {
private int m_Valid
private int m_Activated
private int m_InstanceID
private OffMeshLinkType m_LinkType
private Vector3 m_StartPos
private Vector3 m_EndPos
public bool valid
public bool activated
public OffMeshLinkType linkType
public Vector3 startPos
public Vector3 endPos
public OffMeshLink offMeshLink
public bool get_valid()
public bool get_activated()
public OffMeshLinkType get_linkType()
public Vector3 get_startPos()
public Vector3 get_endPos()
public OffMeshLink get_offMeshLink()
internal OffMeshLink GetOffMeshLinkInternal(int instanceID)
}
public UnityEngine.AI.OffMeshLinkType : Enum {
public int value__
public OffMeshLinkType LinkTypeManual
public OffMeshLinkType LinkTypeDropDown
public OffMeshLinkType LinkTypeJumpAcross
}
public UnityEngine.Analytics.Analytics : object {
private UnityAnalyticsHandler s_UnityAnalyticsHandler
public bool limitUserTracking
public bool deviceStatsEnabled
public bool enabled
internal UnityAnalyticsHandler GetUnityAnalyticsHandler()
public bool get_limitUserTracking()
public void set_limitUserTracking(bool value)
public bool get_deviceStatsEnabled()
public void set_deviceStatsEnabled(bool value)
public bool get_enabled()
public void set_enabled(bool value)
public AnalyticsResult FlushEvents()
public AnalyticsResult SetUserId(string userId)
public AnalyticsResult SetUserGender(Gender gender)
public AnalyticsResult SetUserBirthYear(int birthYear)
public AnalyticsResult Transaction(string productId, decimal amount, string currency)
public AnalyticsResult Transaction(string productId, decimal amount, string currency, string receiptPurchaseData, string signature)
public AnalyticsResult Transaction(string productId, decimal amount, string currency, string receiptPurchaseData, string signature, bool usingIAPService)
public AnalyticsResult CustomEvent(string customEventName)
public AnalyticsResult CustomEvent(string customEventName, Vector3 position)
public AnalyticsResult CustomEvent(string customEventName, IDictionary`2<string, object> eventData)
}
public UnityEngine.Analytics.AnalyticsResult : Enum {
public int value__
public AnalyticsResult Ok
public AnalyticsResult NotInitialized
public AnalyticsResult AnalyticsDisabled
public AnalyticsResult TooManyItems
public AnalyticsResult SizeLimitReached
public AnalyticsResult TooManyRequests
public AnalyticsResult InvalidData
public AnalyticsResult UnsupportedPlatform
}
internal UnityEngine.Analytics.CustomEventData : object {
internal IntPtr m_Ptr
public void .ctor(string name)
protected void Finalize()
public void Dispose()
public bool Add(string key, string value)
public bool Add(string key, bool value)
public bool Add(string key, char value)
public bool Add(string key, byte value)
public bool Add(string key, sbyte value)
public bool Add(string key, short value)
public bool Add(string key, ushort value)
public bool Add(string key, int value)
public bool Add(string key, UInt32 value)
public bool Add(string key, long value)
public bool Add(string key, ulong value)
public bool Add(string key, float value)
public bool Add(string key, double value)
public bool Add(string key, decimal value)
public bool Add(IDictionary`2<string, object> eventData)
public void InternalCreate(string name)
internal void InternalDestroy()
private bool AddString(string key, string value)
private bool AddBool(string key, bool value)
private bool AddChar(string key, char value)
private bool AddByte(string key, byte value)
private bool AddSByte(string key, sbyte value)
private bool AddInt16(string key, short value)
private bool AddUInt16(string key, ushort value)
private bool AddInt32(string key, int value)
private bool AddUInt32(string key, UInt32 value)
private bool AddInt64(string key, long value)
private bool AddUInt64(string key, ulong value)
private bool AddDouble(string key, double value)
}
public UnityEngine.Analytics.Gender : Enum {
public int value__
public Gender Male
public Gender Female
public Gender Unknown
}
public UnityEngine.Analytics.PerformanceReporting : object {
public bool enabled
public bool get_enabled()
public void set_enabled(bool value)
}
internal UnityEngine.Analytics.UnityAnalyticsHandler : object {
internal IntPtr m_Ptr
public bool limitUserTracking
public bool deviceStatsEnabled
public bool enabled
internal void InternalCreate()
internal void InternalDestroy()
protected void Finalize()
public void Dispose()
public bool get_limitUserTracking()
public void set_limitUserTracking(bool value)
public bool get_deviceStatsEnabled()
public void set_deviceStatsEnabled(bool value)
public bool get_enabled()
public void set_enabled(bool value)
public AnalyticsResult FlushEvents()
public AnalyticsResult SetUserId(string userId)
public AnalyticsResult SetUserGender(Gender gender)
public AnalyticsResult SetUserBirthYear(int birthYear)
public AnalyticsResult Transaction(string productId, double amount, string currency)
public AnalyticsResult Transaction(string productId, double amount, string currency, string receiptPurchaseData, string signature)
internal AnalyticsResult Transaction(string productId, double amount, string currency, string receiptPurchaseData, string signature, bool usingIAPService)
private AnalyticsResult InternalTransaction(string productId, double amount, string currency, string receiptPurchaseData, string signature, bool usingIAPService)
public AnalyticsResult CustomEvent(string customEventName)
public AnalyticsResult CustomEvent(CustomEventData eventData)
private AnalyticsResult SendCustomEventName(string customEventName)
private AnalyticsResult SendCustomEvent(CustomEventData eventData)
}
public UnityEngine.AnchoredJoint2D : Joint2D {
public Vector2 anchor
public Vector2 connectedAnchor
public bool autoConfigureConnectedAnchor
public Vector2 get_anchor()
public void set_anchor(Vector2 value)
private void INTERNAL_get_anchor(Vector2& value)
private void INTERNAL_set_anchor(Vector2& value)
public Vector2 get_connectedAnchor()
public void set_connectedAnchor(Vector2 value)
private void INTERNAL_get_connectedAnchor(Vector2& value)
private void INTERNAL_set_connectedAnchor(Vector2& value)
public bool get_autoConfigureConnectedAnchor()
public void set_autoConfigureConnectedAnchor(bool value)
}
public UnityEngine.AndroidJavaClass : AndroidJavaObject {
public void .ctor(string className)
internal void .ctor(IntPtr jclass)
private void _AndroidJavaClass(string className)
}
public UnityEngine.AndroidJavaException : Exception {
private string mJavaStackTrace
public string StackTrace
internal void .ctor(string message, string javaStackTrace)
public string get_StackTrace()
}
public UnityEngine.AndroidJavaObject : object {
private bool enableDebugPrints
internal GlobalJavaObjectRef m_jobject
internal GlobalJavaObjectRef m_jclass
private AndroidJavaClass s_JavaLangClass
protected AndroidJavaClass JavaLangClass
public void .ctor(string className, Object[] args)
internal void .ctor(IntPtr jobject)
public void Dispose()
public void Call(string methodName, Object[] args)
public void CallStatic(string methodName, Object[] args)
public FieldType Get(string fieldName)
public void Set(string fieldName, FieldType val)
public FieldType GetStatic(string fieldName)
public void SetStatic(string fieldName, FieldType val)
public IntPtr GetRawObject()
public IntPtr GetRawClass()
public ReturnType Call(string methodName, Object[] args)
public ReturnType CallStatic(string methodName, Object[] args)
protected void DebugPrint(string msg)
protected void DebugPrint(string call, string methodName, string signature, Object[] args)
private void _AndroidJavaObject(string className, Object[] args)
protected void Finalize()
protected void Dispose(bool disposing)
protected void _Dispose()
protected void _Call(string methodName, Object[] args)
protected ReturnType _Call(string methodName, Object[] args)
protected FieldType _Get(string fieldName)
protected void _Set(string fieldName, FieldType val)
protected void _CallStatic(string methodName, Object[] args)
protected ReturnType _CallStatic(string methodName, Object[] args)
protected FieldType _GetStatic(string fieldName)
protected void _SetStatic(string fieldName, FieldType val)
internal AndroidJavaObject AndroidJavaObjectDeleteLocalRef(IntPtr jobject)
internal AndroidJavaClass AndroidJavaClassDeleteLocalRef(IntPtr jclass)
protected IntPtr _GetRawObject()
protected IntPtr _GetRawClass()
protected AndroidJavaObject FindClass(string name)
protected AndroidJavaClass get_JavaLangClass()
}
public UnityEngine.AndroidJavaProxy : object {
public AndroidJavaClass javaInterface
internal AndroidJavaObject proxyObject
private GlobalJavaObjectRef s_JavaLangSystemClass
private IntPtr s_HashCodeMethodID
public void .ctor(string javaInterface)
public void .ctor(AndroidJavaClass javaInterface)
public AndroidJavaObject Invoke(string methodName, Object[] args)
public AndroidJavaObject Invoke(string methodName, AndroidJavaObject[] javaArgs)
public bool equals(AndroidJavaObject obj)
public int hashCode()
public string toString()
internal AndroidJavaObject GetProxy()
}
public UnityEngine.AndroidJavaRunnable : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.AndroidJavaRunnableProxy : AndroidJavaProxy {
private AndroidJavaRunnable mRunnable
public void .ctor(AndroidJavaRunnable runnable)
public void run()
}
public UnityEngine.AndroidJNI : object {
public int AttachCurrentThread()
public int DetachCurrentThread()
public int GetVersion()
public IntPtr FindClass(string name)
private void INTERNAL_CALL_FindClass(string name, IntPtr& value)
public IntPtr FromReflectedMethod(IntPtr refMethod)
private void INTERNAL_CALL_FromReflectedMethod(IntPtr refMethod, IntPtr& value)
public IntPtr FromReflectedField(IntPtr refField)
private void INTERNAL_CALL_FromReflectedField(IntPtr refField, IntPtr& value)
public IntPtr ToReflectedMethod(IntPtr clazz, IntPtr methodID, bool isStatic)
private void INTERNAL_CALL_ToReflectedMethod(IntPtr clazz, IntPtr methodID, bool isStatic, IntPtr& value)
public IntPtr ToReflectedField(IntPtr clazz, IntPtr fieldID, bool isStatic)
private void INTERNAL_CALL_ToReflectedField(IntPtr clazz, IntPtr fieldID, bool isStatic, IntPtr& value)
public IntPtr GetSuperclass(IntPtr clazz)
private void INTERNAL_CALL_GetSuperclass(IntPtr clazz, IntPtr& value)
public bool IsAssignableFrom(IntPtr clazz1, IntPtr clazz2)
public int Throw(IntPtr obj)
public int ThrowNew(IntPtr clazz, string message)
public IntPtr ExceptionOccurred()
private void INTERNAL_CALL_ExceptionOccurred(IntPtr& value)
public void ExceptionDescribe()
public void ExceptionClear()
public void FatalError(string message)
public int PushLocalFrame(int capacity)
public IntPtr PopLocalFrame(IntPtr ptr)
private void INTERNAL_CALL_PopLocalFrame(IntPtr ptr, IntPtr& value)
public IntPtr NewGlobalRef(IntPtr obj)
private void INTERNAL_CALL_NewGlobalRef(IntPtr obj, IntPtr& value)
public void DeleteGlobalRef(IntPtr obj)
public IntPtr NewLocalRef(IntPtr obj)
private void INTERNAL_CALL_NewLocalRef(IntPtr obj, IntPtr& value)
public void DeleteLocalRef(IntPtr obj)
public bool IsSameObject(IntPtr obj1, IntPtr obj2)
public int EnsureLocalCapacity(int capacity)
public IntPtr AllocObject(IntPtr clazz)
private void INTERNAL_CALL_AllocObject(IntPtr clazz, IntPtr& value)
public IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args)
private void INTERNAL_CALL_NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args, IntPtr& value)
public IntPtr GetObjectClass(IntPtr obj)
private void INTERNAL_CALL_GetObjectClass(IntPtr obj, IntPtr& value)
public bool IsInstanceOf(IntPtr obj, IntPtr clazz)
public IntPtr GetMethodID(IntPtr clazz, string name, string sig)
private void INTERNAL_CALL_GetMethodID(IntPtr clazz, string name, string sig, IntPtr& value)
public IntPtr GetFieldID(IntPtr clazz, string name, string sig)
private void INTERNAL_CALL_GetFieldID(IntPtr clazz, string name, string sig, IntPtr& value)
public IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig)
private void INTERNAL_CALL_GetStaticMethodID(IntPtr clazz, string name, string sig, IntPtr& value)
public IntPtr GetStaticFieldID(IntPtr clazz, string name, string sig)
private void INTERNAL_CALL_GetStaticFieldID(IntPtr clazz, string name, string sig, IntPtr& value)
public IntPtr NewStringUTF(string bytes)
private void INTERNAL_CALL_NewStringUTF(string bytes, IntPtr& value)
public int GetStringUTFLength(IntPtr str)
public string GetStringUTFChars(IntPtr str)
public string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
private void INTERNAL_CALL_CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args, IntPtr& value)
public int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public string GetStringField(IntPtr obj, IntPtr fieldID)
public IntPtr GetObjectField(IntPtr obj, IntPtr fieldID)
private void INTERNAL_CALL_GetObjectField(IntPtr obj, IntPtr fieldID, IntPtr& value)
public bool GetBooleanField(IntPtr obj, IntPtr fieldID)
public byte GetByteField(IntPtr obj, IntPtr fieldID)
public char GetCharField(IntPtr obj, IntPtr fieldID)
public short GetShortField(IntPtr obj, IntPtr fieldID)
public int GetIntField(IntPtr obj, IntPtr fieldID)
public long GetLongField(IntPtr obj, IntPtr fieldID)
public float GetFloatField(IntPtr obj, IntPtr fieldID)
public double GetDoubleField(IntPtr obj, IntPtr fieldID)
public void SetStringField(IntPtr obj, IntPtr fieldID, string val)
public void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val)
public void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val)
public void SetByteField(IntPtr obj, IntPtr fieldID, byte val)
public void SetCharField(IntPtr obj, IntPtr fieldID, char val)
public void SetShortField(IntPtr obj, IntPtr fieldID, short val)
public void SetIntField(IntPtr obj, IntPtr fieldID, int val)
public void SetLongField(IntPtr obj, IntPtr fieldID, long val)
public void SetFloatField(IntPtr obj, IntPtr fieldID, float val)
public void SetDoubleField(IntPtr obj, IntPtr fieldID, double val)
public string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
private void INTERNAL_CALL_CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args, IntPtr& value)
public int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public string GetStaticStringField(IntPtr clazz, IntPtr fieldID)
public IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID)
private void INTERNAL_CALL_GetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr& value)
public bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID)
public byte GetStaticByteField(IntPtr clazz, IntPtr fieldID)
public char GetStaticCharField(IntPtr clazz, IntPtr fieldID)
public short GetStaticShortField(IntPtr clazz, IntPtr fieldID)
public int GetStaticIntField(IntPtr clazz, IntPtr fieldID)
public long GetStaticLongField(IntPtr clazz, IntPtr fieldID)
public float GetStaticFloatField(IntPtr clazz, IntPtr fieldID)
public double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID)
public void SetStaticStringField(IntPtr clazz, IntPtr fieldID, string val)
public void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val)
public void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool val)
public void SetStaticByteField(IntPtr clazz, IntPtr fieldID, byte val)
public void SetStaticCharField(IntPtr clazz, IntPtr fieldID, char val)
public void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short val)
public void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int val)
public void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long val)
public void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float val)
public void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double val)
public IntPtr ToBooleanArray(Boolean[] array)
private void INTERNAL_CALL_ToBooleanArray(Boolean[] array, IntPtr& value)
public IntPtr ToByteArray(Byte[] array)
private void INTERNAL_CALL_ToByteArray(Byte[] array, IntPtr& value)
public IntPtr ToCharArray(Char[] array)
private void INTERNAL_CALL_ToCharArray(Char[] array, IntPtr& value)
public IntPtr ToShortArray(Int16[] array)
private void INTERNAL_CALL_ToShortArray(Int16[] array, IntPtr& value)
public IntPtr ToIntArray(Int32[] array)
private void INTERNAL_CALL_ToIntArray(Int32[] array, IntPtr& value)
public IntPtr ToLongArray(Int64[] array)
private void INTERNAL_CALL_ToLongArray(Int64[] array, IntPtr& value)
public IntPtr ToFloatArray(Single[] array)
private void INTERNAL_CALL_ToFloatArray(Single[] array, IntPtr& value)
public IntPtr ToDoubleArray(Double[] array)
private void INTERNAL_CALL_ToDoubleArray(Double[] array, IntPtr& value)
public IntPtr ToObjectArray(IntPtr[] array, IntPtr arrayClass)
private void INTERNAL_CALL_ToObjectArray(IntPtr[] array, IntPtr arrayClass, IntPtr& value)
public IntPtr ToObjectArray(IntPtr[] array)
public Boolean[] FromBooleanArray(IntPtr array)
public Byte[] FromByteArray(IntPtr array)
public Char[] FromCharArray(IntPtr array)
public Int16[] FromShortArray(IntPtr array)
public Int32[] FromIntArray(IntPtr array)
public Int64[] FromLongArray(IntPtr array)
public Single[] FromFloatArray(IntPtr array)
public Double[] FromDoubleArray(IntPtr array)
public IntPtr[] FromObjectArray(IntPtr array)
public int GetArrayLength(IntPtr array)
public IntPtr NewBooleanArray(int size)
private void INTERNAL_CALL_NewBooleanArray(int size, IntPtr& value)
public IntPtr NewByteArray(int size)
private void INTERNAL_CALL_NewByteArray(int size, IntPtr& value)
public IntPtr NewCharArray(int size)
private void INTERNAL_CALL_NewCharArray(int size, IntPtr& value)
public IntPtr NewShortArray(int size)
private void INTERNAL_CALL_NewShortArray(int size, IntPtr& value)
public IntPtr NewIntArray(int size)
private void INTERNAL_CALL_NewIntArray(int size, IntPtr& value)
public IntPtr NewLongArray(int size)
private void INTERNAL_CALL_NewLongArray(int size, IntPtr& value)
public IntPtr NewFloatArray(int size)
private void INTERNAL_CALL_NewFloatArray(int size, IntPtr& value)
public IntPtr NewDoubleArray(int size)
private void INTERNAL_CALL_NewDoubleArray(int size, IntPtr& value)
public IntPtr NewObjectArray(int size, IntPtr clazz, IntPtr obj)
private void INTERNAL_CALL_NewObjectArray(int size, IntPtr clazz, IntPtr obj, IntPtr& value)
public bool GetBooleanArrayElement(IntPtr array, int index)
public byte GetByteArrayElement(IntPtr array, int index)
public char GetCharArrayElement(IntPtr array, int index)
public short GetShortArrayElement(IntPtr array, int index)
public int GetIntArrayElement(IntPtr array, int index)
public long GetLongArrayElement(IntPtr array, int index)
public float GetFloatArrayElement(IntPtr array, int index)
public double GetDoubleArrayElement(IntPtr array, int index)
public IntPtr GetObjectArrayElement(IntPtr array, int index)
private void INTERNAL_CALL_GetObjectArrayElement(IntPtr array, int index, IntPtr& value)
public void SetBooleanArrayElement(IntPtr array, int index, byte val)
public void SetByteArrayElement(IntPtr array, int index, sbyte val)
public void SetCharArrayElement(IntPtr array, int index, char val)
public void SetShortArrayElement(IntPtr array, int index, short val)
public void SetIntArrayElement(IntPtr array, int index, int val)
public void SetLongArrayElement(IntPtr array, int index, long val)
public void SetFloatArrayElement(IntPtr array, int index, float val)
public void SetDoubleArrayElement(IntPtr array, int index, double val)
public void SetObjectArrayElement(IntPtr array, int index, IntPtr obj)
}
public UnityEngine.AndroidJNIHelper : object {
public bool debug
public bool get_debug()
public void set_debug(bool value)
public IntPtr GetConstructorID(IntPtr javaClass)
public IntPtr GetConstructorID(IntPtr javaClass, string signature)
public IntPtr GetMethodID(IntPtr javaClass, string methodName, string signature)
public IntPtr GetMethodID(IntPtr javaClass, string methodName)
public IntPtr GetMethodID(IntPtr javaClass, string methodName, string signature, bool isStatic)
public IntPtr GetFieldID(IntPtr javaClass, string fieldName, string signature)
public IntPtr GetFieldID(IntPtr javaClass, string fieldName)
public IntPtr GetFieldID(IntPtr javaClass, string fieldName, string signature, bool isStatic)
public IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable)
public IntPtr CreateJavaProxy(AndroidJavaProxy proxy)
private void INTERNAL_CALL_CreateJavaProxy(AndroidJavaProxy proxy, IntPtr& value)
public IntPtr ConvertToJNIArray(Array array)
public jvalue[] CreateJNIArgArray(Object[] args)
public void DeleteJNIArgArray(Object[] args, jvalue[] jniArgs)
public IntPtr GetConstructorID(IntPtr jclass, Object[] args)
public IntPtr GetMethodID(IntPtr jclass, string methodName, Object[] args, bool isStatic)
public string GetSignature(object obj)
public string GetSignature(Object[] args)
public ArrayType ConvertFromJNIArray(IntPtr array)
public IntPtr GetMethodID(IntPtr jclass, string methodName, Object[] args, bool isStatic)
public IntPtr GetFieldID(IntPtr jclass, string fieldName, bool isStatic)
public string GetSignature(Object[] args)
}
internal UnityEngine.AndroidJNISafe : object {
public void CheckException()
public void DeleteGlobalRef(IntPtr globalref)
public void DeleteLocalRef(IntPtr localref)
public IntPtr NewStringUTF(string bytes)
public string GetStringUTFChars(IntPtr str)
public IntPtr GetObjectClass(IntPtr ptr)
public IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig)
public IntPtr GetMethodID(IntPtr obj, string name, string sig)
public IntPtr GetFieldID(IntPtr clazz, string name, string sig)
public IntPtr GetStaticFieldID(IntPtr clazz, string name, string sig)
public IntPtr FromReflectedMethod(IntPtr refMethod)
public IntPtr FromReflectedField(IntPtr refField)
public IntPtr FindClass(string name)
public IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args)
public void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val)
public void SetStaticStringField(IntPtr clazz, IntPtr fieldID, string val)
public void SetStaticCharField(IntPtr clazz, IntPtr fieldID, char val)
public void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double val)
public void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float val)
public void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long val)
public void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short val)
public void SetStaticByteField(IntPtr clazz, IntPtr fieldID, byte val)
public void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool val)
public void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int val)
public IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID)
public string GetStaticStringField(IntPtr clazz, IntPtr fieldID)
public char GetStaticCharField(IntPtr clazz, IntPtr fieldID)
public double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID)
public float GetStaticFloatField(IntPtr clazz, IntPtr fieldID)
public long GetStaticLongField(IntPtr clazz, IntPtr fieldID)
public short GetStaticShortField(IntPtr clazz, IntPtr fieldID)
public byte GetStaticByteField(IntPtr clazz, IntPtr fieldID)
public bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID)
public int GetStaticIntField(IntPtr clazz, IntPtr fieldID)
public void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args)
public void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val)
public void SetStringField(IntPtr obj, IntPtr fieldID, string val)
public void SetCharField(IntPtr obj, IntPtr fieldID, char val)
public void SetDoubleField(IntPtr obj, IntPtr fieldID, double val)
public void SetFloatField(IntPtr obj, IntPtr fieldID, float val)
public void SetLongField(IntPtr obj, IntPtr fieldID, long val)
public void SetShortField(IntPtr obj, IntPtr fieldID, short val)
public void SetByteField(IntPtr obj, IntPtr fieldID, byte val)
public void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val)
public void SetIntField(IntPtr obj, IntPtr fieldID, int val)
public IntPtr GetObjectField(IntPtr obj, IntPtr fieldID)
public string GetStringField(IntPtr obj, IntPtr fieldID)
public char GetCharField(IntPtr obj, IntPtr fieldID)
public double GetDoubleField(IntPtr obj, IntPtr fieldID)
public float GetFloatField(IntPtr obj, IntPtr fieldID)
public long GetLongField(IntPtr obj, IntPtr fieldID)
public short GetShortField(IntPtr obj, IntPtr fieldID)
public byte GetByteField(IntPtr obj, IntPtr fieldID)
public bool GetBooleanField(IntPtr obj, IntPtr fieldID)
public int GetIntField(IntPtr obj, IntPtr fieldID)
public void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args)
public IntPtr[] FromObjectArray(IntPtr array)
public Char[] FromCharArray(IntPtr array)
public Double[] FromDoubleArray(IntPtr array)
public Single[] FromFloatArray(IntPtr array)
public Int64[] FromLongArray(IntPtr array)
public Int16[] FromShortArray(IntPtr array)
public Byte[] FromByteArray(IntPtr array)
public Boolean[] FromBooleanArray(IntPtr array)
public Int32[] FromIntArray(IntPtr array)
public IntPtr ToObjectArray(IntPtr[] array)
public IntPtr ToObjectArray(IntPtr[] array, IntPtr type)
public IntPtr ToCharArray(Char[] array)
public IntPtr ToDoubleArray(Double[] array)
public IntPtr ToFloatArray(Single[] array)
public IntPtr ToLongArray(Int64[] array)
public IntPtr ToShortArray(Int16[] array)
public IntPtr ToByteArray(Byte[] array)
public IntPtr ToBooleanArray(Boolean[] array)
public IntPtr ToIntArray(Int32[] array)
public IntPtr GetObjectArrayElement(IntPtr array, int index)
public int GetArrayLength(IntPtr array)
}
internal UnityEngine.AndroidReflection : object {
private string RELECTION_HELPER_CLASS_NAME
private GlobalJavaObjectRef s_ReflectionHelperClass
private IntPtr s_ReflectionHelperGetConstructorID
private IntPtr s_ReflectionHelperGetMethodID
private IntPtr s_ReflectionHelperGetFieldID
private IntPtr s_ReflectionHelperNewProxyInstance
public bool IsPrimitive(Type t)
public bool IsAssignableFrom(Type t, Type from)
private IntPtr GetStaticMethodID(string clazz, string methodName, string signature)
public IntPtr GetConstructorMember(IntPtr jclass, string signature)
public IntPtr GetMethodMember(IntPtr jclass, string methodName, string signature, bool isStatic)
public IntPtr GetFieldMember(IntPtr jclass, string fieldName, string signature, bool isStatic)
public IntPtr NewProxyInstance(int delegateHandle, IntPtr interfaze)
}
public UnityEngine.Animation : Behaviour {
public AnimationClip clip
public bool playAutomatically
public WrapMode wrapMode
public bool isPlaying
public AnimationState Item
public bool animatePhysics
public bool animateOnlyIfVisible
public AnimationCullingType cullingType
public Bounds localBounds
public AnimationClip get_clip()
public void set_clip(AnimationClip value)
public bool get_playAutomatically()
public void set_playAutomatically(bool value)
public WrapMode get_wrapMode()
public void set_wrapMode(WrapMode value)
public void Stop()
private void INTERNAL_CALL_Stop(Animation self)
public void Stop(string name)
private void Internal_StopByName(string name)
public void Rewind(string name)
private void Internal_RewindByName(string name)
public void Rewind()
private void INTERNAL_CALL_Rewind(Animation self)
public void Sample()
private void INTERNAL_CALL_Sample(Animation self)
public bool get_isPlaying()
public bool IsPlaying(string name)
public AnimationState get_Item(string name)
public bool Play()
public bool Play(PlayMode mode)
public bool Play(string animation, PlayMode mode)
public bool Play(string animation)
public void CrossFade(string animation, float fadeLength, PlayMode mode)
public void CrossFade(string animation, float fadeLength)
public void CrossFade(string animation)
public void Blend(string animation, float targetWeight, float fadeLength)
public void Blend(string animation, float targetWeight)
public void Blend(string animation)
public AnimationState CrossFadeQueued(string animation, float fadeLength, QueueMode queue, PlayMode mode)
public AnimationState CrossFadeQueued(string animation, float fadeLength, QueueMode queue)
public AnimationState CrossFadeQueued(string animation, float fadeLength)
public AnimationState CrossFadeQueued(string animation)
public AnimationState PlayQueued(string animation, QueueMode queue, PlayMode mode)
public AnimationState PlayQueued(string animation, QueueMode queue)
public AnimationState PlayQueued(string animation)
public void AddClip(AnimationClip clip, string newName)
public void AddClip(AnimationClip clip, string newName, int firstFrame, int lastFrame, bool addLoopFrame)
public void AddClip(AnimationClip clip, string newName, int firstFrame, int lastFrame)
public void RemoveClip(AnimationClip clip)
public void RemoveClip(string clipName)
public int GetClipCount()
private void RemoveClip2(string clipName)
private bool PlayDefaultAnimation(PlayMode mode)
public bool Play(AnimationPlayMode mode)
public bool Play(string animation, AnimationPlayMode mode)
public void SyncLayer(int layer)
private void INTERNAL_CALL_SyncLayer(Animation self, int layer)
public IEnumerator GetEnumerator()
internal AnimationState GetState(string name)
internal AnimationState GetStateAtIndex(int index)
internal int GetStateCount()
public AnimationClip GetClip(string name)
public bool get_animatePhysics()
public void set_animatePhysics(bool value)
public bool get_animateOnlyIfVisible()
public void set_animateOnlyIfVisible(bool value)
public AnimationCullingType get_cullingType()
public void set_cullingType(AnimationCullingType value)
public Bounds get_localBounds()
public void set_localBounds(Bounds value)
private void INTERNAL_get_localBounds(Bounds& value)
private void INTERNAL_set_localBounds(Bounds& value)
}
public UnityEngine.AnimationBlendMode : Enum {
public int value__
public AnimationBlendMode Blend
public AnimationBlendMode Additive
}
public UnityEngine.AnimationClip : Motion {
public float length
internal float startTime
internal float stopTime
public float frameRate
public WrapMode wrapMode
public Bounds localBounds
public bool legacy
public bool humanMotion
public bool empty
public AnimationEvent[] events
internal bool hasRootMotion
public void SampleAnimation(GameObject go, float time)
private void Internal_CreateAnimationClip(AnimationClip self)
public float get_length()
internal float get_startTime()
internal float get_stopTime()
public float get_frameRate()
public void set_frameRate(float value)
public void SetCurve(string relativePath, Type type, string propertyName, AnimationCurve curve)
public void EnsureQuaternionContinuity()
private void INTERNAL_CALL_EnsureQuaternionContinuity(AnimationClip self)
public void ClearCurves()
private void INTERNAL_CALL_ClearCurves(AnimationClip self)
public WrapMode get_wrapMode()
public void set_wrapMode(WrapMode value)
public Bounds get_localBounds()
public void set_localBounds(Bounds value)
private void INTERNAL_get_localBounds(Bounds& value)
private void INTERNAL_set_localBounds(Bounds& value)
public bool get_legacy()
public void set_legacy(bool value)
public bool get_humanMotion()
public bool get_empty()
public void AddEvent(AnimationEvent evt)
internal void AddEventInternal(object evt)
public AnimationEvent[] get_events()
public void set_events(AnimationEvent[] value)
internal void SetEventsInternal(Array value)
internal Array GetEventsInternal()
internal bool get_hasRootMotion()
}
public UnityEngine.AnimationClipPair : object {
public AnimationClip originalClip
public AnimationClip overrideClip
}
public UnityEngine.AnimationCullingType : Enum {
public int value__
public AnimationCullingType AlwaysAnimate
public AnimationCullingType BasedOnRenderers
public AnimationCullingType BasedOnClipBounds
public AnimationCullingType BasedOnUserBounds
}
public UnityEngine.AnimationCurve : object {
internal IntPtr m_Ptr
public Keyframe[] keys
public Keyframe Item
public int length
public WrapMode preWrapMode
public WrapMode postWrapMode
public void .ctor(Keyframe[] keys)
private void Cleanup()
protected void Finalize()
public float Evaluate(float time)
public Keyframe[] get_keys()
public void set_keys(Keyframe[] value)
public int AddKey(float time, float value)
public int AddKey(Keyframe key)
private int AddKey_Internal(Keyframe key)
private int INTERNAL_CALL_AddKey_Internal(AnimationCurve self, Keyframe& key)
public int MoveKey(int index, Keyframe key)
private int INTERNAL_CALL_MoveKey(AnimationCurve self, int index, Keyframe& key)
public void RemoveKey(int index)
public Keyframe get_Item(int index)
public int get_length()
private void SetKeys(Keyframe[] keys)
private Keyframe GetKey_Internal(int index)
private void INTERNAL_CALL_GetKey_Internal(AnimationCurve self, int index, Keyframe& value)
private Keyframe[] GetKeys()
public void SmoothTangents(int index, float weight)
public AnimationCurve Linear(float timeStart, float valueStart, float timeEnd, float valueEnd)
public AnimationCurve EaseInOut(float timeStart, float valueStart, float timeEnd, float valueEnd)
public WrapMode get_preWrapMode()
public void set_preWrapMode(WrapMode value)
public WrapMode get_postWrapMode()
public void set_postWrapMode(WrapMode value)
private void Init(Keyframe[] keys)
}
public UnityEngine.AnimationEvent : object {
internal float m_Time
internal string m_FunctionName
internal string m_StringParameter
internal Object m_ObjectReferenceParameter
internal float m_FloatParameter
internal int m_IntParameter
internal int m_MessageOptions
internal AnimationEventSource m_Source
internal AnimationState m_StateSender
internal AnimatorStateInfo m_AnimatorStateInfo
internal AnimatorClipInfo m_AnimatorClipInfo
public string data
public string stringParameter
public float floatParameter
public int intParameter
public Object objectReferenceParameter
public string functionName
public float time
public SendMessageOptions messageOptions
public bool isFiredByLegacy
public bool isFiredByAnimator
public AnimationState animationState
public AnimatorStateInfo animatorStateInfo
public AnimatorClipInfo animatorClipInfo
public string get_data()
public void set_data(string value)
public string get_stringParameter()
public void set_stringParameter(string value)
public float get_floatParameter()
public void set_floatParameter(float value)
public int get_intParameter()
public void set_intParameter(int value)
public Object get_objectReferenceParameter()
public void set_objectReferenceParameter(Object value)
public string get_functionName()
public void set_functionName(string value)
public float get_time()
public void set_time(float value)
public SendMessageOptions get_messageOptions()
public void set_messageOptions(SendMessageOptions value)
public bool get_isFiredByLegacy()
public bool get_isFiredByAnimator()
public AnimationState get_animationState()
public AnimatorStateInfo get_animatorStateInfo()
public AnimatorClipInfo get_animatorClipInfo()
internal int GetHash()
}
internal UnityEngine.AnimationEventSource : Enum {
public int value__
public AnimationEventSource NoSource
public AnimationEventSource Legacy
public AnimationEventSource Animator
}
public UnityEngine.AnimationPlayMode : Enum {
public int value__
public AnimationPlayMode Stop
public AnimationPlayMode Queue
public AnimationPlayMode Mix
}
public UnityEngine.Animations.AnimationClipPlayable : ValueType {
private PlayableHandle m_Handle
internal void .ctor(PlayableHandle handle)
public AnimationClipPlayable Create(PlayableGraph graph, AnimationClip clip)
private PlayableHandle CreateHandle(PlayableGraph graph, AnimationClip clip)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationClipPlayable playable)
public AnimationClipPlayable op_Explicit(Playable playable)
public bool Equals(AnimationClipPlayable other)
private bool CreateHandleInternal(PlayableGraph graph, AnimationClip clip, PlayableHandle& handle)
private bool INTERNAL_CALL_CreateHandleInternal(PlayableGraph& graph, AnimationClip clip, PlayableHandle& handle)
public AnimationClip GetAnimationClip()
public bool GetApplyFootIK()
public void SetApplyFootIK(bool value)
internal bool GetRemoveStartOffset()
internal void SetRemoveStartOffset(bool value)
private AnimationClip GetAnimationClipInternal(PlayableHandle& handle)
private AnimationClip INTERNAL_CALL_GetAnimationClipInternal(PlayableHandle& handle)
private bool GetApplyFootIKInternal(PlayableHandle& handle)
private bool INTERNAL_CALL_GetApplyFootIKInternal(PlayableHandle& handle)
private void SetApplyFootIKInternal(PlayableHandle& handle, bool value)
private void INTERNAL_CALL_SetApplyFootIKInternal(PlayableHandle& handle, bool value)
private bool GetRemoveStartOffsetInternal(PlayableHandle& handle)
private bool INTERNAL_CALL_GetRemoveStartOffsetInternal(PlayableHandle& handle)
private void SetRemoveStartOffsetInternal(PlayableHandle& handle, bool value)
private void INTERNAL_CALL_SetRemoveStartOffsetInternal(PlayableHandle& handle, bool value)
}
public UnityEngine.Animations.AnimationLayerMixerPlayable : ValueType {
private PlayableHandle m_Handle
private AnimationLayerMixerPlayable m_NullPlayable
public AnimationLayerMixerPlayable Null
internal void .ctor(PlayableHandle handle)
public AnimationLayerMixerPlayable get_Null()
public AnimationLayerMixerPlayable Create(PlayableGraph graph, int inputCount)
private PlayableHandle CreateHandle(PlayableGraph graph, int inputCount)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationLayerMixerPlayable playable)
public AnimationLayerMixerPlayable op_Explicit(Playable playable)
public bool Equals(AnimationLayerMixerPlayable other)
private bool CreateHandleInternal(PlayableGraph graph, PlayableHandle& handle)
private bool INTERNAL_CALL_CreateHandleInternal(PlayableGraph& graph, PlayableHandle& handle)
public bool IsLayerAdditive(UInt32 layerIndex)
public void SetLayerAdditive(UInt32 layerIndex, bool value)
public void SetLayerMaskFromAvatarMask(UInt32 layerIndex, AvatarMask mask)
private bool IsLayerAdditiveInternal(PlayableHandle& handle, UInt32 layerIndex)
private bool INTERNAL_CALL_IsLayerAdditiveInternal(PlayableHandle& handle, UInt32 layerIndex)
private void SetLayerAdditiveInternal(PlayableHandle& handle, UInt32 layerIndex, bool value)
private void INTERNAL_CALL_SetLayerAdditiveInternal(PlayableHandle& handle, UInt32 layerIndex, bool value)
private void SetLayerMaskFromAvatarMaskInternal(PlayableHandle& handle, UInt32 layerIndex, AvatarMask mask)
private void INTERNAL_CALL_SetLayerMaskFromAvatarMaskInternal(PlayableHandle& handle, UInt32 layerIndex, AvatarMask mask)
}
public UnityEngine.Animations.AnimationMixerPlayable : ValueType {
private PlayableHandle m_Handle
internal void .ctor(PlayableHandle handle)
public AnimationMixerPlayable Create(PlayableGraph graph, int inputCount, bool normalizeWeights)
private PlayableHandle CreateHandle(PlayableGraph graph, int inputCount, bool normalizeWeights)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationMixerPlayable playable)
public AnimationMixerPlayable op_Explicit(Playable playable)
public bool Equals(AnimationMixerPlayable other)
private bool CreateHandleInternal(PlayableGraph graph, int inputCount, bool normalizeWeights, PlayableHandle& handle)
private bool INTERNAL_CALL_CreateHandleInternal(PlayableGraph& graph, int inputCount, bool normalizeWeights, PlayableHandle& handle)
}
internal UnityEngine.Animations.AnimationOffsetPlayable : ValueType {
private PlayableHandle m_Handle
private AnimationOffsetPlayable m_NullPlayable
public AnimationOffsetPlayable Null
internal void .ctor(PlayableHandle handle)
public AnimationOffsetPlayable get_Null()
public AnimationOffsetPlayable Create(PlayableGraph graph, Vector3 position, Quaternion rotation, int inputCount)
private PlayableHandle CreateHandle(PlayableGraph graph, Vector3 position, Quaternion rotation, int inputCount)
public PlayableHandle GetHandle()
public Playable op_Implicit(AnimationOffsetPlayable playable)
public AnimationOffsetPlayable op_Explicit(Playable playable)
public bool Equals(AnimationOffsetPlayable other)
private bool CreateHandleInternal(PlayableGraph graph, Vector3 position, Quaternion rotation, PlayableHandle& handle)
private bool INTERNAL_CALL_CreateHandleInternal(PlayableGraph& graph, Vector3& position, Quaternion& rotation, PlayableHandle& handle)
public Vector3 GetPosition()
public void SetPosition(Vector3 value)
public Quaternion GetRotation()
public void SetRotation(Quaternion value)
private Vector3 GetPositionInternal(PlayableHandle& handle)
private void INTERNAL_CALL_GetPositionInternal(PlayableHandle& handle, Vector3& value)
private void SetPositionInternal(PlayableHandle& handle, Vector3 value)
private void INTERNAL_CALL_SetPositionInternal(PlayableHandle& handle, Vector3& value)
private Quaternion GetRotationInternal(PlayableHandle& handle)
private void INTERNAL_CALL_GetRotationInternal(PlayableHandle& handle, Quaternion& value)
private void SetRotationInternal(PlayableHandle& handle, Quaternion value)
private void INTERNAL_CALL_SetRotationInternal(PlayableHandle& handle, Quaternion& value)
}
public UnityEngine.Animations.AnimationPlayableExtensions : object {
public void SetAnimatedProperties(U playable, AnimationClip clip)
internal void SetAnimatedPropertiesInternal(PlayableHandle& playable, AnimationClip animatedProperties)
private void INTERNAL_CALL_SetAnimatedPropertiesInternal(PlayableHandle& playable, AnimationClip animatedProperties)
}
public UnityEngine.Animations.AnimationPlayableGraphExtensions : object {
internal bool InternalCreateAnimationOutput(PlayableGraph& graph, string name, PlayableOutputHandle& handle)
private bool INTERNAL_CALL_InternalCreateAnimationOutput(PlayableGraph& graph, string name, PlayableOutputHandle& handle)
internal void SyncUpdateAndTimeMode(PlayableGraph graph, Animator animator)
internal void InternalSyncUpdateAndTimeMode(PlayableGraph& graph, Animator animator)
private void INTERNAL_CALL_InternalSyncUpdateAndTimeMode(PlayableGraph& graph, Animator animator)
internal PlayableHandle CreateAnimationMotionXToDeltaPlayable(PlayableGraph graph)
private bool InternalCreateAnimationMotionXToDeltaPlayable(PlayableGraph& graph, PlayableHandle& handle)
private bool INTERNAL_CALL_InternalCreateAnimationMotionXToDeltaPlayable(PlayableGraph& graph, PlayableHandle& handle)
private void InternalDestroyOutput(PlayableGraph& graph, PlayableOutputHandle& handle)
private void INTERNAL_CALL_InternalDestroyOutput(PlayableGraph& graph, PlayableOutputHandle& handle)
internal void DestroyOutput(PlayableGraph graph, PlayableOutputHandle handle)
private int InternalAnimationOutputCount(PlayableGraph& graph)
private int INTERNAL_CALL_InternalAnimationOutputCount(PlayableGraph& graph)
private bool InternalGetAnimationOutput(PlayableGraph& graph, int index, PlayableOutputHandle& handle)
private bool INTERNAL_CALL_InternalGetAnimationOutput(PlayableGraph& graph, int index, PlayableOutputHandle& handle)
}
public UnityEngine.Animations.AnimationPlayableOutput : ValueType {
private PlayableOutputHandle m_Handle
public AnimationPlayableOutput Null
internal void .ctor(PlayableOutputHandle handle)
public AnimationPlayableOutput Create(PlayableGraph graph, string name, Animator target)
public AnimationPlayableOutput get_Null()
public PlayableOutputHandle GetHandle()
public PlayableOutput op_Implicit(AnimationPlayableOutput output)
public AnimationPlayableOutput op_Explicit(PlayableOutput output)
public Animator GetTarget()
public void SetTarget(Animator value)
private Animator InternalGetTarget(PlayableOutputHandle& handle)
private Animator INTERNAL_CALL_InternalGetTarget(PlayableOutputHandle& handle)
private void InternalSetTarget(PlayableOutputHandle& handle, Animator target)
private void INTERNAL_CALL_InternalSetTarget(PlayableOutputHandle& handle, Animator target)
}
public UnityEngine.Animations.AnimatorControllerPlayable : ValueType {
private PlayableHandle m_Handle
private AnimatorControllerPlayable m_NullPlayable
public AnimatorControllerPlayable Null
internal void .ctor(PlayableHandle handle)
public AnimatorControllerPlayable get_Null()
public AnimatorControllerPlayable Create(PlayableGraph graph, RuntimeAnimatorController controller)
private PlayableHandle CreateHandle(PlayableGraph graph, RuntimeAnimatorController controller)
public PlayableHandle GetHandle()
public void SetHandle(PlayableHandle handle)
public Playable op_Implicit(AnimatorControllerPlayable playable)
public AnimatorControllerPlayable op_Explicit(Playable playable)
public bool Equals(AnimatorControllerPlayable other)
private bool CreateHandleInternal(PlayableGraph graph, RuntimeAnimatorController controller, PlayableHandle& handle)
private bool INTERNAL_CALL_CreateHandleInternal(PlayableGraph& graph, RuntimeAnimatorController controller, PlayableHandle& handle)
private RuntimeAnimatorController GetAnimatorControllerInternal(PlayableHandle& handle)
private RuntimeAnimatorController INTERNAL_CALL_GetAnimatorControllerInternal(PlayableHandle& handle)
public float GetFloat(string name)
public float GetFloat(int id)
public void SetFloat(string name, float value)
public void SetFloat(int id, float value)
public bool GetBool(string name)
public bool GetBool(int id)
public void SetBool(string name, bool value)
public void SetBool(int id, bool value)
public int GetInteger(string name)
public int GetInteger(int id)
public void SetInteger(string name, int value)
public void SetInteger(int id, int value)
public void SetTrigger(string name)
public void SetTrigger(int id)
public void ResetTrigger(string name)
public void ResetTrigger(int id)
public bool IsParameterControlledByCurve(string name)
public bool IsParameterControlledByCurve(int id)
public int GetLayerCount()
private int GetLayerCountInternal(PlayableHandle& handle)
private int INTERNAL_CALL_GetLayerCountInternal(PlayableHandle& handle)
private string GetLayerNameInternal(PlayableHandle& handle, int layerIndex)
private string INTERNAL_CALL_GetLayerNameInternal(PlayableHandle& handle, int layerIndex)
public string GetLayerName(int layerIndex)
private int GetLayerIndexInternal(PlayableHandle& handle, string layerName)
private int INTERNAL_CALL_GetLayerIndexInternal(PlayableHandle& handle, string layerName)
public int GetLayerIndex(string layerName)
private float GetLayerWeightInternal(PlayableHandle& handle, int layerIndex)
private float INTERNAL_CALL_GetLayerWeightInternal(PlayableHandle& handle, int layerIndex)
public float GetLayerWeight(int layerIndex)
private void SetLayerWeightInternal(PlayableHandle& handle, int layerIndex, float weight)
private void INTERNAL_CALL_SetLayerWeightInternal(PlayableHandle& handle, int layerIndex, float weight)
public void SetLayerWeight(int layerIndex, float weight)
private AnimatorStateInfo GetCurrentAnimatorStateInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorStateInfo INTERNAL_CALL_GetCurrentAnimatorStateInfoInternal(PlayableHandle& handle, int layerIndex)
public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex)
private AnimatorStateInfo GetNextAnimatorStateInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorStateInfo INTERNAL_CALL_GetNextAnimatorStateInfoInternal(PlayableHandle& handle, int layerIndex)
public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex)
private AnimatorTransitionInfo GetAnimatorTransitionInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorTransitionInfo INTERNAL_CALL_GetAnimatorTransitionInfoInternal(PlayableHandle& handle, int layerIndex)
public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex)
private AnimatorClipInfo[] GetCurrentAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorClipInfo[] INTERNAL_CALL_GetCurrentAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex)
public AnimatorClipInfo[] GetCurrentAnimatorClipInfo(int layerIndex)
public void GetCurrentAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
public void GetNextAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
private void GetAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex, bool isCurrent, object clips)
private void INTERNAL_CALL_GetAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex, bool isCurrent, object clips)
private int GetAnimatorClipInfoCountInternal(PlayableHandle& handle, int layerIndex, bool current)
private int INTERNAL_CALL_GetAnimatorClipInfoCountInternal(PlayableHandle& handle, int layerIndex, bool current)
public int GetCurrentAnimatorClipInfoCount(int layerIndex)
public int GetNextAnimatorClipInfoCount(int layerIndex)
private AnimatorClipInfo[] GetNextAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex)
private AnimatorClipInfo[] INTERNAL_CALL_GetNextAnimatorClipInfoInternal(PlayableHandle& handle, int layerIndex)
public AnimatorClipInfo[] GetNextAnimatorClipInfo(int layerIndex)
internal string ResolveHash(int hash)
private string ResolveHashInternal(PlayableHandle& handle, int hash)
private string INTERNAL_CALL_ResolveHashInternal(PlayableHandle& handle, int hash)
private bool IsInTransitionInternal(PlayableHandle& handle, int layerIndex)
private bool INTERNAL_CALL_IsInTransitionInternal(PlayableHandle& handle, int layerIndex)
public bool IsInTransition(int layerIndex)
private int GetParameterCountInternal(PlayableHandle& handle)
private int INTERNAL_CALL_GetParameterCountInternal(PlayableHandle& handle)
public int GetParameterCount()
private AnimatorControllerParameter[] GetParametersArrayInternal(PlayableHandle& handle)
private AnimatorControllerParameter[] INTERNAL_CALL_GetParametersArrayInternal(PlayableHandle& handle)
public AnimatorControllerParameter GetParameter(int index)
private int StringToHash(string name)
public void CrossFadeInFixedTime(string stateName, float transitionDuration, int layer)
public void CrossFadeInFixedTime(string stateName, float transitionDuration)
public void CrossFadeInFixedTime(string stateName, float transitionDuration, int layer, float fixedTime)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration, int layer)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration, int layer, float fixedTime)
private void CrossFadeInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration, int layer, float fixedTime)
private void CrossFadeInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration, int layer)
private void CrossFadeInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration)
private void INTERNAL_CALL_CrossFadeInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration, int layer, float fixedTime)
public void CrossFade(string stateName, float transitionDuration, int layer)
public void CrossFade(string stateName, float transitionDuration)
public void CrossFade(string stateName, float transitionDuration, int layer, float normalizedTime)
public void CrossFade(int stateNameHash, float transitionDuration, int layer)
public void CrossFade(int stateNameHash, float transitionDuration)
public void CrossFade(int stateNameHash, float transitionDuration, int layer, float normalizedTime)
private void CrossFadeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration, int layer, float normalizedTime)
private void CrossFadeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration, int layer)
private void CrossFadeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration)
private void INTERNAL_CALL_CrossFadeInternal(PlayableHandle& handle, int stateNameHash, float transitionDuration, int layer, float normalizedTime)
public void PlayInFixedTime(string stateName, int layer)
public void PlayInFixedTime(string stateName)
public void PlayInFixedTime(string stateName, int layer, float fixedTime)
public void PlayInFixedTime(int stateNameHash, int layer)
public void PlayInFixedTime(int stateNameHash)
public void PlayInFixedTime(int stateNameHash, int layer, float fixedTime)
private void PlayInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, int layer, float fixedTime)
private void PlayInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, int layer)
private void PlayInFixedTimeInternal(PlayableHandle& handle, int stateNameHash)
private void INTERNAL_CALL_PlayInFixedTimeInternal(PlayableHandle& handle, int stateNameHash, int layer, float fixedTime)
public void Play(string stateName, int layer)
public void Play(string stateName)
public void Play(string stateName, int layer, float normalizedTime)
public void Play(int stateNameHash, int layer)
public void Play(int stateNameHash)
public void Play(int stateNameHash, int layer, float normalizedTime)
private void PlayInternal(PlayableHandle& handle, int stateNameHash, int layer, float normalizedTime)
private void PlayInternal(PlayableHandle& handle, int stateNameHash, int layer)
private void PlayInternal(PlayableHandle& handle, int stateNameHash)
private void INTERNAL_CALL_PlayInternal(PlayableHandle& handle, int stateNameHash, int layer, float normalizedTime)
public bool HasState(int layerIndex, int stateID)
private bool HasStateInternal(PlayableHandle& handle, int layerIndex, int stateID)
private bool INTERNAL_CALL_HasStateInternal(PlayableHandle& handle, int layerIndex, int stateID)
private void SetFloatString(PlayableHandle& handle, string name, float value)
private void INTERNAL_CALL_SetFloatString(PlayableHandle& handle, string name, float value)
private void SetFloatID(PlayableHandle& handle, int id, float value)
private void INTERNAL_CALL_SetFloatID(PlayableHandle& handle, int id, float value)
private float GetFloatString(PlayableHandle& handle, string name)
private float INTERNAL_CALL_GetFloatString(PlayableHandle& handle, string name)
private float GetFloatID(PlayableHandle& handle, int id)
private float INTERNAL_CALL_GetFloatID(PlayableHandle& handle, int id)
private void SetBoolString(PlayableHandle& handle, string name, bool value)
private void INTERNAL_CALL_SetBoolString(PlayableHandle& handle, string name, bool value)
private void SetBoolID(PlayableHandle& handle, int id, bool value)
private void INTERNAL_CALL_SetBoolID(PlayableHandle& handle, int id, bool value)
private bool GetBoolString(PlayableHandle& handle, string name)
private bool INTERNAL_CALL_GetBoolString(PlayableHandle& handle, string name)
private bool GetBoolID(PlayableHandle& handle, int id)
private bool INTERNAL_CALL_GetBoolID(PlayableHandle& handle, int id)
private void SetIntegerString(PlayableHandle& handle, string name, int value)
private void INTERNAL_CALL_SetIntegerString(PlayableHandle& handle, string name, int value)
private void SetIntegerID(PlayableHandle& handle, int id, int value)
private void INTERNAL_CALL_SetIntegerID(PlayableHandle& handle, int id, int value)
private int GetIntegerString(PlayableHandle& handle, string name)
private int INTERNAL_CALL_GetIntegerString(PlayableHandle& handle, string name)
private int GetIntegerID(PlayableHandle& handle, int id)
private int INTERNAL_CALL_GetIntegerID(PlayableHandle& handle, int id)
private void SetTriggerString(PlayableHandle& handle, string name)
private void INTERNAL_CALL_SetTriggerString(PlayableHandle& handle, string name)
private void SetTriggerID(PlayableHandle& handle, int id)
private void INTERNAL_CALL_SetTriggerID(PlayableHandle& handle, int id)
private void ResetTriggerString(PlayableHandle& handle, string name)
private void INTERNAL_CALL_ResetTriggerString(PlayableHandle& handle, string name)
private void ResetTriggerID(PlayableHandle& handle, int id)
private void INTERNAL_CALL_ResetTriggerID(PlayableHandle& handle, int id)
private bool IsParameterControlledByCurveString(PlayableHandle& handle, string name)
private bool INTERNAL_CALL_IsParameterControlledByCurveString(PlayableHandle& handle, string name)
private bool IsParameterControlledByCurveID(PlayableHandle& handle, int id)
private bool INTERNAL_CALL_IsParameterControlledByCurveID(PlayableHandle& handle, int id)
}
public UnityEngine.Animations.IAnimatorControllerPlayable {
public float GetFloat(string name)
public float GetFloat(int id)
public void SetFloat(string name, float value)
public void SetFloat(int id, float value)
public bool GetBool(string name)
public bool GetBool(int id)
public void SetBool(string name, bool value)
public void SetBool(int id, bool value)
public int GetInteger(string name)
public int GetInteger(int id)
public void SetInteger(string name, int value)
public void SetInteger(int id, int value)
public void SetTrigger(string name)
public void SetTrigger(int id)
public void ResetTrigger(string name)
public void ResetTrigger(int id)
public bool IsParameterControlledByCurve(string name)
public bool IsParameterControlledByCurve(int id)
public int GetLayerCount()
public string GetLayerName(int layerIndex)
public int GetLayerIndex(string layerName)
public float GetLayerWeight(int layerIndex)
public void SetLayerWeight(int layerIndex, float weight)
public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex)
public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex)
public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex)
public AnimatorClipInfo[] GetCurrentAnimatorClipInfo(int layerIndex)
public AnimatorClipInfo[] GetNextAnimatorClipInfo(int layerIndex)
public int GetCurrentAnimatorClipInfoCount(int layerIndex)
public void GetCurrentAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
public int GetNextAnimatorClipInfoCount(int layerIndex)
public void GetNextAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
public bool IsInTransition(int layerIndex)
public int GetParameterCount()
public AnimatorControllerParameter GetParameter(int index)
public void CrossFadeInFixedTime(string stateName, float transitionDuration, int layer, float fixedTime)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration, int layer, float fixedTime)
public void CrossFade(string stateName, float transitionDuration, int layer, float normalizedTime)
public void CrossFade(int stateNameHash, float transitionDuration, int layer, float normalizedTime)
public void PlayInFixedTime(string stateName, int layer, float fixedTime)
public void PlayInFixedTime(int stateNameHash, int layer, float fixedTime)
public void Play(string stateName, int layer, float normalizedTime)
public void Play(int stateNameHash, int layer, float normalizedTime)
public bool HasState(int layerIndex, int stateID)
}
public UnityEngine.AnimationState : TrackedReference {
public bool enabled
public float weight
public WrapMode wrapMode
public float time
public float normalizedTime
public float speed
public float normalizedSpeed
public float length
public int layer
public AnimationClip clip
public string name
public AnimationBlendMode blendMode
public bool get_enabled()
public void set_enabled(bool value)
public float get_weight()
public void set_weight(float value)
public WrapMode get_wrapMode()
public void set_wrapMode(WrapMode value)
public float get_time()
public void set_time(float value)
public float get_normalizedTime()
public void set_normalizedTime(float value)
public float get_speed()
public void set_speed(float value)
public float get_normalizedSpeed()
public void set_normalizedSpeed(float value)
public float get_length()
public int get_layer()
public void set_layer(int value)
public AnimationClip get_clip()
public void AddMixingTransform(Transform mix, bool recursive)
public void AddMixingTransform(Transform mix)
public void RemoveMixingTransform(Transform mix)
public string get_name()
public void set_name(string value)
public AnimationBlendMode get_blendMode()
public void set_blendMode(AnimationBlendMode value)
}
public UnityEngine.Animator : Behaviour {
public bool isOptimizable
public bool isHuman
public bool hasRootMotion
internal bool isRootPositionOrRotationControlledByCurves
public float humanScale
public bool isInitialized
public Vector3 deltaPosition
public Quaternion deltaRotation
public Vector3 velocity
public Vector3 angularVelocity
public Vector3 rootPosition
public Quaternion rootRotation
public bool applyRootMotion
public bool linearVelocityBlending
public bool animatePhysics
public AnimatorUpdateMode updateMode
public bool hasTransformHierarchy
internal bool allowConstantClipSamplingOptimization
public float gravityWeight
public Vector3 bodyPosition
public Quaternion bodyRotation
public bool stabilizeFeet
public int layerCount
public AnimatorControllerParameter[] parameters
public int parameterCount
public float feetPivotActive
public float pivotWeight
public Vector3 pivotPosition
public bool isMatchingTarget
public float speed
public Vector3 targetPosition
public Quaternion targetRotation
internal Transform avatarRoot
public AnimatorCullingMode cullingMode
public float playbackTime
public float recorderStartTime
public float recorderStopTime
public AnimatorRecorderMode recorderMode
public RuntimeAnimatorController runtimeAnimatorController
public bool hasBoundPlayables
public Avatar avatar
public PlayableGraph playableGraph
public bool layersAffectMassCenter
public float leftFeetBottomHeight
public float rightFeetBottomHeight
public bool logWarnings
public bool fireEvents
public bool get_isOptimizable()
public bool get_isHuman()
public bool get_hasRootMotion()
internal bool get_isRootPositionOrRotationControlledByCurves()
public float get_humanScale()
public bool get_isInitialized()
public float GetFloat(string name)
public float GetFloat(int id)
public void SetFloat(string name, float value)
public void SetFloat(string name, float value, float dampTime, float deltaTime)
public void SetFloat(int id, float value)
public void SetFloat(int id, float value, float dampTime, float deltaTime)
public bool GetBool(string name)
public bool GetBool(int id)
public void SetBool(string name, bool value)
public void SetBool(int id, bool value)
public int GetInteger(string name)
public int GetInteger(int id)
public void SetInteger(string name, int value)
public void SetInteger(int id, int value)
public void SetTrigger(string name)
public void SetTrigger(int id)
public void ResetTrigger(string name)
public void ResetTrigger(int id)
public bool IsParameterControlledByCurve(string name)
public bool IsParameterControlledByCurve(int id)
public Vector3 get_deltaPosition()
private void INTERNAL_get_deltaPosition(Vector3& value)
public Quaternion get_deltaRotation()
private void INTERNAL_get_deltaRotation(Quaternion& value)
public Vector3 get_velocity()
private void INTERNAL_get_velocity(Vector3& value)
public Vector3 get_angularVelocity()
private void INTERNAL_get_angularVelocity(Vector3& value)
public Vector3 get_rootPosition()
public void set_rootPosition(Vector3 value)
private void INTERNAL_get_rootPosition(Vector3& value)
private void INTERNAL_set_rootPosition(Vector3& value)
public Quaternion get_rootRotation()
public void set_rootRotation(Quaternion value)
private void INTERNAL_get_rootRotation(Quaternion& value)
private void INTERNAL_set_rootRotation(Quaternion& value)
public bool get_applyRootMotion()
public void set_applyRootMotion(bool value)
public bool get_linearVelocityBlending()
public void set_linearVelocityBlending(bool value)
public bool get_animatePhysics()
public void set_animatePhysics(bool value)
public AnimatorUpdateMode get_updateMode()
public void set_updateMode(AnimatorUpdateMode value)
public bool get_hasTransformHierarchy()
internal bool get_allowConstantClipSamplingOptimization()
internal void set_allowConstantClipSamplingOptimization(bool value)
public float get_gravityWeight()
public Vector3 get_bodyPosition()
public void set_bodyPosition(Vector3 value)
internal Vector3 GetBodyPositionInternal()
private void INTERNAL_CALL_GetBodyPositionInternal(Animator self, Vector3& value)
internal void SetBodyPositionInternal(Vector3 bodyPosition)
private void INTERNAL_CALL_SetBodyPositionInternal(Animator self, Vector3& bodyPosition)
public Quaternion get_bodyRotation()
public void set_bodyRotation(Quaternion value)
internal Quaternion GetBodyRotationInternal()
private void INTERNAL_CALL_GetBodyRotationInternal(Animator self, Quaternion& value)
internal void SetBodyRotationInternal(Quaternion bodyRotation)
private void INTERNAL_CALL_SetBodyRotationInternal(Animator self, Quaternion& bodyRotation)
public Vector3 GetIKPosition(AvatarIKGoal goal)
internal Vector3 GetIKPositionInternal(AvatarIKGoal goal)
private void INTERNAL_CALL_GetIKPositionInternal(Animator self, AvatarIKGoal goal, Vector3& value)
public void SetIKPosition(AvatarIKGoal goal, Vector3 goalPosition)
internal void SetIKPositionInternal(AvatarIKGoal goal, Vector3 goalPosition)
private void INTERNAL_CALL_SetIKPositionInternal(Animator self, AvatarIKGoal goal, Vector3& goalPosition)
public Quaternion GetIKRotation(AvatarIKGoal goal)
internal Quaternion GetIKRotationInternal(AvatarIKGoal goal)
private void INTERNAL_CALL_GetIKRotationInternal(Animator self, AvatarIKGoal goal, Quaternion& value)
public void SetIKRotation(AvatarIKGoal goal, Quaternion goalRotation)
internal void SetIKRotationInternal(AvatarIKGoal goal, Quaternion goalRotation)
private void INTERNAL_CALL_SetIKRotationInternal(Animator self, AvatarIKGoal goal, Quaternion& goalRotation)
public float GetIKPositionWeight(AvatarIKGoal goal)
internal float GetIKPositionWeightInternal(AvatarIKGoal goal)
public void SetIKPositionWeight(AvatarIKGoal goal, float value)
internal void SetIKPositionWeightInternal(AvatarIKGoal goal, float value)
public float GetIKRotationWeight(AvatarIKGoal goal)
internal float GetIKRotationWeightInternal(AvatarIKGoal goal)
public void SetIKRotationWeight(AvatarIKGoal goal, float value)
internal void SetIKRotationWeightInternal(AvatarIKGoal goal, float value)
public Vector3 GetIKHintPosition(AvatarIKHint hint)
internal Vector3 GetIKHintPositionInternal(AvatarIKHint hint)
private void INTERNAL_CALL_GetIKHintPositionInternal(Animator self, AvatarIKHint hint, Vector3& value)
public void SetIKHintPosition(AvatarIKHint hint, Vector3 hintPosition)
internal void SetIKHintPositionInternal(AvatarIKHint hint, Vector3 hintPosition)
private void INTERNAL_CALL_SetIKHintPositionInternal(Animator self, AvatarIKHint hint, Vector3& hintPosition)
public float GetIKHintPositionWeight(AvatarIKHint hint)
internal float GetHintWeightPositionInternal(AvatarIKHint hint)
public void SetIKHintPositionWeight(AvatarIKHint hint, float value)
internal void SetIKHintPositionWeightInternal(AvatarIKHint hint, float value)
public void SetLookAtPosition(Vector3 lookAtPosition)
internal void SetLookAtPositionInternal(Vector3 lookAtPosition)
private void INTERNAL_CALL_SetLookAtPositionInternal(Animator self, Vector3& lookAtPosition)
public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
public void SetLookAtWeight(float weight, float bodyWeight)
public void SetLookAtWeight(float weight)
public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
internal void SetLookAtWeightInternal(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
internal void SetLookAtWeightInternal(float weight, float bodyWeight, float headWeight, float eyesWeight)
internal void SetLookAtWeightInternal(float weight, float bodyWeight, float headWeight)
internal void SetLookAtWeightInternal(float weight, float bodyWeight)
internal void SetLookAtWeightInternal(float weight)
public void SetBoneLocalRotation(HumanBodyBones humanBoneId, Quaternion rotation)
internal void SetBoneLocalRotationInternal(int humanBoneId, Quaternion rotation)
private void INTERNAL_CALL_SetBoneLocalRotationInternal(Animator self, int humanBoneId, Quaternion& rotation)
internal ScriptableObject GetBehaviour(Type type)
public T GetBehaviour()
internal ScriptableObject[] InternalGetBehaviours(Type type)
internal T[] ConvertStateMachineBehaviour(ScriptableObject[] rawObjects)
public T[] GetBehaviours()
internal StateMachineBehaviour[] InternalGetBehavioursByKey(int fullPathHash, int layerIndex, Type type)
public StateMachineBehaviour[] GetBehaviours(int fullPathHash, int layerIndex)
public bool get_stabilizeFeet()
public void set_stabilizeFeet(bool value)
public int get_layerCount()
public string GetLayerName(int layerIndex)
public int GetLayerIndex(string layerName)
public float GetLayerWeight(int layerIndex)
public void SetLayerWeight(int layerIndex, float weight)
public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex)
public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex)
public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex)
public int GetCurrentAnimatorClipInfoCount(int layerIndex)
public AnimatorClipInfo[] GetCurrentAnimatorClipInfo(int layerIndex)
public void GetCurrentAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
private void GetAnimatorClipInfoInternal(int layerIndex, bool isCurrent, object clips)
public int GetNextAnimatorClipInfoCount(int layerIndex)
public AnimatorClipInfo[] GetNextAnimatorClipInfo(int layerIndex)
public void GetNextAnimatorClipInfo(int layerIndex, List`1<AnimatorClipInfo> clips)
public bool IsInTransition(int layerIndex)
public AnimatorControllerParameter[] get_parameters()
public int get_parameterCount()
public AnimatorControllerParameter GetParameter(int index)
public float get_feetPivotActive()
public void set_feetPivotActive(float value)
public float get_pivotWeight()
public Vector3 get_pivotPosition()
private void INTERNAL_get_pivotPosition(Vector3& value)
public void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, AvatarTarget targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime)
public void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, AvatarTarget targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime)
private void INTERNAL_CALL_MatchTarget(Animator self, Vector3& matchPosition, Quaternion& matchRotation, AvatarTarget targetBodyPart, MatchTargetWeightMask& weightMask, float startNormalizedTime, float targetNormalizedTime)
public void InterruptMatchTarget(bool completeMatch)
public void InterruptMatchTarget()
public bool get_isMatchingTarget()
public float get_speed()
public void set_speed(float value)
public void ForceStateNormalizedTime(float normalizedTime)
public void CrossFadeInFixedTime(string stateName, float transitionDuration, int layer)
public void CrossFadeInFixedTime(string stateName, float transitionDuration)
public void CrossFadeInFixedTime(string stateName, float transitionDuration, int layer, float fixedTime)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration, int layer, float fixedTime)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration, int layer)
public void CrossFadeInFixedTime(int stateNameHash, float transitionDuration)
public void CrossFade(string stateName, float transitionDuration, int layer)
public void CrossFade(string stateName, float transitionDuration)
public void CrossFade(string stateName, float transitionDuration, int layer, float normalizedTime)
public void CrossFade(int stateNameHash, float transitionDuration, int layer, float normalizedTime)
public void CrossFade(int stateNameHash, float transitionDuration, int layer)
public void CrossFade(int stateNameHash, float transitionDuration)
public void PlayInFixedTime(string stateName, int layer)
public void PlayInFixedTime(string stateName)
public void PlayInFixedTime(string stateName, int layer, float fixedTime)
public void PlayInFixedTime(int stateNameHash, int layer, float fixedTime)
public void PlayInFixedTime(int stateNameHash, int layer)
public void PlayInFixedTime(int stateNameHash)
public void Play(string stateName, int layer)
public void Play(string stateName)
public void Play(string stateName, int layer, float normalizedTime)
public void Play(int stateNameHash, int layer, float normalizedTime)
public void Play(int stateNameHash, int layer)
public void Play(int stateNameHash)
public void SetTarget(AvatarTarget targetIndex, float targetNormalizedTime)
public Vector3 get_targetPosition()
private void INTERNAL_get_targetPosition(Vector3& value)
public Quaternion get_targetRotation()
private void INTERNAL_get_targetRotation(Quaternion& value)
public bool IsControlled(Transform transform)
internal bool IsBoneTransform(Transform transform)
internal Transform get_avatarRoot()
public Transform GetBoneTransform(HumanBodyBones humanBoneId)
internal Transform GetBoneTransformInternal(int humanBoneId)
public AnimatorCullingMode get_cullingMode()
public void set_cullingMode(AnimatorCullingMode value)
public void StartPlayback()
public void StopPlayback()
public float get_playbackTime()
public void set_playbackTime(float value)
public void StartRecording(int frameCount)
public void StopRecording()
public float get_recorderStartTime()
public void set_recorderStartTime(float value)
public float get_recorderStopTime()
public void set_recorderStopTime(float value)
public AnimatorRecorderMode get_recorderMode()
public RuntimeAnimatorController get_runtimeAnimatorController()
public void set_runtimeAnimatorController(RuntimeAnimatorController value)
public bool get_hasBoundPlayables()
internal void ClearInternalControllerPlayable()
public bool HasState(int layerIndex, int stateID)
public int StringToHash(string name)
public Avatar get_avatar()
public void set_avatar(Avatar value)
internal string GetStats()
public PlayableGraph get_playableGraph()
private void InternalGetCurrentGraph(PlayableGraph& graph)
private void INTERNAL_CALL_InternalGetCurrentGraph(Animator self, PlayableGraph& graph)
private void CheckIfInIKPass()
private bool CheckIfInIKPassInternal()
private void SetFloatString(string name, float value)
private void SetFloatID(int id, float value)
private float GetFloatString(string name)
private float GetFloatID(int id)
private void SetBoolString(string name, bool value)
private void SetBoolID(int id, bool value)
private bool GetBoolString(string name)
private bool GetBoolID(int id)
private void SetIntegerString(string name, int value)
private void SetIntegerID(int id, int value)
private int GetIntegerString(string name)
private int GetIntegerID(int id)
private void SetTriggerString(string name)
private void SetTriggerID(int id)
private void ResetTriggerString(string name)
private void ResetTriggerID(int id)
private bool IsParameterControlledByCurveString(string name)
private bool IsParameterControlledByCurveID(int id)
private void SetFloatStringDamp(string name, float value, float dampTime, float deltaTime)
private void SetFloatIDDamp(int id, float value, float dampTime, float deltaTime)
public bool get_layersAffectMassCenter()
public void set_layersAffectMassCenter(bool value)
public float get_leftFeetBottomHeight()
public float get_rightFeetBottomHeight()
public void Update(float deltaTime)
public void Rebind()
public void ApplyBuiltinRootMotion()
internal string ResolveHash(int hash)
public bool get_logWarnings()
public void set_logWarnings(bool value)
public bool get_fireEvents()
public void set_fireEvents(bool value)
public Vector3 GetVector(string name)
public Vector3 GetVector(int id)
public void SetVector(string name, Vector3 value)
public void SetVector(int id, Vector3 value)
public Quaternion GetQuaternion(string name)
public Quaternion GetQuaternion(int id)
public void SetQuaternion(string name, Quaternion value)
public void SetQuaternion(int id, Quaternion value)
}
public UnityEngine.AnimatorClipInfo : ValueType {
private int m_ClipInstanceID
private float m_Weight
public AnimationClip clip
public float weight
public AnimationClip get_clip()
public float get_weight()
private AnimationClip ClipInstanceToScriptingObject(int instanceID)
}
public UnityEngine.AnimatorControllerParameter : object {
internal string m_Name
internal AnimatorControllerParameterType m_Type
internal float m_DefaultFloat
internal int m_DefaultInt
internal bool m_DefaultBool
public string name
public int nameHash
public AnimatorControllerParameterType type
public float defaultFloat
public int defaultInt
public bool defaultBool
public string get_name()
public int get_nameHash()
public AnimatorControllerParameterType get_type()
public void set_type(AnimatorControllerParameterType value)
public float get_defaultFloat()
public void set_defaultFloat(float value)
public int get_defaultInt()
public void set_defaultInt(int value)
public bool get_defaultBool()
public void set_defaultBool(bool value)
public bool Equals(object o)
public int GetHashCode()
}
public UnityEngine.AnimatorControllerParameterType : Enum {
public int value__
public AnimatorControllerParameterType Float
public AnimatorControllerParameterType Int
public AnimatorControllerParameterType Bool
public AnimatorControllerParameterType Trigger
}
public UnityEngine.AnimatorCullingMode : Enum {
public int value__
public AnimatorCullingMode AlwaysAnimate
public AnimatorCullingMode CullUpdateTransforms
public AnimatorCullingMode CullCompletely
}
public UnityEngine.AnimatorOverrideController : RuntimeAnimatorController {
public RuntimeAnimatorController runtimeAnimatorController
public AnimationClip Item
public AnimationClip Item
public int overridesCount
public AnimationClipPair[] clips
public void .ctor(RuntimeAnimatorController controller)
private void Internal_CreateAnimatorOverrideController(AnimatorOverrideController self, RuntimeAnimatorController controller)
public RuntimeAnimatorController get_runtimeAnimatorController()
public void set_runtimeAnimatorController(RuntimeAnimatorController value)
public AnimationClip get_Item(string name)
public void set_Item(string name, AnimationClip value)
private AnimationClip Internal_GetClipByName(string name, bool returnEffectiveClip)
private void Internal_SetClipByName(string name, AnimationClip clip)
public AnimationClip get_Item(AnimationClip clip)
public void set_Item(AnimationClip clip, AnimationClip value)
private AnimationClip Internal_GetClip(AnimationClip originalClip, bool returnEffectiveClip)
private void Internal_SetClip(AnimationClip originalClip, AnimationClip overrideClip, bool notify)
private void Internal_SetClip(AnimationClip originalClip, AnimationClip overrideClip)
private void SendNotification()
private AnimationClip Internal_GetOriginalClip(int index)
private AnimationClip Internal_GetOverrideClip(AnimationClip originalClip)
public int get_overridesCount()
public void GetOverrides(List`1<KeyValuePair`2<AnimationClip, AnimationClip>> overrides)
public void ApplyOverrides(IList`1<KeyValuePair`2<AnimationClip, AnimationClip>> overrides)
public AnimationClipPair[] get_clips()
public void set_clips(AnimationClipPair[] value)
}
public UnityEngine.AnimatorRecorderMode : Enum {
public int value__
public AnimatorRecorderMode Offline
public AnimatorRecorderMode Playback
public AnimatorRecorderMode Record
}
public UnityEngine.AnimatorStateInfo : ValueType {
private int m_Name
private int m_Path
private int m_FullPath
private float m_NormalizedTime
private float m_Length
private float m_Speed
private float m_SpeedMultiplier
private int m_Tag
private int m_Loop
public int fullPathHash
public int nameHash
public int shortNameHash
public float normalizedTime
public float length
public float speed
public float speedMultiplier
public int tagHash
public bool loop
public bool IsName(string name)
public int get_fullPathHash()
public int get_nameHash()
public int get_shortNameHash()
public float get_normalizedTime()
public float get_length()
public float get_speed()
public float get_speedMultiplier()
public int get_tagHash()
public bool IsTag(string tag)
public bool get_loop()
}
public UnityEngine.AnimatorTransitionInfo : ValueType {
private int m_FullPath
private int m_UserName
private int m_Name
private float m_NormalizedTime
private bool m_AnyState
private int m_TransitionType
public int fullPathHash
public int nameHash
public int userNameHash
public float normalizedTime
public bool anyState
internal bool entry
internal bool exit
public bool IsName(string name)
public bool IsUserName(string name)
public int get_fullPathHash()
public int get_nameHash()
public int get_userNameHash()
public float get_normalizedTime()
public bool get_anyState()
internal bool get_entry()
internal bool get_exit()
}
public UnityEngine.AnimatorUpdateMode : Enum {
public int value__
public AnimatorUpdateMode Normal
public AnimatorUpdateMode AnimatePhysics
public AnimatorUpdateMode UnscaledTime
}
public UnityEngine.AnimatorUtility : object {
public void OptimizeTransformHierarchy(GameObject go, String[] exposedTransforms)
public void DeoptimizeTransformHierarchy(GameObject go)
}
public UnityEngine.AnisotropicFiltering : Enum {
public int value__
public AnisotropicFiltering Disable
public AnisotropicFiltering Enable
public AnisotropicFiltering ForceEnable
}
public UnityEngine.Application : object {
private LowMemoryCallback lowMemory
internal AdvertisingIdentifierCallback OnAdvertisingIdentifierCallback
private LogCallback s_LogCallbackHandler
private LogCallback s_LogCallbackHandlerThreaded
private UnityAction onBeforeRender
private LogCallback modreq(System.Runtime.CompilerServices.IsVolatile) s_RegisterLogCallbackDeprecated
public bool isLoadingLevel
public int streamedBytes
public bool isPlaying
public bool isFocused
public bool isEditor
public bool isWebPlayer
public RuntimePlatform platform
public string buildGUID
public bool isMobilePlatform
public bool isConsolePlatform
public bool runInBackground
public bool isPlayer
internal bool isBatchmode
internal bool isTestRun
internal bool isHumanControllingUs
public string dataPath
public string streamingAssetsPath
public string persistentDataPath
public string temporaryCachePath
public string srcValue
public string absoluteURL
public string unityVersion
public string version
public string installerName
public string identifier
public ApplicationInstallMode installMode
public ApplicationSandboxType sandboxType
public string productName
public string companyName
public string cloudProjectId
public bool webSecurityEnabled
public string webSecurityHostUrl
public int targetFrameRate
public SystemLanguage systemLanguage
public StackTraceLogType stackTraceLogType
public ThreadPriority backgroundLoadingPriority
public NetworkReachability internetReachability
public bool genuine
public bool genuineCheckAvailable
internal bool submitAnalytics
public bool isShowingSplashScreen
public int levelCount
public int loadedLevel
public string loadedLevelName
public void add_lowMemory(LowMemoryCallback value)
public void remove_lowMemory(LowMemoryCallback value)
private void CallLowMemory()
public void Quit()
public void CancelQuit()
public void Unload()
public bool get_isLoadingLevel()
private float GetStreamProgressForLevelByName(string levelName)
public float GetStreamProgressForLevel(int levelIndex)
public float GetStreamProgressForLevel(string levelName)
public int get_streamedBytes()
private bool CanStreamedLevelBeLoadedByName(string levelName)
public bool CanStreamedLevelBeLoaded(int levelIndex)
public bool CanStreamedLevelBeLoaded(string levelName)
public bool get_isPlaying()
public bool get_isFocused()
public bool get_isEditor()
public bool get_isWebPlayer()
public RuntimePlatform get_platform()
public String[] GetBuildTags()
public void SetBuildTags(String[] buildTags)
public string get_buildGUID()
public bool get_isMobilePlatform()
public bool get_isConsolePlatform()
public void CaptureScreenshot(string filename, int superSize)
public void CaptureScreenshot(string filename)
public bool get_runInBackground()
public void set_runInBackground(bool value)
public bool get_isPlayer()
public bool HasProLicense()
internal bool HasAdvancedLicense()
internal bool get_isBatchmode()
internal bool get_isTestRun()
internal bool get_isHumanControllingUs()
internal bool HasARGV(string name)
internal string GetValueForARGV(string name)
public void DontDestroyOnLoad(Object mono)
public string get_dataPath()
public string get_streamingAssetsPath()
public string get_persistentDataPath()
public string get_temporaryCachePath()
public string get_srcValue()
public string get_absoluteURL()
private string ObjectToJSString(object o)
public void ExternalCall(string functionName, Object[] args)
private string BuildInvocationForArguments(string functionName, Object[] args)
public void ExternalEval(string script)
private void Internal_ExternalCall(string script)
public string get_unityVersion()
public string get_version()
public string get_installerName()
public string get_identifier()
public ApplicationInstallMode get_installMode()
public ApplicationSandboxType get_sandboxType()
public string get_productName()
public string get_companyName()
public string get_cloudProjectId()
internal void InvokeOnAdvertisingIdentifierCallback(string advertisingId, bool trackingEnabled)
public bool RequestAdvertisingIdentifierAsync(AdvertisingIdentifierCallback delegateMethod)
public bool get_webSecurityEnabled()
public string get_webSecurityHostUrl()
public void OpenURL(string url)
public void ForceCrash(int mode)
public int get_targetFrameRate()
public void set_targetFrameRate(int value)
public SystemLanguage get_systemLanguage()
public void add_logMessageReceived(LogCallback value)
public void remove_logMessageReceived(LogCallback value)
public void add_logMessageReceivedThreaded(LogCallback value)
public void remove_logMessageReceivedThreaded(LogCallback value)
private void CallLogCallback(string logString, string stackTrace, LogType type, bool invokedOnMainThread)
private void SetLogCallbackDefined(bool defined)
public StackTraceLogType get_stackTraceLogType()
public void set_stackTraceLogType(StackTraceLogType value)
public StackTraceLogType GetStackTraceLogType(LogType logType)
public void SetStackTraceLogType(LogType logType, StackTraceLogType stackTraceType)
public ThreadPriority get_backgroundLoadingPriority()
public void set_backgroundLoadingPriority(ThreadPriority value)
public NetworkReachability get_internetReachability()
public bool get_genuine()
public bool get_genuineCheckAvailable()
public AsyncOperation RequestUserAuthorization(UserAuthorization mode)
public bool HasUserAuthorization(UserAuthorization mode)
internal bool get_submitAnalytics()
public bool get_isShowingSplashScreen()
public void add_onBeforeRender(UnityAction value)
public void remove_onBeforeRender(UnityAction value)
internal void InvokeOnBeforeRender()
public void RegisterLogCallback(LogCallback handler)
public void RegisterLogCallbackThreaded(LogCallback handler)
private void RegisterLogCallback(LogCallback handler, bool threaded)
public int get_levelCount()
public int get_loadedLevel()
public string get_loadedLevelName()
public void LoadLevel(int index)
public void LoadLevel(string name)
public void LoadLevelAdditive(int index)
public void LoadLevelAdditive(string name)
public AsyncOperation LoadLevelAsync(int index)
public AsyncOperation LoadLevelAsync(string levelName)
public AsyncOperation LoadLevelAdditiveAsync(int index)
public AsyncOperation LoadLevelAdditiveAsync(string levelName)
public bool UnloadLevel(int index)
public bool UnloadLevel(string scenePath)
}
public UnityEngine.ApplicationInstallMode : Enum {
public int value__
public ApplicationInstallMode Unknown
public ApplicationInstallMode Store
public ApplicationInstallMode DeveloperBuild
public ApplicationInstallMode Adhoc
public ApplicationInstallMode Enterprise
public ApplicationInstallMode Editor
}
public UnityEngine.ApplicationSandboxType : Enum {
public int value__
public ApplicationSandboxType Unknown
public ApplicationSandboxType NotSandboxed
public ApplicationSandboxType Sandboxed
public ApplicationSandboxType SandboxBroken
}
public UnityEngine.AreaEffector2D : Effector2D {
public float forceAngle
public bool useGlobalAngle
public float forceMagnitude
public float forceVariation
public float drag
public float angularDrag
public EffectorSelection2D forceTarget
public float get_forceAngle()
public void set_forceAngle(float value)
public bool get_useGlobalAngle()
public void set_useGlobalAngle(bool value)
public float get_forceMagnitude()
public void set_forceMagnitude(float value)
public float get_forceVariation()
public void set_forceVariation(float value)
public float get_drag()
public void set_drag(float value)
public float get_angularDrag()
public void set_angularDrag(float value)
public EffectorSelection2D get_forceTarget()
public void set_forceTarget(EffectorSelection2D value)
}
internal UnityEngine.ArmDoF : Enum {
public int value__
public ArmDoF ShoulderDownUp
public ArmDoF ShoulderFrontBack
public ArmDoF ArmDownUp
public ArmDoF ArmFrontBack
public ArmDoF ArmRollInOut
public ArmDoF ForeArmCloseOpen
public ArmDoF ForeArmRollInOut
public ArmDoF HandDownUp
public ArmDoF HandInOut
public ArmDoF LastArmDoF
}
public UnityEngine.Assertions.Assert : object {
internal string UNITY_ASSERTIONS
public bool raiseExceptions
private void Fail(string message, string userMessage)
public bool Equals(object obj1, object obj2)
public bool ReferenceEquals(object obj1, object obj2)
public void IsTrue(bool condition)
public void IsTrue(bool condition, string message)
public void IsFalse(bool condition)
public void IsFalse(bool condition, string message)
public void AreApproximatelyEqual(float expected, float actual)
public void AreApproximatelyEqual(float expected, float actual, string message)
public void AreApproximatelyEqual(float expected, float actual, float tolerance)
public void AreApproximatelyEqual(float expected, float actual, float tolerance, string message)
public void AreNotApproximatelyEqual(float expected, float actual)
public void AreNotApproximatelyEqual(float expected, float actual, string message)
public void AreNotApproximatelyEqual(float expected, float actual, float tolerance)
public void AreNotApproximatelyEqual(float expected, float actual, float tolerance, string message)
public void AreEqual(T expected, T actual)
public void AreEqual(T expected, T actual, string message)
public void AreEqual(T expected, T actual, string message, IEqualityComparer`1<T> comparer)
public void AreEqual(Object expected, Object actual, string message)
public void AreNotEqual(T expected, T actual)
public void AreNotEqual(T expected, T actual, string message)
public void AreNotEqual(T expected, T actual, string message, IEqualityComparer`1<T> comparer)
public void AreNotEqual(Object expected, Object actual, string message)
public void IsNull(T value)
public void IsNull(T value, string message)
public void IsNull(Object value, string message)
public void IsNotNull(T value)
public void IsNotNull(T value, string message)
public void IsNotNull(Object value, string message)
}
public UnityEngine.Assertions.AssertionException : Exception {
private string m_UserMessage
public string Message
public void .ctor(string message, string userMessage)
public string get_Message()
}
internal UnityEngine.Assertions.AssertionMessageUtil : object {
private string k_Expected
private string k_AssertionFailed
public string GetMessage(string failureMessage)
public string GetMessage(string failureMessage, string expected)
public string GetEqualityMessage(object actual, object expected, bool expectEqual)
public string NullFailureMessage(object value, bool expectNull)
public string BooleanFailureMessage(bool expected)
}
public UnityEngine.Assertions.Comparers.FloatComparer : object {
private float m_Error
private bool m_Relative
public FloatComparer s_ComparerWithDefaultTolerance
public float kEpsilon
public void .ctor(bool relative)
public void .ctor(float error)
public void .ctor(float error, bool relative)
public bool Equals(float a, float b)
public int GetHashCode(float obj)
public bool AreEqual(float expected, float actual, float error)
public bool AreEqualRelative(float expected, float actual, float error)
}
public UnityEngine.Assertions.Must.MustExtensions : object {
public void MustBeTrue(bool value)
public void MustBeTrue(bool value, string message)
public void MustBeFalse(bool value)
public void MustBeFalse(bool value, string message)
public void MustBeApproximatelyEqual(float actual, float expected)
public void MustBeApproximatelyEqual(float actual, float expected, string message)
public void MustBeApproximatelyEqual(float actual, float expected, float tolerance)
public void MustBeApproximatelyEqual(float actual, float expected, float tolerance, string message)
public void MustNotBeApproximatelyEqual(float actual, float expected)
public void MustNotBeApproximatelyEqual(float actual, float expected, string message)
public void MustNotBeApproximatelyEqual(float actual, float expected, float tolerance)
public void MustNotBeApproximatelyEqual(float actual, float expected, float tolerance, string message)
public void MustBeEqual(T actual, T expected)
public void MustBeEqual(T actual, T expected, string message)
public void MustNotBeEqual(T actual, T expected)
public void MustNotBeEqual(T actual, T expected, string message)
public void MustBeNull(T expected)
public void MustBeNull(T expected, string message)
public void MustNotBeNull(T expected)
public void MustNotBeNull(T expected, string message)
}
public UnityEngine.AssetBundle : Object {
public Object mainAsset
public bool isStreamedSceneAssetBundle
public void UnloadAllAssetBundles(bool unloadAllObjects)
public IEnumerable`1<AssetBundle> GetAllLoadedAssetBundles()
internal AssetBundle[] GetAllLoadedAssetBundles_Internal()
public AssetBundleCreateRequest LoadFromFileAsync(string path, UInt32 crc, ulong offset)
public AssetBundleCreateRequest LoadFromFileAsync(string path, UInt32 crc)
public AssetBundleCreateRequest LoadFromFileAsync(string path)
public AssetBundle LoadFromFile(string path, UInt32 crc, ulong offset)
public AssetBundle LoadFromFile(string path, UInt32 crc)
public AssetBundle LoadFromFile(string path)
public AssetBundleCreateRequest LoadFromMemoryAsync(Byte[] binary, UInt32 crc)
public AssetBundleCreateRequest LoadFromMemoryAsync(Byte[] binary)
public AssetBundle LoadFromMemory(Byte[] binary, UInt32 crc)
public AssetBundle LoadFromMemory(Byte[] binary)
public Object get_mainAsset()
public bool get_isStreamedSceneAssetBundle()
public bool Contains(string name)
public Object Load(string name)
public T Load(string name)
public Object Load(string name, Type type)
public AssetBundleRequest LoadAsync(string name, Type type)
public Object[] LoadAll(Type type)
public Object[] LoadAll()
public T[] LoadAll()
public Object LoadAsset(string name)
public T LoadAsset(string name)
public Object LoadAsset(string name, Type type)
private Object LoadAsset_Internal(string name, Type type)
public AssetBundleRequest LoadAssetAsync(string name)
public AssetBundleRequest LoadAssetAsync(string name)
public AssetBundleRequest LoadAssetAsync(string name, Type type)
private AssetBundleRequest LoadAssetAsync_Internal(string name, Type type)
public Object[] LoadAssetWithSubAssets(string name)
public T[] LoadAssetWithSubAssets(string name)
public Object[] LoadAssetWithSubAssets(string name, Type type)
internal Object[] LoadAssetWithSubAssets_Internal(string name, Type type)
public AssetBundleRequest LoadAssetWithSubAssetsAsync(string name)
public AssetBundleRequest LoadAssetWithSubAssetsAsync(string name)
public AssetBundleRequest LoadAssetWithSubAssetsAsync(string name, Type type)
private AssetBundleRequest LoadAssetWithSubAssetsAsync_Internal(string name, Type type)
public Object[] LoadAllAssets()
public T[] LoadAllAssets()
public Object[] LoadAllAssets(Type type)
public AssetBundleRequest LoadAllAssetsAsync()
public AssetBundleRequest LoadAllAssetsAsync()
public AssetBundleRequest LoadAllAssetsAsync(Type type)
public void Unload(bool unloadAllLoadedObjects)
public String[] AllAssetNames()
public String[] GetAllAssetNames()
public String[] GetAllScenePaths()
}
public UnityEngine.AssetBundleCreateRequest : AsyncOperation {
public AssetBundle assetBundle
public AssetBundle get_assetBundle()
internal void DisableCompatibilityChecks()
}
public UnityEngine.AssetBundleManifest : Object {
public String[] GetAllAssetBundles()
public String[] GetAllAssetBundlesWithVariant()
public Hash128 GetAssetBundleHash(string assetBundleName)
private void INTERNAL_CALL_GetAssetBundleHash(AssetBundleManifest self, string assetBundleName, Hash128& value)
public String[] GetDirectDependencies(string assetBundleName)
public String[] GetAllDependencies(string assetBundleName)
}
public UnityEngine.AssetBundleRequest : AsyncOperation {
public Object asset
public Object[] allAssets
public Object get_asset()
public Object[] get_allAssets()
}
public UnityEngine.AsyncOperation : YieldInstruction {
internal IntPtr m_Ptr
public bool isDone
public float progress
public int priority
public bool allowSceneActivation
private void InternalDestroy()
protected void Finalize()
public bool get_isDone()
public float get_progress()
public int get_priority()
public void set_priority(int value)
public bool get_allowSceneActivation()
public void set_allowSceneActivation(bool value)
}
internal UnityEngine.AtomicSafetyHandle : ValueType {
internal IntPtr versionNode
internal AtomicSafetyHandleVersionMask version
internal AtomicSafetyHandle Create()
internal void Release(AtomicSafetyHandle handle)
internal void PrepareUndisposable(AtomicSafetyHandle& handle)
internal void UseSecondaryVersion(AtomicSafetyHandle& handle)
internal void BumpSecondaryVersion(AtomicSafetyHandle& handle)
internal void EnforceAllBufferJobsHaveCompletedAndRelease(AtomicSafetyHandle handle)
internal void CheckReadAndThrowNoEarlyOut(AtomicSafetyHandle handle)
internal void CheckWriteAndThrowNoEarlyOut(AtomicSafetyHandle handle)
internal void CheckDeallocateAndThrow(AtomicSafetyHandle handle)
internal void CheckReadAndThrow(AtomicSafetyHandle handle)
internal void CheckWriteAndThrow(AtomicSafetyHandle handle)
private void Create_Injected(AtomicSafetyHandle& ret)
private void Release_Injected(AtomicSafetyHandle& handle)
private void EnforceAllBufferJobsHaveCompletedAndRelease_Injected(AtomicSafetyHandle& handle)
private void CheckReadAndThrowNoEarlyOut_Injected(AtomicSafetyHandle& handle)
private void CheckWriteAndThrowNoEarlyOut_Injected(AtomicSafetyHandle& handle)
private void CheckDeallocateAndThrow_Injected(AtomicSafetyHandle& handle)
}
internal UnityEngine.AtomicSafetyHandleVersionMask : Enum {
public int value__
public AtomicSafetyHandleVersionMask Read
public AtomicSafetyHandleVersionMask Write
public AtomicSafetyHandleVersionMask ReadAndWrite
public AtomicSafetyHandleVersionMask WriteInv
public AtomicSafetyHandleVersionMask ReadInv
public AtomicSafetyHandleVersionMask ReadAndWriteInv
}
internal UnityEngine.AttributeHelperEngine : object {
private Type GetParentTypeDisallowingMultipleInclusion(Type type)
private Type[] GetRequiredComponents(Type klass)
private bool CheckIsEditorScript(Type klass)
private int GetDefaultExecutionOrderFor(Type klass)
private T GetCustomAttributeOfType(Type klass)
}
public UnityEngine.Audio.AudioClipPlayable : ValueType {
private PlayableHandle m_Handle
internal void .ctor(PlayableHandle handle)
public AudioClipPlayable Create(PlayableGraph graph, AudioClip clip, bool looping)
private PlayableHandle CreateHandle(PlayableGraph graph, AudioClip clip, bool looping)
public PlayableHandle GetHandle()
public Playable op_Implicit(AudioClipPlayable playable)
public AudioClipPlayable op_Explicit(Playable playable)
public bool Equals(AudioClipPlayable other)
public AudioClip GetClip()
public void GetClip(AudioClip value)
private AudioClip GetClipInternal(PlayableHandle& hdl)
private AudioClip INTERNAL_CALL_GetClipInternal(PlayableHandle& hdl)
private void SetClipInternal(PlayableHandle& hdl, AudioClip clip)
private void INTERNAL_CALL_SetClipInternal(PlayableHandle& hdl, AudioClip clip)
public bool GetLooped()
public void SetLooped(bool value)
private bool GetLoopedInternal(PlayableHandle& hdl)
private bool INTERNAL_CALL_GetLoopedInternal(PlayableHandle& hdl)
private void SetLoopedInternal(PlayableHandle& hdl, bool looped)
private void INTERNAL_CALL_SetLoopedInternal(PlayableHandle& hdl, bool looped)
public bool IsPlaying()
private bool GetIsPlayingInternal(PlayableHandle& hdl)
private bool INTERNAL_CALL_GetIsPlayingInternal(PlayableHandle& hdl)
public double GetStartDelay()
internal void SetStartDelay(double value)
private double GetStartDelayInternal(PlayableHandle& hdl)
private double INTERNAL_CALL_GetStartDelayInternal(PlayableHandle& hdl)
private void SetStartDelayInternal(PlayableHandle& hdl, double delay)
private void INTERNAL_CALL_SetStartDelayInternal(PlayableHandle& hdl, double delay)
public double GetPauseDelay()
internal void GetPauseDelay(double value)
private double GetPauseDelayInternal(PlayableHandle& hdl)
private double INTERNAL_CALL_GetPauseDelayInternal(PlayableHandle& hdl)
private void SetPauseDelayInternal(PlayableHandle& hdl, double delay)
private void INTERNAL_CALL_SetPauseDelayInternal(PlayableHandle& hdl, double delay)
private bool InternalCreateAudioClipPlayable(PlayableGraph& graph, AudioClip clip, bool looping, PlayableHandle& handle)
private bool INTERNAL_CALL_InternalCreateAudioClipPlayable(PlayableGraph& graph, AudioClip clip, bool looping, PlayableHandle& handle)
private bool ValidateType(PlayableHandle& hdl)
private bool INTERNAL_CALL_ValidateType(PlayableHandle& hdl)
public void Seek(double startTime, double startDelay)
public void Seek(double startTime, double startDelay, double duration)
private void ValidateStartDelayInternal(double startDelay)
}
public UnityEngine.Audio.AudioMixer : Object {
public AudioMixerGroup outputAudioMixerGroup
public AudioMixerUpdateMode updateMode
public AudioMixerGroup get_outputAudioMixerGroup()
public void set_outputAudioMixerGroup(AudioMixerGroup value)
public AudioMixerGroup[] FindMatchingGroups(string subPath)
public AudioMixerSnapshot FindSnapshot(string name)
private void TransitionToSnapshot(AudioMixerSnapshot snapshot, float timeToReach)
public void TransitionToSnapshots(AudioMixerSnapshot[] snapshots, Single[] weights, float timeToReach)
public AudioMixerUpdateMode get_updateMode()
public void set_updateMode(AudioMixerUpdateMode value)
public bool SetFloat(string name, float value)
public bool ClearFloat(string name)
public bool GetFloat(string name, Single& value)
}
public UnityEngine.Audio.AudioMixerGroup : Object {
public AudioMixer audioMixer
public AudioMixer get_audioMixer()
}
public UnityEngine.Audio.AudioMixerPlayable : ValueType {
private PlayableHandle m_Handle
internal void .ctor(PlayableHandle handle)
public AudioMixerPlayable Create(PlayableGraph graph, int inputCount, bool normalizeInputVolumes)
private PlayableHandle CreateHandle(PlayableGraph graph, int inputCount, bool normalizeInputVolumes)
public PlayableHandle GetHandle()
public Playable op_Implicit(AudioMixerPlayable playable)
public AudioMixerPlayable op_Explicit(Playable playable)
public bool Equals(AudioMixerPlayable other)
public bool GetAutoNormalizeVolumes()
public void GetAutoNormalizeVolumes(bool value)
private bool GetAutoNormalizeInternal(PlayableHandle& hdl)
private bool INTERNAL_CALL_GetAutoNormalizeInternal(PlayableHandle& hdl)
private void SetAutoNormalizeInternal(PlayableHandle& hdl, bool normalise)
private void INTERNAL_CALL_SetAutoNormalizeInternal(PlayableHandle& hdl, bool normalise)
private bool CreateAudioMixerPlayableInternal(PlayableGraph& graph, int inputCount, bool normalizeInputVolumes, PlayableHandle& handle)
private bool INTERNAL_CALL_CreateAudioMixerPlayableInternal(PlayableGraph& graph, int inputCount, bool normalizeInputVolumes, PlayableHandle& handle)
}
public UnityEngine.Audio.AudioMixerSnapshot : Object {
public AudioMixer audioMixer
public AudioMixer get_audioMixer()
public void TransitionTo(float timeToReach)
}
public UnityEngine.Audio.AudioMixerUpdateMode : Enum {
public int value__
public AudioMixerUpdateMode Normal
public AudioMixerUpdateMode UnscaledTime
}
public UnityEngine.Audio.AudioPlayableOutput : ValueType {
private PlayableOutputHandle m_Handle
public AudioPlayableOutput Null
internal void .ctor(PlayableOutputHandle handle)
public AudioPlayableOutput Create(PlayableGraph graph, string name, AudioSource target)
public AudioPlayableOutput get_Null()
public PlayableOutputHandle GetHandle()
public PlayableOutput op_Implicit(AudioPlayableOutput output)
public AudioPlayableOutput op_Explicit(PlayableOutput output)
public AudioSource GetTarget()
public void SetTarget(AudioSource value)
private AudioSource InternalGetTarget(PlayableOutputHandle& output)
private AudioSource INTERNAL_CALL_InternalGetTarget(PlayableOutputHandle& output)
private void InternalSetTarget(PlayableOutputHandle& output, AudioSource target)
private void INTERNAL_CALL_InternalSetTarget(PlayableOutputHandle& output, AudioSource target)
}
public UnityEngine.AudioChorusFilter : Behaviour {
public float dryMix
public float wetMix1
public float wetMix2
public float wetMix3
public float delay
public float rate
public float depth
public float feedback
public float get_dryMix()
public void set_dryMix(float value)
public float get_wetMix1()
public void set_wetMix1(float value)
public float get_wetMix2()
public void set_wetMix2(float value)
public float get_wetMix3()
public void set_wetMix3(float value)
public float get_delay()
public void set_delay(float value)
public float get_rate()
public void set_rate(float value)
public float get_depth()
public void set_depth(float value)
public float get_feedback()
public void set_feedback(float value)
}
public UnityEngine.AudioClip : Object {
private PCMReaderCallback m_PCMReaderCallback
private PCMSetPositionCallback m_PCMSetPositionCallback
public float length
public int samples
public int channels
public int frequency
public bool isReadyToPlay
public AudioClipLoadType loadType
public bool preloadAudioData
public bool ambisonic
public AudioDataLoadState loadState
public bool loadInBackground
public float get_length()
public int get_samples()
public int get_channels()
public int get_frequency()
public bool get_isReadyToPlay()
public AudioClipLoadType get_loadType()
public bool LoadAudioData()
public bool UnloadAudioData()
public bool get_preloadAudioData()
public bool get_ambisonic()
public AudioDataLoadState get_loadState()
public bool get_loadInBackground()
public bool GetData(Single[] data, int offsetSamples)
public bool SetData(Single[] data, int offsetSamples)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool _3D, bool stream)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool _3D, bool stream, PCMReaderCallback pcmreadercallback)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool _3D, bool stream, PCMReaderCallback pcmreadercallback, PCMSetPositionCallback pcmsetpositioncallback)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool stream)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool stream, PCMReaderCallback pcmreadercallback)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool stream, PCMReaderCallback pcmreadercallback, PCMSetPositionCallback pcmsetpositioncallback)
private void add_m_PCMReaderCallback(PCMReaderCallback value)
private void remove_m_PCMReaderCallback(PCMReaderCallback value)
private void add_m_PCMSetPositionCallback(PCMSetPositionCallback value)
private void remove_m_PCMSetPositionCallback(PCMSetPositionCallback value)
private void InvokePCMReaderCallback_Internal(Single[] data)
private void InvokePCMSetPositionCallback_Internal(int position)
private AudioClip Construct_Internal()
private void Init_Internal(string name, int lengthSamples, int channels, int frequency, bool stream)
}
public UnityEngine.AudioClipLoadType : Enum {
public int value__
public AudioClipLoadType DecompressOnLoad
public AudioClipLoadType CompressedInMemory
public AudioClipLoadType Streaming
}
public UnityEngine.AudioCompressionFormat : Enum {
public int value__
public AudioCompressionFormat PCM
public AudioCompressionFormat Vorbis
public AudioCompressionFormat ADPCM
public AudioCompressionFormat MP3
public AudioCompressionFormat VAG
public AudioCompressionFormat HEVAG
public AudioCompressionFormat XMA
public AudioCompressionFormat AAC
public AudioCompressionFormat GCADPCM
public AudioCompressionFormat ATRAC9
}
public UnityEngine.AudioConfiguration : ValueType {
public AudioSpeakerMode speakerMode
public int dspBufferSize
public int sampleRate
public int numRealVoices
public int numVirtualVoices
}
public UnityEngine.AudioDataLoadState : Enum {
public int value__
public AudioDataLoadState Unloaded
public AudioDataLoadState Loading
public AudioDataLoadState Loaded
public AudioDataLoadState Failed
}
public UnityEngine.AudioDistortionFilter : Behaviour {
public float distortionLevel
public float get_distortionLevel()
public void set_distortionLevel(float value)
}
public UnityEngine.AudioEchoFilter : Behaviour {
public float delay
public float decayRatio
public float dryMix
public float wetMix
public float get_delay()
public void set_delay(float value)
public float get_decayRatio()
public void set_decayRatio(float value)
public float get_dryMix()
public void set_dryMix(float value)
public float get_wetMix()
public void set_wetMix(float value)
}
public UnityEngine.AudioHighPassFilter : Behaviour {
public float cutoffFrequency
public float highpassResonanceQ
public float get_cutoffFrequency()
public void set_cutoffFrequency(float value)
public float get_highpassResonanceQ()
public void set_highpassResonanceQ(float value)
}
public UnityEngine.AudioListener : Behaviour {
public float volume
public bool pause
public AudioVelocityUpdateMode velocityUpdateMode
public float get_volume()
public void set_volume(float value)
public bool get_pause()
public void set_pause(bool value)
public AudioVelocityUpdateMode get_velocityUpdateMode()
public void set_velocityUpdateMode(AudioVelocityUpdateMode value)
private void GetOutputDataHelper(Single[] samples, int channel)
private void GetSpectrumDataHelper(Single[] samples, int channel, FFTWindow window)
public Single[] GetOutputData(int numSamples, int channel)
public void GetOutputData(Single[] samples, int channel)
public Single[] GetSpectrumData(int numSamples, int channel, FFTWindow window)
public void GetSpectrumData(Single[] samples, int channel, FFTWindow window)
}
public UnityEngine.AudioLowPassFilter : Behaviour {
public float cutoffFrequency
public AnimationCurve customCutoffCurve
public float lowpassResonanceQ
public float get_cutoffFrequency()
public void set_cutoffFrequency(float value)
public AnimationCurve get_customCutoffCurve()
public void set_customCutoffCurve(AnimationCurve value)
public float get_lowpassResonanceQ()
public void set_lowpassResonanceQ(float value)
}
public UnityEngine.AudioReverbFilter : Behaviour {
public AudioReverbPreset reverbPreset
public float dryLevel
public float room
public float roomHF
public float roomRolloffFactor
public float decayTime
public float decayHFRatio
public float reflectionsLevel
public float reflectionsDelay
public float reverbLevel
public float reverbDelay
public float diffusion
public float density
public float hfReference
public float roomLF
public float lfReference
public AudioReverbPreset get_reverbPreset()
public void set_reverbPreset(AudioReverbPreset value)
public float get_dryLevel()
public void set_dryLevel(float value)
public float get_room()
public void set_room(float value)
public float get_roomHF()
public void set_roomHF(float value)
public float get_roomRolloffFactor()
public void set_roomRolloffFactor(float value)
public float get_decayTime()
public void set_decayTime(float value)
public float get_decayHFRatio()
public void set_decayHFRatio(float value)
public float get_reflectionsLevel()
public void set_reflectionsLevel(float value)
public float get_reflectionsDelay()
public void set_reflectionsDelay(float value)
public float get_reverbLevel()
public void set_reverbLevel(float value)
public float get_reverbDelay()
public void set_reverbDelay(float value)
public float get_diffusion()
public void set_diffusion(float value)
public float get_density()
public void set_density(float value)
public float get_hfReference()
public void set_hfReference(float value)
public float get_roomLF()
public void set_roomLF(float value)
public float get_lfReference()
public void set_lfReference(float value)
}
public UnityEngine.AudioReverbPreset : Enum {
public int value__
public AudioReverbPreset Off
public AudioReverbPreset Generic
public AudioReverbPreset PaddedCell
public AudioReverbPreset Room
public AudioReverbPreset Bathroom
public AudioReverbPreset Livingroom
public AudioReverbPreset Stoneroom
public AudioReverbPreset Auditorium
public AudioReverbPreset Concerthall
public AudioReverbPreset Cave
public AudioReverbPreset Arena
public AudioReverbPreset Hangar
public AudioReverbPreset CarpetedHallway
public AudioReverbPreset Hallway
public AudioReverbPreset StoneCorridor
public AudioReverbPreset Alley
public AudioReverbPreset Forest
public AudioReverbPreset City
public AudioReverbPreset Mountains
public AudioReverbPreset Quarry
public AudioReverbPreset Plain
public AudioReverbPreset ParkingLot
public AudioReverbPreset SewerPipe
public AudioReverbPreset Underwater
public AudioReverbPreset Drugged
public AudioReverbPreset Dizzy
public AudioReverbPreset Psychotic
public AudioReverbPreset User
}
public UnityEngine.AudioReverbZone : Behaviour {
public float minDistance
public float maxDistance
public AudioReverbPreset reverbPreset
public int room
public int roomHF
public int roomLF
public float decayTime
public float decayHFRatio
public int reflections
public float reflectionsDelay
public int reverb
public float reverbDelay
public float HFReference
public float LFReference
public float roomRolloffFactor
public float diffusion
public float density
public float get_minDistance()
public void set_minDistance(float value)
public float get_maxDistance()
public void set_maxDistance(float value)
public AudioReverbPreset get_reverbPreset()
public void set_reverbPreset(AudioReverbPreset value)
public int get_room()
public void set_room(int value)
public int get_roomHF()
public void set_roomHF(int value)
public int get_roomLF()
public void set_roomLF(int value)
public float get_decayTime()
public void set_decayTime(float value)
public float get_decayHFRatio()
public void set_decayHFRatio(float value)
public int get_reflections()
public void set_reflections(int value)
public float get_reflectionsDelay()
public void set_reflectionsDelay(float value)
public int get_reverb()
public void set_reverb(int value)
public float get_reverbDelay()
public void set_reverbDelay(float value)
public float get_HFReference()
public void set_HFReference(float value)
public float get_LFReference()
public void set_LFReference(float value)
public float get_roomRolloffFactor()
public void set_roomRolloffFactor(float value)
public float get_diffusion()
public void set_diffusion(float value)
public float get_density()
public void set_density(float value)
}
public UnityEngine.AudioRolloffMode : Enum {
public int value__
public AudioRolloffMode Logarithmic
public AudioRolloffMode Linear
public AudioRolloffMode Custom
}
public UnityEngine.AudioSettings : object {
private AudioConfigurationChangeHandler OnAudioConfigurationChanged
public AudioSpeakerMode driverCapabilities
public AudioSpeakerMode speakerMode
internal int profilerCaptureFlags
public double dspTime
public int outputSampleRate
internal bool unityAudioDisabled
public AudioSpeakerMode get_driverCapabilities()
public AudioSpeakerMode get_speakerMode()
public void set_speakerMode(AudioSpeakerMode value)
internal int get_profilerCaptureFlags()
public double get_dspTime()
public int get_outputSampleRate()
public void set_outputSampleRate(int value)
public void GetDSPBufferSize(Int32& bufferLength, Int32& numBuffers)
public void SetDSPBufferSize(int bufferLength, int numBuffers)
public AudioConfiguration GetConfiguration()
private void INTERNAL_CALL_GetConfiguration(AudioConfiguration& value)
public bool Reset(AudioConfiguration config)
private bool INTERNAL_CALL_Reset(AudioConfiguration& config)
public void add_OnAudioConfigurationChanged(AudioConfigurationChangeHandler value)
public void remove_OnAudioConfigurationChanged(AudioConfigurationChangeHandler value)
internal void InvokeOnAudioConfigurationChanged(bool deviceWasChanged)
internal bool get_unityAudioDisabled()
}
public UnityEngine.AudioSource : Behaviour {
public float volume
public float pitch
public float time
public int timeSamples
public AudioClip clip
public AudioMixerGroup outputAudioMixerGroup
public bool isPlaying
public bool isVirtual
public bool loop
public bool ignoreListenerVolume
public bool playOnAwake
public bool ignoreListenerPause
public AudioVelocityUpdateMode velocityUpdateMode
public float panStereo
public float spatialBlend
public bool spatialize
public bool spatializePostEffects
public float reverbZoneMix
public bool bypassEffects
public bool bypassListenerEffects
public bool bypassReverbZones
public float dopplerLevel
public float spread
public int priority
public bool mute
public float minDistance
public float maxDistance
public AudioRolloffMode rolloffMode
public float minVolume
public float maxVolume
public float rolloffFactor
public float get_volume()
public void set_volume(float value)
public float get_pitch()
public void set_pitch(float value)
public float get_time()
public void set_time(float value)
public int get_timeSamples()
public void set_timeSamples(int value)
public AudioClip get_clip()
public void set_clip(AudioClip value)
public AudioMixerGroup get_outputAudioMixerGroup()
public void set_outputAudioMixerGroup(AudioMixerGroup value)
public void Play(ulong delay)
public void Play()
public void PlayDelayed(float delay)
public void PlayScheduled(double time)
public void SetScheduledStartTime(double time)
public void SetScheduledEndTime(double time)
public void Stop()
public void Pause()
private void INTERNAL_CALL_Pause(AudioSource self)
public void UnPause()
private void INTERNAL_CALL_UnPause(AudioSource self)
public bool get_isPlaying()
public bool get_isVirtual()
public void PlayOneShot(AudioClip clip, float volumeScale)
public void PlayOneShot(AudioClip clip)
public void PlayClipAtPoint(AudioClip clip, Vector3 position)
public void PlayClipAtPoint(AudioClip clip, Vector3 position, float volume)
public bool get_loop()
public void set_loop(bool value)
public bool get_ignoreListenerVolume()
public void set_ignoreListenerVolume(bool value)
public bool get_playOnAwake()
public void set_playOnAwake(bool value)
public bool get_ignoreListenerPause()
public void set_ignoreListenerPause(bool value)
public AudioVelocityUpdateMode get_velocityUpdateMode()
public void set_velocityUpdateMode(AudioVelocityUpdateMode value)
public float get_panStereo()
public void set_panStereo(float value)
public float get_spatialBlend()
public void set_spatialBlend(float value)
public bool get_spatialize()
public void set_spatialize(bool value)
public bool get_spatializePostEffects()
public void set_spatializePostEffects(bool value)
public void SetCustomCurve(AudioSourceCurveType type, AnimationCurve curve)
public AnimationCurve GetCustomCurve(AudioSourceCurveType type)
public float get_reverbZoneMix()
public void set_reverbZoneMix(float value)
public bool get_bypassEffects()
public void set_bypassEffects(bool value)
public bool get_bypassListenerEffects()
public void set_bypassListenerEffects(bool value)
public bool get_bypassReverbZones()
public void set_bypassReverbZones(bool value)
public float get_dopplerLevel()
public void set_dopplerLevel(float value)
public float get_spread()
public void set_spread(float value)
public int get_priority()
public void set_priority(int value)
public bool get_mute()
public void set_mute(bool value)
public float get_minDistance()
public void set_minDistance(float value)
public float get_maxDistance()
public void set_maxDistance(float value)
public AudioRolloffMode get_rolloffMode()
public void set_rolloffMode(AudioRolloffMode value)
private void GetOutputDataHelper(Single[] samples, int channel)
public Single[] GetOutputData(int numSamples, int channel)
public void GetOutputData(Single[] samples, int channel)
private void GetSpectrumDataHelper(Single[] samples, int channel, FFTWindow window)
public Single[] GetSpectrumData(int numSamples, int channel, FFTWindow window)
public void GetSpectrumData(Single[] samples, int channel, FFTWindow window)
public float get_minVolume()
public void set_minVolume(float value)
public float get_maxVolume()
public void set_maxVolume(float value)
public float get_rolloffFactor()
public void set_rolloffFactor(float value)
public bool SetSpatializerFloat(int index, float value)
public bool GetSpatializerFloat(int index, Single& value)
public bool SetAmbisonicDecoderFloat(int index, float value)
public bool GetAmbisonicDecoderFloat(int index, Single& value)
}
public UnityEngine.AudioSourceCurveType : Enum {
public int value__
public AudioSourceCurveType CustomRolloff
public AudioSourceCurveType SpatialBlend
public AudioSourceCurveType ReverbZoneMix
public AudioSourceCurveType Spread
}
public UnityEngine.AudioSpeakerMode : Enum {
public int value__
public AudioSpeakerMode Raw
public AudioSpeakerMode Mono
public AudioSpeakerMode Stereo
public AudioSpeakerMode Quad
public AudioSpeakerMode Surround
public AudioSpeakerMode Mode5point1
public AudioSpeakerMode Mode7point1
public AudioSpeakerMode Prologic
}
public UnityEngine.AudioType : Enum {
public int value__
public AudioType UNKNOWN
public AudioType ACC
public AudioType AIFF
public AudioType IT
public AudioType MOD
public AudioType MPEG
public AudioType OGGVORBIS
public AudioType S3M
public AudioType WAV
public AudioType XM
public AudioType XMA
public AudioType VAG
public AudioType AUDIOQUEUE
}
public UnityEngine.AudioVelocityUpdateMode : Enum {
public int value__
public AudioVelocityUpdateMode Auto
public AudioVelocityUpdateMode Fixed
public AudioVelocityUpdateMode Dynamic
}
public UnityEngine.Avatar : Object {
public bool isValid
public bool isHuman
public bool get_isValid()
public bool get_isHuman()
internal void SetMuscleMinMax(int muscleId, float min, float max)
internal void SetParameter(int parameterId, float value)
internal float GetAxisLength(int humanId)
internal Quaternion GetPreRotation(int humanId)
private void INTERNAL_CALL_GetPreRotation(Avatar self, int humanId, Quaternion& value)
internal Quaternion GetPostRotation(int humanId)
private void INTERNAL_CALL_GetPostRotation(Avatar self, int humanId, Quaternion& value)
internal Quaternion GetZYPostQ(int humanId, Quaternion parentQ, Quaternion q)
private void INTERNAL_CALL_GetZYPostQ(Avatar self, int humanId, Quaternion& parentQ, Quaternion& q, Quaternion& value)
internal Quaternion GetZYRoll(int humanId, Vector3 uvw)
private void INTERNAL_CALL_GetZYRoll(Avatar self, int humanId, Vector3& uvw, Quaternion& value)
internal Vector3 GetLimitSign(int humanId)
private void INTERNAL_CALL_GetLimitSign(Avatar self, int humanId, Vector3& value)
}
public UnityEngine.AvatarBuilder : object {
public Avatar BuildHumanAvatar(GameObject go, HumanDescription humanDescription)
private Avatar BuildHumanAvatarMono(GameObject go, HumanDescription monoHumanDescription)
private Avatar INTERNAL_CALL_BuildHumanAvatarMono(GameObject go, HumanDescription& monoHumanDescription)
public Avatar BuildGenericAvatar(GameObject go, string rootMotionTransformName)
}
public UnityEngine.AvatarIKGoal : Enum {
public int value__
public AvatarIKGoal LeftFoot
public AvatarIKGoal RightFoot
public AvatarIKGoal LeftHand
public AvatarIKGoal RightHand
}
public UnityEngine.AvatarIKHint : Enum {
public int value__
public AvatarIKHint LeftKnee
public AvatarIKHint RightKnee
public AvatarIKHint LeftElbow
public AvatarIKHint RightElbow
}
public UnityEngine.AvatarMask : Object {
private int humanoidBodyPartCount
public int transformCount
internal bool hasFeetIK
private void Internal_CreateAvatarMask(AvatarMask mono)
private int get_humanoidBodyPartCount()
public bool GetHumanoidBodyPartActive(AvatarMaskBodyPart index)
public void SetHumanoidBodyPartActive(AvatarMaskBodyPart index, bool value)
public int get_transformCount()
public void set_transformCount(int value)
public void AddTransformPath(Transform transform)
public void AddTransformPath(Transform transform, bool recursive)
private void Internal_AddTransformPath(Transform transform, bool recursive)
public void RemoveTransformPath(Transform transform)
public void RemoveTransformPath(Transform transform, bool recursive)
private void Internal_RemoveTransformPath(Transform transform, bool recursive)
public string GetTransformPath(int index)
public void SetTransformPath(int index, string path)
public bool GetTransformActive(int index)
public void SetTransformActive(int index, bool value)
internal bool get_hasFeetIK()
internal void Copy(AvatarMask other)
}
public UnityEngine.AvatarMaskBodyPart : Enum {
public int value__
public AvatarMaskBodyPart Root
public AvatarMaskBodyPart Body
public AvatarMaskBodyPart Head
public AvatarMaskBodyPart LeftLeg
public AvatarMaskBodyPart RightLeg
public AvatarMaskBodyPart LeftArm
public AvatarMaskBodyPart RightArm
public AvatarMaskBodyPart LeftFingers
public AvatarMaskBodyPart RightFingers
public AvatarMaskBodyPart LeftFootIK
public AvatarMaskBodyPart RightFootIK
public AvatarMaskBodyPart LeftHandIK
public AvatarMaskBodyPart RightHandIK
public AvatarMaskBodyPart LastBodyPart
}
public UnityEngine.AvatarTarget : Enum {
public int value__
public AvatarTarget Root
public AvatarTarget Body
public AvatarTarget LeftFoot
public AvatarTarget RightFoot
public AvatarTarget LeftHand
public AvatarTarget RightHand
}
public UnityEngine.BatteryStatus : Enum {
public int value__
public BatteryStatus Unknown
public BatteryStatus Charging
public BatteryStatus Discharging
public BatteryStatus NotCharging
public BatteryStatus Full
}
public UnityEngine.Behaviour : Component {
public bool enabled
public bool isActiveAndEnabled
public bool get_enabled()
public void set_enabled(bool value)
public bool get_isActiveAndEnabled()
}
public UnityEngine.BillboardAsset : Object {
public float width
public float height
public float bottom
public int imageCount
public int vertexCount
public int indexCount
public Material material
private void Internal_Create(BillboardAsset obj)
public float get_width()
public void set_width(float value)
public float get_height()
public void set_height(float value)
public float get_bottom()
public void set_bottom(float value)
public int get_imageCount()
public int get_vertexCount()
public int get_indexCount()
public Material get_material()
public void set_material(Material value)
public void GetImageTexCoords(List`1<Vector4> imageTexCoords)
public Vector4[] GetImageTexCoords()
internal void GetImageTexCoordsInternal(object list)
public void SetImageTexCoords(List`1<Vector4> imageTexCoords)
public void SetImageTexCoords(Vector4[] imageTexCoords)
internal void SetImageTexCoordsInternalList(object list)
public void GetVertices(List`1<Vector2> vertices)
public Vector2[] GetVertices()
internal void GetVerticesInternal(object list)
public void SetVertices(List`1<Vector2> vertices)
public void SetVertices(Vector2[] vertices)
internal void SetVerticesInternalList(object list)
public void GetIndices(List`1<ushort> indices)
public UInt16[] GetIndices()
internal void GetIndicesInternal(object list)
public void SetIndices(List`1<ushort> indices)
public void SetIndices(UInt16[] indices)
internal void SetIndicesInternalList(object list)
internal void MakeMaterialProperties(MaterialPropertyBlock properties, Camera camera)
}
public UnityEngine.BillboardRenderer : Renderer {
public BillboardAsset billboard
public BillboardAsset get_billboard()
public void set_billboard(BillboardAsset value)
}
internal UnityEngine.Bindings.CodegenOptions : Enum {
public int value__
public CodegenOptions Auto
public CodegenOptions Custom
public CodegenOptions Force
}
internal UnityEngine.Bindings.FreeFunctionAttribute : NativeMethodAttribute {
public void .ctor(string name)
public void .ctor(string name, bool isThreadSafe)
}
internal UnityEngine.Bindings.IBindingsGenerateMarshallingTypeAttribute {
public CodegenOptions CodegenOptions
public CodegenOptions get_CodegenOptions()
public void set_CodegenOptions(CodegenOptions value)
}
internal UnityEngine.Bindings.IBindingsHeaderProviderAttribute {
public string Header
public string get_Header()
public void set_Header(string value)
}
internal UnityEngine.Bindings.IBindingsIsFreeFunctionProviderAttribute {
public bool IsFreeFunction
public bool HasExplicitThis
public bool get_IsFreeFunction()
public void set_IsFreeFunction(bool value)
public bool get_HasExplicitThis()
public void set_HasExplicitThis(bool value)
}
internal UnityEngine.Bindings.IBindingsIsThreadSafeProviderAttribute {
public bool IsThreadSafe
public bool get_IsThreadSafe()
public void set_IsThreadSafe(bool value)
}
internal UnityEngine.Bindings.IBindingsNameProviderAttribute {
public string Name
public string get_Name()
public void set_Name(string value)
}
internal UnityEngine.Bindings.IBindingsThrowsProviderAttribute {
public bool ThrowsException
public bool get_ThrowsException()
public void set_ThrowsException(bool value)
}
internal UnityEngine.Bindings.NativeConditionalAttribute : Attribute {
private string <Condition>k__BackingField
private bool <Enabled>k__BackingField
public string Condition
public bool Enabled
public void .ctor(string condition)
public void .ctor(bool enabled)
public void .ctor(string condition, bool enabled)
public string get_Condition()
public void set_Condition(string value)
public bool get_Enabled()
public void set_Enabled(bool value)
}
internal UnityEngine.Bindings.NativeHeaderAttribute : Attribute {
private string <Header>k__BackingField
public string Header
public void .ctor(string header)
public string get_Header()
public void set_Header(string value)
}
internal UnityEngine.Bindings.NativeMethodAttribute : Attribute {
private string <Name>k__BackingField
private bool <IsThreadSafe>k__BackingField
private bool <IsFreeFunction>k__BackingField
private bool <ThrowsException>k__BackingField
private bool <HasExplicitThis>k__BackingField
public string Name
public bool IsThreadSafe
public bool IsFreeFunction
public bool ThrowsException
public bool HasExplicitThis
public void .ctor(string name)
public void .ctor(string name, bool isFreeFunction)
public void .ctor(string name, bool isFreeFunction, bool isThreadSafe)
public void .ctor(string name, bool isFreeFunction, bool isThreadSafe, bool throws)
public string get_Name()
public void set_Name(string value)
public bool get_IsThreadSafe()
public void set_IsThreadSafe(bool value)
public bool get_IsFreeFunction()
public void set_IsFreeFunction(bool value)
public bool get_ThrowsException()
public void set_ThrowsException(bool value)
public bool get_HasExplicitThis()
public void set_HasExplicitThis(bool value)
}
internal UnityEngine.Bindings.NativeNameAttribute : Attribute {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
public void set_Name(string value)
}
internal UnityEngine.Bindings.NativePropertyAttribute : NativeMethodAttribute {
public void .ctor(string name)
public void .ctor(string name, bool isFreeFunction)
public void .ctor(string name, bool isFreeFunction, bool isThreadSafe)
}
internal UnityEngine.Bindings.NativeThrowsAttribute : Attribute {
private bool <ThrowsException>k__BackingField
public bool ThrowsException
public void .ctor(bool throwsException)
public bool get_ThrowsException()
public void set_ThrowsException(bool value)
}
internal UnityEngine.Bindings.NativeTypeAttribute : Attribute {
private string <Header>k__BackingField
private string <IntermediateScriptingStructName>k__BackingField
private CodegenOptions <CodegenOptions>k__BackingField
public string Header
public string IntermediateScriptingStructName
public CodegenOptions CodegenOptions
public void .ctor(CodegenOptions codegenOptions)
public void .ctor(string header)
public void .ctor(string header, CodegenOptions codegenOptions)
public void .ctor(CodegenOptions codegenOptions, string intermediateStructName)
public string get_Header()
public void set_Header(string value)
public string get_IntermediateScriptingStructName()
public void set_IntermediateScriptingStructName(string value)
public CodegenOptions get_CodegenOptions()
public void set_CodegenOptions(CodegenOptions value)
}
internal UnityEngine.Bindings.StaticAccessorAttribute : Attribute {
private string <Name>k__BackingField
private bool <Pointer>k__BackingField
public string Name
public bool Pointer
internal void .ctor(string name)
public void .ctor(bool pointer)
public void .ctor(string name, bool pointer)
public string get_Name()
public void set_Name(string value)
public bool get_Pointer()
public void set_Pointer(bool value)
}
public UnityEngine.BitStream : object {
internal IntPtr m_Ptr
public bool isReading
public bool isWriting
private void Serializeb(Int32& value)
private void Serializec(Char& value)
private void Serializes(Int16& value)
private void Serializei(Int32& value)
private void Serializef(Single& value, float maximumDelta)
private void Serializeq(Quaternion& value, float maximumDelta)
private void INTERNAL_CALL_Serializeq(BitStream self, Quaternion& value, float maximumDelta)
private void Serializev(Vector3& value, float maximumDelta)
private void INTERNAL_CALL_Serializev(BitStream self, Vector3& value, float maximumDelta)
private void Serializen(NetworkViewID& viewID)
private void INTERNAL_CALL_Serializen(BitStream self, NetworkViewID& viewID)
public void Serialize(Boolean& value)
public void Serialize(Char& value)
public void Serialize(Int16& value)
public void Serialize(Int32& value)
public void Serialize(Single& value)
public void Serialize(Single& value, float maxDelta)
public void Serialize(Quaternion& value)
public void Serialize(Quaternion& value, float maxDelta)
public void Serialize(Vector3& value)
public void Serialize(Vector3& value, float maxDelta)
public void Serialize(NetworkPlayer& value)
public void Serialize(NetworkViewID& viewID)
public bool get_isReading()
public bool get_isWriting()
private void Serialize(String& value)
}
public UnityEngine.BlendWeights : Enum {
public int value__
public BlendWeights OneBone
public BlendWeights TwoBones
public BlendWeights FourBones
}
internal UnityEngine.BodyDoF : Enum {
public int value__
public BodyDoF SpineFrontBack
public BodyDoF SpineLeftRight
public BodyDoF SpineRollLeftRight
public BodyDoF ChestFrontBack
public BodyDoF ChestLeftRight
public BodyDoF ChestRollLeftRight
public BodyDoF UpperChestFrontBack
public BodyDoF UpperChestLeftRight
public BodyDoF UpperChestRollLeftRight
public BodyDoF LastBodyDoF
}
public UnityEngine.BoneWeight : ValueType {
private float m_Weight0
private float m_Weight1
private float m_Weight2
private float m_Weight3
private int m_BoneIndex0
private int m_BoneIndex1
private int m_BoneIndex2
private int m_BoneIndex3
public float weight0
public float weight1
public float weight2
public float weight3
public int boneIndex0
public int boneIndex1
public int boneIndex2
public int boneIndex3
public float get_weight0()
public void set_weight0(float value)
public float get_weight1()
public void set_weight1(float value)
public float get_weight2()
public void set_weight2(float value)
public float get_weight3()
public void set_weight3(float value)
public int get_boneIndex0()
public void set_boneIndex0(int value)
public int get_boneIndex1()
public void set_boneIndex1(int value)
public int get_boneIndex2()
public void set_boneIndex2(int value)
public int get_boneIndex3()
public void set_boneIndex3(int value)
public int GetHashCode()
public bool Equals(object other)
public bool op_Equality(BoneWeight lhs, BoneWeight rhs)
public bool op_Inequality(BoneWeight lhs, BoneWeight rhs)
}
internal UnityEngine.BootConfigData : object {
private IntPtr m_Ptr
private void .ctor(IntPtr nativeHandle)
public void AddKey(string key)
public void Append(string key, string value)
public void Set(string key, string value)
private BootConfigData Wrap(IntPtr nativeHandle)
private void Append(IntPtr nativeHandle, string key, string val)
private void Set(IntPtr nativeHandle, string key, string val)
}
public UnityEngine.BoundingSphere : ValueType {
public Vector3 position
public float radius
public void .ctor(Vector3 pos, float rad)
public void .ctor(Vector4 packedSphere)
}
public UnityEngine.Bounds : ValueType {
private Vector3 m_Center
private Vector3 m_Extents
public Vector3 center
public Vector3 size
public Vector3 extents
public Vector3 min
public Vector3 max
public void .ctor(Vector3 center, Vector3 size)
private bool Internal_Contains(Bounds m, Vector3 point)
private bool INTERNAL_CALL_Internal_Contains(Bounds& m, Vector3& point)
public bool Contains(Vector3 point)
private float Internal_SqrDistance(Bounds m, Vector3 point)
private float INTERNAL_CALL_Internal_SqrDistance(Bounds& m, Vector3& point)
public float SqrDistance(Vector3 point)
private bool Internal_IntersectRay(Ray& ray, Bounds& bounds, Single& distance)
private bool INTERNAL_CALL_Internal_IntersectRay(Ray& ray, Bounds& bounds, Single& distance)
public bool IntersectRay(Ray ray)
public bool IntersectRay(Ray ray, Single& distance)
private Vector3 Internal_GetClosestPoint(Bounds& bounds, Vector3& point)
private void INTERNAL_CALL_Internal_GetClosestPoint(Bounds& bounds, Vector3& point, Vector3& value)
public Vector3 ClosestPoint(Vector3 point)
public int GetHashCode()
public bool Equals(object other)
public Vector3 get_center()
public void set_center(Vector3 value)
public Vector3 get_size()
public void set_size(Vector3 value)
public Vector3 get_extents()
public void set_extents(Vector3 value)
public Vector3 get_min()
public void set_min(Vector3 value)
public Vector3 get_max()
public void set_max(Vector3 value)
public bool op_Equality(Bounds lhs, Bounds rhs)
public bool op_Inequality(Bounds lhs, Bounds rhs)
public void SetMinMax(Vector3 min, Vector3 max)
public void Encapsulate(Vector3 point)
public void Encapsulate(Bounds bounds)
public void Expand(float amount)
public void Expand(Vector3 amount)
public bool Intersects(Bounds bounds)
public string ToString()
public string ToString(string format)
}
public UnityEngine.BoxCollider : Collider {
public Vector3 center
public Vector3 size
public Vector3 extents
public Vector3 get_center()
public void set_center(Vector3 value)
private void INTERNAL_get_center(Vector3& value)
private void INTERNAL_set_center(Vector3& value)
public Vector3 get_size()
public void set_size(Vector3 value)
private void INTERNAL_get_size(Vector3& value)
private void INTERNAL_set_size(Vector3& value)
public Vector3 get_extents()
public void set_extents(Vector3 value)
}
public UnityEngine.BoxCollider2D : Collider2D {
public Vector2 size
public float edgeRadius
public bool autoTiling
public Vector2 get_size()
public void set_size(Vector2 value)
private void INTERNAL_get_size(Vector2& value)
private void INTERNAL_set_size(Vector2& value)
public float get_edgeRadius()
public void set_edgeRadius(float value)
public bool get_autoTiling()
public void set_autoTiling(bool value)
}
public UnityEngine.BuoyancyEffector2D : Effector2D {
public float surfaceLevel
public float density
public float linearDrag
public float angularDrag
public float flowAngle
public float flowMagnitude
public float flowVariation
public float get_surfaceLevel()
public void set_surfaceLevel(float value)
public float get_density()
public void set_density(float value)
public float get_linearDrag()
public void set_linearDrag(float value)
public float get_angularDrag()
public void set_angularDrag(float value)
public float get_flowAngle()
public void set_flowAngle(float value)
public float get_flowMagnitude()
public void set_flowMagnitude(float value)
public float get_flowVariation()
public void set_flowVariation(float value)
}
public UnityEngine.Cache : ValueType {
private int m_Handle
internal int handle
public bool valid
public bool readOnly
public string path
public int index
public long spaceFree
public long maximumAvailableStorageSpace
public long spaceOccupied
public int expirationDelay
public bool ready
private bool IsValidInternal(int handle)
private bool IsReadonlyInternal(int handle)
private string GetPathInternal(int handle)
private int GetIndexInternal(int handle)
private long GetSpaceFreeInternal(int handle)
private long GetMaximumDiskSpaceAvailableInternal(int handle)
private void SetMaximumDiskSpaceAvailableInternal(int handle, long value)
private long GetCachingDiskSpaceUsedInternal(int handle)
private int GetExpirationDelay(int handle)
private void SetExpirationDelay(int handle, int expiration)
private bool IsReadyInternal(int handle)
private bool ClearCacheInternal(int handle)
private bool ClearCacheExpirationInternal(int handle, int expiration)
internal int get_handle()
public bool get_valid()
public bool get_readOnly()
public string get_path()
public int get_index()
public long get_spaceFree()
public long get_maximumAvailableStorageSpace()
public void set_maximumAvailableStorageSpace(long value)
public long get_spaceOccupied()
public int get_expirationDelay()
public void set_expirationDelay(int value)
public bool get_ready()
public bool ClearCache()
public bool ClearCache(int expiration)
public bool op_Equality(Cache lhs, Cache rhs)
public bool op_Inequality(Cache lhs, Cache rhs)
public int GetHashCode()
public bool Equals(object other)
}
public UnityEngine.CachedAssetBundle : ValueType {
private string m_Name
private Hash128 m_Hash
public string name
public Hash128 hash
public void .ctor(string name, Hash128 hash)
public string get_name()
public void set_name(string value)
public Hash128 get_hash()
public void set_hash(Hash128 value)
}
public UnityEngine.CacheIndex : ValueType {
public string name
public int bytesUsed
public int expires
}
public UnityEngine.Caching : object {
public CacheIndex[] index
public long spaceFree
public long maximumAvailableDiskSpace
public long spaceOccupied
public int spaceAvailable
public int spaceUsed
public int expirationDelay
public bool compressionEnabled
public bool ready
public int cacheCount
public Cache defaultCache
public Cache currentCacheForWriting
public bool enabled
public bool ClearCache()
public bool ClearCache(int expiration)
private bool ClearCacheExpiration(int expiration)
public int GetVersionFromCache(string url)
public bool ClearCachedVersion(string assetBundleName, Hash128 hash)
private bool INTERNAL_CALL_ClearCachedVersion(string assetBundleName, Hash128& hash)
public bool ClearOtherCachedVersions(string assetBundleName, Hash128 hash)
private bool INTERNAL_CALL_ClearOtherCachedVersions(string assetBundleName, Hash128& hash)
public bool ClearAllCachedVersions(string assetBundleName)
public void GetCachedVersions(string assetBundleName, List`1<Hash128> outCachedVersions)
internal Hash128[] GetCachedVersions(string assetBundleName)
internal void GetCachedVersionsInternal(string assetBundleName, object cachedVersions)
public bool IsVersionCached(string url, int version)
public bool IsVersionCached(string url, Hash128 hash)
public bool IsVersionCached(CachedAssetBundle cachedBundle)
internal bool IsVersionCached(string url, string name, Hash128 hash)
private bool INTERNAL_CALL_IsVersionCached(string url, string name, Hash128& hash)
public bool MarkAsUsed(string url, int version)
public bool MarkAsUsed(string url, Hash128 hash)
public bool MarkAsUsed(CachedAssetBundle cachedBundle)
internal bool MarkAsUsed(string url, string name, Hash128 hash)
private bool INTERNAL_CALL_MarkAsUsed(string url, string name, Hash128& hash)
public CacheIndex[] get_index()
public long get_spaceFree()
public long get_maximumAvailableDiskSpace()
public void set_maximumAvailableDiskSpace(long value)
public long get_spaceOccupied()
public int get_spaceAvailable()
public int get_spaceUsed()
public int get_expirationDelay()
public void set_expirationDelay(int value)
public bool get_compressionEnabled()
public void set_compressionEnabled(bool value)
public bool get_ready()
public Cache AddCache(string cachePath)
private Cache AddCache_Internal(string cachePath, bool isReadonly)
private void INTERNAL_CALL_AddCache_Internal(string cachePath, bool isReadonly, Cache& value)
public Cache GetCacheAt(int cacheIndex)
private void INTERNAL_CALL_GetCacheAt(int cacheIndex, Cache& value)
public Cache GetCacheByPath(string cachePath)
private void INTERNAL_CALL_GetCacheByPath(string cachePath, Cache& value)
public void GetAllCachePaths(List`1<string> cachePaths)
public bool RemoveCache(Cache cache)
private bool INTERNAL_CALL_RemoveCache(Cache& cache)
public void MoveCacheBefore(Cache src, Cache dst)
private void INTERNAL_CALL_MoveCacheBefore(Cache& src, Cache& dst)
public void MoveCacheAfter(Cache src, Cache dst)
private void INTERNAL_CALL_MoveCacheAfter(Cache& src, Cache& dst)
public int get_cacheCount()
public Cache get_defaultCache()
private void INTERNAL_get_defaultCache(Cache& value)
public Cache get_currentCacheForWriting()
public void set_currentCacheForWriting(Cache value)
private void INTERNAL_get_currentCacheForWriting(Cache& value)
private void INTERNAL_set_currentCacheForWriting(Cache& value)
public bool Authorize(string name, string domain, long size, string signature)
public bool Authorize(string name, string domain, long size, int expiration, string signature)
public bool Authorize(string name, string domain, int size, int expiration, string signature)
public bool Authorize(string name, string domain, int size, string signature)
public bool CleanCache()
public bool CleanNamedCache(string name)
public bool DeleteFromCache(string url)
public bool get_enabled()
}
public UnityEngine.Camera : Behaviour {
public CameraCallback onPreCull
public CameraCallback onPreRender
public CameraCallback onPostRender
public float fov
public float near
public float far
public float fieldOfView
public float nearClipPlane
public float farClipPlane
public RenderingPath renderingPath
public RenderingPath actualRenderingPath
public bool allowHDR
public bool hdr
public bool forceIntoRenderTexture
public bool allowMSAA
public float orthographicSize
public bool orthographic
public OpaqueSortMode opaqueSortMode
public TransparencySortMode transparencySortMode
public Vector3 transparencySortAxis
public float depth
public float aspect
public int cullingMask
internal int PreviewCullingLayer
public Scene scene
public int eventMask
public Color backgroundColor
public Rect rect
public Rect pixelRect
public RenderTexture targetTexture
public RenderTexture activeTexture
public int pixelWidth
public int pixelHeight
public Matrix4x4 cameraToWorldMatrix
public Matrix4x4 worldToCameraMatrix
public Matrix4x4 projectionMatrix
public Matrix4x4 nonJitteredProjectionMatrix
public bool useJitteredProjectionMatrixForTransparentRendering
public Vector3 velocity
public CameraClearFlags clearFlags
public bool stereoEnabled
public float stereoSeparation
public float stereoConvergence
public CameraType cameraType
public bool stereoMirrorMode
public StereoTargetEyeMask stereoTargetEye
public bool areVRStereoViewMatricesWithinSingleCullTolerance
public MonoOrStereoscopicEye stereoActiveEye
public int targetDisplay
public Camera main
public Camera current
public Camera[] allCameras
public int allCamerasCount
public bool useOcclusionCulling
public Matrix4x4 cullingMatrix
public Single[] layerCullDistances
public bool layerCullSpherical
public DepthTextureMode depthTextureMode
public bool clearStencilAfterLightingPass
public int commandBufferCount
public float get_fov()
public void set_fov(float value)
public float get_near()
public void set_near(float value)
public float get_far()
public void set_far(float value)
public float get_fieldOfView()
public void set_fieldOfView(float value)
public float get_nearClipPlane()
public void set_nearClipPlane(float value)
public float get_farClipPlane()
public void set_farClipPlane(float value)
public RenderingPath get_renderingPath()
public void set_renderingPath(RenderingPath value)
public RenderingPath get_actualRenderingPath()
public bool get_allowHDR()
public void set_allowHDR(bool value)
public bool get_hdr()
public void set_hdr(bool value)
public bool get_forceIntoRenderTexture()
public void set_forceIntoRenderTexture(bool value)
public bool get_allowMSAA()
public void set_allowMSAA(bool value)
internal String[] GetCameraBufferWarnings()
public float get_orthographicSize()
public void set_orthographicSize(float value)
public bool get_orthographic()
public void set_orthographic(bool value)
public OpaqueSortMode get_opaqueSortMode()
public void set_opaqueSortMode(OpaqueSortMode value)
public TransparencySortMode get_transparencySortMode()
public void set_transparencySortMode(TransparencySortMode value)
public Vector3 get_transparencySortAxis()
public void set_transparencySortAxis(Vector3 value)
private void INTERNAL_get_transparencySortAxis(Vector3& value)
private void INTERNAL_set_transparencySortAxis(Vector3& value)
public float get_depth()
public void set_depth(float value)
public float get_aspect()
public void set_aspect(float value)
public int get_cullingMask()
public void set_cullingMask(int value)
internal int get_PreviewCullingLayer()
public Scene get_scene()
public void set_scene(Scene value)
private void INTERNAL_get_scene(Scene& value)
private void INTERNAL_set_scene(Scene& value)
public int get_eventMask()
public void set_eventMask(int value)
public Color get_backgroundColor()
public void set_backgroundColor(Color value)
private void INTERNAL_get_backgroundColor(Color& value)
private void INTERNAL_set_backgroundColor(Color& value)
public Rect get_rect()
public void set_rect(Rect value)
private void INTERNAL_get_rect(Rect& value)
private void INTERNAL_set_rect(Rect& value)
public Rect get_pixelRect()
public void set_pixelRect(Rect value)
private void INTERNAL_get_pixelRect(Rect& value)
private void INTERNAL_set_pixelRect(Rect& value)
public RenderTexture get_targetTexture()
public void set_targetTexture(RenderTexture value)
public RenderTexture get_activeTexture()
private void SetTargetBuffersImpl(RenderBuffer& color, RenderBuffer& depth)
private void SetTargetBuffersMRTImpl(RenderBuffer[] color, RenderBuffer& depth)
public void SetTargetBuffers(RenderBuffer colorBuffer, RenderBuffer depthBuffer)
public void SetTargetBuffers(RenderBuffer[] colorBuffer, RenderBuffer depthBuffer)
public int get_pixelWidth()
public int get_pixelHeight()
public Matrix4x4 get_cameraToWorldMatrix()
private void INTERNAL_get_cameraToWorldMatrix(Matrix4x4& value)
public Matrix4x4 get_worldToCameraMatrix()
public void set_worldToCameraMatrix(Matrix4x4 value)
private void INTERNAL_get_worldToCameraMatrix(Matrix4x4& value)
private void INTERNAL_set_worldToCameraMatrix(Matrix4x4& value)
public void ResetWorldToCameraMatrix()
private void INTERNAL_CALL_ResetWorldToCameraMatrix(Camera self)
public Matrix4x4 get_projectionMatrix()
public void set_projectionMatrix(Matrix4x4 value)
private void INTERNAL_get_projectionMatrix(Matrix4x4& value)
private void INTERNAL_set_projectionMatrix(Matrix4x4& value)
public Matrix4x4 get_nonJitteredProjectionMatrix()
public void set_nonJitteredProjectionMatrix(Matrix4x4 value)
private void INTERNAL_get_nonJitteredProjectionMatrix(Matrix4x4& value)
private void INTERNAL_set_nonJitteredProjectionMatrix(Matrix4x4& value)
public bool get_useJitteredProjectionMatrixForTransparentRendering()
public void set_useJitteredProjectionMatrixForTransparentRendering(bool value)
public void ResetProjectionMatrix()
private void INTERNAL_CALL_ResetProjectionMatrix(Camera self)
public void ResetAspect()
private void INTERNAL_CALL_ResetAspect(Camera self)
public void ResetFieldOfView()
private void INTERNAL_CALL_ResetFieldOfView(Camera self)
public Vector3 get_velocity()
private void INTERNAL_get_velocity(Vector3& value)
public CameraClearFlags get_clearFlags()
public void set_clearFlags(CameraClearFlags value)
public bool get_stereoEnabled()
public float get_stereoSeparation()
public void set_stereoSeparation(float value)
public float get_stereoConvergence()
public void set_stereoConvergence(float value)
public CameraType get_cameraType()
public void set_cameraType(CameraType value)
public bool get_stereoMirrorMode()
public void set_stereoMirrorMode(bool value)
public Matrix4x4[] GetStereoViewMatrices()
public Matrix4x4 GetStereoViewMatrix(StereoscopicEye eye)
private void INTERNAL_CALL_GetStereoViewMatrix(Camera self, StereoscopicEye eye, Matrix4x4& value)
public StereoTargetEyeMask get_stereoTargetEye()
public void set_stereoTargetEye(StereoTargetEyeMask value)
public bool get_areVRStereoViewMatricesWithinSingleCullTolerance()
public void SetStereoViewMatrices(Matrix4x4 leftMatrix, Matrix4x4 rightMatrix)
private void INTERNAL_CALL_SetStereoViewMatrices(Camera self, Matrix4x4& leftMatrix, Matrix4x4& rightMatrix)
public void SetStereoViewMatrix(StereoscopicEye eye, Matrix4x4 matrix)
private void INTERNAL_CALL_SetStereoViewMatrix(Camera self, StereoscopicEye eye, Matrix4x4& matrix)
public void ResetStereoViewMatrices()
public Matrix4x4[] GetStereoProjectionMatrices()
public Matrix4x4 GetStereoProjectionMatrix(StereoscopicEye eye)
private void INTERNAL_CALL_GetStereoProjectionMatrix(Camera self, StereoscopicEye eye, Matrix4x4& value)
public void SetStereoProjectionMatrix(StereoscopicEye eye, Matrix4x4 matrix)
private void INTERNAL_CALL_SetStereoProjectionMatrix(Camera self, StereoscopicEye eye, Matrix4x4& matrix)
public void SetStereoProjectionMatrices(Matrix4x4 leftMatrix, Matrix4x4 rightMatrix)
private void INTERNAL_CALL_SetStereoProjectionMatrices(Camera self, Matrix4x4& leftMatrix, Matrix4x4& rightMatrix)
public MonoOrStereoscopicEye get_stereoActiveEye()
public void CalculateFrustumCorners(Rect viewport, float z, MonoOrStereoscopicEye eye, Vector3[] outCorners)
private void CalculateFrustumCornersInternal(Rect viewport, float z, MonoOrStereoscopicEye eye, Vector3[] outCorners)
private void INTERNAL_CALL_CalculateFrustumCornersInternal(Camera self, Rect& viewport, float z, MonoOrStereoscopicEye eye, Vector3[] outCorners)
public void ResetStereoProjectionMatrices()
public void ResetTransparencySortSettings()
public int get_targetDisplay()
public void set_targetDisplay(int value)
public Vector3 WorldToScreenPoint(Vector3 position)
private void INTERNAL_CALL_WorldToScreenPoint(Camera self, Vector3& position, Vector3& value)
public Vector3 WorldToViewportPoint(Vector3 position)
private void INTERNAL_CALL_WorldToViewportPoint(Camera self, Vector3& position, Vector3& value)
public Vector3 ViewportToWorldPoint(Vector3 position)
private void INTERNAL_CALL_ViewportToWorldPoint(Camera self, Vector3& position, Vector3& value)
public Vector3 ScreenToWorldPoint(Vector3 position)
private void INTERNAL_CALL_ScreenToWorldPoint(Camera self, Vector3& position, Vector3& value)
public Vector3 ScreenToViewportPoint(Vector3 position)
private void INTERNAL_CALL_ScreenToViewportPoint(Camera self, Vector3& position, Vector3& value)
public Vector3 ViewportToScreenPoint(Vector3 position)
private void INTERNAL_CALL_ViewportToScreenPoint(Camera self, Vector3& position, Vector3& value)
public Ray ViewportPointToRay(Vector3 position)
private void INTERNAL_CALL_ViewportPointToRay(Camera self, Vector3& position, Ray& value)
public Ray ScreenPointToRay(Vector3 position)
private void INTERNAL_CALL_ScreenPointToRay(Camera self, Vector3& position, Ray& value)
public Camera get_main()
public Camera get_current()
public Camera[] get_allCameras()
public int get_allCamerasCount()
public int GetAllCameras(Camera[] cameras)
private void FireOnPreCull(Camera cam)
private void FireOnPreRender(Camera cam)
private void FireOnPostRender(Camera cam)
public void Render()
public void RenderWithShader(Shader shader, string replacementTag)
public void SetReplacementShader(Shader shader, string replacementTag)
public void ResetReplacementShader()
private void INTERNAL_CALL_ResetReplacementShader(Camera self)
public bool get_useOcclusionCulling()
public void set_useOcclusionCulling(bool value)
public Matrix4x4 get_cullingMatrix()
public void set_cullingMatrix(Matrix4x4 value)
private void INTERNAL_get_cullingMatrix(Matrix4x4& value)
private void INTERNAL_set_cullingMatrix(Matrix4x4& value)
public void ResetCullingMatrix()
private void INTERNAL_CALL_ResetCullingMatrix(Camera self)
public void RenderDontRestore()
public void SetupCurrent(Camera cur)
public bool RenderToCubemap(Cubemap cubemap)
public bool RenderToCubemap(Cubemap cubemap, int faceMask)
public bool RenderToCubemap(RenderTexture cubemap)
public bool RenderToCubemap(RenderTexture cubemap, int faceMask)
private bool Internal_RenderToCubemapRT(RenderTexture cubemap, int faceMask)
private bool Internal_RenderToCubemapTexture(Cubemap cubemap, int faceMask)
public Single[] get_layerCullDistances()
public void set_layerCullDistances(Single[] value)
public bool get_layerCullSpherical()
public void set_layerCullSpherical(bool value)
public void CopyFrom(Camera other)
public DepthTextureMode get_depthTextureMode()
public void set_depthTextureMode(DepthTextureMode value)
public bool get_clearStencilAfterLightingPass()
public void set_clearStencilAfterLightingPass(bool value)
internal bool IsFiltered(GameObject go)
public void AddCommandBuffer(CameraEvent evt, CommandBuffer buffer)
public void RemoveCommandBuffer(CameraEvent evt, CommandBuffer buffer)
public void RemoveCommandBuffers(CameraEvent evt)
public void RemoveAllCommandBuffers()
public CommandBuffer[] GetCommandBuffers(CameraEvent evt)
public int get_commandBufferCount()
internal GameObject RaycastTry(Ray ray, float distance, int layerMask)
private GameObject INTERNAL_CALL_RaycastTry(Camera self, Ray& ray, float distance, int layerMask)
internal GameObject RaycastTry2D(Ray ray, float distance, int layerMask)
private GameObject INTERNAL_CALL_RaycastTry2D(Camera self, Ray& ray, float distance, int layerMask)
public Matrix4x4 CalculateObliqueMatrix(Vector4 clipPlane)
private void INTERNAL_CALL_CalculateObliqueMatrix(Camera self, Vector4& clipPlane, Matrix4x4& value)
internal void OnlyUsedForTesting1()
internal void OnlyUsedForTesting2()
}
public UnityEngine.CameraClearFlags : Enum {
public int value__
public CameraClearFlags Skybox
public CameraClearFlags Color
public CameraClearFlags SolidColor
public CameraClearFlags Depth
public CameraClearFlags Nothing
}
public UnityEngine.CameraType : Enum {
public int value__
public CameraType Game
public CameraType SceneView
public CameraType Preview
public CameraType VR
public CameraType Reflection
}
public UnityEngine.Canvas : Behaviour {
private WillRenderCanvases willRenderCanvases
public RenderMode renderMode
public bool isRootCanvas
public Camera worldCamera
public Rect pixelRect
public float scaleFactor
public float referencePixelsPerUnit
public bool overridePixelPerfect
public bool pixelPerfect
public float planeDistance
public int renderOrder
public bool overrideSorting
public int sortingOrder
public int targetDisplay
public int sortingGridNormalizedSize
public float normalizedSortingGridSize
public int sortingLayerID
public int cachedSortingLayerValue
public AdditionalCanvasShaderChannels additionalShaderChannels
public string sortingLayerName
public Canvas rootCanvas
public RenderMode get_renderMode()
public void set_renderMode(RenderMode value)
public bool get_isRootCanvas()
public Camera get_worldCamera()
public void set_worldCamera(Camera value)
public Rect get_pixelRect()
private void INTERNAL_get_pixelRect(Rect& value)
public float get_scaleFactor()
public void set_scaleFactor(float value)
public float get_referencePixelsPerUnit()
public void set_referencePixelsPerUnit(float value)
public bool get_overridePixelPerfect()
public void set_overridePixelPerfect(bool value)
public bool get_pixelPerfect()
public void set_pixelPerfect(bool value)
public float get_planeDistance()
public void set_planeDistance(float value)
public int get_renderOrder()
public bool get_overrideSorting()
public void set_overrideSorting(bool value)
public int get_sortingOrder()
public void set_sortingOrder(int value)
public int get_targetDisplay()
public void set_targetDisplay(int value)
public int get_sortingGridNormalizedSize()
public void set_sortingGridNormalizedSize(int value)
public float get_normalizedSortingGridSize()
public void set_normalizedSortingGridSize(float value)
public int get_sortingLayerID()
public void set_sortingLayerID(int value)
public int get_cachedSortingLayerValue()
public AdditionalCanvasShaderChannels get_additionalShaderChannels()
public void set_additionalShaderChannels(AdditionalCanvasShaderChannels value)
public string get_sortingLayerName()
public void set_sortingLayerName(string value)
public Canvas get_rootCanvas()
public Material GetDefaultCanvasMaterial()
public Material GetETC1SupportedCanvasMaterial()
public Material GetDefaultCanvasTextMaterial()
public void add_willRenderCanvases(WillRenderCanvases value)
public void remove_willRenderCanvases(WillRenderCanvases value)
private void SendWillRenderCanvases()
public void ForceUpdateCanvases()
}
public UnityEngine.CanvasGroup : Component {
public float alpha
public bool interactable
public bool blocksRaycasts
public bool ignoreParentGroups
public float get_alpha()
public void set_alpha(float value)
public bool get_interactable()
public void set_interactable(bool value)
public bool get_blocksRaycasts()
public void set_blocksRaycasts(bool value)
public bool get_ignoreParentGroups()
public void set_ignoreParentGroups(bool value)
public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
}
public UnityEngine.CanvasRenderer : Component {
public bool isMask
public bool hasRectClipping
public bool hasPopInstruction
public int materialCount
public int popMaterialCount
public int relativeDepth
public bool cull
public int absoluteDepth
public bool hasMoved
public void SetColor(Color color)
private void INTERNAL_CALL_SetColor(CanvasRenderer self, Color& color)
public Color GetColor()
private void INTERNAL_CALL_GetColor(CanvasRenderer self, Color& value)
public float GetAlpha()
public void SetAlpha(float alpha)
public bool get_isMask()
public void set_isMask(bool value)
public void SetVertices(List`1<UIVertex> vertices)
public void SetVertices(UIVertex[] vertices, int size)
public void EnableRectClipping(Rect rect)
private void INTERNAL_CALL_EnableRectClipping(CanvasRenderer self, Rect& rect)
public void DisableRectClipping()
public bool get_hasRectClipping()
public bool get_hasPopInstruction()
public void set_hasPopInstruction(bool value)
public int get_materialCount()
public void set_materialCount(int value)
public void SetMaterial(Material material, int index)
public void SetMaterial(Material material, Texture texture)
public Material GetMaterial()
public Material GetMaterial(int index)
public int get_popMaterialCount()
public void set_popMaterialCount(int value)
public void SetPopMaterial(Material material, int index)
public Material GetPopMaterial(int index)
public void SetTexture(Texture texture)
public void SetAlphaTexture(Texture texture)
public void SetMesh(Mesh mesh)
public void Clear()
public void SplitUIVertexStreams(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
public void SplitUIVertexStreams(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector2> uv2S, List`1<Vector2> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
private void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents)
private void SplitIndicesStreamsInternal(object verts, object indices)
public void CreateUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
public void CreateUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector2> uv2S, List`1<Vector2> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
private void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices)
public void AddUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents)
public void AddUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector2> uv2S, List`1<Vector2> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents)
public int get_relativeDepth()
public bool get_cull()
public void set_cull(bool value)
public int get_absoluteDepth()
public bool get_hasMoved()
}
public UnityEngine.CapsuleCollider : Collider {
public Vector3 center
public float radius
public float height
public int direction
public Vector3 get_center()
public void set_center(Vector3 value)
private void INTERNAL_get_center(Vector3& value)
private void INTERNAL_set_center(Vector3& value)
public float get_radius()
public void set_radius(float value)
public float get_height()
public void set_height(float value)
public int get_direction()
public void set_direction(int value)
}
public UnityEngine.CapsuleCollider2D : Collider2D {
public Vector2 size
public CapsuleDirection2D direction
public Vector2 get_size()
public void set_size(Vector2 value)
private void INTERNAL_get_size(Vector2& value)
private void INTERNAL_set_size(Vector2& value)
public CapsuleDirection2D get_direction()
public void set_direction(CapsuleDirection2D value)
}
public UnityEngine.CapsuleDirection2D : Enum {
public int value__
public CapsuleDirection2D Vertical
public CapsuleDirection2D Horizontal
}
internal UnityEngine.CastHelper`1 : ValueType {
public T t
public IntPtr onePointerFurtherThanT
}
public UnityEngine.CharacterController : Collider {
public bool isGrounded
public Vector3 velocity
public CollisionFlags collisionFlags
public float radius
public float height
public Vector3 center
public float slopeLimit
public float stepOffset
public float skinWidth
public float minMoveDistance
public bool detectCollisions
public bool enableOverlapRecovery
public bool SimpleMove(Vector3 speed)
private bool INTERNAL_CALL_SimpleMove(CharacterController self, Vector3& speed)
public CollisionFlags Move(Vector3 motion)
private CollisionFlags INTERNAL_CALL_Move(CharacterController self, Vector3& motion)
public bool get_isGrounded()
public Vector3 get_velocity()
private void INTERNAL_get_velocity(Vector3& value)
public CollisionFlags get_collisionFlags()
public float get_radius()
public void set_radius(float value)
public float get_height()
public void set_height(float value)
public Vector3 get_center()
public void set_center(Vector3 value)
private void INTERNAL_get_center(Vector3& value)
private void INTERNAL_set_center(Vector3& value)
public float get_slopeLimit()
public void set_slopeLimit(float value)
public float get_stepOffset()
public void set_stepOffset(float value)
public float get_skinWidth()
public void set_skinWidth(float value)
public float get_minMoveDistance()
public void set_minMoveDistance(float value)
public bool get_detectCollisions()
public void set_detectCollisions(bool value)
public bool get_enableOverlapRecovery()
public void set_enableOverlapRecovery(bool value)
}
public UnityEngine.CharacterInfo : ValueType {
public int index
public Rect uv
public Rect vert
public float width
public int size
public FontStyle style
public bool flipped
public int advance
public int glyphWidth
public int glyphHeight
public int bearing
public int minY
public int maxY
public int minX
public int maxX
internal Vector2 uvBottomLeftUnFlipped
internal Vector2 uvBottomRightUnFlipped
internal Vector2 uvTopRightUnFlipped
internal Vector2 uvTopLeftUnFlipped
public Vector2 uvBottomLeft
public Vector2 uvBottomRight
public Vector2 uvTopRight
public Vector2 uvTopLeft
public int get_advance()
public void set_advance(int value)
public int get_glyphWidth()
public void set_glyphWidth(int value)
public int get_glyphHeight()
public void set_glyphHeight(int value)
public int get_bearing()
public void set_bearing(int value)
public int get_minY()
public void set_minY(int value)
public int get_maxY()
public void set_maxY(int value)
public int get_minX()
public void set_minX(int value)
public int get_maxX()
public void set_maxX(int value)
internal Vector2 get_uvBottomLeftUnFlipped()
internal void set_uvBottomLeftUnFlipped(Vector2 value)
internal Vector2 get_uvBottomRightUnFlipped()
internal void set_uvBottomRightUnFlipped(Vector2 value)
internal Vector2 get_uvTopRightUnFlipped()
internal void set_uvTopRightUnFlipped(Vector2 value)
internal Vector2 get_uvTopLeftUnFlipped()
internal void set_uvTopLeftUnFlipped(Vector2 value)
public Vector2 get_uvBottomLeft()
public void set_uvBottomLeft(Vector2 value)
public Vector2 get_uvBottomRight()
public void set_uvBottomRight(Vector2 value)
public Vector2 get_uvTopRight()
public void set_uvTopRight(Vector2 value)
public Vector2 get_uvTopLeft()
public void set_uvTopLeft(Vector2 value)
}
public UnityEngine.CharacterJoint : Joint {
public Quaternion targetRotation
public Vector3 targetAngularVelocity
public JointDrive rotationDrive
public Vector3 swingAxis
public SoftJointLimitSpring twistLimitSpring
public SoftJointLimitSpring swingLimitSpring
public SoftJointLimit lowTwistLimit
public SoftJointLimit highTwistLimit
public SoftJointLimit swing1Limit
public SoftJointLimit swing2Limit
public bool enableProjection
public float projectionDistance
public float projectionAngle
public Vector3 get_swingAxis()
public void set_swingAxis(Vector3 value)
private void INTERNAL_get_swingAxis(Vector3& value)
private void INTERNAL_set_swingAxis(Vector3& value)
public SoftJointLimitSpring get_twistLimitSpring()
public void set_twistLimitSpring(SoftJointLimitSpring value)
private void INTERNAL_get_twistLimitSpring(SoftJointLimitSpring& value)
private void INTERNAL_set_twistLimitSpring(SoftJointLimitSpring& value)
public SoftJointLimitSpring get_swingLimitSpring()
public void set_swingLimitSpring(SoftJointLimitSpring value)
private void INTERNAL_get_swingLimitSpring(SoftJointLimitSpring& value)
private void INTERNAL_set_swingLimitSpring(SoftJointLimitSpring& value)
public SoftJointLimit get_lowTwistLimit()
public void set_lowTwistLimit(SoftJointLimit value)
private void INTERNAL_get_lowTwistLimit(SoftJointLimit& value)
private void INTERNAL_set_lowTwistLimit(SoftJointLimit& value)
public SoftJointLimit get_highTwistLimit()
public void set_highTwistLimit(SoftJointLimit value)
private void INTERNAL_get_highTwistLimit(SoftJointLimit& value)
private void INTERNAL_set_highTwistLimit(SoftJointLimit& value)
public SoftJointLimit get_swing1Limit()
public void set_swing1Limit(SoftJointLimit value)
private void INTERNAL_get_swing1Limit(SoftJointLimit& value)
private void INTERNAL_set_swing1Limit(SoftJointLimit& value)
public SoftJointLimit get_swing2Limit()
public void set_swing2Limit(SoftJointLimit value)
private void INTERNAL_get_swing2Limit(SoftJointLimit& value)
private void INTERNAL_set_swing2Limit(SoftJointLimit& value)
public bool get_enableProjection()
public void set_enableProjection(bool value)
public float get_projectionDistance()
public void set_projectionDistance(float value)
public float get_projectionAngle()
public void set_projectionAngle(float value)
}
public UnityEngine.CircleCollider2D : Collider2D {
public float radius
public float get_radius()
public void set_radius(float value)
}
internal UnityEngine.ClassLibraryInitializer : object {
private void Init()
}
public UnityEngine.Cloth : Component {
public float sleepThreshold
public float bendingStiffness
public float stretchingStiffness
public float damping
public Vector3 externalAcceleration
public Vector3 randomAcceleration
public bool useGravity
public bool selfCollision
public bool enabled
public Vector3[] vertices
public Vector3[] normals
public float friction
public float collisionMassScale
public float useContinuousCollision
public float useVirtualParticles
public ClothSkinningCoefficient[] coefficients
public float worldVelocityScale
public float worldAccelerationScale
public bool solverFrequency
public CapsuleCollider[] capsuleColliders
public ClothSphereColliderPair[] sphereColliders
public float get_sleepThreshold()
public void set_sleepThreshold(float value)
public float get_bendingStiffness()
public void set_bendingStiffness(float value)
public float get_stretchingStiffness()
public void set_stretchingStiffness(float value)
public float get_damping()
public void set_damping(float value)
public Vector3 get_externalAcceleration()
public void set_externalAcceleration(Vector3 value)
private void INTERNAL_get_externalAcceleration(Vector3& value)
private void INTERNAL_set_externalAcceleration(Vector3& value)
public Vector3 get_randomAcceleration()
public void set_randomAcceleration(Vector3 value)
private void INTERNAL_get_randomAcceleration(Vector3& value)
private void INTERNAL_set_randomAcceleration(Vector3& value)
public bool get_useGravity()
public void set_useGravity(bool value)
public bool get_selfCollision()
public void set_selfCollision(bool value)
public bool get_enabled()
public void set_enabled(bool value)
public Vector3[] get_vertices()
public Vector3[] get_normals()
public float get_friction()
public void set_friction(float value)
public float get_collisionMassScale()
public void set_collisionMassScale(float value)
public float get_useContinuousCollision()
public void set_useContinuousCollision(float value)
public float get_useVirtualParticles()
public void set_useVirtualParticles(float value)
public void ClearTransformMotion()
private void INTERNAL_CALL_ClearTransformMotion(Cloth self)
public ClothSkinningCoefficient[] get_coefficients()
public void set_coefficients(ClothSkinningCoefficient[] value)
public float get_worldVelocityScale()
public void set_worldVelocityScale(float value)
public float get_worldAccelerationScale()
public void set_worldAccelerationScale(float value)
public void SetEnabledFading(bool enabled, float interpolationTime)
public void SetEnabledFading(bool enabled)
public bool get_solverFrequency()
public void set_solverFrequency(bool value)
public CapsuleCollider[] get_capsuleColliders()
public void set_capsuleColliders(CapsuleCollider[] value)
public ClothSphereColliderPair[] get_sphereColliders()
public void set_sphereColliders(ClothSphereColliderPair[] value)
}
public UnityEngine.ClothSkinningCoefficient : ValueType {
public float maxDistance
public float collisionSphereDistance
}
public UnityEngine.ClothSphereColliderPair : ValueType {
private SphereCollider m_First
private SphereCollider m_Second
public SphereCollider first
public SphereCollider second
public void .ctor(SphereCollider a)
public void .ctor(SphereCollider a, SphereCollider b)
public SphereCollider get_first()
public void set_first(SphereCollider value)
public SphereCollider get_second()
public void set_second(SphereCollider value)
}
public UnityEngine.ClusterInput : object {
public float GetAxis(string name)
public bool GetButton(string name)
public Vector3 GetTrackerPosition(string name)
private void INTERNAL_CALL_GetTrackerPosition(string name, Vector3& value)
public Quaternion GetTrackerRotation(string name)
private void INTERNAL_CALL_GetTrackerRotation(string name, Quaternion& value)
public void SetAxis(string name, float value)
public void SetButton(string name, bool value)
public void SetTrackerPosition(string name, Vector3 value)
private void INTERNAL_CALL_SetTrackerPosition(string name, Vector3& value)
public void SetTrackerRotation(string name, Quaternion value)
private void INTERNAL_CALL_SetTrackerRotation(string name, Quaternion& value)
public bool AddInput(string name, string deviceName, string serverUrl, int index, ClusterInputType type)
public bool EditInput(string name, string deviceName, string serverUrl, int index, ClusterInputType type)
public bool CheckConnectionToServer(string name)
}
public UnityEngine.ClusterInputType : Enum {
public int value__
public ClusterInputType Button
public ClusterInputType Axis
public ClusterInputType Tracker
public ClusterInputType CustomProvidedInput
}
public UnityEngine.ClusterNetwork : object {
public bool isMasterOfCluster
public bool isDisconnected
public int nodeIndex
public bool get_isMasterOfCluster()
public bool get_isDisconnected()
public int get_nodeIndex()
public void set_nodeIndex(int value)
}
public UnityEngine.Collections.Allocator : Enum {
public int value__
public Allocator Invalid
public Allocator None
public Allocator Temp
public Allocator TempJob
public Allocator Persistent
}
public UnityEngine.Collections.NativeArray`1 : ValueType {
private IntPtr m_Buffer
private int m_Length
private int m_Stride
private Allocator m_AllocatorLabel
public int Length
public T Item
public void .ctor(int length, Allocator allocMode)
public void .ctor(T[] array, Allocator allocMode)
internal void .ctor(IntPtr dataPointer, int length)
internal void .ctor(IntPtr dataPointer, int length, int stride, AtomicSafetyHandle safety, Allocator allocMode)
private void .ctor(IntPtr dataPointer, int length, Allocator allocMode)
public int get_Length()
public T get_Item(int index)
public void set_Item(int index, T value)
public void Dispose()
public IntPtr GetUnsafeReadBufferPtr()
public IntPtr GetUnsafeWriteBufferPtr()
public void FromArray(T[] array)
public T[] ToArray()
private void FailOutOfRangeError(int index)
private void Allocate(int length, Allocator allocMode, NativeArray`1& outArray)
public IEnumerator`1<T> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
internal UnityEngine.Collections.NativeArrayDebugView`1 : object {
private NativeArray`1<T> array
public T[] Items
public void .ctor(NativeArray`1<T> array)
public T[] get_Items()
}
public UnityEngine.Collider : Component {
public bool enabled
public Rigidbody attachedRigidbody
public bool isTrigger
public float contactOffset
public PhysicMaterial material
public PhysicMaterial sharedMaterial
public Bounds bounds
public bool get_enabled()
public void set_enabled(bool value)
public Rigidbody get_attachedRigidbody()
public bool get_isTrigger()
public void set_isTrigger(bool value)
public float get_contactOffset()
public void set_contactOffset(float value)
public PhysicMaterial get_material()
public void set_material(PhysicMaterial value)
public Vector3 ClosestPointOnBounds(Vector3 position)
private void INTERNAL_CALL_ClosestPointOnBounds(Collider self, Vector3& position, Vector3& value)
public Vector3 ClosestPoint(Vector3 position)
private void INTERNAL_CALL_ClosestPoint(Collider self, Vector3& position, Vector3& value)
public PhysicMaterial get_sharedMaterial()
public void set_sharedMaterial(PhysicMaterial value)
public Bounds get_bounds()
private void INTERNAL_get_bounds(Bounds& value)
private bool Internal_Raycast(Collider col, Ray ray, RaycastHit& hitInfo, float maxDistance)
private bool INTERNAL_CALL_Internal_Raycast(Collider col, Ray& ray, RaycastHit& hitInfo, float maxDistance)
public bool Raycast(Ray ray, RaycastHit& hitInfo, float maxDistance)
}
public UnityEngine.Collider2D : Behaviour {
public float density
public bool isTrigger
public bool usedByEffector
public bool usedByComposite
public CompositeCollider2D composite
public Vector2 offset
public Rigidbody2D attachedRigidbody
public int shapeCount
public Bounds bounds
internal ColliderErrorState2D errorState
internal bool compositeCapable
public PhysicsMaterial2D sharedMaterial
public float friction
public float bounciness
public float get_density()
public void set_density(float value)
public bool get_isTrigger()
public void set_isTrigger(bool value)
public bool get_usedByEffector()
public void set_usedByEffector(bool value)
public bool get_usedByComposite()
public void set_usedByComposite(bool value)
public CompositeCollider2D get_composite()
public Vector2 get_offset()
public void set_offset(Vector2 value)
private void INTERNAL_get_offset(Vector2& value)
private void INTERNAL_set_offset(Vector2& value)
public Rigidbody2D get_attachedRigidbody()
public int get_shapeCount()
public Bounds get_bounds()
private void INTERNAL_get_bounds(Bounds& value)
internal ColliderErrorState2D get_errorState()
internal bool get_compositeCapable()
public PhysicsMaterial2D get_sharedMaterial()
public void set_sharedMaterial(PhysicsMaterial2D value)
public float get_friction()
public float get_bounciness()
public bool IsTouching(Collider2D collider)
public bool IsTouching(Collider2D collider, ContactFilter2D contactFilter)
private bool Internal_IsTouching(Collider2D collider, ContactFilter2D contactFilter)
private bool INTERNAL_CALL_Internal_IsTouching(Collider2D self, Collider2D collider, ContactFilter2D& contactFilter)
public bool IsTouching(ContactFilter2D contactFilter)
private bool INTERNAL_CALL_IsTouching(Collider2D self, ContactFilter2D& contactFilter)
public bool IsTouchingLayers(int layerMask)
public bool IsTouchingLayers()
public bool OverlapPoint(Vector2 point)
private bool INTERNAL_CALL_OverlapPoint(Collider2D self, Vector2& point)
public int OverlapCollider(ContactFilter2D contactFilter, Collider2D[] results)
public int Raycast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Raycast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth)
public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance, int layerMask)
public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance)
public int Raycast(Vector2 direction, RaycastHit2D[] results)
public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth)
private int Internal_Raycast(Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int INTERNAL_CALL_Internal_Raycast(Collider2D self, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance, bool ignoreSiblingColliders)
public int Cast(Vector2 direction, RaycastHit2D[] results, float distance)
public int Cast(Vector2 direction, RaycastHit2D[] results)
public int Cast(Vector2 direction, RaycastHit2D[] results, float distance, bool ignoreSiblingColliders)
private int Internal_Cast(Vector2 direction, ContactFilter2D contactFilter, float distance, bool ignoreSiblingColliders, RaycastHit2D[] results)
private int INTERNAL_CALL_Internal_Cast(Collider2D self, Vector2& direction, ContactFilter2D& contactFilter, float distance, bool ignoreSiblingColliders, RaycastHit2D[] results)
public int GetContacts(ContactPoint2D[] contacts)
public int GetContacts(ContactFilter2D contactFilter, ContactPoint2D[] contacts)
public int GetContacts(Collider2D[] colliders)
public int GetContacts(ContactFilter2D contactFilter, Collider2D[] colliders)
public ColliderDistance2D Distance(Collider2D collider)
}
public UnityEngine.ColliderDistance2D : ValueType {
private Vector2 m_PointA
private Vector2 m_PointB
private Vector2 m_Normal
private float m_Distance
private int m_IsValid
public Vector2 pointA
public Vector2 pointB
public Vector2 normal
public float distance
public bool isOverlapped
public bool isValid
public Vector2 get_pointA()
public void set_pointA(Vector2 value)
public Vector2 get_pointB()
public void set_pointB(Vector2 value)
public Vector2 get_normal()
public float get_distance()
public void set_distance(float value)
public bool get_isOverlapped()
public bool get_isValid()
public void set_isValid(bool value)
}
internal UnityEngine.ColliderErrorState2D : Enum {
public int value__
public ColliderErrorState2D None
public ColliderErrorState2D NoShapes
public ColliderErrorState2D RemovedShapes
}
public UnityEngine.Collision : object {
internal Vector3 m_Impulse
internal Vector3 m_RelativeVelocity
internal Rigidbody m_Rigidbody
internal Collider m_Collider
internal ContactPoint[] m_Contacts
public Vector3 relativeVelocity
public Rigidbody rigidbody
public Collider collider
public Transform transform
public GameObject gameObject
public ContactPoint[] contacts
public Vector3 impulse
public Vector3 impactForceSum
public Vector3 frictionForceSum
public Component other
public Vector3 get_relativeVelocity()
public Rigidbody get_rigidbody()
public Collider get_collider()
public Transform get_transform()
public GameObject get_gameObject()
public ContactPoint[] get_contacts()
public IEnumerator GetEnumerator()
public Vector3 get_impulse()
public Vector3 get_impactForceSum()
public Vector3 get_frictionForceSum()
public Component get_other()
}
public UnityEngine.Collision2D : object {
internal int m_Collider
internal int m_OtherCollider
internal int m_Rigidbody
internal int m_OtherRigidbody
internal ContactPoint2D[] m_Contacts
internal Vector2 m_RelativeVelocity
internal int m_Enabled
public Collider2D collider
public Collider2D otherCollider
public Rigidbody2D rigidbody
public Rigidbody2D otherRigidbody
public Transform transform
public GameObject gameObject
public ContactPoint2D[] contacts
public Vector2 relativeVelocity
public bool enabled
public Collider2D get_collider()
public Collider2D get_otherCollider()
public Rigidbody2D get_rigidbody()
public Rigidbody2D get_otherRigidbody()
public Transform get_transform()
public GameObject get_gameObject()
public ContactPoint2D[] get_contacts()
public Vector2 get_relativeVelocity()
public bool get_enabled()
}
public UnityEngine.CollisionDetectionMode : Enum {
public int value__
public CollisionDetectionMode Discrete
public CollisionDetectionMode Continuous
public CollisionDetectionMode ContinuousDynamic
}
public UnityEngine.CollisionDetectionMode2D : Enum {
public int value__
public CollisionDetectionMode2D None
public CollisionDetectionMode2D Discrete
public CollisionDetectionMode2D Continuous
}
public UnityEngine.CollisionFlags : Enum {
public int value__
public CollisionFlags None
public CollisionFlags Sides
public CollisionFlags Above
public CollisionFlags Below
public CollisionFlags CollidedSides
public CollisionFlags CollidedAbove
public CollisionFlags CollidedBelow
}
public UnityEngine.Color : ValueType {
public float r
public float g
public float b
public float a
public Color red
public Color green
public Color blue
public Color white
public Color black
public Color yellow
public Color cyan
public Color magenta
public Color gray
public Color grey
public Color clear
public float grayscale
public Color linear
public Color gamma
public float maxColorComponent
public float Item
public void .ctor(float r, float g, float b, float a)
public void .ctor(float r, float g, float b)
public string ToString()
public string ToString(string format)
public int GetHashCode()
public bool Equals(object other)
public Color op_Addition(Color a, Color b)
public Color op_Subtraction(Color a, Color b)
public Color op_Multiply(Color a, Color b)
public Color op_Multiply(Color a, float b)
public Color op_Multiply(float b, Color a)
public Color op_Division(Color a, float b)
public bool op_Equality(Color lhs, Color rhs)
public bool op_Inequality(Color lhs, Color rhs)
public Color Lerp(Color a, Color b, float t)
public Color LerpUnclamped(Color a, Color b, float t)
internal Color RGBMultiplied(float multiplier)
internal Color AlphaMultiplied(float multiplier)
internal Color RGBMultiplied(Color multiplier)
public Color get_red()
public Color get_green()
public Color get_blue()
public Color get_white()
public Color get_black()
public Color get_yellow()
public Color get_cyan()
public Color get_magenta()
public Color get_gray()
public Color get_grey()
public Color get_clear()
public float get_grayscale()
public Color get_linear()
public Color get_gamma()
public float get_maxColorComponent()
public Vector4 op_Implicit(Color c)
public Color op_Implicit(Vector4 v)
public float get_Item(int index)
public void set_Item(int index, float value)
public void RGBToHSV(Color rgbColor, Single& H, Single& S, Single& V)
private void RGBToHSVHelper(float offset, float dominantcolor, float colorone, float colortwo, Single& H, Single& S, Single& V)
public Color HSVToRGB(float H, float S, float V)
public Color HSVToRGB(float H, float S, float V, bool hdr)
}
public UnityEngine.Color32 : ValueType {
public byte r
public byte g
public byte b
public byte a
public void .ctor(byte r, byte g, byte b, byte a)
public Color32 op_Implicit(Color c)
public Color op_Implicit(Color32 c)
public Color32 Lerp(Color32 a, Color32 b, float t)
public Color32 LerpUnclamped(Color32 a, Color32 b, float t)
public string ToString()
public string ToString(string format)
}
public UnityEngine.ColorSpace : Enum {
public int value__
public ColorSpace Uninitialized
public ColorSpace Gamma
public ColorSpace Linear
}
public UnityEngine.ColorUsageAttribute : PropertyAttribute {
public bool showAlpha
public bool hdr
public float minBrightness
public float maxBrightness
public float minExposureValue
public float maxExposureValue
public void .ctor(bool showAlpha)
public void .ctor(bool showAlpha, bool hdr, float minBrightness, float maxBrightness, float minExposureValue, float maxExposureValue)
}
public UnityEngine.ColorUtility : object {
internal bool DoTryParseHtmlColor(string htmlString, Color32& color)
public bool TryParseHtmlString(string htmlString, Color& color)
public string ToHtmlStringRGB(Color color)
public string ToHtmlStringRGBA(Color color)
}
public UnityEngine.CombineInstance : ValueType {
private int m_MeshInstanceID
private int m_SubMeshIndex
private Matrix4x4 m_Transform
private Vector4 m_LightmapScaleOffset
private Vector4 m_RealtimeLightmapScaleOffset
public Mesh mesh
public int subMeshIndex
public Matrix4x4 transform
public Vector4 lightmapScaleOffset
public Vector4 realtimeLightmapScaleOffset
public Mesh get_mesh()
public void set_mesh(Mesh value)
public int get_subMeshIndex()
public void set_subMeshIndex(int value)
public Matrix4x4 get_transform()
public void set_transform(Matrix4x4 value)
public Vector4 get_lightmapScaleOffset()
public void set_lightmapScaleOffset(Vector4 value)
public Vector4 get_realtimeLightmapScaleOffset()
public void set_realtimeLightmapScaleOffset(Vector4 value)
}
internal UnityEngine.CombineInstanceHelper : ValueType {
internal Mesh GetMesh(int instanceID)
}
public UnityEngine.Compass : object {
public float magneticHeading
public float trueHeading
public float headingAccuracy
public Vector3 rawVector
public double timestamp
public bool enabled
public float get_magneticHeading()
public float get_trueHeading()
public float get_headingAccuracy()
public Vector3 get_rawVector()
private void INTERNAL_get_rawVector(Vector3& value)
public double get_timestamp()
public bool get_enabled()
public void set_enabled(bool value)
}
public UnityEngine.Component : Object {
public Transform transform
public GameObject gameObject
public string tag
public Transform get_transform()
public GameObject get_gameObject()
public Component GetComponent(Type type)
internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue)
public T GetComponent()
public Component GetComponent(string type)
public Component GetComponentInChildren(Type t, bool includeInactive)
public Component GetComponentInChildren(Type t)
public T GetComponentInChildren()
public T GetComponentInChildren(bool includeInactive)
public Component[] GetComponentsInChildren(Type t)
public Component[] GetComponentsInChildren(Type t, bool includeInactive)
public T[] GetComponentsInChildren(bool includeInactive)
public void GetComponentsInChildren(bool includeInactive, List`1<T> result)
public T[] GetComponentsInChildren()
public void GetComponentsInChildren(List`1<T> results)
public Component GetComponentInParent(Type t)
public T GetComponentInParent()
public Component[] GetComponentsInParent(Type t)
public Component[] GetComponentsInParent(Type t, bool includeInactive)
public T[] GetComponentsInParent(bool includeInactive)
public void GetComponentsInParent(bool includeInactive, List`1<T> results)
public T[] GetComponentsInParent()
public Component[] GetComponents(Type type)
private void GetComponentsForListInternal(Type searchType, object resultList)
public void GetComponents(Type type, List`1<Component> results)
public void GetComponents(List`1<T> results)
public string get_tag()
public void set_tag(string value)
public T[] GetComponents()
public bool CompareTag(string tag)
public void SendMessageUpwards(string methodName, object value, SendMessageOptions options)
public void SendMessageUpwards(string methodName, object value)
public void SendMessageUpwards(string methodName)
public void SendMessageUpwards(string methodName, SendMessageOptions options)
public void SendMessage(string methodName, object value, SendMessageOptions options)
public void SendMessage(string methodName, object value)
public void SendMessage(string methodName)
public void SendMessage(string methodName, SendMessageOptions options)
public void BroadcastMessage(string methodName, object parameter, SendMessageOptions options)
public void BroadcastMessage(string methodName, object parameter)
public void BroadcastMessage(string methodName)
public void BroadcastMessage(string methodName, SendMessageOptions options)
}
public UnityEngine.CompositeCollider2D : Collider2D {
public GeometryType geometryType
public GenerationType generationType
public float vertexDistance
public float edgeRadius
public int pathCount
public int pointCount
public GeometryType get_geometryType()
public void set_geometryType(GeometryType value)
public GenerationType get_generationType()
public void set_generationType(GenerationType value)
public float get_vertexDistance()
public void set_vertexDistance(float value)
public float get_edgeRadius()
public void set_edgeRadius(float value)
public void GenerateGeometry()
private void INTERNAL_CALL_GenerateGeometry(CompositeCollider2D self)
public int GetPathPointCount(int index)
private int Internal_GetPathPointCount(int index)
public int GetPath(int index, Vector2[] points)
private int Internal_GetPath(int index, Vector2[] points)
public int get_pathCount()
public int get_pointCount()
}
public UnityEngine.ComputeBuffer : object {
internal IntPtr m_Ptr
public int count
public int stride
public void .ctor(int count, int stride)
public void .ctor(int count, int stride, ComputeBufferType type)
internal void .ctor(int count, int stride, ComputeBufferType type, int stackDepth)
protected void Finalize()
public void Dispose()
private void Dispose(bool disposing)
private void InitBuffer(ComputeBuffer buf, int count, int stride, ComputeBufferType type)
private void DestroyBuffer(ComputeBuffer buf)
public void Release()
public int get_count()
public int get_stride()
public void SetData(Array data)
public void SetData(Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count)
private void InternalSetData(Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count, int elemSize)
public void GetData(Array data)
public void GetData(Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count)
private void InternalGetData(Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count, int elemSize)
public void SetCounterValue(UInt32 counterValue)
public void CopyCount(ComputeBuffer src, ComputeBuffer dst, int dstOffsetBytes)
public IntPtr GetNativeBufferPtr()
private void INTERNAL_CALL_GetNativeBufferPtr(ComputeBuffer self, IntPtr& value)
}
public UnityEngine.ComputeBufferType : Enum {
public int value__
public ComputeBufferType Default
public ComputeBufferType Raw
public ComputeBufferType Append
public ComputeBufferType Counter
public ComputeBufferType DrawIndirect
public ComputeBufferType IndirectArguments
public ComputeBufferType GPUMemory
}
public UnityEngine.ComputeShader : Object {
public int FindKernel(string name)
public bool HasKernel(string name)
public void GetKernelThreadGroupSizes(int kernelIndex, UInt32& x, UInt32& y, UInt32& z)
public void SetFloat(string name, float val)
public void SetFloat(int nameID, float val)
public void SetInt(string name, int val)
public void SetInt(int nameID, int val)
public void SetBool(string name, bool val)
public void SetBool(int nameID, bool val)
public void SetVector(string name, Vector4 val)
public void SetVector(int nameID, Vector4 val)
private void INTERNAL_CALL_SetVector(ComputeShader self, int nameID, Vector4& val)
public void SetFloats(string name, Single[] values)
public void SetFloats(int nameID, Single[] values)
private void Internal_SetFloats(int nameID, Single[] values)
public void SetInts(string name, Int32[] values)
public void SetInts(int nameID, Int32[] values)
private void Internal_SetInts(int nameID, Int32[] values)
public void SetTexture(int kernelIndex, string name, Texture texture)
public void SetTexture(int kernelIndex, int nameID, Texture texture)
public void SetTextureFromGlobal(int kernelIndex, string name, string globalTextureName)
public void SetTextureFromGlobal(int kernelIndex, int nameID, int globalTextureNameID)
public void SetBuffer(int kernelIndex, string name, ComputeBuffer buffer)
public void SetBuffer(int kernelIndex, int nameID, ComputeBuffer buffer)
public void Dispatch(int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ)
public void DispatchIndirect(int kernelIndex, ComputeBuffer argsBuffer)
public void DispatchIndirect(int kernelIndex, ComputeBuffer argsBuffer, UInt32 argsOffset)
private void Internal_DispatchIndirect(int kernelIndex, ComputeBuffer argsBuffer, UInt32 argsOffset)
}
public UnityEngine.ConfigurableJoint : Joint {
public Vector3 secondaryAxis
public ConfigurableJointMotion xMotion
public ConfigurableJointMotion yMotion
public ConfigurableJointMotion zMotion
public ConfigurableJointMotion angularXMotion
public ConfigurableJointMotion angularYMotion
public ConfigurableJointMotion angularZMotion
public SoftJointLimitSpring linearLimitSpring
public SoftJointLimitSpring angularXLimitSpring
public SoftJointLimitSpring angularYZLimitSpring
public SoftJointLimit linearLimit
public SoftJointLimit lowAngularXLimit
public SoftJointLimit highAngularXLimit
public SoftJointLimit angularYLimit
public SoftJointLimit angularZLimit
public Vector3 targetPosition
public Vector3 targetVelocity
public JointDrive xDrive
public JointDrive yDrive
public JointDrive zDrive
public Quaternion targetRotation
public Vector3 targetAngularVelocity
public RotationDriveMode rotationDriveMode
public JointDrive angularXDrive
public JointDrive angularYZDrive
public JointDrive slerpDrive
public JointProjectionMode projectionMode
public float projectionDistance
public float projectionAngle
public bool configuredInWorldSpace
public bool swapBodies
public Vector3 get_secondaryAxis()
public void set_secondaryAxis(Vector3 value)
private void INTERNAL_get_secondaryAxis(Vector3& value)
private void INTERNAL_set_secondaryAxis(Vector3& value)
public ConfigurableJointMotion get_xMotion()
public void set_xMotion(ConfigurableJointMotion value)
public ConfigurableJointMotion get_yMotion()
public void set_yMotion(ConfigurableJointMotion value)
public ConfigurableJointMotion get_zMotion()
public void set_zMotion(ConfigurableJointMotion value)
public ConfigurableJointMotion get_angularXMotion()
public void set_angularXMotion(ConfigurableJointMotion value)
public ConfigurableJointMotion get_angularYMotion()
public void set_angularYMotion(ConfigurableJointMotion value)
public ConfigurableJointMotion get_angularZMotion()
public void set_angularZMotion(ConfigurableJointMotion value)
public SoftJointLimitSpring get_linearLimitSpring()
public void set_linearLimitSpring(SoftJointLimitSpring value)
private void INTERNAL_get_linearLimitSpring(SoftJointLimitSpring& value)
private void INTERNAL_set_linearLimitSpring(SoftJointLimitSpring& value)
public SoftJointLimitSpring get_angularXLimitSpring()
public void set_angularXLimitSpring(SoftJointLimitSpring value)
private void INTERNAL_get_angularXLimitSpring(SoftJointLimitSpring& value)
private void INTERNAL_set_angularXLimitSpring(SoftJointLimitSpring& value)
public SoftJointLimitSpring get_angularYZLimitSpring()
public void set_angularYZLimitSpring(SoftJointLimitSpring value)
private void INTERNAL_get_angularYZLimitSpring(SoftJointLimitSpring& value)
private void INTERNAL_set_angularYZLimitSpring(SoftJointLimitSpring& value)
public SoftJointLimit get_linearLimit()
public void set_linearLimit(SoftJointLimit value)
private void INTERNAL_get_linearLimit(SoftJointLimit& value)
private void INTERNAL_set_linearLimit(SoftJointLimit& value)
public SoftJointLimit get_lowAngularXLimit()
public void set_lowAngularXLimit(SoftJointLimit value)
private void INTERNAL_get_lowAngularXLimit(SoftJointLimit& value)
private void INTERNAL_set_lowAngularXLimit(SoftJointLimit& value)
public SoftJointLimit get_highAngularXLimit()
public void set_highAngularXLimit(SoftJointLimit value)
private void INTERNAL_get_highAngularXLimit(SoftJointLimit& value)
private void INTERNAL_set_highAngularXLimit(SoftJointLimit& value)
public SoftJointLimit get_angularYLimit()
public void set_angularYLimit(SoftJointLimit value)
private void INTERNAL_get_angularYLimit(SoftJointLimit& value)
private void INTERNAL_set_angularYLimit(SoftJointLimit& value)
public SoftJointLimit get_angularZLimit()
public void set_angularZLimit(SoftJointLimit value)
private void INTERNAL_get_angularZLimit(SoftJointLimit& value)
private void INTERNAL_set_angularZLimit(SoftJointLimit& value)
public Vector3 get_targetPosition()
public void set_targetPosition(Vector3 value)
private void INTERNAL_get_targetPosition(Vector3& value)
private void INTERNAL_set_targetPosition(Vector3& value)
public Vector3 get_targetVelocity()
public void set_targetVelocity(Vector3 value)
private void INTERNAL_get_targetVelocity(Vector3& value)
private void INTERNAL_set_targetVelocity(Vector3& value)
public JointDrive get_xDrive()
public void set_xDrive(JointDrive value)
private void INTERNAL_get_xDrive(JointDrive& value)
private void INTERNAL_set_xDrive(JointDrive& value)
public JointDrive get_yDrive()
public void set_yDrive(JointDrive value)
private void INTERNAL_get_yDrive(JointDrive& value)
private void INTERNAL_set_yDrive(JointDrive& value)
public JointDrive get_zDrive()
public void set_zDrive(JointDrive value)
private void INTERNAL_get_zDrive(JointDrive& value)
private void INTERNAL_set_zDrive(JointDrive& value)
public Quaternion get_targetRotation()
public void set_targetRotation(Quaternion value)
private void INTERNAL_get_targetRotation(Quaternion& value)
private void INTERNAL_set_targetRotation(Quaternion& value)
public Vector3 get_targetAngularVelocity()
public void set_targetAngularVelocity(Vector3 value)
private void INTERNAL_get_targetAngularVelocity(Vector3& value)
private void INTERNAL_set_targetAngularVelocity(Vector3& value)
public RotationDriveMode get_rotationDriveMode()
public void set_rotationDriveMode(RotationDriveMode value)
public JointDrive get_angularXDrive()
public void set_angularXDrive(JointDrive value)
private void INTERNAL_get_angularXDrive(JointDrive& value)
private void INTERNAL_set_angularXDrive(JointDrive& value)
public JointDrive get_angularYZDrive()
public void set_angularYZDrive(JointDrive value)
private void INTERNAL_get_angularYZDrive(JointDrive& value)
private void INTERNAL_set_angularYZDrive(JointDrive& value)
public JointDrive get_slerpDrive()
public void set_slerpDrive(JointDrive value)
private void INTERNAL_get_slerpDrive(JointDrive& value)
private void INTERNAL_set_slerpDrive(JointDrive& value)
public JointProjectionMode get_projectionMode()
public void set_projectionMode(JointProjectionMode value)
public float get_projectionDistance()
public void set_projectionDistance(float value)
public float get_projectionAngle()
public void set_projectionAngle(float value)
public bool get_configuredInWorldSpace()
public void set_configuredInWorldSpace(bool value)
public bool get_swapBodies()
public void set_swapBodies(bool value)
}
public UnityEngine.ConfigurableJointMotion : Enum {
public int value__
public ConfigurableJointMotion Locked
public ConfigurableJointMotion Limited
public ConfigurableJointMotion Free
}
internal UnityEngine.Connect.UnityConnectSettings : object {
public bool enabled
public bool testMode
public string testEventUrl
public string testConfigUrl
public int testInitMode
public bool get_enabled()
public void set_enabled(bool value)
public bool get_testMode()
public void set_testMode(bool value)
public string get_testEventUrl()
public void set_testEventUrl(string value)
public string get_testConfigUrl()
public void set_testConfigUrl(string value)
public int get_testInitMode()
public void set_testInitMode(int value)
}
public UnityEngine.ConnectionTesterStatus : Enum {
public int value__
public ConnectionTesterStatus Error
public ConnectionTesterStatus Undetermined
public ConnectionTesterStatus PrivateIPNoNATPunchthrough
public ConnectionTesterStatus PrivateIPHasNATPunchThrough
public ConnectionTesterStatus PublicIPIsConnectable
public ConnectionTesterStatus PublicIPPortBlocked
public ConnectionTesterStatus PublicIPNoServerStarted
public ConnectionTesterStatus LimitedNATPunchthroughPortRestricted
public ConnectionTesterStatus LimitedNATPunchthroughSymmetric
public ConnectionTesterStatus NATpunchthroughFullCone
public ConnectionTesterStatus NATpunchthroughAddressRestrictedCone
}
public UnityEngine.ConstantForce : Behaviour {
public Vector3 force
public Vector3 relativeForce
public Vector3 torque
public Vector3 relativeTorque
public Vector3 get_force()
public void set_force(Vector3 value)
private void INTERNAL_get_force(Vector3& value)
private void INTERNAL_set_force(Vector3& value)
public Vector3 get_relativeForce()
public void set_relativeForce(Vector3 value)
private void INTERNAL_get_relativeForce(Vector3& value)
private void INTERNAL_set_relativeForce(Vector3& value)
public Vector3 get_torque()
public void set_torque(Vector3 value)
private void INTERNAL_get_torque(Vector3& value)
private void INTERNAL_set_torque(Vector3& value)
public Vector3 get_relativeTorque()
public void set_relativeTorque(Vector3 value)
private void INTERNAL_get_relativeTorque(Vector3& value)
private void INTERNAL_set_relativeTorque(Vector3& value)
}
public UnityEngine.ConstantForce2D : PhysicsUpdateBehaviour2D {
public Vector2 force
public Vector2 relativeForce
public float torque
public Vector2 get_force()
public void set_force(Vector2 value)
private void INTERNAL_get_force(Vector2& value)
private void INTERNAL_set_force(Vector2& value)
public Vector2 get_relativeForce()
public void set_relativeForce(Vector2 value)
private void INTERNAL_get_relativeForce(Vector2& value)
private void INTERNAL_set_relativeForce(Vector2& value)
public float get_torque()
public void set_torque(float value)
}
public UnityEngine.ContactFilter2D : ValueType {
public bool useTriggers
public bool useLayerMask
public bool useDepth
public bool useOutsideDepth
public bool useNormalAngle
public bool useOutsideNormalAngle
public LayerMask layerMask
public float minDepth
public float maxDepth
public float minNormalAngle
public float maxNormalAngle
public float NormalAngleUpperLimit
public bool isFiltering
public ContactFilter2D NoFilter()
private void CheckConsistency()
public void ClearLayerMask()
public void SetLayerMask(LayerMask layerMask)
public void ClearDepth()
public void SetDepth(float minDepth, float maxDepth)
public void ClearNormalAngle()
public void SetNormalAngle(float minNormalAngle, float maxNormalAngle)
public bool get_isFiltering()
public bool IsFilteringTrigger(Collider2D collider)
public bool IsFilteringLayerMask(GameObject obj)
public bool IsFilteringDepth(GameObject obj)
public bool IsFilteringNormalAngle(Vector2 normal)
public bool IsFilteringNormalAngle(float angle)
internal ContactFilter2D CreateLegacyFilter(int layerMask, float minDepth, float maxDepth)
}
public UnityEngine.ContactPoint : ValueType {
internal Vector3 m_Point
internal Vector3 m_Normal
internal int m_ThisColliderInstanceID
internal int m_OtherColliderInstanceID
internal float m_Separation
public Vector3 point
public Vector3 normal
public Collider thisCollider
public Collider otherCollider
public float separation
public Vector3 get_point()
public Vector3 get_normal()
public Collider get_thisCollider()
public Collider get_otherCollider()
public float get_separation()
private Collider ColliderFromInstanceId(int instanceID)
}
public UnityEngine.ContactPoint2D : ValueType {
internal Vector2 m_Point
internal Vector2 m_Normal
internal Vector2 m_RelativeVelocity
internal float m_Separation
internal float m_NormalImpulse
internal float m_TangentImpulse
internal int m_Collider
internal int m_OtherCollider
internal int m_Rigidbody
internal int m_OtherRigidbody
internal int m_Enabled
public Vector2 point
public Vector2 normal
public float separation
public float normalImpulse
public float tangentImpulse
public Vector2 relativeVelocity
public Collider2D collider
public Collider2D otherCollider
public Rigidbody2D rigidbody
public Rigidbody2D otherRigidbody
public bool enabled
public Vector2 get_point()
public Vector2 get_normal()
public float get_separation()
public float get_normalImpulse()
public float get_tangentImpulse()
public Vector2 get_relativeVelocity()
public Collider2D get_collider()
public Collider2D get_otherCollider()
public Rigidbody2D get_rigidbody()
public Rigidbody2D get_otherRigidbody()
public bool get_enabled()
}
public UnityEngine.ContextMenu : Attribute {
public string menuItem
public bool validate
public int priority
public void .ctor(string itemName)
public void .ctor(string itemName, bool isValidateFunction)
public void .ctor(string itemName, bool isValidateFunction, int priority)
}
public UnityEngine.ContextMenuItemAttribute : PropertyAttribute {
public string name
public string function
public void .ctor(string name, string function)
}
public UnityEngine.ControllerColliderHit : object {
internal CharacterController m_Controller
internal Collider m_Collider
internal Vector3 m_Point
internal Vector3 m_Normal
internal Vector3 m_MoveDirection
internal float m_MoveLength
internal int m_Push
public CharacterController controller
public Collider collider
public Rigidbody rigidbody
public GameObject gameObject
public Transform transform
public Vector3 point
public Vector3 normal
public Vector3 moveDirection
public float moveLength
private bool push
public CharacterController get_controller()
public Collider get_collider()
public Rigidbody get_rigidbody()
public GameObject get_gameObject()
public Transform get_transform()
public Vector3 get_point()
public Vector3 get_normal()
public Vector3 get_moveDirection()
public float get_moveLength()
private bool get_push()
private void set_push(bool value)
}
public UnityEngine.Coroutine : YieldInstruction {
internal IntPtr m_Ptr
private void ReleaseCoroutine()
protected void Finalize()
}
public UnityEngine.CrashReport : object {
private List`1<CrashReport> internalReports
private object reportsLock
private string id
public DateTime time
public string text
private Comparison`1<CrashReport> <>f__mg$cache0
public CrashReport[] reports
public CrashReport lastReport
private void .ctor(string id, DateTime time, string text)
private int Compare(CrashReport c1, CrashReport c2)
private void PopulateReports()
public CrashReport[] get_reports()
public CrashReport get_lastReport()
public void RemoveAll()
public void Remove()
private String[] GetReports()
private string GetReportData(string id, Double& secondsSinceUnixEpoch)
private bool RemoveReport(string id)
}
public UnityEngine.CrashReportHandler.CrashReportHandler : object {
public bool enableCaptureExceptions
public bool get_enableCaptureExceptions()
public void set_enableCaptureExceptions(bool value)
}
public UnityEngine.CreateAssetMenuAttribute : Attribute {
private string <menuName>k__BackingField
private string <fileName>k__BackingField
private int <order>k__BackingField
public string menuName
public string fileName
public int order
public string get_menuName()
public void set_menuName(string value)
public string get_fileName()
public void set_fileName(string value)
public int get_order()
public void set_order(int value)
}
internal UnityEngine.CSSLayout.CSSAlign : Enum {
public int value__
public CSSAlign Auto
public CSSAlign FlexStart
public CSSAlign Center
public CSSAlign FlexEnd
public CSSAlign Stretch
}
internal UnityEngine.CSSLayout.CSSConstants : object {
public float Undefined
public bool IsUndefined(float value)
}
internal UnityEngine.CSSLayout.CSSDimension : Enum {
public int value__
public CSSDimension Width
public CSSDimension Height
}
internal UnityEngine.CSSLayout.CSSDirection : Enum {
public int value__
public CSSDirection Inherit
public CSSDirection LTR
public CSSDirection RTL
public CSSDirection LeftToRight
public CSSDirection RightToLeft
}
internal UnityEngine.CSSLayout.CSSEdge : Enum {
public int value__
public CSSEdge Left
public CSSEdge Top
public CSSEdge Right
public CSSEdge Bottom
public CSSEdge Start
public CSSEdge End
public CSSEdge Horizontal
public CSSEdge Vertical
public CSSEdge All
}
internal UnityEngine.CSSLayout.CSSExperimentalFeature : Enum {
public int value__
public CSSExperimentalFeature Rounding
public CSSExperimentalFeature WebFlexBasis
}
internal UnityEngine.CSSLayout.CSSFlexDirection : Enum {
public int value__
public CSSFlexDirection Column
public CSSFlexDirection ColumnReverse
public CSSFlexDirection Row
public CSSFlexDirection RowReverse
}
internal UnityEngine.CSSLayout.CSSJustify : Enum {
public int value__
public CSSJustify FlexStart
public CSSJustify Center
public CSSJustify FlexEnd
public CSSJustify SpaceBetween
public CSSJustify SpaceAround
}
internal UnityEngine.CSSLayout.CSSLogger : object {
public Func Logger
public void Initialize()
}
internal UnityEngine.CSSLayout.CSSLogLevel : Enum {
public int value__
public CSSLogLevel Error
public CSSLogLevel Warn
public CSSLogLevel Info
public CSSLogLevel Debug
public CSSLogLevel Verbose
}
internal UnityEngine.CSSLayout.CSSMeasureFunc : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public CSSSize Invoke(IntPtr node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode)
public IAsyncResult BeginInvoke(IntPtr node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode, AsyncCallback callback, object object)
public CSSSize EndInvoke(IAsyncResult result)
}
internal UnityEngine.CSSLayout.CSSMeasureMode : Enum {
public int value__
public CSSMeasureMode Undefined
public CSSMeasureMode Exactly
public CSSMeasureMode AtMost
}
internal UnityEngine.CSSLayout.CSSNode : object {
private IntPtr _cssNode
private WeakReference _parent
private List`1<CSSNode> _children
private MeasureFunction _measureFunction
private CSSMeasureFunc _cssMeasureFunc
private object _data
public bool IsDirty
public bool HasNewLayout
public CSSNode Parent
public bool IsMeasureDefined
public CSSDirection StyleDirection
public CSSFlexDirection FlexDirection
public CSSJustify JustifyContent
public CSSAlign AlignItems
public CSSAlign AlignSelf
public CSSAlign AlignContent
public CSSPositionType PositionType
public CSSWrap Wrap
public float Flex
public float FlexGrow
public float FlexShrink
public float FlexBasis
public float Width
public float Height
public float MaxWidth
public float MaxHeight
public float MinWidth
public float MinHeight
public float AspectRatio
public float LayoutX
public float LayoutY
public float LayoutWidth
public float LayoutHeight
public CSSDirection LayoutDirection
public CSSOverflow Overflow
public object Data
public CSSNode Item
public int Count
protected void Finalize()
public void Reset()
public bool get_IsDirty()
public void MarkDirty()
public bool get_HasNewLayout()
public void MarkHasNewLayout()
public CSSNode get_Parent()
public bool get_IsMeasureDefined()
public void CopyStyle(CSSNode srcNode)
public CSSDirection get_StyleDirection()
public void set_StyleDirection(CSSDirection value)
public CSSFlexDirection get_FlexDirection()
public void set_FlexDirection(CSSFlexDirection value)
public CSSJustify get_JustifyContent()
public void set_JustifyContent(CSSJustify value)
public CSSAlign get_AlignItems()
public void set_AlignItems(CSSAlign value)
public CSSAlign get_AlignSelf()
public void set_AlignSelf(CSSAlign value)
public CSSAlign get_AlignContent()
public void set_AlignContent(CSSAlign value)
public CSSPositionType get_PositionType()
public void set_PositionType(CSSPositionType value)
public CSSWrap get_Wrap()
public void set_Wrap(CSSWrap value)
public void set_Flex(float value)
public float get_FlexGrow()
public void set_FlexGrow(float value)
public float get_FlexShrink()
public void set_FlexShrink(float value)
public float get_FlexBasis()
public void set_FlexBasis(float value)
public float GetMargin(CSSEdge edge)
public void SetMargin(CSSEdge edge, float value)
public float GetPadding(CSSEdge edge)
public void SetPadding(CSSEdge edge, float padding)
public float GetBorder(CSSEdge edge)
public void SetBorder(CSSEdge edge, float border)
public float GetPosition(CSSEdge edge)
public void SetPosition(CSSEdge edge, float position)
public float get_Width()
public void set_Width(float value)
public float get_Height()
public void set_Height(float value)
public float get_MaxWidth()
public void set_MaxWidth(float value)
public float get_MaxHeight()
public void set_MaxHeight(float value)
public float get_MinWidth()
public void set_MinWidth(float value)
public float get_MinHeight()
public void set_MinHeight(float value)
public float get_AspectRatio()
public void set_AspectRatio(float value)
public float get_LayoutX()
public float get_LayoutY()
public float get_LayoutWidth()
public float get_LayoutHeight()
public CSSDirection get_LayoutDirection()
public CSSOverflow get_Overflow()
public void set_Overflow(CSSOverflow value)
public object get_Data()
public void set_Data(object value)
public CSSNode get_Item(int index)
public int get_Count()
public void MarkLayoutSeen()
public bool ValuesEqual(float f1, float f2)
public void Insert(int index, CSSNode node)
public void RemoveAt(int index)
public void Clear()
public int IndexOf(CSSNode node)
public void SetMeasureFunction(MeasureFunction measureFunction)
public void CalculateLayout()
private CSSSize MeasureInternal(IntPtr node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode)
public string Print()
public string Print(CSSPrintOptions options)
public IEnumerator`1<CSSNode> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int GetInstanceCount()
public void SetExperimentalFeatureEnabled(CSSExperimentalFeature feature, bool enabled)
public bool IsExperimentalFeatureEnabled(CSSExperimentalFeature feature)
}
internal UnityEngine.CSSLayout.CSSOverflow : Enum {
public int value__
public CSSOverflow Visible
public CSSOverflow Hidden
public CSSOverflow Scroll
}
internal UnityEngine.CSSLayout.CSSPositionType : Enum {
public int value__
public CSSPositionType Relative
public CSSPositionType Absolute
}
internal UnityEngine.CSSLayout.CSSPrintOptions : Enum {
public int value__
public CSSPrintOptions Layout
public CSSPrintOptions Style
public CSSPrintOptions Children
}
internal UnityEngine.CSSLayout.CSSSize : ValueType {
public float width
public float height
}
internal UnityEngine.CSSLayout.CSSWrap : Enum {
public int value__
public CSSWrap NoWrap
public CSSWrap Wrap
}
internal UnityEngine.CSSLayout.MeasureFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public long Invoke(CSSNode node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode)
public IAsyncResult BeginInvoke(CSSNode node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode, AsyncCallback callback, object object)
public long EndInvoke(IAsyncResult result)
}
internal UnityEngine.CSSLayout.MeasureOutput : object {
public long Make(double width, double height)
public long Make(int width, int height)
public int GetWidth(long measureOutput)
public int GetHeight(long measureOutput)
}
internal UnityEngine.CSSLayout.Native : object {
private string DllName
private Dictionary`2<IntPtr, WeakReference> s_MeasureFunctions
public IntPtr CSSNodeNew()
public void CSSNodeInit(IntPtr cssNode)
public void CSSNodeFree(IntPtr cssNode)
private void CSSNodeFreeInternal(IntPtr cssNode)
public void CSSNodeReset(IntPtr cssNode)
private void CSSNodeResetInternal(IntPtr cssNode)
public int CSSNodeGetInstanceCount()
public void CSSLayoutSetExperimentalFeatureEnabled(CSSExperimentalFeature feature, bool enabled)
public bool CSSLayoutIsExperimentalFeatureEnabled(CSSExperimentalFeature feature)
public void CSSNodeInsertChild(IntPtr node, IntPtr child, UInt32 index)
public void CSSNodeRemoveChild(IntPtr node, IntPtr child)
public IntPtr CSSNodeGetChild(IntPtr node, UInt32 index)
public UInt32 CSSNodeChildCount(IntPtr node)
public void CSSNodeCalculateLayout(IntPtr node, float availableWidth, float availableHeight, CSSDirection parentDirection)
public void CSSNodeMarkDirty(IntPtr node)
public bool CSSNodeIsDirty(IntPtr node)
public void CSSNodePrint(IntPtr node, CSSPrintOptions options)
public bool CSSValueIsUndefined(float value)
public void CSSNodeCopyStyle(IntPtr dstNode, IntPtr srcNode)
public void CSSNodeSetContext(IntPtr node, IntPtr context)
public IntPtr CSSNodeGetContext(IntPtr node)
public void CSSNodeSetMeasureFunc(IntPtr node, CSSMeasureFunc measureFunc)
public CSSMeasureFunc CSSNodeGetMeasureFunc(IntPtr node)
public void CSSNodeMeasureInvoke(IntPtr node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode, IntPtr returnValueAddress)
public void CSSNodeSetHasNewLayout(IntPtr node, bool hasNewLayout)
public bool CSSNodeGetHasNewLayout(IntPtr node)
public void CSSNodeStyleSetDirection(IntPtr node, CSSDirection direction)
public CSSDirection CSSNodeStyleGetDirection(IntPtr node)
public void CSSNodeStyleSetFlexDirection(IntPtr node, CSSFlexDirection flexDirection)
public CSSFlexDirection CSSNodeStyleGetFlexDirection(IntPtr node)
public void CSSNodeStyleSetJustifyContent(IntPtr node, CSSJustify justifyContent)
public CSSJustify CSSNodeStyleGetJustifyContent(IntPtr node)
public void CSSNodeStyleSetAlignContent(IntPtr node, CSSAlign alignContent)
public CSSAlign CSSNodeStyleGetAlignContent(IntPtr node)
public void CSSNodeStyleSetAlignItems(IntPtr node, CSSAlign alignItems)
public CSSAlign CSSNodeStyleGetAlignItems(IntPtr node)
public void CSSNodeStyleSetAlignSelf(IntPtr node, CSSAlign alignSelf)
public CSSAlign CSSNodeStyleGetAlignSelf(IntPtr node)
public void CSSNodeStyleSetPositionType(IntPtr node, CSSPositionType positionType)
public CSSPositionType CSSNodeStyleGetPositionType(IntPtr node)
public void CSSNodeStyleSetFlexWrap(IntPtr node, CSSWrap flexWrap)
public CSSWrap CSSNodeStyleGetFlexWrap(IntPtr node)
public void CSSNodeStyleSetOverflow(IntPtr node, CSSOverflow flexWrap)
public CSSOverflow CSSNodeStyleGetOverflow(IntPtr node)
public void CSSNodeStyleSetFlex(IntPtr node, float flex)
public void CSSNodeStyleSetFlexGrow(IntPtr node, float flexGrow)
public float CSSNodeStyleGetFlexGrow(IntPtr node)
public void CSSNodeStyleSetFlexShrink(IntPtr node, float flexShrink)
public float CSSNodeStyleGetFlexShrink(IntPtr node)
public void CSSNodeStyleSetFlexBasis(IntPtr node, float flexBasis)
public float CSSNodeStyleGetFlexBasis(IntPtr node)
public void CSSNodeStyleSetWidth(IntPtr node, float width)
public float CSSNodeStyleGetWidth(IntPtr node)
public void CSSNodeStyleSetHeight(IntPtr node, float height)
public float CSSNodeStyleGetHeight(IntPtr node)
public void CSSNodeStyleSetMinWidth(IntPtr node, float minWidth)
public float CSSNodeStyleGetMinWidth(IntPtr node)
public void CSSNodeStyleSetMinHeight(IntPtr node, float minHeight)
public float CSSNodeStyleGetMinHeight(IntPtr node)
public void CSSNodeStyleSetMaxWidth(IntPtr node, float maxWidth)
public float CSSNodeStyleGetMaxWidth(IntPtr node)
public void CSSNodeStyleSetMaxHeight(IntPtr node, float maxHeight)
public float CSSNodeStyleGetMaxHeight(IntPtr node)
public void CSSNodeStyleSetAspectRatio(IntPtr node, float aspectRatio)
public float CSSNodeStyleGetAspectRatio(IntPtr node)
public void CSSNodeStyleSetPosition(IntPtr node, CSSEdge edge, float position)
public float CSSNodeStyleGetPosition(IntPtr node, CSSEdge edge)
public void CSSNodeStyleSetMargin(IntPtr node, CSSEdge edge, float margin)
public float CSSNodeStyleGetMargin(IntPtr node, CSSEdge edge)
public void CSSNodeStyleSetPadding(IntPtr node, CSSEdge edge, float padding)
public float CSSNodeStyleGetPadding(IntPtr node, CSSEdge edge)
public void CSSNodeStyleSetBorder(IntPtr node, CSSEdge edge, float border)
public float CSSNodeStyleGetBorder(IntPtr node, CSSEdge edge)
public float CSSNodeLayoutGetLeft(IntPtr node)
public float CSSNodeLayoutGetTop(IntPtr node)
public float CSSNodeLayoutGetRight(IntPtr node)
public float CSSNodeLayoutGetBottom(IntPtr node)
public float CSSNodeLayoutGetWidth(IntPtr node)
public float CSSNodeLayoutGetHeight(IntPtr node)
public CSSDirection CSSNodeLayoutGetDirection(IntPtr node)
}
internal UnityEngine.CSSLayoutCallbacks : object {
public void RegisterWrapper(IntPtr node)
public void UnegisterWrapper(IntPtr node)
}
public UnityEngine.Cubemap : Texture {
public int mipmapCount
public TextureFormat format
public void .ctor(int size, TextureFormat format, bool mipmap)
internal void .ctor(int size, TextureFormat format, bool mipmap, IntPtr nativeTex)
public void SetPixel(CubemapFace face, int x, int y, Color color)
private void INTERNAL_CALL_SetPixel(Cubemap self, CubemapFace face, int x, int y, Color& color)
public Color GetPixel(CubemapFace face, int x, int y)
private void INTERNAL_CALL_GetPixel(Cubemap self, CubemapFace face, int x, int y, Color& value)
public Color[] GetPixels(CubemapFace face, int miplevel)
public Color[] GetPixels(CubemapFace face)
public void SetPixels(Color[] colors, CubemapFace face, int miplevel)
public void SetPixels(Color[] colors, CubemapFace face)
public int get_mipmapCount()
public void Apply(bool updateMipmaps, bool makeNoLongerReadable)
public void Apply(bool updateMipmaps)
public void Apply()
public TextureFormat get_format()
public Cubemap CreateExternalTexture(int size, TextureFormat format, bool mipmap, IntPtr nativeTex)
private void Internal_Create(Cubemap mono, int size, TextureFormat format, bool mipmap, IntPtr nativeTex)
public void SmoothEdges(int smoothRegionWidthInPixels)
public void SmoothEdges()
}
public UnityEngine.CubemapArray : Texture {
public int cubemapCount
public TextureFormat format
public void .ctor(int faceSize, int cubemapCount, TextureFormat format, bool mipmap)
public void .ctor(int faceSize, int cubemapCount, TextureFormat format, bool mipmap, bool linear)
public int get_cubemapCount()
public TextureFormat get_format()
public void Apply(bool updateMipmaps, bool makeNoLongerReadable)
public void Apply(bool updateMipmaps)
public void Apply()
private void Internal_Create(CubemapArray mono, int faceSize, int cubemapCount, TextureFormat format, bool mipmap, bool linear)
public void SetPixels(Color[] colors, CubemapFace face, int arrayElement, int miplevel)
public void SetPixels(Color[] colors, CubemapFace face, int arrayElement)
public void SetPixels32(Color32[] colors, CubemapFace face, int arrayElement, int miplevel)
public void SetPixels32(Color32[] colors, CubemapFace face, int arrayElement)
public Color[] GetPixels(CubemapFace face, int arrayElement, int miplevel)
public Color[] GetPixels(CubemapFace face, int arrayElement)
public Color32[] GetPixels32(CubemapFace face, int arrayElement, int miplevel)
public Color32[] GetPixels32(CubemapFace face, int arrayElement)
}
public UnityEngine.CubemapFace : Enum {
public int value__
public CubemapFace Unknown
public CubemapFace PositiveX
public CubemapFace NegativeX
public CubemapFace PositiveY
public CubemapFace NegativeY
public CubemapFace PositiveZ
public CubemapFace NegativeZ
}
public UnityEngine.CullingGroup : object {
internal IntPtr m_Ptr
private StateChanged m_OnStateChanged
public StateChanged onStateChanged
public bool enabled
public Camera targetCamera
protected void Finalize()
public void Dispose()
public StateChanged get_onStateChanged()
public void set_onStateChanged(StateChanged value)
public bool get_enabled()
public void set_enabled(bool value)
public Camera get_targetCamera()
public void set_targetCamera(Camera value)
public void SetBoundingSpheres(BoundingSphere[] array)
public void SetBoundingSphereCount(int count)
public void EraseSwapBack(int index)
public void EraseSwapBack(int index, T[] myArray, Int32& size)
public int QueryIndices(bool visible, Int32[] result, int firstIndex)
public int QueryIndices(int distanceIndex, Int32[] result, int firstIndex)
public int QueryIndices(bool visible, int distanceIndex, Int32[] result, int firstIndex)
private int QueryIndices(bool visible, int distanceIndex, CullingQueryOptions options, Int32[] result, int firstIndex)
public bool IsVisible(int index)
public int GetDistance(int index)
public void SetBoundingDistances(Single[] distances)
public void SetDistanceReferencePoint(Vector3 point)
private void INTERNAL_CALL_SetDistanceReferencePoint(CullingGroup self, Vector3& point)
public void SetDistanceReferencePoint(Transform transform)
private void SendEvents(CullingGroup cullingGroup, IntPtr eventsPtr, int count)
private void Init()
private void FinalizerFailure()
}
public UnityEngine.CullingGroupEvent : ValueType {
private int m_Index
private byte m_PrevState
private byte m_ThisState
private byte kIsVisibleMask
private byte kDistanceMask
public int index
public bool isVisible
public bool wasVisible
public bool hasBecomeVisible
public bool hasBecomeInvisible
public int currentDistance
public int previousDistance
public int get_index()
public bool get_isVisible()
public bool get_wasVisible()
public bool get_hasBecomeVisible()
public bool get_hasBecomeInvisible()
public int get_currentDistance()
public int get_previousDistance()
}
internal UnityEngine.CullingQueryOptions : Enum {
public int value__
public CullingQueryOptions Normal
public CullingQueryOptions IgnoreVisibility
public CullingQueryOptions IgnoreDistance
}
public UnityEngine.Cursor : object {
public bool visible
public CursorLockMode lockState
private void SetCursor(Texture2D texture, CursorMode cursorMode)
public void SetCursor(Texture2D texture, Vector2 hotspot, CursorMode cursorMode)
private void INTERNAL_CALL_SetCursor(Texture2D texture, Vector2& hotspot, CursorMode cursorMode)
public bool get_visible()
public void set_visible(bool value)
public CursorLockMode get_lockState()
public void set_lockState(CursorLockMode value)
}
public UnityEngine.CursorLockMode : Enum {
public int value__
public CursorLockMode None
public CursorLockMode Locked
public CursorLockMode Confined
}
public UnityEngine.CursorMode : Enum {
public int value__
public CursorMode Auto
public CursorMode ForceSoftware
}
public UnityEngine.CustomRenderTexture : RenderTexture {
public Material material
public Material initializationMaterial
public Texture initializationTexture
public CustomRenderTextureInitializationSource initializationSource
public Color initializationColor
public CustomRenderTextureUpdateMode updateMode
public CustomRenderTextureUpdateMode initializationMode
public CustomRenderTextureUpdateZoneSpace updateZoneSpace
public int shaderPass
public UInt32 cubemapFaceMask
public bool doubleBuffered
public bool wrapUpdateZones
public void .ctor(int width, int height, RenderTextureFormat format, RenderTextureReadWrite readWrite)
public void .ctor(int width, int height, RenderTextureFormat format)
public void .ctor(int width, int height)
public void Update(int count)
public void Update()
public void Initialize()
public void ClearUpdateZones()
public Material get_material()
public void set_material(Material value)
public Material get_initializationMaterial()
public void set_initializationMaterial(Material value)
public Texture get_initializationTexture()
public void set_initializationTexture(Texture value)
private bool IsCubemapFaceEnabled(CubemapFace face)
private void EnableCubemapFace(CubemapFace face, bool value)
internal void GetUpdateZonesInternal(object updateZones)
public void GetUpdateZones(List`1<CustomRenderTextureUpdateZone> updateZones)
private void SetUpdateZonesInternal(CustomRenderTextureUpdateZone[] updateZones)
public void SetUpdateZones(CustomRenderTextureUpdateZone[] updateZones)
public CustomRenderTextureInitializationSource get_initializationSource()
public void set_initializationSource(CustomRenderTextureInitializationSource value)
public Color get_initializationColor()
public void set_initializationColor(Color value)
private void INTERNAL_get_initializationColor(Color& value)
private void INTERNAL_set_initializationColor(Color& value)
public CustomRenderTextureUpdateMode get_updateMode()
public void set_updateMode(CustomRenderTextureUpdateMode value)
public CustomRenderTextureUpdateMode get_initializationMode()
public void set_initializationMode(CustomRenderTextureUpdateMode value)
public CustomRenderTextureUpdateZoneSpace get_updateZoneSpace()
public void set_updateZoneSpace(CustomRenderTextureUpdateZoneSpace value)
public int get_shaderPass()
public void set_shaderPass(int value)
public UInt32 get_cubemapFaceMask()
public void set_cubemapFaceMask(UInt32 value)
public bool get_doubleBuffered()
public void set_doubleBuffered(bool value)
public bool get_wrapUpdateZones()
public void set_wrapUpdateZones(bool value)
}
public UnityEngine.CustomRenderTextureInitializationSource : Enum {
public int value__
public CustomRenderTextureInitializationSource TextureAndColor
public CustomRenderTextureInitializationSource Material
}
public UnityEngine.CustomRenderTextureUpdateMode : Enum {
public int value__
public CustomRenderTextureUpdateMode OnLoad
public CustomRenderTextureUpdateMode Realtime
public CustomRenderTextureUpdateMode OnDemand
}
public UnityEngine.CustomRenderTextureUpdateZone : ValueType {
public Vector3 updateZoneCenter
public Vector3 updateZoneSize
public float rotation
public int passIndex
public bool needSwap
}
public UnityEngine.CustomRenderTextureUpdateZoneSpace : Enum {
public int value__
public CustomRenderTextureUpdateZoneSpace Normalized
public CustomRenderTextureUpdateZoneSpace Pixel
}
public UnityEngine.CustomYieldInstruction : object {
public bool keepWaiting
public object Current
public bool get_keepWaiting()
public object get_Current()
public bool MoveNext()
public void Reset()
}
public UnityEngine.Debug : object {
internal ILogger s_Logger
public ILogger unityLogger
public bool developerConsoleVisible
public bool isDebugBuild
public ILogger logger
public ILogger get_unityLogger()
public void DrawLine(Vector3 start, Vector3 end, Color color, float duration, bool depthTest)
public void DrawLine(Vector3 start, Vector3 end, Color color, float duration)
public void DrawLine(Vector3 start, Vector3 end, Color color)
public void DrawLine(Vector3 start, Vector3 end)
private void INTERNAL_CALL_DrawLine(Vector3& start, Vector3& end, Color& color, float duration, bool depthTest)
public void DrawRay(Vector3 start, Vector3 dir, Color color, float duration)
public void DrawRay(Vector3 start, Vector3 dir, Color color)
public void DrawRay(Vector3 start, Vector3 dir)
public void DrawRay(Vector3 start, Vector3 dir, Color color, float duration, bool depthTest)
public void Break()
public void DebugBreak()
public void Log(object message)
public void Log(object message, Object context)
public void LogFormat(string format, Object[] args)
public void LogFormat(Object context, string format, Object[] args)
public void LogError(object message)
public void LogError(object message, Object context)
public void LogErrorFormat(string format, Object[] args)
public void LogErrorFormat(Object context, string format, Object[] args)
public void ClearDeveloperConsole()
public bool get_developerConsoleVisible()
public void set_developerConsoleVisible(bool value)
public void LogException(Exception exception)
public void LogException(Exception exception, Object context)
public void LogWarning(object message)
public void LogWarning(object message, Object context)
public void LogWarningFormat(string format, Object[] args)
public void LogWarningFormat(Object context, string format, Object[] args)
public void Assert(bool condition)
public void Assert(bool condition, Object context)
public void Assert(bool condition, object message)
public void Assert(bool condition, string message)
public void Assert(bool condition, object message, Object context)
public void Assert(bool condition, string message, Object context)
public void AssertFormat(bool condition, string format, Object[] args)
public void AssertFormat(bool condition, Object context, string format, Object[] args)
public void LogAssertion(object message)
public void LogAssertion(object message, Object context)
public void LogAssertionFormat(string format, Object[] args)
public void LogAssertionFormat(Object context, string format, Object[] args)
public bool get_isDebugBuild()
internal void OpenConsoleFile()
internal void GetDiagnosticSwitches(List`1<DiagnosticSwitch> results)
internal void SetDiagnosticSwitch(string name, object value, bool setPersistent)
public void Assert(bool condition, string format, Object[] args)
public ILogger get_logger()
}
internal UnityEngine.DebugLogHandler : object {
internal void Internal_Log(LogType level, string msg, Object obj)
internal void Internal_LogException(Exception exception, Object obj)
public void LogFormat(LogType logType, Object context, string format, Object[] args)
public void LogException(Exception exception, Object context)
}
public UnityEngine.DefaultExecutionOrder : Attribute {
private int <order>k__BackingField
public int order
public void .ctor(int order)
public int get_order()
private void set_order(int value)
}
public UnityEngine.DepthTextureMode : Enum {
public int value__
public DepthTextureMode None
public DepthTextureMode Depth
public DepthTextureMode DepthNormals
public DepthTextureMode MotionVectors
}
public UnityEngine.DetailPrototype : object {
private GameObject m_Prototype
private Texture2D m_PrototypeTexture
private Color m_HealthyColor
private Color m_DryColor
private float m_MinWidth
private float m_MaxWidth
private float m_MinHeight
private float m_MaxHeight
private float m_NoiseSpread
private float m_BendFactor
private int m_RenderMode
private int m_UsePrototypeMesh
public GameObject prototype
public Texture2D prototypeTexture
public float minWidth
public float maxWidth
public float minHeight
public float maxHeight
public float noiseSpread
public float bendFactor
public Color healthyColor
public Color dryColor
public DetailRenderMode renderMode
public bool usePrototypeMesh
public GameObject get_prototype()
public void set_prototype(GameObject value)
public Texture2D get_prototypeTexture()
public void set_prototypeTexture(Texture2D value)
public float get_minWidth()
public void set_minWidth(float value)
public float get_maxWidth()
public void set_maxWidth(float value)
public float get_minHeight()
public void set_minHeight(float value)
public float get_maxHeight()
public void set_maxHeight(float value)
public float get_noiseSpread()
public void set_noiseSpread(float value)
public float get_bendFactor()
public void set_bendFactor(float value)
public Color get_healthyColor()
public void set_healthyColor(Color value)
public Color get_dryColor()
public void set_dryColor(Color value)
public DetailRenderMode get_renderMode()
public void set_renderMode(DetailRenderMode value)
public bool get_usePrototypeMesh()
public void set_usePrototypeMesh(bool value)
}
public UnityEngine.DetailRenderMode : Enum {
public int value__
public DetailRenderMode GrassBillboard
public DetailRenderMode VertexLit
public DetailRenderMode Grass
}
public UnityEngine.DeviceOrientation : Enum {
public int value__
public DeviceOrientation Unknown
public DeviceOrientation Portrait
public DeviceOrientation PortraitUpsideDown
public DeviceOrientation LandscapeLeft
public DeviceOrientation LandscapeRight
public DeviceOrientation FaceUp
public DeviceOrientation FaceDown
}
public UnityEngine.DeviceType : Enum {
public int value__
public DeviceType Unknown
public DeviceType Handheld
public DeviceType Console
public DeviceType Desktop
}
public UnityEngine.Diagnostics.PlayerConnection : object {
public bool connected
public bool get_connected()
public void SendFile(string remoteFilePath, Byte[] data)
}
internal UnityEngine.DiagnosticSwitch : ValueType {
public string name
public string description
public DiagnosticSwitchFlags flags
public object value
public object minValue
public object maxValue
public object persistentValue
public EnumInfo enumInfo
private void AppendDiagnosticSwitchToList(List`1<DiagnosticSwitch> list, string name, string description, DiagnosticSwitchFlags flags, object value, object minValue, object maxValue, object persistentValue, EnumInfo enumInfo)
}
internal UnityEngine.DiagnosticSwitchFlags : Enum {
public int value__
public DiagnosticSwitchFlags None
public DiagnosticSwitchFlags CanChangeAfterEngineStart
}
internal UnityEngine.DisableBatchingType : Enum {
public int value__
public DisableBatchingType False
public DisableBatchingType True
public DisableBatchingType WhenLODFading
}
public UnityEngine.Display : object {
internal IntPtr nativeDisplay
public Display[] displays
private Display _mainDisplay
private DisplaysUpdatedDelegate onDisplaysUpdated
public int renderingWidth
public int renderingHeight
public int systemWidth
public int systemHeight
public RenderBuffer colorBuffer
public RenderBuffer depthBuffer
public bool active
public Display main
internal void .ctor(IntPtr nativeDisplay)
public int get_renderingWidth()
public int get_renderingHeight()
public int get_systemWidth()
public int get_systemHeight()
public RenderBuffer get_colorBuffer()
public RenderBuffer get_depthBuffer()
public bool get_active()
public void Activate()
public void Activate(int width, int height, int refreshRate)
public void SetParams(int width, int height, int x, int y)
public void SetRenderingResolution(int w, int h)
public bool MultiDisplayLicense()
public Vector3 RelativeMouseAt(Vector3 inputMouseCoordinates)
public Display get_main()
private void RecreateDisplayList(IntPtr[] nativeDisplay)
private void FireDisplaysUpdated()
public void add_onDisplaysUpdated(DisplaysUpdatedDelegate value)
public void remove_onDisplaysUpdated(DisplaysUpdatedDelegate value)
private void GetSystemExtImpl(IntPtr nativeDisplay, Int32& w, Int32& h)
private void GetRenderingExtImpl(IntPtr nativeDisplay, Int32& w, Int32& h)
private void GetRenderingBuffersImpl(IntPtr nativeDisplay, RenderBuffer& color, RenderBuffer& depth)
private void SetRenderingResolutionImpl(IntPtr nativeDisplay, int w, int h)
private void ActivateDisplayImpl(IntPtr nativeDisplay, int width, int height, int refreshRate)
private void SetParamsImpl(IntPtr nativeDisplay, int width, int height, int x, int y)
private int RelativeMouseAtImpl(int x, int y, Int32& rx, Int32& ry)
private bool GetActiveImp(IntPtr nativeDisplay)
}
public UnityEngine.DistanceJoint2D : AnchoredJoint2D {
public bool autoConfigureDistance
public float distance
public bool maxDistanceOnly
public bool get_autoConfigureDistance()
public void set_autoConfigureDistance(bool value)
public float get_distance()
public void set_distance(float value)
public bool get_maxDistanceOnly()
public void set_maxDistanceOnly(bool value)
}
internal UnityEngine.DoF : Enum {
public int value__
public DoF BodyDoFStart
public DoF HeadDoFStart
public DoF LeftLegDoFStart
public DoF RightLegDoFStart
public DoF LeftArmDoFStart
public DoF RightArmDoFStart
public DoF LeftThumbDoFStart
public DoF LeftIndexDoFStart
public DoF LeftMiddleDoFStart
public DoF LeftRingDoFStart
public DoF LeftLittleDoFStart
public DoF RightThumbDoFStart
public DoF RightIndexDoFStart
public DoF RightMiddleDoFStart
public DoF RightRingDoFStart
public DoF RightLittleDoFStart
public DoF LastDoF
}
internal UnityEngine.DrivenPropertyManager : object {
public void RegisterProperty(Object driver, Object target, string propertyPath)
public void UnregisterProperty(Object driver, Object target, string propertyPath)
public void UnregisterProperties(Object driver)
private void RegisterPropertyInternal(Object driver, Object target, string propertyPath)
private void UnregisterPropertyInternal(Object driver, Object target, string propertyPath)
private void UnregisterPropertiesInternal(Object driver)
}
public UnityEngine.DrivenRectTransformTracker : ValueType {
internal bool CanRecordModifications()
public void Add(Object driver, RectTransform rectTransform, DrivenTransformProperties drivenProperties)
public void Clear()
}
public UnityEngine.DrivenTransformProperties : Enum {
public int value__
public DrivenTransformProperties None
public DrivenTransformProperties All
public DrivenTransformProperties AnchoredPositionX
public DrivenTransformProperties AnchoredPositionY
public DrivenTransformProperties AnchoredPositionZ
public DrivenTransformProperties Rotation
public DrivenTransformProperties ScaleX
public DrivenTransformProperties ScaleY
public DrivenTransformProperties ScaleZ
public DrivenTransformProperties AnchorMinX
public DrivenTransformProperties AnchorMinY
public DrivenTransformProperties AnchorMaxX
public DrivenTransformProperties AnchorMaxY
public DrivenTransformProperties SizeDeltaX
public DrivenTransformProperties SizeDeltaY
public DrivenTransformProperties PivotX
public DrivenTransformProperties PivotY
public DrivenTransformProperties AnchoredPosition
public DrivenTransformProperties AnchoredPosition3D
public DrivenTransformProperties Scale
public DrivenTransformProperties AnchorMin
public DrivenTransformProperties AnchorMax
public DrivenTransformProperties Anchors
public DrivenTransformProperties SizeDelta
public DrivenTransformProperties Pivot
}
public UnityEngine.DynamicGI : object {
public float indirectScale
public float updateThreshold
public bool synchronousMode
public float get_indirectScale()
public void set_indirectScale(float value)
public float get_updateThreshold()
public void set_updateThreshold(float value)
public void SetEmissive(Renderer renderer, Color color)
private void INTERNAL_CALL_SetEmissive(Renderer renderer, Color& color)
public void SetEnvironmentData(Single[] input)
public void UpdateMaterials(Renderer renderer)
public void UpdateMaterials(Object renderer)
public void UpdateMaterials(Object renderer, int x, int y, int width, int height)
public void UpdateEnvironment()
public bool get_synchronousMode()
public void set_synchronousMode(bool value)
}
public UnityEngine.EdgeCollider2D : Collider2D {
public float edgeRadius
public int edgeCount
public int pointCount
public Vector2[] points
public void Reset()
public float get_edgeRadius()
public void set_edgeRadius(float value)
public int get_edgeCount()
public int get_pointCount()
public Vector2[] get_points()
public void set_points(Vector2[] value)
}
public UnityEngine.Effector2D : Behaviour {
public bool useColliderMask
public int colliderMask
internal bool requiresCollider
internal bool designedForTrigger
internal bool designedForNonTrigger
public bool get_useColliderMask()
public void set_useColliderMask(bool value)
public int get_colliderMask()
public void set_colliderMask(int value)
internal bool get_requiresCollider()
internal bool get_designedForTrigger()
internal bool get_designedForNonTrigger()
}
public UnityEngine.EffectorForceMode2D : Enum {
public int value__
public EffectorForceMode2D Constant
public EffectorForceMode2D InverseLinear
public EffectorForceMode2D InverseSquared
}
public UnityEngine.EffectorSelection2D : Enum {
public int value__
public EffectorSelection2D Rigidbody
public EffectorSelection2D Collider
}
internal UnityEngine.EnumInfo : object {
public String[] names
public Int32[] values
public String[] annotations
public bool isFlags
internal EnumInfo CreateEnumInfoFromNativeEnum(String[] names, Int32[] values, String[] annotations, bool isFlags)
}
public UnityEngine.Event : object {
internal IntPtr m_Ptr
private Event s_Current
private Event s_MasterEvent
private Dictionary`2<string, int> <>f__switch$map0
public Vector2 mousePosition
public Vector2 delta
public Ray mouseRay
public bool shift
public bool control
public bool alt
public bool command
public bool capsLock
public bool numeric
public bool functionKey
public Event current
public bool isKey
public bool isMouse
public bool isScrollWheel
public EventType rawType
public EventType type
public int button
public EventModifiers modifiers
public float pressure
public int clickCount
public char character
public string commandName
public KeyCode keyCode
public int displayIndex
public void .ctor(int displayIndex)
public void .ctor(Event other)
private void .ctor(IntPtr ptr)
protected void Finalize()
internal void CleanupRoots()
public Vector2 get_mousePosition()
public void set_mousePosition(Vector2 value)
public Vector2 get_delta()
public void set_delta(Vector2 value)
public Ray get_mouseRay()
public void set_mouseRay(Ray value)
public bool get_shift()
public void set_shift(bool value)
public bool get_control()
public void set_control(bool value)
public bool get_alt()
public void set_alt(bool value)
public bool get_command()
public void set_command(bool value)
public bool get_capsLock()
public void set_capsLock(bool value)
public bool get_numeric()
public void set_numeric(bool value)
public bool get_functionKey()
public Event get_current()
public void set_current(Event value)
private void Internal_MakeMasterEventCurrent(int displayIndex)
public bool get_isKey()
public bool get_isMouse()
public bool get_isScrollWheel()
public Event KeyboardEvent(string key)
public int GetHashCode()
public bool Equals(object obj)
public string ToString()
public void Use()
private void Init(int displayIndex)
private void Cleanup()
private void InitCopy(Event other)
private void InitPtr(IntPtr ptr)
internal void CopyFromPtr(IntPtr ptr)
public EventType get_rawType()
public EventType get_type()
public void set_type(EventType value)
public EventType GetTypeForControl(int controlID)
private void Internal_SetMousePosition(Vector2 value)
private void INTERNAL_CALL_Internal_SetMousePosition(Event self, Vector2& value)
private void Internal_GetMousePosition(Vector2& value)
private void Internal_SetMouseDelta(Vector2 value)
private void INTERNAL_CALL_Internal_SetMouseDelta(Event self, Vector2& value)
private void Internal_GetMouseDelta(Vector2& value)
public int get_button()
public void set_button(int value)
public EventModifiers get_modifiers()
public void set_modifiers(EventModifiers value)
public float get_pressure()
public void set_pressure(float value)
public int get_clickCount()
public void set_clickCount(int value)
public char get_character()
public void set_character(char value)
public string get_commandName()
public void set_commandName(string value)
public KeyCode get_keyCode()
public void set_keyCode(KeyCode value)
private void Internal_SetNativeEvent(IntPtr ptr)
public int get_displayIndex()
public void set_displayIndex(int value)
private void Internal_Use()
public bool PopEvent(Event outEvent)
public int GetEventCount()
}
internal UnityEngine.EventInterests : ValueType {
private bool <wantsMouseMove>k__BackingField
private bool <wantsMouseEnterLeaveWindow>k__BackingField
public bool wantsMouseMove
public bool wantsMouseEnterLeaveWindow
public bool get_wantsMouseMove()
public void set_wantsMouseMove(bool value)
public bool get_wantsMouseEnterLeaveWindow()
public void set_wantsMouseEnterLeaveWindow(bool value)
public bool WantsEvent(EventType type)
}
public UnityEngine.EventModifiers : Enum {
public int value__
public EventModifiers None
public EventModifiers Shift
public EventModifiers Control
public EventModifiers Alt
public EventModifiers Command
public EventModifiers Numeric
public EventModifiers CapsLock
public EventModifiers FunctionKey
}
internal UnityEngine.Events.ArgumentCache : object {
private Object m_ObjectArgument
private string m_ObjectArgumentAssemblyTypeName
private int m_IntArgument
private float m_FloatArgument
private string m_StringArgument
private bool m_BoolArgument
public Object unityObjectArgument
public string unityObjectArgumentAssemblyTypeName
public int intArgument
public float floatArgument
public string stringArgument
public bool boolArgument
public Object get_unityObjectArgument()
public void set_unityObjectArgument(Object value)
public string get_unityObjectArgumentAssemblyTypeName()
public int get_intArgument()
public void set_intArgument(int value)
public float get_floatArgument()
public void set_floatArgument(float value)
public string get_stringArgument()
public void set_stringArgument(string value)
public bool get_boolArgument()
public void set_boolArgument(bool value)
private void TidyAssemblyTypeName()
public void OnBeforeSerialize()
public void OnAfterDeserialize()
}
internal UnityEngine.Events.BaseInvokableCall : object {
protected void .ctor(object target, MethodInfo function)
public void Invoke(Object[] args)
protected void ThrowOnInvalidArg(object arg)
protected bool AllowInvoke(Delegate delegate)
public bool Find(object targetObj, MethodInfo method)
}
internal UnityEngine.Events.CachedInvokableCall`1 : InvokableCall`1<T> {
private T m_Arg1
public void .ctor(Object target, MethodInfo theFunction, T argument)
public void Invoke(Object[] args)
public void Invoke(T arg0)
}
internal UnityEngine.Events.InvokableCall : BaseInvokableCall {
private UnityAction Delegate
public void .ctor(object target, MethodInfo theFunction)
public void .ctor(UnityAction action)
private void add_Delegate(UnityAction value)
private void remove_Delegate(UnityAction value)
public void Invoke(Object[] args)
public void Invoke()
public bool Find(object targetObj, MethodInfo method)
}
internal UnityEngine.Events.InvokableCall`1 : BaseInvokableCall {
private UnityAction`1<T1> Delegate
public void .ctor(object target, MethodInfo theFunction)
public void .ctor(UnityAction`1<T1> action)
protected void add_Delegate(UnityAction`1<T1> value)
protected void remove_Delegate(UnityAction`1<T1> value)
public void Invoke(Object[] args)
public void Invoke(T1 args0)
public bool Find(object targetObj, MethodInfo method)
}
internal UnityEngine.Events.InvokableCall`2 : BaseInvokableCall {
private UnityAction`2<T1, T2> Delegate
public void .ctor(object target, MethodInfo theFunction)
public void .ctor(UnityAction`2<T1, T2> action)
protected void add_Delegate(UnityAction`2<T1, T2> value)
protected void remove_Delegate(UnityAction`2<T1, T2> value)
public void Invoke(Object[] args)
public void Invoke(T1 args0, T2 args1)
public bool Find(object targetObj, MethodInfo method)
}
internal UnityEngine.Events.InvokableCall`3 : BaseInvokableCall {
private UnityAction`3<T1, T2, T3> Delegate
public void .ctor(object target, MethodInfo theFunction)
public void .ctor(UnityAction`3<T1, T2, T3> action)
protected void add_Delegate(UnityAction`3<T1, T2, T3> value)
protected void remove_Delegate(UnityAction`3<T1, T2, T3> value)
public void Invoke(Object[] args)
public void Invoke(T1 args0, T2 args1, T3 args2)
public bool Find(object targetObj, MethodInfo method)
}
internal UnityEngine.Events.InvokableCall`4 : BaseInvokableCall {
private UnityAction`4<T1, T2, T3, T4> Delegate
public void .ctor(object target, MethodInfo theFunction)
public void .ctor(UnityAction`4<T1, T2, T3, T4> action)
protected void add_Delegate(UnityAction`4<T1, T2, T3, T4> value)
protected void remove_Delegate(UnityAction`4<T1, T2, T3, T4> value)
public void Invoke(Object[] args)
public void Invoke(T1 args0, T2 args1, T3 args2, T4 args3)
public bool Find(object targetObj, MethodInfo method)
}
internal UnityEngine.Events.InvokableCallList : object {
private List`1<BaseInvokableCall> m_PersistentCalls
private List`1<BaseInvokableCall> m_RuntimeCalls
private List`1<BaseInvokableCall> m_ExecutingCalls
private bool m_NeedsUpdate
public int Count
public int get_Count()
public void AddPersistentInvokableCall(BaseInvokableCall call)
public void AddListener(BaseInvokableCall call)
public void RemoveListener(object targetObj, MethodInfo method)
public void Clear()
public void ClearPersistent()
public List`1<BaseInvokableCall> PrepareInvoke()
}
internal UnityEngine.Events.PersistentCall : object {
private Object m_Target
private string m_MethodName
private PersistentListenerMode m_Mode
private ArgumentCache m_Arguments
private UnityEventCallState m_CallState
public Object target
public string methodName
public PersistentListenerMode mode
public ArgumentCache arguments
public UnityEventCallState callState
public Object get_target()
public string get_methodName()
public PersistentListenerMode get_mode()
public void set_mode(PersistentListenerMode value)
public ArgumentCache get_arguments()
public UnityEventCallState get_callState()
public void set_callState(UnityEventCallState value)
public bool IsValid()
public BaseInvokableCall GetRuntimeCall(UnityEventBase theEvent)
private BaseInvokableCall GetObjectCall(Object target, MethodInfo method, ArgumentCache arguments)
public void RegisterPersistentListener(Object ttarget, string mmethodName)
public void UnregisterPersistentListener()
}
internal UnityEngine.Events.PersistentCallGroup : object {
private List`1<PersistentCall> m_Calls
public int Count
public int get_Count()
public PersistentCall GetListener(int index)
public IEnumerable`1<PersistentCall> GetListeners()
public void AddListener()
public void AddListener(PersistentCall call)
public void RemoveListener(int index)
public void Clear()
public void RegisterEventPersistentListener(int index, Object targetObj, string methodName)
public void RegisterVoidPersistentListener(int index, Object targetObj, string methodName)
public void RegisterObjectPersistentListener(int index, Object targetObj, Object argument, string methodName)
public void RegisterIntPersistentListener(int index, Object targetObj, int argument, string methodName)
public void RegisterFloatPersistentListener(int index, Object targetObj, float argument, string methodName)
public void RegisterStringPersistentListener(int index, Object targetObj, string argument, string methodName)
public void RegisterBoolPersistentListener(int index, Object targetObj, bool argument, string methodName)
public void UnregisterPersistentListener(int index)
public void RemoveListeners(Object target, string methodName)
public void Initialize(InvokableCallList invokableList, UnityEventBase unityEventBase)
}
public UnityEngine.Events.PersistentListenerMode : Enum {
public int value__
public PersistentListenerMode EventDefined
public PersistentListenerMode Void
public PersistentListenerMode Object
public PersistentListenerMode Int
public PersistentListenerMode Float
public PersistentListenerMode String
public PersistentListenerMode Bool
}
public UnityEngine.Events.UnityAction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.Events.UnityAction`1 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(T0 arg0)
public IAsyncResult BeginInvoke(T0 arg0, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.Events.UnityAction`2 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(T0 arg0, T1 arg1)
public IAsyncResult BeginInvoke(T0 arg0, T1 arg1, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.Events.UnityAction`3 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(T0 arg0, T1 arg1, T2 arg2)
public IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.Events.UnityAction`4 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3)
public IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.Events.UnityEvent : UnityEventBase {
private Object[] m_InvokeArray
public void AddListener(UnityAction call)
public void RemoveListener(UnityAction call)
protected MethodInfo FindMethod_Impl(string name, object targetObj)
internal BaseInvokableCall GetDelegate(object target, MethodInfo theFunction)
private BaseInvokableCall GetDelegate(UnityAction action)
public void Invoke()
}
public UnityEngine.Events.UnityEvent`1 : UnityEventBase {
private Object[] m_InvokeArray
public void AddListener(UnityAction`1<T0> call)
public void RemoveListener(UnityAction`1<T0> call)
protected MethodInfo FindMethod_Impl(string name, object targetObj)
internal BaseInvokableCall GetDelegate(object target, MethodInfo theFunction)
private BaseInvokableCall GetDelegate(UnityAction`1<T0> action)
public void Invoke(T0 arg0)
}
public UnityEngine.Events.UnityEvent`2 : UnityEventBase {
private Object[] m_InvokeArray
public void AddListener(UnityAction`2<T0, T1> call)
public void RemoveListener(UnityAction`2<T0, T1> call)
protected MethodInfo FindMethod_Impl(string name, object targetObj)
internal BaseInvokableCall GetDelegate(object target, MethodInfo theFunction)
private BaseInvokableCall GetDelegate(UnityAction`2<T0, T1> action)
public void Invoke(T0 arg0, T1 arg1)
}
public UnityEngine.Events.UnityEvent`3 : UnityEventBase {
private Object[] m_InvokeArray
public void AddListener(UnityAction`3<T0, T1, T2> call)
public void RemoveListener(UnityAction`3<T0, T1, T2> call)
protected MethodInfo FindMethod_Impl(string name, object targetObj)
internal BaseInvokableCall GetDelegate(object target, MethodInfo theFunction)
private BaseInvokableCall GetDelegate(UnityAction`3<T0, T1, T2> action)
public void Invoke(T0 arg0, T1 arg1, T2 arg2)
}
public UnityEngine.Events.UnityEvent`4 : UnityEventBase {
private Object[] m_InvokeArray
public void AddListener(UnityAction`4<T0, T1, T2, T3> call)
public void RemoveListener(UnityAction`4<T0, T1, T2, T3> call)
protected MethodInfo FindMethod_Impl(string name, object targetObj)
internal BaseInvokableCall GetDelegate(object target, MethodInfo theFunction)
private BaseInvokableCall GetDelegate(UnityAction`4<T0, T1, T2, T3> action)
public void Invoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3)
}
public UnityEngine.Events.UnityEventBase : object {
private InvokableCallList m_Calls
private PersistentCallGroup m_PersistentCalls
private string m_TypeName
private bool m_CallsDirty
private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
protected MethodInfo FindMethod_Impl(string name, object targetObj)
internal BaseInvokableCall GetDelegate(object target, MethodInfo theFunction)
internal MethodInfo FindMethod(PersistentCall call)
internal MethodInfo FindMethod(string name, object listener, PersistentListenerMode mode, Type argumentType)
public int GetPersistentEventCount()
public Object GetPersistentTarget(int index)
public string GetPersistentMethodName(int index)
private void DirtyPersistentCalls()
private void RebuildPersistentCallsIfNeeded()
public void SetPersistentListenerState(int index, UnityEventCallState state)
protected void AddListener(object targetObj, MethodInfo method)
internal void AddCall(BaseInvokableCall call)
protected void RemoveListener(object targetObj, MethodInfo method)
public void RemoveAllListeners()
internal List`1<BaseInvokableCall> PrepareInvoke()
protected void Invoke(Object[] parameters)
public string ToString()
public MethodInfo GetValidMethodInfo(object obj, string functionName, Type[] argumentTypes)
}
public UnityEngine.Events.UnityEventCallState : Enum {
public int value__
public UnityEventCallState Off
public UnityEventCallState EditorAndRuntime
public UnityEventCallState RuntimeOnly
}
public UnityEngine.EventType : Enum {
public int value__
public EventType MouseDown
public EventType MouseUp
public EventType MouseMove
public EventType MouseDrag
public EventType KeyDown
public EventType KeyUp
public EventType ScrollWheel
public EventType Repaint
public EventType Layout
public EventType DragUpdated
public EventType DragPerform
public EventType DragExited
public EventType Ignore
public EventType Used
public EventType ValidateCommand
public EventType ExecuteCommand
public EventType ContextClick
public EventType MouseEnterWindow
public EventType MouseLeaveWindow
public EventType mouseDown
public EventType mouseUp
public EventType mouseMove
public EventType mouseDrag
public EventType keyDown
public EventType keyUp
public EventType scrollWheel
public EventType repaint
public EventType layout
public EventType dragUpdated
public EventType dragPerform
public EventType ignore
public EventType used
}
public UnityEngine.Experimental.Rendering.CullingParameters : ValueType {
public int isOrthographic
public LODParameters lodParameters
private <_cullingPlanes>__FixedBuffer0 _cullingPlanes
public int cullingPlaneCount
public int cullingMask
private long sceneMask
private <_layerFarCullDistances>__FixedBuffer1 _layerFarCullDistances
private int layerCull
public Matrix4x4 cullingMatrix
public Vector3 position
public float shadowDistance
private int _cullingFlags
private int _cameraInstanceID
public ReflectionProbeSortOptions reflectionProbeSortOptions
public float GetLayerCullDistance(int layerIndex)
public void SetLayerCullDistance(int layerIndex, float distance)
public Plane GetCullingPlane(int index)
public void SetCullingPlane(int index, Plane plane)
}
public UnityEngine.Experimental.Rendering.CullResults : ValueType {
public VisibleLight[] visibleLights
public VisibleLight[] visibleOffscreenVertexLights
public VisibleReflectionProbe[] visibleReflectionProbes
internal IntPtr cullResults
public bool GetCullingParameters(Camera camera, CullingParameters& cullingParameters)
private bool GetCullingParameters_Internal(Camera camera, CullingParameters& cullingParameters, int managedCullingParametersSize)
internal void Internal_Cull(CullingParameters& parameters, ScriptableRenderContext renderLoop, CullResults& results)
private void INTERNAL_CALL_Internal_Cull(CullingParameters& parameters, ScriptableRenderContext& renderLoop, CullResults& results)
public CullResults Cull(CullingParameters& parameters, ScriptableRenderContext renderLoop)
public bool Cull(Camera camera, ScriptableRenderContext renderLoop, CullResults& results)
public bool GetShadowCasterBounds(int lightIndex, Bounds& outBounds)
private bool GetShadowCasterBounds(IntPtr cullResults, int lightIndex, Bounds& bounds)
public int GetLightIndicesCount()
private int GetLightIndicesCount(IntPtr cullResults)
public void FillLightIndices(ComputeBuffer computeBuffer)
private void FillLightIndices(IntPtr cullResults, ComputeBuffer computeBuffer)
internal Int32[] GetLightIndexMap()
private Int32[] GetLightIndexMap(IntPtr cullResults)
internal void SetLightIndexMap(Int32[] mapping)
private void SetLightIndexMap(IntPtr cullResults, Int32[] mapping)
public bool ComputeSpotShadowMatricesAndCullingPrimitives(int activeLightIndex, Matrix4x4& viewMatrix, Matrix4x4& projMatrix, ShadowSplitData& shadowSplitData)
private bool ComputeSpotShadowMatricesAndCullingPrimitives(IntPtr cullResults, int activeLightIndex, Matrix4x4& viewMatrix, Matrix4x4& projMatrix, ShadowSplitData& shadowSplitData)
public bool ComputePointShadowMatricesAndCullingPrimitives(int activeLightIndex, CubemapFace cubemapFace, float fovBias, Matrix4x4& viewMatrix, Matrix4x4& projMatrix, ShadowSplitData& shadowSplitData)
private bool ComputePointShadowMatricesAndCullingPrimitives(IntPtr cullResults, int activeLightIndex, CubemapFace cubemapFace, float fovBias, Matrix4x4& viewMatrix, Matrix4x4& projMatrix, ShadowSplitData& shadowSplitData)
public bool ComputeDirectionalShadowMatricesAndCullingPrimitives(int activeLightIndex, int splitIndex, int splitCount, Vector3 splitRatio, int shadowResolution, float shadowNearPlaneOffset, Matrix4x4& viewMatrix, Matrix4x4& projMatrix, ShadowSplitData& shadowSplitData)
private bool ComputeDirectionalShadowMatricesAndCullingPrimitives(IntPtr cullResults, int activeLightIndex, int splitIndex, int splitCount, Vector3 splitRatio, int shadowResolution, float shadowNearPlaneOffset, Matrix4x4& viewMatrix, Matrix4x4& projMatrix, ShadowSplitData& shadowSplitData)
private bool INTERNAL_CALL_ComputeDirectionalShadowMatricesAndCullingPrimitives(IntPtr cullResults, int activeLightIndex, int splitIndex, int splitCount, Vector3& splitRatio, int shadowResolution, float shadowNearPlaneOffset, Matrix4x4& viewMatrix, Matrix4x4& projMatrix, ShadowSplitData& shadowSplitData)
}
public UnityEngine.Experimental.Rendering.DrawRendererFlags : Enum {
public int value__
public DrawRendererFlags None
public DrawRendererFlags EnableDynamicBatching
public DrawRendererFlags EnableInstancing
}
public UnityEngine.Experimental.Rendering.DrawRendererSettings : ValueType {
public DrawRendererSortSettings sorting
public ShaderPassName shaderPassName
public InputFilter inputFilter
public RendererConfiguration rendererConfiguration
public DrawRendererFlags flags
private IntPtr _cullResults
public CullResults cullResults
public void .ctor(CullResults cullResults, Camera camera, ShaderPassName shaderPassName)
public void set_cullResults(CullResults value)
private void InitializeSortSettings(Camera camera, DrawRendererSortSettings& sortSettings)
}
public UnityEngine.Experimental.Rendering.DrawRendererSortSettings : ValueType {
public Matrix4x4 worldToCameraMatrix
public Vector3 cameraPosition
public SortFlags flags
private int _sortOrthographic
public bool sortOrthographic
public bool get_sortOrthographic()
public void set_sortOrthographic(bool value)
}
public UnityEngine.Experimental.Rendering.DrawShadowsSettings : ValueType {
private IntPtr _cullResults
public int lightIndex
public ShadowSplitData splitData
public CullResults cullResults
public void .ctor(CullResults cullResults, int lightIndex)
public void set_cullResults(CullResults value)
}
public UnityEngine.Experimental.Rendering.InputFilter : ValueType {
public int renderQueueMin
public int renderQueueMax
public int layerMask
public InputFilter Default()
public void SetQueuesOpaque()
public void SetQueuesTransparent()
}
public UnityEngine.Experimental.Rendering.IRenderPipeline {
public bool disposed
public bool get_disposed()
public void Render(ScriptableRenderContext renderContext, Camera[] cameras)
}
public UnityEngine.Experimental.Rendering.IRenderPipelineAsset {
public void DestroyCreatedInstances()
public IRenderPipeline CreatePipeline()
}
public UnityEngine.Experimental.Rendering.LODParameters : ValueType {
public bool isOrthographic
public Vector3 cameraPosition
public float fieldOfView
public float orthoSize
public int cameraPixelHeight
}
public UnityEngine.Experimental.Rendering.ReflectionProbeSortOptions : Enum {
public int value__
public ReflectionProbeSortOptions None
public ReflectionProbeSortOptions Importance
public ReflectionProbeSortOptions Size
public ReflectionProbeSortOptions ImportanceThenSize
}
public UnityEngine.Experimental.Rendering.RendererConfiguration : Enum {
public int value__
public RendererConfiguration None
public RendererConfiguration PerObjectLightProbe
public RendererConfiguration PerObjectReflectionProbes
public RendererConfiguration PerObjectLightProbeProxyVolume
public RendererConfiguration PerObjectLightmaps
public RendererConfiguration ProvideLightIndices
}
public UnityEngine.Experimental.Rendering.RenderPipelineAsset : ScriptableObject {
private List`1<IRenderPipeline> m_CreatedPipelines
public void DestroyCreatedInstances()
public IRenderPipeline CreatePipeline()
protected IRenderPipeline InternalCreatePipeline()
protected IEnumerable`1<IRenderPipeline> CreatedInstances()
private void OnValidate()
private void OnDisable()
}
public UnityEngine.Experimental.Rendering.RenderPipelineManager : object {
private IRenderPipelineAsset s_CurrentPipelineAsset
private IRenderPipeline <currentPipeline>k__BackingField
public IRenderPipeline currentPipeline
public IRenderPipeline get_currentPipeline()
private void set_currentPipeline(IRenderPipeline value)
internal void CleanupRenderPipeline()
private void DoRenderLoop_Internal(IRenderPipelineAsset pipe, Camera[] cameras, IntPtr loopPtr)
private void PrepareRenderPipeline(IRenderPipelineAsset pipe)
}
public UnityEngine.Experimental.Rendering.ScriptableRenderContext : ValueType {
private IntPtr m_Ptr
internal void .ctor(IntPtr ptr)
public void Submit()
public void DrawRenderers(DrawRendererSettings& settings)
public void DrawShadows(DrawShadowsSettings& settings)
public void ExecuteCommandBuffer(CommandBuffer commandBuffer)
public void SetupCameraProperties(Camera camera)
public void DrawSkybox(Camera camera)
private void Submit_Internal()
private void DrawRenderers_Internal(DrawRendererSettings& settings)
private void DrawShadows_Internal(DrawShadowsSettings& settings)
private void ExecuteCommandBuffer_Internal(CommandBuffer commandBuffer)
private void SetupCameraProperties_Internal(Camera camera)
private void DrawSkybox_Internal(Camera camera)
internal void CheckValid()
}
public UnityEngine.Experimental.Rendering.ShaderPassName : ValueType {
private int nameIndex
public void .ctor(string name)
private int Init(string name)
}
public UnityEngine.Experimental.Rendering.ShadowSplitData : ValueType {
public int cullingPlaneCount
private <_cullingPlanes>__FixedBuffer2 _cullingPlanes
public Vector4 cullingSphere
public Plane GetCullingPlane(int index)
public void SetCullingPlane(int index, Plane plane)
}
public UnityEngine.Experimental.Rendering.SortFlags : Enum {
public int value__
public SortFlags None
public SortFlags SortingLayer
public SortFlags RenderQueue
public SortFlags BackToFront
public SortFlags QuantizedFrontToBack
public SortFlags OptimizeStateChanges
public SortFlags CanvasOrder
public SortFlags CommonOpaque
public SortFlags CommonTransparent
}
public UnityEngine.Experimental.Rendering.VisibleLight : ValueType {
public LightType lightType
public Color finalColor
public Rect screenRect
public Matrix4x4 localToWorld
public float range
public float spotAngle
private int instanceId
public VisibleLightFlags flags
public Light light
public Light get_light()
private Light GetLightObject(int instanceId)
}
public UnityEngine.Experimental.Rendering.VisibleLightFlags : Enum {
public int value__
public VisibleLightFlags None
public VisibleLightFlags IntersectsNearPlane
public VisibleLightFlags IntersectsFarPlane
}
public UnityEngine.Experimental.Rendering.VisibleReflectionProbe : ValueType {
public Bounds bounds
public Matrix4x4 localToWorld
public Vector4 hdr
public Vector3 center
public float blendDistance
public int importance
public int boxProjection
private int instanceId
private int textureId
public Texture texture
public ReflectionProbe probe
public Texture get_texture()
private Texture GetTextureObject(int textureId)
public ReflectionProbe get_probe()
private ReflectionProbe GetReflectionProbeObject(int instanceId)
}
internal UnityEngine.Experimental.UIElements.BaseVisualElementPanel : object {
private VisualElement <focusedElement>k__BackingField
private IStylePainter <stylePainter>k__BackingField
public VisualElement focusedElement
public EventInterests IMGUIEventInterests
public int instanceID
public LoadResourceFunction loadResourceFunc
public int IMGUIContainersCount
internal IStylePainter stylePainter
public VisualContainer visualTree
public IDispatcher dispatcher
public IScheduler scheduler
public IDataWatchService dataWatch
public ContextType contextType
public VisualElement get_focusedElement()
public void set_focusedElement(VisualElement value)
public EventInterests get_IMGUIEventInterests()
public void set_IMGUIEventInterests(EventInterests value)
public int get_instanceID()
protected void set_instanceID(int value)
public LoadResourceFunction get_loadResourceFunc()
protected void set_loadResourceFunc(LoadResourceFunction value)
public int get_IMGUIContainersCount()
public void set_IMGUIContainersCount(int value)
public void Repaint(Event e)
public void ValidateLayout()
internal IStylePainter get_stylePainter()
internal void set_stylePainter(IStylePainter value)
public VisualContainer get_visualTree()
public IDispatcher get_dispatcher()
protected void set_dispatcher(IDispatcher value)
public IScheduler get_scheduler()
public IDataWatchService get_dataWatch()
protected void set_dataWatch(IDataWatchService value)
public ContextType get_contextType()
protected void set_contextType(ContextType value)
public VisualElement Pick(Vector2 point)
}
public UnityEngine.Experimental.UIElements.Button : VisualElement {
private Clickable clickable
public void .ctor(Action clickEvent)
}
public UnityEngine.Experimental.UIElements.ChangeType : Enum {
public int value__
public ChangeType Layout
public ChangeType Styles
public ChangeType Transform
public ChangeType StylesPath
public ChangeType Repaint
}
internal UnityEngine.Experimental.UIElements.ClampedDragger : Clickable {
private Action dragging
private DragDirection <dragDirection>k__BackingField
private Slider <slider>k__BackingField
private Vector2 <startMousePosition>k__BackingField
public DragDirection dragDirection
private Slider slider
public Vector2 startMousePosition
public Vector2 delta
public void .ctor(Slider slider, Action clickHandler, Action dragHandler)
public void add_dragging(Action value)
public void remove_dragging(Action value)
public DragDirection get_dragDirection()
public void set_dragDirection(DragDirection value)
private Slider get_slider()
private void set_slider(Slider value)
public Vector2 get_startMousePosition()
private void set_startMousePosition(Vector2 value)
public Vector2 get_delta()
public EventPropagation HandleEvent(Event evt, VisualElement finalTarget)
}
public UnityEngine.Experimental.UIElements.Clickable : MouseManipulator {
private Action clicked
private long m_Delay
private long m_Interval
private Vector2 <lastMousePosition>k__BackingField
public Vector2 lastMousePosition
public void .ctor(Action handler, long delay, long interval)
public void .ctor(Action handler)
public void add_clicked(Action value)
public void remove_clicked(Action value)
public Vector2 get_lastMousePosition()
private void set_lastMousePosition(Vector2 value)
private void OnTimer(TimerState timerState)
private bool IsRepeatable()
public EventPropagation HandleEvent(Event evt, VisualElement finalTarget)
}
public UnityEngine.Experimental.UIElements.ContextType : Enum {
public int value__
public ContextType Player
public ContextType Editor
}
internal UnityEngine.Experimental.UIElements.EventDispatcher : object {
private IEventHandler <capture>k__BackingField
private VisualElement m_ElementUnderMouse
public IEventHandler capture
private VisualElement elementUnderMouse
public IEventHandler get_capture()
public void set_capture(IEventHandler value)
public void ReleaseCapture(IEventHandler handler)
public void RemoveCapture()
public void TakeCapture(IEventHandler handler)
private VisualElement get_elementUnderMouse()
private void set_elementUnderMouse(VisualElement value)
public EventPropagation DispatchEvent(Event e, BaseVisualElementPanel panel)
private EventPropagation SendEventToIMGUIContainers(VisualElement root, Event evt, VisualElement skipElement)
private EventPropagation PropagateEvent(VisualElement target, Event evt)
private void SetFocusedElement(BaseVisualElementPanel panel, VisualElement element)
private List`1<VisualElement> BuildPropagationPath(VisualElement elem)
}
public UnityEngine.Experimental.UIElements.EventHandlerExtensions : object {
public void TakeCapture(IEventHandler handler)
public bool HasCapture(IEventHandler handler)
public void ReleaseCapture(IEventHandler handler)
public void RemoveCapture(IEventHandler handler)
public ScheduleBuilder Schedule(IEventHandler handler, Action`1<TimerState> timerUpdateEvent)
public void Unschedule(IEventHandler handler, Action`1<TimerState> timerUpdateEvent)
}
public UnityEngine.Experimental.UIElements.EventPhase : Enum {
public int value__
public EventPhase Capture
public EventPhase BubbleUp
}
public UnityEngine.Experimental.UIElements.EventPropagation : Enum {
public int value__
public EventPropagation Continue
public EventPropagation Stop
}
public UnityEngine.Experimental.UIElements.IDataWatchHandle {
public Object watched
public bool disposed
public Object get_watched()
public bool get_disposed()
}
public UnityEngine.Experimental.UIElements.IDataWatchService {
public IDataWatchHandle AddWatch(VisualElement watcher, Object watched, Action OnDataChanged)
}
public UnityEngine.Experimental.UIElements.IDispatcher {
public IEventHandler capture
public IEventHandler get_capture()
public void ReleaseCapture(IEventHandler handler)
public void RemoveCapture()
public void TakeCapture(IEventHandler handler)
}
public UnityEngine.Experimental.UIElements.IEventHandler {
public IPanel panel
public EventPhase phaseInterest
public EventPropagation HandleEvent(Event evt, VisualElement finalTarget)
public IPanel get_panel()
public EventPhase get_phaseInterest()
public void set_phaseInterest(EventPhase value)
public void OnLostCapture()
public void OnLostKeyboardFocus()
}
public UnityEngine.Experimental.UIElements.Image : VisualElement {
private Texture <image>k__BackingField
private ScaleMode <scaleMode>k__BackingField
public Texture image
public ScaleMode scaleMode
public Texture get_image()
public void set_image(Texture value)
public ScaleMode get_scaleMode()
public void set_scaleMode(ScaleMode value)
internal void DoRepaint(IStylePainter painter)
}
public UnityEngine.Experimental.UIElements.IManipulator {
public VisualElement target
public VisualElement get_target()
public void set_target(VisualElement value)
}
internal UnityEngine.Experimental.UIElements.IMBox : IMElement {
protected int DoGenerateControlID()
internal void DoRepaint(IStylePainter args)
}
internal UnityEngine.Experimental.UIElements.IMButton : IMElement {
private bool <wasPressed>k__BackingField
public bool wasPressed
public bool get_wasPressed()
private void set_wasPressed(bool value)
public bool OnGUI(Event evt)
protected int DoGenerateControlID()
internal void DoRepaint(IStylePainter args)
protected bool DoMouseDown(MouseEventArgs args)
protected bool DoMouseMove(MouseEventArgs args)
protected bool DoMouseUp(MouseEventArgs args)
protected bool DoKeyDown(KeyboardEventArgs args)
protected bool DoMouseDrag(MouseEventArgs args)
}
internal UnityEngine.Experimental.UIElements.IMButtonGrid : IMElement {
private GUIContent[] s_EmptyContents
private GUIContent[] m_Contents
private int <xCount>k__BackingField
private int <selected>k__BackingField
private GUIStyle m_FirstStyle
private GUIStyle m_MidStyle
private GUIStyle m_LastStyle
public GUIContent[] contents
public int xCount
public int selected
public GUIStyle firstStyle
public GUIStyle midStyle
public GUIStyle lastStyle
public GUIContent[] get_contents()
public void set_contents(GUIContent[] value)
public int get_xCount()
public void set_xCount(int value)
public int get_selected()
public void set_selected(int value)
public GUIStyle get_firstStyle()
public void set_firstStyle(GUIStyle value)
public GUIStyle get_midStyle()
public void set_midStyle(GUIStyle value)
public GUIStyle get_lastStyle()
public void set_lastStyle(GUIStyle value)
protected int DoGenerateControlID()
protected bool DoMouseDown(MouseEventArgs args)
protected bool DoMouseDrag(MouseEventArgs args)
protected bool DoMouseUp(MouseEventArgs args)
internal void DoRepaint(IStylePainter args)
private Rect[] CalcMouseRects(Rect position, int count, int xCount, float elemWidth, float elemHeight, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle, bool addBorders)
private int GetButtonGridMouseSelection(Rect[] buttonRects, Vector2 mousePos, bool findNearest)
private int CalcTotalHorizSpacing()
private bool ComputeElemDimensions(Int32& count, Single& elemWidth, Single& elemHeight)
}
internal UnityEngine.Experimental.UIElements.IMContainer : VisualContainer {
private int <id>k__BackingField
private bool <isTrashed>k__BackingField
private GUIStyle m_GUIStyle
public Vector2 translation
public int id
public bool isTrashed
internal GUIStyle style
public Vector2 get_translation()
public void set_translation(Vector2 value)
public int get_id()
public void set_id(int value)
public bool get_isTrashed()
public void set_isTrashed(bool value)
internal GUIStyle get_style()
internal void set_style(GUIStyle value)
public void OnTrash()
public void OnReuse()
public bool OnGUI(Event evt)
public void GenerateControlID()
}
internal UnityEngine.Experimental.UIElements.IMElement : VisualElement {
private FocusType <focusType>k__BackingField
private int <id>k__BackingField
private GUIStyle m_GUIStyle
private Rect <position>k__BackingField
public int NonInteractiveControlID
private bool <isTrashed>k__BackingField
public FocusType focusType
public int id
public GUIStyle style
public Rect position
public bool isTrashed
public FocusType get_focusType()
public void set_focusType(FocusType value)
public int get_id()
protected void set_id(int value)
public GUIStyle get_style()
public void set_style(GUIStyle value)
public Rect get_position()
public void set_position(Rect value)
public bool get_isTrashed()
public void set_isTrashed(bool value)
public void OnTrash()
public void OnReuse()
public bool OnGUI(Event evt)
public void AssignControlID(int id)
public void GenerateControlID()
protected int DoGenerateControlID()
protected bool DoMouseDown(MouseEventArgs args)
protected bool DoMouseMove(MouseEventArgs args)
protected bool DoMouseUp(MouseEventArgs args)
protected bool DoKeyDown(KeyboardEventArgs args)
protected bool DoKeyUp(KeyboardEventArgs args)
protected bool DoMouseDrag(MouseEventArgs args)
protected bool DoDragUpdated(MouseEventArgs args)
}
internal UnityEngine.Experimental.UIElements.IMGroup : IMContainer {
public bool OnGUI(Event evt)
public void GenerateControlID()
internal void DoRepaint(IStylePainter args)
}
public UnityEngine.Experimental.UIElements.IMGUIContainer : VisualElement {
private Action m_OnGUIHandler
private int <executionContext>k__BackingField
private Rect <lastWorldClip>k__BackingField
private LayoutCache m_Cache
private ContextType <contextType>k__BackingField
private int <GUIDepth>k__BackingField
private GUIGlobals m_GUIGlobals
public int executionContext
internal Rect lastWorldClip
private LayoutCache cache
public ContextType contextType
internal int GUIDepth
public void .ctor(Action onGUIHandler)
public int get_executionContext()
public void set_executionContext(int value)
internal Rect get_lastWorldClip()
internal void set_lastWorldClip(Rect value)
private LayoutCache get_cache()
public ContextType get_contextType()
public void set_contextType(ContextType value)
internal int get_GUIDepth()
private void set_GUIDepth(int value)
internal void DoRepaint(IStylePainter painter)
internal void ChangePanel(BaseVisualElementPanel p)
private void SaveGlobals()
private void RestoreGlobals()
private bool DoOnGUI(Event evt)
public void OnLostKeyboardFocus()
public EventPropagation HandleEvent(Event evt, VisualElement finalTarget)
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
}
internal UnityEngine.Experimental.UIElements.IMImage : IMElement {
private Texture <image>k__BackingField
private ScaleMode <scaleMode>k__BackingField
private float <imageAspect>k__BackingField
private bool <alphaBlend>k__BackingField
public Texture image
public ScaleMode scaleMode
public float imageAspect
public bool alphaBlend
public Texture get_image()
public void set_image(Texture value)
public ScaleMode get_scaleMode()
public void set_scaleMode(ScaleMode value)
public float get_imageAspect()
public void set_imageAspect(float value)
public bool get_alphaBlend()
public void set_alphaBlend(bool value)
protected int DoGenerateControlID()
internal void DoRepaint(IStylePainter args)
}
internal UnityEngine.Experimental.UIElements.IMKeyboardTextField : IMTextField {
private bool m_Changed
public bool OnGUI(Event evt)
internal void DoRepaint(IStylePainter args)
protected bool DoMouseDown(MouseEventArgs args)
protected bool DoMouseUp(MouseEventArgs args)
protected bool DoMouseDrag(MouseEventArgs args)
protected bool DoKeyDown(KeyboardEventArgs args)
}
internal UnityEngine.Experimental.UIElements.IMLabel : IMElement {
public void ShowTooltip(Vector2 tooltipPos)
protected int DoGenerateControlID()
internal void DoRepaint(IStylePainter args)
}
internal UnityEngine.Experimental.UIElements.IMRepeatButton : IMElement {
private bool <isPressed>k__BackingField
public bool isPressed
public bool get_isPressed()
private void set_isPressed(bool value)
public bool OnGUI(Event evt)
protected int DoGenerateControlID()
internal void DoRepaint(IStylePainter args)
protected bool DoMouseDown(MouseEventArgs args)
protected bool DoMouseUp(MouseEventArgs args)
protected bool DoMouseDrag(MouseEventArgs args)
protected bool DoKeyDown(KeyboardEventArgs args)
protected bool DoKeyUp(KeyboardEventArgs args)
}
internal UnityEngine.Experimental.UIElements.IMScroller : IMElement {
private float ScrollStepSize
private IMSlider m_Slider
private IMRepeatButton m_LeftButton
private IMRepeatButton m_RightButton
private float m_PageSize
private float m_LeftValue
private float m_RightValue
public DateTime m_NextScrollStepTime
private int s_ScrollControlId
private float <value>k__BackingField
public float value
public float get_value()
private void set_value(float value)
public void SetProperties(Rect pos, float val, float size, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUIStyle leftButton, GUIStyle rightButton, bool horiz)
public void OnReuse()
public bool OnGUI(Event evt)
protected int DoGenerateControlID()
private void GetRects(bool horiz, Rect pos, GUIStyle leftButton, GUIStyle rightButton, Rect& sliderRect, Rect& minRect, Rect& maxRect)
private bool OnScrollerButton(Event evt)
}
internal UnityEngine.Experimental.UIElements.IMScrollView : IMContainer {
private ScrollViewState m_State
private Vector2 m_ScrollPosition
private GUIStyle m_HorizontalScrollbar
private GUIStyle m_VerticalScrollbar
private GUIStyle m_Background
public Rect viewRect
private bool m_NeedsVertical
private bool m_NeedsHorizontal
private Rect m_ClipRect
private IMScroller m_HorizontalScroller
private IMScroller m_VerticalScroller
public Vector2 scrollPosition
public float scrollPositionHorizontal
public float scrollPositionVertical
public Vector2 get_scrollPosition()
private void set_scrollPosition(Vector2 value)
public float get_scrollPositionHorizontal()
public void set_scrollPositionHorizontal(float value)
public float get_scrollPositionVertical()
public void set_scrollPositionVertical(float value)
public void SetProperties(Rect pos, Vector2 scrollPos, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background)
public void OnReuse()
public void HandleScrollWheel(Event evt)
public bool OnGUI(Event evt)
public void ScrollTo(Rect pos)
public bool ScrollTowards(Rect pos, float maxDelta)
public void GenerateControlID()
private void CheckState()
private bool DoDragUpdated(MouseEventArgs args)
}
internal UnityEngine.Experimental.UIElements.IMSlider : IMElement {
private float <value>k__BackingField
private float m_PageSize
private float m_Start
private float m_End
private GUIStyle m_SliderStyle
private GUIStyle m_ThumbStyle
private bool m_Horiz
private DateTime <nextScrollStepTime>k__BackingField
private int <scrollTroughSide>k__BackingField
public float value
public DateTime nextScrollStepTime
private int scrollTroughSide
public float get_value()
public void set_value(float value)
public DateTime get_nextScrollStepTime()
public void set_nextScrollStepTime(DateTime value)
private int get_scrollTroughSide()
private void set_scrollTroughSide(int value)
public void SetProperties(Rect pos, float val, float pageSize, float start, float end, GUIStyle sliderStyle, GUIStyle thumbStyle, bool horiz)
public bool OnGUI(Event evt)
protected int DoGenerateControlID()
protected bool DoMouseDown(MouseEventArgs args)
protected bool DoMouseDrag(MouseEventArgs args)
protected bool DoMouseUp(MouseEventArgs args)
internal void DoRepaint(IStylePainter args)
private int CurrentScrollTroughSide(Vector2 mousePosition)
private bool IsEmptySlider()
private bool SupportsPageMovements()
private float PageMovementValue(Vector2 currentMousePos)
private float PageUpMovementBound()
private float ValueForCurrentMousePosition(Vector2 currentMousePos)
private float Clamp(float val)
private Rect ThumbSelectionRect()
private void StartDraggingWithValue(float dragStartValue, Vector2 currentMousePos)
private SliderState SliderState()
private Rect ThumbRect()
private Rect VerticalThumbRect()
private Rect HorizontalThumbRect()
private float Clampedvalue()
private float MousePosition(Vector2 currentMousePos)
private float ValuesPerPixel()
private float ThumbSize()
private float MaxValue()
private float MinValue()
}
internal UnityEngine.Experimental.UIElements.IMTextField : IMElement {
private TextEditor <editor>k__BackingField
private int <maxLength>k__BackingField
private bool <multiline>k__BackingField
public TextEditor editor
public int maxLength
public bool multiline
public TextEditor get_editor()
protected void set_editor(TextEditor value)
public int get_maxLength()
public void set_maxLength(int value)
public bool get_multiline()
public void set_multiline(bool value)
protected int DoGenerateControlID()
protected void SyncTextEditor()
}
internal UnityEngine.Experimental.UIElements.IMToggle : IMElement {
private bool <value>k__BackingField
public bool value
public bool get_value()
public void set_value(bool value)
public void ForceIdValue(int newId)
protected int DoGenerateControlID()
internal void DoRepaint(IStylePainter args)
protected bool DoMouseDown(MouseEventArgs args)
protected bool DoMouseUp(MouseEventArgs args)
protected bool DoKeyDown(KeyboardEventArgs args)
protected bool DoMouseDrag(MouseEventArgs args)
}
internal UnityEngine.Experimental.UIElements.IMTouchScreenTextField : IMTextField {
private int s_HotTextField
private string m_SecureText
private char m_MaskChar
public string secureText
public char maskChar
public string get_secureText()
public void set_secureText(string value)
public char get_maskChar()
public void set_maskChar(char value)
public bool OnGUI(Event evt)
protected int DoGenerateControlID()
internal void DoRepaint(IStylePainter args)
protected bool DoMouseDown(MouseEventArgs args)
}
internal UnityEngine.Experimental.UIElements.IOnGUIHandler {
public int id
public int get_id()
public bool OnGUI(Event evt)
public void GenerateControlID()
}
public UnityEngine.Experimental.UIElements.IPanel {
public VisualContainer visualTree
public IDispatcher dispatcher
public IScheduler scheduler
public IDataWatchService dataWatch
public ContextType contextType
public VisualContainer get_visualTree()
public IDispatcher get_dispatcher()
public IScheduler get_scheduler()
public IDataWatchService get_dataWatch()
public ContextType get_contextType()
public VisualElement Pick(Vector2 point)
}
internal UnityEngine.Experimental.UIElements.IRecyclable {
public bool isTrashed
public bool get_isTrashed()
public void set_isTrashed(bool value)
public void OnTrash()
public void OnReuse()
}
public UnityEngine.Experimental.UIElements.IScheduler {
public ScheduleBuilder Schedule(Action`1<TimerState> timerUpdateEvent, IEventHandler hanlder)
public void Unschedule(Action`1<TimerState> timerUpdateEvent)
}
internal UnityEngine.Experimental.UIElements.KeyboardEventArgs : ValueType {
private EventModifiers m_Modifiers
private char <character>k__BackingField
private KeyCode <keyCode>k__BackingField
public char character
public KeyCode keyCode
public bool shift
public bool alt
public void .ctor(char character, KeyCode keyCode, EventModifiers modifiers)
public char get_character()
private void set_character(char value)
public KeyCode get_keyCode()
private void set_keyCode(KeyCode value)
public bool get_shift()
public bool get_alt()
public Event ToEvent()
}
internal UnityEngine.Experimental.UIElements.KeyboardTextEditor : TextEditor {
internal bool m_Changed
private bool m_Dragged
private bool m_DragToPosition
private bool m_PostPoneMove
private bool m_SelectAllOnMouseUp
private string m_PreDrawCursorText
public void .ctor(TextField textField)
public EventPropagation HandleEvent(Event evt, VisualElement finalTarget)
private EventPropagation DoMouseDown(Event evt)
private EventPropagation DoMouseUp(Event evt)
private EventPropagation DoMouseDrag(Event evt)
private EventPropagation DoKeyDown(Event evt)
private EventPropagation DoValidateCommand(Event evt)
private EventPropagation DoExecuteCommand(Event evt)
public void PreDrawCursor(string newText)
public void PostDrawCursor()
}
public UnityEngine.Experimental.UIElements.Label : VisualElement {
public void .ctor(string text)
}
internal UnityEngine.Experimental.UIElements.LoadResourceFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Object Invoke(string pathName, Type type)
public IAsyncResult BeginInvoke(string pathName, Type type, AsyncCallback callback, object object)
public Object EndInvoke(IAsyncResult result)
}
public UnityEngine.Experimental.UIElements.Manipulator : object {
private VisualElement <target>k__BackingField
private EventPhase <phaseInterest>k__BackingField
public VisualElement target
public EventPhase phaseInterest
public IPanel panel
public VisualElement get_target()
public void set_target(VisualElement value)
public EventPhase get_phaseInterest()
public void set_phaseInterest(EventPhase value)
public IPanel get_panel()
public EventPropagation HandleEvent(Event evt, VisualElement finalTarget)
public void OnLostCapture()
public void OnLostKeyboardFocus()
}
public UnityEngine.Experimental.UIElements.ManipulatorActivationFilter : ValueType {
public MouseButton button
public EventModifiers modifiers
public bool Matches(Event evt)
private bool HasModifiers(Event evt)
}
public UnityEngine.Experimental.UIElements.MouseButton : Enum {
public int value__
public MouseButton LeftMouse
public MouseButton RightMouse
public MouseButton MiddleMouse
}
internal UnityEngine.Experimental.UIElements.MouseEventArgs : ValueType {
private EventModifiers m_Modifiers
private Vector2 <mousePosition>k__BackingField
private int <clickCount>k__BackingField
public Vector2 mousePosition
public int clickCount
public bool shift
public void .ctor(Vector2 pos, int clickCount, EventModifiers modifiers)
public Vector2 get_mousePosition()
private void set_mousePosition(Vector2 value)
public int get_clickCount()
private void set_clickCount(int value)
public bool get_shift()
}
public UnityEngine.Experimental.UIElements.MouseManipulator : Manipulator {
private List`1<ManipulatorActivationFilter> <activators>k__BackingField
private ManipulatorActivationFilter m_currentActivator
public List`1<ManipulatorActivationFilter> activators
public List`1<ManipulatorActivationFilter> get_activators()
private void set_activators(List`1<ManipulatorActivationFilter> value)
protected bool CanStartManipulation(Event evt)
protected bool CanStopManipulation(Event evt)
}
internal UnityEngine.Experimental.UIElements.OnStylesResolved : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(VisualElementStyles styles)
public IAsyncResult BeginInvoke(VisualElementStyles styles, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.Panel : BaseVisualElementPanel {
private StyleContext m_StyleContext
private VisualContainer m_RootContainer
private VisualContainer <defaultIMRoot>k__BackingField
private IDispatcher <dispatcher>k__BackingField
private IDataWatchService <dataWatch>k__BackingField
private TimerEventScheduler m_Scheduler
private int <instanceID>k__BackingField
private bool <allowPixelCaching>k__BackingField
private ContextType <contextType>k__BackingField
private EventInterests <IMGUIEventInterests>k__BackingField
private LoadResourceFunction <loadResourceFunc>k__BackingField
private int <IMGUIContainersCount>k__BackingField
private int kMaxValidateLayoutCount
private LoadResourceFunction <>f__mg$cache0
public VisualContainer visualTree
public VisualContainer defaultIMRoot
public IDispatcher dispatcher
public IDataWatchService dataWatch
public TimerEventScheduler timerEventScheduler
public IScheduler scheduler
internal StyleContext styleContext
public int instanceID
public bool allowPixelCaching
public ContextType contextType
public EventInterests IMGUIEventInterests
public LoadResourceFunction loadResourceFunc
public int IMGUIContainersCount
public void .ctor(int instanceID, ContextType contextType, LoadResourceFunction loadResourceDelegate, IDataWatchService dataWatch, IDispatcher dispatcher)
public VisualContainer get_visualTree()
public VisualContainer get_defaultIMRoot()
public void set_defaultIMRoot(VisualContainer value)
public IDispatcher get_dispatcher()
protected void set_dispatcher(IDispatcher value)
public IDataWatchService get_dataWatch()
protected void set_dataWatch(IDataWatchService value)
public TimerEventScheduler get_timerEventScheduler()
public IScheduler get_scheduler()
internal StyleContext get_styleContext()
public int get_instanceID()
protected void set_instanceID(int value)
public bool get_allowPixelCaching()
public void set_allowPixelCaching(bool value)
public ContextType get_contextType()
protected void set_contextType(ContextType value)
public EventInterests get_IMGUIEventInterests()
public void set_IMGUIEventInterests(EventInterests value)
public LoadResourceFunction get_loadResourceFunc()
protected void set_loadResourceFunc(LoadResourceFunction value)
public int get_IMGUIContainersCount()
public void set_IMGUIContainersCount(int value)
private VisualElement Pick(VisualElement root, Vector2 point)
public VisualElement Pick(Vector2 point)
private void ValidateStyling()
public void ValidateLayout()
private bool ValidateSubTree(VisualElement root)
private Rect ComputeAAAlignedBound(Rect position, Matrix4x4 mat)
public void PaintSubTree(Event e, VisualElement root, Matrix4x4 offset, Rect currentGlobalClip)
public void Repaint(Event e)
}
public UnityEngine.Experimental.UIElements.PickingMode : Enum {
public int value__
public PickingMode Position
public PickingMode Ignore
}
internal UnityEngine.Experimental.UIElements.PseudoStates : Enum {
public int value__
public PseudoStates Active
public PseudoStates Hover
public PseudoStates Checked
public PseudoStates Selected
public PseudoStates Disabled
public PseudoStates Focus
public PseudoStates Invisible
}
internal UnityEngine.Experimental.UIElements.Recycler : object {
public int MaxInstancesPerType
private Dictionary`2<Type, Stack`1<IRecyclable>> m_ReusableStacks
public int Count
public void Trash(IRecyclable recyclable)
public void Clear()
public int get_Count()
public TType TryReuse()
}
internal UnityEngine.Experimental.UIElements.RenderData : object {
public RenderTexture pixelCache
public Matrix4x4 worldTransForm
public Rect lastLayout
}
public UnityEngine.Experimental.UIElements.RepeatButton : VisualElement {
public void .ctor(Action clickEvent, long delay, long interval)
}
public UnityEngine.Experimental.UIElements.ScheduleBuilder : ValueType {
private ScheduledItem m_ScheduledItem
internal void .ctor(ScheduledItem scheduledItem)
public ScheduleBuilder StartingIn(long delay)
public ScheduleBuilder Every(long interval)
public ScheduleBuilder Until(Func`1<bool> condition)
}
internal UnityEngine.Experimental.UIElements.ScheduledItem : object {
public Action`1<TimerState> timerUpdateEvent
public Func`1<bool> timerUpdateStopCondition
public IEventHandler handler
private long <start>k__BackingField
private long <delay>k__BackingField
private long <interval>k__BackingField
public long start
public long delay
public long interval
public void .ctor(Action`1<TimerState> timerUpdateEvent, IEventHandler handler)
public long get_start()
public void set_start(long value)
public long get_delay()
public void set_delay(long value)
public long get_interval()
public void set_interval(long value)
public bool IsUpdatable()
}
public UnityEngine.Experimental.UIElements.Scroller : VisualContainer {
private Action`1<float> valueChanged
private Slider <slider>k__BackingField
private ScrollerButton <lowButton>k__BackingField
private ScrollerButton <highButton>k__BackingField
public Slider slider
public ScrollerButton lowButton
public ScrollerButton highButton
public float value
public float lowValue
public float highValue
public Direction direction
public bool enabled
public void .ctor(float lowValue, float highValue, Action`1<float> valueChanged, Direction direction)
public void add_valueChanged(Action`1<float> value)
public void remove_valueChanged(Action`1<float> value)
public Slider get_slider()
private void set_slider(Slider value)
public ScrollerButton get_lowButton()
private void set_lowButton(ScrollerButton value)
public ScrollerButton get_highButton()
private void set_highButton(ScrollerButton value)
public float get_value()
public void set_value(float value)
public float get_lowValue()
public float get_highValue()
public Direction get_direction()
public void set_direction(Direction value)
public bool get_enabled()
public void set_enabled(bool value)
public void PropagateEnabled(VisualContainer c, bool enabled)
public void Adjust(float factor)
private void OnSliderValueChange(float newValue)
public void ScrollPageUp()
public void ScrollPageDown()
}
public UnityEngine.Experimental.UIElements.ScrollerButton : VisualElement {
public Clickable clickable
public void .ctor(Action clickEvent, long delay, long interval)
}
public UnityEngine.Experimental.UIElements.ScrollView : VisualContainer {
private Vector2 <horizontalScrollerValues>k__BackingField
private Vector2 <verticalScrollerValues>k__BackingField
public Vector2 kDefaultScrollerValues
private bool <showHorizontal>k__BackingField
private bool <showVertical>k__BackingField
private Vector2 m_ScrollOffset
private VisualContainer <contentView>k__BackingField
private VisualContainer <contentViewport>k__BackingField
private Scroller <horizontalScroller>k__BackingField
private Scroller <verticalScroller>k__BackingField
public Vector2 horizontalScrollerValues
public Vector2 verticalScrollerValues
public bool showHorizontal
public bool showVertical
public bool needsHorizontal
public bool needsVertical
public Vector2 scrollOffset
public VisualContainer contentView
public VisualContainer contentViewport
public Scroller horizontalScroller
public Scroller verticalScroller
public void .ctor(Vector2 horizontalScrollerValues, Vector2 verticalScrollerValues)
public Vector2 get_horizontalScrollerValues()
public void set_horizontalScrollerValues(Vector2 value)
public Vector2 get_verticalScrollerValues()
public void set_verticalScrollerValues(Vector2 value)
public bool get_showHorizontal()
public void set_showHorizontal(bool value)
public bool get_showVertical()
public void set_showVertical(bool value)
public bool get_needsHorizontal()
public bool get_needsVertical()
public Vector2 get_scrollOffset()
public void set_scrollOffset(Vector2 value)
private void UpdateContentViewTransform()
public VisualContainer get_contentView()
private void set_contentView(VisualContainer value)
public VisualContainer get_contentViewport()
private void set_contentViewport(VisualContainer value)
public Scroller get_horizontalScroller()
private void set_horizontalScroller(Scroller value)
public Scroller get_verticalScroller()
private void set_verticalScroller(Scroller value)
protected internal void OnPostLayout(bool hasNewLayout)
public EventPropagation HandleEvent(Event evt, VisualElement finalTarget)
private void <ScrollView>m__0(float value)
private void <ScrollView>m__1(float value)
}
public UnityEngine.Experimental.UIElements.Slider : VisualContainer {
private VisualElement <dragElement>k__BackingField
private float <lowValue>k__BackingField
private float <highValue>k__BackingField
private float <pageSize>k__BackingField
private Action`1<float> valueChanged
private ClampedDragger <clampedDragger>k__BackingField
private Rect m_DragElementStartPos
private float m_Value
private Direction m_Direction
public VisualElement dragElement
public float lowValue
public float highValue
public float range
public float pageSize
internal ClampedDragger clampedDragger
public float value
public Direction direction
public void .ctor(float start, float end, Action`1<float> valueChanged, Direction direction, float pageSize)
public VisualElement get_dragElement()
private void set_dragElement(VisualElement value)
public float get_lowValue()
public void set_lowValue(float value)
public float get_highValue()
public void set_highValue(float value)
public float get_range()
public float get_pageSize()
public void set_pageSize(float value)
public void add_valueChanged(Action`1<float> value)
public void remove_valueChanged(Action`1<float> value)
internal ClampedDragger get_clampedDragger()
private void set_clampedDragger(ClampedDragger value)
public float get_value()
public void set_value(float value)
public Direction get_direction()
public void set_direction(Direction value)
private void SetSliderValueFromDrag()
private void ComputeValueAndDirectionFromDrag(float sliderLength, float dragElementLength, float dragElementPos)
private void SetSliderValueFromClick()
private void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos)
public void AdjustDragElement(float factor)
private void UpdateDragElementPosition()
protected internal void OnPostLayout(bool hasNewLayout)
}
public UnityEngine.Experimental.UIElements.Spacing : ValueType {
public float left
public float top
public float right
public float bottom
public float horizontal
public float vertical
public void .ctor(float left, float top, float right, float bottom)
public float get_horizontal()
public float get_vertical()
public Rect op_Addition(Rect r, Spacing a)
public Rect op_Subtraction(Rect r, Spacing a)
}
public UnityEngine.Experimental.UIElements.StyleEnums.Align : Enum {
public int value__
public Align Auto
public Align FlexStart
public Align Center
public Align FlexEnd
public Align Stretch
}
public UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection : Enum {
public int value__
public FlexDirection Column
public FlexDirection ColumnReverse
public FlexDirection Row
public FlexDirection RowReverse
}
public UnityEngine.Experimental.UIElements.StyleEnums.ImageScaleMode : Enum {
public int value__
public ImageScaleMode StretchToFill
public ImageScaleMode ScaleAndCrop
public ImageScaleMode ScaleToFit
}
public UnityEngine.Experimental.UIElements.StyleEnums.Justify : Enum {
public int value__
public Justify FlexStart
public Justify Center
public Justify FlexEnd
public Justify SpaceBetween
public Justify SpaceAround
}
public UnityEngine.Experimental.UIElements.StyleEnums.Overflow : Enum {
public int value__
public Overflow Visible
public Overflow Scroll
public Overflow Hidden
}
public UnityEngine.Experimental.UIElements.StyleEnums.PositionType : Enum {
public int value__
public PositionType Relative
public PositionType Absolute
public PositionType Manual
}
public UnityEngine.Experimental.UIElements.StyleEnums.Wrap : Enum {
public int value__
public Wrap NoWrap
public Wrap Wrap
}
internal UnityEngine.Experimental.UIElements.StyleSheets.CustomProperty : ValueType {
public int specificity
public StyleValueHandle handle
public StyleSheet data
}
public UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyles {
public void ApplyCustomProperty(string propertyName, Style`1& target)
public void ApplyCustomProperty(string propertyName, Style`1& target)
public void ApplyCustomProperty(string propertyName, Style`1& target)
public void ApplyCustomProperty(string propertyName, Style`1& target)
public void ApplyCustomProperty(string propertyName, Style`1& target)
public void ApplyCustomProperty(string propertyName, Style`1& target)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher : ValueType {
public StyleSheet sheet
public StyleComplexSelector complexSelector
public int simpleSelectorIndex
public int depth
}
public UnityEngine.Experimental.UIElements.StyleSheets.Style`1 : ValueType {
internal int specificity
public T value
private Style`1<T> defaultStyle
public Style`1<T> nil
public void .ctor(T value)
internal void .ctor(T value, int specifity)
public Style`1<T> get_nil()
public T GetSpecifiedValueOrDefault(T defaultValue)
public T op_Implicit(Style`1<T> sp)
internal void Apply(Style`1<T> other, StylePropertyApplyMode mode)
public Style`1<T> op_Implicit(T value)
public Style`1<T> Create(T value)
public string ToString()
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleComplexSelectorExtensions : object {
private Dictionary`2<string, PseudoStateData> s_PseudoStates
public void CachePseudoStateMasks(StyleComplexSelector complexSelector)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleContext : object {
private float <currentPixelsPerPoint>k__BackingField
private List`1<RuleMatcher> m_Matchers
private List`1<RuleRef> m_MatchedRules
private VisualContainer m_VisualTree
private Dictionary`2<long, VisualElementStyles> s_StyleCache
public float currentPixelsPerPoint
public void .ctor(VisualContainer tree)
public float get_currentPixelsPerPoint()
public void set_currentPixelsPerPoint(float value)
private void AddMatchersFromSheet(IEnumerable`1<StyleSheet> styleSheets)
internal void GetMatchersFor(VisualElement element, List`1<RuleMatcher> ruleMatchers, List`1<StyleSheet> stylesheets)
private void GetMatchersFor(List`1<VisualElement> elements, int idx, int depth, List`1<RuleMatcher> ruleMatchers)
private void PushStyleSheet(StyleSheet styleSheetData)
public void DirtyStyleSheets()
private void PropagateDirtyStyleSheets(VisualElement e)
public void ApplyStyles(VisualContainer subTree)
public void ApplyStyles()
private void UpdateStyles(VisualElement element, int depth)
private bool Match(VisualElement element, RuleMatcher& matcher)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyApplyMode : Enum {
public int value__
public StylePropertyApplyMode Copy
public StylePropertyApplyMode CopyIfMoreSpecific
public StylePropertyApplyMode CopyIfNotInline
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyAttribute : Attribute {
internal string propertyName
internal StylePropertyID propertyID
internal void .ctor(string propertyName, StylePropertyID propertyID)
public void .ctor(string propertyName)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID : Enum {
public int value__
public StylePropertyID Unknown
public StylePropertyID MarginLeft
public StylePropertyID MarginTop
public StylePropertyID MarginRight
public StylePropertyID MarginBottom
public StylePropertyID PaddingLeft
public StylePropertyID PaddingTop
public StylePropertyID PaddingRight
public StylePropertyID PaddingBottom
public StylePropertyID BorderLeft
public StylePropertyID BorderTop
public StylePropertyID BorderRight
public StylePropertyID BorderBottom
public StylePropertyID PositionType
public StylePropertyID PositionLeft
public StylePropertyID PositionTop
public StylePropertyID PositionRight
public StylePropertyID PositionBottom
public StylePropertyID Width
public StylePropertyID Height
public StylePropertyID MinWidth
public StylePropertyID MinHeight
public StylePropertyID MaxWidth
public StylePropertyID MaxHeight
public StylePropertyID Flex
public StylePropertyID BorderWidth
public StylePropertyID BorderRadius
public StylePropertyID FlexDirection
public StylePropertyID FlexWrap
public StylePropertyID JustifyContent
public StylePropertyID AlignContent
public StylePropertyID AlignSelf
public StylePropertyID AlignItems
public StylePropertyID TextAlignment
public StylePropertyID TextClipping
public StylePropertyID Font
public StylePropertyID FontSize
public StylePropertyID FontStyle
public StylePropertyID BackgroundSize
public StylePropertyID WordWrap
public StylePropertyID BackgroundImage
public StylePropertyID TextColor
public StylePropertyID BackgroundColor
public StylePropertyID BorderColor
public StylePropertyID Overflow
public StylePropertyID SliceLeft
public StylePropertyID SliceTop
public StylePropertyID SliceRight
public StylePropertyID SliceBottom
public StylePropertyID Opacity
public StylePropertyID Custom
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetCache : object {
private SheetHandleKeyComparer s_Comparer
private Dictionary`2<SheetHandleKey, int> s_EnumToIntCache
private Dictionary`2<SheetHandleKey, StylePropertyID[]> s_RulePropertyIDsCache
private Dictionary`2<string, StylePropertyID> s_NameToIDCache
internal void ClearCaches()
internal int GetEnumValue(StyleSheet sheet, StyleValueHandle handle)
internal StylePropertyID[] GetPropertyIDs(StyleSheet sheet, int ruleIndex)
private StylePropertyID GetPropertyID(string name)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetExtensions : object {
public void Apply(StyleSheet sheet, StyleValueHandle handle, int specificity, Style`1& property)
public void Apply(StyleSheet sheet, StyleValueHandle handle, int specificity, Style`1& property)
public void Apply(StyleSheet sheet, StyleValueHandle handle, int specificity, Style`1& property)
public void Apply(StyleSheet sheet, StyleValueHandle handle, int specificity, Style`1& property)
public void Apply(StyleSheet sheet, StyleValueHandle handle, int specificity, Style`1& property)
public void Apply(StyleSheet sheet, StyleValueHandle handle, int specificity, LoadResourceFunction loadResourceFunc, Style`1& property)
private void Apply(T val, int specificity, Style`1& property)
public string ReadAsString(StyleSheet sheet, StyleValueHandle handle)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.VisualElementStyles : object {
public VisualElementStyles none
internal bool isShared
private Dictionary`2<string, CustomProperty> m_CustomProperties
public Style`1<float> width
public Style`1<float> height
public Style`1<float> maxWidth
public Style`1<float> maxHeight
public Style`1<float> minWidth
public Style`1<float> minHeight
public Style`1<float> flex
public Style`1<int> overflow
public Style`1<float> positionLeft
public Style`1<float> positionTop
public Style`1<float> positionRight
public Style`1<float> positionBottom
public Style`1<float> marginLeft
public Style`1<float> marginTop
public Style`1<float> marginRight
public Style`1<float> marginBottom
public Style`1<float> borderLeft
public Style`1<float> borderTop
public Style`1<float> borderRight
public Style`1<float> borderBottom
public Style`1<float> paddingLeft
public Style`1<float> paddingTop
public Style`1<float> paddingRight
public Style`1<float> paddingBottom
public Style`1<int> positionType
public Style`1<int> alignSelf
public Style`1<int> textAlignment
public Style`1<int> fontStyle
public Style`1<int> textClipping
public Style`1<Font> font
public Style`1<int> fontSize
public Style`1<bool> wordWrap
public Style`1<Color> textColor
public Style`1<int> flexDirection
public Style`1<Color> backgroundColor
public Style`1<Color> borderColor
public Style`1<Texture2D> backgroundImage
public Style`1<int> backgroundSize
public Style`1<int> alignItems
public Style`1<int> alignContent
public Style`1<int> justifyContent
public Style`1<int> flexWrap
public Style`1<float> borderWidth
public Style`1<float> borderRadius
public Style`1<int> sliceLeft
public Style`1<int> sliceTop
public Style`1<int> sliceRight
public Style`1<int> sliceBottom
public Style`1<float> opacity
private LoadResourceFunction <>f__mg$cache0
internal void .ctor(bool isShared)
public void .ctor(VisualElementStyles other, bool isShared)
internal void Apply(VisualElementStyles other, StylePropertyApplyMode mode)
public void WriteToGUIStyle(GUIStyle style)
private void AssignState(GUIStyleState state)
private void AssignRect(RectOffset rect, Style`1& left, Style`1& top, Style`1& right, Style`1& bottom)
private void AssignRect(RectOffset rect, Style`1& left, Style`1& top, Style`1& right, Style`1& bottom)
internal void ApplyRule(StyleSheet registry, int specificity, StyleRule rule, StylePropertyID[] propertyIDs, LoadResourceFunction loadResourceFunc)
public void ApplyCustomProperty(string propertyName, Style`1& target)
public void ApplyCustomProperty(string propertyName, Style`1& target)
public void ApplyCustomProperty(string propertyName, Style`1& target)
public void ApplyCustomProperty(string propertyName, Style`1& target)
public void ApplyCustomProperty(string propertyName, Style`1& target)
public void ApplyCustomProperty(string propertyName, LoadResourceFunction function, Style`1& target)
public void ApplyCustomProperty(string propertyName, Style`1& target)
}
public UnityEngine.Experimental.UIElements.TextEditor : TextEditor {
private int <maxLength>k__BackingField
private char <maskChar>k__BackingField
private bool <doubleClickSelectsWord>k__BackingField
private bool <tripleClickSelectsLine>k__BackingField
private TextField <textField>k__BackingField
private VisualElement <target>k__BackingField
private EventPhase <phaseInterest>k__BackingField
public int maxLength
public char maskChar
public bool doubleClickSelectsWord
public bool tripleClickSelectsLine
protected TextField textField
internal Rect localPosition
public VisualElement target
public EventPhase phaseInterest
public IPanel panel
protected void .ctor(TextField textField)
public int get_maxLength()
public void set_maxLength(int value)
public char get_maskChar()
public void set_maskChar(char value)
public bool get_doubleClickSelectsWord()
public void set_doubleClickSelectsWord(bool value)
public bool get_tripleClickSelectsLine()
public void set_tripleClickSelectsLine(bool value)
protected TextField get_textField()
protected void set_textField(TextField value)
internal Rect get_localPosition()
public VisualElement get_target()
public void set_target(VisualElement value)
public EventPhase get_phaseInterest()
public void set_phaseInterest(EventPhase value)
public IPanel get_panel()
public EventPropagation HandleEvent(Event evt, VisualElement finalTarget)
public void OnLostCapture()
public void OnLostKeyboardFocus()
protected void SyncTextEditor()
internal void OnDetectFocusChange()
}
public UnityEngine.Experimental.UIElements.TextField : VisualElement {
private bool m_Multiline
private bool m_IsPasswordField
private char <maskChar>k__BackingField
private bool <doubleClickSelectsWord>k__BackingField
private bool <tripleClickSelectsLine>k__BackingField
private int <maxLength>k__BackingField
internal int kMaxLengthNone
private GUIStyle m_DrawGUIStyle
private TextEditor <editor>k__BackingField
public bool multiline
public bool isPasswordField
public char maskChar
public bool doubleClickSelectsWord
public bool tripleClickSelectsLine
public int maxLength
private bool touchScreenTextField
internal GUIStyle style
public bool hasFocus
public TextEditor editor
public void .ctor(int maxLength, bool multiline, bool isPasswordField, char maskChar)
public bool get_multiline()
public void set_multiline(bool value)
public bool get_isPasswordField()
public void set_isPasswordField(bool value)
public char get_maskChar()
public void set_maskChar(char value)
public bool get_doubleClickSelectsWord()
public void set_doubleClickSelectsWord(bool value)
public bool get_tripleClickSelectsLine()
public void set_tripleClickSelectsLine(bool value)
public int get_maxLength()
public void set_maxLength(int value)
private bool get_touchScreenTextField()
internal GUIStyle get_style()
public bool get_hasFocus()
public TextEditor get_editor()
protected void set_editor(TextEditor value)
public void OnStylesResolved(ICustomStyles styles)
internal void DoRepaint(IStylePainter painter)
private void DrawCursor(string newText)
}
internal UnityEngine.Experimental.UIElements.TimerEventScheduler : object {
private List`1<ScheduledItem> m_ScheduledItems
private bool m_TransactionMode
private List`1<ScheduledItem> m_ScheduleTansactions
private List`1<Action`1<TimerState>> m_UnscheduleTransactions
private void Schedule(ScheduledItem scheduleItem)
public ScheduleBuilder Schedule(Action`1<TimerState> timerUpdateEvent, IEventHandler handler)
public void Unschedule(Action`1<TimerState> timerUpdateEvent)
public void UpdateScheduledEvents()
}
public UnityEngine.Experimental.UIElements.TimerState : ValueType {
public long start
public long now
public long deltaTime
public long get_deltaTime()
}
public UnityEngine.Experimental.UIElements.Toggle : VisualElement {
private Action clickEvent
public bool on
public void .ctor(Action clickEvent)
public bool get_on()
public void set_on(bool value)
private void OnClick()
}
internal UnityEngine.Experimental.UIElements.TouchScreenTextEditor : TextEditor {
private string m_SecureText
public string secureText
public void .ctor(TextField textField)
public string get_secureText()
public void set_secureText(string value)
public EventPropagation HandleEvent(Event evt, VisualElement finalTarget)
private EventPropagation DoMouseDown()
}
internal UnityEngine.Experimental.UIElements.UIElementsUtility : object {
private Stack`1<IMGUIContainer> s_ContainerStack
private Dictionary`2<int, Panel> s_UIElementsCache
private Event s_EventInstance
private EventDispatcher s_EventDispatcher
private Action <>f__mg$cache0
private Action <>f__mg$cache1
private Func`3<int, IntPtr, bool> <>f__mg$cache2
private Action <>f__mg$cache3
private Func`2<Exception, bool> <>f__mg$cache4
internal IDispatcher eventDispatcher
internal IDispatcher get_eventDispatcher()
private void TakeCapture()
private void ReleaseCapture()
private bool ProcessEvent(int instanceID, IntPtr nativeEventPtr)
private void CleanupRoots()
private bool EndContainerGUIFromException(Exception exception)
internal void BeginContainerGUI(LayoutCache cache, int instanceID, Event evt, IMGUIContainer container)
internal void EndContainerGUI()
internal ContextType GetGUIContextType()
private bool DoDispatch(BaseVisualElementPanel panel)
internal Enumerator<int, Panel> GetPanelsIterator()
internal Panel FindOrCreatePanel(int instanceId, ContextType contextType, IDataWatchService dataWatch, LoadResourceFunction loadResourceFunction)
internal Panel FindOrCreatePanel(int instanceId)
internal void BeginBuilder(VisualContainer w)
}
public UnityEngine.Experimental.UIElements.VisualContainer : VisualElement {
private List`1<VisualElement> m_Children
private List`1<StyleSheet> m_StyleSheets
private List`1<string> m_StyleSheetPaths
private bool <clipChildren>k__BackingField
internal IEnumerable`1<StyleSheet> styleSheets
public bool clipChildren
public int childrenCount
public FlexDirection flexDirection
public Align alignItems
public Align alignContent
public Justify justifyContent
public Wrap flexWrap
internal IEnumerable`1<StyleSheet> get_styleSheets()
public bool get_clipChildren()
public void set_clipChildren(bool value)
public int get_childrenCount()
public FlexDirection get_flexDirection()
public void set_flexDirection(FlexDirection value)
public Align get_alignItems()
public void set_alignItems(Align value)
public Align get_alignContent()
public void set_alignContent(Align value)
public Justify get_justifyContent()
public void set_justifyContent(Justify value)
public Wrap get_flexWrap()
public void set_flexWrap(Wrap value)
public Enumerator GetEnumerator()
private IEnumerator`1<VisualElement> System.Collections.Generic.IEnumerable<UnityEngine.Experimental.UIElements.VisualElement>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
internal void ChangePanel(BaseVisualElementPanel p)
public void AddChild(VisualElement child)
public void InsertChild(int index, VisualElement child)
public void RemoveChild(VisualElement child)
public void RemoveChildAt(int index)
public void ClearChildren()
public VisualElement GetChildAt(int index)
public bool ContainsChild(VisualElement elem)
public void AddStyleSheetPath(string sheetPath)
public void RemoveStyleSheetPath(string sheetPath)
public bool HasStyleSheetPath(string sheetPath)
internal void LoadStyleSheetsFromPaths()
}
public UnityEngine.Experimental.UIElements.VisualElement : object {
private UInt32 s_NextId
private string m_Name
private HashSet`1<string> m_ClassList
private string m_TypeName
private string m_FullTypeName
private bool <usePixelCaching>k__BackingField
private RenderData m_RenderData
internal Matrix4x4 m_Transform
private Rect m_Position
private PseudoStates m_PseudoStates
private VisualContainer m_Parent
private BaseVisualElementPanel <elementPanel>k__BackingField
private EventPhase <phaseInterest>k__BackingField
private PickingMode <pickingMode>k__BackingField
private CSSNode <cssNode>k__BackingField
internal VisualElementStyles m_Styles
private List`1<IManipulator> m_Manipulators
internal UInt32 controlid
private ChangeType changesNeeded
private Action onEnter
private Action onLeave
private string m_Text
private string m_Tooltip
protected int DefaultAlignContent
protected int DefaultAlignItems
private OnStylesResolved onStylesResolved
public bool usePixelCaching
internal RenderData renderData
public Matrix4x4 transform
public Rect position
public Rect contentRect
protected Rect paddingRect
public Rect globalBound
public Rect localBound
public Matrix4x4 globalTransform
internal PseudoStates pseudoStates
public VisualContainer parent
internal BaseVisualElementPanel elementPanel
public IPanel panel
public EventPhase phaseInterest
public PickingMode pickingMode
public string name
internal string fullTypeName
internal string typeName
internal CSSNode cssNode
internal VisualElementStyles styles
public float width
public float height
public float maxWidth
public float maxHeight
public float minWidth
public float minHeight
public float flex
public float positionLeft
public float positionTop
public float positionRight
public float positionBottom
public float marginLeft
public float marginTop
public float marginRight
public float marginBottom
public float borderLeft
public float borderTop
public float borderRight
public float borderBottom
public float paddingLeft
public float paddingTop
public float paddingRight
public float paddingBottom
public PositionType positionType
public ImageScaleMode backgroundSize
public Align alignSelf
public TextAnchor textAlignment
public FontStyle fontStyle
public TextClipping textClipping
public Font font
public int fontSize
public bool wordWrap
public Texture2D backgroundImage
public Color textColor
public Color backgroundColor
public Color borderColor
public float borderWidth
public float borderRadius
public Overflow overflow
internal float opacity
public string text
public string tooltip
public bool enabled
public bool visible
public bool get_usePixelCaching()
public void set_usePixelCaching(bool value)
internal RenderData get_renderData()
public Matrix4x4 get_transform()
public void set_transform(Matrix4x4 value)
public Rect get_position()
public void set_position(Rect value)
public Rect get_contentRect()
protected Rect get_paddingRect()
public Rect get_globalBound()
public Rect get_localBound()
public Matrix4x4 get_globalTransform()
internal PseudoStates get_pseudoStates()
internal void set_pseudoStates(PseudoStates value)
public VisualContainer get_parent()
public void set_parent(VisualContainer value)
internal BaseVisualElementPanel get_elementPanel()
private void set_elementPanel(BaseVisualElementPanel value)
public IPanel get_panel()
public EventPhase get_phaseInterest()
public void set_phaseInterest(EventPhase value)
public PickingMode get_pickingMode()
public void set_pickingMode(PickingMode value)
public string get_name()
public void set_name(string value)
internal string get_fullTypeName()
internal string get_typeName()
internal CSSNode get_cssNode()
private void set_cssNode(CSSNode value)
public void OnStylesResolved(ICustomStyles styles)
internal VisualElementStyles get_styles()
public float get_width()
public void set_width(float value)
public float get_height()
public void set_height(float value)
public float get_maxWidth()
public void set_maxWidth(float value)
public float get_maxHeight()
public void set_maxHeight(float value)
public float get_minWidth()
public void set_minWidth(float value)
public float get_minHeight()
public void set_minHeight(float value)
public float get_flex()
public void set_flex(float value)
public float get_positionLeft()
public void set_positionLeft(float value)
public float get_positionTop()
public void set_positionTop(float value)
public float get_positionRight()
public void set_positionRight(float value)
public float get_positionBottom()
public void set_positionBottom(float value)
public float get_marginLeft()
public void set_marginLeft(float value)
public float get_marginTop()
public void set_marginTop(float value)
public float get_marginRight()
public void set_marginRight(float value)
public float get_marginBottom()
public void set_marginBottom(float value)
public float get_borderLeft()
public void set_borderLeft(float value)
public float get_borderTop()
public void set_borderTop(float value)
public float get_borderRight()
public void set_borderRight(float value)
public float get_borderBottom()
public void set_borderBottom(float value)
public float get_paddingLeft()
public void set_paddingLeft(float value)
public float get_paddingTop()
public void set_paddingTop(float value)
public float get_paddingRight()
public void set_paddingRight(float value)
public float get_paddingBottom()
public void set_paddingBottom(float value)
public PositionType get_positionType()
public void set_positionType(PositionType value)
public ImageScaleMode get_backgroundSize()
public void set_backgroundSize(ImageScaleMode value)
public Align get_alignSelf()
public void set_alignSelf(Align value)
public TextAnchor get_textAlignment()
public void set_textAlignment(TextAnchor value)
public FontStyle get_fontStyle()
public void set_fontStyle(FontStyle value)
public TextClipping get_textClipping()
public void set_textClipping(TextClipping value)
public Font get_font()
public void set_font(Font value)
public int get_fontSize()
public void set_fontSize(int value)
public bool get_wordWrap()
public void set_wordWrap(bool value)
public Texture2D get_backgroundImage()
public void set_backgroundImage(Texture2D value)
public Color get_textColor()
public void set_textColor(Color value)
public Color get_backgroundColor()
public void set_backgroundColor(Color value)
public Color get_borderColor()
public void set_borderColor(Color value)
public float get_borderWidth()
public void set_borderWidth(float value)
public float get_borderRadius()
public void set_borderRadius(float value)
public Overflow get_overflow()
public void set_overflow(Overflow value)
internal float get_opacity()
internal void set_opacity(float value)
internal Enumerator<IManipulator> GetManipulatorsInternal()
public void InsertManipulator(int index, IManipulator manipulator)
public void AddManipulator(IManipulator manipulator)
public void RemoveManipulator(IManipulator manipulator)
internal void ChangePanel(BaseVisualElementPanel p)
private void PropagateToChildren(ChangeType type)
protected internal void PropagateChangesToParents()
public void Dirty(ChangeType type)
public bool IsDirty(ChangeType type)
public void ClearDirty(ChangeType type)
public void add_onEnter(Action value)
public void remove_onEnter(Action value)
public void add_onLeave(Action value)
public void remove_onLeave(Action value)
public string get_text()
public void set_text(string value)
public string get_tooltip()
public void set_tooltip(string value)
public bool get_enabled()
public void set_enabled(bool value)
protected internal void OnPostLayout(bool hasNewLayout)
public bool get_visible()
public void set_visible(bool value)
public void DoRepaint()
internal void DoRepaint(IStylePainter painter)
public bool ContainsPoint(Vector2 localPoint)
public bool ContainsPointToLocal(Vector2 point)
public bool Overlaps(Rect rectangle)
public EventPropagation HandleEvent(Event evt, VisualElement finalTarget)
public void OnLostCapture()
public void OnLostKeyboardFocus()
protected internal Vector2 DoMeasure(float width, MeasureMode widthMode, float height, MeasureMode heightMode)
internal long Measure(CSSNode node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode)
public void SetSize(Vector2 size)
internal void FinalizeLayout()
internal void add_onStylesResolved(OnStylesResolved value)
internal void remove_onStylesResolved(OnStylesResolved value)
internal void SetSharedStyles(VisualElementStyles styles)
internal void EnsureInlineStyles()
public void ResetPositionProperties()
public string ToString()
internal IEnumerable`1<string> GetClasses()
public void ClearClassList()
public void AddToClassList(string className)
public void RemoveFromClassList(string className)
public bool ClassListContains(string cls)
}
public UnityEngine.Experimental.UIElements.VisualElementExtensions : object {
public Vector2 GlobalToBound(VisualElement ele, Vector2 p)
public Vector2 LocalToGlobal(VisualElement ele, Vector2 p)
public Rect GlobalToBound(VisualElement ele, Rect r)
public Rect LocalToGlobal(VisualElement ele, Rect r)
public Vector2 ChangeCoordinatesTo(VisualElement src, VisualElement dest, Vector2 point)
public Rect ChangeCoordinatesTo(VisualElement src, VisualElement dest, Rect rect)
public void StretchToParentSize(VisualElement elem)
public T GetFirstOfType(VisualElement self)
public T GetFirstAncestorOfType(VisualElement self)
}
internal UnityEngine.Experimental.UIElements.VisualElementUtils : object {
private HashSet`1<string> s_usedNames
public string GetUniqueName(string nameBase)
}
internal UnityEngine.Experimental.UIElements.VisualTreeBuilder : object {
private Recycler m_ElementPool
private VisualContainer m_CurrentContainer
private ViewState m_CurrentViewState
private Stack`1<ViewState> m_ViewStates
private VisualContainer <topLevelVisualContainer>k__BackingField
private bool <verbose>k__BackingField
private IMScrollView <currentScrollView>k__BackingField
public VisualContainer topLevelVisualContainer
public bool verbose
public IMScrollView currentScrollView
public void .ctor(Recycler r)
public VisualContainer get_topLevelVisualContainer()
private void set_topLevelVisualContainer(VisualContainer value)
public bool get_verbose()
public void set_verbose(bool value)
public IMScrollView get_currentScrollView()
private void set_currentScrollView(IMScrollView value)
public void NextView(TType& view)
public void EndView()
public void BeginGUI(VisualContainer container)
public void EndGUI()
public void NextElement(TType& widget)
private void RecycleDescendants(VisualContainer parent, int startAtIndex)
}
internal UnityEngine.Experimental.UIElements.VisualTreeBuilderExtensions : object {
public IMBox Box(VisualTreeBuilder cache, Rect position, GUIContent content, GUIStyle style)
public IMButton Button(VisualTreeBuilder cache, Rect position, GUIContent content, GUIStyle style)
public IMButtonGrid ButtonGrid(VisualTreeBuilder cache, Rect position, int selected, GUIContent[] contents, int xCount, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle)
public IMImage DrawTexture(VisualTreeBuilder cache, Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect)
public IMGroup Group(VisualTreeBuilder cache, Rect position, GUIContent content, GUIStyle style)
public IMLabel Label(VisualTreeBuilder cache, Rect position, GUIContent content, GUIStyle style)
public IMTextField PasswordField(VisualTreeBuilder cache, Rect position, string passwordToShow, string password, char maskChar, int maxLength, GUIStyle style)
public IMRepeatButton RepeatButton(VisualTreeBuilder cache, Rect position, GUIContent content, GUIStyle style, FocusType focusType)
public IMSlider Slider(VisualTreeBuilder cache, Rect position, float value, float size, float start, float end, GUIStyle sliderStyle, GUIStyle thumbStyle, bool horiz, int id)
public IMScrollView ScrollView(VisualTreeBuilder cache, Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background)
public IMScroller Scroller(VisualTreeBuilder cache, Rect position, float value, float size, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUIStyle leftButton, GUIStyle rightButton, bool horiz)
public IMTextField TextField(VisualTreeBuilder cache, Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar)
public IMToggle Toggle(VisualTreeBuilder cache, Rect position, int id, bool value, GUIContent content, GUIStyle style)
}
public UnityEngine.Experimental.VR.Boundary : object {
public bool visible
public bool configured
public bool TryGetDimensions(Vector3& dimensionsOut)
public bool TryGetDimensions(Vector3& dimensionsOut, Type boundaryType)
private bool TryGetDimensionsInternal(Vector3& dimensionsOut, int boundaryType)
public bool TryGetGeometry(List`1<Vector3> geometry)
public bool TryGetGeometry(List`1<Vector3> geometry, Type boundaryType)
private bool TryGetGeometryInternal(object geometryOut, int boundaryType)
public bool get_visible()
public void set_visible(bool value)
public bool get_configured()
}
public UnityEngine.ExposedPropertyResolver : ValueType {
internal IntPtr table
internal Object ResolveReferenceInternal(IntPtr ptr, PropertyName name, Boolean& isValid)
private Object INTERNAL_CALL_ResolveReferenceInternal(IntPtr ptr, PropertyName& name, Boolean& isValid)
}
public UnityEngine.ExposedReference`1 : ValueType {
public PropertyName exposedName
public Object defaultValue
public T Resolve(IExposedPropertyTable resolver)
}
public UnityEngine.FFTWindow : Enum {
public int value__
public FFTWindow Rectangular
public FFTWindow Triangle
public FFTWindow Hamming
public FFTWindow Hanning
public FFTWindow Blackman
public FFTWindow BlackmanHarris
}
public UnityEngine.FilterMode : Enum {
public int value__
public FilterMode Point
public FilterMode Bilinear
public FilterMode Trilinear
}
internal UnityEngine.FingerDoF : Enum {
public int value__
public FingerDoF ProximalDownUp
public FingerDoF ProximalInOut
public FingerDoF IntermediateCloseOpen
public FingerDoF DistalCloseOpen
public FingerDoF LastFingerDoF
}
public UnityEngine.FixedJoint2D : AnchoredJoint2D {
public float dampingRatio
public float frequency
public float referenceAngle
public float get_dampingRatio()
public void set_dampingRatio(float value)
public float get_frequency()
public void set_frequency(float value)
public float get_referenceAngle()
}
public UnityEngine.FocusType : Enum {
public int value__
public FocusType Native
public FocusType Keyboard
public FocusType Passive
}
public UnityEngine.FogMode : Enum {
public int value__
public FogMode Linear
public FogMode Exponential
public FogMode ExponentialSquared
}
public UnityEngine.Font : Object {
private Action`1<Font> textureRebuilt
private FontTextureRebuildCallback m_FontTextureRebuildCallback
public Material material
public String[] fontNames
public CharacterInfo[] characterInfo
public FontTextureRebuildCallback textureRebuildCallback
public bool dynamic
public int ascent
public int lineHeight
public int fontSize
public void .ctor(string name)
private void .ctor(String[] names, int size)
public String[] GetOSInstalledFontNames()
private void Internal_CreateFont(Font _font, string name)
private void Internal_CreateDynamicFont(Font _font, String[] _names, int size)
public Font CreateDynamicFontFromOSFont(string fontname, int size)
public Font CreateDynamicFontFromOSFont(String[] fontnames, int size)
public Material get_material()
public void set_material(Material value)
public bool HasCharacter(char c)
public String[] get_fontNames()
public void set_fontNames(String[] value)
public CharacterInfo[] get_characterInfo()
public void set_characterInfo(CharacterInfo[] value)
public void RequestCharactersInTexture(string characters, int size, FontStyle style)
public void RequestCharactersInTexture(string characters, int size)
public void RequestCharactersInTexture(string characters)
public void add_textureRebuilt(Action`1<Font> value)
public void remove_textureRebuilt(Action`1<Font> value)
private void InvokeTextureRebuilt_Internal(Font font)
private void add_m_FontTextureRebuildCallback(FontTextureRebuildCallback value)
private void remove_m_FontTextureRebuildCallback(FontTextureRebuildCallback value)
public FontTextureRebuildCallback get_textureRebuildCallback()
public void set_textureRebuildCallback(FontTextureRebuildCallback value)
public int GetMaxVertsForString(string str)
public bool GetCharacterInfo(char ch, CharacterInfo& info, int size, FontStyle style)
public bool GetCharacterInfo(char ch, CharacterInfo& info, int size)
public bool GetCharacterInfo(char ch, CharacterInfo& info)
public bool get_dynamic()
public int get_ascent()
public int get_lineHeight()
public int get_fontSize()
}
public UnityEngine.FontStyle : Enum {
public int value__
public FontStyle Normal
public FontStyle Bold
public FontStyle Italic
public FontStyle BoldAndItalic
}
public UnityEngine.ForceMode : Enum {
public int value__
public ForceMode Force
public ForceMode Acceleration
public ForceMode Impulse
public ForceMode VelocityChange
}
public UnityEngine.ForceMode2D : Enum {
public int value__
public ForceMode2D Force
public ForceMode2D Impulse
}
public UnityEngine.FrictionJoint2D : AnchoredJoint2D {
public float maxForce
public float maxTorque
public float get_maxForce()
public void set_maxForce(float value)
public float get_maxTorque()
public void set_maxTorque(float value)
}
public UnityEngine.GameObject : Object {
public Transform transform
public int layer
public bool active
public bool activeSelf
public bool activeInHierarchy
public bool isStatic
internal bool isStaticBatchable
public string tag
public Scene scene
public GameObject gameObject
public void .ctor(string name)
public void .ctor(string name, Type[] components)
public GameObject CreatePrimitive(PrimitiveType type)
public Component GetComponent(Type type)
internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue)
public T GetComponent()
internal Component GetComponentByName(string type)
public Component GetComponent(string type)
public Component GetComponentInChildren(Type type, bool includeInactive)
public Component GetComponentInChildren(Type type)
public T GetComponentInChildren()
public T GetComponentInChildren(bool includeInactive)
public Component GetComponentInParent(Type type)
public T GetComponentInParent()
public Component[] GetComponents(Type type)
public T[] GetComponents()
public void GetComponents(Type type, List`1<Component> results)
public void GetComponents(List`1<T> results)
public Component[] GetComponentsInChildren(Type type)
public Component[] GetComponentsInChildren(Type type, bool includeInactive)
public T[] GetComponentsInChildren(bool includeInactive)
public void GetComponentsInChildren(bool includeInactive, List`1<T> results)
public T[] GetComponentsInChildren()
public void GetComponentsInChildren(List`1<T> results)
public Component[] GetComponentsInParent(Type type)
public Component[] GetComponentsInParent(Type type, bool includeInactive)
public void GetComponentsInParent(bool includeInactive, List`1<T> results)
public T[] GetComponentsInParent(bool includeInactive)
public T[] GetComponentsInParent()
private Array GetComponentsInternal(Type type, bool useSearchTypeAsArrayReturnType, bool recursive, bool includeInactive, bool reverse, object resultList)
internal Component AddComponentInternal(string className)
public Transform get_transform()
public int get_layer()
public void set_layer(int value)
public bool get_active()
public void set_active(bool value)
public void SetActive(bool value)
public bool get_activeSelf()
public bool get_activeInHierarchy()
public void SetActiveRecursively(bool state)
public bool get_isStatic()
public void set_isStatic(bool value)
internal bool get_isStaticBatchable()
public string get_tag()
public void set_tag(string value)
public bool CompareTag(string tag)
public GameObject FindGameObjectWithTag(string tag)
public GameObject FindWithTag(string tag)
public GameObject[] FindGameObjectsWithTag(string tag)
public void SendMessageUpwards(string methodName, object value, SendMessageOptions options)
public void SendMessageUpwards(string methodName, object value)
public void SendMessageUpwards(string methodName)
public void SendMessageUpwards(string methodName, SendMessageOptions options)
public void SendMessage(string methodName, object value, SendMessageOptions options)
public void SendMessage(string methodName, object value)
public void SendMessage(string methodName)
public void SendMessage(string methodName, SendMessageOptions options)
public void BroadcastMessage(string methodName, object parameter, SendMessageOptions options)
public void BroadcastMessage(string methodName, object parameter)
public void BroadcastMessage(string methodName)
public void BroadcastMessage(string methodName, SendMessageOptions options)
private Component Internal_AddComponentWithType(Type componentType)
public Component AddComponent(Type componentType)
public T AddComponent()
private void Internal_CreateGameObject(GameObject mono, string name)
public GameObject Find(string name)
public Scene get_scene()
private void INTERNAL_get_scene(Scene& value)
public GameObject get_gameObject()
}
public UnityEngine.GeometryUtility : object {
private void Internal_ExtractPlanes(Plane[] planes, Matrix4x4 worldToProjectionMatrix)
private void INTERNAL_CALL_Internal_ExtractPlanes(Plane[] planes, Matrix4x4& worldToProjectionMatrix)
public bool TestPlanesAABB(Plane[] planes, Bounds bounds)
private bool INTERNAL_CALL_TestPlanesAABB(Plane[] planes, Bounds& bounds)
private Bounds Internal_CalculateBounds(Vector3[] positions, Matrix4x4 transform)
private void INTERNAL_CALL_Internal_CalculateBounds(Vector3[] positions, Matrix4x4& transform, Bounds& value)
public bool TryCreatePlaneFromPolygon(Vector3[] vertices, Plane& plane)
public Plane[] CalculateFrustumPlanes(Camera camera)
public Plane[] CalculateFrustumPlanes(Matrix4x4 worldToProjectionMatrix)
public Bounds CalculateBounds(Vector3[] positions, Matrix4x4 transform)
}
public UnityEngine.Gizmos : object {
public Color color
public Matrix4x4 matrix
public void DrawRay(Ray r)
public void DrawRay(Vector3 from, Vector3 direction)
public void DrawLine(Vector3 from, Vector3 to)
private void INTERNAL_CALL_DrawLine(Vector3& from, Vector3& to)
public void DrawWireSphere(Vector3 center, float radius)
private void INTERNAL_CALL_DrawWireSphere(Vector3& center, float radius)
public void DrawSphere(Vector3 center, float radius)
private void INTERNAL_CALL_DrawSphere(Vector3& center, float radius)
public void DrawWireCube(Vector3 center, Vector3 size)
private void INTERNAL_CALL_DrawWireCube(Vector3& center, Vector3& size)
public void DrawCube(Vector3 center, Vector3 size)
private void INTERNAL_CALL_DrawCube(Vector3& center, Vector3& size)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation)
public void DrawMesh(Mesh mesh, Vector3 position)
public void DrawMesh(Mesh mesh)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Vector3 scale)
public void DrawMesh(Mesh mesh, int submeshIndex, Vector3 position, Quaternion rotation, Vector3 scale)
public void DrawMesh(Mesh mesh, int submeshIndex, Vector3 position, Quaternion rotation)
public void DrawMesh(Mesh mesh, int submeshIndex, Vector3 position)
public void DrawMesh(Mesh mesh, int submeshIndex)
private void INTERNAL_CALL_DrawMesh(Mesh mesh, int submeshIndex, Vector3& position, Quaternion& rotation, Vector3& scale)
public void DrawWireMesh(Mesh mesh, Vector3 position, Quaternion rotation)
public void DrawWireMesh(Mesh mesh, Vector3 position)
public void DrawWireMesh(Mesh mesh)
public void DrawWireMesh(Mesh mesh, Vector3 position, Quaternion rotation, Vector3 scale)
public void DrawWireMesh(Mesh mesh, int submeshIndex, Vector3 position, Quaternion rotation, Vector3 scale)
public void DrawWireMesh(Mesh mesh, int submeshIndex, Vector3 position, Quaternion rotation)
public void DrawWireMesh(Mesh mesh, int submeshIndex, Vector3 position)
public void DrawWireMesh(Mesh mesh, int submeshIndex)
private void INTERNAL_CALL_DrawWireMesh(Mesh mesh, int submeshIndex, Vector3& position, Quaternion& rotation, Vector3& scale)
public void DrawIcon(Vector3 center, string name, bool allowScaling)
public void DrawIcon(Vector3 center, string name)
private void INTERNAL_CALL_DrawIcon(Vector3& center, string name, bool allowScaling)
public void DrawGUITexture(Rect screenRect, Texture texture)
public void DrawGUITexture(Rect screenRect, Texture texture, Material mat)
public void DrawGUITexture(Rect screenRect, Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, Material mat)
public void DrawGUITexture(Rect screenRect, Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder)
private void INTERNAL_CALL_DrawGUITexture(Rect& screenRect, Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, Material mat)
public Color get_color()
public void set_color(Color value)
private void INTERNAL_get_color(Color& value)
private void INTERNAL_set_color(Color& value)
public Matrix4x4 get_matrix()
public void set_matrix(Matrix4x4 value)
private void INTERNAL_get_matrix(Matrix4x4& value)
private void INTERNAL_set_matrix(Matrix4x4& value)
public void DrawFrustum(Vector3 center, float fov, float maxRange, float minRange, float aspect)
private void INTERNAL_CALL_DrawFrustum(Vector3& center, float fov, float maxRange, float minRange, float aspect)
}
public UnityEngine.GL : object {
public int TRIANGLES
public int TRIANGLE_STRIP
public int QUADS
public int LINES
public int LINE_STRIP
public Matrix4x4 modelview
public bool wireframe
public bool sRGBWrite
public bool invertCulling
public void Vertex3(float x, float y, float z)
public void Vertex(Vector3 v)
private void INTERNAL_CALL_Vertex(Vector3& v)
public void Color(Color c)
private void INTERNAL_CALL_Color(Color& c)
public void TexCoord(Vector3 v)
private void INTERNAL_CALL_TexCoord(Vector3& v)
public void TexCoord2(float x, float y)
public void TexCoord3(float x, float y, float z)
public void MultiTexCoord2(int unit, float x, float y)
public void MultiTexCoord3(int unit, float x, float y, float z)
public void MultiTexCoord(int unit, Vector3 v)
private void INTERNAL_CALL_MultiTexCoord(int unit, Vector3& v)
private void BeginInternal(int mode)
public void Begin(int mode)
public void End()
public void PushMatrix()
public void PopMatrix()
public void LoadIdentity()
public void LoadOrtho()
public void LoadPixelMatrix()
private void LoadPixelMatrixArgs(float left, float right, float bottom, float top)
public void LoadPixelMatrix(float left, float right, float bottom, float top)
public void Viewport(Rect pixelRect)
private void INTERNAL_CALL_Viewport(Rect& pixelRect)
public void LoadProjectionMatrix(Matrix4x4 mat)
private void INTERNAL_CALL_LoadProjectionMatrix(Matrix4x4& mat)
public Matrix4x4 get_modelview()
public void set_modelview(Matrix4x4 value)
private void INTERNAL_get_modelview(Matrix4x4& value)
private void INTERNAL_set_modelview(Matrix4x4& value)
public void MultMatrix(Matrix4x4 mat)
private void INTERNAL_CALL_MultMatrix(Matrix4x4& mat)
public Matrix4x4 GetGPUProjectionMatrix(Matrix4x4 proj, bool renderIntoTexture)
private void INTERNAL_CALL_GetGPUProjectionMatrix(Matrix4x4& proj, bool renderIntoTexture, Matrix4x4& value)
public bool get_wireframe()
public void set_wireframe(bool value)
public bool get_sRGBWrite()
public void set_sRGBWrite(bool value)
public bool get_invertCulling()
public void set_invertCulling(bool value)
public void SetRevertBackfacing(bool revertBackFaces)
public void Clear(bool clearDepth, bool clearColor, Color backgroundColor)
public void Clear(bool clearDepth, bool clearColor, Color backgroundColor, float depth)
private void Internal_Clear(bool clearDepth, bool clearColor, Color backgroundColor, float depth)
private void INTERNAL_CALL_Internal_Clear(bool clearDepth, bool clearColor, Color& backgroundColor, float depth)
public void ClearWithSkybox(bool clearDepth, Camera camera)
public void Flush()
public void InvalidateState()
public void IssuePluginEvent(int eventID)
public void IssuePluginEvent(IntPtr callback, int eventID)
private void IssuePluginEventInternal(IntPtr callback, int eventID)
public void RenderTargetBarrier()
}
internal UnityEngine.GlobalJavaObjectRef : object {
private bool m_disposed
protected IntPtr m_jobject
public void .ctor(IntPtr jobject)
protected void Finalize()
public IntPtr op_Implicit(GlobalJavaObjectRef obj)
public void Dispose()
}
public UnityEngine.Gradient : object {
internal IntPtr m_Ptr
public GradientColorKey[] colorKeys
public GradientAlphaKey[] alphaKeys
public GradientMode mode
private void Init()
private void Cleanup()
protected void Finalize()
public Color Evaluate(float time)
private void INTERNAL_CALL_Evaluate(Gradient self, float time, Color& value)
public GradientColorKey[] get_colorKeys()
public void set_colorKeys(GradientColorKey[] value)
public GradientAlphaKey[] get_alphaKeys()
public void set_alphaKeys(GradientAlphaKey[] value)
public GradientMode get_mode()
public void set_mode(GradientMode value)
public void SetKeys(GradientColorKey[] colorKeys, GradientAlphaKey[] alphaKeys)
}
public UnityEngine.GradientAlphaKey : ValueType {
public float alpha
public float time
public void .ctor(float alpha, float time)
}
public UnityEngine.GradientColorKey : ValueType {
public Color color
public float time
public void .ctor(Color col, float time)
}
public UnityEngine.GradientMode : Enum {
public int value__
public GradientMode Blend
public GradientMode Fixed
}
public UnityEngine.Graphics : object {
internal int kMaxDrawMeshInstanceCount
public RenderBuffer activeColorBuffer
public RenderBuffer activeDepthBuffer
public GraphicsTier activeTier
private Array ExtractArrayFromList(object list)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, bool castShadows, bool receiveShadows)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, bool castShadows)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer, Camera camera, int submeshIndex)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer, Camera camera)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, bool castShadows, bool receiveShadows, bool useLightProbes)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, Transform probeAnchor)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, ShadowCastingMode castShadows)
public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, Transform probeAnchor, bool useLightProbes)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, bool castShadows, bool receiveShadows)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, bool castShadows)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, bool castShadows, bool receiveShadows, bool useLightProbes)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, Transform probeAnchor)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, ShadowCastingMode castShadows)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, Transform probeAnchor, bool useLightProbes)
private void Internal_DrawMeshMatrix(Internal_DrawMeshMatrixArguments& arguments, MaterialPropertyBlock properties, Material material, Mesh mesh, Camera camera)
private void Internal_DrawMeshNow1(Mesh mesh, int subsetIndex, Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_Internal_DrawMeshNow1(Mesh mesh, int subsetIndex, Vector3& position, Quaternion& rotation)
private void Internal_DrawMeshNow2(Mesh mesh, int subsetIndex, Matrix4x4 matrix)
private void INTERNAL_CALL_Internal_DrawMeshNow2(Mesh mesh, int subsetIndex, Matrix4x4& matrix)
public void DrawProcedural(MeshTopology topology, int vertexCount, int instanceCount)
public void DrawProcedural(MeshTopology topology, int vertexCount)
public void DrawProceduralIndirect(MeshTopology topology, ComputeBuffer bufferWithArgs, int argsOffset)
public void DrawProceduralIndirect(MeshTopology topology, ComputeBuffer bufferWithArgs)
private int Internal_GetMaxDrawMeshInstanceCount()
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties, ShadowCastingMode castShadows)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, List`1<Matrix4x4> matrices, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, List`1<Matrix4x4> matrices, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, List`1<Matrix4x4> matrices, MaterialPropertyBlock properties, ShadowCastingMode castShadows)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, List`1<Matrix4x4> matrices, MaterialPropertyBlock properties)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, List`1<Matrix4x4> matrices)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, List`1<Matrix4x4> matrices, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera)
private void Internal_DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera)
public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer)
public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows)
public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties, ShadowCastingMode castShadows)
public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties)
public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset)
public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs)
public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera)
private void Internal_DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera)
private void INTERNAL_CALL_Internal_DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds& bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera)
public void DrawTexture(Rect screenRect, Texture texture, Material mat)
public void DrawTexture(Rect screenRect, Texture texture)
public void DrawTexture(Rect screenRect, Texture texture, Material mat, int pass)
public void DrawTexture(Rect screenRect, Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, Material mat)
public void DrawTexture(Rect screenRect, Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder)
public void DrawTexture(Rect screenRect, Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, Material mat, int pass)
public void DrawTexture(Rect screenRect, Texture texture, Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, Material mat)
public void DrawTexture(Rect screenRect, Texture texture, Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder)
public void DrawTexture(Rect screenRect, Texture texture, Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, Material mat, int pass)
public void DrawTexture(Rect screenRect, Texture texture, Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, Color color, Material mat)
public void DrawTexture(Rect screenRect, Texture texture, Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, Color color)
public void DrawTexture(Rect screenRect, Texture texture, Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, Color color, Material mat, int pass)
internal void Internal_DrawTexture(Internal_DrawTextureArguments& args)
public void ExecuteCommandBuffer(CommandBuffer buffer)
public void Blit(Texture source, RenderTexture dest)
public void Blit(Texture source, RenderTexture dest, Vector2 scale, Vector2 offset)
private void INTERNAL_CALL_Blit(Texture source, RenderTexture dest, Vector2& scale, Vector2& offset)
public void Blit(Texture source, RenderTexture dest, Material mat)
public void Blit(Texture source, RenderTexture dest, Material mat, int pass)
public void Blit(Texture source, Material mat)
public void Blit(Texture source, Material mat, int pass)
private void Internal_BlitMaterial(Texture source, RenderTexture dest, Material mat, int pass, bool setRT, Vector2 scale, Vector2 offset)
private void INTERNAL_CALL_Internal_BlitMaterial(Texture source, RenderTexture dest, Material mat, int pass, bool setRT, Vector2& scale, Vector2& offset)
public void BlitMultiTap(Texture source, RenderTexture dest, Material mat, Vector2[] offsets)
private void Internal_BlitMultiTap(Texture source, RenderTexture dest, Material mat, Vector2[] offsets)
private void CopyTexture_Full(Texture src, Texture dst)
private void CopyTexture_Slice_AllMips(Texture src, int srcElement, Texture dst, int dstElement)
private void CopyTexture_Slice(Texture src, int srcElement, int srcMip, Texture dst, int dstElement, int dstMip)
private void CopyTexture_Region(Texture src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, Texture dst, int dstElement, int dstMip, int dstX, int dstY)
private bool ConvertTexture_Full(Texture src, Texture dst)
private bool ConvertTexture_Slice(Texture src, int srcElement, Texture dst, int dstElement)
private void Internal_SetNullRT()
private void Internal_SetRTSimple(RenderBuffer& color, RenderBuffer& depth, int mip, CubemapFace face, int depthSlice)
private void Internal_SetMRTFullSetup(RenderBuffer[] colorSA, RenderBuffer& depth, int mip, CubemapFace face, int depthSlice, RenderBufferLoadAction[] colorLoadSA, RenderBufferStoreAction[] colorStoreSA, RenderBufferLoadAction depthLoad, RenderBufferStoreAction depthStore)
private void Internal_SetMRTSimple(RenderBuffer[] colorSA, RenderBuffer& depth, int mip, CubemapFace face, int depthSlice)
public RenderBuffer get_activeColorBuffer()
public RenderBuffer get_activeDepthBuffer()
private void GetActiveColorBuffer(RenderBuffer& res)
private void GetActiveDepthBuffer(RenderBuffer& res)
public void SetRandomWriteTarget(int index, RenderTexture uav)
public void SetRandomWriteTarget(int index, ComputeBuffer uav)
public void SetRandomWriteTarget(int index, ComputeBuffer uav, bool preserveCounterValue)
public void ClearRandomWriteTargets()
private void Internal_SetRandomWriteTargetRT(int index, RenderTexture uav)
private void Internal_SetRandomWriteTargetBuffer(int index, ComputeBuffer uav, bool preserveCounterValue)
public GraphicsTier get_activeTier()
public void set_activeTier(GraphicsTier value)
internal void CheckLoadActionValid(RenderBufferLoadAction load, string bufferType)
internal void CheckStoreActionValid(RenderBufferStoreAction store, string bufferType)
internal void SetRenderTargetImpl(RenderTargetSetup setup)
internal void SetRenderTargetImpl(RenderBuffer colorBuffer, RenderBuffer depthBuffer, int mipLevel, CubemapFace face, int depthSlice)
internal void SetRenderTargetImpl(RenderTexture rt, int mipLevel, CubemapFace face, int depthSlice)
internal void SetRenderTargetImpl(RenderBuffer[] colorBuffers, RenderBuffer depthBuffer, int mipLevel, CubemapFace face, int depthSlice)
public void SetRenderTarget(RenderTexture rt)
public void SetRenderTarget(RenderTexture rt, int mipLevel)
public void SetRenderTarget(RenderTexture rt, int mipLevel, CubemapFace face)
public void SetRenderTarget(RenderTexture rt, int mipLevel, CubemapFace face, int depthSlice)
public void SetRenderTarget(RenderBuffer colorBuffer, RenderBuffer depthBuffer)
public void SetRenderTarget(RenderBuffer colorBuffer, RenderBuffer depthBuffer, int mipLevel)
public void SetRenderTarget(RenderBuffer colorBuffer, RenderBuffer depthBuffer, int mipLevel, CubemapFace face)
public void SetRenderTarget(RenderBuffer colorBuffer, RenderBuffer depthBuffer, int mipLevel, CubemapFace face, int depthSlice)
public void SetRenderTarget(RenderBuffer[] colorBuffers, RenderBuffer depthBuffer)
public void SetRenderTarget(RenderTargetSetup setup)
public void CopyTexture(Texture src, Texture dst)
public void CopyTexture(Texture src, int srcElement, Texture dst, int dstElement)
public void CopyTexture(Texture src, int srcElement, int srcMip, Texture dst, int dstElement, int dstMip)
public void CopyTexture(Texture src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, Texture dst, int dstElement, int dstMip, int dstX, int dstY)
public bool ConvertTexture(Texture src, Texture dst)
public bool ConvertTexture(Texture src, int srcElement, Texture dst, int dstElement)
private void DrawMeshImpl(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, Transform probeAnchor, bool useLightProbes)
private void DrawTextureImpl(Rect screenRect, Texture texture, Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, Color color, Material mat, int pass)
public void DrawMeshNow(Mesh mesh, Vector3 position, Quaternion rotation)
public void DrawMeshNow(Mesh mesh, Vector3 position, Quaternion rotation, int materialIndex)
public void DrawMeshNow(Mesh mesh, Matrix4x4 matrix)
public void DrawMeshNow(Mesh mesh, Matrix4x4 matrix, int materialIndex)
private void DrawMeshInstancedImpl(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera)
private void DrawMeshInstancedImpl(Mesh mesh, int submeshIndex, Material material, List`1<Matrix4x4> matrices, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera)
private void DrawMeshInstancedIndirectImpl(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera)
}
public UnityEngine.GUI : object {
private float s_ScrollStepSize
private int s_ScrollControlId
private int s_HotTextField
private int s_BoxHash
private int s_RepeatButtonHash
private int s_ToggleHash
private int s_ButtonGridHash
private int s_SliderHash
private int s_BeginGroupHash
private int s_ScrollviewHash
private int <scrollTroughSide>k__BackingField
private DateTime <nextScrollStepTime>k__BackingField
private GUISkin s_Skin
internal Rect s_ToolTipRect
private GenericStack s_ScrollViewStates
internal int scrollTroughSide
internal DateTime nextScrollStepTime
public GUISkin skin
public Matrix4x4 matrix
public string tooltip
protected string mouseTooltip
protected Rect tooltipRect
public Color color
public Color backgroundColor
public Color contentColor
public bool changed
public bool enabled
public int depth
internal Material blendMaterial
internal Material blitMaterial
internal Material roundedRectMaterial
internal bool usePageScrollbars
internal int get_scrollTroughSide()
internal void set_scrollTroughSide(int value)
internal DateTime get_nextScrollStepTime()
internal void set_nextScrollStepTime(DateTime value)
public void set_skin(GUISkin value)
public GUISkin get_skin()
internal void DoSetSkin(GUISkin newSkin)
internal void CleanupRoots()
public Matrix4x4 get_matrix()
public void set_matrix(Matrix4x4 value)
public string get_tooltip()
public void set_tooltip(string value)
protected string get_mouseTooltip()
protected Rect get_tooltipRect()
protected void set_tooltipRect(Rect value)
public void Label(Rect position, string text)
public void Label(Rect position, Texture image)
public void Label(Rect position, GUIContent content)
public void Label(Rect position, string text, GUIStyle style)
public void Label(Rect position, Texture image, GUIStyle style)
public void Label(Rect position, GUIContent content, GUIStyle style)
public void DrawTexture(Rect position, Texture image)
public void DrawTexture(Rect position, Texture image, ScaleMode scaleMode)
public void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend)
public void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect)
public void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, float borderWidth, float cornerRadius)
internal bool CalculateScaledTextureRects(Rect position, ScaleMode scaleMode, float imageAspect, Rect& outScreenRect, Rect& outSourceRect)
public void DrawTextureWithTexCoords(Rect position, Texture image, Rect texCoords)
public void DrawTextureWithTexCoords(Rect position, Texture image, Rect texCoords, bool alphaBlend)
public void Box(Rect position, string text)
public void Box(Rect position, Texture image)
public void Box(Rect position, GUIContent content)
public void Box(Rect position, string text, GUIStyle style)
public void Box(Rect position, Texture image, GUIStyle style)
public void Box(Rect position, GUIContent content, GUIStyle style)
public bool Button(Rect position, string text)
public bool Button(Rect position, Texture image)
public bool Button(Rect position, GUIContent content)
public bool Button(Rect position, string text, GUIStyle style)
public bool Button(Rect position, Texture image, GUIStyle style)
public bool Button(Rect position, GUIContent content, GUIStyle style)
public bool RepeatButton(Rect position, string text)
public bool RepeatButton(Rect position, Texture image)
public bool RepeatButton(Rect position, GUIContent content)
public bool RepeatButton(Rect position, string text, GUIStyle style)
public bool RepeatButton(Rect position, Texture image, GUIStyle style)
public bool RepeatButton(Rect position, GUIContent content, GUIStyle style)
private bool DoRepeatButton(Rect position, GUIContent content, GUIStyle style, FocusType focusType)
public string TextField(Rect position, string text)
public string TextField(Rect position, string text, int maxLength)
public string TextField(Rect position, string text, GUIStyle style)
public string TextField(Rect position, string text, int maxLength, GUIStyle style)
public string PasswordField(Rect position, string password, char maskChar)
public string PasswordField(Rect position, string password, char maskChar, int maxLength)
public string PasswordField(Rect position, string password, char maskChar, GUIStyle style)
public string PasswordField(Rect position, string password, char maskChar, int maxLength, GUIStyle style)
internal string PasswordFieldGetStrToShow(string password, char maskChar)
public string TextArea(Rect position, string text)
public string TextArea(Rect position, string text, int maxLength)
public string TextArea(Rect position, string text, GUIStyle style)
public string TextArea(Rect position, string text, int maxLength, GUIStyle style)
private string TextArea(Rect position, GUIContent content, int maxLength, GUIStyle style)
internal void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style)
internal void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText)
internal void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar)
private void HandleTextFieldEventForTouchscreen(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar, TextEditor editor)
private void HandleTextFieldEventForDesktop(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, TextEditor editor)
public bool Toggle(Rect position, bool value, string text)
public bool Toggle(Rect position, bool value, Texture image)
public bool Toggle(Rect position, bool value, GUIContent content)
public bool Toggle(Rect position, bool value, string text, GUIStyle style)
public bool Toggle(Rect position, bool value, Texture image, GUIStyle style)
public bool Toggle(Rect position, bool value, GUIContent content, GUIStyle style)
public bool Toggle(Rect position, int id, bool value, GUIContent content, GUIStyle style)
public int Toolbar(Rect position, int selected, String[] texts)
public int Toolbar(Rect position, int selected, Texture[] images)
public int Toolbar(Rect position, int selected, GUIContent[] content)
public int Toolbar(Rect position, int selected, String[] texts, GUIStyle style)
public int Toolbar(Rect position, int selected, Texture[] images, GUIStyle style)
public int Toolbar(Rect position, int selected, GUIContent[] contents, GUIStyle style)
public int SelectionGrid(Rect position, int selected, String[] texts, int xCount)
public int SelectionGrid(Rect position, int selected, Texture[] images, int xCount)
public int SelectionGrid(Rect position, int selected, GUIContent[] content, int xCount)
public int SelectionGrid(Rect position, int selected, String[] texts, int xCount, GUIStyle style)
public int SelectionGrid(Rect position, int selected, Texture[] images, int xCount, GUIStyle style)
public int SelectionGrid(Rect position, int selected, GUIContent[] contents, int xCount, GUIStyle style)
internal void FindStyles(GUIStyle& style, GUIStyle& firstStyle, GUIStyle& midStyle, GUIStyle& lastStyle, string first, string mid, string last)
internal int CalcTotalHorizSpacing(int xCount, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle)
private int DoButtonGrid(Rect position, int selected, GUIContent[] contents, int xCount, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle)
private Rect[] CalcMouseRects(Rect position, int count, int xCount, float elemWidth, float elemHeight, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle, bool addBorders)
private int GetButtonGridMouseSelection(Rect[] buttonRects, Vector2 mousePos, bool findNearest)
public float HorizontalSlider(Rect position, float value, float leftValue, float rightValue)
public float HorizontalSlider(Rect position, float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb)
public float VerticalSlider(Rect position, float value, float topValue, float bottomValue)
public float VerticalSlider(Rect position, float value, float topValue, float bottomValue, GUIStyle slider, GUIStyle thumb)
public float Slider(Rect position, float value, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id)
public float HorizontalScrollbar(Rect position, float value, float size, float leftValue, float rightValue)
public float HorizontalScrollbar(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle style)
internal bool ScrollerRepeatButton(int scrollerID, Rect rect, GUIStyle style)
public float VerticalScrollbar(Rect position, float value, float size, float topValue, float bottomValue)
public float VerticalScrollbar(Rect position, float value, float size, float topValue, float bottomValue, GUIStyle style)
internal float Scroller(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUIStyle leftButton, GUIStyle rightButton, bool horiz)
public void BeginClip(Rect position, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset)
public void BeginGroup(Rect position)
public void BeginGroup(Rect position, string text)
public void BeginGroup(Rect position, Texture image)
public void BeginGroup(Rect position, GUIContent content)
public void BeginGroup(Rect position, GUIStyle style)
public void BeginGroup(Rect position, string text, GUIStyle style)
public void BeginGroup(Rect position, Texture image, GUIStyle style)
public void BeginGroup(Rect position, GUIContent content, GUIStyle style)
internal void BeginGroup(Rect position, GUIContent content, GUIStyle style, Vector2 scrollOffset)
public void EndGroup()
public void BeginClip(Rect position)
public void EndClip()
public Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect)
public Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical)
public Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar)
public Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar)
protected Vector2 DoBeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background)
internal Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background)
public void EndScrollView()
public void EndScrollView(bool handleScrollWheel)
internal ScrollViewState GetTopScrollView()
public void ScrollTo(Rect position)
public bool ScrollTowards(Rect position, float maxDelta)
public Rect Window(int id, Rect clientRect, WindowFunction func, string text)
public Rect Window(int id, Rect clientRect, WindowFunction func, Texture image)
public Rect Window(int id, Rect clientRect, WindowFunction func, GUIContent content)
public Rect Window(int id, Rect clientRect, WindowFunction func, string text, GUIStyle style)
public Rect Window(int id, Rect clientRect, WindowFunction func, Texture image, GUIStyle style)
public Rect Window(int id, Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style)
public Rect ModalWindow(int id, Rect clientRect, WindowFunction func, string text)
public Rect ModalWindow(int id, Rect clientRect, WindowFunction func, Texture image)
public Rect ModalWindow(int id, Rect clientRect, WindowFunction func, GUIContent content)
public Rect ModalWindow(int id, Rect clientRect, WindowFunction func, string text, GUIStyle style)
public Rect ModalWindow(int id, Rect clientRect, WindowFunction func, Texture image, GUIStyle style)
public Rect ModalWindow(int id, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style)
private Rect DoWindow(int id, Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style, GUISkin skin, bool forceRectOnLayout)
private Rect DoModalWindow(int id, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, GUISkin skin)
internal void CallWindowDelegate(WindowFunction func, int id, int instanceID, GUISkin _skin, int forceRect, float width, float height, GUIStyle style)
public void DragWindow()
internal void BeginWindows(int skinMode, int editorWindowInstanceID)
internal void EndWindows()
public Color get_color()
public void set_color(Color value)
private void INTERNAL_get_color(Color& value)
private void INTERNAL_set_color(Color& value)
public Color get_backgroundColor()
public void set_backgroundColor(Color value)
private void INTERNAL_get_backgroundColor(Color& value)
private void INTERNAL_set_backgroundColor(Color& value)
public Color get_contentColor()
public void set_contentColor(Color value)
private void INTERNAL_get_contentColor(Color& value)
private void INTERNAL_set_contentColor(Color& value)
public bool get_changed()
public void set_changed(bool value)
public bool get_enabled()
public void set_enabled(bool value)
private string Internal_GetTooltip()
private void Internal_SetTooltip(string value)
private string Internal_GetMouseTooltip()
public int get_depth()
public void set_depth(int value)
private void DoLabel(Rect position, GUIContent content, IntPtr style)
private void INTERNAL_CALL_DoLabel(Rect& position, GUIContent content, IntPtr style)
private void InitializeGUIClipTexture()
internal Material get_blendMaterial()
internal Material get_blitMaterial()
internal Material get_roundedRectMaterial()
private bool DoButton(Rect position, GUIContent content, IntPtr style)
private bool INTERNAL_CALL_DoButton(Rect& position, GUIContent content, IntPtr style)
public void SetNextControlName(string name)
public string GetNameOfFocusedControl()
public void FocusControl(string name)
internal bool DoToggle(Rect position, int id, bool value, GUIContent content, IntPtr style)
private bool INTERNAL_CALL_DoToggle(Rect& position, int id, bool value, GUIContent content, IntPtr style)
internal bool get_usePageScrollbars()
internal void InternalRepaintEditorWindow()
private Rect Internal_DoModalWindow(int id, int instanceID, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, GUISkin skin)
private void INTERNAL_CALL_Internal_DoModalWindow(int id, int instanceID, Rect& clientRect, WindowFunction func, GUIContent content, GUIStyle style, GUISkin skin, Rect& value)
private Rect Internal_DoWindow(int id, int instanceID, Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style, GUISkin skin, bool forceRectOnLayout)
private void INTERNAL_CALL_Internal_DoWindow(int id, int instanceID, Rect& clientRect, WindowFunction func, GUIContent title, GUIStyle style, GUISkin skin, bool forceRectOnLayout, Rect& value)
public void DragWindow(Rect position)
private void INTERNAL_CALL_DragWindow(Rect& position)
public void BringWindowToFront(int windowID)
public void BringWindowToBack(int windowID)
public void FocusWindow(int windowID)
public void UnfocusWindow()
private void Internal_BeginWindows()
private void Internal_EndWindows()
}
internal UnityEngine.GUIAspectSizer : GUILayoutEntry {
private float aspect
public void .ctor(float aspect, GUILayoutOption[] options)
public void CalcHeight()
}
internal UnityEngine.GUIClip : object {
public bool enabled
public Rect topmostRect
public Rect visibleRect
internal void Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset)
internal void Pop()
public Vector2 Unclip(Vector2 pos)
public Rect Unclip(Rect rect)
public Vector2 Clip(Vector2 absolutePos)
public Rect Clip(Rect absoluteRect)
public Vector2 GetAbsoluteMousePosition()
internal void Internal_Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset)
private void INTERNAL_CALL_Internal_Push(Rect& screenRect, Vector2& scrollOffset, Vector2& renderOffset, bool resetOffset)
internal void Internal_Pop()
internal int Internal_GetCount()
internal Rect GetTopRect()
private void INTERNAL_CALL_GetTopRect(Rect& value)
public bool get_enabled()
private void Unclip_Vector2(Vector2& pos)
private void INTERNAL_CALL_Unclip_Vector2(Vector2& pos)
public Rect get_topmostRect()
private void INTERNAL_get_topmostRect(Rect& value)
private void Unclip_Rect(Rect& rect)
private void INTERNAL_CALL_Unclip_Rect(Rect& rect)
private void Clip_Vector2(Vector2& absolutePos)
private void INTERNAL_CALL_Clip_Vector2(Vector2& absolutePos)
private void Internal_Clip_Rect(Rect& absoluteRect)
private void INTERNAL_CALL_Internal_Clip_Rect(Rect& absoluteRect)
internal void Reapply()
internal Matrix4x4 GetMatrix()
private void INTERNAL_CALL_GetMatrix(Matrix4x4& value)
internal void SetMatrix(Matrix4x4 m)
private void INTERNAL_CALL_SetMatrix(Matrix4x4& m)
internal void SetTransform(Matrix4x4 objectTransform, Rect clipRect)
private void INTERNAL_CALL_SetTransform(Matrix4x4& objectTransform, Rect& clipRect)
public Rect get_visibleRect()
private void INTERNAL_get_visibleRect(Rect& value)
private void Internal_GetAbsoluteMousePosition(Vector2& output)
}
public UnityEngine.GUIContent : object {
private string m_Text
private Texture m_Image
private string m_Tooltip
private GUIContent s_Text
private GUIContent s_Image
private GUIContent s_TextImage
public GUIContent none
public string text
public Texture image
public string tooltip
internal int hash
public void .ctor(string text)
public void .ctor(Texture image)
public void .ctor(string text, Texture image)
public void .ctor(string text, string tooltip)
public void .ctor(Texture image, string tooltip)
public void .ctor(string text, Texture image, string tooltip)
public void .ctor(GUIContent src)
public string get_text()
public void set_text(string value)
public Texture get_image()
public void set_image(Texture value)
public string get_tooltip()
public void set_tooltip(string value)
internal int get_hash()
internal GUIContent Temp(string t)
internal GUIContent Temp(string t, string tooltip)
internal GUIContent Temp(Texture i)
internal GUIContent Temp(Texture i, string tooltip)
internal GUIContent Temp(string t, Texture i)
internal void ClearStaticCache()
internal GUIContent[] Temp(String[] texts)
internal GUIContent[] Temp(Texture[] images)
}
public UnityEngine.GUIElement : Behaviour {
public bool HitTest(Vector3 screenPosition, Camera camera)
public bool HitTest(Vector3 screenPosition)
private bool INTERNAL_CALL_HitTest(GUIElement self, Vector3& screenPosition, Camera camera)
public Rect GetScreenRect(Camera camera)
public Rect GetScreenRect()
private void INTERNAL_CALL_GetScreenRect(GUIElement self, Camera camera, Rect& value)
}
internal UnityEngine.GUIGridSizer : GUILayoutEntry {
private int m_Count
private int m_XCount
private float m_MinButtonWidth
private float m_MaxButtonWidth
private float m_MinButtonHeight
private float m_MaxButtonHeight
private int rows
private void .ctor(GUIContent[] contents, int xCount, GUIStyle buttonStyle, GUILayoutOption[] options)
public Rect GetRect(GUIContent[] contents, int xCount, GUIStyle style, GUILayoutOption[] options)
private int get_rows()
}
public UnityEngine.GUILayer : Behaviour {
public GUIElement HitTest(Vector3 screenPosition)
private GUIElement INTERNAL_CALL_HitTest(GUILayer self, Vector3& screenPosition)
}
public UnityEngine.GUILayout : object {
public void Label(Texture image, GUILayoutOption[] options)
public void Label(string text, GUILayoutOption[] options)
public void Label(GUIContent content, GUILayoutOption[] options)
public void Label(Texture image, GUIStyle style, GUILayoutOption[] options)
public void Label(string text, GUIStyle style, GUILayoutOption[] options)
public void Label(GUIContent content, GUIStyle style, GUILayoutOption[] options)
private void DoLabel(GUIContent content, GUIStyle style, GUILayoutOption[] options)
public void Box(Texture image, GUILayoutOption[] options)
public void Box(string text, GUILayoutOption[] options)
public void Box(GUIContent content, GUILayoutOption[] options)
public void Box(Texture image, GUIStyle style, GUILayoutOption[] options)
public void Box(string text, GUIStyle style, GUILayoutOption[] options)
public void Box(GUIContent content, GUIStyle style, GUILayoutOption[] options)
private void DoBox(GUIContent content, GUIStyle style, GUILayoutOption[] options)
public bool Button(Texture image, GUILayoutOption[] options)
public bool Button(string text, GUILayoutOption[] options)
public bool Button(GUIContent content, GUILayoutOption[] options)
public bool Button(Texture image, GUIStyle style, GUILayoutOption[] options)
public bool Button(string text, GUIStyle style, GUILayoutOption[] options)
public bool Button(GUIContent content, GUIStyle style, GUILayoutOption[] options)
private bool DoButton(GUIContent content, GUIStyle style, GUILayoutOption[] options)
public bool RepeatButton(Texture image, GUILayoutOption[] options)
public bool RepeatButton(string text, GUILayoutOption[] options)
public bool RepeatButton(GUIContent content, GUILayoutOption[] options)
public bool RepeatButton(Texture image, GUIStyle style, GUILayoutOption[] options)
public bool RepeatButton(string text, GUIStyle style, GUILayoutOption[] options)
public bool RepeatButton(GUIContent content, GUIStyle style, GUILayoutOption[] options)
private bool DoRepeatButton(GUIContent content, GUIStyle style, GUILayoutOption[] options)
public string TextField(string text, GUILayoutOption[] options)
public string TextField(string text, int maxLength, GUILayoutOption[] options)
public string TextField(string text, GUIStyle style, GUILayoutOption[] options)
public string TextField(string text, int maxLength, GUIStyle style, GUILayoutOption[] options)
public string PasswordField(string password, char maskChar, GUILayoutOption[] options)
public string PasswordField(string password, char maskChar, int maxLength, GUILayoutOption[] options)
public string PasswordField(string password, char maskChar, GUIStyle style, GUILayoutOption[] options)
public string PasswordField(string password, char maskChar, int maxLength, GUIStyle style, GUILayoutOption[] options)
public string TextArea(string text, GUILayoutOption[] options)
public string TextArea(string text, int maxLength, GUILayoutOption[] options)
public string TextArea(string text, GUIStyle style, GUILayoutOption[] options)
public string TextArea(string text, int maxLength, GUIStyle style, GUILayoutOption[] options)
private string DoTextField(string text, int maxLength, bool multiline, GUIStyle style, GUILayoutOption[] options)
public bool Toggle(bool value, Texture image, GUILayoutOption[] options)
public bool Toggle(bool value, string text, GUILayoutOption[] options)
public bool Toggle(bool value, GUIContent content, GUILayoutOption[] options)
public bool Toggle(bool value, Texture image, GUIStyle style, GUILayoutOption[] options)
public bool Toggle(bool value, string text, GUIStyle style, GUILayoutOption[] options)
public bool Toggle(bool value, GUIContent content, GUIStyle style, GUILayoutOption[] options)
private bool DoToggle(bool value, GUIContent content, GUIStyle style, GUILayoutOption[] options)
public int Toolbar(int selected, String[] texts, GUILayoutOption[] options)
public int Toolbar(int selected, Texture[] images, GUILayoutOption[] options)
public int Toolbar(int selected, GUIContent[] content, GUILayoutOption[] options)
public int Toolbar(int selected, String[] texts, GUIStyle style, GUILayoutOption[] options)
public int Toolbar(int selected, Texture[] images, GUIStyle style, GUILayoutOption[] options)
public int Toolbar(int selected, GUIContent[] contents, GUIStyle style, GUILayoutOption[] options)
public int SelectionGrid(int selected, String[] texts, int xCount, GUILayoutOption[] options)
public int SelectionGrid(int selected, Texture[] images, int xCount, GUILayoutOption[] options)
public int SelectionGrid(int selected, GUIContent[] content, int xCount, GUILayoutOption[] options)
public int SelectionGrid(int selected, String[] texts, int xCount, GUIStyle style, GUILayoutOption[] options)
public int SelectionGrid(int selected, Texture[] images, int xCount, GUIStyle style, GUILayoutOption[] options)
public int SelectionGrid(int selected, GUIContent[] contents, int xCount, GUIStyle style, GUILayoutOption[] options)
public float HorizontalSlider(float value, float leftValue, float rightValue, GUILayoutOption[] options)
public float HorizontalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options)
private float DoHorizontalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options)
public float VerticalSlider(float value, float leftValue, float rightValue, GUILayoutOption[] options)
public float VerticalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options)
private float DoVerticalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options)
public float HorizontalScrollbar(float value, float size, float leftValue, float rightValue, GUILayoutOption[] options)
public float HorizontalScrollbar(float value, float size, float leftValue, float rightValue, GUIStyle style, GUILayoutOption[] options)
public float VerticalScrollbar(float value, float size, float topValue, float bottomValue, GUILayoutOption[] options)
public float VerticalScrollbar(float value, float size, float topValue, float bottomValue, GUIStyle style, GUILayoutOption[] options)
public void Space(float pixels)
public void FlexibleSpace()
public void BeginHorizontal(GUILayoutOption[] options)
public void BeginHorizontal(GUIStyle style, GUILayoutOption[] options)
public void BeginHorizontal(string text, GUIStyle style, GUILayoutOption[] options)
public void BeginHorizontal(Texture image, GUIStyle style, GUILayoutOption[] options)
public void BeginHorizontal(GUIContent content, GUIStyle style, GUILayoutOption[] options)
public void EndHorizontal()
public void BeginVertical(GUILayoutOption[] options)
public void BeginVertical(GUIStyle style, GUILayoutOption[] options)
public void BeginVertical(string text, GUIStyle style, GUILayoutOption[] options)
public void BeginVertical(Texture image, GUIStyle style, GUILayoutOption[] options)
public void BeginVertical(GUIContent content, GUIStyle style, GUILayoutOption[] options)
public void EndVertical()
public void BeginArea(Rect screenRect)
public void BeginArea(Rect screenRect, string text)
public void BeginArea(Rect screenRect, Texture image)
public void BeginArea(Rect screenRect, GUIContent content)
public void BeginArea(Rect screenRect, GUIStyle style)
public void BeginArea(Rect screenRect, string text, GUIStyle style)
public void BeginArea(Rect screenRect, Texture image, GUIStyle style)
public void BeginArea(Rect screenRect, GUIContent content, GUIStyle style)
public void EndArea()
public Vector2 BeginScrollView(Vector2 scrollPosition, GUILayoutOption[] options)
public Vector2 BeginScrollView(Vector2 scrollPosition, bool alwaysShowHorizontal, bool alwaysShowVertical, GUILayoutOption[] options)
public Vector2 BeginScrollView(Vector2 scrollPosition, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUILayoutOption[] options)
public Vector2 BeginScrollView(Vector2 scrollPosition, GUIStyle style)
public Vector2 BeginScrollView(Vector2 scrollPosition, GUIStyle style, GUILayoutOption[] options)
public Vector2 BeginScrollView(Vector2 scrollPosition, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUILayoutOption[] options)
public Vector2 BeginScrollView(Vector2 scrollPosition, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background, GUILayoutOption[] options)
public void EndScrollView()
internal void EndScrollView(bool handleScrollWheel)
public Rect Window(int id, Rect screenRect, WindowFunction func, string text, GUILayoutOption[] options)
public Rect Window(int id, Rect screenRect, WindowFunction func, Texture image, GUILayoutOption[] options)
public Rect Window(int id, Rect screenRect, WindowFunction func, GUIContent content, GUILayoutOption[] options)
public Rect Window(int id, Rect screenRect, WindowFunction func, string text, GUIStyle style, GUILayoutOption[] options)
public Rect Window(int id, Rect screenRect, WindowFunction func, Texture image, GUIStyle style, GUILayoutOption[] options)
public Rect Window(int id, Rect screenRect, WindowFunction func, GUIContent content, GUIStyle style, GUILayoutOption[] options)
private Rect DoWindow(int id, Rect screenRect, WindowFunction func, GUIContent content, GUIStyle style, GUILayoutOption[] options)
public GUILayoutOption Width(float width)
public GUILayoutOption MinWidth(float minWidth)
public GUILayoutOption MaxWidth(float maxWidth)
public GUILayoutOption Height(float height)
public GUILayoutOption MinHeight(float minHeight)
public GUILayoutOption MaxHeight(float maxHeight)
public GUILayoutOption ExpandWidth(bool expand)
public GUILayoutOption ExpandHeight(bool expand)
}
internal UnityEngine.GUILayoutEntry : object {
public float minWidth
public float maxWidth
public float minHeight
public float maxHeight
public Rect rect
public int stretchWidth
public int stretchHeight
private GUIStyle m_Style
internal Rect kDummyRect
protected int indent
public GUIStyle style
public RectOffset margin
public void .ctor(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style)
public void .ctor(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style, GUILayoutOption[] options)
public GUIStyle get_style()
public void set_style(GUIStyle value)
public RectOffset get_margin()
public void CalcWidth()
public void CalcHeight()
public void SetHorizontal(float x, float width)
public void SetVertical(float y, float height)
protected void ApplyStyleSettings(GUIStyle style)
public void ApplyOptions(GUILayoutOption[] options)
public string ToString()
}
internal UnityEngine.GUILayoutGroup : GUILayoutEntry {
public List`1<GUILayoutEntry> entries
public bool isVertical
public bool resetCoords
public float spacing
public bool sameSize
public bool isWindow
public int windowID
private int m_Cursor
protected int m_StretchableCountX
protected int m_StretchableCountY
protected bool m_UserSpecifiedWidth
protected bool m_UserSpecifiedHeight
protected float m_ChildMinWidth
protected float m_ChildMaxWidth
protected float m_ChildMinHeight
protected float m_ChildMaxHeight
private RectOffset m_Margin
public RectOffset margin
public void .ctor(GUIStyle _style, GUILayoutOption[] options)
public RectOffset get_margin()
public void ApplyOptions(GUILayoutOption[] options)
protected void ApplyStyleSettings(GUIStyle style)
public void ResetCursor()
public Rect PeekNext()
public GUILayoutEntry GetNext()
public Rect GetLast()
public void Add(GUILayoutEntry e)
public void CalcWidth()
public void SetHorizontal(float x, float width)
public void CalcHeight()
public void SetVertical(float y, float height)
public string ToString()
}
public UnityEngine.GUILayoutOption : object {
internal Type type
internal object value
internal void .ctor(Type type, object value)
}
public UnityEngine.GUILayoutUtility : object {
private Dictionary`2<int, LayoutCache> s_StoredLayouts
private Dictionary`2<int, LayoutCache> s_StoredWindows
internal LayoutCache current
internal Rect kDummyRect
private GUIStyle s_SpaceStyle
internal GUILayoutGroup topLevel
internal GUIStyle spaceStyle
internal void CleanupRoots()
internal LayoutCache SelectIDList(int instanceID, bool isWindow)
internal void Begin(int instanceID)
internal void BeginContainer(LayoutCache cache)
internal void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options)
public void BeginGroup(string GroupName)
public void EndGroup(string groupName)
internal void Layout()
internal void LayoutFromEditorWindow()
internal void LayoutFromContainer(float w, float h)
internal float LayoutFromInspector(float width)
internal void LayoutFreeGroup(GUILayoutGroup toplevel)
private void LayoutSingleGroup(GUILayoutGroup i)
private GUILayoutGroup CreateGUILayoutGroupInstanceOfType(Type LayoutType)
internal GUILayoutGroup BeginLayoutGroup(GUIStyle style, GUILayoutOption[] options, Type layoutType)
internal void EndLayoutGroup()
internal GUILayoutGroup BeginLayoutArea(GUIStyle style, Type layoutType)
internal GUILayoutGroup DoBeginLayoutArea(GUIStyle style, Type layoutType)
internal GUILayoutGroup get_topLevel()
public Rect GetRect(GUIContent content, GUIStyle style)
public Rect GetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options)
private Rect DoGetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options)
public Rect GetRect(float width, float height)
public Rect GetRect(float width, float height, GUIStyle style)
public Rect GetRect(float width, float height, GUILayoutOption[] options)
public Rect GetRect(float width, float height, GUIStyle style, GUILayoutOption[] options)
public Rect GetRect(float minWidth, float maxWidth, float minHeight, float maxHeight)
public Rect GetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style)
public Rect GetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUILayoutOption[] options)
public Rect GetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style, GUILayoutOption[] options)
private Rect DoGetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style, GUILayoutOption[] options)
public Rect GetLastRect()
public Rect GetAspectRect(float aspect)
public Rect GetAspectRect(float aspect, GUIStyle style)
public Rect GetAspectRect(float aspect, GUILayoutOption[] options)
public Rect GetAspectRect(float aspect, GUIStyle style, GUILayoutOption[] options)
private Rect DoGetAspectRect(float aspect, GUIStyle style, GUILayoutOption[] options)
internal GUIStyle get_spaceStyle()
private Rect Internal_GetWindowRect(int windowID)
private void INTERNAL_CALL_Internal_GetWindowRect(int windowID, Rect& value)
private void Internal_MoveWindow(int windowID, Rect r)
private void INTERNAL_CALL_Internal_MoveWindow(int windowID, Rect& r)
internal Rect GetWindowsBounds()
private void INTERNAL_CALL_GetWindowsBounds(Rect& value)
}
internal UnityEngine.GUIScrollGroup : GUILayoutGroup {
public float calcMinWidth
public float calcMaxWidth
public float calcMinHeight
public float calcMaxHeight
public float clientWidth
public float clientHeight
public bool allowHorizontalScroll
public bool allowVerticalScroll
public bool needsHorizontalScrollbar
public bool needsVerticalScrollbar
public GUIStyle horizontalScrollbar
public GUIStyle verticalScrollbar
public void CalcWidth()
public void SetHorizontal(float x, float width)
public void CalcHeight()
public void SetVertical(float y, float height)
}
public UnityEngine.GUISettings : object {
private bool m_DoubleClickSelectsWord
private bool m_TripleClickSelectsLine
private Color m_CursorColor
private float m_CursorFlashSpeed
private Color m_SelectionColor
public bool doubleClickSelectsWord
public bool tripleClickSelectsLine
public Color cursorColor
public float cursorFlashSpeed
public Color selectionColor
public bool get_doubleClickSelectsWord()
public void set_doubleClickSelectsWord(bool value)
public bool get_tripleClickSelectsLine()
public void set_tripleClickSelectsLine(bool value)
public Color get_cursorColor()
public void set_cursorColor(Color value)
public float get_cursorFlashSpeed()
public void set_cursorFlashSpeed(float value)
public Color get_selectionColor()
public void set_selectionColor(Color value)
private float Internal_GetCursorFlashSpeed()
}
public UnityEngine.GUISkin : ScriptableObject {
private Font m_Font
private GUIStyle m_box
private GUIStyle m_button
private GUIStyle m_toggle
private GUIStyle m_label
private GUIStyle m_textField
private GUIStyle m_textArea
private GUIStyle m_window
private GUIStyle m_horizontalSlider
private GUIStyle m_horizontalSliderThumb
private GUIStyle m_verticalSlider
private GUIStyle m_verticalSliderThumb
private GUIStyle m_horizontalScrollbar
private GUIStyle m_horizontalScrollbarThumb
private GUIStyle m_horizontalScrollbarLeftButton
private GUIStyle m_horizontalScrollbarRightButton
private GUIStyle m_verticalScrollbar
private GUIStyle m_verticalScrollbarThumb
private GUIStyle m_verticalScrollbarUpButton
private GUIStyle m_verticalScrollbarDownButton
private GUIStyle m_ScrollView
internal GUIStyle[] m_CustomStyles
private GUISettings m_Settings
internal GUIStyle ms_Error
private Dictionary`2<string, GUIStyle> m_Styles
internal SkinChangedDelegate m_SkinChanged
internal GUISkin current
public Font font
public GUIStyle box
public GUIStyle label
public GUIStyle textField
public GUIStyle textArea
public GUIStyle button
public GUIStyle toggle
public GUIStyle window
public GUIStyle horizontalSlider
public GUIStyle horizontalSliderThumb
public GUIStyle verticalSlider
public GUIStyle verticalSliderThumb
public GUIStyle horizontalScrollbar
public GUIStyle horizontalScrollbarThumb
public GUIStyle horizontalScrollbarLeftButton
public GUIStyle horizontalScrollbarRightButton
public GUIStyle verticalScrollbar
public GUIStyle verticalScrollbarThumb
public GUIStyle verticalScrollbarUpButton
public GUIStyle verticalScrollbarDownButton
public GUIStyle scrollView
public GUIStyle[] customStyles
public GUISettings settings
internal GUIStyle error
internal void OnEnable()
internal void CleanupRoots()
public Font get_font()
public void set_font(Font value)
public GUIStyle get_box()
public void set_box(GUIStyle value)
public GUIStyle get_label()
public void set_label(GUIStyle value)
public GUIStyle get_textField()
public void set_textField(GUIStyle value)
public GUIStyle get_textArea()
public void set_textArea(GUIStyle value)
public GUIStyle get_button()
public void set_button(GUIStyle value)
public GUIStyle get_toggle()
public void set_toggle(GUIStyle value)
public GUIStyle get_window()
public void set_window(GUIStyle value)
public GUIStyle get_horizontalSlider()
public void set_horizontalSlider(GUIStyle value)
public GUIStyle get_horizontalSliderThumb()
public void set_horizontalSliderThumb(GUIStyle value)
public GUIStyle get_verticalSlider()
public void set_verticalSlider(GUIStyle value)
public GUIStyle get_verticalSliderThumb()
public void set_verticalSliderThumb(GUIStyle value)
public GUIStyle get_horizontalScrollbar()
public void set_horizontalScrollbar(GUIStyle value)
public GUIStyle get_horizontalScrollbarThumb()
public void set_horizontalScrollbarThumb(GUIStyle value)
public GUIStyle get_horizontalScrollbarLeftButton()
public void set_horizontalScrollbarLeftButton(GUIStyle value)
public GUIStyle get_horizontalScrollbarRightButton()
public void set_horizontalScrollbarRightButton(GUIStyle value)
public GUIStyle get_verticalScrollbar()
public void set_verticalScrollbar(GUIStyle value)
public GUIStyle get_verticalScrollbarThumb()
public void set_verticalScrollbarThumb(GUIStyle value)
public GUIStyle get_verticalScrollbarUpButton()
public void set_verticalScrollbarUpButton(GUIStyle value)
public GUIStyle get_verticalScrollbarDownButton()
public void set_verticalScrollbarDownButton(GUIStyle value)
public GUIStyle get_scrollView()
public void set_scrollView(GUIStyle value)
public GUIStyle[] get_customStyles()
public void set_customStyles(GUIStyle[] value)
public GUISettings get_settings()
internal GUIStyle get_error()
internal void Apply()
private void BuildStyleCache()
public GUIStyle GetStyle(string styleName)
public GUIStyle FindStyle(string styleName)
internal void MakeCurrent()
public IEnumerator GetEnumerator()
}
internal UnityEngine.GUIStateObjects : object {
private Dictionary`2<int, object> s_StateCache
internal object GetStateObject(Type t, int controlID)
internal object QueryStateObject(Type t, int controlID)
internal void Tests_ClearObjects()
}
public UnityEngine.GUIStyle : object {
internal IntPtr m_Ptr
private GUIStyleState m_Normal
private GUIStyleState m_Hover
private GUIStyleState m_Active
private GUIStyleState m_Focused
private GUIStyleState m_OnNormal
private GUIStyleState m_OnHover
private GUIStyleState m_OnActive
private GUIStyleState m_OnFocused
private RectOffset m_Border
private RectOffset m_Padding
private RectOffset m_Margin
private RectOffset m_Overflow
private Font m_FontInternal
internal bool showKeyboardFocus
private GUIStyle s_None
public GUIStyleState normal
public GUIStyleState hover
public GUIStyleState active
public GUIStyleState onNormal
public GUIStyleState onHover
public GUIStyleState onActive
public GUIStyleState focused
public GUIStyleState onFocused
public RectOffset border
public RectOffset margin
public RectOffset padding
public RectOffset overflow
public Vector2 clipOffset
public Font font
public float lineHeight
public GUIStyle none
public bool isHeightDependantOnWidth
public string name
public ImagePosition imagePosition
public TextAnchor alignment
public bool wordWrap
public TextClipping clipping
public Vector2 contentOffset
internal Vector2 Internal_clipOffset
public float fixedWidth
public float fixedHeight
public bool stretchWidth
public bool stretchHeight
public int fontSize
public FontStyle fontStyle
public bool richText
public void .ctor(GUIStyle other)
protected void Finalize()
internal void CleanupRoots()
internal void InternalOnAfterDeserialize()
public GUIStyleState get_normal()
public void set_normal(GUIStyleState value)
public GUIStyleState get_hover()
public void set_hover(GUIStyleState value)
public GUIStyleState get_active()
public void set_active(GUIStyleState value)
public GUIStyleState get_onNormal()
public void set_onNormal(GUIStyleState value)
public GUIStyleState get_onHover()
public void set_onHover(GUIStyleState value)
public GUIStyleState get_onActive()
public void set_onActive(GUIStyleState value)
public GUIStyleState get_focused()
public void set_focused(GUIStyleState value)
public GUIStyleState get_onFocused()
public void set_onFocused(GUIStyleState value)
public RectOffset get_border()
public void set_border(RectOffset value)
public RectOffset get_margin()
public void set_margin(RectOffset value)
public RectOffset get_padding()
public void set_padding(RectOffset value)
public RectOffset get_overflow()
public void set_overflow(RectOffset value)
public Vector2 get_clipOffset()
public void set_clipOffset(Vector2 value)
public Font get_font()
public void set_font(Font value)
public float get_lineHeight()
private void Internal_Draw(IntPtr target, Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus)
public void Draw(Rect position, bool isHover, bool isActive, bool on, bool hasKeyboardFocus)
public void Draw(Rect position, string text, bool isHover, bool isActive, bool on, bool hasKeyboardFocus)
public void Draw(Rect position, Texture image, bool isHover, bool isActive, bool on, bool hasKeyboardFocus)
public void Draw(Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus)
public void Draw(Rect position, GUIContent content, int controlID)
public void Draw(Rect position, GUIContent content, int controlID, bool on)
public void DrawCursor(Rect position, GUIContent content, int controlID, int Character)
internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition)
internal void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition)
public void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter)
public GUIStyle op_Implicit(string str)
public GUIStyle get_none()
public Vector2 GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex)
public int GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition)
internal int GetNumCharactersThatFitWithinWidth(string text, float width)
public Vector2 CalcSize(GUIContent content)
internal Vector2 CalcSizeWithConstraints(GUIContent content, Vector2 constraints)
public Vector2 CalcScreenSize(Vector2 contentSize)
public float CalcHeight(GUIContent content, float width)
public bool get_isHeightDependantOnWidth()
public void CalcMinMaxWidth(GUIContent content, Single& minWidth, Single& maxWidth)
public string ToString()
private void Init()
private void InitCopy(GUIStyle other)
private void Cleanup()
public string get_name()
public void set_name(string value)
private IntPtr GetStyleStatePtr(int idx)
private void INTERNAL_CALL_GetStyleStatePtr(GUIStyle self, int idx, IntPtr& value)
private void AssignStyleState(int idx, IntPtr srcStyleState)
private IntPtr GetRectOffsetPtr(int idx)
private void INTERNAL_CALL_GetRectOffsetPtr(GUIStyle self, int idx, IntPtr& value)
private void AssignRectOffset(int idx, IntPtr srcRectOffset)
public ImagePosition get_imagePosition()
public void set_imagePosition(ImagePosition value)
public TextAnchor get_alignment()
public void set_alignment(TextAnchor value)
public bool get_wordWrap()
public void set_wordWrap(bool value)
public TextClipping get_clipping()
public void set_clipping(TextClipping value)
public Vector2 get_contentOffset()
public void set_contentOffset(Vector2 value)
private void INTERNAL_get_contentOffset(Vector2& value)
private void INTERNAL_set_contentOffset(Vector2& value)
internal Vector2 get_Internal_clipOffset()
internal void set_Internal_clipOffset(Vector2 value)
private void INTERNAL_get_Internal_clipOffset(Vector2& value)
private void INTERNAL_set_Internal_clipOffset(Vector2& value)
public float get_fixedWidth()
public void set_fixedWidth(float value)
public float get_fixedHeight()
public void set_fixedHeight(float value)
public bool get_stretchWidth()
public void set_stretchWidth(bool value)
public bool get_stretchHeight()
public void set_stretchHeight(bool value)
private float Internal_GetLineHeight(IntPtr target)
private void SetFontInternal(Font value)
private Font GetFontInternalDuringLoadingThread()
private Font GetFontInternal()
public int get_fontSize()
public void set_fontSize(int value)
public FontStyle get_fontStyle()
public void set_fontStyle(FontStyle value)
public bool get_richText()
public void set_richText(bool value)
private void Internal_Draw(GUIContent content, Internal_DrawArguments& arguments)
private void Internal_Draw2(IntPtr style, Rect position, GUIContent content, int controlID, bool on)
private void INTERNAL_CALL_Internal_Draw2(IntPtr style, Rect& position, GUIContent content, int controlID, bool on)
internal void SetMouseTooltip(string tooltip, Rect screenRect)
private void INTERNAL_CALL_SetMouseTooltip(string tooltip, Rect& screenRect)
private void Internal_DrawPrefixLabel(IntPtr style, Rect position, GUIContent content, int controlID, bool on)
private void INTERNAL_CALL_Internal_DrawPrefixLabel(IntPtr style, Rect& position, GUIContent content, int controlID, bool on)
private float Internal_GetCursorFlashOffset()
private void Internal_DrawCursor(IntPtr target, Rect position, GUIContent content, int pos, Color cursorColor)
private void INTERNAL_CALL_Internal_DrawCursor(IntPtr target, Rect& position, GUIContent content, int pos, Color& cursorColor)
private void Internal_DrawWithTextSelection(GUIContent content, Internal_DrawWithTextSelectionArguments& arguments)
internal void SetDefaultFont(Font font)
internal void Internal_GetCursorPixelPosition(IntPtr target, Rect position, GUIContent content, int cursorStringIndex, Vector2& ret)
private void INTERNAL_CALL_Internal_GetCursorPixelPosition(IntPtr target, Rect& position, GUIContent content, int cursorStringIndex, Vector2& ret)
internal int Internal_GetCursorStringIndex(IntPtr target, Rect position, GUIContent content, Vector2 cursorPixelPosition)
private int INTERNAL_CALL_Internal_GetCursorStringIndex(IntPtr target, Rect& position, GUIContent content, Vector2& cursorPixelPosition)
internal int Internal_GetNumCharactersThatFitWithinWidth(IntPtr target, string text, float width)
internal void Internal_CalcSize(IntPtr target, GUIContent content, Vector2& ret)
internal void Internal_CalcSizeWithConstraints(IntPtr target, GUIContent content, Vector2 maxSize, Vector2& ret)
private void INTERNAL_CALL_Internal_CalcSizeWithConstraints(IntPtr target, GUIContent content, Vector2& maxSize, Vector2& ret)
private float Internal_CalcHeight(IntPtr target, GUIContent content, float width)
private void Internal_CalcMinMaxWidth(IntPtr target, GUIContent content, Single& minWidth, Single& maxWidth)
}
public UnityEngine.GUIStyleState : object {
internal IntPtr m_Ptr
private GUIStyle m_SourceStyle
private Texture2D m_Background
public Texture2D background
public Color textColor
private void .ctor(GUIStyle sourceStyle, IntPtr source)
internal GUIStyleState ProduceGUIStyleStateFromDeserialization(GUIStyle sourceStyle, IntPtr source)
internal GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source)
protected void Finalize()
public Texture2D get_background()
public void set_background(Texture2D value)
private void Init()
private void Cleanup()
private void SetBackgroundInternal(Texture2D value)
private Texture2D GetBackgroundInternalFromDeserialization()
private Texture2D GetBackgroundInternal()
public Color get_textColor()
public void set_textColor(Color value)
private void INTERNAL_get_textColor(Color& value)
private void INTERNAL_set_textColor(Color& value)
}
public UnityEngine.GUITargetAttribute : Attribute {
internal int displayMask
public void .ctor(int displayIndex)
public void .ctor(int displayIndex, int displayIndex1)
public void .ctor(int displayIndex, int displayIndex1, Int32[] displayIndexList)
private int GetGUITargetAttrValue(Type klass, string methodName)
}
public UnityEngine.GUIText : GUIElement {
public string text
public Material material
public Vector2 pixelOffset
public Font font
public TextAlignment alignment
public TextAnchor anchor
public float lineSpacing
public float tabSize
public int fontSize
public FontStyle fontStyle
public bool richText
public Color color
public string get_text()
public void set_text(string value)
public Material get_material()
public void set_material(Material value)
private void Internal_GetPixelOffset(Vector2& output)
private void Internal_SetPixelOffset(Vector2 p)
private void INTERNAL_CALL_Internal_SetPixelOffset(GUIText self, Vector2& p)
public Vector2 get_pixelOffset()
public void set_pixelOffset(Vector2 value)
public Font get_font()
public void set_font(Font value)
public TextAlignment get_alignment()
public void set_alignment(TextAlignment value)
public TextAnchor get_anchor()
public void set_anchor(TextAnchor value)
public float get_lineSpacing()
public void set_lineSpacing(float value)
public float get_tabSize()
public void set_tabSize(float value)
public int get_fontSize()
public void set_fontSize(int value)
public FontStyle get_fontStyle()
public void set_fontStyle(FontStyle value)
public bool get_richText()
public void set_richText(bool value)
public Color get_color()
public void set_color(Color value)
private void INTERNAL_get_color(Color& value)
private void INTERNAL_set_color(Color& value)
}
public UnityEngine.GUITexture : GUIElement {
public Color color
public Texture texture
public Rect pixelInset
public RectOffset border
public Color get_color()
public void set_color(Color value)
private void INTERNAL_get_color(Color& value)
private void INTERNAL_set_color(Color& value)
public Texture get_texture()
public void set_texture(Texture value)
public Rect get_pixelInset()
public void set_pixelInset(Rect value)
private void INTERNAL_get_pixelInset(Rect& value)
private void INTERNAL_set_pixelInset(Rect& value)
public RectOffset get_border()
public void set_border(RectOffset value)
}
public UnityEngine.GUIUtility : object {
internal int s_SkinMode
internal int s_OriginalID
internal Action takeCapture
internal Action releaseCapture
internal Func`3<int, IntPtr, bool> processEvent
internal Action cleanupRoots
internal Func`2<Exception, bool> endContainerGUIFromException
private bool <guiIsExiting>k__BackingField
internal Vector2 s_EditorScreenPointOffset
internal float pixelsPerPoint
internal bool guiIsExiting
public int hotControl
public int keyboardControl
public string systemCopyBuffer
internal bool mouseUsed
public bool hasModalWindow
internal bool textFieldInput
internal float get_pixelsPerPoint()
public int GetControlID(FocusType focus)
public int GetControlID(GUIContent contents, FocusType focus)
public int GetControlID(FocusType focus, Rect position)
public int GetControlID(int hint, FocusType focus, Rect position)
public int GetControlID(GUIContent contents, FocusType focus, Rect position)
public object GetStateObject(Type t, int controlID)
public object QueryStateObject(Type t, int controlID)
internal bool get_guiIsExiting()
internal void set_guiIsExiting(bool value)
public int get_hotControl()
public void set_hotControl(int value)
internal void TakeCapture()
internal void RemoveCapture()
public int get_keyboardControl()
public void set_keyboardControl(int value)
public void ExitGUI()
internal GUISkin GetDefaultSkin(int skinMode)
internal GUISkin GetDefaultSkin()
internal GUISkin GetBuiltinSkin(int skin)
internal bool ProcessEvent(int instanceID, IntPtr nativeEventPtr)
internal void BeginContainer(int instanceID)
internal void EndContainer()
internal void CleanupRoots()
internal void BeginGUI(int skinMode, int instanceID, int useGUILayout)
internal void EndGUI(int layoutType)
internal bool EndGUIFromException(Exception exception)
internal bool EndContainerGUIFromException(Exception exception)
internal void ResetGlobalState()
internal bool IsExitGUIException(Exception exception)
internal bool ShouldRethrowException(Exception exception)
internal void CheckOnGUI()
public Vector2 GUIToScreenPoint(Vector2 guiPoint)
internal Rect GUIToScreenRect(Rect guiRect)
public Vector2 ScreenToGUIPoint(Vector2 screenPoint)
public Rect ScreenToGUIRect(Rect screenRect)
public void RotateAroundPivot(float angle, Vector2 pivotPoint)
public void ScaleAroundPivot(Vector2 scale, Vector2 pivotPoint)
private float Internal_GetPixelsPerPoint()
public int GetControlID(int hint, FocusType focus)
private int Internal_GetNextControlID2(int hint, FocusType focusType, Rect rect)
private int INTERNAL_CALL_Internal_GetNextControlID2(int hint, FocusType focusType, Rect& rect)
internal int GetPermanentControlID()
private int Internal_GetHotControl()
private void Internal_SetHotControl(int value)
internal void UpdateUndoName()
internal bool GetChanged()
internal void SetChanged(bool changed)
private int Internal_GetKeyboardControl()
private void Internal_SetKeyboardControl(int value)
internal void SetDidGUIWindowsEatLastEvent(bool value)
public string get_systemCopyBuffer()
public void set_systemCopyBuffer(string value)
private GUISkin Internal_GetDefaultSkin(int skinMode)
private Object Internal_GetBuiltinSkin(int skin)
private void Internal_ExitGUI()
internal int Internal_GetGUIDepth()
internal bool get_mouseUsed()
internal void set_mouseUsed(bool value)
public bool get_hasModalWindow()
internal bool get_textFieldInput()
internal void set_textFieldInput(bool value)
private void Internal_BeginContainer(int instanceID)
internal bool CheckForTabEvent(Event evt)
private void Internal_EndContainer()
}
internal UnityEngine.GUIWordWrapSizer : GUILayoutEntry {
private GUIContent m_Content
private float m_ForcedMinHeight
private float m_ForcedMaxHeight
public void .ctor(GUIStyle style, GUIContent content, GUILayoutOption[] options)
public void CalcWidth()
public void CalcHeight()
}
public UnityEngine.Gyroscope : object {
private int m_GyroIndex
public Vector3 rotationRate
public Vector3 rotationRateUnbiased
public Vector3 gravity
public Vector3 userAcceleration
public Quaternion attitude
public bool enabled
public float updateInterval
internal void .ctor(int index)
private Vector3 rotationRate_Internal(int idx)
private void INTERNAL_CALL_rotationRate_Internal(int idx, Vector3& value)
private Vector3 rotationRateUnbiased_Internal(int idx)
private void INTERNAL_CALL_rotationRateUnbiased_Internal(int idx, Vector3& value)
private Vector3 gravity_Internal(int idx)
private void INTERNAL_CALL_gravity_Internal(int idx, Vector3& value)
private Vector3 userAcceleration_Internal(int idx)
private void INTERNAL_CALL_userAcceleration_Internal(int idx, Vector3& value)
private Quaternion attitude_Internal(int idx)
private void INTERNAL_CALL_attitude_Internal(int idx, Quaternion& value)
private bool getEnabled_Internal(int idx)
private void setEnabled_Internal(int idx, bool enabled)
private float getUpdateInterval_Internal(int idx)
private void setUpdateInterval_Internal(int idx, float interval)
public Vector3 get_rotationRate()
public Vector3 get_rotationRateUnbiased()
public Vector3 get_gravity()
public Vector3 get_userAcceleration()
public Quaternion get_attitude()
public bool get_enabled()
public void set_enabled(bool value)
public float get_updateInterval()
public void set_updateInterval(float value)
}
public UnityEngine.Hash128 : ValueType {
private UInt32 m_u32_0
private UInt32 m_u32_1
private UInt32 m_u32_2
private UInt32 m_u32_3
public bool isValid
public void .ctor(UInt32 u32_0, UInt32 u32_1, UInt32 u32_2, UInt32 u32_3)
public bool get_isValid()
public string ToString()
public Hash128 Parse(string hashString)
private void INTERNAL_CALL_Parse(string hashString, Hash128& value)
internal string Internal_Hash128ToString(UInt32 d0, UInt32 d1, UInt32 d2, UInt32 d3)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(Hash128 hash1, Hash128 hash2)
public bool op_Inequality(Hash128 hash1, Hash128 hash2)
}
internal UnityEngine.HeadDoF : Enum {
public int value__
public HeadDoF NeckFrontBack
public HeadDoF NeckLeftRight
public HeadDoF NeckRollLeftRight
public HeadDoF HeadFrontBack
public HeadDoF HeadLeftRight
public HeadDoF HeadRollLeftRight
public HeadDoF LeftEyeDownUp
public HeadDoF LeftEyeInOut
public HeadDoF RightEyeDownUp
public HeadDoF RightEyeInOut
public HeadDoF JawDownUp
public HeadDoF JawLeftRight
public HeadDoF LastHeadDoF
}
public UnityEngine.HeaderAttribute : PropertyAttribute {
public string header
public void .ctor(string header)
}
public UnityEngine.HelpURLAttribute : Attribute {
internal string m_Url
public string URL
public void .ctor(string url)
public string get_URL()
}
public UnityEngine.HideFlags : Enum {
public int value__
public HideFlags None
public HideFlags HideInHierarchy
public HideFlags HideInInspector
public HideFlags DontSaveInEditor
public HideFlags NotEditable
public HideFlags DontSaveInBuild
public HideFlags DontUnloadUnusedAsset
public HideFlags DontSave
public HideFlags HideAndDontSave
}
public UnityEngine.HingeJoint : Joint {
public JointMotor motor
public JointLimits limits
public JointSpring spring
public bool useMotor
public bool useLimits
public bool useSpring
public float velocity
public float angle
public JointMotor get_motor()
public void set_motor(JointMotor value)
private void INTERNAL_get_motor(JointMotor& value)
private void INTERNAL_set_motor(JointMotor& value)
public JointLimits get_limits()
public void set_limits(JointLimits value)
private void INTERNAL_get_limits(JointLimits& value)
private void INTERNAL_set_limits(JointLimits& value)
public JointSpring get_spring()
public void set_spring(JointSpring value)
private void INTERNAL_get_spring(JointSpring& value)
private void INTERNAL_set_spring(JointSpring& value)
public bool get_useMotor()
public void set_useMotor(bool value)
public bool get_useLimits()
public void set_useLimits(bool value)
public bool get_useSpring()
public void set_useSpring(bool value)
public float get_velocity()
public float get_angle()
}
public UnityEngine.HingeJoint2D : AnchoredJoint2D {
public bool useMotor
public bool useLimits
public JointMotor2D motor
public JointAngleLimits2D limits
public JointLimitState2D limitState
public float referenceAngle
public float jointAngle
public float jointSpeed
public bool get_useMotor()
public void set_useMotor(bool value)
public bool get_useLimits()
public void set_useLimits(bool value)
public JointMotor2D get_motor()
public void set_motor(JointMotor2D value)
private void INTERNAL_get_motor(JointMotor2D& value)
private void INTERNAL_set_motor(JointMotor2D& value)
public JointAngleLimits2D get_limits()
public void set_limits(JointAngleLimits2D value)
private void INTERNAL_get_limits(JointAngleLimits2D& value)
private void INTERNAL_set_limits(JointAngleLimits2D& value)
public JointLimitState2D get_limitState()
public float get_referenceAngle()
public float get_jointAngle()
public float get_jointSpeed()
public float GetMotorTorque(float timeStep)
private float INTERNAL_CALL_GetMotorTorque(HingeJoint2D self, float timeStep)
}
public UnityEngine.HorizontalWrapMode : Enum {
public int value__
public HorizontalWrapMode Wrap
public HorizontalWrapMode Overflow
}
public UnityEngine.HostData : object {
private int m_Nat
private string m_GameType
private string m_GameName
private int m_ConnectedPlayers
private int m_PlayerLimit
private String[] m_IP
private int m_Port
private int m_PasswordProtected
private string m_Comment
private string m_GUID
public bool useNat
public string gameType
public string gameName
public int connectedPlayers
public int playerLimit
public String[] ip
public int port
public bool passwordProtected
public string comment
public string guid
public bool get_useNat()
public void set_useNat(bool value)
public string get_gameType()
public void set_gameType(string value)
public string get_gameName()
public void set_gameName(string value)
public int get_connectedPlayers()
public void set_connectedPlayers(int value)
public int get_playerLimit()
public void set_playerLimit(int value)
public String[] get_ip()
public void set_ip(String[] value)
public int get_port()
public void set_port(int value)
public bool get_passwordProtected()
public void set_passwordProtected(bool value)
public string get_comment()
public void set_comment(string value)
public string get_guid()
public void set_guid(string value)
}
public UnityEngine.HumanBodyBones : Enum {
public int value__
public HumanBodyBones Hips
public HumanBodyBones LeftUpperLeg
public HumanBodyBones RightUpperLeg
public HumanBodyBones LeftLowerLeg
public HumanBodyBones RightLowerLeg
public HumanBodyBones LeftFoot
public HumanBodyBones RightFoot
public HumanBodyBones Spine
public HumanBodyBones Chest
public HumanBodyBones UpperChest
public HumanBodyBones Neck
public HumanBodyBones Head
public HumanBodyBones LeftShoulder
public HumanBodyBones RightShoulder
public HumanBodyBones LeftUpperArm
public HumanBodyBones RightUpperArm
public HumanBodyBones LeftLowerArm
public HumanBodyBones RightLowerArm
public HumanBodyBones LeftHand
public HumanBodyBones RightHand
public HumanBodyBones LeftToes
public HumanBodyBones RightToes
public HumanBodyBones LeftEye
public HumanBodyBones RightEye
public HumanBodyBones Jaw
public HumanBodyBones LeftThumbProximal
public HumanBodyBones LeftThumbIntermediate
public HumanBodyBones LeftThumbDistal
public HumanBodyBones LeftIndexProximal
public HumanBodyBones LeftIndexIntermediate
public HumanBodyBones LeftIndexDistal
public HumanBodyBones LeftMiddleProximal
public HumanBodyBones LeftMiddleIntermediate
public HumanBodyBones LeftMiddleDistal
public HumanBodyBones LeftRingProximal
public HumanBodyBones LeftRingIntermediate
public HumanBodyBones LeftRingDistal
public HumanBodyBones LeftLittleProximal
public HumanBodyBones LeftLittleIntermediate
public HumanBodyBones LeftLittleDistal
public HumanBodyBones RightThumbProximal
public HumanBodyBones RightThumbIntermediate
public HumanBodyBones RightThumbDistal
public HumanBodyBones RightIndexProximal
public HumanBodyBones RightIndexIntermediate
public HumanBodyBones RightIndexDistal
public HumanBodyBones RightMiddleProximal
public HumanBodyBones RightMiddleIntermediate
public HumanBodyBones RightMiddleDistal
public HumanBodyBones RightRingProximal
public HumanBodyBones RightRingIntermediate
public HumanBodyBones RightRingDistal
public HumanBodyBones RightLittleProximal
public HumanBodyBones RightLittleIntermediate
public HumanBodyBones RightLittleDistal
public HumanBodyBones LastBone
}
public UnityEngine.HumanBone : ValueType {
private string m_BoneName
private string m_HumanName
public HumanLimit limit
public string boneName
public string humanName
public string get_boneName()
public void set_boneName(string value)
public string get_humanName()
public void set_humanName(string value)
}
public UnityEngine.HumanDescription : ValueType {
public HumanBone[] human
public SkeletonBone[] skeleton
internal float m_ArmTwist
internal float m_ForeArmTwist
internal float m_UpperLegTwist
internal float m_LegTwist
internal float m_ArmStretch
internal float m_LegStretch
internal float m_FeetSpacing
internal bool m_HasTranslationDoF
public float upperArmTwist
public float lowerArmTwist
public float upperLegTwist
public float lowerLegTwist
public float armStretch
public float legStretch
public float feetSpacing
public bool hasTranslationDoF
public float get_upperArmTwist()
public void set_upperArmTwist(float value)
public float get_lowerArmTwist()
public void set_lowerArmTwist(float value)
public float get_upperLegTwist()
public void set_upperLegTwist(float value)
public float get_lowerLegTwist()
public void set_lowerLegTwist(float value)
public float get_armStretch()
public void set_armStretch(float value)
public float get_legStretch()
public void set_legStretch(float value)
public float get_feetSpacing()
public void set_feetSpacing(float value)
public bool get_hasTranslationDoF()
public void set_hasTranslationDoF(bool value)
}
public UnityEngine.HumanLimit : ValueType {
private Vector3 m_Min
private Vector3 m_Max
private Vector3 m_Center
private float m_AxisLength
private int m_UseDefaultValues
public bool useDefaultValues
public Vector3 min
public Vector3 max
public Vector3 center
public float axisLength
public bool get_useDefaultValues()
public void set_useDefaultValues(bool value)
public Vector3 get_min()
public void set_min(Vector3 value)
public Vector3 get_max()
public void set_max(Vector3 value)
public Vector3 get_center()
public void set_center(Vector3 value)
public float get_axisLength()
public void set_axisLength(float value)
}
internal UnityEngine.HumanParameter : Enum {
public int value__
public HumanParameter UpperArmTwist
public HumanParameter LowerArmTwist
public HumanParameter UpperLegTwist
public HumanParameter LowerLegTwist
public HumanParameter ArmStretch
public HumanParameter LegStretch
public HumanParameter FeetSpacing
}
public UnityEngine.HumanPose : ValueType {
public Vector3 bodyPosition
public Quaternion bodyRotation
public Single[] muscles
internal void Init()
}
public UnityEngine.HumanPoseHandler : object {
internal IntPtr m_Ptr
public void .ctor(Avatar avatar, Transform root)
public void Dispose()
private void Internal_HumanPoseHandler(Avatar avatar, Transform root)
private bool Internal_GetHumanPose(Vector3& bodyPosition, Quaternion& bodyRotation, Single[] muscles)
private bool INTERNAL_CALL_Internal_GetHumanPose(HumanPoseHandler self, Vector3& bodyPosition, Quaternion& bodyRotation, Single[] muscles)
public void GetHumanPose(HumanPose& humanPose)
private bool Internal_SetHumanPose(Vector3& bodyPosition, Quaternion& bodyRotation, Single[] muscles)
private bool INTERNAL_CALL_Internal_SetHumanPose(HumanPoseHandler self, Vector3& bodyPosition, Quaternion& bodyRotation, Single[] muscles)
public void SetHumanPose(HumanPose& humanPose)
}
public UnityEngine.HumanTrait : object {
public int MuscleCount
public String[] MuscleName
public int BoneCount
public String[] BoneName
public int RequiredBoneCount
public int get_MuscleCount()
public String[] get_MuscleName()
public int get_BoneCount()
public String[] get_BoneName()
public int MuscleFromBone(int i, int dofIndex)
public int BoneFromMuscle(int i)
public bool RequiredBone(int i)
public int get_RequiredBoneCount()
internal bool HasCollider(Avatar avatar, int i)
public float GetMuscleDefaultMin(int i)
public float GetMuscleDefaultMax(int i)
public int GetParentBone(int i)
}
public UnityEngine.ICanvasRaycastFilter {
public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
}
public UnityEngine.IExposedPropertyTable {
public void SetReferenceValue(PropertyName id, Object value)
public Object GetReferenceValue(PropertyName id, Boolean& idValid)
public void ClearReferenceValue(PropertyName id)
}
internal UnityEngine.IL2CPPStructAlignmentAttribute : Attribute {
public int Align
}
public UnityEngine.ILogger {
public ILogHandler logHandler
public bool logEnabled
public LogType filterLogType
public ILogHandler get_logHandler()
public void set_logHandler(ILogHandler value)
public bool get_logEnabled()
public void set_logEnabled(bool value)
public LogType get_filterLogType()
public void set_filterLogType(LogType value)
public bool IsLogTypeAllowed(LogType logType)
public void Log(LogType logType, object message)
public void Log(LogType logType, object message, Object context)
public void Log(LogType logType, string tag, object message)
public void Log(LogType logType, string tag, object message, Object context)
public void Log(object message)
public void Log(string tag, object message)
public void Log(string tag, object message, Object context)
public void LogWarning(string tag, object message)
public void LogWarning(string tag, object message, Object context)
public void LogError(string tag, object message)
public void LogError(string tag, object message, Object context)
public void LogFormat(LogType logType, string format, Object[] args)
public void LogException(Exception exception)
}
public UnityEngine.ILogHandler {
public void LogFormat(LogType logType, Object context, string format, Object[] args)
public void LogException(Exception exception, Object context)
}
public UnityEngine.ImageConversion : object {
public Byte[] EncodeToPNG(Texture2D tex)
public Byte[] EncodeToJPG(Texture2D tex, int quality)
public Byte[] EncodeToJPG(Texture2D tex)
public Byte[] EncodeToEXR(Texture2D tex, EXRFlags flags)
public Byte[] EncodeToEXR(Texture2D tex)
public bool LoadImage(Texture2D tex, Byte[] data, bool markNonReadable)
public bool LoadImage(Texture2D tex, Byte[] data)
}
public UnityEngine.ImagePosition : Enum {
public int value__
public ImagePosition ImageLeft
public ImagePosition ImageAbove
public ImagePosition ImageOnly
public ImagePosition TextOnly
}
public UnityEngine.IMECompositionMode : Enum {
public int value__
public IMECompositionMode Auto
public IMECompositionMode On
public IMECompositionMode Off
}
public UnityEngine.Input : object {
private Gyroscope m_MainGyro
private LocationService locationServiceInstance
private Compass compassInstance
public bool compensateSensors
public bool isGyroAvailable
public Gyroscope gyro
public Vector3 mousePosition
public Vector2 mouseScrollDelta
public bool mousePresent
public bool simulateMouseWithTouches
public bool anyKey
public bool anyKeyDown
public string inputString
public Vector3 acceleration
public AccelerationEvent[] accelerationEvents
public int accelerationEventCount
public Touch[] touches
public int touchCount
public bool eatKeyPressOnTextFieldFocus
public bool touchPressureSupported
public bool stylusTouchSupported
public bool touchSupported
public bool multiTouchEnabled
public LocationService location
public Compass compass
public DeviceOrientation deviceOrientation
public IMECompositionMode imeCompositionMode
public string compositionString
public bool imeIsSelected
public Vector2 compositionCursorPos
public bool backButtonLeavesApp
private int mainGyroIndex_Internal()
private bool GetKeyInt(int key)
private bool GetKeyString(string name)
private bool GetKeyUpInt(int key)
private bool GetKeyUpString(string name)
private bool GetKeyDownInt(int key)
private bool GetKeyDownString(string name)
public float GetAxis(string axisName)
public float GetAxisRaw(string axisName)
public bool GetButton(string buttonName)
public bool get_compensateSensors()
public void set_compensateSensors(bool value)
public bool get_isGyroAvailable()
public Gyroscope get_gyro()
public bool GetButtonDown(string buttonName)
public bool GetButtonUp(string buttonName)
public bool GetKey(string name)
public bool GetKey(KeyCode key)
public bool GetKeyDown(string name)
public bool GetKeyDown(KeyCode key)
public bool GetKeyUp(string name)
public bool GetKeyUp(KeyCode key)
public String[] GetJoystickNames()
public bool GetMouseButton(int button)
public bool GetMouseButtonDown(int button)
public bool GetMouseButtonUp(int button)
public void ResetInputAxes()
public Vector3 get_mousePosition()
private void INTERNAL_get_mousePosition(Vector3& value)
public Vector2 get_mouseScrollDelta()
private void INTERNAL_get_mouseScrollDelta(Vector2& value)
public bool get_mousePresent()
public bool get_simulateMouseWithTouches()
public void set_simulateMouseWithTouches(bool value)
public bool get_anyKey()
public bool get_anyKeyDown()
public string get_inputString()
public Vector3 get_acceleration()
private void INTERNAL_get_acceleration(Vector3& value)
public AccelerationEvent[] get_accelerationEvents()
public AccelerationEvent GetAccelerationEvent(int index)
private void INTERNAL_CALL_GetAccelerationEvent(int index, AccelerationEvent& value)
public int get_accelerationEventCount()
public Touch[] get_touches()
public Touch GetTouch(int index)
private void INTERNAL_CALL_GetTouch(int index, Touch& value)
public int get_touchCount()
public bool get_eatKeyPressOnTextFieldFocus()
public void set_eatKeyPressOnTextFieldFocus(bool value)
public bool get_touchPressureSupported()
public bool get_stylusTouchSupported()
public bool get_touchSupported()
public bool get_multiTouchEnabled()
public void set_multiTouchEnabled(bool value)
public LocationService get_location()
public Compass get_compass()
public DeviceOrientation get_deviceOrientation()
public IMECompositionMode get_imeCompositionMode()
public void set_imeCompositionMode(IMECompositionMode value)
public string get_compositionString()
public bool get_imeIsSelected()
public Vector2 get_compositionCursorPos()
public void set_compositionCursorPos(Vector2 value)
private void INTERNAL_get_compositionCursorPos(Vector2& value)
private void INTERNAL_set_compositionCursorPos(Vector2& value)
public bool get_backButtonLeavesApp()
public void set_backButtonLeavesApp(bool value)
}
internal UnityEngine.Internal_DrawArguments : ValueType {
public IntPtr target
public Rect position
public int isHover
public int isActive
public int on
public int hasKeyboardFocus
}
internal UnityEngine.Internal_DrawMeshMatrixArguments : ValueType {
public int layer
public int submeshIndex
public Matrix4x4 matrix
public int castShadows
public int receiveShadows
public int reflectionProbeAnchorInstanceID
public bool useLightProbes
}
internal UnityEngine.Internal_DrawTextureArguments : ValueType {
public Rect screenRect
public Rect sourceRect
public int leftBorder
public int rightBorder
public int topBorder
public int bottomBorder
public Color32 color
public float borderWidth
public float cornerRadius
public int pass
public Texture texture
public Material mat
}
internal UnityEngine.Internal_DrawWithTextSelectionArguments : ValueType {
public IntPtr target
public Rect position
public int firstPos
public int lastPos
public Color cursorColor
public Color selectionColor
public int isHover
public int isActive
public int on
public int hasKeyboardFocus
public int drawSelectionAsComposition
}
public UnityEngine.Internal.DefaultValueAttribute : Attribute {
private object DefaultValue
public object Value
public void .ctor(string value)
public object get_Value()
public bool Equals(object obj)
public int GetHashCode()
}
public UnityEngine.Internal.VR.VRTestMock : object {
public void Reset()
public void AddTrackedDevice(VRNode nodeType)
public void UpdateTrackedDevice(VRNode nodeType, Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateTrackedDevice(VRNode nodeType, Vector3& position, Quaternion& rotation)
public void UpdateLeftEye(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateLeftEye(Vector3& position, Quaternion& rotation)
public void UpdateRightEye(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateRightEye(Vector3& position, Quaternion& rotation)
public void UpdateCenterEye(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateCenterEye(Vector3& position, Quaternion& rotation)
public void UpdateHead(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateHead(Vector3& position, Quaternion& rotation)
public void UpdateLeftHand(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateLeftHand(Vector3& position, Quaternion& rotation)
public void UpdateRightHand(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateRightHand(Vector3& position, Quaternion& rotation)
public void AddController(string controllerName)
public void UpdateControllerAxis(string controllerName, int axis, float value)
public void UpdateControllerButton(string controllerName, int button, bool pressed)
}
internal UnityEngine.InternalEmitParticleArguments : ValueType {
public Vector3 pos
public Vector3 velocity
public float size
public float energy
public Color color
public float rotation
public float angularVelocity
}
internal UnityEngine.InternalStaticBatchingUtility : object {
private int MaxVerticesInBatch
private string CombinedMeshPrefix
private Func`2<Material, bool> <>f__am$cache0
public void CombineRoot(GameObject staticBatchRoot)
public void Combine(GameObject staticBatchRoot, bool combineOnlyStatic, bool isEditorPostprocessScene)
public void CombineGameObjects(GameObject[] gos, GameObject staticBatchRoot, bool isEditorPostprocessScene)
private void MakeBatch(List`1<MeshContainer> meshes, Transform staticBatchRootTransform, int batchIndex)
private bool <CombineGameObjects>m__0(Material m)
}
internal UnityEngine.IPlayerEditorConnectionNative {
public void Initialize()
public void DisconnectAll()
public void SendMessage(Guid messageId, Byte[] data, int playerId)
public void RegisterInternal(Guid messageId)
public void UnregisterInternal(Guid messageId)
public bool IsConnected()
}
public UnityEngine.ISerializationCallbackReceiver {
public void OnBeforeSerialize()
public void OnAfterDeserialize()
}
internal UnityEngine.IStylePainter {
public Rect currentWorldClip
public Vector2 mousePosition
public Event repaintEvent
public float opacity
public void DrawRect(Rect screenRect, Color color, float borderWidth, float borderRadius)
public void DrawTexture(Rect screenRect, Texture texture, Color color, ScaleMode scaleMode, float borderWidth, float borderRadius, int leftBorder, int rightBorder, int topBorder, int bottomBorder)
public void DrawText(Rect screenRect, string text, Font font, int fontSize, FontStyle fontStyle, Color fontColor, TextAnchor anchor, bool wordWrap, float wordWrapWidth, bool richText, TextClipping clipping)
public Rect get_currentWorldClip()
public void set_currentWorldClip(Rect value)
public Vector2 get_mousePosition()
public void set_mousePosition(Vector2 value)
public Event get_repaintEvent()
public void set_repaintEvent(Event value)
public float get_opacity()
public void set_opacity(float value)
public float ComputeTextWidth(string text, Font font, int fontSize, FontStyle fontStyle, TextAnchor anchor, bool richText)
public float ComputeTextHeight(string text, float width, bool wordWrap, Font font, int fontSize, FontStyle fontStyle, TextAnchor anchor, bool richText)
}
public UnityEngine.Joint : Component {
public Rigidbody connectedBody
public Vector3 axis
public Vector3 anchor
public Vector3 connectedAnchor
public bool autoConfigureConnectedAnchor
public float breakForce
public float breakTorque
public bool enableCollision
public bool enablePreprocessing
public Vector3 currentForce
public Vector3 currentTorque
public float massScale
public float connectedMassScale
public Rigidbody get_connectedBody()
public void set_connectedBody(Rigidbody value)
public Vector3 get_axis()
public void set_axis(Vector3 value)
private void INTERNAL_get_axis(Vector3& value)
private void INTERNAL_set_axis(Vector3& value)
public Vector3 get_anchor()
public void set_anchor(Vector3 value)
private void INTERNAL_get_anchor(Vector3& value)
private void INTERNAL_set_anchor(Vector3& value)
public Vector3 get_connectedAnchor()
public void set_connectedAnchor(Vector3 value)
private void INTERNAL_get_connectedAnchor(Vector3& value)
private void INTERNAL_set_connectedAnchor(Vector3& value)
public bool get_autoConfigureConnectedAnchor()
public void set_autoConfigureConnectedAnchor(bool value)
public float get_breakForce()
public void set_breakForce(float value)
public float get_breakTorque()
public void set_breakTorque(float value)
public bool get_enableCollision()
public void set_enableCollision(bool value)
public bool get_enablePreprocessing()
public void set_enablePreprocessing(bool value)
public Vector3 get_currentForce()
private void INTERNAL_get_currentForce(Vector3& value)
public Vector3 get_currentTorque()
private void INTERNAL_get_currentTorque(Vector3& value)
public float get_massScale()
public void set_massScale(float value)
public float get_connectedMassScale()
public void set_connectedMassScale(float value)
}
public UnityEngine.Joint2D : Behaviour {
public Rigidbody2D attachedRigidbody
public Rigidbody2D connectedBody
public bool enableCollision
public float breakForce
public float breakTorque
public Vector2 reactionForce
public float reactionTorque
public Rigidbody2D get_attachedRigidbody()
public Rigidbody2D get_connectedBody()
public void set_connectedBody(Rigidbody2D value)
public bool get_enableCollision()
public void set_enableCollision(bool value)
public float get_breakForce()
public void set_breakForce(float value)
public float get_breakTorque()
public void set_breakTorque(float value)
public Vector2 get_reactionForce()
public float get_reactionTorque()
public Vector2 GetReactionForce(float timeStep)
private void Internal_GetReactionForce(Joint2D joint, float timeStep, Vector2& value)
public float GetReactionTorque(float timeStep)
private float INTERNAL_CALL_GetReactionTorque(Joint2D self, float timeStep)
}
public UnityEngine.JointAngleLimits2D : ValueType {
private float m_LowerAngle
private float m_UpperAngle
public float min
public float max
public float get_min()
public void set_min(float value)
public float get_max()
public void set_max(float value)
}
public UnityEngine.JointDrive : ValueType {
private float m_PositionSpring
private float m_PositionDamper
private float m_MaximumForce
public JointDriveMode mode
public float positionSpring
public float positionDamper
public float maximumForce
public JointDriveMode get_mode()
public void set_mode(JointDriveMode value)
public float get_positionSpring()
public void set_positionSpring(float value)
public float get_positionDamper()
public void set_positionDamper(float value)
public float get_maximumForce()
public void set_maximumForce(float value)
}
public UnityEngine.JointDriveMode : Enum {
public int value__
public JointDriveMode None
public JointDriveMode Position
public JointDriveMode Velocity
public JointDriveMode PositionAndVelocity
}
public UnityEngine.JointLimits : ValueType {
private float m_Min
private float m_Max
private float m_Bounciness
private float m_BounceMinVelocity
private float m_ContactDistance
public float minBounce
public float maxBounce
public float min
public float max
public float bounciness
public float bounceMinVelocity
public float contactDistance
public float get_min()
public void set_min(float value)
public float get_max()
public void set_max(float value)
public float get_bounciness()
public void set_bounciness(float value)
public float get_bounceMinVelocity()
public void set_bounceMinVelocity(float value)
public float get_contactDistance()
public void set_contactDistance(float value)
}
public UnityEngine.JointLimitState2D : Enum {
public int value__
public JointLimitState2D Inactive
public JointLimitState2D LowerLimit
public JointLimitState2D UpperLimit
public JointLimitState2D EqualLimits
}
public UnityEngine.JointMotor : ValueType {
private float m_TargetVelocity
private float m_Force
private int m_FreeSpin
public float targetVelocity
public float force
public bool freeSpin
public float get_targetVelocity()
public void set_targetVelocity(float value)
public float get_force()
public void set_force(float value)
public bool get_freeSpin()
public void set_freeSpin(bool value)
}
public UnityEngine.JointMotor2D : ValueType {
private float m_MotorSpeed
private float m_MaximumMotorTorque
public float motorSpeed
public float maxMotorTorque
public float get_motorSpeed()
public void set_motorSpeed(float value)
public float get_maxMotorTorque()
public void set_maxMotorTorque(float value)
}
public UnityEngine.JointProjectionMode : Enum {
public int value__
public JointProjectionMode None
public JointProjectionMode PositionAndRotation
public JointProjectionMode PositionOnly
}
public UnityEngine.JointSpring : ValueType {
public float spring
public float damper
public float targetPosition
}
public UnityEngine.JointSuspension2D : ValueType {
private float m_DampingRatio
private float m_Frequency
private float m_Angle
public float dampingRatio
public float frequency
public float angle
public float get_dampingRatio()
public void set_dampingRatio(float value)
public float get_frequency()
public void set_frequency(float value)
public float get_angle()
public void set_angle(float value)
}
public UnityEngine.JointTranslationLimits2D : ValueType {
private float m_LowerTranslation
private float m_UpperTranslation
public float min
public float max
public float get_min()
public void set_min(float value)
public float get_max()
public void set_max(float value)
}
public UnityEngine.JsonUtility : object {
public string ToJson(object obj)
public string ToJson(object obj, bool prettyPrint)
public T FromJson(string json)
public object FromJson(string json, Type type)
public void FromJsonOverwrite(string json, object objectToOverwrite)
}
public UnityEngine.jvalue : ValueType {
public bool z
public byte b
public char c
public short s
public int i
public long j
public float f
public double d
public IntPtr l
}
public UnityEngine.KeyCode : Enum {
public int value__
public KeyCode None
public KeyCode Backspace
public KeyCode Delete
public KeyCode Tab
public KeyCode Clear
public KeyCode Return
public KeyCode Pause
public KeyCode Escape
public KeyCode Space
public KeyCode Keypad0
public KeyCode Keypad1
public KeyCode Keypad2
public KeyCode Keypad3
public KeyCode Keypad4
public KeyCode Keypad5
public KeyCode Keypad6
public KeyCode Keypad7
public KeyCode Keypad8
public KeyCode Keypad9
public KeyCode KeypadPeriod
public KeyCode KeypadDivide
public KeyCode KeypadMultiply
public KeyCode KeypadMinus
public KeyCode KeypadPlus
public KeyCode KeypadEnter
public KeyCode KeypadEquals
public KeyCode UpArrow
public KeyCode DownArrow
public KeyCode RightArrow
public KeyCode LeftArrow
public KeyCode Insert
public KeyCode Home
public KeyCode End
public KeyCode PageUp
public KeyCode PageDown
public KeyCode F1
public KeyCode F2
public KeyCode F3
public KeyCode F4
public KeyCode F5
public KeyCode F6
public KeyCode F7
public KeyCode F8
public KeyCode F9
public KeyCode F10
public KeyCode F11
public KeyCode F12
public KeyCode F13
public KeyCode F14
public KeyCode F15
public KeyCode Alpha0
public KeyCode Alpha1
public KeyCode Alpha2
public KeyCode Alpha3
public KeyCode Alpha4
public KeyCode Alpha5
public KeyCode Alpha6
public KeyCode Alpha7
public KeyCode Alpha8
public KeyCode Alpha9
public KeyCode Exclaim
public KeyCode DoubleQuote
public KeyCode Hash
public KeyCode Dollar
public KeyCode Ampersand
public KeyCode Quote
public KeyCode LeftParen
public KeyCode RightParen
public KeyCode Asterisk
public KeyCode Plus
public KeyCode Comma
public KeyCode Minus
public KeyCode Period
public KeyCode Slash
public KeyCode Colon
public KeyCode Semicolon
public KeyCode Less
public KeyCode Equals
public KeyCode Greater
public KeyCode Question
public KeyCode At
public KeyCode LeftBracket
public KeyCode Backslash
public KeyCode RightBracket
public KeyCode Caret
public KeyCode Underscore
public KeyCode BackQuote
public KeyCode A
public KeyCode B
public KeyCode C
public KeyCode D
public KeyCode E
public KeyCode F
public KeyCode G
public KeyCode H
public KeyCode I
public KeyCode J
public KeyCode K
public KeyCode L
public KeyCode M
public KeyCode N
public KeyCode O
public KeyCode P
public KeyCode Q
public KeyCode R
public KeyCode S
public KeyCode T
public KeyCode U
public KeyCode V
public KeyCode W
public KeyCode X
public KeyCode Y
public KeyCode Z
public KeyCode Numlock
public KeyCode CapsLock
public KeyCode ScrollLock
public KeyCode RightShift
public KeyCode LeftShift
public KeyCode RightControl
public KeyCode LeftControl
public KeyCode RightAlt
public KeyCode LeftAlt
public KeyCode LeftCommand
public KeyCode LeftApple
public KeyCode LeftWindows
public KeyCode RightCommand
public KeyCode RightApple
public KeyCode RightWindows
public KeyCode AltGr
public KeyCode Help
public KeyCode Print
public KeyCode SysReq
public KeyCode Break
public KeyCode Menu
public KeyCode Mouse0
public KeyCode Mouse1
public KeyCode Mouse2
public KeyCode Mouse3
public KeyCode Mouse4
public KeyCode Mouse5
public KeyCode Mouse6
public KeyCode JoystickButton0
public KeyCode JoystickButton1
public KeyCode JoystickButton2
public KeyCode JoystickButton3
public KeyCode JoystickButton4
public KeyCode JoystickButton5
public KeyCode JoystickButton6
public KeyCode JoystickButton7
public KeyCode JoystickButton8
public KeyCode JoystickButton9
public KeyCode JoystickButton10
public KeyCode JoystickButton11
public KeyCode JoystickButton12
public KeyCode JoystickButton13
public KeyCode JoystickButton14
public KeyCode JoystickButton15
public KeyCode JoystickButton16
public KeyCode JoystickButton17
public KeyCode JoystickButton18
public KeyCode JoystickButton19
public KeyCode Joystick1Button0
public KeyCode Joystick1Button1
public KeyCode Joystick1Button2
public KeyCode Joystick1Button3
public KeyCode Joystick1Button4
public KeyCode Joystick1Button5
public KeyCode Joystick1Button6
public KeyCode Joystick1Button7
public KeyCode Joystick1Button8
public KeyCode Joystick1Button9
public KeyCode Joystick1Button10
public KeyCode Joystick1Button11
public KeyCode Joystick1Button12
public KeyCode Joystick1Button13
public KeyCode Joystick1Button14
public KeyCode Joystick1Button15
public KeyCode Joystick1Button16
public KeyCode Joystick1Button17
public KeyCode Joystick1Button18
public KeyCode Joystick1Button19
public KeyCode Joystick2Button0
public KeyCode Joystick2Button1
public KeyCode Joystick2Button2
public KeyCode Joystick2Button3
public KeyCode Joystick2Button4
public KeyCode Joystick2Button5
public KeyCode Joystick2Button6
public KeyCode Joystick2Button7
public KeyCode Joystick2Button8
public KeyCode Joystick2Button9
public KeyCode Joystick2Button10
public KeyCode Joystick2Button11
public KeyCode Joystick2Button12
public KeyCode Joystick2Button13
public KeyCode Joystick2Button14
public KeyCode Joystick2Button15
public KeyCode Joystick2Button16
public KeyCode Joystick2Button17
public KeyCode Joystick2Button18
public KeyCode Joystick2Button19
public KeyCode Joystick3Button0
public KeyCode Joystick3Button1
public KeyCode Joystick3Button2
public KeyCode Joystick3Button3
public KeyCode Joystick3Button4
public KeyCode Joystick3Button5
public KeyCode Joystick3Button6
public KeyCode Joystick3Button7
public KeyCode Joystick3Button8
public KeyCode Joystick3Button9
public KeyCode Joystick3Button10
public KeyCode Joystick3Button11
public KeyCode Joystick3Button12
public KeyCode Joystick3Button13
public KeyCode Joystick3Button14
public KeyCode Joystick3Button15
public KeyCode Joystick3Button16
public KeyCode Joystick3Button17
public KeyCode Joystick3Button18
public KeyCode Joystick3Button19
public KeyCode Joystick4Button0
public KeyCode Joystick4Button1
public KeyCode Joystick4Button2
public KeyCode Joystick4Button3
public KeyCode Joystick4Button4
public KeyCode Joystick4Button5
public KeyCode Joystick4Button6
public KeyCode Joystick4Button7
public KeyCode Joystick4Button8
public KeyCode Joystick4Button9
public KeyCode Joystick4Button10
public KeyCode Joystick4Button11
public KeyCode Joystick4Button12
public KeyCode Joystick4Button13
public KeyCode Joystick4Button14
public KeyCode Joystick4Button15
public KeyCode Joystick4Button16
public KeyCode Joystick4Button17
public KeyCode Joystick4Button18
public KeyCode Joystick4Button19
public KeyCode Joystick5Button0
public KeyCode Joystick5Button1
public KeyCode Joystick5Button2
public KeyCode Joystick5Button3
public KeyCode Joystick5Button4
public KeyCode Joystick5Button5
public KeyCode Joystick5Button6
public KeyCode Joystick5Button7
public KeyCode Joystick5Button8
public KeyCode Joystick5Button9
public KeyCode Joystick5Button10
public KeyCode Joystick5Button11
public KeyCode Joystick5Button12
public KeyCode Joystick5Button13
public KeyCode Joystick5Button14
public KeyCode Joystick5Button15
public KeyCode Joystick5Button16
public KeyCode Joystick5Button17
public KeyCode Joystick5Button18
public KeyCode Joystick5Button19
public KeyCode Joystick6Button0
public KeyCode Joystick6Button1
public KeyCode Joystick6Button2
public KeyCode Joystick6Button3
public KeyCode Joystick6Button4
public KeyCode Joystick6Button5
public KeyCode Joystick6Button6
public KeyCode Joystick6Button7
public KeyCode Joystick6Button8
public KeyCode Joystick6Button9
public KeyCode Joystick6Button10
public KeyCode Joystick6Button11
public KeyCode Joystick6Button12
public KeyCode Joystick6Button13
public KeyCode Joystick6Button14
public KeyCode Joystick6Button15
public KeyCode Joystick6Button16
public KeyCode Joystick6Button17
public KeyCode Joystick6Button18
public KeyCode Joystick6Button19
public KeyCode Joystick7Button0
public KeyCode Joystick7Button1
public KeyCode Joystick7Button2
public KeyCode Joystick7Button3
public KeyCode Joystick7Button4
public KeyCode Joystick7Button5
public KeyCode Joystick7Button6
public KeyCode Joystick7Button7
public KeyCode Joystick7Button8
public KeyCode Joystick7Button9
public KeyCode Joystick7Button10
public KeyCode Joystick7Button11
public KeyCode Joystick7Button12
public KeyCode Joystick7Button13
public KeyCode Joystick7Button14
public KeyCode Joystick7Button15
public KeyCode Joystick7Button16
public KeyCode Joystick7Button17
public KeyCode Joystick7Button18
public KeyCode Joystick7Button19
public KeyCode Joystick8Button0
public KeyCode Joystick8Button1
public KeyCode Joystick8Button2
public KeyCode Joystick8Button3
public KeyCode Joystick8Button4
public KeyCode Joystick8Button5
public KeyCode Joystick8Button6
public KeyCode Joystick8Button7
public KeyCode Joystick8Button8
public KeyCode Joystick8Button9
public KeyCode Joystick8Button10
public KeyCode Joystick8Button11
public KeyCode Joystick8Button12
public KeyCode Joystick8Button13
public KeyCode Joystick8Button14
public KeyCode Joystick8Button15
public KeyCode Joystick8Button16
public KeyCode Joystick8Button17
public KeyCode Joystick8Button18
public KeyCode Joystick8Button19
}
public UnityEngine.Keyframe : ValueType {
private float m_Time
private float m_Value
private float m_InTangent
private float m_OutTangent
public float time
public float value
public float inTangent
public float outTangent
public int tangentMode
public void .ctor(float time, float value)
public void .ctor(float time, float value, float inTangent, float outTangent)
public float get_time()
public void set_time(float value)
public float get_value()
public void set_value(float value)
public float get_inTangent()
public void set_inTangent(float value)
public float get_outTangent()
public void set_outTangent(float value)
public int get_tangentMode()
public void set_tangentMode(int value)
}
public UnityEngine.LayerMask : ValueType {
private int m_Mask
public int value
public int op_Implicit(LayerMask mask)
public LayerMask op_Implicit(int intVal)
public int get_value()
public void set_value(int value)
public string LayerToName(int layer)
public int NameToLayer(string layerName)
public int GetMask(String[] layerNames)
}
internal UnityEngine.LegDoF : Enum {
public int value__
public LegDoF UpperLegFrontBack
public LegDoF UpperLegInOut
public LegDoF UpperLegRollInOut
public LegDoF LegCloseOpen
public LegDoF LegRollInOut
public LegDoF FootCloseOpen
public LegDoF FootInOut
public LegDoF ToesUpDown
public LegDoF LastLegDoF
}
public UnityEngine.LensFlare : Behaviour {
public Flare flare
public float brightness
public float fadeSpeed
public Color color
public Flare get_flare()
public void set_flare(Flare value)
public float get_brightness()
public void set_brightness(float value)
public float get_fadeSpeed()
public void set_fadeSpeed(float value)
public Color get_color()
public void set_color(Color value)
private void INTERNAL_get_color(Color& value)
private void INTERNAL_set_color(Color& value)
}
public UnityEngine.Light : Behaviour {
private int m_BakedIndex
public LightType type
public Color color
public float colorTemperature
public float intensity
public float bounceIntensity
public LightShadows shadows
public float shadowStrength
public LightShadowResolution shadowResolution
public int shadowCustomResolution
public float shadowBias
public float shadowNormalBias
public float shadowNearPlane
public float shadowSoftness
public float shadowSoftnessFade
public float range
public float spotAngle
public float cookieSize
public Texture cookie
public Flare flare
public LightRenderMode renderMode
public bool alreadyLightmapped
public int bakedIndex
public bool isBaked
public int cullingMask
public int commandBufferCount
public int pixelLightCount
public float shadowConstantBias
public float shadowObjectSizeBias
public bool attenuate
public LightType get_type()
public void set_type(LightType value)
public Color get_color()
public void set_color(Color value)
private void INTERNAL_get_color(Color& value)
private void INTERNAL_set_color(Color& value)
public float get_colorTemperature()
public void set_colorTemperature(float value)
public float get_intensity()
public void set_intensity(float value)
public float get_bounceIntensity()
public void set_bounceIntensity(float value)
public LightShadows get_shadows()
public void set_shadows(LightShadows value)
public float get_shadowStrength()
public void set_shadowStrength(float value)
public LightShadowResolution get_shadowResolution()
public void set_shadowResolution(LightShadowResolution value)
public int get_shadowCustomResolution()
public void set_shadowCustomResolution(int value)
public float get_shadowBias()
public void set_shadowBias(float value)
public float get_shadowNormalBias()
public void set_shadowNormalBias(float value)
public float get_shadowNearPlane()
public void set_shadowNearPlane(float value)
public float get_shadowSoftness()
public void set_shadowSoftness(float value)
public float get_shadowSoftnessFade()
public void set_shadowSoftnessFade(float value)
public float get_range()
public void set_range(float value)
public float get_spotAngle()
public void set_spotAngle(float value)
public float get_cookieSize()
public void set_cookieSize(float value)
public Texture get_cookie()
public void set_cookie(Texture value)
public Flare get_flare()
public void set_flare(Flare value)
public LightRenderMode get_renderMode()
public void set_renderMode(LightRenderMode value)
public bool get_alreadyLightmapped()
public void set_alreadyLightmapped(bool value)
public int get_bakedIndex()
public void set_bakedIndex(int value)
public bool get_isBaked()
public int get_cullingMask()
public void set_cullingMask(int value)
private void SetFalloffTable(Single[] input)
private void SetAllLightsFalloffToInverseSquared()
private void SetAllLightsFalloffToUnityLegacy()
public void AddCommandBuffer(LightEvent evt, CommandBuffer buffer)
public void AddCommandBuffer(LightEvent evt, CommandBuffer buffer, ShadowMapPass shadowPassMask)
public void RemoveCommandBuffer(LightEvent evt, CommandBuffer buffer)
public void RemoveCommandBuffers(LightEvent evt)
public void RemoveAllCommandBuffers()
public CommandBuffer[] GetCommandBuffers(LightEvent evt)
public int get_commandBufferCount()
public int get_pixelLightCount()
public void set_pixelLightCount(int value)
public Light[] GetLights(LightType type, int layer)
public float get_shadowConstantBias()
public void set_shadowConstantBias(float value)
public float get_shadowObjectSizeBias()
public void set_shadowObjectSizeBias(float value)
public bool get_attenuate()
public void set_attenuate(bool value)
}
public UnityEngine.LightmapBakeType : Enum {
public int value__
public LightmapBakeType Realtime
public LightmapBakeType Baked
public LightmapBakeType Mixed
}
public UnityEngine.LightmapData : object {
internal Texture2D m_Light
internal Texture2D m_Dir
internal Texture2D m_ShadowMask
public Texture2D lightmapLight
public Texture2D lightmapColor
public Texture2D lightmapDir
public Texture2D shadowMask
public Texture2D get_lightmapLight()
public void set_lightmapLight(Texture2D value)
public Texture2D get_lightmapColor()
public void set_lightmapColor(Texture2D value)
public Texture2D get_lightmapDir()
public void set_lightmapDir(Texture2D value)
public Texture2D get_shadowMask()
public void set_shadowMask(Texture2D value)
}
public UnityEngine.LightmapSettings : Object {
public LightmapData[] lightmaps
public LightmapsMode lightmapsMode
public LightProbes lightProbes
public LightmapsModeLegacy lightmapsModeLegacy
public ColorSpace bakedColorSpace
public LightmapData[] get_lightmaps()
public void set_lightmaps(LightmapData[] value)
public LightmapsMode get_lightmapsMode()
public void set_lightmapsMode(LightmapsMode value)
public LightProbes get_lightProbes()
public void set_lightProbes(LightProbes value)
internal void Reset()
public LightmapsModeLegacy get_lightmapsModeLegacy()
public void set_lightmapsModeLegacy(LightmapsModeLegacy value)
public ColorSpace get_bakedColorSpace()
public void set_bakedColorSpace(ColorSpace value)
}
public UnityEngine.LightmapsMode : Enum {
public int value__
public LightmapsMode NonDirectional
public LightmapsMode CombinedDirectional
}
public UnityEngine.LightmapsModeLegacy : Enum {
public int value__
public LightmapsModeLegacy Single
public LightmapsModeLegacy Dual
public LightmapsModeLegacy Directional
}
public UnityEngine.LightProbeGroup : Behaviour {
public Vector3[] probePositions
public Vector3[] get_probePositions()
public void set_probePositions(Vector3[] value)
}
public UnityEngine.LightProbeProxyVolume : Behaviour {
public Bounds boundsGlobal
public Vector3 sizeCustom
public Vector3 originCustom
public BoundingBoxMode boundingBoxMode
public ResolutionMode resolutionMode
public ProbePositionMode probePositionMode
public RefreshMode refreshMode
public float probeDensity
public int gridResolutionX
public int gridResolutionY
public int gridResolutionZ
public bool isFeatureSupported
public Bounds get_boundsGlobal()
private void INTERNAL_get_boundsGlobal(Bounds& value)
public Vector3 get_sizeCustom()
public void set_sizeCustom(Vector3 value)
private void INTERNAL_get_sizeCustom(Vector3& value)
private void INTERNAL_set_sizeCustom(Vector3& value)
public Vector3 get_originCustom()
public void set_originCustom(Vector3 value)
private void INTERNAL_get_originCustom(Vector3& value)
private void INTERNAL_set_originCustom(Vector3& value)
public BoundingBoxMode get_boundingBoxMode()
public void set_boundingBoxMode(BoundingBoxMode value)
public ResolutionMode get_resolutionMode()
public void set_resolutionMode(ResolutionMode value)
public ProbePositionMode get_probePositionMode()
public void set_probePositionMode(ProbePositionMode value)
public RefreshMode get_refreshMode()
public void set_refreshMode(RefreshMode value)
public float get_probeDensity()
public void set_probeDensity(float value)
public int get_gridResolutionX()
public void set_gridResolutionX(int value)
public int get_gridResolutionY()
public void set_gridResolutionY(int value)
public int get_gridResolutionZ()
public void set_gridResolutionZ(int value)
public void Update()
public bool get_isFeatureSupported()
}
public UnityEngine.LightProbes : Object {
public Vector3[] positions
public SphericalHarmonicsL2[] bakedProbes
public int count
public int cellCount
public Single[] coefficients
public void GetInterpolatedProbe(Vector3 position, Renderer renderer, SphericalHarmonicsL2& probe)
private void INTERNAL_CALL_GetInterpolatedProbe(Vector3& position, Renderer renderer, SphericalHarmonicsL2& probe)
public Vector3[] get_positions()
public SphericalHarmonicsL2[] get_bakedProbes()
public void set_bakedProbes(SphericalHarmonicsL2[] value)
public int get_count()
public int get_cellCount()
public void GetInterpolatedLightProbe(Vector3 position, Renderer renderer, Single[] coefficients)
public Single[] get_coefficients()
public void set_coefficients(Single[] value)
}
public UnityEngine.LightRenderMode : Enum {
public int value__
public LightRenderMode Auto
public LightRenderMode ForcePixel
public LightRenderMode ForceVertex
}
public UnityEngine.LightShadows : Enum {
public int value__
public LightShadows None
public LightShadows Hard
public LightShadows Soft
}
public UnityEngine.LightType : Enum {
public int value__
public LightType Spot
public LightType Directional
public LightType Point
public LightType Area
}
public UnityEngine.LineAlignment : Enum {
public int value__
public LineAlignment View
public LineAlignment Local
}
public UnityEngine.LineRenderer : Renderer {
public float startWidth
public float endWidth
public AnimationCurve widthCurve
public float widthMultiplier
public Color startColor
public Color endColor
public Gradient colorGradient
public int positionCount
public int numPositions
public bool useWorldSpace
public bool loop
public int numCornerVertices
public int numCapVertices
public LineTextureMode textureMode
public LineAlignment alignment
public bool generateLightingData
public float get_startWidth()
public void set_startWidth(float value)
public float get_endWidth()
public void set_endWidth(float value)
public AnimationCurve get_widthCurve()
public void set_widthCurve(AnimationCurve value)
public float get_widthMultiplier()
public void set_widthMultiplier(float value)
public Color get_startColor()
public void set_startColor(Color value)
private void INTERNAL_get_startColor(Color& value)
private void INTERNAL_set_startColor(Color& value)
public Color get_endColor()
public void set_endColor(Color value)
private void INTERNAL_get_endColor(Color& value)
private void INTERNAL_set_endColor(Color& value)
public Gradient get_colorGradient()
public void set_colorGradient(Gradient value)
public int get_positionCount()
public void set_positionCount(int value)
public int get_numPositions()
public void set_numPositions(int value)
public void SetPosition(int index, Vector3 position)
private void INTERNAL_CALL_SetPosition(LineRenderer self, int index, Vector3& position)
public Vector3 GetPosition(int index)
private void INTERNAL_CALL_GetPosition(LineRenderer self, int index, Vector3& value)
public void SetPositions(Vector3[] positions)
public int GetPositions(Vector3[] positions)
public void Simplify(float tolerance)
public bool get_useWorldSpace()
public void set_useWorldSpace(bool value)
public bool get_loop()
public void set_loop(bool value)
public int get_numCornerVertices()
public void set_numCornerVertices(int value)
public int get_numCapVertices()
public void set_numCapVertices(int value)
public LineTextureMode get_textureMode()
public void set_textureMode(LineTextureMode value)
public LineAlignment get_alignment()
public void set_alignment(LineAlignment value)
public bool get_generateLightingData()
public void set_generateLightingData(bool value)
public void SetWidth(float start, float end)
public void SetColors(Color start, Color end)
public void SetVertexCount(int count)
}
public UnityEngine.LineTextureMode : Enum {
public int value__
public LineTextureMode Stretch
public LineTextureMode Tile
public LineTextureMode DistributePerSegment
public LineTextureMode RepeatPerSegment
}
public UnityEngine.LineUtility : object {
internal void GeneratePointsToKeep3D(object pointsList, float tolerance, object pointsToKeepList)
internal void GeneratePointsToKeep2D(object pointsList, float tolerance, object pointsToKeepList)
internal void GenerateSimplifiedPoints3D(object pointsList, float tolerance, object simplifiedPoints)
internal void GenerateSimplifiedPoints2D(object pointsList, float tolerance, object simplifiedPoints)
public void Simplify(List`1<Vector3> points, float tolerance, List`1<int> pointsToKeep)
public void Simplify(List`1<Vector3> points, float tolerance, List`1<Vector3> simplifiedPoints)
public void Simplify(List`1<Vector2> points, float tolerance, List`1<int> pointsToKeep)
public void Simplify(List`1<Vector2> points, float tolerance, List`1<Vector2> simplifiedPoints)
}
public UnityEngine.LocationInfo : ValueType {
private double m_Timestamp
private float m_Latitude
private float m_Longitude
private float m_Altitude
private float m_HorizontalAccuracy
private float m_VerticalAccuracy
public float latitude
public float longitude
public float altitude
public float horizontalAccuracy
public float verticalAccuracy
public double timestamp
public float get_latitude()
public float get_longitude()
public float get_altitude()
public float get_horizontalAccuracy()
public float get_verticalAccuracy()
public double get_timestamp()
}
public UnityEngine.LocationService : object {
public bool isEnabledByUser
public LocationServiceStatus status
public LocationInfo lastData
public bool get_isEnabledByUser()
public LocationServiceStatus get_status()
public LocationInfo get_lastData()
public void Start(float desiredAccuracyInMeters, float updateDistanceInMeters)
public void Start(float desiredAccuracyInMeters)
public void Start()
public void Stop()
}
public UnityEngine.LocationServiceStatus : Enum {
public int value__
public LocationServiceStatus Stopped
public LocationServiceStatus Initializing
public LocationServiceStatus Running
public LocationServiceStatus Failed
}
public UnityEngine.LOD : ValueType {
public float screenRelativeTransitionHeight
public float fadeTransitionWidth
public Renderer[] renderers
public void .ctor(float screenRelativeTransitionHeight, Renderer[] renderers)
}
public UnityEngine.LODFadeMode : Enum {
public int value__
public LODFadeMode None
public LODFadeMode CrossFade
public LODFadeMode SpeedTree
}
public UnityEngine.LODGroup : Component {
public Vector3 localReferencePoint
public float size
public int lodCount
public LODFadeMode fadeMode
public bool animateCrossFading
public bool enabled
public float crossFadeAnimationDuration
public Vector3 get_localReferencePoint()
public void set_localReferencePoint(Vector3 value)
private void INTERNAL_get_localReferencePoint(Vector3& value)
private void INTERNAL_set_localReferencePoint(Vector3& value)
public float get_size()
public void set_size(float value)
public int get_lodCount()
public LODFadeMode get_fadeMode()
public void set_fadeMode(LODFadeMode value)
public bool get_animateCrossFading()
public void set_animateCrossFading(bool value)
public bool get_enabled()
public void set_enabled(bool value)
public void RecalculateBounds()
public LOD[] GetLODs()
public void SetLODS(LOD[] lods)
public void SetLODs(LOD[] lods)
public void ForceLOD(int index)
public float get_crossFadeAnimationDuration()
public void set_crossFadeAnimationDuration(float value)
}
public UnityEngine.Logger : object {
private string kNoTagFormat
private string kTagFormat
private ILogHandler <logHandler>k__BackingField
private bool <logEnabled>k__BackingField
private LogType <filterLogType>k__BackingField
public ILogHandler logHandler
public bool logEnabled
public LogType filterLogType
public void .ctor(ILogHandler logHandler)
public ILogHandler get_logHandler()
public void set_logHandler(ILogHandler value)
public bool get_logEnabled()
public void set_logEnabled(bool value)
public LogType get_filterLogType()
public void set_filterLogType(LogType value)
public bool IsLogTypeAllowed(LogType logType)
private string GetString(object message)
public void Log(LogType logType, object message)
public void Log(LogType logType, object message, Object context)
public void Log(LogType logType, string tag, object message)
public void Log(LogType logType, string tag, object message, Object context)
public void Log(object message)
public void Log(string tag, object message)
public void Log(string tag, object message, Object context)
public void LogWarning(string tag, object message)
public void LogWarning(string tag, object message, Object context)
public void LogError(string tag, object message)
public void LogError(string tag, object message, Object context)
public void LogFormat(LogType logType, string format, Object[] args)
public void LogException(Exception exception)
public void LogFormat(LogType logType, Object context, string format, Object[] args)
public void LogException(Exception exception, Object context)
}
public UnityEngine.LogType : Enum {
public int value__
public LogType Error
public LogType Assert
public LogType Warning
public LogType Log
public LogType Exception
}
public UnityEngine.MasterServer : object {
public string ipAddress
public int port
public int updateRate
public bool dedicatedServer
public string get_ipAddress()
public void set_ipAddress(string value)
public int get_port()
public void set_port(int value)
public void RequestHostList(string gameTypeName)
public HostData[] PollHostList()
public void RegisterHost(string gameTypeName, string gameName, string comment)
public void RegisterHost(string gameTypeName, string gameName)
public void UnregisterHost()
public void ClearHostList()
public int get_updateRate()
public void set_updateRate(int value)
public bool get_dedicatedServer()
public void set_dedicatedServer(bool value)
}
public UnityEngine.MasterServerEvent : Enum {
public int value__
public MasterServerEvent RegistrationFailedGameName
public MasterServerEvent RegistrationFailedGameType
public MasterServerEvent RegistrationFailedNoServer
public MasterServerEvent RegistrationSucceeded
public MasterServerEvent HostListReceived
}
public UnityEngine.MatchTargetWeightMask : ValueType {
private Vector3 m_PositionXYZWeight
private float m_RotationWeight
public Vector3 positionXYZWeight
public float rotationWeight
public void .ctor(Vector3 positionXYZWeight, float rotationWeight)
public Vector3 get_positionXYZWeight()
public void set_positionXYZWeight(Vector3 value)
public float get_rotationWeight()
public void set_rotationWeight(float value)
}
public UnityEngine.Material : Object {
public Shader shader
public Color color
public Texture mainTexture
public Vector2 mainTextureOffset
public Vector2 mainTextureScale
public int passCount
public int renderQueue
public String[] shaderKeywords
public MaterialGlobalIlluminationFlags globalIlluminationFlags
public bool enableInstancing
public bool doubleSidedGI
public void .ctor(string contents)
public void .ctor(Shader shader)
public void .ctor(Material source)
public Shader get_shader()
public void set_shader(Shader value)
public Color get_color()
public void set_color(Color value)
public Texture get_mainTexture()
public void set_mainTexture(Texture value)
public Vector2 get_mainTextureOffset()
public void set_mainTextureOffset(Vector2 value)
public Vector2 get_mainTextureScale()
public void set_mainTextureScale(Vector2 value)
private void SetFloatImpl(int nameID, float value)
private void SetIntImpl(int nameID, int value)
private void SetColorImpl(int nameID, Color value)
private void INTERNAL_CALL_SetColorImpl(Material self, int nameID, Color& value)
private void SetVectorImpl(int nameID, Vector4 value)
private void INTERNAL_CALL_SetVectorImpl(Material self, int nameID, Vector4& value)
private void SetMatrixImpl(int nameID, Matrix4x4 value)
private void INTERNAL_CALL_SetMatrixImpl(Material self, int nameID, Matrix4x4& value)
private void SetTextureImpl(int nameID, Texture value)
private void SetBufferImpl(int nameID, ComputeBuffer value)
private void SetFloatArrayImpl(int nameID, Single[] values)
private void SetVectorArrayImpl(int nameID, Vector4[] values)
private void SetMatrixArrayImpl(int nameID, Matrix4x4[] values)
private Array ExtractArrayFromList(object list)
private float GetFloatImpl(int nameID)
private int GetIntImpl(int nameID)
private Color GetColorImpl(int nameID)
private void INTERNAL_CALL_GetColorImpl(Material self, int nameID, Color& value)
private Vector4 GetVectorImpl(int nameID)
private void INTERNAL_CALL_GetVectorImpl(Material self, int nameID, Vector4& value)
private Matrix4x4 GetMatrixImpl(int nameID)
private void INTERNAL_CALL_GetMatrixImpl(Material self, int nameID, Matrix4x4& value)
private Texture GetTextureImpl(int nameID)
private Single[] GetFloatArrayImpl(int nameID)
private Vector4[] GetVectorArrayImpl(int nameID)
private Matrix4x4[] GetMatrixArrayImpl(int nameID)
private void GetFloatArrayImplList(int nameID, object list)
private void GetVectorArrayImplList(int nameID, object list)
private void GetMatrixArrayImplList(int nameID, object list)
private void SetColorArrayImpl(int nameID, Color[] values)
private void SetColorArrayImplList(int nameID, object values)
private Color[] GetColorArrayImpl(int nameID)
private void GetColorArrayImplList(int nameID, object list)
private Vector4 GetTextureScaleAndOffsetImpl(int nameID)
private void INTERNAL_CALL_GetTextureScaleAndOffsetImpl(Material self, int nameID, Vector4& value)
private void SetTextureOffsetImpl(int nameID, Vector2 offset)
private void INTERNAL_CALL_SetTextureOffsetImpl(Material self, int nameID, Vector2& offset)
private void SetTextureScaleImpl(int nameID, Vector2 scale)
private void INTERNAL_CALL_SetTextureScaleImpl(Material self, int nameID, Vector2& scale)
public bool HasProperty(string propertyName)
public bool HasProperty(int nameID)
public string GetTag(string tag, bool searchFallbacks, string defaultValue)
public string GetTag(string tag, bool searchFallbacks)
public void SetOverrideTag(string tag, string val)
public void SetShaderPassEnabled(string passName, bool enabled)
public bool GetShaderPassEnabled(string passName)
public void Lerp(Material start, Material end, float t)
public int get_passCount()
public bool SetPass(int pass)
public string GetPassName(int pass)
public int FindPass(string passName)
public int get_renderQueue()
public void set_renderQueue(int value)
public Material Create(string scriptContents)
private void Internal_CreateWithString(Material mono, string contents)
private void Internal_CreateWithShader(Material mono, Shader shader)
private void Internal_CreateWithMaterial(Material mono, Material source)
public void CopyPropertiesFromMaterial(Material mat)
public void EnableKeyword(string keyword)
public void DisableKeyword(string keyword)
public bool IsKeywordEnabled(string keyword)
public String[] get_shaderKeywords()
public void set_shaderKeywords(String[] value)
public MaterialGlobalIlluminationFlags get_globalIlluminationFlags()
public void set_globalIlluminationFlags(MaterialGlobalIlluminationFlags value)
public bool get_enableInstancing()
public void set_enableInstancing(bool value)
public bool get_doubleSidedGI()
public void set_doubleSidedGI(bool value)
public void SetFloat(string name, float value)
public void SetFloat(int nameID, float value)
public void SetInt(string name, int value)
public void SetInt(int nameID, int value)
public void SetColor(string name, Color value)
public void SetColor(int nameID, Color value)
public void SetVector(string name, Vector4 value)
public void SetVector(int nameID, Vector4 value)
public void SetMatrix(string name, Matrix4x4 value)
public void SetMatrix(int nameID, Matrix4x4 value)
public void SetTexture(string name, Texture value)
public void SetTexture(int nameID, Texture value)
public void SetBuffer(string name, ComputeBuffer value)
public void SetBuffer(int nameID, ComputeBuffer value)
public void SetTextureOffset(string name, Vector2 value)
public void SetTextureOffset(int nameID, Vector2 value)
public void SetTextureScale(string name, Vector2 value)
public void SetTextureScale(int nameID, Vector2 value)
public void SetFloatArray(string name, List`1<float> values)
public void SetFloatArray(int nameID, List`1<float> values)
public void SetFloatArray(string name, Single[] values)
public void SetFloatArray(int nameID, Single[] values)
public void SetColorArray(string name, List`1<Color> values)
public void SetColorArray(int nameID, List`1<Color> values)
public void SetColorArray(string name, Color[] values)
public void SetColorArray(int nameID, Color[] values)
public void SetVectorArray(string name, List`1<Vector4> values)
public void SetVectorArray(int nameID, List`1<Vector4> values)
public void SetVectorArray(string name, Vector4[] values)
public void SetVectorArray(int nameID, Vector4[] values)
public void SetMatrixArray(string name, List`1<Matrix4x4> values)
public void SetMatrixArray(int nameID, List`1<Matrix4x4> values)
public void SetMatrixArray(string name, Matrix4x4[] values)
public void SetMatrixArray(int nameID, Matrix4x4[] values)
public float GetFloat(string name)
public float GetFloat(int nameID)
public int GetInt(string name)
public int GetInt(int nameID)
public Color GetColor(string name)
public Color GetColor(int nameID)
public Vector4 GetVector(string name)
public Vector4 GetVector(int nameID)
public Matrix4x4 GetMatrix(string name)
public Matrix4x4 GetMatrix(int nameID)
public void GetFloatArray(string name, List`1<float> values)
public void GetFloatArray(int nameID, List`1<float> values)
public Single[] GetFloatArray(string name)
public Single[] GetFloatArray(int nameID)
public void GetVectorArray(string name, List`1<Vector4> values)
public void GetVectorArray(int nameID, List`1<Vector4> values)
public Color[] GetColorArray(string name)
public Color[] GetColorArray(int nameID)
public void GetColorArray(string name, List`1<Color> values)
public void GetColorArray(int nameID, List`1<Color> values)
public Vector4[] GetVectorArray(string name)
public Vector4[] GetVectorArray(int nameID)
public void GetMatrixArray(string name, List`1<Matrix4x4> values)
public void GetMatrixArray(int nameID, List`1<Matrix4x4> values)
public Matrix4x4[] GetMatrixArray(string name)
public Matrix4x4[] GetMatrixArray(int nameID)
public Texture GetTexture(string name)
public Texture GetTexture(int nameID)
public Vector2 GetTextureOffset(string name)
public Vector2 GetTextureOffset(int nameID)
public Vector2 GetTextureScale(string name)
public Vector2 GetTextureScale(int nameID)
}
public UnityEngine.MaterialGlobalIlluminationFlags : Enum {
public int value__
public MaterialGlobalIlluminationFlags None
public MaterialGlobalIlluminationFlags RealtimeEmissive
public MaterialGlobalIlluminationFlags BakedEmissive
public MaterialGlobalIlluminationFlags EmissiveIsBlack
public MaterialGlobalIlluminationFlags AnyEmissive
}
public UnityEngine.MaterialPropertyBlock : object {
internal IntPtr m_Ptr
public bool isEmpty
internal void InitBlock()
internal void DestroyBlock()
protected void Finalize()
public bool get_isEmpty()
public void Clear()
private void SetFloatImpl(int nameID, float value)
private void SetVectorImpl(int nameID, Vector4 value)
private void INTERNAL_CALL_SetVectorImpl(MaterialPropertyBlock self, int nameID, Vector4& value)
private void SetMatrixImpl(int nameID, Matrix4x4 value)
private void INTERNAL_CALL_SetMatrixImpl(MaterialPropertyBlock self, int nameID, Matrix4x4& value)
private void SetTextureImpl(int nameID, Texture value)
private void SetBufferImpl(int nameID, ComputeBuffer value)
private void SetColorImpl(int nameID, Color value)
private void INTERNAL_CALL_SetColorImpl(MaterialPropertyBlock self, int nameID, Color& value)
private Array ExtractArrayFromList(object list)
private void SetFloatArrayImpl(int nameID, Single[] values)
private void SetVectorArrayImpl(int nameID, Vector4[] values)
private void SetMatrixArrayImpl(int nameID, Matrix4x4[] values)
private float GetFloatImpl(int nameID)
private Vector4 GetVectorImpl(int nameID)
private void INTERNAL_CALL_GetVectorImpl(MaterialPropertyBlock self, int nameID, Vector4& value)
private Matrix4x4 GetMatrixImpl(int nameID)
private void INTERNAL_CALL_GetMatrixImpl(MaterialPropertyBlock self, int nameID, Matrix4x4& value)
private Single[] GetFloatArrayImpl(int nameID)
private Vector4[] GetVectorArrayImpl(int nameID)
private Matrix4x4[] GetMatrixArrayImpl(int nameID)
private void GetFloatArrayImplList(int nameID, object list)
private void GetVectorArrayImplList(int nameID, object list)
private void GetMatrixArrayImplList(int nameID, object list)
private Texture GetTextureImpl(int nameID)
public void SetFloat(string name, float value)
public void SetFloat(int nameID, float value)
public void SetVector(string name, Vector4 value)
public void SetVector(int nameID, Vector4 value)
public void SetColor(string name, Color value)
public void SetColor(int nameID, Color value)
public void SetMatrix(string name, Matrix4x4 value)
public void SetMatrix(int nameID, Matrix4x4 value)
public void SetBuffer(string name, ComputeBuffer value)
public void SetBuffer(int nameID, ComputeBuffer value)
public void SetTexture(string name, Texture value)
public void SetTexture(int nameID, Texture value)
public void SetFloatArray(string name, List`1<float> values)
public void SetFloatArray(int nameID, List`1<float> values)
public void SetFloatArray(string name, Single[] values)
public void SetFloatArray(int nameID, Single[] values)
public void SetVectorArray(string name, List`1<Vector4> values)
public void SetVectorArray(int nameID, List`1<Vector4> values)
public void SetVectorArray(string name, Vector4[] values)
public void SetVectorArray(int nameID, Vector4[] values)
public void SetMatrixArray(string name, List`1<Matrix4x4> values)
public void SetMatrixArray(int nameID, List`1<Matrix4x4> values)
public void SetMatrixArray(string name, Matrix4x4[] values)
public void SetMatrixArray(int nameID, Matrix4x4[] values)
public float GetFloat(string name)
public float GetFloat(int nameID)
public Vector4 GetVector(string name)
public Vector4 GetVector(int nameID)
public Matrix4x4 GetMatrix(string name)
public Matrix4x4 GetMatrix(int nameID)
public void GetFloatArray(string name, List`1<float> values)
public void GetFloatArray(int nameID, List`1<float> values)
public Single[] GetFloatArray(string name)
public Single[] GetFloatArray(int nameID)
public void GetVectorArray(string name, List`1<Vector4> values)
public void GetVectorArray(int nameID, List`1<Vector4> values)
public Vector4[] GetVectorArray(string name)
public Vector4[] GetVectorArray(int nameID)
public void GetMatrixArray(string name, List`1<Matrix4x4> values)
public void GetMatrixArray(int nameID, List`1<Matrix4x4> values)
public Matrix4x4[] GetMatrixArray(string name)
public Matrix4x4[] GetMatrixArray(int nameID)
public Texture GetTexture(string name)
public Texture GetTexture(int nameID)
public void AddFloat(string name, float value)
public void AddFloat(int nameID, float value)
public void AddVector(string name, Vector4 value)
public void AddVector(int nameID, Vector4 value)
public void AddColor(string name, Color value)
public void AddColor(int nameID, Color value)
public void AddMatrix(string name, Matrix4x4 value)
public void AddMatrix(int nameID, Matrix4x4 value)
public void AddTexture(string name, Texture value)
public void AddTexture(int nameID, Texture value)
}
public UnityEngine.Mathf : ValueType {
public float PI
public float Infinity
public float NegativeInfinity
public float Deg2Rad
public float Rad2Deg
public float Epsilon
public int ClosestPowerOfTwo(int value)
public float GammaToLinearSpace(float value)
public float LinearToGammaSpace(float value)
public Color CorrelatedColorTemperatureToRGB(float kelvin)
private void INTERNAL_CALL_CorrelatedColorTemperatureToRGB(float kelvin, Color& value)
public bool IsPowerOfTwo(int value)
public int NextPowerOfTwo(int value)
public float PerlinNoise(float x, float y)
public ushort FloatToHalf(float val)
public float HalfToFloat(ushort val)
public float Sin(float f)
public float Cos(float f)
public float Tan(float f)
public float Asin(float f)
public float Acos(float f)
public float Atan(float f)
public float Atan2(float y, float x)
public float Sqrt(float f)
public float Abs(float f)
public int Abs(int value)
public float Min(float a, float b)
public float Min(Single[] values)
public int Min(int a, int b)
public int Min(Int32[] values)
public float Max(float a, float b)
public float Max(Single[] values)
public int Max(int a, int b)
public int Max(Int32[] values)
public float Pow(float f, float p)
public float Exp(float power)
public float Log(float f, float p)
public float Log(float f)
public float Log10(float f)
public float Ceil(float f)
public float Floor(float f)
public float Round(float f)
public int CeilToInt(float f)
public int FloorToInt(float f)
public int RoundToInt(float f)
public float Sign(float f)
public float Clamp(float value, float min, float max)
public int Clamp(int value, int min, int max)
public float Clamp01(float value)
public float Lerp(float a, float b, float t)
public float LerpUnclamped(float a, float b, float t)
public float LerpAngle(float a, float b, float t)
public float MoveTowards(float current, float target, float maxDelta)
public float MoveTowardsAngle(float current, float target, float maxDelta)
public float SmoothStep(float from, float to, float t)
public float Gamma(float value, float absmax, float gamma)
public bool Approximately(float a, float b)
public float SmoothDamp(float current, float target, Single& currentVelocity, float smoothTime, float maxSpeed)
public float SmoothDamp(float current, float target, Single& currentVelocity, float smoothTime)
public float SmoothDamp(float current, float target, Single& currentVelocity, float smoothTime, float maxSpeed, float deltaTime)
public float SmoothDampAngle(float current, float target, Single& currentVelocity, float smoothTime, float maxSpeed)
public float SmoothDampAngle(float current, float target, Single& currentVelocity, float smoothTime)
public float SmoothDampAngle(float current, float target, Single& currentVelocity, float smoothTime, float maxSpeed, float deltaTime)
public float Repeat(float t, float length)
public float PingPong(float t, float length)
public float InverseLerp(float a, float b, float value)
public float DeltaAngle(float current, float target)
internal bool LineIntersection(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2& result)
internal bool LineSegmentIntersection(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2& result)
internal long RandomToLong(Random r)
}
public UnityEngine.Matrix4x4 : ValueType {
public float m00
public float m10
public float m20
public float m30
public float m01
public float m11
public float m21
public float m31
public float m02
public float m12
public float m22
public float m32
public float m03
public float m13
public float m23
public float m33
private Matrix4x4 zeroMatrix
private Matrix4x4 identityMatrix
public Matrix4x4 inverse
public Matrix4x4 transpose
public bool isIdentity
public float determinant
public float Item
public float Item
public Matrix4x4 zero
public Matrix4x4 identity
public void .ctor(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3)
public Matrix4x4 Inverse(Matrix4x4 m)
private void INTERNAL_CALL_Inverse(Matrix4x4& m, Matrix4x4& value)
public Matrix4x4 Transpose(Matrix4x4 m)
private void INTERNAL_CALL_Transpose(Matrix4x4& m, Matrix4x4& value)
internal bool Invert(Matrix4x4 inMatrix, Matrix4x4& dest)
private bool INTERNAL_CALL_Invert(Matrix4x4& inMatrix, Matrix4x4& dest)
public Matrix4x4 get_inverse()
public Matrix4x4 get_transpose()
public bool get_isIdentity()
public float Determinant(Matrix4x4 m)
private float INTERNAL_CALL_Determinant(Matrix4x4& m)
public float get_determinant()
public void SetTRS(Vector3 pos, Quaternion q, Vector3 s)
public Matrix4x4 TRS(Vector3 pos, Quaternion q, Vector3 s)
private void INTERNAL_CALL_TRS(Vector3& pos, Quaternion& q, Vector3& s, Matrix4x4& value)
public Matrix4x4 Ortho(float left, float right, float bottom, float top, float zNear, float zFar)
private void INTERNAL_CALL_Ortho(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4x4& value)
public Matrix4x4 Perspective(float fov, float aspect, float zNear, float zFar)
private void INTERNAL_CALL_Perspective(float fov, float aspect, float zNear, float zFar, Matrix4x4& value)
public Matrix4x4 LookAt(Vector3 from, Vector3 to, Vector3 up)
private void INTERNAL_CALL_LookAt(Vector3& from, Vector3& to, Vector3& up, Matrix4x4& value)
public float get_Item(int row, int column)
public void set_Item(int row, int column, float value)
public float get_Item(int index)
public void set_Item(int index, float value)
public int GetHashCode()
public bool Equals(object other)
public Matrix4x4 op_Multiply(Matrix4x4 lhs, Matrix4x4 rhs)
public Vector4 op_Multiply(Matrix4x4 lhs, Vector4 vector)
public bool op_Equality(Matrix4x4 lhs, Matrix4x4 rhs)
public bool op_Inequality(Matrix4x4 lhs, Matrix4x4 rhs)
public Vector4 GetColumn(int index)
public Vector4 GetRow(int index)
public void SetColumn(int index, Vector4 column)
public void SetRow(int index, Vector4 row)
public Vector3 MultiplyPoint(Vector3 point)
public Vector3 MultiplyPoint3x4(Vector3 point)
public Vector3 MultiplyVector(Vector3 vector)
public Plane TransformPlane(Plane plane)
public Matrix4x4 Scale(Vector3 vector)
public Matrix4x4 Translate(Vector3 vector)
public Matrix4x4 Rotate(Quaternion q)
public Matrix4x4 get_zero()
public Matrix4x4 get_identity()
public string ToString()
public string ToString(string format)
}
public UnityEngine.Mesh : Object {
public bool isReadable
internal bool canAccess
public int blendShapeCount
public int vertexBufferCount
public Bounds bounds
public int vertexCount
public int subMeshCount
public BoneWeight[] boneWeights
public Matrix4x4[] bindposes
public Vector3[] vertices
public Vector3[] normals
public Vector4[] tangents
public Vector2[] uv
public Vector2[] uv2
public Vector2[] uv3
public Vector2[] uv4
public Color[] colors
public Color32[] colors32
public Int32[] triangles
private void Internal_Create(Mesh mono)
public void Clear(bool keepVertexLayout)
public void Clear()
public bool get_isReadable()
internal bool get_canAccess()
internal void PrintErrorCantAccessMesh(InternalShaderChannel channel)
internal void PrintErrorCantAccessMeshForIndices()
internal void PrintErrorBadSubmeshIndexTriangles()
internal void PrintErrorBadSubmeshIndexIndices()
private void SetArrayForChannelImpl(InternalShaderChannel channel, InternalVertexChannelType format, int dim, Array values, int arraySize)
private Array GetAllocArrayFromChannelImpl(InternalShaderChannel channel, InternalVertexChannelType format, int dim)
private void GetArrayFromChannelImpl(InternalShaderChannel channel, InternalVertexChannelType format, int dim, Array values)
internal bool HasChannel(InternalShaderChannel channel)
private void ResizeList(object list, int size)
private Array ExtractArrayFromList(object list)
private Int32[] GetTrianglesImpl(int submesh)
private void GetTrianglesNonAllocImpl(object values, int submesh)
private Int32[] GetIndicesImpl(int submesh)
private void GetIndicesNonAllocImpl(object values, int submesh)
private void SetTrianglesImpl(int submesh, Array triangles, int arraySize, bool calculateBounds)
private void SetTrianglesImpl(int submesh, Array triangles, int arraySize)
private void SetIndicesImpl(int submesh, MeshTopology topology, Array indices, int arraySize, bool calculateBounds)
private void SetIndicesImpl(int submesh, MeshTopology topology, Array indices, int arraySize)
public void SetTriangles(Int32[] triangles, int submesh)
public void SetTriangles(Int32[] triangles, int submesh, bool calculateBounds)
public void SetTriangles(List`1<int> triangles, int submesh)
public void SetTriangles(List`1<int> triangles, int submesh, bool calculateBounds)
public void SetIndices(Int32[] indices, MeshTopology topology, int submesh)
public void SetIndices(Int32[] indices, MeshTopology topology, int submesh, bool calculateBounds)
public int get_blendShapeCount()
public void ClearBlendShapes()
public string GetBlendShapeName(int shapeIndex)
public int GetBlendShapeFrameCount(int shapeIndex)
public float GetBlendShapeFrameWeight(int shapeIndex, int frameIndex)
public void GetBlendShapeFrameVertices(int shapeIndex, int frameIndex, Vector3[] deltaVertices, Vector3[] deltaNormals, Vector3[] deltaTangents)
public void AddBlendShapeFrame(string shapeName, float frameWeight, Vector3[] deltaVertices, Vector3[] deltaNormals, Vector3[] deltaTangents)
public int get_vertexBufferCount()
public IntPtr GetNativeVertexBufferPtr(int bufferIndex)
private void INTERNAL_CALL_GetNativeVertexBufferPtr(Mesh self, int bufferIndex, IntPtr& value)
public IntPtr GetNativeIndexBufferPtr()
private void INTERNAL_CALL_GetNativeIndexBufferPtr(Mesh self, IntPtr& value)
public Bounds get_bounds()
public void set_bounds(Bounds value)
private void INTERNAL_get_bounds(Bounds& value)
private void INTERNAL_set_bounds(Bounds& value)
public void RecalculateBounds()
public void RecalculateNormals()
public void RecalculateTangents()
public void Optimize()
public MeshTopology GetTopology(int submesh)
public int get_vertexCount()
public int get_subMeshCount()
public void set_subMeshCount(int value)
public UInt32 GetIndexStart(int submesh)
public UInt32 GetIndexCount(int submesh)
public void CombineMeshes(CombineInstance[] combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData)
public void CombineMeshes(CombineInstance[] combine, bool mergeSubMeshes, bool useMatrices)
public void CombineMeshes(CombineInstance[] combine, bool mergeSubMeshes)
public void CombineMeshes(CombineInstance[] combine)
public BoneWeight[] get_boneWeights()
public void set_boneWeights(BoneWeight[] value)
private void GetBoneWeightsNonAllocImpl(object values)
public Matrix4x4[] get_bindposes()
public void set_bindposes(Matrix4x4[] value)
private int GetBindposeCount()
private void GetBindposesNonAllocImpl(object values)
public void MarkDynamic()
public void UploadMeshData(bool markNoLogerReadable)
public int GetBlendShapeIndex(string blendShapeName)
internal InternalShaderChannel GetUVChannel(int uvIndex)
internal int DefaultDimensionForChannel(InternalShaderChannel channel)
private T[] GetAllocArrayFromChannel(InternalShaderChannel channel, InternalVertexChannelType format, int dim)
private T[] GetAllocArrayFromChannel(InternalShaderChannel channel)
private int SafeLength(Array values)
private int SafeLength(List`1<T> values)
private void SetSizedArrayForChannel(InternalShaderChannel channel, InternalVertexChannelType format, int dim, Array values, int valuesCount)
private void SetArrayForChannel(InternalShaderChannel channel, InternalVertexChannelType format, int dim, T[] values)
private void SetArrayForChannel(InternalShaderChannel channel, T[] values)
private void SetListForChannel(InternalShaderChannel channel, InternalVertexChannelType format, int dim, List`1<T> values)
private void SetListForChannel(InternalShaderChannel channel, List`1<T> values)
private void GetListForChannel(List`1<T> buffer, int capacity, InternalShaderChannel channel, int dim)
private void GetListForChannel(List`1<T> buffer, int capacity, InternalShaderChannel channel, int dim, InternalVertexChannelType channelType)
private void PrepareUserBuffer(List`1<T> buffer, int capacity)
public Vector3[] get_vertices()
public void set_vertices(Vector3[] value)
public Vector3[] get_normals()
public void set_normals(Vector3[] value)
public Vector4[] get_tangents()
public void set_tangents(Vector4[] value)
public Vector2[] get_uv()
public void set_uv(Vector2[] value)
public Vector2[] get_uv2()
public void set_uv2(Vector2[] value)
public Vector2[] get_uv3()
public void set_uv3(Vector2[] value)
public Vector2[] get_uv4()
public void set_uv4(Vector2[] value)
public Color[] get_colors()
public void set_colors(Color[] value)
public Color32[] get_colors32()
public void set_colors32(Color32[] value)
public void GetVertices(List`1<Vector3> vertices)
public void SetVertices(List`1<Vector3> inVertices)
public void GetNormals(List`1<Vector3> normals)
public void SetNormals(List`1<Vector3> inNormals)
public void GetTangents(List`1<Vector4> tangents)
public void SetTangents(List`1<Vector4> inTangents)
public void GetColors(List`1<Color> colors)
public void SetColors(List`1<Color> inColors)
public void GetColors(List`1<Color32> colors)
public void SetColors(List`1<Color32> inColors)
private void SetUvsImpl(int uvIndex, int dim, List`1<T> uvs)
public void SetUVs(int channel, List`1<Vector2> uvs)
public void SetUVs(int channel, List`1<Vector3> uvs)
public void SetUVs(int channel, List`1<Vector4> uvs)
private void GetUVsImpl(int uvIndex, List`1<T> uvs, int dim)
public void GetUVs(int channel, List`1<Vector2> uvs)
public void GetUVs(int channel, List`1<Vector3> uvs)
public void GetUVs(int channel, List`1<Vector4> uvs)
private bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles)
private bool CheckCanAccessSubmeshTriangles(int submesh)
private bool CheckCanAccessSubmeshIndices(int submesh)
public Int32[] get_triangles()
public void set_triangles(Int32[] value)
public Int32[] GetTriangles(int submesh)
public void GetTriangles(List`1<int> triangles, int submesh)
public Int32[] GetIndices(int submesh)
public void GetIndices(List`1<int> indices, int submesh)
public void GetBindposes(List`1<Matrix4x4> bindposes)
public void GetBoneWeights(List`1<BoneWeight> boneWeights)
}
public UnityEngine.MeshCollider : Collider {
public Mesh sharedMesh
public bool convex
public bool inflateMesh
public float skinWidth
public bool smoothSphereCollisions
public Mesh get_sharedMesh()
public void set_sharedMesh(Mesh value)
public bool get_convex()
public void set_convex(bool value)
public bool get_inflateMesh()
public void set_inflateMesh(bool value)
public float get_skinWidth()
public void set_skinWidth(float value)
public bool get_smoothSphereCollisions()
public void set_smoothSphereCollisions(bool value)
}
public UnityEngine.MeshFilter : Component {
public Mesh mesh
public Mesh sharedMesh
public Mesh get_mesh()
public void set_mesh(Mesh value)
public Mesh get_sharedMesh()
public void set_sharedMesh(Mesh value)
}
public UnityEngine.MeshRenderer : Renderer {
public Mesh additionalVertexStreams
public Mesh get_additionalVertexStreams()
public void set_additionalVertexStreams(Mesh value)
}
public UnityEngine.MeshTopology : Enum {
public int value__
public MeshTopology Triangles
public MeshTopology Quads
public MeshTopology Lines
public MeshTopology LineStrip
public MeshTopology Points
}
public UnityEngine.Microphone : object {
public String[] devices
public AudioClip Start(string deviceName, bool loop, int lengthSec, int frequency)
public void End(string deviceName)
public String[] get_devices()
public bool IsRecording(string deviceName)
public int GetPosition(string deviceName)
public void GetDeviceCaps(string deviceName, Int32& minFreq, Int32& maxFreq)
}
public UnityEngine.MissingComponentException : SystemException {
private int Result
private string unityStackTrace
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public UnityEngine.MissingReferenceException : SystemException {
private int Result
private string unityStackTrace
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public UnityEngine.MonoBehaviour : Behaviour {
public bool useGUILayout
private void Internal_CancelInvokeAll()
private bool Internal_IsInvokingAll()
public void Invoke(string methodName, float time)
public void InvokeRepeating(string methodName, float time, float repeatRate)
public void CancelInvoke()
public void CancelInvoke(string methodName)
public bool IsInvoking(string methodName)
public bool IsInvoking()
public Coroutine StartCoroutine(IEnumerator routine)
public Coroutine StartCoroutine_Auto(IEnumerator routine)
private Coroutine StartCoroutine_Auto_Internal(IEnumerator routine)
public Coroutine StartCoroutine(string methodName, object value)
public Coroutine StartCoroutine(string methodName)
public void StopCoroutine(string methodName)
public void StopCoroutine(IEnumerator routine)
public void StopCoroutine(Coroutine routine)
internal void StopCoroutineViaEnumerator_Auto(IEnumerator routine)
internal void StopCoroutine_Auto(Coroutine routine)
public void StopAllCoroutines()
public void print(object message)
public bool get_useGUILayout()
public void set_useGUILayout(bool value)
internal string GetScriptClassName()
}
public UnityEngine.Motion : Object {
public float averageDuration
public float averageAngularSpeed
public Vector3 averageSpeed
public float apparentSpeed
public bool isLooping
public bool legacy
public bool isHumanMotion
public bool isAnimatorMotion
public float get_averageDuration()
public float get_averageAngularSpeed()
public Vector3 get_averageSpeed()
private void INTERNAL_get_averageSpeed(Vector3& value)
public float get_apparentSpeed()
public bool get_isLooping()
public bool get_legacy()
public bool get_isHumanMotion()
public bool ValidateIfRetargetable(bool val)
public bool get_isAnimatorMotion()
}
public UnityEngine.MotionVectorGenerationMode : Enum {
public int value__
public MotionVectorGenerationMode Camera
public MotionVectorGenerationMode Object
public MotionVectorGenerationMode ForceNoMotion
}
public UnityEngine.MovieTexture : Texture {
public AudioClip audioClip
public bool loop
public bool isPlaying
public bool isReadyToPlay
public float duration
public void Play()
private void INTERNAL_CALL_Play(MovieTexture self)
public void Stop()
private void INTERNAL_CALL_Stop(MovieTexture self)
public void Pause()
private void INTERNAL_CALL_Pause(MovieTexture self)
public AudioClip get_audioClip()
public bool get_loop()
public void set_loop(bool value)
public bool get_isPlaying()
public bool get_isReadyToPlay()
public float get_duration()
}
public UnityEngine.MultilineAttribute : PropertyAttribute {
public int lines
public void .ctor(int lines)
}
public UnityEngine.NativeClassAttribute : Attribute {
private string <QualifiedNativeName>k__BackingField
public string QualifiedNativeName
public void .ctor(string qualifiedCppName)
public string get_QualifiedNativeName()
private void set_QualifiedNativeName(string value)
}
public UnityEngine.Network : object {
public string incomingPassword
public NetworkLogLevel logLevel
public NetworkPlayer[] connections
public NetworkPlayer player
public bool isClient
public bool isServer
public NetworkPeerType peerType
public float sendRate
public bool isMessageQueueRunning
public double time
public int minimumAllocatableViewIDs
public bool useNat
public string natFacilitatorIP
public int natFacilitatorPort
public string connectionTesterIP
public int connectionTesterPort
public int maxConnections
public string proxyIP
public int proxyPort
public bool useProxy
public string proxyPassword
public NetworkConnectionError InitializeServer(int connections, int listenPort, bool useNat)
private NetworkConnectionError Internal_InitializeServerDeprecated(int connections, int listenPort)
public NetworkConnectionError InitializeServer(int connections, int listenPort)
public string get_incomingPassword()
public void set_incomingPassword(string value)
public NetworkLogLevel get_logLevel()
public void set_logLevel(NetworkLogLevel value)
public void InitializeSecurity()
private NetworkConnectionError Internal_ConnectToSingleIP(string IP, int remotePort, int localPort, string password)
private NetworkConnectionError Internal_ConnectToSingleIP(string IP, int remotePort, int localPort)
private NetworkConnectionError Internal_ConnectToGuid(string guid, string password)
private NetworkConnectionError Internal_ConnectToIPs(String[] IP, int remotePort, int localPort, string password)
private NetworkConnectionError Internal_ConnectToIPs(String[] IP, int remotePort, int localPort)
public NetworkConnectionError Connect(string IP, int remotePort)
public NetworkConnectionError Connect(string IP, int remotePort, string password)
public NetworkConnectionError Connect(String[] IPs, int remotePort)
public NetworkConnectionError Connect(String[] IPs, int remotePort, string password)
public NetworkConnectionError Connect(string GUID)
public NetworkConnectionError Connect(string GUID, string password)
public NetworkConnectionError Connect(HostData hostData)
public NetworkConnectionError Connect(HostData hostData, string password)
public void Disconnect(int timeout)
public void Disconnect()
public void CloseConnection(NetworkPlayer target, bool sendDisconnectionNotification)
private void INTERNAL_CALL_CloseConnection(NetworkPlayer& target, bool sendDisconnectionNotification)
public NetworkPlayer[] get_connections()
private int Internal_GetPlayer()
public NetworkPlayer get_player()
private void Internal_AllocateViewID(NetworkViewID& viewID)
public NetworkViewID AllocateViewID()
public Object Instantiate(Object prefab, Vector3 position, Quaternion rotation, int group)
private Object INTERNAL_CALL_Instantiate(Object prefab, Vector3& position, Quaternion& rotation, int group)
public void Destroy(NetworkViewID viewID)
private void INTERNAL_CALL_Destroy(NetworkViewID& viewID)
public void Destroy(GameObject gameObject)
public void DestroyPlayerObjects(NetworkPlayer playerID)
private void INTERNAL_CALL_DestroyPlayerObjects(NetworkPlayer& playerID)
private void Internal_RemoveRPCs(NetworkPlayer playerID, NetworkViewID viewID, UInt32 channelMask)
private void INTERNAL_CALL_Internal_RemoveRPCs(NetworkPlayer& playerID, NetworkViewID& viewID, UInt32 channelMask)
public void RemoveRPCs(NetworkPlayer playerID)
public void RemoveRPCs(NetworkPlayer playerID, int group)
public void RemoveRPCs(NetworkViewID viewID)
public void RemoveRPCsInGroup(int group)
public bool get_isClient()
public bool get_isServer()
public NetworkPeerType get_peerType()
public void SetLevelPrefix(int prefix)
public int GetLastPing(NetworkPlayer player)
private int INTERNAL_CALL_GetLastPing(NetworkPlayer& player)
public int GetAveragePing(NetworkPlayer player)
private int INTERNAL_CALL_GetAveragePing(NetworkPlayer& player)
public float get_sendRate()
public void set_sendRate(float value)
public bool get_isMessageQueueRunning()
public void set_isMessageQueueRunning(bool value)
public void SetReceivingEnabled(NetworkPlayer player, int group, bool enabled)
private void INTERNAL_CALL_SetReceivingEnabled(NetworkPlayer& player, int group, bool enabled)
private void Internal_SetSendingGlobal(int group, bool enabled)
private void Internal_SetSendingSpecific(NetworkPlayer player, int group, bool enabled)
private void INTERNAL_CALL_Internal_SetSendingSpecific(NetworkPlayer& player, int group, bool enabled)
public void SetSendingEnabled(int group, bool enabled)
public void SetSendingEnabled(NetworkPlayer player, int group, bool enabled)
private void Internal_GetTime(Double& t)
public double get_time()
public int get_minimumAllocatableViewIDs()
public void set_minimumAllocatableViewIDs(int value)
public bool get_useNat()
public void set_useNat(bool value)
public string get_natFacilitatorIP()
public void set_natFacilitatorIP(string value)
public int get_natFacilitatorPort()
public void set_natFacilitatorPort(int value)
public ConnectionTesterStatus TestConnection(bool forceTest)
public ConnectionTesterStatus TestConnection()
public ConnectionTesterStatus TestConnectionNAT(bool forceTest)
public ConnectionTesterStatus TestConnectionNAT()
public string get_connectionTesterIP()
public void set_connectionTesterIP(string value)
public int get_connectionTesterPort()
public void set_connectionTesterPort(int value)
public bool HavePublicAddress()
public int get_maxConnections()
public void set_maxConnections(int value)
public string get_proxyIP()
public void set_proxyIP(string value)
public int get_proxyPort()
public void set_proxyPort(int value)
public bool get_useProxy()
public void set_useProxy(bool value)
public string get_proxyPassword()
public void set_proxyPassword(string value)
}
public UnityEngine.NetworkConnectionError : Enum {
public int value__
public NetworkConnectionError NoError
public NetworkConnectionError RSAPublicKeyMismatch
public NetworkConnectionError InvalidPassword
public NetworkConnectionError ConnectionFailed
public NetworkConnectionError TooManyConnectedPlayers
public NetworkConnectionError ConnectionBanned
public NetworkConnectionError AlreadyConnectedToServer
public NetworkConnectionError AlreadyConnectedToAnotherServer
public NetworkConnectionError CreateSocketOrThreadFailure
public NetworkConnectionError IncorrectParameters
public NetworkConnectionError EmptyConnectTarget
public NetworkConnectionError InternalDirectConnectFailed
public NetworkConnectionError NATTargetNotConnected
public NetworkConnectionError NATTargetConnectionLost
public NetworkConnectionError NATPunchthroughFailed
}
public UnityEngine.NetworkDisconnection : Enum {
public int value__
public NetworkDisconnection LostConnection
public NetworkDisconnection Disconnected
}
public UnityEngine.Networking.ChannelQOS : object {
internal QosType m_Type
public QosType QOS
public void .ctor(QosType value)
public void .ctor(ChannelQOS channel)
public QosType get_QOS()
}
public UnityEngine.Networking.ConnectionAcksType : Enum {
public int value__
public ConnectionAcksType Acks32
public ConnectionAcksType Acks64
public ConnectionAcksType Acks96
public ConnectionAcksType Acks128
}
public UnityEngine.Networking.ConnectionConfig : object {
private int g_MinPacketSize
private ushort m_PacketSize
private ushort m_FragmentSize
private UInt32 m_ResendTimeout
private UInt32 m_DisconnectTimeout
private UInt32 m_ConnectTimeout
private UInt32 m_MinUpdateTimeout
private UInt32 m_PingTimeout
private UInt32 m_ReducedPingTimeout
private UInt32 m_AllCostTimeout
private byte m_NetworkDropThreshold
private byte m_OverflowDropThreshold
private byte m_MaxConnectionAttempt
private UInt32 m_AckDelay
private UInt32 m_SendDelay
private ushort m_MaxCombinedReliableMessageSize
private ushort m_MaxCombinedReliableMessageCount
private ushort m_MaxSentMessageQueueSize
private ConnectionAcksType m_AcksType
private bool m_UsePlatformSpecificProtocols
private UInt32 m_InitialBandwidth
private float m_BandwidthPeakFactor
private ushort m_WebSocketReceiveBufferMaxSize
private UInt32 m_UdpSocketReceiveBufferMaxSize
private string m_SSLCertFilePath
private string m_SSLPrivateKeyFilePath
private string m_SSLCAFilePath
internal List`1<ChannelQOS> m_Channels
public ushort PacketSize
public ushort FragmentSize
public UInt32 ResendTimeout
public UInt32 DisconnectTimeout
public UInt32 ConnectTimeout
public UInt32 MinUpdateTimeout
public UInt32 PingTimeout
public UInt32 ReducedPingTimeout
public UInt32 AllCostTimeout
public byte NetworkDropThreshold
public byte OverflowDropThreshold
public byte MaxConnectionAttempt
public UInt32 AckDelay
public UInt32 SendDelay
public ushort MaxCombinedReliableMessageSize
public ushort MaxCombinedReliableMessageCount
public ushort MaxSentMessageQueueSize
public ConnectionAcksType AcksType
public bool IsAcksLong
public bool UsePlatformSpecificProtocols
public UInt32 InitialBandwidth
public float BandwidthPeakFactor
public ushort WebSocketReceiveBufferMaxSize
public UInt32 UdpSocketReceiveBufferMaxSize
public string SSLCertFilePath
public string SSLPrivateKeyFilePath
public string SSLCAFilePath
public int ChannelCount
public List`1<ChannelQOS> Channels
public void .ctor(ConnectionConfig config)
public void Validate(ConnectionConfig config)
public ushort get_PacketSize()
public void set_PacketSize(ushort value)
public ushort get_FragmentSize()
public void set_FragmentSize(ushort value)
public UInt32 get_ResendTimeout()
public void set_ResendTimeout(UInt32 value)
public UInt32 get_DisconnectTimeout()
public void set_DisconnectTimeout(UInt32 value)
public UInt32 get_ConnectTimeout()
public void set_ConnectTimeout(UInt32 value)
public UInt32 get_MinUpdateTimeout()
public void set_MinUpdateTimeout(UInt32 value)
public UInt32 get_PingTimeout()
public void set_PingTimeout(UInt32 value)
public UInt32 get_ReducedPingTimeout()
public void set_ReducedPingTimeout(UInt32 value)
public UInt32 get_AllCostTimeout()
public void set_AllCostTimeout(UInt32 value)
public byte get_NetworkDropThreshold()
public void set_NetworkDropThreshold(byte value)
public byte get_OverflowDropThreshold()
public void set_OverflowDropThreshold(byte value)
public byte get_MaxConnectionAttempt()
public void set_MaxConnectionAttempt(byte value)
public UInt32 get_AckDelay()
public void set_AckDelay(UInt32 value)
public UInt32 get_SendDelay()
public void set_SendDelay(UInt32 value)
public ushort get_MaxCombinedReliableMessageSize()
public void set_MaxCombinedReliableMessageSize(ushort value)
public ushort get_MaxCombinedReliableMessageCount()
public void set_MaxCombinedReliableMessageCount(ushort value)
public ushort get_MaxSentMessageQueueSize()
public void set_MaxSentMessageQueueSize(ushort value)
public ConnectionAcksType get_AcksType()
public void set_AcksType(ConnectionAcksType value)
public bool get_IsAcksLong()
public void set_IsAcksLong(bool value)
public bool get_UsePlatformSpecificProtocols()
public void set_UsePlatformSpecificProtocols(bool value)
public UInt32 get_InitialBandwidth()
public void set_InitialBandwidth(UInt32 value)
public float get_BandwidthPeakFactor()
public void set_BandwidthPeakFactor(float value)
public ushort get_WebSocketReceiveBufferMaxSize()
public void set_WebSocketReceiveBufferMaxSize(ushort value)
public UInt32 get_UdpSocketReceiveBufferMaxSize()
public void set_UdpSocketReceiveBufferMaxSize(UInt32 value)
public string get_SSLCertFilePath()
public void set_SSLCertFilePath(string value)
public string get_SSLPrivateKeyFilePath()
public void set_SSLPrivateKeyFilePath(string value)
public string get_SSLCAFilePath()
public void set_SSLCAFilePath(string value)
public int get_ChannelCount()
public byte AddChannel(QosType value)
public QosType GetChannel(byte idx)
public List`1<ChannelQOS> get_Channels()
}
internal UnityEngine.Networking.ConnectionConfigInternal : object {
internal IntPtr m_Ptr
public int ChannelSize
public void .ctor(ConnectionConfig config)
public void InitWrapper()
public byte AddChannel(QosType value)
public QosType GetChannel(int i)
public int get_ChannelSize()
public void InitPacketSize(ushort value)
public void InitFragmentSize(ushort value)
public void InitResendTimeout(UInt32 value)
public void InitDisconnectTimeout(UInt32 value)
public void InitConnectTimeout(UInt32 value)
public void InitMinUpdateTimeout(UInt32 value)
public void InitPingTimeout(UInt32 value)
public void InitReducedPingTimeout(UInt32 value)
public void InitAllCostTimeout(UInt32 value)
public void InitNetworkDropThreshold(byte value)
public void InitOverflowDropThreshold(byte value)
public void InitMaxConnectionAttempt(byte value)
public void InitAckDelay(UInt32 value)
public void InitSendDelay(UInt32 value)
public void InitMaxCombinedReliableMessageSize(ushort value)
public void InitMaxCombinedReliableMessageCount(ushort value)
public void InitMaxSentMessageQueueSize(ushort value)
public void InitAcksType(int value)
public void InitUsePlatformSpecificProtocols(bool value)
public void InitInitialBandwidth(UInt32 value)
public void InitBandwidthPeakFactor(float value)
public void InitWebSocketReceiveBufferMaxSize(ushort value)
public void InitUdpSocketReceiveBufferMaxSize(UInt32 value)
public int InitSSLCertFilePath(string value)
public int InitSSLPrivateKeyFilePath(string value)
public int InitSSLCAFilePath(string value)
public void Dispose()
protected void Finalize()
}
public UnityEngine.Networking.ConnectionSimulatorConfig : object {
internal IntPtr m_Ptr
public void .ctor(int outMinDelay, int outAvgDelay, int inMinDelay, int inAvgDelay, float packetLossPercentage)
public void Dispose()
protected void Finalize()
}
public UnityEngine.Networking.DownloadHandler : object {
internal IntPtr m_Ptr
public bool isDone
public Byte[] data
public string text
internal void InternalCreateBuffer()
internal void InternalCreateScript()
internal void InternalCreateAssetBundle(string url, UInt32 crc)
internal void InternalCreateAssetBundleCached(string url, string name, Hash128 hash, UInt32 crc)
private void INTERNAL_CALL_InternalCreateAssetBundleCached(DownloadHandler self, string url, string name, Hash128& hash, UInt32 crc)
private void InternalDestroy()
protected void Finalize()
public void Dispose()
public bool get_isDone()
public Byte[] get_data()
public string get_text()
protected Byte[] GetData()
protected string GetText()
private Encoding GetTextEncoder()
private string GetContentType()
protected bool ReceiveData(Byte[] data, int dataLength)
protected void ReceiveContentLength(int contentLength)
protected void CompleteContent()
protected float GetProgress()
protected T GetCheckedDownloader(UnityWebRequest www)
}
public UnityEngine.Networking.DownloadHandlerAssetBundle : DownloadHandler {
public AssetBundle assetBundle
public void .ctor(string url, UInt32 crc)
public void .ctor(string url, UInt32 version, UInt32 crc)
public void .ctor(string url, Hash128 hash, UInt32 crc)
public void .ctor(string url, string name, Hash128 hash, UInt32 crc)
protected Byte[] GetData()
protected string GetText()
public AssetBundle get_assetBundle()
public AssetBundle GetContent(UnityWebRequest www)
}
public UnityEngine.Networking.DownloadHandlerAudioClip : DownloadHandler {
public AudioClip audioClip
public void .ctor(string url, AudioType audioType)
internal void InternalCreateAudioClip(string url, AudioType audioType)
protected Byte[] GetData()
protected string GetText()
private Byte[] InternalGetData()
public AudioClip get_audioClip()
public AudioClip GetContent(UnityWebRequest www)
}
public UnityEngine.Networking.DownloadHandlerBuffer : DownloadHandler {
protected Byte[] GetData()
private Byte[] InternalGetData()
public string GetContent(UnityWebRequest www)
}
public UnityEngine.Networking.DownloadHandlerMovieTexture : DownloadHandler {
public MovieTexture movieTexture
internal void InternalCreateDHMovieTexture()
protected Byte[] GetData()
protected string GetText()
private Byte[] InternalGetData()
public MovieTexture get_movieTexture()
public MovieTexture GetContent(UnityWebRequest uwr)
}
public UnityEngine.Networking.DownloadHandlerScript : DownloadHandler {
public void .ctor(Byte[] preallocatedBuffer)
private void InternalSetPreallocatedBuffer(Byte[] buffer)
}
public UnityEngine.Networking.DownloadHandlerTexture : DownloadHandler {
private Texture2D mTexture
private bool mHasTexture
private bool mNonReadable
public Texture2D texture
public void .ctor(bool readable)
internal void InternalCreateTexture(bool readable)
protected Byte[] GetData()
public Texture2D get_texture()
private Texture2D InternalGetTexture()
private Texture2D InternalGetTextureNative()
private Byte[] InternalGetData()
public Texture2D GetContent(UnityWebRequest www)
}
public UnityEngine.Networking.GlobalConfig : object {
private UInt32 g_MaxTimerTimeout
private UInt32 g_MaxNetSimulatorTimeout
private ushort g_MaxHosts
private UInt32 m_ThreadAwakeTimeout
private ReactorModel m_ReactorModel
private ushort m_ReactorMaximumReceivedMessages
private ushort m_ReactorMaximumSentMessages
private ushort m_MaxPacketSize
private ushort m_MaxHosts
private byte m_ThreadPoolSize
private UInt32 m_MinTimerTimeout
private UInt32 m_MaxTimerTimeout
private UInt32 m_MinNetSimulatorTimeout
private UInt32 m_MaxNetSimulatorTimeout
public UInt32 ThreadAwakeTimeout
public ReactorModel ReactorModel
public ushort ReactorMaximumReceivedMessages
public ushort ReactorMaximumSentMessages
public ushort MaxPacketSize
public ushort MaxHosts
public byte ThreadPoolSize
public UInt32 MinTimerTimeout
public UInt32 MaxTimerTimeout
public UInt32 MinNetSimulatorTimeout
public UInt32 MaxNetSimulatorTimeout
public UInt32 get_ThreadAwakeTimeout()
public void set_ThreadAwakeTimeout(UInt32 value)
public ReactorModel get_ReactorModel()
public void set_ReactorModel(ReactorModel value)
public ushort get_ReactorMaximumReceivedMessages()
public void set_ReactorMaximumReceivedMessages(ushort value)
public ushort get_ReactorMaximumSentMessages()
public void set_ReactorMaximumSentMessages(ushort value)
public ushort get_MaxPacketSize()
public void set_MaxPacketSize(ushort value)
public ushort get_MaxHosts()
public void set_MaxHosts(ushort value)
public byte get_ThreadPoolSize()
public void set_ThreadPoolSize(byte value)
public UInt32 get_MinTimerTimeout()
public void set_MinTimerTimeout(UInt32 value)
public UInt32 get_MaxTimerTimeout()
public void set_MaxTimerTimeout(UInt32 value)
public UInt32 get_MinNetSimulatorTimeout()
public void set_MinNetSimulatorTimeout(UInt32 value)
public UInt32 get_MaxNetSimulatorTimeout()
public void set_MaxNetSimulatorTimeout(UInt32 value)
}
internal UnityEngine.Networking.GlobalConfigInternal : object {
internal IntPtr m_Ptr
public void .ctor(GlobalConfig config)
public void InitWrapper()
public void InitThreadAwakeTimeout(UInt32 ms)
public void InitReactorModel(byte model)
public void InitReactorMaximumReceivedMessages(ushort size)
public void InitReactorMaximumSentMessages(ushort size)
public void InitMaxPacketSize(ushort size)
public void InitMaxHosts(ushort size)
public void InitThreadPoolSize(byte size)
public void InitMinTimerTimeout(UInt32 ms)
public void InitMaxTimerTimeout(UInt32 ms)
public void InitMinNetSimulatorTimeout(UInt32 ms)
public void InitMaxNetSimulatorTimeout(UInt32 ms)
public void Dispose()
protected void Finalize()
}
public UnityEngine.Networking.HostTopology : object {
private ConnectionConfig m_DefConfig
private int m_MaxDefConnections
private List`1<ConnectionConfig> m_SpecialConnections
private ushort m_ReceivedMessagePoolSize
private ushort m_SentMessagePoolSize
private float m_MessagePoolSizeGrowthFactor
public ConnectionConfig DefaultConfig
public int MaxDefaultConnections
public int SpecialConnectionConfigsCount
public List`1<ConnectionConfig> SpecialConnectionConfigs
public ushort ReceivedMessagePoolSize
public ushort SentMessagePoolSize
public float MessagePoolSizeGrowthFactor
public void .ctor(ConnectionConfig defaultConfig, int maxDefaultConnections)
public ConnectionConfig get_DefaultConfig()
public int get_MaxDefaultConnections()
public int get_SpecialConnectionConfigsCount()
public List`1<ConnectionConfig> get_SpecialConnectionConfigs()
public ConnectionConfig GetSpecialConnectionConfig(int i)
public ushort get_ReceivedMessagePoolSize()
public void set_ReceivedMessagePoolSize(ushort value)
public ushort get_SentMessagePoolSize()
public void set_SentMessagePoolSize(ushort value)
public float get_MessagePoolSizeGrowthFactor()
public void set_MessagePoolSizeGrowthFactor(float value)
public int AddSpecialConnectionConfig(ConnectionConfig config)
}
internal UnityEngine.Networking.HostTopologyInternal : object {
internal IntPtr m_Ptr
public void .ctor(HostTopology topology)
public void InitWrapper(ConnectionConfigInternal config, int maxDefaultConnections)
private int AddSpecialConnectionConfig(ConnectionConfigInternal config)
public int AddSpecialConnectionConfigWrapper(ConnectionConfigInternal config)
private void InitOtherParameters(HostTopology topology)
public void InitReceivedPoolSize(ushort pool)
public void InitSentMessagePoolSize(ushort pool)
public void InitMessagePoolSizeGrowthFactor(float factor)
public void Dispose()
protected void Finalize()
}
public UnityEngine.Networking.IMultipartFormSection {
public string sectionName
public Byte[] sectionData
public string fileName
public string contentType
public string get_sectionName()
public Byte[] get_sectionData()
public string get_fileName()
public string get_contentType()
}
internal UnityEngine.Networking.Match.CreateMatchRequest : Request {
private string <name>k__BackingField
private UInt32 <size>k__BackingField
private string <publicAddress>k__BackingField
private string <privateAddress>k__BackingField
private int <eloScore>k__BackingField
private bool <advertise>k__BackingField
private string <password>k__BackingField
private Dictionary`2<string, long> <matchAttributes>k__BackingField
public string name
public UInt32 size
public string publicAddress
public string privateAddress
public int eloScore
public bool advertise
public string password
public Dictionary`2<string, long> matchAttributes
public string get_name()
public void set_name(string value)
public UInt32 get_size()
public void set_size(UInt32 value)
public string get_publicAddress()
public void set_publicAddress(string value)
public string get_privateAddress()
public void set_privateAddress(string value)
public int get_eloScore()
public void set_eloScore(int value)
public bool get_advertise()
public void set_advertise(bool value)
public string get_password()
public void set_password(string value)
public Dictionary`2<string, long> get_matchAttributes()
public void set_matchAttributes(Dictionary`2<string, long> value)
public string ToString()
public bool IsValid()
}
internal UnityEngine.Networking.Match.CreateMatchResponse : BasicResponse {
private string <address>k__BackingField
private int <port>k__BackingField
private int <domain>k__BackingField
private NetworkID <networkId>k__BackingField
private string <accessTokenString>k__BackingField
private NodeID <nodeId>k__BackingField
private bool <usingRelay>k__BackingField
public string address
public int port
public int domain
public NetworkID networkId
public string accessTokenString
public NodeID nodeId
public bool usingRelay
public string get_address()
public void set_address(string value)
public int get_port()
public void set_port(int value)
public int get_domain()
public void set_domain(int value)
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public string get_accessTokenString()
public void set_accessTokenString(string value)
public NodeID get_nodeId()
public void set_nodeId(NodeID value)
public bool get_usingRelay()
public void set_usingRelay(bool value)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.DestroyMatchRequest : Request {
private NetworkID <networkId>k__BackingField
public NetworkID networkId
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public string ToString()
public bool IsValid()
}
internal UnityEngine.Networking.Match.DropConnectionRequest : Request {
private NetworkID <networkId>k__BackingField
private NodeID <nodeId>k__BackingField
public NetworkID networkId
public NodeID nodeId
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public NodeID get_nodeId()
public void set_nodeId(NodeID value)
public string ToString()
public bool IsValid()
}
internal UnityEngine.Networking.Match.DropConnectionResponse : Response {
private NetworkID <networkId>k__BackingField
private NodeID <nodeId>k__BackingField
public NetworkID networkId
public NodeID nodeId
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public NodeID get_nodeId()
public void set_nodeId(NodeID value)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.IResponse {
public void SetSuccess()
public void SetFailure(string info)
}
internal UnityEngine.Networking.Match.JoinMatchRequest : Request {
private NetworkID <networkId>k__BackingField
private string <publicAddress>k__BackingField
private string <privateAddress>k__BackingField
private int <eloScore>k__BackingField
private string <password>k__BackingField
public NetworkID networkId
public string publicAddress
public string privateAddress
public int eloScore
public string password
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public string get_publicAddress()
public void set_publicAddress(string value)
public string get_privateAddress()
public void set_privateAddress(string value)
public int get_eloScore()
public void set_eloScore(int value)
public string get_password()
public void set_password(string value)
public string ToString()
public bool IsValid()
}
internal UnityEngine.Networking.Match.JoinMatchResponse : BasicResponse {
private string <address>k__BackingField
private int <port>k__BackingField
private int <domain>k__BackingField
private NetworkID <networkId>k__BackingField
private string <accessTokenString>k__BackingField
private NodeID <nodeId>k__BackingField
private bool <usingRelay>k__BackingField
public string address
public int port
public int domain
public NetworkID networkId
public string accessTokenString
public NodeID nodeId
public bool usingRelay
public string get_address()
public void set_address(string value)
public int get_port()
public void set_port(int value)
public int get_domain()
public void set_domain(int value)
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public string get_accessTokenString()
public void set_accessTokenString(string value)
public NodeID get_nodeId()
public void set_nodeId(NodeID value)
public bool get_usingRelay()
public void set_usingRelay(bool value)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.ListMatchRequest : Request {
private int <pageSize>k__BackingField
private int <pageNum>k__BackingField
private string <nameFilter>k__BackingField
private bool <filterOutPrivateMatches>k__BackingField
private int <eloScore>k__BackingField
private Dictionary`2<string, long> <matchAttributeFilterLessThan>k__BackingField
private Dictionary`2<string, long> <matchAttributeFilterEqualTo>k__BackingField
private Dictionary`2<string, long> <matchAttributeFilterGreaterThan>k__BackingField
public bool includePasswordMatches
public int pageSize
public int pageNum
public string nameFilter
public bool filterOutPrivateMatches
public int eloScore
public Dictionary`2<string, long> matchAttributeFilterLessThan
public Dictionary`2<string, long> matchAttributeFilterEqualTo
public Dictionary`2<string, long> matchAttributeFilterGreaterThan
public int get_pageSize()
public void set_pageSize(int value)
public int get_pageNum()
public void set_pageNum(int value)
public string get_nameFilter()
public void set_nameFilter(string value)
public bool get_filterOutPrivateMatches()
public void set_filterOutPrivateMatches(bool value)
public int get_eloScore()
public void set_eloScore(int value)
public Dictionary`2<string, long> get_matchAttributeFilterLessThan()
public void set_matchAttributeFilterLessThan(Dictionary`2<string, long> value)
public Dictionary`2<string, long> get_matchAttributeFilterEqualTo()
public void set_matchAttributeFilterEqualTo(Dictionary`2<string, long> value)
public Dictionary`2<string, long> get_matchAttributeFilterGreaterThan()
public void set_matchAttributeFilterGreaterThan(Dictionary`2<string, long> value)
public string ToString()
public bool IsValid()
}
internal UnityEngine.Networking.Match.ListMatchResponse : BasicResponse {
private List`1<MatchDesc> <matches>k__BackingField
public List`1<MatchDesc> matches
public void .ctor(List`1<MatchDesc> otherMatches)
public List`1<MatchDesc> get_matches()
public void set_matches(List`1<MatchDesc> value)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.MatchDesc : ResponseBase {
private NetworkID <networkId>k__BackingField
private string <name>k__BackingField
private int <averageEloScore>k__BackingField
private int <maxSize>k__BackingField
private int <currentSize>k__BackingField
private bool <isPrivate>k__BackingField
private Dictionary`2<string, long> <matchAttributes>k__BackingField
private NodeID <hostNodeId>k__BackingField
private List`1<MatchDirectConnectInfo> <directConnectInfos>k__BackingField
public NetworkID networkId
public string name
public int averageEloScore
public int maxSize
public int currentSize
public bool isPrivate
public Dictionary`2<string, long> matchAttributes
public NodeID hostNodeId
public List`1<MatchDirectConnectInfo> directConnectInfos
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public string get_name()
public void set_name(string value)
public int get_averageEloScore()
public void set_averageEloScore(int value)
public int get_maxSize()
public void set_maxSize(int value)
public int get_currentSize()
public void set_currentSize(int value)
public bool get_isPrivate()
public void set_isPrivate(bool value)
public Dictionary`2<string, long> get_matchAttributes()
public void set_matchAttributes(Dictionary`2<string, long> value)
public NodeID get_hostNodeId()
public void set_hostNodeId(NodeID value)
public List`1<MatchDirectConnectInfo> get_directConnectInfos()
public void set_directConnectInfos(List`1<MatchDirectConnectInfo> value)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.MatchDirectConnectInfo : ResponseBase {
private NodeID <nodeId>k__BackingField
private string <publicAddress>k__BackingField
private string <privateAddress>k__BackingField
private HostPriority <hostPriority>k__BackingField
public NodeID nodeId
public string publicAddress
public string privateAddress
public HostPriority hostPriority
public NodeID get_nodeId()
public void set_nodeId(NodeID value)
public string get_publicAddress()
public void set_publicAddress(string value)
public string get_privateAddress()
public void set_privateAddress(string value)
public HostPriority get_hostPriority()
public void set_hostPriority(HostPriority value)
public string ToString()
public void Parse(object obj)
}
public UnityEngine.Networking.Match.MatchInfo : object {
private string <address>k__BackingField
private int <port>k__BackingField
private int <domain>k__BackingField
private NetworkID <networkId>k__BackingField
private NetworkAccessToken <accessToken>k__BackingField
private NodeID <nodeId>k__BackingField
private bool <usingRelay>k__BackingField
public string address
public int port
public int domain
public NetworkID networkId
public NetworkAccessToken accessToken
public NodeID nodeId
public bool usingRelay
internal void .ctor(CreateMatchResponse matchResponse)
internal void .ctor(JoinMatchResponse matchResponse)
public string get_address()
private void set_address(string value)
public int get_port()
private void set_port(int value)
public int get_domain()
private void set_domain(int value)
public NetworkID get_networkId()
private void set_networkId(NetworkID value)
public NetworkAccessToken get_accessToken()
private void set_accessToken(NetworkAccessToken value)
public NodeID get_nodeId()
private void set_nodeId(NodeID value)
public bool get_usingRelay()
private void set_usingRelay(bool value)
public string ToString()
}
public UnityEngine.Networking.Match.MatchInfoSnapshot : object {
private NetworkID <networkId>k__BackingField
private NodeID <hostNodeId>k__BackingField
private string <name>k__BackingField
private int <averageEloScore>k__BackingField
private int <maxSize>k__BackingField
private int <currentSize>k__BackingField
private bool <isPrivate>k__BackingField
private Dictionary`2<string, long> <matchAttributes>k__BackingField
private List`1<MatchInfoDirectConnectSnapshot> <directConnectInfos>k__BackingField
public NetworkID networkId
public NodeID hostNodeId
public string name
public int averageEloScore
public int maxSize
public int currentSize
public bool isPrivate
public Dictionary`2<string, long> matchAttributes
public List`1<MatchInfoDirectConnectSnapshot> directConnectInfos
internal void .ctor(MatchDesc matchDesc)
public NetworkID get_networkId()
private void set_networkId(NetworkID value)
public NodeID get_hostNodeId()
private void set_hostNodeId(NodeID value)
public string get_name()
private void set_name(string value)
public int get_averageEloScore()
private void set_averageEloScore(int value)
public int get_maxSize()
private void set_maxSize(int value)
public int get_currentSize()
private void set_currentSize(int value)
public bool get_isPrivate()
private void set_isPrivate(bool value)
public Dictionary`2<string, long> get_matchAttributes()
private void set_matchAttributes(Dictionary`2<string, long> value)
public List`1<MatchInfoDirectConnectSnapshot> get_directConnectInfos()
private void set_directConnectInfos(List`1<MatchInfoDirectConnectSnapshot> value)
}
public UnityEngine.Networking.Match.NetworkMatch : MonoBehaviour {
private Uri m_BaseUri
public Uri baseUri
public Uri get_baseUri()
public void set_baseUri(Uri value)
public void SetProgramAppID(AppID programAppID)
public Coroutine CreateMatch(string matchName, UInt32 matchSize, bool matchAdvertise, string matchPassword, string publicClientAddress, string privateClientAddress, int eloScoreForMatch, int requestDomain, DataResponseDelegate`1<MatchInfo> callback)
internal Coroutine CreateMatch(CreateMatchRequest req, DataResponseDelegate`1<MatchInfo> callback)
internal void OnMatchCreate(CreateMatchResponse response, DataResponseDelegate`1<MatchInfo> userCallback)
public Coroutine JoinMatch(NetworkID netId, string matchPassword, string publicClientAddress, string privateClientAddress, int eloScoreForClient, int requestDomain, DataResponseDelegate`1<MatchInfo> callback)
internal Coroutine JoinMatch(JoinMatchRequest req, DataResponseDelegate`1<MatchInfo> callback)
internal void OnMatchJoined(JoinMatchResponse response, DataResponseDelegate`1<MatchInfo> userCallback)
public Coroutine DestroyMatch(NetworkID netId, int requestDomain, BasicResponseDelegate callback)
internal Coroutine DestroyMatch(DestroyMatchRequest req, BasicResponseDelegate callback)
internal void OnMatchDestroyed(BasicResponse response, BasicResponseDelegate userCallback)
public Coroutine DropConnection(NetworkID netId, NodeID dropNodeId, int requestDomain, BasicResponseDelegate callback)
internal Coroutine DropConnection(DropConnectionRequest req, BasicResponseDelegate callback)
internal void OnDropConnection(DropConnectionResponse response, BasicResponseDelegate userCallback)
public Coroutine ListMatches(int startPageNumber, int resultPageSize, string matchNameFilter, bool filterOutPrivateMatchesFromResults, int eloScoreTarget, int requestDomain, DataResponseDelegate`1<List`1<MatchInfoSnapshot>> callback)
internal Coroutine ListMatches(ListMatchRequest req, DataResponseDelegate`1<List`1<MatchInfoSnapshot>> callback)
internal void OnMatchList(ListMatchResponse response, DataResponseDelegate`1<List`1<MatchInfoSnapshot>> userCallback)
public Coroutine SetMatchAttributes(NetworkID networkId, bool isListed, int requestDomain, BasicResponseDelegate callback)
internal Coroutine SetMatchAttributes(SetMatchAttributesRequest req, BasicResponseDelegate callback)
internal void OnSetMatchAttributes(BasicResponse response, BasicResponseDelegate userCallback)
private IEnumerator ProcessMatchResponse(WWW client, InternalResponseDelegate`2<JSONRESPONSE, USERRESPONSEDELEGATETYPE> internalCallback, USERRESPONSEDELEGATETYPE userCallback)
}
internal UnityEngine.Networking.Match.Request : object {
public int currentVersion
private int <version>k__BackingField
private SourceID <sourceId>k__BackingField
private string <projectId>k__BackingField
private AppID <appId>k__BackingField
private string <accessTokenString>k__BackingField
private int <domain>k__BackingField
public int version
public SourceID sourceId
public string projectId
public AppID appId
public string accessTokenString
public int domain
public int get_version()
public void set_version(int value)
public SourceID get_sourceId()
public void set_sourceId(SourceID value)
public string get_projectId()
public void set_projectId(string value)
public AppID get_appId()
public void set_appId(AppID value)
public string get_accessTokenString()
public void set_accessTokenString(string value)
public int get_domain()
public void set_domain(int value)
public bool IsValid()
public string ToString()
}
internal UnityEngine.Networking.Match.Response : ResponseBase {
private bool <success>k__BackingField
private string <extendedInfo>k__BackingField
public bool success
public string extendedInfo
public bool get_success()
private void set_success(bool value)
public string get_extendedInfo()
private void set_extendedInfo(string value)
public void SetSuccess()
public void SetFailure(string info)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.ResponseBase : object {
public void Parse(object obj)
public string ParseJSONString(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public short ParseJSONInt16(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public int ParseJSONInt32(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public long ParseJSONInt64(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public ushort ParseJSONUInt16(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public UInt32 ParseJSONUInt32(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public ulong ParseJSONUInt64(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public bool ParseJSONBool(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public DateTime ParseJSONDateTime(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public List`1<string> ParseJSONListOfStrings(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public List`1<T> ParseJSONList(string name, object obj, IDictionary`2<string, object> dictJsonObj)
}
internal UnityEngine.Networking.Match.SetMatchAttributesRequest : Request {
private NetworkID <networkId>k__BackingField
private bool <isListed>k__BackingField
public NetworkID networkId
public bool isListed
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public bool get_isListed()
public void set_isListed(bool value)
public string ToString()
public bool IsValid()
}
public UnityEngine.Networking.MultipartFormDataSection : object {
private string name
private Byte[] data
private string content
public string sectionName
public Byte[] sectionData
public string fileName
public string contentType
public void .ctor(string name, Byte[] data, string contentType)
public void .ctor(string name, Byte[] data)
public void .ctor(Byte[] data)
public void .ctor(string name, string data, Encoding encoding, string contentType)
public void .ctor(string name, string data, string contentType)
public void .ctor(string name, string data)
public void .ctor(string data)
public string get_sectionName()
public Byte[] get_sectionData()
public string get_fileName()
public string get_contentType()
}
public UnityEngine.Networking.MultipartFormFileSection : object {
private string name
private Byte[] data
private string file
private string content
public string sectionName
public Byte[] sectionData
public string fileName
public string contentType
public void .ctor(string name, Byte[] data, string fileName, string contentType)
public void .ctor(Byte[] data)
public void .ctor(string fileName, Byte[] data)
public void .ctor(string name, string data, Encoding dataEncoding, string fileName)
public void .ctor(string data, Encoding dataEncoding, string fileName)
public void .ctor(string data, string fileName)
private void Init(string name, Byte[] data, string fileName, string contentType)
public string get_sectionName()
public Byte[] get_sectionData()
public string get_fileName()
public string get_contentType()
}
public UnityEngine.Networking.NetworkError : Enum {
public int value__
public NetworkError Ok
public NetworkError WrongHost
public NetworkError WrongConnection
public NetworkError WrongChannel
public NetworkError NoResources
public NetworkError BadMessage
public NetworkError Timeout
public NetworkError MessageToLong
public NetworkError WrongOperation
public NetworkError VersionMismatch
public NetworkError CRCMismatch
public NetworkError DNSFailure
public NetworkError UsageError
}
public UnityEngine.Networking.NetworkEventType : Enum {
public int value__
public NetworkEventType DataEvent
public NetworkEventType ConnectEvent
public NetworkEventType DisconnectEvent
public NetworkEventType Nothing
public NetworkEventType BroadcastEvent
}
public UnityEngine.Networking.NetworkTransport : object {
public bool IsStarted
internal bool DoesEndPointUsePlatformProtocols(EndPoint endPoint)
public int ConnectEndPoint(int hostId, EndPoint endPoint, int exceptionConnectionId, Byte& error)
public void Init()
public void Init(GlobalConfig config)
private void InitWithNoParameters()
private void InitWithParameters(GlobalConfigInternal config)
public void Shutdown()
public string GetAssetId(GameObject go)
public void AddSceneId(int id)
public int GetNextSceneId()
public void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, Byte& error)
public void DisconnectNetworkHost(int hostId, Byte& error)
public NetworkEventType ReceiveRelayEventFromHost(int hostId, Byte& error)
public int ConnectToNetworkPeer(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, int bytesPerSec, float bucketSizeFactor, Byte& error)
public int ConnectToNetworkPeer(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, Byte& error)
public int GetCurrentIncomingMessageAmount()
public int GetCurrentOutgoingMessageAmount()
public int GetIncomingMessageQueueSize(int hostId, Byte& error)
public int GetOutgoingMessageQueueSize(int hostId, Byte& error)
public int GetCurrentRTT(int hostId, int connectionId, Byte& error)
public int GetCurrentRtt(int hostId, int connectionId, Byte& error)
public int GetIncomingPacketLossCount(int hostId, int connectionId, Byte& error)
public int GetNetworkLostPacketNum(int hostId, int connectionId, Byte& error)
public int GetIncomingPacketCount(int hostId, int connectionId, Byte& error)
public int GetOutgoingPacketNetworkLossPercent(int hostId, int connectionId, Byte& error)
public int GetOutgoingPacketOverflowLossPercent(int hostId, int connectionId, Byte& error)
public int GetMaxAllowedBandwidth(int hostId, int connectionId, Byte& error)
public int GetAckBufferCount(int hostId, int connectionId, Byte& error)
public int GetIncomingPacketDropCountForAllHosts()
public int GetIncomingPacketCountForAllHosts()
public int GetOutgoingPacketCount()
public int GetOutgoingPacketCountForHost(int hostId, Byte& error)
public int GetOutgoingPacketCountForConnection(int hostId, int connectionId, Byte& error)
public int GetOutgoingMessageCount()
public int GetOutgoingMessageCountForHost(int hostId, Byte& error)
public int GetOutgoingMessageCountForConnection(int hostId, int connectionId, Byte& error)
public int GetOutgoingUserBytesCount()
public int GetOutgoingUserBytesCountForHost(int hostId, Byte& error)
public int GetOutgoingUserBytesCountForConnection(int hostId, int connectionId, Byte& error)
public int GetOutgoingSystemBytesCount()
public int GetOutgoingSystemBytesCountForHost(int hostId, Byte& error)
public int GetOutgoingSystemBytesCountForConnection(int hostId, int connectionId, Byte& error)
public int GetOutgoingFullBytesCount()
public int GetOutgoingFullBytesCountForHost(int hostId, Byte& error)
public int GetOutgoingFullBytesCountForConnection(int hostId, int connectionId, Byte& error)
public int GetPacketSentRate(int hostId, int connectionId, Byte& error)
public int GetPacketReceivedRate(int hostId, int connectionId, Byte& error)
public int GetRemotePacketReceivedRate(int hostId, int connectionId, Byte& error)
public int GetNetIOTimeuS()
public void GetConnectionInfo(int hostId, int connectionId, String& address, Int32& port, NetworkID& network, NodeID& dstNode, Byte& error)
public string GetConnectionInfo(int hostId, int connectionId, Int32& port, UInt64& network, UInt16& dstNode, Byte& error)
public int GetNetworkTimestamp()
public int GetRemoteDelayTimeMS(int hostId, int connectionId, int remoteTime, Byte& error)
public bool StartSendMulticast(int hostId, int channelId, Byte[] buffer, int size, Byte& error)
public bool SendMulticast(int hostId, int connectionId, Byte& error)
public bool FinishSendMulticast(int hostId, Byte& error)
private int GetMaxPacketSize()
private void CheckTopology(HostTopology topology)
private int AddWsHostWrapper(HostTopologyInternal topologyInt, string ip, int port)
private int AddWsHostWrapperWithoutIp(HostTopologyInternal topologyInt, int port)
public int AddWebsocketHost(HostTopology topology, int port)
public int AddWebsocketHost(HostTopology topology, int port, string ip)
private int AddHostWrapper(HostTopologyInternal topologyInt, string ip, int port, int minTimeout, int maxTimeout)
private int AddHostWrapperWithoutIp(HostTopologyInternal topologyInt, int port, int minTimeout, int maxTimeout)
public int AddHost(HostTopology topology, int port)
public int AddHost(HostTopology topology)
public int AddHost(HostTopology topology, int port, string ip)
public int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port)
public int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout)
public int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port, string ip)
public bool RemoveHost(int hostId)
public bool get_IsStarted()
public int Connect(int hostId, string address, int port, int exeptionConnectionId, Byte& error)
private int Internal_ConnectEndPoint(int hostId, IntPtr sockAddrStorage, int sockAddrStorageLen, int exceptionConnectionId, Byte& error)
public int ConnectWithSimulator(int hostId, string address, int port, int exeptionConnectionId, Byte& error, ConnectionSimulatorConfig conf)
public bool Disconnect(int hostId, int connectionId, Byte& error)
public bool Send(int hostId, int connectionId, int channelId, Byte[] buffer, int size, Byte& error)
public bool QueueMessageForSending(int hostId, int connectionId, int channelId, Byte[] buffer, int size, Byte& error)
public bool SendQueuedMessages(int hostId, int connectionId, Byte& error)
private bool SendWrapper(int hostId, int connectionId, int channelId, Byte[] buffer, int size, Byte& error)
private bool QueueMessageForSendingWrapper(int hostId, int connectionId, int channelId, Byte[] buffer, int size, Byte& error)
private bool NotifyConnectionSendable(int hostId, int connectionId, Byte& error)
public NetworkEventType Receive(Int32& hostId, Int32& connectionId, Int32& channelId, Byte[] buffer, int bufferSize, Int32& receivedSize, Byte& error)
public NetworkEventType ReceiveFromHost(int hostId, Int32& connectionId, Int32& channelId, Byte[] buffer, int bufferSize, Int32& receivedSize, Byte& error)
public void SetPacketStat(int direction, int packetStatId, int numMsgs, int numBytes)
public bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, Byte[] buffer, int size, int timeout, Byte& error)
private bool StartBroadcastDiscoveryWithoutData(int hostId, int broadcastPort, int key, int version, int subversion, int timeout, Byte& error)
private bool StartBroadcastDiscoveryWithData(int hostId, int broadcastPort, int key, int version, int subversion, Byte[] buffer, int size, int timeout, Byte& error)
public void StopBroadcastDiscovery()
public bool IsBroadcastDiscoveryRunning()
public void SetBroadcastCredentials(int hostId, int key, int version, int subversion, Byte& error)
public string GetBroadcastConnectionInfo(int hostId, Int32& port, Byte& error)
public void GetBroadcastConnectionInfo(int hostId, String& address, Int32& port, Byte& error)
public void GetBroadcastConnectionMessage(int hostId, Byte[] buffer, int bufferSize, Int32& receivedSize, Byte& error)
}
internal UnityEngine.Networking.PlayerConnection.IEditorPlayerConnection {
public void Register(Guid messageId, UnityAction`1<MessageEventArgs> callback)
public void Unregister(Guid messageId, UnityAction`1<MessageEventArgs> callback)
public void DisconnectAll()
public void RegisterConnection(UnityAction`1<int> callback)
public void RegisterDisconnection(UnityAction`1<int> callback)
public void Send(Guid messageId, Byte[] data)
}
public UnityEngine.Networking.PlayerConnection.MessageEventArgs : object {
public int playerId
public Byte[] data
}
public UnityEngine.Networking.PlayerConnection.PlayerConnection : ScriptableObject {
internal IPlayerEditorConnectionNative connectionNative
private PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents
private List`1<int> m_connectedPlayers
private bool m_IsInitilized
private PlayerConnection s_Instance
public PlayerConnection instance
public bool isConnected
public PlayerConnection get_instance()
public bool get_isConnected()
private PlayerConnection CreateInstance()
public void OnEnable()
private IPlayerEditorConnectionNative GetConnectionNativeApi()
public void Register(Guid messageId, UnityAction`1<MessageEventArgs> callback)
public void Unregister(Guid messageId, UnityAction`1<MessageEventArgs> callback)
public void RegisterConnection(UnityAction`1<int> callback)
public void RegisterDisconnection(UnityAction`1<int> callback)
public void Send(Guid messageId, Byte[] data)
public void DisconnectAll()
private void MessageCallbackInternal(IntPtr data, ulong size, ulong guid, string messageId)
private void ConnectedCallbackInternal(int playerId)
private void DisconnectedCallback(int playerId)
}
internal UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents : object {
public List`1<MessageTypeSubscribers> messageTypeSubscribers
public ConnectionChangeEvent connectionEvent
public ConnectionChangeEvent disconnectionEvent
public void InvokeMessageIdSubscribers(Guid messageId, Byte[] data, int playerId)
public UnityEvent`1<MessageEventArgs> AddAndCreate(Guid messageId)
public void UnregisterManagedCallback(Guid messageId, UnityAction`1<MessageEventArgs> callback)
}
public UnityEngine.Networking.QosType : Enum {
public int value__
public QosType Unreliable
public QosType UnreliableFragmented
public QosType UnreliableSequenced
public QosType Reliable
public QosType ReliableFragmented
public QosType ReliableSequenced
public QosType StateUpdate
public QosType ReliableStateUpdate
public QosType AllCostDelivery
}
public UnityEngine.Networking.ReactorModel : Enum {
public int value__
public ReactorModel SelectReactor
public ReactorModel FixRateReactor
}
public UnityEngine.Networking.Types.AppID : Enum {
public ulong value__
public AppID Invalid
}
public UnityEngine.Networking.Types.HostPriority : Enum {
public int value__
public HostPriority Invalid
}
public UnityEngine.Networking.Types.NetworkAccessLevel : Enum {
public ulong value__
public NetworkAccessLevel Invalid
public NetworkAccessLevel User
public NetworkAccessLevel Owner
public NetworkAccessLevel Admin
}
public UnityEngine.Networking.Types.NetworkAccessToken : object {
private int NETWORK_ACCESS_TOKEN_SIZE
public Byte[] array
public void .ctor(Byte[] array)
public void .ctor(string strArray)
public string GetByteString()
public bool IsValid()
}
public UnityEngine.Networking.Types.NetworkID : Enum {
public ulong value__
public NetworkID Invalid
}
public UnityEngine.Networking.Types.NodeID : Enum {
public ushort value__
public NodeID Invalid
}
public UnityEngine.Networking.Types.SourceID : Enum {
public ulong value__
public SourceID Invalid
}
public UnityEngine.Networking.UnityWebRequest : object {
internal IntPtr m_Ptr
public string kHttpVerbGET
public string kHttpVerbHEAD
public string kHttpVerbPOST
public string kHttpVerbPUT
public string kHttpVerbCREATE
public string kHttpVerbDELETE
private bool <disposeDownloadHandlerOnDispose>k__BackingField
private bool <disposeUploadHandlerOnDispose>k__BackingField
public bool disposeDownloadHandlerOnDispose
public bool disposeUploadHandlerOnDispose
public string method
public string error
public bool useHttpContinue
public string url
public long responseCode
public float uploadProgress
public bool isModifiable
public bool isDone
public bool isNetworkError
public bool isHttpError
public float downloadProgress
public ulong uploadedBytes
public ulong downloadedBytes
public int redirectLimit
public bool chunkedTransfer
public UploadHandler uploadHandler
public DownloadHandler downloadHandler
public int timeout
public void .ctor(string url)
public void .ctor(string url, string method)
public void .ctor(string url, string method, DownloadHandler downloadHandler, UploadHandler uploadHandler)
public UnityWebRequest Get(string uri)
public UnityWebRequest Delete(string uri)
public UnityWebRequest Head(string uri)
public UnityWebRequest GetTexture(string uri)
public UnityWebRequest GetTexture(string uri, bool nonReadable)
public UnityWebRequest GetAudioClip(string uri, AudioType audioType)
public UnityWebRequest GetAssetBundle(string uri)
public UnityWebRequest GetAssetBundle(string uri, UInt32 crc)
public UnityWebRequest GetAssetBundle(string uri, UInt32 version, UInt32 crc)
public UnityWebRequest GetAssetBundle(string uri, Hash128 hash, UInt32 crc)
public UnityWebRequest GetAssetBundle(string uri, CachedAssetBundle cachedAssetBundle, UInt32 crc)
public UnityWebRequest Put(string uri, Byte[] bodyData)
public UnityWebRequest Put(string uri, string bodyData)
public UnityWebRequest Post(string uri, string postData)
public UnityWebRequest Post(string uri, WWWForm formData)
public UnityWebRequest Post(string uri, List`1<IMultipartFormSection> multipartFormSections)
public UnityWebRequest Post(string uri, List`1<IMultipartFormSection> multipartFormSections, Byte[] boundary)
public UnityWebRequest Post(string uri, Dictionary`2<string, string> formFields)
public Byte[] SerializeFormSections(List`1<IMultipartFormSection> multipartFormSections, Byte[] boundary)
public Byte[] GenerateBoundary()
public Byte[] SerializeSimpleForm(Dictionary`2<string, string> formFields)
public bool get_disposeDownloadHandlerOnDispose()
public void set_disposeDownloadHandlerOnDispose(bool value)
public bool get_disposeUploadHandlerOnDispose()
public void set_disposeUploadHandlerOnDispose(bool value)
internal void InternalCreate()
internal void InternalDestroy()
private void InternalSetDefaults()
protected void Finalize()
public void Dispose()
private void DisposeHandlers()
internal AsyncOperation InternalBegin()
internal void InternalAbort()
public AsyncOperation Send()
public void Abort()
internal void InternalSetMethod(UnityWebRequestMethod methodType)
internal void InternalSetCustomMethod(string customMethodName)
internal int InternalGetMethod()
internal string InternalGetCustomMethod()
public string get_method()
public void set_method(string value)
internal int InternalGetError()
public string get_error()
public bool get_useHttpContinue()
public void set_useHttpContinue(bool value)
public string get_url()
public void set_url(string value)
private string InternalGetUrl()
private void InternalSetUrl(string url)
public long get_responseCode()
public float get_uploadProgress()
public bool get_isModifiable()
public bool get_isDone()
public bool get_isNetworkError()
public bool get_isHttpError()
public float get_downloadProgress()
public ulong get_uploadedBytes()
public ulong get_downloadedBytes()
public int get_redirectLimit()
public void set_redirectLimit(int value)
public bool get_chunkedTransfer()
public void set_chunkedTransfer(bool value)
public string GetRequestHeader(string name)
internal void InternalSetRequestHeader(string name, string value)
public void SetRequestHeader(string name, string value)
public string GetResponseHeader(string name)
internal String[] InternalGetResponseHeaderKeys()
public Dictionary`2<string, string> GetResponseHeaders()
private UploadHandler GetUploadHandler()
public UploadHandler get_uploadHandler()
public void set_uploadHandler(UploadHandler value)
private DownloadHandler GetDownloadHandler()
public DownloadHandler get_downloadHandler()
public void set_downloadHandler(DownloadHandler value)
public int get_timeout()
public void set_timeout(int value)
private string GetErrorDescription(UnityWebRequestError errorCode)
}
public UnityEngine.Networking.UnityWebRequestMultimedia : object {
public UnityWebRequest GetAudioClip(string uri, AudioType audioType)
public UnityWebRequest GetMovieTexture(string uri)
}
public UnityEngine.Networking.UnityWebRequestTexture : object {
public UnityWebRequest GetTexture(string uri)
public UnityWebRequest GetTexture(string uri, bool nonReadable)
}
public UnityEngine.Networking.UploadHandler : object {
internal IntPtr m_Ptr
public Byte[] data
public string contentType
public float progress
internal void InternalCreateRaw(Byte[] data)
private void InternalDestroy()
protected void Finalize()
public void Dispose()
public Byte[] get_data()
public string get_contentType()
public void set_contentType(string value)
public float get_progress()
internal Byte[] GetData()
internal string GetContentType()
internal void SetContentType(string newContentType)
internal float GetProgress()
}
public UnityEngine.Networking.UploadHandlerRaw : UploadHandler {
public void .ctor(Byte[] data)
private string InternalGetContentType()
private void InternalSetContentType(string newContentType)
private Byte[] InternalGetData()
private float InternalGetProgress()
internal string GetContentType()
internal void SetContentType(string newContentType)
internal Byte[] GetData()
internal float GetProgress()
}
public UnityEngine.Networking.Utility : object {
private Dictionary`2<NetworkID, NetworkAccessToken> s_dictTokens
public bool useRandomSourceID
public bool get_useRandomSourceID()
public void set_useRandomSourceID(bool value)
public SourceID GetSourceID()
public void SetAppID(AppID newAppID)
public AppID GetAppID()
public void SetAccessTokenForNetwork(NetworkID netId, NetworkAccessToken accessToken)
public NetworkAccessToken GetAccessTokenForNetwork(NetworkID netId)
}
internal UnityEngine.Networking.WebRequestWWW : object {
internal AudioClip InternalCreateAudioClipUsingDH(DownloadHandler dh, string url, bool stream, bool compressed, AudioType audioType)
internal MovieTexture InternalCreateMovieTextureUsingDH(DownloadHandler dh)
}
public UnityEngine.NetworkLogLevel : Enum {
public int value__
public NetworkLogLevel Off
public NetworkLogLevel Informational
public NetworkLogLevel Full
}
public UnityEngine.NetworkMessageInfo : ValueType {
private double m_TimeStamp
private NetworkPlayer m_Sender
private NetworkViewID m_ViewID
public double timestamp
public NetworkPlayer sender
public NetworkView networkView
public double get_timestamp()
public NetworkPlayer get_sender()
public NetworkView get_networkView()
internal NetworkView NullNetworkView()
}
public UnityEngine.NetworkPeerType : Enum {
public int value__
public NetworkPeerType Disconnected
public NetworkPeerType Server
public NetworkPeerType Client
public NetworkPeerType Connecting
}
public UnityEngine.NetworkPlayer : ValueType {
internal int index
public string ipAddress
public int port
public string guid
public string externalIP
public int externalPort
internal NetworkPlayer unassigned
public void .ctor(string ip, int port)
private string Internal_GetIPAddress(int index)
private int Internal_GetPort(int index)
private string Internal_GetExternalIP()
private int Internal_GetExternalPort()
private string Internal_GetLocalIP()
private int Internal_GetLocalPort()
private int Internal_GetPlayerIndex()
private string Internal_GetGUID(int index)
private string Internal_GetLocalGUID()
public bool op_Equality(NetworkPlayer lhs, NetworkPlayer rhs)
public bool op_Inequality(NetworkPlayer lhs, NetworkPlayer rhs)
public int GetHashCode()
public bool Equals(object other)
public string get_ipAddress()
public int get_port()
public string get_guid()
public string ToString()
public string get_externalIP()
public int get_externalPort()
internal NetworkPlayer get_unassigned()
}
public UnityEngine.NetworkReachability : Enum {
public int value__
public NetworkReachability NotReachable
public NetworkReachability ReachableViaCarrierDataNetwork
public NetworkReachability ReachableViaLocalAreaNetwork
}
public UnityEngine.NetworkStateSynchronization : Enum {
public int value__
public NetworkStateSynchronization Off
public NetworkStateSynchronization ReliableDeltaCompressed
public NetworkStateSynchronization Unreliable
}
public UnityEngine.NetworkView : Behaviour {
public Component observed
public NetworkStateSynchronization stateSynchronization
public NetworkViewID viewID
public int group
public bool isMine
public NetworkPlayer owner
private void Internal_RPC(NetworkView view, string name, RPCMode mode, Object[] args)
private void Internal_RPC_Target(NetworkView view, string name, NetworkPlayer target, Object[] args)
private void INTERNAL_CALL_Internal_RPC_Target(NetworkView view, string name, NetworkPlayer& target, Object[] args)
public void RPC(string name, RPCMode mode, Object[] args)
public void RPC(string name, NetworkPlayer target, Object[] args)
public Component get_observed()
public void set_observed(Component value)
public NetworkStateSynchronization get_stateSynchronization()
public void set_stateSynchronization(NetworkStateSynchronization value)
private void Internal_GetViewID(NetworkViewID& viewID)
private void Internal_SetViewID(NetworkViewID viewID)
private void INTERNAL_CALL_Internal_SetViewID(NetworkView self, NetworkViewID& viewID)
public NetworkViewID get_viewID()
public void set_viewID(NetworkViewID value)
public int get_group()
public void set_group(int value)
public bool get_isMine()
public NetworkPlayer get_owner()
public bool SetScope(NetworkPlayer player, bool relevancy)
private bool INTERNAL_CALL_SetScope(NetworkView self, NetworkPlayer& player, bool relevancy)
public NetworkView Find(NetworkViewID viewID)
private NetworkView INTERNAL_CALL_Find(NetworkViewID& viewID)
}
public UnityEngine.NetworkViewID : ValueType {
private int a
private int b
private int c
public NetworkViewID unassigned
public bool isMine
public NetworkPlayer owner
public NetworkViewID get_unassigned()
private void INTERNAL_get_unassigned(NetworkViewID& value)
internal bool Internal_IsMine(NetworkViewID value)
private bool INTERNAL_CALL_Internal_IsMine(NetworkViewID& value)
internal void Internal_GetOwner(NetworkViewID value, NetworkPlayer& player)
private void INTERNAL_CALL_Internal_GetOwner(NetworkViewID& value, NetworkPlayer& player)
internal string Internal_GetString(NetworkViewID value)
private string INTERNAL_CALL_Internal_GetString(NetworkViewID& value)
internal bool Internal_Compare(NetworkViewID lhs, NetworkViewID rhs)
private bool INTERNAL_CALL_Internal_Compare(NetworkViewID& lhs, NetworkViewID& rhs)
public bool op_Equality(NetworkViewID lhs, NetworkViewID rhs)
public bool op_Inequality(NetworkViewID lhs, NetworkViewID rhs)
public int GetHashCode()
public bool Equals(object other)
public bool get_isMine()
public NetworkPlayer get_owner()
public string ToString()
}
public UnityEngine.NPOTSupport : Enum {
public int value__
public NPOTSupport None
public NPOTSupport Restricted
public NPOTSupport Full
}
public UnityEngine.Object : object {
private IntPtr m_CachedPtr
internal int OffsetOfInstanceIDInCPlusPlusObject
public string name
public HideFlags hideFlags
private Object Internal_CloneSingle(Object data)
private Object Internal_CloneSingleWithParent(Object data, Transform parent, bool worldPositionStays)
private Object Internal_InstantiateSingle(Object data, Vector3 pos, Quaternion rot)
private Object INTERNAL_CALL_Internal_InstantiateSingle(Object data, Vector3& pos, Quaternion& rot)
private Object Internal_InstantiateSingleWithParent(Object data, Transform parent, Vector3 pos, Quaternion rot)
private Object INTERNAL_CALL_Internal_InstantiateSingleWithParent(Object data, Transform parent, Vector3& pos, Quaternion& rot)
private int GetOffsetOfInstanceIDInCPlusPlusObject()
private void EnsureRunningOnMainThread()
public void Destroy(Object obj, float t)
public void Destroy(Object obj)
public void DestroyImmediate(Object obj, bool allowDestroyingAssets)
public void DestroyImmediate(Object obj)
public Object[] FindObjectsOfType(Type type)
public string get_name()
public void set_name(string value)
public void DontDestroyOnLoad(Object target)
public HideFlags get_hideFlags()
public void set_hideFlags(HideFlags value)
public void DestroyObject(Object obj, float t)
public void DestroyObject(Object obj)
public Object[] FindSceneObjectsOfType(Type type)
public Object[] FindObjectsOfTypeIncludingAssets(Type type)
public Object[] FindObjectsOfTypeAll(Type type)
public string ToString()
internal bool DoesObjectWithInstanceIDExist(int instanceID)
public int GetInstanceID()
public int GetHashCode()
public bool Equals(object other)
public bool op_Implicit(Object exists)
private bool CompareBaseObjects(Object lhs, Object rhs)
private bool IsNativeObjectAlive(Object o)
private IntPtr GetCachedPtr()
public Object Instantiate(Object original, Vector3 position, Quaternion rotation)
public Object Instantiate(Object original, Vector3 position, Quaternion rotation, Transform parent)
public Object Instantiate(Object original)
public Object Instantiate(Object original, Transform parent)
public Object Instantiate(Object original, Transform parent, bool instantiateInWorldSpace)
public T Instantiate(T original)
public T Instantiate(T original, Vector3 position, Quaternion rotation)
public T Instantiate(T original, Vector3 position, Quaternion rotation, Transform parent)
public T Instantiate(T original, Transform parent)
public T Instantiate(T original, Transform parent, bool worldPositionStays)
public T[] FindObjectsOfType()
public T FindObjectOfType()
private void CheckNullArgument(object arg, string message)
public Object FindObjectOfType(Type type)
public bool op_Equality(Object x, Object y)
public bool op_Inequality(Object x, Object y)
}
public UnityEngine.OcclusionArea : Component {
public Vector3 center
public Vector3 size
public Vector3 get_center()
public void set_center(Vector3 value)
private void INTERNAL_get_center(Vector3& value)
private void INTERNAL_set_center(Vector3& value)
public Vector3 get_size()
public void set_size(Vector3 value)
private void INTERNAL_get_size(Vector3& value)
private void INTERNAL_set_size(Vector3& value)
}
public UnityEngine.OcclusionPortal : Component {
public bool open
public bool get_open()
public void set_open(bool value)
}
public UnityEngine.OperatingSystemFamily : Enum {
public int value__
public OperatingSystemFamily Other
public OperatingSystemFamily MacOSX
public OperatingSystemFamily Windows
public OperatingSystemFamily Linux
}
public UnityEngine.Particle : ValueType {
private Vector3 m_Position
private Vector3 m_Velocity
private float m_Size
private float m_Rotation
private float m_AngularVelocity
private float m_Energy
private float m_StartEnergy
private Color m_Color
public Vector3 position
public Vector3 velocity
public float energy
public float startEnergy
public float size
public float rotation
public float angularVelocity
public Color color
public Vector3 get_position()
public void set_position(Vector3 value)
public Vector3 get_velocity()
public void set_velocity(Vector3 value)
public float get_energy()
public void set_energy(float value)
public float get_startEnergy()
public void set_startEnergy(float value)
public float get_size()
public void set_size(float value)
public float get_rotation()
public void set_rotation(float value)
public float get_angularVelocity()
public void set_angularVelocity(float value)
public Color get_color()
public void set_color(Color value)
}
public UnityEngine.ParticleAnimator : Component {
public bool doesAnimateColor
public Vector3 worldRotationAxis
public Vector3 localRotationAxis
public float sizeGrow
public Vector3 rndForce
public Vector3 force
public float damping
public bool autodestruct
public Color[] colorAnimation
public bool get_doesAnimateColor()
public void set_doesAnimateColor(bool value)
public Vector3 get_worldRotationAxis()
public void set_worldRotationAxis(Vector3 value)
private void INTERNAL_get_worldRotationAxis(Vector3& value)
private void INTERNAL_set_worldRotationAxis(Vector3& value)
public Vector3 get_localRotationAxis()
public void set_localRotationAxis(Vector3 value)
private void INTERNAL_get_localRotationAxis(Vector3& value)
private void INTERNAL_set_localRotationAxis(Vector3& value)
public float get_sizeGrow()
public void set_sizeGrow(float value)
public Vector3 get_rndForce()
public void set_rndForce(Vector3 value)
private void INTERNAL_get_rndForce(Vector3& value)
private void INTERNAL_set_rndForce(Vector3& value)
public Vector3 get_force()
public void set_force(Vector3 value)
private void INTERNAL_get_force(Vector3& value)
private void INTERNAL_set_force(Vector3& value)
public float get_damping()
public void set_damping(float value)
public bool get_autodestruct()
public void set_autodestruct(bool value)
public Color[] get_colorAnimation()
public void set_colorAnimation(Color[] value)
}
public UnityEngine.ParticleCollisionEvent : ValueType {
private Vector3 m_Intersection
private Vector3 m_Normal
private Vector3 m_Velocity
private int m_ColliderInstanceID
public Vector3 intersection
public Vector3 normal
public Vector3 velocity
public Component colliderComponent
public Vector3 get_intersection()
public Vector3 get_normal()
public Vector3 get_velocity()
public Component get_colliderComponent()
private Component InstanceIDToColliderComponent(int instanceID)
}
public UnityEngine.ParticleEmitter : Component {
public bool emit
public float minSize
public float maxSize
public float minEnergy
public float maxEnergy
public float minEmission
public float maxEmission
public float emitterVelocityScale
public Vector3 worldVelocity
public Vector3 localVelocity
public Vector3 rndVelocity
public bool useWorldSpace
public bool rndRotation
public float angularVelocity
public float rndAngularVelocity
public Particle[] particles
public int particleCount
public bool enabled
public bool get_emit()
public void set_emit(bool value)
public float get_minSize()
public void set_minSize(float value)
public float get_maxSize()
public void set_maxSize(float value)
public float get_minEnergy()
public void set_minEnergy(float value)
public float get_maxEnergy()
public void set_maxEnergy(float value)
public float get_minEmission()
public void set_minEmission(float value)
public float get_maxEmission()
public void set_maxEmission(float value)
public float get_emitterVelocityScale()
public void set_emitterVelocityScale(float value)
public Vector3 get_worldVelocity()
public void set_worldVelocity(Vector3 value)
private void INTERNAL_get_worldVelocity(Vector3& value)
private void INTERNAL_set_worldVelocity(Vector3& value)
public Vector3 get_localVelocity()
public void set_localVelocity(Vector3 value)
private void INTERNAL_get_localVelocity(Vector3& value)
private void INTERNAL_set_localVelocity(Vector3& value)
public Vector3 get_rndVelocity()
public void set_rndVelocity(Vector3 value)
private void INTERNAL_get_rndVelocity(Vector3& value)
private void INTERNAL_set_rndVelocity(Vector3& value)
public bool get_useWorldSpace()
public void set_useWorldSpace(bool value)
public bool get_rndRotation()
public void set_rndRotation(bool value)
public float get_angularVelocity()
public void set_angularVelocity(float value)
public float get_rndAngularVelocity()
public void set_rndAngularVelocity(float value)
public Particle[] get_particles()
public void set_particles(Particle[] value)
public int get_particleCount()
public void ClearParticles()
private void INTERNAL_CALL_ClearParticles(ParticleEmitter self)
public void Emit()
public void Emit(int count)
public void Emit(Vector3 pos, Vector3 velocity, float size, float energy, Color color)
public void Emit(Vector3 pos, Vector3 velocity, float size, float energy, Color color, float rotation, float angularVelocity)
private void Emit2(int count)
private void Emit3(InternalEmitParticleArguments& args)
public void Simulate(float deltaTime)
public bool get_enabled()
public void set_enabled(bool value)
}
public UnityEngine.ParticlePhysicsExtensions : object {
public int GetSafeCollisionEventSize(ParticleSystem ps)
public int GetCollisionEvents(ParticleSystem ps, GameObject go, List`1<ParticleCollisionEvent> collisionEvents)
public int GetCollisionEvents(ParticleSystem ps, GameObject go, ParticleCollisionEvent[] collisionEvents)
public int GetSafeTriggerParticlesSize(ParticleSystem ps, ParticleSystemTriggerEventType type)
public int GetTriggerParticles(ParticleSystem ps, ParticleSystemTriggerEventType type, List`1<Particle> particles)
public void SetTriggerParticles(ParticleSystem ps, ParticleSystemTriggerEventType type, List`1<Particle> particles, int offset, int count)
public void SetTriggerParticles(ParticleSystem ps, ParticleSystemTriggerEventType type, List`1<Particle> particles)
}
public UnityEngine.ParticleRenderer : Renderer {
public ParticleRenderMode particleRenderMode
public float lengthScale
public float velocityScale
public float cameraVelocityScale
public float maxParticleSize
public int uvAnimationXTile
public int uvAnimationYTile
public float uvAnimationCycles
public int animatedTextureCount
public float maxPartileSize
public Rect[] uvTiles
public AnimationCurve widthCurve
public AnimationCurve heightCurve
public AnimationCurve rotationCurve
public ParticleRenderMode get_particleRenderMode()
public void set_particleRenderMode(ParticleRenderMode value)
public float get_lengthScale()
public void set_lengthScale(float value)
public float get_velocityScale()
public void set_velocityScale(float value)
public float get_cameraVelocityScale()
public void set_cameraVelocityScale(float value)
public float get_maxParticleSize()
public void set_maxParticleSize(float value)
public int get_uvAnimationXTile()
public void set_uvAnimationXTile(int value)
public int get_uvAnimationYTile()
public void set_uvAnimationYTile(int value)
public float get_uvAnimationCycles()
public void set_uvAnimationCycles(float value)
public int get_animatedTextureCount()
public void set_animatedTextureCount(int value)
public float get_maxPartileSize()
public void set_maxPartileSize(float value)
public Rect[] get_uvTiles()
public void set_uvTiles(Rect[] value)
public AnimationCurve get_widthCurve()
public void set_widthCurve(AnimationCurve value)
public AnimationCurve get_heightCurve()
public void set_heightCurve(AnimationCurve value)
public AnimationCurve get_rotationCurve()
public void set_rotationCurve(AnimationCurve value)
}
public UnityEngine.ParticleRenderMode : Enum {
public int value__
public ParticleRenderMode Billboard
public ParticleRenderMode Stretch
public ParticleRenderMode SortedBillboard
public ParticleRenderMode HorizontalBillboard
public ParticleRenderMode VerticalBillboard
}
public UnityEngine.ParticleSystem : Component {
public float startDelay
public bool isPlaying
public bool isEmitting
public bool isStopped
public bool isPaused
public bool loop
public bool playOnAwake
public float time
public float duration
public float playbackSpeed
public int particleCount
public bool enableEmission
public float emissionRate
public float startSpeed
public float startSize
public Color startColor
public float startRotation
public Vector3 startRotation3D
public float startLifetime
public float gravityModifier
public int maxParticles
public ParticleSystemSimulationSpace simulationSpace
public ParticleSystemScalingMode scalingMode
public UInt32 randomSeed
public bool useAutoRandomSeed
public MainModule main
public EmissionModule emission
public ShapeModule shape
public VelocityOverLifetimeModule velocityOverLifetime
public LimitVelocityOverLifetimeModule limitVelocityOverLifetime
public InheritVelocityModule inheritVelocity
public ForceOverLifetimeModule forceOverLifetime
public ColorOverLifetimeModule colorOverLifetime
public ColorBySpeedModule colorBySpeed
public SizeOverLifetimeModule sizeOverLifetime
public SizeBySpeedModule sizeBySpeed
public RotationOverLifetimeModule rotationOverLifetime
public RotationBySpeedModule rotationBySpeed
public ExternalForcesModule externalForces
public NoiseModule noise
public CollisionModule collision
public TriggerModule trigger
public SubEmittersModule subEmitters
public TextureSheetAnimationModule textureSheetAnimation
public LightsModule lights
public TrailModule trails
public CustomDataModule customData
public float get_startDelay()
public void set_startDelay(float value)
public bool get_isPlaying()
public bool get_isEmitting()
public bool get_isStopped()
public bool get_isPaused()
public bool get_loop()
public void set_loop(bool value)
public bool get_playOnAwake()
public void set_playOnAwake(bool value)
public float get_time()
public void set_time(float value)
public float get_duration()
public float get_playbackSpeed()
public void set_playbackSpeed(float value)
public int get_particleCount()
public bool get_enableEmission()
public void set_enableEmission(bool value)
public float get_emissionRate()
public void set_emissionRate(float value)
public float get_startSpeed()
public void set_startSpeed(float value)
public float get_startSize()
public void set_startSize(float value)
public Color get_startColor()
public void set_startColor(Color value)
private void INTERNAL_get_startColor(Color& value)
private void INTERNAL_set_startColor(Color& value)
public float get_startRotation()
public void set_startRotation(float value)
public Vector3 get_startRotation3D()
public void set_startRotation3D(Vector3 value)
private void INTERNAL_get_startRotation3D(Vector3& value)
private void INTERNAL_set_startRotation3D(Vector3& value)
public float get_startLifetime()
public void set_startLifetime(float value)
public float get_gravityModifier()
public void set_gravityModifier(float value)
public int get_maxParticles()
public void set_maxParticles(int value)
public ParticleSystemSimulationSpace get_simulationSpace()
public void set_simulationSpace(ParticleSystemSimulationSpace value)
public ParticleSystemScalingMode get_scalingMode()
public void set_scalingMode(ParticleSystemScalingMode value)
public UInt32 get_randomSeed()
public void set_randomSeed(UInt32 value)
public bool get_useAutoRandomSeed()
public void set_useAutoRandomSeed(bool value)
public MainModule get_main()
public EmissionModule get_emission()
public ShapeModule get_shape()
public VelocityOverLifetimeModule get_velocityOverLifetime()
public LimitVelocityOverLifetimeModule get_limitVelocityOverLifetime()
public InheritVelocityModule get_inheritVelocity()
public ForceOverLifetimeModule get_forceOverLifetime()
public ColorOverLifetimeModule get_colorOverLifetime()
public ColorBySpeedModule get_colorBySpeed()
public SizeOverLifetimeModule get_sizeOverLifetime()
public SizeBySpeedModule get_sizeBySpeed()
public RotationOverLifetimeModule get_rotationOverLifetime()
public RotationBySpeedModule get_rotationBySpeed()
public ExternalForcesModule get_externalForces()
public NoiseModule get_noise()
public CollisionModule get_collision()
public TriggerModule get_trigger()
public SubEmittersModule get_subEmitters()
public TextureSheetAnimationModule get_textureSheetAnimation()
public LightsModule get_lights()
public TrailModule get_trails()
public CustomDataModule get_customData()
public void SetParticles(Particle[] particles, int size)
public int GetParticles(Particle[] particles)
public void SetCustomParticleData(List`1<Vector4> customData, ParticleSystemCustomData streamIndex)
public int GetCustomParticleData(List`1<Vector4> customData, ParticleSystemCustomData streamIndex)
internal void SetCustomParticleDataInternal(object customData, int streamIndex)
internal int GetCustomParticleDataInternal(object customData, int streamIndex)
public void Simulate(float t, bool withChildren, bool restart, bool fixedTimeStep)
public void Simulate(float t, bool withChildren, bool restart)
public void Simulate(float t, bool withChildren)
public void Simulate(float t)
public void Play(bool withChildren)
public void Play()
public void Pause(bool withChildren)
public void Pause()
public void Stop(bool withChildren, ParticleSystemStopBehavior stopBehavior)
public void Stop(bool withChildren)
public void Stop()
public void Clear(bool withChildren)
public void Clear()
public bool IsAlive(bool withChildren)
public bool IsAlive()
public void Emit(int count)
private void INTERNAL_CALL_Emit(ParticleSystem self, int count)
public void Emit(Vector3 position, Vector3 velocity, float size, float lifetime, Color32 color)
public void Emit(Particle particle)
private void Internal_EmitOld(Particle& particle)
public void Emit(EmitParams emitParams, int count)
private void Internal_Emit(EmitParams& emitParams, int count)
}
public UnityEngine.ParticleSystemAnimationMode : Enum {
public int value__
public ParticleSystemAnimationMode Grid
public ParticleSystemAnimationMode Sprites
}
public UnityEngine.ParticleSystemAnimationType : Enum {
public int value__
public ParticleSystemAnimationType WholeSheet
public ParticleSystemAnimationType SingleRow
}
public UnityEngine.ParticleSystemCollisionMode : Enum {
public int value__
public ParticleSystemCollisionMode Collision3D
public ParticleSystemCollisionMode Collision2D
}
public UnityEngine.ParticleSystemCollisionQuality : Enum {
public int value__
public ParticleSystemCollisionQuality High
public ParticleSystemCollisionQuality Medium
public ParticleSystemCollisionQuality Low
}
public UnityEngine.ParticleSystemCollisionType : Enum {
public int value__
public ParticleSystemCollisionType Planes
public ParticleSystemCollisionType World
}
public UnityEngine.ParticleSystemCurveMode : Enum {
public int value__
public ParticleSystemCurveMode Constant
public ParticleSystemCurveMode Curve
public ParticleSystemCurveMode TwoCurves
public ParticleSystemCurveMode TwoConstants
}
public UnityEngine.ParticleSystemCustomData : Enum {
public int value__
public ParticleSystemCustomData Custom1
public ParticleSystemCustomData Custom2
}
public UnityEngine.ParticleSystemCustomDataMode : Enum {
public int value__
public ParticleSystemCustomDataMode Disabled
public ParticleSystemCustomDataMode Vector
public ParticleSystemCustomDataMode Color
}
public UnityEngine.ParticleSystemEmissionType : Enum {
public int value__
public ParticleSystemEmissionType Time
public ParticleSystemEmissionType Distance
}
public UnityEngine.ParticleSystemEmitterVelocityMode : Enum {
public int value__
public ParticleSystemEmitterVelocityMode Transform
public ParticleSystemEmitterVelocityMode Rigidbody
}
internal UnityEngine.ParticleSystemExtensionsImpl : object {
internal int GetSafeCollisionEventSize(ParticleSystem ps)
internal int GetCollisionEventsDeprecated(ParticleSystem ps, GameObject go, ParticleCollisionEvent[] collisionEvents)
internal int GetSafeTriggerParticlesSize(ParticleSystem ps, int type)
internal int GetCollisionEvents(ParticleSystem ps, GameObject go, object collisionEvents)
internal int GetTriggerParticles(ParticleSystem ps, int type, object particles)
internal void SetTriggerParticles(ParticleSystem ps, int type, object particles, int offset, int count)
}
public UnityEngine.ParticleSystemGradientMode : Enum {
public int value__
public ParticleSystemGradientMode Color
public ParticleSystemGradientMode Gradient
public ParticleSystemGradientMode TwoColors
public ParticleSystemGradientMode TwoGradients
public ParticleSystemGradientMode RandomColor
}
public UnityEngine.ParticleSystemInheritVelocityMode : Enum {
public int value__
public ParticleSystemInheritVelocityMode Initial
public ParticleSystemInheritVelocityMode Current
}
public UnityEngine.ParticleSystemMeshShapeType : Enum {
public int value__
public ParticleSystemMeshShapeType Vertex
public ParticleSystemMeshShapeType Edge
public ParticleSystemMeshShapeType Triangle
}
public UnityEngine.ParticleSystemNoiseQuality : Enum {
public int value__
public ParticleSystemNoiseQuality Low
public ParticleSystemNoiseQuality Medium
public ParticleSystemNoiseQuality High
}
public UnityEngine.ParticleSystemOverlapAction : Enum {
public int value__
public ParticleSystemOverlapAction Ignore
public ParticleSystemOverlapAction Kill
public ParticleSystemOverlapAction Callback
}
public UnityEngine.ParticleSystemRenderer : Renderer {
public ParticleSystemRenderMode renderMode
public float lengthScale
public float velocityScale
public float cameraVelocityScale
public float normalDirection
public ParticleSystemRenderSpace alignment
public Vector3 pivot
public ParticleSystemSortMode sortMode
public float sortingFudge
public float minParticleSize
public float maxParticleSize
public Mesh mesh
public int meshCount
public Material trailMaterial
public int activeVertexStreamsCount
public SpriteMaskInteraction maskInteraction
public ParticleSystemRenderMode get_renderMode()
public void set_renderMode(ParticleSystemRenderMode value)
public float get_lengthScale()
public void set_lengthScale(float value)
public float get_velocityScale()
public void set_velocityScale(float value)
public float get_cameraVelocityScale()
public void set_cameraVelocityScale(float value)
public float get_normalDirection()
public void set_normalDirection(float value)
public ParticleSystemRenderSpace get_alignment()
public void set_alignment(ParticleSystemRenderSpace value)
public Vector3 get_pivot()
public void set_pivot(Vector3 value)
private void INTERNAL_get_pivot(Vector3& value)
private void INTERNAL_set_pivot(Vector3& value)
public ParticleSystemSortMode get_sortMode()
public void set_sortMode(ParticleSystemSortMode value)
public float get_sortingFudge()
public void set_sortingFudge(float value)
public float get_minParticleSize()
public void set_minParticleSize(float value)
public float get_maxParticleSize()
public void set_maxParticleSize(float value)
public Mesh get_mesh()
public void set_mesh(Mesh value)
public int get_meshCount()
private int Internal_GetMeshCount()
public int GetMeshes(Mesh[] meshes)
public void SetMeshes(Mesh[] meshes)
public void SetMeshes(Mesh[] meshes, int size)
public Material get_trailMaterial()
public void set_trailMaterial(Material value)
public int get_activeVertexStreamsCount()
public void SetActiveVertexStreams(List`1<ParticleSystemVertexStream> streams)
internal void SetActiveVertexStreamsInternal(object streams)
public void GetActiveVertexStreams(List`1<ParticleSystemVertexStream> streams)
internal void GetActiveVertexStreamsInternal(object streams)
public void EnableVertexStreams(ParticleSystemVertexStreams streams)
public void DisableVertexStreams(ParticleSystemVertexStreams streams)
public bool AreVertexStreamsEnabled(ParticleSystemVertexStreams streams)
public ParticleSystemVertexStreams GetEnabledVertexStreams(ParticleSystemVertexStreams streams)
internal void Internal_SetVertexStreams(ParticleSystemVertexStreams streams, bool enabled)
internal ParticleSystemVertexStreams Internal_GetEnabledVertexStreams(ParticleSystemVertexStreams streams)
public SpriteMaskInteraction get_maskInteraction()
public void set_maskInteraction(SpriteMaskInteraction value)
}
public UnityEngine.ParticleSystemRenderMode : Enum {
public int value__
public ParticleSystemRenderMode Billboard
public ParticleSystemRenderMode Stretch
public ParticleSystemRenderMode HorizontalBillboard
public ParticleSystemRenderMode VerticalBillboard
public ParticleSystemRenderMode Mesh
public ParticleSystemRenderMode None
}
public UnityEngine.ParticleSystemRenderSpace : Enum {
public int value__
public ParticleSystemRenderSpace View
public ParticleSystemRenderSpace World
public ParticleSystemRenderSpace Local
public ParticleSystemRenderSpace Facing
public ParticleSystemRenderSpace Velocity
}
public UnityEngine.ParticleSystemScalingMode : Enum {
public int value__
public ParticleSystemScalingMode Hierarchy
public ParticleSystemScalingMode Local
public ParticleSystemScalingMode Shape
}
public UnityEngine.ParticleSystemShapeMultiModeValue : Enum {
public int value__
public ParticleSystemShapeMultiModeValue Random
public ParticleSystemShapeMultiModeValue Loop
public ParticleSystemShapeMultiModeValue PingPong
public ParticleSystemShapeMultiModeValue BurstSpread
}
public UnityEngine.ParticleSystemShapeType : Enum {
public int value__
public ParticleSystemShapeType Sphere
public ParticleSystemShapeType SphereShell
public ParticleSystemShapeType Hemisphere
public ParticleSystemShapeType HemisphereShell
public ParticleSystemShapeType Cone
public ParticleSystemShapeType Box
public ParticleSystemShapeType Mesh
public ParticleSystemShapeType ConeShell
public ParticleSystemShapeType ConeVolume
public ParticleSystemShapeType ConeVolumeShell
public ParticleSystemShapeType Circle
public ParticleSystemShapeType CircleEdge
public ParticleSystemShapeType SingleSidedEdge
public ParticleSystemShapeType MeshRenderer
public ParticleSystemShapeType SkinnedMeshRenderer
public ParticleSystemShapeType BoxShell
public ParticleSystemShapeType BoxEdge
public ParticleSystemShapeType Donut
}
public UnityEngine.ParticleSystemSimulationSpace : Enum {
public int value__
public ParticleSystemSimulationSpace Local
public ParticleSystemSimulationSpace World
public ParticleSystemSimulationSpace Custom
}
public UnityEngine.ParticleSystemSortMode : Enum {
public int value__
public ParticleSystemSortMode None
public ParticleSystemSortMode Distance
public ParticleSystemSortMode OldestInFront
public ParticleSystemSortMode YoungestInFront
}
public UnityEngine.ParticleSystemStopBehavior : Enum {
public int value__
public ParticleSystemStopBehavior StopEmittingAndClear
public ParticleSystemStopBehavior StopEmitting
}
public UnityEngine.ParticleSystemSubEmitterProperties : Enum {
public int value__
public ParticleSystemSubEmitterProperties InheritNothing
public ParticleSystemSubEmitterProperties InheritEverything
public ParticleSystemSubEmitterProperties InheritColor
public ParticleSystemSubEmitterProperties InheritSize
public ParticleSystemSubEmitterProperties InheritRotation
}
public UnityEngine.ParticleSystemSubEmitterType : Enum {
public int value__
public ParticleSystemSubEmitterType Birth
public ParticleSystemSubEmitterType Collision
public ParticleSystemSubEmitterType Death
}
public UnityEngine.ParticleSystemTrailTextureMode : Enum {
public int value__
public ParticleSystemTrailTextureMode Stretch
public ParticleSystemTrailTextureMode Tile
public ParticleSystemTrailTextureMode DistributePerSegment
public ParticleSystemTrailTextureMode RepeatPerSegment
}
public UnityEngine.ParticleSystemTriggerEventType : Enum {
public int value__
public ParticleSystemTriggerEventType Inside
public ParticleSystemTriggerEventType Outside
public ParticleSystemTriggerEventType Enter
public ParticleSystemTriggerEventType Exit
}
public UnityEngine.ParticleSystemVertexStream : Enum {
public int value__
public ParticleSystemVertexStream Position
public ParticleSystemVertexStream Normal
public ParticleSystemVertexStream Tangent
public ParticleSystemVertexStream Color
public ParticleSystemVertexStream UV
public ParticleSystemVertexStream UV2
public ParticleSystemVertexStream UV3
public ParticleSystemVertexStream UV4
public ParticleSystemVertexStream AnimBlend
public ParticleSystemVertexStream AnimFrame
public ParticleSystemVertexStream Center
public ParticleSystemVertexStream VertexID
public ParticleSystemVertexStream SizeX
public ParticleSystemVertexStream SizeXY
public ParticleSystemVertexStream SizeXYZ
public ParticleSystemVertexStream Rotation
public ParticleSystemVertexStream Rotation3D
public ParticleSystemVertexStream RotationSpeed
public ParticleSystemVertexStream RotationSpeed3D
public ParticleSystemVertexStream Velocity
public ParticleSystemVertexStream Speed
public ParticleSystemVertexStream AgePercent
public ParticleSystemVertexStream InvStartLifetime
public ParticleSystemVertexStream StableRandomX
public ParticleSystemVertexStream StableRandomXY
public ParticleSystemVertexStream StableRandomXYZ
public ParticleSystemVertexStream StableRandomXYZW
public ParticleSystemVertexStream VaryingRandomX
public ParticleSystemVertexStream VaryingRandomXY
public ParticleSystemVertexStream VaryingRandomXYZ
public ParticleSystemVertexStream VaryingRandomXYZW
public ParticleSystemVertexStream Custom1X
public ParticleSystemVertexStream Custom1XY
public ParticleSystemVertexStream Custom1XYZ
public ParticleSystemVertexStream Custom1XYZW
public ParticleSystemVertexStream Custom2X
public ParticleSystemVertexStream Custom2XY
public ParticleSystemVertexStream Custom2XYZ
public ParticleSystemVertexStream Custom2XYZW
public ParticleSystemVertexStream NoiseSumX
public ParticleSystemVertexStream NoiseSumXY
public ParticleSystemVertexStream NoiseSumXYZ
public ParticleSystemVertexStream NoiseImpulseX
public ParticleSystemVertexStream NoiseImpulseXY
public ParticleSystemVertexStream NoiseImpulseXYZ
}
public UnityEngine.ParticleSystemVertexStreams : Enum {
public int value__
public ParticleSystemVertexStreams Position
public ParticleSystemVertexStreams Normal
public ParticleSystemVertexStreams Tangent
public ParticleSystemVertexStreams Color
public ParticleSystemVertexStreams UV
public ParticleSystemVertexStreams UV2BlendAndFrame
public ParticleSystemVertexStreams CenterAndVertexID
public ParticleSystemVertexStreams Size
public ParticleSystemVertexStreams Rotation
public ParticleSystemVertexStreams Velocity
public ParticleSystemVertexStreams Lifetime
public ParticleSystemVertexStreams Custom1
public ParticleSystemVertexStreams Custom2
public ParticleSystemVertexStreams Random
public ParticleSystemVertexStreams None
public ParticleSystemVertexStreams All
}
public UnityEngine.PhysicMaterial : Object {
public float dynamicFriction
public float staticFriction
public float bounciness
public float bouncyness
public Vector3 frictionDirection2
public float dynamicFriction2
public float staticFriction2
public PhysicMaterialCombine frictionCombine
public PhysicMaterialCombine bounceCombine
public Vector3 frictionDirection
public void .ctor(string name)
private void Internal_CreateDynamicsMaterial(PhysicMaterial mat, string name)
public float get_dynamicFriction()
public void set_dynamicFriction(float value)
public float get_staticFriction()
public void set_staticFriction(float value)
public float get_bounciness()
public void set_bounciness(float value)
public float get_bouncyness()
public void set_bouncyness(float value)
public Vector3 get_frictionDirection2()
public void set_frictionDirection2(Vector3 value)
public float get_dynamicFriction2()
public void set_dynamicFriction2(float value)
public float get_staticFriction2()
public void set_staticFriction2(float value)
public PhysicMaterialCombine get_frictionCombine()
public void set_frictionCombine(PhysicMaterialCombine value)
public PhysicMaterialCombine get_bounceCombine()
public void set_bounceCombine(PhysicMaterialCombine value)
public Vector3 get_frictionDirection()
public void set_frictionDirection(Vector3 value)
}
public UnityEngine.PhysicMaterialCombine : Enum {
public int value__
public PhysicMaterialCombine Average
public PhysicMaterialCombine Minimum
public PhysicMaterialCombine Multiply
public PhysicMaterialCombine Maximum
}
public UnityEngine.Physics : object {
public int IgnoreRaycastLayer
public int kIgnoreRaycastLayer
public int DefaultRaycastLayers
public int kDefaultRaycastLayers
public int AllLayers
public int kAllLayers
public Vector3 gravity
public float minPenetrationForPenalty
public float defaultContactOffset
public float bounceThreshold
public float bounceTreshold
public float sleepVelocity
public float sleepAngularVelocity
public float maxAngularVelocity
public int defaultSolverIterations
public int solverIterationCount
public int defaultSolverVelocityIterations
public int solverVelocityIterationCount
public float sleepThreshold
public bool queriesHitTriggers
public bool queriesHitBackfaces
public float penetrationPenaltyForce
public bool autoSimulation
public Vector3 get_gravity()
public void set_gravity(Vector3 value)
private void INTERNAL_get_gravity(Vector3& value)
private void INTERNAL_set_gravity(Vector3& value)
public float get_minPenetrationForPenalty()
public void set_minPenetrationForPenalty(float value)
public float get_defaultContactOffset()
public void set_defaultContactOffset(float value)
public float get_bounceThreshold()
public void set_bounceThreshold(float value)
public float get_bounceTreshold()
public void set_bounceTreshold(float value)
public float get_sleepVelocity()
public void set_sleepVelocity(float value)
public float get_sleepAngularVelocity()
public void set_sleepAngularVelocity(float value)
public float get_maxAngularVelocity()
public void set_maxAngularVelocity(float value)
public int get_defaultSolverIterations()
public void set_defaultSolverIterations(int value)
public int get_solverIterationCount()
public void set_solverIterationCount(int value)
public int get_defaultSolverVelocityIterations()
public void set_defaultSolverVelocityIterations(int value)
public int get_solverVelocityIterationCount()
public void set_solverVelocityIterationCount(int value)
public float get_sleepThreshold()
public void set_sleepThreshold(float value)
public bool get_queriesHitTriggers()
public void set_queriesHitTriggers(bool value)
public bool get_queriesHitBackfaces()
public void set_queriesHitBackfaces(bool value)
public bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask)
public bool Raycast(Vector3 origin, Vector3 direction, float maxDistance)
public bool Raycast(Vector3 origin, Vector3 direction)
public bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool Raycast(Vector3 origin, Vector3 direction, RaycastHit& hitInfo, float maxDistance, int layerMask)
public bool Raycast(Vector3 origin, Vector3 direction, RaycastHit& hitInfo, float maxDistance)
public bool Raycast(Vector3 origin, Vector3 direction, RaycastHit& hitInfo)
public bool Raycast(Vector3 origin, Vector3 direction, RaycastHit& hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool Raycast(Ray ray, float maxDistance, int layerMask)
public bool Raycast(Ray ray, float maxDistance)
public bool Raycast(Ray ray)
public bool Raycast(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool Raycast(Ray ray, RaycastHit& hitInfo, float maxDistance, int layerMask)
public bool Raycast(Ray ray, RaycastHit& hitInfo, float maxDistance)
public bool Raycast(Ray ray, RaycastHit& hitInfo)
public bool Raycast(Ray ray, RaycastHit& hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask)
public RaycastHit[] RaycastAll(Ray ray, float maxDistance)
public RaycastHit[] RaycastAll(Ray ray)
public RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layermask)
public RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance)
public RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction)
private RaycastHit[] INTERNAL_CALL_RaycastAll(Vector3& origin, Vector3& direction, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance, int layerMask)
public int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance)
public int RaycastNonAlloc(Ray ray, RaycastHit[] results)
public int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance, int layermask)
public int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance)
public int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results)
private int INTERNAL_CALL_RaycastNonAlloc(Vector3& origin, Vector3& direction, RaycastHit[] results, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public bool Linecast(Vector3 start, Vector3 end, int layerMask)
public bool Linecast(Vector3 start, Vector3 end)
public bool Linecast(Vector3 start, Vector3 end, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool Linecast(Vector3 start, Vector3 end, RaycastHit& hitInfo, int layerMask)
public bool Linecast(Vector3 start, Vector3 end, RaycastHit& hitInfo)
public bool Linecast(Vector3 start, Vector3 end, RaycastHit& hitInfo, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public Collider[] OverlapSphere(Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public Collider[] OverlapSphere(Vector3 position, float radius, int layerMask)
public Collider[] OverlapSphere(Vector3 position, float radius)
private Collider[] INTERNAL_CALL_OverlapSphere(Vector3& position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public int OverlapSphereNonAlloc(Vector3 position, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public int OverlapSphereNonAlloc(Vector3 position, float radius, Collider[] results, int layerMask)
public int OverlapSphereNonAlloc(Vector3 position, float radius, Collider[] results)
private int INTERNAL_CALL_OverlapSphereNonAlloc(Vector3& position, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public Collider[] OverlapCapsule(Vector3 point0, Vector3 point1, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public Collider[] OverlapCapsule(Vector3 point0, Vector3 point1, float radius, int layerMask)
public Collider[] OverlapCapsule(Vector3 point0, Vector3 point1, float radius)
private Collider[] INTERNAL_CALL_OverlapCapsule(Vector3& point0, Vector3& point1, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public int OverlapCapsuleNonAlloc(Vector3 point0, Vector3 point1, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public int OverlapCapsuleNonAlloc(Vector3 point0, Vector3 point1, float radius, Collider[] results, int layerMask)
public int OverlapCapsuleNonAlloc(Vector3 point0, Vector3 point1, float radius, Collider[] results)
private int INTERNAL_CALL_OverlapCapsuleNonAlloc(Vector3& point0, Vector3& point1, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, int layerMask)
public bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance)
public bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction)
public bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit& hitInfo, float maxDistance, int layerMask)
public bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit& hitInfo, float maxDistance)
public bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit& hitInfo)
public bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit& hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool SphereCast(Vector3 origin, float radius, Vector3 direction, RaycastHit& hitInfo, float maxDistance, int layerMask)
public bool SphereCast(Vector3 origin, float radius, Vector3 direction, RaycastHit& hitInfo, float maxDistance)
public bool SphereCast(Vector3 origin, float radius, Vector3 direction, RaycastHit& hitInfo)
public bool SphereCast(Vector3 origin, float radius, Vector3 direction, RaycastHit& hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool SphereCast(Ray ray, float radius, float maxDistance, int layerMask)
public bool SphereCast(Ray ray, float radius, float maxDistance)
public bool SphereCast(Ray ray, float radius)
public bool SphereCast(Ray ray, float radius, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool SphereCast(Ray ray, float radius, RaycastHit& hitInfo, float maxDistance, int layerMask)
public bool SphereCast(Ray ray, float radius, RaycastHit& hitInfo, float maxDistance)
public bool SphereCast(Ray ray, float radius, RaycastHit& hitInfo)
public bool SphereCast(Ray ray, float radius, RaycastHit& hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] CapsuleCastAll(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] CapsuleCastAll(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, int layermask)
public RaycastHit[] CapsuleCastAll(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance)
public RaycastHit[] CapsuleCastAll(Vector3 point1, Vector3 point2, float radius, Vector3 direction)
private RaycastHit[] INTERNAL_CALL_CapsuleCastAll(Vector3& point1, Vector3& point2, float radius, Vector3& direction, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public int CapsuleCastNonAlloc(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public int CapsuleCastNonAlloc(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, int layermask)
public int CapsuleCastNonAlloc(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit[] results, float maxDistance)
public int CapsuleCastNonAlloc(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit[] results)
private int INTERNAL_CALL_CapsuleCastNonAlloc(Vector3& point1, Vector3& point2, float radius, Vector3& direction, RaycastHit[] results, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] SphereCastAll(Vector3 origin, float radius, Vector3 direction, float maxDistance, int layerMask)
public RaycastHit[] SphereCastAll(Vector3 origin, float radius, Vector3 direction, float maxDistance)
public RaycastHit[] SphereCastAll(Vector3 origin, float radius, Vector3 direction)
public RaycastHit[] SphereCastAll(Vector3 origin, float radius, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] SphereCastAll(Ray ray, float radius, float maxDistance, int layerMask)
public RaycastHit[] SphereCastAll(Ray ray, float radius, float maxDistance)
public RaycastHit[] SphereCastAll(Ray ray, float radius)
public RaycastHit[] SphereCastAll(Ray ray, float radius, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public int SphereCastNonAlloc(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask)
public int SphereCastNonAlloc(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, float maxDistance)
public int SphereCastNonAlloc(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results)
public int SphereCastNonAlloc(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public int SphereCastNonAlloc(Ray ray, float radius, RaycastHit[] results, float maxDistance, int layerMask)
public int SphereCastNonAlloc(Ray ray, float radius, RaycastHit[] results, float maxDistance)
public int SphereCastNonAlloc(Ray ray, float radius, RaycastHit[] results)
public int SphereCastNonAlloc(Ray ray, float radius, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool CheckSphere(Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool CheckSphere(Vector3 position, float radius, int layerMask)
public bool CheckSphere(Vector3 position, float radius)
private bool INTERNAL_CALL_CheckSphere(Vector3& position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool CheckCapsule(Vector3 start, Vector3 end, float radius, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public bool CheckCapsule(Vector3 start, Vector3 end, float radius, int layermask)
public bool CheckCapsule(Vector3 start, Vector3 end, float radius)
private bool INTERNAL_CALL_CheckCapsule(Vector3& start, Vector3& end, float radius, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public bool CheckBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public bool CheckBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, int layermask)
public bool CheckBox(Vector3 center, Vector3 halfExtents, Quaternion orientation)
public bool CheckBox(Vector3 center, Vector3 halfExtents)
private bool INTERNAL_CALL_CheckBox(Vector3& center, Vector3& halfExtents, Quaternion& orientation, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public Collider[] OverlapBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public Collider[] OverlapBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, int layerMask)
public Collider[] OverlapBox(Vector3 center, Vector3 halfExtents, Quaternion orientation)
public Collider[] OverlapBox(Vector3 center, Vector3 halfExtents)
private Collider[] INTERNAL_CALL_OverlapBox(Vector3& center, Vector3& halfExtents, Quaternion& orientation, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation, int layerMask)
public int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation)
public int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results)
private int INTERNAL_CALL_OverlapBoxNonAlloc(Vector3& center, Vector3& halfExtents, Collider[] results, Quaternion& orientation, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] BoxCastAll(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] BoxCastAll(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, int layermask)
public RaycastHit[] BoxCastAll(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance)
public RaycastHit[] BoxCastAll(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation)
public RaycastHit[] BoxCastAll(Vector3 center, Vector3 halfExtents, Vector3 direction)
private RaycastHit[] INTERNAL_CALL_BoxCastAll(Vector3& center, Vector3& halfExtents, Vector3& direction, Quaternion& orientation, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public int BoxCastNonAlloc(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit[] results, Quaternion orientation, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public int BoxCastNonAlloc(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit[] results, Quaternion orientation, float maxDistance, int layermask)
public int BoxCastNonAlloc(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit[] results, Quaternion orientation, float maxDistance)
public int BoxCastNonAlloc(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit[] results, Quaternion orientation)
public int BoxCastNonAlloc(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit[] results)
private int INTERNAL_CALL_BoxCastNonAlloc(Vector3& center, Vector3& halfExtents, Vector3& direction, RaycastHit[] results, Quaternion& orientation, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
private bool Internal_BoxCast(Vector3 center, Vector3 halfExtents, Quaternion orientation, Vector3 direction, RaycastHit& hitInfo, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
private bool INTERNAL_CALL_Internal_BoxCast(Vector3& center, Vector3& halfExtents, Quaternion& orientation, Vector3& direction, RaycastHit& hitInfo, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, int layerMask)
public bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance)
public bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation)
public bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction)
public bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit& hitInfo, Quaternion orientation, float maxDistance, int layerMask)
public bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit& hitInfo, Quaternion orientation, float maxDistance)
public bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit& hitInfo, Quaternion orientation)
public bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit& hitInfo)
public bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit& hitInfo, Quaternion orientation, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction)
public float get_penetrationPenaltyForce()
public void set_penetrationPenaltyForce(float value)
public void IgnoreCollision(Collider collider1, Collider collider2, bool ignore)
public void IgnoreCollision(Collider collider1, Collider collider2)
public void IgnoreLayerCollision(int layer1, int layer2, bool ignore)
public void IgnoreLayerCollision(int layer1, int layer2)
public bool GetIgnoreLayerCollision(int layer1, int layer2)
private bool Internal_Raycast(Vector3 origin, Vector3 direction, RaycastHit& hitInfo, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
private bool INTERNAL_CALL_Internal_Raycast(Vector3& origin, Vector3& direction, RaycastHit& hitInfo, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
private bool Internal_CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit& hitInfo, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
private bool INTERNAL_CALL_Internal_CapsuleCast(Vector3& point1, Vector3& point2, float radius, Vector3& direction, RaycastHit& hitInfo, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
private bool Internal_RaycastTest(Vector3 origin, Vector3 direction, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
private bool INTERNAL_CALL_Internal_RaycastTest(Vector3& origin, Vector3& direction, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction)
public bool ComputePenetration(Collider colliderA, Vector3 positionA, Quaternion rotationA, Collider colliderB, Vector3 positionB, Quaternion rotationB, Vector3& direction, Single& distance)
private bool INTERNAL_CALL_ComputePenetration(Collider colliderA, Vector3& positionA, Quaternion& rotationA, Collider colliderB, Vector3& positionB, Quaternion& rotationB, Vector3& direction, Single& distance)
public Vector3 ClosestPoint(Vector3 point, Collider collider, Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_ClosestPoint(Vector3& point, Collider collider, Vector3& position, Quaternion& rotation, Vector3& value)
public void Simulate(float step)
public bool get_autoSimulation()
public void set_autoSimulation(bool value)
}
public UnityEngine.Physics2D : object {
public int IgnoreRaycastLayer
public int DefaultRaycastLayers
public int AllLayers
private List`1<Rigidbody2D> m_LastDisabledRigidbody2D
public int velocityIterations
public int positionIterations
public Vector2 gravity
public bool queriesHitTriggers
public bool queriesStartInColliders
public bool changeStopsCallbacks
public bool callbacksOnDisable
public bool autoSimulation
public float velocityThreshold
public float maxLinearCorrection
public float maxAngularCorrection
public float maxTranslationSpeed
public float maxRotationSpeed
public float defaultContactOffset
public float baumgarteScale
public float baumgarteTOIScale
public float timeToSleep
public float linearSleepTolerance
public float angularSleepTolerance
public bool alwaysShowColliders
public bool showColliderSleep
public bool showColliderContacts
public bool showColliderAABB
public float contactArrowScale
public Color colliderAwakeColor
public Color colliderAsleepColor
public Color colliderContactColor
public Color colliderAABBColor
public int get_velocityIterations()
public void set_velocityIterations(int value)
public int get_positionIterations()
public void set_positionIterations(int value)
public Vector2 get_gravity()
public void set_gravity(Vector2 value)
private void INTERNAL_get_gravity(Vector2& value)
private void INTERNAL_set_gravity(Vector2& value)
public bool get_queriesHitTriggers()
public void set_queriesHitTriggers(bool value)
public bool get_queriesStartInColliders()
public void set_queriesStartInColliders(bool value)
public bool get_changeStopsCallbacks()
public void set_changeStopsCallbacks(bool value)
public bool get_callbacksOnDisable()
public void set_callbacksOnDisable(bool value)
public bool get_autoSimulation()
public void set_autoSimulation(bool value)
public float get_velocityThreshold()
public void set_velocityThreshold(float value)
public float get_maxLinearCorrection()
public void set_maxLinearCorrection(float value)
public float get_maxAngularCorrection()
public void set_maxAngularCorrection(float value)
public float get_maxTranslationSpeed()
public void set_maxTranslationSpeed(float value)
public float get_maxRotationSpeed()
public void set_maxRotationSpeed(float value)
public float get_defaultContactOffset()
public void set_defaultContactOffset(float value)
public float get_baumgarteScale()
public void set_baumgarteScale(float value)
public float get_baumgarteTOIScale()
public void set_baumgarteTOIScale(float value)
public float get_timeToSleep()
public void set_timeToSleep(float value)
public float get_linearSleepTolerance()
public void set_linearSleepTolerance(float value)
public float get_angularSleepTolerance()
public void set_angularSleepTolerance(float value)
public bool get_alwaysShowColliders()
public void set_alwaysShowColliders(bool value)
public bool get_showColliderSleep()
public void set_showColliderSleep(bool value)
public bool get_showColliderContacts()
public void set_showColliderContacts(bool value)
public bool get_showColliderAABB()
public void set_showColliderAABB(bool value)
public float get_contactArrowScale()
public void set_contactArrowScale(float value)
public Color get_colliderAwakeColor()
public void set_colliderAwakeColor(Color value)
private void INTERNAL_get_colliderAwakeColor(Color& value)
private void INTERNAL_set_colliderAwakeColor(Color& value)
public Color get_colliderAsleepColor()
public void set_colliderAsleepColor(Color value)
private void INTERNAL_get_colliderAsleepColor(Color& value)
private void INTERNAL_set_colliderAsleepColor(Color& value)
public Color get_colliderContactColor()
public void set_colliderContactColor(Color value)
private void INTERNAL_get_colliderContactColor(Color& value)
private void INTERNAL_set_colliderContactColor(Color& value)
public Color get_colliderAABBColor()
public void set_colliderAABBColor(Color value)
private void INTERNAL_get_colliderAABBColor(Color& value)
private void INTERNAL_set_colliderAABBColor(Color& value)
public bool Simulate(float step)
public void IgnoreCollision(Collider2D collider1, Collider2D collider2, bool ignore)
public void IgnoreCollision(Collider2D collider1, Collider2D collider2)
public bool GetIgnoreCollision(Collider2D collider1, Collider2D collider2)
public void IgnoreLayerCollision(int layer1, int layer2, bool ignore)
public void IgnoreLayerCollision(int layer1, int layer2)
public bool GetIgnoreLayerCollision(int layer1, int layer2)
public void SetLayerCollisionMask(int layer, int layerMask)
public int GetLayerCollisionMask(int layer)
public bool IsTouching(Collider2D collider1, Collider2D collider2)
public bool IsTouching(Collider2D collider1, Collider2D collider2, ContactFilter2D contactFilter)
private bool Internal_IsTouching(Collider2D collider1, Collider2D collider2, ContactFilter2D contactFilter)
private bool INTERNAL_CALL_Internal_IsTouching(Collider2D collider1, Collider2D collider2, ContactFilter2D& contactFilter)
public bool IsTouching(Collider2D collider, ContactFilter2D contactFilter)
private bool INTERNAL_CALL_IsTouching(Collider2D collider, ContactFilter2D& contactFilter)
public bool IsTouchingLayers(Collider2D collider, int layerMask)
public bool IsTouchingLayers(Collider2D collider)
public ColliderDistance2D Distance(Collider2D colliderA, Collider2D colliderB)
internal void SetEditorDragMovement(bool dragging, GameObject[] objs)
public RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask, float minDepth)
public RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask)
public RaycastHit2D Linecast(Vector2 start, Vector2 end)
public RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask, float minDepth, float maxDepth)
public RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask, float minDepth)
public RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask)
public RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end)
public RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask, float minDepth, float maxDepth)
public int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results, int layerMask, float minDepth)
public int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results, int layerMask)
public int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results)
public int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results, int layerMask, float minDepth, float maxDepth)
public int Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter, RaycastHit2D[] results)
private void Internal_Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter, RaycastHit2D& raycastHit)
private void INTERNAL_CALL_Internal_Linecast(Vector2& start, Vector2& end, ContactFilter2D& contactFilter, RaycastHit2D& raycastHit)
private RaycastHit2D[] Internal_LinecastAll(Vector2 start, Vector2 end, ContactFilter2D contactFilter)
private RaycastHit2D[] INTERNAL_CALL_Internal_LinecastAll(Vector2& start, Vector2& end, ContactFilter2D& contactFilter)
private int Internal_LinecastNonAlloc(Vector2 start, Vector2 end, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int INTERNAL_CALL_Internal_LinecastNonAlloc(Vector2& start, Vector2& end, ContactFilter2D& contactFilter, RaycastHit2D[] results)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask)
public RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance)
public RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction)
public RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth)
public int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask)
public int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance)
public int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results)
public int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth)
public int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
private void Internal_Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D& raycastHit)
private void INTERNAL_CALL_Internal_Raycast(Vector2& origin, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D& raycastHit)
private RaycastHit2D[] Internal_RaycastAll(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter)
private RaycastHit2D[] INTERNAL_CALL_Internal_RaycastAll(Vector2& origin, Vector2& direction, float distance, ContactFilter2D& contactFilter)
private int Internal_RaycastNonAlloc(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int INTERNAL_CALL_Internal_RaycastNonAlloc(Vector2& origin, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask)
public RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance)
public RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction)
public RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth)
public int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask)
public int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance)
public int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results)
public int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth)
public int CircleCast(Vector2 origin, float radius, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int CircleCast(Vector2 origin, float radius, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
private void Internal_CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D& raycastHit)
private void INTERNAL_CALL_Internal_CircleCast(Vector2& origin, float radius, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D& raycastHit)
private RaycastHit2D[] Internal_CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter)
private RaycastHit2D[] INTERNAL_CALL_Internal_CircleCastAll(Vector2& origin, float radius, Vector2& direction, float distance, ContactFilter2D& contactFilter)
private int Internal_CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int INTERNAL_CALL_Internal_CircleCastNonAlloc(Vector2& origin, float radius, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask)
public RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance)
public RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction)
public RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth)
public int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask)
public int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance)
public int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results)
public int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth)
public int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
private void Internal_BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D& raycastHit)
private void INTERNAL_CALL_Internal_BoxCast(Vector2& origin, Vector2& size, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D& raycastHit)
private RaycastHit2D[] Internal_BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter)
private RaycastHit2D[] INTERNAL_CALL_Internal_BoxCastAll(Vector2& origin, Vector2& size, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter)
private int Internal_BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int INTERNAL_CALL_Internal_BoxCastNonAlloc(Vector2& origin, Vector2& size, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask)
public RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance)
public RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction)
public RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth)
public int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask)
public int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance)
public int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results)
public int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth)
public int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
private void Internal_CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D& raycastHit)
private void INTERNAL_CALL_Internal_CapsuleCast(Vector2& origin, Vector2& size, CapsuleDirection2D capsuleDirection, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D& raycastHit)
private RaycastHit2D[] Internal_CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter)
private RaycastHit2D[] INTERNAL_CALL_Internal_CapsuleCastAll(Vector2& origin, Vector2& size, CapsuleDirection2D capsuleDirection, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter)
private int Internal_CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int INTERNAL_CALL_Internal_CapsuleCastNonAlloc(Vector2& origin, Vector2& size, CapsuleDirection2D capsuleDirection, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
private void Internal_GetRayIntersection(Ray ray, float distance, int layerMask, RaycastHit2D& raycastHit)
private void INTERNAL_CALL_Internal_GetRayIntersection(Ray& ray, float distance, int layerMask, RaycastHit2D& raycastHit)
public RaycastHit2D GetRayIntersection(Ray ray, float distance)
public RaycastHit2D GetRayIntersection(Ray ray)
public RaycastHit2D GetRayIntersection(Ray ray, float distance, int layerMask)
public RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance, int layerMask)
public RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance)
public RaycastHit2D[] GetRayIntersectionAll(Ray ray)
private RaycastHit2D[] INTERNAL_CALL_GetRayIntersectionAll(Ray& ray, float distance, int layerMask)
public int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance, int layerMask)
public int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance)
public int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results)
private int INTERNAL_CALL_GetRayIntersectionNonAlloc(Ray& ray, RaycastHit2D[] results, float distance, int layerMask)
public Collider2D OverlapPoint(Vector2 point, int layerMask, float minDepth)
public Collider2D OverlapPoint(Vector2 point, int layerMask)
public Collider2D OverlapPoint(Vector2 point)
public Collider2D OverlapPoint(Vector2 point, int layerMask, float minDepth, float maxDepth)
public Collider2D[] OverlapPointAll(Vector2 point, int layerMask, float minDepth)
public Collider2D[] OverlapPointAll(Vector2 point, int layerMask)
public Collider2D[] OverlapPointAll(Vector2 point)
public Collider2D[] OverlapPointAll(Vector2 point, int layerMask, float minDepth, float maxDepth)
public int OverlapPointNonAlloc(Vector2 point, Collider2D[] results, int layerMask, float minDepth)
public int OverlapPointNonAlloc(Vector2 point, Collider2D[] results, int layerMask)
public int OverlapPointNonAlloc(Vector2 point, Collider2D[] results)
public int OverlapPointNonAlloc(Vector2 point, Collider2D[] results, int layerMask, float minDepth, float maxDepth)
public int OverlapPoint(Vector2 point, ContactFilter2D contactFilter, Collider2D[] results)
private Collider2D Internal_OverlapPoint(Vector2 point, ContactFilter2D contactFilter)
private Collider2D INTERNAL_CALL_Internal_OverlapPoint(Vector2& point, ContactFilter2D& contactFilter)
private Collider2D[] Internal_OverlapPointAll(Vector2 point, ContactFilter2D contactFilter)
private Collider2D[] INTERNAL_CALL_Internal_OverlapPointAll(Vector2& point, ContactFilter2D& contactFilter)
private int Internal_OverlapPointNonAlloc(Vector2 point, ContactFilter2D contactFilter, Collider2D[] results)
private int INTERNAL_CALL_Internal_OverlapPointNonAlloc(Vector2& point, ContactFilter2D& contactFilter, Collider2D[] results)
public Collider2D OverlapCircle(Vector2 point, float radius, int layerMask, float minDepth)
public Collider2D OverlapCircle(Vector2 point, float radius, int layerMask)
public Collider2D OverlapCircle(Vector2 point, float radius)
public Collider2D OverlapCircle(Vector2 point, float radius, int layerMask, float minDepth, float maxDepth)
public Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask, float minDepth)
public Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask)
public Collider2D[] OverlapCircleAll(Vector2 point, float radius)
public Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask, float minDepth, float maxDepth)
public int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, int layerMask, float minDepth)
public int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, int layerMask)
public int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results)
public int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, int layerMask, float minDepth, float maxDepth)
public int OverlapCircle(Vector2 point, float radius, ContactFilter2D contactFilter, Collider2D[] results)
private Collider2D Internal_OverlapCircle(Vector2 point, float radius, ContactFilter2D contactFilter)
private Collider2D INTERNAL_CALL_Internal_OverlapCircle(Vector2& point, float radius, ContactFilter2D& contactFilter)
private Collider2D[] Internal_OverlapCircleAll(Vector2 point, float radius, ContactFilter2D contactFilter)
private Collider2D[] INTERNAL_CALL_Internal_OverlapCircleAll(Vector2& point, float radius, ContactFilter2D& contactFilter)
private int Internal_OverlapCircleNonAlloc(Vector2 point, float radius, ContactFilter2D contactFilter, Collider2D[] results)
private int INTERNAL_CALL_Internal_OverlapCircleNonAlloc(Vector2& point, float radius, ContactFilter2D& contactFilter, Collider2D[] results)
public Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth)
public Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, int layerMask)
public Collider2D OverlapBox(Vector2 point, Vector2 size, float angle)
public Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth, float maxDepth)
public Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth)
public Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask)
public Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle)
public Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth, float maxDepth)
public int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results, int layerMask, float minDepth)
public int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results, int layerMask)
public int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results)
public int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results, int layerMask, float minDepth, float maxDepth)
public int OverlapBox(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter, Collider2D[] results)
private Collider2D Internal_OverlapBox(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter)
private Collider2D INTERNAL_CALL_Internal_OverlapBox(Vector2& point, Vector2& size, float angle, ContactFilter2D& contactFilter)
private Collider2D[] Internal_OverlapBoxAll(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter)
private Collider2D[] INTERNAL_CALL_Internal_OverlapBoxAll(Vector2& point, Vector2& size, float angle, ContactFilter2D& contactFilter)
private int Internal_OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter, Collider2D[] results)
private int INTERNAL_CALL_Internal_OverlapBoxNonAlloc(Vector2& point, Vector2& size, float angle, ContactFilter2D& contactFilter, Collider2D[] results)
public Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth)
public Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, int layerMask)
public Collider2D OverlapArea(Vector2 pointA, Vector2 pointB)
public Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth)
public Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth)
public Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask)
public Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB)
public Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth)
public int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results, int layerMask, float minDepth)
public int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results, int layerMask)
public int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results)
public int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results, int layerMask, float minDepth, float maxDepth)
public int OverlapArea(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter, Collider2D[] results)
private Collider2D Internal_OverlapArea(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter)
private Collider2D INTERNAL_CALL_Internal_OverlapArea(Vector2& pointA, Vector2& pointB, ContactFilter2D& contactFilter)
private Collider2D[] Internal_OverlapAreaAll(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter)
private Collider2D[] INTERNAL_CALL_Internal_OverlapAreaAll(Vector2& pointA, Vector2& pointB, ContactFilter2D& contactFilter)
private int Internal_OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter, Collider2D[] results)
private int INTERNAL_CALL_Internal_OverlapAreaNonAlloc(Vector2& pointA, Vector2& pointB, ContactFilter2D& contactFilter, Collider2D[] results)
public Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth)
public Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask)
public Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle)
public Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth, float maxDepth)
public Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth)
public Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask)
public Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle)
public Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth, float maxDepth)
public int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask, float minDepth)
public int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask)
public int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results)
public int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask, float minDepth, float maxDepth)
public int OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, Collider2D[] results)
private Collider2D Internal_OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter)
private Collider2D INTERNAL_CALL_Internal_OverlapCapsule(Vector2& point, Vector2& size, CapsuleDirection2D direction, float angle, ContactFilter2D& contactFilter)
private Collider2D[] Internal_OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter)
private Collider2D[] INTERNAL_CALL_Internal_OverlapCapsuleAll(Vector2& point, Vector2& size, CapsuleDirection2D direction, float angle, ContactFilter2D& contactFilter)
private int Internal_OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, Collider2D[] results)
private int INTERNAL_CALL_Internal_OverlapCapsuleNonAlloc(Vector2& point, Vector2& size, CapsuleDirection2D direction, float angle, ContactFilter2D& contactFilter, Collider2D[] results)
public int OverlapCollider(Collider2D collider, ContactFilter2D contactFilter, Collider2D[] results)
private int INTERNAL_CALL_OverlapCollider(Collider2D collider, ContactFilter2D& contactFilter, Collider2D[] results)
internal Rigidbody2D GetRigidbodyFromInstanceID(int instanceID)
internal Collider2D GetColliderFromInstanceID(int instanceID)
private int GetColliderContacts(Collider2D collider, ContactFilter2D contactFilter, ContactPoint2D[] results)
private int INTERNAL_CALL_GetColliderContacts(Collider2D collider, ContactFilter2D& contactFilter, ContactPoint2D[] results)
private int GetRigidbodyContacts(Rigidbody2D rigidbody, ContactFilter2D contactFilter, ContactPoint2D[] results)
private int INTERNAL_CALL_GetRigidbodyContacts(Rigidbody2D rigidbody, ContactFilter2D& contactFilter, ContactPoint2D[] results)
private int GetColliderContactsCollidersOnly(Collider2D collider, ContactFilter2D contactFilter, Collider2D[] results)
private int INTERNAL_CALL_GetColliderContactsCollidersOnly(Collider2D collider, ContactFilter2D& contactFilter, Collider2D[] results)
private int GetRigidbodyContactsCollidersOnly(Rigidbody2D rigidbody, ContactFilter2D contactFilter, Collider2D[] results)
private int INTERNAL_CALL_GetRigidbodyContactsCollidersOnly(Rigidbody2D rigidbody, ContactFilter2D& contactFilter, Collider2D[] results)
public int GetContacts(Collider2D collider, ContactPoint2D[] contacts)
public int GetContacts(Collider2D collider, ContactFilter2D contactFilter, ContactPoint2D[] contacts)
public int GetContacts(Collider2D collider, Collider2D[] colliders)
public int GetContacts(Collider2D collider, ContactFilter2D contactFilter, Collider2D[] colliders)
public int GetContacts(Rigidbody2D rigidbody, ContactPoint2D[] contacts)
public int GetContacts(Rigidbody2D rigidbody, ContactFilter2D contactFilter, ContactPoint2D[] contacts)
public int GetContacts(Rigidbody2D rigidbody, Collider2D[] colliders)
public int GetContacts(Rigidbody2D rigidbody, ContactFilter2D contactFilter, Collider2D[] colliders)
}
public UnityEngine.PhysicsMaterial2D : Object {
public float bounciness
public float friction
public void .ctor(string name)
private void Internal_Create(PhysicsMaterial2D mat, string name)
public float get_bounciness()
public void set_bounciness(float value)
public float get_friction()
public void set_friction(float value)
}
public UnityEngine.Ping : object {
internal IntPtr m_Ptr
public bool isDone
public int time
public string ip
public void .ctor(string address)
public void DestroyPing()
protected void Finalize()
public bool get_isDone()
public int get_time()
public string get_ip()
}
public UnityEngine.Plane : ValueType {
private Vector3 m_Normal
private float m_Distance
public Vector3 normal
public float distance
public Plane flipped
public void .ctor(Vector3 inNormal, Vector3 inPoint)
public void .ctor(Vector3 inNormal, float d)
public void .ctor(Vector3 a, Vector3 b, Vector3 c)
public Vector3 get_normal()
public void set_normal(Vector3 value)
public float get_distance()
public void set_distance(float value)
public void SetNormalAndPosition(Vector3 inNormal, Vector3 inPoint)
public void Set3Points(Vector3 a, Vector3 b, Vector3 c)
public void Flip()
public Plane get_flipped()
public void Translate(Vector3 translation)
public Plane Translate(Plane plane, Vector3 translation)
public Vector3 ClosestPointOnPlane(Vector3 point)
public float GetDistanceToPoint(Vector3 point)
public bool GetSide(Vector3 point)
public bool SameSide(Vector3 inPt0, Vector3 inPt1)
public bool Raycast(Ray ray, Single& enter)
public string ToString()
public string ToString(string format)
}
public UnityEngine.PlatformEffector2D : Effector2D {
public bool useOneWay
public bool useOneWayGrouping
public bool useSideFriction
public bool useSideBounce
public float surfaceArc
public float sideArc
public float rotationalOffset
public bool get_useOneWay()
public void set_useOneWay(bool value)
public bool get_useOneWayGrouping()
public void set_useOneWayGrouping(bool value)
public bool get_useSideFriction()
public void set_useSideFriction(bool value)
public bool get_useSideBounce()
public void set_useSideBounce(bool value)
public float get_surfaceArc()
public void set_surfaceArc(float value)
public float get_sideArc()
public void set_sideArc(float value)
public float get_rotationalOffset()
public void set_rotationalOffset(float value)
}
internal UnityEngine.PlatformSelection : Enum {
public int value__
public PlatformSelection Native
public PlatformSelection Mac
public PlatformSelection Windows
}
public UnityEngine.Playables.AnimationPlayableUtilities : object {
public void Play(Animator animator, Playable playable, PlayableGraph graph)
public AnimationClipPlayable PlayClip(Animator animator, AnimationClip clip, PlayableGraph& graph)
public AnimationMixerPlayable PlayMixer(Animator animator, int inputCount, PlayableGraph& graph)
public AnimationLayerMixerPlayable PlayLayerMixer(Animator animator, int inputCount, PlayableGraph& graph)
public AnimatorControllerPlayable PlayAnimatorController(Animator animator, RuntimeAnimatorController controller, PlayableGraph& graph)
}
public UnityEngine.Playables.AudioPlayableGraphExtensions : object {
internal bool InternalCreateAudioOutput(PlayableGraph& graph, string name, PlayableOutputHandle& handle)
private bool INTERNAL_CALL_InternalCreateAudioOutput(PlayableGraph& graph, string name, PlayableOutputHandle& handle)
}
public UnityEngine.Playables.DataStreamType : Enum {
public int value__
public DataStreamType Animation
public DataStreamType Audio
public DataStreamType Video
public DataStreamType None
}
public UnityEngine.Playables.DirectorUpdateMode : Enum {
public int value__
public DirectorUpdateMode DSPClock
public DirectorUpdateMode GameTime
public DirectorUpdateMode UnscaledGameTime
public DirectorUpdateMode Manual
}
public UnityEngine.Playables.DirectorWrapMode : Enum {
public int value__
public DirectorWrapMode Hold
public DirectorWrapMode Loop
public DirectorWrapMode None
}
public UnityEngine.Playables.FrameData : ValueType {
internal ulong m_FrameID
internal double m_DeltaTime
internal float m_Weight
internal float m_EffectiveWeight
internal float m_EffectiveSpeed
internal Flags m_Flags
public ulong frameId
public float deltaTime
public float weight
public float effectiveWeight
public float effectiveSpeed
public EvaluationType evaluationType
public bool seekOccurred
public bool timeLooped
public bool timeHeld
public ulong get_frameId()
public float get_deltaTime()
public float get_weight()
public float get_effectiveWeight()
public float get_effectiveSpeed()
public EvaluationType get_evaluationType()
public bool get_seekOccurred()
public bool get_timeLooped()
public bool get_timeHeld()
}
public UnityEngine.Playables.IPlayable {
public PlayableHandle GetHandle()
}
public UnityEngine.Playables.IPlayableAsset {
public double duration
public IEnumerable`1<PlayableBinding> outputs
public Playable CreatePlayable(PlayableGraph graph, GameObject owner)
public double get_duration()
public IEnumerable`1<PlayableBinding> get_outputs()
}
public UnityEngine.Playables.IPlayableBehaviour {
public void OnGraphStart(Playable playable)
public void OnGraphStop(Playable playable)
public void OnPlayableCreate(Playable playable)
public void OnPlayableDestroy(Playable playable)
public void OnBehaviourPlay(Playable playable, FrameData info)
public void OnBehaviourPause(Playable playable, FrameData info)
public void PrepareFrame(Playable playable, FrameData info)
public void ProcessFrame(Playable playable, FrameData info, object playerData)
}
public UnityEngine.Playables.IPlayableOutput {
public PlayableOutputHandle GetHandle()
}
public UnityEngine.Playables.Playable : ValueType {
private PlayableHandle m_Handle
private Playable m_NullPlayable
public Playable Null
internal void .ctor(PlayableHandle handle)
public Playable get_Null()
public Playable Create(PlayableGraph graph, int inputCount)
public PlayableHandle GetHandle()
public bool IsPlayableOfType()
public Type GetPlayableType()
public bool Equals(Playable other)
}
public UnityEngine.Playables.PlayableAsset : ScriptableObject {
public double duration
public IEnumerable`1<PlayableBinding> outputs
public Playable CreatePlayable(PlayableGraph graph, GameObject owner)
public double get_duration()
public IEnumerable`1<PlayableBinding> get_outputs()
internal void Internal_CreatePlayable(PlayableAsset asset, PlayableGraph graph, GameObject go, IntPtr ptr)
internal void Internal_GetPlayableAssetDuration(PlayableAsset asset, IntPtr ptrToDouble)
}
public UnityEngine.Playables.PlayableBehaviour : object {
public void OnGraphStart(Playable playable)
public void OnGraphStop(Playable playable)
public void OnPlayableCreate(Playable playable)
public void OnPlayableDestroy(Playable playable)
public void OnBehaviourPlay(Playable playable, FrameData info)
public void OnBehaviourPause(Playable playable, FrameData info)
public void PrepareFrame(Playable playable, FrameData info)
public void ProcessFrame(Playable playable, FrameData info, object playerData)
public object Clone()
}
public UnityEngine.Playables.PlayableBinding : ValueType {
public PlayableBinding[] None
public double DefaultDuration
private string <streamName>k__BackingField
private DataStreamType <streamType>k__BackingField
private Object <sourceObject>k__BackingField
private Type <sourceBindingType>k__BackingField
public string streamName
public DataStreamType streamType
public Object sourceObject
public Type sourceBindingType
public string get_streamName()
public void set_streamName(string value)
public DataStreamType get_streamType()
public void set_streamType(DataStreamType value)
public Object get_sourceObject()
public void set_sourceObject(Object value)
public Type get_sourceBindingType()
public void set_sourceBindingType(Type value)
}
public UnityEngine.Playables.PlayableDirector : Behaviour {
public PlayState state
public PlayableAsset playableAsset
public DirectorWrapMode extrapolationMode
public DirectorUpdateMode timeUpdateMode
public double time
public double initialTime
public double duration
public PlayableGraph playableGraph
public PlayState get_state()
public PlayableAsset get_playableAsset()
public void set_playableAsset(PlayableAsset value)
public DirectorWrapMode get_extrapolationMode()
public void set_extrapolationMode(DirectorWrapMode value)
public DirectorUpdateMode get_timeUpdateMode()
public void set_timeUpdateMode(DirectorUpdateMode value)
public double get_time()
public void set_time(double value)
public double get_initialTime()
public void set_initialTime(double value)
public double get_duration()
public void Evaluate()
public void DeferredEvaluate()
public void Play(PlayableAsset asset)
public void Play(PlayableAsset asset, DirectorWrapMode mode)
private void SetPlayableAssetInternal(ScriptableObject asset)
private ScriptableObject GetPlayableAssetInternal()
public void Play()
public void Stop()
internal void StopImmediately()
public void Pause()
public void Resume()
public void SetReferenceValue(PropertyName id, Object value)
private void INTERNAL_CALL_SetReferenceValue(PlayableDirector self, PropertyName& id, Object value)
public Object GetReferenceValue(PropertyName id, Boolean& idValid)
private Object INTERNAL_CALL_GetReferenceValue(PlayableDirector self, PropertyName& id, Boolean& idValid)
public void ClearReferenceValue(PropertyName id)
private void INTERNAL_CALL_ClearReferenceValue(PlayableDirector self, PropertyName& id)
public PlayableGraph get_playableGraph()
private void InternalGetCurrentGraph(PlayableGraph& graph)
private void INTERNAL_CALL_InternalGetCurrentGraph(PlayableDirector self, PlayableGraph& graph)
public void SetGenericBinding(Object key, Object value)
public Object GetGenericBinding(Object key)
internal bool HasGenericBinding(Object key)
}
public UnityEngine.Playables.PlayableExtensions : object {
public bool IsValid(U playable)
public void Destroy(U playable)
public PlayableGraph GetGraph(U playable)
public void SetPlayState(U playable, PlayState value)
public PlayState GetPlayState(U playable)
public void SetSpeed(U playable, double value)
public double GetSpeed(U playable)
public void SetDuration(U playable, double value)
public double GetDuration(U playable)
public void SetTime(U playable, double value)
public double GetTime(U playable)
public void SetDone(U playable, bool value)
public bool IsDone(U playable)
public void SetPropagateSetTime(U playable, bool value)
public bool GetPropagateSetTime(U playable)
public bool CanChangeInputs(U playable)
public bool CanSetWeights(U playable)
public bool CanDestroy(U playable)
public void SetInputCount(U playable, int value)
public int GetInputCount(U playable)
public void SetOutputCount(U playable, int value)
public int GetOutputCount(U playable)
public Playable GetInput(U playable, int inputPort)
public Playable GetOutput(U playable, int outputPort)
public void SetInputWeight(U playable, int inputIndex, float weight)
public void SetInputWeight(U playable, V input, float weight)
public float GetInputWeight(U playable, int inputIndex)
public void ConnectInput(U playable, int inputIndex, V sourcePlayable, int sourceOutputIndex)
public void AddInput(U playable, V sourcePlayable, int sourceOutputIndex)
}
public UnityEngine.Playables.PlayableGraph : ValueType {
internal IntPtr m_Handle
internal int m_Version
public bool IsValid()
private bool IsValidInternal(PlayableGraph& graph)
private bool INTERNAL_CALL_IsValidInternal(PlayableGraph& graph)
public PlayableGraph Create()
internal void CreateInternal(PlayableGraph& graph)
private void INTERNAL_CALL_CreateInternal(PlayableGraph& graph)
public bool IsDone()
internal bool IsDoneInternal(PlayableGraph& graph)
private bool INTERNAL_CALL_IsDoneInternal(PlayableGraph& graph)
public bool IsPlaying()
internal bool IsPlayingInternal(PlayableGraph& graph)
private bool INTERNAL_CALL_IsPlayingInternal(PlayableGraph& graph)
public IExposedPropertyTable GetResolver()
public void SetResolver(IExposedPropertyTable value)
internal IExposedPropertyTable GetResolverInternal(PlayableGraph& graph)
private IExposedPropertyTable INTERNAL_CALL_GetResolverInternal(PlayableGraph& graph)
internal void SetResolverInternal(PlayableGraph& graph, IExposedPropertyTable resolver)
private void INTERNAL_CALL_SetResolverInternal(PlayableGraph& graph, IExposedPropertyTable resolver)
public void Play()
internal void PlayInternal(PlayableGraph& graph)
private void INTERNAL_CALL_PlayInternal(PlayableGraph& graph)
public void Stop()
internal void StopInternal(PlayableGraph& graph)
private void INTERNAL_CALL_StopInternal(PlayableGraph& graph)
public int GetPlayableCount()
internal int GetPlayableCountInternal(PlayableGraph& graph)
private int INTERNAL_CALL_GetPlayableCountInternal(PlayableGraph& graph)
public DirectorUpdateMode GetTimeUpdateMode()
public void SetTimeUpdateMode(DirectorUpdateMode value)
private DirectorUpdateMode GetUpdateModeInternal(PlayableGraph& graph)
private DirectorUpdateMode INTERNAL_CALL_GetUpdateModeInternal(PlayableGraph& graph)
private void SetUpdateModeInternal(PlayableGraph& graph, DirectorUpdateMode mode)
private void INTERNAL_CALL_SetUpdateModeInternal(PlayableGraph& graph, DirectorUpdateMode mode)
internal bool CreateScriptOutputInternal(PlayableGraph& graph, string name, PlayableOutputHandle& handle)
private bool INTERNAL_CALL_CreateScriptOutputInternal(PlayableGraph& graph, string name, PlayableOutputHandle& handle)
internal PlayableHandle CreatePlayableHandle()
private bool CreatePlayableHandleInternal(PlayableGraph& graph, PlayableHandle& handle)
private bool INTERNAL_CALL_CreatePlayableHandleInternal(PlayableGraph& graph, PlayableHandle& handle)
public void Destroy()
private void DestroyInternal(PlayableGraph& graph)
private void INTERNAL_CALL_DestroyInternal(PlayableGraph& graph)
private bool ConnectInternal(PlayableGraph& graph, PlayableHandle source, int sourceOutputPort, PlayableHandle destination, int destinationInputPort)
private bool INTERNAL_CALL_ConnectInternal(PlayableGraph& graph, PlayableHandle& source, int sourceOutputPort, PlayableHandle& destination, int destinationInputPort)
private void DisconnectInternal(PlayableGraph& graph, PlayableHandle playable, int inputPort)
private void INTERNAL_CALL_DisconnectInternal(PlayableGraph& graph, PlayableHandle& playable, int inputPort)
private void DestroyPlayableInternal(PlayableGraph& graph, PlayableHandle playable)
private void INTERNAL_CALL_DestroyPlayableInternal(PlayableGraph& graph, PlayableHandle& playable)
internal void DestroyOutputInternal(PlayableGraph& graph, PlayableOutputHandle handle)
private void INTERNAL_CALL_DestroyOutputInternal(PlayableGraph& graph, PlayableOutputHandle& handle)
private void DestroySubgraphInternal(PlayableGraph& graph, PlayableHandle playable)
private void INTERNAL_CALL_DestroySubgraphInternal(PlayableGraph& graph, PlayableHandle& playable)
public void Evaluate()
public void Evaluate(float deltaTime)
internal void EvaluateInternal(PlayableGraph& graph, float deltaTime)
private void INTERNAL_CALL_EvaluateInternal(PlayableGraph& graph, float deltaTime)
public int GetRootPlayableCount()
internal int GetRootPlayableCountInternal(PlayableGraph& graph)
private int INTERNAL_CALL_GetRootPlayableCountInternal(PlayableGraph& graph)
public Playable GetRootPlayable(int index)
internal void GetRootPlayableInternal(int index, PlayableGraph& graph, PlayableHandle& handle)
private void INTERNAL_CALL_GetRootPlayableInternal(int index, PlayableGraph& graph, PlayableHandle& handle)
private int GetOutputCountInternal(PlayableGraph& graph)
private int INTERNAL_CALL_GetOutputCountInternal(PlayableGraph& graph)
private bool GetOutputInternal(PlayableGraph& graph, int index, PlayableOutputHandle& handle)
private bool INTERNAL_CALL_GetOutputInternal(PlayableGraph& graph, int index, PlayableOutputHandle& handle)
private int GetOutputCountByTypeInternal(PlayableGraph& graph, Type outputType)
private int INTERNAL_CALL_GetOutputCountByTypeInternal(PlayableGraph& graph, Type outputType)
private bool GetOutputByTypeInternal(PlayableGraph& graph, Type outputType, int index, PlayableOutputHandle& handle)
private bool INTERNAL_CALL_GetOutputByTypeInternal(PlayableGraph& graph, Type outputType, int index, PlayableOutputHandle& handle)
public bool Connect(U source, int sourceOutputPort, V destination, int destinationInputPort)
public void Disconnect(U input, int inputPort)
public void DestroyPlayable(U playable)
public void DestroySubgraph(U playable)
public void DestroyOutput(U output)
public int GetOutputCount()
public int GetOutputCountByType()
public PlayableOutput GetOutput(int index)
public PlayableOutput GetOutputByType(int index)
}
public UnityEngine.Playables.PlayableHandle : ValueType {
internal IntPtr m_Handle
internal int m_Version
public PlayableHandle Null
internal T GetObject()
private object GetScriptInstance(PlayableHandle& playable)
private object INTERNAL_CALL_GetScriptInstance(PlayableHandle& playable)
internal void SetScriptInstance(object scriptInstance)
private void SetScriptInstance(PlayableHandle& playable, object scriptInstance)
private void INTERNAL_CALL_SetScriptInstance(PlayableHandle& playable, object scriptInstance)
internal bool IsValid()
private bool IsValidInternal(PlayableHandle& playable)
private bool INTERNAL_CALL_IsValidInternal(PlayableHandle& playable)
private Type GetPlayableTypeOf(PlayableHandle& playable)
private Type INTERNAL_CALL_GetPlayableTypeOf(PlayableHandle& playable)
internal Type GetPlayableType()
internal bool IsPlayableOfType()
public PlayableHandle get_Null()
internal PlayableGraph GetGraph()
internal int GetInputCount()
internal void SetInputCount(int value)
internal int GetOutputCount()
internal void SetOutputCount(int value)
internal PlayState GetPlayState()
internal void SetPlayState(PlayState value)
internal double GetSpeed()
internal void SetSpeed(double value)
internal double GetTime()
internal void SetTime(double value)
internal bool IsDone()
internal void SetDone(bool value)
internal bool GetPropagateSetTime()
internal void SetPropagateSetTime(bool value)
internal bool CanChangeInputs()
internal bool CanSetWeights()
internal bool CanDestroy()
private bool CanChangeInputsInternal(PlayableHandle& playable)
private bool INTERNAL_CALL_CanChangeInputsInternal(PlayableHandle& playable)
private bool CanSetWeightsInternal(PlayableHandle& playable)
private bool INTERNAL_CALL_CanSetWeightsInternal(PlayableHandle& playable)
private bool CanDestroyInternal(PlayableHandle& playable)
private bool INTERNAL_CALL_CanDestroyInternal(PlayableHandle& playable)
private PlayState GetPlayStateInternal(PlayableHandle& playable)
private PlayState INTERNAL_CALL_GetPlayStateInternal(PlayableHandle& playable)
private void SetPlayStateInternal(PlayableHandle& playable, PlayState playState)
private void INTERNAL_CALL_SetPlayStateInternal(PlayableHandle& playable, PlayState playState)
private double GetSpeedInternal(PlayableHandle& playable)
private double INTERNAL_CALL_GetSpeedInternal(PlayableHandle& playable)
private void SetSpeedInternal(PlayableHandle& playable, double speed)
private void INTERNAL_CALL_SetSpeedInternal(PlayableHandle& playable, double speed)
private double GetTimeInternal(PlayableHandle& playable)
private double INTERNAL_CALL_GetTimeInternal(PlayableHandle& playable)
private void SetTimeInternal(PlayableHandle& playable, double time)
private void INTERNAL_CALL_SetTimeInternal(PlayableHandle& playable, double time)
private bool IsDoneInternal(PlayableHandle& playable)
private bool INTERNAL_CALL_IsDoneInternal(PlayableHandle& playable)
private void SetDoneInternal(PlayableHandle& playable, bool isDone)
private void INTERNAL_CALL_SetDoneInternal(PlayableHandle& playable, bool isDone)
internal double GetDuration()
internal void SetDuration(double value)
private double GetDurationInternal(PlayableHandle& playable)
private double INTERNAL_CALL_GetDurationInternal(PlayableHandle& playable)
private void SetDurationInternal(PlayableHandle& playable, double duration)
private void INTERNAL_CALL_SetDurationInternal(PlayableHandle& playable, double duration)
private bool GetPropagateSetTimeInternal(PlayableHandle& playable)
private bool INTERNAL_CALL_GetPropagateSetTimeInternal(PlayableHandle& playable)
private void SetPropagateSetTimeInternal(PlayableHandle& playable, bool value)
private void INTERNAL_CALL_SetPropagateSetTimeInternal(PlayableHandle& playable, bool value)
private void GetGraphInternal(PlayableHandle& playable, PlayableGraph& graph)
private void INTERNAL_CALL_GetGraphInternal(PlayableHandle& playable, PlayableGraph& graph)
private int GetInputCountInternal(PlayableHandle& playable)
private int INTERNAL_CALL_GetInputCountInternal(PlayableHandle& playable)
private void SetInputCountInternal(PlayableHandle& playable, int count)
private void INTERNAL_CALL_SetInputCountInternal(PlayableHandle& playable, int count)
private int GetOutputCountInternal(PlayableHandle& playable)
private int INTERNAL_CALL_GetOutputCountInternal(PlayableHandle& playable)
private void SetOutputCountInternal(PlayableHandle& playable, int count)
private void INTERNAL_CALL_SetOutputCountInternal(PlayableHandle& playable, int count)
internal Playable GetInput(int inputPort)
private PlayableHandle GetInputInternal(PlayableHandle& playable, int index)
private void INTERNAL_CALL_GetInputInternal(PlayableHandle& playable, int index, PlayableHandle& value)
internal Playable GetOutput(int outputPort)
private PlayableHandle GetOutputInternal(PlayableHandle& playable, int index)
private void INTERNAL_CALL_GetOutputInternal(PlayableHandle& playable, int index, PlayableHandle& value)
private void SetInputWeightFromIndexInternal(PlayableHandle& playable, int index, float weight)
private void INTERNAL_CALL_SetInputWeightFromIndexInternal(PlayableHandle& playable, int index, float weight)
internal bool SetInputWeight(int inputIndex, float weight)
private float GetInputWeightFromIndexInternal(PlayableHandle& playable, int index)
private float INTERNAL_CALL_GetInputWeightFromIndexInternal(PlayableHandle& playable, int index)
internal void SetInputWeight(PlayableHandle input, float weight)
private void SetInputWeightInternal(PlayableHandle& playable, PlayableHandle& input, float weight)
private void INTERNAL_CALL_SetInputWeightInternal(PlayableHandle& playable, PlayableHandle& input, float weight)
internal float GetInputWeight(int inputIndex)
internal void Destroy()
public bool op_Equality(PlayableHandle x, PlayableHandle y)
public bool op_Inequality(PlayableHandle x, PlayableHandle y)
public bool Equals(object p)
public int GetHashCode()
internal bool CompareVersion(PlayableHandle lhs, PlayableHandle rhs)
internal bool CheckInputBounds(int inputIndex)
internal bool CheckInputBounds(int inputIndex, bool acceptAny)
}
public UnityEngine.Playables.PlayableOutput : ValueType {
private PlayableOutputHandle m_Handle
private PlayableOutput m_NullPlayableOutput
public PlayableOutput Null
internal void .ctor(PlayableOutputHandle handle)
public PlayableOutput get_Null()
public PlayableOutputHandle GetHandle()
public bool IsPlayableOutputOfType()
public Type GetPlayableOutputType()
public bool Equals(PlayableOutput other)
}
public UnityEngine.Playables.PlayableOutputExtensions : object {
public bool IsOutputValid(U output)
public Object GetReferenceObject(U output)
public void SetReferenceObject(U output, Object value)
public Object GetUserData(U output)
public void SetUserData(U output, Object value)
public Playable GetSourcePlayable(U output)
public void SetSourcePlayable(U output, V value)
public int GetSourceInputPort(U output)
public void SetSourceInputPort(U output, int value)
public float GetWeight(U output)
public void SetWeight(U output, float value)
}
public UnityEngine.Playables.PlayableOutputHandle : ValueType {
internal IntPtr m_Handle
internal int m_Version
public PlayableOutputHandle Null
internal bool IsValid()
internal bool IsValidInternal(PlayableOutputHandle& handle)
private bool INTERNAL_CALL_IsValidInternal(PlayableOutputHandle& handle)
public PlayableOutputHandle get_Null()
internal Type GetPlayableOutputTypeOf(PlayableOutputHandle& handle)
private Type INTERNAL_CALL_GetPlayableOutputTypeOf(PlayableOutputHandle& handle)
internal bool IsPlayableOutputOfType()
internal Object GetReferenceObject()
internal void SetReferenceObject(Object value)
internal Object GetInternalReferenceObject(PlayableOutputHandle& handle)
private Object INTERNAL_CALL_GetInternalReferenceObject(PlayableOutputHandle& handle)
internal void SetInternalReferenceObject(PlayableOutputHandle& handle, Object target)
private void INTERNAL_CALL_SetInternalReferenceObject(PlayableOutputHandle& handle, Object target)
internal Object GetUserData()
internal void SetUserData(Object value)
internal Object GetInternalUserData(PlayableOutputHandle& handle)
private Object INTERNAL_CALL_GetInternalUserData(PlayableOutputHandle& handle)
internal void SetInternalUserData(PlayableOutputHandle& handle, Object target)
private void INTERNAL_CALL_SetInternalUserData(PlayableOutputHandle& handle, Object target)
internal PlayableHandle GetSourcePlayable()
internal void SetSourcePlayable(PlayableHandle value)
internal PlayableHandle GetSourcePlayableInternal(PlayableOutputHandle& handle)
private void INTERNAL_CALL_GetSourcePlayableInternal(PlayableOutputHandle& handle, PlayableHandle& value)
internal void SetSourcePlayableInternal(PlayableOutputHandle& handle, PlayableHandle& target)
private void INTERNAL_CALL_SetSourcePlayableInternal(PlayableOutputHandle& handle, PlayableHandle& target)
internal int GetSourceInputPort()
internal void SetSourceInputPort(int value)
internal int GetSourceInputPortInternal(PlayableOutputHandle& handle)
private int INTERNAL_CALL_GetSourceInputPortInternal(PlayableOutputHandle& handle)
internal void SetSourceInputPortInternal(PlayableOutputHandle& handle, int port)
private void INTERNAL_CALL_SetSourceInputPortInternal(PlayableOutputHandle& handle, int port)
internal float GetWeight()
internal void SetWeight(float value)
internal void SetWeightInternal(PlayableOutputHandle& handle, float weight)
private void INTERNAL_CALL_SetWeightInternal(PlayableOutputHandle& handle, float weight)
internal float GetWeightInternal(PlayableOutputHandle& handle)
private float INTERNAL_CALL_GetWeightInternal(PlayableOutputHandle& handle)
public int GetHashCode()
public bool op_Equality(PlayableOutputHandle lhs, PlayableOutputHandle rhs)
public bool op_Inequality(PlayableOutputHandle lhs, PlayableOutputHandle rhs)
public bool Equals(object p)
internal bool CompareVersion(PlayableOutputHandle lhs, PlayableOutputHandle rhs)
}
public UnityEngine.Playables.PlayState : Enum {
public int value__
public PlayState Paused
public PlayState Playing
}
public UnityEngine.Playables.ScriptPlayable`1 : ValueType {
private PlayableHandle m_Handle
private ScriptPlayable`1<T> m_NullPlayable
public ScriptPlayable`1<T> Null
internal void .ctor(PlayableHandle handle)
public ScriptPlayable`1<T> get_Null()
public ScriptPlayable`1<T> Create(PlayableGraph graph, int inputCount)
public ScriptPlayable`1<T> Create(PlayableGraph graph, T template, int inputCount)
private PlayableHandle CreateHandle(PlayableGraph graph, T template, int inputCount)
private object CreateScriptInstance()
private object CloneScriptInstance(IPlayableBehaviour source)
private object CloneScriptInstanceFromEngineObject(Object source)
private object CloneScriptInstanceFromIClonable(ICloneable source)
public PlayableHandle GetHandle()
public T GetBehaviour()
public Playable op_Implicit(ScriptPlayable`1<T> playable)
public ScriptPlayable`1<T> op_Explicit(Playable playable)
public bool Equals(ScriptPlayable`1<T> other)
}
public UnityEngine.Playables.ScriptPlayableOutput : ValueType {
private PlayableOutputHandle m_Handle
public ScriptPlayableOutput Null
internal void .ctor(PlayableOutputHandle handle)
public ScriptPlayableOutput Create(PlayableGraph graph, string name)
public ScriptPlayableOutput get_Null()
public PlayableOutputHandle GetHandle()
public PlayableOutput op_Implicit(ScriptPlayableOutput output)
public ScriptPlayableOutput op_Explicit(PlayableOutput output)
}
internal UnityEngine.PlayerConnectionInternal : object {
private void UnityEngine.IPlayerEditorConnectionNative.SendMessage(Guid messageId, Byte[] data, int playerId)
private void UnityEngine.IPlayerEditorConnectionNative.RegisterInternal(Guid messageId)
private void UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal(Guid messageId)
private void UnityEngine.IPlayerEditorConnectionNative.Initialize()
private bool UnityEngine.IPlayerEditorConnectionNative.IsConnected()
private void UnityEngine.IPlayerEditorConnectionNative.DisconnectAll()
public bool IsConnected()
public void Initialize()
public void RegisterInternal(string messageId)
public void UnregisterInternal(string messageId)
public void SendMessage(string messageId, Byte[] data, int playerId)
public void DisconnectAll()
}
public UnityEngine.PlayerPrefs : object {
private bool TrySetInt(string key, int value)
private bool TrySetFloat(string key, float value)
private bool TrySetSetString(string key, string value)
public void SetInt(string key, int value)
public int GetInt(string key, int defaultValue)
public int GetInt(string key)
public void SetFloat(string key, float value)
public float GetFloat(string key, float defaultValue)
public float GetFloat(string key)
public void SetString(string key, string value)
public string GetString(string key, string defaultValue)
public string GetString(string key)
public bool HasKey(string key)
public void DeleteKey(string key)
public void DeleteAll()
public void Save()
}
public UnityEngine.PlayerPrefsException : Exception {
public void .ctor(string error)
}
public UnityEngine.PlayMode : Enum {
public int value__
public PlayMode StopSameLayer
public PlayMode StopAll
}
public UnityEngine.PointEffector2D : Effector2D {
public float forceMagnitude
public float forceVariation
public float distanceScale
public float drag
public float angularDrag
public EffectorSelection2D forceSource
public EffectorSelection2D forceTarget
public EffectorForceMode2D forceMode
public float get_forceMagnitude()
public void set_forceMagnitude(float value)
public float get_forceVariation()
public void set_forceVariation(float value)
public float get_distanceScale()
public void set_distanceScale(float value)
public float get_drag()
public void set_drag(float value)
public float get_angularDrag()
public void set_angularDrag(float value)
public EffectorSelection2D get_forceSource()
public void set_forceSource(EffectorSelection2D value)
public EffectorSelection2D get_forceTarget()
public void set_forceTarget(EffectorSelection2D value)
public EffectorForceMode2D get_forceMode()
public void set_forceMode(EffectorForceMode2D value)
}
public UnityEngine.PolygonCollider2D : Collider2D {
public Vector2[] points
public int pathCount
public bool autoTiling
public Vector2[] get_points()
public void set_points(Vector2[] value)
public Vector2[] GetPath(int index)
public void SetPath(int index, Vector2[] points)
public int get_pathCount()
public void set_pathCount(int value)
public int GetTotalPointCount()
public void CreatePrimitive(int sides, Vector2 scale, Vector2 offset)
public void CreatePrimitive(int sides, Vector2 scale)
public void CreatePrimitive(int sides)
private void INTERNAL_CALL_CreatePrimitive(PolygonCollider2D self, int sides, Vector2& scale, Vector2& offset)
public bool get_autoTiling()
public void set_autoTiling(bool value)
}
public UnityEngine.PrimitiveType : Enum {
public int value__
public PrimitiveType Sphere
public PrimitiveType Capsule
public PrimitiveType Cylinder
public PrimitiveType Cube
public PrimitiveType Plane
public PrimitiveType Quad
}
public UnityEngine.ProceduralCacheSize : Enum {
public int value__
public ProceduralCacheSize Tiny
public ProceduralCacheSize Medium
public ProceduralCacheSize Heavy
public ProceduralCacheSize NoLimit
public ProceduralCacheSize None
}
public UnityEngine.ProceduralLoadingBehavior : Enum {
public int value__
public ProceduralLoadingBehavior DoNothing
public ProceduralLoadingBehavior Generate
public ProceduralLoadingBehavior BakeAndKeep
public ProceduralLoadingBehavior BakeAndDiscard
public ProceduralLoadingBehavior Cache
public ProceduralLoadingBehavior DoNothingAndCache
}
public UnityEngine.ProceduralMaterial : Material {
public ProceduralCacheSize cacheSize
public int animationUpdateRate
public bool isProcessing
public bool isCachedDataAvailable
public bool isLoadTimeGenerated
public ProceduralLoadingBehavior loadingBehavior
public bool isSupported
public ProceduralProcessorUsage substanceProcessorUsage
public string preset
public bool isReadable
public bool isFrozen
public ProceduralPropertyDescription[] GetProceduralPropertyDescriptions()
public bool HasProceduralProperty(string inputName)
public bool GetProceduralBoolean(string inputName)
public bool IsProceduralPropertyVisible(string inputName)
public void SetProceduralBoolean(string inputName, bool value)
public float GetProceduralFloat(string inputName)
public void SetProceduralFloat(string inputName, float value)
public Vector4 GetProceduralVector(string inputName)
private void INTERNAL_CALL_GetProceduralVector(ProceduralMaterial self, string inputName, Vector4& value)
public void SetProceduralVector(string inputName, Vector4 value)
private void INTERNAL_CALL_SetProceduralVector(ProceduralMaterial self, string inputName, Vector4& value)
public Color GetProceduralColor(string inputName)
private void INTERNAL_CALL_GetProceduralColor(ProceduralMaterial self, string inputName, Color& value)
public void SetProceduralColor(string inputName, Color value)
private void INTERNAL_CALL_SetProceduralColor(ProceduralMaterial self, string inputName, Color& value)
public int GetProceduralEnum(string inputName)
public void SetProceduralEnum(string inputName, int value)
public Texture2D GetProceduralTexture(string inputName)
public void SetProceduralTexture(string inputName, Texture2D value)
public bool IsProceduralPropertyCached(string inputName)
public void CacheProceduralProperty(string inputName, bool value)
public void ClearCache()
public ProceduralCacheSize get_cacheSize()
public void set_cacheSize(ProceduralCacheSize value)
public int get_animationUpdateRate()
public void set_animationUpdateRate(int value)
public void RebuildTextures()
public void RebuildTexturesImmediately()
public bool get_isProcessing()
public void StopRebuilds()
public bool get_isCachedDataAvailable()
public bool get_isLoadTimeGenerated()
public void set_isLoadTimeGenerated(bool value)
public ProceduralLoadingBehavior get_loadingBehavior()
public bool get_isSupported()
public ProceduralProcessorUsage get_substanceProcessorUsage()
public void set_substanceProcessorUsage(ProceduralProcessorUsage value)
public string get_preset()
public void set_preset(string value)
public Texture[] GetGeneratedTextures()
public ProceduralTexture GetGeneratedTexture(string textureName)
public bool get_isReadable()
public void set_isReadable(bool value)
public void FreezeAndReleaseSourceData()
public bool get_isFrozen()
}
public UnityEngine.ProceduralOutputType : Enum {
public int value__
public ProceduralOutputType Unknown
public ProceduralOutputType Diffuse
public ProceduralOutputType Normal
public ProceduralOutputType Height
public ProceduralOutputType Emissive
public ProceduralOutputType Specular
public ProceduralOutputType Opacity
public ProceduralOutputType Smoothness
public ProceduralOutputType AmbientOcclusion
public ProceduralOutputType DetailMask
public ProceduralOutputType Metallic
public ProceduralOutputType Roughness
}
public UnityEngine.ProceduralProcessorUsage : Enum {
public int value__
public ProceduralProcessorUsage Unsupported
public ProceduralProcessorUsage One
public ProceduralProcessorUsage Half
public ProceduralProcessorUsage All
}
public UnityEngine.ProceduralPropertyDescription : object {
public string name
public string label
public string group
public ProceduralPropertyType type
public bool hasRange
public float minimum
public float maximum
public float step
public String[] enumOptions
public String[] componentLabels
}
public UnityEngine.ProceduralPropertyType : Enum {
public int value__
public ProceduralPropertyType Boolean
public ProceduralPropertyType Float
public ProceduralPropertyType Vector2
public ProceduralPropertyType Vector3
public ProceduralPropertyType Vector4
public ProceduralPropertyType Color3
public ProceduralPropertyType Color4
public ProceduralPropertyType Enum
public ProceduralPropertyType Texture
}
public UnityEngine.ProceduralTexture : Texture {
public bool hasAlpha
public TextureFormat format
public ProceduralOutputType GetProceduralOutputType()
internal ProceduralMaterial GetProceduralMaterial()
public bool get_hasAlpha()
internal bool HasBeenGenerated()
public TextureFormat get_format()
public Color32[] GetPixels32(int x, int y, int blockWidth, int blockHeight)
}
public UnityEngine.Profiling.CustomSampler : Sampler {
internal CustomSampler s_InvalidCustomSampler
public CustomSampler Create(string name)
private CustomSampler CreateInternal(string name)
public void Begin()
public void Begin(Object targetObject)
private void BeginWithObject(Object targetObject)
public void End()
}
public UnityEngine.Profiling.Profiler : object {
public bool supported
public string logFile
public bool enableBinaryLog
public bool enabled
public int maxNumberOfSamplesPerFrame
public UInt32 usedHeapSize
public long usedHeapSizeLong
public bool get_supported()
public string get_logFile()
public void set_logFile(string value)
public bool get_enableBinaryLog()
public void set_enableBinaryLog(bool value)
public bool get_enabled()
public void set_enabled(bool value)
public void AddFramesFromFile(string file)
public void BeginSample(string name)
public void BeginSample(string name, Object targetObject)
private void BeginSampleOnly(string name)
public void EndSample()
public int get_maxNumberOfSamplesPerFrame()
public void set_maxNumberOfSamplesPerFrame(int value)
public UInt32 get_usedHeapSize()
public long get_usedHeapSizeLong()
public int GetRuntimeMemorySize(Object o)
public long GetRuntimeMemorySizeLong(Object o)
public UInt32 GetMonoHeapSize()
public long GetMonoHeapSizeLong()
public UInt32 GetMonoUsedSize()
public long GetMonoUsedSizeLong()
public bool SetTempAllocatorRequestedSize(UInt32 size)
public UInt32 GetTempAllocatorSize()
public UInt32 GetTotalAllocatedMemory()
public long GetTotalAllocatedMemoryLong()
public UInt32 GetTotalUnusedReservedMemory()
public long GetTotalUnusedReservedMemoryLong()
public UInt32 GetTotalReservedMemory()
public long GetTotalReservedMemoryLong()
}
public UnityEngine.Profiling.Recorder : object {
internal IntPtr m_Ptr
internal Recorder s_InvalidRecorder
public bool isValid
public bool enabled
public long elapsedNanoseconds
public int sampleBlockCount
protected void Finalize()
public Recorder Get(string samplerName)
public bool get_isValid()
private void DisposeNative()
public bool get_enabled()
public void set_enabled(bool value)
public long get_elapsedNanoseconds()
public int get_sampleBlockCount()
}
public UnityEngine.Profiling.Sampler : object {
internal IntPtr m_Ptr
internal Sampler s_InvalidSampler
public bool isValid
public string name
public bool get_isValid()
public Recorder GetRecorder()
public Sampler Get(string name)
public int GetNames(List`1<string> names)
public string get_name()
private Recorder GetRecorderInternal()
private Sampler GetSamplerInternal(string name)
private int GetSamplerNamesInternal(object namesScriptingPtr)
}
public UnityEngine.Projector : Behaviour {
public float nearClipPlane
public float farClipPlane
public float fieldOfView
public float aspectRatio
public bool orthographic
public float orthographicSize
public int ignoreLayers
public Material material
public float get_nearClipPlane()
public void set_nearClipPlane(float value)
public float get_farClipPlane()
public void set_farClipPlane(float value)
public float get_fieldOfView()
public void set_fieldOfView(float value)
public float get_aspectRatio()
public void set_aspectRatio(float value)
public bool get_orthographic()
public void set_orthographic(bool value)
public float get_orthographicSize()
public void set_orthographicSize(float value)
public int get_ignoreLayers()
public void set_ignoreLayers(int value)
public Material get_material()
public void set_material(Material value)
}
public UnityEngine.PropertyAttribute : Attribute {
private int <order>k__BackingField
public int order
public int get_order()
public void set_order(int value)
}
public UnityEngine.PropertyName : ValueType {
internal int id
public void .ctor(string name)
public void .ctor(PropertyName other)
public void .ctor(int id)
public bool IsNullOrEmpty(PropertyName prop)
public bool op_Equality(PropertyName lhs, PropertyName rhs)
public bool op_Inequality(PropertyName lhs, PropertyName rhs)
public int GetHashCode()
public bool Equals(object other)
public PropertyName op_Implicit(string name)
public PropertyName op_Implicit(int id)
public string ToString()
}
internal UnityEngine.PropertyNameUtils : object {
public PropertyName PropertyNameFromString(string name)
private void PropertyNameFromString_Injected(string name, PropertyName& ret)
}
public UnityEngine.QualityLevel : Enum {
public int value__
public QualityLevel Fastest
public QualityLevel Fast
public QualityLevel Simple
public QualityLevel Good
public QualityLevel Beautiful
public QualityLevel Fantastic
}
public UnityEngine.QualitySettings : Object {
public String[] names
public int pixelLightCount
public ShadowQuality shadows
public ShadowProjection shadowProjection
public int shadowCascades
public float shadowDistance
public ShadowResolution shadowResolution
public float shadowNearPlaneOffset
public float shadowCascade2Split
public Vector3 shadowCascade4Split
public ShadowmaskMode shadowmaskMode
public int masterTextureLimit
public AnisotropicFiltering anisotropicFiltering
public float lodBias
public int maximumLODLevel
public int particleRaycastBudget
public bool softParticles
public bool softVegetation
public bool realtimeReflectionProbes
public bool billboardsFaceCameraPosition
public int maxQueuedFrames
public int vSyncCount
public int antiAliasing
public ColorSpace desiredColorSpace
public ColorSpace activeColorSpace
public BlendWeights blendWeights
public int asyncUploadTimeSlice
public int asyncUploadBufferSize
public float resolutionScalingFixedDPIFactor
public QualityLevel currentLevel
public String[] get_names()
public int GetQualityLevel()
public void SetQualityLevel(int index, bool applyExpensiveChanges)
public void SetQualityLevel(int index)
public void IncreaseLevel(bool applyExpensiveChanges)
public void IncreaseLevel()
public void DecreaseLevel(bool applyExpensiveChanges)
public void DecreaseLevel()
public int get_pixelLightCount()
public void set_pixelLightCount(int value)
public ShadowQuality get_shadows()
public void set_shadows(ShadowQuality value)
public ShadowProjection get_shadowProjection()
public void set_shadowProjection(ShadowProjection value)
public int get_shadowCascades()
public void set_shadowCascades(int value)
public float get_shadowDistance()
public void set_shadowDistance(float value)
public ShadowResolution get_shadowResolution()
public void set_shadowResolution(ShadowResolution value)
public float get_shadowNearPlaneOffset()
public void set_shadowNearPlaneOffset(float value)
public float get_shadowCascade2Split()
public void set_shadowCascade2Split(float value)
public Vector3 get_shadowCascade4Split()
public void set_shadowCascade4Split(Vector3 value)
private void INTERNAL_get_shadowCascade4Split(Vector3& value)
private void INTERNAL_set_shadowCascade4Split(Vector3& value)
public ShadowmaskMode get_shadowmaskMode()
public void set_shadowmaskMode(ShadowmaskMode value)
public int get_masterTextureLimit()
public void set_masterTextureLimit(int value)
public AnisotropicFiltering get_anisotropicFiltering()
public void set_anisotropicFiltering(AnisotropicFiltering value)
public float get_lodBias()
public void set_lodBias(float value)
public int get_maximumLODLevel()
public void set_maximumLODLevel(int value)
public int get_particleRaycastBudget()
public void set_particleRaycastBudget(int value)
public bool get_softParticles()
public void set_softParticles(bool value)
public bool get_softVegetation()
public void set_softVegetation(bool value)
public bool get_realtimeReflectionProbes()
public void set_realtimeReflectionProbes(bool value)
public bool get_billboardsFaceCameraPosition()
public void set_billboardsFaceCameraPosition(bool value)
public int get_maxQueuedFrames()
public void set_maxQueuedFrames(int value)
public int get_vSyncCount()
public void set_vSyncCount(int value)
public int get_antiAliasing()
public void set_antiAliasing(int value)
public ColorSpace get_desiredColorSpace()
public ColorSpace get_activeColorSpace()
public BlendWeights get_blendWeights()
public void set_blendWeights(BlendWeights value)
public int get_asyncUploadTimeSlice()
public void set_asyncUploadTimeSlice(int value)
public int get_asyncUploadBufferSize()
public void set_asyncUploadBufferSize(int value)
public float get_resolutionScalingFixedDPIFactor()
public void set_resolutionScalingFixedDPIFactor(float value)
public QualityLevel get_currentLevel()
public void set_currentLevel(QualityLevel value)
}
public UnityEngine.Quaternion : ValueType {
public float x
public float y
public float z
public float w
private Quaternion identityQuaternion
public float kEpsilon
public Vector3 eulerAngles
public float Item
public Quaternion identity
public void .ctor(float x, float y, float z, float w)
public Quaternion AngleAxis(float angle, Vector3 axis)
private void INTERNAL_CALL_AngleAxis(float angle, Vector3& axis, Quaternion& value)
public void ToAngleAxis(Single& angle, Vector3& axis)
public Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection)
private void INTERNAL_CALL_FromToRotation(Vector3& fromDirection, Vector3& toDirection, Quaternion& value)
public void SetFromToRotation(Vector3 fromDirection, Vector3 toDirection)
public Quaternion LookRotation(Vector3 forward, Vector3 upwards)
public Quaternion LookRotation(Vector3 forward)
private void INTERNAL_CALL_LookRotation(Vector3& forward, Vector3& upwards, Quaternion& value)
public Quaternion Slerp(Quaternion a, Quaternion b, float t)
private void INTERNAL_CALL_Slerp(Quaternion& a, Quaternion& b, float t, Quaternion& value)
public Quaternion SlerpUnclamped(Quaternion a, Quaternion b, float t)
private void INTERNAL_CALL_SlerpUnclamped(Quaternion& a, Quaternion& b, float t, Quaternion& value)
public Quaternion Lerp(Quaternion a, Quaternion b, float t)
private void INTERNAL_CALL_Lerp(Quaternion& a, Quaternion& b, float t, Quaternion& value)
public Quaternion LerpUnclamped(Quaternion a, Quaternion b, float t)
private void INTERNAL_CALL_LerpUnclamped(Quaternion& a, Quaternion& b, float t, Quaternion& value)
public Quaternion RotateTowards(Quaternion from, Quaternion to, float maxDegreesDelta)
public Quaternion Inverse(Quaternion rotation)
private void INTERNAL_CALL_Inverse(Quaternion& rotation, Quaternion& value)
public Vector3 get_eulerAngles()
public void set_eulerAngles(Vector3 value)
public Quaternion Euler(float x, float y, float z)
public Quaternion Euler(Vector3 euler)
private Vector3 Internal_ToEulerRad(Quaternion rotation)
private void INTERNAL_CALL_Internal_ToEulerRad(Quaternion& rotation, Vector3& value)
private Quaternion Internal_FromEulerRad(Vector3 euler)
private void INTERNAL_CALL_Internal_FromEulerRad(Vector3& euler, Quaternion& value)
private void Internal_ToAxisAngleRad(Quaternion q, Vector3& axis, Single& angle)
private void INTERNAL_CALL_Internal_ToAxisAngleRad(Quaternion& q, Vector3& axis, Single& angle)
public Quaternion EulerRotation(float x, float y, float z)
public Quaternion EulerRotation(Vector3 euler)
public void SetEulerRotation(float x, float y, float z)
public void SetEulerRotation(Vector3 euler)
public Vector3 ToEuler()
public Quaternion EulerAngles(float x, float y, float z)
public Quaternion EulerAngles(Vector3 euler)
public void ToAxisAngle(Vector3& axis, Single& angle)
public void SetEulerAngles(float x, float y, float z)
public void SetEulerAngles(Vector3 euler)
public Vector3 ToEulerAngles(Quaternion rotation)
public Vector3 ToEulerAngles()
public Quaternion AxisAngle(Vector3 axis, float angle)
private void INTERNAL_CALL_AxisAngle(Vector3& axis, float angle, Quaternion& value)
public void SetAxisAngle(Vector3 axis, float angle)
public float get_Item(int index)
public void set_Item(int index, float value)
public void Set(float newX, float newY, float newZ, float newW)
public Quaternion get_identity()
public Quaternion op_Multiply(Quaternion lhs, Quaternion rhs)
public Vector3 op_Multiply(Quaternion rotation, Vector3 point)
public bool op_Equality(Quaternion lhs, Quaternion rhs)
public bool op_Inequality(Quaternion lhs, Quaternion rhs)
public float Dot(Quaternion a, Quaternion b)
public void SetLookRotation(Vector3 view)
public void SetLookRotation(Vector3 view, Vector3 up)
public float Angle(Quaternion a, Quaternion b)
private Vector3 Internal_MakePositive(Vector3 euler)
public int GetHashCode()
public bool Equals(object other)
public string ToString()
public string ToString(string format)
}
public UnityEngine.QueryTriggerInteraction : Enum {
public int value__
public QueryTriggerInteraction UseGlobal
public QueryTriggerInteraction Ignore
public QueryTriggerInteraction Collide
}
public UnityEngine.QueueMode : Enum {
public int value__
public QueueMode CompleteOthers
public QueueMode PlayNow
}
public UnityEngine.Random : object {
public int seed
public State state
public float value
public Vector3 insideUnitSphere
public Vector2 insideUnitCircle
public Vector3 onUnitSphere
public Quaternion rotation
public Quaternion rotationUniform
public int get_seed()
public void set_seed(int value)
public void InitState(int seed)
public State get_state()
public void set_state(State value)
private void INTERNAL_get_state(State& value)
private void INTERNAL_set_state(State& value)
public float Range(float min, float max)
public int Range(int min, int max)
private int RandomRangeInt(int min, int max)
public float get_value()
public Vector3 get_insideUnitSphere()
private void INTERNAL_get_insideUnitSphere(Vector3& value)
private void GetRandomUnitCircle(Vector2& output)
public Vector2 get_insideUnitCircle()
public Vector3 get_onUnitSphere()
private void INTERNAL_get_onUnitSphere(Vector3& value)
public Quaternion get_rotation()
private void INTERNAL_get_rotation(Quaternion& value)
public Quaternion get_rotationUniform()
private void INTERNAL_get_rotationUniform(Quaternion& value)
public float RandomRange(float min, float max)
public int RandomRange(int min, int max)
public Color ColorHSV()
public Color ColorHSV(float hueMin, float hueMax)
public Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax)
public Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax, float valueMin, float valueMax)
public Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax, float valueMin, float valueMax, float alphaMin, float alphaMax)
}
public UnityEngine.RangeAttribute : PropertyAttribute {
public float min
public float max
public void .ctor(float min, float max)
}
public UnityEngine.RangeInt : ValueType {
public int start
public int length
public int end
public void .ctor(int start, int length)
public int get_end()
}
public UnityEngine.Ray : ValueType {
private Vector3 m_Origin
private Vector3 m_Direction
public Vector3 origin
public Vector3 direction
public void .ctor(Vector3 origin, Vector3 direction)
public Vector3 get_origin()
public void set_origin(Vector3 value)
public Vector3 get_direction()
public void set_direction(Vector3 value)
public Vector3 GetPoint(float distance)
public string ToString()
public string ToString(string format)
}
public UnityEngine.Ray2D : ValueType {
private Vector2 m_Origin
private Vector2 m_Direction
public Vector2 origin
public Vector2 direction
public void .ctor(Vector2 origin, Vector2 direction)
public Vector2 get_origin()
public void set_origin(Vector2 value)
public Vector2 get_direction()
public void set_direction(Vector2 value)
public Vector2 GetPoint(float distance)
public string ToString()
public string ToString(string format)
}
public UnityEngine.RaycastHit : ValueType {
private Vector3 m_Point
private Vector3 m_Normal
private int m_FaceID
private float m_Distance
private Vector2 m_UV
private Collider m_Collider
public Vector3 point
public Vector3 normal
public Vector3 barycentricCoordinate
public float distance
public int triangleIndex
public Vector2 textureCoord
public Vector2 textureCoord2
public Vector2 textureCoord1
public Vector2 lightmapCoord
public Collider collider
public Rigidbody rigidbody
public Transform transform
private void CalculateRaycastTexCoord(Vector2& output, Collider col, Vector2 uv, Vector3 point, int face, int index)
private void INTERNAL_CALL_CalculateRaycastTexCoord(Vector2& output, Collider col, Vector2& uv, Vector3& point, int face, int index)
public Vector3 get_point()
public void set_point(Vector3 value)
public Vector3 get_normal()
public void set_normal(Vector3 value)
public Vector3 get_barycentricCoordinate()
public void set_barycentricCoordinate(Vector3 value)
public float get_distance()
public void set_distance(float value)
public int get_triangleIndex()
public Vector2 get_textureCoord()
public Vector2 get_textureCoord2()
public Vector2 get_textureCoord1()
public Vector2 get_lightmapCoord()
public Collider get_collider()
public Rigidbody get_rigidbody()
public Transform get_transform()
}
public UnityEngine.RaycastHit2D : ValueType {
private Vector2 m_Centroid
private Vector2 m_Point
private Vector2 m_Normal
private float m_Distance
private float m_Fraction
private Collider2D m_Collider
public Vector2 centroid
public Vector2 point
public Vector2 normal
public float distance
public float fraction
public Collider2D collider
public Rigidbody2D rigidbody
public Transform transform
public Vector2 get_centroid()
public void set_centroid(Vector2 value)
public Vector2 get_point()
public void set_point(Vector2 value)
public Vector2 get_normal()
public void set_normal(Vector2 value)
public float get_distance()
public void set_distance(float value)
public float get_fraction()
public void set_fraction(float value)
public Collider2D get_collider()
public Rigidbody2D get_rigidbody()
public Transform get_transform()
public bool op_Implicit(RaycastHit2D hit)
public int CompareTo(RaycastHit2D other)
}
public UnityEngine.Rect : ValueType {
private float m_XMin
private float m_YMin
private float m_Width
private float m_Height
public Rect zero
public float x
public float y
public Vector2 position
public Vector2 center
public Vector2 min
public Vector2 max
public float width
public float height
public Vector2 size
public float xMin
public float yMin
public float xMax
public float yMax
public float left
public float right
public float top
public float bottom
public void .ctor(float x, float y, float width, float height)
public void .ctor(Vector2 position, Vector2 size)
public void .ctor(Rect source)
public Rect get_zero()
public Rect MinMaxRect(float xmin, float ymin, float xmax, float ymax)
public void Set(float x, float y, float width, float height)
public float get_x()
public void set_x(float value)
public float get_y()
public void set_y(float value)
public Vector2 get_position()
public void set_position(Vector2 value)
public Vector2 get_center()
public void set_center(Vector2 value)
public Vector2 get_min()
public void set_min(Vector2 value)
public Vector2 get_max()
public void set_max(Vector2 value)
public float get_width()
public void set_width(float value)
public float get_height()
public void set_height(float value)
public Vector2 get_size()
public void set_size(Vector2 value)
public float get_xMin()
public void set_xMin(float value)
public float get_yMin()
public void set_yMin(float value)
public float get_xMax()
public void set_xMax(float value)
public float get_yMax()
public void set_yMax(float value)
public bool Contains(Vector2 point)
public bool Contains(Vector3 point)
public bool Contains(Vector3 point, bool allowInverse)
private Rect OrderMinMax(Rect rect)
public bool Overlaps(Rect other)
public bool Overlaps(Rect other, bool allowInverse)
public Vector2 NormalizedToPoint(Rect rectangle, Vector2 normalizedRectCoordinates)
public Vector2 PointToNormalized(Rect rectangle, Vector2 point)
public bool op_Inequality(Rect lhs, Rect rhs)
public bool op_Equality(Rect lhs, Rect rhs)
public int GetHashCode()
public bool Equals(object other)
public string ToString()
public string ToString(string format)
public float get_left()
public float get_right()
public float get_top()
public float get_bottom()
}
public UnityEngine.RectOffset : object {
internal IntPtr m_Ptr
private object m_SourceStyle
public int left
public int right
public int top
public int bottom
public int horizontal
public int vertical
internal void .ctor(object sourceStyle, IntPtr source)
public void .ctor(int left, int right, int top, int bottom)
private void Init()
private void Cleanup()
public int get_left()
public void set_left(int value)
public int get_right()
public void set_right(int value)
public int get_top()
public void set_top(int value)
public int get_bottom()
public void set_bottom(int value)
public int get_horizontal()
public int get_vertical()
public Rect Add(Rect rect)
private void INTERNAL_CALL_Add(RectOffset self, Rect& rect, Rect& value)
public Rect Remove(Rect rect)
private void INTERNAL_CALL_Remove(RectOffset self, Rect& rect, Rect& value)
protected void Finalize()
public string ToString()
}
public UnityEngine.RectTransform : Transform {
private ReapplyDrivenProperties reapplyDrivenProperties
public Rect rect
public Vector2 anchorMin
public Vector2 anchorMax
public Vector3 anchoredPosition3D
public Vector2 anchoredPosition
public Vector2 sizeDelta
public Vector2 pivot
internal Object drivenByObject
internal DrivenTransformProperties drivenProperties
public Vector2 offsetMin
public Vector2 offsetMax
public Rect get_rect()
private void INTERNAL_get_rect(Rect& value)
public Vector2 get_anchorMin()
public void set_anchorMin(Vector2 value)
private void INTERNAL_get_anchorMin(Vector2& value)
private void INTERNAL_set_anchorMin(Vector2& value)
public Vector2 get_anchorMax()
public void set_anchorMax(Vector2 value)
private void INTERNAL_get_anchorMax(Vector2& value)
private void INTERNAL_set_anchorMax(Vector2& value)
public Vector3 get_anchoredPosition3D()
public void set_anchoredPosition3D(Vector3 value)
public Vector2 get_anchoredPosition()
public void set_anchoredPosition(Vector2 value)
private void INTERNAL_get_anchoredPosition(Vector2& value)
private void INTERNAL_set_anchoredPosition(Vector2& value)
public Vector2 get_sizeDelta()
public void set_sizeDelta(Vector2 value)
private void INTERNAL_get_sizeDelta(Vector2& value)
private void INTERNAL_set_sizeDelta(Vector2& value)
public Vector2 get_pivot()
public void set_pivot(Vector2 value)
private void INTERNAL_get_pivot(Vector2& value)
private void INTERNAL_set_pivot(Vector2& value)
internal Object get_drivenByObject()
internal void set_drivenByObject(Object value)
internal DrivenTransformProperties get_drivenProperties()
internal void set_drivenProperties(DrivenTransformProperties value)
public void add_reapplyDrivenProperties(ReapplyDrivenProperties value)
public void remove_reapplyDrivenProperties(ReapplyDrivenProperties value)
internal void SendReapplyDrivenProperties(RectTransform driven)
public void GetLocalCorners(Vector3[] fourCornersArray)
public void GetWorldCorners(Vector3[] fourCornersArray)
internal Rect GetRectInParentSpace()
public Vector2 get_offsetMin()
public void set_offsetMin(Vector2 value)
public Vector2 get_offsetMax()
public void set_offsetMax(Vector2 value)
public void SetInsetAndSizeFromParentEdge(Edge edge, float inset, float size)
public void SetSizeWithCurrentAnchors(Axis axis, float size)
private Vector2 GetParentSize()
}
public UnityEngine.RectTransformUtility : object {
private Vector3[] s_Corners
public bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint)
public bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, Vector3& worldPoint)
public bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, Vector2& localPoint)
public Ray ScreenPointToRay(Camera cam, Vector2 screenPos)
public Vector2 WorldToScreenPoint(Camera cam, Vector3 worldPoint)
public Bounds CalculateRelativeRectTransformBounds(Transform root, Transform child)
public Bounds CalculateRelativeRectTransformBounds(Transform trans)
public void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive)
public void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive)
private Vector2 GetTransposed(Vector2 input)
public bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam)
private bool INTERNAL_CALL_RectangleContainsScreenPoint(RectTransform rect, Vector2& screenPoint, Camera cam)
public Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas)
private void INTERNAL_CALL_PixelAdjustPoint(Vector2& point, Transform elementTransform, Canvas canvas, Vector2& value)
public Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas)
private void INTERNAL_CALL_PixelAdjustRect(RectTransform rectTransform, Canvas canvas, Rect& value)
}
public UnityEngine.ReflectionProbe : Behaviour {
public ReflectionProbeType type
public bool hdr
public Vector3 size
public Vector3 center
public float nearClipPlane
public float farClipPlane
public float shadowDistance
public int resolution
public int cullingMask
public ReflectionProbeClearFlags clearFlags
public Color backgroundColor
public float intensity
public float blendDistance
public bool boxProjection
public Bounds bounds
public ReflectionProbeMode mode
public int importance
public ReflectionProbeRefreshMode refreshMode
public ReflectionProbeTimeSlicingMode timeSlicingMode
public Texture bakedTexture
public Texture customBakedTexture
public Texture texture
public Vector4 textureHDRDecodeValues
public int minBakedCubemapResolution
public int maxBakedCubemapResolution
public Vector4 defaultTextureHDRDecodeValues
public Texture defaultTexture
public ReflectionProbeType get_type()
public void set_type(ReflectionProbeType value)
public bool get_hdr()
public void set_hdr(bool value)
public Vector3 get_size()
public void set_size(Vector3 value)
private void INTERNAL_get_size(Vector3& value)
private void INTERNAL_set_size(Vector3& value)
public Vector3 get_center()
public void set_center(Vector3 value)
private void INTERNAL_get_center(Vector3& value)
private void INTERNAL_set_center(Vector3& value)
public float get_nearClipPlane()
public void set_nearClipPlane(float value)
public float get_farClipPlane()
public void set_farClipPlane(float value)
public float get_shadowDistance()
public void set_shadowDistance(float value)
public int get_resolution()
public void set_resolution(int value)
public int get_cullingMask()
public void set_cullingMask(int value)
public ReflectionProbeClearFlags get_clearFlags()
public void set_clearFlags(ReflectionProbeClearFlags value)
public Color get_backgroundColor()
public void set_backgroundColor(Color value)
private void INTERNAL_get_backgroundColor(Color& value)
private void INTERNAL_set_backgroundColor(Color& value)
public float get_intensity()
public void set_intensity(float value)
public float get_blendDistance()
public void set_blendDistance(float value)
public bool get_boxProjection()
public void set_boxProjection(bool value)
public Bounds get_bounds()
private void INTERNAL_get_bounds(Bounds& value)
public ReflectionProbeMode get_mode()
public void set_mode(ReflectionProbeMode value)
public int get_importance()
public void set_importance(int value)
public ReflectionProbeRefreshMode get_refreshMode()
public void set_refreshMode(ReflectionProbeRefreshMode value)
public ReflectionProbeTimeSlicingMode get_timeSlicingMode()
public void set_timeSlicingMode(ReflectionProbeTimeSlicingMode value)
public Texture get_bakedTexture()
public void set_bakedTexture(Texture value)
public Texture get_customBakedTexture()
public void set_customBakedTexture(Texture value)
public Texture get_texture()
public Vector4 get_textureHDRDecodeValues()
private void INTERNAL_get_textureHDRDecodeValues(Vector4& value)
public int RenderProbe(RenderTexture targetTexture)
public int RenderProbe()
public bool IsFinishedRendering(int renderId)
public bool BlendCubemap(Texture src, Texture dst, float blend, RenderTexture target)
public int get_minBakedCubemapResolution()
public int get_maxBakedCubemapResolution()
public Vector4 get_defaultTextureHDRDecodeValues()
private void INTERNAL_get_defaultTextureHDRDecodeValues(Vector4& value)
public Texture get_defaultTexture()
}
public UnityEngine.RelativeJoint2D : Joint2D {
public float maxForce
public float maxTorque
public float correctionScale
public bool autoConfigureOffset
public Vector2 linearOffset
public float angularOffset
public Vector2 target
public float get_maxForce()
public void set_maxForce(float value)
public float get_maxTorque()
public void set_maxTorque(float value)
public float get_correctionScale()
public void set_correctionScale(float value)
public bool get_autoConfigureOffset()
public void set_autoConfigureOffset(bool value)
public Vector2 get_linearOffset()
public void set_linearOffset(Vector2 value)
private void INTERNAL_get_linearOffset(Vector2& value)
private void INTERNAL_set_linearOffset(Vector2& value)
public float get_angularOffset()
public void set_angularOffset(float value)
public Vector2 get_target()
private void INTERNAL_get_target(Vector2& value)
}
public UnityEngine.RemoteSettings : object {
private UpdatedEventHandler Updated
public void add_Updated(UpdatedEventHandler value)
public void remove_Updated(UpdatedEventHandler value)
public void CallOnUpdate()
public void ForceUpdate()
public int GetInt(string key, int defaultValue)
public int GetInt(string key)
public float GetFloat(string key, float defaultValue)
public float GetFloat(string key)
public string GetString(string key, string defaultValue)
public string GetString(string key)
public bool GetBool(string key, bool defaultValue)
public bool GetBool(string key)
public bool HasKey(string key)
public int GetCount()
public String[] GetKeys()
}
public UnityEngine.RenderBuffer : ValueType {
internal int m_RenderTextureInstanceID
internal IntPtr m_BufferPtr
internal RenderBufferLoadAction loadAction
internal RenderBufferStoreAction storeAction
internal void SetLoadAction(RenderBufferLoadAction action)
internal void SetStoreAction(RenderBufferStoreAction action)
internal RenderBufferLoadAction get_loadAction()
internal void set_loadAction(RenderBufferLoadAction value)
internal RenderBufferStoreAction get_storeAction()
internal void set_storeAction(RenderBufferStoreAction value)
public IntPtr GetNativeRenderBufferPtr()
}
internal UnityEngine.RenderBufferHelper : ValueType {
internal int GetLoadAction(RenderBuffer& b)
internal void SetLoadAction(RenderBuffer& b, int a)
internal int GetStoreAction(RenderBuffer& b)
internal void SetStoreAction(RenderBuffer& b, int a)
internal IntPtr GetNativeRenderBufferPtr(IntPtr rb)
private void INTERNAL_CALL_GetNativeRenderBufferPtr(IntPtr rb, IntPtr& value)
}
public UnityEngine.Renderer : Component {
internal Transform staticBatchRootTransform
internal int staticBatchIndex
public bool isPartOfStaticBatch
public Matrix4x4 worldToLocalMatrix
public Matrix4x4 localToWorldMatrix
public bool enabled
public ShadowCastingMode shadowCastingMode
public bool receiveShadows
public Material material
public Material sharedMaterial
public Material[] materials
public Material[] sharedMaterials
public Bounds bounds
public int lightmapIndex
public int realtimeLightmapIndex
public Vector4 lightmapScaleOffset
public MotionVectorGenerationMode motionVectorGenerationMode
public Vector4 realtimeLightmapScaleOffset
public bool isVisible
public LightProbeUsage lightProbeUsage
public GameObject lightProbeProxyVolumeOverride
public Transform probeAnchor
public ReflectionProbeUsage reflectionProbeUsage
public string sortingLayerName
public int sortingLayerID
public int sortingOrder
internal int sortingGroupID
internal int sortingGroupOrder
public bool castShadows
public bool motionVectors
public bool useLightProbes
internal Transform get_staticBatchRootTransform()
internal void set_staticBatchRootTransform(Transform value)
internal int get_staticBatchIndex()
internal void SetStaticBatchInfo(int firstSubMesh, int subMeshCount)
public bool get_isPartOfStaticBatch()
public Matrix4x4 get_worldToLocalMatrix()
private void INTERNAL_get_worldToLocalMatrix(Matrix4x4& value)
public Matrix4x4 get_localToWorldMatrix()
private void INTERNAL_get_localToWorldMatrix(Matrix4x4& value)
public bool get_enabled()
public void set_enabled(bool value)
public ShadowCastingMode get_shadowCastingMode()
public void set_shadowCastingMode(ShadowCastingMode value)
public bool get_receiveShadows()
public void set_receiveShadows(bool value)
public Material get_material()
public void set_material(Material value)
public Material get_sharedMaterial()
public void set_sharedMaterial(Material value)
public Material[] get_materials()
public void set_materials(Material[] value)
public Material[] get_sharedMaterials()
public void set_sharedMaterials(Material[] value)
public Bounds get_bounds()
private void INTERNAL_get_bounds(Bounds& value)
public int get_lightmapIndex()
public void set_lightmapIndex(int value)
public int get_realtimeLightmapIndex()
public void set_realtimeLightmapIndex(int value)
public Vector4 get_lightmapScaleOffset()
public void set_lightmapScaleOffset(Vector4 value)
private void INTERNAL_get_lightmapScaleOffset(Vector4& value)
private void INTERNAL_set_lightmapScaleOffset(Vector4& value)
public MotionVectorGenerationMode get_motionVectorGenerationMode()
public void set_motionVectorGenerationMode(MotionVectorGenerationMode value)
public Vector4 get_realtimeLightmapScaleOffset()
public void set_realtimeLightmapScaleOffset(Vector4 value)
private void INTERNAL_get_realtimeLightmapScaleOffset(Vector4& value)
private void INTERNAL_set_realtimeLightmapScaleOffset(Vector4& value)
public bool get_isVisible()
public LightProbeUsage get_lightProbeUsage()
public void set_lightProbeUsage(LightProbeUsage value)
public GameObject get_lightProbeProxyVolumeOverride()
public void set_lightProbeProxyVolumeOverride(GameObject value)
public Transform get_probeAnchor()
public void set_probeAnchor(Transform value)
public ReflectionProbeUsage get_reflectionProbeUsage()
public void set_reflectionProbeUsage(ReflectionProbeUsage value)
public void SetPropertyBlock(MaterialPropertyBlock properties)
public void GetPropertyBlock(MaterialPropertyBlock dest)
public string get_sortingLayerName()
public void set_sortingLayerName(string value)
public int get_sortingLayerID()
public void set_sortingLayerID(int value)
public int get_sortingOrder()
public void set_sortingOrder(int value)
internal int get_sortingGroupID()
internal int get_sortingGroupOrder()
private void GetClosestReflectionProbesInternal(object result)
public void GetClosestReflectionProbes(List`1<ReflectionProbeBlendInfo> result)
public bool get_castShadows()
public void set_castShadows(bool value)
public bool get_motionVectors()
public void set_motionVectors(bool value)
public bool get_useLightProbes()
public void set_useLightProbes(bool value)
}
public UnityEngine.RendererExtensions : object {
public void UpdateGIMaterials(Renderer renderer)
internal void UpdateGIMaterialsForRenderer(Renderer renderer)
}
public UnityEngine.Rendering.AmbientMode : Enum {
public int value__
public AmbientMode Skybox
public AmbientMode Trilight
public AmbientMode Flat
public AmbientMode Custom
}
public UnityEngine.Rendering.BlendMode : Enum {
public int value__
public BlendMode Zero
public BlendMode One
public BlendMode DstColor
public BlendMode SrcColor
public BlendMode OneMinusDstColor
public BlendMode SrcAlpha
public BlendMode OneMinusSrcColor
public BlendMode DstAlpha
public BlendMode OneMinusDstAlpha
public BlendMode SrcAlphaSaturate
public BlendMode OneMinusSrcAlpha
}
public UnityEngine.Rendering.BlendOp : Enum {
public int value__
public BlendOp Add
public BlendOp Subtract
public BlendOp ReverseSubtract
public BlendOp Min
public BlendOp Max
public BlendOp LogicalClear
public BlendOp LogicalSet
public BlendOp LogicalCopy
public BlendOp LogicalCopyInverted
public BlendOp LogicalNoop
public BlendOp LogicalInvert
public BlendOp LogicalAnd
public BlendOp LogicalNand
public BlendOp LogicalOr
public BlendOp LogicalNor
public BlendOp LogicalXor
public BlendOp LogicalEquivalence
public BlendOp LogicalAndReverse
public BlendOp LogicalAndInverted
public BlendOp LogicalOrReverse
public BlendOp LogicalOrInverted
public BlendOp Multiply
public BlendOp Screen
public BlendOp Overlay
public BlendOp Darken
public BlendOp Lighten
public BlendOp ColorDodge
public BlendOp ColorBurn
public BlendOp HardLight
public BlendOp SoftLight
public BlendOp Difference
public BlendOp Exclusion
public BlendOp HSLHue
public BlendOp HSLSaturation
public BlendOp HSLColor
public BlendOp HSLLuminosity
}
public UnityEngine.Rendering.BuiltinRenderTextureType : Enum {
public int value__
public BuiltinRenderTextureType BindableTexture
public BuiltinRenderTextureType None
public BuiltinRenderTextureType CurrentActive
public BuiltinRenderTextureType CameraTarget
public BuiltinRenderTextureType Depth
public BuiltinRenderTextureType DepthNormals
public BuiltinRenderTextureType ResolvedDepth
public BuiltinRenderTextureType PrepassNormalsSpec
public BuiltinRenderTextureType PrepassLight
public BuiltinRenderTextureType PrepassLightSpec
public BuiltinRenderTextureType GBuffer0
public BuiltinRenderTextureType GBuffer1
public BuiltinRenderTextureType GBuffer2
public BuiltinRenderTextureType GBuffer3
public BuiltinRenderTextureType Reflections
public BuiltinRenderTextureType MotionVectors
public BuiltinRenderTextureType GBuffer4
public BuiltinRenderTextureType GBuffer5
public BuiltinRenderTextureType GBuffer6
public BuiltinRenderTextureType GBuffer7
}
public UnityEngine.Rendering.BuiltinShaderDefine : Enum {
public int value__
public BuiltinShaderDefine UNITY_NO_DXT5nm
public BuiltinShaderDefine UNITY_NO_RGBM
public BuiltinShaderDefine UNITY_USE_NATIVE_HDR
public BuiltinShaderDefine UNITY_ENABLE_REFLECTION_BUFFERS
public BuiltinShaderDefine UNITY_FRAMEBUFFER_FETCH_AVAILABLE
public BuiltinShaderDefine UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS
public BuiltinShaderDefine UNITY_METAL_SHADOWS_USE_POINT_FILTERING
public BuiltinShaderDefine UNITY_NO_CUBEMAP_ARRAY
public BuiltinShaderDefine UNITY_NO_SCREENSPACE_SHADOWS
public BuiltinShaderDefine UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS
public BuiltinShaderDefine UNITY_PBS_USE_BRDF1
public BuiltinShaderDefine UNITY_PBS_USE_BRDF2
public BuiltinShaderDefine UNITY_PBS_USE_BRDF3
public BuiltinShaderDefine UNITY_NO_FULL_STANDARD_SHADER
public BuiltinShaderDefine UNITY_SPECCUBE_BOX_PROJECTION
public BuiltinShaderDefine UNITY_SPECCUBE_BLENDING
public BuiltinShaderDefine UNITY_ENABLE_DETAIL_NORMALMAP
public BuiltinShaderDefine SHADER_API_MOBILE
public BuiltinShaderDefine SHADER_API_DESKTOP
public BuiltinShaderDefine UNITY_HARDWARE_TIER1
public BuiltinShaderDefine UNITY_HARDWARE_TIER2
public BuiltinShaderDefine UNITY_HARDWARE_TIER3
public BuiltinShaderDefine UNITY_COLORSPACE_GAMMA
}
public UnityEngine.Rendering.BuiltinShaderMode : Enum {
public int value__
public BuiltinShaderMode Disabled
public BuiltinShaderMode UseBuiltin
public BuiltinShaderMode UseCustom
}
public UnityEngine.Rendering.BuiltinShaderType : Enum {
public int value__
public BuiltinShaderType DeferredShading
public BuiltinShaderType DeferredReflections
public BuiltinShaderType LegacyDeferredLighting
public BuiltinShaderType ScreenSpaceShadows
public BuiltinShaderType DepthNormals
public BuiltinShaderType MotionVectors
public BuiltinShaderType LightHalo
public BuiltinShaderType LensFlare
}
public UnityEngine.Rendering.CameraEvent : Enum {
public int value__
public CameraEvent BeforeDepthTexture
public CameraEvent AfterDepthTexture
public CameraEvent BeforeDepthNormalsTexture
public CameraEvent AfterDepthNormalsTexture
public CameraEvent BeforeGBuffer
public CameraEvent AfterGBuffer
public CameraEvent BeforeLighting
public CameraEvent AfterLighting
public CameraEvent BeforeFinalPass
public CameraEvent AfterFinalPass
public CameraEvent BeforeForwardOpaque
public CameraEvent AfterForwardOpaque
public CameraEvent BeforeImageEffectsOpaque
public CameraEvent AfterImageEffectsOpaque
public CameraEvent BeforeSkybox
public CameraEvent AfterSkybox
public CameraEvent BeforeForwardAlpha
public CameraEvent AfterForwardAlpha
public CameraEvent BeforeImageEffects
public CameraEvent AfterImageEffects
public CameraEvent AfterEverything
public CameraEvent BeforeReflections
public CameraEvent AfterReflections
public CameraEvent BeforeHaloAndLensFlares
public CameraEvent AfterHaloAndLensFlares
}
public UnityEngine.Rendering.CameraHDRMode : Enum {
public int value__
public CameraHDRMode FP16
public CameraHDRMode R11G11B10
}
public UnityEngine.Rendering.ColorWriteMask : Enum {
public int value__
public ColorWriteMask Alpha
public ColorWriteMask Blue
public ColorWriteMask Green
public ColorWriteMask Red
public ColorWriteMask All
}
public UnityEngine.Rendering.CommandBuffer : object {
internal IntPtr m_Ptr
public string name
public int sizeInBytes
protected void Finalize()
public void Dispose()
private void Dispose(bool disposing)
private void InitBuffer(CommandBuffer buf)
private void ReleaseBuffer()
public void Release()
public void SetComputeFloatParam(ComputeShader computeShader, string name, float val)
public void SetComputeIntParam(ComputeShader computeShader, string name, int val)
public void SetComputeVectorParam(ComputeShader computeShader, string name, Vector4 val)
private void INTERNAL_CALL_SetComputeVectorParam(CommandBuffer self, ComputeShader computeShader, string name, Vector4& val)
public void SetComputeFloatParams(ComputeShader computeShader, string name, Single[] values)
private void Internal_SetComputeFloats(ComputeShader computeShader, string name, Single[] values)
public void SetComputeIntParams(ComputeShader computeShader, string name, Int32[] values)
private void Internal_SetComputeInts(ComputeShader computeShader, string name, Int32[] values)
public void SetComputeTextureParam(ComputeShader computeShader, int kernelIndex, string name, RenderTargetIdentifier rt)
private void Internal_SetComputeTextureParam(ComputeShader computeShader, int kernelIndex, string name, RenderTargetIdentifier& rt)
public void SetComputeBufferParam(ComputeShader computeShader, int kernelIndex, string name, ComputeBuffer buffer)
public void DispatchCompute(ComputeShader computeShader, int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ)
private void Internal_DispatchCompute(ComputeShader computeShader, int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ)
public void DispatchCompute(ComputeShader computeShader, int kernelIndex, ComputeBuffer indirectBuffer, UInt32 argsOffset)
private void Internal_DispatchComputeIndirect(ComputeShader computeShader, int kernelIndex, ComputeBuffer indirectBuffer, UInt32 argsOffset)
public void CopyCounterValue(ComputeBuffer src, ComputeBuffer dst, UInt32 dstOffsetBytes)
public string get_name()
public void set_name(string value)
public int get_sizeInBytes()
public void Clear()
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int submeshIndex, int shaderPass)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int submeshIndex)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material)
public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int submeshIndex, int shaderPass, MaterialPropertyBlock properties)
private void Internal_DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int submeshIndex, int shaderPass, MaterialPropertyBlock properties)
private void INTERNAL_CALL_Internal_DrawMesh(CommandBuffer self, Mesh mesh, Matrix4x4& matrix, Material material, int submeshIndex, int shaderPass, MaterialPropertyBlock properties)
public void DrawRenderer(Renderer renderer, Material material, int submeshIndex)
public void DrawRenderer(Renderer renderer, Material material)
public void DrawRenderer(Renderer renderer, Material material, int submeshIndex, int shaderPass)
private void Internal_DrawRenderer(Renderer renderer, Material material, int submeshIndex, int shaderPass)
private void Internal_DrawRenderer(Renderer renderer, Material material, int submeshIndex)
private void Internal_DrawRenderer(Renderer renderer, Material material)
public void DrawProcedural(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, int vertexCount, int instanceCount)
public void DrawProcedural(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, int vertexCount)
public void DrawProcedural(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, int vertexCount, int instanceCount, MaterialPropertyBlock properties)
private void Internal_DrawProcedural(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, int vertexCount, int instanceCount, MaterialPropertyBlock properties)
private void INTERNAL_CALL_Internal_DrawProcedural(CommandBuffer self, Matrix4x4& matrix, Material material, int shaderPass, MeshTopology topology, int vertexCount, int instanceCount, MaterialPropertyBlock properties)
public void DrawProceduralIndirect(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, ComputeBuffer bufferWithArgs, int argsOffset)
public void DrawProceduralIndirect(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, ComputeBuffer bufferWithArgs)
public void DrawProceduralIndirect(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties)
private void Internal_DrawProceduralIndirect(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties)
private void INTERNAL_CALL_Internal_DrawProceduralIndirect(CommandBuffer self, Matrix4x4& matrix, Material material, int shaderPass, MeshTopology topology, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, int shaderPass, Matrix4x4[] matrices, int count)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, int shaderPass, Matrix4x4[] matrices)
public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, int shaderPass, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties)
private void Internal_DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, int shaderPass, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties)
public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, int shaderPass, ComputeBuffer bufferWithArgs, int argsOffset)
public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, int shaderPass, ComputeBuffer bufferWithArgs)
public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, int shaderPass, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties)
private void Internal_DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, int shaderPass, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties)
public void SetRenderTarget(RenderTargetIdentifier rt)
public void SetRenderTarget(RenderTargetIdentifier rt, int mipLevel)
public void SetRenderTarget(RenderTargetIdentifier rt, int mipLevel, CubemapFace cubemapFace)
public void SetRenderTarget(RenderTargetIdentifier rt, int mipLevel, CubemapFace cubemapFace, int depthSlice)
public void SetRenderTarget(RenderTargetIdentifier color, RenderTargetIdentifier depth)
public void SetRenderTarget(RenderTargetIdentifier color, RenderTargetIdentifier depth, int mipLevel)
public void SetRenderTarget(RenderTargetIdentifier color, RenderTargetIdentifier depth, int mipLevel, CubemapFace cubemapFace)
public void SetRenderTarget(RenderTargetIdentifier color, RenderTargetIdentifier depth, int mipLevel, CubemapFace cubemapFace, int depthSlice)
public void SetRenderTarget(RenderTargetIdentifier[] colors, RenderTargetIdentifier depth)
private void SetRenderTarget_Single(RenderTargetIdentifier& rt, int mipLevel, CubemapFace cubemapFace, int depthSlice)
private void SetRenderTarget_ColDepth(RenderTargetIdentifier& color, RenderTargetIdentifier& depth, int mipLevel, CubemapFace cubemapFace, int depthSlice)
private void SetRenderTarget_Multiple(RenderTargetIdentifier[] color, RenderTargetIdentifier& depth)
public void CopyTexture(RenderTargetIdentifier src, RenderTargetIdentifier dst)
public void CopyTexture(RenderTargetIdentifier src, int srcElement, RenderTargetIdentifier dst, int dstElement)
public void CopyTexture(RenderTargetIdentifier src, int srcElement, int srcMip, RenderTargetIdentifier dst, int dstElement, int dstMip)
public void CopyTexture(RenderTargetIdentifier src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, RenderTargetIdentifier dst, int dstElement, int dstMip, int dstX, int dstY)
public void SetViewport(Rect pixelRect)
private void INTERNAL_CALL_SetViewport(CommandBuffer self, Rect& pixelRect)
private void CopyTexture_Internal(RenderTargetIdentifier& src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, RenderTargetIdentifier& dst, int dstElement, int dstMip, int dstX, int dstY, int mode)
public void Blit(Texture source, RenderTargetIdentifier dest)
public void Blit(Texture source, RenderTargetIdentifier dest, Vector2 scale, Vector2 offset)
public void Blit(Texture source, RenderTargetIdentifier dest, Material mat)
public void Blit(Texture source, RenderTargetIdentifier dest, Material mat, int pass)
private void Blit_Texture(Texture source, RenderTargetIdentifier& dest, Material mat, int pass, Vector2 scale, Vector2 offset)
private void INTERNAL_CALL_Blit_Texture(CommandBuffer self, Texture source, RenderTargetIdentifier& dest, Material mat, int pass, Vector2& scale, Vector2& offset)
public void Blit(RenderTargetIdentifier source, RenderTargetIdentifier dest)
public void Blit(RenderTargetIdentifier source, RenderTargetIdentifier dest, Vector2 scale, Vector2 offset)
public void Blit(RenderTargetIdentifier source, RenderTargetIdentifier dest, Material mat)
public void Blit(RenderTargetIdentifier source, RenderTargetIdentifier dest, Material mat, int pass)
private void Blit_Identifier(RenderTargetIdentifier& source, RenderTargetIdentifier& dest, Material mat, int pass, Vector2 scale, Vector2 offset)
private void INTERNAL_CALL_Blit_Identifier(CommandBuffer self, RenderTargetIdentifier& source, RenderTargetIdentifier& dest, Material mat, int pass, Vector2& scale, Vector2& offset)
public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, RenderTextureMemoryless memorylessMode)
public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite)
public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing)
public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite)
public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format)
public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter)
public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer)
public void GetTemporaryRT(int nameID, int width, int height)
public void GetTemporaryRT(int nameID, RenderTextureDescriptor desc, FilterMode filter)
public void GetTemporaryRT(int nameID, RenderTextureDescriptor desc)
private void INTERNAL_CALL_GetTemporaryRT(CommandBuffer self, int nameID, RenderTextureDescriptor& desc, FilterMode filter)
public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite)
public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing)
public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite)
public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter, RenderTextureFormat format)
public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter)
public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer)
public void GetTemporaryRTArray(int nameID, int width, int height, int slices)
public void ReleaseTemporaryRT(int nameID)
public void ClearRenderTarget(bool clearDepth, bool clearColor, Color backgroundColor, float depth)
public void ClearRenderTarget(bool clearDepth, bool clearColor, Color backgroundColor)
private void INTERNAL_CALL_ClearRenderTarget(CommandBuffer self, bool clearDepth, bool clearColor, Color& backgroundColor, float depth)
public void SetGlobalFloat(string name, float value)
public void SetGlobalFloat(int nameID, float value)
public void SetGlobalVector(string name, Vector4 value)
public void SetGlobalVector(int nameID, Vector4 value)
private void INTERNAL_CALL_SetGlobalVector(CommandBuffer self, int nameID, Vector4& value)
public void SetGlobalColor(string name, Color value)
public void SetGlobalColor(int nameID, Color value)
private void INTERNAL_CALL_SetGlobalColor(CommandBuffer self, int nameID, Color& value)
public void SetGlobalMatrix(string name, Matrix4x4 value)
public void SetGlobalMatrix(int nameID, Matrix4x4 value)
private void INTERNAL_CALL_SetGlobalMatrix(CommandBuffer self, int nameID, Matrix4x4& value)
public void EnableShaderKeyword(string keyword)
public void DisableShaderKeyword(string keyword)
public void SetViewMatrix(Matrix4x4 view)
private void INTERNAL_CALL_SetViewMatrix(CommandBuffer self, Matrix4x4& view)
public void SetProjectionMatrix(Matrix4x4 proj)
private void INTERNAL_CALL_SetProjectionMatrix(CommandBuffer self, Matrix4x4& proj)
public void SetViewProjectionMatrices(Matrix4x4 view, Matrix4x4 proj)
private void INTERNAL_CALL_SetViewProjectionMatrices(CommandBuffer self, Matrix4x4& view, Matrix4x4& proj)
public void SetGlobalDepthBias(float bias, float slopeBias)
public void SetGlobalFloatArray(string propertyName, List`1<float> values)
public void SetGlobalFloatArray(int nameID, List`1<float> values)
private void SetGlobalFloatArrayListImpl(int nameID, object values)
public void SetGlobalFloatArray(string propertyName, Single[] values)
public void SetGlobalFloatArray(int nameID, Single[] values)
public void SetGlobalVectorArray(string propertyName, List`1<Vector4> values)
public void SetGlobalVectorArray(int nameID, List`1<Vector4> values)
private void SetGlobalVectorArrayListImpl(int nameID, object values)
public void SetGlobalVectorArray(string propertyName, Vector4[] values)
public void SetGlobalVectorArray(int nameID, Vector4[] values)
public void SetGlobalMatrixArray(string propertyName, List`1<Matrix4x4> values)
public void SetGlobalMatrixArray(int nameID, List`1<Matrix4x4> values)
private void SetGlobalMatrixArrayListImpl(int nameID, object values)
public void SetGlobalMatrixArray(string propertyName, Matrix4x4[] values)
public void SetGlobalMatrixArray(int nameID, Matrix4x4[] values)
public void SetGlobalTexture(string name, RenderTargetIdentifier value)
public void SetGlobalTexture(int nameID, RenderTargetIdentifier value)
private void SetGlobalTexture_Impl(int nameID, RenderTargetIdentifier& rt)
public void SetGlobalBuffer(string name, ComputeBuffer value)
public void SetGlobalBuffer(int nameID, ComputeBuffer value)
public void SetShadowSamplingMode(RenderTargetIdentifier shadowmap, ShadowSamplingMode mode)
private void SetShadowSamplingMode_Impl(RenderTargetIdentifier& shadowmap, ShadowSamplingMode mode)
public void IssuePluginEvent(IntPtr callback, int eventID)
private void IssuePluginEventInternal(IntPtr callback, int eventID)
public void BeginSample(string name)
public void EndSample(string name)
public void IssuePluginEventAndData(IntPtr callback, int eventID, IntPtr data)
private void IssuePluginEventAndDataInternal(IntPtr callback, int eventID, IntPtr data)
public void IssuePluginCustomBlit(IntPtr callback, UInt32 command, RenderTargetIdentifier source, RenderTargetIdentifier dest, UInt32 commandParam, UInt32 commandFlags)
private void IssuePluginCustomBlitInternal(IntPtr callback, UInt32 command, RenderTargetIdentifier& source, RenderTargetIdentifier& dest, UInt32 commandParam, UInt32 commandFlags)
}
public UnityEngine.Rendering.CompareFunction : Enum {
public int value__
public CompareFunction Disabled
public CompareFunction Never
public CompareFunction Less
public CompareFunction Equal
public CompareFunction LessEqual
public CompareFunction Greater
public CompareFunction NotEqual
public CompareFunction GreaterEqual
public CompareFunction Always
}
public UnityEngine.Rendering.CopyTextureSupport : Enum {
public int value__
public CopyTextureSupport None
public CopyTextureSupport Basic
public CopyTextureSupport Copy3D
public CopyTextureSupport DifferentTypes
public CopyTextureSupport TextureToRT
public CopyTextureSupport RTToTexture
}
public UnityEngine.Rendering.CullMode : Enum {
public int value__
public CullMode Off
public CullMode Front
public CullMode Back
}
public UnityEngine.Rendering.DefaultReflectionMode : Enum {
public int value__
public DefaultReflectionMode Skybox
public DefaultReflectionMode Custom
}
public UnityEngine.Rendering.GraphicsDeviceType : Enum {
public int value__
public GraphicsDeviceType OpenGL2
public GraphicsDeviceType Direct3D9
public GraphicsDeviceType Direct3D11
public GraphicsDeviceType PlayStation3
public GraphicsDeviceType Null
public GraphicsDeviceType Xbox360
public GraphicsDeviceType OpenGLES2
public GraphicsDeviceType OpenGLES3
public GraphicsDeviceType PlayStationVita
public GraphicsDeviceType PlayStation4
public GraphicsDeviceType XboxOne
public GraphicsDeviceType PlayStationMobile
public GraphicsDeviceType Metal
public GraphicsDeviceType OpenGLCore
public GraphicsDeviceType Direct3D12
public GraphicsDeviceType N3DS
public GraphicsDeviceType Vulkan
}
public UnityEngine.Rendering.GraphicsSettings : Object {
public RenderPipelineAsset renderPipelineAsset
private ScriptableObject INTERNAL_renderPipelineAsset
public TransparencySortMode transparencySortMode
public Vector3 transparencySortAxis
public bool lightsUseLinearIntensity
public bool lightsUseColorTemperature
public void SetShaderMode(BuiltinShaderType type, BuiltinShaderMode mode)
public BuiltinShaderMode GetShaderMode(BuiltinShaderType type)
public RenderPipelineAsset get_renderPipelineAsset()
public void set_renderPipelineAsset(RenderPipelineAsset value)
private ScriptableObject get_INTERNAL_renderPipelineAsset()
private void set_INTERNAL_renderPipelineAsset(ScriptableObject value)
public void SetCustomShader(BuiltinShaderType type, Shader shader)
public Shader GetCustomShader(BuiltinShaderType type)
internal Object GetGraphicsSettings()
public TransparencySortMode get_transparencySortMode()
public void set_transparencySortMode(TransparencySortMode value)
public Vector3 get_transparencySortAxis()
public void set_transparencySortAxis(Vector3 value)
private void INTERNAL_get_transparencySortAxis(Vector3& value)
private void INTERNAL_set_transparencySortAxis(Vector3& value)
public bool get_lightsUseLinearIntensity()
public void set_lightsUseLinearIntensity(bool value)
public bool get_lightsUseColorTemperature()
public void set_lightsUseColorTemperature(bool value)
private bool HasShaderDefineImpl(GraphicsTier tier, BuiltinShaderDefine defineHash)
public bool HasShaderDefine(GraphicsTier tier, BuiltinShaderDefine defineHash)
public bool HasShaderDefine(BuiltinShaderDefine defineHash)
}
public UnityEngine.Rendering.GraphicsTier : Enum {
public int value__
public GraphicsTier Tier1
public GraphicsTier Tier2
public GraphicsTier Tier3
}
public UnityEngine.Rendering.LightEvent : Enum {
public int value__
public LightEvent BeforeShadowMap
public LightEvent AfterShadowMap
public LightEvent BeforeScreenspaceMask
public LightEvent AfterScreenspaceMask
public LightEvent BeforeShadowMapPass
public LightEvent AfterShadowMapPass
}
public UnityEngine.Rendering.LightProbeUsage : Enum {
public int value__
public LightProbeUsage Off
public LightProbeUsage BlendProbes
public LightProbeUsage UseProxyVolume
}
public UnityEngine.Rendering.LightShadowResolution : Enum {
public int value__
public LightShadowResolution FromQualitySettings
public LightShadowResolution Low
public LightShadowResolution Medium
public LightShadowResolution High
public LightShadowResolution VeryHigh
}
public UnityEngine.Rendering.OpaqueSortMode : Enum {
public int value__
public OpaqueSortMode Default
public OpaqueSortMode FrontToBack
public OpaqueSortMode NoDistanceSort
}
public UnityEngine.Rendering.PassType : Enum {
public int value__
public PassType Normal
public PassType Vertex
public PassType VertexLM
public PassType VertexLMRGBM
public PassType ForwardBase
public PassType ForwardAdd
public PassType LightPrePassBase
public PassType LightPrePassFinal
public PassType ShadowCaster
public PassType Deferred
public PassType Meta
public PassType MotionVectors
}
public UnityEngine.Rendering.RealtimeGICPUUsage : Enum {
public int value__
public RealtimeGICPUUsage Low
public RealtimeGICPUUsage Medium
public RealtimeGICPUUsage High
public RealtimeGICPUUsage Unlimited
}
public UnityEngine.Rendering.ReflectionCubemapCompression : Enum {
public int value__
public ReflectionCubemapCompression Uncompressed
public ReflectionCubemapCompression Compressed
public ReflectionCubemapCompression Auto
}
public UnityEngine.Rendering.ReflectionProbeBlendInfo : ValueType {
public ReflectionProbe probe
public float weight
}
public UnityEngine.Rendering.ReflectionProbeClearFlags : Enum {
public int value__
public ReflectionProbeClearFlags Skybox
public ReflectionProbeClearFlags SolidColor
}
public UnityEngine.Rendering.ReflectionProbeMode : Enum {
public int value__
public ReflectionProbeMode Baked
public ReflectionProbeMode Realtime
public ReflectionProbeMode Custom
}
public UnityEngine.Rendering.ReflectionProbeRefreshMode : Enum {
public int value__
public ReflectionProbeRefreshMode OnAwake
public ReflectionProbeRefreshMode EveryFrame
public ReflectionProbeRefreshMode ViaScripting
}
public UnityEngine.Rendering.ReflectionProbeTimeSlicingMode : Enum {
public int value__
public ReflectionProbeTimeSlicingMode AllFacesAtOnce
public ReflectionProbeTimeSlicingMode IndividualFaces
public ReflectionProbeTimeSlicingMode NoTimeSlicing
}
public UnityEngine.Rendering.ReflectionProbeType : Enum {
public int value__
public ReflectionProbeType Cube
public ReflectionProbeType Card
}
public UnityEngine.Rendering.ReflectionProbeUsage : Enum {
public int value__
public ReflectionProbeUsage Off
public ReflectionProbeUsage BlendProbes
public ReflectionProbeUsage BlendProbesAndSkybox
public ReflectionProbeUsage Simple
}
public UnityEngine.Rendering.RenderBufferLoadAction : Enum {
public int value__
public RenderBufferLoadAction Load
public RenderBufferLoadAction DontCare
}
public UnityEngine.Rendering.RenderBufferStoreAction : Enum {
public int value__
public RenderBufferStoreAction Store
public RenderBufferStoreAction DontCare
}
public UnityEngine.Rendering.RenderQueue : Enum {
public int value__
public RenderQueue Background
public RenderQueue Geometry
public RenderQueue AlphaTest
public RenderQueue GeometryLast
public RenderQueue Transparent
public RenderQueue Overlay
}
public UnityEngine.Rendering.RenderTargetIdentifier : ValueType {
private BuiltinRenderTextureType m_Type
private int m_NameID
private int m_InstanceID
public void .ctor(BuiltinRenderTextureType type)
public void .ctor(string name)
public void .ctor(int nameID)
public void .ctor(Texture tex)
public RenderTargetIdentifier op_Implicit(BuiltinRenderTextureType type)
public RenderTargetIdentifier op_Implicit(string name)
public RenderTargetIdentifier op_Implicit(int nameID)
public RenderTargetIdentifier op_Implicit(Texture tex)
public string ToString()
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(RenderTargetIdentifier rhs)
public bool op_Equality(RenderTargetIdentifier lhs, RenderTargetIdentifier rhs)
public bool op_Inequality(RenderTargetIdentifier lhs, RenderTargetIdentifier rhs)
}
public UnityEngine.Rendering.ShaderHardwareTier : Enum {
public int value__
public ShaderHardwareTier Tier1
public ShaderHardwareTier Tier2
public ShaderHardwareTier Tier3
}
public UnityEngine.Rendering.ShadowCastingMode : Enum {
public int value__
public ShadowCastingMode Off
public ShadowCastingMode On
public ShadowCastingMode TwoSided
public ShadowCastingMode ShadowsOnly
}
public UnityEngine.Rendering.ShadowMapPass : Enum {
public int value__
public ShadowMapPass PointlightPositiveX
public ShadowMapPass PointlightNegativeX
public ShadowMapPass PointlightPositiveY
public ShadowMapPass PointlightNegativeY
public ShadowMapPass PointlightPositiveZ
public ShadowMapPass PointlightNegativeZ
public ShadowMapPass DirectionalCascade0
public ShadowMapPass DirectionalCascade1
public ShadowMapPass DirectionalCascade2
public ShadowMapPass DirectionalCascade3
public ShadowMapPass Spotlight
public ShadowMapPass Pointlight
public ShadowMapPass Directional
public ShadowMapPass All
}
public UnityEngine.Rendering.ShadowSamplingMode : Enum {
public int value__
public ShadowSamplingMode CompareDepths
public ShadowSamplingMode RawDepth
public ShadowSamplingMode None
}
public UnityEngine.Rendering.SortingGroup : Behaviour {
public string sortingLayerName
public int sortingLayerID
public int sortingOrder
internal int sortingGroupID
internal int sortingGroupOrder
internal int index
public string get_sortingLayerName()
public void set_sortingLayerName(string value)
public int get_sortingLayerID()
public void set_sortingLayerID(int value)
public int get_sortingOrder()
public void set_sortingOrder(int value)
internal int get_sortingGroupID()
internal int get_sortingGroupOrder()
internal int get_index()
}
public UnityEngine.Rendering.SphericalHarmonicsL2 : ValueType {
private float shr0
private float shr1
private float shr2
private float shr3
private float shr4
private float shr5
private float shr6
private float shr7
private float shr8
private float shg0
private float shg1
private float shg2
private float shg3
private float shg4
private float shg5
private float shg6
private float shg7
private float shg8
private float shb0
private float shb1
private float shb2
private float shb3
private float shb4
private float shb5
private float shb6
private float shb7
private float shb8
public float Item
public void Clear()
private void ClearInternal(SphericalHarmonicsL2& sh)
private void INTERNAL_CALL_ClearInternal(SphericalHarmonicsL2& sh)
public void AddAmbientLight(Color color)
private void AddAmbientLightInternal(Color color, SphericalHarmonicsL2& sh)
private void INTERNAL_CALL_AddAmbientLightInternal(Color& color, SphericalHarmonicsL2& sh)
public void AddDirectionalLight(Vector3 direction, Color color, float intensity)
private void AddDirectionalLightInternal(Vector3 direction, Color color, SphericalHarmonicsL2& sh)
private void INTERNAL_CALL_AddDirectionalLightInternal(Vector3& direction, Color& color, SphericalHarmonicsL2& sh)
public void Evaluate(Vector3[] directions, Color[] results)
public float get_Item(int rgb, int coefficient)
public void set_Item(int rgb, int coefficient, float value)
public int GetHashCode()
public bool Equals(object other)
public SphericalHarmonicsL2 op_Multiply(SphericalHarmonicsL2 lhs, float rhs)
public SphericalHarmonicsL2 op_Multiply(float lhs, SphericalHarmonicsL2 rhs)
public SphericalHarmonicsL2 op_Addition(SphericalHarmonicsL2 lhs, SphericalHarmonicsL2 rhs)
public bool op_Equality(SphericalHarmonicsL2 lhs, SphericalHarmonicsL2 rhs)
public bool op_Inequality(SphericalHarmonicsL2 lhs, SphericalHarmonicsL2 rhs)
}
public UnityEngine.Rendering.SplashScreen : object {
public bool isFinished
public bool get_isFinished()
public void Begin()
public void Draw()
}
public UnityEngine.Rendering.StencilOp : Enum {
public int value__
public StencilOp Keep
public StencilOp Zero
public StencilOp Replace
public StencilOp IncrementSaturate
public StencilOp DecrementSaturate
public StencilOp Invert
public StencilOp IncrementWrap
public StencilOp DecrementWrap
}
public UnityEngine.Rendering.TextureDimension : Enum {
public int value__
public TextureDimension Unknown
public TextureDimension None
public TextureDimension Any
public TextureDimension Tex2D
public TextureDimension Tex3D
public TextureDimension Cube
public TextureDimension Tex2DArray
public TextureDimension CubeArray
}
public UnityEngine.Rendering.UVChannelFlags : Enum {
public int value__
public UVChannelFlags UV0
public UVChannelFlags UV1
public UVChannelFlags UV2
public UVChannelFlags UV3
}
public UnityEngine.RenderingPath : Enum {
public int value__
public RenderingPath UsePlayerSettings
public RenderingPath VertexLit
public RenderingPath Forward
public RenderingPath DeferredLighting
public RenderingPath DeferredShading
}
public UnityEngine.RenderMode : Enum {
public int value__
public RenderMode ScreenSpaceOverlay
public RenderMode ScreenSpaceCamera
public RenderMode WorldSpace
}
public UnityEngine.RenderSettings : Object {
public bool fog
public FogMode fogMode
public Color fogColor
public float fogDensity
public float fogStartDistance
public float fogEndDistance
public AmbientMode ambientMode
public Color ambientSkyColor
public Color ambientEquatorColor
public Color ambientGroundColor
public Color ambientLight
public float ambientIntensity
public SphericalHarmonicsL2 ambientProbe
public Color subtractiveShadowColor
public float reflectionIntensity
public int reflectionBounces
public float haloStrength
public float flareStrength
public float flareFadeSpeed
public Material skybox
public Light sun
public DefaultReflectionMode defaultReflectionMode
public int defaultReflectionResolution
public Cubemap customReflection
public float ambientSkyboxAmount
public bool get_fog()
public void set_fog(bool value)
public FogMode get_fogMode()
public void set_fogMode(FogMode value)
public Color get_fogColor()
public void set_fogColor(Color value)
private void INTERNAL_get_fogColor(Color& value)
private void INTERNAL_set_fogColor(Color& value)
public float get_fogDensity()
public void set_fogDensity(float value)
public float get_fogStartDistance()
public void set_fogStartDistance(float value)
public float get_fogEndDistance()
public void set_fogEndDistance(float value)
public AmbientMode get_ambientMode()
public void set_ambientMode(AmbientMode value)
public Color get_ambientSkyColor()
public void set_ambientSkyColor(Color value)
private void INTERNAL_get_ambientSkyColor(Color& value)
private void INTERNAL_set_ambientSkyColor(Color& value)
public Color get_ambientEquatorColor()
public void set_ambientEquatorColor(Color value)
private void INTERNAL_get_ambientEquatorColor(Color& value)
private void INTERNAL_set_ambientEquatorColor(Color& value)
public Color get_ambientGroundColor()
public void set_ambientGroundColor(Color value)
private void INTERNAL_get_ambientGroundColor(Color& value)
private void INTERNAL_set_ambientGroundColor(Color& value)
public Color get_ambientLight()
public void set_ambientLight(Color value)
private void INTERNAL_get_ambientLight(Color& value)
private void INTERNAL_set_ambientLight(Color& value)
public float get_ambientIntensity()
public void set_ambientIntensity(float value)
public SphericalHarmonicsL2 get_ambientProbe()
public void set_ambientProbe(SphericalHarmonicsL2 value)
private void INTERNAL_get_ambientProbe(SphericalHarmonicsL2& value)
private void INTERNAL_set_ambientProbe(SphericalHarmonicsL2& value)
public Color get_subtractiveShadowColor()
public void set_subtractiveShadowColor(Color value)
private void INTERNAL_get_subtractiveShadowColor(Color& value)
private void INTERNAL_set_subtractiveShadowColor(Color& value)
public float get_reflectionIntensity()
public void set_reflectionIntensity(float value)
public int get_reflectionBounces()
public void set_reflectionBounces(int value)
public float get_haloStrength()
public void set_haloStrength(float value)
public float get_flareStrength()
public void set_flareStrength(float value)
public float get_flareFadeSpeed()
public void set_flareFadeSpeed(float value)
public Material get_skybox()
public void set_skybox(Material value)
public Light get_sun()
public void set_sun(Light value)
public DefaultReflectionMode get_defaultReflectionMode()
public void set_defaultReflectionMode(DefaultReflectionMode value)
public int get_defaultReflectionResolution()
public void set_defaultReflectionResolution(int value)
public Cubemap get_customReflection()
public void set_customReflection(Cubemap value)
internal void Reset()
internal Object GetRenderSettings()
public float get_ambientSkyboxAmount()
public void set_ambientSkyboxAmount(float value)
}
public UnityEngine.RenderTargetSetup : ValueType {
public RenderBuffer[] color
public RenderBuffer depth
public int mipLevel
public CubemapFace cubemapFace
public int depthSlice
public RenderBufferLoadAction[] colorLoad
public RenderBufferStoreAction[] colorStore
public RenderBufferLoadAction depthLoad
public RenderBufferStoreAction depthStore
public void .ctor(RenderBuffer[] color, RenderBuffer depth, int mip, CubemapFace face, RenderBufferLoadAction[] colorLoad, RenderBufferStoreAction[] colorStore, RenderBufferLoadAction depthLoad, RenderBufferStoreAction depthStore)
public void .ctor(RenderBuffer color, RenderBuffer depth)
public void .ctor(RenderBuffer color, RenderBuffer depth, int mipLevel)
public void .ctor(RenderBuffer color, RenderBuffer depth, int mipLevel, CubemapFace face)
public void .ctor(RenderBuffer color, RenderBuffer depth, int mipLevel, CubemapFace face, int depthSlice)
public void .ctor(RenderBuffer[] color, RenderBuffer depth)
public void .ctor(RenderBuffer[] color, RenderBuffer depth, int mipLevel)
public void .ctor(RenderBuffer[] color, RenderBuffer depth, int mip, CubemapFace face)
internal RenderBufferLoadAction[] LoadActions(RenderBuffer[] buf)
internal RenderBufferStoreAction[] StoreActions(RenderBuffer[] buf)
}
public UnityEngine.RenderTexture : Texture {
public int width
public int height
public VRTextureUsage vrUsage
public int depth
public bool isPowerOfTwo
public bool sRGB
public RenderTextureFormat format
public bool useMipMap
public bool autoGenerateMips
public TextureDimension dimension
public bool isCubemap
public bool isVolume
public int volumeDepth
public RenderTextureMemoryless memorylessMode
public int antiAliasing
public bool enableRandomWrite
public RenderBuffer colorBuffer
public RenderBuffer depthBuffer
public RenderTexture active
public bool enabled
public RenderTextureDescriptor descriptor
public void .ctor(int width, int height, int depth, RenderTextureFormat format, RenderTextureReadWrite readWrite)
public void .ctor(int width, int height, int depth, RenderTextureFormat format)
public void .ctor(int width, int height, int depth)
public void .ctor(RenderTextureDescriptor desc)
public void .ctor(RenderTexture textureToCopy)
private void Internal_CreateRenderTexture(RenderTexture rt)
private void SetRenderTextureDescriptor(RenderTextureDescriptor desc)
private void INTERNAL_CALL_SetRenderTextureDescriptor(RenderTexture self, RenderTextureDescriptor& desc)
private RenderTextureDescriptor GetDescriptor()
private void INTERNAL_CALL_GetDescriptor(RenderTexture self, RenderTextureDescriptor& value)
public RenderTexture GetTemporary(int width, int height, int depthBuffer, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, RenderTextureMemoryless memorylessMode)
public RenderTexture GetTemporary(int width, int height, int depthBuffer, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing)
public RenderTexture GetTemporary(int width, int height, int depthBuffer, RenderTextureFormat format, RenderTextureReadWrite readWrite)
public RenderTexture GetTemporary(int width, int height, int depthBuffer, RenderTextureFormat format)
public RenderTexture GetTemporary(int width, int height, int depthBuffer)
public RenderTexture GetTemporary(int width, int height)
public RenderTexture GetTemporary(int width, int height, int depthBuffer, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, RenderTextureMemoryless memorylessMode, VRTextureUsage vrUsage)
private RenderTexture GetTemporary_Internal(RenderTextureDescriptor desc)
private RenderTexture INTERNAL_CALL_GetTemporary_Internal(RenderTextureDescriptor& desc)
public void ReleaseTemporary(RenderTexture temp)
private int Internal_GetWidth(RenderTexture mono)
private void Internal_SetWidth(RenderTexture mono, int width)
private int Internal_GetHeight(RenderTexture mono)
private void Internal_SetHeight(RenderTexture mono, int width)
private VRTextureUsage Internal_GetVRUsage(RenderTexture mono)
private void Internal_SetVRUsage(RenderTexture mono, VRTextureUsage vrUsage)
private void Internal_SetSRGBReadWrite(RenderTexture mono, bool sRGB)
public int get_width()
public void set_width(int value)
public int get_height()
public void set_height(int value)
public VRTextureUsage get_vrUsage()
public void set_vrUsage(VRTextureUsage value)
public int get_depth()
public void set_depth(int value)
public bool get_isPowerOfTwo()
public void set_isPowerOfTwo(bool value)
public bool get_sRGB()
public RenderTextureFormat get_format()
public void set_format(RenderTextureFormat value)
public bool get_useMipMap()
public void set_useMipMap(bool value)
public bool get_autoGenerateMips()
public void set_autoGenerateMips(bool value)
private TextureDimension Internal_GetDimension(RenderTexture rt)
private void Internal_SetDimension(RenderTexture rt, TextureDimension dim)
public TextureDimension get_dimension()
public void set_dimension(TextureDimension value)
public bool get_isCubemap()
public void set_isCubemap(bool value)
public bool get_isVolume()
public void set_isVolume(bool value)
public int get_volumeDepth()
public void set_volumeDepth(int value)
public RenderTextureMemoryless get_memorylessMode()
public void set_memorylessMode(RenderTextureMemoryless value)
public int get_antiAliasing()
public void set_antiAliasing(int value)
public bool get_enableRandomWrite()
public void set_enableRandomWrite(bool value)
public bool Create()
private bool INTERNAL_CALL_Create(RenderTexture self)
public void Release()
private void INTERNAL_CALL_Release(RenderTexture self)
public bool IsCreated()
private bool INTERNAL_CALL_IsCreated(RenderTexture self)
public void DiscardContents()
private void INTERNAL_CALL_DiscardContents(RenderTexture self)
public void DiscardContents(bool discardColor, bool discardDepth)
public void MarkRestoreExpected()
private void INTERNAL_CALL_MarkRestoreExpected(RenderTexture self)
public void GenerateMips()
private void INTERNAL_CALL_GenerateMips(RenderTexture self)
public RenderBuffer get_colorBuffer()
public RenderBuffer get_depthBuffer()
private void GetColorBuffer(RenderBuffer& res)
private void GetDepthBuffer(RenderBuffer& res)
public IntPtr GetNativeDepthBufferPtr()
private void INTERNAL_CALL_GetNativeDepthBufferPtr(RenderTexture self, IntPtr& value)
public void SetGlobalShaderProperty(string propertyName)
public RenderTexture get_active()
public void set_active(RenderTexture value)
public bool get_enabled()
public void set_enabled(bool value)
public Vector2 GetTexelOffset()
public bool SupportsStencil(RenderTexture rt)
private VRTextureUsage GetActiveVRUsage()
public void SetBorderColor(Color color)
public RenderTexture GetTemporary(RenderTextureDescriptor desc)
public RenderTextureDescriptor get_descriptor()
public void set_descriptor(RenderTextureDescriptor value)
private void ValidateRenderTextureDesc(RenderTextureDescriptor desc)
}
public UnityEngine.RenderTextureCreationFlags : Enum {
public int value__
public RenderTextureCreationFlags MipMap
public RenderTextureCreationFlags AutoGenerateMips
public RenderTextureCreationFlags SRGB
public RenderTextureCreationFlags EyeTexture
public RenderTextureCreationFlags EnableRandomWrite
public RenderTextureCreationFlags CreatedFromScript
public RenderTextureCreationFlags AllowVerticalFlip
}
public UnityEngine.RenderTextureDescriptor : ValueType {
private int <width>k__BackingField
private int <height>k__BackingField
private int <msaaSamples>k__BackingField
private int <volumeDepth>k__BackingField
private RenderTextureFormat <colorFormat>k__BackingField
private int _depthBufferBits
private Int32[] depthFormatBits
private TextureDimension <dimension>k__BackingField
private ShadowSamplingMode <shadowSamplingMode>k__BackingField
private VRTextureUsage <vrUsage>k__BackingField
private RenderTextureCreationFlags _flags
private RenderTextureMemoryless <memoryless>k__BackingField
public int width
public int height
public int msaaSamples
public int volumeDepth
public RenderTextureFormat colorFormat
public int depthBufferBits
public TextureDimension dimension
public ShadowSamplingMode shadowSamplingMode
public VRTextureUsage vrUsage
public RenderTextureCreationFlags flags
public RenderTextureMemoryless memoryless
public bool sRGB
public bool useMipMap
public bool autoGenerateMips
public bool enableRandomWrite
internal bool createdFromScript
public void .ctor(int width, int height)
public void .ctor(int width, int height, RenderTextureFormat colorFormat)
public void .ctor(int width, int height, RenderTextureFormat colorFormat, int depthBufferBits)
public int get_width()
public void set_width(int value)
public int get_height()
public void set_height(int value)
public int get_msaaSamples()
public void set_msaaSamples(int value)
public int get_volumeDepth()
public void set_volumeDepth(int value)
public RenderTextureFormat get_colorFormat()
public void set_colorFormat(RenderTextureFormat value)
public int get_depthBufferBits()
public void set_depthBufferBits(int value)
public TextureDimension get_dimension()
public void set_dimension(TextureDimension value)
public ShadowSamplingMode get_shadowSamplingMode()
public void set_shadowSamplingMode(ShadowSamplingMode value)
public VRTextureUsage get_vrUsage()
public void set_vrUsage(VRTextureUsage value)
public RenderTextureCreationFlags get_flags()
public RenderTextureMemoryless get_memoryless()
public void set_memoryless(RenderTextureMemoryless value)
private void SetOrClearRenderTextureCreationFlag(bool value, RenderTextureCreationFlags flag)
public bool get_sRGB()
public void set_sRGB(bool value)
public bool get_useMipMap()
public void set_useMipMap(bool value)
public bool get_autoGenerateMips()
public void set_autoGenerateMips(bool value)
public bool get_enableRandomWrite()
public void set_enableRandomWrite(bool value)
internal bool get_createdFromScript()
internal void set_createdFromScript(bool value)
}
public UnityEngine.RenderTextureFormat : Enum {
public int value__
public RenderTextureFormat ARGB32
public RenderTextureFormat Depth
public RenderTextureFormat ARGBHalf
public RenderTextureFormat Shadowmap
public RenderTextureFormat RGB565
public RenderTextureFormat ARGB4444
public RenderTextureFormat ARGB1555
public RenderTextureFormat Default
public RenderTextureFormat ARGB2101010
public RenderTextureFormat DefaultHDR
public RenderTextureFormat ARGB64
public RenderTextureFormat ARGBFloat
public RenderTextureFormat RGFloat
public RenderTextureFormat RGHalf
public RenderTextureFormat RFloat
public RenderTextureFormat RHalf
public RenderTextureFormat R8
public RenderTextureFormat ARGBInt
public RenderTextureFormat RGInt
public RenderTextureFormat RInt
public RenderTextureFormat BGRA32
public RenderTextureFormat RGB111110Float
public RenderTextureFormat RG32
public RenderTextureFormat RGBAUShort
public RenderTextureFormat RG16
}
public UnityEngine.RenderTextureMemoryless : Enum {
public int value__
public RenderTextureMemoryless None
public RenderTextureMemoryless Color
public RenderTextureMemoryless Depth
public RenderTextureMemoryless MSAA
}
public UnityEngine.RenderTextureReadWrite : Enum {
public int value__
public RenderTextureReadWrite Default
public RenderTextureReadWrite Linear
public RenderTextureReadWrite sRGB
}
public UnityEngine.RequireComponent : Attribute {
public Type m_Type0
public Type m_Type1
public Type m_Type2
public void .ctor(Type requiredComponent)
public void .ctor(Type requiredComponent, Type requiredComponent2)
public void .ctor(Type requiredComponent, Type requiredComponent2, Type requiredComponent3)
}
public UnityEngine.Resolution : ValueType {
private int m_Width
private int m_Height
private int m_RefreshRate
public int width
public int height
public int refreshRate
public int get_width()
public void set_width(int value)
public int get_height()
public void set_height(int value)
public int get_refreshRate()
public void set_refreshRate(int value)
public string ToString()
}
public UnityEngine.ResourceRequest : AsyncOperation {
internal string m_Path
internal Type m_Type
public Object asset
public Object get_asset()
}
public UnityEngine.Resources : object {
internal T[] ConvertObjects(Object[] rawObjects)
public Object[] FindObjectsOfTypeAll(Type type)
public T[] FindObjectsOfTypeAll()
public Object Load(string path)
public T Load(string path)
public Object Load(string path, Type systemTypeInstance)
public ResourceRequest LoadAsync(string path)
public ResourceRequest LoadAsync(string path)
public ResourceRequest LoadAsync(string path, Type type)
public Object[] LoadAll(string path, Type systemTypeInstance)
public Object[] LoadAll(string path)
public T[] LoadAll(string path)
public Object GetBuiltinResource(Type type, string path)
public T GetBuiltinResource(string path)
public void UnloadAsset(Object assetToUnload)
public AsyncOperation UnloadUnusedAssets()
}
public UnityEngine.Rigidbody : Component {
public Vector3 velocity
public Vector3 angularVelocity
public float drag
public float angularDrag
public float mass
public bool useGravity
public float maxDepenetrationVelocity
public bool isKinematic
public bool freezeRotation
public RigidbodyConstraints constraints
public CollisionDetectionMode collisionDetectionMode
public Vector3 centerOfMass
public Vector3 worldCenterOfMass
public Quaternion inertiaTensorRotation
public Vector3 inertiaTensor
public bool detectCollisions
public bool useConeFriction
public Vector3 position
public Quaternion rotation
public RigidbodyInterpolation interpolation
public int solverIterations
public int solverIterationCount
public int solverVelocityIterations
public int solverVelocityIterationCount
public float sleepVelocity
public float sleepAngularVelocity
public float sleepThreshold
public float maxAngularVelocity
public Vector3 get_velocity()
public void set_velocity(Vector3 value)
private void INTERNAL_get_velocity(Vector3& value)
private void INTERNAL_set_velocity(Vector3& value)
public Vector3 get_angularVelocity()
public void set_angularVelocity(Vector3 value)
private void INTERNAL_get_angularVelocity(Vector3& value)
private void INTERNAL_set_angularVelocity(Vector3& value)
public float get_drag()
public void set_drag(float value)
public float get_angularDrag()
public void set_angularDrag(float value)
public float get_mass()
public void set_mass(float value)
public void SetDensity(float density)
private void INTERNAL_CALL_SetDensity(Rigidbody self, float density)
public bool get_useGravity()
public void set_useGravity(bool value)
public float get_maxDepenetrationVelocity()
public void set_maxDepenetrationVelocity(float value)
public bool get_isKinematic()
public void set_isKinematic(bool value)
public bool get_freezeRotation()
public void set_freezeRotation(bool value)
public RigidbodyConstraints get_constraints()
public void set_constraints(RigidbodyConstraints value)
public CollisionDetectionMode get_collisionDetectionMode()
public void set_collisionDetectionMode(CollisionDetectionMode value)
public void AddForce(Vector3 force, ForceMode mode)
public void AddForce(Vector3 force)
private void INTERNAL_CALL_AddForce(Rigidbody self, Vector3& force, ForceMode mode)
public void AddForce(float x, float y, float z)
public void AddForce(float x, float y, float z, ForceMode mode)
public void AddRelativeForce(Vector3 force, ForceMode mode)
public void AddRelativeForce(Vector3 force)
private void INTERNAL_CALL_AddRelativeForce(Rigidbody self, Vector3& force, ForceMode mode)
public void AddRelativeForce(float x, float y, float z)
public void AddRelativeForce(float x, float y, float z, ForceMode mode)
public void AddTorque(Vector3 torque, ForceMode mode)
public void AddTorque(Vector3 torque)
private void INTERNAL_CALL_AddTorque(Rigidbody self, Vector3& torque, ForceMode mode)
public void AddTorque(float x, float y, float z)
public void AddTorque(float x, float y, float z, ForceMode mode)
public void AddRelativeTorque(Vector3 torque, ForceMode mode)
public void AddRelativeTorque(Vector3 torque)
private void INTERNAL_CALL_AddRelativeTorque(Rigidbody self, Vector3& torque, ForceMode mode)
public void AddRelativeTorque(float x, float y, float z)
public void AddRelativeTorque(float x, float y, float z, ForceMode mode)
public void AddForceAtPosition(Vector3 force, Vector3 position, ForceMode mode)
public void AddForceAtPosition(Vector3 force, Vector3 position)
private void INTERNAL_CALL_AddForceAtPosition(Rigidbody self, Vector3& force, Vector3& position, ForceMode mode)
public void AddExplosionForce(float explosionForce, Vector3 explosionPosition, float explosionRadius, float upwardsModifier, ForceMode mode)
public void AddExplosionForce(float explosionForce, Vector3 explosionPosition, float explosionRadius, float upwardsModifier)
public void AddExplosionForce(float explosionForce, Vector3 explosionPosition, float explosionRadius)
private void INTERNAL_CALL_AddExplosionForce(Rigidbody self, float explosionForce, Vector3& explosionPosition, float explosionRadius, float upwardsModifier, ForceMode mode)
public Vector3 ClosestPointOnBounds(Vector3 position)
private void INTERNAL_CALL_ClosestPointOnBounds(Rigidbody self, Vector3& position, Vector3& value)
public Vector3 GetRelativePointVelocity(Vector3 relativePoint)
private void INTERNAL_CALL_GetRelativePointVelocity(Rigidbody self, Vector3& relativePoint, Vector3& value)
public Vector3 GetPointVelocity(Vector3 worldPoint)
private void INTERNAL_CALL_GetPointVelocity(Rigidbody self, Vector3& worldPoint, Vector3& value)
public Vector3 get_centerOfMass()
public void set_centerOfMass(Vector3 value)
private void INTERNAL_get_centerOfMass(Vector3& value)
private void INTERNAL_set_centerOfMass(Vector3& value)
public Vector3 get_worldCenterOfMass()
private void INTERNAL_get_worldCenterOfMass(Vector3& value)
public Quaternion get_inertiaTensorRotation()
public void set_inertiaTensorRotation(Quaternion value)
private void INTERNAL_get_inertiaTensorRotation(Quaternion& value)
private void INTERNAL_set_inertiaTensorRotation(Quaternion& value)
public Vector3 get_inertiaTensor()
public void set_inertiaTensor(Vector3 value)
private void INTERNAL_get_inertiaTensor(Vector3& value)
private void INTERNAL_set_inertiaTensor(Vector3& value)
public bool get_detectCollisions()
public void set_detectCollisions(bool value)
public bool get_useConeFriction()
public void set_useConeFriction(bool value)
public Vector3 get_position()
public void set_position(Vector3 value)
private void INTERNAL_get_position(Vector3& value)
private void INTERNAL_set_position(Vector3& value)
public Quaternion get_rotation()
public void set_rotation(Quaternion value)
private void INTERNAL_get_rotation(Quaternion& value)
private void INTERNAL_set_rotation(Quaternion& value)
public void MovePosition(Vector3 position)
private void INTERNAL_CALL_MovePosition(Rigidbody self, Vector3& position)
public void MoveRotation(Quaternion rot)
private void INTERNAL_CALL_MoveRotation(Rigidbody self, Quaternion& rot)
public RigidbodyInterpolation get_interpolation()
public void set_interpolation(RigidbodyInterpolation value)
public void Sleep()
private void INTERNAL_CALL_Sleep(Rigidbody self)
public bool IsSleeping()
private bool INTERNAL_CALL_IsSleeping(Rigidbody self)
public void WakeUp()
private void INTERNAL_CALL_WakeUp(Rigidbody self)
public void ResetCenterOfMass()
private void INTERNAL_CALL_ResetCenterOfMass(Rigidbody self)
public void ResetInertiaTensor()
private void INTERNAL_CALL_ResetInertiaTensor(Rigidbody self)
public int get_solverIterations()
public void set_solverIterations(int value)
public int get_solverIterationCount()
public void set_solverIterationCount(int value)
public int get_solverVelocityIterations()
public void set_solverVelocityIterations(int value)
public int get_solverVelocityIterationCount()
public void set_solverVelocityIterationCount(int value)
public float get_sleepVelocity()
public void set_sleepVelocity(float value)
public float get_sleepAngularVelocity()
public void set_sleepAngularVelocity(float value)
public float get_sleepThreshold()
public void set_sleepThreshold(float value)
public float get_maxAngularVelocity()
public void set_maxAngularVelocity(float value)
public bool SweepTest(Vector3 direction, RaycastHit& hitInfo, float maxDistance, QueryTriggerInteraction queryTriggerInteraction)
public bool SweepTest(Vector3 direction, RaycastHit& hitInfo, float maxDistance)
public bool SweepTest(Vector3 direction, RaycastHit& hitInfo)
private bool INTERNAL_CALL_SweepTest(Rigidbody self, Vector3& direction, RaycastHit& hitInfo, float maxDistance, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] SweepTestAll(Vector3 direction, float maxDistance, QueryTriggerInteraction queryTriggerInteraction)
public RaycastHit[] SweepTestAll(Vector3 direction, float maxDistance)
public RaycastHit[] SweepTestAll(Vector3 direction)
private RaycastHit[] INTERNAL_CALL_SweepTestAll(Rigidbody self, Vector3& direction, float maxDistance, QueryTriggerInteraction queryTriggerInteraction)
public void SetMaxAngularVelocity(float a)
}
public UnityEngine.Rigidbody2D : Component {
public Vector2 position
public float rotation
public Vector2 velocity
public float angularVelocity
public bool useAutoMass
public float mass
public PhysicsMaterial2D sharedMaterial
public Vector2 centerOfMass
public Vector2 worldCenterOfMass
public float inertia
public float drag
public float angularDrag
public float gravityScale
public RigidbodyType2D bodyType
public bool useFullKinematicContacts
public bool isKinematic
public bool fixedAngle
public bool freezeRotation
public RigidbodyConstraints2D constraints
public bool simulated
public RigidbodyInterpolation2D interpolation
public RigidbodySleepMode2D sleepMode
public CollisionDetectionMode2D collisionDetectionMode
public int attachedColliderCount
public Vector2 get_position()
public void set_position(Vector2 value)
private void INTERNAL_get_position(Vector2& value)
private void INTERNAL_set_position(Vector2& value)
public float get_rotation()
public void set_rotation(float value)
public void MovePosition(Vector2 position)
private void INTERNAL_CALL_MovePosition(Rigidbody2D self, Vector2& position)
public void MoveRotation(float angle)
private void INTERNAL_CALL_MoveRotation(Rigidbody2D self, float angle)
public Vector2 get_velocity()
public void set_velocity(Vector2 value)
private void INTERNAL_get_velocity(Vector2& value)
private void INTERNAL_set_velocity(Vector2& value)
public float get_angularVelocity()
public void set_angularVelocity(float value)
public bool get_useAutoMass()
public void set_useAutoMass(bool value)
public float get_mass()
public void set_mass(float value)
public PhysicsMaterial2D get_sharedMaterial()
public void set_sharedMaterial(PhysicsMaterial2D value)
public Vector2 get_centerOfMass()
public void set_centerOfMass(Vector2 value)
private void INTERNAL_get_centerOfMass(Vector2& value)
private void INTERNAL_set_centerOfMass(Vector2& value)
public Vector2 get_worldCenterOfMass()
private void INTERNAL_get_worldCenterOfMass(Vector2& value)
public float get_inertia()
public void set_inertia(float value)
public float get_drag()
public void set_drag(float value)
public float get_angularDrag()
public void set_angularDrag(float value)
public float get_gravityScale()
public void set_gravityScale(float value)
public RigidbodyType2D get_bodyType()
public void set_bodyType(RigidbodyType2D value)
internal void SetDragBehaviour(bool dragged)
public bool get_useFullKinematicContacts()
public void set_useFullKinematicContacts(bool value)
public bool get_isKinematic()
public void set_isKinematic(bool value)
public bool get_fixedAngle()
public void set_fixedAngle(bool value)
public bool get_freezeRotation()
public void set_freezeRotation(bool value)
public RigidbodyConstraints2D get_constraints()
public void set_constraints(RigidbodyConstraints2D value)
public bool IsSleeping()
public bool IsAwake()
public void Sleep()
public void WakeUp()
public bool get_simulated()
public void set_simulated(bool value)
public RigidbodyInterpolation2D get_interpolation()
public void set_interpolation(RigidbodyInterpolation2D value)
public RigidbodySleepMode2D get_sleepMode()
public void set_sleepMode(RigidbodySleepMode2D value)
public CollisionDetectionMode2D get_collisionDetectionMode()
public void set_collisionDetectionMode(CollisionDetectionMode2D value)
public int get_attachedColliderCount()
public int GetAttachedColliders(Collider2D[] results)
public bool IsTouching(Collider2D collider)
public bool IsTouching(Collider2D collider, ContactFilter2D contactFilter)
private bool Internal_IsTouching(Collider2D collider, ContactFilter2D contactFilter)
private bool INTERNAL_CALL_Internal_IsTouching(Rigidbody2D self, Collider2D collider, ContactFilter2D& contactFilter)
public bool IsTouching(ContactFilter2D contactFilter)
private bool INTERNAL_CALL_IsTouching(Rigidbody2D self, ContactFilter2D& contactFilter)
public bool IsTouchingLayers(int layerMask)
public bool IsTouchingLayers()
public bool OverlapPoint(Vector2 point)
private bool INTERNAL_CALL_OverlapPoint(Rigidbody2D self, Vector2& point)
public int OverlapCollider(ContactFilter2D contactFilter, Collider2D[] results)
private int INTERNAL_CALL_OverlapCollider(Rigidbody2D self, ContactFilter2D& contactFilter, Collider2D[] results)
public int Cast(Vector2 direction, RaycastHit2D[] results, float distance)
public int Cast(Vector2 direction, RaycastHit2D[] results)
private int INTERNAL_CALL_Cast(Rigidbody2D self, Vector2& direction, RaycastHit2D[] results, float distance)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
private int Internal_Cast(Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int INTERNAL_CALL_Internal_Cast(Rigidbody2D self, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
public ColliderDistance2D Distance(Collider2D collider)
public void AddForce(Vector2 force, ForceMode2D mode)
public void AddForce(Vector2 force)
private void INTERNAL_CALL_AddForce(Rigidbody2D self, Vector2& force, ForceMode2D mode)
public void AddRelativeForce(Vector2 relativeForce, ForceMode2D mode)
public void AddRelativeForce(Vector2 relativeForce)
private void INTERNAL_CALL_AddRelativeForce(Rigidbody2D self, Vector2& relativeForce, ForceMode2D mode)
public void AddForceAtPosition(Vector2 force, Vector2 position, ForceMode2D mode)
public void AddForceAtPosition(Vector2 force, Vector2 position)
private void INTERNAL_CALL_AddForceAtPosition(Rigidbody2D self, Vector2& force, Vector2& position, ForceMode2D mode)
public void AddTorque(float torque, ForceMode2D mode)
public void AddTorque(float torque)
public Vector2 GetPoint(Vector2 point)
private void Internal_GetPoint(Rigidbody2D rigidbody, Vector2 point, Vector2& value)
private void INTERNAL_CALL_Internal_GetPoint(Rigidbody2D rigidbody, Vector2& point, Vector2& value)
public Vector2 GetRelativePoint(Vector2 relativePoint)
private void Internal_GetRelativePoint(Rigidbody2D rigidbody, Vector2 relativePoint, Vector2& value)
private void INTERNAL_CALL_Internal_GetRelativePoint(Rigidbody2D rigidbody, Vector2& relativePoint, Vector2& value)
public Vector2 GetVector(Vector2 vector)
private void Internal_GetVector(Rigidbody2D rigidbody, Vector2 vector, Vector2& value)
private void INTERNAL_CALL_Internal_GetVector(Rigidbody2D rigidbody, Vector2& vector, Vector2& value)
public Vector2 GetRelativeVector(Vector2 relativeVector)
private void Internal_GetRelativeVector(Rigidbody2D rigidbody, Vector2 relativeVector, Vector2& value)
private void INTERNAL_CALL_Internal_GetRelativeVector(Rigidbody2D rigidbody, Vector2& relativeVector, Vector2& value)
public Vector2 GetPointVelocity(Vector2 point)
private void Internal_GetPointVelocity(Rigidbody2D rigidbody, Vector2 point, Vector2& value)
private void INTERNAL_CALL_Internal_GetPointVelocity(Rigidbody2D rigidbody, Vector2& point, Vector2& value)
public Vector2 GetRelativePointVelocity(Vector2 relativePoint)
private void Internal_GetRelativePointVelocity(Rigidbody2D rigidbody, Vector2 relativePoint, Vector2& value)
private void INTERNAL_CALL_Internal_GetRelativePointVelocity(Rigidbody2D rigidbody, Vector2& relativePoint, Vector2& value)
public int GetContacts(ContactPoint2D[] contacts)
public int GetContacts(ContactFilter2D contactFilter, ContactPoint2D[] contacts)
public int GetContacts(Collider2D[] colliders)
public int GetContacts(ContactFilter2D contactFilter, Collider2D[] colliders)
}
public UnityEngine.RigidbodyConstraints : Enum {
public int value__
public RigidbodyConstraints None
public RigidbodyConstraints FreezePositionX
public RigidbodyConstraints FreezePositionY
public RigidbodyConstraints FreezePositionZ
public RigidbodyConstraints FreezeRotationX
public RigidbodyConstraints FreezeRotationY
public RigidbodyConstraints FreezeRotationZ
public RigidbodyConstraints FreezePosition
public RigidbodyConstraints FreezeRotation
public RigidbodyConstraints FreezeAll
}
public UnityEngine.RigidbodyConstraints2D : Enum {
public int value__
public RigidbodyConstraints2D None
public RigidbodyConstraints2D FreezePositionX
public RigidbodyConstraints2D FreezePositionY
public RigidbodyConstraints2D FreezeRotation
public RigidbodyConstraints2D FreezePosition
public RigidbodyConstraints2D FreezeAll
}
public UnityEngine.RigidbodyInterpolation : Enum {
public int value__
public RigidbodyInterpolation None
public RigidbodyInterpolation Interpolate
public RigidbodyInterpolation Extrapolate
}
public UnityEngine.RigidbodyInterpolation2D : Enum {
public int value__
public RigidbodyInterpolation2D None
public RigidbodyInterpolation2D Interpolate
public RigidbodyInterpolation2D Extrapolate
}
public UnityEngine.RigidbodySleepMode2D : Enum {
public int value__
public RigidbodySleepMode2D NeverSleep
public RigidbodySleepMode2D StartAwake
public RigidbodySleepMode2D StartAsleep
}
public UnityEngine.RigidbodyType2D : Enum {
public int value__
public RigidbodyType2D Dynamic
public RigidbodyType2D Kinematic
public RigidbodyType2D Static
}
public UnityEngine.RotationDriveMode : Enum {
public int value__
public RotationDriveMode XYAndZ
public RotationDriveMode Slerp
}
internal UnityEngine.RotationOrder : Enum {
public int value__
public RotationOrder OrderXYZ
public RotationOrder OrderXZY
public RotationOrder OrderYZX
public RotationOrder OrderYXZ
public RotationOrder OrderZXY
public RotationOrder OrderZYX
}
public UnityEngine.RPCMode : Enum {
public int value__
public RPCMode Server
public RPCMode Others
public RPCMode OthersBuffered
public RPCMode All
public RPCMode AllBuffered
}
public UnityEngine.RuntimeAnimatorController : Object {
public AnimationClip[] animationClips
public AnimationClip[] get_animationClips()
}
public UnityEngine.RuntimeInitializeLoadType : Enum {
public int value__
public RuntimeInitializeLoadType AfterSceneLoad
public RuntimeInitializeLoadType BeforeSceneLoad
}
public UnityEngine.RuntimeInitializeOnLoadMethodAttribute : PreserveAttribute {
private RuntimeInitializeLoadType <loadType>k__BackingField
public RuntimeInitializeLoadType loadType
public void .ctor(RuntimeInitializeLoadType loadType)
public RuntimeInitializeLoadType get_loadType()
private void set_loadType(RuntimeInitializeLoadType value)
}
public UnityEngine.RuntimePlatform : Enum {
public int value__
public RuntimePlatform OSXEditor
public RuntimePlatform OSXPlayer
public RuntimePlatform WindowsPlayer
public RuntimePlatform OSXWebPlayer
public RuntimePlatform OSXDashboardPlayer
public RuntimePlatform WindowsWebPlayer
public RuntimePlatform WindowsEditor
public RuntimePlatform IPhonePlayer
public RuntimePlatform XBOX360
public RuntimePlatform PS3
public RuntimePlatform Android
public RuntimePlatform NaCl
public RuntimePlatform FlashPlayer
public RuntimePlatform LinuxPlayer
public RuntimePlatform LinuxEditor
public RuntimePlatform WebGLPlayer
public RuntimePlatform MetroPlayerX86
public RuntimePlatform WSAPlayerX86
public RuntimePlatform MetroPlayerX64
public RuntimePlatform WSAPlayerX64
public RuntimePlatform MetroPlayerARM
public RuntimePlatform WSAPlayerARM
public RuntimePlatform WP8Player
public RuntimePlatform BlackBerryPlayer
public RuntimePlatform TizenPlayer
public RuntimePlatform PSP2
public RuntimePlatform PS4
public RuntimePlatform PSM
public RuntimePlatform XboxOne
public RuntimePlatform SamsungTVPlayer
public RuntimePlatform WiiU
public RuntimePlatform tvOS
public RuntimePlatform Switch
}
internal UnityEngine.RuntimeUndo : object {
public void SetTransformParent(Transform transform, Transform newParent, string name)
public void RecordObject(Object objectToUndo, string name)
public void RecordObjects(Object[] objectsToUndo, string name)
}
public UnityEngine.ScaleMode : Enum {
public int value__
public ScaleMode StretchToFill
public ScaleMode ScaleAndCrop
public ScaleMode ScaleToFit
}
public UnityEngine.SceneManagement.LoadSceneMode : Enum {
public int value__
public LoadSceneMode Single
public LoadSceneMode Additive
}
public UnityEngine.SceneManagement.Scene : ValueType {
private int m_Handle
internal int handle
internal LoadingState loadingState
public string path
public string name
internal string guid
public bool isLoaded
public int buildIndex
public bool isDirty
public int rootCount
internal int get_handle()
internal LoadingState get_loadingState()
public bool IsValid()
public string get_path()
public string get_name()
internal void set_name(string value)
internal string get_guid()
public bool get_isLoaded()
public int get_buildIndex()
public bool get_isDirty()
public int get_rootCount()
public GameObject[] GetRootGameObjects()
public void GetRootGameObjects(List`1<GameObject> rootGameObjects)
public bool op_Equality(Scene lhs, Scene rhs)
public bool op_Inequality(Scene lhs, Scene rhs)
public int GetHashCode()
public bool Equals(object other)
private bool IsValidInternal(int sceneHandle)
private string GetPathInternal(int sceneHandle)
private string GetNameInternal(int sceneHandle)
private void SetNameInternal(int sceneHandle, string name)
private string GetGUIDInternal(int sceneHandle)
private bool GetIsLoadedInternal(int sceneHandle)
private LoadingState GetLoadingStateInternal(int sceneHandle)
private bool GetIsDirtyInternal(int sceneHandle)
private int GetBuildIndexInternal(int sceneHandle)
private int GetRootCountInternal(int sceneHandle)
private void GetRootGameObjectsInternal(int sceneHandle, object resultRootList)
}
public UnityEngine.SceneManagement.SceneManager : object {
private UnityAction`2<Scene, LoadSceneMode> sceneLoaded
private UnityAction`1<Scene> sceneUnloaded
private UnityAction`2<Scene, Scene> activeSceneChanged
public int sceneCount
public int sceneCountInBuildSettings
public int get_sceneCount()
public int get_sceneCountInBuildSettings()
public Scene GetActiveScene()
private void INTERNAL_CALL_GetActiveScene(Scene& value)
public bool SetActiveScene(Scene scene)
private bool INTERNAL_CALL_SetActiveScene(Scene& scene)
public Scene GetSceneByPath(string scenePath)
private void INTERNAL_CALL_GetSceneByPath(string scenePath, Scene& value)
public Scene GetSceneByName(string name)
private void INTERNAL_CALL_GetSceneByName(string name, Scene& value)
public Scene GetSceneByBuildIndex(int buildIndex)
private void INTERNAL_CALL_GetSceneByBuildIndex(int buildIndex, Scene& value)
public Scene GetSceneAt(int index)
private void INTERNAL_CALL_GetSceneAt(int index, Scene& value)
public Scene[] GetAllScenes()
public void LoadScene(string sceneName)
public void LoadScene(string sceneName, LoadSceneMode mode)
public void LoadScene(int sceneBuildIndex)
public void LoadScene(int sceneBuildIndex, LoadSceneMode mode)
public AsyncOperation LoadSceneAsync(string sceneName)
public AsyncOperation LoadSceneAsync(string sceneName, LoadSceneMode mode)
public AsyncOperation LoadSceneAsync(int sceneBuildIndex)
public AsyncOperation LoadSceneAsync(int sceneBuildIndex, LoadSceneMode mode)
private AsyncOperation LoadSceneAsyncNameIndexInternal(string sceneName, int sceneBuildIndex, bool isAdditive, bool mustCompleteNextFrame)
public Scene CreateScene(string sceneName)
private void INTERNAL_CALL_CreateScene(string sceneName, Scene& value)
public bool UnloadScene(Scene scene)
private bool UnloadSceneInternal(Scene scene)
private bool INTERNAL_CALL_UnloadSceneInternal(Scene& scene)
public bool UnloadScene(int sceneBuildIndex)
public bool UnloadScene(string sceneName)
public AsyncOperation UnloadSceneAsync(int sceneBuildIndex)
public AsyncOperation UnloadSceneAsync(string sceneName)
public AsyncOperation UnloadSceneAsync(Scene scene)
private AsyncOperation UnloadSceneAsyncInternal(Scene scene)
private AsyncOperation INTERNAL_CALL_UnloadSceneAsyncInternal(Scene& scene)
private AsyncOperation UnloadSceneNameIndexInternal(string sceneName, int sceneBuildIndex, bool immediately, Boolean& outSuccess)
public void MergeScenes(Scene sourceScene, Scene destinationScene)
private void INTERNAL_CALL_MergeScenes(Scene& sourceScene, Scene& destinationScene)
public void MoveGameObjectToScene(GameObject go, Scene scene)
private void INTERNAL_CALL_MoveGameObjectToScene(GameObject go, Scene& scene)
public void add_sceneLoaded(UnityAction`2<Scene, LoadSceneMode> value)
public void remove_sceneLoaded(UnityAction`2<Scene, LoadSceneMode> value)
private void Internal_SceneLoaded(Scene scene, LoadSceneMode mode)
public void add_sceneUnloaded(UnityAction`1<Scene> value)
public void remove_sceneUnloaded(UnityAction`1<Scene> value)
private void Internal_SceneUnloaded(Scene scene)
public void add_activeSceneChanged(UnityAction`2<Scene, Scene> value)
public void remove_activeSceneChanged(UnityAction`2<Scene, Scene> value)
private void Internal_ActiveSceneChanged(Scene previousActiveScene, Scene newActiveScene)
}
public UnityEngine.SceneManagement.SceneUtility : object {
public string GetScenePathByBuildIndex(int buildIndex)
public int GetBuildIndexByScenePath(string scenePath)
}
public UnityEngine.Screen : object {
public Resolution[] resolutions
public Resolution currentResolution
public int width
public int height
public float dpi
public bool fullScreen
public bool autorotateToPortrait
public bool autorotateToPortraitUpsideDown
public bool autorotateToLandscapeLeft
public bool autorotateToLandscapeRight
public ScreenOrientation orientation
public int sleepTimeout
public bool lockCursor
public Resolution[] get_resolutions()
public Resolution get_currentResolution()
private void INTERNAL_get_currentResolution(Resolution& value)
public void SetResolution(int width, int height, bool fullscreen, int preferredRefreshRate)
public void SetResolution(int width, int height, bool fullscreen)
public int get_width()
public int get_height()
public float get_dpi()
public bool get_fullScreen()
public void set_fullScreen(bool value)
public bool get_autorotateToPortrait()
public void set_autorotateToPortrait(bool value)
public bool get_autorotateToPortraitUpsideDown()
public void set_autorotateToPortraitUpsideDown(bool value)
public bool get_autorotateToLandscapeLeft()
public void set_autorotateToLandscapeLeft(bool value)
public bool get_autorotateToLandscapeRight()
public void set_autorotateToLandscapeRight(bool value)
public ScreenOrientation get_orientation()
public void set_orientation(ScreenOrientation value)
public int get_sleepTimeout()
public void set_sleepTimeout(int value)
public bool get_lockCursor()
public void set_lockCursor(bool value)
}
public UnityEngine.ScreenCapture : object {
public void CaptureScreenshot(string filename, int superSize)
public void CaptureScreenshot(string filename)
}
public UnityEngine.ScreenOrientation : Enum {
public int value__
public ScreenOrientation Unknown
public ScreenOrientation Portrait
public ScreenOrientation PortraitUpsideDown
public ScreenOrientation LandscapeLeft
public ScreenOrientation LandscapeRight
public ScreenOrientation AutoRotation
public ScreenOrientation Landscape
}
public UnityEngine.ScriptableObject : Object {
private void Internal_CreateScriptableObject(ScriptableObject self)
public void SetDirty()
private void INTERNAL_CALL_SetDirty(ScriptableObject self)
public ScriptableObject CreateInstance(string className)
public ScriptableObject CreateInstance(Type type)
private ScriptableObject CreateInstanceFromType(Type type)
public T CreateInstance()
}
public UnityEngine.Scripting.APIUpdating.MovedFromAttribute : Attribute {
private string <Namespace>k__BackingField
private bool <IsInDifferentAssembly>k__BackingField
public string Namespace
public bool IsInDifferentAssembly
public void .ctor(string sourceNamespace)
public void .ctor(string sourceNamespace, bool isInDifferentAssembly)
public string get_Namespace()
private void set_Namespace(string value)
public bool get_IsInDifferentAssembly()
private void set_IsInDifferentAssembly(bool value)
}
internal UnityEngine.Scripting.RequiredByNativeCodeAttribute : Attribute {
private string <Name>k__BackingField
private bool <Optional>k__BackingField
public string Name
public bool Optional
public void .ctor(string name)
public void .ctor(bool optional)
public void .ctor(string name, bool optional)
public string get_Name()
public void set_Name(string value)
public bool get_Optional()
public void set_Optional(bool value)
}
internal UnityEngine.Scripting.UsedByNativeCodeAttribute : Attribute {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
public void set_Name(string value)
}
internal UnityEngine.ScrollViewState : object {
public Rect position
public Rect visibleRect
public Rect viewRect
public Vector2 scrollPosition
public bool apply
public void ScrollTo(Rect pos)
public bool ScrollTowards(Rect pos, float maxDelta)
private Vector2 ScrollNeeded(Rect pos)
}
internal UnityEngine.ScrollWaitDefinitions : object {
public int firstWait
public int regularWait
}
public UnityEngine.Security : object {
public bool PrefetchSocketPolicy(string ip, int atPort)
public bool PrefetchSocketPolicy(string ip, int atPort, int timeout)
public Assembly LoadAndVerifyAssembly(Byte[] assemblyData, string authorizationKey)
public Assembly LoadAndVerifyAssembly(Byte[] assemblyData)
}
public UnityEngine.SendMessageOptions : Enum {
public int value__
public SendMessageOptions RequireReceiver
public SendMessageOptions DontRequireReceiver
}
internal UnityEngine.SendMouseEvents : object {
private int m_HitIndexGUI
private int m_HitIndexPhysics3D
private int m_HitIndexPhysics2D
private bool s_MouseUsed
private HitInfo[] m_LastHit
private HitInfo[] m_MouseDownHit
private HitInfo[] m_CurrentHit
private Camera[] m_Cameras
private void SetMouseMoved()
private void DoSendMouseEvents(int skipRTCameras)
private void SendEvents(int i, HitInfo hit)
}
internal UnityEngine.Serialization.DictionarySerializationSurrogate`2 : object {
public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
}
public UnityEngine.Serialization.FormerlySerializedAsAttribute : Attribute {
private string m_oldName
public string oldName
public void .ctor(string oldName)
public string get_oldName()
}
internal UnityEngine.Serialization.ListSerializationSurrogate : object {
public ISerializationSurrogate Default
public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
private Array ArrayFromGenericList(IList list)
}
public UnityEngine.Serialization.UnitySurrogateSelector : object {
public ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, ISurrogateSelector& selector)
public void ChainSelector(ISurrogateSelector selector)
public ISurrogateSelector GetNextSelector()
}
internal UnityEngine.SetupCoroutine : object {
public void InvokeMoveNext(IEnumerator enumerator, IntPtr returnValueAddress)
public object InvokeMember(object behaviour, string name, object variable)
public object InvokeStatic(Type klass, string name, object variable)
}
public UnityEngine.Shader : Object {
public bool isSupported
public int maximumLOD
public int globalMaximumLOD
public string globalRenderPipeline
public int renderQueue
internal DisableBatchingType disableBatching
public ShaderHardwareTier globalShaderHardwareTier
public Shader Find(string name)
internal Shader FindBuiltin(string name)
public bool get_isSupported()
public void EnableKeyword(string keyword)
public void DisableKeyword(string keyword)
public bool IsKeywordEnabled(string keyword)
public int get_maximumLOD()
public void set_maximumLOD(int value)
public int get_globalMaximumLOD()
public void set_globalMaximumLOD(int value)
public string get_globalRenderPipeline()
public void set_globalRenderPipeline(string value)
public int get_renderQueue()
internal DisableBatchingType get_disableBatching()
private void SetGlobalFloatImpl(int nameID, float value)
private void SetGlobalIntImpl(int nameID, int value)
private void SetGlobalVectorImpl(int nameID, Vector4 value)
private void INTERNAL_CALL_SetGlobalVectorImpl(int nameID, Vector4& value)
private void SetGlobalColorImpl(int nameID, Color value)
private void INTERNAL_CALL_SetGlobalColorImpl(int nameID, Color& value)
private void SetGlobalMatrixImpl(int nameID, Matrix4x4 value)
private void INTERNAL_CALL_SetGlobalMatrixImpl(int nameID, Matrix4x4& value)
private void SetGlobalTextureImpl(int nameID, Texture value)
private Array ExtractArrayFromList(object list)
private void SetGlobalFloatArrayImpl(int nameID, Single[] values)
private void SetGlobalVectorArrayImpl(int nameID, Vector4[] values)
private void SetGlobalMatrixArrayImpl(int nameID, Matrix4x4[] values)
public void SetGlobalBuffer(int nameID, ComputeBuffer buffer)
private float GetGlobalFloatImpl(int nameID)
private int GetGlobalIntImpl(int nameID)
private Vector4 GetGlobalVectorImpl(int nameID)
private void INTERNAL_CALL_GetGlobalVectorImpl(int nameID, Vector4& value)
private Color GetGlobalColorImpl(int nameID)
private void INTERNAL_CALL_GetGlobalColorImpl(int nameID, Color& value)
private Matrix4x4 GetGlobalMatrixImpl(int nameID)
private void INTERNAL_CALL_GetGlobalMatrixImpl(int nameID, Matrix4x4& value)
private Texture GetGlobalTextureImpl(int nameID)
private Single[] GetGlobalFloatArrayImpl(int nameID)
private Vector4[] GetGlobalVectorArrayImpl(int nameID)
private Matrix4x4[] GetGlobalMatrixArrayImpl(int nameID)
private void GetGlobalFloatArrayImplList(int nameID, object list)
private void GetGlobalVectorArrayImplList(int nameID, object list)
private void GetGlobalMatrixArrayImplList(int nameID, object list)
public int PropertyToID(string name)
public void WarmupAllShaders()
public void SetGlobalFloat(string name, float value)
public void SetGlobalFloat(int nameID, float value)
public void SetGlobalInt(string name, int value)
public void SetGlobalInt(int nameID, int value)
public void SetGlobalVector(string name, Vector4 value)
public void SetGlobalVector(int nameID, Vector4 value)
public void SetGlobalColor(string name, Color value)
public void SetGlobalColor(int nameID, Color value)
public void SetGlobalMatrix(string name, Matrix4x4 value)
public void SetGlobalMatrix(int nameID, Matrix4x4 value)
public void SetGlobalTexture(string name, Texture value)
public void SetGlobalTexture(int nameID, Texture value)
public void SetGlobalBuffer(string name, ComputeBuffer buffer)
public void SetGlobalFloatArray(string name, List`1<float> values)
public void SetGlobalFloatArray(int nameID, List`1<float> values)
public void SetGlobalFloatArray(string name, Single[] values)
public void SetGlobalFloatArray(int nameID, Single[] values)
public void SetGlobalVectorArray(string name, List`1<Vector4> values)
public void SetGlobalVectorArray(int nameID, List`1<Vector4> values)
public void SetGlobalVectorArray(string name, Vector4[] values)
public void SetGlobalVectorArray(int nameID, Vector4[] values)
public void SetGlobalMatrixArray(string name, List`1<Matrix4x4> values)
public void SetGlobalMatrixArray(int nameID, List`1<Matrix4x4> values)
public void SetGlobalMatrixArray(string name, Matrix4x4[] values)
public void SetGlobalMatrixArray(int nameID, Matrix4x4[] values)
public float GetGlobalFloat(string name)
public float GetGlobalFloat(int nameID)
public int GetGlobalInt(string name)
public int GetGlobalInt(int nameID)
public Vector4 GetGlobalVector(string name)
public Vector4 GetGlobalVector(int nameID)
public Color GetGlobalColor(string name)
public Color GetGlobalColor(int nameID)
public Matrix4x4 GetGlobalMatrix(string name)
public Matrix4x4 GetGlobalMatrix(int nameID)
public Texture GetGlobalTexture(string name)
public Texture GetGlobalTexture(int nameID)
public void GetGlobalFloatArray(string name, List`1<float> values)
public void GetGlobalFloatArray(int nameID, List`1<float> values)
public Single[] GetGlobalFloatArray(string name)
public Single[] GetGlobalFloatArray(int nameID)
public void GetGlobalVectorArray(string name, List`1<Vector4> values)
public void GetGlobalVectorArray(int nameID, List`1<Vector4> values)
public Vector4[] GetGlobalVectorArray(string name)
public Vector4[] GetGlobalVectorArray(int nameID)
public void GetGlobalMatrixArray(string name, List`1<Matrix4x4> values)
public void GetGlobalMatrixArray(int nameID, List`1<Matrix4x4> values)
public Matrix4x4[] GetGlobalMatrixArray(string name)
public Matrix4x4[] GetGlobalMatrixArray(int nameID)
public ShaderHardwareTier get_globalShaderHardwareTier()
public void set_globalShaderHardwareTier(ShaderHardwareTier value)
}
public UnityEngine.ShaderVariantCollection : Object {
public int shaderCount
public int variantCount
public bool isWarmedUp
private void Internal_Create(ShaderVariantCollection mono)
public int get_shaderCount()
public int get_variantCount()
public bool Add(ShaderVariant variant)
private bool AddInternal(Shader shader, PassType passType, String[] keywords)
public bool Remove(ShaderVariant variant)
private bool RemoveInternal(Shader shader, PassType passType, String[] keywords)
public bool Contains(ShaderVariant variant)
private bool ContainsInternal(Shader shader, PassType passType, String[] keywords)
public void Clear()
public bool get_isWarmedUp()
public void WarmUp()
}
public UnityEngine.ShadowmaskMode : Enum {
public int value__
public ShadowmaskMode Shadowmask
public ShadowmaskMode DistanceShadowmask
}
public UnityEngine.ShadowProjection : Enum {
public int value__
public ShadowProjection CloseFit
public ShadowProjection StableFit
}
public UnityEngine.ShadowQuality : Enum {
public int value__
public ShadowQuality Disable
public ShadowQuality HardOnly
public ShadowQuality All
}
public UnityEngine.ShadowResolution : Enum {
public int value__
public ShadowResolution Low
public ShadowResolution Medium
public ShadowResolution High
public ShadowResolution VeryHigh
}
public UnityEngine.SkeletonBone : ValueType {
public string name
internal string parentName
public Vector3 position
public Quaternion rotation
public Vector3 scale
public int transformModified
public int get_transformModified()
public void set_transformModified(int value)
}
public UnityEngine.SkinnedMeshRenderer : Renderer {
public Transform[] bones
public Transform rootBone
public SkinQuality quality
public Mesh sharedMesh
public bool updateWhenOffscreen
public bool skinnedMotionVectors
public Bounds localBounds
public Transform[] get_bones()
public void set_bones(Transform[] value)
public Transform get_rootBone()
public void set_rootBone(Transform value)
public SkinQuality get_quality()
public void set_quality(SkinQuality value)
public Mesh get_sharedMesh()
public void set_sharedMesh(Mesh value)
public bool get_updateWhenOffscreen()
public void set_updateWhenOffscreen(bool value)
public bool get_skinnedMotionVectors()
public void set_skinnedMotionVectors(bool value)
public Bounds get_localBounds()
public void set_localBounds(Bounds value)
private void INTERNAL_get_localBounds(Bounds& value)
private void INTERNAL_set_localBounds(Bounds& value)
public void BakeMesh(Mesh mesh)
public float GetBlendShapeWeight(int index)
public void SetBlendShapeWeight(int index, float value)
}
public UnityEngine.SkinQuality : Enum {
public int value__
public SkinQuality Auto
public SkinQuality Bone1
public SkinQuality Bone2
public SkinQuality Bone4
}
public UnityEngine.Skybox : Behaviour {
public Material material
public Material get_material()
public void set_material(Material value)
}
public UnityEngine.SleepTimeout : object {
public int NeverSleep
public int SystemSetting
}
internal UnityEngine.SliderHandler : ValueType {
private Rect position
private float currentValue
private float size
private float start
private float end
private GUIStyle slider
private GUIStyle thumb
private bool horiz
private int id
public void .ctor(Rect position, float currentValue, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id)
public float Handle()
private float OnMouseDown()
private float OnMouseDrag()
private float OnMouseUp()
private float OnRepaint()
private EventType CurrentEventType()
private int CurrentScrollTroughSide()
private bool IsEmptySlider()
private bool SupportsPageMovements()
private float PageMovementValue()
private float PageUpMovementBound()
private Event CurrentEvent()
private float ValueForCurrentMousePosition()
private float Clamp(float value)
private Rect ThumbSelectionRect()
private void StartDraggingWithValue(float dragStartValue)
private SliderState SliderState()
private Rect ThumbRect()
private Rect VerticalThumbRect()
private Rect HorizontalThumbRect()
private float ClampedCurrentValue()
private float MousePosition()
private float ValuesPerPixel()
private float ThumbSize()
private float MaxValue()
private float MinValue()
}
public UnityEngine.SliderJoint2D : AnchoredJoint2D {
public bool autoConfigureAngle
public float angle
public bool useMotor
public bool useLimits
public JointMotor2D motor
public JointTranslationLimits2D limits
public JointLimitState2D limitState
public float referenceAngle
public float jointTranslation
public float jointSpeed
public bool get_autoConfigureAngle()
public void set_autoConfigureAngle(bool value)
public float get_angle()
public void set_angle(float value)
public bool get_useMotor()
public void set_useMotor(bool value)
public bool get_useLimits()
public void set_useLimits(bool value)
public JointMotor2D get_motor()
public void set_motor(JointMotor2D value)
private void INTERNAL_get_motor(JointMotor2D& value)
private void INTERNAL_set_motor(JointMotor2D& value)
public JointTranslationLimits2D get_limits()
public void set_limits(JointTranslationLimits2D value)
private void INTERNAL_get_limits(JointTranslationLimits2D& value)
private void INTERNAL_set_limits(JointTranslationLimits2D& value)
public JointLimitState2D get_limitState()
public float get_referenceAngle()
public float get_jointTranslation()
public float get_jointSpeed()
public float GetMotorForce(float timeStep)
private float INTERNAL_CALL_GetMotorForce(SliderJoint2D self, float timeStep)
}
internal UnityEngine.SliderState : object {
public float dragStartPos
public float dragStartValue
public bool isDragging
}
public UnityEngine.Social : object {
public ISocialPlatform Active
public ILocalUser localUser
public ISocialPlatform get_Active()
public void set_Active(ISocialPlatform value)
public ILocalUser get_localUser()
public void LoadUsers(String[] userIDs, Action`1<IUserProfile[]> callback)
public void ReportProgress(string achievementID, double progress, Action`1<bool> callback)
public void LoadAchievementDescriptions(Action`1<IAchievementDescription[]> callback)
public void LoadAchievements(Action`1<IAchievement[]> callback)
public void ReportScore(long score, string board, Action`1<bool> callback)
public void LoadScores(string leaderboardID, Action`1<IScore[]> callback)
public ILeaderboard CreateLeaderboard()
public IAchievement CreateAchievement()
public void ShowAchievementsUI()
public void ShowLeaderboardUI()
}
internal UnityEngine.SocialPlatforms.ActivePlatform : object {
private ISocialPlatform _active
internal ISocialPlatform Instance
internal ISocialPlatform get_Instance()
internal void set_Instance(ISocialPlatform value)
private ISocialPlatform SelectSocialPlatform()
}
public UnityEngine.SocialPlatforms.IAchievement {
public string id
public double percentCompleted
public bool completed
public bool hidden
public DateTime lastReportedDate
public void ReportProgress(Action`1<bool> callback)
public string get_id()
public void set_id(string value)
public double get_percentCompleted()
public void set_percentCompleted(double value)
public bool get_completed()
public bool get_hidden()
public DateTime get_lastReportedDate()
}
public UnityEngine.SocialPlatforms.IAchievementDescription {
public string id
public string title
public Texture2D image
public string achievedDescription
public string unachievedDescription
public bool hidden
public int points
public string get_id()
public void set_id(string value)
public string get_title()
public Texture2D get_image()
public string get_achievedDescription()
public string get_unachievedDescription()
public bool get_hidden()
public int get_points()
}
public UnityEngine.SocialPlatforms.ILeaderboard {
public bool loading
public string id
public UserScope userScope
public Range range
public TimeScope timeScope
public IScore localUserScore
public UInt32 maxRange
public IScore[] scores
public string title
public void SetUserFilter(String[] userIDs)
public void LoadScores(Action`1<bool> callback)
public bool get_loading()
public string get_id()
public void set_id(string value)
public UserScope get_userScope()
public void set_userScope(UserScope value)
public Range get_range()
public void set_range(Range value)
public TimeScope get_timeScope()
public void set_timeScope(TimeScope value)
public IScore get_localUserScore()
public UInt32 get_maxRange()
public IScore[] get_scores()
public string get_title()
}
public UnityEngine.SocialPlatforms.ILocalUser {
public IUserProfile[] friends
public bool authenticated
public bool underage
public void Authenticate(Action`1<bool> callback)
public void Authenticate(Action`2<bool, string> callback)
public void LoadFriends(Action`1<bool> callback)
public IUserProfile[] get_friends()
public bool get_authenticated()
public bool get_underage()
}
public UnityEngine.SocialPlatforms.Impl.Achievement : object {
private bool m_Completed
private bool m_Hidden
private DateTime m_LastReportedDate
private string <id>k__BackingField
private double <percentCompleted>k__BackingField
public string id
public double percentCompleted
public bool completed
public bool hidden
public DateTime lastReportedDate
public void .ctor(string id, double percentCompleted, bool completed, bool hidden, DateTime lastReportedDate)
public void .ctor(string id, double percent)
public string ToString()
public void ReportProgress(Action`1<bool> callback)
public void SetCompleted(bool value)
public void SetHidden(bool value)
public void SetLastReportedDate(DateTime date)
public string get_id()
public void set_id(string value)
public double get_percentCompleted()
public void set_percentCompleted(double value)
public bool get_completed()
public bool get_hidden()
public DateTime get_lastReportedDate()
}
public UnityEngine.SocialPlatforms.Impl.AchievementDescription : object {
private string m_Title
private Texture2D m_Image
private string m_AchievedDescription
private string m_UnachievedDescription
private bool m_Hidden
private int m_Points
private string <id>k__BackingField
public string id
public string title
public Texture2D image
public string achievedDescription
public string unachievedDescription
public bool hidden
public int points
public void .ctor(string id, string title, Texture2D image, string achievedDescription, string unachievedDescription, bool hidden, int points)
public string ToString()
public void SetImage(Texture2D image)
public string get_id()
public void set_id(string value)
public string get_title()
public Texture2D get_image()
public string get_achievedDescription()
public string get_unachievedDescription()
public bool get_hidden()
public int get_points()
}
public UnityEngine.SocialPlatforms.Impl.Leaderboard : object {
private bool m_Loading
private IScore m_LocalUserScore
private UInt32 m_MaxRange
private IScore[] m_Scores
private string m_Title
private String[] m_UserIDs
private string <id>k__BackingField
private UserScope <userScope>k__BackingField
private Range <range>k__BackingField
private TimeScope <timeScope>k__BackingField
public bool loading
public string id
public UserScope userScope
public Range range
public TimeScope timeScope
public IScore localUserScore
public UInt32 maxRange
public IScore[] scores
public string title
public void SetUserFilter(String[] userIDs)
public string ToString()
public void LoadScores(Action`1<bool> callback)
public bool get_loading()
public void SetLocalUserScore(IScore score)
public void SetMaxRange(UInt32 maxRange)
public void SetScores(IScore[] scores)
public void SetTitle(string title)
public String[] GetUserFilter()
public string get_id()
public void set_id(string value)
public UserScope get_userScope()
public void set_userScope(UserScope value)
public Range get_range()
public void set_range(Range value)
public TimeScope get_timeScope()
public void set_timeScope(TimeScope value)
public IScore get_localUserScore()
public UInt32 get_maxRange()
public IScore[] get_scores()
public string get_title()
}
public UnityEngine.SocialPlatforms.Impl.LocalUser : UserProfile {
private IUserProfile[] m_Friends
private bool m_Authenticated
private bool m_Underage
public IUserProfile[] friends
public bool authenticated
public bool underage
public void Authenticate(Action`1<bool> callback)
public void Authenticate(Action`2<bool, string> callback)
public void LoadFriends(Action`1<bool> callback)
public void SetFriends(IUserProfile[] friends)
public void SetAuthenticated(bool value)
public void SetUnderage(bool value)
public IUserProfile[] get_friends()
public bool get_authenticated()
public bool get_underage()
}
public UnityEngine.SocialPlatforms.Impl.Score : object {
private DateTime m_Date
private string m_FormattedValue
private string m_UserID
private int m_Rank
private string <leaderboardID>k__BackingField
private long <value>k__BackingField
public string leaderboardID
public long value
public DateTime date
public string formattedValue
public string userID
public int rank
public void .ctor(string leaderboardID, long value)
public void .ctor(string leaderboardID, long value, string userID, DateTime date, string formattedValue, int rank)
public string ToString()
public void ReportScore(Action`1<bool> callback)
public void SetDate(DateTime date)
public void SetFormattedValue(string value)
public void SetUserID(string userID)
public void SetRank(int rank)
public string get_leaderboardID()
public void set_leaderboardID(string value)
public long get_value()
public void set_value(long value)
public DateTime get_date()
public string get_formattedValue()
public string get_userID()
public int get_rank()
}
public UnityEngine.SocialPlatforms.Impl.UserProfile : object {
protected string m_UserName
protected string m_ID
protected bool m_IsFriend
protected UserState m_State
protected Texture2D m_Image
public string userName
public string id
public bool isFriend
public UserState state
public Texture2D image
public void .ctor(string name, string id, bool friend)
public void .ctor(string name, string id, bool friend, UserState state, Texture2D image)
public string ToString()
public void SetUserName(string name)
public void SetUserID(string id)
public void SetImage(Texture2D image)
public void SetIsFriend(bool value)
public void SetState(UserState state)
public string get_userName()
public string get_id()
public bool get_isFriend()
public UserState get_state()
public Texture2D get_image()
}
public UnityEngine.SocialPlatforms.IScore {
public string leaderboardID
public long value
public DateTime date
public string formattedValue
public string userID
public int rank
public void ReportScore(Action`1<bool> callback)
public string get_leaderboardID()
public void set_leaderboardID(string value)
public long get_value()
public void set_value(long value)
public DateTime get_date()
public string get_formattedValue()
public string get_userID()
public int get_rank()
}
public UnityEngine.SocialPlatforms.ISocialPlatform {
public ILocalUser localUser
public ILocalUser get_localUser()
public void LoadUsers(String[] userIDs, Action`1<IUserProfile[]> callback)
public void ReportProgress(string achievementID, double progress, Action`1<bool> callback)
public void LoadAchievementDescriptions(Action`1<IAchievementDescription[]> callback)
public void LoadAchievements(Action`1<IAchievement[]> callback)
public IAchievement CreateAchievement()
public void ReportScore(long score, string board, Action`1<bool> callback)
public void LoadScores(string leaderboardID, Action`1<IScore[]> callback)
public ILeaderboard CreateLeaderboard()
public void ShowAchievementsUI()
public void ShowLeaderboardUI()
public void Authenticate(ILocalUser user, Action`1<bool> callback)
public void Authenticate(ILocalUser user, Action`2<bool, string> callback)
public void LoadFriends(ILocalUser user, Action`1<bool> callback)
public void LoadScores(ILeaderboard board, Action`1<bool> callback)
public bool GetLoading(ILeaderboard board)
}
public UnityEngine.SocialPlatforms.IUserProfile {
public string userName
public string id
public bool isFriend
public UserState state
public Texture2D image
public string get_userName()
public string get_id()
public bool get_isFriend()
public UserState get_state()
public Texture2D get_image()
}
public UnityEngine.SocialPlatforms.Local : object {
private LocalUser m_LocalUser
private List`1<UserProfile> m_Friends
private List`1<UserProfile> m_Users
private List`1<AchievementDescription> m_AchievementDescriptions
private List`1<Achievement> m_Achievements
private List`1<Leaderboard> m_Leaderboards
private Texture2D m_DefaultTexture
private Comparison`1<Score> <>f__am$cache0
public ILocalUser localUser
public ILocalUser get_localUser()
private void UnityEngine.SocialPlatforms.ISocialPlatform.Authenticate(ILocalUser user, Action`1<bool> callback)
private void UnityEngine.SocialPlatforms.ISocialPlatform.Authenticate(ILocalUser user, Action`2<bool, string> callback)
private void UnityEngine.SocialPlatforms.ISocialPlatform.LoadFriends(ILocalUser user, Action`1<bool> callback)
public void LoadUsers(String[] userIDs, Action`1<IUserProfile[]> callback)
public void ReportProgress(string id, double progress, Action`1<bool> callback)
public void LoadAchievementDescriptions(Action`1<IAchievementDescription[]> callback)
public void LoadAchievements(Action`1<IAchievement[]> callback)
public void ReportScore(long score, string board, Action`1<bool> callback)
public void LoadScores(string leaderboardID, Action`1<IScore[]> callback)
private void UnityEngine.SocialPlatforms.ISocialPlatform.LoadScores(ILeaderboard board, Action`1<bool> callback)
private bool UnityEngine.SocialPlatforms.ISocialPlatform.GetLoading(ILeaderboard board)
private void SortScores(Leaderboard board)
private void SetLocalPlayerScore(Leaderboard board)
public void ShowAchievementsUI()
public void ShowLeaderboardUI()
public ILeaderboard CreateLeaderboard()
public IAchievement CreateAchievement()
private bool VerifyUser()
private void PopulateStaticData()
private Texture2D CreateDummyTexture(int width, int height)
private int <SortScores>m__0(Score s1, Score s2)
}
public UnityEngine.SocialPlatforms.Range : ValueType {
public int from
public int count
public void .ctor(int fromValue, int valueCount)
}
public UnityEngine.SocialPlatforms.TimeScope : Enum {
public int value__
public TimeScope Today
public TimeScope Week
public TimeScope AllTime
}
public UnityEngine.SocialPlatforms.UserScope : Enum {
public int value__
public UserScope Global
public UserScope FriendsOnly
}
public UnityEngine.SocialPlatforms.UserState : Enum {
public int value__
public UserState Online
public UserState OnlineAndAway
public UserState OnlineAndBusy
public UserState Offline
public UserState Playing
}
public UnityEngine.SoftJointLimit : ValueType {
private float m_Limit
private float m_Bounciness
private float m_ContactDistance
public float limit
public float spring
public float damper
public float bounciness
public float contactDistance
public float bouncyness
public float get_limit()
public void set_limit(float value)
public float get_spring()
public void set_spring(float value)
public float get_damper()
public void set_damper(float value)
public float get_bounciness()
public void set_bounciness(float value)
public float get_contactDistance()
public void set_contactDistance(float value)
public float get_bouncyness()
public void set_bouncyness(float value)
}
public UnityEngine.SoftJointLimitSpring : ValueType {
private float m_Spring
private float m_Damper
public float spring
public float damper
public float get_spring()
public void set_spring(float value)
public float get_damper()
public void set_damper(float value)
}
public UnityEngine.SortingLayer : ValueType {
private int m_Id
public int id
public string name
public int value
public SortingLayer[] layers
public int get_id()
public string get_name()
public int get_value()
public SortingLayer[] get_layers()
private Int32[] GetSortingLayerIDsInternal()
public int GetLayerValueFromID(int id)
public int GetLayerValueFromName(string name)
public int NameToID(string name)
public string IDToName(int id)
public bool IsValid(int id)
}
public UnityEngine.Space : Enum {
public int value__
public Space World
public Space Self
}
public UnityEngine.SpaceAttribute : PropertyAttribute {
public float height
public void .ctor(float height)
}
public UnityEngine.SparseTexture : Texture {
public int tileWidth
public int tileHeight
public bool isCreated
public void .ctor(int width, int height, TextureFormat format, int mipCount)
public void .ctor(int width, int height, TextureFormat format, int mipCount, bool linear)
public int get_tileWidth()
public int get_tileHeight()
public bool get_isCreated()
private void Internal_Create(SparseTexture mono, int width, int height, TextureFormat format, int mipCount, bool linear)
public void UpdateTile(int tileX, int tileY, int miplevel, Color32[] data)
public void UpdateTileRaw(int tileX, int tileY, int miplevel, Byte[] data)
public void UnloadTile(int tileX, int tileY, int miplevel)
}
public UnityEngine.SphereCollider : Collider {
public Vector3 center
public float radius
public Vector3 get_center()
public void set_center(Vector3 value)
private void INTERNAL_get_center(Vector3& value)
private void INTERNAL_set_center(Vector3& value)
public float get_radius()
public void set_radius(float value)
}
public UnityEngine.SplatPrototype : object {
internal Texture2D m_Texture
internal Texture2D m_NormalMap
internal Vector2 m_TileSize
internal Vector2 m_TileOffset
internal Vector4 m_SpecularMetallic
internal float m_Smoothness
public Texture2D texture
public Texture2D normalMap
public Vector2 tileSize
public Vector2 tileOffset
public Color specular
public float metallic
public float smoothness
public Texture2D get_texture()
public void set_texture(Texture2D value)
public Texture2D get_normalMap()
public void set_normalMap(Texture2D value)
public Vector2 get_tileSize()
public void set_tileSize(Vector2 value)
public Vector2 get_tileOffset()
public void set_tileOffset(Vector2 value)
public Color get_specular()
public void set_specular(Color value)
public float get_metallic()
public void set_metallic(float value)
public float get_smoothness()
public void set_smoothness(float value)
}
public UnityEngine.SpringJoint : Joint {
public float spring
public float damper
public float minDistance
public float maxDistance
public float tolerance
public float get_spring()
public void set_spring(float value)
public float get_damper()
public void set_damper(float value)
public float get_minDistance()
public void set_minDistance(float value)
public float get_maxDistance()
public void set_maxDistance(float value)
public float get_tolerance()
public void set_tolerance(float value)
}
public UnityEngine.SpringJoint2D : AnchoredJoint2D {
public bool autoConfigureDistance
public float distance
public float dampingRatio
public float frequency
public bool get_autoConfigureDistance()
public void set_autoConfigureDistance(bool value)
public float get_distance()
public void set_distance(float value)
public float get_dampingRatio()
public void set_dampingRatio(float value)
public float get_frequency()
public void set_frequency(float value)
}
public UnityEngine.Sprite : Object {
public Bounds bounds
public Rect rect
public float pixelsPerUnit
public Texture2D texture
public Texture2D associatedAlphaSplitTexture
public Rect textureRect
public Vector2 textureRectOffset
public bool packed
public SpritePackingMode packingMode
public SpritePackingRotation packingRotation
public Vector2 pivot
public Vector4 border
public Vector2[] vertices
public UInt16[] triangles
public Vector2[] uv
public Sprite Create(Texture2D texture, Rect rect, Vector2 pivot, float pixelsPerUnit, UInt32 extrude, SpriteMeshType meshType, Vector4 border)
public Sprite Create(Texture2D texture, Rect rect, Vector2 pivot, float pixelsPerUnit, UInt32 extrude, SpriteMeshType meshType)
public Sprite Create(Texture2D texture, Rect rect, Vector2 pivot, float pixelsPerUnit, UInt32 extrude)
public Sprite Create(Texture2D texture, Rect rect, Vector2 pivot, float pixelsPerUnit)
public Sprite Create(Texture2D texture, Rect rect, Vector2 pivot)
private Sprite INTERNAL_CALL_Create(Texture2D texture, Rect& rect, Vector2& pivot, float pixelsPerUnit, UInt32 extrude, SpriteMeshType meshType, Vector4& border)
public Bounds get_bounds()
private void INTERNAL_get_bounds(Bounds& value)
public Rect get_rect()
private void INTERNAL_get_rect(Rect& value)
public float get_pixelsPerUnit()
public Texture2D get_texture()
public Texture2D get_associatedAlphaSplitTexture()
public Rect get_textureRect()
private void INTERNAL_get_textureRect(Rect& value)
public Vector2 get_textureRectOffset()
public bool get_packed()
public SpritePackingMode get_packingMode()
public SpritePackingRotation get_packingRotation()
private void Internal_GetTextureRectOffset(Sprite sprite, Vector2& output)
private void Internal_GetPivot(Sprite sprite, Vector2& output)
public Vector2 get_pivot()
public Vector4 get_border()
private void INTERNAL_get_border(Vector4& value)
public Vector2[] get_vertices()
public UInt16[] get_triangles()
public Vector2[] get_uv()
public void OverrideGeometry(Vector2[] vertices, UInt16[] triangles)
}
public UnityEngine.SpriteAlignment : Enum {
public int value__
public SpriteAlignment Center
public SpriteAlignment TopLeft
public SpriteAlignment TopCenter
public SpriteAlignment TopRight
public SpriteAlignment LeftCenter
public SpriteAlignment RightCenter
public SpriteAlignment BottomLeft
public SpriteAlignment BottomCenter
public SpriteAlignment BottomRight
public SpriteAlignment Custom
}
public UnityEngine.SpriteDrawMode : Enum {
public int value__
public SpriteDrawMode Simple
public SpriteDrawMode Sliced
public SpriteDrawMode Tiled
}
public UnityEngine.SpriteMask : Renderer {
public Sprite sprite
public float alphaCutoff
public bool isCustomRangeActive
public int frontSortingLayerID
public int frontSortingOrder
public int backSortingLayerID
public int backSortingOrder
public Sprite get_sprite()
public void set_sprite(Sprite value)
public float get_alphaCutoff()
public void set_alphaCutoff(float value)
public bool get_isCustomRangeActive()
public void set_isCustomRangeActive(bool value)
public int get_frontSortingLayerID()
public void set_frontSortingLayerID(int value)
public int get_frontSortingOrder()
public void set_frontSortingOrder(int value)
public int get_backSortingLayerID()
public void set_backSortingLayerID(int value)
public int get_backSortingOrder()
public void set_backSortingOrder(int value)
internal Bounds GetSpriteBounds()
private void INTERNAL_CALL_GetSpriteBounds(SpriteMask self, Bounds& value)
}
public UnityEngine.SpriteMaskInteraction : Enum {
public int value__
public SpriteMaskInteraction None
public SpriteMaskInteraction VisibleInsideMask
public SpriteMaskInteraction VisibleOutsideMask
}
public UnityEngine.SpriteMeshType : Enum {
public int value__
public SpriteMeshType FullRect
public SpriteMeshType Tight
}
public UnityEngine.SpritePackingMode : Enum {
public int value__
public SpritePackingMode Tight
public SpritePackingMode Rectangle
}
public UnityEngine.SpritePackingRotation : Enum {
public int value__
public SpritePackingRotation None
public SpritePackingRotation Any
}
public UnityEngine.SpriteRenderer : Renderer {
public Sprite sprite
public SpriteDrawMode drawMode
internal bool shouldSupportTiling
public Vector2 size
public float adaptiveModeThreshold
public SpriteTileMode tileMode
public Color color
public bool flipX
public bool flipY
public SpriteMaskInteraction maskInteraction
public Sprite get_sprite()
public void set_sprite(Sprite value)
public SpriteDrawMode get_drawMode()
public void set_drawMode(SpriteDrawMode value)
internal bool get_shouldSupportTiling()
public Vector2 get_size()
public void set_size(Vector2 value)
private void INTERNAL_get_size(Vector2& value)
private void INTERNAL_set_size(Vector2& value)
public float get_adaptiveModeThreshold()
public void set_adaptiveModeThreshold(float value)
public SpriteTileMode get_tileMode()
public void set_tileMode(SpriteTileMode value)
private Sprite GetSprite_INTERNAL()
private void SetSprite_INTERNAL(Sprite sprite)
public Color get_color()
public void set_color(Color value)
private void INTERNAL_get_color(Color& value)
private void INTERNAL_set_color(Color& value)
public bool get_flipX()
public void set_flipX(bool value)
public bool get_flipY()
public void set_flipY(bool value)
public SpriteMaskInteraction get_maskInteraction()
public void set_maskInteraction(SpriteMaskInteraction value)
internal Bounds GetSpriteBounds()
private void INTERNAL_CALL_GetSpriteBounds(SpriteRenderer self, Bounds& value)
}
public UnityEngine.Sprites.DataUtility : object {
public Vector4 GetInnerUV(Sprite sprite)
private void INTERNAL_CALL_GetInnerUV(Sprite sprite, Vector4& value)
public Vector4 GetOuterUV(Sprite sprite)
private void INTERNAL_CALL_GetOuterUV(Sprite sprite, Vector4& value)
public Vector4 GetPadding(Sprite sprite)
private void INTERNAL_CALL_GetPadding(Sprite sprite, Vector4& value)
public Vector2 GetMinSize(Sprite sprite)
private void Internal_GetMinSize(Sprite sprite, Vector2& output)
}
public UnityEngine.SpriteTileMode : Enum {
public int value__
public SpriteTileMode Continuous
public SpriteTileMode Adaptive
}
public UnityEngine.StackTraceLogType : Enum {
public int value__
public StackTraceLogType None
public StackTraceLogType ScriptOnly
public StackTraceLogType Full
}
public UnityEngine.StackTraceUtility : object {
private string projectFolder
internal void SetProjectFolder(string folder)
public string ExtractStackTrace()
private bool IsSystemStacktraceType(object name)
public string ExtractStringFromException(object exception)
internal void ExtractStringFromExceptionInternal(object exceptiono, String& message, String& stackTrace)
internal string PostprocessStacktrace(string oldString, bool stripEngineInternalInformation)
internal string ExtractFormattedStackTrace(StackTrace stackTrace)
}
public UnityEngine.StateMachineBehaviour : ScriptableObject {
public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
public void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
public void OnStateMachineExit(Animator animator, int stateMachinePathHash)
public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
public void OnStateMachineEnter(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller)
public void OnStateMachineExit(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller)
}
internal UnityEngine.StaticBatchingHelper : ValueType {
internal Mesh InternalCombineVertices(MeshInstance[] meshes, string meshName)
internal void InternalCombineIndices(SubMeshInstance[] submeshes, Mesh combinedMesh)
}
public UnityEngine.StaticBatchingUtility : object {
public void Combine(GameObject staticBatchRoot)
public void Combine(GameObject[] gos, GameObject staticBatchRoot)
}
public UnityEngine.StereoTargetEyeMask : Enum {
public int value__
public StereoTargetEyeMask None
public StereoTargetEyeMask Left
public StereoTargetEyeMask Right
public StereoTargetEyeMask Both
}
internal UnityEngine.StylePainter : object {
internal IntPtr m_Ptr
private Vector2 <mousePosition>k__BackingField
private Rect <currentWorldClip>k__BackingField
private Event <repaintEvent>k__BackingField
private Color m_OpacityColor
public Vector2 mousePosition
public Rect currentWorldClip
public Event repaintEvent
public float opacity
public void .ctor(Vector2 pos)
public void DrawTexture(Rect screenRect, Texture texture, Color color, ScaleMode scaleMode, float borderWidth, float borderRadius, int leftBorder, int topBorder, int rightBorder, int bottomBorder)
public void DrawRect(Rect screenRect, Color color, float borderWidth, float borderRadius)
public void DrawText(Rect screenRect, string text, Font font, int fontSize, FontStyle fontStyle, Color fontColor, TextAnchor anchor, bool wordWrap, float wordWrapWidth, bool richText, TextClipping clipping)
public Vector2 get_mousePosition()
public void set_mousePosition(Vector2 value)
public Rect get_currentWorldClip()
public void set_currentWorldClip(Rect value)
public Event get_repaintEvent()
public void set_repaintEvent(Event value)
public float get_opacity()
public void set_opacity(float value)
private void Init()
public void DrawRect_Internal(Rect screenRect, Color color, float borderWidth, float borderRadius)
private void INTERNAL_CALL_DrawRect_Internal(StylePainter self, Rect& screenRect, Color& color, float borderWidth, float borderRadius)
public void DrawTexture_Internal(Rect screenRect, Texture texture, Rect sourceRect, Color color, float borderWidth, float borderRadius, int leftBorder, int topBorder, int rightBorder, int bottomBorder)
private void INTERNAL_CALL_DrawTexture_Internal(StylePainter self, Rect& screenRect, Texture texture, Rect& sourceRect, Color& color, float borderWidth, float borderRadius, int leftBorder, int topBorder, int rightBorder, int bottomBorder)
public void DrawText_Internal(Rect screenRect, string text, Font font, int fontSize, FontStyle fontStyle, Color fontColor, TextAnchor anchor, bool wordWrap, float wordWrapWidth, bool richText, TextClipping textClipping)
private void INTERNAL_CALL_DrawText_Internal(StylePainter self, Rect& screenRect, string text, Font font, int fontSize, FontStyle fontStyle, Color& fontColor, TextAnchor anchor, bool wordWrap, float wordWrapWidth, bool richText, TextClipping textClipping)
public float ComputeTextWidth(string text, Font font, int fontSize, FontStyle fontStyle, TextAnchor anchor, bool richText)
public float ComputeTextHeight(string text, float width, bool wordWrap, Font font, int fontSize, FontStyle fontStyle, TextAnchor anchor, bool richText)
}
internal UnityEngine.StyleSheets.StyleComplexSelector : object {
private int m_Specificity
private StyleRule <rule>k__BackingField
private StyleSelector[] m_Selectors
internal int ruleIndex
public int specificity
public StyleRule rule
public bool isSimple
public StyleSelector[] selectors
public int get_specificity()
internal void set_specificity(int value)
public StyleRule get_rule()
internal void set_rule(StyleRule value)
public bool get_isSimple()
public StyleSelector[] get_selectors()
internal void set_selectors(StyleSelector[] value)
}
internal UnityEngine.StyleSheets.StyleProperty : object {
private string m_Name
private StyleValueHandle[] m_Values
public string name
public StyleValueHandle[] values
public string get_name()
internal void set_name(string value)
public StyleValueHandle[] get_values()
internal void set_values(StyleValueHandle[] value)
}
internal UnityEngine.StyleSheets.StyleRule : object {
private StyleProperty[] m_Properties
internal int line
public StyleProperty[] properties
public StyleProperty[] get_properties()
internal void set_properties(StyleProperty[] value)
}
internal UnityEngine.StyleSheets.StyleSelector : object {
private StyleSelectorPart[] m_Parts
private StyleSelectorRelationship m_PreviousRelationship
internal int pseudoStateMask
internal int negatedPseudoStateMask
private Func`2<StyleSelectorPart, string> <>f__am$cache0
public StyleSelectorPart[] parts
public StyleSelectorRelationship previousRelationship
public StyleSelectorPart[] get_parts()
internal void set_parts(StyleSelectorPart[] value)
public StyleSelectorRelationship get_previousRelationship()
internal void set_previousRelationship(StyleSelectorRelationship value)
public string ToString()
private string <ToString>m__0(StyleSelectorPart p)
}
internal UnityEngine.StyleSheets.StyleSelectorPart : ValueType {
private string m_Value
private StyleSelectorType m_Type
public string value
public StyleSelectorType type
public string get_value()
internal void set_value(string value)
public StyleSelectorType get_type()
internal void set_type(StyleSelectorType value)
public string ToString()
}
internal UnityEngine.StyleSheets.StyleSelectorRelationship : Enum {
public int value__
public StyleSelectorRelationship None
public StyleSelectorRelationship Child
public StyleSelectorRelationship Descendent
}
internal UnityEngine.StyleSheets.StyleSelectorType : Enum {
public int value__
public StyleSelectorType Unknown
public StyleSelectorType Wildcard
public StyleSelectorType Type
public StyleSelectorType Class
public StyleSelectorType PseudoClass
public StyleSelectorType RecursivePseudoClass
public StyleSelectorType ID
}
internal UnityEngine.StyleSheets.StyleSheet : ScriptableObject {
private StyleRule[] m_Rules
private StyleComplexSelector[] m_ComplexSelectors
internal Single[] floats
internal Color[] colors
internal String[] strings
public StyleRule[] rules
public StyleComplexSelector[] complexSelectors
public StyleRule[] get_rules()
internal void set_rules(StyleRule[] value)
public StyleComplexSelector[] get_complexSelectors()
internal void set_complexSelectors(StyleComplexSelector[] value)
private T CheckAccess(T[] list, StyleValueType type, StyleValueHandle handle)
private void OnEnable()
private void SetupReferences()
public StyleValueKeyword ReadKeyword(StyleValueHandle handle)
public float ReadFloat(StyleValueHandle handle)
public Color ReadColor(StyleValueHandle handle)
public string ReadString(StyleValueHandle handle)
public string ReadEnum(StyleValueHandle handle)
public string ReadResourcePath(StyleValueHandle handle)
}
internal UnityEngine.StyleSheets.StyleValueHandle : ValueType {
private StyleValueType m_ValueType
internal int valueIndex
public StyleValueType valueType
internal void .ctor(int valueIndex, StyleValueType valueType)
public StyleValueType get_valueType()
internal void set_valueType(StyleValueType value)
}
internal UnityEngine.StyleSheets.StyleValueKeyword : Enum {
public int value__
public StyleValueKeyword Inherit
public StyleValueKeyword Auto
public StyleValueKeyword Unset
public StyleValueKeyword True
public StyleValueKeyword False
public StyleValueKeyword None
}
internal UnityEngine.StyleSheets.StyleValueType : Enum {
public int value__
public StyleValueType Keyword
public StyleValueType Float
public StyleValueType Color
public StyleValueType ResourcePath
public StyleValueType Enum
public StyleValueType String
}
public UnityEngine.SurfaceEffector2D : Effector2D {
public float speed
public float speedVariation
public float forceScale
public bool useContactForce
public bool useFriction
public bool useBounce
public float get_speed()
public void set_speed(float value)
public float get_speedVariation()
public void set_speedVariation(float value)
public float get_forceScale()
public void set_forceScale(float value)
public bool get_useContactForce()
public void set_useContactForce(bool value)
public bool get_useFriction()
public void set_useFriction(bool value)
public bool get_useBounce()
public void set_useBounce(bool value)
}
internal UnityEngine.SystemClock : object {
private DateTime s_Epoch
public DateTime now
public DateTime get_now()
public long ToUnixTimeMilliseconds(DateTime date)
public long ToUnixTimeSeconds(DateTime date)
}
public UnityEngine.SystemInfo : object {
public string unsupportedIdentifier
public float batteryLevel
public BatteryStatus batteryStatus
public string operatingSystem
public OperatingSystemFamily operatingSystemFamily
public string processorType
public int processorFrequency
public int processorCount
public int systemMemorySize
public int graphicsMemorySize
public string graphicsDeviceName
public string graphicsDeviceVendor
public int graphicsDeviceID
public int graphicsDeviceVendorID
public GraphicsDeviceType graphicsDeviceType
public bool graphicsUVStartsAtTop
public string graphicsDeviceVersion
public int graphicsShaderLevel
public int graphicsPixelFillrate
public bool supportsVertexPrograms
public bool graphicsMultiThreaded
public bool supportsShadows
public bool supportsRawShadowDepthSampling
public bool supportsRenderTextures
public bool supportsMotionVectors
public bool supportsRenderToCubemap
public bool supportsImageEffects
public bool supports3DTextures
public bool supports2DArrayTextures
public bool supports3DRenderTextures
public bool supportsCubemapArrayTextures
public CopyTextureSupport copyTextureSupport
public bool supportsComputeShaders
public bool supportsInstancing
public bool supportsSparseTextures
public int supportedRenderTargetCount
public bool usesReversedZBuffer
public int supportsStencil
public NPOTSupport npotSupport
public string deviceUniqueIdentifier
public string deviceName
public string deviceModel
public bool supportsAccelerometer
public bool supportsGyroscope
public bool supportsLocationService
public bool supportsVibration
public bool supportsAudio
public DeviceType deviceType
public int maxTextureSize
public int maxCubemapSize
internal int maxRenderTextureSize
public float get_batteryLevel()
public BatteryStatus get_batteryStatus()
public string get_operatingSystem()
public OperatingSystemFamily get_operatingSystemFamily()
public string get_processorType()
public int get_processorFrequency()
public int get_processorCount()
public int get_systemMemorySize()
public int get_graphicsMemorySize()
public string get_graphicsDeviceName()
public string get_graphicsDeviceVendor()
public int get_graphicsDeviceID()
public int get_graphicsDeviceVendorID()
public GraphicsDeviceType get_graphicsDeviceType()
public bool get_graphicsUVStartsAtTop()
public string get_graphicsDeviceVersion()
public int get_graphicsShaderLevel()
public int get_graphicsPixelFillrate()
public bool get_supportsVertexPrograms()
public bool get_graphicsMultiThreaded()
public bool get_supportsShadows()
public bool get_supportsRawShadowDepthSampling()
public bool get_supportsRenderTextures()
public bool get_supportsMotionVectors()
public bool get_supportsRenderToCubemap()
public bool get_supportsImageEffects()
public bool get_supports3DTextures()
public bool get_supports2DArrayTextures()
public bool get_supports3DRenderTextures()
public bool get_supportsCubemapArrayTextures()
public CopyTextureSupport get_copyTextureSupport()
public bool get_supportsComputeShaders()
public bool get_supportsInstancing()
public bool get_supportsSparseTextures()
public int get_supportedRenderTargetCount()
public bool get_usesReversedZBuffer()
public int get_supportsStencil()
public bool SupportsRenderTextureFormat(RenderTextureFormat format)
public bool SupportsTextureFormat(TextureFormat format)
public NPOTSupport get_npotSupport()
public string get_deviceUniqueIdentifier()
public string get_deviceName()
public string get_deviceModel()
public bool get_supportsAccelerometer()
public bool get_supportsGyroscope()
public bool get_supportsLocationService()
public bool get_supportsVibration()
public bool get_supportsAudio()
public DeviceType get_deviceType()
public int get_maxTextureSize()
public int get_maxCubemapSize()
internal int get_maxRenderTextureSize()
}
public UnityEngine.SystemLanguage : Enum {
public int value__
public SystemLanguage Afrikaans
public SystemLanguage Arabic
public SystemLanguage Basque
public SystemLanguage Belarusian
public SystemLanguage Bulgarian
public SystemLanguage Catalan
public SystemLanguage Chinese
public SystemLanguage Czech
public SystemLanguage Danish
public SystemLanguage Dutch
public SystemLanguage English
public SystemLanguage Estonian
public SystemLanguage Faroese
public SystemLanguage Finnish
public SystemLanguage French
public SystemLanguage German
public SystemLanguage Greek
public SystemLanguage Hebrew
public SystemLanguage Icelandic
public SystemLanguage Indonesian
public SystemLanguage Italian
public SystemLanguage Japanese
public SystemLanguage Korean
public SystemLanguage Latvian
public SystemLanguage Lithuanian
public SystemLanguage Norwegian
public SystemLanguage Polish
public SystemLanguage Portuguese
public SystemLanguage Romanian
public SystemLanguage Russian
public SystemLanguage SerboCroatian
public SystemLanguage Slovak
public SystemLanguage Slovenian
public SystemLanguage Spanish
public SystemLanguage Swedish
public SystemLanguage Thai
public SystemLanguage Turkish
public SystemLanguage Ukrainian
public SystemLanguage Vietnamese
public SystemLanguage ChineseSimplified
public SystemLanguage ChineseTraditional
public SystemLanguage Unknown
public SystemLanguage Hungarian
}
public UnityEngine.TargetJoint2D : Joint2D {
public Vector2 anchor
public Vector2 target
public bool autoConfigureTarget
public float maxForce
public float dampingRatio
public float frequency
public Vector2 get_anchor()
public void set_anchor(Vector2 value)
private void INTERNAL_get_anchor(Vector2& value)
private void INTERNAL_set_anchor(Vector2& value)
public Vector2 get_target()
public void set_target(Vector2 value)
private void INTERNAL_get_target(Vector2& value)
private void INTERNAL_set_target(Vector2& value)
public bool get_autoConfigureTarget()
public void set_autoConfigureTarget(bool value)
public float get_maxForce()
public void set_maxForce(float value)
public float get_dampingRatio()
public void set_dampingRatio(float value)
public float get_frequency()
public void set_frequency(float value)
}
public UnityEngine.Terrain : Behaviour {
public TerrainData terrainData
public float treeDistance
public float treeBillboardDistance
public float treeCrossFadeLength
public int treeMaximumFullLODCount
public float detailObjectDistance
public float detailObjectDensity
public float heightmapPixelError
public int heightmapMaximumLOD
public float basemapDistance
public float splatmapDistance
public int lightmapIndex
public int realtimeLightmapIndex
public Vector4 lightmapScaleOffset
public Vector4 realtimeLightmapScaleOffset
public bool castShadows
public ReflectionProbeUsage reflectionProbeUsage
public MaterialType materialType
public Material materialTemplate
public Color legacySpecular
public float legacyShininess
public bool drawHeightmap
public bool drawTreesAndFoliage
public Vector3 patchBoundsMultiplier
public float treeLODBiasMultiplier
public bool collectDetailPatches
public TerrainRenderFlags editorRenderFlags
public Terrain activeTerrain
public Terrain[] activeTerrains
private TerrainData GetTerrainDataInternal()
public TerrainData get_terrainData()
public void set_terrainData(TerrainData value)
public float get_treeDistance()
public void set_treeDistance(float value)
public float get_treeBillboardDistance()
public void set_treeBillboardDistance(float value)
public float get_treeCrossFadeLength()
public void set_treeCrossFadeLength(float value)
public int get_treeMaximumFullLODCount()
public void set_treeMaximumFullLODCount(int value)
public float get_detailObjectDistance()
public void set_detailObjectDistance(float value)
public float get_detailObjectDensity()
public void set_detailObjectDensity(float value)
public float get_heightmapPixelError()
public void set_heightmapPixelError(float value)
public int get_heightmapMaximumLOD()
public void set_heightmapMaximumLOD(int value)
public float get_basemapDistance()
public void set_basemapDistance(float value)
public float get_splatmapDistance()
public void set_splatmapDistance(float value)
public int get_lightmapIndex()
public void set_lightmapIndex(int value)
public int get_realtimeLightmapIndex()
public void set_realtimeLightmapIndex(int value)
public Vector4 get_lightmapScaleOffset()
public void set_lightmapScaleOffset(Vector4 value)
private void INTERNAL_get_lightmapScaleOffset(Vector4& value)
private void INTERNAL_set_lightmapScaleOffset(Vector4& value)
public Vector4 get_realtimeLightmapScaleOffset()
public void set_realtimeLightmapScaleOffset(Vector4 value)
private void INTERNAL_get_realtimeLightmapScaleOffset(Vector4& value)
private void INTERNAL_set_realtimeLightmapScaleOffset(Vector4& value)
public bool get_castShadows()
public void set_castShadows(bool value)
public ReflectionProbeUsage get_reflectionProbeUsage()
public void set_reflectionProbeUsage(ReflectionProbeUsage value)
private void GetClosestReflectionProbesInternal(object result)
public void GetClosestReflectionProbes(List`1<ReflectionProbeBlendInfo> result)
public MaterialType get_materialType()
public void set_materialType(MaterialType value)
public Material get_materialTemplate()
public void set_materialTemplate(Material value)
public Color get_legacySpecular()
public void set_legacySpecular(Color value)
private void INTERNAL_get_legacySpecular(Color& value)
private void INTERNAL_set_legacySpecular(Color& value)
public float get_legacyShininess()
public void set_legacyShininess(float value)
public bool get_drawHeightmap()
public void set_drawHeightmap(bool value)
public bool get_drawTreesAndFoliage()
public void set_drawTreesAndFoliage(bool value)
public Vector3 get_patchBoundsMultiplier()
public void set_patchBoundsMultiplier(Vector3 value)
private void INTERNAL_get_patchBoundsMultiplier(Vector3& value)
private void INTERNAL_set_patchBoundsMultiplier(Vector3& value)
public float SampleHeight(Vector3 worldPosition)
private float INTERNAL_CALL_SampleHeight(Terrain self, Vector3& worldPosition)
public void ApplyDelayedHeightmapModification()
public void AddTreeInstance(TreeInstance instance)
private void INTERNAL_CALL_AddTreeInstance(Terrain self, TreeInstance& instance)
public void SetNeighbors(Terrain left, Terrain top, Terrain right, Terrain bottom)
public float get_treeLODBiasMultiplier()
public void set_treeLODBiasMultiplier(float value)
public bool get_collectDetailPatches()
public void set_collectDetailPatches(bool value)
public TerrainRenderFlags get_editorRenderFlags()
public void set_editorRenderFlags(TerrainRenderFlags value)
public Vector3 GetPosition()
private void INTERNAL_CALL_GetPosition(Terrain self, Vector3& value)
public void Flush()
internal void RemoveTrees(Vector2 position, float radius, int prototypeIndex)
private void INTERNAL_CALL_RemoveTrees(Terrain self, Vector2& position, float radius, int prototypeIndex)
public void SetSplatMaterialPropertyBlock(MaterialPropertyBlock properties)
public void GetSplatMaterialPropertyBlock(MaterialPropertyBlock dest)
private void Internal_GetSplatMaterialPropertyBlock(MaterialPropertyBlock dest)
public Terrain get_activeTerrain()
public Terrain[] get_activeTerrains()
public GameObject CreateTerrainGameObject(TerrainData assignTerrain)
}
public UnityEngine.TerrainChangedFlags : Enum {
public int value__
public TerrainChangedFlags Heightmap
public TerrainChangedFlags TreeInstances
public TerrainChangedFlags DelayedHeightmapUpdate
public TerrainChangedFlags FlushEverythingImmediately
public TerrainChangedFlags RemoveDirtyDetailsImmediately
public TerrainChangedFlags WillBeDestroyed
}
public UnityEngine.TerrainCollider : Collider {
public TerrainData terrainData
public TerrainData get_terrainData()
public void set_terrainData(TerrainData value)
}
public UnityEngine.TerrainData : Object {
private int kMaximumResolution
private int kMinimumDetailResolutionPerPatch
private int kMaximumDetailResolutionPerPatch
private int kMaximumDetailPatchCount
private int kMinimumAlphamapResolution
private int kMaximumAlphamapResolution
private int kMinimumBaseMapResolution
private int kMaximumBaseMapResolution
public int heightmapWidth
public int heightmapHeight
public int heightmapResolution
private int Internal_heightmapResolution
public Vector3 heightmapScale
public Vector3 size
public Bounds bounds
public float thickness
public float wavingGrassStrength
public float wavingGrassAmount
public float wavingGrassSpeed
public Color wavingGrassTint
public int detailWidth
public int detailHeight
public int detailResolution
internal int detailResolutionPerPatch
public DetailPrototype[] detailPrototypes
public TreeInstance[] treeInstances
public int treeInstanceCount
public TreePrototype[] treePrototypes
public int alphamapLayers
public int alphamapResolution
private int Internal_alphamapResolution
public int alphamapWidth
public int alphamapHeight
public int baseMapResolution
private int Internal_baseMapResolution
private int alphamapTextureCount
public Texture2D[] alphamapTextures
public SplatPrototype[] splatPrototypes
private int Internal_GetMaximumResolution()
private int Internal_GetMinimumDetailResolutionPerPatch()
private int Internal_GetMaximumDetailResolutionPerPatch()
private int Internal_GetMaximumDetailPatchCount()
private int Internal_GetMinimumAlphamapResolution()
private int Internal_GetMaximumAlphamapResolution()
private int Internal_GetMinimumBaseMapResolution()
private int Internal_GetMaximumBaseMapResolution()
internal void Internal_Create(TerrainData terrainData)
internal bool HasUser(GameObject user)
internal void AddUser(GameObject user)
internal void RemoveUser(GameObject user)
public int get_heightmapWidth()
public int get_heightmapHeight()
public int get_heightmapResolution()
public void set_heightmapResolution(int value)
private int get_Internal_heightmapResolution()
private void set_Internal_heightmapResolution(int value)
public Vector3 get_heightmapScale()
private void INTERNAL_get_heightmapScale(Vector3& value)
public Vector3 get_size()
public void set_size(Vector3 value)
private void INTERNAL_get_size(Vector3& value)
private void INTERNAL_set_size(Vector3& value)
public Bounds get_bounds()
private void INTERNAL_get_bounds(Bounds& value)
public float get_thickness()
public void set_thickness(float value)
public float GetHeight(int x, int y)
public float GetInterpolatedHeight(float x, float y)
public Single[0...,0...] GetHeights(int xBase, int yBase, int width, int height)
public void SetHeights(int xBase, int yBase, Single[0...,0...] heights)
private void Internal_SetHeights(int xBase, int yBase, int width, int height, Single[0...,0...] heights)
private void Internal_SetHeightsDelayLOD(int xBase, int yBase, int width, int height, Single[0...,0...] heights)
public void SetHeightsDelayLOD(int xBase, int yBase, Single[0...,0...] heights)
public float GetSteepness(float x, float y)
public Vector3 GetInterpolatedNormal(float x, float y)
private void INTERNAL_CALL_GetInterpolatedNormal(TerrainData self, float x, float y, Vector3& value)
internal int GetAdjustedSize(int size)
public float get_wavingGrassStrength()
public void set_wavingGrassStrength(float value)
public float get_wavingGrassAmount()
public void set_wavingGrassAmount(float value)
public float get_wavingGrassSpeed()
public void set_wavingGrassSpeed(float value)
public Color get_wavingGrassTint()
public void set_wavingGrassTint(Color value)
private void INTERNAL_get_wavingGrassTint(Color& value)
private void INTERNAL_set_wavingGrassTint(Color& value)
public int get_detailWidth()
public int get_detailHeight()
public void SetDetailResolution(int detailResolution, int resolutionPerPatch)
private void Internal_SetDetailResolution(int patchCount, int resolutionPerPatch)
public int get_detailResolution()
internal int get_detailResolutionPerPatch()
internal void ResetDirtyDetails()
public void RefreshPrototypes()
public DetailPrototype[] get_detailPrototypes()
public void set_detailPrototypes(DetailPrototype[] value)
public Int32[] GetSupportedLayers(int xBase, int yBase, int totalWidth, int totalHeight)
public Int32[0...,0...] GetDetailLayer(int xBase, int yBase, int width, int height, int layer)
public void SetDetailLayer(int xBase, int yBase, int layer, Int32[0...,0...] details)
private void Internal_SetDetailLayer(int xBase, int yBase, int totalWidth, int totalHeight, int detailIndex, Int32[0...,0...] data)
public TreeInstance[] get_treeInstances()
public void set_treeInstances(TreeInstance[] value)
public TreeInstance GetTreeInstance(int index)
private void INTERNAL_CALL_GetTreeInstance(TerrainData self, int index, TreeInstance& value)
public void SetTreeInstance(int index, TreeInstance instance)
private void INTERNAL_CALL_SetTreeInstance(TerrainData self, int index, TreeInstance& instance)
public int get_treeInstanceCount()
public TreePrototype[] get_treePrototypes()
public void set_treePrototypes(TreePrototype[] value)
internal void RemoveTreePrototype(int index)
internal void RecalculateTreePositions()
internal void RemoveDetailPrototype(int index)
internal bool NeedUpgradeScaledTreePrototypes()
internal void UpgradeScaledTreePrototype()
public int get_alphamapLayers()
public Single[0...,0...,0...] GetAlphamaps(int x, int y, int width, int height)
public int get_alphamapResolution()
public void set_alphamapResolution(int value)
internal float GetAlphamapResolutionInternal()
private int get_Internal_alphamapResolution()
private void set_Internal_alphamapResolution(int value)
public int get_alphamapWidth()
public int get_alphamapHeight()
public int get_baseMapResolution()
public void set_baseMapResolution(int value)
private int get_Internal_baseMapResolution()
private void set_Internal_baseMapResolution(int value)
public void SetAlphamaps(int x, int y, Single[0...,0...,0...] map)
private void Internal_SetAlphamaps(int x, int y, int width, int height, Single[0...,0...,0...] map)
internal void RecalculateBasemapIfDirty()
internal void SetBasemapDirty(bool dirty)
private Texture2D GetAlphamapTexture(int index)
private int get_alphamapTextureCount()
public Texture2D[] get_alphamapTextures()
public SplatPrototype[] get_splatPrototypes()
public void set_splatPrototypes(SplatPrototype[] value)
internal void AddTree(TreeInstance& tree)
internal int RemoveTrees(Vector2 position, float radius, int prototypeIndex)
private int INTERNAL_CALL_RemoveTrees(TerrainData self, Vector2& position, float radius, int prototypeIndex)
}
public UnityEngine.TerrainExtensions : object {
public void UpdateGIMaterials(Terrain terrain)
public void UpdateGIMaterials(Terrain terrain, int x, int y, int width, int height)
internal void UpdateGIMaterialsForTerrain(Terrain terrain, Rect uvBounds)
private void INTERNAL_CALL_UpdateGIMaterialsForTerrain(Terrain terrain, Rect& uvBounds)
}
public UnityEngine.TerrainRenderFlags : Enum {
public int value__
public TerrainRenderFlags heightmap
public TerrainRenderFlags trees
public TerrainRenderFlags details
public TerrainRenderFlags all
}
public UnityEngine.TexGenMode : Enum {
public int value__
public TexGenMode None
public TexGenMode SphereMap
public TexGenMode Object
public TexGenMode EyeLinear
public TexGenMode CubeReflect
public TexGenMode CubeNormal
}
public UnityEngine.TextAlignment : Enum {
public int value__
public TextAlignment Left
public TextAlignment Center
public TextAlignment Right
}
public UnityEngine.TextAnchor : Enum {
public int value__
public TextAnchor UpperLeft
public TextAnchor UpperCenter
public TextAnchor UpperRight
public TextAnchor MiddleLeft
public TextAnchor MiddleCenter
public TextAnchor MiddleRight
public TextAnchor LowerLeft
public TextAnchor LowerCenter
public TextAnchor LowerRight
}
public UnityEngine.TextAreaAttribute : PropertyAttribute {
public int minLines
public int maxLines
public void .ctor(int minLines, int maxLines)
}
public UnityEngine.TextAsset : Object {
public string text
public Byte[] bytes
public string get_text()
public Byte[] get_bytes()
public string ToString()
private void Internal_CreateTextAsset(TextAsset mono)
}
public UnityEngine.TextClipping : Enum {
public int value__
public TextClipping Overflow
public TextClipping Clip
}
public UnityEngine.TextEditor : object {
public TouchScreenKeyboard keyboardOnScreen
public int controlID
public GUIStyle style
public bool multiline
public bool hasHorizontalCursorPos
public bool isPasswordField
internal bool m_HasFocus
public Vector2 scrollOffset
private GUIContent m_Content
private Rect m_Position
private int m_CursorIndex
private int m_SelectIndex
private bool m_RevealCursor
public Vector2 graphicalCursorPos
public Vector2 graphicalSelectCursorPos
private bool m_MouseDragSelectsWholeWords
private int m_DblClickInitPos
private DblClickSnapping m_DblClickSnap
private bool m_bJustSelected
private int m_iAltCursorPos
private string oldText
private int oldPos
private int oldSelectPos
private Dictionary`2<Event, TextEditOp> s_Keyactions
public GUIContent content
public string text
public Rect position
internal Rect localPosition
public int cursorIndex
public int selectIndex
public DblClickSnapping doubleClickSnapping
public int altCursorPosition
public bool hasSelection
public string SelectedText
public GUIContent get_content()
public void set_content(GUIContent value)
public string get_text()
public void set_text(string value)
public Rect get_position()
public void set_position(Rect value)
internal Rect get_localPosition()
public int get_cursorIndex()
public void set_cursorIndex(int value)
public int get_selectIndex()
public void set_selectIndex(int value)
private void ClearCursorPos()
public DblClickSnapping get_doubleClickSnapping()
public void set_doubleClickSnapping(DblClickSnapping value)
public int get_altCursorPosition()
public void set_altCursorPosition(int value)
public void OnFocus()
public void OnLostFocus()
private void GrabGraphicalCursorPos()
public bool HandleKeyEvent(Event e)
public bool DeleteLineBack()
public bool DeleteWordBack()
public bool DeleteWordForward()
public bool Delete()
public bool CanPaste()
public bool Backspace()
public void SelectAll()
public void SelectNone()
public bool get_hasSelection()
public string get_SelectedText()
public bool DeleteSelection()
public void ReplaceSelection(string replace)
public void Insert(char c)
public void MoveSelectionToAltCursor()
public void MoveRight()
public void MoveLeft()
public void MoveUp()
public void MoveDown()
public void MoveLineStart()
public void MoveLineEnd()
public void MoveGraphicalLineStart()
public void MoveGraphicalLineEnd()
public void MoveTextStart()
public void MoveTextEnd()
private int IndexOfEndOfLine(int startIndex)
public void MoveParagraphForward()
public void MoveParagraphBackward()
public void MoveCursorToPosition(Vector2 cursorPosition)
protected internal void MoveCursorToPosition_Internal(Vector2 cursorPosition, bool shift)
public void MoveAltCursorToPosition(Vector2 cursorPosition)
public bool IsOverSelection(Vector2 cursorPosition)
public void SelectToPosition(Vector2 cursorPosition)
public void SelectLeft()
public void SelectRight()
public void SelectUp()
public void SelectDown()
public void SelectTextEnd()
public void SelectTextStart()
public void MouseDragSelectsWholeWords(bool on)
public void DblClickSnap(DblClickSnapping snapping)
private int GetGraphicalLineStart(int p)
private int GetGraphicalLineEnd(int p)
private int FindNextSeperator(int startPos)
private bool isLetterLikeChar(char c)
private int FindPrevSeperator(int startPos)
public void MoveWordRight()
public void MoveToStartOfNextWord()
public void MoveToEndOfPreviousWord()
public void SelectToStartOfNextWord()
public void SelectToEndOfPreviousWord()
private CharacterType ClassifyChar(char c)
public int FindStartOfNextWord(int p)
private int FindEndOfPreviousWord(int p)
public void MoveWordLeft()
public void SelectWordRight()
public void SelectWordLeft()
public void ExpandSelectGraphicalLineStart()
public void ExpandSelectGraphicalLineEnd()
public void SelectGraphicalLineStart()
public void SelectGraphicalLineEnd()
public void SelectParagraphForward()
public void SelectParagraphBackward()
public void SelectCurrentWord()
private int FindEndOfClassification(int p, int dir)
public void SelectCurrentParagraph()
public void UpdateScrollOffsetIfNeeded(Event evt)
protected void UpdateScrollOffset()
public void DrawCursor(string newText)
private bool PerformOperation(TextEditOp operation)
public void SaveBackup()
public void Undo()
public bool Cut()
public void Copy()
private string ReplaceNewlinesWithSpaces(string value)
public bool Paste()
private void MapKey(string key, TextEditOp action)
private void InitKeyActions()
public void DetectFocusChange()
internal void OnDetectFocusChange()
private void ClampTextIndex(Int32& index)
}
internal UnityEngine.TextGenerationError : Enum {
public int value__
public TextGenerationError None
public TextGenerationError CustomSizeOnNonDynamicFont
public TextGenerationError CustomStyleOnNonDynamicFont
public TextGenerationError NoFont
}
public UnityEngine.TextGenerationSettings : ValueType {
public Font font
public Color color
public int fontSize
public float lineSpacing
public bool richText
public float scaleFactor
public FontStyle fontStyle
public TextAnchor textAnchor
public bool alignByGeometry
public bool resizeTextForBestFit
public int resizeTextMinSize
public int resizeTextMaxSize
public bool updateBounds
public VerticalWrapMode verticalOverflow
public HorizontalWrapMode horizontalOverflow
public Vector2 generationExtents
public Vector2 pivot
public bool generateOutOfBounds
private bool CompareColors(Color left, Color right)
private bool CompareVector2(Vector2 left, Vector2 right)
public bool Equals(TextGenerationSettings other)
}
public UnityEngine.TextGenerator : object {
internal IntPtr m_Ptr
private string m_LastString
private TextGenerationSettings m_LastSettings
private bool m_HasGenerated
private TextGenerationError m_LastValid
private List`1<UIVertex> m_Verts
private List`1<UICharInfo> m_Characters
private List`1<UILineInfo> m_Lines
private bool m_CachedVerts
private bool m_CachedCharacters
private bool m_CachedLines
public IList`1<UIVertex> verts
public IList`1<UICharInfo> characters
public IList`1<UILineInfo> lines
public Rect rectExtents
public int vertexCount
public int characterCount
public int characterCountVisible
public int lineCount
public int fontSizeUsedForBestFit
public void .ctor(int initialCapacity)
protected void Finalize()
private void System.IDisposable.Dispose()
private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings)
public void Invalidate()
public void GetCharacters(List`1<UICharInfo> characters)
public void GetLines(List`1<UILineInfo> lines)
public void GetVertices(List`1<UIVertex> vertices)
public float GetPreferredWidth(string str, TextGenerationSettings settings)
public float GetPreferredHeight(string str, TextGenerationSettings settings)
public bool PopulateWithErrors(string str, TextGenerationSettings settings, GameObject context)
public bool Populate(string str, TextGenerationSettings settings)
private TextGenerationError PopulateWithError(string str, TextGenerationSettings settings)
private TextGenerationError PopulateAlways(string str, TextGenerationSettings settings)
public IList`1<UIVertex> get_verts()
public IList`1<UICharInfo> get_characters()
public IList`1<UILineInfo> get_lines()
private void Init()
private void Dispose_cpp()
internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, VerticalWrapMode verticalOverFlow, HorizontalWrapMode horizontalOverflow, bool updateBounds, TextAnchor anchor, Vector2 extents, Vector2 pivot, bool generateOutOfBounds, bool alignByGeometry, TextGenerationError& error)
internal bool Populate_Internal_cpp(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, UInt32& error)
private bool INTERNAL_CALL_Populate_Internal_cpp(TextGenerator self, string str, Font font, Color& color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, UInt32& error)
public Rect get_rectExtents()
private void INTERNAL_get_rectExtents(Rect& value)
public int get_vertexCount()
private void GetVerticesInternal(object vertices)
public UIVertex[] GetVerticesArray()
public int get_characterCount()
public int get_characterCountVisible()
private void GetCharactersInternal(object characters)
public UICharInfo[] GetCharactersArray()
public int get_lineCount()
private void GetLinesInternal(object lines)
public UILineInfo[] GetLinesArray()
public int get_fontSizeUsedForBestFit()
}
public UnityEngine.TextMesh : Component {
public string text
public Font font
public int fontSize
public FontStyle fontStyle
public float offsetZ
public TextAlignment alignment
public TextAnchor anchor
public float characterSize
public float lineSpacing
public float tabSize
public bool richText
public Color color
public string get_text()
public void set_text(string value)
public Font get_font()
public void set_font(Font value)
public int get_fontSize()
public void set_fontSize(int value)
public FontStyle get_fontStyle()
public void set_fontStyle(FontStyle value)
public float get_offsetZ()
public void set_offsetZ(float value)
public TextAlignment get_alignment()
public void set_alignment(TextAlignment value)
public TextAnchor get_anchor()
public void set_anchor(TextAnchor value)
public float get_characterSize()
public void set_characterSize(float value)
public float get_lineSpacing()
public void set_lineSpacing(float value)
public float get_tabSize()
public void set_tabSize(float value)
public bool get_richText()
public void set_richText(bool value)
public Color get_color()
public void set_color(Color value)
private void INTERNAL_get_color(Color& value)
private void INTERNAL_set_color(Color& value)
}
public UnityEngine.Texture : Object {
public int masterTextureLimit
public AnisotropicFiltering anisotropicFiltering
public int width
public int height
public TextureDimension dimension
public FilterMode filterMode
public int anisoLevel
public TextureWrapMode wrapMode
public TextureWrapMode wrapModeU
public TextureWrapMode wrapModeV
public TextureWrapMode wrapModeW
public float mipMapBias
public Vector2 texelSize
public int get_masterTextureLimit()
public void set_masterTextureLimit(int value)
public AnisotropicFiltering get_anisotropicFiltering()
public void set_anisotropicFiltering(AnisotropicFiltering value)
public void SetGlobalAnisotropicFilteringLimits(int forcedMin, int globalMax)
private int Internal_GetWidth(Texture t)
private int Internal_GetHeight(Texture t)
private TextureDimension Internal_GetDimension(Texture t)
public int get_width()
public void set_width(int value)
public int get_height()
public void set_height(int value)
public TextureDimension get_dimension()
public void set_dimension(TextureDimension value)
public FilterMode get_filterMode()
public void set_filterMode(FilterMode value)
public int get_anisoLevel()
public void set_anisoLevel(int value)
public TextureWrapMode get_wrapMode()
public void set_wrapMode(TextureWrapMode value)
public TextureWrapMode get_wrapModeU()
public void set_wrapModeU(TextureWrapMode value)
public TextureWrapMode get_wrapModeV()
public void set_wrapModeV(TextureWrapMode value)
public TextureWrapMode get_wrapModeW()
public void set_wrapModeW(TextureWrapMode value)
public float get_mipMapBias()
public void set_mipMapBias(float value)
public Vector2 get_texelSize()
private void INTERNAL_get_texelSize(Vector2& value)
public IntPtr GetNativeTexturePtr()
private void INTERNAL_CALL_GetNativeTexturePtr(Texture self, IntPtr& value)
public int GetNativeTextureID()
}
public UnityEngine.Texture2D : Texture {
public int mipmapCount
public TextureFormat format
public Texture2D whiteTexture
public Texture2D blackTexture
public void .ctor(int width, int height)
public void .ctor(int width, int height, TextureFormat format, bool mipmap)
public void .ctor(int width, int height, TextureFormat format, bool mipmap, bool linear)
internal void .ctor(int width, int height, TextureFormat format, bool mipmap, bool linear, IntPtr nativeTex)
public int get_mipmapCount()
private void Internal_Create(Texture2D mono, int width, int height, TextureFormat format, bool mipmap, bool linear, IntPtr nativeTex)
public Texture2D CreateExternalTexture(int width, int height, TextureFormat format, bool mipmap, bool linear, IntPtr nativeTex)
public void UpdateExternalTexture(IntPtr nativeTex)
public TextureFormat get_format()
public Texture2D get_whiteTexture()
public Texture2D get_blackTexture()
public void SetPixel(int x, int y, Color color)
private void INTERNAL_CALL_SetPixel(Texture2D self, int x, int y, Color& color)
public Color GetPixel(int x, int y)
private void INTERNAL_CALL_GetPixel(Texture2D self, int x, int y, Color& value)
public Color GetPixelBilinear(float u, float v)
private void INTERNAL_CALL_GetPixelBilinear(Texture2D self, float u, float v, Color& value)
public void SetPixels(Color[] colors)
public void SetPixels(Color[] colors, int miplevel)
public void SetPixels(int x, int y, int blockWidth, int blockHeight, Color[] colors, int miplevel)
public void SetPixels(int x, int y, int blockWidth, int blockHeight, Color[] colors)
private void SetAllPixels32(Color32[] colors, int miplevel)
private void SetBlockOfPixels32(int x, int y, int blockWidth, int blockHeight, Color32[] colors, int miplevel)
public void SetPixels32(Color32[] colors)
public void SetPixels32(Color32[] colors, int miplevel)
public void SetPixels32(int x, int y, int blockWidth, int blockHeight, Color32[] colors)
public void SetPixels32(int x, int y, int blockWidth, int blockHeight, Color32[] colors, int miplevel)
private void LoadRawTextureData_ImplArray(Byte[] data)
private void LoadRawTextureData_ImplPointer(IntPtr data, int size)
public void LoadRawTextureData(Byte[] data)
public void LoadRawTextureData(IntPtr data, int size)
public Byte[] GetRawTextureData()
public Color[] GetPixels()
public Color[] GetPixels(int miplevel)
public Color[] GetPixels(int x, int y, int blockWidth, int blockHeight, int miplevel)
public Color[] GetPixels(int x, int y, int blockWidth, int blockHeight)
public Color32[] GetPixels32(int miplevel)
public Color32[] GetPixels32()
public void Apply(bool updateMipmaps, bool makeNoLongerReadable)
public void Apply(bool updateMipmaps)
public void Apply()
public bool Resize(int width, int height, TextureFormat format, bool hasMipMap)
public bool Resize(int width, int height)
private bool Internal_ResizeWH(int width, int height)
public void Compress(bool highQuality)
private void INTERNAL_CALL_Compress(Texture2D self, bool highQuality)
public Rect[] PackTextures(Texture2D[] textures, int padding, int maximumAtlasSize, bool makeNoLongerReadable)
public Rect[] PackTextures(Texture2D[] textures, int padding, int maximumAtlasSize)
public Rect[] PackTextures(Texture2D[] textures, int padding)
public bool GenerateAtlas(Vector2[] sizes, int padding, int atlasSize, List`1<Rect> results)
private void GenerateAtlasInternal(Vector2[] sizes, int padding, int atlasSize, object resultList)
public void ReadPixels(Rect source, int destX, int destY, bool recalculateMipMaps)
public void ReadPixels(Rect source, int destX, int destY)
private void INTERNAL_CALL_ReadPixels(Texture2D self, Rect& source, int destX, int destY, bool recalculateMipMaps)
}
public UnityEngine.Texture2DArray : Texture {
public int depth
public TextureFormat format
public void .ctor(int width, int height, int depth, TextureFormat format, bool mipmap)
public void .ctor(int width, int height, int depth, TextureFormat format, bool mipmap, bool linear)
public int get_depth()
public TextureFormat get_format()
public void Apply(bool updateMipmaps, bool makeNoLongerReadable)
public void Apply(bool updateMipmaps)
public void Apply()
private void Internal_Create(Texture2DArray mono, int width, int height, int depth, TextureFormat format, bool mipmap, bool linear)
public void SetPixels(Color[] colors, int arrayElement, int miplevel)
public void SetPixels(Color[] colors, int arrayElement)
public void SetPixels32(Color32[] colors, int arrayElement, int miplevel)
public void SetPixels32(Color32[] colors, int arrayElement)
public Color[] GetPixels(int arrayElement, int miplevel)
public Color[] GetPixels(int arrayElement)
public Color32[] GetPixels32(int arrayElement, int miplevel)
public Color32[] GetPixels32(int arrayElement)
}
public UnityEngine.Texture3D : Texture {
public int depth
public TextureFormat format
public void .ctor(int width, int height, int depth, TextureFormat format, bool mipmap)
public int get_depth()
public Color[] GetPixels(int miplevel)
public Color[] GetPixels()
public Color32[] GetPixels32(int miplevel)
public Color32[] GetPixels32()
public void SetPixels(Color[] colors, int miplevel)
public void SetPixels(Color[] colors)
public void SetPixels32(Color32[] colors, int miplevel)
public void SetPixels32(Color32[] colors)
public void Apply(bool updateMipmaps, bool makeNoLongerReadable)
public void Apply(bool updateMipmaps)
public void Apply()
public TextureFormat get_format()
private void Internal_Create(Texture3D mono, int width, int height, int depth, TextureFormat format, bool mipmap)
}
public UnityEngine.TextureFormat : Enum {
public int value__
public TextureFormat Alpha8
public TextureFormat ARGB4444
public TextureFormat RGB24
public TextureFormat RGBA32
public TextureFormat ARGB32
public TextureFormat RGB565
public TextureFormat R16
public TextureFormat DXT1
public TextureFormat DXT5
public TextureFormat RGBA4444
public TextureFormat BGRA32
public TextureFormat RHalf
public TextureFormat RGHalf
public TextureFormat RGBAHalf
public TextureFormat RFloat
public TextureFormat RGFloat
public TextureFormat RGBAFloat
public TextureFormat YUY2
public TextureFormat RGB9e5Float
public TextureFormat BC4
public TextureFormat BC5
public TextureFormat BC6H
public TextureFormat BC7
public TextureFormat DXT1Crunched
public TextureFormat DXT5Crunched
public TextureFormat PVRTC_RGB2
public TextureFormat PVRTC_RGBA2
public TextureFormat PVRTC_RGB4
public TextureFormat PVRTC_RGBA4
public TextureFormat ETC_RGB4
public TextureFormat ATC_RGB4
public TextureFormat ATC_RGBA8
public TextureFormat EAC_R
public TextureFormat EAC_R_SIGNED
public TextureFormat EAC_RG
public TextureFormat EAC_RG_SIGNED
public TextureFormat ETC2_RGB
public TextureFormat ETC2_RGBA1
public TextureFormat ETC2_RGBA8
public TextureFormat ASTC_RGB_4x4
public TextureFormat ASTC_RGB_5x5
public TextureFormat ASTC_RGB_6x6
public TextureFormat ASTC_RGB_8x8
public TextureFormat ASTC_RGB_10x10
public TextureFormat ASTC_RGB_12x12
public TextureFormat ASTC_RGBA_4x4
public TextureFormat ASTC_RGBA_5x5
public TextureFormat ASTC_RGBA_6x6
public TextureFormat ASTC_RGBA_8x8
public TextureFormat ASTC_RGBA_10x10
public TextureFormat ASTC_RGBA_12x12
public TextureFormat ETC_RGB4_3DS
public TextureFormat ETC_RGBA8_3DS
public TextureFormat RG16
public TextureFormat R8
}
public UnityEngine.TextureWrapMode : Enum {
public int value__
public TextureWrapMode Repeat
public TextureWrapMode Clamp
public TextureWrapMode Mirror
public TextureWrapMode MirrorOnce
}
public UnityEngine.ThreadPriority : Enum {
public int value__
public ThreadPriority Low
public ThreadPriority BelowNormal
public ThreadPriority Normal
public ThreadPriority High
}
public UnityEngine.Time : object {
public float time
public float timeSinceLevelLoad
public float deltaTime
public float fixedTime
public float unscaledTime
public float fixedUnscaledTime
public float unscaledDeltaTime
public float fixedUnscaledDeltaTime
public float fixedDeltaTime
public float maximumDeltaTime
public float smoothDeltaTime
public float maximumParticleDeltaTime
public float timeScale
public int frameCount
public int renderedFrameCount
public float realtimeSinceStartup
public int captureFramerate
public bool inFixedTimeStep
public float get_time()
public float get_timeSinceLevelLoad()
public float get_deltaTime()
public float get_fixedTime()
public float get_unscaledTime()
public float get_fixedUnscaledTime()
public float get_unscaledDeltaTime()
public float get_fixedUnscaledDeltaTime()
public float get_fixedDeltaTime()
public void set_fixedDeltaTime(float value)
public float get_maximumDeltaTime()
public void set_maximumDeltaTime(float value)
public float get_smoothDeltaTime()
public float get_maximumParticleDeltaTime()
public void set_maximumParticleDeltaTime(float value)
public float get_timeScale()
public void set_timeScale(float value)
public int get_frameCount()
public int get_renderedFrameCount()
public float get_realtimeSinceStartup()
public int get_captureFramerate()
public void set_captureFramerate(int value)
public bool get_inFixedTimeStep()
}
public UnityEngine.TooltipAttribute : PropertyAttribute {
public string tooltip
public void .ctor(string tooltip)
}
public UnityEngine.Touch : ValueType {
private int m_FingerId
private Vector2 m_Position
private Vector2 m_RawPosition
private Vector2 m_PositionDelta
private float m_TimeDelta
private int m_TapCount
private TouchPhase m_Phase
private TouchType m_Type
private float m_Pressure
private float m_maximumPossiblePressure
private float m_Radius
private float m_RadiusVariance
private float m_AltitudeAngle
private float m_AzimuthAngle
public int fingerId
public Vector2 position
public Vector2 rawPosition
public Vector2 deltaPosition
public float deltaTime
public int tapCount
public TouchPhase phase
public float pressure
public float maximumPossiblePressure
public TouchType type
public float altitudeAngle
public float azimuthAngle
public float radius
public float radiusVariance
public int get_fingerId()
public void set_fingerId(int value)
public Vector2 get_position()
public void set_position(Vector2 value)
public Vector2 get_rawPosition()
public void set_rawPosition(Vector2 value)
public Vector2 get_deltaPosition()
public void set_deltaPosition(Vector2 value)
public float get_deltaTime()
public void set_deltaTime(float value)
public int get_tapCount()
public void set_tapCount(int value)
public TouchPhase get_phase()
public void set_phase(TouchPhase value)
public float get_pressure()
public void set_pressure(float value)
public float get_maximumPossiblePressure()
public void set_maximumPossiblePressure(float value)
public TouchType get_type()
public void set_type(TouchType value)
public float get_altitudeAngle()
public void set_altitudeAngle(float value)
public float get_azimuthAngle()
public void set_azimuthAngle(float value)
public float get_radius()
public void set_radius(float value)
public float get_radiusVariance()
public void set_radiusVariance(float value)
}
public UnityEngine.TouchPhase : Enum {
public int value__
public TouchPhase Began
public TouchPhase Moved
public TouchPhase Stationary
public TouchPhase Ended
public TouchPhase Canceled
}
public UnityEngine.TouchScreenKeyboard : object {
public string text
public bool hideInput
public bool active
public bool done
public bool wasCanceled
private Rect area
private bool visible
public bool isSupported
public bool canGetSelection
public RangeInt selection
public TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert)
public TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure)
public TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline)
public TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection)
public TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType)
public TouchScreenKeyboard Open(string text)
public TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder)
public string get_text()
public void set_text(string value)
public bool get_hideInput()
public void set_hideInput(bool value)
public bool get_active()
public void set_active(bool value)
public bool get_done()
public bool get_wasCanceled()
private Rect get_area()
private bool get_visible()
public bool get_isSupported()
public bool get_canGetSelection()
public RangeInt get_selection()
}
public UnityEngine.TouchScreenKeyboardType : Enum {
public int value__
public TouchScreenKeyboardType Default
public TouchScreenKeyboardType ASCIICapable
public TouchScreenKeyboardType NumbersAndPunctuation
public TouchScreenKeyboardType URL
public TouchScreenKeyboardType NumberPad
public TouchScreenKeyboardType PhonePad
public TouchScreenKeyboardType NamePhonePad
public TouchScreenKeyboardType EmailAddress
public TouchScreenKeyboardType NintendoNetworkAccount
public TouchScreenKeyboardType Social
public TouchScreenKeyboardType Search
}
public UnityEngine.TouchType : Enum {
public int value__
public TouchType Direct
public TouchType Indirect
public TouchType Stylus
}
public UnityEngine.TrackedReference : object {
internal IntPtr m_Ptr
public bool op_Equality(TrackedReference x, TrackedReference y)
public bool op_Inequality(TrackedReference x, TrackedReference y)
public bool Equals(object o)
public int GetHashCode()
public bool op_Implicit(TrackedReference exists)
}
public UnityEngine.TrailRenderer : Renderer {
public float time
public float startWidth
public float endWidth
public AnimationCurve widthCurve
public float widthMultiplier
public Color startColor
public Color endColor
public Gradient colorGradient
public bool autodestruct
public int numCornerVertices
public int numCapVertices
public float minVertexDistance
public LineTextureMode textureMode
public LineAlignment alignment
public bool generateLightingData
public int positionCount
public int numPositions
public float get_time()
public void set_time(float value)
public float get_startWidth()
public void set_startWidth(float value)
public float get_endWidth()
public void set_endWidth(float value)
public AnimationCurve get_widthCurve()
public void set_widthCurve(AnimationCurve value)
public float get_widthMultiplier()
public void set_widthMultiplier(float value)
public Color get_startColor()
public void set_startColor(Color value)
private void INTERNAL_get_startColor(Color& value)
private void INTERNAL_set_startColor(Color& value)
public Color get_endColor()
public void set_endColor(Color value)
private void INTERNAL_get_endColor(Color& value)
private void INTERNAL_set_endColor(Color& value)
public Gradient get_colorGradient()
public void set_colorGradient(Gradient value)
public bool get_autodestruct()
public void set_autodestruct(bool value)
public int get_numCornerVertices()
public void set_numCornerVertices(int value)
public int get_numCapVertices()
public void set_numCapVertices(int value)
public float get_minVertexDistance()
public void set_minVertexDistance(float value)
public LineTextureMode get_textureMode()
public void set_textureMode(LineTextureMode value)
public LineAlignment get_alignment()
public void set_alignment(LineAlignment value)
public bool get_generateLightingData()
public void set_generateLightingData(bool value)
public void Clear()
public int get_positionCount()
public int get_numPositions()
public Vector3 GetPosition(int index)
private void INTERNAL_CALL_GetPosition(TrailRenderer self, int index, Vector3& value)
public int GetPositions(Vector3[] positions)
}
public UnityEngine.Transform : Component {
public Vector3 position
public Vector3 localPosition
public Vector3 eulerAngles
public Vector3 localEulerAngles
public Vector3 right
public Vector3 up
public Vector3 forward
public Quaternion rotation
public Quaternion localRotation
public Vector3 localScale
public Transform parent
internal Transform parentInternal
public Matrix4x4 worldToLocalMatrix
public Matrix4x4 localToWorldMatrix
public Transform root
public int childCount
public Vector3 lossyScale
public bool hasChanged
public int hierarchyCapacity
public int hierarchyCount
public Vector3 get_position()
public void set_position(Vector3 value)
private void INTERNAL_get_position(Vector3& value)
private void INTERNAL_set_position(Vector3& value)
public Vector3 get_localPosition()
public void set_localPosition(Vector3 value)
private void INTERNAL_get_localPosition(Vector3& value)
private void INTERNAL_set_localPosition(Vector3& value)
internal Vector3 GetLocalEulerAngles(RotationOrder order)
private void INTERNAL_CALL_GetLocalEulerAngles(Transform self, RotationOrder order, Vector3& value)
internal void SetLocalEulerAngles(Vector3 euler, RotationOrder order)
private void INTERNAL_CALL_SetLocalEulerAngles(Transform self, Vector3& euler, RotationOrder order)
public Vector3 get_eulerAngles()
public void set_eulerAngles(Vector3 value)
public Vector3 get_localEulerAngles()
public void set_localEulerAngles(Vector3 value)
public Vector3 get_right()
public void set_right(Vector3 value)
public Vector3 get_up()
public void set_up(Vector3 value)
public Vector3 get_forward()
public void set_forward(Vector3 value)
public Quaternion get_rotation()
public void set_rotation(Quaternion value)
private void INTERNAL_get_rotation(Quaternion& value)
private void INTERNAL_set_rotation(Quaternion& value)
public Quaternion get_localRotation()
public void set_localRotation(Quaternion value)
private void INTERNAL_get_localRotation(Quaternion& value)
private void INTERNAL_set_localRotation(Quaternion& value)
public Vector3 get_localScale()
public void set_localScale(Vector3 value)
private void INTERNAL_get_localScale(Vector3& value)
private void INTERNAL_set_localScale(Vector3& value)
public Transform get_parent()
public void set_parent(Transform value)
internal Transform get_parentInternal()
internal void set_parentInternal(Transform value)
public void SetParent(Transform parent)
public void SetParent(Transform parent, bool worldPositionStays)
public Matrix4x4 get_worldToLocalMatrix()
private void INTERNAL_get_worldToLocalMatrix(Matrix4x4& value)
public Matrix4x4 get_localToWorldMatrix()
private void INTERNAL_get_localToWorldMatrix(Matrix4x4& value)
public void SetPositionAndRotation(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_SetPositionAndRotation(Transform self, Vector3& position, Quaternion& rotation)
public void Translate(Vector3 translation)
public void Translate(Vector3 translation, Space relativeTo)
public void Translate(float x, float y, float z)
public void Translate(float x, float y, float z, Space relativeTo)
public void Translate(Vector3 translation, Transform relativeTo)
public void Translate(float x, float y, float z, Transform relativeTo)
public void Rotate(Vector3 eulerAngles)
public void Rotate(Vector3 eulerAngles, Space relativeTo)
public void Rotate(float xAngle, float yAngle, float zAngle)
public void Rotate(float xAngle, float yAngle, float zAngle, Space relativeTo)
internal void RotateAroundInternal(Vector3 axis, float angle)
private void INTERNAL_CALL_RotateAroundInternal(Transform self, Vector3& axis, float angle)
public void Rotate(Vector3 axis, float angle)
public void Rotate(Vector3 axis, float angle, Space relativeTo)
public void RotateAround(Vector3 point, Vector3 axis, float angle)
public void LookAt(Transform target)
public void LookAt(Transform target, Vector3 worldUp)
public void LookAt(Vector3 worldPosition, Vector3 worldUp)
public void LookAt(Vector3 worldPosition)
private void INTERNAL_CALL_LookAt(Transform self, Vector3& worldPosition, Vector3& worldUp)
public Vector3 TransformDirection(Vector3 direction)
private void INTERNAL_CALL_TransformDirection(Transform self, Vector3& direction, Vector3& value)
public Vector3 TransformDirection(float x, float y, float z)
public Vector3 InverseTransformDirection(Vector3 direction)
private void INTERNAL_CALL_InverseTransformDirection(Transform self, Vector3& direction, Vector3& value)
public Vector3 InverseTransformDirection(float x, float y, float z)
public Vector3 TransformVector(Vector3 vector)
private void INTERNAL_CALL_TransformVector(Transform self, Vector3& vector, Vector3& value)
public Vector3 TransformVector(float x, float y, float z)
public Vector3 InverseTransformVector(Vector3 vector)
private void INTERNAL_CALL_InverseTransformVector(Transform self, Vector3& vector, Vector3& value)
public Vector3 InverseTransformVector(float x, float y, float z)
public Vector3 TransformPoint(Vector3 position)
private void INTERNAL_CALL_TransformPoint(Transform self, Vector3& position, Vector3& value)
public Vector3 TransformPoint(float x, float y, float z)
public Vector3 InverseTransformPoint(Vector3 position)
private void INTERNAL_CALL_InverseTransformPoint(Transform self, Vector3& position, Vector3& value)
public Vector3 InverseTransformPoint(float x, float y, float z)
public Transform get_root()
public int get_childCount()
public void DetachChildren()
public void SetAsFirstSibling()
public void SetAsLastSibling()
public void SetSiblingIndex(int index)
public int GetSiblingIndex()
public Transform Find(string name)
public Vector3 get_lossyScale()
private void INTERNAL_get_lossyScale(Vector3& value)
public bool IsChildOf(Transform parent)
public bool get_hasChanged()
public void set_hasChanged(bool value)
public Transform FindChild(string name)
public IEnumerator GetEnumerator()
public void RotateAround(Vector3 axis, float angle)
private void INTERNAL_CALL_RotateAround(Transform self, Vector3& axis, float angle)
public void RotateAroundLocal(Vector3 axis, float angle)
private void INTERNAL_CALL_RotateAroundLocal(Transform self, Vector3& axis, float angle)
public Transform GetChild(int index)
public int GetChildCount()
public int get_hierarchyCapacity()
public void set_hierarchyCapacity(int value)
public int get_hierarchyCount()
}
internal UnityEngine.TransitionType : Enum {
public int value__
public TransitionType Normal
public TransitionType Entry
public TransitionType Exit
}
public UnityEngine.TransparencySortMode : Enum {
public int value__
public TransparencySortMode Default
public TransparencySortMode Perspective
public TransparencySortMode Orthographic
public TransparencySortMode CustomAxis
}
public UnityEngine.Tree : Component {
public ScriptableObject data
public bool hasSpeedTreeWind
public ScriptableObject get_data()
public void set_data(ScriptableObject value)
public bool get_hasSpeedTreeWind()
}
public UnityEngine.TreeInstance : ValueType {
public Vector3 position
public float widthScale
public float heightScale
public float rotation
public Color32 color
public Color32 lightmapColor
public int prototypeIndex
internal float temporaryDistance
}
public UnityEngine.TreePrototype : object {
internal GameObject m_Prefab
internal float m_BendFactor
public GameObject prefab
public float bendFactor
public GameObject get_prefab()
public void set_prefab(GameObject value)
public float get_bendFactor()
public void set_bendFactor(float value)
}
public UnityEngine.Types : object {
public Type GetType(string typeName, string assemblyName)
}
public UnityEngine.U2D.SpriteAtlas : Object {
public bool isVariant
public string tag
public int spriteCount
public bool get_isVariant()
public string get_tag()
public int get_spriteCount()
public int GetSprites(Sprite[] sprites)
public int GetSprites(Sprite[] sprites, string name)
internal int GetSpritesByName(Sprite[] sprites, string name)
public Sprite GetSprite(string name)
}
public UnityEngine.U2D.SpriteAtlasManager : object {
private RequestAtlasCallback atlasRequested
private Action`1<SpriteAtlas> <>f__mg$cache0
public void add_atlasRequested(RequestAtlasCallback value)
public void remove_atlasRequested(RequestAtlasCallback value)
private bool RequestAtlas(string tag)
internal void Register(SpriteAtlas spriteAtlas)
}
public UnityEngine.UICharInfo : ValueType {
public Vector2 cursorPos
public float charWidth
}
public UnityEngine.UILineInfo : ValueType {
public int startCharIdx
public int height
public float topY
public float leading
}
public UnityEngine.UISystemProfilerApi : object {
public void BeginSample(SampleType type)
public void EndSample(SampleType type)
public void AddMarker(string name, Object obj)
}
public UnityEngine.UIVertex : ValueType {
public Vector3 position
public Vector3 normal
public Color32 color
public Vector2 uv0
public Vector2 uv1
public Vector2 uv2
public Vector2 uv3
public Vector4 tangent
private Color32 s_DefaultColor
private Vector4 s_DefaultTangent
public UIVertex simpleVert
}
public UnityEngine.UnassignedReferenceException : SystemException {
private int Result
private string unityStackTrace
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public UnityEngine.UnityAPICompatibilityVersionAttribute : Attribute {
private string _version
public string version
public void .ctor(string version)
public string get_version()
}
public UnityEngine.UnityEventQueueSystem : object {
public string GenerateEventIdForPayload(string eventPayloadName)
public IntPtr GetGlobalEventQueue()
private void INTERNAL_CALL_GetGlobalEventQueue(IntPtr& value)
}
public UnityEngine.UnityException : SystemException {
private int Result
private string unityStackTrace
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal UnityEngine.UnityLogWriter : TextWriter {
public Encoding Encoding
public void WriteStringToUnityLog(string s)
public void Init()
public Encoding get_Encoding()
public void Write(char value)
public void Write(string s)
}
internal UnityEngine.UnityString : object {
public string Format(string fmt, Object[] args)
}
internal UnityEngine.UnitySynchronizationContext : SynchronizationContext {
private int kAwqInitialCapacity
private Queue`1<WorkRequest> m_AsyncWorkQueue
private int m_MainThreadID
public void Send(SendOrPostCallback callback, object state)
public void Post(SendOrPostCallback callback, object state)
private void Exec()
private void InitializeSynchronizationContext()
private void ExecuteTasks()
}
internal UnityEngine.UnsafeUtility : object {
public void CopyPtrToStructure(IntPtr ptr, T& output)
public void CopyStructureToPtr(T& output, IntPtr ptr)
public T ReadArrayElement(IntPtr source, int index)
public void WriteArrayElement(IntPtr destination, int index, T value)
public IntPtr AddressOf(T& output)
public int SizeOf()
public int AlignOf()
public IntPtr Malloc(int size, int alignment, Allocator label)
public void Free(IntPtr memory, Allocator label)
public void MemCpy(IntPtr destination, IntPtr source, int size)
public int SizeOfStruct(Type type)
public void LogError(string msg, string filename, int linenumber)
}
public UnityEngine.UserAuthorization : Enum {
public int value__
public UserAuthorization WebCam
public UserAuthorization Microphone
}
public UnityEngine.Vector2 : ValueType {
public float x
public float y
private Vector2 zeroVector
private Vector2 oneVector
private Vector2 upVector
private Vector2 downVector
private Vector2 leftVector
private Vector2 rightVector
private Vector2 positiveInfinityVector
private Vector2 negativeInfinityVector
public float kEpsilon
public float Item
public Vector2 normalized
public float magnitude
public float sqrMagnitude
public Vector2 zero
public Vector2 one
public Vector2 up
public Vector2 down
public Vector2 left
public Vector2 right
public Vector2 positiveInfinity
public Vector2 negativeInfinity
public void .ctor(float x, float y)
public float get_Item(int index)
public void set_Item(int index, float value)
public void Set(float newX, float newY)
public Vector2 Lerp(Vector2 a, Vector2 b, float t)
public Vector2 LerpUnclamped(Vector2 a, Vector2 b, float t)
public Vector2 MoveTowards(Vector2 current, Vector2 target, float maxDistanceDelta)
public Vector2 Scale(Vector2 a, Vector2 b)
public void Scale(Vector2 scale)
public void Normalize()
public Vector2 get_normalized()
public string ToString()
public string ToString(string format)
public int GetHashCode()
public bool Equals(object other)
public Vector2 Reflect(Vector2 inDirection, Vector2 inNormal)
public float Dot(Vector2 lhs, Vector2 rhs)
public float get_magnitude()
public float get_sqrMagnitude()
public float Angle(Vector2 from, Vector2 to)
public float SignedAngle(Vector2 from, Vector2 to)
public float Distance(Vector2 a, Vector2 b)
public Vector2 ClampMagnitude(Vector2 vector, float maxLength)
public float SqrMagnitude(Vector2 a)
public float SqrMagnitude()
public Vector2 Min(Vector2 lhs, Vector2 rhs)
public Vector2 Max(Vector2 lhs, Vector2 rhs)
public Vector2 SmoothDamp(Vector2 current, Vector2 target, Vector2& currentVelocity, float smoothTime, float maxSpeed, float deltaTime)
public Vector2 op_Addition(Vector2 a, Vector2 b)
public Vector2 op_Subtraction(Vector2 a, Vector2 b)
public Vector2 op_UnaryNegation(Vector2 a)
public Vector2 op_Multiply(Vector2 a, float d)
public Vector2 op_Multiply(float d, Vector2 a)
public Vector2 op_Division(Vector2 a, float d)
public bool op_Equality(Vector2 lhs, Vector2 rhs)
public bool op_Inequality(Vector2 lhs, Vector2 rhs)
public Vector2 op_Implicit(Vector3 v)
public Vector3 op_Implicit(Vector2 v)
public Vector2 get_zero()
public Vector2 get_one()
public Vector2 get_up()
public Vector2 get_down()
public Vector2 get_left()
public Vector2 get_right()
public Vector2 get_positiveInfinity()
public Vector2 get_negativeInfinity()
}
public UnityEngine.Vector3 : ValueType {
public float kEpsilon
public float x
public float y
public float z
private Vector3 zeroVector
private Vector3 oneVector
private Vector3 upVector
private Vector3 downVector
private Vector3 leftVector
private Vector3 rightVector
private Vector3 forwardVector
private Vector3 backVector
private Vector3 positiveInfinityVector
private Vector3 negativeInfinityVector
public float Item
public Vector3 normalized
public float magnitude
public float sqrMagnitude
public Vector3 zero
public Vector3 one
public Vector3 forward
public Vector3 back
public Vector3 up
public Vector3 down
public Vector3 left
public Vector3 right
public Vector3 positiveInfinity
public Vector3 negativeInfinity
public Vector3 fwd
public void .ctor(float x, float y, float z)
public void .ctor(float x, float y)
public Vector3 Slerp(Vector3 a, Vector3 b, float t)
private void INTERNAL_CALL_Slerp(Vector3& a, Vector3& b, float t, Vector3& value)
public Vector3 SlerpUnclamped(Vector3 a, Vector3 b, float t)
private void INTERNAL_CALL_SlerpUnclamped(Vector3& a, Vector3& b, float t, Vector3& value)
private void Internal_OrthoNormalize2(Vector3& a, Vector3& b)
private void INTERNAL_CALL_Internal_OrthoNormalize2(Vector3& a, Vector3& b)
private void Internal_OrthoNormalize3(Vector3& a, Vector3& b, Vector3& c)
private void INTERNAL_CALL_Internal_OrthoNormalize3(Vector3& a, Vector3& b, Vector3& c)
public void OrthoNormalize(Vector3& normal, Vector3& tangent)
public void OrthoNormalize(Vector3& normal, Vector3& tangent, Vector3& binormal)
public Vector3 RotateTowards(Vector3 current, Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta)
private void INTERNAL_CALL_RotateTowards(Vector3& current, Vector3& target, float maxRadiansDelta, float maxMagnitudeDelta, Vector3& value)
public Vector3 Exclude(Vector3 excludeThis, Vector3 fromThat)
public Vector3 Lerp(Vector3 a, Vector3 b, float t)
public Vector3 LerpUnclamped(Vector3 a, Vector3 b, float t)
public Vector3 MoveTowards(Vector3 current, Vector3 target, float maxDistanceDelta)
public Vector3 SmoothDamp(Vector3 current, Vector3 target, Vector3& currentVelocity, float smoothTime, float maxSpeed)
public Vector3 SmoothDamp(Vector3 current, Vector3 target, Vector3& currentVelocity, float smoothTime)
public Vector3 SmoothDamp(Vector3 current, Vector3 target, Vector3& currentVelocity, float smoothTime, float maxSpeed, float deltaTime)
public float get_Item(int index)
public void set_Item(int index, float value)
public void Set(float newX, float newY, float newZ)
public Vector3 Scale(Vector3 a, Vector3 b)
public void Scale(Vector3 scale)
public Vector3 Cross(Vector3 lhs, Vector3 rhs)
public int GetHashCode()
public bool Equals(object other)
public Vector3 Reflect(Vector3 inDirection, Vector3 inNormal)
public Vector3 Normalize(Vector3 value)
public void Normalize()
public Vector3 get_normalized()
public float Dot(Vector3 lhs, Vector3 rhs)
public Vector3 Project(Vector3 vector, Vector3 onNormal)
public Vector3 ProjectOnPlane(Vector3 vector, Vector3 planeNormal)
public float Angle(Vector3 from, Vector3 to)
public float SignedAngle(Vector3 from, Vector3 to, Vector3 axis)
public float Distance(Vector3 a, Vector3 b)
public Vector3 ClampMagnitude(Vector3 vector, float maxLength)
public float Magnitude(Vector3 vector)
public float get_magnitude()
public float SqrMagnitude(Vector3 vector)
public float get_sqrMagnitude()
public Vector3 Min(Vector3 lhs, Vector3 rhs)
public Vector3 Max(Vector3 lhs, Vector3 rhs)
public Vector3 get_zero()
public Vector3 get_one()
public Vector3 get_forward()
public Vector3 get_back()
public Vector3 get_up()
public Vector3 get_down()
public Vector3 get_left()
public Vector3 get_right()
public Vector3 get_positiveInfinity()
public Vector3 get_negativeInfinity()
public Vector3 op_Addition(Vector3 a, Vector3 b)
public Vector3 op_Subtraction(Vector3 a, Vector3 b)
public Vector3 op_UnaryNegation(Vector3 a)
public Vector3 op_Multiply(Vector3 a, float d)
public Vector3 op_Multiply(float d, Vector3 a)
public Vector3 op_Division(Vector3 a, float d)
public bool op_Equality(Vector3 lhs, Vector3 rhs)
public bool op_Inequality(Vector3 lhs, Vector3 rhs)
public string ToString()
public string ToString(string format)
public Vector3 get_fwd()
public float AngleBetween(Vector3 from, Vector3 to)
}
public UnityEngine.Vector4 : ValueType {
public float kEpsilon
public float x
public float y
public float z
public float w
private Vector4 zeroVector
private Vector4 oneVector
private Vector4 positiveInfinityVector
private Vector4 negativeInfinityVector
public float Item
public Vector4 normalized
public float magnitude
public float sqrMagnitude
public Vector4 zero
public Vector4 one
public Vector4 positiveInfinity
public Vector4 negativeInfinity
public void .ctor(float x, float y, float z, float w)
public void .ctor(float x, float y, float z)
public void .ctor(float x, float y)
public float get_Item(int index)
public void set_Item(int index, float value)
public void Set(float newX, float newY, float newZ, float newW)
public Vector4 Lerp(Vector4 a, Vector4 b, float t)
public Vector4 LerpUnclamped(Vector4 a, Vector4 b, float t)
public Vector4 MoveTowards(Vector4 current, Vector4 target, float maxDistanceDelta)
public Vector4 Scale(Vector4 a, Vector4 b)
public void Scale(Vector4 scale)
public int GetHashCode()
public bool Equals(object other)
public Vector4 Normalize(Vector4 a)
public void Normalize()
public Vector4 get_normalized()
public float Dot(Vector4 a, Vector4 b)
public Vector4 Project(Vector4 a, Vector4 b)
public float Distance(Vector4 a, Vector4 b)
public float Magnitude(Vector4 a)
public float get_magnitude()
public float get_sqrMagnitude()
public Vector4 Min(Vector4 lhs, Vector4 rhs)
public Vector4 Max(Vector4 lhs, Vector4 rhs)
public Vector4 get_zero()
public Vector4 get_one()
public Vector4 get_positiveInfinity()
public Vector4 get_negativeInfinity()
public Vector4 op_Addition(Vector4 a, Vector4 b)
public Vector4 op_Subtraction(Vector4 a, Vector4 b)
public Vector4 op_UnaryNegation(Vector4 a)
public Vector4 op_Multiply(Vector4 a, float d)
public Vector4 op_Multiply(float d, Vector4 a)
public Vector4 op_Division(Vector4 a, float d)
public bool op_Equality(Vector4 lhs, Vector4 rhs)
public bool op_Inequality(Vector4 lhs, Vector4 rhs)
public Vector4 op_Implicit(Vector3 v)
public Vector3 op_Implicit(Vector4 v)
public Vector4 op_Implicit(Vector2 v)
public Vector2 op_Implicit(Vector4 v)
public string ToString()
public string ToString(string format)
public float SqrMagnitude(Vector4 a)
public float SqrMagnitude()
}
public UnityEngine.VerticalWrapMode : Enum {
public int value__
public VerticalWrapMode Truncate
public VerticalWrapMode Overflow
}
public UnityEngine.Video.VideoAspectRatio : Enum {
public int value__
public VideoAspectRatio NoScaling
public VideoAspectRatio FitVertically
public VideoAspectRatio FitHorizontally
public VideoAspectRatio FitInside
public VideoAspectRatio FitOutside
public VideoAspectRatio Stretch
}
public UnityEngine.Video.VideoAudioOutputMode : Enum {
public int value__
public VideoAudioOutputMode None
public VideoAudioOutputMode AudioSource
public VideoAudioOutputMode Direct
}
public UnityEngine.Video.VideoClip : Object {
public string originalPath
public ulong frameCount
public double frameRate
public double length
public UInt32 width
public UInt32 height
public ushort audioTrackCount
public string get_originalPath()
public ulong get_frameCount()
public double get_frameRate()
public double get_length()
public UInt32 get_width()
public UInt32 get_height()
public ushort get_audioTrackCount()
public ushort GetAudioChannelCount(ushort audioTrackIdx)
private ushort INTERNAL_CALL_GetAudioChannelCount(VideoClip self, ushort audioTrackIdx)
public UInt32 GetAudioSampleRate(ushort audioTrackIdx)
private UInt32 INTERNAL_CALL_GetAudioSampleRate(VideoClip self, ushort audioTrackIdx)
public string GetAudioLanguage(ushort audioTrackIdx)
}
public UnityEngine.Video.VideoPlayer : Behaviour {
private EventHandler prepareCompleted
private EventHandler loopPointReached
private EventHandler started
private EventHandler frameDropped
private ErrorEventHandler errorReceived
private EventHandler seekCompleted
private TimeEventHandler clockResyncOccurred
private FrameReadyEventHandler frameReady
public VideoSource source
public string url
public VideoClip clip
public VideoRenderMode renderMode
public Camera targetCamera
public RenderTexture targetTexture
public Renderer targetMaterialRenderer
public string targetMaterialProperty
public VideoAspectRatio aspectRatio
public float targetCameraAlpha
public Texture texture
public bool isPrepared
public bool waitForFirstFrame
public bool playOnAwake
public bool isPlaying
public bool canSetTime
public double time
public long frame
public bool canStep
public bool canSetPlaybackSpeed
public float playbackSpeed
public bool isLooping
public bool canSetTimeSource
public VideoTimeSource timeSource
public VideoTimeReference timeReference
public double externalReferenceTime
public bool canSetSkipOnDrop
public bool skipOnDrop
public ulong frameCount
public float frameRate
public ushort audioTrackCount
public ushort controlledAudioTrackMaxCount
public ushort controlledAudioTrackCount
public VideoAudioOutputMode audioOutputMode
public bool canSetDirectAudioVolume
public bool sendFrameReadyEvents
public VideoSource get_source()
public void set_source(VideoSource value)
public string get_url()
public void set_url(string value)
public VideoClip get_clip()
public void set_clip(VideoClip value)
public VideoRenderMode get_renderMode()
public void set_renderMode(VideoRenderMode value)
public Camera get_targetCamera()
public void set_targetCamera(Camera value)
public RenderTexture get_targetTexture()
public void set_targetTexture(RenderTexture value)
public Renderer get_targetMaterialRenderer()
public void set_targetMaterialRenderer(Renderer value)
public string get_targetMaterialProperty()
public void set_targetMaterialProperty(string value)
public VideoAspectRatio get_aspectRatio()
public void set_aspectRatio(VideoAspectRatio value)
public float get_targetCameraAlpha()
public void set_targetCameraAlpha(float value)
public Texture get_texture()
public void Prepare()
private void INTERNAL_CALL_Prepare(VideoPlayer self)
public bool get_isPrepared()
public bool get_waitForFirstFrame()
public void set_waitForFirstFrame(bool value)
public bool get_playOnAwake()
public void set_playOnAwake(bool value)
public void Play()
private void INTERNAL_CALL_Play(VideoPlayer self)
public void Pause()
private void INTERNAL_CALL_Pause(VideoPlayer self)
public void Stop()
private void INTERNAL_CALL_Stop(VideoPlayer self)
public bool get_isPlaying()
public bool get_canSetTime()
public double get_time()
public void set_time(double value)
public long get_frame()
public void set_frame(long value)
public bool get_canStep()
public void StepForward()
public bool get_canSetPlaybackSpeed()
public float get_playbackSpeed()
public void set_playbackSpeed(float value)
public bool get_isLooping()
public void set_isLooping(bool value)
public bool get_canSetTimeSource()
public VideoTimeSource get_timeSource()
public void set_timeSource(VideoTimeSource value)
public VideoTimeReference get_timeReference()
public void set_timeReference(VideoTimeReference value)
public double get_externalReferenceTime()
public void set_externalReferenceTime(double value)
public bool get_canSetSkipOnDrop()
public bool get_skipOnDrop()
public void set_skipOnDrop(bool value)
public ulong get_frameCount()
public float get_frameRate()
public ushort get_audioTrackCount()
public string GetAudioLanguageCode(ushort trackIndex)
public ushort GetAudioChannelCount(ushort trackIndex)
private ushort INTERNAL_CALL_GetAudioChannelCount(VideoPlayer self, ushort trackIndex)
public ushort get_controlledAudioTrackMaxCount()
public ushort get_controlledAudioTrackCount()
public void set_controlledAudioTrackCount(ushort value)
public void EnableAudioTrack(ushort trackIndex, bool enabled)
private void INTERNAL_CALL_EnableAudioTrack(VideoPlayer self, ushort trackIndex, bool enabled)
public bool IsAudioTrackEnabled(ushort trackIndex)
private bool INTERNAL_CALL_IsAudioTrackEnabled(VideoPlayer self, ushort trackIndex)
public VideoAudioOutputMode get_audioOutputMode()
public void set_audioOutputMode(VideoAudioOutputMode value)
public bool get_canSetDirectAudioVolume()
public float GetDirectAudioVolume(ushort trackIndex)
private float INTERNAL_CALL_GetDirectAudioVolume(VideoPlayer self, ushort trackIndex)
public void SetDirectAudioVolume(ushort trackIndex, float volume)
private void INTERNAL_CALL_SetDirectAudioVolume(VideoPlayer self, ushort trackIndex, float volume)
public bool GetDirectAudioMute(ushort trackIndex)
private bool INTERNAL_CALL_GetDirectAudioMute(VideoPlayer self, ushort trackIndex)
public void SetDirectAudioMute(ushort trackIndex, bool mute)
private void INTERNAL_CALL_SetDirectAudioMute(VideoPlayer self, ushort trackIndex, bool mute)
public AudioSource GetTargetAudioSource(ushort trackIndex)
public void SetTargetAudioSource(ushort trackIndex, AudioSource source)
private void INTERNAL_CALL_SetTargetAudioSource(VideoPlayer self, ushort trackIndex, AudioSource source)
public void add_prepareCompleted(EventHandler value)
public void remove_prepareCompleted(EventHandler value)
public void add_loopPointReached(EventHandler value)
public void remove_loopPointReached(EventHandler value)
public void add_started(EventHandler value)
public void remove_started(EventHandler value)
public void add_frameDropped(EventHandler value)
public void remove_frameDropped(EventHandler value)
public void add_errorReceived(ErrorEventHandler value)
public void remove_errorReceived(ErrorEventHandler value)
public void add_seekCompleted(EventHandler value)
public void remove_seekCompleted(EventHandler value)
public void add_clockResyncOccurred(TimeEventHandler value)
public void remove_clockResyncOccurred(TimeEventHandler value)
public bool get_sendFrameReadyEvents()
public void set_sendFrameReadyEvents(bool value)
public void add_frameReady(FrameReadyEventHandler value)
public void remove_frameReady(FrameReadyEventHandler value)
private void InvokePrepareCompletedCallback_Internal(VideoPlayer source)
private void InvokeFrameReadyCallback_Internal(VideoPlayer source, long frameIdx)
private void InvokeLoopPointReachedCallback_Internal(VideoPlayer source)
private void InvokeStartedCallback_Internal(VideoPlayer source)
private void InvokeFrameDroppedCallback_Internal(VideoPlayer source)
private void InvokeErrorReceivedCallback_Internal(VideoPlayer source, string errorStr)
private void InvokeSeekCompletedCallback_Internal(VideoPlayer source)
private void InvokeClockResyncOccurredCallback_Internal(VideoPlayer source, double seconds)
}
public UnityEngine.Video.VideoRenderMode : Enum {
public int value__
public VideoRenderMode CameraFarPlane
public VideoRenderMode CameraNearPlane
public VideoRenderMode RenderTexture
public VideoRenderMode MaterialOverride
public VideoRenderMode APIOnly
}
public UnityEngine.Video.VideoSource : Enum {
public int value__
public VideoSource VideoClip
public VideoSource Url
}
public UnityEngine.Video.VideoTimeReference : Enum {
public int value__
public VideoTimeReference Freerun
public VideoTimeReference InternalTime
public VideoTimeReference ExternalTime
}
public UnityEngine.Video.VideoTimeSource : Enum {
public int value__
public VideoTimeSource AudioDSPTimeSource
public VideoTimeSource GameTimeSource
}
internal UnityEngine.VR.AvailableTrackingData : Enum {
public int value__
public AvailableTrackingData None
public AvailableTrackingData PositionAvailable
public AvailableTrackingData RotationAvailable
public AvailableTrackingData VelocityAvailable
public AvailableTrackingData AccelerationAvailable
}
public UnityEngine.VR.InputTracking : object {
private Action`1<VRNodeState> trackingAcquired
private Action`1<VRNodeState> trackingLost
private Action`1<VRNodeState> nodeAdded
private Action`1<VRNodeState> nodeRemoved
public bool disablePositionalTracking
public void add_trackingAcquired(Action`1<VRNodeState> value)
public void remove_trackingAcquired(Action`1<VRNodeState> value)
public void add_trackingLost(Action`1<VRNodeState> value)
public void remove_trackingLost(Action`1<VRNodeState> value)
public void add_nodeAdded(Action`1<VRNodeState> value)
public void remove_nodeAdded(Action`1<VRNodeState> value)
public void add_nodeRemoved(Action`1<VRNodeState> value)
public void remove_nodeRemoved(Action`1<VRNodeState> value)
private void InvokeTrackingEvent(TrackingStateEventType eventType, VRNode nodeType, long uniqueID, bool tracked)
public Vector3 GetLocalPosition(VRNode node)
private void INTERNAL_CALL_GetLocalPosition(VRNode node, Vector3& value)
public Quaternion GetLocalRotation(VRNode node)
private void INTERNAL_CALL_GetLocalRotation(VRNode node, Quaternion& value)
public void Recenter()
public string GetNodeName(ulong uniqueID)
private void GetNodeStatesInternal(object nodeStates)
public void GetNodeStates(List`1<VRNodeState> nodeStates)
public bool get_disablePositionalTracking()
public void set_disablePositionalTracking(bool value)
}
public UnityEngine.VR.TrackingSpaceType : Enum {
public int value__
public TrackingSpaceType Stationary
public TrackingSpaceType RoomScale
}
public UnityEngine.VR.VRDevice : object {
public bool isPresent
public string family
public string model
public float refreshRate
public bool get_isPresent()
public string get_family()
public string get_model()
public float get_refreshRate()
public TrackingSpaceType GetTrackingSpaceType()
public bool SetTrackingSpaceType(TrackingSpaceType trackingSpaceType)
public IntPtr GetNativePtr()
private void INTERNAL_CALL_GetNativePtr(IntPtr& value)
public void DisableAutoVRCameraTracking(Camera camera, bool disabled)
private void DisableAutoVRCameraTrackingInternal(Camera camera, bool disabled)
}
public UnityEngine.VR.VRDeviceType : Enum {
public int value__
public VRDeviceType Morpheus
public VRDeviceType None
public VRDeviceType Stereo
public VRDeviceType Split
public VRDeviceType Oculus
public VRDeviceType PlayStationVR
public VRDeviceType Unknown
}
public UnityEngine.VR.VRNode : Enum {
public int value__
public VRNode LeftEye
public VRNode RightEye
public VRNode CenterEye
public VRNode Head
public VRNode LeftHand
public VRNode RightHand
public VRNode GameController
public VRNode TrackingReference
public VRNode HardwareTracker
}
public UnityEngine.VR.VRNodeState : ValueType {
private VRNode m_Type
private AvailableTrackingData m_AvailableFields
private Vector3 m_Position
private Quaternion m_Rotation
private Vector3 m_Velocity
private Quaternion m_AngularVelocity
private Vector3 m_Acceleration
private Quaternion m_AngularAcceleration
private int m_Tracked
private ulong m_UniqueID
public ulong uniqueID
public VRNode nodeType
public bool tracked
public Vector3 position
public Quaternion rotation
public Vector3 velocity
public Vector3 acceleration
public ulong get_uniqueID()
public void set_uniqueID(ulong value)
public VRNode get_nodeType()
public void set_nodeType(VRNode value)
public bool get_tracked()
public void set_tracked(bool value)
public void set_position(Vector3 value)
public void set_rotation(Quaternion value)
public void set_velocity(Vector3 value)
public void set_acceleration(Vector3 value)
public bool TryGetPosition(Vector3& position)
public bool TryGetRotation(Quaternion& rotation)
public bool TryGetVelocity(Vector3& velocity)
public bool TryGetAcceleration(Vector3& acceleration)
private bool TryGet(T inValue, AvailableTrackingData availabilityFlag, T& outValue)
}
public UnityEngine.VR.VRSettings : object {
public bool enabled
public bool isDeviceActive
public bool showDeviceView
public float renderScale
public int eyeTextureWidth
public int eyeTextureHeight
public float renderViewportScale
internal float renderViewportScaleInternal
public float occlusionMaskScale
public VRDeviceType loadedDevice
public string loadedDeviceName
public String[] supportedDevices
public bool get_enabled()
public void set_enabled(bool value)
public bool get_isDeviceActive()
public bool get_showDeviceView()
public void set_showDeviceView(bool value)
public float get_renderScale()
public void set_renderScale(float value)
public int get_eyeTextureWidth()
public int get_eyeTextureHeight()
public float get_renderViewportScale()
public void set_renderViewportScale(float value)
internal float get_renderViewportScaleInternal()
internal void set_renderViewportScaleInternal(float value)
public float get_occlusionMaskScale()
public void set_occlusionMaskScale(float value)
public VRDeviceType get_loadedDevice()
public void set_loadedDevice(VRDeviceType value)
public string get_loadedDeviceName()
public void LoadDeviceByName(string deviceName)
public void LoadDeviceByName(String[] prioritizedDeviceNameList)
public String[] get_supportedDevices()
}
public UnityEngine.VR.VRStats : object {
public float gpuTimeLastFrame
public bool TryGetGPUTimeLastFrame(Single& gpuTimeLastFrame)
public bool TryGetDroppedFrameCount(Int32& droppedFrameCount)
public bool TryGetFramePresentCount(Int32& framePresentCount)
public float get_gpuTimeLastFrame()
}
public UnityEngine.VR.WSA.PositionalLocatorState : Enum {
public int value__
public PositionalLocatorState Unavailable
public PositionalLocatorState OrientationOnly
public PositionalLocatorState Activating
public PositionalLocatorState Active
public PositionalLocatorState Inhibited
}
public UnityEngine.VRTextureUsage : Enum {
public int value__
public VRTextureUsage None
public VRTextureUsage OneEye
public VRTextureUsage TwoEyes
}
public UnityEngine.WaitForSeconds : YieldInstruction {
internal float m_Seconds
public void .ctor(float seconds)
}
public UnityEngine.WaitForSecondsRealtime : CustomYieldInstruction {
private float waitTime
public bool keepWaiting
public void .ctor(float time)
public bool get_keepWaiting()
}
public UnityEngine.WaitUntil : CustomYieldInstruction {
private Func`1<bool> m_Predicate
public bool keepWaiting
public void .ctor(Func`1<bool> predicate)
public bool get_keepWaiting()
}
public UnityEngine.WaitWhile : CustomYieldInstruction {
private Func`1<bool> m_Predicate
public bool keepWaiting
public void .ctor(Func`1<bool> predicate)
public bool get_keepWaiting()
}
internal UnityEngine.WeakListenerBindings : object {
public void InvokeCallbacks(object inst, GCHandle gchandle, Object[] parameters)
}
public UnityEngine.WebCamDevice : ValueType {
internal string m_Name
internal int m_Flags
public string name
public bool isFrontFacing
public string get_name()
public bool get_isFrontFacing()
}
public UnityEngine.WebCamFlags : Enum {
public int value__
public WebCamFlags FrontFacing
}
public UnityEngine.WebCamTexture : Texture {
public bool isPlaying
public string deviceName
public float requestedFPS
public int requestedWidth
public int requestedHeight
public WebCamDevice[] devices
public int videoRotationAngle
public bool videoVerticallyMirrored
public bool didUpdateThisFrame
public void .ctor(string deviceName, int requestedWidth, int requestedHeight, int requestedFPS)
public void .ctor(string deviceName, int requestedWidth, int requestedHeight)
public void .ctor(string deviceName)
public void .ctor(int requestedWidth, int requestedHeight, int requestedFPS)
public void .ctor(int requestedWidth, int requestedHeight)
private void Internal_CreateWebCamTexture(WebCamTexture self, string scriptingDevice, int requestedWidth, int requestedHeight, int maxFramerate)
public void Play()
private void INTERNAL_CALL_Play(WebCamTexture self)
public void Pause()
private void INTERNAL_CALL_Pause(WebCamTexture self)
public void Stop()
private void INTERNAL_CALL_Stop(WebCamTexture self)
public bool get_isPlaying()
public string get_deviceName()
public void set_deviceName(string value)
public float get_requestedFPS()
public void set_requestedFPS(float value)
public int get_requestedWidth()
public void set_requestedWidth(int value)
public int get_requestedHeight()
public void set_requestedHeight(int value)
public WebCamDevice[] get_devices()
public Color GetPixel(int x, int y)
private void INTERNAL_CALL_GetPixel(WebCamTexture self, int x, int y, Color& value)
public Color[] GetPixels()
public Color[] GetPixels(int x, int y, int blockWidth, int blockHeight)
public Color32[] GetPixels32(Color32[] colors)
public Color32[] GetPixels32()
public int get_videoRotationAngle()
public bool get_videoVerticallyMirrored()
public bool get_didUpdateThisFrame()
}
public UnityEngine.WheelCollider : Collider {
public Vector3 center
public float radius
public float suspensionDistance
public JointSpring suspensionSpring
public float forceAppPointDistance
public float mass
public float wheelDampingRate
public WheelFrictionCurve forwardFriction
public WheelFrictionCurve sidewaysFriction
public float motorTorque
public float brakeTorque
public float steerAngle
public bool isGrounded
public float sprungMass
public float rpm
public Vector3 get_center()
public void set_center(Vector3 value)
private void INTERNAL_get_center(Vector3& value)
private void INTERNAL_set_center(Vector3& value)
public float get_radius()
public void set_radius(float value)
public float get_suspensionDistance()
public void set_suspensionDistance(float value)
public JointSpring get_suspensionSpring()
public void set_suspensionSpring(JointSpring value)
private void INTERNAL_get_suspensionSpring(JointSpring& value)
private void INTERNAL_set_suspensionSpring(JointSpring& value)
public float get_forceAppPointDistance()
public void set_forceAppPointDistance(float value)
public float get_mass()
public void set_mass(float value)
public float get_wheelDampingRate()
public void set_wheelDampingRate(float value)
public WheelFrictionCurve get_forwardFriction()
public void set_forwardFriction(WheelFrictionCurve value)
private void INTERNAL_get_forwardFriction(WheelFrictionCurve& value)
private void INTERNAL_set_forwardFriction(WheelFrictionCurve& value)
public WheelFrictionCurve get_sidewaysFriction()
public void set_sidewaysFriction(WheelFrictionCurve value)
private void INTERNAL_get_sidewaysFriction(WheelFrictionCurve& value)
private void INTERNAL_set_sidewaysFriction(WheelFrictionCurve& value)
public float get_motorTorque()
public void set_motorTorque(float value)
public float get_brakeTorque()
public void set_brakeTorque(float value)
public float get_steerAngle()
public void set_steerAngle(float value)
public bool get_isGrounded()
public void ConfigureVehicleSubsteps(float speedThreshold, int stepsBelowThreshold, int stepsAboveThreshold)
public float get_sprungMass()
public bool GetGroundHit(WheelHit& hit)
public void GetWorldPose(Vector3& pos, Quaternion& quat)
public float get_rpm()
}
public UnityEngine.WheelFrictionCurve : ValueType {
private float m_ExtremumSlip
private float m_ExtremumValue
private float m_AsymptoteSlip
private float m_AsymptoteValue
private float m_Stiffness
public float extremumSlip
public float extremumValue
public float asymptoteSlip
public float asymptoteValue
public float stiffness
public float get_extremumSlip()
public void set_extremumSlip(float value)
public float get_extremumValue()
public void set_extremumValue(float value)
public float get_asymptoteSlip()
public void set_asymptoteSlip(float value)
public float get_asymptoteValue()
public void set_asymptoteValue(float value)
public float get_stiffness()
public void set_stiffness(float value)
}
public UnityEngine.WheelHit : ValueType {
private Vector3 m_Point
private Vector3 m_Normal
private Vector3 m_ForwardDir
private Vector3 m_SidewaysDir
private float m_Force
private float m_ForwardSlip
private float m_SidewaysSlip
private Collider m_Collider
public Collider collider
public Vector3 point
public Vector3 normal
public Vector3 forwardDir
public Vector3 sidewaysDir
public float force
public float forwardSlip
public float sidewaysSlip
public Collider get_collider()
public void set_collider(Collider value)
public Vector3 get_point()
public void set_point(Vector3 value)
public Vector3 get_normal()
public void set_normal(Vector3 value)
public Vector3 get_forwardDir()
public void set_forwardDir(Vector3 value)
public Vector3 get_sidewaysDir()
public void set_sidewaysDir(Vector3 value)
public float get_force()
public void set_force(float value)
public float get_forwardSlip()
public void set_forwardSlip(float value)
public float get_sidewaysSlip()
public void set_sidewaysSlip(float value)
}
public UnityEngine.WheelJoint2D : AnchoredJoint2D {
public JointSuspension2D suspension
public bool useMotor
public JointMotor2D motor
public float jointTranslation
public float jointLinearSpeed
public float jointSpeed
public float jointAngle
public JointSuspension2D get_suspension()
public void set_suspension(JointSuspension2D value)
private void INTERNAL_get_suspension(JointSuspension2D& value)
private void INTERNAL_set_suspension(JointSuspension2D& value)
public bool get_useMotor()
public void set_useMotor(bool value)
public JointMotor2D get_motor()
public void set_motor(JointMotor2D value)
private void INTERNAL_get_motor(JointMotor2D& value)
private void INTERNAL_set_motor(JointMotor2D& value)
public float get_jointTranslation()
public float get_jointLinearSpeed()
public float get_jointSpeed()
public float get_jointAngle()
public float GetMotorTorque(float timeStep)
private float INTERNAL_CALL_GetMotorTorque(WheelJoint2D self, float timeStep)
}
public UnityEngine.Windows.Speech.ConfidenceLevel : Enum {
public int value__
public ConfidenceLevel High
public ConfidenceLevel Medium
public ConfidenceLevel Low
public ConfidenceLevel Rejected
}
public UnityEngine.Windows.Speech.DictationCompletionCause : Enum {
public int value__
public DictationCompletionCause Complete
public DictationCompletionCause AudioQualityFailure
public DictationCompletionCause Canceled
public DictationCompletionCause TimeoutExceeded
public DictationCompletionCause PauseLimitExceeded
public DictationCompletionCause NetworkFailure
public DictationCompletionCause MicrophoneUnavailable
public DictationCompletionCause UnknownError
}
public UnityEngine.Windows.Speech.DictationRecognizer : object {
private IntPtr m_Recognizer
private DictationHypothesisDelegate DictationHypothesis
private DictationResultDelegate DictationResult
private DictationCompletedDelegate DictationComplete
private DictationErrorHandler DictationError
public SpeechSystemStatus Status
public float AutoSilenceTimeoutSeconds
public float InitialSilenceTimeoutSeconds
public void .ctor(ConfidenceLevel confidenceLevel)
public void .ctor(DictationTopicConstraint topic)
public void .ctor(ConfidenceLevel minimumConfidence, DictationTopicConstraint topic)
private IntPtr Create(ConfidenceLevel minimumConfidence, DictationTopicConstraint topicConstraint)
private void INTERNAL_CALL_Create(DictationRecognizer self, ConfidenceLevel minimumConfidence, DictationTopicConstraint topicConstraint, IntPtr& value)
private void Start(IntPtr self)
private void Stop(IntPtr self)
private void Destroy(IntPtr self)
private void DestroyThreaded(IntPtr self)
private SpeechSystemStatus GetStatus(IntPtr self)
private float GetAutoSilenceTimeoutSeconds(IntPtr self)
private void SetAutoSilenceTimeoutSeconds(IntPtr self, float value)
private float GetInitialSilenceTimeoutSeconds(IntPtr self)
private void SetInitialSilenceTimeoutSeconds(IntPtr self, float value)
public void add_DictationHypothesis(DictationHypothesisDelegate value)
public void remove_DictationHypothesis(DictationHypothesisDelegate value)
public void add_DictationResult(DictationResultDelegate value)
public void remove_DictationResult(DictationResultDelegate value)
public void add_DictationComplete(DictationCompletedDelegate value)
public void remove_DictationComplete(DictationCompletedDelegate value)
public void add_DictationError(DictationErrorHandler value)
public void remove_DictationError(DictationErrorHandler value)
public SpeechSystemStatus get_Status()
public float get_AutoSilenceTimeoutSeconds()
public void set_AutoSilenceTimeoutSeconds(float value)
public float get_InitialSilenceTimeoutSeconds()
public void set_InitialSilenceTimeoutSeconds(float value)
protected void Finalize()
public void Start()
public void Stop()
public void Dispose()
private void DictationRecognizer_InvokeHypothesisGeneratedEvent(string keyword)
private void DictationRecognizer_InvokeResultGeneratedEvent(string keyword, ConfidenceLevel minimumConfidence)
private void DictationRecognizer_InvokeCompletedEvent(DictationCompletionCause cause)
private void DictationRecognizer_InvokeErrorEvent(string error, int hresult)
}
public UnityEngine.Windows.Speech.DictationTopicConstraint : Enum {
public int value__
public DictationTopicConstraint WebSearch
public DictationTopicConstraint Form
public DictationTopicConstraint Dictation
}
public UnityEngine.Windows.Speech.GrammarRecognizer : PhraseRecognizer {
private string <GrammarFilePath>k__BackingField
public string GrammarFilePath
public void .ctor(string grammarFilePath)
public void .ctor(string grammarFilePath, ConfidenceLevel minimumConfidence)
public string get_GrammarFilePath()
private void set_GrammarFilePath(string value)
}
public UnityEngine.Windows.Speech.KeywordRecognizer : PhraseRecognizer {
private IEnumerable`1<string> <Keywords>k__BackingField
public IEnumerable`1<string> Keywords
public void .ctor(String[] keywords)
public void .ctor(String[] keywords, ConfidenceLevel minimumConfidence)
public IEnumerable`1<string> get_Keywords()
private void set_Keywords(IEnumerable`1<string> value)
}
public UnityEngine.Windows.Speech.PhraseRecognitionSystem : object {
private ErrorDelegate OnError
private StatusDelegate OnStatusChanged
public bool isSupported
public SpeechSystemStatus Status
public bool get_isSupported()
public SpeechSystemStatus get_Status()
public void Restart()
public void Shutdown()
public void add_OnError(ErrorDelegate value)
public void remove_OnError(ErrorDelegate value)
public void add_OnStatusChanged(StatusDelegate value)
public void remove_OnStatusChanged(StatusDelegate value)
private void PhraseRecognitionSystem_InvokeErrorEvent(SpeechError errorCode)
private void PhraseRecognitionSystem_InvokeStatusChangedEvent(SpeechSystemStatus status)
}
public UnityEngine.Windows.Speech.PhraseRecognizedEventArgs : ValueType {
public ConfidenceLevel confidence
public SemanticMeaning[] semanticMeanings
public string text
public DateTime phraseStartTime
public TimeSpan phraseDuration
internal void .ctor(string text, ConfidenceLevel confidence, SemanticMeaning[] semanticMeanings, DateTime phraseStartTime, TimeSpan phraseDuration)
}
public UnityEngine.Windows.Speech.PhraseRecognizer : object {
protected IntPtr m_Recognizer
private PhraseRecognizedDelegate OnPhraseRecognized
public bool IsRunning
protected IntPtr CreateFromKeywords(String[] keywords, ConfidenceLevel minimumConfidence)
private void INTERNAL_CALL_CreateFromKeywords(PhraseRecognizer self, String[] keywords, ConfidenceLevel minimumConfidence, IntPtr& value)
protected IntPtr CreateFromGrammarFile(string grammarFilePath, ConfidenceLevel minimumConfidence)
private void INTERNAL_CALL_CreateFromGrammarFile(PhraseRecognizer self, string grammarFilePath, ConfidenceLevel minimumConfidence, IntPtr& value)
private void Start_Internal(IntPtr recognizer)
private void Stop_Internal(IntPtr recognizer)
private bool IsRunning_Internal(IntPtr recognizer)
private void Destroy(IntPtr recognizer)
private void DestroyThreaded(IntPtr recognizer)
public void add_OnPhraseRecognized(PhraseRecognizedDelegate value)
public void remove_OnPhraseRecognized(PhraseRecognizedDelegate value)
protected void Finalize()
public void Start()
public void Stop()
public void Dispose()
public bool get_IsRunning()
private void InvokePhraseRecognizedEvent(string text, ConfidenceLevel confidence, SemanticMeaning[] semanticMeanings, long phraseStartFileTime, long phraseDurationTicks)
private SemanticMeaning[] MarshalSemanticMeaning(IntPtr keys, IntPtr values, IntPtr valueSizes, int valueCount)
}
public UnityEngine.Windows.Speech.SemanticMeaning : ValueType {
public string key
public String[] values
}
public UnityEngine.Windows.Speech.SpeechError : Enum {
public int value__
public SpeechError NoError
public SpeechError TopicLanguageNotSupported
public SpeechError GrammarLanguageMismatch
public SpeechError GrammarCompilationFailure
public SpeechError AudioQualityFailure
public SpeechError PauseLimitExceeded
public SpeechError TimeoutExceeded
public SpeechError NetworkFailure
public SpeechError MicrophoneUnavailable
public SpeechError UnknownError
}
public UnityEngine.Windows.Speech.SpeechSystemStatus : Enum {
public int value__
public SpeechSystemStatus Stopped
public SpeechSystemStatus Running
public SpeechSystemStatus Failed
}
public UnityEngine.WindZone : Component {
public WindZoneMode mode
public float radius
public float windMain
public float windTurbulence
public float windPulseMagnitude
public float windPulseFrequency
public WindZoneMode get_mode()
public void set_mode(WindZoneMode value)
public float get_radius()
public void set_radius(float value)
public float get_windMain()
public void set_windMain(float value)
public float get_windTurbulence()
public void set_windTurbulence(float value)
public float get_windPulseMagnitude()
public void set_windPulseMagnitude(float value)
public float get_windPulseFrequency()
public void set_windPulseFrequency(float value)
}
public UnityEngine.WindZoneMode : Enum {
public int value__
public WindZoneMode Directional
public WindZoneMode Spherical
}
public UnityEngine.WrapMode : Enum {
public int value__
public WrapMode Once
public WrapMode Loop
public WrapMode PingPong
public WrapMode Default
public WrapMode ClampForever
public WrapMode Clamp
}
public UnityEngine.WWW : CustomYieldInstruction {
private ThreadPriority <threadPriority>k__BackingField
private UnityWebRequest _uwr
private AssetBundle _assetBundle
private Dictionary`2<string, string> _responseHeaders
public AssetBundle assetBundle
public Byte[] bytes
public int size
public int bytesDownloaded
public string error
public bool isDone
public float progress
public Dictionary`2<string, string> responseHeaders
public string data
public string text
public Texture2D texture
public Texture2D textureNonReadable
public ThreadPriority threadPriority
public float uploadProgress
public string url
public bool keepWaiting
public Object audioClip
public Object movie
public void .ctor(string url)
public void .ctor(string url, WWWForm form)
public void .ctor(string url, Byte[] postData)
public void .ctor(string url, Byte[] postData, Hashtable headers)
public void .ctor(string url, Byte[] postData, Dictionary`2<string, string> headers)
internal void .ctor(string url, string name, Hash128 hash, UInt32 crc)
public AssetBundle get_assetBundle()
public Byte[] get_bytes()
public int get_size()
public int get_bytesDownloaded()
public string get_error()
public bool get_isDone()
public float get_progress()
public Dictionary`2<string, string> get_responseHeaders()
public string get_data()
public string get_text()
private Texture2D CreateTextureFromDownloadedData(bool markNonReadable)
public Texture2D get_texture()
public Texture2D get_textureNonReadable()
public void LoadImageIntoTexture(Texture2D texture)
public ThreadPriority get_threadPriority()
public void set_threadPriority(ThreadPriority value)
public float get_uploadProgress()
public string get_url()
public bool get_keepWaiting()
public void Dispose()
internal Object GetAudioClipInternal(bool threeD, bool stream, bool compressed, AudioType audioType)
internal object GetMovieTextureInternal()
private bool WaitUntilDoneIfPossible()
private string GetStatusCodeName(long statusCode)
public string EscapeURL(string s)
public string EscapeURL(string s, Encoding e)
public string UnEscapeURL(string s)
public string UnEscapeURL(string s, Encoding e)
public WWW LoadFromCacheOrDownload(string url, int version)
public WWW LoadFromCacheOrDownload(string url, int version, UInt32 crc)
public WWW LoadFromCacheOrDownload(string url, Hash128 hash)
public WWW LoadFromCacheOrDownload(string url, Hash128 hash, UInt32 crc)
public WWW LoadFromCacheOrDownload(string url, CachedAssetBundle cachedBundle, UInt32 crc)
private String[] FlattenedHeadersFrom(Dictionary`2<string, string> headers)
internal Dictionary`2<string, string> ParseHTTPHeaderString(string input)
public Object get_audioClip()
public Object get_movie()
}
public UnityEngine.WWWAudioExtensions : object {
public AudioClip GetAudioClip(WWW www)
public AudioClip GetAudioClip(WWW www, bool threeD)
public AudioClip GetAudioClip(WWW www, bool threeD, bool stream)
public AudioClip GetAudioClip(WWW www, bool threeD, bool stream, AudioType audioType)
public AudioClip GetAudioClipCompressed(WWW www)
public AudioClip GetAudioClipCompressed(WWW www, bool threeD)
public AudioClip GetAudioClipCompressed(WWW www, bool threeD, AudioType audioType)
public MovieTexture GetMovieTexture(WWW www)
}
public UnityEngine.WWWForm : object {
private List`1<Byte[]> formData
private List`1<string> fieldNames
private List`1<string> fileNames
private List`1<string> types
private Byte[] boundary
private bool containsFiles
internal Encoding DefaultEncoding
public Dictionary`2<string, string> headers
public Byte[] data
internal Encoding get_DefaultEncoding()
public void AddField(string fieldName, string value)
public void AddField(string fieldName, string value, Encoding e)
public void AddField(string fieldName, int i)
public void AddBinaryData(string fieldName, Byte[] contents)
public void AddBinaryData(string fieldName, Byte[] contents, string fileName)
public void AddBinaryData(string fieldName, Byte[] contents, string fileName, string mimeType)
public Dictionary`2<string, string> get_headers()
public Byte[] get_data()
}
internal UnityEngine.WWWTranscoder : object {
private Byte[] ucHexChars
private Byte[] lcHexChars
private byte urlEscapeChar
private byte urlSpace
private Byte[] urlForbidden
private byte qpEscapeChar
private byte qpSpace
private Byte[] qpForbidden
private byte Hex2Byte(Byte[] b, int offset)
private Byte[] Byte2Hex(byte b, Byte[] hexChars)
public string URLEncode(string toEncode)
public string URLEncode(string toEncode, Encoding e)
public Byte[] URLEncode(Byte[] toEncode)
public string QPEncode(string toEncode)
public string QPEncode(string toEncode, Encoding e)
public Byte[] QPEncode(Byte[] toEncode)
public Byte[] Encode(Byte[] input, byte escapeChar, byte space, Byte[] forbidden, bool uppercase)
private bool ByteArrayContains(Byte[] array, byte b)
public string URLDecode(string toEncode)
public string URLDecode(string toEncode, Encoding e)
public Byte[] URLDecode(Byte[] toEncode)
public string QPDecode(string toEncode)
public string QPDecode(string toEncode, Encoding e)
public Byte[] QPDecode(Byte[] toEncode)
public Byte[] Decode(Byte[] input, byte escapeChar, byte space)
public bool SevenBitClean(string s)
public bool SevenBitClean(string s, Encoding e)
public bool SevenBitClean(Byte[] input)
}
public UnityEngineInternal.APIUpdaterRuntimeServices : object {
public Component AddComponent(GameObject go, string sourceInfo, string name)
}
public UnityEngineInternal.FastCallExceptionHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(Exception ex)
public IAsyncResult BeginInvoke(Exception ex, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngineInternal.GetMethodDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public MethodInfo Invoke(Type classType, string methodName, bool searchBaseTypes, bool instanceMethod, Type[] methodParamTypes)
public IAsyncResult BeginInvoke(Type classType, string methodName, bool searchBaseTypes, bool instanceMethod, Type[] methodParamTypes, AsyncCallback callback, object object)
public MethodInfo EndInvoke(IAsyncResult result)
}
public UnityEngineInternal.GIDebugVisualisation : object {
public bool cycleMode
public bool pauseCycleMode
public GITextureType texType
public void ResetRuntimeInputTextures()
public void PlayCycleMode()
public void PauseCycleMode()
public void StopCycleMode()
public bool get_cycleMode()
public bool get_pauseCycleMode()
public GITextureType get_texType()
public void set_texType(GITextureType value)
public void CycleSkipInstances(int skip)
public void CycleSkipSystems(int skip)
}
public UnityEngineInternal.GITextureType : Enum {
public int value__
public GITextureType Charting
public GITextureType Albedo
public GITextureType Emissive
public GITextureType Irradiance
public GITextureType Directionality
public GITextureType Baked
public GITextureType BakedDirectional
public GITextureType InputWorkspace
public GITextureType BakedShadowMask
public GITextureType BakedAlbedo
public GITextureType BakedEmissive
public GITextureType BakedCharting
public GITextureType BakedTexelValidity
}
public UnityEngineInternal.Input.NativeClickEvent : ValueType {
public NativeInputEvent baseEvent
public bool isPressed
public int controlIndex
public int clickCount
}
public UnityEngineInternal.Input.NativeDeviceDiscoveredCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(NativeInputDeviceInfo deviceInfo)
public IAsyncResult BeginInvoke(NativeInputDeviceInfo deviceInfo, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngineInternal.Input.NativeEventCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(int eventCount, IntPtr eventData)
public IAsyncResult BeginInvoke(int eventCount, IntPtr eventData, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngineInternal.Input.NativeGenericEvent : ValueType {
public NativeInputEvent baseEvent
public int controlIndex
public int rawValue
public double scaledValue
}
public UnityEngineInternal.Input.NativeInputDeviceInfo : ValueType {
public int deviceId
public string deviceDescriptor
}
public UnityEngineInternal.Input.NativeInputEvent : ValueType {
public NativeInputEventType type
public int sizeInBytes
public int deviceId
public double time
}
public UnityEngineInternal.Input.NativeInputEventType : Enum {
public int value__
public NativeInputEventType DeviceConnected
public NativeInputEventType DeviceDisconnected
public NativeInputEventType Generic
public NativeInputEventType KeyDown
public NativeInputEventType KeyUp
public NativeInputEventType PointerDown
public NativeInputEventType PointerMove
public NativeInputEventType PointerUp
public NativeInputEventType PointerCancelled
public NativeInputEventType Click
public NativeInputEventType Text
public NativeInputEventType Tracking
}
public UnityEngineInternal.Input.NativeInputSystem : object {
public NativeUpdateCallback onUpdate
public NativeEventCallback onEvents
public NativeDeviceDiscoveredCallback onDeviceDiscovered
public double zeroEventTime
internal void NotifyUpdate(NativeInputUpdateType updateType)
internal void NotifyEvents(int eventCount, IntPtr eventData)
internal bool HasDeviceDiscoveredHandler()
internal void NotifyDeviceDiscovered(NativeInputDeviceInfo deviceInfo)
public double get_zeroEventTime()
public void SendInput(NativeInputEvent& inputEvent)
public string GetDeviceConfiguration(int deviceId)
public string GetControlConfiguration(int deviceId, int controlIndex)
public void SetPollingFrequency(float hertz)
private void SetPollingFrequencyInternal(float hertz)
}
public UnityEngineInternal.Input.NativeInputUpdateType : Enum {
public int value__
public NativeInputUpdateType BeginFixed
public NativeInputUpdateType EndFixed
public NativeInputUpdateType BeginDynamic
public NativeInputUpdateType EndDynamic
public NativeInputUpdateType BeginBeforeRender
public NativeInputUpdateType EndBeforeRender
public NativeInputUpdateType BeginEditor
public NativeInputUpdateType EndEditor
}
public UnityEngineInternal.Input.NativeKeyEvent : ValueType {
public NativeInputEvent baseEvent
public KeyCode key
}
public UnityEngineInternal.Input.NativePointerEvent : ValueType {
public NativeInputEvent baseEvent
public int pointerId
public Vector3 position
public Vector3 delta
public float pressure
public float twist
public Vector2 tilt
public Vector3 radius
public int displayIndex
}
public UnityEngineInternal.Input.NativeTextEvent : ValueType {
public NativeInputEvent baseEvent
public int utf32Character
}
public UnityEngineInternal.Input.NativeTrackingEvent : ValueType {
public NativeInputEvent baseEvent
public int nodeId
public UInt32 availableFields
public Vector3 localPosition
public Quaternion localRotation
public Vector3 velocity
public Vector3 angularVelocity
public Vector3 acceleration
public Vector3 angularAcceleration
}
public UnityEngineInternal.Input.NativeUpdateCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(NativeInputUpdateType updateType)
public IAsyncResult BeginInvoke(NativeInputUpdateType updateType, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngineInternal.LightmapType : Enum {
public int value__
public LightmapType NoLightmap
public LightmapType StaticLightmap
public LightmapType DynamicLightmap
}
public UnityEngineInternal.MathfInternal : ValueType {
public Single modreq(System.Runtime.CompilerServices.IsVolatile) FloatMinNormal
public Single modreq(System.Runtime.CompilerServices.IsVolatile) FloatMinDenormal
public bool IsFlushToZeroEnabled
}
internal UnityEngineInternal.NetFxCoreExtensions : object {
public Delegate CreateDelegate(MethodInfo self, Type delegateType, object target)
public MethodInfo GetMethodInfo(Delegate self)
}
public UnityEngineInternal.ScriptingUtils : object {
public Delegate CreateDelegate(Type type, MethodInfo methodInfo)
}
public UnityEngineInternal.TypeInferenceRuleAttribute : Attribute {
private string _rule
public void .ctor(TypeInferenceRules rule)
public void .ctor(string rule)
public string ToString()
}
public UnityEngineInternal.TypeInferenceRules : Enum {
public int value__
public TypeInferenceRules TypeReferencedByFirstArgument
public TypeInferenceRules TypeReferencedBySecondArgument
public TypeInferenceRules ArrayOfTypeReferencedByFirstArgument
public TypeInferenceRules TypeOfFirstArgument
}
internal UnityEngineInternal.WebRequestUtils : object {
private Regex domainRegex
internal string RedirectTo(string baseUri, string redirectUri)
internal string MakeInitialUrl(string targetUrl, string localUrl)
}
