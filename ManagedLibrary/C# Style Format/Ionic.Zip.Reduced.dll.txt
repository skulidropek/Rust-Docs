internal Ionic.AttributesCriterion : SelectionCriterion {
private FileAttributes _Attributes
internal ComparisonOperator Operator
internal string AttributeString
internal string get_AttributeString()
internal void set_AttributeString(string value)
public string ToString()
private bool _EvaluateOne(FileAttributes fileAttrs, FileAttributes criterionAttrs)
internal bool Evaluate(string filename)
private bool _Evaluate(FileAttributes fileAttrs)
internal bool Evaluate(ZipEntry entry)
}
internal Ionic.BZip2.BitWriter : object {
private UInt32 accumulator
private int nAccumulatedBits
private Stream output
private int totalBytesWrittenOut
public byte RemainingBits
public int NumRemainingBits
public int TotalBytesWrittenOut
public void .ctor(Stream s)
public byte get_RemainingBits()
public int get_NumRemainingBits()
public int get_TotalBytesWrittenOut()
public void Reset()
public void WriteBits(int nbits, UInt32 value)
public void WriteByte(byte b)
public void WriteInt(UInt32 u)
public void Flush()
public void FinishAndPad()
}
internal Ionic.BZip2.BZip2 : object {
public int BlockSizeMultiple
public int MinBlockSize
public int MaxBlockSize
public int MaxAlphaSize
public int MaxCodeLength
public char RUNA
public char RUNB
public int NGroups
public int G_SIZE
public int N_ITERS
public int MaxSelectors
public int NUM_OVERSHOOT_BYTES
internal int QSORT_STACK_SIZE
internal T[][] InitRectangularArray(int d1, int d2)
}
internal Ionic.BZip2.BZip2Compressor : object {
private int blockSize100k
private int currentByte
private int runLength
private int last
private int outBlockFillThreshold
private CompressionState cstate
private CRC32 crc
private BitWriter bw
private int runs
private int workDone
private int workLimit
private bool firstAttempt
private bool blockRandomised
private int origPtr
private int nInUse
private int nMTF
private int SETMASK
private int CLEARMASK
private byte GREATER_ICOST
private byte LESSER_ICOST
private int SMALL_THRESH
private int DEPTH_THRESH
private int WORK_FACTOR
private Int32[] increments
private UInt32 <Crc32>k__BackingField
private int <AvailableBytesOut>k__BackingField
public int BlockSize
public UInt32 Crc32
public int AvailableBytesOut
public int UncompressedBytes
public void .ctor(BitWriter writer)
public void .ctor(BitWriter writer, int blockSize)
private void Reset()
public int get_BlockSize()
public UInt32 get_Crc32()
private void set_Crc32(UInt32 value)
public int get_AvailableBytesOut()
private void set_AvailableBytesOut(int value)
public int get_UncompressedBytes()
public int Fill(Byte[] buffer, int offset, int count)
private int write0(byte b)
private bool AddRunToOutputBlock(bool final)
public void CompressAndWrite()
private void randomiseBlock()
private void mainSort()
private void blockSort()
private bool mainSimpleSort(CompressionState dataShadow, int lo, int hi, int d)
private void vswap(Int32[] fmap, int p1, int p2, int n)
private byte med3(byte a, byte b, byte c)
private void mainQSort3(CompressionState dataShadow, int loSt, int hiSt, int dSt)
private void generateMTFValues()
private void hbAssignCodes(Int32[] code, Byte[] length, int minLen, int maxLen, int alphaSize)
private void sendMTFValues()
private void sendMTFValues0(int nGroups, int alphaSize)
private void hbMakeCodeLengths(Byte[] len, Int32[] freq, CompressionState state1, int alphaSize, int maxLen)
private int sendMTFValues1(int nGroups, int alphaSize)
private void sendMTFValues2(int nGroups, int nSelectors)
private void sendMTFValues3(int nGroups, int alphaSize)
private void sendMTFValues4()
private void sendMTFValues5(int nGroups, int nSelectors)
private void sendMTFValues6(int nGroups, int alphaSize)
private void sendMTFValues7(int nSelectors)
private void moveToFrontCodeAndSend()
}
public Ionic.BZip2.BZip2InputStream : Stream {
private bool _disposed
private bool _leaveOpen
private long totalBytesRead
private int last
private int origPtr
private int blockSize100k
private bool blockRandomised
private int bsBuff
private int bsLive
private CRC32 crc
private int nInUse
private Stream input
private int currentChar
private CState currentState
private UInt32 storedBlockCRC
private UInt32 storedCombinedCRC
private UInt32 computedBlockCRC
private UInt32 computedCombinedCRC
private int su_count
private int su_ch2
private int su_chPrev
private int su_i2
private int su_j2
private int su_rNToGo
private int su_rTPos
private int su_tPos
private char su_z
private DecompressionState data
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream input)
public void .ctor(Stream input, bool leaveOpen)
public int Read(Byte[] buffer, int offset, int count)
private void MakeMaps()
public int ReadByte()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
protected void Dispose(bool disposing)
private void init()
private void CheckMagicChar(char expected, int position)
private void InitBlock()
private void EndBlock()
private void complete()
public void Close()
private int GetBits(int n)
private bool bsGetBit()
private char bsGetUByte()
private UInt32 bsGetInt()
private void hbCreateDecodeTables(Int32[] limit, Int32[] bbase, Int32[] perm, Char[] length, int minLen, int maxLen, int alphaSize)
private void recvDecodingTables()
private void createHuffmanDecodingTables(int alphaSize, int nGroups)
private void getAndMoveToFrontDecode()
private int getAndMoveToFrontDecode0(int groupNo)
private void SetupBlock()
private void SetupRandPartA()
private void SetupNoRandPartA()
private void SetupRandPartB()
private void SetupRandPartC()
private void SetupNoRandPartB()
private void SetupNoRandPartC()
}
public Ionic.BZip2.BZip2OutputStream : Stream {
private int totalBytesWrittenIn
private bool leaveOpen
private BZip2Compressor compressor
private UInt32 combinedCRC
private Stream output
private BitWriter bw
private int blockSize100k
private TraceBits desiredTrace
public int BlockSize
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream output)
public void .ctor(Stream output, int blockSize)
public void .ctor(Stream output, bool leaveOpen)
public void .ctor(Stream output, int blockSize, bool leaveOpen)
public void Close()
public void Flush()
private void EmitHeader()
private void EmitTrailer()
private void Finish()
public int get_BlockSize()
public void Write(Byte[] buffer, int offset, int count)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public int Read(Byte[] buffer, int offset, int count)
private void TraceOutput(TraceBits bits, string format, Object[] varParams)
}
public Ionic.BZip2.ParallelBZip2OutputStream : Stream {
private int BufferPairsPerCore
private int _maxWorkers
private bool firstWriteDone
private int lastFilled
private int lastWritten
private int latestCompressed
private int currentlyFilling
private Exception modreq(System.Runtime.CompilerServices.IsVolatile) pendingException
private bool handlingException
private bool emitting
private Queue`1<int> toWrite
private Queue`1<int> toFill
private List`1<WorkItem> pool
private object latestLock
private object eLock
private object outputLock
private AutoResetEvent newlyCompressedBlob
private long totalBytesWrittenIn
private long totalBytesWrittenOut
private bool leaveOpen
private UInt32 combinedCRC
private Stream output
private BitWriter bw
private int blockSize100k
private TraceBits desiredTrace
public int MaxWorkers
public int BlockSize
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public long BytesWrittenOut
public void .ctor(Stream output)
public void .ctor(Stream output, int blockSize)
public void .ctor(Stream output, bool leaveOpen)
public void .ctor(Stream output, int blockSize, bool leaveOpen)
private void InitializePoolOfWorkItems()
public int get_MaxWorkers()
public void set_MaxWorkers(int value)
public void Close()
private void FlushOutput(bool lastInput)
public void Flush()
private void EmitHeader()
private void EmitTrailer()
public int get_BlockSize()
public void Write(Byte[] buffer, int offset, int count)
private void EmitPendingBuffers(bool doAll, bool mustWait)
private void CompressOne(object wi)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long get_BytesWrittenOut()
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public int Read(Byte[] buffer, int offset, int count)
private void TraceOutput(TraceBits bits, string format, Object[] varParams)
}
internal Ionic.BZip2.Rand : object {
private Int32[] RNUMS
internal int Rnums(int i)
}
internal Ionic.BZip2.WorkItem : object {
public int index
public MemoryStream ms
public int ordinal
public BitWriter bw
private BZip2Compressor <Compressor>k__BackingField
public BZip2Compressor Compressor
public BZip2Compressor get_Compressor()
private void set_Compressor(BZip2Compressor value)
public void .ctor(int ix, int blockSize)
}
internal Ionic.ComparisonOperator : Enum {
public int value__
public ComparisonOperator GreaterThan
public ComparisonOperator GreaterThanOrEqualTo
public ComparisonOperator LesserThan
public ComparisonOperator LesserThanOrEqualTo
public ComparisonOperator EqualTo
public ComparisonOperator NotEqualTo
}
internal Ionic.CompoundCriterion : SelectionCriterion {
internal LogicalConjunction Conjunction
internal SelectionCriterion Left
private SelectionCriterion _Right
internal SelectionCriterion Right
internal SelectionCriterion get_Right()
internal void set_Right(SelectionCriterion value)
internal bool Evaluate(string filename)
public string ToString()
internal bool Evaluate(ZipEntry entry)
}
public Ionic.Crc.CRC32 : object {
private int BUFFER_SIZE
private UInt32 dwPolynomial
private long _TotalBytesRead
private bool reverseBits
private UInt32[] crc32Table
private UInt32 _register
public long TotalBytesRead
public int Crc32Result
public long get_TotalBytesRead()
public int get_Crc32Result()
public int GetCrc32(Stream input)
public int GetCrc32AndCopy(Stream input, Stream output)
public int ComputeCrc32(int W, byte B)
internal int _InternalComputeCrc32(UInt32 W, byte B)
public void SlurpBlock(Byte[] block, int offset, int count)
public void UpdateCRC(byte b)
public void UpdateCRC(byte b, int n)
private UInt32 ReverseBits(UInt32 data)
private byte ReverseBits(byte data)
private void GenerateLookupTable()
private UInt32 gf2_matrix_times(UInt32[] matrix, UInt32 vec)
private void gf2_matrix_square(UInt32[] square, UInt32[] mat)
public void Combine(int crc, int length)
public void .ctor(bool reverseBits)
public void .ctor(int polynomial, bool reverseBits)
public void Reset()
}
public Ionic.Crc.CrcCalculatorStream : Stream {
private long UnsetLengthLimit
internal Stream _innerStream
private CRC32 _Crc32
private long _lengthLimit
private bool _leaveOpen
public long TotalBytesSlurped
public int Crc
public bool LeaveOpen
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream stream)
public void .ctor(Stream stream, bool leaveOpen)
public void .ctor(Stream stream, long length)
public void .ctor(Stream stream, long length, bool leaveOpen)
public void .ctor(Stream stream, long length, bool leaveOpen, CRC32 crc32)
private void .ctor(bool leaveOpen, long length, Stream stream, CRC32 crc32)
public long get_TotalBytesSlurped()
public int get_Crc()
public bool get_LeaveOpen()
public void set_LeaveOpen(bool value)
public int Read(Byte[] buffer, int offset, int count)
public void Write(Byte[] buffer, int offset, int count)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
private void System.IDisposable.Dispose()
public void Close()
}
internal Ionic.EnumUtil : object {
internal string GetDescription(Enum value)
internal object Parse(Type enumType, string stringRepresentation)
internal object Parse(Type enumType, string stringRepresentation, bool ignoreCase)
}
public Ionic.FileSelector : object {
internal SelectionCriterion _Criterion
private bool <TraverseReparsePoints>k__BackingField
public string SelectionCriteria
public bool TraverseReparsePoints
public void .ctor(string selectionCriteria)
public void .ctor(string selectionCriteria, bool traverseDirectoryReparsePoints)
public string get_SelectionCriteria()
public void set_SelectionCriteria(string value)
public bool get_TraverseReparsePoints()
public void set_TraverseReparsePoints(bool value)
private string NormalizeCriteriaExpression(string source)
private SelectionCriterion _ParseCriterion(string s)
public string ToString()
private bool Evaluate(string filename)
private void SelectorTrace(string format, Object[] args)
public ICollection`1<string> SelectFiles(string directory)
public ReadOnlyCollection`1<string> SelectFiles(string directory, bool recurseDirectories)
private bool Evaluate(ZipEntry entry)
public ICollection`1<ZipEntry> SelectEntries(ZipFile zip)
public ICollection`1<ZipEntry> SelectEntries(ZipFile zip, string directoryPathInArchive)
}
internal Ionic.LogicalConjunction : Enum {
public int value__
public LogicalConjunction NONE
public LogicalConjunction AND
public LogicalConjunction OR
public LogicalConjunction XOR
}
internal Ionic.NameCriterion : SelectionCriterion {
private Regex _re
private string _regexString
internal ComparisonOperator Operator
private string _MatchingFileSpec
internal string MatchingFileSpec
internal void set_MatchingFileSpec(string value)
public string ToString()
internal bool Evaluate(string filename)
private bool _Evaluate(string fullpath)
internal bool Evaluate(ZipEntry entry)
}
internal Ionic.SelectionCriterion : object {
private bool <Verbose>k__BackingField
internal bool Verbose
internal bool get_Verbose()
internal void set_Verbose(bool value)
internal bool Evaluate(string filename)
protected void CriterionTrace(string format, Object[] args)
internal bool Evaluate(ZipEntry entry)
}
internal Ionic.SizeCriterion : SelectionCriterion {
internal ComparisonOperator Operator
internal long Size
public string ToString()
internal bool Evaluate(string filename)
private bool _Evaluate(long Length)
internal bool Evaluate(ZipEntry entry)
}
internal Ionic.TimeCriterion : SelectionCriterion {
internal ComparisonOperator Operator
internal WhichTime Which
internal DateTime Time
public string ToString()
internal bool Evaluate(string filename)
private bool _Evaluate(DateTime x)
internal bool Evaluate(ZipEntry entry)
}
internal Ionic.TypeCriterion : SelectionCriterion {
private char ObjectType
internal ComparisonOperator Operator
internal string AttributeString
internal string get_AttributeString()
internal void set_AttributeString(string value)
public string ToString()
internal bool Evaluate(string filename)
internal bool Evaluate(ZipEntry entry)
}
internal Ionic.WhichTime : Enum {
public int value__
public WhichTime atime
public WhichTime mtime
public WhichTime ctime
}
internal Ionic.Zip.AddOrUpdateAction : Enum {
public int value__
public AddOrUpdateAction AddOnly
public AddOrUpdateAction AddOrUpdate
}
public Ionic.Zip.AddProgressEventArgs : ZipProgressEventArgs {
private void .ctor(string archiveName, ZipProgressEventType flavor)
internal AddProgressEventArgs AfterEntry(string archiveName, ZipEntry entry, int entriesTotal)
internal AddProgressEventArgs Started(string archiveName)
internal AddProgressEventArgs Completed(string archiveName)
}
public Ionic.Zip.BadCrcException : ZipException {
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public Ionic.Zip.BadPasswordException : ZipException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public Ionic.Zip.BadReadException : ZipException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public Ionic.Zip.BadStateException : ZipException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public Ionic.Zip.CloseDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string entryName, Stream stream)
public IAsyncResult BeginInvoke(string entryName, Stream stream, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Ionic.Zip.ComHelper : object {
public bool IsZipFile(string filename)
public bool IsZipFileWithExtract(string filename)
public bool CheckZip(string filename)
public bool CheckZipPassword(string filename, string password)
public void FixZipDirectory(string filename)
public string GetZipLibraryVersion()
}
public Ionic.Zip.CompressionMethod : Enum {
public int value__
public CompressionMethod None
public CompressionMethod Deflate
public CompressionMethod BZip2
}
public Ionic.Zip.CountingStream : Stream {
private Stream _s
private long _bytesWritten
private long _bytesRead
private long _initialOffset
public Stream WrappedStream
public long BytesWritten
public long BytesRead
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long ComputedPosition
public long Position
public void .ctor(Stream stream)
public Stream get_WrappedStream()
public long get_BytesWritten()
public long get_BytesRead()
public void Adjust(long delta)
public int Read(Byte[] buffer, int offset, int count)
public void Write(Byte[] buffer, int offset, int count)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_ComputedPosition()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
}
internal Ionic.Zip.CryptoMode : Enum {
public int value__
public CryptoMode Encrypt
public CryptoMode Decrypt
}
public Ionic.Zip.EncryptionAlgorithm : Enum {
public int value__
public EncryptionAlgorithm None
public EncryptionAlgorithm PkzipWeak
public EncryptionAlgorithm WinZipAes128
public EncryptionAlgorithm WinZipAes256
public EncryptionAlgorithm Unsupported
}
public Ionic.Zip.ExtractExistingFileAction : Enum {
public int value__
public ExtractExistingFileAction Throw
public ExtractExistingFileAction OverwriteSilently
public ExtractExistingFileAction DoNotOverwrite
public ExtractExistingFileAction InvokeExtractProgressEvent
}
public Ionic.Zip.ExtractProgressEventArgs : ZipProgressEventArgs {
private int _entriesExtracted
private string _target
public int EntriesExtracted
public string ExtractLocation
internal void .ctor(string archiveName, bool before, int entriesTotal, int entriesExtracted, ZipEntry entry, string extractLocation)
internal void .ctor(string archiveName, ZipProgressEventType flavor)
internal ExtractProgressEventArgs BeforeExtractEntry(string archiveName, ZipEntry entry, string extractLocation)
internal ExtractProgressEventArgs ExtractExisting(string archiveName, ZipEntry entry, string extractLocation)
internal ExtractProgressEventArgs AfterExtractEntry(string archiveName, ZipEntry entry, string extractLocation)
internal ExtractProgressEventArgs ExtractAllStarted(string archiveName, string extractLocation)
internal ExtractProgressEventArgs ExtractAllCompleted(string archiveName, string extractLocation)
internal ExtractProgressEventArgs ByteUpdate(string archiveName, ZipEntry entry, long bytesWritten, long totalBytes)
public int get_EntriesExtracted()
public string get_ExtractLocation()
}
internal Ionic.Zip.OffsetStream : Stream {
private long _originalPosition
private Stream _innerStream
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream s)
public int Read(Byte[] buffer, int offset, int count)
public void Write(Byte[] buffer, int offset, int count)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
private void System.IDisposable.Dispose()
public void Close()
}
public Ionic.Zip.OpenDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Stream Invoke(string entryName)
public IAsyncResult BeginInvoke(string entryName, AsyncCallback callback, object object)
public Stream EndInvoke(IAsyncResult result)
}
public Ionic.Zip.ReadOptions : object {
private EventHandler`1<ReadProgressEventArgs> <ReadProgress>k__BackingField
private TextWriter <StatusMessageWriter>k__BackingField
private Encoding <Encoding>k__BackingField
public EventHandler`1<ReadProgressEventArgs> ReadProgress
public TextWriter StatusMessageWriter
public Encoding Encoding
public EventHandler`1<ReadProgressEventArgs> get_ReadProgress()
public void set_ReadProgress(EventHandler`1<ReadProgressEventArgs> value)
public TextWriter get_StatusMessageWriter()
public void set_StatusMessageWriter(TextWriter value)
public Encoding get_Encoding()
public void set_Encoding(Encoding value)
}
public Ionic.Zip.ReadProgressEventArgs : ZipProgressEventArgs {
private void .ctor(string archiveName, ZipProgressEventType flavor)
internal ReadProgressEventArgs Before(string archiveName, int entriesTotal)
internal ReadProgressEventArgs After(string archiveName, ZipEntry entry, int entriesTotal)
internal ReadProgressEventArgs Started(string archiveName)
internal ReadProgressEventArgs ByteUpdate(string archiveName, ZipEntry entry, long bytesXferred, long totalBytes)
internal ReadProgressEventArgs Completed(string archiveName)
}
public Ionic.Zip.SaveProgressEventArgs : ZipProgressEventArgs {
private int _entriesSaved
public int EntriesSaved
internal void .ctor(string archiveName, bool before, int entriesTotal, int entriesSaved, ZipEntry entry)
internal void .ctor(string archiveName, ZipProgressEventType flavor)
internal SaveProgressEventArgs ByteUpdate(string archiveName, ZipEntry entry, long bytesXferred, long totalBytes)
internal SaveProgressEventArgs Started(string archiveName)
internal SaveProgressEventArgs Completed(string archiveName)
public int get_EntriesSaved()
}
public Ionic.Zip.SelfExtractorFlavor : Enum {
public int value__
public SelfExtractorFlavor ConsoleApplication
public SelfExtractorFlavor WinFormsApplication
}
public Ionic.Zip.SelfExtractorSaveOptions : object {
private SelfExtractorFlavor <Flavor>k__BackingField
private string <PostExtractCommandLine>k__BackingField
private string <DefaultExtractDirectory>k__BackingField
private string <IconFile>k__BackingField
private bool <Quiet>k__BackingField
private ExtractExistingFileAction <ExtractExistingFile>k__BackingField
private bool <RemoveUnpackedFilesAfterExecute>k__BackingField
private Version <FileVersion>k__BackingField
private string <ProductVersion>k__BackingField
private string <Copyright>k__BackingField
private string <Description>k__BackingField
private string <ProductName>k__BackingField
private string <SfxExeWindowTitle>k__BackingField
private string <AdditionalCompilerSwitches>k__BackingField
public SelfExtractorFlavor Flavor
public string PostExtractCommandLine
public string DefaultExtractDirectory
public string IconFile
public bool Quiet
public ExtractExistingFileAction ExtractExistingFile
public bool RemoveUnpackedFilesAfterExecute
public Version FileVersion
public string ProductVersion
public string Copyright
public string Description
public string ProductName
public string SfxExeWindowTitle
public string AdditionalCompilerSwitches
public SelfExtractorFlavor get_Flavor()
public void set_Flavor(SelfExtractorFlavor value)
public string get_PostExtractCommandLine()
public void set_PostExtractCommandLine(string value)
public string get_DefaultExtractDirectory()
public void set_DefaultExtractDirectory(string value)
public string get_IconFile()
public void set_IconFile(string value)
public bool get_Quiet()
public void set_Quiet(bool value)
public ExtractExistingFileAction get_ExtractExistingFile()
public void set_ExtractExistingFile(ExtractExistingFileAction value)
public bool get_RemoveUnpackedFilesAfterExecute()
public void set_RemoveUnpackedFilesAfterExecute(bool value)
public Version get_FileVersion()
public void set_FileVersion(Version value)
public string get_ProductVersion()
public void set_ProductVersion(string value)
public string get_Copyright()
public void set_Copyright(string value)
public string get_Description()
public void set_Description(string value)
public string get_ProductName()
public void set_ProductName(string value)
public string get_SfxExeWindowTitle()
public void set_SfxExeWindowTitle(string value)
public string get_AdditionalCompilerSwitches()
public void set_AdditionalCompilerSwitches(string value)
}
public Ionic.Zip.SetCompressionCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public CompressionLevel Invoke(string localFileName, string fileNameInArchive)
public IAsyncResult BeginInvoke(string localFileName, string fileNameInArchive, AsyncCallback callback, object object)
public CompressionLevel EndInvoke(IAsyncResult result)
}
public Ionic.Zip.SfxGenerationException : ZipException {
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal Ionic.Zip.SharedUtilities : object {
private Regex doubleDotRegex1
private Encoding ibm437
private Encoding utf8
public long GetFileLength(string fileName)
public void Workaround_Ladybug318918(Stream s)
private string SimplifyFwdSlashPath(string path)
public string NormalizePathForUseInZipFile(string pathName)
internal Byte[] StringToByteArray(string value, Encoding encoding)
internal Byte[] StringToByteArray(string value)
internal string Utf8StringFromBuffer(Byte[] buf)
internal string StringFromBuffer(Byte[] buf, Encoding encoding)
internal int ReadSignature(Stream s)
internal int ReadEntrySignature(Stream s)
internal int ReadInt(Stream s)
private int _ReadFourBytes(Stream s, string message)
internal long FindSignature(Stream stream, int SignatureToFind)
internal DateTime AdjustTime_Reverse(DateTime time)
internal DateTime PackedToDateTime(int packedDateTime)
internal int DateTimeToPacked(DateTime time)
public void CreateAndOpenUniqueTempFile(string dir, Stream& fs, String& filename)
public string InternalGetTempFileName()
internal int ReadWithRetry(Stream s, Byte[] buffer, int offset, int count, string FileName)
private UInt32 _HRForException(Exception ex1)
}
internal Ionic.Zip.WinZipAesCipherStream : Stream {
private int BLOCK_SIZE_IN_BYTES
private WinZipAesCrypto _params
private Stream _s
private CryptoMode _mode
private int _nonce
private bool _finalBlock
internal HMACSHA1 _mac
internal RijndaelManaged _aesCipher
internal ICryptoTransform _xform
private Byte[] counter
private Byte[] counterOut
private long _length
private long _totalBytesXferred
private Byte[] _PendingWriteBlock
private int _pendingCount
private Byte[] _iobuf
private object _outputLock
public Byte[] FinalAuthentication
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
internal void .ctor(Stream s, WinZipAesCrypto cryptoParams, long length, CryptoMode mode)
internal void .ctor(Stream s, WinZipAesCrypto cryptoParams, CryptoMode mode)
private void XorInPlace(Byte[] buffer, int offset, int count)
private void WriteTransformOneBlock(Byte[] buffer, int offset)
private void WriteTransformBlocks(Byte[] buffer, int offset, int count)
private void WriteTransformFinalBlock()
private int ReadTransformOneBlock(Byte[] buffer, int offset, int last)
private void ReadTransformBlocks(Byte[] buffer, int offset, int count)
public int Read(Byte[] buffer, int offset, int count)
public Byte[] get_FinalAuthentication()
public void Write(Byte[] buffer, int offset, int count)
public void Close()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
private void TraceOutput(string format, Object[] varParams)
}
internal Ionic.Zip.WinZipAesCrypto : object {
internal Byte[] _Salt
internal Byte[] _providedPv
internal Byte[] _generatedPv
internal int _KeyStrengthInBits
private Byte[] _MacInitializationVector
private Byte[] _StoredMac
private Byte[] _keyBytes
private short PasswordVerificationStored
private short PasswordVerificationGenerated
private int Rfc2898KeygenIterations
private string _Password
private bool _cryptoGenerated
public Byte[] CalculatedMac
public Byte[] GeneratedPV
public Byte[] Salt
private int _KeyStrengthInBytes
public int SizeOfEncryptionMetadata
public string Password
public Byte[] KeyBytes
public Byte[] MacIv
private void .ctor(string password, int KeyStrengthInBits)
public WinZipAesCrypto Generate(string password, int KeyStrengthInBits)
public WinZipAesCrypto ReadFromStream(string password, int KeyStrengthInBits, Stream s)
public Byte[] get_GeneratedPV()
public Byte[] get_Salt()
private int get__KeyStrengthInBytes()
public int get_SizeOfEncryptionMetadata()
public void set_Password(string value)
private string get_Password()
private void _GenerateCryptoBytes()
public Byte[] get_KeyBytes()
public Byte[] get_MacIv()
public void ReadAndVerifyMac(Stream s)
}
public Ionic.Zip.WriteDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string entryName, Stream stream)
public IAsyncResult BeginInvoke(string entryName, Stream stream, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Ionic.Zip.Zip64Option : Enum {
public int value__
public Zip64Option Default
public Zip64Option Never
public Zip64Option AsNecessary
public Zip64Option Always
}
internal Ionic.Zip.ZipCipherStream : Stream {
private ZipCrypto _cipher
private Stream _s
private CryptoMode _mode
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream s, ZipCrypto cipher, CryptoMode mode)
public int Read(Byte[] buffer, int offset, int count)
public void Write(Byte[] buffer, int offset, int count)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
}
internal Ionic.Zip.ZipConstants : object {
public UInt32 PackedToRemovableMedia
public UInt32 Zip64EndOfCentralDirectoryRecordSignature
public UInt32 Zip64EndOfCentralDirectoryLocatorSignature
public UInt32 EndOfCentralDirectorySignature
public int ZipEntrySignature
public int ZipEntryDataDescriptorSignature
public int SplitArchiveSignature
public int ZipDirEntrySignature
public int AesKeySize
public int AesBlockSize
public ushort AesAlgId128
public ushort AesAlgId192
public ushort AesAlgId256
}
internal Ionic.Zip.ZipContainer : object {
private ZipFile _zf
private ZipOutputStream _zos
private ZipInputStream _zis
public ZipFile ZipFile
public ZipOutputStream ZipOutputStream
public string Name
public string Password
public Zip64Option Zip64
public int BufferSize
public ParallelDeflateOutputStream ParallelDeflater
public long ParallelDeflateThreshold
public int ParallelDeflateMaxBufferPairs
public int CodecBufferSize
public CompressionStrategy Strategy
public Zip64Option UseZip64WhenSaving
public Encoding AlternateEncoding
public Encoding DefaultEncoding
public ZipOption AlternateEncodingUsage
public Stream ReadStream
public void .ctor(object o)
public ZipFile get_ZipFile()
public ZipOutputStream get_ZipOutputStream()
public string get_Name()
public string get_Password()
public Zip64Option get_Zip64()
public int get_BufferSize()
public ParallelDeflateOutputStream get_ParallelDeflater()
public void set_ParallelDeflater(ParallelDeflateOutputStream value)
public long get_ParallelDeflateThreshold()
public int get_ParallelDeflateMaxBufferPairs()
public int get_CodecBufferSize()
public CompressionStrategy get_Strategy()
public Zip64Option get_UseZip64WhenSaving()
public Encoding get_AlternateEncoding()
public Encoding get_DefaultEncoding()
public ZipOption get_AlternateEncodingUsage()
public Stream get_ReadStream()
}
internal Ionic.Zip.ZipCrypto : object {
private UInt32[] _Keys
private CRC32 crc32
private byte MagicByte
public ZipCrypto ForWrite(string password)
public ZipCrypto ForRead(string password, ZipEntry e)
private byte get_MagicByte()
public Byte[] DecryptMessage(Byte[] cipherText, int length)
public Byte[] EncryptMessage(Byte[] plainText, int length)
public void InitCipher(string passphrase)
private void UpdateKeys(byte byteValue)
}
public Ionic.Zip.ZipEntry : object {
private short _VersionMadeBy
private short _InternalFileAttrs
private int _ExternalFileAttrs
private short _filenameLength
private short _extraFieldLength
private short _commentLength
private ZipCrypto _zipCrypto_forExtract
private ZipCrypto _zipCrypto_forWrite
private WinZipAesCrypto _aesCrypto_forExtract
private WinZipAesCrypto _aesCrypto_forWrite
private short _WinZipAesMethod
internal DateTime _LastModified
private DateTime _Mtime
private DateTime _Atime
private DateTime _Ctime
private bool _ntfsTimesAreSet
private bool _emitNtfsTimes
private bool _emitUnixTimes
private bool _TrimVolumeFromFullyQualifiedPaths
internal string _LocalFileName
private string _FileNameInArchive
internal short _VersionNeeded
internal short _BitField
internal short _CompressionMethod
private short _CompressionMethod_FromZipFile
private CompressionLevel _CompressionLevel
internal string _Comment
private bool _IsDirectory
private Byte[] _CommentBytes
internal long _CompressedSize
internal long _CompressedFileDataSize
internal long _UncompressedSize
internal int _TimeBlob
private bool _crcCalculated
internal int _Crc32
internal Byte[] _Extra
private bool _metadataChanged
private bool _restreamRequiredOnSave
private bool _sourceIsEncrypted
private bool _skippedDuringSave
private UInt32 _diskNumber
private Encoding ibm437
private Encoding _actualEncoding
internal ZipContainer _container
private long __FileDataPosition
private Byte[] _EntryHeader
internal long _RelativeOffsetOfLocalHeader
private long _future_ROLH
private long _TotalEntrySize
private int _LengthOfHeader
private int _LengthOfTrailer
internal bool _InputUsesZip64
private UInt32 _UnsupportedAlgorithmId
internal string _Password
internal ZipEntrySource _Source
internal EncryptionAlgorithm _Encryption
internal EncryptionAlgorithm _Encryption_FromZipFile
internal Byte[] _WeakEncryptionHeader
internal Stream _archiveStream
private Stream _sourceStream
private Nullable`1<long> _sourceStreamOriginalPosition
private bool _sourceWasJitProvided
private bool _ioOperationCanceled
private bool _presumeZip64
private Nullable`1<bool> _entryRequiresZip64
private Nullable`1<bool> _OutputUsesZip64
private bool _IsText
private ZipEntryTimestamp _timestamp
private DateTime _unixEpoch
private DateTime _win32Epoch
private DateTime _zeroHour
private WriteDelegate _WriteDelegate
private OpenDelegate _OpenDelegate
private CloseDelegate _CloseDelegate
private Stream _inputDecryptorStream
private int _readExtraDepth
private object _outputLock
private ExtractExistingFileAction <ExtractExistingFile>k__BackingField
private ZipErrorAction <ZipErrorAction>k__BackingField
private SetCompressionCallback <SetCompression>k__BackingField
private Encoding <ProvisionalAlternateEncoding>k__BackingField
private Encoding <AlternateEncoding>k__BackingField
private ZipOption <AlternateEncodingUsage>k__BackingField
internal bool AttributesIndicateDirectory
public string Info
public DateTime LastModified
private int BufferSize
public DateTime ModifiedTime
public DateTime AccessedTime
public DateTime CreationTime
public bool EmitTimesInWindowsFormatWhenSaving
public bool EmitTimesInUnixFormatWhenSaving
public ZipEntryTimestamp Timestamp
public FileAttributes Attributes
internal string LocalFileName
public string FileName
public Stream InputStream
public bool InputStreamWasJitProvided
public ZipEntrySource Source
public short VersionNeeded
public string Comment
public Nullable`1<bool> RequiresZip64
public Nullable`1<bool> OutputUsedZip64
public short BitField
public CompressionMethod CompressionMethod
public CompressionLevel CompressionLevel
public long CompressedSize
public long UncompressedSize
public double CompressionRatio
public int Crc
public bool IsDirectory
public bool UsesEncryption
public EncryptionAlgorithm Encryption
public string Password
internal bool IsChanged
public ExtractExistingFileAction ExtractExistingFile
public ZipErrorAction ZipErrorAction
public bool IncludedInMostRecentSave
public SetCompressionCallback SetCompression
public bool UseUnicodeAsNecessary
public Encoding ProvisionalAlternateEncoding
public Encoding AlternateEncoding
public ZipOption AlternateEncodingUsage
public bool IsText
internal Stream ArchiveStream
internal long FileDataPosition
private int LengthOfHeader
private string UnsupportedAlgorithm
private string UnsupportedCompressionMethod
internal bool get_AttributesIndicateDirectory()
internal void ResetDirEntry()
public string get_Info()
internal ZipEntry ReadDirEntry(ZipFile zf, Dictionary`2<string, object> previouslySeen)
internal bool IsNotValidZipDirEntrySig(int signature)
public DateTime get_LastModified()
public void set_LastModified(DateTime value)
private int get_BufferSize()
public DateTime get_ModifiedTime()
public void set_ModifiedTime(DateTime value)
public DateTime get_AccessedTime()
public void set_AccessedTime(DateTime value)
public DateTime get_CreationTime()
public void set_CreationTime(DateTime value)
public void SetEntryTimes(DateTime created, DateTime accessed, DateTime modified)
public bool get_EmitTimesInWindowsFormatWhenSaving()
public void set_EmitTimesInWindowsFormatWhenSaving(bool value)
public bool get_EmitTimesInUnixFormatWhenSaving()
public void set_EmitTimesInUnixFormatWhenSaving(bool value)
public ZipEntryTimestamp get_Timestamp()
public FileAttributes get_Attributes()
public void set_Attributes(FileAttributes value)
internal string get_LocalFileName()
public string get_FileName()
public void set_FileName(string value)
public Stream get_InputStream()
public void set_InputStream(Stream value)
public bool get_InputStreamWasJitProvided()
public ZipEntrySource get_Source()
public short get_VersionNeeded()
public string get_Comment()
public void set_Comment(string value)
public Nullable`1<bool> get_RequiresZip64()
public Nullable`1<bool> get_OutputUsedZip64()
public short get_BitField()
public CompressionMethod get_CompressionMethod()
public void set_CompressionMethod(CompressionMethod value)
public CompressionLevel get_CompressionLevel()
public void set_CompressionLevel(CompressionLevel value)
public long get_CompressedSize()
public long get_UncompressedSize()
public double get_CompressionRatio()
public int get_Crc()
public bool get_IsDirectory()
public bool get_UsesEncryption()
public EncryptionAlgorithm get_Encryption()
public void set_Encryption(EncryptionAlgorithm value)
public void set_Password(string value)
private string get_Password()
internal bool get_IsChanged()
public ExtractExistingFileAction get_ExtractExistingFile()
public void set_ExtractExistingFile(ExtractExistingFileAction value)
public ZipErrorAction get_ZipErrorAction()
public void set_ZipErrorAction(ZipErrorAction value)
public bool get_IncludedInMostRecentSave()
public SetCompressionCallback get_SetCompression()
public void set_SetCompression(SetCompressionCallback value)
public bool get_UseUnicodeAsNecessary()
public void set_UseUnicodeAsNecessary(bool value)
public Encoding get_ProvisionalAlternateEncoding()
public void set_ProvisionalAlternateEncoding(Encoding value)
public Encoding get_AlternateEncoding()
public void set_AlternateEncoding(Encoding value)
public ZipOption get_AlternateEncodingUsage()
public void set_AlternateEncodingUsage(ZipOption value)
internal string NameInArchive(string filename, string directoryPathInArchive)
internal ZipEntry CreateFromNothing(string nameInArchive)
internal ZipEntry CreateFromFile(string filename, string nameInArchive)
internal ZipEntry CreateForStream(string entryName, Stream s)
internal ZipEntry CreateForWriter(string entryName, WriteDelegate d)
internal ZipEntry CreateForJitStreamProvider(string nameInArchive, OpenDelegate opener, CloseDelegate closer)
internal ZipEntry CreateForZipOutputStream(string nameInArchive)
private ZipEntry Create(string nameInArchive, ZipEntrySource source, object arg1, object arg2)
internal void MarkAsDirectory()
public bool get_IsText()
public void set_IsText(bool value)
public string ToString()
internal Stream get_ArchiveStream()
private void SetFdpLoh()
private int GetKeyStrengthInBits(EncryptionAlgorithm a)
internal int GetLengthOfCryptoHeaderBytes(EncryptionAlgorithm a)
internal long get_FileDataPosition()
private int get_LengthOfHeader()
public void Extract()
public void Extract(ExtractExistingFileAction extractExistingFile)
public void Extract(Stream stream)
public void Extract(string baseDirectory)
public void Extract(string baseDirectory, ExtractExistingFileAction extractExistingFile)
public void ExtractWithPassword(string password)
public void ExtractWithPassword(string baseDirectory, string password)
public void ExtractWithPassword(ExtractExistingFileAction extractExistingFile, string password)
public void ExtractWithPassword(string baseDirectory, ExtractExistingFileAction extractExistingFile, string password)
public void ExtractWithPassword(Stream stream, string password)
public CrcCalculatorStream OpenReader()
public CrcCalculatorStream OpenReader(string password)
internal CrcCalculatorStream InternalOpenReader(string password)
private void OnExtractProgress(long bytesWritten, long totalBytesToWrite)
private void OnBeforeExtract(string path)
private void OnAfterExtract(string path)
private void OnExtractExisting(string path)
private void ReallyDelete(string fileName)
private void WriteStatus(string format, Object[] args)
private void InternalExtract(string baseDir, Stream outstream, string password)
internal void VerifyCrcAfterExtract(int actualCrc32)
private int CheckExtractExistingFile(string baseDir, string targetFileName)
private void _CheckRead(int nbytes)
private int ExtractOne(Stream output)
internal Stream GetExtractDecompressor(Stream input2)
internal Stream GetExtractDecryptor(Stream input)
internal void _SetTimes(string fileOrDirectory, bool isFile)
private string get_UnsupportedAlgorithm()
private string get_UnsupportedCompressionMethod()
internal void ValidateEncryption()
private void ValidateCompression()
private void SetupCryptoForExtract(string password)
private bool ValidateOutput(string basedir, Stream outstream, String& outFileName)
private void ReadExtraField()
private bool ReadHeader(ZipEntry ze, Encoding defaultEncoding)
internal int ReadWeakEncryptionHeader(Stream s, Byte[] buffer)
private bool IsNotValidSig(int signature)
internal ZipEntry ReadEntry(ZipContainer zc, bool first)
internal void HandlePK00Prefix(Stream s)
private void HandleUnexpectedDataDescriptor(ZipEntry entry)
internal int FindExtraFieldSegment(Byte[] extra, int offx, ushort targetHeaderId)
internal int ProcessExtraField(Stream s, short extraFieldLength)
private int ProcessExtraFieldPkwareStrongEncryption(Byte[] Buffer, int j)
private int ProcessExtraFieldWinZipAes(Byte[] buffer, int j, short dataSize, long posn)
private int ProcessExtraFieldZip64(Byte[] buffer, int j, short dataSize, long posn)
private int ProcessExtraFieldInfoZipTimes(Byte[] buffer, int j, short dataSize, long posn)
private int ProcessExtraFieldUnixTimes(Byte[] buffer, int j, short dataSize, long posn)
private int ProcessExtraFieldWindowsTimes(Byte[] buffer, int j, short dataSize, long posn)
internal void WriteCentralDirectoryEntry(Stream s)
private Byte[] ConstructExtraField(bool forCentralDirectory)
private string NormalizeFileName()
private Byte[] GetEncodedFileNameBytes()
private bool WantReadAgain()
private void MaybeUnsetCompressionMethodForWriting(int cycle)
internal void WriteHeader(Stream s, int cycle)
private int FigureCrc32()
private void PrepSourceStream()
internal void CopyMetaData(ZipEntry source)
private void OnWriteBlock(long bytesXferred, long totalBytesToXfer)
private void _WriteEntryData(Stream s)
private long SetInputAndFigureFileLength(Stream& input)
internal void FinishOutputStream(Stream s, CountingStream entryCounter, Stream encryptor, Stream compressor, CrcCalculatorStream output)
internal void PostProcessOutput(Stream s)
private void SetZip64Flags()
internal void PrepOutputStream(Stream s, long streamLength, CountingStream& outputCounter, Stream& encryptor, Stream& compressor, CrcCalculatorStream& output)
private Stream MaybeApplyCompression(Stream s, long streamLength)
private Stream MaybeApplyEncryption(Stream s)
private void OnZipErrorWhileSaving(Exception e)
internal void Write(Stream s)
internal void StoreRelativeOffset()
internal void NotifySaveComplete()
internal void WriteSecurityMetadata(Stream outstream)
private void CopyThroughOneEntry(Stream outStream)
private void CopyThroughWithRecompute(Stream outstream)
private void CopyThroughWithNoChange(Stream outstream)
private void TraceWriteLine(string format, Object[] varParams)
}
public Ionic.Zip.ZipEntrySource : Enum {
public int value__
public ZipEntrySource None
public ZipEntrySource FileSystem
public ZipEntrySource Stream
public ZipEntrySource ZipFile
public ZipEntrySource WriteDelegate
public ZipEntrySource JitStream
public ZipEntrySource ZipOutputStream
}
public Ionic.Zip.ZipEntryTimestamp : Enum {
public int value__
public ZipEntryTimestamp None
public ZipEntryTimestamp DOS
public ZipEntryTimestamp Windows
public ZipEntryTimestamp Unix
public ZipEntryTimestamp InfoZip1
}
public Ionic.Zip.ZipErrorAction : Enum {
public int value__
public ZipErrorAction Throw
public ZipErrorAction Skip
public ZipErrorAction Retry
public ZipErrorAction InvokeErrorEvent
}
public Ionic.Zip.ZipErrorEventArgs : ZipProgressEventArgs {
private Exception _exc
public Exception Exception
public string FileName
internal ZipErrorEventArgs Saving(string archiveName, ZipEntry entry, Exception exception)
public Exception get_Exception()
public string get_FileName()
}
public Ionic.Zip.ZipException : Exception {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public Ionic.Zip.ZipFile : object {
private TextWriter _StatusMessageTextWriter
private bool _CaseSensitiveRetrieval
private Stream _readstream
private Stream _writestream
private ushort _versionMadeBy
private ushort _versionNeededToExtract
private UInt32 _diskNumberWithCd
private int _maxOutputSegmentSize
private UInt32 _numberOfSegmentsForMostRecentSave
private ZipErrorAction _zipErrorAction
private bool _disposed
private Dictionary`2<string, ZipEntry> _entries
private List`1<ZipEntry> _zipEntriesAsList
private string _name
private string _readName
private string _Comment
internal string _Password
private bool _emitNtfsTimes
private bool _emitUnixTimes
private CompressionStrategy _Strategy
private CompressionMethod _compressionMethod
private bool _fileAlreadyExists
private string _temporaryFileName
private bool _contentsChanged
private bool _hasBeenSaved
private string _TempFileFolder
private bool _ReadStreamIsOurs
private object LOCK
private bool _saveOperationCanceled
private bool _extractOperationCanceled
private bool _addOperationCanceled
private EncryptionAlgorithm _Encryption
private bool _JustSaved
private long _locEndOfCDS
private UInt32 _OffsetOfCentralDirectory
private long _OffsetOfCentralDirectory64
private Nullable`1<bool> _OutputUsesZip64
internal bool _inExtractAll
private Encoding _alternateEncoding
private ZipOption _alternateEncodingUsage
private Encoding _defaultEncoding
private int _BufferSize
internal ParallelDeflateOutputStream ParallelDeflater
private long _ParallelDeflateThreshold
private int _maxBufferPairs
internal Zip64Option _zip64
private bool _SavingSfx
public int BufferSizeDefault
private EventHandler`1<SaveProgressEventArgs> SaveProgress
private EventHandler`1<ReadProgressEventArgs> ReadProgress
private long _lengthOfReadStream
private EventHandler`1<ExtractProgressEventArgs> ExtractProgress
private EventHandler`1<AddProgressEventArgs> AddProgress
private EventHandler`1<ZipErrorEventArgs> ZipError
private ExtractorSettings[] SettingsList
private bool <FullScan>k__BackingField
private bool <SortEntriesBeforeSaving>k__BackingField
private bool <AddDirectoryWillTraverseReparsePoints>k__BackingField
private int <CodecBufferSize>k__BackingField
private bool <FlattenFoldersOnExtract>k__BackingField
private CompressionLevel <CompressionLevel>k__BackingField
private ExtractExistingFileAction <ExtractExistingFile>k__BackingField
private SetCompressionCallback <SetCompression>k__BackingField
public string Info
public bool FullScan
public bool SortEntriesBeforeSaving
public bool AddDirectoryWillTraverseReparsePoints
public int BufferSize
public int CodecBufferSize
public bool FlattenFoldersOnExtract
public CompressionStrategy Strategy
public string Name
public CompressionLevel CompressionLevel
public CompressionMethod CompressionMethod
public string Comment
public bool EmitTimesInWindowsFormatWhenSaving
public bool EmitTimesInUnixFormatWhenSaving
internal bool Verbose
public bool CaseSensitiveRetrieval
public bool UseUnicodeAsNecessary
public Zip64Option UseZip64WhenSaving
public Nullable`1<bool> RequiresZip64
public Nullable`1<bool> OutputUsedZip64
public Nullable`1<bool> InputUsesZip64
public Encoding ProvisionalAlternateEncoding
public Encoding AlternateEncoding
public ZipOption AlternateEncodingUsage
public Encoding DefaultEncoding
public TextWriter StatusMessageTextWriter
public string TempFileFolder
public string Password
public ExtractExistingFileAction ExtractExistingFile
public ZipErrorAction ZipErrorAction
public EncryptionAlgorithm Encryption
public SetCompressionCallback SetCompression
public int MaxOutputSegmentSize
public int NumberOfSegmentsForMostRecentSave
public long ParallelDeflateThreshold
public int ParallelDeflateMaxBufferPairs
public Version LibraryVersion
private List`1<ZipEntry> ZipEntriesAsList
public ZipEntry Item
public ZipEntry Item
public ICollection`1<string> EntryFileNames
public ICollection`1<ZipEntry> Entries
public ICollection`1<ZipEntry> EntriesSorted
public int Count
internal Stream ReadStream
private Stream WriteStream
private string ArchiveNameForEvent
private long LengthOfReadStream
public ZipEntry AddItem(string fileOrDirectoryName)
public ZipEntry AddItem(string fileOrDirectoryName, string directoryPathInArchive)
public ZipEntry AddFile(string fileName)
public ZipEntry AddFile(string fileName, string directoryPathInArchive)
public void RemoveEntries(ICollection`1<ZipEntry> entriesToRemove)
public void RemoveEntries(ICollection`1<string> entriesToRemove)
public void AddFiles(IEnumerable`1<string> fileNames)
public void UpdateFiles(IEnumerable`1<string> fileNames)
public void AddFiles(IEnumerable`1<string> fileNames, string directoryPathInArchive)
public void AddFiles(IEnumerable`1<string> fileNames, bool preserveDirHierarchy, string directoryPathInArchive)
public void UpdateFiles(IEnumerable`1<string> fileNames, string directoryPathInArchive)
public ZipEntry UpdateFile(string fileName)
public ZipEntry UpdateFile(string fileName, string directoryPathInArchive)
public ZipEntry UpdateDirectory(string directoryName)
public ZipEntry UpdateDirectory(string directoryName, string directoryPathInArchive)
public void UpdateItem(string itemName)
public void UpdateItem(string itemName, string directoryPathInArchive)
public ZipEntry AddEntry(string entryName, string content)
public ZipEntry AddEntry(string entryName, string content, Encoding encoding)
public ZipEntry AddEntry(string entryName, Stream stream)
public ZipEntry AddEntry(string entryName, WriteDelegate writer)
public ZipEntry AddEntry(string entryName, OpenDelegate opener, CloseDelegate closer)
private ZipEntry _InternalAddEntry(ZipEntry ze)
public ZipEntry UpdateEntry(string entryName, string content)
public ZipEntry UpdateEntry(string entryName, string content, Encoding encoding)
public ZipEntry UpdateEntry(string entryName, WriteDelegate writer)
public ZipEntry UpdateEntry(string entryName, OpenDelegate opener, CloseDelegate closer)
public ZipEntry UpdateEntry(string entryName, Stream stream)
private void RemoveEntryForUpdate(string entryName)
public ZipEntry AddEntry(string entryName, Byte[] byteContent)
public ZipEntry UpdateEntry(string entryName, Byte[] byteContent)
public ZipEntry AddDirectory(string directoryName)
public ZipEntry AddDirectory(string directoryName, string directoryPathInArchive)
public ZipEntry AddDirectoryByName(string directoryNameInArchive)
private ZipEntry AddOrUpdateDirectoryImpl(string directoryName, string rootDirectoryPathInArchive, AddOrUpdateAction action)
internal void InternalAddEntry(string name, ZipEntry entry)
private ZipEntry AddOrUpdateDirectoryImpl(string directoryName, string rootDirectoryPathInArchive, AddOrUpdateAction action, bool recurse, int level)
public bool CheckZip(string zipFileName)
public bool CheckZip(string zipFileName, bool fixIfNecessary, TextWriter writer)
public void FixZipDirectory(string zipFileName)
public bool CheckZipPassword(string zipFileName, string password)
public string get_Info()
public bool get_FullScan()
public void set_FullScan(bool value)
public bool get_SortEntriesBeforeSaving()
public void set_SortEntriesBeforeSaving(bool value)
public bool get_AddDirectoryWillTraverseReparsePoints()
public void set_AddDirectoryWillTraverseReparsePoints(bool value)
public int get_BufferSize()
public void set_BufferSize(int value)
public int get_CodecBufferSize()
public void set_CodecBufferSize(int value)
public bool get_FlattenFoldersOnExtract()
public void set_FlattenFoldersOnExtract(bool value)
public CompressionStrategy get_Strategy()
public void set_Strategy(CompressionStrategy value)
public string get_Name()
public void set_Name(string value)
public CompressionLevel get_CompressionLevel()
public void set_CompressionLevel(CompressionLevel value)
public CompressionMethod get_CompressionMethod()
public void set_CompressionMethod(CompressionMethod value)
public string get_Comment()
public void set_Comment(string value)
public bool get_EmitTimesInWindowsFormatWhenSaving()
public void set_EmitTimesInWindowsFormatWhenSaving(bool value)
public bool get_EmitTimesInUnixFormatWhenSaving()
public void set_EmitTimesInUnixFormatWhenSaving(bool value)
internal bool get_Verbose()
public bool ContainsEntry(string name)
public bool get_CaseSensitiveRetrieval()
public void set_CaseSensitiveRetrieval(bool value)
public bool get_UseUnicodeAsNecessary()
public void set_UseUnicodeAsNecessary(bool value)
public Zip64Option get_UseZip64WhenSaving()
public void set_UseZip64WhenSaving(Zip64Option value)
public Nullable`1<bool> get_RequiresZip64()
public Nullable`1<bool> get_OutputUsedZip64()
public Nullable`1<bool> get_InputUsesZip64()
public Encoding get_ProvisionalAlternateEncoding()
public void set_ProvisionalAlternateEncoding(Encoding value)
public Encoding get_AlternateEncoding()
public void set_AlternateEncoding(Encoding value)
public ZipOption get_AlternateEncodingUsage()
public void set_AlternateEncodingUsage(ZipOption value)
public Encoding get_DefaultEncoding()
public TextWriter get_StatusMessageTextWriter()
public void set_StatusMessageTextWriter(TextWriter value)
public string get_TempFileFolder()
public void set_TempFileFolder(string value)
public void set_Password(string value)
private string get_Password()
public ExtractExistingFileAction get_ExtractExistingFile()
public void set_ExtractExistingFile(ExtractExistingFileAction value)
public ZipErrorAction get_ZipErrorAction()
public void set_ZipErrorAction(ZipErrorAction value)
public EncryptionAlgorithm get_Encryption()
public void set_Encryption(EncryptionAlgorithm value)
public SetCompressionCallback get_SetCompression()
public void set_SetCompression(SetCompressionCallback value)
public int get_MaxOutputSegmentSize()
public void set_MaxOutputSegmentSize(int value)
public int get_NumberOfSegmentsForMostRecentSave()
public void set_ParallelDeflateThreshold(long value)
public long get_ParallelDeflateThreshold()
public int get_ParallelDeflateMaxBufferPairs()
public void set_ParallelDeflateMaxBufferPairs(int value)
public string ToString()
public Version get_LibraryVersion()
internal void NotifyEntryChanged()
internal Stream StreamForDiskNumber(UInt32 diskNumber)
internal void Reset(bool whileSaving)
public void .ctor(string fileName)
public void .ctor(string fileName, Encoding encoding)
public void .ctor(Encoding encoding)
public void .ctor(string fileName, TextWriter statusMessageWriter)
public void .ctor(string fileName, TextWriter statusMessageWriter, Encoding encoding)
public void Initialize(string fileName)
private void _initEntriesDictionary()
private void _InitInstance(string zipFileName, TextWriter statusMessageWriter)
private List`1<ZipEntry> get_ZipEntriesAsList()
public ZipEntry get_Item(int ix)
public ZipEntry get_Item(string fileName)
public ICollection`1<string> get_EntryFileNames()
public ICollection`1<ZipEntry> get_Entries()
public ICollection`1<ZipEntry> get_EntriesSorted()
public int get_Count()
public void RemoveEntry(ZipEntry entry)
public void RemoveEntry(string fileName)
public void Dispose()
protected void Dispose(bool disposeManagedResources)
internal Stream get_ReadStream()
private Stream get_WriteStream()
private void set_WriteStream(Stream value)
private string get_ArchiveNameForEvent()
public void add_SaveProgress(EventHandler`1<SaveProgressEventArgs> value)
public void remove_SaveProgress(EventHandler`1<SaveProgressEventArgs> value)
internal bool OnSaveBlock(ZipEntry entry, long bytesXferred, long totalBytesToXfer)
private void OnSaveEntry(int current, ZipEntry entry, bool before)
private void OnSaveEvent(ZipProgressEventType eventFlavor)
private void OnSaveStarted()
private void OnSaveCompleted()
public void add_ReadProgress(EventHandler`1<ReadProgressEventArgs> value)
public void remove_ReadProgress(EventHandler`1<ReadProgressEventArgs> value)
private void OnReadStarted()
private void OnReadCompleted()
internal void OnReadBytes(ZipEntry entry)
internal void OnReadEntry(bool before, ZipEntry entry)
private long get_LengthOfReadStream()
public void add_ExtractProgress(EventHandler`1<ExtractProgressEventArgs> value)
public void remove_ExtractProgress(EventHandler`1<ExtractProgressEventArgs> value)
private void OnExtractEntry(int current, bool before, ZipEntry currentEntry, string path)
internal bool OnExtractBlock(ZipEntry entry, long bytesWritten, long totalBytesToWrite)
internal bool OnSingleEntryExtract(ZipEntry entry, string path, bool before)
internal bool OnExtractExisting(ZipEntry entry, string path)
private void OnExtractAllCompleted(string path)
private void OnExtractAllStarted(string path)
public void add_AddProgress(EventHandler`1<AddProgressEventArgs> value)
public void remove_AddProgress(EventHandler`1<AddProgressEventArgs> value)
private void OnAddStarted()
private void OnAddCompleted()
internal void AfterAddEntry(ZipEntry entry)
public void add_ZipError(EventHandler`1<ZipErrorEventArgs> value)
public void remove_ZipError(EventHandler`1<ZipErrorEventArgs> value)
internal bool OnZipErrorSaving(ZipEntry entry, Exception exc)
public void ExtractAll(string path)
public void ExtractAll(string path, ExtractExistingFileAction extractExistingFile)
private void _InternalExtractAll(string path, bool overrideExtractExistingProperty)
public ZipFile Read(string fileName)
public ZipFile Read(string fileName, ReadOptions options)
private ZipFile Read(string fileName, TextWriter statusMessageWriter, Encoding encoding, EventHandler`1<ReadProgressEventArgs> readProgress)
public ZipFile Read(Stream zipStream)
public ZipFile Read(Stream zipStream, ReadOptions options)
private ZipFile Read(Stream zipStream, TextWriter statusMessageWriter, Encoding encoding, EventHandler`1<ReadProgressEventArgs> readProgress)
private void ReadIntoInstance(ZipFile zf)
private void Zip64SeekToCentralDirectory(ZipFile zf)
private UInt32 ReadFirstFourBytes(Stream s)
private void ReadCentralDirectory(ZipFile zf)
private void ReadIntoInstance_Orig(ZipFile zf)
private void ReadCentralDirectoryFooter(ZipFile zf)
private void ReadZipFileComment(ZipFile zf)
public bool IsZipFile(string fileName)
public bool IsZipFile(string fileName, bool testExtract)
public bool IsZipFile(Stream stream, bool testExtract)
private void DeleteFileWithRetry(string filename)
public void Save()
private void NotifyEntriesSaveComplete(ICollection`1<ZipEntry> c)
private void RemoveTempFile()
private void CleanupAfterSaveOperation()
public void Save(string fileName)
public void Save(Stream outputStream)
public void SaveSelfExtractor(string exeToGenerate, SelfExtractorFlavor flavor)
public void SaveSelfExtractor(string exeToGenerate, SelfExtractorSaveOptions options)
private void ExtractResourceToFile(Assembly a, string resourceName, string filename)
private void _SaveSfxStub(string exeToGenerate, SelfExtractorSaveOptions options)
internal string GenerateTempPathname(string dir, string extension)
public void AddSelectedFiles(string selectionCriteria)
public void AddSelectedFiles(string selectionCriteria, bool recurseDirectories)
public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk)
public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk, bool recurseDirectories)
public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive)
public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive, bool recurseDirectories)
public void UpdateSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive, bool recurseDirectories)
private string EnsureendInSlash(string s)
private void _AddOrUpdateSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive, bool recurseDirectories, bool wantUpdate)
private string ReplaceLeadingDirectory(string original, string pattern, string replacement)
public ICollection`1<ZipEntry> SelectEntries(string selectionCriteria)
public ICollection`1<ZipEntry> SelectEntries(string selectionCriteria, string directoryPathInArchive)
public int RemoveSelectedEntries(string selectionCriteria)
public int RemoveSelectedEntries(string selectionCriteria, string directoryPathInArchive)
public void ExtractSelectedEntries(string selectionCriteria)
public void ExtractSelectedEntries(string selectionCriteria, ExtractExistingFileAction extractExistingFile)
public void ExtractSelectedEntries(string selectionCriteria, string directoryPathInArchive)
public void ExtractSelectedEntries(string selectionCriteria, string directoryInArchive, string extractDirectory)
public void ExtractSelectedEntries(string selectionCriteria, string directoryPathInArchive, string extractDirectory, ExtractExistingFileAction extractExistingFile)
public IEnumerator`1<ZipEntry> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public IEnumerator GetNewEnum()
}
public Ionic.Zip.ZipInputStream : Stream {
private Stream _inputStream
private Encoding _provisionalAlternateEncoding
private ZipEntry _currentEntry
private bool _firstEntry
private bool _needSetup
private ZipContainer _container
private CrcCalculatorStream _crcStream
private long _LeftToRead
internal string _Password
private long _endOfEntry
private string _name
private bool _leaveUnderlyingStreamOpen
private bool _closed
private bool _findRequired
private bool _exceptionPending
private int <CodecBufferSize>k__BackingField
public Encoding ProvisionalAlternateEncoding
public int CodecBufferSize
public string Password
internal Stream ReadStream
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream stream)
public void .ctor(string fileName)
public void .ctor(Stream stream, bool leaveOpen)
private void _Init(Stream stream, bool leaveOpen, string name)
public string ToString()
public Encoding get_ProvisionalAlternateEncoding()
public void set_ProvisionalAlternateEncoding(Encoding value)
public int get_CodecBufferSize()
public void set_CodecBufferSize(int value)
public void set_Password(string value)
private void SetupStream()
internal Stream get_ReadStream()
public int Read(Byte[] buffer, int offset, int count)
public ZipEntry GetNextEntry()
protected void Dispose(bool disposing)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public void Flush()
public void Write(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
}
public Ionic.Zip.ZipOption : Enum {
public int value__
public ZipOption Default
public ZipOption Never
public ZipOption AsNecessary
public ZipOption Always
}
internal Ionic.Zip.ZipOutput : object {
public bool WriteCentralDirectoryStructure(Stream s, ICollection`1<ZipEntry> entries, UInt32 numSegments, Zip64Option zip64, string comment, ZipContainer container)
private Encoding GetEncoding(ZipContainer container, string t)
private Byte[] GenCentralDirectoryFooter(long StartOfCentralDirectory, long EndOfCentralDirectory, Zip64Option zip64, int entryCount, string comment, ZipContainer container)
private Byte[] GenZip64EndOfCentralDirectory(long StartOfCentralDirectory, long EndOfCentralDirectory, int entryCount, UInt32 numSegments)
private int CountEntries(ICollection`1<ZipEntry> _entries)
}
public Ionic.Zip.ZipOutputStream : Stream {
private EncryptionAlgorithm _encryption
private ZipEntryTimestamp _timestamp
internal string _password
private string _comment
private Stream _outputStream
private ZipEntry _currentEntry
internal Zip64Option _zip64
private Dictionary`2<string, ZipEntry> _entriesWritten
private int _entryCount
private ZipOption _alternateEncodingUsage
private Encoding _alternateEncoding
private bool _leaveUnderlyingStreamOpen
private bool _disposed
private bool _exceptionPending
private bool _anyEntriesUsedZip64
private bool _directoryNeededZip64
private CountingStream _outputCounter
private Stream _encryptor
private Stream _deflater
private CrcCalculatorStream _entryOutputStream
private bool _needToWriteEntryHeader
private string _name
private bool _DontIgnoreCase
internal ParallelDeflateOutputStream ParallelDeflater
private long _ParallelDeflateThreshold
private int _maxBufferPairs
private int <CodecBufferSize>k__BackingField
private CompressionStrategy <Strategy>k__BackingField
private CompressionLevel <CompressionLevel>k__BackingField
private CompressionMethod <CompressionMethod>k__BackingField
public string Password
public EncryptionAlgorithm Encryption
public int CodecBufferSize
public CompressionStrategy Strategy
public ZipEntryTimestamp Timestamp
public CompressionLevel CompressionLevel
public CompressionMethod CompressionMethod
public string Comment
public Zip64Option EnableZip64
public bool OutputUsedZip64
public bool IgnoreCase
public bool UseUnicodeAsNecessary
public Encoding ProvisionalAlternateEncoding
public Encoding AlternateEncoding
public ZipOption AlternateEncodingUsage
public Encoding DefaultEncoding
public long ParallelDeflateThreshold
public int ParallelDeflateMaxBufferPairs
internal Stream OutputStream
internal string Name
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream stream)
public void .ctor(string fileName)
public void .ctor(Stream stream, bool leaveOpen)
private void _Init(Stream stream, bool leaveOpen, string name)
public string ToString()
public void set_Password(string value)
public EncryptionAlgorithm get_Encryption()
public void set_Encryption(EncryptionAlgorithm value)
public int get_CodecBufferSize()
public void set_CodecBufferSize(int value)
public CompressionStrategy get_Strategy()
public void set_Strategy(CompressionStrategy value)
public ZipEntryTimestamp get_Timestamp()
public void set_Timestamp(ZipEntryTimestamp value)
public CompressionLevel get_CompressionLevel()
public void set_CompressionLevel(CompressionLevel value)
public CompressionMethod get_CompressionMethod()
public void set_CompressionMethod(CompressionMethod value)
public string get_Comment()
public void set_Comment(string value)
public Zip64Option get_EnableZip64()
public void set_EnableZip64(Zip64Option value)
public bool get_OutputUsedZip64()
public bool get_IgnoreCase()
public void set_IgnoreCase(bool value)
public bool get_UseUnicodeAsNecessary()
public void set_UseUnicodeAsNecessary(bool value)
public Encoding get_ProvisionalAlternateEncoding()
public void set_ProvisionalAlternateEncoding(Encoding value)
public Encoding get_AlternateEncoding()
public void set_AlternateEncoding(Encoding value)
public ZipOption get_AlternateEncodingUsage()
public void set_AlternateEncodingUsage(ZipOption value)
public Encoding get_DefaultEncoding()
public void set_ParallelDeflateThreshold(long value)
public long get_ParallelDeflateThreshold()
public int get_ParallelDeflateMaxBufferPairs()
public void set_ParallelDeflateMaxBufferPairs(int value)
private void InsureUniqueEntry(ZipEntry ze1)
internal Stream get_OutputStream()
internal string get_Name()
public bool ContainsEntry(string name)
public void Write(Byte[] buffer, int offset, int count)
public ZipEntry PutNextEntry(string entryName)
private void _InitiateCurrentEntry(bool finishing)
private void _FinishCurrentEntry()
protected void Dispose(bool disposing)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
}
public Ionic.Zip.ZipProgressEventArgs : EventArgs {
private int _entriesTotal
private bool _cancel
private ZipEntry _latestEntry
private ZipProgressEventType _flavor
private string _archiveName
private long _bytesTransferred
private long _totalBytesToTransfer
public int EntriesTotal
public ZipEntry CurrentEntry
public bool Cancel
public ZipProgressEventType EventType
public string ArchiveName
public long BytesTransferred
public long TotalBytesToTransfer
internal void .ctor(string archiveName, ZipProgressEventType flavor)
public int get_EntriesTotal()
public void set_EntriesTotal(int value)
public ZipEntry get_CurrentEntry()
public void set_CurrentEntry(ZipEntry value)
public bool get_Cancel()
public void set_Cancel(bool value)
public ZipProgressEventType get_EventType()
public void set_EventType(ZipProgressEventType value)
public string get_ArchiveName()
public void set_ArchiveName(string value)
public long get_BytesTransferred()
public void set_BytesTransferred(long value)
public long get_TotalBytesToTransfer()
public void set_TotalBytesToTransfer(long value)
}
public Ionic.Zip.ZipProgressEventType : Enum {
public int value__
public ZipProgressEventType Adding_Started
public ZipProgressEventType Adding_AfterAddEntry
public ZipProgressEventType Adding_Completed
public ZipProgressEventType Reading_Started
public ZipProgressEventType Reading_BeforeReadEntry
public ZipProgressEventType Reading_AfterReadEntry
public ZipProgressEventType Reading_Completed
public ZipProgressEventType Reading_ArchiveBytesRead
public ZipProgressEventType Saving_Started
public ZipProgressEventType Saving_BeforeWriteEntry
public ZipProgressEventType Saving_AfterWriteEntry
public ZipProgressEventType Saving_Completed
public ZipProgressEventType Saving_AfterSaveTempArchive
public ZipProgressEventType Saving_BeforeRenameTempArchive
public ZipProgressEventType Saving_AfterRenameTempArchive
public ZipProgressEventType Saving_AfterCompileSelfExtractor
public ZipProgressEventType Saving_EntryBytesRead
public ZipProgressEventType Extracting_BeforeExtractEntry
public ZipProgressEventType Extracting_AfterExtractEntry
public ZipProgressEventType Extracting_ExtractEntryWouldOverwrite
public ZipProgressEventType Extracting_EntryBytesWritten
public ZipProgressEventType Extracting_BeforeExtractAll
public ZipProgressEventType Extracting_AfterExtractAll
public ZipProgressEventType Error_Saving
}
internal Ionic.Zip.ZipSegmentedStream : Stream {
private RwMode rwMode
private bool _exceptionPending
private string _baseName
private string _baseDir
private string _currentName
private string _currentTempName
private UInt32 _currentDiskNumber
private UInt32 _maxDiskNumber
private int _maxSegmentSize
private Stream _innerStream
private bool <ContiguousWrite>k__BackingField
public bool ContiguousWrite
public UInt32 CurrentSegment
public string CurrentName
public string CurrentTempName
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public ZipSegmentedStream ForReading(string name, UInt32 initialDiskNumber, UInt32 maxDiskNumber)
public ZipSegmentedStream ForWriting(string name, int maxSegmentSize)
public Stream ForUpdate(string name, UInt32 diskNumber)
public bool get_ContiguousWrite()
public void set_ContiguousWrite(bool value)
public UInt32 get_CurrentSegment()
private void set_CurrentSegment(UInt32 value)
public string get_CurrentName()
public string get_CurrentTempName()
private string _NameForSegment(UInt32 diskNumber)
public UInt32 ComputeSegment(int length)
public string ToString()
private void _SetReadStream()
public int Read(Byte[] buffer, int offset, int count)
private void _SetWriteStream(UInt32 increment)
public void Write(Byte[] buffer, int offset, int count)
public long TruncateBackward(UInt32 diskNumber, long offset)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
protected void Dispose(bool disposing)
}
public Ionic.Zlib.Adler : object {
private UInt32 BASE
private int NMAX
public UInt32 Adler32(UInt32 adler, Byte[] buf, int index, int len)
}
internal Ionic.Zlib.BlockState : Enum {
public int value__
public BlockState NeedMore
public BlockState BlockDone
public BlockState FinishStarted
public BlockState FinishDone
}
public Ionic.Zlib.CompressionLevel : Enum {
public int value__
public CompressionLevel None
public CompressionLevel Level0
public CompressionLevel BestSpeed
public CompressionLevel Level1
public CompressionLevel Level2
public CompressionLevel Level3
public CompressionLevel Level4
public CompressionLevel Level5
public CompressionLevel Default
public CompressionLevel Level6
public CompressionLevel Level7
public CompressionLevel Level8
public CompressionLevel BestCompression
public CompressionLevel Level9
}
public Ionic.Zlib.CompressionMode : Enum {
public int value__
public CompressionMode Compress
public CompressionMode Decompress
}
public Ionic.Zlib.CompressionStrategy : Enum {
public int value__
public CompressionStrategy Default
public CompressionStrategy Filtered
public CompressionStrategy HuffmanOnly
}
internal Ionic.Zlib.DeflateFlavor : Enum {
public int value__
public DeflateFlavor Store
public DeflateFlavor Fast
public DeflateFlavor Slow
}
internal Ionic.Zlib.DeflateManager : object {
private int MEM_LEVEL_MAX
private int MEM_LEVEL_DEFAULT
private CompressFunc DeflateFunction
private String[] _ErrorMessage
private int PRESET_DICT
private int INIT_STATE
private int BUSY_STATE
private int FINISH_STATE
private int Z_DEFLATED
private int STORED_BLOCK
private int STATIC_TREES
private int DYN_TREES
private int Z_BINARY
private int Z_ASCII
private int Z_UNKNOWN
private int Buf_size
private int MIN_MATCH
private int MAX_MATCH
private int MIN_LOOKAHEAD
private int HEAP_SIZE
private int END_BLOCK
internal ZlibCodec _codec
internal int status
internal Byte[] pending
internal int nextPending
internal int pendingCount
internal sbyte data_type
internal int last_flush
internal int w_size
internal int w_bits
internal int w_mask
internal Byte[] window
internal int window_size
internal Int16[] prev
internal Int16[] head
internal int ins_h
internal int hash_size
internal int hash_bits
internal int hash_mask
internal int hash_shift
internal int block_start
private Config config
internal int match_length
internal int prev_match
internal int match_available
internal int strstart
internal int match_start
internal int lookahead
internal int prev_length
internal CompressionLevel compressionLevel
internal CompressionStrategy compressionStrategy
internal Int16[] dyn_ltree
internal Int16[] dyn_dtree
internal Int16[] bl_tree
internal Tree treeLiterals
internal Tree treeDistances
internal Tree treeBitLengths
internal Int16[] bl_count
internal Int32[] heap
internal int heap_len
internal int heap_max
internal SByte[] depth
internal int _lengthOffset
internal int lit_bufsize
internal int last_lit
internal int _distanceOffset
internal int opt_len
internal int static_len
internal int matches
internal int last_eob_len
internal short bi_buf
internal int bi_valid
private bool Rfc1950BytesEmitted
private bool _WantRfc1950HeaderBytes
internal bool WantRfc1950HeaderBytes
private void _InitializeLazyMatch()
private void _InitializeTreeData()
internal void _InitializeBlocks()
internal void pqdownheap(Int16[] tree, int k)
internal bool _IsSmaller(Int16[] tree, int n, int m, SByte[] depth)
internal void scan_tree(Int16[] tree, int max_code)
internal int build_bl_tree()
internal void send_all_trees(int lcodes, int dcodes, int blcodes)
internal void send_tree(Int16[] tree, int max_code)
private void put_bytes(Byte[] p, int start, int len)
internal void send_code(int c, Int16[] tree)
internal void send_bits(int value, int length)
internal void _tr_align()
internal bool _tr_tally(int dist, int lc)
internal void send_compressed_block(Int16[] ltree, Int16[] dtree)
internal void set_data_type()
internal void bi_flush()
internal void bi_windup()
internal void copy_block(int buf, int len, bool header)
internal void flush_block_only(bool eof)
internal BlockState DeflateNone(FlushType flush)
internal void _tr_stored_block(int buf, int stored_len, bool eof)
internal void _tr_flush_block(int buf, int stored_len, bool eof)
private void _fillWindow()
internal BlockState DeflateFast(FlushType flush)
internal BlockState DeflateSlow(FlushType flush)
internal int longest_match(int cur_match)
internal bool get_WantRfc1950HeaderBytes()
internal void set_WantRfc1950HeaderBytes(bool value)
internal int Initialize(ZlibCodec codec, CompressionLevel level)
internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits)
internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits, CompressionStrategy compressionStrategy)
internal int Initialize(ZlibCodec codec, CompressionLevel level, int windowBits, int memLevel, CompressionStrategy strategy)
internal void Reset()
internal int End()
private void SetDeflater()
internal int SetParams(CompressionLevel level, CompressionStrategy strategy)
internal int SetDictionary(Byte[] dictionary)
internal int Deflate(FlushType flush)
}
public Ionic.Zlib.DeflateStream : Stream {
internal ZlibBaseStream _baseStream
internal Stream _innerStream
private bool _disposed
public FlushType FlushMode
public int BufferSize
public CompressionStrategy Strategy
public long TotalIn
public long TotalOut
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream stream, CompressionMode mode)
public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level)
public void .ctor(Stream stream, CompressionMode mode, bool leaveOpen)
public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen)
public FlushType get_FlushMode()
public void set_FlushMode(FlushType value)
public int get_BufferSize()
public void set_BufferSize(int value)
public CompressionStrategy get_Strategy()
public void set_Strategy(CompressionStrategy value)
public long get_TotalIn()
public long get_TotalOut()
protected void Dispose(bool disposing)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public int Read(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
public Byte[] CompressString(string s)
public Byte[] CompressBuffer(Byte[] b)
public string UncompressString(Byte[] compressed)
public Byte[] UncompressBuffer(Byte[] compressed)
}
public Ionic.Zlib.FlushType : Enum {
public int value__
public FlushType None
public FlushType Partial
public FlushType Sync
public FlushType Full
public FlushType Finish
}
public Ionic.Zlib.GZipStream : Stream {
public Nullable`1<DateTime> LastModified
private int _headerByteCount
internal ZlibBaseStream _baseStream
private bool _disposed
private bool _firstReadDone
private string _FileName
private string _Comment
private int _Crc32
internal DateTime _unixEpoch
internal Encoding iso8859dash1
public string Comment
public string FileName
public int Crc32
public FlushType FlushMode
public int BufferSize
public long TotalIn
public long TotalOut
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public string get_Comment()
public void set_Comment(string value)
public string get_FileName()
public void set_FileName(string value)
public int get_Crc32()
public void .ctor(Stream stream, CompressionMode mode)
public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level)
public void .ctor(Stream stream, CompressionMode mode, bool leaveOpen)
public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen)
public FlushType get_FlushMode()
public void set_FlushMode(FlushType value)
public int get_BufferSize()
public void set_BufferSize(int value)
public long get_TotalIn()
public long get_TotalOut()
protected void Dispose(bool disposing)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public int Read(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
private int EmitHeader()
public Byte[] CompressString(string s)
public Byte[] CompressBuffer(Byte[] b)
public string UncompressString(Byte[] compressed)
public Byte[] UncompressBuffer(Byte[] compressed)
}
internal Ionic.Zlib.InflateBlocks : object {
private int MANY
internal Int32[] border
private InflateBlockMode mode
internal int left
internal int table
internal int index
internal Int32[] blens
internal Int32[] bb
internal Int32[] tb
internal InflateCodes codes
internal int last
internal ZlibCodec _codec
internal int bitk
internal int bitb
internal Int32[] hufts
internal Byte[] window
internal int end
internal int readAt
internal int writeAt
internal object checkfn
internal UInt32 check
internal InfTree inftree
internal void .ctor(ZlibCodec codec, object checkfn, int w)
internal UInt32 Reset()
internal int Process(int r)
internal void Free()
internal void SetDictionary(Byte[] d, int start, int n)
internal int SyncPoint()
internal int Flush(int r)
}
internal Ionic.Zlib.InflateCodes : object {
private int START
private int LEN
private int LENEXT
private int DIST
private int DISTEXT
private int COPY
private int LIT
private int WASH
private int END
private int BADCODE
internal int mode
internal int len
internal Int32[] tree
internal int tree_index
internal int need
internal int lit
internal int bitsToGet
internal int dist
internal byte lbits
internal byte dbits
internal Int32[] ltree
internal int ltree_index
internal Int32[] dtree
internal int dtree_index
internal void Init(int bl, int bd, Int32[] tl, int tl_index, Int32[] td, int td_index)
internal int Process(InflateBlocks blocks, int r)
internal int InflateFast(int bl, int bd, Int32[] tl, int tl_index, Int32[] td, int td_index, InflateBlocks s, ZlibCodec z)
}
internal Ionic.Zlib.InflateManager : object {
private int PRESET_DICT
private int Z_DEFLATED
private InflateManagerMode mode
internal ZlibCodec _codec
internal int method
internal UInt32 computedCheck
internal UInt32 expectedCheck
internal int marker
private bool _handleRfc1950HeaderBytes
internal int wbits
internal InflateBlocks blocks
private Byte[] mark
internal bool HandleRfc1950HeaderBytes
internal bool get_HandleRfc1950HeaderBytes()
internal void set_HandleRfc1950HeaderBytes(bool value)
public void .ctor(bool expectRfc1950HeaderBytes)
internal int Reset()
internal int End()
internal int Initialize(ZlibCodec codec, int w)
internal int Inflate(FlushType flush)
internal int SetDictionary(Byte[] dictionary)
internal int Sync()
internal int SyncPoint(ZlibCodec z)
}
internal Ionic.Zlib.InfTree : object {
private int MANY
private int Z_OK
private int Z_STREAM_END
private int Z_NEED_DICT
private int Z_ERRNO
private int Z_STREAM_ERROR
private int Z_DATA_ERROR
private int Z_MEM_ERROR
private int Z_BUF_ERROR
private int Z_VERSION_ERROR
internal int fixed_bl
internal int fixed_bd
internal int BMAX
internal Int32[] fixed_tl
internal Int32[] fixed_td
internal Int32[] cplens
internal Int32[] cplext
internal Int32[] cpdist
internal Int32[] cpdext
internal Int32[] hn
internal Int32[] v
internal Int32[] c
internal Int32[] r
internal Int32[] u
internal Int32[] x
private int huft_build(Int32[] b, int bindex, int n, int s, Int32[] d, Int32[] e, Int32[] t, Int32[] m, Int32[] hp, Int32[] hn, Int32[] v)
internal int inflate_trees_bits(Int32[] c, Int32[] bb, Int32[] tb, Int32[] hp, ZlibCodec z)
internal int inflate_trees_dynamic(int nl, int nd, Int32[] c, Int32[] bl, Int32[] bd, Int32[] tl, Int32[] td, Int32[] hp, ZlibCodec z)
internal int inflate_trees_fixed(Int32[] bl, Int32[] bd, Int32[][] tl, Int32[][] td, ZlibCodec z)
private void initWorkArea(int vsize)
}
internal Ionic.Zlib.InternalConstants : object {
internal int MAX_BITS
internal int BL_CODES
internal int D_CODES
internal int LITERALS
internal int LENGTH_CODES
internal int L_CODES
internal int MAX_BL_BITS
internal int REP_3_6
internal int REPZ_3_10
internal int REPZ_11_138
}
internal Ionic.Zlib.InternalInflateConstants : object {
internal Int32[] InflateMask
}
public Ionic.Zlib.ParallelDeflateOutputStream : Stream {
private int IO_BUFFER_SIZE_DEFAULT
private int BufferPairsPerCore
private List`1<WorkItem> _pool
private bool _leaveOpen
private bool emitting
private Stream _outStream
private int _maxBufferPairs
private int _bufferSize
private AutoResetEvent _newlyCompressedBlob
private object _outputLock
private bool _isClosed
private bool _firstWriteDone
private int _currentlyFilling
private int _lastFilled
private int _lastWritten
private int _latestCompressed
private int _Crc32
private CRC32 _runningCrc
private object _latestLock
private Queue`1<int> _toWrite
private Queue`1<int> _toFill
private long _totalBytesProcessed
private CompressionLevel _compressLevel
private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _pendingException
private bool _handlingException
private object _eLock
private TraceBits _DesiredTrace
private CompressionStrategy <Strategy>k__BackingField
public CompressionStrategy Strategy
public int MaxBufferPairs
public int BufferSize
public int Crc32
public long BytesProcessed
public bool CanSeek
public bool CanRead
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream stream)
public void .ctor(Stream stream, CompressionLevel level)
public void .ctor(Stream stream, bool leaveOpen)
public void .ctor(Stream stream, CompressionLevel level, bool leaveOpen)
public void .ctor(Stream stream, CompressionLevel level, CompressionStrategy strategy, bool leaveOpen)
public CompressionStrategy get_Strategy()
private void set_Strategy(CompressionStrategy value)
public int get_MaxBufferPairs()
public void set_MaxBufferPairs(int value)
public int get_BufferSize()
public void set_BufferSize(int value)
public int get_Crc32()
public long get_BytesProcessed()
private void _InitializePoolOfWorkItems()
public void Write(Byte[] buffer, int offset, int count)
private void _FlushFinish()
private void _Flush(bool lastInput)
public void Flush()
public void Close()
public void Dispose()
protected void Dispose(bool disposing)
public void Reset(Stream stream)
private void EmitPendingBuffers(bool doAll, bool mustWait)
private void _DeflateOne(object wi)
private bool DeflateOneSegment(WorkItem workitem)
private void TraceOutput(TraceBits bits, string format, Object[] varParams)
public bool get_CanSeek()
public bool get_CanRead()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public int Read(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
}
internal Ionic.Zlib.SharedUtils : object {
public int URShift(int number, int bits)
public int ReadInput(TextReader sourceTextReader, Byte[] target, int start, int count)
internal Byte[] ToByteArray(string sourceString)
internal Char[] ToCharArray(Byte[] byteArray)
}
internal Ionic.Zlib.StaticTree : object {
internal Int16[] lengthAndLiteralsTreeCodes
internal Int16[] distTreeCodes
internal StaticTree Literals
internal StaticTree Distances
internal StaticTree BitLengths
internal Int16[] treeCodes
internal Int32[] extraBits
internal int extraBase
internal int elems
internal int maxLength
private void .ctor(Int16[] treeCodes, Int32[] extraBits, int extraBase, int elems, int maxLength)
}
internal Ionic.Zlib.Tree : object {
internal int Buf_size
private int HEAP_SIZE
internal Int32[] ExtraLengthBits
internal Int32[] ExtraDistanceBits
internal Int32[] extra_blbits
internal SByte[] bl_order
private SByte[] _dist_code
internal SByte[] LengthCode
internal Int32[] LengthBase
internal Int32[] DistanceBase
internal Int16[] dyn_tree
internal int max_code
internal StaticTree staticTree
internal int DistanceCode(int dist)
internal void gen_bitlen(DeflateManager s)
internal void build_tree(DeflateManager s)
internal void gen_codes(Int16[] tree, int max_code, Int16[] bl_count)
internal int bi_reverse(int code, int len)
}
internal Ionic.Zlib.WorkItem : object {
public Byte[] buffer
public Byte[] compressed
public int crc
public int index
public int ordinal
public int inputBytesAvailable
public int compressedBytesAvailable
public ZlibCodec compressor
public void .ctor(int size, CompressionLevel compressLevel, CompressionStrategy strategy, int ix)
}
internal Ionic.Zlib.ZlibBaseStream : Stream {
protected internal ZlibCodec _z
protected internal StreamMode _streamMode
protected internal FlushType _flushMode
protected internal ZlibStreamFlavor _flavor
protected internal CompressionMode _compressionMode
protected internal CompressionLevel _level
protected internal bool _leaveOpen
protected internal Byte[] _workingBuffer
protected internal int _bufferSize
protected internal Byte[] _buf1
protected internal Stream _stream
protected internal CompressionStrategy Strategy
private CRC32 crc
protected internal string _GzipFileName
protected internal string _GzipComment
protected internal DateTime _GzipMtime
protected internal int _gzipHeaderByteCount
private bool nomoreinput
internal int Crc32
protected internal bool _wantCompress
private ZlibCodec z
private Byte[] workingBuffer
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
internal int get_Crc32()
public void .ctor(Stream stream, CompressionMode compressionMode, CompressionLevel level, ZlibStreamFlavor flavor, bool leaveOpen)
protected internal bool get__wantCompress()
private ZlibCodec get_z()
private Byte[] get_workingBuffer()
public void Write(Byte[] buffer, int offset, int count)
private void finish()
private void end()
public void Close()
public void Flush()
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
private string ReadZeroTerminatedString()
private int _ReadAndValidateGzipHeader()
public int Read(Byte[] buffer, int offset, int count)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public void CompressString(string s, Stream compressor)
public void CompressBuffer(Byte[] b, Stream compressor)
public string UncompressString(Byte[] compressed, Stream decompressor)
public Byte[] UncompressBuffer(Byte[] compressed, Stream decompressor)
}
public Ionic.Zlib.ZlibCodec : object {
public Byte[] InputBuffer
public int NextIn
public int AvailableBytesIn
public long TotalBytesIn
public Byte[] OutputBuffer
public int NextOut
public int AvailableBytesOut
public long TotalBytesOut
public string Message
internal DeflateManager dstate
internal InflateManager istate
internal UInt32 _Adler32
public CompressionLevel CompressLevel
public int WindowBits
public CompressionStrategy Strategy
public int Adler32
public int get_Adler32()
public void .ctor(CompressionMode mode)
public int InitializeInflate()
public int InitializeInflate(bool expectRfc1950Header)
public int InitializeInflate(int windowBits)
public int InitializeInflate(int windowBits, bool expectRfc1950Header)
public int Inflate(FlushType flush)
public int EndInflate()
public int SyncInflate()
public int InitializeDeflate()
public int InitializeDeflate(CompressionLevel level)
public int InitializeDeflate(CompressionLevel level, bool wantRfc1950Header)
public int InitializeDeflate(CompressionLevel level, int bits)
public int InitializeDeflate(CompressionLevel level, int bits, bool wantRfc1950Header)
private int _InternalInitializeDeflate(bool wantRfc1950Header)
public int Deflate(FlushType flush)
public int EndDeflate()
public void ResetDeflate()
public int SetDeflateParams(CompressionLevel level, CompressionStrategy strategy)
public int SetDictionary(Byte[] dictionary)
internal void flush_pending()
internal int read_buf(Byte[] buf, int start, int size)
}
public Ionic.Zlib.ZlibConstants : object {
public int WindowBitsMax
public int WindowBitsDefault
public int Z_OK
public int Z_STREAM_END
public int Z_NEED_DICT
public int Z_STREAM_ERROR
public int Z_DATA_ERROR
public int Z_BUF_ERROR
public int WorkingBufferSizeDefault
public int WorkingBufferSizeMin
}
public Ionic.Zlib.ZlibException : Exception {
public void .ctor(string s)
}
public Ionic.Zlib.ZlibStream : Stream {
internal ZlibBaseStream _baseStream
private bool _disposed
public FlushType FlushMode
public int BufferSize
public long TotalIn
public long TotalOut
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream stream, CompressionMode mode)
public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level)
public void .ctor(Stream stream, CompressionMode mode, bool leaveOpen)
public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen)
public FlushType get_FlushMode()
public void set_FlushMode(FlushType value)
public int get_BufferSize()
public void set_BufferSize(int value)
public long get_TotalIn()
public long get_TotalOut()
protected void Dispose(bool disposing)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public void Flush()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public int Read(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
public Byte[] CompressString(string s)
public Byte[] CompressBuffer(Byte[] b)
public string UncompressString(Byte[] compressed)
public Byte[] UncompressBuffer(Byte[] compressed)
}
internal Ionic.Zlib.ZlibStreamFlavor : Enum {
public int value__
public ZlibStreamFlavor ZLIB
public ZlibStreamFlavor DEFLATE
public ZlibStreamFlavor GZIP
}
