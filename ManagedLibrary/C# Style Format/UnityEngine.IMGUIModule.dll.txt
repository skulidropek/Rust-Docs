[StaticAccessorAttribute("GUIEvent", "2")]
[NativeHeaderAttribute("Modules/IMGUI/Event.bindings.h")]
public class UnityEngine.Event : object {
    internal IntPtr m_Ptr;
    private static Event s_Current;
    private static Event s_MasterEvent;
    [NativePropertyAttribute("type", "False", "1")]
public EventType rawType { get; }
    [NativePropertyAttribute("mousePosition", "False", "1")]
public Vector2 mousePosition { get; public set; }
    [NativePropertyAttribute("delta", "False", "1")]
public Vector2 delta { get; public set; }
    [NativePropertyAttribute("pointerType", "False", "1")]
public PointerType pointerType { get; public set; }
    [NativePropertyAttribute("button", "False", "1")]
public int button { get; public set; }
    [NativePropertyAttribute("modifiers", "False", "1")]
public EventModifiers modifiers { get; public set; }
    [NativePropertyAttribute("pressure", "False", "1")]
public float pressure { get; public set; }
    [NativePropertyAttribute("twist", "False", "1")]
public float twist { get; public set; }
    [NativePropertyAttribute("tilt", "False", "1")]
public Vector2 tilt { get; public set; }
    [NativePropertyAttribute("penStatus", "False", "1")]
public PenStatus penStatus { get; public set; }
    [NativePropertyAttribute("clickCount", "False", "1")]
public int clickCount { get; public set; }
    [NativePropertyAttribute("character", "False", "1")]
public char character { get; public set; }
    [NativePropertyAttribute("keycode", "False", "1")]
public KeyCode keyCode { get; public set; }
    [NativePropertyAttribute("displayIndex", "False", "1")]
public int displayIndex { get; public set; }
    public EventType type { get; public set; }
    public string commandName { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);", "True")]
public Ray mouseRay { get; public set; }
    public bool shift { get; public set; }
    public bool control { get; public set; }
    public bool alt { get; public set; }
    public bool command { get; public set; }
    public bool capsLock { get; public set; }
    public bool numeric { get; public set; }
    public bool functionKey { get; }
    public static Event current { get; public set; }
    public bool isKey { get; }
    public bool isMouse { get; }
    public bool isScrollWheel { get; }
    internal bool isDirectManipulationDevice { get; }
    public Event(int displayIndex);
    public Event(Event other);
    public EventType get_rawType();
    public Vector2 get_mousePosition();
    public void set_mousePosition(Vector2 value);
    public Vector2 get_delta();
    public void set_delta(Vector2 value);
    public PointerType get_pointerType();
    public void set_pointerType(PointerType value);
    public int get_button();
    public void set_button(int value);
    public EventModifiers get_modifiers();
    public void set_modifiers(EventModifiers value);
    public float get_pressure();
    public void set_pressure(float value);
    public float get_twist();
    public void set_twist(float value);
    public Vector2 get_tilt();
    public void set_tilt(Vector2 value);
    public PenStatus get_penStatus();
    public void set_penStatus(PenStatus value);
    public int get_clickCount();
    public void set_clickCount(int value);
    public char get_character();
    public void set_character(char value);
    public KeyCode get_keyCode();
    public void set_keyCode(KeyCode value);
    public int get_displayIndex();
    public void set_displayIndex(int value);
    [FreeFunctionAttribute("GUIEvent::GetType")]
public EventType get_type();
    [FreeFunctionAttribute("GUIEvent::SetType")]
public void set_type(EventType value);
    [FreeFunctionAttribute("GUIEvent::GetCommandName")]
public string get_commandName();
    [FreeFunctionAttribute("GUIEvent::SetCommandName")]
public void set_commandName(string value);
    [NativeMethodAttribute("Use")]
private void Internal_Use();
    [FreeFunctionAttribute("GUIEvent::Internal_Create")]
private static IntPtr Internal_Create(int displayIndex);
    [FreeFunctionAttribute("GUIEvent::Internal_Destroy")]
private static void Internal_Destroy(IntPtr ptr);
    [FreeFunctionAttribute("GUIEvent::Internal_Copy")]
private static IntPtr Internal_Copy(IntPtr otherPtr);
    [FreeFunctionAttribute("GUIEvent::GetTypeForControl")]
public EventType GetTypeForControl(int controlID);
    [VisibleToOtherModulesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[FreeFunctionAttribute("GUIEvent::CopyFromPtr")]
internal void CopyFromPtr(IntPtr ptr);
    public static bool PopEvent(Event outEvent);
    internal static void QueueEvent(Event outEvent);
    public static int GetEventCount();
    internal static void ClearEvents();
    private static void Internal_SetNativeEvent(IntPtr ptr);
    [RequiredByNativeCodeAttribute]
internal static void Internal_MakeMasterEventCurrent(int displayIndex);
    [VisibleToOtherModulesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static int GetDoubleClickTime();
    protected virtual override void Finalize();
    internal static void CleanupRoots();
    internal void CopyFrom(Event e);
    public Ray get_mouseRay();
    public void set_mouseRay(Ray value);
    public bool get_shift();
    public void set_shift(bool value);
    public bool get_control();
    public void set_control(bool value);
    public bool get_alt();
    public void set_alt(bool value);
    public bool get_command();
    public void set_command(bool value);
    public bool get_capsLock();
    public void set_capsLock(bool value);
    public bool get_numeric();
    public void set_numeric(bool value);
    public bool get_functionKey();
    public static Event get_current();
    public static void set_current(Event value);
    public bool get_isKey();
    public bool get_isMouse();
    public bool get_isScrollWheel();
    internal bool get_isDirectManipulationDevice();
    public static Event KeyboardEvent(string key);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public void Use();
    private void get_mousePosition_Injected(Vector2& ret);
    private void set_mousePosition_Injected(Vector2& value);
    private void get_delta_Injected(Vector2& ret);
    private void set_delta_Injected(Vector2& value);
    private void get_tilt_Injected(Vector2& ret);
    private void set_tilt_Injected(Vector2& value);
}
internal static class UnityEngine.EventCommandNames : object {
    public static string Cut;
    public static string Copy;
    public static string Paste;
    public static string SelectAll;
    public static string DeselectAll;
    public static string InvertSelection;
    public static string Duplicate;
    public static string Rename;
    public static string Delete;
    public static string SoftDelete;
    public static string Find;
    public static string SelectChildren;
    public static string SelectPrefabRoot;
    public static string UndoRedoPerformed;
    public static string OnLostFocus;
    public static string NewKeyboardFocus;
    public static string ModifierKeysChanged;
    public static string EyeDropperUpdate;
    public static string EyeDropperClicked;
    public static string EyeDropperCancelled;
    public static string ColorPickerChanged;
    public static string FrameSelected;
    public static string FrameSelectedWithLock;
}
internal class UnityEngine.EventInterests : ValueType {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <wantsMouseMove>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <wantsMouseEnterLeaveWindow>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <wantsLessLayoutEvents>k__BackingField;
    public bool wantsMouseMove { get; public set; }
    public bool wantsMouseEnterLeaveWindow { get; public set; }
    public bool wantsLessLayoutEvents { get; public set; }
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public bool get_wantsMouseMove();
    [CompilerGeneratedAttribute]
public void set_wantsMouseMove(bool value);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public bool get_wantsMouseEnterLeaveWindow();
    [CompilerGeneratedAttribute]
public void set_wantsMouseEnterLeaveWindow(bool value);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public bool get_wantsLessLayoutEvents();
    [CompilerGeneratedAttribute]
public void set_wantsLessLayoutEvents(bool value);
    public bool WantsEvent(EventType type);
    public bool WantsLayoutPass(EventType type);
}
[FlagsAttribute]
public enum UnityEngine.EventModifiers : Enum {
    public int value__;
    public static EventModifiers None;
    public static EventModifiers Shift;
    public static EventModifiers Control;
    public static EventModifiers Alt;
    public static EventModifiers Command;
    public static EventModifiers Numeric;
    public static EventModifiers CapsLock;
    public static EventModifiers FunctionKey;
}
public enum UnityEngine.EventType : Enum {
    public int value__;
    public static EventType MouseDown;
    public static EventType MouseUp;
    public static EventType MouseMove;
    public static EventType MouseDrag;
    public static EventType KeyDown;
    public static EventType KeyUp;
    public static EventType ScrollWheel;
    public static EventType Repaint;
    public static EventType Layout;
    public static EventType DragUpdated;
    public static EventType DragPerform;
    public static EventType DragExited;
    public static EventType Ignore;
    public static EventType Used;
    public static EventType ValidateCommand;
    public static EventType ExecuteCommand;
    public static EventType ContextClick;
    public static EventType MouseEnterWindow;
    public static EventType MouseLeaveWindow;
    public static EventType TouchDown;
    public static EventType TouchUp;
    public static EventType TouchMove;
    public static EventType TouchEnter;
    public static EventType TouchLeave;
    public static EventType TouchStationary;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use MouseDown instead (UnityUpgradable) -> MouseDown", "True")]
public static EventType mouseDown;
    [ObsoleteAttribute("Use MouseUp instead (UnityUpgradable) -> MouseUp", "True")]
[EditorBrowsableAttribute("1")]
public static EventType mouseUp;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use MouseMove instead (UnityUpgradable) -> MouseMove", "True")]
public static EventType mouseMove;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use MouseDrag instead (UnityUpgradable) -> MouseDrag", "True")]
public static EventType mouseDrag;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use KeyDown instead (UnityUpgradable) -> KeyDown", "True")]
public static EventType keyDown;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use KeyUp instead (UnityUpgradable) -> KeyUp", "True")]
public static EventType keyUp;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use ScrollWheel instead (UnityUpgradable) -> ScrollWheel", "True")]
public static EventType scrollWheel;
    [ObsoleteAttribute("Use Repaint instead (UnityUpgradable) -> Repaint", "True")]
[EditorBrowsableAttribute("1")]
public static EventType repaint;
    [ObsoleteAttribute("Use Layout instead (UnityUpgradable) -> Layout", "True")]
[EditorBrowsableAttribute("1")]
public static EventType layout;
    [ObsoleteAttribute("Use DragUpdated instead (UnityUpgradable) -> DragUpdated", "True")]
[EditorBrowsableAttribute("1")]
public static EventType dragUpdated;
    [ObsoleteAttribute("Use DragPerform instead (UnityUpgradable) -> DragPerform", "True")]
[EditorBrowsableAttribute("1")]
public static EventType dragPerform;
    [ObsoleteAttribute("Use Ignore instead (UnityUpgradable) -> Ignore", "True")]
[EditorBrowsableAttribute("1")]
public static EventType ignore;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use Used instead (UnityUpgradable) -> Used", "True")]
public static EventType used;
}
public class UnityEngine.ExitGUIException : Exception {
    internal ExitGUIException(string message);
}
public enum UnityEngine.FocusType : Enum {
    public int value__;
    [ObsoleteAttribute("FocusType.Native now behaves the same as FocusType.Passive in all OS cases. (UnityUpgradable) -> Passive", "False")]
public static FocusType Native;
    public static FocusType Keyboard;
    public static FocusType Passive;
}
[NativeHeaderAttribute("Modules/IMGUI/GUI.bindings.h")]
[NativeHeaderAttribute("Modules/IMGUI/GUISkin.bindings.h")]
public class UnityEngine.GUI : object {
    private static float s_ScrollStepSize;
    private static int s_ScrollControlId;
    private static int s_HotTextField;
    private static int s_BoxHash;
    private static int s_ButonHash;
    private static int s_RepeatButtonHash;
    private static int s_ToggleHash;
    private static int s_ButtonGridHash;
    private static int s_SliderHash;
    private static int s_BeginGroupHash;
    private static int s_ScrollviewHash;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static int <scrollTroughSide>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static DateTime <nextScrollStepTime>k__BackingField;
    private static GUISkin s_Skin;
    internal static Rect s_ToolTipRect;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static GenericStack <scrollViewStates>k__BackingField;
    public static Color color { get; public set; }
    public static Color backgroundColor { get; public set; }
    public static Color contentColor { get; public set; }
    public static bool changed { get; public set; }
    public static bool enabled { get; public set; }
    public static int depth { get; public set; }
    internal static bool usePageScrollbars { get; }
    internal static bool isInsideList { get; internal set; }
    internal static Material blendMaterial { get; }
    internal static Material blitMaterial { get; }
    internal static Material roundedRectMaterial { get; }
    internal static Material roundedRectWithColorPerBorderMaterial { get; }
    internal static int scrollTroughSide { get; internal set; }
    internal static DateTime nextScrollStepTime { get; internal set; }
    public static GUISkin skin { get; public set; }
    public static Matrix4x4 matrix { get; public set; }
    public static string tooltip { get; public set; }
    protected static string mouseTooltip { get; }
    protected static Rect tooltipRect { get; protected set; }
    internal static GenericStack scrollViewStates { get; internal set; }
    private static GUI();
    public static Color get_color();
    public static void set_color(Color value);
    public static Color get_backgroundColor();
    public static void set_backgroundColor(Color value);
    public static Color get_contentColor();
    public static void set_contentColor(Color value);
    public static bool get_changed();
    public static void set_changed(bool value);
    public static bool get_enabled();
    public static void set_enabled(bool value);
    public static int get_depth();
    public static void set_depth(int value);
    internal static bool get_usePageScrollbars();
    internal static bool get_isInsideList();
    internal static void set_isInsideList(bool value);
    [FreeFunctionAttribute("GetGUIBlendMaterial")]
internal static Material get_blendMaterial();
    [FreeFunctionAttribute("GetGUIBlitMaterial")]
internal static Material get_blitMaterial();
    [FreeFunctionAttribute("GetGUIRoundedRectMaterial")]
internal static Material get_roundedRectMaterial();
    [FreeFunctionAttribute("GetGUIRoundedRectWithColorPerBorderMaterial")]
internal static Material get_roundedRectWithColorPerBorderMaterial();
    internal static void GrabMouseControl(int id);
    internal static bool HasMouseControl(int id);
    internal static void ReleaseMouseControl();
    [FreeFunctionAttribute("GetGUIState().SetNameOfNextControl")]
public static void SetNextControlName(string name);
    [FreeFunctionAttribute("GetGUIState().GetNameOfFocusedControl")]
public static string GetNameOfFocusedControl();
    [FreeFunctionAttribute("GetGUIState().FocusKeyboardControl")]
public static void FocusControl(string name);
    internal static void InternalRepaintEditorWindow();
    private static string Internal_GetTooltip();
    private static void Internal_SetTooltip(string value);
    private static string Internal_GetMouseTooltip();
    private static Rect Internal_DoModalWindow(int id, int instanceID, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, object skin);
    private static Rect Internal_DoWindow(int id, int instanceID, Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style, object skin, bool forceRectOnLayout);
    public static void DragWindow(Rect position);
    public static void BringWindowToFront(int windowID);
    public static void BringWindowToBack(int windowID);
    public static void FocusWindow(int windowID);
    public static void UnfocusWindow();
    private static void Internal_BeginWindows();
    private static void Internal_EndWindows();
    internal static string Internal_Concatenate(GUIContent first, GUIContent second);
    [CompilerGeneratedAttribute]
internal static int get_scrollTroughSide();
    [CompilerGeneratedAttribute]
internal static void set_scrollTroughSide(int value);
    [CompilerGeneratedAttribute]
internal static DateTime get_nextScrollStepTime();
    [CompilerGeneratedAttribute]
internal static void set_nextScrollStepTime(DateTime value);
    public static void set_skin(GUISkin value);
    public static GUISkin get_skin();
    internal static void DoSetSkin(GUISkin newSkin);
    internal static void CleanupRoots();
    public static Matrix4x4 get_matrix();
    public static void set_matrix(Matrix4x4 value);
    public static string get_tooltip();
    public static void set_tooltip(string value);
    protected static string get_mouseTooltip();
    protected static Rect get_tooltipRect();
    protected static void set_tooltipRect(Rect value);
    public static void Label(Rect position, string text);
    public static void Label(Rect position, Texture image);
    public static void Label(Rect position, GUIContent content);
    public static void Label(Rect position, string text, GUIStyle style);
    public static void Label(Rect position, Texture image, GUIStyle style);
    public static void Label(Rect position, GUIContent content, GUIStyle style);
    public static void DrawTexture(Rect position, Texture image);
    public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode);
    public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend);
    public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect);
    public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, float borderWidth, float borderRadius);
    public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, Vector4 borderWidths, float borderRadius);
    public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, Vector4 borderWidths, Vector4 borderRadiuses);
    internal static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, Vector4 borderWidths, Vector4 borderRadiuses, bool drawSmoothCorners);
    internal static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color leftColor, Color topColor, Color rightColor, Color bottomColor, Vector4 borderWidths, Vector4 borderRadiuses);
    internal static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color leftColor, Color topColor, Color rightColor, Color bottomColor, Vector4 borderWidths, Vector4 borderRadiuses, bool drawSmoothCorners);
    internal static bool CalculateScaledTextureRects(Rect position, ScaleMode scaleMode, float imageAspect, Rect& outScreenRect, Rect& outSourceRect);
    public static void DrawTextureWithTexCoords(Rect position, Texture image, Rect texCoords);
    public static void DrawTextureWithTexCoords(Rect position, Texture image, Rect texCoords, bool alphaBlend);
    public static void Box(Rect position, string text);
    public static void Box(Rect position, Texture image);
    public static void Box(Rect position, GUIContent content);
    public static void Box(Rect position, string text, GUIStyle style);
    public static void Box(Rect position, Texture image, GUIStyle style);
    public static void Box(Rect position, GUIContent content, GUIStyle style);
    public static bool Button(Rect position, string text);
    public static bool Button(Rect position, Texture image);
    public static bool Button(Rect position, GUIContent content);
    public static bool Button(Rect position, string text, GUIStyle style);
    public static bool Button(Rect position, Texture image, GUIStyle style);
    public static bool Button(Rect position, GUIContent content, GUIStyle style);
    internal static bool Button(Rect position, int id, GUIContent content, GUIStyle style);
    public static bool RepeatButton(Rect position, string text);
    public static bool RepeatButton(Rect position, Texture image);
    public static bool RepeatButton(Rect position, GUIContent content);
    public static bool RepeatButton(Rect position, string text, GUIStyle style);
    public static bool RepeatButton(Rect position, Texture image, GUIStyle style);
    public static bool RepeatButton(Rect position, GUIContent content, GUIStyle style);
    private static bool DoRepeatButton(Rect position, GUIContent content, GUIStyle style, FocusType focusType);
    public static string TextField(Rect position, string text);
    public static string TextField(Rect position, string text, int maxLength);
    public static string TextField(Rect position, string text, GUIStyle style);
    public static string TextField(Rect position, string text, int maxLength, GUIStyle style);
    public static string PasswordField(Rect position, string password, char maskChar);
    public static string PasswordField(Rect position, string password, char maskChar, int maxLength);
    public static string PasswordField(Rect position, string password, char maskChar, GUIStyle style);
    public static string PasswordField(Rect position, string password, char maskChar, int maxLength, GUIStyle style);
    internal static string PasswordFieldGetStrToShow(string password, char maskChar);
    public static string TextArea(Rect position, string text);
    public static string TextArea(Rect position, string text, int maxLength);
    public static string TextArea(Rect position, string text, GUIStyle style);
    public static string TextArea(Rect position, string text, int maxLength, GUIStyle style);
    internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style);
    internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText);
    internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar);
    private static void HandleTextFieldEventForTouchscreen(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar, TextEditor editor);
    private static void HandleTextFieldEventForDesktop(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, TextEditor editor);
    private static void HandleTextFieldEventForDesktopWithForcedKeyboard(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, TextEditor editor);
    public static bool Toggle(Rect position, bool value, string text);
    public static bool Toggle(Rect position, bool value, Texture image);
    public static bool Toggle(Rect position, bool value, GUIContent content);
    public static bool Toggle(Rect position, bool value, string text, GUIStyle style);
    public static bool Toggle(Rect position, bool value, Texture image, GUIStyle style);
    public static bool Toggle(Rect position, bool value, GUIContent content, GUIStyle style);
    public static bool Toggle(Rect position, int id, bool value, GUIContent content, GUIStyle style);
    public static int Toolbar(Rect position, int selected, String[] texts);
    public static int Toolbar(Rect position, int selected, Texture[] images);
    public static int Toolbar(Rect position, int selected, GUIContent[] contents);
    public static int Toolbar(Rect position, int selected, String[] texts, GUIStyle style);
    public static int Toolbar(Rect position, int selected, Texture[] images, GUIStyle style);
    public static int Toolbar(Rect position, int selected, GUIContent[] contents, GUIStyle style);
    public static int Toolbar(Rect position, int selected, GUIContent[] contents, GUIStyle style, ToolbarButtonSize buttonSize);
    internal static int Toolbar(Rect position, int selected, GUIContent[] contents, String[] controlNames, GUIStyle style, ToolbarButtonSize buttonSize, Boolean[] contentsEnabled);
    public static int SelectionGrid(Rect position, int selected, String[] texts, int xCount);
    public static int SelectionGrid(Rect position, int selected, Texture[] images, int xCount);
    public static int SelectionGrid(Rect position, int selected, GUIContent[] content, int xCount);
    public static int SelectionGrid(Rect position, int selected, String[] texts, int xCount, GUIStyle style);
    public static int SelectionGrid(Rect position, int selected, Texture[] images, int xCount, GUIStyle style);
    public static int SelectionGrid(Rect position, int selected, GUIContent[] contents, int xCount, GUIStyle style);
    internal static void FindStyles(GUIStyle& style, GUIStyle& firstStyle, GUIStyle& midStyle, GUIStyle& lastStyle, string first, string mid, string last);
    internal static int CalcTotalHorizSpacing(int xCount, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle);
    internal static bool DoControl(Rect position, int id, bool on, bool hover, GUIContent content, GUIStyle style);
    private static void DoLabel(Rect position, GUIContent content, GUIStyle style);
    internal static bool DoToggle(Rect position, int id, bool value, GUIContent content, GUIStyle style);
    internal static bool DoButton(Rect position, int id, GUIContent content, GUIStyle style);
    private static Rect[] CalcGridRectsFixedWidthFixedMargin(Rect position, int itemCount, int itemsPerRow, float elemWidth, float elemHeight, float spacingHorizontal, float spacingVertical);
    internal static int DoCustomSelectionGrid(Rect position, int selected, int itemCount, CustomSelectionGridItemGUI itemGUI, int itemsPerRow, GUIStyle style);
    private static int DoButtonGrid(Rect position, int selected, GUIContent[] contents, String[] controlNames, int itemsPerRow, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle, ToolbarButtonSize buttonSize, Boolean[] contentsEnabled);
    private static Rect[] CalcGridRects(Rect position, GUIContent[] contents, int xCount, float elemWidth, float elemHeight, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle, ToolbarButtonSize buttonSize);
    public static float HorizontalSlider(Rect position, float value, float leftValue, float rightValue);
    public static float HorizontalSlider(Rect position, float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb);
    public static float HorizontalSlider(Rect position, float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUIStyle thumbExtent);
    public static float VerticalSlider(Rect position, float value, float topValue, float bottomValue);
    public static float VerticalSlider(Rect position, float value, float topValue, float bottomValue, GUIStyle slider, GUIStyle thumb);
    public static float VerticalSlider(Rect position, float value, float topValue, float bottomValue, GUIStyle slider, GUIStyle thumb, GUIStyle thumbExtent);
    public static float Slider(Rect position, float value, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id, GUIStyle thumbExtent);
    public static float HorizontalScrollbar(Rect position, float value, float size, float leftValue, float rightValue);
    public static float HorizontalScrollbar(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle style);
    internal static bool ScrollerRepeatButton(int scrollerID, Rect rect, GUIStyle style);
    public static float VerticalScrollbar(Rect position, float value, float size, float topValue, float bottomValue);
    public static float VerticalScrollbar(Rect position, float value, float size, float topValue, float bottomValue, GUIStyle style);
    internal static float Scroller(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUIStyle leftButton, GUIStyle rightButton, bool horiz);
    public static void BeginClip(Rect position, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset);
    public static void BeginGroup(Rect position);
    public static void BeginGroup(Rect position, string text);
    public static void BeginGroup(Rect position, Texture image);
    public static void BeginGroup(Rect position, GUIContent content);
    public static void BeginGroup(Rect position, GUIStyle style);
    public static void BeginGroup(Rect position, string text, GUIStyle style);
    public static void BeginGroup(Rect position, Texture image, GUIStyle style);
    public static void BeginGroup(Rect position, GUIContent content, GUIStyle style);
    internal static void BeginGroup(Rect position, GUIContent content, GUIStyle style, Vector2 scrollOffset);
    public static void EndGroup();
    public static void BeginClip(Rect position);
    public static void EndClip();
    [CompilerGeneratedAttribute]
internal static GenericStack get_scrollViewStates();
    [CompilerGeneratedAttribute]
internal static void set_scrollViewStates(GenericStack value);
    public static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect);
    public static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical);
    public static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar);
    public static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar);
    protected static Vector2 DoBeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background);
    internal static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background);
    public static void EndScrollView();
    public static void EndScrollView(bool handleScrollWheel);
    internal static ScrollViewState GetTopScrollView();
    public static void ScrollTo(Rect position);
    public static bool ScrollTowards(Rect position, float maxDelta);
    public static Rect Window(int id, Rect clientRect, WindowFunction func, string text);
    public static Rect Window(int id, Rect clientRect, WindowFunction func, Texture image);
    public static Rect Window(int id, Rect clientRect, WindowFunction func, GUIContent content);
    public static Rect Window(int id, Rect clientRect, WindowFunction func, string text, GUIStyle style);
    public static Rect Window(int id, Rect clientRect, WindowFunction func, Texture image, GUIStyle style);
    public static Rect Window(int id, Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style);
    public static Rect ModalWindow(int id, Rect clientRect, WindowFunction func, string text);
    public static Rect ModalWindow(int id, Rect clientRect, WindowFunction func, Texture image);
    public static Rect ModalWindow(int id, Rect clientRect, WindowFunction func, GUIContent content);
    public static Rect ModalWindow(int id, Rect clientRect, WindowFunction func, string text, GUIStyle style);
    public static Rect ModalWindow(int id, Rect clientRect, WindowFunction func, Texture image, GUIStyle style);
    public static Rect ModalWindow(int id, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style);
    private static Rect DoWindow(int id, Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style, GUISkin skin, bool forceRectOnLayout);
    private static Rect DoModalWindow(int id, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, GUISkin skin);
    [RequiredByNativeCodeAttribute]
internal static void CallWindowDelegate(WindowFunction func, int id, int instanceID, GUISkin _skin, int forceRect, float width, float height, GUIStyle style);
    public static void DragWindow();
    internal static void BeginWindows(int skinMode, int editorWindowInstanceID);
    internal static void EndWindows();
    private static void get_color_Injected(Color& ret);
    private static void set_color_Injected(Color& value);
    private static void get_backgroundColor_Injected(Color& ret);
    private static void set_backgroundColor_Injected(Color& value);
    private static void get_contentColor_Injected(Color& ret);
    private static void set_contentColor_Injected(Color& value);
    private static void Internal_DoModalWindow_Injected(int id, int instanceID, Rect& clientRect, WindowFunction func, GUIContent content, GUIStyle style, object skin, Rect& ret);
    private static void Internal_DoWindow_Injected(int id, int instanceID, Rect& clientRect, WindowFunction func, GUIContent title, GUIStyle style, object skin, bool forceRectOnLayout, Rect& ret);
    private static void DragWindow_Injected(Rect& position);
}
internal class UnityEngine.GUIAspectSizer : GUILayoutEntry {
    private float aspect;
    public GUIAspectSizer(float aspect, GUILayoutOption[] options);
    public virtual void CalcHeight();
}
[NativeHeaderAttribute("Modules/IMGUI/GUIState.h")]
[NativeHeaderAttribute("Modules/IMGUI/GUIClip.h")]
internal class UnityEngine.GUIClip : object {
    internal static bool enabled { get; }
    internal static Rect visibleRect { get; }
    internal static Rect topmostRect { get; }
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.GetEnabled")]
internal static bool get_enabled();
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.GetVisibleRect")]
internal static Rect get_visibleRect();
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.GetTopMostPhysicalRect")]
internal static Rect get_topmostRect();
    internal static void Internal_Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset);
    internal static void Internal_Pop();
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.GetCount")]
internal static int Internal_GetCount();
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.GetTopRect")]
internal static Rect GetTopRect();
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.Unclip")]
private static Vector2 Unclip_Vector2(Vector2 pos);
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.Unclip")]
private static Rect Unclip_Rect(Rect rect);
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.Clip")]
private static Vector2 Clip_Vector2(Vector2 absolutePos);
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.Clip")]
private static Rect Internal_Clip_Rect(Rect absoluteRect);
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.UnclipToWindow")]
private static Vector2 UnclipToWindow_Vector2(Vector2 pos);
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.UnclipToWindow")]
private static Rect UnclipToWindow_Rect(Rect rect);
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.ClipToWindow")]
private static Vector2 ClipToWindow_Vector2(Vector2 absolutePos);
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.ClipToWindow")]
private static Rect ClipToWindow_Rect(Rect absoluteRect);
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.GetAbsoluteMousePosition")]
private static Vector2 Internal_GetAbsoluteMousePosition();
    internal static void Reapply();
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.GetUserMatrix")]
internal static Matrix4x4 GetMatrix();
    internal static void SetMatrix(Matrix4x4 m);
    [FreeFunctionAttribute("GetGUIState().m_CanvasGUIState.m_GUIClipState.GetParentTransform")]
internal static Matrix4x4 GetParentMatrix();
    internal static void Internal_PushParentClip(Matrix4x4 objectTransform, Rect clipRect);
    internal static void Internal_PushParentClip(Matrix4x4 renderTransform, Matrix4x4 inputTransform, Rect clipRect);
    internal static void Internal_PopParentClip();
    internal static void Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset);
    internal static void Pop();
    public static Vector2 Unclip(Vector2 pos);
    public static Rect Unclip(Rect rect);
    public static Vector2 Clip(Vector2 absolutePos);
    public static Rect Clip(Rect absoluteRect);
    public static Vector2 UnclipToWindow(Vector2 pos);
    public static Rect UnclipToWindow(Rect rect);
    public static Vector2 ClipToWindow(Vector2 absolutePos);
    public static Rect ClipToWindow(Rect absoluteRect);
    public static Vector2 GetAbsoluteMousePosition();
    private static void get_visibleRect_Injected(Rect& ret);
    private static void get_topmostRect_Injected(Rect& ret);
    private static void Internal_Push_Injected(Rect& screenRect, Vector2& scrollOffset, Vector2& renderOffset, bool resetOffset);
    private static void GetTopRect_Injected(Rect& ret);
    private static void Unclip_Vector2_Injected(Vector2& pos, Vector2& ret);
    private static void Unclip_Rect_Injected(Rect& rect, Rect& ret);
    private static void Clip_Vector2_Injected(Vector2& absolutePos, Vector2& ret);
    private static void Internal_Clip_Rect_Injected(Rect& absoluteRect, Rect& ret);
    private static void UnclipToWindow_Vector2_Injected(Vector2& pos, Vector2& ret);
    private static void UnclipToWindow_Rect_Injected(Rect& rect, Rect& ret);
    private static void ClipToWindow_Vector2_Injected(Vector2& absolutePos, Vector2& ret);
    private static void ClipToWindow_Rect_Injected(Rect& absoluteRect, Rect& ret);
    private static void Internal_GetAbsoluteMousePosition_Injected(Vector2& ret);
    private static void GetMatrix_Injected(Matrix4x4& ret);
    private static void SetMatrix_Injected(Matrix4x4& m);
    private static void GetParentMatrix_Injected(Matrix4x4& ret);
    private static void Internal_PushParentClip_Injected(Matrix4x4& renderTransform, Matrix4x4& inputTransform, Rect& clipRect);
}
[RequiredByNativeCodeAttribute]
[NativeHeaderAttribute("Modules/IMGUI/GUIContent.h")]
public class UnityEngine.GUIContent : object {
    [SerializeField]
private string m_Text;
    [SerializeField]
private Texture m_Image;
    [SerializeField]
private string m_Tooltip;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action OnTextChanged;
    private static GUIContent s_Text;
    private static GUIContent s_Image;
    private static GUIContent s_TextImage;
    public static GUIContent none;
    public string text { get; public set; }
    public Texture image { get; public set; }
    public string tooltip { get; public set; }
    internal int hash { get; }
    public GUIContent(string text);
    public GUIContent(Texture image);
    public GUIContent(string text, Texture image);
    public GUIContent(string text, string tooltip);
    public GUIContent(Texture image, string tooltip);
    public GUIContent(string text, Texture image, string tooltip);
    public GUIContent(GUIContent src);
    private static GUIContent();
    [CompilerGeneratedAttribute]
internal void add_OnTextChanged(Action value);
    [CompilerGeneratedAttribute]
internal void remove_OnTextChanged(Action value);
    public string get_text();
    public void set_text(string value);
    public Texture get_image();
    public void set_image(Texture value);
    public string get_tooltip();
    public void set_tooltip(string value);
    internal int get_hash();
    internal static GUIContent Temp(string t);
    internal static GUIContent Temp(string t, string tooltip);
    internal static GUIContent Temp(Texture i);
    internal static GUIContent Temp(Texture i, string tooltip);
    internal static GUIContent Temp(string t, Texture i);
    internal static void ClearStaticCache();
    internal static GUIContent[] Temp(String[] texts);
    internal static GUIContent[] Temp(Texture[] images);
    public virtual string ToString();
}
[NativeHeaderAttribute("Modules/IMGUI/GUIDebugger.bindings.h")]
internal class UnityEngine.GUIDebugger : object {
    [NativeConditionalAttribute("UNITY_EDITOR")]
public static bool active { get; }
    [NativeConditionalAttribute("UNITY_EDITOR")]
public static void LogLayoutEntry(Rect rect, int left, int right, int top, int bottom, GUIStyle style);
    [NativeConditionalAttribute("UNITY_EDITOR")]
public static void LogLayoutGroupEntry(Rect rect, int left, int right, int top, int bottom, GUIStyle style, bool isVertical);
    [NativeConditionalAttribute("UNITY_EDITOR")]
[StaticAccessorAttribute("GetGUIDebuggerManager()", "0")]
[NativeMethodAttribute("LogEndGroup")]
public static void LogLayoutEndGroup();
    [StaticAccessorAttribute("GetGUIDebuggerManager()", "0")]
[NativeConditionalAttribute("UNITY_EDITOR")]
public static void LogBeginProperty(string targetTypeAssemblyQualifiedName, string path, Rect position);
    [StaticAccessorAttribute("GetGUIDebuggerManager()", "0")]
[NativeConditionalAttribute("UNITY_EDITOR")]
public static void LogEndProperty();
    public static bool get_active();
    private static void LogLayoutEntry_Injected(Rect& rect, int left, int right, int top, int bottom, GUIStyle style);
    private static void LogLayoutGroupEntry_Injected(Rect& rect, int left, int right, int top, int bottom, GUIStyle style, bool isVertical);
    private static void LogBeginProperty_Injected(string targetTypeAssemblyQualifiedName, string path, Rect& position);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("GUIElement has been removed. Consider using https://docs.unity3d.com/ScriptReference/UIElements.Image.html, https://docs.unity3d.com/ScriptReference/UIElements.TextElement.html or TextMeshPro instead.", "True")]
[ExcludeFromObjectFactoryAttribute]
[ExcludeFromPresetAttribute]
public class UnityEngine.GUIElement : object {
    private static void FeatureRemoved();
    [ObsoleteAttribute("GUIElement has been removed. Consider using https://docs.unity3d.com/ScriptReference/UIElements.Image.html, https://docs.unity3d.com/ScriptReference/UIElements.TextElement.html or TextMeshPro instead.", "True")]
public bool HitTest(Vector3 screenPosition);
    [ObsoleteAttribute("GUIElement has been removed. Consider using https://docs.unity3d.com/ScriptReference/UIElements.Image.html, https://docs.unity3d.com/ScriptReference/UIElements.TextElement.html or TextMeshPro instead.", "True")]
public bool HitTest(Vector3 screenPosition, Camera camera);
    [ObsoleteAttribute("GUIElement has been removed. Consider using https://docs.unity3d.com/ScriptReference/UIElements.Image.html, https://docs.unity3d.com/ScriptReference/UIElements.TextElement.html or TextMeshPro instead.", "True")]
public Rect GetScreenRect(Camera camera);
    [ObsoleteAttribute("GUIElement has been removed. Consider using https://docs.unity3d.com/ScriptReference/UIElements.Image.html, https://docs.unity3d.com/ScriptReference/UIElements.TextElement.html or TextMeshPro instead.", "True")]
public Rect GetScreenRect();
}
internal class UnityEngine.GUIGridSizer : GUILayoutEntry {
    private int m_Count;
    private int m_XCount;
    private float m_MinButtonWidth;
    private float m_MaxButtonWidth;
    private float m_MinButtonHeight;
    private float m_MaxButtonHeight;
    private int rows { get; }
    private GUIGridSizer(GUIContent[] contents, int xCount, GUIStyle buttonStyle, GUILayoutOption[] options);
    public static Rect GetRect(GUIContent[] contents, int xCount, GUIStyle style, GUILayoutOption[] options);
    private int get_rows();
}
[ObsoleteAttribute("GUILayer has been removed.", "True")]
[ExcludeFromPresetAttribute]
[ExcludeFromObjectFactoryAttribute]
[EditorBrowsableAttribute("1")]
public class UnityEngine.GUILayer : object {
    [ObsoleteAttribute("GUILayer has been removed.", "True")]
public GUIElement HitTest(Vector3 screenPosition);
}
public class UnityEngine.GUILayout : object {
    public static void Label(Texture image, GUILayoutOption[] options);
    public static void Label(string text, GUILayoutOption[] options);
    public static void Label(GUIContent content, GUILayoutOption[] options);
    public static void Label(Texture image, GUIStyle style, GUILayoutOption[] options);
    public static void Label(string text, GUIStyle style, GUILayoutOption[] options);
    public static void Label(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    private static void DoLabel(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    public static void Box(Texture image, GUILayoutOption[] options);
    public static void Box(string text, GUILayoutOption[] options);
    public static void Box(GUIContent content, GUILayoutOption[] options);
    public static void Box(Texture image, GUIStyle style, GUILayoutOption[] options);
    public static void Box(string text, GUIStyle style, GUILayoutOption[] options);
    public static void Box(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    private static void DoBox(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    public static bool Button(Texture image, GUILayoutOption[] options);
    public static bool Button(string text, GUILayoutOption[] options);
    public static bool Button(GUIContent content, GUILayoutOption[] options);
    public static bool Button(Texture image, GUIStyle style, GUILayoutOption[] options);
    public static bool Button(string text, GUIStyle style, GUILayoutOption[] options);
    public static bool Button(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    private static bool DoButton(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    public static bool RepeatButton(Texture image, GUILayoutOption[] options);
    public static bool RepeatButton(string text, GUILayoutOption[] options);
    public static bool RepeatButton(GUIContent content, GUILayoutOption[] options);
    public static bool RepeatButton(Texture image, GUIStyle style, GUILayoutOption[] options);
    public static bool RepeatButton(string text, GUIStyle style, GUILayoutOption[] options);
    public static bool RepeatButton(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    private static bool DoRepeatButton(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    public static string TextField(string text, GUILayoutOption[] options);
    public static string TextField(string text, int maxLength, GUILayoutOption[] options);
    public static string TextField(string text, GUIStyle style, GUILayoutOption[] options);
    public static string TextField(string text, int maxLength, GUIStyle style, GUILayoutOption[] options);
    public static string PasswordField(string password, char maskChar, GUILayoutOption[] options);
    public static string PasswordField(string password, char maskChar, int maxLength, GUILayoutOption[] options);
    public static string PasswordField(string password, char maskChar, GUIStyle style, GUILayoutOption[] options);
    public static string PasswordField(string password, char maskChar, int maxLength, GUIStyle style, GUILayoutOption[] options);
    public static string TextArea(string text, GUILayoutOption[] options);
    public static string TextArea(string text, int maxLength, GUILayoutOption[] options);
    public static string TextArea(string text, GUIStyle style, GUILayoutOption[] options);
    public static string TextArea(string text, int maxLength, GUIStyle style, GUILayoutOption[] options);
    private static string DoTextField(string text, int maxLength, bool multiline, GUIStyle style, GUILayoutOption[] options);
    public static bool Toggle(bool value, Texture image, GUILayoutOption[] options);
    public static bool Toggle(bool value, string text, GUILayoutOption[] options);
    public static bool Toggle(bool value, GUIContent content, GUILayoutOption[] options);
    public static bool Toggle(bool value, Texture image, GUIStyle style, GUILayoutOption[] options);
    public static bool Toggle(bool value, string text, GUIStyle style, GUILayoutOption[] options);
    public static bool Toggle(bool value, GUIContent content, GUIStyle style, GUILayoutOption[] options);
    private static bool DoToggle(bool value, GUIContent content, GUIStyle style, GUILayoutOption[] options);
    public static int Toolbar(int selected, String[] texts, GUILayoutOption[] options);
    public static int Toolbar(int selected, Texture[] images, GUILayoutOption[] options);
    public static int Toolbar(int selected, GUIContent[] contents, GUILayoutOption[] options);
    public static int Toolbar(int selected, String[] texts, GUIStyle style, GUILayoutOption[] options);
    public static int Toolbar(int selected, Texture[] images, GUIStyle style, GUILayoutOption[] options);
    public static int Toolbar(int selected, String[] texts, GUIStyle style, ToolbarButtonSize buttonSize, GUILayoutOption[] options);
    public static int Toolbar(int selected, Texture[] images, GUIStyle style, ToolbarButtonSize buttonSize, GUILayoutOption[] options);
    public static int Toolbar(int selected, GUIContent[] contents, GUIStyle style, GUILayoutOption[] options);
    public static int Toolbar(int selected, GUIContent[] contents, GUIStyle style, ToolbarButtonSize buttonSize, GUILayoutOption[] options);
    public static int Toolbar(int selected, GUIContent[] contents, Boolean[] enabled, GUIStyle style, GUILayoutOption[] options);
    public static int Toolbar(int selected, GUIContent[] contents, Boolean[] enabled, GUIStyle style, ToolbarButtonSize buttonSize, GUILayoutOption[] options);
    public static int SelectionGrid(int selected, String[] texts, int xCount, GUILayoutOption[] options);
    public static int SelectionGrid(int selected, Texture[] images, int xCount, GUILayoutOption[] options);
    public static int SelectionGrid(int selected, GUIContent[] content, int xCount, GUILayoutOption[] options);
    public static int SelectionGrid(int selected, String[] texts, int xCount, GUIStyle style, GUILayoutOption[] options);
    public static int SelectionGrid(int selected, Texture[] images, int xCount, GUIStyle style, GUILayoutOption[] options);
    public static int SelectionGrid(int selected, GUIContent[] contents, int xCount, GUIStyle style, GUILayoutOption[] options);
    public static float HorizontalSlider(float value, float leftValue, float rightValue, GUILayoutOption[] options);
    public static float HorizontalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options);
    private static float DoHorizontalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options);
    public static float VerticalSlider(float value, float leftValue, float rightValue, GUILayoutOption[] options);
    public static float VerticalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options);
    private static float DoVerticalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options);
    public static float HorizontalScrollbar(float value, float size, float leftValue, float rightValue, GUILayoutOption[] options);
    public static float HorizontalScrollbar(float value, float size, float leftValue, float rightValue, GUIStyle style, GUILayoutOption[] options);
    public static float VerticalScrollbar(float value, float size, float topValue, float bottomValue, GUILayoutOption[] options);
    public static float VerticalScrollbar(float value, float size, float topValue, float bottomValue, GUIStyle style, GUILayoutOption[] options);
    public static void Space(float pixels);
    public static void FlexibleSpace();
    public static void BeginHorizontal(GUILayoutOption[] options);
    public static void BeginHorizontal(GUIStyle style, GUILayoutOption[] options);
    public static void BeginHorizontal(string text, GUIStyle style, GUILayoutOption[] options);
    public static void BeginHorizontal(Texture image, GUIStyle style, GUILayoutOption[] options);
    public static void BeginHorizontal(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    public static void EndHorizontal();
    public static void BeginVertical(GUILayoutOption[] options);
    public static void BeginVertical(GUIStyle style, GUILayoutOption[] options);
    public static void BeginVertical(string text, GUIStyle style, GUILayoutOption[] options);
    public static void BeginVertical(Texture image, GUIStyle style, GUILayoutOption[] options);
    public static void BeginVertical(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    public static void EndVertical();
    public static void BeginArea(Rect screenRect);
    public static void BeginArea(Rect screenRect, string text);
    public static void BeginArea(Rect screenRect, Texture image);
    public static void BeginArea(Rect screenRect, GUIContent content);
    public static void BeginArea(Rect screenRect, GUIStyle style);
    public static void BeginArea(Rect screenRect, string text, GUIStyle style);
    public static void BeginArea(Rect screenRect, Texture image, GUIStyle style);
    public static void BeginArea(Rect screenRect, GUIContent content, GUIStyle style);
    public static void EndArea();
    public static Vector2 BeginScrollView(Vector2 scrollPosition, GUILayoutOption[] options);
    public static Vector2 BeginScrollView(Vector2 scrollPosition, bool alwaysShowHorizontal, bool alwaysShowVertical, GUILayoutOption[] options);
    public static Vector2 BeginScrollView(Vector2 scrollPosition, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUILayoutOption[] options);
    public static Vector2 BeginScrollView(Vector2 scrollPosition, GUIStyle style);
    public static Vector2 BeginScrollView(Vector2 scrollPosition, GUIStyle style, GUILayoutOption[] options);
    public static Vector2 BeginScrollView(Vector2 scrollPosition, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUILayoutOption[] options);
    public static Vector2 BeginScrollView(Vector2 scrollPosition, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background, GUILayoutOption[] options);
    public static void EndScrollView();
    internal static void EndScrollView(bool handleScrollWheel);
    public static Rect Window(int id, Rect screenRect, WindowFunction func, string text, GUILayoutOption[] options);
    public static Rect Window(int id, Rect screenRect, WindowFunction func, Texture image, GUILayoutOption[] options);
    public static Rect Window(int id, Rect screenRect, WindowFunction func, GUIContent content, GUILayoutOption[] options);
    public static Rect Window(int id, Rect screenRect, WindowFunction func, string text, GUIStyle style, GUILayoutOption[] options);
    public static Rect Window(int id, Rect screenRect, WindowFunction func, Texture image, GUIStyle style, GUILayoutOption[] options);
    public static Rect Window(int id, Rect screenRect, WindowFunction func, GUIContent content, GUIStyle style, GUILayoutOption[] options);
    private static Rect DoWindow(int id, Rect screenRect, WindowFunction func, GUIContent content, GUIStyle style, GUILayoutOption[] options);
    public static GUILayoutOption Width(float width);
    public static GUILayoutOption MinWidth(float minWidth);
    public static GUILayoutOption MaxWidth(float maxWidth);
    public static GUILayoutOption Height(float height);
    public static GUILayoutOption MinHeight(float minHeight);
    public static GUILayoutOption MaxHeight(float maxHeight);
    public static GUILayoutOption ExpandWidth(bool expand);
    public static GUILayoutOption ExpandHeight(bool expand);
}
internal class UnityEngine.GUILayoutEntry : object {
    public float minWidth;
    public float maxWidth;
    public float minHeight;
    public float maxHeight;
    public Rect rect;
    public int stretchWidth;
    public int stretchHeight;
    public bool consideredForMargin;
    private GUIStyle m_Style;
    internal static Rect kDummyRect;
    protected static int indent;
    public GUIStyle style { get; public set; }
    public int marginLeft { get; }
    public int marginRight { get; }
    public int marginTop { get; }
    public int marginBottom { get; }
    public int marginHorizontal { get; }
    public int marginVertical { get; }
    public GUILayoutEntry(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style);
    public GUILayoutEntry(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style, GUILayoutOption[] options);
    private static GUILayoutEntry();
    public GUIStyle get_style();
    public void set_style(GUIStyle value);
    public virtual int get_marginLeft();
    public virtual int get_marginRight();
    public virtual int get_marginTop();
    public virtual int get_marginBottom();
    public int get_marginHorizontal();
    public int get_marginVertical();
    public virtual void CalcWidth();
    public virtual void CalcHeight();
    public virtual void SetHorizontal(float x, float width);
    public virtual void SetVertical(float y, float height);
    protected virtual void ApplyStyleSettings(GUIStyle style);
    public virtual void ApplyOptions(GUILayoutOption[] options);
    public virtual string ToString();
}
[VisibleToOtherModulesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class UnityEngine.GUILayoutGroup : GUILayoutEntry {
    public List`1<GUILayoutEntry> entries;
    public bool isVertical;
    public bool resetCoords;
    public float spacing;
    public bool sameSize;
    public bool isWindow;
    public int windowID;
    private int m_Cursor;
    protected int m_StretchableCountX;
    protected int m_StretchableCountY;
    protected bool m_UserSpecifiedWidth;
    protected bool m_UserSpecifiedHeight;
    protected float m_ChildMinWidth;
    protected float m_ChildMaxWidth;
    protected float m_ChildMinHeight;
    protected float m_ChildMaxHeight;
    protected int m_MarginLeft;
    protected int m_MarginRight;
    protected int m_MarginTop;
    protected int m_MarginBottom;
    private static GUILayoutEntry none;
    public int marginLeft { get; }
    public int marginRight { get; }
    public int marginTop { get; }
    public int marginBottom { get; }
    public GUILayoutGroup(GUIStyle _style, GUILayoutOption[] options);
    private static GUILayoutGroup();
    public virtual int get_marginLeft();
    public virtual int get_marginRight();
    public virtual int get_marginTop();
    public virtual int get_marginBottom();
    public virtual void ApplyOptions(GUILayoutOption[] options);
    protected virtual void ApplyStyleSettings(GUIStyle style);
    public void ResetCursor();
    public Rect PeekNext();
    public GUILayoutEntry GetNext();
    public Rect GetLast();
    public void Add(GUILayoutEntry e);
    public virtual void CalcWidth();
    public virtual void SetHorizontal(float x, float width);
    public virtual void CalcHeight();
    public virtual void SetVertical(float y, float height);
    public virtual string ToString();
}
public class UnityEngine.GUILayoutOption : object {
    internal Type type;
    internal object value;
    internal GUILayoutOption(Type type, object value);
}
[NativeHeaderAttribute("Modules/IMGUI/GUILayoutUtility.bindings.h")]
public class UnityEngine.GUILayoutUtility : object {
    private static Dictionary`2<int, LayoutCache> s_StoredLayouts;
    private static Dictionary`2<int, LayoutCache> s_StoredWindows;
    internal static LayoutCache current;
    internal static Rect kDummyRect;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static int <unbalancedgroupscount>k__BackingField;
    private static GUIStyle s_SpaceStyle;
    internal static int unbalancedgroupscount { get; internal set; }
    internal static GUILayoutGroup topLevel { get; }
    internal static GUIStyle spaceStyle { get; }
    private static GUILayoutUtility();
    private static Rect Internal_GetWindowRect(int windowID);
    private static void Internal_MoveWindow(int windowID, Rect r);
    internal static Rect GetWindowsBounds();
    [CompilerGeneratedAttribute]
internal static int get_unbalancedgroupscount();
    [CompilerGeneratedAttribute]
internal static void set_unbalancedgroupscount(int value);
    internal static void CleanupRoots();
    internal static LayoutCache GetLayoutCache(int instanceID, bool isWindow);
    internal static LayoutCache SelectIDList(int instanceID, bool isWindow);
    internal static void RemoveSelectedIdList(int instanceID, bool isWindow);
    internal static void Begin(int instanceID);
    internal static void BeginContainer(LayoutCache cache);
    internal static void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options);
    [ObsoleteAttribute("BeginGroup has no effect and will be removed", "False")]
public static void BeginGroup(string GroupName);
    [ObsoleteAttribute("EndGroup has no effect and will be removed", "False")]
public static void EndGroup(string groupName);
    internal static void Layout();
    internal static void LayoutFromEditorWindow();
    internal static void LayoutFromContainer(float w, float h);
    internal static float LayoutFromInspector(float width);
    internal static void LayoutFreeGroup(GUILayoutGroup toplevel);
    private static void LayoutSingleGroup(GUILayoutGroup i);
    [SecuritySafeCriticalAttribute]
private static GUILayoutGroup CreateGUILayoutGroupInstanceOfType(Type LayoutType);
    internal static GUILayoutGroup BeginLayoutGroup(GUIStyle style, GUILayoutOption[] options, Type layoutType);
    internal static void EndLayoutGroup();
    internal static GUILayoutGroup BeginLayoutArea(GUIStyle style, Type layoutType);
    internal static void EndLayoutArea();
    internal static GUILayoutGroup DoBeginLayoutArea(GUIStyle style, Type layoutType);
    internal static GUILayoutGroup get_topLevel();
    public static Rect GetRect(GUIContent content, GUIStyle style);
    public static Rect GetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    private static Rect DoGetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options);
    public static Rect GetRect(float width, float height);
    public static Rect GetRect(float width, float height, GUIStyle style);
    public static Rect GetRect(float width, float height, GUILayoutOption[] options);
    public static Rect GetRect(float width, float height, GUIStyle style, GUILayoutOption[] options);
    public static Rect GetRect(float minWidth, float maxWidth, float minHeight, float maxHeight);
    public static Rect GetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style);
    public static Rect GetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUILayoutOption[] options);
    public static Rect GetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style, GUILayoutOption[] options);
    private static Rect DoGetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style, GUILayoutOption[] options);
    public static Rect GetLastRect();
    public static Rect GetAspectRect(float aspect);
    public static Rect GetAspectRect(float aspect, GUIStyle style);
    public static Rect GetAspectRect(float aspect, GUILayoutOption[] options);
    public static Rect GetAspectRect(float aspect, GUIStyle style, GUILayoutOption[] options);
    private static Rect DoGetAspectRect(float aspect, GUILayoutOption[] options);
    internal static GUIStyle get_spaceStyle();
    private static void Internal_GetWindowRect_Injected(int windowID, Rect& ret);
    private static void Internal_MoveWindow_Injected(int windowID, Rect& r);
    private static void GetWindowsBounds_Injected(Rect& ret);
}
internal class UnityEngine.GUIScrollGroup : GUILayoutGroup {
    public float calcMinWidth;
    public float calcMaxWidth;
    public float calcMinHeight;
    public float calcMaxHeight;
    public float clientWidth;
    public float clientHeight;
    public bool allowHorizontalScroll;
    public bool allowVerticalScroll;
    public bool needsHorizontalScrollbar;
    public bool needsVerticalScrollbar;
    public GUIStyle horizontalScrollbar;
    public GUIStyle verticalScrollbar;
    public virtual void CalcWidth();
    public virtual void SetHorizontal(float x, float width);
    public virtual void CalcHeight();
    public virtual void SetVertical(float y, float height);
}
[NativeHeaderAttribute("Modules/IMGUI/GUISkin.bindings.h")]
public class UnityEngine.GUISettings : object {
    [SerializeField]
private bool m_DoubleClickSelectsWord;
    [SerializeField]
private bool m_TripleClickSelectsLine;
    [SerializeField]
private Color m_CursorColor;
    [SerializeField]
private float m_CursorFlashSpeed;
    [SerializeField]
private Color m_SelectionColor;
    public bool doubleClickSelectsWord { get; public set; }
    public bool tripleClickSelectsLine { get; public set; }
    public Color cursorColor { get; public set; }
    public float cursorFlashSpeed { get; public set; }
    public Color selectionColor { get; public set; }
    private static float Internal_GetCursorFlashSpeed();
    public bool get_doubleClickSelectsWord();
    public void set_doubleClickSelectsWord(bool value);
    public bool get_tripleClickSelectsLine();
    public void set_tripleClickSelectsLine(bool value);
    public Color get_cursorColor();
    public void set_cursorColor(Color value);
    public float get_cursorFlashSpeed();
    public void set_cursorFlashSpeed(float value);
    public Color get_selectionColor();
    public void set_selectionColor(Color value);
}
[AssetFileNameExtensionAttribute("guiskin", "Mono.Cecil.CustomAttributeArgument[]")]
[RequiredByNativeCodeAttribute]
[ExecuteInEditMode]
public class UnityEngine.GUISkin : ScriptableObject {
    [SerializeField]
private Font m_Font;
    [SerializeField]
private GUIStyle m_box;
    [SerializeField]
private GUIStyle m_button;
    [SerializeField]
private GUIStyle m_toggle;
    [SerializeField]
private GUIStyle m_label;
    [SerializeField]
private GUIStyle m_textField;
    [SerializeField]
private GUIStyle m_textArea;
    [SerializeField]
private GUIStyle m_window;
    [SerializeField]
private GUIStyle m_horizontalSlider;
    [SerializeField]
private GUIStyle m_horizontalSliderThumb;
    private GUIStyle m_horizontalSliderThumbExtent;
    [SerializeField]
private GUIStyle m_verticalSlider;
    [SerializeField]
private GUIStyle m_verticalSliderThumb;
    private GUIStyle m_verticalSliderThumbExtent;
    private GUIStyle m_SliderMixed;
    [SerializeField]
private GUIStyle m_horizontalScrollbar;
    [SerializeField]
private GUIStyle m_horizontalScrollbarThumb;
    [SerializeField]
private GUIStyle m_horizontalScrollbarLeftButton;
    [SerializeField]
private GUIStyle m_horizontalScrollbarRightButton;
    [SerializeField]
private GUIStyle m_verticalScrollbar;
    [SerializeField]
private GUIStyle m_verticalScrollbarThumb;
    [SerializeField]
private GUIStyle m_verticalScrollbarUpButton;
    [SerializeField]
private GUIStyle m_verticalScrollbarDownButton;
    [SerializeField]
private GUIStyle m_ScrollView;
    [SerializeField]
internal GUIStyle[] m_CustomStyles;
    [SerializeField]
private GUISettings m_Settings;
    internal static GUIStyle ms_Error;
    private Dictionary`2<string, GUIStyle> m_Styles;
    internal static SkinChangedDelegate m_SkinChanged;
    internal static GUISkin current;
    public Font font { get; public set; }
    public GUIStyle box { get; public set; }
    public GUIStyle label { get; public set; }
    public GUIStyle textField { get; public set; }
    public GUIStyle textArea { get; public set; }
    public GUIStyle button { get; public set; }
    public GUIStyle toggle { get; public set; }
    public GUIStyle window { get; public set; }
    public GUIStyle horizontalSlider { get; public set; }
    public GUIStyle horizontalSliderThumb { get; public set; }
    internal GUIStyle horizontalSliderThumbExtent { get; internal set; }
    internal GUIStyle sliderMixed { get; internal set; }
    public GUIStyle verticalSlider { get; public set; }
    public GUIStyle verticalSliderThumb { get; public set; }
    internal GUIStyle verticalSliderThumbExtent { get; internal set; }
    public GUIStyle horizontalScrollbar { get; public set; }
    public GUIStyle horizontalScrollbarThumb { get; public set; }
    public GUIStyle horizontalScrollbarLeftButton { get; public set; }
    public GUIStyle horizontalScrollbarRightButton { get; public set; }
    public GUIStyle verticalScrollbar { get; public set; }
    public GUIStyle verticalScrollbarThumb { get; public set; }
    public GUIStyle verticalScrollbarUpButton { get; public set; }
    public GUIStyle verticalScrollbarDownButton { get; public set; }
    public GUIStyle scrollView { get; public set; }
    public GUIStyle[] customStyles { get; public set; }
    public GUISettings settings { get; }
    internal static GUIStyle error { get; }
    internal void OnEnable();
    internal static void CleanupRoots();
    public Font get_font();
    public void set_font(Font value);
    public GUIStyle get_box();
    public void set_box(GUIStyle value);
    public GUIStyle get_label();
    public void set_label(GUIStyle value);
    public GUIStyle get_textField();
    public void set_textField(GUIStyle value);
    public GUIStyle get_textArea();
    public void set_textArea(GUIStyle value);
    public GUIStyle get_button();
    public void set_button(GUIStyle value);
    public GUIStyle get_toggle();
    public void set_toggle(GUIStyle value);
    public GUIStyle get_window();
    public void set_window(GUIStyle value);
    public GUIStyle get_horizontalSlider();
    public void set_horizontalSlider(GUIStyle value);
    public GUIStyle get_horizontalSliderThumb();
    public void set_horizontalSliderThumb(GUIStyle value);
    internal GUIStyle get_horizontalSliderThumbExtent();
    internal void set_horizontalSliderThumbExtent(GUIStyle value);
    internal GUIStyle get_sliderMixed();
    internal void set_sliderMixed(GUIStyle value);
    public GUIStyle get_verticalSlider();
    public void set_verticalSlider(GUIStyle value);
    public GUIStyle get_verticalSliderThumb();
    public void set_verticalSliderThumb(GUIStyle value);
    internal GUIStyle get_verticalSliderThumbExtent();
    internal void set_verticalSliderThumbExtent(GUIStyle value);
    public GUIStyle get_horizontalScrollbar();
    public void set_horizontalScrollbar(GUIStyle value);
    public GUIStyle get_horizontalScrollbarThumb();
    public void set_horizontalScrollbarThumb(GUIStyle value);
    public GUIStyle get_horizontalScrollbarLeftButton();
    public void set_horizontalScrollbarLeftButton(GUIStyle value);
    public GUIStyle get_horizontalScrollbarRightButton();
    public void set_horizontalScrollbarRightButton(GUIStyle value);
    public GUIStyle get_verticalScrollbar();
    public void set_verticalScrollbar(GUIStyle value);
    public GUIStyle get_verticalScrollbarThumb();
    public void set_verticalScrollbarThumb(GUIStyle value);
    public GUIStyle get_verticalScrollbarUpButton();
    public void set_verticalScrollbarUpButton(GUIStyle value);
    public GUIStyle get_verticalScrollbarDownButton();
    public void set_verticalScrollbarDownButton(GUIStyle value);
    public GUIStyle get_scrollView();
    public void set_scrollView(GUIStyle value);
    public GUIStyle[] get_customStyles();
    public void set_customStyles(GUIStyle[] value);
    public GUISettings get_settings();
    internal static GUIStyle get_error();
    internal void Apply();
    private void BuildStyleCache();
    public GUIStyle GetStyle(string styleName);
    public GUIStyle FindStyle(string styleName);
    internal void MakeCurrent();
    public IEnumerator GetEnumerator();
}
internal class UnityEngine.GUIStateObjects : object {
    private static Dictionary`2<int, object> s_StateCache;
    private static GUIStateObjects();
    [SecuritySafeCriticalAttribute]
internal static object GetStateObject(Type t, int controlID);
    internal static object QueryStateObject(Type t, int controlID);
    internal static void Tests_ClearObjects();
}
[NativeHeaderAttribute("IMGUIScriptingClasses.h")]
[RequiredByNativeCodeAttribute]
[NativeHeaderAttribute("Modules/IMGUI/GUIStyle.bindings.h")]
public class UnityEngine.GUIStyle : object {
    internal IntPtr m_Ptr;
    private GUIStyleState m_Normal;
    private GUIStyleState m_Hover;
    private GUIStyleState m_Active;
    private GUIStyleState m_Focused;
    private GUIStyleState m_OnNormal;
    private GUIStyleState m_OnHover;
    private GUIStyleState m_OnActive;
    private GUIStyleState m_OnFocused;
    private RectOffset m_Border;
    private RectOffset m_Padding;
    private RectOffset m_Margin;
    private RectOffset m_Overflow;
    private string m_Name;
    internal static bool showKeyboardFocus;
    private static GUIStyle s_None;
    [NativePropertyAttribute("Name", "False", "0")]
internal string rawName { get; internal set; }
    [NativePropertyAttribute("Font", "False", "0")]
public Font font { get; public set; }
    [NativePropertyAttribute("m_ImagePosition", "False", "1")]
public ImagePosition imagePosition { get; public set; }
    [NativePropertyAttribute("m_Alignment", "False", "1")]
public TextAnchor alignment { get; public set; }
    [NativePropertyAttribute("m_WordWrap", "False", "1")]
public bool wordWrap { get; public set; }
    [NativePropertyAttribute("m_Clipping", "False", "1")]
public TextClipping clipping { get; public set; }
    [NativePropertyAttribute("m_ContentOffset", "False", "1")]
public Vector2 contentOffset { get; public set; }
    [NativePropertyAttribute("m_FixedWidth", "False", "1")]
public float fixedWidth { get; public set; }
    [NativePropertyAttribute("m_FixedHeight", "False", "1")]
public float fixedHeight { get; public set; }
    [NativePropertyAttribute("m_StretchWidth", "False", "1")]
public bool stretchWidth { get; public set; }
    [NativePropertyAttribute("m_StretchHeight", "False", "1")]
public bool stretchHeight { get; public set; }
    [NativePropertyAttribute("m_FontSize", "False", "1")]
public int fontSize { get; public set; }
    [NativePropertyAttribute("m_FontStyle", "False", "1")]
public FontStyle fontStyle { get; public set; }
    [NativePropertyAttribute("m_RichText", "False", "1")]
public bool richText { get; public set; }
    [NativePropertyAttribute("m_ClipOffset", "False", "1")]
[ObsoleteAttribute("Don't use clipOffset - put things inside BeginGroup instead. This functionality will be removed in a later version.", "False")]
public Vector2 clipOffset { get; public set; }
    [NativePropertyAttribute("m_ClipOffset", "False", "1")]
internal Vector2 Internal_clipOffset { get; internal set; }
    public string name { get; public set; }
    public GUIStyleState normal { get; public set; }
    public GUIStyleState hover { get; public set; }
    public GUIStyleState active { get; public set; }
    public GUIStyleState onNormal { get; public set; }
    public GUIStyleState onHover { get; public set; }
    public GUIStyleState onActive { get; public set; }
    public GUIStyleState focused { get; public set; }
    public GUIStyleState onFocused { get; public set; }
    public RectOffset border { get; public set; }
    public RectOffset margin { get; public set; }
    public RectOffset padding { get; public set; }
    public RectOffset overflow { get; public set; }
    public float lineHeight { get; }
    public static GUIStyle none { get; }
    public bool isHeightDependantOnWidth { get; }
    public GUIStyle(GUIStyle other);
    private static GUIStyle();
    internal string get_rawName();
    internal void set_rawName(string value);
    public Font get_font();
    public void set_font(Font value);
    public ImagePosition get_imagePosition();
    public void set_imagePosition(ImagePosition value);
    public TextAnchor get_alignment();
    public void set_alignment(TextAnchor value);
    public bool get_wordWrap();
    public void set_wordWrap(bool value);
    public TextClipping get_clipping();
    public void set_clipping(TextClipping value);
    public Vector2 get_contentOffset();
    public void set_contentOffset(Vector2 value);
    public float get_fixedWidth();
    public void set_fixedWidth(float value);
    public float get_fixedHeight();
    public void set_fixedHeight(float value);
    public bool get_stretchWidth();
    public void set_stretchWidth(bool value);
    public bool get_stretchHeight();
    public void set_stretchHeight(bool value);
    public int get_fontSize();
    public void set_fontSize(int value);
    public FontStyle get_fontStyle();
    public void set_fontStyle(FontStyle value);
    public bool get_richText();
    public void set_richText(bool value);
    public Vector2 get_clipOffset();
    public void set_clipOffset(Vector2 value);
    internal Vector2 get_Internal_clipOffset();
    internal void set_Internal_clipOffset(Vector2 value);
    [FreeFunctionAttribute]
private static IntPtr Internal_Create(GUIStyle self);
    [FreeFunctionAttribute]
private static IntPtr Internal_Copy(GUIStyle self, GUIStyle other);
    [FreeFunctionAttribute]
private static void Internal_Destroy(IntPtr self);
    [FreeFunctionAttribute]
private IntPtr GetStyleStatePtr(int idx);
    [FreeFunctionAttribute]
private void AssignStyleState(int idx, IntPtr srcStyleState);
    [FreeFunctionAttribute]
private IntPtr GetRectOffsetPtr(int idx);
    [FreeFunctionAttribute]
private void AssignRectOffset(int idx, IntPtr srcRectOffset);
    [FreeFunctionAttribute]
private static float Internal_GetLineHeight(IntPtr target);
    [FreeFunctionAttribute]
private void Internal_Draw(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    [FreeFunctionAttribute]
private void Internal_Draw2(Rect position, GUIContent content, int controlID, bool on);
    [FreeFunctionAttribute]
private void Internal_DrawCursor(Rect position, GUIContent content, int pos, Color cursorColor);
    [FreeFunctionAttribute]
private void Internal_DrawWithTextSelection(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, Color cursorColor, Color selectionColor);
    [FreeFunctionAttribute]
internal Vector2 Internal_GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex);
    [FreeFunctionAttribute]
internal int Internal_GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition);
    [FreeFunctionAttribute]
internal string Internal_GetSelectedRenderedText(Rect localPosition, GUIContent mContent, int selectIndex, int cursorIndex);
    [FreeFunctionAttribute]
internal Rect[] Internal_GetHyperlinksRect(Rect localPosition, GUIContent mContent);
    [FreeFunctionAttribute]
internal int Internal_GetNumCharactersThatFitWithinWidth(string text, float width);
    [FreeFunctionAttribute]
internal Vector2 Internal_CalcSize(GUIContent content);
    [FreeFunctionAttribute]
internal Vector2 Internal_CalcSizeWithConstraints(GUIContent content, Vector2 maxSize);
    [FreeFunctionAttribute]
private float Internal_CalcHeight(GUIContent content, float width);
    [FreeFunctionAttribute]
private Vector2 Internal_CalcMinMaxWidth(GUIContent content);
    [FreeFunctionAttribute]
internal static void SetMouseTooltip(string tooltip, Rect screenRect);
    [FreeFunctionAttribute]
internal static bool IsTooltipActive(string tooltip);
    [FreeFunctionAttribute]
private static float Internal_GetCursorFlashOffset();
    [FreeFunctionAttribute]
internal static void SetDefaultFont(Font font);
    protected virtual override void Finalize();
    internal static void CleanupRoots();
    internal void InternalOnAfterDeserialize();
    public string get_name();
    public void set_name(string value);
    public GUIStyleState get_normal();
    public void set_normal(GUIStyleState value);
    public GUIStyleState get_hover();
    public void set_hover(GUIStyleState value);
    public GUIStyleState get_active();
    public void set_active(GUIStyleState value);
    public GUIStyleState get_onNormal();
    public void set_onNormal(GUIStyleState value);
    public GUIStyleState get_onHover();
    public void set_onHover(GUIStyleState value);
    public GUIStyleState get_onActive();
    public void set_onActive(GUIStyleState value);
    public GUIStyleState get_focused();
    public void set_focused(GUIStyleState value);
    public GUIStyleState get_onFocused();
    public void set_onFocused(GUIStyleState value);
    public RectOffset get_border();
    public void set_border(RectOffset value);
    public RectOffset get_margin();
    public void set_margin(RectOffset value);
    public RectOffset get_padding();
    public void set_padding(RectOffset value);
    public RectOffset get_overflow();
    public void set_overflow(RectOffset value);
    public float get_lineHeight();
    public void Draw(Rect position, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    public void Draw(Rect position, string text, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    public void Draw(Rect position, Texture image, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    public void Draw(Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    public void Draw(Rect position, GUIContent content, int controlID);
    public void Draw(Rect position, GUIContent content, int controlID, bool on);
    public void Draw(Rect position, GUIContent content, int controlID, bool on, bool hover);
    private void Draw(Rect position, GUIContent content, int controlId, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    public void DrawCursor(Rect position, GUIContent content, int controlID, int character);
    internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition, Color selectionColor);
    internal void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition);
    public void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter);
    public static GUIStyle op_Implicit(string str);
    public static GUIStyle get_none();
    public Vector2 GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex);
    public int GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition);
    internal int GetNumCharactersThatFitWithinWidth(string text, float width);
    public Vector2 CalcSize(GUIContent content);
    internal Vector2 CalcSizeWithConstraints(GUIContent content, Vector2 constraints);
    public Vector2 CalcScreenSize(Vector2 contentSize);
    public float CalcHeight(GUIContent content, float width);
    public bool get_isHeightDependantOnWidth();
    public void CalcMinMaxWidth(GUIContent content, Single& minWidth, Single& maxWidth);
    public virtual string ToString();
    private void get_contentOffset_Injected(Vector2& ret);
    private void set_contentOffset_Injected(Vector2& value);
    private void get_clipOffset_Injected(Vector2& ret);
    private void set_clipOffset_Injected(Vector2& value);
    private void get_Internal_clipOffset_Injected(Vector2& ret);
    private void set_Internal_clipOffset_Injected(Vector2& value);
    private void Internal_Draw_Injected(Rect& screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    private void Internal_Draw2_Injected(Rect& position, GUIContent content, int controlID, bool on);
    private void Internal_DrawCursor_Injected(Rect& position, GUIContent content, int pos, Color& cursorColor);
    private void Internal_DrawWithTextSelection_Injected(Rect& screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, Color& cursorColor, Color& selectionColor);
    private void Internal_GetCursorPixelPosition_Injected(Rect& position, GUIContent content, int cursorStringIndex, Vector2& ret);
    private int Internal_GetCursorStringIndex_Injected(Rect& position, GUIContent content, Vector2& cursorPixelPosition);
    private string Internal_GetSelectedRenderedText_Injected(Rect& localPosition, GUIContent mContent, int selectIndex, int cursorIndex);
    private Rect[] Internal_GetHyperlinksRect_Injected(Rect& localPosition, GUIContent mContent);
    private void Internal_CalcSize_Injected(GUIContent content, Vector2& ret);
    private void Internal_CalcSizeWithConstraints_Injected(GUIContent content, Vector2& maxSize, Vector2& ret);
    private void Internal_CalcMinMaxWidth_Injected(GUIContent content, Vector2& ret);
    private static void SetMouseTooltip_Injected(string tooltip, Rect& screenRect);
}
[NativeHeaderAttribute("Modules/IMGUI/GUIStyle.bindings.h")]
public class UnityEngine.GUIStyleState : object {
    internal IntPtr m_Ptr;
    private GUIStyle m_SourceStyle;
    [NativePropertyAttribute("Background", "False", "0")]
public Texture2D background { get; public set; }
    [NativePropertyAttribute("textColor", "False", "1")]
public Color textColor { get; public set; }
    private GUIStyleState(GUIStyle sourceStyle, IntPtr source);
    public Texture2D get_background();
    public void set_background(Texture2D value);
    public Color get_textColor();
    public void set_textColor(Color value);
    [FreeFunctionAttribute]
private static IntPtr Init();
    [FreeFunctionAttribute]
private void Cleanup();
    internal static GUIStyleState ProduceGUIStyleStateFromDeserialization(GUIStyle sourceStyle, IntPtr source);
    internal static GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source);
    protected virtual override void Finalize();
    private void get_textColor_Injected(Color& ret);
    private void set_textColor_Injected(Color& value);
}
[AttributeUsageAttribute("64")]
public class UnityEngine.GUITargetAttribute : Attribute {
    internal int displayMask;
    public GUITargetAttribute(int displayIndex);
    public GUITargetAttribute(int displayIndex, int displayIndex1);
    public GUITargetAttribute(int displayIndex, int displayIndex1, Int32[] displayIndexList);
    [RequiredByNativeCodeAttribute]
private static int GetGUITargetAttrValue(Type klass, string methodName);
}
[ObsoleteAttribute("GUITexture has been removed. Use UI.Image instead.", "True")]
[EditorBrowsableAttribute("1")]
[ExcludeFromObjectFactoryAttribute]
[ExcludeFromPresetAttribute]
public class UnityEngine.GUITexture : object {
    [ObsoleteAttribute("GUITexture has been removed. Use UI.Image instead.", "True")]
public Color color { get; public set; }
    [ObsoleteAttribute("GUITexture has been removed. Use UI.Image instead.", "True")]
public Texture texture { get; public set; }
    [ObsoleteAttribute("GUITexture has been removed. Use UI.Image instead.", "True")]
public Rect pixelInset { get; public set; }
    [ObsoleteAttribute("GUITexture has been removed. Use UI.Image instead.", "True")]
public RectOffset border { get; public set; }
    private static void FeatureRemoved();
    public Color get_color();
    public void set_color(Color value);
    public Texture get_texture();
    public void set_texture(Texture value);
    public Rect get_pixelInset();
    public void set_pixelInset(Rect value);
    public RectOffset get_border();
    public void set_border(RectOffset value);
}
[NativeHeaderAttribute("Modules/IMGUI/GUIUtility.h")]
[NativeHeaderAttribute("Modules/IMGUI/GUIManager.h")]
[NativeHeaderAttribute("Runtime/Input/InputBindings.h")]
[NativeHeaderAttribute("Runtime/Utilities/CopyPaste.h")]
[NativeHeaderAttribute("Runtime/Camera/RenderLayers/GUITexture.h")]
[NativeHeaderAttribute("Runtime/Input/InputManager.h")]
public class UnityEngine.GUIUtility : object {
    internal static int s_ControlCount;
    internal static int s_SkinMode;
    internal static int s_OriginalID;
    internal static Action takeCapture;
    internal static Action releaseCapture;
    internal static Func`3<int, IntPtr, bool> processEvent;
    internal static Action cleanupRoots;
    internal static Func`2<Exception, bool> endContainerGUIFromException;
    internal static Action guiChanged;
    internal static Action`2<EventType, KeyCode> beforeEventProcessed;
    private static Event m_Event;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <guiIsExiting>k__BackingField;
    internal static Func`1<bool> s_HasCurrentWindowKeyFocusFunc;
    public static bool hasModalWindow { get; }
    [NativePropertyAttribute("GetGUIState().m_PixelsPerPoint", "True", "1")]
internal static float pixelsPerPoint { get; }
    [NativePropertyAttribute("GetGUIState().m_OnGUIDepth", "True", "1")]
internal static int guiDepth { get; }
    internal static Vector2 s_EditorScreenPointOffset { get; internal set; }
    [NativePropertyAttribute("GetGUIState().m_CanvasGUIState.m_IsMouseUsed", "True", "1")]
internal static bool mouseUsed { get; internal set; }
    [StaticAccessorAttribute("GetInputManager()", "0")]
internal static bool textFieldInput { get; internal set; }
    internal static bool manualTex2SRGBEnabled { get; internal set; }
    public static string systemCopyBuffer { get; public set; }
    [StaticAccessorAttribute("InputBindings", "2")]
internal static string compositionString { get; }
    [StaticAccessorAttribute("InputBindings", "2")]
internal static IMECompositionMode imeCompositionMode { get; internal set; }
    [StaticAccessorAttribute("InputBindings", "2")]
internal static Vector2 compositionCursorPos { get; internal set; }
    internal static bool guiIsExiting { get; internal set; }
    public static int hotControl { get; public set; }
    public static int keyboardControl { get; public set; }
    private static GUIUtility();
    public static bool get_hasModalWindow();
    internal static float get_pixelsPerPoint();
    internal static int get_guiDepth();
    [NativeMethodAttribute("GetGUIState().GetGUIPixelOffset", "True")]
internal static Vector2 get_s_EditorScreenPointOffset();
    [NativeMethodAttribute("GetGUIState().SetGUIPixelOffset", "True")]
internal static void set_s_EditorScreenPointOffset(Vector2 value);
    internal static bool get_mouseUsed();
    internal static void set_mouseUsed(bool value);
    internal static bool get_textFieldInput();
    internal static void set_textFieldInput(bool value);
    [FreeFunctionAttribute("GUITexture::IsManualTex2SRGBEnabled")]
internal static bool get_manualTex2SRGBEnabled();
    [FreeFunctionAttribute("GUITexture::SetManualTex2SRGBEnabled")]
internal static void set_manualTex2SRGBEnabled(bool value);
    [FreeFunctionAttribute("GetCopyBuffer")]
public static string get_systemCopyBuffer();
    [FreeFunctionAttribute("SetCopyBuffer")]
public static void set_systemCopyBuffer(string value);
    [FreeFunctionAttribute("GetGUIState().GetControlID")]
private static int Internal_GetControlID(int hint, FocusType focusType, Rect rect);
    public static int GetControlID(int hint, FocusType focusType, Rect rect);
    internal static void BeginContainerFromOwner(ScriptableObject owner);
    internal static void BeginContainer(ObjectGUIState objectGUIState);
    [NativeMethodAttribute("EndContainer")]
internal static void Internal_EndContainer();
    [FreeFunctionAttribute("GetSpecificGUIState(0).m_EternalGUIState->GetNextUniqueID")]
internal static int GetPermanentControlID();
    internal static int CheckForTabEvent(Event evt);
    internal static void SetKeyboardControlToFirstControlId();
    internal static void SetKeyboardControlToLastControlId();
    internal static bool HasFocusableControls();
    internal static bool OwnsId(int id);
    public static Rect AlignRectToDevice(Rect rect, Int32& widthInPixels, Int32& heightInPixels);
    internal static string get_compositionString();
    internal static IMECompositionMode get_imeCompositionMode();
    internal static void set_imeCompositionMode(IMECompositionMode value);
    internal static Vector2 get_compositionCursorPos();
    internal static void set_compositionCursorPos(Vector2 value);
    internal static Vector3 Internal_MultiplyPoint(Vector3 point, Matrix4x4 transform);
    internal static bool GetChanged();
    internal static void SetChanged(bool changed);
    internal static void SetDidGUIWindowsEatLastEvent(bool value);
    private static int Internal_GetHotControl();
    private static int Internal_GetKeyboardControl();
    private static void Internal_SetHotControl(int value);
    private static void Internal_SetKeyboardControl(int value);
    private static object Internal_GetDefaultSkin(int skinMode);
    private static Object Internal_GetBuiltinSkin(int skin);
    private static void Internal_ExitGUI();
    private static Vector2 InternalWindowToScreenPoint(Vector2 windowPoint);
    private static Vector2 InternalScreenToWindowPoint(Vector2 screenPoint);
    [RequiredByNativeCodeAttribute]
private static void MarkGUIChanged();
    public static int GetControlID(FocusType focus);
    public static int GetControlID(GUIContent contents, FocusType focus);
    public static int GetControlID(FocusType focus, Rect position);
    public static int GetControlID(GUIContent contents, FocusType focus, Rect position);
    public static int GetControlID(int hint, FocusType focus);
    public static object GetStateObject(Type t, int controlID);
    public static object QueryStateObject(Type t, int controlID);
    [CompilerGeneratedAttribute]
internal static bool get_guiIsExiting();
    [CompilerGeneratedAttribute]
internal static void set_guiIsExiting(bool value);
    public static int get_hotControl();
    public static void set_hotControl(int value);
    [RequiredByNativeCodeAttribute]
internal static void TakeCapture();
    [RequiredByNativeCodeAttribute]
internal static void RemoveCapture();
    public static int get_keyboardControl();
    public static void set_keyboardControl(int value);
    internal static bool HasKeyFocus(int controlID);
    public static void ExitGUI();
    internal static GUISkin GetDefaultSkin(int skinMode);
    internal static GUISkin GetDefaultSkin();
    internal static GUISkin GetBuiltinSkin(int skin);
    [RequiredByNativeCodeAttribute]
internal static void ProcessEvent(int instanceID, IntPtr nativeEventPtr, Boolean& result);
    internal static void EndContainer();
    internal static void CleanupRoots();
    [RequiredByNativeCodeAttribute]
internal static void BeginGUI(int skinMode, int instanceID, int useGUILayout);
    [RequiredByNativeCodeAttribute]
internal static void DestroyGUI(int instanceID);
    [RequiredByNativeCodeAttribute]
internal static void EndGUI(int layoutType);
    [RequiredByNativeCodeAttribute]
internal static bool EndGUIFromException(Exception exception);
    [RequiredByNativeCodeAttribute]
internal static bool EndContainerGUIFromException(Exception exception);
    internal static void ResetGlobalState();
    internal static bool IsExitGUIException(Exception exception);
    internal static bool ShouldRethrowException(Exception exception);
    internal static void CheckOnGUI();
    internal static float RoundToPixelGrid(float v);
    internal static float RoundToPixelGrid(float v, float scale);
    public static Vector2 GUIToScreenPoint(Vector2 guiPoint);
    public static Rect GUIToScreenRect(Rect guiRect);
    public static Vector2 ScreenToGUIPoint(Vector2 screenPoint);
    public static Rect ScreenToGUIRect(Rect screenRect);
    public static void RotateAroundPivot(float angle, Vector2 pivotPoint);
    public static void ScaleAroundPivot(Vector2 scale, Vector2 pivotPoint);
    public static Rect AlignRectToDevice(Rect rect);
    internal static bool HitTest(Rect rect, Vector2 point, int offset);
    internal static bool HitTest(Rect rect, Vector2 point, bool isDirectManipulationDevice);
    internal static bool HitTest(Rect rect, Event evt);
    private static void get_s_EditorScreenPointOffset_Injected(Vector2& ret);
    private static void set_s_EditorScreenPointOffset_Injected(Vector2& value);
    private static int Internal_GetControlID_Injected(int hint, FocusType focusType, Rect& rect);
    private static void AlignRectToDevice_Injected(Rect& rect, Int32& widthInPixels, Int32& heightInPixels, Rect& ret);
    private static void get_compositionCursorPos_Injected(Vector2& ret);
    private static void set_compositionCursorPos_Injected(Vector2& value);
    private static void Internal_MultiplyPoint_Injected(Vector3& point, Matrix4x4& transform, Vector3& ret);
    private static void InternalWindowToScreenPoint_Injected(Vector2& windowPoint, Vector2& ret);
    private static void InternalScreenToWindowPoint_Injected(Vector2& screenPoint, Vector2& ret);
}
internal class UnityEngine.GUIWordWrapSizer : GUILayoutEntry {
    private GUIContent m_Content;
    private float m_ForcedMinHeight;
    private float m_ForcedMaxHeight;
    public GUIWordWrapSizer(GUIStyle style, GUIContent content, GUILayoutOption[] options);
    public virtual void CalcWidth();
    public virtual void CalcHeight();
}
public enum UnityEngine.ImagePosition : Enum {
    public int value__;
    public static ImagePosition ImageLeft;
    public static ImagePosition ImageAbove;
    public static ImagePosition ImageOnly;
    public static ImagePosition TextOnly;
}
[NativeHeaderAttribute("Modules/IMGUI/GUIState.h")]
internal class UnityEngine.ObjectGUIState : object {
    internal IntPtr m_Ptr;
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void Destroy();
    private static IntPtr Internal_Create();
    [NativeMethodAttribute]
private static void Internal_Destroy(IntPtr ptr);
}
internal enum UnityEngine.PlatformSelection : Enum {
    public int value__;
    public static PlatformSelection Native;
    public static PlatformSelection Mac;
    public static PlatformSelection Windows;
}
public enum UnityEngine.PointerType : Enum {
    public int value__;
    public static PointerType Mouse;
    public static PointerType Touch;
    public static PointerType Pen;
}
public enum UnityEngine.ScaleMode : Enum {
    public int value__;
    public static ScaleMode StretchToFill;
    public static ScaleMode ScaleAndCrop;
    public static ScaleMode ScaleToFit;
}
internal class UnityEngine.ScrollViewState : object {
    public Rect position;
    public Rect visibleRect;
    public Rect viewRect;
    public Vector2 scrollPosition;
    public bool apply;
    public bool isDuringTouchScroll;
    public Vector2 touchScrollStartMousePosition;
    public Vector2 touchScrollStartPosition;
    public Vector2 velocity;
    public float previousTimeSinceStartup;
    public void ScrollTo(Rect pos);
    public bool ScrollTowards(Rect pos, float maxDelta);
    private Vector2 ScrollNeeded(Rect pos);
}
internal class UnityEngine.SliderHandler : ValueType {
    private Rect position;
    private float currentValue;
    private float size;
    private float start;
    private float end;
    private GUIStyle slider;
    private GUIStyle thumb;
    private GUIStyle thumbExtent;
    private bool horiz;
    private int id;
    public SliderHandler(Rect position, float currentValue, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id, GUIStyle thumbExtent);
    public float Handle();
    private float OnMouseDown();
    private float OnMouseDrag();
    private float OnMouseUp();
    private float OnRepaint();
    private EventType CurrentEventType();
    private int CurrentScrollTroughSide();
    private bool IsEmptySlider();
    private bool SupportsPageMovements();
    private float PageMovementValue();
    private float PageUpMovementBound();
    private Event CurrentEvent();
    private float ValueForCurrentMousePosition();
    private float Clamp(float value);
    private Rect ThumbSelectionRect();
    private void StartDraggingWithValue(float dragStartValue);
    private SliderState SliderState();
    private Rect ThumbExtRect();
    private Rect ThumbRect();
    private Rect VerticalThumbRect();
    private Rect HorizontalThumbRect();
    private float ClampedCurrentValue();
    private float MousePosition();
    private float ValuesPerPixel();
    private float ThumbSize();
    private float MaxValue();
    private float MinValue();
}
internal class UnityEngine.SliderState : object {
    public float dragStartPos;
    public float dragStartValue;
    public bool isDragging;
}
public enum UnityEngine.TextClipping : Enum {
    public int value__;
    public static TextClipping Overflow;
    public static TextClipping Clip;
}
internal class UnityEngine.TextEditingUtilities : object {
    private TextSelectingUtilities m_TextSelectingUtility;
    private TextHandle m_TextHandle;
    private int m_CursorIndexSavedState;
    internal bool isCompositionActive;
    private bool m_UpdateImeWindowPosition;
    public bool multiline;
    private string m_Text;
    private static Dictionary`2<Event, TextEditOp> s_KeyEditOps;
    private bool hasSelection { get; }
    private string SelectedText { get; }
    private int m_iAltCursorPos { get; }
    internal bool revealCursor { get; internal set; }
    private int cursorIndex { get; private set; }
    private int selectIndex { get; private set; }
    public string text { get; public set; }
    public TextEditingUtilities(TextSelectingUtilities selectingUtilities, TextHandle textHandle, string text);
    private bool get_hasSelection();
    private string get_SelectedText();
    private int get_m_iAltCursorPos();
    internal bool get_revealCursor();
    internal void set_revealCursor(bool value);
    private int get_cursorIndex();
    private void set_cursorIndex(int value);
    private int get_selectIndex();
    private void set_selectIndex(int value);
    public string get_text();
    public void set_text(string value);
    public bool UpdateImeState();
    public bool ShouldUpdateImeWindowPosition();
    public void SetImeWindowPosition(Vector2 worldPosition);
    public string GeneratePreviewString(bool richText);
    public void EnableCursorPreviewState();
    public void RestoreCursorState();
    [VisibleToOtherModulesAttribute]
internal bool HandleKeyEvent(Event e);
    private void PerformOperation(TextEditOp operation);
    private static void MapKey(string key, TextEditOp action);
    private void InitKeyActions();
    public bool DeleteLineBack();
    public bool DeleteWordBack();
    public bool DeleteWordForward();
    public bool Delete();
    public bool Backspace();
    public bool DeleteSelection();
    public void ReplaceSelection(string replace);
    public void Insert(char c);
    public void MoveSelectionToAltCursor();
    public bool CanPaste();
    public bool Cut();
    public bool Paste();
    private static string ReplaceNewlinesWithSpaces(string value);
    internal void OnBlur();
    internal bool TouchScreenKeyboardShouldBeUsed();
}
internal enum UnityEngine.TextEditOp : Enum {
    public int value__;
    public static TextEditOp MoveLeft;
    public static TextEditOp MoveRight;
    public static TextEditOp MoveUp;
    public static TextEditOp MoveDown;
    public static TextEditOp MoveLineStart;
    public static TextEditOp MoveLineEnd;
    public static TextEditOp MoveTextStart;
    public static TextEditOp MoveTextEnd;
    public static TextEditOp MovePageUp;
    public static TextEditOp MovePageDown;
    public static TextEditOp MoveGraphicalLineStart;
    public static TextEditOp MoveGraphicalLineEnd;
    public static TextEditOp MoveWordLeft;
    public static TextEditOp MoveWordRight;
    public static TextEditOp MoveParagraphForward;
    public static TextEditOp MoveParagraphBackward;
    public static TextEditOp MoveToStartOfNextWord;
    public static TextEditOp MoveToEndOfPreviousWord;
    public static TextEditOp Delete;
    public static TextEditOp Backspace;
    public static TextEditOp DeleteWordBack;
    public static TextEditOp DeleteWordForward;
    public static TextEditOp DeleteLineBack;
    public static TextEditOp Cut;
    public static TextEditOp Paste;
    public static TextEditOp ScrollStart;
    public static TextEditOp ScrollEnd;
    public static TextEditOp ScrollPageUp;
    public static TextEditOp ScrollPageDown;
}
public class UnityEngine.TextEditor : object {
    public TouchScreenKeyboard keyboardOnScreen;
    public int controlID;
    public GUIStyle style;
    public bool multiline;
    public bool hasHorizontalCursorPos;
    public bool isPasswordField;
    internal bool m_HasFocus;
    public Vector2 scrollOffset;
    private GUIContent m_Content;
    private Rect m_Position;
    private int m_CursorIndex;
    private int m_SelectIndex;
    private bool m_RevealCursor;
    public Vector2 graphicalCursorPos;
    public Vector2 graphicalSelectCursorPos;
    private bool m_MouseDragSelectsWholeWords;
    private int m_DblClickInitPos;
    private DblClickSnapping m_DblClickSnap;
    private bool m_bJustSelected;
    private int m_iAltCursorPos;
    private string oldText;
    private int oldPos;
    private int oldSelectPos;
    private static Dictionary`2<Event, TextEditOp> s_Keyactions;
    [ObsoleteAttribute("Please use 'text' instead of 'content'", "False")]
public GUIContent content { get; public set; }
    public string text { get; public set; }
    public Rect position { get; public set; }
    internal Rect localPosition { get; }
    public int cursorIndex { get; public set; }
    public int selectIndex { get; public set; }
    public DblClickSnapping doubleClickSnapping { get; public set; }
    public int altCursorPosition { get; public set; }
    public bool hasSelection { get; }
    public string SelectedText { get; }
    public GUIContent get_content();
    public void set_content(GUIContent value);
    public string get_text();
    public void set_text(string value);
    public Rect get_position();
    public void set_position(Rect value);
    internal virtual Rect get_localPosition();
    public int get_cursorIndex();
    public void set_cursorIndex(int value);
    public int get_selectIndex();
    public void set_selectIndex(int value);
    private void ClearCursorPos();
    public DblClickSnapping get_doubleClickSnapping();
    public void set_doubleClickSnapping(DblClickSnapping value);
    public int get_altCursorPosition();
    public void set_altCursorPosition(int value);
    public void OnFocus();
    public void OnLostFocus();
    private void GrabGraphicalCursorPos();
    public bool HandleKeyEvent(Event e);
    [VisibleToOtherModulesAttribute]
internal bool HandleKeyEvent(Event e, bool textIsReadOnly);
    public bool DeleteLineBack();
    public bool DeleteWordBack();
    public bool DeleteWordForward();
    public bool Delete();
    public bool CanPaste();
    public bool Backspace();
    public void SelectAll();
    public void SelectNone();
    public bool get_hasSelection();
    public string get_SelectedText();
    public bool DeleteSelection();
    public void ReplaceSelection(string replace);
    public void Insert(char c);
    public void MoveSelectionToAltCursor();
    public void MoveRight();
    public void MoveLeft();
    public void MoveUp();
    public void MoveDown();
    public void MoveLineStart();
    public void MoveLineEnd();
    public void MoveGraphicalLineStart();
    public void MoveGraphicalLineEnd();
    public void MoveTextStart();
    public void MoveTextEnd();
    private int IndexOfEndOfLine(int startIndex);
    public void MoveParagraphForward();
    public void MoveParagraphBackward();
    public void MoveCursorToPosition(Vector2 cursorPosition);
    protected internal void MoveCursorToPosition_Internal(Vector2 cursorPosition, bool shift);
    public void MoveAltCursorToPosition(Vector2 cursorPosition);
    public bool IsOverSelection(Vector2 cursorPosition);
    public void SelectToPosition(Vector2 cursorPosition);
    public void SelectLeft();
    public void SelectRight();
    public void SelectUp();
    public void SelectDown();
    public void SelectTextEnd();
    public void SelectTextStart();
    public void MouseDragSelectsWholeWords(bool on);
    public void DblClickSnap(DblClickSnapping snapping);
    private int GetGraphicalLineStart(int p);
    private int GetGraphicalLineEnd(int p);
    private int FindNextSeperator(int startPos);
    private int FindPrevSeperator(int startPos);
    public void MoveWordRight();
    public void MoveToStartOfNextWord();
    public void MoveToEndOfPreviousWord();
    public void SelectToStartOfNextWord();
    public void SelectToEndOfPreviousWord();
    private CharacterType ClassifyChar(int index);
    public int FindStartOfNextWord(int p);
    private int FindEndOfPreviousWord(int p);
    public void MoveWordLeft();
    public void SelectWordRight();
    public void SelectWordLeft();
    public void ExpandSelectGraphicalLineStart();
    public void ExpandSelectGraphicalLineEnd();
    public void SelectGraphicalLineStart();
    public void SelectGraphicalLineEnd();
    public void SelectParagraphForward();
    public void SelectParagraphBackward();
    public void SelectCurrentWord();
    private int FindEndOfClassification(int p, Direction dir);
    public void SelectCurrentParagraph();
    public void UpdateScrollOffsetIfNeeded(Event evt);
    [VisibleToOtherModulesAttribute]
internal void UpdateScrollOffset();
    public void DrawCursor(string newText);
    private bool PerformOperation(TextEditOp operation, bool textIsReadOnly);
    public void SaveBackup();
    public void Undo();
    public bool Cut();
    public void Copy();
    internal Rect[] GetHyperlinksRect();
    private static string ReplaceNewlinesWithSpaces(string value);
    public bool Paste();
    private static void MapKey(string key, TextEditOp action);
    private void InitKeyActions();
    public void DetectFocusChange();
    internal virtual void OnDetectFocusChange();
    internal virtual void OnCursorIndexChange();
    internal virtual void OnSelectIndexChange();
    private void ClampTextIndex(Int32& index);
    private void EnsureValidCodePointIndex(Int32& index);
    private bool IsValidCodePointIndex(int index);
    private int PreviousCodePointIndex(int index);
    private int NextCodePointIndex(int index);
}
internal class UnityEngine.TextSelectingUtilities : object {
    public DblClickSnapping dblClickSnap;
    public int iAltCursorPos;
    public bool hasHorizontalCursorPos;
    private bool m_bJustSelected;
    private bool m_MouseDragSelectsWholeWords;
    private int m_DblClickInitPosStart;
    private int m_DblClickInitPosEnd;
    private TextHandle m_TextHandle;
    private static int kMoveDownHeight;
    private static char kNewLineChar;
    private bool m_RevealCursor;
    private int m_CursorIndex;
    internal int m_SelectIndex;
    private static Dictionary`2<Event, TextSelectOp> s_KeySelectOps;
    internal Action OnCursorIndexChange;
    internal Action OnSelectIndexChange;
    internal Action OnRevealCursorChange;
    public bool hasSelection { get; }
    public bool revealCursor { get; public set; }
    private int m_CharacterCount { get; }
    private int characterCount { get; }
    private TextElementInfo[] m_TextElementInfos { get; }
    public int cursorIndex { get; public set; }
    public int selectIndex { get; public set; }
    public string selectedText { get; }
    public TextSelectingUtilities(TextHandle textHandle);
    public bool get_hasSelection();
    public bool get_revealCursor();
    public void set_revealCursor(bool value);
    private int get_m_CharacterCount();
    private int get_characterCount();
    private TextElementInfo[] get_m_TextElementInfos();
    public int get_cursorIndex();
    public void set_cursorIndex(int value);
    internal void SetCursorIndexWithoutNotify(int index);
    public int get_selectIndex();
    public void set_selectIndex(int value);
    internal void SetSelectIndexWithoutNotify(int index);
    public string get_selectedText();
    internal bool HandleKeyEvent(Event e);
    private bool PerformOperation(TextSelectOp operation);
    private static void MapKey(string key, TextSelectOp action);
    private void InitKeyActions();
    public void ClearCursorPos();
    public void OnFocus(bool selectAll);
    public void SelectAll();
    public void SelectNone();
    public void SelectLeft();
    public void SelectRight();
    public void SelectUp();
    public void SelectDown();
    public void SelectTextEnd();
    public void SelectTextStart();
    public void SelectToStartOfNextWord();
    public void SelectToEndOfPreviousWord();
    public void SelectWordRight();
    public void SelectWordLeft();
    public void SelectGraphicalLineStart();
    public void SelectGraphicalLineEnd();
    public void SelectParagraphForward();
    public void SelectParagraphBackward();
    public void SelectCurrentWord();
    public void SelectCurrentParagraph();
    public void MoveRight();
    public void MoveLeft();
    public void MoveUp();
    public void MoveDown();
    public void MoveLineStart();
    public void MoveLineEnd();
    public void MoveGraphicalLineStart();
    public void MoveGraphicalLineEnd();
    public void MoveTextStart();
    public void MoveTextEnd();
    public void MoveParagraphForward();
    public void MoveParagraphBackward();
    public void MoveWordRight();
    public void MoveToStartOfNextWord();
    public void MoveToEndOfPreviousWord();
    public void MoveWordLeft();
    public void MouseDragSelectsWholeWords(bool on);
    public void ExpandSelectGraphicalLineStart();
    public void ExpandSelectGraphicalLineEnd();
    public void DblClickSnap(DblClickSnapping snapping);
    protected internal void MoveCursorToPosition_Internal(Vector2 cursorPosition, bool shift);
    public void SelectToPosition(Vector2 cursorPosition);
    private int FindNextSeperator(int startPos);
    private int FindPrevSeperator(int startPos);
    public int FindStartOfNextWord(int p);
    public int FindEndOfPreviousWord(int p);
    private int FindEndOfClassification(int p, Direction dir);
    private int ClampTextIndex(int index);
    internal int EnsureValidCodePointIndex(int index);
    private bool IsValidCodePointIndex(int index);
    private int IndexOfEndOfLine(int startIndex);
    public int PreviousCodePointIndex(int index);
    public int NextCodePointIndex(int index);
    private int GetGraphicalLineStart(int p);
    private int GetGraphicalLineEnd(int p);
    public void Copy();
    private CharacterType ClassifyChar(int index);
}
internal enum UnityEngine.TextSelectOp : Enum {
    public int value__;
    public static TextSelectOp SelectLeft;
    public static TextSelectOp SelectRight;
    public static TextSelectOp SelectUp;
    public static TextSelectOp SelectDown;
    public static TextSelectOp SelectTextStart;
    public static TextSelectOp SelectTextEnd;
    public static TextSelectOp SelectPageUp;
    public static TextSelectOp SelectPageDown;
    public static TextSelectOp ExpandSelectGraphicalLineStart;
    public static TextSelectOp ExpandSelectGraphicalLineEnd;
    public static TextSelectOp SelectGraphicalLineStart;
    public static TextSelectOp SelectGraphicalLineEnd;
    public static TextSelectOp SelectWordLeft;
    public static TextSelectOp SelectWordRight;
    public static TextSelectOp SelectToEndOfPreviousWord;
    public static TextSelectOp SelectToStartOfNextWord;
    public static TextSelectOp SelectParagraphBackward;
    public static TextSelectOp SelectParagraphForward;
    public static TextSelectOp Copy;
    public static TextSelectOp SelectAll;
    public static TextSelectOp SelectNone;
}
