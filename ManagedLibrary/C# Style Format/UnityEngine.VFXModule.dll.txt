public UnityEngine.VFX.VFXBatchedEffectInfo : ValueType {
public VisualEffectAsset vfxAsset
public UInt32 activeBatchCount
public UInt32 inactiveBatchCount
public UInt32 activeInstanceCount
public UInt32 unbatchedInstanceCount
public UInt32 totalInstanceCapacity
public UInt32 maxInstancePerBatchCapacity
public ulong totalGPUSizeInBytes
public ulong totalCPUSizeInBytes
}
internal UnityEngine.VFX.VFXBatchInfo : ValueType {
public UInt32 capacity
public UInt32 activeInstanceCount
}
public UnityEngine.VFX.VFXCameraBufferTypes : Enum {
public int value__
public VFXCameraBufferTypes None
public VFXCameraBufferTypes Depth
public VFXCameraBufferTypes Color
public VFXCameraBufferTypes Normal
}
public UnityEngine.VFX.VFXCameraXRSettings : ValueType {
public UInt32 viewTotal
public UInt32 viewCount
public UInt32 viewOffset
}
internal UnityEngine.VFX.VFXCullingFlags : Enum {
public int value__
public VFXCullingFlags CullNone
public VFXCullingFlags CullSimulation
public VFXCullingFlags CullBoundsUpdate
public VFXCullingFlags CullDefault
}
public UnityEngine.VFX.VFXEventAttribute : object {
private IntPtr m_Ptr
private bool m_Owner
private VisualEffectAsset m_VfxAsset
internal VisualEffectAsset vfxAsset
private void .ctor(IntPtr ptr, bool owner, VisualEffectAsset vfxAsset)
internal VFXEventAttribute CreateEventAttributeWrapper()
internal void SetWrapValue(IntPtr ptrToEventAttribute)
public void .ctor(VFXEventAttribute original)
internal IntPtr Internal_Create()
internal VFXEventAttribute Internal_InstanciateVFXEventAttribute(VisualEffectAsset vfxAsset)
internal void Internal_InitFromAsset(VisualEffectAsset vfxAsset)
internal void Internal_InitFromEventAttribute(VFXEventAttribute vfxEventAttribute)
internal VisualEffectAsset get_vfxAsset()
private void Release()
protected void Finalize()
public void Dispose()
internal void Internal_Destroy(IntPtr ptr)
public bool HasBool(int nameID)
public bool HasInt(int nameID)
public bool HasUint(int nameID)
public bool HasFloat(int nameID)
public bool HasVector2(int nameID)
public bool HasVector3(int nameID)
public bool HasVector4(int nameID)
public bool HasMatrix4x4(int nameID)
public void SetBool(int nameID, bool b)
public void SetInt(int nameID, int i)
public void SetUint(int nameID, UInt32 i)
public void SetFloat(int nameID, float f)
public void SetVector2(int nameID, Vector2 v)
public void SetVector3(int nameID, Vector3 v)
public void SetVector4(int nameID, Vector4 v)
public void SetMatrix4x4(int nameID, Matrix4x4 v)
public bool GetBool(int nameID)
public int GetInt(int nameID)
public UInt32 GetUint(int nameID)
public float GetFloat(int nameID)
public Vector2 GetVector2(int nameID)
public Vector3 GetVector3(int nameID)
public Vector4 GetVector4(int nameID)
public Matrix4x4 GetMatrix4x4(int nameID)
public bool HasBool(string name)
public bool HasInt(string name)
public bool HasUint(string name)
public bool HasFloat(string name)
public bool HasVector2(string name)
public bool HasVector3(string name)
public bool HasVector4(string name)
public bool HasMatrix4x4(string name)
public void SetBool(string name, bool b)
public void SetInt(string name, int i)
public void SetUint(string name, UInt32 i)
public void SetFloat(string name, float f)
public void SetVector2(string name, Vector2 v)
public void SetVector3(string name, Vector3 v)
public void SetVector4(string name, Vector4 v)
public void SetMatrix4x4(string name, Matrix4x4 v)
public bool GetBool(string name)
public int GetInt(string name)
public UInt32 GetUint(string name)
public float GetFloat(string name)
public Vector2 GetVector2(string name)
public Vector3 GetVector3(string name)
public Vector4 GetVector4(string name)
public Matrix4x4 GetMatrix4x4(string name)
public void CopyValuesFrom(VFXEventAttribute eventAttibute)
private void SetVector2_Injected(int nameID, Vector2& v)
private void SetVector3_Injected(int nameID, Vector3& v)
private void SetVector4_Injected(int nameID, Vector4& v)
private void SetMatrix4x4_Injected(int nameID, Matrix4x4& v)
private void GetVector2_Injected(int nameID, Vector2& ret)
private void GetVector3_Injected(int nameID, Vector3& ret)
private void GetVector4_Injected(int nameID, Vector4& ret)
private void GetMatrix4x4_Injected(int nameID, Matrix4x4& ret)
}
public UnityEngine.VFX.VFXExposedProperty : ValueType {
public string name
public Type type
}
internal UnityEngine.VFX.VFXExpressionOperation : Enum {
public int value__
public VFXExpressionOperation None
public VFXExpressionOperation Value
public VFXExpressionOperation Combine2f
public VFXExpressionOperation Combine3f
public VFXExpressionOperation Combine4f
public VFXExpressionOperation ExtractComponent
public VFXExpressionOperation DeltaTime
public VFXExpressionOperation TotalTime
public VFXExpressionOperation SystemSeed
public VFXExpressionOperation LocalToWorld
public VFXExpressionOperation WorldToLocal
public VFXExpressionOperation FrameIndex
public VFXExpressionOperation PlayRate
public VFXExpressionOperation UnscaledDeltaTime
public VFXExpressionOperation ManagerMaxDeltaTime
public VFXExpressionOperation ManagerFixedTimeStep
public VFXExpressionOperation GameDeltaTime
public VFXExpressionOperation GameUnscaledDeltaTime
public VFXExpressionOperation GameSmoothDeltaTime
public VFXExpressionOperation GameTotalTime
public VFXExpressionOperation GameUnscaledTotalTime
public VFXExpressionOperation GameTotalTimeSinceSceneLoad
public VFXExpressionOperation GameTimeScale
public VFXExpressionOperation Sin
public VFXExpressionOperation Cos
public VFXExpressionOperation Tan
public VFXExpressionOperation ASin
public VFXExpressionOperation ACos
public VFXExpressionOperation ATan
public VFXExpressionOperation Abs
public VFXExpressionOperation Sign
public VFXExpressionOperation Saturate
public VFXExpressionOperation Ceil
public VFXExpressionOperation Round
public VFXExpressionOperation Frac
public VFXExpressionOperation Floor
public VFXExpressionOperation Log2
public VFXExpressionOperation Mul
public VFXExpressionOperation Divide
public VFXExpressionOperation Add
public VFXExpressionOperation Subtract
public VFXExpressionOperation Min
public VFXExpressionOperation Max
public VFXExpressionOperation Pow
public VFXExpressionOperation ATan2
public VFXExpressionOperation TRSToMatrix
public VFXExpressionOperation InverseMatrix
public VFXExpressionOperation InverseTRSMatrix
public VFXExpressionOperation TransposeMatrix
public VFXExpressionOperation ExtractPositionFromMatrix
public VFXExpressionOperation ExtractAnglesFromMatrix
public VFXExpressionOperation ExtractScaleFromMatrix
public VFXExpressionOperation TransformMatrix
public VFXExpressionOperation TransformPos
public VFXExpressionOperation TransformVec
public VFXExpressionOperation TransformDir
public VFXExpressionOperation TransformVector4
public VFXExpressionOperation Vector3sToMatrix
public VFXExpressionOperation Vector4sToMatrix
public VFXExpressionOperation MatrixToVector3s
public VFXExpressionOperation MatrixToVector4s
public VFXExpressionOperation SampleCurve
public VFXExpressionOperation SampleGradient
public VFXExpressionOperation SampleMeshVertexFloat
public VFXExpressionOperation SampleMeshVertexFloat2
public VFXExpressionOperation SampleMeshVertexFloat3
public VFXExpressionOperation SampleMeshVertexFloat4
public VFXExpressionOperation SampleMeshVertexColor
public VFXExpressionOperation SampleMeshIndex
public VFXExpressionOperation VertexBufferFromMesh
public VFXExpressionOperation VertexBufferFromSkinnedMeshRenderer
public VFXExpressionOperation IndexBufferFromMesh
public VFXExpressionOperation MeshFromSkinnedMeshRenderer
public VFXExpressionOperation RootBoneTransformFromSkinnedMeshRenderer
public VFXExpressionOperation BakeCurve
public VFXExpressionOperation BakeGradient
public VFXExpressionOperation BitwiseLeftShift
public VFXExpressionOperation BitwiseRightShift
public VFXExpressionOperation BitwiseOr
public VFXExpressionOperation BitwiseAnd
public VFXExpressionOperation BitwiseXor
public VFXExpressionOperation BitwiseComplement
public VFXExpressionOperation CastUintToFloat
public VFXExpressionOperation CastIntToFloat
public VFXExpressionOperation CastFloatToUint
public VFXExpressionOperation CastIntToUint
public VFXExpressionOperation CastFloatToInt
public VFXExpressionOperation CastUintToInt
public VFXExpressionOperation CastIntToBool
public VFXExpressionOperation CastUintToBool
public VFXExpressionOperation CastFloatToBool
public VFXExpressionOperation CastBoolToInt
public VFXExpressionOperation CastBoolToUint
public VFXExpressionOperation CastBoolToFloat
public VFXExpressionOperation RGBtoHSV
public VFXExpressionOperation HSVtoRGB
public VFXExpressionOperation Condition
public VFXExpressionOperation Branch
public VFXExpressionOperation GenerateRandom
public VFXExpressionOperation GenerateFixedRandom
public VFXExpressionOperation ExtractMatrixFromMainCamera
public VFXExpressionOperation ExtractFOVFromMainCamera
public VFXExpressionOperation ExtractNearPlaneFromMainCamera
public VFXExpressionOperation ExtractFarPlaneFromMainCamera
public VFXExpressionOperation ExtractAspectRatioFromMainCamera
public VFXExpressionOperation ExtractPixelDimensionsFromMainCamera
public VFXExpressionOperation ExtractScaledPixelDimensionsFromMainCamera
public VFXExpressionOperation ExtractLensShiftFromMainCamera
public VFXExpressionOperation GetBufferFromMainCamera
public VFXExpressionOperation IsMainCameraOrthographic
public VFXExpressionOperation GetOrthographicSizeFromMainCamera
public VFXExpressionOperation LogicalAnd
public VFXExpressionOperation LogicalOr
public VFXExpressionOperation LogicalNot
public VFXExpressionOperation ValueNoise1D
public VFXExpressionOperation ValueNoise2D
public VFXExpressionOperation ValueNoise3D
public VFXExpressionOperation ValueCurlNoise2D
public VFXExpressionOperation ValueCurlNoise3D
public VFXExpressionOperation PerlinNoise1D
public VFXExpressionOperation PerlinNoise2D
public VFXExpressionOperation PerlinNoise3D
public VFXExpressionOperation PerlinCurlNoise2D
public VFXExpressionOperation PerlinCurlNoise3D
public VFXExpressionOperation CellularNoise1D
public VFXExpressionOperation CellularNoise2D
public VFXExpressionOperation CellularNoise3D
public VFXExpressionOperation CellularCurlNoise2D
public VFXExpressionOperation CellularCurlNoise3D
public VFXExpressionOperation VoroNoise2D
public VFXExpressionOperation MeshVertexCount
public VFXExpressionOperation MeshChannelOffset
public VFXExpressionOperation MeshChannelInfos
public VFXExpressionOperation MeshVertexStride
public VFXExpressionOperation MeshIndexCount
public VFXExpressionOperation MeshIndexFormat
public VFXExpressionOperation BufferStride
public VFXExpressionOperation BufferCount
public VFXExpressionOperation TextureWidth
public VFXExpressionOperation TextureHeight
public VFXExpressionOperation TextureDepth
public VFXExpressionOperation ReadEventAttribute
public VFXExpressionOperation SpawnerStateNewLoop
public VFXExpressionOperation SpawnerStateLoopState
public VFXExpressionOperation SpawnerStateSpawnCount
public VFXExpressionOperation SpawnerStateDeltaTime
public VFXExpressionOperation SpawnerStateTotalTime
public VFXExpressionOperation SpawnerStateDelayBeforeLoop
public VFXExpressionOperation SpawnerStateLoopDuration
public VFXExpressionOperation SpawnerStateDelayAfterLoop
public VFXExpressionOperation SpawnerStateLoopIndex
public VFXExpressionOperation SpawnerStateLoopCount
}
public UnityEngine.VFX.VFXExpressionValues : object {
internal IntPtr m_Ptr
internal VFXExpressionValues CreateExpressionValuesWrapper(IntPtr ptr)
public bool GetBool(int nameID)
public int GetInt(int nameID)
public UInt32 GetUInt(int nameID)
public float GetFloat(int nameID)
public Vector2 GetVector2(int nameID)
public Vector3 GetVector3(int nameID)
public Vector4 GetVector4(int nameID)
public Matrix4x4 GetMatrix4x4(int nameID)
public Texture GetTexture(int nameID)
public Mesh GetMesh(int nameID)
public AnimationCurve GetAnimationCurve(int nameID)
internal void Internal_GetAnimationCurveFromScript(int nameID, AnimationCurve curve)
public Gradient GetGradient(int nameID)
internal void Internal_GetGradientFromScript(int nameID, Gradient gradient)
public bool GetBool(string name)
public int GetInt(string name)
public UInt32 GetUInt(string name)
public float GetFloat(string name)
public Vector2 GetVector2(string name)
public Vector3 GetVector3(string name)
public Vector4 GetVector4(string name)
public Matrix4x4 GetMatrix4x4(string name)
public Texture GetTexture(string name)
public AnimationCurve GetAnimationCurve(string name)
public Gradient GetGradient(string name)
public Mesh GetMesh(string name)
private void GetVector2_Injected(int nameID, Vector2& ret)
private void GetVector3_Injected(int nameID, Vector3& ret)
private void GetVector4_Injected(int nameID, Vector4& ret)
private void GetMatrix4x4_Injected(int nameID, Matrix4x4& ret)
}
internal UnityEngine.VFX.VFXInstancingDisabledReason : Enum {
public int value__
public VFXInstancingDisabledReason None
public VFXInstancingDisabledReason IndirectDraw
public VFXInstancingDisabledReason OutputEvent
public VFXInstancingDisabledReason GPUEvent
public VFXInstancingDisabledReason AutomaticBounds
public VFXInstancingDisabledReason MeshOutput
public VFXInstancingDisabledReason ExposedObject
public VFXInstancingDisabledReason Unknown
}
internal UnityEngine.VFX.VFXInstancingMode : Enum {
public int value__
public VFXInstancingMode Disabled
public VFXInstancingMode Auto
public VFXInstancingMode Custom
}
internal UnityEngine.VFX.VFXMainCameraBufferFallback : Enum {
public int value__
public VFXMainCameraBufferFallback NoFallback
public VFXMainCameraBufferFallback PreferMainCamera
public VFXMainCameraBufferFallback PreferSceneCamera
}
public UnityEngine.VFX.VFXManager : object {
private VFXCameraXRSettings kDefaultCameraXRSettings
internal ScriptableObject runtimeResources
public float fixedTimeStep
public float maxDeltaTime
internal float maxScrubTime
internal string renderPipeSettingsPath
internal UInt32 batchEmptyLifetime
public VisualEffect[] GetComponents()
internal ScriptableObject get_runtimeResources()
public float get_fixedTimeStep()
public void set_fixedTimeStep(float value)
public float get_maxDeltaTime()
public void set_maxDeltaTime(float value)
internal float get_maxScrubTime()
internal void set_maxScrubTime(float value)
internal string get_renderPipeSettingsPath()
internal UInt32 get_batchEmptyLifetime()
internal void set_batchEmptyLifetime(UInt32 value)
internal void CleanupEmptyBatches(bool force)
public void FlushEmptyBatches()
public VFXBatchedEffectInfo GetBatchedEffectInfo(VisualEffectAsset vfx)
public void GetBatchedEffectInfos(List`1<VFXBatchedEffectInfo> infos)
internal VFXBatchInfo GetBatchInfo(VisualEffectAsset vfx, UInt32 batchIndex)
public void ProcessCamera(Camera cam)
public void PrepareCamera(Camera cam)
public void PrepareCamera(Camera cam, VFXCameraXRSettings camXRSettings)
public void ProcessCameraCommand(Camera cam, CommandBuffer cmd)
public void ProcessCameraCommand(Camera cam, CommandBuffer cmd, VFXCameraXRSettings camXRSettings)
public void ProcessCameraCommand(Camera cam, CommandBuffer cmd, VFXCameraXRSettings camXRSettings, CullingResults results)
private void Internal_ProcessCameraCommand(Camera cam, CommandBuffer cmd, VFXCameraXRSettings camXRSettings, IntPtr cullResults)
public VFXCameraBufferTypes IsCameraBufferNeeded(Camera cam)
public void SetCameraBuffer(Camera cam, VFXCameraBufferTypes type, Texture buffer, int x, int y, int width, int height)
private void GetBatchedEffectInfo_Injected(VisualEffectAsset vfx, VFXBatchedEffectInfo& ret)
private void GetBatchInfo_Injected(VisualEffectAsset vfx, UInt32 batchIndex, VFXBatchInfo& ret)
private void PrepareCamera_Injected(Camera cam, VFXCameraXRSettings& camXRSettings)
private void Internal_ProcessCameraCommand_Injected(Camera cam, CommandBuffer cmd, VFXCameraXRSettings& camXRSettings, IntPtr cullResults)
}
public UnityEngine.VFX.VFXOutputEventArgs : ValueType {
private int <nameId>k__BackingField
private VFXEventAttribute <eventAttribute>k__BackingField
public int nameId
public VFXEventAttribute eventAttribute
public int get_nameId()
public VFXEventAttribute get_eventAttribute()
public void .ctor(int nameId, VFXEventAttribute eventAttribute)
}
public UnityEngine.VFX.VFXParticleSystemInfo : ValueType {
public UInt32 aliveCount
public UInt32 capacity
public bool sleeping
public Bounds bounds
public void .ctor(UInt32 aliveCount, UInt32 capacity, bool sleeping, Bounds bounds)
}
internal UnityEngine.VFX.VFXSkinnedMeshFrame : Enum {
public int value__
public VFXSkinnedMeshFrame Current
public VFXSkinnedMeshFrame Previous
}
internal UnityEngine.VFX.VFXSkinnedTransform : Enum {
public int value__
public VFXSkinnedTransform LocalRootBoneTransform
public VFXSkinnedTransform WorldRootBoneTransform
}
public UnityEngine.VFX.VFXSpawnerCallbacks : ScriptableObject {
public void OnPlay(VFXSpawnerState state, VFXExpressionValues vfxValues, VisualEffect vfxComponent)
public void OnUpdate(VFXSpawnerState state, VFXExpressionValues vfxValues, VisualEffect vfxComponent)
public void OnStop(VFXSpawnerState state, VFXExpressionValues vfxValues, VisualEffect vfxComponent)
}
public UnityEngine.VFX.VFXSpawnerLoopState : Enum {
public int value__
public VFXSpawnerLoopState Finished
public VFXSpawnerLoopState DelayingBeforeLoop
public VFXSpawnerLoopState Looping
public VFXSpawnerLoopState DelayingAfterLoop
}
public UnityEngine.VFX.VFXSpawnerState : object {
private IntPtr m_Ptr
private bool m_Owner
private VFXEventAttribute m_WrapEventAttribute
public bool playing
public bool newLoop
public VFXSpawnerLoopState loopState
public float spawnCount
public float deltaTime
public float totalTime
public float delayBeforeLoop
public float loopDuration
public float delayAfterLoop
public int loopIndex
public int loopCount
public VFXEventAttribute vfxEventAttribute
internal void .ctor(IntPtr ptr, bool owner)
internal IntPtr Internal_Create()
internal VFXSpawnerState CreateSpawnerStateWrapper()
private void PrepareWrapper()
internal void SetWrapValue(IntPtr ptrToSpawnerState, IntPtr ptrToEventAttribute)
internal IntPtr GetPtr()
private void Release()
protected void Finalize()
public void Dispose()
private void Internal_Destroy(IntPtr ptr)
public bool get_playing()
public void set_playing(bool value)
public bool get_newLoop()
public VFXSpawnerLoopState get_loopState()
public void set_loopState(VFXSpawnerLoopState value)
public float get_spawnCount()
public void set_spawnCount(float value)
public float get_deltaTime()
public void set_deltaTime(float value)
public float get_totalTime()
public void set_totalTime(float value)
public float get_delayBeforeLoop()
public void set_delayBeforeLoop(float value)
public float get_loopDuration()
public void set_loopDuration(float value)
public float get_delayAfterLoop()
public void set_delayAfterLoop(float value)
public int get_loopIndex()
public void set_loopIndex(int value)
public int get_loopCount()
public void set_loopCount(int value)
internal VFXEventAttribute Internal_GetVFXEventAttribute()
public VFXEventAttribute get_vfxEventAttribute()
}
internal UnityEngine.VFX.VFXSystemFlag : Enum {
public int value__
public VFXSystemFlag SystemDefault
public VFXSystemFlag SystemHasKill
public VFXSystemFlag SystemHasIndirectBuffer
public VFXSystemFlag SystemReceivedEventGPU
public VFXSystemFlag SystemHasStrips
public VFXSystemFlag SystemNeedsComputeBounds
public VFXSystemFlag SystemAutomaticBounds
public VFXSystemFlag SystemInWorldSpace
public VFXSystemFlag SystemHasDirectLink
public VFXSystemFlag SystemHasAttributeBuffer
public VFXSystemFlag SystemUsesInstancedRendering
}
internal UnityEngine.VFX.VFXSystemType : Enum {
public int value__
public VFXSystemType Spawner
public VFXSystemType Particle
public VFXSystemType Mesh
public VFXSystemType OutputEvent
}
internal UnityEngine.VFX.VFXTaskType : Enum {
public int value__
public VFXTaskType None
public VFXTaskType Spawner
public VFXTaskType Initialize
public VFXTaskType Update
public VFXTaskType Output
public VFXTaskType CameraSort
public VFXTaskType PerCameraUpdate
public VFXTaskType PerCameraSort
public VFXTaskType PerOutputSort
public VFXTaskType GlobalSort
public VFXTaskType ParticlePointOutput
public VFXTaskType ParticleLineOutput
public VFXTaskType ParticleQuadOutput
public VFXTaskType ParticleHexahedronOutput
public VFXTaskType ParticleMeshOutput
public VFXTaskType ParticleTriangleOutput
public VFXTaskType ParticleOctagonOutput
public VFXTaskType ConstantRateSpawner
public VFXTaskType BurstSpawner
public VFXTaskType PeriodicBurstSpawner
public VFXTaskType VariableRateSpawner
public VFXTaskType CustomCallbackSpawner
public VFXTaskType SetAttributeSpawner
public VFXTaskType EvaluateExpressionsSpawner
}
internal UnityEngine.VFX.VFXUpdateMode : Enum {
public int value__
public VFXUpdateMode FixedDeltaTime
public VFXUpdateMode DeltaTime
public VFXUpdateMode IgnoreTimeScale
public VFXUpdateMode ExactFixedTimeStep
public VFXUpdateMode DeltaTimeAndIgnoreTimeScale
public VFXUpdateMode FixedDeltaAndExactTime
public VFXUpdateMode FixedDeltaAndExactTimeAndIgnoreTimeScale
}
internal UnityEngine.VFX.VFXValueType : Enum {
public int value__
public VFXValueType None
public VFXValueType Float
public VFXValueType Float2
public VFXValueType Float3
public VFXValueType Float4
public VFXValueType Int32
public VFXValueType Uint32
public VFXValueType Texture2D
public VFXValueType Texture2DArray
public VFXValueType Texture3D
public VFXValueType TextureCube
public VFXValueType TextureCubeArray
public VFXValueType CameraBuffer
public VFXValueType Matrix4x4
public VFXValueType Curve
public VFXValueType ColorGradient
public VFXValueType Mesh
public VFXValueType Spline
public VFXValueType Boolean
public VFXValueType Buffer
public VFXValueType SkinnedMeshRenderer
}
public UnityEngine.VFX.VisualEffect : Behaviour {
private VFXEventAttribute m_cachedEventAttribute
public Action`1<VFXOutputEventArgs> outputEventReceived
public bool pause
public float playRate
public UInt32 startSeed
public bool resetSeedOnPlay
public int initialEventID
public string initialEventName
public bool culled
public VisualEffectAsset visualEffectAsset
public int aliveParticleCount
internal float time
public bool get_pause()
public void set_pause(bool value)
public float get_playRate()
public void set_playRate(float value)
public UInt32 get_startSeed()
public void set_startSeed(UInt32 value)
public bool get_resetSeedOnPlay()
public void set_resetSeedOnPlay(bool value)
public int get_initialEventID()
public void set_initialEventID(int value)
public string get_initialEventName()
public void set_initialEventName(string value)
public bool get_culled()
public VisualEffectAsset get_visualEffectAsset()
public void set_visualEffectAsset(VisualEffectAsset value)
public VFXEventAttribute CreateVFXEventAttribute()
private void CheckValidVFXEventAttribute(VFXEventAttribute eventAttribute)
private void SendEventFromScript(int eventNameID, VFXEventAttribute eventAttribute)
public void SendEvent(int eventNameID, VFXEventAttribute eventAttribute)
public void SendEvent(string eventName, VFXEventAttribute eventAttribute)
public void SendEvent(int eventNameID)
public void SendEvent(string eventName)
public void Play(VFXEventAttribute eventAttribute)
public void Play()
public void Stop(VFXEventAttribute eventAttribute)
public void Stop()
public void Reinit()
internal void Reinit(bool sendInitialEventAndPrewarm)
public void AdvanceOneFrame()
internal void RecreateData()
public void ResetOverride(int nameID)
public TextureDimension GetTextureDimension(int nameID)
public bool HasBool(int nameID)
public bool HasInt(int nameID)
public bool HasUInt(int nameID)
public bool HasFloat(int nameID)
public bool HasVector2(int nameID)
public bool HasVector3(int nameID)
public bool HasVector4(int nameID)
public bool HasMatrix4x4(int nameID)
public bool HasTexture(int nameID)
public bool HasAnimationCurve(int nameID)
public bool HasGradient(int nameID)
public bool HasMesh(int nameID)
public bool HasSkinnedMeshRenderer(int nameID)
public bool HasGraphicsBuffer(int nameID)
public void SetBool(int nameID, bool b)
public void SetInt(int nameID, int i)
public void SetUInt(int nameID, UInt32 i)
public void SetFloat(int nameID, float f)
public void SetVector2(int nameID, Vector2 v)
public void SetVector3(int nameID, Vector3 v)
public void SetVector4(int nameID, Vector4 v)
public void SetMatrix4x4(int nameID, Matrix4x4 v)
public void SetTexture(int nameID, Texture t)
public void SetAnimationCurve(int nameID, AnimationCurve c)
public void SetGradient(int nameID, Gradient g)
public void SetMesh(int nameID, Mesh m)
public void SetSkinnedMeshRenderer(int nameID, SkinnedMeshRenderer m)
public void SetGraphicsBuffer(int nameID, GraphicsBuffer g)
public bool GetBool(int nameID)
public int GetInt(int nameID)
public UInt32 GetUInt(int nameID)
public float GetFloat(int nameID)
public Vector2 GetVector2(int nameID)
public Vector3 GetVector3(int nameID)
public Vector4 GetVector4(int nameID)
public Matrix4x4 GetMatrix4x4(int nameID)
public Texture GetTexture(int nameID)
public Mesh GetMesh(int nameID)
public SkinnedMeshRenderer GetSkinnedMeshRenderer(int nameID)
internal GraphicsBuffer GetGraphicsBuffer(int nameID)
public Gradient GetGradient(int nameID)
private void Internal_GetGradient(int nameID, Gradient gradient)
public AnimationCurve GetAnimationCurve(int nameID)
private void Internal_GetAnimationCurve(int nameID, AnimationCurve curve)
public VFXParticleSystemInfo GetParticleSystemInfo(int nameID)
private void GetSpawnSystemInfo(int nameID, IntPtr spawnerState)
public bool HasAnySystemAwake()
internal Bounds GetComputedBounds(int nameID)
internal Vector3 GetCurrentBoundsPadding(int nameID)
public void GetSpawnSystemInfo(int nameID, VFXSpawnerState spawnState)
public VFXSpawnerState GetSpawnSystemInfo(int nameID)
public bool HasSystem(int nameID)
public void GetSystemNames(List`1<string> names)
public void GetParticleSystemNames(List`1<string> names)
public void GetOutputEventNames(List`1<string> names)
public void GetSpawnSystemNames(List`1<string> names)
public void ResetOverride(string name)
public bool HasInt(string name)
public bool HasUInt(string name)
public bool HasFloat(string name)
public bool HasVector2(string name)
public bool HasVector3(string name)
public bool HasVector4(string name)
public bool HasMatrix4x4(string name)
public bool HasTexture(string name)
public TextureDimension GetTextureDimension(string name)
public bool HasAnimationCurve(string name)
public bool HasGradient(string name)
public bool HasMesh(string name)
public bool HasSkinnedMeshRenderer(string name)
public bool HasGraphicsBuffer(string name)
public bool HasBool(string name)
public void SetInt(string name, int i)
public void SetUInt(string name, UInt32 i)
public void SetFloat(string name, float f)
public void SetVector2(string name, Vector2 v)
public void SetVector3(string name, Vector3 v)
public void SetVector4(string name, Vector4 v)
public void SetMatrix4x4(string name, Matrix4x4 v)
public void SetTexture(string name, Texture t)
public void SetAnimationCurve(string name, AnimationCurve c)
public void SetGradient(string name, Gradient g)
public void SetMesh(string name, Mesh m)
public void SetSkinnedMeshRenderer(string name, SkinnedMeshRenderer m)
public void SetGraphicsBuffer(string name, GraphicsBuffer g)
public void SetBool(string name, bool b)
public int GetInt(string name)
public UInt32 GetUInt(string name)
public float GetFloat(string name)
public Vector2 GetVector2(string name)
public Vector3 GetVector3(string name)
public Vector4 GetVector4(string name)
public Matrix4x4 GetMatrix4x4(string name)
public Texture GetTexture(string name)
public Mesh GetMesh(string name)
public SkinnedMeshRenderer GetSkinnedMeshRenderer(string name)
internal GraphicsBuffer GetGraphicsBuffer(string name)
public bool GetBool(string name)
public AnimationCurve GetAnimationCurve(string name)
public Gradient GetGradient(string name)
public bool HasSystem(string name)
public VFXParticleSystemInfo GetParticleSystemInfo(string name)
public VFXSpawnerState GetSpawnSystemInfo(string name)
internal Bounds GetComputedBounds(string name)
internal Vector3 GetCurrentBoundsPadding(string name)
public int get_aliveParticleCount()
internal float get_time()
public void Simulate(float stepDeltaTime, UInt32 stepCount)
private VFXEventAttribute InvokeGetCachedEventAttributeForOutputEvent_Internal(VisualEffect source)
private void InvokeOutputEventReceived_Internal(VisualEffect source, int eventNameId)
private void SetVector2_Injected(int nameID, Vector2& v)
private void SetVector3_Injected(int nameID, Vector3& v)
private void SetVector4_Injected(int nameID, Vector4& v)
private void SetMatrix4x4_Injected(int nameID, Matrix4x4& v)
private void GetVector2_Injected(int nameID, Vector2& ret)
private void GetVector3_Injected(int nameID, Vector3& ret)
private void GetVector4_Injected(int nameID, Vector4& ret)
private void GetMatrix4x4_Injected(int nameID, Matrix4x4& ret)
private void GetParticleSystemInfo_Injected(int nameID, VFXParticleSystemInfo& ret)
private void GetComputedBounds_Injected(int nameID, Bounds& ret)
private void GetCurrentBoundsPadding_Injected(int nameID, Vector3& ret)
}
public UnityEngine.VFX.VisualEffectAsset : VisualEffectObject {
public string PlayEventName
public string StopEventName
public int PlayEventID
public int StopEventID
public TextureDimension GetTextureDimension(int nameID)
public void GetExposedProperties(List`1<VFXExposedProperty> exposedProperties)
public void GetEvents(List`1<string> names)
internal bool HasSystem(int nameID)
internal void GetSystemNames(List`1<string> names)
internal void GetParticleSystemNames(List`1<string> names)
internal void GetOutputEventNames(List`1<string> names)
internal void GetSpawnSystemNames(List`1<string> names)
public TextureDimension GetTextureDimension(string name)
}
