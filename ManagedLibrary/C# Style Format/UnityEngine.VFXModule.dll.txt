internal UnityEngine.Experimental.VFX.VFXCullingFlags : Enum {
public int value__
public VFXCullingFlags CullNone
public VFXCullingFlags CullSimulation
public VFXCullingFlags CullBoundsUpdate
public VFXCullingFlags CullDefault
}
public UnityEngine.Experimental.VFX.VFXEventAttribute : object {
private IntPtr m_Ptr
private bool m_Owner
private void .ctor(IntPtr ptr, bool owner)
public void .ctor(VFXEventAttribute original)
internal IntPtr Internal_Create()
internal VFXEventAttribute Internal_InstanciateVFXEventAttribute(VisualEffectAsset vfxAsset)
internal void Internal_InitFromAsset(VisualEffectAsset vfxAsset)
internal void Internal_InitFromEventAttribute(VFXEventAttribute vfxEventAttribute)
private void Release()
protected void Finalize()
public void Dispose()
internal void Internal_Destroy(IntPtr ptr)
public bool HasBool(int nameID)
public bool HasInt(int nameID)
public bool HasUint(int nameID)
public bool HasFloat(int nameID)
public bool HasVector2(int nameID)
public bool HasVector3(int nameID)
public bool HasVector4(int nameID)
public bool HasMatrix4x4(int nameID)
public void SetBool(int nameID, bool b)
public void SetInt(int nameID, int i)
public void SetUint(int nameID, UInt32 i)
public void SetFloat(int nameID, float f)
public void SetVector2(int nameID, Vector2 v)
public void SetVector3(int nameID, Vector3 v)
public void SetVector4(int nameID, Vector4 v)
public void SetMatrix4x4(int nameID, Matrix4x4 v)
public bool GetBool(int nameID)
public int GetInt(int nameID)
public UInt32 GetUint(int nameID)
public float GetFloat(int nameID)
public Vector2 GetVector2(int nameID)
public Vector3 GetVector3(int nameID)
public Vector4 GetVector4(int nameID)
public Matrix4x4 GetMatrix4x4(int nameID)
public bool HasBool(string name)
public bool HasInt(string name)
public bool HasUint(string name)
public bool HasFloat(string name)
public bool HasVector2(string name)
public bool HasVector3(string name)
public bool HasVector4(string name)
public bool HasMatrix4x4(string name)
public void SetBool(string name, bool b)
public void SetInt(string name, int i)
public void SetUint(string name, UInt32 i)
public void SetFloat(string name, float f)
public void SetVector2(string name, Vector2 v)
public void SetVector3(string name, Vector3 v)
public void SetVector4(string name, Vector4 v)
public void SetMatrix4x4(string name, Matrix4x4 v)
public bool GetBool(string name)
public int GetInt(string name)
public UInt32 GetUint(string name)
public float GetFloat(string name)
public Vector2 GetVector2(string name)
public Vector3 GetVector3(string name)
public Vector4 GetVector4(string name)
public Matrix4x4 GetMatrix4x4(string name)
public void CopyValuesFrom(VFXEventAttribute eventAttibute)
private void SetVector2_Injected(int nameID, Vector2& v)
private void SetVector3_Injected(int nameID, Vector3& v)
private void SetVector4_Injected(int nameID, Vector4& v)
private void SetMatrix4x4_Injected(int nameID, Matrix4x4& v)
private void GetVector2_Injected(int nameID, Vector2& ret)
private void GetVector3_Injected(int nameID, Vector3& ret)
private void GetVector4_Injected(int nameID, Vector4& ret)
private void GetMatrix4x4_Injected(int nameID, Matrix4x4& ret)
}
internal UnityEngine.Experimental.VFX.VFXExpressionOperation : Enum {
public int value__
public VFXExpressionOperation None
public VFXExpressionOperation Value
public VFXExpressionOperation Combine2f
public VFXExpressionOperation Combine3f
public VFXExpressionOperation Combine4f
public VFXExpressionOperation ExtractComponent
public VFXExpressionOperation DeltaTime
public VFXExpressionOperation TotalTime
public VFXExpressionOperation SystemSeed
public VFXExpressionOperation LocalToWorld
public VFXExpressionOperation WorldToLocal
public VFXExpressionOperation Sin
public VFXExpressionOperation Cos
public VFXExpressionOperation Tan
public VFXExpressionOperation ASin
public VFXExpressionOperation ACos
public VFXExpressionOperation ATan
public VFXExpressionOperation Abs
public VFXExpressionOperation Sign
public VFXExpressionOperation Floor
public VFXExpressionOperation Log2
public VFXExpressionOperation Mul
public VFXExpressionOperation Divide
public VFXExpressionOperation Add
public VFXExpressionOperation Subtract
public VFXExpressionOperation Min
public VFXExpressionOperation Max
public VFXExpressionOperation Pow
public VFXExpressionOperation ATan2
public VFXExpressionOperation TRSToMatrix
public VFXExpressionOperation InverseMatrix
public VFXExpressionOperation ExtractPositionFromMatrix
public VFXExpressionOperation ExtractAnglesFromMatrix
public VFXExpressionOperation ExtractScaleFromMatrix
public VFXExpressionOperation TransformMatrix
public VFXExpressionOperation TransformPos
public VFXExpressionOperation TransformVec
public VFXExpressionOperation TransformDir
public VFXExpressionOperation Vector3sToMatrix
public VFXExpressionOperation Vector4sToMatrix
public VFXExpressionOperation MatrixToVector3s
public VFXExpressionOperation MatrixToVector4s
public VFXExpressionOperation SampleCurve
public VFXExpressionOperation SampleGradient
public VFXExpressionOperation BakeCurve
public VFXExpressionOperation BakeGradient
public VFXExpressionOperation BitwiseLeftShift
public VFXExpressionOperation BitwiseRightShift
public VFXExpressionOperation BitwiseOr
public VFXExpressionOperation BitwiseAnd
public VFXExpressionOperation BitwiseXor
public VFXExpressionOperation BitwiseComplement
public VFXExpressionOperation CastUintToFloat
public VFXExpressionOperation CastIntToFloat
public VFXExpressionOperation CastFloatToUint
public VFXExpressionOperation CastIntToUint
public VFXExpressionOperation CastFloatToInt
public VFXExpressionOperation CastUintToInt
public VFXExpressionOperation RGBtoHSV
public VFXExpressionOperation HSVtoRGB
public VFXExpressionOperation Condition
public VFXExpressionOperation Branch
public VFXExpressionOperation GenerateRandom
public VFXExpressionOperation GenerateFixedRandom
public VFXExpressionOperation ExtractMatrixFromMainCamera
public VFXExpressionOperation ExtractFOVFromMainCamera
public VFXExpressionOperation ExtractNearPlaneFromMainCamera
public VFXExpressionOperation ExtractFarPlaneFromMainCamera
public VFXExpressionOperation ExtractAspectRatioFromMainCamera
public VFXExpressionOperation ExtractPixelDimensionsFromMainCamera
public VFXExpressionOperation LogicalAnd
public VFXExpressionOperation LogicalOr
public VFXExpressionOperation LogicalNot
public VFXExpressionOperation InverseTRS
}
public UnityEngine.Experimental.VFX.VFXExpressionValues : object {
internal IntPtr m_Ptr
internal VFXExpressionValues CreateExpressionValuesWrapper(IntPtr ptr)
public bool GetBool(int nameID)
public int GetInt(int nameID)
public UInt32 GetUInt(int nameID)
public float GetFloat(int nameID)
public Vector2 GetVector2(int nameID)
public Vector3 GetVector3(int nameID)
public Vector4 GetVector4(int nameID)
public Matrix4x4 GetMatrix4x4(int nameID)
public Texture GetTexture(int nameID)
public Mesh GetMesh(int nameID)
public AnimationCurve GetAnimationCurve(int nameID)
internal void Internal_GetAnimationCurveFromScript(int nameID, AnimationCurve curve)
public Gradient GetGradient(int nameID)
internal void Internal_GetGradientFromScript(int nameID, Gradient gradient)
public bool GetBool(string name)
public int GetInt(string name)
public UInt32 GetUInt(string name)
public float GetFloat(string name)
public Vector2 GetVector2(string name)
public Vector3 GetVector3(string name)
public Vector4 GetVector4(string name)
public Matrix4x4 GetMatrix4x4(string name)
public Texture GetTexture(string name)
public AnimationCurve GetAnimationCurve(string name)
public Gradient GetGradient(string name)
public Mesh GetMesh(string name)
private void GetVector2_Injected(int nameID, Vector2& ret)
private void GetVector3_Injected(int nameID, Vector3& ret)
private void GetVector4_Injected(int nameID, Vector4& ret)
private void GetMatrix4x4_Injected(int nameID, Matrix4x4& ret)
}
public UnityEngine.Experimental.VFX.VFXManager : object {
private Action`1<Camera> <>f__mg$cache0
private Action`1<Camera> <>f__mg$cache1
public float fixedTimeStep
public float maxDeltaTime
internal string renderPipeSettingsPath
public VisualEffect[] GetComponents()
public float get_fixedTimeStep()
public void set_fixedTimeStep(float value)
public float get_maxDeltaTime()
public void set_maxDeltaTime(float value)
internal string get_renderPipeSettingsPath()
internal void ProcessCamera(Camera cam)
internal void RegisterPerCameraCallback()
internal void UnregisterPerCameraCallback()
}
public UnityEngine.Experimental.VFX.VFXSpawnerCallbacks : ScriptableObject {
public void OnPlay(VFXSpawnerState state, VFXExpressionValues vfxValues, VisualEffect vfxComponent)
public void OnUpdate(VFXSpawnerState state, VFXExpressionValues vfxValues, VisualEffect vfxComponent)
public void OnStop(VFXSpawnerState state, VFXExpressionValues vfxValues, VisualEffect vfxComponent)
}
public UnityEngine.Experimental.VFX.VFXSpawnerState : object {
private IntPtr m_Ptr
private bool m_Owner
public bool playing
public float spawnCount
public float deltaTime
public float totalTime
public VFXEventAttribute vfxEventAttribute
internal void .ctor(IntPtr ptr, bool owner)
internal IntPtr Internal_Create()
internal VFXSpawnerState CreateSpawnerStateWrapper()
internal void SetWrapValue(IntPtr ptr)
private void Release()
protected void Finalize()
public void Dispose()
private void Internal_Destroy(IntPtr ptr)
public bool get_playing()
public void set_playing(bool value)
public float get_spawnCount()
public void set_spawnCount(float value)
public float get_deltaTime()
public void set_deltaTime(float value)
public float get_totalTime()
public void set_totalTime(float value)
public VFXEventAttribute get_vfxEventAttribute()
}
internal UnityEngine.Experimental.VFX.VFXSystemFlag : Enum {
public int value__
public VFXSystemFlag SystemDefault
public VFXSystemFlag SystemHasKill
public VFXSystemFlag SystemHasIndirectBuffer
public VFXSystemFlag SystemReceivedEventGPU
}
internal UnityEngine.Experimental.VFX.VFXSystemType : Enum {
public int value__
public VFXSystemType Spawner
public VFXSystemType Particle
public VFXSystemType Mesh
}
internal UnityEngine.Experimental.VFX.VFXTaskType : Enum {
public int value__
public VFXTaskType None
public VFXTaskType Spawner
public VFXTaskType Initialize
public VFXTaskType Update
public VFXTaskType Output
public VFXTaskType CameraSort
public VFXTaskType ParticlePointOutput
public VFXTaskType ParticleLineOutput
public VFXTaskType ParticleQuadOutput
public VFXTaskType ParticleHexahedronOutput
public VFXTaskType ParticleMeshOutput
public VFXTaskType ConstantRateSpawner
public VFXTaskType BurstSpawner
public VFXTaskType PeriodicBurstSpawner
public VFXTaskType VariableRateSpawner
public VFXTaskType CustomCallbackSpawner
public VFXTaskType SetAttributeSpawner
}
internal UnityEngine.Experimental.VFX.VFXUpdateMode : Enum {
public int value__
public VFXUpdateMode FixedDeltaTime
public VFXUpdateMode DeltaTime
}
internal UnityEngine.Experimental.VFX.VFXValueType : Enum {
public int value__
public VFXValueType None
public VFXValueType Float
public VFXValueType Float2
public VFXValueType Float3
public VFXValueType Float4
public VFXValueType Int32
public VFXValueType Uint32
public VFXValueType Texture2D
public VFXValueType Texture2DArray
public VFXValueType Texture3D
public VFXValueType TextureCube
public VFXValueType TextureCubeArray
public VFXValueType Matrix4x4
public VFXValueType Curve
public VFXValueType ColorGradient
public VFXValueType Mesh
public VFXValueType Spline
public VFXValueType Boolean
}
public UnityEngine.Experimental.VFX.VisualEffect : Behaviour {
public bool pause
public float playRate
public UInt32 startSeed
public bool resetSeedOnPlay
public bool culled
public VisualEffectAsset visualEffectAsset
public int aliveParticleCount
public bool get_pause()
public void set_pause(bool value)
public float get_playRate()
public void set_playRate(float value)
public UInt32 get_startSeed()
public void set_startSeed(UInt32 value)
public bool get_resetSeedOnPlay()
public void set_resetSeedOnPlay(bool value)
public bool get_culled()
public VisualEffectAsset get_visualEffectAsset()
public void set_visualEffectAsset(VisualEffectAsset value)
public VFXEventAttribute CreateVFXEventAttribute()
public void Play(VFXEventAttribute eventAttribute)
public void Play()
public void Stop(VFXEventAttribute eventAttribute)
public void Stop()
public void SendEvent(int eventNameID, VFXEventAttribute eventAttribute)
public void SendEvent(string eventName)
public void SendEvent(string eventName, VFXEventAttribute eventAttribute)
public void Reinit()
public void AdvanceOneFrame()
public void ResetOverride(int nameID)
public TextureDimension GetTextureDimension(int nameID)
public bool HasBool(int nameID)
public bool HasInt(int nameID)
public bool HasUInt(int nameID)
public bool HasFloat(int nameID)
public bool HasVector2(int nameID)
public bool HasVector3(int nameID)
public bool HasVector4(int nameID)
public bool HasMatrix4x4(int nameID)
public bool HasTexture(int nameID)
public bool HasAnimationCurve(int nameID)
public bool HasGradient(int nameID)
public bool HasMesh(int nameID)
public void SetBool(int nameID, bool b)
public void SetInt(int nameID, int i)
public void SetUInt(int nameID, UInt32 i)
public void SetFloat(int nameID, float f)
public void SetVector2(int nameID, Vector2 v)
public void SetVector3(int nameID, Vector3 v)
public void SetVector4(int nameID, Vector4 v)
public void SetMatrix4x4(int nameID, Matrix4x4 v)
public void SetTexture(int nameID, Texture t)
public void SetAnimationCurve(int nameID, AnimationCurve c)
public void SetGradient(int nameID, Gradient g)
public void SetMesh(int nameID, Mesh m)
public bool GetBool(int nameID)
public int GetInt(int nameID)
public UInt32 GetUInt(int nameID)
public float GetFloat(int nameID)
public Vector2 GetVector2(int nameID)
public Vector3 GetVector3(int nameID)
public Vector4 GetVector4(int nameID)
public Matrix4x4 GetMatrix4x4(int nameID)
public Texture GetTexture(int nameID)
public Mesh GetMesh(int nameID)
public Gradient GetGradient(int nameID)
private void Internal_GetGradient(int nameID, Gradient gradient)
public AnimationCurve GetAnimationCurve(int nameID)
private void Internal_GetAnimationCurve(int nameID, AnimationCurve curve)
public void ResetOverride(string name)
public bool HasInt(string name)
public bool HasUInt(string name)
public bool HasFloat(string name)
public bool HasVector2(string name)
public bool HasVector3(string name)
public bool HasVector4(string name)
public bool HasMatrix4x4(string name)
public bool HasTexture(string name)
public TextureDimension GetTextureDimension(string name)
public bool HasAnimationCurve(string name)
public bool HasGradient(string name)
public bool HasMesh(string name)
public bool HasBool(string name)
public void SetInt(string name, int i)
public void SetUInt(string name, UInt32 i)
public void SetFloat(string name, float f)
public void SetVector2(string name, Vector2 v)
public void SetVector3(string name, Vector3 v)
public void SetVector4(string name, Vector4 v)
public void SetMatrix4x4(string name, Matrix4x4 v)
public void SetTexture(string name, Texture t)
public void SetAnimationCurve(string name, AnimationCurve c)
public void SetGradient(string name, Gradient g)
public void SetMesh(string name, Mesh m)
public void SetBool(string name, bool b)
public int GetInt(string name)
public UInt32 GetUInt(string name)
public float GetFloat(string name)
public Vector2 GetVector2(string name)
public Vector3 GetVector3(string name)
public Vector4 GetVector4(string name)
public Matrix4x4 GetMatrix4x4(string name)
public Texture GetTexture(string name)
public Mesh GetMesh(string name)
public bool GetBool(string name)
public AnimationCurve GetAnimationCurve(string name)
public Gradient GetGradient(string name)
public int get_aliveParticleCount()
private void SetVector2_Injected(int nameID, Vector2& v)
private void SetVector3_Injected(int nameID, Vector3& v)
private void SetVector4_Injected(int nameID, Vector4& v)
private void SetMatrix4x4_Injected(int nameID, Matrix4x4& v)
private void GetVector2_Injected(int nameID, Vector2& ret)
private void GetVector3_Injected(int nameID, Vector3& ret)
private void GetVector4_Injected(int nameID, Vector4& ret)
private void GetMatrix4x4_Injected(int nameID, Matrix4x4& ret)
}
