public TMPro._HorizontalAlignmentOptions : Enum {
public int value__
public _HorizontalAlignmentOptions Left
public _HorizontalAlignmentOptions Center
public _HorizontalAlignmentOptions Right
public _HorizontalAlignmentOptions Justified
public _HorizontalAlignmentOptions Flush
public _HorizontalAlignmentOptions Geometry
}
public TMPro._VerticalAlignmentOptions : Enum {
public int value__
public _VerticalAlignmentOptions Top
public _VerticalAlignmentOptions Middle
public _VerticalAlignmentOptions Bottom
public _VerticalAlignmentOptions Baseline
public _VerticalAlignmentOptions Geometry
public _VerticalAlignmentOptions Capline
}
public TMPro.CaretInfo : ValueType {
public int index
public CaretPosition position
public void .ctor(int index, CaretPosition position)
}
public TMPro.CaretPosition : Enum {
public int value__
public CaretPosition None
public CaretPosition Left
public CaretPosition Right
}
public TMPro.ColorMode : Enum {
public int value__
public ColorMode Single
public ColorMode HorizontalGradient
public ColorMode VerticalGradient
public ColorMode FourCornersGradient
}
internal TMPro.ColorTween : ValueType {
private ColorTweenCallback m_Target
private Color m_StartColor
private Color m_TargetColor
private ColorTweenMode m_TweenMode
private float m_Duration
private bool m_IgnoreTimeScale
public Color startColor
public Color targetColor
public ColorTweenMode tweenMode
public float duration
public bool ignoreTimeScale
public Color get_startColor()
public void set_startColor(Color value)
public Color get_targetColor()
public void set_targetColor(Color value)
public ColorTweenMode get_tweenMode()
public void set_tweenMode(ColorTweenMode value)
public float get_duration()
public void set_duration(float value)
public bool get_ignoreTimeScale()
public void set_ignoreTimeScale(bool value)
public void TweenValue(float floatPercentage)
public void AddOnChangedCallback(UnityAction`1<Color> callback)
public bool GetIgnoreTimescale()
public float GetDuration()
public bool ValidTarget()
}
public TMPro.Compute_DistanceTransform_EventTypes : Enum {
public int value__
public Compute_DistanceTransform_EventTypes Processing
public Compute_DistanceTransform_EventTypes Completed
}
public TMPro.Compute_DT_EventArgs : object {
public Compute_DistanceTransform_EventTypes EventType
public float ProgressPercentage
public Color[] Colors
public void .ctor(Compute_DistanceTransform_EventTypes type, float progress)
public void .ctor(Compute_DistanceTransform_EventTypes type, Color[] colors)
}
public TMPro.Extents : ValueType {
public Vector2 min
public Vector2 max
public void .ctor(Vector2 min, Vector2 max)
public string ToString()
}
public TMPro.FaceInfo : object {
public string Name
public float PointSize
public float Scale
public int CharacterCount
public float LineHeight
public float Baseline
public float Ascender
public float CapHeight
public float Descender
public float CenterLine
public float SuperscriptOffset
public float SubscriptOffset
public float SubSize
public float Underline
public float UnderlineThickness
public float strikethrough
public float strikethroughThickness
public float TabWidth
public float Padding
public float AtlasWidth
public float AtlasHeight
}
public TMPro.FastAction : object {
private LinkedList`1<Action> delegates
private Dictionary`2<Action, LinkedListNode`1<Action>> lookup
public void Add(Action rhs)
public void Remove(Action rhs)
public void Call()
}
public TMPro.FastAction`1 : object {
private LinkedList`1<Action`1<A>> delegates
private Dictionary`2<Action`1<A>, LinkedListNode`1<Action`1<A>>> lookup
public void Add(Action`1<A> rhs)
public void Remove(Action`1<A> rhs)
public void Call(A a)
}
public TMPro.FastAction`2 : object {
private LinkedList`1<Action`2<A, B>> delegates
private Dictionary`2<Action`2<A, B>, LinkedListNode`1<Action`2<A, B>>> lookup
public void Add(Action`2<A, B> rhs)
public void Remove(Action`2<A, B> rhs)
public void Call(A a, B b)
}
public TMPro.FastAction`3 : object {
private LinkedList`1<Action`3<A, B, C>> delegates
private Dictionary`2<Action`3<A, B, C>, LinkedListNode`1<Action`3<A, B, C>>> lookup
public void Add(Action`3<A, B, C> rhs)
public void Remove(Action`3<A, B, C> rhs)
public void Call(A a, B b, C c)
}
internal TMPro.FloatTween : ValueType {
private FloatTweenCallback m_Target
private float m_StartValue
private float m_TargetValue
private float m_Duration
private bool m_IgnoreTimeScale
public float startValue
public float targetValue
public float duration
public bool ignoreTimeScale
public float get_startValue()
public void set_startValue(float value)
public float get_targetValue()
public void set_targetValue(float value)
public float get_duration()
public void set_duration(float value)
public bool get_ignoreTimeScale()
public void set_ignoreTimeScale(bool value)
public void TweenValue(float floatPercentage)
public void AddOnChangedCallback(UnityAction`1<float> callback)
public bool GetIgnoreTimescale()
public float GetDuration()
public bool ValidTarget()
}
public TMPro.FontAssetCreationSettings : ValueType {
public string sourceFontFileName
public string sourceFontFileGUID
public int pointSizeSamplingMode
public int pointSize
public int padding
public int packingMode
public int atlasWidth
public int atlasHeight
public int characterSetSelectionMode
public string characterSequence
public string referencedFontAssetGUID
public string referencedTextAssetGUID
public int fontStyle
public float fontStyleModifier
public int renderMode
public bool includeFontFeatures
}
public TMPro.FontStyles : Enum {
public int value__
public FontStyles Normal
public FontStyles Bold
public FontStyles Italic
public FontStyles Underline
public FontStyles LowerCase
public FontStyles UpperCase
public FontStyles SmallCaps
public FontStyles Strikethrough
public FontStyles Superscript
public FontStyles Subscript
public FontStyles Highlight
}
public TMPro.FontWeights : Enum {
public int value__
public FontWeights Thin
public FontWeights ExtraLight
public FontWeights Light
public FontWeights Normal
public FontWeights Medium
public FontWeights SemiBold
public FontWeights Bold
public FontWeights Heavy
public FontWeights Black
}
public TMPro.GlyphValueRecord : ValueType {
public float xPlacement
public float yPlacement
public float xAdvance
public float yAdvance
public GlyphValueRecord op_Addition(GlyphValueRecord a, GlyphValueRecord b)
}
public TMPro.ITextElement {
public Material sharedMaterial
public Material get_sharedMaterial()
public void Rebuild(CanvasUpdate update)
public int GetInstanceID()
}
internal TMPro.ITweenValue {
public bool ignoreTimeScale
public float duration
public void TweenValue(float floatPercentage)
public bool get_ignoreTimeScale()
public float get_duration()
public bool ValidTarget()
}
public TMPro.KerningPair : object {
private UInt32 m_FirstGlyph
private GlyphValueRecord m_FirstGlyphAdjustments
private UInt32 m_SecondGlyph
private GlyphValueRecord m_SecondGlyphAdjustments
public float xOffset
public UInt32 firstGlyph
public GlyphValueRecord firstGlyphAdjustments
public UInt32 secondGlyph
public GlyphValueRecord secondGlyphAdjustments
public UInt32 get_firstGlyph()
public void set_firstGlyph(UInt32 value)
public GlyphValueRecord get_firstGlyphAdjustments()
public UInt32 get_secondGlyph()
public void set_secondGlyph(UInt32 value)
public GlyphValueRecord get_secondGlyphAdjustments()
public void .ctor(UInt32 left, UInt32 right, float offset)
public void .ctor(UInt32 firstGlyph, GlyphValueRecord firstGlyphAdjustments, UInt32 secondGlyph, GlyphValueRecord secondGlyphAdjustments)
internal void ConvertLegacyKerningData()
}
public TMPro.KerningPairKey : ValueType {
public UInt32 ascii_Left
public UInt32 ascii_Right
public UInt32 key
public void .ctor(UInt32 ascii_left, UInt32 ascii_right)
}
public TMPro.KerningTable : object {
public List`1<KerningPair> kerningPairs
public void AddKerningPair()
public int AddKerningPair(UInt32 first, UInt32 second, float offset)
public int AddGlyphPairAdjustmentRecord(UInt32 first, GlyphValueRecord firstAdjustments, UInt32 second, GlyphValueRecord secondAdjustments)
public void RemoveKerningPair(int left, int right)
public void RemoveKerningPair(int index)
public void SortKerningPairs()
}
public TMPro.MaskingOffsetMode : Enum {
public int value__
public MaskingOffsetMode Percentage
public MaskingOffsetMode Pixel
}
public TMPro.MaskingTypes : Enum {
public int value__
public MaskingTypes MaskOff
public MaskingTypes MaskHard
public MaskingTypes MaskSoft
}
public TMPro.MaterialReference : ValueType {
public int index
public TMP_FontAsset fontAsset
public TMP_SpriteAsset spriteAsset
public Material material
public bool isDefaultMaterial
public bool isFallbackMaterial
public Material fallbackMaterial
public float padding
public int referenceCount
public void .ctor(int index, TMP_FontAsset fontAsset, TMP_SpriteAsset spriteAsset, Material material, float padding)
public bool Contains(MaterialReference[] materialReferences, TMP_FontAsset fontAsset)
public int AddMaterialReference(Material material, TMP_FontAsset fontAsset, MaterialReference[] materialReferences, Dictionary`2<int, int> materialReferenceIndexLookup)
public int AddMaterialReference(Material material, TMP_SpriteAsset spriteAsset, MaterialReference[] materialReferences, Dictionary`2<int, int> materialReferenceIndexLookup)
}
public TMPro.MaterialReferenceManager : object {
private MaterialReferenceManager s_Instance
private Dictionary`2<int, Material> m_FontMaterialReferenceLookup
private Dictionary`2<int, TMP_FontAsset> m_FontAssetReferenceLookup
private Dictionary`2<int, TMP_SpriteAsset> m_SpriteAssetReferenceLookup
private Dictionary`2<int, TMP_ColorGradient> m_ColorGradientReferenceLookup
public MaterialReferenceManager instance
public MaterialReferenceManager get_instance()
public void AddFontAsset(TMP_FontAsset fontAsset)
private void AddFontAssetInternal(TMP_FontAsset fontAsset)
public void AddSpriteAsset(TMP_SpriteAsset spriteAsset)
private void AddSpriteAssetInternal(TMP_SpriteAsset spriteAsset)
public void AddSpriteAsset(int hashCode, TMP_SpriteAsset spriteAsset)
private void AddSpriteAssetInternal(int hashCode, TMP_SpriteAsset spriteAsset)
public void AddFontMaterial(int hashCode, Material material)
private void AddFontMaterialInternal(int hashCode, Material material)
public void AddColorGradientPreset(int hashCode, TMP_ColorGradient spriteAsset)
private void AddColorGradientPreset_Internal(int hashCode, TMP_ColorGradient spriteAsset)
public bool Contains(TMP_FontAsset font)
public bool Contains(TMP_SpriteAsset sprite)
public bool TryGetFontAsset(int hashCode, TMP_FontAsset& fontAsset)
private bool TryGetFontAssetInternal(int hashCode, TMP_FontAsset& fontAsset)
public bool TryGetSpriteAsset(int hashCode, TMP_SpriteAsset& spriteAsset)
private bool TryGetSpriteAssetInternal(int hashCode, TMP_SpriteAsset& spriteAsset)
public bool TryGetColorGradientPreset(int hashCode, TMP_ColorGradient& gradientPreset)
private bool TryGetColorGradientPresetInternal(int hashCode, TMP_ColorGradient& gradientPreset)
public bool TryGetMaterial(int hashCode, Material& material)
private bool TryGetMaterialInternal(int hashCode, Material& material)
}
public TMPro.Mesh_Extents : ValueType {
public Vector2 min
public Vector2 max
public void .ctor(Vector2 min, Vector2 max)
public string ToString()
}
internal TMPro.SetPropertyUtility : object {
public bool SetColor(Color& currentValue, Color newValue)
public bool SetEquatableStruct(T& currentValue, T newValue)
public bool SetStruct(T& currentValue, T newValue)
public bool SetClass(T& currentValue, T newValue)
}
public TMPro.ShaderUtilities : object {
public int ID_MainTex
public int ID_FaceTex
public int ID_FaceColor
public int ID_FaceDilate
public int ID_Shininess
public int ID_UnderlayColor
public int ID_UnderlayOffsetX
public int ID_UnderlayOffsetY
public int ID_UnderlayDilate
public int ID_UnderlaySoftness
public int ID_WeightNormal
public int ID_WeightBold
public int ID_OutlineTex
public int ID_OutlineWidth
public int ID_OutlineSoftness
public int ID_OutlineColor
public int ID_Padding
public int ID_GradientScale
public int ID_ScaleX
public int ID_ScaleY
public int ID_PerspectiveFilter
public int ID_TextureWidth
public int ID_TextureHeight
public int ID_BevelAmount
public int ID_GlowColor
public int ID_GlowOffset
public int ID_GlowPower
public int ID_GlowOuter
public int ID_LightAngle
public int ID_EnvMap
public int ID_EnvMatrix
public int ID_EnvMatrixRotation
public int ID_MaskCoord
public int ID_ClipRect
public int ID_MaskSoftnessX
public int ID_MaskSoftnessY
public int ID_VertexOffsetX
public int ID_VertexOffsetY
public int ID_UseClipRect
public int ID_StencilID
public int ID_StencilOp
public int ID_StencilComp
public int ID_StencilReadMask
public int ID_StencilWriteMask
public int ID_ShaderFlags
public int ID_ScaleRatio_A
public int ID_ScaleRatio_B
public int ID_ScaleRatio_C
public string Keyword_Bevel
public string Keyword_Glow
public string Keyword_Underlay
public string Keyword_Ratios
public string Keyword_MASK_SOFT
public string Keyword_MASK_HARD
public string Keyword_MASK_TEX
public string Keyword_Outline
public string ShaderTag_ZTestMode
public string ShaderTag_CullMode
private float m_clamp
public bool isInitialized
public void GetShaderPropertyIDs()
public void UpdateShaderRatios(Material mat)
public Vector4 GetFontExtent(Material material)
public bool IsMaskingEnabled(Material material)
public float GetPadding(Material material, bool enableExtraPadding, bool isBold)
public float GetPadding(Material[] materials, bool enableExtraPadding, bool isBold)
}
public TMPro.SpriteAssetUtilities.SpriteAssetImportFormats : Enum {
public int value__
public SpriteAssetImportFormats None
public SpriteAssetImportFormats TexturePacker
}
public TMPro.TagAttribute : ValueType {
public int startIndex
public int length
public int hashCode
}
public TMPro.TagType : Enum {
public int value__
public TagType None
public TagType NumericalValue
public TagType StringValue
public TagType ColorValue
}
public TMPro.TagUnits : Enum {
public int value__
public TagUnits Pixels
public TagUnits FontUnits
public TagUnits Percentage
}
public TMPro.TextAlignmentOptions : Enum {
public int value__
public TextAlignmentOptions TopLeft
public TextAlignmentOptions Top
public TextAlignmentOptions TopRight
public TextAlignmentOptions TopJustified
public TextAlignmentOptions TopFlush
public TextAlignmentOptions TopGeoAligned
public TextAlignmentOptions Left
public TextAlignmentOptions Center
public TextAlignmentOptions Right
public TextAlignmentOptions Justified
public TextAlignmentOptions Flush
public TextAlignmentOptions CenterGeoAligned
public TextAlignmentOptions BottomLeft
public TextAlignmentOptions Bottom
public TextAlignmentOptions BottomRight
public TextAlignmentOptions BottomJustified
public TextAlignmentOptions BottomFlush
public TextAlignmentOptions BottomGeoAligned
public TextAlignmentOptions BaselineLeft
public TextAlignmentOptions Baseline
public TextAlignmentOptions BaselineRight
public TextAlignmentOptions BaselineJustified
public TextAlignmentOptions BaselineFlush
public TextAlignmentOptions BaselineGeoAligned
public TextAlignmentOptions MidlineLeft
public TextAlignmentOptions Midline
public TextAlignmentOptions MidlineRight
public TextAlignmentOptions MidlineJustified
public TextAlignmentOptions MidlineFlush
public TextAlignmentOptions MidlineGeoAligned
public TextAlignmentOptions CaplineLeft
public TextAlignmentOptions Capline
public TextAlignmentOptions CaplineRight
public TextAlignmentOptions CaplineJustified
public TextAlignmentOptions CaplineFlush
public TextAlignmentOptions CaplineGeoAligned
}
public TMPro.TextContainer : UIBehaviour {
private bool m_hasChanged
private Vector2 m_pivot
private TextContainerAnchors m_anchorPosition
private Rect m_rect
private bool m_isDefaultWidth
private bool m_isDefaultHeight
private bool m_isAutoFitting
private Vector3[] m_corners
private Vector3[] m_worldCorners
private Vector4 m_margins
private RectTransform m_rectTransform
private Vector2 k_defaultSize
private TextMeshPro m_textMeshPro
public bool hasChanged
public Vector2 pivot
public TextContainerAnchors anchorPosition
public Rect rect
public Vector2 size
public float width
public float height
public bool isDefaultWidth
public bool isDefaultHeight
public bool isAutoFitting
public Vector3[] corners
public Vector3[] worldCorners
public Vector4 margins
public RectTransform rectTransform
public TextMeshPro textMeshPro
public bool get_hasChanged()
public void set_hasChanged(bool value)
public Vector2 get_pivot()
public void set_pivot(Vector2 value)
public TextContainerAnchors get_anchorPosition()
public void set_anchorPosition(TextContainerAnchors value)
public Rect get_rect()
public void set_rect(Rect value)
public Vector2 get_size()
public void set_size(Vector2 value)
public float get_width()
public void set_width(float value)
public float get_height()
public void set_height(float value)
public bool get_isDefaultWidth()
public bool get_isDefaultHeight()
public bool get_isAutoFitting()
public void set_isAutoFitting(bool value)
public Vector3[] get_corners()
public Vector3[] get_worldCorners()
public Vector4 get_margins()
public void set_margins(Vector4 value)
public RectTransform get_rectTransform()
public TextMeshPro get_textMeshPro()
protected void Awake()
protected void OnEnable()
protected void OnDisable()
private void OnContainerChanged()
protected void OnRectTransformDimensionsChange()
private void SetRect(Vector2 size)
private void UpdateCorners()
private Vector2 GetPivot(TextContainerAnchors anchor)
private TextContainerAnchors GetAnchorPosition(Vector2 pivot)
}
public TMPro.TextContainerAnchors : Enum {
public int value__
public TextContainerAnchors TopLeft
public TextContainerAnchors Top
public TextContainerAnchors TopRight
public TextContainerAnchors Left
public TextContainerAnchors Middle
public TextContainerAnchors Right
public TextContainerAnchors BottomLeft
public TextContainerAnchors Bottom
public TextContainerAnchors BottomRight
public TextContainerAnchors Custom
}
public TMPro.TextMeshPro : TMP_Text {
private bool m_currentAutoSizeMode
private bool m_hasFontAssetChanged
private float m_previousLossyScaleY
private Renderer m_renderer
private MeshFilter m_meshFilter
private bool m_isFirstAllocation
private int m_max_characters
private int m_max_numberOfLines
private Bounds m_default_bounds
protected TMP_SubMesh[] m_subTextObjects
private bool m_isMaskingEnabled
private bool isMaskUpdateRequired
private MaskingTypes m_maskType
private Matrix4x4 m_EnvMapMatrix
private Vector3[] m_RectTransformCorners
private bool m_isRegisteredForEvents
private int loopCountA
public int sortingLayerID
public int sortingOrder
public bool autoSizeTextContainer
public TextContainer textContainer
public Transform transform
public Renderer renderer
public Mesh mesh
public MeshFilter meshFilter
public MaskingTypes maskType
public int get_sortingLayerID()
public void set_sortingLayerID(int value)
public int get_sortingOrder()
public void set_sortingOrder(int value)
public bool get_autoSizeTextContainer()
public void set_autoSizeTextContainer(bool value)
public TextContainer get_textContainer()
public Transform get_transform()
public Renderer get_renderer()
public Mesh get_mesh()
public MeshFilter get_meshFilter()
public MaskingTypes get_maskType()
public void set_maskType(MaskingTypes value)
public void SetMask(MaskingTypes type, Vector4 maskCoords)
public void SetMask(MaskingTypes type, Vector4 maskCoords, float softnessX, float softnessY)
public void SetVerticesDirty()
public void SetLayoutDirty()
public void SetMaterialDirty()
public void SetAllDirty()
public void Rebuild(CanvasUpdate update)
protected void UpdateMaterial()
public void UpdateMeshPadding()
public void ForceMeshUpdate()
public void ForceMeshUpdate(bool ignoreInactive)
public TMP_TextInfo GetTextInfo(string text)
public void ClearMesh(bool updateMesh)
public void UpdateGeometry(Mesh mesh, int index)
public void UpdateVertexData(TMP_VertexDataUpdateFlags flags)
public void UpdateVertexData()
public void UpdateFontAsset()
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
protected void Awake()
protected void OnEnable()
protected void OnDisable()
protected void OnDestroy()
protected void LoadFontAsset()
private void UpdateEnvMapMatrix()
private void SetMask(MaskingTypes maskType)
private void SetMaskCoordinates(Vector4 coords)
private void SetMaskCoordinates(Vector4 coords, float softX, float softY)
private void EnableMasking()
private void DisableMasking()
private void UpdateMask()
protected Material GetMaterial(Material mat)
protected Material[] GetMaterials(Material[] mats)
protected void SetSharedMaterial(Material mat)
protected Material[] GetSharedMaterials()
protected void SetSharedMaterials(Material[] materials)
protected void SetOutlineThickness(float thickness)
protected void SetFaceColor(Color32 color)
protected void SetOutlineColor(Color32 color)
private void CreateMaterialInstance()
protected void SetShaderDepth()
protected void SetCulling()
private void SetPerspectiveCorrection()
protected float GetPaddingForMaterial(Material mat)
protected float GetPaddingForMaterial()
protected int SetArraySizes(Int32[] chars)
public void ComputeMarginSize()
protected void OnDidApplyAnimationProperties()
protected void OnTransformParentChanged()
protected void OnRectTransformDimensionsChange()
private void LateUpdate()
private void OnPreRenderObject()
protected void GenerateTextMesh()
protected Vector3[] GetTextContainerLocalCorners()
private void SetMeshFilters(bool state)
protected void SetActiveSubMeshes(bool state)
protected void ClearSubMeshObjects()
protected Bounds GetCompoundBounds()
private void UpdateSDFScale(float lossyScale)
protected void AdjustLineOffset(int startIndex, int endIndex, float offset)
}
public TMPro.TextMeshProUGUI : TMP_Text {
private bool m_isRebuildingLayout
private bool m_hasFontAssetChanged
protected TMP_SubMeshUI[] m_subTextObjects
private float m_previousLossyScaleY
private Vector3[] m_RectTransformCorners
private CanvasRenderer m_canvasRenderer
private Canvas m_canvas
private bool m_isFirstAllocation
private int m_max_characters
private bool m_isMaskingEnabled
private Material m_baseMaterial
private bool m_isScrollRegionSet
private int m_stencilID
private Vector4 m_maskOffset
private Matrix4x4 m_EnvMapMatrix
private bool m_isRegisteredForEvents
private int m_recursiveCountA
private int loopCountA
public Material materialForRendering
public bool autoSizeTextContainer
public Mesh mesh
public CanvasRenderer canvasRenderer
public Vector4 maskOffset
public Material get_materialForRendering()
public bool get_autoSizeTextContainer()
public void set_autoSizeTextContainer(bool value)
public Mesh get_mesh()
public CanvasRenderer get_canvasRenderer()
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public void SetVerticesDirty()
public void SetLayoutDirty()
public void SetMaterialDirty()
public void SetAllDirty()
public void Rebuild(CanvasUpdate update)
private void UpdateSubObjectPivot()
public Material GetModifiedMaterial(Material baseMaterial)
protected void UpdateMaterial()
public Vector4 get_maskOffset()
public void set_maskOffset(Vector4 value)
public void RecalculateClipping()
public void RecalculateMasking()
public void Cull(Rect clipRect, bool validRect)
public void UpdateMeshPadding()
protected void InternalCrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha)
protected void InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale)
public void ForceMeshUpdate()
public void ForceMeshUpdate(bool ignoreInactive)
public TMP_TextInfo GetTextInfo(string text)
public void ClearMesh()
public void UpdateGeometry(Mesh mesh, int index)
public void UpdateVertexData(TMP_VertexDataUpdateFlags flags)
public void UpdateVertexData()
public void UpdateFontAsset()
protected void Awake()
protected void OnEnable()
protected void OnDisable()
protected void OnDestroy()
protected void LoadFontAsset()
private Canvas GetCanvas()
private void UpdateEnvMapMatrix()
private void EnableMasking()
private void DisableMasking()
private void UpdateMask()
protected Material GetMaterial(Material mat)
protected Material[] GetMaterials(Material[] mats)
protected void SetSharedMaterial(Material mat)
protected Material[] GetSharedMaterials()
protected void SetSharedMaterials(Material[] materials)
protected void SetOutlineThickness(float thickness)
protected void SetFaceColor(Color32 color)
protected void SetOutlineColor(Color32 color)
protected void SetShaderDepth()
protected void SetCulling()
private void SetPerspectiveCorrection()
protected float GetPaddingForMaterial(Material mat)
protected float GetPaddingForMaterial()
private void SetMeshArrays(int size)
protected int SetArraySizes(Int32[] chars)
public void ComputeMarginSize()
protected void OnDidApplyAnimationProperties()
protected void OnCanvasHierarchyChanged()
protected void OnTransformParentChanged()
protected void OnRectTransformDimensionsChange()
private void LateUpdate()
private void OnPreRenderCanvas()
protected void GenerateTextMesh()
protected Vector3[] GetTextContainerLocalCorners()
protected void SetActiveSubMeshes(bool state)
protected Bounds GetCompoundBounds()
private void UpdateSDFScale(float lossyScale)
protected void AdjustLineOffset(int startIndex, int endIndex, float offset)
}
public TMPro.TextOverflowModes : Enum {
public int value__
public TextOverflowModes Overflow
public TextOverflowModes Ellipsis
public TextOverflowModes Masking
public TextOverflowModes Truncate
public TextOverflowModes ScrollRect
public TextOverflowModes Page
public TextOverflowModes Linked
}
public TMPro.TextRenderFlags : Enum {
public int value__
public TextRenderFlags DontRender
public TextRenderFlags Render
}
public TMPro.TextureMappingOptions : Enum {
public int value__
public TextureMappingOptions Character
public TextureMappingOptions Line
public TextureMappingOptions Paragraph
public TextureMappingOptions MatchAspect
}
public TMPro.TMP_Asset : ScriptableObject {
public int hashCode
public Material material
public int materialHashCode
}
public TMPro.TMP_BasicXmlTagStack : ValueType {
public byte bold
public byte italic
public byte underline
public byte strikethrough
public byte highlight
public byte superscript
public byte subscript
public byte uppercase
public byte lowercase
public byte smallcaps
public void Clear()
public byte Add(FontStyles style)
public byte Remove(FontStyles style)
}
public TMPro.TMP_CharacterInfo : ValueType {
public char character
public int index
public TMP_TextElementType elementType
public TMP_TextElement textElement
public TMP_FontAsset fontAsset
public TMP_SpriteAsset spriteAsset
public int spriteIndex
public Material material
public int materialReferenceIndex
public bool isUsingAlternateTypeface
public float pointSize
public int lineNumber
public int pageNumber
public int vertexIndex
public TMP_Vertex vertex_TL
public TMP_Vertex vertex_BL
public TMP_Vertex vertex_TR
public TMP_Vertex vertex_BR
public Vector3 topLeft
public Vector3 bottomLeft
public Vector3 topRight
public Vector3 bottomRight
public float origin
public float ascender
public float baseLine
public float descender
public float xAdvance
public float aspectRatio
public float scale
public Color32 color
public Color32 underlineColor
public Color32 strikethroughColor
public Color32 highlightColor
public FontStyles style
public bool isVisible
}
public TMPro.TMP_ColorGradient : ScriptableObject {
public ColorMode colorMode
public Color topLeft
public Color topRight
public Color bottomLeft
public Color bottomRight
private ColorMode k_DefaultColorMode
private Color k_DefaultColor
public void .ctor(Color color)
public void .ctor(Color color0, Color color1, Color color2, Color color3)
}
public TMPro.TMP_Compatibility : object {
public TextAlignmentOptions ConvertTextAlignmentEnumValues(TextAlignmentOptions oldValue)
}
public TMPro.TMP_DefaultControls : object {
private float kWidth
private float kThickHeight
private float kThinHeight
private Vector2 s_ThickElementSize
private Vector2 s_ThinElementSize
private Color s_DefaultSelectableColor
private Color s_TextColor
private GameObject CreateUIElementRoot(string name, Vector2 size)
private GameObject CreateUIObject(string name, GameObject parent)
private void SetDefaultTextValues(TMP_Text lbl)
private void SetDefaultColorTransitionValues(Selectable slider)
private void SetParentAndAlign(GameObject child, GameObject parent)
private void SetLayerRecursively(GameObject go, int layer)
public GameObject CreateScrollbar(Resources resources)
public GameObject CreateInputField(Resources resources)
public GameObject CreateDropdown(Resources resources)
}
public TMPro.TMP_Dropdown : Selectable {
private RectTransform m_Template
private TMP_Text m_CaptionText
private Image m_CaptionImage
private TMP_Text m_ItemText
private Image m_ItemImage
private int m_Value
private OptionDataList m_Options
private DropdownEvent m_OnValueChanged
private GameObject m_Dropdown
private GameObject m_Blocker
private List`1<DropdownItem> m_Items
private TweenRunner`1<FloatTween> m_AlphaTweenRunner
private bool validTemplate
private OptionData s_NoOptionData
public RectTransform template
public TMP_Text captionText
public Image captionImage
public TMP_Text itemText
public Image itemImage
public List`1<OptionData> options
public DropdownEvent onValueChanged
public int value
public bool IsExpanded
public RectTransform get_template()
public void set_template(RectTransform value)
public TMP_Text get_captionText()
public void set_captionText(TMP_Text value)
public Image get_captionImage()
public void set_captionImage(Image value)
public TMP_Text get_itemText()
public void set_itemText(TMP_Text value)
public Image get_itemImage()
public void set_itemImage(Image value)
public List`1<OptionData> get_options()
public void set_options(List`1<OptionData> value)
public DropdownEvent get_onValueChanged()
public void set_onValueChanged(DropdownEvent value)
public int get_value()
public void set_value(int value)
public bool get_IsExpanded()
protected void Awake()
public void RefreshShownValue()
public void AddOptions(List`1<OptionData> options)
public void AddOptions(List`1<string> options)
public void AddOptions(List`1<Sprite> options)
public void ClearOptions()
private void SetupTemplate()
private T GetOrAddComponent(GameObject go)
public void OnPointerClick(PointerEventData eventData)
public void OnSubmit(BaseEventData eventData)
public void OnCancel(BaseEventData eventData)
public void Show()
protected GameObject CreateBlocker(Canvas rootCanvas)
protected void DestroyBlocker(GameObject blocker)
protected GameObject CreateDropdownList(GameObject template)
protected void DestroyDropdownList(GameObject dropdownList)
protected DropdownItem CreateItem(DropdownItem itemTemplate)
protected void DestroyItem(DropdownItem item)
private DropdownItem AddItem(OptionData data, bool selected, DropdownItem itemTemplate, List`1<DropdownItem> items)
private void AlphaFadeList(float duration, float alpha)
private void AlphaFadeList(float duration, float start, float end)
private void SetAlpha(float alpha)
public void Hide()
private IEnumerator DelayedDestroyDropdownList(float delay)
private void OnSelectItem(Toggle toggle)
}
public TMPro.TMP_FontAsset : TMP_Asset {
private TMP_FontAsset s_defaultFontAsset
public FontAssetTypes fontAssetType
private FaceInfo m_fontInfo
public Texture2D atlas
private List`1<TMP_Glyph> m_glyphInfoList
private Dictionary`2<int, TMP_Glyph> m_characterDictionary
private Dictionary`2<int, KerningPair> m_kerningDictionary
private KerningTable m_kerningInfo
private KerningPair m_kerningPair
public List`1<TMP_FontAsset> fallbackFontAssets
public FontAssetCreationSettings m_CreationSettings
public TMP_FontWeights[] fontWeights
private Int32[] m_characterSet
public float normalStyle
public float normalSpacingOffset
public float boldStyle
public float boldSpacing
public byte italicStyle
public byte tabSize
private byte m_oldTabSize
public TMP_FontAsset defaultFontAsset
public FaceInfo fontInfo
public Dictionary`2<int, TMP_Glyph> characterDictionary
public Dictionary`2<int, KerningPair> kerningDictionary
public KerningTable kerningInfo
public FontAssetCreationSettings creationSettings
public TMP_FontAsset get_defaultFontAsset()
public FaceInfo get_fontInfo()
public Dictionary`2<int, TMP_Glyph> get_characterDictionary()
public Dictionary`2<int, KerningPair> get_kerningDictionary()
public KerningTable get_kerningInfo()
public FontAssetCreationSettings get_creationSettings()
public void set_creationSettings(FontAssetCreationSettings value)
private void OnEnable()
private void OnDisable()
public void AddFaceInfo(FaceInfo faceInfo)
public void AddGlyphInfo(TMP_Glyph[] glyphInfo)
public void AddKerningInfo(KerningTable kerningTable)
public void ReadFontDefinition()
public void SortGlyphs()
public bool HasCharacter(int character)
public bool HasCharacter(char character)
public bool HasCharacter(char character, bool searchFallbacks)
private bool HasCharacter_Internal(char character, bool searchFallbacks)
public bool HasCharacters(string text, List`1& missingCharacters)
public bool HasCharacters(string text)
public string GetCharacters(TMP_FontAsset fontAsset)
public Int32[] GetCharactersArray(TMP_FontAsset fontAsset)
}
public TMPro.TMP_FontUtilities : object {
private List`1<int> k_searchedFontAssets
public TMP_FontAsset SearchForGlyph(TMP_FontAsset font, int character, TMP_Glyph& glyph)
public TMP_FontAsset SearchForGlyph(List`1<TMP_FontAsset> fonts, int character, TMP_Glyph& glyph)
private TMP_FontAsset SearchForGlyphInternal(TMP_FontAsset font, int character, TMP_Glyph& glyph)
private TMP_FontAsset SearchForGlyphInternal(List`1<TMP_FontAsset> fonts, int character, TMP_Glyph& glyph)
}
public TMPro.TMP_FontWeights : ValueType {
public TMP_FontAsset regularTypeface
public TMP_FontAsset italicTypeface
}
public TMPro.TMP_Glyph : TMP_TextElement {
public TMP_Glyph Clone(TMP_Glyph source)
}
public TMPro.TMP_InputField : Selectable {
protected TouchScreenKeyboard m_Keyboard
private Char[] kSeparators
protected RectTransform m_TextViewport
protected TMP_Text m_TextComponent
protected RectTransform m_TextComponentRectTransform
protected Graphic m_Placeholder
protected Scrollbar m_VerticalScrollbar
protected TMP_ScrollbarEventHandler m_VerticalScrollbarEventHandler
private float m_ScrollPosition
protected float m_ScrollSensitivity
private ContentType m_ContentType
private InputType m_InputType
private char m_AsteriskChar
private TouchScreenKeyboardType m_KeyboardType
private LineType m_LineType
private bool m_HideMobileInput
private CharacterValidation m_CharacterValidation
private string m_RegexValue
private float m_GlobalPointSize
private int m_CharacterLimit
private SubmitEvent m_OnEndEdit
private SubmitEvent m_OnSubmit
private SelectionEvent m_OnSelect
private SelectionEvent m_OnDeselect
private TextSelectionEvent m_OnTextSelection
private TextSelectionEvent m_OnEndTextSelection
private OnChangeEvent m_OnValueChanged
private OnValidateInput m_OnValidateInput
private Color m_CaretColor
private bool m_CustomCaretColor
private Color m_SelectionColor
protected string m_Text
private float m_CaretBlinkRate
private int m_CaretWidth
private bool m_ReadOnly
private bool m_RichText
protected int m_StringPosition
protected int m_StringSelectPosition
protected int m_CaretPosition
protected int m_CaretSelectPosition
private RectTransform caretRectTrans
protected UIVertex[] m_CursorVerts
private CanvasRenderer m_CachedInputRenderer
private Vector2 m_DefaultTransformPosition
private Vector2 m_LastPosition
protected Mesh m_Mesh
private bool m_AllowInput
private bool m_ShouldActivateNextUpdate
private bool m_UpdateDrag
private bool m_DragPositionOutOfBounds
private float kHScrollSpeed
private float kVScrollSpeed
protected bool m_CaretVisible
private Coroutine m_BlinkCoroutine
private float m_BlinkStartTime
private Coroutine m_DragCoroutine
private string m_OriginalText
private bool m_WasCanceled
private bool m_HasDoneFocusTransition
private bool m_IsScrollbarUpdateRequired
private bool m_IsUpdatingScrollbarValues
private bool m_isLastKeyBackspace
private float m_ClickStartTime
private float m_DoubleClickDelay
private string kEmailSpecialCharacters
protected TMP_FontAsset m_GlobalFontAsset
protected bool m_OnFocusSelectAll
protected bool m_isSelectAll
protected bool m_ResetOnDeActivation
private bool m_RestoreOriginalTextOnEscape
protected bool m_isRichTextEditingAllowed
protected TMP_InputValidator m_InputValidator
private bool m_isSelected
private bool isStringPositionDirty
private bool m_forceRectTransformAdjustment
private Event m_ProcessingEvent
protected Mesh mesh
public bool shouldHideMobileInput
public string text
public bool isFocused
public float caretBlinkRate
public int caretWidth
public RectTransform textViewport
public TMP_Text textComponent
public Graphic placeholder
public Scrollbar verticalScrollbar
public float scrollSensitivity
public Color caretColor
public bool customCaretColor
public Color selectionColor
public SubmitEvent onEndEdit
public SubmitEvent onSubmit
public SelectionEvent onSelect
public SelectionEvent onDeselect
public TextSelectionEvent onTextSelection
public TextSelectionEvent onEndTextSelection
public OnChangeEvent onValueChanged
public OnValidateInput onValidateInput
public int characterLimit
public float pointSize
public TMP_FontAsset fontAsset
public bool onFocusSelectAll
public bool resetOnDeActivation
public bool restoreOriginalTextOnEscape
public bool isRichTextEditingAllowed
public ContentType contentType
public LineType lineType
public InputType inputType
public TouchScreenKeyboardType keyboardType
public CharacterValidation characterValidation
public TMP_InputValidator inputValidator
public bool readOnly
public bool richText
public bool multiLine
public char asteriskChar
public bool wasCanceled
protected int caretPositionInternal
protected int stringPositionInternal
protected int caretSelectPositionInternal
protected int stringSelectPositionInternal
private bool hasSelection
public int caretPosition
public int selectionAnchorPosition
public int selectionFocusPosition
public int stringPosition
public int selectionStringAnchorPosition
public int selectionStringFocusPosition
private string clipboard
protected Mesh get_mesh()
public void set_shouldHideMobileInput(bool value)
public bool get_shouldHideMobileInput()
public string get_text()
public void set_text(string value)
public bool get_isFocused()
public float get_caretBlinkRate()
public void set_caretBlinkRate(float value)
public int get_caretWidth()
public void set_caretWidth(int value)
public RectTransform get_textViewport()
public void set_textViewport(RectTransform value)
public TMP_Text get_textComponent()
public void set_textComponent(TMP_Text value)
public Graphic get_placeholder()
public void set_placeholder(Graphic value)
public Scrollbar get_verticalScrollbar()
public void set_verticalScrollbar(Scrollbar value)
public float get_scrollSensitivity()
public void set_scrollSensitivity(float value)
public Color get_caretColor()
public void set_caretColor(Color value)
public bool get_customCaretColor()
public void set_customCaretColor(bool value)
public Color get_selectionColor()
public void set_selectionColor(Color value)
public SubmitEvent get_onEndEdit()
public void set_onEndEdit(SubmitEvent value)
public SubmitEvent get_onSubmit()
public void set_onSubmit(SubmitEvent value)
public SelectionEvent get_onSelect()
public void set_onSelect(SelectionEvent value)
public SelectionEvent get_onDeselect()
public void set_onDeselect(SelectionEvent value)
public TextSelectionEvent get_onTextSelection()
public void set_onTextSelection(TextSelectionEvent value)
public TextSelectionEvent get_onEndTextSelection()
public void set_onEndTextSelection(TextSelectionEvent value)
public OnChangeEvent get_onValueChanged()
public void set_onValueChanged(OnChangeEvent value)
public OnValidateInput get_onValidateInput()
public void set_onValidateInput(OnValidateInput value)
public int get_characterLimit()
public void set_characterLimit(int value)
public float get_pointSize()
public void set_pointSize(float value)
public TMP_FontAsset get_fontAsset()
public void set_fontAsset(TMP_FontAsset value)
public bool get_onFocusSelectAll()
public void set_onFocusSelectAll(bool value)
public bool get_resetOnDeActivation()
public void set_resetOnDeActivation(bool value)
public bool get_restoreOriginalTextOnEscape()
public void set_restoreOriginalTextOnEscape(bool value)
public bool get_isRichTextEditingAllowed()
public void set_isRichTextEditingAllowed(bool value)
public ContentType get_contentType()
public void set_contentType(ContentType value)
public LineType get_lineType()
public void set_lineType(LineType value)
public InputType get_inputType()
public void set_inputType(InputType value)
public TouchScreenKeyboardType get_keyboardType()
public void set_keyboardType(TouchScreenKeyboardType value)
public CharacterValidation get_characterValidation()
public void set_characterValidation(CharacterValidation value)
public TMP_InputValidator get_inputValidator()
public void set_inputValidator(TMP_InputValidator value)
public bool get_readOnly()
public void set_readOnly(bool value)
public bool get_richText()
public void set_richText(bool value)
public bool get_multiLine()
public char get_asteriskChar()
public void set_asteriskChar(char value)
public bool get_wasCanceled()
protected void ClampStringPos(Int32& pos)
protected void ClampCaretPos(Int32& pos)
protected int get_caretPositionInternal()
protected void set_caretPositionInternal(int value)
protected int get_stringPositionInternal()
protected void set_stringPositionInternal(int value)
protected int get_caretSelectPositionInternal()
protected void set_caretSelectPositionInternal(int value)
protected int get_stringSelectPositionInternal()
protected void set_stringSelectPositionInternal(int value)
private bool get_hasSelection()
public int get_caretPosition()
public void set_caretPosition(int value)
public int get_selectionAnchorPosition()
public void set_selectionAnchorPosition(int value)
public int get_selectionFocusPosition()
public void set_selectionFocusPosition(int value)
public int get_stringPosition()
public void set_stringPosition(int value)
public int get_selectionStringAnchorPosition()
public void set_selectionStringAnchorPosition(int value)
public int get_selectionStringFocusPosition()
public void set_selectionStringFocusPosition(int value)
protected void OnEnable()
protected void OnDisable()
private void ON_TEXT_CHANGED(Object obj)
private IEnumerator CaretBlink()
private void SetCaretVisible()
private void SetCaretActive()
protected void OnFocus()
protected void SelectAll()
public void MoveTextEnd(bool shift)
public void MoveTextStart(bool shift)
public void MoveToEndOfLine(bool shift, bool ctrl)
public void MoveToStartOfLine(bool shift, bool ctrl)
private string get_clipboard()
private void set_clipboard(string value)
private bool InPlaceEditing()
protected void LateUpdate()
private bool MayDrag(PointerEventData eventData)
public void OnBeginDrag(PointerEventData eventData)
public void OnDrag(PointerEventData eventData)
private IEnumerator MouseDragOutsideRect(PointerEventData eventData)
public void OnEndDrag(PointerEventData eventData)
public void OnPointerDown(PointerEventData eventData)
protected EditState KeyPressed(Event evt)
private bool IsValidChar(char c)
public void ProcessEvent(Event e)
public void OnUpdateSelected(BaseEventData eventData)
public void OnScroll(PointerEventData eventData)
private string GetSelectedString()
private int FindtNextWordBegin()
private void MoveRight(bool shift, bool ctrl)
private int FindtPrevWordBegin()
private void MoveLeft(bool shift, bool ctrl)
private int LineUpCharacterPosition(int originalPos, bool goToFirstChar)
private int LineDownCharacterPosition(int originalPos, bool goToLastChar)
private int PageUpCharacterPosition(int originalPos, bool goToFirstChar)
private int PageDownCharacterPosition(int originalPos, bool goToLastChar)
private void MoveDown(bool shift)
private void MoveDown(bool shift, bool goToLastChar)
private void MoveUp(bool shift)
private void MoveUp(bool shift, bool goToFirstChar)
private void MovePageUp(bool shift)
private void MovePageUp(bool shift, bool goToFirstChar)
private void MovePageDown(bool shift)
private void MovePageDown(bool shift, bool goToLastChar)
private void Delete()
private void ForwardSpace()
private void Backspace()
protected void Append(string input)
protected void Append(char input)
private void Insert(char c)
private void SendOnValueChangedAndUpdateLabel()
private void SendOnValueChanged()
protected void SendOnEndEdit()
protected void SendOnSubmit()
protected void SendOnFocus()
protected void SendOnFocusLost()
protected void SendOnTextSelection()
protected void SendOnEndTextSelection()
protected void UpdateLabel()
private void UpdateScrollbar()
private void OnScrollbarValueChange(float value)
private void AdjustTextPositionRelativeToViewport(float relativePosition)
private int GetCaretPositionFromStringIndex(int stringIndex)
private int GetStringIndexFromCaretPosition(int caretPosition)
public void ForceLabelUpdate()
private void MarkGeometryAsDirty()
public void Rebuild(CanvasUpdate update)
public void LayoutComplete()
public void GraphicUpdateComplete()
private void UpdateGeometry()
private void AssignPositioningIfNeeded()
private void OnFillVBO(Mesh vbo)
private void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset)
private void CreateCursorVerts()
private void GenerateHightlight(VertexHelper vbo, Vector2 roundingOffset)
private void AdjustRectTransformRelativeToViewport(Vector2 startPosition, float height, bool isCharVisible)
protected char Validate(string text, int pos, char ch)
public void ActivateInputField()
private void ActivateInputFieldInternal()
public void OnSelect(BaseEventData eventData)
public void OnPointerClick(PointerEventData eventData)
public void OnControlClick()
public void DeactivateInputField()
public void OnDeselect(BaseEventData eventData)
public void OnSubmit(BaseEventData eventData)
private void EnforceContentType()
private void SetTextComponentWrapMode()
private void SetTextComponentRichTextMode()
private void SetToCustomIfContentTypeIsNot(ContentType[] allowedContentTypes)
private void SetToCustom()
private void SetToCustom(CharacterValidation characterValidation)
protected void DoStateTransition(SelectionState state, bool instant)
public void SetGlobalPointSize(float pointSize)
public void SetGlobalFontAsset(TMP_FontAsset fontAsset)
private Transform UnityEngine.UI.ICanvasElement.get_transform()
}
public TMPro.TMP_InputValidator : ScriptableObject {
public char Validate(String& text, Int32& pos, char ch)
}
public TMPro.TMP_LineInfo : ValueType {
internal int controlCharacterCount
public int characterCount
public int visibleCharacterCount
public int spaceCount
public int wordCount
public int firstCharacterIndex
public int firstVisibleCharacterIndex
public int lastCharacterIndex
public int lastVisibleCharacterIndex
public float length
public float lineHeight
public float ascender
public float baseline
public float descender
public float maxAdvance
public float width
public float marginLeft
public float marginRight
public TextAlignmentOptions alignment
public Extents lineExtents
}
public TMPro.TMP_LinkInfo : ValueType {
public TMP_Text textComponent
public int hashCode
public int linkIdFirstCharacterIndex
public int linkIdLength
public int linkTextfirstCharacterIndex
public int linkTextLength
internal Char[] linkID
internal void SetLinkID(Char[] text, int startIndex, int length)
public string GetLinkText()
public string GetLinkID()
}
internal TMPro.TMP_ListPool`1 : object {
private TMP_ObjectPool`1<List`1<T>> s_ListPool
public List`1<T> Get()
public void Release(List`1<T> toRelease)
}
public TMPro.TMP_MaterialManager : object {
private List`1<MaskingMaterial> m_materialList
private Dictionary`2<long, FallbackMaterial> m_fallbackMaterials
private Dictionary`2<int, long> m_fallbackMaterialLookup
private List`1<FallbackMaterial> m_fallbackCleanupList
private bool isFallbackListDirty
private void OnPreRender(Camera cam)
private void OnPreRenderCanvas()
public Material GetStencilMaterial(Material baseMaterial, int stencilID)
public void ReleaseStencilMaterial(Material stencilMaterial)
public Material GetBaseMaterial(Material stencilMaterial)
public Material SetStencil(Material material, int stencilID)
public void AddMaskingMaterial(Material baseMaterial, Material stencilMaterial, int stencilID)
public void RemoveStencilMaterial(Material stencilMaterial)
public void ReleaseBaseMaterial(Material baseMaterial)
public void ClearMaterials()
public int GetStencilID(GameObject obj)
public Material GetMaterialForRendering(MaskableGraphic graphic, Material baseMaterial)
private Transform FindRootSortOverrideCanvas(Transform start)
public Material GetFallbackMaterial(Material sourceMaterial, Material targetMaterial)
public void AddFallbackMaterialReference(Material targetMaterial)
public void RemoveFallbackMaterialReference(Material targetMaterial)
public void CleanupFallbackMaterials()
public void ReleaseFallbackMaterial(Material fallackMaterial)
public void CopyMaterialPresetProperties(Material source, Material destination)
}
public TMPro.TMP_Math : object {
public float FLOAT_MAX
public float FLOAT_MIN
public int INT_MAX
public int INT_MIN
public float FLOAT_UNSET
public int INT_UNSET
public Vector2 MAX_16BIT
public Vector2 MIN_16BIT
public bool Approximately(float a, float b)
}
public TMPro.TMP_MeshInfo : ValueType {
private Color32 s_DefaultColor
private Vector3 s_DefaultNormal
private Vector4 s_DefaultTangent
public Mesh mesh
public int vertexCount
public Vector3[] vertices
public Vector3[] normals
public Vector4[] tangents
public Vector2[] uvs0
public Vector2[] uvs2
public Color32[] colors32
public Int32[] triangles
public void .ctor(Mesh mesh, int size)
public void .ctor(Mesh mesh, int size, bool isVolumetric)
public void ResizeMeshInfo(int size)
public void ResizeMeshInfo(int size, bool isVolumetric)
public void Clear()
public void Clear(bool uploadChanges)
public void ClearUnusedVertices()
public void ClearUnusedVertices(int startIndex)
public void ClearUnusedVertices(int startIndex, bool updateMesh)
public void SortGeometry(VertexSortingOrder order)
public void SortGeometry(IList`1<int> sortingOrder)
public void SwapVertexData(int src, int dst)
}
internal TMPro.TMP_ObjectPool`1 : object {
private Stack`1<T> m_Stack
private UnityAction`1<T> m_ActionOnGet
private UnityAction`1<T> m_ActionOnRelease
private int <countAll>k__BackingField
public int countAll
public int countActive
public int countInactive
public int get_countAll()
private void set_countAll(int value)
public int get_countActive()
public int get_countInactive()
public void .ctor(UnityAction`1<T> actionOnGet, UnityAction`1<T> actionOnRelease)
public T Get()
public void Release(T element)
}
public TMPro.TMP_PageInfo : ValueType {
public int firstCharacterIndex
public int lastCharacterIndex
public float ascender
public float baseLine
public float descender
}
public TMPro.TMP_ScrollbarEventHandler : MonoBehaviour {
public bool isSelected
public void OnPointerClick(PointerEventData eventData)
public void OnSelect(BaseEventData eventData)
public void OnDeselect(BaseEventData eventData)
}
public TMPro.TMP_SelectionCaret : MaskableGraphic {
public void Cull(Rect clipRect, bool validRect)
}
public TMPro.TMP_Settings : ScriptableObject {
private TMP_Settings s_Instance
private bool m_enableWordWrapping
private bool m_enableKerning
private bool m_enableExtraPadding
private bool m_enableTintAllSprites
private bool m_enableParseEscapeCharacters
private int m_missingGlyphCharacter
private bool m_warningsDisabled
private TMP_FontAsset m_defaultFontAsset
private string m_defaultFontAssetPath
private float m_defaultFontSize
private float m_defaultAutoSizeMinRatio
private float m_defaultAutoSizeMaxRatio
private Vector2 m_defaultTextMeshProTextContainerSize
private Vector2 m_defaultTextMeshProUITextContainerSize
private bool m_autoSizeTextContainer
private List`1<TMP_FontAsset> m_fallbackFontAssets
private bool m_matchMaterialPreset
private TMP_SpriteAsset m_defaultSpriteAsset
private string m_defaultSpriteAssetPath
private string m_defaultColorGradientPresetsPath
private bool m_enableEmojiSupport
private TMP_StyleSheet m_defaultStyleSheet
private TextAsset m_leadingCharacters
private TextAsset m_followingCharacters
private LineBreakingTable m_linebreakingRules
public string version
public bool enableWordWrapping
public bool enableKerning
public bool enableExtraPadding
public bool enableTintAllSprites
public bool enableParseEscapeCharacters
public int missingGlyphCharacter
public bool warningsDisabled
public TMP_FontAsset defaultFontAsset
public string defaultFontAssetPath
public float defaultFontSize
public float defaultTextAutoSizingMinRatio
public float defaultTextAutoSizingMaxRatio
public Vector2 defaultTextMeshProTextContainerSize
public Vector2 defaultTextMeshProUITextContainerSize
public bool autoSizeTextContainer
public List`1<TMP_FontAsset> fallbackFontAssets
public bool matchMaterialPreset
public TMP_SpriteAsset defaultSpriteAsset
public string defaultSpriteAssetPath
public string defaultColorGradientPresetsPath
public bool enableEmojiSupport
public TMP_StyleSheet defaultStyleSheet
public TextAsset leadingCharacters
public TextAsset followingCharacters
public LineBreakingTable linebreakingRules
public TMP_Settings instance
public string get_version()
public bool get_enableWordWrapping()
public bool get_enableKerning()
public bool get_enableExtraPadding()
public bool get_enableTintAllSprites()
public bool get_enableParseEscapeCharacters()
public int get_missingGlyphCharacter()
public bool get_warningsDisabled()
public TMP_FontAsset get_defaultFontAsset()
public string get_defaultFontAssetPath()
public float get_defaultFontSize()
public float get_defaultTextAutoSizingMinRatio()
public float get_defaultTextAutoSizingMaxRatio()
public Vector2 get_defaultTextMeshProTextContainerSize()
public Vector2 get_defaultTextMeshProUITextContainerSize()
public bool get_autoSizeTextContainer()
public List`1<TMP_FontAsset> get_fallbackFontAssets()
public bool get_matchMaterialPreset()
public TMP_SpriteAsset get_defaultSpriteAsset()
public string get_defaultSpriteAssetPath()
public string get_defaultColorGradientPresetsPath()
public bool get_enableEmojiSupport()
public void set_enableEmojiSupport(bool value)
public TMP_StyleSheet get_defaultStyleSheet()
public TextAsset get_leadingCharacters()
public TextAsset get_followingCharacters()
public LineBreakingTable get_linebreakingRules()
public TMP_Settings get_instance()
public TMP_Settings LoadDefaultSettings()
public TMP_Settings GetSettings()
public TMP_FontAsset GetFontAsset()
public TMP_SpriteAsset GetSpriteAsset()
public TMP_StyleSheet GetStyleSheet()
public void LoadLinebreakingRules()
private Dictionary`2<int, char> GetCharacters(TextAsset file)
}
public TMPro.TMP_Sprite : TMP_TextElement {
public string name
public int hashCode
public int unicode
public Vector2 pivot
public Sprite sprite
}
public TMPro.TMP_SpriteAnimator : MonoBehaviour {
private Dictionary`2<int, bool> m_animations
private TMP_Text m_TextComponent
private void Awake()
private void OnEnable()
private void OnDisable()
public void StopAllAnimations()
public void DoSpriteAnimation(int currentCharacter, TMP_SpriteAsset spriteAsset, int start, int end, int framerate)
private IEnumerator DoSpriteAnimationInternal(int currentCharacter, TMP_SpriteAsset spriteAsset, int start, int end, int framerate)
}
public TMPro.TMP_SpriteAsset : TMP_Asset {
internal Dictionary`2<int, int> m_UnicodeLookup
internal Dictionary`2<int, int> m_NameLookup
public TMP_SpriteAsset m_defaultSpriteAsset
public Texture spriteSheet
public List`1<TMP_Sprite> spriteInfoList
public List`1<TMP_SpriteAsset> fallbackSpriteAssets
private List`1<int> k_searchedSpriteAssets
public TMP_SpriteAsset defaultSpriteAsset
public TMP_SpriteAsset get_defaultSpriteAsset()
private void OnEnable()
private Material GetDefaultSpriteMaterial()
public void UpdateLookupTables()
public int GetSpriteIndexFromHashcode(int hashCode)
public int GetSpriteIndexFromUnicode(int unicode)
public int GetSpriteIndexFromName(string name)
public TMP_SpriteAsset SearchForSpriteByUnicode(TMP_SpriteAsset spriteAsset, int unicode, bool includeFallbacks, Int32& spriteIndex)
private TMP_SpriteAsset SearchForSpriteByUnicodeInternal(List`1<TMP_SpriteAsset> spriteAssets, int unicode, bool includeFallbacks, Int32& spriteIndex)
private TMP_SpriteAsset SearchForSpriteByUnicodeInternal(TMP_SpriteAsset spriteAsset, int unicode, bool includeFallbacks, Int32& spriteIndex)
public TMP_SpriteAsset SearchForSpriteByHashCode(TMP_SpriteAsset spriteAsset, int hashCode, bool includeFallbacks, Int32& spriteIndex)
private TMP_SpriteAsset SearchForSpriteByHashCodeInternal(List`1<TMP_SpriteAsset> spriteAssets, int hashCode, bool searchFallbacks, Int32& spriteIndex)
private TMP_SpriteAsset SearchForSpriteByHashCodeInternal(TMP_SpriteAsset spriteAsset, int hashCode, bool searchFallbacks, Int32& spriteIndex)
}
public TMPro.TMP_SpriteInfo : ValueType {
public int spriteIndex
public int characterIndex
public int vertexIndex
}
public TMPro.TMP_Style : object {
private string m_Name
private int m_HashCode
private string m_OpeningDefinition
private string m_ClosingDefinition
private Int32[] m_OpeningTagArray
private Int32[] m_ClosingTagArray
public string name
public int hashCode
public string styleOpeningDefinition
public string styleClosingDefinition
public Int32[] styleOpeningTagArray
public Int32[] styleClosingTagArray
public string get_name()
public void set_name(string value)
public int get_hashCode()
public void set_hashCode(int value)
public string get_styleOpeningDefinition()
public string get_styleClosingDefinition()
public Int32[] get_styleOpeningTagArray()
public Int32[] get_styleClosingTagArray()
public void RefreshStyle()
}
public TMPro.TMP_StyleSheet : ScriptableObject {
private TMP_StyleSheet s_Instance
private List`1<TMP_Style> m_StyleList
private Dictionary`2<int, TMP_Style> m_StyleDictionary
public TMP_StyleSheet instance
public TMP_StyleSheet get_instance()
public TMP_StyleSheet LoadDefaultStyleSheet()
public TMP_Style GetStyle(int hashCode)
private TMP_Style GetStyleInternal(int hashCode)
public void UpdateStyleDictionaryKey(int old_key, int new_key)
public void UpdateStyleSheet()
public void RefreshStyles()
private void LoadStyleDictionaryInternal()
}
public TMPro.TMP_SubMesh : MonoBehaviour {
private TMP_FontAsset m_fontAsset
private TMP_SpriteAsset m_spriteAsset
private Material m_material
private Material m_sharedMaterial
private Material m_fallbackMaterial
private Material m_fallbackSourceMaterial
private bool m_isDefaultMaterial
private float m_padding
private Renderer m_renderer
private MeshFilter m_meshFilter
private Mesh m_mesh
private TextMeshPro m_TextComponent
private bool m_isRegisteredForEvents
public TMP_FontAsset fontAsset
public TMP_SpriteAsset spriteAsset
public Material material
public Material sharedMaterial
public Material fallbackMaterial
public Material fallbackSourceMaterial
public bool isDefaultMaterial
public float padding
public Renderer renderer
public MeshFilter meshFilter
public Mesh mesh
public TMP_FontAsset get_fontAsset()
public void set_fontAsset(TMP_FontAsset value)
public TMP_SpriteAsset get_spriteAsset()
public void set_spriteAsset(TMP_SpriteAsset value)
public Material get_material()
public void set_material(Material value)
public Material get_sharedMaterial()
public void set_sharedMaterial(Material value)
public Material get_fallbackMaterial()
public void set_fallbackMaterial(Material value)
public Material get_fallbackSourceMaterial()
public void set_fallbackSourceMaterial(Material value)
public bool get_isDefaultMaterial()
public void set_isDefaultMaterial(bool value)
public float get_padding()
public void set_padding(float value)
public Renderer get_renderer()
public MeshFilter get_meshFilter()
public Mesh get_mesh()
public void set_mesh(Mesh value)
private void OnEnable()
private void OnDisable()
private void OnDestroy()
public TMP_SubMesh AddSubTextObject(TextMeshPro textComponent, MaterialReference materialReference)
public void DestroySelf()
private Material GetMaterial(Material mat)
private Material CreateMaterialInstance(Material source)
private Material GetSharedMaterial()
private void SetSharedMaterial(Material mat)
public float GetPaddingForMaterial()
public void UpdateMeshPadding(bool isExtraPadding, bool isUsingBold)
public void SetVerticesDirty()
public void SetMaterialDirty()
protected void UpdateMaterial()
}
public TMPro.TMP_SubMeshUI : MaskableGraphic {
private TMP_FontAsset m_fontAsset
private TMP_SpriteAsset m_spriteAsset
private Material m_material
private Material m_sharedMaterial
private Material m_fallbackMaterial
private Material m_fallbackSourceMaterial
private bool m_isDefaultMaterial
private float m_padding
private CanvasRenderer m_canvasRenderer
private Mesh m_mesh
private TextMeshProUGUI m_TextComponent
private bool m_isRegisteredForEvents
private bool m_materialDirty
private int m_materialReferenceIndex
public TMP_FontAsset fontAsset
public TMP_SpriteAsset spriteAsset
public Texture mainTexture
public Material material
public Material sharedMaterial
public Material fallbackMaterial
public Material fallbackSourceMaterial
public Material materialForRendering
public bool isDefaultMaterial
public float padding
public CanvasRenderer canvasRenderer
public Mesh mesh
public TMP_FontAsset get_fontAsset()
public void set_fontAsset(TMP_FontAsset value)
public TMP_SpriteAsset get_spriteAsset()
public void set_spriteAsset(TMP_SpriteAsset value)
public Texture get_mainTexture()
public Material get_material()
public void set_material(Material value)
public Material get_sharedMaterial()
public void set_sharedMaterial(Material value)
public Material get_fallbackMaterial()
public void set_fallbackMaterial(Material value)
public Material get_fallbackSourceMaterial()
public void set_fallbackSourceMaterial(Material value)
public Material get_materialForRendering()
public bool get_isDefaultMaterial()
public void set_isDefaultMaterial(bool value)
public float get_padding()
public void set_padding(float value)
public CanvasRenderer get_canvasRenderer()
public Mesh get_mesh()
public void set_mesh(Mesh value)
public TMP_SubMeshUI AddSubTextObject(TextMeshProUGUI textComponent, MaterialReference materialReference)
protected void OnEnable()
protected void OnDisable()
protected void OnDestroy()
protected void OnTransformParentChanged()
public Material GetModifiedMaterial(Material baseMaterial)
public float GetPaddingForMaterial()
public float GetPaddingForMaterial(Material mat)
public void UpdateMeshPadding(bool isExtraPadding, bool isUsingBold)
public void SetAllDirty()
public void SetVerticesDirty()
public void SetLayoutDirty()
public void SetMaterialDirty()
public void SetPivotDirty()
public void Cull(Rect clipRect, bool validRect)
protected void UpdateGeometry()
public void Rebuild(CanvasUpdate update)
public void RefreshMaterial()
protected void UpdateMaterial()
public void RecalculateClipping()
public void RecalculateMasking()
private Material GetMaterial()
private Material GetMaterial(Material mat)
private Material CreateMaterialInstance(Material source)
private Material GetSharedMaterial()
private void SetSharedMaterial(Material mat)
}
public TMPro.TMP_Text : MaskableGraphic {
protected string m_text
protected bool m_isRightToLeft
protected TMP_FontAsset m_fontAsset
protected TMP_FontAsset m_currentFontAsset
protected bool m_isSDFShader
protected Material m_sharedMaterial
protected Material m_currentMaterial
protected MaterialReference[] m_materialReferences
protected Dictionary`2<int, int> m_materialReferenceIndexLookup
protected TMP_XmlTagStack`1<MaterialReference> m_materialReferenceStack
protected int m_currentMaterialIndex
protected Material[] m_fontSharedMaterials
protected Material m_fontMaterial
protected Material[] m_fontMaterials
protected bool m_isMaterialDirty
protected Color32 m_fontColor32
protected Color m_fontColor
protected Color32 s_colorWhite
protected Color32 m_underlineColor
protected Color32 m_strikethroughColor
protected Color32 m_highlightColor
protected bool m_enableVertexGradient
protected ColorMode m_colorMode
protected VertexGradient m_fontColorGradient
protected TMP_ColorGradient m_fontColorGradientPreset
protected TMP_SpriteAsset m_spriteAsset
protected bool m_tintAllSprites
protected bool m_tintSprite
protected Color32 m_spriteColor
protected bool m_overrideHtmlColors
protected Color32 m_faceColor
protected Color32 m_outlineColor
protected float m_outlineWidth
protected float m_fontSize
protected float m_currentFontSize
protected float m_fontSizeBase
protected TMP_XmlTagStack`1<float> m_sizeStack
protected int m_fontWeight
protected int m_fontWeightInternal
protected TMP_XmlTagStack`1<int> m_fontWeightStack
protected bool m_enableAutoSizing
protected float m_maxFontSize
protected float m_minFontSize
protected float m_fontSizeMin
protected float m_fontSizeMax
protected FontStyles m_fontStyle
protected FontStyles m_style
protected TMP_BasicXmlTagStack m_fontStyleStack
protected bool m_isUsingBold
protected TextAlignmentOptions m_textAlignment
protected TextAlignmentOptions m_lineJustification
protected TMP_XmlTagStack`1<TextAlignmentOptions> m_lineJustificationStack
protected Vector3[] m_textContainerLocalCorners
protected bool m_isAlignmentEnumConverted
protected float m_characterSpacing
protected float m_cSpacing
protected float m_monoSpacing
protected float m_wordSpacing
protected float m_lineSpacing
protected float m_lineSpacingDelta
protected float m_lineHeight
protected float m_lineSpacingMax
protected float m_paragraphSpacing
protected float m_charWidthMaxAdj
protected float m_charWidthAdjDelta
protected bool m_enableWordWrapping
protected bool m_isCharacterWrappingEnabled
protected bool m_isNonBreakingSpace
protected bool m_isIgnoringAlignment
protected float m_wordWrappingRatios
protected TextOverflowModes m_overflowMode
protected int m_firstOverflowCharacterIndex
protected TMP_Text m_linkedTextComponent
protected bool m_isLinkedTextComponent
protected bool m_isTextTruncated
protected bool m_enableKerning
protected bool m_enableExtraPadding
protected bool checkPaddingRequired
protected bool m_isRichText
protected bool m_parseCtrlCharacters
protected bool m_isOverlay
protected bool m_isOrthographic
protected bool m_isCullingEnabled
protected bool m_ignoreRectMaskCulling
protected bool m_ignoreCulling
protected TextureMappingOptions m_horizontalMapping
protected TextureMappingOptions m_verticalMapping
protected float m_uvLineOffset
protected TextRenderFlags m_renderMode
protected VertexSortingOrder m_geometrySortingOrder
protected int m_firstVisibleCharacter
protected int m_maxVisibleCharacters
protected int m_maxVisibleWords
protected int m_maxVisibleLines
protected bool m_useMaxVisibleDescender
protected int m_pageToDisplay
protected bool m_isNewPage
protected Vector4 m_margin
protected float m_marginLeft
protected float m_marginRight
protected float m_marginWidth
protected float m_marginHeight
protected float m_width
protected TMP_TextInfo m_textInfo
protected bool m_havePropertiesChanged
protected bool m_isUsingLegacyAnimationComponent
protected Transform m_transform
protected RectTransform m_rectTransform
private bool <autoSizeTextContainer>k__BackingField
protected bool m_autoSizeTextContainer
protected Mesh m_mesh
protected bool m_isVolumetricText
protected TMP_SpriteAnimator m_spriteAnimator
protected float m_flexibleHeight
protected float m_flexibleWidth
protected float m_minWidth
protected float m_minHeight
protected float m_maxWidth
protected float m_maxHeight
protected LayoutElement m_LayoutElement
protected float m_preferredWidth
protected float m_renderedWidth
protected bool m_isPreferredWidthDirty
protected float m_preferredHeight
protected float m_renderedHeight
protected bool m_isPreferredHeightDirty
protected bool m_isCalculatingPreferredValues
private int m_recursiveCount
protected int m_layoutPriority
protected bool m_isCalculateSizeRequired
protected bool m_isLayoutDirty
protected bool m_verticesAlreadyDirty
protected bool m_layoutAlreadyDirty
protected bool m_isAwake
protected bool m_isWaitingOnResourceLoad
protected bool m_isInputParsingRequired
protected TextInputSources m_inputSource
protected string old_text
protected float m_fontScale
protected float m_fontScaleMultiplier
protected Char[] m_htmlTag
protected XML_TagAttribute[] m_xmlAttribute
protected Single[] m_attributeParameterValues
protected float tag_LineIndent
protected float tag_Indent
protected TMP_XmlTagStack`1<float> m_indentStack
protected bool tag_NoParsing
protected bool m_isParsingText
protected Matrix4x4 m_FXMatrix
protected bool m_isFXMatrixSet
protected Int32[] m_char_buffer
private TMP_CharacterInfo[] m_internalCharacterInfo
protected Char[] m_input_CharArray
private int m_charArray_Length
protected int m_totalCharacterCount
protected WordWrapState m_SavedWordWrapState
protected WordWrapState m_SavedLineState
protected int m_characterCount
protected int m_firstCharacterOfLine
protected int m_firstVisibleCharacterOfLine
protected int m_lastCharacterOfLine
protected int m_lastVisibleCharacterOfLine
protected int m_lineNumber
protected int m_lineVisibleCharacterCount
protected int m_pageNumber
protected float m_maxAscender
protected float m_maxCapHeight
protected float m_maxDescender
protected float m_maxLineAscender
protected float m_maxLineDescender
protected float m_startOfLineAscender
protected float m_lineOffset
protected Extents m_meshExtents
protected Color32 m_htmlColor
protected TMP_XmlTagStack`1<Color32> m_colorStack
protected TMP_XmlTagStack`1<Color32> m_underlineColorStack
protected TMP_XmlTagStack`1<Color32> m_strikethroughColorStack
protected TMP_XmlTagStack`1<Color32> m_highlightColorStack
protected TMP_ColorGradient m_colorGradientPreset
protected TMP_XmlTagStack`1<TMP_ColorGradient> m_colorGradientStack
protected float m_tabSpacing
protected float m_spacing
protected TMP_XmlTagStack`1<int> m_styleStack
protected TMP_XmlTagStack`1<int> m_actionStack
protected float m_padding
protected float m_baselineOffset
protected TMP_XmlTagStack`1<float> m_baselineOffsetStack
protected float m_xAdvance
protected TMP_TextElementType m_textElementType
protected TMP_TextElement m_cached_TextElement
protected TMP_Glyph m_cached_Underline_GlyphInfo
protected TMP_Glyph m_cached_Ellipsis_GlyphInfo
protected TMP_SpriteAsset m_defaultSpriteAsset
protected TMP_SpriteAsset m_currentSpriteAsset
protected int m_spriteCount
protected int m_spriteIndex
protected int m_spriteAnimationID
protected bool m_ignoreActiveState
private Single[] k_Power
protected Vector2 k_LargePositiveVector2
protected Vector2 k_LargeNegativeVector2
protected float k_LargePositiveFloat
protected float k_LargeNegativeFloat
protected int k_LargePositiveInt
protected int k_LargeNegativeInt
public string text
public bool isRightToLeftText
public TMP_FontAsset font
public Material fontSharedMaterial
public Material[] fontSharedMaterials
public Material fontMaterial
public Material[] fontMaterials
public Color color
public float alpha
public bool enableVertexGradient
public VertexGradient colorGradient
public TMP_ColorGradient colorGradientPreset
public TMP_SpriteAsset spriteAsset
public bool tintAllSprites
public bool overrideColorTags
public Color32 faceColor
public Color32 outlineColor
public float outlineWidth
public float fontSize
public float fontScale
public int fontWeight
public float pixelsPerUnit
public bool enableAutoSizing
public float fontSizeMin
public float fontSizeMax
public FontStyles fontStyle
public bool isUsingBold
public TextAlignmentOptions alignment
public float characterSpacing
public float wordSpacing
public float lineSpacing
public float lineSpacingAdjustment
public float paragraphSpacing
public float characterWidthAdjustment
public bool enableWordWrapping
public float wordWrappingRatios
public TextOverflowModes overflowMode
public bool isTextOverflowing
public int firstOverflowCharacterIndex
public TMP_Text linkedTextComponent
public bool isLinkedTextComponent
public bool isTextTruncated
public bool enableKerning
public bool extraPadding
public bool richText
public bool parseCtrlCharacters
public bool isOverlay
public bool isOrthographic
public bool enableCulling
public bool ignoreRectMaskCulling
public bool ignoreVisibility
public TextureMappingOptions horizontalMapping
public TextureMappingOptions verticalMapping
public float mappingUvLineOffset
public TextRenderFlags renderMode
public VertexSortingOrder geometrySortingOrder
public int firstVisibleCharacter
public int maxVisibleCharacters
public int maxVisibleWords
public int maxVisibleLines
public bool useMaxVisibleDescender
public int pageToDisplay
public Vector4 margin
public TMP_TextInfo textInfo
public bool havePropertiesChanged
public bool isUsingLegacyAnimationComponent
public Transform transform
public RectTransform rectTransform
public bool autoSizeTextContainer
public Mesh mesh
public bool isVolumetricText
public Bounds bounds
public Bounds textBounds
protected TMP_SpriteAnimator spriteAnimator
public float flexibleHeight
public float flexibleWidth
public float minWidth
public float minHeight
public float maxWidth
public float maxHeight
protected LayoutElement layoutElement
public float preferredWidth
public float preferredHeight
public float renderedWidth
public float renderedHeight
public int layoutPriority
public string get_text()
public void set_text(string value)
public bool get_isRightToLeftText()
public void set_isRightToLeftText(bool value)
public TMP_FontAsset get_font()
public void set_font(TMP_FontAsset value)
public Material get_fontSharedMaterial()
public void set_fontSharedMaterial(Material value)
public Material[] get_fontSharedMaterials()
public void set_fontSharedMaterials(Material[] value)
public Material get_fontMaterial()
public void set_fontMaterial(Material value)
public Material[] get_fontMaterials()
public void set_fontMaterials(Material[] value)
public Color get_color()
public void set_color(Color value)
public float get_alpha()
public void set_alpha(float value)
public bool get_enableVertexGradient()
public void set_enableVertexGradient(bool value)
public VertexGradient get_colorGradient()
public void set_colorGradient(VertexGradient value)
public TMP_ColorGradient get_colorGradientPreset()
public void set_colorGradientPreset(TMP_ColorGradient value)
public TMP_SpriteAsset get_spriteAsset()
public void set_spriteAsset(TMP_SpriteAsset value)
public bool get_tintAllSprites()
public void set_tintAllSprites(bool value)
public bool get_overrideColorTags()
public void set_overrideColorTags(bool value)
public Color32 get_faceColor()
public void set_faceColor(Color32 value)
public Color32 get_outlineColor()
public void set_outlineColor(Color32 value)
public float get_outlineWidth()
public void set_outlineWidth(float value)
public float get_fontSize()
public void set_fontSize(float value)
public float get_fontScale()
public int get_fontWeight()
public void set_fontWeight(int value)
public float get_pixelsPerUnit()
public bool get_enableAutoSizing()
public void set_enableAutoSizing(bool value)
public float get_fontSizeMin()
public void set_fontSizeMin(float value)
public float get_fontSizeMax()
public void set_fontSizeMax(float value)
public FontStyles get_fontStyle()
public void set_fontStyle(FontStyles value)
public bool get_isUsingBold()
public TextAlignmentOptions get_alignment()
public void set_alignment(TextAlignmentOptions value)
public float get_characterSpacing()
public void set_characterSpacing(float value)
public float get_wordSpacing()
public void set_wordSpacing(float value)
public float get_lineSpacing()
public void set_lineSpacing(float value)
public float get_lineSpacingAdjustment()
public void set_lineSpacingAdjustment(float value)
public float get_paragraphSpacing()
public void set_paragraphSpacing(float value)
public float get_characterWidthAdjustment()
public void set_characterWidthAdjustment(float value)
public bool get_enableWordWrapping()
public void set_enableWordWrapping(bool value)
public float get_wordWrappingRatios()
public void set_wordWrappingRatios(float value)
public TextOverflowModes get_overflowMode()
public void set_overflowMode(TextOverflowModes value)
public bool get_isTextOverflowing()
public int get_firstOverflowCharacterIndex()
public TMP_Text get_linkedTextComponent()
public void set_linkedTextComponent(TMP_Text value)
public bool get_isLinkedTextComponent()
public void set_isLinkedTextComponent(bool value)
public bool get_isTextTruncated()
public bool get_enableKerning()
public void set_enableKerning(bool value)
public bool get_extraPadding()
public void set_extraPadding(bool value)
public bool get_richText()
public void set_richText(bool value)
public bool get_parseCtrlCharacters()
public void set_parseCtrlCharacters(bool value)
public bool get_isOverlay()
public void set_isOverlay(bool value)
public bool get_isOrthographic()
public void set_isOrthographic(bool value)
public bool get_enableCulling()
public void set_enableCulling(bool value)
public bool get_ignoreRectMaskCulling()
public void set_ignoreRectMaskCulling(bool value)
public bool get_ignoreVisibility()
public void set_ignoreVisibility(bool value)
public TextureMappingOptions get_horizontalMapping()
public void set_horizontalMapping(TextureMappingOptions value)
public TextureMappingOptions get_verticalMapping()
public void set_verticalMapping(TextureMappingOptions value)
public float get_mappingUvLineOffset()
public void set_mappingUvLineOffset(float value)
public TextRenderFlags get_renderMode()
public void set_renderMode(TextRenderFlags value)
public VertexSortingOrder get_geometrySortingOrder()
public void set_geometrySortingOrder(VertexSortingOrder value)
public int get_firstVisibleCharacter()
public void set_firstVisibleCharacter(int value)
public int get_maxVisibleCharacters()
public void set_maxVisibleCharacters(int value)
public int get_maxVisibleWords()
public void set_maxVisibleWords(int value)
public int get_maxVisibleLines()
public void set_maxVisibleLines(int value)
public bool get_useMaxVisibleDescender()
public void set_useMaxVisibleDescender(bool value)
public int get_pageToDisplay()
public void set_pageToDisplay(int value)
public Vector4 get_margin()
public void set_margin(Vector4 value)
public TMP_TextInfo get_textInfo()
public bool get_havePropertiesChanged()
public void set_havePropertiesChanged(bool value)
public bool get_isUsingLegacyAnimationComponent()
public void set_isUsingLegacyAnimationComponent(bool value)
public Transform get_transform()
public RectTransform get_rectTransform()
public bool get_autoSizeTextContainer()
public void set_autoSizeTextContainer(bool value)
public Mesh get_mesh()
public bool get_isVolumetricText()
public void set_isVolumetricText(bool value)
public Bounds get_bounds()
public Bounds get_textBounds()
protected TMP_SpriteAnimator get_spriteAnimator()
public float get_flexibleHeight()
public float get_flexibleWidth()
public float get_minWidth()
public float get_minHeight()
public float get_maxWidth()
public float get_maxHeight()
protected LayoutElement get_layoutElement()
public float get_preferredWidth()
public float get_preferredHeight()
public float get_renderedWidth()
public float get_renderedHeight()
public int get_layoutPriority()
protected void LoadFontAsset()
protected void SetSharedMaterial(Material mat)
protected Material GetMaterial(Material mat)
protected void SetFontBaseMaterial(Material mat)
protected Material[] GetSharedMaterials()
protected void SetSharedMaterials(Material[] materials)
protected Material[] GetMaterials(Material[] mats)
protected Material CreateMaterialInstance(Material source)
protected void SetVertexColorGradient(TMP_ColorGradient gradient)
protected void SetTextSortingOrder(VertexSortingOrder order)
protected void SetTextSortingOrder(Int32[] order)
protected void SetFaceColor(Color32 color)
protected void SetOutlineColor(Color32 color)
protected void SetOutlineThickness(float thickness)
protected void SetShaderDepth()
protected void SetCulling()
protected float GetPaddingForMaterial()
protected float GetPaddingForMaterial(Material mat)
protected Vector3[] GetTextContainerLocalCorners()
public void ForceMeshUpdate()
public void ForceMeshUpdate(bool ignoreActiveState)
internal void SetTextInternal(string text)
public void UpdateGeometry(Mesh mesh, int index)
public void UpdateVertexData(TMP_VertexDataUpdateFlags flags)
public void UpdateVertexData()
public void SetVertices(Vector3[] vertices)
public void UpdateMeshPadding()
public void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha)
public void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale)
protected void InternalCrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha)
protected void InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale)
protected void ParseInputText()
public void SetText(string text)
public void SetText(string text, bool syncTextInputBox)
public void SetText(string text, float arg0)
public void SetText(string text, float arg0, float arg1)
public void SetText(string text, float arg0, float arg1, float arg2)
public void SetText(StringBuilder text)
public void SetCharArray(Char[] sourceText)
public void SetCharArray(Char[] sourceText, int start, int length)
public void SetCharArray(Int32[] sourceText, int start, int length)
protected void SetTextArrayToCharArray(Char[] sourceText, Int32[]& charBuffer)
protected void StringToCharArray(string sourceText, Int32[]& charBuffer)
protected void StringBuilderToIntArray(StringBuilder sourceText, Int32[]& charBuffer)
private bool ReplaceOpeningStyleTag(String& sourceText, int srcIndex, Int32& srcOffset, Int32[]& charBuffer, Int32& writeIndex)
private bool ReplaceOpeningStyleTag(Int32[]& sourceText, int srcIndex, Int32& srcOffset, Int32[]& charBuffer, Int32& writeIndex)
private bool ReplaceOpeningStyleTag(Char[]& sourceText, int srcIndex, Int32& srcOffset, Int32[]& charBuffer, Int32& writeIndex)
private bool ReplaceOpeningStyleTag(StringBuilder& sourceText, int srcIndex, Int32& srcOffset, Int32[]& charBuffer, Int32& writeIndex)
private bool ReplaceClosingStyleTag(String& sourceText, int srcIndex, Int32[]& charBuffer, Int32& writeIndex)
private bool ReplaceClosingStyleTag(Int32[]& sourceText, int srcIndex, Int32[]& charBuffer, Int32& writeIndex)
private bool ReplaceClosingStyleTag(Char[]& sourceText, int srcIndex, Int32[]& charBuffer, Int32& writeIndex)
private bool ReplaceClosingStyleTag(StringBuilder& sourceText, int srcIndex, Int32[]& charBuffer, Int32& writeIndex)
private bool IsTagName(String& text, string tag, int index)
private bool IsTagName(Char[]& text, string tag, int index)
private bool IsTagName(Int32[]& text, string tag, int index)
private bool IsTagName(StringBuilder& text, string tag, int index)
private int GetTagHashCode(String& text, int index, Int32& closeIndex)
private int GetTagHashCode(Char[]& text, int index, Int32& closeIndex)
private int GetTagHashCode(Int32[]& text, int index, Int32& closeIndex)
private int GetTagHashCode(StringBuilder& text, int index, Int32& closeIndex)
private void ResizeInternalArray(T[]& array)
protected void AddFloatToCharArray(float number, Int32& index, int precision)
protected void AddIntToCharArray(int number, Int32& index, int precision)
protected int SetArraySizes(Int32[] chars)
protected void GenerateTextMesh()
public Vector2 GetPreferredValues()
public Vector2 GetPreferredValues(float width, float height)
public Vector2 GetPreferredValues(string text)
public Vector2 GetPreferredValues(string text, float width, float height)
protected float GetPreferredWidth()
protected float GetPreferredWidth(Vector2 margin)
protected float GetPreferredHeight()
protected float GetPreferredHeight(Vector2 margin)
public Vector2 GetRenderedValues()
public Vector2 GetRenderedValues(bool onlyVisibleCharacters)
protected float GetRenderedWidth()
protected float GetRenderedWidth(bool onlyVisibleCharacters)
protected float GetRenderedHeight()
protected float GetRenderedHeight(bool onlyVisibleCharacters)
protected Vector2 CalculatePreferredValues(float defaultFontSize, Vector2 marginSize, bool ignoreTextAutoSizing)
protected Bounds GetCompoundBounds()
protected Bounds GetTextBounds()
protected Bounds GetTextBounds(bool onlyVisibleCharacters)
protected void AdjustLineOffset(int startIndex, int endIndex, float offset)
protected void ResizeLineExtents(int size)
public TMP_TextInfo GetTextInfo(string text)
public void ComputeMarginSize()
protected void SaveWordWrappingState(WordWrapState& state, int index, int count)
protected int RestoreWordWrappingState(WordWrapState& state)
protected void SaveGlyphVertexInfo(float padding, float style_padding, Color32 vertexColor)
protected void SaveSpriteVertexInfo(Color32 vertexColor)
protected void FillCharacterVertexBuffers(int i, int index_X4)
protected void FillCharacterVertexBuffers(int i, int index_X4, bool isVolumetric)
protected void FillSpriteVertexBuffers(int i, int index_X4)
protected void DrawUnderlineMesh(Vector3 start, Vector3 end, Int32& index, float startScale, float endScale, float maxScale, float sdfScale, Color32 underlineColor)
protected void DrawTextHighlight(Vector3 start, Vector3 end, Int32& index, Color32 highlightColor)
protected void LoadDefaultSettings()
protected void GetSpecialCharacters(TMP_FontAsset fontAsset)
protected void ReplaceTagWithCharacter(Int32[] chars, int insertionIndex, int tagLength, char c)
protected TMP_FontAsset GetFontAssetForWeight(int fontWeight)
protected void SetActiveSubMeshes(bool state)
protected void ClearSubMeshObjects()
public void ClearMesh()
public void ClearMesh(bool uploadGeometry)
public string GetParsedText()
protected Vector2 PackUV(float x, float y, float scale)
protected float PackUV(float x, float y)
protected int HexToInt(char hex)
protected int GetUTF16(string text, int i)
protected int GetUTF16(StringBuilder text, int i)
protected int GetUTF32(string text, int i)
protected int GetUTF32(StringBuilder text, int i)
protected Color32 HexCharsToColor(Char[] hexChars, int tagCount)
protected Color32 HexCharsToColor(Char[] hexChars, int startIndex, int length)
private int GetAttributeParameters(Char[] chars, int startIndex, int length, Single[]& parameters)
protected float ConvertToFloat(Char[] chars, int startIndex, int length)
protected float ConvertToFloat(Char[] chars, int startIndex, int length, Int32& lastIndex)
protected bool ValidateHtmlTag(Int32[] chars, int startIndex, Int32& endIndex)
}
public TMPro.TMP_TextElement : object {
public int id
public float x
public float y
public float width
public float height
public float xOffset
public float yOffset
public float xAdvance
public float scale
}
public TMPro.TMP_TextElementType : Enum {
public int value__
public TMP_TextElementType Character
public TMP_TextElementType Sprite
}
public TMPro.TMP_TextInfo : object {
private Vector2 k_InfinityVectorPositive
private Vector2 k_InfinityVectorNegative
public TMP_Text textComponent
public int characterCount
public int spriteCount
public int spaceCount
public int wordCount
public int linkCount
public int lineCount
public int pageCount
public int materialCount
public TMP_CharacterInfo[] characterInfo
public TMP_WordInfo[] wordInfo
public TMP_LinkInfo[] linkInfo
public TMP_LineInfo[] lineInfo
public TMP_PageInfo[] pageInfo
public TMP_MeshInfo[] meshInfo
private TMP_MeshInfo[] m_CachedMeshInfo
public void .ctor(TMP_Text textComponent)
public void Clear()
public void ClearMeshInfo(bool updateMesh)
public void ClearAllMeshInfo()
public void ResetVertexLayout(bool isVolumetric)
public void ClearUnusedVertices(MaterialReference[] materials)
public void ClearLineInfo()
public TMP_MeshInfo[] CopyMeshInfoVertexData()
public void Resize(T[]& array, int size)
public void Resize(T[]& array, int size, bool isBlockAllocated)
}
public TMPro.TMP_TextUtilities : object {
private Vector3[] m_rectWorldCorners
private string k_lookupStringL
private string k_lookupStringU
public int GetCursorIndexFromPosition(TMP_Text textComponent, Vector3 position, Camera camera)
public int GetCursorIndexFromPosition(TMP_Text textComponent, Vector3 position, Camera camera, CaretPosition& cursor)
public int FindNearestLine(TMP_Text text, Vector3 position, Camera camera)
public int FindNearestCharacterOnLine(TMP_Text text, Vector3 position, int line, Camera camera, bool visibleOnly)
public bool IsIntersectingRectTransform(RectTransform rectTransform, Vector3 position, Camera camera)
public int FindIntersectingCharacter(TMP_Text text, Vector3 position, Camera camera, bool visibleOnly)
public int FindNearestCharacter(TMP_Text text, Vector3 position, Camera camera, bool visibleOnly)
public int FindIntersectingWord(TMP_Text text, Vector3 position, Camera camera)
public int FindNearestWord(TMP_Text text, Vector3 position, Camera camera)
public int FindIntersectingLine(TMP_Text text, Vector3 position, Camera camera)
public int FindIntersectingLink(TMP_Text text, Vector3 position, Camera camera)
public int FindNearestLink(TMP_Text text, Vector3 position, Camera camera)
private bool PointIntersectRectangle(Vector3 m, Vector3 a, Vector3 b, Vector3 c, Vector3 d)
public bool ScreenPointToWorldPointInRectangle(Transform transform, Vector2 screenPoint, Camera cam, Vector3& worldPoint)
private bool IntersectLinePlane(LineSegment line, Vector3 point, Vector3 normal, Vector3& intersectingPoint)
public float DistanceToLine(Vector3 a, Vector3 b, Vector3 point)
public char ToLowerFast(char c)
public char ToUpperFast(char c)
public int GetSimpleHashCode(string s)
public UInt32 GetSimpleHashCodeLowercase(string s)
public int HexToInt(char hex)
public int StringToInt(string s)
}
public TMPro.TMP_UpdateManager : object {
private TMP_UpdateManager s_Instance
private List`1<TMP_Text> m_LayoutRebuildQueue
private Dictionary`2<int, int> m_LayoutQueueLookup
private List`1<TMP_Text> m_GraphicRebuildQueue
private Dictionary`2<int, int> m_GraphicQueueLookup
public TMP_UpdateManager instance
public TMP_UpdateManager get_instance()
public void RegisterTextElementForLayoutRebuild(TMP_Text element)
private bool InternalRegisterTextElementForLayoutRebuild(TMP_Text element)
public void RegisterTextElementForGraphicRebuild(TMP_Text element)
private bool InternalRegisterTextElementForGraphicRebuild(TMP_Text element)
private void OnBeginFrameRendering(Camera[] cameras)
private void OnCameraPreCull(Camera cam)
private void DoRebuilds()
public void UnRegisterTextElementForRebuild(TMP_Text element)
private void InternalUnRegisterTextElementForGraphicRebuild(TMP_Text element)
private void InternalUnRegisterTextElementForLayoutRebuild(TMP_Text element)
}
public TMPro.TMP_UpdateRegistry : object {
private TMP_UpdateRegistry s_Instance
private List`1<ICanvasElement> m_LayoutRebuildQueue
private Dictionary`2<int, int> m_LayoutQueueLookup
private List`1<ICanvasElement> m_GraphicRebuildQueue
private Dictionary`2<int, int> m_GraphicQueueLookup
public TMP_UpdateRegistry instance
public TMP_UpdateRegistry get_instance()
public void RegisterCanvasElementForLayoutRebuild(ICanvasElement element)
private bool InternalRegisterCanvasElementForLayoutRebuild(ICanvasElement element)
public void RegisterCanvasElementForGraphicRebuild(ICanvasElement element)
private bool InternalRegisterCanvasElementForGraphicRebuild(ICanvasElement element)
private void PerformUpdateForCanvasRendererObjects()
private void PerformUpdateForMeshRendererObjects()
public void UnRegisterCanvasElementForRebuild(ICanvasElement element)
private void InternalUnRegisterCanvasElementForLayoutRebuild(ICanvasElement element)
private void InternalUnRegisterCanvasElementForGraphicRebuild(ICanvasElement element)
}
public TMPro.TMP_Vertex : ValueType {
public Vector3 position
public Vector2 uv
public Vector2 uv2
public Vector2 uv4
public Color32 color
}
public TMPro.TMP_VertexDataUpdateFlags : Enum {
public int value__
public TMP_VertexDataUpdateFlags None
public TMP_VertexDataUpdateFlags Vertices
public TMP_VertexDataUpdateFlags Uv0
public TMP_VertexDataUpdateFlags Uv2
public TMP_VertexDataUpdateFlags Uv4
public TMP_VertexDataUpdateFlags Colors32
public TMP_VertexDataUpdateFlags All
}
public TMPro.TMP_WordInfo : ValueType {
public TMP_Text textComponent
public int firstCharacterIndex
public int lastCharacterIndex
public int characterCount
public string GetWord()
}
public TMPro.TMP_XmlTagStack`1 : ValueType {
public T[] itemStack
public int index
private int m_capacity
private T m_defaultItem
private int k_defaultCapacity
public void .ctor(T[] tagStack)
public void Clear()
public void SetDefault(T item)
public void Add(T item)
public T Remove()
public void Push(T item)
public T Pop()
public T CurrentItem()
public T PreviousItem()
}
public TMPro.TMPro_EventManager : object {
public FastAction`2<object, Compute_DT_EventArgs> COMPUTE_DT_EVENT
public FastAction`2<bool, Material> MATERIAL_PROPERTY_EVENT
public FastAction`2<bool, TMP_FontAsset> FONT_PROPERTY_EVENT
public FastAction`2<bool, Object> SPRITE_ASSET_PROPERTY_EVENT
public FastAction`2<bool, TextMeshPro> TEXTMESHPRO_PROPERTY_EVENT
public FastAction`3<GameObject, Material, Material> DRAG_AND_DROP_MATERIAL_EVENT
public FastAction`1<bool> TEXT_STYLE_PROPERTY_EVENT
public FastAction`1<TMP_ColorGradient> COLOR_GRADIENT_PROPERTY_EVENT
public FastAction TMP_SETTINGS_PROPERTY_EVENT
public FastAction RESOURCE_LOAD_EVENT
public FastAction`2<bool, TextMeshProUGUI> TEXTMESHPRO_UGUI_PROPERTY_EVENT
public FastAction OnPreRenderObject_Event
public FastAction`1<Object> TEXT_CHANGED_EVENT
public void ON_PRE_RENDER_OBJECT_CHANGED()
public void ON_MATERIAL_PROPERTY_CHANGED(bool isChanged, Material mat)
public void ON_FONT_PROPERTY_CHANGED(bool isChanged, TMP_FontAsset font)
public void ON_SPRITE_ASSET_PROPERTY_CHANGED(bool isChanged, Object obj)
public void ON_TEXTMESHPRO_PROPERTY_CHANGED(bool isChanged, TextMeshPro obj)
public void ON_DRAG_AND_DROP_MATERIAL_CHANGED(GameObject sender, Material currentMaterial, Material newMaterial)
public void ON_TEXT_STYLE_PROPERTY_CHANGED(bool isChanged)
public void ON_COLOR_GRAIDENT_PROPERTY_CHANGED(TMP_ColorGradient gradient)
public void ON_TEXT_CHANGED(Object obj)
public void ON_TMP_SETTINGS_CHANGED()
public void ON_RESOURCES_LOADED()
public void ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED(bool isChanged, TextMeshProUGUI obj)
public void ON_COMPUTE_DT_EVENT(object Sender, Compute_DT_EventArgs e)
}
public TMPro.TMPro_ExtensionMethods : object {
public string ArrayToString(Char[] chars)
public string IntToString(Int32[] unicodes)
public string IntToString(Int32[] unicodes, int start, int length)
public int FindInstanceID(List`1<T> list, T target)
public bool Compare(Color32 a, Color32 b)
public bool CompareRGB(Color32 a, Color32 b)
public bool Compare(Color a, Color b)
public bool CompareRGB(Color a, Color b)
public Color32 Multiply(Color32 c1, Color32 c2)
public Color32 Tint(Color32 c1, Color32 c2)
public Color32 Tint(Color32 c1, float tint)
public bool Compare(Vector3 v1, Vector3 v2, int accuracy)
public bool Compare(Quaternion q1, Quaternion q2, int accuracy)
}
internal TMPro.TweenRunner`1 : object {
protected MonoBehaviour m_CoroutineContainer
protected IEnumerator m_Tween
private IEnumerator Start(T tweenInfo)
public void Init(MonoBehaviour coroutineContainer)
public void StartTween(T info)
public void StopTween()
}
public TMPro.VertexGradient : ValueType {
public Color topLeft
public Color topRight
public Color bottomLeft
public Color bottomRight
public void .ctor(Color color)
public void .ctor(Color color0, Color color1, Color color2, Color color3)
}
public TMPro.VertexSortingOrder : Enum {
public int value__
public VertexSortingOrder Normal
public VertexSortingOrder Reverse
}
public TMPro.WordWrapState : ValueType {
public int previous_WordBreak
public int total_CharacterCount
public int visible_CharacterCount
public int visible_SpriteCount
public int visible_LinkCount
public int firstCharacterIndex
public int firstVisibleCharacterIndex
public int lastCharacterIndex
public int lastVisibleCharIndex
public int lineNumber
public float maxCapHeight
public float maxAscender
public float maxDescender
public float maxLineAscender
public float maxLineDescender
public float previousLineAscender
public float xAdvance
public float preferredWidth
public float preferredHeight
public float previousLineScale
public int wordCount
public FontStyles fontStyle
public float fontScale
public float fontScaleMultiplier
public float currentFontSize
public float baselineOffset
public float lineOffset
public TMP_TextInfo textInfo
public TMP_LineInfo lineInfo
public Color32 vertexColor
public Color32 underlineColor
public Color32 strikethroughColor
public Color32 highlightColor
public TMP_BasicXmlTagStack basicStyleStack
public TMP_XmlTagStack`1<Color32> colorStack
public TMP_XmlTagStack`1<Color32> underlineColorStack
public TMP_XmlTagStack`1<Color32> strikethroughColorStack
public TMP_XmlTagStack`1<Color32> highlightColorStack
public TMP_XmlTagStack`1<TMP_ColorGradient> colorGradientStack
public TMP_XmlTagStack`1<float> sizeStack
public TMP_XmlTagStack`1<float> indentStack
public TMP_XmlTagStack`1<int> fontWeightStack
public TMP_XmlTagStack`1<int> styleStack
public TMP_XmlTagStack`1<float> baselineStack
public TMP_XmlTagStack`1<int> actionStack
public TMP_XmlTagStack`1<MaterialReference> materialReferenceStack
public TMP_XmlTagStack`1<TextAlignmentOptions> lineJustificationStack
public int spriteAnimationID
public TMP_FontAsset currentFontAsset
public TMP_SpriteAsset currentSpriteAsset
public Material currentMaterial
public int currentMaterialIndex
public Extents meshExtents
public bool tagNoParsing
public bool isNonBreakingSpace
}
public TMPro.XML_TagAttribute : ValueType {
public int nameHashCode
public TagType valueType
public int valueStartIndex
public int valueLength
public int valueHashCode
}
