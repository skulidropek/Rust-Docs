internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public System.Drawing.Design.BitmapEditor : ImageEditor {
protected String[] GetExtensions()
protected string GetFileDialogDescription()
protected Image LoadFromStream(Stream stream)
}
public System.Drawing.Design.ColorEditor : UITypeEditor {
private IWindowsFormsEditorService editorService
private Color selected_color
private bool color_chosen
private Control editor_control
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
private Control GetEditorControl(object value)
private void HandleChange(object sender, EventArgs e)
private void CustomColorPicked(object sender, EventArgs e)
private void HandleMouseUp(object sender, MouseEventArgs e)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
public bool GetPaintValueSupported(ITypeDescriptorContext context)
public void PaintValue(PaintValueEventArgs e)
}
public System.Drawing.Design.ContentAlignmentEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.Drawing.Design.CursorEditor : UITypeEditor {
public bool IsDropDownResizable
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
public bool get_IsDropDownResizable()
}
public System.Drawing.Design.FontEditor : UITypeEditor {
private FontDialog fontEdit
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.Drawing.Design.FontNameEditor : UITypeEditor {
private string PreviewString
public bool GetPaintValueSupported(ITypeDescriptorContext context)
public void PaintValue(PaintValueEventArgs e)
}
public System.Drawing.Design.IconEditor : UITypeEditor {
private OpenFileDialog openDialog
protected string CreateExtensionsString(String[] extensions, string sep)
protected string CreateFilterEntry(IconEditor e)
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
protected String[] GetExtensions()
protected string GetFileDialogDescription()
public bool GetPaintValueSupported(ITypeDescriptorContext context)
protected Icon LoadFromStream(Stream stream)
public void PaintValue(PaintValueEventArgs e)
}
public System.Drawing.Design.ImageEditor : UITypeEditor {
private OpenFileDialog openDialog
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
public bool GetPaintValueSupported(ITypeDescriptorContext context)
public void PaintValue(PaintValueEventArgs e)
protected string CreateExtensionsString(String[] extensions, string sep)
protected string CreateFilterEntry(ImageEditor e)
protected String[] GetExtensions()
protected string GetFileDialogDescription()
protected Image LoadFromStream(Stream stream)
protected Type[] GetImageExtenders()
}
public System.Drawing.Design.MetafileEditor : ImageEditor {
protected String[] GetExtensions()
protected string GetFileDialogDescription()
protected Image LoadFromStream(Stream stream)
}
public System.Drawing.Design.ToolboxItemContainer : object {
public bool IsCreated
public bool IsTransient
public IDataObject ToolboxData
public void .ctor(IDataObject data)
public void .ctor(ToolboxItem item)
protected void .ctor(SerializationInfo info, StreamingContext context)
public bool get_IsCreated()
public bool get_IsTransient()
public IDataObject get_ToolboxData()
public bool Equals(object obj)
public int GetHashCode()
protected void GetObjectData(SerializationInfo info, StreamingContext context)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
public ICollection GetFilter(ICollection creators)
public ToolboxItem GetToolboxItem(ICollection creators)
public void UpdateFilter(ToolboxItem item)
}
public System.Drawing.Design.ToolboxItemCreator : object {
public string Format
public ToolboxItem Create(IDataObject data)
public string get_Format()
}
public System.Drawing.Design.ToolboxService : object {
protected CategoryNameCollection CategoryNames
protected string SelectedCategory
protected ToolboxItemContainer SelectedItemContainer
private CategoryNameCollection System.Drawing.Design.IToolboxService.CategoryNames
private string System.Drawing.Design.IToolboxService.SelectedCategory
protected CategoryNameCollection get_CategoryNames()
protected string get_SelectedCategory()
protected void set_SelectedCategory(string value)
protected ToolboxItemContainer get_SelectedItemContainer()
protected void set_SelectedItemContainer(ToolboxItemContainer value)
protected ToolboxItemContainer CreateItemContainer(IDataObject dataObject)
protected ToolboxItemContainer CreateItemContainer(ToolboxItem item, IDesignerHost link)
protected void FilterChanged()
protected IList GetItemContainers()
protected IList GetItemContainers(string categoryName)
protected bool IsItemContainer(IDataObject dataObject, IDesignerHost host)
protected bool IsItemContainerSupported(ToolboxItemContainer container, IDesignerHost host)
protected void Refresh()
protected void SelectedItemContainerUsed()
protected bool SetCursor()
public void UnloadToolboxItems()
public ToolboxItem GetToolboxItem(Type toolType)
public ToolboxItem GetToolboxItem(Type toolType, bool nonPublic)
public ICollection GetToolboxItems(AssemblyName an)
public ICollection GetToolboxItems(AssemblyName an, bool throwOnError)
public ICollection GetToolboxItems(Assembly a, string newCodeBase)
public ICollection GetToolboxItems(Assembly a, string newCodeBase, bool throwOnError)
private ICollection System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(IDesignerHost designerHost, Type baseType)
private CategoryNameCollection System.Drawing.Design.IToolboxService.get_CategoryNames()
private string System.Drawing.Design.IToolboxService.get_SelectedCategory()
private void System.Drawing.Design.IToolboxService.set_SelectedCategory(string value)
private void System.Drawing.Design.IToolboxService.AddCreator(ToolboxItemCreatorCallback creator, string format)
private void System.Drawing.Design.IToolboxService.AddCreator(ToolboxItemCreatorCallback creator, string format, IDesignerHost host)
private void System.Drawing.Design.IToolboxService.AddLinkedToolboxItem(ToolboxItem toolboxItem, IDesignerHost host)
private void System.Drawing.Design.IToolboxService.AddLinkedToolboxItem(ToolboxItem toolboxItem, string category, IDesignerHost host)
private void System.Drawing.Design.IToolboxService.AddToolboxItem(ToolboxItem toolboxItem, string category)
private void System.Drawing.Design.IToolboxService.AddToolboxItem(ToolboxItem toolboxItem)
private ToolboxItem System.Drawing.Design.IToolboxService.DeserializeToolboxItem(object serializedObject)
private ToolboxItem System.Drawing.Design.IToolboxService.DeserializeToolboxItem(object serializedObject, IDesignerHost host)
private ToolboxItem System.Drawing.Design.IToolboxService.GetSelectedToolboxItem()
private ToolboxItem System.Drawing.Design.IToolboxService.GetSelectedToolboxItem(IDesignerHost host)
private ToolboxItemCollection System.Drawing.Design.IToolboxService.GetToolboxItems()
private ToolboxItemCollection System.Drawing.Design.IToolboxService.GetToolboxItems(IDesignerHost host)
private ToolboxItemCollection System.Drawing.Design.IToolboxService.GetToolboxItems(string category)
private ToolboxItemCollection System.Drawing.Design.IToolboxService.GetToolboxItems(string category, IDesignerHost host)
private bool System.Drawing.Design.IToolboxService.IsSupported(object serializedObject, ICollection filterAttributes)
private bool System.Drawing.Design.IToolboxService.IsSupported(object serializedObject, IDesignerHost host)
private bool System.Drawing.Design.IToolboxService.IsToolboxItem(object serializedObject)
private bool System.Drawing.Design.IToolboxService.IsToolboxItem(object serializedObject, IDesignerHost host)
private void System.Drawing.Design.IToolboxService.Refresh()
private void System.Drawing.Design.IToolboxService.RemoveCreator(string format)
private void System.Drawing.Design.IToolboxService.RemoveCreator(string format, IDesignerHost host)
private void System.Drawing.Design.IToolboxService.RemoveToolboxItem(ToolboxItem toolboxItem)
private void System.Drawing.Design.IToolboxService.RemoveToolboxItem(ToolboxItem toolboxItem, string category)
private void System.Drawing.Design.IToolboxService.SelectedToolboxItemUsed()
private object System.Drawing.Design.IToolboxService.SerializeToolboxItem(ToolboxItem toolboxItem)
private bool System.Drawing.Design.IToolboxService.SetCursor()
private void System.Drawing.Design.IToolboxService.SetSelectedToolboxItem(ToolboxItem toolboxItem)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
