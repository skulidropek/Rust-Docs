public Oxide.Core.SQLite.Libraries.SQLite : Library {
private string _dataDirectory
private Queue`1<SQLiteQuery> _queue
private object _syncroot
private AutoResetEvent _workevent
private HashSet`1<Connection> _runningConnections
private bool _running
private Dictionary`2<string, Connection> _connections
private Thread _worker
private Dictionary`2<Plugin, Callback`2<Plugin, PluginManager>> _pluginRemovedFromManager
public bool IsGlobal
public bool get_IsGlobal()
private void Worker()
public Connection OpenDb(string file, Plugin plugin, bool persistent)
private void OnRemovedFromManager(Plugin sender, PluginManager manager)
public void CloseDb(Connection db)
public Sql NewSql()
public void Query(Sql sql, Connection db, Action`1<List`1<Dictionary`2<string, object>>> callback)
public void ExecuteNonQuery(Sql sql, Connection db, Action`1<int> callback)
public void Insert(Sql sql, Connection db, Action`1<int> callback)
public void Update(Sql sql, Connection db, Action`1<int> callback)
public void Delete(Sql sql, Connection db, Action`1<int> callback)
public void Shutdown()
}
public Oxide.Core.SQLite.SQLiteExtension : Extension {
internal Assembly Assembly
internal AssemblyName AssemblyName
internal VersionNumber AssemblyVersion
internal string AssemblyAuthors
public bool IsCoreExtension
public string Name
public string Author
public VersionNumber Version
public bool get_IsCoreExtension()
public string get_Name()
public string get_Author()
public VersionNumber get_Version()
public void .ctor(ExtensionManager manager)
public void Load()
public void LoadPluginWatchers(string pluginDirectory)
public void OnModLoad()
}
public Oxide.Ext.SQLite.Connection : object {
private string <ConnectionString>k__BackingField
private bool <ConnectionPersistent>k__BackingField
private SQLiteConnection <Con>k__BackingField
private Plugin <Plugin>k__BackingField
private long <LastInsertRowId>k__BackingField
internal string ConnectionString
internal bool ConnectionPersistent
internal SQLiteConnection Con
internal Plugin Plugin
public long LastInsertRowId
internal string get_ConnectionString()
internal void set_ConnectionString(string value)
internal bool get_ConnectionPersistent()
internal void set_ConnectionPersistent(bool value)
internal SQLiteConnection get_Con()
internal void set_Con(SQLiteConnection value)
internal Plugin get_Plugin()
internal void set_Plugin(Plugin value)
public long get_LastInsertRowId()
internal void set_LastInsertRowId(long value)
public void .ctor(string connection, bool persistent)
}
public Oxide.Ext.SQLite.Sql : object {
private Regex RxParams
private Object[] _args
private string _sql
private Object[] _argsFinal
private Sql _rhs
private string _sqlFinal
public Sql Builder
public string SQL
public Object[] Arguments
public void .ctor(string sql, Object[] args)
public Sql get_Builder()
public string get_SQL()
public Object[] get_Arguments()
private void Build()
public Sql Append(Sql sql)
public Sql Append(string sql, Object[] args)
private bool Is(Sql sql, string sqltype)
private void Build(StringBuilder sb, List`1<object> args, Sql lhs)
public Sql Where(string sql, Object[] args)
public Sql OrderBy(Object[] columns)
public Sql Select(Object[] columns)
public Sql From(Object[] tables)
public Sql GroupBy(Object[] columns)
private SqlJoinClause Join(string joinType, string table)
public SqlJoinClause InnerJoin(string table)
public SqlJoinClause LeftJoin(string table)
public string ProcessParams(string sql, Object[] argsSrc, List`1<object> argsDest)
public void AddParams(IDbCommand cmd, Object[] items, string parameterPrefix)
public void AddParam(IDbCommand cmd, object item, string parameterPrefix)
}
