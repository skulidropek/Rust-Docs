internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal SR : object {
public string Argument_BadFormatSpecifier
public string Argument_InvalidNumberStyles
public string Argument_InvalidHexStyle
public string Argument_MustBeBigInt
public string Format_TooLarge
public string ArgumentOutOfRange_MustBeNonNeg
public string Overflow_BigIntInfinity
public string Overflow_NotANumber
public string Overflow_ParseBigInteger
public string Overflow_Int32
public string Overflow_Int64
public string Overflow_UInt32
public string Overflow_UInt64
public string Overflow_Decimal
public string Arg_ArgumentOutOfRangeException
public string Arg_ElementsInSourceIsGreaterThanDestination
public string Arg_NullArgumentNullRef
public string Arg_TypeNotSupported
internal string GetString(string name, Object[] args)
internal string GetString(CultureInfo culture, string name, Object[] args)
internal string GetString(string name)
internal string GetString(CultureInfo culture, string name)
internal string Format(string resourceFormat, Object[] args)
internal string Format(string resourceFormat, object p1)
internal string Format(string resourceFormat, object p1, object p2)
internal string Format(string resourceFormat, object p1, object p2, object p3)
}
internal System.Globalization.FormatProvider : object {
internal string FormatBigInteger(int precision, int scale, bool sign, string format, NumberFormatInfo numberFormatInfo, Char[] digits, int startIndex)
internal bool TryStringToBigInteger(ReadOnlySpan`1<char> s, NumberStyles styles, NumberFormatInfo numberFormatInfo, StringBuilder receiver, Int32& precision, Int32& scale, Boolean& sign)
}
internal System.MathF : object {
public float PI
public float Abs(float x)
public float Acos(float x)
public float Cos(float x)
public float IEEERemainder(float x, float y)
public float Pow(float x, float y)
public float Sin(float x)
public float Sqrt(float x)
public float Tan(float x)
}
public System.Numerics.BigInteger : ValueType {
private int knMaskHighBit
private UInt32 kuMaskHighBit
private int kcbitUint
private int kcbitUlong
private int DecimalScaleFactorMask
private int DecimalSignMask
internal int _sign
internal UInt32[] _bits
private BigInteger s_bnMinInt
private BigInteger s_bnOneInt
private BigInteger s_bnZeroInt
private BigInteger s_bnMinusOneInt
private Byte[] s_success
public BigInteger Zero
public BigInteger One
public BigInteger MinusOne
public bool IsPowerOfTwo
public bool IsZero
public bool IsOne
public bool IsEven
public int Sign
public void .ctor(int value)
public void .ctor(UInt32 value)
public void .ctor(long value)
public void .ctor(ulong value)
public void .ctor(float value)
public void .ctor(double value)
public void .ctor(decimal value)
public void .ctor(Byte[] value)
public void .ctor(ReadOnlySpan`1<byte> value)
internal void .ctor(int n, UInt32[] rgu)
internal void .ctor(UInt32[] value, bool negative)
private void .ctor(UInt32[] value)
public BigInteger get_Zero()
public BigInteger get_One()
public BigInteger get_MinusOne()
public bool get_IsPowerOfTwo()
public bool get_IsZero()
public bool get_IsOne()
public bool get_IsEven()
public int get_Sign()
public BigInteger Parse(string value)
public BigInteger Parse(string value, NumberStyles style)
public BigInteger Parse(string value, IFormatProvider provider)
public BigInteger Parse(string value, NumberStyles style, IFormatProvider provider)
public bool TryParse(string value, BigInteger& result)
public bool TryParse(string value, NumberStyles style, IFormatProvider provider, BigInteger& result)
public BigInteger Parse(ReadOnlySpan`1<char> value, NumberStyles style, IFormatProvider provider)
public bool TryParse(ReadOnlySpan`1<char> value, BigInteger& result, NumberStyles style, IFormatProvider provider)
public int Compare(BigInteger left, BigInteger right)
public BigInteger Abs(BigInteger value)
public BigInteger Add(BigInteger left, BigInteger right)
public BigInteger Subtract(BigInteger left, BigInteger right)
public BigInteger Multiply(BigInteger left, BigInteger right)
public BigInteger Divide(BigInteger dividend, BigInteger divisor)
public BigInteger Remainder(BigInteger dividend, BigInteger divisor)
public BigInteger DivRem(BigInteger dividend, BigInteger divisor, BigInteger& remainder)
public BigInteger Negate(BigInteger value)
public double Log(BigInteger value)
public double Log(BigInteger value, double baseValue)
public double Log10(BigInteger value)
public BigInteger GreatestCommonDivisor(BigInteger left, BigInteger right)
private BigInteger GreatestCommonDivisor(UInt32[] leftBits, UInt32[] rightBits)
public BigInteger Max(BigInteger left, BigInteger right)
public BigInteger Min(BigInteger left, BigInteger right)
public BigInteger ModPow(BigInteger value, BigInteger exponent, BigInteger modulus)
public BigInteger Pow(BigInteger value, int exponent)
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(long other)
public bool Equals(ulong other)
public bool Equals(BigInteger other)
public int CompareTo(long other)
public int CompareTo(ulong other)
public int CompareTo(BigInteger other)
public int CompareTo(object obj)
public Byte[] ToByteArray()
public bool TryWriteBytes(Span`1<byte> destination, Int32& bytesWritten)
public int GetByteCount()
private Byte[] TryGetBytes(GetBytesMode mode, Span`1<byte> destination, Int32& bytesWritten)
private UInt32[] ToUInt32Array()
public string ToString()
public string ToString(IFormatProvider provider)
public string ToString(string format)
public string ToString(string format, IFormatProvider provider)
private BigInteger Add(UInt32[] leftBits, int leftSign, UInt32[] rightBits, int rightSign)
public BigInteger op_Subtraction(BigInteger left, BigInteger right)
private BigInteger Subtract(UInt32[] leftBits, int leftSign, UInt32[] rightBits, int rightSign)
public BigInteger op_Implicit(byte value)
public BigInteger op_Implicit(sbyte value)
public BigInteger op_Implicit(short value)
public BigInteger op_Implicit(ushort value)
public BigInteger op_Implicit(int value)
public BigInteger op_Implicit(UInt32 value)
public BigInteger op_Implicit(long value)
public BigInteger op_Implicit(ulong value)
public BigInteger op_Explicit(float value)
public BigInteger op_Explicit(double value)
public BigInteger op_Explicit(decimal value)
public byte op_Explicit(BigInteger value)
public sbyte op_Explicit(BigInteger value)
public short op_Explicit(BigInteger value)
public ushort op_Explicit(BigInteger value)
public int op_Explicit(BigInteger value)
public UInt32 op_Explicit(BigInteger value)
public long op_Explicit(BigInteger value)
public ulong op_Explicit(BigInteger value)
public float op_Explicit(BigInteger value)
public double op_Explicit(BigInteger value)
public decimal op_Explicit(BigInteger value)
public BigInteger op_BitwiseAnd(BigInteger left, BigInteger right)
public BigInteger op_BitwiseOr(BigInteger left, BigInteger right)
public BigInteger op_ExclusiveOr(BigInteger left, BigInteger right)
public BigInteger op_LeftShift(BigInteger value, int shift)
public BigInteger op_RightShift(BigInteger value, int shift)
public BigInteger op_OnesComplement(BigInteger value)
public BigInteger op_UnaryNegation(BigInteger value)
public BigInteger op_UnaryPlus(BigInteger value)
public BigInteger op_Increment(BigInteger value)
public BigInteger op_Decrement(BigInteger value)
public BigInteger op_Addition(BigInteger left, BigInteger right)
public BigInteger op_Multiply(BigInteger left, BigInteger right)
public BigInteger op_Division(BigInteger dividend, BigInteger divisor)
public BigInteger op_Modulus(BigInteger dividend, BigInteger divisor)
public bool op_LessThan(BigInteger left, BigInteger right)
public bool op_LessThanOrEqual(BigInteger left, BigInteger right)
public bool op_GreaterThan(BigInteger left, BigInteger right)
public bool op_GreaterThanOrEqual(BigInteger left, BigInteger right)
public bool op_Equality(BigInteger left, BigInteger right)
public bool op_Inequality(BigInteger left, BigInteger right)
public bool op_LessThan(BigInteger left, long right)
public bool op_LessThanOrEqual(BigInteger left, long right)
public bool op_GreaterThan(BigInteger left, long right)
public bool op_GreaterThanOrEqual(BigInteger left, long right)
public bool op_Equality(BigInteger left, long right)
public bool op_Inequality(BigInteger left, long right)
public bool op_LessThan(long left, BigInteger right)
public bool op_LessThanOrEqual(long left, BigInteger right)
public bool op_GreaterThan(long left, BigInteger right)
public bool op_GreaterThanOrEqual(long left, BigInteger right)
public bool op_Equality(long left, BigInteger right)
public bool op_Inequality(long left, BigInteger right)
public bool op_LessThan(BigInteger left, ulong right)
public bool op_LessThanOrEqual(BigInteger left, ulong right)
public bool op_GreaterThan(BigInteger left, ulong right)
public bool op_GreaterThanOrEqual(BigInteger left, ulong right)
public bool op_Equality(BigInteger left, ulong right)
public bool op_Inequality(BigInteger left, ulong right)
public bool op_LessThan(ulong left, BigInteger right)
public bool op_LessThanOrEqual(ulong left, BigInteger right)
public bool op_GreaterThan(ulong left, BigInteger right)
public bool op_GreaterThanOrEqual(ulong left, BigInteger right)
public bool op_Equality(ulong left, BigInteger right)
public bool op_Inequality(ulong left, BigInteger right)
private bool GetPartsForBitManipulation(BigInteger& x, UInt32[]& xd, Int32& xl)
internal int GetDiffLength(UInt32[] rgu1, UInt32[] rgu2, int cu)
private void AssertValid()
}
internal System.Numerics.BigIntegerCalculator : object {
private int ReducerThreshold
private int SquareThreshold
private int AllocationThreshold
private int MultiplyThreshold
public UInt32[] Add(UInt32[] left, UInt32 right)
public UInt32[] Add(UInt32[] left, UInt32[] right)
private void Add(UInt32* left, int leftLength, UInt32* right, int rightLength, UInt32* bits, int bitsLength)
private void AddSelf(UInt32* left, int leftLength, UInt32* right, int rightLength)
public UInt32[] Subtract(UInt32[] left, UInt32 right)
public UInt32[] Subtract(UInt32[] left, UInt32[] right)
private void Subtract(UInt32* left, int leftLength, UInt32* right, int rightLength, UInt32* bits, int bitsLength)
private void SubtractSelf(UInt32* left, int leftLength, UInt32* right, int rightLength)
public int Compare(UInt32[] left, UInt32[] right)
private int Compare(UInt32* left, int leftLength, UInt32* right, int rightLength)
public UInt32[] Divide(UInt32[] left, UInt32 right, UInt32& remainder)
public UInt32[] Divide(UInt32[] left, UInt32 right)
public UInt32 Remainder(UInt32[] left, UInt32 right)
public UInt32[] Divide(UInt32[] left, UInt32[] right, UInt32[]& remainder)
public UInt32[] Divide(UInt32[] left, UInt32[] right)
public UInt32[] Remainder(UInt32[] left, UInt32[] right)
private void Divide(UInt32* left, int leftLength, UInt32* right, int rightLength, UInt32* bits, int bitsLength)
private UInt32 AddDivisor(UInt32* left, int leftLength, UInt32* right, int rightLength)
private UInt32 SubtractDivisor(UInt32* left, int leftLength, UInt32* right, int rightLength, ulong q)
private bool DivideGuessTooBig(ulong q, ulong valHi, UInt32 valLo, UInt32 divHi, UInt32 divLo)
private UInt32[] CreateCopy(UInt32[] value)
private int LeadingZeros(UInt32 value)
public UInt32 Gcd(UInt32 left, UInt32 right)
public ulong Gcd(ulong left, ulong right)
public UInt32 Gcd(UInt32[] left, UInt32 right)
public UInt32[] Gcd(UInt32[] left, UInt32[] right)
private void Gcd(BitsBuffer& left, BitsBuffer& right)
private void ExtractDigits(BitsBuffer& xBuffer, BitsBuffer& yBuffer, UInt64& x, UInt64& y)
private void LehmerCore(BitsBuffer& xBuffer, BitsBuffer& yBuffer, long a, long b, long c, long d)
public UInt32[] Pow(UInt32 value, UInt32 power)
public UInt32[] Pow(UInt32[] value, UInt32 power)
private UInt32[] PowCore(UInt32 power, BitsBuffer& value)
private int PowBound(UInt32 power, int valueLength, int resultLength)
private void PowCore(UInt32 power, BitsBuffer& value, BitsBuffer& result, BitsBuffer& temp)
public UInt32 Pow(UInt32 value, UInt32 power, UInt32 modulus)
public UInt32 Pow(UInt32[] value, UInt32 power, UInt32 modulus)
public UInt32 Pow(UInt32 value, UInt32[] power, UInt32 modulus)
public UInt32 Pow(UInt32[] value, UInt32[] power, UInt32 modulus)
private UInt32 PowCore(UInt32[] power, UInt32 modulus, ulong value, ulong result)
private UInt32 PowCore(UInt32 power, UInt32 modulus, ulong value, ulong result)
public UInt32[] Pow(UInt32 value, UInt32 power, UInt32[] modulus)
public UInt32[] Pow(UInt32[] value, UInt32 power, UInt32[] modulus)
public UInt32[] Pow(UInt32 value, UInt32[] power, UInt32[] modulus)
public UInt32[] Pow(UInt32[] value, UInt32[] power, UInt32[] modulus)
private UInt32[] PowCore(UInt32[] power, UInt32[] modulus, BitsBuffer& value)
private UInt32[] PowCore(UInt32 power, UInt32[] modulus, BitsBuffer& value)
private void PowCore(UInt32[] power, UInt32[] modulus, BitsBuffer& value, BitsBuffer& result, BitsBuffer& temp)
private void PowCore(UInt32 power, UInt32[] modulus, BitsBuffer& value, BitsBuffer& result, BitsBuffer& temp)
private void PowCore(UInt32[] power, FastReducer& reducer, BitsBuffer& value, BitsBuffer& result, BitsBuffer& temp)
private void PowCore(UInt32 power, FastReducer& reducer, BitsBuffer& value, BitsBuffer& result, BitsBuffer& temp)
private int ActualLength(UInt32[] value)
private int ActualLength(UInt32[] value, int length)
public UInt32[] Square(UInt32[] value)
private void Square(UInt32* value, int valueLength, UInt32* bits, int bitsLength)
public UInt32[] Multiply(UInt32[] left, UInt32 right)
public UInt32[] Multiply(UInt32[] left, UInt32[] right)
private void Multiply(UInt32* left, int leftLength, UInt32* right, int rightLength, UInt32* bits, int bitsLength)
private void SubtractCore(UInt32* left, int leftLength, UInt32* right, int rightLength, UInt32* core, int coreLength)
}
internal System.Numerics.BigNumber : object {
private NumberStyles InvalidNumberStyles
internal bool TryValidateParseStyleInteger(NumberStyles style, ArgumentException& e)
internal bool TryParseBigInteger(string value, NumberStyles style, NumberFormatInfo info, BigInteger& result)
internal bool TryParseBigInteger(ReadOnlySpan`1<char> value, NumberStyles style, NumberFormatInfo info, BigInteger& result)
internal BigInteger ParseBigInteger(string value, NumberStyles style, NumberFormatInfo info)
private ReadOnlySpan`1<char> AsReadOnlySpan(string s)
internal BigInteger ParseBigInteger(ReadOnlySpan`1<char> value, NumberStyles style, NumberFormatInfo info)
private bool HexNumberToBigInteger(BigNumberBuffer& number, BigInteger& value)
private bool NumberToBigInteger(BigNumberBuffer& number, BigInteger& value)
internal char ParseFormatSpecifier(string format, Int32& digits)
private string FormatBigIntegerToHexString(BigInteger value, char format, int digits, NumberFormatInfo info)
internal string FormatBigInteger(BigInteger value, string format, NumberFormatInfo info)
}
public System.Numerics.Complex : ValueType {
public Complex Zero
public Complex One
public Complex ImaginaryOne
private double InverseOfLog10
private double s_sqrtRescaleThreshold
private double s_asinOverflowThreshold
private double s_log2
private double m_real
private double m_imaginary
public double Real
public double Imaginary
public double Magnitude
public double Phase
public void .ctor(double real, double imaginary)
public double get_Real()
public double get_Imaginary()
public double get_Magnitude()
public double get_Phase()
public Complex FromPolarCoordinates(double magnitude, double phase)
public Complex Negate(Complex value)
public Complex Add(Complex left, Complex right)
public Complex Subtract(Complex left, Complex right)
public Complex Multiply(Complex left, Complex right)
public Complex Divide(Complex dividend, Complex divisor)
public Complex op_UnaryNegation(Complex value)
public Complex op_Addition(Complex left, Complex right)
public Complex op_Subtraction(Complex left, Complex right)
public Complex op_Multiply(Complex left, Complex right)
public Complex op_Division(Complex left, Complex right)
public double Abs(Complex value)
private double Hypot(double a, double b)
private double Log1P(double x)
public Complex Conjugate(Complex value)
public Complex Reciprocal(Complex value)
public bool op_Equality(Complex left, Complex right)
public bool op_Inequality(Complex left, Complex right)
public bool Equals(object obj)
public bool Equals(Complex value)
public int GetHashCode()
public string ToString()
public string ToString(string format)
public string ToString(IFormatProvider provider)
public string ToString(string format, IFormatProvider provider)
public Complex Sin(Complex value)
public Complex Sinh(Complex value)
public Complex Asin(Complex value)
public Complex Cos(Complex value)
public Complex Cosh(Complex value)
public Complex Acos(Complex value)
public Complex Tan(Complex value)
public Complex Tanh(Complex value)
public Complex Atan(Complex value)
private void Asin_Internal(double x, double y, Double& b, Double& bPrime, Double& v)
public Complex Log(Complex value)
public Complex Log(Complex value, double baseValue)
public Complex Log10(Complex value)
public Complex Exp(Complex value)
public Complex Sqrt(Complex value)
public Complex Pow(Complex value, Complex power)
public Complex Pow(Complex value, double power)
private Complex Scale(Complex value, double factor)
public Complex op_Implicit(short value)
public Complex op_Implicit(int value)
public Complex op_Implicit(long value)
public Complex op_Implicit(ushort value)
public Complex op_Implicit(UInt32 value)
public Complex op_Implicit(ulong value)
public Complex op_Implicit(sbyte value)
public Complex op_Implicit(byte value)
public Complex op_Implicit(float value)
public Complex op_Implicit(double value)
public Complex op_Explicit(BigInteger value)
public Complex op_Explicit(decimal value)
}
internal System.Numerics.DoubleUlong : ValueType {
public double dbl
public ulong uu
}
internal System.Numerics.Hashing.HashHelpers : object {
public int RandomSeed
public int Combine(int h1, int h2)
}
public System.Numerics.Matrix3x2 : ValueType {
public float M11
public float M12
public float M21
public float M22
public float M31
public float M32
private Matrix3x2 _identity
public Matrix3x2 Identity
public bool IsIdentity
public Vector2 Translation
public Matrix3x2 get_Identity()
public bool get_IsIdentity()
public Vector2 get_Translation()
public void set_Translation(Vector2 value)
public void .ctor(float m11, float m12, float m21, float m22, float m31, float m32)
public Matrix3x2 CreateTranslation(Vector2 position)
public Matrix3x2 CreateTranslation(float xPosition, float yPosition)
public Matrix3x2 CreateScale(float xScale, float yScale)
public Matrix3x2 CreateScale(float xScale, float yScale, Vector2 centerPoint)
public Matrix3x2 CreateScale(Vector2 scales)
public Matrix3x2 CreateScale(Vector2 scales, Vector2 centerPoint)
public Matrix3x2 CreateScale(float scale)
public Matrix3x2 CreateScale(float scale, Vector2 centerPoint)
public Matrix3x2 CreateSkew(float radiansX, float radiansY)
public Matrix3x2 CreateSkew(float radiansX, float radiansY, Vector2 centerPoint)
public Matrix3x2 CreateRotation(float radians)
public Matrix3x2 CreateRotation(float radians, Vector2 centerPoint)
public float GetDeterminant()
public bool Invert(Matrix3x2 matrix, Matrix3x2& result)
public Matrix3x2 Lerp(Matrix3x2 matrix1, Matrix3x2 matrix2, float amount)
public Matrix3x2 Negate(Matrix3x2 value)
public Matrix3x2 Add(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 Subtract(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 Multiply(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 Multiply(Matrix3x2 value1, float value2)
public Matrix3x2 op_UnaryNegation(Matrix3x2 value)
public Matrix3x2 op_Addition(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 op_Subtraction(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 op_Multiply(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 op_Multiply(Matrix3x2 value1, float value2)
public bool op_Equality(Matrix3x2 value1, Matrix3x2 value2)
public bool op_Inequality(Matrix3x2 value1, Matrix3x2 value2)
public bool Equals(Matrix3x2 other)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
public System.Numerics.Matrix4x4 : ValueType {
public float M11
public float M12
public float M13
public float M14
public float M21
public float M22
public float M23
public float M24
public float M31
public float M32
public float M33
public float M34
public float M41
public float M42
public float M43
public float M44
private Matrix4x4 _identity
public Matrix4x4 Identity
public bool IsIdentity
public Vector3 Translation
public Matrix4x4 get_Identity()
public bool get_IsIdentity()
public Vector3 get_Translation()
public void set_Translation(Vector3 value)
public void .ctor(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44)
public void .ctor(Matrix3x2 value)
public Matrix4x4 CreateBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector)
public Matrix4x4 CreateConstrainedBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 rotateAxis, Vector3 cameraForwardVector, Vector3 objectForwardVector)
public Matrix4x4 CreateTranslation(Vector3 position)
public Matrix4x4 CreateTranslation(float xPosition, float yPosition, float zPosition)
public Matrix4x4 CreateScale(float xScale, float yScale, float zScale)
public Matrix4x4 CreateScale(float xScale, float yScale, float zScale, Vector3 centerPoint)
public Matrix4x4 CreateScale(Vector3 scales)
public Matrix4x4 CreateScale(Vector3 scales, Vector3 centerPoint)
public Matrix4x4 CreateScale(float scale)
public Matrix4x4 CreateScale(float scale, Vector3 centerPoint)
public Matrix4x4 CreateRotationX(float radians)
public Matrix4x4 CreateRotationX(float radians, Vector3 centerPoint)
public Matrix4x4 CreateRotationY(float radians)
public Matrix4x4 CreateRotationY(float radians, Vector3 centerPoint)
public Matrix4x4 CreateRotationZ(float radians)
public Matrix4x4 CreateRotationZ(float radians, Vector3 centerPoint)
public Matrix4x4 CreateFromAxisAngle(Vector3 axis, float angle)
public Matrix4x4 CreatePerspectiveFieldOfView(float fieldOfView, float aspectRatio, float nearPlaneDistance, float farPlaneDistance)
public Matrix4x4 CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance)
public Matrix4x4 CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float nearPlaneDistance, float farPlaneDistance)
public Matrix4x4 CreateOrthographic(float width, float height, float zNearPlane, float zFarPlane)
public Matrix4x4 CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNearPlane, float zFarPlane)
public Matrix4x4 CreateLookAt(Vector3 cameraPosition, Vector3 cameraTarget, Vector3 cameraUpVector)
public Matrix4x4 CreateWorld(Vector3 position, Vector3 forward, Vector3 up)
public Matrix4x4 CreateFromQuaternion(Quaternion quaternion)
public Matrix4x4 CreateFromYawPitchRoll(float yaw, float pitch, float roll)
public Matrix4x4 CreateShadow(Vector3 lightDirection, Plane plane)
public Matrix4x4 CreateReflection(Plane value)
public float GetDeterminant()
public bool Invert(Matrix4x4 matrix, Matrix4x4& result)
public bool Decompose(Matrix4x4 matrix, Vector3& scale, Quaternion& rotation, Vector3& translation)
public Matrix4x4 Transform(Matrix4x4 value, Quaternion rotation)
public Matrix4x4 Transpose(Matrix4x4 matrix)
public Matrix4x4 Lerp(Matrix4x4 matrix1, Matrix4x4 matrix2, float amount)
public Matrix4x4 Negate(Matrix4x4 value)
public Matrix4x4 Add(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 Subtract(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 Multiply(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 Multiply(Matrix4x4 value1, float value2)
public Matrix4x4 op_UnaryNegation(Matrix4x4 value)
public Matrix4x4 op_Addition(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 op_Subtraction(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 op_Multiply(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 op_Multiply(Matrix4x4 value1, float value2)
public bool op_Equality(Matrix4x4 value1, Matrix4x4 value2)
public bool op_Inequality(Matrix4x4 value1, Matrix4x4 value2)
public bool Equals(Matrix4x4 other)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
internal System.Numerics.NumericsHelpers : object {
private int kcbitUint
public void GetDoubleParts(double dbl, Int32& sign, Int32& exp, UInt64& man, Boolean& fFinite)
public double GetDoubleFromParts(int sign, int exp, ulong man)
public void DangerousMakeTwosComplement(UInt32[] d)
public ulong MakeUlong(UInt32 uHi, UInt32 uLo)
public UInt32 Abs(int a)
public UInt32 CombineHash(UInt32 u1, UInt32 u2)
public int CombineHash(int n1, int n2)
public int CbitHighZero(UInt32 u)
public int CbitHighZero(ulong uu)
}
public System.Numerics.Plane : ValueType {
public Vector3 Normal
public float D
public void .ctor(float x, float y, float z, float d)
public void .ctor(Vector3 normal, float d)
public void .ctor(Vector4 value)
public Plane CreateFromVertices(Vector3 point1, Vector3 point2, Vector3 point3)
public Plane Normalize(Plane value)
public Plane Transform(Plane plane, Matrix4x4 matrix)
public Plane Transform(Plane plane, Quaternion rotation)
public float Dot(Plane plane, Vector4 value)
public float DotCoordinate(Plane plane, Vector3 value)
public float DotNormal(Plane plane, Vector3 value)
public bool op_Equality(Plane value1, Plane value2)
public bool op_Inequality(Plane value1, Plane value2)
public bool Equals(Plane other)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
public System.Numerics.Quaternion : ValueType {
public float X
public float Y
public float Z
public float W
public Quaternion Identity
public bool IsIdentity
public Quaternion get_Identity()
public bool get_IsIdentity()
public void .ctor(float x, float y, float z, float w)
public void .ctor(Vector3 vectorPart, float scalarPart)
public float Length()
public float LengthSquared()
public Quaternion Normalize(Quaternion value)
public Quaternion Conjugate(Quaternion value)
public Quaternion Inverse(Quaternion value)
public Quaternion CreateFromAxisAngle(Vector3 axis, float angle)
public Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll)
public Quaternion CreateFromRotationMatrix(Matrix4x4 matrix)
public float Dot(Quaternion quaternion1, Quaternion quaternion2)
public Quaternion Slerp(Quaternion quaternion1, Quaternion quaternion2, float amount)
public Quaternion Lerp(Quaternion quaternion1, Quaternion quaternion2, float amount)
public Quaternion Concatenate(Quaternion value1, Quaternion value2)
public Quaternion Negate(Quaternion value)
public Quaternion Add(Quaternion value1, Quaternion value2)
public Quaternion Subtract(Quaternion value1, Quaternion value2)
public Quaternion Multiply(Quaternion value1, Quaternion value2)
public Quaternion Multiply(Quaternion value1, float value2)
public Quaternion Divide(Quaternion value1, Quaternion value2)
public Quaternion op_UnaryNegation(Quaternion value)
public Quaternion op_Addition(Quaternion value1, Quaternion value2)
public Quaternion op_Subtraction(Quaternion value1, Quaternion value2)
public Quaternion op_Multiply(Quaternion value1, Quaternion value2)
public Quaternion op_Multiply(Quaternion value1, float value2)
public Quaternion op_Division(Quaternion value1, Quaternion value2)
public bool op_Equality(Quaternion value1, Quaternion value2)
public bool op_Inequality(Quaternion value1, Quaternion value2)
public bool Equals(Quaternion other)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
internal System.Numerics.Vector : object {
public bool IsHardwareAccelerated
public bool get_IsHardwareAccelerated()
}
public System.Numerics.Vector2 : ValueType {
public float X
public float Y
public Vector2 Zero
public Vector2 One
public Vector2 UnitX
public Vector2 UnitY
public Vector2 get_Zero()
public Vector2 get_One()
public Vector2 get_UnitX()
public Vector2 get_UnitY()
public int GetHashCode()
public bool Equals(object obj)
public string ToString()
public string ToString(string format)
public string ToString(string format, IFormatProvider formatProvider)
public float Length()
public float LengthSquared()
public float Distance(Vector2 value1, Vector2 value2)
public float DistanceSquared(Vector2 value1, Vector2 value2)
public Vector2 Normalize(Vector2 value)
public Vector2 Reflect(Vector2 vector, Vector2 normal)
public Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max)
public Vector2 Lerp(Vector2 value1, Vector2 value2, float amount)
public Vector2 Transform(Vector2 position, Matrix3x2 matrix)
public Vector2 Transform(Vector2 position, Matrix4x4 matrix)
public Vector2 TransformNormal(Vector2 normal, Matrix3x2 matrix)
public Vector2 TransformNormal(Vector2 normal, Matrix4x4 matrix)
public Vector2 Transform(Vector2 value, Quaternion rotation)
public Vector2 Add(Vector2 left, Vector2 right)
public Vector2 Subtract(Vector2 left, Vector2 right)
public Vector2 Multiply(Vector2 left, Vector2 right)
public Vector2 Multiply(Vector2 left, float right)
public Vector2 Multiply(float left, Vector2 right)
public Vector2 Divide(Vector2 left, Vector2 right)
public Vector2 Divide(Vector2 left, float divisor)
public Vector2 Negate(Vector2 value)
public void .ctor(float value)
public void .ctor(float x, float y)
public void CopyTo(Single[] array)
public void CopyTo(Single[] array, int index)
public bool Equals(Vector2 other)
public float Dot(Vector2 value1, Vector2 value2)
public Vector2 Min(Vector2 value1, Vector2 value2)
public Vector2 Max(Vector2 value1, Vector2 value2)
public Vector2 Abs(Vector2 value)
public Vector2 SquareRoot(Vector2 value)
public Vector2 op_Addition(Vector2 left, Vector2 right)
public Vector2 op_Subtraction(Vector2 left, Vector2 right)
public Vector2 op_Multiply(Vector2 left, Vector2 right)
public Vector2 op_Multiply(float left, Vector2 right)
public Vector2 op_Multiply(Vector2 left, float right)
public Vector2 op_Division(Vector2 left, Vector2 right)
public Vector2 op_Division(Vector2 value1, float value2)
public Vector2 op_UnaryNegation(Vector2 value)
public bool op_Equality(Vector2 left, Vector2 right)
public bool op_Inequality(Vector2 left, Vector2 right)
}
public System.Numerics.Vector3 : ValueType {
public float X
public float Y
public float Z
public Vector3 Zero
public Vector3 One
public Vector3 UnitX
public Vector3 UnitY
public Vector3 UnitZ
public Vector3 get_Zero()
public Vector3 get_One()
public Vector3 get_UnitX()
public Vector3 get_UnitY()
public Vector3 get_UnitZ()
public int GetHashCode()
public bool Equals(object obj)
public string ToString()
public string ToString(string format)
public string ToString(string format, IFormatProvider formatProvider)
public float Length()
public float LengthSquared()
public float Distance(Vector3 value1, Vector3 value2)
public float DistanceSquared(Vector3 value1, Vector3 value2)
public Vector3 Normalize(Vector3 value)
public Vector3 Cross(Vector3 vector1, Vector3 vector2)
public Vector3 Reflect(Vector3 vector, Vector3 normal)
public Vector3 Clamp(Vector3 value1, Vector3 min, Vector3 max)
public Vector3 Lerp(Vector3 value1, Vector3 value2, float amount)
public Vector3 Transform(Vector3 position, Matrix4x4 matrix)
public Vector3 TransformNormal(Vector3 normal, Matrix4x4 matrix)
public Vector3 Transform(Vector3 value, Quaternion rotation)
public Vector3 Add(Vector3 left, Vector3 right)
public Vector3 Subtract(Vector3 left, Vector3 right)
public Vector3 Multiply(Vector3 left, Vector3 right)
public Vector3 Multiply(Vector3 left, float right)
public Vector3 Multiply(float left, Vector3 right)
public Vector3 Divide(Vector3 left, Vector3 right)
public Vector3 Divide(Vector3 left, float divisor)
public Vector3 Negate(Vector3 value)
public void .ctor(float value)
public void .ctor(Vector2 value, float z)
public void .ctor(float x, float y, float z)
public void CopyTo(Single[] array)
public void CopyTo(Single[] array, int index)
public bool Equals(Vector3 other)
public float Dot(Vector3 vector1, Vector3 vector2)
public Vector3 Min(Vector3 value1, Vector3 value2)
public Vector3 Max(Vector3 value1, Vector3 value2)
public Vector3 Abs(Vector3 value)
public Vector3 SquareRoot(Vector3 value)
public Vector3 op_Addition(Vector3 left, Vector3 right)
public Vector3 op_Subtraction(Vector3 left, Vector3 right)
public Vector3 op_Multiply(Vector3 left, Vector3 right)
public Vector3 op_Multiply(Vector3 left, float right)
public Vector3 op_Multiply(float left, Vector3 right)
public Vector3 op_Division(Vector3 left, Vector3 right)
public Vector3 op_Division(Vector3 value1, float value2)
public Vector3 op_UnaryNegation(Vector3 value)
public bool op_Equality(Vector3 left, Vector3 right)
public bool op_Inequality(Vector3 left, Vector3 right)
}
public System.Numerics.Vector4 : ValueType {
public float X
public float Y
public float Z
public float W
public Vector4 Zero
public Vector4 One
public Vector4 UnitX
public Vector4 UnitY
public Vector4 UnitZ
public Vector4 UnitW
public Vector4 get_Zero()
public Vector4 get_One()
public Vector4 get_UnitX()
public Vector4 get_UnitY()
public Vector4 get_UnitZ()
public Vector4 get_UnitW()
public int GetHashCode()
public bool Equals(object obj)
public string ToString()
public string ToString(string format)
public string ToString(string format, IFormatProvider formatProvider)
public float Length()
public float LengthSquared()
public float Distance(Vector4 value1, Vector4 value2)
public float DistanceSquared(Vector4 value1, Vector4 value2)
public Vector4 Normalize(Vector4 vector)
public Vector4 Clamp(Vector4 value1, Vector4 min, Vector4 max)
public Vector4 Lerp(Vector4 value1, Vector4 value2, float amount)
public Vector4 Transform(Vector2 position, Matrix4x4 matrix)
public Vector4 Transform(Vector3 position, Matrix4x4 matrix)
public Vector4 Transform(Vector4 vector, Matrix4x4 matrix)
public Vector4 Transform(Vector2 value, Quaternion rotation)
public Vector4 Transform(Vector3 value, Quaternion rotation)
public Vector4 Transform(Vector4 value, Quaternion rotation)
public Vector4 Add(Vector4 left, Vector4 right)
public Vector4 Subtract(Vector4 left, Vector4 right)
public Vector4 Multiply(Vector4 left, Vector4 right)
public Vector4 Multiply(Vector4 left, float right)
public Vector4 Multiply(float left, Vector4 right)
public Vector4 Divide(Vector4 left, Vector4 right)
public Vector4 Divide(Vector4 left, float divisor)
public Vector4 Negate(Vector4 value)
public void .ctor(float value)
public void .ctor(float x, float y, float z, float w)
public void .ctor(Vector2 value, float z, float w)
public void .ctor(Vector3 value, float w)
public void CopyTo(Single[] array)
public void CopyTo(Single[] array, int index)
public bool Equals(Vector4 other)
public float Dot(Vector4 vector1, Vector4 vector2)
public Vector4 Min(Vector4 value1, Vector4 value2)
public Vector4 Max(Vector4 value1, Vector4 value2)
public Vector4 Abs(Vector4 value)
public Vector4 SquareRoot(Vector4 value)
public Vector4 op_Addition(Vector4 left, Vector4 right)
public Vector4 op_Subtraction(Vector4 left, Vector4 right)
public Vector4 op_Multiply(Vector4 left, Vector4 right)
public Vector4 op_Multiply(Vector4 left, float right)
public Vector4 op_Multiply(float left, Vector4 right)
public Vector4 op_Division(Vector4 left, Vector4 right)
public Vector4 op_Division(Vector4 value1, float value2)
public Vector4 op_UnaryNegation(Vector4 value)
public bool op_Equality(Vector4 left, Vector4 right)
public bool op_Inequality(Vector4 left, Vector4 right)
}
