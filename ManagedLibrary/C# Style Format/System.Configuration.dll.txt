internal ConfigXmlTextReader : XmlTextReader {
private string fileName
public string Filename
public void .ctor(Stream s, string fileName)
public void .ctor(TextReader input, string fileName)
public string get_Filename()
}
internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public System.Configuration.AppSettingsSection : ConfigurationSection {
private ConfigurationPropertyCollection _properties
private ConfigurationProperty _propFile
private ConfigurationProperty _propSettings
public string File
public KeyValueConfigurationCollection Settings
protected internal ConfigurationPropertyCollection Properties
protected internal bool IsModified()
protected internal void DeserializeElement(XmlReader reader, bool serializeCollectionKey)
protected internal void Reset(ConfigurationElement parentSection)
protected internal string SerializeSection(ConfigurationElement parentElement, string name, ConfigurationSaveMode saveMode)
public string get_File()
public void set_File(string value)
public KeyValueConfigurationCollection get_Settings()
protected internal ConfigurationPropertyCollection get_Properties()
protected internal object GetRuntimeObject()
}
public System.Configuration.CallbackValidator : ConfigurationValidatorBase {
private Type type
private ValidatorCallback callback
public void .ctor(Type type, ValidatorCallback callback)
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Configuration.CallbackValidatorAttribute : ConfigurationValidatorAttribute {
private string callbackMethodName
private Type type
private ConfigurationValidatorBase instance
public string CallbackMethodName
public Type Type
public ConfigurationValidatorBase ValidatorInstance
public string get_CallbackMethodName()
public void set_CallbackMethodName(string value)
public Type get_Type()
public void set_Type(Type value)
public ConfigurationValidatorBase get_ValidatorInstance()
}
internal System.Configuration.ClientConfigurationSystem : object {
private Configuration cfg
private Configuration Configuration
private bool System.Configuration.Internal.IInternalConfigSystem.SupportsUserConfig
private Configuration get_Configuration()
private object System.Configuration.Internal.IInternalConfigSystem.GetSection(string configKey)
private void System.Configuration.Internal.IInternalConfigSystem.RefreshConfig(string sectionName)
private bool System.Configuration.Internal.IInternalConfigSystem.get_SupportsUserConfig()
}
public System.Configuration.CommaDelimitedStringCollection : StringCollection {
private bool modified
private bool readOnly
private int originalStringHash
public bool IsModified
public bool IsReadOnly
public string Item
public bool get_IsModified()
public bool get_IsReadOnly()
public string get_Item(int index)
public void set_Item(int index, string value)
public void Add(string value)
public void AddRange(String[] range)
public void Clear()
public CommaDelimitedStringCollection Clone()
public void Insert(int index, string value)
public void Remove(string value)
public void SetReadOnly()
public string ToString()
internal void UpdateStringHash()
}
public System.Configuration.CommaDelimitedStringCollectionConverter : ConfigurationConverterBase {
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
internal System.Configuration.ConfigInfo : object {
public string Name
public string TypeName
protected Type Type
private string streamName
public ConfigInfo Parent
public IInternalConfigHost ConfigHost
public string XPath
public string StreamName
public object CreateInstance()
public string get_XPath()
public string get_StreamName()
public void set_StreamName(string value)
public bool HasConfigContent(Configuration cfg)
public bool HasDataContent(Configuration cfg)
protected void ThrowException(string text, XmlReader reader)
public void ReadConfig(Configuration cfg, string streamName, XmlReader reader)
public void WriteConfig(Configuration cfg, XmlWriter writer, ConfigurationSaveMode mode)
public void ReadData(Configuration config, XmlReader reader, bool overrideAllowed)
public void WriteData(Configuration config, XmlWriter writer, ConfigurationSaveMode mode)
internal void Merge(ConfigInfo data)
internal bool HasValues(Configuration config, ConfigurationSaveMode mode)
internal void ResetModified(Configuration config)
}
internal System.Configuration.ConfigInfoCollection : NameObjectCollectionBase {
public ICollection AllKeys
public ConfigInfo Item
public ConfigInfo Item
public ICollection get_AllKeys()
public ConfigInfo get_Item(string name)
public void set_Item(string name, ConfigInfo value)
public ConfigInfo get_Item(int index)
public void set_Item(int index, ConfigInfo value)
public void Add(string name, ConfigInfo config)
public void Clear()
public string GetKey(int index)
public void Remove(string name)
public void RemoveAt(int index)
}
internal System.Configuration.ConfigNameValueCollection : NameValueCollection {
private bool modified
public bool IsModified
public void .ctor(ConfigNameValueCollection col)
public void ResetModified()
public bool get_IsModified()
public void Set(string name, string value)
}
public System.Configuration.Configuration : object {
private Configuration parent
private Hashtable elementData
private string streamName
private ConfigurationSectionGroup rootSectionGroup
private ConfigurationLocationCollection locations
private SectionGroupInfo rootGroup
private IConfigSystem system
private bool hasFile
private string rootNamespace
private string configPath
private string locationConfigPath
private string locationSubPath
private ConfigurationSaveEventHandler SaveStart
private ConfigurationSaveEventHandler SaveEnd
private ContextInformation evaluationContext
internal Configuration Parent
internal string FileName
internal IInternalConfigHost ConfigHost
internal string LocationConfigPath
internal string ConfigPath
public AppSettingsSection AppSettings
public ConnectionStringsSection ConnectionStrings
public string FilePath
public bool HasFile
public ContextInformation EvaluationContext
public ConfigurationLocationCollection Locations
public bool NamespaceDeclared
public ConfigurationSectionGroup RootSectionGroup
public ConfigurationSectionGroupCollection SectionGroups
public ConfigurationSectionCollection Sections
public Func`2<string, string> AssemblyStringTransformer
public FrameworkName TargetFramework
public Func`2<string, string> TypeStringTransformer
internal void add_SaveStart(ConfigurationSaveEventHandler value)
internal void remove_SaveStart(ConfigurationSaveEventHandler value)
internal void add_SaveEnd(ConfigurationSaveEventHandler value)
internal void remove_SaveEnd(ConfigurationSaveEventHandler value)
internal void .ctor(Configuration parent, string locationSubPath)
internal void .ctor(InternalConfigurationSystem system, string locationSubPath)
internal Configuration FindLocationConfiguration(string relativePath, Configuration defaultConfiguration)
internal void Init(IConfigSystem system, string configPath, Configuration parent)
internal Configuration get_Parent()
internal void set_Parent(Configuration value)
internal Configuration GetParentWithFile()
internal string get_FileName()
internal IInternalConfigHost get_ConfigHost()
internal string get_LocationConfigPath()
internal string GetLocationSubPath()
internal string get_ConfigPath()
public AppSettingsSection get_AppSettings()
public ConnectionStringsSection get_ConnectionStrings()
public string get_FilePath()
public bool get_HasFile()
public ContextInformation get_EvaluationContext()
public ConfigurationLocationCollection get_Locations()
public bool get_NamespaceDeclared()
public void set_NamespaceDeclared(bool value)
public ConfigurationSectionGroup get_RootSectionGroup()
public ConfigurationSectionGroupCollection get_SectionGroups()
public ConfigurationSectionCollection get_Sections()
public ConfigurationSection GetSection(string sectionName)
public ConfigurationSectionGroup GetSectionGroup(string sectionGroupName)
internal ConfigurationSection GetSectionInstance(SectionInfo config, bool createDefaultInstance)
internal ConfigurationSectionGroup GetSectionGroupInstance(SectionGroupInfo group)
internal void SetConfigurationSection(SectionInfo config, ConfigurationSection sec)
internal void SetSectionXml(SectionInfo config, string data)
internal string GetSectionXml(SectionInfo config)
internal void CreateSection(SectionGroupInfo group, string name, ConfigurationSection sec)
internal void CreateSectionGroup(SectionGroupInfo parentGroup, string name, ConfigurationSectionGroup sec)
internal void RemoveConfigInfo(ConfigInfo config)
public void Save()
public void Save(ConfigurationSaveMode saveMode)
public void Save(ConfigurationSaveMode saveMode, bool forceSaveAll)
public void SaveAs(string filename)
public void SaveAs(string filename, ConfigurationSaveMode saveMode)
public void SaveAs(string filename, ConfigurationSaveMode saveMode, bool forceSaveAll)
private void Save(Stream stream, ConfigurationSaveMode mode, bool forceUpdateAll)
private void SaveData(XmlTextWriter tw, ConfigurationSaveMode mode, bool forceUpdateAll)
private bool HasValues(ConfigurationSaveMode mode)
private void ResetModified()
private bool Load()
private void ReadConfigFile(XmlReader reader, string fileName)
internal void ReadData(XmlReader reader, bool allowOverride)
private void ThrowException(string text, XmlReader reader)
public Func`2<string, string> get_AssemblyStringTransformer()
public void set_AssemblyStringTransformer(Func`2<string, string> value)
public FrameworkName get_TargetFramework()
public void set_TargetFramework(FrameworkName value)
public Func`2<string, string> get_TypeStringTransformer()
public void set_TypeStringTransformer(Func`2<string, string> value)
}
public System.Configuration.ConfigurationAllowDefinition : Enum {
public int value__
public ConfigurationAllowDefinition MachineOnly
public ConfigurationAllowDefinition MachineToWebRoot
public ConfigurationAllowDefinition MachineToApplication
public ConfigurationAllowDefinition Everywhere
}
public System.Configuration.ConfigurationAllowExeDefinition : Enum {
public int value__
public ConfigurationAllowExeDefinition MachineOnly
public ConfigurationAllowExeDefinition MachineToApplication
public ConfigurationAllowExeDefinition MachineToLocalUser
public ConfigurationAllowExeDefinition MachineToRoamingUser
}
public System.Configuration.ConfigurationBuilder : ProviderBase {
public ConfigurationSection ProcessConfigurationSection(ConfigurationSection configSection)
public XmlNode ProcessRawXml(XmlNode rawXml)
}
public System.Configuration.ConfigurationBuilderSettings : ConfigurationElement {
public ProviderSettingsCollection Builders
public ProviderSettingsCollection get_Builders()
}
public System.Configuration.ConfigurationBuildersSection : ConfigurationSection {
public ProviderSettingsCollection Builders
public ProviderSettingsCollection get_Builders()
public ConfigurationBuilder GetBuilderFromName(string builderName)
}
public System.Configuration.ConfigurationCollectionAttribute : Attribute {
private string addItemName
private string clearItemsName
private string removeItemName
private ConfigurationElementCollectionType collectionType
private Type itemType
public string AddItemName
public string ClearItemsName
public string RemoveItemName
public ConfigurationElementCollectionType CollectionType
public Type ItemType
public void .ctor(Type itemType)
public string get_AddItemName()
public void set_AddItemName(string value)
public string get_ClearItemsName()
public void set_ClearItemsName(string value)
public string get_RemoveItemName()
public void set_RemoveItemName(string value)
public ConfigurationElementCollectionType get_CollectionType()
public void set_CollectionType(ConfigurationElementCollectionType value)
public Type get_ItemType()
}
public System.Configuration.ConfigurationConverterBase : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext ctx, Type type)
public bool CanConvertTo(ITypeDescriptorContext ctx, Type type)
}
public System.Configuration.ConfigurationElement : object {
private string rawXml
private bool modified
private ElementMap map
private ConfigurationPropertyCollection keyProps
private ConfigurationElementCollection defaultCollection
private bool readOnly
private ElementInformation elementInfo
private ConfigurationElementProperty elementProperty
private Configuration _configuration
private bool elementPresent
private ConfigurationLockCollection lockAllAttributesExcept
private ConfigurationLockCollection lockAllElementsExcept
private ConfigurationLockCollection lockAttributes
private ConfigurationLockCollection lockElements
private bool lockItem
private SaveContext saveContext
internal Configuration Configuration
public ElementInformation ElementInformation
internal string RawXml
protected internal ConfigurationElementProperty ElementProperty
protected ContextInformation EvaluationContext
public ConfigurationLockCollection LockAllAttributesExcept
public ConfigurationLockCollection LockAllElementsExcept
public ConfigurationLockCollection LockAttributes
public ConfigurationLockCollection LockElements
public bool LockItem
protected internal object Item
protected internal object Item
protected internal ConfigurationPropertyCollection Properties
internal bool IsElementPresent
public Configuration CurrentConfiguration
protected bool HasContext
internal Configuration get_Configuration()
internal void set_Configuration(Configuration value)
internal void InitFromProperty(PropertyInformation propertyInfo)
public ElementInformation get_ElementInformation()
internal string get_RawXml()
internal void set_RawXml(string value)
protected internal void Init()
protected internal ConfigurationElementProperty get_ElementProperty()
protected ContextInformation get_EvaluationContext()
public ConfigurationLockCollection get_LockAllAttributesExcept()
public ConfigurationLockCollection get_LockAllElementsExcept()
public ConfigurationLockCollection get_LockAttributes()
public ConfigurationLockCollection get_LockElements()
public bool get_LockItem()
public void set_LockItem(bool value)
protected void ListErrors(IList errorList)
protected void SetPropertyValue(ConfigurationProperty prop, object value, bool ignoreLocks)
internal ConfigurationPropertyCollection GetKeyProperties()
internal ConfigurationElementCollection GetDefaultCollection()
protected internal object get_Item(ConfigurationProperty prop)
protected internal void set_Item(ConfigurationProperty prop, object value)
protected internal object get_Item(string propertyName)
protected internal void set_Item(string propertyName, object value)
protected internal ConfigurationPropertyCollection get_Properties()
public bool Equals(object compareTo)
public int GetHashCode()
internal bool HasLocalModifications()
protected internal void DeserializeElement(XmlReader reader, bool serializeCollectionKey)
protected bool OnDeserializeUnrecognizedAttribute(string name, string value)
protected bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader)
protected object OnRequiredPropertyNotFound(string name)
protected void PreSerialize(XmlWriter writer)
protected void PostDeserialize()
protected internal void InitializeDefault()
protected internal bool IsModified()
protected internal void SetReadOnly()
public bool IsReadOnly()
protected internal void Reset(ConfigurationElement parentElement)
protected internal void ResetModified()
protected internal bool SerializeElement(XmlWriter writer, bool serializeCollectionKey)
protected internal bool SerializeToXmlElement(XmlWriter writer, string elementName)
protected internal void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode)
internal bool HasValue(string propName)
internal bool IsReadFromConfig(string propName)
internal bool get_IsElementPresent()
private void ValidateValue(ConfigurationProperty p, string value)
internal bool HasValue(ConfigurationElement parent, PropertyInformation prop, ConfigurationSaveMode mode)
internal bool HasValues(ConfigurationElement parent, ConfigurationSaveMode mode)
internal void PrepareSave(ConfigurationElement parent, ConfigurationSaveMode mode)
public Configuration get_CurrentConfiguration()
protected bool get_HasContext()
protected string GetTransformedAssemblyString(string assemblyName)
protected string GetTransformedTypeString(string typeName)
}
public System.Configuration.ConfigurationElementCollection : ConfigurationElement {
private ArrayList list
private ArrayList removed
private ArrayList inherited
private bool emitClear
private bool modified
private IComparer comparer
private int inheritedLimitIndex
private string addElementName
private string clearElementName
private string removeElementName
public ConfigurationElementCollectionType CollectionType
private bool IsBasic
private bool IsAlternate
public int Count
protected string ElementName
public bool EmitClear
public bool IsSynchronized
public object SyncRoot
protected bool ThrowOnDuplicate
protected internal string AddElementName
protected internal string ClearElementName
protected internal string RemoveElementName
protected void .ctor(IComparer comparer)
internal void InitFromProperty(PropertyInformation propertyInfo)
public ConfigurationElementCollectionType get_CollectionType()
private bool get_IsBasic()
private bool get_IsAlternate()
public int get_Count()
protected string get_ElementName()
public bool get_EmitClear()
public void set_EmitClear(bool value)
public bool get_IsSynchronized()
public object get_SyncRoot()
protected bool get_ThrowOnDuplicate()
protected internal string get_AddElementName()
protected internal void set_AddElementName(string value)
protected internal string get_ClearElementName()
protected internal void set_ClearElementName(string value)
protected internal string get_RemoveElementName()
protected internal void set_RemoveElementName(string value)
protected void BaseAdd(ConfigurationElement element)
protected void BaseAdd(ConfigurationElement element, bool throwIfExists)
protected void BaseAdd(int index, ConfigurationElement element)
protected internal void BaseClear()
protected internal ConfigurationElement BaseGet(int index)
protected internal ConfigurationElement BaseGet(object key)
protected internal Object[] BaseGetAllKeys()
protected internal object BaseGetKey(int index)
protected int BaseIndexOf(ConfigurationElement element)
private int IndexOfKey(object key)
protected internal bool BaseIsRemoved(object key)
protected internal void BaseRemove(object key)
protected internal void BaseRemoveAt(int index)
private bool CompareKeys(object key1, object key2)
public void CopyTo(ConfigurationElement[] array, int index)
protected ConfigurationElement CreateNewElement()
protected ConfigurationElement CreateNewElement(string elementName)
private ConfigurationElement CreateNewElementInternal(string elementName)
public bool Equals(object compareTo)
protected object GetElementKey(ConfigurationElement element)
public int GetHashCode()
private void System.Collections.ICollection.CopyTo(Array arr, int index)
public IEnumerator GetEnumerator()
protected bool IsElementName(string elementName)
protected bool IsElementRemovable(ConfigurationElement element)
protected internal bool IsModified()
public bool IsReadOnly()
internal void PrepareSave(ConfigurationElement parentElement, ConfigurationSaveMode mode)
internal bool HasValues(ConfigurationElement parentElement, ConfigurationSaveMode mode)
protected internal void Reset(ConfigurationElement parentElement)
protected internal void ResetModified()
protected internal void SetReadOnly()
protected internal bool SerializeElement(XmlWriter writer, bool serializeCollectionKey)
protected bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader)
protected internal void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode)
}
public System.Configuration.ConfigurationElementCollectionType : Enum {
public int value__
public ConfigurationElementCollectionType BasicMap
public ConfigurationElementCollectionType AddRemoveClearMap
public ConfigurationElementCollectionType BasicMapAlternate
public ConfigurationElementCollectionType AddRemoveClearMapAlternate
}
public System.Configuration.ConfigurationElementProperty : object {
private ConfigurationValidatorBase validator
public ConfigurationValidatorBase Validator
public void .ctor(ConfigurationValidatorBase validator)
public ConfigurationValidatorBase get_Validator()
}
public System.Configuration.ConfigurationErrorsException : ConfigurationException {
private string filename
private int line
public string BareMessage
public ICollection Errors
public string Filename
public int Line
public string Message
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception inner)
public void .ctor(string message, XmlNode node)
public void .ctor(string message, Exception inner, XmlNode node)
public void .ctor(string message, XmlReader reader)
public void .ctor(string message, Exception inner, XmlReader reader)
public void .ctor(string message, string filename, int line)
public void .ctor(string message, Exception inner, string filename, int line)
public string get_BareMessage()
public ICollection get_Errors()
public string get_Filename()
public int get_Line()
public string get_Message()
public string GetFilename(XmlReader reader)
public int GetLineNumber(XmlReader reader)
public string GetFilename(XmlNode node)
public int GetLineNumber(XmlNode node)
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Configuration.ConfigurationFileMap : object {
private string machineConfigFilename
public string MachineConfigFilename
public void .ctor(string machineConfigFilename)
public string get_MachineConfigFilename()
public void set_MachineConfigFilename(string value)
public object Clone()
}
public System.Configuration.ConfigurationLocation : object {
private Char[] pathTrimChars
private string path
private Configuration configuration
private Configuration parent
private string xmlContent
private bool parentResolved
private bool allowOverride
public string Path
internal bool AllowOverride
internal string XmlContent
internal Configuration OpenedConfiguration
internal void .ctor(string path, string xmlContent, Configuration parent, bool allowOverride)
public string get_Path()
internal bool get_AllowOverride()
internal string get_XmlContent()
internal Configuration get_OpenedConfiguration()
public Configuration OpenConfiguration()
internal void SetParentConfiguration(Configuration parent)
}
public System.Configuration.ConfigurationLocationCollection : ReadOnlyCollectionBase {
public ConfigurationLocation Item
public ConfigurationLocation get_Item(int index)
internal void Add(ConfigurationLocation loc)
internal ConfigurationLocation Find(string location)
internal ConfigurationLocation FindBest(string location)
}
public System.Configuration.ConfigurationLockCollection : object {
private ArrayList names
private ConfigurationElement element
private ConfigurationLockType lockType
private bool is_modified
private Hashtable valid_name_hash
private string valid_names
public string AttributeList
public int Count
public bool HasParentElements
public bool IsModified
public bool IsSynchronized
public object SyncRoot
internal void .ctor(ConfigurationElement element, ConfigurationLockType lockType)
private void CheckName(string name)
public void Add(string name)
public void Clear()
public bool Contains(string name)
public void CopyTo(String[] array, int index)
public IEnumerator GetEnumerator()
public bool IsReadOnly(string name)
public void Remove(string name)
public void SetFromList(string attributeList)
private void System.Collections.ICollection.CopyTo(Array array, int index)
public string get_AttributeList()
public int get_Count()
public bool get_HasParentElements()
public bool get_IsModified()
internal void set_IsModified(bool value)
public bool get_IsSynchronized()
public object get_SyncRoot()
}
internal System.Configuration.ConfigurationLockType : Enum {
public int value__
public ConfigurationLockType Attribute
public ConfigurationLockType Element
public ConfigurationLockType Exclude
}
public System.Configuration.ConfigurationManager : object {
private InternalConfigurationFactory configFactory
private IInternalConfigSystem configSystem
private object lockobj
internal IInternalConfigConfigurationFactory ConfigurationFactory
internal IInternalConfigSystem ConfigurationSystem
public NameValueCollection AppSettings
public ConnectionStringSettingsCollection ConnectionStrings
private string GetAssemblyInfo(Assembly a)
internal Configuration OpenExeConfigurationInternal(ConfigurationUserLevel userLevel, Assembly calling_assembly, string exePath)
public Configuration OpenExeConfiguration(ConfigurationUserLevel userLevel)
public Configuration OpenExeConfiguration(string exePath)
public Configuration OpenMappedExeConfiguration(ExeConfigurationFileMap fileMap, ConfigurationUserLevel userLevel)
public Configuration OpenMachineConfiguration()
public Configuration OpenMappedMachineConfiguration(ConfigurationFileMap fileMap)
internal IInternalConfigConfigurationFactory get_ConfigurationFactory()
internal IInternalConfigSystem get_ConfigurationSystem()
public object GetSection(string sectionName)
public void RefreshSection(string sectionName)
public NameValueCollection get_AppSettings()
public ConnectionStringSettingsCollection get_ConnectionStrings()
internal IInternalConfigSystem ChangeConfigurationSystem(IInternalConfigSystem newSystem)
public Configuration OpenMappedExeConfiguration(ExeConfigurationFileMap fileMap, ConfigurationUserLevel userLevel, bool preLoad)
}
public System.Configuration.ConfigurationPermission : CodeAccessPermission {
private bool unrestricted
public void .ctor(PermissionState state)
public IPermission Copy()
public void FromXml(SecurityElement securityElement)
public IPermission Intersect(IPermission target)
public IPermission Union(IPermission target)
public bool IsSubsetOf(IPermission target)
public bool IsUnrestricted()
public SecurityElement ToXml()
}
public System.Configuration.ConfigurationPermissionAttribute : CodeAccessSecurityAttribute {
public void .ctor(SecurityAction action)
public IPermission CreatePermission()
}
public System.Configuration.ConfigurationProperty : object {
internal object NoDefaultValue
private string name
private Type type
private object default_value
private TypeConverter converter
private ConfigurationValidatorBase validation
private ConfigurationPropertyOptions flags
private string description
private ConfigurationCollectionAttribute collectionAttribute
public TypeConverter Converter
public object DefaultValue
public bool IsKey
public bool IsRequired
public bool IsDefaultCollection
public string Name
public string Description
public Type Type
public ConfigurationValidatorBase Validator
internal bool IsElement
internal ConfigurationCollectionAttribute CollectionAttribute
public bool IsAssemblyStringTransformationRequired
public bool IsTypeStringTransformationRequired
public bool IsVersionCheckRequired
public void .ctor(string name, Type type)
public void .ctor(string name, Type type, object defaultValue)
public void .ctor(string name, Type type, object defaultValue, ConfigurationPropertyOptions options)
public void .ctor(string name, Type type, object defaultValue, TypeConverter typeConverter, ConfigurationValidatorBase validator, ConfigurationPropertyOptions options)
public void .ctor(string name, Type type, object defaultValue, TypeConverter typeConverter, ConfigurationValidatorBase validator, ConfigurationPropertyOptions options, string description)
public TypeConverter get_Converter()
public object get_DefaultValue()
public bool get_IsKey()
public bool get_IsRequired()
public bool get_IsDefaultCollection()
public string get_Name()
public string get_Description()
public Type get_Type()
public ConfigurationValidatorBase get_Validator()
internal object ConvertFromString(string value)
internal string ConvertToString(object value)
internal bool get_IsElement()
internal ConfigurationCollectionAttribute get_CollectionAttribute()
internal void set_CollectionAttribute(ConfigurationCollectionAttribute value)
internal void Validate(object value)
public bool get_IsAssemblyStringTransformationRequired()
public bool get_IsTypeStringTransformationRequired()
public bool get_IsVersionCheckRequired()
}
public System.Configuration.ConfigurationPropertyAttribute : Attribute {
private string name
private object default_value
private ConfigurationPropertyOptions flags
public bool IsKey
public bool IsDefaultCollection
public object DefaultValue
public ConfigurationPropertyOptions Options
public string Name
public bool IsRequired
public void .ctor(string name)
public bool get_IsKey()
public void set_IsKey(bool value)
public bool get_IsDefaultCollection()
public void set_IsDefaultCollection(bool value)
public object get_DefaultValue()
public void set_DefaultValue(object value)
public ConfigurationPropertyOptions get_Options()
public void set_Options(ConfigurationPropertyOptions value)
public string get_Name()
public bool get_IsRequired()
public void set_IsRequired(bool value)
}
public System.Configuration.ConfigurationPropertyCollection : object {
private List`1<ConfigurationProperty> collection
public int Count
public ConfigurationProperty Item
public bool IsSynchronized
public object SyncRoot
public int get_Count()
public ConfigurationProperty get_Item(string name)
public bool get_IsSynchronized()
public object get_SyncRoot()
public void Add(ConfigurationProperty property)
public bool Contains(string name)
public void CopyTo(ConfigurationProperty[] array, int index)
private void System.Collections.ICollection.CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public bool Remove(string name)
public void Clear()
}
public System.Configuration.ConfigurationPropertyOptions : Enum {
public int value__
public ConfigurationPropertyOptions None
public ConfigurationPropertyOptions IsDefaultCollection
public ConfigurationPropertyOptions IsRequired
public ConfigurationPropertyOptions IsKey
public ConfigurationPropertyOptions IsTypeStringTransformationRequired
public ConfigurationPropertyOptions IsAssemblyStringTransformationRequired
public ConfigurationPropertyOptions IsVersionCheckRequired
}
internal System.Configuration.ConfigurationSaveEventArgs : EventArgs {
private string <StreamPath>k__BackingField
private bool <Start>k__BackingField
private object <Context>k__BackingField
private bool <Failed>k__BackingField
private Exception <Exception>k__BackingField
public string StreamPath
public bool Start
public object Context
public bool Failed
public Exception Exception
public string get_StreamPath()
private void set_StreamPath(string value)
public bool get_Start()
private void set_Start(bool value)
public object get_Context()
private void set_Context(object value)
public bool get_Failed()
private void set_Failed(bool value)
public Exception get_Exception()
private void set_Exception(Exception value)
public void .ctor(string streamPath, bool start, Exception ex, object context)
}
internal System.Configuration.ConfigurationSaveEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(Configuration sender, ConfigurationSaveEventArgs args)
public IAsyncResult BeginInvoke(Configuration sender, ConfigurationSaveEventArgs args, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Configuration.ConfigurationSaveMode : Enum {
public int value__
public ConfigurationSaveMode Minimal
public ConfigurationSaveMode Full
public ConfigurationSaveMode Modified
}
public System.Configuration.ConfigurationSection : ConfigurationElement {
private SectionInformation sectionInformation
private IConfigurationSectionHandler section_handler
private string externalDataXml
private object _configContext
internal string ExternalDataXml
internal IConfigurationSectionHandler SectionHandler
public SectionInformation SectionInformation
internal object ConfigContext
internal string get_ExternalDataXml()
internal IConfigurationSectionHandler get_SectionHandler()
internal void set_SectionHandler(IConfigurationSectionHandler value)
public SectionInformation get_SectionInformation()
internal object get_ConfigContext()
internal void set_ConfigContext(object value)
protected internal object GetRuntimeObject()
protected internal bool IsModified()
protected internal void ResetModified()
private ConfigurationElement CreateElement(Type t)
private void DoDeserializeSection(XmlReader reader)
protected internal void DeserializeSection(XmlReader reader)
internal void DeserializeConfigSource(string basePath)
protected internal string SerializeSection(ConfigurationElement parentElement, string name, ConfigurationSaveMode saveMode)
protected internal bool ShouldSerializeElementInTargetVersion(ConfigurationElement element, string elementName, FrameworkName targetFramework)
protected internal bool ShouldSerializePropertyInTargetVersion(ConfigurationProperty property, string propertyName, FrameworkName targetFramework, ConfigurationElement parentConfigurationElement)
protected internal bool ShouldSerializeSectionInTargetVersion(FrameworkName targetFramework)
}
public System.Configuration.ConfigurationSectionCollection : NameObjectCollectionBase {
private SectionGroupInfo group
private Configuration config
private object lockObject
public KeysCollection Keys
public int Count
public ConfigurationSection Item
public ConfigurationSection Item
internal void .ctor(Configuration config, SectionGroupInfo group)
public KeysCollection get_Keys()
public int get_Count()
public ConfigurationSection get_Item(string name)
public ConfigurationSection get_Item(int index)
public void Add(string name, ConfigurationSection section)
public void Clear()
public void CopyTo(ConfigurationSection[] array, int index)
public ConfigurationSection Get(int index)
public ConfigurationSection Get(string name)
public IEnumerator GetEnumerator()
public string GetKey(int index)
public void Remove(string name)
public void RemoveAt(int index)
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Configuration.ConfigurationSectionGroup : object {
private bool require_declaration
private string name
private string type_name
private ConfigurationSectionCollection sections
private ConfigurationSectionGroupCollection groups
private Configuration config
private SectionGroupInfo group
private bool initialized
private Configuration Config
public bool IsDeclared
public bool IsDeclarationRequired
public string Name
public string SectionGroupName
public ConfigurationSectionGroupCollection SectionGroups
public ConfigurationSectionCollection Sections
public string Type
private Configuration get_Config()
internal void Initialize(Configuration config, SectionGroupInfo group)
internal void SetName(string name)
public void ForceDeclaration(bool force)
public void ForceDeclaration()
public bool get_IsDeclared()
public bool get_IsDeclarationRequired()
public string get_Name()
public string get_SectionGroupName()
public ConfigurationSectionGroupCollection get_SectionGroups()
public ConfigurationSectionCollection get_Sections()
public string get_Type()
public void set_Type(string value)
protected internal bool ShouldSerializeSectionGroupInTargetVersion(FrameworkName targetFramework)
}
public System.Configuration.ConfigurationSectionGroupCollection : NameObjectCollectionBase {
private SectionGroupInfo group
private Configuration config
public KeysCollection Keys
public int Count
public ConfigurationSectionGroup Item
public ConfigurationSectionGroup Item
internal void .ctor(Configuration config, SectionGroupInfo group)
public KeysCollection get_Keys()
public int get_Count()
public ConfigurationSectionGroup get_Item(string name)
public ConfigurationSectionGroup get_Item(int index)
public void Add(string name, ConfigurationSectionGroup sectionGroup)
public void Clear()
public void CopyTo(ConfigurationSectionGroup[] array, int index)
public ConfigurationSectionGroup Get(int index)
public ConfigurationSectionGroup Get(string name)
public IEnumerator GetEnumerator()
public string GetKey(int index)
public void Remove(string name)
public void RemoveAt(int index)
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Configuration.ConfigurationUserLevel : Enum {
public int value__
public ConfigurationUserLevel None
public ConfigurationUserLevel PerUserRoaming
public ConfigurationUserLevel PerUserRoamingAndLocal
}
public System.Configuration.ConfigurationValidatorAttribute : Attribute {
private Type validatorType
private ConfigurationValidatorBase instance
public ConfigurationValidatorBase ValidatorInstance
public Type ValidatorType
public void .ctor(Type validator)
public ConfigurationValidatorBase get_ValidatorInstance()
public Type get_ValidatorType()
}
public System.Configuration.ConfigurationValidatorBase : object {
public bool CanValidate(Type type)
public void Validate(object value)
}
internal System.Configuration.ConfigurationXmlDocument : XmlDocument {
public XmlElement CreateElement(string prefix, string localName, string namespaceURI)
}
public System.Configuration.ConnectionStringSettings : ConfigurationElement {
private ConfigurationPropertyCollection _properties
private ConfigurationProperty _propConnectionString
private ConfigurationProperty _propName
private ConfigurationProperty _propProviderName
protected internal ConfigurationPropertyCollection Properties
public string Name
public string ProviderName
public string ConnectionString
public void .ctor(string name, string connectionString)
public void .ctor(string name, string connectionString, string providerName)
protected internal ConfigurationPropertyCollection get_Properties()
public string get_Name()
public void set_Name(string value)
public string get_ProviderName()
public void set_ProviderName(string value)
public string get_ConnectionString()
public void set_ConnectionString(string value)
public string ToString()
}
public System.Configuration.ConnectionStringSettingsCollection : ConfigurationElementCollection {
public ConnectionStringSettings Item
public ConnectionStringSettings Item
protected internal ConfigurationPropertyCollection Properties
public ConnectionStringSettings get_Item(string name)
public ConnectionStringSettings get_Item(int index)
public void set_Item(int index, ConnectionStringSettings value)
protected internal ConfigurationPropertyCollection get_Properties()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Add(ConnectionStringSettings settings)
public void Clear()
public int IndexOf(ConnectionStringSettings settings)
public void Remove(ConnectionStringSettings settings)
public void Remove(string name)
public void RemoveAt(int index)
protected void BaseAdd(int index, ConfigurationElement element)
}
public System.Configuration.ConnectionStringsSection : ConfigurationSection {
private ConfigurationProperty _propConnectionStrings
private ConfigurationPropertyCollection _properties
public ConnectionStringSettingsCollection ConnectionStrings
protected internal ConfigurationPropertyCollection Properties
public ConnectionStringSettingsCollection get_ConnectionStrings()
protected internal ConfigurationPropertyCollection get_Properties()
protected internal object GetRuntimeObject()
}
public System.Configuration.ContextInformation : object {
private object ctx
private Configuration config
public object HostingContext
public bool IsMachineLevel
internal void .ctor(Configuration config, object ctx)
public object GetSection(string sectionName)
public object get_HostingContext()
public bool get_IsMachineLevel()
}
public System.Configuration.DefaultSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
protected internal ConfigurationPropertyCollection Properties
protected internal void DeserializeSection(XmlReader xmlReader)
protected internal bool IsModified()
protected internal void Reset(ConfigurationElement parentSection)
protected internal void ResetModified()
protected internal string SerializeSection(ConfigurationElement parentSection, string name, ConfigurationSaveMode saveMode)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Configuration.DefaultValidator : ConfigurationValidatorBase {
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Configuration.DpapiProtectedConfigurationProvider : ProtectedConfigurationProvider {
private bool useMachineProtection
private string NotSupportedReason
public bool UseMachineProtection
public XmlNode Decrypt(XmlNode encryptedNode)
public XmlNode Encrypt(XmlNode node)
public void Initialize(string name, NameValueCollection configurationValues)
public bool get_UseMachineProtection()
}
public System.Configuration.ElementInformation : object {
private PropertyInformation propertyInfo
private ConfigurationElement owner
private PropertyInformationCollection properties
public ICollection Errors
public bool IsCollection
public bool IsLocked
public bool IsPresent
public int LineNumber
public string Source
public Type Type
public ConfigurationValidatorBase Validator
public PropertyInformationCollection Properties
internal void .ctor(ConfigurationElement owner, PropertyInformation propertyInfo)
public ICollection get_Errors()
public bool get_IsCollection()
public bool get_IsLocked()
public bool get_IsPresent()
public int get_LineNumber()
public string get_Source()
public Type get_Type()
public ConfigurationValidatorBase get_Validator()
public PropertyInformationCollection get_Properties()
internal void Reset(ElementInformation parentInfo)
}
internal System.Configuration.ElementMap : object {
private Hashtable elementMaps
private ConfigurationPropertyCollection properties
private ConfigurationCollectionAttribute collectionAttribute
public ConfigurationCollectionAttribute CollectionAttribute
public bool HasProperties
public ConfigurationPropertyCollection Properties
public ElementMap GetMap(Type t)
public void .ctor(Type t)
public ConfigurationCollectionAttribute get_CollectionAttribute()
public bool get_HasProperties()
public ConfigurationPropertyCollection get_Properties()
}
public System.Configuration.ExeConfigurationFileMap : ConfigurationFileMap {
private string exeConfigFilename
private string localUserConfigFilename
private string roamingUserConfigFilename
public string ExeConfigFilename
public string LocalUserConfigFilename
public string RoamingUserConfigFilename
public string get_ExeConfigFilename()
public void set_ExeConfigFilename(string value)
public string get_LocalUserConfigFilename()
public void set_LocalUserConfigFilename(string value)
public string get_RoamingUserConfigFilename()
public void set_RoamingUserConfigFilename(string value)
public object Clone()
public void .ctor(string machineConfigFileName)
}
internal System.Configuration.ExeConfigurationHost : InternalConfigurationHost {
private ExeConfigurationFileMap map
private ConfigurationUserLevel level
public void Init(IInternalConfigRoot root, Object[] hostInitParams)
private void CheckFileMap(ConfigurationUserLevel level, ExeConfigurationFileMap map)
public string GetStreamName(string configPath)
public void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot root, Object[] hostInitConfigurationParams)
}
public System.Configuration.ExeContext : object {
private string path
private ConfigurationUserLevel level
public string ExePath
public ConfigurationUserLevel UserLevel
internal void .ctor(string path, ConfigurationUserLevel level)
public string get_ExePath()
public ConfigurationUserLevel get_UserLevel()
}
public System.Configuration.GenericEnumConverter : ConfigurationConverterBase {
private Type typeEnum
public void .ctor(Type typeEnum)
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
internal System.Configuration.IConfigXmlNode {
public string Filename
public int LineNumber
public string get_Filename()
public int get_LineNumber()
}
public System.Configuration.IgnoreSection : ConfigurationSection {
private string xml
private ConfigurationPropertyCollection properties
protected internal ConfigurationPropertyCollection Properties
protected internal bool IsModified()
protected internal void DeserializeSection(XmlReader xmlReader)
protected internal void Reset(ConfigurationElement parentSection)
protected internal void ResetModified()
protected internal string SerializeSection(ConfigurationElement parentSection, string name, ConfigurationSaveMode saveMode)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Configuration.InfiniteIntConverter : ConfigurationConverterBase {
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
public System.Configuration.InfiniteTimeSpanConverter : ConfigurationConverterBase {
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
public System.Configuration.IntegerValidator : ConfigurationValidatorBase {
private bool rangeIsExclusive
private int minValue
private int maxValue
private int resolution
public void .ctor(int minValue, int maxValue, bool rangeIsExclusive, int resolution)
public void .ctor(int minValue, int maxValue, bool rangeIsExclusive)
public void .ctor(int minValue, int maxValue)
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Configuration.IntegerValidatorAttribute : ConfigurationValidatorAttribute {
private bool excludeRange
private int maxValue
private int minValue
private ConfigurationValidatorBase instance
public bool ExcludeRange
public int MaxValue
public int MinValue
public ConfigurationValidatorBase ValidatorInstance
public bool get_ExcludeRange()
public void set_ExcludeRange(bool value)
public int get_MaxValue()
public void set_MaxValue(int value)
public int get_MinValue()
public void set_MinValue(int value)
public ConfigurationValidatorBase get_ValidatorInstance()
}
public System.Configuration.Internal.DelegatingConfigHost : object {
private IInternalConfigHost host
protected IInternalConfigHost Host
public bool IsRemote
public bool SupportsChangeNotifications
public bool SupportsLocation
public bool SupportsPath
public bool SupportsRefresh
protected IInternalConfigurationBuilderHost ConfigBuilderHost
protected IInternalConfigHost get_Host()
protected void set_Host(IInternalConfigHost value)
public object CreateConfigurationContext(string configPath, string locationSubPath)
public object CreateDeprecatedConfigContext(string configPath)
public string DecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection)
public void DeleteStream(string streamName)
public string EncryptSection(string clearTextXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection)
public string GetConfigPathFromLocationSubPath(string configPath, string locationSubPath)
public Type GetConfigType(string typeName, bool throwOnError)
public string GetConfigTypeName(Type t)
public void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady)
public string GetStreamName(string configPath)
public string GetStreamNameForConfigSource(string streamName, string configSource)
public object GetStreamVersion(string streamName)
public IDisposable Impersonate()
public void Init(IInternalConfigRoot configRoot, Object[] hostInitParams)
public void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot configRoot, Object[] hostInitConfigurationParams)
public bool IsAboveApplication(string configPath)
public bool IsConfigRecordRequired(string configPath)
public bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition)
public bool IsInitDelayed(IInternalConfigRecord configRecord)
public bool IsFile(string streamName)
public bool IsFullTrustSectionWithoutAptcaAllowed(IInternalConfigRecord configRecord)
public bool IsLocationApplicable(string configPath)
public bool get_IsRemote()
public bool IsSecondaryRoot(string configPath)
public bool IsTrustedConfigPath(string configPath)
public Stream OpenStreamForRead(string streamName)
public Stream OpenStreamForRead(string streamName, bool assertPermissions)
public Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext)
public Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext, bool assertPermissions)
public bool PrefetchAll(string configPath, string streamName)
public bool PrefetchSection(string sectionGroupName, string sectionName)
public void RequireCompleteInit(IInternalConfigRecord configRecord)
public object StartMonitoringStreamForChanges(string streamName, StreamChangeCallback callback)
public void StopMonitoringStreamForChanges(string streamName, StreamChangeCallback callback)
public void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo)
public void WriteCompleted(string streamName, bool success, object writeContext)
public void WriteCompleted(string streamName, bool success, object writeContext, bool assertPermissions)
public bool get_SupportsChangeNotifications()
public bool get_SupportsLocation()
public bool get_SupportsPath()
public bool get_SupportsRefresh()
protected IInternalConfigurationBuilderHost get_ConfigBuilderHost()
public ConfigurationSection ProcessConfigurationSection(ConfigurationSection configSection, ConfigurationBuilder builder)
public XmlNode ProcessRawXml(XmlNode rawXml, ConfigurationBuilder builder)
}
public System.Configuration.Internal.IConfigErrorInfo {
public string Filename
public int LineNumber
public string get_Filename()
public int get_LineNumber()
}
public System.Configuration.Internal.IConfigSystem {
public IInternalConfigHost Host
public IInternalConfigRoot Root
public IInternalConfigHost get_Host()
public IInternalConfigRoot get_Root()
public void Init(Type typeConfigHost, Object[] hostInitParams)
}
public System.Configuration.Internal.IConfigurationManagerHelper {
public void EnsureNetConfigLoaded()
}
public System.Configuration.Internal.IConfigurationManagerInternal {
public string ApplicationConfigUri
public string ExeLocalConfigDirectory
public string ExeLocalConfigPath
public string ExeProductName
public string ExeProductVersion
public string ExeRoamingConfigDirectory
public string ExeRoamingConfigPath
public string MachineConfigPath
public bool SetConfigurationSystemInProgress
public bool SupportsUserConfig
public string UserConfigFilename
public string get_ApplicationConfigUri()
public string get_ExeLocalConfigDirectory()
public string get_ExeLocalConfigPath()
public string get_ExeProductName()
public string get_ExeProductVersion()
public string get_ExeRoamingConfigDirectory()
public string get_ExeRoamingConfigPath()
public string get_MachineConfigPath()
public bool get_SetConfigurationSystemInProgress()
public bool get_SupportsUserConfig()
public string get_UserConfigFilename()
}
public System.Configuration.Internal.IInternalConfigClientHost {
public string GetExeConfigPath()
public string GetLocalUserConfigPath()
public string GetRoamingUserConfigPath()
public bool IsExeConfig(string configPath)
public bool IsLocalUserConfig(string configPath)
public bool IsRoamingUserConfig(string configPath)
}
public System.Configuration.Internal.IInternalConfigConfigurationFactory {
public Configuration Create(Type typeConfigHost, Object[] hostInitConfigurationParams)
public string NormalizeLocationSubPath(string subPath, IConfigErrorInfo errorInfo)
}
public System.Configuration.Internal.IInternalConfigHost {
public bool IsRemote
public bool SupportsChangeNotifications
public bool SupportsLocation
public bool SupportsPath
public bool SupportsRefresh
public object CreateConfigurationContext(string configPath, string locationSubPath)
public object CreateDeprecatedConfigContext(string configPath)
public string DecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection)
public void DeleteStream(string streamName)
public string EncryptSection(string clearTextXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection)
public string GetConfigPathFromLocationSubPath(string configPath, string locationSubPath)
public Type GetConfigType(string typeName, bool throwOnError)
public string GetConfigTypeName(Type t)
public void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady)
public string GetStreamName(string configPath)
public string GetStreamNameForConfigSource(string streamName, string configSource)
public object GetStreamVersion(string streamName)
public IDisposable Impersonate()
public void Init(IInternalConfigRoot configRoot, Object[] hostInitParams)
public void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot configRoot, Object[] hostInitConfigurationParams)
public bool IsAboveApplication(string configPath)
public bool IsConfigRecordRequired(string configPath)
public bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition)
public bool IsFile(string streamName)
public bool IsFullTrustSectionWithoutAptcaAllowed(IInternalConfigRecord configRecord)
public bool IsInitDelayed(IInternalConfigRecord configRecord)
public bool IsLocationApplicable(string configPath)
public bool get_IsRemote()
public bool IsSecondaryRoot(string configPath)
public bool IsTrustedConfigPath(string configPath)
public Stream OpenStreamForRead(string streamName)
public Stream OpenStreamForRead(string streamName, bool assertPermissions)
public Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext)
public Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext, bool assertPermissions)
public bool PrefetchAll(string configPath, string streamName)
public bool PrefetchSection(string sectionGroupName, string sectionName)
public void RequireCompleteInit(IInternalConfigRecord configRecord)
public object StartMonitoringStreamForChanges(string streamName, StreamChangeCallback callback)
public void StopMonitoringStreamForChanges(string streamName, StreamChangeCallback callback)
public void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo)
public void WriteCompleted(string streamName, bool success, object writeContext)
public void WriteCompleted(string streamName, bool success, object writeContext, bool assertPermissions)
public bool get_SupportsChangeNotifications()
public bool get_SupportsLocation()
public bool get_SupportsPath()
public bool get_SupportsRefresh()
}
public System.Configuration.Internal.IInternalConfigRecord {
public string ConfigPath
public bool HasInitErrors
public string StreamName
public object GetLkgSection(string configKey)
public object GetSection(string configKey)
public void RefreshSection(string configKey)
public void Remove()
public void ThrowIfInitErrors()
public string get_ConfigPath()
public bool get_HasInitErrors()
public string get_StreamName()
}
public System.Configuration.Internal.IInternalConfigRoot {
public bool IsDesignTime
public IInternalConfigRecord GetConfigRecord(string configPath)
public object GetSection(string section, string configPath)
public string GetUniqueConfigPath(string configPath)
public IInternalConfigRecord GetUniqueConfigRecord(string configPath)
public void Init(IInternalConfigHost host, bool isDesignTime)
public bool get_IsDesignTime()
public void RemoveConfig(string configPath)
public void add_ConfigChanged(InternalConfigEventHandler value)
public void remove_ConfigChanged(InternalConfigEventHandler value)
public void add_ConfigRemoved(InternalConfigEventHandler value)
public void remove_ConfigRemoved(InternalConfigEventHandler value)
}
public System.Configuration.Internal.IInternalConfigSettingsFactory {
public void CompleteInit()
public void SetConfigurationSystem(IInternalConfigSystem internalConfigSystem, bool initComplete)
}
public System.Configuration.Internal.IInternalConfigSystem {
public bool SupportsUserConfig
public object GetSection(string configKey)
public void RefreshConfig(string sectionName)
public bool get_SupportsUserConfig()
}
public System.Configuration.Internal.IInternalConfigurationBuilderHost {
public ConfigurationSection ProcessConfigurationSection(ConfigurationSection configSection, ConfigurationBuilder builder)
public XmlNode ProcessRawXml(XmlNode rawXml, ConfigurationBuilder builder)
}
public System.Configuration.Internal.InternalConfigEventArgs : EventArgs {
private string configPath
public string ConfigPath
public void .ctor(string configPath)
public string get_ConfigPath()
public void set_ConfigPath(string value)
}
public System.Configuration.Internal.InternalConfigEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, InternalConfigEventArgs e)
public IAsyncResult BeginInvoke(object sender, InternalConfigEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Configuration.Internal.StreamChangeCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string streamName)
public IAsyncResult BeginInvoke(string streamName, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Configuration.InternalConfigurationFactory : object {
public Configuration Create(Type typeConfigHost, Object[] hostInitConfigurationParams)
public string NormalizeLocationSubPath(string subPath, IConfigErrorInfo errorInfo)
}
internal System.Configuration.InternalConfigurationHost : object {
public bool IsRemote
public bool SupportsChangeNotifications
public bool SupportsLocation
public bool SupportsPath
public bool SupportsRefresh
public object CreateConfigurationContext(string configPath, string locationSubPath)
public object CreateDeprecatedConfigContext(string configPath)
public void DeleteStream(string streamName)
private string System.Configuration.Internal.IInternalConfigHost.DecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedSection)
private string System.Configuration.Internal.IInternalConfigHost.EncryptSection(string clearXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedSection)
public string GetConfigPathFromLocationSubPath(string configPath, string locationSubPath)
public Type GetConfigType(string typeName, bool throwOnError)
public string GetConfigTypeName(Type t)
public void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady)
public string GetStreamName(string configPath)
public void Init(IInternalConfigRoot root, Object[] hostInitParams)
public void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot root, Object[] hostInitConfigurationParams)
public string GetStreamNameForConfigSource(string streamName, string configSource)
public object GetStreamVersion(string streamName)
public IDisposable Impersonate()
public bool IsAboveApplication(string configPath)
public bool IsConfigRecordRequired(string configPath)
public bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition)
public bool IsFile(string streamName)
public bool IsFullTrustSectionWithoutAptcaAllowed(IInternalConfigRecord configRecord)
public bool IsInitDelayed(IInternalConfigRecord configRecord)
public bool IsLocationApplicable(string configPath)
public bool get_IsRemote()
public bool IsSecondaryRoot(string configPath)
public bool IsTrustedConfigPath(string configPath)
private string get_bundled_machine_config()
private string get_bundled_app_config()
public Stream OpenStreamForRead(string streamName)
public Stream OpenStreamForRead(string streamName, bool assertPermissions)
public Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext)
public Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext, bool assertPermissions)
public bool PrefetchAll(string configPath, string streamName)
public bool PrefetchSection(string sectionGroupName, string sectionName)
public void RequireCompleteInit(IInternalConfigRecord configRecord)
public object StartMonitoringStreamForChanges(string streamName, StreamChangeCallback callback)
public void StopMonitoringStreamForChanges(string streamName, StreamChangeCallback callback)
public void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo)
public void WriteCompleted(string streamName, bool success, object writeContext)
public void WriteCompleted(string streamName, bool success, object writeContext, bool assertPermissions)
public bool get_SupportsChangeNotifications()
public bool get_SupportsLocation()
public bool get_SupportsPath()
public bool get_SupportsRefresh()
}
internal System.Configuration.InternalConfigurationRoot : object {
private IInternalConfigHost host
private bool isDesignTime
private InternalConfigEventHandler ConfigChanged
private InternalConfigEventHandler ConfigRemoved
public bool IsDesignTime
public IInternalConfigRecord GetConfigRecord(string configPath)
public object GetSection(string section, string configPath)
public string GetUniqueConfigPath(string configPath)
public IInternalConfigRecord GetUniqueConfigRecord(string configPath)
public void Init(IInternalConfigHost host, bool isDesignTime)
public void RemoveConfig(string configPath)
public bool get_IsDesignTime()
public void add_ConfigChanged(InternalConfigEventHandler value)
public void remove_ConfigChanged(InternalConfigEventHandler value)
public void add_ConfigRemoved(InternalConfigEventHandler value)
public void remove_ConfigRemoved(InternalConfigEventHandler value)
}
internal System.Configuration.InternalConfigurationSystem : object {
private IInternalConfigHost host
private IInternalConfigRoot root
private Object[] hostInitParams
public IInternalConfigHost Host
public IInternalConfigRoot Root
public void Init(Type typeConfigHost, Object[] hostInitParams)
public void InitForConfiguration(String& locationConfigPath, String& parentConfigPath, String& parentLocationConfigPath)
public IInternalConfigHost get_Host()
public IInternalConfigRoot get_Root()
}
public System.Configuration.KeyValueConfigurationCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public String[] AllKeys
public KeyValueConfigurationElement Item
protected internal ConfigurationPropertyCollection Properties
protected bool ThrowOnDuplicate
public void Add(KeyValueConfigurationElement keyValue)
public void Add(string key, string value)
public void Clear()
public void Remove(string key)
public String[] get_AllKeys()
public KeyValueConfigurationElement get_Item(string key)
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
protected internal ConfigurationPropertyCollection get_Properties()
protected bool get_ThrowOnDuplicate()
}
public System.Configuration.KeyValueConfigurationElement : ConfigurationElement {
private ConfigurationProperty keyProp
private ConfigurationProperty valueProp
private ConfigurationPropertyCollection properties
public string Key
public string Value
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string key, string value)
public string get_Key()
public string get_Value()
public void set_Value(string value)
protected internal void Init()
protected internal ConfigurationPropertyCollection get_Properties()
}
internal System.Configuration.KeyValueInternalCollection : NameValueCollection {
public void SetReadOnly()
public void Add(string name, string val)
}
public System.Configuration.LongValidator : ConfigurationValidatorBase {
private bool rangeIsExclusive
private long minValue
private long maxValue
private long resolution
public void .ctor(long minValue, long maxValue, bool rangeIsExclusive, long resolution)
public void .ctor(long minValue, long maxValue, bool rangeIsExclusive)
public void .ctor(long minValue, long maxValue)
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Configuration.LongValidatorAttribute : ConfigurationValidatorAttribute {
private bool excludeRange
private long maxValue
private long minValue
private ConfigurationValidatorBase instance
public bool ExcludeRange
public long MaxValue
public long MinValue
public ConfigurationValidatorBase ValidatorInstance
public bool get_ExcludeRange()
public void set_ExcludeRange(bool value)
public long get_MaxValue()
public void set_MaxValue(long value)
public long get_MinValue()
public void set_MinValue(long value)
public ConfigurationValidatorBase get_ValidatorInstance()
}
internal System.Configuration.MachineConfigurationHost : InternalConfigurationHost {
private ConfigurationFileMap map
public void Init(IInternalConfigRoot root, Object[] hostInitParams)
public string GetStreamName(string configPath)
public void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot root, Object[] hostInitConfigurationParams)
public bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition)
}
public System.Configuration.NameValueConfigurationCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public String[] AllKeys
public NameValueConfigurationElement Item
protected internal ConfigurationPropertyCollection Properties
public String[] get_AllKeys()
public NameValueConfigurationElement get_Item(string name)
public void set_Item(string name, NameValueConfigurationElement value)
protected internal ConfigurationPropertyCollection get_Properties()
public void Add(NameValueConfigurationElement nameValue)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(NameValueConfigurationElement nameValue)
public void Remove(string name)
}
public System.Configuration.NameValueConfigurationElement : ConfigurationElement {
private ConfigurationPropertyCollection _properties
private ConfigurationProperty _propName
private ConfigurationProperty _propValue
public string Name
public string Value
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name, string value)
public string get_Name()
public string get_Value()
public void set_Value(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Configuration.OverrideMode : Enum {
public int value__
public OverrideMode Allow
public OverrideMode Deny
public OverrideMode Inherit
}
public System.Configuration.PositiveTimeSpanValidator : ConfigurationValidatorBase {
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Configuration.PositiveTimeSpanValidatorAttribute : ConfigurationValidatorAttribute {
private ConfigurationValidatorBase instance
public ConfigurationValidatorBase ValidatorInstance
public ConfigurationValidatorBase get_ValidatorInstance()
}
public System.Configuration.PropertyInformation : object {
private bool isLocked
private bool isModified
private int lineNumber
private string source
private object val
private PropertyValueOrigin origin
private ConfigurationElement owner
private ConfigurationProperty property
public TypeConverter Converter
public object DefaultValue
public string Description
public bool IsKey
public bool IsLocked
public bool IsModified
public bool IsRequired
public int LineNumber
public string Name
public string Source
public Type Type
public ConfigurationValidatorBase Validator
public object Value
internal bool IsElement
public PropertyValueOrigin ValueOrigin
internal ConfigurationProperty Property
internal void .ctor(ConfigurationElement owner, ConfigurationProperty property)
public TypeConverter get_Converter()
public object get_DefaultValue()
public string get_Description()
public bool get_IsKey()
public bool get_IsLocked()
internal void set_IsLocked(bool value)
public bool get_IsModified()
internal void set_IsModified(bool value)
public bool get_IsRequired()
public int get_LineNumber()
internal void set_LineNumber(int value)
public string get_Name()
public string get_Source()
internal void set_Source(string value)
public Type get_Type()
public ConfigurationValidatorBase get_Validator()
public object get_Value()
public void set_Value(object value)
internal void Reset(PropertyInformation parentProperty)
internal bool get_IsElement()
public PropertyValueOrigin get_ValueOrigin()
internal string GetStringValue()
internal void SetStringValue(string value)
internal ConfigurationProperty get_Property()
}
public System.Configuration.PropertyInformationCollection : NameObjectCollectionBase {
public PropertyInformation Item
public void CopyTo(PropertyInformation[] array, int index)
public PropertyInformation get_Item(string propertyName)
public IEnumerator GetEnumerator()
internal void Add(PropertyInformation pi)
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Configuration.PropertyValueOrigin : Enum {
public int value__
public PropertyValueOrigin Default
public PropertyValueOrigin Inherited
public PropertyValueOrigin SetHere
}
public System.Configuration.ProtectedConfiguration : object {
public string DataProtectionProviderName
public string ProtectedDataSectionName
public string RsaProviderName
public string DefaultProvider
public ProtectedConfigurationProviderCollection Providers
internal ProtectedConfigurationSection Section
public string get_DefaultProvider()
public ProtectedConfigurationProviderCollection get_Providers()
internal ProtectedConfigurationSection get_Section()
internal ProtectedConfigurationProvider GetProvider(string name, bool throwOnError)
}
public System.Configuration.ProtectedConfigurationProvider : ProviderBase {
public XmlNode Decrypt(XmlNode encryptedNode)
public XmlNode Encrypt(XmlNode node)
}
public System.Configuration.ProtectedConfigurationProviderCollection : ProviderCollection {
public ProtectedConfigurationProvider Item
public ProtectedConfigurationProvider get_Item(string name)
public void Add(ProviderBase provider)
}
public System.Configuration.ProtectedConfigurationSection : ConfigurationSection {
private ConfigurationProperty defaultProviderProp
private ConfigurationProperty providersProp
private ConfigurationPropertyCollection properties
private ProtectedConfigurationProviderCollection providers
public string DefaultProvider
public ProviderSettingsCollection Providers
protected internal ConfigurationPropertyCollection Properties
public string get_DefaultProvider()
public void set_DefaultProvider(string value)
public ProviderSettingsCollection get_Providers()
protected internal ConfigurationPropertyCollection get_Properties()
internal string EncryptSection(string clearXml, ProtectedConfigurationProvider protectionProvider)
internal string DecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider)
internal ProtectedConfigurationProviderCollection GetAllProviders()
private ProtectedConfigurationProvider InstantiateProvider(ProviderSettings ps)
}
public System.Configuration.ProtectedProviderSettings : ConfigurationElement {
private ConfigurationProperty providersProp
private ConfigurationPropertyCollection properties
protected internal ConfigurationPropertyCollection Properties
public ProviderSettingsCollection Providers
protected internal ConfigurationPropertyCollection get_Properties()
public ProviderSettingsCollection get_Providers()
}
public System.Configuration.Provider.ProviderBase : object {
private bool alreadyInitialized
private string _description
private string _name
public string Name
public string Description
public void Initialize(string name, NameValueCollection config)
public string get_Name()
public string get_Description()
}
public System.Configuration.Provider.ProviderCollection : object {
private Hashtable lookup
private bool readOnly
private ArrayList values
public int Count
public bool IsSynchronized
public object SyncRoot
public ProviderBase Item
public void Add(ProviderBase provider)
public void Clear()
public void CopyTo(ProviderBase[] array, int index)
private void System.Collections.ICollection.CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void Remove(string name)
public void SetReadOnly()
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
public ProviderBase get_Item(string name)
}
public System.Configuration.Provider.ProviderException : Exception {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
}
public System.Configuration.ProviderSettings : ConfigurationElement {
private ConfigNameValueCollection parameters
private ConfigurationProperty nameProp
private ConfigurationProperty typeProp
private ConfigurationPropertyCollection properties
public string Name
public string Type
protected internal ConfigurationPropertyCollection Properties
public NameValueCollection Parameters
public void .ctor(string name, string type)
protected bool OnDeserializeUnrecognizedAttribute(string name, string value)
protected internal bool IsModified()
protected internal void Reset(ConfigurationElement parentElement)
protected internal void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode)
public string get_Name()
public void set_Name(string value)
public string get_Type()
public void set_Type(string value)
protected internal ConfigurationPropertyCollection get_Properties()
public NameValueCollection get_Parameters()
}
public System.Configuration.ProviderSettingsCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection props
public ProviderSettings Item
public ProviderSettings Item
protected internal ConfigurationPropertyCollection Properties
public void Add(ProviderSettings provider)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string name)
public ProviderSettings get_Item(int index)
public void set_Item(int index, ProviderSettings value)
public ProviderSettings get_Item(string key)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Configuration.RegexStringValidator : ConfigurationValidatorBase {
private string regex
public void .ctor(string regex)
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Configuration.RegexStringValidatorAttribute : ConfigurationValidatorAttribute {
private string regex
private ConfigurationValidatorBase instance
public string Regex
public ConfigurationValidatorBase ValidatorInstance
public void .ctor(string regex)
public string get_Regex()
public ConfigurationValidatorBase get_ValidatorInstance()
}
public System.Configuration.RsaProtectedConfigurationProvider : ProtectedConfigurationProvider {
private string cspProviderName
private string keyContainerName
private bool useMachineContainer
private bool useOAEP
private RSACryptoServiceProvider rsa
public string CspProviderName
public string KeyContainerName
public RSAParameters RsaPublicKey
public bool UseMachineContainer
public bool UseOAEP
public bool UseFIPS
private RSACryptoServiceProvider GetProvider()
public XmlNode Decrypt(XmlNode encryptedNode)
public XmlNode Encrypt(XmlNode node)
public void Initialize(string name, NameValueCollection configurationValues)
public void AddKey(int keySize, bool exportable)
public void DeleteKey()
public void ExportKey(string xmlFileName, bool includePrivateParameters)
public void ImportKey(string xmlFileName, bool exportable)
public string get_CspProviderName()
public string get_KeyContainerName()
public RSAParameters get_RsaPublicKey()
public bool get_UseMachineContainer()
public bool get_UseOAEP()
public bool get_UseFIPS()
}
internal System.Configuration.SectionGroupInfo : ConfigInfo {
private bool modified
private ConfigInfoCollection sections
private ConfigInfoCollection groups
private ConfigInfoCollection emptyList
public ConfigInfoCollection Sections
public ConfigInfoCollection Groups
public void .ctor(string groupName, string typeName)
public void AddChild(ConfigInfo data)
public void Clear()
public bool HasChild(string name)
public void RemoveChild(string name)
public SectionInfo GetChildSection(string name)
public SectionGroupInfo GetChildGroup(string name)
public ConfigInfoCollection get_Sections()
public ConfigInfoCollection get_Groups()
public bool HasDataContent(Configuration config)
public bool HasConfigContent(Configuration cfg)
public void ReadConfig(Configuration cfg, string streamName, XmlReader reader)
public void WriteConfig(Configuration cfg, XmlWriter writer, ConfigurationSaveMode mode)
private void ReadRemoveSection(XmlReader reader)
public void ReadRootData(XmlReader reader, Configuration config, bool overrideAllowed)
public void ReadData(Configuration config, XmlReader reader, bool overrideAllowed)
private void ReadContent(XmlReader reader, Configuration config, bool overrideAllowed, bool root)
private ConfigInfo GetConfigInfo(XmlReader reader, SectionGroupInfo current)
internal void Merge(ConfigInfo newData)
public void WriteRootData(XmlWriter writer, Configuration config, ConfigurationSaveMode mode)
public void WriteData(Configuration config, XmlWriter writer, ConfigurationSaveMode mode)
public void WriteContent(XmlWriter writer, Configuration config, ConfigurationSaveMode mode, bool writeElem)
internal bool HasValues(Configuration config, ConfigurationSaveMode mode)
internal void ResetModified(Configuration config)
}
internal System.Configuration.SectionInfo : ConfigInfo {
private bool allowLocation
private bool requirePermission
private bool restartOnExternalChanges
private ConfigurationAllowDefinition allowDefinition
private ConfigurationAllowExeDefinition allowExeDefinition
public void .ctor(string sectionName, SectionInformation info)
public object CreateInstance()
public bool HasDataContent(Configuration config)
public bool HasConfigContent(Configuration cfg)
public void ReadConfig(Configuration cfg, string streamName, XmlReader reader)
public void WriteConfig(Configuration cfg, XmlWriter writer, ConfigurationSaveMode mode)
public void ReadData(Configuration config, XmlReader reader, bool overrideAllowed)
public void WriteData(Configuration config, XmlWriter writer, ConfigurationSaveMode mode)
internal void Merge(ConfigInfo data)
internal bool HasValues(Configuration config, ConfigurationSaveMode mode)
internal void ResetModified(Configuration config)
}
public System.Configuration.SectionInformation : object {
private ConfigurationSection parent
private ConfigurationAllowDefinition allow_definition
private ConfigurationAllowExeDefinition allow_exe_definition
private bool allow_location
private bool allow_override
private bool inherit_on_child_apps
private bool restart_on_external_changes
private bool require_permission
private string config_source
private bool force_update
private string name
private string type_name
private string raw_xml
private ProtectedConfigurationProvider protection_provider
private string <ConfigFilePath>k__BackingField
internal string ConfigFilePath
public ConfigurationAllowDefinition AllowDefinition
public ConfigurationAllowExeDefinition AllowExeDefinition
public bool AllowLocation
public bool AllowOverride
public string ConfigSource
public bool ForceSave
public bool InheritInChildApplications
public bool IsDeclarationRequired
public bool IsDeclared
public bool IsLocked
public bool IsProtected
public string Name
public ProtectedConfigurationProvider ProtectionProvider
public bool RequirePermission
public bool RestartOnExternalChanges
public string SectionName
public string Type
public ConfigurationBuilder ConfigurationBuilder
public OverrideMode OverrideMode
public OverrideMode OverrideModeDefault
public OverrideMode OverrideModeEffective
internal string get_ConfigFilePath()
internal void set_ConfigFilePath(string value)
public ConfigurationAllowDefinition get_AllowDefinition()
public void set_AllowDefinition(ConfigurationAllowDefinition value)
public ConfigurationAllowExeDefinition get_AllowExeDefinition()
public void set_AllowExeDefinition(ConfigurationAllowExeDefinition value)
public bool get_AllowLocation()
public void set_AllowLocation(bool value)
public bool get_AllowOverride()
public void set_AllowOverride(bool value)
public string get_ConfigSource()
public void set_ConfigSource(string value)
public bool get_ForceSave()
public void set_ForceSave(bool value)
public bool get_InheritInChildApplications()
public void set_InheritInChildApplications(bool value)
public bool get_IsDeclarationRequired()
public bool get_IsDeclared()
public bool get_IsLocked()
public bool get_IsProtected()
public string get_Name()
public ProtectedConfigurationProvider get_ProtectionProvider()
public bool get_RequirePermission()
public void set_RequirePermission(bool value)
public bool get_RestartOnExternalChanges()
public void set_RestartOnExternalChanges(bool value)
public string get_SectionName()
public string get_Type()
public void set_Type(string value)
public ConfigurationSection GetParentSection()
internal void SetParentSection(ConfigurationSection parent)
public string GetRawXml()
public void ProtectSection(string protectionProvider)
public void ForceDeclaration(bool force)
public void ForceDeclaration()
public void RevertToParent()
public void UnprotectSection()
public void SetRawXml(string rawXml)
internal void SetName(string name)
public ConfigurationBuilder get_ConfigurationBuilder()
public OverrideMode get_OverrideMode()
public void set_OverrideMode(OverrideMode value)
public OverrideMode get_OverrideModeDefault()
public void set_OverrideModeDefault(OverrideMode value)
public OverrideMode get_OverrideModeEffective()
}
public System.Configuration.StringValidator : ConfigurationValidatorBase {
private Char[] invalidCharacters
private int maxLength
private int minLength
public void .ctor(int minLength)
public void .ctor(int minLength, int maxLength)
public void .ctor(int minLength, int maxLength, string invalidCharacters)
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Configuration.StringValidatorAttribute : ConfigurationValidatorAttribute {
private string invalidCharacters
private int maxLength
private int minLength
private ConfigurationValidatorBase instance
public string InvalidCharacters
public int MaxLength
public int MinLength
public ConfigurationValidatorBase ValidatorInstance
public string get_InvalidCharacters()
public void set_InvalidCharacters(string value)
public int get_MaxLength()
public void set_MaxLength(int value)
public int get_MinLength()
public void set_MinLength(int value)
public ConfigurationValidatorBase get_ValidatorInstance()
}
public System.Configuration.SubclassTypeValidator : ConfigurationValidatorBase {
private Type baseClass
public void .ctor(Type baseClass)
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Configuration.SubclassTypeValidatorAttribute : ConfigurationValidatorAttribute {
private Type baseClass
private ConfigurationValidatorBase instance
public Type BaseClass
public ConfigurationValidatorBase ValidatorInstance
public void .ctor(Type baseClass)
public Type get_BaseClass()
public ConfigurationValidatorBase get_ValidatorInstance()
}
public System.Configuration.TimeSpanMinutesConverter : ConfigurationConverterBase {
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
public System.Configuration.TimeSpanMinutesOrInfiniteConverter : TimeSpanMinutesConverter {
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
public System.Configuration.TimeSpanSecondsConverter : ConfigurationConverterBase {
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
public System.Configuration.TimeSpanSecondsOrInfiniteConverter : TimeSpanSecondsConverter {
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
public System.Configuration.TimeSpanValidator : ConfigurationValidatorBase {
private bool rangeIsExclusive
private TimeSpan minValue
private TimeSpan maxValue
private long resolutionInSeconds
public void .ctor(TimeSpan minValue, TimeSpan maxValue)
public void .ctor(TimeSpan minValue, TimeSpan maxValue, bool rangeIsExclusive)
public void .ctor(TimeSpan minValue, TimeSpan maxValue, bool rangeIsExclusive, long resolutionInSeconds)
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Configuration.TimeSpanValidatorAttribute : ConfigurationValidatorAttribute {
private bool excludeRange
private string maxValueString
private string minValueString
public string TimeSpanMaxValue
public string TimeSpanMinValue
private ConfigurationValidatorBase instance
public string MaxValueString
public string MinValueString
public TimeSpan MaxValue
public TimeSpan MinValue
public bool ExcludeRange
public ConfigurationValidatorBase ValidatorInstance
public string get_MaxValueString()
public void set_MaxValueString(string value)
public string get_MinValueString()
public void set_MinValueString(string value)
public TimeSpan get_MaxValue()
public TimeSpan get_MinValue()
public bool get_ExcludeRange()
public void set_ExcludeRange(bool value)
public ConfigurationValidatorBase get_ValidatorInstance()
}
public System.Configuration.TypeNameConverter : ConfigurationConverterBase {
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
public System.Configuration.ValidatorCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object value)
public IAsyncResult BeginInvoke(object value, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Configuration.WhiteSpaceTrimStringConverter : ConfigurationConverterBase {
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
