public System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs : EventArgs {
private DesignSurface _oldSurface
private DesignSurface _newSurface
public DesignSurface OldSurface
public DesignSurface NewSurface
public void .ctor(DesignSurface oldSurface, DesignSurface newSurface)
public DesignSurface get_OldSurface()
public DesignSurface get_NewSurface()
}
public System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ActiveDesignSurfaceChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ActiveDesignSurfaceChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.ComponentModel.Design.ArrayEditor : CollectionEditor {
public void .ctor(Type type)
protected Type CreateCollectionItemType()
protected Object[] GetItems(object editValue)
protected object SetItems(object editValue, Object[] value)
}
public System.ComponentModel.Design.BinaryEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.ComponentModel.Design.ByteViewer : TableLayoutPanel {
public DisplayMode GetDisplayMode()
public void SaveToFile(string path)
public Byte[] GetBytes()
public void SetBytes(Byte[] bytes)
public void SetDisplayMode(DisplayMode mode)
public void SetFile(string path)
public void SetStartLine(int line)
protected void OnKeyDown(KeyEventArgs e)
protected void OnPaint(PaintEventArgs e)
protected void OnLayout(LayoutEventArgs e)
protected void ScrollChanged(object source, EventArgs e)
}
public System.ComponentModel.Design.CollectionEditor : UITypeEditor {
private Type type
private Type collectionItemType
private Type[] newItemTypes
private ITypeDescriptorContext context
private IServiceProvider provider
private IWindowsFormsEditorService editorService
protected Type CollectionItemType
protected Type CollectionType
protected ITypeDescriptorContext Context
protected string HelpTopic
protected Type[] NewItemTypes
public void .ctor(Type type)
protected Type get_CollectionItemType()
protected Type get_CollectionType()
protected ITypeDescriptorContext get_Context()
protected string get_HelpTopic()
protected Type[] get_NewItemTypes()
protected void CancelChanges()
protected bool CanRemoveInstance(object value)
protected bool CanSelectMultipleInstances()
protected CollectionForm CreateCollectionForm()
protected Type CreateCollectionItemType()
protected object CreateInstance(Type itemType)
protected Type[] CreateNewItemTypes()
protected void DestroyInstance(object instance)
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
protected string GetDisplayText(object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
protected Object[] GetItems(object editValue)
protected IList GetObjectsFromInstance(object instance)
protected object GetService(Type serviceType)
protected object SetItems(object editValue, Object[] value)
protected void ShowHelp()
}
public System.ComponentModel.Design.ComponentActionsType : Enum {
public int value__
public ComponentActionsType All
public ComponentActionsType Component
public ComponentActionsType Service
}
public System.ComponentModel.Design.ComponentDesigner : object {
private IComponent _component
private DesignerVerbCollection _verbs
private ShadowPropertyCollection _shadowPropertyCollection
private DesignerActionListCollection _designerActionList
public ICollection AssociatedComponents
public IComponent Component
public DesignerVerbCollection Verbs
protected InheritanceAttribute InheritanceAttribute
protected bool Inherited
protected ShadowPropertyCollection ShadowProperties
public DesignerActionListCollection ActionLists
protected IComponent ParentComponent
private ICollection System.ComponentModel.Design.ITreeDesigner.Children
private IDesigner System.ComponentModel.Design.ITreeDesigner.Parent
public ICollection get_AssociatedComponents()
public IComponent get_Component()
public DesignerVerbCollection get_Verbs()
protected InheritanceAttribute get_InheritanceAttribute()
protected bool get_Inherited()
protected ShadowPropertyCollection get_ShadowProperties()
public DesignerActionListCollection get_ActionLists()
protected IComponent get_ParentComponent()
public void InitializeNewComponent(IDictionary defaultValues)
public void InitializeExistingComponent(IDictionary defaultValues)
public void Initialize(IComponent component)
public void InitializeNonDefault()
public void DoDefaultAction()
public void OnSetComponentDefaults()
protected InheritanceAttribute InvokeGetInheritanceAttribute(ComponentDesigner toInvoke)
protected void PostFilterAttributes(IDictionary attributes)
protected void PostFilterEvents(IDictionary events)
protected void PostFilterProperties(IDictionary properties)
protected void PreFilterAttributes(IDictionary attributes)
protected void PreFilterEvents(IDictionary events)
protected void PreFilterProperties(IDictionary properties)
protected void RaiseComponentChanged(MemberDescriptor member, object oldValue, object newValue)
protected void RaiseComponentChanging(MemberDescriptor member)
private void System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary attributes)
private void System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary events)
private void System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary properties)
private void System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary attributes)
private void System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary events)
private void System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary properties)
private ICollection System.ComponentModel.Design.ITreeDesigner.get_Children()
private IDesigner System.ComponentModel.Design.ITreeDesigner.get_Parent()
protected object GetService(Type serviceType)
public void Dispose()
protected void Dispose(bool disposing)
protected void Finalize()
}
public System.ComponentModel.Design.Data.DataSourceDescriptor : object {
public Bitmap Image
public bool IsDesignable
public string Name
public string TypeName
public Bitmap get_Image()
public bool get_IsDesignable()
public string get_Name()
public string get_TypeName()
}
public System.ComponentModel.Design.Data.DataSourceDescriptorCollection : CollectionBase {
public DataSourceDescriptor Item
public DataSourceDescriptor get_Item(int index)
public void set_Item(int index, DataSourceDescriptor value)
public int Add(DataSourceDescriptor value)
public bool Contains(DataSourceDescriptor value)
public void CopyTo(DataSourceDescriptor[] array, int index)
public int IndexOf(DataSourceDescriptor value)
public void Insert(int index, DataSourceDescriptor value)
public void Remove(DataSourceDescriptor value)
}
public System.ComponentModel.Design.Data.DataSourceGroup : object {
public DataSourceDescriptorCollection DataSources
public Bitmap Image
public bool IsDefault
public string Name
public DataSourceDescriptorCollection get_DataSources()
public Bitmap get_Image()
public bool get_IsDefault()
public string get_Name()
}
public System.ComponentModel.Design.Data.DataSourceGroupCollection : CollectionBase {
public DataSourceGroup Item
public DataSourceGroup get_Item(int index)
public void set_Item(int index, DataSourceGroup value)
public int Add(DataSourceGroup value)
public bool Contains(DataSourceGroup value)
public void CopyTo(DataSourceGroup[] array, int index)
public int IndexOf(DataSourceGroup value)
public void Insert(int index, DataSourceGroup value)
public void Remove(DataSourceGroup value)
}
public System.ComponentModel.Design.Data.DataSourceProviderService : object {
public bool SupportsAddNewDataSource
public bool SupportsConfigureDataSource
public bool get_SupportsAddNewDataSource()
public bool get_SupportsConfigureDataSource()
public object AddDataSourceInstance(IDesignerHost host, DataSourceDescriptor dataSourceDescriptor)
public DataSourceGroupCollection GetDataSources()
public DataSourceGroup InvokeAddNewDataSource(IWin32Window parentWindow, FormStartPosition startPosition)
public bool InvokeConfigureDataSource(IWin32Window parentWindow, FormStartPosition startPosition, DataSourceDescriptor dataSourceDescriptor)
public void NotifyDataSourceComponentAdded(object dsc)
}
public System.ComponentModel.Design.Data.DesignerDataColumn : object {
private string name
private DbType data_type
private object default_value
private bool identity
private bool nullable
private bool primary_key
private int precision
private int scale
private int length
public string Name
public DbType DataType
public object DefaultValue
public bool Identity
public bool Nullable
public bool PrimaryKey
public int Precision
public int Scale
public int Length
public void .ctor(string name, DbType dataType)
public void .ctor(string name, DbType dataType, object defaultValue)
public void .ctor(string name, DbType dataType, object defaultValue, bool identity, bool nullable, bool primaryKey, int precision, int scale, int length)
public string get_Name()
public DbType get_DataType()
public object get_DefaultValue()
public bool get_Identity()
public bool get_Nullable()
public bool get_PrimaryKey()
public int get_Precision()
public int get_Scale()
public int get_Length()
}
public System.ComponentModel.Design.Data.DesignerDataConnection : object {
private string name
private string provider_name
private string connection_string
private bool is_configured
public string Name
public string ProviderName
public string ConnectionString
public bool IsConfigured
public void .ctor(string name, string providerName, string connectionString)
public void .ctor(string name, string providerName, string connectionString, bool isConfigured)
public string get_Name()
public string get_ProviderName()
public string get_ConnectionString()
public bool get_IsConfigured()
}
public System.ComponentModel.Design.Data.DesignerDataParameter : object {
private string name
private DbType type
private ParameterDirection direction
public DbType DataType
public string Name
public ParameterDirection Direction
public void .ctor(string name, DbType dataType, ParameterDirection direction)
public DbType get_DataType()
public string get_Name()
public ParameterDirection get_Direction()
}
public System.ComponentModel.Design.Data.DesignerDataRelationship : object {
private string name
private ICollection parent_columns
private ICollection child_columns
private DesignerDataTable child_table
public string Name
public ICollection ParentColumns
public DesignerDataTable ChildTable
public ICollection ChildColumns
public void .ctor(string name, ICollection parentColumns, DesignerDataTable childTable, ICollection childColumns)
public string get_Name()
public ICollection get_ParentColumns()
public DesignerDataTable get_ChildTable()
public ICollection get_ChildColumns()
}
public System.ComponentModel.Design.Data.DesignerDataSchemaClass : object {
public DesignerDataSchemaClass StoredProcedures
public DesignerDataSchemaClass Tables
public DesignerDataSchemaClass Views
}
public System.ComponentModel.Design.Data.DesignerDataStoredProcedure : object {
private string name
private string owner
public string Name
public string Owner
public ICollection Parameters
protected void .ctor(string name)
protected void .ctor(string name, string owner)
public string get_Name()
public string get_Owner()
public ICollection get_Parameters()
protected ICollection CreateParameters()
}
public System.ComponentModel.Design.Data.DesignerDataTable : DesignerDataTableBase {
public ICollection Relationships
protected void .ctor(string name)
protected void .ctor(string name, string owner)
protected ICollection CreateRelationships()
public ICollection get_Relationships()
}
public System.ComponentModel.Design.Data.DesignerDataTableBase : object {
private string name
private string owner
public string Name
public string Owner
public ICollection Columns
protected void .ctor(string name)
protected void .ctor(string name, string owner)
public string get_Name()
public string get_Owner()
public ICollection get_Columns()
protected ICollection CreateColumns()
}
public System.ComponentModel.Design.Data.DesignerDataView : DesignerDataTableBase {
protected void .ctor(string name)
protected void .ctor(string name, string owner)
}
public System.ComponentModel.Design.Data.IDataEnvironment {
public ICollection Connections
public ICollection get_Connections()
public DesignerDataConnection BuildConnection(IWin32Window owner, DesignerDataConnection initialConnection)
public string BuildQuery(IWin32Window owner, DesignerDataConnection connection, QueryBuilderMode mode, string initialQueryText)
public DesignerDataConnection ConfigureConnection(IWin32Window owner, DesignerDataConnection connection, string name)
public CodeExpression GetCodeExpression(DesignerDataConnection connection)
public IDesignerDataSchema GetConnectionSchema(DesignerDataConnection connection)
public DbConnection GetDesignTimeConnection(DesignerDataConnection connection)
}
public System.ComponentModel.Design.Data.IDesignerDataSchema {
public ICollection GetSchemaItems(DesignerDataSchemaClass schemaClass)
public bool SupportsSchemaClass(DesignerDataSchemaClass schemaClass)
}
public System.ComponentModel.Design.Data.QueryBuilderMode : Enum {
public int value__
public QueryBuilderMode Select
public QueryBuilderMode Update
public QueryBuilderMode Insert
public QueryBuilderMode Delete
}
public System.ComponentModel.Design.DateTimeEditor : UITypeEditor {
private IWindowsFormsEditorService editorService
private EditorControl control
private DateTime editContent
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
private void control_DateSelected(object sender, DateRangeEventArgs e)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.ComponentModel.Design.DesignerActionHeaderItem : DesignerActionTextItem {
public void .ctor(string displayName)
public void .ctor(string displayName, string category)
}
public System.ComponentModel.Design.DesignerActionItem : object {
private bool allow_associate
private string category
private string description
private string display_name
private IDictionary properties
public bool AllowAssociate
public string Category
public string Description
public string DisplayName
public IDictionary Properties
public bool ShowInSourceView
public void .ctor(string displayName, string category, string description)
public bool get_AllowAssociate()
public void set_AllowAssociate(bool value)
public string get_Category()
public string get_Description()
public string get_DisplayName()
public IDictionary get_Properties()
public bool get_ShowInSourceView()
public void set_ShowInSourceView(bool value)
}
public System.ComponentModel.Design.DesignerActionItemCollection : CollectionBase {
public DesignerActionItem Item
public DesignerActionItem get_Item(int index)
public void set_Item(int index, DesignerActionItem value)
public int Add(DesignerActionItem value)
public bool Contains(DesignerActionItem value)
public void CopyTo(DesignerActionItem[] array, int index)
public int IndexOf(DesignerActionItem value)
public void Insert(int index, DesignerActionItem value)
public void Remove(DesignerActionItem value)
}
public System.ComponentModel.Design.DesignerActionList : object {
private IComponent component
private bool auto_show
private DesignerActionItemCollection action_items
public bool AutoShow
public IComponent Component
public void .ctor(IComponent component)
public bool get_AutoShow()
public void set_AutoShow(bool value)
public IComponent get_Component()
public object GetService(Type serviceType)
public DesignerActionItemCollection GetSortedActionItems()
}
public System.ComponentModel.Design.DesignerActionListCollection : CollectionBase {
public DesignerActionList Item
public void .ctor(DesignerActionList[] value)
public DesignerActionList get_Item(int index)
public void set_Item(int index, DesignerActionList value)
public int Add(DesignerActionList value)
public void AddRange(DesignerActionList[] value)
public void AddRange(DesignerActionListCollection value)
public bool Contains(DesignerActionList value)
public void CopyTo(DesignerActionList[] array, int index)
public int IndexOf(DesignerActionList value)
public void Insert(int index, DesignerActionList value)
public void Remove(DesignerActionList value)
protected void OnClear()
protected void OnInsert(int index, object value)
protected void OnRemove(int index, object value)
protected void OnSet(int index, object oldValue, object newValue)
protected void OnValidate(object value)
}
public System.ComponentModel.Design.DesignerActionListsChangedEventArgs : EventArgs {
private object related_object
private DesignerActionListsChangedType change_type
private DesignerActionListCollection action_lists
public DesignerActionListCollection ActionLists
public DesignerActionListsChangedType ChangeType
public object RelatedObject
public void .ctor(object relatedObject, DesignerActionListsChangedType changeType, DesignerActionListCollection actionLists)
public DesignerActionListCollection get_ActionLists()
public DesignerActionListsChangedType get_ChangeType()
public object get_RelatedObject()
}
public System.ComponentModel.Design.DesignerActionListsChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DesignerActionListsChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DesignerActionListsChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.ComponentModel.Design.DesignerActionListsChangedType : Enum {
public int value__
public DesignerActionListsChangedType ActionListsAdded
public DesignerActionListsChangedType ActionListsRemoved
}
public System.ComponentModel.Design.DesignerActionMethodItem : DesignerActionItem {
private string member_name
private bool designer_verb
private IComponent related_component
private DesignerActionList action_list
public bool IncludeAsDesignerVerb
public string MemberName
public IComponent RelatedComponent
public void .ctor(DesignerActionList actionList, string memberName, string displayName)
public void .ctor(DesignerActionList actionList, string memberName, string displayName, bool includeAsDesignerVerb)
public void .ctor(DesignerActionList actionList, string memberName, string displayName, string category)
public void .ctor(DesignerActionList actionList, string memberName, string displayName, string category, bool includeAsDesignerVerb)
public void .ctor(DesignerActionList actionList, string memberName, string displayName, string category, string description)
public void .ctor(DesignerActionList actionList, string memberName, string displayName, string category, string description, bool includeAsDesignerVerb)
public bool get_IncludeAsDesignerVerb()
public string get_MemberName()
public IComponent get_RelatedComponent()
public void set_RelatedComponent(IComponent value)
public void Invoke()
}
public System.ComponentModel.Design.DesignerActionPropertyItem : DesignerActionItem {
private string member_name
private IComponent related_component
public string MemberName
public IComponent RelatedComponent
public void .ctor(string memberName, string displayName)
public void .ctor(string memberName, string displayName, string category)
public void .ctor(string memberName, string displayName, string category, string description)
public string get_MemberName()
public IComponent get_RelatedComponent()
public void set_RelatedComponent(IComponent value)
}
public System.ComponentModel.Design.DesignerActionService : object {
private DesignerActionListsChangedEventHandler DesignerActionListsChanged
public void .ctor(IServiceProvider serviceProvider)
public void add_DesignerActionListsChanged(DesignerActionListsChangedEventHandler value)
public void remove_DesignerActionListsChanged(DesignerActionListsChangedEventHandler value)
public void Add(IComponent comp, DesignerActionList actionList)
public void Add(IComponent comp, DesignerActionListCollection designerActionListCollection)
public void Clear()
public bool Contains(IComponent comp)
public void Dispose()
protected void Dispose(bool disposing)
public DesignerActionListCollection GetComponentActions(IComponent component)
public DesignerActionListCollection GetComponentActions(IComponent component, ComponentActionsType type)
protected void GetComponentDesignerActions(IComponent component, DesignerActionListCollection actionLists)
protected void GetComponentServiceActions(IComponent component, DesignerActionListCollection actionLists)
public void Remove(DesignerActionList actionList)
public void Remove(IComponent comp)
public void Remove(IComponent comp, DesignerActionList actionList)
}
public System.ComponentModel.Design.DesignerActionTextItem : DesignerActionItem {
public void .ctor(string displayName, string category)
}
public System.ComponentModel.Design.DesignerActionUIService : object {
private DesignerActionUIStateChangeEventHandler DesignerActionUIStateChange
public void add_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value)
public void remove_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value)
public void Dispose()
public void ShowUI(IComponent component)
public void HideUI(IComponent component)
public void Refresh(IComponent component)
public bool ShouldAutoShow(IComponent component)
}
public System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs : EventArgs {
private object related_object
private DesignerActionUIStateChangeType change_type
public DesignerActionUIStateChangeType ChangeType
public object RelatedObject
public void .ctor(object relatedObject, DesignerActionUIStateChangeType changeType)
public DesignerActionUIStateChangeType get_ChangeType()
public object get_RelatedObject()
}
public System.ComponentModel.Design.DesignerActionUIStateChangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DesignerActionUIStateChangeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DesignerActionUIStateChangeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.ComponentModel.Design.DesignerActionUIStateChangeType : Enum {
public int value__
public DesignerActionUIStateChangeType Show
public DesignerActionUIStateChangeType Hide
public DesignerActionUIStateChangeType Refresh
}
public System.ComponentModel.Design.DesignerCommandSet : object {
private DesignerActionListCollection action_lists
private DesignerVerbCollection verbs
public DesignerActionListCollection ActionLists
public DesignerVerbCollection Verbs
public DesignerActionListCollection get_ActionLists()
public ICollection GetCommands(string name)
public DesignerVerbCollection get_Verbs()
}
internal System.ComponentModel.Design.DesignerEventService : object {
private ArrayList _designerList
private IDesignerHost _activeDesigner
private ActiveDesignerEventHandler ActiveDesignerChanged
private DesignerEventHandler DesignerCreated
private DesignerEventHandler DesignerDisposed
private EventHandler SelectionChanged
public IDesignerHost ActiveDesigner
public DesignerCollection Designers
public IDesignerHost get_ActiveDesigner()
internal void set_ActiveDesigner(IDesignerHost value)
public DesignerCollection get_Designers()
public void add_ActiveDesignerChanged(ActiveDesignerEventHandler value)
public void remove_ActiveDesignerChanged(ActiveDesignerEventHandler value)
public void add_DesignerCreated(DesignerEventHandler value)
public void remove_DesignerCreated(DesignerEventHandler value)
public void add_DesignerDisposed(DesignerEventHandler value)
public void remove_DesignerDisposed(DesignerEventHandler value)
public void add_SelectionChanged(EventHandler value)
public void remove_SelectionChanged(EventHandler value)
public void RaiseDesignerCreated(IDesignerHost host)
public void RaiseDesignerDisposed(IDesignerHost host)
public void RaiseSelectionChanged()
}
internal System.ComponentModel.Design.DesignerHost : Container {
private IServiceProvider _serviceProvider
private Hashtable _designers
private Stack _transactions
private IServiceContainer _serviceContainer
private bool _loading
private bool _unloading
private IComponent _rootComponent
private EventHandler Activated
private EventHandler Deactivated
private EventHandler LoadComplete
private DesignerTransactionCloseEventHandler TransactionClosed
private DesignerTransactionCloseEventHandler TransactionClosing
private EventHandler TransactionOpened
private EventHandler TransactionOpening
private LoadedEventHandler DesignerLoaderHostLoaded
private EventHandler DesignerLoaderHostLoading
private EventHandler DesignerLoaderHostUnloading
private EventHandler DesignerLoaderHostUnloaded
private ComponentEventHandler ComponentAdded
private ComponentEventHandler ComponentAdding
private ComponentChangedEventHandler ComponentChanged
private ComponentChangingEventHandler ComponentChanging
private ComponentEventHandler ComponentRemoved
private ComponentEventHandler ComponentRemoving
private ComponentRenameEventHandler ComponentRename
public IContainer Container
public bool InTransaction
public bool Loading
public IComponent RootComponent
public string RootComponentClassName
public string TransactionDescription
public void .ctor(IServiceProvider serviceProvider)
public void Add(IComponent component, string name)
internal void AddPreProcess(IComponent component, string name)
internal void AddPostProcess(IComponent component, string name)
public void Remove(IComponent component)
internal void RemovePreProcess(IComponent component)
internal void RemovePostProcess(IComponent component)
protected ISite CreateSite(IComponent component, string name)
public IContainer get_Container()
public bool get_InTransaction()
public bool get_Loading()
public IComponent get_RootComponent()
public string get_RootComponentClassName()
public string get_TransactionDescription()
public void Activate()
public IComponent CreateComponent(Type componentClass)
public IComponent CreateComponent(Type componentClass, string name)
internal object CreateInstance(Type type)
internal IDesigner CreateDesigner(IComponent component, bool rootDesigner)
private IDesigner CreateDesigner(IComponent component, Type designerBaseType)
public void DestroyComponent(IComponent component)
public IDesigner GetDesigner(IComponent component)
public DesignerTransaction CreateTransaction()
public DesignerTransaction CreateTransaction(string description)
public Type GetType(string typeName)
protected void Dispose(bool disposing)
public void add_Activated(EventHandler value)
public void remove_Activated(EventHandler value)
public void add_Deactivated(EventHandler value)
public void remove_Deactivated(EventHandler value)
public void add_LoadComplete(EventHandler value)
public void remove_LoadComplete(EventHandler value)
public void add_TransactionClosed(DesignerTransactionCloseEventHandler value)
public void remove_TransactionClosed(DesignerTransactionCloseEventHandler value)
public void add_TransactionClosing(DesignerTransactionCloseEventHandler value)
public void remove_TransactionClosing(DesignerTransactionCloseEventHandler value)
public void add_TransactionOpened(EventHandler value)
public void remove_TransactionOpened(EventHandler value)
public void add_TransactionOpening(EventHandler value)
public void remove_TransactionOpening(EventHandler value)
private void OnTransactionClosing(DesignerHostTransaction raiser, TransactionAction action)
private void OnTransactionClosed(DesignerHostTransaction raiser, TransactionAction action)
internal void add_DesignerLoaderHostLoaded(LoadedEventHandler value)
internal void remove_DesignerLoaderHostLoaded(LoadedEventHandler value)
internal void add_DesignerLoaderHostLoading(EventHandler value)
internal void remove_DesignerLoaderHostLoading(EventHandler value)
internal void add_DesignerLoaderHostUnloading(EventHandler value)
internal void remove_DesignerLoaderHostUnloading(EventHandler value)
internal void add_DesignerLoaderHostUnloaded(EventHandler value)
internal void remove_DesignerLoaderHostUnloaded(EventHandler value)
public void EndLoad(string rootClassName, bool successful, ICollection errorCollection)
public void Reload()
private void Unload()
public void add_ComponentAdded(ComponentEventHandler value)
public void remove_ComponentAdded(ComponentEventHandler value)
public void add_ComponentAdding(ComponentEventHandler value)
public void remove_ComponentAdding(ComponentEventHandler value)
public void add_ComponentChanged(ComponentChangedEventHandler value)
public void remove_ComponentChanged(ComponentChangedEventHandler value)
public void add_ComponentChanging(ComponentChangingEventHandler value)
public void remove_ComponentChanging(ComponentChangingEventHandler value)
public void add_ComponentRemoved(ComponentEventHandler value)
public void remove_ComponentRemoved(ComponentEventHandler value)
public void add_ComponentRemoving(ComponentEventHandler value)
public void remove_ComponentRemoving(ComponentEventHandler value)
public void add_ComponentRename(ComponentRenameEventHandler value)
public void remove_ComponentRename(ComponentRenameEventHandler value)
public void OnComponentChanged(object component, MemberDescriptor member, object oldValue, object newValue)
public void OnComponentChanging(object component, MemberDescriptor member)
internal void OnComponentRename(object component, string oldName, string newName)
public void AddService(Type serviceType, object serviceInstance)
public void AddService(Type serviceType, object serviceInstance, bool promote)
public void AddService(Type serviceType, ServiceCreatorCallback callback)
public void AddService(Type serviceType, ServiceCreatorCallback callback, bool promote)
public void RemoveService(Type serviceType)
public void RemoveService(Type serviceType, bool promote)
public object GetService(Type serviceType)
}
internal System.ComponentModel.Design.DesignModeNestedContainer : NestedContainer {
private string _containerName
protected string OwnerName
public void .ctor(IComponent owner, string containerName)
public void Add(IComponent component, string name)
public void Remove(IComponent component)
protected string get_OwnerName()
protected ISite CreateSite(IComponent component, string name)
protected object GetService(Type service)
}
internal System.ComponentModel.Design.DesignModeSite : object {
private IServiceProvider _serviceProvider
private IComponent _component
private IContainer _container
private string _componentName
private NestedContainer _nestedContainer
private ServiceContainer _siteSpecificServices
private Hashtable _dictionary
public IComponent Component
public IContainer Container
public bool DesignMode
public string Name
private ServiceContainer SiteSpecificServices
public void .ctor(IComponent component, string name, IContainer container, IServiceProvider serviceProvider)
public IComponent get_Component()
public IContainer get_Container()
public bool get_DesignMode()
public string get_Name()
public void set_Name(string value)
private ServiceContainer get_SiteSpecificServices()
private void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, object serviceInstance)
private void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, object serviceInstance, bool promote)
private void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback)
private void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback, bool promote)
private void System.ComponentModel.Design.IServiceContainer.RemoveService(Type serviceType)
private void System.ComponentModel.Design.IServiceContainer.RemoveService(Type serviceType, bool promote)
private object System.ComponentModel.Design.IDictionaryService.GetKey(object value)
private object System.ComponentModel.Design.IDictionaryService.GetValue(object key)
private void System.ComponentModel.Design.IDictionaryService.SetValue(object key, object value)
public object GetService(Type service)
}
public System.ComponentModel.Design.DesignSurface : object {
private DesignerHost _designerHost
private DesignSurfaceServiceContainer _serviceContainer
private ICollection _loadErrors
private bool _isLoaded
private DesignerLoader _designerLoader
private EventHandler Disposed
private EventHandler Flushed
private LoadedEventHandler Loaded
private EventHandler Loading
private EventHandler Unloaded
private EventHandler Unloading
private EventHandler ViewActivated
protected ServiceContainer ServiceContainer
public IContainer ComponentContainer
public bool IsLoaded
public ICollection LoadErrors
public object View
public bool DtelLoading
public void .ctor(Type rootComponentType)
public void .ctor(IServiceProvider parentProvider, Type rootComponentType)
public void .ctor(IServiceProvider parentProvider)
protected ServiceContainer get_ServiceContainer()
public IContainer get_ComponentContainer()
public bool get_IsLoaded()
public ICollection get_LoadErrors()
public object get_View()
public void add_Disposed(EventHandler value)
public void remove_Disposed(EventHandler value)
public void add_Flushed(EventHandler value)
public void remove_Flushed(EventHandler value)
public void add_Loaded(LoadedEventHandler value)
public void remove_Loaded(LoadedEventHandler value)
public void add_Loading(EventHandler value)
public void remove_Loading(EventHandler value)
public void add_Unloaded(EventHandler value)
public void remove_Unloaded(EventHandler value)
public void add_Unloading(EventHandler value)
public void remove_Unloading(EventHandler value)
public void add_ViewActivated(EventHandler value)
public void remove_ViewActivated(EventHandler value)
public void BeginLoad(Type rootComponentType)
public void BeginLoad(DesignerLoader loader)
public void Dispose()
protected void Dispose(bool disposing)
public void Flush()
private void OnDesignerHost_Loaded(object sender, LoadedEventArgs e)
private void OnDesignerHost_Loading(object sender, EventArgs e)
private void OnDesignerHost_Unloading(object sender, EventArgs e)
private void OnDesignerHost_Unloaded(object sender, EventArgs e)
protected void OnLoaded(LoadedEventArgs e)
protected void OnLoading(EventArgs e)
protected void OnUnloaded(EventArgs e)
protected void OnUnloading(EventArgs e)
internal void OnDesignerHost_Activated(object sender, EventArgs args)
protected void OnViewActivate(EventArgs e)
protected internal IComponent CreateComponent(Type componentType)
protected internal object CreateInstance(Type type)
protected internal IDesigner CreateDesigner(IComponent component, bool rootDesigner)
public INestedContainer CreateNestedContainer(IComponent owningComponent)
public INestedContainer CreateNestedContainer(IComponent owningComponent, string containerName)
public object GetService(Type serviceType)
public bool get_DtelLoading()
public void set_DtelLoading(bool value)
}
public System.ComponentModel.Design.DesignSurfaceCollection : object {
private DesignerCollection _designers
public int Count
public DesignSurface Item
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
internal void .ctor(DesignerCollection designers)
public int get_Count()
public DesignSurface get_Item(int index)
public void CopyTo(DesignSurface[] array, int index)
private void System.Collections.ICollection.CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
}
public System.ComponentModel.Design.DesignSurfaceEventArgs : EventArgs {
private DesignSurface _surface
public DesignSurface Surface
public DesignSurface get_Surface()
public void .ctor(DesignSurface surface)
}
public System.ComponentModel.Design.DesignSurfaceEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DesignSurfaceEventArgs e)
public IAsyncResult BeginInvoke(object sender, DesignSurfaceEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.ComponentModel.Design.DesignSurfaceManager : object {
private IServiceProvider _parentProvider
private ServiceContainer _serviceContainer
private EventHandler SelectionChanged
private DesignSurfaceEventHandler DesignSurfaceDisposed
private DesignSurfaceEventHandler DesignSurfaceCreated
private ActiveDesignSurfaceChangedEventHandler ActiveDesignSurfaceChanged
public DesignSurface ActiveDesignSurface
public DesignSurfaceCollection DesignSurfaces
protected ServiceContainer ServiceContainer
public void .ctor(IServiceProvider parentProvider)
protected DesignSurface CreateDesignSurfaceCore(IServiceProvider parentProvider)
public DesignSurface CreateDesignSurface()
public DesignSurface CreateDesignSurface(IServiceProvider parentProvider)
public DesignSurface get_ActiveDesignSurface()
public void set_ActiveDesignSurface(DesignSurface value)
public DesignSurfaceCollection get_DesignSurfaces()
protected ServiceContainer get_ServiceContainer()
public void add_SelectionChanged(EventHandler value)
public void remove_SelectionChanged(EventHandler value)
public void add_DesignSurfaceDisposed(DesignSurfaceEventHandler value)
public void remove_DesignSurfaceDisposed(DesignSurfaceEventHandler value)
public void add_DesignSurfaceCreated(DesignSurfaceEventHandler value)
public void remove_DesignSurfaceCreated(DesignSurfaceEventHandler value)
public void add_ActiveDesignSurfaceChanged(ActiveDesignSurfaceChangedEventHandler value)
public void remove_ActiveDesignSurfaceChanged(ActiveDesignSurfaceChangedEventHandler value)
private void OnSelectionChanged(object sender, EventArgs args)
private void OnDesignSurfaceCreated(DesignSurface surface)
private void OnDesignSurfaceDisposed(object sender, EventArgs args)
public object GetService(Type serviceType)
public void Dispose()
protected void Dispose(bool disposing)
}
internal System.ComponentModel.Design.DesignSurfaceServiceContainer : ServiceContainer {
private Hashtable _nonRemoveableServices
public void .ctor(IServiceProvider parentProvider)
internal void AddNonReplaceableService(Type serviceType, object instance)
internal void RemoveNonReplaceableService(Type serviceType, object instance)
public void RemoveService(Type serviceType, bool promote)
}
public System.ComponentModel.Design.DisplayMode : Enum {
public int value__
public DisplayMode Ansi
public DisplayMode Auto
public DisplayMode Hexdump
public DisplayMode Unicode
}
public System.ComponentModel.Design.EventBindingService : object {
private IServiceProvider _provider
protected void .ctor(IServiceProvider provider)
protected bool ShowCode(IComponent component, EventDescriptor e, string methodName)
protected bool ShowCode(int lineNumber)
protected bool ShowCode()
protected string CreateUniqueMethodName(IComponent component, EventDescriptor e)
protected ICollection GetCompatibleMethods(EventDescriptor e)
protected void FreeMethod(IComponent component, EventDescriptor e, string methodName)
protected void UseMethod(IComponent component, EventDescriptor e, string methodName)
protected void ValidateMethodName(string methodName)
protected object GetService(Type serviceType)
private string System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(IComponent component, EventDescriptor eventDescriptor)
private ICollection System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(EventDescriptor eventDescriptor)
private EventDescriptor System.ComponentModel.Design.IEventBindingService.GetEvent(PropertyDescriptor property)
private PropertyDescriptorCollection System.ComponentModel.Design.IEventBindingService.GetEventProperties(EventDescriptorCollection events)
private PropertyDescriptor System.ComponentModel.Design.IEventBindingService.GetEventProperty(EventDescriptor eventDescriptor)
private bool System.ComponentModel.Design.IEventBindingService.ShowCode(IComponent component, EventDescriptor eventDescriptor)
private bool System.ComponentModel.Design.IEventBindingService.ShowCode(int lineNumber)
private bool System.ComponentModel.Design.IEventBindingService.ShowCode()
}
internal System.ComponentModel.Design.EventPropertyDescriptor : PropertyDescriptor {
private EventDescriptor _eventDescriptor
public Type ComponentType
public bool IsReadOnly
public Type PropertyType
public TypeConverter Converter
internal EventDescriptor InternalEventDescriptor
public void .ctor(EventDescriptor eventDescriptor)
public bool CanResetValue(object component)
public Type get_ComponentType()
public bool get_IsReadOnly()
public Type get_PropertyType()
public void ResetValue(object component)
public object GetValue(object component)
public void SetValue(object component, object value)
public bool ShouldSerializeValue(object component)
public TypeConverter get_Converter()
internal EventDescriptor get_InternalEventDescriptor()
}
public System.ComponentModel.Design.ExceptionCollection : Exception {
private ArrayList exceptions
public ArrayList Exceptions
public void .ctor(ArrayList exceptions)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public ArrayList get_Exceptions()
}
internal System.ComponentModel.Design.ExtenderService : object {
private ArrayList _extenderProviders
public void AddExtenderProvider(IExtenderProvider provider)
public void RemoveExtenderProvider(IExtenderProvider provider)
public IExtenderProvider[] GetExtenderProviders()
public void Dispose()
}
public System.ComponentModel.Design.IComponentDesignerDebugService {
public int IndentLevel
public TraceListenerCollection Listeners
public void Assert(bool condition, string message)
public void Fail(string message)
public void Trace(string message, string category)
public int get_IndentLevel()
public void set_IndentLevel(int value)
public TraceListenerCollection get_Listeners()
}
public System.ComponentModel.Design.IComponentDesignerStateService {
public object GetState(IComponent component, string key)
public void SetState(IComponent component, string key, object value)
}
public System.ComponentModel.Design.IDesignTimeAssemblyLoader {
public string GetTargetAssemblyPath(AssemblyName runtimeOrTargetAssemblyName, string suggestedAssemblyPath, FrameworkName targetFramework)
public Assembly LoadRuntimeAssembly(AssemblyName targetAssemblyName)
}
public System.ComponentModel.Design.IMultitargetHelperService {
public string GetAssemblyQualifiedName(Type type)
}
public System.ComponentModel.Design.InheritanceService : object {
public void AddInheritedComponents(IComponent component, IContainer container)
protected void AddInheritedComponents(Type type, IComponent component, IContainer container)
public void Dispose()
protected void Dispose(bool disposing)
public InheritanceAttribute GetInheritanceAttribute(IComponent component)
protected bool IgnoreInheritedMember(MemberInfo member, IComponent component)
}
public System.ComponentModel.Design.LoadedEventArgs : EventArgs {
private ICollection _errors
private bool _succeeded
public ICollection Errors
public bool HasSucceeded
public void .ctor(bool succeeded, ICollection errors)
public ICollection get_Errors()
public bool get_HasSucceeded()
}
public System.ComponentModel.Design.LoadedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, LoadedEventArgs e)
public IAsyncResult BeginInvoke(object sender, LoadedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.ComponentModel.Design.LocalizationExtenderProvider : object {
public void .ctor(ISite serviceProvider, IComponent baseComponent)
public bool CanExtend(object o)
public void Dispose()
protected void Dispose(bool disposing)
public CultureInfo GetLanguage(object o)
public CultureInfo GetLoadLanguage(object o)
public bool GetLocalizable(object o)
public void ResetLanguage(object o)
public void SetLanguage(object o, CultureInfo language)
public void SetLocalizable(object o, bool localizable)
public bool ShouldSerializeLanguage(object o)
}
public System.ComponentModel.Design.MenuCommandsChangedEventArgs : EventArgs {
private MenuCommandsChangedType change_type
private MenuCommand command
public MenuCommandsChangedType ChangeType
public MenuCommand Command
public void .ctor(MenuCommandsChangedType changeType, MenuCommand command)
public MenuCommandsChangedType get_ChangeType()
public MenuCommand get_Command()
}
public System.ComponentModel.Design.MenuCommandsChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MenuCommandsChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, MenuCommandsChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.ComponentModel.Design.MenuCommandsChangedType : Enum {
public int value__
public MenuCommandsChangedType CommandAdded
public MenuCommandsChangedType CommandRemoved
public MenuCommandsChangedType CommandChanged
}
public System.ComponentModel.Design.MenuCommandService : object {
private IServiceProvider _serviceProvider
private DesignerVerbCollection _globalVerbs
private DesignerVerbCollection _verbs
private Dictionary`2<CommandID, MenuCommand> _commands
private MenuCommandsChangedEventHandler MenuCommandsChanged
public DesignerVerbCollection Verbs
public void .ctor(IServiceProvider serviceProvider)
private void OnSelectionChanged(object sender, EventArgs arg)
public void add_MenuCommandsChanged(MenuCommandsChangedEventHandler value)
public void remove_MenuCommandsChanged(MenuCommandsChangedEventHandler value)
public DesignerVerbCollection get_Verbs()
public void AddCommand(MenuCommand command)
public void AddVerb(DesignerVerb verb)
public void Dispose()
protected void Dispose(bool disposing)
protected void EnsureVerbs()
protected MenuCommand FindCommand(Guid guid, int id)
public MenuCommand FindCommand(CommandID commandID)
protected ICollection GetCommandList(Guid guid)
public bool GlobalInvoke(CommandID commandID)
public bool GlobalInvoke(CommandID commandId, object arg)
protected void OnCommandsChanged(MenuCommandsChangedEventArgs e)
public void RemoveCommand(MenuCommand command)
public void RemoveVerb(DesignerVerb verb)
public void ShowContextMenu(CommandID menuID, int x, int y)
protected object GetService(Type serviceType)
}
public System.ComponentModel.Design.MultilineStringEditor : UITypeEditor {
private IWindowsFormsEditorService editorService
private EditorControl control
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
public bool GetPaintValueSupported(ITypeDescriptorContext context)
}
public System.ComponentModel.Design.ObjectSelectorEditor : UITypeEditor {
protected object currValue
protected object prevValue
public bool SubObjectSelector
public void .ctor(bool subObjectSelector)
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public bool EqualsToValue(object value)
protected void FillTreeWithData(Selector selector, ITypeDescriptorContext context, IServiceProvider provider)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
public void SetValue(object value)
}
public System.ComponentModel.Design.ProjectTargetFrameworkAttribute : Attribute {
public string TargetFrameworkMoniker
public void .ctor(string targetFrameworkMoniker)
public string get_TargetFrameworkMoniker()
}
internal System.ComponentModel.Design.ReferenceService : object {
private List`1<IComponent> _references
internal void .ctor(IServiceProvider provider)
private void OnComponentAdded(object sender, ComponentEventArgs args)
private void OnComponentRemoved(object sender, ComponentEventArgs args)
public IComponent GetComponent(object reference)
public string GetName(object reference)
public object GetReference(string name)
public Object[] GetReferences()
public Object[] GetReferences(Type baseType)
public void Dispose()
}
internal System.ComponentModel.Design.SelectionService : object {
private IServiceProvider _serviceProvider
private ArrayList _selection
private IComponent _primarySelection
private EventHandler SelectionChanging
private EventHandler SelectionChanged
public object PrimarySelection
public int SelectionCount
private IComponent RootComponent
public void .ctor(IServiceProvider provider)
private void OnComponentRemoving(object sender, ComponentEventArgs args)
public void add_SelectionChanging(EventHandler value)
public void remove_SelectionChanging(EventHandler value)
public void add_SelectionChanged(EventHandler value)
public void remove_SelectionChanged(EventHandler value)
public ICollection GetSelectedComponents()
protected void OnSelectionChanging()
protected void OnSelectionChanged()
public object get_PrimarySelection()
public int get_SelectionCount()
private IComponent get_RootComponent()
public bool GetComponentSelected(object component)
public void SetSelectedComponents(ICollection components)
public void SetSelectedComponents(ICollection components, SelectionTypes selectionType)
}
public System.ComponentModel.Design.Serialization.BasicDesignerLoader : DesignerLoader {
private bool _loaded
private bool _loading
private IDesignerLoaderHost _host
private int _dependenciesCount
private bool _notificationsEnabled
private bool _modified
private string _baseComponentClassName
private DesignerSerializationManager _serializationMananger
private bool _flushing
private bool _reloadScheduled
private ReloadOptions _reloadOptions
public bool Loading
protected IDesignerLoaderHost LoaderHost
protected bool Modified
protected object PropertyProvider
protected bool ReloadPending
protected void Initialize()
public void BeginLoad(IDesignerLoaderHost host)
protected void PerformLoad(IDesignerSerializationManager serializationManager)
protected void OnBeginLoad()
protected void OnEndLoad(bool successful, ICollection errors)
public bool get_Loading()
protected IDesignerLoaderHost get_LoaderHost()
protected bool get_Modified()
protected void set_Modified(bool value)
protected object get_PropertyProvider()
protected void set_PropertyProvider(object value)
protected bool get_ReloadPending()
protected bool EnableComponentNotification(bool enable)
private void OnComponentAdded(object sender, ComponentEventArgs args)
private void OnComponentRemoved(object sender, ComponentEventArgs args)
private void OnComponentAdding(object sender, ComponentEventArgs args)
private void OnComponentRemoving(object sender, ComponentEventArgs args)
private void OnComponentChanged(object sender, ComponentChangedEventArgs args)
private void OnComponentChanging(object sender, ComponentChangingEventArgs args)
private void OnComponentRename(object sender, ComponentRenameEventArgs args)
public void Flush()
protected void PerformFlush(IDesignerSerializationManager serializationManager)
protected bool IsReloadNeeded()
protected void OnBeginUnload()
protected void OnModifying()
protected void Reload(ReloadOptions flags)
private void OnIdle(object sender, EventArgs args)
private void ReloadCore()
private void Unload()
protected void ReportFlushErrors(ICollection errors)
protected void SetBaseComponentClassName(string name)
private void System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency()
private void System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(bool successful, ICollection errorCollection)
private bool System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload()
protected object GetService(Type serviceType)
public void Dispose()
}
public System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService : ComponentSerializationService {
private IServiceProvider _provider
public void .ctor(IServiceProvider provider)
public SerializationStore CreateStore()
public SerializationStore LoadStore(Stream stream)
public ICollection Deserialize(SerializationStore store)
public ICollection Deserialize(SerializationStore store, IContainer container)
public void DeserializeTo(SerializationStore store, IContainer container, bool validateRecycledTypes, bool applyDefaults)
private ICollection DeserializeCore(SerializationStore store, IContainer container, bool validateRecycledTypes, bool applyDefaults)
public void Serialize(SerializationStore store, object value)
public void SerializeAbsolute(SerializationStore store, object value)
public void SerializeMember(SerializationStore store, object owningObject, MemberDescriptor member)
public void SerializeMemberAbsolute(SerializationStore store, object owningObject, MemberDescriptor member)
private void SerializeCore(SerializationStore store, object value, bool absolute)
private void SerializeMemberCore(SerializationStore store, object owningObject, MemberDescriptor member, bool absolute)
}
public System.ComponentModel.Design.Serialization.CodeDomDesignerLoader : BasicDesignerLoader {
private CodeDomSerializer _rootSerializer
protected CodeDomProvider CodeDomProvider
protected ITypeResolutionService TypeResolutionService
protected void Initialize()
protected bool IsReloadNeeded()
protected void PerformLoad(IDesignerSerializationManager manager)
private CodeTypeDeclaration GetFirstCodeTypeDecl(CodeCompileUnit document, String& namespaceName)
protected void PerformFlush(IDesignerSerializationManager manager)
private CodeCompileUnit MergeTypeDeclWithCompileUnit(CodeTypeDeclaration typeDecl, CodeCompileUnit unit)
protected void OnBeginLoad()
protected void OnBeginUnload()
protected void OnEndLoad(bool successful, ICollection errors)
private void OnComponentRename_EventHandler(object sender, ComponentRenameEventArgs args)
protected void OnComponentRename(object component, string oldName, string newName)
protected CodeDomProvider get_CodeDomProvider()
protected ITypeResolutionService get_TypeResolutionService()
protected CodeCompileUnit Parse()
protected void Write(CodeCompileUnit unit)
public void Dispose()
private string System.ComponentModel.Design.Serialization.INameCreationService.CreateName(IContainer container, Type dataType)
private bool System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(string name)
private void System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(string name)
private ICollection System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(object serializationData)
private object System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(ICollection objects)
}
public System.ComponentModel.Design.Serialization.CodeDomLocalizationModel : Enum {
public int value__
public CodeDomLocalizationModel None
public CodeDomLocalizationModel PropertyAssignment
public CodeDomLocalizationModel PropertyReflection
}
public System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider : object {
public void .ctor(IServiceProvider provider, CodeDomLocalizationModel model)
public void .ctor(IServiceProvider provider, CodeDomLocalizationModel model, CultureInfo[] supportedCultures)
public void Dispose()
private object System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType)
}
internal System.ComponentModel.Design.Serialization.CodeDomSerializationProvider : object {
private CodeDomSerializationProvider _instance
private CodeDomSerializerBase _componentSerializer
private CodeDomSerializerBase _propertySerializer
private CodeDomSerializerBase _eventSerializer
private CodeDomSerializerBase _primitiveSerializer
private CodeDomSerializerBase _collectionSerializer
private CodeDomSerializerBase _rootSerializer
private CodeDomSerializerBase _enumSerializer
private CodeDomSerializerBase _othersSerializer
public CodeDomSerializationProvider Instance
public CodeDomSerializationProvider get_Instance()
public object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType)
}
public System.ComponentModel.Design.Serialization.CodeDomSerializer : CodeDomSerializerBase {
public object SerializeAbsolute(IDesignerSerializationManager manager, object value)
public object Serialize(IDesignerSerializationManager manager, object value)
protected CodeExpression SerializeToReferenceExpression(IDesignerSerializationManager manager, object value)
public string GetTargetComponentName(CodeStatement statement, CodeExpression expression, Type targetType)
public CodeStatementCollection SerializeMember(IDesignerSerializationManager manager, object owningObject, MemberDescriptor member)
public CodeStatementCollection SerializeMemberAbsolute(IDesignerSerializationManager manager, object owningObject, MemberDescriptor member)
public object Deserialize(IDesignerSerializationManager manager, object codeObject)
protected object DeserializeStatementToInstance(IDesignerSerializationManager manager, CodeStatement statement)
}
public System.ComponentModel.Design.Serialization.CodeDomSerializerBase : object {
private DeserializationErrorMarker _errorMarker
protected CodeExpression SerializeToExpression(IDesignerSerializationManager manager, object value)
protected CodeDomSerializer GetSerializer(IDesignerSerializationManager manager, object value)
protected CodeDomSerializer GetSerializer(IDesignerSerializationManager manager, Type valueType)
protected CodeExpression GetExpression(IDesignerSerializationManager manager, object value)
protected void SetExpression(IDesignerSerializationManager manager, object value, CodeExpression expression)
protected void SetExpression(IDesignerSerializationManager manager, object value, CodeExpression expression, bool isPreset)
protected bool IsSerialized(IDesignerSerializationManager manager, object value)
protected bool IsSerialized(IDesignerSerializationManager manager, object value, bool honorPreset)
protected CodeExpression SerializeCreationExpression(IDesignerSerializationManager manager, object value, Boolean& isComplete)
private CodeExpression SerializeInstanceDescriptor(IDesignerSerializationManager manager, InstanceDescriptor descriptor)
private CodeExpression[] SerializeParameters(IDesignerSerializationManager manager, ICollection parameters)
protected void SerializeEvent(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, EventDescriptor descriptor)
protected void SerializeEvents(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter)
protected void SerializeProperty(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, PropertyDescriptor propertyToSerialize)
protected void SerializeProperties(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter)
protected object DeserializeInstance(IDesignerSerializationManager manager, Type type, Object[] parameters, string name, bool addToContainer)
protected string GetUniqueName(IDesignerSerializationManager manager, object value)
protected object DeserializeExpression(IDesignerSerializationManager manager, string name, CodeExpression expression)
private MethodInfo GetExactMethod(Type type, string methodName, BindingFlags flags, ICollection argsCollection)
protected void DeserializeStatement(IDesignerSerializationManager manager, CodeStatement statement)
private void DeserializeAssignmentStatement(IDesignerSerializationManager manager, CodeAssignStatement statement)
internal void ReportError(IDesignerSerializationManager manager, string message)
internal void ReportError(IDesignerSerializationManager manager, string message, string details)
protected CodeExpression SerializeToResourceExpression(IDesignerSerializationManager manager, object value)
protected CodeExpression SerializeToResourceExpression(IDesignerSerializationManager manager, object value, bool ensureInvariant)
protected void SerializePropertiesToResources(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter)
protected void SerializeResource(IDesignerSerializationManager manager, string resourceName, object value)
protected void SerializeResourceInvariant(IDesignerSerializationManager manager, string resourceName, object value)
protected void DeserializePropertiesFromResources(IDesignerSerializationManager manager, object value, Attribute[] filter)
}
public System.ComponentModel.Design.Serialization.CodeDomSerializerException : SystemException {
private CodeLinePragma linePragma
public CodeLinePragma LinePragma
public void .ctor(Exception ex, CodeLinePragma linePragma)
public void .ctor(string message, CodeLinePragma linePragma)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, IDesignerSerializationManager manager)
public void .ctor(Exception ex, IDesignerSerializationManager manager)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public CodeLinePragma get_LinePragma()
}
public System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer : CodeDomSerializer {
protected bool MethodSupportsSerialization(MethodInfo method)
public object Serialize(IDesignerSerializationManager manager, object value)
protected object SerializeCollection(IDesignerSerializationManager manager, CodeExpression targetExpression, Type targetType, ICollection originalCollection, ICollection valuesToSerialize)
private MethodInfo GetExactMethod(Type type, string methodName, ICollection argsCollection)
}
internal System.ComponentModel.Design.Serialization.ComponentCodeDomSerializer : CodeDomSerializer {
public object Serialize(IDesignerSerializationManager manager, object value)
}
public System.ComponentModel.Design.Serialization.DesignerSerializationManager : object {
private IServiceProvider _serviceProvider
private bool _preserveNames
private bool _validateRecycledTypes
private bool _recycleInstances
private IContainer _designerContainer
private object _propertyProvider
private Session _session
private ArrayList _errors
private List`1<IDesignerSerializationProvider> _serializationProviders
private Dictionary`2<Type, object> _serializersCache
private Dictionary`2<string, object> _instancesByNameCache
private Dictionary`2<object, string> _instancesByValueCache
private ContextStack _contextStack
private EventHandler SessionDisposed
private EventHandler SessionCreated
private EventHandler _serializationCompleteHandler
private ResolveNameEventHandler _resolveNameHandler
public bool RecycleInstances
public bool PreserveNames
public bool ValidateRecycledTypes
public IContainer Container
public object PropertyProvider
public IList Errors
private ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
private PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
public void .ctor(IServiceProvider provider)
public bool get_RecycleInstances()
public void set_RecycleInstances(bool value)
public bool get_PreserveNames()
public void set_PreserveNames(bool value)
public bool get_ValidateRecycledTypes()
public void set_ValidateRecycledTypes(bool value)
public IContainer get_Container()
public void set_Container(IContainer value)
public object get_PropertyProvider()
public void set_PropertyProvider(object value)
public IList get_Errors()
public void add_SessionDisposed(EventHandler value)
public void remove_SessionDisposed(EventHandler value)
public void add_SessionCreated(EventHandler value)
public void remove_SessionCreated(EventHandler value)
protected void OnSessionCreated(EventArgs e)
protected object CreateInstance(Type type, ICollection arguments, string name, bool addToContainer)
private object CreateInstance(Type type, ICollection argsCollection)
public object GetSerializer(Type objectType, Type serializerType)
private void VerifyInSession()
private void VerifyNotInSession()
public IDisposable CreateSession()
protected void OnSessionDisposed(EventArgs e)
protected Type GetType(string typeName)
protected void OnResolveName(ResolveNameEventArgs e)
private void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider provider)
private void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider provider)
private object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type type, ICollection arguments, string name, bool addToContainer)
private object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(string name)
private object RequestInstance(string name)
private Type System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(string name)
private object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type type, Type serializerType)
private string System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(object instance)
private void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(object instance, string name)
private void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(object error)
private ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Context()
private PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Properties()
private void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_SerializationComplete(EventHandler value)
private void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_SerializationComplete(EventHandler value)
private void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_ResolveName(ResolveNameEventHandler value)
private void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_ResolveName(ResolveNameEventHandler value)
private object System.IServiceProvider.GetService(Type serviceType)
protected object GetService(Type serviceType)
public Type GetRuntimeType(string typeName)
}
internal System.ComponentModel.Design.Serialization.EnumCodeDomSerializer : CodeDomSerializer {
public object Serialize(IDesignerSerializationManager manager, object value)
private CodeExpression GetEnumExpression(Enum e)
}
internal System.ComponentModel.Design.Serialization.EventCodeDomSerializer : MemberCodeDomSerializer {
private CodeThisReferenceExpression _thisReference
public void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements)
public bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor)
}
public System.ComponentModel.Design.Serialization.ExpressionContext : object {
private object _owner
private Type _expressionType
private CodeExpression _expression
private object _presetValue
public object PresetValue
public CodeExpression Expression
public Type ExpressionType
public object Owner
public void .ctor(CodeExpression expression, Type expressionType, object owner)
public void .ctor(CodeExpression expression, Type expressionType, object owner, object presetValue)
public object get_PresetValue()
public CodeExpression get_Expression()
public Type get_ExpressionType()
public object get_Owner()
}
public System.ComponentModel.Design.Serialization.ICodeDomDesignerReload {
public bool ShouldReloadDesigner(CodeCompileUnit newTree)
}
public System.ComponentModel.Design.Serialization.MemberCodeDomSerializer : CodeDomSerializerBase {
public void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements)
public bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor)
}
public System.ComponentModel.Design.Serialization.ObjectStatementCollection : object {
private Hashtable _statements
public CodeStatementCollection Item
public bool ContainsKey(object statementOwner)
public IDictionaryEnumerator GetEnumerator()
public CodeStatementCollection get_Item(object statementOwner)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public void Populate(object owner)
public void Populate(ICollection statementOwners)
}
internal System.ComponentModel.Design.Serialization.PrimitiveCodeDomSerializer : CodeDomSerializer {
public object Serialize(IDesignerSerializationManager manager, object value)
}
internal System.ComponentModel.Design.Serialization.PropertyCodeDomSerializer : MemberCodeDomSerializer {
public void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements)
private void SerializeNormalProperty(IDesignerSerializationManager manager, object instance, PropertyDescriptor descriptor, CodeStatementCollection statements)
private void SerializeContentProperty(IDesignerSerializationManager manager, object instance, PropertyDescriptor descriptor, CodeStatementCollection statements)
public bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor)
private MemberRelationship GetRelationship(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor)
}
internal System.ComponentModel.Design.Serialization.RootCodeDomSerializer : CodeDomSerializer {
private CodeMap _codeMap
public object Serialize(IDesignerSerializationManager manager, object value)
private void SerializeComponents(IDesignerSerializationManager manager, ICollection components, IComponent rootComponent)
private void SerializeComponent(IDesignerSerializationManager manager, IComponent component)
public object Deserialize(IDesignerSerializationManager manager, object codeObject)
private CodeMemberMethod GetInitializeMethod(CodeTypeDeclaration declaration)
}
public System.ComponentModel.Design.Serialization.RootContext : object {
private CodeExpression _expression
private object _value
public CodeExpression Expression
public object Value
public void .ctor(CodeExpression expression, object value)
public CodeExpression get_Expression()
public object get_Value()
}
public System.ComponentModel.Design.Serialization.SerializeAbsoluteContext : object {
private MemberDescriptor _member
public MemberDescriptor Member
public void .ctor(MemberDescriptor member)
public MemberDescriptor get_Member()
public bool ShouldSerialize(MemberDescriptor member)
}
public System.ComponentModel.Design.Serialization.StatementContext : object {
private ObjectStatementCollection _statements
public ObjectStatementCollection StatementCollection
public ObjectStatementCollection get_StatementCollection()
}
public System.ComponentModel.Design.Serialization.TypeCodeDomSerializer : CodeDomSerializerBase {
public CodeTypeDeclaration Serialize(IDesignerSerializationManager manager, object root, ICollection members)
public object Deserialize(IDesignerSerializationManager manager, CodeTypeDeclaration declaration)
protected CodeMemberMethod GetInitializeMethod(IDesignerSerializationManager manager, CodeTypeDeclaration declaration, object value)
protected CodeMemberMethod[] GetInitializeMethods(IDesignerSerializationManager manager, CodeTypeDeclaration declaration)
}
internal System.ComponentModel.Design.TypeDescriptorFilterService : object {
private IServiceProvider _serviceProvider
public void .ctor(IServiceProvider serviceProvider)
public bool FilterAttributes(IComponent component, IDictionary attributes)
public bool FilterEvents(IComponent component, IDictionary events)
public bool FilterProperties(IComponent component, IDictionary properties)
public void Dispose()
}
public System.ComponentModel.Design.UndoEngine : object {
private bool _undoing
private UndoUnit _currentUnit
private IServiceProvider _provider
private bool _enabled
private EventHandler Undoing
private EventHandler Undone
public bool Enabled
public bool UndoInProgress
protected void .ctor(IServiceProvider provider)
private void Enable()
private void Disable()
private void OnTransactionOpened(object sender, EventArgs args)
private void OnTransactionClosed(object sender, DesignerTransactionCloseEventArgs args)
private void OnComponentAdding(object sender, ComponentEventArgs args)
private void OnComponentAdded(object sender, ComponentEventArgs args)
private void OnComponentRemoving(object sender, ComponentEventArgs args)
private void OnComponentRemoved(object sender, ComponentEventArgs args)
private void OnComponentChanging(object sender, ComponentChangingEventArgs args)
private void OnComponentChanged(object sender, ComponentChangedEventArgs args)
private void OnComponentRename(object sender, ComponentRenameEventArgs args)
public void add_Undoing(EventHandler value)
public void remove_Undoing(EventHandler value)
public void add_Undone(EventHandler value)
public void remove_Undone(EventHandler value)
public bool get_Enabled()
public void set_Enabled(bool value)
public bool get_UndoInProgress()
protected UndoUnit CreateUndoUnit(string name, bool primary)
public void Dispose()
protected void Dispose(bool disposing)
protected object GetRequiredService(Type serviceType)
protected object GetService(Type serviceType)
protected void OnUndoing(EventArgs e)
protected void OnUndone(EventArgs e)
protected void AddUndoUnit(UndoUnit unit)
protected void DiscardUndoUnit(UndoUnit unit)
}
public System.Data.Design.MethodSignatureGenerator : object {
public CodeDomProvider CodeProvider
public Type ContainerParameterType
public string DataSetClassName
public bool IsGetMethod
public bool PagingMethod
public ParameterGenerationOption ParameterOption
public string TableClassName
public CodeDomProvider get_CodeProvider()
public void set_CodeProvider(CodeDomProvider value)
public Type get_ContainerParameterType()
public void set_ContainerParameterType(Type value)
public string get_DataSetClassName()
public void set_DataSetClassName(string value)
public bool get_IsGetMethod()
public void set_IsGetMethod(bool value)
public bool get_PagingMethod()
public void set_PagingMethod(bool value)
public ParameterGenerationOption get_ParameterOption()
public void set_ParameterOption(ParameterGenerationOption value)
public string get_TableClassName()
public void set_TableClassName(string value)
public CodeMemberMethod GenerateMethod()
public string GenerateMethodSignature()
public CodeTypeDeclaration GenerateUpdatingMethods()
public void SetDesignTableContent(string designTableContent)
public void SetMethodSourceContent(string methodSourceContent)
}
public System.Data.Design.ParameterGenerationOption : Enum {
public int value__
public ParameterGenerationOption ClrTypes
public ParameterGenerationOption SqlTypes
public ParameterGenerationOption Objects
}
public System.Data.Design.TypedDataSetGenerator : object {
public ICollection`1<Assembly> ReferencedAssemblies
public ICollection`1<Assembly> get_ReferencedAssemblies()
public string Generate(DataSet dataSet, CodeNamespace codeNamespace, CodeDomProvider codeProvider)
public string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider)
public void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders)
public void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, DbProviderFactory specifiedFactory)
public string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, GenerateOption option)
public void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders, GenerateOption option)
public string GetProviderName(string inputFileContent)
public string GetProviderName(string inputFileContent, string tableName)
public void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders, GenerateOption option, string dataSetNamespace)
public void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders, GenerateOption option, string dataSetNamespace, string basePath)
public string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, GenerateOption option, string dataSetNamespace, string basePath)
}
public System.Data.Design.TypedDataSetGeneratorException : DataException {
private IList errorList
public IList ErrorList
public void .ctor(IList list)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public IList get_ErrorList()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Data.Design.TypedDataSetSchemaImporterExtension : SchemaImporterExtension {
protected void .ctor(GenerateOption dataSetGenerateOptions)
public string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
public string ImportSchemaType(string name, string namespaceName, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
}
public System.Diagnostics.Design.LogConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Diagnostics.Design.ProcessDesigner : ComponentDesigner {
protected void PreFilterProperties(IDictionary properties)
}
public System.Diagnostics.Design.ProcessModuleDesigner : ComponentDesigner {
protected void PreFilterProperties(IDictionary properties)
}
public System.Diagnostics.Design.ProcessThreadDesigner : ComponentDesigner {
protected void PreFilterProperties(IDictionary properties)
}
internal System.Diagnostics.Design.StringValueConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
}
public System.Messaging.Design.MessageDesigner : ComponentDesigner {
protected void PreFilterProperties(IDictionary properties)
}
public System.Resources.Tools.ITargetAwareCodeDomProvider {
public bool SupportsProperty(Type type, string propertyName, bool isWritable)
}
public System.Resources.Tools.StronglyTypedResourceBuilder : object {
private Char[] specialChars
private Char[] specialCharsNameSpace
public CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable)
public CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable)
public CodeCompileUnit Create(IDictionary resourceList, string baseName, string generatedCodeNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable)
public CodeCompileUnit Create(IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable)
private String[] ResourcePropertyGeneration(CodeTypeDeclaration resType, Dictionary`2<string, ResourceItem> resourceItemDict, bool internalClass)
private CodeCompileUnit GenerateCodeDOMBase(string baseNameToUse, string generatedCodeNamespaceToUse, string resourcesToUse, bool internalClass)
private void ProcessResourceList(Dictionary`2<string, ResourceItem> resourceItemDict, CodeDomProvider codeProvider)
private CodeTypeDeclaration GenerateBaseType(string baseNameToUse, bool internalClass)
private void GenerateFields(CodeTypeDeclaration resType)
private CodeConstructor GenerateConstructor()
private CodeAttributeDeclaration DefaultPropertyAttribute()
private CodeMemberProperty GenerateCultureProp(bool internalClass)
private CodeMemberProperty GenerateResourceManagerProp(string baseNameToUse, string resourcesToUse, bool internalClass)
private CodeMemberProperty GenerateStandardResourceProp(string propName, string resName, Type propertyType, bool isInternal)
private CodeMemberProperty GenerateStringResourceProp(string propName, string resName, bool isInternal)
private CodeMemberProperty GenerateStreamResourceProp(string propName, string resName, bool isInternal)
private CodeMemberProperty GeneratePropertyBase(string name, Type propertyType, bool isInternal, bool hasGet, bool hasSet)
public string VerifyResourceName(string key, CodeDomProvider provider)
private char VerifySpecialChar(char ch)
private string CleanNamespaceChars(string name)
}
public System.ServiceProcess.Design.ServiceControllerDesigner : ComponentDesigner {
protected void PreFilterProperties(IDictionary properties)
}
public System.Web.UI.Design.AppSettingsExpressionEditor : ExpressionEditor {
public object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider)
public ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider)
}
public System.Web.UI.Design.CalendarDataBindingHandler : DataBindingHandler {
public void DataBindControl(IDesignerHost designerHost, Control control)
}
public System.Web.UI.Design.ClientScriptItem : object {
private string text
private string source
private string language
private string type
private string id
public string Id
public string Language
public string Source
public string Text
public string Type
public void .ctor(string text, string source, string language, string type, string id)
public string get_Id()
public string get_Language()
public string get_Source()
public string get_Text()
public string get_Type()
}
public System.Web.UI.Design.ClientScriptItemCollection : ReadOnlyCollectionBase {
public void .ctor(ClientScriptItem[] clientScriptItems)
}
public System.Web.UI.Design.ColorBuilder : object {
public string BuildColor(IComponent component, Control owner, string initialColor)
}
public System.Web.UI.Design.ConnectionStringEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
protected string GetProviderName(object instance)
protected void SetProviderName(object instance, DesignerDataConnection connection)
}
public System.Web.UI.Design.ConnectionStringsExpressionEditor : ExpressionEditor {
public object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider)
public ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider)
}
public System.Web.UI.Design.ContainerControlDesigner : ControlDesigner {
public bool AllowResize
public string FrameCaption
public Style FrameStyle
public bool get_AllowResize()
public string get_FrameCaption()
public Style get_FrameStyle()
protected void AddDesignTimeCssAttributes(IDictionary styleAttributes)
public IDictionary GetDesignTimeCssAttributes()
public string GetDesignTimeHtml(DesignerRegionCollection regions)
public string GetEditableDesignerRegionContent(EditableDesignerRegion region)
public string GetPersistenceContent()
public void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content)
}
public System.Web.UI.Design.ContentDefinition : object {
private string id
private string content
private string html
public string ContentPlaceHolderID
public string DefaultContent
public string DefaultDesignTimeHtml
public void .ctor(string id, string content, string designTimeHtml)
public string get_ContentPlaceHolderID()
public string get_DefaultContent()
public string get_DefaultDesignTimeHtml()
}
public System.Web.UI.Design.ContentDesignerState : Enum {
public int value__
public ContentDesignerState ShowDefaultContent
public ContentDesignerState ShowUserContent
}
public System.Web.UI.Design.ControlDesigner : HtmlControlDesigner {
public bool AllowResize
protected object DesignTimeElementView
public bool DesignTimeHtmlRequiresLoadComplete
public string ID
public bool IsDirty
public bool ReadOnly
public DesignerActionListCollection ActionLists
public DesignerAutoFormatCollection AutoFormats
protected bool DataBindingsEnabled
protected ControlDesignerState DesignerState
protected internal bool HidePropertiesInTemplateMode
public bool InTemplateMode
protected WebFormsRootDesigner RootDesigner
protected IControlDesignerTag Tag
public TemplateGroupCollection TemplateGroups
public Control ViewControl
public bool ViewControlCreated
protected bool UsePreviewControl
protected string CreatePlaceHolderDesignTimeHtml()
protected string CreatePlaceHolderDesignTimeHtml(string instruction)
public string GetDesignTimeHtml()
public DesignTimeResourceProviderFactory GetDesignTimeResourceProviderFactory(IServiceProvider serviceProvider)
public ViewRendering GetViewRendering(Control control)
public ViewRendering GetViewRendering(ControlDesigner designer)
protected string CreateErrorDesignTimeHtml(string errorMessage)
protected string CreateErrorDesignTimeHtml(string errorMessage, Exception e)
protected Control CreateViewControl()
public Rectangle GetBounds()
public string GetDesignTimeHtml(DesignerRegionCollection regions)
public string GetEditableDesignerRegionContent(EditableDesignerRegion region)
public void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content)
public string GetPersistenceContent()
public ViewRendering GetViewRendering()
public void Invalidate()
public void Invalidate(Rectangle rectangle)
public void InvokeTransactedChange(IComponent component, TransactedChangeCallback callback, object context, string description)
public void InvokeTransactedChange(IComponent component, TransactedChangeCallback callback, object context, string description, MemberDescriptor member)
public void InvokeTransactedChange(IServiceProvider serviceProvider, IComponent component, TransactedChangeCallback callback, object context, string description, MemberDescriptor member)
public void Localize(IDesignTimeResourceWriter resourceWriter)
public void OnAutoFormatApplied(DesignerAutoFormat appliedAutoFormat)
public void OnComponentChanging(object sender, ComponentChangingEventArgs ce)
protected void OnPaint(PaintEventArgs e)
public void RegisterClone(object original, object clone)
protected void SetRegionContent(EditableDesignerRegion region, string content)
protected string GetEmptyDesignTimeHtml()
protected string GetErrorDesignTimeHtml(Exception e)
public string GetPersistInnerHtml()
public void Initialize(IComponent component)
public bool IsPropertyBound(string propName)
protected void OnBindingsCollectionChanged(string propName)
protected void OnClick(DesignerRegionMouseEventArgs e)
public void OnComponentChanged(object sender, ComponentChangedEventArgs ce)
protected void OnControlResize()
protected void PreFilterProperties(IDictionary properties)
public void RaiseResizeEvent()
public void UpdateDesignTimeHtml()
public bool get_AllowResize()
protected object get_DesignTimeElementView()
public bool get_DesignTimeHtmlRequiresLoadComplete()
public string get_ID()
public void set_ID(string value)
public bool get_IsDirty()
public void set_IsDirty(bool value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public DesignerActionListCollection get_ActionLists()
public DesignerAutoFormatCollection get_AutoFormats()
protected bool get_DataBindingsEnabled()
protected ControlDesignerState get_DesignerState()
protected internal bool get_HidePropertiesInTemplateMode()
public bool get_InTemplateMode()
protected WebFormsRootDesigner get_RootDesigner()
protected IControlDesignerTag get_Tag()
protected void SetViewFlags(ViewFlags viewFlags, bool setFlag)
public TemplateGroupCollection get_TemplateGroups()
public Control get_ViewControl()
public void set_ViewControl(Control value)
public bool get_ViewControlCreated()
public void set_ViewControlCreated(bool value)
protected bool get_UsePreviewControl()
}
public System.Web.UI.Design.ControlDesignerState : object {
public object Item
public object get_Item(string key)
public void set_Item(string key, object value)
}
public System.Web.UI.Design.ControlLocation : Enum {
public int value__
public ControlLocation Before
public ControlLocation After
public ControlLocation First
public ControlLocation Last
public ControlLocation FirstChild
public ControlLocation LastChild
}
public System.Web.UI.Design.ControlParser : object {
public Control ParseControl(IDesignerHost designerHost, string controlText)
public Control ParseControl(IDesignerHost designerHost, string controlText, string directives)
public Control[] ParseControls(IDesignerHost designerHost, string controlText)
public ITemplate ParseTemplate(IDesignerHost designerHost, string templateText)
public ITemplate ParseTemplate(IDesignerHost designerHost, string templateText, string directives)
}
public System.Web.UI.Design.ControlPersister : object {
public string PersistControl(Control control)
public void PersistControl(TextWriter sw, Control control)
public string PersistControl(Control control, IDesignerHost host)
public void PersistControl(TextWriter sw, Control control, IDesignerHost host)
public string PersistInnerProperties(object component, IDesignerHost host)
public void PersistInnerProperties(TextWriter sw, object component, IDesignerHost host)
public string PersistTemplate(ITemplate template, IDesignerHost host)
public void PersistTemplate(TextWriter writer, ITemplate template, IDesignerHost host)
}
public System.Web.UI.Design.DataBindingCollectionConverter : TypeConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Web.UI.Design.DataBindingCollectionEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.Web.UI.Design.DataBindingHandler : object {
public void DataBindControl(IDesignerHost designerHost, Control control)
}
public System.Web.UI.Design.DataBindingValueUIHandler : object {
public void OnGetUIValueItem(ITypeDescriptorContext context, PropertyDescriptor propDesc, ArrayList valueUIItemList)
}
public System.Web.UI.Design.DataColumnSelectionConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Web.UI.Design.DataFieldConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Web.UI.Design.DataMemberConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Web.UI.Design.DataSetFieldSchema : object {
public Type DataType
public bool Identity
public bool IsReadOnly
public bool IsUnique
public int Length
public string Name
public bool Nullable
public int Precision
public bool PrimaryKey
public int Scale
public void .ctor(DataColumn column)
public Type get_DataType()
public bool get_Identity()
public bool get_IsReadOnly()
public bool get_IsUnique()
public int get_Length()
public string get_Name()
public bool get_Nullable()
public int get_Precision()
public bool get_PrimaryKey()
public int get_Scale()
}
public System.Web.UI.Design.DataSetSchema : object {
public void .ctor(DataSet dataSet)
public IDataSourceViewSchema[] GetViews()
}
public System.Web.UI.Design.DataSetViewSchema : object {
public string Name
public void .ctor(DataTable dataTable)
public string get_Name()
public IDataSourceViewSchema[] GetChildren()
public IDataSourceFieldSchema[] GetFields()
}
public System.Web.UI.Design.DataSourceBooleanViewSchemaConverter : DataSourceViewSchemaConverter {
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
}
public System.Web.UI.Design.DataSourceConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
protected bool IsValidDataSource(IComponent component)
}
public System.Web.UI.Design.DataSourceDesigner : ControlDesigner {
private EventHandler DataSourceChanged
private EventHandler SchemaRefreshed
public DesignerActionListCollection ActionLists
public bool CanConfigure
public bool CanRefreshSchema
protected bool SuppressingDataSourceEvents
public bool SchemasEquivalent(IDataSourceSchema schema1, IDataSourceSchema schema2)
public bool ViewSchemasEquivalent(IDataSourceViewSchema viewSchema1, IDataSourceViewSchema viewSchema2)
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public void add_SchemaRefreshed(EventHandler value)
public void remove_SchemaRefreshed(EventHandler value)
public DesignerActionListCollection get_ActionLists()
public bool get_CanConfigure()
public bool get_CanRefreshSchema()
protected bool get_SuppressingDataSourceEvents()
public void Configure()
public string GetDesignTimeHtml()
public DesignerDataSourceView GetView(string viewName)
public String[] GetViewNames()
protected void OnDataSourceChanged(EventArgs e)
protected void OnSchemaRefreshed(EventArgs e)
public void RefreshSchema(bool preferSilent)
public void ResumeDataSourceEvents()
public void SuppressDataSourceEvents()
}
public System.Web.UI.Design.DataSourceViewSchemaConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context, Type typeFilter)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Web.UI.Design.DesignerAutoFormat : object {
public string Name
public DesignerAutoFormatStyle Style
protected void .ctor(string name)
public string get_Name()
public DesignerAutoFormatStyle get_Style()
public void Apply(Control control)
public Control GetPreviewControl(Control runtimeControl)
public string ToString()
}
public System.Web.UI.Design.DesignerAutoFormatCollection : object {
public int Count
public DesignerAutoFormat Item
public Size PreviewSize
public object SyncRoot
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
public int get_Count()
public DesignerAutoFormat get_Item(int index)
public Size get_PreviewSize()
public object get_SyncRoot()
public int Add(DesignerAutoFormat format)
public void Clear()
public bool Contains(DesignerAutoFormat format)
public int IndexOf(DesignerAutoFormat format)
public void Insert(int index, DesignerAutoFormat format)
public void Remove(DesignerAutoFormat format)
public void RemoveAt(int index)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.IList.Add(object item)
private bool System.Collections.IList.Contains(object item)
private int System.Collections.IList.IndexOf(object item)
private void System.Collections.IList.Insert(int index, object item)
private void System.Collections.IList.Remove(object item)
private void System.Collections.IList.RemoveAt(int index)
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
}
public System.Web.UI.Design.DesignerAutoFormatStyle : Style {
public VerticalAlign VerticalAlign
public VerticalAlign get_VerticalAlign()
public void set_VerticalAlign(VerticalAlign value)
}
public System.Web.UI.Design.DesignerDataSourceView : object {
public bool CanDelete
public bool CanInsert
public bool CanPage
public bool CanRetrieveTotalRowCount
public bool CanSort
public bool CanUpdate
public IDataSourceDesigner DataSourceDesigner
public string Name
public IDataSourceViewSchema Schema
protected void .ctor(IDataSourceDesigner owner, string viewName)
public bool get_CanDelete()
public bool get_CanInsert()
public bool get_CanPage()
public bool get_CanRetrieveTotalRowCount()
public bool get_CanSort()
public bool get_CanUpdate()
public IDataSourceDesigner get_DataSourceDesigner()
public string get_Name()
public IDataSourceViewSchema get_Schema()
public IEnumerable GetDesignTimeData(int minimumRows, Boolean& isSampleData)
}
public System.Web.UI.Design.DesignerHierarchicalDataSourceView : object {
public IHierarchicalDataSourceDesigner DataSourceDesigner
public string Path
public IDataSourceSchema Schema
protected void .ctor(IHierarchicalDataSourceDesigner owner, string viewPath)
public IHierarchicalDataSourceDesigner get_DataSourceDesigner()
public string get_Path()
public IDataSourceSchema get_Schema()
public IHierarchicalEnumerable GetDesignTimeData(Boolean& isSampleData)
}
public System.Web.UI.Design.DesignerObject : object {
public ControlDesigner Designer
public string Name
public IDictionary Properties
protected void .ctor(ControlDesigner designer, string name)
protected object GetService(Type serviceType)
private object System.IServiceProvider.GetService(Type serviceType)
public ControlDesigner get_Designer()
public string get_Name()
public IDictionary get_Properties()
}
public System.Web.UI.Design.DesignerRegion : DesignerObject {
public string DesignerRegionAttributeName
public string Description
public string DisplayName
public bool EnsureSize
public bool Highlight
public bool Selectable
public bool Selected
public object UserData
public void .ctor(ControlDesigner designer, string name)
public void .ctor(ControlDesigner designer, string name, bool selectable)
public Rectangle GetBounds()
public string get_Description()
public void set_Description(string value)
public string get_DisplayName()
public void set_DisplayName(string value)
public bool get_EnsureSize()
public void set_EnsureSize(bool value)
public bool get_Highlight()
public void set_Highlight(bool value)
public bool get_Selectable()
public void set_Selectable(bool value)
public bool get_Selected()
public void set_Selected(bool value)
public object get_UserData()
public void set_UserData(object value)
}
public System.Web.UI.Design.DesignerRegionCollection : object {
public int Count
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public DesignerRegion Item
public ControlDesigner Owner
public object SyncRoot
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
public void .ctor(ControlDesigner owner)
public int Add(DesignerRegion region)
public void Clear()
public bool Contains(DesignerRegion region)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public int IndexOf(DesignerRegion region)
public void Insert(int index, DesignerRegion region)
public void Remove(DesignerRegion region)
public void RemoveAt(int index)
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public DesignerRegion get_Item(int index)
public void set_Item(int index, DesignerRegion value)
public ControlDesigner get_Owner()
public object get_SyncRoot()
private void System.Collections.ICollection.CopyTo(Array array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.IList.Add(object o)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object o)
private int System.Collections.IList.IndexOf(object o)
private void System.Collections.IList.Insert(int index, object o)
private void System.Collections.IList.Remove(object o)
private void System.Collections.IList.RemoveAt(int index)
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
}
public System.Web.UI.Design.DesignerRegionMouseEventArgs : EventArgs {
public Point Location
public DesignerRegion Region
public void .ctor(DesignerRegion region, Point location)
public Point get_Location()
public DesignerRegion get_Region()
}
public System.Web.UI.Design.DesignTimeData : object {
public EventHandler DataBindingHandler
public DataTable CreateDummyDataBoundDataTable()
public DataTable CreateDummyDataTable()
public DataTable CreateSampleDataTable(IEnumerable referenceData)
public DataTable CreateSampleDataTable(IEnumerable referenceData, bool useDataBoundData)
public PropertyDescriptorCollection GetDataFields(IEnumerable dataSource)
public IEnumerable GetDataMember(IListSource dataSource, string dataMember)
public String[] GetDataMembers(object dataSource)
public IEnumerable GetDesignTimeDataSource(DataTable dataTable, int minimumRows)
public object GetSelectedDataSource(IComponent component, string dataSource)
public IEnumerable GetSelectedDataSource(IComponent component, string dataSource, string dataMember)
private void OnDataBind(object sender, EventArgs e)
}
public System.Web.UI.Design.DesignTimeResourceProviderFactory : object {
public IResourceProvider CreateDesignTimeGlobalResourceProvider(IServiceProvider serviceProvider, string classKey)
public IResourceProvider CreateDesignTimeLocalResourceProvider(IServiceProvider serviceProvider)
public IDesignTimeResourceWriter CreateDesignTimeLocalResourceWriter(IServiceProvider serviceProvider)
}
public System.Web.UI.Design.Directives.DirectiveAttribute : Attribute {
public bool AllowedOnMobilePages
public string BuilderType
public bool Culture
public string RenameType
public bool ServerLanguageExtensions
public bool ServerLanguageNames
public bool get_AllowedOnMobilePages()
public void set_AllowedOnMobilePages(bool value)
public string get_BuilderType()
public void set_BuilderType(string value)
public bool get_Culture()
public void set_Culture(bool value)
public string get_RenameType()
public void set_RenameType(string value)
public bool get_ServerLanguageExtensions()
public void set_ServerLanguageExtensions(bool value)
public bool get_ServerLanguageNames()
public void set_ServerLanguageNames(bool value)
}
public System.Web.UI.Design.Directives.DirectiveRegistry : object {
public ReadOnlyCollection`1<Type> GetDirectives(Version frameworkVersion, string extension)
}
public System.Web.UI.Design.Directives.SchemaElementNameAttribute : Attribute {
public string Value
public void .ctor(string value)
public string get_Value()
}
public System.Web.UI.Design.EditableDesignerRegion : DesignerRegion {
public string Content
public bool ServerControlsOnly
public bool SupportsDataBinding
public void .ctor(ControlDesigner owner, string name)
public void .ctor(ControlDesigner owner, string name, bool serverControlsOnly)
public ViewRendering GetChildViewRendering(Control control)
public string get_Content()
public void set_Content(string value)
public bool get_ServerControlsOnly()
public void set_ServerControlsOnly(bool value)
public bool get_SupportsDataBinding()
public void set_SupportsDataBinding(bool value)
}
public System.Web.UI.Design.ExpressionEditor : object {
private Type expressionBuilderType
private string prefixFromReflection
public string ExpressionPrefix
private Type ExpressionBuilderType
public string get_ExpressionPrefix()
private void set_ExpressionBuilderType(Type value)
public object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider)
public ExpressionEditor GetExpressionEditor(string expressionPrefix, IServiceProvider serviceProvider)
public ExpressionEditor GetExpressionEditor(Type expressionBuilderType, IServiceProvider serviceProvider)
public ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider)
}
public System.Web.UI.Design.ExpressionEditorSheet : object {
private IServiceProvider serviceProvider
public bool IsValid
public IServiceProvider ServiceProvider
protected void .ctor(IServiceProvider serviceProvider)
public string GetExpression()
public bool get_IsValid()
public IServiceProvider get_ServiceProvider()
}
public System.Web.UI.Design.ExpressionsCollectionConverter : TypeConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Web.UI.Design.ExpressionsCollectionEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.Web.UI.Design.HierarchicalDataSourceConverter : DataSourceConverter {
protected bool IsValidDataSource(IComponent component)
}
public System.Web.UI.Design.HierarchicalDataSourceDesigner : ControlDesigner {
private EventHandler DataSourceChanged
private EventHandler SchemaRefreshed
public DesignerActionListCollection ActionLists
public bool CanConfigure
public bool CanRefreshSchema
protected bool SuppressingDataSourceEvents
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public void add_SchemaRefreshed(EventHandler value)
public void remove_SchemaRefreshed(EventHandler value)
public DesignerActionListCollection get_ActionLists()
public bool get_CanConfigure()
public bool get_CanRefreshSchema()
protected bool get_SuppressingDataSourceEvents()
public void Configure()
public string GetDesignTimeHtml()
public DesignerHierarchicalDataSourceView GetView(string viewPath)
protected void OnDataSourceChanged(EventArgs e)
protected void OnSchemaRefreshed(EventArgs e)
public void RefreshSchema(bool preferSilent)
public void ResumeDataSourceEvents()
public void SuppressDataSourceEvents()
}
public System.Web.UI.Design.HtmlControlDesigner : ComponentDesigner {
public IHtmlControlDesignerBehavior Behavior
public DataBindingCollection DataBindings
protected object DesignTimeElement
public bool ShouldCodeSerialize
public ExpressionBindingCollection Expressions
protected void Dispose(bool disposing)
protected void OnBehaviorAttached()
protected void OnBehaviorDetaching()
protected void OnBindingsCollectionChanged(string propName)
public void OnSetParent()
protected void PreFilterEvents(IDictionary events)
protected void PreFilterProperties(IDictionary properties)
public IHtmlControlDesignerBehavior get_Behavior()
public void set_Behavior(IHtmlControlDesignerBehavior value)
public DataBindingCollection get_DataBindings()
protected object get_DesignTimeElement()
public bool get_ShouldCodeSerialize()
public void set_ShouldCodeSerialize(bool value)
public ExpressionBindingCollection get_Expressions()
public void Initialize(IComponent component)
}
public System.Web.UI.Design.HyperLinkDataBindingHandler : DataBindingHandler {
public void DataBindControl(IDesignerHost designerHost, Control control)
}
public System.Web.UI.Design.IContentResolutionService {
public IDictionary ContentDefinitions
public ContentDesignerState GetContentDesignerState(string identifier)
public void SetContentDesignerState(string identifier, ContentDesignerState state)
public IDictionary get_ContentDefinitions()
}
public System.Web.UI.Design.IControlDesignerBehavior {
public object DesignTimeElementView
public string DesignTimeHtml
public void OnTemplateModeChanged()
public object get_DesignTimeElementView()
public string get_DesignTimeHtml()
public void set_DesignTimeHtml(string value)
}
public System.Web.UI.Design.IControlDesignerTag {
public bool IsDirty
public bool get_IsDirty()
public string GetAttribute(string name)
public string GetContent()
public string GetOuterContent()
public void RemoveAttribute(string name)
public void SetAttribute(string name, string value)
public void SetContent(string content)
public void SetDirty(bool dirty)
}
public System.Web.UI.Design.IControlDesignerView {
public DesignerRegion ContainingRegion
public IDesigner NamingContainerDesigner
public bool SupportsRegions
public void add_ViewEvent(ViewEventHandler value)
public void remove_ViewEvent(ViewEventHandler value)
public DesignerRegion get_ContainingRegion()
public IDesigner get_NamingContainerDesigner()
public bool get_SupportsRegions()
public Rectangle GetBounds(DesignerRegion region)
public void Invalidate(Rectangle rectangle)
public void SetFlags(ViewFlags viewFlags, bool setFlag)
public void SetRegionContent(EditableDesignerRegion region, string content)
public void Update()
}
public System.Web.UI.Design.IDataBindingSchemaProvider {
public bool CanRefreshSchema
public IDataSourceViewSchema Schema
public bool get_CanRefreshSchema()
public IDataSourceViewSchema get_Schema()
public void RefreshSchema(bool preferSilent)
}
public System.Web.UI.Design.IDataSourceDesigner {
public bool CanConfigure
public bool CanRefreshSchema
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public void add_SchemaRefreshed(EventHandler value)
public void remove_SchemaRefreshed(EventHandler value)
public bool get_CanConfigure()
public bool get_CanRefreshSchema()
public void Configure()
public DesignerDataSourceView GetView(string viewName)
public String[] GetViewNames()
public void RefreshSchema(bool preferSilent)
public void ResumeDataSourceEvents()
public void SuppressDataSourceEvents()
}
public System.Web.UI.Design.IDataSourceFieldSchema {
public Type DataType
public bool Identity
public bool IsReadOnly
public bool IsUnique
public int Length
public string Name
public bool Nullable
public int Precision
public bool PrimaryKey
public int Scale
public Type get_DataType()
public bool get_Identity()
public bool get_IsReadOnly()
public bool get_IsUnique()
public int get_Length()
public string get_Name()
public bool get_Nullable()
public int get_Precision()
public bool get_PrimaryKey()
public int get_Scale()
}
public System.Web.UI.Design.IDataSourceProvider {
public IEnumerable GetResolvedSelectedDataSource()
public object GetSelectedDataSource()
}
public System.Web.UI.Design.IDataSourceSchema {
public IDataSourceViewSchema[] GetViews()
}
public System.Web.UI.Design.IDataSourceViewSchema {
public string Name
public string get_Name()
public IDataSourceViewSchema[] GetChildren()
public IDataSourceFieldSchema[] GetFields()
}
public System.Web.UI.Design.IDesignTimeResourceProviderFactoryService {
public DesignTimeResourceProviderFactory GetFactory()
}
public System.Web.UI.Design.IDesignTimeResourceWriter {
public string CreateResourceKey(string resourceName, object obj)
}
public System.Web.UI.Design.IDocumentProjectItem {
public Stream GetContents()
public void Open()
}
public System.Web.UI.Design.IFolderProjectItem {
public ICollection Children
public ICollection get_Children()
public IDocumentProjectItem AddDocument(string name, Byte[] content)
public IFolderProjectItem AddFolder(string name)
}
public System.Web.UI.Design.IHierarchicalDataSourceDesigner {
public bool CanConfigure
public bool CanRefreshSchema
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public void add_SchemaRefreshed(EventHandler value)
public void remove_SchemaRefreshed(EventHandler value)
public bool get_CanConfigure()
public bool get_CanRefreshSchema()
public void Configure()
public DesignerHierarchicalDataSourceView GetView(string viewPath)
public void RefreshSchema(bool preferSilent)
public void ResumeDataSourceEvents()
public void SuppressDataSourceEvents()
}
public System.Web.UI.Design.IHtmlControlDesignerBehavior {
public HtmlControlDesigner Designer
public object DesignTimeElement
public object GetAttribute(string attribute, bool ignoreCase)
public object GetStyleAttribute(string attribute, bool designTimeOnly, bool ignoreCase)
public void RemoveAttribute(string attribute, bool ignoreCase)
public void RemoveStyleAttribute(string attribute, bool designTimeOnly, bool ignoreCase)
public void SetAttribute(string attribute, object value, bool ignoreCase)
public void SetStyleAttribute(string attribute, bool designTimeOnly, object value, bool ignoreCase)
public HtmlControlDesigner get_Designer()
public void set_Designer(HtmlControlDesigner value)
public object get_DesignTimeElement()
}
public System.Web.UI.Design.ImageUrlEditor : UrlEditor {
protected string Caption
protected string Filter
protected string get_Caption()
protected string get_Filter()
}
public System.Web.UI.Design.IProjectItem {
public string AppRelativeUrl
public string Name
public IProjectItem Parent
public string PhysicalPath
public string get_AppRelativeUrl()
public string get_Name()
public IProjectItem get_Parent()
public string get_PhysicalPath()
}
public System.Web.UI.Design.ITemplateEditingFrame {
public Style ControlStyle
public int InitialHeight
public int InitialWidth
public string Name
public String[] TemplateNames
public Style[] TemplateStyles
public TemplateEditingVerb Verb
public void Close(bool saveChanges)
public void Open()
public void Resize(int width, int height)
public void Save()
public void UpdateControlName(string newName)
public Style get_ControlStyle()
public int get_InitialHeight()
public void set_InitialHeight(int value)
public int get_InitialWidth()
public void set_InitialWidth(int value)
public string get_Name()
public String[] get_TemplateNames()
public Style[] get_TemplateStyles()
public TemplateEditingVerb get_Verb()
public void set_Verb(TemplateEditingVerb value)
}
public System.Web.UI.Design.ITemplateEditingService {
public bool SupportsNestedTemplateEditing
public ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames)
public ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames, Style controlStyle, Style[] templateStyles)
public string GetContainingTemplateName(Control control)
public bool get_SupportsNestedTemplateEditing()
}
public System.Web.UI.Design.IWebAdministrationService {
public void Start(IDictionary arguments)
}
public System.Web.UI.Design.IWebApplication {
public IProjectItem RootProjectItem
public IProjectItem GetProjectItemFromUrl(string appRelativeUrl)
public Configuration OpenWebConfiguration(bool isReadOnly)
public IProjectItem get_RootProjectItem()
}
public System.Web.UI.Design.IWebFormReferenceManager {
public Type GetObjectType(string tagPrefix, string typeName)
public string GetRegisterDirectives()
public string GetTagPrefix(Type objectType)
}
public System.Web.UI.Design.IWebFormsBuilderUIService {
public string BuildColor(Control owner, string initialColor)
public string BuildUrl(Control owner, string initialUrl, string baseUrl, string caption, string filter, UrlBuilderOptions options)
}
public System.Web.UI.Design.IWebFormsDocumentService {
public string DocumentUrl
public bool IsLoading
public void add_LoadComplete(EventHandler value)
public void remove_LoadComplete(EventHandler value)
public object CreateDiscardableUndoUnit()
public void DiscardUndoUnit(object discardableUndoUnit)
public void EnableUndo(bool enable)
public void UpdateSelection()
public string get_DocumentUrl()
public bool get_IsLoading()
}
public System.Web.UI.Design.MailFileEditor : UrlEditor {
protected string Caption
protected string Filter
protected string get_Caption()
protected string get_Filter()
}
public System.Web.UI.Design.MdbDataFileEditor : UrlEditor {
protected string Caption
protected string Filter
protected string get_Caption()
protected string get_Filter()
}
public System.Web.UI.Design.ReadWriteControlDesigner : ControlDesigner {
protected void MapPropertyToStyle(string propName, object varPropValue)
protected void OnBehaviorAttached()
public void OnComponentChanged(object sender, ComponentChangedEventArgs ce)
public string GetDesignTimeHtml()
public void UpdateDesignTimeHtml()
}
public System.Web.UI.Design.ResourceExpressionEditor : ExpressionEditor {
public object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider)
public ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider)
}
public System.Web.UI.Design.ResourceExpressionEditorSheet : ExpressionEditorSheet {
public string ClassKey
public bool IsValid
public string ResourceKey
public void .ctor(string expression, IServiceProvider serviceProvider)
public string get_ClassKey()
public void set_ClassKey(string value)
public bool get_IsValid()
public string get_ResourceKey()
public void set_ResourceKey(string value)
public string GetExpression()
}
public System.Web.UI.Design.RouteUrlExpressionEditor : ExpressionEditor {
public object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider)
}
public System.Web.UI.Design.RouteUrlExpressionEditorSheet : ExpressionEditorSheet {
public string RouteName
public string RouteValues
public void .ctor(string expression, IServiceProvider serviceProvider)
public string get_RouteName()
public void set_RouteName(string value)
public string get_RouteValues()
public void set_RouteValues(string value)
public string GetExpression()
}
public System.Web.UI.Design.RouteValueExpressionEditor : ExpressionEditor {
public object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider)
}
public System.Web.UI.Design.RouteValueExpressionEditorSheet : ExpressionEditorSheet {
public string RouteValue
public void .ctor(string expression, IServiceProvider serviceProvider)
public string get_RouteValue()
public void set_RouteValue(string value)
public string GetExpression()
}
public System.Web.UI.Design.SkinIDTypeConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Web.UI.Design.SupportsPreviewControlAttribute : Attribute {
private bool is_default
private bool supports_preview
public SupportsPreviewControlAttribute Default
public bool SupportsPreviewControl
public void .ctor(bool supportsPreviewControl)
private void .ctor(bool supportsPreviewControl, bool isDefault)
public bool get_SupportsPreviewControl()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Web.UI.Design.TemplatedControlDesigner : ControlDesigner {
private ITemplateEditingFrame _activeTemplateFrame
private bool _enableTemplateEditing
private bool _templateMode
private EventHandler _templateVerbHandler
protected bool DataBindingsEnabled
public TemplateGroupCollection TemplateGroups
public ITemplateEditingFrame ActiveTemplateEditingFrame
public bool CanEnterTemplateMode
public bool InTemplateMode
internal EventHandler TemplateEditingVerbHandler
public void Initialize(IComponent component)
protected ITemplateEditingFrame CreateTemplateEditingFrame(TemplateEditingVerb verb)
protected TemplateEditingVerb[] GetCachedTemplateEditingVerbs()
public string GetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, Boolean& allowEditing)
public void SetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, string templateContent)
public void EnterTemplateMode(ITemplateEditingFrame newTemplateEditingFrame)
public void ExitTemplateMode(bool fSwitchingTemplates, bool fNested, bool fSave)
public string GetTemplateContainerDataItemProperty(string templateName)
public IEnumerable GetTemplateContainerDataSource(string templateName)
public TemplateEditingVerb[] GetTemplateEditingVerbs()
protected ITemplate GetTemplateFromText(string text)
public Type GetTemplatePropertyParentType(string templateName)
protected string GetTextFromTemplate(ITemplate template)
protected void OnBehaviorAttached()
public void OnComponentChanged(object sender, ComponentChangedEventArgs ce)
public void OnSetParent()
protected void OnTemplateModeChanged()
protected void SaveActiveTemplateEditingFrame()
public void UpdateDesignTimeHtml()
protected bool get_DataBindingsEnabled()
public TemplateGroupCollection get_TemplateGroups()
public ITemplateEditingFrame get_ActiveTemplateEditingFrame()
public bool get_CanEnterTemplateMode()
public bool get_InTemplateMode()
internal EventHandler get_TemplateEditingVerbHandler()
}
public System.Web.UI.Design.TemplatedEditableDesignerRegion : EditableDesignerRegion {
public bool IsSingleInstanceTemplate
public bool SupportsDataBinding
public TemplateDefinition TemplateDefinition
public void .ctor(TemplateDefinition templateDefinition)
public bool get_IsSingleInstanceTemplate()
public void set_IsSingleInstanceTemplate(bool value)
public bool get_SupportsDataBinding()
public void set_SupportsDataBinding(bool value)
public TemplateDefinition get_TemplateDefinition()
}
public System.Web.UI.Design.TemplateDefinition : DesignerObject {
public bool AllowEditing
public string Content
public bool ServerControlsOnly
public Style Style
public bool SupportsDataBinding
public object TemplatedObject
public string TemplatePropertyName
public void .ctor(ControlDesigner designer, string name, object templatedObject, string templatePropertyName)
public void .ctor(ControlDesigner designer, string name, object templatedObject, string templatePropertyName, bool serverControlsOnly)
public void .ctor(ControlDesigner designer, string name, object templatedObject, string templatePropertyName, Style style)
public void .ctor(ControlDesigner designer, string name, object templatedObject, string templatePropertyName, Style style, bool serverControlsOnly)
public bool get_AllowEditing()
public string get_Content()
public void set_Content(string value)
public bool get_ServerControlsOnly()
public Style get_Style()
public bool get_SupportsDataBinding()
public void set_SupportsDataBinding(bool value)
public object get_TemplatedObject()
public string get_TemplatePropertyName()
}
public System.Web.UI.Design.TemplateEditingService : object {
private IDesignerHost _designerHost
public bool SupportsNestedTemplateEditing
public void .ctor(IDesignerHost designerHost)
protected void Finalize()
public ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames)
public ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames, Style controlStyle, Style[] templateStyles)
public void Dispose()
private void Dispose(bool disposing)
public string GetContainingTemplateName(Control control)
public bool get_SupportsNestedTemplateEditing()
}
public System.Web.UI.Design.TemplateEditingVerb : DesignerVerb {
private int _index
public int Index
public void .ctor(string text, int index)
public void .ctor(string text, int index, TemplatedControlDesigner designer)
protected void Finalize()
public void Dispose()
protected void Dispose(bool disposing)
public int get_Index()
}
public System.Web.UI.Design.TemplateGroup : object {
public string GroupName
public Style GroupStyle
public bool IsEmpty
public TemplateDefinition[] Templates
public void .ctor(string groupName)
public void .ctor(string groupName, Style groupStyle)
public string get_GroupName()
public Style get_GroupStyle()
public bool get_IsEmpty()
public TemplateDefinition[] get_Templates()
public void AddTemplateDefinition(TemplateDefinition templateDefinition)
}
public System.Web.UI.Design.TemplateGroupCollection : object {
public int Count
public TemplateGroup Item
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
public int get_Count()
public TemplateGroup get_Item(int index)
public void set_Item(int index, TemplateGroup value)
public int Add(TemplateGroup group)
public void AddRange(TemplateGroupCollection groups)
public void Clear()
public bool Contains(TemplateGroup group)
public void CopyTo(TemplateGroup[] array, int index)
public int IndexOf(TemplateGroup group)
public void Insert(int index, TemplateGroup group)
public void Remove(TemplateGroup group)
public void RemoveAt(int index)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.IList.Add(object o)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object o)
private int System.Collections.IList.IndexOf(object o)
private void System.Collections.IList.Insert(int index, object o)
private void System.Collections.IList.Remove(object o)
private void System.Collections.IList.RemoveAt(int index)
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
}
public System.Web.UI.Design.TemplateModeChangedEventArgs : EventArgs {
private TemplateGroup group
public TemplateGroup NewTemplateGroup
public void .ctor(TemplateGroup newTemplateGroup)
public TemplateGroup get_NewTemplateGroup()
}
public System.Web.UI.Design.TextControlDesigner : ControlDesigner {
public string GetDesignTimeHtml()
}
public System.Web.UI.Design.TextDataBindingHandler : DataBindingHandler {
public void DataBindControl(IDesignerHost designerHost, Control control)
}
public System.Web.UI.Design.TransactedChangeCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(object context)
public IAsyncResult BeginInvoke(object context, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
public System.Web.UI.Design.TypeSchema : object {
public void .ctor(Type type)
public IDataSourceViewSchema[] GetViews()
}
public System.Web.UI.Design.UrlBuilder : object {
public string BuildUrl(IComponent component, Control owner, string initialUrl, string caption, string filter)
public string BuildUrl(IComponent component, Control owner, string initialUrl, string caption, string filter, UrlBuilderOptions options)
public string BuildUrl(IServiceProvider serviceProvider, Control owner, string initialUrl, string caption, string filter, UrlBuilderOptions options)
}
public System.Web.UI.Design.UrlBuilderOptions : Enum {
public int value__
public UrlBuilderOptions None
public UrlBuilderOptions NoAbsolute
}
public System.Web.UI.Design.UrlEditor : UITypeEditor {
protected string Caption
protected string Filter
protected UrlBuilderOptions Options
protected string get_Caption()
protected string get_Filter()
protected UrlBuilderOptions get_Options()
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.Web.UI.Design.UserControlDesigner : ControlDesigner {
public DesignerActionListCollection ActionLists
public bool AllowResize
public string GetDesignTimeHtml()
public DesignerActionListCollection get_ActionLists()
public bool get_AllowResize()
}
public System.Web.UI.Design.UserControlFileEditor : UrlEditor {
protected string Caption
protected string Filter
protected string get_Caption()
protected string get_Filter()
}
public System.Web.UI.Design.ViewEvent : object {
public ViewEvent Click
public ViewEvent Paint
public ViewEvent TemplateModeChanged
}
public System.Web.UI.Design.ViewEventArgs : EventArgs {
private ViewEvent event_type
private DesignerRegion region
private EventArgs event_args
public ViewEvent EventType
public DesignerRegion Region
public EventArgs EventArgs
public void .ctor(ViewEvent eventType, DesignerRegion region, EventArgs eventArgs)
public ViewEvent get_EventType()
public DesignerRegion get_Region()
public EventArgs get_EventArgs()
}
public System.Web.UI.Design.ViewEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ViewEventArgs e)
public IAsyncResult BeginInvoke(object sender, ViewEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.Design.ViewFlags : Enum {
public int value__
public ViewFlags CustomPaint
public ViewFlags DesignTimeHtmlRequiresLoadComplete
public ViewFlags TemplateEditing
}
public System.Web.UI.Design.ViewRendering : object {
public string Content
public DesignerRegionCollection Regions
public bool Visible
public void .ctor(string content, DesignerRegionCollection regions)
public string get_Content()
public DesignerRegionCollection get_Regions()
public void .ctor(string content, DesignerRegionCollection regions, bool visible)
public bool get_Visible()
}
public System.Web.UI.Design.WebControls.AccessDataSourceDesigner : SqlDataSourceDesigner {
public string DataFile
public string get_DataFile()
public void set_DataFile(string value)
protected string GetConnectionString()
}
public System.Web.UI.Design.WebControls.AdRotatorDesigner : ControlDesigner {
public string GetDesignTimeHtml()
}
public System.Web.UI.Design.WebControls.BaseDataBoundControlDesigner : ControlDesigner {
public string DataSource
public string DataSourceID
public string get_DataSource()
public void set_DataSource(string value)
public string get_DataSourceID()
public void set_DataSourceID(string value)
protected void Dispose(bool disposing)
public string GetDesignTimeHtml()
public void Initialize(IComponent component)
public DialogResult ShowCreateDataSourceDialog(ControlDesigner controlDesigner, Type dataSourceType, bool configure, String& dataSourceID)
protected bool ConnectToDataSource()
protected void CreateDataSource()
protected void DataBind(BaseDataBoundControl dataBoundControl)
protected void DisconnectFromDataSource()
protected string GetEmptyDesignTimeHtml()
protected string GetErrorDesignTimeHtml(Exception e)
protected void OnDataSourceChanged(bool forceUpdateView)
protected void OnSchemaRefreshed()
protected void PreFilterProperties(IDictionary properties)
}
public System.Web.UI.Design.WebControls.BaseDataListComponentEditor : WindowsFormsComponentEditor {
private int initial_page
public void .ctor(int initialPage)
public bool EditComponent(ITypeDescriptorContext context, object obj, IWin32Window parent)
protected int GetInitialComponentEditorPageIndex()
}
public System.Web.UI.Design.WebControls.BaseDataListDesigner : TemplatedControlDesigner {
private string data_key_field
private string data_member
private string data_source
public string DataKeyField
public string DataMember
public string DataSource
public bool DesignTimeHtmlRequiresLoadComplete
public DesignerVerbCollection Verbs
public IDataSourceDesigner DataSourceDesigner
public string DataSourceID
public DesignerDataSourceView DesignerView
public string get_DataKeyField()
public void set_DataKeyField(string value)
public string get_DataMember()
public void set_DataMember(string value)
public string get_DataSource()
public void set_DataSource(string value)
public bool get_DesignTimeHtmlRequiresLoadComplete()
public DesignerVerbCollection get_Verbs()
protected void Dispose(bool disposing)
protected IEnumerable GetDesignTimeDataSource(int minimumRows, Boolean& dummyDataSource)
protected IEnumerable GetDesignTimeDataSource(IEnumerable selectedDataSource, int minimumRows, Boolean& dummyDataSource)
public IEnumerable GetResolvedSelectedDataSource()
public object GetSelectedDataSource()
public IEnumerable GetTemplateContainerDataSource(string templateName)
public void Initialize(IComponent component)
protected internal void InvokePropertyBuilder(int initialPage)
protected void OnAutoFormat(object sender, EventArgs e)
public void OnComponentChanged(object sender, ComponentChangedEventArgs e)
protected internal void OnDataSourceChanged()
protected void OnPropertyBuilder(object sender, EventArgs e)
protected internal void OnStylesChanged()
protected void OnTemplateEditingVerbsChanged()
protected void PreFilterProperties(IDictionary properties)
public IDataSourceDesigner get_DataSourceDesigner()
public string get_DataSourceID()
public void set_DataSourceID(string value)
public DesignerDataSourceView get_DesignerView()
private bool System.Web.UI.Design.IDataBindingSchemaProvider.get_CanRefreshSchema()
private IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.get_Schema()
private void System.Web.UI.Design.IDataBindingSchemaProvider.RefreshSchema(bool preferSilent)
}
public System.Web.UI.Design.WebControls.BaseValidatorDesigner : ControlDesigner {
public string GetDesignTimeHtml()
}
public System.Web.UI.Design.WebControls.ButtonDesigner : ControlDesigner {
public string GetDesignTimeHtml()
}
public System.Web.UI.Design.WebControls.CalendarAutoFormatDialog : Form {
public void .ctor(Calendar calendar)
protected void OnDelayLoadActions()
protected void OnActivated(object source, EventArgs e)
protected void OnOKClicked(object source, EventArgs e)
protected void OnSelChangedScheme(object source, EventArgs e)
}
public System.Web.UI.Design.WebControls.CalendarDesigner : ControlDesigner {
public DesignerVerbCollection Verbs
public DesignerVerbCollection get_Verbs()
public void Initialize(IComponent component)
protected void OnAutoFormat(object sender, EventArgs e)
}
public System.Web.UI.Design.WebControls.ChangePasswordDesigner : ControlDesigner {
public bool RenderOuterTable
public bool get_RenderOuterTable()
public void set_RenderOuterTable(bool value)
}
public System.Web.UI.Design.WebControls.CheckBoxDesigner : ControlDesigner {
public string GetDesignTimeHtml()
}
public System.Web.UI.Design.WebControls.CompositeControlDesigner : ControlDesigner {
protected void CreateChildControls()
public string GetDesignTimeHtml()
public string GetDesignTimeHtml(DesignerRegionCollection regions)
public void Initialize(IComponent component)
}
public System.Web.UI.Design.WebControls.CreateUserWizardDesigner : WizardDesigner {
protected void AddDesignerRegions(DesignerRegionCollection regions)
protected void ConvertToCustomNavigationTemplate()
}
public System.Web.UI.Design.WebControls.CreateUserWizardStepCollectionEditor : WizardStepCollectionEditor {
public void .ctor(Type type)
}
public System.Web.UI.Design.WebControls.DataBoundControlDesigner : BaseDataBoundControlDesigner {
public DesignerActionListCollection ActionLists
public string DataMember
public IDataSourceDesigner DataSourceDesigner
public DesignerDataSourceView DesignerView
protected int SampleRowCount
protected bool UseDataSourcePickerActionList
private bool System.Web.UI.Design.IDataBindingSchemaProvider.CanRefreshSchema
private IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.Schema
public DesignerActionListCollection get_ActionLists()
public string get_DataMember()
public void set_DataMember(string value)
public IDataSourceDesigner get_DataSourceDesigner()
public DesignerDataSourceView get_DesignerView()
protected int get_SampleRowCount()
protected bool get_UseDataSourcePickerActionList()
protected void Dispose(bool disposing)
protected bool ConnectToDataSource()
protected void CreateDataSource()
protected void DataBind(BaseDataBoundControl dataBoundControl)
protected void DisconnectFromDataSource()
protected IEnumerable GetDesignTimeDataSource()
protected IEnumerable GetSampleDataSource()
protected void PreFilterProperties(IDictionary properties)
private void System.Web.UI.Design.IDataBindingSchemaProvider.RefreshSchema(bool preferSilent)
private IEnumerable System.Web.UI.Design.IDataSourceProvider.GetResolvedSelectedDataSource()
private object System.Web.UI.Design.IDataSourceProvider.GetSelectedDataSource()
private bool System.Web.UI.Design.IDataBindingSchemaProvider.get_CanRefreshSchema()
private IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.get_Schema()
}
public System.Web.UI.Design.WebControls.DataControlFieldDesigner : object {
public string DefaultNodeText
public bool UsesSchema
public string get_DefaultNodeText()
public bool get_UsesSchema()
public DataControlField CreateField()
public DataControlField CreateField(IDataSourceFieldSchema fieldSchema)
public TemplateField CreateTemplateField(DataControlField dataControlField, DataBoundControl dataBoundControl)
public string GetNodeText(DataControlField dataControlField)
public bool IsEnabled(DataBoundControl parent)
}
public System.Web.UI.Design.WebControls.DataGridComponentEditor : BaseDataListComponentEditor {
public void .ctor(int initialPage)
}
public System.Web.UI.Design.WebControls.DataGridDesigner : BaseDataListDesigner {
protected ITemplateEditingFrame CreateTemplateEditingFrame(TemplateEditingVerb verb)
protected TemplateEditingVerb[] GetCachedTemplateEditingVerbs()
public string GetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, Boolean& allowEditing)
public void OnColumnsChanged()
protected void OnTemplateEditingVerbsChanged()
public void SetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, string templateContent)
}
public System.Web.UI.Design.WebControls.DataListComponentEditor : BaseDataListComponentEditor {
public void .ctor(int initialPage)
public bool EditComponent(ITypeDescriptorContext context, object obj, IWin32Window parent)
protected Type[] GetComponentEditorPages()
}
public System.Web.UI.Design.WebControls.DataListDesigner : BaseDataListDesigner {
protected ITemplateEditingFrame CreateTemplateEditingFrame(TemplateEditingVerb verb)
protected TemplateEditingVerb[] GetCachedTemplateEditingVerbs()
public string GetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, Boolean& allowEditing)
protected void OnSchemaRefreshed()
protected void OnTemplateEditingVerbsChanged()
public void SetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, string templateContent)
}
public System.Web.UI.Design.WebControls.DataProviderNameConverter : StringConverter {
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Web.UI.Design.WebControls.DataSourceIDConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
protected bool IsValidDataSource(IComponent component)
}
public System.Web.UI.Design.WebControls.EmbeddedMailObjectCollectionEditor : CollectionEditor {
public void .ctor(Type type)
}
public System.Web.UI.Design.WebControls.FormViewDesigner : DataBoundControlDesigner {
public bool RenderOuterTable
public bool get_RenderOuterTable()
public void set_RenderOuterTable(bool value)
}
public System.Web.UI.Design.WebControls.HierarchicalDataBoundControlDesigner : BaseDataBoundControlDesigner {
public DesignerActionListCollection ActionLists
public IHierarchicalDataSourceDesigner DataSourceDesigner
public DesignerHierarchicalDataSourceView DesignerView
protected bool UseDataSourcePickerActionList
public DesignerActionListCollection get_ActionLists()
public IHierarchicalDataSourceDesigner get_DataSourceDesigner()
public DesignerHierarchicalDataSourceView get_DesignerView()
protected bool get_UseDataSourcePickerActionList()
protected bool ConnectToDataSource()
protected void CreateDataSource()
protected void DataBind(BaseDataBoundControl dataBoundControl)
protected void DisconnectFromDataSource()
protected IHierarchicalEnumerable GetDesignTimeDataSource()
protected IHierarchicalEnumerable GetSampleDataSource()
protected void PreFilterProperties(IDictionary properties)
}
public System.Web.UI.Design.WebControls.HotSpotCollectionEditor : CollectionEditor {
public void .ctor(Type type)
}
public System.Web.UI.Design.WebControls.HyperLinkDesigner : TextControlDesigner {
public string GetDesignTimeHtml()
}
public System.Web.UI.Design.WebControls.ListControlDataBindingHandler : DataBindingHandler {
public void DataBindControl(IDesignerHost designerHost, Control control)
}
public System.Web.UI.Design.WebControls.ListControlDesigner : DataBoundControlDesigner {
private string data_key_field
private string data_text_field
private string data_value_field
public DesignerActionListCollection ActionLists
protected bool UseDataSourcePickerActionList
public string DataKeyField
public string DataTextField
public string DataValueField
public DesignerActionListCollection get_ActionLists()
protected bool get_UseDataSourcePickerActionList()
public string get_DataKeyField()
public void set_DataKeyField(string value)
public string get_DataTextField()
public void set_DataTextField(string value)
public string get_DataValueField()
public void set_DataValueField(string value)
protected void DataBind(BaseDataBoundControl dataBoundControl)
public void Initialize(IComponent component)
public string GetDesignTimeHtml()
public IEnumerable GetResolvedSelectedDataSource()
public object GetSelectedDataSource()
public void OnComponentChanged(object sender, ComponentChangedEventArgs e)
protected internal void OnDataSourceChanged()
protected void PreFilterProperties(IDictionary properties)
}
public System.Web.UI.Design.WebControls.ListItemsCollectionEditor : CollectionEditor {
public void .ctor(Type type)
}
public System.Web.UI.Design.WebControls.LoginDesigner : CompositeControlDesigner {
public bool RenderOuterTable
public bool get_RenderOuterTable()
public void set_RenderOuterTable(bool value)
}
public System.Web.UI.Design.WebControls.MenuDesigner : HierarchicalDataBoundControlDesigner {
private bool System.Web.UI.Design.IDataBindingSchemaProvider.get_CanRefreshSchema()
private IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.get_Schema()
private void System.Web.UI.Design.IDataBindingSchemaProvider.RefreshSchema(bool preferSilent)
}
public System.Web.UI.Design.WebControls.MenuItemStyleCollectionEditor : CollectionEditor {
public void .ctor(Type type)
}
public System.Web.UI.Design.WebControls.MultiViewDesigner : ContainerControlDesigner {
protected bool NoWrap
protected bool get_NoWrap()
}
public System.Web.UI.Design.WebControls.ObjectDataSourceDesigner : DataSourceDesigner {
public string SelectMethod
public string TypeName
public string get_SelectMethod()
public void set_SelectMethod(string value)
public string get_TypeName()
public void set_TypeName(string value)
}
public System.Web.UI.Design.WebControls.ObjectDesignerDataSourceView : DesignerDataSourceView {
public void .ctor(ObjectDataSourceDesigner owner, string viewName)
}
public System.Web.UI.Design.WebControls.PanelDesigner : ReadWriteControlDesigner {
protected void MapPropertyToStyle(string propName, object varPropValue)
protected void OnBehaviorAttached()
}
public System.Web.UI.Design.WebControls.ParameterEditorUserControl : UserControl {
public bool ParametersConfigured
public TypeDescriptionProvider TypeDescriptionProvider
public void .ctor(IServiceProvider serviceProvider)
public bool get_ParametersConfigured()
public TypeDescriptionProvider get_TypeDescriptionProvider()
public void add_ParametersChanged(EventHandler value)
public void remove_ParametersChanged(EventHandler value)
public void AddParameters(Parameter[] parameters)
public void ClearParameters()
public Parameter[] GetParameters()
public void SetAllowCollectionChanges(bool allowChanges)
}
public System.Web.UI.Design.WebControls.PasswordRecoveryDesigner : ControlDesigner {
public bool RenderOuterTable
public bool get_RenderOuterTable()
public void set_RenderOuterTable(bool value)
}
public System.Web.UI.Design.WebControls.RegexEditorDialog : Form {
private string regular_expression
public string RegularExpression
public string get_RegularExpression()
public void set_RegularExpression(string value)
protected void CmdHelp_Click(object sender, EventArgs e)
protected void CmdOK_Click(object sender, EventArgs e)
protected void CmdTestValidate_Click(object sender, EventArgs e)
protected void Dispose(bool disposing)
protected void LstStandardExpressions_SelectedIndexChanged(object sender, EventArgs e)
protected void RegexTypeEditor_Activated(object sender, EventArgs e)
protected void TxtExpression_Changed(object sender, EventArgs e)
public void .ctor(ISite site)
}
public System.Web.UI.Design.WebControls.RegexTypeEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.Web.UI.Design.WebControls.RepeaterDesigner : ControlDesigner {
private string data_member
private string data_source
public string DataMember
public string DataSource
protected bool TemplatesExist
public IDataSourceDesigner DataSourceDesigner
public string DataSourceID
public DesignerDataSourceView DesignerView
public string get_DataMember()
public void set_DataMember(string value)
public string get_DataSource()
public void set_DataSource(string value)
protected bool get_TemplatesExist()
protected void Dispose(bool disposing)
protected IEnumerable GetDesignTimeDataSource(int minimumRows)
protected IEnumerable GetDesignTimeDataSource(IEnumerable selectedDataSource, int minimumRows)
public string GetDesignTimeHtml()
protected string GetEmptyDesignTimeHtml()
protected string GetErrorDesignTimeHtml(Exception e)
public IEnumerable GetResolvedSelectedDataSource()
public object GetSelectedDataSource()
public void Initialize(IComponent component)
public void OnComponentChanged(object source, ComponentChangedEventArgs ce)
protected internal void OnDataSourceChanged()
protected void PreFilterProperties(IDictionary properties)
public IDataSourceDesigner get_DataSourceDesigner()
public string get_DataSourceID()
public void set_DataSourceID(string value)
public DesignerDataSourceView get_DesignerView()
}
public System.Web.UI.Design.WebControls.RoleGroupCollectionEditor : CollectionEditor {
public void .ctor(Type type)
}
public System.Web.UI.Design.WebControls.SiteMapDataSourceDesigner : HierarchicalDataSourceDesigner {
private bool System.Web.UI.Design.IDataSourceDesigner.get_CanConfigure()
private bool System.Web.UI.Design.IDataSourceDesigner.get_CanRefreshSchema()
private void System.Web.UI.Design.IDataSourceDesigner.add_DataSourceChanged(EventHandler value)
private void System.Web.UI.Design.IDataSourceDesigner.remove_DataSourceChanged(EventHandler value)
private void System.Web.UI.Design.IDataSourceDesigner.add_SchemaRefreshed(EventHandler value)
private void System.Web.UI.Design.IDataSourceDesigner.remove_SchemaRefreshed(EventHandler value)
public String[] GetViewNames()
private void System.Web.UI.Design.IDataSourceDesigner.Configure()
private DesignerDataSourceView System.Web.UI.Design.IDataSourceDesigner.GetView(string viewName)
private String[] System.Web.UI.Design.IDataSourceDesigner.GetViewNames()
private void System.Web.UI.Design.IDataSourceDesigner.RefreshSchema(bool preferSilent)
private void System.Web.UI.Design.IDataSourceDesigner.ResumeDataSourceEvents()
private void System.Web.UI.Design.IDataSourceDesigner.SuppressDataSourceEvents()
}
public System.Web.UI.Design.WebControls.SiteMapDesignerDataSourceView : DesignerDataSourceView {
public void .ctor(SiteMapDataSourceDesigner owner, string viewName)
}
public System.Web.UI.Design.WebControls.SiteMapDesignerHierarchicalDataSourceView : DesignerHierarchicalDataSourceView {
public void .ctor(SiteMapDataSourceDesigner owner, string viewPath)
}
public System.Web.UI.Design.WebControls.SqlDataSourceDesigner : DataSourceDesigner {
public string ConnectionString
public DataSourceOperation DeleteQuery
public DataSourceOperation InsertQuery
public string ProviderName
public string SelectCommand
public DataSourceOperation SelectQuery
public DataSourceOperation UpdateQuery
public string get_ConnectionString()
public void set_ConnectionString(string value)
public DataSourceOperation get_DeleteQuery()
public void set_DeleteQuery(DataSourceOperation value)
public DataSourceOperation get_InsertQuery()
public void set_InsertQuery(DataSourceOperation value)
public string get_ProviderName()
public void set_ProviderName(string value)
public string get_SelectCommand()
public void set_SelectCommand(string value)
public DataSourceOperation get_SelectQuery()
public void set_SelectQuery(DataSourceOperation value)
public DataSourceOperation get_UpdateQuery()
public void set_UpdateQuery(DataSourceOperation value)
}
public System.Web.UI.Design.WebControls.SqlDesignerDataSourceView : DesignerDataSourceView {
public void .ctor(SqlDataSourceDesigner owner, string viewName)
}
public System.Web.UI.Design.WebControls.StyleCollectionEditor : CollectionEditor {
public void .ctor(Type type)
}
public System.Web.UI.Design.WebControls.SubMenuStyleCollectionEditor : CollectionEditor {
public void .ctor(Type type)
}
public System.Web.UI.Design.WebControls.TableCellsCollectionEditor : CollectionEditor {
public void .ctor(Type type)
protected bool CanSelectMultipleInstances()
protected object CreateInstance(Type itemType)
}
public System.Web.UI.Design.WebControls.TableDesigner : ControlDesigner {
public string GetDesignTimeHtml()
public string GetPersistInnerHtml()
}
public System.Web.UI.Design.WebControls.TableRowsCollectionEditor : CollectionEditor {
public void .ctor(Type type)
protected bool CanSelectMultipleInstances()
protected object CreateInstance(Type itemType)
}
public System.Web.UI.Design.WebControls.TreeNodeStyleCollectionEditor : StyleCollectionEditor {
public void .ctor(Type type)
}
public System.Web.UI.Design.WebControls.ViewDesigner : ContainerControlDesigner {
protected bool NoWrap
protected bool get_NoWrap()
}
public System.Web.UI.Design.WebControls.WizardStepCollectionEditor : CollectionEditor {
public void .ctor(Type type)
}
public System.Web.UI.Design.WebControls.WizardStepEditableRegion : EditableDesignerRegion {
public WizardStepBase Step
public void .ctor(WizardDesigner designer, WizardStepBase wizardStep)
public WizardStepBase get_Step()
}
public System.Web.UI.Design.WebControls.WizardStepTemplatedEditableRegion : TemplatedEditableDesignerRegion {
public WizardStepBase Step
public void .ctor(TemplateDefinition templateDefinition, WizardStepBase wizardStep)
public WizardStepBase get_Step()
}
public System.Web.UI.Design.WebControls.XmlDataSourceDesigner : HierarchicalDataSourceDesigner {
public string Data
public string DataFile
public string Transform
public string TransformFile
public string XPath
public string get_Data()
public void set_Data(string value)
public string get_DataFile()
public void set_DataFile(string value)
private bool System.Web.UI.Design.IDataSourceDesigner.get_CanConfigure()
private bool System.Web.UI.Design.IDataSourceDesigner.get_CanRefreshSchema()
public string get_Transform()
public void set_Transform(string value)
public string get_TransformFile()
public void set_TransformFile(string value)
public string get_XPath()
public void set_XPath(string value)
private void System.Web.UI.Design.IDataSourceDesigner.add_DataSourceChanged(EventHandler value)
private void System.Web.UI.Design.IDataSourceDesigner.remove_DataSourceChanged(EventHandler value)
private void System.Web.UI.Design.IDataSourceDesigner.add_SchemaRefreshed(EventHandler value)
private void System.Web.UI.Design.IDataSourceDesigner.remove_SchemaRefreshed(EventHandler value)
private void System.Web.UI.Design.IDataSourceDesigner.Configure()
private DesignerDataSourceView System.Web.UI.Design.IDataSourceDesigner.GetView(string viewName)
private String[] System.Web.UI.Design.IDataSourceDesigner.GetViewNames()
private void System.Web.UI.Design.IDataSourceDesigner.RefreshSchema(bool preferSilent)
private void System.Web.UI.Design.IDataSourceDesigner.ResumeDataSourceEvents()
private void System.Web.UI.Design.IDataSourceDesigner.SuppressDataSourceEvents()
}
public System.Web.UI.Design.WebControls.XmlDesigner : ControlDesigner {
protected void Dispose(bool disposing)
public string GetDesignTimeHtml()
protected string GetEmptyDesignTimeHtml()
public void Initialize(IComponent component)
}
public System.Web.UI.Design.WebControls.XmlDesignerDataSourceView : DesignerDataSourceView {
public void .ctor(XmlDataSourceDesigner owner, string viewName)
}
public System.Web.UI.Design.WebControls.XmlDesignerHierarchicalDataSourceView : DesignerHierarchicalDataSourceView {
public void .ctor(XmlDataSourceDesigner owner, string viewPath)
}
public System.Web.UI.Design.WebControlToolboxItem : ToolboxItem {
private int persistChildren
private string toolData
public void .ctor(Type type)
protected void .ctor(SerializationInfo info, StreamingContext context)
protected IComponent[] CreateComponentsCore(IDesignerHost host)
protected void Serialize(SerializationInfo info, StreamingContext context)
protected void Deserialize(SerializationInfo info, StreamingContext context)
public void Initialize(Type type)
public object GetToolAttributeValue(IDesignerHost host, Type attributeType)
public string GetToolHtml(IDesignerHost host)
public Type GetToolType(IDesignerHost host)
}
public System.Web.UI.Design.WebFormsDesignerActionService : DesignerActionService {
public void .ctor(IServiceProvider serviceProvider)
protected void GetComponentDesignerActions(IComponent component, DesignerActionListCollection actionLists)
}
public System.Web.UI.Design.WebFormsReferenceManager : object {
public ICollection GetRegisterDirectives()
public string GetTagPrefix(Type objectType)
public Type GetType(string tagPrefix, string tagName)
public string GetUserControlPath(string tagPrefix, string tagName)
public string RegisterTagPrefix(Type objectType)
}
public System.Web.UI.Design.WebFormsRootDesigner : object {
private EventHandler LoadComplete
public string DocumentUrl
public bool IsDesignerViewLocked
public bool IsLoading
public WebFormsReferenceManager ReferenceManager
public IComponent Component
public CultureInfo CurrentCulture
protected ViewTechnology[] SupportedTechnologies
protected DesignerVerbCollection Verbs
private DesignerVerbCollection System.ComponentModel.Design.IDesigner.Verbs
private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies
protected void Finalize()
public void add_LoadComplete(EventHandler value)
public void remove_LoadComplete(EventHandler value)
public string get_DocumentUrl()
public bool get_IsDesignerViewLocked()
public bool get_IsLoading()
public WebFormsReferenceManager get_ReferenceManager()
public void AddClientScriptToDocument(ClientScriptItem scriptItem)
public string AddControlToDocument(Control newControl, Control referenceControl, ControlLocation location)
public ClientScriptItemCollection GetClientScriptsInDocument()
protected internal void GetControlViewAndTag(Control control, IControlDesignerView& view, IControlDesignerTag& tag)
public void RemoveClientScriptFromDocument(string clientScriptId)
public void RemoveControlFromDocument(Control control)
public IComponent get_Component()
public void set_Component(IComponent value)
public CultureInfo get_CurrentCulture()
protected ViewTechnology[] get_SupportedTechnologies()
protected DesignerVerbCollection get_Verbs()
protected DesignerActionService CreateDesignerActionService(IServiceProvider serviceProvider)
protected IUrlResolutionService CreateUrlResolutionService()
protected void Dispose(bool disposing)
public string GenerateEmptyDesignTimeHtml(Control control)
public string GenerateErrorDesignTimeHtml(Control control, Exception e, string errorMessage)
protected internal object GetService(Type serviceType)
protected object GetView(ViewTechnology viewTechnology)
public void Initialize(IComponent component)
protected void OnLoadComplete(EventArgs e)
protected void PostFilterAttributes(IDictionary attributes)
protected void PostFilterEvents(IDictionary events)
protected void PostFilterProperties(IDictionary properties)
protected void PreFilterAttributes(IDictionary attributes)
protected void PreFilterEvents(IDictionary events)
protected void PreFilterProperties(IDictionary properties)
public string ResolveUrl(string relativeUrl)
public void SetControlID(Control control, string id)
private DesignerVerbCollection System.ComponentModel.Design.IDesigner.get_Verbs()
private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies()
private void System.ComponentModel.Design.IDesigner.DoDefaultAction()
private void System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary attributes)
private void System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary events)
private void System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary properties)
private void System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary attributes)
private void System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary events)
private void System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary properties)
private object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology viewTechnology)
private void System.IDisposable.Dispose()
}
public System.Web.UI.Design.XmlDataFileEditor : UrlEditor {
protected string Caption
protected string Filter
protected string get_Caption()
protected string get_Filter()
}
public System.Web.UI.Design.XmlDocumentSchema : object {
public void .ctor(XmlDocument xmlDocument, string xPath)
public IDataSourceViewSchema[] GetViews()
}
public System.Web.UI.Design.XmlFileEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.Web.UI.Design.XmlUrlEditor : UrlEditor {
protected string Caption
protected string Filter
protected UrlBuilderOptions Options
protected string get_Caption()
protected string get_Filter()
protected UrlBuilderOptions get_Options()
}
public System.Web.UI.Design.XsdSchemaFileEditor : UrlEditor {
protected string Caption
protected string Filter
protected string get_Caption()
protected string get_Filter()
}
public System.Web.UI.Design.XslTransformFileEditor : UrlEditor {
protected string Caption
protected string Filter
protected string get_Caption()
protected string get_Filter()
}
public System.Web.UI.Design.XslUrlEditor : UrlEditor {
protected string Caption
protected string Filter
protected UrlBuilderOptions Options
protected string get_Caption()
protected string get_Filter()
protected UrlBuilderOptions get_Options()
}
public System.Windows.Forms.Design.AnchorEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
internal System.Windows.Forms.Design.AnchorSelector : UserControl {
private IContainer components
private AnchorStyles styles
public AnchorStyles AnchorStyles
protected void Dispose(bool disposing)
private void InitializeComponent()
public AnchorStyles get_AnchorStyles()
public void .ctor(IWindowsFormsEditorService editor_service, AnchorStyles startup)
private void PaintState(Graphics g, int x1, int y1, int x2, int y2, AnchorStyles v)
protected void OnPaint(PaintEventArgs e)
protected void OnClick(EventArgs ee)
protected void OnDoubleClick(EventArgs ee)
}
public System.Windows.Forms.Design.AxImporter : object {
internal Options options
public String[] GeneratedAssemblies
public String[] GeneratedSources
public TYPELIBATTR[] GeneratedTypeLibAttributes
public void .ctor(Options options)
public String[] get_GeneratedAssemblies()
public String[] get_GeneratedSources()
public TYPELIBATTR[] get_GeneratedTypeLibAttributes()
public string GenerateFromFile(FileInfo file)
public string GenerateFromTypeLibrary(UCOMITypeLib typeLib)
public string GenerateFromTypeLibrary(UCOMITypeLib typeLib, Guid clsid)
public string GetFileOfTypeLib(TYPELIBATTR& tlibattr)
}
public System.Windows.Forms.Design.AxParameterData : object {
private bool isByRef
private bool isIn
private bool isOptional
private bool isOut
private string name
private Type type
public FieldDirection Direction
public bool IsByRef
public bool IsIn
public bool IsOptional
public bool IsOut
public string Name
public Type ParameterType
public string TypeName
public void .ctor(ParameterInfo info)
public void .ctor(ParameterInfo info, bool ignoreByRefs)
public void .ctor(string inname, string typeName)
public void .ctor(string inname, Type type)
public AxParameterData[] Convert(ParameterInfo[] infos)
public AxParameterData[] Convert(ParameterInfo[] infos, bool ignoreByRefs)
public FieldDirection get_Direction()
public bool get_IsByRef()
public bool get_IsIn()
public bool get_IsOptional()
public bool get_IsOut()
public string get_Name()
public void set_Name(string value)
public Type get_ParameterType()
public string get_TypeName()
}
public System.Windows.Forms.Design.AxWrapperGen : object {
public ArrayList GeneratedSources
public void .ctor(Type axType)
}
public System.Windows.Forms.Design.Behavior.Adorner : object {
public BehaviorService BehaviorService
public bool Enabled
public GlyphCollection Glyphs
public void Invalidate()
public void Invalidate(Rectangle rectangle)
public void Invalidate(Region region)
public BehaviorService get_BehaviorService()
public void set_BehaviorService(BehaviorService value)
public bool get_Enabled()
public void set_Enabled(bool value)
public GlyphCollection get_Glyphs()
}
public System.Windows.Forms.Design.Behavior.Behavior : object {
public Cursor Cursor
public bool DisableAllCommands
protected void .ctor(bool callParentBehavior, BehaviorService behaviorService)
public Cursor get_Cursor()
public bool get_DisableAllCommands()
public MenuCommand FindCommand(CommandID commandId)
public void OnDragDrop(Glyph g, DragEventArgs e)
public void OnDragEnter(Glyph g, DragEventArgs e)
public void OnDragLeave(Glyph g, EventArgs e)
public void OnDragOver(Glyph g, DragEventArgs e)
public void OnGiveFeedback(Glyph g, GiveFeedbackEventArgs e)
public void OnLoseCapture(Glyph g, EventArgs e)
public bool OnMouseDoubleClick(Glyph g, MouseButtons button, Point mouseLoc)
public bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc)
public bool OnMouseEnter(Glyph g)
public bool OnMouseHover(Glyph g, Point mouseLoc)
public bool OnMouseLeave(Glyph g)
public bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc)
public bool OnMouseUp(Glyph g, MouseButtons button)
public void OnQueryContinueDrag(Glyph g, QueryContinueDragEventArgs e)
}
public System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs : EventArgs {
private ICollection components
public ICollection DragComponents
public void .ctor(ICollection dragComponents)
public ICollection get_DragComponents()
}
public System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, BehaviorDragDropEventArgs e)
public IAsyncResult BeginInvoke(object sender, BehaviorDragDropEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.Design.Behavior.BehaviorService : object {
private BehaviorDragDropEventHandler BeginDrag
private BehaviorDragDropEventHandler EndDrag
private EventHandler Synchronize
public BehaviorServiceAdornerCollection Adorners
public Graphics AdornerWindowGraphics
public Behavior CurrentBehavior
public void add_BeginDrag(BehaviorDragDropEventHandler value)
public void remove_BeginDrag(BehaviorDragDropEventHandler value)
public void add_EndDrag(BehaviorDragDropEventHandler value)
public void remove_EndDrag(BehaviorDragDropEventHandler value)
public void add_Synchronize(EventHandler value)
public void remove_Synchronize(EventHandler value)
public BehaviorServiceAdornerCollection get_Adorners()
public Graphics get_AdornerWindowGraphics()
public Behavior get_CurrentBehavior()
public Point AdornerWindowPointToScreen(Point p)
public Point AdornerWindowToScreen()
public Rectangle ControlRectInAdornerWindow(Control c)
public Point ControlToAdornerWindow(Control c)
public void Dispose()
public Behavior GetNextBehavior(Behavior behavior)
public void Invalidate()
public void Invalidate(Rectangle rect)
public void Invalidate(Region r)
public Point MapAdornerWindowPoint(IntPtr handle, Point pt)
public Behavior PopBehavior(Behavior behavior)
public void PushBehavior(Behavior behavior)
public void PushCaptureBehavior(Behavior behavior)
public Point ScreenToAdornerWindow(Point p)
public void SyncSelection()
}
public System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection : CollectionBase {
private int state
internal int State
public Adorner Item
public void .ctor(BehaviorService behaviorService)
public void .ctor(Adorner[] value)
public void .ctor(BehaviorServiceAdornerCollection value)
internal int get_State()
public Adorner get_Item(int index)
public void set_Item(int index, Adorner value)
public int Add(Adorner value)
public void AddRange(Adorner[] value)
public void AddRange(BehaviorServiceAdornerCollection value)
public bool Contains(Adorner value)
public void CopyTo(Adorner[] array, int index)
public int IndexOf(Adorner value)
public BehaviorServiceAdornerCollectionEnumerator GetEnumerator()
public void Insert(int index, Adorner value)
public void Remove(Adorner value)
}
public System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator : object {
private BehaviorServiceAdornerCollection mappings
private int index
private int state
public Adorner Current
private object System.Collections.IEnumerator.Current
public void .ctor(BehaviorServiceAdornerCollection mappings)
public Adorner get_Current()
private void CheckState()
public bool MoveNext()
public void Reset()
private object System.Collections.IEnumerator.get_Current()
private bool System.Collections.IEnumerator.MoveNext()
private void System.Collections.IEnumerator.Reset()
}
public System.Windows.Forms.Design.Behavior.ComponentGlyph : Glyph {
private IComponent component
public IComponent RelatedComponent
public void .ctor(IComponent relatedComponent)
public void .ctor(IComponent relatedComponent, Behavior behavior)
public IComponent get_RelatedComponent()
public Cursor GetHitTest(Point p)
public void Paint(PaintEventArgs pe)
}
public System.Windows.Forms.Design.Behavior.ControlBodyGlyph : ComponentGlyph {
private Rectangle bounds
public Rectangle Bounds
public void .ctor(Rectangle bounds, Cursor cursor, IComponent relatedComponent, Behavior behavior)
public void .ctor(Rectangle bounds, Cursor cursor, IComponent relatedComponent, ControlDesigner designer)
public Rectangle get_Bounds()
public Cursor GetHitTest(Point p)
}
public System.Windows.Forms.Design.Behavior.Glyph : object {
private Behavior behavior
public Behavior Behavior
public Rectangle Bounds
protected void .ctor(Behavior behavior)
public Behavior get_Behavior()
public Rectangle get_Bounds()
public Cursor GetHitTest(Point p)
public void Paint(PaintEventArgs pe)
protected void SetBehavior(Behavior behavior)
}
public System.Windows.Forms.Design.Behavior.GlyphCollection : CollectionBase {
public Glyph Item
public void .ctor(Glyph[] value)
public void .ctor(GlyphCollection value)
public Glyph get_Item(int index)
public void set_Item(int index, Glyph value)
public int Add(Glyph value)
public void AddRange(Glyph[] value)
public void AddRange(GlyphCollection value)
public bool Contains(Glyph value)
public void CopyTo(Glyph[] array, int index)
public int IndexOf(Glyph value)
public void Insert(int index, Glyph value)
public void Remove(Glyph value)
}
public System.Windows.Forms.Design.Behavior.GlyphSelectionType : Enum {
public int value__
public GlyphSelectionType NotSelected
public GlyphSelectionType Selected
public GlyphSelectionType SelectedPrimary
}
public System.Windows.Forms.Design.Behavior.SnapLine : object {
private SnapLineType type
private int offset
private string filter
private SnapLinePriority priority
public string Filter
public bool IsHorizontal
public bool IsVertical
public int Offset
public SnapLinePriority Priority
public SnapLineType SnapLineType
public bool ShouldSnap(SnapLine line1, SnapLine line2)
public void .ctor(SnapLineType type, int offset)
public void .ctor(SnapLineType type, int offset, string filter)
public void .ctor(SnapLineType type, int offset, SnapLinePriority priority)
public void .ctor(SnapLineType type, int offset, string filter, SnapLinePriority priority)
public string get_Filter()
public bool get_IsHorizontal()
public bool get_IsVertical()
public int get_Offset()
public SnapLinePriority get_Priority()
public SnapLineType get_SnapLineType()
public void AdjustOffset(int adjustment)
public string ToString()
}
public System.Windows.Forms.Design.Behavior.SnapLinePriority : Enum {
public int value__
public SnapLinePriority Low
public SnapLinePriority Medium
public SnapLinePriority High
public SnapLinePriority Always
}
public System.Windows.Forms.Design.Behavior.SnapLineType : Enum {
public int value__
public SnapLineType Top
public SnapLineType Bottom
public SnapLineType Left
public SnapLineType Right
public SnapLineType Horizontal
public SnapLineType Vertical
public SnapLineType Baseline
}
public System.Windows.Forms.Design.BorderSidesEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.Windows.Forms.Design.ComponentDocumentDesigner : ComponentDesigner {
private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies
private bool System.Windows.Forms.Design.IOleDragClient.CanModifyComponents
private IComponent System.Windows.Forms.Design.IOleDragClient.Component
public Control Control
public bool TrayAutoArrange
public bool TrayLargeIcon
private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies()
private object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology technology)
private bool System.Drawing.Design.IToolboxUser.GetToolSupported(ToolboxItem tool)
private void System.Drawing.Design.IToolboxUser.ToolPicked(ToolboxItem tool)
private bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(IComponent component, IDictionary attributes)
private bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(IComponent component, IDictionary events)
private bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(IComponent component, IDictionary properties)
private bool System.Windows.Forms.Design.IOleDragClient.AddComponent(IComponent component, string name, bool firstAdd)
private bool System.Windows.Forms.Design.IOleDragClient.get_CanModifyComponents()
private Control System.Windows.Forms.Design.IOleDragClient.GetControlForComponent(object component)
private Control System.Windows.Forms.Design.IOleDragClient.GetDesignerControl()
private bool System.Windows.Forms.Design.IOleDragClient.IsDropOk(IComponent component)
private IComponent System.Windows.Forms.Design.IOleDragClient.get_Component()
public Control get_Control()
public bool get_TrayAutoArrange()
public void set_TrayAutoArrange(bool value)
public bool get_TrayLargeIcon()
public void set_TrayLargeIcon(bool value)
public void Initialize(IComponent component)
protected void Dispose(bool disposing)
protected bool GetToolSupported(ToolboxItem tool)
protected void PreFilterProperties(IDictionary properties)
}
public System.Windows.Forms.Design.ComponentTray : ScrollableControl {
private IServiceProvider _serviceProvider
private IDesigner _mainDesigner
private bool _showLargeIcons
private bool _autoArrange
public bool AutoArrange
public int ComponentCount
public bool ShowLargeIcons
public void .ctor(IDesigner mainDesigner, IServiceProvider serviceProvider)
public bool get_AutoArrange()
public void set_AutoArrange(bool value)
public int get_ComponentCount()
public bool get_ShowLargeIcons()
public void set_ShowLargeIcons(bool value)
public void AddComponent(IComponent component)
protected bool CanCreateComponentFromTool(ToolboxItem tool)
protected bool CanDisplayComponent(IComponent component)
public void CreateComponentFromTool(ToolboxItem tool)
protected void DisplayError(Exception e)
protected void Dispose(bool disposing)
public Point GetLocation(IComponent receiver)
public void SetLocation(IComponent receiver, Point location)
public IComponent GetNextComponent(IComponent component, bool forward)
public Point GetTrayLocation(IComponent receiver)
public bool IsTrayComponent(IComponent comp)
public void SetTrayLocation(IComponent receiver, Point location)
protected void OnMouseDoubleClick(MouseEventArgs e)
protected void OnDragDrop(DragEventArgs de)
protected void OnDragEnter(DragEventArgs de)
protected void OnDragLeave(EventArgs e)
protected void OnDragOver(DragEventArgs de)
protected void OnGiveFeedback(GiveFeedbackEventArgs gfevent)
protected void OnLayout(LayoutEventArgs levent)
protected void OnLostCapture()
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseMove(MouseEventArgs e)
protected void OnMouseUp(MouseEventArgs e)
protected void OnPaint(PaintEventArgs pe)
protected void OnSetCursor()
public void RemoveComponent(IComponent component)
protected void WndProc(Message& m)
private bool System.ComponentModel.IExtenderProvider.CanExtend(object component)
protected object GetService(Type serviceType)
}
internal System.Windows.Forms.Design.ControlBindingsConverter : TypeConverter {
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
public bool GetPropertiesSupported(ITypeDescriptorContext context)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
internal System.Windows.Forms.Design.ControlCodeDomSerializer : ComponentCodeDomSerializer {
public object Serialize(IDesignerSerializationManager manager, object value)
}
internal System.Windows.Forms.Design.ControlDataObject : object {
private object _data
private string _format
public void .ctor(Control control)
public void .ctor(Control[] controls)
public object GetData(Type format)
public object GetData(string format)
public object GetData(string format, bool autoConvert)
public bool GetDataPresent(Type format)
public bool GetDataPresent(string format)
public bool GetDataPresent(string format, bool autoConvert)
public String[] GetFormats()
public String[] GetFormats(bool autoConvert)
public void SetData(object data)
public void SetData(Type format, object data)
public void SetData(string format, object data)
public void SetData(string format, bool autoConvert, object data)
private bool ValidateFormat(string format)
}
public System.Windows.Forms.Design.ControlDesigner : ComponentDesigner {
private WndProcRouter _messageRouter
private bool _locked
private bool _mouseDown
private bool _mouseMoveAfterMouseDown
private bool _mouseDownFirstMove
private bool _firstMouseMoveInClient
protected Point InvalidPoint
protected AccessibleObject accessibilityObj
private MouseButtons _mouseButtonDown
protected internal BehaviorService BehaviorService
public Control Control
protected bool EnableDragRect
public SelectionRules SelectionRules
public ICollection AssociatedComponents
protected IComponent ParentComponent
public AccessibleObject AccessibilityObject
internal MouseButtons MouseButtonDown
private bool Visible
private bool Enabled
private bool Locked
private bool AllowDrop
private string Name
private ContextMenu ContextMenu
private Point Location
protected InheritanceAttribute InheritanceAttribute
public IList SnapLines
public bool ParticipatesWithSnapLines
public bool AutoResizeHandles
public void Initialize(IComponent component)
public void OnSetComponentDefaults()
protected internal BehaviorService get_BehaviorService()
public Control get_Control()
protected bool get_EnableDragRect()
public SelectionRules get_SelectionRules()
public ICollection get_AssociatedComponents()
protected IComponent get_ParentComponent()
public AccessibleObject get_AccessibilityObject()
protected void DefWndProc(Message& m)
protected void BaseWndProc(Message& m)
private void System.Windows.Forms.Design.IMessageReceiver.WndProc(Message& m)
protected void WndProc(Message& m)
protected bool GetHitTest(Point point)
private bool IsMouseMessage(Msg msg)
protected void OnSetCursor()
private void OnMouseDoubleClick()
internal void OnMouseDown(int x, int y)
internal void OnMouseMove(int x, int y)
internal void OnMouseUp()
protected void OnContextMenu(int x, int y)
protected void OnMouseEnter()
protected void OnMouseHover()
protected void OnMouseLeave()
protected void OnCreateHandle()
protected void OnPaintAdornments(PaintEventArgs pe)
internal MouseButtons get_MouseButtonDown()
protected void OnMouseDragBegin(int x, int y)
protected void OnMouseDragMove(int x, int y)
protected void OnMouseDragEnd(bool cancel)
protected void HookChildControls(Control firstChild)
protected void UnhookChildControls(Control firstChild)
public bool CanBeParentedTo(IDesigner parentDesigner)
protected void DisplayError(Exception e)
protected void EnableDragDrop(bool value)
private void OnGiveFeedback(object sender, GiveFeedbackEventArgs e)
private void OnDragDrop(object sender, DragEventArgs e)
private void OnDragEnter(object sender, DragEventArgs e)
private void OnDragLeave(object sender, EventArgs e)
private void OnDragOver(object sender, DragEventArgs e)
protected void OnGiveFeedback(GiveFeedbackEventArgs e)
protected void OnDragDrop(DragEventArgs de)
protected void OnDragEnter(DragEventArgs de)
protected void OnDragLeave(EventArgs e)
protected void OnDragOver(DragEventArgs de)
protected void PreFilterProperties(IDictionary properties)
private bool get_Visible()
private void set_Visible(bool value)
private bool get_Enabled()
private void set_Enabled(bool value)
private bool get_Locked()
private void set_Locked(bool value)
private bool get_AllowDrop()
private void set_AllowDrop(bool value)
private string get_Name()
private void set_Name(string value)
private ContextMenu get_ContextMenu()
private void set_ContextMenu(ContextMenu value)
private Point get_Location()
private void set_Location(Point value)
internal object GetValue(object component, string propertyName)
internal object GetValue(object component, string propertyName, Type propertyType)
internal void SetValue(object component, string propertyName, object value)
protected void Dispose(bool disposing)
public ControlDesigner InternalControlDesigner(int internalControlIndex)
public int NumberOfInternalControlDesigners()
protected bool EnableDesignMode(Control child, string name)
protected ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType)
public GlyphCollection GetGlyphs(GlyphSelectionType selectionType)
public void InitializeExistingComponent(IDictionary defaultValues)
public void InitializeNewComponent(IDictionary defaultValues)
protected void OnDragComplete(DragEventArgs de)
protected InheritanceAttribute get_InheritanceAttribute()
public IList get_SnapLines()
public bool get_ParticipatesWithSnapLines()
public bool get_AutoResizeHandles()
public void set_AutoResizeHandles(bool value)
}
internal System.Windows.Forms.Design.DefaultMenuCommands : object {
private IServiceProvider _serviceProvider
private string DT_DATA_FORMAT
private object _clipboard
public void .ctor(IServiceProvider serviceProvider)
public void AddTo(IMenuCommandService commands)
private void Copy(object sender, EventArgs args)
private void Paste(object sender, EventArgs args)
private void Cut(object sender, EventArgs args)
private void Delete(object sender, EventArgs args)
private void SelectAll(object sender, EventArgs args)
private object GetService(Type serviceType)
}
public System.Windows.Forms.Design.DesignerOptions : object {
public bool EnableInSituEditing
public Size GridSize
public bool ObjectBoundSmartTagAutoShow
public bool ShowGrid
public bool SnapToGrid
public bool UseOptimizedCodeGeneration
public bool UseSmartTags
public bool UseSnapLines
public bool get_EnableInSituEditing()
public void set_EnableInSituEditing(bool value)
public Size get_GridSize()
public void set_GridSize(Size value)
public bool get_ObjectBoundSmartTagAutoShow()
public void set_ObjectBoundSmartTagAutoShow(bool value)
public bool get_ShowGrid()
public void set_ShowGrid(bool value)
public bool get_SnapToGrid()
public void set_SnapToGrid(bool value)
public bool get_UseOptimizedCodeGeneration()
public void set_UseOptimizedCodeGeneration(bool value)
public bool get_UseSmartTags()
public void set_UseSmartTags(bool value)
public bool get_UseSnapLines()
public void set_UseSnapLines(bool value)
}
public System.Windows.Forms.Design.DockEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
public System.Windows.Forms.Design.DocumentDesigner : ScrollableControlDesigner {
private DesignerViewFrame _designerViewFrame
protected IMenuEditorService menuEditorService
private DesignerViewFrame View
private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies
public SelectionRules SelectionRules
private Color BackColor
private Point Location
private DesignerViewFrame get_View()
public void Initialize(IComponent component)
private void InitializeSelectionService()
protected void Dispose(bool disposing)
public GlyphCollection GetGlyphs(GlyphSelectionType selectionType)
protected void WndProc(Message& m)
protected void OnContextMenu(int x, int y)
protected void OnCreateHandle()
private void OnComponentAdded(object sender, ComponentEventArgs args)
private void OnComponentRemoved(object sender, ComponentEventArgs args)
private object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology technology)
private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies()
private bool System.Drawing.Design.IToolboxUser.GetToolSupported(ToolboxItem tool)
protected bool GetToolSupported(ToolboxItem tool)
private void System.Drawing.Design.IToolboxUser.ToolPicked(ToolboxItem tool)
protected void ToolPicked(ToolboxItem tool)
public SelectionRules get_SelectionRules()
protected void PreFilterProperties(IDictionary properties)
private Color get_BackColor()
private void set_BackColor(Color value)
private Point get_Location()
private void set_Location(Point value)
protected void EnsureMenuEditorService(IComponent c)
}
public System.Windows.Forms.Design.EventHandlerService : object {
private EventHandler EventHandlerChanged
private Control _focusWnd
public Control FocusWindow
public void add_EventHandlerChanged(EventHandler value)
public void remove_EventHandlerChanged(EventHandler value)
public void .ctor(Control focusWnd)
public object GetHandler(Type handlerType)
public void PopHandler(object handler)
public void PushHandler(object handler)
public Control get_FocusWindow()
}
public System.Windows.Forms.Design.FileNameEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
protected void InitializeDialog(OpenFileDialog openFileDialog)
}
public System.Windows.Forms.Design.FolderNameEditor : UITypeEditor {
private FolderBrowser folderBrowser
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
protected void InitializeDialog(FolderBrowser folderBrowser)
}
internal System.Windows.Forms.Design.FormDocumentDesigner : DocumentDesigner {
public void Initialize(IComponent component)
public bool CanParent(Control control)
protected void WndProc(Message& m)
}
public System.Windows.Forms.Design.IContainsThemedScrollbarWindows {
public IEnumerable ThemedScrollbarWindows()
}
internal System.Windows.Forms.Design.ImageCollectionEditor : CollectionEditor {
public void .ctor(Type type)
}
public System.Windows.Forms.Design.ImageListCodeDomSerializer : CodeDomSerializer {
public object Deserialize(IDesignerSerializationManager manager, object codeObject)
public object Serialize(IDesignerSerializationManager manager, object value)
}
public System.Windows.Forms.Design.IMenuEditorService {
public Menu GetMenu()
public bool IsActive()
public bool MessageFilter(Message& m)
public void SetMenu(Menu menu)
public void SetSelection(MenuItem item)
}
internal System.Windows.Forms.Design.IMessageReceiver {
public void WndProc(Message& m)
}
internal System.Windows.Forms.Design.IOleDragClient {
public bool CanModifyComponents
public IComponent Component
public bool AddComponent(IComponent component, string name, bool firstAdd)
public Control GetControlForComponent(object component)
public Control GetDesignerControl()
public bool IsDropOk(IComponent component)
public bool get_CanModifyComponents()
public IComponent get_Component()
}
internal System.Windows.Forms.Design.ISelectionUIHandler {
public bool BeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY)
public void DragMoved(Object[] components, Rectangle offset)
public void EndDrag(Object[] components, bool cancel)
public Rectangle GetComponentBounds(object component)
public SelectionRules GetComponentRules(object component)
public Rectangle GetSelectionClipRect(object component)
public void OleDragDrop(DragEventArgs de)
public void OleDragEnter(DragEventArgs de)
public void OleDragLeave()
public void OleDragOver(DragEventArgs de)
public void OnSelectionDoubleClick(IComponent component)
public bool QueryBeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY)
public void ShowContextMenu(IComponent component)
}
internal System.Windows.Forms.Design.IUISelectionService {
public bool SelectionInProgress
public bool DragDropInProgress
public bool ResizeInProgress
public Rectangle SelectionBounds
public bool get_SelectionInProgress()
public bool get_DragDropInProgress()
public bool get_ResizeInProgress()
public Rectangle get_SelectionBounds()
public void MouseDragBegin(Control container, int x, int y)
public void MouseDragMove(int x, int y)
public void MouseDragEnd(bool cancel)
public void DragBegin()
public void DragOver(Control container, int x, int y)
public void DragDrop(bool cancel, Control container, int x, int y)
public void PaintAdornments(Control container, Graphics gfx)
public bool SetCursor(int x, int y)
public bool AdornmentsHitTest(Control control, int x, int y)
}
internal System.Windows.Forms.Design.ListControlStringCollectionEditor : StringCollectionEditor {
public void .ctor(Type type)
}
public System.Windows.Forms.Design.MaskDescriptor : object {
public CultureInfo Culture
public string Mask
public string Name
public string Sample
public Type ValidatingType
public CultureInfo get_Culture()
public string get_Mask()
public string get_Name()
public string get_Sample()
public Type get_ValidatingType()
public bool Equals(object maskDescriptor)
public int GetHashCode()
public bool IsValidMaskDescriptor(MaskDescriptor maskDescriptor)
public bool IsValidMaskDescriptor(MaskDescriptor maskDescriptor, String& validationErrorDescription)
public string ToString()
}
public System.Windows.Forms.Design.MenuCommands : StandardCommands {
public CommandID ComponentTrayMenu
public CommandID ContainerMenu
public CommandID DesignerProperties
public CommandID KeyCancel
public CommandID KeyDefaultAction
public CommandID KeyMoveDown
public CommandID KeyMoveLeft
public CommandID KeyMoveRight
public CommandID KeyMoveUp
public CommandID KeyNudgeDown
public CommandID KeyNudgeHeightDecrease
public CommandID KeyNudgeHeightIncrease
public CommandID KeyNudgeLeft
public CommandID KeyNudgeRight
public CommandID KeyNudgeUp
public CommandID KeyNudgeWidthDecrease
public CommandID KeyNudgeWidthIncrease
public CommandID KeyReverseCancel
public CommandID KeySelectNext
public CommandID KeySelectPrevious
public CommandID KeySizeHeightDecrease
public CommandID KeySizeHeightIncrease
public CommandID KeySizeWidthDecrease
public CommandID KeySizeWidthIncrease
public CommandID KeyTabOrderSelect
public CommandID SelectionMenu
public CommandID TraySelectionMenu
public CommandID EditLabel
public CommandID KeyEnd
public CommandID KeyHome
public CommandID KeyInvokeSmartTag
public CommandID KeyShiftEnd
public CommandID KeyShiftHome
public CommandID SetStatusRectangle
public CommandID SetStatusText
private Guid guidVSStd97
private Guid guidVSStd2K
private Guid wfCommandSet
private Guid wfMenuGroup
}
internal System.Windows.Forms.Design.Native : object {
private Type _xplatuiType
private object InvokeMethod(string methodName, Object[] args)
private object InvokeMethod(string methodName, Object[] args, Type[] types)
public void DefWndProc(Message& m)
public IntPtr SendMessage(IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam)
public Point PointToClient(Control control, Point point)
public IntPtr SetParent(IntPtr childHandle, IntPtr parentHandle)
public int HiWord(int dword)
public int LoWord(int dword)
public IntPtr LParam(int hiword, int loword)
}
internal System.Windows.Forms.Design.PanelDesigner : ParentControlDesigner {
public void Initialize(IComponent component)
protected void OnPaintAdornments(PaintEventArgs pe)
}
public System.Windows.Forms.Design.ParentControlDesigner : ControlDesigner {
private bool _defaultDrawGrid
private bool _defaultSnapToGrid
private Size _defaultGridSize
private bool _drawGrid
private bool _snapToGrid
private Size _gridSize
private Point _mouseDownPoint
protected Point DefaultControlLocation
protected bool EnableDragRect
protected bool DrawGrid
private bool SnapToGrid
protected Size GridSize
protected bool AllowControlLasso
protected bool AllowGenericDragBox
protected internal bool AllowSetChildIndexOnDrop
public IList SnapLines
protected ToolboxItem MouseDragTool
public void Initialize(IComponent component)
protected void Dispose(bool disposing)
protected void InvokeCreateTool(ParentControlDesigner toInvoke, ToolboxItem tool)
protected void CreateTool(ToolboxItem tool)
protected void CreateTool(ToolboxItem tool, Point location)
protected void CreateTool(ToolboxItem tool, Rectangle bounds)
protected IComponent[] CreateToolCore(ToolboxItem tool, int x, int y, int width, int height, bool hasLocation, bool hasSize)
public bool CanParent(Control control)
public bool CanParent(ControlDesigner controlDesigner)
protected void OnDragDrop(DragEventArgs de)
protected void OnDragEnter(DragEventArgs de)
protected void OnDragLeave(EventArgs e)
protected void OnDragOver(DragEventArgs de)
protected Point get_DefaultControlLocation()
protected bool get_EnableDragRect()
private void OnComponentRemoving(object sender, ComponentEventArgs args)
private void OnComponentRemoved(object sender, ComponentEventArgs args)
protected void PreFilterProperties(IDictionary properties)
private void PopulateGridProperties()
private void OnParentGridPropertiesChanged(ParentControlDesigner parentDesigner)
private ParentControlDesigner GetParentControlDesignerOf(Control control)
protected bool get_DrawGrid()
protected void set_DrawGrid(bool value)
private bool get_SnapToGrid()
private void set_SnapToGrid(bool value)
protected Size get_GridSize()
protected void set_GridSize(Size value)
private bool ShouldSerializeDrawGrid()
private void ResetDrawGrid()
private bool ShouldSerializeSnapToGrid()
private void ResetSnapToGrid()
private bool ShouldSerializeGridSize()
private void ResetGridSize()
protected void OnMouseDragBegin(int x, int y)
protected void OnMouseDragMove(int x, int y)
protected void OnMouseDragEnd(bool cancel)
protected void OnDragComplete(DragEventArgs de)
internal void OnMouseDown(int x, int y)
internal void OnMouseUp()
internal void OnMouseMove(int x, int y)
private Point SnapPointToGrid(Point location)
protected void OnSetCursor()
protected void OnPaintAdornments(PaintEventArgs pe)
protected Control GetControl(object component)
protected bool get_AllowControlLasso()
protected bool get_AllowGenericDragBox()
protected internal bool get_AllowSetChildIndexOnDrop()
public IList get_SnapLines()
protected ToolboxItem get_MouseDragTool()
public void InitializeNewComponent(IDictionary defaultValues)
protected void AddPaddingSnapLines(ArrayList& snapLines)
protected Control GetParentForComponent(IComponent component)
protected ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType)
public GlyphCollection GetGlyphs(GlyphSelectionType selectionType)
protected Rectangle GetUpdatedRect(Rectangle originalRect, Rectangle dragRect, bool updateSize)
}
public System.Windows.Forms.Design.ScrollableControlDesigner : ParentControlDesigner {
private int HTHSCROLL
private int HTVSCROLL
protected bool GetHitTest(Point pt)
protected void WndProc(Message& m)
}
internal System.Windows.Forms.Design.SelectionFrame : object {
private Rectangle _bounds
private Control _control
private Rectangle[] _handles
private GrabHandle _handle
private int BORDER_SIZE
private bool _resizing
public Rectangle Bounds
private SelectionRules SelectionRules
public Control Control
public Control Parent
private GrabHandle GrabHandleSelected
private bool PrimarySelection
public void .ctor(Control control)
public Rectangle get_Bounds()
public void set_Bounds(Rectangle value)
private SelectionRules get_SelectionRules()
public Control get_Control()
public void set_Control(Control value)
public Control get_Parent()
private GrabHandle get_GrabHandleSelected()
private void set_GrabHandleSelected(GrabHandle value)
private bool get_PrimarySelection()
public void OnPaint(Graphics gfx)
private void DrawGrabHandles(Graphics gfx)
protected void DrawFrame(Graphics gfx)
public bool SetCursor(int x, int y)
public void ResizeBegin(int x, int y)
private bool CheckSelectionRules(SelectionRules rules, SelectionRules toCheck)
public Rectangle ResizeContinue(int x, int y)
public void ResizeEnd(bool cancel)
public void Resize(Rectangle deltaBounds)
public bool HitTest(int x, int y)
private GrabHandle PointToGrabHandle(Point pointerLocation)
private bool IsCursorOnGrabHandle(Point pointerLocation, Rectangle handleRectangle)
private Point PointToClient(Point screenPoint)
}
public System.Windows.Forms.Design.SelectionRules : Enum {
public int value__
public SelectionRules AllSizeable
public SelectionRules BottomSizeable
public SelectionRules LeftSizeable
public SelectionRules Locked
public SelectionRules Moveable
public SelectionRules None
public SelectionRules RightSizeable
public SelectionRules TopSizeable
public SelectionRules Visible
}
public System.Windows.Forms.Design.ShortcutKeysEditor : UITypeEditor {
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
}
internal System.Windows.Forms.Design.SplitContainerDesigner : ParentControlDesigner {
public void Initialize(IComponent component)
public ControlDesigner InternalControlDesigner(int internalControlIndex)
private ControlDesigner GetDesigner(IComponent component)
public int NumberOfInternalControlDesigners()
}
internal System.Windows.Forms.Design.StringArrayEditor : StringCollectionEditor {
public void .ctor(Type type)
protected Object[] GetItems(object editValue)
protected object SetItems(object editValue, Object[] value)
protected Type CreateCollectionItemType()
}
internal System.Windows.Forms.Design.StringCollectionEditor : CollectionEditor {
public void .ctor(Type type)
protected CollectionForm CreateCollectionForm()
}
internal System.Windows.Forms.Design.TabPageCollectionEditor : CollectionEditor {
public void .ctor(Type type)
}
public System.Windows.Forms.Design.ThemedScrollbarMode : Enum {
public int value__
public ThemedScrollbarMode All
public ThemedScrollbarMode None
public ThemedScrollbarMode OnlyTopLevel
}
public System.Windows.Forms.Design.ThemedScrollbarWindow : ValueType {
public IntPtr Handle
public ThemedScrollbarMode Mode
}
internal System.Windows.Forms.Design.UISelectionService : object {
private IServiceProvider _serviceProvider
private DesignerTransaction _transaction
private ISelectionService _selectionService
private bool _dragging
private Point _prevMousePosition
private bool _firstMove
private bool _selecting
private Control _selectionContainer
private Point _initialMousePosition
private Rectangle _selectionRectangle
private ArrayList _selectionFrames
private SelectionFrame _selectionFrame
private bool _resizing
private ISelectionService SelectionService
public bool SelectionInProgress
public bool DragDropInProgress
public bool ResizeInProgress
public Rectangle SelectionBounds
public void .ctor(IServiceProvider serviceProvider)
private ISelectionService get_SelectionService()
private object GetService(Type service)
public bool get_SelectionInProgress()
public bool get_DragDropInProgress()
public bool get_ResizeInProgress()
public bool SetCursor(int x, int y)
public void MouseDragBegin(Control container, int x, int y)
public void MouseDragMove(int x, int y)
public void MouseDragEnd(bool cancel)
public void DragBegin()
public void DragOver(Control container, int x, int y)
public void DragDrop(bool cancel, Control container, int x, int y)
private void MoveSelection(Control container, int dx, int dy)
public Rectangle get_SelectionBounds()
private void SelectionBegin(Control container, int x, int y)
private void SelectionContinue(int x, int y)
private void SelectionEnd(bool cancel)
private void ResizeBegin(int x, int y)
private void ResizeContinue(int x, int y)
private void ResizeEnd(bool cancel)
private SelectionFrame GetSelectionFrameAt(int x, int y)
private SelectionFrame GetSelectionFrameFor(Control control)
public bool AdornmentsHitTest(Control control, int x, int y)
public void PaintAdornments(Control container, Graphics gfx)
private void DrawSelectionRectangle(Graphics gfx, Rectangle frame, Color color)
private void OnSelectionChanged(object sender, EventArgs args)
private ICollection GetControlsIn(Rectangle rect)
}
public System.Windows.Forms.Design.WindowsFormsDesignerOptionService : DesignerOptionService {
public DesignerOptions CompatibilityOptions
public DesignerOptions get_CompatibilityOptions()
protected void PopulateOptionCollection(DesignerOptionCollection options)
}
internal System.Windows.Forms.Design.WndProcRouter : object {
private IWindowTarget _oldTarget
private IMessageReceiver _receiver
private Control _control
public Control Control
public IWindowTarget OldWindowTarget
public void .ctor(Control control, IMessageReceiver receiver)
public Control get_Control()
public IWindowTarget get_OldWindowTarget()
public void ToControl(Message& m)
public void ToSystem(Message& m)
private void System.Windows.Forms.IWindowTarget.OnHandleChange(IntPtr newHandle)
private void System.Windows.Forms.IWindowTarget.OnMessage(Message& m)
public void Dispose()
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
