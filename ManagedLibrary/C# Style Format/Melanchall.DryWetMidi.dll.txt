internal class Melanchall.DryWetMidi.Common.CircularBuffer`1 : object {
    
private int _capacity;
    
private T[] _buffer;
    
private int _start;
    
private int _index;
    
private int _position;
    [CompilerGeneratedAttribute]

private bool <IsFull>k__BackingField;
    
public bool IsFull { get; private set; }
    public CircularBuffer`1(int capacity);
    [CompilerGeneratedAttribute]
public bool get_IsFull();
    [CompilerGeneratedAttribute]
private void set_IsFull(bool value);
    public void Add(T value);
    public T[] MovePositionForward(int offset);
    public void MovePositionBack(int offset);
    private int GetItemsCount();
    private IEnumerable`1<T> GetItems();
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Common.CircularBuffer`1/<GetItems>d__15")]
private IEnumerable`1<T> GetItems(int start, int end);
}
public enum Melanchall.DryWetMidi.Common.ControlName : Enum {
    
public byte value__;
    
public static ControlName BankSelect;
    
public static ControlName Modulation;
    
public static ControlName BreathController;
    
public static ControlName FootController;
    
public static ControlName PortamentoTime;
    
public static ControlName DataEntryMsb;
    
public static ControlName ChannelVolume;
    
public static ControlName Balance;
    
public static ControlName Pan;
    
public static ControlName ExpressionController;
    
public static ControlName EffectControl1;
    
public static ControlName EffectControl2;
    
public static ControlName GeneralPurposeController1;
    
public static ControlName GeneralPurposeController2;
    
public static ControlName GeneralPurposeController3;
    
public static ControlName GeneralPurposeController4;
    
public static ControlName LsbForBankSelect;
    
public static ControlName LsbForModulation;
    
public static ControlName LsbForBreathController;
    
public static ControlName LsbForController3;
    
public static ControlName LsbForFootController;
    
public static ControlName LsbForPortamentoTime;
    
public static ControlName LsbForDataEntry;
    
public static ControlName LsbForChannelVolume;
    
public static ControlName LsbForBalance;
    
public static ControlName LsbForController9;
    
public static ControlName LsbForPan;
    
public static ControlName LsbForExpressionController;
    
public static ControlName LsbForEffectControl1;
    
public static ControlName LsbForEffectControl2;
    
public static ControlName LsbForController14;
    
public static ControlName LsbForController15;
    
public static ControlName LsbForGeneralPurposeController1;
    
public static ControlName LsbForGeneralPurposeController2;
    
public static ControlName LsbForGeneralPurposeController3;
    
public static ControlName LsbForGeneralPurposeController4;
    
public static ControlName LsbForController20;
    
public static ControlName LsbForController21;
    
public static ControlName LsbForController22;
    
public static ControlName LsbForController23;
    
public static ControlName LsbForController24;
    
public static ControlName LsbForController25;
    
public static ControlName LsbForController26;
    
public static ControlName LsbForController27;
    
public static ControlName LsbForController28;
    
public static ControlName LsbForController29;
    
public static ControlName LsbForController30;
    
public static ControlName LsbForController31;
    
public static ControlName DamperPedal;
    
public static ControlName Portamento;
    
public static ControlName Sostenuto;
    
public static ControlName SoftPedal;
    
public static ControlName LegatoFootswitch;
    
public static ControlName Hold2;
    
public static ControlName SoundController1;
    
public static ControlName SoundController2;
    
public static ControlName SoundController3;
    
public static ControlName SoundController4;
    
public static ControlName SoundController5;
    
public static ControlName SoundController6;
    
public static ControlName SoundController7;
    
public static ControlName SoundController8;
    
public static ControlName SoundController9;
    
public static ControlName SoundController10;
    
public static ControlName GeneralPurposeController5;
    
public static ControlName GeneralPurposeController6;
    
public static ControlName GeneralPurposeController7;
    
public static ControlName GeneralPurposeController8;
    
public static ControlName PortamentoControl;
    
public static ControlName HighResolutionVelocityPrefix;
    
public static ControlName Effects1Depth;
    
public static ControlName Effects2Depth;
    
public static ControlName Effects3Depth;
    
public static ControlName Effects4Depth;
    
public static ControlName Effects5Depth;
    
public static ControlName DataIncrement;
    
public static ControlName DataDecrement;
    
public static ControlName NonRegisteredParameterNumberLsb;
    
public static ControlName NonRegisteredParameterNumberMsb;
    
public static ControlName RegisteredParameterNumberLsb;
    
public static ControlName RegisteredParameterNumberMsb;
    
public static ControlName AllSoundOff;
    
public static ControlName ResetAllControllers;
    
public static ControlName LocalControl;
    
public static ControlName AllNotesOff;
    
public static ControlName OmniModeOff;
    
public static ControlName OmniModeOn;
    
public static ControlName MonoModeOn;
    
public static ControlName PolyModeOn;
    
public static ControlName Undefined;
}
[ExtensionAttribute]
internal static class Melanchall.DryWetMidi.Common.DataTypesUtilities : object {
    public static byte Combine(FourBitNumber head, FourBitNumber tail);
    public static ushort Combine(SevenBitNumber head, SevenBitNumber tail);
    public static ushort Combine(byte head, byte tail);
    public static ushort CombineAsSevenBitNumbers(byte head, byte tail);
    public static byte CombineAsFourBitNumbers(byte head, byte tail);
    public static UInt32 Combine(ushort head, ushort tail);
    [ExtensionAttribute]
public static FourBitNumber GetTail(byte number);
    [ExtensionAttribute]
public static SevenBitNumber GetTail(ushort number);
    [ExtensionAttribute]
public static byte GetTail(short number);
    [ExtensionAttribute]
public static ushort GetTail(UInt32 number);
    [ExtensionAttribute]
public static FourBitNumber GetHead(byte number);
    [ExtensionAttribute]
public static SevenBitNumber GetHead(ushort number);
    [ExtensionAttribute]
public static byte GetHead(short number);
    [ExtensionAttribute]
public static ushort GetHead(UInt32 number);
    [ExtensionAttribute]
public static int GetVlqLength(int number);
    [ExtensionAttribute]
public static int GetVlqLength(long number);
    [ExtensionAttribute]
public static Byte[] GetVlqBytes(int number);
    [ExtensionAttribute]
public static Byte[] GetVlqBytes(long number);
    [ExtensionAttribute]
public static byte GetFirstByte(int number);
    [ExtensionAttribute]
public static byte GetSecondByte(int number);
    [ExtensionAttribute]
public static byte GetThirdByte(int number);
    [ExtensionAttribute]
public static byte GetFourthByte(int number);
    [ExtensionAttribute]
internal static int GetVlqBytes(long number, Byte[] buffer);
}
internal class Melanchall.DryWetMidi.Common.DisplayNameAttribute : Attribute {
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    
public string Name { get; }
    public DisplayNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Melanchall.DryWetMidi.Common.FourBitNumber : ValueType {
    
public static FourBitNumber MinValue;
    
public static FourBitNumber MaxValue;
    
public static FourBitNumber[] Values;
    
private static byte Min;
    
private static byte Max;
    
private byte _value;
    public FourBitNumber(byte value);
    private static FourBitNumber();
    public static bool TryParse(string input, FourBitNumber& fourBitNumber);
    public static FourBitNumber Parse(string input);
    public static byte op_Implicit(FourBitNumber number);
    public static FourBitNumber op_Explicit(byte number);
    public sealed virtual int CompareTo(FourBitNumber other);
    public sealed virtual TypeCode GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface Melanchall.DryWetMidi.Common.IMetadata {
    
public object Metadata { get; public set; }
    public abstract virtual object get_Metadata();
    public abstract virtual void set_Metadata(object value);
}
internal class Melanchall.DryWetMidi.Common.Logger : object {
    
private static Logger _instance;
    
private FileStream _fileStream;
    
private StreamWriter _streamWriter;
    
private bool _disposed;
    
public static Logger Instance { get; }
    public static Logger get_Instance();
    public void WriteLine(string filePath, string line);
    public void Write(string filePath, string text);
    public sealed virtual void Dispose();
    public void EnsureStreamCreated(string filePath);
    private void Dispose(bool disposing);
}
internal static class Melanchall.DryWetMidi.Common.MathUtilities : object {
    public static T GetLastElementBelowThreshold(T[] elements, long keyThreshold, Func`2<T, long> keySelector);
    public static int EnsureInBounds(int value, int min, int max);
    public static bool IsPowerOfTwo(int value);
    public static long LeastCommonMultiple(long a, long b);
    public static long GreatestCommonDivisor(long a, long b);
    public static Tuple`2<long, long> SolveDiophantineEquation(long a, long b);
    public static double Round(double value);
    public static double Round(double value, int digits);
    public static long RoundToLong(double value);
    public static IEnumerable`1<T[]> GetPermutations(T[] objects);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Common.MathUtilities/<GetPermutations>d__10`1")]
private static IEnumerable`1<T[]> GetPermutations(T[] objects, int k);
}
public abstract class Melanchall.DryWetMidi.Common.MidiException : Exception {
    internal MidiException(string message);
    internal MidiException(string message, Exception innerException);
}
internal class Melanchall.DryWetMidi.Common.ObjectWrapper`1 : object {
    [CompilerGeneratedAttribute]

private TObject <Object>k__BackingField;
    
public TObject Object { get; public set; }
    [CompilerGeneratedAttribute]
public TObject get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(TObject value);
}
internal class Melanchall.DryWetMidi.Common.Parsing`1 : MulticastDelegate {
    public Parsing`1(object object, IntPtr method);
    public virtual ParsingResult Invoke(string input, T& result);
    public virtual IAsyncResult BeginInvoke(string input, T& result, AsyncCallback callback, object object);
    public virtual ParsingResult EndInvoke(T& result, IAsyncResult __result);
}
internal class Melanchall.DryWetMidi.Common.ParsingResult : object {
    
public static ParsingResult Parsed;
    
public static ParsingResult EmptyInputString;
    
public static ParsingResult NotMatched;
    
private string _error;
    [CompilerGeneratedAttribute]

private ParsingStatus <Status>k__BackingField;
    
public ParsingStatus Status { get; }
    
public Exception Exception { get; }
    private ParsingResult(string error);
    private ParsingResult(ParsingStatus status);
    private ParsingResult(ParsingStatus status, string error);
    private static ParsingResult();
    [CompilerGeneratedAttribute]
public ParsingStatus get_Status();
    public Exception get_Exception();
    public static ParsingResult Error(string error);
}
internal enum Melanchall.DryWetMidi.Common.ParsingStatus : Enum {
    
public int value__;
    
public static ParsingStatus Parsed;
    
public static ParsingStatus EmptyInputString;
    
public static ParsingStatus NotMatched;
    
public static ParsingStatus FormatError;
}
internal static class Melanchall.DryWetMidi.Common.ParsingUtilities : object {
    
private static NumberStyles NonnegativeIntegerNumberStyle;
    
private static NumberStyles IntegerNumberStyle;
    
private static NumberStyles NonnegativeDoubleNumberStyle;
    public static bool TryParse(string input, Parsing`1<T> parsing, T& result);
    public static T Parse(string input, Parsing`1<T> parsing);
    public static string GetNonnegativeIntegerNumberGroup(string groupName);
    public static string GetIntegerNumberGroup(string groupName);
    public static string GetNonnegativeDoubleNumberGroup(string groupName);
    public static Match Match(string input, IEnumerable`1<string> patterns, bool ignoreCase);
    public static Match[] Matches(string input, IEnumerable`1<string> patterns, bool ignoreCase);
    public static bool ParseNonnegativeInt(Match match, string groupName, int defaultValue, Int32& value);
    public static bool ParseInt(Match match, string groupName, int defaultValue, Int32& value);
    public static bool ParseNonnegativeDouble(Match match, string groupName, double defaultValue, Double& value);
    public static bool ParseNonnegativeLong(Match match, string groupName, long defaultValue, Int64& value);
    private static bool ParseInt(Match match, string groupName, int defaultValue, NumberStyles numberStyle, Int32& value);
    private static bool ParseDouble(Match match, string groupName, double defaultValue, NumberStyles numberStyle, Double& value);
}
public class Melanchall.DryWetMidi.Common.SevenBitNumber : ValueType {
    
public static SevenBitNumber MinValue;
    
public static SevenBitNumber MaxValue;
    
public static SevenBitNumber[] Values;
    
private static byte Min;
    
private static byte Max;
    
private byte _value;
    public SevenBitNumber(byte value);
    private static SevenBitNumber();
    public static bool TryParse(string input, SevenBitNumber& sevenBitNumber);
    public static SevenBitNumber Parse(string input);
    public static byte op_Implicit(SevenBitNumber number);
    public static SevenBitNumber op_Explicit(byte number);
    public sealed virtual int CompareTo(SevenBitNumber other);
    public sealed virtual TypeCode GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Melanchall.DryWetMidi.Common.ShortByteParser : object {
    internal static ParsingResult TryParse(string input, byte minValue, byte maxValue, Byte& result);
}
public enum Melanchall.DryWetMidi.Common.SmpteFormat : Enum {
    
public byte value__;
    
public static SmpteFormat TwentyFour;
    
public static SmpteFormat TwentyFive;
    
public static SmpteFormat ThirtyDrop;
    
public static SmpteFormat Thirty;
}
internal class Melanchall.DryWetMidi.Common.StreamWrapper : Stream {
    
private Stream _stream;
    
private CircularBuffer`1<byte> _buffer;
    
private Byte[] _peekBuffer;
    
private Byte[] _skipBytesBuffer;
    
private long _position;
    
public bool CanRead { get; }
    
public bool CanSeek { get; }
    
public bool CanWrite { get; }
    
public long Length { get; }
    
public long Position { get; public set; }
    public StreamWrapper(Stream stream, int bufferCapacity);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public bool IsEndReached();
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void SkipBytes(int count);
}
internal static class Melanchall.DryWetMidi.Common.ThrowIfArgument : object {
    
private static int MinNonnegativeValue;
    
private static int MinPositiveValue;
    internal static void IsNull(string parameterName, object argument);
    internal static void ContainsNull(string parameterName, IEnumerable`1<T> argument);
    internal static void IsInvalidEnumValue(string parameterName, TEnum argument);
    internal static void IsOutOfRange(string parameterName, TimeSpan value, TimeSpan min, TimeSpan max, string message);
    internal static void IsOutOfRange(string parameterName, int value, int min, int max, string message);
    internal static void IsOutOfRange(string parameterName, long value, long min, long max, string message);
    internal static void IsOutOfRange(string parameterName, double value, double min, double max, string message);
    internal static void IsOutOfRange(string parameterName, int value, string message, Int32[] values);
    internal static void DoesntSatisfyCondition(string parameterName, int value, Predicate`1<int> condition, string message);
    internal static void IsGreaterThan(string parameterName, int value, int reference, string message);
    internal static void IsGreaterThan(string parameterName, long value, long reference, string message);
    internal static void IsLessThan(string parameterName, TimeSpan value, TimeSpan reference, string message);
    internal static void IsLessThan(string parameterName, int value, int reference, string message);
    internal static void IsLessThan(string parameterName, long value, long reference, string message);
    internal static void IsLessThan(string parameterName, double value, double reference, string message);
    internal static void IsNegative(string parameterName, int value, string message);
    internal static void IsNegative(string parameterName, long value, string message);
    internal static void IsNegative(string parameterName, double value, string message);
    internal static void IsNonpositive(string parameterName, int value, string message);
    internal static void IsNonpositive(string parameterName, long value, string message);
    internal static void IsNonpositive(string parameterName, double value, string message);
    internal static void IsNullOrWhiteSpaceString(string parameterName, string value, string stringDescription);
    internal static void IsNullOrEmptyString(string parameterName, string value, string stringDescription);
    internal static void IsInvalidIndex(string parameterName, int index, int collectionSize);
    internal static void IsEmptyCollection(string parameterName, IEnumerable`1<T> collection, string message);
    internal static void ContainsInvalidEnumValue(string parameterName, IEnumerable`1<TEnum> argument);
    internal static void StartsWithInvalidValue(string parameterName, IEnumerable`1<T> collection, T invalidValue, string message);
    internal static void IsOfInvalidType(string parameterName, object parameterValue, string message);
    internal static void IsOfInvalidType(string parameterName, object parameterValue, string message);
}
internal class Melanchall.DryWetMidi.Composing.AddAnchorAction : PatternAction {
    [CompilerGeneratedAttribute]

private object <Anchor>k__BackingField;
    
public object Anchor { get; }
    public AddAnchorAction(object anchor);
    [CompilerGeneratedAttribute]
public object get_Anchor();
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
internal class Melanchall.DryWetMidi.Composing.AddChordAction : PatternAction {
    [CompilerGeneratedAttribute]

private ChordDescriptor <ChordDescriptor>k__BackingField;
    
public ChordDescriptor ChordDescriptor { get; }
    public AddChordAction(ChordDescriptor chordDescriptor);
    [CompilerGeneratedAttribute]
public ChordDescriptor get_ChordDescriptor();
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
internal class Melanchall.DryWetMidi.Composing.AddNoteAction : PatternAction {
    [CompilerGeneratedAttribute]

private NoteDescriptor <NoteDescriptor>k__BackingField;
    
public NoteDescriptor NoteDescriptor { get; }
    public AddNoteAction(NoteDescriptor noteDescriptor);
    [CompilerGeneratedAttribute]
public NoteDescriptor get_NoteDescriptor();
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
internal class Melanchall.DryWetMidi.Composing.AddPatternAction : PatternAction {
    [CompilerGeneratedAttribute]

private Pattern <Pattern>k__BackingField;
    
public Pattern Pattern { get; }
    public AddPatternAction(Pattern pattern);
    [CompilerGeneratedAttribute]
public Pattern get_Pattern();
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
internal class Melanchall.DryWetMidi.Composing.AddTextEventAction`1 : PatternAction {
    [CompilerGeneratedAttribute]

private string <Text>k__BackingField;
    
public string Text { get; }
    public AddTextEventAction`1(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
internal enum Melanchall.DryWetMidi.Composing.AnchorPosition : Enum {
    
public int value__;
    
public static AnchorPosition First;
    
public static AnchorPosition Last;
    
public static AnchorPosition Nth;
}
public class Melanchall.DryWetMidi.Composing.ChordDescriptor : object {
    [CompilerGeneratedAttribute]

private IEnumerable`1<Note> <Notes>k__BackingField;
    [CompilerGeneratedAttribute]

private SevenBitNumber <Velocity>k__BackingField;
    [CompilerGeneratedAttribute]

private ITimeSpan <Length>k__BackingField;
    
public IEnumerable`1<Note> Notes { get; }
    
public SevenBitNumber Velocity { get; }
    
public ITimeSpan Length { get; }
    public ChordDescriptor(IEnumerable`1<Note> notes, SevenBitNumber velocity, ITimeSpan length);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Note> get_Notes();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_Velocity();
    [CompilerGeneratedAttribute]
public ITimeSpan get_Length();
    public static bool op_Equality(ChordDescriptor chordDescriptor1, ChordDescriptor chordDescriptor2);
    public static bool op_Inequality(ChordDescriptor chordDescriptor1, ChordDescriptor chordDescriptor2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Melanchall.DryWetMidi.Composing.ChordSelection : MulticastDelegate {
    public ChordSelection(object object, IntPtr method);
    public virtual bool Invoke(int noteIndex, ChordDescriptor chordDescriptor);
    public virtual IAsyncResult BeginInvoke(int noteIndex, ChordDescriptor chordDescriptor, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Melanchall.DryWetMidi.Composing.ChordTransformation : MulticastDelegate {
    public ChordTransformation(object object, IntPtr method);
    public virtual ChordDescriptor Invoke(ChordDescriptor chordDescriptor);
    public virtual IAsyncResult BeginInvoke(ChordDescriptor chordDescriptor, AsyncCallback callback, object object);
    public virtual ChordDescriptor EndInvoke(IAsyncResult result);
}
internal class Melanchall.DryWetMidi.Composing.MoveToAnchorAction : PatternAction {
    [CompilerGeneratedAttribute]

private object <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]

private AnchorPosition <AnchorPosition>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Index>k__BackingField;
    
public object Anchor { get; }
    
public AnchorPosition AnchorPosition { get; }
    
public int Index { get; }
    public MoveToAnchorAction(AnchorPosition position);
    public MoveToAnchorAction(object anchor, AnchorPosition position);
    public MoveToAnchorAction(AnchorPosition position, int index);
    public MoveToAnchorAction(object anchor, AnchorPosition position, int index);
    [CompilerGeneratedAttribute]
public object get_Anchor();
    [CompilerGeneratedAttribute]
public AnchorPosition get_AnchorPosition();
    [CompilerGeneratedAttribute]
public int get_Index();
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
internal class Melanchall.DryWetMidi.Composing.MoveToTimeAction : PatternAction {
    [CompilerGeneratedAttribute]

private ITimeSpan <Time>k__BackingField;
    
public ITimeSpan Time { get; }
    public MoveToTimeAction(ITimeSpan time);
    [CompilerGeneratedAttribute]
public ITimeSpan get_Time();
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
public class Melanchall.DryWetMidi.Composing.NoteDescriptor : object {
    [CompilerGeneratedAttribute]

private Note <Note>k__BackingField;
    [CompilerGeneratedAttribute]

private SevenBitNumber <Velocity>k__BackingField;
    [CompilerGeneratedAttribute]

private ITimeSpan <Length>k__BackingField;
    
public Note Note { get; }
    
public SevenBitNumber Velocity { get; }
    
public ITimeSpan Length { get; }
    public NoteDescriptor(Note note, SevenBitNumber velocity, ITimeSpan length);
    [CompilerGeneratedAttribute]
public Note get_Note();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_Velocity();
    [CompilerGeneratedAttribute]
public ITimeSpan get_Length();
    public static bool op_Equality(NoteDescriptor noteDescriptor1, NoteDescriptor noteDescriptor2);
    public static bool op_Inequality(NoteDescriptor noteDescriptor1, NoteDescriptor noteDescriptor2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Melanchall.DryWetMidi.Composing.NoteSelection : MulticastDelegate {
    public NoteSelection(object object, IntPtr method);
    public virtual bool Invoke(int noteIndex, NoteDescriptor noteDescriptor);
    public virtual IAsyncResult BeginInvoke(int noteIndex, NoteDescriptor noteDescriptor, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Melanchall.DryWetMidi.Composing.NoteTransformation : MulticastDelegate {
    public NoteTransformation(object object, IntPtr method);
    public virtual NoteDescriptor Invoke(NoteDescriptor noteDescriptor);
    public virtual IAsyncResult BeginInvoke(NoteDescriptor noteDescriptor, AsyncCallback callback, object object);
    public virtual NoteDescriptor EndInvoke(IAsyncResult result);
}
public class Melanchall.DryWetMidi.Composing.Pattern : object {
    [CompilerGeneratedAttribute]

private IEnumerable`1<PatternAction> <Actions>k__BackingField;
    
internal IEnumerable`1<PatternAction> Actions { get; }
    internal Pattern(IEnumerable`1<PatternAction> actions);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<PatternAction> get_Actions();
    public TrackChunk ToTrackChunk(TempoMap tempoMap, FourBitNumber channel);
    public TrackChunk ToTrackChunk(TempoMap tempoMap);
    public MidiFile ToFile(TempoMap tempoMap, FourBitNumber channel);
    public MidiFile ToFile(TempoMap tempoMap);
    public Pattern Clone();
    internal PatternActionResult InvokeActions(long time, PatternContext context);
}
internal abstract class Melanchall.DryWetMidi.Composing.PatternAction : object {
    [CompilerGeneratedAttribute]

private PatternActionState <State>k__BackingField;
    
public PatternActionState State { get; public set; }
    [CompilerGeneratedAttribute]
public PatternActionState get_State();
    [CompilerGeneratedAttribute]
public void set_State(PatternActionState value);
    public abstract virtual PatternActionResult Invoke(long time, PatternContext context);
    public abstract virtual PatternAction Clone();
}
internal class Melanchall.DryWetMidi.Composing.PatternActionResult : object {
    
public static PatternActionResult DoNothing;
    [CompilerGeneratedAttribute]

private Nullable`1<long> <Time>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<Note> <Notes>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<TimedEvent> <Events>k__BackingField;
    
public Nullable`1<long> Time { get; }
    
public IEnumerable`1<Note> Notes { get; }
    
public IEnumerable`1<TimedEvent> Events { get; }
    public PatternActionResult(Nullable`1<long> time);
    public PatternActionResult(Nullable`1<long> time, IEnumerable`1<Note> notes);
    public PatternActionResult(Nullable`1<long> time, IEnumerable`1<TimedEvent> events);
    public PatternActionResult(Nullable`1<long> time, IEnumerable`1<Note> notes, IEnumerable`1<TimedEvent> events);
    private static PatternActionResult();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Time();
    [CompilerGeneratedAttribute]
public IEnumerable`1<Note> get_Notes();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TimedEvent> get_Events();
}
public enum Melanchall.DryWetMidi.Composing.PatternActionState : Enum {
    
public int value__;
    
public static PatternActionState Enabled;
    
public static PatternActionState Disabled;
    
public static PatternActionState Excluded;
}
public class Melanchall.DryWetMidi.Composing.PatternBuilder : object {
    
public static SevenBitNumber DefaultVelocity;
    
public static ITimeSpan DefaultNoteLength;
    
public static ITimeSpan DefaultStep;
    
public static Octave DefaultOctave;
    
public static Note DefaultRootNote;
    
private List`1<PatternAction> _actions;
    
private Dictionary`2<object, int> _anchorCounters;
    
private int _globalAnchorsCounter;
    [CompilerGeneratedAttribute]

private SevenBitNumber <Velocity>k__BackingField;
    [CompilerGeneratedAttribute]

private ITimeSpan <NoteLength>k__BackingField;
    [CompilerGeneratedAttribute]

private ITimeSpan <Step>k__BackingField;
    [CompilerGeneratedAttribute]

private Octave <Octave>k__BackingField;
    [CompilerGeneratedAttribute]

private Note <RootNote>k__BackingField;
    
public SevenBitNumber Velocity { get; private set; }
    
public ITimeSpan NoteLength { get; private set; }
    
public ITimeSpan Step { get; private set; }
    
public Octave Octave { get; private set; }
    
public Note RootNote { get; private set; }
    public PatternBuilder(Pattern pattern);
    private static PatternBuilder();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_Velocity();
    [CompilerGeneratedAttribute]
private void set_Velocity(SevenBitNumber value);
    [CompilerGeneratedAttribute]
public ITimeSpan get_NoteLength();
    [CompilerGeneratedAttribute]
private void set_NoteLength(ITimeSpan value);
    [CompilerGeneratedAttribute]
public ITimeSpan get_Step();
    [CompilerGeneratedAttribute]
private void set_Step(ITimeSpan value);
    [CompilerGeneratedAttribute]
public Octave get_Octave();
    [CompilerGeneratedAttribute]
private void set_Octave(Octave value);
    [CompilerGeneratedAttribute]
public Note get_RootNote();
    [CompilerGeneratedAttribute]
private void set_RootNote(Note value);
    public PatternBuilder Note(Interval interval);
    public PatternBuilder Note(Interval interval, ITimeSpan length);
    public PatternBuilder Note(Interval interval, SevenBitNumber velocity);
    public PatternBuilder Note(Interval interval, ITimeSpan length, SevenBitNumber velocity);
    public PatternBuilder Note(NoteName noteName);
    public PatternBuilder Note(NoteName noteName, ITimeSpan length);
    public PatternBuilder Note(NoteName noteName, SevenBitNumber velocity);
    public PatternBuilder Note(NoteName noteName, ITimeSpan length, SevenBitNumber velocity);
    public PatternBuilder Note(Note note);
    public PatternBuilder Note(Note note, ITimeSpan length);
    public PatternBuilder Note(Note note, SevenBitNumber velocity);
    public PatternBuilder Note(Note note, ITimeSpan length, SevenBitNumber velocity);
    public PatternBuilder Chord(Chord chord);
    public PatternBuilder Chord(Chord chord, Octave octave);
    public PatternBuilder Chord(Chord chord, ITimeSpan length);
    public PatternBuilder Chord(Chord chord, Octave octave, ITimeSpan length);
    public PatternBuilder Chord(Chord chord, SevenBitNumber velocity);
    public PatternBuilder Chord(Chord chord, Octave octave, SevenBitNumber velocity);
    public PatternBuilder Chord(Chord chord, ITimeSpan length, SevenBitNumber velocity);
    public PatternBuilder Chord(Chord chord, Octave octave, ITimeSpan length, SevenBitNumber velocity);
    public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName);
    public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName, ITimeSpan length);
    public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName, SevenBitNumber velocity);
    public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName, ITimeSpan length, SevenBitNumber velocity);
    public PatternBuilder Chord(IEnumerable`1<Interval> intervals, Note rootNote);
    public PatternBuilder Chord(IEnumerable`1<Interval> interval, Note rootNote, ITimeSpan length);
    public PatternBuilder Chord(IEnumerable`1<Interval> intervals, Note rootNote, SevenBitNumber velocity);
    public PatternBuilder Chord(IEnumerable`1<Interval> intervals, Note rootNote, ITimeSpan length, SevenBitNumber velocity);
    public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames);
    public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames, ITimeSpan length);
    public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames, SevenBitNumber velocity);
    public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames, ITimeSpan length, SevenBitNumber velocity);
    public PatternBuilder Chord(IEnumerable`1<Note> notes);
    public PatternBuilder Chord(IEnumerable`1<Note> notes, ITimeSpan length);
    public PatternBuilder Chord(IEnumerable`1<Note> notes, SevenBitNumber velocity);
    public PatternBuilder Chord(IEnumerable`1<Note> notes, ITimeSpan length, SevenBitNumber velocity);
    public PatternBuilder Pattern(Pattern pattern);
    public PatternBuilder Anchor(object anchor);
    public PatternBuilder Anchor();
    public PatternBuilder MoveToFirstAnchor(object anchor);
    public PatternBuilder MoveToFirstAnchor();
    public PatternBuilder MoveToLastAnchor(object anchor);
    public PatternBuilder MoveToLastAnchor();
    public PatternBuilder MoveToNthAnchor(object anchor, int index);
    public PatternBuilder MoveToNthAnchor(int index);
    public PatternBuilder StepForward(ITimeSpan step);
    public PatternBuilder StepForward();
    public PatternBuilder StepBack(ITimeSpan step);
    public PatternBuilder StepBack();
    public PatternBuilder MoveToTime(ITimeSpan time);
    public PatternBuilder MoveToPreviousTime();
    public PatternBuilder Repeat(int actionsCount, int repetitionsCount);
    public PatternBuilder Repeat(int repetitionsCount);
    public PatternBuilder Repeat();
    public PatternBuilder Lyrics(string text);
    public PatternBuilder Marker(string marker);
    public PatternBuilder ProgramChange(SevenBitNumber programNumber);
    public PatternBuilder ProgramChange(GeneralMidiProgram program);
    public PatternBuilder ProgramChange(GeneralMidi2Program program);
    public PatternBuilder SetRootNote(Note rootNote);
    public PatternBuilder SetVelocity(SevenBitNumber velocity);
    public PatternBuilder SetNoteLength(ITimeSpan length);
    public PatternBuilder SetStep(ITimeSpan step);
    public PatternBuilder SetOctave(Octave octave);
    public Pattern Build();
    public PatternBuilder ReplayPattern(Pattern pattern);
    private PatternBuilder AddAction(PatternAction patternAction);
    private int GetAnchorCounter(object anchor);
    private void UpdateAnchorsCounters(object anchor);
    private PatternBuilder RepeatActions(int actionsCount, int repetitionsCount);
    [CompilerGeneratedAttribute]
private Note <Chord>b__61_0(NoteName n);
}
internal class Melanchall.DryWetMidi.Composing.PatternContext : object {
    
private Stack`1<long> _timeHistory;
    
private Dictionary`2<object, List`1<long>> _anchors;
    
private List`1<long> _anchorsList;
    [CompilerGeneratedAttribute]

private TempoMap <TempoMap>k__BackingField;
    [CompilerGeneratedAttribute]

private FourBitNumber <Channel>k__BackingField;
    
public TempoMap TempoMap { get; }
    
public FourBitNumber Channel { get; }
    public PatternContext(TempoMap tempoMap, FourBitNumber channel);
    [CompilerGeneratedAttribute]
public TempoMap get_TempoMap();
    [CompilerGeneratedAttribute]
public FourBitNumber get_Channel();
    public void SaveTime(long time);
    public Nullable`1<long> RestoreTime();
    public void AnchorTime(object anchor, long time);
    public IReadOnlyList`1<long> GetAnchorTimes(object anchor);
    private List`1<long> GetAnchorTimesList(object anchor);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Composing.PatternUtilities : object {
    
private static NoteSelection AllNotesSelection;
    
private static ChordSelection AllChordsSelection;
    private static PatternUtilities();
    [ExtensionAttribute]
public static Pattern TransformNotes(Pattern pattern, NoteTransformation noteTransformation, bool recursive);
    [ExtensionAttribute]
public static Pattern TransformNotes(Pattern pattern, NoteSelection noteSelection, NoteTransformation noteTransformation, bool recursive);
    [ExtensionAttribute]
public static Pattern TransformChords(Pattern pattern, ChordTransformation chordTransformation, bool recursive);
    [ExtensionAttribute]
public static Pattern TransformChords(Pattern pattern, ChordSelection chordSelection, ChordTransformation chordTransformation, bool recursive);
    [ExtensionAttribute]
public static IEnumerable`1<Pattern> SplitAtAnchor(Pattern pattern, object anchor, bool removeEmptyPatterns);
    [ExtensionAttribute]
public static IEnumerable`1<Pattern> SplitAtAllAnchors(Pattern pattern, bool removeEmptyPatterns);
    [ExtensionAttribute]
public static IEnumerable`1<Pattern> SplitAtMarker(Pattern pattern, string marker, bool removeEmptyPatterns, StringComparison stringComparison);
    [ExtensionAttribute]
public static IEnumerable`1<Pattern> SplitAtAllMarkers(Pattern pattern, bool removeEmptyPatterns);
    [ExtensionAttribute]
public static Pattern CombineInSequence(IEnumerable`1<Pattern> patterns);
    [ExtensionAttribute]
public static Pattern CombineInParallel(IEnumerable`1<Pattern> patterns);
    [ExtensionAttribute]
public static void SetNotesState(Pattern pattern, NoteSelection noteSelection, PatternActionState state, bool recursive);
    [ExtensionAttribute]
public static void SetChordsState(Pattern pattern, ChordSelection chordSelection, PatternActionState state, bool recursive);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Composing.PatternUtilities/<SplitAtActions>d__14")]
private static IEnumerable`1<Pattern> SplitAtActions(Pattern pattern, Predicate`1<PatternAction> actionSelector, bool removeEmptyPatterns);
    private static Pattern TransformNotes(Pattern pattern, ObjectWrapper`1<int> noteIndexWrapper, NoteSelection noteSelection, NoteTransformation noteTransformation, bool recursive);
    private static Pattern TransformChords(Pattern pattern, ObjectWrapper`1<int> chordIndexWrapper, ChordSelection chordSelection, ChordTransformation chordTransformation, bool recursive);
    private static void SetNotesState(Pattern pattern, ObjectWrapper`1<int> noteIndexWrapper, NoteSelection noteSelection, PatternActionState state, bool recursive);
    private static void SetChordsState(Pattern pattern, ObjectWrapper`1<int> chordIndexWrapper, ChordSelection chordSelection, PatternActionState state, bool recursive);
}
internal class Melanchall.DryWetMidi.Composing.SetGeneralMidi2ProgramAction : PatternAction {
    [CompilerGeneratedAttribute]

private GeneralMidi2Program <Program>k__BackingField;
    
public GeneralMidi2Program Program { get; }
    public SetGeneralMidi2ProgramAction(GeneralMidi2Program program);
    [CompilerGeneratedAttribute]
public GeneralMidi2Program get_Program();
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
internal class Melanchall.DryWetMidi.Composing.SetGeneralMidiProgramAction : PatternAction {
    [CompilerGeneratedAttribute]

private GeneralMidiProgram <Program>k__BackingField;
    
public GeneralMidiProgram Program { get; }
    public SetGeneralMidiProgramAction(GeneralMidiProgram program);
    [CompilerGeneratedAttribute]
public GeneralMidiProgram get_Program();
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
internal class Melanchall.DryWetMidi.Composing.SetProgramNumberAction : PatternAction {
    [CompilerGeneratedAttribute]

private SevenBitNumber <ProgramNumber>k__BackingField;
    
public SevenBitNumber ProgramNumber { get; }
    public SetProgramNumberAction(SevenBitNumber programNumber);
    [CompilerGeneratedAttribute]
public SevenBitNumber get_ProgramNumber();
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
internal abstract class Melanchall.DryWetMidi.Composing.StepAction : PatternAction {
    [CompilerGeneratedAttribute]

private ITimeSpan <Step>k__BackingField;
    
public ITimeSpan Step { get; }
    public StepAction(ITimeSpan step);
    [CompilerGeneratedAttribute]
public ITimeSpan get_Step();
}
internal class Melanchall.DryWetMidi.Composing.StepBackAction : StepAction {
    public StepBackAction(ITimeSpan step);
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
internal class Melanchall.DryWetMidi.Composing.StepForwardAction : StepAction {
    public StepForwardAction(ITimeSpan step);
    public virtual PatternActionResult Invoke(long time, PatternContext context);
    public virtual PatternAction Clone();
}
public class Melanchall.DryWetMidi.Core.ActiveSensingEvent : SystemRealTimeEvent {
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
internal static class Melanchall.DryWetMidi.Core.ArrayUtilities : object {
    internal static bool Equals(T[] array1, T[] array2);
    internal static int GetHashCode(T[] array);
}
public abstract class Melanchall.DryWetMidi.Core.BaseTextEvent : MetaEvent {
    [CompilerGeneratedAttribute]

private string <Text>k__BackingField;
    
public string Text { get; public set; }
    public BaseTextEvent(MidiEventType eventType);
    public BaseTextEvent(MidiEventType eventType, string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    protected sealed virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected sealed virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected sealed virtual int GetContentSize(WritingSettings settings);
}
public enum Melanchall.DryWetMidi.Core.BufferingPolicy : Enum {
    
public int value__;
    
public static BufferingPolicy UseFixedSizeBuffer;
    
public static BufferingPolicy DontUseBuffering;
    
public static BufferingPolicy UseCustomBuffer;
    
public static BufferingPolicy BufferAllData;
}
public class Melanchall.DryWetMidi.Core.BytesToMidiEventConverter : object {
    
private static IEventReader MetaEventReader;
    
private MemoryStream _dataBytesStream;
    
private MidiReader _midiReader;
    
private FfStatusBytePolicy _ffStatusBytePolicy;
    
private bool _disposed;
    [CompilerGeneratedAttribute]

private bool <ReadDeltaTimes>k__BackingField;
    [CompilerGeneratedAttribute]

private ReadingSettings <ReadingSettings>k__BackingField;
    
public UnknownChannelEventPolicy UnknownChannelEventPolicy { get; public set; }
    
public UnknownChannelEventCallback UnknownChannelEventCallback { get; public set; }
    
public SilentNoteOnPolicy SilentNoteOnPolicy { get; public set; }
    
public InvalidChannelEventParameterValuePolicy InvalidChannelEventParameterValuePolicy { get; public set; }
    
public InvalidMetaEventParameterValuePolicy InvalidMetaEventParameterValuePolicy { get; public set; }
    
public InvalidSystemCommonEventParameterValuePolicy InvalidSystemCommonEventParameterValuePolicy { get; public set; }
    
public EventTypesCollection CustomMetaEventTypes { get; public set; }
    
public Encoding TextEncoding { get; public set; }
    
public DecodeTextCallback DecodeTextCallback { get; public set; }
    
public ZeroLengthDataPolicy ZeroLengthDataPolicy { get; public set; }
    
public NotEnoughBytesPolicy NotEnoughBytesPolicy { get; public set; }
    
public bool ReadDeltaTimes { get; public set; }
    
public FfStatusBytePolicy FfStatusBytePolicy { get; public set; }
    
internal ReadingSettings ReadingSettings { get; }
    public BytesToMidiEventConverter(int capacity);
    private static BytesToMidiEventConverter();
    public UnknownChannelEventPolicy get_UnknownChannelEventPolicy();
    public void set_UnknownChannelEventPolicy(UnknownChannelEventPolicy value);
    public UnknownChannelEventCallback get_UnknownChannelEventCallback();
    public void set_UnknownChannelEventCallback(UnknownChannelEventCallback value);
    public SilentNoteOnPolicy get_SilentNoteOnPolicy();
    public void set_SilentNoteOnPolicy(SilentNoteOnPolicy value);
    public InvalidChannelEventParameterValuePolicy get_InvalidChannelEventParameterValuePolicy();
    public void set_InvalidChannelEventParameterValuePolicy(InvalidChannelEventParameterValuePolicy value);
    public InvalidMetaEventParameterValuePolicy get_InvalidMetaEventParameterValuePolicy();
    public void set_InvalidMetaEventParameterValuePolicy(InvalidMetaEventParameterValuePolicy value);
    public InvalidSystemCommonEventParameterValuePolicy get_InvalidSystemCommonEventParameterValuePolicy();
    public void set_InvalidSystemCommonEventParameterValuePolicy(InvalidSystemCommonEventParameterValuePolicy value);
    public EventTypesCollection get_CustomMetaEventTypes();
    public void set_CustomMetaEventTypes(EventTypesCollection value);
    public Encoding get_TextEncoding();
    public void set_TextEncoding(Encoding value);
    public DecodeTextCallback get_DecodeTextCallback();
    public void set_DecodeTextCallback(DecodeTextCallback value);
    public ZeroLengthDataPolicy get_ZeroLengthDataPolicy();
    public void set_ZeroLengthDataPolicy(ZeroLengthDataPolicy value);
    public NotEnoughBytesPolicy get_NotEnoughBytesPolicy();
    public void set_NotEnoughBytesPolicy(NotEnoughBytesPolicy value);
    [CompilerGeneratedAttribute]
public bool get_ReadDeltaTimes();
    [CompilerGeneratedAttribute]
public void set_ReadDeltaTimes(bool value);
    public FfStatusBytePolicy get_FfStatusBytePolicy();
    public void set_FfStatusBytePolicy(FfStatusBytePolicy value);
    [CompilerGeneratedAttribute]
internal ReadingSettings get_ReadingSettings();
    public ICollection`1<MidiEvent> ConvertMultiple(Byte[] bytes, int offset, int length);
    public ICollection`1<MidiEvent> ConvertMultiple(Byte[] bytes);
    public MidiEvent Convert(byte statusByte, Byte[] dataBytes);
    public MidiEvent Convert(Byte[] bytes);
    public MidiEvent Convert(Byte[] bytes, int offset, int length);
    private void PrepareStreamWithBytes(Byte[] bytes, int offset, int length);
    private MidiEvent ReadEvent(byte statusByte);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class Melanchall.DryWetMidi.Core.ChannelAftertouchEvent : ChannelEvent {
    
public SevenBitNumber AftertouchValue { get; public set; }
    public ChannelAftertouchEvent(SevenBitNumber aftertouchValue);
    public SevenBitNumber get_AftertouchValue();
    public void set_AftertouchValue(SevenBitNumber value);
    internal virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal virtual void Write(MidiWriter writer, WritingSettings settings);
    internal virtual int GetSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public abstract class Melanchall.DryWetMidi.Core.ChannelEvent : MidiEvent {
    
internal byte _dataByte1;
    
internal byte _dataByte2;
    [CompilerGeneratedAttribute]

private FourBitNumber <Channel>k__BackingField;
    
public FourBitNumber Channel { get; public set; }
    protected ChannelEvent(MidiEventType eventType);
    [CompilerGeneratedAttribute]
public FourBitNumber get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(FourBitNumber value);
    protected byte ReadDataByte(MidiReader reader, ReadingSettings settings);
}
internal class Melanchall.DryWetMidi.Core.ChannelEventReader : object {
    public sealed virtual MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte);
    private void ReactOnUnknownChannelEvent(FourBitNumber statusByte, FourBitNumber channel, MidiReader reader, ReadingSettings settings);
}
internal class Melanchall.DryWetMidi.Core.ChannelEventWriter : object {
    public sealed virtual void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte);
    public sealed virtual int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte);
    public sealed virtual byte GetStatusByte(MidiEvent midiEvent);
}
public class Melanchall.DryWetMidi.Core.ChannelPrefixEvent : MetaEvent {
    [CompilerGeneratedAttribute]

private byte <Channel>k__BackingField;
    
public byte Channel { get; public set; }
    public ChannelPrefixEvent(byte channel);
    [CompilerGeneratedAttribute]
public byte get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(byte value);
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual int GetContentSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Melanchall.DryWetMidi.Core.ChunksCollection : object {
    
private List`1<MidiChunk> _chunks;
    [CompilerGeneratedAttribute]

private bool <IsReadOnly>k__BackingField;
    
public MidiChunk Item { get; public set; }
    
public int Count { get; }
    
public bool IsReadOnly { get; }
    public MidiChunk get_Item(int index);
    public void set_Item(int index, MidiChunk value);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(MidiChunk chunk);
    public void AddRange(IEnumerable`1<MidiChunk> chunks);
    public void Insert(int index, MidiChunk chunk);
    public void InsertRange(int index, IEnumerable`1<MidiChunk> chunks);
    public sealed virtual bool Remove(MidiChunk chunk);
    public void RemoveAt(int index);
    public int RemoveAll(Predicate`1<MidiChunk> match);
    public int IndexOf(MidiChunk chunk);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator`1<MidiChunk> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Contains(MidiChunk item);
    public sealed virtual void CopyTo(MidiChunk[] array, int arrayIndex);
}
internal static class Melanchall.DryWetMidi.Core.ChunksConverterFactory : object {
    public static IChunksConverter GetConverter(MidiFileFormat format);
}
public class Melanchall.DryWetMidi.Core.ChunkType : object {
    [CompilerGeneratedAttribute]

private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Id>k__BackingField;
    
public Type Type { get; }
    
public string Id { get; }
    public ChunkType(Type type, string id);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_Id();
}
public class Melanchall.DryWetMidi.Core.ChunkTypesCollection : object {
    
private Dictionary`2<Type, string> _ids;
    
private Dictionary`2<string, Type> _types;
    public void Add(Type type, string id);
    public bool TryGetType(string id, Type& type);
    public bool TryGetId(Type type, String& id);
    public sealed virtual IEnumerator`1<ChunkType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Melanchall.DryWetMidi.Core.ContinueEvent : SystemRealTimeEvent {
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.ControlChangeEvent : ChannelEvent {
    
public SevenBitNumber ControlNumber { get; public set; }
    
public SevenBitNumber ControlValue { get; public set; }
    public ControlChangeEvent(SevenBitNumber controlNumber, SevenBitNumber controlValue);
    public SevenBitNumber get_ControlNumber();
    public void set_ControlNumber(SevenBitNumber value);
    public SevenBitNumber get_ControlValue();
    public void set_ControlValue(SevenBitNumber value);
    internal virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal virtual void Write(MidiWriter writer, WritingSettings settings);
    internal virtual int GetSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Core.ControlUtilities : object {
    [ExtensionAttribute]
public static ControlName GetControlName(ControlChangeEvent controlChangeEvent);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(ControlName controlName);
    [ExtensionAttribute]
public static ControlChangeEvent GetControlChangeEvent(ControlName controlName, SevenBitNumber controlValue, FourBitNumber channel);
    private static ControlName GetControlName(SevenBitNumber controlNumber);
}
public class Melanchall.DryWetMidi.Core.CopyrightNoticeEvent : BaseTextEvent {
    public CopyrightNoticeEvent(string text);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.CuePointEvent : BaseTextEvent {
    public CuePointEvent(string text);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.DecodeTextCallback : MulticastDelegate {
    public DecodeTextCallback(object object, IntPtr method);
    public virtual string Invoke(Byte[] bytes, ReadingSettings settings);
    public virtual IAsyncResult BeginInvoke(Byte[] bytes, ReadingSettings settings, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class Melanchall.DryWetMidi.Core.DeviceNameEvent : BaseTextEvent {
    public DeviceNameEvent(string deviceName);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.EndOfTrackEvent : MetaEvent {
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual int GetContentSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public enum Melanchall.DryWetMidi.Core.EndOfTrackStoringPolicy : Enum {
    
public int value__;
    
public static EndOfTrackStoringPolicy Omit;
    
public static EndOfTrackStoringPolicy Store;
}
public class Melanchall.DryWetMidi.Core.EscapeSysExEvent : SysExEvent {
    public EscapeSysExEvent(Byte[] data);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
internal static class Melanchall.DryWetMidi.Core.EventReaderFactory : object {
    
private static IEventReader MetaEventReader;
    
private static IEventReader ChannelEventReader;
    
private static IEventReader SysExEventReader;
    
private static IEventReader SystemRealTimeEventReader;
    
private static IEventReader SystemCommonEventReader;
    private static EventReaderFactory();
    internal static IEventReader GetReader(byte statusByte, bool smfOnly);
}
[DefaultMemberAttribute("Item")]
public class Melanchall.DryWetMidi.Core.EventsCollection : object {
    
internal List`1<MidiEvent> _events;
    [CompilerGeneratedAttribute]

private bool <IsReadOnly>k__BackingField;
    
public MidiEvent Item { get; public set; }
    
public int Count { get; }
    
public bool IsReadOnly { get; }
    public MidiEvent get_Item(int index);
    public void set_Item(int index, MidiEvent value);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(MidiEvent midiEvent);
    public void AddRange(IEnumerable`1<MidiEvent> events);
    public void Insert(int index, MidiEvent midiEvent);
    public void InsertRange(int index, IEnumerable`1<MidiEvent> midiEvents);
    public sealed virtual bool Remove(MidiEvent midiEvent);
    public void RemoveAt(int index);
    public int RemoveAll(Predicate`1<MidiEvent> match);
    public int IndexOf(MidiEvent midiEvent);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator`1<MidiEvent> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Contains(MidiEvent item);
    public sealed virtual void CopyTo(MidiEvent[] array, int arrayIndex);
}
internal static class Melanchall.DryWetMidi.Core.EventsCollectionEquality : object {
    public static bool Equals(EventsCollection eventsCollection1, EventsCollection eventsCollection2, MidiEventEqualityCheckSettings settings, String& message);
}
internal static class Melanchall.DryWetMidi.Core.EventStatusBytes : object {
}
public class Melanchall.DryWetMidi.Core.EventType : object {
    [CompilerGeneratedAttribute]

private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]

private byte <StatusByte>k__BackingField;
    
public Type Type { get; }
    
public byte StatusByte { get; }
    public EventType(Type type, byte statusByte);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public byte get_StatusByte();
}
public class Melanchall.DryWetMidi.Core.EventTypesCollection : object {
    
private Dictionary`2<Type, byte> _statusBytes;
    
private Dictionary`2<byte, Type> _types;
    public void Add(Type type, byte statusByte);
    public bool TryGetType(byte statusByte, Type& type);
    public bool TryGetStatusByte(Type type, Byte& statusByte);
    public sealed virtual IEnumerator`1<EventType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Melanchall.DryWetMidi.Core.EventWriterFactory : object {
    
private static IEventWriter MetaEventWriter;
    
private static IEventWriter ChannelEventWriter;
    
private static IEventWriter SysExEventWriter;
    
private static IEventWriter SystemRealTimeEventWriter;
    
private static IEventWriter SystemCommonEventWriter;
    private static EventWriterFactory();
    internal static IEventWriter GetWriter(MidiEvent midiEvent);
}
public enum Melanchall.DryWetMidi.Core.ExtraTrackChunkPolicy : Enum {
    
public byte value__;
    
public static ExtraTrackChunkPolicy Read;
    
public static ExtraTrackChunkPolicy Skip;
}
public enum Melanchall.DryWetMidi.Core.FfStatusBytePolicy : Enum {
    
public int value__;
    
public static FfStatusBytePolicy ReadAsResetEvent;
    
public static FfStatusBytePolicy ReadAsMetaEvent;
}
internal static class Melanchall.DryWetMidi.Core.FileUtilities : object {
    
private static UInt32 GENERIC_READ;
    
private static UInt32 GENERIC_WRITE;
    
private static UInt32 CREATE_NEW;
    
private static UInt32 CREATE_ALWAYS;
    
private static UInt32 OPEN_EXISTING;
    
private static UInt32 FILE_SHARE_NONE;
    private static SafeFileHandle CreateFile(string lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, IntPtr lpSecurityAttributes, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, IntPtr hTemplateFile);
    internal static FileStream OpenFileForRead(string filePath);
    internal static FileStream OpenFileForWrite(string filePath, bool overwriteFile);
    private static SafeFileHandle GetFileHandle(string filePath, UInt32 fileAccess, UInt32 creationDisposition);
}
internal class Melanchall.DryWetMidi.Core.HeaderChunk : MidiChunk {
    
public static string Id;
    [CompilerGeneratedAttribute]

private ushort <FileFormat>k__BackingField;
    [CompilerGeneratedAttribute]

private TimeDivision <TimeDivision>k__BackingField;
    [CompilerGeneratedAttribute]

private ushort <TracksNumber>k__BackingField;
    
public ushort FileFormat { get; public set; }
    
public TimeDivision TimeDivision { get; public set; }
    
public ushort TracksNumber { get; public set; }
    [CompilerGeneratedAttribute]
public ushort get_FileFormat();
    [CompilerGeneratedAttribute]
public void set_FileFormat(ushort value);
    [CompilerGeneratedAttribute]
public TimeDivision get_TimeDivision();
    [CompilerGeneratedAttribute]
public void set_TimeDivision(TimeDivision value);
    [CompilerGeneratedAttribute]
public ushort get_TracksNumber();
    [CompilerGeneratedAttribute]
public void set_TracksNumber(ushort value);
    public virtual MidiChunk Clone();
    public virtual string ToString();
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual UInt32 GetContentSize(WritingSettings settings);
}
internal interface Melanchall.DryWetMidi.Core.IChunksConverter {
    public abstract virtual IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks);
}
internal interface Melanchall.DryWetMidi.Core.IEventReader {
    public abstract virtual MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte);
}
internal interface Melanchall.DryWetMidi.Core.IEventWriter {
    public abstract virtual void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte);
    public abstract virtual int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte);
    public abstract virtual byte GetStatusByte(MidiEvent midiEvent);
}
public class Melanchall.DryWetMidi.Core.InstrumentNameEvent : BaseTextEvent {
    public InstrumentNameEvent(string instrumentName);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValueException : MidiException {
    [CompilerGeneratedAttribute]

private MidiEventType <EventType>k__BackingField;
    [CompilerGeneratedAttribute]

private byte <Value>k__BackingField;
    
public MidiEventType EventType { get; }
    
public byte Value { get; }
    internal InvalidChannelEventParameterValueException(MidiEventType eventType, byte value);
    [CompilerGeneratedAttribute]
public MidiEventType get_EventType();
    [CompilerGeneratedAttribute]
public byte get_Value();
}
public enum Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValuePolicy : Enum {
    
public byte value__;
    
public static InvalidChannelEventParameterValuePolicy Abort;
    
public static InvalidChannelEventParameterValuePolicy ReadValid;
    
public static InvalidChannelEventParameterValuePolicy SnapToLimits;
}
public class Melanchall.DryWetMidi.Core.InvalidChunkSizeException : MidiException {
    [CompilerGeneratedAttribute]

private string <ChunkId>k__BackingField;
    [CompilerGeneratedAttribute]

private long <ExpectedSize>k__BackingField;
    [CompilerGeneratedAttribute]

private long <ActualSize>k__BackingField;
    
public string ChunkId { get; }
    
public long ExpectedSize { get; }
    
public long ActualSize { get; }
    internal InvalidChunkSizeException(string chunkId, long expectedSize, long actualSize);
    [CompilerGeneratedAttribute]
public string get_ChunkId();
    [CompilerGeneratedAttribute]
public long get_ExpectedSize();
    [CompilerGeneratedAttribute]
public long get_ActualSize();
}
public enum Melanchall.DryWetMidi.Core.InvalidChunkSizePolicy : Enum {
    
public byte value__;
    
public static InvalidChunkSizePolicy Abort;
    
public static InvalidChunkSizePolicy Ignore;
}
public class Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValueException : MidiException {
    [CompilerGeneratedAttribute]

private MidiEventType <EventType>k__BackingField;
    [CompilerGeneratedAttribute]

private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Value>k__BackingField;
    
public MidiEventType EventType { get; }
    
public string PropertyName { get; }
    
public int Value { get; }
    internal InvalidMetaEventParameterValueException(MidiEventType eventType, string propertyName, int value);
    [CompilerGeneratedAttribute]
public MidiEventType get_EventType();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public int get_Value();
}
public enum Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValuePolicy : Enum {
    
public int value__;
    
public static InvalidMetaEventParameterValuePolicy Abort;
    
public static InvalidMetaEventParameterValuePolicy SnapToLimits;
}
public class Melanchall.DryWetMidi.Core.InvalidMidiTimeCodeComponentException : MidiException {
    [CompilerGeneratedAttribute]

private byte <MidiTimeCodeComponent>k__BackingField;
    
public byte MidiTimeCodeComponent { get; }
    internal InvalidMidiTimeCodeComponentException(byte midiTimeCodeComponent);
    [CompilerGeneratedAttribute]
public byte get_MidiTimeCodeComponent();
}
public class Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValueException : MidiException {
    [CompilerGeneratedAttribute]

private MidiEventType <EventType>k__BackingField;
    [CompilerGeneratedAttribute]

private string <ComponentName>k__BackingField;
    [CompilerGeneratedAttribute]

private int <ComponentValue>k__BackingField;
    
public MidiEventType EventType { get; }
    
public string ComponentName { get; }
    
public int ComponentValue { get; }
    internal InvalidSystemCommonEventParameterValueException(MidiEventType eventType, string componentName, int componentValue);
    [CompilerGeneratedAttribute]
public MidiEventType get_EventType();
    [CompilerGeneratedAttribute]
public string get_ComponentName();
    [CompilerGeneratedAttribute]
public int get_ComponentValue();
}
public enum Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValuePolicy : Enum {
    
public int value__;
    
public static InvalidSystemCommonEventParameterValuePolicy Abort;
    
public static InvalidSystemCommonEventParameterValuePolicy SnapToLimits;
}
public class Melanchall.DryWetMidi.Core.KeySignatureEvent : MetaEvent {
    
public static sbyte DefaultKey;
    
public static byte DefaultScale;
    
public static sbyte MinKey;
    
public static sbyte MaxKey;
    
public static byte MinScale;
    
public static byte MaxScale;
    
private sbyte _key;
    
private byte _scale;
    
public sbyte Key { get; public set; }
    
public byte Scale { get; public set; }
    public KeySignatureEvent(sbyte key, byte scale);
    public sbyte get_Key();
    public void set_Key(sbyte value);
    public byte get_Scale();
    public void set_Scale(byte value);
    private int ProcessValue(int value, string property, int min, int max, InvalidMetaEventParameterValuePolicy policy);
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual int GetContentSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.LyricEvent : BaseTextEvent {
    public LyricEvent(string text);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.MarkerEvent : BaseTextEvent {
    public MarkerEvent(string text);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public abstract class Melanchall.DryWetMidi.Core.MetaEvent : MidiEvent {
    internal MetaEvent(MidiEventType eventType);
    internal sealed virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal sealed virtual void Write(MidiWriter writer, WritingSettings settings);
    internal sealed virtual int GetSize(WritingSettings settings);
    public static Byte[] GetStandardMetaEventStatusBytes();
    protected abstract virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected abstract virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected abstract virtual int GetContentSize(WritingSettings settings);
}
internal class Melanchall.DryWetMidi.Core.MetaEventReader : object {
    public sealed virtual MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte);
    private static bool IsMetaEventType(Type type);
}
internal class Melanchall.DryWetMidi.Core.MetaEventWriter : object {
    public sealed virtual void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte);
    public sealed virtual int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte);
    public sealed virtual byte GetStatusByte(MidiEvent midiEvent);
}
public abstract class Melanchall.DryWetMidi.Core.MidiChunk : object {
    
public static int IdLength;
    [CompilerGeneratedAttribute]

private string <ChunkId>k__BackingField;
    
public string ChunkId { get; }
    protected MidiChunk(string id);
    [CompilerGeneratedAttribute]
public string get_ChunkId();
    public abstract virtual MidiChunk Clone();
    public static String[] GetStandardChunkIds();
    public static bool Equals(MidiChunk chunk1, MidiChunk chunk2);
    public static bool Equals(MidiChunk chunk1, MidiChunk chunk2, String& message);
    public static bool Equals(MidiChunk chunk1, MidiChunk chunk2, MidiChunkEqualityCheckSettings settings);
    public static bool Equals(MidiChunk chunk1, MidiChunk chunk2, MidiChunkEqualityCheckSettings settings, String& message);
    internal void Read(MidiReader reader, ReadingSettings settings);
    internal void Write(MidiWriter writer, WritingSettings settings);
    protected abstract virtual void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size);
    protected abstract virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected abstract virtual UInt32 GetContentSize(WritingSettings settings);
}
internal static class Melanchall.DryWetMidi.Core.MidiChunkEquality : object {
    public static bool Equals(MidiChunk midiChunk1, MidiChunk midiChunk2, MidiChunkEqualityCheckSettings settings, String& message);
}
public class Melanchall.DryWetMidi.Core.MidiChunkEqualityCheckSettings : object {
    [CompilerGeneratedAttribute]

private MidiEventEqualityCheckSettings <EventEqualityCheckSettings>k__BackingField;
    
public MidiEventEqualityCheckSettings EventEqualityCheckSettings { get; public set; }
    [CompilerGeneratedAttribute]
public MidiEventEqualityCheckSettings get_EventEqualityCheckSettings();
    [CompilerGeneratedAttribute]
public void set_EventEqualityCheckSettings(MidiEventEqualityCheckSettings value);
}
public abstract class Melanchall.DryWetMidi.Core.MidiEvent : object {
    
public static int UnknownContentSize;
    
internal long _deltaTime;
    [CompilerGeneratedAttribute]

private MidiEventType <EventType>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Flag>k__BackingField;
    
public MidiEventType EventType { get; }
    
public long DeltaTime { get; public set; }
    
internal bool Flag { get; internal set; }
    public MidiEvent(MidiEventType eventType);
    [CompilerGeneratedAttribute]
public MidiEventType get_EventType();
    public long get_DeltaTime();
    public void set_DeltaTime(long value);
    [CompilerGeneratedAttribute]
internal bool get_Flag();
    [CompilerGeneratedAttribute]
internal void set_Flag(bool value);
    internal abstract virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal abstract virtual void Write(MidiWriter writer, WritingSettings settings);
    internal abstract virtual int GetSize(WritingSettings settings);
    protected abstract virtual MidiEvent CloneEvent();
    public MidiEvent Clone();
    public static bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2);
    public static bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, String& message);
    public static bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, MidiEventEqualityCheckSettings settings);
    public static bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, MidiEventEqualityCheckSettings settings, String& message);
}
internal static class Melanchall.DryWetMidi.Core.MidiEventEquality : object {
    
private static Dictionary`2<MidiEventType, Func`3<MidiEvent, MidiEvent, bool>> Comparers;
    private static MidiEventEquality();
    public static bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, MidiEventEqualityCheckSettings settings, String& message);
}
public class Melanchall.DryWetMidi.Core.MidiEventEqualityCheckSettings : object {
    
private StringComparison _textComparison;
    [CompilerGeneratedAttribute]

private bool <CompareDeltaTimes>k__BackingField;
    
public bool CompareDeltaTimes { get; public set; }
    
public StringComparison TextComparison { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CompareDeltaTimes();
    [CompilerGeneratedAttribute]
public void set_CompareDeltaTimes(bool value);
    public StringComparison get_TextComparison();
    public void set_TextComparison(StringComparison value);
}
public class Melanchall.DryWetMidi.Core.MidiEventToBytesConverter : object {
    
private MemoryStream _dataBytesStream;
    
private MidiWriter _midiWriter;
    
private WritingSettings _writingSettings;
    
private bool _disposed;
    [CompilerGeneratedAttribute]

private bool <WriteDeltaTimes>k__BackingField;
    
public bool UseRunningStatus { get; public set; }
    
public bool NoteOffAsSilentNoteOn { get; public set; }
    
public EventTypesCollection CustomMetaEventTypes { get; public set; }
    
public Encoding TextEncoding { get; public set; }
    
public bool WriteDeltaTimes { get; public set; }
    public MidiEventToBytesConverter(int capacity);
    public bool get_UseRunningStatus();
    public void set_UseRunningStatus(bool value);
    public bool get_NoteOffAsSilentNoteOn();
    public void set_NoteOffAsSilentNoteOn(bool value);
    public EventTypesCollection get_CustomMetaEventTypes();
    public void set_CustomMetaEventTypes(EventTypesCollection value);
    public Encoding get_TextEncoding();
    public void set_TextEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public bool get_WriteDeltaTimes();
    [CompilerGeneratedAttribute]
public void set_WriteDeltaTimes(bool value);
    public Byte[] Convert(MidiEvent midiEvent);
    public Byte[] Convert(MidiEvent midiEvent, int minSize);
    public Byte[] Convert(IEnumerable`1<MidiEvent> midiEvents);
    private Byte[] GetBytes(int minSize);
    private void PrepareStream();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public enum Melanchall.DryWetMidi.Core.MidiEventType : Enum {
    
public byte value__;
    
public static MidiEventType NormalSysEx;
    
public static MidiEventType EscapeSysEx;
    
public static MidiEventType SequenceNumber;
    
public static MidiEventType Text;
    
public static MidiEventType CopyrightNotice;
    
public static MidiEventType SequenceTrackName;
    
public static MidiEventType InstrumentName;
    
public static MidiEventType Lyric;
    
public static MidiEventType Marker;
    
public static MidiEventType CuePoint;
    
public static MidiEventType ProgramName;
    
public static MidiEventType DeviceName;
    
public static MidiEventType ChannelPrefix;
    
public static MidiEventType PortPrefix;
    
public static MidiEventType EndOfTrack;
    
public static MidiEventType SetTempo;
    
public static MidiEventType SmpteOffset;
    
public static MidiEventType TimeSignature;
    
public static MidiEventType KeySignature;
    
public static MidiEventType SequencerSpecific;
    
public static MidiEventType UnknownMeta;
    
public static MidiEventType CustomMeta;
    
public static MidiEventType NoteOff;
    
public static MidiEventType NoteOn;
    
public static MidiEventType NoteAftertouch;
    
public static MidiEventType ControlChange;
    
public static MidiEventType ProgramChange;
    
public static MidiEventType ChannelAftertouch;
    
public static MidiEventType PitchBend;
    
public static MidiEventType TimingClock;
    
public static MidiEventType Start;
    
public static MidiEventType Continue;
    
public static MidiEventType Stop;
    
public static MidiEventType ActiveSensing;
    
public static MidiEventType Reset;
    
public static MidiEventType MidiTimeCode;
    
public static MidiEventType SongPositionPointer;
    
public static MidiEventType SongSelect;
    
public static MidiEventType TuneRequest;
}
public class Melanchall.DryWetMidi.Core.MidiFile : object {
    
private static string RiffChunkId;
    
private static int RmidPreambleSize;
    
internal Nullable`1<ushort> _originalFormat;
    [CompilerGeneratedAttribute]

private TimeDivision <TimeDivision>k__BackingField;
    [CompilerGeneratedAttribute]

private ChunksCollection <Chunks>k__BackingField;
    
public TimeDivision TimeDivision { get; public set; }
    
public ChunksCollection Chunks { get; }
    
public MidiFileFormat OriginalFormat { get; internal set; }
    public MidiFile(IEnumerable`1<MidiChunk> chunks);
    public MidiFile(MidiChunk[] chunks);
    [CompilerGeneratedAttribute]
public TimeDivision get_TimeDivision();
    [CompilerGeneratedAttribute]
public void set_TimeDivision(TimeDivision value);
    [CompilerGeneratedAttribute]
public ChunksCollection get_Chunks();
    public MidiFileFormat get_OriginalFormat();
    internal void set_OriginalFormat(MidiFileFormat value);
    public static MidiFile Read(string filePath, ReadingSettings settings);
    public void Write(string filePath, bool overwriteFile, MidiFileFormat format, WritingSettings settings);
    public static MidiFile Read(Stream stream, ReadingSettings settings);
    public void Write(Stream stream, MidiFileFormat format, WritingSettings settings);
    public MidiFile Clone();
    public static bool Equals(MidiFile midiFile1, MidiFile midiFile2);
    public static bool Equals(MidiFile midiFile1, MidiFile midiFile2, String& message);
    public static bool Equals(MidiFile midiFile1, MidiFile midiFile2, MidiFileEqualityCheckSettings settings);
    public static bool Equals(MidiFile midiFile1, MidiFile midiFile2, MidiFileEqualityCheckSettings settings, String& message);
    private static MidiChunk ReadChunk(MidiReader reader, ReadingSettings settings, int actualTrackChunksCount, Nullable`1<int> expectedTrackChunksCount);
    private static void ReactOnUnexpectedTrackChunksCount(UnexpectedTrackChunksCountPolicy policy, int actualTrackChunksCount, int expectedTrackChunksCount);
    private static void ReactOnNotEnoughBytes(NotEnoughBytesPolicy policy, Exception exception);
    private static MidiChunk TryCreateChunk(string chunkId, ChunkTypesCollection chunksTypes);
    private static bool IsChunkType(Type type);
}
internal static class Melanchall.DryWetMidi.Core.MidiFileEquality : object {
    public static bool Equals(MidiFile midiFile1, MidiFile midiFile2, MidiFileEqualityCheckSettings settings, String& message);
}
public class Melanchall.DryWetMidi.Core.MidiFileEqualityCheckSettings : object {
    [CompilerGeneratedAttribute]

private bool <CompareOriginalFormat>k__BackingField;
    [CompilerGeneratedAttribute]

private MidiChunkEqualityCheckSettings <ChunkEqualityCheckSettings>k__BackingField;
    
public bool CompareOriginalFormat { get; public set; }
    
public MidiChunkEqualityCheckSettings ChunkEqualityCheckSettings { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CompareOriginalFormat();
    [CompilerGeneratedAttribute]
public void set_CompareOriginalFormat(bool value);
    [CompilerGeneratedAttribute]
public MidiChunkEqualityCheckSettings get_ChunkEqualityCheckSettings();
    [CompilerGeneratedAttribute]
public void set_ChunkEqualityCheckSettings(MidiChunkEqualityCheckSettings value);
}
public enum Melanchall.DryWetMidi.Core.MidiFileFormat : Enum {
    
public ushort value__;
    
public static MidiFileFormat SingleTrack;
    
public static MidiFileFormat MultiTrack;
    
public static MidiFileFormat MultiSequence;
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Core.MidiFileUtilities : object {
    [ExtensionAttribute]
public static IEnumerable`1<FourBitNumber> GetChannels(MidiFile midiFile);
    [ExtensionAttribute]
internal static IEnumerable`1<MidiEvent> GetEvents(MidiFile midiFile);
}
public class Melanchall.DryWetMidi.Core.MidiReader : object {
    
private static Byte[] EmptyByteArray;
    
private ReaderSettings _settings;
    
private Stream _stream;
    
private bool _isStreamWrapped;
    
private bool _useBuffering;
    
private Byte[] _buffer;
    
private int _bufferSize;
    
private int _bufferPosition;
    
private long _bufferStart;
    
private long _position;
    
private bool _disposed;
    [CompilerGeneratedAttribute]

private long <Length>k__BackingField;
    
public long Position { get; public set; }
    
public long Length { get; }
    
public bool EndReached { get; }
    public MidiReader(Stream stream, ReaderSettings settings);
    private static MidiReader();
    public long get_Position();
    public void set_Position(long value);
    [CompilerGeneratedAttribute]
public long get_Length();
    public bool get_EndReached();
    public byte ReadByte();
    public sbyte ReadSByte();
    public Byte[] ReadBytes(int count);
    public ushort ReadWord();
    public UInt32 ReadDword();
    public short ReadInt16();
    public string ReadString(int count);
    public int ReadVlqNumber();
    public long ReadVlqLongNumber();
    public UInt32 Read3ByteDword();
    private Byte[] ReadBytesInternal(int count);
    private Byte[] ReadBytesWithBuffering(int count);
    private Byte[] ReadBytesFromBuffer(int count);
    private Byte[] ReadBytesWithoutBuffering(int count);
    private bool EnsureBufferIsReadyForReading();
    private void PrepareBuffer();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public enum Melanchall.DryWetMidi.Core.MidiTimeCodeComponent : Enum {
    
public byte value__;
    
public static MidiTimeCodeComponent FramesLsb;
    
public static MidiTimeCodeComponent FramesMsb;
    
public static MidiTimeCodeComponent SecondsLsb;
    
public static MidiTimeCodeComponent SecondsMsb;
    
public static MidiTimeCodeComponent MinutesLsb;
    
public static MidiTimeCodeComponent MinutesMsb;
    
public static MidiTimeCodeComponent HoursLsb;
    
public static MidiTimeCodeComponent HoursMsbAndTimeCodeType;
}
public class Melanchall.DryWetMidi.Core.MidiTimeCodeEvent : SystemCommonEvent {
    
private static Dictionary`2<MidiTimeCodeComponent, byte> ComponentValueMasks;
    [CompilerGeneratedAttribute]

private MidiTimeCodeComponent <Component>k__BackingField;
    [CompilerGeneratedAttribute]

private FourBitNumber <ComponentValue>k__BackingField;
    
public MidiTimeCodeComponent Component { get; public set; }
    
public FourBitNumber ComponentValue { get; public set; }
    public MidiTimeCodeEvent(MidiTimeCodeComponent component, FourBitNumber componentValue);
    private static MidiTimeCodeEvent();
    [CompilerGeneratedAttribute]
public MidiTimeCodeComponent get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(MidiTimeCodeComponent value);
    [CompilerGeneratedAttribute]
public FourBitNumber get_ComponentValue();
    [CompilerGeneratedAttribute]
public void set_ComponentValue(FourBitNumber value);
    internal virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal virtual void Write(MidiWriter writer, WritingSettings settings);
    internal virtual int GetSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public enum Melanchall.DryWetMidi.Core.MidiTimeCodeType : Enum {
    
public byte value__;
    
public static MidiTimeCodeType TwentyFour;
    
public static MidiTimeCodeType TwentyFive;
    
public static MidiTimeCodeType ThirtyDrop;
    
public static MidiTimeCodeType Thirty;
}
public class Melanchall.DryWetMidi.Core.MidiWriter : object {
    
private WriterSettings _settings;
    
private Stream _stream;
    
private Byte[] _numberBuffer;
    
private bool _useBuffering;
    
private Byte[] _buffer;
    
private int _bufferPosition;
    
private bool _disposed;
    public MidiWriter(Stream stream, WriterSettings settings);
    public void WriteByte(byte value);
    public void WriteBytes(Byte[] bytes);
    public void WriteSByte(sbyte value);
    public void WriteWord(ushort value);
    public void WriteDword(UInt32 value);
    public void WriteInt16(short value);
    public void WriteString(string value);
    public void WriteVlqNumber(int value);
    public void WriteVlqNumber(long value);
    public void Write3ByteDword(UInt32 value);
    private void PrepareBuffer();
    private void WriteBytes(Byte[] bytes, int offset, int length);
    private void FlushBuffer();
    private void WriteBytesWithBuffering(Byte[] bytes, int offset, int length);
    private void WriteBytesToBuffer(Byte[] bytes, int offset, int length);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class Melanchall.DryWetMidi.Core.MissedEndOfTrackEventException : MidiException {
}
public enum Melanchall.DryWetMidi.Core.MissedEndOfTrackPolicy : Enum {
    
public byte value__;
    
public static MissedEndOfTrackPolicy Ignore;
    
public static MissedEndOfTrackPolicy Abort;
}
internal class Melanchall.DryWetMidi.Core.MultiSequenceChunksConverter : object {
    public sealed virtual IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks);
    private static Nullable`1<ushort> GetSequenceNumber(TrackChunk trackChunk);
}
internal class Melanchall.DryWetMidi.Core.MultiTrackChunksConverter : object {
    
private static int ChannelsCount;
    public sealed virtual IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks);
}
public class Melanchall.DryWetMidi.Core.NoHeaderChunkException : MidiException {
}
public enum Melanchall.DryWetMidi.Core.NoHeaderChunkPolicy : Enum {
    
public int value__;
    
public static NoHeaderChunkPolicy Abort;
    
public static NoHeaderChunkPolicy Ignore;
}
public class Melanchall.DryWetMidi.Core.NormalSysExEvent : SysExEvent {
    public NormalSysExEvent(Byte[] data);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.NoteAftertouchEvent : ChannelEvent {
    
public SevenBitNumber NoteNumber { get; public set; }
    
public SevenBitNumber AftertouchValue { get; public set; }
    public NoteAftertouchEvent(SevenBitNumber noteNumber, SevenBitNumber aftertouchValue);
    public SevenBitNumber get_NoteNumber();
    public void set_NoteNumber(SevenBitNumber value);
    public SevenBitNumber get_AftertouchValue();
    public void set_AftertouchValue(SevenBitNumber value);
    internal virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal virtual void Write(MidiWriter writer, WritingSettings settings);
    internal virtual int GetSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public abstract class Melanchall.DryWetMidi.Core.NoteEvent : ChannelEvent {
    
public SevenBitNumber NoteNumber { get; public set; }
    
public SevenBitNumber Velocity { get; public set; }
    protected NoteEvent(MidiEventType eventType);
    protected NoteEvent(MidiEventType eventType, SevenBitNumber noteNumber, SevenBitNumber velocity);
    public SevenBitNumber get_NoteNumber();
    public void set_NoteNumber(SevenBitNumber value);
    public SevenBitNumber get_Velocity();
    public void set_Velocity(SevenBitNumber value);
    internal sealed virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal sealed virtual void Write(MidiWriter writer, WritingSettings settings);
    internal sealed virtual int GetSize(WritingSettings settings);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Core.NoteEventUtilities : object {
    [ExtensionAttribute]
public static NoteName GetNoteName(NoteEvent noteEvent);
    [ExtensionAttribute]
public static int GetNoteOctave(NoteEvent noteEvent);
    [ExtensionAttribute]
public static void SetNoteNumber(NoteEvent noteEvent, NoteName noteName, int octave);
    public static bool IsNoteOnCorrespondToNoteOff(NoteOnEvent noteOnEvent, NoteOffEvent noteOffEvent);
}
public class Melanchall.DryWetMidi.Core.NotEnoughBytesException : MidiException {
    [CompilerGeneratedAttribute]

private long <ExpectedCount>k__BackingField;
    [CompilerGeneratedAttribute]

private long <ActualCount>k__BackingField;
    
public long ExpectedCount { get; }
    
public long ActualCount { get; }
    internal NotEnoughBytesException(string message, Exception innerException);
    internal NotEnoughBytesException(string message, long expectedCount, long actualCount);
    [CompilerGeneratedAttribute]
public long get_ExpectedCount();
    [CompilerGeneratedAttribute]
public long get_ActualCount();
}
public enum Melanchall.DryWetMidi.Core.NotEnoughBytesPolicy : Enum {
    
public int value__;
    
public static NotEnoughBytesPolicy Abort;
    
public static NotEnoughBytesPolicy Ignore;
}
public class Melanchall.DryWetMidi.Core.NoteOffEvent : NoteEvent {
    public NoteOffEvent(SevenBitNumber noteNumber, SevenBitNumber velocity);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.NoteOnEvent : NoteEvent {
    public NoteOnEvent(SevenBitNumber noteNumber, SevenBitNumber velocity);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.PitchBendEvent : ChannelEvent {
    
public static ushort MinPitchValue;
    
public static ushort MaxPitchValue;
    
public ushort PitchValue { get; public set; }
    public PitchBendEvent(ushort pitchValue);
    public ushort get_PitchValue();
    public void set_PitchValue(ushort value);
    internal virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal virtual void Write(MidiWriter writer, WritingSettings settings);
    internal virtual int GetSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.PortPrefixEvent : MetaEvent {
    [CompilerGeneratedAttribute]

private byte <Port>k__BackingField;
    
public byte Port { get; public set; }
    public PortPrefixEvent(byte port);
    [CompilerGeneratedAttribute]
public byte get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(byte value);
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual int GetContentSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.ProgramChangeEvent : ChannelEvent {
    
public SevenBitNumber ProgramNumber { get; public set; }
    public ProgramChangeEvent(SevenBitNumber programNumber);
    public SevenBitNumber get_ProgramNumber();
    public void set_ProgramNumber(SevenBitNumber value);
    internal virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal virtual void Write(MidiWriter writer, WritingSettings settings);
    internal virtual int GetSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.ProgramNameEvent : BaseTextEvent {
    public ProgramNameEvent(string programName);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.ReaderSettings : object {
    
private int _nonSeekableStreamBufferSize;
    
private int _nonSeekableStreamIncrementalBytesReadingThreshold;
    
private int _nonSeekableStreamIncrementalBytesReadingStep;
    
private int _bufferSize;
    
private BufferingPolicy _bufferingPolicy;
    [CompilerGeneratedAttribute]

private Byte[] <Buffer>k__BackingField;
    
public int NonSeekableStreamBufferSize { get; public set; }
    
public int NonSeekableStreamIncrementalBytesReadingThreshold { get; public set; }
    
public int NonSeekableStreamIncrementalBytesReadingStep { get; public set; }
    
public BufferingPolicy BufferingPolicy { get; public set; }
    
public int BufferSize { get; public set; }
    
public Byte[] Buffer { get; public set; }
    public int get_NonSeekableStreamBufferSize();
    public void set_NonSeekableStreamBufferSize(int value);
    public int get_NonSeekableStreamIncrementalBytesReadingThreshold();
    public void set_NonSeekableStreamIncrementalBytesReadingThreshold(int value);
    public int get_NonSeekableStreamIncrementalBytesReadingStep();
    public void set_NonSeekableStreamIncrementalBytesReadingStep(int value);
    public BufferingPolicy get_BufferingPolicy();
    public void set_BufferingPolicy(BufferingPolicy value);
    public int get_BufferSize();
    public void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
public void set_Buffer(Byte[] value);
}
public class Melanchall.DryWetMidi.Core.ReadingSettings : object {
    
private UnexpectedTrackChunksCountPolicy _unexpectedTrackChunksCountPolicy;
    
private ExtraTrackChunkPolicy _extraTrackChunkPolicy;
    
private UnknownChunkIdPolicy _unknownChunkIdPolicy;
    
private MissedEndOfTrackPolicy _missedEndOfTrackPolicy;
    
private SilentNoteOnPolicy _silentNoteOnPolicy;
    
private InvalidChunkSizePolicy _invalidChunkSizePolicy;
    
private UnknownFileFormatPolicy _unknownFileFormatPolicy;
    
private UnknownChannelEventPolicy _unknownChannelEventPolicy;
    
private InvalidChannelEventParameterValuePolicy _invalidChannelEventParameterValuePolicy;
    
private InvalidMetaEventParameterValuePolicy _invalidMetaEventParameterValuePolicy;
    
private InvalidSystemCommonEventParameterValuePolicy _invalidSystemCommonEventParameterValuePolicy;
    
private NotEnoughBytesPolicy _notEnoughBytesPolicy;
    
private NoHeaderChunkPolicy _noHeaderChunkPolicy;
    
private ZeroLengthDataPolicy _zeroLengthDataPolicy;
    
private EndOfTrackStoringPolicy _endOfTrackStoringPolicy;
    [CompilerGeneratedAttribute]

private UnknownChannelEventCallback <UnknownChannelEventCallback>k__BackingField;
    [CompilerGeneratedAttribute]

private ChunkTypesCollection <CustomChunkTypes>k__BackingField;
    [CompilerGeneratedAttribute]

private EventTypesCollection <CustomMetaEventTypes>k__BackingField;
    [CompilerGeneratedAttribute]

private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]

private DecodeTextCallback <DecodeTextCallback>k__BackingField;
    [CompilerGeneratedAttribute]

private ReaderSettings <ReaderSettings>k__BackingField;
    
public UnexpectedTrackChunksCountPolicy UnexpectedTrackChunksCountPolicy { get; public set; }
    
public ExtraTrackChunkPolicy ExtraTrackChunkPolicy { get; public set; }
    
public UnknownChunkIdPolicy UnknownChunkIdPolicy { get; public set; }
    
public MissedEndOfTrackPolicy MissedEndOfTrackPolicy { get; public set; }
    
public SilentNoteOnPolicy SilentNoteOnPolicy { get; public set; }
    
public InvalidChunkSizePolicy InvalidChunkSizePolicy { get; public set; }
    
public UnknownFileFormatPolicy UnknownFileFormatPolicy { get; public set; }
    
public UnknownChannelEventPolicy UnknownChannelEventPolicy { get; public set; }
    
public UnknownChannelEventCallback UnknownChannelEventCallback { get; public set; }
    
public InvalidChannelEventParameterValuePolicy InvalidChannelEventParameterValuePolicy { get; public set; }
    
public InvalidMetaEventParameterValuePolicy InvalidMetaEventParameterValuePolicy { get; public set; }
    
public InvalidSystemCommonEventParameterValuePolicy InvalidSystemCommonEventParameterValuePolicy { get; public set; }
    
public NotEnoughBytesPolicy NotEnoughBytesPolicy { get; public set; }
    
public NoHeaderChunkPolicy NoHeaderChunkPolicy { get; public set; }
    
public ChunkTypesCollection CustomChunkTypes { get; public set; }
    
public EventTypesCollection CustomMetaEventTypes { get; public set; }
    
public Encoding TextEncoding { get; public set; }
    
public DecodeTextCallback DecodeTextCallback { get; public set; }
    
public ZeroLengthDataPolicy ZeroLengthDataPolicy { get; public set; }
    
public EndOfTrackStoringPolicy EndOfTrackStoringPolicy { get; public set; }
    
public ReaderSettings ReaderSettings { get; public set; }
    public UnexpectedTrackChunksCountPolicy get_UnexpectedTrackChunksCountPolicy();
    public void set_UnexpectedTrackChunksCountPolicy(UnexpectedTrackChunksCountPolicy value);
    public ExtraTrackChunkPolicy get_ExtraTrackChunkPolicy();
    public void set_ExtraTrackChunkPolicy(ExtraTrackChunkPolicy value);
    public UnknownChunkIdPolicy get_UnknownChunkIdPolicy();
    public void set_UnknownChunkIdPolicy(UnknownChunkIdPolicy value);
    public MissedEndOfTrackPolicy get_MissedEndOfTrackPolicy();
    public void set_MissedEndOfTrackPolicy(MissedEndOfTrackPolicy value);
    public SilentNoteOnPolicy get_SilentNoteOnPolicy();
    public void set_SilentNoteOnPolicy(SilentNoteOnPolicy value);
    public InvalidChunkSizePolicy get_InvalidChunkSizePolicy();
    public void set_InvalidChunkSizePolicy(InvalidChunkSizePolicy value);
    public UnknownFileFormatPolicy get_UnknownFileFormatPolicy();
    public void set_UnknownFileFormatPolicy(UnknownFileFormatPolicy value);
    public UnknownChannelEventPolicy get_UnknownChannelEventPolicy();
    public void set_UnknownChannelEventPolicy(UnknownChannelEventPolicy value);
    [CompilerGeneratedAttribute]
public UnknownChannelEventCallback get_UnknownChannelEventCallback();
    [CompilerGeneratedAttribute]
public void set_UnknownChannelEventCallback(UnknownChannelEventCallback value);
    public InvalidChannelEventParameterValuePolicy get_InvalidChannelEventParameterValuePolicy();
    public void set_InvalidChannelEventParameterValuePolicy(InvalidChannelEventParameterValuePolicy value);
    public InvalidMetaEventParameterValuePolicy get_InvalidMetaEventParameterValuePolicy();
    public void set_InvalidMetaEventParameterValuePolicy(InvalidMetaEventParameterValuePolicy value);
    public InvalidSystemCommonEventParameterValuePolicy get_InvalidSystemCommonEventParameterValuePolicy();
    public void set_InvalidSystemCommonEventParameterValuePolicy(InvalidSystemCommonEventParameterValuePolicy value);
    public NotEnoughBytesPolicy get_NotEnoughBytesPolicy();
    public void set_NotEnoughBytesPolicy(NotEnoughBytesPolicy value);
    public NoHeaderChunkPolicy get_NoHeaderChunkPolicy();
    public void set_NoHeaderChunkPolicy(NoHeaderChunkPolicy value);
    [CompilerGeneratedAttribute]
public ChunkTypesCollection get_CustomChunkTypes();
    [CompilerGeneratedAttribute]
public void set_CustomChunkTypes(ChunkTypesCollection value);
    [CompilerGeneratedAttribute]
public EventTypesCollection get_CustomMetaEventTypes();
    [CompilerGeneratedAttribute]
public void set_CustomMetaEventTypes(EventTypesCollection value);
    [CompilerGeneratedAttribute]
public Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
public void set_TextEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public DecodeTextCallback get_DecodeTextCallback();
    [CompilerGeneratedAttribute]
public void set_DecodeTextCallback(DecodeTextCallback value);
    public ZeroLengthDataPolicy get_ZeroLengthDataPolicy();
    public void set_ZeroLengthDataPolicy(ZeroLengthDataPolicy value);
    public EndOfTrackStoringPolicy get_EndOfTrackStoringPolicy();
    public void set_EndOfTrackStoringPolicy(EndOfTrackStoringPolicy value);
    [CompilerGeneratedAttribute]
public ReaderSettings get_ReaderSettings();
    [CompilerGeneratedAttribute]
public void set_ReaderSettings(ReaderSettings value);
}
public class Melanchall.DryWetMidi.Core.ResetEvent : SystemRealTimeEvent {
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.SequenceNumberEvent : MetaEvent {
    [CompilerGeneratedAttribute]

private ushort <Number>k__BackingField;
    
public ushort Number { get; public set; }
    public SequenceNumberEvent(ushort number);
    [CompilerGeneratedAttribute]
public ushort get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(ushort value);
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual int GetContentSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.SequencerSpecificEvent : MetaEvent {
    [CompilerGeneratedAttribute]

private Byte[] <Data>k__BackingField;
    
public Byte[] Data { get; public set; }
    public SequencerSpecificEvent(Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual int GetContentSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.SequenceTrackNameEvent : BaseTextEvent {
    public SequenceTrackNameEvent(string name);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.SetTempoEvent : MetaEvent {
    
public static long DefaultMicrosecondsPerQuarterNote;
    
public static long MinMicrosecondsPerQuarterNote;
    
public static long MaxMicrosecondsPerQuarterNote;
    
private long _microsecondsPerBeat;
    
public long MicrosecondsPerQuarterNote { get; public set; }
    public SetTempoEvent(long microsecondsPerQuarterNote);
    public long get_MicrosecondsPerQuarterNote();
    public void set_MicrosecondsPerQuarterNote(long value);
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual int GetContentSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public enum Melanchall.DryWetMidi.Core.SilentNoteOnPolicy : Enum {
    
public byte value__;
    
public static SilentNoteOnPolicy NoteOff;
    
public static SilentNoteOnPolicy NoteOn;
}
internal class Melanchall.DryWetMidi.Core.SingleTrackChunksConverter : object {
    public sealed virtual IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks);
}
public static class Melanchall.DryWetMidi.Core.SmfConstants : object {
    
public static Encoding DefaultTextEncoding { get; }
    public static Encoding get_DefaultTextEncoding();
}
internal class Melanchall.DryWetMidi.Core.SmpteData : object {
    
private static byte MaxHours;
    
private static byte MaxMinutes;
    
private static byte MaxSeconds;
    
private static byte MaxSubFrames;
    
private static int FormatMask;
    
private static int FormatOffset;
    
private static int HoursMask;
    
private static Dictionary`2<SmpteFormat, byte> MaxFrames;
    
private static SmpteFormat[] Formats;
    
private SmpteFormat _format;
    
private byte _hours;
    
private byte _minutes;
    
private byte _seconds;
    
private byte _frames;
    
private byte _subFrames;
    
public SmpteFormat Format { get; public set; }
    
public byte Hours { get; public set; }
    
public byte Minutes { get; public set; }
    
public byte Seconds { get; public set; }
    
public byte Frames { get; public set; }
    
public byte SubFrames { get; public set; }
    public SmpteData(SmpteFormat format, byte hours, byte minutes, byte seconds, byte frames, byte subFrames);
    private static SmpteData();
    public SmpteFormat get_Format();
    public void set_Format(SmpteFormat value);
    public byte get_Hours();
    public void set_Hours(byte value);
    public byte get_Minutes();
    public void set_Minutes(byte value);
    public byte get_Seconds();
    public void set_Seconds(byte value);
    public byte get_Frames();
    public void set_Frames(byte value);
    public byte get_SubFrames();
    public void set_SubFrames(byte value);
    public static SmpteData Read(Func`1<byte> byteReader, Func`4<byte, string, byte, byte> valueProcessor);
    public void Write(Action`1<byte> byteWriter);
    internal static SmpteFormat GetFormat(byte formatAndHours);
    internal static byte GetHours(byte formatAndHours);
    internal byte GetFormatAndHours();
    internal static byte GetFormatAndHours(SmpteFormat smpteFormat, byte hours);
}
public class Melanchall.DryWetMidi.Core.SmpteOffsetEvent : MetaEvent {
    
private SmpteData _smpteData;
    
public SmpteFormat Format { get; public set; }
    
public byte Hours { get; public set; }
    
public byte Minutes { get; public set; }
    
public byte Seconds { get; public set; }
    
public byte Frames { get; public set; }
    
public byte SubFrames { get; public set; }
    public SmpteOffsetEvent(SmpteFormat format, byte hours, byte minutes, byte seconds, byte frames, byte subFrames);
    public SmpteFormat get_Format();
    public void set_Format(SmpteFormat value);
    public byte get_Hours();
    public void set_Hours(byte value);
    public byte get_Minutes();
    public void set_Minutes(byte value);
    public byte get_Seconds();
    public void set_Seconds(byte value);
    public byte get_Frames();
    public void set_Frames(byte value);
    public byte get_SubFrames();
    public void set_SubFrames(byte value);
    private byte ProcessValue(byte value, string property, byte max, InvalidMetaEventParameterValuePolicy policy);
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual int GetContentSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.SmpteTimeDivision : TimeDivision {
    [CompilerGeneratedAttribute]

private SmpteFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]

private byte <Resolution>k__BackingField;
    
public SmpteFormat Format { get; }
    
public byte Resolution { get; }
    public SmpteTimeDivision(SmpteFormat format, byte resolution);
    [CompilerGeneratedAttribute]
public SmpteFormat get_Format();
    [CompilerGeneratedAttribute]
public byte get_Resolution();
    public static bool op_Equality(SmpteTimeDivision timeDivision1, SmpteTimeDivision timeDivision2);
    public static bool op_Inequality(SmpteTimeDivision timeDivision1, SmpteTimeDivision timeDivision2);
    internal virtual short ToInt16();
    public virtual TimeDivision Clone();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Melanchall.DryWetMidi.Core.SongPositionPointerEvent : SystemCommonEvent {
    
private SevenBitNumber _lsb;
    
private SevenBitNumber _msb;
    
public ushort PointerValue { get; public set; }
    public SongPositionPointerEvent(ushort pointerValue);
    public ushort get_PointerValue();
    public void set_PointerValue(ushort value);
    private SevenBitNumber ProcessValue(byte value, string property, InvalidSystemCommonEventParameterValuePolicy policy);
    internal virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal virtual void Write(MidiWriter writer, WritingSettings settings);
    internal virtual int GetSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.SongSelectEvent : SystemCommonEvent {
    [CompilerGeneratedAttribute]

private SevenBitNumber <Number>k__BackingField;
    
public SevenBitNumber Number { get; public set; }
    public SongSelectEvent(SevenBitNumber number);
    [CompilerGeneratedAttribute]
public SevenBitNumber get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(SevenBitNumber value);
    internal virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal virtual void Write(MidiWriter writer, WritingSettings settings);
    internal virtual int GetSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
internal static class Melanchall.DryWetMidi.Core.StandardChunkIds : object {
    
private static String[] _ids;
    public static String[] GetIds();
}
internal static class Melanchall.DryWetMidi.Core.StandardMetaEventStatusBytes : object {
    
private static Byte[] _statusBytes;
    public static Byte[] GetStatusBytes();
}
public class Melanchall.DryWetMidi.Core.StartEvent : SystemRealTimeEvent {
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.StopEvent : SystemRealTimeEvent {
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public abstract class Melanchall.DryWetMidi.Core.SysExEvent : MidiEvent {
    
public static byte EndOfEventByte;
    [CompilerGeneratedAttribute]

private Byte[] <Data>k__BackingField;
    
public bool Completed { get; }
    
public Byte[] Data { get; public set; }
    protected SysExEvent(MidiEventType eventType);
    public bool get_Completed();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    internal sealed virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal sealed virtual void Write(MidiWriter writer, WritingSettings settings);
    internal sealed virtual int GetSize(WritingSettings settings);
}
internal class Melanchall.DryWetMidi.Core.SysExEventReader : object {
    public sealed virtual MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte);
}
internal class Melanchall.DryWetMidi.Core.SysExEventWriter : object {
    public sealed virtual void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte);
    public sealed virtual int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte);
    public sealed virtual byte GetStatusByte(MidiEvent midiEvent);
}
public abstract class Melanchall.DryWetMidi.Core.SystemCommonEvent : MidiEvent {
    protected SystemCommonEvent(MidiEventType eventType);
}
internal class Melanchall.DryWetMidi.Core.SystemCommonEventReader : object {
    public sealed virtual MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte);
}
internal class Melanchall.DryWetMidi.Core.SystemCommonEventWriter : object {
    public sealed virtual void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte);
    public sealed virtual int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte);
    public sealed virtual byte GetStatusByte(MidiEvent midiEvent);
}
public abstract class Melanchall.DryWetMidi.Core.SystemRealTimeEvent : MidiEvent {
    protected SystemRealTimeEvent(MidiEventType eventType);
    internal sealed virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal sealed virtual void Write(MidiWriter writer, WritingSettings settings);
    internal sealed virtual int GetSize(WritingSettings settings);
}
internal class Melanchall.DryWetMidi.Core.SystemRealTimeEventReader : object {
    public sealed virtual MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte);
}
internal class Melanchall.DryWetMidi.Core.SystemRealTimeEventWriter : object {
    public sealed virtual void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte);
    public sealed virtual int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte);
    public sealed virtual byte GetStatusByte(MidiEvent midiEvent);
}
public class Melanchall.DryWetMidi.Core.TextEvent : BaseTextEvent {
    public TextEvent(string text);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.TicksPerQuarterNoteTimeDivision : TimeDivision {
    
public static short DefaultTicksPerQuarterNote;
    [CompilerGeneratedAttribute]

private short <TicksPerQuarterNote>k__BackingField;
    
public short TicksPerQuarterNote { get; }
    public TicksPerQuarterNoteTimeDivision(short ticksPerQuarterNote);
    [CompilerGeneratedAttribute]
public short get_TicksPerQuarterNote();
    public static bool op_Equality(TicksPerQuarterNoteTimeDivision timeDivision1, TicksPerQuarterNoteTimeDivision timeDivision2);
    public static bool op_Inequality(TicksPerQuarterNoteTimeDivision timeDivision1, TicksPerQuarterNoteTimeDivision timeDivision2);
    internal virtual short ToInt16();
    public virtual TimeDivision Clone();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Melanchall.DryWetMidi.Core.TimeDivision : object {
    internal abstract virtual short ToInt16();
    public abstract virtual TimeDivision Clone();
}
internal static class Melanchall.DryWetMidi.Core.TimeDivisionFactory : object {
    internal static TimeDivision GetTimeDivision(short division);
}
public class Melanchall.DryWetMidi.Core.TimeSignatureEvent : MetaEvent {
    
public static byte DefaultNumerator;
    
public static byte DefaultDenominator;
    
public static byte DefaultClocksPerClick;
    
public static byte DefaultThirtySecondNotesPerBeat;
    
private byte _denominator;
    [CompilerGeneratedAttribute]

private byte <Numerator>k__BackingField;
    [CompilerGeneratedAttribute]

private byte <ClocksPerClick>k__BackingField;
    [CompilerGeneratedAttribute]

private byte <ThirtySecondNotesPerBeat>k__BackingField;
    
public byte Numerator { get; public set; }
    
public byte Denominator { get; public set; }
    
public byte ClocksPerClick { get; public set; }
    
public byte ThirtySecondNotesPerBeat { get; public set; }
    public TimeSignatureEvent(byte numerator, byte denominator);
    public TimeSignatureEvent(byte numerator, byte denominator, byte clocksPerClick, byte thirtySecondNotesPerBeat);
    [CompilerGeneratedAttribute]
public byte get_Numerator();
    [CompilerGeneratedAttribute]
public void set_Numerator(byte value);
    public byte get_Denominator();
    public void set_Denominator(byte value);
    [CompilerGeneratedAttribute]
public byte get_ClocksPerClick();
    [CompilerGeneratedAttribute]
public void set_ClocksPerClick(byte value);
    [CompilerGeneratedAttribute]
public byte get_ThirtySecondNotesPerBeat();
    [CompilerGeneratedAttribute]
public void set_ThirtySecondNotesPerBeat(byte value);
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual int GetContentSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.TimingClockEvent : SystemRealTimeEvent {
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.TooManyTrackChunksException : MidiException {
    [CompilerGeneratedAttribute]

private int <TrackChunksCount>k__BackingField;
    
public int TrackChunksCount { get; }
    internal TooManyTrackChunksException(int trackChunksCount);
    [CompilerGeneratedAttribute]
public int get_TrackChunksCount();
}
public class Melanchall.DryWetMidi.Core.TrackChunk : MidiChunk {
    
public static string Id;
    [CompilerGeneratedAttribute]

private EventsCollection <Events>k__BackingField;
    
public EventsCollection Events { get; }
    public TrackChunk(IEnumerable`1<MidiEvent> events);
    public TrackChunk(MidiEvent[] events);
    [CompilerGeneratedAttribute]
public EventsCollection get_Events();
    public virtual MidiChunk Clone();
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual UInt32 GetContentSize(WritingSettings settings);
    public virtual string ToString();
    private MidiEvent ReadEvent(MidiReader reader, ReadingSettings settings, Nullable`1& channelEventStatusByte, Int64& deltaTime);
    private void ProcessEvents(WritingSettings settings, Action`3<IEventWriter, MidiEvent, bool> eventHandler);
    private static bool TrySkipDefaultSetTempo(MidiEvent midiEvent, Boolean& skip);
    private static bool TrySkipDefaultKeySignature(MidiEvent midiEvent, Boolean& skip);
    private static bool TrySkipDefaultTimeSignature(MidiEvent midiEvent, Boolean& skip);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Core.TrackChunkUtilities : object {
    [ExtensionAttribute]
public static IEnumerable`1<TrackChunk> GetTrackChunks(MidiFile midiFile);
    [ExtensionAttribute]
public static TrackChunk Merge(IEnumerable`1<TrackChunk> trackChunks);
    [ExtensionAttribute]
public static IEnumerable`1<TrackChunk> Explode(TrackChunk trackChunk);
    [ExtensionAttribute]
public static IEnumerable`1<FourBitNumber> GetChannels(TrackChunk trackChunk);
    [ExtensionAttribute]
public static IEnumerable`1<FourBitNumber> GetChannels(IEnumerable`1<TrackChunk> trackChunks);
    private static IEnumerable`1<TrackChunk> ConvertTrackChunks(IEnumerable`1<TrackChunk> trackChunks, MidiFileFormat format);
}
public class Melanchall.DryWetMidi.Core.TuneRequestEvent : SystemCommonEvent {
    internal virtual void Read(MidiReader reader, ReadingSettings settings, int size);
    internal virtual void Write(MidiWriter writer, WritingSettings settings);
    internal virtual int GetSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.UnexpectedRunningStatusException : MidiException {
}
public class Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountException : MidiException {
    [CompilerGeneratedAttribute]

private int <ExpectedCount>k__BackingField;
    [CompilerGeneratedAttribute]

private int <ActualCount>k__BackingField;
    
public int ExpectedCount { get; }
    
public int ActualCount { get; }
    internal UnexpectedTrackChunksCountException(int expectedCount, int actualCount);
    [CompilerGeneratedAttribute]
public int get_ExpectedCount();
    [CompilerGeneratedAttribute]
public int get_ActualCount();
}
public enum Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountPolicy : Enum {
    
public int value__;
    
public static UnexpectedTrackChunksCountPolicy Ignore;
    
public static UnexpectedTrackChunksCountPolicy Abort;
}
public class Melanchall.DryWetMidi.Core.UnknownChannelEventAction : object {
    
public static UnknownChannelEventAction Abort;
    [CompilerGeneratedAttribute]

private UnknownChannelEventInstruction <Instruction>k__BackingField;
    [CompilerGeneratedAttribute]

private int <DataBytesToSkipCount>k__BackingField;
    
public UnknownChannelEventInstruction Instruction { get; }
    
public int DataBytesToSkipCount { get; }
    private UnknownChannelEventAction(UnknownChannelEventInstruction instruction, int dataBytesToSkipCount);
    private static UnknownChannelEventAction();
    [CompilerGeneratedAttribute]
public UnknownChannelEventInstruction get_Instruction();
    [CompilerGeneratedAttribute]
public int get_DataBytesToSkipCount();
    public static UnknownChannelEventAction SkipData(int dataBytesToSkipCount);
}
public class Melanchall.DryWetMidi.Core.UnknownChannelEventCallback : MulticastDelegate {
    public UnknownChannelEventCallback(object object, IntPtr method);
    public virtual UnknownChannelEventAction Invoke(FourBitNumber statusByte, FourBitNumber channel);
    public virtual IAsyncResult BeginInvoke(FourBitNumber statusByte, FourBitNumber channel, AsyncCallback callback, object object);
    public virtual UnknownChannelEventAction EndInvoke(IAsyncResult result);
}
public class Melanchall.DryWetMidi.Core.UnknownChannelEventException : MidiException {
    [CompilerGeneratedAttribute]

private FourBitNumber <Channel>k__BackingField;
    [CompilerGeneratedAttribute]

private FourBitNumber <StatusByte>k__BackingField;
    
public FourBitNumber Channel { get; }
    
public FourBitNumber StatusByte { get; }
    internal UnknownChannelEventException(FourBitNumber statusByte, FourBitNumber channel);
    [CompilerGeneratedAttribute]
public FourBitNumber get_Channel();
    [CompilerGeneratedAttribute]
public FourBitNumber get_StatusByte();
}
public enum Melanchall.DryWetMidi.Core.UnknownChannelEventInstruction : Enum {
    
public int value__;
    
public static UnknownChannelEventInstruction Abort;
    
public static UnknownChannelEventInstruction SkipData;
}
public enum Melanchall.DryWetMidi.Core.UnknownChannelEventPolicy : Enum {
    
public int value__;
    
public static UnknownChannelEventPolicy Abort;
    
public static UnknownChannelEventPolicy SkipStatusByte;
    
public static UnknownChannelEventPolicy SkipStatusByteAndOneDataByte;
    
public static UnknownChannelEventPolicy SkipStatusByteAndTwoDataBytes;
    
public static UnknownChannelEventPolicy UseCallback;
}
public class Melanchall.DryWetMidi.Core.UnknownChunk : MidiChunk {
    [CompilerGeneratedAttribute]

private Byte[] <Data>k__BackingField;
    
public Byte[] Data { get; private set; }
    internal UnknownChunk(string id);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    public virtual MidiChunk Clone();
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual UInt32 GetContentSize(WritingSettings settings);
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.UnknownChunkException : MidiException {
    [CompilerGeneratedAttribute]

private string <ChunkId>k__BackingField;
    
public string ChunkId { get; }
    internal UnknownChunkException(string chunkId);
    [CompilerGeneratedAttribute]
public string get_ChunkId();
}
public enum Melanchall.DryWetMidi.Core.UnknownChunkIdPolicy : Enum {
    
public byte value__;
    
public static UnknownChunkIdPolicy ReadAsUnknownChunk;
    
public static UnknownChunkIdPolicy Skip;
    
public static UnknownChunkIdPolicy Abort;
}
public class Melanchall.DryWetMidi.Core.UnknownFileFormatException : MidiException {
    [CompilerGeneratedAttribute]

private ushort <FileFormat>k__BackingField;
    
public ushort FileFormat { get; }
    internal UnknownFileFormatException(ushort fileFormat);
    [CompilerGeneratedAttribute]
public ushort get_FileFormat();
}
public enum Melanchall.DryWetMidi.Core.UnknownFileFormatPolicy : Enum {
    
public int value__;
    
public static UnknownFileFormatPolicy Ignore;
    
public static UnknownFileFormatPolicy Abort;
}
public class Melanchall.DryWetMidi.Core.UnknownMetaEvent : MetaEvent {
    [CompilerGeneratedAttribute]

private byte <StatusByte>k__BackingField;
    [CompilerGeneratedAttribute]

private Byte[] <Data>k__BackingField;
    
public byte StatusByte { get; }
    
public Byte[] Data { get; private set; }
    internal UnknownMetaEvent(byte statusByte);
    internal UnknownMetaEvent(byte statusByte, Byte[] data);
    [CompilerGeneratedAttribute]
public byte get_StatusByte();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    protected virtual void ReadContent(MidiReader reader, ReadingSettings settings, int size);
    protected virtual void WriteContent(MidiWriter writer, WritingSettings settings);
    protected virtual int GetContentSize(WritingSettings settings);
    protected virtual MidiEvent CloneEvent();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Core.WriterSettings : object {
    
private int _bufferSize;
    [CompilerGeneratedAttribute]

private bool <UseBuffering>k__BackingField;
    
public bool UseBuffering { get; public set; }
    
public int BufferSize { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseBuffering();
    [CompilerGeneratedAttribute]
public void set_UseBuffering(bool value);
    public int get_BufferSize();
    public void set_BufferSize(int value);
}
public class Melanchall.DryWetMidi.Core.WritingSettings : object {
    [CompilerGeneratedAttribute]

private bool <UseRunningStatus>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <NoteOffAsSilentNoteOn>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <DeleteDefaultTimeSignature>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <DeleteDefaultKeySignature>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <DeleteDefaultSetTempo>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <DeleteUnknownMetaEvents>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <DeleteUnknownChunks>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <WriteHeaderChunk>k__BackingField;
    [CompilerGeneratedAttribute]

private EventTypesCollection <CustomMetaEventTypes>k__BackingField;
    [CompilerGeneratedAttribute]

private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]

private WriterSettings <WriterSettings>k__BackingField;
    
public bool UseRunningStatus { get; public set; }
    
public bool NoteOffAsSilentNoteOn { get; public set; }
    
public bool DeleteDefaultTimeSignature { get; public set; }
    
public bool DeleteDefaultKeySignature { get; public set; }
    
public bool DeleteDefaultSetTempo { get; public set; }
    
public bool DeleteUnknownMetaEvents { get; public set; }
    
public bool DeleteUnknownChunks { get; public set; }
    
public bool WriteHeaderChunk { get; public set; }
    
public EventTypesCollection CustomMetaEventTypes { get; public set; }
    
public Encoding TextEncoding { get; public set; }
    
public WriterSettings WriterSettings { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseRunningStatus();
    [CompilerGeneratedAttribute]
public void set_UseRunningStatus(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoteOffAsSilentNoteOn();
    [CompilerGeneratedAttribute]
public void set_NoteOffAsSilentNoteOn(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteDefaultTimeSignature();
    [CompilerGeneratedAttribute]
public void set_DeleteDefaultTimeSignature(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteDefaultKeySignature();
    [CompilerGeneratedAttribute]
public void set_DeleteDefaultKeySignature(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteDefaultSetTempo();
    [CompilerGeneratedAttribute]
public void set_DeleteDefaultSetTempo(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteUnknownMetaEvents();
    [CompilerGeneratedAttribute]
public void set_DeleteUnknownMetaEvents(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteUnknownChunks();
    [CompilerGeneratedAttribute]
public void set_DeleteUnknownChunks(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteHeaderChunk();
    [CompilerGeneratedAttribute]
public void set_WriteHeaderChunk(bool value);
    [CompilerGeneratedAttribute]
public EventTypesCollection get_CustomMetaEventTypes();
    [CompilerGeneratedAttribute]
public void set_CustomMetaEventTypes(EventTypesCollection value);
    [CompilerGeneratedAttribute]
public Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
public void set_TextEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public WriterSettings get_WriterSettings();
    [CompilerGeneratedAttribute]
public void set_WriterSettings(WriterSettings value);
}
public enum Melanchall.DryWetMidi.Core.ZeroLengthDataPolicy : Enum {
    
public int value__;
    
public static ZeroLengthDataPolicy ReadAsEmptyObject;
    
public static ZeroLengthDataPolicy ReadAsNull;
}
public class Melanchall.DryWetMidi.Interaction.ArbitraryGrid : object {
    [CompilerGeneratedAttribute]

private IEnumerable`1<ITimeSpan> <Times>k__BackingField;
    
public IEnumerable`1<ITimeSpan> Times { get; }
    public ArbitraryGrid(IEnumerable`1<ITimeSpan> times);
    public ArbitraryGrid(ITimeSpan[] times);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITimeSpan> get_Times();
    public sealed virtual IEnumerable`1<long> GetTimes(TempoMap tempoMap);
}
public class Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpan : object {
    
private static double FractionEpsilon;
    [CompilerGeneratedAttribute]

private long <Bars>k__BackingField;
    [CompilerGeneratedAttribute]

private double <Beats>k__BackingField;
    
public long Bars { get; }
    
public double Beats { get; }
    public BarBeatFractionTimeSpan(long bars);
    public BarBeatFractionTimeSpan(long bars, double beats);
    [CompilerGeneratedAttribute]
public long get_Bars();
    [CompilerGeneratedAttribute]
public double get_Beats();
    public static bool TryParse(string input, BarBeatFractionTimeSpan& timeSpan);
    public static BarBeatFractionTimeSpan Parse(string input);
    public static bool op_Equality(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2);
    public static bool op_Inequality(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2);
    public static BarBeatFractionTimeSpan op_Addition(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2);
    public static BarBeatFractionTimeSpan op_Subtraction(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2);
    public static bool op_LessThan(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2);
    public static bool op_GreaterThan(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2);
    public static bool op_LessThanOrEqual(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2);
    public static bool op_GreaterThanOrEqual(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Multiply(double multiplier);
    public sealed virtual ITimeSpan Divide(double divisor);
    public sealed virtual ITimeSpan Clone();
    public sealed virtual int CompareTo(object other);
    public sealed virtual int CompareTo(BarBeatFractionTimeSpan other);
    public sealed virtual bool Equals(BarBeatFractionTimeSpan other);
}
internal class Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpanConverter : object {
    
private static double FractionalBeatsEpsilon;
    public sealed virtual ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap);
    public sealed virtual long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap);
    private static void CalculateComponents(long totalTicks, TimeSignature timeSignature, short ticksPerQuarterNote, Int64& bars, Int64& beats, Double& fraction);
    private static long ConvertFractionToTicks(double fraction, long beatLength);
}
internal static class Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpanParser : object {
    
private static string BarsGroupName;
    
private static string BeatsGroupName;
    
private static string BarsGroup;
    
private static string BeatsGroup;
    
private static string Divider;
    
private static String[] Patterns;
    
private static string BarsIsOutOfRange;
    
private static string BeatsIsOutOfRange;
    private static BarBeatFractionTimeSpanParser();
    internal static ParsingResult TryParse(string input, BarBeatFractionTimeSpan& timeSpan);
}
public class Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpan : object {
    [CompilerGeneratedAttribute]

private long <Bars>k__BackingField;
    [CompilerGeneratedAttribute]

private long <Beats>k__BackingField;
    [CompilerGeneratedAttribute]

private long <Ticks>k__BackingField;
    
public long Bars { get; }
    
public long Beats { get; }
    
public long Ticks { get; }
    public BarBeatTicksTimeSpan(long bars);
    public BarBeatTicksTimeSpan(long bars, long beats);
    public BarBeatTicksTimeSpan(long bars, long beats, long ticks);
    [CompilerGeneratedAttribute]
public long get_Bars();
    [CompilerGeneratedAttribute]
public long get_Beats();
    [CompilerGeneratedAttribute]
public long get_Ticks();
    public static bool TryParse(string input, BarBeatTicksTimeSpan& timeSpan);
    public static BarBeatTicksTimeSpan Parse(string input);
    public static bool op_Equality(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2);
    public static bool op_Inequality(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2);
    public static BarBeatTicksTimeSpan op_Addition(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2);
    public static BarBeatTicksTimeSpan op_Subtraction(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2);
    public static bool op_LessThan(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2);
    public static bool op_GreaterThan(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2);
    public static bool op_LessThanOrEqual(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2);
    public static bool op_GreaterThanOrEqual(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Multiply(double multiplier);
    public sealed virtual ITimeSpan Divide(double divisor);
    public sealed virtual ITimeSpan Clone();
    public sealed virtual int CompareTo(object other);
    public sealed virtual int CompareTo(BarBeatTicksTimeSpan other);
    public sealed virtual bool Equals(BarBeatTicksTimeSpan other);
}
internal class Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpanConverter : object {
    public sealed virtual ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap);
    public sealed virtual long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap);
    private static void CalculateComponents(long totalTicks, TimeSignature timeSignature, short ticksPerQuarterNote, Int64& bars, Int64& beats, Int64& ticks);
}
internal static class Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpanParser : object {
    
private static string BarsGroupName;
    
private static string BeatsGroupName;
    
private static string TicksGroupName;
    
private static string BarsGroup;
    
private static string BeatsGroup;
    
private static string TicksGroup;
    
private static string Divider;
    
private static String[] Patterns;
    
private static string BarsIsOutOfRange;
    
private static string BeatsIsOutOfRange;
    
private static string TicksIsOutOfRange;
    private static BarBeatTicksTimeSpanParser();
    internal static ParsingResult TryParse(string input, BarBeatTicksTimeSpan& timeSpan);
}
public static class Melanchall.DryWetMidi.Interaction.BarBeatUtilities : object {
    public static int GetBarLength(long bars, TempoMap tempoMap);
    public static int GetBeatLength(long bars, TempoMap tempoMap);
    internal static int GetBarLength(TimeSignature timeSignature, short ticksPerQuarterNote);
    internal static int GetBeatLength(TimeSignature timeSignature, short ticksPerQuarterNote);
    private static Tuple`2<TimeSignature, short> GetTimeSignatureAndTicksPerQuarterNote(long bars, TempoMap tempoMap);
}
public class Melanchall.DryWetMidi.Interaction.ChannelCoarseTuningParameter : RegisteredParameter {
    
public static sbyte MinHalfSteps;
    
public static sbyte MaxHalfSteps;
    
private sbyte _halfSteps;
    
public sbyte HalfSteps { get; public set; }
    public ChannelCoarseTuningParameter(sbyte halfSteps);
    public ChannelCoarseTuningParameter(sbyte halfSteps, ParameterValueType valueType);
    public sbyte get_HalfSteps();
    public void set_HalfSteps(sbyte value);
    private int GetSteps();
    protected virtual void GetData(SevenBitNumber& msb, Nullable`1& lsb);
    protected virtual int GetIncrementStepsCount();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Interaction.ChannelFineTuningParameter : RegisteredParameter {
    
public static float MinCents;
    
public static float MaxCents;
    
private static int CentsRangeSize;
    
private static float CentResolution;
    
private float _cents;
    
public float Cents { get; public set; }
    public ChannelFineTuningParameter(float cents);
    public ChannelFineTuningParameter(float cents, ParameterValueType valueType);
    public float get_Cents();
    public void set_Cents(float value);
    private int GetSteps();
    protected virtual void GetData(SevenBitNumber& msb, Nullable`1& lsb);
    protected virtual int GetIncrementStepsCount();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Interaction.Chord : object {
    [CompilerGeneratedAttribute]

private NotesCollectionChangedEventHandler NotesCollectionChanged;
    [CompilerGeneratedAttribute]

private EventHandler`1<TimeChangedEventArgs> TimeChanged;
    [CompilerGeneratedAttribute]

private EventHandler`1<LengthChangedEventArgs> LengthChanged;
    
private Nullable`1<FourBitNumber> _channel;
    
private Nullable`1<SevenBitNumber> _velocity;
    
private Nullable`1<SevenBitNumber> _offVelocity;
    [CompilerGeneratedAttribute]

private NotesCollection <Notes>k__BackingField;
    
public NotesCollection Notes { get; }
    
public long Time { get; public set; }
    
public long Length { get; public set; }
    
public FourBitNumber Channel { get; public set; }
    
public SevenBitNumber Velocity { get; public set; }
    
public SevenBitNumber OffVelocity { get; public set; }
    public Chord(IEnumerable`1<Note> notes);
    public Chord(Note[] notes);
    public Chord(IEnumerable`1<Note> notes, long time);
    [CompilerGeneratedAttribute]
public void add_NotesCollectionChanged(NotesCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NotesCollectionChanged(NotesCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TimeChanged(EventHandler`1<TimeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TimeChanged(EventHandler`1<TimeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LengthChanged(EventHandler`1<LengthChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LengthChanged(EventHandler`1<LengthChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public NotesCollection get_Notes();
    public sealed virtual long get_Time();
    public sealed virtual void set_Time(long value);
    public sealed virtual long get_Length();
    public sealed virtual void set_Length(long value);
    public sealed virtual FourBitNumber get_Channel();
    public void set_Channel(FourBitNumber value);
    public SevenBitNumber get_Velocity();
    public void set_Velocity(SevenBitNumber value);
    public SevenBitNumber get_OffVelocity();
    public void set_OffVelocity(SevenBitNumber value);
    public virtual Chord Clone();
    public SplitLengthedObject`1<Chord> Split(long time);
    private void OnNotesCollectionChanged(NotesCollection collection, NotesCollectionChangedEventArgs args);
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Interaction.ChordDetectionSettings : object {
    
private static int DefaultNotesMinCount;
    
private static long DefaultNotesTolerance;
    
private int _notesMinCount;
    
private long _notesTolerance;
    
private ChordSearchContext _chordSearchContext;
    [CompilerGeneratedAttribute]

private NoteDetectionSettings <NoteDetectionSettings>k__BackingField;
    
public int NotesMinCount { get; public set; }
    
public long NotesTolerance { get; public set; }
    
public NoteDetectionSettings NoteDetectionSettings { get; public set; }
    
public ChordSearchContext ChordSearchContext { get; public set; }
    public int get_NotesMinCount();
    public void set_NotesMinCount(int value);
    public long get_NotesTolerance();
    public void set_NotesTolerance(long value);
    [CompilerGeneratedAttribute]
public NoteDetectionSettings get_NoteDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_NoteDetectionSettings(NoteDetectionSettings value);
    public ChordSearchContext get_ChordSearchContext();
    public void set_ChordSearchContext(ChordSearchContext value);
}
internal class Melanchall.DryWetMidi.Interaction.ChordsBuilder : object {
    
private ChordDetectionSettings _chordDetectionSettings;
    public ChordsBuilder(ChordDetectionSettings chordDetectionSettings);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.ChordsBuilder/<GetChordsLazy>d__4")]
public IEnumerable`1<Chord> GetChordsLazy(IEnumerable`1<TimedEvent> timedEvents, bool collectTimedEvents, List`1<TimedEvent> collectedTimedEvents);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.ChordsBuilder/<GetChordsLazy>d__5")]
public IEnumerable`1<Chord> GetChordsLazy(IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents, bool collectTimedEvents, List`1<Tuple`2<TimedEvent, int>> collectedTimedEvents);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.ChordsBuilder/<GetChords>d__6`1")]
private IEnumerable`1<Chord> GetChords(LinkedListNode`1<TDescriptor> startChordDescriptorNode, LinkedList`1<TDescriptor> chordsDescriptors, bool getSealedOnly);
    private void CreateChordDescriptor(LinkedList`1<ChordDescriptor> chordsDescriptors, LinkedListNode`1[] chordsDescriptorsByChannel, Note note);
    private void CreateChordDescriptor(LinkedList`1<ChordDescriptorIndexed> chordsDescriptors, LinkedListNode`1[] chordsDescriptorsByChannel, Note note, int noteOnIndex);
    private static bool CanNoteBeAddedToChord(ChordDescriptor chordDescriptor, Note note, long notesTolerance);
    private static bool CanNoteBeAddedToChord(ChordDescriptorIndexed chordDescriptor, Note note, long notesTolerance, int eventsCollectionIndex, bool eventsCollectionShouldMatch);
}
public class Melanchall.DryWetMidi.Interaction.ChordsCollection : TimedObjectsCollection`1<Chord> {
    [CompilerGeneratedAttribute]

private ChordsCollectionChangedEventHandler CollectionChanged;
    internal ChordsCollection(IEnumerable`1<Chord> chords);
    [CompilerGeneratedAttribute]
public void add_CollectionChanged(ChordsCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CollectionChanged(ChordsCollectionChangedEventHandler value);
    protected virtual void OnObjectsAdded(IEnumerable`1<Chord> addedObjects);
    protected virtual void OnObjectsRemoved(IEnumerable`1<Chord> removedObjects);
    private void OnCollectionChanged(IEnumerable`1<Chord> addedChords, IEnumerable`1<Chord> removedChords);
}
public class Melanchall.DryWetMidi.Interaction.ChordsCollectionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private IEnumerable`1<Chord> <AddedChords>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<Chord> <RemovedChords>k__BackingField;
    
public IEnumerable`1<Chord> AddedChords { get; }
    
public IEnumerable`1<Chord> RemovedChords { get; }
    public ChordsCollectionChangedEventArgs(IEnumerable`1<Chord> addedChords, IEnumerable`1<Chord> removedChords);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Chord> get_AddedChords();
    [CompilerGeneratedAttribute]
public IEnumerable`1<Chord> get_RemovedChords();
}
public class Melanchall.DryWetMidi.Interaction.ChordsCollectionChangedEventHandler : MulticastDelegate {
    public ChordsCollectionChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(ChordsCollection collection, ChordsCollectionChangedEventArgs args);
    public virtual IAsyncResult BeginInvoke(ChordsCollection collection, ChordsCollectionChangedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Melanchall.DryWetMidi.Interaction.ChordSearchContext : Enum {
    
public int value__;
    
public static ChordSearchContext SingleEventsCollection;
    
public static ChordSearchContext AllEventsCollections;
}
public class Melanchall.DryWetMidi.Interaction.ChordsManager : object {
    
private NotesManager _notesManager;
    
private bool _disposed;
    [CompilerGeneratedAttribute]

private ChordsCollection <Chords>k__BackingField;
    
public ChordsCollection Chords { get; }
    public ChordsManager(EventsCollection eventsCollection, ChordDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison);
    [CompilerGeneratedAttribute]
public ChordsCollection get_Chords();
    public void SaveChanges();
    private void OnChordsCollectionChanged(ChordsCollection collection, ChordsCollectionChangedEventArgs args);
    private void OnChordNotesCollectionChanged(NotesCollection collection, NotesCollectionChangedEventArgs args);
    private void SubscribeToChordEvents(Chord chord);
    private void UnsubscribeFromChordEvents(Chord chord);
    private void AddNotes(IEnumerable`1<Note> notes);
    private void RemoveNotes(IEnumerable`1<Note> notes);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities : object {
    [ExtensionAttribute]
public static Chord SetTimeAndLength(Chord chord, ITimeSpan time, ITimeSpan length, TempoMap tempoMap);
    [ExtensionAttribute]
public static ChordsManager ManageChords(EventsCollection eventsCollection, ChordDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison);
    [ExtensionAttribute]
public static ChordsManager ManageChords(TrackChunk trackChunk, ChordDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison);
    [ExtensionAttribute]
public static ICollection`1<Chord> GetChords(IEnumerable`1<MidiEvent> midiEvents, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<Chord> GetChords(EventsCollection eventsCollection, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<Chord> GetChords(TrackChunk trackChunk, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<Chord> GetChords(IEnumerable`1<TrackChunk> trackChunks, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<Chord> GetChords(MidiFile file, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static IEnumerable`1<Chord> GetChords(IEnumerable`1<Note> notes, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessChords(EventsCollection eventsCollection, Action`1<Chord> action, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessChords(EventsCollection eventsCollection, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessChords(TrackChunk trackChunk, Action`1<Chord> action, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessChords(TrackChunk trackChunk, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessChords(IEnumerable`1<TrackChunk> trackChunks, Action`1<Chord> action, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessChords(IEnumerable`1<TrackChunk> trackChunks, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessChords(MidiFile file, Action`1<Chord> action, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessChords(MidiFile file, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveChords(EventsCollection eventsCollection, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveChords(EventsCollection eventsCollection, Predicate`1<Chord> match, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveChords(TrackChunk trackChunk, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveChords(TrackChunk trackChunk, Predicate`1<Chord> match, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveChords(IEnumerable`1<TrackChunk> trackChunks, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveChords(IEnumerable`1<TrackChunk> trackChunks, Predicate`1<Chord> match, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveChords(MidiFile file, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveChords(MidiFile file, Predicate`1<Chord> match, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static Chord GetMusicTheoryChord(Chord chord);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities/<GetChordsAndNotesAndTimedEventsLazy>d__35")]
[ExtensionAttribute]
internal static IEnumerable`1<Tuple`2<ITimedObject, Int32[]>> GetChordsAndNotesAndTimedEventsLazy(IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents, ChordDetectionSettings settings);
    [ExtensionAttribute]
internal static IEnumerable`1<ITimedObject> GetChordsAndNotesAndTimedEventsLazy(IEnumerable`1<TimedEvent> timedEvents, ChordDetectionSettings settings);
    [ExtensionAttribute]
internal static IEnumerable`1<ITimedObject> GetChordsAndNotesAndTimedEventsLazy(IEnumerable`1<ITimedObject> notesAndTimedEvents, ChordDetectionSettings settings);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities/<GetChordsAndNotesAndTimedEventsLazy>d__38")]
[ExtensionAttribute]
internal static IEnumerable`1<ITimedObject> GetChordsAndNotesAndTimedEventsLazy(IEnumerable`1<ITimedObject> notesAndTimedEvents, ChordDetectionSettings settings, bool chordsAllowed);
    [ExtensionAttribute]
internal static int ProcessChords(EventsCollection eventsCollection, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings, bool canTimeOrLengthBeChanged);
    [ExtensionAttribute]
internal static int ProcessChords(IEnumerable`1<TrackChunk> trackChunks, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings, bool canTimeOrLengthBeChanged);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities/<GetTimedObjects>d__41")]
private static IEnumerable`1<ITimedObject> GetTimedObjects(LinkedListNode`1<ChordDescriptor> startChordDescriptorNode, LinkedList`1<ChordDescriptor> chordsDescriptors, LinkedList`1<IObjectDescriptor> timedObjects, bool getSealedOnly);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities/<GetTimedObjects>d__42")]
private static IEnumerable`1<Tuple`2<ITimedObject, Int32[]>> GetTimedObjects(LinkedListNode`1<ChordDescriptorIndexed> startChordDescriptorNode, LinkedList`1<ChordDescriptorIndexed> chordsDescriptors, LinkedList`1<IObjectDescriptorIndexed> timedObjects, bool getSealedOnly);
    private static void CreateChordDescriptor(LinkedList`1<ChordDescriptor> chordsDescriptors, LinkedListNode`1[] chordsDescriptorsByChannel, LinkedList`1<IObjectDescriptor> timedObjects, Note note, ChordDetectionSettings settings);
    private static void CreateChordDescriptor(LinkedList`1<ChordDescriptorIndexed> chordsDescriptors, LinkedListNode`1[] chordsDescriptorsByChannel, LinkedList`1<IObjectDescriptorIndexed> timedObjects, Note note, int noteOnIndex, int noteOffIndex, ChordDetectionSettings settings);
    private static bool CanNoteBeAddedToChord(ChordDescriptor chordDescriptor, Note note, long notesTolerance);
    private static bool CanNoteBeAddedToChord(ChordDescriptorIndexed chordDescriptor, Note note, long notesTolerance, int eventsCollectionIndex, bool eventsCollectionShouldMatch);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.GetObjectsUtilities : object {
    
private static object NoSeparationNoteDescriptor;
    
private static Dictionary`2<RestSeparationPolicy, Func`2<Note, object>> NoteDescriptorProviders;
    
private static Dictionary`2<RestSeparationPolicy, bool> SetRestChannel;
    
private static Dictionary`2<RestSeparationPolicy, bool> SetRestNoteNumber;
    private static GetObjectsUtilities();
    [ExtensionAttribute]
public static ICollection`1<ITimedObject> GetObjects(IEnumerable`1<MidiEvent> midiEvents, ObjectType objectType, ObjectDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<ITimedObject> GetObjects(EventsCollection eventsCollection, ObjectType objectType, ObjectDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<ITimedObject> GetObjects(TrackChunk trackChunk, ObjectType objectType, ObjectDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<ITimedObject> GetObjects(IEnumerable`1<TrackChunk> trackChunks, ObjectType objectType, ObjectDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<ITimedObject> GetObjects(MidiFile midiFile, ObjectType objectType, ObjectDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<ITimedObject> GetObjects(IEnumerable`1<ITimedObject> timedObjects, ObjectType objectType, ObjectDetectionSettings settings);
    private static bool TryProcessTimedEvent(TimedEvent timedEvent, List`1<ITimedObject> processedTimedObjects);
    private static bool TryProcessNote(Note note, List`1<ITimedObject> processedTimedObjects, bool getNotes, bool getChords);
    private static bool TryProcessChord(Chord chord, List`1<ITimedObject> processedTimedObjects, bool getNotes, bool getChords);
    [ExtensionAttribute]
private static ICollection`1<ITimedObject> GetObjectsFromSortedTimedObjects(IEnumerable`1<ITimedObject> processedTimedObjects, int resultCollectionSize, ObjectType objectType, ObjectDetectionSettings settings, bool createNotes);
}
public interface Melanchall.DryWetMidi.Interaction.IGrid {
    public abstract virtual IEnumerable`1<long> GetTimes(TempoMap tempoMap);
}
public interface Melanchall.DryWetMidi.Interaction.ILengthedObject {
    
public long Length { get; public set; }
    public abstract virtual long get_Length();
    public abstract virtual void set_Length(long value);
}
public interface Melanchall.DryWetMidi.Interaction.IMusicalObject {
    
public FourBitNumber Channel { get; }
    public abstract virtual FourBitNumber get_Channel();
}
public interface Melanchall.DryWetMidi.Interaction.INotifyLengthChanged {
    [CompilerGeneratedAttribute]
public abstract virtual void add_LengthChanged(EventHandler`1<LengthChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LengthChanged(EventHandler`1<LengthChangedEventArgs> value);
}
public interface Melanchall.DryWetMidi.Interaction.INotifyTimeChanged {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TimeChanged(EventHandler`1<TimeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TimeChanged(EventHandler`1<TimeChangedEventArgs> value);
}
internal interface Melanchall.DryWetMidi.Interaction.ITempoMapValuesCache {
    
public IEnumerable`1<TempoMapLine> InvalidateOnLines { get; }
    public abstract virtual IEnumerable`1<TempoMapLine> get_InvalidateOnLines();
    public abstract virtual void Invalidate(TempoMap tempoMap);
}
public interface Melanchall.DryWetMidi.Interaction.ITimedObject {
    
public long Time { get; public set; }
    public abstract virtual long get_Time();
    public abstract virtual void set_Time(long value);
}
public interface Melanchall.DryWetMidi.Interaction.ITimeSpan {
    public abstract virtual ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode);
    public abstract virtual ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode);
    public abstract virtual ITimeSpan Multiply(double multiplier);
    public abstract virtual ITimeSpan Divide(double divisor);
    public abstract virtual ITimeSpan Clone();
}
internal interface Melanchall.DryWetMidi.Interaction.ITimeSpanConverter {
    public abstract virtual ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap);
    public abstract virtual long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap);
}
public class Melanchall.DryWetMidi.Interaction.LengthChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private long <OldLength>k__BackingField;
    [CompilerGeneratedAttribute]

private long <NewLength>k__BackingField;
    
public long OldLength { get; }
    
public long NewLength { get; }
    internal LengthChangedEventArgs(long oldLength, long newLength);
    [CompilerGeneratedAttribute]
public long get_OldLength();
    [CompilerGeneratedAttribute]
public long get_NewLength();
}
public static class Melanchall.DryWetMidi.Interaction.LengthConverter : object {
    public static TTimeSpan ConvertTo(long length, long time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(long length, TimeSpanType lengthType, long time, TempoMap tempoMap);
    public static TTimeSpan ConvertTo(long length, ITimeSpan time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(long length, TimeSpanType lengthType, ITimeSpan time, TempoMap tempoMap);
    public static TTimeSpan ConvertTo(ITimeSpan length, long time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(ITimeSpan length, TimeSpanType lengthType, long time, TempoMap tempoMap);
    public static TTimeSpan ConvertTo(ITimeSpan length, ITimeSpan time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(ITimeSpan length, TimeSpanType lengthType, ITimeSpan time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(ITimeSpan length, Type lengthType, long time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(ITimeSpan length, Type lengthType, ITimeSpan time, TempoMap tempoMap);
    public static long ConvertFrom(ITimeSpan length, long time, TempoMap tempoMap);
    public static long ConvertFrom(ITimeSpan length, ITimeSpan time, TempoMap tempoMap);
}
public enum Melanchall.DryWetMidi.Interaction.LengthedObjectPart : Enum {
    
public int value__;
    
public static LengthedObjectPart Start;
    
public static LengthedObjectPart End;
    
public static LengthedObjectPart Entire;
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.LengthedObjectUtilities : object {
    [ExtensionAttribute]
public static TLength LengthAs(ILengthedObject obj, TempoMap tempoMap);
    [ExtensionAttribute]
public static ITimeSpan LengthAs(ILengthedObject obj, TimeSpanType lengthType, TempoMap tempoMap);
    [ExtensionAttribute]
public static TTime EndTimeAs(ILengthedObject obj, TempoMap tempoMap);
    [ExtensionAttribute]
public static ITimeSpan EndTimeAs(ILengthedObject obj, TimeSpanType timeType, TempoMap tempoMap);
    [ExtensionAttribute]
public static IEnumerable`1<TObject> StartAtTime(IEnumerable`1<TObject> objects, long time);
    [ExtensionAttribute]
public static IEnumerable`1<TObject> EndAtTime(IEnumerable`1<TObject> objects, long time);
    [ExtensionAttribute]
public static IEnumerable`1<TObject> StartAtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap);
    [ExtensionAttribute]
public static IEnumerable`1<TObject> EndAtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap);
    [ExtensionAttribute]
public static IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, long time, LengthedObjectPart matchBy);
    [ExtensionAttribute]
public static IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap, LengthedObjectPart matchBy);
    private static bool IsObjectAtTime(TObject obj, long time, LengthedObjectPart matchBy);
}
public enum Melanchall.DryWetMidi.Interaction.MathOperation : Enum {
    
public int value__;
    
public static MathOperation Add;
    
public static MathOperation Subtract;
}
public class Melanchall.DryWetMidi.Interaction.MathTimeSpan : object {
    
private static string TimeModeString;
    
private static string LengthModeString;
    
private static Dictionary`2<TimeSpanMode, Tuple`2<string, string>> ModeStrings;
    [CompilerGeneratedAttribute]

private ITimeSpan <TimeSpan1>k__BackingField;
    [CompilerGeneratedAttribute]

private ITimeSpan <TimeSpan2>k__BackingField;
    [CompilerGeneratedAttribute]

private MathOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]

private TimeSpanMode <Mode>k__BackingField;
    
public ITimeSpan TimeSpan1 { get; }
    
public ITimeSpan TimeSpan2 { get; }
    
public MathOperation Operation { get; }
    
public TimeSpanMode Mode { get; }
    internal MathTimeSpan(ITimeSpan timeSpan1, ITimeSpan timeSpan2, MathOperation operation, TimeSpanMode mode);
    private static MathTimeSpan();
    [CompilerGeneratedAttribute]
public ITimeSpan get_TimeSpan1();
    [CompilerGeneratedAttribute]
public ITimeSpan get_TimeSpan2();
    [CompilerGeneratedAttribute]
public MathOperation get_Operation();
    [CompilerGeneratedAttribute]
public TimeSpanMode get_Mode();
    public static bool op_Equality(MathTimeSpan timeSpan1, MathTimeSpan timeSpan2);
    public static bool op_Inequality(MathTimeSpan timeSpan1, MathTimeSpan timeSpan2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Multiply(double multiplier);
    public sealed virtual ITimeSpan Divide(double divisor);
    public sealed virtual ITimeSpan Clone();
    public sealed virtual int CompareTo(object other);
}
internal class Melanchall.DryWetMidi.Interaction.MathTimeSpanConverter : object {
    
private static Dictionary`2<TimeSpanMode, Func`4<MathTimeSpan, long, TempoMap, long>> Converters;
    private static MathTimeSpanConverter();
    public sealed virtual ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap);
    public sealed virtual long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap);
    private static long ConvertFromLengthLength(MathTimeSpan mathTimeSpan, long time, TempoMap tempoMap);
    private static long ConvertFromTimeLength(MathTimeSpan mathTimeSpan, long time, TempoMap tempoMap);
    private static long ConvertFromTimeTime(MathTimeSpan mathTimeSpan, long time, TempoMap tempoMap);
}
internal class Melanchall.DryWetMidi.Interaction.MetricTempoMapValuesCache : object {
    [CompilerGeneratedAttribute]

private AccumulatedMicroseconds[] <Microseconds>k__BackingField;
    [CompilerGeneratedAttribute]

private double <DefaultMicrosecondsPerTick>k__BackingField;
    [CompilerGeneratedAttribute]

private double <DefaultTicksPerMicrosecond>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<TempoMapLine> <InvalidateOnLines>k__BackingField;
    
public AccumulatedMicroseconds[] Microseconds { get; private set; }
    
public double DefaultMicrosecondsPerTick { get; private set; }
    
public double DefaultTicksPerMicrosecond { get; private set; }
    
public IEnumerable`1<TempoMapLine> InvalidateOnLines { get; }
    [CompilerGeneratedAttribute]
public AccumulatedMicroseconds[] get_Microseconds();
    [CompilerGeneratedAttribute]
private void set_Microseconds(AccumulatedMicroseconds[] value);
    [CompilerGeneratedAttribute]
public double get_DefaultMicrosecondsPerTick();
    [CompilerGeneratedAttribute]
private void set_DefaultMicrosecondsPerTick(double value);
    [CompilerGeneratedAttribute]
public double get_DefaultTicksPerMicrosecond();
    [CompilerGeneratedAttribute]
private void set_DefaultTicksPerMicrosecond(double value);
    private static double GetMicroseconds(long time, Tempo tempo, short ticksPerQuarterNote);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<TempoMapLine> get_InvalidateOnLines();
    public sealed virtual void Invalidate(TempoMap tempoMap);
}
public class Melanchall.DryWetMidi.Interaction.MetricTimeSpan : object {
    
private static int MicrosecondsInMillisecond;
    
private static long TicksInMicrosecond;
    
private TimeSpan _timeSpan;
    
public long TotalMicroseconds { get; }
    
public int Hours { get; }
    
public int Minutes { get; }
    
public int Seconds { get; }
    
public int Milliseconds { get; }
    public MetricTimeSpan(long totalMicroseconds);
    public MetricTimeSpan(TimeSpan timeSpan);
    public MetricTimeSpan(int hours, int minutes, int seconds);
    public MetricTimeSpan(int hours, int minutes, int seconds, int milliseconds);
    public long get_TotalMicroseconds();
    public int get_Hours();
    public int get_Minutes();
    public int get_Seconds();
    public int get_Milliseconds();
    public double Divide(MetricTimeSpan timeSpan);
    public static bool TryParse(string input, MetricTimeSpan& timeSpan);
    public static MetricTimeSpan Parse(string input);
    public static MetricTimeSpan op_Implicit(TimeSpan timeSpan);
    public static TimeSpan op_Implicit(MetricTimeSpan timeSpan);
    public static bool op_Equality(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2);
    public static bool op_Inequality(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2);
    public static MetricTimeSpan op_Addition(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2);
    public static MetricTimeSpan op_Subtraction(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2);
    public static bool op_LessThan(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2);
    public static bool op_GreaterThan(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2);
    public static bool op_LessThanOrEqual(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2);
    public static bool op_GreaterThanOrEqual(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Multiply(double multiplier);
    public sealed virtual ITimeSpan Divide(double divisor);
    public sealed virtual ITimeSpan Clone();
    public sealed virtual int CompareTo(object other);
    public sealed virtual int CompareTo(MetricTimeSpan other);
    public sealed virtual bool Equals(MetricTimeSpan other);
}
internal class Melanchall.DryWetMidi.Interaction.MetricTimeSpanConverter : object {
    public sealed virtual ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap);
    public sealed virtual long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap);
    private static MetricTimeSpan TicksToMetricTimeSpan(long timeSpan, TempoMap tempoMap);
    private static long MetricTimeSpanToTicks(MetricTimeSpan timeSpan, TempoMap tempoMap);
    private static double GetMicroseconds(long time, double microsecondsPerTick);
    private static long RoundMicroseconds(double microseconds);
}
internal static class Melanchall.DryWetMidi.Interaction.MetricTimeSpanParser : object {
    
private static string HoursGroupName;
    
private static string MinutesGroupName;
    
private static string SecondsGroupName;
    
private static string MillisecondsGroupName;
    
private static string HoursGroup;
    
private static string MinutesGroup;
    
private static string SecondsGroup;
    
private static string MillisecondsGroup;
    
private static string LetteredHoursGroup;
    
private static string LetteredMinutesGroup;
    
private static string LetteredSecondsGroup;
    
private static string LetteredMillisecondsGroup;
    
private static string Divider;
    
private static String[] Patterns;
    
private static string HoursIsOutOfRange;
    
private static string MinutesIsOutOfRange;
    
private static string SecondsIsOutOfRange;
    
private static string MillisecondsIsOutOfRange;
    private static MetricTimeSpanParser();
    internal static ParsingResult TryParse(string input, MetricTimeSpan& timeSpan);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.MidiFileUtilities : object {
    [ExtensionAttribute]
public static TTimeSpan GetDuration(MidiFile midiFile);
    [ExtensionAttribute]
public static ITimeSpan GetDuration(MidiFile midiFile, TimeSpanType durationType);
    [ExtensionAttribute]
public static bool IsEmpty(MidiFile midiFile);
    [ExtensionAttribute]
public static void ShiftEvents(MidiFile midiFile, ITimeSpan distance);
    [ExtensionAttribute]
public static void Resize(MidiFile midiFile, ITimeSpan length);
    [ExtensionAttribute]
public static void Resize(MidiFile midiFile, double ratio);
    private static void ResizeByRatio(MidiFile midiFile, double ratio);
}
public class Melanchall.DryWetMidi.Interaction.MidiTimeSpan : object {
    [CompilerGeneratedAttribute]

private long <TimeSpan>k__BackingField;
    
public long TimeSpan { get; }
    public MidiTimeSpan(long timeSpan);
    [CompilerGeneratedAttribute]
public long get_TimeSpan();
    public double Divide(MidiTimeSpan timeSpan);
    public static bool TryParse(string input, MidiTimeSpan& timeSpan);
    public static MidiTimeSpan Parse(string input);
    public static MidiTimeSpan op_Explicit(long timeSpan);
    public static long op_Implicit(MidiTimeSpan timeSpan);
    public static bool op_Equality(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2);
    public static bool op_Inequality(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2);
    public static MidiTimeSpan op_Addition(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2);
    public static MidiTimeSpan op_Subtraction(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2);
    public static bool op_LessThan(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2);
    public static bool op_GreaterThan(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2);
    public static bool op_LessThanOrEqual(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2);
    public static bool op_GreaterThanOrEqual(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Multiply(double multiplier);
    public sealed virtual ITimeSpan Divide(double divisor);
    public sealed virtual ITimeSpan Clone();
    public sealed virtual int CompareTo(object other);
    public sealed virtual int CompareTo(MidiTimeSpan other);
    public sealed virtual bool Equals(MidiTimeSpan other);
}
internal class Melanchall.DryWetMidi.Interaction.MidiTimeSpanConverter : object {
    public sealed virtual ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap);
    public sealed virtual long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap);
}
internal static class Melanchall.DryWetMidi.Interaction.MidiTimeSpanParser : object {
    
private static string TimeSpanGroupName;
    
private static string TimeSpanGroup;
    
private static String[] Patterns;
    
private static string OutOfRange;
    private static MidiTimeSpanParser();
    internal static ParsingResult TryParse(string input, MidiTimeSpan& timeSpan);
}
public class Melanchall.DryWetMidi.Interaction.ModulationDepthRangeParameter : RegisteredParameter {
    
public static SevenBitNumber DefaultHalfSteps;
    
public static float DefaultCents;
    
public static float MinCents;
    
public static float MaxCents;
    
private static float CentResolution;
    
private float _cents;
    [CompilerGeneratedAttribute]

private SevenBitNumber <HalfSteps>k__BackingField;
    
public SevenBitNumber HalfSteps { get; public set; }
    
public float Cents { get; public set; }
    public ModulationDepthRangeParameter(SevenBitNumber halfSteps, float cents);
    public ModulationDepthRangeParameter(SevenBitNumber halfSteps, float cents, ParameterValueType valueType);
    private static ModulationDepthRangeParameter();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_HalfSteps();
    [CompilerGeneratedAttribute]
public void set_HalfSteps(SevenBitNumber value);
    public float get_Cents();
    public void set_Cents(float value);
    protected virtual void GetData(SevenBitNumber& msb, Nullable`1& lsb);
    protected virtual int GetIncrementStepsCount();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Interaction.MusicalTimeSpan : object {
    
public static MusicalTimeSpan Whole;
    
public static MusicalTimeSpan Half;
    
public static MusicalTimeSpan Quarter;
    
public static MusicalTimeSpan Eighth;
    
public static MusicalTimeSpan Sixteenth;
    
public static MusicalTimeSpan ThirtySecond;
    
public static MusicalTimeSpan SixtyFourth;
    
private static long ZeroTimeSpanNumerator;
    
private static long ZeroTimeSpanDenominator;
    
private static long FractionNumerator;
    
private static int WholeFraction;
    
private static int HalfFraction;
    
private static int QuarterFraction;
    
private static int EighthFraction;
    
private static int SixteenthFraction;
    
private static int ThirtySecondFraction;
    
private static int SixtyFourthFraction;
    
private static int TripletNotesCount;
    
private static int TripletSpaceSize;
    
private static int DupletNotesCount;
    
private static int DupletSpaceSize;
    
private static int SingleDotCount;
    
private static int DoubleDotCount;
    
private static int NumberOfDigitsAfterDecimalPoint;
    
private static int FractionPartMultiplier;
    [CompilerGeneratedAttribute]

private long <Numerator>k__BackingField;
    [CompilerGeneratedAttribute]

private long <Denominator>k__BackingField;
    
public long Numerator { get; }
    
public long Denominator { get; }
    public MusicalTimeSpan(long fraction);
    public MusicalTimeSpan(long numerator, long denominator, bool simplify);
    private static MusicalTimeSpan();
    [CompilerGeneratedAttribute]
public long get_Numerator();
    [CompilerGeneratedAttribute]
public long get_Denominator();
    public MusicalTimeSpan Dotted(int dotsCount);
    public MusicalTimeSpan SingleDotted();
    public MusicalTimeSpan DoubleDotted();
    public MusicalTimeSpan Tuplet(int tupletNotesCount, int tupletSpaceSize);
    public MusicalTimeSpan Triplet();
    public MusicalTimeSpan Duplet();
    public double Divide(MusicalTimeSpan timeSpan);
    public MusicalTimeSpan ChangeDenominator(long denominator);
    public static bool TryParse(string input, MusicalTimeSpan& timeSpan);
    public static MusicalTimeSpan Parse(string input);
    private static void ReduceToCommonDenominator(MusicalTimeSpan fraction1, MusicalTimeSpan fraction2, Int64& numerator1, Int64& numerator2, Int64& denominator);
    public static bool op_Equality(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2);
    public static bool op_Inequality(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2);
    public static MusicalTimeSpan op_Multiply(MusicalTimeSpan timeSpan, long number);
    public static MusicalTimeSpan op_Multiply(long number, MusicalTimeSpan timeSpan);
    public static MusicalTimeSpan op_Division(MusicalTimeSpan timeSpan, long number);
    public static MusicalTimeSpan op_Addition(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2);
    public static MusicalTimeSpan op_Subtraction(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2);
    public static bool op_LessThan(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2);
    public static bool op_GreaterThan(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2);
    public static bool op_LessThanOrEqual(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2);
    public static bool op_GreaterThanOrEqual(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode);
    public sealed virtual ITimeSpan Multiply(double multiplier);
    public sealed virtual ITimeSpan Divide(double divisor);
    public sealed virtual ITimeSpan Clone();
    public sealed virtual int CompareTo(object other);
    public sealed virtual int CompareTo(MusicalTimeSpan other);
    public sealed virtual bool Equals(MusicalTimeSpan other);
}
internal class Melanchall.DryWetMidi.Interaction.MusicalTimeSpanConverter : object {
    public sealed virtual ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap);
    public sealed virtual long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap);
}
internal static class Melanchall.DryWetMidi.Interaction.MusicalTimeSpanParser : object {
    
private static Dictionary`2<string, Tuple`2<int, int>> Fractions;
    
private static Dictionary`2<string, Tuple`2<int, int>> Tuplets;
    
private static string NumeratorGroupName;
    
private static string DenominatorGroupName;
    
private static string FractionMnemonicGroupName;
    
private static string TupletNotesCountGroupName;
    
private static string TupletSpaceSizeGroupName;
    
private static string TupletMnemonicGroupName;
    
private static string DotsGroupName;
    
private static string FractionGroup;
    
private static string FractionMnemonicGroup;
    
private static string TupletGroup;
    
private static string TupletMnemonicGroup;
    
private static string DotsGroup;
    
private static String[] Patterns;
    
private static string NumeratorIsOutOfRange;
    
private static string DenominatorIsOutOfRange;
    
private static string TupletNotesCountIsOutOfRange;
    
private static string TupletSpaceSizeIsOutOfRange;
    private static MusicalTimeSpanParser();
    internal static ParsingResult TryParse(string input, MusicalTimeSpan& timeSpan);
    private static string GetMnemonicGroup(string groupName, IEnumerable`1<string> mnemonics);
}
public class Melanchall.DryWetMidi.Interaction.Note : object {
    
public static SevenBitNumber DefaultVelocity;
    [CompilerGeneratedAttribute]

private EventHandler`1<TimeChangedEventArgs> TimeChanged;
    [CompilerGeneratedAttribute]

private EventHandler`1<LengthChangedEventArgs> LengthChanged;
    [CompilerGeneratedAttribute]

private TimedEvent <TimedNoteOnEvent>k__BackingField;
    [CompilerGeneratedAttribute]

private TimedEvent <TimedNoteOffEvent>k__BackingField;
    
public long Time { get; public set; }
    
public long Length { get; public set; }
    
public SevenBitNumber NoteNumber { get; public set; }
    
public SevenBitNumber Velocity { get; public set; }
    
public SevenBitNumber OffVelocity { get; public set; }
    
public FourBitNumber Channel { get; public set; }
    
public NoteName NoteName { get; }
    
public int Octave { get; }
    
internal TimedEvent TimedNoteOnEvent { get; }
    
internal TimedEvent TimedNoteOffEvent { get; }
    
internal Note UnderlyingNote { get; }
    public Note(NoteName noteName, int octave);
    public Note(NoteName noteName, int octave, long length);
    public Note(NoteName noteName, int octave, long length, long time);
    public Note(SevenBitNumber noteNumber);
    public Note(SevenBitNumber noteNumber, long length);
    public Note(SevenBitNumber noteNumber, long length, long time);
    internal Note(TimedEvent timedNoteOnEvent, TimedEvent timedNoteOffEvent);
    private static Note();
    [CompilerGeneratedAttribute]
public sealed virtual void add_TimeChanged(EventHandler`1<TimeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TimeChanged(EventHandler`1<TimeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LengthChanged(EventHandler`1<LengthChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LengthChanged(EventHandler`1<LengthChangedEventArgs> value);
    public sealed virtual long get_Time();
    public sealed virtual void set_Time(long value);
    public sealed virtual long get_Length();
    public sealed virtual void set_Length(long value);
    public SevenBitNumber get_NoteNumber();
    public void set_NoteNumber(SevenBitNumber value);
    public SevenBitNumber get_Velocity();
    public void set_Velocity(SevenBitNumber value);
    public SevenBitNumber get_OffVelocity();
    public void set_OffVelocity(SevenBitNumber value);
    public sealed virtual FourBitNumber get_Channel();
    public void set_Channel(FourBitNumber value);
    public NoteName get_NoteName();
    public int get_Octave();
    [CompilerGeneratedAttribute]
internal TimedEvent get_TimedNoteOnEvent();
    [CompilerGeneratedAttribute]
internal TimedEvent get_TimedNoteOffEvent();
    internal Note get_UnderlyingNote();
    public TimedEvent GetTimedNoteOnEvent();
    public TimedEvent GetTimedNoteOffEvent();
    public void SetNoteNameAndOctave(NoteName noteName, int octave);
    public virtual Note Clone();
    public SplitLengthedObject`1<Note> Split(long time);
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Interaction.NoteDetectionSettings : object {
    
private NoteStartDetectionPolicy _noteStartDetectionPolicy;
    
private NoteSearchContext _noteSearchContext;
    
public NoteStartDetectionPolicy NoteStartDetectionPolicy { get; public set; }
    
public NoteSearchContext NoteSearchContext { get; public set; }
    public NoteStartDetectionPolicy get_NoteStartDetectionPolicy();
    public void set_NoteStartDetectionPolicy(NoteStartDetectionPolicy value);
    public NoteSearchContext get_NoteSearchContext();
    public void set_NoteSearchContext(NoteSearchContext value);
}
public class Melanchall.DryWetMidi.Interaction.NoteId : object {
    [CompilerGeneratedAttribute]

private FourBitNumber <Channel>k__BackingField;
    [CompilerGeneratedAttribute]

private SevenBitNumber <NoteNumber>k__BackingField;
    
public FourBitNumber Channel { get; }
    
public SevenBitNumber NoteNumber { get; }
    public NoteId(FourBitNumber channel, SevenBitNumber noteNumber);
    [CompilerGeneratedAttribute]
public FourBitNumber get_Channel();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_NoteNumber();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.NoteIdUtilities : object {
    [ExtensionAttribute]
public static NoteId GetNoteId(Note note);
    [ExtensionAttribute]
public static NoteId GetNoteId(NoteEvent noteEvent);
}
internal class Melanchall.DryWetMidi.Interaction.NotesBuilder : object {
    
private NoteDetectionSettings _noteDetectionSettings;
    public NotesBuilder(NoteDetectionSettings noteDetectionSettings);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.NotesBuilder/<GetNotesLazy>d__7")]
public IEnumerable`1<Note> GetNotesLazy(IEnumerable`1<TimedEvent> timedEvents, bool collectTimedEvents, List`1<TimedEvent> collectedTimedEvents);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.NotesBuilder/<GetNotesLazy>d__8")]
public IEnumerable`1<Note> GetNotesLazy(IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents, bool collectTimedEvents, List`1<Tuple`2<TimedEvent, int>> collectedTimedEvents);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.NotesBuilder/<GetIndexedNotesLazy>d__9")]
public IEnumerable`1<Tuple`2<Note, int>> GetIndexedNotesLazy(IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents, bool collectTimedEvents, List`1<Tuple`2<TimedEvent, int>> collectedTimedEvents);
    private static int GetNoteEventId(NoteEvent noteEvent);
}
public class Melanchall.DryWetMidi.Interaction.NotesCollection : TimedObjectsCollection`1<Note> {
    [CompilerGeneratedAttribute]

private NotesCollectionChangedEventHandler CollectionChanged;
    internal NotesCollection(IEnumerable`1<Note> notes);
    [CompilerGeneratedAttribute]
public void add_CollectionChanged(NotesCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CollectionChanged(NotesCollectionChangedEventHandler value);
    protected virtual void OnObjectsAdded(IEnumerable`1<Note> addedObjects);
    protected virtual void OnObjectsRemoved(IEnumerable`1<Note> removedObjects);
    private void OnCollectionChanged(IEnumerable`1<Note> addedNotes, IEnumerable`1<Note> removedNotes);
}
public class Melanchall.DryWetMidi.Interaction.NotesCollectionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private IEnumerable`1<Note> <AddedNotes>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<Note> <RemovedNotes>k__BackingField;
    
public IEnumerable`1<Note> AddedNotes { get; }
    
public IEnumerable`1<Note> RemovedNotes { get; }
    public NotesCollectionChangedEventArgs(IEnumerable`1<Note> addedNotes, IEnumerable`1<Note> removedNotes);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Note> get_AddedNotes();
    [CompilerGeneratedAttribute]
public IEnumerable`1<Note> get_RemovedNotes();
}
public class Melanchall.DryWetMidi.Interaction.NotesCollectionChangedEventHandler : MulticastDelegate {
    public NotesCollectionChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(NotesCollection collection, NotesCollectionChangedEventArgs args);
    public virtual IAsyncResult BeginInvoke(NotesCollection collection, NotesCollectionChangedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Melanchall.DryWetMidi.Interaction.NoteSearchContext : Enum {
    
public int value__;
    
public static NoteSearchContext SingleEventsCollection;
    
public static NoteSearchContext AllEventsCollections;
}
public class Melanchall.DryWetMidi.Interaction.NotesManager : object {
    
private TimedEventsManager _timedEventsManager;
    
private bool _disposed;
    [CompilerGeneratedAttribute]

private NotesCollection <Notes>k__BackingField;
    
public NotesCollection Notes { get; }
    public NotesManager(EventsCollection eventsCollection, NoteDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison);
    [CompilerGeneratedAttribute]
public NotesCollection get_Notes();
    public void SaveChanges();
    private void OnNotesCollectionChanged(NotesCollection collection, NotesCollectionChangedEventArgs args);
    private static IEnumerable`1<TimedEvent> GetNotesTimedEvents(IEnumerable`1<Note> notes);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.NotesManagingUtilities : object {
    [ExtensionAttribute]
public static Note SetTimeAndLength(Note note, ITimeSpan time, ITimeSpan length, TempoMap tempoMap);
    [ExtensionAttribute]
public static NotesManager ManageNotes(EventsCollection eventsCollection, NoteDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison);
    [ExtensionAttribute]
public static NotesManager ManageNotes(TrackChunk trackChunk, NoteDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison);
    [ExtensionAttribute]
public static ICollection`1<Note> GetNotes(IEnumerable`1<MidiEvent> midiEvents, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<Note> GetNotes(EventsCollection eventsCollection, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<Note> GetNotes(TrackChunk trackChunk, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<Note> GetNotes(IEnumerable`1<TrackChunk> trackChunks, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static ICollection`1<Note> GetNotes(MidiFile file, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessNotes(EventsCollection eventsCollection, Action`1<Note> action, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessNotes(EventsCollection eventsCollection, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessNotes(TrackChunk trackChunk, Action`1<Note> action, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessNotes(TrackChunk trackChunk, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessNotes(IEnumerable`1<TrackChunk> trackChunks, Action`1<Note> action, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessNotes(IEnumerable`1<TrackChunk> trackChunks, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessNotes(MidiFile file, Action`1<Note> action, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int ProcessNotes(MidiFile file, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveNotes(EventsCollection eventsCollection, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveNotes(EventsCollection eventsCollection, Predicate`1<Note> match, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveNotes(TrackChunk trackChunk, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveNotes(TrackChunk trackChunk, Predicate`1<Note> match, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveNotes(IEnumerable`1<TrackChunk> trackChunks, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveNotes(IEnumerable`1<TrackChunk> trackChunks, Predicate`1<Note> match, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveNotes(MidiFile file, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static int RemoveNotes(MidiFile file, Predicate`1<Note> match, NoteDetectionSettings settings);
    [ExtensionAttribute]
public static Note GetMusicTheoryNote(Note note);
    [ExtensionAttribute]
internal static int ProcessNotes(IEnumerable`1<TrackChunk> trackChunks, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings noteDetectionSettings, bool canTimeOrLengthBeChanged);
    [ExtensionAttribute]
internal static int ProcessNotes(EventsCollection eventsCollection, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings noteDetectionSettings, bool canTimeOrLengthBeChanged);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.NotesManagingUtilities/<GetNotesAndTimedEventsLazy>d__37")]
[ExtensionAttribute]
internal static IEnumerable`1<Tuple`3<ITimedObject, int, int>> GetNotesAndTimedEventsLazy(IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents, NoteDetectionSettings settings);
    [ExtensionAttribute]
internal static IEnumerable`1<ITimedObject> GetNotesAndTimedEventsLazy(IEnumerable`1<TimedEvent> timedEvents, NoteDetectionSettings settings);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.NotesManagingUtilities/<GetNotesAndTimedEventsLazy>d__39")]
[ExtensionAttribute]
internal static IEnumerable`1<ITimedObject> GetNotesAndTimedEventsLazy(IEnumerable`1<ITimedObject> timedObjects, NoteDetectionSettings settings, bool completeObjectsAllowed);
    private static int GetNoteEventId(NoteEvent noteEvent);
}
public enum Melanchall.DryWetMidi.Interaction.NoteStartDetectionPolicy : Enum {
    
public int value__;
    
public static NoteStartDetectionPolicy FirstNoteOn;
    
public static NoteStartDetectionPolicy LastNoteOn;
}
public class Melanchall.DryWetMidi.Interaction.ObjectDetectionSettings : object {
    [CompilerGeneratedAttribute]

private NoteDetectionSettings <NoteDetectionSettings>k__BackingField;
    [CompilerGeneratedAttribute]

private ChordDetectionSettings <ChordDetectionSettings>k__BackingField;
    [CompilerGeneratedAttribute]

private RestDetectionSettings <RestDetectionSettings>k__BackingField;
    
public NoteDetectionSettings NoteDetectionSettings { get; public set; }
    
public ChordDetectionSettings ChordDetectionSettings { get; public set; }
    
public RestDetectionSettings RestDetectionSettings { get; public set; }
    [CompilerGeneratedAttribute]
public NoteDetectionSettings get_NoteDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_NoteDetectionSettings(NoteDetectionSettings value);
    [CompilerGeneratedAttribute]
public ChordDetectionSettings get_ChordDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_ChordDetectionSettings(ChordDetectionSettings value);
    [CompilerGeneratedAttribute]
public RestDetectionSettings get_RestDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_RestDetectionSettings(RestDetectionSettings value);
}
[FlagsAttribute]
public enum Melanchall.DryWetMidi.Interaction.ObjectType : Enum {
    
public int value__;
    
public static ObjectType TimedEvent;
    
public static ObjectType Note;
    
public static ObjectType Chord;
    
public static ObjectType Rest;
}
public abstract class Melanchall.DryWetMidi.Interaction.Parameter : object {
    [CompilerGeneratedAttribute]

private EventHandler`1<TimeChangedEventArgs> TimeChanged;
    
private long _time;
    
private ParameterValueType _valueType;
    [CompilerGeneratedAttribute]

private FourBitNumber <Channel>k__BackingField;
    
public FourBitNumber Channel { get; public set; }
    
public ParameterValueType ValueType { get; public set; }
    
public long Time { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_TimeChanged(EventHandler`1<TimeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TimeChanged(EventHandler`1<TimeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public FourBitNumber get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(FourBitNumber value);
    public ParameterValueType get_ValueType();
    public void set_ValueType(ParameterValueType value);
    public sealed virtual long get_Time();
    public sealed virtual void set_Time(long value);
    public abstract virtual IEnumerable`1<TimedEvent> GetTimedEvents();
}
public enum Melanchall.DryWetMidi.Interaction.ParameterValueType : Enum {
    
public int value__;
    
public static ParameterValueType Exact;
    
public static ParameterValueType Increment;
    
public static ParameterValueType Decrement;
}
public class Melanchall.DryWetMidi.Interaction.PitchBendSensitivityParameter : RegisteredParameter {
    
public static SevenBitNumber DefaultHalfSteps;
    
public static SevenBitNumber DefaultCents;
    [CompilerGeneratedAttribute]

private SevenBitNumber <HalfSteps>k__BackingField;
    [CompilerGeneratedAttribute]

private SevenBitNumber <Cents>k__BackingField;
    
public SevenBitNumber HalfSteps { get; public set; }
    
public SevenBitNumber Cents { get; public set; }
    public PitchBendSensitivityParameter(SevenBitNumber halfSteps, SevenBitNumber cents);
    public PitchBendSensitivityParameter(SevenBitNumber halfSteps, SevenBitNumber cents, ParameterValueType valueType);
    private static PitchBendSensitivityParameter();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_HalfSteps();
    [CompilerGeneratedAttribute]
public void set_HalfSteps(SevenBitNumber value);
    [CompilerGeneratedAttribute]
public SevenBitNumber get_Cents();
    [CompilerGeneratedAttribute]
public void set_Cents(SevenBitNumber value);
    protected virtual void GetData(SevenBitNumber& msb, Nullable`1& lsb);
    protected virtual int GetIncrementStepsCount();
    public virtual string ToString();
}
public abstract class Melanchall.DryWetMidi.Interaction.RegisteredParameter : Parameter {
    [CompilerGeneratedAttribute]

private RegisteredParameterType <ParameterType>k__BackingField;
    
public RegisteredParameterType ParameterType { get; }
    protected RegisteredParameter(RegisteredParameterType parameterType);
    [CompilerGeneratedAttribute]
public RegisteredParameterType get_ParameterType();
    protected abstract virtual void GetData(SevenBitNumber& msb, Nullable`1& lsb);
    protected abstract virtual int GetIncrementStepsCount();
    public virtual IEnumerable`1<TimedEvent> GetTimedEvents();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private TimedEvent <GetTimedEvents>b__6_0(Tuple`2<ControlName, SevenBitNumber> controlChange);
}
internal static class Melanchall.DryWetMidi.Interaction.RegisteredParameterNumbers : object {
    
private static Dictionary`2<RegisteredParameterType, SevenBitNumber> Msbs;
    
private static Dictionary`2<RegisteredParameterType, SevenBitNumber> Lsbs;
    private static RegisteredParameterNumbers();
    public static SevenBitNumber GetMsb(RegisteredParameterType parameterType);
    public static SevenBitNumber GetLsb(RegisteredParameterType parameterType);
}
public enum Melanchall.DryWetMidi.Interaction.RegisteredParameterType : Enum {
    
public byte value__;
    
public static RegisteredParameterType PitchBendSensitivity;
    
public static RegisteredParameterType ChannelFineTuning;
    
public static RegisteredParameterType ChannelCoarseTuning;
    
public static RegisteredParameterType TuningProgramChange;
    
public static RegisteredParameterType TuningBankSelect;
    
public static RegisteredParameterType ModulationDepthRange;
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.ResizeNotesUtilities : object {
    [ExtensionAttribute]
public static void ResizeNotes(IEnumerable`1<Note> notes, ITimeSpan length, TimeSpanType distanceCalculationType, TempoMap tempoMap);
    [ExtensionAttribute]
public static void ResizeNotes(IEnumerable`1<Note> notes, double ratio, TimeSpanType distanceCalculationType, TempoMap tempoMap);
    private static void ResizeNotesByRatio(IEnumerable`1<Note> notes, double ratio, TimeSpanType distanceCalculationType, TempoMap tempoMap, ITimeSpan startTime);
}
public class Melanchall.DryWetMidi.Interaction.Rest : object {
    
private long _time;
    
private long _length;
    [CompilerGeneratedAttribute]

private Nullable`1<FourBitNumber> <Channel>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<SevenBitNumber> <NoteNumber>k__BackingField;
    
public long Time { get; public set; }
    
public long Length { get; public set; }
    
public Nullable`1<FourBitNumber> Channel { get; }
    
public Nullable`1<SevenBitNumber> NoteNumber { get; }
    internal Rest(long time, long length, Nullable`1<FourBitNumber> channel, Nullable`1<SevenBitNumber> noteNumber);
    public sealed virtual long get_Time();
    public sealed virtual void set_Time(long value);
    public sealed virtual long get_Length();
    public sealed virtual void set_Length(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<FourBitNumber> get_Channel();
    [CompilerGeneratedAttribute]
public Nullable`1<SevenBitNumber> get_NoteNumber();
    public static bool op_Equality(Rest rest1, Rest rest2);
    public static bool op_Inequality(Rest rest1, Rest rest2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Melanchall.DryWetMidi.Interaction.RestDetectionSettings : object {
    
private RestSeparationPolicy _restSeparationPolicy;
    
public RestSeparationPolicy RestSeparationPolicy { get; public set; }
    public RestSeparationPolicy get_RestSeparationPolicy();
    public void set_RestSeparationPolicy(RestSeparationPolicy value);
}
public enum Melanchall.DryWetMidi.Interaction.RestSeparationPolicy : Enum {
    
public int value__;
    
public static RestSeparationPolicy NoSeparation;
    
public static RestSeparationPolicy SeparateByChannel;
    
public static RestSeparationPolicy SeparateByNoteNumber;
    
public static RestSeparationPolicy SeparateByChannelAndNoteNumber;
}
public class Melanchall.DryWetMidi.Interaction.SplitLengthedObject`1 : object {
    [CompilerGeneratedAttribute]

private TObject <LeftPart>k__BackingField;
    [CompilerGeneratedAttribute]

private TObject <RightPart>k__BackingField;
    
public TObject LeftPart { get; }
    
public TObject RightPart { get; }
    internal SplitLengthedObject`1(TObject leftPart, TObject rightPart);
    [CompilerGeneratedAttribute]
public TObject get_LeftPart();
    [CompilerGeneratedAttribute]
public TObject get_RightPart();
}
public class Melanchall.DryWetMidi.Interaction.SteppedGrid : object {
    [CompilerGeneratedAttribute]

private ITimeSpan <Start>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<ITimeSpan> <Steps>k__BackingField;
    
public ITimeSpan Start { get; }
    
public IEnumerable`1<ITimeSpan> Steps { get; }
    public SteppedGrid(ITimeSpan step);
    public SteppedGrid(ITimeSpan start, ITimeSpan step);
    public SteppedGrid(IEnumerable`1<ITimeSpan> steps);
    public SteppedGrid(ITimeSpan start, IEnumerable`1<ITimeSpan> steps);
    [CompilerGeneratedAttribute]
public ITimeSpan get_Start();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITimeSpan> get_Steps();
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.SteppedGrid/<GetTimes>d__10")]
public sealed virtual IEnumerable`1<long> GetTimes(TempoMap tempoMap);
}
public class Melanchall.DryWetMidi.Interaction.Tempo : object {
    
public static Tempo Default;
    
private static int MicrosecondsInMinute;
    
private static int MicrosecondsInMillisecond;
    [CompilerGeneratedAttribute]

private long <MicrosecondsPerQuarterNote>k__BackingField;
    
public long MicrosecondsPerQuarterNote { get; }
    
public double BeatsPerMinute { get; }
    public Tempo(long microsecondsPerQuarterNote);
    private static Tempo();
    [CompilerGeneratedAttribute]
public long get_MicrosecondsPerQuarterNote();
    public double get_BeatsPerMinute();
    public static Tempo FromMillisecondsPerQuarterNote(long millisecondsPerQuarterNote);
    public static Tempo FromBeatsPerMinute(double beatsPerMinute);
    public static bool op_Equality(Tempo tempo1, Tempo tempo2);
    public static bool op_Inequality(Tempo tempo1, Tempo tempo2);
    public static bool op_GreaterThan(Tempo tempo1, Tempo tempo2);
    public static bool op_GreaterThanOrEqual(Tempo tempo1, Tempo tempo2);
    public static bool op_LessThan(Tempo tempo1, Tempo tempo2);
    public static bool op_LessThanOrEqual(Tempo tempo1, Tempo tempo2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Melanchall.DryWetMidi.Interaction.TempoMap : object {
    
public static TempoMap Default;
    
private ValueLine`1<TimeSignature> _timeSignatureLine;
    
private ValueLine`1<Tempo> _tempoLine;
    
private List`1<ITempoMapValuesCache> _valuesCaches;
    
private bool _isTempoMapReady;
    [CompilerGeneratedAttribute]

private TimeDivision <TimeDivision>k__BackingField;
    
public TimeDivision TimeDivision { get; internal set; }
    
internal ValueLine`1<TimeSignature> TimeSignatureLine { get; internal set; }
    
internal ValueLine`1<Tempo> TempoLine { get; internal set; }
    
internal bool IsTempoMapReady { get; internal set; }
    internal TempoMap(TimeDivision timeDivision);
    private static TempoMap();
    [CompilerGeneratedAttribute]
public TimeDivision get_TimeDivision();
    [CompilerGeneratedAttribute]
internal void set_TimeDivision(TimeDivision value);
    internal ValueLine`1<TimeSignature> get_TimeSignatureLine();
    internal void set_TimeSignatureLine(ValueLine`1<TimeSignature> value);
    internal ValueLine`1<Tempo> get_TempoLine();
    internal void set_TempoLine(ValueLine`1<Tempo> value);
    internal bool get_IsTempoMapReady();
    internal void set_IsTempoMapReady(bool value);
    public IEnumerable`1<ValueChange`1<Tempo>> GetTempoChanges();
    public Tempo GetTempoAtTime(ITimeSpan time);
    public IEnumerable`1<ValueChange`1<TimeSignature>> GetTimeSignatureChanges();
    public TimeSignature GetTimeSignatureAtTime(ITimeSpan time);
    public TempoMap Clone();
    public static TempoMap Create(Tempo tempo, TimeSignature timeSignature);
    public static TempoMap Create(Tempo tempo);
    public static TempoMap Create(TimeSignature timeSignature);
    public static TempoMap Create(TimeDivision timeDivision);
    public static TempoMap Create(TimeDivision timeDivision, Tempo tempo);
    public static TempoMap Create(TimeDivision timeDivision, TimeSignature timeSignature);
    public static TempoMap Create(TimeDivision timeDivision, Tempo tempo, TimeSignature timeSignature);
    internal TempoMap Flip(long centerTime);
    internal TCache GetValuesCache();
    private static void SetGlobalTempo(TempoMap tempoMap, Tempo tempo);
    private static void SetGlobalTimeSignature(TempoMap tempoMap, TimeSignature timeSignature);
    private void InvalidateCaches(TempoMapLine tempoMapLine);
    private void OnTimeSignatureChanged(object sender, EventArgs args);
    private void OnTempoChanged(object sender, EventArgs args);
}
internal enum Melanchall.DryWetMidi.Interaction.TempoMapLine : Enum {
    
public int value__;
    
public static TempoMapLine Tempo;
    
public static TempoMapLine TimeSignature;
}
public class Melanchall.DryWetMidi.Interaction.TempoMapManager : object {
    
private IEnumerable`1<TimedEventsManager> _timedEventsManagers;
    
private bool _disposed;
    [CompilerGeneratedAttribute]

private TempoMap <TempoMap>k__BackingField;
    
public TempoMap TempoMap { get; }
    public TempoMapManager(TimeDivision timeDivision);
    public TempoMapManager(TimeDivision timeDivision, IEnumerable`1<EventsCollection> eventsCollections);
    [CompilerGeneratedAttribute]
public TempoMap get_TempoMap();
    public void SetTimeSignature(long time, TimeSignature timeSignature);
    public void SetTimeSignature(ITimeSpan time, TimeSignature timeSignature);
    public void ClearTimeSignature(long startTime);
    public void ClearTimeSignature(ITimeSpan startTime);
    public void ClearTimeSignature(long startTime, long endTime);
    public void ClearTimeSignature(ITimeSpan startTime, ITimeSpan endTime);
    public void SetTempo(long time, Tempo tempo);
    public void SetTempo(ITimeSpan time, Tempo tempo);
    public void ClearTempo(long startTime);
    public void ClearTempo(ITimeSpan startTime);
    public void ClearTempo(long startTime, long endTime);
    public void ClearTempo(ITimeSpan startTime, ITimeSpan endTime);
    public void ClearTempoMap();
    public void ReplaceTempoMap(TempoMap tempoMap);
    public void SaveChanges();
    private IEnumerable`1<TimedEvent> GetTimedEvents(Func`2<TimedEvent, bool> predicate);
    private void CollectTimeSignatureChanges();
    private void CollectTempoChanges();
    private static bool IsTempoMapEvent(TimedEvent timedEvent);
    private static bool IsTempoEvent(TimedEvent timedEvent);
    private static bool IsTimeSignatureEvent(TimedEvent timedEvent);
    private static TimedEvent GetSetTempoTimedEvent(ValueChange`1<Tempo> tempoChange);
    private static TimedEvent GetTimeSignatureTimedEvent(ValueChange`1<TimeSignature> timeSignatureChange);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.TempoMapManagingUtilities : object {
    [ExtensionAttribute]
public static TempoMapManager ManageTempoMap(IEnumerable`1<EventsCollection> eventsCollections, TimeDivision timeDivision);
    [ExtensionAttribute]
public static TempoMapManager ManageTempoMap(IEnumerable`1<TrackChunk> trackChunks, TimeDivision timeDivision);
    [ExtensionAttribute]
public static TempoMapManager ManageTempoMap(MidiFile file);
    [ExtensionAttribute]
public static TempoMap GetTempoMap(IEnumerable`1<TrackChunk> trackChunks, TimeDivision timeDivision);
    [ExtensionAttribute]
public static TempoMap GetTempoMap(MidiFile file);
    [ExtensionAttribute]
public static void ReplaceTempoMap(IEnumerable`1<EventsCollection> eventsCollections, TempoMap tempoMap);
    [ExtensionAttribute]
public static void ReplaceTempoMap(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap);
    [ExtensionAttribute]
public static void ReplaceTempoMap(MidiFile file, TempoMap tempoMap);
}
internal static class Melanchall.DryWetMidi.Interaction.ThrowIfLengthArgument : object {
    internal static void IsNegative(string parameterName, long length);
}
internal static class Melanchall.DryWetMidi.Interaction.ThrowIfNotesTolerance : object {
    internal static void IsNegative(string parameterName, long notesTolerance);
}
internal static class Melanchall.DryWetMidi.Interaction.ThrowIfTimeArgument : object {
    internal static void IsNegative(string parameterName, long time);
    internal static void StartIsNegative(string parameterName, long time);
    internal static void EndIsNegative(string parameterName, long time);
}
public class Melanchall.DryWetMidi.Interaction.TimeChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private long <OldTime>k__BackingField;
    [CompilerGeneratedAttribute]

private long <NewTime>k__BackingField;
    
public long OldTime { get; }
    
public long NewTime { get; }
    internal TimeChangedEventArgs(long oldTime, long newTime);
    [CompilerGeneratedAttribute]
public long get_OldTime();
    [CompilerGeneratedAttribute]
public long get_NewTime();
}
public static class Melanchall.DryWetMidi.Interaction.TimeConverter : object {
    public static TTimeSpan ConvertTo(long time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(long time, TimeSpanType timeType, TempoMap tempoMap);
    public static TTimeSpan ConvertTo(ITimeSpan time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(ITimeSpan time, TimeSpanType timeType, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(ITimeSpan time, Type timeType, TempoMap tempoMap);
    public static long ConvertFrom(ITimeSpan time, TempoMap tempoMap);
}
public class Melanchall.DryWetMidi.Interaction.TimedEvent : object {
    [CompilerGeneratedAttribute]

private EventHandler`1<TimeChangedEventArgs> TimeChanged;
    
internal long _time;
    [CompilerGeneratedAttribute]

private MidiEvent <Event>k__BackingField;
    
public MidiEvent Event { get; }
    
public long Time { get; public set; }
    public TimedEvent(MidiEvent midiEvent);
    public TimedEvent(MidiEvent midiEvent, long time);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TimeChanged(EventHandler`1<TimeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TimeChanged(EventHandler`1<TimeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public MidiEvent get_Event();
    public sealed virtual long get_Time();
    public sealed virtual void set_Time(long value);
    public virtual TimedEvent Clone();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Interaction.TimedEventsCollection : TimedObjectsCollection`1<TimedEvent> {
    
private TimedEventsComparer _eventsComparer;
    internal TimedEventsCollection(IEnumerable`1<TimedEvent> events, Comparison`1<MidiEvent> sameTimeEventsComparison);
    public virtual IEnumerator`1<TimedEvent> GetEnumerator();
}
internal class Melanchall.DryWetMidi.Interaction.TimedEventsComparer : object {
    
private Comparison`1<MidiEvent> _sameTimeEventsComparison;
    internal TimedEventsComparer(Comparison`1<MidiEvent> sameTimeEventsComparison);
    public sealed virtual int Compare(TimedEvent x, TimedEvent y);
}
public class Melanchall.DryWetMidi.Interaction.TimedEventsManager : object {
    
private EventsCollection _eventsCollection;
    
private bool _disposed;
    [CompilerGeneratedAttribute]

private TimedEventsCollection <Events>k__BackingField;
    
public TimedEventsCollection Events { get; }
    public TimedEventsManager(EventsCollection eventsCollection, Comparison`1<MidiEvent> sameTimeEventsComparison);
    [CompilerGeneratedAttribute]
public TimedEventsCollection get_Events();
    public void SaveChanges();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.TimedEventsManagingUtilities : object {
    [ExtensionAttribute]
public static TimedEvent SetTime(TimedEvent timedEvent, ITimeSpan time, TempoMap tempoMap);
    [ExtensionAttribute]
public static TimedEventsManager ManageTimedEvents(EventsCollection eventsCollection, Comparison`1<MidiEvent> sameTimeEventsComparison);
    [ExtensionAttribute]
public static TimedEventsManager ManageTimedEvents(TrackChunk trackChunk, Comparison`1<MidiEvent> sameTimeEventsComparison);
    [ExtensionAttribute]
public static ICollection`1<TimedEvent> GetTimedEvents(EventsCollection eventsCollection);
    [ExtensionAttribute]
public static ICollection`1<TimedEvent> GetTimedEvents(TrackChunk trackChunk);
    [ExtensionAttribute]
public static ICollection`1<TimedEvent> GetTimedEvents(IEnumerable`1<TrackChunk> trackChunks);
    [ExtensionAttribute]
public static ICollection`1<TimedEvent> GetTimedEvents(MidiFile file);
    [ExtensionAttribute]
public static void AddEvent(TimedEventsCollection eventsCollection, MidiEvent midiEvent, long time);
    [ExtensionAttribute]
public static void AddEvent(TimedEventsCollection eventsCollection, MidiEvent midiEvent, ITimeSpan time, TempoMap tempoMap);
    [ExtensionAttribute]
public static int ProcessTimedEvents(EventsCollection eventsCollection, Action`1<TimedEvent> action);
    [ExtensionAttribute]
public static int ProcessTimedEvents(EventsCollection eventsCollection, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match);
    [ExtensionAttribute]
public static int ProcessTimedEvents(TrackChunk trackChunk, Action`1<TimedEvent> action);
    [ExtensionAttribute]
public static int ProcessTimedEvents(TrackChunk trackChunk, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match);
    [ExtensionAttribute]
public static int ProcessTimedEvents(IEnumerable`1<TrackChunk> trackChunks, Action`1<TimedEvent> action);
    [ExtensionAttribute]
public static int ProcessTimedEvents(IEnumerable`1<TrackChunk> trackChunks, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match);
    [ExtensionAttribute]
public static int ProcessTimedEvents(MidiFile file, Action`1<TimedEvent> action);
    [ExtensionAttribute]
public static int ProcessTimedEvents(MidiFile file, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match);
    [ExtensionAttribute]
public static int RemoveTimedEvents(EventsCollection eventsCollection);
    [ExtensionAttribute]
public static int RemoveTimedEvents(EventsCollection eventsCollection, Predicate`1<TimedEvent> match);
    [ExtensionAttribute]
public static int RemoveTimedEvents(TrackChunk trackChunk);
    [ExtensionAttribute]
public static int RemoveTimedEvents(TrackChunk trackChunk, Predicate`1<TimedEvent> match);
    [ExtensionAttribute]
public static int RemoveTimedEvents(IEnumerable`1<TrackChunk> trackChunks);
    [ExtensionAttribute]
public static int RemoveTimedEvents(IEnumerable`1<TrackChunk> trackChunks, Predicate`1<TimedEvent> match);
    [ExtensionAttribute]
public static int RemoveTimedEvents(MidiFile file);
    [ExtensionAttribute]
public static int RemoveTimedEvents(MidiFile file, Predicate`1<TimedEvent> match);
    [ExtensionAttribute]
internal static IEnumerable`1<Tuple`2<TimedEvent, int>> GetTimedEventsLazy(IEnumerable`1<TrackChunk> trackChunks, bool cloneEvent);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.TimedEventsManagingUtilities/<GetTimedEventsLazy>d__26")]
[ExtensionAttribute]
internal static IEnumerable`1<Tuple`2<TimedEvent, int>> GetTimedEventsLazy(EventsCollection[] eventsCollections, int eventsCount, bool cloneEvent);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Interaction.TimedEventsManagingUtilities/<GetTimedEventsLazy>d__27")]
[ExtensionAttribute]
internal static IEnumerable`1<TimedEvent> GetTimedEventsLazy(IEnumerable`1<MidiEvent> events, bool cloneEvent);
    [ExtensionAttribute]
internal static void SortAndUpdateEvents(EventsCollection eventsCollection, IEnumerable`1<TimedEvent> timedEvents);
    [ExtensionAttribute]
internal static void SortAndUpdateEvents(EventsCollection[] eventsCollections, IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents);
}
public abstract class Melanchall.DryWetMidi.Interaction.TimedObjectsCollection`1 : object {
    
protected List`1<TObject> _objects;
    internal TimedObjectsCollection`1(IEnumerable`1<TObject> objects);
    public void Add(IEnumerable`1<TObject> objects);
    public void Add(TObject[] objects);
    public void Remove(IEnumerable`1<TObject> objects);
    public void Remove(TObject[] objects);
    public void RemoveAll(Predicate`1<TObject> match);
    public void Clear();
    protected virtual void OnObjectsAdded(IEnumerable`1<TObject> addedObjects);
    protected virtual void OnObjectsRemoved(IEnumerable`1<TObject> removedObjects);
    public virtual IEnumerator`1<TObject> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Melanchall.DryWetMidi.Interaction.TimedObjectsComparer`1 : object {
    public sealed virtual int Compare(TObject x, TObject y);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.TimedObjectUtilities : object {
    [ExtensionAttribute]
public static TTime TimeAs(ITimedObject obj, TempoMap tempoMap);
    [ExtensionAttribute]
public static ITimeSpan TimeAs(ITimedObject obj, TimeSpanType timeType, TempoMap tempoMap);
    [ExtensionAttribute]
public static IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, long time);
    [ExtensionAttribute]
public static IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap);
    [ExtensionAttribute]
public static TrackChunk ToTrackChunk(IEnumerable`1<ITimedObject> timedObjects);
    [ExtensionAttribute]
public static MidiFile ToFile(IEnumerable`1<ITimedObject> timedObjects);
    [ExtensionAttribute]
public static void AddObjects(EventsCollection eventsCollection, IEnumerable`1<ITimedObject> timedObjects);
    [ExtensionAttribute]
public static void AddObjects(TrackChunk trackChunk, IEnumerable`1<ITimedObject> timedObjects);
    private static void AddTimedEventsToEventsCollection(EventsCollection eventsCollection, IEnumerable`1<ITimedObject> timedObjects);
}
public class Melanchall.DryWetMidi.Interaction.TimeSignature : object {
    
public static TimeSignature Default;
    [CompilerGeneratedAttribute]

private int <Numerator>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Denominator>k__BackingField;
    
public int Numerator { get; }
    
public int Denominator { get; }
    public TimeSignature(int numerator, int denominator);
    private static TimeSignature();
    [CompilerGeneratedAttribute]
public int get_Numerator();
    [CompilerGeneratedAttribute]
public int get_Denominator();
    public static bool op_Equality(TimeSignature timeSignature1, TimeSignature timeSignature2);
    public static bool op_Inequality(TimeSignature timeSignature1, TimeSignature timeSignature2);
    public static bool op_LessThan(TimeSignature timeSignature1, TimeSignature timeSignature2);
    public static bool op_LessThanOrEqual(TimeSignature timeSignature1, TimeSignature timeSignature2);
    public static bool op_GreaterThan(TimeSignature timeSignature1, TimeSignature timeSignature2);
    public static bool op_GreaterThanOrEqual(TimeSignature timeSignature1, TimeSignature timeSignature2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Melanchall.DryWetMidi.Interaction.TimeSpanComparer : object {
    public sealed virtual int Compare(ITimeSpan x, ITimeSpan y);
}
internal static class Melanchall.DryWetMidi.Interaction.TimeSpanConverter : object {
    
private static Dictionary`2<TimeSpanType, Type> TimeSpansTypes;
    
private static Dictionary`2<Type, ITimeSpanConverter> Converters;
    private static TimeSpanConverter();
    public static TTimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(long timeSpan, TimeSpanType timeSpanType, long time, TempoMap tempoMap);
    public static TTimeSpan ConvertTo(ITimeSpan timeSpan, long time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(ITimeSpan timeSpan, TimeSpanType timeSpanType, long time, TempoMap tempoMap);
    public static ITimeSpan ConvertTo(ITimeSpan timeSpan, Type timeSpanType, long time, TempoMap tempoMap);
    public static long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap);
    private static ITimeSpanConverter GetConverter();
    private static ITimeSpanConverter GetConverter(TimeSpanType timeSpanType);
    private static ITimeSpanConverter GetConverter(Type timeSpanType);
}
public enum Melanchall.DryWetMidi.Interaction.TimeSpanMode : Enum {
    
public int value__;
    
public static TimeSpanMode TimeTime;
    
public static TimeSpanMode TimeLength;
    
public static TimeSpanMode LengthLength;
}
public enum Melanchall.DryWetMidi.Interaction.TimeSpanType : Enum {
    
public int value__;
    
public static TimeSpanType Metric;
    
public static TimeSpanType Musical;
    
public static TimeSpanType BarBeatTicks;
    
public static TimeSpanType BarBeatFraction;
    
public static TimeSpanType Midi;
}
public static class Melanchall.DryWetMidi.Interaction.TimeSpanUtilities : object {
    
private static Dictionary`2<TimeSpanType, Parsing`1<ITimeSpan>> Parsers;
    
private static Dictionary`2<TimeSpanType, ITimeSpan> MaximumTimeSpans;
    
private static Dictionary`2<TimeSpanType, ITimeSpan> ZeroTimeSpans;
    private static TimeSpanUtilities();
    public static bool TryParse(string input, ITimeSpan& timeSpan);
    public static bool TryParse(string input, TimeSpanType timeSpanType, ITimeSpan& timeSpan);
    public static ITimeSpan Parse(string input);
    public static ITimeSpan GetMaxTimeSpan(TimeSpanType timeSpanType);
    public static ITimeSpan GetZeroTimeSpan(TimeSpanType timeSpanType);
    public static TTimeSpan GetZeroTimeSpan();
    internal static double Divide(ITimeSpan timeSpan1, ITimeSpan timeSpan2);
    internal static ITimeSpan Add(ITimeSpan timeSpan1, ITimeSpan timeSpan2, TimeSpanMode mode);
    internal static ITimeSpan Subtract(ITimeSpan timeSpan1, ITimeSpan timeSpan2, TimeSpanMode mode);
    private static Parsing`1<ITimeSpan> GetParsing(Parsing`1<TTimeSpan> parsing);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Interaction.TrackChunkUtilities : object {
    [ExtensionAttribute]
public static void ShiftEvents(TrackChunk trackChunk, ITimeSpan distance, TempoMap tempoMap);
    [ExtensionAttribute]
public static void ShiftEvents(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan distance, TempoMap tempoMap);
}
public class Melanchall.DryWetMidi.Interaction.TuningBankSelectParameter : RegisteredParameter {
    [CompilerGeneratedAttribute]

private SevenBitNumber <BankNumber>k__BackingField;
    
public SevenBitNumber BankNumber { get; public set; }
    public TuningBankSelectParameter(SevenBitNumber bankNumber);
    public TuningBankSelectParameter(SevenBitNumber bankNumber, ParameterValueType valueType);
    [CompilerGeneratedAttribute]
public SevenBitNumber get_BankNumber();
    [CompilerGeneratedAttribute]
public void set_BankNumber(SevenBitNumber value);
    protected virtual void GetData(SevenBitNumber& msb, Nullable`1& lsb);
    protected virtual int GetIncrementStepsCount();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Interaction.TuningProgramChangeParameter : RegisteredParameter {
    [CompilerGeneratedAttribute]

private SevenBitNumber <ProgramNumber>k__BackingField;
    
public SevenBitNumber ProgramNumber { get; public set; }
    public TuningProgramChangeParameter(SevenBitNumber programNumber);
    public TuningProgramChangeParameter(SevenBitNumber programNumber, ParameterValueType valueType);
    [CompilerGeneratedAttribute]
public SevenBitNumber get_ProgramNumber();
    [CompilerGeneratedAttribute]
public void set_ProgramNumber(SevenBitNumber value);
    protected virtual void GetData(SevenBitNumber& msb, Nullable`1& lsb);
    protected virtual int GetIncrementStepsCount();
    public virtual string ToString();
}
public class Melanchall.DryWetMidi.Interaction.ValueChange`1 : object {
    
private long _time;
    [CompilerGeneratedAttribute]

private TValue <Value>k__BackingField;
    
public long Time { get; public set; }
    
public TValue Value { get; }
    internal ValueChange`1(long time, TValue value);
    public sealed virtual long get_Time();
    public sealed virtual void set_Time(long value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    public static bool op_Equality(ValueChange`1<TValue> change1, ValueChange`1<TValue> change2);
    public static bool op_Inequality(ValueChange`1<TValue> change1, ValueChange`1<TValue> change2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Melanchall.DryWetMidi.Interaction.ValueLine`1 : object {
    [CompilerGeneratedAttribute]

private EventHandler ValuesChanged;
    
private TimedObjectsComparer`1<ValueChange`1<TValue>> _comparer;
    
private List`1<ValueChange`1<TValue>> _valueChanges;
    
private TValue _defaultValue;
    
private bool _valuesChanged;
    
private long _maxTime;
    internal ValueLine`1(TValue defaultValue);
    [CompilerGeneratedAttribute]
internal void add_ValuesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ValuesChanged(EventHandler value);
    internal TValue GetValueAtTime(long time);
    internal ValueChange`1<TValue> GetValueChangeAtTime(long time);
    internal void SetValue(long time, TValue value);
    internal void DeleteValues(long startTime);
    internal void DeleteValues(long startTime, long endTime);
    internal void Clear();
    internal void ReplaceValues(ValueLine`1<TValue> valueLine);
    internal ValueLine`1<TValue> Reverse(long centerTime);
    private void OnValuesChanged(bool forceSort);
    private void OnValueChangesNeedSorting();
    private void OnValueChangesSortingCompleted();
    private void SortValueChanges();
    public sealed virtual IEnumerator`1<ValueChange`1<TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class Melanchall.DryWetMidi.Multimedia.CommonApi : NativeApi {
    public abstract virtual API_TYPE Api_GetApiType();
    public abstract virtual bool Api_CanCompareDevices();
}
internal class Melanchall.DryWetMidi.Multimedia.CommonApi32 : CommonApi {
    
private static string LibraryName;
    private static API_TYPE GetApiType();
    private static bool CanCompareDevices();
    public virtual API_TYPE Api_GetApiType();
    public virtual bool Api_CanCompareDevices();
}
internal class Melanchall.DryWetMidi.Multimedia.CommonApi64 : CommonApi {
    
private static string LibraryName;
    private static API_TYPE GetApiType();
    private static bool CanCompareDevices();
    public virtual API_TYPE Api_GetApiType();
    public virtual bool Api_CanCompareDevices();
}
internal static class Melanchall.DryWetMidi.Multimedia.CommonApiProvider : object {
    
private static bool Is64Bit;
    
private static CommonApi _api;
    
public static CommonApi Api { get; }
    private static CommonApiProvider();
    public static CommonApi get_Api();
}
public class Melanchall.DryWetMidi.Multimedia.DeviceAddedRemovedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private MidiDevice <Device>k__BackingField;
    
public MidiDevice Device { get; }
    internal DeviceAddedRemovedEventArgs(MidiDevice device);
    [CompilerGeneratedAttribute]
public MidiDevice get_Device();
}
public class Melanchall.DryWetMidi.Multimedia.DevicesConnector : object {
    [CompilerGeneratedAttribute]

private IInputDevice <InputDevice>k__BackingField;
    [CompilerGeneratedAttribute]

private IReadOnlyCollection`1<IOutputDevice> <OutputDevices>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <AreDevicesConnected>k__BackingField;
    [CompilerGeneratedAttribute]

private DevicesConnectorEventCallback <EventCallback>k__BackingField;
    
public IInputDevice InputDevice { get; }
    
public IReadOnlyCollection`1<IOutputDevice> OutputDevices { get; }
    
public bool AreDevicesConnected { get; private set; }
    
public DevicesConnectorEventCallback EventCallback { get; public set; }
    public DevicesConnector(IInputDevice inputDevice, IOutputDevice[] outputDevices);
    [CompilerGeneratedAttribute]
public IInputDevice get_InputDevice();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IOutputDevice> get_OutputDevices();
    [CompilerGeneratedAttribute]
public bool get_AreDevicesConnected();
    [CompilerGeneratedAttribute]
private void set_AreDevicesConnected(bool value);
    [CompilerGeneratedAttribute]
public DevicesConnectorEventCallback get_EventCallback();
    [CompilerGeneratedAttribute]
public void set_EventCallback(DevicesConnectorEventCallback value);
    public void Connect();
    public void Disconnect();
    private void OnEventReceived(object sender, MidiEventReceivedEventArgs e);
}
public class Melanchall.DryWetMidi.Multimedia.DevicesConnectorEventCallback : MulticastDelegate {
    public DevicesConnectorEventCallback(object object, IntPtr method);
    public virtual MidiEvent Invoke(MidiEvent inputMidiEvent);
    public virtual IAsyncResult BeginInvoke(MidiEvent inputMidiEvent, AsyncCallback callback, object object);
    public virtual MidiEvent EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Multimedia.DevicesConnectorUtilities : object {
    [ExtensionAttribute]
public static DevicesConnector Connect(IInputDevice inputDevice, IOutputDevice[] outputDevices);
}
public class Melanchall.DryWetMidi.Multimedia.DevicesWatcher : object {
    [CompilerGeneratedAttribute]

private EventHandler`1<DeviceAddedRemovedEventArgs> DeviceAdded;
    [CompilerGeneratedAttribute]

private EventHandler`1<DeviceAddedRemovedEventArgs> DeviceRemoved;
    
private static DevicesWatcher modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    
private static object _lockObject;
    
public static DevicesWatcher Instance { get; }
    private static DevicesWatcher();
    [CompilerGeneratedAttribute]
public void add_DeviceAdded(EventHandler`1<DeviceAddedRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DeviceAdded(EventHandler`1<DeviceAddedRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DeviceRemoved(EventHandler`1<DeviceAddedRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DeviceRemoved(EventHandler`1<DeviceAddedRemovedEventArgs> value);
    public static DevicesWatcher get_Instance();
    private void OnInputDeviceAdded(object sender, IntPtr info);
    private void OnInputDeviceRemoved(object sender, IntPtr info);
    private void OnOutputDeviceAdded(object sender, IntPtr info);
    private void OnOutputDeviceRemoved(object sender, IntPtr info);
}
public class Melanchall.DryWetMidi.Multimedia.ErrorOccurredEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private Exception <Exception>k__BackingField;
    
public Exception Exception { get; }
    internal ErrorOccurredEventArgs(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public class Melanchall.DryWetMidi.Multimedia.EventCallback : MulticastDelegate {
    public EventCallback(object object, IntPtr method);
    public virtual MidiEvent Invoke(MidiEvent rawEvent, long rawTime, TimeSpan playbackTime);
    public virtual IAsyncResult BeginInvoke(MidiEvent rawEvent, long rawTime, TimeSpan playbackTime, AsyncCallback callback, object object);
    public virtual MidiEvent EndInvoke(IAsyncResult result);
}
public class Melanchall.DryWetMidi.Multimedia.HighPrecisionTickGenerator : TickGenerator {
    
public static TimeSpan MinInterval;
    
public static TimeSpan MaxInterval;
    
private bool _disposed;
    
private TimerCallback_Win _tickCallback_Win;
    
private TimerCallback_Mac _tickCallback_Mac;
    
private IntPtr _tickGeneratorInfo;
    private static HighPrecisionTickGenerator();
    protected virtual override void Finalize();
    protected virtual void Start(TimeSpan interval);
    protected virtual void Stop();
    private void OnTick_Win(UInt32 uID, UInt32 uMsg, UInt32 dwUser, UInt32 dw1, UInt32 dw2);
    private void OnTick_Mac();
    private void OnTick();
    private TG_STOPRESULT StopInternal();
    private TG_STARTRESULT StartHighPrecisionTickGenerator_Win(int intervalInMilliseconds, IntPtr& tickGeneratorInfo);
    private TG_STARTRESULT StartHighPrecisionTickGenerator_Mac(int intervalInMilliseconds, IntPtr& tickGeneratorInfo);
    public virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public interface Melanchall.DryWetMidi.Multimedia.IClockDrivenObject {
    public abstract virtual void TickClock();
}
public interface Melanchall.DryWetMidi.Multimedia.IInputDevice {
    
public bool IsListeningForEvents { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_EventReceived(EventHandler`1<MidiEventReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EventReceived(EventHandler`1<MidiEventReceivedEventArgs> value);
    public abstract virtual bool get_IsListeningForEvents();
    public abstract virtual void StartEventsListening();
    public abstract virtual void StopEventsListening();
}
public class Melanchall.DryWetMidi.Multimedia.InputDevice : MidiDevice {
    
private static int SysExBufferSize;
    
private static int ChannelParametersBufferSize;
    
private static int MidiTimeCodeComponentsCount;
    [CompilerGeneratedAttribute]

private EventHandler`1<MidiEventReceivedEventArgs> EventReceived;
    [CompilerGeneratedAttribute]

private EventHandler`1<MidiTimeCodeReceivedEventArgs> MidiTimeCodeReceived;
    
private static InputDeviceProperty[] _supportedProperties;
    
private BytesToMidiEventConverter _bytesToMidiEventConverter;
    
private Callback_Win _callback_Win;
    
private Callback_Mac _callback_Mac;
    
private Byte[] _channelParametersBuffer;
    
private Dictionary`2<MidiTimeCodeComponent, FourBitNumber> _midiTimeCodeComponents;
    
private API_TYPE _apiType;
    
private int _hashCode;
    [CompilerGeneratedAttribute]

private bool <RaiseMidiTimeCodeReceived>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <IsListeningForEvents>k__BackingField;
    
public string Name { get; }
    
public bool RaiseMidiTimeCodeReceived { get; public set; }
    
public bool IsListeningForEvents { get; private set; }
    
public SilentNoteOnPolicy SilentNoteOnPolicy { get; public set; }
    internal InputDevice(IntPtr info, CreationContext context);
    private static InputDevice();
    [CompilerGeneratedAttribute]
public sealed virtual void add_EventReceived(EventHandler`1<MidiEventReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EventReceived(EventHandler`1<MidiEventReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MidiTimeCodeReceived(EventHandler`1<MidiTimeCodeReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MidiTimeCodeReceived(EventHandler`1<MidiTimeCodeReceivedEventArgs> value);
    protected virtual override void Finalize();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_RaiseMidiTimeCodeReceived();
    [CompilerGeneratedAttribute]
public void set_RaiseMidiTimeCodeReceived(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsListeningForEvents();
    [CompilerGeneratedAttribute]
private void set_IsListeningForEvents(bool value);
    public SilentNoteOnPolicy get_SilentNoteOnPolicy();
    public void set_SilentNoteOnPolicy(SilentNoteOnPolicy value);
    public sealed virtual void StartEventsListening();
    public sealed virtual void StopEventsListening();
    public object GetProperty(InputDeviceProperty property);
    public static InputDeviceProperty[] GetSupportedProperties();
    public static int GetDevicesCount();
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Multimedia.InputDevice/<GetAll>d__37")]
public static IEnumerable`1<InputDevice> GetAll();
    public static InputDevice GetByIndex(int index);
    public static InputDevice GetByName(string name);
    private void OnEventReceived(MidiEvent midiEvent);
    private void OnMidiTimeCodeReceived(MidiTimeCodeType timeCodeType, int hours, int minutes, int seconds, int frames);
    private void EnsureHandleIsCreated();
    private void DestroyHandle();
    private void OnMessage_Win(IntPtr hMidi, MidiMessage wMsg, IntPtr dwInstance, IntPtr dwParam1, IntPtr dwParam2);
    private void OnMessage_Mac(IntPtr pktlist, IntPtr readProcRefCon, IntPtr srcConnRefCon);
    private void OnInvalidShortEvent(int message);
    private void OnInvalidSysExEvent(IntPtr headerPointer);
    private void OnShortMessage(int message);
    private void OnSysExMessage(IntPtr sysExHeaderPointer);
    private void TryRaiseMidiTimeCodeReceived(MidiTimeCodeEvent midiTimeCodeEvent);
    private IN_DISCONNECTRESULT StopEventsListeningSilently();
    public static bool op_Equality(InputDevice inputDevice1, InputDevice inputDevice2);
    public static bool op_Inequality(InputDevice inputDevice1, InputDevice inputDevice2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal virtual void Dispose(bool disposing);
}
internal abstract class Melanchall.DryWetMidi.Multimedia.InputDeviceApi : NativeApi {
    public abstract virtual int Api_GetDevicesCount();
    public abstract virtual IN_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info);
    public abstract virtual int Api_GetDeviceHashCode(IntPtr info);
    public abstract virtual bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2);
    public abstract virtual IN_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, int sysExBufferSize, IntPtr& handle);
    public abstract virtual IN_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, Callback_Mac callback, IntPtr& handle);
    public abstract virtual IN_CLOSERESULT Api_CloseDevice(IntPtr handle);
    public abstract virtual IN_RENEWSYSEXBUFFERRESULT Api_RenewSysExBuffer(IntPtr handle, int size);
    public abstract virtual IN_CONNECTRESULT Api_Connect(IntPtr handle);
    public abstract virtual IN_DISCONNECTRESULT Api_Disconnect(IntPtr handle);
    public abstract virtual IN_GETEVENTDATARESULT Api_GetEventData(IntPtr packetList, int packetIndex, IntPtr& data, Int32& length);
    public abstract virtual IN_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr header, IntPtr& data, Int32& size);
    public abstract virtual bool Api_IsPropertySupported(InputDeviceProperty property);
    public abstract virtual IN_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name);
    public abstract virtual IN_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer);
    public abstract virtual IN_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& product);
    public abstract virtual IN_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion);
    public abstract virtual IN_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId);
    public abstract virtual IN_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner);
}
internal class Melanchall.DryWetMidi.Multimedia.InputDeviceApi32 : InputDeviceApi {
    
private static string LibraryName;
    private static int GetInputDevicesCount();
    private static IN_GETINFORESULT GetInputDeviceInfo(int deviceIndex, IntPtr& info);
    private static int GetInputDeviceHashCode(IntPtr info);
    private static bool AreInputDevicesEqual(IntPtr info1, IntPtr info2);
    private static IN_GETPROPERTYRESULT GetInputDeviceName(IntPtr info, IntPtr& value);
    private static IN_GETPROPERTYRESULT GetInputDeviceManufacturer(IntPtr info, IntPtr& value);
    private static IN_GETPROPERTYRESULT GetInputDeviceProduct(IntPtr info, IntPtr& value);
    private static IN_GETPROPERTYRESULT GetInputDeviceDriverVersion(IntPtr info, Int32& value);
    private static IN_OPENRESULT OpenInputDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, int sysExBufferSize, IntPtr& handle);
    private static IN_OPENRESULT OpenInputDevice_Mac(IntPtr info, IntPtr sessionHandle, Callback_Mac callback, IntPtr& handle);
    private static IN_CLOSERESULT CloseInputDevice(IntPtr handle);
    private static IN_RENEWSYSEXBUFFERRESULT RenewInputDeviceSysExBuffer(IntPtr handle, int size);
    private static IN_CONNECTRESULT ConnectToInputDevice(IntPtr handle);
    private static IN_DISCONNECTRESULT DisconnectFromInputDevice(IntPtr handle);
    private static IN_GETEVENTDATARESULT GetEventDataFromInputDevice(IntPtr packetList, int packetIndex, IntPtr& data, Int32& length);
    private static IN_GETSYSEXDATARESULT GetInputDeviceSysExBufferData(IntPtr header, IntPtr& data, Int32& size);
    private static bool IsInputDevicePropertySupported(InputDeviceProperty property);
    private static IN_GETPROPERTYRESULT GetInputDeviceUniqueId(IntPtr info, Int32& value);
    private static IN_GETPROPERTYRESULT GetInputDeviceDriverOwner(IntPtr info, IntPtr& value);
    public virtual int Api_GetDevicesCount();
    public virtual IN_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info);
    public virtual int Api_GetDeviceHashCode(IntPtr info);
    public virtual bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2);
    public virtual IN_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, int sysExBufferSize, IntPtr& handle);
    public virtual IN_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, Callback_Mac callback, IntPtr& handle);
    public virtual IN_CLOSERESULT Api_CloseDevice(IntPtr handle);
    public virtual IN_RENEWSYSEXBUFFERRESULT Api_RenewSysExBuffer(IntPtr handle, int size);
    public virtual IN_CONNECTRESULT Api_Connect(IntPtr handle);
    public virtual IN_DISCONNECTRESULT Api_Disconnect(IntPtr handle);
    public virtual IN_GETEVENTDATARESULT Api_GetEventData(IntPtr packetList, int packetIndex, IntPtr& data, Int32& length);
    public virtual IN_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr header, IntPtr& data, Int32& size);
    public virtual bool Api_IsPropertySupported(InputDeviceProperty property);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& product);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner);
}
internal class Melanchall.DryWetMidi.Multimedia.InputDeviceApi64 : InputDeviceApi {
    
private static string LibraryName;
    private static int GetInputDevicesCount();
    private static IN_GETINFORESULT GetInputDeviceInfo(int deviceIndex, IntPtr& info);
    private static int GetInputDeviceHashCode(IntPtr info);
    private static bool AreInputDevicesEqual(IntPtr info1, IntPtr info2);
    private static IN_GETPROPERTYRESULT GetInputDeviceName(IntPtr info, IntPtr& value);
    private static IN_GETPROPERTYRESULT GetInputDeviceManufacturer(IntPtr info, IntPtr& value);
    private static IN_GETPROPERTYRESULT GetInputDeviceProduct(IntPtr info, IntPtr& value);
    private static IN_GETPROPERTYRESULT GetInputDeviceDriverVersion(IntPtr info, Int32& value);
    private static IN_OPENRESULT OpenInputDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, int sysExBufferSize, IntPtr& handle);
    private static IN_OPENRESULT OpenInputDevice_Mac(IntPtr info, IntPtr sessionHandle, Callback_Mac callback, IntPtr& handle);
    private static IN_CLOSERESULT CloseInputDevice(IntPtr handle);
    private static IN_RENEWSYSEXBUFFERRESULT RenewInputDeviceSysExBuffer(IntPtr handle, int size);
    private static IN_CONNECTRESULT ConnectToInputDevice(IntPtr handle);
    private static IN_DISCONNECTRESULT DisconnectFromInputDevice(IntPtr handle);
    private static IN_GETEVENTDATARESULT GetEventDataFromInputDevice(IntPtr packetList, int packetIndex, IntPtr& data, Int32& length);
    private static IN_GETSYSEXDATARESULT GetInputDeviceSysExBufferData(IntPtr header, IntPtr& data, Int32& size);
    private static bool IsInputDevicePropertySupported(InputDeviceProperty property);
    private static IN_GETPROPERTYRESULT GetInputDeviceUniqueId(IntPtr info, Int32& value);
    private static IN_GETPROPERTYRESULT GetInputDeviceDriverOwner(IntPtr info, IntPtr& value);
    public virtual int Api_GetDevicesCount();
    public virtual IN_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info);
    public virtual int Api_GetDeviceHashCode(IntPtr info);
    public virtual bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2);
    public virtual IN_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, int sysExBufferSize, IntPtr& handle);
    public virtual IN_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, Callback_Mac callback, IntPtr& handle);
    public virtual IN_CLOSERESULT Api_CloseDevice(IntPtr handle);
    public virtual IN_RENEWSYSEXBUFFERRESULT Api_RenewSysExBuffer(IntPtr handle, int size);
    public virtual IN_CONNECTRESULT Api_Connect(IntPtr handle);
    public virtual IN_DISCONNECTRESULT Api_Disconnect(IntPtr handle);
    public virtual IN_GETEVENTDATARESULT Api_GetEventData(IntPtr packetList, int packetIndex, IntPtr& data, Int32& length);
    public virtual IN_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr header, IntPtr& data, Int32& size);
    public virtual bool Api_IsPropertySupported(InputDeviceProperty property);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& product);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId);
    public virtual IN_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner);
}
internal static class Melanchall.DryWetMidi.Multimedia.InputDeviceApiProvider : object {
    
private static bool Is64Bit;
    
private static InputDeviceApi _api;
    
public static InputDeviceApi Api { get; }
    private static InputDeviceApiProvider();
    public static InputDeviceApi get_Api();
}
public enum Melanchall.DryWetMidi.Multimedia.InputDeviceProperty : Enum {
    
public int value__;
    
public static InputDeviceProperty Product;
    
public static InputDeviceProperty Manufacturer;
    
public static InputDeviceProperty DriverVersion;
    
public static InputDeviceProperty UniqueId;
    
public static InputDeviceProperty DriverOwner;
}
public interface Melanchall.DryWetMidi.Multimedia.IOutputDevice {
    [CompilerGeneratedAttribute]
public abstract virtual void add_EventSent(EventHandler`1<MidiEventSentEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EventSent(EventHandler`1<MidiEventSentEventArgs> value);
    public abstract virtual void PrepareForEventsSending();
    public abstract virtual void SendEvent(MidiEvent midiEvent);
}
public class Melanchall.DryWetMidi.Multimedia.MidiClock : object {
    
private static double DefaultSpeed;
    [CompilerGeneratedAttribute]

private EventHandler Ticked;
    
private bool _disposed;
    
private bool _startImmediately;
    
private Stopwatch _stopwatch;
    
private TimeSpan _startTime;
    
private double _speed;
    
private TickGenerator _tickGenerator;
    [CompilerGeneratedAttribute]

private TimeSpan <Interval>k__BackingField;
    [CompilerGeneratedAttribute]

private TimeSpan <CurrentTime>k__BackingField;
    
public TimeSpan Interval { get; }
    
public bool IsRunning { get; }
    
public TimeSpan CurrentTime { get; private set; }
    
public double Speed { get; public set; }
    public MidiClock(bool startImmediately, TickGenerator tickGenerator, TimeSpan interval);
    [CompilerGeneratedAttribute]
public void add_Ticked(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Ticked(EventHandler value);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public TimeSpan get_Interval();
    public bool get_IsRunning();
    [CompilerGeneratedAttribute]
public TimeSpan get_CurrentTime();
    [CompilerGeneratedAttribute]
private void set_CurrentTime(TimeSpan value);
    public double get_Speed();
    public void set_Speed(double value);
    public void Start();
    public void Stop();
    public void Restart();
    public void ResetCurrentTime();
    public void SetCurrentTime(TimeSpan time);
    public void Tick();
    internal void StopInternally();
    internal void StopShortly();
    private void OnTickGenerated(object sender, EventArgs e);
    private void OnTicked();
    private void EnsureIsNotDisposed();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class Melanchall.DryWetMidi.Multimedia.MidiClockSettings : object {
    
private Func`1<TickGenerator> _createTickGeneratorCallback;
    
public Func`1<TickGenerator> CreateTickGeneratorCallback { get; public set; }
    public Func`1<TickGenerator> get_CreateTickGeneratorCallback();
    public void set_CreateTickGeneratorCallback(Func`1<TickGenerator> value);
}
public abstract class Melanchall.DryWetMidi.Multimedia.MidiDevice : object {
    [CompilerGeneratedAttribute]

private EventHandler`1<ErrorOccurredEventArgs> ErrorOccurred;
    
private static Dictionary`2<CreationContext, string> ContextsDescriptions;
    
protected IntPtr _info;
    
protected IntPtr _handle;
    
protected bool _disposed;
    [CompilerGeneratedAttribute]

private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]

private CreationContext <Context>k__BackingField;
    
public bool IsEnabled { get; public set; }
    
public string Name { get; }
    
internal CreationContext Context { get; }
    internal MidiDevice(IntPtr info, CreationContext context);
    private static MidiDevice();
    [CompilerGeneratedAttribute]
public void add_ErrorOccurred(EventHandler`1<ErrorOccurredEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ErrorOccurred(EventHandler`1<ErrorOccurredEventArgs> value);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    public abstract virtual string get_Name();
    [CompilerGeneratedAttribute]
internal CreationContext get_Context();
    protected void EnsureDeviceIsNotDisposed();
    protected void EnsureDeviceIsNotRemoved();
    protected void OnError(Exception exception);
    protected static void EnsureSessionIsCreated();
    public virtual string ToString();
    public sealed virtual void Dispose();
    internal abstract virtual void Dispose(bool disposing);
}
public class Melanchall.DryWetMidi.Multimedia.MidiDeviceException : MidiException {
    [CompilerGeneratedAttribute]

private Nullable`1<int> <ErrorCode>k__BackingField;
    
public Nullable`1<int> ErrorCode { get; }
    public MidiDeviceException(string message);
    public MidiDeviceException(string message, Exception innerException);
    public MidiDeviceException(string message, int errorCode);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ErrorCode();
}
internal static class Melanchall.DryWetMidi.Multimedia.MidiDevicesSession : object {
    [CompilerGeneratedAttribute]

private static EventHandler`1<IntPtr> InputDeviceAdded;
    [CompilerGeneratedAttribute]

private static EventHandler`1<IntPtr> InputDeviceRemoved;
    [CompilerGeneratedAttribute]

private static EventHandler`1<IntPtr> OutputDeviceAdded;
    [CompilerGeneratedAttribute]

private static EventHandler`1<IntPtr> OutputDeviceRemoved;
    
private static object _lockObject;
    
private static IntPtr _name;
    
private static IntPtr _handle;
    
private static InputDeviceCallback _inputDeviceCallback;
    
private static OutputDeviceCallback _outputDeviceCallback;
    private static MidiDevicesSession();
    [CompilerGeneratedAttribute]
internal static void add_InputDeviceAdded(EventHandler`1<IntPtr> value);
    [CompilerGeneratedAttribute]
internal static void remove_InputDeviceAdded(EventHandler`1<IntPtr> value);
    [CompilerGeneratedAttribute]
internal static void add_InputDeviceRemoved(EventHandler`1<IntPtr> value);
    [CompilerGeneratedAttribute]
internal static void remove_InputDeviceRemoved(EventHandler`1<IntPtr> value);
    [CompilerGeneratedAttribute]
internal static void add_OutputDeviceAdded(EventHandler`1<IntPtr> value);
    [CompilerGeneratedAttribute]
internal static void remove_OutputDeviceAdded(EventHandler`1<IntPtr> value);
    [CompilerGeneratedAttribute]
internal static void add_OutputDeviceRemoved(EventHandler`1<IntPtr> value);
    [CompilerGeneratedAttribute]
internal static void remove_OutputDeviceRemoved(EventHandler`1<IntPtr> value);
    public static IntPtr GetSessionHandle();
    private static void InputDeviceCallback(IntPtr info, bool operation);
    private static void OutputDeviceCallback(IntPtr info, bool operation);
}
internal abstract class Melanchall.DryWetMidi.Multimedia.MidiDevicesSessionApi : NativeApi {
    public abstract virtual SESSION_OPENRESULT Api_OpenSession_Mac(IntPtr name, InputDeviceCallback inputDeviceCallback, OutputDeviceCallback outputDeviceCallback, IntPtr& handle);
    public abstract virtual SESSION_OPENRESULT Api_OpenSession_Win(IntPtr name, IntPtr& handle);
    public abstract virtual SESSION_CLOSERESULT Api_CloseSession(IntPtr handle);
}
internal class Melanchall.DryWetMidi.Multimedia.MidiDevicesSessionApi32 : MidiDevicesSessionApi {
    
private static string LibraryName;
    private static SESSION_OPENRESULT OpenSession_Mac(IntPtr name, InputDeviceCallback inputDeviceCallback, OutputDeviceCallback outputDeviceCallback, IntPtr& handle);
    private static SESSION_OPENRESULT OpenSession_Win(IntPtr name, IntPtr& handle);
    private static SESSION_CLOSERESULT CloseSession(IntPtr handle);
    public virtual SESSION_OPENRESULT Api_OpenSession_Mac(IntPtr name, InputDeviceCallback inputDeviceCallback, OutputDeviceCallback outputDeviceCallback, IntPtr& handle);
    public virtual SESSION_OPENRESULT Api_OpenSession_Win(IntPtr name, IntPtr& handle);
    public virtual SESSION_CLOSERESULT Api_CloseSession(IntPtr handle);
}
internal class Melanchall.DryWetMidi.Multimedia.MidiDevicesSessionApi64 : MidiDevicesSessionApi {
    
private static string LibraryName;
    private static SESSION_OPENRESULT OpenSession_Mac(IntPtr name, InputDeviceCallback inputDeviceCallback, OutputDeviceCallback outputDeviceCallback, IntPtr& handle);
    private static SESSION_OPENRESULT OpenSession_Win(IntPtr name, IntPtr& handle);
    private static SESSION_CLOSERESULT CloseSession(IntPtr handle);
    public virtual SESSION_OPENRESULT Api_OpenSession_Mac(IntPtr name, InputDeviceCallback inputDeviceCallback, OutputDeviceCallback outputDeviceCallback, IntPtr& handle);
    public virtual SESSION_OPENRESULT Api_OpenSession_Win(IntPtr name, IntPtr& handle);
    public virtual SESSION_CLOSERESULT Api_CloseSession(IntPtr handle);
}
internal static class Melanchall.DryWetMidi.Multimedia.MidiDevicesSessionApiProvider : object {
    
private static bool Is64Bit;
    
private static MidiDevicesSessionApi _api;
    
public static MidiDevicesSessionApi Api { get; }
    private static MidiDevicesSessionApiProvider();
    public static MidiDevicesSessionApi get_Api();
}
public class Melanchall.DryWetMidi.Multimedia.MidiEventPlayedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private MidiEvent <Event>k__BackingField;
    [CompilerGeneratedAttribute]

private object <Metadata>k__BackingField;
    
public MidiEvent Event { get; }
    
public object Metadata { get; }
    internal MidiEventPlayedEventArgs(MidiEvent midiEvent, object metadata);
    [CompilerGeneratedAttribute]
public MidiEvent get_Event();
    [CompilerGeneratedAttribute]
public object get_Metadata();
}
public class Melanchall.DryWetMidi.Multimedia.MidiEventReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private MidiEvent <Event>k__BackingField;
    
public MidiEvent Event { get; }
    public MidiEventReceivedEventArgs(MidiEvent midiEvent);
    [CompilerGeneratedAttribute]
public MidiEvent get_Event();
}
public class Melanchall.DryWetMidi.Multimedia.MidiEventSentEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private MidiEvent <Event>k__BackingField;
    
public MidiEvent Event { get; }
    public MidiEventSentEventArgs(MidiEvent midiEvent);
    [CompilerGeneratedAttribute]
public MidiEvent get_Event();
}
public class Melanchall.DryWetMidi.Multimedia.MidiTimeCodeReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private MidiTimeCodeType <Format>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Hours>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Minutes>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Seconds>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Frames>k__BackingField;
    
public MidiTimeCodeType Format { get; }
    
public int Hours { get; }
    
public int Minutes { get; }
    
public int Seconds { get; }
    
public int Frames { get; }
    internal MidiTimeCodeReceivedEventArgs(MidiTimeCodeType timeCodeType, int hours, int minutes, int seconds, int frames);
    [CompilerGeneratedAttribute]
public MidiTimeCodeType get_Format();
    [CompilerGeneratedAttribute]
public int get_Hours();
    [CompilerGeneratedAttribute]
public int get_Minutes();
    [CompilerGeneratedAttribute]
public int get_Seconds();
    [CompilerGeneratedAttribute]
public int get_Frames();
}
internal abstract class Melanchall.DryWetMidi.Multimedia.NativeApi : object {
    
protected static string LibraryName32;
    
protected static string LibraryName64;
    
private static Dictionary`2<NativeErrorType, string> ErrorsDescriptions;
    private static NativeApi();
    protected string GetStringFromPointer(IntPtr stringPointer);
    public static void HandleResult(T result);
}
public class Melanchall.DryWetMidi.Multimedia.NoteCallback : MulticastDelegate {
    public NoteCallback(object object, IntPtr method);
    public virtual NotePlaybackData Invoke(NotePlaybackData rawNoteData, long rawTime, long rawLength, TimeSpan playbackTime);
    public virtual IAsyncResult BeginInvoke(NotePlaybackData rawNoteData, long rawTime, long rawLength, TimeSpan playbackTime, AsyncCallback callback, object object);
    public virtual NotePlaybackData EndInvoke(IAsyncResult result);
}
public class Melanchall.DryWetMidi.Multimedia.NotePlaybackData : object {
    
public static NotePlaybackData SkipNote;
    [CompilerGeneratedAttribute]

private SevenBitNumber <NoteNumber>k__BackingField;
    [CompilerGeneratedAttribute]

private SevenBitNumber <Velocity>k__BackingField;
    [CompilerGeneratedAttribute]

private SevenBitNumber <OffVelocity>k__BackingField;
    [CompilerGeneratedAttribute]

private FourBitNumber <Channel>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <PlayNote>k__BackingField;
    
public SevenBitNumber NoteNumber { get; }
    
public SevenBitNumber Velocity { get; }
    
public SevenBitNumber OffVelocity { get; }
    
public FourBitNumber Channel { get; }
    
internal bool PlayNote { get; }
    public NotePlaybackData(SevenBitNumber noteNumber, SevenBitNumber velocity, SevenBitNumber offVelocity, FourBitNumber channel);
    private NotePlaybackData(bool playNote);
    private static NotePlaybackData();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_NoteNumber();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_Velocity();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_OffVelocity();
    [CompilerGeneratedAttribute]
public FourBitNumber get_Channel();
    [CompilerGeneratedAttribute]
internal bool get_PlayNote();
    internal NoteOnEvent GetNoteOnEvent();
    internal NoteOffEvent GetNoteOffEvent();
}
internal class Melanchall.DryWetMidi.Multimedia.NotePlaybackEventMetadata : object {
    [CompilerGeneratedAttribute]

private Note <RawNote>k__BackingField;
    [CompilerGeneratedAttribute]

private TimeSpan <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]

private TimeSpan <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]

private NotePlaybackData <RawNotePlaybackData>k__BackingField;
    [CompilerGeneratedAttribute]

private NotePlaybackData <NotePlaybackData>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <IsCustomNotePlaybackDataSet>k__BackingField;
    
public Note RawNote { get; }
    
public TimeSpan StartTime { get; }
    
public TimeSpan EndTime { get; }
    
public NotePlaybackData RawNotePlaybackData { get; }
    
public NotePlaybackData NotePlaybackData { get; private set; }
    
public bool IsCustomNotePlaybackDataSet { get; private set; }
    public NotePlaybackEventMetadata(Note note, TimeSpan startTime, TimeSpan endTime);
    [CompilerGeneratedAttribute]
public Note get_RawNote();
    [CompilerGeneratedAttribute]
public TimeSpan get_StartTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_EndTime();
    [CompilerGeneratedAttribute]
public NotePlaybackData get_RawNotePlaybackData();
    [CompilerGeneratedAttribute]
public NotePlaybackData get_NotePlaybackData();
    [CompilerGeneratedAttribute]
private void set_NotePlaybackData(NotePlaybackData value);
    [CompilerGeneratedAttribute]
public bool get_IsCustomNotePlaybackDataSet();
    [CompilerGeneratedAttribute]
private void set_IsCustomNotePlaybackDataSet(bool value);
    public Note GetEffectiveNote();
    public void SetCustomNotePlaybackData(NotePlaybackData notePlaybackData);
}
public class Melanchall.DryWetMidi.Multimedia.NotesEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private IEnumerable`1<Note> <Notes>k__BackingField;
    
public IEnumerable`1<Note> Notes { get; }
    internal NotesEventArgs(Note[] notes);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Note> get_Notes();
}
public class Melanchall.DryWetMidi.Multimedia.OutputDevice : MidiDevice {
    
private static int ShortEventBufferSize;
    
private static IEventWriter ChannelEventWriter;
    
private static IEventWriter SystemRealTimeEventWriter;
    [CompilerGeneratedAttribute]

private EventHandler`1<MidiEventSentEventArgs> EventSent;
    
private static OutputDeviceProperty[] _supportedProperties;
    
private MidiEventToBytesConverter _midiEventToBytesConverter;
    
private BytesToMidiEventConverter _bytesToMidiEventConverter;
    
private Callback_Win _callback;
    
private API_TYPE _apiType;
    
private int _hashCode;
    
public string Name { get; }
    internal OutputDevice(IntPtr info, CreationContext context);
    private static OutputDevice();
    [CompilerGeneratedAttribute]
public sealed virtual void add_EventSent(EventHandler`1<MidiEventSentEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EventSent(EventHandler`1<MidiEventSentEventArgs> value);
    protected virtual override void Finalize();
    public virtual string get_Name();
    public sealed virtual void SendEvent(MidiEvent midiEvent);
    public void TurnAllNotesOff();
    public sealed virtual void PrepareForEventsSending();
    public static int GetDevicesCount();
    public object GetProperty(OutputDeviceProperty property);
    public static OutputDeviceProperty[] GetSupportedProperties();
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Multimedia.OutputDevice/<GetAll>d__22")]
public static IEnumerable`1<OutputDevice> GetAll();
    public static OutputDevice GetByIndex(int index);
    public static OutputDevice GetByName(string name);
    private void EnsureHandleIsCreated();
    private void DestroyHandle();
    private void SendSysExEvent(SysExEvent sysExEvent);
    private void SendSysExEventData_Win(Byte[] data);
    private void SendSysExEventData_Mac(Byte[] data);
    private int PackShortEvent(MidiEvent midiEvent);
    private void OnMessage(IntPtr hMidi, MidiMessage wMsg, IntPtr dwInstance, IntPtr dwParam1, IntPtr dwParam2);
    private void OnSysExEventSent(IntPtr sysExHeaderPointer);
    private void OnEventSent(MidiEvent midiEvent);
    public static bool op_Equality(OutputDevice outputDevice1, OutputDevice outputDevice2);
    public static bool op_Inequality(OutputDevice outputDevice1, OutputDevice outputDevice2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal virtual void Dispose(bool disposing);
}
internal abstract class Melanchall.DryWetMidi.Multimedia.OutputDeviceApi : NativeApi {
    public abstract virtual int Api_GetDevicesCount();
    public abstract virtual OUT_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info);
    public abstract virtual int Api_GetDeviceHashCode(IntPtr info);
    public abstract virtual bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2);
    public abstract virtual OUT_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, IntPtr& handle);
    public abstract virtual OUT_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, IntPtr& handle);
    public abstract virtual OUT_CLOSERESULT Api_CloseDevice(IntPtr handle);
    public abstract virtual OUT_SENDSHORTRESULT Api_SendShortEvent(IntPtr handle, int message);
    public abstract virtual OUT_SENDSYSEXRESULT Api_SendSysExEvent_Mac(IntPtr handle, Byte[] data, ushort dataSize);
    public abstract virtual OUT_SENDSYSEXRESULT Api_SendSysExEvent_Win(IntPtr handle, IntPtr data, int size);
    public abstract virtual OUT_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr handle, IntPtr header, IntPtr& data, Int32& size);
    public abstract virtual bool Api_IsPropertySupported(OutputDeviceProperty property);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& manufacturer);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceTechnology(IntPtr info, OutputDeviceTechnology& deviceType);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceVoicesNumber(IntPtr info, Int32& voicesNumber);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceNotesNumber(IntPtr info, Int32& notesNumber);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceChannelsMask(IntPtr info, Int32& channelsMask);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceOptions(IntPtr info, OutputDeviceOption& option);
    public abstract virtual OUT_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner);
}
internal class Melanchall.DryWetMidi.Multimedia.OutputDeviceApi32 : OutputDeviceApi {
    
private static string LibraryName;
    private static int GetOutputDevicesCount();
    private static OUT_GETINFORESULT GetOutputDeviceInfo(int deviceIndex, IntPtr& info);
    private static int GetOutputDeviceHashCode(IntPtr info);
    private static bool AreOutputDevicesEqual(IntPtr info1, IntPtr info2);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceName(IntPtr info, IntPtr& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceManufacturer(IntPtr info, IntPtr& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceProduct(IntPtr info, IntPtr& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceDriverVersion(IntPtr info, Int32& value);
    private static OUT_OPENRESULT OpenOutputDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, IntPtr& handle);
    private static OUT_OPENRESULT OpenOutputDevice_Mac(IntPtr info, IntPtr sessionHandle, IntPtr& handle);
    private static OUT_CLOSERESULT CloseOutputDevice(IntPtr handle);
    private static OUT_SENDSHORTRESULT SendShortEventToOutputDevice(IntPtr handle, int message);
    private static OUT_SENDSYSEXRESULT SendSysExEventToOutputDevice_Mac(IntPtr handle, Byte[] data, ushort dataSize);
    private static OUT_SENDSYSEXRESULT SendSysExEventToOutputDevice_Win(IntPtr handle, IntPtr data, int size);
    private static OUT_GETSYSEXDATARESULT GetOutputDeviceSysExBufferData(IntPtr handle, IntPtr header, IntPtr& data, Int32& size);
    private static bool IsOutputDevicePropertySupported(OutputDeviceProperty property);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceTechnology(IntPtr info, OutputDeviceTechnology& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceUniqueId(IntPtr info, Int32& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceVoicesNumber(IntPtr info, Int32& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceNotesNumber(IntPtr info, Int32& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceChannelsMask(IntPtr info, Int32& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceOptions(IntPtr info, OutputDeviceOption& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceDriverOwner(IntPtr info, IntPtr& value);
    public virtual int Api_GetDevicesCount();
    public virtual OUT_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info);
    public virtual int Api_GetDeviceHashCode(IntPtr info);
    public virtual bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2);
    public virtual OUT_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, IntPtr& handle);
    public virtual OUT_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, IntPtr& handle);
    public virtual OUT_CLOSERESULT Api_CloseDevice(IntPtr handle);
    public virtual OUT_SENDSHORTRESULT Api_SendShortEvent(IntPtr handle, int message);
    public virtual OUT_SENDSYSEXRESULT Api_SendSysExEvent_Mac(IntPtr handle, Byte[] data, ushort dataSize);
    public virtual OUT_SENDSYSEXRESULT Api_SendSysExEvent_Win(IntPtr handle, IntPtr data, int size);
    public virtual OUT_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr handle, IntPtr header, IntPtr& data, Int32& size);
    public virtual bool Api_IsPropertySupported(OutputDeviceProperty property);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& product);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceTechnology(IntPtr info, OutputDeviceTechnology& deviceType);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceVoicesNumber(IntPtr info, Int32& voicesNumber);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceNotesNumber(IntPtr info, Int32& notesNumber);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceChannelsMask(IntPtr info, Int32& channelsMask);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceOptions(IntPtr info, OutputDeviceOption& option);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner);
}
internal class Melanchall.DryWetMidi.Multimedia.OutputDeviceApi64 : OutputDeviceApi {
    
private static string LibraryName;
    private static int GetOutputDevicesCount();
    private static OUT_GETINFORESULT GetOutputDeviceInfo(int deviceIndex, IntPtr& info);
    private static int GetOutputDeviceHashCode(IntPtr info);
    private static bool AreOutputDevicesEqual(IntPtr info1, IntPtr info2);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceName(IntPtr info, IntPtr& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceManufacturer(IntPtr info, IntPtr& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceProduct(IntPtr info, IntPtr& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceDriverVersion(IntPtr info, Int32& value);
    private static OUT_OPENRESULT OpenOutputDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, IntPtr& handle);
    private static OUT_OPENRESULT OpenOutputDevice_Mac(IntPtr info, IntPtr sessionHandle, IntPtr& handle);
    private static OUT_CLOSERESULT CloseOutputDevice(IntPtr handle);
    private static OUT_SENDSHORTRESULT SendShortEventToOutputDevice(IntPtr handle, int message);
    private static OUT_SENDSYSEXRESULT SendSysExEventToOutputDevice_Mac(IntPtr handle, Byte[] data, ushort dataSize);
    private static OUT_SENDSYSEXRESULT SendSysExEventToOutputDevice_Win(IntPtr handle, IntPtr data, int size);
    private static OUT_GETSYSEXDATARESULT GetOutputDeviceSysExBufferData(IntPtr handle, IntPtr header, IntPtr& data, Int32& size);
    private static bool IsOutputDevicePropertySupported(OutputDeviceProperty property);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceTechnology(IntPtr info, OutputDeviceTechnology& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceUniqueId(IntPtr info, Int32& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceVoicesNumber(IntPtr info, Int32& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceNotesNumber(IntPtr info, Int32& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceChannelsMask(IntPtr info, Int32& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceOptions(IntPtr info, OutputDeviceOption& value);
    private static OUT_GETPROPERTYRESULT GetOutputDeviceDriverOwner(IntPtr info, IntPtr& value);
    public virtual int Api_GetDevicesCount();
    public virtual OUT_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info);
    public virtual int Api_GetDeviceHashCode(IntPtr info);
    public virtual bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2);
    public virtual OUT_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, IntPtr& handle);
    public virtual OUT_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, IntPtr& handle);
    public virtual OUT_CLOSERESULT Api_CloseDevice(IntPtr handle);
    public virtual OUT_SENDSHORTRESULT Api_SendShortEvent(IntPtr handle, int message);
    public virtual OUT_SENDSYSEXRESULT Api_SendSysExEvent_Mac(IntPtr handle, Byte[] data, ushort dataSize);
    public virtual OUT_SENDSYSEXRESULT Api_SendSysExEvent_Win(IntPtr handle, IntPtr data, int size);
    public virtual OUT_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr handle, IntPtr header, IntPtr& data, Int32& size);
    public virtual bool Api_IsPropertySupported(OutputDeviceProperty property);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& product);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceTechnology(IntPtr info, OutputDeviceTechnology& deviceType);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceVoicesNumber(IntPtr info, Int32& voicesNumber);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceNotesNumber(IntPtr info, Int32& notesNumber);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceChannelsMask(IntPtr info, Int32& channelsMask);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceOptions(IntPtr info, OutputDeviceOption& option);
    public virtual OUT_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner);
}
internal static class Melanchall.DryWetMidi.Multimedia.OutputDeviceApiProvider : object {
    
private static bool Is64Bit;
    
private static OutputDeviceApi _api;
    
public static OutputDeviceApi Api { get; }
    private static OutputDeviceApiProvider();
    public static OutputDeviceApi get_Api();
}
[FlagsAttribute]
public enum Melanchall.DryWetMidi.Multimedia.OutputDeviceOption : Enum {
    
public int value__;
    
public static OutputDeviceOption Unknown;
    
public static OutputDeviceOption PatchCaching;
    
public static OutputDeviceOption LeftRightVolume;
    
public static OutputDeviceOption Stream;
    
public static OutputDeviceOption Volume;
}
public enum Melanchall.DryWetMidi.Multimedia.OutputDeviceProperty : Enum {
    
public int value__;
    
public static OutputDeviceProperty Product;
    
public static OutputDeviceProperty Manufacturer;
    
public static OutputDeviceProperty DriverVersion;
    
public static OutputDeviceProperty Technology;
    
public static OutputDeviceProperty UniqueId;
    
public static OutputDeviceProperty VoicesNumber;
    
public static OutputDeviceProperty NotesNumber;
    
public static OutputDeviceProperty Channels;
    
public static OutputDeviceProperty Options;
    
public static OutputDeviceProperty DriverOwner;
}
public enum Melanchall.DryWetMidi.Multimedia.OutputDeviceTechnology : Enum {
    
public int value__;
    
public static OutputDeviceTechnology Unknown;
    
public static OutputDeviceTechnology MidiPort;
    
public static OutputDeviceTechnology Synth;
    
public static OutputDeviceTechnology SquareSynth;
    
public static OutputDeviceTechnology FmSynth;
    
public static OutputDeviceTechnology Mapper;
    
public static OutputDeviceTechnology Wavetable;
    
public static OutputDeviceTechnology SoftwareSynth;
}
public class Melanchall.DryWetMidi.Multimedia.Playback : object {
    
private static TimeSpan ClockInterval;
    
private static TimeSpan MinPlaybackTime;
    
private static TimeSpan MaxPlaybackTime;
    [CompilerGeneratedAttribute]

private EventHandler Started;
    [CompilerGeneratedAttribute]

private EventHandler Stopped;
    [CompilerGeneratedAttribute]

private EventHandler Finished;
    [CompilerGeneratedAttribute]

private EventHandler RepeatStarted;
    [CompilerGeneratedAttribute]

private EventHandler`1<NotesEventArgs> NotesPlaybackStarted;
    [CompilerGeneratedAttribute]

private EventHandler`1<NotesEventArgs> NotesPlaybackFinished;
    [CompilerGeneratedAttribute]

private EventHandler`1<MidiEventPlayedEventArgs> EventPlayed;
    [CompilerGeneratedAttribute]

private EventHandler`1<ErrorOccurredEventArgs> DeviceErrorOccurred;
    
private IEnumerator`1<PlaybackEvent> _eventsEnumerator;
    
private TimeSpan _duration;
    
private long _durationInTicks;
    
private ITimeSpan _playbackStart;
    
private TimeSpan _playbackStartMetric;
    
private ITimeSpan _playbackEnd;
    
private TimeSpan _playbackEndMetric;
    
private bool _hasBeenStarted;
    
private MidiClock _clock;
    
private ConcurrentDictionary`2<NotePlaybackEventMetadata, byte> _activeNotesMetadata;
    
private List`1<NotePlaybackEventMetadata> _notesMetadata;
    
private PlaybackDataTracker _playbackDataTracker;
    
private bool _disposed;
    [CompilerGeneratedAttribute]

private TempoMap <TempoMap>k__BackingField;
    [CompilerGeneratedAttribute]

private IOutputDevice <OutputDevice>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Loop>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <InterruptNotesOnStop>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <TrackNotes>k__BackingField;
    [CompilerGeneratedAttribute]

private PlaybackSnapping <Snapping>k__BackingField;
    [CompilerGeneratedAttribute]

private NoteCallback <NoteCallback>k__BackingField;
    [CompilerGeneratedAttribute]

private EventCallback <EventCallback>k__BackingField;
    
public TempoMap TempoMap { get; }
    
public IOutputDevice OutputDevice { get; public set; }
    
public bool IsRunning { get; }
    
public bool Loop { get; public set; }
    
public bool InterruptNotesOnStop { get; public set; }
    
public bool TrackNotes { get; public set; }
    
public bool TrackProgram { get; public set; }
    
public bool TrackPitchValue { get; public set; }
    
public bool TrackControlValue { get; public set; }
    
public double Speed { get; public set; }
    
public PlaybackSnapping Snapping { get; }
    
public NoteCallback NoteCallback { get; public set; }
    
public EventCallback EventCallback { get; public set; }
    
public ITimeSpan PlaybackStart { get; public set; }
    
public ITimeSpan PlaybackEnd { get; public set; }
    public Playback(IEnumerable`1<ITimedObject> timedObjects, TempoMap tempoMap, PlaybackSettings playbackSettings);
    public Playback(IEnumerable`1<ITimedObject> timedObjects, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings);
    private static Playback();
    [CompilerGeneratedAttribute]
public void add_Started(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Started(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Stopped(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Stopped(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Finished(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Finished(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_RepeatStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RepeatStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_NotesPlaybackStarted(EventHandler`1<NotesEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_NotesPlaybackStarted(EventHandler`1<NotesEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_NotesPlaybackFinished(EventHandler`1<NotesEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_NotesPlaybackFinished(EventHandler`1<NotesEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_EventPlayed(EventHandler`1<MidiEventPlayedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_EventPlayed(EventHandler`1<MidiEventPlayedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DeviceErrorOccurred(EventHandler`1<ErrorOccurredEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DeviceErrorOccurred(EventHandler`1<ErrorOccurredEventArgs> value);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public TempoMap get_TempoMap();
    [CompilerGeneratedAttribute]
public IOutputDevice get_OutputDevice();
    [CompilerGeneratedAttribute]
public void set_OutputDevice(IOutputDevice value);
    public bool get_IsRunning();
    [CompilerGeneratedAttribute]
public bool get_Loop();
    [CompilerGeneratedAttribute]
public void set_Loop(bool value);
    [CompilerGeneratedAttribute]
public bool get_InterruptNotesOnStop();
    [CompilerGeneratedAttribute]
public void set_InterruptNotesOnStop(bool value);
    [CompilerGeneratedAttribute]
public bool get_TrackNotes();
    [CompilerGeneratedAttribute]
public void set_TrackNotes(bool value);
    public bool get_TrackProgram();
    public void set_TrackProgram(bool value);
    public bool get_TrackPitchValue();
    public void set_TrackPitchValue(bool value);
    public bool get_TrackControlValue();
    public void set_TrackControlValue(bool value);
    public double get_Speed();
    public void set_Speed(double value);
    [CompilerGeneratedAttribute]
public PlaybackSnapping get_Snapping();
    [CompilerGeneratedAttribute]
public NoteCallback get_NoteCallback();
    [CompilerGeneratedAttribute]
public void set_NoteCallback(NoteCallback value);
    [CompilerGeneratedAttribute]
public EventCallback get_EventCallback();
    [CompilerGeneratedAttribute]
public void set_EventCallback(EventCallback value);
    public ITimeSpan get_PlaybackStart();
    public void set_PlaybackStart(ITimeSpan value);
    public ITimeSpan get_PlaybackEnd();
    public void set_PlaybackEnd(ITimeSpan value);
    public ITimeSpan GetDuration(TimeSpanType durationType);
    public TTimeSpan GetDuration();
    public ITimeSpan GetCurrentTime(TimeSpanType timeType);
    public TTimeSpan GetCurrentTime();
    public void Start();
    public void Stop();
    public void Play();
    public bool MoveToSnapPoint(SnapPoint snapPoint);
    public bool MoveToFirstSnapPoint();
    public bool MoveToFirstSnapPoint(TData data);
    public bool MoveToPreviousSnapPoint(SnapPointsGroup snapPointsGroup);
    public bool MoveToPreviousSnapPoint();
    public bool MoveToPreviousSnapPoint(TData data);
    public bool MoveToNextSnapPoint(SnapPointsGroup snapPointsGroup);
    public bool MoveToNextSnapPoint();
    public bool MoveToNextSnapPoint(TData data);
    public void MoveToStart();
    public void MoveToTime(ITimeSpan time);
    public void MoveForward(ITimeSpan step);
    public void MoveBack(ITimeSpan step);
    protected virtual bool TryPlayEvent(MidiEvent midiEvent, object metadata);
    protected virtual IEnumerable`1<TimedEvent> GetTimedEvents(ITimedObject timedObject);
    private bool TryToMoveToSnapPoint(SnapPoint snapPoint);
    private void SendTrackedData(TrackedParameterType trackedParameterType);
    private void StopStartNotes();
    private void OnStarted();
    private void OnStopped();
    private void OnFinished();
    private void OnRepeatStarted();
    private void OnNotesPlaybackStarted(Note[] notes);
    private void OnNotesPlaybackFinished(Note[] notes);
    private void OnEventPlayed(MidiEvent midiEvent, object metadata);
    private void OnDeviceErrorOccurred(Exception exception);
    private void OnClockTicked(object sender, EventArgs e);
    private void EnsureIsNotDisposed();
    private void SetStartTime(ITimeSpan time);
    private void PlayEvent(MidiEvent midiEvent, object metadata);
    private bool TryPlayNoteEvent(NotePlaybackEventMetadata noteMetadata, bool isNoteOnEvent, TimeSpan time, Note& note);
    private bool TryPlayNoteEvent(PlaybackEvent playbackEvent, Note& note);
    private bool TryPlayNoteEvent(NotePlaybackEventMetadata noteMetadata, MidiEvent midiEvent, bool isNoteOnEvent, TimeSpan time, Note& note);
    private ICollection`1<PlaybackEvent> GetPlaybackEvents(IEnumerable`1<ITimedObject> timedObjects, TempoMap tempoMap);
    private static PlaybackEvent GetPlaybackEvent(TimedEvent timedEvent, TempoMap tempoMap);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Multimedia.Playback/<GetPlaybackEvents>d__135")]
private static IEnumerable`1<PlaybackEvent> GetPlaybackEvents(Chord chord, TempoMap tempoMap);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Multimedia.Playback/<GetPlaybackEvents>d__136")]
private static IEnumerable`1<PlaybackEvent> GetPlaybackEvents(Note note, TempoMap tempoMap);
    private static PlaybackEvent GetPlaybackEventWithNoteMetadata(TimedEvent timedEvent, TempoMap tempoMap, NotePlaybackEventMetadata noteMetadata);
    public sealed virtual void TickClock();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private bool <Play>b__99_0();
}
public class Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTime : object {
    [CompilerGeneratedAttribute]

private Playback <Playback>k__BackingField;
    [CompilerGeneratedAttribute]

private ITimeSpan <Time>k__BackingField;
    
public Playback Playback { get; }
    
public ITimeSpan Time { get; }
    internal PlaybackCurrentTime(Playback playback, ITimeSpan time);
    [CompilerGeneratedAttribute]
public Playback get_Playback();
    [CompilerGeneratedAttribute]
public ITimeSpan get_Time();
}
public class Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTimeChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private IEnumerable`1<PlaybackCurrentTime> <Times>k__BackingField;
    
public IEnumerable`1<PlaybackCurrentTime> Times { get; }
    internal PlaybackCurrentTimeChangedEventArgs(IEnumerable`1<PlaybackCurrentTime> times);
    [CompilerGeneratedAttribute]
public IEnumerable`1<PlaybackCurrentTime> get_Times();
}
public class Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTimeWatcher : object {
    
private static TimeSpan DefaultPollingInterval;
    [CompilerGeneratedAttribute]

private EventHandler`1<PlaybackCurrentTimeChangedEventArgs> CurrentTimeChanged;
    
private static Lazy`1<PlaybackCurrentTimeWatcher> _lazyInstance;
    
private Dictionary`2<Playback, TimeSpanType> _playbacks;
    
private object _playbacksLock;
    
private MidiClockSettings _clockSettings;
    
private MidiClock _clock;
    
private TimeSpan _pollingInterval;
    
private bool _disposed;
    
public static PlaybackCurrentTimeWatcher Instance { get; }
    
public TimeSpan PollingInterval { get; public set; }
    
public IEnumerable`1<Playback> Playbacks { get; }
    
public bool IsWatching { get; }
    private PlaybackCurrentTimeWatcher(MidiClockSettings clockSettings);
    private static PlaybackCurrentTimeWatcher();
    [CompilerGeneratedAttribute]
public void add_CurrentTimeChanged(EventHandler`1<PlaybackCurrentTimeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CurrentTimeChanged(EventHandler`1<PlaybackCurrentTimeChangedEventArgs> value);
    public static PlaybackCurrentTimeWatcher get_Instance();
    public TimeSpan get_PollingInterval();
    public void set_PollingInterval(TimeSpan value);
    public IEnumerable`1<Playback> get_Playbacks();
    public bool get_IsWatching();
    public void Start();
    public void Stop();
    public void AddPlayback(Playback playback, TimeSpanType timeType);
    public void RemovePlayback(Playback playback);
    public void RemoveAllPlaybacks();
    private void OnTick(object sender, EventArgs e);
    private void OnCurrentTimeChanged(IEnumerable`1<PlaybackCurrentTime> times);
    private void EnsureIsNotDisposed();
    private void DisposeClock();
    private void CreateClock(TimeSpan pollingInterval);
    private void RecreateClock();
    public sealed virtual void TickClock();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class Melanchall.DryWetMidi.Multimedia.PlaybackDataTracker : object {
    
private static ProgramChange DefaultProgramChange;
    
private static PitchValueChange DefaultPitchValueChange;
    
private static ControlValueChange DefaultControlValueChange;
    
private ProgramChange[] _currentProgramChanges;
    
private ValueLine`1[] _programsChangesLinesByChannels;
    
private PitchValueChange[] _currentPitchValues;
    
private ValueLine`1[] _pitchValuesLinesByChannel;
    
private Dictionary`2[] _currentControlsValuesChangesByChannel;
    
private Dictionary`2[] _controlsValuesChangesLinesByChannel;
    
private TempoMap _tempoMap;
    
private Dictionary`2<TrackedParameterType, Func`2<long, IEnumerable`1<EventWithMetadata>>> _getParameterEventsAtTime;
    [CompilerGeneratedAttribute]

private bool <TrackProgram>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <TrackPitchValue>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <TrackControlValue>k__BackingField;
    
public bool TrackProgram { get; public set; }
    
public bool TrackPitchValue { get; public set; }
    
public bool TrackControlValue { get; public set; }
    public PlaybackDataTracker(TempoMap tempoMap);
    private static PlaybackDataTracker();
    [CompilerGeneratedAttribute]
public bool get_TrackProgram();
    [CompilerGeneratedAttribute]
public void set_TrackProgram(bool value);
    [CompilerGeneratedAttribute]
public bool get_TrackPitchValue();
    [CompilerGeneratedAttribute]
public void set_TrackPitchValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_TrackControlValue();
    [CompilerGeneratedAttribute]
public void set_TrackControlValue(bool value);
    public void InitializeData(MidiEvent midiEvent, long time, object metadata);
    public void UpdateCurrentData(MidiEvent midiEvent, object metadata);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Multimedia.PlaybackDataTracker/<GetEventsAtTime>d__32")]
public IEnumerable`1<EventWithMetadata> GetEventsAtTime(TimeSpan time, TrackedParameterType trackedParameterType);
    private void UpdateCurrentProgramChangeData(ProgramChangeEvent programChangeEvent, object metadata);
    private void InitializeProgramChangeData(ProgramChangeEvent programChangeEvent, long time, object metadata);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Multimedia.PlaybackDataTracker/<GetProgramChangeEventsAtTime>d__35")]
private IEnumerable`1<EventWithMetadata> GetProgramChangeEventsAtTime(long time);
    private void UpdateCurrentPitchBendData(PitchBendEvent pitchBendEvent, object metadata);
    private void InitializePitchBendData(PitchBendEvent pitchBendEvent, long time, object metadata);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Multimedia.PlaybackDataTracker/<GetPitchBendEventsAtTime>d__38")]
private IEnumerable`1<EventWithMetadata> GetPitchBendEventsAtTime(long time);
    private void UpdateCurrentControlData(ControlChangeEvent controlChangeEvent, object metadata);
    private void InitializeControlData(ControlChangeEvent controlChangeEvent, long time, object metadata);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Multimedia.PlaybackDataTracker/<GetControlChangeEventsAtTime>d__41")]
private IEnumerable`1<EventWithMetadata> GetControlChangeEventsAtTime(long time);
    [CompilerGeneratedAttribute]
private IEnumerable`1<EventWithMetadata> <.ctor>b__17_0(long time);
    [CompilerGeneratedAttribute]
private IEnumerable`1<EventWithMetadata> <.ctor>b__17_1(long time);
    [CompilerGeneratedAttribute]
private IEnumerable`1<EventWithMetadata> <.ctor>b__17_2(long time);
}
internal class Melanchall.DryWetMidi.Multimedia.PlaybackEvent : object {
    [CompilerGeneratedAttribute]

private MidiEvent <Event>k__BackingField;
    [CompilerGeneratedAttribute]

private TimeSpan <Time>k__BackingField;
    [CompilerGeneratedAttribute]

private long <RawTime>k__BackingField;
    [CompilerGeneratedAttribute]

private PlaybackEventMetadata <Metadata>k__BackingField;
    
public MidiEvent Event { get; }
    
public TimeSpan Time { get; }
    
public long RawTime { get; }
    
public PlaybackEventMetadata Metadata { get; }
    public PlaybackEvent(MidiEvent midiEvent, TimeSpan time, long rawTime);
    [CompilerGeneratedAttribute]
public MidiEvent get_Event();
    [CompilerGeneratedAttribute]
public TimeSpan get_Time();
    [CompilerGeneratedAttribute]
public long get_RawTime();
    [CompilerGeneratedAttribute]
public PlaybackEventMetadata get_Metadata();
}
public class Melanchall.DryWetMidi.Multimedia.PlaybackEventCallback : MulticastDelegate {
    public PlaybackEventCallback(object object, IntPtr method);
    public virtual MidiEvent Invoke(MidiEvent midiEvent, TimeSpan time, long rawTime);
    public virtual IAsyncResult BeginInvoke(MidiEvent midiEvent, TimeSpan time, long rawTime, AsyncCallback callback, object object);
    public virtual MidiEvent EndInvoke(IAsyncResult result);
}
internal class Melanchall.DryWetMidi.Multimedia.PlaybackEventMetadata : object {
    [CompilerGeneratedAttribute]

private NotePlaybackEventMetadata <Note>k__BackingField;
    [CompilerGeneratedAttribute]

private TimedEventPlaybackEventMetadata <TimedEvent>k__BackingField;
    
public NotePlaybackEventMetadata Note { get; public set; }
    
public TimedEventPlaybackEventMetadata TimedEvent { get; public set; }
    [CompilerGeneratedAttribute]
public NotePlaybackEventMetadata get_Note();
    [CompilerGeneratedAttribute]
public void set_Note(NotePlaybackEventMetadata value);
    [CompilerGeneratedAttribute]
public TimedEventPlaybackEventMetadata get_TimedEvent();
    [CompilerGeneratedAttribute]
public void set_TimedEvent(TimedEventPlaybackEventMetadata value);
}
internal class Melanchall.DryWetMidi.Multimedia.PlaybackEventsComparer : object {
    public sealed virtual int Compare(PlaybackEvent x, PlaybackEvent y);
}
public class Melanchall.DryWetMidi.Multimedia.PlaybackSettings : object {
    [CompilerGeneratedAttribute]

private MidiClockSettings <ClockSettings>k__BackingField;
    [CompilerGeneratedAttribute]

private NoteDetectionSettings <NoteDetectionSettings>k__BackingField;
    
public MidiClockSettings ClockSettings { get; public set; }
    
public NoteDetectionSettings NoteDetectionSettings { get; public set; }
    [CompilerGeneratedAttribute]
public MidiClockSettings get_ClockSettings();
    [CompilerGeneratedAttribute]
public void set_ClockSettings(MidiClockSettings value);
    [CompilerGeneratedAttribute]
public NoteDetectionSettings get_NoteDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_NoteDetectionSettings(NoteDetectionSettings value);
}
public class Melanchall.DryWetMidi.Multimedia.PlaybackSnapping : object {
    
private List`1<SnapPoint> _snapPoints;
    
private IEnumerable`1<PlaybackEvent> _playbackEvents;
    
private TempoMap _tempoMap;
    
private TimeSpan _maxTime;
    
private SnapPointsGroup _noteStartSnapPointsGroup;
    
private SnapPointsGroup _noteEndSnapPointsGroup;
    [CompilerGeneratedAttribute]

private bool <IsEnabled>k__BackingField;
    
public IEnumerable`1<SnapPoint> SnapPoints { get; }
    
public bool IsEnabled { get; public set; }
    internal PlaybackSnapping(IEnumerable`1<PlaybackEvent> playbackEvents, TempoMap tempoMap);
    public IEnumerable`1<SnapPoint> get_SnapPoints();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    public SnapPoint`1<TData> AddSnapPoint(ITimeSpan time, TData data);
    public SnapPoint`1<Guid> AddSnapPoint(ITimeSpan time);
    public void RemoveSnapPoint(SnapPoint`1<TData> snapPoint);
    public void RemoveSnapPointsByData(Predicate`1<TData> predicate);
    public void Clear();
    public SnapPointsGroup SnapToGrid(IGrid grid);
    public SnapPointsGroup SnapToNotesStarts();
    public SnapPointsGroup SnapToNotesEnds();
    internal SnapPoint GetNextSnapPoint(TimeSpan time, SnapPointsGroup snapPointsGroup);
    internal SnapPoint GetNextSnapPoint(TimeSpan time);
    internal SnapPoint`1<TData> GetNextSnapPoint(TimeSpan time, TData data);
    internal SnapPoint GetPreviousSnapPoint(TimeSpan time, SnapPointsGroup snapPointsGroup);
    internal SnapPoint GetPreviousSnapPoint(TimeSpan time);
    internal SnapPoint`1<TData> GetPreviousSnapPoint(TimeSpan time, TData data);
    internal IEnumerable`1<SnapPoint> GetActiveSnapPoints();
    private IEnumerable`1<SnapPoint> GetNextSnapPoints(IEnumerable`1<SnapPoint> snapPoints, TimeSpan time);
    private IEnumerable`1<SnapPoint> GetPreviousSnapPoints(IEnumerable`1<SnapPoint> snapPoints, TimeSpan time);
    private bool IsSnapPointWithData(SnapPoint snapPoint, TData data);
    private SnapPointsGroup SnapToNoteEvents(bool snapToNoteOn);
    private IEnumerable`1<SnapPoint> GetActiveSnapPoints(SnapPointsGroup snapPointsGroup);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Multimedia.PlaybackUtilities : object {
    [ExtensionAttribute]
public static Playback GetPlayback(IEnumerable`1<MidiEvent> events, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(IEnumerable`1<MidiEvent> events, TempoMap tempoMap, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(TrackChunk trackChunk, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(TrackChunk trackChunk, TempoMap tempoMap, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(MidiFile midiFile, IOutputDevice outputDevice, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(MidiFile midiFile, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(Pattern pattern, TempoMap tempoMap, FourBitNumber channel, IOutputDevice outputDevice, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(Pattern pattern, TempoMap tempoMap, FourBitNumber channel, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, SevenBitNumber programNumber, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidiProgram generalMidiProgram, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static Playback GetPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidi2Program generalMidi2Program, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static void Play(TrackChunk trackChunk, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static void Play(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static void Play(MidiFile midiFile, IOutputDevice outputDevice, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static void Play(Pattern pattern, TempoMap tempoMap, FourBitNumber channel, IOutputDevice outputDevice, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static void Play(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, SevenBitNumber programNumber, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static void Play(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidiProgram generalMidiProgram, PlaybackSettings playbackSettings);
    [ExtensionAttribute]
public static void Play(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidi2Program generalMidi2Program, PlaybackSettings playbackSettings);
    private static Playback GetMusicalObjectsPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, Func`2<FourBitNumber, IEnumerable`1<MidiEvent>> programChangeEventsGetter, PlaybackSettings playbackSettings);
}
public class Melanchall.DryWetMidi.Multimedia.Recording : object {
    [CompilerGeneratedAttribute]

private EventHandler Started;
    [CompilerGeneratedAttribute]

private EventHandler Stopped;
    
private List`1<RecordingEvent> _events;
    
private Stopwatch _stopwatch;
    
private bool _disposed;
    [CompilerGeneratedAttribute]

private TempoMap <TempoMap>k__BackingField;
    [CompilerGeneratedAttribute]

private IInputDevice <InputDevice>k__BackingField;
    
public TempoMap TempoMap { get; }
    
public IInputDevice InputDevice { get; }
    
public bool IsRunning { get; }
    public Recording(TempoMap tempoMap, IInputDevice inputDevice);
    [CompilerGeneratedAttribute]
public void add_Started(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Started(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Stopped(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Stopped(EventHandler value);
    [CompilerGeneratedAttribute]
public TempoMap get_TempoMap();
    [CompilerGeneratedAttribute]
public IInputDevice get_InputDevice();
    public bool get_IsRunning();
    public ITimeSpan GetDuration(TimeSpanType durationType);
    public TTimeSpan GetDuration();
    public IReadOnlyList`1<TimedEvent> GetEvents();
    public void Start();
    public void Stop();
    private void OnStarted();
    private void OnStopped();
    private void OnEventReceived(object sender, MidiEventReceivedEventArgs e);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private TimedEvent <GetEvents>b__20_0(RecordingEvent e);
}
internal class Melanchall.DryWetMidi.Multimedia.RecordingEvent : object {
    [CompilerGeneratedAttribute]

private MidiEvent <Event>k__BackingField;
    [CompilerGeneratedAttribute]

private TimeSpan <Time>k__BackingField;
    
public MidiEvent Event { get; }
    
public TimeSpan Time { get; }
    public RecordingEvent(MidiEvent midiEvent, TimeSpan time);
    [CompilerGeneratedAttribute]
public MidiEvent get_Event();
    [CompilerGeneratedAttribute]
public TimeSpan get_Time();
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Multimedia.RecordingUtilities : object {
    [ExtensionAttribute]
public static TrackChunk ToTrackChunk(Recording recording);
    [ExtensionAttribute]
public static MidiFile ToFile(Recording recording);
}
public class Melanchall.DryWetMidi.Multimedia.RegularPrecisionTickGenerator : TickGenerator {
    
public static TimeSpan MinInterval;
    
public static TimeSpan MaxInterval;
    
private Timer _timer;
    
private bool _disposed;
    private static RegularPrecisionTickGenerator();
    protected virtual void Start(TimeSpan interval);
    protected virtual void Stop();
    private void OnElapsed(object sender, ElapsedEventArgs e);
    protected virtual void Dispose(bool disposing);
}
public class Melanchall.DryWetMidi.Multimedia.SnapPoint : object {
    [CompilerGeneratedAttribute]

private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]

private TimeSpan <Time>k__BackingField;
    [CompilerGeneratedAttribute]

private SnapPointsGroup <SnapPointsGroup>k__BackingField;
    
public bool IsEnabled { get; public set; }
    
public TimeSpan Time { get; }
    
public SnapPointsGroup SnapPointsGroup { get; internal set; }
    internal SnapPoint(TimeSpan time);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Time();
    [CompilerGeneratedAttribute]
public SnapPointsGroup get_SnapPointsGroup();
    [CompilerGeneratedAttribute]
internal void set_SnapPointsGroup(SnapPointsGroup value);
}
public class Melanchall.DryWetMidi.Multimedia.SnapPoint`1 : SnapPoint {
    [CompilerGeneratedAttribute]

private TData <Data>k__BackingField;
    
public TData Data { get; }
    internal SnapPoint`1(TimeSpan time, TData data);
    [CompilerGeneratedAttribute]
public TData get_Data();
}
public class Melanchall.DryWetMidi.Multimedia.SnapPointsGroup : object {
    [CompilerGeneratedAttribute]

private bool <IsEnabled>k__BackingField;
    
public bool IsEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
}
public abstract class Melanchall.DryWetMidi.Multimedia.TickGenerator : object {
    [CompilerGeneratedAttribute]

private EventHandler TickGenerated;
    [CompilerGeneratedAttribute]

private bool <IsRunning>k__BackingField;
    
protected bool IsRunning { get; protected set; }
    [CompilerGeneratedAttribute]
public void add_TickGenerated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TickGenerated(EventHandler value);
    [CompilerGeneratedAttribute]
protected bool get_IsRunning();
    [CompilerGeneratedAttribute]
protected void set_IsRunning(bool value);
    internal void TryStart(TimeSpan interval);
    internal void TryStop();
    protected void GenerateTick();
    protected abstract virtual void Start(TimeSpan interval);
    protected abstract virtual void Stop();
    public virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal abstract class Melanchall.DryWetMidi.Multimedia.TickGeneratorApi : NativeApi {
    public abstract virtual TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Win(int interval, TimerCallback_Win callback, IntPtr& info);
    public abstract virtual TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Mac(int interval, TimerCallback_Mac callback, IntPtr& info);
    public abstract virtual TG_STOPRESULT Api_StopHighPrecisionTickGenerator(IntPtr info);
}
internal class Melanchall.DryWetMidi.Multimedia.TickGeneratorApi32 : TickGeneratorApi {
    
private static string LibraryName;
    private static TG_STARTRESULT StartHighPrecisionTickGenerator_Win(int interval, TimerCallback_Win callback, IntPtr& info);
    private static TG_STARTRESULT StartHighPrecisionTickGenerator_Mac(int interval, TimerCallback_Mac callback, IntPtr& info);
    private static TG_STOPRESULT StopHighPrecisionTickGenerator(IntPtr info);
    public virtual TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Win(int interval, TimerCallback_Win callback, IntPtr& info);
    public virtual TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Mac(int interval, TimerCallback_Mac callback, IntPtr& info);
    public virtual TG_STOPRESULT Api_StopHighPrecisionTickGenerator(IntPtr info);
}
internal class Melanchall.DryWetMidi.Multimedia.TickGeneratorApi64 : TickGeneratorApi {
    
private static string LibraryName;
    public static TG_STARTRESULT StartHighPrecisionTickGenerator_Win(int interval, TimerCallback_Win callback, IntPtr& info);
    public static TG_STARTRESULT StartHighPrecisionTickGenerator_Mac(int interval, TimerCallback_Mac callback, IntPtr& info);
    public static TG_STOPRESULT StopHighPrecisionTickGenerator(IntPtr info);
    public virtual TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Win(int interval, TimerCallback_Win callback, IntPtr& info);
    public virtual TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Mac(int interval, TimerCallback_Mac callback, IntPtr& info);
    public virtual TG_STOPRESULT Api_StopHighPrecisionTickGenerator(IntPtr info);
}
internal static class Melanchall.DryWetMidi.Multimedia.TickGeneratorApiProvider : object {
    
private static bool Is64Bit;
    
private static TickGeneratorApi _api;
    
public static TickGeneratorApi Api { get; }
    private static TickGeneratorApiProvider();
    public static TickGeneratorApi get_Api();
}
public class Melanchall.DryWetMidi.Multimedia.TickGeneratorException : MidiException {
    [CompilerGeneratedAttribute]

private int <ErrorCode>k__BackingField;
    
public int ErrorCode { get; }
    public TickGeneratorException(string message, int errorCode);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
}
internal class Melanchall.DryWetMidi.Multimedia.TimedEventPlaybackEventMetadata : object {
    [CompilerGeneratedAttribute]

private object <Metadata>k__BackingField;
    
public object Metadata { get; }
    public TimedEventPlaybackEventMetadata(object metadata);
    [CompilerGeneratedAttribute]
public object get_Metadata();
}
public class Melanchall.DryWetMidi.Multimedia.VirtualDevice : MidiDevice {
    
private string _name;
    
private Callback_Mac _callback_Mac;
    [CompilerGeneratedAttribute]

private InputDevice <InputDevice>k__BackingField;
    [CompilerGeneratedAttribute]

private OutputDevice <OutputDevice>k__BackingField;
    
public string Name { get; }
    
public InputDevice InputDevice { get; private set; }
    
public OutputDevice OutputDevice { get; private set; }
    internal VirtualDevice(string name);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public InputDevice get_InputDevice();
    [CompilerGeneratedAttribute]
private void set_InputDevice(InputDevice value);
    [CompilerGeneratedAttribute]
public OutputDevice get_OutputDevice();
    [CompilerGeneratedAttribute]
private void set_OutputDevice(OutputDevice value);
    public static VirtualDevice Create(string name);
    private void OnMessage_Mac(IntPtr pktlist, IntPtr readProcRefCon, IntPtr srcConnRefCon);
    private void InitializeDevice_Mac();
    public virtual string ToString();
    internal virtual void Dispose(bool disposing);
}
internal abstract class Melanchall.DryWetMidi.Multimedia.VirtualDeviceApi : NativeApi {
    public abstract virtual VIRTUAL_OPENRESULT Api_OpenDevice_Mac(string name, IntPtr sessionHandle, Callback_Mac callback, IntPtr& info);
    public abstract virtual VIRTUAL_CLOSERESULT Api_CloseDevice(IntPtr info);
    public abstract virtual VIRTUAL_SENDBACKRESULT Api_SendDataBack(IntPtr pktlist, IntPtr readProcRefCon);
    public abstract virtual IntPtr Api_GetInputDeviceInfo(IntPtr info);
    public abstract virtual IntPtr Api_GetOutputDeviceInfo(IntPtr info);
}
internal class Melanchall.DryWetMidi.Multimedia.VirtualDeviceApi32 : VirtualDeviceApi {
    
private static string LibraryName;
    private static VIRTUAL_OPENRESULT OpenVirtualDevice_Mac(IntPtr name, IntPtr sessionHandle, Callback_Mac callback, IntPtr& info);
    private static VIRTUAL_CLOSERESULT CloseVirtualDevice(IntPtr info);
    private static VIRTUAL_SENDBACKRESULT SendDataBackFromVirtualDevice(IntPtr pktlist, IntPtr readProcRefCon);
    private static IntPtr GetInputDeviceInfoFromVirtualDevice(IntPtr info);
    private static IntPtr GetOutputDeviceInfoFromVirtualDevice(IntPtr info);
    public virtual VIRTUAL_OPENRESULT Api_OpenDevice_Mac(string name, IntPtr sessionHandle, Callback_Mac callback, IntPtr& info);
    public virtual VIRTUAL_CLOSERESULT Api_CloseDevice(IntPtr info);
    public virtual VIRTUAL_SENDBACKRESULT Api_SendDataBack(IntPtr pktlist, IntPtr readProcRefCon);
    public virtual IntPtr Api_GetInputDeviceInfo(IntPtr info);
    public virtual IntPtr Api_GetOutputDeviceInfo(IntPtr info);
}
internal class Melanchall.DryWetMidi.Multimedia.VirtualDeviceApi64 : VirtualDeviceApi {
    
private static string LibraryName;
    private static VIRTUAL_OPENRESULT OpenVirtualDevice_Mac(IntPtr name, IntPtr sessionHandle, Callback_Mac callback, IntPtr& info);
    private static VIRTUAL_CLOSERESULT CloseVirtualDevice(IntPtr info);
    private static VIRTUAL_SENDBACKRESULT SendDataBackFromVirtualDevice(IntPtr pktlist, IntPtr readProcRefCon);
    private static IntPtr GetInputDeviceInfoFromVirtualDevice(IntPtr info);
    private static IntPtr GetOutputDeviceInfoFromVirtualDevice(IntPtr info);
    public virtual VIRTUAL_OPENRESULT Api_OpenDevice_Mac(string name, IntPtr sessionHandle, Callback_Mac callback, IntPtr& info);
    public virtual VIRTUAL_CLOSERESULT Api_CloseDevice(IntPtr info);
    public virtual VIRTUAL_SENDBACKRESULT Api_SendDataBack(IntPtr pktlist, IntPtr readProcRefCon);
    public virtual IntPtr Api_GetInputDeviceInfo(IntPtr info);
    public virtual IntPtr Api_GetOutputDeviceInfo(IntPtr info);
}
internal static class Melanchall.DryWetMidi.Multimedia.VirtualDeviceApiProvider : object {
    
private static bool Is64Bit;
    
private static VirtualDeviceApi _api;
    
public static VirtualDeviceApi Api { get; }
    private static VirtualDeviceApiProvider();
    public static VirtualDeviceApi get_Api();
}
public class Melanchall.DryWetMidi.MusicTheory.Chord : object {
    
private static Dictionary`2<ChordQuality, IntervalDefinition[]> IntervalsByQuality;
    
private IReadOnlyCollection`1<string> _chordNames;
    [CompilerGeneratedAttribute]

private ICollection`1<NoteName> <NotesNames>k__BackingField;
    
public ICollection`1<NoteName> NotesNames { get; }
    
public NoteName RootNoteName { get; }
    public Chord(ICollection`1<NoteName> notesNames);
    public Chord(NoteName rootNoteName, NoteName[] notesNamesAboveRoot);
    public Chord(NoteName rootNoteName, IEnumerable`1<Interval> intervalsFromRoot);
    public Chord(NoteName rootNoteName, Interval[] intervalsFromRoot);
    private static Chord();
    [CompilerGeneratedAttribute]
public ICollection`1<NoteName> get_NotesNames();
    public NoteName get_RootNoteName();
    public IReadOnlyCollection`1<string> GetNames();
    public static bool TryParse(string input, Chord& chord);
    public static Chord Parse(string input);
    public static Chord GetByTriad(NoteName rootNoteName, ChordQuality chordQuality, Interval[] intervalsFromRoot);
    public static bool op_Equality(Chord chord1, Chord chord2);
    public static bool op_Inequality(Chord chord1, Chord chord2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Melanchall.DryWetMidi.MusicTheory.ChordParser : object {
    
private static string RootNoteNameGroupName;
    
private static string BassNoteNameGroupName;
    
private static string ChordCharacteristicsGroupName;
    
public static string ChordCharacteristicsGroup;
    
private static string RootNoteNameGroup;
    
private static string BassNoteNameGroup;
    
private static String[] Patterns;
    
private static string ChordCharacteristicIsUnknown;
    private static ChordParser();
    internal static ParsingResult TryParse(string input, Chord& chord);
}
public class Melanchall.DryWetMidi.MusicTheory.ChordProgression : object {
    [CompilerGeneratedAttribute]

private IEnumerable`1<Chord> <Chords>k__BackingField;
    
public IEnumerable`1<Chord> Chords { get; }
    public ChordProgression(IEnumerable`1<Chord> chords);
    public ChordProgression(Chord[] chords);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Chord> get_Chords();
    public static bool TryParse(string input, Scale scale, ChordProgression& chordProgression);
    public static ChordProgression Parse(string input, Scale scale);
    private static Parsing`1<ChordProgression> GetParsing(string input, Scale scale);
    public static bool op_Equality(ChordProgression chordProgression1, ChordProgression chordProgression2);
    public static bool op_Inequality(ChordProgression chordProgression1, ChordProgression chordProgression2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Melanchall.DryWetMidi.MusicTheory.ChordProgressionParser : object {
    
private static char PartsDelimiter;
    
private static string ScaleDegreeGroupName;
    
private static string ScaleDegreeGroup;
    
private static String[] Patterns;
    
private static Dictionary`2<char, int> RomanMap;
    private static ChordProgressionParser();
    internal static ParsingResult TryParse(string input, Scale scale, ChordProgression& chordProgression);
    private static int RomanToInteger(string roman);
}
public enum Melanchall.DryWetMidi.MusicTheory.ChordQuality : Enum {
    
public int value__;
    
public static ChordQuality Major;
    
public static ChordQuality Minor;
    
public static ChordQuality Augmented;
    
public static ChordQuality Diminished;
}
internal static class Melanchall.DryWetMidi.MusicTheory.ChordsNamesTable : object {
    
private static NameDefinition[] NamesDefinitions;
    private static ChordsNamesTable();
    public static NoteName[] GetChordNotesNames(NoteName rootNoteName, string chordCharacteristic, Nullable`1<NoteName> bassNoteName);
    public static IList`1<string> GetChordNames(NoteName[] notesNames);
    private static IList`1<string> GetChordNamesByPermutation(NoteName[] notesNames);
    private static List`1<string> GetChordNamesInternal(ICollection`1<NoteName> notesNames);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.MusicTheory.ChordUtilities : object {
    [ExtensionAttribute]
public static IEnumerable`1<Interval> GetIntervalsFromRootNote(Chord chord);
    [ExtensionAttribute]
public static IEnumerable`1<Interval> GetIntervalsBetweenNotes(Chord chord);
    [ExtensionAttribute]
public static Note ResolveRootNote(Chord chord, Octave octave);
    [ExtensionAttribute]
public static IEnumerable`1<Note> ResolveNotes(Chord chord, Octave octave);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.MusicTheory.ChordUtilities/<GetInversions>d__4")]
[ExtensionAttribute]
public static IEnumerable`1<Chord> GetInversions(Chord chord);
    internal static IEnumerable`1<Interval> GetIntervalsFromRootNote(ICollection`1<NoteName> notesNames);
    private static IEnumerable`1<SevenBitNumber> GetIntervals(Chord chord);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.MusicTheory.ChordUtilities/<GetIntervals>d__7")]
private static IEnumerable`1<SevenBitNumber> GetIntervals(ICollection`1<NoteName> notesNames);
}
public class Melanchall.DryWetMidi.MusicTheory.Interval : object {
    
private static Dictionary`2<SevenBitNumber, Dictionary`2<IntervalDirection, Interval>> Cache;
    
private IReadOnlyCollection`1<IntervalDefinition> _intervalDefinitions;
    
public static Interval Zero;
    
public static Interval One;
    
public static Interval Two;
    
public static Interval Three;
    
public static Interval Four;
    
public static Interval Five;
    
public static Interval Six;
    
public static Interval Seven;
    
public static Interval Eight;
    
public static Interval Nine;
    
public static Interval Ten;
    
public static Interval Eleven;
    
public static Interval Twelve;
    
private static Dictionary`2<IntervalQuality, Dictionary`2<int, int>> IntervalsHalfTones;
    
private static Nullable`1[] QualitiesPattern;
    
private static Dictionary`2<int, IntervalQuality> AdditionalQualitiesPattern;
    
private static Int32[] IntervalNumbersOffsets;
    [CompilerGeneratedAttribute]

private SevenBitNumber <Size>k__BackingField;
    [CompilerGeneratedAttribute]

private IntervalDirection <Direction>k__BackingField;
    
public SevenBitNumber Size { get; }
    
public IntervalDirection Direction { get; }
    
public int HalfSteps { get; }
    private Interval(SevenBitNumber size, IntervalDirection direction);
    private static Interval();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_Size();
    [CompilerGeneratedAttribute]
public IntervalDirection get_Direction();
    public int get_HalfSteps();
    public Interval Up();
    public Interval Down();
    public IReadOnlyCollection`1<IntervalDefinition> GetIntervalDefinitions();
    public static bool IsPerfect(int intervalNumber);
    public static bool IsQualityApplicable(IntervalQuality intervalQuality, int intervalNumber);
    public static Interval Get(IntervalQuality intervalQuality, int intervalNumber);
    public static Interval Get(SevenBitNumber intervalSize, IntervalDirection direction);
    public static Interval GetUp(SevenBitNumber intervalSize);
    public static Interval GetDown(SevenBitNumber intervalSize);
    public static Interval FromHalfSteps(int halfSteps);
    public static Interval FromDefinition(IntervalDefinition intervalDefinition);
    public static bool TryParse(string input, Interval& interval);
    public static Interval Parse(string input);
    public static int op_Implicit(Interval interval);
    public static Interval op_Implicit(SevenBitNumber interval);
    public static bool op_Equality(Interval interval1, Interval interval2);
    public static bool op_Inequality(Interval interval1, Interval interval2);
    public static Interval op_Addition(Interval interval, int halfSteps);
    public static Interval op_Subtraction(Interval interval, int halfSteps);
    public static Interval op_Multiply(Interval interval, int multiplier);
    public static Interval op_Division(Interval interval, int divisor);
    public static Interval op_UnaryPlus(Interval interval);
    public static Interval op_UnaryNegation(Interval interval);
    public sealed virtual int CompareTo(Interval other);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Melanchall.DryWetMidi.MusicTheory.IntervalDefinition : object {
    
private static Dictionary`2<IntervalQuality, char> QualitiesSymbols;
    [CompilerGeneratedAttribute]

private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]

private IntervalQuality <Quality>k__BackingField;
    
public int Number { get; }
    
public IntervalQuality Quality { get; }
    public IntervalDefinition(int number, IntervalQuality quality);
    private static IntervalDefinition();
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
public IntervalQuality get_Quality();
    public static bool op_Equality(IntervalDefinition intervalDefinition1, IntervalDefinition intervalDefinition2);
    public static bool op_Inequality(IntervalDefinition intervalDefinition1, IntervalDefinition intervalDefinition2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Melanchall.DryWetMidi.MusicTheory.IntervalDirection : Enum {
    
public int value__;
    
public static IntervalDirection Up;
    
public static IntervalDirection Down;
}
internal static class Melanchall.DryWetMidi.MusicTheory.IntervalParser : object {
    
private static string HalfStepsGroupName;
    
private static string IntervalQualityGroupName;
    
private static string IntervalNumberGroupName;
    
private static string HalfStepsGroup;
    
private static string IntervalGroup;
    
private static String[] Patterns;
    
private static Dictionary`2<string, IntervalQuality> IntervalQualitiesByLetters;
    
private static string HalfStepsNumberIsOutOfRange;
    
private static string IntervalNumberIsOutOfRange;
    private static IntervalParser();
    internal static IEnumerable`1<string> GetPatterns();
    internal static ParsingResult TryParse(string input, Interval& interval);
}
public enum Melanchall.DryWetMidi.MusicTheory.IntervalQuality : Enum {
    
public int value__;
    
public static IntervalQuality Perfect;
    
public static IntervalQuality Major;
    
public static IntervalQuality Minor;
    
public static IntervalQuality Augmented;
    
public static IntervalQuality Diminished;
}
internal static class Melanchall.DryWetMidi.MusicTheory.IntervalUtilities : object {
    internal static bool IsIntervalValid(int halfSteps);
}
public class Melanchall.DryWetMidi.MusicTheory.Note : object {
    
internal static string SharpLongString;
    
internal static string SharpShortString;
    
internal static string FlatLongString;
    
internal static string FlatShortString;
    
private static ConcurrentDictionary`2<SevenBitNumber, Note> Cache;
    [CompilerGeneratedAttribute]

private SevenBitNumber <NoteNumber>k__BackingField;
    
public SevenBitNumber NoteNumber { get; }
    
public NoteName NoteName { get; }
    
public int Octave { get; }
    private Note(SevenBitNumber noteNumber);
    private static Note();
    [CompilerGeneratedAttribute]
public SevenBitNumber get_NoteNumber();
    public NoteName get_NoteName();
    public int get_Octave();
    public Note Transpose(Interval interval);
    public static Note Get(SevenBitNumber noteNumber);
    public static Note Get(NoteName noteName, int octave);
    public static bool TryParse(string input, Note& note);
    public static Note Parse(string input);
    public static bool op_Equality(Note note1, Note note2);
    public static bool op_Inequality(Note note1, Note note2);
    public static Note op_Addition(Note note, int halfSteps);
    public static Note op_Subtraction(Note note, int halfSteps);
    public sealed virtual int CompareTo(Note other);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Melanchall.DryWetMidi.MusicTheory.NoteName : Enum {
    
public int value__;
    
public static NoteName C;
    
public static NoteName CSharp;
    
public static NoteName D;
    
public static NoteName DSharp;
    
public static NoteName E;
    
public static NoteName F;
    
public static NoteName FSharp;
    
public static NoteName G;
    
public static NoteName GSharp;
    
public static NoteName A;
    
public static NoteName ASharp;
    
public static NoteName B;
}
internal static class Melanchall.DryWetMidi.MusicTheory.NoteNameParser : object {
    
private static string NoteLetterGroupName;
    
private static string AccidentalGroupName;
    
private static string NoteNameGroup;
    
private static string AccidentalGroup;
    
private static String[] Patterns;
    private static NoteNameParser();
    internal static IEnumerable`1<string> GetPatterns();
    internal static ParsingResult TryParse(string input, NoteName& noteName);
}
internal static class Melanchall.DryWetMidi.MusicTheory.NoteParser : object {
    
private static string NoteNameGroupName;
    
private static string OctaveGroupName;
    
private static string OctaveGroup;
    
private static String[] Patterns;
    
private static string OctaveIsOutOfRange;
    
private static string NoteIsOutOfRange;
    private static NoteParser();
    internal static ParsingResult TryParse(string input, Note& note);
}
public static class Melanchall.DryWetMidi.MusicTheory.Notes : object {
    
public static Note CMinus1;
    
public static Note CSharpMinus1;
    
public static Note DMinus1;
    
public static Note DSharpMinus1;
    
public static Note EMinus1;
    
public static Note FMinus1;
    
public static Note FSharpMinus1;
    
public static Note GMinus1;
    
public static Note GSharpMinus1;
    
public static Note AMinus1;
    
public static Note ASharpMinus1;
    
public static Note BMinus1;
    
public static Note C0;
    
public static Note CSharp0;
    
public static Note D0;
    
public static Note DSharp0;
    
public static Note E0;
    
public static Note F0;
    
public static Note FSharp0;
    
public static Note G0;
    
public static Note GSharp0;
    
public static Note A0;
    
public static Note ASharp0;
    
public static Note B0;
    
public static Note C1;
    
public static Note CSharp1;
    
public static Note D1;
    
public static Note DSharp1;
    
public static Note E1;
    
public static Note F1;
    
public static Note FSharp1;
    
public static Note G1;
    
public static Note GSharp1;
    
public static Note A1;
    
public static Note ASharp1;
    
public static Note B1;
    
public static Note C2;
    
public static Note CSharp2;
    
public static Note D2;
    
public static Note DSharp2;
    
public static Note E2;
    
public static Note F2;
    
public static Note FSharp2;
    
public static Note G2;
    
public static Note GSharp2;
    
public static Note A2;
    
public static Note ASharp2;
    
public static Note B2;
    
public static Note C3;
    
public static Note CSharp3;
    
public static Note D3;
    
public static Note DSharp3;
    
public static Note E3;
    
public static Note F3;
    
public static Note FSharp3;
    
public static Note G3;
    
public static Note GSharp3;
    
public static Note A3;
    
public static Note ASharp3;
    
public static Note B3;
    
public static Note C4;
    
public static Note CSharp4;
    
public static Note D4;
    
public static Note DSharp4;
    
public static Note E4;
    
public static Note F4;
    
public static Note FSharp4;
    
public static Note G4;
    
public static Note GSharp4;
    
public static Note A4;
    
public static Note ASharp4;
    
public static Note B4;
    
public static Note C5;
    
public static Note CSharp5;
    
public static Note D5;
    
public static Note DSharp5;
    
public static Note E5;
    
public static Note F5;
    
public static Note FSharp5;
    
public static Note G5;
    
public static Note GSharp5;
    
public static Note A5;
    
public static Note ASharp5;
    
public static Note B5;
    
public static Note C6;
    
public static Note CSharp6;
    
public static Note D6;
    
public static Note DSharp6;
    
public static Note E6;
    
public static Note F6;
    
public static Note FSharp6;
    
public static Note G6;
    
public static Note GSharp6;
    
public static Note A6;
    
public static Note ASharp6;
    
public static Note B6;
    
public static Note C7;
    
public static Note CSharp7;
    
public static Note D7;
    
public static Note DSharp7;
    
public static Note E7;
    
public static Note F7;
    
public static Note FSharp7;
    
public static Note G7;
    
public static Note GSharp7;
    
public static Note A7;
    
public static Note ASharp7;
    
public static Note B7;
    
public static Note C8;
    
public static Note CSharp8;
    
public static Note D8;
    
public static Note DSharp8;
    
public static Note E8;
    
public static Note F8;
    
public static Note FSharp8;
    
public static Note G8;
    
public static Note GSharp8;
    
public static Note A8;
    
public static Note ASharp8;
    
public static Note B8;
    
public static Note C9;
    
public static Note CSharp9;
    
public static Note D9;
    
public static Note DSharp9;
    
public static Note E9;
    
public static Note F9;
    
public static Note FSharp9;
    
public static Note G9;
    private static Notes();
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.MusicTheory.NoteUtilities : object {
    
private static int OctaveOffset;
    [ExtensionAttribute]
public static NoteName Transpose(NoteName noteName, Interval interval);
    public static NoteName GetNoteName(SevenBitNumber noteNumber);
    public static int GetNoteOctave(SevenBitNumber noteNumber);
    public static SevenBitNumber GetNoteNumber(NoteName noteName, int octave);
    internal static bool IsNoteValid(NoteName noteName, int octave);
    internal static bool IsNoteNumberValid(int noteNumber);
    private static int CalculateNoteNumber(NoteName noteName, int octave);
}
public class Melanchall.DryWetMidi.MusicTheory.Octave : object {
    
private static ConcurrentDictionary`2<int, Octave> Cache;
    
private Dictionary`2<NoteName, Note> _notes;
    
public static int OctaveSize;
    
public static int MinOctaveNumber;
    
public static int MaxOctaveNumber;
    
public static Octave Middle;
    [CompilerGeneratedAttribute]

private int <Number>k__BackingField;
    
public int Number { get; }
    
public Note C { get; }
    
public Note CSharp { get; }
    
public Note D { get; }
    
public Note DSharp { get; }
    
public Note E { get; }
    
public Note F { get; }
    
public Note FSharp { get; }
    
public Note G { get; }
    
public Note GSharp { get; }
    
public Note A { get; }
    
public Note ASharp { get; }
    
public Note B { get; }
    private Octave(int octave);
    private static Octave();
    [CompilerGeneratedAttribute]
public int get_Number();
    public Note get_C();
    public Note get_CSharp();
    public Note get_D();
    public Note get_DSharp();
    public Note get_E();
    public Note get_F();
    public Note get_FSharp();
    public Note get_G();
    public Note get_GSharp();
    public Note get_A();
    public Note get_ASharp();
    public Note get_B();
    public Note GetNote(NoteName noteName);
    public static Octave Get(int octaveNumber);
    public static bool TryParse(string input, Octave& octave);
    public static Octave Parse(string input);
    public static bool op_Equality(Octave octave1, Octave octave2);
    public static bool op_Inequality(Octave octave1, Octave octave2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Melanchall.DryWetMidi.MusicTheory.OctaveParser : object {
    
private static string OctaveNumberGroupName;
    
private static string OctaveNumberGroup;
    
private static String[] Patterns;
    
private static string OctaveIsOutOfRange;
    private static OctaveParser();
    internal static ParsingResult TryParse(string input, Octave& octave);
}
public class Melanchall.DryWetMidi.MusicTheory.Scale : object {
    [CompilerGeneratedAttribute]

private IEnumerable`1<Interval> <Intervals>k__BackingField;
    [CompilerGeneratedAttribute]

private NoteName <RootNote>k__BackingField;
    
public IEnumerable`1<Interval> Intervals { get; }
    
public NoteName RootNote { get; }
    public Scale(IEnumerable`1<Interval> intervals, NoteName rootNote);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Interval> get_Intervals();
    [CompilerGeneratedAttribute]
public NoteName get_RootNote();
    public static bool TryParse(string input, Scale& scale);
    public static Scale Parse(string input);
    public static bool op_Equality(Scale scale1, Scale scale2);
    public static bool op_Inequality(Scale scale1, Scale scale2);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Melanchall.DryWetMidi.MusicTheory.ScaleDegree : Enum {
    
public int value__;
    
public static ScaleDegree Tonic;
    
public static ScaleDegree Supertonic;
    
public static ScaleDegree Mediant;
    
public static ScaleDegree Subdominant;
    
public static ScaleDegree Dominant;
    
public static ScaleDegree Submediant;
    
public static ScaleDegree LeadingTone;
}
public static class Melanchall.DryWetMidi.MusicTheory.ScaleIntervals : object {
    [DisplayNameAttribute("aeolian")]

public static IEnumerable`1<Interval> Aeolian;
    [DisplayNameAttribute("altered")]

public static IEnumerable`1<Interval> Altered;
    [DisplayNameAttribute("arabian")]

public static IEnumerable`1<Interval> Arabian;
    [DisplayNameAttribute("augmented")]

public static IEnumerable`1<Interval> Augmented;
    [DisplayNameAttribute("augmented heptatonic")]

public static IEnumerable`1<Interval> AugmentedHeptatonic;
    [DisplayNameAttribute("balinese")]

public static IEnumerable`1<Interval> Balinese;
    [DisplayNameAttribute("bebop")]

public static IEnumerable`1<Interval> Bebop;
    [DisplayNameAttribute("bebop dominant")]

public static IEnumerable`1<Interval> BebopDominant;
    [DisplayNameAttribute("bebop locrian")]

public static IEnumerable`1<Interval> BebopLocrian;
    [DisplayNameAttribute("bebop major")]

public static IEnumerable`1<Interval> BebopMajor;
    [DisplayNameAttribute("bebop minor")]

public static IEnumerable`1<Interval> BebopMinor;
    [DisplayNameAttribute("blues")]

public static IEnumerable`1<Interval> Blues;
    [DisplayNameAttribute("chinese")]

public static IEnumerable`1<Interval> Chinese;
    [DisplayNameAttribute("chromatic")]

public static IEnumerable`1<Interval> Chromatic;
    [DisplayNameAttribute("composite blues")]

public static IEnumerable`1<Interval> CompositeBlues;
    [DisplayNameAttribute("diminished")]

public static IEnumerable`1<Interval> Diminished;
    [DisplayNameAttribute("diminished whole tone")]

public static IEnumerable`1<Interval> DiminishedWholeTone;
    [DisplayNameAttribute("dominant")]

public static IEnumerable`1<Interval> Dominant;
    [DisplayNameAttribute("dorian")]

public static IEnumerable`1<Interval> Dorian;
    [DisplayNameAttribute("dorian #4")]

public static IEnumerable`1<Interval> Dorian4;
    [DisplayNameAttribute("dorian b2")]

public static IEnumerable`1<Interval> DorianB2;
    [DisplayNameAttribute("double harmonic lydian")]

public static IEnumerable`1<Interval> DoubleHarmonicLydian;
    [DisplayNameAttribute("double harmonic major")]

public static IEnumerable`1<Interval> DoubleHarmonicMajor;
    [DisplayNameAttribute("egyptian")]

public static IEnumerable`1<Interval> Egyptian;
    [DisplayNameAttribute("enigmatic")]

public static IEnumerable`1<Interval> Enigmatic;
    [DisplayNameAttribute("flamenco")]

public static IEnumerable`1<Interval> Flamenco;
    [DisplayNameAttribute("flat six pentatonic")]

public static IEnumerable`1<Interval> FlatSixPentatonic;
    [DisplayNameAttribute("flat three pentatonic")]

public static IEnumerable`1<Interval> FlatThreePentatonic;
    [DisplayNameAttribute("gypsy")]

public static IEnumerable`1<Interval> Gypsy;
    [DisplayNameAttribute("harmonic major")]

public static IEnumerable`1<Interval> HarmonicMajor;
    [DisplayNameAttribute("harmonic minor")]

public static IEnumerable`1<Interval> HarmonicMinor;
    [DisplayNameAttribute("hindu")]

public static IEnumerable`1<Interval> Hindu;
    [DisplayNameAttribute("hirajoshi")]

public static IEnumerable`1<Interval> Hirajoshi;
    [DisplayNameAttribute("hungarian major")]

public static IEnumerable`1<Interval> HungarianMajor;
    [DisplayNameAttribute("hungarian minor")]

public static IEnumerable`1<Interval> HungarianMinor;
    [DisplayNameAttribute("ichikosucho")]

public static IEnumerable`1<Interval> Ichikosucho;
    [DisplayNameAttribute("in-sen")]

public static IEnumerable`1<Interval> InSen;
    [DisplayNameAttribute("indian")]

public static IEnumerable`1<Interval> Indian;
    [DisplayNameAttribute("ionian")]

public static IEnumerable`1<Interval> Ionian;
    [DisplayNameAttribute("ionian augmented")]

public static IEnumerable`1<Interval> IonianAugmented;
    [DisplayNameAttribute("ionian pentatonic")]

public static IEnumerable`1<Interval> IonianPentatonic;
    [DisplayNameAttribute("iwato")]

public static IEnumerable`1<Interval> Iwato;
    [DisplayNameAttribute("kafi raga")]

public static IEnumerable`1<Interval> KafiRaga;
    [DisplayNameAttribute("kumoi")]

public static IEnumerable`1<Interval> Kumoi;
    [DisplayNameAttribute("kumoijoshi")]

public static IEnumerable`1<Interval> Kumoijoshi;
    [DisplayNameAttribute("leading whole tone")]

public static IEnumerable`1<Interval> LeadingWholeTone;
    [DisplayNameAttribute("locrian")]

public static IEnumerable`1<Interval> Locrian;
    [DisplayNameAttribute("locrian #2")]

public static IEnumerable`1<Interval> Locrian2;
    [DisplayNameAttribute("locrian major")]

public static IEnumerable`1<Interval> LocrianMajor;
    [DisplayNameAttribute("locrian pentatonic")]

public static IEnumerable`1<Interval> LocrianPentatonic;
    [DisplayNameAttribute("lydian")]

public static IEnumerable`1<Interval> Lydian;
    [DisplayNameAttribute("lydian #5P pentatonic")]

public static IEnumerable`1<Interval> Lydian5PPentatonic;
    [DisplayNameAttribute("lydian #9")]

public static IEnumerable`1<Interval> Lydian9;
    [DisplayNameAttribute("lydian augmented")]

public static IEnumerable`1<Interval> LydianAugmented;
    [DisplayNameAttribute("lydian b7")]

public static IEnumerable`1<Interval> LydianB7;
    [DisplayNameAttribute("lydian diminished")]

public static IEnumerable`1<Interval> LydianDiminished;
    [DisplayNameAttribute("lydian dominant")]

public static IEnumerable`1<Interval> LydianDominant;
    [DisplayNameAttribute("lydian dominant pentatonic")]

public static IEnumerable`1<Interval> LydianDominantPentatonic;
    [DisplayNameAttribute("lydian minor")]

public static IEnumerable`1<Interval> LydianMinor;
    [DisplayNameAttribute("lydian pentatonic")]

public static IEnumerable`1<Interval> LydianPentatonic;
    [DisplayNameAttribute("major")]

public static IEnumerable`1<Interval> Major;
    [DisplayNameAttribute("major blues")]

public static IEnumerable`1<Interval> MajorBlues;
    [DisplayNameAttribute("major flat two pentatonic")]

public static IEnumerable`1<Interval> MajorFlatTwoPentatonic;
    [DisplayNameAttribute("major pentatonic")]

public static IEnumerable`1<Interval> MajorPentatonic;
    [DisplayNameAttribute("malkos raga")]

public static IEnumerable`1<Interval> MalkosRaga;
    [DisplayNameAttribute("melodic minor")]

public static IEnumerable`1<Interval> MelodicMinor;
    [DisplayNameAttribute("melodic minor fifth mode")]

public static IEnumerable`1<Interval> MelodicMinorFifthMode;
    [DisplayNameAttribute("melodic minor second mode")]

public static IEnumerable`1<Interval> MelodicMinorSecondMode;
    [DisplayNameAttribute("minor")]

public static IEnumerable`1<Interval> Minor;
    [DisplayNameAttribute("minor #7M pentatonic")]

public static IEnumerable`1<Interval> Minor7MPentatonic;
    [DisplayNameAttribute("minor bebop")]

public static IEnumerable`1<Interval> MinorBebop;
    [DisplayNameAttribute("minor blues")]

public static IEnumerable`1<Interval> MinorBlues;
    [DisplayNameAttribute("minor hexatonic")]

public static IEnumerable`1<Interval> MinorHexatonic;
    [DisplayNameAttribute("minor pentatonic")]

public static IEnumerable`1<Interval> MinorPentatonic;
    [DisplayNameAttribute("minor seven flat five pentatonic")]

public static IEnumerable`1<Interval> MinorSevenFlatFivePentatonic;
    [DisplayNameAttribute("minor six diminished")]

public static IEnumerable`1<Interval> MinorSixDiminished;
    [DisplayNameAttribute("minor six pentatonic")]

public static IEnumerable`1<Interval> MinorSixPentatonic;
    [DisplayNameAttribute("mixolydian")]

public static IEnumerable`1<Interval> Mixolydian;
    [DisplayNameAttribute("mixolydian b6M")]

public static IEnumerable`1<Interval> MixolydianB6M;
    [DisplayNameAttribute("mixolydian pentatonic")]

public static IEnumerable`1<Interval> MixolydianPentatonic;
    [DisplayNameAttribute("mystery #1")]

public static IEnumerable`1<Interval> Mystery1;
    [DisplayNameAttribute("neopolitan")]

public static IEnumerable`1<Interval> Neopolitan;
    [DisplayNameAttribute("neopolitan major")]

public static IEnumerable`1<Interval> NeopolitanMajor;
    [DisplayNameAttribute("neopolitan major pentatonic")]

public static IEnumerable`1<Interval> NeopolitanMajorPentatonic;
    [DisplayNameAttribute("neopolitan minor")]

public static IEnumerable`1<Interval> NeopolitanMinor;
    [DisplayNameAttribute("oriental")]

public static IEnumerable`1<Interval> Oriental;
    [DisplayNameAttribute("pelog")]

public static IEnumerable`1<Interval> Pelog;
    [DisplayNameAttribute("pentatonic")]

public static IEnumerable`1<Interval> Pentatonic;
    [DisplayNameAttribute("persian")]

public static IEnumerable`1<Interval> Persian;
    [DisplayNameAttribute("phrygian")]

public static IEnumerable`1<Interval> Phrygian;
    [DisplayNameAttribute("phrygian major")]

public static IEnumerable`1<Interval> PhrygianMajor;
    [DisplayNameAttribute("piongio")]

public static IEnumerable`1<Interval> Piongio;
    [DisplayNameAttribute("pomeroy")]

public static IEnumerable`1<Interval> Pomeroy;
    [DisplayNameAttribute("prometheus")]

public static IEnumerable`1<Interval> Prometheus;
    [DisplayNameAttribute("prometheus neopolitan")]

public static IEnumerable`1<Interval> PrometheusNeopolitan;
    [DisplayNameAttribute("purvi raga")]

public static IEnumerable`1<Interval> PurviRaga;
    [DisplayNameAttribute("ritusen")]

public static IEnumerable`1<Interval> Ritusen;
    [DisplayNameAttribute("romanian minor")]

public static IEnumerable`1<Interval> RomanianMinor;
    [DisplayNameAttribute("scriabin")]

public static IEnumerable`1<Interval> Scriabin;
    [DisplayNameAttribute("six tone symmetric")]

public static IEnumerable`1<Interval> SixToneSymmetric;
    [DisplayNameAttribute("spanish")]

public static IEnumerable`1<Interval> Spanish;
    [DisplayNameAttribute("spanish heptatonic")]

public static IEnumerable`1<Interval> SpanishHeptatonic;
    [DisplayNameAttribute("super locrian")]

public static IEnumerable`1<Interval> SuperLocrian;
    [DisplayNameAttribute("super locrian pentatonic")]

public static IEnumerable`1<Interval> SuperLocrianPentatonic;
    [DisplayNameAttribute("todi raga")]

public static IEnumerable`1<Interval> TodiRaga;
    [DisplayNameAttribute("vietnamese 1")]

public static IEnumerable`1<Interval> Vietnamese1;
    [DisplayNameAttribute("vietnamese 2")]

public static IEnumerable`1<Interval> Vietnamese2;
    [DisplayNameAttribute("whole tone")]

public static IEnumerable`1<Interval> WholeTone;
    [DisplayNameAttribute("whole tone pentatonic")]

public static IEnumerable`1<Interval> WholeTonePentatonic;
    private static ScaleIntervals();
    public static IEnumerable`1<Interval> GetByName(string name);
    private static IEnumerable`1<Interval> GetIntervals(Int32[] intervalsInHalfSteps);
}
internal static class Melanchall.DryWetMidi.MusicTheory.ScaleParser : object {
    
private static string RootNoteNameGroupName;
    
private static string IntervalsMnemonicGroupName;
    
private static string IntervalGroupName;
    
private static string IntervalGroup;
    
private static string IntervalsMnemonicGroup;
    
private static String[] Patterns;
    
private static string ScaleIsUnknown;
    private static ScaleParser();
    internal static ParsingResult TryParse(string input, Scale& scale);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.MusicTheory.ScaleUtilities : object {
    [ExtensionAttribute]
public static NoteName GetDegree(Scale scale, ScaleDegree degree);
    [ExtensionAttribute]
public static NoteName GetStep(Scale scale, int step);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.MusicTheory.ScaleUtilities/<GetNotes>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<Note> GetNotes(Scale scale);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.MusicTheory.ScaleUtilities/<GetNotesNames>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<NoteName> GetNotesNames(Scale scale);
    [ExtensionAttribute]
public static IEnumerable`1<Note> GetAscendingNotes(Scale scale, Note rootNote);
    [ExtensionAttribute]
public static IEnumerable`1<Note> GetDescendingNotes(Scale scale, Note rootNote);
    [ExtensionAttribute]
public static bool IsNoteInScale(Scale scale, Note note);
    [ExtensionAttribute]
public static Note GetNextNote(Scale scale, Note note);
    [ExtensionAttribute]
public static Note GetPreviousNote(Scale scale, Note note);
    private static void ThrowIfDegreeIsOutOfRange(Scale scale, ScaleDegree degree);
}
public static class Melanchall.DryWetMidi.Standards.GeneralMidi : object {
    
public static FourBitNumber PercussionChannel;
    private static GeneralMidi();
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2AnalogPercussion : Enum {
    
public byte value__;
    
public static GeneralMidi2AnalogPercussion HighQ;
    
public static GeneralMidi2AnalogPercussion Slap;
    
public static GeneralMidi2AnalogPercussion ScratchPush;
    
public static GeneralMidi2AnalogPercussion ScratchPull;
    
public static GeneralMidi2AnalogPercussion Sticks;
    
public static GeneralMidi2AnalogPercussion SquareClick;
    
public static GeneralMidi2AnalogPercussion MetronomeClick;
    
public static GeneralMidi2AnalogPercussion MetronomeBell;
    
public static GeneralMidi2AnalogPercussion AcousticBassDrum;
    
public static GeneralMidi2AnalogPercussion AnalogBassDrum;
    
public static GeneralMidi2AnalogPercussion AnalogRimShot;
    
public static GeneralMidi2AnalogPercussion AnalogSnare1;
    
public static GeneralMidi2AnalogPercussion HandClap;
    
public static GeneralMidi2AnalogPercussion ElectricSnare;
    
public static GeneralMidi2AnalogPercussion AnalogLowTom2;
    
public static GeneralMidi2AnalogPercussion AnalogClosedHiHat1;
    
public static GeneralMidi2AnalogPercussion AnalogLowTom1;
    
public static GeneralMidi2AnalogPercussion AnalogClosedHiHat2;
    
public static GeneralMidi2AnalogPercussion AnalogMidTom2;
    
public static GeneralMidi2AnalogPercussion AnalogOpenHiHat;
    
public static GeneralMidi2AnalogPercussion AnalogMidTom1;
    
public static GeneralMidi2AnalogPercussion AnalogHiTom2;
    
public static GeneralMidi2AnalogPercussion AnalogCymbal;
    
public static GeneralMidi2AnalogPercussion AnalogHiTom1;
    
public static GeneralMidi2AnalogPercussion RideCymbal1;
    
public static GeneralMidi2AnalogPercussion ChineseCymbal;
    
public static GeneralMidi2AnalogPercussion RideBell;
    
public static GeneralMidi2AnalogPercussion Tambourine;
    
public static GeneralMidi2AnalogPercussion SplashCymbal;
    
public static GeneralMidi2AnalogPercussion AnalogCowbell;
    
public static GeneralMidi2AnalogPercussion CrashCymbal2;
    
public static GeneralMidi2AnalogPercussion Vibraslap;
    
public static GeneralMidi2AnalogPercussion RideCymbal2;
    
public static GeneralMidi2AnalogPercussion HiBongo;
    
public static GeneralMidi2AnalogPercussion LowBongo;
    
public static GeneralMidi2AnalogPercussion AnalogHighConga;
    
public static GeneralMidi2AnalogPercussion AnalogMidConga;
    
public static GeneralMidi2AnalogPercussion AnalogLowConga;
    
public static GeneralMidi2AnalogPercussion HighTimbale;
    
public static GeneralMidi2AnalogPercussion LowTimbale;
    
public static GeneralMidi2AnalogPercussion HighAgogo;
    
public static GeneralMidi2AnalogPercussion LowAgogo;
    
public static GeneralMidi2AnalogPercussion Cabasa;
    
public static GeneralMidi2AnalogPercussion AnalogMaracas;
    
public static GeneralMidi2AnalogPercussion ShortWhistle;
    
public static GeneralMidi2AnalogPercussion LongWhistle;
    
public static GeneralMidi2AnalogPercussion ShortGuiro;
    
public static GeneralMidi2AnalogPercussion LongGuiro;
    
public static GeneralMidi2AnalogPercussion AnalogClaves;
    
public static GeneralMidi2AnalogPercussion HiWoodBlock;
    
public static GeneralMidi2AnalogPercussion LowWoodBlock;
    
public static GeneralMidi2AnalogPercussion MuteCuica;
    
public static GeneralMidi2AnalogPercussion OpenCuica;
    
public static GeneralMidi2AnalogPercussion MuteTriangle;
    
public static GeneralMidi2AnalogPercussion OpenTriangle;
    
public static GeneralMidi2AnalogPercussion Shaker;
    
public static GeneralMidi2AnalogPercussion JingleBell;
    
public static GeneralMidi2AnalogPercussion Belltree;
    
public static GeneralMidi2AnalogPercussion Castanets;
    
public static GeneralMidi2AnalogPercussion MuteSurdo;
    
public static GeneralMidi2AnalogPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2BrushPercussion : Enum {
    
public byte value__;
    
public static GeneralMidi2BrushPercussion HighQ;
    
public static GeneralMidi2BrushPercussion Slap;
    
public static GeneralMidi2BrushPercussion ScratchPush;
    
public static GeneralMidi2BrushPercussion ScratchPull;
    
public static GeneralMidi2BrushPercussion Sticks;
    
public static GeneralMidi2BrushPercussion SquareClick;
    
public static GeneralMidi2BrushPercussion MetronomeClick;
    
public static GeneralMidi2BrushPercussion MetronomeBell;
    
public static GeneralMidi2BrushPercussion JazzKick2;
    
public static GeneralMidi2BrushPercussion JazzKick1;
    
public static GeneralMidi2BrushPercussion SideStick;
    
public static GeneralMidi2BrushPercussion BrushTap;
    
public static GeneralMidi2BrushPercussion BrushSlap;
    
public static GeneralMidi2BrushPercussion BrushSwirl;
    
public static GeneralMidi2BrushPercussion LowFloorTom;
    
public static GeneralMidi2BrushPercussion ClosedHiHat;
    
public static GeneralMidi2BrushPercussion HighFloorTom;
    
public static GeneralMidi2BrushPercussion PedalHiHat;
    
public static GeneralMidi2BrushPercussion LowTom;
    
public static GeneralMidi2BrushPercussion OpenHiHat;
    
public static GeneralMidi2BrushPercussion LowMidTom;
    
public static GeneralMidi2BrushPercussion HiMidTom;
    
public static GeneralMidi2BrushPercussion CrashCymbal1;
    
public static GeneralMidi2BrushPercussion HighTom;
    
public static GeneralMidi2BrushPercussion RideCymbal1;
    
public static GeneralMidi2BrushPercussion ChineseCymbal;
    
public static GeneralMidi2BrushPercussion RideBell;
    
public static GeneralMidi2BrushPercussion Tambourine;
    
public static GeneralMidi2BrushPercussion SplashCymbal;
    
public static GeneralMidi2BrushPercussion Cowbell;
    
public static GeneralMidi2BrushPercussion CrashCymbal2;
    
public static GeneralMidi2BrushPercussion Vibraslap;
    
public static GeneralMidi2BrushPercussion RideCymbal2;
    
public static GeneralMidi2BrushPercussion HiBongo;
    
public static GeneralMidi2BrushPercussion LowBongo;
    
public static GeneralMidi2BrushPercussion MuteHiConga;
    
public static GeneralMidi2BrushPercussion OpenHiConga;
    
public static GeneralMidi2BrushPercussion LowConga;
    
public static GeneralMidi2BrushPercussion HighTimbale;
    
public static GeneralMidi2BrushPercussion LowTimbale;
    
public static GeneralMidi2BrushPercussion HighAgogo;
    
public static GeneralMidi2BrushPercussion LowAgogo;
    
public static GeneralMidi2BrushPercussion Cabasa;
    
public static GeneralMidi2BrushPercussion Maracas;
    
public static GeneralMidi2BrushPercussion ShortWhistle;
    
public static GeneralMidi2BrushPercussion LongWhistle;
    
public static GeneralMidi2BrushPercussion ShortGuiro;
    
public static GeneralMidi2BrushPercussion LongGuiro;
    
public static GeneralMidi2BrushPercussion Claves;
    
public static GeneralMidi2BrushPercussion HiWoodBlock;
    
public static GeneralMidi2BrushPercussion LowWoodBlock;
    
public static GeneralMidi2BrushPercussion MuteCuica;
    
public static GeneralMidi2BrushPercussion OpenCuica;
    
public static GeneralMidi2BrushPercussion MuteTriangle;
    
public static GeneralMidi2BrushPercussion OpenTriangle;
    
public static GeneralMidi2BrushPercussion Shaker;
    
public static GeneralMidi2BrushPercussion JingleBell;
    
public static GeneralMidi2BrushPercussion Belltree;
    
public static GeneralMidi2BrushPercussion Castanets;
    
public static GeneralMidi2BrushPercussion MuteSurdo;
    
public static GeneralMidi2BrushPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2ElectronicPercussion : Enum {
    
public byte value__;
    
public static GeneralMidi2ElectronicPercussion HighQ;
    
public static GeneralMidi2ElectronicPercussion Slap;
    
public static GeneralMidi2ElectronicPercussion ScratchPush;
    
public static GeneralMidi2ElectronicPercussion ScratchPull;
    
public static GeneralMidi2ElectronicPercussion Sticks;
    
public static GeneralMidi2ElectronicPercussion SquareClick;
    
public static GeneralMidi2ElectronicPercussion MetronomeClick;
    
public static GeneralMidi2ElectronicPercussion MetronomeBell;
    
public static GeneralMidi2ElectronicPercussion AcousticBassDrum;
    
public static GeneralMidi2ElectronicPercussion ElectricBassDrum;
    
public static GeneralMidi2ElectronicPercussion SideStick;
    
public static GeneralMidi2ElectronicPercussion ElectricSnare1;
    
public static GeneralMidi2ElectronicPercussion HandClap;
    
public static GeneralMidi2ElectronicPercussion ElectricSnare2;
    
public static GeneralMidi2ElectronicPercussion ElectricLowTom2;
    
public static GeneralMidi2ElectronicPercussion ClosedHiHat;
    
public static GeneralMidi2ElectronicPercussion ElectricLowTom1;
    
public static GeneralMidi2ElectronicPercussion PedalHiHat;
    
public static GeneralMidi2ElectronicPercussion ElectricMidTom2;
    
public static GeneralMidi2ElectronicPercussion OpenHiHat;
    
public static GeneralMidi2ElectronicPercussion ElectricMidTom1;
    
public static GeneralMidi2ElectronicPercussion ElectricHiTom2;
    
public static GeneralMidi2ElectronicPercussion CrashCymbal1;
    
public static GeneralMidi2ElectronicPercussion ElectricHiTom1;
    
public static GeneralMidi2ElectronicPercussion RideCymbal1;
    
public static GeneralMidi2ElectronicPercussion ReverseCymbal;
    
public static GeneralMidi2ElectronicPercussion RideBell;
    
public static GeneralMidi2ElectronicPercussion Tambourine;
    
public static GeneralMidi2ElectronicPercussion SplashCymbal;
    
public static GeneralMidi2ElectronicPercussion Cowbell;
    
public static GeneralMidi2ElectronicPercussion CrashCymbal2;
    
public static GeneralMidi2ElectronicPercussion Vibraslap;
    
public static GeneralMidi2ElectronicPercussion RideCymbal2;
    
public static GeneralMidi2ElectronicPercussion HiBongo;
    
public static GeneralMidi2ElectronicPercussion LowBongo;
    
public static GeneralMidi2ElectronicPercussion MuteHiConga;
    
public static GeneralMidi2ElectronicPercussion OpenHiConga;
    
public static GeneralMidi2ElectronicPercussion LowConga;
    
public static GeneralMidi2ElectronicPercussion HighTimbale;
    
public static GeneralMidi2ElectronicPercussion LowTimbale;
    
public static GeneralMidi2ElectronicPercussion HighAgogo;
    
public static GeneralMidi2ElectronicPercussion LowAgogo;
    
public static GeneralMidi2ElectronicPercussion Cabasa;
    
public static GeneralMidi2ElectronicPercussion Maracas;
    
public static GeneralMidi2ElectronicPercussion ShortWhistle;
    
public static GeneralMidi2ElectronicPercussion LongWhistle;
    
public static GeneralMidi2ElectronicPercussion ShortGuiro;
    
public static GeneralMidi2ElectronicPercussion LongGuiro;
    
public static GeneralMidi2ElectronicPercussion Claves;
    
public static GeneralMidi2ElectronicPercussion HiWoodBlock;
    
public static GeneralMidi2ElectronicPercussion LowWoodBlock;
    
public static GeneralMidi2ElectronicPercussion MuteCuica;
    
public static GeneralMidi2ElectronicPercussion OpenCuica;
    
public static GeneralMidi2ElectronicPercussion MuteTriangle;
    
public static GeneralMidi2ElectronicPercussion OpenTriangle;
    
public static GeneralMidi2ElectronicPercussion Shaker;
    
public static GeneralMidi2ElectronicPercussion JingleBell;
    
public static GeneralMidi2ElectronicPercussion Belltree;
    
public static GeneralMidi2ElectronicPercussion Castanets;
    
public static GeneralMidi2ElectronicPercussion MuteSurdo;
    
public static GeneralMidi2ElectronicPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2JazzPercussion : Enum {
    
public byte value__;
    
public static GeneralMidi2JazzPercussion HighQ;
    
public static GeneralMidi2JazzPercussion Slap;
    
public static GeneralMidi2JazzPercussion ScratchPush;
    
public static GeneralMidi2JazzPercussion ScratchPull;
    
public static GeneralMidi2JazzPercussion Sticks;
    
public static GeneralMidi2JazzPercussion SquareClick;
    
public static GeneralMidi2JazzPercussion MetronomeClick;
    
public static GeneralMidi2JazzPercussion MetronomeBell;
    
public static GeneralMidi2JazzPercussion JazzKick2;
    
public static GeneralMidi2JazzPercussion JazzKick1;
    
public static GeneralMidi2JazzPercussion SideStick;
    
public static GeneralMidi2JazzPercussion AcousticSnare;
    
public static GeneralMidi2JazzPercussion HandClap;
    
public static GeneralMidi2JazzPercussion ElectricSnare;
    
public static GeneralMidi2JazzPercussion LowFloorTom;
    
public static GeneralMidi2JazzPercussion ClosedHiHat;
    
public static GeneralMidi2JazzPercussion HighFloorTom;
    
public static GeneralMidi2JazzPercussion PedalHiHat;
    
public static GeneralMidi2JazzPercussion LowTom;
    
public static GeneralMidi2JazzPercussion OpenHiHat;
    
public static GeneralMidi2JazzPercussion LowMidTom;
    
public static GeneralMidi2JazzPercussion HiMidTom;
    
public static GeneralMidi2JazzPercussion CrashCymbal1;
    
public static GeneralMidi2JazzPercussion HighTom;
    
public static GeneralMidi2JazzPercussion RideCymbal1;
    
public static GeneralMidi2JazzPercussion ChineseCymbal;
    
public static GeneralMidi2JazzPercussion RideBell;
    
public static GeneralMidi2JazzPercussion Tambourine;
    
public static GeneralMidi2JazzPercussion SplashCymbal;
    
public static GeneralMidi2JazzPercussion Cowbell;
    
public static GeneralMidi2JazzPercussion CrashCymbal2;
    
public static GeneralMidi2JazzPercussion Vibraslap;
    
public static GeneralMidi2JazzPercussion RideCymbal2;
    
public static GeneralMidi2JazzPercussion HiBongo;
    
public static GeneralMidi2JazzPercussion LowBongo;
    
public static GeneralMidi2JazzPercussion MuteHiConga;
    
public static GeneralMidi2JazzPercussion OpenHiConga;
    
public static GeneralMidi2JazzPercussion LowConga;
    
public static GeneralMidi2JazzPercussion HighTimbale;
    
public static GeneralMidi2JazzPercussion LowTimbale;
    
public static GeneralMidi2JazzPercussion HighAgogo;
    
public static GeneralMidi2JazzPercussion LowAgogo;
    
public static GeneralMidi2JazzPercussion Cabasa;
    
public static GeneralMidi2JazzPercussion Maracas;
    
public static GeneralMidi2JazzPercussion ShortWhistle;
    
public static GeneralMidi2JazzPercussion LongWhistle;
    
public static GeneralMidi2JazzPercussion ShortGuiro;
    
public static GeneralMidi2JazzPercussion LongGuiro;
    
public static GeneralMidi2JazzPercussion Claves;
    
public static GeneralMidi2JazzPercussion HiWoodBlock;
    
public static GeneralMidi2JazzPercussion LowWoodBlock;
    
public static GeneralMidi2JazzPercussion MuteCuica;
    
public static GeneralMidi2JazzPercussion OpenCuica;
    
public static GeneralMidi2JazzPercussion MuteTriangle;
    
public static GeneralMidi2JazzPercussion OpenTriangle;
    
public static GeneralMidi2JazzPercussion Shaker;
    
public static GeneralMidi2JazzPercussion JingleBell;
    
public static GeneralMidi2JazzPercussion Belltree;
    
public static GeneralMidi2JazzPercussion Castanets;
    
public static GeneralMidi2JazzPercussion MuteSurdo;
    
public static GeneralMidi2JazzPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2OrchestraPercussion : Enum {
    
public byte value__;
    
public static GeneralMidi2OrchestraPercussion ClosedHiHat2;
    
public static GeneralMidi2OrchestraPercussion PedalHiHat;
    
public static GeneralMidi2OrchestraPercussion OpenHiHat2;
    
public static GeneralMidi2OrchestraPercussion RideCymbal1;
    
public static GeneralMidi2OrchestraPercussion Sticks;
    
public static GeneralMidi2OrchestraPercussion SquareClick;
    
public static GeneralMidi2OrchestraPercussion MetronomeClick;
    
public static GeneralMidi2OrchestraPercussion MetronomeBell;
    
public static GeneralMidi2OrchestraPercussion ConcertBassDrum2;
    
public static GeneralMidi2OrchestraPercussion ConcertBassDrum1;
    
public static GeneralMidi2OrchestraPercussion SideStick;
    
public static GeneralMidi2OrchestraPercussion ConcertSnareDrum;
    
public static GeneralMidi2OrchestraPercussion Castanets;
    
public static GeneralMidi2OrchestraPercussion ConcertSnareDrum2;
    
public static GeneralMidi2OrchestraPercussion TimpaniF;
    
public static GeneralMidi2OrchestraPercussion TimpaniFSharp;
    
public static GeneralMidi2OrchestraPercussion TimpaniG;
    
public static GeneralMidi2OrchestraPercussion TimpaniGSharp;
    
public static GeneralMidi2OrchestraPercussion TimpaniA;
    
public static GeneralMidi2OrchestraPercussion TimpaniASharp;
    
public static GeneralMidi2OrchestraPercussion TimpaniB;
    
public static GeneralMidi2OrchestraPercussion TimpaniC;
    
public static GeneralMidi2OrchestraPercussion TimpaniCSharp;
    
public static GeneralMidi2OrchestraPercussion TimpaniD;
    
public static GeneralMidi2OrchestraPercussion TimpaniDSharp;
    
public static GeneralMidi2OrchestraPercussion TimpaniE;
    
public static GeneralMidi2OrchestraPercussion TimpaniF2;
    
public static GeneralMidi2OrchestraPercussion Tambourine;
    
public static GeneralMidi2OrchestraPercussion SplashCymbal;
    
public static GeneralMidi2OrchestraPercussion Cowbell;
    
public static GeneralMidi2OrchestraPercussion ConcertCymbal2;
    
public static GeneralMidi2OrchestraPercussion Vibraslap;
    
public static GeneralMidi2OrchestraPercussion ConcertCymbal1;
    
public static GeneralMidi2OrchestraPercussion HiBongo;
    
public static GeneralMidi2OrchestraPercussion LowBongo;
    
public static GeneralMidi2OrchestraPercussion MuteHiConga;
    
public static GeneralMidi2OrchestraPercussion OpenHiConga;
    
public static GeneralMidi2OrchestraPercussion LowConga;
    
public static GeneralMidi2OrchestraPercussion HighTimbale;
    
public static GeneralMidi2OrchestraPercussion LowTimbale;
    
public static GeneralMidi2OrchestraPercussion HighAgogo;
    
public static GeneralMidi2OrchestraPercussion LowAgogo;
    
public static GeneralMidi2OrchestraPercussion Cabasa;
    
public static GeneralMidi2OrchestraPercussion Maracas;
    
public static GeneralMidi2OrchestraPercussion ShortWhistle;
    
public static GeneralMidi2OrchestraPercussion LongWhistle;
    
public static GeneralMidi2OrchestraPercussion ShortGuiro;
    
public static GeneralMidi2OrchestraPercussion LongGuiro;
    
public static GeneralMidi2OrchestraPercussion Claves;
    
public static GeneralMidi2OrchestraPercussion HiWoodBlock;
    
public static GeneralMidi2OrchestraPercussion LowWoodBlock;
    
public static GeneralMidi2OrchestraPercussion MuteCuica;
    
public static GeneralMidi2OrchestraPercussion OpenCuica;
    
public static GeneralMidi2OrchestraPercussion MuteTriangle;
    
public static GeneralMidi2OrchestraPercussion OpenTriangle;
    
public static GeneralMidi2OrchestraPercussion Shaker;
    
public static GeneralMidi2OrchestraPercussion JingleBell;
    
public static GeneralMidi2OrchestraPercussion Belltree;
    
public static GeneralMidi2OrchestraPercussion Castanets2;
    
public static GeneralMidi2OrchestraPercussion MuteSurdo;
    
public static GeneralMidi2OrchestraPercussion OpenSurdo;
    
public static GeneralMidi2OrchestraPercussion Applause;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2PercussionSet : Enum {
    
public byte value__;
    
public static GeneralMidi2PercussionSet Standard;
    
public static GeneralMidi2PercussionSet Room;
    
public static GeneralMidi2PercussionSet Power;
    
public static GeneralMidi2PercussionSet Electronic;
    
public static GeneralMidi2PercussionSet Analog;
    
public static GeneralMidi2PercussionSet Jazz;
    
public static GeneralMidi2PercussionSet Brush;
    
public static GeneralMidi2PercussionSet Orchestra;
    
public static GeneralMidi2PercussionSet Sfx;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2PowerPercussion : Enum {
    
public byte value__;
    
public static GeneralMidi2PowerPercussion HighQ;
    
public static GeneralMidi2PowerPercussion Slap;
    
public static GeneralMidi2PowerPercussion ScratchPush;
    
public static GeneralMidi2PowerPercussion ScratchPull;
    
public static GeneralMidi2PowerPercussion Sticks;
    
public static GeneralMidi2PowerPercussion SquareClick;
    
public static GeneralMidi2PowerPercussion MetronomeClick;
    
public static GeneralMidi2PowerPercussion MetronomeBell;
    
public static GeneralMidi2PowerPercussion AcousticBassDrum;
    
public static GeneralMidi2PowerPercussion PowerKickDrum;
    
public static GeneralMidi2PowerPercussion SideStick;
    
public static GeneralMidi2PowerPercussion PowerSnareDrum;
    
public static GeneralMidi2PowerPercussion HandClap;
    
public static GeneralMidi2PowerPercussion ElectricSnare;
    
public static GeneralMidi2PowerPercussion PowerLowTom2;
    
public static GeneralMidi2PowerPercussion ClosedHiHat;
    
public static GeneralMidi2PowerPercussion PowerLowTom1;
    
public static GeneralMidi2PowerPercussion PedalHiHat;
    
public static GeneralMidi2PowerPercussion PowerMidTom2;
    
public static GeneralMidi2PowerPercussion OpenHiHat;
    
public static GeneralMidi2PowerPercussion PowerMidTom1;
    
public static GeneralMidi2PowerPercussion PowerHiTom2;
    
public static GeneralMidi2PowerPercussion CrashCymbal1;
    
public static GeneralMidi2PowerPercussion PowerHiTom1;
    
public static GeneralMidi2PowerPercussion RideCymbal1;
    
public static GeneralMidi2PowerPercussion ChineseCymbal;
    
public static GeneralMidi2PowerPercussion RideBell;
    
public static GeneralMidi2PowerPercussion Tambourine;
    
public static GeneralMidi2PowerPercussion SplashCymbal;
    
public static GeneralMidi2PowerPercussion Cowbell;
    
public static GeneralMidi2PowerPercussion CrashCymbal2;
    
public static GeneralMidi2PowerPercussion Vibraslap;
    
public static GeneralMidi2PowerPercussion RideCymbal2;
    
public static GeneralMidi2PowerPercussion HiBongo;
    
public static GeneralMidi2PowerPercussion LowBongo;
    
public static GeneralMidi2PowerPercussion MuteHiConga;
    
public static GeneralMidi2PowerPercussion OpenHiConga;
    
public static GeneralMidi2PowerPercussion LowConga;
    
public static GeneralMidi2PowerPercussion HighTimbale;
    
public static GeneralMidi2PowerPercussion LowTimbale;
    
public static GeneralMidi2PowerPercussion HighAgogo;
    
public static GeneralMidi2PowerPercussion LowAgogo;
    
public static GeneralMidi2PowerPercussion Cabasa;
    
public static GeneralMidi2PowerPercussion Maracas;
    
public static GeneralMidi2PowerPercussion ShortWhistle;
    
public static GeneralMidi2PowerPercussion LongWhistle;
    
public static GeneralMidi2PowerPercussion ShortGuiro;
    
public static GeneralMidi2PowerPercussion LongGuiro;
    
public static GeneralMidi2PowerPercussion Claves;
    
public static GeneralMidi2PowerPercussion HiWoodBlock;
    
public static GeneralMidi2PowerPercussion LowWoodBlock;
    
public static GeneralMidi2PowerPercussion MuteCuica;
    
public static GeneralMidi2PowerPercussion OpenCuica;
    
public static GeneralMidi2PowerPercussion MuteTriangle;
    
public static GeneralMidi2PowerPercussion OpenTriangle;
    
public static GeneralMidi2PowerPercussion Shaker;
    
public static GeneralMidi2PowerPercussion JingleBell;
    
public static GeneralMidi2PowerPercussion Belltree;
    
public static GeneralMidi2PowerPercussion Castanets;
    
public static GeneralMidi2PowerPercussion MuteSurdo;
    
public static GeneralMidi2PowerPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2Program : Enum {
    
public int value__;
    
public static GeneralMidi2Program AcousticGrandPiano;
    
public static GeneralMidi2Program AcousticGrandPianoWide;
    
public static GeneralMidi2Program AcousticGrandPianoDark;
    
public static GeneralMidi2Program BrightAcousticPiano;
    
public static GeneralMidi2Program BrightAcousticPianoWide;
    
public static GeneralMidi2Program ElectricGrandPiano;
    
public static GeneralMidi2Program ElectricGrandPianoWide;
    
public static GeneralMidi2Program HonkyTonkPiano;
    
public static GeneralMidi2Program HonkyTonkPianoWide;
    
public static GeneralMidi2Program ElectricPiano1;
    
public static GeneralMidi2Program DetunedElectricPiano1;
    
public static GeneralMidi2Program ElectricPiano1VelocityMix;
    
public static GeneralMidi2Program SixtiesElectricPiano;
    
public static GeneralMidi2Program ElectricPiano2;
    
public static GeneralMidi2Program DetunedElectricPiano2;
    
public static GeneralMidi2Program ElectricPiano2VelocityMix;
    
public static GeneralMidi2Program EpLegend;
    
public static GeneralMidi2Program EpPhase;
    
public static GeneralMidi2Program Harpsichord;
    
public static GeneralMidi2Program HarpsichordOctaveMix;
    
public static GeneralMidi2Program HarpsichordWide;
    
public static GeneralMidi2Program HarpsichordWithKeyOff;
    
public static GeneralMidi2Program Clavi;
    
public static GeneralMidi2Program PulseClavi;
    
public static GeneralMidi2Program Celesta;
    
public static GeneralMidi2Program Glockenspiel;
    
public static GeneralMidi2Program MusicBox;
    
public static GeneralMidi2Program Vibraphone;
    
public static GeneralMidi2Program VibraphoneWide;
    
public static GeneralMidi2Program Marimba;
    
public static GeneralMidi2Program MarimbaWide;
    
public static GeneralMidi2Program Xylophone;
    
public static GeneralMidi2Program TubularBells;
    
public static GeneralMidi2Program ChurchBell;
    
public static GeneralMidi2Program Carillon;
    
public static GeneralMidi2Program Dulcimer;
    
public static GeneralMidi2Program DrawbarOrgan;
    
public static GeneralMidi2Program DetunedDrawbarOrgan;
    
public static GeneralMidi2Program ItalianSixtiesOrgan;
    
public static GeneralMidi2Program DrawbarOrgan2;
    
public static GeneralMidi2Program PercussiveOrgan;
    
public static GeneralMidi2Program DetunedPercussiveOrgan;
    
public static GeneralMidi2Program PercussiveOrgan2;
    
public static GeneralMidi2Program RockOrgan;
    
public static GeneralMidi2Program ChurchOrgan;
    
public static GeneralMidi2Program ChurchOrganOctaveMix;
    
public static GeneralMidi2Program DetunedChurchOrgan;
    
public static GeneralMidi2Program ReedOrgan;
    
public static GeneralMidi2Program PuffOrgan;
    
public static GeneralMidi2Program Accordion;
    
public static GeneralMidi2Program Accordion2;
    
public static GeneralMidi2Program Harmonica;
    
public static GeneralMidi2Program TangoAccordion;
    
public static GeneralMidi2Program AcousticGuitarNylon;
    
public static GeneralMidi2Program Ukulele;
    
public static GeneralMidi2Program AcousticGuitarNylonKeyOff;
    
public static GeneralMidi2Program AcousticGuitarNylon2;
    
public static GeneralMidi2Program AcousticGuitarSteel;
    
public static GeneralMidi2Program TwelveStringsGuitar;
    
public static GeneralMidi2Program Mandolin;
    
public static GeneralMidi2Program SteelGuitarWithBodySound;
    
public static GeneralMidi2Program ElectricGuitarJazz;
    
public static GeneralMidi2Program ElectricGuitarPedalSteel;
    
public static GeneralMidi2Program ElectricGuitarClean;
    
public static GeneralMidi2Program ElectricGuitarDetunedClean;
    
public static GeneralMidi2Program MidToneGuitar;
    
public static GeneralMidi2Program ElectricGuitarMuted;
    
public static GeneralMidi2Program ElectricGuitarFunkyCutting;
    
public static GeneralMidi2Program ElectricGuitarMutedVeloSw;
    
public static GeneralMidi2Program JazzMan;
    
public static GeneralMidi2Program OverdrivenGuitar;
    
public static GeneralMidi2Program GuitarPinch;
    
public static GeneralMidi2Program DistortionGuitar;
    
public static GeneralMidi2Program DistortionGuitarWithFeedback;
    
public static GeneralMidi2Program DistortedRhythmGuitar;
    
public static GeneralMidi2Program GuitarHarmonics;
    
public static GeneralMidi2Program GuitarFeedback;
    
public static GeneralMidi2Program AcousticBass;
    
public static GeneralMidi2Program ElectricBassFinger;
    
public static GeneralMidi2Program FingerSlapBass;
    
public static GeneralMidi2Program ElectricBassPick;
    
public static GeneralMidi2Program FretlessBass;
    
public static GeneralMidi2Program SlapBass1;
    
public static GeneralMidi2Program SlapBass2;
    
public static GeneralMidi2Program SynthBass1;
    
public static GeneralMidi2Program SynthBassWarm;
    
public static GeneralMidi2Program SynthBass3Resonance;
    
public static GeneralMidi2Program ClaviBass;
    
public static GeneralMidi2Program Hammer;
    
public static GeneralMidi2Program SynthBass2;
    
public static GeneralMidi2Program SynthBass4Attack;
    
public static GeneralMidi2Program SynthBassRubber;
    
public static GeneralMidi2Program AttackPulse;
    
public static GeneralMidi2Program Violin;
    
public static GeneralMidi2Program ViolinSlowAttack;
    
public static GeneralMidi2Program Viola;
    
public static GeneralMidi2Program Cello;
    
public static GeneralMidi2Program Contrabass;
    
public static GeneralMidi2Program TremoloStrings;
    
public static GeneralMidi2Program PizzicatoStrings;
    
public static GeneralMidi2Program OrchestralHarp;
    
public static GeneralMidi2Program YangChin;
    
public static GeneralMidi2Program Timpani;
    
public static GeneralMidi2Program StringEnsembles1;
    
public static GeneralMidi2Program StringsAndBrass;
    
public static GeneralMidi2Program SixtiesStrings;
    
public static GeneralMidi2Program StringEnsembles2;
    
public static GeneralMidi2Program SynthStrings1;
    
public static GeneralMidi2Program SynthStrings3;
    
public static GeneralMidi2Program SynthStrings2;
    
public static GeneralMidi2Program ChoirAahs;
    
public static GeneralMidi2Program ChoirAahs2;
    
public static GeneralMidi2Program VoiceOohs;
    
public static GeneralMidi2Program Humming;
    
public static GeneralMidi2Program SynthVoice;
    
public static GeneralMidi2Program AnalogVoice;
    
public static GeneralMidi2Program OrchestraHit;
    
public static GeneralMidi2Program BassHitPlus;
    
public static GeneralMidi2Program SixthHit;
    
public static GeneralMidi2Program EuroHit;
    
public static GeneralMidi2Program Trumpet;
    
public static GeneralMidi2Program DarkTrumpetSoft;
    
public static GeneralMidi2Program Trombone;
    
public static GeneralMidi2Program Trombone2;
    
public static GeneralMidi2Program BrightTrombone;
    
public static GeneralMidi2Program Tuba;
    
public static GeneralMidi2Program MutedTrumpet;
    
public static GeneralMidi2Program MutedTrumpet2;
    
public static GeneralMidi2Program FrenchHorn;
    
public static GeneralMidi2Program FrenchHorn2Warm;
    
public static GeneralMidi2Program BrassSection;
    
public static GeneralMidi2Program BrassSection2OctaveMix;
    
public static GeneralMidi2Program SynthBrass1;
    
public static GeneralMidi2Program SynthBrass3;
    
public static GeneralMidi2Program AnalogSynthBrass1;
    
public static GeneralMidi2Program JumpBrass;
    
public static GeneralMidi2Program SynthBrass2;
    
public static GeneralMidi2Program SynthBrass4;
    
public static GeneralMidi2Program AnalogSynthBrass2;
    
public static GeneralMidi2Program SopranoSax;
    
public static GeneralMidi2Program AltoSax;
    
public static GeneralMidi2Program TenorSax;
    
public static GeneralMidi2Program BaritoneSax;
    
public static GeneralMidi2Program Oboe;
    
public static GeneralMidi2Program EnglishHorn;
    
public static GeneralMidi2Program Bassoon;
    
public static GeneralMidi2Program Clarinet;
    
public static GeneralMidi2Program Piccolo;
    
public static GeneralMidi2Program Flute;
    
public static GeneralMidi2Program Recorder;
    
public static GeneralMidi2Program PanFlute;
    
public static GeneralMidi2Program BlownBottle;
    
public static GeneralMidi2Program Shakuhachi;
    
public static GeneralMidi2Program Whistle;
    
public static GeneralMidi2Program Ocarina;
    
public static GeneralMidi2Program Lead1Square;
    
public static GeneralMidi2Program Lead1ASquare2;
    
public static GeneralMidi2Program Lead1BSine;
    
public static GeneralMidi2Program Lead2Sawtooth;
    
public static GeneralMidi2Program Lead2ASawtooth2;
    
public static GeneralMidi2Program Lead2BSawPulse;
    
public static GeneralMidi2Program Lead2CDoubleSawtooth;
    
public static GeneralMidi2Program Lead2DSequencedAnalog;
    
public static GeneralMidi2Program Lead3Calliope;
    
public static GeneralMidi2Program Lead4Chiff;
    
public static GeneralMidi2Program Lead5Charang;
    
public static GeneralMidi2Program Lead5AWireLead;
    
public static GeneralMidi2Program Lead6Voice;
    
public static GeneralMidi2Program Lead7Fifths;
    
public static GeneralMidi2Program Lead8BassLead;
    
public static GeneralMidi2Program Lead8ASoftWrl;
    
public static GeneralMidi2Program Pad1NewAge;
    
public static GeneralMidi2Program Pad2Warm;
    
public static GeneralMidi2Program Pad2ASinePad;
    
public static GeneralMidi2Program Pad3Polysynth;
    
public static GeneralMidi2Program Pad4Choir;
    
public static GeneralMidi2Program Pad4AItopia;
    
public static GeneralMidi2Program Pad5Bowed;
    
public static GeneralMidi2Program Pad6Metallic;
    
public static GeneralMidi2Program Pad7Halo;
    
public static GeneralMidi2Program Pad8Sweep;
    
public static GeneralMidi2Program Fx1Rain;
    
public static GeneralMidi2Program Fx2Soundtrack;
    
public static GeneralMidi2Program Fx3Crystal;
    
public static GeneralMidi2Program Fx3ASynthMallet;
    
public static GeneralMidi2Program Fx4Atmosphere;
    
public static GeneralMidi2Program Fx5Brightness;
    
public static GeneralMidi2Program Fx6Goblins;
    
public static GeneralMidi2Program Fx7Echoes;
    
public static GeneralMidi2Program Fx7AEchoBell;
    
public static GeneralMidi2Program Fx7BEchoPan;
    
public static GeneralMidi2Program Fx8SciFi;
    
public static GeneralMidi2Program Sitar;
    
public static GeneralMidi2Program Sitar2Bend;
    
public static GeneralMidi2Program Banjo;
    
public static GeneralMidi2Program Shamisen;
    
public static GeneralMidi2Program Koto;
    
public static GeneralMidi2Program TaishoKoto;
    
public static GeneralMidi2Program Kalimba;
    
public static GeneralMidi2Program BagPipe;
    
public static GeneralMidi2Program Fiddle;
    
public static GeneralMidi2Program Shanai;
    
public static GeneralMidi2Program TinkleBell;
    
public static GeneralMidi2Program Agogo;
    
public static GeneralMidi2Program SteelDrums;
    
public static GeneralMidi2Program Woodblock;
    
public static GeneralMidi2Program Castanets;
    
public static GeneralMidi2Program TaikoDrum;
    
public static GeneralMidi2Program ConcertBassDrum;
    
public static GeneralMidi2Program MelodicTom;
    
public static GeneralMidi2Program MelodicTom2Power;
    
public static GeneralMidi2Program SynthDrum;
    
public static GeneralMidi2Program RhythmBoxTom;
    
public static GeneralMidi2Program ElectricDrum;
    
public static GeneralMidi2Program ReverseCymbal;
    
public static GeneralMidi2Program GuitarFretNoise;
    
public static GeneralMidi2Program GuitarCuttingNoise;
    
public static GeneralMidi2Program AcousticBassStringSlap;
    
public static GeneralMidi2Program BreathNoise;
    
public static GeneralMidi2Program FluteKeyClick;
    
public static GeneralMidi2Program Seashore;
    
public static GeneralMidi2Program Rain;
    
public static GeneralMidi2Program Thunder;
    
public static GeneralMidi2Program Wind;
    
public static GeneralMidi2Program Stream;
    
public static GeneralMidi2Program Bubble;
    
public static GeneralMidi2Program BirdTweet;
    
public static GeneralMidi2Program Dog;
    
public static GeneralMidi2Program HorseGallop;
    
public static GeneralMidi2Program BirdTweet2;
    
public static GeneralMidi2Program TelephoneRing;
    
public static GeneralMidi2Program TelephoneRing2;
    
public static GeneralMidi2Program DoorCreaking;
    
public static GeneralMidi2Program Door;
    
public static GeneralMidi2Program Scratch;
    
public static GeneralMidi2Program WindChime;
    
public static GeneralMidi2Program Helicopter;
    
public static GeneralMidi2Program CarEngine;
    
public static GeneralMidi2Program CarStop;
    
public static GeneralMidi2Program CarPass;
    
public static GeneralMidi2Program CarCrash;
    
public static GeneralMidi2Program Siren;
    
public static GeneralMidi2Program Train;
    
public static GeneralMidi2Program Jetplane;
    
public static GeneralMidi2Program Starship;
    
public static GeneralMidi2Program BurstNoise;
    
public static GeneralMidi2Program Applause;
    
public static GeneralMidi2Program Laughing;
    
public static GeneralMidi2Program Screaming;
    
public static GeneralMidi2Program Punch;
    
public static GeneralMidi2Program HeartBeat;
    
public static GeneralMidi2Program Footsteps;
    
public static GeneralMidi2Program Gunshot;
    
public static GeneralMidi2Program MachineGun;
    
public static GeneralMidi2Program Lasergun;
    
public static GeneralMidi2Program Explosion;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2RoomPercussion : Enum {
    
public byte value__;
    
public static GeneralMidi2RoomPercussion HighQ;
    
public static GeneralMidi2RoomPercussion Slap;
    
public static GeneralMidi2RoomPercussion ScratchPush;
    
public static GeneralMidi2RoomPercussion ScratchPull;
    
public static GeneralMidi2RoomPercussion Sticks;
    
public static GeneralMidi2RoomPercussion SquareClick;
    
public static GeneralMidi2RoomPercussion MetronomeClick;
    
public static GeneralMidi2RoomPercussion MetronomeBell;
    
public static GeneralMidi2RoomPercussion AcousticBassDrum;
    
public static GeneralMidi2RoomPercussion BassDrum1;
    
public static GeneralMidi2RoomPercussion SideStick;
    
public static GeneralMidi2RoomPercussion AcousticSnare;
    
public static GeneralMidi2RoomPercussion HandClap;
    
public static GeneralMidi2RoomPercussion ElectricSnare;
    
public static GeneralMidi2RoomPercussion RoomLowTom2;
    
public static GeneralMidi2RoomPercussion ClosedHiHat;
    
public static GeneralMidi2RoomPercussion RoomLowTom1;
    
public static GeneralMidi2RoomPercussion PedalHiHat;
    
public static GeneralMidi2RoomPercussion RoomMidTom2;
    
public static GeneralMidi2RoomPercussion OpenHiHat;
    
public static GeneralMidi2RoomPercussion RoomMidTom1;
    
public static GeneralMidi2RoomPercussion RoomHiTom2;
    
public static GeneralMidi2RoomPercussion CrashCymbal1;
    
public static GeneralMidi2RoomPercussion RoomHiTom1;
    
public static GeneralMidi2RoomPercussion RideCymbal1;
    
public static GeneralMidi2RoomPercussion ChineseCymbal;
    
public static GeneralMidi2RoomPercussion RideBell;
    
public static GeneralMidi2RoomPercussion Tambourine;
    
public static GeneralMidi2RoomPercussion SplashCymbal;
    
public static GeneralMidi2RoomPercussion Cowbell;
    
public static GeneralMidi2RoomPercussion CrashCymbal2;
    
public static GeneralMidi2RoomPercussion Vibraslap;
    
public static GeneralMidi2RoomPercussion RideCymbal2;
    
public static GeneralMidi2RoomPercussion HiBongo;
    
public static GeneralMidi2RoomPercussion LowBongo;
    
public static GeneralMidi2RoomPercussion MuteHiConga;
    
public static GeneralMidi2RoomPercussion OpenHiConga;
    
public static GeneralMidi2RoomPercussion LowConga;
    
public static GeneralMidi2RoomPercussion HighTimbale;
    
public static GeneralMidi2RoomPercussion LowTimbale;
    
public static GeneralMidi2RoomPercussion HighAgogo;
    
public static GeneralMidi2RoomPercussion LowAgogo;
    
public static GeneralMidi2RoomPercussion Cabasa;
    
public static GeneralMidi2RoomPercussion Maracas;
    
public static GeneralMidi2RoomPercussion ShortWhistle;
    
public static GeneralMidi2RoomPercussion LongWhistle;
    
public static GeneralMidi2RoomPercussion ShortGuiro;
    
public static GeneralMidi2RoomPercussion LongGuiro;
    
public static GeneralMidi2RoomPercussion Claves;
    
public static GeneralMidi2RoomPercussion HiWoodBlock;
    
public static GeneralMidi2RoomPercussion LowWoodBlock;
    
public static GeneralMidi2RoomPercussion MuteCuica;
    
public static GeneralMidi2RoomPercussion OpenCuica;
    
public static GeneralMidi2RoomPercussion MuteTriangle;
    
public static GeneralMidi2RoomPercussion OpenTriangle;
    
public static GeneralMidi2RoomPercussion Shaker;
    
public static GeneralMidi2RoomPercussion JingleBell;
    
public static GeneralMidi2RoomPercussion Belltree;
    
public static GeneralMidi2RoomPercussion Castanets;
    
public static GeneralMidi2RoomPercussion MuteSurdo;
    
public static GeneralMidi2RoomPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2SfxPercussion : Enum {
    
public byte value__;
    
public static GeneralMidi2SfxPercussion HighQ;
    
public static GeneralMidi2SfxPercussion Slap;
    
public static GeneralMidi2SfxPercussion ScratchPush;
    
public static GeneralMidi2SfxPercussion ScratchPull;
    
public static GeneralMidi2SfxPercussion Sticks;
    
public static GeneralMidi2SfxPercussion SquareClick;
    
public static GeneralMidi2SfxPercussion MetronomeClick;
    
public static GeneralMidi2SfxPercussion MetronomeBell;
    
public static GeneralMidi2SfxPercussion GuitarFretNoise;
    
public static GeneralMidi2SfxPercussion GuitarCuttingNoiseUp;
    
public static GeneralMidi2SfxPercussion GuitarCuttingNoiseDown;
    
public static GeneralMidi2SfxPercussion StringSlapOfDoubleBass;
    
public static GeneralMidi2SfxPercussion FlKeyClick;
    
public static GeneralMidi2SfxPercussion Laughing;
    
public static GeneralMidi2SfxPercussion Scream;
    
public static GeneralMidi2SfxPercussion Punch;
    
public static GeneralMidi2SfxPercussion HeartBeat;
    
public static GeneralMidi2SfxPercussion Footsteps1;
    
public static GeneralMidi2SfxPercussion Footsteps2;
    
public static GeneralMidi2SfxPercussion Applause;
    
public static GeneralMidi2SfxPercussion DoorCreaking;
    
public static GeneralMidi2SfxPercussion Door;
    
public static GeneralMidi2SfxPercussion Scratch;
    
public static GeneralMidi2SfxPercussion WindChimes;
    
public static GeneralMidi2SfxPercussion CarEngine;
    
public static GeneralMidi2SfxPercussion CarStop;
    
public static GeneralMidi2SfxPercussion CarPass;
    
public static GeneralMidi2SfxPercussion CarCrash;
    
public static GeneralMidi2SfxPercussion Siren;
    
public static GeneralMidi2SfxPercussion Train;
    
public static GeneralMidi2SfxPercussion Jetplane;
    
public static GeneralMidi2SfxPercussion Helicopter;
    
public static GeneralMidi2SfxPercussion Starship;
    
public static GeneralMidi2SfxPercussion GunShot;
    
public static GeneralMidi2SfxPercussion MachineGun;
    
public static GeneralMidi2SfxPercussion Lasergun;
    
public static GeneralMidi2SfxPercussion Explosion;
    
public static GeneralMidi2SfxPercussion Dog;
    
public static GeneralMidi2SfxPercussion HorseGallop;
    
public static GeneralMidi2SfxPercussion Birds;
    
public static GeneralMidi2SfxPercussion Rain;
    
public static GeneralMidi2SfxPercussion Thunder;
    
public static GeneralMidi2SfxPercussion Wind;
    
public static GeneralMidi2SfxPercussion Seashore;
    
public static GeneralMidi2SfxPercussion Stream;
    
public static GeneralMidi2SfxPercussion Bubble;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidi2StandardPercussion : Enum {
    
public byte value__;
    
public static GeneralMidi2StandardPercussion HighQ;
    
public static GeneralMidi2StandardPercussion Slap;
    
public static GeneralMidi2StandardPercussion ScratchPush;
    
public static GeneralMidi2StandardPercussion ScratchPull;
    
public static GeneralMidi2StandardPercussion Sticks;
    
public static GeneralMidi2StandardPercussion SquareClick;
    
public static GeneralMidi2StandardPercussion MetronomeClick;
    
public static GeneralMidi2StandardPercussion MetronomeBell;
    
public static GeneralMidi2StandardPercussion AcousticBassDrum;
    
public static GeneralMidi2StandardPercussion BassDrum1;
    
public static GeneralMidi2StandardPercussion SideStick;
    
public static GeneralMidi2StandardPercussion AcousticSnare;
    
public static GeneralMidi2StandardPercussion HandClap;
    
public static GeneralMidi2StandardPercussion ElectricSnare;
    
public static GeneralMidi2StandardPercussion LowFloorTom;
    
public static GeneralMidi2StandardPercussion ClosedHiHat;
    
public static GeneralMidi2StandardPercussion HighFloorTom;
    
public static GeneralMidi2StandardPercussion PedalHiHat;
    
public static GeneralMidi2StandardPercussion LowTom;
    
public static GeneralMidi2StandardPercussion OpenHiHat;
    
public static GeneralMidi2StandardPercussion LowMidTom;
    
public static GeneralMidi2StandardPercussion HiMidTom;
    
public static GeneralMidi2StandardPercussion CrashCymbal1;
    
public static GeneralMidi2StandardPercussion HighTom;
    
public static GeneralMidi2StandardPercussion RideCymbal1;
    
public static GeneralMidi2StandardPercussion ChineseCymbal;
    
public static GeneralMidi2StandardPercussion RideBell;
    
public static GeneralMidi2StandardPercussion Tambourine;
    
public static GeneralMidi2StandardPercussion SplashCymbal;
    
public static GeneralMidi2StandardPercussion Cowbell;
    
public static GeneralMidi2StandardPercussion CrashCymbal2;
    
public static GeneralMidi2StandardPercussion Vibraslap;
    
public static GeneralMidi2StandardPercussion RideCymbal2;
    
public static GeneralMidi2StandardPercussion HiBongo;
    
public static GeneralMidi2StandardPercussion LowBongo;
    
public static GeneralMidi2StandardPercussion MuteHiConga;
    
public static GeneralMidi2StandardPercussion OpenHiConga;
    
public static GeneralMidi2StandardPercussion LowConga;
    
public static GeneralMidi2StandardPercussion HighTimbale;
    
public static GeneralMidi2StandardPercussion LowTimbale;
    
public static GeneralMidi2StandardPercussion HighAgogo;
    
public static GeneralMidi2StandardPercussion LowAgogo;
    
public static GeneralMidi2StandardPercussion Cabasa;
    
public static GeneralMidi2StandardPercussion Maracas;
    
public static GeneralMidi2StandardPercussion ShortWhistle;
    
public static GeneralMidi2StandardPercussion LongWhistle;
    
public static GeneralMidi2StandardPercussion ShortGuiro;
    
public static GeneralMidi2StandardPercussion LongGuiro;
    
public static GeneralMidi2StandardPercussion Claves;
    
public static GeneralMidi2StandardPercussion HiWoodBlock;
    
public static GeneralMidi2StandardPercussion LowWoodBlock;
    
public static GeneralMidi2StandardPercussion MuteCuica;
    
public static GeneralMidi2StandardPercussion OpenCuica;
    
public static GeneralMidi2StandardPercussion MuteTriangle;
    
public static GeneralMidi2StandardPercussion OpenTriangle;
    
public static GeneralMidi2StandardPercussion Shaker;
    
public static GeneralMidi2StandardPercussion JingleBell;
    
public static GeneralMidi2StandardPercussion Belltree;
    
public static GeneralMidi2StandardPercussion Castanets;
    
public static GeneralMidi2StandardPercussion MuteSurdo;
    
public static GeneralMidi2StandardPercussion OpenSurdo;
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Standards.GeneralMidi2Utilities : object {
    
private static byte MelodyChannelBankMsb;
    
private static byte RhythmChannelBankMsb;
    
private static Dictionary`2<GeneralMidi2Program, GeneralMidi2ProgramData> ProgramsData;
    private static GeneralMidi2Utilities();
    [ExtensionAttribute]
public static IEnumerable`1<MidiEvent> GetProgramEvents(GeneralMidi2Program program, FourBitNumber channel);
    [ExtensionAttribute]
public static IEnumerable`1<MidiEvent> GetPercussionSetEvents(GeneralMidi2PercussionSet percussionSet, FourBitNumber channel);
    [ExtensionAttribute]
public static MidiEvent GetProgramEvent(GeneralMidi2PercussionSet percussionSet, FourBitNumber channel);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidi2PercussionSet percussionSet);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidi2AnalogPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidi2BrushPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidi2ElectronicPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidi2JazzPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidi2OrchestraPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidi2PowerPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidi2RoomPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidi2SfxPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidi2StandardPercussion percussion);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralMidi2AnalogPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralMidi2BrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralMidi2ElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralMidi2JazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralMidi2OrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralMidi2PowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralMidi2RoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralMidi2SfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralMidi2StandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralMidi2AnalogPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralMidi2BrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralMidi2ElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralMidi2JazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralMidi2OrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralMidi2PowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralMidi2RoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralMidi2SfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralMidi2StandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    private static IEnumerable`1<GeneralMidi2ProgramData> GetProgramsData(GeneralMidiProgram generalMidiProgram, GeneralMidi2Program[] programs);
    private static GeneralMidi2ProgramData GetProgramData(GeneralMidi2Program generalMidi2Program, GeneralMidiProgram generalMidiProgram, byte bankMsb, byte bankLsb);
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidiPercussion : Enum {
    
public byte value__;
    
public static GeneralMidiPercussion AcousticBassDrum;
    
public static GeneralMidiPercussion BassDrum1;
    
public static GeneralMidiPercussion SideStick;
    
public static GeneralMidiPercussion AcousticSnare;
    
public static GeneralMidiPercussion HandClap;
    
public static GeneralMidiPercussion ElectricSnare;
    
public static GeneralMidiPercussion LowFloorTom;
    
public static GeneralMidiPercussion ClosedHiHat;
    
public static GeneralMidiPercussion HighFloorTom;
    
public static GeneralMidiPercussion PedalHiHat;
    
public static GeneralMidiPercussion LowTom;
    
public static GeneralMidiPercussion OpenHiHat;
    
public static GeneralMidiPercussion LowMidTom;
    
public static GeneralMidiPercussion HiMidTom;
    
public static GeneralMidiPercussion CrashCymbal1;
    
public static GeneralMidiPercussion HighTom;
    
public static GeneralMidiPercussion RideCymbal1;
    
public static GeneralMidiPercussion ChineseCymbal;
    
public static GeneralMidiPercussion RideBell;
    
public static GeneralMidiPercussion Tambourine;
    
public static GeneralMidiPercussion SplashCymbal;
    
public static GeneralMidiPercussion Cowbell;
    
public static GeneralMidiPercussion CrashCymbal2;
    
public static GeneralMidiPercussion Vibraslap;
    
public static GeneralMidiPercussion RideCymbal2;
    
public static GeneralMidiPercussion HiBongo;
    
public static GeneralMidiPercussion LowBongo;
    
public static GeneralMidiPercussion MuteHiConga;
    
public static GeneralMidiPercussion OpenHiConga;
    
public static GeneralMidiPercussion LowConga;
    
public static GeneralMidiPercussion HighTimbale;
    
public static GeneralMidiPercussion LowTimbale;
    
public static GeneralMidiPercussion HighAgogo;
    
public static GeneralMidiPercussion LowAgogo;
    
public static GeneralMidiPercussion Cabasa;
    
public static GeneralMidiPercussion Maracas;
    
public static GeneralMidiPercussion ShortWhistle;
    
public static GeneralMidiPercussion LongWhistle;
    
public static GeneralMidiPercussion ShortGuiro;
    
public static GeneralMidiPercussion LongGuiro;
    
public static GeneralMidiPercussion Claves;
    
public static GeneralMidiPercussion HiWoodBlock;
    
public static GeneralMidiPercussion LowWoodBlock;
    
public static GeneralMidiPercussion MuteCuica;
    
public static GeneralMidiPercussion OpenCuica;
    
public static GeneralMidiPercussion MuteTriangle;
    
public static GeneralMidiPercussion OpenTriangle;
}
public enum Melanchall.DryWetMidi.Standards.GeneralMidiProgram : Enum {
    
public byte value__;
    
public static GeneralMidiProgram AcousticGrandPiano;
    
public static GeneralMidiProgram BrightAcousticPiano;
    
public static GeneralMidiProgram ElectricGrandPiano;
    
public static GeneralMidiProgram HonkyTonkPiano;
    
public static GeneralMidiProgram ElectricPiano1;
    
public static GeneralMidiProgram ElectricPiano2;
    
public static GeneralMidiProgram Harpsichord;
    
public static GeneralMidiProgram Clavi;
    
public static GeneralMidiProgram Celesta;
    
public static GeneralMidiProgram Glockenspiel;
    
public static GeneralMidiProgram MusicBox;
    
public static GeneralMidiProgram Vibraphone;
    
public static GeneralMidiProgram Marimba;
    
public static GeneralMidiProgram Xylophone;
    
public static GeneralMidiProgram TubularBells;
    
public static GeneralMidiProgram Dulcimer;
    
public static GeneralMidiProgram DrawbarOrgan;
    
public static GeneralMidiProgram PercussiveOrgan;
    
public static GeneralMidiProgram RockOrgan;
    
public static GeneralMidiProgram ChurchOrgan;
    
public static GeneralMidiProgram ReedOrgan;
    
public static GeneralMidiProgram Accordion;
    
public static GeneralMidiProgram Harmonica;
    
public static GeneralMidiProgram TangoAccordion;
    
public static GeneralMidiProgram AcousticGuitar1;
    
public static GeneralMidiProgram AcousticGuitar2;
    
public static GeneralMidiProgram ElectricGuitar1;
    
public static GeneralMidiProgram ElectricGuitar2;
    
public static GeneralMidiProgram ElectricGuitar3;
    
public static GeneralMidiProgram OverdrivenGuitar;
    
public static GeneralMidiProgram DistortionGuitar;
    
public static GeneralMidiProgram GuitarHarmonics;
    
public static GeneralMidiProgram AcousticBass;
    
public static GeneralMidiProgram ElectricBass1;
    
public static GeneralMidiProgram ElectricBass2;
    
public static GeneralMidiProgram FretlessBass;
    
public static GeneralMidiProgram SlapBass1;
    
public static GeneralMidiProgram SlapBass2;
    
public static GeneralMidiProgram SynthBass1;
    
public static GeneralMidiProgram SynthBass2;
    
public static GeneralMidiProgram Violin;
    
public static GeneralMidiProgram Viola;
    
public static GeneralMidiProgram Cello;
    
public static GeneralMidiProgram Contrabass;
    
public static GeneralMidiProgram TremoloStrings;
    
public static GeneralMidiProgram PizzicatoStrings;
    
public static GeneralMidiProgram OrchestralHarp;
    
public static GeneralMidiProgram Timpani;
    
public static GeneralMidiProgram StringEnsemble1;
    
public static GeneralMidiProgram StringEnsemble2;
    
public static GeneralMidiProgram SynthStrings1;
    
public static GeneralMidiProgram SynthStrings2;
    
public static GeneralMidiProgram ChoirAahs;
    
public static GeneralMidiProgram VoiceOohs;
    
public static GeneralMidiProgram SynthVoice;
    
public static GeneralMidiProgram OrchestraHit;
    
public static GeneralMidiProgram Trumpet;
    
public static GeneralMidiProgram Trombone;
    
public static GeneralMidiProgram Tuba;
    
public static GeneralMidiProgram MutedTrumpet;
    
public static GeneralMidiProgram FrenchHorn;
    
public static GeneralMidiProgram BrassSection;
    
public static GeneralMidiProgram SynthBrass1;
    
public static GeneralMidiProgram SynthBrass2;
    
public static GeneralMidiProgram SopranoSax;
    
public static GeneralMidiProgram AltoSax;
    
public static GeneralMidiProgram TenorSax;
    
public static GeneralMidiProgram BaritoneSax;
    
public static GeneralMidiProgram Oboe;
    
public static GeneralMidiProgram EnglishHorn;
    
public static GeneralMidiProgram Bassoon;
    
public static GeneralMidiProgram Clarinet;
    
public static GeneralMidiProgram Piccolo;
    
public static GeneralMidiProgram Flute;
    
public static GeneralMidiProgram Recorder;
    
public static GeneralMidiProgram PanFlute;
    
public static GeneralMidiProgram BlownBottle;
    
public static GeneralMidiProgram Shakuhachi;
    
public static GeneralMidiProgram Whistle;
    
public static GeneralMidiProgram Ocarina;
    
public static GeneralMidiProgram Lead1;
    
public static GeneralMidiProgram Lead2;
    
public static GeneralMidiProgram Lead3;
    
public static GeneralMidiProgram Lead4;
    
public static GeneralMidiProgram Lead5;
    
public static GeneralMidiProgram Lead6;
    
public static GeneralMidiProgram Lead7;
    
public static GeneralMidiProgram Lead8;
    
public static GeneralMidiProgram Pad1;
    
public static GeneralMidiProgram Pad2;
    
public static GeneralMidiProgram Pad3;
    
public static GeneralMidiProgram Pad4;
    
public static GeneralMidiProgram Pad5;
    
public static GeneralMidiProgram Pad6;
    
public static GeneralMidiProgram Pad7;
    
public static GeneralMidiProgram Pad8;
    
public static GeneralMidiProgram Fx1;
    
public static GeneralMidiProgram Fx2;
    
public static GeneralMidiProgram Fx3;
    
public static GeneralMidiProgram Fx4;
    
public static GeneralMidiProgram Fx5;
    
public static GeneralMidiProgram Fx6;
    
public static GeneralMidiProgram Fx7;
    
public static GeneralMidiProgram Fx8;
    
public static GeneralMidiProgram Sitar;
    
public static GeneralMidiProgram Banjo;
    
public static GeneralMidiProgram Shamisen;
    
public static GeneralMidiProgram Koto;
    
public static GeneralMidiProgram Kalimba;
    
public static GeneralMidiProgram BagPipe;
    
public static GeneralMidiProgram Fiddle;
    
public static GeneralMidiProgram Shanai;
    
public static GeneralMidiProgram TinkleBell;
    
public static GeneralMidiProgram Agogo;
    
public static GeneralMidiProgram SteelDrums;
    
public static GeneralMidiProgram Woodblock;
    
public static GeneralMidiProgram TaikoDrum;
    
public static GeneralMidiProgram MelodicTom;
    
public static GeneralMidiProgram SynthDrum;
    
public static GeneralMidiProgram ReverseCymbal;
    
public static GeneralMidiProgram GuitarFretNoise;
    
public static GeneralMidiProgram BreathNoise;
    
public static GeneralMidiProgram Seashore;
    
public static GeneralMidiProgram BirdTweet;
    
public static GeneralMidiProgram TelephoneRing;
    
public static GeneralMidiProgram Helicopter;
    
public static GeneralMidiProgram Applause;
    
public static GeneralMidiProgram Gunshot;
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Standards.GeneralMidiUtilities : object {
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidiProgram program);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralMidiPercussion percussion);
    [ExtensionAttribute]
public static MidiEvent GetProgramEvent(GeneralMidiProgram program, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralMidiPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralMidiPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundBrushPercussion : Enum {
    
public byte value__;
    
public static GeneralSoundBrushPercussion HighQ;
    
public static GeneralSoundBrushPercussion Slap;
    
public static GeneralSoundBrushPercussion ScratchPush;
    
public static GeneralSoundBrushPercussion ScratchPull;
    
public static GeneralSoundBrushPercussion Sticks;
    
public static GeneralSoundBrushPercussion SquareClick;
    
public static GeneralSoundBrushPercussion MetronomeClick;
    
public static GeneralSoundBrushPercussion MetronomeBell;
    
public static GeneralSoundBrushPercussion JazzKick2;
    
public static GeneralSoundBrushPercussion JazzKick1;
    
public static GeneralSoundBrushPercussion SideStick;
    
public static GeneralSoundBrushPercussion BrushTap;
    
public static GeneralSoundBrushPercussion BrushSlap;
    
public static GeneralSoundBrushPercussion BrushSwirl;
    
public static GeneralSoundBrushPercussion LowFloorTom;
    
public static GeneralSoundBrushPercussion ClosedHiHat;
    
public static GeneralSoundBrushPercussion HighFloorTom;
    
public static GeneralSoundBrushPercussion PedalHiHat;
    
public static GeneralSoundBrushPercussion LowTom;
    
public static GeneralSoundBrushPercussion OpenHiHat;
    
public static GeneralSoundBrushPercussion LowMidTom;
    
public static GeneralSoundBrushPercussion HiMidTom;
    
public static GeneralSoundBrushPercussion CrashCymbal1;
    
public static GeneralSoundBrushPercussion HighTom;
    
public static GeneralSoundBrushPercussion RideCymbal1;
    
public static GeneralSoundBrushPercussion ChineseCymbal;
    
public static GeneralSoundBrushPercussion RideBell;
    
public static GeneralSoundBrushPercussion Tambourine;
    
public static GeneralSoundBrushPercussion SplashCymbal;
    
public static GeneralSoundBrushPercussion Cowbell;
    
public static GeneralSoundBrushPercussion CrashCymbal2;
    
public static GeneralSoundBrushPercussion Vibraslap;
    
public static GeneralSoundBrushPercussion RideCymbal2;
    
public static GeneralSoundBrushPercussion HiBongo;
    
public static GeneralSoundBrushPercussion LowBongo;
    
public static GeneralSoundBrushPercussion MuteHiConga;
    
public static GeneralSoundBrushPercussion OpenHiConga;
    
public static GeneralSoundBrushPercussion LowConga;
    
public static GeneralSoundBrushPercussion HighTimbale;
    
public static GeneralSoundBrushPercussion LowTimbale;
    
public static GeneralSoundBrushPercussion HighAgogo;
    
public static GeneralSoundBrushPercussion LowAgogo;
    
public static GeneralSoundBrushPercussion Cabasa;
    
public static GeneralSoundBrushPercussion Maracas;
    
public static GeneralSoundBrushPercussion ShortWhistle;
    
public static GeneralSoundBrushPercussion LongWhistle;
    
public static GeneralSoundBrushPercussion ShortGuiro;
    
public static GeneralSoundBrushPercussion LongGuiro;
    
public static GeneralSoundBrushPercussion Claves;
    
public static GeneralSoundBrushPercussion HiWoodBlock;
    
public static GeneralSoundBrushPercussion LowWoodBlock;
    
public static GeneralSoundBrushPercussion MuteCuica;
    
public static GeneralSoundBrushPercussion OpenCuica;
    
public static GeneralSoundBrushPercussion MuteTriangle;
    
public static GeneralSoundBrushPercussion OpenTriangle;
    
public static GeneralSoundBrushPercussion Shaker;
    
public static GeneralSoundBrushPercussion JingleBell;
    
public static GeneralSoundBrushPercussion Belltree;
    
public static GeneralSoundBrushPercussion Castanets;
    
public static GeneralSoundBrushPercussion MuteSurdo;
    
public static GeneralSoundBrushPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundCm6432LPercussion : Enum {
    
public byte value__;
    
public static GeneralSoundCm6432LPercussion AcousticBassDrum1;
    
public static GeneralSoundCm6432LPercussion AcousticBassDrum2;
    
public static GeneralSoundCm6432LPercussion RimShot;
    
public static GeneralSoundCm6432LPercussion AcousticSnareDrum;
    
public static GeneralSoundCm6432LPercussion HandClap;
    
public static GeneralSoundCm6432LPercussion ElectronicSnareDrum;
    
public static GeneralSoundCm6432LPercussion AcousticLowTom1;
    
public static GeneralSoundCm6432LPercussion ClosedHiHat;
    
public static GeneralSoundCm6432LPercussion AcousticLowTom2;
    
public static GeneralSoundCm6432LPercussion OpenHiHat1;
    
public static GeneralSoundCm6432LPercussion AcousticMidTom1;
    
public static GeneralSoundCm6432LPercussion OpenHiHat2;
    
public static GeneralSoundCm6432LPercussion AcousticMidTom2;
    
public static GeneralSoundCm6432LPercussion AcousticHiTom1;
    
public static GeneralSoundCm6432LPercussion CrashCymbal;
    
public static GeneralSoundCm6432LPercussion AcousticHiTom2;
    
public static GeneralSoundCm6432LPercussion RideCymbal;
    
public static GeneralSoundCm6432LPercussion Tambourine;
    
public static GeneralSoundCm6432LPercussion Cowbell;
    
public static GeneralSoundCm6432LPercussion HighBongo;
    
public static GeneralSoundCm6432LPercussion LowBongo;
    
public static GeneralSoundCm6432LPercussion MuteHiConga;
    
public static GeneralSoundCm6432LPercussion HighConga;
    
public static GeneralSoundCm6432LPercussion LowConga;
    
public static GeneralSoundCm6432LPercussion HighTimbale;
    
public static GeneralSoundCm6432LPercussion LowTimbale;
    
public static GeneralSoundCm6432LPercussion HighAgogo;
    
public static GeneralSoundCm6432LPercussion LowAgogo;
    
public static GeneralSoundCm6432LPercussion Cabasa;
    
public static GeneralSoundCm6432LPercussion Maracas;
    
public static GeneralSoundCm6432LPercussion ShortWhistle;
    
public static GeneralSoundCm6432LPercussion LongWhistle;
    
public static GeneralSoundCm6432LPercussion Quijada;
    
public static GeneralSoundCm6432LPercussion Claves;
    
public static GeneralSoundCm6432LPercussion Laughing;
    
public static GeneralSoundCm6432LPercussion Screaming;
    
public static GeneralSoundCm6432LPercussion Punch;
    
public static GeneralSoundCm6432LPercussion Heartbeat;
    
public static GeneralSoundCm6432LPercussion Footsteps1;
    
public static GeneralSoundCm6432LPercussion Footsteps2;
    
public static GeneralSoundCm6432LPercussion Applause;
    
public static GeneralSoundCm6432LPercussion DoorCreaking;
    
public static GeneralSoundCm6432LPercussion DoorClosing;
    
public static GeneralSoundCm6432LPercussion Scratch;
    
public static GeneralSoundCm6432LPercussion WindChimes;
    
public static GeneralSoundCm6432LPercussion CarEngine;
    
public static GeneralSoundCm6432LPercussion CarBrakes;
    
public static GeneralSoundCm6432LPercussion CarPassing;
    
public static GeneralSoundCm6432LPercussion CarCrash;
    
public static GeneralSoundCm6432LPercussion Siren;
    
public static GeneralSoundCm6432LPercussion Train;
    
public static GeneralSoundCm6432LPercussion JetPlane;
    
public static GeneralSoundCm6432LPercussion Helicopter;
    
public static GeneralSoundCm6432LPercussion Starship;
    
public static GeneralSoundCm6432LPercussion GunShot;
    
public static GeneralSoundCm6432LPercussion MachineGun;
    
public static GeneralSoundCm6432LPercussion LaserGun;
    
public static GeneralSoundCm6432LPercussion Explosion;
    
public static GeneralSoundCm6432LPercussion DogBark;
    
public static GeneralSoundCm6432LPercussion HorseGallop;
    
public static GeneralSoundCm6432LPercussion BirdsTweet;
    
public static GeneralSoundCm6432LPercussion Rain;
    
public static GeneralSoundCm6432LPercussion Thunder;
    
public static GeneralSoundCm6432LPercussion Wind;
    
public static GeneralSoundCm6432LPercussion Seashore;
    
public static GeneralSoundCm6432LPercussion Stream;
    
public static GeneralSoundCm6432LPercussion Bubble;
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundElectronicPercussion : Enum {
    
public byte value__;
    
public static GeneralSoundElectronicPercussion HighQ;
    
public static GeneralSoundElectronicPercussion Slap;
    
public static GeneralSoundElectronicPercussion ScratchPush;
    
public static GeneralSoundElectronicPercussion ScratchPull;
    
public static GeneralSoundElectronicPercussion Sticks;
    
public static GeneralSoundElectronicPercussion SquareClick;
    
public static GeneralSoundElectronicPercussion MetronomeClick;
    
public static GeneralSoundElectronicPercussion MetronomeBell;
    
public static GeneralSoundElectronicPercussion AcousticBassDrum;
    
public static GeneralSoundElectronicPercussion ElectricBassDrum;
    
public static GeneralSoundElectronicPercussion SideStick;
    
public static GeneralSoundElectronicPercussion ElectricSnare1;
    
public static GeneralSoundElectronicPercussion HandClap;
    
public static GeneralSoundElectronicPercussion ElectricSnare2;
    
public static GeneralSoundElectronicPercussion ElectricLowTom2;
    
public static GeneralSoundElectronicPercussion ClosedHiHat;
    
public static GeneralSoundElectronicPercussion ElectricLowTom1;
    
public static GeneralSoundElectronicPercussion PedalHiHat;
    
public static GeneralSoundElectronicPercussion ElectricMidTom2;
    
public static GeneralSoundElectronicPercussion OpenHiHat;
    
public static GeneralSoundElectronicPercussion ElectricMidTom1;
    
public static GeneralSoundElectronicPercussion ElectricHiTom2;
    
public static GeneralSoundElectronicPercussion CrashCymbal1;
    
public static GeneralSoundElectronicPercussion ElectricHiTom1;
    
public static GeneralSoundElectronicPercussion RideCymbal1;
    
public static GeneralSoundElectronicPercussion ReverseCymbal;
    
public static GeneralSoundElectronicPercussion RideBell;
    
public static GeneralSoundElectronicPercussion Tambourine;
    
public static GeneralSoundElectronicPercussion SplashCymbal;
    
public static GeneralSoundElectronicPercussion Cowbell;
    
public static GeneralSoundElectronicPercussion CrashCymbal2;
    
public static GeneralSoundElectronicPercussion Vibraslap;
    
public static GeneralSoundElectronicPercussion RideCymbal2;
    
public static GeneralSoundElectronicPercussion HiBongo;
    
public static GeneralSoundElectronicPercussion LowBongo;
    
public static GeneralSoundElectronicPercussion MuteHiConga;
    
public static GeneralSoundElectronicPercussion OpenHiConga;
    
public static GeneralSoundElectronicPercussion LowConga;
    
public static GeneralSoundElectronicPercussion HighTimbale;
    
public static GeneralSoundElectronicPercussion LowTimbale;
    
public static GeneralSoundElectronicPercussion HighAgogo;
    
public static GeneralSoundElectronicPercussion LowAgogo;
    
public static GeneralSoundElectronicPercussion Cabasa;
    
public static GeneralSoundElectronicPercussion Maracas;
    
public static GeneralSoundElectronicPercussion ShortWhistle;
    
public static GeneralSoundElectronicPercussion LongWhistle;
    
public static GeneralSoundElectronicPercussion ShortGuiro;
    
public static GeneralSoundElectronicPercussion LongGuiro;
    
public static GeneralSoundElectronicPercussion Claves;
    
public static GeneralSoundElectronicPercussion HiWoodBlock;
    
public static GeneralSoundElectronicPercussion LowWoodBlock;
    
public static GeneralSoundElectronicPercussion MuteCuica;
    
public static GeneralSoundElectronicPercussion OpenCuica;
    
public static GeneralSoundElectronicPercussion MuteTriangle;
    
public static GeneralSoundElectronicPercussion OpenTriangle;
    
public static GeneralSoundElectronicPercussion Shaker;
    
public static GeneralSoundElectronicPercussion JingleBell;
    
public static GeneralSoundElectronicPercussion Belltree;
    
public static GeneralSoundElectronicPercussion Castanets;
    
public static GeneralSoundElectronicPercussion MuteSurdo;
    
public static GeneralSoundElectronicPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundJazzPercussion : Enum {
    
public byte value__;
    
public static GeneralSoundJazzPercussion HighQ;
    
public static GeneralSoundJazzPercussion Slap;
    
public static GeneralSoundJazzPercussion ScratchPush;
    
public static GeneralSoundJazzPercussion ScratchPull;
    
public static GeneralSoundJazzPercussion Sticks;
    
public static GeneralSoundJazzPercussion SquareClick;
    
public static GeneralSoundJazzPercussion MetronomeClick;
    
public static GeneralSoundJazzPercussion MetronomeBell;
    
public static GeneralSoundJazzPercussion JazzKick2;
    
public static GeneralSoundJazzPercussion JazzKick1;
    
public static GeneralSoundJazzPercussion SideStick;
    
public static GeneralSoundJazzPercussion AcousticSnare;
    
public static GeneralSoundJazzPercussion HandClap;
    
public static GeneralSoundJazzPercussion ElectricSnare;
    
public static GeneralSoundJazzPercussion LowFloorTom;
    
public static GeneralSoundJazzPercussion ClosedHiHat;
    
public static GeneralSoundJazzPercussion HighFloorTom;
    
public static GeneralSoundJazzPercussion PedalHiHat;
    
public static GeneralSoundJazzPercussion LowTom;
    
public static GeneralSoundJazzPercussion OpenHiHat;
    
public static GeneralSoundJazzPercussion LowMidTom;
    
public static GeneralSoundJazzPercussion HiMidTom;
    
public static GeneralSoundJazzPercussion CrashCymbal1;
    
public static GeneralSoundJazzPercussion HighTom;
    
public static GeneralSoundJazzPercussion RideCymbal1;
    
public static GeneralSoundJazzPercussion ChineseCymbal;
    
public static GeneralSoundJazzPercussion RideBell;
    
public static GeneralSoundJazzPercussion Tambourine;
    
public static GeneralSoundJazzPercussion SplashCymbal;
    
public static GeneralSoundJazzPercussion Cowbell;
    
public static GeneralSoundJazzPercussion CrashCymbal2;
    
public static GeneralSoundJazzPercussion Vibraslap;
    
public static GeneralSoundJazzPercussion RideCymbal2;
    
public static GeneralSoundJazzPercussion HiBongo;
    
public static GeneralSoundJazzPercussion LowBongo;
    
public static GeneralSoundJazzPercussion MuteHiConga;
    
public static GeneralSoundJazzPercussion OpenHiConga;
    
public static GeneralSoundJazzPercussion LowConga;
    
public static GeneralSoundJazzPercussion HighTimbale;
    
public static GeneralSoundJazzPercussion LowTimbale;
    
public static GeneralSoundJazzPercussion HighAgogo;
    
public static GeneralSoundJazzPercussion LowAgogo;
    
public static GeneralSoundJazzPercussion Cabasa;
    
public static GeneralSoundJazzPercussion Maracas;
    
public static GeneralSoundJazzPercussion ShortWhistle;
    
public static GeneralSoundJazzPercussion LongWhistle;
    
public static GeneralSoundJazzPercussion ShortGuiro;
    
public static GeneralSoundJazzPercussion LongGuiro;
    
public static GeneralSoundJazzPercussion Claves;
    
public static GeneralSoundJazzPercussion HiWoodBlock;
    
public static GeneralSoundJazzPercussion LowWoodBlock;
    
public static GeneralSoundJazzPercussion MuteCuica;
    
public static GeneralSoundJazzPercussion OpenCuica;
    
public static GeneralSoundJazzPercussion MuteTriangle;
    
public static GeneralSoundJazzPercussion OpenTriangle;
    
public static GeneralSoundJazzPercussion Shaker;
    
public static GeneralSoundJazzPercussion JingleBell;
    
public static GeneralSoundJazzPercussion Belltree;
    
public static GeneralSoundJazzPercussion Castanets;
    
public static GeneralSoundJazzPercussion MuteSurdo;
    
public static GeneralSoundJazzPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundOrchestraPercussion : Enum {
    
public byte value__;
    
public static GeneralSoundOrchestraPercussion ClosedHiHat2;
    
public static GeneralSoundOrchestraPercussion PedalHiHat;
    
public static GeneralSoundOrchestraPercussion OpenHiHat2;
    
public static GeneralSoundOrchestraPercussion RideCymbal1;
    
public static GeneralSoundOrchestraPercussion Sticks;
    
public static GeneralSoundOrchestraPercussion SquareClick;
    
public static GeneralSoundOrchestraPercussion MetronomeClick;
    
public static GeneralSoundOrchestraPercussion MetronomeBell;
    
public static GeneralSoundOrchestraPercussion ConcertBassDrum2;
    
public static GeneralSoundOrchestraPercussion ConcertBassDrum1;
    
public static GeneralSoundOrchestraPercussion SideStick;
    
public static GeneralSoundOrchestraPercussion ConcertSnareDrum;
    
public static GeneralSoundOrchestraPercussion Castanets;
    
public static GeneralSoundOrchestraPercussion ConcertSnareDrum2;
    
public static GeneralSoundOrchestraPercussion TimpaniF;
    
public static GeneralSoundOrchestraPercussion TimpaniFSharp;
    
public static GeneralSoundOrchestraPercussion TimpaniG;
    
public static GeneralSoundOrchestraPercussion TimpaniGSharp;
    
public static GeneralSoundOrchestraPercussion TimpaniA;
    
public static GeneralSoundOrchestraPercussion TimpaniASharp;
    
public static GeneralSoundOrchestraPercussion TimpaniB;
    
public static GeneralSoundOrchestraPercussion TimpaniC;
    
public static GeneralSoundOrchestraPercussion TimpaniCSharp;
    
public static GeneralSoundOrchestraPercussion TimpaniD;
    
public static GeneralSoundOrchestraPercussion TimpaniDSharp;
    
public static GeneralSoundOrchestraPercussion TimpaniE;
    
public static GeneralSoundOrchestraPercussion TimpaniF2;
    
public static GeneralSoundOrchestraPercussion Tambourine;
    
public static GeneralSoundOrchestraPercussion SplashCymbal;
    
public static GeneralSoundOrchestraPercussion Cowbell;
    
public static GeneralSoundOrchestraPercussion ConcertCymbal2;
    
public static GeneralSoundOrchestraPercussion Vibraslap;
    
public static GeneralSoundOrchestraPercussion ConcertCymbal1;
    
public static GeneralSoundOrchestraPercussion HiBongo;
    
public static GeneralSoundOrchestraPercussion LowBongo;
    
public static GeneralSoundOrchestraPercussion MuteHiConga;
    
public static GeneralSoundOrchestraPercussion OpenHiConga;
    
public static GeneralSoundOrchestraPercussion LowConga;
    
public static GeneralSoundOrchestraPercussion HighTimbale;
    
public static GeneralSoundOrchestraPercussion LowTimbale;
    
public static GeneralSoundOrchestraPercussion HighAgogo;
    
public static GeneralSoundOrchestraPercussion LowAgogo;
    
public static GeneralSoundOrchestraPercussion Cabasa;
    
public static GeneralSoundOrchestraPercussion Maracas;
    
public static GeneralSoundOrchestraPercussion ShortWhistle;
    
public static GeneralSoundOrchestraPercussion LongWhistle;
    
public static GeneralSoundOrchestraPercussion ShortGuiro;
    
public static GeneralSoundOrchestraPercussion LongGuiro;
    
public static GeneralSoundOrchestraPercussion Claves;
    
public static GeneralSoundOrchestraPercussion HiWoodBlock;
    
public static GeneralSoundOrchestraPercussion LowWoodBlock;
    
public static GeneralSoundOrchestraPercussion MuteCuica;
    
public static GeneralSoundOrchestraPercussion OpenCuica;
    
public static GeneralSoundOrchestraPercussion MuteTriangle;
    
public static GeneralSoundOrchestraPercussion OpenTriangle;
    
public static GeneralSoundOrchestraPercussion Shaker;
    
public static GeneralSoundOrchestraPercussion JingleBell;
    
public static GeneralSoundOrchestraPercussion Belltree;
    
public static GeneralSoundOrchestraPercussion Castanets2;
    
public static GeneralSoundOrchestraPercussion MuteSurdo;
    
public static GeneralSoundOrchestraPercussion OpenSurdo;
    
public static GeneralSoundOrchestraPercussion Applause;
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundPercussionSet : Enum {
    
public byte value__;
    
public static GeneralSoundPercussionSet Standard;
    
public static GeneralSoundPercussionSet Room;
    
public static GeneralSoundPercussionSet Power;
    
public static GeneralSoundPercussionSet Electronic;
    
public static GeneralSoundPercussionSet Tr808;
    
public static GeneralSoundPercussionSet Jazz;
    
public static GeneralSoundPercussionSet Brush;
    
public static GeneralSoundPercussionSet Orchestra;
    
public static GeneralSoundPercussionSet Sfx;
    
public static GeneralSoundPercussionSet Cm6432L;
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundPowerPercussion : Enum {
    
public byte value__;
    
public static GeneralSoundPowerPercussion HighQ;
    
public static GeneralSoundPowerPercussion Slap;
    
public static GeneralSoundPowerPercussion ScratchPush;
    
public static GeneralSoundPowerPercussion ScratchPull;
    
public static GeneralSoundPowerPercussion Sticks;
    
public static GeneralSoundPowerPercussion SquareClick;
    
public static GeneralSoundPowerPercussion MetronomeClick;
    
public static GeneralSoundPowerPercussion MetronomeBell;
    
public static GeneralSoundPowerPercussion AcousticBassDrum;
    
public static GeneralSoundPowerPercussion PowerKickDrum;
    
public static GeneralSoundPowerPercussion SideStick;
    
public static GeneralSoundPowerPercussion PowerSnareDrum;
    
public static GeneralSoundPowerPercussion HandClap;
    
public static GeneralSoundPowerPercussion ElectricSnare;
    
public static GeneralSoundPowerPercussion PowerLowTom2;
    
public static GeneralSoundPowerPercussion ClosedHiHat;
    
public static GeneralSoundPowerPercussion PowerLowTom1;
    
public static GeneralSoundPowerPercussion PedalHiHat;
    
public static GeneralSoundPowerPercussion PowerMidTom2;
    
public static GeneralSoundPowerPercussion OpenHiHat;
    
public static GeneralSoundPowerPercussion PowerMidTom1;
    
public static GeneralSoundPowerPercussion PowerHiTom2;
    
public static GeneralSoundPowerPercussion CrashCymbal1;
    
public static GeneralSoundPowerPercussion PowerHiTom1;
    
public static GeneralSoundPowerPercussion RideCymbal1;
    
public static GeneralSoundPowerPercussion ChineseCymbal;
    
public static GeneralSoundPowerPercussion RideBell;
    
public static GeneralSoundPowerPercussion Tambourine;
    
public static GeneralSoundPowerPercussion SplashCymbal;
    
public static GeneralSoundPowerPercussion Cowbell;
    
public static GeneralSoundPowerPercussion CrashCymbal2;
    
public static GeneralSoundPowerPercussion Vibraslap;
    
public static GeneralSoundPowerPercussion RideCymbal2;
    
public static GeneralSoundPowerPercussion HiBongo;
    
public static GeneralSoundPowerPercussion LowBongo;
    
public static GeneralSoundPowerPercussion MuteHiConga;
    
public static GeneralSoundPowerPercussion OpenHiConga;
    
public static GeneralSoundPowerPercussion LowConga;
    
public static GeneralSoundPowerPercussion HighTimbale;
    
public static GeneralSoundPowerPercussion LowTimbale;
    
public static GeneralSoundPowerPercussion HighAgogo;
    
public static GeneralSoundPowerPercussion LowAgogo;
    
public static GeneralSoundPowerPercussion Cabasa;
    
public static GeneralSoundPowerPercussion Maracas;
    
public static GeneralSoundPowerPercussion ShortWhistle;
    
public static GeneralSoundPowerPercussion LongWhistle;
    
public static GeneralSoundPowerPercussion ShortGuiro;
    
public static GeneralSoundPowerPercussion LongGuiro;
    
public static GeneralSoundPowerPercussion Claves;
    
public static GeneralSoundPowerPercussion HiWoodBlock;
    
public static GeneralSoundPowerPercussion LowWoodBlock;
    
public static GeneralSoundPowerPercussion MuteCuica;
    
public static GeneralSoundPowerPercussion OpenCuica;
    
public static GeneralSoundPowerPercussion MuteTriangle;
    
public static GeneralSoundPowerPercussion OpenTriangle;
    
public static GeneralSoundPowerPercussion Shaker;
    
public static GeneralSoundPowerPercussion JingleBell;
    
public static GeneralSoundPowerPercussion Belltree;
    
public static GeneralSoundPowerPercussion Castanets;
    
public static GeneralSoundPowerPercussion MuteSurdo;
    
public static GeneralSoundPowerPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundRoomPercussion : Enum {
    
public byte value__;
    
public static GeneralSoundRoomPercussion HighQ;
    
public static GeneralSoundRoomPercussion Slap;
    
public static GeneralSoundRoomPercussion ScratchPush;
    
public static GeneralSoundRoomPercussion ScratchPull;
    
public static GeneralSoundRoomPercussion Sticks;
    
public static GeneralSoundRoomPercussion SquareClick;
    
public static GeneralSoundRoomPercussion MetronomeClick;
    
public static GeneralSoundRoomPercussion MetronomeBell;
    
public static GeneralSoundRoomPercussion AcousticBassDrum;
    
public static GeneralSoundRoomPercussion BassDrum1;
    
public static GeneralSoundRoomPercussion SideStick;
    
public static GeneralSoundRoomPercussion AcousticSnare;
    
public static GeneralSoundRoomPercussion HandClap;
    
public static GeneralSoundRoomPercussion ElectricSnare;
    
public static GeneralSoundRoomPercussion RoomLowTom2;
    
public static GeneralSoundRoomPercussion ClosedHiHat;
    
public static GeneralSoundRoomPercussion RoomLowTom1;
    
public static GeneralSoundRoomPercussion PedalHiHat;
    
public static GeneralSoundRoomPercussion RoomMidTom2;
    
public static GeneralSoundRoomPercussion OpenHiHat;
    
public static GeneralSoundRoomPercussion RoomMidTom1;
    
public static GeneralSoundRoomPercussion RoomHiTom2;
    
public static GeneralSoundRoomPercussion CrashCymbal1;
    
public static GeneralSoundRoomPercussion RoomHiTom1;
    
public static GeneralSoundRoomPercussion RideCymbal1;
    
public static GeneralSoundRoomPercussion ChineseCymbal;
    
public static GeneralSoundRoomPercussion RideBell;
    
public static GeneralSoundRoomPercussion Tambourine;
    
public static GeneralSoundRoomPercussion SplashCymbal;
    
public static GeneralSoundRoomPercussion Cowbell;
    
public static GeneralSoundRoomPercussion CrashCymbal2;
    
public static GeneralSoundRoomPercussion Vibraslap;
    
public static GeneralSoundRoomPercussion RideCymbal2;
    
public static GeneralSoundRoomPercussion HiBongo;
    
public static GeneralSoundRoomPercussion LowBongo;
    
public static GeneralSoundRoomPercussion MuteHiConga;
    
public static GeneralSoundRoomPercussion OpenHiConga;
    
public static GeneralSoundRoomPercussion LowConga;
    
public static GeneralSoundRoomPercussion HighTimbale;
    
public static GeneralSoundRoomPercussion LowTimbale;
    
public static GeneralSoundRoomPercussion HighAgogo;
    
public static GeneralSoundRoomPercussion LowAgogo;
    
public static GeneralSoundRoomPercussion Cabasa;
    
public static GeneralSoundRoomPercussion Maracas;
    
public static GeneralSoundRoomPercussion ShortWhistle;
    
public static GeneralSoundRoomPercussion LongWhistle;
    
public static GeneralSoundRoomPercussion ShortGuiro;
    
public static GeneralSoundRoomPercussion LongGuiro;
    
public static GeneralSoundRoomPercussion Claves;
    
public static GeneralSoundRoomPercussion HiWoodBlock;
    
public static GeneralSoundRoomPercussion LowWoodBlock;
    
public static GeneralSoundRoomPercussion MuteCuica;
    
public static GeneralSoundRoomPercussion OpenCuica;
    
public static GeneralSoundRoomPercussion MuteTriangle;
    
public static GeneralSoundRoomPercussion OpenTriangle;
    
public static GeneralSoundRoomPercussion Shaker;
    
public static GeneralSoundRoomPercussion JingleBell;
    
public static GeneralSoundRoomPercussion Belltree;
    
public static GeneralSoundRoomPercussion Castanets;
    
public static GeneralSoundRoomPercussion MuteSurdo;
    
public static GeneralSoundRoomPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundSfxPercussion : Enum {
    
public byte value__;
    
public static GeneralSoundSfxPercussion HighQ;
    
public static GeneralSoundSfxPercussion Slap;
    
public static GeneralSoundSfxPercussion ScratchPush;
    
public static GeneralSoundSfxPercussion ScratchPull;
    
public static GeneralSoundSfxPercussion Sticks;
    
public static GeneralSoundSfxPercussion SquareClick;
    
public static GeneralSoundSfxPercussion MetronomeClick;
    
public static GeneralSoundSfxPercussion MetronomeBell;
    
public static GeneralSoundSfxPercussion GuitarFretNoise;
    
public static GeneralSoundSfxPercussion GuitarCuttingNoiseUp;
    
public static GeneralSoundSfxPercussion GuitarCuttingNoiseDown;
    
public static GeneralSoundSfxPercussion StringSlapOfDoubleBass;
    
public static GeneralSoundSfxPercussion FlKeyClick;
    
public static GeneralSoundSfxPercussion Laughing;
    
public static GeneralSoundSfxPercussion Scream;
    
public static GeneralSoundSfxPercussion Punch;
    
public static GeneralSoundSfxPercussion HeartBeat;
    
public static GeneralSoundSfxPercussion Footsteps1;
    
public static GeneralSoundSfxPercussion Footsteps2;
    
public static GeneralSoundSfxPercussion Applause;
    
public static GeneralSoundSfxPercussion DoorCreaking;
    
public static GeneralSoundSfxPercussion Door;
    
public static GeneralSoundSfxPercussion Scratch;
    
public static GeneralSoundSfxPercussion WindChimes;
    
public static GeneralSoundSfxPercussion CarEngine;
    
public static GeneralSoundSfxPercussion CarStop;
    
public static GeneralSoundSfxPercussion CarPass;
    
public static GeneralSoundSfxPercussion CarCrash;
    
public static GeneralSoundSfxPercussion Siren;
    
public static GeneralSoundSfxPercussion Train;
    
public static GeneralSoundSfxPercussion Jetplane;
    
public static GeneralSoundSfxPercussion Helicopter;
    
public static GeneralSoundSfxPercussion Starship;
    
public static GeneralSoundSfxPercussion GunShot;
    
public static GeneralSoundSfxPercussion MachineGun;
    
public static GeneralSoundSfxPercussion Lasergun;
    
public static GeneralSoundSfxPercussion Explosion;
    
public static GeneralSoundSfxPercussion Dog;
    
public static GeneralSoundSfxPercussion HorseGallop;
    
public static GeneralSoundSfxPercussion Birds;
    
public static GeneralSoundSfxPercussion Rain;
    
public static GeneralSoundSfxPercussion Thunder;
    
public static GeneralSoundSfxPercussion Wind;
    
public static GeneralSoundSfxPercussion Seashore;
    
public static GeneralSoundSfxPercussion Stream;
    
public static GeneralSoundSfxPercussion Bubble;
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundStandardPercussion : Enum {
    
public byte value__;
    
public static GeneralSoundStandardPercussion HighQ;
    
public static GeneralSoundStandardPercussion Slap;
    
public static GeneralSoundStandardPercussion ScratchPush;
    
public static GeneralSoundStandardPercussion ScratchPull;
    
public static GeneralSoundStandardPercussion Sticks;
    
public static GeneralSoundStandardPercussion SquareClick;
    
public static GeneralSoundStandardPercussion MetronomeClick;
    
public static GeneralSoundStandardPercussion MetronomeBell;
    
public static GeneralSoundStandardPercussion AcousticBassDrum;
    
public static GeneralSoundStandardPercussion BassDrum1;
    
public static GeneralSoundStandardPercussion SideStick;
    
public static GeneralSoundStandardPercussion AcousticSnare;
    
public static GeneralSoundStandardPercussion HandClap;
    
public static GeneralSoundStandardPercussion ElectricSnare;
    
public static GeneralSoundStandardPercussion LowFloorTom;
    
public static GeneralSoundStandardPercussion ClosedHiHat;
    
public static GeneralSoundStandardPercussion HighFloorTom;
    
public static GeneralSoundStandardPercussion PedalHiHat;
    
public static GeneralSoundStandardPercussion LowTom;
    
public static GeneralSoundStandardPercussion OpenHiHat;
    
public static GeneralSoundStandardPercussion LowMidTom;
    
public static GeneralSoundStandardPercussion HiMidTom;
    
public static GeneralSoundStandardPercussion CrashCymbal1;
    
public static GeneralSoundStandardPercussion HighTom;
    
public static GeneralSoundStandardPercussion RideCymbal1;
    
public static GeneralSoundStandardPercussion ChineseCymbal;
    
public static GeneralSoundStandardPercussion RideBell;
    
public static GeneralSoundStandardPercussion Tambourine;
    
public static GeneralSoundStandardPercussion SplashCymbal;
    
public static GeneralSoundStandardPercussion Cowbell;
    
public static GeneralSoundStandardPercussion CrashCymbal2;
    
public static GeneralSoundStandardPercussion Vibraslap;
    
public static GeneralSoundStandardPercussion RideCymbal2;
    
public static GeneralSoundStandardPercussion HiBongo;
    
public static GeneralSoundStandardPercussion LowBongo;
    
public static GeneralSoundStandardPercussion MuteHiConga;
    
public static GeneralSoundStandardPercussion OpenHiConga;
    
public static GeneralSoundStandardPercussion LowConga;
    
public static GeneralSoundStandardPercussion HighTimbale;
    
public static GeneralSoundStandardPercussion LowTimbale;
    
public static GeneralSoundStandardPercussion HighAgogo;
    
public static GeneralSoundStandardPercussion LowAgogo;
    
public static GeneralSoundStandardPercussion Cabasa;
    
public static GeneralSoundStandardPercussion Maracas;
    
public static GeneralSoundStandardPercussion ShortWhistle;
    
public static GeneralSoundStandardPercussion LongWhistle;
    
public static GeneralSoundStandardPercussion ShortGuiro;
    
public static GeneralSoundStandardPercussion LongGuiro;
    
public static GeneralSoundStandardPercussion Claves;
    
public static GeneralSoundStandardPercussion HiWoodBlock;
    
public static GeneralSoundStandardPercussion LowWoodBlock;
    
public static GeneralSoundStandardPercussion MuteCuica;
    
public static GeneralSoundStandardPercussion OpenCuica;
    
public static GeneralSoundStandardPercussion MuteTriangle;
    
public static GeneralSoundStandardPercussion OpenTriangle;
    
public static GeneralSoundStandardPercussion Shaker;
    
public static GeneralSoundStandardPercussion JingleBell;
    
public static GeneralSoundStandardPercussion Belltree;
    
public static GeneralSoundStandardPercussion Castanets;
    
public static GeneralSoundStandardPercussion MuteSurdo;
    
public static GeneralSoundStandardPercussion OpenSurdo;
}
public enum Melanchall.DryWetMidi.Standards.GeneralSoundTr808Percussion : Enum {
    
public byte value__;
    
public static GeneralSoundTr808Percussion HighQ;
    
public static GeneralSoundTr808Percussion Slap;
    
public static GeneralSoundTr808Percussion ScratchPush;
    
public static GeneralSoundTr808Percussion ScratchPull;
    
public static GeneralSoundTr808Percussion Sticks;
    
public static GeneralSoundTr808Percussion SquareClick;
    
public static GeneralSoundTr808Percussion MetronomeClick;
    
public static GeneralSoundTr808Percussion MetronomeBell;
    
public static GeneralSoundTr808Percussion AcousticBassDrum;
    
public static GeneralSoundTr808Percussion Tr808BassDrum;
    
public static GeneralSoundTr808Percussion Tr808RimShot;
    
public static GeneralSoundTr808Percussion Tr808SnareDrum;
    
public static GeneralSoundTr808Percussion HandClap;
    
public static GeneralSoundTr808Percussion SnaeDrum2;
    
public static GeneralSoundTr808Percussion Tr808LowTom2;
    
public static GeneralSoundTr808Percussion Tr808ClosedHiHat;
    
public static GeneralSoundTr808Percussion Tr808LowTom1;
    
public static GeneralSoundTr808Percussion Tr808PedalHiHat;
    
public static GeneralSoundTr808Percussion Tr808MidTom2;
    
public static GeneralSoundTr808Percussion Tr808OpenHiHat;
    
public static GeneralSoundTr808Percussion Tr808MidTom1;
    
public static GeneralSoundTr808Percussion Tr808HiTom2;
    
public static GeneralSoundTr808Percussion Tr808Cymbal;
    
public static GeneralSoundTr808Percussion Tr808HiTom1;
    
public static GeneralSoundTr808Percussion RideCymbal1;
    
public static GeneralSoundTr808Percussion ReverseCymbal;
    
public static GeneralSoundTr808Percussion RideBell;
    
public static GeneralSoundTr808Percussion Tambourine;
    
public static GeneralSoundTr808Percussion SplashCymbal;
    
public static GeneralSoundTr808Percussion Tr808Cowbell;
    
public static GeneralSoundTr808Percussion CrashCymbal2;
    
public static GeneralSoundTr808Percussion Vibraslap;
    
public static GeneralSoundTr808Percussion RideCymbal2;
    
public static GeneralSoundTr808Percussion HiBongo;
    
public static GeneralSoundTr808Percussion LowBongo;
    
public static GeneralSoundTr808Percussion Tr808HiConga;
    
public static GeneralSoundTr808Percussion Tr808MidConga;
    
public static GeneralSoundTr808Percussion Tr808LowConga;
    
public static GeneralSoundTr808Percussion HighTimbale;
    
public static GeneralSoundTr808Percussion LowTimbale;
    
public static GeneralSoundTr808Percussion HighAgogo;
    
public static GeneralSoundTr808Percussion LowAgogo;
    
public static GeneralSoundTr808Percussion Cabasa;
    
public static GeneralSoundTr808Percussion Tr808Maracas;
    
public static GeneralSoundTr808Percussion ShortWhistle;
    
public static GeneralSoundTr808Percussion LongWhistle;
    
public static GeneralSoundTr808Percussion ShortGuiro;
    
public static GeneralSoundTr808Percussion LongGuiro;
    
public static GeneralSoundTr808Percussion Tr808Claves;
    
public static GeneralSoundTr808Percussion HiWoodBlock;
    
public static GeneralSoundTr808Percussion LowWoodBlock;
    
public static GeneralSoundTr808Percussion MuteCuica;
    
public static GeneralSoundTr808Percussion OpenCuica;
    
public static GeneralSoundTr808Percussion MuteTriangle;
    
public static GeneralSoundTr808Percussion OpenTriangle;
    
public static GeneralSoundTr808Percussion Shaker;
    
public static GeneralSoundTr808Percussion JingleBell;
    
public static GeneralSoundTr808Percussion Belltree;
    
public static GeneralSoundTr808Percussion Castanets;
    
public static GeneralSoundTr808Percussion MuteSurdo;
    
public static GeneralSoundTr808Percussion OpenSurdo;
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Standards.GeneralSoundUtilities : object {
    
private static byte RhythmChannelBankMsb;
    [ExtensionAttribute]
public static IEnumerable`1<MidiEvent> GetPercussionSetEvents(GeneralSoundPercussionSet percussionSet, FourBitNumber channel);
    [ExtensionAttribute]
public static MidiEvent GetProgramEvent(GeneralSoundPercussionSet percussionSet, FourBitNumber channel);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundPercussionSet percussionSet);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundCm6432LPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundTr808Percussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundBrushPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundElectronicPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundJazzPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundOrchestraPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundPowerPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundRoomPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundSfxPercussion percussion);
    [ExtensionAttribute]
public static SevenBitNumber AsSevenBitNumber(GeneralSoundStandardPercussion percussion);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralSoundTr808Percussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralSoundCm6432LPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralSoundBrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralSoundElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralSoundJazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralSoundOrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralSoundPowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralSoundRoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralSoundSfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOnEvent GetNoteOnEvent(GeneralSoundStandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralSoundTr808Percussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralSoundCm6432LPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralSoundBrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralSoundElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralSoundJazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralSoundOrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralSoundPowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralSoundRoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralSoundSfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
    [ExtensionAttribute]
public static NoteOffEvent GetNoteOffEvent(GeneralSoundStandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel);
}
internal class Melanchall.DryWetMidi.Tools.AverageVelocityMerger : VelocityMerger {
    
private List`1<SevenBitNumber> _velocities;
    
public SevenBitNumber Velocity { get; }
    public virtual SevenBitNumber get_Velocity();
    public virtual void Initialize(SevenBitNumber velocity);
    public virtual void Merge(SevenBitNumber velocity);
}
public class Melanchall.DryWetMidi.Tools.ChordsQuantizer : LengthedObjectsQuantizer`2<Chord, ChordsQuantizingSettings> {
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities : object {
    [ExtensionAttribute]
public static void QuantizeChords(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, ChordsQuantizingSettings settings);
    [ExtensionAttribute]
public static void QuantizeChords(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, ChordsQuantizingSettings settings);
    [ExtensionAttribute]
public static void QuantizeChords(MidiFile midiFile, IGrid grid, ChordsQuantizingSettings settings);
}
public class Melanchall.DryWetMidi.Tools.ChordsQuantizingSettings : LengthedObjectsQuantizingSettings`1<Chord> {
    [CompilerGeneratedAttribute]

private ChordDetectionSettings <ChordDetectionSettings>k__BackingField;
    
public ChordDetectionSettings ChordDetectionSettings { get; public set; }
    [CompilerGeneratedAttribute]
public ChordDetectionSettings get_ChordDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_ChordDetectionSettings(ChordDetectionSettings value);
}
public class Melanchall.DryWetMidi.Tools.ChordsRandomizer : LengthedObjectsRandomizer`2<Chord, ChordsRandomizingSettings> {
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities : object {
    [ExtensionAttribute]
public static void RandomizeChords(TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, ChordsRandomizingSettings settings);
    [ExtensionAttribute]
public static void RandomizeChords(IEnumerable`1<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, ChordsRandomizingSettings settings);
    [ExtensionAttribute]
public static void RandomizeChords(MidiFile midiFile, IBounds bounds, ChordsRandomizingSettings settings);
}
public class Melanchall.DryWetMidi.Tools.ChordsRandomizingSettings : LengthedObjectsRandomizingSettings`1<Chord> {
    [CompilerGeneratedAttribute]

private ChordDetectionSettings <ChordDetectionSettings>k__BackingField;
    
public ChordDetectionSettings ChordDetectionSettings { get; public set; }
    [CompilerGeneratedAttribute]
public ChordDetectionSettings get_ChordDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_ChordDetectionSettings(ChordDetectionSettings value);
}
public class Melanchall.DryWetMidi.Tools.ChordsSplitter : LengthedObjectsSplitter`1<Chord> {
    protected virtual Chord CloneObject(Chord obj);
    protected virtual SplitLengthedObject`1<Chord> SplitObject(Chord obj, long time);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities : object {
    [ExtensionAttribute]
public static void SplitChordsByStep(TrackChunk trackChunk, ITimeSpan step, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsByStep(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan step, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsByStep(MidiFile midiFile, ITimeSpan step, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsByPartsNumber(TrackChunk trackChunk, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsByPartsNumber(IEnumerable`1<TrackChunk> trackChunks, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsByPartsNumber(MidiFile midiFile, int partsNumber, TimeSpanType lengthType, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsByGrid(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsByGrid(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsByGrid(MidiFile midiFile, IGrid grid, ChordDetectionSettings settings);
    [ExtensionAttribute]
public static void SplitChordsAtDistance(TrackChunk trackChunk, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsAtDistance(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsAtDistance(MidiFile midiFile, ITimeSpan distance, LengthedObjectTarget from, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsAtDistance(TrackChunk trackChunk, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsAtDistance(IEnumerable`1<TrackChunk> trackChunks, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings);
    [ExtensionAttribute]
public static void SplitChordsAtDistance(MidiFile midiFile, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, ChordDetectionSettings chordDetectionSettings);
    private static void SplitTrackChunkChords(TrackChunk trackChunk, ChordDetectionSettings chordDetectionSettings, Func`3<ChordsSplitter, IEnumerable`1<Chord>, IEnumerable`1<Chord>> splitOperation);
}
public class Melanchall.DryWetMidi.Tools.ConstantBounds : object {
    [CompilerGeneratedAttribute]

private ITimeSpan <LeftSize>k__BackingField;
    [CompilerGeneratedAttribute]

private ITimeSpan <RightSize>k__BackingField;
    
public ITimeSpan LeftSize { get; }
    
public ITimeSpan RightSize { get; }
    public ConstantBounds(ITimeSpan size);
    public ConstantBounds(ITimeSpan leftSize, ITimeSpan rightSize);
    [CompilerGeneratedAttribute]
public ITimeSpan get_LeftSize();
    [CompilerGeneratedAttribute]
public ITimeSpan get_RightSize();
    private static long CalculateBoundaryTime(long time, ITimeSpan size, MathOperation operation, TempoMap tempoMap);
    public sealed virtual Tuple`2<long, long> GetBounds(long time, TempoMap tempoMap);
}
public class Melanchall.DryWetMidi.Tools.CsvConverter : object {
    public void ConvertMidiFileToCsv(MidiFile midiFile, string filePath, bool overwriteFile, MidiFileCsvConversionSettings settings);
    public void ConvertMidiFileToCsv(MidiFile midiFile, Stream stream, MidiFileCsvConversionSettings settings);
    public MidiFile ConvertCsvToMidiFile(string filePath, MidiFileCsvConversionSettings settings);
    public MidiFile ConvertCsvToMidiFile(Stream stream, MidiFileCsvConversionSettings settings);
    public void ConvertNotesToCsv(IEnumerable`1<Note> notes, string filePath, TempoMap tempoMap, bool overwriteFile, NoteCsvConversionSettings settings);
    public void ConvertNotesToCsv(IEnumerable`1<Note> notes, Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings);
    public IEnumerable`1<Note> ConvertCsvToNotes(string filePath, TempoMap tempoMap, NoteCsvConversionSettings settings);
    public IEnumerable`1<Note> ConvertCsvToNotes(Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings);
}
internal static class Melanchall.DryWetMidi.Tools.CsvError : object {
    public static void ThrowBadFormat(int lineNumber, string message, Exception innerException);
    public static void ThrowBadFormat(string message, Exception innerException);
}
internal class Melanchall.DryWetMidi.Tools.CsvReader : object {
    
private static char Quote;
    
private StreamReader _streamReader;
    
private char _delimiter;
    
private Char[] _buffer;
    
private int _bufferLength;
    
private int _indexInBuffer;
    
private bool _disposed;
    
private int _currentLineNumber;
    public CsvReader(Stream stream, CsvSettings settings);
    public CsvRecord ReadRecord();
    private string GetFirstLine();
    private string GetNextLine();
    private void FillBuffer();
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.CsvReader/<SplitValues>d__13")]
private static IEnumerable`1<string> SplitValues(string input, char delimiter);
    private static bool IsValueClosed(string value);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class Melanchall.DryWetMidi.Tools.CsvRecord : object {
    [CompilerGeneratedAttribute]

private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]

private int <LinesCount>k__BackingField;
    [CompilerGeneratedAttribute]

private String[] <Values>k__BackingField;
    
public int LineNumber { get; }
    
public int LinesCount { get; }
    
public String[] Values { get; }
    public CsvRecord(int lineNumber, int linesCount, String[] values);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinesCount();
    [CompilerGeneratedAttribute]
public String[] get_Values();
}
public class Melanchall.DryWetMidi.Tools.CsvSettings : object {
    
private int _bufferSize;
    [CompilerGeneratedAttribute]

private char <CsvDelimiter>k__BackingField;
    
public char CsvDelimiter { get; public set; }
    
public int IoBufferSize { get; public set; }
    [CompilerGeneratedAttribute]
public char get_CsvDelimiter();
    [CompilerGeneratedAttribute]
public void set_CsvDelimiter(char value);
    public int get_IoBufferSize();
    public void set_IoBufferSize(int value);
}
internal static class Melanchall.DryWetMidi.Tools.CsvToMidiFileConverter : object {
    
private static Dictionary`2<string, RecordType> RecordTypes_DryWetMidi;
    
private static Dictionary`2<string, RecordType> RecordTypes_MidiCsv;
    private static CsvToMidiFileConverter();
    public static MidiFile ConvertToMidiFile(Stream stream, MidiFileCsvConversionSettings settings);
    private static void AddTimedEvents(Dictionary`2<int, List`1<TimedMidiEvent>> eventsMap, int trackChunkNumber, TimedMidiEvent[] events);
    private static TempoMap GetTempoMap(IEnumerable`1<TimedMidiEvent> timedMidiEvents, TimeDivision timeDivision);
    private static Nullable`1<RecordType> GetRecordType(string recordType, MidiFileCsvConversionSettings settings);
    private static HeaderChunk ParseHeader(Record record, MidiFileCsvConversionSettings settings);
    private static MidiEvent ParseEvent(Record record, MidiFileCsvConversionSettings settings);
    private static TimedMidiEvent[] ParseNote(Record record, MidiFileCsvConversionSettings settings);
    private static Record ReadRecord(CsvReader csvReader, MidiFileCsvConversionSettings settings);
}
internal static class Melanchall.DryWetMidi.Tools.CsvToNotesConverter : object {
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.CsvToNotesConverter/<ConvertToNotes>d__0")]
public static IEnumerable`1<Note> ConvertToNotes(Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings);
    public static bool TryParseNoteNumber(string input, NoteNumberFormat noteNumberFormat, SevenBitNumber& result);
}
internal static class Melanchall.DryWetMidi.Tools.CsvUtilities : object {
    
private static char Quote;
    
private static string QuoteString;
    
private static string DoubleQuote;
    public static string EscapeString(string input);
    public static string UnescapeString(string input);
}
internal class Melanchall.DryWetMidi.Tools.CsvWriter : object {
    
private StreamWriter _streamWriter;
    
private char _delimiter;
    
private bool _disposed;
    public CsvWriter(Stream stream, CsvSettings settings);
    public void WriteRecord(IEnumerable`1<object> values);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal static class Melanchall.DryWetMidi.Tools.DryWetMidiRecordTypes : object {
    
public static string Note;
}
internal class Melanchall.DryWetMidi.Tools.EventNameGetter : MulticastDelegate {
    public EventNameGetter(object object, IntPtr method);
    public virtual string Invoke(MidiEvent midiEvent);
    public virtual IAsyncResult BeginInvoke(MidiEvent midiEvent, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal static class Melanchall.DryWetMidi.Tools.EventNameGetterProvider : object {
    
private static Dictionary`2<Type, EventNameGetter> EventsTypes_MidiCsv;
    
private static Dictionary`2<Type, EventNameGetter> EventsTypes_DryWetMidi;
    private static EventNameGetterProvider();
    public static EventNameGetter Get(Type eventType, MidiFileCsvLayout layout);
    private static EventNameGetter GetType(string type);
    private static EventNameGetter GetSysExType(string completedType, string incompletedType);
}
internal class Melanchall.DryWetMidi.Tools.EventParametersGetter : MulticastDelegate {
    public EventParametersGetter(object object, IntPtr method);
    public virtual Object[] Invoke(MidiEvent midiEvent, MidiFileCsvConversionSettings settings);
    public virtual IAsyncResult BeginInvoke(MidiEvent midiEvent, MidiFileCsvConversionSettings settings, AsyncCallback callback, object object);
    public virtual Object[] EndInvoke(IAsyncResult result);
}
internal static class Melanchall.DryWetMidi.Tools.EventParametersGetterProvider : object {
    
private static Dictionary`2<Type, EventParametersGetter> EventsParametersGetters;
    private static EventParametersGetterProvider();
    public static EventParametersGetter Get(Type eventType);
    private static EventParametersGetter GetParameters(Func`3[] parametersGetters);
    private static object FormatNoteNumber(SevenBitNumber noteNumber, MidiFileCsvConversionSettings settings);
}
internal class Melanchall.DryWetMidi.Tools.EventParser : MulticastDelegate {
    public EventParser(object object, IntPtr method);
    public virtual MidiEvent Invoke(String[] parameters, MidiFileCsvConversionSettings settings);
    public virtual IAsyncResult BeginInvoke(String[] parameters, MidiFileCsvConversionSettings settings, AsyncCallback callback, object object);
    public virtual MidiEvent EndInvoke(IAsyncResult result);
}
internal static class Melanchall.DryWetMidi.Tools.EventParserProvider : object {
    
private static Dictionary`2<string, EventParser> EventsParsers_MidiCsv;
    
private static Dictionary`2<string, EventParser> EventsParsers_DryWetMidi;
    private static EventParserProvider();
    public static EventParser Get(string eventName, MidiFileCsvLayout layout);
    private static EventParser GetBytesBasedEventParser(Func`2<Object[], MidiEvent> eventCreator, ParameterParser[] parametersParsers);
    private static EventParser GetTextEventParser();
    private static EventParser GetNoteEventParser(int parametersNumber);
    private static EventParser GetChannelEventParser(int parametersNumber);
    private static EventParser GetChannelEventParser(ParameterParser[] parametersParsers);
    private static EventParser GetEventParser(Func`2<Object[], MidiEvent> eventCreator, ParameterParser[] parametersParsers);
}
internal static class Melanchall.DryWetMidi.Tools.EventsNamesProvider : object {
    
private static Dictionary`2<MidiFileCsvLayout, String[]> EventsNames;
    private static EventsNamesProvider();
    public static String[] Get(MidiFileCsvLayout layout);
    private static String[] GetEventsNames(Type eventNamesClassType);
}
internal class Melanchall.DryWetMidi.Tools.FirstVelocityMerger : VelocityMerger {
    public virtual void Merge(SevenBitNumber velocity);
}
public interface Melanchall.DryWetMidi.Tools.IBounds {
    public abstract virtual Tuple`2<long, long> GetBounds(long time, TempoMap tempoMap);
}
internal class Melanchall.DryWetMidi.Tools.LastVelocityMerger : VelocityMerger {
    public virtual void Merge(SevenBitNumber velocity);
}
public abstract class Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizer`2 : Quantizer`2<TObject, TSettings> {
    public void Quantize(IEnumerable`1<TObject> objects, IGrid grid, TempoMap tempoMap, TSettings settings);
    private static TimeProcessingInstruction CorrectObjectOnStartQuantizing(TObject obj, long time, TempoMap tempoMap, TSettings settings);
    private static TimeProcessingInstruction CorrectObjectOnEndQuantizing(TObject obj, long time, TempoMap tempoMap, TSettings settings);
    private static TimeProcessingInstruction ProcessQuantizingBeyondFixedEnd(Int64& newTime, Int64& oldTime, QuantizingBeyondFixedEndPolicy quantizingBeyondFixedEndPolicy, string errorMessage);
    protected sealed virtual long GetObjectTime(TObject obj, TSettings settings);
    protected sealed virtual void SetObjectTime(TObject obj, long time, TSettings settings);
    protected virtual TimeProcessingInstruction OnObjectQuantizing(TObject obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TSettings settings);
}
public abstract class Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings`1 : QuantizingSettings`1<TObject> {
    
private TimeSpanType _lengthType;
    
private LengthedObjectTarget _quantizingTarget;
    
private QuantizingBeyondZeroPolicy _quantizingBeyondZeroPolicy;
    
private QuantizingBeyondFixedEndPolicy _quantizingBeyondFixedEndPolicy;
    [CompilerGeneratedAttribute]

private bool <FixOppositeEnd>k__BackingField;
    
public TimeSpanType LengthType { get; public set; }
    
public LengthedObjectTarget QuantizingTarget { get; public set; }
    
public QuantizingBeyondZeroPolicy QuantizingBeyondZeroPolicy { get; public set; }
    
public QuantizingBeyondFixedEndPolicy QuantizingBeyondFixedEndPolicy { get; public set; }
    
public bool FixOppositeEnd { get; public set; }
    public TimeSpanType get_LengthType();
    public void set_LengthType(TimeSpanType value);
    public LengthedObjectTarget get_QuantizingTarget();
    public void set_QuantizingTarget(LengthedObjectTarget value);
    public QuantizingBeyondZeroPolicy get_QuantizingBeyondZeroPolicy();
    public void set_QuantizingBeyondZeroPolicy(QuantizingBeyondZeroPolicy value);
    public QuantizingBeyondFixedEndPolicy get_QuantizingBeyondFixedEndPolicy();
    public void set_QuantizingBeyondFixedEndPolicy(QuantizingBeyondFixedEndPolicy value);
    [CompilerGeneratedAttribute]
public bool get_FixOppositeEnd();
    [CompilerGeneratedAttribute]
public void set_FixOppositeEnd(bool value);
}
public abstract class Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer`2 : Randomizer`2<TObject, TSettings> {
    public void Randomize(IEnumerable`1<TObject> objects, IBounds bounds, TempoMap tempoMap, TSettings settings);
    protected sealed virtual long GetObjectTime(TObject obj, TSettings settings);
    protected sealed virtual void SetObjectTime(TObject obj, long time, TSettings settings);
    protected virtual TimeProcessingInstruction OnObjectRandomizing(TObject obj, long time, TSettings settings);
}
public abstract class Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizingSettings`1 : RandomizingSettings`1<TObject> {
    
private LengthedObjectTarget _randomizingTarget;
    [CompilerGeneratedAttribute]

private bool <FixOppositeEnd>k__BackingField;
    
public LengthedObjectTarget RandomizingTarget { get; public set; }
    
public bool FixOppositeEnd { get; public set; }
    public LengthedObjectTarget get_RandomizingTarget();
    public void set_RandomizingTarget(LengthedObjectTarget value);
    [CompilerGeneratedAttribute]
public bool get_FixOppositeEnd();
    [CompilerGeneratedAttribute]
public void set_FixOppositeEnd(bool value);
}
public abstract class Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1 : object {
    
internal static double ZeroRatio;
    
internal static double FullLengthRatio;
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1/<SplitByStep>d__2")]
public IEnumerable`1<TObject> SplitByStep(IEnumerable`1<TObject> objects, ITimeSpan step, TempoMap tempoMap);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1/<SplitByPartsNumber>d__3")]
public IEnumerable`1<TObject> SplitByPartsNumber(IEnumerable`1<TObject> objects, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1/<SplitByGrid>d__4")]
public IEnumerable`1<TObject> SplitByGrid(IEnumerable`1<TObject> objects, IGrid grid, TempoMap tempoMap);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1/<SplitAtDistance>d__5")]
public IEnumerable`1<TObject> SplitAtDistance(IEnumerable`1<TObject> objects, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1/<SplitAtDistance>d__6")]
public IEnumerable`1<TObject> SplitAtDistance(IEnumerable`1<TObject> objects, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap);
    protected abstract virtual TObject CloneObject(TObject obj);
    protected abstract virtual SplitLengthedObject`1<TObject> SplitObject(TObject obj, long time);
    private SplitLengthedObject`1<TObject> SplitObjectAtDistance(TObject obj, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap);
}
public enum Melanchall.DryWetMidi.Tools.LengthedObjectTarget : Enum {
    
public int value__;
    
public static LengthedObjectTarget Start;
    
public static LengthedObjectTarget End;
}
internal class Melanchall.DryWetMidi.Tools.MaxVelocityMerger : VelocityMerger {
    public virtual void Merge(SevenBitNumber velocity);
}
internal static class Melanchall.DryWetMidi.Tools.MidiCsvRecordTypes : object {
}
public class Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings : object {
    
private MidiFileCsvLayout _csvLayout;
    
private TimeSpanType _timeType;
    
private TimeSpanType _noteLengthType;
    
private NoteFormat _noteFormat;
    
private NoteNumberFormat _noteNumberFormat;
    [CompilerGeneratedAttribute]

private CsvSettings <CsvSettings>k__BackingField;
    
public MidiFileCsvLayout CsvLayout { get; public set; }
    
public TimeSpanType TimeType { get; public set; }
    
public TimeSpanType NoteLengthType { get; public set; }
    
public NoteFormat NoteFormat { get; public set; }
    
public NoteNumberFormat NoteNumberFormat { get; public set; }
    
public CsvSettings CsvSettings { get; }
    public MidiFileCsvLayout get_CsvLayout();
    public void set_CsvLayout(MidiFileCsvLayout value);
    public TimeSpanType get_TimeType();
    public void set_TimeType(TimeSpanType value);
    public TimeSpanType get_NoteLengthType();
    public void set_NoteLengthType(TimeSpanType value);
    public NoteFormat get_NoteFormat();
    public void set_NoteFormat(NoteFormat value);
    public NoteNumberFormat get_NoteNumberFormat();
    public void set_NoteNumberFormat(NoteNumberFormat value);
    [CompilerGeneratedAttribute]
public CsvSettings get_CsvSettings();
}
public enum Melanchall.DryWetMidi.Tools.MidiFileCsvLayout : Enum {
    
public int value__;
    
public static MidiFileCsvLayout DryWetMidi;
    
public static MidiFileCsvLayout MidiCsv;
}
internal class Melanchall.DryWetMidi.Tools.MidiFileSlicer : object {
    
private static Dictionary`2<MidiEventType, Func`3<MidiEvent, MidiEvent, bool>> DefaultUpdatePredicates;
    
private TimedEventsHolder[] _timedEventsHolders;
    
private TimeDivision _timeDivision;
    
private long _lastTime;
    
private bool _disposed;
    
public bool AllEventsProcessed { get; }
    private MidiFileSlicer(TimeDivision timeDivision, IEnumerator`1[] timedEventsEnumerators);
    private static MidiFileSlicer();
    public bool get_AllEventsProcessed();
    public MidiFile GetNextSlice(long endTime, SliceMidiFileSettings settings);
    public static MidiFileSlicer CreateFromFile(MidiFile midiFile);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.MidiFileSlicer/<GetNextTimedEvents>d__11")]
private IEnumerable`1<IEnumerable`1<TimedEvent>> GetNextTimedEvents(long endTime, bool preserveTimes, Func`1<MidiEvent> partStartMarkerEventFactory, Func`1<MidiEvent> partEndMarkerEventFactory, Func`1<MidiEvent> emptyPartMarkerEventFactory);
    private static bool TryToMoveEdgeNoteOffsToPreviousPart(TimedEvent timedEvent, List`1<TimedEvent> takenTimedEvents);
    private static void MoveEventsToStart(List`1<TimedEvent> takenTimedEvents, int startIndex, long partStartTime);
    private List`1<TimedEvent> PrepareTakenTimedEvents(List`1<TimedEvent> eventsToCopyToNextPart, bool preserveTimes, List`1<TimedEvent> eventsToStartNextPart, Int32& newEventsStartIndex);
    private static void UpdateEventsToCopyToNextPart(List`1<TimedEvent> eventsToCopyToNextPart, TimedEvent timedEvent);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Tools.MidiFileSplitter : object {
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.MidiFileSplitter/<SplitByChunks>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<MidiFile> SplitByChunks(MidiFile midiFile, SplitFileByChunksSettings settings);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.MidiFileSplitter/<SplitByChannel>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<MidiFile> SplitByChannel(MidiFile midiFile, SplitFileByChannelSettings settings);
    [ExtensionAttribute]
public static IEnumerable`1<MidiFile> SplitByNotes(MidiFile midiFile, SplitFileByNotesSettings settings);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.MidiFileSplitter/<SplitByGrid>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<MidiFile> SplitByGrid(MidiFile midiFile, IGrid grid, SliceMidiFileSettings settings);
    [ExtensionAttribute]
public static MidiFile SkipPart(MidiFile midiFile, ITimeSpan partLength, SliceMidiFileSettings settings);
    [ExtensionAttribute]
public static MidiFile TakePart(MidiFile midiFile, ITimeSpan partLength, SliceMidiFileSettings settings);
    [ExtensionAttribute]
public static MidiFile TakePart(MidiFile midiFile, ITimeSpan partStart, ITimeSpan partLength, SliceMidiFileSettings settings);
    [ExtensionAttribute]
public static MidiFile CutPart(MidiFile midiFile, ITimeSpan partStart, ITimeSpan partLength, SliceMidiFileSettings settings);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.MidiFileSplitter/<SplitByNotes>d__8`1")]
[ExtensionAttribute]
private static IEnumerable`1<MidiFile> SplitByNotes(MidiFile midiFile, Func`2<NoteEvent, TNoteId> getNoteId, Predicate`1<TimedEvent> filter, bool copyNonNoteEventsToEachFile);
    private static MidiFile PrepareMidiFileForSlicing(MidiFile midiFile, IGrid grid, SliceMidiFileSettings settings);
}
internal static class Melanchall.DryWetMidi.Tools.MidiFileToCsvConverter : object {
    public static void ConvertToCsv(MidiFile midiFile, Stream stream, MidiFileCsvConversionSettings settings);
    private static void WriteNote(Note note, CsvWriter csvWriter, int trackNumber, long time, MidiFileCsvConversionSettings settings, TempoMap tempoMap);
    private static void WriteTimedEvent(TimedEvent timedEvent, CsvWriter csvWriter, int trackNumber, long time, MidiFileCsvConversionSettings settings, TempoMap tempoMap);
    private static void WriteHeader(CsvWriter csvWriter, MidiFile midiFile, MidiFileCsvConversionSettings settings, TempoMap tempoMap);
    private static void WriteTrackChunkStart(CsvWriter csvWriter, int trackNumber, MidiFileCsvConversionSettings settings, TempoMap tempoMap);
    private static void WriteTrackChunkEnd(CsvWriter csvWriter, int trackNumber, long time, MidiFileCsvConversionSettings settings, TempoMap tempoMap);
    private static void WriteFileEnd(CsvWriter csvWriter, MidiFileCsvConversionSettings settings, TempoMap tempoMap);
    private static void WriteRecord(CsvWriter csvWriter, Nullable`1<int> trackNumber, Nullable`1<long> time, string type, MidiFileCsvConversionSettings settings, TempoMap tempoMap, Object[] parameters);
    private static Object[] ProcessParameter(object parameter);
}
internal class Melanchall.DryWetMidi.Tools.MinVelocityMerger : VelocityMerger {
    public virtual void Merge(SevenBitNumber velocity);
}
public class Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings : object {
    
private TimeSpanType _timeType;
    
private TimeSpanType _noteLengthType;
    
private NoteNumberFormat _noteNumberFormat;
    [CompilerGeneratedAttribute]

private CsvSettings <CsvSettings>k__BackingField;
    
public TimeSpanType TimeType { get; public set; }
    
public TimeSpanType NoteLengthType { get; public set; }
    
public NoteNumberFormat NoteNumberFormat { get; public set; }
    
public CsvSettings CsvSettings { get; }
    public TimeSpanType get_TimeType();
    public void set_TimeType(TimeSpanType value);
    public TimeSpanType get_NoteLengthType();
    public void set_NoteLengthType(TimeSpanType value);
    public NoteNumberFormat get_NoteNumberFormat();
    public void set_NoteNumberFormat(NoteNumberFormat value);
    [CompilerGeneratedAttribute]
public CsvSettings get_CsvSettings();
}
internal static class Melanchall.DryWetMidi.Tools.NoteCsvConversionUtilities : object {
    public static object FormatNoteNumber(SevenBitNumber noteNumber, NoteNumberFormat noteNumberFormat);
}
public enum Melanchall.DryWetMidi.Tools.NoteFormat : Enum {
    
public int value__;
    
public static NoteFormat Note;
    
public static NoteFormat Events;
}
public enum Melanchall.DryWetMidi.Tools.NoteNumberFormat : Enum {
    
public int value__;
    
public static NoteNumberFormat NoteNumber;
    
public static NoteNumberFormat Letter;
}
public class Melanchall.DryWetMidi.Tools.NotesMerger : object {
    
private static Dictionary`2<VelocityMergingPolicy, Func`1<VelocityMerger>> VelocityMergers;
    private static NotesMerger();
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.NotesMerger/<Merge>d__2")]
public IEnumerable`1<Note> Merge(IEnumerable`1<Note> notes, TempoMap tempoMap, NotesMergingSettings settings);
    private static NoteHolder CreateNoteHolder(Note note, NotesMergingSettings settings);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Tools.NotesMergerUtilities : object {
    [ExtensionAttribute]
public static void MergeNotes(TrackChunk trackChunk, TempoMap tempoMap, NotesMergingSettings settings);
    [ExtensionAttribute]
public static void MergeNotes(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, NotesMergingSettings settings);
    [ExtensionAttribute]
public static void MergeNotes(MidiFile midiFile, NotesMergingSettings settings);
}
public class Melanchall.DryWetMidi.Tools.NotesMergingSettings : object {
    
private VelocityMergingPolicy _velocityMergingPolicy;
    
private VelocityMergingPolicy _offVelocityMergingPolicy;
    
private ITimeSpan _tolerance;
    [CompilerGeneratedAttribute]

private Predicate`1<Note> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]

private NoteDetectionSettings <NoteDetectionSettings>k__BackingField;
    
public VelocityMergingPolicy VelocityMergingPolicy { get; public set; }
    
public VelocityMergingPolicy OffVelocityMergingPolicy { get; public set; }
    
public ITimeSpan Tolerance { get; public set; }
    
public Predicate`1<Note> Filter { get; public set; }
    
public NoteDetectionSettings NoteDetectionSettings { get; public set; }
    public VelocityMergingPolicy get_VelocityMergingPolicy();
    public void set_VelocityMergingPolicy(VelocityMergingPolicy value);
    public VelocityMergingPolicy get_OffVelocityMergingPolicy();
    public void set_OffVelocityMergingPolicy(VelocityMergingPolicy value);
    public ITimeSpan get_Tolerance();
    public void set_Tolerance(ITimeSpan value);
    [CompilerGeneratedAttribute]
public Predicate`1<Note> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Predicate`1<Note> value);
    [CompilerGeneratedAttribute]
public NoteDetectionSettings get_NoteDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_NoteDetectionSettings(NoteDetectionSettings value);
}
public class Melanchall.DryWetMidi.Tools.NotesQuantizer : LengthedObjectsQuantizer`2<Note, NotesQuantizingSettings> {
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities : object {
    [ExtensionAttribute]
public static void QuantizeNotes(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, NotesQuantizingSettings settings);
    [ExtensionAttribute]
public static void QuantizeNotes(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, NotesQuantizingSettings settings);
    [ExtensionAttribute]
public static void QuantizeNotes(MidiFile midiFile, IGrid grid, NotesQuantizingSettings settings);
}
public class Melanchall.DryWetMidi.Tools.NotesQuantizingSettings : LengthedObjectsQuantizingSettings`1<Note> {
    [CompilerGeneratedAttribute]

private NoteDetectionSettings <NoteDetectionSettings>k__BackingField;
    
public NoteDetectionSettings NoteDetectionSettings { get; public set; }
    [CompilerGeneratedAttribute]
public NoteDetectionSettings get_NoteDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_NoteDetectionSettings(NoteDetectionSettings value);
}
public class Melanchall.DryWetMidi.Tools.NotesRandomizer : LengthedObjectsRandomizer`2<Note, NotesRandomizingSettings> {
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities : object {
    [ExtensionAttribute]
public static void RandomizeNotes(TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, NotesRandomizingSettings settings);
    [ExtensionAttribute]
public static void RandomizeNotes(IEnumerable`1<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, NotesRandomizingSettings settings);
    [ExtensionAttribute]
public static void RandomizeNotes(MidiFile midiFile, IBounds bounds, NotesRandomizingSettings settings);
}
public class Melanchall.DryWetMidi.Tools.NotesRandomizingSettings : LengthedObjectsRandomizingSettings`1<Note> {
    [CompilerGeneratedAttribute]

private NoteDetectionSettings <NoteDetectionSettings>k__BackingField;
    
public NoteDetectionSettings NoteDetectionSettings { get; public set; }
    [CompilerGeneratedAttribute]
public NoteDetectionSettings get_NoteDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_NoteDetectionSettings(NoteDetectionSettings value);
}
public class Melanchall.DryWetMidi.Tools.NotesSplitter : LengthedObjectsSplitter`1<Note> {
    protected virtual Note CloneObject(Note obj);
    protected virtual SplitLengthedObject`1<Note> SplitObject(Note obj, long time);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Tools.NotesSplitterUtilities : object {
    [ExtensionAttribute]
public static void SplitNotesByStep(TrackChunk trackChunk, ITimeSpan step, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesByStep(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan step, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesByStep(MidiFile midiFile, ITimeSpan step, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesByPartsNumber(TrackChunk trackChunk, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesByPartsNumber(IEnumerable`1<TrackChunk> trackChunks, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesByPartsNumber(MidiFile midiFile, int partsNumber, TimeSpanType lengthType, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesByGrid(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesByGrid(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesByGrid(MidiFile midiFile, IGrid grid, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesAtDistance(TrackChunk trackChunk, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesAtDistance(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesAtDistance(MidiFile midiFile, ITimeSpan distance, LengthedObjectTarget from, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesAtDistance(TrackChunk trackChunk, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesAtDistance(IEnumerable`1<TrackChunk> trackChunks, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings);
    [ExtensionAttribute]
public static void SplitNotesAtDistance(MidiFile midiFile, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, NoteDetectionSettings noteDetectionSettings);
    private static void SplitTrackChunkNotes(TrackChunk trackChunk, NoteDetectionSettings noteDetectionSettings, Func`3<NotesSplitter, IEnumerable`1<Note>, IEnumerable`1<Note>> splitOperation);
}
internal static class Melanchall.DryWetMidi.Tools.NotesToCsvConverter : object {
    public static void ConvertToCsv(IEnumerable`1<Note> notes, Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings);
}
internal class Melanchall.DryWetMidi.Tools.ParameterParser : MulticastDelegate {
    public ParameterParser(object object, IntPtr method);
    public virtual object Invoke(string parameter, MidiFileCsvConversionSettings settings);
    public virtual IAsyncResult BeginInvoke(string parameter, MidiFileCsvConversionSettings settings, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class Melanchall.DryWetMidi.Tools.QuantizedTime : object {
    [CompilerGeneratedAttribute]

private long <NewTime>k__BackingField;
    [CompilerGeneratedAttribute]

private long <GridTime>k__BackingField;
    [CompilerGeneratedAttribute]

private ITimeSpan <Shift>k__BackingField;
    [CompilerGeneratedAttribute]

private long <DistanceToGridTime>k__BackingField;
    [CompilerGeneratedAttribute]

private ITimeSpan <ConvertedDistanceToGridTime>k__BackingField;
    
public long NewTime { get; }
    
public long GridTime { get; }
    
public ITimeSpan Shift { get; }
    
public long DistanceToGridTime { get; }
    
public ITimeSpan ConvertedDistanceToGridTime { get; }
    internal QuantizedTime(long newTime, long gridTime, ITimeSpan shift, long distanceToGridTime, ITimeSpan convertedDistanceToGridTime);
    [CompilerGeneratedAttribute]
public long get_NewTime();
    [CompilerGeneratedAttribute]
public long get_GridTime();
    [CompilerGeneratedAttribute]
public ITimeSpan get_Shift();
    [CompilerGeneratedAttribute]
public long get_DistanceToGridTime();
    [CompilerGeneratedAttribute]
public ITimeSpan get_ConvertedDistanceToGridTime();
}
public abstract class Melanchall.DryWetMidi.Tools.Quantizer`2 : object {
    protected void QuantizeInternal(IEnumerable`1<TObject> objects, IGrid grid, TempoMap tempoMap, TSettings settings);
    protected abstract virtual long GetObjectTime(TObject obj, TSettings settings);
    protected abstract virtual void SetObjectTime(TObject obj, long time, TSettings settings);
    protected abstract virtual TimeProcessingInstruction OnObjectQuantizing(TObject obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TSettings settings);
    [IteratorStateMachineAttribute("Melanchall.DryWetMidi.Tools.Quantizer`2/<GetGridTimes>d__4")]
private static IEnumerable`1<long> GetGridTimes(IGrid grid, long lastTime, TempoMap tempoMap);
    private static QuantizedTime FindNearestTime(IReadOnlyList`1<long> grid, long time, TimeSpanType distanceCalculationType, double quantizingLevel, TempoMap tempoMap);
}
public enum Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy : Enum {
    
public int value__;
    
public static QuantizingBeyondFixedEndPolicy CollapseAndFix;
    
public static QuantizingBeyondFixedEndPolicy CollapseAndMove;
    
public static QuantizingBeyondFixedEndPolicy SwapEnds;
    
public static QuantizingBeyondFixedEndPolicy Skip;
    
public static QuantizingBeyondFixedEndPolicy Abort;
}
public enum Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy : Enum {
    
public int value__;
    
public static QuantizingBeyondZeroPolicy FixAtZero;
    
public static QuantizingBeyondZeroPolicy Skip;
    
public static QuantizingBeyondZeroPolicy Abort;
}
public abstract class Melanchall.DryWetMidi.Tools.QuantizingSettings`1 : object {
    
private static double NoQuantizingLevel;
    
private static double FullQuantizingLevel;
    
private TimeSpanType _distanceCalculationType;
    
private double _quantizingLevel;
    [CompilerGeneratedAttribute]

private Predicate`1<TObject> <Filter>k__BackingField;
    
public TimeSpanType DistanceCalculationType { get; public set; }
    
public double QuantizingLevel { get; public set; }
    
public Predicate`1<TObject> Filter { get; public set; }
    public TimeSpanType get_DistanceCalculationType();
    public void set_DistanceCalculationType(TimeSpanType value);
    public double get_QuantizingLevel();
    public void set_QuantizingLevel(double value);
    [CompilerGeneratedAttribute]
public Predicate`1<TObject> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Predicate`1<TObject> value);
}
public abstract class Melanchall.DryWetMidi.Tools.Randomizer`2 : object {
    
private Random _random;
    protected void RandomizeInternal(IEnumerable`1<TObject> objects, IBounds bounds, TempoMap tempoMap, TSettings settings);
    protected abstract virtual long GetObjectTime(TObject obj, TSettings settings);
    protected abstract virtual void SetObjectTime(TObject obj, long time, TSettings settings);
    protected abstract virtual TimeProcessingInstruction OnObjectRandomizing(TObject obj, long time, TSettings settings);
    private static long RandomizeTime(long time, IBounds bounds, Random random, TempoMap tempoMap);
}
public abstract class Melanchall.DryWetMidi.Tools.RandomizingSettings`1 : object {
    [CompilerGeneratedAttribute]

private Predicate`1<TObject> <Filter>k__BackingField;
    
public Predicate`1<TObject> Filter { get; public set; }
    [CompilerGeneratedAttribute]
public Predicate`1<TObject> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Predicate`1<TObject> value);
}
internal class Melanchall.DryWetMidi.Tools.Record : object {
    [CompilerGeneratedAttribute]

private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<int> <TrackNumber>k__BackingField;
    [CompilerGeneratedAttribute]

private ITimeSpan <Time>k__BackingField;
    [CompilerGeneratedAttribute]

private string <RecordType>k__BackingField;
    [CompilerGeneratedAttribute]

private String[] <Parameters>k__BackingField;
    
public int LineNumber { get; }
    
public Nullable`1<int> TrackNumber { get; }
    
public ITimeSpan Time { get; }
    
public string RecordType { get; }
    
public String[] Parameters { get; }
    public Record(int lineNumber, Nullable`1<int> trackNumber, ITimeSpan time, string recordType, String[] parameters);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TrackNumber();
    [CompilerGeneratedAttribute]
public ITimeSpan get_Time();
    [CompilerGeneratedAttribute]
public string get_RecordType();
    [CompilerGeneratedAttribute]
public String[] get_Parameters();
}
internal enum Melanchall.DryWetMidi.Tools.RecordType : Enum {
    
public int value__;
    
public static RecordType Header;
    
public static RecordType TrackChunkStart;
    
public static RecordType TrackChunkEnd;
    
public static RecordType FileEnd;
    
public static RecordType Event;
    
public static RecordType Note;
}
public class Melanchall.DryWetMidi.Tools.SliceMidiFileMarkers : object {
    [CompilerGeneratedAttribute]

private Func`1<MidiEvent> <PartStartMarkerEventFactory>k__BackingField;
    [CompilerGeneratedAttribute]

private Func`1<MidiEvent> <PartEndMarkerEventFactory>k__BackingField;
    [CompilerGeneratedAttribute]

private Func`1<MidiEvent> <EmptyPartMarkerEventFactory>k__BackingField;
    
public Func`1<MidiEvent> PartStartMarkerEventFactory { get; public set; }
    
public Func`1<MidiEvent> PartEndMarkerEventFactory { get; public set; }
    
public Func`1<MidiEvent> EmptyPartMarkerEventFactory { get; public set; }
    [CompilerGeneratedAttribute]
public Func`1<MidiEvent> get_PartStartMarkerEventFactory();
    [CompilerGeneratedAttribute]
public void set_PartStartMarkerEventFactory(Func`1<MidiEvent> value);
    [CompilerGeneratedAttribute]
public Func`1<MidiEvent> get_PartEndMarkerEventFactory();
    [CompilerGeneratedAttribute]
public void set_PartEndMarkerEventFactory(Func`1<MidiEvent> value);
    [CompilerGeneratedAttribute]
public Func`1<MidiEvent> get_EmptyPartMarkerEventFactory();
    [CompilerGeneratedAttribute]
public void set_EmptyPartMarkerEventFactory(Func`1<MidiEvent> value);
}
public class Melanchall.DryWetMidi.Tools.SliceMidiFileSettings : object {
    [CompilerGeneratedAttribute]

private bool <SplitNotes>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <PreserveTimes>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <PreserveTrackChunks>k__BackingField;
    [CompilerGeneratedAttribute]

private SliceMidiFileMarkers <Markers>k__BackingField;
    [CompilerGeneratedAttribute]

private NoteDetectionSettings <NoteDetectionSettings>k__BackingField;
    
public bool SplitNotes { get; public set; }
    
public bool PreserveTimes { get; public set; }
    
public bool PreserveTrackChunks { get; public set; }
    
public SliceMidiFileMarkers Markers { get; public set; }
    
public NoteDetectionSettings NoteDetectionSettings { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SplitNotes();
    [CompilerGeneratedAttribute]
public void set_SplitNotes(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveTimes();
    [CompilerGeneratedAttribute]
public void set_PreserveTimes(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveTrackChunks();
    [CompilerGeneratedAttribute]
public void set_PreserveTrackChunks(bool value);
    [CompilerGeneratedAttribute]
public SliceMidiFileMarkers get_Markers();
    [CompilerGeneratedAttribute]
public void set_Markers(SliceMidiFileMarkers value);
    [CompilerGeneratedAttribute]
public NoteDetectionSettings get_NoteDetectionSettings();
    [CompilerGeneratedAttribute]
public void set_NoteDetectionSettings(NoteDetectionSettings value);
}
public class Melanchall.DryWetMidi.Tools.SplitFileByChannelSettings : object {
    [CompilerGeneratedAttribute]

private bool <CopyNonChannelEventsToEachFile>k__BackingField;
    [CompilerGeneratedAttribute]

private Predicate`1<TimedEvent> <Filter>k__BackingField;
    
public bool CopyNonChannelEventsToEachFile { get; public set; }
    
public Predicate`1<TimedEvent> Filter { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CopyNonChannelEventsToEachFile();
    [CompilerGeneratedAttribute]
public void set_CopyNonChannelEventsToEachFile(bool value);
    [CompilerGeneratedAttribute]
public Predicate`1<TimedEvent> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Predicate`1<TimedEvent> value);
}
public class Melanchall.DryWetMidi.Tools.SplitFileByChunksSettings : object {
    [CompilerGeneratedAttribute]

private Predicate`1<MidiChunk> <Filter>k__BackingField;
    
public Predicate`1<MidiChunk> Filter { get; public set; }
    [CompilerGeneratedAttribute]
public Predicate`1<MidiChunk> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Predicate`1<MidiChunk> value);
}
public class Melanchall.DryWetMidi.Tools.SplitFileByNotesSettings : object {
    [CompilerGeneratedAttribute]

private bool <CopyNonNoteEventsToEachFile>k__BackingField;
    [CompilerGeneratedAttribute]

private Predicate`1<TimedEvent> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <IgnoreChannel>k__BackingField;
    
public bool CopyNonNoteEventsToEachFile { get; public set; }
    
public Predicate`1<TimedEvent> Filter { get; public set; }
    
public bool IgnoreChannel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CopyNonNoteEventsToEachFile();
    [CompilerGeneratedAttribute]
public void set_CopyNonNoteEventsToEachFile(bool value);
    [CompilerGeneratedAttribute]
public Predicate`1<TimedEvent> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Predicate`1<TimedEvent> value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreChannel();
    [CompilerGeneratedAttribute]
public void set_IgnoreChannel(bool value);
}
public class Melanchall.DryWetMidi.Tools.TimedEventsQuantizer : Quantizer`2<TimedEvent, TimedEventsQuantizingSettings> {
    public void Quantize(IEnumerable`1<TimedEvent> objects, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings);
    protected sealed virtual long GetObjectTime(TimedEvent obj, TimedEventsQuantizingSettings settings);
    protected sealed virtual void SetObjectTime(TimedEvent obj, long time, TimedEventsQuantizingSettings settings);
    protected virtual TimeProcessingInstruction OnObjectQuantizing(TimedEvent obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities : object {
    [ExtensionAttribute]
public static void QuantizeTimedEvents(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings);
    [ExtensionAttribute]
public static void QuantizeTimedEvents(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings);
    [ExtensionAttribute]
public static void QuantizeTimedEvents(MidiFile midiFile, IGrid grid, TimedEventsQuantizingSettings settings);
}
public class Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings : QuantizingSettings`1<TimedEvent> {
}
public class Melanchall.DryWetMidi.Tools.TimedEventsRandomizer : Randomizer`2<TimedEvent, TimedEventsRandomizingSettings> {
    public void Randomize(IEnumerable`1<TimedEvent> objects, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings);
    protected virtual long GetObjectTime(TimedEvent obj, TimedEventsRandomizingSettings settings);
    protected virtual void SetObjectTime(TimedEvent obj, long time, TimedEventsRandomizingSettings settings);
    protected virtual TimeProcessingInstruction OnObjectRandomizing(TimedEvent obj, long time, TimedEventsRandomizingSettings settings);
}
[ExtensionAttribute]
public static class Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities : object {
    [ExtensionAttribute]
public static void RandomizeTimedEvents(TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings);
    [ExtensionAttribute]
public static void RandomizeTimedEvents(IEnumerable`1<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings);
    [ExtensionAttribute]
public static void RandomizeTimedEvents(MidiFile midiFile, IBounds bounds, TimedEventsRandomizingSettings settings);
}
public class Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings : RandomizingSettings`1<TimedEvent> {
}
internal class Melanchall.DryWetMidi.Tools.TimedMidiEvent : object {
    [CompilerGeneratedAttribute]

private ITimeSpan <Time>k__BackingField;
    [CompilerGeneratedAttribute]

private MidiEvent <Event>k__BackingField;
    
public ITimeSpan Time { get; }
    
public MidiEvent Event { get; }
    public TimedMidiEvent(ITimeSpan time, MidiEvent midiEvent);
    [CompilerGeneratedAttribute]
public ITimeSpan get_Time();
    [CompilerGeneratedAttribute]
public MidiEvent get_Event();
}
public enum Melanchall.DryWetMidi.Tools.TimeProcessingAction : Enum {
    
public int value__;
    
public static TimeProcessingAction Apply;
    
public static TimeProcessingAction Skip;
}
public class Melanchall.DryWetMidi.Tools.TimeProcessingInstruction : object {
    
public static TimeProcessingInstruction Skip;
    
private static long InvalidTime;
    [CompilerGeneratedAttribute]

private TimeProcessingAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]

private long <Time>k__BackingField;
    
public TimeProcessingAction Action { get; }
    
public long Time { get; }
    public TimeProcessingInstruction(long time);
    private TimeProcessingInstruction(TimeProcessingAction quantizingInstruction, long time);
    private static TimeProcessingInstruction();
    [CompilerGeneratedAttribute]
public TimeProcessingAction get_Action();
    [CompilerGeneratedAttribute]
public long get_Time();
}
internal static class Melanchall.DryWetMidi.Tools.TypeParser : object {
    
public static ParameterParser Byte;
    
public static ParameterParser SByte;
    
public static ParameterParser Long;
    
public static ParameterParser UShort;
    
public static ParameterParser String;
    
public static ParameterParser Int;
    
public static ParameterParser FourBitNumber;
    
public static ParameterParser SevenBitNumber;
    
public static ParameterParser NoteNumber;
    private static TypeParser();
}
internal abstract class Melanchall.DryWetMidi.Tools.VelocityMerger : object {
    
protected SevenBitNumber _velocity;
    
public SevenBitNumber Velocity { get; }
    public virtual SevenBitNumber get_Velocity();
    public virtual void Initialize(SevenBitNumber velocity);
    public abstract virtual void Merge(SevenBitNumber velocity);
}
public enum Melanchall.DryWetMidi.Tools.VelocityMergingPolicy : Enum {
    
public int value__;
    
public static VelocityMergingPolicy First;
    
public static VelocityMergingPolicy Last;
    
public static VelocityMergingPolicy Min;
    
public static VelocityMergingPolicy Max;
    
public static VelocityMergingPolicy Average;
}
