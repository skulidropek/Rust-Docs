internal Melanchall.DryWetMidi.Common.CircularBuffer`1 : object {
private int _capacity
private T[] _buffer
private int _start
private int _index
private int _position
private bool <IsFull>k__BackingField
public bool IsFull
public void .ctor(int capacity)
public bool get_IsFull()
private void set_IsFull(bool value)
public void Add(T value)
public T[] MovePositionForward(int offset)
public void MovePositionBack(int offset)
private int GetItemsCount()
private IEnumerable`1<T> GetItems()
private IEnumerable`1<T> GetItems(int start, int end)
}
public Melanchall.DryWetMidi.Common.ControlName : Enum {
public byte value__
public ControlName BankSelect
public ControlName Modulation
public ControlName BreathController
public ControlName FootController
public ControlName PortamentoTime
public ControlName DataEntryMsb
public ControlName ChannelVolume
public ControlName Balance
public ControlName Pan
public ControlName ExpressionController
public ControlName EffectControl1
public ControlName EffectControl2
public ControlName GeneralPurposeController1
public ControlName GeneralPurposeController2
public ControlName GeneralPurposeController3
public ControlName GeneralPurposeController4
public ControlName LsbForBankSelect
public ControlName LsbForModulation
public ControlName LsbForBreathController
public ControlName LsbForController3
public ControlName LsbForFootController
public ControlName LsbForPortamentoTime
public ControlName LsbForDataEntry
public ControlName LsbForChannelVolume
public ControlName LsbForBalance
public ControlName LsbForController9
public ControlName LsbForPan
public ControlName LsbForExpressionController
public ControlName LsbForEffectControl1
public ControlName LsbForEffectControl2
public ControlName LsbForController14
public ControlName LsbForController15
public ControlName LsbForGeneralPurposeController1
public ControlName LsbForGeneralPurposeController2
public ControlName LsbForGeneralPurposeController3
public ControlName LsbForGeneralPurposeController4
public ControlName LsbForController20
public ControlName LsbForController21
public ControlName LsbForController22
public ControlName LsbForController23
public ControlName LsbForController24
public ControlName LsbForController25
public ControlName LsbForController26
public ControlName LsbForController27
public ControlName LsbForController28
public ControlName LsbForController29
public ControlName LsbForController30
public ControlName LsbForController31
public ControlName DamperPedal
public ControlName Portamento
public ControlName Sostenuto
public ControlName SoftPedal
public ControlName LegatoFootswitch
public ControlName Hold2
public ControlName SoundController1
public ControlName SoundController2
public ControlName SoundController3
public ControlName SoundController4
public ControlName SoundController5
public ControlName SoundController6
public ControlName SoundController7
public ControlName SoundController8
public ControlName SoundController9
public ControlName SoundController10
public ControlName GeneralPurposeController5
public ControlName GeneralPurposeController6
public ControlName GeneralPurposeController7
public ControlName GeneralPurposeController8
public ControlName PortamentoControl
public ControlName HighResolutionVelocityPrefix
public ControlName Effects1Depth
public ControlName Effects2Depth
public ControlName Effects3Depth
public ControlName Effects4Depth
public ControlName Effects5Depth
public ControlName DataIncrement
public ControlName DataDecrement
public ControlName NonRegisteredParameterNumberLsb
public ControlName NonRegisteredParameterNumberMsb
public ControlName RegisteredParameterNumberLsb
public ControlName RegisteredParameterNumberMsb
public ControlName AllSoundOff
public ControlName ResetAllControllers
public ControlName LocalControl
public ControlName AllNotesOff
public ControlName OmniModeOff
public ControlName OmniModeOn
public ControlName MonoModeOn
public ControlName PolyModeOn
public ControlName Undefined
}
internal Melanchall.DryWetMidi.Common.DataTypesUtilities : object {
public byte Combine(FourBitNumber head, FourBitNumber tail)
public ushort Combine(SevenBitNumber head, SevenBitNumber tail)
public ushort Combine(byte head, byte tail)
public ushort CombineAsSevenBitNumbers(byte head, byte tail)
public byte CombineAsFourBitNumbers(byte head, byte tail)
public UInt32 Combine(ushort head, ushort tail)
public FourBitNumber GetTail(byte number)
public SevenBitNumber GetTail(ushort number)
public byte GetTail(short number)
public ushort GetTail(UInt32 number)
public FourBitNumber GetHead(byte number)
public SevenBitNumber GetHead(ushort number)
public byte GetHead(short number)
public ushort GetHead(UInt32 number)
public int GetVlqLength(int number)
public int GetVlqLength(long number)
public Byte[] GetVlqBytes(int number)
public Byte[] GetVlqBytes(long number)
public byte GetFirstByte(int number)
public byte GetSecondByte(int number)
public byte GetThirdByte(int number)
public byte GetFourthByte(int number)
internal int GetVlqBytes(long number, Byte[] buffer)
}
internal Melanchall.DryWetMidi.Common.DisplayNameAttribute : Attribute {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
}
public Melanchall.DryWetMidi.Common.FourBitNumber : ValueType {
public FourBitNumber MinValue
public FourBitNumber MaxValue
public FourBitNumber[] Values
private byte Min
private byte Max
private byte _value
public void .ctor(byte value)
public bool TryParse(string input, FourBitNumber& fourBitNumber)
public FourBitNumber Parse(string input)
public byte op_Implicit(FourBitNumber number)
public FourBitNumber op_Explicit(byte number)
public int CompareTo(FourBitNumber other)
public TypeCode GetTypeCode()
private bool System.IConvertible.ToBoolean(IFormatProvider provider)
private char System.IConvertible.ToChar(IFormatProvider provider)
private sbyte System.IConvertible.ToSByte(IFormatProvider provider)
private byte System.IConvertible.ToByte(IFormatProvider provider)
private short System.IConvertible.ToInt16(IFormatProvider provider)
private ushort System.IConvertible.ToUInt16(IFormatProvider provider)
private int System.IConvertible.ToInt32(IFormatProvider provider)
private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider)
private long System.IConvertible.ToInt64(IFormatProvider provider)
private ulong System.IConvertible.ToUInt64(IFormatProvider provider)
private float System.IConvertible.ToSingle(IFormatProvider provider)
private double System.IConvertible.ToDouble(IFormatProvider provider)
private decimal System.IConvertible.ToDecimal(IFormatProvider provider)
private DateTime System.IConvertible.ToDateTime(IFormatProvider provider)
private string System.IConvertible.ToString(IFormatProvider provider)
private object System.IConvertible.ToType(Type conversionType, IFormatProvider provider)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Common.IMetadata {
public object Metadata
public object get_Metadata()
public void set_Metadata(object value)
}
internal Melanchall.DryWetMidi.Common.Logger : object {
private Logger _instance
private FileStream _fileStream
private StreamWriter _streamWriter
private bool _disposed
public Logger Instance
public Logger get_Instance()
public void WriteLine(string filePath, string line)
public void Write(string filePath, string text)
public void Dispose()
public void EnsureStreamCreated(string filePath)
private void Dispose(bool disposing)
}
internal Melanchall.DryWetMidi.Common.MathUtilities : object {
public T GetLastElementBelowThreshold(T[] elements, long keyThreshold, Func`2<T, long> keySelector)
public int EnsureInBounds(int value, int min, int max)
public bool IsPowerOfTwo(int value)
public long LeastCommonMultiple(long a, long b)
public long GreatestCommonDivisor(long a, long b)
public Tuple`2<long, long> SolveDiophantineEquation(long a, long b)
public double Round(double value)
public double Round(double value, int digits)
public long RoundToLong(double value)
public IEnumerable`1<T[]> GetPermutations(T[] objects)
private IEnumerable`1<T[]> GetPermutations(T[] objects, int k)
}
public Melanchall.DryWetMidi.Common.MidiException : Exception {
internal void .ctor(string message)
internal void .ctor(string message, Exception innerException)
}
internal Melanchall.DryWetMidi.Common.ObjectWrapper`1 : object {
private TObject <Object>k__BackingField
public TObject Object
public TObject get_Object()
public void set_Object(TObject value)
}
internal Melanchall.DryWetMidi.Common.Parsing`1 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ParsingResult Invoke(string input, T& result)
public IAsyncResult BeginInvoke(string input, T& result, AsyncCallback callback, object object)
public ParsingResult EndInvoke(T& result, IAsyncResult __result)
}
internal Melanchall.DryWetMidi.Common.ParsingResult : object {
public ParsingResult Parsed
public ParsingResult EmptyInputString
public ParsingResult NotMatched
private string _error
private ParsingStatus <Status>k__BackingField
public ParsingStatus Status
public Exception Exception
private void .ctor(string error)
private void .ctor(ParsingStatus status)
private void .ctor(ParsingStatus status, string error)
public ParsingStatus get_Status()
public Exception get_Exception()
public ParsingResult Error(string error)
}
internal Melanchall.DryWetMidi.Common.ParsingStatus : Enum {
public int value__
public ParsingStatus Parsed
public ParsingStatus EmptyInputString
public ParsingStatus NotMatched
public ParsingStatus FormatError
}
internal Melanchall.DryWetMidi.Common.ParsingUtilities : object {
private NumberStyles NonnegativeIntegerNumberStyle
private NumberStyles IntegerNumberStyle
private NumberStyles NonnegativeDoubleNumberStyle
public bool TryParse(string input, Parsing`1<T> parsing, T& result)
public T Parse(string input, Parsing`1<T> parsing)
public string GetNonnegativeIntegerNumberGroup(string groupName)
public string GetIntegerNumberGroup(string groupName)
public string GetNonnegativeDoubleNumberGroup(string groupName)
public Match Match(string input, IEnumerable`1<string> patterns, bool ignoreCase)
public Match[] Matches(string input, IEnumerable`1<string> patterns, bool ignoreCase)
public bool ParseNonnegativeInt(Match match, string groupName, int defaultValue, Int32& value)
public bool ParseInt(Match match, string groupName, int defaultValue, Int32& value)
public bool ParseNonnegativeDouble(Match match, string groupName, double defaultValue, Double& value)
public bool ParseNonnegativeLong(Match match, string groupName, long defaultValue, Int64& value)
private bool ParseInt(Match match, string groupName, int defaultValue, NumberStyles numberStyle, Int32& value)
private bool ParseDouble(Match match, string groupName, double defaultValue, NumberStyles numberStyle, Double& value)
}
public Melanchall.DryWetMidi.Common.SevenBitNumber : ValueType {
public SevenBitNumber MinValue
public SevenBitNumber MaxValue
public SevenBitNumber[] Values
private byte Min
private byte Max
private byte _value
public void .ctor(byte value)
public bool TryParse(string input, SevenBitNumber& sevenBitNumber)
public SevenBitNumber Parse(string input)
public byte op_Implicit(SevenBitNumber number)
public SevenBitNumber op_Explicit(byte number)
public int CompareTo(SevenBitNumber other)
public TypeCode GetTypeCode()
private bool System.IConvertible.ToBoolean(IFormatProvider provider)
private char System.IConvertible.ToChar(IFormatProvider provider)
private sbyte System.IConvertible.ToSByte(IFormatProvider provider)
private byte System.IConvertible.ToByte(IFormatProvider provider)
private short System.IConvertible.ToInt16(IFormatProvider provider)
private ushort System.IConvertible.ToUInt16(IFormatProvider provider)
private int System.IConvertible.ToInt32(IFormatProvider provider)
private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider)
private long System.IConvertible.ToInt64(IFormatProvider provider)
private ulong System.IConvertible.ToUInt64(IFormatProvider provider)
private float System.IConvertible.ToSingle(IFormatProvider provider)
private double System.IConvertible.ToDouble(IFormatProvider provider)
private decimal System.IConvertible.ToDecimal(IFormatProvider provider)
private DateTime System.IConvertible.ToDateTime(IFormatProvider provider)
private string System.IConvertible.ToString(IFormatProvider provider)
private object System.IConvertible.ToType(Type conversionType, IFormatProvider provider)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
internal Melanchall.DryWetMidi.Common.ShortByteParser : object {
internal ParsingResult TryParse(string input, byte minValue, byte maxValue, Byte& result)
}
public Melanchall.DryWetMidi.Common.SmpteFormat : Enum {
public byte value__
public SmpteFormat TwentyFour
public SmpteFormat TwentyFive
public SmpteFormat ThirtyDrop
public SmpteFormat Thirty
}
internal Melanchall.DryWetMidi.Common.StreamWrapper : Stream {
private Stream _stream
private CircularBuffer`1<byte> _buffer
private Byte[] _peekBuffer
private Byte[] _skipBytesBuffer
private long _position
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream stream, int bufferCapacity)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public bool IsEndReached()
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
private void SkipBytes(int count)
}
internal Melanchall.DryWetMidi.Common.ThrowIfArgument : object {
private int MinNonnegativeValue
private int MinPositiveValue
internal void IsNull(string parameterName, object argument)
internal void ContainsNull(string parameterName, IEnumerable`1<T> argument)
internal void IsInvalidEnumValue(string parameterName, TEnum argument)
internal void IsOutOfRange(string parameterName, TimeSpan value, TimeSpan min, TimeSpan max, string message)
internal void IsOutOfRange(string parameterName, int value, int min, int max, string message)
internal void IsOutOfRange(string parameterName, long value, long min, long max, string message)
internal void IsOutOfRange(string parameterName, double value, double min, double max, string message)
internal void IsOutOfRange(string parameterName, int value, string message, Int32[] values)
internal void DoesntSatisfyCondition(string parameterName, int value, Predicate`1<int> condition, string message)
internal void IsGreaterThan(string parameterName, int value, int reference, string message)
internal void IsGreaterThan(string parameterName, long value, long reference, string message)
internal void IsLessThan(string parameterName, TimeSpan value, TimeSpan reference, string message)
internal void IsLessThan(string parameterName, int value, int reference, string message)
internal void IsLessThan(string parameterName, long value, long reference, string message)
internal void IsLessThan(string parameterName, double value, double reference, string message)
internal void IsNegative(string parameterName, int value, string message)
internal void IsNegative(string parameterName, long value, string message)
internal void IsNegative(string parameterName, double value, string message)
internal void IsNonpositive(string parameterName, int value, string message)
internal void IsNonpositive(string parameterName, long value, string message)
internal void IsNonpositive(string parameterName, double value, string message)
internal void IsNullOrWhiteSpaceString(string parameterName, string value, string stringDescription)
internal void IsNullOrEmptyString(string parameterName, string value, string stringDescription)
internal void IsInvalidIndex(string parameterName, int index, int collectionSize)
internal void IsEmptyCollection(string parameterName, IEnumerable`1<T> collection, string message)
internal void ContainsInvalidEnumValue(string parameterName, IEnumerable`1<TEnum> argument)
internal void StartsWithInvalidValue(string parameterName, IEnumerable`1<T> collection, T invalidValue, string message)
internal void IsOfInvalidType(string parameterName, object parameterValue, string message)
internal void IsOfInvalidType(string parameterName, object parameterValue, string message)
}
internal Melanchall.DryWetMidi.Composing.AddAnchorAction : PatternAction {
private object <Anchor>k__BackingField
public object Anchor
public void .ctor(object anchor)
public object get_Anchor()
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.AddChordAction : PatternAction {
private ChordDescriptor <ChordDescriptor>k__BackingField
public ChordDescriptor ChordDescriptor
public void .ctor(ChordDescriptor chordDescriptor)
public ChordDescriptor get_ChordDescriptor()
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.AddNoteAction : PatternAction {
private NoteDescriptor <NoteDescriptor>k__BackingField
public NoteDescriptor NoteDescriptor
public void .ctor(NoteDescriptor noteDescriptor)
public NoteDescriptor get_NoteDescriptor()
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.AddPatternAction : PatternAction {
private Pattern <Pattern>k__BackingField
public Pattern Pattern
public void .ctor(Pattern pattern)
public Pattern get_Pattern()
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.AddTextEventAction`1 : PatternAction {
private string <Text>k__BackingField
public string Text
public void .ctor(string text)
public string get_Text()
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.AnchorPosition : Enum {
public int value__
public AnchorPosition First
public AnchorPosition Last
public AnchorPosition Nth
}
public Melanchall.DryWetMidi.Composing.ChordDescriptor : object {
private IEnumerable`1<Note> <Notes>k__BackingField
private SevenBitNumber <Velocity>k__BackingField
private ITimeSpan <Length>k__BackingField
public IEnumerable`1<Note> Notes
public SevenBitNumber Velocity
public ITimeSpan Length
public void .ctor(IEnumerable`1<Note> notes, SevenBitNumber velocity, ITimeSpan length)
public IEnumerable`1<Note> get_Notes()
public SevenBitNumber get_Velocity()
public ITimeSpan get_Length()
public bool op_Equality(ChordDescriptor chordDescriptor1, ChordDescriptor chordDescriptor2)
public bool op_Inequality(ChordDescriptor chordDescriptor1, ChordDescriptor chordDescriptor2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Composing.ChordSelection : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(int noteIndex, ChordDescriptor chordDescriptor)
public IAsyncResult BeginInvoke(int noteIndex, ChordDescriptor chordDescriptor, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Composing.ChordTransformation : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ChordDescriptor Invoke(ChordDescriptor chordDescriptor)
public IAsyncResult BeginInvoke(ChordDescriptor chordDescriptor, AsyncCallback callback, object object)
public ChordDescriptor EndInvoke(IAsyncResult result)
}
internal Melanchall.DryWetMidi.Composing.MoveToAnchorAction : PatternAction {
private object <Anchor>k__BackingField
private AnchorPosition <AnchorPosition>k__BackingField
private int <Index>k__BackingField
public object Anchor
public AnchorPosition AnchorPosition
public int Index
public void .ctor(AnchorPosition position)
public void .ctor(object anchor, AnchorPosition position)
public void .ctor(AnchorPosition position, int index)
public void .ctor(object anchor, AnchorPosition position, int index)
public object get_Anchor()
public AnchorPosition get_AnchorPosition()
public int get_Index()
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.MoveToTimeAction : PatternAction {
private ITimeSpan <Time>k__BackingField
public ITimeSpan Time
public void .ctor(ITimeSpan time)
public ITimeSpan get_Time()
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
public Melanchall.DryWetMidi.Composing.NoteDescriptor : object {
private Note <Note>k__BackingField
private SevenBitNumber <Velocity>k__BackingField
private ITimeSpan <Length>k__BackingField
public Note Note
public SevenBitNumber Velocity
public ITimeSpan Length
public void .ctor(Note note, SevenBitNumber velocity, ITimeSpan length)
public Note get_Note()
public SevenBitNumber get_Velocity()
public ITimeSpan get_Length()
public bool op_Equality(NoteDescriptor noteDescriptor1, NoteDescriptor noteDescriptor2)
public bool op_Inequality(NoteDescriptor noteDescriptor1, NoteDescriptor noteDescriptor2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Composing.NoteSelection : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(int noteIndex, NoteDescriptor noteDescriptor)
public IAsyncResult BeginInvoke(int noteIndex, NoteDescriptor noteDescriptor, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Composing.NoteTransformation : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public NoteDescriptor Invoke(NoteDescriptor noteDescriptor)
public IAsyncResult BeginInvoke(NoteDescriptor noteDescriptor, AsyncCallback callback, object object)
public NoteDescriptor EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Composing.Pattern : object {
private IEnumerable`1<PatternAction> <Actions>k__BackingField
internal IEnumerable`1<PatternAction> Actions
internal void .ctor(IEnumerable`1<PatternAction> actions)
internal IEnumerable`1<PatternAction> get_Actions()
public TrackChunk ToTrackChunk(TempoMap tempoMap, FourBitNumber channel)
public TrackChunk ToTrackChunk(TempoMap tempoMap)
public MidiFile ToFile(TempoMap tempoMap, FourBitNumber channel)
public MidiFile ToFile(TempoMap tempoMap)
public Pattern Clone()
internal PatternActionResult InvokeActions(long time, PatternContext context)
}
internal Melanchall.DryWetMidi.Composing.PatternAction : object {
private PatternActionState <State>k__BackingField
public PatternActionState State
public PatternActionState get_State()
public void set_State(PatternActionState value)
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.PatternActionResult : object {
public PatternActionResult DoNothing
private Nullable`1<long> <Time>k__BackingField
private IEnumerable`1<Note> <Notes>k__BackingField
private IEnumerable`1<TimedEvent> <Events>k__BackingField
public Nullable`1<long> Time
public IEnumerable`1<Note> Notes
public IEnumerable`1<TimedEvent> Events
public void .ctor(Nullable`1<long> time)
public void .ctor(Nullable`1<long> time, IEnumerable`1<Note> notes)
public void .ctor(Nullable`1<long> time, IEnumerable`1<TimedEvent> events)
public void .ctor(Nullable`1<long> time, IEnumerable`1<Note> notes, IEnumerable`1<TimedEvent> events)
public Nullable`1<long> get_Time()
public IEnumerable`1<Note> get_Notes()
public IEnumerable`1<TimedEvent> get_Events()
}
public Melanchall.DryWetMidi.Composing.PatternActionState : Enum {
public int value__
public PatternActionState Enabled
public PatternActionState Disabled
public PatternActionState Excluded
}
public Melanchall.DryWetMidi.Composing.PatternBuilder : object {
public SevenBitNumber DefaultVelocity
public ITimeSpan DefaultNoteLength
public ITimeSpan DefaultStep
public Octave DefaultOctave
public Note DefaultRootNote
private List`1<PatternAction> _actions
private Dictionary`2<object, int> _anchorCounters
private int _globalAnchorsCounter
private SevenBitNumber <Velocity>k__BackingField
private ITimeSpan <NoteLength>k__BackingField
private ITimeSpan <Step>k__BackingField
private Octave <Octave>k__BackingField
private Note <RootNote>k__BackingField
public SevenBitNumber Velocity
public ITimeSpan NoteLength
public ITimeSpan Step
public Octave Octave
public Note RootNote
public void .ctor(Pattern pattern)
public SevenBitNumber get_Velocity()
private void set_Velocity(SevenBitNumber value)
public ITimeSpan get_NoteLength()
private void set_NoteLength(ITimeSpan value)
public ITimeSpan get_Step()
private void set_Step(ITimeSpan value)
public Octave get_Octave()
private void set_Octave(Octave value)
public Note get_RootNote()
private void set_RootNote(Note value)
public PatternBuilder Note(Interval interval)
public PatternBuilder Note(Interval interval, ITimeSpan length)
public PatternBuilder Note(Interval interval, SevenBitNumber velocity)
public PatternBuilder Note(Interval interval, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Note(NoteName noteName)
public PatternBuilder Note(NoteName noteName, ITimeSpan length)
public PatternBuilder Note(NoteName noteName, SevenBitNumber velocity)
public PatternBuilder Note(NoteName noteName, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Note(Note note)
public PatternBuilder Note(Note note, ITimeSpan length)
public PatternBuilder Note(Note note, SevenBitNumber velocity)
public PatternBuilder Note(Note note, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(Chord chord)
public PatternBuilder Chord(Chord chord, Octave octave)
public PatternBuilder Chord(Chord chord, ITimeSpan length)
public PatternBuilder Chord(Chord chord, Octave octave, ITimeSpan length)
public PatternBuilder Chord(Chord chord, SevenBitNumber velocity)
public PatternBuilder Chord(Chord chord, Octave octave, SevenBitNumber velocity)
public PatternBuilder Chord(Chord chord, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(Chord chord, Octave octave, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName, ITimeSpan length)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, NoteName rootNoteName, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, Note rootNote)
public PatternBuilder Chord(IEnumerable`1<Interval> interval, Note rootNote, ITimeSpan length)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, Note rootNote, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Interval> intervals, Note rootNote, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames)
public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames, ITimeSpan length)
public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<NoteName> noteNames, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Note> notes)
public PatternBuilder Chord(IEnumerable`1<Note> notes, ITimeSpan length)
public PatternBuilder Chord(IEnumerable`1<Note> notes, SevenBitNumber velocity)
public PatternBuilder Chord(IEnumerable`1<Note> notes, ITimeSpan length, SevenBitNumber velocity)
public PatternBuilder Pattern(Pattern pattern)
public PatternBuilder Anchor(object anchor)
public PatternBuilder Anchor()
public PatternBuilder MoveToFirstAnchor(object anchor)
public PatternBuilder MoveToFirstAnchor()
public PatternBuilder MoveToLastAnchor(object anchor)
public PatternBuilder MoveToLastAnchor()
public PatternBuilder MoveToNthAnchor(object anchor, int index)
public PatternBuilder MoveToNthAnchor(int index)
public PatternBuilder StepForward(ITimeSpan step)
public PatternBuilder StepForward()
public PatternBuilder StepBack(ITimeSpan step)
public PatternBuilder StepBack()
public PatternBuilder MoveToTime(ITimeSpan time)
public PatternBuilder MoveToPreviousTime()
public PatternBuilder Repeat(int actionsCount, int repetitionsCount)
public PatternBuilder Repeat(int repetitionsCount)
public PatternBuilder Repeat()
public PatternBuilder Lyrics(string text)
public PatternBuilder Marker(string marker)
public PatternBuilder ProgramChange(SevenBitNumber programNumber)
public PatternBuilder ProgramChange(GeneralMidiProgram program)
public PatternBuilder ProgramChange(GeneralMidi2Program program)
public PatternBuilder SetRootNote(Note rootNote)
public PatternBuilder SetVelocity(SevenBitNumber velocity)
public PatternBuilder SetNoteLength(ITimeSpan length)
public PatternBuilder SetStep(ITimeSpan step)
public PatternBuilder SetOctave(Octave octave)
public Pattern Build()
public PatternBuilder ReplayPattern(Pattern pattern)
private PatternBuilder AddAction(PatternAction patternAction)
private int GetAnchorCounter(object anchor)
private void UpdateAnchorsCounters(object anchor)
private PatternBuilder RepeatActions(int actionsCount, int repetitionsCount)
private Note <Chord>b__61_0(NoteName n)
}
internal Melanchall.DryWetMidi.Composing.PatternContext : object {
private Stack`1<long> _timeHistory
private Dictionary`2<object, List`1<long>> _anchors
private List`1<long> _anchorsList
private TempoMap <TempoMap>k__BackingField
private FourBitNumber <Channel>k__BackingField
public TempoMap TempoMap
public FourBitNumber Channel
public void .ctor(TempoMap tempoMap, FourBitNumber channel)
public TempoMap get_TempoMap()
public FourBitNumber get_Channel()
public void SaveTime(long time)
public Nullable`1<long> RestoreTime()
public void AnchorTime(object anchor, long time)
public IReadOnlyList`1<long> GetAnchorTimes(object anchor)
private List`1<long> GetAnchorTimesList(object anchor)
}
public Melanchall.DryWetMidi.Composing.PatternUtilities : object {
private NoteSelection AllNotesSelection
private ChordSelection AllChordsSelection
public Pattern TransformNotes(Pattern pattern, NoteTransformation noteTransformation, bool recursive)
public Pattern TransformNotes(Pattern pattern, NoteSelection noteSelection, NoteTransformation noteTransformation, bool recursive)
public Pattern TransformChords(Pattern pattern, ChordTransformation chordTransformation, bool recursive)
public Pattern TransformChords(Pattern pattern, ChordSelection chordSelection, ChordTransformation chordTransformation, bool recursive)
public IEnumerable`1<Pattern> SplitAtAnchor(Pattern pattern, object anchor, bool removeEmptyPatterns)
public IEnumerable`1<Pattern> SplitAtAllAnchors(Pattern pattern, bool removeEmptyPatterns)
public IEnumerable`1<Pattern> SplitAtMarker(Pattern pattern, string marker, bool removeEmptyPatterns, StringComparison stringComparison)
public IEnumerable`1<Pattern> SplitAtAllMarkers(Pattern pattern, bool removeEmptyPatterns)
public Pattern CombineInSequence(IEnumerable`1<Pattern> patterns)
public Pattern CombineInParallel(IEnumerable`1<Pattern> patterns)
public void SetNotesState(Pattern pattern, NoteSelection noteSelection, PatternActionState state, bool recursive)
public void SetChordsState(Pattern pattern, ChordSelection chordSelection, PatternActionState state, bool recursive)
private IEnumerable`1<Pattern> SplitAtActions(Pattern pattern, Predicate`1<PatternAction> actionSelector, bool removeEmptyPatterns)
private Pattern TransformNotes(Pattern pattern, ObjectWrapper`1<int> noteIndexWrapper, NoteSelection noteSelection, NoteTransformation noteTransformation, bool recursive)
private Pattern TransformChords(Pattern pattern, ObjectWrapper`1<int> chordIndexWrapper, ChordSelection chordSelection, ChordTransformation chordTransformation, bool recursive)
private void SetNotesState(Pattern pattern, ObjectWrapper`1<int> noteIndexWrapper, NoteSelection noteSelection, PatternActionState state, bool recursive)
private void SetChordsState(Pattern pattern, ObjectWrapper`1<int> chordIndexWrapper, ChordSelection chordSelection, PatternActionState state, bool recursive)
}
internal Melanchall.DryWetMidi.Composing.SetGeneralMidi2ProgramAction : PatternAction {
private GeneralMidi2Program <Program>k__BackingField
public GeneralMidi2Program Program
public void .ctor(GeneralMidi2Program program)
public GeneralMidi2Program get_Program()
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.SetGeneralMidiProgramAction : PatternAction {
private GeneralMidiProgram <Program>k__BackingField
public GeneralMidiProgram Program
public void .ctor(GeneralMidiProgram program)
public GeneralMidiProgram get_Program()
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.SetProgramNumberAction : PatternAction {
private SevenBitNumber <ProgramNumber>k__BackingField
public SevenBitNumber ProgramNumber
public void .ctor(SevenBitNumber programNumber)
public SevenBitNumber get_ProgramNumber()
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.StepAction : PatternAction {
private ITimeSpan <Step>k__BackingField
public ITimeSpan Step
public void .ctor(ITimeSpan step)
public ITimeSpan get_Step()
}
internal Melanchall.DryWetMidi.Composing.StepBackAction : StepAction {
public void .ctor(ITimeSpan step)
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
internal Melanchall.DryWetMidi.Composing.StepForwardAction : StepAction {
public void .ctor(ITimeSpan step)
public PatternActionResult Invoke(long time, PatternContext context)
public PatternAction Clone()
}
public Melanchall.DryWetMidi.Core.ActiveSensingEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
internal Melanchall.DryWetMidi.Core.ArrayUtilities : object {
internal bool Equals(T[] array1, T[] array2)
internal int GetHashCode(T[] array)
}
public Melanchall.DryWetMidi.Core.BaseTextEvent : MetaEvent {
private string <Text>k__BackingField
public string Text
public void .ctor(MidiEventType eventType)
public void .ctor(MidiEventType eventType, string text)
public string get_Text()
public void set_Text(string value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
}
public Melanchall.DryWetMidi.Core.BufferingPolicy : Enum {
public int value__
public BufferingPolicy UseFixedSizeBuffer
public BufferingPolicy DontUseBuffering
public BufferingPolicy UseCustomBuffer
public BufferingPolicy BufferAllData
}
public Melanchall.DryWetMidi.Core.BytesToMidiEventConverter : object {
private IEventReader MetaEventReader
private MemoryStream _dataBytesStream
private MidiReader _midiReader
private FfStatusBytePolicy _ffStatusBytePolicy
private bool _disposed
private bool <ReadDeltaTimes>k__BackingField
private ReadingSettings <ReadingSettings>k__BackingField
public UnknownChannelEventPolicy UnknownChannelEventPolicy
public UnknownChannelEventCallback UnknownChannelEventCallback
public SilentNoteOnPolicy SilentNoteOnPolicy
public InvalidChannelEventParameterValuePolicy InvalidChannelEventParameterValuePolicy
public InvalidMetaEventParameterValuePolicy InvalidMetaEventParameterValuePolicy
public InvalidSystemCommonEventParameterValuePolicy InvalidSystemCommonEventParameterValuePolicy
public EventTypesCollection CustomMetaEventTypes
public Encoding TextEncoding
public DecodeTextCallback DecodeTextCallback
public ZeroLengthDataPolicy ZeroLengthDataPolicy
public NotEnoughBytesPolicy NotEnoughBytesPolicy
public bool ReadDeltaTimes
public FfStatusBytePolicy FfStatusBytePolicy
internal ReadingSettings ReadingSettings
public void .ctor(int capacity)
public UnknownChannelEventPolicy get_UnknownChannelEventPolicy()
public void set_UnknownChannelEventPolicy(UnknownChannelEventPolicy value)
public UnknownChannelEventCallback get_UnknownChannelEventCallback()
public void set_UnknownChannelEventCallback(UnknownChannelEventCallback value)
public SilentNoteOnPolicy get_SilentNoteOnPolicy()
public void set_SilentNoteOnPolicy(SilentNoteOnPolicy value)
public InvalidChannelEventParameterValuePolicy get_InvalidChannelEventParameterValuePolicy()
public void set_InvalidChannelEventParameterValuePolicy(InvalidChannelEventParameterValuePolicy value)
public InvalidMetaEventParameterValuePolicy get_InvalidMetaEventParameterValuePolicy()
public void set_InvalidMetaEventParameterValuePolicy(InvalidMetaEventParameterValuePolicy value)
public InvalidSystemCommonEventParameterValuePolicy get_InvalidSystemCommonEventParameterValuePolicy()
public void set_InvalidSystemCommonEventParameterValuePolicy(InvalidSystemCommonEventParameterValuePolicy value)
public EventTypesCollection get_CustomMetaEventTypes()
public void set_CustomMetaEventTypes(EventTypesCollection value)
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public DecodeTextCallback get_DecodeTextCallback()
public void set_DecodeTextCallback(DecodeTextCallback value)
public ZeroLengthDataPolicy get_ZeroLengthDataPolicy()
public void set_ZeroLengthDataPolicy(ZeroLengthDataPolicy value)
public NotEnoughBytesPolicy get_NotEnoughBytesPolicy()
public void set_NotEnoughBytesPolicy(NotEnoughBytesPolicy value)
public bool get_ReadDeltaTimes()
public void set_ReadDeltaTimes(bool value)
public FfStatusBytePolicy get_FfStatusBytePolicy()
public void set_FfStatusBytePolicy(FfStatusBytePolicy value)
internal ReadingSettings get_ReadingSettings()
public ICollection`1<MidiEvent> ConvertMultiple(Byte[] bytes, int offset, int length)
public ICollection`1<MidiEvent> ConvertMultiple(Byte[] bytes)
public MidiEvent Convert(byte statusByte, Byte[] dataBytes)
public MidiEvent Convert(Byte[] bytes)
public MidiEvent Convert(Byte[] bytes, int offset, int length)
private void PrepareStreamWithBytes(Byte[] bytes, int offset, int length)
private MidiEvent ReadEvent(byte statusByte)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Core.ChannelAftertouchEvent : ChannelEvent {
public SevenBitNumber AftertouchValue
public void .ctor(SevenBitNumber aftertouchValue)
public SevenBitNumber get_AftertouchValue()
public void set_AftertouchValue(SevenBitNumber value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ChannelEvent : MidiEvent {
internal byte _dataByte1
internal byte _dataByte2
private FourBitNumber <Channel>k__BackingField
public FourBitNumber Channel
protected void .ctor(MidiEventType eventType)
public FourBitNumber get_Channel()
public void set_Channel(FourBitNumber value)
protected byte ReadDataByte(MidiReader reader, ReadingSettings settings)
}
internal Melanchall.DryWetMidi.Core.ChannelEventReader : object {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
private void ReactOnUnknownChannelEvent(FourBitNumber statusByte, FourBitNumber channel, MidiReader reader, ReadingSettings settings)
}
internal Melanchall.DryWetMidi.Core.ChannelEventWriter : object {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.ChannelPrefixEvent : MetaEvent {
private byte <Channel>k__BackingField
public byte Channel
public void .ctor(byte channel)
public byte get_Channel()
public void set_Channel(byte value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ChunksCollection : object {
private List`1<MidiChunk> _chunks
private bool <IsReadOnly>k__BackingField
public MidiChunk Item
public int Count
public bool IsReadOnly
public MidiChunk get_Item(int index)
public void set_Item(int index, MidiChunk value)
public int get_Count()
public bool get_IsReadOnly()
public void Add(MidiChunk chunk)
public void AddRange(IEnumerable`1<MidiChunk> chunks)
public void Insert(int index, MidiChunk chunk)
public void InsertRange(int index, IEnumerable`1<MidiChunk> chunks)
public bool Remove(MidiChunk chunk)
public void RemoveAt(int index)
public int RemoveAll(Predicate`1<MidiChunk> match)
public int IndexOf(MidiChunk chunk)
public void Clear()
public IEnumerator`1<MidiChunk> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool Contains(MidiChunk item)
public void CopyTo(MidiChunk[] array, int arrayIndex)
}
internal Melanchall.DryWetMidi.Core.ChunksConverterFactory : object {
public IChunksConverter GetConverter(MidiFileFormat format)
}
public Melanchall.DryWetMidi.Core.ChunkType : object {
private Type <Type>k__BackingField
private string <Id>k__BackingField
public Type Type
public string Id
public void .ctor(Type type, string id)
public Type get_Type()
public string get_Id()
}
public Melanchall.DryWetMidi.Core.ChunkTypesCollection : object {
private Dictionary`2<Type, string> _ids
private Dictionary`2<string, Type> _types
public void Add(Type type, string id)
public bool TryGetType(string id, Type& type)
public bool TryGetId(Type type, String& id)
public IEnumerator`1<ChunkType> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public Melanchall.DryWetMidi.Core.ContinueEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ControlChangeEvent : ChannelEvent {
public SevenBitNumber ControlNumber
public SevenBitNumber ControlValue
public void .ctor(SevenBitNumber controlNumber, SevenBitNumber controlValue)
public SevenBitNumber get_ControlNumber()
public void set_ControlNumber(SevenBitNumber value)
public SevenBitNumber get_ControlValue()
public void set_ControlValue(SevenBitNumber value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ControlUtilities : object {
public ControlName GetControlName(ControlChangeEvent controlChangeEvent)
public SevenBitNumber AsSevenBitNumber(ControlName controlName)
public ControlChangeEvent GetControlChangeEvent(ControlName controlName, SevenBitNumber controlValue, FourBitNumber channel)
private ControlName GetControlName(SevenBitNumber controlNumber)
}
public Melanchall.DryWetMidi.Core.CopyrightNoticeEvent : BaseTextEvent {
public void .ctor(string text)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.CuePointEvent : BaseTextEvent {
public void .ctor(string text)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.DecodeTextCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public string Invoke(Byte[] bytes, ReadingSettings settings)
public IAsyncResult BeginInvoke(Byte[] bytes, ReadingSettings settings, AsyncCallback callback, object object)
public string EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Core.DeviceNameEvent : BaseTextEvent {
public void .ctor(string deviceName)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.EndOfTrackEvent : MetaEvent {
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.EndOfTrackStoringPolicy : Enum {
public int value__
public EndOfTrackStoringPolicy Omit
public EndOfTrackStoringPolicy Store
}
public Melanchall.DryWetMidi.Core.EscapeSysExEvent : SysExEvent {
public void .ctor(Byte[] data)
protected MidiEvent CloneEvent()
public string ToString()
}
internal Melanchall.DryWetMidi.Core.EventReaderFactory : object {
private IEventReader MetaEventReader
private IEventReader ChannelEventReader
private IEventReader SysExEventReader
private IEventReader SystemRealTimeEventReader
private IEventReader SystemCommonEventReader
internal IEventReader GetReader(byte statusByte, bool smfOnly)
}
public Melanchall.DryWetMidi.Core.EventsCollection : object {
internal List`1<MidiEvent> _events
private bool <IsReadOnly>k__BackingField
public MidiEvent Item
public int Count
public bool IsReadOnly
public MidiEvent get_Item(int index)
public void set_Item(int index, MidiEvent value)
public int get_Count()
public bool get_IsReadOnly()
public void Add(MidiEvent midiEvent)
public void AddRange(IEnumerable`1<MidiEvent> events)
public void Insert(int index, MidiEvent midiEvent)
public void InsertRange(int index, IEnumerable`1<MidiEvent> midiEvents)
public bool Remove(MidiEvent midiEvent)
public void RemoveAt(int index)
public int RemoveAll(Predicate`1<MidiEvent> match)
public int IndexOf(MidiEvent midiEvent)
public void Clear()
public IEnumerator`1<MidiEvent> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool Contains(MidiEvent item)
public void CopyTo(MidiEvent[] array, int arrayIndex)
}
internal Melanchall.DryWetMidi.Core.EventsCollectionEquality : object {
public bool Equals(EventsCollection eventsCollection1, EventsCollection eventsCollection2, MidiEventEqualityCheckSettings settings, String& message)
}
public Melanchall.DryWetMidi.Core.EventType : object {
private Type <Type>k__BackingField
private byte <StatusByte>k__BackingField
public Type Type
public byte StatusByte
public void .ctor(Type type, byte statusByte)
public Type get_Type()
public byte get_StatusByte()
}
public Melanchall.DryWetMidi.Core.EventTypesCollection : object {
private Dictionary`2<Type, byte> _statusBytes
private Dictionary`2<byte, Type> _types
public void Add(Type type, byte statusByte)
public bool TryGetType(byte statusByte, Type& type)
public bool TryGetStatusByte(Type type, Byte& statusByte)
public IEnumerator`1<EventType> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
internal Melanchall.DryWetMidi.Core.EventWriterFactory : object {
private IEventWriter MetaEventWriter
private IEventWriter ChannelEventWriter
private IEventWriter SysExEventWriter
private IEventWriter SystemRealTimeEventWriter
private IEventWriter SystemCommonEventWriter
internal IEventWriter GetWriter(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.ExtraTrackChunkPolicy : Enum {
public byte value__
public ExtraTrackChunkPolicy Read
public ExtraTrackChunkPolicy Skip
}
public Melanchall.DryWetMidi.Core.FfStatusBytePolicy : Enum {
public int value__
public FfStatusBytePolicy ReadAsResetEvent
public FfStatusBytePolicy ReadAsMetaEvent
}
internal Melanchall.DryWetMidi.Core.FileUtilities : object {
private UInt32 GENERIC_READ
private UInt32 GENERIC_WRITE
private UInt32 CREATE_NEW
private UInt32 CREATE_ALWAYS
private UInt32 OPEN_EXISTING
private UInt32 FILE_SHARE_NONE
private SafeFileHandle CreateFile(string lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, IntPtr lpSecurityAttributes, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, IntPtr hTemplateFile)
internal FileStream OpenFileForRead(string filePath)
internal FileStream OpenFileForWrite(string filePath, bool overwriteFile)
private SafeFileHandle GetFileHandle(string filePath, UInt32 fileAccess, UInt32 creationDisposition)
}
internal Melanchall.DryWetMidi.Core.HeaderChunk : MidiChunk {
public string Id
private ushort <FileFormat>k__BackingField
private TimeDivision <TimeDivision>k__BackingField
private ushort <TracksNumber>k__BackingField
public ushort FileFormat
public TimeDivision TimeDivision
public ushort TracksNumber
public ushort get_FileFormat()
public void set_FileFormat(ushort value)
public TimeDivision get_TimeDivision()
public void set_TimeDivision(TimeDivision value)
public ushort get_TracksNumber()
public void set_TracksNumber(ushort value)
public MidiChunk Clone()
public string ToString()
protected void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected UInt32 GetContentSize(WritingSettings settings)
}
internal Melanchall.DryWetMidi.Core.IChunksConverter {
public IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks)
}
internal Melanchall.DryWetMidi.Core.IEventReader {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
}
internal Melanchall.DryWetMidi.Core.IEventWriter {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.InstrumentNameEvent : BaseTextEvent {
public void .ctor(string instrumentName)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValueException : MidiException {
private MidiEventType <EventType>k__BackingField
private byte <Value>k__BackingField
public MidiEventType EventType
public byte Value
internal void .ctor(MidiEventType eventType, byte value)
public MidiEventType get_EventType()
public byte get_Value()
}
public Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValuePolicy : Enum {
public byte value__
public InvalidChannelEventParameterValuePolicy Abort
public InvalidChannelEventParameterValuePolicy ReadValid
public InvalidChannelEventParameterValuePolicy SnapToLimits
}
public Melanchall.DryWetMidi.Core.InvalidChunkSizeException : MidiException {
private string <ChunkId>k__BackingField
private long <ExpectedSize>k__BackingField
private long <ActualSize>k__BackingField
public string ChunkId
public long ExpectedSize
public long ActualSize
internal void .ctor(string chunkId, long expectedSize, long actualSize)
public string get_ChunkId()
public long get_ExpectedSize()
public long get_ActualSize()
}
public Melanchall.DryWetMidi.Core.InvalidChunkSizePolicy : Enum {
public byte value__
public InvalidChunkSizePolicy Abort
public InvalidChunkSizePolicy Ignore
}
public Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValueException : MidiException {
private MidiEventType <EventType>k__BackingField
private string <PropertyName>k__BackingField
private int <Value>k__BackingField
public MidiEventType EventType
public string PropertyName
public int Value
internal void .ctor(MidiEventType eventType, string propertyName, int value)
public MidiEventType get_EventType()
public string get_PropertyName()
public int get_Value()
}
public Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValuePolicy : Enum {
public int value__
public InvalidMetaEventParameterValuePolicy Abort
public InvalidMetaEventParameterValuePolicy SnapToLimits
}
public Melanchall.DryWetMidi.Core.InvalidMidiTimeCodeComponentException : MidiException {
private byte <MidiTimeCodeComponent>k__BackingField
public byte MidiTimeCodeComponent
internal void .ctor(byte midiTimeCodeComponent)
public byte get_MidiTimeCodeComponent()
}
public Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValueException : MidiException {
private MidiEventType <EventType>k__BackingField
private string <ComponentName>k__BackingField
private int <ComponentValue>k__BackingField
public MidiEventType EventType
public string ComponentName
public int ComponentValue
internal void .ctor(MidiEventType eventType, string componentName, int componentValue)
public MidiEventType get_EventType()
public string get_ComponentName()
public int get_ComponentValue()
}
public Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValuePolicy : Enum {
public int value__
public InvalidSystemCommonEventParameterValuePolicy Abort
public InvalidSystemCommonEventParameterValuePolicy SnapToLimits
}
public Melanchall.DryWetMidi.Core.KeySignatureEvent : MetaEvent {
public sbyte DefaultKey
public byte DefaultScale
public sbyte MinKey
public sbyte MaxKey
public byte MinScale
public byte MaxScale
private sbyte _key
private byte _scale
public sbyte Key
public byte Scale
public void .ctor(sbyte key, byte scale)
public sbyte get_Key()
public void set_Key(sbyte value)
public byte get_Scale()
public void set_Scale(byte value)
private int ProcessValue(int value, string property, int min, int max, InvalidMetaEventParameterValuePolicy policy)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.LyricEvent : BaseTextEvent {
public void .ctor(string text)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.MarkerEvent : BaseTextEvent {
public void .ctor(string text)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.MetaEvent : MidiEvent {
internal void .ctor(MidiEventType eventType)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
public Byte[] GetStandardMetaEventStatusBytes()
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
}
internal Melanchall.DryWetMidi.Core.MetaEventReader : object {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
private bool IsMetaEventType(Type type)
}
internal Melanchall.DryWetMidi.Core.MetaEventWriter : object {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.MidiChunk : object {
public int IdLength
private string <ChunkId>k__BackingField
public string ChunkId
protected void .ctor(string id)
public string get_ChunkId()
public MidiChunk Clone()
public String[] GetStandardChunkIds()
public bool Equals(MidiChunk chunk1, MidiChunk chunk2)
public bool Equals(MidiChunk chunk1, MidiChunk chunk2, String& message)
public bool Equals(MidiChunk chunk1, MidiChunk chunk2, MidiChunkEqualityCheckSettings settings)
public bool Equals(MidiChunk chunk1, MidiChunk chunk2, MidiChunkEqualityCheckSettings settings, String& message)
internal void Read(MidiReader reader, ReadingSettings settings)
internal void Write(MidiWriter writer, WritingSettings settings)
protected void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected UInt32 GetContentSize(WritingSettings settings)
}
internal Melanchall.DryWetMidi.Core.MidiChunkEquality : object {
public bool Equals(MidiChunk midiChunk1, MidiChunk midiChunk2, MidiChunkEqualityCheckSettings settings, String& message)
}
public Melanchall.DryWetMidi.Core.MidiChunkEqualityCheckSettings : object {
private MidiEventEqualityCheckSettings <EventEqualityCheckSettings>k__BackingField
public MidiEventEqualityCheckSettings EventEqualityCheckSettings
public MidiEventEqualityCheckSettings get_EventEqualityCheckSettings()
public void set_EventEqualityCheckSettings(MidiEventEqualityCheckSettings value)
}
public Melanchall.DryWetMidi.Core.MidiEvent : object {
public int UnknownContentSize
internal long _deltaTime
private MidiEventType <EventType>k__BackingField
private bool <Flag>k__BackingField
public MidiEventType EventType
public long DeltaTime
internal bool Flag
public void .ctor(MidiEventType eventType)
public MidiEventType get_EventType()
public long get_DeltaTime()
public void set_DeltaTime(long value)
internal bool get_Flag()
internal void set_Flag(bool value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public MidiEvent Clone()
public bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2)
public bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, String& message)
public bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, MidiEventEqualityCheckSettings settings)
public bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, MidiEventEqualityCheckSettings settings, String& message)
}
internal Melanchall.DryWetMidi.Core.MidiEventEquality : object {
private Dictionary`2<MidiEventType, Func`3<MidiEvent, MidiEvent, bool>> Comparers
public bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, MidiEventEqualityCheckSettings settings, String& message)
}
public Melanchall.DryWetMidi.Core.MidiEventEqualityCheckSettings : object {
private StringComparison _textComparison
private bool <CompareDeltaTimes>k__BackingField
public bool CompareDeltaTimes
public StringComparison TextComparison
public bool get_CompareDeltaTimes()
public void set_CompareDeltaTimes(bool value)
public StringComparison get_TextComparison()
public void set_TextComparison(StringComparison value)
}
public Melanchall.DryWetMidi.Core.MidiEventToBytesConverter : object {
private MemoryStream _dataBytesStream
private MidiWriter _midiWriter
private WritingSettings _writingSettings
private bool _disposed
private bool <WriteDeltaTimes>k__BackingField
public bool UseRunningStatus
public bool NoteOffAsSilentNoteOn
public EventTypesCollection CustomMetaEventTypes
public Encoding TextEncoding
public bool WriteDeltaTimes
public void .ctor(int capacity)
public bool get_UseRunningStatus()
public void set_UseRunningStatus(bool value)
public bool get_NoteOffAsSilentNoteOn()
public void set_NoteOffAsSilentNoteOn(bool value)
public EventTypesCollection get_CustomMetaEventTypes()
public void set_CustomMetaEventTypes(EventTypesCollection value)
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public bool get_WriteDeltaTimes()
public void set_WriteDeltaTimes(bool value)
public Byte[] Convert(MidiEvent midiEvent)
public Byte[] Convert(MidiEvent midiEvent, int minSize)
public Byte[] Convert(IEnumerable`1<MidiEvent> midiEvents)
private Byte[] GetBytes(int minSize)
private void PrepareStream()
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Core.MidiEventType : Enum {
public byte value__
public MidiEventType NormalSysEx
public MidiEventType EscapeSysEx
public MidiEventType SequenceNumber
public MidiEventType Text
public MidiEventType CopyrightNotice
public MidiEventType SequenceTrackName
public MidiEventType InstrumentName
public MidiEventType Lyric
public MidiEventType Marker
public MidiEventType CuePoint
public MidiEventType ProgramName
public MidiEventType DeviceName
public MidiEventType ChannelPrefix
public MidiEventType PortPrefix
public MidiEventType EndOfTrack
public MidiEventType SetTempo
public MidiEventType SmpteOffset
public MidiEventType TimeSignature
public MidiEventType KeySignature
public MidiEventType SequencerSpecific
public MidiEventType UnknownMeta
public MidiEventType CustomMeta
public MidiEventType NoteOff
public MidiEventType NoteOn
public MidiEventType NoteAftertouch
public MidiEventType ControlChange
public MidiEventType ProgramChange
public MidiEventType ChannelAftertouch
public MidiEventType PitchBend
public MidiEventType TimingClock
public MidiEventType Start
public MidiEventType Continue
public MidiEventType Stop
public MidiEventType ActiveSensing
public MidiEventType Reset
public MidiEventType MidiTimeCode
public MidiEventType SongPositionPointer
public MidiEventType SongSelect
public MidiEventType TuneRequest
}
public Melanchall.DryWetMidi.Core.MidiFile : object {
private string RiffChunkId
private int RmidPreambleSize
internal Nullable`1<ushort> _originalFormat
private TimeDivision <TimeDivision>k__BackingField
private ChunksCollection <Chunks>k__BackingField
public TimeDivision TimeDivision
public ChunksCollection Chunks
public MidiFileFormat OriginalFormat
public void .ctor(IEnumerable`1<MidiChunk> chunks)
public void .ctor(MidiChunk[] chunks)
public TimeDivision get_TimeDivision()
public void set_TimeDivision(TimeDivision value)
public ChunksCollection get_Chunks()
public MidiFileFormat get_OriginalFormat()
internal void set_OriginalFormat(MidiFileFormat value)
public MidiFile Read(string filePath, ReadingSettings settings)
public void Write(string filePath, bool overwriteFile, MidiFileFormat format, WritingSettings settings)
public MidiFile Read(Stream stream, ReadingSettings settings)
public void Write(Stream stream, MidiFileFormat format, WritingSettings settings)
public MidiFile Clone()
public bool Equals(MidiFile midiFile1, MidiFile midiFile2)
public bool Equals(MidiFile midiFile1, MidiFile midiFile2, String& message)
public bool Equals(MidiFile midiFile1, MidiFile midiFile2, MidiFileEqualityCheckSettings settings)
public bool Equals(MidiFile midiFile1, MidiFile midiFile2, MidiFileEqualityCheckSettings settings, String& message)
private MidiChunk ReadChunk(MidiReader reader, ReadingSettings settings, int actualTrackChunksCount, Nullable`1<int> expectedTrackChunksCount)
private void ReactOnUnexpectedTrackChunksCount(UnexpectedTrackChunksCountPolicy policy, int actualTrackChunksCount, int expectedTrackChunksCount)
private void ReactOnNotEnoughBytes(NotEnoughBytesPolicy policy, Exception exception)
private MidiChunk TryCreateChunk(string chunkId, ChunkTypesCollection chunksTypes)
private bool IsChunkType(Type type)
}
internal Melanchall.DryWetMidi.Core.MidiFileEquality : object {
public bool Equals(MidiFile midiFile1, MidiFile midiFile2, MidiFileEqualityCheckSettings settings, String& message)
}
public Melanchall.DryWetMidi.Core.MidiFileEqualityCheckSettings : object {
private bool <CompareOriginalFormat>k__BackingField
private MidiChunkEqualityCheckSettings <ChunkEqualityCheckSettings>k__BackingField
public bool CompareOriginalFormat
public MidiChunkEqualityCheckSettings ChunkEqualityCheckSettings
public bool get_CompareOriginalFormat()
public void set_CompareOriginalFormat(bool value)
public MidiChunkEqualityCheckSettings get_ChunkEqualityCheckSettings()
public void set_ChunkEqualityCheckSettings(MidiChunkEqualityCheckSettings value)
}
public Melanchall.DryWetMidi.Core.MidiFileFormat : Enum {
public ushort value__
public MidiFileFormat SingleTrack
public MidiFileFormat MultiTrack
public MidiFileFormat MultiSequence
}
public Melanchall.DryWetMidi.Core.MidiFileUtilities : object {
public IEnumerable`1<FourBitNumber> GetChannels(MidiFile midiFile)
internal IEnumerable`1<MidiEvent> GetEvents(MidiFile midiFile)
}
public Melanchall.DryWetMidi.Core.MidiReader : object {
private Byte[] EmptyByteArray
private ReaderSettings _settings
private Stream _stream
private bool _isStreamWrapped
private bool _useBuffering
private Byte[] _buffer
private int _bufferSize
private int _bufferPosition
private long _bufferStart
private long _position
private bool _disposed
private long <Length>k__BackingField
public long Position
public long Length
public bool EndReached
public void .ctor(Stream stream, ReaderSettings settings)
public long get_Position()
public void set_Position(long value)
public long get_Length()
public bool get_EndReached()
public byte ReadByte()
public sbyte ReadSByte()
public Byte[] ReadBytes(int count)
public ushort ReadWord()
public UInt32 ReadDword()
public short ReadInt16()
public string ReadString(int count)
public int ReadVlqNumber()
public long ReadVlqLongNumber()
public UInt32 Read3ByteDword()
private Byte[] ReadBytesInternal(int count)
private Byte[] ReadBytesWithBuffering(int count)
private Byte[] ReadBytesFromBuffer(int count)
private Byte[] ReadBytesWithoutBuffering(int count)
private bool EnsureBufferIsReadyForReading()
private void PrepareBuffer()
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Core.MidiTimeCodeComponent : Enum {
public byte value__
public MidiTimeCodeComponent FramesLsb
public MidiTimeCodeComponent FramesMsb
public MidiTimeCodeComponent SecondsLsb
public MidiTimeCodeComponent SecondsMsb
public MidiTimeCodeComponent MinutesLsb
public MidiTimeCodeComponent MinutesMsb
public MidiTimeCodeComponent HoursLsb
public MidiTimeCodeComponent HoursMsbAndTimeCodeType
}
public Melanchall.DryWetMidi.Core.MidiTimeCodeEvent : SystemCommonEvent {
private Dictionary`2<MidiTimeCodeComponent, byte> ComponentValueMasks
private MidiTimeCodeComponent <Component>k__BackingField
private FourBitNumber <ComponentValue>k__BackingField
public MidiTimeCodeComponent Component
public FourBitNumber ComponentValue
public void .ctor(MidiTimeCodeComponent component, FourBitNumber componentValue)
public MidiTimeCodeComponent get_Component()
public void set_Component(MidiTimeCodeComponent value)
public FourBitNumber get_ComponentValue()
public void set_ComponentValue(FourBitNumber value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.MidiTimeCodeType : Enum {
public byte value__
public MidiTimeCodeType TwentyFour
public MidiTimeCodeType TwentyFive
public MidiTimeCodeType ThirtyDrop
public MidiTimeCodeType Thirty
}
public Melanchall.DryWetMidi.Core.MidiWriter : object {
private WriterSettings _settings
private Stream _stream
private Byte[] _numberBuffer
private bool _useBuffering
private Byte[] _buffer
private int _bufferPosition
private bool _disposed
public void .ctor(Stream stream, WriterSettings settings)
public void WriteByte(byte value)
public void WriteBytes(Byte[] bytes)
public void WriteSByte(sbyte value)
public void WriteWord(ushort value)
public void WriteDword(UInt32 value)
public void WriteInt16(short value)
public void WriteString(string value)
public void WriteVlqNumber(int value)
public void WriteVlqNumber(long value)
public void Write3ByteDword(UInt32 value)
private void PrepareBuffer()
private void WriteBytes(Byte[] bytes, int offset, int length)
private void FlushBuffer()
private void WriteBytesWithBuffering(Byte[] bytes, int offset, int length)
private void WriteBytesToBuffer(Byte[] bytes, int offset, int length)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Core.MissedEndOfTrackPolicy : Enum {
public byte value__
public MissedEndOfTrackPolicy Ignore
public MissedEndOfTrackPolicy Abort
}
internal Melanchall.DryWetMidi.Core.MultiSequenceChunksConverter : object {
public IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks)
private Nullable`1<ushort> GetSequenceNumber(TrackChunk trackChunk)
}
internal Melanchall.DryWetMidi.Core.MultiTrackChunksConverter : object {
private int ChannelsCount
public IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks)
}
public Melanchall.DryWetMidi.Core.NoHeaderChunkPolicy : Enum {
public int value__
public NoHeaderChunkPolicy Abort
public NoHeaderChunkPolicy Ignore
}
public Melanchall.DryWetMidi.Core.NormalSysExEvent : SysExEvent {
public void .ctor(Byte[] data)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.NoteAftertouchEvent : ChannelEvent {
public SevenBitNumber NoteNumber
public SevenBitNumber AftertouchValue
public void .ctor(SevenBitNumber noteNumber, SevenBitNumber aftertouchValue)
public SevenBitNumber get_NoteNumber()
public void set_NoteNumber(SevenBitNumber value)
public SevenBitNumber get_AftertouchValue()
public void set_AftertouchValue(SevenBitNumber value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.NoteEvent : ChannelEvent {
public SevenBitNumber NoteNumber
public SevenBitNumber Velocity
protected void .ctor(MidiEventType eventType)
protected void .ctor(MidiEventType eventType, SevenBitNumber noteNumber, SevenBitNumber velocity)
public SevenBitNumber get_NoteNumber()
public void set_NoteNumber(SevenBitNumber value)
public SevenBitNumber get_Velocity()
public void set_Velocity(SevenBitNumber value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
}
public Melanchall.DryWetMidi.Core.NoteEventUtilities : object {
public NoteName GetNoteName(NoteEvent noteEvent)
public int GetNoteOctave(NoteEvent noteEvent)
public void SetNoteNumber(NoteEvent noteEvent, NoteName noteName, int octave)
public bool IsNoteOnCorrespondToNoteOff(NoteOnEvent noteOnEvent, NoteOffEvent noteOffEvent)
}
public Melanchall.DryWetMidi.Core.NotEnoughBytesException : MidiException {
private long <ExpectedCount>k__BackingField
private long <ActualCount>k__BackingField
public long ExpectedCount
public long ActualCount
internal void .ctor(string message, Exception innerException)
internal void .ctor(string message, long expectedCount, long actualCount)
public long get_ExpectedCount()
public long get_ActualCount()
}
public Melanchall.DryWetMidi.Core.NotEnoughBytesPolicy : Enum {
public int value__
public NotEnoughBytesPolicy Abort
public NotEnoughBytesPolicy Ignore
}
public Melanchall.DryWetMidi.Core.NoteOffEvent : NoteEvent {
public void .ctor(SevenBitNumber noteNumber, SevenBitNumber velocity)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.NoteOnEvent : NoteEvent {
public void .ctor(SevenBitNumber noteNumber, SevenBitNumber velocity)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.PitchBendEvent : ChannelEvent {
public ushort MinPitchValue
public ushort MaxPitchValue
public ushort PitchValue
public void .ctor(ushort pitchValue)
public ushort get_PitchValue()
public void set_PitchValue(ushort value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.PortPrefixEvent : MetaEvent {
private byte <Port>k__BackingField
public byte Port
public void .ctor(byte port)
public byte get_Port()
public void set_Port(byte value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ProgramChangeEvent : ChannelEvent {
public SevenBitNumber ProgramNumber
public void .ctor(SevenBitNumber programNumber)
public SevenBitNumber get_ProgramNumber()
public void set_ProgramNumber(SevenBitNumber value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ProgramNameEvent : BaseTextEvent {
public void .ctor(string programName)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.ReaderSettings : object {
private int _nonSeekableStreamBufferSize
private int _nonSeekableStreamIncrementalBytesReadingThreshold
private int _nonSeekableStreamIncrementalBytesReadingStep
private int _bufferSize
private BufferingPolicy _bufferingPolicy
private Byte[] <Buffer>k__BackingField
public int NonSeekableStreamBufferSize
public int NonSeekableStreamIncrementalBytesReadingThreshold
public int NonSeekableStreamIncrementalBytesReadingStep
public BufferingPolicy BufferingPolicy
public int BufferSize
public Byte[] Buffer
public int get_NonSeekableStreamBufferSize()
public void set_NonSeekableStreamBufferSize(int value)
public int get_NonSeekableStreamIncrementalBytesReadingThreshold()
public void set_NonSeekableStreamIncrementalBytesReadingThreshold(int value)
public int get_NonSeekableStreamIncrementalBytesReadingStep()
public void set_NonSeekableStreamIncrementalBytesReadingStep(int value)
public BufferingPolicy get_BufferingPolicy()
public void set_BufferingPolicy(BufferingPolicy value)
public int get_BufferSize()
public void set_BufferSize(int value)
public Byte[] get_Buffer()
public void set_Buffer(Byte[] value)
}
public Melanchall.DryWetMidi.Core.ReadingSettings : object {
private UnexpectedTrackChunksCountPolicy _unexpectedTrackChunksCountPolicy
private ExtraTrackChunkPolicy _extraTrackChunkPolicy
private UnknownChunkIdPolicy _unknownChunkIdPolicy
private MissedEndOfTrackPolicy _missedEndOfTrackPolicy
private SilentNoteOnPolicy _silentNoteOnPolicy
private InvalidChunkSizePolicy _invalidChunkSizePolicy
private UnknownFileFormatPolicy _unknownFileFormatPolicy
private UnknownChannelEventPolicy _unknownChannelEventPolicy
private InvalidChannelEventParameterValuePolicy _invalidChannelEventParameterValuePolicy
private InvalidMetaEventParameterValuePolicy _invalidMetaEventParameterValuePolicy
private InvalidSystemCommonEventParameterValuePolicy _invalidSystemCommonEventParameterValuePolicy
private NotEnoughBytesPolicy _notEnoughBytesPolicy
private NoHeaderChunkPolicy _noHeaderChunkPolicy
private ZeroLengthDataPolicy _zeroLengthDataPolicy
private EndOfTrackStoringPolicy _endOfTrackStoringPolicy
private UnknownChannelEventCallback <UnknownChannelEventCallback>k__BackingField
private ChunkTypesCollection <CustomChunkTypes>k__BackingField
private EventTypesCollection <CustomMetaEventTypes>k__BackingField
private Encoding <TextEncoding>k__BackingField
private DecodeTextCallback <DecodeTextCallback>k__BackingField
private ReaderSettings <ReaderSettings>k__BackingField
public UnexpectedTrackChunksCountPolicy UnexpectedTrackChunksCountPolicy
public ExtraTrackChunkPolicy ExtraTrackChunkPolicy
public UnknownChunkIdPolicy UnknownChunkIdPolicy
public MissedEndOfTrackPolicy MissedEndOfTrackPolicy
public SilentNoteOnPolicy SilentNoteOnPolicy
public InvalidChunkSizePolicy InvalidChunkSizePolicy
public UnknownFileFormatPolicy UnknownFileFormatPolicy
public UnknownChannelEventPolicy UnknownChannelEventPolicy
public UnknownChannelEventCallback UnknownChannelEventCallback
public InvalidChannelEventParameterValuePolicy InvalidChannelEventParameterValuePolicy
public InvalidMetaEventParameterValuePolicy InvalidMetaEventParameterValuePolicy
public InvalidSystemCommonEventParameterValuePolicy InvalidSystemCommonEventParameterValuePolicy
public NotEnoughBytesPolicy NotEnoughBytesPolicy
public NoHeaderChunkPolicy NoHeaderChunkPolicy
public ChunkTypesCollection CustomChunkTypes
public EventTypesCollection CustomMetaEventTypes
public Encoding TextEncoding
public DecodeTextCallback DecodeTextCallback
public ZeroLengthDataPolicy ZeroLengthDataPolicy
public EndOfTrackStoringPolicy EndOfTrackStoringPolicy
public ReaderSettings ReaderSettings
public UnexpectedTrackChunksCountPolicy get_UnexpectedTrackChunksCountPolicy()
public void set_UnexpectedTrackChunksCountPolicy(UnexpectedTrackChunksCountPolicy value)
public ExtraTrackChunkPolicy get_ExtraTrackChunkPolicy()
public void set_ExtraTrackChunkPolicy(ExtraTrackChunkPolicy value)
public UnknownChunkIdPolicy get_UnknownChunkIdPolicy()
public void set_UnknownChunkIdPolicy(UnknownChunkIdPolicy value)
public MissedEndOfTrackPolicy get_MissedEndOfTrackPolicy()
public void set_MissedEndOfTrackPolicy(MissedEndOfTrackPolicy value)
public SilentNoteOnPolicy get_SilentNoteOnPolicy()
public void set_SilentNoteOnPolicy(SilentNoteOnPolicy value)
public InvalidChunkSizePolicy get_InvalidChunkSizePolicy()
public void set_InvalidChunkSizePolicy(InvalidChunkSizePolicy value)
public UnknownFileFormatPolicy get_UnknownFileFormatPolicy()
public void set_UnknownFileFormatPolicy(UnknownFileFormatPolicy value)
public UnknownChannelEventPolicy get_UnknownChannelEventPolicy()
public void set_UnknownChannelEventPolicy(UnknownChannelEventPolicy value)
public UnknownChannelEventCallback get_UnknownChannelEventCallback()
public void set_UnknownChannelEventCallback(UnknownChannelEventCallback value)
public InvalidChannelEventParameterValuePolicy get_InvalidChannelEventParameterValuePolicy()
public void set_InvalidChannelEventParameterValuePolicy(InvalidChannelEventParameterValuePolicy value)
public InvalidMetaEventParameterValuePolicy get_InvalidMetaEventParameterValuePolicy()
public void set_InvalidMetaEventParameterValuePolicy(InvalidMetaEventParameterValuePolicy value)
public InvalidSystemCommonEventParameterValuePolicy get_InvalidSystemCommonEventParameterValuePolicy()
public void set_InvalidSystemCommonEventParameterValuePolicy(InvalidSystemCommonEventParameterValuePolicy value)
public NotEnoughBytesPolicy get_NotEnoughBytesPolicy()
public void set_NotEnoughBytesPolicy(NotEnoughBytesPolicy value)
public NoHeaderChunkPolicy get_NoHeaderChunkPolicy()
public void set_NoHeaderChunkPolicy(NoHeaderChunkPolicy value)
public ChunkTypesCollection get_CustomChunkTypes()
public void set_CustomChunkTypes(ChunkTypesCollection value)
public EventTypesCollection get_CustomMetaEventTypes()
public void set_CustomMetaEventTypes(EventTypesCollection value)
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public DecodeTextCallback get_DecodeTextCallback()
public void set_DecodeTextCallback(DecodeTextCallback value)
public ZeroLengthDataPolicy get_ZeroLengthDataPolicy()
public void set_ZeroLengthDataPolicy(ZeroLengthDataPolicy value)
public EndOfTrackStoringPolicy get_EndOfTrackStoringPolicy()
public void set_EndOfTrackStoringPolicy(EndOfTrackStoringPolicy value)
public ReaderSettings get_ReaderSettings()
public void set_ReaderSettings(ReaderSettings value)
}
public Melanchall.DryWetMidi.Core.ResetEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SequenceNumberEvent : MetaEvent {
private ushort <Number>k__BackingField
public ushort Number
public void .ctor(ushort number)
public ushort get_Number()
public void set_Number(ushort value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SequencerSpecificEvent : MetaEvent {
private Byte[] <Data>k__BackingField
public Byte[] Data
public void .ctor(Byte[] data)
public Byte[] get_Data()
public void set_Data(Byte[] value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SequenceTrackNameEvent : BaseTextEvent {
public void .ctor(string name)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SetTempoEvent : MetaEvent {
public long DefaultMicrosecondsPerQuarterNote
public long MinMicrosecondsPerQuarterNote
public long MaxMicrosecondsPerQuarterNote
private long _microsecondsPerBeat
public long MicrosecondsPerQuarterNote
public void .ctor(long microsecondsPerQuarterNote)
public long get_MicrosecondsPerQuarterNote()
public void set_MicrosecondsPerQuarterNote(long value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SilentNoteOnPolicy : Enum {
public byte value__
public SilentNoteOnPolicy NoteOff
public SilentNoteOnPolicy NoteOn
}
internal Melanchall.DryWetMidi.Core.SingleTrackChunksConverter : object {
public IEnumerable`1<MidiChunk> Convert(IEnumerable`1<MidiChunk> chunks)
}
public Melanchall.DryWetMidi.Core.SmfConstants : object {
public Encoding DefaultTextEncoding
public Encoding get_DefaultTextEncoding()
}
internal Melanchall.DryWetMidi.Core.SmpteData : object {
private byte MaxHours
private byte MaxMinutes
private byte MaxSeconds
private byte MaxSubFrames
private int FormatMask
private int FormatOffset
private int HoursMask
private Dictionary`2<SmpteFormat, byte> MaxFrames
private SmpteFormat[] Formats
private SmpteFormat _format
private byte _hours
private byte _minutes
private byte _seconds
private byte _frames
private byte _subFrames
public SmpteFormat Format
public byte Hours
public byte Minutes
public byte Seconds
public byte Frames
public byte SubFrames
public void .ctor(SmpteFormat format, byte hours, byte minutes, byte seconds, byte frames, byte subFrames)
public SmpteFormat get_Format()
public void set_Format(SmpteFormat value)
public byte get_Hours()
public void set_Hours(byte value)
public byte get_Minutes()
public void set_Minutes(byte value)
public byte get_Seconds()
public void set_Seconds(byte value)
public byte get_Frames()
public void set_Frames(byte value)
public byte get_SubFrames()
public void set_SubFrames(byte value)
public SmpteData Read(Func`1<byte> byteReader, Func`4<byte, string, byte, byte> valueProcessor)
public void Write(Action`1<byte> byteWriter)
internal SmpteFormat GetFormat(byte formatAndHours)
internal byte GetHours(byte formatAndHours)
internal byte GetFormatAndHours()
internal byte GetFormatAndHours(SmpteFormat smpteFormat, byte hours)
}
public Melanchall.DryWetMidi.Core.SmpteOffsetEvent : MetaEvent {
private SmpteData _smpteData
public SmpteFormat Format
public byte Hours
public byte Minutes
public byte Seconds
public byte Frames
public byte SubFrames
public void .ctor(SmpteFormat format, byte hours, byte minutes, byte seconds, byte frames, byte subFrames)
public SmpteFormat get_Format()
public void set_Format(SmpteFormat value)
public byte get_Hours()
public void set_Hours(byte value)
public byte get_Minutes()
public void set_Minutes(byte value)
public byte get_Seconds()
public void set_Seconds(byte value)
public byte get_Frames()
public void set_Frames(byte value)
public byte get_SubFrames()
public void set_SubFrames(byte value)
private byte ProcessValue(byte value, string property, byte max, InvalidMetaEventParameterValuePolicy policy)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SmpteTimeDivision : TimeDivision {
private SmpteFormat <Format>k__BackingField
private byte <Resolution>k__BackingField
public SmpteFormat Format
public byte Resolution
public void .ctor(SmpteFormat format, byte resolution)
public SmpteFormat get_Format()
public byte get_Resolution()
public bool op_Equality(SmpteTimeDivision timeDivision1, SmpteTimeDivision timeDivision2)
public bool op_Inequality(SmpteTimeDivision timeDivision1, SmpteTimeDivision timeDivision2)
internal short ToInt16()
public TimeDivision Clone()
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Core.SongPositionPointerEvent : SystemCommonEvent {
private SevenBitNumber _lsb
private SevenBitNumber _msb
public ushort PointerValue
public void .ctor(ushort pointerValue)
public ushort get_PointerValue()
public void set_PointerValue(ushort value)
private SevenBitNumber ProcessValue(byte value, string property, InvalidSystemCommonEventParameterValuePolicy policy)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SongSelectEvent : SystemCommonEvent {
private SevenBitNumber <Number>k__BackingField
public SevenBitNumber Number
public void .ctor(SevenBitNumber number)
public SevenBitNumber get_Number()
public void set_Number(SevenBitNumber value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
internal Melanchall.DryWetMidi.Core.StandardChunkIds : object {
private String[] _ids
public String[] GetIds()
}
internal Melanchall.DryWetMidi.Core.StandardMetaEventStatusBytes : object {
private Byte[] _statusBytes
public Byte[] GetStatusBytes()
}
public Melanchall.DryWetMidi.Core.StartEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.StopEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.SysExEvent : MidiEvent {
public byte EndOfEventByte
private Byte[] <Data>k__BackingField
public bool Completed
public Byte[] Data
protected void .ctor(MidiEventType eventType)
public bool get_Completed()
public Byte[] get_Data()
public void set_Data(Byte[] value)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
}
internal Melanchall.DryWetMidi.Core.SysExEventReader : object {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
}
internal Melanchall.DryWetMidi.Core.SysExEventWriter : object {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.SystemCommonEvent : MidiEvent {
protected void .ctor(MidiEventType eventType)
}
internal Melanchall.DryWetMidi.Core.SystemCommonEventReader : object {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
}
internal Melanchall.DryWetMidi.Core.SystemCommonEventWriter : object {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.SystemRealTimeEvent : MidiEvent {
protected void .ctor(MidiEventType eventType)
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
}
internal Melanchall.DryWetMidi.Core.SystemRealTimeEventReader : object {
public MidiEvent Read(MidiReader reader, ReadingSettings settings, byte currentStatusByte)
}
internal Melanchall.DryWetMidi.Core.SystemRealTimeEventWriter : object {
public void Write(MidiEvent midiEvent, MidiWriter writer, WritingSettings settings, bool writeStatusByte)
public int CalculateSize(MidiEvent midiEvent, WritingSettings settings, bool writeStatusByte)
public byte GetStatusByte(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Core.TextEvent : BaseTextEvent {
public void .ctor(string text)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.TicksPerQuarterNoteTimeDivision : TimeDivision {
public short DefaultTicksPerQuarterNote
private short <TicksPerQuarterNote>k__BackingField
public short TicksPerQuarterNote
public void .ctor(short ticksPerQuarterNote)
public short get_TicksPerQuarterNote()
public bool op_Equality(TicksPerQuarterNoteTimeDivision timeDivision1, TicksPerQuarterNoteTimeDivision timeDivision2)
public bool op_Inequality(TicksPerQuarterNoteTimeDivision timeDivision1, TicksPerQuarterNoteTimeDivision timeDivision2)
internal short ToInt16()
public TimeDivision Clone()
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Core.TimeDivision : object {
internal short ToInt16()
public TimeDivision Clone()
}
internal Melanchall.DryWetMidi.Core.TimeDivisionFactory : object {
internal TimeDivision GetTimeDivision(short division)
}
public Melanchall.DryWetMidi.Core.TimeSignatureEvent : MetaEvent {
public byte DefaultNumerator
public byte DefaultDenominator
public byte DefaultClocksPerClick
public byte DefaultThirtySecondNotesPerBeat
private byte _denominator
private byte <Numerator>k__BackingField
private byte <ClocksPerClick>k__BackingField
private byte <ThirtySecondNotesPerBeat>k__BackingField
public byte Numerator
public byte Denominator
public byte ClocksPerClick
public byte ThirtySecondNotesPerBeat
public void .ctor(byte numerator, byte denominator)
public void .ctor(byte numerator, byte denominator, byte clocksPerClick, byte thirtySecondNotesPerBeat)
public byte get_Numerator()
public void set_Numerator(byte value)
public byte get_Denominator()
public void set_Denominator(byte value)
public byte get_ClocksPerClick()
public void set_ClocksPerClick(byte value)
public byte get_ThirtySecondNotesPerBeat()
public void set_ThirtySecondNotesPerBeat(byte value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.TimingClockEvent : SystemRealTimeEvent {
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.TooManyTrackChunksException : MidiException {
private int <TrackChunksCount>k__BackingField
public int TrackChunksCount
internal void .ctor(int trackChunksCount)
public int get_TrackChunksCount()
}
public Melanchall.DryWetMidi.Core.TrackChunk : MidiChunk {
public string Id
private EventsCollection <Events>k__BackingField
public EventsCollection Events
public void .ctor(IEnumerable`1<MidiEvent> events)
public void .ctor(MidiEvent[] events)
public EventsCollection get_Events()
public MidiChunk Clone()
protected void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected UInt32 GetContentSize(WritingSettings settings)
public string ToString()
private MidiEvent ReadEvent(MidiReader reader, ReadingSettings settings, Nullable`1& channelEventStatusByte, Int64& deltaTime)
private void ProcessEvents(WritingSettings settings, Action`3<IEventWriter, MidiEvent, bool> eventHandler)
private bool TrySkipDefaultSetTempo(MidiEvent midiEvent, Boolean& skip)
private bool TrySkipDefaultKeySignature(MidiEvent midiEvent, Boolean& skip)
private bool TrySkipDefaultTimeSignature(MidiEvent midiEvent, Boolean& skip)
}
public Melanchall.DryWetMidi.Core.TrackChunkUtilities : object {
public IEnumerable`1<TrackChunk> GetTrackChunks(MidiFile midiFile)
public TrackChunk Merge(IEnumerable`1<TrackChunk> trackChunks)
public IEnumerable`1<TrackChunk> Explode(TrackChunk trackChunk)
public IEnumerable`1<FourBitNumber> GetChannels(TrackChunk trackChunk)
public IEnumerable`1<FourBitNumber> GetChannels(IEnumerable`1<TrackChunk> trackChunks)
private IEnumerable`1<TrackChunk> ConvertTrackChunks(IEnumerable`1<TrackChunk> trackChunks, MidiFileFormat format)
}
public Melanchall.DryWetMidi.Core.TuneRequestEvent : SystemCommonEvent {
internal void Read(MidiReader reader, ReadingSettings settings, int size)
internal void Write(MidiWriter writer, WritingSettings settings)
internal int GetSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountException : MidiException {
private int <ExpectedCount>k__BackingField
private int <ActualCount>k__BackingField
public int ExpectedCount
public int ActualCount
internal void .ctor(int expectedCount, int actualCount)
public int get_ExpectedCount()
public int get_ActualCount()
}
public Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountPolicy : Enum {
public int value__
public UnexpectedTrackChunksCountPolicy Ignore
public UnexpectedTrackChunksCountPolicy Abort
}
public Melanchall.DryWetMidi.Core.UnknownChannelEventAction : object {
public UnknownChannelEventAction Abort
private UnknownChannelEventInstruction <Instruction>k__BackingField
private int <DataBytesToSkipCount>k__BackingField
public UnknownChannelEventInstruction Instruction
public int DataBytesToSkipCount
private void .ctor(UnknownChannelEventInstruction instruction, int dataBytesToSkipCount)
public UnknownChannelEventInstruction get_Instruction()
public int get_DataBytesToSkipCount()
public UnknownChannelEventAction SkipData(int dataBytesToSkipCount)
}
public Melanchall.DryWetMidi.Core.UnknownChannelEventCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public UnknownChannelEventAction Invoke(FourBitNumber statusByte, FourBitNumber channel)
public IAsyncResult BeginInvoke(FourBitNumber statusByte, FourBitNumber channel, AsyncCallback callback, object object)
public UnknownChannelEventAction EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Core.UnknownChannelEventException : MidiException {
private FourBitNumber <Channel>k__BackingField
private FourBitNumber <StatusByte>k__BackingField
public FourBitNumber Channel
public FourBitNumber StatusByte
internal void .ctor(FourBitNumber statusByte, FourBitNumber channel)
public FourBitNumber get_Channel()
public FourBitNumber get_StatusByte()
}
public Melanchall.DryWetMidi.Core.UnknownChannelEventInstruction : Enum {
public int value__
public UnknownChannelEventInstruction Abort
public UnknownChannelEventInstruction SkipData
}
public Melanchall.DryWetMidi.Core.UnknownChannelEventPolicy : Enum {
public int value__
public UnknownChannelEventPolicy Abort
public UnknownChannelEventPolicy SkipStatusByte
public UnknownChannelEventPolicy SkipStatusByteAndOneDataByte
public UnknownChannelEventPolicy SkipStatusByteAndTwoDataBytes
public UnknownChannelEventPolicy UseCallback
}
public Melanchall.DryWetMidi.Core.UnknownChunk : MidiChunk {
private Byte[] <Data>k__BackingField
public Byte[] Data
internal void .ctor(string id)
public Byte[] get_Data()
private void set_Data(Byte[] value)
public MidiChunk Clone()
protected void ReadContent(MidiReader reader, ReadingSettings settings, UInt32 size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected UInt32 GetContentSize(WritingSettings settings)
public string ToString()
}
public Melanchall.DryWetMidi.Core.UnknownChunkException : MidiException {
private string <ChunkId>k__BackingField
public string ChunkId
internal void .ctor(string chunkId)
public string get_ChunkId()
}
public Melanchall.DryWetMidi.Core.UnknownChunkIdPolicy : Enum {
public byte value__
public UnknownChunkIdPolicy ReadAsUnknownChunk
public UnknownChunkIdPolicy Skip
public UnknownChunkIdPolicy Abort
}
public Melanchall.DryWetMidi.Core.UnknownFileFormatException : MidiException {
private ushort <FileFormat>k__BackingField
public ushort FileFormat
internal void .ctor(ushort fileFormat)
public ushort get_FileFormat()
}
public Melanchall.DryWetMidi.Core.UnknownFileFormatPolicy : Enum {
public int value__
public UnknownFileFormatPolicy Ignore
public UnknownFileFormatPolicy Abort
}
public Melanchall.DryWetMidi.Core.UnknownMetaEvent : MetaEvent {
private byte <StatusByte>k__BackingField
private Byte[] <Data>k__BackingField
public byte StatusByte
public Byte[] Data
internal void .ctor(byte statusByte)
internal void .ctor(byte statusByte, Byte[] data)
public byte get_StatusByte()
public Byte[] get_Data()
private void set_Data(Byte[] value)
protected void ReadContent(MidiReader reader, ReadingSettings settings, int size)
protected void WriteContent(MidiWriter writer, WritingSettings settings)
protected int GetContentSize(WritingSettings settings)
protected MidiEvent CloneEvent()
public string ToString()
}
public Melanchall.DryWetMidi.Core.WriterSettings : object {
private int _bufferSize
private bool <UseBuffering>k__BackingField
public bool UseBuffering
public int BufferSize
public bool get_UseBuffering()
public void set_UseBuffering(bool value)
public int get_BufferSize()
public void set_BufferSize(int value)
}
public Melanchall.DryWetMidi.Core.WritingSettings : object {
private bool <UseRunningStatus>k__BackingField
private bool <NoteOffAsSilentNoteOn>k__BackingField
private bool <DeleteDefaultTimeSignature>k__BackingField
private bool <DeleteDefaultKeySignature>k__BackingField
private bool <DeleteDefaultSetTempo>k__BackingField
private bool <DeleteUnknownMetaEvents>k__BackingField
private bool <DeleteUnknownChunks>k__BackingField
private bool <WriteHeaderChunk>k__BackingField
private EventTypesCollection <CustomMetaEventTypes>k__BackingField
private Encoding <TextEncoding>k__BackingField
private WriterSettings <WriterSettings>k__BackingField
public bool UseRunningStatus
public bool NoteOffAsSilentNoteOn
public bool DeleteDefaultTimeSignature
public bool DeleteDefaultKeySignature
public bool DeleteDefaultSetTempo
public bool DeleteUnknownMetaEvents
public bool DeleteUnknownChunks
public bool WriteHeaderChunk
public EventTypesCollection CustomMetaEventTypes
public Encoding TextEncoding
public WriterSettings WriterSettings
public bool get_UseRunningStatus()
public void set_UseRunningStatus(bool value)
public bool get_NoteOffAsSilentNoteOn()
public void set_NoteOffAsSilentNoteOn(bool value)
public bool get_DeleteDefaultTimeSignature()
public void set_DeleteDefaultTimeSignature(bool value)
public bool get_DeleteDefaultKeySignature()
public void set_DeleteDefaultKeySignature(bool value)
public bool get_DeleteDefaultSetTempo()
public void set_DeleteDefaultSetTempo(bool value)
public bool get_DeleteUnknownMetaEvents()
public void set_DeleteUnknownMetaEvents(bool value)
public bool get_DeleteUnknownChunks()
public void set_DeleteUnknownChunks(bool value)
public bool get_WriteHeaderChunk()
public void set_WriteHeaderChunk(bool value)
public EventTypesCollection get_CustomMetaEventTypes()
public void set_CustomMetaEventTypes(EventTypesCollection value)
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public WriterSettings get_WriterSettings()
public void set_WriterSettings(WriterSettings value)
}
public Melanchall.DryWetMidi.Core.ZeroLengthDataPolicy : Enum {
public int value__
public ZeroLengthDataPolicy ReadAsEmptyObject
public ZeroLengthDataPolicy ReadAsNull
}
public Melanchall.DryWetMidi.Interaction.ArbitraryGrid : object {
private IEnumerable`1<ITimeSpan> <Times>k__BackingField
public IEnumerable`1<ITimeSpan> Times
public void .ctor(IEnumerable`1<ITimeSpan> times)
public void .ctor(ITimeSpan[] times)
public IEnumerable`1<ITimeSpan> get_Times()
public IEnumerable`1<long> GetTimes(TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpan : object {
private double FractionEpsilon
private long <Bars>k__BackingField
private double <Beats>k__BackingField
public long Bars
public double Beats
public void .ctor(long bars)
public void .ctor(long bars, double beats)
public long get_Bars()
public double get_Beats()
public bool TryParse(string input, BarBeatFractionTimeSpan& timeSpan)
public BarBeatFractionTimeSpan Parse(string input)
public bool op_Equality(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool op_Inequality(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public BarBeatFractionTimeSpan op_Addition(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public BarBeatFractionTimeSpan op_Subtraction(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool op_LessThan(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool op_GreaterThan(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool op_LessThanOrEqual(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool op_GreaterThanOrEqual(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object other)
public int CompareTo(BarBeatFractionTimeSpan other)
public bool Equals(BarBeatFractionTimeSpan other)
}
internal Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpanConverter : object {
private double FractionalBeatsEpsilon
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
private void CalculateComponents(long totalTicks, TimeSignature timeSignature, short ticksPerQuarterNote, Int64& bars, Int64& beats, Double& fraction)
private long ConvertFractionToTicks(double fraction, long beatLength)
}
internal Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpanParser : object {
private string BarsGroupName
private string BeatsGroupName
private string BarsGroup
private string BeatsGroup
private string Divider
private String[] Patterns
private string BarsIsOutOfRange
private string BeatsIsOutOfRange
internal ParsingResult TryParse(string input, BarBeatFractionTimeSpan& timeSpan)
}
public Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpan : object {
private long <Bars>k__BackingField
private long <Beats>k__BackingField
private long <Ticks>k__BackingField
public long Bars
public long Beats
public long Ticks
public void .ctor(long bars)
public void .ctor(long bars, long beats)
public void .ctor(long bars, long beats, long ticks)
public long get_Bars()
public long get_Beats()
public long get_Ticks()
public bool TryParse(string input, BarBeatTicksTimeSpan& timeSpan)
public BarBeatTicksTimeSpan Parse(string input)
public bool op_Equality(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool op_Inequality(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public BarBeatTicksTimeSpan op_Addition(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public BarBeatTicksTimeSpan op_Subtraction(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool op_LessThan(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool op_GreaterThan(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool op_LessThanOrEqual(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool op_GreaterThanOrEqual(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object other)
public int CompareTo(BarBeatTicksTimeSpan other)
public bool Equals(BarBeatTicksTimeSpan other)
}
internal Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpanConverter : object {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
private void CalculateComponents(long totalTicks, TimeSignature timeSignature, short ticksPerQuarterNote, Int64& bars, Int64& beats, Int64& ticks)
}
internal Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpanParser : object {
private string BarsGroupName
private string BeatsGroupName
private string TicksGroupName
private string BarsGroup
private string BeatsGroup
private string TicksGroup
private string Divider
private String[] Patterns
private string BarsIsOutOfRange
private string BeatsIsOutOfRange
private string TicksIsOutOfRange
internal ParsingResult TryParse(string input, BarBeatTicksTimeSpan& timeSpan)
}
public Melanchall.DryWetMidi.Interaction.BarBeatUtilities : object {
public int GetBarLength(long bars, TempoMap tempoMap)
public int GetBeatLength(long bars, TempoMap tempoMap)
internal int GetBarLength(TimeSignature timeSignature, short ticksPerQuarterNote)
internal int GetBeatLength(TimeSignature timeSignature, short ticksPerQuarterNote)
private Tuple`2<TimeSignature, short> GetTimeSignatureAndTicksPerQuarterNote(long bars, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.ChannelCoarseTuningParameter : RegisteredParameter {
public sbyte MinHalfSteps
public sbyte MaxHalfSteps
private sbyte _halfSteps
public sbyte HalfSteps
public void .ctor(sbyte halfSteps)
public void .ctor(sbyte halfSteps, ParameterValueType valueType)
public sbyte get_HalfSteps()
public void set_HalfSteps(sbyte value)
private int GetSteps()
protected void GetData(SevenBitNumber& msb, Nullable`1& lsb)
protected int GetIncrementStepsCount()
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.ChannelFineTuningParameter : RegisteredParameter {
public float MinCents
public float MaxCents
private int CentsRangeSize
private float CentResolution
private float _cents
public float Cents
public void .ctor(float cents)
public void .ctor(float cents, ParameterValueType valueType)
public float get_Cents()
public void set_Cents(float value)
private int GetSteps()
protected void GetData(SevenBitNumber& msb, Nullable`1& lsb)
protected int GetIncrementStepsCount()
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.Chord : object {
private NotesCollectionChangedEventHandler NotesCollectionChanged
private EventHandler`1<TimeChangedEventArgs> TimeChanged
private EventHandler`1<LengthChangedEventArgs> LengthChanged
private Nullable`1<FourBitNumber> _channel
private Nullable`1<SevenBitNumber> _velocity
private Nullable`1<SevenBitNumber> _offVelocity
private NotesCollection <Notes>k__BackingField
public NotesCollection Notes
public long Time
public long Length
public FourBitNumber Channel
public SevenBitNumber Velocity
public SevenBitNumber OffVelocity
public void add_NotesCollectionChanged(NotesCollectionChangedEventHandler value)
public void remove_NotesCollectionChanged(NotesCollectionChangedEventHandler value)
public void add_TimeChanged(EventHandler`1<TimeChangedEventArgs> value)
public void remove_TimeChanged(EventHandler`1<TimeChangedEventArgs> value)
public void add_LengthChanged(EventHandler`1<LengthChangedEventArgs> value)
public void remove_LengthChanged(EventHandler`1<LengthChangedEventArgs> value)
public void .ctor(IEnumerable`1<Note> notes)
public void .ctor(Note[] notes)
public void .ctor(IEnumerable`1<Note> notes, long time)
public NotesCollection get_Notes()
public long get_Time()
public void set_Time(long value)
public long get_Length()
public void set_Length(long value)
public FourBitNumber get_Channel()
public void set_Channel(FourBitNumber value)
public SevenBitNumber get_Velocity()
public void set_Velocity(SevenBitNumber value)
public SevenBitNumber get_OffVelocity()
public void set_OffVelocity(SevenBitNumber value)
public Chord Clone()
public SplitLengthedObject`1<Chord> Split(long time)
private void OnNotesCollectionChanged(NotesCollection collection, NotesCollectionChangedEventArgs args)
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.ChordDetectionSettings : object {
private int DefaultNotesMinCount
private long DefaultNotesTolerance
private int _notesMinCount
private long _notesTolerance
private ChordSearchContext _chordSearchContext
private NoteDetectionSettings <NoteDetectionSettings>k__BackingField
public int NotesMinCount
public long NotesTolerance
public NoteDetectionSettings NoteDetectionSettings
public ChordSearchContext ChordSearchContext
public int get_NotesMinCount()
public void set_NotesMinCount(int value)
public long get_NotesTolerance()
public void set_NotesTolerance(long value)
public NoteDetectionSettings get_NoteDetectionSettings()
public void set_NoteDetectionSettings(NoteDetectionSettings value)
public ChordSearchContext get_ChordSearchContext()
public void set_ChordSearchContext(ChordSearchContext value)
}
internal Melanchall.DryWetMidi.Interaction.ChordsBuilder : object {
private ChordDetectionSettings _chordDetectionSettings
public void .ctor(ChordDetectionSettings chordDetectionSettings)
public IEnumerable`1<Chord> GetChordsLazy(IEnumerable`1<TimedEvent> timedEvents, bool collectTimedEvents, List`1<TimedEvent> collectedTimedEvents)
public IEnumerable`1<Chord> GetChordsLazy(IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents, bool collectTimedEvents, List`1<Tuple`2<TimedEvent, int>> collectedTimedEvents)
private IEnumerable`1<Chord> GetChords(LinkedListNode`1<TDescriptor> startChordDescriptorNode, LinkedList`1<TDescriptor> chordsDescriptors, bool getSealedOnly)
private void CreateChordDescriptor(LinkedList`1<ChordDescriptor> chordsDescriptors, LinkedListNode`1[] chordsDescriptorsByChannel, Note note)
private void CreateChordDescriptor(LinkedList`1<ChordDescriptorIndexed> chordsDescriptors, LinkedListNode`1[] chordsDescriptorsByChannel, Note note, int noteOnIndex)
private bool CanNoteBeAddedToChord(ChordDescriptor chordDescriptor, Note note, long notesTolerance)
private bool CanNoteBeAddedToChord(ChordDescriptorIndexed chordDescriptor, Note note, long notesTolerance, int eventsCollectionIndex, bool eventsCollectionShouldMatch)
}
public Melanchall.DryWetMidi.Interaction.ChordsCollection : TimedObjectsCollection`1<Chord> {
private ChordsCollectionChangedEventHandler CollectionChanged
public void add_CollectionChanged(ChordsCollectionChangedEventHandler value)
public void remove_CollectionChanged(ChordsCollectionChangedEventHandler value)
internal void .ctor(IEnumerable`1<Chord> chords)
protected void OnObjectsAdded(IEnumerable`1<Chord> addedObjects)
protected void OnObjectsRemoved(IEnumerable`1<Chord> removedObjects)
private void OnCollectionChanged(IEnumerable`1<Chord> addedChords, IEnumerable`1<Chord> removedChords)
}
public Melanchall.DryWetMidi.Interaction.ChordsCollectionChangedEventArgs : EventArgs {
private IEnumerable`1<Chord> <AddedChords>k__BackingField
private IEnumerable`1<Chord> <RemovedChords>k__BackingField
public IEnumerable`1<Chord> AddedChords
public IEnumerable`1<Chord> RemovedChords
public void .ctor(IEnumerable`1<Chord> addedChords, IEnumerable`1<Chord> removedChords)
public IEnumerable`1<Chord> get_AddedChords()
public IEnumerable`1<Chord> get_RemovedChords()
}
public Melanchall.DryWetMidi.Interaction.ChordsCollectionChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ChordsCollection collection, ChordsCollectionChangedEventArgs args)
public IAsyncResult BeginInvoke(ChordsCollection collection, ChordsCollectionChangedEventArgs args, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Interaction.ChordSearchContext : Enum {
public int value__
public ChordSearchContext SingleEventsCollection
public ChordSearchContext AllEventsCollections
}
public Melanchall.DryWetMidi.Interaction.ChordsManager : object {
private NotesManager _notesManager
private bool _disposed
private ChordsCollection <Chords>k__BackingField
public ChordsCollection Chords
public void .ctor(EventsCollection eventsCollection, ChordDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison)
public ChordsCollection get_Chords()
public void SaveChanges()
private void OnChordsCollectionChanged(ChordsCollection collection, ChordsCollectionChangedEventArgs args)
private void OnChordNotesCollectionChanged(NotesCollection collection, NotesCollectionChangedEventArgs args)
private void SubscribeToChordEvents(Chord chord)
private void UnsubscribeFromChordEvents(Chord chord)
private void AddNotes(IEnumerable`1<Note> notes)
private void RemoveNotes(IEnumerable`1<Note> notes)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities : object {
public Chord SetTimeAndLength(Chord chord, ITimeSpan time, ITimeSpan length, TempoMap tempoMap)
public ChordsManager ManageChords(EventsCollection eventsCollection, ChordDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison)
public ChordsManager ManageChords(TrackChunk trackChunk, ChordDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison)
public ICollection`1<Chord> GetChords(IEnumerable`1<MidiEvent> midiEvents, ChordDetectionSettings settings)
public ICollection`1<Chord> GetChords(EventsCollection eventsCollection, ChordDetectionSettings settings)
public ICollection`1<Chord> GetChords(TrackChunk trackChunk, ChordDetectionSettings settings)
public ICollection`1<Chord> GetChords(IEnumerable`1<TrackChunk> trackChunks, ChordDetectionSettings settings)
public ICollection`1<Chord> GetChords(MidiFile file, ChordDetectionSettings settings)
public IEnumerable`1<Chord> GetChords(IEnumerable`1<Note> notes, ChordDetectionSettings settings)
public int ProcessChords(EventsCollection eventsCollection, Action`1<Chord> action, ChordDetectionSettings settings)
public int ProcessChords(EventsCollection eventsCollection, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings)
public int ProcessChords(TrackChunk trackChunk, Action`1<Chord> action, ChordDetectionSettings settings)
public int ProcessChords(TrackChunk trackChunk, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings)
public int ProcessChords(IEnumerable`1<TrackChunk> trackChunks, Action`1<Chord> action, ChordDetectionSettings settings)
public int ProcessChords(IEnumerable`1<TrackChunk> trackChunks, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings)
public int ProcessChords(MidiFile file, Action`1<Chord> action, ChordDetectionSettings settings)
public int ProcessChords(MidiFile file, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings)
public int RemoveChords(EventsCollection eventsCollection, ChordDetectionSettings settings)
public int RemoveChords(EventsCollection eventsCollection, Predicate`1<Chord> match, ChordDetectionSettings settings)
public int RemoveChords(TrackChunk trackChunk, ChordDetectionSettings settings)
public int RemoveChords(TrackChunk trackChunk, Predicate`1<Chord> match, ChordDetectionSettings settings)
public int RemoveChords(IEnumerable`1<TrackChunk> trackChunks, ChordDetectionSettings settings)
public int RemoveChords(IEnumerable`1<TrackChunk> trackChunks, Predicate`1<Chord> match, ChordDetectionSettings settings)
public int RemoveChords(MidiFile file, ChordDetectionSettings settings)
public int RemoveChords(MidiFile file, Predicate`1<Chord> match, ChordDetectionSettings settings)
public Chord GetMusicTheoryChord(Chord chord)
internal IEnumerable`1<Tuple`2<ITimedObject, Int32[]>> GetChordsAndNotesAndTimedEventsLazy(IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents, ChordDetectionSettings settings)
internal IEnumerable`1<ITimedObject> GetChordsAndNotesAndTimedEventsLazy(IEnumerable`1<TimedEvent> timedEvents, ChordDetectionSettings settings)
internal IEnumerable`1<ITimedObject> GetChordsAndNotesAndTimedEventsLazy(IEnumerable`1<ITimedObject> notesAndTimedEvents, ChordDetectionSettings settings)
internal IEnumerable`1<ITimedObject> GetChordsAndNotesAndTimedEventsLazy(IEnumerable`1<ITimedObject> notesAndTimedEvents, ChordDetectionSettings settings, bool chordsAllowed)
internal int ProcessChords(EventsCollection eventsCollection, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings, bool canTimeOrLengthBeChanged)
internal int ProcessChords(IEnumerable`1<TrackChunk> trackChunks, Action`1<Chord> action, Predicate`1<Chord> match, ChordDetectionSettings settings, bool canTimeOrLengthBeChanged)
private IEnumerable`1<ITimedObject> GetTimedObjects(LinkedListNode`1<ChordDescriptor> startChordDescriptorNode, LinkedList`1<ChordDescriptor> chordsDescriptors, LinkedList`1<IObjectDescriptor> timedObjects, bool getSealedOnly)
private IEnumerable`1<Tuple`2<ITimedObject, Int32[]>> GetTimedObjects(LinkedListNode`1<ChordDescriptorIndexed> startChordDescriptorNode, LinkedList`1<ChordDescriptorIndexed> chordsDescriptors, LinkedList`1<IObjectDescriptorIndexed> timedObjects, bool getSealedOnly)
private void CreateChordDescriptor(LinkedList`1<ChordDescriptor> chordsDescriptors, LinkedListNode`1[] chordsDescriptorsByChannel, LinkedList`1<IObjectDescriptor> timedObjects, Note note, ChordDetectionSettings settings)
private void CreateChordDescriptor(LinkedList`1<ChordDescriptorIndexed> chordsDescriptors, LinkedListNode`1[] chordsDescriptorsByChannel, LinkedList`1<IObjectDescriptorIndexed> timedObjects, Note note, int noteOnIndex, int noteOffIndex, ChordDetectionSettings settings)
private bool CanNoteBeAddedToChord(ChordDescriptor chordDescriptor, Note note, long notesTolerance)
private bool CanNoteBeAddedToChord(ChordDescriptorIndexed chordDescriptor, Note note, long notesTolerance, int eventsCollectionIndex, bool eventsCollectionShouldMatch)
}
public Melanchall.DryWetMidi.Interaction.GetObjectsUtilities : object {
private object NoSeparationNoteDescriptor
private Dictionary`2<RestSeparationPolicy, Func`2<Note, object>> NoteDescriptorProviders
private Dictionary`2<RestSeparationPolicy, bool> SetRestChannel
private Dictionary`2<RestSeparationPolicy, bool> SetRestNoteNumber
public ICollection`1<ITimedObject> GetObjects(IEnumerable`1<MidiEvent> midiEvents, ObjectType objectType, ObjectDetectionSettings settings)
public ICollection`1<ITimedObject> GetObjects(EventsCollection eventsCollection, ObjectType objectType, ObjectDetectionSettings settings)
public ICollection`1<ITimedObject> GetObjects(TrackChunk trackChunk, ObjectType objectType, ObjectDetectionSettings settings)
public ICollection`1<ITimedObject> GetObjects(IEnumerable`1<TrackChunk> trackChunks, ObjectType objectType, ObjectDetectionSettings settings)
public ICollection`1<ITimedObject> GetObjects(MidiFile midiFile, ObjectType objectType, ObjectDetectionSettings settings)
public ICollection`1<ITimedObject> GetObjects(IEnumerable`1<ITimedObject> timedObjects, ObjectType objectType, ObjectDetectionSettings settings)
private bool TryProcessTimedEvent(TimedEvent timedEvent, List`1<ITimedObject> processedTimedObjects)
private bool TryProcessNote(Note note, List`1<ITimedObject> processedTimedObjects, bool getNotes, bool getChords)
private bool TryProcessChord(Chord chord, List`1<ITimedObject> processedTimedObjects, bool getNotes, bool getChords)
private ICollection`1<ITimedObject> GetObjectsFromSortedTimedObjects(IEnumerable`1<ITimedObject> processedTimedObjects, int resultCollectionSize, ObjectType objectType, ObjectDetectionSettings settings, bool createNotes)
}
public Melanchall.DryWetMidi.Interaction.IGrid {
public IEnumerable`1<long> GetTimes(TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.ILengthedObject {
public long Length
public long get_Length()
public void set_Length(long value)
}
public Melanchall.DryWetMidi.Interaction.IMusicalObject {
public FourBitNumber Channel
public FourBitNumber get_Channel()
}
public Melanchall.DryWetMidi.Interaction.INotifyLengthChanged {
public void add_LengthChanged(EventHandler`1<LengthChangedEventArgs> value)
public void remove_LengthChanged(EventHandler`1<LengthChangedEventArgs> value)
}
public Melanchall.DryWetMidi.Interaction.INotifyTimeChanged {
public void add_TimeChanged(EventHandler`1<TimeChangedEventArgs> value)
public void remove_TimeChanged(EventHandler`1<TimeChangedEventArgs> value)
}
internal Melanchall.DryWetMidi.Interaction.ITempoMapValuesCache {
public IEnumerable`1<TempoMapLine> InvalidateOnLines
public IEnumerable`1<TempoMapLine> get_InvalidateOnLines()
public void Invalidate(TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.ITimedObject {
public long Time
public long get_Time()
public void set_Time(long value)
}
public Melanchall.DryWetMidi.Interaction.ITimeSpan {
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
}
internal Melanchall.DryWetMidi.Interaction.ITimeSpanConverter {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.LengthChangedEventArgs : EventArgs {
private long <OldLength>k__BackingField
private long <NewLength>k__BackingField
public long OldLength
public long NewLength
internal void .ctor(long oldLength, long newLength)
public long get_OldLength()
public long get_NewLength()
}
public Melanchall.DryWetMidi.Interaction.LengthConverter : object {
public TTimeSpan ConvertTo(long length, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(long length, TimeSpanType lengthType, long time, TempoMap tempoMap)
public TTimeSpan ConvertTo(long length, ITimeSpan time, TempoMap tempoMap)
public ITimeSpan ConvertTo(long length, TimeSpanType lengthType, ITimeSpan time, TempoMap tempoMap)
public TTimeSpan ConvertTo(ITimeSpan length, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan length, TimeSpanType lengthType, long time, TempoMap tempoMap)
public TTimeSpan ConvertTo(ITimeSpan length, ITimeSpan time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan length, TimeSpanType lengthType, ITimeSpan time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan length, Type lengthType, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan length, Type lengthType, ITimeSpan time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan length, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan length, ITimeSpan time, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.LengthedObjectPart : Enum {
public int value__
public LengthedObjectPart Start
public LengthedObjectPart End
public LengthedObjectPart Entire
}
public Melanchall.DryWetMidi.Interaction.LengthedObjectUtilities : object {
public TLength LengthAs(ILengthedObject obj, TempoMap tempoMap)
public ITimeSpan LengthAs(ILengthedObject obj, TimeSpanType lengthType, TempoMap tempoMap)
public TTime EndTimeAs(ILengthedObject obj, TempoMap tempoMap)
public ITimeSpan EndTimeAs(ILengthedObject obj, TimeSpanType timeType, TempoMap tempoMap)
public IEnumerable`1<TObject> StartAtTime(IEnumerable`1<TObject> objects, long time)
public IEnumerable`1<TObject> EndAtTime(IEnumerable`1<TObject> objects, long time)
public IEnumerable`1<TObject> StartAtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap)
public IEnumerable`1<TObject> EndAtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap)
public IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, long time, LengthedObjectPart matchBy)
public IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap, LengthedObjectPart matchBy)
private bool IsObjectAtTime(TObject obj, long time, LengthedObjectPart matchBy)
}
public Melanchall.DryWetMidi.Interaction.MathOperation : Enum {
public int value__
public MathOperation Add
public MathOperation Subtract
}
public Melanchall.DryWetMidi.Interaction.MathTimeSpan : object {
private string TimeModeString
private string LengthModeString
private Dictionary`2<TimeSpanMode, Tuple`2<string, string>> ModeStrings
private ITimeSpan <TimeSpan1>k__BackingField
private ITimeSpan <TimeSpan2>k__BackingField
private MathOperation <Operation>k__BackingField
private TimeSpanMode <Mode>k__BackingField
public ITimeSpan TimeSpan1
public ITimeSpan TimeSpan2
public MathOperation Operation
public TimeSpanMode Mode
internal void .ctor(ITimeSpan timeSpan1, ITimeSpan timeSpan2, MathOperation operation, TimeSpanMode mode)
public ITimeSpan get_TimeSpan1()
public ITimeSpan get_TimeSpan2()
public MathOperation get_Operation()
public TimeSpanMode get_Mode()
public bool op_Equality(MathTimeSpan timeSpan1, MathTimeSpan timeSpan2)
public bool op_Inequality(MathTimeSpan timeSpan1, MathTimeSpan timeSpan2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object other)
}
internal Melanchall.DryWetMidi.Interaction.MathTimeSpanConverter : object {
private Dictionary`2<TimeSpanMode, Func`4<MathTimeSpan, long, TempoMap, long>> Converters
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
private long ConvertFromLengthLength(MathTimeSpan mathTimeSpan, long time, TempoMap tempoMap)
private long ConvertFromTimeLength(MathTimeSpan mathTimeSpan, long time, TempoMap tempoMap)
private long ConvertFromTimeTime(MathTimeSpan mathTimeSpan, long time, TempoMap tempoMap)
}
internal Melanchall.DryWetMidi.Interaction.MetricTempoMapValuesCache : object {
private AccumulatedMicroseconds[] <Microseconds>k__BackingField
private double <DefaultMicrosecondsPerTick>k__BackingField
private double <DefaultTicksPerMicrosecond>k__BackingField
private IEnumerable`1<TempoMapLine> <InvalidateOnLines>k__BackingField
public AccumulatedMicroseconds[] Microseconds
public double DefaultMicrosecondsPerTick
public double DefaultTicksPerMicrosecond
public IEnumerable`1<TempoMapLine> InvalidateOnLines
public AccumulatedMicroseconds[] get_Microseconds()
private void set_Microseconds(AccumulatedMicroseconds[] value)
public double get_DefaultMicrosecondsPerTick()
private void set_DefaultMicrosecondsPerTick(double value)
public double get_DefaultTicksPerMicrosecond()
private void set_DefaultTicksPerMicrosecond(double value)
private double GetMicroseconds(long time, Tempo tempo, short ticksPerQuarterNote)
public IEnumerable`1<TempoMapLine> get_InvalidateOnLines()
public void Invalidate(TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.MetricTimeSpan : object {
private int MicrosecondsInMillisecond
private long TicksInMicrosecond
private TimeSpan _timeSpan
public long TotalMicroseconds
public int Hours
public int Minutes
public int Seconds
public int Milliseconds
public void .ctor(long totalMicroseconds)
public void .ctor(TimeSpan timeSpan)
public void .ctor(int hours, int minutes, int seconds)
public void .ctor(int hours, int minutes, int seconds, int milliseconds)
public long get_TotalMicroseconds()
public int get_Hours()
public int get_Minutes()
public int get_Seconds()
public int get_Milliseconds()
public double Divide(MetricTimeSpan timeSpan)
public bool TryParse(string input, MetricTimeSpan& timeSpan)
public MetricTimeSpan Parse(string input)
public MetricTimeSpan op_Implicit(TimeSpan timeSpan)
public TimeSpan op_Implicit(MetricTimeSpan timeSpan)
public bool op_Equality(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool op_Inequality(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public MetricTimeSpan op_Addition(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public MetricTimeSpan op_Subtraction(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool op_LessThan(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool op_GreaterThan(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool op_LessThanOrEqual(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool op_GreaterThanOrEqual(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object other)
public int CompareTo(MetricTimeSpan other)
public bool Equals(MetricTimeSpan other)
}
internal Melanchall.DryWetMidi.Interaction.MetricTimeSpanConverter : object {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
private MetricTimeSpan TicksToMetricTimeSpan(long timeSpan, TempoMap tempoMap)
private long MetricTimeSpanToTicks(MetricTimeSpan timeSpan, TempoMap tempoMap)
private double GetMicroseconds(long time, double microsecondsPerTick)
private long RoundMicroseconds(double microseconds)
}
internal Melanchall.DryWetMidi.Interaction.MetricTimeSpanParser : object {
private string HoursGroupName
private string MinutesGroupName
private string SecondsGroupName
private string MillisecondsGroupName
private string HoursGroup
private string MinutesGroup
private string SecondsGroup
private string MillisecondsGroup
private string LetteredHoursGroup
private string LetteredMinutesGroup
private string LetteredSecondsGroup
private string LetteredMillisecondsGroup
private string Divider
private String[] Patterns
private string HoursIsOutOfRange
private string MinutesIsOutOfRange
private string SecondsIsOutOfRange
private string MillisecondsIsOutOfRange
internal ParsingResult TryParse(string input, MetricTimeSpan& timeSpan)
}
public Melanchall.DryWetMidi.Interaction.MidiFileUtilities : object {
public TTimeSpan GetDuration(MidiFile midiFile)
public ITimeSpan GetDuration(MidiFile midiFile, TimeSpanType durationType)
public bool IsEmpty(MidiFile midiFile)
public void ShiftEvents(MidiFile midiFile, ITimeSpan distance)
public void Resize(MidiFile midiFile, ITimeSpan length)
public void Resize(MidiFile midiFile, double ratio)
private void ResizeByRatio(MidiFile midiFile, double ratio)
}
public Melanchall.DryWetMidi.Interaction.MidiTimeSpan : object {
private long <TimeSpan>k__BackingField
public long TimeSpan
public void .ctor(long timeSpan)
public long get_TimeSpan()
public double Divide(MidiTimeSpan timeSpan)
public bool TryParse(string input, MidiTimeSpan& timeSpan)
public MidiTimeSpan Parse(string input)
public MidiTimeSpan op_Explicit(long timeSpan)
public long op_Implicit(MidiTimeSpan timeSpan)
public bool op_Equality(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public bool op_Inequality(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public MidiTimeSpan op_Addition(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public MidiTimeSpan op_Subtraction(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public bool op_LessThan(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public bool op_GreaterThan(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public bool op_LessThanOrEqual(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public bool op_GreaterThanOrEqual(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object other)
public int CompareTo(MidiTimeSpan other)
public bool Equals(MidiTimeSpan other)
}
internal Melanchall.DryWetMidi.Interaction.MidiTimeSpanConverter : object {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
}
internal Melanchall.DryWetMidi.Interaction.MidiTimeSpanParser : object {
private string TimeSpanGroupName
private string TimeSpanGroup
private String[] Patterns
private string OutOfRange
internal ParsingResult TryParse(string input, MidiTimeSpan& timeSpan)
}
public Melanchall.DryWetMidi.Interaction.ModulationDepthRangeParameter : RegisteredParameter {
public SevenBitNumber DefaultHalfSteps
public float DefaultCents
public float MinCents
public float MaxCents
private float CentResolution
private float _cents
private SevenBitNumber <HalfSteps>k__BackingField
public SevenBitNumber HalfSteps
public float Cents
public void .ctor(SevenBitNumber halfSteps, float cents)
public void .ctor(SevenBitNumber halfSteps, float cents, ParameterValueType valueType)
public SevenBitNumber get_HalfSteps()
public void set_HalfSteps(SevenBitNumber value)
public float get_Cents()
public void set_Cents(float value)
protected void GetData(SevenBitNumber& msb, Nullable`1& lsb)
protected int GetIncrementStepsCount()
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.MusicalTimeSpan : object {
public MusicalTimeSpan Whole
public MusicalTimeSpan Half
public MusicalTimeSpan Quarter
public MusicalTimeSpan Eighth
public MusicalTimeSpan Sixteenth
public MusicalTimeSpan ThirtySecond
public MusicalTimeSpan SixtyFourth
private long ZeroTimeSpanNumerator
private long ZeroTimeSpanDenominator
private long FractionNumerator
private int WholeFraction
private int HalfFraction
private int QuarterFraction
private int EighthFraction
private int SixteenthFraction
private int ThirtySecondFraction
private int SixtyFourthFraction
private int TripletNotesCount
private int TripletSpaceSize
private int DupletNotesCount
private int DupletSpaceSize
private int SingleDotCount
private int DoubleDotCount
private int NumberOfDigitsAfterDecimalPoint
private int FractionPartMultiplier
private long <Numerator>k__BackingField
private long <Denominator>k__BackingField
public long Numerator
public long Denominator
public void .ctor(long fraction)
public void .ctor(long numerator, long denominator, bool simplify)
public long get_Numerator()
public long get_Denominator()
public MusicalTimeSpan Dotted(int dotsCount)
public MusicalTimeSpan SingleDotted()
public MusicalTimeSpan DoubleDotted()
public MusicalTimeSpan Tuplet(int tupletNotesCount, int tupletSpaceSize)
public MusicalTimeSpan Triplet()
public MusicalTimeSpan Duplet()
public double Divide(MusicalTimeSpan timeSpan)
public MusicalTimeSpan ChangeDenominator(long denominator)
public bool TryParse(string input, MusicalTimeSpan& timeSpan)
public MusicalTimeSpan Parse(string input)
private void ReduceToCommonDenominator(MusicalTimeSpan fraction1, MusicalTimeSpan fraction2, Int64& numerator1, Int64& numerator2, Int64& denominator)
public bool op_Equality(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool op_Inequality(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public MusicalTimeSpan op_Multiply(MusicalTimeSpan timeSpan, long number)
public MusicalTimeSpan op_Multiply(long number, MusicalTimeSpan timeSpan)
public MusicalTimeSpan op_Division(MusicalTimeSpan timeSpan, long number)
public MusicalTimeSpan op_Addition(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public MusicalTimeSpan op_Subtraction(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool op_LessThan(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool op_GreaterThan(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool op_LessThanOrEqual(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool op_GreaterThanOrEqual(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode)
public ITimeSpan Multiply(double multiplier)
public ITimeSpan Divide(double divisor)
public ITimeSpan Clone()
public int CompareTo(object other)
public int CompareTo(MusicalTimeSpan other)
public bool Equals(MusicalTimeSpan other)
}
internal Melanchall.DryWetMidi.Interaction.MusicalTimeSpanConverter : object {
public ITimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
}
internal Melanchall.DryWetMidi.Interaction.MusicalTimeSpanParser : object {
private Dictionary`2<string, Tuple`2<int, int>> Fractions
private Dictionary`2<string, Tuple`2<int, int>> Tuplets
private string NumeratorGroupName
private string DenominatorGroupName
private string FractionMnemonicGroupName
private string TupletNotesCountGroupName
private string TupletSpaceSizeGroupName
private string TupletMnemonicGroupName
private string DotsGroupName
private string FractionGroup
private string FractionMnemonicGroup
private string TupletGroup
private string TupletMnemonicGroup
private string DotsGroup
private String[] Patterns
private string NumeratorIsOutOfRange
private string DenominatorIsOutOfRange
private string TupletNotesCountIsOutOfRange
private string TupletSpaceSizeIsOutOfRange
internal ParsingResult TryParse(string input, MusicalTimeSpan& timeSpan)
private string GetMnemonicGroup(string groupName, IEnumerable`1<string> mnemonics)
}
public Melanchall.DryWetMidi.Interaction.Note : object {
public SevenBitNumber DefaultVelocity
private EventHandler`1<TimeChangedEventArgs> TimeChanged
private EventHandler`1<LengthChangedEventArgs> LengthChanged
private TimedEvent <TimedNoteOnEvent>k__BackingField
private TimedEvent <TimedNoteOffEvent>k__BackingField
public long Time
public long Length
public SevenBitNumber NoteNumber
public SevenBitNumber Velocity
public SevenBitNumber OffVelocity
public FourBitNumber Channel
public NoteName NoteName
public int Octave
internal TimedEvent TimedNoteOnEvent
internal TimedEvent TimedNoteOffEvent
internal Note UnderlyingNote
public void add_TimeChanged(EventHandler`1<TimeChangedEventArgs> value)
public void remove_TimeChanged(EventHandler`1<TimeChangedEventArgs> value)
public void add_LengthChanged(EventHandler`1<LengthChangedEventArgs> value)
public void remove_LengthChanged(EventHandler`1<LengthChangedEventArgs> value)
public void .ctor(NoteName noteName, int octave)
public void .ctor(NoteName noteName, int octave, long length)
public void .ctor(NoteName noteName, int octave, long length, long time)
public void .ctor(SevenBitNumber noteNumber)
public void .ctor(SevenBitNumber noteNumber, long length)
public void .ctor(SevenBitNumber noteNumber, long length, long time)
internal void .ctor(TimedEvent timedNoteOnEvent, TimedEvent timedNoteOffEvent)
public long get_Time()
public void set_Time(long value)
public long get_Length()
public void set_Length(long value)
public SevenBitNumber get_NoteNumber()
public void set_NoteNumber(SevenBitNumber value)
public SevenBitNumber get_Velocity()
public void set_Velocity(SevenBitNumber value)
public SevenBitNumber get_OffVelocity()
public void set_OffVelocity(SevenBitNumber value)
public FourBitNumber get_Channel()
public void set_Channel(FourBitNumber value)
public NoteName get_NoteName()
public int get_Octave()
internal TimedEvent get_TimedNoteOnEvent()
internal TimedEvent get_TimedNoteOffEvent()
internal Note get_UnderlyingNote()
public TimedEvent GetTimedNoteOnEvent()
public TimedEvent GetTimedNoteOffEvent()
public void SetNoteNameAndOctave(NoteName noteName, int octave)
public Note Clone()
public SplitLengthedObject`1<Note> Split(long time)
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.NoteDetectionSettings : object {
private NoteStartDetectionPolicy _noteStartDetectionPolicy
private NoteSearchContext _noteSearchContext
public NoteStartDetectionPolicy NoteStartDetectionPolicy
public NoteSearchContext NoteSearchContext
public NoteStartDetectionPolicy get_NoteStartDetectionPolicy()
public void set_NoteStartDetectionPolicy(NoteStartDetectionPolicy value)
public NoteSearchContext get_NoteSearchContext()
public void set_NoteSearchContext(NoteSearchContext value)
}
public Melanchall.DryWetMidi.Interaction.NoteId : object {
private FourBitNumber <Channel>k__BackingField
private SevenBitNumber <NoteNumber>k__BackingField
public FourBitNumber Channel
public SevenBitNumber NoteNumber
public void .ctor(FourBitNumber channel, SevenBitNumber noteNumber)
public FourBitNumber get_Channel()
public SevenBitNumber get_NoteNumber()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.NoteIdUtilities : object {
public NoteId GetNoteId(Note note)
public NoteId GetNoteId(NoteEvent noteEvent)
}
internal Melanchall.DryWetMidi.Interaction.NotesBuilder : object {
private NoteDetectionSettings _noteDetectionSettings
public void .ctor(NoteDetectionSettings noteDetectionSettings)
public IEnumerable`1<Note> GetNotesLazy(IEnumerable`1<TimedEvent> timedEvents, bool collectTimedEvents, List`1<TimedEvent> collectedTimedEvents)
public IEnumerable`1<Note> GetNotesLazy(IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents, bool collectTimedEvents, List`1<Tuple`2<TimedEvent, int>> collectedTimedEvents)
public IEnumerable`1<Tuple`2<Note, int>> GetIndexedNotesLazy(IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents, bool collectTimedEvents, List`1<Tuple`2<TimedEvent, int>> collectedTimedEvents)
private int GetNoteEventId(NoteEvent noteEvent)
}
public Melanchall.DryWetMidi.Interaction.NotesCollection : TimedObjectsCollection`1<Note> {
private NotesCollectionChangedEventHandler CollectionChanged
public void add_CollectionChanged(NotesCollectionChangedEventHandler value)
public void remove_CollectionChanged(NotesCollectionChangedEventHandler value)
internal void .ctor(IEnumerable`1<Note> notes)
protected void OnObjectsAdded(IEnumerable`1<Note> addedObjects)
protected void OnObjectsRemoved(IEnumerable`1<Note> removedObjects)
private void OnCollectionChanged(IEnumerable`1<Note> addedNotes, IEnumerable`1<Note> removedNotes)
}
public Melanchall.DryWetMidi.Interaction.NotesCollectionChangedEventArgs : EventArgs {
private IEnumerable`1<Note> <AddedNotes>k__BackingField
private IEnumerable`1<Note> <RemovedNotes>k__BackingField
public IEnumerable`1<Note> AddedNotes
public IEnumerable`1<Note> RemovedNotes
public void .ctor(IEnumerable`1<Note> addedNotes, IEnumerable`1<Note> removedNotes)
public IEnumerable`1<Note> get_AddedNotes()
public IEnumerable`1<Note> get_RemovedNotes()
}
public Melanchall.DryWetMidi.Interaction.NotesCollectionChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(NotesCollection collection, NotesCollectionChangedEventArgs args)
public IAsyncResult BeginInvoke(NotesCollection collection, NotesCollectionChangedEventArgs args, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Interaction.NoteSearchContext : Enum {
public int value__
public NoteSearchContext SingleEventsCollection
public NoteSearchContext AllEventsCollections
}
public Melanchall.DryWetMidi.Interaction.NotesManager : object {
private TimedEventsManager _timedEventsManager
private bool _disposed
private NotesCollection <Notes>k__BackingField
public NotesCollection Notes
public void .ctor(EventsCollection eventsCollection, NoteDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison)
public NotesCollection get_Notes()
public void SaveChanges()
private void OnNotesCollectionChanged(NotesCollection collection, NotesCollectionChangedEventArgs args)
private IEnumerable`1<TimedEvent> GetNotesTimedEvents(IEnumerable`1<Note> notes)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Interaction.NotesManagingUtilities : object {
public Note SetTimeAndLength(Note note, ITimeSpan time, ITimeSpan length, TempoMap tempoMap)
public NotesManager ManageNotes(EventsCollection eventsCollection, NoteDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison)
public NotesManager ManageNotes(TrackChunk trackChunk, NoteDetectionSettings settings, Comparison`1<MidiEvent> sameTimeEventsComparison)
public ICollection`1<Note> GetNotes(IEnumerable`1<MidiEvent> midiEvents, NoteDetectionSettings settings)
public ICollection`1<Note> GetNotes(EventsCollection eventsCollection, NoteDetectionSettings settings)
public ICollection`1<Note> GetNotes(TrackChunk trackChunk, NoteDetectionSettings settings)
public ICollection`1<Note> GetNotes(IEnumerable`1<TrackChunk> trackChunks, NoteDetectionSettings settings)
public ICollection`1<Note> GetNotes(MidiFile file, NoteDetectionSettings settings)
public int ProcessNotes(EventsCollection eventsCollection, Action`1<Note> action, NoteDetectionSettings settings)
public int ProcessNotes(EventsCollection eventsCollection, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings settings)
public int ProcessNotes(TrackChunk trackChunk, Action`1<Note> action, NoteDetectionSettings settings)
public int ProcessNotes(TrackChunk trackChunk, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings settings)
public int ProcessNotes(IEnumerable`1<TrackChunk> trackChunks, Action`1<Note> action, NoteDetectionSettings settings)
public int ProcessNotes(IEnumerable`1<TrackChunk> trackChunks, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings settings)
public int ProcessNotes(MidiFile file, Action`1<Note> action, NoteDetectionSettings settings)
public int ProcessNotes(MidiFile file, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings settings)
public int RemoveNotes(EventsCollection eventsCollection, NoteDetectionSettings settings)
public int RemoveNotes(EventsCollection eventsCollection, Predicate`1<Note> match, NoteDetectionSettings settings)
public int RemoveNotes(TrackChunk trackChunk, NoteDetectionSettings settings)
public int RemoveNotes(TrackChunk trackChunk, Predicate`1<Note> match, NoteDetectionSettings settings)
public int RemoveNotes(IEnumerable`1<TrackChunk> trackChunks, NoteDetectionSettings settings)
public int RemoveNotes(IEnumerable`1<TrackChunk> trackChunks, Predicate`1<Note> match, NoteDetectionSettings settings)
public int RemoveNotes(MidiFile file, NoteDetectionSettings settings)
public int RemoveNotes(MidiFile file, Predicate`1<Note> match, NoteDetectionSettings settings)
public Note GetMusicTheoryNote(Note note)
internal int ProcessNotes(IEnumerable`1<TrackChunk> trackChunks, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings noteDetectionSettings, bool canTimeOrLengthBeChanged)
internal int ProcessNotes(EventsCollection eventsCollection, Action`1<Note> action, Predicate`1<Note> match, NoteDetectionSettings noteDetectionSettings, bool canTimeOrLengthBeChanged)
internal IEnumerable`1<Tuple`3<ITimedObject, int, int>> GetNotesAndTimedEventsLazy(IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents, NoteDetectionSettings settings)
internal IEnumerable`1<ITimedObject> GetNotesAndTimedEventsLazy(IEnumerable`1<TimedEvent> timedEvents, NoteDetectionSettings settings)
internal IEnumerable`1<ITimedObject> GetNotesAndTimedEventsLazy(IEnumerable`1<ITimedObject> timedObjects, NoteDetectionSettings settings, bool completeObjectsAllowed)
private int GetNoteEventId(NoteEvent noteEvent)
}
public Melanchall.DryWetMidi.Interaction.NoteStartDetectionPolicy : Enum {
public int value__
public NoteStartDetectionPolicy FirstNoteOn
public NoteStartDetectionPolicy LastNoteOn
}
public Melanchall.DryWetMidi.Interaction.ObjectDetectionSettings : object {
private NoteDetectionSettings <NoteDetectionSettings>k__BackingField
private ChordDetectionSettings <ChordDetectionSettings>k__BackingField
private RestDetectionSettings <RestDetectionSettings>k__BackingField
public NoteDetectionSettings NoteDetectionSettings
public ChordDetectionSettings ChordDetectionSettings
public RestDetectionSettings RestDetectionSettings
public NoteDetectionSettings get_NoteDetectionSettings()
public void set_NoteDetectionSettings(NoteDetectionSettings value)
public ChordDetectionSettings get_ChordDetectionSettings()
public void set_ChordDetectionSettings(ChordDetectionSettings value)
public RestDetectionSettings get_RestDetectionSettings()
public void set_RestDetectionSettings(RestDetectionSettings value)
}
public Melanchall.DryWetMidi.Interaction.ObjectType : Enum {
public int value__
public ObjectType TimedEvent
public ObjectType Note
public ObjectType Chord
public ObjectType Rest
}
public Melanchall.DryWetMidi.Interaction.Parameter : object {
private EventHandler`1<TimeChangedEventArgs> TimeChanged
private long _time
private ParameterValueType _valueType
private FourBitNumber <Channel>k__BackingField
public FourBitNumber Channel
public ParameterValueType ValueType
public long Time
public void add_TimeChanged(EventHandler`1<TimeChangedEventArgs> value)
public void remove_TimeChanged(EventHandler`1<TimeChangedEventArgs> value)
public FourBitNumber get_Channel()
public void set_Channel(FourBitNumber value)
public ParameterValueType get_ValueType()
public void set_ValueType(ParameterValueType value)
public long get_Time()
public void set_Time(long value)
public IEnumerable`1<TimedEvent> GetTimedEvents()
}
public Melanchall.DryWetMidi.Interaction.ParameterValueType : Enum {
public int value__
public ParameterValueType Exact
public ParameterValueType Increment
public ParameterValueType Decrement
}
public Melanchall.DryWetMidi.Interaction.PitchBendSensitivityParameter : RegisteredParameter {
public SevenBitNumber DefaultHalfSteps
public SevenBitNumber DefaultCents
private SevenBitNumber <HalfSteps>k__BackingField
private SevenBitNumber <Cents>k__BackingField
public SevenBitNumber HalfSteps
public SevenBitNumber Cents
public void .ctor(SevenBitNumber halfSteps, SevenBitNumber cents)
public void .ctor(SevenBitNumber halfSteps, SevenBitNumber cents, ParameterValueType valueType)
public SevenBitNumber get_HalfSteps()
public void set_HalfSteps(SevenBitNumber value)
public SevenBitNumber get_Cents()
public void set_Cents(SevenBitNumber value)
protected void GetData(SevenBitNumber& msb, Nullable`1& lsb)
protected int GetIncrementStepsCount()
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.RegisteredParameter : Parameter {
private RegisteredParameterType <ParameterType>k__BackingField
public RegisteredParameterType ParameterType
protected void .ctor(RegisteredParameterType parameterType)
public RegisteredParameterType get_ParameterType()
protected void GetData(SevenBitNumber& msb, Nullable`1& lsb)
protected int GetIncrementStepsCount()
public IEnumerable`1<TimedEvent> GetTimedEvents()
public string ToString()
private TimedEvent <GetTimedEvents>b__6_0(Tuple`2<ControlName, SevenBitNumber> controlChange)
}
internal Melanchall.DryWetMidi.Interaction.RegisteredParameterNumbers : object {
private Dictionary`2<RegisteredParameterType, SevenBitNumber> Msbs
private Dictionary`2<RegisteredParameterType, SevenBitNumber> Lsbs
public SevenBitNumber GetMsb(RegisteredParameterType parameterType)
public SevenBitNumber GetLsb(RegisteredParameterType parameterType)
}
public Melanchall.DryWetMidi.Interaction.RegisteredParameterType : Enum {
public byte value__
public RegisteredParameterType PitchBendSensitivity
public RegisteredParameterType ChannelFineTuning
public RegisteredParameterType ChannelCoarseTuning
public RegisteredParameterType TuningProgramChange
public RegisteredParameterType TuningBankSelect
public RegisteredParameterType ModulationDepthRange
}
public Melanchall.DryWetMidi.Interaction.ResizeNotesUtilities : object {
public void ResizeNotes(IEnumerable`1<Note> notes, ITimeSpan length, TimeSpanType distanceCalculationType, TempoMap tempoMap)
public void ResizeNotes(IEnumerable`1<Note> notes, double ratio, TimeSpanType distanceCalculationType, TempoMap tempoMap)
private void ResizeNotesByRatio(IEnumerable`1<Note> notes, double ratio, TimeSpanType distanceCalculationType, TempoMap tempoMap, ITimeSpan startTime)
}
public Melanchall.DryWetMidi.Interaction.Rest : object {
private long _time
private long _length
private Nullable`1<FourBitNumber> <Channel>k__BackingField
private Nullable`1<SevenBitNumber> <NoteNumber>k__BackingField
public long Time
public long Length
public Nullable`1<FourBitNumber> Channel
public Nullable`1<SevenBitNumber> NoteNumber
internal void .ctor(long time, long length, Nullable`1<FourBitNumber> channel, Nullable`1<SevenBitNumber> noteNumber)
public long get_Time()
public void set_Time(long value)
public long get_Length()
public void set_Length(long value)
public Nullable`1<FourBitNumber> get_Channel()
public Nullable`1<SevenBitNumber> get_NoteNumber()
public bool op_Equality(Rest rest1, Rest rest2)
public bool op_Inequality(Rest rest1, Rest rest2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.RestDetectionSettings : object {
private RestSeparationPolicy _restSeparationPolicy
public RestSeparationPolicy RestSeparationPolicy
public RestSeparationPolicy get_RestSeparationPolicy()
public void set_RestSeparationPolicy(RestSeparationPolicy value)
}
public Melanchall.DryWetMidi.Interaction.RestSeparationPolicy : Enum {
public int value__
public RestSeparationPolicy NoSeparation
public RestSeparationPolicy SeparateByChannel
public RestSeparationPolicy SeparateByNoteNumber
public RestSeparationPolicy SeparateByChannelAndNoteNumber
}
public Melanchall.DryWetMidi.Interaction.SplitLengthedObject`1 : object {
private TObject <LeftPart>k__BackingField
private TObject <RightPart>k__BackingField
public TObject LeftPart
public TObject RightPart
internal void .ctor(TObject leftPart, TObject rightPart)
public TObject get_LeftPart()
public TObject get_RightPart()
}
public Melanchall.DryWetMidi.Interaction.SteppedGrid : object {
private ITimeSpan <Start>k__BackingField
private IEnumerable`1<ITimeSpan> <Steps>k__BackingField
public ITimeSpan Start
public IEnumerable`1<ITimeSpan> Steps
public void .ctor(ITimeSpan step)
public void .ctor(ITimeSpan start, ITimeSpan step)
public void .ctor(IEnumerable`1<ITimeSpan> steps)
public void .ctor(ITimeSpan start, IEnumerable`1<ITimeSpan> steps)
public ITimeSpan get_Start()
public IEnumerable`1<ITimeSpan> get_Steps()
public IEnumerable`1<long> GetTimes(TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.Tempo : object {
public Tempo Default
private int MicrosecondsInMinute
private int MicrosecondsInMillisecond
private long <MicrosecondsPerQuarterNote>k__BackingField
public long MicrosecondsPerQuarterNote
public double BeatsPerMinute
public void .ctor(long microsecondsPerQuarterNote)
public long get_MicrosecondsPerQuarterNote()
public double get_BeatsPerMinute()
public Tempo FromMillisecondsPerQuarterNote(long millisecondsPerQuarterNote)
public Tempo FromBeatsPerMinute(double beatsPerMinute)
public bool op_Equality(Tempo tempo1, Tempo tempo2)
public bool op_Inequality(Tempo tempo1, Tempo tempo2)
public bool op_GreaterThan(Tempo tempo1, Tempo tempo2)
public bool op_GreaterThanOrEqual(Tempo tempo1, Tempo tempo2)
public bool op_LessThan(Tempo tempo1, Tempo tempo2)
public bool op_LessThanOrEqual(Tempo tempo1, Tempo tempo2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.TempoMap : object {
public TempoMap Default
private ValueLine`1<TimeSignature> _timeSignatureLine
private ValueLine`1<Tempo> _tempoLine
private List`1<ITempoMapValuesCache> _valuesCaches
private bool _isTempoMapReady
private TimeDivision <TimeDivision>k__BackingField
public TimeDivision TimeDivision
internal ValueLine`1<TimeSignature> TimeSignatureLine
internal ValueLine`1<Tempo> TempoLine
internal bool IsTempoMapReady
internal void .ctor(TimeDivision timeDivision)
public TimeDivision get_TimeDivision()
internal void set_TimeDivision(TimeDivision value)
internal ValueLine`1<TimeSignature> get_TimeSignatureLine()
internal void set_TimeSignatureLine(ValueLine`1<TimeSignature> value)
internal ValueLine`1<Tempo> get_TempoLine()
internal void set_TempoLine(ValueLine`1<Tempo> value)
internal bool get_IsTempoMapReady()
internal void set_IsTempoMapReady(bool value)
public IEnumerable`1<ValueChange`1<Tempo>> GetTempoChanges()
public Tempo GetTempoAtTime(ITimeSpan time)
public IEnumerable`1<ValueChange`1<TimeSignature>> GetTimeSignatureChanges()
public TimeSignature GetTimeSignatureAtTime(ITimeSpan time)
public TempoMap Clone()
public TempoMap Create(Tempo tempo, TimeSignature timeSignature)
public TempoMap Create(Tempo tempo)
public TempoMap Create(TimeSignature timeSignature)
public TempoMap Create(TimeDivision timeDivision)
public TempoMap Create(TimeDivision timeDivision, Tempo tempo)
public TempoMap Create(TimeDivision timeDivision, TimeSignature timeSignature)
public TempoMap Create(TimeDivision timeDivision, Tempo tempo, TimeSignature timeSignature)
internal TempoMap Flip(long centerTime)
internal TCache GetValuesCache()
private void SetGlobalTempo(TempoMap tempoMap, Tempo tempo)
private void SetGlobalTimeSignature(TempoMap tempoMap, TimeSignature timeSignature)
private void InvalidateCaches(TempoMapLine tempoMapLine)
private void OnTimeSignatureChanged(object sender, EventArgs args)
private void OnTempoChanged(object sender, EventArgs args)
}
internal Melanchall.DryWetMidi.Interaction.TempoMapLine : Enum {
public int value__
public TempoMapLine Tempo
public TempoMapLine TimeSignature
}
public Melanchall.DryWetMidi.Interaction.TempoMapManager : object {
private IEnumerable`1<TimedEventsManager> _timedEventsManagers
private bool _disposed
private TempoMap <TempoMap>k__BackingField
public TempoMap TempoMap
public void .ctor(TimeDivision timeDivision)
public void .ctor(TimeDivision timeDivision, IEnumerable`1<EventsCollection> eventsCollections)
public TempoMap get_TempoMap()
public void SetTimeSignature(long time, TimeSignature timeSignature)
public void SetTimeSignature(ITimeSpan time, TimeSignature timeSignature)
public void ClearTimeSignature(long startTime)
public void ClearTimeSignature(ITimeSpan startTime)
public void ClearTimeSignature(long startTime, long endTime)
public void ClearTimeSignature(ITimeSpan startTime, ITimeSpan endTime)
public void SetTempo(long time, Tempo tempo)
public void SetTempo(ITimeSpan time, Tempo tempo)
public void ClearTempo(long startTime)
public void ClearTempo(ITimeSpan startTime)
public void ClearTempo(long startTime, long endTime)
public void ClearTempo(ITimeSpan startTime, ITimeSpan endTime)
public void ClearTempoMap()
public void ReplaceTempoMap(TempoMap tempoMap)
public void SaveChanges()
private IEnumerable`1<TimedEvent> GetTimedEvents(Func`2<TimedEvent, bool> predicate)
private void CollectTimeSignatureChanges()
private void CollectTempoChanges()
private bool IsTempoMapEvent(TimedEvent timedEvent)
private bool IsTempoEvent(TimedEvent timedEvent)
private bool IsTimeSignatureEvent(TimedEvent timedEvent)
private TimedEvent GetSetTempoTimedEvent(ValueChange`1<Tempo> tempoChange)
private TimedEvent GetTimeSignatureTimedEvent(ValueChange`1<TimeSignature> timeSignatureChange)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Interaction.TempoMapManagingUtilities : object {
public TempoMapManager ManageTempoMap(IEnumerable`1<EventsCollection> eventsCollections, TimeDivision timeDivision)
public TempoMapManager ManageTempoMap(IEnumerable`1<TrackChunk> trackChunks, TimeDivision timeDivision)
public TempoMapManager ManageTempoMap(MidiFile file)
public TempoMap GetTempoMap(IEnumerable`1<TrackChunk> trackChunks, TimeDivision timeDivision)
public TempoMap GetTempoMap(MidiFile file)
public void ReplaceTempoMap(IEnumerable`1<EventsCollection> eventsCollections, TempoMap tempoMap)
public void ReplaceTempoMap(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap)
public void ReplaceTempoMap(MidiFile file, TempoMap tempoMap)
}
internal Melanchall.DryWetMidi.Interaction.ThrowIfLengthArgument : object {
internal void IsNegative(string parameterName, long length)
}
internal Melanchall.DryWetMidi.Interaction.ThrowIfNotesTolerance : object {
internal void IsNegative(string parameterName, long notesTolerance)
}
internal Melanchall.DryWetMidi.Interaction.ThrowIfTimeArgument : object {
internal void IsNegative(string parameterName, long time)
internal void StartIsNegative(string parameterName, long time)
internal void EndIsNegative(string parameterName, long time)
}
public Melanchall.DryWetMidi.Interaction.TimeChangedEventArgs : EventArgs {
private long <OldTime>k__BackingField
private long <NewTime>k__BackingField
public long OldTime
public long NewTime
internal void .ctor(long oldTime, long newTime)
public long get_OldTime()
public long get_NewTime()
}
public Melanchall.DryWetMidi.Interaction.TimeConverter : object {
public TTimeSpan ConvertTo(long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(long time, TimeSpanType timeType, TempoMap tempoMap)
public TTimeSpan ConvertTo(ITimeSpan time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan time, TimeSpanType timeType, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan time, Type timeType, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan time, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.TimedEvent : object {
private EventHandler`1<TimeChangedEventArgs> TimeChanged
internal long _time
private MidiEvent <Event>k__BackingField
public MidiEvent Event
public long Time
public void add_TimeChanged(EventHandler`1<TimeChangedEventArgs> value)
public void remove_TimeChanged(EventHandler`1<TimeChangedEventArgs> value)
public void .ctor(MidiEvent midiEvent)
public void .ctor(MidiEvent midiEvent, long time)
public MidiEvent get_Event()
public long get_Time()
public void set_Time(long value)
public TimedEvent Clone()
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.TimedEventsCollection : TimedObjectsCollection`1<TimedEvent> {
private TimedEventsComparer _eventsComparer
internal void .ctor(IEnumerable`1<TimedEvent> events, Comparison`1<MidiEvent> sameTimeEventsComparison)
public IEnumerator`1<TimedEvent> GetEnumerator()
}
internal Melanchall.DryWetMidi.Interaction.TimedEventsComparer : object {
private Comparison`1<MidiEvent> _sameTimeEventsComparison
internal void .ctor(Comparison`1<MidiEvent> sameTimeEventsComparison)
public int Compare(TimedEvent x, TimedEvent y)
}
public Melanchall.DryWetMidi.Interaction.TimedEventsManager : object {
private EventsCollection _eventsCollection
private bool _disposed
private TimedEventsCollection <Events>k__BackingField
public TimedEventsCollection Events
public void .ctor(EventsCollection eventsCollection, Comparison`1<MidiEvent> sameTimeEventsComparison)
public TimedEventsCollection get_Events()
public void SaveChanges()
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Interaction.TimedEventsManagingUtilities : object {
public TimedEvent SetTime(TimedEvent timedEvent, ITimeSpan time, TempoMap tempoMap)
public TimedEventsManager ManageTimedEvents(EventsCollection eventsCollection, Comparison`1<MidiEvent> sameTimeEventsComparison)
public TimedEventsManager ManageTimedEvents(TrackChunk trackChunk, Comparison`1<MidiEvent> sameTimeEventsComparison)
public ICollection`1<TimedEvent> GetTimedEvents(EventsCollection eventsCollection)
public ICollection`1<TimedEvent> GetTimedEvents(TrackChunk trackChunk)
public ICollection`1<TimedEvent> GetTimedEvents(IEnumerable`1<TrackChunk> trackChunks)
public ICollection`1<TimedEvent> GetTimedEvents(MidiFile file)
public void AddEvent(TimedEventsCollection eventsCollection, MidiEvent midiEvent, long time)
public void AddEvent(TimedEventsCollection eventsCollection, MidiEvent midiEvent, ITimeSpan time, TempoMap tempoMap)
public int ProcessTimedEvents(EventsCollection eventsCollection, Action`1<TimedEvent> action)
public int ProcessTimedEvents(EventsCollection eventsCollection, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match)
public int ProcessTimedEvents(TrackChunk trackChunk, Action`1<TimedEvent> action)
public int ProcessTimedEvents(TrackChunk trackChunk, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match)
public int ProcessTimedEvents(IEnumerable`1<TrackChunk> trackChunks, Action`1<TimedEvent> action)
public int ProcessTimedEvents(IEnumerable`1<TrackChunk> trackChunks, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match)
public int ProcessTimedEvents(MidiFile file, Action`1<TimedEvent> action)
public int ProcessTimedEvents(MidiFile file, Action`1<TimedEvent> action, Predicate`1<TimedEvent> match)
public int RemoveTimedEvents(EventsCollection eventsCollection)
public int RemoveTimedEvents(EventsCollection eventsCollection, Predicate`1<TimedEvent> match)
public int RemoveTimedEvents(TrackChunk trackChunk)
public int RemoveTimedEvents(TrackChunk trackChunk, Predicate`1<TimedEvent> match)
public int RemoveTimedEvents(IEnumerable`1<TrackChunk> trackChunks)
public int RemoveTimedEvents(IEnumerable`1<TrackChunk> trackChunks, Predicate`1<TimedEvent> match)
public int RemoveTimedEvents(MidiFile file)
public int RemoveTimedEvents(MidiFile file, Predicate`1<TimedEvent> match)
internal IEnumerable`1<Tuple`2<TimedEvent, int>> GetTimedEventsLazy(IEnumerable`1<TrackChunk> trackChunks, bool cloneEvent)
internal IEnumerable`1<Tuple`2<TimedEvent, int>> GetTimedEventsLazy(EventsCollection[] eventsCollections, int eventsCount, bool cloneEvent)
internal IEnumerable`1<TimedEvent> GetTimedEventsLazy(IEnumerable`1<MidiEvent> events, bool cloneEvent)
internal void SortAndUpdateEvents(EventsCollection eventsCollection, IEnumerable`1<TimedEvent> timedEvents)
internal void SortAndUpdateEvents(EventsCollection[] eventsCollections, IEnumerable`1<Tuple`2<TimedEvent, int>> timedEvents)
}
public Melanchall.DryWetMidi.Interaction.TimedObjectsCollection`1 : object {
protected List`1<TObject> _objects
internal void .ctor(IEnumerable`1<TObject> objects)
public void Add(IEnumerable`1<TObject> objects)
public void Add(TObject[] objects)
public void Remove(IEnumerable`1<TObject> objects)
public void Remove(TObject[] objects)
public void RemoveAll(Predicate`1<TObject> match)
public void Clear()
protected void OnObjectsAdded(IEnumerable`1<TObject> addedObjects)
protected void OnObjectsRemoved(IEnumerable`1<TObject> removedObjects)
public IEnumerator`1<TObject> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
internal Melanchall.DryWetMidi.Interaction.TimedObjectsComparer`1 : object {
public int Compare(TObject x, TObject y)
}
public Melanchall.DryWetMidi.Interaction.TimedObjectUtilities : object {
public TTime TimeAs(ITimedObject obj, TempoMap tempoMap)
public ITimeSpan TimeAs(ITimedObject obj, TimeSpanType timeType, TempoMap tempoMap)
public IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, long time)
public IEnumerable`1<TObject> AtTime(IEnumerable`1<TObject> objects, ITimeSpan time, TempoMap tempoMap)
public TrackChunk ToTrackChunk(IEnumerable`1<ITimedObject> timedObjects)
public MidiFile ToFile(IEnumerable`1<ITimedObject> timedObjects)
public void AddObjects(EventsCollection eventsCollection, IEnumerable`1<ITimedObject> timedObjects)
public void AddObjects(TrackChunk trackChunk, IEnumerable`1<ITimedObject> timedObjects)
private void AddTimedEventsToEventsCollection(EventsCollection eventsCollection, IEnumerable`1<ITimedObject> timedObjects)
}
public Melanchall.DryWetMidi.Interaction.TimeSignature : object {
public TimeSignature Default
private int <Numerator>k__BackingField
private int <Denominator>k__BackingField
public int Numerator
public int Denominator
public void .ctor(int numerator, int denominator)
public int get_Numerator()
public int get_Denominator()
public bool op_Equality(TimeSignature timeSignature1, TimeSignature timeSignature2)
public bool op_Inequality(TimeSignature timeSignature1, TimeSignature timeSignature2)
public bool op_LessThan(TimeSignature timeSignature1, TimeSignature timeSignature2)
public bool op_LessThanOrEqual(TimeSignature timeSignature1, TimeSignature timeSignature2)
public bool op_GreaterThan(TimeSignature timeSignature1, TimeSignature timeSignature2)
public bool op_GreaterThanOrEqual(TimeSignature timeSignature1, TimeSignature timeSignature2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.TimeSpanComparer : object {
public int Compare(ITimeSpan x, ITimeSpan y)
}
internal Melanchall.DryWetMidi.Interaction.TimeSpanConverter : object {
private Dictionary`2<TimeSpanType, Type> TimeSpansTypes
private Dictionary`2<Type, ITimeSpanConverter> Converters
public TTimeSpan ConvertTo(long timeSpan, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(long timeSpan, TimeSpanType timeSpanType, long time, TempoMap tempoMap)
public TTimeSpan ConvertTo(ITimeSpan timeSpan, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan timeSpan, TimeSpanType timeSpanType, long time, TempoMap tempoMap)
public ITimeSpan ConvertTo(ITimeSpan timeSpan, Type timeSpanType, long time, TempoMap tempoMap)
public long ConvertFrom(ITimeSpan timeSpan, long time, TempoMap tempoMap)
private ITimeSpanConverter GetConverter()
private ITimeSpanConverter GetConverter(TimeSpanType timeSpanType)
private ITimeSpanConverter GetConverter(Type timeSpanType)
}
public Melanchall.DryWetMidi.Interaction.TimeSpanMode : Enum {
public int value__
public TimeSpanMode TimeTime
public TimeSpanMode TimeLength
public TimeSpanMode LengthLength
}
public Melanchall.DryWetMidi.Interaction.TimeSpanType : Enum {
public int value__
public TimeSpanType Metric
public TimeSpanType Musical
public TimeSpanType BarBeatTicks
public TimeSpanType BarBeatFraction
public TimeSpanType Midi
}
public Melanchall.DryWetMidi.Interaction.TimeSpanUtilities : object {
private Dictionary`2<TimeSpanType, Parsing`1<ITimeSpan>> Parsers
private Dictionary`2<TimeSpanType, ITimeSpan> MaximumTimeSpans
private Dictionary`2<TimeSpanType, ITimeSpan> ZeroTimeSpans
public bool TryParse(string input, ITimeSpan& timeSpan)
public bool TryParse(string input, TimeSpanType timeSpanType, ITimeSpan& timeSpan)
public ITimeSpan Parse(string input)
public ITimeSpan GetMaxTimeSpan(TimeSpanType timeSpanType)
public ITimeSpan GetZeroTimeSpan(TimeSpanType timeSpanType)
public TTimeSpan GetZeroTimeSpan()
internal double Divide(ITimeSpan timeSpan1, ITimeSpan timeSpan2)
internal ITimeSpan Add(ITimeSpan timeSpan1, ITimeSpan timeSpan2, TimeSpanMode mode)
internal ITimeSpan Subtract(ITimeSpan timeSpan1, ITimeSpan timeSpan2, TimeSpanMode mode)
private Parsing`1<ITimeSpan> GetParsing(Parsing`1<TTimeSpan> parsing)
}
public Melanchall.DryWetMidi.Interaction.TrackChunkUtilities : object {
public void ShiftEvents(TrackChunk trackChunk, ITimeSpan distance, TempoMap tempoMap)
public void ShiftEvents(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan distance, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Interaction.TuningBankSelectParameter : RegisteredParameter {
private SevenBitNumber <BankNumber>k__BackingField
public SevenBitNumber BankNumber
public void .ctor(SevenBitNumber bankNumber)
public void .ctor(SevenBitNumber bankNumber, ParameterValueType valueType)
public SevenBitNumber get_BankNumber()
public void set_BankNumber(SevenBitNumber value)
protected void GetData(SevenBitNumber& msb, Nullable`1& lsb)
protected int GetIncrementStepsCount()
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.TuningProgramChangeParameter : RegisteredParameter {
private SevenBitNumber <ProgramNumber>k__BackingField
public SevenBitNumber ProgramNumber
public void .ctor(SevenBitNumber programNumber)
public void .ctor(SevenBitNumber programNumber, ParameterValueType valueType)
public SevenBitNumber get_ProgramNumber()
public void set_ProgramNumber(SevenBitNumber value)
protected void GetData(SevenBitNumber& msb, Nullable`1& lsb)
protected int GetIncrementStepsCount()
public string ToString()
}
public Melanchall.DryWetMidi.Interaction.ValueChange`1 : object {
private long _time
private TValue <Value>k__BackingField
public long Time
public TValue Value
internal void .ctor(long time, TValue value)
public long get_Time()
public void set_Time(long value)
public TValue get_Value()
public bool op_Equality(ValueChange`1<TValue> change1, ValueChange`1<TValue> change2)
public bool op_Inequality(ValueChange`1<TValue> change1, ValueChange`1<TValue> change2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.Interaction.ValueLine`1 : object {
private EventHandler ValuesChanged
private TimedObjectsComparer`1<ValueChange`1<TValue>> _comparer
private List`1<ValueChange`1<TValue>> _valueChanges
private TValue _defaultValue
private bool _valuesChanged
private long _maxTime
internal void add_ValuesChanged(EventHandler value)
internal void remove_ValuesChanged(EventHandler value)
internal void .ctor(TValue defaultValue)
internal TValue GetValueAtTime(long time)
internal ValueChange`1<TValue> GetValueChangeAtTime(long time)
internal void SetValue(long time, TValue value)
internal void DeleteValues(long startTime)
internal void DeleteValues(long startTime, long endTime)
internal void Clear()
internal void ReplaceValues(ValueLine`1<TValue> valueLine)
internal ValueLine`1<TValue> Reverse(long centerTime)
private void OnValuesChanged(bool forceSort)
private void OnValueChangesNeedSorting()
private void OnValueChangesSortingCompleted()
private void SortValueChanges()
public IEnumerator`1<ValueChange`1<TValue>> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
internal Melanchall.DryWetMidi.Multimedia.CommonApi : NativeApi {
public API_TYPE Api_GetApiType()
public bool Api_CanCompareDevices()
}
internal Melanchall.DryWetMidi.Multimedia.CommonApi32 : CommonApi {
private string LibraryName
private API_TYPE GetApiType()
private bool CanCompareDevices()
public API_TYPE Api_GetApiType()
public bool Api_CanCompareDevices()
}
internal Melanchall.DryWetMidi.Multimedia.CommonApi64 : CommonApi {
private string LibraryName
private API_TYPE GetApiType()
private bool CanCompareDevices()
public API_TYPE Api_GetApiType()
public bool Api_CanCompareDevices()
}
internal Melanchall.DryWetMidi.Multimedia.CommonApiProvider : object {
private bool Is64Bit
private CommonApi _api
public CommonApi Api
public CommonApi get_Api()
}
public Melanchall.DryWetMidi.Multimedia.DeviceAddedRemovedEventArgs : EventArgs {
private MidiDevice <Device>k__BackingField
public MidiDevice Device
internal void .ctor(MidiDevice device)
public MidiDevice get_Device()
}
public Melanchall.DryWetMidi.Multimedia.DevicesConnector : object {
private IInputDevice <InputDevice>k__BackingField
private IReadOnlyCollection`1<IOutputDevice> <OutputDevices>k__BackingField
private bool <AreDevicesConnected>k__BackingField
private DevicesConnectorEventCallback <EventCallback>k__BackingField
public IInputDevice InputDevice
public IReadOnlyCollection`1<IOutputDevice> OutputDevices
public bool AreDevicesConnected
public DevicesConnectorEventCallback EventCallback
public void .ctor(IInputDevice inputDevice, IOutputDevice[] outputDevices)
public IInputDevice get_InputDevice()
public IReadOnlyCollection`1<IOutputDevice> get_OutputDevices()
public bool get_AreDevicesConnected()
private void set_AreDevicesConnected(bool value)
public DevicesConnectorEventCallback get_EventCallback()
public void set_EventCallback(DevicesConnectorEventCallback value)
public void Connect()
public void Disconnect()
private void OnEventReceived(object sender, MidiEventReceivedEventArgs e)
}
public Melanchall.DryWetMidi.Multimedia.DevicesConnectorEventCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public MidiEvent Invoke(MidiEvent inputMidiEvent)
public IAsyncResult BeginInvoke(MidiEvent inputMidiEvent, AsyncCallback callback, object object)
public MidiEvent EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Multimedia.DevicesConnectorUtilities : object {
public DevicesConnector Connect(IInputDevice inputDevice, IOutputDevice[] outputDevices)
}
public Melanchall.DryWetMidi.Multimedia.DevicesWatcher : object {
private EventHandler`1<DeviceAddedRemovedEventArgs> DeviceAdded
private EventHandler`1<DeviceAddedRemovedEventArgs> DeviceRemoved
private DevicesWatcher modreq(System.Runtime.CompilerServices.IsVolatile) _instance
private object _lockObject
public DevicesWatcher Instance
public void add_DeviceAdded(EventHandler`1<DeviceAddedRemovedEventArgs> value)
public void remove_DeviceAdded(EventHandler`1<DeviceAddedRemovedEventArgs> value)
public void add_DeviceRemoved(EventHandler`1<DeviceAddedRemovedEventArgs> value)
public void remove_DeviceRemoved(EventHandler`1<DeviceAddedRemovedEventArgs> value)
public DevicesWatcher get_Instance()
private void OnInputDeviceAdded(object sender, IntPtr info)
private void OnInputDeviceRemoved(object sender, IntPtr info)
private void OnOutputDeviceAdded(object sender, IntPtr info)
private void OnOutputDeviceRemoved(object sender, IntPtr info)
}
public Melanchall.DryWetMidi.Multimedia.ErrorOccurredEventArgs : EventArgs {
private Exception <Exception>k__BackingField
public Exception Exception
internal void .ctor(Exception exception)
public Exception get_Exception()
}
public Melanchall.DryWetMidi.Multimedia.EventCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public MidiEvent Invoke(MidiEvent rawEvent, long rawTime, TimeSpan playbackTime)
public IAsyncResult BeginInvoke(MidiEvent rawEvent, long rawTime, TimeSpan playbackTime, AsyncCallback callback, object object)
public MidiEvent EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Multimedia.HighPrecisionTickGenerator : TickGenerator {
public TimeSpan MinInterval
public TimeSpan MaxInterval
private bool _disposed
private TimerCallback_Win _tickCallback_Win
private TimerCallback_Mac _tickCallback_Mac
private IntPtr _tickGeneratorInfo
protected void Finalize()
protected void Start(TimeSpan interval)
protected void Stop()
private void OnTick_Win(UInt32 uID, UInt32 uMsg, UInt32 dwUser, UInt32 dw1, UInt32 dw2)
private void OnTick_Mac()
private void OnTick()
private TG_STOPRESULT StopInternal()
private TG_STARTRESULT StartHighPrecisionTickGenerator_Win(int intervalInMilliseconds, IntPtr& tickGeneratorInfo)
private TG_STARTRESULT StartHighPrecisionTickGenerator_Mac(int intervalInMilliseconds, IntPtr& tickGeneratorInfo)
public void Dispose()
protected void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Multimedia.IClockDrivenObject {
public void TickClock()
}
public Melanchall.DryWetMidi.Multimedia.IInputDevice {
public bool IsListeningForEvents
public void add_EventReceived(EventHandler`1<MidiEventReceivedEventArgs> value)
public void remove_EventReceived(EventHandler`1<MidiEventReceivedEventArgs> value)
public bool get_IsListeningForEvents()
public void StartEventsListening()
public void StopEventsListening()
}
public Melanchall.DryWetMidi.Multimedia.InputDevice : MidiDevice {
private int SysExBufferSize
private int ChannelParametersBufferSize
private int MidiTimeCodeComponentsCount
private EventHandler`1<MidiEventReceivedEventArgs> EventReceived
private EventHandler`1<MidiTimeCodeReceivedEventArgs> MidiTimeCodeReceived
private InputDeviceProperty[] _supportedProperties
private BytesToMidiEventConverter _bytesToMidiEventConverter
private Callback_Win _callback_Win
private Callback_Mac _callback_Mac
private Byte[] _channelParametersBuffer
private Dictionary`2<MidiTimeCodeComponent, FourBitNumber> _midiTimeCodeComponents
private API_TYPE _apiType
private int _hashCode
private bool <RaiseMidiTimeCodeReceived>k__BackingField
private bool <IsListeningForEvents>k__BackingField
public string Name
public bool RaiseMidiTimeCodeReceived
public bool IsListeningForEvents
public SilentNoteOnPolicy SilentNoteOnPolicy
public void add_EventReceived(EventHandler`1<MidiEventReceivedEventArgs> value)
public void remove_EventReceived(EventHandler`1<MidiEventReceivedEventArgs> value)
public void add_MidiTimeCodeReceived(EventHandler`1<MidiTimeCodeReceivedEventArgs> value)
public void remove_MidiTimeCodeReceived(EventHandler`1<MidiTimeCodeReceivedEventArgs> value)
internal void .ctor(IntPtr info, CreationContext context)
protected void Finalize()
public string get_Name()
public bool get_RaiseMidiTimeCodeReceived()
public void set_RaiseMidiTimeCodeReceived(bool value)
public bool get_IsListeningForEvents()
private void set_IsListeningForEvents(bool value)
public SilentNoteOnPolicy get_SilentNoteOnPolicy()
public void set_SilentNoteOnPolicy(SilentNoteOnPolicy value)
public void StartEventsListening()
public void StopEventsListening()
public object GetProperty(InputDeviceProperty property)
public InputDeviceProperty[] GetSupportedProperties()
public int GetDevicesCount()
public IEnumerable`1<InputDevice> GetAll()
public InputDevice GetByIndex(int index)
public InputDevice GetByName(string name)
private void OnEventReceived(MidiEvent midiEvent)
private void OnMidiTimeCodeReceived(MidiTimeCodeType timeCodeType, int hours, int minutes, int seconds, int frames)
private void EnsureHandleIsCreated()
private void DestroyHandle()
private void OnMessage_Win(IntPtr hMidi, MidiMessage wMsg, IntPtr dwInstance, IntPtr dwParam1, IntPtr dwParam2)
private void OnMessage_Mac(IntPtr pktlist, IntPtr readProcRefCon, IntPtr srcConnRefCon)
private void OnInvalidShortEvent(int message)
private void OnInvalidSysExEvent(IntPtr headerPointer)
private void OnShortMessage(int message)
private void OnSysExMessage(IntPtr sysExHeaderPointer)
private void TryRaiseMidiTimeCodeReceived(MidiTimeCodeEvent midiTimeCodeEvent)
private IN_DISCONNECTRESULT StopEventsListeningSilently()
public bool op_Equality(InputDevice inputDevice1, InputDevice inputDevice2)
public bool op_Inequality(InputDevice inputDevice1, InputDevice inputDevice2)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
internal void Dispose(bool disposing)
}
internal Melanchall.DryWetMidi.Multimedia.InputDeviceApi : NativeApi {
public int Api_GetDevicesCount()
public IN_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info)
public int Api_GetDeviceHashCode(IntPtr info)
public bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2)
public IN_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, int sysExBufferSize, IntPtr& handle)
public IN_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, Callback_Mac callback, IntPtr& handle)
public IN_CLOSERESULT Api_CloseDevice(IntPtr handle)
public IN_RENEWSYSEXBUFFERRESULT Api_RenewSysExBuffer(IntPtr handle, int size)
public IN_CONNECTRESULT Api_Connect(IntPtr handle)
public IN_DISCONNECTRESULT Api_Disconnect(IntPtr handle)
public IN_GETEVENTDATARESULT Api_GetEventData(IntPtr packetList, int packetIndex, IntPtr& data, Int32& length)
public IN_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr header, IntPtr& data, Int32& size)
public bool Api_IsPropertySupported(InputDeviceProperty property)
public IN_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name)
public IN_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer)
public IN_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& product)
public IN_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion)
public IN_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId)
public IN_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner)
}
internal Melanchall.DryWetMidi.Multimedia.InputDeviceApi32 : InputDeviceApi {
private string LibraryName
private int GetInputDevicesCount()
private IN_GETINFORESULT GetInputDeviceInfo(int deviceIndex, IntPtr& info)
private int GetInputDeviceHashCode(IntPtr info)
private bool AreInputDevicesEqual(IntPtr info1, IntPtr info2)
private IN_GETPROPERTYRESULT GetInputDeviceName(IntPtr info, IntPtr& value)
private IN_GETPROPERTYRESULT GetInputDeviceManufacturer(IntPtr info, IntPtr& value)
private IN_GETPROPERTYRESULT GetInputDeviceProduct(IntPtr info, IntPtr& value)
private IN_GETPROPERTYRESULT GetInputDeviceDriverVersion(IntPtr info, Int32& value)
private IN_OPENRESULT OpenInputDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, int sysExBufferSize, IntPtr& handle)
private IN_OPENRESULT OpenInputDevice_Mac(IntPtr info, IntPtr sessionHandle, Callback_Mac callback, IntPtr& handle)
private IN_CLOSERESULT CloseInputDevice(IntPtr handle)
private IN_RENEWSYSEXBUFFERRESULT RenewInputDeviceSysExBuffer(IntPtr handle, int size)
private IN_CONNECTRESULT ConnectToInputDevice(IntPtr handle)
private IN_DISCONNECTRESULT DisconnectFromInputDevice(IntPtr handle)
private IN_GETEVENTDATARESULT GetEventDataFromInputDevice(IntPtr packetList, int packetIndex, IntPtr& data, Int32& length)
private IN_GETSYSEXDATARESULT GetInputDeviceSysExBufferData(IntPtr header, IntPtr& data, Int32& size)
private bool IsInputDevicePropertySupported(InputDeviceProperty property)
private IN_GETPROPERTYRESULT GetInputDeviceUniqueId(IntPtr info, Int32& value)
private IN_GETPROPERTYRESULT GetInputDeviceDriverOwner(IntPtr info, IntPtr& value)
public int Api_GetDevicesCount()
public IN_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info)
public int Api_GetDeviceHashCode(IntPtr info)
public bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2)
public IN_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, int sysExBufferSize, IntPtr& handle)
public IN_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, Callback_Mac callback, IntPtr& handle)
public IN_CLOSERESULT Api_CloseDevice(IntPtr handle)
public IN_RENEWSYSEXBUFFERRESULT Api_RenewSysExBuffer(IntPtr handle, int size)
public IN_CONNECTRESULT Api_Connect(IntPtr handle)
public IN_DISCONNECTRESULT Api_Disconnect(IntPtr handle)
public IN_GETEVENTDATARESULT Api_GetEventData(IntPtr packetList, int packetIndex, IntPtr& data, Int32& length)
public IN_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr header, IntPtr& data, Int32& size)
public bool Api_IsPropertySupported(InputDeviceProperty property)
public IN_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name)
public IN_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer)
public IN_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& product)
public IN_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion)
public IN_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId)
public IN_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner)
}
internal Melanchall.DryWetMidi.Multimedia.InputDeviceApi64 : InputDeviceApi {
private string LibraryName
private int GetInputDevicesCount()
private IN_GETINFORESULT GetInputDeviceInfo(int deviceIndex, IntPtr& info)
private int GetInputDeviceHashCode(IntPtr info)
private bool AreInputDevicesEqual(IntPtr info1, IntPtr info2)
private IN_GETPROPERTYRESULT GetInputDeviceName(IntPtr info, IntPtr& value)
private IN_GETPROPERTYRESULT GetInputDeviceManufacturer(IntPtr info, IntPtr& value)
private IN_GETPROPERTYRESULT GetInputDeviceProduct(IntPtr info, IntPtr& value)
private IN_GETPROPERTYRESULT GetInputDeviceDriverVersion(IntPtr info, Int32& value)
private IN_OPENRESULT OpenInputDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, int sysExBufferSize, IntPtr& handle)
private IN_OPENRESULT OpenInputDevice_Mac(IntPtr info, IntPtr sessionHandle, Callback_Mac callback, IntPtr& handle)
private IN_CLOSERESULT CloseInputDevice(IntPtr handle)
private IN_RENEWSYSEXBUFFERRESULT RenewInputDeviceSysExBuffer(IntPtr handle, int size)
private IN_CONNECTRESULT ConnectToInputDevice(IntPtr handle)
private IN_DISCONNECTRESULT DisconnectFromInputDevice(IntPtr handle)
private IN_GETEVENTDATARESULT GetEventDataFromInputDevice(IntPtr packetList, int packetIndex, IntPtr& data, Int32& length)
private IN_GETSYSEXDATARESULT GetInputDeviceSysExBufferData(IntPtr header, IntPtr& data, Int32& size)
private bool IsInputDevicePropertySupported(InputDeviceProperty property)
private IN_GETPROPERTYRESULT GetInputDeviceUniqueId(IntPtr info, Int32& value)
private IN_GETPROPERTYRESULT GetInputDeviceDriverOwner(IntPtr info, IntPtr& value)
public int Api_GetDevicesCount()
public IN_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info)
public int Api_GetDeviceHashCode(IntPtr info)
public bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2)
public IN_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, int sysExBufferSize, IntPtr& handle)
public IN_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, Callback_Mac callback, IntPtr& handle)
public IN_CLOSERESULT Api_CloseDevice(IntPtr handle)
public IN_RENEWSYSEXBUFFERRESULT Api_RenewSysExBuffer(IntPtr handle, int size)
public IN_CONNECTRESULT Api_Connect(IntPtr handle)
public IN_DISCONNECTRESULT Api_Disconnect(IntPtr handle)
public IN_GETEVENTDATARESULT Api_GetEventData(IntPtr packetList, int packetIndex, IntPtr& data, Int32& length)
public IN_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr header, IntPtr& data, Int32& size)
public bool Api_IsPropertySupported(InputDeviceProperty property)
public IN_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name)
public IN_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer)
public IN_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& product)
public IN_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion)
public IN_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId)
public IN_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner)
}
internal Melanchall.DryWetMidi.Multimedia.InputDeviceApiProvider : object {
private bool Is64Bit
private InputDeviceApi _api
public InputDeviceApi Api
public InputDeviceApi get_Api()
}
public Melanchall.DryWetMidi.Multimedia.InputDeviceProperty : Enum {
public int value__
public InputDeviceProperty Product
public InputDeviceProperty Manufacturer
public InputDeviceProperty DriverVersion
public InputDeviceProperty UniqueId
public InputDeviceProperty DriverOwner
}
public Melanchall.DryWetMidi.Multimedia.IOutputDevice {
public void add_EventSent(EventHandler`1<MidiEventSentEventArgs> value)
public void remove_EventSent(EventHandler`1<MidiEventSentEventArgs> value)
public void PrepareForEventsSending()
public void SendEvent(MidiEvent midiEvent)
}
public Melanchall.DryWetMidi.Multimedia.MidiClock : object {
private double DefaultSpeed
private EventHandler Ticked
private bool _disposed
private bool _startImmediately
private Stopwatch _stopwatch
private TimeSpan _startTime
private double _speed
private TickGenerator _tickGenerator
private TimeSpan <Interval>k__BackingField
private TimeSpan <CurrentTime>k__BackingField
public TimeSpan Interval
public bool IsRunning
public TimeSpan CurrentTime
public double Speed
public void add_Ticked(EventHandler value)
public void remove_Ticked(EventHandler value)
public void .ctor(bool startImmediately, TickGenerator tickGenerator, TimeSpan interval)
protected void Finalize()
public TimeSpan get_Interval()
public bool get_IsRunning()
public TimeSpan get_CurrentTime()
private void set_CurrentTime(TimeSpan value)
public double get_Speed()
public void set_Speed(double value)
public void Start()
public void Stop()
public void Restart()
public void ResetCurrentTime()
public void SetCurrentTime(TimeSpan time)
public void Tick()
internal void StopInternally()
internal void StopShortly()
private void OnTickGenerated(object sender, EventArgs e)
private void OnTicked()
private void EnsureIsNotDisposed()
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Multimedia.MidiClockSettings : object {
private Func`1<TickGenerator> _createTickGeneratorCallback
public Func`1<TickGenerator> CreateTickGeneratorCallback
public Func`1<TickGenerator> get_CreateTickGeneratorCallback()
public void set_CreateTickGeneratorCallback(Func`1<TickGenerator> value)
}
public Melanchall.DryWetMidi.Multimedia.MidiDevice : object {
private EventHandler`1<ErrorOccurredEventArgs> ErrorOccurred
private Dictionary`2<CreationContext, string> ContextsDescriptions
protected IntPtr _info
protected IntPtr _handle
protected bool _disposed
private bool <IsEnabled>k__BackingField
private CreationContext <Context>k__BackingField
public bool IsEnabled
public string Name
internal CreationContext Context
public void add_ErrorOccurred(EventHandler`1<ErrorOccurredEventArgs> value)
public void remove_ErrorOccurred(EventHandler`1<ErrorOccurredEventArgs> value)
internal void .ctor(IntPtr info, CreationContext context)
protected void Finalize()
public bool get_IsEnabled()
public void set_IsEnabled(bool value)
public string get_Name()
internal CreationContext get_Context()
protected void EnsureDeviceIsNotDisposed()
protected void EnsureDeviceIsNotRemoved()
protected void OnError(Exception exception)
protected void EnsureSessionIsCreated()
public string ToString()
public void Dispose()
internal void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Multimedia.MidiDeviceException : MidiException {
private Nullable`1<int> <ErrorCode>k__BackingField
public Nullable`1<int> ErrorCode
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(string message, int errorCode)
public Nullable`1<int> get_ErrorCode()
}
internal Melanchall.DryWetMidi.Multimedia.MidiDevicesSession : object {
private EventHandler`1<IntPtr> InputDeviceAdded
private EventHandler`1<IntPtr> InputDeviceRemoved
private EventHandler`1<IntPtr> OutputDeviceAdded
private EventHandler`1<IntPtr> OutputDeviceRemoved
private object _lockObject
private IntPtr _name
private IntPtr _handle
private InputDeviceCallback _inputDeviceCallback
private OutputDeviceCallback _outputDeviceCallback
internal void add_InputDeviceAdded(EventHandler`1<IntPtr> value)
internal void remove_InputDeviceAdded(EventHandler`1<IntPtr> value)
internal void add_InputDeviceRemoved(EventHandler`1<IntPtr> value)
internal void remove_InputDeviceRemoved(EventHandler`1<IntPtr> value)
internal void add_OutputDeviceAdded(EventHandler`1<IntPtr> value)
internal void remove_OutputDeviceAdded(EventHandler`1<IntPtr> value)
internal void add_OutputDeviceRemoved(EventHandler`1<IntPtr> value)
internal void remove_OutputDeviceRemoved(EventHandler`1<IntPtr> value)
public IntPtr GetSessionHandle()
private void InputDeviceCallback(IntPtr info, bool operation)
private void OutputDeviceCallback(IntPtr info, bool operation)
}
internal Melanchall.DryWetMidi.Multimedia.MidiDevicesSessionApi : NativeApi {
public SESSION_OPENRESULT Api_OpenSession_Mac(IntPtr name, InputDeviceCallback inputDeviceCallback, OutputDeviceCallback outputDeviceCallback, IntPtr& handle)
public SESSION_OPENRESULT Api_OpenSession_Win(IntPtr name, IntPtr& handle)
public SESSION_CLOSERESULT Api_CloseSession(IntPtr handle)
}
internal Melanchall.DryWetMidi.Multimedia.MidiDevicesSessionApi32 : MidiDevicesSessionApi {
private string LibraryName
private SESSION_OPENRESULT OpenSession_Mac(IntPtr name, InputDeviceCallback inputDeviceCallback, OutputDeviceCallback outputDeviceCallback, IntPtr& handle)
private SESSION_OPENRESULT OpenSession_Win(IntPtr name, IntPtr& handle)
private SESSION_CLOSERESULT CloseSession(IntPtr handle)
public SESSION_OPENRESULT Api_OpenSession_Mac(IntPtr name, InputDeviceCallback inputDeviceCallback, OutputDeviceCallback outputDeviceCallback, IntPtr& handle)
public SESSION_OPENRESULT Api_OpenSession_Win(IntPtr name, IntPtr& handle)
public SESSION_CLOSERESULT Api_CloseSession(IntPtr handle)
}
internal Melanchall.DryWetMidi.Multimedia.MidiDevicesSessionApi64 : MidiDevicesSessionApi {
private string LibraryName
private SESSION_OPENRESULT OpenSession_Mac(IntPtr name, InputDeviceCallback inputDeviceCallback, OutputDeviceCallback outputDeviceCallback, IntPtr& handle)
private SESSION_OPENRESULT OpenSession_Win(IntPtr name, IntPtr& handle)
private SESSION_CLOSERESULT CloseSession(IntPtr handle)
public SESSION_OPENRESULT Api_OpenSession_Mac(IntPtr name, InputDeviceCallback inputDeviceCallback, OutputDeviceCallback outputDeviceCallback, IntPtr& handle)
public SESSION_OPENRESULT Api_OpenSession_Win(IntPtr name, IntPtr& handle)
public SESSION_CLOSERESULT Api_CloseSession(IntPtr handle)
}
internal Melanchall.DryWetMidi.Multimedia.MidiDevicesSessionApiProvider : object {
private bool Is64Bit
private MidiDevicesSessionApi _api
public MidiDevicesSessionApi Api
public MidiDevicesSessionApi get_Api()
}
public Melanchall.DryWetMidi.Multimedia.MidiEventPlayedEventArgs : EventArgs {
private MidiEvent <Event>k__BackingField
private object <Metadata>k__BackingField
public MidiEvent Event
public object Metadata
internal void .ctor(MidiEvent midiEvent, object metadata)
public MidiEvent get_Event()
public object get_Metadata()
}
public Melanchall.DryWetMidi.Multimedia.MidiEventReceivedEventArgs : EventArgs {
private MidiEvent <Event>k__BackingField
public MidiEvent Event
public void .ctor(MidiEvent midiEvent)
public MidiEvent get_Event()
}
public Melanchall.DryWetMidi.Multimedia.MidiEventSentEventArgs : EventArgs {
private MidiEvent <Event>k__BackingField
public MidiEvent Event
public void .ctor(MidiEvent midiEvent)
public MidiEvent get_Event()
}
public Melanchall.DryWetMidi.Multimedia.MidiTimeCodeReceivedEventArgs : EventArgs {
private MidiTimeCodeType <Format>k__BackingField
private int <Hours>k__BackingField
private int <Minutes>k__BackingField
private int <Seconds>k__BackingField
private int <Frames>k__BackingField
public MidiTimeCodeType Format
public int Hours
public int Minutes
public int Seconds
public int Frames
internal void .ctor(MidiTimeCodeType timeCodeType, int hours, int minutes, int seconds, int frames)
public MidiTimeCodeType get_Format()
public int get_Hours()
public int get_Minutes()
public int get_Seconds()
public int get_Frames()
}
internal Melanchall.DryWetMidi.Multimedia.NativeApi : object {
protected string LibraryName32
protected string LibraryName64
private Dictionary`2<NativeErrorType, string> ErrorsDescriptions
protected string GetStringFromPointer(IntPtr stringPointer)
public void HandleResult(T result)
}
public Melanchall.DryWetMidi.Multimedia.NoteCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public NotePlaybackData Invoke(NotePlaybackData rawNoteData, long rawTime, long rawLength, TimeSpan playbackTime)
public IAsyncResult BeginInvoke(NotePlaybackData rawNoteData, long rawTime, long rawLength, TimeSpan playbackTime, AsyncCallback callback, object object)
public NotePlaybackData EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Multimedia.NotePlaybackData : object {
public NotePlaybackData SkipNote
private SevenBitNumber <NoteNumber>k__BackingField
private SevenBitNumber <Velocity>k__BackingField
private SevenBitNumber <OffVelocity>k__BackingField
private FourBitNumber <Channel>k__BackingField
private bool <PlayNote>k__BackingField
public SevenBitNumber NoteNumber
public SevenBitNumber Velocity
public SevenBitNumber OffVelocity
public FourBitNumber Channel
internal bool PlayNote
public void .ctor(SevenBitNumber noteNumber, SevenBitNumber velocity, SevenBitNumber offVelocity, FourBitNumber channel)
private void .ctor(bool playNote)
public SevenBitNumber get_NoteNumber()
public SevenBitNumber get_Velocity()
public SevenBitNumber get_OffVelocity()
public FourBitNumber get_Channel()
internal bool get_PlayNote()
internal NoteOnEvent GetNoteOnEvent()
internal NoteOffEvent GetNoteOffEvent()
}
internal Melanchall.DryWetMidi.Multimedia.NotePlaybackEventMetadata : object {
private Note <RawNote>k__BackingField
private TimeSpan <StartTime>k__BackingField
private TimeSpan <EndTime>k__BackingField
private NotePlaybackData <RawNotePlaybackData>k__BackingField
private NotePlaybackData <NotePlaybackData>k__BackingField
private bool <IsCustomNotePlaybackDataSet>k__BackingField
public Note RawNote
public TimeSpan StartTime
public TimeSpan EndTime
public NotePlaybackData RawNotePlaybackData
public NotePlaybackData NotePlaybackData
public bool IsCustomNotePlaybackDataSet
public void .ctor(Note note, TimeSpan startTime, TimeSpan endTime)
public Note get_RawNote()
public TimeSpan get_StartTime()
public TimeSpan get_EndTime()
public NotePlaybackData get_RawNotePlaybackData()
public NotePlaybackData get_NotePlaybackData()
private void set_NotePlaybackData(NotePlaybackData value)
public bool get_IsCustomNotePlaybackDataSet()
private void set_IsCustomNotePlaybackDataSet(bool value)
public Note GetEffectiveNote()
public void SetCustomNotePlaybackData(NotePlaybackData notePlaybackData)
}
public Melanchall.DryWetMidi.Multimedia.NotesEventArgs : EventArgs {
private IEnumerable`1<Note> <Notes>k__BackingField
public IEnumerable`1<Note> Notes
internal void .ctor(Note[] notes)
public IEnumerable`1<Note> get_Notes()
}
public Melanchall.DryWetMidi.Multimedia.OutputDevice : MidiDevice {
private int ShortEventBufferSize
private IEventWriter ChannelEventWriter
private IEventWriter SystemRealTimeEventWriter
private EventHandler`1<MidiEventSentEventArgs> EventSent
private OutputDeviceProperty[] _supportedProperties
private MidiEventToBytesConverter _midiEventToBytesConverter
private BytesToMidiEventConverter _bytesToMidiEventConverter
private Callback_Win _callback
private API_TYPE _apiType
private int _hashCode
public string Name
public void add_EventSent(EventHandler`1<MidiEventSentEventArgs> value)
public void remove_EventSent(EventHandler`1<MidiEventSentEventArgs> value)
internal void .ctor(IntPtr info, CreationContext context)
protected void Finalize()
public string get_Name()
public void SendEvent(MidiEvent midiEvent)
public void TurnAllNotesOff()
public void PrepareForEventsSending()
public int GetDevicesCount()
public object GetProperty(OutputDeviceProperty property)
public OutputDeviceProperty[] GetSupportedProperties()
public IEnumerable`1<OutputDevice> GetAll()
public OutputDevice GetByIndex(int index)
public OutputDevice GetByName(string name)
private void EnsureHandleIsCreated()
private void DestroyHandle()
private void SendSysExEvent(SysExEvent sysExEvent)
private void SendSysExEventData_Win(Byte[] data)
private void SendSysExEventData_Mac(Byte[] data)
private int PackShortEvent(MidiEvent midiEvent)
private void OnMessage(IntPtr hMidi, MidiMessage wMsg, IntPtr dwInstance, IntPtr dwParam1, IntPtr dwParam2)
private void OnSysExEventSent(IntPtr sysExHeaderPointer)
private void OnEventSent(MidiEvent midiEvent)
public bool op_Equality(OutputDevice outputDevice1, OutputDevice outputDevice2)
public bool op_Inequality(OutputDevice outputDevice1, OutputDevice outputDevice2)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
internal void Dispose(bool disposing)
}
internal Melanchall.DryWetMidi.Multimedia.OutputDeviceApi : NativeApi {
public int Api_GetDevicesCount()
public OUT_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info)
public int Api_GetDeviceHashCode(IntPtr info)
public bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2)
public OUT_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, IntPtr& handle)
public OUT_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, IntPtr& handle)
public OUT_CLOSERESULT Api_CloseDevice(IntPtr handle)
public OUT_SENDSHORTRESULT Api_SendShortEvent(IntPtr handle, int message)
public OUT_SENDSYSEXRESULT Api_SendSysExEvent_Mac(IntPtr handle, Byte[] data, ushort dataSize)
public OUT_SENDSYSEXRESULT Api_SendSysExEvent_Win(IntPtr handle, IntPtr data, int size)
public OUT_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr handle, IntPtr header, IntPtr& data, Int32& size)
public bool Api_IsPropertySupported(OutputDeviceProperty property)
public OUT_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name)
public OUT_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer)
public OUT_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& manufacturer)
public OUT_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion)
public OUT_GETPROPERTYRESULT Api_GetDeviceTechnology(IntPtr info, OutputDeviceTechnology& deviceType)
public OUT_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId)
public OUT_GETPROPERTYRESULT Api_GetDeviceVoicesNumber(IntPtr info, Int32& voicesNumber)
public OUT_GETPROPERTYRESULT Api_GetDeviceNotesNumber(IntPtr info, Int32& notesNumber)
public OUT_GETPROPERTYRESULT Api_GetDeviceChannelsMask(IntPtr info, Int32& channelsMask)
public OUT_GETPROPERTYRESULT Api_GetDeviceOptions(IntPtr info, OutputDeviceOption& option)
public OUT_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner)
}
internal Melanchall.DryWetMidi.Multimedia.OutputDeviceApi32 : OutputDeviceApi {
private string LibraryName
private int GetOutputDevicesCount()
private OUT_GETINFORESULT GetOutputDeviceInfo(int deviceIndex, IntPtr& info)
private int GetOutputDeviceHashCode(IntPtr info)
private bool AreOutputDevicesEqual(IntPtr info1, IntPtr info2)
private OUT_GETPROPERTYRESULT GetOutputDeviceName(IntPtr info, IntPtr& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceManufacturer(IntPtr info, IntPtr& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceProduct(IntPtr info, IntPtr& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceDriverVersion(IntPtr info, Int32& value)
private OUT_OPENRESULT OpenOutputDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, IntPtr& handle)
private OUT_OPENRESULT OpenOutputDevice_Mac(IntPtr info, IntPtr sessionHandle, IntPtr& handle)
private OUT_CLOSERESULT CloseOutputDevice(IntPtr handle)
private OUT_SENDSHORTRESULT SendShortEventToOutputDevice(IntPtr handle, int message)
private OUT_SENDSYSEXRESULT SendSysExEventToOutputDevice_Mac(IntPtr handle, Byte[] data, ushort dataSize)
private OUT_SENDSYSEXRESULT SendSysExEventToOutputDevice_Win(IntPtr handle, IntPtr data, int size)
private OUT_GETSYSEXDATARESULT GetOutputDeviceSysExBufferData(IntPtr handle, IntPtr header, IntPtr& data, Int32& size)
private bool IsOutputDevicePropertySupported(OutputDeviceProperty property)
private OUT_GETPROPERTYRESULT GetOutputDeviceTechnology(IntPtr info, OutputDeviceTechnology& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceUniqueId(IntPtr info, Int32& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceVoicesNumber(IntPtr info, Int32& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceNotesNumber(IntPtr info, Int32& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceChannelsMask(IntPtr info, Int32& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceOptions(IntPtr info, OutputDeviceOption& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceDriverOwner(IntPtr info, IntPtr& value)
public int Api_GetDevicesCount()
public OUT_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info)
public int Api_GetDeviceHashCode(IntPtr info)
public bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2)
public OUT_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, IntPtr& handle)
public OUT_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, IntPtr& handle)
public OUT_CLOSERESULT Api_CloseDevice(IntPtr handle)
public OUT_SENDSHORTRESULT Api_SendShortEvent(IntPtr handle, int message)
public OUT_SENDSYSEXRESULT Api_SendSysExEvent_Mac(IntPtr handle, Byte[] data, ushort dataSize)
public OUT_SENDSYSEXRESULT Api_SendSysExEvent_Win(IntPtr handle, IntPtr data, int size)
public OUT_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr handle, IntPtr header, IntPtr& data, Int32& size)
public bool Api_IsPropertySupported(OutputDeviceProperty property)
public OUT_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name)
public OUT_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer)
public OUT_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& product)
public OUT_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion)
public OUT_GETPROPERTYRESULT Api_GetDeviceTechnology(IntPtr info, OutputDeviceTechnology& deviceType)
public OUT_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId)
public OUT_GETPROPERTYRESULT Api_GetDeviceVoicesNumber(IntPtr info, Int32& voicesNumber)
public OUT_GETPROPERTYRESULT Api_GetDeviceNotesNumber(IntPtr info, Int32& notesNumber)
public OUT_GETPROPERTYRESULT Api_GetDeviceChannelsMask(IntPtr info, Int32& channelsMask)
public OUT_GETPROPERTYRESULT Api_GetDeviceOptions(IntPtr info, OutputDeviceOption& option)
public OUT_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner)
}
internal Melanchall.DryWetMidi.Multimedia.OutputDeviceApi64 : OutputDeviceApi {
private string LibraryName
private int GetOutputDevicesCount()
private OUT_GETINFORESULT GetOutputDeviceInfo(int deviceIndex, IntPtr& info)
private int GetOutputDeviceHashCode(IntPtr info)
private bool AreOutputDevicesEqual(IntPtr info1, IntPtr info2)
private OUT_GETPROPERTYRESULT GetOutputDeviceName(IntPtr info, IntPtr& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceManufacturer(IntPtr info, IntPtr& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceProduct(IntPtr info, IntPtr& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceDriverVersion(IntPtr info, Int32& value)
private OUT_OPENRESULT OpenOutputDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, IntPtr& handle)
private OUT_OPENRESULT OpenOutputDevice_Mac(IntPtr info, IntPtr sessionHandle, IntPtr& handle)
private OUT_CLOSERESULT CloseOutputDevice(IntPtr handle)
private OUT_SENDSHORTRESULT SendShortEventToOutputDevice(IntPtr handle, int message)
private OUT_SENDSYSEXRESULT SendSysExEventToOutputDevice_Mac(IntPtr handle, Byte[] data, ushort dataSize)
private OUT_SENDSYSEXRESULT SendSysExEventToOutputDevice_Win(IntPtr handle, IntPtr data, int size)
private OUT_GETSYSEXDATARESULT GetOutputDeviceSysExBufferData(IntPtr handle, IntPtr header, IntPtr& data, Int32& size)
private bool IsOutputDevicePropertySupported(OutputDeviceProperty property)
private OUT_GETPROPERTYRESULT GetOutputDeviceTechnology(IntPtr info, OutputDeviceTechnology& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceUniqueId(IntPtr info, Int32& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceVoicesNumber(IntPtr info, Int32& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceNotesNumber(IntPtr info, Int32& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceChannelsMask(IntPtr info, Int32& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceOptions(IntPtr info, OutputDeviceOption& value)
private OUT_GETPROPERTYRESULT GetOutputDeviceDriverOwner(IntPtr info, IntPtr& value)
public int Api_GetDevicesCount()
public OUT_GETINFORESULT Api_GetDeviceInfo(int deviceIndex, IntPtr& info)
public int Api_GetDeviceHashCode(IntPtr info)
public bool Api_AreDevicesEqual(IntPtr info1, IntPtr info2)
public OUT_OPENRESULT Api_OpenDevice_Win(IntPtr info, IntPtr sessionHandle, Callback_Win callback, IntPtr& handle)
public OUT_OPENRESULT Api_OpenDevice_Mac(IntPtr info, IntPtr sessionHandle, IntPtr& handle)
public OUT_CLOSERESULT Api_CloseDevice(IntPtr handle)
public OUT_SENDSHORTRESULT Api_SendShortEvent(IntPtr handle, int message)
public OUT_SENDSYSEXRESULT Api_SendSysExEvent_Mac(IntPtr handle, Byte[] data, ushort dataSize)
public OUT_SENDSYSEXRESULT Api_SendSysExEvent_Win(IntPtr handle, IntPtr data, int size)
public OUT_GETSYSEXDATARESULT Api_GetSysExBufferData(IntPtr handle, IntPtr header, IntPtr& data, Int32& size)
public bool Api_IsPropertySupported(OutputDeviceProperty property)
public OUT_GETPROPERTYRESULT Api_GetDeviceName(IntPtr info, String& name)
public OUT_GETPROPERTYRESULT Api_GetDeviceManufacturer(IntPtr info, String& manufacturer)
public OUT_GETPROPERTYRESULT Api_GetDeviceProduct(IntPtr info, String& product)
public OUT_GETPROPERTYRESULT Api_GetDeviceDriverVersion(IntPtr info, Int32& driverVersion)
public OUT_GETPROPERTYRESULT Api_GetDeviceTechnology(IntPtr info, OutputDeviceTechnology& deviceType)
public OUT_GETPROPERTYRESULT Api_GetDeviceUniqueId(IntPtr info, Int32& uniqueId)
public OUT_GETPROPERTYRESULT Api_GetDeviceVoicesNumber(IntPtr info, Int32& voicesNumber)
public OUT_GETPROPERTYRESULT Api_GetDeviceNotesNumber(IntPtr info, Int32& notesNumber)
public OUT_GETPROPERTYRESULT Api_GetDeviceChannelsMask(IntPtr info, Int32& channelsMask)
public OUT_GETPROPERTYRESULT Api_GetDeviceOptions(IntPtr info, OutputDeviceOption& option)
public OUT_GETPROPERTYRESULT Api_GetDeviceDriverOwner(IntPtr info, String& driverOwner)
}
internal Melanchall.DryWetMidi.Multimedia.OutputDeviceApiProvider : object {
private bool Is64Bit
private OutputDeviceApi _api
public OutputDeviceApi Api
public OutputDeviceApi get_Api()
}
public Melanchall.DryWetMidi.Multimedia.OutputDeviceOption : Enum {
public int value__
public OutputDeviceOption Unknown
public OutputDeviceOption PatchCaching
public OutputDeviceOption LeftRightVolume
public OutputDeviceOption Stream
public OutputDeviceOption Volume
}
public Melanchall.DryWetMidi.Multimedia.OutputDeviceProperty : Enum {
public int value__
public OutputDeviceProperty Product
public OutputDeviceProperty Manufacturer
public OutputDeviceProperty DriverVersion
public OutputDeviceProperty Technology
public OutputDeviceProperty UniqueId
public OutputDeviceProperty VoicesNumber
public OutputDeviceProperty NotesNumber
public OutputDeviceProperty Channels
public OutputDeviceProperty Options
public OutputDeviceProperty DriverOwner
}
public Melanchall.DryWetMidi.Multimedia.OutputDeviceTechnology : Enum {
public int value__
public OutputDeviceTechnology Unknown
public OutputDeviceTechnology MidiPort
public OutputDeviceTechnology Synth
public OutputDeviceTechnology SquareSynth
public OutputDeviceTechnology FmSynth
public OutputDeviceTechnology Mapper
public OutputDeviceTechnology Wavetable
public OutputDeviceTechnology SoftwareSynth
}
public Melanchall.DryWetMidi.Multimedia.Playback : object {
private TimeSpan ClockInterval
private TimeSpan MinPlaybackTime
private TimeSpan MaxPlaybackTime
private EventHandler Started
private EventHandler Stopped
private EventHandler Finished
private EventHandler RepeatStarted
private EventHandler`1<NotesEventArgs> NotesPlaybackStarted
private EventHandler`1<NotesEventArgs> NotesPlaybackFinished
private EventHandler`1<MidiEventPlayedEventArgs> EventPlayed
private EventHandler`1<ErrorOccurredEventArgs> DeviceErrorOccurred
private IEnumerator`1<PlaybackEvent> _eventsEnumerator
private TimeSpan _duration
private long _durationInTicks
private ITimeSpan _playbackStart
private TimeSpan _playbackStartMetric
private ITimeSpan _playbackEnd
private TimeSpan _playbackEndMetric
private bool _hasBeenStarted
private MidiClock _clock
private ConcurrentDictionary`2<NotePlaybackEventMetadata, byte> _activeNotesMetadata
private List`1<NotePlaybackEventMetadata> _notesMetadata
private PlaybackDataTracker _playbackDataTracker
private bool _disposed
private TempoMap <TempoMap>k__BackingField
private IOutputDevice <OutputDevice>k__BackingField
private bool <Loop>k__BackingField
private bool <InterruptNotesOnStop>k__BackingField
private bool <TrackNotes>k__BackingField
private PlaybackSnapping <Snapping>k__BackingField
private NoteCallback <NoteCallback>k__BackingField
private EventCallback <EventCallback>k__BackingField
public TempoMap TempoMap
public IOutputDevice OutputDevice
public bool IsRunning
public bool Loop
public bool InterruptNotesOnStop
public bool TrackNotes
public bool TrackProgram
public bool TrackPitchValue
public bool TrackControlValue
public double Speed
public PlaybackSnapping Snapping
public NoteCallback NoteCallback
public EventCallback EventCallback
public ITimeSpan PlaybackStart
public ITimeSpan PlaybackEnd
public void add_Started(EventHandler value)
public void remove_Started(EventHandler value)
public void add_Stopped(EventHandler value)
public void remove_Stopped(EventHandler value)
public void add_Finished(EventHandler value)
public void remove_Finished(EventHandler value)
public void add_RepeatStarted(EventHandler value)
public void remove_RepeatStarted(EventHandler value)
public void add_NotesPlaybackStarted(EventHandler`1<NotesEventArgs> value)
public void remove_NotesPlaybackStarted(EventHandler`1<NotesEventArgs> value)
public void add_NotesPlaybackFinished(EventHandler`1<NotesEventArgs> value)
public void remove_NotesPlaybackFinished(EventHandler`1<NotesEventArgs> value)
public void add_EventPlayed(EventHandler`1<MidiEventPlayedEventArgs> value)
public void remove_EventPlayed(EventHandler`1<MidiEventPlayedEventArgs> value)
public void add_DeviceErrorOccurred(EventHandler`1<ErrorOccurredEventArgs> value)
public void remove_DeviceErrorOccurred(EventHandler`1<ErrorOccurredEventArgs> value)
public void .ctor(IEnumerable`1<ITimedObject> timedObjects, TempoMap tempoMap, PlaybackSettings playbackSettings)
public void .ctor(IEnumerable`1<ITimedObject> timedObjects, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings)
protected void Finalize()
public TempoMap get_TempoMap()
public IOutputDevice get_OutputDevice()
public void set_OutputDevice(IOutputDevice value)
public bool get_IsRunning()
public bool get_Loop()
public void set_Loop(bool value)
public bool get_InterruptNotesOnStop()
public void set_InterruptNotesOnStop(bool value)
public bool get_TrackNotes()
public void set_TrackNotes(bool value)
public bool get_TrackProgram()
public void set_TrackProgram(bool value)
public bool get_TrackPitchValue()
public void set_TrackPitchValue(bool value)
public bool get_TrackControlValue()
public void set_TrackControlValue(bool value)
public double get_Speed()
public void set_Speed(double value)
public PlaybackSnapping get_Snapping()
public NoteCallback get_NoteCallback()
public void set_NoteCallback(NoteCallback value)
public EventCallback get_EventCallback()
public void set_EventCallback(EventCallback value)
public ITimeSpan get_PlaybackStart()
public void set_PlaybackStart(ITimeSpan value)
public ITimeSpan get_PlaybackEnd()
public void set_PlaybackEnd(ITimeSpan value)
public ITimeSpan GetDuration(TimeSpanType durationType)
public TTimeSpan GetDuration()
public ITimeSpan GetCurrentTime(TimeSpanType timeType)
public TTimeSpan GetCurrentTime()
public void Start()
public void Stop()
public void Play()
public bool MoveToSnapPoint(SnapPoint snapPoint)
public bool MoveToFirstSnapPoint()
public bool MoveToFirstSnapPoint(TData data)
public bool MoveToPreviousSnapPoint(SnapPointsGroup snapPointsGroup)
public bool MoveToPreviousSnapPoint()
public bool MoveToPreviousSnapPoint(TData data)
public bool MoveToNextSnapPoint(SnapPointsGroup snapPointsGroup)
public bool MoveToNextSnapPoint()
public bool MoveToNextSnapPoint(TData data)
public void MoveToStart()
public void MoveToTime(ITimeSpan time)
public void MoveForward(ITimeSpan step)
public void MoveBack(ITimeSpan step)
protected bool TryPlayEvent(MidiEvent midiEvent, object metadata)
protected IEnumerable`1<TimedEvent> GetTimedEvents(ITimedObject timedObject)
private bool TryToMoveToSnapPoint(SnapPoint snapPoint)
private void SendTrackedData(TrackedParameterType trackedParameterType)
private void StopStartNotes()
private void OnStarted()
private void OnStopped()
private void OnFinished()
private void OnRepeatStarted()
private void OnNotesPlaybackStarted(Note[] notes)
private void OnNotesPlaybackFinished(Note[] notes)
private void OnEventPlayed(MidiEvent midiEvent, object metadata)
private void OnDeviceErrorOccurred(Exception exception)
private void OnClockTicked(object sender, EventArgs e)
private void EnsureIsNotDisposed()
private void SetStartTime(ITimeSpan time)
private void PlayEvent(MidiEvent midiEvent, object metadata)
private bool TryPlayNoteEvent(NotePlaybackEventMetadata noteMetadata, bool isNoteOnEvent, TimeSpan time, Note& note)
private bool TryPlayNoteEvent(PlaybackEvent playbackEvent, Note& note)
private bool TryPlayNoteEvent(NotePlaybackEventMetadata noteMetadata, MidiEvent midiEvent, bool isNoteOnEvent, TimeSpan time, Note& note)
private ICollection`1<PlaybackEvent> GetPlaybackEvents(IEnumerable`1<ITimedObject> timedObjects, TempoMap tempoMap)
private PlaybackEvent GetPlaybackEvent(TimedEvent timedEvent, TempoMap tempoMap)
private IEnumerable`1<PlaybackEvent> GetPlaybackEvents(Chord chord, TempoMap tempoMap)
private IEnumerable`1<PlaybackEvent> GetPlaybackEvents(Note note, TempoMap tempoMap)
private PlaybackEvent GetPlaybackEventWithNoteMetadata(TimedEvent timedEvent, TempoMap tempoMap, NotePlaybackEventMetadata noteMetadata)
public void TickClock()
public void Dispose()
private void Dispose(bool disposing)
private bool <Play>b__99_0()
}
public Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTime : object {
private Playback <Playback>k__BackingField
private ITimeSpan <Time>k__BackingField
public Playback Playback
public ITimeSpan Time
internal void .ctor(Playback playback, ITimeSpan time)
public Playback get_Playback()
public ITimeSpan get_Time()
}
public Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTimeChangedEventArgs : EventArgs {
private IEnumerable`1<PlaybackCurrentTime> <Times>k__BackingField
public IEnumerable`1<PlaybackCurrentTime> Times
internal void .ctor(IEnumerable`1<PlaybackCurrentTime> times)
public IEnumerable`1<PlaybackCurrentTime> get_Times()
}
public Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTimeWatcher : object {
private TimeSpan DefaultPollingInterval
private EventHandler`1<PlaybackCurrentTimeChangedEventArgs> CurrentTimeChanged
private Lazy`1<PlaybackCurrentTimeWatcher> _lazyInstance
private Dictionary`2<Playback, TimeSpanType> _playbacks
private object _playbacksLock
private MidiClockSettings _clockSettings
private MidiClock _clock
private TimeSpan _pollingInterval
private bool _disposed
public PlaybackCurrentTimeWatcher Instance
public TimeSpan PollingInterval
public IEnumerable`1<Playback> Playbacks
public bool IsWatching
public void add_CurrentTimeChanged(EventHandler`1<PlaybackCurrentTimeChangedEventArgs> value)
public void remove_CurrentTimeChanged(EventHandler`1<PlaybackCurrentTimeChangedEventArgs> value)
private void .ctor(MidiClockSettings clockSettings)
public PlaybackCurrentTimeWatcher get_Instance()
public TimeSpan get_PollingInterval()
public void set_PollingInterval(TimeSpan value)
public IEnumerable`1<Playback> get_Playbacks()
public bool get_IsWatching()
public void Start()
public void Stop()
public void AddPlayback(Playback playback, TimeSpanType timeType)
public void RemovePlayback(Playback playback)
public void RemoveAllPlaybacks()
private void OnTick(object sender, EventArgs e)
private void OnCurrentTimeChanged(IEnumerable`1<PlaybackCurrentTime> times)
private void EnsureIsNotDisposed()
private void DisposeClock()
private void CreateClock(TimeSpan pollingInterval)
private void RecreateClock()
public void TickClock()
public void Dispose()
private void Dispose(bool disposing)
}
internal Melanchall.DryWetMidi.Multimedia.PlaybackDataTracker : object {
private ProgramChange DefaultProgramChange
private PitchValueChange DefaultPitchValueChange
private ControlValueChange DefaultControlValueChange
private ProgramChange[] _currentProgramChanges
private ValueLine`1[] _programsChangesLinesByChannels
private PitchValueChange[] _currentPitchValues
private ValueLine`1[] _pitchValuesLinesByChannel
private Dictionary`2[] _currentControlsValuesChangesByChannel
private Dictionary`2[] _controlsValuesChangesLinesByChannel
private TempoMap _tempoMap
private Dictionary`2<TrackedParameterType, Func`2<long, IEnumerable`1<EventWithMetadata>>> _getParameterEventsAtTime
private bool <TrackProgram>k__BackingField
private bool <TrackPitchValue>k__BackingField
private bool <TrackControlValue>k__BackingField
public bool TrackProgram
public bool TrackPitchValue
public bool TrackControlValue
public void .ctor(TempoMap tempoMap)
public bool get_TrackProgram()
public void set_TrackProgram(bool value)
public bool get_TrackPitchValue()
public void set_TrackPitchValue(bool value)
public bool get_TrackControlValue()
public void set_TrackControlValue(bool value)
public void InitializeData(MidiEvent midiEvent, long time, object metadata)
public void UpdateCurrentData(MidiEvent midiEvent, object metadata)
public IEnumerable`1<EventWithMetadata> GetEventsAtTime(TimeSpan time, TrackedParameterType trackedParameterType)
private void UpdateCurrentProgramChangeData(ProgramChangeEvent programChangeEvent, object metadata)
private void InitializeProgramChangeData(ProgramChangeEvent programChangeEvent, long time, object metadata)
private IEnumerable`1<EventWithMetadata> GetProgramChangeEventsAtTime(long time)
private void UpdateCurrentPitchBendData(PitchBendEvent pitchBendEvent, object metadata)
private void InitializePitchBendData(PitchBendEvent pitchBendEvent, long time, object metadata)
private IEnumerable`1<EventWithMetadata> GetPitchBendEventsAtTime(long time)
private void UpdateCurrentControlData(ControlChangeEvent controlChangeEvent, object metadata)
private void InitializeControlData(ControlChangeEvent controlChangeEvent, long time, object metadata)
private IEnumerable`1<EventWithMetadata> GetControlChangeEventsAtTime(long time)
private IEnumerable`1<EventWithMetadata> <.ctor>b__17_0(long time)
private IEnumerable`1<EventWithMetadata> <.ctor>b__17_1(long time)
private IEnumerable`1<EventWithMetadata> <.ctor>b__17_2(long time)
}
internal Melanchall.DryWetMidi.Multimedia.PlaybackEvent : object {
private MidiEvent <Event>k__BackingField
private TimeSpan <Time>k__BackingField
private long <RawTime>k__BackingField
private PlaybackEventMetadata <Metadata>k__BackingField
public MidiEvent Event
public TimeSpan Time
public long RawTime
public PlaybackEventMetadata Metadata
public void .ctor(MidiEvent midiEvent, TimeSpan time, long rawTime)
public MidiEvent get_Event()
public TimeSpan get_Time()
public long get_RawTime()
public PlaybackEventMetadata get_Metadata()
}
public Melanchall.DryWetMidi.Multimedia.PlaybackEventCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public MidiEvent Invoke(MidiEvent midiEvent, TimeSpan time, long rawTime)
public IAsyncResult BeginInvoke(MidiEvent midiEvent, TimeSpan time, long rawTime, AsyncCallback callback, object object)
public MidiEvent EndInvoke(IAsyncResult result)
}
internal Melanchall.DryWetMidi.Multimedia.PlaybackEventMetadata : object {
private NotePlaybackEventMetadata <Note>k__BackingField
private TimedEventPlaybackEventMetadata <TimedEvent>k__BackingField
public NotePlaybackEventMetadata Note
public TimedEventPlaybackEventMetadata TimedEvent
public NotePlaybackEventMetadata get_Note()
public void set_Note(NotePlaybackEventMetadata value)
public TimedEventPlaybackEventMetadata get_TimedEvent()
public void set_TimedEvent(TimedEventPlaybackEventMetadata value)
}
internal Melanchall.DryWetMidi.Multimedia.PlaybackEventsComparer : object {
public int Compare(PlaybackEvent x, PlaybackEvent y)
}
public Melanchall.DryWetMidi.Multimedia.PlaybackSettings : object {
private MidiClockSettings <ClockSettings>k__BackingField
private NoteDetectionSettings <NoteDetectionSettings>k__BackingField
public MidiClockSettings ClockSettings
public NoteDetectionSettings NoteDetectionSettings
public MidiClockSettings get_ClockSettings()
public void set_ClockSettings(MidiClockSettings value)
public NoteDetectionSettings get_NoteDetectionSettings()
public void set_NoteDetectionSettings(NoteDetectionSettings value)
}
public Melanchall.DryWetMidi.Multimedia.PlaybackSnapping : object {
private List`1<SnapPoint> _snapPoints
private IEnumerable`1<PlaybackEvent> _playbackEvents
private TempoMap _tempoMap
private TimeSpan _maxTime
private SnapPointsGroup _noteStartSnapPointsGroup
private SnapPointsGroup _noteEndSnapPointsGroup
private bool <IsEnabled>k__BackingField
public IEnumerable`1<SnapPoint> SnapPoints
public bool IsEnabled
internal void .ctor(IEnumerable`1<PlaybackEvent> playbackEvents, TempoMap tempoMap)
public IEnumerable`1<SnapPoint> get_SnapPoints()
public bool get_IsEnabled()
public void set_IsEnabled(bool value)
public SnapPoint`1<TData> AddSnapPoint(ITimeSpan time, TData data)
public SnapPoint`1<Guid> AddSnapPoint(ITimeSpan time)
public void RemoveSnapPoint(SnapPoint`1<TData> snapPoint)
public void RemoveSnapPointsByData(Predicate`1<TData> predicate)
public void Clear()
public SnapPointsGroup SnapToGrid(IGrid grid)
public SnapPointsGroup SnapToNotesStarts()
public SnapPointsGroup SnapToNotesEnds()
internal SnapPoint GetNextSnapPoint(TimeSpan time, SnapPointsGroup snapPointsGroup)
internal SnapPoint GetNextSnapPoint(TimeSpan time)
internal SnapPoint`1<TData> GetNextSnapPoint(TimeSpan time, TData data)
internal SnapPoint GetPreviousSnapPoint(TimeSpan time, SnapPointsGroup snapPointsGroup)
internal SnapPoint GetPreviousSnapPoint(TimeSpan time)
internal SnapPoint`1<TData> GetPreviousSnapPoint(TimeSpan time, TData data)
internal IEnumerable`1<SnapPoint> GetActiveSnapPoints()
private IEnumerable`1<SnapPoint> GetNextSnapPoints(IEnumerable`1<SnapPoint> snapPoints, TimeSpan time)
private IEnumerable`1<SnapPoint> GetPreviousSnapPoints(IEnumerable`1<SnapPoint> snapPoints, TimeSpan time)
private bool IsSnapPointWithData(SnapPoint snapPoint, TData data)
private SnapPointsGroup SnapToNoteEvents(bool snapToNoteOn)
private IEnumerable`1<SnapPoint> GetActiveSnapPoints(SnapPointsGroup snapPointsGroup)
}
public Melanchall.DryWetMidi.Multimedia.PlaybackUtilities : object {
public Playback GetPlayback(IEnumerable`1<MidiEvent> events, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings)
public Playback GetPlayback(IEnumerable`1<MidiEvent> events, TempoMap tempoMap, PlaybackSettings playbackSettings)
public Playback GetPlayback(TrackChunk trackChunk, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings)
public Playback GetPlayback(TrackChunk trackChunk, TempoMap tempoMap, PlaybackSettings playbackSettings)
public Playback GetPlayback(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings)
public Playback GetPlayback(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, PlaybackSettings playbackSettings)
public Playback GetPlayback(MidiFile midiFile, IOutputDevice outputDevice, PlaybackSettings playbackSettings)
public Playback GetPlayback(MidiFile midiFile, PlaybackSettings playbackSettings)
public Playback GetPlayback(Pattern pattern, TempoMap tempoMap, FourBitNumber channel, IOutputDevice outputDevice, PlaybackSettings playbackSettings)
public Playback GetPlayback(Pattern pattern, TempoMap tempoMap, FourBitNumber channel, PlaybackSettings playbackSettings)
public Playback GetPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, SevenBitNumber programNumber, PlaybackSettings playbackSettings)
public Playback GetPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidiProgram generalMidiProgram, PlaybackSettings playbackSettings)
public Playback GetPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidi2Program generalMidi2Program, PlaybackSettings playbackSettings)
public void Play(TrackChunk trackChunk, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings)
public void Play(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings)
public void Play(MidiFile midiFile, IOutputDevice outputDevice, PlaybackSettings playbackSettings)
public void Play(Pattern pattern, TempoMap tempoMap, FourBitNumber channel, IOutputDevice outputDevice, PlaybackSettings playbackSettings)
public void Play(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, SevenBitNumber programNumber, PlaybackSettings playbackSettings)
public void Play(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidiProgram generalMidiProgram, PlaybackSettings playbackSettings)
public void Play(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidi2Program generalMidi2Program, PlaybackSettings playbackSettings)
private Playback GetMusicalObjectsPlayback(IEnumerable`1<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, Func`2<FourBitNumber, IEnumerable`1<MidiEvent>> programChangeEventsGetter, PlaybackSettings playbackSettings)
}
public Melanchall.DryWetMidi.Multimedia.Recording : object {
private EventHandler Started
private EventHandler Stopped
private List`1<RecordingEvent> _events
private Stopwatch _stopwatch
private bool _disposed
private TempoMap <TempoMap>k__BackingField
private IInputDevice <InputDevice>k__BackingField
public TempoMap TempoMap
public IInputDevice InputDevice
public bool IsRunning
public void add_Started(EventHandler value)
public void remove_Started(EventHandler value)
public void add_Stopped(EventHandler value)
public void remove_Stopped(EventHandler value)
public void .ctor(TempoMap tempoMap, IInputDevice inputDevice)
public TempoMap get_TempoMap()
public IInputDevice get_InputDevice()
public bool get_IsRunning()
public ITimeSpan GetDuration(TimeSpanType durationType)
public TTimeSpan GetDuration()
public IReadOnlyList`1<TimedEvent> GetEvents()
public void Start()
public void Stop()
private void OnStarted()
private void OnStopped()
private void OnEventReceived(object sender, MidiEventReceivedEventArgs e)
public void Dispose()
private void Dispose(bool disposing)
private TimedEvent <GetEvents>b__20_0(RecordingEvent e)
}
internal Melanchall.DryWetMidi.Multimedia.RecordingEvent : object {
private MidiEvent <Event>k__BackingField
private TimeSpan <Time>k__BackingField
public MidiEvent Event
public TimeSpan Time
public void .ctor(MidiEvent midiEvent, TimeSpan time)
public MidiEvent get_Event()
public TimeSpan get_Time()
}
public Melanchall.DryWetMidi.Multimedia.RecordingUtilities : object {
public TrackChunk ToTrackChunk(Recording recording)
public MidiFile ToFile(Recording recording)
}
public Melanchall.DryWetMidi.Multimedia.RegularPrecisionTickGenerator : TickGenerator {
public TimeSpan MinInterval
public TimeSpan MaxInterval
private Timer _timer
private bool _disposed
protected void Start(TimeSpan interval)
protected void Stop()
private void OnElapsed(object sender, ElapsedEventArgs e)
protected void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Multimedia.SnapPoint : object {
private bool <IsEnabled>k__BackingField
private TimeSpan <Time>k__BackingField
private SnapPointsGroup <SnapPointsGroup>k__BackingField
public bool IsEnabled
public TimeSpan Time
public SnapPointsGroup SnapPointsGroup
internal void .ctor(TimeSpan time)
public bool get_IsEnabled()
public void set_IsEnabled(bool value)
public TimeSpan get_Time()
public SnapPointsGroup get_SnapPointsGroup()
internal void set_SnapPointsGroup(SnapPointsGroup value)
}
public Melanchall.DryWetMidi.Multimedia.SnapPoint`1 : SnapPoint {
private TData <Data>k__BackingField
public TData Data
internal void .ctor(TimeSpan time, TData data)
public TData get_Data()
}
public Melanchall.DryWetMidi.Multimedia.SnapPointsGroup : object {
private bool <IsEnabled>k__BackingField
public bool IsEnabled
public bool get_IsEnabled()
public void set_IsEnabled(bool value)
}
public Melanchall.DryWetMidi.Multimedia.TickGenerator : object {
private EventHandler TickGenerated
private bool <IsRunning>k__BackingField
protected bool IsRunning
public void add_TickGenerated(EventHandler value)
public void remove_TickGenerated(EventHandler value)
protected bool get_IsRunning()
protected void set_IsRunning(bool value)
internal void TryStart(TimeSpan interval)
internal void TryStop()
protected void GenerateTick()
protected void Start(TimeSpan interval)
protected void Stop()
public void Dispose()
protected void Dispose(bool disposing)
}
internal Melanchall.DryWetMidi.Multimedia.TickGeneratorApi : NativeApi {
public TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Win(int interval, TimerCallback_Win callback, IntPtr& info)
public TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Mac(int interval, TimerCallback_Mac callback, IntPtr& info)
public TG_STOPRESULT Api_StopHighPrecisionTickGenerator(IntPtr info)
}
internal Melanchall.DryWetMidi.Multimedia.TickGeneratorApi32 : TickGeneratorApi {
private string LibraryName
private TG_STARTRESULT StartHighPrecisionTickGenerator_Win(int interval, TimerCallback_Win callback, IntPtr& info)
private TG_STARTRESULT StartHighPrecisionTickGenerator_Mac(int interval, TimerCallback_Mac callback, IntPtr& info)
private TG_STOPRESULT StopHighPrecisionTickGenerator(IntPtr info)
public TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Win(int interval, TimerCallback_Win callback, IntPtr& info)
public TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Mac(int interval, TimerCallback_Mac callback, IntPtr& info)
public TG_STOPRESULT Api_StopHighPrecisionTickGenerator(IntPtr info)
}
internal Melanchall.DryWetMidi.Multimedia.TickGeneratorApi64 : TickGeneratorApi {
private string LibraryName
public TG_STARTRESULT StartHighPrecisionTickGenerator_Win(int interval, TimerCallback_Win callback, IntPtr& info)
public TG_STARTRESULT StartHighPrecisionTickGenerator_Mac(int interval, TimerCallback_Mac callback, IntPtr& info)
public TG_STOPRESULT StopHighPrecisionTickGenerator(IntPtr info)
public TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Win(int interval, TimerCallback_Win callback, IntPtr& info)
public TG_STARTRESULT Api_StartHighPrecisionTickGenerator_Mac(int interval, TimerCallback_Mac callback, IntPtr& info)
public TG_STOPRESULT Api_StopHighPrecisionTickGenerator(IntPtr info)
}
internal Melanchall.DryWetMidi.Multimedia.TickGeneratorApiProvider : object {
private bool Is64Bit
private TickGeneratorApi _api
public TickGeneratorApi Api
public TickGeneratorApi get_Api()
}
public Melanchall.DryWetMidi.Multimedia.TickGeneratorException : MidiException {
private int <ErrorCode>k__BackingField
public int ErrorCode
public void .ctor(string message, int errorCode)
public int get_ErrorCode()
}
internal Melanchall.DryWetMidi.Multimedia.TimedEventPlaybackEventMetadata : object {
private object <Metadata>k__BackingField
public object Metadata
public void .ctor(object metadata)
public object get_Metadata()
}
public Melanchall.DryWetMidi.Multimedia.VirtualDevice : MidiDevice {
private string _name
private Callback_Mac _callback_Mac
private InputDevice <InputDevice>k__BackingField
private OutputDevice <OutputDevice>k__BackingField
public string Name
public InputDevice InputDevice
public OutputDevice OutputDevice
internal void .ctor(string name)
public string get_Name()
public InputDevice get_InputDevice()
private void set_InputDevice(InputDevice value)
public OutputDevice get_OutputDevice()
private void set_OutputDevice(OutputDevice value)
public VirtualDevice Create(string name)
private void OnMessage_Mac(IntPtr pktlist, IntPtr readProcRefCon, IntPtr srcConnRefCon)
private void InitializeDevice_Mac()
public string ToString()
internal void Dispose(bool disposing)
}
internal Melanchall.DryWetMidi.Multimedia.VirtualDeviceApi : NativeApi {
public VIRTUAL_OPENRESULT Api_OpenDevice_Mac(string name, IntPtr sessionHandle, Callback_Mac callback, IntPtr& info)
public VIRTUAL_CLOSERESULT Api_CloseDevice(IntPtr info)
public VIRTUAL_SENDBACKRESULT Api_SendDataBack(IntPtr pktlist, IntPtr readProcRefCon)
public IntPtr Api_GetInputDeviceInfo(IntPtr info)
public IntPtr Api_GetOutputDeviceInfo(IntPtr info)
}
internal Melanchall.DryWetMidi.Multimedia.VirtualDeviceApi32 : VirtualDeviceApi {
private string LibraryName
private VIRTUAL_OPENRESULT OpenVirtualDevice_Mac(IntPtr name, IntPtr sessionHandle, Callback_Mac callback, IntPtr& info)
private VIRTUAL_CLOSERESULT CloseVirtualDevice(IntPtr info)
private VIRTUAL_SENDBACKRESULT SendDataBackFromVirtualDevice(IntPtr pktlist, IntPtr readProcRefCon)
private IntPtr GetInputDeviceInfoFromVirtualDevice(IntPtr info)
private IntPtr GetOutputDeviceInfoFromVirtualDevice(IntPtr info)
public VIRTUAL_OPENRESULT Api_OpenDevice_Mac(string name, IntPtr sessionHandle, Callback_Mac callback, IntPtr& info)
public VIRTUAL_CLOSERESULT Api_CloseDevice(IntPtr info)
public VIRTUAL_SENDBACKRESULT Api_SendDataBack(IntPtr pktlist, IntPtr readProcRefCon)
public IntPtr Api_GetInputDeviceInfo(IntPtr info)
public IntPtr Api_GetOutputDeviceInfo(IntPtr info)
}
internal Melanchall.DryWetMidi.Multimedia.VirtualDeviceApi64 : VirtualDeviceApi {
private string LibraryName
private VIRTUAL_OPENRESULT OpenVirtualDevice_Mac(IntPtr name, IntPtr sessionHandle, Callback_Mac callback, IntPtr& info)
private VIRTUAL_CLOSERESULT CloseVirtualDevice(IntPtr info)
private VIRTUAL_SENDBACKRESULT SendDataBackFromVirtualDevice(IntPtr pktlist, IntPtr readProcRefCon)
private IntPtr GetInputDeviceInfoFromVirtualDevice(IntPtr info)
private IntPtr GetOutputDeviceInfoFromVirtualDevice(IntPtr info)
public VIRTUAL_OPENRESULT Api_OpenDevice_Mac(string name, IntPtr sessionHandle, Callback_Mac callback, IntPtr& info)
public VIRTUAL_CLOSERESULT Api_CloseDevice(IntPtr info)
public VIRTUAL_SENDBACKRESULT Api_SendDataBack(IntPtr pktlist, IntPtr readProcRefCon)
public IntPtr Api_GetInputDeviceInfo(IntPtr info)
public IntPtr Api_GetOutputDeviceInfo(IntPtr info)
}
internal Melanchall.DryWetMidi.Multimedia.VirtualDeviceApiProvider : object {
private bool Is64Bit
private VirtualDeviceApi _api
public VirtualDeviceApi Api
public VirtualDeviceApi get_Api()
}
public Melanchall.DryWetMidi.MusicTheory.Chord : object {
private Dictionary`2<ChordQuality, IntervalDefinition[]> IntervalsByQuality
private IReadOnlyCollection`1<string> _chordNames
private ICollection`1<NoteName> <NotesNames>k__BackingField
public ICollection`1<NoteName> NotesNames
public NoteName RootNoteName
public void .ctor(ICollection`1<NoteName> notesNames)
public void .ctor(NoteName rootNoteName, NoteName[] notesNamesAboveRoot)
public void .ctor(NoteName rootNoteName, IEnumerable`1<Interval> intervalsFromRoot)
public void .ctor(NoteName rootNoteName, Interval[] intervalsFromRoot)
public ICollection`1<NoteName> get_NotesNames()
public NoteName get_RootNoteName()
public IReadOnlyCollection`1<string> GetNames()
public bool TryParse(string input, Chord& chord)
public Chord Parse(string input)
public Chord GetByTriad(NoteName rootNoteName, ChordQuality chordQuality, Interval[] intervalsFromRoot)
public bool op_Equality(Chord chord1, Chord chord2)
public bool op_Inequality(Chord chord1, Chord chord2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
internal Melanchall.DryWetMidi.MusicTheory.ChordParser : object {
private string RootNoteNameGroupName
private string BassNoteNameGroupName
private string ChordCharacteristicsGroupName
public string ChordCharacteristicsGroup
private string RootNoteNameGroup
private string BassNoteNameGroup
private String[] Patterns
private string ChordCharacteristicIsUnknown
internal ParsingResult TryParse(string input, Chord& chord)
}
public Melanchall.DryWetMidi.MusicTheory.ChordProgression : object {
private IEnumerable`1<Chord> <Chords>k__BackingField
public IEnumerable`1<Chord> Chords
public void .ctor(IEnumerable`1<Chord> chords)
public void .ctor(Chord[] chords)
public IEnumerable`1<Chord> get_Chords()
public bool TryParse(string input, Scale scale, ChordProgression& chordProgression)
public ChordProgression Parse(string input, Scale scale)
private Parsing`1<ChordProgression> GetParsing(string input, Scale scale)
public bool op_Equality(ChordProgression chordProgression1, ChordProgression chordProgression2)
public bool op_Inequality(ChordProgression chordProgression1, ChordProgression chordProgression2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
internal Melanchall.DryWetMidi.MusicTheory.ChordProgressionParser : object {
private char PartsDelimiter
private string ScaleDegreeGroupName
private string ScaleDegreeGroup
private String[] Patterns
private Dictionary`2<char, int> RomanMap
internal ParsingResult TryParse(string input, Scale scale, ChordProgression& chordProgression)
private int RomanToInteger(string roman)
}
public Melanchall.DryWetMidi.MusicTheory.ChordQuality : Enum {
public int value__
public ChordQuality Major
public ChordQuality Minor
public ChordQuality Augmented
public ChordQuality Diminished
}
internal Melanchall.DryWetMidi.MusicTheory.ChordsNamesTable : object {
private NameDefinition[] NamesDefinitions
public NoteName[] GetChordNotesNames(NoteName rootNoteName, string chordCharacteristic, Nullable`1<NoteName> bassNoteName)
public IList`1<string> GetChordNames(NoteName[] notesNames)
private IList`1<string> GetChordNamesByPermutation(NoteName[] notesNames)
private List`1<string> GetChordNamesInternal(ICollection`1<NoteName> notesNames)
}
public Melanchall.DryWetMidi.MusicTheory.ChordUtilities : object {
public IEnumerable`1<Interval> GetIntervalsFromRootNote(Chord chord)
public IEnumerable`1<Interval> GetIntervalsBetweenNotes(Chord chord)
public Note ResolveRootNote(Chord chord, Octave octave)
public IEnumerable`1<Note> ResolveNotes(Chord chord, Octave octave)
public IEnumerable`1<Chord> GetInversions(Chord chord)
internal IEnumerable`1<Interval> GetIntervalsFromRootNote(ICollection`1<NoteName> notesNames)
private IEnumerable`1<SevenBitNumber> GetIntervals(Chord chord)
private IEnumerable`1<SevenBitNumber> GetIntervals(ICollection`1<NoteName> notesNames)
}
public Melanchall.DryWetMidi.MusicTheory.Interval : object {
private Dictionary`2<SevenBitNumber, Dictionary`2<IntervalDirection, Interval>> Cache
private IReadOnlyCollection`1<IntervalDefinition> _intervalDefinitions
public Interval Zero
public Interval One
public Interval Two
public Interval Three
public Interval Four
public Interval Five
public Interval Six
public Interval Seven
public Interval Eight
public Interval Nine
public Interval Ten
public Interval Eleven
public Interval Twelve
private Dictionary`2<IntervalQuality, Dictionary`2<int, int>> IntervalsHalfTones
private Nullable`1[] QualitiesPattern
private Dictionary`2<int, IntervalQuality> AdditionalQualitiesPattern
private Int32[] IntervalNumbersOffsets
private SevenBitNumber <Size>k__BackingField
private IntervalDirection <Direction>k__BackingField
public SevenBitNumber Size
public IntervalDirection Direction
public int HalfSteps
private void .ctor(SevenBitNumber size, IntervalDirection direction)
public SevenBitNumber get_Size()
public IntervalDirection get_Direction()
public int get_HalfSteps()
public Interval Up()
public Interval Down()
public IReadOnlyCollection`1<IntervalDefinition> GetIntervalDefinitions()
public bool IsPerfect(int intervalNumber)
public bool IsQualityApplicable(IntervalQuality intervalQuality, int intervalNumber)
public Interval Get(IntervalQuality intervalQuality, int intervalNumber)
public Interval Get(SevenBitNumber intervalSize, IntervalDirection direction)
public Interval GetUp(SevenBitNumber intervalSize)
public Interval GetDown(SevenBitNumber intervalSize)
public Interval FromHalfSteps(int halfSteps)
public Interval FromDefinition(IntervalDefinition intervalDefinition)
public bool TryParse(string input, Interval& interval)
public Interval Parse(string input)
public int op_Implicit(Interval interval)
public Interval op_Implicit(SevenBitNumber interval)
public bool op_Equality(Interval interval1, Interval interval2)
public bool op_Inequality(Interval interval1, Interval interval2)
public Interval op_Addition(Interval interval, int halfSteps)
public Interval op_Subtraction(Interval interval, int halfSteps)
public Interval op_Multiply(Interval interval, int multiplier)
public Interval op_Division(Interval interval, int divisor)
public Interval op_UnaryPlus(Interval interval)
public Interval op_UnaryNegation(Interval interval)
public int CompareTo(Interval other)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.MusicTheory.IntervalDefinition : object {
private Dictionary`2<IntervalQuality, char> QualitiesSymbols
private int <Number>k__BackingField
private IntervalQuality <Quality>k__BackingField
public int Number
public IntervalQuality Quality
public void .ctor(int number, IntervalQuality quality)
public int get_Number()
public IntervalQuality get_Quality()
public bool op_Equality(IntervalDefinition intervalDefinition1, IntervalDefinition intervalDefinition2)
public bool op_Inequality(IntervalDefinition intervalDefinition1, IntervalDefinition intervalDefinition2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.MusicTheory.IntervalDirection : Enum {
public int value__
public IntervalDirection Up
public IntervalDirection Down
}
internal Melanchall.DryWetMidi.MusicTheory.IntervalParser : object {
private string HalfStepsGroupName
private string IntervalQualityGroupName
private string IntervalNumberGroupName
private string HalfStepsGroup
private string IntervalGroup
private String[] Patterns
private Dictionary`2<string, IntervalQuality> IntervalQualitiesByLetters
private string HalfStepsNumberIsOutOfRange
private string IntervalNumberIsOutOfRange
internal IEnumerable`1<string> GetPatterns()
internal ParsingResult TryParse(string input, Interval& interval)
}
public Melanchall.DryWetMidi.MusicTheory.IntervalQuality : Enum {
public int value__
public IntervalQuality Perfect
public IntervalQuality Major
public IntervalQuality Minor
public IntervalQuality Augmented
public IntervalQuality Diminished
}
internal Melanchall.DryWetMidi.MusicTheory.IntervalUtilities : object {
internal bool IsIntervalValid(int halfSteps)
}
public Melanchall.DryWetMidi.MusicTheory.Note : object {
internal string SharpLongString
internal string SharpShortString
internal string FlatLongString
internal string FlatShortString
private ConcurrentDictionary`2<SevenBitNumber, Note> Cache
private SevenBitNumber <NoteNumber>k__BackingField
public SevenBitNumber NoteNumber
public NoteName NoteName
public int Octave
private void .ctor(SevenBitNumber noteNumber)
public SevenBitNumber get_NoteNumber()
public NoteName get_NoteName()
public int get_Octave()
public Note Transpose(Interval interval)
public Note Get(SevenBitNumber noteNumber)
public Note Get(NoteName noteName, int octave)
public bool TryParse(string input, Note& note)
public Note Parse(string input)
public bool op_Equality(Note note1, Note note2)
public bool op_Inequality(Note note1, Note note2)
public Note op_Addition(Note note, int halfSteps)
public Note op_Subtraction(Note note, int halfSteps)
public int CompareTo(Note other)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.MusicTheory.NoteName : Enum {
public int value__
public NoteName C
public NoteName CSharp
public NoteName D
public NoteName DSharp
public NoteName E
public NoteName F
public NoteName FSharp
public NoteName G
public NoteName GSharp
public NoteName A
public NoteName ASharp
public NoteName B
}
internal Melanchall.DryWetMidi.MusicTheory.NoteNameParser : object {
private string NoteLetterGroupName
private string AccidentalGroupName
private string NoteNameGroup
private string AccidentalGroup
private String[] Patterns
internal IEnumerable`1<string> GetPatterns()
internal ParsingResult TryParse(string input, NoteName& noteName)
}
internal Melanchall.DryWetMidi.MusicTheory.NoteParser : object {
private string NoteNameGroupName
private string OctaveGroupName
private string OctaveGroup
private String[] Patterns
private string OctaveIsOutOfRange
private string NoteIsOutOfRange
internal ParsingResult TryParse(string input, Note& note)
}
public Melanchall.DryWetMidi.MusicTheory.Notes : object {
public Note CMinus1
public Note CSharpMinus1
public Note DMinus1
public Note DSharpMinus1
public Note EMinus1
public Note FMinus1
public Note FSharpMinus1
public Note GMinus1
public Note GSharpMinus1
public Note AMinus1
public Note ASharpMinus1
public Note BMinus1
public Note C0
public Note CSharp0
public Note D0
public Note DSharp0
public Note E0
public Note F0
public Note FSharp0
public Note G0
public Note GSharp0
public Note A0
public Note ASharp0
public Note B0
public Note C1
public Note CSharp1
public Note D1
public Note DSharp1
public Note E1
public Note F1
public Note FSharp1
public Note G1
public Note GSharp1
public Note A1
public Note ASharp1
public Note B1
public Note C2
public Note CSharp2
public Note D2
public Note DSharp2
public Note E2
public Note F2
public Note FSharp2
public Note G2
public Note GSharp2
public Note A2
public Note ASharp2
public Note B2
public Note C3
public Note CSharp3
public Note D3
public Note DSharp3
public Note E3
public Note F3
public Note FSharp3
public Note G3
public Note GSharp3
public Note A3
public Note ASharp3
public Note B3
public Note C4
public Note CSharp4
public Note D4
public Note DSharp4
public Note E4
public Note F4
public Note FSharp4
public Note G4
public Note GSharp4
public Note A4
public Note ASharp4
public Note B4
public Note C5
public Note CSharp5
public Note D5
public Note DSharp5
public Note E5
public Note F5
public Note FSharp5
public Note G5
public Note GSharp5
public Note A5
public Note ASharp5
public Note B5
public Note C6
public Note CSharp6
public Note D6
public Note DSharp6
public Note E6
public Note F6
public Note FSharp6
public Note G6
public Note GSharp6
public Note A6
public Note ASharp6
public Note B6
public Note C7
public Note CSharp7
public Note D7
public Note DSharp7
public Note E7
public Note F7
public Note FSharp7
public Note G7
public Note GSharp7
public Note A7
public Note ASharp7
public Note B7
public Note C8
public Note CSharp8
public Note D8
public Note DSharp8
public Note E8
public Note F8
public Note FSharp8
public Note G8
public Note GSharp8
public Note A8
public Note ASharp8
public Note B8
public Note C9
public Note CSharp9
public Note D9
public Note DSharp9
public Note E9
public Note F9
public Note FSharp9
public Note G9
}
public Melanchall.DryWetMidi.MusicTheory.NoteUtilities : object {
private int OctaveOffset
public NoteName Transpose(NoteName noteName, Interval interval)
public NoteName GetNoteName(SevenBitNumber noteNumber)
public int GetNoteOctave(SevenBitNumber noteNumber)
public SevenBitNumber GetNoteNumber(NoteName noteName, int octave)
internal bool IsNoteValid(NoteName noteName, int octave)
internal bool IsNoteNumberValid(int noteNumber)
private int CalculateNoteNumber(NoteName noteName, int octave)
}
public Melanchall.DryWetMidi.MusicTheory.Octave : object {
private ConcurrentDictionary`2<int, Octave> Cache
private Dictionary`2<NoteName, Note> _notes
public int OctaveSize
public int MinOctaveNumber
public int MaxOctaveNumber
public Octave Middle
private int <Number>k__BackingField
public int Number
public Note C
public Note CSharp
public Note D
public Note DSharp
public Note E
public Note F
public Note FSharp
public Note G
public Note GSharp
public Note A
public Note ASharp
public Note B
private void .ctor(int octave)
public int get_Number()
public Note get_C()
public Note get_CSharp()
public Note get_D()
public Note get_DSharp()
public Note get_E()
public Note get_F()
public Note get_FSharp()
public Note get_G()
public Note get_GSharp()
public Note get_A()
public Note get_ASharp()
public Note get_B()
public Note GetNote(NoteName noteName)
public Octave Get(int octaveNumber)
public bool TryParse(string input, Octave& octave)
public Octave Parse(string input)
public bool op_Equality(Octave octave1, Octave octave2)
public bool op_Inequality(Octave octave1, Octave octave2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
internal Melanchall.DryWetMidi.MusicTheory.OctaveParser : object {
private string OctaveNumberGroupName
private string OctaveNumberGroup
private String[] Patterns
private string OctaveIsOutOfRange
internal ParsingResult TryParse(string input, Octave& octave)
}
public Melanchall.DryWetMidi.MusicTheory.Scale : object {
private IEnumerable`1<Interval> <Intervals>k__BackingField
private NoteName <RootNote>k__BackingField
public IEnumerable`1<Interval> Intervals
public NoteName RootNote
public void .ctor(IEnumerable`1<Interval> intervals, NoteName rootNote)
public IEnumerable`1<Interval> get_Intervals()
public NoteName get_RootNote()
public bool TryParse(string input, Scale& scale)
public Scale Parse(string input)
public bool op_Equality(Scale scale1, Scale scale2)
public bool op_Inequality(Scale scale1, Scale scale2)
public string ToString()
public bool Equals(object obj)
public int GetHashCode()
}
public Melanchall.DryWetMidi.MusicTheory.ScaleDegree : Enum {
public int value__
public ScaleDegree Tonic
public ScaleDegree Supertonic
public ScaleDegree Mediant
public ScaleDegree Subdominant
public ScaleDegree Dominant
public ScaleDegree Submediant
public ScaleDegree LeadingTone
}
public Melanchall.DryWetMidi.MusicTheory.ScaleIntervals : object {
public IEnumerable`1<Interval> Aeolian
public IEnumerable`1<Interval> Altered
public IEnumerable`1<Interval> Arabian
public IEnumerable`1<Interval> Augmented
public IEnumerable`1<Interval> AugmentedHeptatonic
public IEnumerable`1<Interval> Balinese
public IEnumerable`1<Interval> Bebop
public IEnumerable`1<Interval> BebopDominant
public IEnumerable`1<Interval> BebopLocrian
public IEnumerable`1<Interval> BebopMajor
public IEnumerable`1<Interval> BebopMinor
public IEnumerable`1<Interval> Blues
public IEnumerable`1<Interval> Chinese
public IEnumerable`1<Interval> Chromatic
public IEnumerable`1<Interval> CompositeBlues
public IEnumerable`1<Interval> Diminished
public IEnumerable`1<Interval> DiminishedWholeTone
public IEnumerable`1<Interval> Dominant
public IEnumerable`1<Interval> Dorian
public IEnumerable`1<Interval> Dorian4
public IEnumerable`1<Interval> DorianB2
public IEnumerable`1<Interval> DoubleHarmonicLydian
public IEnumerable`1<Interval> DoubleHarmonicMajor
public IEnumerable`1<Interval> Egyptian
public IEnumerable`1<Interval> Enigmatic
public IEnumerable`1<Interval> Flamenco
public IEnumerable`1<Interval> FlatSixPentatonic
public IEnumerable`1<Interval> FlatThreePentatonic
public IEnumerable`1<Interval> Gypsy
public IEnumerable`1<Interval> HarmonicMajor
public IEnumerable`1<Interval> HarmonicMinor
public IEnumerable`1<Interval> Hindu
public IEnumerable`1<Interval> Hirajoshi
public IEnumerable`1<Interval> HungarianMajor
public IEnumerable`1<Interval> HungarianMinor
public IEnumerable`1<Interval> Ichikosucho
public IEnumerable`1<Interval> InSen
public IEnumerable`1<Interval> Indian
public IEnumerable`1<Interval> Ionian
public IEnumerable`1<Interval> IonianAugmented
public IEnumerable`1<Interval> IonianPentatonic
public IEnumerable`1<Interval> Iwato
public IEnumerable`1<Interval> KafiRaga
public IEnumerable`1<Interval> Kumoi
public IEnumerable`1<Interval> Kumoijoshi
public IEnumerable`1<Interval> LeadingWholeTone
public IEnumerable`1<Interval> Locrian
public IEnumerable`1<Interval> Locrian2
public IEnumerable`1<Interval> LocrianMajor
public IEnumerable`1<Interval> LocrianPentatonic
public IEnumerable`1<Interval> Lydian
public IEnumerable`1<Interval> Lydian5PPentatonic
public IEnumerable`1<Interval> Lydian9
public IEnumerable`1<Interval> LydianAugmented
public IEnumerable`1<Interval> LydianB7
public IEnumerable`1<Interval> LydianDiminished
public IEnumerable`1<Interval> LydianDominant
public IEnumerable`1<Interval> LydianDominantPentatonic
public IEnumerable`1<Interval> LydianMinor
public IEnumerable`1<Interval> LydianPentatonic
public IEnumerable`1<Interval> Major
public IEnumerable`1<Interval> MajorBlues
public IEnumerable`1<Interval> MajorFlatTwoPentatonic
public IEnumerable`1<Interval> MajorPentatonic
public IEnumerable`1<Interval> MalkosRaga
public IEnumerable`1<Interval> MelodicMinor
public IEnumerable`1<Interval> MelodicMinorFifthMode
public IEnumerable`1<Interval> MelodicMinorSecondMode
public IEnumerable`1<Interval> Minor
public IEnumerable`1<Interval> Minor7MPentatonic
public IEnumerable`1<Interval> MinorBebop
public IEnumerable`1<Interval> MinorBlues
public IEnumerable`1<Interval> MinorHexatonic
public IEnumerable`1<Interval> MinorPentatonic
public IEnumerable`1<Interval> MinorSevenFlatFivePentatonic
public IEnumerable`1<Interval> MinorSixDiminished
public IEnumerable`1<Interval> MinorSixPentatonic
public IEnumerable`1<Interval> Mixolydian
public IEnumerable`1<Interval> MixolydianB6M
public IEnumerable`1<Interval> MixolydianPentatonic
public IEnumerable`1<Interval> Mystery1
public IEnumerable`1<Interval> Neopolitan
public IEnumerable`1<Interval> NeopolitanMajor
public IEnumerable`1<Interval> NeopolitanMajorPentatonic
public IEnumerable`1<Interval> NeopolitanMinor
public IEnumerable`1<Interval> Oriental
public IEnumerable`1<Interval> Pelog
public IEnumerable`1<Interval> Pentatonic
public IEnumerable`1<Interval> Persian
public IEnumerable`1<Interval> Phrygian
public IEnumerable`1<Interval> PhrygianMajor
public IEnumerable`1<Interval> Piongio
public IEnumerable`1<Interval> Pomeroy
public IEnumerable`1<Interval> Prometheus
public IEnumerable`1<Interval> PrometheusNeopolitan
public IEnumerable`1<Interval> PurviRaga
public IEnumerable`1<Interval> Ritusen
public IEnumerable`1<Interval> RomanianMinor
public IEnumerable`1<Interval> Scriabin
public IEnumerable`1<Interval> SixToneSymmetric
public IEnumerable`1<Interval> Spanish
public IEnumerable`1<Interval> SpanishHeptatonic
public IEnumerable`1<Interval> SuperLocrian
public IEnumerable`1<Interval> SuperLocrianPentatonic
public IEnumerable`1<Interval> TodiRaga
public IEnumerable`1<Interval> Vietnamese1
public IEnumerable`1<Interval> Vietnamese2
public IEnumerable`1<Interval> WholeTone
public IEnumerable`1<Interval> WholeTonePentatonic
public IEnumerable`1<Interval> GetByName(string name)
private IEnumerable`1<Interval> GetIntervals(Int32[] intervalsInHalfSteps)
}
internal Melanchall.DryWetMidi.MusicTheory.ScaleParser : object {
private string RootNoteNameGroupName
private string IntervalsMnemonicGroupName
private string IntervalGroupName
private string IntervalGroup
private string IntervalsMnemonicGroup
private String[] Patterns
private string ScaleIsUnknown
internal ParsingResult TryParse(string input, Scale& scale)
}
public Melanchall.DryWetMidi.MusicTheory.ScaleUtilities : object {
public NoteName GetDegree(Scale scale, ScaleDegree degree)
public NoteName GetStep(Scale scale, int step)
public IEnumerable`1<Note> GetNotes(Scale scale)
public IEnumerable`1<NoteName> GetNotesNames(Scale scale)
public IEnumerable`1<Note> GetAscendingNotes(Scale scale, Note rootNote)
public IEnumerable`1<Note> GetDescendingNotes(Scale scale, Note rootNote)
public bool IsNoteInScale(Scale scale, Note note)
public Note GetNextNote(Scale scale, Note note)
public Note GetPreviousNote(Scale scale, Note note)
private void ThrowIfDegreeIsOutOfRange(Scale scale, ScaleDegree degree)
}
public Melanchall.DryWetMidi.Standards.GeneralMidi : object {
public FourBitNumber PercussionChannel
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2AnalogPercussion : Enum {
public byte value__
public GeneralMidi2AnalogPercussion HighQ
public GeneralMidi2AnalogPercussion Slap
public GeneralMidi2AnalogPercussion ScratchPush
public GeneralMidi2AnalogPercussion ScratchPull
public GeneralMidi2AnalogPercussion Sticks
public GeneralMidi2AnalogPercussion SquareClick
public GeneralMidi2AnalogPercussion MetronomeClick
public GeneralMidi2AnalogPercussion MetronomeBell
public GeneralMidi2AnalogPercussion AcousticBassDrum
public GeneralMidi2AnalogPercussion AnalogBassDrum
public GeneralMidi2AnalogPercussion AnalogRimShot
public GeneralMidi2AnalogPercussion AnalogSnare1
public GeneralMidi2AnalogPercussion HandClap
public GeneralMidi2AnalogPercussion ElectricSnare
public GeneralMidi2AnalogPercussion AnalogLowTom2
public GeneralMidi2AnalogPercussion AnalogClosedHiHat1
public GeneralMidi2AnalogPercussion AnalogLowTom1
public GeneralMidi2AnalogPercussion AnalogClosedHiHat2
public GeneralMidi2AnalogPercussion AnalogMidTom2
public GeneralMidi2AnalogPercussion AnalogOpenHiHat
public GeneralMidi2AnalogPercussion AnalogMidTom1
public GeneralMidi2AnalogPercussion AnalogHiTom2
public GeneralMidi2AnalogPercussion AnalogCymbal
public GeneralMidi2AnalogPercussion AnalogHiTom1
public GeneralMidi2AnalogPercussion RideCymbal1
public GeneralMidi2AnalogPercussion ChineseCymbal
public GeneralMidi2AnalogPercussion RideBell
public GeneralMidi2AnalogPercussion Tambourine
public GeneralMidi2AnalogPercussion SplashCymbal
public GeneralMidi2AnalogPercussion AnalogCowbell
public GeneralMidi2AnalogPercussion CrashCymbal2
public GeneralMidi2AnalogPercussion Vibraslap
public GeneralMidi2AnalogPercussion RideCymbal2
public GeneralMidi2AnalogPercussion HiBongo
public GeneralMidi2AnalogPercussion LowBongo
public GeneralMidi2AnalogPercussion AnalogHighConga
public GeneralMidi2AnalogPercussion AnalogMidConga
public GeneralMidi2AnalogPercussion AnalogLowConga
public GeneralMidi2AnalogPercussion HighTimbale
public GeneralMidi2AnalogPercussion LowTimbale
public GeneralMidi2AnalogPercussion HighAgogo
public GeneralMidi2AnalogPercussion LowAgogo
public GeneralMidi2AnalogPercussion Cabasa
public GeneralMidi2AnalogPercussion AnalogMaracas
public GeneralMidi2AnalogPercussion ShortWhistle
public GeneralMidi2AnalogPercussion LongWhistle
public GeneralMidi2AnalogPercussion ShortGuiro
public GeneralMidi2AnalogPercussion LongGuiro
public GeneralMidi2AnalogPercussion AnalogClaves
public GeneralMidi2AnalogPercussion HiWoodBlock
public GeneralMidi2AnalogPercussion LowWoodBlock
public GeneralMidi2AnalogPercussion MuteCuica
public GeneralMidi2AnalogPercussion OpenCuica
public GeneralMidi2AnalogPercussion MuteTriangle
public GeneralMidi2AnalogPercussion OpenTriangle
public GeneralMidi2AnalogPercussion Shaker
public GeneralMidi2AnalogPercussion JingleBell
public GeneralMidi2AnalogPercussion Belltree
public GeneralMidi2AnalogPercussion Castanets
public GeneralMidi2AnalogPercussion MuteSurdo
public GeneralMidi2AnalogPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2BrushPercussion : Enum {
public byte value__
public GeneralMidi2BrushPercussion HighQ
public GeneralMidi2BrushPercussion Slap
public GeneralMidi2BrushPercussion ScratchPush
public GeneralMidi2BrushPercussion ScratchPull
public GeneralMidi2BrushPercussion Sticks
public GeneralMidi2BrushPercussion SquareClick
public GeneralMidi2BrushPercussion MetronomeClick
public GeneralMidi2BrushPercussion MetronomeBell
public GeneralMidi2BrushPercussion JazzKick2
public GeneralMidi2BrushPercussion JazzKick1
public GeneralMidi2BrushPercussion SideStick
public GeneralMidi2BrushPercussion BrushTap
public GeneralMidi2BrushPercussion BrushSlap
public GeneralMidi2BrushPercussion BrushSwirl
public GeneralMidi2BrushPercussion LowFloorTom
public GeneralMidi2BrushPercussion ClosedHiHat
public GeneralMidi2BrushPercussion HighFloorTom
public GeneralMidi2BrushPercussion PedalHiHat
public GeneralMidi2BrushPercussion LowTom
public GeneralMidi2BrushPercussion OpenHiHat
public GeneralMidi2BrushPercussion LowMidTom
public GeneralMidi2BrushPercussion HiMidTom
public GeneralMidi2BrushPercussion CrashCymbal1
public GeneralMidi2BrushPercussion HighTom
public GeneralMidi2BrushPercussion RideCymbal1
public GeneralMidi2BrushPercussion ChineseCymbal
public GeneralMidi2BrushPercussion RideBell
public GeneralMidi2BrushPercussion Tambourine
public GeneralMidi2BrushPercussion SplashCymbal
public GeneralMidi2BrushPercussion Cowbell
public GeneralMidi2BrushPercussion CrashCymbal2
public GeneralMidi2BrushPercussion Vibraslap
public GeneralMidi2BrushPercussion RideCymbal2
public GeneralMidi2BrushPercussion HiBongo
public GeneralMidi2BrushPercussion LowBongo
public GeneralMidi2BrushPercussion MuteHiConga
public GeneralMidi2BrushPercussion OpenHiConga
public GeneralMidi2BrushPercussion LowConga
public GeneralMidi2BrushPercussion HighTimbale
public GeneralMidi2BrushPercussion LowTimbale
public GeneralMidi2BrushPercussion HighAgogo
public GeneralMidi2BrushPercussion LowAgogo
public GeneralMidi2BrushPercussion Cabasa
public GeneralMidi2BrushPercussion Maracas
public GeneralMidi2BrushPercussion ShortWhistle
public GeneralMidi2BrushPercussion LongWhistle
public GeneralMidi2BrushPercussion ShortGuiro
public GeneralMidi2BrushPercussion LongGuiro
public GeneralMidi2BrushPercussion Claves
public GeneralMidi2BrushPercussion HiWoodBlock
public GeneralMidi2BrushPercussion LowWoodBlock
public GeneralMidi2BrushPercussion MuteCuica
public GeneralMidi2BrushPercussion OpenCuica
public GeneralMidi2BrushPercussion MuteTriangle
public GeneralMidi2BrushPercussion OpenTriangle
public GeneralMidi2BrushPercussion Shaker
public GeneralMidi2BrushPercussion JingleBell
public GeneralMidi2BrushPercussion Belltree
public GeneralMidi2BrushPercussion Castanets
public GeneralMidi2BrushPercussion MuteSurdo
public GeneralMidi2BrushPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2ElectronicPercussion : Enum {
public byte value__
public GeneralMidi2ElectronicPercussion HighQ
public GeneralMidi2ElectronicPercussion Slap
public GeneralMidi2ElectronicPercussion ScratchPush
public GeneralMidi2ElectronicPercussion ScratchPull
public GeneralMidi2ElectronicPercussion Sticks
public GeneralMidi2ElectronicPercussion SquareClick
public GeneralMidi2ElectronicPercussion MetronomeClick
public GeneralMidi2ElectronicPercussion MetronomeBell
public GeneralMidi2ElectronicPercussion AcousticBassDrum
public GeneralMidi2ElectronicPercussion ElectricBassDrum
public GeneralMidi2ElectronicPercussion SideStick
public GeneralMidi2ElectronicPercussion ElectricSnare1
public GeneralMidi2ElectronicPercussion HandClap
public GeneralMidi2ElectronicPercussion ElectricSnare2
public GeneralMidi2ElectronicPercussion ElectricLowTom2
public GeneralMidi2ElectronicPercussion ClosedHiHat
public GeneralMidi2ElectronicPercussion ElectricLowTom1
public GeneralMidi2ElectronicPercussion PedalHiHat
public GeneralMidi2ElectronicPercussion ElectricMidTom2
public GeneralMidi2ElectronicPercussion OpenHiHat
public GeneralMidi2ElectronicPercussion ElectricMidTom1
public GeneralMidi2ElectronicPercussion ElectricHiTom2
public GeneralMidi2ElectronicPercussion CrashCymbal1
public GeneralMidi2ElectronicPercussion ElectricHiTom1
public GeneralMidi2ElectronicPercussion RideCymbal1
public GeneralMidi2ElectronicPercussion ReverseCymbal
public GeneralMidi2ElectronicPercussion RideBell
public GeneralMidi2ElectronicPercussion Tambourine
public GeneralMidi2ElectronicPercussion SplashCymbal
public GeneralMidi2ElectronicPercussion Cowbell
public GeneralMidi2ElectronicPercussion CrashCymbal2
public GeneralMidi2ElectronicPercussion Vibraslap
public GeneralMidi2ElectronicPercussion RideCymbal2
public GeneralMidi2ElectronicPercussion HiBongo
public GeneralMidi2ElectronicPercussion LowBongo
public GeneralMidi2ElectronicPercussion MuteHiConga
public GeneralMidi2ElectronicPercussion OpenHiConga
public GeneralMidi2ElectronicPercussion LowConga
public GeneralMidi2ElectronicPercussion HighTimbale
public GeneralMidi2ElectronicPercussion LowTimbale
public GeneralMidi2ElectronicPercussion HighAgogo
public GeneralMidi2ElectronicPercussion LowAgogo
public GeneralMidi2ElectronicPercussion Cabasa
public GeneralMidi2ElectronicPercussion Maracas
public GeneralMidi2ElectronicPercussion ShortWhistle
public GeneralMidi2ElectronicPercussion LongWhistle
public GeneralMidi2ElectronicPercussion ShortGuiro
public GeneralMidi2ElectronicPercussion LongGuiro
public GeneralMidi2ElectronicPercussion Claves
public GeneralMidi2ElectronicPercussion HiWoodBlock
public GeneralMidi2ElectronicPercussion LowWoodBlock
public GeneralMidi2ElectronicPercussion MuteCuica
public GeneralMidi2ElectronicPercussion OpenCuica
public GeneralMidi2ElectronicPercussion MuteTriangle
public GeneralMidi2ElectronicPercussion OpenTriangle
public GeneralMidi2ElectronicPercussion Shaker
public GeneralMidi2ElectronicPercussion JingleBell
public GeneralMidi2ElectronicPercussion Belltree
public GeneralMidi2ElectronicPercussion Castanets
public GeneralMidi2ElectronicPercussion MuteSurdo
public GeneralMidi2ElectronicPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2JazzPercussion : Enum {
public byte value__
public GeneralMidi2JazzPercussion HighQ
public GeneralMidi2JazzPercussion Slap
public GeneralMidi2JazzPercussion ScratchPush
public GeneralMidi2JazzPercussion ScratchPull
public GeneralMidi2JazzPercussion Sticks
public GeneralMidi2JazzPercussion SquareClick
public GeneralMidi2JazzPercussion MetronomeClick
public GeneralMidi2JazzPercussion MetronomeBell
public GeneralMidi2JazzPercussion JazzKick2
public GeneralMidi2JazzPercussion JazzKick1
public GeneralMidi2JazzPercussion SideStick
public GeneralMidi2JazzPercussion AcousticSnare
public GeneralMidi2JazzPercussion HandClap
public GeneralMidi2JazzPercussion ElectricSnare
public GeneralMidi2JazzPercussion LowFloorTom
public GeneralMidi2JazzPercussion ClosedHiHat
public GeneralMidi2JazzPercussion HighFloorTom
public GeneralMidi2JazzPercussion PedalHiHat
public GeneralMidi2JazzPercussion LowTom
public GeneralMidi2JazzPercussion OpenHiHat
public GeneralMidi2JazzPercussion LowMidTom
public GeneralMidi2JazzPercussion HiMidTom
public GeneralMidi2JazzPercussion CrashCymbal1
public GeneralMidi2JazzPercussion HighTom
public GeneralMidi2JazzPercussion RideCymbal1
public GeneralMidi2JazzPercussion ChineseCymbal
public GeneralMidi2JazzPercussion RideBell
public GeneralMidi2JazzPercussion Tambourine
public GeneralMidi2JazzPercussion SplashCymbal
public GeneralMidi2JazzPercussion Cowbell
public GeneralMidi2JazzPercussion CrashCymbal2
public GeneralMidi2JazzPercussion Vibraslap
public GeneralMidi2JazzPercussion RideCymbal2
public GeneralMidi2JazzPercussion HiBongo
public GeneralMidi2JazzPercussion LowBongo
public GeneralMidi2JazzPercussion MuteHiConga
public GeneralMidi2JazzPercussion OpenHiConga
public GeneralMidi2JazzPercussion LowConga
public GeneralMidi2JazzPercussion HighTimbale
public GeneralMidi2JazzPercussion LowTimbale
public GeneralMidi2JazzPercussion HighAgogo
public GeneralMidi2JazzPercussion LowAgogo
public GeneralMidi2JazzPercussion Cabasa
public GeneralMidi2JazzPercussion Maracas
public GeneralMidi2JazzPercussion ShortWhistle
public GeneralMidi2JazzPercussion LongWhistle
public GeneralMidi2JazzPercussion ShortGuiro
public GeneralMidi2JazzPercussion LongGuiro
public GeneralMidi2JazzPercussion Claves
public GeneralMidi2JazzPercussion HiWoodBlock
public GeneralMidi2JazzPercussion LowWoodBlock
public GeneralMidi2JazzPercussion MuteCuica
public GeneralMidi2JazzPercussion OpenCuica
public GeneralMidi2JazzPercussion MuteTriangle
public GeneralMidi2JazzPercussion OpenTriangle
public GeneralMidi2JazzPercussion Shaker
public GeneralMidi2JazzPercussion JingleBell
public GeneralMidi2JazzPercussion Belltree
public GeneralMidi2JazzPercussion Castanets
public GeneralMidi2JazzPercussion MuteSurdo
public GeneralMidi2JazzPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2OrchestraPercussion : Enum {
public byte value__
public GeneralMidi2OrchestraPercussion ClosedHiHat2
public GeneralMidi2OrchestraPercussion PedalHiHat
public GeneralMidi2OrchestraPercussion OpenHiHat2
public GeneralMidi2OrchestraPercussion RideCymbal1
public GeneralMidi2OrchestraPercussion Sticks
public GeneralMidi2OrchestraPercussion SquareClick
public GeneralMidi2OrchestraPercussion MetronomeClick
public GeneralMidi2OrchestraPercussion MetronomeBell
public GeneralMidi2OrchestraPercussion ConcertBassDrum2
public GeneralMidi2OrchestraPercussion ConcertBassDrum1
public GeneralMidi2OrchestraPercussion SideStick
public GeneralMidi2OrchestraPercussion ConcertSnareDrum
public GeneralMidi2OrchestraPercussion Castanets
public GeneralMidi2OrchestraPercussion ConcertSnareDrum2
public GeneralMidi2OrchestraPercussion TimpaniF
public GeneralMidi2OrchestraPercussion TimpaniFSharp
public GeneralMidi2OrchestraPercussion TimpaniG
public GeneralMidi2OrchestraPercussion TimpaniGSharp
public GeneralMidi2OrchestraPercussion TimpaniA
public GeneralMidi2OrchestraPercussion TimpaniASharp
public GeneralMidi2OrchestraPercussion TimpaniB
public GeneralMidi2OrchestraPercussion TimpaniC
public GeneralMidi2OrchestraPercussion TimpaniCSharp
public GeneralMidi2OrchestraPercussion TimpaniD
public GeneralMidi2OrchestraPercussion TimpaniDSharp
public GeneralMidi2OrchestraPercussion TimpaniE
public GeneralMidi2OrchestraPercussion TimpaniF2
public GeneralMidi2OrchestraPercussion Tambourine
public GeneralMidi2OrchestraPercussion SplashCymbal
public GeneralMidi2OrchestraPercussion Cowbell
public GeneralMidi2OrchestraPercussion ConcertCymbal2
public GeneralMidi2OrchestraPercussion Vibraslap
public GeneralMidi2OrchestraPercussion ConcertCymbal1
public GeneralMidi2OrchestraPercussion HiBongo
public GeneralMidi2OrchestraPercussion LowBongo
public GeneralMidi2OrchestraPercussion MuteHiConga
public GeneralMidi2OrchestraPercussion OpenHiConga
public GeneralMidi2OrchestraPercussion LowConga
public GeneralMidi2OrchestraPercussion HighTimbale
public GeneralMidi2OrchestraPercussion LowTimbale
public GeneralMidi2OrchestraPercussion HighAgogo
public GeneralMidi2OrchestraPercussion LowAgogo
public GeneralMidi2OrchestraPercussion Cabasa
public GeneralMidi2OrchestraPercussion Maracas
public GeneralMidi2OrchestraPercussion ShortWhistle
public GeneralMidi2OrchestraPercussion LongWhistle
public GeneralMidi2OrchestraPercussion ShortGuiro
public GeneralMidi2OrchestraPercussion LongGuiro
public GeneralMidi2OrchestraPercussion Claves
public GeneralMidi2OrchestraPercussion HiWoodBlock
public GeneralMidi2OrchestraPercussion LowWoodBlock
public GeneralMidi2OrchestraPercussion MuteCuica
public GeneralMidi2OrchestraPercussion OpenCuica
public GeneralMidi2OrchestraPercussion MuteTriangle
public GeneralMidi2OrchestraPercussion OpenTriangle
public GeneralMidi2OrchestraPercussion Shaker
public GeneralMidi2OrchestraPercussion JingleBell
public GeneralMidi2OrchestraPercussion Belltree
public GeneralMidi2OrchestraPercussion Castanets2
public GeneralMidi2OrchestraPercussion MuteSurdo
public GeneralMidi2OrchestraPercussion OpenSurdo
public GeneralMidi2OrchestraPercussion Applause
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2PercussionSet : Enum {
public byte value__
public GeneralMidi2PercussionSet Standard
public GeneralMidi2PercussionSet Room
public GeneralMidi2PercussionSet Power
public GeneralMidi2PercussionSet Electronic
public GeneralMidi2PercussionSet Analog
public GeneralMidi2PercussionSet Jazz
public GeneralMidi2PercussionSet Brush
public GeneralMidi2PercussionSet Orchestra
public GeneralMidi2PercussionSet Sfx
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2PowerPercussion : Enum {
public byte value__
public GeneralMidi2PowerPercussion HighQ
public GeneralMidi2PowerPercussion Slap
public GeneralMidi2PowerPercussion ScratchPush
public GeneralMidi2PowerPercussion ScratchPull
public GeneralMidi2PowerPercussion Sticks
public GeneralMidi2PowerPercussion SquareClick
public GeneralMidi2PowerPercussion MetronomeClick
public GeneralMidi2PowerPercussion MetronomeBell
public GeneralMidi2PowerPercussion AcousticBassDrum
public GeneralMidi2PowerPercussion PowerKickDrum
public GeneralMidi2PowerPercussion SideStick
public GeneralMidi2PowerPercussion PowerSnareDrum
public GeneralMidi2PowerPercussion HandClap
public GeneralMidi2PowerPercussion ElectricSnare
public GeneralMidi2PowerPercussion PowerLowTom2
public GeneralMidi2PowerPercussion ClosedHiHat
public GeneralMidi2PowerPercussion PowerLowTom1
public GeneralMidi2PowerPercussion PedalHiHat
public GeneralMidi2PowerPercussion PowerMidTom2
public GeneralMidi2PowerPercussion OpenHiHat
public GeneralMidi2PowerPercussion PowerMidTom1
public GeneralMidi2PowerPercussion PowerHiTom2
public GeneralMidi2PowerPercussion CrashCymbal1
public GeneralMidi2PowerPercussion PowerHiTom1
public GeneralMidi2PowerPercussion RideCymbal1
public GeneralMidi2PowerPercussion ChineseCymbal
public GeneralMidi2PowerPercussion RideBell
public GeneralMidi2PowerPercussion Tambourine
public GeneralMidi2PowerPercussion SplashCymbal
public GeneralMidi2PowerPercussion Cowbell
public GeneralMidi2PowerPercussion CrashCymbal2
public GeneralMidi2PowerPercussion Vibraslap
public GeneralMidi2PowerPercussion RideCymbal2
public GeneralMidi2PowerPercussion HiBongo
public GeneralMidi2PowerPercussion LowBongo
public GeneralMidi2PowerPercussion MuteHiConga
public GeneralMidi2PowerPercussion OpenHiConga
public GeneralMidi2PowerPercussion LowConga
public GeneralMidi2PowerPercussion HighTimbale
public GeneralMidi2PowerPercussion LowTimbale
public GeneralMidi2PowerPercussion HighAgogo
public GeneralMidi2PowerPercussion LowAgogo
public GeneralMidi2PowerPercussion Cabasa
public GeneralMidi2PowerPercussion Maracas
public GeneralMidi2PowerPercussion ShortWhistle
public GeneralMidi2PowerPercussion LongWhistle
public GeneralMidi2PowerPercussion ShortGuiro
public GeneralMidi2PowerPercussion LongGuiro
public GeneralMidi2PowerPercussion Claves
public GeneralMidi2PowerPercussion HiWoodBlock
public GeneralMidi2PowerPercussion LowWoodBlock
public GeneralMidi2PowerPercussion MuteCuica
public GeneralMidi2PowerPercussion OpenCuica
public GeneralMidi2PowerPercussion MuteTriangle
public GeneralMidi2PowerPercussion OpenTriangle
public GeneralMidi2PowerPercussion Shaker
public GeneralMidi2PowerPercussion JingleBell
public GeneralMidi2PowerPercussion Belltree
public GeneralMidi2PowerPercussion Castanets
public GeneralMidi2PowerPercussion MuteSurdo
public GeneralMidi2PowerPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2Program : Enum {
public int value__
public GeneralMidi2Program AcousticGrandPiano
public GeneralMidi2Program AcousticGrandPianoWide
public GeneralMidi2Program AcousticGrandPianoDark
public GeneralMidi2Program BrightAcousticPiano
public GeneralMidi2Program BrightAcousticPianoWide
public GeneralMidi2Program ElectricGrandPiano
public GeneralMidi2Program ElectricGrandPianoWide
public GeneralMidi2Program HonkyTonkPiano
public GeneralMidi2Program HonkyTonkPianoWide
public GeneralMidi2Program ElectricPiano1
public GeneralMidi2Program DetunedElectricPiano1
public GeneralMidi2Program ElectricPiano1VelocityMix
public GeneralMidi2Program SixtiesElectricPiano
public GeneralMidi2Program ElectricPiano2
public GeneralMidi2Program DetunedElectricPiano2
public GeneralMidi2Program ElectricPiano2VelocityMix
public GeneralMidi2Program EpLegend
public GeneralMidi2Program EpPhase
public GeneralMidi2Program Harpsichord
public GeneralMidi2Program HarpsichordOctaveMix
public GeneralMidi2Program HarpsichordWide
public GeneralMidi2Program HarpsichordWithKeyOff
public GeneralMidi2Program Clavi
public GeneralMidi2Program PulseClavi
public GeneralMidi2Program Celesta
public GeneralMidi2Program Glockenspiel
public GeneralMidi2Program MusicBox
public GeneralMidi2Program Vibraphone
public GeneralMidi2Program VibraphoneWide
public GeneralMidi2Program Marimba
public GeneralMidi2Program MarimbaWide
public GeneralMidi2Program Xylophone
public GeneralMidi2Program TubularBells
public GeneralMidi2Program ChurchBell
public GeneralMidi2Program Carillon
public GeneralMidi2Program Dulcimer
public GeneralMidi2Program DrawbarOrgan
public GeneralMidi2Program DetunedDrawbarOrgan
public GeneralMidi2Program ItalianSixtiesOrgan
public GeneralMidi2Program DrawbarOrgan2
public GeneralMidi2Program PercussiveOrgan
public GeneralMidi2Program DetunedPercussiveOrgan
public GeneralMidi2Program PercussiveOrgan2
public GeneralMidi2Program RockOrgan
public GeneralMidi2Program ChurchOrgan
public GeneralMidi2Program ChurchOrganOctaveMix
public GeneralMidi2Program DetunedChurchOrgan
public GeneralMidi2Program ReedOrgan
public GeneralMidi2Program PuffOrgan
public GeneralMidi2Program Accordion
public GeneralMidi2Program Accordion2
public GeneralMidi2Program Harmonica
public GeneralMidi2Program TangoAccordion
public GeneralMidi2Program AcousticGuitarNylon
public GeneralMidi2Program Ukulele
public GeneralMidi2Program AcousticGuitarNylonKeyOff
public GeneralMidi2Program AcousticGuitarNylon2
public GeneralMidi2Program AcousticGuitarSteel
public GeneralMidi2Program TwelveStringsGuitar
public GeneralMidi2Program Mandolin
public GeneralMidi2Program SteelGuitarWithBodySound
public GeneralMidi2Program ElectricGuitarJazz
public GeneralMidi2Program ElectricGuitarPedalSteel
public GeneralMidi2Program ElectricGuitarClean
public GeneralMidi2Program ElectricGuitarDetunedClean
public GeneralMidi2Program MidToneGuitar
public GeneralMidi2Program ElectricGuitarMuted
public GeneralMidi2Program ElectricGuitarFunkyCutting
public GeneralMidi2Program ElectricGuitarMutedVeloSw
public GeneralMidi2Program JazzMan
public GeneralMidi2Program OverdrivenGuitar
public GeneralMidi2Program GuitarPinch
public GeneralMidi2Program DistortionGuitar
public GeneralMidi2Program DistortionGuitarWithFeedback
public GeneralMidi2Program DistortedRhythmGuitar
public GeneralMidi2Program GuitarHarmonics
public GeneralMidi2Program GuitarFeedback
public GeneralMidi2Program AcousticBass
public GeneralMidi2Program ElectricBassFinger
public GeneralMidi2Program FingerSlapBass
public GeneralMidi2Program ElectricBassPick
public GeneralMidi2Program FretlessBass
public GeneralMidi2Program SlapBass1
public GeneralMidi2Program SlapBass2
public GeneralMidi2Program SynthBass1
public GeneralMidi2Program SynthBassWarm
public GeneralMidi2Program SynthBass3Resonance
public GeneralMidi2Program ClaviBass
public GeneralMidi2Program Hammer
public GeneralMidi2Program SynthBass2
public GeneralMidi2Program SynthBass4Attack
public GeneralMidi2Program SynthBassRubber
public GeneralMidi2Program AttackPulse
public GeneralMidi2Program Violin
public GeneralMidi2Program ViolinSlowAttack
public GeneralMidi2Program Viola
public GeneralMidi2Program Cello
public GeneralMidi2Program Contrabass
public GeneralMidi2Program TremoloStrings
public GeneralMidi2Program PizzicatoStrings
public GeneralMidi2Program OrchestralHarp
public GeneralMidi2Program YangChin
public GeneralMidi2Program Timpani
public GeneralMidi2Program StringEnsembles1
public GeneralMidi2Program StringsAndBrass
public GeneralMidi2Program SixtiesStrings
public GeneralMidi2Program StringEnsembles2
public GeneralMidi2Program SynthStrings1
public GeneralMidi2Program SynthStrings3
public GeneralMidi2Program SynthStrings2
public GeneralMidi2Program ChoirAahs
public GeneralMidi2Program ChoirAahs2
public GeneralMidi2Program VoiceOohs
public GeneralMidi2Program Humming
public GeneralMidi2Program SynthVoice
public GeneralMidi2Program AnalogVoice
public GeneralMidi2Program OrchestraHit
public GeneralMidi2Program BassHitPlus
public GeneralMidi2Program SixthHit
public GeneralMidi2Program EuroHit
public GeneralMidi2Program Trumpet
public GeneralMidi2Program DarkTrumpetSoft
public GeneralMidi2Program Trombone
public GeneralMidi2Program Trombone2
public GeneralMidi2Program BrightTrombone
public GeneralMidi2Program Tuba
public GeneralMidi2Program MutedTrumpet
public GeneralMidi2Program MutedTrumpet2
public GeneralMidi2Program FrenchHorn
public GeneralMidi2Program FrenchHorn2Warm
public GeneralMidi2Program BrassSection
public GeneralMidi2Program BrassSection2OctaveMix
public GeneralMidi2Program SynthBrass1
public GeneralMidi2Program SynthBrass3
public GeneralMidi2Program AnalogSynthBrass1
public GeneralMidi2Program JumpBrass
public GeneralMidi2Program SynthBrass2
public GeneralMidi2Program SynthBrass4
public GeneralMidi2Program AnalogSynthBrass2
public GeneralMidi2Program SopranoSax
public GeneralMidi2Program AltoSax
public GeneralMidi2Program TenorSax
public GeneralMidi2Program BaritoneSax
public GeneralMidi2Program Oboe
public GeneralMidi2Program EnglishHorn
public GeneralMidi2Program Bassoon
public GeneralMidi2Program Clarinet
public GeneralMidi2Program Piccolo
public GeneralMidi2Program Flute
public GeneralMidi2Program Recorder
public GeneralMidi2Program PanFlute
public GeneralMidi2Program BlownBottle
public GeneralMidi2Program Shakuhachi
public GeneralMidi2Program Whistle
public GeneralMidi2Program Ocarina
public GeneralMidi2Program Lead1Square
public GeneralMidi2Program Lead1ASquare2
public GeneralMidi2Program Lead1BSine
public GeneralMidi2Program Lead2Sawtooth
public GeneralMidi2Program Lead2ASawtooth2
public GeneralMidi2Program Lead2BSawPulse
public GeneralMidi2Program Lead2CDoubleSawtooth
public GeneralMidi2Program Lead2DSequencedAnalog
public GeneralMidi2Program Lead3Calliope
public GeneralMidi2Program Lead4Chiff
public GeneralMidi2Program Lead5Charang
public GeneralMidi2Program Lead5AWireLead
public GeneralMidi2Program Lead6Voice
public GeneralMidi2Program Lead7Fifths
public GeneralMidi2Program Lead8BassLead
public GeneralMidi2Program Lead8ASoftWrl
public GeneralMidi2Program Pad1NewAge
public GeneralMidi2Program Pad2Warm
public GeneralMidi2Program Pad2ASinePad
public GeneralMidi2Program Pad3Polysynth
public GeneralMidi2Program Pad4Choir
public GeneralMidi2Program Pad4AItopia
public GeneralMidi2Program Pad5Bowed
public GeneralMidi2Program Pad6Metallic
public GeneralMidi2Program Pad7Halo
public GeneralMidi2Program Pad8Sweep
public GeneralMidi2Program Fx1Rain
public GeneralMidi2Program Fx2Soundtrack
public GeneralMidi2Program Fx3Crystal
public GeneralMidi2Program Fx3ASynthMallet
public GeneralMidi2Program Fx4Atmosphere
public GeneralMidi2Program Fx5Brightness
public GeneralMidi2Program Fx6Goblins
public GeneralMidi2Program Fx7Echoes
public GeneralMidi2Program Fx7AEchoBell
public GeneralMidi2Program Fx7BEchoPan
public GeneralMidi2Program Fx8SciFi
public GeneralMidi2Program Sitar
public GeneralMidi2Program Sitar2Bend
public GeneralMidi2Program Banjo
public GeneralMidi2Program Shamisen
public GeneralMidi2Program Koto
public GeneralMidi2Program TaishoKoto
public GeneralMidi2Program Kalimba
public GeneralMidi2Program BagPipe
public GeneralMidi2Program Fiddle
public GeneralMidi2Program Shanai
public GeneralMidi2Program TinkleBell
public GeneralMidi2Program Agogo
public GeneralMidi2Program SteelDrums
public GeneralMidi2Program Woodblock
public GeneralMidi2Program Castanets
public GeneralMidi2Program TaikoDrum
public GeneralMidi2Program ConcertBassDrum
public GeneralMidi2Program MelodicTom
public GeneralMidi2Program MelodicTom2Power
public GeneralMidi2Program SynthDrum
public GeneralMidi2Program RhythmBoxTom
public GeneralMidi2Program ElectricDrum
public GeneralMidi2Program ReverseCymbal
public GeneralMidi2Program GuitarFretNoise
public GeneralMidi2Program GuitarCuttingNoise
public GeneralMidi2Program AcousticBassStringSlap
public GeneralMidi2Program BreathNoise
public GeneralMidi2Program FluteKeyClick
public GeneralMidi2Program Seashore
public GeneralMidi2Program Rain
public GeneralMidi2Program Thunder
public GeneralMidi2Program Wind
public GeneralMidi2Program Stream
public GeneralMidi2Program Bubble
public GeneralMidi2Program BirdTweet
public GeneralMidi2Program Dog
public GeneralMidi2Program HorseGallop
public GeneralMidi2Program BirdTweet2
public GeneralMidi2Program TelephoneRing
public GeneralMidi2Program TelephoneRing2
public GeneralMidi2Program DoorCreaking
public GeneralMidi2Program Door
public GeneralMidi2Program Scratch
public GeneralMidi2Program WindChime
public GeneralMidi2Program Helicopter
public GeneralMidi2Program CarEngine
public GeneralMidi2Program CarStop
public GeneralMidi2Program CarPass
public GeneralMidi2Program CarCrash
public GeneralMidi2Program Siren
public GeneralMidi2Program Train
public GeneralMidi2Program Jetplane
public GeneralMidi2Program Starship
public GeneralMidi2Program BurstNoise
public GeneralMidi2Program Applause
public GeneralMidi2Program Laughing
public GeneralMidi2Program Screaming
public GeneralMidi2Program Punch
public GeneralMidi2Program HeartBeat
public GeneralMidi2Program Footsteps
public GeneralMidi2Program Gunshot
public GeneralMidi2Program MachineGun
public GeneralMidi2Program Lasergun
public GeneralMidi2Program Explosion
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2RoomPercussion : Enum {
public byte value__
public GeneralMidi2RoomPercussion HighQ
public GeneralMidi2RoomPercussion Slap
public GeneralMidi2RoomPercussion ScratchPush
public GeneralMidi2RoomPercussion ScratchPull
public GeneralMidi2RoomPercussion Sticks
public GeneralMidi2RoomPercussion SquareClick
public GeneralMidi2RoomPercussion MetronomeClick
public GeneralMidi2RoomPercussion MetronomeBell
public GeneralMidi2RoomPercussion AcousticBassDrum
public GeneralMidi2RoomPercussion BassDrum1
public GeneralMidi2RoomPercussion SideStick
public GeneralMidi2RoomPercussion AcousticSnare
public GeneralMidi2RoomPercussion HandClap
public GeneralMidi2RoomPercussion ElectricSnare
public GeneralMidi2RoomPercussion RoomLowTom2
public GeneralMidi2RoomPercussion ClosedHiHat
public GeneralMidi2RoomPercussion RoomLowTom1
public GeneralMidi2RoomPercussion PedalHiHat
public GeneralMidi2RoomPercussion RoomMidTom2
public GeneralMidi2RoomPercussion OpenHiHat
public GeneralMidi2RoomPercussion RoomMidTom1
public GeneralMidi2RoomPercussion RoomHiTom2
public GeneralMidi2RoomPercussion CrashCymbal1
public GeneralMidi2RoomPercussion RoomHiTom1
public GeneralMidi2RoomPercussion RideCymbal1
public GeneralMidi2RoomPercussion ChineseCymbal
public GeneralMidi2RoomPercussion RideBell
public GeneralMidi2RoomPercussion Tambourine
public GeneralMidi2RoomPercussion SplashCymbal
public GeneralMidi2RoomPercussion Cowbell
public GeneralMidi2RoomPercussion CrashCymbal2
public GeneralMidi2RoomPercussion Vibraslap
public GeneralMidi2RoomPercussion RideCymbal2
public GeneralMidi2RoomPercussion HiBongo
public GeneralMidi2RoomPercussion LowBongo
public GeneralMidi2RoomPercussion MuteHiConga
public GeneralMidi2RoomPercussion OpenHiConga
public GeneralMidi2RoomPercussion LowConga
public GeneralMidi2RoomPercussion HighTimbale
public GeneralMidi2RoomPercussion LowTimbale
public GeneralMidi2RoomPercussion HighAgogo
public GeneralMidi2RoomPercussion LowAgogo
public GeneralMidi2RoomPercussion Cabasa
public GeneralMidi2RoomPercussion Maracas
public GeneralMidi2RoomPercussion ShortWhistle
public GeneralMidi2RoomPercussion LongWhistle
public GeneralMidi2RoomPercussion ShortGuiro
public GeneralMidi2RoomPercussion LongGuiro
public GeneralMidi2RoomPercussion Claves
public GeneralMidi2RoomPercussion HiWoodBlock
public GeneralMidi2RoomPercussion LowWoodBlock
public GeneralMidi2RoomPercussion MuteCuica
public GeneralMidi2RoomPercussion OpenCuica
public GeneralMidi2RoomPercussion MuteTriangle
public GeneralMidi2RoomPercussion OpenTriangle
public GeneralMidi2RoomPercussion Shaker
public GeneralMidi2RoomPercussion JingleBell
public GeneralMidi2RoomPercussion Belltree
public GeneralMidi2RoomPercussion Castanets
public GeneralMidi2RoomPercussion MuteSurdo
public GeneralMidi2RoomPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2SfxPercussion : Enum {
public byte value__
public GeneralMidi2SfxPercussion HighQ
public GeneralMidi2SfxPercussion Slap
public GeneralMidi2SfxPercussion ScratchPush
public GeneralMidi2SfxPercussion ScratchPull
public GeneralMidi2SfxPercussion Sticks
public GeneralMidi2SfxPercussion SquareClick
public GeneralMidi2SfxPercussion MetronomeClick
public GeneralMidi2SfxPercussion MetronomeBell
public GeneralMidi2SfxPercussion GuitarFretNoise
public GeneralMidi2SfxPercussion GuitarCuttingNoiseUp
public GeneralMidi2SfxPercussion GuitarCuttingNoiseDown
public GeneralMidi2SfxPercussion StringSlapOfDoubleBass
public GeneralMidi2SfxPercussion FlKeyClick
public GeneralMidi2SfxPercussion Laughing
public GeneralMidi2SfxPercussion Scream
public GeneralMidi2SfxPercussion Punch
public GeneralMidi2SfxPercussion HeartBeat
public GeneralMidi2SfxPercussion Footsteps1
public GeneralMidi2SfxPercussion Footsteps2
public GeneralMidi2SfxPercussion Applause
public GeneralMidi2SfxPercussion DoorCreaking
public GeneralMidi2SfxPercussion Door
public GeneralMidi2SfxPercussion Scratch
public GeneralMidi2SfxPercussion WindChimes
public GeneralMidi2SfxPercussion CarEngine
public GeneralMidi2SfxPercussion CarStop
public GeneralMidi2SfxPercussion CarPass
public GeneralMidi2SfxPercussion CarCrash
public GeneralMidi2SfxPercussion Siren
public GeneralMidi2SfxPercussion Train
public GeneralMidi2SfxPercussion Jetplane
public GeneralMidi2SfxPercussion Helicopter
public GeneralMidi2SfxPercussion Starship
public GeneralMidi2SfxPercussion GunShot
public GeneralMidi2SfxPercussion MachineGun
public GeneralMidi2SfxPercussion Lasergun
public GeneralMidi2SfxPercussion Explosion
public GeneralMidi2SfxPercussion Dog
public GeneralMidi2SfxPercussion HorseGallop
public GeneralMidi2SfxPercussion Birds
public GeneralMidi2SfxPercussion Rain
public GeneralMidi2SfxPercussion Thunder
public GeneralMidi2SfxPercussion Wind
public GeneralMidi2SfxPercussion Seashore
public GeneralMidi2SfxPercussion Stream
public GeneralMidi2SfxPercussion Bubble
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2StandardPercussion : Enum {
public byte value__
public GeneralMidi2StandardPercussion HighQ
public GeneralMidi2StandardPercussion Slap
public GeneralMidi2StandardPercussion ScratchPush
public GeneralMidi2StandardPercussion ScratchPull
public GeneralMidi2StandardPercussion Sticks
public GeneralMidi2StandardPercussion SquareClick
public GeneralMidi2StandardPercussion MetronomeClick
public GeneralMidi2StandardPercussion MetronomeBell
public GeneralMidi2StandardPercussion AcousticBassDrum
public GeneralMidi2StandardPercussion BassDrum1
public GeneralMidi2StandardPercussion SideStick
public GeneralMidi2StandardPercussion AcousticSnare
public GeneralMidi2StandardPercussion HandClap
public GeneralMidi2StandardPercussion ElectricSnare
public GeneralMidi2StandardPercussion LowFloorTom
public GeneralMidi2StandardPercussion ClosedHiHat
public GeneralMidi2StandardPercussion HighFloorTom
public GeneralMidi2StandardPercussion PedalHiHat
public GeneralMidi2StandardPercussion LowTom
public GeneralMidi2StandardPercussion OpenHiHat
public GeneralMidi2StandardPercussion LowMidTom
public GeneralMidi2StandardPercussion HiMidTom
public GeneralMidi2StandardPercussion CrashCymbal1
public GeneralMidi2StandardPercussion HighTom
public GeneralMidi2StandardPercussion RideCymbal1
public GeneralMidi2StandardPercussion ChineseCymbal
public GeneralMidi2StandardPercussion RideBell
public GeneralMidi2StandardPercussion Tambourine
public GeneralMidi2StandardPercussion SplashCymbal
public GeneralMidi2StandardPercussion Cowbell
public GeneralMidi2StandardPercussion CrashCymbal2
public GeneralMidi2StandardPercussion Vibraslap
public GeneralMidi2StandardPercussion RideCymbal2
public GeneralMidi2StandardPercussion HiBongo
public GeneralMidi2StandardPercussion LowBongo
public GeneralMidi2StandardPercussion MuteHiConga
public GeneralMidi2StandardPercussion OpenHiConga
public GeneralMidi2StandardPercussion LowConga
public GeneralMidi2StandardPercussion HighTimbale
public GeneralMidi2StandardPercussion LowTimbale
public GeneralMidi2StandardPercussion HighAgogo
public GeneralMidi2StandardPercussion LowAgogo
public GeneralMidi2StandardPercussion Cabasa
public GeneralMidi2StandardPercussion Maracas
public GeneralMidi2StandardPercussion ShortWhistle
public GeneralMidi2StandardPercussion LongWhistle
public GeneralMidi2StandardPercussion ShortGuiro
public GeneralMidi2StandardPercussion LongGuiro
public GeneralMidi2StandardPercussion Claves
public GeneralMidi2StandardPercussion HiWoodBlock
public GeneralMidi2StandardPercussion LowWoodBlock
public GeneralMidi2StandardPercussion MuteCuica
public GeneralMidi2StandardPercussion OpenCuica
public GeneralMidi2StandardPercussion MuteTriangle
public GeneralMidi2StandardPercussion OpenTriangle
public GeneralMidi2StandardPercussion Shaker
public GeneralMidi2StandardPercussion JingleBell
public GeneralMidi2StandardPercussion Belltree
public GeneralMidi2StandardPercussion Castanets
public GeneralMidi2StandardPercussion MuteSurdo
public GeneralMidi2StandardPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralMidi2Utilities : object {
private byte MelodyChannelBankMsb
private byte RhythmChannelBankMsb
private Dictionary`2<GeneralMidi2Program, GeneralMidi2ProgramData> ProgramsData
public IEnumerable`1<MidiEvent> GetProgramEvents(GeneralMidi2Program program, FourBitNumber channel)
public IEnumerable`1<MidiEvent> GetPercussionSetEvents(GeneralMidi2PercussionSet percussionSet, FourBitNumber channel)
public MidiEvent GetProgramEvent(GeneralMidi2PercussionSet percussionSet, FourBitNumber channel)
public SevenBitNumber AsSevenBitNumber(GeneralMidi2PercussionSet percussionSet)
public SevenBitNumber AsSevenBitNumber(GeneralMidi2AnalogPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralMidi2BrushPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralMidi2ElectronicPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralMidi2JazzPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralMidi2OrchestraPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralMidi2PowerPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralMidi2RoomPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralMidi2SfxPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralMidi2StandardPercussion percussion)
public NoteOnEvent GetNoteOnEvent(GeneralMidi2AnalogPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralMidi2BrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralMidi2ElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralMidi2JazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralMidi2OrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralMidi2PowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralMidi2RoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralMidi2SfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralMidi2StandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidi2AnalogPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidi2BrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidi2ElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidi2JazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidi2OrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidi2PowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidi2RoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidi2SfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidi2StandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
private IEnumerable`1<GeneralMidi2ProgramData> GetProgramsData(GeneralMidiProgram generalMidiProgram, GeneralMidi2Program[] programs)
private GeneralMidi2ProgramData GetProgramData(GeneralMidi2Program generalMidi2Program, GeneralMidiProgram generalMidiProgram, byte bankMsb, byte bankLsb)
}
public Melanchall.DryWetMidi.Standards.GeneralMidiPercussion : Enum {
public byte value__
public GeneralMidiPercussion AcousticBassDrum
public GeneralMidiPercussion BassDrum1
public GeneralMidiPercussion SideStick
public GeneralMidiPercussion AcousticSnare
public GeneralMidiPercussion HandClap
public GeneralMidiPercussion ElectricSnare
public GeneralMidiPercussion LowFloorTom
public GeneralMidiPercussion ClosedHiHat
public GeneralMidiPercussion HighFloorTom
public GeneralMidiPercussion PedalHiHat
public GeneralMidiPercussion LowTom
public GeneralMidiPercussion OpenHiHat
public GeneralMidiPercussion LowMidTom
public GeneralMidiPercussion HiMidTom
public GeneralMidiPercussion CrashCymbal1
public GeneralMidiPercussion HighTom
public GeneralMidiPercussion RideCymbal1
public GeneralMidiPercussion ChineseCymbal
public GeneralMidiPercussion RideBell
public GeneralMidiPercussion Tambourine
public GeneralMidiPercussion SplashCymbal
public GeneralMidiPercussion Cowbell
public GeneralMidiPercussion CrashCymbal2
public GeneralMidiPercussion Vibraslap
public GeneralMidiPercussion RideCymbal2
public GeneralMidiPercussion HiBongo
public GeneralMidiPercussion LowBongo
public GeneralMidiPercussion MuteHiConga
public GeneralMidiPercussion OpenHiConga
public GeneralMidiPercussion LowConga
public GeneralMidiPercussion HighTimbale
public GeneralMidiPercussion LowTimbale
public GeneralMidiPercussion HighAgogo
public GeneralMidiPercussion LowAgogo
public GeneralMidiPercussion Cabasa
public GeneralMidiPercussion Maracas
public GeneralMidiPercussion ShortWhistle
public GeneralMidiPercussion LongWhistle
public GeneralMidiPercussion ShortGuiro
public GeneralMidiPercussion LongGuiro
public GeneralMidiPercussion Claves
public GeneralMidiPercussion HiWoodBlock
public GeneralMidiPercussion LowWoodBlock
public GeneralMidiPercussion MuteCuica
public GeneralMidiPercussion OpenCuica
public GeneralMidiPercussion MuteTriangle
public GeneralMidiPercussion OpenTriangle
}
public Melanchall.DryWetMidi.Standards.GeneralMidiProgram : Enum {
public byte value__
public GeneralMidiProgram AcousticGrandPiano
public GeneralMidiProgram BrightAcousticPiano
public GeneralMidiProgram ElectricGrandPiano
public GeneralMidiProgram HonkyTonkPiano
public GeneralMidiProgram ElectricPiano1
public GeneralMidiProgram ElectricPiano2
public GeneralMidiProgram Harpsichord
public GeneralMidiProgram Clavi
public GeneralMidiProgram Celesta
public GeneralMidiProgram Glockenspiel
public GeneralMidiProgram MusicBox
public GeneralMidiProgram Vibraphone
public GeneralMidiProgram Marimba
public GeneralMidiProgram Xylophone
public GeneralMidiProgram TubularBells
public GeneralMidiProgram Dulcimer
public GeneralMidiProgram DrawbarOrgan
public GeneralMidiProgram PercussiveOrgan
public GeneralMidiProgram RockOrgan
public GeneralMidiProgram ChurchOrgan
public GeneralMidiProgram ReedOrgan
public GeneralMidiProgram Accordion
public GeneralMidiProgram Harmonica
public GeneralMidiProgram TangoAccordion
public GeneralMidiProgram AcousticGuitar1
public GeneralMidiProgram AcousticGuitar2
public GeneralMidiProgram ElectricGuitar1
public GeneralMidiProgram ElectricGuitar2
public GeneralMidiProgram ElectricGuitar3
public GeneralMidiProgram OverdrivenGuitar
public GeneralMidiProgram DistortionGuitar
public GeneralMidiProgram GuitarHarmonics
public GeneralMidiProgram AcousticBass
public GeneralMidiProgram ElectricBass1
public GeneralMidiProgram ElectricBass2
public GeneralMidiProgram FretlessBass
public GeneralMidiProgram SlapBass1
public GeneralMidiProgram SlapBass2
public GeneralMidiProgram SynthBass1
public GeneralMidiProgram SynthBass2
public GeneralMidiProgram Violin
public GeneralMidiProgram Viola
public GeneralMidiProgram Cello
public GeneralMidiProgram Contrabass
public GeneralMidiProgram TremoloStrings
public GeneralMidiProgram PizzicatoStrings
public GeneralMidiProgram OrchestralHarp
public GeneralMidiProgram Timpani
public GeneralMidiProgram StringEnsemble1
public GeneralMidiProgram StringEnsemble2
public GeneralMidiProgram SynthStrings1
public GeneralMidiProgram SynthStrings2
public GeneralMidiProgram ChoirAahs
public GeneralMidiProgram VoiceOohs
public GeneralMidiProgram SynthVoice
public GeneralMidiProgram OrchestraHit
public GeneralMidiProgram Trumpet
public GeneralMidiProgram Trombone
public GeneralMidiProgram Tuba
public GeneralMidiProgram MutedTrumpet
public GeneralMidiProgram FrenchHorn
public GeneralMidiProgram BrassSection
public GeneralMidiProgram SynthBrass1
public GeneralMidiProgram SynthBrass2
public GeneralMidiProgram SopranoSax
public GeneralMidiProgram AltoSax
public GeneralMidiProgram TenorSax
public GeneralMidiProgram BaritoneSax
public GeneralMidiProgram Oboe
public GeneralMidiProgram EnglishHorn
public GeneralMidiProgram Bassoon
public GeneralMidiProgram Clarinet
public GeneralMidiProgram Piccolo
public GeneralMidiProgram Flute
public GeneralMidiProgram Recorder
public GeneralMidiProgram PanFlute
public GeneralMidiProgram BlownBottle
public GeneralMidiProgram Shakuhachi
public GeneralMidiProgram Whistle
public GeneralMidiProgram Ocarina
public GeneralMidiProgram Lead1
public GeneralMidiProgram Lead2
public GeneralMidiProgram Lead3
public GeneralMidiProgram Lead4
public GeneralMidiProgram Lead5
public GeneralMidiProgram Lead6
public GeneralMidiProgram Lead7
public GeneralMidiProgram Lead8
public GeneralMidiProgram Pad1
public GeneralMidiProgram Pad2
public GeneralMidiProgram Pad3
public GeneralMidiProgram Pad4
public GeneralMidiProgram Pad5
public GeneralMidiProgram Pad6
public GeneralMidiProgram Pad7
public GeneralMidiProgram Pad8
public GeneralMidiProgram Fx1
public GeneralMidiProgram Fx2
public GeneralMidiProgram Fx3
public GeneralMidiProgram Fx4
public GeneralMidiProgram Fx5
public GeneralMidiProgram Fx6
public GeneralMidiProgram Fx7
public GeneralMidiProgram Fx8
public GeneralMidiProgram Sitar
public GeneralMidiProgram Banjo
public GeneralMidiProgram Shamisen
public GeneralMidiProgram Koto
public GeneralMidiProgram Kalimba
public GeneralMidiProgram BagPipe
public GeneralMidiProgram Fiddle
public GeneralMidiProgram Shanai
public GeneralMidiProgram TinkleBell
public GeneralMidiProgram Agogo
public GeneralMidiProgram SteelDrums
public GeneralMidiProgram Woodblock
public GeneralMidiProgram TaikoDrum
public GeneralMidiProgram MelodicTom
public GeneralMidiProgram SynthDrum
public GeneralMidiProgram ReverseCymbal
public GeneralMidiProgram GuitarFretNoise
public GeneralMidiProgram BreathNoise
public GeneralMidiProgram Seashore
public GeneralMidiProgram BirdTweet
public GeneralMidiProgram TelephoneRing
public GeneralMidiProgram Helicopter
public GeneralMidiProgram Applause
public GeneralMidiProgram Gunshot
}
public Melanchall.DryWetMidi.Standards.GeneralMidiUtilities : object {
public SevenBitNumber AsSevenBitNumber(GeneralMidiProgram program)
public SevenBitNumber AsSevenBitNumber(GeneralMidiPercussion percussion)
public MidiEvent GetProgramEvent(GeneralMidiProgram program, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralMidiPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralMidiPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
}
public Melanchall.DryWetMidi.Standards.GeneralSoundBrushPercussion : Enum {
public byte value__
public GeneralSoundBrushPercussion HighQ
public GeneralSoundBrushPercussion Slap
public GeneralSoundBrushPercussion ScratchPush
public GeneralSoundBrushPercussion ScratchPull
public GeneralSoundBrushPercussion Sticks
public GeneralSoundBrushPercussion SquareClick
public GeneralSoundBrushPercussion MetronomeClick
public GeneralSoundBrushPercussion MetronomeBell
public GeneralSoundBrushPercussion JazzKick2
public GeneralSoundBrushPercussion JazzKick1
public GeneralSoundBrushPercussion SideStick
public GeneralSoundBrushPercussion BrushTap
public GeneralSoundBrushPercussion BrushSlap
public GeneralSoundBrushPercussion BrushSwirl
public GeneralSoundBrushPercussion LowFloorTom
public GeneralSoundBrushPercussion ClosedHiHat
public GeneralSoundBrushPercussion HighFloorTom
public GeneralSoundBrushPercussion PedalHiHat
public GeneralSoundBrushPercussion LowTom
public GeneralSoundBrushPercussion OpenHiHat
public GeneralSoundBrushPercussion LowMidTom
public GeneralSoundBrushPercussion HiMidTom
public GeneralSoundBrushPercussion CrashCymbal1
public GeneralSoundBrushPercussion HighTom
public GeneralSoundBrushPercussion RideCymbal1
public GeneralSoundBrushPercussion ChineseCymbal
public GeneralSoundBrushPercussion RideBell
public GeneralSoundBrushPercussion Tambourine
public GeneralSoundBrushPercussion SplashCymbal
public GeneralSoundBrushPercussion Cowbell
public GeneralSoundBrushPercussion CrashCymbal2
public GeneralSoundBrushPercussion Vibraslap
public GeneralSoundBrushPercussion RideCymbal2
public GeneralSoundBrushPercussion HiBongo
public GeneralSoundBrushPercussion LowBongo
public GeneralSoundBrushPercussion MuteHiConga
public GeneralSoundBrushPercussion OpenHiConga
public GeneralSoundBrushPercussion LowConga
public GeneralSoundBrushPercussion HighTimbale
public GeneralSoundBrushPercussion LowTimbale
public GeneralSoundBrushPercussion HighAgogo
public GeneralSoundBrushPercussion LowAgogo
public GeneralSoundBrushPercussion Cabasa
public GeneralSoundBrushPercussion Maracas
public GeneralSoundBrushPercussion ShortWhistle
public GeneralSoundBrushPercussion LongWhistle
public GeneralSoundBrushPercussion ShortGuiro
public GeneralSoundBrushPercussion LongGuiro
public GeneralSoundBrushPercussion Claves
public GeneralSoundBrushPercussion HiWoodBlock
public GeneralSoundBrushPercussion LowWoodBlock
public GeneralSoundBrushPercussion MuteCuica
public GeneralSoundBrushPercussion OpenCuica
public GeneralSoundBrushPercussion MuteTriangle
public GeneralSoundBrushPercussion OpenTriangle
public GeneralSoundBrushPercussion Shaker
public GeneralSoundBrushPercussion JingleBell
public GeneralSoundBrushPercussion Belltree
public GeneralSoundBrushPercussion Castanets
public GeneralSoundBrushPercussion MuteSurdo
public GeneralSoundBrushPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralSoundCm6432LPercussion : Enum {
public byte value__
public GeneralSoundCm6432LPercussion AcousticBassDrum1
public GeneralSoundCm6432LPercussion AcousticBassDrum2
public GeneralSoundCm6432LPercussion RimShot
public GeneralSoundCm6432LPercussion AcousticSnareDrum
public GeneralSoundCm6432LPercussion HandClap
public GeneralSoundCm6432LPercussion ElectronicSnareDrum
public GeneralSoundCm6432LPercussion AcousticLowTom1
public GeneralSoundCm6432LPercussion ClosedHiHat
public GeneralSoundCm6432LPercussion AcousticLowTom2
public GeneralSoundCm6432LPercussion OpenHiHat1
public GeneralSoundCm6432LPercussion AcousticMidTom1
public GeneralSoundCm6432LPercussion OpenHiHat2
public GeneralSoundCm6432LPercussion AcousticMidTom2
public GeneralSoundCm6432LPercussion AcousticHiTom1
public GeneralSoundCm6432LPercussion CrashCymbal
public GeneralSoundCm6432LPercussion AcousticHiTom2
public GeneralSoundCm6432LPercussion RideCymbal
public GeneralSoundCm6432LPercussion Tambourine
public GeneralSoundCm6432LPercussion Cowbell
public GeneralSoundCm6432LPercussion HighBongo
public GeneralSoundCm6432LPercussion LowBongo
public GeneralSoundCm6432LPercussion MuteHiConga
public GeneralSoundCm6432LPercussion HighConga
public GeneralSoundCm6432LPercussion LowConga
public GeneralSoundCm6432LPercussion HighTimbale
public GeneralSoundCm6432LPercussion LowTimbale
public GeneralSoundCm6432LPercussion HighAgogo
public GeneralSoundCm6432LPercussion LowAgogo
public GeneralSoundCm6432LPercussion Cabasa
public GeneralSoundCm6432LPercussion Maracas
public GeneralSoundCm6432LPercussion ShortWhistle
public GeneralSoundCm6432LPercussion LongWhistle
public GeneralSoundCm6432LPercussion Quijada
public GeneralSoundCm6432LPercussion Claves
public GeneralSoundCm6432LPercussion Laughing
public GeneralSoundCm6432LPercussion Screaming
public GeneralSoundCm6432LPercussion Punch
public GeneralSoundCm6432LPercussion Heartbeat
public GeneralSoundCm6432LPercussion Footsteps1
public GeneralSoundCm6432LPercussion Footsteps2
public GeneralSoundCm6432LPercussion Applause
public GeneralSoundCm6432LPercussion DoorCreaking
public GeneralSoundCm6432LPercussion DoorClosing
public GeneralSoundCm6432LPercussion Scratch
public GeneralSoundCm6432LPercussion WindChimes
public GeneralSoundCm6432LPercussion CarEngine
public GeneralSoundCm6432LPercussion CarBrakes
public GeneralSoundCm6432LPercussion CarPassing
public GeneralSoundCm6432LPercussion CarCrash
public GeneralSoundCm6432LPercussion Siren
public GeneralSoundCm6432LPercussion Train
public GeneralSoundCm6432LPercussion JetPlane
public GeneralSoundCm6432LPercussion Helicopter
public GeneralSoundCm6432LPercussion Starship
public GeneralSoundCm6432LPercussion GunShot
public GeneralSoundCm6432LPercussion MachineGun
public GeneralSoundCm6432LPercussion LaserGun
public GeneralSoundCm6432LPercussion Explosion
public GeneralSoundCm6432LPercussion DogBark
public GeneralSoundCm6432LPercussion HorseGallop
public GeneralSoundCm6432LPercussion BirdsTweet
public GeneralSoundCm6432LPercussion Rain
public GeneralSoundCm6432LPercussion Thunder
public GeneralSoundCm6432LPercussion Wind
public GeneralSoundCm6432LPercussion Seashore
public GeneralSoundCm6432LPercussion Stream
public GeneralSoundCm6432LPercussion Bubble
}
public Melanchall.DryWetMidi.Standards.GeneralSoundElectronicPercussion : Enum {
public byte value__
public GeneralSoundElectronicPercussion HighQ
public GeneralSoundElectronicPercussion Slap
public GeneralSoundElectronicPercussion ScratchPush
public GeneralSoundElectronicPercussion ScratchPull
public GeneralSoundElectronicPercussion Sticks
public GeneralSoundElectronicPercussion SquareClick
public GeneralSoundElectronicPercussion MetronomeClick
public GeneralSoundElectronicPercussion MetronomeBell
public GeneralSoundElectronicPercussion AcousticBassDrum
public GeneralSoundElectronicPercussion ElectricBassDrum
public GeneralSoundElectronicPercussion SideStick
public GeneralSoundElectronicPercussion ElectricSnare1
public GeneralSoundElectronicPercussion HandClap
public GeneralSoundElectronicPercussion ElectricSnare2
public GeneralSoundElectronicPercussion ElectricLowTom2
public GeneralSoundElectronicPercussion ClosedHiHat
public GeneralSoundElectronicPercussion ElectricLowTom1
public GeneralSoundElectronicPercussion PedalHiHat
public GeneralSoundElectronicPercussion ElectricMidTom2
public GeneralSoundElectronicPercussion OpenHiHat
public GeneralSoundElectronicPercussion ElectricMidTom1
public GeneralSoundElectronicPercussion ElectricHiTom2
public GeneralSoundElectronicPercussion CrashCymbal1
public GeneralSoundElectronicPercussion ElectricHiTom1
public GeneralSoundElectronicPercussion RideCymbal1
public GeneralSoundElectronicPercussion ReverseCymbal
public GeneralSoundElectronicPercussion RideBell
public GeneralSoundElectronicPercussion Tambourine
public GeneralSoundElectronicPercussion SplashCymbal
public GeneralSoundElectronicPercussion Cowbell
public GeneralSoundElectronicPercussion CrashCymbal2
public GeneralSoundElectronicPercussion Vibraslap
public GeneralSoundElectronicPercussion RideCymbal2
public GeneralSoundElectronicPercussion HiBongo
public GeneralSoundElectronicPercussion LowBongo
public GeneralSoundElectronicPercussion MuteHiConga
public GeneralSoundElectronicPercussion OpenHiConga
public GeneralSoundElectronicPercussion LowConga
public GeneralSoundElectronicPercussion HighTimbale
public GeneralSoundElectronicPercussion LowTimbale
public GeneralSoundElectronicPercussion HighAgogo
public GeneralSoundElectronicPercussion LowAgogo
public GeneralSoundElectronicPercussion Cabasa
public GeneralSoundElectronicPercussion Maracas
public GeneralSoundElectronicPercussion ShortWhistle
public GeneralSoundElectronicPercussion LongWhistle
public GeneralSoundElectronicPercussion ShortGuiro
public GeneralSoundElectronicPercussion LongGuiro
public GeneralSoundElectronicPercussion Claves
public GeneralSoundElectronicPercussion HiWoodBlock
public GeneralSoundElectronicPercussion LowWoodBlock
public GeneralSoundElectronicPercussion MuteCuica
public GeneralSoundElectronicPercussion OpenCuica
public GeneralSoundElectronicPercussion MuteTriangle
public GeneralSoundElectronicPercussion OpenTriangle
public GeneralSoundElectronicPercussion Shaker
public GeneralSoundElectronicPercussion JingleBell
public GeneralSoundElectronicPercussion Belltree
public GeneralSoundElectronicPercussion Castanets
public GeneralSoundElectronicPercussion MuteSurdo
public GeneralSoundElectronicPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralSoundJazzPercussion : Enum {
public byte value__
public GeneralSoundJazzPercussion HighQ
public GeneralSoundJazzPercussion Slap
public GeneralSoundJazzPercussion ScratchPush
public GeneralSoundJazzPercussion ScratchPull
public GeneralSoundJazzPercussion Sticks
public GeneralSoundJazzPercussion SquareClick
public GeneralSoundJazzPercussion MetronomeClick
public GeneralSoundJazzPercussion MetronomeBell
public GeneralSoundJazzPercussion JazzKick2
public GeneralSoundJazzPercussion JazzKick1
public GeneralSoundJazzPercussion SideStick
public GeneralSoundJazzPercussion AcousticSnare
public GeneralSoundJazzPercussion HandClap
public GeneralSoundJazzPercussion ElectricSnare
public GeneralSoundJazzPercussion LowFloorTom
public GeneralSoundJazzPercussion ClosedHiHat
public GeneralSoundJazzPercussion HighFloorTom
public GeneralSoundJazzPercussion PedalHiHat
public GeneralSoundJazzPercussion LowTom
public GeneralSoundJazzPercussion OpenHiHat
public GeneralSoundJazzPercussion LowMidTom
public GeneralSoundJazzPercussion HiMidTom
public GeneralSoundJazzPercussion CrashCymbal1
public GeneralSoundJazzPercussion HighTom
public GeneralSoundJazzPercussion RideCymbal1
public GeneralSoundJazzPercussion ChineseCymbal
public GeneralSoundJazzPercussion RideBell
public GeneralSoundJazzPercussion Tambourine
public GeneralSoundJazzPercussion SplashCymbal
public GeneralSoundJazzPercussion Cowbell
public GeneralSoundJazzPercussion CrashCymbal2
public GeneralSoundJazzPercussion Vibraslap
public GeneralSoundJazzPercussion RideCymbal2
public GeneralSoundJazzPercussion HiBongo
public GeneralSoundJazzPercussion LowBongo
public GeneralSoundJazzPercussion MuteHiConga
public GeneralSoundJazzPercussion OpenHiConga
public GeneralSoundJazzPercussion LowConga
public GeneralSoundJazzPercussion HighTimbale
public GeneralSoundJazzPercussion LowTimbale
public GeneralSoundJazzPercussion HighAgogo
public GeneralSoundJazzPercussion LowAgogo
public GeneralSoundJazzPercussion Cabasa
public GeneralSoundJazzPercussion Maracas
public GeneralSoundJazzPercussion ShortWhistle
public GeneralSoundJazzPercussion LongWhistle
public GeneralSoundJazzPercussion ShortGuiro
public GeneralSoundJazzPercussion LongGuiro
public GeneralSoundJazzPercussion Claves
public GeneralSoundJazzPercussion HiWoodBlock
public GeneralSoundJazzPercussion LowWoodBlock
public GeneralSoundJazzPercussion MuteCuica
public GeneralSoundJazzPercussion OpenCuica
public GeneralSoundJazzPercussion MuteTriangle
public GeneralSoundJazzPercussion OpenTriangle
public GeneralSoundJazzPercussion Shaker
public GeneralSoundJazzPercussion JingleBell
public GeneralSoundJazzPercussion Belltree
public GeneralSoundJazzPercussion Castanets
public GeneralSoundJazzPercussion MuteSurdo
public GeneralSoundJazzPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralSoundOrchestraPercussion : Enum {
public byte value__
public GeneralSoundOrchestraPercussion ClosedHiHat2
public GeneralSoundOrchestraPercussion PedalHiHat
public GeneralSoundOrchestraPercussion OpenHiHat2
public GeneralSoundOrchestraPercussion RideCymbal1
public GeneralSoundOrchestraPercussion Sticks
public GeneralSoundOrchestraPercussion SquareClick
public GeneralSoundOrchestraPercussion MetronomeClick
public GeneralSoundOrchestraPercussion MetronomeBell
public GeneralSoundOrchestraPercussion ConcertBassDrum2
public GeneralSoundOrchestraPercussion ConcertBassDrum1
public GeneralSoundOrchestraPercussion SideStick
public GeneralSoundOrchestraPercussion ConcertSnareDrum
public GeneralSoundOrchestraPercussion Castanets
public GeneralSoundOrchestraPercussion ConcertSnareDrum2
public GeneralSoundOrchestraPercussion TimpaniF
public GeneralSoundOrchestraPercussion TimpaniFSharp
public GeneralSoundOrchestraPercussion TimpaniG
public GeneralSoundOrchestraPercussion TimpaniGSharp
public GeneralSoundOrchestraPercussion TimpaniA
public GeneralSoundOrchestraPercussion TimpaniASharp
public GeneralSoundOrchestraPercussion TimpaniB
public GeneralSoundOrchestraPercussion TimpaniC
public GeneralSoundOrchestraPercussion TimpaniCSharp
public GeneralSoundOrchestraPercussion TimpaniD
public GeneralSoundOrchestraPercussion TimpaniDSharp
public GeneralSoundOrchestraPercussion TimpaniE
public GeneralSoundOrchestraPercussion TimpaniF2
public GeneralSoundOrchestraPercussion Tambourine
public GeneralSoundOrchestraPercussion SplashCymbal
public GeneralSoundOrchestraPercussion Cowbell
public GeneralSoundOrchestraPercussion ConcertCymbal2
public GeneralSoundOrchestraPercussion Vibraslap
public GeneralSoundOrchestraPercussion ConcertCymbal1
public GeneralSoundOrchestraPercussion HiBongo
public GeneralSoundOrchestraPercussion LowBongo
public GeneralSoundOrchestraPercussion MuteHiConga
public GeneralSoundOrchestraPercussion OpenHiConga
public GeneralSoundOrchestraPercussion LowConga
public GeneralSoundOrchestraPercussion HighTimbale
public GeneralSoundOrchestraPercussion LowTimbale
public GeneralSoundOrchestraPercussion HighAgogo
public GeneralSoundOrchestraPercussion LowAgogo
public GeneralSoundOrchestraPercussion Cabasa
public GeneralSoundOrchestraPercussion Maracas
public GeneralSoundOrchestraPercussion ShortWhistle
public GeneralSoundOrchestraPercussion LongWhistle
public GeneralSoundOrchestraPercussion ShortGuiro
public GeneralSoundOrchestraPercussion LongGuiro
public GeneralSoundOrchestraPercussion Claves
public GeneralSoundOrchestraPercussion HiWoodBlock
public GeneralSoundOrchestraPercussion LowWoodBlock
public GeneralSoundOrchestraPercussion MuteCuica
public GeneralSoundOrchestraPercussion OpenCuica
public GeneralSoundOrchestraPercussion MuteTriangle
public GeneralSoundOrchestraPercussion OpenTriangle
public GeneralSoundOrchestraPercussion Shaker
public GeneralSoundOrchestraPercussion JingleBell
public GeneralSoundOrchestraPercussion Belltree
public GeneralSoundOrchestraPercussion Castanets2
public GeneralSoundOrchestraPercussion MuteSurdo
public GeneralSoundOrchestraPercussion OpenSurdo
public GeneralSoundOrchestraPercussion Applause
}
public Melanchall.DryWetMidi.Standards.GeneralSoundPercussionSet : Enum {
public byte value__
public GeneralSoundPercussionSet Standard
public GeneralSoundPercussionSet Room
public GeneralSoundPercussionSet Power
public GeneralSoundPercussionSet Electronic
public GeneralSoundPercussionSet Tr808
public GeneralSoundPercussionSet Jazz
public GeneralSoundPercussionSet Brush
public GeneralSoundPercussionSet Orchestra
public GeneralSoundPercussionSet Sfx
public GeneralSoundPercussionSet Cm6432L
}
public Melanchall.DryWetMidi.Standards.GeneralSoundPowerPercussion : Enum {
public byte value__
public GeneralSoundPowerPercussion HighQ
public GeneralSoundPowerPercussion Slap
public GeneralSoundPowerPercussion ScratchPush
public GeneralSoundPowerPercussion ScratchPull
public GeneralSoundPowerPercussion Sticks
public GeneralSoundPowerPercussion SquareClick
public GeneralSoundPowerPercussion MetronomeClick
public GeneralSoundPowerPercussion MetronomeBell
public GeneralSoundPowerPercussion AcousticBassDrum
public GeneralSoundPowerPercussion PowerKickDrum
public GeneralSoundPowerPercussion SideStick
public GeneralSoundPowerPercussion PowerSnareDrum
public GeneralSoundPowerPercussion HandClap
public GeneralSoundPowerPercussion ElectricSnare
public GeneralSoundPowerPercussion PowerLowTom2
public GeneralSoundPowerPercussion ClosedHiHat
public GeneralSoundPowerPercussion PowerLowTom1
public GeneralSoundPowerPercussion PedalHiHat
public GeneralSoundPowerPercussion PowerMidTom2
public GeneralSoundPowerPercussion OpenHiHat
public GeneralSoundPowerPercussion PowerMidTom1
public GeneralSoundPowerPercussion PowerHiTom2
public GeneralSoundPowerPercussion CrashCymbal1
public GeneralSoundPowerPercussion PowerHiTom1
public GeneralSoundPowerPercussion RideCymbal1
public GeneralSoundPowerPercussion ChineseCymbal
public GeneralSoundPowerPercussion RideBell
public GeneralSoundPowerPercussion Tambourine
public GeneralSoundPowerPercussion SplashCymbal
public GeneralSoundPowerPercussion Cowbell
public GeneralSoundPowerPercussion CrashCymbal2
public GeneralSoundPowerPercussion Vibraslap
public GeneralSoundPowerPercussion RideCymbal2
public GeneralSoundPowerPercussion HiBongo
public GeneralSoundPowerPercussion LowBongo
public GeneralSoundPowerPercussion MuteHiConga
public GeneralSoundPowerPercussion OpenHiConga
public GeneralSoundPowerPercussion LowConga
public GeneralSoundPowerPercussion HighTimbale
public GeneralSoundPowerPercussion LowTimbale
public GeneralSoundPowerPercussion HighAgogo
public GeneralSoundPowerPercussion LowAgogo
public GeneralSoundPowerPercussion Cabasa
public GeneralSoundPowerPercussion Maracas
public GeneralSoundPowerPercussion ShortWhistle
public GeneralSoundPowerPercussion LongWhistle
public GeneralSoundPowerPercussion ShortGuiro
public GeneralSoundPowerPercussion LongGuiro
public GeneralSoundPowerPercussion Claves
public GeneralSoundPowerPercussion HiWoodBlock
public GeneralSoundPowerPercussion LowWoodBlock
public GeneralSoundPowerPercussion MuteCuica
public GeneralSoundPowerPercussion OpenCuica
public GeneralSoundPowerPercussion MuteTriangle
public GeneralSoundPowerPercussion OpenTriangle
public GeneralSoundPowerPercussion Shaker
public GeneralSoundPowerPercussion JingleBell
public GeneralSoundPowerPercussion Belltree
public GeneralSoundPowerPercussion Castanets
public GeneralSoundPowerPercussion MuteSurdo
public GeneralSoundPowerPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralSoundRoomPercussion : Enum {
public byte value__
public GeneralSoundRoomPercussion HighQ
public GeneralSoundRoomPercussion Slap
public GeneralSoundRoomPercussion ScratchPush
public GeneralSoundRoomPercussion ScratchPull
public GeneralSoundRoomPercussion Sticks
public GeneralSoundRoomPercussion SquareClick
public GeneralSoundRoomPercussion MetronomeClick
public GeneralSoundRoomPercussion MetronomeBell
public GeneralSoundRoomPercussion AcousticBassDrum
public GeneralSoundRoomPercussion BassDrum1
public GeneralSoundRoomPercussion SideStick
public GeneralSoundRoomPercussion AcousticSnare
public GeneralSoundRoomPercussion HandClap
public GeneralSoundRoomPercussion ElectricSnare
public GeneralSoundRoomPercussion RoomLowTom2
public GeneralSoundRoomPercussion ClosedHiHat
public GeneralSoundRoomPercussion RoomLowTom1
public GeneralSoundRoomPercussion PedalHiHat
public GeneralSoundRoomPercussion RoomMidTom2
public GeneralSoundRoomPercussion OpenHiHat
public GeneralSoundRoomPercussion RoomMidTom1
public GeneralSoundRoomPercussion RoomHiTom2
public GeneralSoundRoomPercussion CrashCymbal1
public GeneralSoundRoomPercussion RoomHiTom1
public GeneralSoundRoomPercussion RideCymbal1
public GeneralSoundRoomPercussion ChineseCymbal
public GeneralSoundRoomPercussion RideBell
public GeneralSoundRoomPercussion Tambourine
public GeneralSoundRoomPercussion SplashCymbal
public GeneralSoundRoomPercussion Cowbell
public GeneralSoundRoomPercussion CrashCymbal2
public GeneralSoundRoomPercussion Vibraslap
public GeneralSoundRoomPercussion RideCymbal2
public GeneralSoundRoomPercussion HiBongo
public GeneralSoundRoomPercussion LowBongo
public GeneralSoundRoomPercussion MuteHiConga
public GeneralSoundRoomPercussion OpenHiConga
public GeneralSoundRoomPercussion LowConga
public GeneralSoundRoomPercussion HighTimbale
public GeneralSoundRoomPercussion LowTimbale
public GeneralSoundRoomPercussion HighAgogo
public GeneralSoundRoomPercussion LowAgogo
public GeneralSoundRoomPercussion Cabasa
public GeneralSoundRoomPercussion Maracas
public GeneralSoundRoomPercussion ShortWhistle
public GeneralSoundRoomPercussion LongWhistle
public GeneralSoundRoomPercussion ShortGuiro
public GeneralSoundRoomPercussion LongGuiro
public GeneralSoundRoomPercussion Claves
public GeneralSoundRoomPercussion HiWoodBlock
public GeneralSoundRoomPercussion LowWoodBlock
public GeneralSoundRoomPercussion MuteCuica
public GeneralSoundRoomPercussion OpenCuica
public GeneralSoundRoomPercussion MuteTriangle
public GeneralSoundRoomPercussion OpenTriangle
public GeneralSoundRoomPercussion Shaker
public GeneralSoundRoomPercussion JingleBell
public GeneralSoundRoomPercussion Belltree
public GeneralSoundRoomPercussion Castanets
public GeneralSoundRoomPercussion MuteSurdo
public GeneralSoundRoomPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralSoundSfxPercussion : Enum {
public byte value__
public GeneralSoundSfxPercussion HighQ
public GeneralSoundSfxPercussion Slap
public GeneralSoundSfxPercussion ScratchPush
public GeneralSoundSfxPercussion ScratchPull
public GeneralSoundSfxPercussion Sticks
public GeneralSoundSfxPercussion SquareClick
public GeneralSoundSfxPercussion MetronomeClick
public GeneralSoundSfxPercussion MetronomeBell
public GeneralSoundSfxPercussion GuitarFretNoise
public GeneralSoundSfxPercussion GuitarCuttingNoiseUp
public GeneralSoundSfxPercussion GuitarCuttingNoiseDown
public GeneralSoundSfxPercussion StringSlapOfDoubleBass
public GeneralSoundSfxPercussion FlKeyClick
public GeneralSoundSfxPercussion Laughing
public GeneralSoundSfxPercussion Scream
public GeneralSoundSfxPercussion Punch
public GeneralSoundSfxPercussion HeartBeat
public GeneralSoundSfxPercussion Footsteps1
public GeneralSoundSfxPercussion Footsteps2
public GeneralSoundSfxPercussion Applause
public GeneralSoundSfxPercussion DoorCreaking
public GeneralSoundSfxPercussion Door
public GeneralSoundSfxPercussion Scratch
public GeneralSoundSfxPercussion WindChimes
public GeneralSoundSfxPercussion CarEngine
public GeneralSoundSfxPercussion CarStop
public GeneralSoundSfxPercussion CarPass
public GeneralSoundSfxPercussion CarCrash
public GeneralSoundSfxPercussion Siren
public GeneralSoundSfxPercussion Train
public GeneralSoundSfxPercussion Jetplane
public GeneralSoundSfxPercussion Helicopter
public GeneralSoundSfxPercussion Starship
public GeneralSoundSfxPercussion GunShot
public GeneralSoundSfxPercussion MachineGun
public GeneralSoundSfxPercussion Lasergun
public GeneralSoundSfxPercussion Explosion
public GeneralSoundSfxPercussion Dog
public GeneralSoundSfxPercussion HorseGallop
public GeneralSoundSfxPercussion Birds
public GeneralSoundSfxPercussion Rain
public GeneralSoundSfxPercussion Thunder
public GeneralSoundSfxPercussion Wind
public GeneralSoundSfxPercussion Seashore
public GeneralSoundSfxPercussion Stream
public GeneralSoundSfxPercussion Bubble
}
public Melanchall.DryWetMidi.Standards.GeneralSoundStandardPercussion : Enum {
public byte value__
public GeneralSoundStandardPercussion HighQ
public GeneralSoundStandardPercussion Slap
public GeneralSoundStandardPercussion ScratchPush
public GeneralSoundStandardPercussion ScratchPull
public GeneralSoundStandardPercussion Sticks
public GeneralSoundStandardPercussion SquareClick
public GeneralSoundStandardPercussion MetronomeClick
public GeneralSoundStandardPercussion MetronomeBell
public GeneralSoundStandardPercussion AcousticBassDrum
public GeneralSoundStandardPercussion BassDrum1
public GeneralSoundStandardPercussion SideStick
public GeneralSoundStandardPercussion AcousticSnare
public GeneralSoundStandardPercussion HandClap
public GeneralSoundStandardPercussion ElectricSnare
public GeneralSoundStandardPercussion LowFloorTom
public GeneralSoundStandardPercussion ClosedHiHat
public GeneralSoundStandardPercussion HighFloorTom
public GeneralSoundStandardPercussion PedalHiHat
public GeneralSoundStandardPercussion LowTom
public GeneralSoundStandardPercussion OpenHiHat
public GeneralSoundStandardPercussion LowMidTom
public GeneralSoundStandardPercussion HiMidTom
public GeneralSoundStandardPercussion CrashCymbal1
public GeneralSoundStandardPercussion HighTom
public GeneralSoundStandardPercussion RideCymbal1
public GeneralSoundStandardPercussion ChineseCymbal
public GeneralSoundStandardPercussion RideBell
public GeneralSoundStandardPercussion Tambourine
public GeneralSoundStandardPercussion SplashCymbal
public GeneralSoundStandardPercussion Cowbell
public GeneralSoundStandardPercussion CrashCymbal2
public GeneralSoundStandardPercussion Vibraslap
public GeneralSoundStandardPercussion RideCymbal2
public GeneralSoundStandardPercussion HiBongo
public GeneralSoundStandardPercussion LowBongo
public GeneralSoundStandardPercussion MuteHiConga
public GeneralSoundStandardPercussion OpenHiConga
public GeneralSoundStandardPercussion LowConga
public GeneralSoundStandardPercussion HighTimbale
public GeneralSoundStandardPercussion LowTimbale
public GeneralSoundStandardPercussion HighAgogo
public GeneralSoundStandardPercussion LowAgogo
public GeneralSoundStandardPercussion Cabasa
public GeneralSoundStandardPercussion Maracas
public GeneralSoundStandardPercussion ShortWhistle
public GeneralSoundStandardPercussion LongWhistle
public GeneralSoundStandardPercussion ShortGuiro
public GeneralSoundStandardPercussion LongGuiro
public GeneralSoundStandardPercussion Claves
public GeneralSoundStandardPercussion HiWoodBlock
public GeneralSoundStandardPercussion LowWoodBlock
public GeneralSoundStandardPercussion MuteCuica
public GeneralSoundStandardPercussion OpenCuica
public GeneralSoundStandardPercussion MuteTriangle
public GeneralSoundStandardPercussion OpenTriangle
public GeneralSoundStandardPercussion Shaker
public GeneralSoundStandardPercussion JingleBell
public GeneralSoundStandardPercussion Belltree
public GeneralSoundStandardPercussion Castanets
public GeneralSoundStandardPercussion MuteSurdo
public GeneralSoundStandardPercussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralSoundTr808Percussion : Enum {
public byte value__
public GeneralSoundTr808Percussion HighQ
public GeneralSoundTr808Percussion Slap
public GeneralSoundTr808Percussion ScratchPush
public GeneralSoundTr808Percussion ScratchPull
public GeneralSoundTr808Percussion Sticks
public GeneralSoundTr808Percussion SquareClick
public GeneralSoundTr808Percussion MetronomeClick
public GeneralSoundTr808Percussion MetronomeBell
public GeneralSoundTr808Percussion AcousticBassDrum
public GeneralSoundTr808Percussion Tr808BassDrum
public GeneralSoundTr808Percussion Tr808RimShot
public GeneralSoundTr808Percussion Tr808SnareDrum
public GeneralSoundTr808Percussion HandClap
public GeneralSoundTr808Percussion SnaeDrum2
public GeneralSoundTr808Percussion Tr808LowTom2
public GeneralSoundTr808Percussion Tr808ClosedHiHat
public GeneralSoundTr808Percussion Tr808LowTom1
public GeneralSoundTr808Percussion Tr808PedalHiHat
public GeneralSoundTr808Percussion Tr808MidTom2
public GeneralSoundTr808Percussion Tr808OpenHiHat
public GeneralSoundTr808Percussion Tr808MidTom1
public GeneralSoundTr808Percussion Tr808HiTom2
public GeneralSoundTr808Percussion Tr808Cymbal
public GeneralSoundTr808Percussion Tr808HiTom1
public GeneralSoundTr808Percussion RideCymbal1
public GeneralSoundTr808Percussion ReverseCymbal
public GeneralSoundTr808Percussion RideBell
public GeneralSoundTr808Percussion Tambourine
public GeneralSoundTr808Percussion SplashCymbal
public GeneralSoundTr808Percussion Tr808Cowbell
public GeneralSoundTr808Percussion CrashCymbal2
public GeneralSoundTr808Percussion Vibraslap
public GeneralSoundTr808Percussion RideCymbal2
public GeneralSoundTr808Percussion HiBongo
public GeneralSoundTr808Percussion LowBongo
public GeneralSoundTr808Percussion Tr808HiConga
public GeneralSoundTr808Percussion Tr808MidConga
public GeneralSoundTr808Percussion Tr808LowConga
public GeneralSoundTr808Percussion HighTimbale
public GeneralSoundTr808Percussion LowTimbale
public GeneralSoundTr808Percussion HighAgogo
public GeneralSoundTr808Percussion LowAgogo
public GeneralSoundTr808Percussion Cabasa
public GeneralSoundTr808Percussion Tr808Maracas
public GeneralSoundTr808Percussion ShortWhistle
public GeneralSoundTr808Percussion LongWhistle
public GeneralSoundTr808Percussion ShortGuiro
public GeneralSoundTr808Percussion LongGuiro
public GeneralSoundTr808Percussion Tr808Claves
public GeneralSoundTr808Percussion HiWoodBlock
public GeneralSoundTr808Percussion LowWoodBlock
public GeneralSoundTr808Percussion MuteCuica
public GeneralSoundTr808Percussion OpenCuica
public GeneralSoundTr808Percussion MuteTriangle
public GeneralSoundTr808Percussion OpenTriangle
public GeneralSoundTr808Percussion Shaker
public GeneralSoundTr808Percussion JingleBell
public GeneralSoundTr808Percussion Belltree
public GeneralSoundTr808Percussion Castanets
public GeneralSoundTr808Percussion MuteSurdo
public GeneralSoundTr808Percussion OpenSurdo
}
public Melanchall.DryWetMidi.Standards.GeneralSoundUtilities : object {
private byte RhythmChannelBankMsb
public IEnumerable`1<MidiEvent> GetPercussionSetEvents(GeneralSoundPercussionSet percussionSet, FourBitNumber channel)
public MidiEvent GetProgramEvent(GeneralSoundPercussionSet percussionSet, FourBitNumber channel)
public SevenBitNumber AsSevenBitNumber(GeneralSoundPercussionSet percussionSet)
public SevenBitNumber AsSevenBitNumber(GeneralSoundCm6432LPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralSoundTr808Percussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralSoundBrushPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralSoundElectronicPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralSoundJazzPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralSoundOrchestraPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralSoundPowerPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralSoundRoomPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralSoundSfxPercussion percussion)
public SevenBitNumber AsSevenBitNumber(GeneralSoundStandardPercussion percussion)
public NoteOnEvent GetNoteOnEvent(GeneralSoundTr808Percussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralSoundCm6432LPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralSoundBrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralSoundElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralSoundJazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralSoundOrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralSoundPowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralSoundRoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralSoundSfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOnEvent GetNoteOnEvent(GeneralSoundStandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralSoundTr808Percussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralSoundCm6432LPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralSoundBrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralSoundElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralSoundJazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralSoundOrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralSoundPowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralSoundRoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralSoundSfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
public NoteOffEvent GetNoteOffEvent(GeneralSoundStandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel)
}
internal Melanchall.DryWetMidi.Tools.AverageVelocityMerger : VelocityMerger {
private List`1<SevenBitNumber> _velocities
public SevenBitNumber Velocity
public SevenBitNumber get_Velocity()
public void Initialize(SevenBitNumber velocity)
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities : object {
public void QuantizeChords(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, ChordsQuantizingSettings settings)
public void QuantizeChords(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, ChordsQuantizingSettings settings)
public void QuantizeChords(MidiFile midiFile, IGrid grid, ChordsQuantizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.ChordsQuantizingSettings : LengthedObjectsQuantizingSettings`1<Chord> {
private ChordDetectionSettings <ChordDetectionSettings>k__BackingField
public ChordDetectionSettings ChordDetectionSettings
public ChordDetectionSettings get_ChordDetectionSettings()
public void set_ChordDetectionSettings(ChordDetectionSettings value)
}
public Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities : object {
public void RandomizeChords(TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, ChordsRandomizingSettings settings)
public void RandomizeChords(IEnumerable`1<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, ChordsRandomizingSettings settings)
public void RandomizeChords(MidiFile midiFile, IBounds bounds, ChordsRandomizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.ChordsRandomizingSettings : LengthedObjectsRandomizingSettings`1<Chord> {
private ChordDetectionSettings <ChordDetectionSettings>k__BackingField
public ChordDetectionSettings ChordDetectionSettings
public ChordDetectionSettings get_ChordDetectionSettings()
public void set_ChordDetectionSettings(ChordDetectionSettings value)
}
public Melanchall.DryWetMidi.Tools.ChordsSplitter : LengthedObjectsSplitter`1<Chord> {
protected Chord CloneObject(Chord obj)
protected SplitLengthedObject`1<Chord> SplitObject(Chord obj, long time)
}
public Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities : object {
public void SplitChordsByStep(TrackChunk trackChunk, ITimeSpan step, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsByStep(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan step, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsByStep(MidiFile midiFile, ITimeSpan step, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsByPartsNumber(TrackChunk trackChunk, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsByPartsNumber(IEnumerable`1<TrackChunk> trackChunks, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsByPartsNumber(MidiFile midiFile, int partsNumber, TimeSpanType lengthType, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsByGrid(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsByGrid(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsByGrid(MidiFile midiFile, IGrid grid, ChordDetectionSettings settings)
public void SplitChordsAtDistance(TrackChunk trackChunk, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsAtDistance(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsAtDistance(MidiFile midiFile, ITimeSpan distance, LengthedObjectTarget from, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsAtDistance(TrackChunk trackChunk, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsAtDistance(IEnumerable`1<TrackChunk> trackChunks, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings)
public void SplitChordsAtDistance(MidiFile midiFile, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, ChordDetectionSettings chordDetectionSettings)
private void SplitTrackChunkChords(TrackChunk trackChunk, ChordDetectionSettings chordDetectionSettings, Func`3<ChordsSplitter, IEnumerable`1<Chord>, IEnumerable`1<Chord>> splitOperation)
}
public Melanchall.DryWetMidi.Tools.ConstantBounds : object {
private ITimeSpan <LeftSize>k__BackingField
private ITimeSpan <RightSize>k__BackingField
public ITimeSpan LeftSize
public ITimeSpan RightSize
public void .ctor(ITimeSpan size)
public void .ctor(ITimeSpan leftSize, ITimeSpan rightSize)
public ITimeSpan get_LeftSize()
public ITimeSpan get_RightSize()
private long CalculateBoundaryTime(long time, ITimeSpan size, MathOperation operation, TempoMap tempoMap)
public Tuple`2<long, long> GetBounds(long time, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Tools.CsvConverter : object {
public void ConvertMidiFileToCsv(MidiFile midiFile, string filePath, bool overwriteFile, MidiFileCsvConversionSettings settings)
public void ConvertMidiFileToCsv(MidiFile midiFile, Stream stream, MidiFileCsvConversionSettings settings)
public MidiFile ConvertCsvToMidiFile(string filePath, MidiFileCsvConversionSettings settings)
public MidiFile ConvertCsvToMidiFile(Stream stream, MidiFileCsvConversionSettings settings)
public void ConvertNotesToCsv(IEnumerable`1<Note> notes, string filePath, TempoMap tempoMap, bool overwriteFile, NoteCsvConversionSettings settings)
public void ConvertNotesToCsv(IEnumerable`1<Note> notes, Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings)
public IEnumerable`1<Note> ConvertCsvToNotes(string filePath, TempoMap tempoMap, NoteCsvConversionSettings settings)
public IEnumerable`1<Note> ConvertCsvToNotes(Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings)
}
internal Melanchall.DryWetMidi.Tools.CsvError : object {
public void ThrowBadFormat(int lineNumber, string message, Exception innerException)
public void ThrowBadFormat(string message, Exception innerException)
}
internal Melanchall.DryWetMidi.Tools.CsvReader : object {
private char Quote
private StreamReader _streamReader
private char _delimiter
private Char[] _buffer
private int _bufferLength
private int _indexInBuffer
private bool _disposed
private int _currentLineNumber
public void .ctor(Stream stream, CsvSettings settings)
public CsvRecord ReadRecord()
private string GetFirstLine()
private string GetNextLine()
private void FillBuffer()
private IEnumerable`1<string> SplitValues(string input, char delimiter)
private bool IsValueClosed(string value)
public void Dispose()
private void Dispose(bool disposing)
}
internal Melanchall.DryWetMidi.Tools.CsvRecord : object {
private int <LineNumber>k__BackingField
private int <LinesCount>k__BackingField
private String[] <Values>k__BackingField
public int LineNumber
public int LinesCount
public String[] Values
public void .ctor(int lineNumber, int linesCount, String[] values)
public int get_LineNumber()
public int get_LinesCount()
public String[] get_Values()
}
public Melanchall.DryWetMidi.Tools.CsvSettings : object {
private int _bufferSize
private char <CsvDelimiter>k__BackingField
public char CsvDelimiter
public int IoBufferSize
public char get_CsvDelimiter()
public void set_CsvDelimiter(char value)
public int get_IoBufferSize()
public void set_IoBufferSize(int value)
}
internal Melanchall.DryWetMidi.Tools.CsvToMidiFileConverter : object {
private Dictionary`2<string, RecordType> RecordTypes_DryWetMidi
private Dictionary`2<string, RecordType> RecordTypes_MidiCsv
public MidiFile ConvertToMidiFile(Stream stream, MidiFileCsvConversionSettings settings)
private void AddTimedEvents(Dictionary`2<int, List`1<TimedMidiEvent>> eventsMap, int trackChunkNumber, TimedMidiEvent[] events)
private TempoMap GetTempoMap(IEnumerable`1<TimedMidiEvent> timedMidiEvents, TimeDivision timeDivision)
private Nullable`1<RecordType> GetRecordType(string recordType, MidiFileCsvConversionSettings settings)
private HeaderChunk ParseHeader(Record record, MidiFileCsvConversionSettings settings)
private MidiEvent ParseEvent(Record record, MidiFileCsvConversionSettings settings)
private TimedMidiEvent[] ParseNote(Record record, MidiFileCsvConversionSettings settings)
private Record ReadRecord(CsvReader csvReader, MidiFileCsvConversionSettings settings)
}
internal Melanchall.DryWetMidi.Tools.CsvToNotesConverter : object {
public IEnumerable`1<Note> ConvertToNotes(Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings)
public bool TryParseNoteNumber(string input, NoteNumberFormat noteNumberFormat, SevenBitNumber& result)
}
internal Melanchall.DryWetMidi.Tools.CsvUtilities : object {
private char Quote
private string QuoteString
private string DoubleQuote
public string EscapeString(string input)
public string UnescapeString(string input)
}
internal Melanchall.DryWetMidi.Tools.CsvWriter : object {
private StreamWriter _streamWriter
private char _delimiter
private bool _disposed
public void .ctor(Stream stream, CsvSettings settings)
public void WriteRecord(IEnumerable`1<object> values)
private void Dispose(bool disposing)
public void Dispose()
}
internal Melanchall.DryWetMidi.Tools.DryWetMidiRecordTypes : object {
public string Note
}
internal Melanchall.DryWetMidi.Tools.EventNameGetter : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public string Invoke(MidiEvent midiEvent)
public IAsyncResult BeginInvoke(MidiEvent midiEvent, AsyncCallback callback, object object)
public string EndInvoke(IAsyncResult result)
}
internal Melanchall.DryWetMidi.Tools.EventNameGetterProvider : object {
private Dictionary`2<Type, EventNameGetter> EventsTypes_MidiCsv
private Dictionary`2<Type, EventNameGetter> EventsTypes_DryWetMidi
public EventNameGetter Get(Type eventType, MidiFileCsvLayout layout)
private EventNameGetter GetType(string type)
private EventNameGetter GetSysExType(string completedType, string incompletedType)
}
internal Melanchall.DryWetMidi.Tools.EventParametersGetter : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Object[] Invoke(MidiEvent midiEvent, MidiFileCsvConversionSettings settings)
public IAsyncResult BeginInvoke(MidiEvent midiEvent, MidiFileCsvConversionSettings settings, AsyncCallback callback, object object)
public Object[] EndInvoke(IAsyncResult result)
}
internal Melanchall.DryWetMidi.Tools.EventParametersGetterProvider : object {
private Dictionary`2<Type, EventParametersGetter> EventsParametersGetters
public EventParametersGetter Get(Type eventType)
private EventParametersGetter GetParameters(Func`3[] parametersGetters)
private object FormatNoteNumber(SevenBitNumber noteNumber, MidiFileCsvConversionSettings settings)
}
internal Melanchall.DryWetMidi.Tools.EventParser : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public MidiEvent Invoke(String[] parameters, MidiFileCsvConversionSettings settings)
public IAsyncResult BeginInvoke(String[] parameters, MidiFileCsvConversionSettings settings, AsyncCallback callback, object object)
public MidiEvent EndInvoke(IAsyncResult result)
}
internal Melanchall.DryWetMidi.Tools.EventParserProvider : object {
private Dictionary`2<string, EventParser> EventsParsers_MidiCsv
private Dictionary`2<string, EventParser> EventsParsers_DryWetMidi
public EventParser Get(string eventName, MidiFileCsvLayout layout)
private EventParser GetBytesBasedEventParser(Func`2<Object[], MidiEvent> eventCreator, ParameterParser[] parametersParsers)
private EventParser GetTextEventParser()
private EventParser GetNoteEventParser(int parametersNumber)
private EventParser GetChannelEventParser(int parametersNumber)
private EventParser GetChannelEventParser(ParameterParser[] parametersParsers)
private EventParser GetEventParser(Func`2<Object[], MidiEvent> eventCreator, ParameterParser[] parametersParsers)
}
internal Melanchall.DryWetMidi.Tools.EventsNamesProvider : object {
private Dictionary`2<MidiFileCsvLayout, String[]> EventsNames
public String[] Get(MidiFileCsvLayout layout)
private String[] GetEventsNames(Type eventNamesClassType)
}
internal Melanchall.DryWetMidi.Tools.FirstVelocityMerger : VelocityMerger {
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.IBounds {
public Tuple`2<long, long> GetBounds(long time, TempoMap tempoMap)
}
internal Melanchall.DryWetMidi.Tools.LastVelocityMerger : VelocityMerger {
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizer`2 : Quantizer`2<TObject, TSettings> {
public void Quantize(IEnumerable`1<TObject> objects, IGrid grid, TempoMap tempoMap, TSettings settings)
private TimeProcessingInstruction CorrectObjectOnStartQuantizing(TObject obj, long time, TempoMap tempoMap, TSettings settings)
private TimeProcessingInstruction CorrectObjectOnEndQuantizing(TObject obj, long time, TempoMap tempoMap, TSettings settings)
private TimeProcessingInstruction ProcessQuantizingBeyondFixedEnd(Int64& newTime, Int64& oldTime, QuantizingBeyondFixedEndPolicy quantizingBeyondFixedEndPolicy, string errorMessage)
protected long GetObjectTime(TObject obj, TSettings settings)
protected void SetObjectTime(TObject obj, long time, TSettings settings)
protected TimeProcessingInstruction OnObjectQuantizing(TObject obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TSettings settings)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings`1 : QuantizingSettings`1<TObject> {
private TimeSpanType _lengthType
private LengthedObjectTarget _quantizingTarget
private QuantizingBeyondZeroPolicy _quantizingBeyondZeroPolicy
private QuantizingBeyondFixedEndPolicy _quantizingBeyondFixedEndPolicy
private bool <FixOppositeEnd>k__BackingField
public TimeSpanType LengthType
public LengthedObjectTarget QuantizingTarget
public QuantizingBeyondZeroPolicy QuantizingBeyondZeroPolicy
public QuantizingBeyondFixedEndPolicy QuantizingBeyondFixedEndPolicy
public bool FixOppositeEnd
public TimeSpanType get_LengthType()
public void set_LengthType(TimeSpanType value)
public LengthedObjectTarget get_QuantizingTarget()
public void set_QuantizingTarget(LengthedObjectTarget value)
public QuantizingBeyondZeroPolicy get_QuantizingBeyondZeroPolicy()
public void set_QuantizingBeyondZeroPolicy(QuantizingBeyondZeroPolicy value)
public QuantizingBeyondFixedEndPolicy get_QuantizingBeyondFixedEndPolicy()
public void set_QuantizingBeyondFixedEndPolicy(QuantizingBeyondFixedEndPolicy value)
public bool get_FixOppositeEnd()
public void set_FixOppositeEnd(bool value)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer`2 : Randomizer`2<TObject, TSettings> {
public void Randomize(IEnumerable`1<TObject> objects, IBounds bounds, TempoMap tempoMap, TSettings settings)
protected long GetObjectTime(TObject obj, TSettings settings)
protected void SetObjectTime(TObject obj, long time, TSettings settings)
protected TimeProcessingInstruction OnObjectRandomizing(TObject obj, long time, TSettings settings)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizingSettings`1 : RandomizingSettings`1<TObject> {
private LengthedObjectTarget _randomizingTarget
private bool <FixOppositeEnd>k__BackingField
public LengthedObjectTarget RandomizingTarget
public bool FixOppositeEnd
public LengthedObjectTarget get_RandomizingTarget()
public void set_RandomizingTarget(LengthedObjectTarget value)
public bool get_FixOppositeEnd()
public void set_FixOppositeEnd(bool value)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1 : object {
internal double ZeroRatio
internal double FullLengthRatio
public IEnumerable`1<TObject> SplitByStep(IEnumerable`1<TObject> objects, ITimeSpan step, TempoMap tempoMap)
public IEnumerable`1<TObject> SplitByPartsNumber(IEnumerable`1<TObject> objects, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap)
public IEnumerable`1<TObject> SplitByGrid(IEnumerable`1<TObject> objects, IGrid grid, TempoMap tempoMap)
public IEnumerable`1<TObject> SplitAtDistance(IEnumerable`1<TObject> objects, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap)
public IEnumerable`1<TObject> SplitAtDistance(IEnumerable`1<TObject> objects, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap)
protected TObject CloneObject(TObject obj)
protected SplitLengthedObject`1<TObject> SplitObject(TObject obj, long time)
private SplitLengthedObject`1<TObject> SplitObjectAtDistance(TObject obj, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Tools.LengthedObjectTarget : Enum {
public int value__
public LengthedObjectTarget Start
public LengthedObjectTarget End
}
internal Melanchall.DryWetMidi.Tools.MaxVelocityMerger : VelocityMerger {
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings : object {
private MidiFileCsvLayout _csvLayout
private TimeSpanType _timeType
private TimeSpanType _noteLengthType
private NoteFormat _noteFormat
private NoteNumberFormat _noteNumberFormat
private CsvSettings <CsvSettings>k__BackingField
public MidiFileCsvLayout CsvLayout
public TimeSpanType TimeType
public TimeSpanType NoteLengthType
public NoteFormat NoteFormat
public NoteNumberFormat NoteNumberFormat
public CsvSettings CsvSettings
public MidiFileCsvLayout get_CsvLayout()
public void set_CsvLayout(MidiFileCsvLayout value)
public TimeSpanType get_TimeType()
public void set_TimeType(TimeSpanType value)
public TimeSpanType get_NoteLengthType()
public void set_NoteLengthType(TimeSpanType value)
public NoteFormat get_NoteFormat()
public void set_NoteFormat(NoteFormat value)
public NoteNumberFormat get_NoteNumberFormat()
public void set_NoteNumberFormat(NoteNumberFormat value)
public CsvSettings get_CsvSettings()
}
public Melanchall.DryWetMidi.Tools.MidiFileCsvLayout : Enum {
public int value__
public MidiFileCsvLayout DryWetMidi
public MidiFileCsvLayout MidiCsv
}
internal Melanchall.DryWetMidi.Tools.MidiFileSlicer : object {
private Dictionary`2<MidiEventType, Func`3<MidiEvent, MidiEvent, bool>> DefaultUpdatePredicates
private TimedEventsHolder[] _timedEventsHolders
private TimeDivision _timeDivision
private long _lastTime
private bool _disposed
public bool AllEventsProcessed
private void .ctor(TimeDivision timeDivision, IEnumerator`1[] timedEventsEnumerators)
public bool get_AllEventsProcessed()
public MidiFile GetNextSlice(long endTime, SliceMidiFileSettings settings)
public MidiFileSlicer CreateFromFile(MidiFile midiFile)
private IEnumerable`1<IEnumerable`1<TimedEvent>> GetNextTimedEvents(long endTime, bool preserveTimes, Func`1<MidiEvent> partStartMarkerEventFactory, Func`1<MidiEvent> partEndMarkerEventFactory, Func`1<MidiEvent> emptyPartMarkerEventFactory)
private bool TryToMoveEdgeNoteOffsToPreviousPart(TimedEvent timedEvent, List`1<TimedEvent> takenTimedEvents)
private void MoveEventsToStart(List`1<TimedEvent> takenTimedEvents, int startIndex, long partStartTime)
private List`1<TimedEvent> PrepareTakenTimedEvents(List`1<TimedEvent> eventsToCopyToNextPart, bool preserveTimes, List`1<TimedEvent> eventsToStartNextPart, Int32& newEventsStartIndex)
private void UpdateEventsToCopyToNextPart(List`1<TimedEvent> eventsToCopyToNextPart, TimedEvent timedEvent)
public void Dispose()
private void Dispose(bool disposing)
}
public Melanchall.DryWetMidi.Tools.MidiFileSplitter : object {
public IEnumerable`1<MidiFile> SplitByChunks(MidiFile midiFile, SplitFileByChunksSettings settings)
public IEnumerable`1<MidiFile> SplitByChannel(MidiFile midiFile, SplitFileByChannelSettings settings)
public IEnumerable`1<MidiFile> SplitByNotes(MidiFile midiFile, SplitFileByNotesSettings settings)
public IEnumerable`1<MidiFile> SplitByGrid(MidiFile midiFile, IGrid grid, SliceMidiFileSettings settings)
public MidiFile SkipPart(MidiFile midiFile, ITimeSpan partLength, SliceMidiFileSettings settings)
public MidiFile TakePart(MidiFile midiFile, ITimeSpan partLength, SliceMidiFileSettings settings)
public MidiFile TakePart(MidiFile midiFile, ITimeSpan partStart, ITimeSpan partLength, SliceMidiFileSettings settings)
public MidiFile CutPart(MidiFile midiFile, ITimeSpan partStart, ITimeSpan partLength, SliceMidiFileSettings settings)
private IEnumerable`1<MidiFile> SplitByNotes(MidiFile midiFile, Func`2<NoteEvent, TNoteId> getNoteId, Predicate`1<TimedEvent> filter, bool copyNonNoteEventsToEachFile)
private MidiFile PrepareMidiFileForSlicing(MidiFile midiFile, IGrid grid, SliceMidiFileSettings settings)
}
internal Melanchall.DryWetMidi.Tools.MidiFileToCsvConverter : object {
public void ConvertToCsv(MidiFile midiFile, Stream stream, MidiFileCsvConversionSettings settings)
private void WriteNote(Note note, CsvWriter csvWriter, int trackNumber, long time, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteTimedEvent(TimedEvent timedEvent, CsvWriter csvWriter, int trackNumber, long time, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteHeader(CsvWriter csvWriter, MidiFile midiFile, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteTrackChunkStart(CsvWriter csvWriter, int trackNumber, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteTrackChunkEnd(CsvWriter csvWriter, int trackNumber, long time, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteFileEnd(CsvWriter csvWriter, MidiFileCsvConversionSettings settings, TempoMap tempoMap)
private void WriteRecord(CsvWriter csvWriter, Nullable`1<int> trackNumber, Nullable`1<long> time, string type, MidiFileCsvConversionSettings settings, TempoMap tempoMap, Object[] parameters)
private Object[] ProcessParameter(object parameter)
}
internal Melanchall.DryWetMidi.Tools.MinVelocityMerger : VelocityMerger {
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings : object {
private TimeSpanType _timeType
private TimeSpanType _noteLengthType
private NoteNumberFormat _noteNumberFormat
private CsvSettings <CsvSettings>k__BackingField
public TimeSpanType TimeType
public TimeSpanType NoteLengthType
public NoteNumberFormat NoteNumberFormat
public CsvSettings CsvSettings
public TimeSpanType get_TimeType()
public void set_TimeType(TimeSpanType value)
public TimeSpanType get_NoteLengthType()
public void set_NoteLengthType(TimeSpanType value)
public NoteNumberFormat get_NoteNumberFormat()
public void set_NoteNumberFormat(NoteNumberFormat value)
public CsvSettings get_CsvSettings()
}
internal Melanchall.DryWetMidi.Tools.NoteCsvConversionUtilities : object {
public object FormatNoteNumber(SevenBitNumber noteNumber, NoteNumberFormat noteNumberFormat)
}
public Melanchall.DryWetMidi.Tools.NoteFormat : Enum {
public int value__
public NoteFormat Note
public NoteFormat Events
}
public Melanchall.DryWetMidi.Tools.NoteNumberFormat : Enum {
public int value__
public NoteNumberFormat NoteNumber
public NoteNumberFormat Letter
}
public Melanchall.DryWetMidi.Tools.NotesMerger : object {
private Dictionary`2<VelocityMergingPolicy, Func`1<VelocityMerger>> VelocityMergers
public IEnumerable`1<Note> Merge(IEnumerable`1<Note> notes, TempoMap tempoMap, NotesMergingSettings settings)
private NoteHolder CreateNoteHolder(Note note, NotesMergingSettings settings)
}
public Melanchall.DryWetMidi.Tools.NotesMergerUtilities : object {
public void MergeNotes(TrackChunk trackChunk, TempoMap tempoMap, NotesMergingSettings settings)
public void MergeNotes(IEnumerable`1<TrackChunk> trackChunks, TempoMap tempoMap, NotesMergingSettings settings)
public void MergeNotes(MidiFile midiFile, NotesMergingSettings settings)
}
public Melanchall.DryWetMidi.Tools.NotesMergingSettings : object {
private VelocityMergingPolicy _velocityMergingPolicy
private VelocityMergingPolicy _offVelocityMergingPolicy
private ITimeSpan _tolerance
private Predicate`1<Note> <Filter>k__BackingField
private NoteDetectionSettings <NoteDetectionSettings>k__BackingField
public VelocityMergingPolicy VelocityMergingPolicy
public VelocityMergingPolicy OffVelocityMergingPolicy
public ITimeSpan Tolerance
public Predicate`1<Note> Filter
public NoteDetectionSettings NoteDetectionSettings
public VelocityMergingPolicy get_VelocityMergingPolicy()
public void set_VelocityMergingPolicy(VelocityMergingPolicy value)
public VelocityMergingPolicy get_OffVelocityMergingPolicy()
public void set_OffVelocityMergingPolicy(VelocityMergingPolicy value)
public ITimeSpan get_Tolerance()
public void set_Tolerance(ITimeSpan value)
public Predicate`1<Note> get_Filter()
public void set_Filter(Predicate`1<Note> value)
public NoteDetectionSettings get_NoteDetectionSettings()
public void set_NoteDetectionSettings(NoteDetectionSettings value)
}
public Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities : object {
public void QuantizeNotes(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, NotesQuantizingSettings settings)
public void QuantizeNotes(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, NotesQuantizingSettings settings)
public void QuantizeNotes(MidiFile midiFile, IGrid grid, NotesQuantizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.NotesQuantizingSettings : LengthedObjectsQuantizingSettings`1<Note> {
private NoteDetectionSettings <NoteDetectionSettings>k__BackingField
public NoteDetectionSettings NoteDetectionSettings
public NoteDetectionSettings get_NoteDetectionSettings()
public void set_NoteDetectionSettings(NoteDetectionSettings value)
}
public Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities : object {
public void RandomizeNotes(TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, NotesRandomizingSettings settings)
public void RandomizeNotes(IEnumerable`1<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, NotesRandomizingSettings settings)
public void RandomizeNotes(MidiFile midiFile, IBounds bounds, NotesRandomizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.NotesRandomizingSettings : LengthedObjectsRandomizingSettings`1<Note> {
private NoteDetectionSettings <NoteDetectionSettings>k__BackingField
public NoteDetectionSettings NoteDetectionSettings
public NoteDetectionSettings get_NoteDetectionSettings()
public void set_NoteDetectionSettings(NoteDetectionSettings value)
}
public Melanchall.DryWetMidi.Tools.NotesSplitter : LengthedObjectsSplitter`1<Note> {
protected Note CloneObject(Note obj)
protected SplitLengthedObject`1<Note> SplitObject(Note obj, long time)
}
public Melanchall.DryWetMidi.Tools.NotesSplitterUtilities : object {
public void SplitNotesByStep(TrackChunk trackChunk, ITimeSpan step, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesByStep(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan step, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesByStep(MidiFile midiFile, ITimeSpan step, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesByPartsNumber(TrackChunk trackChunk, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesByPartsNumber(IEnumerable`1<TrackChunk> trackChunks, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesByPartsNumber(MidiFile midiFile, int partsNumber, TimeSpanType lengthType, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesByGrid(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesByGrid(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesByGrid(MidiFile midiFile, IGrid grid, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesAtDistance(TrackChunk trackChunk, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesAtDistance(IEnumerable`1<TrackChunk> trackChunks, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesAtDistance(MidiFile midiFile, ITimeSpan distance, LengthedObjectTarget from, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesAtDistance(TrackChunk trackChunk, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesAtDistance(IEnumerable`1<TrackChunk> trackChunks, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings)
public void SplitNotesAtDistance(MidiFile midiFile, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, NoteDetectionSettings noteDetectionSettings)
private void SplitTrackChunkNotes(TrackChunk trackChunk, NoteDetectionSettings noteDetectionSettings, Func`3<NotesSplitter, IEnumerable`1<Note>, IEnumerable`1<Note>> splitOperation)
}
internal Melanchall.DryWetMidi.Tools.NotesToCsvConverter : object {
public void ConvertToCsv(IEnumerable`1<Note> notes, Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings)
}
internal Melanchall.DryWetMidi.Tools.ParameterParser : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke(string parameter, MidiFileCsvConversionSettings settings)
public IAsyncResult BeginInvoke(string parameter, MidiFileCsvConversionSettings settings, AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
public Melanchall.DryWetMidi.Tools.QuantizedTime : object {
private long <NewTime>k__BackingField
private long <GridTime>k__BackingField
private ITimeSpan <Shift>k__BackingField
private long <DistanceToGridTime>k__BackingField
private ITimeSpan <ConvertedDistanceToGridTime>k__BackingField
public long NewTime
public long GridTime
public ITimeSpan Shift
public long DistanceToGridTime
public ITimeSpan ConvertedDistanceToGridTime
internal void .ctor(long newTime, long gridTime, ITimeSpan shift, long distanceToGridTime, ITimeSpan convertedDistanceToGridTime)
public long get_NewTime()
public long get_GridTime()
public ITimeSpan get_Shift()
public long get_DistanceToGridTime()
public ITimeSpan get_ConvertedDistanceToGridTime()
}
public Melanchall.DryWetMidi.Tools.Quantizer`2 : object {
protected void QuantizeInternal(IEnumerable`1<TObject> objects, IGrid grid, TempoMap tempoMap, TSettings settings)
protected long GetObjectTime(TObject obj, TSettings settings)
protected void SetObjectTime(TObject obj, long time, TSettings settings)
protected TimeProcessingInstruction OnObjectQuantizing(TObject obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TSettings settings)
private IEnumerable`1<long> GetGridTimes(IGrid grid, long lastTime, TempoMap tempoMap)
private QuantizedTime FindNearestTime(IReadOnlyList`1<long> grid, long time, TimeSpanType distanceCalculationType, double quantizingLevel, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy : Enum {
public int value__
public QuantizingBeyondFixedEndPolicy CollapseAndFix
public QuantizingBeyondFixedEndPolicy CollapseAndMove
public QuantizingBeyondFixedEndPolicy SwapEnds
public QuantizingBeyondFixedEndPolicy Skip
public QuantizingBeyondFixedEndPolicy Abort
}
public Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy : Enum {
public int value__
public QuantizingBeyondZeroPolicy FixAtZero
public QuantizingBeyondZeroPolicy Skip
public QuantizingBeyondZeroPolicy Abort
}
public Melanchall.DryWetMidi.Tools.QuantizingSettings`1 : object {
private double NoQuantizingLevel
private double FullQuantizingLevel
private TimeSpanType _distanceCalculationType
private double _quantizingLevel
private Predicate`1<TObject> <Filter>k__BackingField
public TimeSpanType DistanceCalculationType
public double QuantizingLevel
public Predicate`1<TObject> Filter
public TimeSpanType get_DistanceCalculationType()
public void set_DistanceCalculationType(TimeSpanType value)
public double get_QuantizingLevel()
public void set_QuantizingLevel(double value)
public Predicate`1<TObject> get_Filter()
public void set_Filter(Predicate`1<TObject> value)
}
public Melanchall.DryWetMidi.Tools.Randomizer`2 : object {
private Random _random
protected void RandomizeInternal(IEnumerable`1<TObject> objects, IBounds bounds, TempoMap tempoMap, TSettings settings)
protected long GetObjectTime(TObject obj, TSettings settings)
protected void SetObjectTime(TObject obj, long time, TSettings settings)
protected TimeProcessingInstruction OnObjectRandomizing(TObject obj, long time, TSettings settings)
private long RandomizeTime(long time, IBounds bounds, Random random, TempoMap tempoMap)
}
public Melanchall.DryWetMidi.Tools.RandomizingSettings`1 : object {
private Predicate`1<TObject> <Filter>k__BackingField
public Predicate`1<TObject> Filter
public Predicate`1<TObject> get_Filter()
public void set_Filter(Predicate`1<TObject> value)
}
internal Melanchall.DryWetMidi.Tools.Record : object {
private int <LineNumber>k__BackingField
private Nullable`1<int> <TrackNumber>k__BackingField
private ITimeSpan <Time>k__BackingField
private string <RecordType>k__BackingField
private String[] <Parameters>k__BackingField
public int LineNumber
public Nullable`1<int> TrackNumber
public ITimeSpan Time
public string RecordType
public String[] Parameters
public void .ctor(int lineNumber, Nullable`1<int> trackNumber, ITimeSpan time, string recordType, String[] parameters)
public int get_LineNumber()
public Nullable`1<int> get_TrackNumber()
public ITimeSpan get_Time()
public string get_RecordType()
public String[] get_Parameters()
}
internal Melanchall.DryWetMidi.Tools.RecordType : Enum {
public int value__
public RecordType Header
public RecordType TrackChunkStart
public RecordType TrackChunkEnd
public RecordType FileEnd
public RecordType Event
public RecordType Note
}
public Melanchall.DryWetMidi.Tools.SliceMidiFileMarkers : object {
private Func`1<MidiEvent> <PartStartMarkerEventFactory>k__BackingField
private Func`1<MidiEvent> <PartEndMarkerEventFactory>k__BackingField
private Func`1<MidiEvent> <EmptyPartMarkerEventFactory>k__BackingField
public Func`1<MidiEvent> PartStartMarkerEventFactory
public Func`1<MidiEvent> PartEndMarkerEventFactory
public Func`1<MidiEvent> EmptyPartMarkerEventFactory
public Func`1<MidiEvent> get_PartStartMarkerEventFactory()
public void set_PartStartMarkerEventFactory(Func`1<MidiEvent> value)
public Func`1<MidiEvent> get_PartEndMarkerEventFactory()
public void set_PartEndMarkerEventFactory(Func`1<MidiEvent> value)
public Func`1<MidiEvent> get_EmptyPartMarkerEventFactory()
public void set_EmptyPartMarkerEventFactory(Func`1<MidiEvent> value)
}
public Melanchall.DryWetMidi.Tools.SliceMidiFileSettings : object {
private bool <SplitNotes>k__BackingField
private bool <PreserveTimes>k__BackingField
private bool <PreserveTrackChunks>k__BackingField
private SliceMidiFileMarkers <Markers>k__BackingField
private NoteDetectionSettings <NoteDetectionSettings>k__BackingField
public bool SplitNotes
public bool PreserveTimes
public bool PreserveTrackChunks
public SliceMidiFileMarkers Markers
public NoteDetectionSettings NoteDetectionSettings
public bool get_SplitNotes()
public void set_SplitNotes(bool value)
public bool get_PreserveTimes()
public void set_PreserveTimes(bool value)
public bool get_PreserveTrackChunks()
public void set_PreserveTrackChunks(bool value)
public SliceMidiFileMarkers get_Markers()
public void set_Markers(SliceMidiFileMarkers value)
public NoteDetectionSettings get_NoteDetectionSettings()
public void set_NoteDetectionSettings(NoteDetectionSettings value)
}
public Melanchall.DryWetMidi.Tools.SplitFileByChannelSettings : object {
private bool <CopyNonChannelEventsToEachFile>k__BackingField
private Predicate`1<TimedEvent> <Filter>k__BackingField
public bool CopyNonChannelEventsToEachFile
public Predicate`1<TimedEvent> Filter
public bool get_CopyNonChannelEventsToEachFile()
public void set_CopyNonChannelEventsToEachFile(bool value)
public Predicate`1<TimedEvent> get_Filter()
public void set_Filter(Predicate`1<TimedEvent> value)
}
public Melanchall.DryWetMidi.Tools.SplitFileByChunksSettings : object {
private Predicate`1<MidiChunk> <Filter>k__BackingField
public Predicate`1<MidiChunk> Filter
public Predicate`1<MidiChunk> get_Filter()
public void set_Filter(Predicate`1<MidiChunk> value)
}
public Melanchall.DryWetMidi.Tools.SplitFileByNotesSettings : object {
private bool <CopyNonNoteEventsToEachFile>k__BackingField
private Predicate`1<TimedEvent> <Filter>k__BackingField
private bool <IgnoreChannel>k__BackingField
public bool CopyNonNoteEventsToEachFile
public Predicate`1<TimedEvent> Filter
public bool IgnoreChannel
public bool get_CopyNonNoteEventsToEachFile()
public void set_CopyNonNoteEventsToEachFile(bool value)
public Predicate`1<TimedEvent> get_Filter()
public void set_Filter(Predicate`1<TimedEvent> value)
public bool get_IgnoreChannel()
public void set_IgnoreChannel(bool value)
}
public Melanchall.DryWetMidi.Tools.TimedEventsQuantizer : Quantizer`2<TimedEvent, TimedEventsQuantizingSettings> {
public void Quantize(IEnumerable`1<TimedEvent> objects, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings)
protected long GetObjectTime(TimedEvent obj, TimedEventsQuantizingSettings settings)
protected void SetObjectTime(TimedEvent obj, long time, TimedEventsQuantizingSettings settings)
protected TimeProcessingInstruction OnObjectQuantizing(TimedEvent obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities : object {
public void QuantizeTimedEvents(TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings)
public void QuantizeTimedEvents(IEnumerable`1<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings)
public void QuantizeTimedEvents(MidiFile midiFile, IGrid grid, TimedEventsQuantizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.TimedEventsRandomizer : Randomizer`2<TimedEvent, TimedEventsRandomizingSettings> {
public void Randomize(IEnumerable`1<TimedEvent> objects, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings)
protected long GetObjectTime(TimedEvent obj, TimedEventsRandomizingSettings settings)
protected void SetObjectTime(TimedEvent obj, long time, TimedEventsRandomizingSettings settings)
protected TimeProcessingInstruction OnObjectRandomizing(TimedEvent obj, long time, TimedEventsRandomizingSettings settings)
}
public Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities : object {
public void RandomizeTimedEvents(TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings)
public void RandomizeTimedEvents(IEnumerable`1<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings)
public void RandomizeTimedEvents(MidiFile midiFile, IBounds bounds, TimedEventsRandomizingSettings settings)
}
internal Melanchall.DryWetMidi.Tools.TimedMidiEvent : object {
private ITimeSpan <Time>k__BackingField
private MidiEvent <Event>k__BackingField
public ITimeSpan Time
public MidiEvent Event
public void .ctor(ITimeSpan time, MidiEvent midiEvent)
public ITimeSpan get_Time()
public MidiEvent get_Event()
}
public Melanchall.DryWetMidi.Tools.TimeProcessingAction : Enum {
public int value__
public TimeProcessingAction Apply
public TimeProcessingAction Skip
}
public Melanchall.DryWetMidi.Tools.TimeProcessingInstruction : object {
public TimeProcessingInstruction Skip
private long InvalidTime
private TimeProcessingAction <Action>k__BackingField
private long <Time>k__BackingField
public TimeProcessingAction Action
public long Time
public void .ctor(long time)
private void .ctor(TimeProcessingAction quantizingInstruction, long time)
public TimeProcessingAction get_Action()
public long get_Time()
}
internal Melanchall.DryWetMidi.Tools.TypeParser : object {
public ParameterParser Byte
public ParameterParser SByte
public ParameterParser Long
public ParameterParser UShort
public ParameterParser String
public ParameterParser Int
public ParameterParser FourBitNumber
public ParameterParser SevenBitNumber
public ParameterParser NoteNumber
}
internal Melanchall.DryWetMidi.Tools.VelocityMerger : object {
protected SevenBitNumber _velocity
public SevenBitNumber Velocity
public SevenBitNumber get_Velocity()
public void Initialize(SevenBitNumber velocity)
public void Merge(SevenBitNumber velocity)
}
public Melanchall.DryWetMidi.Tools.VelocityMergingPolicy : Enum {
public int value__
public VelocityMergingPolicy First
public VelocityMergingPolicy Last
public VelocityMergingPolicy Min
public VelocityMergingPolicy Max
public VelocityMergingPolicy Average
}
