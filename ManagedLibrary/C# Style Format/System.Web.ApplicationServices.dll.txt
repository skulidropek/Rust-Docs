internal ApplicationServicesStrings : object {
internal string Can_not_use_encrypted_passwords_with_autogen_keys
internal string CustomLoader_ForbiddenByHost
internal string CustomLoader_MustImplementICustomLoader
internal string CustomLoader_NoAttributeFound
internal string CustomLoader_NotInFullTrust
internal string Membership_DuplicateEmail
internal string Membership_DuplicateProviderUserKey
internal string Membership_DuplicateUserName
internal string Membership_InvalidAnswer
internal string Membership_InvalidEmail
internal string Membership_InvalidPassword
internal string Membership_InvalidProviderUserKey
internal string Membership_InvalidQuestion
internal string Membership_InvalidUserName
internal string Membership_no_error
internal string Membership_provider_name_invalid
internal string Membership_UserRejected
internal string Parameter_can_not_be_empty
internal string Platform_not_supported
internal string Provider_Error
internal string Provider_must_implement_type
}
internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
public System.Web.Configuration.MembershipPasswordCompatibilityMode : Enum {
public int value__
public MembershipPasswordCompatibilityMode Framework20
public MembershipPasswordCompatibilityMode Framework40
}
public System.Web.Hosting.CustomLoaderAttribute : Attribute {
public Type CustomLoaderType
public void .ctor(Type customLoaderType)
public Type get_CustomLoaderType()
}
internal System.Web.Security.IMembershipAdapter {
public MembershipProviderCollection Providers
public int UserIsOnlineTimeWindow
public bool IsDecryptionKeyAutogenerated
public bool UsingCustomEncryption
public MembershipProviderCollection get_Providers()
public int get_UserIsOnlineTimeWindow()
public bool get_IsDecryptionKeyAutogenerated()
public bool get_UsingCustomEncryption()
public Byte[] EncryptOrDecryptData(bool encrypt, Byte[] buffer, bool useLegacyMode)
}
internal System.Web.Security.IMembershipHelper {
public int UserIsOnlineTimeWindow
public MembershipProviderCollection Providers
public int get_UserIsOnlineTimeWindow()
public MembershipProviderCollection get_Providers()
public Byte[] DecryptPassword(Byte[] encodedPassword)
public Byte[] EncryptPassword(Byte[] password)
}
public System.Web.Security.MembershipCreateStatus : Enum {
public int value__
public MembershipCreateStatus Success
public MembershipCreateStatus InvalidUserName
public MembershipCreateStatus InvalidPassword
public MembershipCreateStatus InvalidQuestion
public MembershipCreateStatus InvalidAnswer
public MembershipCreateStatus InvalidEmail
public MembershipCreateStatus DuplicateUserName
public MembershipCreateStatus DuplicateEmail
public MembershipCreateStatus UserRejected
public MembershipCreateStatus InvalidProviderUserKey
public MembershipCreateStatus DuplicateProviderUserKey
public MembershipCreateStatus ProviderError
}
public System.Web.Security.MembershipCreateUserException : Exception {
private MembershipCreateStatus _StatusCode
public MembershipCreateStatus StatusCode
public void .ctor(MembershipCreateStatus statusCode)
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception innerException)
public MembershipCreateStatus get_StatusCode()
public void GetObjectData(SerializationInfo info, StreamingContext context)
internal string GetMessageFromStatusCode(MembershipCreateStatus statusCode)
}
public System.Web.Security.MembershipPasswordException : Exception {
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception innerException)
}
public System.Web.Security.MembershipPasswordFormat : Enum {
public int value__
public MembershipPasswordFormat Clear
public MembershipPasswordFormat Hashed
public MembershipPasswordFormat Encrypted
}
public System.Web.Security.MembershipProvider : ProviderBase {
private string HELPER_TYPE_NAME
private IMembershipHelper helper
private object validatingPasswordEvent
private EventHandlerList events
internal IMembershipHelper Helper
public string ApplicationName
public bool EnablePasswordReset
public bool EnablePasswordRetrieval
public bool RequiresQuestionAndAnswer
public int MaxInvalidPasswordAttempts
public int MinRequiredNonAlphanumericCharacters
public int MinRequiredPasswordLength
public int PasswordAttemptWindow
public MembershipPasswordFormat PasswordFormat
public string PasswordStrengthRegularExpression
public bool RequiresUniqueEmail
internal IMembershipHelper get_Helper()
public void add_ValidatingPassword(MembershipValidatePasswordEventHandler value)
public void remove_ValidatingPassword(MembershipValidatePasswordEventHandler value)
public bool ChangePassword(string username, string oldPassword, string newPassword)
public bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer)
public MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status)
public bool DeleteUser(string username, bool deleteAllRelatedData)
public MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords)
public int GetNumberOfUsersOnline()
public string GetPassword(string username, string answer)
public MembershipUser GetUser(string username, bool userIsOnline)
public MembershipUser GetUser(object providerUserKey, bool userIsOnline)
public string GetUserNameByEmail(string email)
public string ResetPassword(string username, string answer)
public void UpdateUser(MembershipUser user)
public bool ValidateUser(string username, string password)
public bool UnlockUser(string userName)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public bool get_EnablePasswordReset()
public bool get_EnablePasswordRetrieval()
public bool get_RequiresQuestionAndAnswer()
public int get_MaxInvalidPasswordAttempts()
public int get_MinRequiredNonAlphanumericCharacters()
public int get_MinRequiredPasswordLength()
public int get_PasswordAttemptWindow()
public MembershipPasswordFormat get_PasswordFormat()
public string get_PasswordStrengthRegularExpression()
public bool get_RequiresUniqueEmail()
protected void OnValidatingPassword(ValidatePasswordEventArgs e)
protected Byte[] DecryptPassword(Byte[] encodedPassword)
protected Byte[] EncryptPassword(Byte[] password)
protected Byte[] EncryptPassword(Byte[] password, MembershipPasswordCompatibilityMode legacyPasswordCompatibilityMode)
}
public System.Web.Security.MembershipProviderCollection : ProviderCollection {
public MembershipProvider Item
public void Add(ProviderBase provider)
public MembershipProvider get_Item(string name)
public void CopyTo(MembershipProvider[] array, int index)
}
public System.Web.Security.MembershipUser : object {
private string providerName
private string name
private object providerUserKey
private string email
private string passwordQuestion
private string comment
private bool isApproved
private bool isLockedOut
private DateTime creationDate
private DateTime lastLoginDate
private DateTime lastActivityDate
private DateTime lastPasswordChangedDate
private DateTime lastLockoutDate
public string Comment
public DateTime CreationDate
public string Email
public bool IsApproved
public bool IsLockedOut
public bool IsOnline
public DateTime LastActivityDate
public DateTime LastLoginDate
public DateTime LastPasswordChangedDate
public DateTime LastLockoutDate
public string PasswordQuestion
public string ProviderName
public string UserName
public object ProviderUserKey
private MembershipProvider Provider
public void .ctor(string providerName, string name, object providerUserKey, string email, string passwordQuestion, string comment, bool isApproved, bool isLockedOut, DateTime creationDate, DateTime lastLoginDate, DateTime lastActivityDate, DateTime lastPasswordChangedDate, DateTime lastLockoutDate)
private void UpdateSelf(MembershipUser fromUser)
internal void UpdateUser()
public bool ChangePassword(string oldPassword, string newPassword)
public bool ChangePasswordQuestionAndAnswer(string password, string newPasswordQuestion, string newPasswordAnswer)
public string GetPassword()
public string GetPassword(string passwordAnswer)
public string ResetPassword()
public string ResetPassword(string passwordAnswer)
public string get_Comment()
public void set_Comment(string value)
public DateTime get_CreationDate()
public string get_Email()
public void set_Email(string value)
public bool get_IsApproved()
public void set_IsApproved(bool value)
public bool get_IsLockedOut()
public bool get_IsOnline()
public DateTime get_LastActivityDate()
public void set_LastActivityDate(DateTime value)
public DateTime get_LastLoginDate()
public void set_LastLoginDate(DateTime value)
public DateTime get_LastPasswordChangedDate()
public DateTime get_LastLockoutDate()
public string get_PasswordQuestion()
public string get_ProviderName()
public string get_UserName()
public object get_ProviderUserKey()
public string ToString()
public bool UnlockUser()
private MembershipProvider get_Provider()
}
public System.Web.Security.MembershipUserCollection : object {
private Hashtable _Indices
private ArrayList _Values
private bool _ReadOnly
public MembershipUser Item
public int Count
public bool IsSynchronized
public object SyncRoot
public void Add(MembershipUser user)
public void Remove(string name)
public MembershipUser get_Item(string name)
public IEnumerator GetEnumerator()
public void SetReadOnly()
public void Clear()
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
private void System.Collections.ICollection.CopyTo(Array array, int index)
public void CopyTo(MembershipUser[] array, int index)
}
public System.Web.Security.MembershipValidatePasswordEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ValidatePasswordEventArgs e)
public IAsyncResult BeginInvoke(object sender, ValidatePasswordEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Security.RoleProvider : ProviderBase {
public string ApplicationName
public void AddUsersToRoles(String[] usernames, String[] roleNames)
public void CreateRole(string roleName)
public bool DeleteRole(string roleName, bool throwOnPopulatedRole)
public String[] FindUsersInRole(string roleName, string usernameToMatch)
public String[] GetAllRoles()
public String[] GetRolesForUser(string username)
public String[] GetUsersInRole(string roleName)
public bool IsUserInRole(string username, string roleName)
public void RemoveUsersFromRoles(String[] usernames, String[] roleNames)
public bool RoleExists(string roleName)
public string get_ApplicationName()
public void set_ApplicationName(string value)
}
public System.Web.Security.ValidatePasswordEventArgs : EventArgs {
private string _userName
private string _password
private bool _isNewUser
private bool _cancel
private Exception _failureInformation
public string UserName
public string Password
public bool IsNewUser
public bool Cancel
public Exception FailureInformation
public void .ctor(string userName, string password, bool isNewUser)
public string get_UserName()
public string get_Password()
public bool get_IsNewUser()
public bool get_Cancel()
public void set_Cancel(bool value)
public Exception get_FailureInformation()
public void set_FailureInformation(Exception value)
}
internal System.Web.UI.KeyedList : object {
private Hashtable objectTable
private ArrayList objectList
public int Count
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public object Item
public object Item
public ICollection Keys
public ICollection Values
public object SyncRoot
public void Add(object key, object value)
public void Clear()
public bool Contains(object key)
public void CopyTo(Array array, int idx)
public void Insert(int idx, object key, object value)
public void Remove(object key)
public void RemoveAt(int idx)
private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
private IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_Item(int idx)
public void set_Item(int idx, object value)
public object get_Item(object key)
public void set_Item(object key, object value)
public ICollection get_Keys()
public ICollection get_Values()
public object get_SyncRoot()
private int IndexOf(object key)
}
internal System.Web.UI.KeyedListEnumerator : object {
private int index
private ArrayList objs
public object Current
public DictionaryEntry Entry
public object Key
public object Value
internal void .ctor(ArrayList list)
public bool MoveNext()
public void Reset()
public object get_Current()
public DictionaryEntry get_Entry()
public object get_Key()
public object get_Value()
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
