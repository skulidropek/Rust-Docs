public Network.BaseNetwork : object {
public ArrayPool`1<byte> ArrayPool
public bool Multithreading
protected object readLock
protected object writeLock
protected object decryptLock
private Stopwatch stopwatch
private ConcurrentQueue`1<NetRead> readQueue
private ConcurrentQueue`1<NetWrite> writeQueue
private ConcurrentQueue`1<NetRead> decryptQueue
private int readQueueSizeInBytes
private int writeQueueSizeInBytes
private int decryptQueueSizeInBytes
private AutoResetEvent mainThreadReset
private AutoResetEvent readThreadReset
private AutoResetEvent writeThreadReset
private AutoResetEvent decryptThreadReset
private Thread readThread
private Thread writeThread
private Thread decryptThread
public INetworkCryptography cryptography
protected int MaxReceiveTimeValue
protected int MaxReadQueueLengthValue
protected int MaxWriteQueueLengthValue
protected int MaxDecryptQueueLengthValue
protected int MaxReadQueueBytesValue
protected int MaxWriteQueueBytesValue
protected int MaxDecryptQueueBytesValue
protected int MaxMainThreadWaitValue
protected int MaxReadThreadWaitValue
protected int MaxWriteThreadWaitValue
protected int MaxDecryptThreadWaitValue
public int ReadQueueLength
public int WriteQueueLength
public int DecryptQueueLength
public int ReadQueueBytes
public int WriteQueueBytes
public int DecryptQueueBytes
protected int get_MaxReceiveTimeValue()
protected int get_MaxReadQueueLengthValue()
protected int get_MaxWriteQueueLengthValue()
protected int get_MaxDecryptQueueLengthValue()
protected int get_MaxReadQueueBytesValue()
protected int get_MaxWriteQueueBytesValue()
protected int get_MaxDecryptQueueBytesValue()
protected int get_MaxMainThreadWaitValue()
protected int get_MaxReadThreadWaitValue()
protected int get_MaxWriteThreadWaitValue()
protected int get_MaxDecryptThreadWaitValue()
public int get_ReadQueueLength()
public int get_WriteQueueLength()
public int get_DecryptQueueLength()
public int get_ReadQueueBytes()
public int get_WriteQueueBytes()
public int get_DecryptQueueBytes()
protected void MultithreadingInit()
public bool IsConnected()
protected bool Receive()
public void EnqueueWrite(NetWrite write)
public void EnqueueRead(NetRead read)
public void EnqueueDecrypt(NetRead read)
public void ProcessWrite(NetWrite write)
public void ProcessRead(NetRead read)
public void ProcessDecrypt(NetRead read)
private void ReadThread()
private void WriteThread()
private void DecryptThread()
private void ReadThreadCycle()
private void WriteThreadCycle()
private void DecryptThreadCycle()
public void Cycle()
public NetWrite StartWrite()
protected Message StartMessage(Type type, NetRead read)
public void Decrypt(Connection connection, NetRead read)
public ArraySegment`1<byte> Encrypt(Connection connection, NetWrite write)
public void Record(Connection connection, Stream stream)
public string GetDebug(Connection connection)
public ulong GetStat(Connection connection, StatTypeLong type)
}
public Network.Client : BaseNetwork {
public int MaxReceiveTime
public int MaxReadQueueLength
public int MaxWriteQueueLength
public int MaxDecryptQueueLength
public int MaxReadQueueBytes
public int MaxWriteQueueBytes
public int MaxDecryptQueueBytes
public int MaxMainThreadWait
public int MaxReadThreadWait
public int MaxWriteThreadWait
public int MaxDecryptThreadWait
private Connection <Connection>k__BackingField
private bool <IsPlaying>k__BackingField
public Manager visibility
public string disconnectReason
private string <ConnectedAddress>k__BackingField
private int <ConnectedPort>k__BackingField
private string <ServerName>k__BackingField
private bool <IsOfficialServer>k__BackingField
public Stats IncomingStats
public IClientCallback callbackHandler
protected int MaxReceiveTimeValue
protected int MaxReadQueueLengthValue
protected int MaxWriteQueueLengthValue
protected int MaxDecryptQueueLengthValue
protected int MaxReadQueueBytesValue
protected int MaxWriteQueueBytesValue
protected int MaxDecryptQueueBytesValue
protected int MaxMainThreadWaitValue
protected int MaxReadThreadWaitValue
protected int MaxWriteThreadWaitValue
protected int MaxDecryptThreadWaitValue
public Connection Connection
public bool IsPlaying
public string ConnectedAddress
public int ConnectedPort
public string ServerName
public bool IsOfficialServer
public bool IsRecording
public string RecordFilename
public TimeSpan RecordTimeElapsed
protected int get_MaxReceiveTimeValue()
protected int get_MaxReadQueueLengthValue()
protected int get_MaxWriteQueueLengthValue()
protected int get_MaxDecryptQueueLengthValue()
protected int get_MaxReadQueueBytesValue()
protected int get_MaxWriteQueueBytesValue()
protected int get_MaxDecryptQueueBytesValue()
protected int get_MaxMainThreadWaitValue()
protected int get_MaxReadThreadWaitValue()
protected int get_MaxWriteThreadWaitValue()
protected int get_MaxDecryptThreadWaitValue()
public Connection get_Connection()
protected void set_Connection(Connection value)
public bool get_IsPlaying()
public string get_ConnectedAddress()
public void set_ConnectedAddress(string value)
public int get_ConnectedPort()
public void set_ConnectedPort(int value)
public string get_ServerName()
public void set_ServerName(string value)
public bool get_IsOfficialServer()
public void set_IsOfficialServer(bool value)
public bool Connect(string strURL, int port)
public void Flush()
public void Disconnect(string reason, bool sendReasonToServer)
protected void OnDisconnected(string str)
public Networkable CreateNetworkable(NetworkableId networkID, UInt32 networkGroup)
public void DestroyNetworkable(Networkable& networkable)
public void SetupNetworkable(Networkable net)
public int GetLastPing()
public bool get_IsRecording()
public string get_RecordFilename()
public TimeSpan get_RecordTimeElapsed()
public bool StartRecording(string targetFilename, IDemoHeader header)
public void StopRecording()
}
public Network.Connection : object {
private MemoryStream reusableStream
protected MemoryStream recordStream
protected BinaryWriter recordWriter
protected Stopwatch recordTime
protected string recordFilename
protected IDemoHeader recordHeader
public int MaxClientInfoSize
public State state
public bool active
public bool connected
public UInt32 authLevel
public UInt32 encryptionLevel
public bool trusted
public bool rejected
public string authStatus
public Byte[] token
public bool hasRequestedWorld
public ulong guid
public ulong userid
public ulong ownerid
public string username
public string os
public UInt32 protocol
private TimeAverageValueData[] packetsPerSecond
public double connectionTime
public string ipaddress
public MonoBehaviour player
public Validation validate
public ClientInfo info
public TimeSpan RecordTimeElapsed
public string RecordFilename
public int RecordFilesize
public bool IsRecording
public bool isAuthenticated
public TimeSpan get_RecordTimeElapsed()
public string get_RecordFilename()
public int get_RecordFilesize()
public bool StartRecording(string targetFilename, IDemoHeader header)
public void StopRecording()
public bool get_IsRecording()
public void RecordPacket(byte packetId, IProto proto)
public void RecordPacket(Stream stream)
public string IPAddressWithoutPort()
public void OnDisconnected()
public bool get_isAuthenticated()
public void ResetPacketsPerSecond()
public void AddPacketsPerSecond(Type message)
public void AddPacketsPerSecond(int index)
public ulong GetPacketsPerSecond(Type message)
public ulong GetPacketsPerSecond(int index)
public float GetSecondsConnected()
public string ToString()
}
public Network.Defines : object {
public byte lowestUserPacket
public int packetHeaderSize
public int MinNetWriteBufferSize
public int MaxNetWriteBufferSize
public int MaxNetReadPacketSize
public int MinNetReadBufferSize
public int MaxNetReadBufferSize
public int MaxServerPacketSize
}
public Network.DemoClient : Client {
protected Reader demoFile
public bool IsPlaying
public bool PlayingFinished
public void .ctor(Reader demoFile)
public void Dispose()
public bool IsConnected()
public bool get_IsPlaying()
public bool get_PlayingFinished()
public void UpdatePlayback(long frameTime)
private bool PlaybackPacket()
private void HandleMessage(IntPtr data, int size)
}
public Network.IClientCallback {
public void OnNetworkMessage(Message message)
public void OnClientDisconnected(string reason)
}
public Network.IDemoHeader {
public long Length
public long get_Length()
public void set_Length(long value)
public void Write(BinaryWriter writer)
}
public Network.INetworkCryptography {
public ArraySegment`1<byte> EncryptCopy(Connection connection, ArraySegment`1<byte> data)
public ArraySegment`1<byte> DecryptCopy(Connection connection, ArraySegment`1<byte> data)
public void Encrypt(Connection connection, ArraySegment`1& data)
public void Decrypt(Connection connection, ArraySegment`1& data)
}
public Network.IServerCallback {
public void OnNetworkMessage(Message message)
public void OnDisconnected(string reason, Connection connection)
}
public Network.Message : object {
public Boolean[] EncryptionPerType
public Type type
public BaseNetwork peer
public NetRead read
public Connection connection
public Connection get_connection()
public void Clear()
}
public Network.NetRead : Stream {
public Byte[] Data
private int _length
private int _position
public ulong guid
public string ipaddress
public Connection connection
private int bufferSize
private Byte[] byteBuffer
private Char[] charBuffer
public int Unread
public bool CanRead
public bool CanWrite
public long Length
public long Position
public bool CanSeek
public void EnterPool()
public void LeavePool()
public bool Start(ulong guid, string ipaddress, IntPtr data, int length)
public bool Start(Connection connection, IntPtr data, int length)
public bool Start(Connection connection, ulong guid, IntPtr data, int length)
public bool Start(Connection connection, ulong guid, string ipaddress, IntPtr data, int length)
private bool Init(IntPtr data, int length)
public int get_Unread()
public string String(int maxLength)
public string StringMultiLine(int maxLength)
private string StringInternal(int maxLength, bool allowNewLine)
public string StringRaw(UInt32 maxLength)
public bool TemporaryBytesWithSize(Byte[]& buffer, Int32& size)
public NetworkableId EntityID()
public ItemContainerId ItemContainerID()
public ItemId ItemID()
public UInt32 GroupID()
public int BytesWithSize(Byte[] buffer, UInt32 maxLength)
public Byte[] BytesWithSize(UInt32 maxSize)
public int ReadByte()
private void EnsureCapacity(int spaceRequired)
public bool get_CanRead()
public bool get_CanWrite()
public void SetLength(long value)
public byte PacketID()
public byte PeekPacketID()
public bool Bit()
public byte UInt8()
public ushort UInt16()
public UInt32 UInt32()
public ulong UInt64()
public sbyte Int8()
public short Int16()
public int Int32()
public long Int64()
public float Float()
public double Double()
public Vector3 Vector3()
public Quaternion Quaternion()
public Ray Ray()
public Color Color()
public int Read(Byte[] buffer, int offset, int count)
public long get_Length()
public long get_Position()
public void set_Position(long value)
public bool get_CanSeek()
public long Seek(long offset, SeekOrigin origin)
public T Read()
public T Peek()
public void Flush()
public void Write(Byte[] buffer, int offset, int count)
public void WriteByte(byte value)
}
public Network.Networkable : object {
public NetworkableId ID
private Connection <connection>k__BackingField
public Group group
public Group secondaryGroup
public Subscriber subscriber
public NetworkHandler handler
public bool updateSubscriptions
public Server sv
internal Client cl
public Connection connection
public Connection get_connection()
private void set_connection(Connection value)
public void Destroy()
public void EnterPool()
public void LeavePool()
public void StartSubscriber()
public void OnConnected(Connection c)
public void OnDisconnected()
public void CloseSubscriber()
public bool UpdateGroups(Vector3 position)
public bool SwitchGroup(Group newGroup)
public void OnGroupTransition(Group oldGroup)
public void OnSubscriptionChange()
public bool SwitchSecondaryGroup(Group newGroup)
public void AddVisibleFromNear(Group additionalGroup, List`1<Group> groupsVisible)
public bool UpdateSubscriptions(int removeLimit, int addLimit)
public bool UpdateHighPrioritySubscriptions()
}
public Network.NetworkHandler {
public void OnNetworkSubscribersEnter(List`1<Connection> connections)
public void OnNetworkSubscribersLeave(List`1<Connection> connections)
public void OnNetworkGroupChange()
public void OnNetworkGroupLeave(Group group)
public void OnNetworkGroupEnter(Group group)
}
public Network.NetWrite : Stream {
private MemoryStream stringBuffer
private BaseNetwork peer
public Byte[] Data
private int _position
private int _length
public SendMethod method
public sbyte channel
public Priority priority
public List`1<Connection> connections
public bool CanSeek
public bool CanRead
public bool CanWrite
public long Length
public long Position
public void EnterPool()
public void LeavePool()
public bool Start(BaseNetwork peer)
public void Send(SendInfo info)
public void SendImmediate(SendInfo info)
public byte PeekPacketID()
public void PacketID(Type val)
public void UInt8(byte val)
public void UInt16(ushort val)
public void UInt32(UInt32 val)
public void UInt64(ulong val)
public void Int8(sbyte val)
public void Int16(short val)
public void Int32(int val)
public void Int64(long val)
public void Bool(bool val)
public void Float(float val)
public void Double(double val)
public void Bytes(Byte[] val)
public void String(string val)
public void Vector3(Vector3& obj)
public void Quaternion(Quaternion& obj)
public void Ray(Ray& obj)
public void Color(Color& obj)
public void EntityID(NetworkableId id)
public void ItemContainerID(ItemContainerId id)
public void ItemID(ItemId id)
public void GroupID(UInt32 id)
public void BytesWithSize(MemoryStream val)
public void BytesWithSize(Byte[] b)
public void BytesWithSize(Byte[] b, int length)
private void Write(T& val)
private void EnsureCapacity(int spaceRequired)
public bool get_CanSeek()
public bool get_CanRead()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public int ReadByte()
public void Write(Byte[] buffer, int offset, int count)
public void WriteByte(byte value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
}
public Network.Priority : Enum {
public int value__
public Priority Immediate
public Priority Normal
}
public Network.SendInfo : ValueType {
public SendMethod method
public sbyte channel
public Priority priority
public List`1<Connection> connections
public Connection connection
public void .ctor(List`1<Connection> connections)
public void .ctor(Connection connection)
}
public Network.SendMethod : Enum {
public int value__
public SendMethod Reliable
public SendMethod ReliableUnordered
public SendMethod Unreliable
}
public Network.Server : BaseNetwork {
public ulong MaxPacketsPerSecond
public int MaxConnectionsPerIP
public int MaxReceiveTime
public int MaxReadQueueLength
public int MaxWriteQueueLength
public int MaxDecryptQueueLength
public int MaxReadQueueBytes
public int MaxWriteQueueBytes
public int MaxDecryptQueueBytes
public int MaxMainThreadWait
public int MaxReadThreadWait
public int MaxWriteThreadWait
public int MaxDecryptThreadWait
public string ip
public int port
public bool compressionEnabled
public bool logging
public Manager visibility
public IServerCallback callbackHandler
public bool debug
internal ulong lastValueGiven
public List`1<Connection> connections
private Dictionary`2<ulong, Connection> connectionByGUID
private Dictionary`2<string, List`1<Connection>> connectionsByIP
protected int MaxReceiveTimeValue
protected int MaxReadQueueLengthValue
protected int MaxWriteQueueLengthValue
protected int MaxDecryptQueueLengthValue
protected int MaxReadQueueBytesValue
protected int MaxWriteQueueBytesValue
protected int MaxDecryptQueueBytesValue
protected int MaxMainThreadWaitValue
protected int MaxReadThreadWaitValue
protected int MaxWriteThreadWaitValue
protected int MaxDecryptThreadWaitValue
public string ProtocolId
protected int get_MaxReceiveTimeValue()
protected int get_MaxReadQueueLengthValue()
protected int get_MaxWriteQueueLengthValue()
protected int get_MaxDecryptQueueLengthValue()
protected int get_MaxReadQueueBytesValue()
protected int get_MaxWriteQueueBytesValue()
protected int get_MaxDecryptQueueBytesValue()
protected int get_MaxMainThreadWaitValue()
protected int get_MaxReadThreadWaitValue()
protected int get_MaxWriteThreadWaitValue()
protected int get_MaxDecryptThreadWaitValue()
public string get_ProtocolId()
public void Reset()
public bool Start()
public void Stop(string shutdownMsg)
public void Flush(Connection cn)
public void Disconnect(Connection cn)
public void Kick(Connection cn, string message, bool logfile)
public ulong GetLastUIDGiven()
public ulong TakeUID()
public void ReturnUID(ulong uid)
public void RegisterUID(ulong uid)
internal void ResetUIDs()
public Networkable CreateNetworkable()
public Networkable CreateNetworkable(NetworkableId uid)
public void DestroyNetworkable(Networkable& networkable)
protected void OnDisconnected(string strReason, Connection cn)
protected Connection FindConnection(ulong guid)
protected void OnNewConnection(ulong guid, string ipaddress)
protected void OnNewConnection(Connection connection)
protected void RemoveConnection(Connection connection)
public bool LimitConnectionsPerIP()
public int GetAveragePing(Connection connection)
}
public Network.Stats : object {
public bool Enabled
public Node Building
public Node Previous
public void Add(string Category, string Object, long Bytes)
public void Add(string Category, long Bytes)
public void Flip()
}
public Network.TimeAverageValue : object {
private TimeAverageValueData data
public ulong Calculate()
public void Increment()
public void Reset()
}
public Network.TimeAverageValueData : ValueType {
private double refreshTime
private ulong counterPrev
private ulong counterNext
public ulong Calculate()
public void Increment()
public void Reset()
}
public Network.TimeAverageValueLookup`1 : object {
public Dictionary`2<T, TimeAverageValue> dict
public bool TryIncrement(T id, ulong limit)
public void Increment(T id)
public ulong Calculate(T id)
public void Clear()
}
public Network.TimeEx : object {
private Stopwatch stopwatch
public double realtimeSinceStartup
public double currentTimestamp
public double get_realtimeSinceStartup()
public double get_currentTimestamp()
}
public Network.Visibility.Group : object {
protected Manager manager
public UInt32 ID
public Bounds bounds
public ListHashSet`1<Networkable> networkables
public List`1<Connection> subscribers
public bool isGlobal
public bool get_isGlobal()
public void .ctor(Manager m, UInt32 id)
public void Dispose()
public void Join(Networkable nw)
public void Leave(Networkable nw)
public void AddSubscriber(Connection cn)
public void RemoveSubscriber(Connection cn)
public bool HasSubscribers()
public string ToString()
}
public Network.Visibility.Manager : object {
public Dictionary`2<UInt32, Group> groups
public Provider provider
public void Dispose()
public void .ctor(Provider p)
public Group TryGet(UInt32 ID)
public Group Get(UInt32 ID)
public Subscriber CreateSubscriber(Connection connection)
public void DestroySubscriber(Subscriber& subscriber)
public bool IsInside(Group group, Vector3 vPos)
public Group GetGroup(Vector3 vPos)
public void GetVisibleFromFar(Group center, List`1<Group> groups)
public void GetVisibleFromNear(Group center, List`1<Group> groups)
}
public Network.Visibility.Provider {
public void OnGroupAdded(Group group)
public bool IsInside(Group group, Vector3 vPos)
public Group GetGroup(Vector3 vPos)
public void GetVisibleFromFar(Group group, List`1<Group> groups)
public void GetVisibleFromNear(Group group, List`1<Group> groups)
}
public Network.Visibility.Subscriber : object {
internal Manager manager
internal Connection connection
public ListHashSet`1<Group> subscribed
public Group Subscribe(Group group)
public Group Subscribe(UInt32 group)
public bool IsSubscribed(Group group)
public void UnsubscribeAll()
public void Unsubscribe(Group group)
public void Destroy()
public void EnterPool()
public void LeavePool()
}
