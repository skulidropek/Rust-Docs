public UnityEngine.AssetBundle : Object {
public Object mainAsset
public bool isStreamedSceneAssetBundle
public void UnloadAllAssetBundles(bool unloadAllObjects)
public IEnumerable`1<AssetBundle> GetAllLoadedAssetBundles()
internal AssetBundle[] GetAllLoadedAssetBundles_Internal()
public AssetBundleCreateRequest LoadFromFileAsync(string path, UInt32 crc, ulong offset)
public AssetBundleCreateRequest LoadFromFileAsync(string path, UInt32 crc)
public AssetBundleCreateRequest LoadFromFileAsync(string path)
public AssetBundle LoadFromFile(string path, UInt32 crc, ulong offset)
public AssetBundle LoadFromFile(string path, UInt32 crc)
public AssetBundle LoadFromFile(string path)
public AssetBundleCreateRequest LoadFromMemoryAsync(Byte[] binary, UInt32 crc)
public AssetBundleCreateRequest LoadFromMemoryAsync(Byte[] binary)
public AssetBundle LoadFromMemory(Byte[] binary, UInt32 crc)
public AssetBundle LoadFromMemory(Byte[] binary)
internal void ValidateLoadFromStream(Stream stream)
public AssetBundleCreateRequest LoadFromStreamAsync(Stream stream, UInt32 crc)
public AssetBundleCreateRequest LoadFromStreamAsync(Stream stream)
public AssetBundleCreateRequest LoadFromStreamAsync(Stream stream, UInt32 crc, UInt32 managedReadBufferSize)
public AssetBundle LoadFromStream(Stream stream, UInt32 crc)
public AssetBundle LoadFromStream(Stream stream)
public AssetBundle LoadFromStream(Stream stream, UInt32 crc, UInt32 managedReadBufferSize)
internal AssetBundleCreateRequest LoadFromStreamAsyncInternal(Stream stream, UInt32 crc, UInt32 managedReadBufferSize)
internal AssetBundleCreateRequest LoadFromStreamAsyncInternal(Stream stream, UInt32 crc)
internal AssetBundle LoadFromStreamInternal(Stream stream, UInt32 crc, UInt32 managedReadBufferSize)
internal AssetBundle LoadFromStreamInternal(Stream stream, UInt32 crc)
public Object get_mainAsset()
public bool get_isStreamedSceneAssetBundle()
public bool Contains(string name)
public Object Load(string name)
public T Load(string name)
public Object Load(string name, Type type)
public AssetBundleRequest LoadAsync(string name, Type type)
public Object[] LoadAll(Type type)
public Object[] LoadAll()
public T[] LoadAll()
public Object LoadAsset(string name)
public T LoadAsset(string name)
public Object LoadAsset(string name, Type type)
private Object LoadAsset_Internal(string name, Type type)
public AssetBundleRequest LoadAssetAsync(string name)
public AssetBundleRequest LoadAssetAsync(string name)
public AssetBundleRequest LoadAssetAsync(string name, Type type)
private AssetBundleRequest LoadAssetAsync_Internal(string name, Type type)
public Object[] LoadAssetWithSubAssets(string name)
internal T[] ConvertObjects(Object[] rawObjects)
public T[] LoadAssetWithSubAssets(string name)
public Object[] LoadAssetWithSubAssets(string name, Type type)
internal Object[] LoadAssetWithSubAssets_Internal(string name, Type type)
public AssetBundleRequest LoadAssetWithSubAssetsAsync(string name)
public AssetBundleRequest LoadAssetWithSubAssetsAsync(string name)
public AssetBundleRequest LoadAssetWithSubAssetsAsync(string name, Type type)
private AssetBundleRequest LoadAssetWithSubAssetsAsync_Internal(string name, Type type)
public Object[] LoadAllAssets()
public T[] LoadAllAssets()
public Object[] LoadAllAssets(Type type)
public AssetBundleRequest LoadAllAssetsAsync()
public AssetBundleRequest LoadAllAssetsAsync()
public AssetBundleRequest LoadAllAssetsAsync(Type type)
public void Unload(bool unloadAllLoadedObjects)
public String[] AllAssetNames()
public String[] GetAllAssetNames()
public String[] GetAllScenePaths()
}
public UnityEngine.AssetBundleCreateRequest : AsyncOperation {
public AssetBundle assetBundle
public AssetBundle get_assetBundle()
internal void DisableCompatibilityChecks()
}
public UnityEngine.AssetBundleManifest : Object {
public String[] GetAllAssetBundles()
public String[] GetAllAssetBundlesWithVariant()
public Hash128 GetAssetBundleHash(string assetBundleName)
private void INTERNAL_CALL_GetAssetBundleHash(AssetBundleManifest self, string assetBundleName, Hash128& value)
public String[] GetDirectDependencies(string assetBundleName)
public String[] GetAllDependencies(string assetBundleName)
}
public UnityEngine.AssetBundleRequest : AsyncOperation {
public Object asset
public Object[] allAssets
public Object get_asset()
public Object[] get_allAssets()
}
internal UnityEngine.AssetBundleUtility : object {
internal void PatchAssetBundles(AssetBundle[] bundles, String[] filenames)
}
