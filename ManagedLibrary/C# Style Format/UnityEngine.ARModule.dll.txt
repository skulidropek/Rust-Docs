public UnityEngine.XR.ARBackgroundRenderer : object {
protected Camera m_Camera
protected Material m_BackgroundMaterial
protected Texture m_BackgroundTexture
private ARRenderMode m_RenderMode
private CommandBuffer m_CommandBuffer
private CameraClearFlags m_CameraClearFlags
private Action backgroundRendererChanged
public Material backgroundMaterial
public Texture backgroundTexture
public Camera camera
public ARRenderMode mode
public void add_backgroundRendererChanged(Action value)
public void remove_backgroundRendererChanged(Action value)
public Material get_backgroundMaterial()
public void set_backgroundMaterial(Material value)
public Texture get_backgroundTexture()
public void set_backgroundTexture(Texture value)
public Camera get_camera()
public void set_camera(Camera value)
public ARRenderMode get_mode()
public void set_mode(ARRenderMode value)
protected bool EnableARBackgroundRendering()
protected void DisableARBackgroundRendering()
private bool ReapplyCommandBuffersIfNeeded()
private bool RemoveCommandBuffersIfNeeded()
}
public UnityEngine.XR.ARRenderMode : Enum {
public int value__
public ARRenderMode StandardBackground
public ARRenderMode MaterialAsBackground
}
internal UnityEngine.XR.Tango.PoseData : ValueType {
public double orientation_x
public double orientation_y
public double orientation_z
public double orientation_w
public double translation_x
public double translation_y
public double translation_z
public PoseStatus statusCode
public Quaternion rotation
public Vector3 position
public Quaternion get_rotation()
public Vector3 get_position()
}
internal UnityEngine.XR.Tango.PoseStatus : Enum {
public int value__
public PoseStatus Initializing
public PoseStatus Valid
public PoseStatus Invalid
public PoseStatus Unknown
}
internal UnityEngine.XR.Tango.TangoInputTracking : object {
private bool Internal_TryGetPoseAtTime(PoseData& pose)
internal bool TryGetPoseAtTime(PoseData& pose)
}
