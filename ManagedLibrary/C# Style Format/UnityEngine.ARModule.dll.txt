public UnityEngine.XR.ARBackgroundRenderer : object {
protected Camera m_Camera
protected Material m_BackgroundMaterial
protected Texture m_BackgroundTexture
private ARRenderMode m_RenderMode
private CommandBuffer m_CommandBuffer
private CameraClearFlags m_CameraClearFlags
private Action backgroundRendererChanged
public Material backgroundMaterial
public Texture backgroundTexture
public Camera camera
public ARRenderMode mode
public void add_backgroundRendererChanged(Action value)
public void remove_backgroundRendererChanged(Action value)
public Material get_backgroundMaterial()
public void set_backgroundMaterial(Material value)
public Texture get_backgroundTexture()
public void set_backgroundTexture(Texture value)
public Camera get_camera()
public void set_camera(Camera value)
public ARRenderMode get_mode()
public void set_mode(ARRenderMode value)
protected bool EnableARBackgroundRendering()
protected void DisableARBackgroundRendering()
private bool ReapplyCommandBuffersIfNeeded()
private bool RemoveCommandBuffersIfNeeded()
}
public UnityEngine.XR.ARRenderMode : Enum {
public int value__
public ARRenderMode StandardBackground
public ARRenderMode MaterialAsBackground
}
internal UnityEngine.XR.Tango.AreaLearningMode : Enum {
public int value__
public AreaLearningMode None
public AreaLearningMode LocalAreaDescriptionWithoutLearning
public AreaLearningMode LocalAreaDescription
public AreaLearningMode CloudAreaDescription
}
internal UnityEngine.XR.Tango.CoordinateFrame : Enum {
public int value__
public CoordinateFrame GlobalWGS84
public CoordinateFrame AreaDescription
public CoordinateFrame StartOfService
public CoordinateFrame PreviousDevicePose
public CoordinateFrame Device
public CoordinateFrame IMU
public CoordinateFrame Display
public CoordinateFrame CameraColor
public CoordinateFrame CameraDepth
public CoordinateFrame CameraFisheye
public CoordinateFrame UUID
public CoordinateFrame Invalid
public CoordinateFrame MaxCoordinateFrameType
}
internal UnityEngine.XR.Tango.CoordinateFramePair : ValueType {
public CoordinateFrame baseFrame
public CoordinateFrame targetFrame
}
internal UnityEngine.XR.Tango.GridIndex : ValueType {
public int i
public int j
public int k
}
internal UnityEngine.XR.Tango.ImageData : ValueType {
public UInt32 width
public UInt32 height
public int format
public long timestampNs
public List`1<byte> planeData
public List`1<PlaneInfo> planeInfos
public CameraMetadata metadata
}
internal UnityEngine.XR.Tango.MeshReconstructionConfig : ValueType {
public double resolution
public double minDepth
public double maxDepth
public int minNumVertices
public bool useParallelIntegration
public bool generateColor
public bool useSpaceClearing
public UpdateMethod updateMethod
public MeshReconstructionConfig GetDefault()
}
internal UnityEngine.XR.Tango.MeshReconstructionServer : object {
private Status m_Status
internal IntPtr m_ServerPtr
internal Status status
internal int generationRequests
internal bool enabled
internal void .ctor(MeshReconstructionConfig config)
internal Status get_status()
protected void Finalize()
internal void ClearMeshes()
internal IntPtr GetNativeReconstructionContext()
internal void GetChangedSegments(SegmentChangedDelegate onSegmentChanged)
internal void GenerateSegmentAsync(SegmentGenerationRequest request, SegmentReadyDelegate onSegmentReady)
internal int get_generationRequests()
internal bool get_enabled()
internal void set_enabled(bool value)
private void Internal_ClearMeshes(IntPtr server)
private bool Internal_GetEnabled(IntPtr server)
private void Internal_SetEnabled(IntPtr server, bool enabled)
private IntPtr Internal_GetNativeReconstructionContextPtr(IntPtr server)
private int Internal_GetNumGenerationRequests(IntPtr server)
internal void Dispose()
private IntPtr Internal_Create(MeshReconstructionServer self, MeshReconstructionConfig config, Int32& status)
internal void Destroy(IntPtr server)
internal void DestroyThreaded(IntPtr server)
private void Internal_GetChangedSegments(IntPtr serverPtr, SegmentChangedDelegate onSegmentChanged)
private void Internal_GenerateSegmentAsync(IntPtr serverPtr, GridIndex gridIndex, MeshFilter destinationMeshFilter, MeshCollider destinationMeshCollider, SegmentReadyDelegate onSegmentReady, bool provideNormals, bool provideColors, bool providePhysics)
private IntPtr Internal_Create_Injected(MeshReconstructionServer self, MeshReconstructionConfig& config, Int32& status)
private void Internal_GenerateSegmentAsync_Injected(IntPtr serverPtr, GridIndex& gridIndex, MeshFilter destinationMeshFilter, MeshCollider destinationMeshCollider, SegmentReadyDelegate onSegmentReady, bool provideNormals, bool provideColors, bool providePhysics)
}
internal UnityEngine.XR.Tango.NativeImage : ValueType {
public UInt32 width
public UInt32 height
public int format
public long timestampNs
public IntPtr planeData
public IntPtr nativePtr
public List`1<PlaneInfo> planeInfos
public CameraMetadata metadata
}
internal UnityEngine.XR.Tango.NativePointCloud : ValueType {
public UInt32 version
public double timestamp
public UInt32 numPoints
public IntPtr points
public IntPtr nativePtr
}
internal UnityEngine.XR.Tango.PointCloudData : ValueType {
public UInt32 version
public double timestamp
public List`1<Vector4> points
}
internal UnityEngine.XR.Tango.PoseData : ValueType {
public UInt32 version
public double timestamp
public double orientation_x
public double orientation_y
public double orientation_z
public double orientation_w
public double translation_x
public double translation_y
public double translation_z
public PoseStatus statusCode
public CoordinateFramePair frame
public UInt32 confidence
public float accuracy
public Quaternion rotation
public Vector3 position
public Quaternion get_rotation()
public Vector3 get_position()
}
internal UnityEngine.XR.Tango.PoseStatus : Enum {
public int value__
public PoseStatus Initializing
public PoseStatus Valid
public PoseStatus Invalid
public PoseStatus Unknown
}
internal UnityEngine.XR.Tango.SegmentChange : Enum {
public int value__
public SegmentChange Added
public SegmentChange Updated
}
internal UnityEngine.XR.Tango.SegmentGenerationRequest : ValueType {
public GridIndex gridIndex
public MeshFilter destinationMeshFilter
public MeshCollider destinationMeshCollider
public bool provideNormals
public bool provideColors
public bool providePhysics
}
internal UnityEngine.XR.Tango.SegmentGenerationResult : ValueType {
public GridIndex gridIndex
public MeshFilter meshFilter
public MeshCollider meshCollider
public bool success
public double elapsedTimeSeconds
}
internal UnityEngine.XR.Tango.TangoConfig : object {
internal Dictionary`2<string, bool> m_boolParams
internal Dictionary`2<string, double> m_doubleParams
internal Dictionary`2<string, int> m_intParams
internal Dictionary`2<string, long> m_longParams
internal Dictionary`2<string, string> m_stringParams
internal bool enableMotionTracking
internal bool enableDepth
internal bool enableColorCamera
internal AreaLearningMode areaLearningMode
internal void set_enableMotionTracking(bool value)
internal void set_enableDepth(bool value)
internal void set_enableColorCamera(bool value)
internal void set_areaLearningMode(AreaLearningMode value)
internal void AddConfigParameter(string name, bool value)
internal void AddConfigParameter(string name, double value)
internal void AddConfigParameter(string name, int value)
internal void AddConfigParameter(string name, long value)
internal void AddConfigParameter(string name, string value)
internal void RemoveConfigParameter(string name)
}
internal UnityEngine.XR.Tango.TangoDevice : object {
private ARBackgroundRenderer m_BackgroundRenderer
private string m_AreaDescriptionUUID
private Action <>f__mg$cache0
private Action <>f__mg$cache1
internal CoordinateFrame baseCoordinateFrame
internal UInt32 depthCameraRate
internal bool synchronizeFramerateWithColorCamera
internal bool isServiceConnected
internal bool isServiceAvailable
internal string areaDescriptionUUID
internal ARBackgroundRenderer backgroundRenderer
internal CoordinateFrame get_baseCoordinateFrame()
internal void set_baseCoordinateFrame(CoordinateFrame value)
internal bool Connect(String[] boolKeys, Boolean[] boolValues, String[] intKeys, Int32[] intValues, String[] longKeys, Int64[] longValues, String[] doubleKeys, Double[] doubleValues, String[] stringKeys, String[] stringValues)
internal void Disconnect()
internal bool TryGetHorizontalFov(Single& fovOut)
internal bool TryGetVerticalFov(Single& fovOut)
internal void SetRenderMode(ARRenderMode mode)
internal UInt32 get_depthCameraRate()
internal void set_depthCameraRate(UInt32 value)
internal bool get_synchronizeFramerateWithColorCamera()
internal void set_synchronizeFramerateWithColorCamera(bool value)
internal void SetBackgroundMaterial(Material material)
internal bool TryGetLatestPointCloud(PointCloudData& pointCloudData)
private bool TryGetLatestPointCloudInternal(List`1<Vector4> pointCloudData, UInt32& version, Double& timestamp)
internal bool TryGetLatestImageData(ImageData& image)
private bool TryGetLatestImageDataInternal(List`1<byte> imageData, List`1<PlaneInfo> planeInfos, UInt32& width, UInt32& height, Int32& format, Int64& timestampNs, CameraMetadata& metadata)
internal bool get_isServiceConnected()
internal bool get_isServiceAvailable()
internal bool TryAcquireLatestPointCloud(NativePointCloud& pointCloud)
internal void ReleasePointCloud(IntPtr pointCloudNativePtr)
internal bool TryAcquireLatestImageBuffer(NativeImage& nativeImage)
internal void ReleaseImageBuffer(IntPtr imageBufferNativePtr)
private bool Internal_TryAcquireLatestImageBuffer(List`1<PlaneInfo> planeInfos, UInt32& width, UInt32& height, Int32& format, Int64& timestampNs, IntPtr& planeData, IntPtr& nativePtr, CameraMetadata& metadata)
private bool Internal_TryAcquireLatestPointCloud(UInt32& version, Double& timestamp, UInt32& numPoints, IntPtr& points, IntPtr& nativePtr)
private void Internal_ReleasePointCloud(IntPtr pointCloudPtr)
private void Internal_ReleaseImageBuffer(IntPtr imageBufferPtr)
internal string get_areaDescriptionUUID()
internal void set_areaDescriptionUUID(string value)
internal ARBackgroundRenderer get_backgroundRenderer()
internal void set_backgroundRenderer(ARBackgroundRenderer value)
private void OnBackgroundRendererChanged()
internal bool Connect(TangoConfig config)
private void CopyDictionaryToArrays(Dictionary`2<string, T> dictionary, String[]& keys, T[]& values)
}
internal UnityEngine.XR.Tango.TangoInputTracking : object {
private Action`1<CoordinateFrame> trackingAcquired
private Action`1<CoordinateFrame> trackingLost
internal void add_trackingAcquired(Action`1<CoordinateFrame> value)
internal void remove_trackingAcquired(Action`1<CoordinateFrame> value)
internal void add_trackingLost(Action`1<CoordinateFrame> value)
internal void remove_trackingLost(Action`1<CoordinateFrame> value)
private void InvokeTangoTrackingEvent(TrackingStateEventType eventType, CoordinateFrame frame)
private bool Internal_TryGetPoseAtTime(double time, ScreenOrientation screenOrientation, CoordinateFrame baseFrame, CoordinateFrame targetFrame, PoseData& pose)
internal bool TryGetPoseAtTime(PoseData& pose, CoordinateFrame baseFrame, CoordinateFrame targetFrame, double time, ScreenOrientation screenOrientation)
internal bool TryGetPoseAtTime(PoseData& pose, CoordinateFrame baseFrame, CoordinateFrame targetFrame, double time)
}
internal UnityEngine.XR.Tango.UpdateMethod : Enum {
public int value__
public UpdateMethod Traversal
public UpdateMethod Projective
}
