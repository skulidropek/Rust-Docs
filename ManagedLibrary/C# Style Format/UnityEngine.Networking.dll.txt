internal UnityEngine.Networking.ChannelBuffer : object {
private NetworkConnection m_Connection
private ChannelPacket m_CurrentPacket
private float m_LastFlushTime
private byte m_ChannelId
private int m_MaxPacketSize
private bool m_IsReliable
private bool m_AllowFragmentation
private bool m_IsBroken
private int m_MaxPendingPacketCount
private int k_MaxFreePacketCount
public int MaxPendingPacketCount
public int MaxBufferedPackets
private Queue`1<ChannelPacket> m_PendingPackets
private List`1<ChannelPacket> s_FreePackets
internal int pendingPacketCount
public float maxDelay
private float m_LastBufferedMessageCountTimer
private int <numMsgsOut>k__BackingField
private int <numBufferedMsgsOut>k__BackingField
private int <numBytesOut>k__BackingField
private int <numMsgsIn>k__BackingField
private int <numBytesIn>k__BackingField
private int <numBufferedPerSecond>k__BackingField
private int <lastBufferedPerSecond>k__BackingField
private NetworkWriter s_SendWriter
private NetworkWriter s_FragmentWriter
private int k_PacketHeaderReserveSize
private bool m_Disposed
internal NetBuffer fragmentBuffer
private bool readingFragment
public int numMsgsOut
public int numBufferedMsgsOut
public int numBytesOut
public int numMsgsIn
public int numBytesIn
public int numBufferedPerSecond
public int lastBufferedPerSecond
public void .ctor(NetworkConnection conn, int bufferSize, byte cid, bool isReliable, bool isSequenced)
public int get_numMsgsOut()
private void set_numMsgsOut(int value)
public int get_numBufferedMsgsOut()
private void set_numBufferedMsgsOut(int value)
public int get_numBytesOut()
private void set_numBytesOut(int value)
public int get_numMsgsIn()
private void set_numMsgsIn(int value)
public int get_numBytesIn()
private void set_numBytesIn(int value)
public int get_numBufferedPerSecond()
private void set_numBufferedPerSecond(int value)
public int get_lastBufferedPerSecond()
private void set_lastBufferedPerSecond(int value)
public void Dispose()
protected void Dispose(bool disposing)
public bool SetOption(ChannelOption option, int value)
public void CheckInternalBuffer()
public bool SendWriter(NetworkWriter writer)
public bool Send(short msgType, MessageBase msg)
internal bool HandleFragment(NetworkReader reader)
internal bool SendFragmentBytes(Byte[] bytes, int bytesToSend)
internal bool SendBytes(Byte[] bytes, int bytesToSend)
private void QueuePacket()
private ChannelPacket AllocPacket()
private void FreePacket(ChannelPacket packet)
public bool SendInternalBuffer()
}
public UnityEngine.Networking.ChannelOption : Enum {
public int value__
public ChannelOption MaxPendingBuffers
public ChannelOption AllowFragmentation
public ChannelOption MaxPacketSize
}
internal UnityEngine.Networking.ChannelPacket : ValueType {
private int m_Position
private Byte[] m_Buffer
private bool m_IsReliable
public void .ctor(int packetSize, bool isReliable)
public void Reset()
public bool IsEmpty()
public void Write(Byte[] bytes, int numBytes)
public bool HasSpace(int numBytes)
public bool SendToTransport(NetworkConnection conn, int channelId)
}
public UnityEngine.Networking.Channels : object {
public int DefaultReliable
public int DefaultUnreliable
}
public UnityEngine.Networking.ClientRpcAttribute : Attribute {
public int channel
}
public UnityEngine.Networking.ClientScene : object {
private List`1<PlayerController> s_LocalPlayers
private NetworkConnection s_ReadyConnection
private Dictionary`2<NetworkSceneId, NetworkIdentity> s_SpawnableObjects
private bool s_IsReady
private bool s_IsSpawnFinished
private NetworkScene s_NetworkScene
private ObjectSpawnSceneMessage s_ObjectSpawnSceneMessage
private ObjectSpawnFinishedMessage s_ObjectSpawnFinishedMessage
private ObjectDestroyMessage s_ObjectDestroyMessage
private ObjectSpawnMessage s_ObjectSpawnMessage
private OwnerMessage s_OwnerMessage
private ClientAuthorityMessage s_ClientAuthorityMessage
public int ReconnectIdInvalid
public int ReconnectIdHost
private int s_ReconnectId
private PeerInfoMessage[] s_Peers
private List`1<PendingOwner> s_PendingOwnerIds
private NetworkMessageDelegate <>f__mg$cache0
private NetworkMessageDelegate <>f__mg$cache1
private NetworkMessageDelegate <>f__mg$cache2
private NetworkMessageDelegate <>f__mg$cache3
private NetworkMessageDelegate <>f__mg$cache4
private NetworkMessageDelegate <>f__mg$cache5
private NetworkMessageDelegate <>f__mg$cache6
private NetworkMessageDelegate <>f__mg$cache7
private NetworkMessageDelegate <>f__mg$cache8
private NetworkMessageDelegate <>f__mg$cache9
private NetworkMessageDelegate <>f__mg$cacheA
private NetworkMessageDelegate <>f__mg$cacheB
private NetworkMessageDelegate <>f__mg$cacheC
private NetworkMessageDelegate <>f__mg$cacheD
private NetworkMessageDelegate <>f__mg$cacheE
private NetworkMessageDelegate <>f__mg$cacheF
private NetworkMessageDelegate <>f__mg$cache10
private NetworkMessageDelegate <>f__mg$cache11
private NetworkMessageDelegate <>f__mg$cache12
public List`1<PlayerController> localPlayers
public bool ready
public NetworkConnection readyConnection
public int reconnectId
public Dictionary`2<NetworkInstanceId, NetworkIdentity> objects
public Dictionary`2<NetworkHash128, GameObject> prefabs
public Dictionary`2<NetworkSceneId, NetworkIdentity> spawnableObjects
private bool hasMigrationPending()
public void SetReconnectId(int newReconnectId, PeerInfoMessage[] peers)
internal void SetNotReady()
public List`1<PlayerController> get_localPlayers()
public bool get_ready()
public NetworkConnection get_readyConnection()
public int get_reconnectId()
public Dictionary`2<NetworkInstanceId, NetworkIdentity> get_objects()
public Dictionary`2<NetworkHash128, GameObject> get_prefabs()
public Dictionary`2<NetworkSceneId, NetworkIdentity> get_spawnableObjects()
internal void Shutdown()
internal bool GetPlayerController(short playerControllerId, PlayerController& player)
internal void InternalAddPlayer(NetworkIdentity view, short playerControllerId)
public bool AddPlayer(short playerControllerId)
public bool AddPlayer(NetworkConnection readyConn, short playerControllerId)
public bool AddPlayer(NetworkConnection readyConn, short playerControllerId, MessageBase extraMessage)
public bool SendReconnectMessage(MessageBase extraMessage)
public bool RemovePlayer(short playerControllerId)
public bool Ready(NetworkConnection conn)
public NetworkClient ConnectLocalServer()
internal NetworkClient ReconnectLocalServer()
internal void ClearLocalPlayers()
internal void HandleClientDisconnect(NetworkConnection conn)
internal void PrepareToSpawnSceneObjects()
internal NetworkIdentity SpawnSceneObject(NetworkSceneId sceneId)
internal void RegisterSystemHandlers(NetworkClient client, bool localClient)
internal string GetStringForAssetId(NetworkHash128 assetId)
public void RegisterPrefab(GameObject prefab, NetworkHash128 newAssetId)
public void RegisterPrefab(GameObject prefab)
public void RegisterPrefab(GameObject prefab, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler)
public void UnregisterPrefab(GameObject prefab)
public void RegisterSpawnHandler(NetworkHash128 assetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler)
public void UnregisterSpawnHandler(NetworkHash128 assetId)
public void ClearSpawners()
public void DestroyAllClientObjects()
public void SetLocalObject(NetworkInstanceId netId, GameObject obj)
public GameObject FindLocalObject(NetworkInstanceId netId)
private void ApplySpawnPayload(NetworkIdentity uv, Vector3 position, Byte[] payload, NetworkInstanceId netId, GameObject newGameObject)
private void OnObjectSpawn(NetworkMessage netMsg)
private void OnObjectSpawnScene(NetworkMessage netMsg)
private void OnObjectSpawnFinished(NetworkMessage netMsg)
private void OnObjectDestroy(NetworkMessage netMsg)
private void OnLocalClientObjectDestroy(NetworkMessage netMsg)
private void OnLocalClientObjectHide(NetworkMessage netMsg)
private void OnLocalClientObjectSpawn(NetworkMessage netMsg)
private void OnLocalClientObjectSpawnScene(NetworkMessage netMsg)
private void OnUpdateVarsMessage(NetworkMessage netMsg)
private void OnRPCMessage(NetworkMessage netMsg)
private void OnSyncEventMessage(NetworkMessage netMsg)
private void OnSyncListMessage(NetworkMessage netMsg)
private void OnClientAuthority(NetworkMessage netMsg)
private void OnOwnerMessage(NetworkMessage netMsg)
private void CheckForOwner(NetworkIdentity uv)
}
public UnityEngine.Networking.CommandAttribute : Attribute {
public int channel
}
internal UnityEngine.Networking.ConnectionArray : object {
private List`1<NetworkConnection> m_LocalConnections
private List`1<NetworkConnection> m_Connections
internal List`1<NetworkConnection> localConnections
internal List`1<NetworkConnection> connections
public int Count
public int LocalIndex
internal List`1<NetworkConnection> get_localConnections()
internal List`1<NetworkConnection> get_connections()
public int get_Count()
public int get_LocalIndex()
public int Add(int connId, NetworkConnection conn)
public NetworkConnection Get(int connId)
public NetworkConnection GetUnsafe(int connId)
public void Remove(int connId)
public int AddLocal(NetworkConnection conn)
public bool ContainsPlayer(GameObject player, NetworkConnection& conn)
}
internal UnityEngine.Networking.DotNetCompatibility : object {
internal string GetMethodName(Delegate func)
internal Type GetBaseType(Type type)
internal string GetErrorCode(SocketException e)
}
internal UnityEngine.Networking.FloatConversion : object {
public float ToSingle(UInt32 value)
public double ToDouble(ulong value)
public decimal ToDecimal(ulong value1, ulong value2)
}
internal UnityEngine.Networking.LocalClient : NetworkClient {
private int k_InitialFreeMessagePoolSize
private List`1<InternalMsg> m_InternalMsgs
private List`1<InternalMsg> m_InternalMsgs2
private Stack`1<InternalMsg> m_FreeMessages
private NetworkServer m_LocalServer
private bool m_Connected
private NetworkMessage s_InternalMessage
public void Disconnect()
internal void InternalConnectLocalServer(bool generateConnectMsg)
internal void Update()
internal void AddLocalPlayer(PlayerController localPlayer)
private void PostInternalMessage(Byte[] buffer, int channelId)
private void PostInternalMessage(short msgType)
private void ProcessInternalMessages()
internal void InvokeHandlerOnClient(short msgType, MessageBase msg, int channelId)
internal void InvokeBytesOnClient(Byte[] buffer, int channelId)
}
public UnityEngine.Networking.LogFilter : object {
internal int Developer
internal int SetInScripting
public int Debug
public int Info
public int Warn
public int Error
public int Fatal
public FilterLevel current
private int s_CurrentLogLevel
public int currentLogLevel
internal bool logDev
public bool logDebug
public bool logInfo
public bool logWarn
public bool logError
public bool logFatal
public int get_currentLogLevel()
public void set_currentLogLevel(int value)
internal bool get_logDev()
public bool get_logDebug()
public bool get_logInfo()
public bool get_logWarn()
public bool get_logError()
public bool get_logFatal()
}
public UnityEngine.Networking.MessageBase : object {
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
public UnityEngine.Networking.MsgType : object {
public short ObjectDestroy
public short Rpc
public short ObjectSpawn
public short Owner
public short Command
public short LocalPlayerTransform
public short SyncEvent
public short UpdateVars
public short SyncList
public short ObjectSpawnScene
public short NetworkInfo
public short SpawnFinished
public short ObjectHide
public short CRC
public short LocalClientAuthority
public short LocalChildTransform
public short Fragment
public short PeerClientAuthority
internal short UserMessage
internal short HLAPIMsg
internal short LLAPIMsg
internal short HLAPIResend
internal short HLAPIPending
public short InternalHighest
public short Connect
public short Disconnect
public short Error
public short Ready
public short NotReady
public short AddPlayer
public short RemovePlayer
public short Scene
public short Animation
public short AnimationParameters
public short AnimationTrigger
public short LobbyReadyToBegin
public short LobbySceneLoaded
public short LobbyAddPlayerFailed
public short LobbyReturnToLobby
public short ReconnectPlayer
public short Highest
internal String[] msgLabels
public string MsgTypeToString(short value)
}
internal UnityEngine.Networking.NetBuffer : object {
private Byte[] m_Buffer
private UInt32 m_Pos
private int k_InitialSize
private float k_GrowthFactor
private int k_BufferSizeWarning
public UInt32 Position
public int Length
public void .ctor(Byte[] buffer)
public UInt32 get_Position()
public int get_Length()
public byte ReadByte()
public void ReadBytes(Byte[] buffer, UInt32 count)
internal ArraySegment`1<byte> AsArraySegment()
public void WriteByte(byte value)
public void WriteByte2(byte value0, byte value1)
public void WriteByte4(byte value0, byte value1, byte value2, byte value3)
public void WriteByte8(byte value0, byte value1, byte value2, byte value3, byte value4, byte value5, byte value6, byte value7)
public void WriteBytesAtOffset(Byte[] buffer, ushort targetOffset, ushort count)
public void WriteBytes(Byte[] buffer, ushort count)
private void WriteCheckForSpace(ushort count)
public void FinishMessage()
public void SeekZero()
public void Replace(Byte[] buffer)
public string ToString()
}
public UnityEngine.Networking.NetworkAnimator : NetworkBehaviour {
private Animator m_Animator
private UInt32 m_ParameterSendBits
private AnimationMessage s_AnimationMessage
private AnimationParametersMessage s_AnimationParametersMessage
private AnimationTriggerMessage s_AnimationTriggerMessage
private int m_AnimationHash
private int m_TransitionHash
private NetworkWriter m_ParameterWriter
private float m_SendTimer
public string param0
public string param1
public string param2
public string param3
public string param4
public string param5
public Animator animator
private bool sendMessagesAllowed
public Animator get_animator()
public void set_animator(Animator value)
public void SetParameterAutoSend(int index, bool value)
public bool GetParameterAutoSend(int index)
private bool get_sendMessagesAllowed()
internal void ResetParameterOptions()
private void FixedUpdate()
private bool CheckAnimStateChanged(Int32& stateHash, Single& normalizedTime)
private void CheckSendRate()
private void SendMessage(short type, MessageBase msg)
private void SetSendTrackingParam(string p, int i)
private void SetRecvTrackingParam(string p, int i)
internal void HandleAnimMsg(AnimationMessage msg, NetworkReader reader)
internal void HandleAnimParamsMsg(AnimationParametersMessage msg, NetworkReader reader)
internal void HandleAnimTriggerMsg(int hash)
private void WriteParameters(NetworkWriter writer, bool autoSend)
private void ReadParameters(NetworkReader reader, bool autoSend)
public bool OnSerialize(NetworkWriter writer, bool forceAll)
public void OnDeserialize(NetworkReader reader, bool initialState)
public void SetTrigger(string triggerName)
public void SetTrigger(int hash)
internal void OnAnimationServerMessage(NetworkMessage netMsg)
internal void OnAnimationParametersServerMessage(NetworkMessage netMsg)
internal void OnAnimationTriggerServerMessage(NetworkMessage netMsg)
internal void OnAnimationClientMessage(NetworkMessage netMsg)
internal void OnAnimationParametersClientMessage(NetworkMessage netMsg)
internal void OnAnimationTriggerClientMessage(NetworkMessage netMsg)
}
public UnityEngine.Networking.NetworkBehaviour : MonoBehaviour {
private UInt32 m_SyncVarDirtyBits
private float m_LastSendTime
private bool m_SyncVarGuard
private float k_DefaultSendInterval
private NetworkIdentity m_MyView
private Dictionary`2<int, Invoker> s_CmdHandlerDelegates
public bool localPlayerAuthority
public bool isServer
public bool isClient
public bool isLocalPlayer
public bool hasAuthority
public NetworkInstanceId netId
public NetworkConnection connectionToServer
public NetworkConnection connectionToClient
public short playerControllerId
protected UInt32 syncVarDirtyBits
protected bool syncVarHookGuard
internal NetworkIdentity netIdentity
private NetworkIdentity myView
public bool get_localPlayerAuthority()
public bool get_isServer()
public bool get_isClient()
public bool get_isLocalPlayer()
public bool get_hasAuthority()
public NetworkInstanceId get_netId()
public NetworkConnection get_connectionToServer()
public NetworkConnection get_connectionToClient()
public short get_playerControllerId()
protected UInt32 get_syncVarDirtyBits()
protected bool get_syncVarHookGuard()
protected void set_syncVarHookGuard(bool value)
internal NetworkIdentity get_netIdentity()
private NetworkIdentity get_myView()
protected void SendCommandInternal(NetworkWriter writer, int channelId, string cmdName)
public bool InvokeCommand(int cmdHash, NetworkReader reader)
protected void SendRPCInternal(NetworkWriter writer, int channelId, string rpcName)
protected void SendTargetRPCInternal(NetworkConnection conn, NetworkWriter writer, int channelId, string rpcName)
public bool InvokeRPC(int cmdHash, NetworkReader reader)
protected void SendEventInternal(NetworkWriter writer, int channelId, string eventName)
public bool InvokeSyncEvent(int cmdHash, NetworkReader reader)
public bool InvokeSyncList(int cmdHash, NetworkReader reader)
protected void RegisterCommandDelegate(Type invokeClass, int cmdHash, CmdDelegate func)
protected void RegisterRpcDelegate(Type invokeClass, int cmdHash, CmdDelegate func)
protected void RegisterEventDelegate(Type invokeClass, int cmdHash, CmdDelegate func)
protected void RegisterSyncListDelegate(Type invokeClass, int cmdHash, CmdDelegate func)
internal string GetInvoker(int cmdHash)
internal bool GetInvokerForHashCommand(int cmdHash, Type& invokeClass, CmdDelegate& invokeFunction)
internal bool GetInvokerForHashClientRpc(int cmdHash, Type& invokeClass, CmdDelegate& invokeFunction)
internal bool GetInvokerForHashSyncList(int cmdHash, Type& invokeClass, CmdDelegate& invokeFunction)
internal bool GetInvokerForHashSyncEvent(int cmdHash, Type& invokeClass, CmdDelegate& invokeFunction)
private bool GetInvokerForHash(int cmdHash, UNetInvokeType invokeType, Type& invokeClass, CmdDelegate& invokeFunction)
internal void DumpInvokers()
internal bool ContainsCommandDelegate(int cmdHash)
internal bool InvokeCommandDelegate(int cmdHash, NetworkReader reader)
internal bool InvokeRpcDelegate(int cmdHash, NetworkReader reader)
internal bool InvokeSyncEventDelegate(int cmdHash, NetworkReader reader)
internal bool InvokeSyncListDelegate(int cmdHash, NetworkReader reader)
internal string GetCmdHashHandlerName(int cmdHash)
private string GetCmdHashPrefixName(int cmdHash, string prefix)
internal string GetCmdHashCmdName(int cmdHash)
internal string GetCmdHashRpcName(int cmdHash)
internal string GetCmdHashEventName(int cmdHash)
internal string GetCmdHashListName(int cmdHash)
protected void SetSyncVarGameObject(GameObject newGameObject, GameObject& gameObjectField, UInt32 dirtyBit, NetworkInstanceId& netIdField)
protected void SetSyncVar(T value, T& fieldValue, UInt32 dirtyBit)
public void SetDirtyBit(UInt32 dirtyBit)
public void ClearAllDirtyBits()
internal int GetDirtyChannel()
public bool OnSerialize(NetworkWriter writer, bool initialState)
public void OnDeserialize(NetworkReader reader, bool initialState)
public void PreStartClient()
public void OnNetworkDestroy()
public void OnStartServer()
public void OnStartClient()
public void OnStartLocalPlayer()
public void OnStartAuthority()
public void OnStopAuthority()
public bool OnRebuildObservers(HashSet`1<NetworkConnection> observers, bool initialize)
public void OnSetLocalVisibility(bool vis)
public bool OnCheckObserver(NetworkConnection conn)
public int GetNetworkChannel()
public float GetNetworkSendInterval()
}
public UnityEngine.Networking.NetworkBroadcastResult : ValueType {
public string serverAddress
public Byte[] broadcastData
}
public UnityEngine.Networking.NetworkClient : object {
private Type m_NetworkConnectionClass
private int k_MaxEventsPerFrame
private List`1<NetworkClient> s_Clients
private bool s_IsActive
private HostTopology m_HostTopology
private int m_HostPort
private bool m_UseSimulator
private int m_SimulatedLatency
private float m_PacketLoss
private string m_ServerIp
private int m_ServerPort
private int m_ClientId
private int m_ClientConnectionId
private int m_StatResetTime
private EndPoint m_RemoteEndPoint
private CRCMessage s_CRCMessage
private NetworkMessageHandlers m_MessageHandlers
protected NetworkConnection m_Connection
private Byte[] m_MsgBuffer
private NetworkReader m_MsgReader
protected ConnectState m_AsyncConnect
private string m_RequestedServerHost
private AsyncCallback <>f__mg$cache0
private NetworkMessageDelegate <>f__mg$cache1
public List`1<NetworkClient> allClients
public bool active
public string serverIp
public int serverPort
public NetworkConnection connection
public PeerInfoMessage[] peers
internal int hostId
public Dictionary`2<short, NetworkMessageDelegate> handlers
public int numChannels
public HostTopology hostTopology
public int hostPort
public bool isConnected
public Type networkConnectionClass
public void .ctor(NetworkConnection conn)
public List`1<NetworkClient> get_allClients()
public bool get_active()
internal void SetHandlers(NetworkConnection conn)
public string get_serverIp()
public int get_serverPort()
public NetworkConnection get_connection()
public PeerInfoMessage[] get_peers()
internal int get_hostId()
public Dictionary`2<short, NetworkMessageDelegate> get_handlers()
public int get_numChannels()
public HostTopology get_hostTopology()
public int get_hostPort()
public void set_hostPort(int value)
public bool get_isConnected()
public Type get_networkConnectionClass()
public void SetNetworkConnectionClass()
public bool Configure(ConnectionConfig config, int maxConnections)
public bool Configure(HostTopology topology)
public void Connect(MatchInfo matchInfo)
public bool ReconnectToNewHost(string serverIp, int serverPort)
public bool ReconnectToNewHost(EndPoint secureTunnelEndPoint)
public void ConnectWithSimulator(string serverIp, int serverPort, int latency, float packetLoss)
private bool IsValidIpV6(string address)
public void Connect(string serverIp, int serverPort)
public void Connect(EndPoint secureTunnelEndPoint)
private void PrepareForConnect()
private void PrepareForConnect(bool usePlatformSpecificProtocols)
internal void GetHostAddressesCallback(IAsyncResult ar)
internal void ContinueConnect()
private void ConnectWithRelay(MatchInfo info)
public void Disconnect()
public bool Send(short msgType, MessageBase msg)
public bool SendWriter(NetworkWriter writer, int channelId)
public bool SendBytes(Byte[] data, int numBytes, int channelId)
public bool SendUnreliable(short msgType, MessageBase msg)
public bool SendByChannel(short msgType, MessageBase msg, int channelId)
public void SetMaxDelay(float seconds)
public void Shutdown()
internal void Update()
private void GenerateConnectError(int error)
private void GenerateDataError(int error)
private void GenerateDisconnectError(int error)
private void GenerateError(int error)
public void GetStatsOut(Int32& numMsgs, Int32& numBufferedMsgs, Int32& numBytes, Int32& lastBufferedPerSecond)
public void GetStatsIn(Int32& numMsgs, Int32& numBytes)
public Dictionary`2<short, PacketStat> GetConnectionStats()
public void ResetConnectionStats()
public int GetRTT()
internal void RegisterSystemHandlers(bool localClient)
private void OnCRC(NetworkMessage netMsg)
public void RegisterHandler(short msgType, NetworkMessageDelegate handler)
public void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler)
public void UnregisterHandler(short msgType)
public Dictionary`2<short, PacketStat> GetTotalConnectionStats()
internal void AddClient(NetworkClient client)
internal bool RemoveClient(NetworkClient client)
internal void UpdateClients()
public void ShutdownAll()
internal void SetActive(bool state)
}
public UnityEngine.Networking.NetworkConnection : object {
private ChannelBuffer[] m_Channels
private List`1<PlayerController> m_PlayerControllers
private NetworkMessage m_NetMsg
private HashSet`1<NetworkIdentity> m_VisList
private NetworkWriter m_Writer
private Dictionary`2<short, NetworkMessageDelegate> m_MessageHandlersDict
private NetworkMessageHandlers m_MessageHandlers
private HashSet`1<NetworkInstanceId> m_ClientOwnedObjects
private NetworkMessage m_MessageInfo
private int k_MaxMessageLogSize
private NetworkError error
public int hostId
public int connectionId
public bool isReady
public string address
public float lastMessageTime
public bool logNetworkMessages
private Dictionary`2<short, PacketStat> m_PacketStats
private bool m_Disposed
internal HashSet`1<NetworkIdentity> visList
public List`1<PlayerController> playerControllers
public HashSet`1<NetworkInstanceId> clientOwnedObjects
public bool isConnected
public NetworkError lastError
internal Dictionary`2<short, PacketStat> packetStats
internal HashSet`1<NetworkIdentity> get_visList()
public List`1<PlayerController> get_playerControllers()
public HashSet`1<NetworkInstanceId> get_clientOwnedObjects()
public bool get_isConnected()
public NetworkError get_lastError()
internal void set_lastError(NetworkError value)
internal Dictionary`2<short, PacketStat> get_packetStats()
public void Initialize(string networkAddress, int networkHostId, int networkConnectionId, HostTopology hostTopology)
protected void Finalize()
public void Dispose()
protected void Dispose(bool disposing)
private bool IsSequencedQoS(QosType qos)
private bool IsReliableQoS(QosType qos)
public bool SetChannelOption(int channelId, ChannelOption option, int value)
public void Disconnect()
internal void SetHandlers(NetworkMessageHandlers handlers)
public bool CheckHandler(short msgType)
public bool InvokeHandlerNoData(short msgType)
public bool InvokeHandler(short msgType, NetworkReader reader, int channelId)
public bool InvokeHandler(NetworkMessage netMsg)
internal void HandleFragment(NetworkReader reader, int channelId)
public void RegisterHandler(short msgType, NetworkMessageDelegate handler)
public void UnregisterHandler(short msgType)
internal void SetPlayerController(PlayerController player)
internal void RemovePlayerController(short playerControllerId)
internal bool GetPlayerController(short playerControllerId, PlayerController& playerController)
public void FlushChannels()
public void SetMaxDelay(float seconds)
public bool Send(short msgType, MessageBase msg)
public bool SendUnreliable(short msgType, MessageBase msg)
public bool SendByChannel(short msgType, MessageBase msg, int channelId)
public bool SendBytes(Byte[] bytes, int numBytes, int channelId)
public bool SendWriter(NetworkWriter writer, int channelId)
private void LogSend(Byte[] bytes)
private bool CheckChannel(int channelId)
public void ResetStats()
protected void HandleBytes(Byte[] buffer, int receivedSize, int channelId)
protected void HandleReader(NetworkReader reader, int receivedSize, int channelId)
public void GetStatsOut(Int32& numMsgs, Int32& numBufferedMsgs, Int32& numBytes, Int32& lastBufferedPerSecond)
public void GetStatsIn(Int32& numMsgs, Int32& numBytes)
public string ToString()
internal void AddToVisList(NetworkIdentity uv)
internal void RemoveFromVisList(NetworkIdentity uv, bool isDestroyed)
internal void RemoveObservers()
public void TransportReceive(Byte[] bytes, int numBytes, int channelId)
public void TransportRecieve(Byte[] bytes, int numBytes, int channelId)
public bool TransportSend(Byte[] bytes, int numBytes, int channelId, Byte& error)
internal void AddOwnedObject(NetworkIdentity obj)
internal void RemoveOwnedObject(NetworkIdentity obj)
internal void OnFragment(NetworkMessage netMsg)
}
public UnityEngine.Networking.NetworkCRC : object {
internal NetworkCRC s_Singleton
private Dictionary`2<string, int> m_Scripts
private bool m_ScriptCRCCheck
internal NetworkCRC singleton
public Dictionary`2<string, int> scripts
public bool scriptCRCCheck
internal NetworkCRC get_singleton()
public Dictionary`2<string, int> get_scripts()
public bool get_scriptCRCCheck()
public void set_scriptCRCCheck(bool value)
public void ReinitializeScriptCRCs(Assembly callingAssembly)
public void RegisterBehaviour(string name, int channel)
internal bool Validate(CRCMessageEntry[] scripts, int numChannels)
private bool ValidateInternal(CRCMessageEntry[] remoteScripts, int numChannels)
private void Dump(CRCMessageEntry[] remoteScripts)
}
public UnityEngine.Networking.NetworkDiscovery : MonoBehaviour {
private int k_MaxBroadcastMsgSize
private int m_BroadcastPort
private int m_BroadcastKey
private int m_BroadcastVersion
private int m_BroadcastSubVersion
private int m_BroadcastInterval
private bool m_UseNetworkManager
private string m_BroadcastData
private bool m_ShowGUI
private int m_OffsetX
private int m_OffsetY
private int m_HostId
private bool m_Running
private bool m_IsServer
private bool m_IsClient
private Byte[] m_MsgOutBuffer
private Byte[] m_MsgInBuffer
private HostTopology m_DefaultTopology
private Dictionary`2<string, NetworkBroadcastResult> m_BroadcastsReceived
public int broadcastPort
public int broadcastKey
public int broadcastVersion
public int broadcastSubVersion
public int broadcastInterval
public bool useNetworkManager
public string broadcastData
public bool showGUI
public int offsetX
public int offsetY
public int hostId
public bool running
public bool isServer
public bool isClient
public Dictionary`2<string, NetworkBroadcastResult> broadcastsReceived
public int get_broadcastPort()
public void set_broadcastPort(int value)
public int get_broadcastKey()
public void set_broadcastKey(int value)
public int get_broadcastVersion()
public void set_broadcastVersion(int value)
public int get_broadcastSubVersion()
public void set_broadcastSubVersion(int value)
public int get_broadcastInterval()
public void set_broadcastInterval(int value)
public bool get_useNetworkManager()
public void set_useNetworkManager(bool value)
public string get_broadcastData()
public void set_broadcastData(string value)
public bool get_showGUI()
public void set_showGUI(bool value)
public int get_offsetX()
public void set_offsetX(int value)
public int get_offsetY()
public void set_offsetY(int value)
public int get_hostId()
public void set_hostId(int value)
public bool get_running()
public void set_running(bool value)
public bool get_isServer()
public void set_isServer(bool value)
public bool get_isClient()
public void set_isClient(bool value)
public Dictionary`2<string, NetworkBroadcastResult> get_broadcastsReceived()
private Byte[] StringToBytes(string str)
private string BytesToString(Byte[] bytes)
public bool Initialize()
public bool StartAsClient()
public bool StartAsServer()
public void StopBroadcast()
private void Update()
private void OnDestroy()
public void OnReceivedBroadcast(string fromAddress, string data)
private void OnGUI()
}
public UnityEngine.Networking.NetworkHash128 : ValueType {
public byte i0
public byte i1
public byte i2
public byte i3
public byte i4
public byte i5
public byte i6
public byte i7
public byte i8
public byte i9
public byte i10
public byte i11
public byte i12
public byte i13
public byte i14
public byte i15
public void Reset()
public bool IsValid()
private int HexToNumber(char c)
public NetworkHash128 Parse(string text)
public string ToString()
}
public UnityEngine.Networking.NetworkIdentity : MonoBehaviour {
private NetworkSceneId m_SceneId
private NetworkHash128 m_AssetId
private bool m_ServerOnly
private bool m_LocalPlayerAuthority
private bool m_IsClient
private bool m_IsServer
private bool m_HasAuthority
private NetworkInstanceId m_NetId
private bool m_IsLocalPlayer
private NetworkConnection m_ConnectionToServer
private NetworkConnection m_ConnectionToClient
private short m_PlayerId
private NetworkBehaviour[] m_NetworkBehaviours
private HashSet`1<int> m_ObserverConnections
private List`1<NetworkConnection> m_Observers
private NetworkConnection m_ClientAuthorityOwner
private bool m_Reset
private UInt32 s_NextNetworkId
private NetworkWriter s_UpdateWriter
public ClientAuthorityCallback clientAuthorityCallback
public bool isClient
public bool isServer
public bool hasAuthority
public NetworkInstanceId netId
public NetworkSceneId sceneId
public bool serverOnly
public bool localPlayerAuthority
public NetworkConnection clientAuthorityOwner
public NetworkHash128 assetId
public bool isLocalPlayer
public short playerControllerId
public NetworkConnection connectionToServer
public NetworkConnection connectionToClient
public ReadOnlyCollection`1<NetworkConnection> observers
public bool get_isClient()
public bool get_isServer()
public bool get_hasAuthority()
public NetworkInstanceId get_netId()
public NetworkSceneId get_sceneId()
public bool get_serverOnly()
public void set_serverOnly(bool value)
public bool get_localPlayerAuthority()
public void set_localPlayerAuthority(bool value)
public NetworkConnection get_clientAuthorityOwner()
public NetworkHash128 get_assetId()
internal void SetDynamicAssetId(NetworkHash128 newAssetId)
internal void SetClientOwner(NetworkConnection conn)
internal void ClearClientOwner()
internal void ForceAuthority(bool authority)
public bool get_isLocalPlayer()
public short get_playerControllerId()
public NetworkConnection get_connectionToServer()
public NetworkConnection get_connectionToClient()
public ReadOnlyCollection`1<NetworkConnection> get_observers()
internal NetworkInstanceId GetNextNetworkId()
private void CacheBehaviours()
internal void AddNetworkId(UInt32 id)
internal void SetNetworkInstanceId(NetworkInstanceId newNetId)
public void ForceSceneId(int newSceneId)
internal void UpdateClientServer(bool isClientFlag, bool isServerFlag)
internal void SetNotLocalPlayer()
internal void RemoveObserverInternal(NetworkConnection conn)
private void OnDestroy()
internal void OnStartServer(bool allowNonZeroNetId)
internal void OnStartClient()
internal void OnStartAuthority()
internal void OnStopAuthority()
internal void OnSetLocalVisibility(bool vis)
internal bool OnCheckObserver(NetworkConnection conn)
internal void UNetSerializeAllVars(NetworkWriter writer)
internal void HandleClientAuthority(bool authority)
private bool GetInvokeComponent(int cmdHash, Type invokeClass, NetworkBehaviour& invokeComponent)
internal void HandleSyncEvent(int cmdHash, NetworkReader reader)
internal void HandleSyncList(int cmdHash, NetworkReader reader)
internal void HandleCommand(int cmdHash, NetworkReader reader)
internal void HandleRPC(int cmdHash, NetworkReader reader)
internal void UNetUpdate()
internal void OnUpdateVars(NetworkReader reader, bool initialState)
internal void SetLocalPlayer(short localPlayerControllerId)
internal void SetConnectionToServer(NetworkConnection conn)
internal void SetConnectionToClient(NetworkConnection conn, short newPlayerControllerId)
internal void OnNetworkDestroy()
internal void ClearObservers()
internal void AddObserver(NetworkConnection conn)
internal void RemoveObserver(NetworkConnection conn)
public void RebuildObservers(bool initialize)
public bool RemoveClientAuthority(NetworkConnection conn)
public bool AssignClientAuthority(NetworkConnection conn)
internal void MarkForReset()
internal void Reset()
internal void UNetStaticUpdate()
}
public UnityEngine.Networking.NetworkInstanceId : ValueType {
private UInt32 m_Value
public NetworkInstanceId Invalid
internal NetworkInstanceId Zero
public UInt32 Value
public void .ctor(UInt32 value)
public bool IsEmpty()
public int GetHashCode()
public bool Equals(object obj)
public bool op_Equality(NetworkInstanceId c1, NetworkInstanceId c2)
public bool op_Inequality(NetworkInstanceId c1, NetworkInstanceId c2)
public string ToString()
public UInt32 get_Value()
}
public UnityEngine.Networking.NetworkLobbyManager : NetworkManager {
private bool m_ShowLobbyGUI
private int m_MaxPlayers
private int m_MaxPlayersPerConnection
private int m_MinPlayers
private NetworkLobbyPlayer m_LobbyPlayerPrefab
private GameObject m_GamePlayerPrefab
private string m_LobbyScene
private string m_PlayScene
private List`1<PendingPlayer> m_PendingPlayers
public NetworkLobbyPlayer[] lobbySlots
private LobbyReadyToBeginMessage s_ReadyToBeginMessage
private IntegerMessage s_SceneLoadedMessage
private LobbyReadyToBeginMessage s_LobbyReadyToBeginMessage
public bool showLobbyGUI
public int maxPlayers
public int maxPlayersPerConnection
public int minPlayers
public NetworkLobbyPlayer lobbyPlayerPrefab
public GameObject gamePlayerPrefab
public string lobbyScene
public string playScene
public bool get_showLobbyGUI()
public void set_showLobbyGUI(bool value)
public int get_maxPlayers()
public void set_maxPlayers(int value)
public int get_maxPlayersPerConnection()
public void set_maxPlayersPerConnection(int value)
public int get_minPlayers()
public void set_minPlayers(int value)
public NetworkLobbyPlayer get_lobbyPlayerPrefab()
public void set_lobbyPlayerPrefab(NetworkLobbyPlayer value)
public GameObject get_gamePlayerPrefab()
public void set_gamePlayerPrefab(GameObject value)
public string get_lobbyScene()
public void set_lobbyScene(string value)
public string get_playScene()
public void set_playScene(string value)
private void OnValidate()
private byte FindSlot()
private void SceneLoadedForPlayer(NetworkConnection conn, GameObject lobbyPlayerGameObject)
private int CheckConnectionIsReadyToBegin(NetworkConnection conn)
public void CheckReadyToBegin()
public void ServerReturnToLobby()
private void CallOnClientEnterLobby()
private void CallOnClientExitLobby()
public bool SendReturnToLobby()
public void OnServerConnect(NetworkConnection conn)
public void OnServerDisconnect(NetworkConnection conn)
public void OnServerAddPlayer(NetworkConnection conn, short playerControllerId)
public void OnServerRemovePlayer(NetworkConnection conn, PlayerController player)
public void ServerChangeScene(string sceneName)
public void OnServerSceneChanged(string sceneName)
private void OnServerReadyToBeginMessage(NetworkMessage netMsg)
private void OnServerSceneLoadedMessage(NetworkMessage netMsg)
private void OnServerReturnToLobbyMessage(NetworkMessage netMsg)
public void OnStartServer()
public void OnStartHost()
public void OnStopHost()
public void OnStartClient(NetworkClient lobbyClient)
public void OnClientConnect(NetworkConnection conn)
public void OnClientDisconnect(NetworkConnection conn)
public void OnStopClient()
public void OnClientSceneChanged(NetworkConnection conn)
private void OnClientReadyToBegin(NetworkMessage netMsg)
private void OnClientAddPlayerFailedMessage(NetworkMessage netMsg)
public void OnLobbyStartHost()
public void OnLobbyStopHost()
public void OnLobbyStartServer()
public void OnLobbyServerConnect(NetworkConnection conn)
public void OnLobbyServerDisconnect(NetworkConnection conn)
public void OnLobbyServerSceneChanged(string sceneName)
public GameObject OnLobbyServerCreateLobbyPlayer(NetworkConnection conn, short playerControllerId)
public GameObject OnLobbyServerCreateGamePlayer(NetworkConnection conn, short playerControllerId)
public void OnLobbyServerPlayerRemoved(NetworkConnection conn, short playerControllerId)
public bool OnLobbyServerSceneLoadedForPlayer(GameObject lobbyPlayer, GameObject gamePlayer)
public void OnLobbyServerPlayersReady()
public void OnLobbyClientEnter()
public void OnLobbyClientExit()
public void OnLobbyClientConnect(NetworkConnection conn)
public void OnLobbyClientDisconnect(NetworkConnection conn)
public void OnLobbyStartClient(NetworkClient lobbyClient)
public void OnLobbyStopClient()
public void OnLobbyClientSceneChanged(NetworkConnection conn)
public void OnLobbyClientAddPlayerFailed()
private void OnGUI()
public void TryToAddPlayer()
}
public UnityEngine.Networking.NetworkLobbyPlayer : NetworkBehaviour {
public bool ShowLobbyGUI
private byte m_Slot
private bool m_ReadyToBegin
public byte slot
public bool readyToBegin
public byte get_slot()
public void set_slot(byte value)
public bool get_readyToBegin()
public void set_readyToBegin(bool value)
private void Start()
private void OnEnable()
private void OnDisable()
public void OnStartClient()
public void SendReadyToBeginMessage()
public void SendNotReadyToBeginMessage()
public void SendSceneLoadedMessage()
private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
public void RemovePlayer()
public void OnClientEnterLobby()
public void OnClientExitLobby()
public void OnClientReady(bool readyState)
public bool OnSerialize(NetworkWriter writer, bool initialState)
public void OnDeserialize(NetworkReader reader, bool initialState)
private void OnGUI()
}
public UnityEngine.Networking.NetworkManager : MonoBehaviour {
private int m_NetworkPort
private bool m_ServerBindToIP
private string m_ServerBindAddress
private string m_NetworkAddress
private bool m_DontDestroyOnLoad
private bool m_RunInBackground
private bool m_ScriptCRCCheck
private float m_MaxDelay
private FilterLevel m_LogLevel
private GameObject m_PlayerPrefab
private bool m_AutoCreatePlayer
private PlayerSpawnMethod m_PlayerSpawnMethod
private string m_OfflineScene
private string m_OnlineScene
private List`1<GameObject> m_SpawnPrefabs
private bool m_CustomConfig
private int m_MaxConnections
private ConnectionConfig m_ConnectionConfig
private GlobalConfig m_GlobalConfig
private List`1<QosType> m_Channels
private bool m_UseWebSockets
private bool m_UseSimulator
private int m_SimulatedLatency
private float m_PacketLossPercentage
private int m_MaxBufferedPackets
private bool m_AllowFragmentation
private string m_MatchHost
private int m_MatchPort
public string matchName
public UInt32 matchSize
private NetworkMigrationManager m_MigrationManager
private EndPoint m_EndPoint
private bool m_ClientLoadedScene
public string networkSceneName
public bool isNetworkActive
public NetworkClient client
private List`1<Transform> s_StartPositions
private int s_StartPositionIndex
public MatchInfo matchInfo
public NetworkMatch matchMaker
public List`1<MatchInfoSnapshot> matches
public NetworkManager singleton
private AddPlayerMessage s_AddPlayerMessage
private RemovePlayerMessage s_RemovePlayerMessage
private ErrorMessage s_ErrorMessage
private AsyncOperation s_LoadingSceneAsync
private NetworkConnection s_ClientReadyConnection
private string s_Address
public int networkPort
public bool serverBindToIP
public string serverBindAddress
public string networkAddress
public bool dontDestroyOnLoad
public bool runInBackground
public bool scriptCRCCheck
public bool sendPeerInfo
public float maxDelay
public FilterLevel logLevel
public GameObject playerPrefab
public bool autoCreatePlayer
public PlayerSpawnMethod playerSpawnMethod
public string offlineScene
public string onlineScene
public List`1<GameObject> spawnPrefabs
public List`1<Transform> startPositions
public bool customConfig
public ConnectionConfig connectionConfig
public GlobalConfig globalConfig
public int maxConnections
public List`1<QosType> channels
public EndPoint secureTunnelEndpoint
public bool useWebSockets
public bool useSimulator
public int simulatedLatency
public float packetLossPercentage
public string matchHost
public int matchPort
public bool clientLoadedScene
public NetworkMigrationManager migrationManager
public int numPlayers
public int get_networkPort()
public void set_networkPort(int value)
public bool get_serverBindToIP()
public void set_serverBindToIP(bool value)
public string get_serverBindAddress()
public void set_serverBindAddress(string value)
public string get_networkAddress()
public void set_networkAddress(string value)
public bool get_dontDestroyOnLoad()
public void set_dontDestroyOnLoad(bool value)
public bool get_runInBackground()
public void set_runInBackground(bool value)
public bool get_scriptCRCCheck()
public void set_scriptCRCCheck(bool value)
public bool get_sendPeerInfo()
public void set_sendPeerInfo(bool value)
public float get_maxDelay()
public void set_maxDelay(float value)
public FilterLevel get_logLevel()
public void set_logLevel(FilterLevel value)
public GameObject get_playerPrefab()
public void set_playerPrefab(GameObject value)
public bool get_autoCreatePlayer()
public void set_autoCreatePlayer(bool value)
public PlayerSpawnMethod get_playerSpawnMethod()
public void set_playerSpawnMethod(PlayerSpawnMethod value)
public string get_offlineScene()
public void set_offlineScene(string value)
public string get_onlineScene()
public void set_onlineScene(string value)
public List`1<GameObject> get_spawnPrefabs()
public List`1<Transform> get_startPositions()
public bool get_customConfig()
public void set_customConfig(bool value)
public ConnectionConfig get_connectionConfig()
public GlobalConfig get_globalConfig()
public int get_maxConnections()
public void set_maxConnections(int value)
public List`1<QosType> get_channels()
public EndPoint get_secureTunnelEndpoint()
public void set_secureTunnelEndpoint(EndPoint value)
public bool get_useWebSockets()
public void set_useWebSockets(bool value)
public bool get_useSimulator()
public void set_useSimulator(bool value)
public int get_simulatedLatency()
public void set_simulatedLatency(int value)
public float get_packetLossPercentage()
public void set_packetLossPercentage(float value)
public string get_matchHost()
public void set_matchHost(string value)
public int get_matchPort()
public void set_matchPort(int value)
public bool get_clientLoadedScene()
public void set_clientLoadedScene(bool value)
public NetworkMigrationManager get_migrationManager()
public int get_numPlayers()
private void Awake()
private void InitializeSingleton()
private void OnValidate()
internal void RegisterServerMessages()
public void SetupMigrationManager(NetworkMigrationManager man)
public bool StartServer(ConnectionConfig config, int maxConnections)
public bool StartServer()
public bool StartServer(MatchInfo info)
private bool StartServer(MatchInfo info, ConnectionConfig config, int maxConnections)
internal void RegisterClientMessages(NetworkClient client)
public void UseExternalClient(NetworkClient externalClient)
public NetworkClient StartClient(MatchInfo info, ConnectionConfig config, int hostPort)
public NetworkClient StartClient(MatchInfo matchInfo)
public NetworkClient StartClient()
public NetworkClient StartClient(MatchInfo info, ConnectionConfig config)
public NetworkClient StartHost(ConnectionConfig config, int maxConnections)
public NetworkClient StartHost(MatchInfo info)
public NetworkClient StartHost()
private NetworkClient ConnectLocalClient()
public void StopHost()
public void StopServer()
public void StopClient()
public void ServerChangeScene(string newSceneName)
private void CleanupNetworkIdentities()
internal void ClientChangeScene(string newSceneName, bool forceReload)
private void FinishLoadScene()
internal void UpdateScene()
private void OnDestroy()
public void RegisterStartPosition(Transform start)
public void UnRegisterStartPosition(Transform start)
public bool IsClientConnected()
public void Shutdown()
internal void OnServerConnectInternal(NetworkMessage netMsg)
internal void OnServerDisconnectInternal(NetworkMessage netMsg)
internal void OnServerReadyMessageInternal(NetworkMessage netMsg)
internal void OnServerAddPlayerMessageInternal(NetworkMessage netMsg)
internal void OnServerRemovePlayerMessageInternal(NetworkMessage netMsg)
internal void OnServerErrorInternal(NetworkMessage netMsg)
internal void OnClientConnectInternal(NetworkMessage netMsg)
internal void OnClientDisconnectInternal(NetworkMessage netMsg)
internal void OnClientNotReadyMessageInternal(NetworkMessage netMsg)
internal void OnClientErrorInternal(NetworkMessage netMsg)
internal void OnClientSceneInternal(NetworkMessage netMsg)
public void OnServerConnect(NetworkConnection conn)
public void OnServerDisconnect(NetworkConnection conn)
public void OnServerReady(NetworkConnection conn)
public void OnServerAddPlayer(NetworkConnection conn, short playerControllerId, NetworkReader extraMessageReader)
public void OnServerAddPlayer(NetworkConnection conn, short playerControllerId)
private void OnServerAddPlayerInternal(NetworkConnection conn, short playerControllerId)
public Transform GetStartPosition()
public void OnServerRemovePlayer(NetworkConnection conn, PlayerController player)
public void OnServerError(NetworkConnection conn, int errorCode)
public void OnServerSceneChanged(string sceneName)
public void OnClientConnect(NetworkConnection conn)
public void OnClientDisconnect(NetworkConnection conn)
public void OnClientError(NetworkConnection conn, int errorCode)
public void OnClientNotReady(NetworkConnection conn)
public void OnClientSceneChanged(NetworkConnection conn)
public void StartMatchMaker()
public void StopMatchMaker()
public void SetMatchHost(string newHost, int port, bool https)
public void OnStartHost()
public void OnStartServer()
public void OnStartClient(NetworkClient client)
public void OnStopServer()
public void OnStopClient()
public void OnStopHost()
public void OnMatchCreate(bool success, string extendedInfo, MatchInfo matchInfo)
public void OnMatchList(bool success, string extendedInfo, List`1<MatchInfoSnapshot> matchList)
public void OnMatchJoined(bool success, string extendedInfo, MatchInfo matchInfo)
public void OnDestroyMatch(bool success, string extendedInfo)
public void OnDropConnection(bool success, string extendedInfo)
public void OnSetMatchAttributes(bool success, string extendedInfo)
}
public UnityEngine.Networking.NetworkManagerHUD : MonoBehaviour {
public NetworkManager manager
public bool showGUI
public int offsetX
public int offsetY
private bool m_ShowServer
private void Awake()
private void Update()
private void OnGUI()
}
public UnityEngine.Networking.NetworkMessage : object {
public int MaxMessageSize
public short msgType
public NetworkConnection conn
public NetworkReader reader
public int channelId
public string Dump(Byte[] payload, int sz)
public TMsg ReadMessage()
public void ReadMessage(TMsg msg)
}
public UnityEngine.Networking.NetworkMessageDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(NetworkMessage netMsg)
public IAsyncResult BeginInvoke(NetworkMessage netMsg, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Networking.NetworkMessageHandlers : object {
private Dictionary`2<short, NetworkMessageDelegate> m_MsgHandlers
internal void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler)
public void RegisterHandler(short msgType, NetworkMessageDelegate handler)
public void UnregisterHandler(short msgType)
internal NetworkMessageDelegate GetHandler(short msgType)
internal Dictionary`2<short, NetworkMessageDelegate> GetHandlers()
internal void ClearMessageHandlers()
}
public UnityEngine.Networking.NetworkMigrationManager : MonoBehaviour {
private bool m_HostMigration
private bool m_ShowGUI
private int m_OffsetX
private int m_OffsetY
private NetworkClient m_Client
private bool m_WaitingToBecomeNewHost
private bool m_WaitingReconnectToNewHost
private bool m_DisconnectedFromHost
private bool m_HostWasShutdown
private MatchInfo m_MatchInfo
private int m_OldServerConnectionId
private string m_NewHostAddress
private PeerInfoMessage m_NewHostInfo
private PeerListMessage m_PeerListMessage
private PeerInfoMessage[] m_Peers
private Dictionary`2<int, ConnectionPendingPlayers> m_PendingPlayers
public bool hostMigration
public bool showGUI
public int offsetX
public int offsetY
public NetworkClient client
public bool waitingToBecomeNewHost
public bool waitingReconnectToNewHost
public bool disconnectedFromHost
public bool hostWasShutdown
public MatchInfo matchInfo
public int oldServerConnectionId
public string newHostAddress
public PeerInfoMessage[] peers
public Dictionary`2<int, ConnectionPendingPlayers> pendingPlayers
private void AddPendingPlayer(GameObject obj, int connectionId, NetworkInstanceId netId, short playerControllerId)
private GameObject FindPendingPlayer(int connectionId, NetworkInstanceId netId, short playerControllerId)
private void RemovePendingPlayer(int connectionId)
public bool get_hostMigration()
public void set_hostMigration(bool value)
public bool get_showGUI()
public void set_showGUI(bool value)
public int get_offsetX()
public void set_offsetX(int value)
public int get_offsetY()
public void set_offsetY(int value)
public NetworkClient get_client()
public bool get_waitingToBecomeNewHost()
public void set_waitingToBecomeNewHost(bool value)
public bool get_waitingReconnectToNewHost()
public void set_waitingReconnectToNewHost(bool value)
public bool get_disconnectedFromHost()
public bool get_hostWasShutdown()
public MatchInfo get_matchInfo()
public int get_oldServerConnectionId()
public string get_newHostAddress()
public void set_newHostAddress(string value)
public PeerInfoMessage[] get_peers()
public Dictionary`2<int, ConnectionPendingPlayers> get_pendingPlayers()
private void Start()
public void Reset(int reconnectId)
internal void AssignAuthorityCallback(NetworkConnection conn, NetworkIdentity uv, bool authorityState)
public void Initialize(NetworkClient newClient, MatchInfo newMatchInfo)
public void DisablePlayerObjects()
public void SendPeerInfo()
private void OnPeerClientAuthority(NetworkMessage netMsg)
private void OnPeerInfo(NetworkMessage netMsg)
private void OnServerReconnectPlayerMessage(NetworkMessage netMsg)
public bool ReconnectObjectForConnection(NetworkConnection newConnection, GameObject oldObject, int oldConnectionId)
public bool ReconnectPlayerForConnection(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId)
public bool LostHostOnClient(NetworkConnection conn)
public void LostHostOnHost()
public bool BecomeNewHost(int port)
protected void OnClientDisconnectedFromHost(NetworkConnection conn, SceneChangeOption& sceneChange)
protected void OnServerHostShutdown()
protected void OnServerReconnectPlayer(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId)
protected void OnServerReconnectPlayer(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId, NetworkReader extraMessageReader)
protected void OnServerReconnectObject(NetworkConnection newConnection, GameObject oldObject, int oldConnectionId)
protected void OnPeersUpdated(PeerListMessage peers)
protected void OnAuthorityUpdated(GameObject go, int connectionId, bool authorityState)
public bool FindNewHost(PeerInfoMessage& newHostInfo, Boolean& youAreNewHost)
private void OnGUIHost()
private void OnGUIClient()
private void OnGUI()
}
public UnityEngine.Networking.NetworkProximityChecker : NetworkBehaviour {
public int visRange
public float visUpdateInterval
public CheckMethod checkMethod
public bool forceHidden
private float m_VisUpdateTime
private void Update()
public bool OnCheckObserver(NetworkConnection newObserver)
public bool OnRebuildObservers(HashSet`1<NetworkConnection> observers, bool initial)
public void OnSetLocalVisibility(bool vis)
private void SetVis(GameObject go, bool vis)
}
public UnityEngine.Networking.NetworkReader : object {
private NetBuffer m_buf
private int k_MaxStringLength
private int k_InitialStringBufferSize
private Byte[] s_StringReaderBuffer
private Encoding s_Encoding
public UInt32 Position
public int Length
public void .ctor(NetworkWriter writer)
public void .ctor(Byte[] buffer)
private void Initialize()
public UInt32 get_Position()
public int get_Length()
public void SeekZero()
internal void Replace(Byte[] buffer)
public UInt32 ReadPackedUInt32()
public ulong ReadPackedUInt64()
public NetworkInstanceId ReadNetworkId()
public NetworkSceneId ReadSceneId()
public byte ReadByte()
public sbyte ReadSByte()
public short ReadInt16()
public ushort ReadUInt16()
public int ReadInt32()
public UInt32 ReadUInt32()
public long ReadInt64()
public ulong ReadUInt64()
public decimal ReadDecimal()
public float ReadSingle()
public double ReadDouble()
public string ReadString()
public char ReadChar()
public bool ReadBoolean()
public Byte[] ReadBytes(int count)
public Byte[] ReadBytesAndSize()
public Vector2 ReadVector2()
public Vector3 ReadVector3()
public Vector4 ReadVector4()
public Color ReadColor()
public Color32 ReadColor32()
public Quaternion ReadQuaternion()
public Rect ReadRect()
public Plane ReadPlane()
public Ray ReadRay()
public Matrix4x4 ReadMatrix4x4()
public NetworkHash128 ReadNetworkHash128()
public Transform ReadTransform()
public GameObject ReadGameObject()
public NetworkIdentity ReadNetworkIdentity()
public string ToString()
public TMsg ReadMessage()
}
internal UnityEngine.Networking.NetworkScene : object {
private Dictionary`2<NetworkInstanceId, NetworkIdentity> m_LocalObjects
private Dictionary`2<NetworkHash128, GameObject> s_GuidToPrefab
private Dictionary`2<NetworkHash128, SpawnDelegate> s_SpawnHandlers
private Dictionary`2<NetworkHash128, UnSpawnDelegate> s_UnspawnHandlers
internal Dictionary`2<NetworkInstanceId, NetworkIdentity> localObjects
internal Dictionary`2<NetworkHash128, GameObject> guidToPrefab
internal Dictionary`2<NetworkHash128, SpawnDelegate> spawnHandlers
internal Dictionary`2<NetworkHash128, UnSpawnDelegate> unspawnHandlers
internal Dictionary`2<NetworkInstanceId, NetworkIdentity> get_localObjects()
internal Dictionary`2<NetworkHash128, GameObject> get_guidToPrefab()
internal Dictionary`2<NetworkHash128, SpawnDelegate> get_spawnHandlers()
internal Dictionary`2<NetworkHash128, UnSpawnDelegate> get_unspawnHandlers()
internal void Shutdown()
internal void SetLocalObject(NetworkInstanceId netId, GameObject obj, bool isClient, bool isServer)
internal GameObject FindLocalObject(NetworkInstanceId netId)
internal bool GetNetworkIdentity(NetworkInstanceId netId, NetworkIdentity& uv)
internal bool RemoveLocalObject(NetworkInstanceId netId)
internal bool RemoveLocalObjectAndDestroy(NetworkInstanceId netId)
internal void ClearLocalObjects()
internal void RegisterPrefab(GameObject prefab, NetworkHash128 newAssetId)
internal void RegisterPrefab(GameObject prefab)
internal bool GetPrefab(NetworkHash128 assetId, GameObject& prefab)
internal void ClearSpawners()
public void UnregisterSpawnHandler(NetworkHash128 assetId)
internal void RegisterSpawnHandler(NetworkHash128 assetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler)
internal void UnregisterPrefab(GameObject prefab)
internal void RegisterPrefab(GameObject prefab, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler)
internal bool GetSpawnHandler(NetworkHash128 assetId, SpawnDelegate& handler)
internal bool InvokeUnSpawnHandler(NetworkHash128 assetId, GameObject obj)
internal void DestroyAllClientObjects()
internal void DumpAllClientObjects()
}
public UnityEngine.Networking.NetworkSceneId : ValueType {
private UInt32 m_Value
public UInt32 Value
public void .ctor(UInt32 value)
public bool IsEmpty()
public int GetHashCode()
public bool Equals(object obj)
public bool op_Equality(NetworkSceneId c1, NetworkSceneId c2)
public bool op_Inequality(NetworkSceneId c1, NetworkSceneId c2)
public string ToString()
public UInt32 get_Value()
}
public UnityEngine.Networking.NetworkServer : object {
private bool s_Active
private NetworkServer modreq(System.Runtime.CompilerServices.IsVolatile) s_Instance
private object s_Sync
private bool m_DontListen
private bool m_LocalClientActive
private List`1<NetworkConnection> m_LocalConnectionsFakeList
private ULocalConnectionToClient m_LocalConnection
private NetworkScene m_NetworkScene
private HashSet`1<int> m_ExternalConnections
private ServerSimpleWrapper m_SimpleServerSimple
private float m_MaxDelay
private HashSet`1<NetworkInstanceId> m_RemoveList
private int m_RemoveListCount
private int k_RemoveListInterval
internal ushort maxPacketSize
private RemovePlayerMessage s_RemovePlayerMessage
private NetworkMessageDelegate <>f__mg$cache0
private NetworkMessageDelegate <>f__mg$cache1
private NetworkMessageDelegate <>f__mg$cache2
private NetworkMessageDelegate <>f__mg$cache3
private NetworkMessageDelegate <>f__mg$cache4
private NetworkMessageDelegate <>f__mg$cache5
private NetworkMessageDelegate <>f__mg$cache6
private NetworkMessageDelegate <>f__mg$cache7
private NetworkMessageDelegate <>f__mg$cache8
public List`1<NetworkConnection> localConnections
public int listenPort
public int serverHostId
public ReadOnlyCollection`1<NetworkConnection> connections
public Dictionary`2<short, NetworkMessageDelegate> handlers
public HostTopology hostTopology
public Dictionary`2<NetworkInstanceId, NetworkIdentity> objects
public bool sendPeerInfo
public bool dontListen
public bool useWebSockets
internal NetworkServer instance
public bool active
public bool localClientActive
public int numChannels
public float maxDelay
public Type networkConnectionClass
public List`1<NetworkConnection> get_localConnections()
public int get_listenPort()
public int get_serverHostId()
public ReadOnlyCollection`1<NetworkConnection> get_connections()
public Dictionary`2<short, NetworkMessageDelegate> get_handlers()
public HostTopology get_hostTopology()
public Dictionary`2<NetworkInstanceId, NetworkIdentity> get_objects()
public bool get_sendPeerInfo()
public void set_sendPeerInfo(bool value)
public bool get_dontListen()
public void set_dontListen(bool value)
public bool get_useWebSockets()
public void set_useWebSockets(bool value)
internal NetworkServer get_instance()
public bool get_active()
public bool get_localClientActive()
public int get_numChannels()
public float get_maxDelay()
public void set_maxDelay(float value)
public Type get_networkConnectionClass()
public void SetNetworkConnectionClass()
public bool Configure(ConnectionConfig config, int maxConnections)
public bool Configure(HostTopology topology)
public void Reset()
public void Shutdown()
public bool Listen(MatchInfo matchInfo, int listenPort)
internal void RegisterMessageHandlers()
public void ListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId)
private void InternalListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId)
public bool Listen(int serverPort)
public bool Listen(string ipAddress, int serverPort)
internal bool InternalListen(string ipAddress, int serverPort)
public NetworkClient BecomeHost(NetworkClient oldClient, int port, MatchInfo matchInfo, int oldConnectionId, PeerInfoMessage[] peers)
internal NetworkClient BecomeHostInternal(NetworkClient oldClient, int port, MatchInfo matchInfo, int oldConnectionId, PeerInfoMessage[] peers)
private void InternalSetMaxDelay(float seconds)
internal int AddLocalClient(LocalClient localClient)
internal void RemoveLocalClient(NetworkConnection localClientConnection)
internal void SetLocalObjectOnServer(NetworkInstanceId netId, GameObject obj)
internal void ActivateLocalClientScene()
public bool SendToAll(short msgType, MessageBase msg)
private bool SendToObservers(GameObject contextObj, short msgType, MessageBase msg)
public bool SendToReady(GameObject contextObj, short msgType, MessageBase msg)
public void SendWriterToReady(GameObject contextObj, NetworkWriter writer, int channelId)
public void SendBytesToReady(GameObject contextObj, Byte[] buffer, int numBytes, int channelId)
public void SendBytesToPlayer(GameObject player, Byte[] buffer, int numBytes, int channelId)
public bool SendUnreliableToAll(short msgType, MessageBase msg)
public bool SendUnreliableToReady(GameObject contextObj, short msgType, MessageBase msg)
public bool SendByChannelToAll(short msgType, MessageBase msg, int channelId)
public bool SendByChannelToReady(GameObject contextObj, short msgType, MessageBase msg, int channelId)
public void DisconnectAll()
internal void InternalDisconnectAll()
internal void Update()
private void UpdateServerObjects()
private void CheckForNullObjects()
internal void InternalUpdate()
private void OnConnected(NetworkConnection conn)
private void OnDisconnected(NetworkConnection conn)
private void OnData(NetworkConnection conn, int receivedSize, int channelId)
private void GenerateConnectError(int error)
private void GenerateDataError(NetworkConnection conn, int error)
private void GenerateDisconnectError(NetworkConnection conn, int error)
private void GenerateError(NetworkConnection conn, int error)
public void RegisterHandler(short msgType, NetworkMessageDelegate handler)
public void UnregisterHandler(short msgType)
public void ClearHandlers()
public void ClearSpawners()
public void GetStatsOut(Int32& numMsgs, Int32& numBufferedMsgs, Int32& numBytes, Int32& lastBufferedPerSecond)
public void GetStatsIn(Int32& numMsgs, Int32& numBytes)
public void SendToClientOfPlayer(GameObject player, short msgType, MessageBase msg)
public void SendToClient(int connectionId, short msgType, MessageBase msg)
public bool ReplacePlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId, NetworkHash128 assetId)
public bool ReplacePlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId)
public bool AddPlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId, NetworkHash128 assetId)
public bool AddPlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId)
internal bool InternalAddPlayerForConnection(NetworkConnection conn, GameObject playerGameObject, short playerControllerId)
private bool CheckPlayerControllerIdForConnection(NetworkConnection conn, short playerControllerId)
private bool SetupLocalPlayerForConnection(NetworkConnection conn, NetworkIdentity uv, PlayerController newPlayerController)
private void FinishPlayerForConnection(NetworkConnection conn, NetworkIdentity uv, GameObject playerGameObject)
internal bool InternalReplacePlayerForConnection(NetworkConnection conn, GameObject playerGameObject, short playerControllerId)
private bool GetNetworkIdentity(GameObject go, NetworkIdentity& view)
public void SetClientReady(NetworkConnection conn)
internal void SetClientReadyInternal(NetworkConnection conn)
internal void ShowForConnection(NetworkIdentity uv, NetworkConnection conn)
internal void HideForConnection(NetworkIdentity uv, NetworkConnection conn)
public void SetAllClientsNotReady()
public void SetClientNotReady(NetworkConnection conn)
internal void InternalSetClientNotReady(NetworkConnection conn)
private void OnClientReadyMessage(NetworkMessage netMsg)
private void OnRemovePlayerMessage(NetworkMessage netMsg)
private void OnCommandMessage(NetworkMessage netMsg)
internal void SpawnObject(GameObject obj)
internal void SendSpawnMessage(NetworkIdentity uv, NetworkConnection conn)
public void DestroyPlayersForConnection(NetworkConnection conn)
private void UnSpawnObject(GameObject obj)
private void UnSpawnObject(NetworkIdentity uv)
private void DestroyObject(GameObject obj)
private void DestroyObject(NetworkIdentity uv, bool destroyServerObject)
public void ClearLocalObjects()
public void Spawn(GameObject obj)
private bool CheckForPrefab(GameObject obj)
private bool VerifyCanSpawn(GameObject obj)
public bool SpawnWithClientAuthority(GameObject obj, GameObject player)
public bool SpawnWithClientAuthority(GameObject obj, NetworkConnection conn)
public bool SpawnWithClientAuthority(GameObject obj, NetworkHash128 assetId, NetworkConnection conn)
public void Spawn(GameObject obj, NetworkHash128 assetId)
public void Destroy(GameObject obj)
public void UnSpawn(GameObject obj)
internal bool InvokeBytes(ULocalConnectionToServer conn, Byte[] buffer, int numBytes, int channelId)
internal bool InvokeHandlerOnServer(ULocalConnectionToServer conn, short msgType, MessageBase msg, int channelId)
public GameObject FindLocalObject(NetworkInstanceId netId)
public Dictionary`2<short, PacketStat> GetConnectionStats()
public void ResetConnectionStats()
public bool AddExternalConnection(NetworkConnection conn)
private bool AddExternalConnectionInternal(NetworkConnection conn)
public void RemoveExternalConnection(int connectionId)
private bool RemoveExternalConnectionInternal(int connectionId)
public bool SpawnObjects()
private void SendCrc(NetworkConnection targetConnection)
public void SendNetworkInfo(NetworkConnection targetConnection)
}
public UnityEngine.Networking.NetworkServerSimple : object {
private bool m_Initialized
private int m_ListenPort
private int m_ServerHostId
private int m_RelaySlotId
private bool m_UseWebSockets
private Byte[] m_MsgBuffer
private NetworkReader m_MsgReader
private Type m_NetworkConnectionClass
private HostTopology m_HostTopology
private List`1<NetworkConnection> m_Connections
private ReadOnlyCollection`1<NetworkConnection> m_ConnectionsReadOnly
private NetworkMessageHandlers m_MessageHandlers
public int listenPort
public int serverHostId
public HostTopology hostTopology
public bool useWebSockets
public ReadOnlyCollection`1<NetworkConnection> connections
public Dictionary`2<short, NetworkMessageDelegate> handlers
public Byte[] messageBuffer
public NetworkReader messageReader
public Type networkConnectionClass
public int get_listenPort()
public void set_listenPort(int value)
public int get_serverHostId()
public void set_serverHostId(int value)
public HostTopology get_hostTopology()
public bool get_useWebSockets()
public void set_useWebSockets(bool value)
public ReadOnlyCollection`1<NetworkConnection> get_connections()
public Dictionary`2<short, NetworkMessageDelegate> get_handlers()
public Byte[] get_messageBuffer()
public NetworkReader get_messageReader()
public Type get_networkConnectionClass()
public void SetNetworkConnectionClass()
public void Initialize()
public bool Configure(ConnectionConfig config, int maxConnections)
public bool Configure(HostTopology topology)
public bool Listen(string ipAddress, int serverListenPort)
public bool Listen(int serverListenPort)
public bool Listen(int serverListenPort, HostTopology topology)
public void ListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId)
public void Stop()
internal void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler)
public void RegisterHandler(short msgType, NetworkMessageDelegate handler)
public void UnregisterHandler(short msgType)
public void ClearHandlers()
public void UpdateConnections()
public void Update()
public NetworkConnection FindConnection(int connectionId)
public bool SetConnectionAtIndex(NetworkConnection conn)
public bool RemoveConnectionAtIndex(int connectionId)
private void HandleConnect(int connectionId, byte error)
private void HandleDisconnect(int connectionId, byte error)
private void HandleData(int connectionId, int channelId, int receivedSize, byte error)
public void SendBytesTo(int connectionId, Byte[] bytes, int numBytes, int channelId)
public void SendWriterTo(int connectionId, NetworkWriter writer, int channelId)
public void Disconnect(int connectionId)
public void DisconnectAllConnections()
public void OnConnectError(int connectionId, byte error)
public void OnDataError(NetworkConnection conn, byte error)
public void OnDisconnectError(NetworkConnection conn, byte error)
public void OnConnected(NetworkConnection conn)
public void OnDisconnected(NetworkConnection conn)
public void OnData(NetworkConnection conn, int receivedSize, int channelId)
}
public UnityEngine.Networking.NetworkSettingsAttribute : Attribute {
public int channel
public float sendInterval
}
public UnityEngine.Networking.NetworkStartPosition : MonoBehaviour {
public void Awake()
public void OnDestroy()
}
public UnityEngine.Networking.NetworkSystem.AddPlayerMessage : MessageBase {
public short playerControllerId
public int msgSize
public Byte[] msgData
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.AnimationMessage : MessageBase {
public NetworkInstanceId netId
public int stateHash
public float normalizedTime
public Byte[] parameters
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.AnimationParametersMessage : MessageBase {
public NetworkInstanceId netId
public Byte[] parameters
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.AnimationTriggerMessage : MessageBase {
public NetworkInstanceId netId
public int hash
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.ClientAuthorityMessage : MessageBase {
public NetworkInstanceId netId
public bool authority
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.CRCMessage : MessageBase {
public CRCMessageEntry[] scripts
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.CRCMessageEntry : ValueType {
public string name
public byte channel
}
public UnityEngine.Networking.NetworkSystem.EmptyMessage : MessageBase {
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
public UnityEngine.Networking.NetworkSystem.ErrorMessage : MessageBase {
public int errorCode
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
public UnityEngine.Networking.NetworkSystem.IntegerMessage : MessageBase {
public int value
public void .ctor(int v)
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.LobbyReadyToBeginMessage : MessageBase {
public byte slotId
public bool readyState
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.ObjectDestroyMessage : MessageBase {
public NetworkInstanceId netId
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.ObjectSpawnFinishedMessage : MessageBase {
public UInt32 state
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.ObjectSpawnMessage : MessageBase {
public NetworkInstanceId netId
public NetworkHash128 assetId
public Vector3 position
public Byte[] payload
public Quaternion rotation
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.ObjectSpawnSceneMessage : MessageBase {
public NetworkInstanceId netId
public NetworkSceneId sceneId
public Vector3 position
public Byte[] payload
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.OverrideTransformMessage : MessageBase {
public NetworkInstanceId netId
public Byte[] payload
public bool teleport
public int time
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
internal UnityEngine.Networking.NetworkSystem.OwnerMessage : MessageBase {
public NetworkInstanceId netId
public short playerControllerId
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
public UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage : MessageBase {
public int connectionId
public NetworkInstanceId netId
public bool authorityState
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
public UnityEngine.Networking.NetworkSystem.PeerInfoMessage : MessageBase {
public int connectionId
public string address
public int port
public bool isHost
public bool isYou
public PeerInfoPlayer[] playerIds
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
public string ToString()
}
public UnityEngine.Networking.NetworkSystem.PeerInfoPlayer : ValueType {
public NetworkInstanceId netId
public short playerControllerId
}
public UnityEngine.Networking.NetworkSystem.PeerListMessage : MessageBase {
public PeerInfoMessage[] peers
public int oldServerConnectionId
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
public UnityEngine.Networking.NetworkSystem.ReconnectMessage : MessageBase {
public int oldConnectionId
public short playerControllerId
public NetworkInstanceId netId
public int msgSize
public Byte[] msgData
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
public UnityEngine.Networking.NetworkSystem.RemovePlayerMessage : MessageBase {
public short playerControllerId
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
public UnityEngine.Networking.NetworkSystem.StringMessage : MessageBase {
public string value
public void .ctor(string v)
public void Deserialize(NetworkReader reader)
public void Serialize(NetworkWriter writer)
}
public UnityEngine.Networking.NetworkTransform : NetworkBehaviour {
private TransformSyncMode m_TransformSyncMode
private float m_SendInterval
private AxisSyncMode m_SyncRotationAxis
private CompressionSyncMode m_RotationSyncCompression
private bool m_SyncSpin
private float m_MovementTheshold
private float m_VelocityThreshold
private float m_SnapThreshold
private float m_InterpolateRotation
private float m_InterpolateMovement
private ClientMoveCallback3D m_ClientMoveCallback3D
private ClientMoveCallback2D m_ClientMoveCallback2D
private Rigidbody m_RigidBody3D
private Rigidbody2D m_RigidBody2D
private CharacterController m_CharacterController
private bool m_Grounded
private Vector3 m_TargetSyncPosition
private Vector3 m_TargetSyncVelocity
private Vector3 m_FixedPosDiff
private Quaternion m_TargetSyncRotation3D
private Vector3 m_TargetSyncAngularVelocity3D
private float m_TargetSyncRotation2D
private float m_TargetSyncAngularVelocity2D
private float m_LastClientSyncTime
private float m_LastClientSendTime
private Vector3 m_PrevPosition
private Quaternion m_PrevRotation
private float m_PrevRotation2D
private float m_PrevVelocity
private float k_LocalMovementThreshold
private float k_LocalRotationThreshold
private float k_LocalVelocityThreshold
private float k_MoveAheadRatio
private NetworkWriter m_LocalTransformWriter
public TransformSyncMode transformSyncMode
public float sendInterval
public AxisSyncMode syncRotationAxis
public CompressionSyncMode rotationSyncCompression
public bool syncSpin
public float movementTheshold
public float velocityThreshold
public float snapThreshold
public float interpolateRotation
public float interpolateMovement
public ClientMoveCallback3D clientMoveCallback3D
public ClientMoveCallback2D clientMoveCallback2D
public CharacterController characterContoller
public Rigidbody rigidbody3D
public Rigidbody2D rigidbody2D
public float lastSyncTime
public Vector3 targetSyncPosition
public Vector3 targetSyncVelocity
public Quaternion targetSyncRotation3D
public float targetSyncRotation2D
public bool grounded
public TransformSyncMode get_transformSyncMode()
public void set_transformSyncMode(TransformSyncMode value)
public float get_sendInterval()
public void set_sendInterval(float value)
public AxisSyncMode get_syncRotationAxis()
public void set_syncRotationAxis(AxisSyncMode value)
public CompressionSyncMode get_rotationSyncCompression()
public void set_rotationSyncCompression(CompressionSyncMode value)
public bool get_syncSpin()
public void set_syncSpin(bool value)
public float get_movementTheshold()
public void set_movementTheshold(float value)
public float get_velocityThreshold()
public void set_velocityThreshold(float value)
public float get_snapThreshold()
public void set_snapThreshold(float value)
public float get_interpolateRotation()
public void set_interpolateRotation(float value)
public float get_interpolateMovement()
public void set_interpolateMovement(float value)
public ClientMoveCallback3D get_clientMoveCallback3D()
public void set_clientMoveCallback3D(ClientMoveCallback3D value)
public ClientMoveCallback2D get_clientMoveCallback2D()
public void set_clientMoveCallback2D(ClientMoveCallback2D value)
public CharacterController get_characterContoller()
public Rigidbody get_rigidbody3D()
public Rigidbody2D get_rigidbody2D()
public float get_lastSyncTime()
public Vector3 get_targetSyncPosition()
public Vector3 get_targetSyncVelocity()
public Quaternion get_targetSyncRotation3D()
public float get_targetSyncRotation2D()
public bool get_grounded()
public void set_grounded(bool value)
private void OnValidate()
private void Awake()
public void OnStartServer()
public bool OnSerialize(NetworkWriter writer, bool initialState)
private void SerializeModeTransform(NetworkWriter writer)
private void VerifySerializeComponentExists()
private void SerializeMode3D(NetworkWriter writer)
private void SerializeModeCharacterController(NetworkWriter writer)
private void SerializeMode2D(NetworkWriter writer)
public void OnDeserialize(NetworkReader reader, bool initialState)
private void UnserializeModeTransform(NetworkReader reader, bool initialState)
private void UnserializeMode3D(NetworkReader reader, bool initialState)
private void UnserializeMode2D(NetworkReader reader, bool initialState)
private void UnserializeModeCharacterController(NetworkReader reader, bool initialState)
private void FixedUpdate()
private void FixedUpdateServer()
private bool CheckVelocityChanged()
private void FixedUpdateClient()
private void InterpolateTransformMode3D()
private void InterpolateTransformModeCharacterController()
private void InterpolateTransformMode2D()
private void Update()
private bool HasMoved()
private void SendTransform()
public void HandleTransform(NetworkMessage netMsg)
private void WriteAngle(NetworkWriter writer, float angle, CompressionSyncMode compression)
private float ReadAngle(NetworkReader reader, CompressionSyncMode compression)
public void SerializeVelocity3D(NetworkWriter writer, Vector3 velocity, CompressionSyncMode compression)
public void SerializeVelocity2D(NetworkWriter writer, Vector2 velocity, CompressionSyncMode compression)
public void SerializeRotation3D(NetworkWriter writer, Quaternion rot, AxisSyncMode mode, CompressionSyncMode compression)
public void SerializeRotation2D(NetworkWriter writer, float rot, CompressionSyncMode compression)
public void SerializeSpin3D(NetworkWriter writer, Vector3 angularVelocity, AxisSyncMode mode, CompressionSyncMode compression)
public void SerializeSpin2D(NetworkWriter writer, float angularVelocity, CompressionSyncMode compression)
public Vector3 UnserializeVelocity3D(NetworkReader reader, CompressionSyncMode compression)
public Vector3 UnserializeVelocity2D(NetworkReader reader, CompressionSyncMode compression)
public Quaternion UnserializeRotation3D(NetworkReader reader, AxisSyncMode mode, CompressionSyncMode compression)
public float UnserializeRotation2D(NetworkReader reader, CompressionSyncMode compression)
public Vector3 UnserializeSpin3D(NetworkReader reader, AxisSyncMode mode, CompressionSyncMode compression)
public float UnserializeSpin2D(NetworkReader reader, CompressionSyncMode compression)
public int GetNetworkChannel()
public float GetNetworkSendInterval()
public void OnStartAuthority()
}
public UnityEngine.Networking.NetworkTransformChild : NetworkBehaviour {
private Transform m_Target
private UInt32 m_ChildIndex
private NetworkTransform m_Root
private float m_SendInterval
private AxisSyncMode m_SyncRotationAxis
private CompressionSyncMode m_RotationSyncCompression
private float m_MovementThreshold
private float m_InterpolateRotation
private float m_InterpolateMovement
private ClientMoveCallback3D m_ClientMoveCallback3D
private Vector3 m_TargetSyncPosition
private Quaternion m_TargetSyncRotation3D
private float m_LastClientSyncTime
private float m_LastClientSendTime
private Vector3 m_PrevPosition
private Quaternion m_PrevRotation
private float k_LocalMovementThreshold
private float k_LocalRotationThreshold
private NetworkWriter m_LocalTransformWriter
public Transform target
public UInt32 childIndex
public float sendInterval
public AxisSyncMode syncRotationAxis
public CompressionSyncMode rotationSyncCompression
public float movementThreshold
public float interpolateRotation
public float interpolateMovement
public ClientMoveCallback3D clientMoveCallback3D
public float lastSyncTime
public Vector3 targetSyncPosition
public Quaternion targetSyncRotation3D
public Transform get_target()
public void set_target(Transform value)
public UInt32 get_childIndex()
public float get_sendInterval()
public void set_sendInterval(float value)
public AxisSyncMode get_syncRotationAxis()
public void set_syncRotationAxis(AxisSyncMode value)
public CompressionSyncMode get_rotationSyncCompression()
public void set_rotationSyncCompression(CompressionSyncMode value)
public float get_movementThreshold()
public void set_movementThreshold(float value)
public float get_interpolateRotation()
public void set_interpolateRotation(float value)
public float get_interpolateMovement()
public void set_interpolateMovement(float value)
public ClientMoveCallback3D get_clientMoveCallback3D()
public void set_clientMoveCallback3D(ClientMoveCallback3D value)
public float get_lastSyncTime()
public Vector3 get_targetSyncPosition()
public Quaternion get_targetSyncRotation3D()
private void OnValidate()
private void Awake()
public bool OnSerialize(NetworkWriter writer, bool initialState)
private void SerializeModeTransform(NetworkWriter writer)
public void OnDeserialize(NetworkReader reader, bool initialState)
private void UnserializeModeTransform(NetworkReader reader, bool initialState)
private void FixedUpdate()
private void FixedUpdateServer()
private void FixedUpdateClient()
private void Update()
private bool HasMoved()
private void SendTransform()
internal void HandleChildTransform(NetworkMessage netMsg)
public int GetNetworkChannel()
public float GetNetworkSendInterval()
}
public UnityEngine.Networking.NetworkTransformVisualizer : NetworkBehaviour {
private GameObject m_VisualizerPrefab
private NetworkTransform m_NetworkTransform
private GameObject m_Visualizer
private Material s_LineMaterial
public GameObject visualizerPrefab
public GameObject get_visualizerPrefab()
public void set_visualizerPrefab(GameObject value)
public void OnStartClient()
public void OnStartLocalPlayer()
private void OnDestroy()
private void FixedUpdate()
private void OnRenderObject()
private void DrawRotationInterpolation()
private void CreateLineMaterial()
}
public UnityEngine.Networking.NetworkWriter : object {
private int k_MaxStringLength
private NetBuffer m_Buffer
private Encoding s_Encoding
private Byte[] s_StringWriteBuffer
private UIntFloat s_FloatConverter
public short Position
public void .ctor(Byte[] buffer)
public short get_Position()
public Byte[] ToArray()
public Byte[] AsArray()
internal ArraySegment`1<byte> AsArraySegment()
public void WritePackedUInt32(UInt32 value)
public void WritePackedUInt64(ulong value)
public void Write(NetworkInstanceId value)
public void Write(NetworkSceneId value)
public void Write(char value)
public void Write(byte value)
public void Write(sbyte value)
public void Write(short value)
public void Write(ushort value)
public void Write(int value)
public void Write(UInt32 value)
public void Write(long value)
public void Write(ulong value)
public void Write(float value)
public void Write(double value)
public void Write(decimal value)
public void Write(string value)
public void Write(bool value)
public void Write(Byte[] buffer, int count)
public void Write(Byte[] buffer, int offset, int count)
public void WriteBytesAndSize(Byte[] buffer, int count)
public void WriteBytesFull(Byte[] buffer)
public void Write(Vector2 value)
public void Write(Vector3 value)
public void Write(Vector4 value)
public void Write(Color value)
public void Write(Color32 value)
public void Write(Quaternion value)
public void Write(Rect value)
public void Write(Plane value)
public void Write(Ray value)
public void Write(Matrix4x4 value)
public void Write(NetworkHash128 value)
public void Write(NetworkIdentity value)
public void Write(Transform value)
public void Write(GameObject value)
public void Write(MessageBase msg)
public void SeekZero()
public void StartMessage(short msgType)
public void FinishMessage()
}
public UnityEngine.Networking.PlayerController : object {
internal short kMaxLocalPlayers
public short playerControllerId
public NetworkIdentity unetView
public GameObject gameObject
public int MaxPlayersPerClient
public bool IsValid
internal void .ctor(GameObject go, short playerControllerId)
public bool get_IsValid()
public string ToString()
}
public UnityEngine.Networking.PlayerSpawnMethod : Enum {
public int value__
public PlayerSpawnMethod Random
public PlayerSpawnMethod RoundRobin
}
public UnityEngine.Networking.SpawnDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public GameObject Invoke(Vector3 position, NetworkHash128 assetId)
public IAsyncResult BeginInvoke(Vector3 position, NetworkHash128 assetId, AsyncCallback callback, object object)
public GameObject EndInvoke(IAsyncResult result)
}
public UnityEngine.Networking.SyncEventAttribute : Attribute {
public int channel
}
public UnityEngine.Networking.SyncList`1 : object {
private List`1<T> m_Objects
private NetworkBehaviour m_Behaviour
private int m_CmdHash
private SyncListChanged<T> m_Callback
public int Count
public bool IsReadOnly
public SyncListChanged<T> Callback
public T Item
public int get_Count()
public bool get_IsReadOnly()
public SyncListChanged<T> get_Callback()
public void set_Callback(SyncListChanged<T> value)
protected void SerializeItem(NetworkWriter writer, T item)
protected T DeserializeItem(NetworkReader reader)
public void InitializeBehaviour(NetworkBehaviour beh, int cmdHash)
private void SendMsg(Operation<T> op, int itemIndex, T item)
private void SendMsg(Operation<T> op, int itemIndex)
public void HandleMsg(NetworkReader reader)
internal void AddInternal(T item)
public void Add(T item)
public void Clear()
public bool Contains(T item)
public void CopyTo(T[] array, int index)
public int IndexOf(T item)
public void Insert(int index, T item)
public bool Remove(T item)
public void RemoveAt(int index)
public void Dirty(int index)
public T get_Item(int i)
public void set_Item(int i, T value)
public IEnumerator`1<T> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public UnityEngine.Networking.SyncListBool : SyncList`1<bool> {
protected void SerializeItem(NetworkWriter writer, bool item)
protected bool DeserializeItem(NetworkReader reader)
public SyncListBool ReadInstance(NetworkReader reader)
public void ReadReference(NetworkReader reader, SyncListBool syncList)
public void WriteInstance(NetworkWriter writer, SyncListBool items)
}
public UnityEngine.Networking.SyncListFloat : SyncList`1<float> {
protected void SerializeItem(NetworkWriter writer, float item)
protected float DeserializeItem(NetworkReader reader)
public SyncListFloat ReadInstance(NetworkReader reader)
public void ReadReference(NetworkReader reader, SyncListFloat syncList)
public void WriteInstance(NetworkWriter writer, SyncListFloat items)
}
public UnityEngine.Networking.SyncListInt : SyncList`1<int> {
protected void SerializeItem(NetworkWriter writer, int item)
protected int DeserializeItem(NetworkReader reader)
public SyncListInt ReadInstance(NetworkReader reader)
public void ReadReference(NetworkReader reader, SyncListInt syncList)
public void WriteInstance(NetworkWriter writer, SyncListInt items)
}
public UnityEngine.Networking.SyncListString : SyncList`1<string> {
protected void SerializeItem(NetworkWriter writer, string item)
protected string DeserializeItem(NetworkReader reader)
public SyncListString ReadInstance(NetworkReader reader)
public void ReadReference(NetworkReader reader, SyncListString syncList)
public void WriteInstance(NetworkWriter writer, SyncListString items)
}
public UnityEngine.Networking.SyncListStruct`1 : SyncList`1<T> {
public ushort Count
public void AddInternal(T item)
protected void SerializeItem(NetworkWriter writer, T item)
protected T DeserializeItem(NetworkReader reader)
public T GetItem(int i)
public ushort get_Count()
}
public UnityEngine.Networking.SyncListUInt : SyncList`1<UInt32> {
protected void SerializeItem(NetworkWriter writer, UInt32 item)
protected UInt32 DeserializeItem(NetworkReader reader)
public SyncListUInt ReadInstance(NetworkReader reader)
public void ReadReference(NetworkReader reader, SyncListUInt syncList)
public void WriteInstance(NetworkWriter writer, SyncListUInt items)
}
public UnityEngine.Networking.SyncVarAttribute : Attribute {
public string hook
}
public UnityEngine.Networking.TargetRpcAttribute : Attribute {
public int channel
}
internal UnityEngine.Networking.UIntDecimal : ValueType {
public ulong longValue1
public ulong longValue2
public decimal decimalValue
}
internal UnityEngine.Networking.UIntFloat : ValueType {
public float floatValue
public UInt32 intValue
public double doubleValue
public ulong longValue
}
internal UnityEngine.Networking.ULocalConnectionToClient : NetworkConnection {
private LocalClient m_LocalClient
public LocalClient localClient
public void .ctor(LocalClient localClient)
public LocalClient get_localClient()
public bool Send(short msgType, MessageBase msg)
public bool SendUnreliable(short msgType, MessageBase msg)
public bool SendByChannel(short msgType, MessageBase msg, int channelId)
public bool SendBytes(Byte[] bytes, int numBytes, int channelId)
public bool SendWriter(NetworkWriter writer, int channelId)
public void GetStatsOut(Int32& numMsgs, Int32& numBufferedMsgs, Int32& numBytes, Int32& lastBufferedPerSecond)
public void GetStatsIn(Int32& numMsgs, Int32& numBytes)
}
internal UnityEngine.Networking.ULocalConnectionToServer : NetworkConnection {
private NetworkServer m_LocalServer
public void .ctor(NetworkServer localServer)
public bool Send(short msgType, MessageBase msg)
public bool SendUnreliable(short msgType, MessageBase msg)
public bool SendByChannel(short msgType, MessageBase msg, int channelId)
public bool SendBytes(Byte[] bytes, int numBytes, int channelId)
public bool SendWriter(NetworkWriter writer, int channelId)
public void GetStatsOut(Int32& numMsgs, Int32& numBufferedMsgs, Int32& numBytes, Int32& lastBufferedPerSecond)
public void GetStatsIn(Int32& numMsgs, Int32& numBytes)
}
public UnityEngine.Networking.UnSpawnDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(GameObject spawned)
public IAsyncResult BeginInvoke(GameObject spawned, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.Networking.Version : Enum {
public int value__
public Version Current
}
