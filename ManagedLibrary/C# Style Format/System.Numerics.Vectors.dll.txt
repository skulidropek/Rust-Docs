internal System.MathF : object {
public float PI
public float Abs(float x)
public float Acos(float x)
public float Cos(float x)
public float IEEERemainder(float x, float y)
public float Sin(float x)
public float Sqrt(float x)
public float Tan(float x)
}
internal System.Numerics.ConstantHelper : object {
public byte GetByteWithAllBitsSet()
public sbyte GetSByteWithAllBitsSet()
public ushort GetUInt16WithAllBitsSet()
public short GetInt16WithAllBitsSet()
public UInt32 GetUInt32WithAllBitsSet()
public int GetInt32WithAllBitsSet()
public ulong GetUInt64WithAllBitsSet()
public long GetInt64WithAllBitsSet()
public float GetSingleWithAllBitsSet()
public double GetDoubleWithAllBitsSet()
}
internal System.Numerics.Hashing.HashHelpers : object {
public int RandomSeed
public int Combine(int h1, int h2)
}
public System.Numerics.Matrix3x2 : ValueType {
public float M11
public float M12
public float M21
public float M22
public float M31
public float M32
private Matrix3x2 _identity
public Matrix3x2 Identity
public bool IsIdentity
public Vector2 Translation
public Matrix3x2 get_Identity()
public bool get_IsIdentity()
public Vector2 get_Translation()
public void set_Translation(Vector2 value)
public void .ctor(float m11, float m12, float m21, float m22, float m31, float m32)
public Matrix3x2 CreateTranslation(Vector2 position)
public Matrix3x2 CreateTranslation(float xPosition, float yPosition)
public Matrix3x2 CreateScale(float xScale, float yScale)
public Matrix3x2 CreateScale(float xScale, float yScale, Vector2 centerPoint)
public Matrix3x2 CreateScale(Vector2 scales)
public Matrix3x2 CreateScale(Vector2 scales, Vector2 centerPoint)
public Matrix3x2 CreateScale(float scale)
public Matrix3x2 CreateScale(float scale, Vector2 centerPoint)
public Matrix3x2 CreateSkew(float radiansX, float radiansY)
public Matrix3x2 CreateSkew(float radiansX, float radiansY, Vector2 centerPoint)
public Matrix3x2 CreateRotation(float radians)
public Matrix3x2 CreateRotation(float radians, Vector2 centerPoint)
public float GetDeterminant()
public bool Invert(Matrix3x2 matrix, Matrix3x2& result)
public Matrix3x2 Lerp(Matrix3x2 matrix1, Matrix3x2 matrix2, float amount)
public Matrix3x2 Negate(Matrix3x2 value)
public Matrix3x2 Add(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 Subtract(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 Multiply(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 Multiply(Matrix3x2 value1, float value2)
public Matrix3x2 op_UnaryNegation(Matrix3x2 value)
public Matrix3x2 op_Addition(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 op_Subtraction(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 op_Multiply(Matrix3x2 value1, Matrix3x2 value2)
public Matrix3x2 op_Multiply(Matrix3x2 value1, float value2)
public bool op_Equality(Matrix3x2 value1, Matrix3x2 value2)
public bool op_Inequality(Matrix3x2 value1, Matrix3x2 value2)
public bool Equals(Matrix3x2 other)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
public System.Numerics.Matrix4x4 : ValueType {
public float M11
public float M12
public float M13
public float M14
public float M21
public float M22
public float M23
public float M24
public float M31
public float M32
public float M33
public float M34
public float M41
public float M42
public float M43
public float M44
private Matrix4x4 _identity
public Matrix4x4 Identity
public bool IsIdentity
public Vector3 Translation
public Matrix4x4 get_Identity()
public bool get_IsIdentity()
public Vector3 get_Translation()
public void set_Translation(Vector3 value)
public void .ctor(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44)
public void .ctor(Matrix3x2 value)
public Matrix4x4 CreateBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector)
public Matrix4x4 CreateConstrainedBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 rotateAxis, Vector3 cameraForwardVector, Vector3 objectForwardVector)
public Matrix4x4 CreateTranslation(Vector3 position)
public Matrix4x4 CreateTranslation(float xPosition, float yPosition, float zPosition)
public Matrix4x4 CreateScale(float xScale, float yScale, float zScale)
public Matrix4x4 CreateScale(float xScale, float yScale, float zScale, Vector3 centerPoint)
public Matrix4x4 CreateScale(Vector3 scales)
public Matrix4x4 CreateScale(Vector3 scales, Vector3 centerPoint)
public Matrix4x4 CreateScale(float scale)
public Matrix4x4 CreateScale(float scale, Vector3 centerPoint)
public Matrix4x4 CreateRotationX(float radians)
public Matrix4x4 CreateRotationX(float radians, Vector3 centerPoint)
public Matrix4x4 CreateRotationY(float radians)
public Matrix4x4 CreateRotationY(float radians, Vector3 centerPoint)
public Matrix4x4 CreateRotationZ(float radians)
public Matrix4x4 CreateRotationZ(float radians, Vector3 centerPoint)
public Matrix4x4 CreateFromAxisAngle(Vector3 axis, float angle)
public Matrix4x4 CreatePerspectiveFieldOfView(float fieldOfView, float aspectRatio, float nearPlaneDistance, float farPlaneDistance)
public Matrix4x4 CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance)
public Matrix4x4 CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float nearPlaneDistance, float farPlaneDistance)
public Matrix4x4 CreateOrthographic(float width, float height, float zNearPlane, float zFarPlane)
public Matrix4x4 CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNearPlane, float zFarPlane)
public Matrix4x4 CreateLookAt(Vector3 cameraPosition, Vector3 cameraTarget, Vector3 cameraUpVector)
public Matrix4x4 CreateWorld(Vector3 position, Vector3 forward, Vector3 up)
public Matrix4x4 CreateFromQuaternion(Quaternion quaternion)
public Matrix4x4 CreateFromYawPitchRoll(float yaw, float pitch, float roll)
public Matrix4x4 CreateShadow(Vector3 lightDirection, Plane plane)
public Matrix4x4 CreateReflection(Plane value)
public float GetDeterminant()
public bool Invert(Matrix4x4 matrix, Matrix4x4& result)
public bool Decompose(Matrix4x4 matrix, Vector3& scale, Quaternion& rotation, Vector3& translation)
public Matrix4x4 Transform(Matrix4x4 value, Quaternion rotation)
public Matrix4x4 Transpose(Matrix4x4 matrix)
public Matrix4x4 Lerp(Matrix4x4 matrix1, Matrix4x4 matrix2, float amount)
public Matrix4x4 Negate(Matrix4x4 value)
public Matrix4x4 Add(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 Subtract(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 Multiply(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 Multiply(Matrix4x4 value1, float value2)
public Matrix4x4 op_UnaryNegation(Matrix4x4 value)
public Matrix4x4 op_Addition(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 op_Subtraction(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 op_Multiply(Matrix4x4 value1, Matrix4x4 value2)
public Matrix4x4 op_Multiply(Matrix4x4 value1, float value2)
public bool op_Equality(Matrix4x4 value1, Matrix4x4 value2)
public bool op_Inequality(Matrix4x4 value1, Matrix4x4 value2)
public bool Equals(Matrix4x4 other)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
public System.Numerics.Plane : ValueType {
public Vector3 Normal
public float D
public void .ctor(float x, float y, float z, float d)
public void .ctor(Vector3 normal, float d)
public void .ctor(Vector4 value)
public Plane CreateFromVertices(Vector3 point1, Vector3 point2, Vector3 point3)
public Plane Normalize(Plane value)
public Plane Transform(Plane plane, Matrix4x4 matrix)
public Plane Transform(Plane plane, Quaternion rotation)
public float Dot(Plane plane, Vector4 value)
public float DotCoordinate(Plane plane, Vector3 value)
public float DotNormal(Plane plane, Vector3 value)
public bool op_Equality(Plane value1, Plane value2)
public bool op_Inequality(Plane value1, Plane value2)
public bool Equals(Plane other)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
public System.Numerics.Quaternion : ValueType {
public float X
public float Y
public float Z
public float W
public Quaternion Identity
public bool IsIdentity
public Quaternion get_Identity()
public bool get_IsIdentity()
public void .ctor(float x, float y, float z, float w)
public void .ctor(Vector3 vectorPart, float scalarPart)
public float Length()
public float LengthSquared()
public Quaternion Normalize(Quaternion value)
public Quaternion Conjugate(Quaternion value)
public Quaternion Inverse(Quaternion value)
public Quaternion CreateFromAxisAngle(Vector3 axis, float angle)
public Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll)
public Quaternion CreateFromRotationMatrix(Matrix4x4 matrix)
public float Dot(Quaternion quaternion1, Quaternion quaternion2)
public Quaternion Slerp(Quaternion quaternion1, Quaternion quaternion2, float amount)
public Quaternion Lerp(Quaternion quaternion1, Quaternion quaternion2, float amount)
public Quaternion Concatenate(Quaternion value1, Quaternion value2)
public Quaternion Negate(Quaternion value)
public Quaternion Add(Quaternion value1, Quaternion value2)
public Quaternion Subtract(Quaternion value1, Quaternion value2)
public Quaternion Multiply(Quaternion value1, Quaternion value2)
public Quaternion Multiply(Quaternion value1, float value2)
public Quaternion Divide(Quaternion value1, Quaternion value2)
public Quaternion op_UnaryNegation(Quaternion value)
public Quaternion op_Addition(Quaternion value1, Quaternion value2)
public Quaternion op_Subtraction(Quaternion value1, Quaternion value2)
public Quaternion op_Multiply(Quaternion value1, Quaternion value2)
public Quaternion op_Multiply(Quaternion value1, float value2)
public Quaternion op_Division(Quaternion value1, Quaternion value2)
public bool op_Equality(Quaternion value1, Quaternion value2)
public bool op_Inequality(Quaternion value1, Quaternion value2)
public bool Equals(Quaternion other)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
internal System.Numerics.Register : ValueType {
internal byte byte_0
internal byte byte_1
internal byte byte_2
internal byte byte_3
internal byte byte_4
internal byte byte_5
internal byte byte_6
internal byte byte_7
internal byte byte_8
internal byte byte_9
internal byte byte_10
internal byte byte_11
internal byte byte_12
internal byte byte_13
internal byte byte_14
internal byte byte_15
internal sbyte sbyte_0
internal sbyte sbyte_1
internal sbyte sbyte_2
internal sbyte sbyte_3
internal sbyte sbyte_4
internal sbyte sbyte_5
internal sbyte sbyte_6
internal sbyte sbyte_7
internal sbyte sbyte_8
internal sbyte sbyte_9
internal sbyte sbyte_10
internal sbyte sbyte_11
internal sbyte sbyte_12
internal sbyte sbyte_13
internal sbyte sbyte_14
internal sbyte sbyte_15
internal ushort uint16_0
internal ushort uint16_1
internal ushort uint16_2
internal ushort uint16_3
internal ushort uint16_4
internal ushort uint16_5
internal ushort uint16_6
internal ushort uint16_7
internal short int16_0
internal short int16_1
internal short int16_2
internal short int16_3
internal short int16_4
internal short int16_5
internal short int16_6
internal short int16_7
internal UInt32 uint32_0
internal UInt32 uint32_1
internal UInt32 uint32_2
internal UInt32 uint32_3
internal int int32_0
internal int int32_1
internal int int32_2
internal int int32_3
internal ulong uint64_0
internal ulong uint64_1
internal long int64_0
internal long int64_1
internal float single_0
internal float single_1
internal float single_2
internal float single_3
internal double double_0
internal double double_1
}
public System.Numerics.Vector : object {
public bool IsHardwareAccelerated
public void Widen(Vector`1<byte> source, Vector`1& low, Vector`1& high)
public void Widen(Vector`1<ushort> source, Vector`1& low, Vector`1& high)
public void Widen(Vector`1<UInt32> source, Vector`1& low, Vector`1& high)
public void Widen(Vector`1<sbyte> source, Vector`1& low, Vector`1& high)
public void Widen(Vector`1<short> source, Vector`1& low, Vector`1& high)
public void Widen(Vector`1<int> source, Vector`1& low, Vector`1& high)
public void Widen(Vector`1<float> source, Vector`1& low, Vector`1& high)
public Vector`1<byte> Narrow(Vector`1<ushort> low, Vector`1<ushort> high)
public Vector`1<ushort> Narrow(Vector`1<UInt32> low, Vector`1<UInt32> high)
public Vector`1<UInt32> Narrow(Vector`1<ulong> low, Vector`1<ulong> high)
public Vector`1<sbyte> Narrow(Vector`1<short> low, Vector`1<short> high)
public Vector`1<short> Narrow(Vector`1<int> low, Vector`1<int> high)
public Vector`1<int> Narrow(Vector`1<long> low, Vector`1<long> high)
public Vector`1<float> Narrow(Vector`1<double> low, Vector`1<double> high)
public Vector`1<float> ConvertToSingle(Vector`1<int> value)
public Vector`1<float> ConvertToSingle(Vector`1<UInt32> value)
public Vector`1<double> ConvertToDouble(Vector`1<long> value)
public Vector`1<double> ConvertToDouble(Vector`1<ulong> value)
public Vector`1<int> ConvertToInt32(Vector`1<float> value)
public Vector`1<UInt32> ConvertToUInt32(Vector`1<float> value)
public Vector`1<long> ConvertToInt64(Vector`1<double> value)
public Vector`1<ulong> ConvertToUInt64(Vector`1<double> value)
public Vector`1<float> ConditionalSelect(Vector`1<int> condition, Vector`1<float> left, Vector`1<float> right)
public Vector`1<double> ConditionalSelect(Vector`1<long> condition, Vector`1<double> left, Vector`1<double> right)
public Vector`1<T> ConditionalSelect(Vector`1<T> condition, Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> Equals(Vector`1<T> left, Vector`1<T> right)
public Vector`1<int> Equals(Vector`1<float> left, Vector`1<float> right)
public Vector`1<int> Equals(Vector`1<int> left, Vector`1<int> right)
public Vector`1<long> Equals(Vector`1<double> left, Vector`1<double> right)
public Vector`1<long> Equals(Vector`1<long> left, Vector`1<long> right)
public bool EqualsAll(Vector`1<T> left, Vector`1<T> right)
public bool EqualsAny(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> LessThan(Vector`1<T> left, Vector`1<T> right)
public Vector`1<int> LessThan(Vector`1<float> left, Vector`1<float> right)
public Vector`1<int> LessThan(Vector`1<int> left, Vector`1<int> right)
public Vector`1<long> LessThan(Vector`1<double> left, Vector`1<double> right)
public Vector`1<long> LessThan(Vector`1<long> left, Vector`1<long> right)
public bool LessThanAll(Vector`1<T> left, Vector`1<T> right)
public bool LessThanAny(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> LessThanOrEqual(Vector`1<T> left, Vector`1<T> right)
public Vector`1<int> LessThanOrEqual(Vector`1<float> left, Vector`1<float> right)
public Vector`1<int> LessThanOrEqual(Vector`1<int> left, Vector`1<int> right)
public Vector`1<long> LessThanOrEqual(Vector`1<long> left, Vector`1<long> right)
public Vector`1<long> LessThanOrEqual(Vector`1<double> left, Vector`1<double> right)
public bool LessThanOrEqualAll(Vector`1<T> left, Vector`1<T> right)
public bool LessThanOrEqualAny(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> GreaterThan(Vector`1<T> left, Vector`1<T> right)
public Vector`1<int> GreaterThan(Vector`1<float> left, Vector`1<float> right)
public Vector`1<int> GreaterThan(Vector`1<int> left, Vector`1<int> right)
public Vector`1<long> GreaterThan(Vector`1<double> left, Vector`1<double> right)
public Vector`1<long> GreaterThan(Vector`1<long> left, Vector`1<long> right)
public bool GreaterThanAll(Vector`1<T> left, Vector`1<T> right)
public bool GreaterThanAny(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> GreaterThanOrEqual(Vector`1<T> left, Vector`1<T> right)
public Vector`1<int> GreaterThanOrEqual(Vector`1<float> left, Vector`1<float> right)
public Vector`1<int> GreaterThanOrEqual(Vector`1<int> left, Vector`1<int> right)
public Vector`1<long> GreaterThanOrEqual(Vector`1<long> left, Vector`1<long> right)
public Vector`1<long> GreaterThanOrEqual(Vector`1<double> left, Vector`1<double> right)
public bool GreaterThanOrEqualAll(Vector`1<T> left, Vector`1<T> right)
public bool GreaterThanOrEqualAny(Vector`1<T> left, Vector`1<T> right)
public bool get_IsHardwareAccelerated()
public Vector`1<T> Abs(Vector`1<T> value)
public Vector`1<T> Min(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> Max(Vector`1<T> left, Vector`1<T> right)
public T Dot(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> SquareRoot(Vector`1<T> value)
public Vector`1<T> Add(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> Subtract(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> Multiply(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> Multiply(Vector`1<T> left, T right)
public Vector`1<T> Multiply(T left, Vector`1<T> right)
public Vector`1<T> Divide(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> Negate(Vector`1<T> value)
public Vector`1<T> BitwiseAnd(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> BitwiseOr(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> OnesComplement(Vector`1<T> value)
public Vector`1<T> Xor(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> AndNot(Vector`1<T> left, Vector`1<T> right)
public Vector`1<byte> AsVectorByte(Vector`1<T> value)
public Vector`1<sbyte> AsVectorSByte(Vector`1<T> value)
public Vector`1<ushort> AsVectorUInt16(Vector`1<T> value)
public Vector`1<short> AsVectorInt16(Vector`1<T> value)
public Vector`1<UInt32> AsVectorUInt32(Vector`1<T> value)
public Vector`1<int> AsVectorInt32(Vector`1<T> value)
public Vector`1<ulong> AsVectorUInt64(Vector`1<T> value)
public Vector`1<long> AsVectorInt64(Vector`1<T> value)
public Vector`1<float> AsVectorSingle(Vector`1<T> value)
public Vector`1<double> AsVectorDouble(Vector`1<T> value)
}
public System.Numerics.Vector`1 : ValueType {
private Register register
private int s_count
private Vector`1<T> zero
private Vector`1<T> one
private Vector`1<T> allOnes
public int Count
public Vector`1<T> Zero
public Vector`1<T> One
internal Vector`1<T> AllOnes
public T Item
public int get_Count()
public Vector`1<T> get_Zero()
public Vector`1<T> get_One()
internal Vector`1<T> get_AllOnes()
private int InitializeCount()
public void .ctor(T value)
public void .ctor(T[] values)
public void .ctor(T[] values, int index)
internal void .ctor(Void* dataPointer)
internal void .ctor(Void* dataPointer, int offset)
private void .ctor(Register& existingRegister)
public void CopyTo(T[] destination)
public void CopyTo(T[] destination, int startIndex)
public T get_Item(int index)
public bool Equals(object obj)
public bool Equals(Vector`1<T> other)
public int GetHashCode()
public string ToString()
public string ToString(string format)
public string ToString(string format, IFormatProvider formatProvider)
public Vector`1<T> op_Addition(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> op_Subtraction(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> op_Multiply(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> op_Multiply(Vector`1<T> value, T factor)
public Vector`1<T> op_Multiply(T factor, Vector`1<T> value)
public Vector`1<T> op_Division(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> op_UnaryNegation(Vector`1<T> value)
public Vector`1<T> op_BitwiseAnd(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> op_BitwiseOr(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> op_ExclusiveOr(Vector`1<T> left, Vector`1<T> right)
public Vector`1<T> op_OnesComplement(Vector`1<T> value)
public bool op_Equality(Vector`1<T> left, Vector`1<T> right)
public bool op_Inequality(Vector`1<T> left, Vector`1<T> right)
public Vector`1<byte> op_Explicit(Vector`1<T> value)
public Vector`1<sbyte> op_Explicit(Vector`1<T> value)
public Vector`1<ushort> op_Explicit(Vector`1<T> value)
public Vector`1<short> op_Explicit(Vector`1<T> value)
public Vector`1<UInt32> op_Explicit(Vector`1<T> value)
public Vector`1<int> op_Explicit(Vector`1<T> value)
public Vector`1<ulong> op_Explicit(Vector`1<T> value)
public Vector`1<long> op_Explicit(Vector`1<T> value)
public Vector`1<float> op_Explicit(Vector`1<T> value)
public Vector`1<double> op_Explicit(Vector`1<T> value)
internal Vector`1<T> Equals(Vector`1<T> left, Vector`1<T> right)
internal Vector`1<T> LessThan(Vector`1<T> left, Vector`1<T> right)
internal Vector`1<T> GreaterThan(Vector`1<T> left, Vector`1<T> right)
internal Vector`1<T> GreaterThanOrEqual(Vector`1<T> left, Vector`1<T> right)
internal Vector`1<T> LessThanOrEqual(Vector`1<T> left, Vector`1<T> right)
internal Vector`1<T> ConditionalSelect(Vector`1<T> condition, Vector`1<T> left, Vector`1<T> right)
internal Vector`1<T> Abs(Vector`1<T> value)
internal Vector`1<T> Min(Vector`1<T> left, Vector`1<T> right)
internal Vector`1<T> Max(Vector`1<T> left, Vector`1<T> right)
internal T DotProduct(Vector`1<T> left, Vector`1<T> right)
internal Vector`1<T> SquareRoot(Vector`1<T> value)
private bool ScalarEquals(T left, T right)
private bool ScalarLessThan(T left, T right)
private bool ScalarGreaterThan(T left, T right)
private T ScalarAdd(T left, T right)
private T ScalarSubtract(T left, T right)
private T ScalarMultiply(T left, T right)
private T ScalarDivide(T left, T right)
private T GetZeroValue()
private T GetOneValue()
private T GetAllBitsSetValue()
}
public System.Numerics.Vector2 : ValueType {
public float X
public float Y
public Vector2 Zero
public Vector2 One
public Vector2 UnitX
public Vector2 UnitY
public Vector2 get_Zero()
public Vector2 get_One()
public Vector2 get_UnitX()
public Vector2 get_UnitY()
public int GetHashCode()
public bool Equals(object obj)
public string ToString()
public string ToString(string format)
public string ToString(string format, IFormatProvider formatProvider)
public float Length()
public float LengthSquared()
public float Distance(Vector2 value1, Vector2 value2)
public float DistanceSquared(Vector2 value1, Vector2 value2)
public Vector2 Normalize(Vector2 value)
public Vector2 Reflect(Vector2 vector, Vector2 normal)
public Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max)
public Vector2 Lerp(Vector2 value1, Vector2 value2, float amount)
public Vector2 Transform(Vector2 position, Matrix3x2 matrix)
public Vector2 Transform(Vector2 position, Matrix4x4 matrix)
public Vector2 TransformNormal(Vector2 normal, Matrix3x2 matrix)
public Vector2 TransformNormal(Vector2 normal, Matrix4x4 matrix)
public Vector2 Transform(Vector2 value, Quaternion rotation)
public Vector2 Add(Vector2 left, Vector2 right)
public Vector2 Subtract(Vector2 left, Vector2 right)
public Vector2 Multiply(Vector2 left, Vector2 right)
public Vector2 Multiply(Vector2 left, float right)
public Vector2 Multiply(float left, Vector2 right)
public Vector2 Divide(Vector2 left, Vector2 right)
public Vector2 Divide(Vector2 left, float divisor)
public Vector2 Negate(Vector2 value)
public void .ctor(float value)
public void .ctor(float x, float y)
public void CopyTo(Single[] array)
public void CopyTo(Single[] array, int index)
public bool Equals(Vector2 other)
public float Dot(Vector2 value1, Vector2 value2)
public Vector2 Min(Vector2 value1, Vector2 value2)
public Vector2 Max(Vector2 value1, Vector2 value2)
public Vector2 Abs(Vector2 value)
public Vector2 SquareRoot(Vector2 value)
public Vector2 op_Addition(Vector2 left, Vector2 right)
public Vector2 op_Subtraction(Vector2 left, Vector2 right)
public Vector2 op_Multiply(Vector2 left, Vector2 right)
public Vector2 op_Multiply(float left, Vector2 right)
public Vector2 op_Multiply(Vector2 left, float right)
public Vector2 op_Division(Vector2 left, Vector2 right)
public Vector2 op_Division(Vector2 value1, float value2)
public Vector2 op_UnaryNegation(Vector2 value)
public bool op_Equality(Vector2 left, Vector2 right)
public bool op_Inequality(Vector2 left, Vector2 right)
}
public System.Numerics.Vector3 : ValueType {
public float X
public float Y
public float Z
public Vector3 Zero
public Vector3 One
public Vector3 UnitX
public Vector3 UnitY
public Vector3 UnitZ
public Vector3 get_Zero()
public Vector3 get_One()
public Vector3 get_UnitX()
public Vector3 get_UnitY()
public Vector3 get_UnitZ()
public int GetHashCode()
public bool Equals(object obj)
public string ToString()
public string ToString(string format)
public string ToString(string format, IFormatProvider formatProvider)
public float Length()
public float LengthSquared()
public float Distance(Vector3 value1, Vector3 value2)
public float DistanceSquared(Vector3 value1, Vector3 value2)
public Vector3 Normalize(Vector3 value)
public Vector3 Cross(Vector3 vector1, Vector3 vector2)
public Vector3 Reflect(Vector3 vector, Vector3 normal)
public Vector3 Clamp(Vector3 value1, Vector3 min, Vector3 max)
public Vector3 Lerp(Vector3 value1, Vector3 value2, float amount)
public Vector3 Transform(Vector3 position, Matrix4x4 matrix)
public Vector3 TransformNormal(Vector3 normal, Matrix4x4 matrix)
public Vector3 Transform(Vector3 value, Quaternion rotation)
public Vector3 Add(Vector3 left, Vector3 right)
public Vector3 Subtract(Vector3 left, Vector3 right)
public Vector3 Multiply(Vector3 left, Vector3 right)
public Vector3 Multiply(Vector3 left, float right)
public Vector3 Multiply(float left, Vector3 right)
public Vector3 Divide(Vector3 left, Vector3 right)
public Vector3 Divide(Vector3 left, float divisor)
public Vector3 Negate(Vector3 value)
public void .ctor(float value)
public void .ctor(Vector2 value, float z)
public void .ctor(float x, float y, float z)
public void CopyTo(Single[] array)
public void CopyTo(Single[] array, int index)
public bool Equals(Vector3 other)
public float Dot(Vector3 vector1, Vector3 vector2)
public Vector3 Min(Vector3 value1, Vector3 value2)
public Vector3 Max(Vector3 value1, Vector3 value2)
public Vector3 Abs(Vector3 value)
public Vector3 SquareRoot(Vector3 value)
public Vector3 op_Addition(Vector3 left, Vector3 right)
public Vector3 op_Subtraction(Vector3 left, Vector3 right)
public Vector3 op_Multiply(Vector3 left, Vector3 right)
public Vector3 op_Multiply(Vector3 left, float right)
public Vector3 op_Multiply(float left, Vector3 right)
public Vector3 op_Division(Vector3 left, Vector3 right)
public Vector3 op_Division(Vector3 value1, float value2)
public Vector3 op_UnaryNegation(Vector3 value)
public bool op_Equality(Vector3 left, Vector3 right)
public bool op_Inequality(Vector3 left, Vector3 right)
}
public System.Numerics.Vector4 : ValueType {
public float X
public float Y
public float Z
public float W
public Vector4 Zero
public Vector4 One
public Vector4 UnitX
public Vector4 UnitY
public Vector4 UnitZ
public Vector4 UnitW
public Vector4 get_Zero()
public Vector4 get_One()
public Vector4 get_UnitX()
public Vector4 get_UnitY()
public Vector4 get_UnitZ()
public Vector4 get_UnitW()
public int GetHashCode()
public bool Equals(object obj)
public string ToString()
public string ToString(string format)
public string ToString(string format, IFormatProvider formatProvider)
public float Length()
public float LengthSquared()
public float Distance(Vector4 value1, Vector4 value2)
public float DistanceSquared(Vector4 value1, Vector4 value2)
public Vector4 Normalize(Vector4 vector)
public Vector4 Clamp(Vector4 value1, Vector4 min, Vector4 max)
public Vector4 Lerp(Vector4 value1, Vector4 value2, float amount)
public Vector4 Transform(Vector2 position, Matrix4x4 matrix)
public Vector4 Transform(Vector3 position, Matrix4x4 matrix)
public Vector4 Transform(Vector4 vector, Matrix4x4 matrix)
public Vector4 Transform(Vector2 value, Quaternion rotation)
public Vector4 Transform(Vector3 value, Quaternion rotation)
public Vector4 Transform(Vector4 value, Quaternion rotation)
public Vector4 Add(Vector4 left, Vector4 right)
public Vector4 Subtract(Vector4 left, Vector4 right)
public Vector4 Multiply(Vector4 left, Vector4 right)
public Vector4 Multiply(Vector4 left, float right)
public Vector4 Multiply(float left, Vector4 right)
public Vector4 Divide(Vector4 left, Vector4 right)
public Vector4 Divide(Vector4 left, float divisor)
public Vector4 Negate(Vector4 value)
public void .ctor(float value)
public void .ctor(float x, float y, float z, float w)
public void .ctor(Vector2 value, float z, float w)
public void .ctor(Vector3 value, float w)
public void CopyTo(Single[] array)
public void CopyTo(Single[] array, int index)
public bool Equals(Vector4 other)
public float Dot(Vector4 vector1, Vector4 vector2)
public Vector4 Min(Vector4 value1, Vector4 value2)
public Vector4 Max(Vector4 value1, Vector4 value2)
public Vector4 Abs(Vector4 value)
public Vector4 SquareRoot(Vector4 value)
public Vector4 op_Addition(Vector4 left, Vector4 right)
public Vector4 op_Subtraction(Vector4 left, Vector4 right)
public Vector4 op_Multiply(Vector4 left, Vector4 right)
public Vector4 op_Multiply(Vector4 left, float right)
public Vector4 op_Multiply(float left, Vector4 right)
public Vector4 op_Division(Vector4 left, Vector4 right)
public Vector4 op_Division(Vector4 value1, float value2)
public Vector4 op_UnaryNegation(Vector4 value)
public bool op_Equality(Vector4 left, Vector4 right)
public bool op_Inequality(Vector4 left, Vector4 right)
}
internal System.SR : object {
private ResourceManager s_resourceManager
private string s_resourcesName
private ResourceManager ResourceManager
internal string Arg_ArgumentOutOfRangeException
internal string Arg_ElementsInSourceIsGreaterThanDestination
internal string Arg_NullArgumentNullRef
internal string Arg_TypeNotSupported
internal Type ResourceType
private ResourceManager get_ResourceManager()
private bool UsingResourceKeys()
internal string GetResourceString(string resourceKey, string defaultString)
internal string Format(string resourceFormat, Object[] args)
internal string Format(string resourceFormat, object p1)
internal string Format(string resourceFormat, object p1, object p2)
internal string Format(string resourceFormat, object p1, object p2, object p3)
internal string get_Arg_ArgumentOutOfRangeException()
internal string get_Arg_ElementsInSourceIsGreaterThanDestination()
internal string get_Arg_NullArgumentNullRef()
internal string get_Arg_TypeNotSupported()
internal Type get_ResourceType()
}
