public WebSocketSharp.ByteOrder : Enum {
public int value__
public ByteOrder Little
public ByteOrder Big
}
public WebSocketSharp.CloseEventArgs : EventArgs {
private bool _clean
private ushort _code
private PayloadData _payloadData
private string _reason
internal PayloadData PayloadData
public ushort Code
public string Reason
public bool WasClean
internal void .ctor(ushort code)
internal void .ctor(CloseStatusCode code)
internal void .ctor(PayloadData payloadData)
internal void .ctor(ushort code, string reason)
internal void .ctor(CloseStatusCode code, string reason)
internal PayloadData get_PayloadData()
public ushort get_Code()
public string get_Reason()
public bool get_WasClean()
internal void set_WasClean(bool value)
}
public WebSocketSharp.CloseStatusCode : Enum {
public ushort value__
public CloseStatusCode Normal
public CloseStatusCode Away
public CloseStatusCode ProtocolError
public CloseStatusCode UnsupportedData
public CloseStatusCode Undefined
public CloseStatusCode NoStatus
public CloseStatusCode Abnormal
public CloseStatusCode InvalidData
public CloseStatusCode PolicyViolation
public CloseStatusCode TooBig
public CloseStatusCode MandatoryExtension
public CloseStatusCode ServerError
public CloseStatusCode TlsHandshakeFailure
}
public WebSocketSharp.CompressionMethod : Enum {
public byte value__
public CompressionMethod None
public CompressionMethod Deflate
}
public WebSocketSharp.ErrorEventArgs : EventArgs {
private Exception _exception
private string _message
public Exception Exception
public string Message
internal void .ctor(string message)
internal void .ctor(string message, Exception exception)
public Exception get_Exception()
public string get_Message()
}
public WebSocketSharp.Ext : object {
private string _tspecials
private Byte[] _last
private Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1
private Byte[] compress(Byte[] data)
private MemoryStream compress(Stream stream)
private Byte[] compressToArray(Stream stream)
private Byte[] decompress(Byte[] data)
private MemoryStream decompress(Stream stream)
private Byte[] decompressToArray(Stream stream)
private void times(ulong n, Action action)
internal Byte[] Append(ushort code, string reason)
internal string CheckIfAvailable(ServerState state, bool ready, bool start, bool shutting)
internal string CheckIfAvailable(WebSocketState state, bool connecting, bool open, bool closing, bool closed)
internal string CheckIfValidProtocols(String[] protocols)
internal string CheckIfValidServicePath(string path)
internal string CheckIfValidSessionID(string id)
internal string CheckIfValidWaitTime(TimeSpan time)
internal void Close(HttpListenerResponse response, HttpStatusCode code)
internal void CloseWithAuthChallenge(HttpListenerResponse response, string challenge)
internal Byte[] Compress(Byte[] data, CompressionMethod method)
internal Stream Compress(Stream stream, CompressionMethod method)
internal Byte[] CompressToArray(Stream stream, CompressionMethod method)
internal bool Contains(IEnumerable`1<T> source, Func`2<T, bool> condition)
internal bool ContainsTwice(String[] values)
internal T[] Copy(T[] source, long length)
internal void CopyTo(Stream source, Stream destination, int bufferLength)
internal void CopyToAsync(Stream source, Stream destination, int bufferLength, Action completed, Action`1<Exception> error)
internal Byte[] Decompress(Byte[] data, CompressionMethod method)
internal Stream Decompress(Stream stream, CompressionMethod method)
internal Byte[] DecompressToArray(Stream stream, CompressionMethod method)
internal bool EqualsWith(int value, char c, Action`1<int> action)
internal string GetAbsolutePath(Uri uri)
internal string GetMessage(CloseStatusCode code)
internal string GetName(string nameAndValue, char separator)
internal string GetValue(string nameAndValue, char separator)
internal string GetValue(string nameAndValue, char separator, bool unquote)
internal TcpListenerWebSocketContext GetWebSocketContext(TcpClient tcpClient, string protocol, bool secure, ServerSslConfiguration sslConfig, Logger logger)
internal Byte[] InternalToByteArray(ushort value, ByteOrder order)
internal Byte[] InternalToByteArray(ulong value, ByteOrder order)
internal bool IsCompressionExtension(string value, CompressionMethod method)
internal bool IsPortNumber(int value)
internal bool IsReserved(ushort code)
internal bool IsReserved(CloseStatusCode code)
internal bool IsText(string value)
internal bool IsToken(string value)
internal string Quote(string value)
internal Byte[] ReadBytes(Stream stream, int length)
internal Byte[] ReadBytes(Stream stream, long length, int bufferLength)
internal void ReadBytesAsync(Stream stream, int length, Action`1<Byte[]> completed, Action`1<Exception> error)
internal void ReadBytesAsync(Stream stream, long length, int bufferLength, Action`1<Byte[]> completed, Action`1<Exception> error)
internal string RemovePrefix(string value, String[] prefixes)
internal T[] Reverse(T[] array)
internal IEnumerable`1<string> SplitHeaderValue(string value, Char[] separators)
internal Byte[] ToByteArray(Stream stream)
internal CompressionMethod ToCompressionMethod(string value)
internal string ToExtensionString(CompressionMethod method, String[] parameters)
internal IPAddress ToIPAddress(string hostnameOrAddress)
internal List`1<TSource> ToList(IEnumerable`1<TSource> source)
internal ushort ToUInt16(Byte[] source, ByteOrder sourceOrder)
internal ulong ToUInt64(Byte[] source, ByteOrder sourceOrder)
internal string TrimEndSlash(string value)
internal bool TryCreateWebSocketUri(string uriString, Uri& result, String& message)
internal string Unquote(string value)
internal string UTF8Decode(Byte[] bytes)
internal Byte[] UTF8Encode(string s)
internal void WriteBytes(Stream stream, Byte[] bytes, int bufferLength)
internal void WriteBytesAsync(Stream stream, Byte[] bytes, int bufferLength, Action completed, Action`1<Exception> error)
public bool Contains(string value, Char[] chars)
public bool Contains(NameValueCollection collection, string name)
public bool Contains(NameValueCollection collection, string name, string value)
public void Emit(EventHandler eventHandler, object sender, EventArgs e)
public void Emit(EventHandler`1<TEventArgs> eventHandler, object sender, TEventArgs e)
public CookieCollection GetCookies(NameValueCollection headers, bool response)
public string GetDescription(HttpStatusCode code)
public string GetStatusDescription(int code)
public bool IsCloseStatusCode(ushort value)
public bool IsEnclosedIn(string value, char c)
public bool IsHostOrder(ByteOrder order)
public bool IsLocal(IPAddress address)
public bool IsNullOrEmpty(string value)
public bool IsPredefinedScheme(string value)
public bool IsUpgradeTo(HttpListenerRequest request, string protocol)
public bool MaybeUri(string value)
public T[] SubArray(T[] array, int startIndex, int length)
public T[] SubArray(T[] array, long startIndex, long length)
public void Times(int n, Action action)
public void Times(long n, Action action)
public void Times(UInt32 n, Action action)
public void Times(ulong n, Action action)
public void Times(int n, Action`1<int> action)
public void Times(long n, Action`1<long> action)
public void Times(UInt32 n, Action`1<UInt32> action)
public void Times(ulong n, Action`1<ulong> action)
public T To(Byte[] source, ByteOrder sourceOrder)
public Byte[] ToByteArray(T value, ByteOrder order)
public Byte[] ToHostOrder(Byte[] source, ByteOrder sourceOrder)
public string ToString(T[] array, string separator)
public Uri ToUri(string uriString)
public string UrlDecode(string value)
public string UrlEncode(string value)
public void WriteContent(HttpListenerResponse response, Byte[] content)
private bool <CheckIfValidProtocols>b__0(string protocol)
}
internal WebSocketSharp.Fin : Enum {
public byte value__
public Fin More
public Fin Final
}
internal WebSocketSharp.HttpBase : object {
private int _headersMaxLength
protected string CrLf
private NameValueCollection _headers
private Version _version
internal Byte[] EntityBodyData
public string EntityBody
public NameValueCollection Headers
public Version ProtocolVersion
protected void .ctor(Version version, NameValueCollection headers)
public string get_EntityBody()
public NameValueCollection get_Headers()
public Version get_ProtocolVersion()
private Byte[] readEntityBody(Stream stream, string length)
private String[] readHeaders(Stream stream, int maxLength)
protected T Read(Stream stream, Func`2<String[], T> parser, int millisecondsTimeout)
public Byte[] ToByteArray()
}
internal WebSocketSharp.HttpRequest : HttpBase {
private string _method
private string _uri
private bool _websocketRequest
private bool _websocketRequestSet
public AuthenticationResponse AuthenticationResponse
public CookieCollection Cookies
public string HttpMethod
public bool IsWebSocketRequest
public string RequestUri
private void .ctor(string method, string uri, Version version, NameValueCollection headers)
internal void .ctor(string method, string uri)
public AuthenticationResponse get_AuthenticationResponse()
public CookieCollection get_Cookies()
public string get_HttpMethod()
public bool get_IsWebSocketRequest()
public string get_RequestUri()
internal HttpRequest CreateConnectRequest(Uri uri)
internal HttpRequest CreateWebSocketRequest(Uri uri)
internal HttpResponse GetResponse(Stream stream, int millisecondsTimeout)
internal HttpRequest Parse(String[] headerParts)
internal HttpRequest Read(Stream stream, int millisecondsTimeout)
public void SetCookies(CookieCollection cookies)
public string ToString()
}
internal WebSocketSharp.HttpResponse : HttpBase {
private string _code
private string _reason
public CookieCollection Cookies
public bool HasConnectionClose
public bool IsProxyAuthenticationRequired
public bool IsRedirect
public bool IsUnauthorized
public bool IsWebSocketResponse
public string Reason
public string StatusCode
private void .ctor(string code, string reason, Version version, NameValueCollection headers)
internal void .ctor(HttpStatusCode code)
internal void .ctor(HttpStatusCode code, string reason)
public CookieCollection get_Cookies()
public bool get_HasConnectionClose()
public bool get_IsProxyAuthenticationRequired()
public bool get_IsRedirect()
public bool get_IsUnauthorized()
public bool get_IsWebSocketResponse()
public string get_Reason()
public string get_StatusCode()
internal HttpResponse CreateCloseResponse(HttpStatusCode code)
internal HttpResponse CreateUnauthorizedResponse(string challenge)
internal HttpResponse CreateWebSocketResponse()
internal HttpResponse Parse(String[] headerParts)
internal HttpResponse Read(Stream stream, int millisecondsTimeout)
public void SetCookies(CookieCollection cookies)
public string ToString()
}
public WebSocketSharp.LogData : object {
private StackFrame _caller
private DateTime _date
private LogLevel _level
private string _message
public StackFrame Caller
public DateTime Date
public LogLevel Level
public string Message
internal void .ctor(LogLevel level, StackFrame caller, string message)
public StackFrame get_Caller()
public DateTime get_Date()
public LogLevel get_Level()
public string get_Message()
public string ToString()
}
public WebSocketSharp.Logger : object {
private String modreq(System.Runtime.CompilerServices.IsVolatile) _file
private LogLevel modreq(System.Runtime.CompilerServices.IsVolatile) _level
private Action`2<LogData, string> _output
private object _sync
public string File
public LogLevel Level
public Action`2<LogData, string> Output
public void .ctor(LogLevel level)
public void .ctor(LogLevel level, string file, Action`2<LogData, string> output)
public string get_File()
public void set_File(string value)
public LogLevel get_Level()
public void set_Level(LogLevel value)
public Action`2<LogData, string> get_Output()
public void set_Output(Action`2<LogData, string> value)
private void defaultOutput(LogData data, string path)
private void output(string message, LogLevel level)
private void writeToFile(string value, string path)
public void Debug(string message)
public void Error(string message)
public void Fatal(string message)
public void Info(string message)
public void Trace(string message)
public void Warn(string message)
}
public WebSocketSharp.LogLevel : Enum {
public int value__
public LogLevel Trace
public LogLevel Debug
public LogLevel Info
public LogLevel Warn
public LogLevel Error
public LogLevel Fatal
}
internal WebSocketSharp.Mask : Enum {
public byte value__
public Mask Off
public Mask On
}
public WebSocketSharp.MessageEventArgs : EventArgs {
private string _data
private bool _dataSet
private Opcode _opcode
private Byte[] _rawData
public string Data
public bool IsBinary
public bool IsPing
public bool IsText
public Byte[] RawData
public Opcode Type
internal void .ctor(WebSocketFrame frame)
internal void .ctor(Opcode opcode, Byte[] rawData)
public string get_Data()
public bool get_IsBinary()
public bool get_IsPing()
public bool get_IsText()
public Byte[] get_RawData()
public Opcode get_Type()
}
internal WebSocketSharp.Net.AuthenticationBase : object {
private AuthenticationSchemes _scheme
internal NameValueCollection Parameters
public string Algorithm
public string Nonce
public string Opaque
public string Qop
public string Realm
public AuthenticationSchemes Scheme
protected void .ctor(AuthenticationSchemes scheme, NameValueCollection parameters)
public string get_Algorithm()
public string get_Nonce()
public string get_Opaque()
public string get_Qop()
public string get_Realm()
public AuthenticationSchemes get_Scheme()
internal string CreateNonceValue()
internal NameValueCollection ParseParameters(string value)
internal string ToBasicString()
internal string ToDigestString()
public string ToString()
}
internal WebSocketSharp.Net.AuthenticationChallenge : AuthenticationBase {
public string Domain
public string Stale
private void .ctor(AuthenticationSchemes scheme, NameValueCollection parameters)
internal void .ctor(AuthenticationSchemes scheme, string realm)
public string get_Domain()
public string get_Stale()
internal AuthenticationChallenge CreateBasicChallenge(string realm)
internal AuthenticationChallenge CreateDigestChallenge(string realm)
internal AuthenticationChallenge Parse(string value)
internal string ToBasicString()
internal string ToDigestString()
}
internal WebSocketSharp.Net.AuthenticationResponse : AuthenticationBase {
private UInt32 _nonceCount
private Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1
internal UInt32 NonceCount
public string Cnonce
public string Nc
public string Password
public string Response
public string Uri
public string UserName
private void .ctor(AuthenticationSchemes scheme, NameValueCollection parameters)
internal void .ctor(NetworkCredential credentials)
internal void .ctor(AuthenticationChallenge challenge, NetworkCredential credentials, UInt32 nonceCount)
internal void .ctor(AuthenticationSchemes scheme, NameValueCollection parameters, NetworkCredential credentials, UInt32 nonceCount)
internal UInt32 get_NonceCount()
public string get_Cnonce()
public string get_Nc()
public string get_Password()
public string get_Response()
public string get_Uri()
public string get_UserName()
private string createA1(string username, string password, string realm)
private string createA1(string username, string password, string realm, string nonce, string cnonce)
private string createA2(string method, string uri)
private string createA2(string method, string uri, string entity)
private string hash(string value)
private void initAsDigest()
internal string CreateRequestDigest(NameValueCollection parameters)
internal AuthenticationResponse Parse(string value)
internal NameValueCollection ParseBasicCredentials(string value)
internal string ToBasicString()
internal string ToDigestString()
public IIdentity ToIdentity()
private bool <initAsDigest>b__0(string qop)
}
public WebSocketSharp.Net.AuthenticationSchemes : Enum {
public int value__
public AuthenticationSchemes None
public AuthenticationSchemes Digest
public AuthenticationSchemes Basic
public AuthenticationSchemes Anonymous
}
internal WebSocketSharp.Net.Chunk : object {
private Byte[] _data
private int _offset
public int ReadLeft
public void .ctor(Byte[] data)
public int get_ReadLeft()
public int Read(Byte[] buffer, int offset, int count)
}
internal WebSocketSharp.Net.ChunkedRequestStream : RequestStream {
private int _bufferLength
private HttpListenerContext _context
private ChunkStream _decoder
private bool _disposed
private bool _noMoreData
internal ChunkStream Decoder
internal void .ctor(Stream stream, Byte[] buffer, int offset, int count, HttpListenerContext context)
internal ChunkStream get_Decoder()
internal void set_Decoder(ChunkStream value)
private void onRead(IAsyncResult asyncResult)
public IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public void Close()
public int EndRead(IAsyncResult asyncResult)
public int Read(Byte[] buffer, int offset, int count)
}
internal WebSocketSharp.Net.ChunkStream : object {
private int _chunkRead
private int _chunkSize
private List`1<Chunk> _chunks
private bool _gotIt
private WebHeaderCollection _headers
private StringBuilder _saved
private bool _sawCr
private InputChunkState _state
private int _trailerState
internal WebHeaderCollection Headers
public int ChunkLeft
public bool WantMore
public void .ctor(WebHeaderCollection headers)
public void .ctor(Byte[] buffer, int offset, int count, WebHeaderCollection headers)
internal WebHeaderCollection get_Headers()
public int get_ChunkLeft()
public bool get_WantMore()
private int read(Byte[] buffer, int offset, int count)
private string removeChunkExtension(string value)
private InputChunkState seekCrLf(Byte[] buffer, Int32& offset, int length)
private InputChunkState setChunkSize(Byte[] buffer, Int32& offset, int length)
private InputChunkState setTrailer(Byte[] buffer, Int32& offset, int length)
private void throwProtocolViolation(string message)
private void write(Byte[] buffer, Int32& offset, int length)
private InputChunkState writeData(Byte[] buffer, Int32& offset, int length)
internal void ResetBuffer()
internal int WriteAndReadBack(Byte[] buffer, int offset, int writeCount, int readCount)
public int Read(Byte[] buffer, int offset, int count)
public void Write(Byte[] buffer, int offset, int count)
}
public WebSocketSharp.Net.ClientSslConfiguration : SslConfiguration {
private X509CertificateCollection _certs
private string _host
public X509CertificateCollection ClientCertificates
public LocalCertificateSelectionCallback ClientCertificateSelectionCallback
public RemoteCertificateValidationCallback ServerCertificateValidationCallback
public string TargetHost
public void .ctor(string targetHost)
public void .ctor(string targetHost, X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, bool checkCertificateRevocation)
public X509CertificateCollection get_ClientCertificates()
public void set_ClientCertificates(X509CertificateCollection value)
public LocalCertificateSelectionCallback get_ClientCertificateSelectionCallback()
public void set_ClientCertificateSelectionCallback(LocalCertificateSelectionCallback value)
public RemoteCertificateValidationCallback get_ServerCertificateValidationCallback()
public void set_ServerCertificateValidationCallback(RemoteCertificateValidationCallback value)
public string get_TargetHost()
public void set_TargetHost(string value)
}
public WebSocketSharp.Net.Cookie : object {
private string _comment
private Uri _commentUri
private bool _discard
private string _domain
private DateTime _expires
private bool _httpOnly
private string _name
private string _path
private string _port
private Int32[] _ports
private Char[] _reservedCharsForName
private Char[] _reservedCharsForValue
private bool _secure
private DateTime _timestamp
private string _value
private int _version
private bool <ExactDomain>k__BackingField
internal bool ExactDomain
internal int MaxAge
internal Int32[] Ports
public string Comment
public Uri CommentUri
public bool Discard
public string Domain
public bool Expired
public DateTime Expires
public bool HttpOnly
public string Name
public string Path
public string Port
public bool Secure
public DateTime TimeStamp
public string Value
public int Version
public void .ctor(string name, string value)
public void .ctor(string name, string value, string path)
public void .ctor(string name, string value, string path, string domain)
internal bool get_ExactDomain()
internal void set_ExactDomain(bool value)
internal int get_MaxAge()
internal Int32[] get_Ports()
public string get_Comment()
public void set_Comment(string value)
public Uri get_CommentUri()
public void set_CommentUri(Uri value)
public bool get_Discard()
public void set_Discard(bool value)
public string get_Domain()
public void set_Domain(string value)
public bool get_Expired()
public void set_Expired(bool value)
public DateTime get_Expires()
public void set_Expires(DateTime value)
public bool get_HttpOnly()
public void set_HttpOnly(bool value)
public string get_Name()
public void set_Name(string value)
public string get_Path()
public void set_Path(string value)
public string get_Port()
public void set_Port(string value)
public bool get_Secure()
public void set_Secure(bool value)
public DateTime get_TimeStamp()
public string get_Value()
public void set_Value(string value)
public int get_Version()
public void set_Version(int value)
private bool canSetName(string name, String& message)
private bool canSetValue(string value, String& message)
private int hash(int i, int j, int k, int l, int m)
private string toResponseStringVersion0()
private string toResponseStringVersion1()
private bool tryCreatePorts(string value, Int32[]& result, String& parseError)
internal string ToRequestString(Uri uri)
internal string ToResponseString()
public bool Equals(object comparand)
public int GetHashCode()
public string ToString()
}
public WebSocketSharp.Net.CookieCollection : object {
private List`1<Cookie> _list
private object _sync
internal IList`1<Cookie> List
internal IEnumerable`1<Cookie> Sorted
public int Count
public bool IsReadOnly
public bool IsSynchronized
public Cookie Item
public Cookie Item
public object SyncRoot
internal IList`1<Cookie> get_List()
internal IEnumerable`1<Cookie> get_Sorted()
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public Cookie get_Item(int index)
public Cookie get_Item(string name)
public object get_SyncRoot()
private int compareCookieWithinSort(Cookie x, Cookie y)
private int compareCookieWithinSorted(Cookie x, Cookie y)
private CookieCollection parseRequest(string value)
private CookieCollection parseResponse(string value)
private int searchCookie(Cookie cookie)
private String[] splitCookieHeaderValue(string value)
internal CookieCollection Parse(string value, bool response)
internal void SetOrRemove(Cookie cookie)
internal void SetOrRemove(CookieCollection cookies)
internal void Sort()
public void Add(Cookie cookie)
public void Add(CookieCollection cookies)
public void CopyTo(Array array, int index)
public void CopyTo(Cookie[] array, int index)
public IEnumerator GetEnumerator()
}
public WebSocketSharp.Net.CookieException : FormatException {
internal void .ctor(string message)
internal void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext)
public void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext)
}
internal WebSocketSharp.Net.EndPointListener : object {
private List`1<HttpListenerPrefix> _all
private string _defaultCertFolderPath
private IPEndPoint _endpoint
private Dictionary`2<HttpListenerPrefix, HttpListener> _prefixes
private bool _secure
private Socket _socket
private ServerSslConfiguration _sslConfig
private List`1<HttpListenerPrefix> _unhandled
private Dictionary`2<HttpConnection, HttpConnection> _unregistered
private object _unregisteredSync
public IPAddress Address
public bool IsSecure
public int Port
public ServerSslConfiguration SslConfiguration
internal void .ctor(IPAddress address, int port, bool reuseAddress, bool secure, string certificateFolderPath, ServerSslConfiguration sslConfig)
public IPAddress get_Address()
public bool get_IsSecure()
public int get_Port()
public ServerSslConfiguration get_SslConfiguration()
private void addSpecial(List`1<HttpListenerPrefix> prefixes, HttpListenerPrefix prefix)
private void checkIfRemove()
private RSACryptoServiceProvider createRSAFromFile(string filename)
private X509Certificate2 getCertificate(int port, string certificateFolderPath, X509Certificate2 defaultCertificate)
private HttpListener matchFromList(string host, string path, List`1<HttpListenerPrefix> list, HttpListenerPrefix& prefix)
private void onAccept(IAsyncResult asyncResult)
private void processAccepted(Socket socket, EndPointListener listener)
private bool removeSpecial(List`1<HttpListenerPrefix> prefixes, HttpListenerPrefix prefix)
private HttpListener searchListener(Uri uri, HttpListenerPrefix& prefix)
internal bool CertificateExists(int port, string certificateFolderPath)
internal void RemoveConnection(HttpConnection connection)
public void AddPrefix(HttpListenerPrefix prefix, HttpListener listener)
public bool BindContext(HttpListenerContext context)
public void Close()
public void RemovePrefix(HttpListenerPrefix prefix, HttpListener listener)
public void UnbindContext(HttpListenerContext context)
}
internal WebSocketSharp.Net.EndPointManager : object {
private Dictionary`2<IPAddress, Dictionary`2<int, EndPointListener>> _addressToEndpoints
private void addPrefix(string uriPrefix, HttpListener listener)
private IPAddress convertToIPAddress(string hostname)
private EndPointListener getEndPointListener(HttpListenerPrefix prefix, HttpListener listener)
private void removePrefix(string uriPrefix, HttpListener listener)
internal void RemoveEndPoint(EndPointListener listener)
public void AddListener(HttpListener listener)
public void AddPrefix(string uriPrefix, HttpListener listener)
public void RemoveListener(HttpListener listener)
public void RemovePrefix(string uriPrefix, HttpListener listener)
}
public WebSocketSharp.Net.HttpBasicIdentity : GenericIdentity {
private string _password
public string Password
internal void .ctor(string username, string password)
public string get_Password()
}
internal WebSocketSharp.Net.HttpConnection : object {
private int _bufferLength
private Byte[] _buffer
private HttpListenerContext _context
private bool _contextBound
private StringBuilder _currentLine
private InputState _inputState
private RequestStream _inputStream
private HttpListener _lastListener
private LineState _lineState
private EndPointListener _listener
private ResponseStream _outputStream
private int _position
private HttpListenerPrefix _prefix
private MemoryStream _requestBuffer
private int _reuses
private bool _secure
private Socket _socket
private Stream _stream
private object _sync
private int _timeout
private Timer _timer
public bool IsClosed
public bool IsSecure
public IPEndPoint LocalEndPoint
public HttpListenerPrefix Prefix
public IPEndPoint RemoteEndPoint
public int Reuses
public Stream Stream
internal void .ctor(Socket socket, EndPointListener listener)
public bool get_IsClosed()
public bool get_IsSecure()
public IPEndPoint get_LocalEndPoint()
public HttpListenerPrefix get_Prefix()
public void set_Prefix(HttpListenerPrefix value)
public IPEndPoint get_RemoteEndPoint()
public int get_Reuses()
public Stream get_Stream()
private void close()
private void closeSocket()
private void disposeRequestBuffer()
private void disposeStream()
private void disposeTimer()
private void init()
private void onRead(IAsyncResult asyncResult)
private void onTimeout(object state)
private bool processInput(Byte[] data, int length)
private string readLineFrom(Byte[] buffer, int offset, int length, Int32& read)
private void removeConnection()
private void unbind()
internal void Close(bool force)
public void BeginReadRequest()
public void Close()
public RequestStream GetRequestStream(long contentLength, bool chunked)
public ResponseStream GetResponseStream()
public void SendError()
public void SendError(string message, int status)
}
public WebSocketSharp.Net.HttpDigestIdentity : GenericIdentity {
private NameValueCollection _parameters
public string Algorithm
public string Cnonce
public string Nc
public string Nonce
public string Opaque
public string Qop
public string Realm
public string Response
public string Uri
internal void .ctor(NameValueCollection parameters)
public string get_Algorithm()
public string get_Cnonce()
public string get_Nc()
public string get_Nonce()
public string get_Opaque()
public string get_Qop()
public string get_Realm()
public string get_Response()
public string get_Uri()
internal bool IsValid(string password, string realm, string method, string entity)
}
internal WebSocketSharp.Net.HttpHeaderInfo : object {
private string _name
private HttpHeaderType _type
internal bool IsMultiValueInRequest
internal bool IsMultiValueInResponse
public bool IsRequest
public bool IsResponse
public string Name
public HttpHeaderType Type
internal void .ctor(string name, HttpHeaderType type)
internal bool get_IsMultiValueInRequest()
internal bool get_IsMultiValueInResponse()
public bool get_IsRequest()
public bool get_IsResponse()
public string get_Name()
public HttpHeaderType get_Type()
public bool IsMultiValue(bool response)
public bool IsRestricted(bool response)
}
internal WebSocketSharp.Net.HttpHeaderType : Enum {
public int value__
public HttpHeaderType Unspecified
public HttpHeaderType Request
public HttpHeaderType Response
public HttpHeaderType Restricted
public HttpHeaderType MultiValue
public HttpHeaderType MultiValueInRequest
public HttpHeaderType MultiValueInResponse
}
public WebSocketSharp.Net.HttpListener : object {
private AuthenticationSchemes _authSchemes
private Func`2<HttpListenerRequest, AuthenticationSchemes> _authSchemeSelector
private string _certFolderPath
private Dictionary`2<HttpConnection, HttpConnection> _connections
private object _connectionsSync
private List`1<HttpListenerContext> _ctxQueue
private object _ctxQueueSync
private Dictionary`2<HttpListenerContext, HttpListenerContext> _ctxRegistry
private object _ctxRegistrySync
private Func`2<IIdentity, NetworkCredential> _credFinder
private bool _disposed
private bool _ignoreWriteExceptions
private bool _listening
private Logger _logger
private HttpListenerPrefixCollection _prefixes
private string _realm
private bool _reuseAddress
private ServerSslConfiguration _sslConfig
private List`1<HttpListenerAsyncResult> _waitQueue
private object _waitQueueSync
private Func`2<IIdentity, NetworkCredential> CS$<>9__CachedAnonymousMethodDelegate1
internal bool IsDisposed
internal bool ReuseAddress
public AuthenticationSchemes AuthenticationSchemes
public Func`2<HttpListenerRequest, AuthenticationSchemes> AuthenticationSchemeSelector
public string CertificateFolderPath
public bool IgnoreWriteExceptions
public bool IsListening
public bool IsSupported
public Logger Log
public HttpListenerPrefixCollection Prefixes
public string Realm
public ServerSslConfiguration SslConfiguration
public bool UnsafeConnectionNtlmAuthentication
public Func`2<IIdentity, NetworkCredential> UserCredentialsFinder
internal bool get_IsDisposed()
internal bool get_ReuseAddress()
internal void set_ReuseAddress(bool value)
public AuthenticationSchemes get_AuthenticationSchemes()
public void set_AuthenticationSchemes(AuthenticationSchemes value)
public Func`2<HttpListenerRequest, AuthenticationSchemes> get_AuthenticationSchemeSelector()
public void set_AuthenticationSchemeSelector(Func`2<HttpListenerRequest, AuthenticationSchemes> value)
public string get_CertificateFolderPath()
public void set_CertificateFolderPath(string value)
public bool get_IgnoreWriteExceptions()
public void set_IgnoreWriteExceptions(bool value)
public bool get_IsListening()
public bool get_IsSupported()
public Logger get_Log()
public HttpListenerPrefixCollection get_Prefixes()
public string get_Realm()
public void set_Realm(string value)
public ServerSslConfiguration get_SslConfiguration()
public void set_SslConfiguration(ServerSslConfiguration value)
public bool get_UnsafeConnectionNtlmAuthentication()
public void set_UnsafeConnectionNtlmAuthentication(bool value)
public Func`2<IIdentity, NetworkCredential> get_UserCredentialsFinder()
public void set_UserCredentialsFinder(Func`2<IIdentity, NetworkCredential> value)
private void cleanup(bool force)
private void cleanupConnections()
private void cleanupContextRegistry()
private void cleanupWaitQueue()
private void close(bool force)
private HttpListenerContext getContextFromQueue()
private void sendServiceUnavailable()
internal void AddConnection(HttpConnection connection)
internal bool Authenticate(HttpListenerContext context)
internal HttpListenerAsyncResult BeginGetContext(HttpListenerAsyncResult asyncResult)
internal void CheckDisposed()
internal void RegisterContext(HttpListenerContext context)
internal void RemoveConnection(HttpConnection connection)
internal AuthenticationSchemes SelectAuthenticationScheme(HttpListenerContext context)
internal void UnregisterContext(HttpListenerContext context)
public void Abort()
public IAsyncResult BeginGetContext(AsyncCallback callback, object state)
public void Close()
public HttpListenerContext EndGetContext(IAsyncResult asyncResult)
public HttpListenerContext GetContext()
public void Start()
public void Stop()
private void System.IDisposable.Dispose()
private NetworkCredential <get_UserCredentialsFinder>b__0(IIdentity id)
}
internal WebSocketSharp.Net.HttpListenerAsyncResult : object {
private AsyncCallback _callback
private bool _completed
private HttpListenerContext _context
private bool _endCalled
private Exception _exception
private bool _inGet
private object _state
private object _sync
private bool _syncCompleted
private ManualResetEvent _waitHandle
internal bool EndCalled
internal bool InGet
public object AsyncState
public WaitHandle AsyncWaitHandle
public bool CompletedSynchronously
public bool IsCompleted
internal void .ctor(AsyncCallback callback, object state)
internal bool get_EndCalled()
internal void set_EndCalled(bool value)
internal bool get_InGet()
internal void set_InGet(bool value)
public object get_AsyncState()
public WaitHandle get_AsyncWaitHandle()
public bool get_CompletedSynchronously()
public bool get_IsCompleted()
private void complete(HttpListenerAsyncResult asyncResult)
internal void Complete(Exception exception)
internal void Complete(HttpListenerContext context)
internal void Complete(HttpListenerContext context, bool syncCompleted)
internal HttpListenerContext GetContext()
}
public WebSocketSharp.Net.HttpListenerContext : object {
private HttpConnection _connection
private string _error
private int _errorStatus
private HttpListener _listener
private HttpListenerRequest _request
private HttpListenerResponse _response
private IPrincipal _user
internal HttpConnection Connection
internal string ErrorMessage
internal int ErrorStatus
internal bool HasError
internal HttpListener Listener
public HttpListenerRequest Request
public HttpListenerResponse Response
public IPrincipal User
internal void .ctor(HttpConnection connection)
internal HttpConnection get_Connection()
internal string get_ErrorMessage()
internal void set_ErrorMessage(string value)
internal int get_ErrorStatus()
internal void set_ErrorStatus(int value)
internal bool get_HasError()
internal HttpListener get_Listener()
internal void set_Listener(HttpListener value)
public HttpListenerRequest get_Request()
public HttpListenerResponse get_Response()
public IPrincipal get_User()
internal void set_User(IPrincipal value)
public HttpListenerWebSocketContext AcceptWebSocket(string protocol)
}
public WebSocketSharp.Net.HttpListenerException : Win32Exception {
public int ErrorCode
protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext)
public void .ctor(int errorCode)
public void .ctor(int errorCode, string message)
public int get_ErrorCode()
}
internal WebSocketSharp.Net.HttpListenerPrefix : object {
private IPAddress[] _addresses
private string _host
private HttpListener _listener
private string _original
private string _path
private ushort _port
private bool _secure
public IPAddress[] Addresses
public string Host
public bool IsSecure
public HttpListener Listener
public string Path
public int Port
internal void .ctor(string uriPrefix)
public IPAddress[] get_Addresses()
public void set_Addresses(IPAddress[] value)
public string get_Host()
public bool get_IsSecure()
public HttpListener get_Listener()
public void set_Listener(HttpListener value)
public string get_Path()
public int get_Port()
private void parse(string uriPrefix)
public void CheckPrefix(string uriPrefix)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public WebSocketSharp.Net.HttpListenerPrefixCollection : object {
private HttpListener _listener
private List`1<string> _prefixes
public int Count
public bool IsReadOnly
public bool IsSynchronized
internal void .ctor(HttpListener listener)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public void Add(string uriPrefix)
public void Clear()
public bool Contains(string uriPrefix)
public void CopyTo(Array array, int offset)
public void CopyTo(String[] array, int offset)
public IEnumerator`1<string> GetEnumerator()
public bool Remove(string uriPrefix)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public WebSocketSharp.Net.HttpListenerRequest : object {
private Byte[] _100continue
private String[] _acceptTypes
private bool _chunked
private Encoding _contentEncoding
private long _contentLength
private bool _contentLengthSet
private HttpListenerContext _context
private CookieCollection _cookies
private WebHeaderCollection _headers
private Guid _identifier
private Stream _inputStream
private bool _keepAlive
private bool _keepAliveSet
private string _method
private NameValueCollection _queryString
private Uri _referer
private string _uri
private Uri _url
private String[] _userLanguages
private Version _version
private bool _websocketRequest
private bool _websocketRequestSet
public String[] AcceptTypes
public int ClientCertificateError
public Encoding ContentEncoding
public long ContentLength64
public string ContentType
public CookieCollection Cookies
public bool HasEntityBody
public NameValueCollection Headers
public string HttpMethod
public Stream InputStream
public bool IsAuthenticated
public bool IsLocal
public bool IsSecureConnection
public bool IsWebSocketRequest
public bool KeepAlive
public IPEndPoint LocalEndPoint
public Version ProtocolVersion
public NameValueCollection QueryString
public string RawUrl
public IPEndPoint RemoteEndPoint
public Guid RequestTraceIdentifier
public Uri Url
public Uri UrlReferrer
public string UserAgent
public string UserHostAddress
public string UserHostName
public String[] UserLanguages
internal void .ctor(HttpListenerContext context)
public String[] get_AcceptTypes()
public int get_ClientCertificateError()
public Encoding get_ContentEncoding()
public long get_ContentLength64()
public string get_ContentType()
public CookieCollection get_Cookies()
public bool get_HasEntityBody()
public NameValueCollection get_Headers()
public string get_HttpMethod()
public Stream get_InputStream()
public bool get_IsAuthenticated()
public bool get_IsLocal()
public bool get_IsSecureConnection()
public bool get_IsWebSocketRequest()
public bool get_KeepAlive()
public IPEndPoint get_LocalEndPoint()
public Version get_ProtocolVersion()
public NameValueCollection get_QueryString()
public string get_RawUrl()
public IPEndPoint get_RemoteEndPoint()
public Guid get_RequestTraceIdentifier()
public Uri get_Url()
public Uri get_UrlReferrer()
public string get_UserAgent()
public string get_UserHostAddress()
public string get_UserHostName()
public String[] get_UserLanguages()
private bool tryCreateVersion(string version, Version& result)
internal void AddHeader(string header)
internal void FinishInitialization()
internal bool FlushInput()
internal void SetRequestLine(string requestLine)
public IAsyncResult BeginGetClientCertificate(AsyncCallback requestCallback, object state)
public X509Certificate2 EndGetClientCertificate(IAsyncResult asyncResult)
public X509Certificate2 GetClientCertificate()
public string ToString()
}
public WebSocketSharp.Net.HttpListenerResponse : object {
private bool _closeConnection
private Encoding _contentEncoding
private long _contentLength
private string _contentType
private HttpListenerContext _context
private CookieCollection _cookies
private bool _disposed
private WebHeaderCollection _headers
private bool _headersSent
private bool _keepAlive
private string _location
private ResponseStream _outputStream
private bool _sendChunked
private int _statusCode
private string _statusDescription
private Version _version
internal bool CloseConnection
internal bool HeadersSent
public Encoding ContentEncoding
public long ContentLength64
public string ContentType
public CookieCollection Cookies
public WebHeaderCollection Headers
public bool KeepAlive
public Stream OutputStream
public Version ProtocolVersion
public string RedirectLocation
public bool SendChunked
public int StatusCode
public string StatusDescription
internal void .ctor(HttpListenerContext context)
internal bool get_CloseConnection()
internal void set_CloseConnection(bool value)
internal bool get_HeadersSent()
internal void set_HeadersSent(bool value)
public Encoding get_ContentEncoding()
public void set_ContentEncoding(Encoding value)
public long get_ContentLength64()
public void set_ContentLength64(long value)
public string get_ContentType()
public void set_ContentType(string value)
public CookieCollection get_Cookies()
public void set_Cookies(CookieCollection value)
public WebHeaderCollection get_Headers()
public void set_Headers(WebHeaderCollection value)
public bool get_KeepAlive()
public void set_KeepAlive(bool value)
public Stream get_OutputStream()
public Version get_ProtocolVersion()
public void set_ProtocolVersion(Version value)
public string get_RedirectLocation()
public void set_RedirectLocation(string value)
public bool get_SendChunked()
public void set_SendChunked(bool value)
public int get_StatusCode()
public void set_StatusCode(int value)
public string get_StatusDescription()
public void set_StatusDescription(string value)
private bool canAddOrUpdate(Cookie cookie)
private void checkDisposed()
private void checkDisposedOrHeadersSent()
private void close(bool force)
private IEnumerable`1<Cookie> findCookie(Cookie cookie)
internal WebHeaderCollection WriteHeadersTo(MemoryStream destination)
public void Abort()
public void AddHeader(string name, string value)
public void AppendCookie(Cookie cookie)
public void AppendHeader(string name, string value)
public void Close()
public void Close(Byte[] responseEntity, bool willBlock)
public void CopyFrom(HttpListenerResponse templateResponse)
public void Redirect(string url)
public void SetCookie(Cookie cookie)
private void System.IDisposable.Dispose()
}
public WebSocketSharp.Net.HttpRequestHeader : Enum {
public int value__
public HttpRequestHeader CacheControl
public HttpRequestHeader Connection
public HttpRequestHeader Date
public HttpRequestHeader KeepAlive
public HttpRequestHeader Pragma
public HttpRequestHeader Trailer
public HttpRequestHeader TransferEncoding
public HttpRequestHeader Upgrade
public HttpRequestHeader Via
public HttpRequestHeader Warning
public HttpRequestHeader Allow
public HttpRequestHeader ContentLength
public HttpRequestHeader ContentType
public HttpRequestHeader ContentEncoding
public HttpRequestHeader ContentLanguage
public HttpRequestHeader ContentLocation
public HttpRequestHeader ContentMd5
public HttpRequestHeader ContentRange
public HttpRequestHeader Expires
public HttpRequestHeader LastModified
public HttpRequestHeader Accept
public HttpRequestHeader AcceptCharset
public HttpRequestHeader AcceptEncoding
public HttpRequestHeader AcceptLanguage
public HttpRequestHeader Authorization
public HttpRequestHeader Cookie
public HttpRequestHeader Expect
public HttpRequestHeader From
public HttpRequestHeader Host
public HttpRequestHeader IfMatch
public HttpRequestHeader IfModifiedSince
public HttpRequestHeader IfNoneMatch
public HttpRequestHeader IfRange
public HttpRequestHeader IfUnmodifiedSince
public HttpRequestHeader MaxForwards
public HttpRequestHeader ProxyAuthorization
public HttpRequestHeader Referer
public HttpRequestHeader Range
public HttpRequestHeader Te
public HttpRequestHeader Translate
public HttpRequestHeader UserAgent
public HttpRequestHeader SecWebSocketKey
public HttpRequestHeader SecWebSocketExtensions
public HttpRequestHeader SecWebSocketProtocol
public HttpRequestHeader SecWebSocketVersion
}
public WebSocketSharp.Net.HttpResponseHeader : Enum {
public int value__
public HttpResponseHeader CacheControl
public HttpResponseHeader Connection
public HttpResponseHeader Date
public HttpResponseHeader KeepAlive
public HttpResponseHeader Pragma
public HttpResponseHeader Trailer
public HttpResponseHeader TransferEncoding
public HttpResponseHeader Upgrade
public HttpResponseHeader Via
public HttpResponseHeader Warning
public HttpResponseHeader Allow
public HttpResponseHeader ContentLength
public HttpResponseHeader ContentType
public HttpResponseHeader ContentEncoding
public HttpResponseHeader ContentLanguage
public HttpResponseHeader ContentLocation
public HttpResponseHeader ContentMd5
public HttpResponseHeader ContentRange
public HttpResponseHeader Expires
public HttpResponseHeader LastModified
public HttpResponseHeader AcceptRanges
public HttpResponseHeader Age
public HttpResponseHeader ETag
public HttpResponseHeader Location
public HttpResponseHeader ProxyAuthenticate
public HttpResponseHeader RetryAfter
public HttpResponseHeader Server
public HttpResponseHeader SetCookie
public HttpResponseHeader Vary
public HttpResponseHeader WwwAuthenticate
public HttpResponseHeader SecWebSocketExtensions
public HttpResponseHeader SecWebSocketAccept
public HttpResponseHeader SecWebSocketProtocol
public HttpResponseHeader SecWebSocketVersion
}
public WebSocketSharp.Net.HttpStatusCode : Enum {
public int value__
public HttpStatusCode Continue
public HttpStatusCode SwitchingProtocols
public HttpStatusCode OK
public HttpStatusCode Created
public HttpStatusCode Accepted
public HttpStatusCode NonAuthoritativeInformation
public HttpStatusCode NoContent
public HttpStatusCode ResetContent
public HttpStatusCode PartialContent
public HttpStatusCode MultipleChoices
public HttpStatusCode Ambiguous
public HttpStatusCode MovedPermanently
public HttpStatusCode Moved
public HttpStatusCode Found
public HttpStatusCode Redirect
public HttpStatusCode SeeOther
public HttpStatusCode RedirectMethod
public HttpStatusCode NotModified
public HttpStatusCode UseProxy
public HttpStatusCode Unused
public HttpStatusCode TemporaryRedirect
public HttpStatusCode RedirectKeepVerb
public HttpStatusCode BadRequest
public HttpStatusCode Unauthorized
public HttpStatusCode PaymentRequired
public HttpStatusCode Forbidden
public HttpStatusCode NotFound
public HttpStatusCode MethodNotAllowed
public HttpStatusCode NotAcceptable
public HttpStatusCode ProxyAuthenticationRequired
public HttpStatusCode RequestTimeout
public HttpStatusCode Conflict
public HttpStatusCode Gone
public HttpStatusCode LengthRequired
public HttpStatusCode PreconditionFailed
public HttpStatusCode RequestEntityTooLarge
public HttpStatusCode RequestUriTooLong
public HttpStatusCode UnsupportedMediaType
public HttpStatusCode RequestedRangeNotSatisfiable
public HttpStatusCode ExpectationFailed
public HttpStatusCode InternalServerError
public HttpStatusCode NotImplemented
public HttpStatusCode BadGateway
public HttpStatusCode ServiceUnavailable
public HttpStatusCode GatewayTimeout
public HttpStatusCode HttpVersionNotSupported
}
internal WebSocketSharp.Net.HttpStreamAsyncResult : object {
private Byte[] _buffer
private AsyncCallback _callback
private bool _completed
private int _count
private Exception _exception
private int _offset
private object _state
private object _sync
private int _syncRead
private ManualResetEvent _waitHandle
internal Byte[] Buffer
internal int Count
internal Exception Exception
internal bool HasException
internal int Offset
internal int SyncRead
public object AsyncState
public WaitHandle AsyncWaitHandle
public bool CompletedSynchronously
public bool IsCompleted
internal void .ctor(AsyncCallback callback, object state)
internal Byte[] get_Buffer()
internal void set_Buffer(Byte[] value)
internal int get_Count()
internal void set_Count(int value)
internal Exception get_Exception()
internal bool get_HasException()
internal int get_Offset()
internal void set_Offset(int value)
internal int get_SyncRead()
internal void set_SyncRead(int value)
public object get_AsyncState()
public WaitHandle get_AsyncWaitHandle()
public bool get_CompletedSynchronously()
public bool get_IsCompleted()
internal void Complete()
internal void Complete(Exception exception)
private void <Complete>b__0(IAsyncResult ar)
}
internal WebSocketSharp.Net.HttpUtility : object {
private Dictionary`2<string, char> _entities
private Char[] _hexChars
private object _sync
private int getChar(Byte[] bytes, int offset, int length)
private int getChar(string s, int offset, int length)
private Char[] getChars(MemoryStream buffer, Encoding encoding)
private Dictionary`2<string, char> getEntities()
private int getInt(byte b)
private void initEntities()
private bool notEncoded(char c)
private void urlEncode(char c, Stream result, bool unicode)
private void urlPathEncode(char c, Stream result)
private void writeCharBytes(char c, IList buffer, Encoding encoding)
internal Uri CreateRequestUrl(string requestUri, string host, bool websocketRequest, bool secure)
internal IPrincipal CreateUser(string response, AuthenticationSchemes scheme, string realm, string method, Func`2<IIdentity, NetworkCredential> credentialsFinder)
internal Encoding GetEncoding(string contentType)
internal NameValueCollection InternalParseQueryString(string query, Encoding encoding)
internal string InternalUrlDecode(Byte[] bytes, int offset, int count, Encoding encoding)
internal Byte[] InternalUrlDecodeToBytes(Byte[] bytes, int offset, int count)
internal Byte[] InternalUrlEncodeToBytes(Byte[] bytes, int offset, int count)
internal Byte[] InternalUrlEncodeUnicodeToBytes(string s)
public string HtmlAttributeEncode(string s)
public void HtmlAttributeEncode(string s, TextWriter output)
public string HtmlDecode(string s)
public void HtmlDecode(string s, TextWriter output)
public string HtmlEncode(string s)
public void HtmlEncode(string s, TextWriter output)
public NameValueCollection ParseQueryString(string query)
public NameValueCollection ParseQueryString(string query, Encoding encoding)
public string UrlDecode(string s)
public string UrlDecode(string s, Encoding encoding)
public string UrlDecode(Byte[] bytes, Encoding encoding)
public string UrlDecode(Byte[] bytes, int offset, int count, Encoding encoding)
public Byte[] UrlDecodeToBytes(Byte[] bytes)
public Byte[] UrlDecodeToBytes(string s)
public Byte[] UrlDecodeToBytes(string s, Encoding encoding)
public Byte[] UrlDecodeToBytes(Byte[] bytes, int offset, int count)
public string UrlEncode(Byte[] bytes)
public string UrlEncode(string s)
public string UrlEncode(string s, Encoding encoding)
public string UrlEncode(Byte[] bytes, int offset, int count)
public Byte[] UrlEncodeToBytes(Byte[] bytes)
public Byte[] UrlEncodeToBytes(string s)
public Byte[] UrlEncodeToBytes(string s, Encoding encoding)
public Byte[] UrlEncodeToBytes(Byte[] bytes, int offset, int count)
public string UrlEncodeUnicode(string s)
public Byte[] UrlEncodeUnicodeToBytes(string s)
public string UrlPathEncode(string s)
}
public WebSocketSharp.Net.HttpVersion : object {
public Version Version10
public Version Version11
}
internal WebSocketSharp.Net.InputChunkState : Enum {
public int value__
public InputChunkState None
public InputChunkState Data
public InputChunkState DataEnded
public InputChunkState Trailer
public InputChunkState End
}
internal WebSocketSharp.Net.InputState : Enum {
public int value__
public InputState RequestLine
public InputState Headers
}
internal WebSocketSharp.Net.LineState : Enum {
public int value__
public LineState None
public LineState Cr
public LineState Lf
}
public WebSocketSharp.Net.NetworkCredential : object {
private string _domain
private string _password
private String[] _roles
private string _username
public string Domain
public string Password
public String[] Roles
public string UserName
public void .ctor(string username, string password)
public void .ctor(string username, string password, string domain, String[] roles)
public string get_Domain()
internal void set_Domain(string value)
public string get_Password()
internal void set_Password(string value)
public String[] get_Roles()
internal void set_Roles(String[] value)
public string get_UserName()
internal void set_UserName(string value)
}
internal WebSocketSharp.Net.QueryStringCollection : NameValueCollection {
public string ToString()
}
internal WebSocketSharp.Net.ReadBufferState : object {
private HttpStreamAsyncResult _asyncResult
private Byte[] _buffer
private int _count
private int _initialCount
private int _offset
public HttpStreamAsyncResult AsyncResult
public Byte[] Buffer
public int Count
public int InitialCount
public int Offset
public void .ctor(Byte[] buffer, int offset, int count, HttpStreamAsyncResult asyncResult)
public HttpStreamAsyncResult get_AsyncResult()
public void set_AsyncResult(HttpStreamAsyncResult value)
public Byte[] get_Buffer()
public void set_Buffer(Byte[] value)
public int get_Count()
public void set_Count(int value)
public int get_InitialCount()
public void set_InitialCount(int value)
public int get_Offset()
public void set_Offset(int value)
}
internal WebSocketSharp.Net.RequestStream : Stream {
private long _bodyLeft
private Byte[] _buffer
private int _count
private bool _disposed
private int _offset
private Stream _stream
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
internal void .ctor(Stream stream, Byte[] buffer, int offset, int count)
internal void .ctor(Stream stream, Byte[] buffer, int offset, int count, long contentLength)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
private int fillFromBuffer(Byte[] buffer, int offset, int count)
public IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public void Close()
public int EndRead(IAsyncResult asyncResult)
public void EndWrite(IAsyncResult asyncResult)
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
}
internal WebSocketSharp.Net.ResponseStream : Stream {
private MemoryStream _body
private Byte[] _crlf
private bool _disposed
private HttpListenerResponse _response
private bool _sendChunked
private Stream _stream
private Action`3<Byte[], int, int> _write
private Action`3<Byte[], int, int> _writeBody
private Action`3<Byte[], int, int> _writeChunked
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
internal void .ctor(Stream stream, HttpListenerResponse response, bool ignoreWriteExceptions)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
private bool flush(bool closing)
private void flushBody(bool closing)
private bool flushHeaders(bool closing)
private Byte[] getChunkSizeBytes(int size, bool final)
private void writeChunked(Byte[] buffer, int offset, int count)
private void writeChunkedWithoutThrowingException(Byte[] buffer, int offset, int count)
private void writeWithoutThrowingException(Byte[] buffer, int offset, int count)
internal void Close(bool force)
internal void InternalWrite(Byte[] buffer, int offset, int count)
public IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public void Close()
protected void Dispose(bool disposing)
public int EndRead(IAsyncResult asyncResult)
public void EndWrite(IAsyncResult asyncResult)
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
}
public WebSocketSharp.Net.ServerSslConfiguration : SslConfiguration {
private X509Certificate2 _cert
private bool _clientCertRequired
public bool ClientCertificateRequired
public RemoteCertificateValidationCallback ClientCertificateValidationCallback
public X509Certificate2 ServerCertificate
public void .ctor(X509Certificate2 serverCertificate)
public void .ctor(X509Certificate2 serverCertificate, bool clientCertificateRequired, SslProtocols enabledSslProtocols, bool checkCertificateRevocation)
public bool get_ClientCertificateRequired()
public void set_ClientCertificateRequired(bool value)
public RemoteCertificateValidationCallback get_ClientCertificateValidationCallback()
public void set_ClientCertificateValidationCallback(RemoteCertificateValidationCallback value)
public X509Certificate2 get_ServerCertificate()
public void set_ServerCertificate(X509Certificate2 value)
}
public WebSocketSharp.Net.SslConfiguration : object {
private LocalCertificateSelectionCallback _certSelectionCallback
private RemoteCertificateValidationCallback _certValidationCallback
private bool _checkCertRevocation
private SslProtocols _enabledProtocols
private LocalCertificateSelectionCallback CS$<>9__CachedAnonymousMethodDelegate1
private RemoteCertificateValidationCallback CS$<>9__CachedAnonymousMethodDelegate3
protected LocalCertificateSelectionCallback CertificateSelectionCallback
protected RemoteCertificateValidationCallback CertificateValidationCallback
public bool CheckCertificateRevocation
public SslProtocols EnabledSslProtocols
protected void .ctor(SslProtocols enabledSslProtocols, bool checkCertificateRevocation)
protected LocalCertificateSelectionCallback get_CertificateSelectionCallback()
protected void set_CertificateSelectionCallback(LocalCertificateSelectionCallback value)
protected RemoteCertificateValidationCallback get_CertificateValidationCallback()
protected void set_CertificateValidationCallback(RemoteCertificateValidationCallback value)
public bool get_CheckCertificateRevocation()
public void set_CheckCertificateRevocation(bool value)
public SslProtocols get_EnabledSslProtocols()
public void set_EnabledSslProtocols(SslProtocols value)
private X509Certificate <get_CertificateSelectionCallback>b__0(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, String[] acceptableIssuers)
private bool <get_CertificateValidationCallback>b__2(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
}
public WebSocketSharp.Net.WebHeaderCollection : NameValueCollection {
private Dictionary`2<string, HttpHeaderInfo> _headers
private bool _internallyUsed
private HttpHeaderType _state
internal HttpHeaderType State
public String[] AllKeys
public int Count
public string Item
public string Item
public KeysCollection Keys
internal void .ctor(HttpHeaderType state, bool internallyUsed)
protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext)
internal HttpHeaderType get_State()
public String[] get_AllKeys()
public int get_Count()
public string get_Item(HttpRequestHeader header)
public void set_Item(HttpRequestHeader header, string value)
public string get_Item(HttpResponseHeader header)
public void set_Item(HttpResponseHeader header, string value)
public KeysCollection get_Keys()
private void add(string name, string value, bool ignoreRestricted)
private void addWithoutCheckingName(string name, string value)
private void addWithoutCheckingNameAndRestricted(string name, string value)
private int checkColonSeparated(string header)
private HttpHeaderType checkHeaderType(string name)
private string checkName(string name)
private void checkRestricted(string name)
private void checkState(bool response)
private string checkValue(string value)
private string convert(string key)
private void doWithCheckingState(Action`2<string, string> action, string name, string value, bool setState)
private void doWithCheckingState(Action`2<string, string> action, string name, string value, bool response, bool setState)
private void doWithoutCheckingName(Action`2<string, string> action, string name, string value)
private HttpHeaderInfo getHeaderInfo(string name)
private bool isRestricted(string name, bool response)
private void removeWithoutCheckingName(string name, string unuse)
private void setWithoutCheckingName(string name, string value)
internal string Convert(HttpRequestHeader header)
internal string Convert(HttpResponseHeader header)
internal void InternalRemove(string name)
internal void InternalSet(string header, bool response)
internal void InternalSet(string name, string value, bool response)
internal bool IsHeaderName(string name)
internal bool IsHeaderValue(string value)
internal bool IsMultiValue(string headerName, bool response)
internal string ToStringMultiValue(bool response)
protected void AddWithoutValidate(string headerName, string headerValue)
public void Add(string header)
public void Add(HttpRequestHeader header, string value)
public void Add(HttpResponseHeader header, string value)
public void Add(string name, string value)
public void Clear()
public string Get(int index)
public string Get(string name)
public IEnumerator GetEnumerator()
public string GetKey(int index)
public String[] GetValues(int index)
public String[] GetValues(string header)
public void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext)
public bool IsRestricted(string headerName)
public bool IsRestricted(string headerName, bool response)
public void OnDeserialization(object sender)
public void Remove(HttpRequestHeader header)
public void Remove(HttpResponseHeader header)
public void Remove(string name)
public void Set(HttpRequestHeader header, string value)
public void Set(HttpResponseHeader header, string value)
public void Set(string name, string value)
public Byte[] ToByteArray()
public string ToString()
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext)
}
public WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext : WebSocketContext {
private HttpListenerContext _context
private WebSocket _websocket
internal Logger Log
internal Stream Stream
public CookieCollection CookieCollection
public NameValueCollection Headers
public string Host
public bool IsAuthenticated
public bool IsLocal
public bool IsSecureConnection
public bool IsWebSocketRequest
public string Origin
public NameValueCollection QueryString
public Uri RequestUri
public string SecWebSocketKey
public IEnumerable`1<string> SecWebSocketProtocols
public string SecWebSocketVersion
public IPEndPoint ServerEndPoint
public IPrincipal User
public IPEndPoint UserEndPoint
public WebSocket WebSocket
internal void .ctor(HttpListenerContext context, string protocol)
internal Logger get_Log()
internal Stream get_Stream()
public CookieCollection get_CookieCollection()
public NameValueCollection get_Headers()
public string get_Host()
public bool get_IsAuthenticated()
public bool get_IsLocal()
public bool get_IsSecureConnection()
public bool get_IsWebSocketRequest()
public string get_Origin()
public NameValueCollection get_QueryString()
public Uri get_RequestUri()
public string get_SecWebSocketKey()
public IEnumerable`1<string> get_SecWebSocketProtocols()
public string get_SecWebSocketVersion()
public IPEndPoint get_ServerEndPoint()
public IPrincipal get_User()
public IPEndPoint get_UserEndPoint()
public WebSocket get_WebSocket()
internal void Close()
internal void Close(HttpStatusCode code)
public string ToString()
}
internal WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext : WebSocketContext {
private CookieCollection _cookies
private Logger _logger
private NameValueCollection _queryString
private HttpRequest _request
private bool _secure
private Stream _stream
private TcpClient _tcpClient
private Uri _uri
private IPrincipal _user
private WebSocket _websocket
internal string HttpMethod
internal Logger Log
internal Stream Stream
public CookieCollection CookieCollection
public NameValueCollection Headers
public string Host
public bool IsAuthenticated
public bool IsLocal
public bool IsSecureConnection
public bool IsWebSocketRequest
public string Origin
public NameValueCollection QueryString
public Uri RequestUri
public string SecWebSocketKey
public IEnumerable`1<string> SecWebSocketProtocols
public string SecWebSocketVersion
public IPEndPoint ServerEndPoint
public IPrincipal User
public IPEndPoint UserEndPoint
public WebSocket WebSocket
internal void .ctor(TcpClient tcpClient, string protocol, bool secure, ServerSslConfiguration sslConfig, Logger logger)
internal string get_HttpMethod()
internal Logger get_Log()
internal Stream get_Stream()
public CookieCollection get_CookieCollection()
public NameValueCollection get_Headers()
public string get_Host()
public bool get_IsAuthenticated()
public bool get_IsLocal()
public bool get_IsSecureConnection()
public bool get_IsWebSocketRequest()
public string get_Origin()
public NameValueCollection get_QueryString()
public Uri get_RequestUri()
public string get_SecWebSocketKey()
public IEnumerable`1<string> get_SecWebSocketProtocols()
public string get_SecWebSocketVersion()
public IPEndPoint get_ServerEndPoint()
public IPrincipal get_User()
public IPEndPoint get_UserEndPoint()
public WebSocket get_WebSocket()
internal void Close()
internal void Close(HttpStatusCode code)
internal void SendAuthenticationChallenge(string challenge)
internal void SetUser(IPrincipal value)
public string ToString()
}
public WebSocketSharp.Net.WebSockets.WebSocketContext : object {
public CookieCollection CookieCollection
public NameValueCollection Headers
public string Host
public bool IsAuthenticated
public bool IsLocal
public bool IsSecureConnection
public bool IsWebSocketRequest
public string Origin
public NameValueCollection QueryString
public Uri RequestUri
public string SecWebSocketKey
public IEnumerable`1<string> SecWebSocketProtocols
public string SecWebSocketVersion
public IPEndPoint ServerEndPoint
public IPrincipal User
public IPEndPoint UserEndPoint
public WebSocket WebSocket
public CookieCollection get_CookieCollection()
public NameValueCollection get_Headers()
public string get_Host()
public bool get_IsAuthenticated()
public bool get_IsLocal()
public bool get_IsSecureConnection()
public bool get_IsWebSocketRequest()
public string get_Origin()
public NameValueCollection get_QueryString()
public Uri get_RequestUri()
public string get_SecWebSocketKey()
public IEnumerable`1<string> get_SecWebSocketProtocols()
public string get_SecWebSocketVersion()
public IPEndPoint get_ServerEndPoint()
public IPrincipal get_User()
public IPEndPoint get_UserEndPoint()
public WebSocket get_WebSocket()
}
public WebSocketSharp.Opcode : Enum {
public byte value__
public Opcode Cont
public Opcode Text
public Opcode Binary
public Opcode Close
public Opcode Ping
public Opcode Pong
}
internal WebSocketSharp.PayloadData : object {
private Byte[] _data
private long _extDataLength
private long _length
public PayloadData Empty
public ulong MaxLength
internal long ExtensionDataLength
internal bool IncludesReservedCloseStatusCode
public Byte[] ApplicationData
public Byte[] ExtensionData
public ulong Length
internal void .ctor(Byte[] data)
internal void .ctor(Byte[] data, long length)
internal long get_ExtensionDataLength()
internal void set_ExtensionDataLength(long value)
internal bool get_IncludesReservedCloseStatusCode()
public Byte[] get_ApplicationData()
public Byte[] get_ExtensionData()
public ulong get_Length()
internal void Mask(Byte[] key)
public IEnumerator`1<byte> GetEnumerator()
public Byte[] ToArray()
public string ToString()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
internal WebSocketSharp.Rsv : Enum {
public byte value__
public Rsv Off
public Rsv On
}
public WebSocketSharp.Server.HttpRequestEventArgs : EventArgs {
private HttpListenerRequest _request
private HttpListenerResponse _response
public HttpListenerRequest Request
public HttpListenerResponse Response
internal void .ctor(HttpListenerContext context)
public HttpListenerRequest get_Request()
public HttpListenerResponse get_Response()
}
public WebSocketSharp.Server.HttpServer : object {
private IPAddress _address
private string _hostname
private HttpListener _listener
private Logger _logger
private int _port
private Thread _receiveThread
private string _rootPath
private bool _secure
private WebSocketServiceManager _services
private ServerState modreq(System.Runtime.CompilerServices.IsVolatile) _state
private object _sync
private bool _windows
private EventHandler`1<HttpRequestEventArgs> OnConnect
private EventHandler`1<HttpRequestEventArgs> OnDelete
private EventHandler`1<HttpRequestEventArgs> OnGet
private EventHandler`1<HttpRequestEventArgs> OnHead
private EventHandler`1<HttpRequestEventArgs> OnOptions
private EventHandler`1<HttpRequestEventArgs> OnPatch
private EventHandler`1<HttpRequestEventArgs> OnPost
private EventHandler`1<HttpRequestEventArgs> OnPut
private EventHandler`1<HttpRequestEventArgs> OnTrace
public IPAddress Address
public AuthenticationSchemes AuthenticationSchemes
public bool IsListening
public bool IsSecure
public bool KeepClean
public Logger Log
public int Port
public string Realm
public bool ReuseAddress
public string RootPath
public ServerSslConfiguration SslConfiguration
public Func`2<IIdentity, NetworkCredential> UserCredentialsFinder
public TimeSpan WaitTime
public WebSocketServiceManager WebSocketServices
public void .ctor(int port)
public void .ctor(string url)
public void .ctor(int port, bool secure)
public void .ctor(IPAddress address, int port)
public void .ctor(IPAddress address, int port, bool secure)
public IPAddress get_Address()
public AuthenticationSchemes get_AuthenticationSchemes()
public void set_AuthenticationSchemes(AuthenticationSchemes value)
public bool get_IsListening()
public bool get_IsSecure()
public bool get_KeepClean()
public void set_KeepClean(bool value)
public Logger get_Log()
public int get_Port()
public string get_Realm()
public void set_Realm(string value)
public bool get_ReuseAddress()
public void set_ReuseAddress(bool value)
public string get_RootPath()
public void set_RootPath(string value)
public ServerSslConfiguration get_SslConfiguration()
public void set_SslConfiguration(ServerSslConfiguration value)
public Func`2<IIdentity, NetworkCredential> get_UserCredentialsFinder()
public void set_UserCredentialsFinder(Func`2<IIdentity, NetworkCredential> value)
public TimeSpan get_WaitTime()
public void set_WaitTime(TimeSpan value)
public WebSocketServiceManager get_WebSocketServices()
public void add_OnConnect(EventHandler`1<HttpRequestEventArgs> value)
public void remove_OnConnect(EventHandler`1<HttpRequestEventArgs> value)
public void add_OnDelete(EventHandler`1<HttpRequestEventArgs> value)
public void remove_OnDelete(EventHandler`1<HttpRequestEventArgs> value)
public void add_OnGet(EventHandler`1<HttpRequestEventArgs> value)
public void remove_OnGet(EventHandler`1<HttpRequestEventArgs> value)
public void add_OnHead(EventHandler`1<HttpRequestEventArgs> value)
public void remove_OnHead(EventHandler`1<HttpRequestEventArgs> value)
public void add_OnOptions(EventHandler`1<HttpRequestEventArgs> value)
public void remove_OnOptions(EventHandler`1<HttpRequestEventArgs> value)
public void add_OnPatch(EventHandler`1<HttpRequestEventArgs> value)
public void remove_OnPatch(EventHandler`1<HttpRequestEventArgs> value)
public void add_OnPost(EventHandler`1<HttpRequestEventArgs> value)
public void remove_OnPost(EventHandler`1<HttpRequestEventArgs> value)
public void add_OnPut(EventHandler`1<HttpRequestEventArgs> value)
public void remove_OnPut(EventHandler`1<HttpRequestEventArgs> value)
public void add_OnTrace(EventHandler`1<HttpRequestEventArgs> value)
public void remove_OnTrace(EventHandler`1<HttpRequestEventArgs> value)
private void abort()
private string checkIfCertificateExists()
private void init(string hostname, IPAddress address, int port, bool secure)
private void processRequest(HttpListenerContext context)
private void processRequest(HttpListenerWebSocketContext context)
private void receiveRequest()
private void startReceiving()
private void stopReceiving(int millisecondsTimeout)
private bool tryCreateUri(string uriString, Uri& result, String& message)
public void AddWebSocketService(string path, Func`1<TBehavior> initializer)
public void AddWebSocketService(string path)
public Byte[] GetFile(string path)
public bool RemoveWebSocketService(string path)
public void Start()
public void Stop()
public void Stop(ushort code, string reason)
public void Stop(CloseStatusCode code, string reason)
private TBehaviorWithNew <AddWebSocketService>b__3()
}
public WebSocketSharp.Server.IWebSocketSession {
public WebSocketContext Context
public string ID
public string Protocol
public DateTime StartTime
public WebSocketState State
public WebSocketContext get_Context()
public string get_ID()
public string get_Protocol()
public DateTime get_StartTime()
public WebSocketState get_State()
}
internal WebSocketSharp.Server.ServerState : Enum {
public int value__
public ServerState Ready
public ServerState Start
public ServerState ShuttingDown
public ServerState Stop
}
public WebSocketSharp.Server.WebSocketBehavior : object {
private WebSocketContext _context
private Func`3<CookieCollection, CookieCollection, bool> _cookiesValidator
private bool _emitOnPing
private string _id
private bool _ignoreExtensions
private Func`2<string, bool> _originValidator
private string _protocol
private WebSocketSessionManager _sessions
private DateTime _startTime
private WebSocket _websocket
protected Logger Log
protected WebSocketSessionManager Sessions
public WebSocketContext Context
public Func`3<CookieCollection, CookieCollection, bool> CookiesValidator
public bool EmitOnPing
public string ID
public bool IgnoreExtensions
public Func`2<string, bool> OriginValidator
public string Protocol
public DateTime StartTime
public WebSocketState State
protected Logger get_Log()
protected WebSocketSessionManager get_Sessions()
public WebSocketContext get_Context()
public Func`3<CookieCollection, CookieCollection, bool> get_CookiesValidator()
public void set_CookiesValidator(Func`3<CookieCollection, CookieCollection, bool> value)
public bool get_EmitOnPing()
public void set_EmitOnPing(bool value)
public string get_ID()
public bool get_IgnoreExtensions()
public void set_IgnoreExtensions(bool value)
public Func`2<string, bool> get_OriginValidator()
public void set_OriginValidator(Func`2<string, bool> value)
public string get_Protocol()
public void set_Protocol(string value)
public DateTime get_StartTime()
public WebSocketState get_State()
private string checkIfValidConnectionRequest(WebSocketContext context)
private void onClose(object sender, CloseEventArgs e)
private void onError(object sender, ErrorEventArgs e)
private void onMessage(object sender, MessageEventArgs e)
private void onOpen(object sender, EventArgs e)
internal void Start(WebSocketContext context, WebSocketSessionManager sessions)
protected void Error(string message, Exception exception)
protected void OnClose(CloseEventArgs e)
protected void OnError(ErrorEventArgs e)
protected void OnMessage(MessageEventArgs e)
protected void OnOpen()
protected void Send(Byte[] data)
protected void Send(FileInfo file)
protected void Send(string data)
protected void SendAsync(Byte[] data, Action`1<bool> completed)
protected void SendAsync(FileInfo file, Action`1<bool> completed)
protected void SendAsync(string data, Action`1<bool> completed)
protected void SendAsync(Stream stream, int length, Action`1<bool> completed)
}
public WebSocketSharp.Server.WebSocketServer : object {
private IPAddress _address
private AuthenticationSchemes _authSchemes
private Func`2<IIdentity, NetworkCredential> _credFinder
private bool _dnsStyle
private string _hostname
private TcpListener _listener
private Logger _logger
private int _port
private string _realm
private Thread _receiveThread
private bool _reuseAddress
private bool _secure
private WebSocketServiceManager _services
private ServerSslConfiguration _sslConfig
private ServerState modreq(System.Runtime.CompilerServices.IsVolatile) _state
private object _sync
private Func`2<IIdentity, NetworkCredential> CS$<>9__CachedAnonymousMethodDelegate1
public IPAddress Address
public AuthenticationSchemes AuthenticationSchemes
public bool IsListening
public bool IsSecure
public bool KeepClean
public Logger Log
public int Port
public string Realm
public bool ReuseAddress
public ServerSslConfiguration SslConfiguration
public Func`2<IIdentity, NetworkCredential> UserCredentialsFinder
public TimeSpan WaitTime
public WebSocketServiceManager WebSocketServices
public void .ctor(int port)
public void .ctor(string url)
public void .ctor(int port, bool secure)
public void .ctor(IPAddress address, int port)
public void .ctor(IPAddress address, int port, bool secure)
public IPAddress get_Address()
public AuthenticationSchemes get_AuthenticationSchemes()
public void set_AuthenticationSchemes(AuthenticationSchemes value)
public bool get_IsListening()
public bool get_IsSecure()
public bool get_KeepClean()
public void set_KeepClean(bool value)
public Logger get_Log()
public int get_Port()
public string get_Realm()
public void set_Realm(string value)
public bool get_ReuseAddress()
public void set_ReuseAddress(bool value)
public ServerSslConfiguration get_SslConfiguration()
public void set_SslConfiguration(ServerSslConfiguration value)
public Func`2<IIdentity, NetworkCredential> get_UserCredentialsFinder()
public void set_UserCredentialsFinder(Func`2<IIdentity, NetworkCredential> value)
public TimeSpan get_WaitTime()
public void set_WaitTime(TimeSpan value)
public WebSocketServiceManager get_WebSocketServices()
private void abort()
private bool authenticate(TcpListenerWebSocketContext context, AuthenticationSchemes scheme, string realm, Func`2<IIdentity, NetworkCredential> credentialsFinder)
private string checkIfCertificateExists()
private void init(string hostname, IPAddress address, int port, bool secure)
private void processRequest(TcpListenerWebSocketContext context)
private void receiveRequest()
private void startReceiving()
private void stopReceiving(int millisecondsTimeout)
private bool tryCreateUri(string uriString, Uri& result, String& message)
public void AddWebSocketService(string path, Func`1<TBehavior> initializer)
public void AddWebSocketService(string path)
public bool RemoveWebSocketService(string path)
public void Start()
public void Stop()
public void Stop(ushort code, string reason)
public void Stop(CloseStatusCode code, string reason)
private NetworkCredential <get_UserCredentialsFinder>b__0(IIdentity identity)
private TBehaviorWithNew <AddWebSocketService>b__8()
}
public WebSocketSharp.Server.WebSocketServiceHost : object {
internal ServerState State
public bool KeepClean
public string Path
public WebSocketSessionManager Sessions
public Type Type
public TimeSpan WaitTime
internal ServerState get_State()
public bool get_KeepClean()
public void set_KeepClean(bool value)
public string get_Path()
public WebSocketSessionManager get_Sessions()
public Type get_Type()
public TimeSpan get_WaitTime()
public void set_WaitTime(TimeSpan value)
internal void Start()
internal void StartSession(WebSocketContext context)
internal void Stop(ushort code, string reason)
protected WebSocketBehavior CreateSession()
}
internal WebSocketSharp.Server.WebSocketServiceHost`1 : WebSocketServiceHost {
private Func`1<TBehavior> _initializer
private Logger _logger
private string _path
private WebSocketSessionManager _sessions
public bool KeepClean
public string Path
public WebSocketSessionManager Sessions
public Type Type
public TimeSpan WaitTime
internal void .ctor(string path, Func`1<TBehavior> initializer, Logger logger)
public bool get_KeepClean()
public void set_KeepClean(bool value)
public string get_Path()
public WebSocketSessionManager get_Sessions()
public Type get_Type()
public TimeSpan get_WaitTime()
public void set_WaitTime(TimeSpan value)
protected WebSocketBehavior CreateSession()
}
public WebSocketSharp.Server.WebSocketServiceManager : object {
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _clean
private Dictionary`2<string, WebSocketServiceHost> _hosts
private Logger _logger
private ServerState modreq(System.Runtime.CompilerServices.IsVolatile) _state
private object _sync
private TimeSpan _waitTime
public int Count
public IEnumerable`1<WebSocketServiceHost> Hosts
public WebSocketServiceHost Item
public bool KeepClean
public IEnumerable`1<string> Paths
public int SessionCount
public TimeSpan WaitTime
internal void .ctor(Logger logger)
public int get_Count()
public IEnumerable`1<WebSocketServiceHost> get_Hosts()
public WebSocketServiceHost get_Item(string path)
public bool get_KeepClean()
internal void set_KeepClean(bool value)
public IEnumerable`1<string> get_Paths()
public int get_SessionCount()
public TimeSpan get_WaitTime()
internal void set_WaitTime(TimeSpan value)
private void broadcast(Opcode opcode, Byte[] data, Action completed)
private void broadcast(Opcode opcode, Stream stream, Action completed)
private void broadcastAsync(Opcode opcode, Byte[] data, Action completed)
private void broadcastAsync(Opcode opcode, Stream stream, Action completed)
private Dictionary`2<string, Dictionary`2<string, bool>> broadping(Byte[] frameAsBytes, TimeSpan timeout)
internal void Add(string path, Func`1<TBehavior> initializer)
internal bool InternalTryGetServiceHost(string path, WebSocketServiceHost& host)
internal bool Remove(string path)
internal void Start()
internal void Stop(CloseEventArgs e, bool send, bool receive)
public void Broadcast(Byte[] data)
public void Broadcast(string data)
public void BroadcastAsync(Byte[] data, Action completed)
public void BroadcastAsync(string data, Action completed)
public void BroadcastAsync(Stream stream, int length, Action completed)
public Dictionary`2<string, Dictionary`2<string, bool>> Broadping()
public Dictionary`2<string, Dictionary`2<string, bool>> Broadping(string message)
public bool TryGetServiceHost(string path, WebSocketServiceHost& host)
private void <BroadcastAsync>b__7(Exception ex)
}
public WebSocketSharp.Server.WebSocketSessionManager : object {
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _clean
private object _forSweep
private Logger _logger
private Dictionary`2<string, IWebSocketSession> _sessions
private ServerState modreq(System.Runtime.CompilerServices.IsVolatile) _state
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _sweeping
private Timer _sweepTimer
private object _sync
private TimeSpan _waitTime
internal ServerState State
public IEnumerable`1<string> ActiveIDs
public int Count
public IEnumerable`1<string> IDs
public IEnumerable`1<string> InactiveIDs
public IWebSocketSession Item
public bool KeepClean
public IEnumerable`1<IWebSocketSession> Sessions
public TimeSpan WaitTime
internal void .ctor(Logger logger)
internal ServerState get_State()
public IEnumerable`1<string> get_ActiveIDs()
public int get_Count()
public IEnumerable`1<string> get_IDs()
public IEnumerable`1<string> get_InactiveIDs()
public IWebSocketSession get_Item(string id)
public bool get_KeepClean()
internal void set_KeepClean(bool value)
public IEnumerable`1<IWebSocketSession> get_Sessions()
public TimeSpan get_WaitTime()
internal void set_WaitTime(TimeSpan value)
private void broadcast(Opcode opcode, Byte[] data, Action completed)
private void broadcast(Opcode opcode, Stream stream, Action completed)
private void broadcastAsync(Opcode opcode, Byte[] data, Action completed)
private void broadcastAsync(Opcode opcode, Stream stream, Action completed)
private string createID()
private void setSweepTimer(double interval)
private bool tryGetSession(string id, IWebSocketSession& session)
internal string Add(IWebSocketSession session)
internal void Broadcast(Opcode opcode, Byte[] data, Dictionary`2<CompressionMethod, Byte[]> cache)
internal void Broadcast(Opcode opcode, Stream stream, Dictionary`2<CompressionMethod, Stream> cache)
internal Dictionary`2<string, bool> Broadping(Byte[] frameAsBytes, TimeSpan timeout)
internal bool Remove(string id)
internal void Start()
internal void Stop(CloseEventArgs e, Byte[] frameAsBytes, bool receive)
public void Broadcast(Byte[] data)
public void Broadcast(string data)
public void BroadcastAsync(Byte[] data, Action completed)
public void BroadcastAsync(string data, Action completed)
public void BroadcastAsync(Stream stream, int length, Action completed)
public Dictionary`2<string, bool> Broadping()
public Dictionary`2<string, bool> Broadping(string message)
public void CloseSession(string id)
public void CloseSession(string id, ushort code, string reason)
public void CloseSession(string id, CloseStatusCode code, string reason)
public bool PingTo(string id)
public bool PingTo(string message, string id)
public void SendTo(Byte[] data, string id)
public void SendTo(string data, string id)
public void SendToAsync(Byte[] data, string id, Action`1<bool> completed)
public void SendToAsync(string data, string id, Action`1<bool> completed)
public void SendToAsync(Stream stream, int length, string id, Action`1<bool> completed)
public void Sweep()
public bool TryGetSession(string id, IWebSocketSession& session)
private void <setSweepTimer>b__12(object sender, ElapsedEventArgs e)
private void <BroadcastAsync>b__14(Exception ex)
}
public WebSocketSharp.WebSocket : object {
private string _guid
private string _version
private AuthenticationChallenge _authChallenge
private string _base64Key
private bool _client
private Action _closeContext
private CompressionMethod _compression
private WebSocketContext _context
private CookieCollection _cookies
private NetworkCredential _credentials
private bool _emitOnPing
private bool _enableRedirection
private string _extensions
private AutoResetEvent _exitReceiving
private Opcode _fopcode
private object _forConn
private object _forEvent
private object _forMessageEventQueue
private object _forSend
private MemoryStream _fragmentsBuffer
private Func`2<WebSocketContext, string> _handshakeRequestChecker
private bool _ignoreExtensions
private bool _inContinuation
private Logger modreq(System.Runtime.CompilerServices.IsVolatile) _logger
private Queue`1<MessageEventArgs> _messageEventQueue
private UInt32 _nonceCount
private string _origin
private bool _preAuth
private string _protocol
private String[] _protocols
private NetworkCredential _proxyCredentials
private Uri _proxyUri
private WebSocketState modreq(System.Runtime.CompilerServices.IsVolatile) _readyState
private AutoResetEvent _receivePong
private bool _secure
private ClientSslConfiguration _sslConfig
private Stream _stream
private TcpClient _tcpClient
private Uri _uri
private TimeSpan _waitTime
internal Byte[] EmptyBytes
internal int FragmentLength
internal RandomNumberGenerator RandomNumber
private EventHandler`1<CloseEventArgs> OnClose
private EventHandler`1<ErrorEventArgs> OnError
private EventHandler`1<MessageEventArgs> OnMessage
private EventHandler OnOpen
private Func`2<WebSocketContext, string> CS$<>9__CachedAnonymousMethodDelegate1
internal CookieCollection CookieCollection
internal Func`2<WebSocketContext, string> CustomHandshakeRequestChecker
internal bool IgnoreExtensions
internal bool IsConnected
public CompressionMethod Compression
public IEnumerable`1<Cookie> Cookies
public NetworkCredential Credentials
public bool EmitOnPing
public bool EnableRedirection
public string Extensions
public bool IsAlive
public bool IsSecure
public Logger Log
public string Origin
public string Protocol
public WebSocketState ReadyState
public ClientSslConfiguration SslConfiguration
public Uri Url
public TimeSpan WaitTime
internal void .ctor(HttpListenerWebSocketContext context, string protocol)
internal void .ctor(TcpListenerWebSocketContext context, string protocol)
public void .ctor(string url, String[] protocols)
internal CookieCollection get_CookieCollection()
internal Func`2<WebSocketContext, string> get_CustomHandshakeRequestChecker()
internal void set_CustomHandshakeRequestChecker(Func`2<WebSocketContext, string> value)
internal bool get_IgnoreExtensions()
internal void set_IgnoreExtensions(bool value)
internal bool get_IsConnected()
public CompressionMethod get_Compression()
public void set_Compression(CompressionMethod value)
public IEnumerable`1<Cookie> get_Cookies()
public NetworkCredential get_Credentials()
public bool get_EmitOnPing()
public void set_EmitOnPing(bool value)
public bool get_EnableRedirection()
public void set_EnableRedirection(bool value)
public string get_Extensions()
public bool get_IsAlive()
public bool get_IsSecure()
public Logger get_Log()
internal void set_Log(Logger value)
public string get_Origin()
public void set_Origin(string value)
public string get_Protocol()
internal void set_Protocol(string value)
public WebSocketState get_ReadyState()
public ClientSslConfiguration get_SslConfiguration()
public void set_SslConfiguration(ClientSslConfiguration value)
public Uri get_Url()
public TimeSpan get_WaitTime()
public void set_WaitTime(TimeSpan value)
public void add_OnClose(EventHandler`1<CloseEventArgs> value)
public void remove_OnClose(EventHandler`1<CloseEventArgs> value)
public void add_OnError(EventHandler`1<ErrorEventArgs> value)
public void remove_OnError(EventHandler`1<ErrorEventArgs> value)
public void add_OnMessage(EventHandler`1<MessageEventArgs> value)
public void remove_OnMessage(EventHandler`1<MessageEventArgs> value)
public void add_OnOpen(EventHandler value)
public void remove_OnOpen(EventHandler value)
private bool accept()
private bool acceptHandshake()
private string checkIfAvailable(bool client, bool server, bool connecting, bool open, bool closing, bool closed)
private string checkIfValidHandshakeRequest(WebSocketContext context)
private string checkIfValidHandshakeResponse(HttpResponse response)
private string checkIfValidReceivedFrame(WebSocketFrame frame)
private void close(CloseEventArgs e, bool send, bool receive, bool received)
private void closeAsync(CloseEventArgs e, bool send, bool receive, bool received)
private bool closeHandshake(Byte[] frameAsBytes, bool receive, bool received)
private bool connect()
private string createExtensions()
private HttpResponse createHandshakeCloseResponse(HttpStatusCode code)
private HttpRequest createHandshakeRequest()
private HttpResponse createHandshakeResponse()
private MessageEventArgs dequeueFromMessageEventQueue()
private bool doHandshake()
private void enqueueToMessageEventQueue(MessageEventArgs e)
private void error(string message, Exception exception)
private void init()
private void open()
private bool processCloseFrame(WebSocketFrame frame)
private bool processDataFrame(WebSocketFrame frame)
private void processException(Exception exception, string message)
private bool processFragmentedFrame(WebSocketFrame frame)
private bool processPingFrame(WebSocketFrame frame)
private bool processPongFrame(WebSocketFrame frame)
private bool processReceivedFrame(WebSocketFrame frame)
private void processSecWebSocketExtensionsHeader(string value)
private bool processUnsupportedFrame(WebSocketFrame frame, CloseStatusCode code, string reason)
private void releaseClientResources()
private void releaseCommonResources()
private void releaseResources()
private void releaseServerResources()
private bool send(Byte[] frameAsBytes)
private bool send(Opcode opcode, Stream stream)
private bool send(Opcode opcode, Stream stream, bool compressed)
private bool send(Fin fin, Opcode opcode, Byte[] data, bool compressed)
private void sendAsync(Opcode opcode, Stream stream, Action`1<bool> completed)
private bool sendBytes(Byte[] bytes)
private HttpResponse sendHandshakeRequest()
private HttpResponse sendHttpRequest(HttpRequest request, int millisecondsTimeout)
private bool sendHttpResponse(HttpResponse response)
private void sendProxyConnectRequest()
private void setClientStream()
private void startReceiving()
private bool validateSecWebSocketAcceptHeader(string value)
private bool validateSecWebSocketExtensionsHeader(string value)
private bool validateSecWebSocketKeyHeader(string value)
private bool validateSecWebSocketProtocolHeader(string value)
private bool validateSecWebSocketVersionClientHeader(string value)
private bool validateSecWebSocketVersionServerHeader(string value)
internal string CheckCloseParameters(ushort code, string reason, bool client)
internal string CheckCloseParameters(CloseStatusCode code, string reason, bool client)
internal string CheckPingParameter(string message, Byte[]& bytes)
internal string CheckSendParameter(Byte[] data)
internal string CheckSendParameter(FileInfo file)
internal string CheckSendParameter(string data)
internal string CheckSendParameters(Stream stream, int length)
internal void Close(HttpResponse response)
internal void Close(HttpStatusCode code)
internal void Close(CloseEventArgs e, Byte[] frameAsBytes, bool receive)
internal string CreateBase64Key()
internal string CreateResponseKey(string base64Key)
internal void InternalAccept()
internal bool Ping(Byte[] frameAsBytes, TimeSpan timeout)
internal void Send(Opcode opcode, Byte[] data, Dictionary`2<CompressionMethod, Byte[]> cache)
internal void Send(Opcode opcode, Stream stream, Dictionary`2<CompressionMethod, Stream> cache)
public void Accept()
public void AcceptAsync()
public void Close()
public void Close(ushort code)
public void Close(CloseStatusCode code)
public void Close(ushort code, string reason)
public void Close(CloseStatusCode code, string reason)
public void CloseAsync()
public void CloseAsync(ushort code)
public void CloseAsync(CloseStatusCode code)
public void CloseAsync(ushort code, string reason)
public void CloseAsync(CloseStatusCode code, string reason)
public void Connect()
public void ConnectAsync()
public bool Ping()
public bool Ping(string message)
public void Send(Byte[] data)
public void Send(FileInfo file)
public void Send(string data)
public void SendAsync(Byte[] data, Action`1<bool> completed)
public void SendAsync(FileInfo file, Action`1<bool> completed)
public void SendAsync(string data, Action`1<bool> completed)
public void SendAsync(Stream stream, int length, Action`1<bool> completed)
public void SetCookie(Cookie cookie)
public void SetCredentials(string username, string password, bool preAuth)
public void SetProxy(string url, string username, string password)
private void System.IDisposable.Dispose()
private string <get_CustomHandshakeRequestChecker>b__0(WebSocketContext context)
private bool <acceptHandshake>b__b(string protocol)
private void <SendAsync>b__24(Exception ex)
}
public WebSocketSharp.WebSocketException : Exception {
private CloseStatusCode _code
public CloseStatusCode Code
internal void .ctor(Exception innerException)
internal void .ctor(string message)
internal void .ctor(CloseStatusCode code)
internal void .ctor(string message, Exception innerException)
internal void .ctor(CloseStatusCode code, Exception innerException)
internal void .ctor(CloseStatusCode code, string message)
internal void .ctor(CloseStatusCode code, string message, Exception innerException)
public CloseStatusCode get_Code()
}
internal WebSocketSharp.WebSocketFrame : object {
private Byte[] _extPayloadLength
private Fin _fin
private Mask _mask
private Byte[] _maskingKey
private Opcode _opcode
private PayloadData _payloadData
private byte _payloadLength
private Rsv _rsv1
private Rsv _rsv2
private Rsv _rsv3
internal Byte[] EmptyPingBytes
internal int ExtendedPayloadLengthCount
internal ulong FullPayloadLength
public Byte[] ExtendedPayloadLength
public Fin Fin
public bool IsBinary
public bool IsClose
public bool IsCompressed
public bool IsContinuation
public bool IsControl
public bool IsData
public bool IsFinal
public bool IsFragmented
public bool IsMasked
public bool IsPing
public bool IsPong
public bool IsText
public ulong Length
public Mask Mask
public Byte[] MaskingKey
public Opcode Opcode
public PayloadData PayloadData
public byte PayloadLength
public Rsv Rsv1
public Rsv Rsv2
public Rsv Rsv3
internal void .ctor(Opcode opcode, PayloadData payloadData, bool mask)
internal void .ctor(Fin fin, Opcode opcode, Byte[] data, bool compressed, bool mask)
internal void .ctor(Fin fin, Opcode opcode, PayloadData payloadData, bool compressed, bool mask)
internal int get_ExtendedPayloadLengthCount()
internal ulong get_FullPayloadLength()
public Byte[] get_ExtendedPayloadLength()
public Fin get_Fin()
public bool get_IsBinary()
public bool get_IsClose()
public bool get_IsCompressed()
public bool get_IsContinuation()
public bool get_IsControl()
public bool get_IsData()
public bool get_IsFinal()
public bool get_IsFragmented()
public bool get_IsMasked()
public bool get_IsPing()
public bool get_IsPong()
public bool get_IsText()
public ulong get_Length()
public Mask get_Mask()
public Byte[] get_MaskingKey()
public Opcode get_Opcode()
public PayloadData get_PayloadData()
public byte get_PayloadLength()
public Rsv get_Rsv1()
public Rsv get_Rsv2()
public Rsv get_Rsv3()
private Byte[] createMaskingKey()
private string dump(WebSocketFrame frame)
private bool isControl(Opcode opcode)
private bool isData(Opcode opcode)
private string print(WebSocketFrame frame)
private WebSocketFrame processHeader(Byte[] header)
private WebSocketFrame readExtendedPayloadLength(Stream stream, WebSocketFrame frame)
private void readExtendedPayloadLengthAsync(Stream stream, WebSocketFrame frame, Action`1<WebSocketFrame> completed, Action`1<Exception> error)
private WebSocketFrame readHeader(Stream stream)
private void readHeaderAsync(Stream stream, Action`1<WebSocketFrame> completed, Action`1<Exception> error)
private WebSocketFrame readMaskingKey(Stream stream, WebSocketFrame frame)
private void readMaskingKeyAsync(Stream stream, WebSocketFrame frame, Action`1<WebSocketFrame> completed, Action`1<Exception> error)
private WebSocketFrame readPayloadData(Stream stream, WebSocketFrame frame)
private void readPayloadDataAsync(Stream stream, WebSocketFrame frame, Action`1<WebSocketFrame> completed, Action`1<Exception> error)
internal WebSocketFrame CreateCloseFrame(PayloadData payloadData, bool mask)
internal WebSocketFrame CreatePingFrame(bool mask)
internal WebSocketFrame CreatePingFrame(Byte[] data, bool mask)
internal WebSocketFrame ReadFrame(Stream stream, bool unmask)
internal void ReadFrameAsync(Stream stream, bool unmask, Action`1<WebSocketFrame> completed, Action`1<Exception> error)
internal void Unmask()
public IEnumerator`1<byte> GetEnumerator()
public void Print(bool dumped)
public string PrintToString(bool dumped)
public Byte[] ToArray()
public string ToString()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public WebSocketSharp.WebSocketState : Enum {
public ushort value__
public WebSocketState Connecting
public WebSocketState Open
public WebSocketState Closing
public WebSocketState Closed
}
