internal static class FxResources.System.IO.Hashing.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]

private bool <ParameterValue>k__BackingField;
    
public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]

private bool <ReturnValue>k__BackingField;
    
public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]

private String[] <Members>k__BackingField;
    
public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]

private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]

private String[] <Members>k__BackingField;
    
public bool ReturnValue { get; }
    
public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]

private string <ParameterName>k__BackingField;
    
public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]

private bool <ReturnValue>k__BackingField;
    
public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
public class System.IO.Hashing.Crc32 : NonCryptographicHashAlgorithm {
    
private static UInt32 InitialState;
    
private static int Size;
    
private UInt32 _crc;
    
private static UInt32[] s_crcLookup;
    private static Crc32();
    public virtual void Append(ReadOnlySpan`1<byte> source);
    public virtual void Reset();
    protected virtual void GetCurrentHashCore(Span`1<byte> destination);
    protected virtual void GetHashAndResetCore(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source);
    public static Byte[] Hash(ReadOnlySpan`1<byte> source);
    public static bool TryHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten);
    public static int Hash(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    private static int StaticHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    private static UInt32 Update(UInt32 crc, ReadOnlySpan`1<byte> source);
    private static UInt32[] GenerateReflectedTable(UInt32 reflectedPolynomial);
}
public class System.IO.Hashing.Crc64 : NonCryptographicHashAlgorithm {
    
private static ulong InitialState;
    
private static int Size;
    
private ulong _crc;
    
private static UInt64[] s_crcLookup;
    private static Crc64();
    public virtual void Append(ReadOnlySpan`1<byte> source);
    public virtual void Reset();
    protected virtual void GetCurrentHashCore(Span`1<byte> destination);
    protected virtual void GetHashAndResetCore(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source);
    public static Byte[] Hash(ReadOnlySpan`1<byte> source);
    public static bool TryHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten);
    public static int Hash(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    private static int StaticHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    private static ulong Update(ulong crc, ReadOnlySpan`1<byte> source);
    private static UInt64[] GenerateTable(ulong polynomial);
}
public abstract class System.IO.Hashing.NonCryptographicHashAlgorithm : object {
    [CompilerGeneratedAttribute]

private int <HashLengthInBytes>k__BackingField;
    
public int HashLengthInBytes { get; }
    protected NonCryptographicHashAlgorithm(int hashLengthInBytes);
    [CompilerGeneratedAttribute]
public int get_HashLengthInBytes();
    public abstract virtual void Append(ReadOnlySpan`1<byte> source);
    public abstract virtual void Reset();
    protected abstract virtual void GetCurrentHashCore(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public void Append(Byte[] source);
    [NullableContextAttribute("1")]
public void Append(Stream stream);
    [NullableContextAttribute("1")]
public Task AppendAsync(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.Hashing.NonCryptographicHashAlgorithm/<AppendAsyncCore>d__10")]
private Task AppendAsyncCore(Stream stream, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public Byte[] GetCurrentHash();
    public bool TryGetCurrentHash(Span`1<byte> destination, Int32& bytesWritten);
    public int GetCurrentHash(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public Byte[] GetHashAndReset();
    public bool TryGetHashAndReset(Span`1<byte> destination, Int32& bytesWritten);
    public int GetHashAndReset(Span`1<byte> destination);
    protected virtual void GetHashAndResetCore(Span`1<byte> destination);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetCurrentHash() to retrieve the computed hash code.", "True")]
public virtual int GetHashCode();
}
public class System.IO.Hashing.XxHash32 : NonCryptographicHashAlgorithm {
    
private static int HashSize;
    
private static int StripeSize;
    
private UInt32 _seed;
    
private State _state;
    
private Byte[] _holdback;
    
private int _length;
    public XxHash32(int seed);
    public virtual void Reset();
    public virtual void Append(ReadOnlySpan`1<byte> source);
    protected virtual void GetCurrentHashCore(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source, int seed);
    public static Byte[] Hash(ReadOnlySpan`1<byte> source, int seed);
    public static bool TryHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten, int seed);
    public static int Hash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, int seed);
    private static int StaticHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, int seed);
}
public class System.IO.Hashing.XxHash64 : NonCryptographicHashAlgorithm {
    
private static int HashSize;
    
private static int StripeSize;
    
private ulong _seed;
    
private State _state;
    
private Byte[] _holdback;
    
private int _length;
    public XxHash64(long seed);
    public virtual void Reset();
    public virtual void Append(ReadOnlySpan`1<byte> source);
    protected virtual void GetCurrentHashCore(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source, long seed);
    public static Byte[] Hash(ReadOnlySpan`1<byte> source, long seed);
    public static bool TryHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten, long seed);
    public static int Hash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, long seed);
    private static int StaticHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, long seed);
}
internal static class System.Numerics.BitOperations : object {
    public static UInt32 RotateLeft(UInt32 value, int offset);
    public static ulong RotateLeft(ulong value, int offset);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    
public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    
public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    
public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
internal static class System.SR : object {
    
private static bool s_usingResourceKeys;
    
private static ResourceManager s_resourceManager;
    
internal static ResourceManager ResourceManager { get; }
    
internal static string Argument_DestinationTooShort { get; }
    
internal static string NotSupported_GetHashCode { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_DestinationTooShort();
    internal static string get_NotSupported_GetHashCode();
}
