public TerrainBiome : object {
public int COUNT
public int EVERYTHING
public int NOTHING
public int ARID
public int TEMPERATE
public int TUNDRA
public int ARCTIC
public int ARID_IDX
public int TEMPERATE_IDX
public int TUNDRA_IDX
public int ARCTIC_IDX
private Dictionary`2<int, int> type2index
public int TypeToIndex(int id)
public int IndexToType(int idx)
}
public TerrainSplat : object {
public int COUNT
public int EVERYTHING
public int NOTHING
public int DIRT
public int SNOW
public int SAND
public int ROCK
public int GRASS
public int FOREST
public int STONES
public int GRAVEL
public int DIRT_IDX
public int SNOW_IDX
public int SAND_IDX
public int ROCK_IDX
public int GRASS_IDX
public int FOREST_IDX
public int STONES_IDX
public int GRAVEL_IDX
private Dictionary`2<int, int> type2index
public int TypeToIndex(int id)
public int IndexToType(int idx)
}
public TerrainTopology : object {
public int COUNT
public int EVERYTHING
public int NOTHING
public int FIELD
public int CLIFF
public int SUMMIT
public int BEACHSIDE
public int BEACH
public int FOREST
public int FORESTSIDE
public int OCEAN
public int OCEANSIDE
public int DECOR
public int MONUMENT
public int ROAD
public int ROADSIDE
public int SWAMP
public int RIVER
public int RIVERSIDE
public int LAKE
public int LAKESIDE
public int OFFSHORE
public int POWERLINE
public int PLAIN
public int BUILDING
public int CLIFFSIDE
public int MOUNTAIN
public int CLUTTER
public int ALT
public int TIER0
public int TIER1
public int TIER2
public int MAINLAND
public int HILLTOP
public int WATER
public int WATERSIDE
public int SAND
}
public WorldSerialization : object {
public UInt32 CurrentVersion
private UInt32 <Version>k__BackingField
private string <Checksum>k__BackingField
public WorldData world
public UInt32 Version
public string Checksum
public UInt32 get_Version()
private void set_Version(UInt32 value)
public string get_Checksum()
private void set_Checksum(string value)
public MapData GetMap(string name)
public void AddMap(string name, Byte[] data)
public IEnumerable`1<PrefabData> GetPrefabs(string category)
public void AddPrefab(string category, UInt32 id, Vector3 position, Quaternion rotation, Vector3 scale)
public IEnumerable`1<PathData> GetPaths(string name)
public PathData GetPath(string name)
public void AddPath(PathData path)
public void Clear()
public void Save(string fileName)
public void Load(string fileName)
public void CalculateChecksum()
private string Hash()
public int CalculateCount()
}
