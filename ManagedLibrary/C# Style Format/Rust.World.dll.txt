public static class TerrainBiome : object {
    public static int COUNT;
    public static int EVERYTHING;
    public static int NOTHING;
    public static int ARID;
    public static int TEMPERATE;
    public static int TUNDRA;
    public static int ARCTIC;
    public static int ARID_IDX;
    public static int TEMPERATE_IDX;
    public static int TUNDRA_IDX;
    public static int ARCTIC_IDX;
    private static Dictionary`2<int, int> type2index;
    private static TerrainBiome();
    public static int TypeToIndex(int id);
    public static int IndexToType(int idx);
}
public static class TerrainSplat : object {
    public static int COUNT;
    public static int EVERYTHING;
    public static int NOTHING;
    public static int DIRT;
    public static int SNOW;
    public static int SAND;
    public static int ROCK;
    public static int GRASS;
    public static int FOREST;
    public static int STONES;
    public static int GRAVEL;
    public static int DIRT_IDX;
    public static int SNOW_IDX;
    public static int SAND_IDX;
    public static int ROCK_IDX;
    public static int GRASS_IDX;
    public static int FOREST_IDX;
    public static int STONES_IDX;
    public static int GRAVEL_IDX;
    private static Dictionary`2<int, int> type2index;
    private static TerrainSplat();
    public static int TypeToIndex(int id);
    public static int IndexToType(int idx);
}
public static class TerrainTopology : object {
    public static int COUNT;
    public static int EVERYTHING;
    public static int NOTHING;
    public static int FIELD;
    public static int CLIFF;
    public static int SUMMIT;
    public static int BEACHSIDE;
    public static int BEACH;
    public static int FOREST;
    public static int FORESTSIDE;
    public static int OCEAN;
    public static int OCEANSIDE;
    public static int DECOR;
    public static int MONUMENT;
    public static int ROAD;
    public static int ROADSIDE;
    public static int SWAMP;
    public static int RIVER;
    public static int RIVERSIDE;
    public static int LAKE;
    public static int LAKESIDE;
    public static int OFFSHORE;
    public static int RAIL;
    public static int RAILSIDE;
    public static int BUILDING;
    public static int CLIFFSIDE;
    public static int MOUNTAIN;
    public static int CLUTTER;
    public static int ALT;
    public static int TIER0;
    public static int TIER1;
    public static int TIER2;
    public static int MAINLAND;
    public static int HILLTOP;
    public static int PATH;
    public static int PATHSIDE;
    public static int WATER;
    public static int WATERSIDE;
    public static int SAND;
}
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", "")]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1 : object {
    private static MonoScriptData Get();
}
public class WorldSerialization : object {
    public static UInt32 CurrentVersion;
    [CompilerGeneratedAttribute]
private UInt32 <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    public WorldData world;
    public UInt32 Version { get; private set; }
    public string Checksum { get; private set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
private void set_Checksum(string value);
    public MapData GetMap(string name);
    public void AddMap(string name, Byte[] data);
    public IEnumerable`1<PrefabData> GetPrefabs(string category);
    public void AddPrefab(string category, UInt32 id, Vector3 position, Quaternion rotation, Vector3 scale);
    public IEnumerable`1<PathData> GetPaths(string name);
    public PathData GetPath(string name);
    public void AddPath(PathData path);
    public void Clear();
    public void Save(string fileName);
    public void Load(string fileName);
    public void CalculateChecksum();
    private string Hash();
    public int CalculateCount();
}
