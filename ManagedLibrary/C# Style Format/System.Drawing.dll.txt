internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
internal SR : object {
public string CantTellPrinterName
public string CantChangeImmutableObjects
public string CantMakeIconTransparent
public string ColorNotSystemColor
public string DotNET_ComponentType
public string GdiplusAborted
public string GdiplusAccessDenied
public string GdiplusCannotCreateGraphicsFromIndexedPixelFormat
public string GdiplusCannotSetPixelFromIndexedPixelFormat
public string GdiplusDestPointsInvalidParallelogram
public string GdiplusDestPointsInvalidLength
public string GdiplusFileNotFound
public string GdiplusFontFamilyNotFound
public string GdiplusFontStyleNotFound
public string GdiplusGenericError
public string GdiplusInsufficientBuffer
public string GdiplusInvalidParameter
public string GdiplusInvalidRectangle
public string GdiplusInvalidSize
public string GdiplusOutOfMemory
public string GdiplusNotImplemented
public string GdiplusNotInitialized
public string GdiplusNotTrueTypeFont
public string GdiplusNotTrueTypeFont_NoName
public string GdiplusObjectBusy
public string GdiplusOverflow
public string GdiplusPropertyNotFoundError
public string GdiplusPropertyNotSupportedError
public string GdiplusUnknown
public string GdiplusUnknownImageFormat
public string GdiplusUnsupportedGdiplusVersion
public string GdiplusWrongState
public string GlobalAssemblyCache
public string GraphicsBufferCurrentlyBusy
public string GraphicsBufferQueryFail
public string ToolboxItemLocked
public string ToolboxItemInvalidPropertyType
public string ToolboxItemValueNotSerializable
public string ToolboxItemInvalidKey
public string IllegalState
public string InterpolationColorsColorBlendNotSet
public string InterpolationColorsCommon
public string InterpolationColorsInvalidColorBlendObject
public string InterpolationColorsInvalidStartPosition
public string InterpolationColorsInvalidEndPosition
public string InterpolationColorsLength
public string InterpolationColorsLengthsDiffer
public string InvalidArgument
public string InvalidBoundArgument
public string InvalidClassName
public string InvalidColor
public string InvalidDashPattern
public string InvalidEx2BoundArgument
public string InvalidFrame
public string InvalidGDIHandle
public string InvalidImage
public string InvalidLowBoundArgumentEx
public string InvalidPermissionLevel
public string InvalidPermissionState
public string InvalidPictureType
public string InvalidPrinterException_InvalidPrinter
public string InvalidPrinterException_NoDefaultPrinter
public string InvalidPrinterHandle
public string ValidRangeX
public string ValidRangeY
public string NativeHandle0
public string NoDefaultPrinter
public string NotImplemented
public string PDOCbeginPrintDescr
public string PDOCdocumentNameDescr
public string PDOCdocumentPageSettingsDescr
public string PDOCendPrintDescr
public string PDOCoriginAtMarginsDescr
public string PDOCprintControllerDescr
public string PDOCprintPageDescr
public string PDOCprinterSettingsDescr
public string PDOCqueryPageSettingsDescr
public string PrintDocumentDesc
public string PrintingPermissionBadXml
public string PrintingPermissionAttributeInvalidPermissionLevel
public string PropertyValueInvalidEntry
public string PSizeNotCustom
public string ResourceNotFound
public string TargetNotPrintingPermission
public string TextParseFailedFormat
public string TriStateCompareError
public string toStringIcon
public string toStringNone
public string DCTypeInvalid
public string InvalidEnumArgument
public string ConvertInvalidPrimitive
public string LibgdiplusNotFound
public string Format(string format, Object[] args)
}
internal System.Drawing.AnimateEventArgs : EventArgs {
private int frameCount
private int activeFrame
private Thread thread
public Thread RunThread
public void .ctor(Image image)
public Thread get_RunThread()
public void set_RunThread(Thread value)
public int GetNextFrame()
}
internal System.Drawing.AssemblyRef : object {
public string SystemDrawingDesign
public string SystemDesign
public string SystemWindowsForms
}
public System.Drawing.Bitmap : Image {
internal void .ctor(IntPtr ptr)
internal void .ctor(IntPtr ptr, Stream stream)
public void .ctor(int width, int height)
public void .ctor(int width, int height, Graphics g)
public void .ctor(int width, int height, PixelFormat format)
public void .ctor(Image original)
public void .ctor(Stream stream)
public void .ctor(string filename)
public void .ctor(Image original, Size newSize)
public void .ctor(Stream stream, bool useIcm)
public void .ctor(string filename, bool useIcm)
public void .ctor(Type type, string resource)
public void .ctor(Image original, int width, int height)
public void .ctor(int width, int height, int stride, PixelFormat format, IntPtr scan0)
private void .ctor(SerializationInfo info, StreamingContext context)
public Color GetPixel(int x, int y)
public void SetPixel(int x, int y, Color color)
public Bitmap Clone(Rectangle rect, PixelFormat format)
public Bitmap Clone(RectangleF rect, PixelFormat format)
public Bitmap FromHicon(IntPtr hicon)
public Bitmap FromResource(IntPtr hinstance, string bitmapName)
public IntPtr GetHbitmap()
public IntPtr GetHbitmap(Color background)
public IntPtr GetHicon()
public BitmapData LockBits(Rectangle rect, ImageLockMode flags, PixelFormat format)
public BitmapData LockBits(Rectangle rect, ImageLockMode flags, PixelFormat format, BitmapData bitmapData)
public void MakeTransparent()
public void MakeTransparent(Color transparentColor)
public void SetResolution(float xDpi, float yDpi)
public void UnlockBits(BitmapData bitmapdata)
}
public System.Drawing.Brush : MarshalByRefObject {
private IntPtr _nativeBrush
internal IntPtr NativeBrush
public object Clone()
protected internal void SetNativeBrush(IntPtr brush)
internal void SetNativeBrushInternal(IntPtr brush)
internal IntPtr get_NativeBrush()
public void Dispose()
protected void Dispose(bool disposing)
protected void Finalize()
}
public System.Drawing.Brushes : object {
private SolidBrush aliceBlue
private SolidBrush antiqueWhite
private SolidBrush aqua
private SolidBrush aquamarine
private SolidBrush azure
private SolidBrush beige
private SolidBrush bisque
private SolidBrush black
private SolidBrush blanchedAlmond
private SolidBrush blue
private SolidBrush blueViolet
private SolidBrush brown
private SolidBrush burlyWood
private SolidBrush cadetBlue
private SolidBrush chartreuse
private SolidBrush chocolate
private SolidBrush coral
private SolidBrush cornflowerBlue
private SolidBrush cornsilk
private SolidBrush crimson
private SolidBrush cyan
private SolidBrush darkBlue
private SolidBrush darkCyan
private SolidBrush darkGoldenrod
private SolidBrush darkGray
private SolidBrush darkGreen
private SolidBrush darkKhaki
private SolidBrush darkMagenta
private SolidBrush darkOliveGreen
private SolidBrush darkOrange
private SolidBrush darkOrchid
private SolidBrush darkRed
private SolidBrush darkSalmon
private SolidBrush darkSeaGreen
private SolidBrush darkSlateBlue
private SolidBrush darkSlateGray
private SolidBrush darkTurquoise
private SolidBrush darkViolet
private SolidBrush deepPink
private SolidBrush deepSkyBlue
private SolidBrush dimGray
private SolidBrush dodgerBlue
private SolidBrush firebrick
private SolidBrush floralWhite
private SolidBrush forestGreen
private SolidBrush fuchsia
private SolidBrush gainsboro
private SolidBrush ghostWhite
private SolidBrush gold
private SolidBrush goldenrod
private SolidBrush gray
private SolidBrush green
private SolidBrush greenYellow
private SolidBrush honeydew
private SolidBrush hotPink
private SolidBrush indianRed
private SolidBrush indigo
private SolidBrush ivory
private SolidBrush khaki
private SolidBrush lavender
private SolidBrush lavenderBlush
private SolidBrush lawnGreen
private SolidBrush lemonChiffon
private SolidBrush lightBlue
private SolidBrush lightCoral
private SolidBrush lightCyan
private SolidBrush lightGoldenrodYellow
private SolidBrush lightGray
private SolidBrush lightGreen
private SolidBrush lightPink
private SolidBrush lightSalmon
private SolidBrush lightSeaGreen
private SolidBrush lightSkyBlue
private SolidBrush lightSlateGray
private SolidBrush lightSteelBlue
private SolidBrush lightYellow
private SolidBrush lime
private SolidBrush limeGreen
private SolidBrush linen
private SolidBrush magenta
private SolidBrush maroon
private SolidBrush mediumAquamarine
private SolidBrush mediumBlue
private SolidBrush mediumOrchid
private SolidBrush mediumPurple
private SolidBrush mediumSeaGreen
private SolidBrush mediumSlateBlue
private SolidBrush mediumSpringGreen
private SolidBrush mediumTurquoise
private SolidBrush mediumVioletRed
private SolidBrush midnightBlue
private SolidBrush mintCream
private SolidBrush mistyRose
private SolidBrush moccasin
private SolidBrush navajoWhite
private SolidBrush navy
private SolidBrush oldLace
private SolidBrush olive
private SolidBrush oliveDrab
private SolidBrush orange
private SolidBrush orangeRed
private SolidBrush orchid
private SolidBrush paleGoldenrod
private SolidBrush paleGreen
private SolidBrush paleTurquoise
private SolidBrush paleVioletRed
private SolidBrush papayaWhip
private SolidBrush peachPuff
private SolidBrush peru
private SolidBrush pink
private SolidBrush plum
private SolidBrush powderBlue
private SolidBrush purple
private SolidBrush red
private SolidBrush rosyBrown
private SolidBrush royalBlue
private SolidBrush saddleBrown
private SolidBrush salmon
private SolidBrush sandyBrown
private SolidBrush seaGreen
private SolidBrush seaShell
private SolidBrush sienna
private SolidBrush silver
private SolidBrush skyBlue
private SolidBrush slateBlue
private SolidBrush slateGray
private SolidBrush snow
private SolidBrush springGreen
private SolidBrush steelBlue
private SolidBrush tan
private SolidBrush teal
private SolidBrush thistle
private SolidBrush tomato
private SolidBrush transparent
private SolidBrush turquoise
private SolidBrush violet
private SolidBrush wheat
private SolidBrush white
private SolidBrush whiteSmoke
private SolidBrush yellow
private SolidBrush yellowGreen
public Brush AliceBlue
public Brush AntiqueWhite
public Brush Aqua
public Brush Aquamarine
public Brush Azure
public Brush Beige
public Brush Bisque
public Brush Black
public Brush BlanchedAlmond
public Brush Blue
public Brush BlueViolet
public Brush Brown
public Brush BurlyWood
public Brush CadetBlue
public Brush Chartreuse
public Brush Chocolate
public Brush Coral
public Brush CornflowerBlue
public Brush Cornsilk
public Brush Crimson
public Brush Cyan
public Brush DarkBlue
public Brush DarkCyan
public Brush DarkGoldenrod
public Brush DarkGray
public Brush DarkGreen
public Brush DarkKhaki
public Brush DarkMagenta
public Brush DarkOliveGreen
public Brush DarkOrange
public Brush DarkOrchid
public Brush DarkRed
public Brush DarkSalmon
public Brush DarkSeaGreen
public Brush DarkSlateBlue
public Brush DarkSlateGray
public Brush DarkTurquoise
public Brush DarkViolet
public Brush DeepPink
public Brush DeepSkyBlue
public Brush DimGray
public Brush DodgerBlue
public Brush Firebrick
public Brush FloralWhite
public Brush ForestGreen
public Brush Fuchsia
public Brush Gainsboro
public Brush GhostWhite
public Brush Gold
public Brush Goldenrod
public Brush Gray
public Brush Green
public Brush GreenYellow
public Brush Honeydew
public Brush HotPink
public Brush IndianRed
public Brush Indigo
public Brush Ivory
public Brush Khaki
public Brush Lavender
public Brush LavenderBlush
public Brush LawnGreen
public Brush LemonChiffon
public Brush LightBlue
public Brush LightCoral
public Brush LightCyan
public Brush LightGoldenrodYellow
public Brush LightGray
public Brush LightGreen
public Brush LightPink
public Brush LightSalmon
public Brush LightSeaGreen
public Brush LightSkyBlue
public Brush LightSlateGray
public Brush LightSteelBlue
public Brush LightYellow
public Brush Lime
public Brush LimeGreen
public Brush Linen
public Brush Magenta
public Brush Maroon
public Brush MediumAquamarine
public Brush MediumBlue
public Brush MediumOrchid
public Brush MediumPurple
public Brush MediumSeaGreen
public Brush MediumSlateBlue
public Brush MediumSpringGreen
public Brush MediumTurquoise
public Brush MediumVioletRed
public Brush MidnightBlue
public Brush MintCream
public Brush MistyRose
public Brush Moccasin
public Brush NavajoWhite
public Brush Navy
public Brush OldLace
public Brush Olive
public Brush OliveDrab
public Brush Orange
public Brush OrangeRed
public Brush Orchid
public Brush PaleGoldenrod
public Brush PaleGreen
public Brush PaleTurquoise
public Brush PaleVioletRed
public Brush PapayaWhip
public Brush PeachPuff
public Brush Peru
public Brush Pink
public Brush Plum
public Brush PowderBlue
public Brush Purple
public Brush Red
public Brush RosyBrown
public Brush RoyalBlue
public Brush SaddleBrown
public Brush Salmon
public Brush SandyBrown
public Brush SeaGreen
public Brush SeaShell
public Brush Sienna
public Brush Silver
public Brush SkyBlue
public Brush SlateBlue
public Brush SlateGray
public Brush Snow
public Brush SpringGreen
public Brush SteelBlue
public Brush Tan
public Brush Teal
public Brush Thistle
public Brush Tomato
public Brush Transparent
public Brush Turquoise
public Brush Violet
public Brush Wheat
public Brush White
public Brush WhiteSmoke
public Brush Yellow
public Brush YellowGreen
public Brush get_AliceBlue()
public Brush get_AntiqueWhite()
public Brush get_Aqua()
public Brush get_Aquamarine()
public Brush get_Azure()
public Brush get_Beige()
public Brush get_Bisque()
public Brush get_Black()
public Brush get_BlanchedAlmond()
public Brush get_Blue()
public Brush get_BlueViolet()
public Brush get_Brown()
public Brush get_BurlyWood()
public Brush get_CadetBlue()
public Brush get_Chartreuse()
public Brush get_Chocolate()
public Brush get_Coral()
public Brush get_CornflowerBlue()
public Brush get_Cornsilk()
public Brush get_Crimson()
public Brush get_Cyan()
public Brush get_DarkBlue()
public Brush get_DarkCyan()
public Brush get_DarkGoldenrod()
public Brush get_DarkGray()
public Brush get_DarkGreen()
public Brush get_DarkKhaki()
public Brush get_DarkMagenta()
public Brush get_DarkOliveGreen()
public Brush get_DarkOrange()
public Brush get_DarkOrchid()
public Brush get_DarkRed()
public Brush get_DarkSalmon()
public Brush get_DarkSeaGreen()
public Brush get_DarkSlateBlue()
public Brush get_DarkSlateGray()
public Brush get_DarkTurquoise()
public Brush get_DarkViolet()
public Brush get_DeepPink()
public Brush get_DeepSkyBlue()
public Brush get_DimGray()
public Brush get_DodgerBlue()
public Brush get_Firebrick()
public Brush get_FloralWhite()
public Brush get_ForestGreen()
public Brush get_Fuchsia()
public Brush get_Gainsboro()
public Brush get_GhostWhite()
public Brush get_Gold()
public Brush get_Goldenrod()
public Brush get_Gray()
public Brush get_Green()
public Brush get_GreenYellow()
public Brush get_Honeydew()
public Brush get_HotPink()
public Brush get_IndianRed()
public Brush get_Indigo()
public Brush get_Ivory()
public Brush get_Khaki()
public Brush get_Lavender()
public Brush get_LavenderBlush()
public Brush get_LawnGreen()
public Brush get_LemonChiffon()
public Brush get_LightBlue()
public Brush get_LightCoral()
public Brush get_LightCyan()
public Brush get_LightGoldenrodYellow()
public Brush get_LightGray()
public Brush get_LightGreen()
public Brush get_LightPink()
public Brush get_LightSalmon()
public Brush get_LightSeaGreen()
public Brush get_LightSkyBlue()
public Brush get_LightSlateGray()
public Brush get_LightSteelBlue()
public Brush get_LightYellow()
public Brush get_Lime()
public Brush get_LimeGreen()
public Brush get_Linen()
public Brush get_Magenta()
public Brush get_Maroon()
public Brush get_MediumAquamarine()
public Brush get_MediumBlue()
public Brush get_MediumOrchid()
public Brush get_MediumPurple()
public Brush get_MediumSeaGreen()
public Brush get_MediumSlateBlue()
public Brush get_MediumSpringGreen()
public Brush get_MediumTurquoise()
public Brush get_MediumVioletRed()
public Brush get_MidnightBlue()
public Brush get_MintCream()
public Brush get_MistyRose()
public Brush get_Moccasin()
public Brush get_NavajoWhite()
public Brush get_Navy()
public Brush get_OldLace()
public Brush get_Olive()
public Brush get_OliveDrab()
public Brush get_Orange()
public Brush get_OrangeRed()
public Brush get_Orchid()
public Brush get_PaleGoldenrod()
public Brush get_PaleGreen()
public Brush get_PaleTurquoise()
public Brush get_PaleVioletRed()
public Brush get_PapayaWhip()
public Brush get_PeachPuff()
public Brush get_Peru()
public Brush get_Pink()
public Brush get_Plum()
public Brush get_PowderBlue()
public Brush get_Purple()
public Brush get_Red()
public Brush get_RosyBrown()
public Brush get_RoyalBlue()
public Brush get_SaddleBrown()
public Brush get_Salmon()
public Brush get_SandyBrown()
public Brush get_SeaGreen()
public Brush get_SeaShell()
public Brush get_Sienna()
public Brush get_Silver()
public Brush get_SkyBlue()
public Brush get_SlateBlue()
public Brush get_SlateGray()
public Brush get_Snow()
public Brush get_SpringGreen()
public Brush get_SteelBlue()
public Brush get_Tan()
public Brush get_Teal()
public Brush get_Thistle()
public Brush get_Tomato()
public Brush get_Transparent()
public Brush get_Turquoise()
public Brush get_Violet()
public Brush get_Wheat()
public Brush get_White()
public Brush get_WhiteSmoke()
public Brush get_Yellow()
public Brush get_YellowGreen()
}
internal System.Drawing.BrushType : Enum {
public int value__
public BrushType BrushTypeSolidColor
public BrushType BrushTypeHatchFill
public BrushType BrushTypeTextureFill
public BrushType BrushTypePathGradient
public BrushType BrushTypeLinearGradient
}
public System.Drawing.BufferedGraphics : object {
private Rectangle size
private Bitmap membmp
private Graphics target
private Graphics source
public Graphics Graphics
internal void .ctor(Graphics targetGraphics, Rectangle targetRectangle)
protected void Finalize()
public Graphics get_Graphics()
public void Dispose()
private void Dispose(bool disposing)
public void Render()
public void Render(Graphics target)
public void Render(IntPtr targetDC)
}
public System.Drawing.BufferedGraphicsContext : object {
private Size max_buffer
public Size MaximumBuffer
protected void Finalize()
public BufferedGraphics Allocate(Graphics targetGraphics, Rectangle targetRectangle)
public BufferedGraphics Allocate(IntPtr targetDC, Rectangle targetRectangle)
public void Dispose()
public void Invalidate()
public Size get_MaximumBuffer()
public void set_MaximumBuffer(Size value)
}
public System.Drawing.BufferedGraphicsManager : object {
private BufferedGraphicsContext graphics_context
public BufferedGraphicsContext Current
public BufferedGraphicsContext get_Current()
}
internal System.Drawing.CarbonContext : ValueType {
public IntPtr port
public IntPtr ctx
public int width
public int height
public void .ctor(IntPtr port, IntPtr ctx, int width, int height)
public void Synchronize()
public void Release()
}
internal System.Drawing.CGPoint : ValueType {
public float x
public float y
}
internal System.Drawing.CGSize : ValueType {
public float width
public float height
}
public System.Drawing.CharacterRange : ValueType {
private int first
private int length
public int First
public int Length
public void .ctor(int First, int Length)
public int get_First()
public void set_First(int value)
public int get_Length()
public void set_Length(int value)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(CharacterRange cr1, CharacterRange cr2)
public bool op_Inequality(CharacterRange cr1, CharacterRange cr2)
}
internal System.Drawing.ClientUtils : object {
public bool IsCriticalException(Exception ex)
public bool IsSecurityOrCriticalException(Exception ex)
}
internal System.Drawing.CocoaContext : ValueType {
public IntPtr ctx
public int width
public int height
public void .ctor(IntPtr ctx, int width, int height)
public void Synchronize()
public void Release()
}
public System.Drawing.Color : ValueType {
private long value
internal short state
internal short knownColor
internal string name
public Color Empty
public string Name
public bool IsKnownColor
public bool IsSystemColor
public bool IsNamedColor
internal long Value
public bool IsEmpty
public byte A
public byte R
public byte G
public byte B
public Color Transparent
public Color AliceBlue
public Color AntiqueWhite
public Color Aqua
public Color Aquamarine
public Color Azure
public Color Beige
public Color Bisque
public Color Black
public Color BlanchedAlmond
public Color Blue
public Color BlueViolet
public Color Brown
public Color BurlyWood
public Color CadetBlue
public Color Chartreuse
public Color Chocolate
public Color Coral
public Color CornflowerBlue
public Color Cornsilk
public Color Crimson
public Color Cyan
public Color DarkBlue
public Color DarkCyan
public Color DarkGoldenrod
public Color DarkGray
public Color DarkGreen
public Color DarkKhaki
public Color DarkMagenta
public Color DarkOliveGreen
public Color DarkOrange
public Color DarkOrchid
public Color DarkRed
public Color DarkSalmon
public Color DarkSeaGreen
public Color DarkSlateBlue
public Color DarkSlateGray
public Color DarkTurquoise
public Color DarkViolet
public Color DeepPink
public Color DeepSkyBlue
public Color DimGray
public Color DodgerBlue
public Color Firebrick
public Color FloralWhite
public Color ForestGreen
public Color Fuchsia
public Color Gainsboro
public Color GhostWhite
public Color Gold
public Color Goldenrod
public Color Gray
public Color Green
public Color GreenYellow
public Color Honeydew
public Color HotPink
public Color IndianRed
public Color Indigo
public Color Ivory
public Color Khaki
public Color Lavender
public Color LavenderBlush
public Color LawnGreen
public Color LemonChiffon
public Color LightBlue
public Color LightCoral
public Color LightCyan
public Color LightGoldenrodYellow
public Color LightGreen
public Color LightGray
public Color LightPink
public Color LightSalmon
public Color LightSeaGreen
public Color LightSkyBlue
public Color LightSlateGray
public Color LightSteelBlue
public Color LightYellow
public Color Lime
public Color LimeGreen
public Color Linen
public Color Magenta
public Color Maroon
public Color MediumAquamarine
public Color MediumBlue
public Color MediumOrchid
public Color MediumPurple
public Color MediumSeaGreen
public Color MediumSlateBlue
public Color MediumSpringGreen
public Color MediumTurquoise
public Color MediumVioletRed
public Color MidnightBlue
public Color MintCream
public Color MistyRose
public Color Moccasin
public Color NavajoWhite
public Color Navy
public Color OldLace
public Color Olive
public Color OliveDrab
public Color Orange
public Color OrangeRed
public Color Orchid
public Color PaleGoldenrod
public Color PaleGreen
public Color PaleTurquoise
public Color PaleVioletRed
public Color PapayaWhip
public Color PeachPuff
public Color Peru
public Color Pink
public Color Plum
public Color PowderBlue
public Color Purple
public Color Red
public Color RosyBrown
public Color RoyalBlue
public Color SaddleBrown
public Color Salmon
public Color SandyBrown
public Color SeaGreen
public Color SeaShell
public Color Sienna
public Color Silver
public Color SkyBlue
public Color SlateBlue
public Color SlateGray
public Color Snow
public Color SpringGreen
public Color SteelBlue
public Color Tan
public Color Teal
public Color Thistle
public Color Tomato
public Color Turquoise
public Color Violet
public Color Wheat
public Color White
public Color WhiteSmoke
public Color Yellow
public Color YellowGreen
public string get_Name()
public bool get_IsKnownColor()
public bool get_IsSystemColor()
public bool get_IsNamedColor()
internal long get_Value()
internal void set_Value(long value)
public Color FromArgb(int red, int green, int blue)
public Color FromArgb(int alpha, int red, int green, int blue)
public int ToArgb()
public Color FromArgb(int alpha, Color baseColor)
public Color FromArgb(int argb)
public Color FromKnownColor(KnownColor color)
public Color FromName(string name)
public bool op_Equality(Color left, Color right)
public bool op_Inequality(Color left, Color right)
public float GetBrightness()
public float GetSaturation()
public float GetHue()
public KnownColor ToKnownColor()
public bool get_IsEmpty()
public byte get_A()
public byte get_R()
public byte get_G()
public byte get_B()
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
private void CheckRGBValues(int red, int green, int blue)
private ArgumentException CreateColorArgumentException(int value, string color)
private void CheckARGBValues(int alpha, int red, int green, int blue)
public Color get_Transparent()
public Color get_AliceBlue()
public Color get_AntiqueWhite()
public Color get_Aqua()
public Color get_Aquamarine()
public Color get_Azure()
public Color get_Beige()
public Color get_Bisque()
public Color get_Black()
public Color get_BlanchedAlmond()
public Color get_Blue()
public Color get_BlueViolet()
public Color get_Brown()
public Color get_BurlyWood()
public Color get_CadetBlue()
public Color get_Chartreuse()
public Color get_Chocolate()
public Color get_Coral()
public Color get_CornflowerBlue()
public Color get_Cornsilk()
public Color get_Crimson()
public Color get_Cyan()
public Color get_DarkBlue()
public Color get_DarkCyan()
public Color get_DarkGoldenrod()
public Color get_DarkGray()
public Color get_DarkGreen()
public Color get_DarkKhaki()
public Color get_DarkMagenta()
public Color get_DarkOliveGreen()
public Color get_DarkOrange()
public Color get_DarkOrchid()
public Color get_DarkRed()
public Color get_DarkSalmon()
public Color get_DarkSeaGreen()
public Color get_DarkSlateBlue()
public Color get_DarkSlateGray()
public Color get_DarkTurquoise()
public Color get_DarkViolet()
public Color get_DeepPink()
public Color get_DeepSkyBlue()
public Color get_DimGray()
public Color get_DodgerBlue()
public Color get_Firebrick()
public Color get_FloralWhite()
public Color get_ForestGreen()
public Color get_Fuchsia()
public Color get_Gainsboro()
public Color get_GhostWhite()
public Color get_Gold()
public Color get_Goldenrod()
public Color get_Gray()
public Color get_Green()
public Color get_GreenYellow()
public Color get_Honeydew()
public Color get_HotPink()
public Color get_IndianRed()
public Color get_Indigo()
public Color get_Ivory()
public Color get_Khaki()
public Color get_Lavender()
public Color get_LavenderBlush()
public Color get_LawnGreen()
public Color get_LemonChiffon()
public Color get_LightBlue()
public Color get_LightCoral()
public Color get_LightCyan()
public Color get_LightGoldenrodYellow()
public Color get_LightGreen()
public Color get_LightGray()
public Color get_LightPink()
public Color get_LightSalmon()
public Color get_LightSeaGreen()
public Color get_LightSkyBlue()
public Color get_LightSlateGray()
public Color get_LightSteelBlue()
public Color get_LightYellow()
public Color get_Lime()
public Color get_LimeGreen()
public Color get_Linen()
public Color get_Magenta()
public Color get_Maroon()
public Color get_MediumAquamarine()
public Color get_MediumBlue()
public Color get_MediumOrchid()
public Color get_MediumPurple()
public Color get_MediumSeaGreen()
public Color get_MediumSlateBlue()
public Color get_MediumSpringGreen()
public Color get_MediumTurquoise()
public Color get_MediumVioletRed()
public Color get_MidnightBlue()
public Color get_MintCream()
public Color get_MistyRose()
public Color get_Moccasin()
public Color get_NavajoWhite()
public Color get_Navy()
public Color get_OldLace()
public Color get_Olive()
public Color get_OliveDrab()
public Color get_Orange()
public Color get_OrangeRed()
public Color get_Orchid()
public Color get_PaleGoldenrod()
public Color get_PaleGreen()
public Color get_PaleTurquoise()
public Color get_PaleVioletRed()
public Color get_PapayaWhip()
public Color get_PeachPuff()
public Color get_Peru()
public Color get_Pink()
public Color get_Plum()
public Color get_PowderBlue()
public Color get_Purple()
public Color get_Red()
public Color get_RosyBrown()
public Color get_RoyalBlue()
public Color get_SaddleBrown()
public Color get_Salmon()
public Color get_SandyBrown()
public Color get_SeaGreen()
public Color get_SeaShell()
public Color get_Sienna()
public Color get_Silver()
public Color get_SkyBlue()
public Color get_SlateBlue()
public Color get_SlateGray()
public Color get_Snow()
public Color get_SpringGreen()
public Color get_SteelBlue()
public Color get_Tan()
public Color get_Teal()
public Color get_Thistle()
public Color get_Tomato()
public Color get_Turquoise()
public Color get_Violet()
public Color get_Wheat()
public Color get_White()
public Color get_WhiteSmoke()
public Color get_Yellow()
public Color get_YellowGreen()
}
public System.Drawing.ColorConverter : TypeConverter {
private StandardValuesCollection cached
private object creatingCached
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
internal Color StaticConvertFromString(ITypeDescriptorContext context, string s, CultureInfo culture)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
internal System.Drawing.ColorTable : object {
private Lazy`1<Dictionary`2<string, Color>> s_colorConstants
internal Dictionary`2<string, Color> Colors
private Dictionary`2<string, Color> GetColors()
internal Dictionary`2<string, Color> get_Colors()
private void FillConstants(Dictionary`2<string, Color> colors, Type enumType)
internal bool TryGetNamedColor(string name, Color& result)
internal bool IsKnownNamedColor(string name)
}
public System.Drawing.ColorTranslator : object {
public Color FromHtml(string htmlColor)
internal Color FromBGR(int bgr)
public Color FromOle(int oleColor)
public Color FromWin32(int win32Color)
public string ToHtml(Color c)
private char GetHexNumber(int b)
private string FormatHtml(int r, int g, int b)
public int ToOle(Color c)
public int ToWin32(Color c)
}
internal System.Drawing.ColorUtil : object {
public Color FromKnownColor(KnownColor color)
public bool IsSystemColor(Color color)
}
internal System.Drawing.ComIStreamMarshaler : object {
private int S_OK
private int E_NOINTERFACE
private ComIStreamMarshaler defaultInstance
private ICustomMarshaler GetInstance(string cookie)
public IntPtr MarshalManagedToNative(object managedObj)
public void CleanUpNativeData(IntPtr pNativeData)
public object MarshalNativeToManaged(IntPtr pNativeData)
public void CleanUpManagedData(object managedObj)
public int GetNativeDataSize()
}
internal System.Drawing.ComIStreamWrapper : object {
private int STG_E_INVALIDFUNCTION
private Stream baseStream
private long position
internal void .ctor(Stream stream)
private void SetSizeToPosition()
public void Read(Byte[] pv, int cb, IntPtr pcbRead)
public void Write(Byte[] pv, int cb, IntPtr pcbWritten)
public void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition)
public void SetSize(long libNewSize)
public void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten)
public void Commit(int grfCommitFlags)
public void Revert()
public void LockRegion(long libOffset, long cb, int dwLockType)
public void UnlockRegion(long libOffset, long cb, int dwLockType)
public void Stat(STATSTG& pstatstg, int grfStatFlag)
public void Clone(IStream& ppstm)
}
public System.Drawing.ContentAlignment : Enum {
public int value__
public ContentAlignment TopLeft
public ContentAlignment TopCenter
public ContentAlignment TopRight
public ContentAlignment MiddleLeft
public ContentAlignment MiddleCenter
public ContentAlignment MiddleRight
public ContentAlignment BottomLeft
public ContentAlignment BottomCenter
public ContentAlignment BottomRight
}
public System.Drawing.CopyPixelOperation : Enum {
public int value__
public CopyPixelOperation Blackness
public CopyPixelOperation CaptureBlt
public CopyPixelOperation DestinationInvert
public CopyPixelOperation MergeCopy
public CopyPixelOperation MergePaint
public CopyPixelOperation NoMirrorBitmap
public CopyPixelOperation NotSourceCopy
public CopyPixelOperation NotSourceErase
public CopyPixelOperation PatCopy
public CopyPixelOperation PatInvert
public CopyPixelOperation PatPaint
public CopyPixelOperation SourceAnd
public CopyPixelOperation SourceCopy
public CopyPixelOperation SourceErase
public CopyPixelOperation SourceInvert
public CopyPixelOperation SourcePaint
public CopyPixelOperation Whiteness
}
public System.Drawing.Design.CategoryNameCollection : ReadOnlyCollectionBase {
public string Item
public void .ctor(CategoryNameCollection value)
public void .ctor(String[] value)
public string get_Item(int index)
public bool Contains(string value)
public void CopyTo(String[] array, int index)
public int IndexOf(string value)
}
public System.Drawing.Design.IPropertyValueUIService {
public void add_PropertyUIValueItemsChanged(EventHandler value)
public void remove_PropertyUIValueItemsChanged(EventHandler value)
public void AddPropertyValueUIHandler(PropertyValueUIHandler newHandler)
public PropertyValueUIItem[] GetPropertyUIValueItems(ITypeDescriptorContext context, PropertyDescriptor propDesc)
public void NotifyPropertyValueUIItemsChanged()
public void RemovePropertyValueUIHandler(PropertyValueUIHandler newHandler)
}
public System.Drawing.Design.IToolboxItemProvider {
public ToolboxItemCollection Items
public ToolboxItemCollection get_Items()
}
public System.Drawing.Design.IToolboxService {
public CategoryNameCollection CategoryNames
public string SelectedCategory
public CategoryNameCollection get_CategoryNames()
public string get_SelectedCategory()
public void set_SelectedCategory(string value)
public void AddCreator(ToolboxItemCreatorCallback creator, string format)
public void AddCreator(ToolboxItemCreatorCallback creator, string format, IDesignerHost host)
public void AddLinkedToolboxItem(ToolboxItem toolboxItem, IDesignerHost host)
public void AddLinkedToolboxItem(ToolboxItem toolboxItem, string category, IDesignerHost host)
public void AddToolboxItem(ToolboxItem toolboxItem)
public void AddToolboxItem(ToolboxItem toolboxItem, string category)
public ToolboxItem DeserializeToolboxItem(object serializedObject)
public ToolboxItem DeserializeToolboxItem(object serializedObject, IDesignerHost host)
public ToolboxItem GetSelectedToolboxItem()
public ToolboxItem GetSelectedToolboxItem(IDesignerHost host)
public ToolboxItemCollection GetToolboxItems()
public ToolboxItemCollection GetToolboxItems(IDesignerHost host)
public ToolboxItemCollection GetToolboxItems(string category)
public ToolboxItemCollection GetToolboxItems(string category, IDesignerHost host)
public bool IsSupported(object serializedObject, IDesignerHost host)
public bool IsSupported(object serializedObject, ICollection filterAttributes)
public bool IsToolboxItem(object serializedObject)
public bool IsToolboxItem(object serializedObject, IDesignerHost host)
public void Refresh()
public void RemoveCreator(string format)
public void RemoveCreator(string format, IDesignerHost host)
public void RemoveToolboxItem(ToolboxItem toolboxItem)
public void RemoveToolboxItem(ToolboxItem toolboxItem, string category)
public void SelectedToolboxItemUsed()
public object SerializeToolboxItem(ToolboxItem toolboxItem)
public bool SetCursor()
public void SetSelectedToolboxItem(ToolboxItem toolboxItem)
}
public System.Drawing.Design.IToolboxUser {
public bool GetToolSupported(ToolboxItem tool)
public void ToolPicked(ToolboxItem tool)
}
public System.Drawing.Design.PaintValueEventArgs : EventArgs {
private ITypeDescriptorContext context
private object valueToPaint
private Graphics graphics
private Rectangle bounds
public Rectangle Bounds
public ITypeDescriptorContext Context
public Graphics Graphics
public object Value
public void .ctor(ITypeDescriptorContext context, object value, Graphics graphics, Rectangle bounds)
public Rectangle get_Bounds()
public ITypeDescriptorContext get_Context()
public Graphics get_Graphics()
public object get_Value()
}
public System.Drawing.Design.PropertyValueUIHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ITypeDescriptorContext context, PropertyDescriptor propDesc, ArrayList valueUIItemList)
public IAsyncResult BeginInvoke(ITypeDescriptorContext context, PropertyDescriptor propDesc, ArrayList valueUIItemList, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Drawing.Design.PropertyValueUIItem : object {
private Image itemImage
private PropertyValueUIItemInvokeHandler handler
private string tooltip
public Image Image
public PropertyValueUIItemInvokeHandler InvokeHandler
public string ToolTip
public void .ctor(Image uiItemImage, PropertyValueUIItemInvokeHandler handler, string tooltip)
public Image get_Image()
public PropertyValueUIItemInvokeHandler get_InvokeHandler()
public string get_ToolTip()
public void Reset()
}
public System.Drawing.Design.PropertyValueUIItemInvokeHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ITypeDescriptorContext context, PropertyDescriptor descriptor, PropertyValueUIItem invokedItem)
public IAsyncResult BeginInvoke(ITypeDescriptorContext context, PropertyDescriptor descriptor, PropertyValueUIItem invokedItem, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Drawing.Design.ToolboxComponentsCreatedEventArgs : EventArgs {
private IComponent[] comps
public IComponent[] Components
public void .ctor(IComponent[] components)
public IComponent[] get_Components()
}
public System.Drawing.Design.ToolboxComponentsCreatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolboxComponentsCreatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolboxComponentsCreatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Drawing.Design.ToolboxComponentsCreatingEventArgs : EventArgs {
private IDesignerHost host
public IDesignerHost DesignerHost
public void .ctor(IDesignerHost host)
public IDesignerHost get_DesignerHost()
}
public System.Drawing.Design.ToolboxComponentsCreatingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolboxComponentsCreatingEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolboxComponentsCreatingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Drawing.Design.ToolboxItem : object {
private bool locked
private Hashtable properties
private ToolboxComponentsCreatedEventHandler ComponentsCreated
private ToolboxComponentsCreatingEventHandler ComponentsCreating
public AssemblyName AssemblyName
public Bitmap Bitmap
public string DisplayName
public ICollection Filter
public bool Locked
public string TypeName
public string Company
public string ComponentType
public AssemblyName[] DependentAssemblies
public string Description
public bool IsTransient
public IDictionary Properties
public string Version
public Bitmap OriginalBitmap
public void .ctor(Type toolType)
public AssemblyName get_AssemblyName()
public void set_AssemblyName(AssemblyName value)
public Bitmap get_Bitmap()
public void set_Bitmap(Bitmap value)
public string get_DisplayName()
public void set_DisplayName(string value)
public ICollection get_Filter()
public void set_Filter(ICollection value)
public bool get_Locked()
public string get_TypeName()
public void set_TypeName(string value)
public string get_Company()
public void set_Company(string value)
public string get_ComponentType()
public AssemblyName[] get_DependentAssemblies()
public void set_DependentAssemblies(AssemblyName[] value)
public string get_Description()
public void set_Description(string value)
public bool get_IsTransient()
public void set_IsTransient(bool value)
public IDictionary get_Properties()
public string get_Version()
protected void CheckUnlocked()
public IComponent[] CreateComponents()
public IComponent[] CreateComponents(IDesignerHost host)
protected IComponent[] CreateComponentsCore(IDesignerHost host)
protected IComponent[] CreateComponentsCore(IDesignerHost host, IDictionary defaultValues)
public IComponent[] CreateComponents(IDesignerHost host, IDictionary defaultValues)
protected object FilterPropertyValue(string propertyName, object value)
protected void Deserialize(SerializationInfo info, StreamingContext context)
public bool Equals(object obj)
public int GetHashCode()
public Type GetType(IDesignerHost host)
protected Type GetType(IDesignerHost host, AssemblyName assemblyName, string typeName, bool reference)
public void Initialize(Type type)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
public void Lock()
protected void OnComponentsCreated(ToolboxComponentsCreatedEventArgs args)
protected void OnComponentsCreating(ToolboxComponentsCreatingEventArgs args)
protected void Serialize(SerializationInfo info, StreamingContext context)
public string ToString()
protected void ValidatePropertyType(string propertyName, object value, Type expectedType, bool allowNull)
protected object ValidatePropertyValue(string propertyName, object value)
private void SetValue(string propertyName, object value)
private string GetValue(string propertyName)
public void add_ComponentsCreated(ToolboxComponentsCreatedEventHandler value)
public void remove_ComponentsCreated(ToolboxComponentsCreatedEventHandler value)
public void add_ComponentsCreating(ToolboxComponentsCreatingEventHandler value)
public void remove_ComponentsCreating(ToolboxComponentsCreatingEventHandler value)
public Bitmap get_OriginalBitmap()
public void set_OriginalBitmap(Bitmap value)
}
public System.Drawing.Design.ToolboxItemCollection : ReadOnlyCollectionBase {
public ToolboxItem Item
public void .ctor(ToolboxItemCollection value)
public void .ctor(ToolboxItem[] value)
public ToolboxItem get_Item(int index)
public bool Contains(ToolboxItem value)
public void CopyTo(ToolboxItem[] array, int index)
public int IndexOf(ToolboxItem value)
}
public System.Drawing.Design.ToolboxItemCreatorCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ToolboxItem Invoke(object serializedObject, string format)
public IAsyncResult BeginInvoke(object serializedObject, string format, AsyncCallback callback, object object)
public ToolboxItem EndInvoke(IAsyncResult result)
}
public System.Drawing.Design.UITypeEditor : object {
public bool IsDropDownResizable
public bool get_IsDropDownResizable()
public object EditValue(IServiceProvider provider, object value)
public object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
public UITypeEditorEditStyle GetEditStyle()
public bool GetPaintValueSupported()
public bool GetPaintValueSupported(ITypeDescriptorContext context)
public UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
public void PaintValue(object value, Graphics canvas, Rectangle rectangle)
public void PaintValue(PaintValueEventArgs e)
}
public System.Drawing.Design.UITypeEditorEditStyle : Enum {
public int value__
public UITypeEditorEditStyle None
public UITypeEditorEditStyle Modal
public UITypeEditorEditStyle DropDown
}
public System.Drawing.Drawing2D.AdjustableArrowCap : CustomLineCap {
public float Height
public float Width
public float MiddleInset
public bool Filled
internal void .ctor(IntPtr nativeCap)
public void .ctor(float width, float height)
public void .ctor(float width, float height, bool isFilled)
public float get_Height()
public void set_Height(float value)
public float get_Width()
public void set_Width(float value)
public float get_MiddleInset()
public void set_MiddleInset(float value)
public bool get_Filled()
public void set_Filled(bool value)
}
public System.Drawing.Drawing2D.Blend : object {
private Single[] <Factors>k__BackingField
private Single[] <Positions>k__BackingField
public Single[] Factors
public Single[] Positions
public void .ctor(int count)
public Single[] get_Factors()
public void set_Factors(Single[] value)
public Single[] get_Positions()
public void set_Positions(Single[] value)
}
internal System.Drawing.Drawing2D.BrushType : Enum {
public int value__
public BrushType SolidColor
public BrushType HatchFill
public BrushType TextureFill
public BrushType PathGradient
public BrushType LinearGradient
}
public System.Drawing.Drawing2D.ColorBlend : object {
private Color[] <Colors>k__BackingField
private Single[] <Positions>k__BackingField
public Color[] Colors
public Single[] Positions
public void .ctor(int count)
public Color[] get_Colors()
public void set_Colors(Color[] value)
public Single[] get_Positions()
public void set_Positions(Single[] value)
}
public System.Drawing.Drawing2D.CombineMode : Enum {
public int value__
public CombineMode Replace
public CombineMode Intersect
public CombineMode Union
public CombineMode Xor
public CombineMode Exclude
public CombineMode Complement
}
public System.Drawing.Drawing2D.CompositingMode : Enum {
public int value__
public CompositingMode SourceOver
public CompositingMode SourceCopy
}
public System.Drawing.Drawing2D.CompositingQuality : Enum {
public int value__
public CompositingQuality Invalid
public CompositingQuality Default
public CompositingQuality HighSpeed
public CompositingQuality HighQuality
public CompositingQuality GammaCorrected
public CompositingQuality AssumeLinear
}
public System.Drawing.Drawing2D.CoordinateSpace : Enum {
public int value__
public CoordinateSpace World
public CoordinateSpace Page
public CoordinateSpace Device
}
public System.Drawing.Drawing2D.CustomLineCap : MarshalByRefObject {
internal SafeCustomLineCapHandle nativeCap
private bool _disposed
public LineJoin StrokeJoin
public LineCap BaseCap
public float BaseInset
public float WidthScale
internal CustomLineCap CreateCustomLineCapObject(IntPtr cap)
public void .ctor(GraphicsPath fillPath, GraphicsPath strokePath)
public void .ctor(GraphicsPath fillPath, GraphicsPath strokePath, LineCap baseCap)
public void .ctor(GraphicsPath fillPath, GraphicsPath strokePath, LineCap baseCap, float baseInset)
internal void .ctor(IntPtr nativeLineCap)
internal void SetNativeLineCap(IntPtr handle)
public void Dispose()
protected void Dispose(bool disposing)
protected void Finalize()
public object Clone()
public void SetStrokeCaps(LineCap startCap, LineCap endCap)
public void GetStrokeCaps(LineCap& startCap, LineCap& endCap)
public LineJoin get_StrokeJoin()
public void set_StrokeJoin(LineJoin value)
public LineCap get_BaseCap()
public void set_BaseCap(LineCap value)
public float get_BaseInset()
public void set_BaseInset(float value)
public float get_WidthScale()
public void set_WidthScale(float value)
}
internal System.Drawing.Drawing2D.CustomLineCapType : Enum {
public int value__
public CustomLineCapType Default
public CustomLineCapType AdjustableArrowCap
}
public System.Drawing.Drawing2D.DashCap : Enum {
public int value__
public DashCap Flat
public DashCap Round
public DashCap Triangle
}
public System.Drawing.Drawing2D.DashStyle : Enum {
public int value__
public DashStyle Solid
public DashStyle Dash
public DashStyle Dot
public DashStyle DashDot
public DashStyle DashDotDot
public DashStyle Custom
}
public System.Drawing.Drawing2D.FillMode : Enum {
public int value__
public FillMode Alternate
public FillMode Winding
}
public System.Drawing.Drawing2D.FlushIntention : Enum {
public int value__
public FlushIntention Flush
public FlushIntention Sync
}
public System.Drawing.Drawing2D.GraphicsContainer : MarshalByRefObject {
private UInt32 nativeState
internal UInt32 NativeObject
internal void .ctor(UInt32 state)
internal UInt32 get_NativeObject()
}
public System.Drawing.Drawing2D.GraphicsPath : MarshalByRefObject {
private float FlatnessDefault
internal IntPtr nativePath
public FillMode FillMode
public PathData PathData
public PointF[] PathPoints
public Byte[] PathTypes
public int PointCount
internal IntPtr NativeObject
private void .ctor(IntPtr ptr)
public void .ctor(FillMode fillMode)
public void .ctor(Point[] pts, Byte[] types)
public void .ctor(PointF[] pts, Byte[] types)
public void .ctor(Point[] pts, Byte[] types, FillMode fillMode)
public void .ctor(PointF[] pts, Byte[] types, FillMode fillMode)
public object Clone()
public void Dispose()
protected void Finalize()
private void Dispose(bool disposing)
public FillMode get_FillMode()
public void set_FillMode(FillMode value)
public PathData get_PathData()
public PointF[] get_PathPoints()
public Byte[] get_PathTypes()
public int get_PointCount()
internal IntPtr get_NativeObject()
internal void set_NativeObject(IntPtr value)
public void AddArc(Rectangle rect, float startAngle, float sweepAngle)
public void AddArc(RectangleF rect, float startAngle, float sweepAngle)
public void AddArc(int x, int y, int width, int height, float startAngle, float sweepAngle)
public void AddArc(float x, float y, float width, float height, float startAngle, float sweepAngle)
public void AddBezier(Point pt1, Point pt2, Point pt3, Point pt4)
public void AddBezier(PointF pt1, PointF pt2, PointF pt3, PointF pt4)
public void AddBezier(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4)
public void AddBezier(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)
public void AddBeziers(Point[] points)
public void AddBeziers(PointF[] points)
public void AddEllipse(RectangleF rect)
public void AddEllipse(float x, float y, float width, float height)
public void AddEllipse(Rectangle rect)
public void AddEllipse(int x, int y, int width, int height)
public void AddLine(Point pt1, Point pt2)
public void AddLine(PointF pt1, PointF pt2)
public void AddLine(int x1, int y1, int x2, int y2)
public void AddLine(float x1, float y1, float x2, float y2)
public void AddLines(Point[] points)
public void AddLines(PointF[] points)
public void AddPie(Rectangle rect, float startAngle, float sweepAngle)
public void AddPie(int x, int y, int width, int height, float startAngle, float sweepAngle)
public void AddPie(float x, float y, float width, float height, float startAngle, float sweepAngle)
public void AddPolygon(Point[] points)
public void AddPolygon(PointF[] points)
public void AddRectangle(Rectangle rect)
public void AddRectangle(RectangleF rect)
public void AddRectangles(Rectangle[] rects)
public void AddRectangles(RectangleF[] rects)
public void AddPath(GraphicsPath addingPath, bool connect)
public PointF GetLastPoint()
public void AddClosedCurve(Point[] points)
public void AddClosedCurve(PointF[] points)
public void AddClosedCurve(Point[] points, float tension)
public void AddClosedCurve(PointF[] points, float tension)
public void AddCurve(Point[] points)
public void AddCurve(PointF[] points)
public void AddCurve(Point[] points, float tension)
public void AddCurve(PointF[] points, float tension)
public void AddCurve(Point[] points, int offset, int numberOfSegments, float tension)
public void AddCurve(PointF[] points, int offset, int numberOfSegments, float tension)
public void Reset()
public void Reverse()
public void Transform(Matrix matrix)
public void AddString(string s, FontFamily family, int style, float emSize, Point origin, StringFormat format)
public void AddString(string s, FontFamily family, int style, float emSize, PointF origin, StringFormat format)
public void AddString(string s, FontFamily family, int style, float emSize, Rectangle layoutRect, StringFormat format)
public void AddString(string s, FontFamily family, int style, float emSize, RectangleF layoutRect, StringFormat format)
public void ClearMarkers()
public void CloseAllFigures()
public void CloseFigure()
public void Flatten()
public void Flatten(Matrix matrix)
public void Flatten(Matrix matrix, float flatness)
public RectangleF GetBounds()
public RectangleF GetBounds(Matrix matrix)
public RectangleF GetBounds(Matrix matrix, Pen pen)
public bool IsOutlineVisible(Point point, Pen pen)
public bool IsOutlineVisible(PointF point, Pen pen)
public bool IsOutlineVisible(int x, int y, Pen pen)
public bool IsOutlineVisible(float x, float y, Pen pen)
public bool IsOutlineVisible(Point pt, Pen pen, Graphics graphics)
public bool IsOutlineVisible(PointF pt, Pen pen, Graphics graphics)
public bool IsOutlineVisible(int x, int y, Pen pen, Graphics graphics)
public bool IsOutlineVisible(float x, float y, Pen pen, Graphics graphics)
public bool IsVisible(Point point)
public bool IsVisible(PointF point)
public bool IsVisible(int x, int y)
public bool IsVisible(float x, float y)
public bool IsVisible(Point pt, Graphics graphics)
public bool IsVisible(PointF pt, Graphics graphics)
public bool IsVisible(int x, int y, Graphics graphics)
public bool IsVisible(float x, float y, Graphics graphics)
public void SetMarkers()
public void StartFigure()
public void Warp(PointF[] destPoints, RectangleF srcRect)
public void Warp(PointF[] destPoints, RectangleF srcRect, Matrix matrix)
public void Warp(PointF[] destPoints, RectangleF srcRect, Matrix matrix, WarpMode warpMode)
public void Warp(PointF[] destPoints, RectangleF srcRect, Matrix matrix, WarpMode warpMode, float flatness)
public void Widen(Pen pen)
public void Widen(Pen pen, Matrix matrix)
public void Widen(Pen pen, Matrix matrix, float flatness)
}
public System.Drawing.Drawing2D.GraphicsPathIterator : MarshalByRefObject {
internal IntPtr nativeIter
public int Count
public int SubpathCount
public void .ctor(GraphicsPath path)
public void Dispose()
private void Dispose(bool disposing)
protected void Finalize()
public int NextSubpath(Int32& startIndex, Int32& endIndex, Boolean& isClosed)
public int NextSubpath(GraphicsPath path, Boolean& isClosed)
public int NextPathType(Byte& pathType, Int32& startIndex, Int32& endIndex)
public int NextMarker(Int32& startIndex, Int32& endIndex)
public int NextMarker(GraphicsPath path)
public int get_Count()
public int get_SubpathCount()
public bool HasCurve()
public void Rewind()
public int Enumerate(PointF[]& points, Byte[]& types)
public int CopyData(PointF[]& points, Byte[]& types, int startIndex, int endIndex)
}
public System.Drawing.Drawing2D.GraphicsState : MarshalByRefObject {
internal int nativeState
internal void .ctor(int nativeState)
}
public System.Drawing.Drawing2D.HatchBrush : Brush {
public HatchStyle HatchStyle
public Color ForegroundColor
public Color BackgroundColor
public void .ctor(HatchStyle hatchstyle, Color foreColor)
public void .ctor(HatchStyle hatchstyle, Color foreColor, Color backColor)
internal void .ctor(IntPtr nativeBrush)
public object Clone()
public HatchStyle get_HatchStyle()
public Color get_ForegroundColor()
public Color get_BackgroundColor()
}
public System.Drawing.Drawing2D.HatchStyle : Enum {
public int value__
public HatchStyle Horizontal
public HatchStyle Vertical
public HatchStyle ForwardDiagonal
public HatchStyle BackwardDiagonal
public HatchStyle Cross
public HatchStyle DiagonalCross
public HatchStyle Percent05
public HatchStyle Percent10
public HatchStyle Percent20
public HatchStyle Percent25
public HatchStyle Percent30
public HatchStyle Percent40
public HatchStyle Percent50
public HatchStyle Percent60
public HatchStyle Percent70
public HatchStyle Percent75
public HatchStyle Percent80
public HatchStyle Percent90
public HatchStyle LightDownwardDiagonal
public HatchStyle LightUpwardDiagonal
public HatchStyle DarkDownwardDiagonal
public HatchStyle DarkUpwardDiagonal
public HatchStyle WideDownwardDiagonal
public HatchStyle WideUpwardDiagonal
public HatchStyle LightVertical
public HatchStyle LightHorizontal
public HatchStyle NarrowVertical
public HatchStyle NarrowHorizontal
public HatchStyle DarkVertical
public HatchStyle DarkHorizontal
public HatchStyle DashedDownwardDiagonal
public HatchStyle DashedUpwardDiagonal
public HatchStyle DashedHorizontal
public HatchStyle DashedVertical
public HatchStyle SmallConfetti
public HatchStyle LargeConfetti
public HatchStyle ZigZag
public HatchStyle Wave
public HatchStyle DiagonalBrick
public HatchStyle HorizontalBrick
public HatchStyle Weave
public HatchStyle Plaid
public HatchStyle Divot
public HatchStyle DottedGrid
public HatchStyle DottedDiamond
public HatchStyle Shingle
public HatchStyle Trellis
public HatchStyle Sphere
public HatchStyle SmallGrid
public HatchStyle SmallCheckerBoard
public HatchStyle LargeCheckerBoard
public HatchStyle OutlinedDiamond
public HatchStyle SolidDiamond
public HatchStyle LargeGrid
public HatchStyle Min
public HatchStyle Max
}
public System.Drawing.Drawing2D.InterpolationMode : Enum {
public int value__
public InterpolationMode Invalid
public InterpolationMode Default
public InterpolationMode Low
public InterpolationMode High
public InterpolationMode Bilinear
public InterpolationMode Bicubic
public InterpolationMode NearestNeighbor
public InterpolationMode HighQualityBilinear
public InterpolationMode HighQualityBicubic
}
public System.Drawing.Drawing2D.LinearGradientBrush : Brush {
private RectangleF rectangle
public Blend Blend
public bool GammaCorrection
public ColorBlend InterpolationColors
public Color[] LinearColors
public RectangleF Rectangle
public Matrix Transform
public WrapMode WrapMode
internal void .ctor(IntPtr native)
public void .ctor(Point point1, Point point2, Color color1, Color color2)
public void .ctor(PointF point1, PointF point2, Color color1, Color color2)
public void .ctor(Rectangle rect, Color color1, Color color2, LinearGradientMode linearGradientMode)
public void .ctor(Rectangle rect, Color color1, Color color2, float angle)
public void .ctor(RectangleF rect, Color color1, Color color2, LinearGradientMode linearGradientMode)
public void .ctor(RectangleF rect, Color color1, Color color2, float angle)
public void .ctor(Rectangle rect, Color color1, Color color2, float angle, bool isAngleScaleable)
public void .ctor(RectangleF rect, Color color1, Color color2, float angle, bool isAngleScaleable)
public Blend get_Blend()
public void set_Blend(Blend value)
public bool get_GammaCorrection()
public void set_GammaCorrection(bool value)
public ColorBlend get_InterpolationColors()
public void set_InterpolationColors(ColorBlend value)
public Color[] get_LinearColors()
public void set_LinearColors(Color[] value)
public RectangleF get_Rectangle()
public Matrix get_Transform()
public void set_Transform(Matrix value)
public WrapMode get_WrapMode()
public void set_WrapMode(WrapMode value)
public void MultiplyTransform(Matrix matrix)
public void MultiplyTransform(Matrix matrix, MatrixOrder order)
public void ResetTransform()
public void RotateTransform(float angle)
public void RotateTransform(float angle, MatrixOrder order)
public void ScaleTransform(float sx, float sy)
public void ScaleTransform(float sx, float sy, MatrixOrder order)
public void SetBlendTriangularShape(float focus)
public void SetBlendTriangularShape(float focus, float scale)
public void SetSigmaBellShape(float focus)
public void SetSigmaBellShape(float focus, float scale)
public void TranslateTransform(float dx, float dy)
public void TranslateTransform(float dx, float dy, MatrixOrder order)
public object Clone()
}
public System.Drawing.Drawing2D.LinearGradientMode : Enum {
public int value__
public LinearGradientMode Horizontal
public LinearGradientMode Vertical
public LinearGradientMode ForwardDiagonal
public LinearGradientMode BackwardDiagonal
}
public System.Drawing.Drawing2D.LineCap : Enum {
public int value__
public LineCap Flat
public LineCap Square
public LineCap Round
public LineCap Triangle
public LineCap NoAnchor
public LineCap SquareAnchor
public LineCap RoundAnchor
public LineCap DiamondAnchor
public LineCap ArrowAnchor
public LineCap Custom
public LineCap AnchorMask
}
public System.Drawing.Drawing2D.LineJoin : Enum {
public int value__
public LineJoin Miter
public LineJoin Bevel
public LineJoin Round
public LineJoin MiterClipped
}
public System.Drawing.Drawing2D.Matrix : MarshalByRefObject {
internal IntPtr nativeMatrix
public Single[] Elements
public bool IsIdentity
public bool IsInvertible
public float OffsetX
public float OffsetY
internal IntPtr NativeObject
internal void .ctor(IntPtr ptr)
public void .ctor(Rectangle rect, Point[] plgpts)
public void .ctor(RectangleF rect, PointF[] plgpts)
public void .ctor(float m11, float m12, float m21, float m22, float dx, float dy)
public Single[] get_Elements()
public bool get_IsIdentity()
public bool get_IsInvertible()
public float get_OffsetX()
public float get_OffsetY()
public Matrix Clone()
public void Dispose()
public bool Equals(object obj)
protected void Finalize()
public int GetHashCode()
public void Invert()
public void Multiply(Matrix matrix)
public void Multiply(Matrix matrix, MatrixOrder order)
public void Reset()
public void Rotate(float angle)
public void Rotate(float angle, MatrixOrder order)
public void RotateAt(float angle, PointF point)
public void RotateAt(float angle, PointF point, MatrixOrder order)
public void Scale(float scaleX, float scaleY)
public void Scale(float scaleX, float scaleY, MatrixOrder order)
public void Shear(float shearX, float shearY)
public void Shear(float shearX, float shearY, MatrixOrder order)
public void TransformPoints(Point[] pts)
public void TransformPoints(PointF[] pts)
public void TransformVectors(Point[] pts)
public void TransformVectors(PointF[] pts)
public void Translate(float offsetX, float offsetY)
public void Translate(float offsetX, float offsetY, MatrixOrder order)
public void VectorTransformPoints(Point[] pts)
internal IntPtr get_NativeObject()
internal void set_NativeObject(IntPtr value)
}
public System.Drawing.Drawing2D.MatrixOrder : Enum {
public int value__
public MatrixOrder Prepend
public MatrixOrder Append
}
public System.Drawing.Drawing2D.PathData : object {
private PointF[] <Points>k__BackingField
private Byte[] <Types>k__BackingField
public PointF[] Points
public Byte[] Types
public PointF[] get_Points()
public void set_Points(PointF[] value)
public Byte[] get_Types()
public void set_Types(Byte[] value)
}
public System.Drawing.Drawing2D.PathGradientBrush : Brush {
public Blend Blend
public Color CenterColor
public PointF CenterPoint
public PointF FocusScales
public ColorBlend InterpolationColors
public RectangleF Rectangle
public Color[] SurroundColors
public Matrix Transform
public WrapMode WrapMode
internal void .ctor(IntPtr native)
public void .ctor(GraphicsPath path)
public void .ctor(Point[] points)
public void .ctor(PointF[] points)
public void .ctor(Point[] points, WrapMode wrapMode)
public void .ctor(PointF[] points, WrapMode wrapMode)
public Blend get_Blend()
public void set_Blend(Blend value)
public Color get_CenterColor()
public void set_CenterColor(Color value)
public PointF get_CenterPoint()
public void set_CenterPoint(PointF value)
public PointF get_FocusScales()
public void set_FocusScales(PointF value)
public ColorBlend get_InterpolationColors()
public void set_InterpolationColors(ColorBlend value)
public RectangleF get_Rectangle()
public Color[] get_SurroundColors()
public void set_SurroundColors(Color[] value)
public Matrix get_Transform()
public void set_Transform(Matrix value)
public WrapMode get_WrapMode()
public void set_WrapMode(WrapMode value)
public void MultiplyTransform(Matrix matrix)
public void MultiplyTransform(Matrix matrix, MatrixOrder order)
public void ResetTransform()
public void RotateTransform(float angle)
public void RotateTransform(float angle, MatrixOrder order)
public void ScaleTransform(float sx, float sy)
public void ScaleTransform(float sx, float sy, MatrixOrder order)
public void SetBlendTriangularShape(float focus)
public void SetBlendTriangularShape(float focus, float scale)
public void SetSigmaBellShape(float focus)
public void SetSigmaBellShape(float focus, float scale)
public void TranslateTransform(float dx, float dy)
public void TranslateTransform(float dx, float dy, MatrixOrder order)
public object Clone()
}
public System.Drawing.Drawing2D.PathPointType : Enum {
public int value__
public PathPointType Start
public PathPointType Line
public PathPointType Bezier
public PathPointType PathTypeMask
public PathPointType DashMode
public PathPointType PathMarker
public PathPointType CloseSubpath
public PathPointType Bezier3
}
public System.Drawing.Drawing2D.PenAlignment : Enum {
public int value__
public PenAlignment Center
public PenAlignment Inset
public PenAlignment Outset
public PenAlignment Left
public PenAlignment Right
}
public System.Drawing.Drawing2D.PenType : Enum {
public int value__
public PenType SolidColor
public PenType HatchFill
public PenType TextureFill
public PenType PathGradient
public PenType LinearGradient
}
public System.Drawing.Drawing2D.PixelOffsetMode : Enum {
public int value__
public PixelOffsetMode Invalid
public PixelOffsetMode Default
public PixelOffsetMode HighSpeed
public PixelOffsetMode HighQuality
public PixelOffsetMode None
public PixelOffsetMode Half
}
public System.Drawing.Drawing2D.QualityMode : Enum {
public int value__
public QualityMode Invalid
public QualityMode Default
public QualityMode Low
public QualityMode High
}
public System.Drawing.Drawing2D.RegionData : object {
private Byte[] <Data>k__BackingField
public Byte[] Data
internal void .ctor(Byte[] data)
public Byte[] get_Data()
public void set_Data(Byte[] value)
}
internal System.Drawing.Drawing2D.SafeCustomLineCapHandle : SafeHandle {
public bool IsInvalid
internal void .ctor(IntPtr h)
protected bool ReleaseHandle()
public bool get_IsInvalid()
public IntPtr op_Implicit(SafeCustomLineCapHandle handle)
public SafeCustomLineCapHandle op_Explicit(IntPtr handle)
}
public System.Drawing.Drawing2D.SmoothingMode : Enum {
public int value__
public SmoothingMode Invalid
public SmoothingMode Default
public SmoothingMode HighSpeed
public SmoothingMode HighQuality
public SmoothingMode None
public SmoothingMode AntiAlias
}
public System.Drawing.Drawing2D.WarpMode : Enum {
public int value__
public WarpMode Perspective
public WarpMode Bilinear
}
public System.Drawing.Drawing2D.WrapMode : Enum {
public int value__
public WrapMode Tile
public WrapMode TileFlipX
public WrapMode TileFlipY
public WrapMode TileFlipXY
public WrapMode Clamp
}
internal System.Drawing.ExternDll : object {
public string Gdiplus
public string User32
public string Gdi32
public string Kernel32
public string Winspool
public string Comdlg32
public string Comctl32
public string Shell32
public string Oleaut32
}
public System.Drawing.Font : MarshalByRefObject {
private IntPtr fontObject
private string systemFontName
private string originalFontName
private float _size
private object olf
private byte DefaultCharSet
private int CharSetOffset
private bool _bold
private FontFamily _fontFamily
private byte _gdiCharSet
private bool _gdiVerticalFont
private bool _italic
private string _name
private float _sizeInPoints
private bool _strikeout
private FontStyle _style
private bool _underline
private GraphicsUnit _unit
private int _hashCode
internal IntPtr NativeObject
public bool Bold
public FontFamily FontFamily
public byte GdiCharSet
public bool GdiVerticalFont
public int Height
public bool IsSystemFont
public bool Italic
public string Name
public float Size
public float SizeInPoints
public bool Strikeout
public FontStyle Style
public string SystemFontName
public string OriginalFontName
public bool Underline
public GraphicsUnit Unit
private void CreateFont(string familyName, float emSize, FontStyle style, GraphicsUnit unit, byte charSet, bool isVertical)
private void .ctor(SerializationInfo info, StreamingContext context)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
protected void Finalize()
public void Dispose()
internal void SetSystemFontName(string newSystemFontName)
internal void unitConversion(GraphicsUnit fromUnit, GraphicsUnit toUnit, float nSrc, Single& nTrg)
private void setProperties(FontFamily family, float emSize, FontStyle style, GraphicsUnit unit, byte charSet, bool isVertical)
public Font FromHfont(IntPtr hfont)
public IntPtr ToHfont()
internal void .ctor(IntPtr newFontObject, string familyName, FontStyle style, float size)
public void .ctor(Font prototype, FontStyle newStyle)
public void .ctor(FontFamily family, float emSize, GraphicsUnit unit)
public void .ctor(string familyName, float emSize, GraphicsUnit unit)
public void .ctor(FontFamily family, float emSize)
public void .ctor(FontFamily family, float emSize, FontStyle style)
public void .ctor(FontFamily family, float emSize, FontStyle style, GraphicsUnit unit)
public void .ctor(FontFamily family, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet)
public void .ctor(FontFamily family, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont)
public void .ctor(string familyName, float emSize)
public void .ctor(string familyName, float emSize, FontStyle style)
public void .ctor(string familyName, float emSize, FontStyle style, GraphicsUnit unit)
public void .ctor(string familyName, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet)
public void .ctor(string familyName, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont)
internal void .ctor(string familyName, float emSize, string systemName)
public object Clone()
internal IntPtr get_NativeObject()
public bool get_Bold()
public FontFamily get_FontFamily()
public byte get_GdiCharSet()
public bool get_GdiVerticalFont()
public int get_Height()
public bool get_IsSystemFont()
public bool get_Italic()
public string get_Name()
public float get_Size()
public float get_SizeInPoints()
public bool get_Strikeout()
public FontStyle get_Style()
public string get_SystemFontName()
public string get_OriginalFontName()
public bool get_Underline()
public GraphicsUnit get_Unit()
public bool Equals(object obj)
public int GetHashCode()
public Font FromHdc(IntPtr hdc)
public Font FromLogFont(object lf, IntPtr hdc)
public float GetHeight()
public Font FromLogFont(object lf)
public void ToLogFont(object logFont)
public void ToLogFont(object logFont, Graphics graphics)
public float GetHeight(Graphics graphics)
public float GetHeight(float dpi)
public string ToString()
}
public System.Drawing.FontConverter : TypeConverter {
protected void Finalize()
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
public bool GetCreateInstanceSupported(ITypeDescriptorContext context)
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
public System.Drawing.FontFamily : MarshalByRefObject {
private string name
private IntPtr nativeFontFamily
internal IntPtr NativeObject
internal IntPtr NativeFamily
public string Name
public FontFamily GenericMonospace
public FontFamily GenericSansSerif
public FontFamily GenericSerif
public FontFamily[] Families
internal void .ctor(IntPtr fntfamily)
internal void refreshName()
protected void Finalize()
internal IntPtr get_NativeObject()
internal IntPtr get_NativeFamily()
public void .ctor(GenericFontFamilies genericFamily)
public void .ctor(string name)
public void .ctor(string name, FontCollection fontCollection)
public string get_Name()
public FontFamily get_GenericMonospace()
public FontFamily get_GenericSansSerif()
public FontFamily get_GenericSerif()
public int GetCellAscent(FontStyle style)
public int GetCellDescent(FontStyle style)
public int GetEmHeight(FontStyle style)
public int GetLineSpacing(FontStyle style)
public bool IsStyleAvailable(FontStyle style)
public void Dispose()
public bool Equals(object obj)
public int GetHashCode()
public FontFamily[] get_Families()
public FontFamily[] GetFamilies(Graphics graphics)
public string GetName(int language)
public string ToString()
}
public System.Drawing.FontStyle : Enum {
public int value__
public FontStyle Regular
public FontStyle Bold
public FontStyle Italic
public FontStyle Underline
public FontStyle Strikeout
}
internal System.Drawing.GdiColorMap : ValueType {
internal int from
internal int to
}
internal System.Drawing.GdiColorPalette : ValueType {
internal int Flags
internal int Count
}
internal System.Drawing.GdipEncoderParameter : ValueType {
internal Guid guid
internal UInt32 numberOfValues
internal EncoderParameterValueType type
internal IntPtr value
}
internal System.Drawing.GdipImageCodecInfo : ValueType {
internal Guid Clsid
internal Guid FormatID
internal IntPtr CodecName
internal IntPtr DllName
internal IntPtr FormatDescription
internal IntPtr FilenameExtension
internal IntPtr MimeType
internal ImageCodecFlags Flags
internal int Version
internal int SigCount
internal int SigSize
private IntPtr SigPattern
private IntPtr SigMask
internal void MarshalTo(GdipImageCodecInfo gdipcodec, ImageCodecInfo codec)
}
internal System.Drawing.GDIPlus : object {
public int FACESIZE
public int LANG_NEUTRAL
public IntPtr Display
public bool UseX11Drawable
public bool UseCarbonDrawable
public bool UseCocoaDrawable
private string GdiPlus
internal ulong GdiPlusToken
internal Status GdiplusStartup(UInt64& token, GdiplusStartupInput& input, GdiplusStartupOutput& output)
internal void GdiplusShutdown(UInt64& token)
private void ProcessExit(object sender, EventArgs e)
public bool RunningOnWindows()
public bool RunningOnUnix()
public void FromUnManagedMemoryToPointI(IntPtr prt, Point[] pts)
public void FromUnManagedMemoryToPoint(IntPtr prt, PointF[] pts)
public IntPtr FromPointToUnManagedMemoryI(Point[] pts)
public void FromUnManagedMemoryToRectangles(IntPtr prt, RectangleF[] pts)
public IntPtr FromPointToUnManagedMemory(PointF[] pts)
internal void CheckStatus(Status status)
internal IntPtr GdipAlloc(int size)
internal void GdipFree(IntPtr ptr)
internal int GdipCloneBrush(HandleRef brush, IntPtr& clonedBrush)
internal int GdipDeleteBrush(HandleRef brush)
internal int GdipGetBrushType(HandleRef brush, BrushType& type)
internal Status GdipCreateRegion(IntPtr& region)
internal Status GdipCreateRegionRgnData(Byte[] data, int size, IntPtr& region)
internal Status GdipDeleteRegion(IntPtr region)
internal Status GdipCloneRegion(IntPtr region, IntPtr& cloned)
internal Status GdipCreateRegionRect(RectangleF& rect, IntPtr& region)
internal Status GdipCreateRegionRectI(Rectangle& rect, IntPtr& region)
internal Status GdipCreateRegionPath(IntPtr path, IntPtr& region)
internal Status GdipTranslateRegion(IntPtr region, float dx, float dy)
internal Status GdipTranslateRegionI(IntPtr region, int dx, int dy)
internal Status GdipIsVisibleRegionPoint(IntPtr region, float x, float y, IntPtr graphics, Boolean& result)
internal Status GdipIsVisibleRegionPointI(IntPtr region, int x, int y, IntPtr graphics, Boolean& result)
internal Status GdipIsVisibleRegionRect(IntPtr region, float x, float y, float width, float height, IntPtr graphics, Boolean& result)
internal Status GdipIsVisibleRegionRectI(IntPtr region, int x, int y, int width, int height, IntPtr graphics, Boolean& result)
internal Status GdipCombineRegionRect(IntPtr region, RectangleF& rect, CombineMode combineMode)
internal Status GdipCombineRegionRectI(IntPtr region, Rectangle& rect, CombineMode combineMode)
internal Status GdipCombineRegionPath(IntPtr region, IntPtr path, CombineMode combineMode)
internal Status GdipGetRegionBounds(IntPtr region, IntPtr graphics, RectangleF& rect)
internal Status GdipSetInfinite(IntPtr region)
internal Status GdipSetEmpty(IntPtr region)
internal Status GdipIsEmptyRegion(IntPtr region, IntPtr graphics, Boolean& result)
internal Status GdipIsInfiniteRegion(IntPtr region, IntPtr graphics, Boolean& result)
internal Status GdipCombineRegionRegion(IntPtr region, IntPtr region2, CombineMode combineMode)
internal Status GdipIsEqualRegion(IntPtr region, IntPtr region2, IntPtr graphics, Boolean& result)
internal Status GdipGetRegionDataSize(IntPtr region, Int32& bufferSize)
internal Status GdipGetRegionData(IntPtr region, Byte[] buffer, int bufferSize, Int32& sizeFilled)
internal Status GdipGetRegionScansCount(IntPtr region, Int32& count, IntPtr matrix)
internal Status GdipGetRegionScans(IntPtr region, IntPtr rects, Int32& count, IntPtr matrix)
internal Status GdipTransformRegion(IntPtr region, IntPtr matrix)
internal Status GdipFillRegion(IntPtr graphics, IntPtr brush, IntPtr region)
internal Status GdipGetRegionHRgn(IntPtr region, IntPtr graphics, IntPtr& hRgn)
internal Status GdipCreateRegionHrgn(IntPtr hRgn, IntPtr& region)
internal int GdipCreateSolidFill(int color, IntPtr& brush)
internal int GdipGetSolidFillColor(HandleRef brush, Int32& color)
internal int GdipSetSolidFillColor(HandleRef brush, int color)
internal int GdipCreateHatchBrush(int hatchstyle, int foreColor, int backColor, IntPtr& brush)
internal int GdipGetHatchStyle(HandleRef brush, Int32& hatchstyle)
internal int GdipGetHatchForegroundColor(HandleRef brush, Int32& foreColor)
internal int GdipGetHatchBackgroundColor(HandleRef brush, Int32& backColor)
internal int GdipGetTextureImage(HandleRef texture, IntPtr& image)
internal int GdipCreateTexture(HandleRef image, int wrapMode, IntPtr& texture)
internal int GdipCreateTextureIAI(HandleRef image, HandleRef imageAttributes, int x, int y, int width, int height, IntPtr& texture)
internal int GdipCreateTextureIA(HandleRef image, HandleRef imageAttributes, float x, float y, float width, float height, IntPtr& texture)
internal int GdipCreateTexture2I(HandleRef image, int wrapMode, int x, int y, int width, int height, IntPtr& texture)
internal int GdipCreateTexture2(HandleRef image, int wrapMode, float x, float y, float width, float height, IntPtr& texture)
internal int GdipGetTextureTransform(HandleRef texture, HandleRef matrix)
internal int GdipSetTextureTransform(HandleRef texture, HandleRef matrix)
internal int GdipGetTextureWrapMode(HandleRef texture, Int32& wrapMode)
internal int GdipSetTextureWrapMode(HandleRef texture, int wrapMode)
internal int GdipMultiplyTextureTransform(HandleRef texture, HandleRef matrix, MatrixOrder order)
internal int GdipResetTextureTransform(HandleRef texture)
internal int GdipRotateTextureTransform(HandleRef texture, float angle, MatrixOrder order)
internal int GdipScaleTextureTransform(HandleRef texture, float sx, float sy, MatrixOrder order)
internal int GdipTranslateTextureTransform(HandleRef texture, float dx, float dy, MatrixOrder order)
internal Status GdipCreatePathGradientFromPath(IntPtr path, IntPtr& brush)
internal Status GdipCreatePathGradientI(Point[] points, int count, WrapMode wrapMode, IntPtr& brush)
internal Status GdipCreatePathGradient(PointF[] points, int count, WrapMode wrapMode, IntPtr& brush)
internal Status GdipGetPathGradientBlendCount(IntPtr brush, Int32& count)
internal Status GdipGetPathGradientBlend(IntPtr brush, Single[] blend, Single[] positions, int count)
internal Status GdipSetPathGradientBlend(IntPtr brush, Single[] blend, Single[] positions, int count)
internal Status GdipGetPathGradientCenterColor(IntPtr brush, Int32& color)
internal Status GdipSetPathGradientCenterColor(IntPtr brush, int color)
internal Status GdipGetPathGradientCenterPoint(IntPtr brush, PointF& point)
internal Status GdipSetPathGradientCenterPoint(IntPtr brush, PointF& point)
internal Status GdipGetPathGradientFocusScales(IntPtr brush, Single& xScale, Single& yScale)
internal Status GdipSetPathGradientFocusScales(IntPtr brush, float xScale, float yScale)
internal Status GdipGetPathGradientPresetBlendCount(IntPtr brush, Int32& count)
internal Status GdipGetPathGradientPresetBlend(IntPtr brush, Int32[] blend, Single[] positions, int count)
internal Status GdipSetPathGradientPresetBlend(IntPtr brush, Int32[] blend, Single[] positions, int count)
internal Status GdipGetPathGradientRect(IntPtr brush, RectangleF& rect)
internal Status GdipGetPathGradientSurroundColorCount(IntPtr brush, Int32& count)
internal Status GdipGetPathGradientSurroundColorsWithCount(IntPtr brush, Int32[] color, Int32& count)
internal Status GdipSetPathGradientSurroundColorsWithCount(IntPtr brush, Int32[] color, Int32& count)
internal Status GdipGetPathGradientTransform(IntPtr brush, IntPtr matrix)
internal Status GdipSetPathGradientTransform(IntPtr brush, IntPtr matrix)
internal Status GdipGetPathGradientWrapMode(IntPtr brush, WrapMode& wrapMode)
internal Status GdipSetPathGradientWrapMode(IntPtr brush, WrapMode wrapMode)
internal Status GdipSetPathGradientLinearBlend(IntPtr brush, float focus, float scale)
internal Status GdipSetPathGradientSigmaBlend(IntPtr brush, float focus, float scale)
internal Status GdipMultiplyPathGradientTransform(IntPtr texture, IntPtr matrix, MatrixOrder order)
internal Status GdipResetPathGradientTransform(IntPtr brush)
internal Status GdipRotatePathGradientTransform(IntPtr brush, float angle, MatrixOrder order)
internal Status GdipScalePathGradientTransform(IntPtr brush, float sx, float sy, MatrixOrder order)
internal Status GdipTranslatePathGradientTransform(IntPtr brush, float dx, float dy, MatrixOrder order)
internal Status GdipCreateLineBrushI(Point& point1, Point& point2, int color1, int color2, WrapMode wrapMode, IntPtr& brush)
internal Status GdipCreateLineBrush(PointF& point1, PointF& point2, int color1, int color2, WrapMode wrapMode, IntPtr& brush)
internal Status GdipCreateLineBrushFromRectI(Rectangle& rect, int color1, int color2, LinearGradientMode linearGradientMode, WrapMode wrapMode, IntPtr& brush)
internal Status GdipCreateLineBrushFromRect(RectangleF& rect, int color1, int color2, LinearGradientMode linearGradientMode, WrapMode wrapMode, IntPtr& brush)
internal Status GdipCreateLineBrushFromRectWithAngleI(Rectangle& rect, int color1, int color2, float angle, bool isAngleScaleable, WrapMode wrapMode, IntPtr& brush)
internal Status GdipCreateLineBrushFromRectWithAngle(RectangleF& rect, int color1, int color2, float angle, bool isAngleScaleable, WrapMode wrapMode, IntPtr& brush)
internal Status GdipGetLineBlendCount(IntPtr brush, Int32& count)
internal Status GdipSetLineBlend(IntPtr brush, Single[] blend, Single[] positions, int count)
internal Status GdipGetLineBlend(IntPtr brush, Single[] blend, Single[] positions, int count)
internal Status GdipSetLineGammaCorrection(IntPtr brush, bool useGammaCorrection)
internal Status GdipGetLineGammaCorrection(IntPtr brush, Boolean& useGammaCorrection)
internal Status GdipGetLinePresetBlendCount(IntPtr brush, Int32& count)
internal Status GdipSetLinePresetBlend(IntPtr brush, Int32[] blend, Single[] positions, int count)
internal Status GdipGetLinePresetBlend(IntPtr brush, Int32[] blend, Single[] positions, int count)
internal Status GdipSetLineColors(IntPtr brush, int color1, int color2)
internal Status GdipGetLineColors(IntPtr brush, Int32[] colors)
internal Status GdipGetLineRectI(IntPtr brush, Rectangle& rect)
internal Status GdipGetLineRect(IntPtr brush, RectangleF& rect)
internal Status GdipSetLineTransform(IntPtr brush, IntPtr matrix)
internal Status GdipGetLineTransform(IntPtr brush, IntPtr matrix)
internal Status GdipSetLineWrapMode(IntPtr brush, WrapMode wrapMode)
internal Status GdipGetLineWrapMode(IntPtr brush, WrapMode& wrapMode)
internal Status GdipSetLineLinearBlend(IntPtr brush, float focus, float scale)
internal Status GdipSetLineSigmaBlend(IntPtr brush, float focus, float scale)
internal Status GdipMultiplyLineTransform(IntPtr brush, IntPtr matrix, MatrixOrder order)
internal Status GdipResetLineTransform(IntPtr brush)
internal Status GdipRotateLineTransform(IntPtr brush, float angle, MatrixOrder order)
internal Status GdipScaleLineTransform(IntPtr brush, float sx, float sy, MatrixOrder order)
internal Status GdipTranslateLineTransform(IntPtr brush, float dx, float dy, MatrixOrder order)
internal Status GdipCreateFromHDC(IntPtr hDC, IntPtr& graphics)
internal Status GdipDeleteGraphics(IntPtr graphics)
internal Status GdipRestoreGraphics(IntPtr graphics, UInt32 graphicsState)
internal Status GdipSaveGraphics(IntPtr graphics, UInt32& state)
internal Status GdipMultiplyWorldTransform(IntPtr graphics, IntPtr matrix, MatrixOrder order)
internal Status GdipRotateWorldTransform(IntPtr graphics, float angle, MatrixOrder order)
internal Status GdipTranslateWorldTransform(IntPtr graphics, float dx, float dy, MatrixOrder order)
internal Status GdipDrawArc(IntPtr graphics, IntPtr pen, float x, float y, float width, float height, float startAngle, float sweepAngle)
internal Status GdipDrawArcI(IntPtr graphics, IntPtr pen, int x, int y, int width, int height, float startAngle, float sweepAngle)
internal Status GdipDrawBezier(IntPtr graphics, IntPtr pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)
internal Status GdipDrawBezierI(IntPtr graphics, IntPtr pen, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4)
internal Status GdipDrawEllipseI(IntPtr graphics, IntPtr pen, int x, int y, int width, int height)
internal Status GdipDrawEllipse(IntPtr graphics, IntPtr pen, float x, float y, float width, float height)
internal Status GdipDrawLine(IntPtr graphics, IntPtr pen, float x1, float y1, float x2, float y2)
internal Status GdipDrawLineI(IntPtr graphics, IntPtr pen, int x1, int y1, int x2, int y2)
internal Status GdipDrawLines(IntPtr graphics, IntPtr pen, PointF[] points, int count)
internal Status GdipDrawLinesI(IntPtr graphics, IntPtr pen, Point[] points, int count)
internal Status GdipDrawPath(IntPtr graphics, IntPtr pen, IntPtr path)
internal Status GdipDrawPie(IntPtr graphics, IntPtr pen, float x, float y, float width, float height, float startAngle, float sweepAngle)
internal Status GdipDrawPieI(IntPtr graphics, IntPtr pen, int x, int y, int width, int height, float startAngle, float sweepAngle)
internal Status GdipDrawPolygon(IntPtr graphics, IntPtr pen, PointF[] points, int count)
internal Status GdipDrawPolygonI(IntPtr graphics, IntPtr pen, Point[] points, int count)
internal Status GdipDrawRectangle(IntPtr graphics, IntPtr pen, float x, float y, float width, float height)
internal Status GdipDrawRectangleI(IntPtr graphics, IntPtr pen, int x, int y, int width, int height)
internal Status GdipDrawRectangles(IntPtr graphics, IntPtr pen, RectangleF[] rects, int count)
internal Status GdipDrawRectanglesI(IntPtr graphics, IntPtr pen, Rectangle[] rects, int count)
internal Status GdipFillEllipseI(IntPtr graphics, IntPtr pen, int x, int y, int width, int height)
internal Status GdipFillEllipse(IntPtr graphics, IntPtr pen, float x, float y, float width, float height)
internal Status GdipFillPolygon(IntPtr graphics, IntPtr brush, PointF[] points, int count, FillMode fillMode)
internal Status GdipFillPolygonI(IntPtr graphics, IntPtr brush, Point[] points, int count, FillMode fillMode)
internal Status GdipFillPolygon2(IntPtr graphics, IntPtr brush, PointF[] points, int count)
internal Status GdipFillPolygon2I(IntPtr graphics, IntPtr brush, Point[] points, int count)
internal Status GdipFillRectangle(IntPtr graphics, IntPtr brush, float x1, float y1, float x2, float y2)
internal Status GdipFillRectangleI(IntPtr graphics, IntPtr brush, int x1, int y1, int x2, int y2)
internal Status GdipFillRectangles(IntPtr graphics, IntPtr brush, RectangleF[] rects, int count)
internal Status GdipFillRectanglesI(IntPtr graphics, IntPtr brush, Rectangle[] rects, int count)
internal Status GdipDrawString(IntPtr graphics, string text, int len, IntPtr font, RectangleF& rc, IntPtr format, IntPtr brush)
internal Status GdipGetDC(IntPtr graphics, IntPtr& hdc)
internal Status GdipReleaseDC(IntPtr graphics, IntPtr hdc)
internal Status GdipDrawImageRectI(IntPtr graphics, IntPtr image, int x, int y, int width, int height)
internal Status GdipGetRenderingOrigin(IntPtr graphics, Int32& x, Int32& y)
internal Status GdipSetRenderingOrigin(IntPtr graphics, int x, int y)
internal Status GdipCloneBitmapArea(float x, float y, float width, float height, PixelFormat format, IntPtr original, IntPtr& bitmap)
internal Status GdipCloneBitmapAreaI(int x, int y, int width, int height, PixelFormat format, IntPtr original, IntPtr& bitmap)
internal Status GdipResetWorldTransform(IntPtr graphics)
internal Status GdipSetWorldTransform(IntPtr graphics, IntPtr matrix)
internal Status GdipGetWorldTransform(IntPtr graphics, IntPtr matrix)
internal Status GdipScaleWorldTransform(IntPtr graphics, float sx, float sy, MatrixOrder order)
internal Status GdipGraphicsClear(IntPtr graphics, int argb)
internal Status GdipDrawClosedCurve(IntPtr graphics, IntPtr pen, PointF[] points, int count)
internal Status GdipDrawClosedCurveI(IntPtr graphics, IntPtr pen, Point[] points, int count)
internal Status GdipDrawClosedCurve2(IntPtr graphics, IntPtr pen, PointF[] points, int count, float tension)
internal Status GdipDrawClosedCurve2I(IntPtr graphics, IntPtr pen, Point[] points, int count, float tension)
internal Status GdipDrawCurve(IntPtr graphics, IntPtr pen, PointF[] points, int count)
internal Status GdipDrawCurveI(IntPtr graphics, IntPtr pen, Point[] points, int count)
internal Status GdipDrawCurve2(IntPtr graphics, IntPtr pen, PointF[] points, int count, float tension)
internal Status GdipDrawCurve2I(IntPtr graphics, IntPtr pen, Point[] points, int count, float tension)
internal Status GdipDrawCurve3(IntPtr graphics, IntPtr pen, PointF[] points, int count, int offset, int numberOfSegments, float tension)
internal Status GdipDrawCurve3I(IntPtr graphics, IntPtr pen, Point[] points, int count, int offset, int numberOfSegments, float tension)
internal Status GdipSetClipRect(IntPtr graphics, float x, float y, float width, float height, CombineMode combineMode)
internal Status GdipSetClipRectI(IntPtr graphics, int x, int y, int width, int height, CombineMode combineMode)
internal Status GdipSetClipPath(IntPtr graphics, IntPtr path, CombineMode combineMode)
internal Status GdipSetClipRegion(IntPtr graphics, IntPtr region, CombineMode combineMode)
internal Status GdipSetClipGraphics(IntPtr graphics, IntPtr srcgraphics, CombineMode combineMode)
internal Status GdipResetClip(IntPtr graphics)
internal Status GdipEndContainer(IntPtr graphics, UInt32 state)
internal Status GdipGetClip(IntPtr graphics, IntPtr region)
internal Status GdipFillClosedCurve(IntPtr graphics, IntPtr brush, PointF[] points, int count)
internal Status GdipFillClosedCurveI(IntPtr graphics, IntPtr brush, Point[] points, int count)
internal Status GdipFillClosedCurve2(IntPtr graphics, IntPtr brush, PointF[] points, int count, float tension, FillMode fillMode)
internal Status GdipFillClosedCurve2I(IntPtr graphics, IntPtr brush, Point[] points, int count, float tension, FillMode fillMode)
internal Status GdipFillPie(IntPtr graphics, IntPtr brush, float x, float y, float width, float height, float startAngle, float sweepAngle)
internal Status GdipFillPieI(IntPtr graphics, IntPtr brush, int x, int y, int width, int height, float startAngle, float sweepAngle)
internal Status GdipFillPath(IntPtr graphics, IntPtr brush, IntPtr path)
internal Status GdipGetNearestColor(IntPtr graphics, Int32& argb)
internal Status GdipIsVisiblePoint(IntPtr graphics, float x, float y, Boolean& result)
internal Status GdipIsVisiblePointI(IntPtr graphics, int x, int y, Boolean& result)
internal Status GdipIsVisibleRect(IntPtr graphics, float x, float y, float width, float height, Boolean& result)
internal Status GdipIsVisibleRectI(IntPtr graphics, int x, int y, int width, int height, Boolean& result)
internal Status GdipTransformPoints(IntPtr graphics, CoordinateSpace destSpace, CoordinateSpace srcSpace, IntPtr points, int count)
internal Status GdipTransformPointsI(IntPtr graphics, CoordinateSpace destSpace, CoordinateSpace srcSpace, IntPtr points, int count)
internal Status GdipTranslateClip(IntPtr graphics, float dx, float dy)
internal Status GdipTranslateClipI(IntPtr graphics, int dx, int dy)
internal Status GdipGetClipBounds(IntPtr graphics, RectangleF& rect)
internal Status GdipSetCompositingMode(IntPtr graphics, CompositingMode compositingMode)
internal Status GdipGetCompositingMode(IntPtr graphics, CompositingMode& compositingMode)
internal Status GdipSetCompositingQuality(IntPtr graphics, CompositingQuality compositingQuality)
internal Status GdipGetCompositingQuality(IntPtr graphics, CompositingQuality& compositingQuality)
internal Status GdipSetInterpolationMode(IntPtr graphics, InterpolationMode interpolationMode)
internal Status GdipGetInterpolationMode(IntPtr graphics, InterpolationMode& interpolationMode)
internal Status GdipGetDpiX(IntPtr graphics, Single& dpi)
internal Status GdipGetDpiY(IntPtr graphics, Single& dpi)
internal Status GdipIsClipEmpty(IntPtr graphics, Boolean& result)
internal Status GdipIsVisibleClipEmpty(IntPtr graphics, Boolean& result)
internal Status GdipGetPageUnit(IntPtr graphics, GraphicsUnit& unit)
internal Status GdipGetPageScale(IntPtr graphics, Single& scale)
internal Status GdipSetPageUnit(IntPtr graphics, GraphicsUnit unit)
internal Status GdipSetPageScale(IntPtr graphics, float scale)
internal Status GdipSetPixelOffsetMode(IntPtr graphics, PixelOffsetMode pixelOffsetMode)
internal Status GdipGetPixelOffsetMode(IntPtr graphics, PixelOffsetMode& pixelOffsetMode)
internal Status GdipSetSmoothingMode(IntPtr graphics, SmoothingMode smoothingMode)
internal Status GdipGetSmoothingMode(IntPtr graphics, SmoothingMode& smoothingMode)
internal Status GdipSetTextContrast(IntPtr graphics, int contrast)
internal Status GdipGetTextContrast(IntPtr graphics, Int32& contrast)
internal Status GdipSetTextRenderingHint(IntPtr graphics, TextRenderingHint mode)
internal Status GdipGetTextRenderingHint(IntPtr graphics, TextRenderingHint& mode)
internal Status GdipGetVisibleClipBounds(IntPtr graphics, RectangleF& rect)
internal Status GdipFlush(IntPtr graphics, FlushIntention intention)
internal Status GdipAddPathString(IntPtr path, string s, int lenght, IntPtr family, int style, float emSize, RectangleF& layoutRect, IntPtr format)
internal Status GdipAddPathStringI(IntPtr path, string s, int lenght, IntPtr family, int style, float emSize, Rectangle& layoutRect, IntPtr format)
internal Status GdipCreatePen1(int argb, float width, GraphicsUnit unit, IntPtr& pen)
internal Status GdipCreatePen2(IntPtr brush, float width, GraphicsUnit unit, IntPtr& pen)
internal Status GdipClonePen(IntPtr pen, IntPtr& clonepen)
internal Status GdipDeletePen(IntPtr pen)
internal Status GdipSetPenBrushFill(IntPtr pen, IntPtr brush)
internal Status GdipGetPenBrushFill(IntPtr pen, IntPtr& brush)
internal Status GdipGetPenFillType(IntPtr pen, PenType& type)
internal Status GdipSetPenColor(IntPtr pen, int color)
internal Status GdipGetPenColor(IntPtr pen, Int32& color)
internal Status GdipSetPenCompoundArray(IntPtr pen, Single[] dash, int count)
internal Status GdipGetPenCompoundArray(IntPtr pen, Single[] dash, int count)
internal Status GdipGetPenCompoundCount(IntPtr pen, Int32& count)
internal Status GdipSetPenDashCap197819(IntPtr pen, DashCap dashCap)
internal Status GdipGetPenDashCap197819(IntPtr pen, DashCap& dashCap)
internal Status GdipSetPenDashStyle(IntPtr pen, DashStyle dashStyle)
internal Status GdipGetPenDashStyle(IntPtr pen, DashStyle& dashStyle)
internal Status GdipSetPenDashOffset(IntPtr pen, float offset)
internal Status GdipGetPenDashOffset(IntPtr pen, Single& offset)
internal Status GdipGetPenDashCount(IntPtr pen, Int32& count)
internal Status GdipSetPenDashArray(IntPtr pen, Single[] dash, int count)
internal Status GdipGetPenDashArray(IntPtr pen, Single[] dash, int count)
internal Status GdipSetPenMiterLimit(IntPtr pen, float miterLimit)
internal Status GdipGetPenMiterLimit(IntPtr pen, Single& miterLimit)
internal Status GdipSetPenLineJoin(IntPtr pen, LineJoin lineJoin)
internal Status GdipGetPenLineJoin(IntPtr pen, LineJoin& lineJoin)
internal Status GdipSetPenLineCap197819(IntPtr pen, LineCap startCap, LineCap endCap, DashCap dashCap)
internal Status GdipSetPenMode(IntPtr pen, PenAlignment alignment)
internal Status GdipGetPenMode(IntPtr pen, PenAlignment& alignment)
internal Status GdipSetPenStartCap(IntPtr pen, LineCap startCap)
internal Status GdipGetPenStartCap(IntPtr pen, LineCap& startCap)
internal Status GdipSetPenEndCap(IntPtr pen, LineCap endCap)
internal Status GdipGetPenEndCap(IntPtr pen, LineCap& endCap)
internal Status GdipSetPenCustomStartCap(IntPtr pen, IntPtr customCap)
internal Status GdipGetPenCustomStartCap(IntPtr pen, IntPtr& customCap)
internal Status GdipSetPenCustomEndCap(IntPtr pen, IntPtr customCap)
internal Status GdipGetPenCustomEndCap(IntPtr pen, IntPtr& customCap)
internal Status GdipSetPenTransform(IntPtr pen, IntPtr matrix)
internal Status GdipGetPenTransform(IntPtr pen, IntPtr matrix)
internal Status GdipSetPenWidth(IntPtr pen, float width)
internal Status GdipGetPenWidth(IntPtr pen, Single& width)
internal Status GdipResetPenTransform(IntPtr pen)
internal Status GdipMultiplyPenTransform(IntPtr pen, IntPtr matrix, MatrixOrder order)
internal Status GdipRotatePenTransform(IntPtr pen, float angle, MatrixOrder order)
internal Status GdipScalePenTransform(IntPtr pen, float sx, float sy, MatrixOrder order)
internal Status GdipTranslatePenTransform(IntPtr pen, float dx, float dy, MatrixOrder order)
internal int GdipCreateCustomLineCap(HandleRef fillPath, HandleRef strokePath, LineCap baseCap, float baseInset, IntPtr& customCap)
internal int GdipDeleteCustomLineCap(HandleRef customCap)
internal int GdipCloneCustomLineCap(HandleRef customCap, IntPtr& clonedCap)
internal int GdipSetCustomLineCapStrokeCaps(HandleRef customCap, LineCap startCap, LineCap endCap)
internal int GdipGetCustomLineCapStrokeCaps(HandleRef customCap, LineCap& startCap, LineCap& endCap)
internal int GdipSetCustomLineCapStrokeJoin(HandleRef customCap, LineJoin lineJoin)
internal int GdipGetCustomLineCapStrokeJoin(HandleRef customCap, LineJoin& lineJoin)
internal int GdipSetCustomLineCapBaseCap(HandleRef customCap, LineCap baseCap)
internal int GdipGetCustomLineCapBaseCap(HandleRef customCap, LineCap& baseCap)
internal int GdipSetCustomLineCapBaseInset(HandleRef customCap, float inset)
internal int GdipGetCustomLineCapBaseInset(HandleRef customCap, Single& inset)
internal int GdipSetCustomLineCapWidthScale(HandleRef customCap, float widthScale)
internal int GdipGetCustomLineCapWidthScale(HandleRef customCap, Single& widthScale)
internal int GdipCreateAdjustableArrowCap(float height, float width, bool isFilled, IntPtr& arrowCap)
internal int GdipSetAdjustableArrowCapHeight(HandleRef arrowCap, float height)
internal int GdipGetAdjustableArrowCapHeight(HandleRef arrowCap, Single& height)
internal int GdipSetAdjustableArrowCapWidth(HandleRef arrowCap, float width)
internal int GdipGetAdjustableArrowCapWidth(HandleRef arrowCap, Single& width)
internal int GdipSetAdjustableArrowCapMiddleInset(HandleRef arrowCap, float middleInset)
internal int GdipGetAdjustableArrowCapMiddleInset(HandleRef arrowCap, Single& middleInset)
internal int GdipSetAdjustableArrowCapFillState(HandleRef arrowCap, bool isFilled)
internal int GdipGetAdjustableArrowCapFillState(HandleRef arrowCap, Boolean& isFilled)
internal Status GdipCreateFromHWND(IntPtr hwnd, IntPtr& graphics)
internal Status GdipMeasureString(IntPtr graphics, string str, int length, IntPtr font, RectangleF& layoutRect, IntPtr stringFormat, RectangleF& boundingBox, Int32* codepointsFitted, Int32* linesFilled)
internal Status GdipMeasureCharacterRanges(IntPtr graphics, string str, int length, IntPtr font, RectangleF& layoutRect, IntPtr stringFormat, int regcount, IntPtr& regions)
internal Status GdipSetStringFormatMeasurableCharacterRanges(IntPtr native, int cnt, CharacterRange[] range)
internal Status GdipGetStringFormatMeasurableCharacterRangeCount(IntPtr native, Int32& cnt)
internal Status GdipCreateBitmapFromScan0(int width, int height, int stride, PixelFormat format, IntPtr scan0, IntPtr& bmp)
internal Status GdipCreateBitmapFromGraphics(int width, int height, IntPtr target, IntPtr& bitmap)
internal Status GdipBitmapLockBits(IntPtr bmp, Rectangle& rc, ImageLockMode flags, PixelFormat format, BitmapData bmpData)
internal Status GdipBitmapSetResolution(IntPtr bmp, float xdpi, float ydpi)
internal Status GdipBitmapUnlockBits(IntPtr bmp, BitmapData bmpData)
internal Status GdipBitmapGetPixel(IntPtr bmp, int x, int y, Int32& argb)
internal Status GdipBitmapSetPixel(IntPtr bmp, int x, int y, int argb)
internal Status GdipLoadImageFromFile(string filename, IntPtr& image)
internal Status GdipLoadImageFromStream(IStream stream, IntPtr& image)
internal Status GdipSaveImageToStream(HandleRef image, IStream stream, Guid& clsidEncoder, HandleRef encoderParams)
internal Status GdipCloneImage(IntPtr image, IntPtr& imageclone)
internal Status GdipLoadImageFromFileICM(string filename, IntPtr& image)
internal Status GdipCreateBitmapFromHBITMAP(IntPtr hBitMap, IntPtr gdiPalette, IntPtr& image)
internal Status GdipDisposeImage(IntPtr image)
internal Status GdipGetImageFlags(IntPtr image, Int32& flag)
internal Status GdipGetImageType(IntPtr image, ImageType& type)
internal Status GdipImageGetFrameDimensionsCount(IntPtr image, UInt32& count)
internal Status GdipImageGetFrameDimensionsList(IntPtr image, Guid[] dimensionIDs, UInt32 count)
internal Status GdipGetImageHeight(IntPtr image, UInt32& height)
internal Status GdipGetImageHorizontalResolution(IntPtr image, Single& resolution)
internal Status GdipGetImagePaletteSize(IntPtr image, Int32& size)
internal Status GdipGetImagePalette(IntPtr image, IntPtr palette, int size)
internal Status GdipSetImagePalette(IntPtr image, IntPtr palette)
internal Status GdipGetImageDimension(IntPtr image, Single& width, Single& height)
internal Status GdipGetImagePixelFormat(IntPtr image, PixelFormat& format)
internal Status GdipGetPropertyCount(IntPtr image, UInt32& propNumbers)
internal Status GdipGetPropertyIdList(IntPtr image, UInt32 propNumbers, Int32[] list)
internal Status GdipGetPropertySize(IntPtr image, Int32& bufferSize, Int32& propNumbers)
internal Status GdipGetAllPropertyItems(IntPtr image, int bufferSize, int propNumbers, IntPtr items)
internal Status GdipGetImageRawFormat(IntPtr image, Guid& format)
internal Status GdipGetImageVerticalResolution(IntPtr image, Single& resolution)
internal Status GdipGetImageWidth(IntPtr image, UInt32& width)
internal Status GdipGetImageBounds(IntPtr image, RectangleF& source, GraphicsUnit& unit)
internal Status GdipGetEncoderParameterListSize(IntPtr image, Guid& encoder, UInt32& size)
internal Status GdipGetEncoderParameterList(IntPtr image, Guid& encoder, UInt32 size, IntPtr buffer)
internal Status GdipImageGetFrameCount(IntPtr image, Guid& guidDimension, UInt32& count)
internal Status GdipImageSelectActiveFrame(IntPtr image, Guid& guidDimension, int frameIndex)
internal Status GdipGetPropertyItemSize(IntPtr image, int propertyID, Int32& propertySize)
internal Status GdipGetPropertyItem(IntPtr image, int propertyID, int propertySize, IntPtr buffer)
internal Status GdipRemovePropertyItem(IntPtr image, int propertyId)
internal Status GdipSetPropertyItem(IntPtr image, GdipPropertyItem* propertyItem)
internal Status GdipGetImageThumbnail(IntPtr image, UInt32 width, UInt32 height, IntPtr& thumbImage, IntPtr callback, IntPtr callBackData)
internal Status GdipImageRotateFlip(IntPtr image, RotateFlipType rotateFlipType)
internal Status GdipSaveImageToFile(IntPtr image, string filename, Guid& encoderClsID, IntPtr encoderParameters)
internal Status GdipSaveAdd(IntPtr image, IntPtr encoderParameters)
internal Status GdipSaveAddImage(IntPtr image, IntPtr imagenew, IntPtr encoderParameters)
internal Status GdipDrawImageI(IntPtr graphics, IntPtr image, int x, int y)
internal Status GdipGetImageGraphicsContext(IntPtr image, IntPtr& graphics)
internal Status GdipDrawImage(IntPtr graphics, IntPtr image, float x, float y)
internal Status GdipBeginContainer(IntPtr graphics, RectangleF& dstrect, RectangleF& srcrect, GraphicsUnit unit, UInt32& state)
internal Status GdipBeginContainerI(IntPtr graphics, Rectangle& dstrect, Rectangle& srcrect, GraphicsUnit unit, UInt32& state)
internal Status GdipBeginContainer2(IntPtr graphics, UInt32& state)
internal Status GdipDrawImagePoints(IntPtr graphics, IntPtr image, PointF[] destPoints, int count)
internal Status GdipDrawImagePointsI(IntPtr graphics, IntPtr image, Point[] destPoints, int count)
internal Status GdipDrawImageRectRectI(IntPtr graphics, IntPtr image, int dstx, int dsty, int dstwidth, int dstheight, int srcx, int srcy, int srcwidth, int srcheight, GraphicsUnit srcUnit, IntPtr imageattr, DrawImageAbort callback, IntPtr callbackData)
internal Status GdipDrawImageRectRect(IntPtr graphics, IntPtr image, float dstx, float dsty, float dstwidth, float dstheight, float srcx, float srcy, float srcwidth, float srcheight, GraphicsUnit srcUnit, IntPtr imageattr, DrawImageAbort callback, IntPtr callbackData)
internal Status GdipDrawImagePointsRectI(IntPtr graphics, IntPtr image, Point[] destPoints, int count, int srcx, int srcy, int srcwidth, int srcheight, GraphicsUnit srcUnit, IntPtr imageattr, DrawImageAbort callback, IntPtr callbackData)
internal Status GdipDrawImagePointsRect(IntPtr graphics, IntPtr image, PointF[] destPoints, int count, float srcx, float srcy, float srcwidth, float srcheight, GraphicsUnit srcUnit, IntPtr imageattr, DrawImageAbort callback, IntPtr callbackData)
internal Status GdipDrawImageRect(IntPtr graphics, IntPtr image, float x, float y, float width, float height)
internal Status GdipDrawImagePointRect(IntPtr graphics, IntPtr image, float x, float y, float srcx, float srcy, float srcwidth, float srcheight, GraphicsUnit srcUnit)
internal Status GdipDrawImagePointRectI(IntPtr graphics, IntPtr image, int x, int y, int srcx, int srcy, int srcwidth, int srcheight, GraphicsUnit srcUnit)
internal Status GdipCreateStringFormat(StringFormatFlags formatAttributes, int language, IntPtr& native)
internal Status GdipCreateHBITMAPFromBitmap(IntPtr bmp, IntPtr& HandleBmp, int clrbackground)
internal Status GdipCreateBitmapFromFile(string filename, IntPtr& bitmap)
internal Status GdipCreateBitmapFromFileICM(string filename, IntPtr& bitmap)
internal Status GdipCreateHICONFromBitmap(IntPtr bmp, IntPtr& HandleIcon)
internal Status GdipCreateBitmapFromHICON(IntPtr hicon, IntPtr& bitmap)
internal Status GdipCreateBitmapFromResource(IntPtr hInstance, string lpBitmapName, IntPtr& bitmap)
internal Status GdipCreateMatrix(IntPtr& matrix)
internal Status GdipCreateMatrix2(float m11, float m12, float m21, float m22, float dx, float dy, IntPtr& matrix)
internal Status GdipCreateMatrix3(RectangleF& rect, PointF[] dstplg, IntPtr& matrix)
internal Status GdipCreateMatrix3I(Rectangle& rect, Point[] dstplg, IntPtr& matrix)
internal Status GdipDeleteMatrix(IntPtr matrix)
internal Status GdipCloneMatrix(IntPtr matrix, IntPtr& cloneMatrix)
internal Status GdipSetMatrixElements(IntPtr matrix, float m11, float m12, float m21, float m22, float dx, float dy)
internal Status GdipGetMatrixElements(IntPtr matrix, IntPtr matrixOut)
internal Status GdipMultiplyMatrix(IntPtr matrix, IntPtr matrix2, MatrixOrder order)
internal Status GdipTranslateMatrix(IntPtr matrix, float offsetX, float offsetY, MatrixOrder order)
internal Status GdipScaleMatrix(IntPtr matrix, float scaleX, float scaleY, MatrixOrder order)
internal Status GdipRotateMatrix(IntPtr matrix, float angle, MatrixOrder order)
internal Status GdipShearMatrix(IntPtr matrix, float shearX, float shearY, MatrixOrder order)
internal Status GdipInvertMatrix(IntPtr matrix)
internal Status GdipTransformMatrixPoints(IntPtr matrix, PointF[] pts, int count)
internal Status GdipTransformMatrixPointsI(IntPtr matrix, Point[] pts, int count)
internal Status GdipVectorTransformMatrixPoints(IntPtr matrix, PointF[] pts, int count)
internal Status GdipVectorTransformMatrixPointsI(IntPtr matrix, Point[] pts, int count)
internal Status GdipIsMatrixInvertible(IntPtr matrix, Boolean& result)
internal Status GdipIsMatrixIdentity(IntPtr matrix, Boolean& result)
internal Status GdipIsMatrixEqual(IntPtr matrix, IntPtr matrix2, Boolean& result)
internal Status GdipCreatePath(FillMode brushMode, IntPtr& path)
internal Status GdipCreatePath2(PointF[] points, Byte[] types, int count, FillMode brushMode, IntPtr& path)
internal Status GdipCreatePath2I(Point[] points, Byte[] types, int count, FillMode brushMode, IntPtr& path)
internal Status GdipClonePath(IntPtr path, IntPtr& clonePath)
internal Status GdipDeletePath(IntPtr path)
internal Status GdipResetPath(IntPtr path)
internal Status GdipGetPointCount(IntPtr path, Int32& count)
internal Status GdipGetPathTypes(IntPtr path, Byte[] types, int count)
internal Status GdipGetPathPoints(IntPtr path, PointF[] points, int count)
internal Status GdipGetPathPointsI(IntPtr path, Point[] points, int count)
internal Status GdipGetPathFillMode(IntPtr path, FillMode& fillMode)
internal Status GdipSetPathFillMode(IntPtr path, FillMode fillMode)
internal Status GdipStartPathFigure(IntPtr path)
internal Status GdipClosePathFigure(IntPtr path)
internal Status GdipClosePathFigures(IntPtr path)
internal Status GdipSetPathMarker(IntPtr path)
internal Status GdipClearPathMarkers(IntPtr path)
internal Status GdipReversePath(IntPtr path)
internal Status GdipGetPathLastPoint(IntPtr path, PointF& lastPoint)
internal Status GdipAddPathLine(IntPtr path, float x1, float y1, float x2, float y2)
internal Status GdipAddPathLine2(IntPtr path, PointF[] points, int count)
internal Status GdipAddPathLine2I(IntPtr path, Point[] points, int count)
internal Status GdipAddPathArc(IntPtr path, float x, float y, float width, float height, float startAngle, float sweepAngle)
internal Status GdipAddPathBezier(IntPtr path, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)
internal Status GdipAddPathBeziers(IntPtr path, PointF[] points, int count)
internal Status GdipAddPathCurve(IntPtr path, PointF[] points, int count)
internal Status GdipAddPathCurveI(IntPtr path, Point[] points, int count)
internal Status GdipAddPathCurve2(IntPtr path, PointF[] points, int count, float tension)
internal Status GdipAddPathCurve2I(IntPtr path, Point[] points, int count, float tension)
internal Status GdipAddPathCurve3(IntPtr path, PointF[] points, int count, int offset, int numberOfSegments, float tension)
internal Status GdipAddPathCurve3I(IntPtr path, Point[] points, int count, int offset, int numberOfSegments, float tension)
internal Status GdipAddPathClosedCurve(IntPtr path, PointF[] points, int count)
internal Status GdipAddPathClosedCurveI(IntPtr path, Point[] points, int count)
internal Status GdipAddPathClosedCurve2(IntPtr path, PointF[] points, int count, float tension)
internal Status GdipAddPathClosedCurve2I(IntPtr path, Point[] points, int count, float tension)
internal Status GdipAddPathRectangle(IntPtr path, float x, float y, float width, float height)
internal Status GdipAddPathRectangles(IntPtr path, RectangleF[] rects, int count)
internal Status GdipAddPathEllipse(IntPtr path, float x, float y, float width, float height)
internal Status GdipAddPathEllipseI(IntPtr path, int x, int y, int width, int height)
internal Status GdipAddPathPie(IntPtr path, float x, float y, float width, float height, float startAngle, float sweepAngle)
internal Status GdipAddPathPieI(IntPtr path, int x, int y, int width, int height, float startAngle, float sweepAngle)
internal Status GdipAddPathPolygon(IntPtr path, PointF[] points, int count)
internal Status GdipAddPathPath(IntPtr path, IntPtr addingPath, bool connect)
internal Status GdipAddPathLineI(IntPtr path, int x1, int y1, int x2, int y2)
internal Status GdipAddPathArcI(IntPtr path, int x, int y, int width, int height, float startAngle, float sweepAngle)
internal Status GdipAddPathBezierI(IntPtr path, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4)
internal Status GdipAddPathBeziersI(IntPtr path, Point[] points, int count)
internal Status GdipAddPathPolygonI(IntPtr path, Point[] points, int count)
internal Status GdipAddPathRectangleI(IntPtr path, int x, int y, int width, int height)
internal Status GdipAddPathRectanglesI(IntPtr path, Rectangle[] rects, int count)
internal Status GdipFlattenPath(IntPtr path, IntPtr matrix, float floatness)
internal Status GdipTransformPath(IntPtr path, IntPtr matrix)
internal Status GdipWarpPath(IntPtr path, IntPtr matrix, PointF[] points, int count, float srcx, float srcy, float srcwidth, float srcheight, WarpMode mode, float flatness)
internal Status GdipWidenPath(IntPtr path, IntPtr pen, IntPtr matrix, float flatness)
internal Status GdipGetPathWorldBounds(IntPtr path, RectangleF& bounds, IntPtr matrix, IntPtr pen)
internal Status GdipGetPathWorldBoundsI(IntPtr path, Rectangle& bounds, IntPtr matrix, IntPtr pen)
internal Status GdipIsVisiblePathPoint(IntPtr path, float x, float y, IntPtr graphics, Boolean& result)
internal Status GdipIsVisiblePathPointI(IntPtr path, int x, int y, IntPtr graphics, Boolean& result)
internal Status GdipIsOutlineVisiblePathPoint(IntPtr path, float x, float y, IntPtr pen, IntPtr graphics, Boolean& result)
internal Status GdipIsOutlineVisiblePathPointI(IntPtr path, int x, int y, IntPtr pen, IntPtr graphics, Boolean& result)
internal int GdipCreatePathIter(IntPtr& iterator, HandleRef path)
internal int GdipPathIterGetCount(HandleRef iterator, Int32& count)
internal int GdipPathIterGetSubpathCount(HandleRef iterator, Int32& count)
internal int GdipDeletePathIter(HandleRef iterator)
internal int GdipPathIterCopyData(HandleRef iterator, Int32& resultCount, IntPtr points, Byte[] types, int startIndex, int endIndex)
internal int GdipPathIterEnumerate(HandleRef iterator, Int32& resultCount, IntPtr points, Byte[] types, int count)
internal int GdipPathIterHasCurve(HandleRef iterator, Boolean& curve)
internal int GdipPathIterNextMarkerPath(HandleRef iterator, Int32& resultCount, HandleRef path)
internal int GdipPathIterNextMarker(HandleRef iterator, Int32& resultCount, Int32& startIndex, Int32& endIndex)
internal int GdipPathIterNextPathType(HandleRef iterator, Int32& resultCount, Byte& pathType, Int32& startIndex, Int32& endIndex)
internal int GdipPathIterNextSubpathPath(HandleRef iterator, Int32& resultCount, HandleRef path, Boolean& isClosed)
internal int GdipPathIterNextSubpath(HandleRef iterator, Int32& resultCount, Int32& startIndex, Int32& endIndex, Boolean& isClosed)
internal int GdipPathIterRewind(HandleRef iterator)
internal int GdipCreateImageAttributes(IntPtr& imageattr)
internal int GdipSetImageAttributesColorKeys(HandleRef imageattr, ColorAdjustType type, bool enableFlag, int colorLow, int colorHigh)
internal int GdipDisposeImageAttributes(HandleRef imageattr)
internal int GdipSetImageAttributesColorMatrix(HandleRef imageattr, ColorAdjustType type, bool enableFlag, ColorMatrix colorMatrix, ColorMatrix grayMatrix, ColorMatrixFlag flags)
internal int GdipSetImageAttributesGamma(HandleRef imageattr, ColorAdjustType type, bool enableFlag, float gamma)
internal int GdipSetImageAttributesNoOp(HandleRef imageattr, ColorAdjustType type, bool enableFlag)
internal int GdipSetImageAttributesOutputChannel(HandleRef imageattr, ColorAdjustType type, bool enableFlag, ColorChannelFlag channelFlags)
internal int GdipSetImageAttributesOutputChannelColorProfile(HandleRef imageattr, ColorAdjustType type, bool enableFlag, string profileName)
internal int GdipSetImageAttributesRemapTable(HandleRef imageattr, ColorAdjustType type, bool enableFlag, int mapSize, HandleRef colorMap)
internal int GdipSetImageAttributesThreshold(HandleRef imageattr, ColorAdjustType type, bool enableFlag, float thresHold)
internal int GdipCloneImageAttributes(HandleRef imageattr, IntPtr& cloneImageattr)
internal int GdipGetImageAttributesAdjustedPalette(HandleRef imageattr, HandleRef colorPalette, ColorAdjustType colorAdjustType)
internal int GdipSetImageAttributesWrapMode(HandleRef imageattr, int wrap, int argb, bool clamp)
internal Status GdipCreateFont(IntPtr fontFamily, float emSize, FontStyle style, GraphicsUnit unit, IntPtr& font)
internal Status GdipDeleteFont(IntPtr font)
internal Status GdipGetLogFont(IntPtr font, IntPtr graphics, object logfontA)
internal Status GdipCreateFontFromDC(IntPtr hdc, IntPtr& font)
internal Status GdipCreateFontFromLogfont(IntPtr hdc, LOGFONT& lf, IntPtr& ptr)
internal Status GdipCreateFontFromHfont(IntPtr hdc, IntPtr& font, LOGFONT& lf)
internal IntPtr CreateFontIndirect(LOGFONT& logfont)
internal IntPtr GetDC(IntPtr hwnd)
internal int ReleaseDC(IntPtr hWnd, IntPtr hDC)
internal IntPtr SelectObject(IntPtr hdc, IntPtr obj)
internal bool GetIconInfo(IntPtr hIcon, IconInfo& iconinfo)
internal IntPtr CreateIconIndirect(IconInfo& piconinfo)
internal bool DestroyIcon(IntPtr hIcon)
internal bool DeleteObject(IntPtr hObject)
internal IntPtr GetDesktopWindow()
public int BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, int dwRop)
public UInt32 Win32GetSysColor(GetSysColorIndex index)
internal IntPtr XOpenDisplay(IntPtr display)
internal int XCloseDisplay(IntPtr display)
internal IntPtr XRootWindow(IntPtr display, int screen)
internal int XDefaultScreen(IntPtr display)
internal UInt32 XDefaultDepth(IntPtr display, int screen)
internal IntPtr XGetImage(IntPtr display, IntPtr drawable, int src_x, int src_y, int width, int height, int pane, int format)
internal int XGetPixel(IntPtr image, int x, int y)
internal int XDestroyImage(IntPtr image)
internal IntPtr XDefaultVisual(IntPtr display, int screen)
internal IntPtr XGetVisualInfo(IntPtr display, int vinfo_mask, XVisualInfo& vinfo_template, Int32& nitems)
internal IntPtr XVisualIDFromVisual(IntPtr visual)
internal void XFree(IntPtr data)
internal int GdipGetFontCollectionFamilyCount(HandleRef collection, Int32& found)
internal int GdipGetFontCollectionFamilyList(HandleRef collection, int getCount, IntPtr[] dest, Int32& retCount)
internal int GdipNewInstalledFontCollection(IntPtr& collection)
internal Status GdipNewPrivateFontCollection(IntPtr& collection)
internal Status GdipDeletePrivateFontCollection(IntPtr& collection)
internal Status GdipPrivateAddFontFile(IntPtr collection, string fileName)
internal Status GdipPrivateAddMemoryFont(IntPtr collection, IntPtr mem, int length)
internal Status GdipCreateFontFamilyFromName(string fName, IntPtr collection, IntPtr& fontFamily)
internal Status GdipGetFamilyName(IntPtr family, StringBuilder name, int language)
internal Status GdipGetGenericFontFamilySansSerif(IntPtr& fontFamily)
internal Status GdipGetGenericFontFamilySerif(IntPtr& fontFamily)
internal Status GdipGetGenericFontFamilyMonospace(IntPtr& fontFamily)
internal Status GdipGetCellAscent(IntPtr fontFamily, int style, Int16& ascent)
internal Status GdipGetCellDescent(IntPtr fontFamily, int style, Int16& descent)
internal Status GdipGetLineSpacing(IntPtr fontFamily, int style, Int16& spacing)
internal Status GdipGetEmHeight(IntPtr fontFamily, int style, Int16& emHeight)
internal Status GdipIsStyleAvailable(IntPtr fontFamily, int style, Boolean& styleAvailable)
internal Status GdipDeleteFontFamily(IntPtr fontFamily)
internal Status GdipGetFontSize(IntPtr font, Single& size)
internal Status GdipGetFontHeight(IntPtr font, IntPtr graphics, Single& height)
internal Status GdipGetFontHeightGivenDPI(IntPtr font, float dpi, Single& height)
internal int GdipCloneFontFamily(HandleRef fontFamily, IntPtr& clone)
internal Status GdipCreateStringFormat(int formatAttributes, int language, IntPtr& format)
internal Status GdipStringFormatGetGenericDefault(IntPtr& format)
internal Status GdipStringFormatGetGenericTypographic(IntPtr& format)
internal Status GdipDeleteStringFormat(IntPtr format)
internal Status GdipCloneStringFormat(IntPtr srcformat, IntPtr& format)
internal Status GdipSetStringFormatFlags(IntPtr format, StringFormatFlags flags)
internal Status GdipGetStringFormatFlags(IntPtr format, StringFormatFlags& flags)
internal Status GdipSetStringFormatAlign(IntPtr format, StringAlignment align)
internal Status GdipGetStringFormatAlign(IntPtr format, StringAlignment& align)
internal Status GdipSetStringFormatLineAlign(IntPtr format, StringAlignment align)
internal Status GdipGetStringFormatLineAlign(IntPtr format, StringAlignment& align)
internal Status GdipSetStringFormatTrimming(IntPtr format, StringTrimming trimming)
internal Status GdipGetStringFormatTrimming(IntPtr format, StringTrimming& trimming)
internal Status GdipSetStringFormatHotkeyPrefix(IntPtr format, HotkeyPrefix hotkeyPrefix)
internal Status GdipGetStringFormatHotkeyPrefix(IntPtr format, HotkeyPrefix& hotkeyPrefix)
internal Status GdipSetStringFormatTabStops(IntPtr format, float firstTabOffset, int count, Single[] tabStops)
internal Status GdipGetStringFormatDigitSubstitution(IntPtr format, int language, StringDigitSubstitute& substitute)
internal Status GdipSetStringFormatDigitSubstitution(IntPtr format, int language, StringDigitSubstitute substitute)
internal Status GdipGetStringFormatTabStopCount(IntPtr format, Int32& count)
internal Status GdipGetStringFormatTabStops(IntPtr format, int count, Single& firstTabOffset, Single[] tabStops)
internal Status GdipCreateMetafileFromFile(string filename, IntPtr& metafile)
internal Status GdipCreateMetafileFromEmf(IntPtr hEmf, bool deleteEmf, IntPtr& metafile)
internal Status GdipCreateMetafileFromWmf(IntPtr hWmf, bool deleteWmf, WmfPlaceableFileHeader wmfPlaceableFileHeader, IntPtr& metafile)
internal Status GdipGetMetafileHeaderFromFile(string filename, IntPtr header)
internal Status GdipGetMetafileHeaderFromMetafile(IntPtr metafile, IntPtr header)
internal Status GdipGetMetafileHeaderFromEmf(IntPtr hEmf, IntPtr header)
internal Status GdipGetMetafileHeaderFromWmf(IntPtr hWmf, IntPtr wmfPlaceableFileHeader, IntPtr header)
internal Status GdipGetHemfFromMetafile(IntPtr metafile, IntPtr& hEmf)
internal Status GdipGetMetafileDownLevelRasterizationLimit(IntPtr metafile, UInt32& metafileRasterizationLimitDpi)
internal Status GdipSetMetafileDownLevelRasterizationLimit(IntPtr metafile, UInt32 metafileRasterizationLimitDpi)
internal Status GdipPlayMetafileRecord(IntPtr metafile, EmfPlusRecordType recordType, int flags, int dataSize, Byte[] data)
internal Status GdipRecordMetafile(IntPtr hdc, EmfType type, RectangleF& frameRect, MetafileFrameUnit frameUnit, string description, IntPtr& metafile)
internal Status GdipRecordMetafileI(IntPtr hdc, EmfType type, Rectangle& frameRect, MetafileFrameUnit frameUnit, string description, IntPtr& metafile)
internal Status GdipRecordMetafileFileName(string filename, IntPtr hdc, EmfType type, RectangleF& frameRect, MetafileFrameUnit frameUnit, string description, IntPtr& metafile)
internal Status GdipRecordMetafileFileNameI(string filename, IntPtr hdc, EmfType type, Rectangle& frameRect, MetafileFrameUnit frameUnit, string description, IntPtr& metafile)
internal Status GdipCreateMetafileFromStream(IStream stream, IntPtr& metafile)
internal Status GdipGetMetafileHeaderFromStream(IStream stream, IntPtr header)
internal Status GdipRecordMetafileStream(IStream stream, IntPtr hdc, EmfType type, RectangleF& frameRect, MetafileFrameUnit frameUnit, string description, IntPtr& metafile)
internal Status GdipRecordMetafileStreamI(IStream stream, IntPtr hdc, EmfType type, Rectangle& frameRect, MetafileFrameUnit frameUnit, string description, IntPtr& metafile)
internal int GdipGetImageDecodersSize(Int32& decoderNums, Int32& arraySize)
internal int GdipGetImageDecoders(int decoderNums, int arraySize, IntPtr decoders)
internal int GdipGetImageEncodersSize(Int32& encoderNums, Int32& arraySize)
internal int GdipGetImageEncoders(int encoderNums, int arraySize, IntPtr encoders)
internal Status GdipCreateFromContext_macosx(IntPtr cgref, int width, int height, IntPtr& graphics)
internal Status GdipSetVisibleClip_linux(IntPtr graphics, Rectangle& rect)
internal Status GdipCreateFromXDrawable_linux(IntPtr drawable, IntPtr display, IntPtr& graphics)
internal Status GdipLoadImageFromDelegate_linux(StreamGetHeaderDelegate getHeader, StreamGetBytesDelegate getBytes, StreamPutBytesDelegate putBytes, StreamSeekDelegate doSeek, StreamCloseDelegate close, StreamSizeDelegate size, IntPtr& image)
internal Status GdipSaveImageToDelegate_linux(IntPtr image, StreamGetBytesDelegate getBytes, StreamPutBytesDelegate putBytes, StreamSeekDelegate doSeek, StreamCloseDelegate close, StreamSizeDelegate size, Guid& encoderClsID, IntPtr encoderParameters)
internal Status GdipCreateMetafileFromDelegate_linux(StreamGetHeaderDelegate getHeader, StreamGetBytesDelegate getBytes, StreamPutBytesDelegate putBytes, StreamSeekDelegate doSeek, StreamCloseDelegate close, StreamSizeDelegate size, IntPtr& metafile)
internal Status GdipGetMetafileHeaderFromDelegate_linux(StreamGetHeaderDelegate getHeader, StreamGetBytesDelegate getBytes, StreamPutBytesDelegate putBytes, StreamSeekDelegate doSeek, StreamCloseDelegate close, StreamSizeDelegate size, IntPtr header)
internal Status GdipRecordMetafileFromDelegate_linux(StreamGetHeaderDelegate getHeader, StreamGetBytesDelegate getBytes, StreamPutBytesDelegate putBytes, StreamSeekDelegate doSeek, StreamCloseDelegate close, StreamSizeDelegate size, IntPtr hdc, EmfType type, RectangleF& frameRect, MetafileFrameUnit frameUnit, string description, IntPtr& metafile)
internal Status GdipRecordMetafileFromDelegateI_linux(StreamGetHeaderDelegate getHeader, StreamGetBytesDelegate getBytes, StreamPutBytesDelegate putBytes, StreamSeekDelegate doSeek, StreamCloseDelegate close, StreamSizeDelegate size, IntPtr hdc, EmfType type, Rectangle& frameRect, MetafileFrameUnit frameUnit, string description, IntPtr& metafile)
private int uname(IntPtr buf)
}
internal System.Drawing.GdiplusStartupInput : ValueType {
internal UInt32 GdiplusVersion
internal IntPtr DebugEventCallback
internal int SuppressBackgroundThread
internal int SuppressExternalCodecs
internal GdiplusStartupInput MakeGdiplusStartupInput()
}
internal System.Drawing.GdiplusStartupOutput : ValueType {
internal IntPtr NotificationHook
internal IntPtr NotificationUnhook
internal GdiplusStartupOutput MakeGdiplusStartupOutput()
}
internal System.Drawing.GdipPropertyItem : ValueType {
internal int id
internal int len
internal short type
internal IntPtr value
internal void MarshalTo(GdipPropertyItem gdipProp, PropertyItem prop)
}
internal System.Drawing.GetSysColorIndex : Enum {
public int value__
public GetSysColorIndex COLOR_SCROLLBAR
public GetSysColorIndex COLOR_BACKGROUND
public GetSysColorIndex COLOR_ACTIVECAPTION
public GetSysColorIndex COLOR_INACTIVECAPTION
public GetSysColorIndex COLOR_MENU
public GetSysColorIndex COLOR_WINDOW
public GetSysColorIndex COLOR_WINDOWFRAME
public GetSysColorIndex COLOR_MENUTEXT
public GetSysColorIndex COLOR_WINDOWTEXT
public GetSysColorIndex COLOR_CAPTIONTEXT
public GetSysColorIndex COLOR_ACTIVEBORDER
public GetSysColorIndex COLOR_INACTIVEBORDER
public GetSysColorIndex COLOR_APPWORKSPACE
public GetSysColorIndex COLOR_HIGHLIGHT
public GetSysColorIndex COLOR_HIGHLIGHTTEXT
public GetSysColorIndex COLOR_BTNFACE
public GetSysColorIndex COLOR_BTNSHADOW
public GetSysColorIndex COLOR_GRAYTEXT
public GetSysColorIndex COLOR_BTNTEXT
public GetSysColorIndex COLOR_INACTIVECAPTIONTEXT
public GetSysColorIndex COLOR_BTNHIGHLIGHT
public GetSysColorIndex COLOR_3DDKSHADOW
public GetSysColorIndex COLOR_3DLIGHT
public GetSysColorIndex COLOR_INFOTEXT
public GetSysColorIndex COLOR_INFOBK
public GetSysColorIndex COLOR_HOTLIGHT
public GetSysColorIndex COLOR_GRADIENTACTIVECAPTION
public GetSysColorIndex COLOR_GRADIENTINACTIVECAPTION
public GetSysColorIndex COLOR_MENUHIGHLIGHT
public GetSysColorIndex COLOR_MENUBAR
public GetSysColorIndex COLOR_DESKTOP
public GetSysColorIndex COLOR_3DFACE
public GetSysColorIndex COLOR_3DSHADOW
public GetSysColorIndex COLOR_3DHIGHLIGHT
public GetSysColorIndex COLOR_3DHILIGHT
public GetSysColorIndex COLOR_BTNHILIGHT
public GetSysColorIndex COLOR_MAXVALUE
}
public System.Drawing.Graphics : MarshalByRefObject {
internal IntPtr nativeObject
internal IMacContext maccontext
private bool disposed
private float defDpiX
private float defDpiY
private IntPtr deviceContextHdc
private string MetafileEnumeration
internal float systemDpiX
internal float systemDpiY
internal IntPtr NativeGraphics
internal IntPtr NativeObject
public Region Clip
public RectangleF ClipBounds
public CompositingMode CompositingMode
public CompositingQuality CompositingQuality
public float DpiX
public float DpiY
public InterpolationMode InterpolationMode
public bool IsClipEmpty
public bool IsVisibleClipEmpty
public float PageScale
public GraphicsUnit PageUnit
public PixelOffsetMode PixelOffsetMode
public Point RenderingOrigin
public SmoothingMode SmoothingMode
public int TextContrast
public TextRenderingHint TextRenderingHint
public Matrix Transform
public RectangleF VisibleClipBounds
internal void .ctor(IntPtr nativeGraphics)
protected void Finalize()
internal float get_systemDpiX()
internal float get_systemDpiY()
internal IntPtr get_NativeGraphics()
internal IntPtr get_NativeObject()
internal void set_NativeObject(IntPtr value)
public void AddMetafileComment(Byte[] data)
public GraphicsContainer BeginContainer()
public GraphicsContainer BeginContainer(Rectangle dstrect, Rectangle srcrect, GraphicsUnit unit)
public GraphicsContainer BeginContainer(RectangleF dstrect, RectangleF srcrect, GraphicsUnit unit)
public void Clear(Color color)
public void CopyFromScreen(Point upperLeftSource, Point upperLeftDestination, Size blockRegionSize)
public void CopyFromScreen(Point upperLeftSource, Point upperLeftDestination, Size blockRegionSize, CopyPixelOperation copyPixelOperation)
public void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, Size blockRegionSize)
public void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, Size blockRegionSize, CopyPixelOperation copyPixelOperation)
private void CopyFromScreenWin32(int sourceX, int sourceY, int destinationX, int destinationY, Size blockRegionSize, CopyPixelOperation copyPixelOperation)
private void CopyFromScreenMac(int sourceX, int sourceY, int destinationX, int destinationY, Size blockRegionSize, CopyPixelOperation copyPixelOperation)
private void CopyFromScreenX11(int sourceX, int sourceY, int destinationX, int destinationY, Size blockRegionSize, CopyPixelOperation copyPixelOperation)
public void Dispose()
public void DrawArc(Pen pen, Rectangle rect, float startAngle, float sweepAngle)
public void DrawArc(Pen pen, RectangleF rect, float startAngle, float sweepAngle)
public void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle)
public void DrawArc(Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle)
public void DrawBezier(Pen pen, PointF pt1, PointF pt2, PointF pt3, PointF pt4)
public void DrawBezier(Pen pen, Point pt1, Point pt2, Point pt3, Point pt4)
public void DrawBezier(Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)
public void DrawBeziers(Pen pen, Point[] points)
public void DrawBeziers(Pen pen, PointF[] points)
public void DrawClosedCurve(Pen pen, PointF[] points)
public void DrawClosedCurve(Pen pen, Point[] points)
public void DrawClosedCurve(Pen pen, Point[] points, float tension, FillMode fillmode)
public void DrawClosedCurve(Pen pen, PointF[] points, float tension, FillMode fillmode)
public void DrawCurve(Pen pen, Point[] points)
public void DrawCurve(Pen pen, PointF[] points)
public void DrawCurve(Pen pen, PointF[] points, float tension)
public void DrawCurve(Pen pen, Point[] points, float tension)
public void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments)
public void DrawCurve(Pen pen, Point[] points, int offset, int numberOfSegments, float tension)
public void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension)
public void DrawEllipse(Pen pen, Rectangle rect)
public void DrawEllipse(Pen pen, RectangleF rect)
public void DrawEllipse(Pen pen, int x, int y, int width, int height)
public void DrawEllipse(Pen pen, float x, float y, float width, float height)
public void DrawIcon(Icon icon, Rectangle targetRect)
public void DrawIcon(Icon icon, int x, int y)
public void DrawIconUnstretched(Icon icon, Rectangle targetRect)
public void DrawImage(Image image, RectangleF rect)
public void DrawImage(Image image, PointF point)
public void DrawImage(Image image, Point[] destPoints)
public void DrawImage(Image image, Point point)
public void DrawImage(Image image, Rectangle rect)
public void DrawImage(Image image, PointF[] destPoints)
public void DrawImage(Image image, int x, int y)
public void DrawImage(Image image, float x, float y)
public void DrawImage(Image image, Rectangle destRect, Rectangle srcRect, GraphicsUnit srcUnit)
public void DrawImage(Image image, RectangleF destRect, RectangleF srcRect, GraphicsUnit srcUnit)
public void DrawImage(Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit)
public void DrawImage(Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit)
public void DrawImage(Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr)
public void DrawImage(Image image, float x, float y, float width, float height)
public void DrawImage(Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr)
public void DrawImage(Image image, int x, int y, Rectangle srcRect, GraphicsUnit srcUnit)
public void DrawImage(Image image, int x, int y, int width, int height)
public void DrawImage(Image image, float x, float y, RectangleF srcRect, GraphicsUnit srcUnit)
public void DrawImage(Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback)
public void DrawImage(Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback)
public void DrawImage(Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback, int callbackData)
public void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit)
public void DrawImage(Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback, int callbackData)
public void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit)
public void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs)
public void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr)
public void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback)
public void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, DrawImageAbort callback)
public void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, DrawImageAbort callback, IntPtr callbackData)
public void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, DrawImageAbort callback, IntPtr callbackData)
public void DrawImageUnscaled(Image image, Point point)
public void DrawImageUnscaled(Image image, Rectangle rect)
public void DrawImageUnscaled(Image image, int x, int y)
public void DrawImageUnscaled(Image image, int x, int y, int width, int height)
public void DrawImageUnscaledAndClipped(Image image, Rectangle rect)
public void DrawLine(Pen pen, PointF pt1, PointF pt2)
public void DrawLine(Pen pen, Point pt1, Point pt2)
public void DrawLine(Pen pen, int x1, int y1, int x2, int y2)
public void DrawLine(Pen pen, float x1, float y1, float x2, float y2)
public void DrawLines(Pen pen, PointF[] points)
public void DrawLines(Pen pen, Point[] points)
public void DrawPath(Pen pen, GraphicsPath path)
public void DrawPie(Pen pen, Rectangle rect, float startAngle, float sweepAngle)
public void DrawPie(Pen pen, RectangleF rect, float startAngle, float sweepAngle)
public void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle)
public void DrawPie(Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle)
public void DrawPolygon(Pen pen, Point[] points)
public void DrawPolygon(Pen pen, PointF[] points)
public void DrawRectangle(Pen pen, Rectangle rect)
public void DrawRectangle(Pen pen, float x, float y, float width, float height)
public void DrawRectangle(Pen pen, int x, int y, int width, int height)
public void DrawRectangles(Pen pen, RectangleF[] rects)
public void DrawRectangles(Pen pen, Rectangle[] rects)
public void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle)
public void DrawString(string s, Font font, Brush brush, PointF point)
public void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format)
public void DrawString(string s, Font font, Brush brush, float x, float y)
public void DrawString(string s, Font font, Brush brush, float x, float y, StringFormat format)
public void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format)
public void EndContainer(GraphicsContainer container)
public void EnumerateMetafile(Metafile metafile, Point[] destPoints, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, RectangleF destRect, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, Rectangle destRect, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, Point destPoint, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, PointF destPoint, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, PointF destPoint, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, Rectangle destRect, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, Point destPoint, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, Point[] destPoints, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, RectangleF destRect, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, PointF destPoint, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, Point destPoint, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, RectangleF destRect, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, Rectangle destRect, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback)
public void EnumerateMetafile(Metafile metafile, RectangleF destRect, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, Point destPoint, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, PointF destPoint, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, Point[] destPoints, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, Rectangle destRect, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, Rectangle destRect, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, RectangleF destRect, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, PointF destPoint, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, Point destPoint, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData)
public void EnumerateMetafile(Metafile metafile, Point[] destPoints, Rectangle srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, Rectangle destRect, Rectangle srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, Point destPoint, Rectangle srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, RectangleF destRect, RectangleF srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, RectangleF srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void EnumerateMetafile(Metafile metafile, PointF destPoint, RectangleF srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr)
public void ExcludeClip(Rectangle rect)
public void ExcludeClip(Region region)
public void FillClosedCurve(Brush brush, PointF[] points)
public void FillClosedCurve(Brush brush, Point[] points)
public void FillClosedCurve(Brush brush, PointF[] points, FillMode fillmode)
public void FillClosedCurve(Brush brush, Point[] points, FillMode fillmode)
public void FillClosedCurve(Brush brush, PointF[] points, FillMode fillmode, float tension)
public void FillClosedCurve(Brush brush, Point[] points, FillMode fillmode, float tension)
public void FillEllipse(Brush brush, Rectangle rect)
public void FillEllipse(Brush brush, RectangleF rect)
public void FillEllipse(Brush brush, float x, float y, float width, float height)
public void FillEllipse(Brush brush, int x, int y, int width, int height)
public void FillPath(Brush brush, GraphicsPath path)
public void FillPie(Brush brush, Rectangle rect, float startAngle, float sweepAngle)
public void FillPie(Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle)
public void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle)
public void FillPolygon(Brush brush, PointF[] points)
public void FillPolygon(Brush brush, Point[] points)
public void FillPolygon(Brush brush, Point[] points, FillMode fillMode)
public void FillPolygon(Brush brush, PointF[] points, FillMode fillMode)
public void FillRectangle(Brush brush, RectangleF rect)
public void FillRectangle(Brush brush, Rectangle rect)
public void FillRectangle(Brush brush, int x, int y, int width, int height)
public void FillRectangle(Brush brush, float x, float y, float width, float height)
public void FillRectangles(Brush brush, Rectangle[] rects)
public void FillRectangles(Brush brush, RectangleF[] rects)
public void FillRegion(Brush brush, Region region)
public void Flush()
public void Flush(FlushIntention intention)
public Graphics FromHdc(IntPtr hdc)
public Graphics FromHdc(IntPtr hdc, IntPtr hdevice)
public Graphics FromHdcInternal(IntPtr hdc)
public Graphics FromHwnd(IntPtr hwnd)
public Graphics FromHwndInternal(IntPtr hwnd)
public Graphics FromImage(Image image)
internal Graphics FromXDrawable(IntPtr drawable, IntPtr display)
public IntPtr GetHalftonePalette()
public IntPtr GetHdc()
public Color GetNearestColor(Color color)
public void IntersectClip(Region region)
public void IntersectClip(RectangleF rect)
public void IntersectClip(Rectangle rect)
public bool IsVisible(Point point)
public bool IsVisible(RectangleF rect)
public bool IsVisible(PointF point)
public bool IsVisible(Rectangle rect)
public bool IsVisible(float x, float y)
public bool IsVisible(int x, int y)
public bool IsVisible(float x, float y, float width, float height)
public bool IsVisible(int x, int y, int width, int height)
public Region[] MeasureCharacterRanges(string text, Font font, RectangleF layoutRect, StringFormat stringFormat)
private SizeF GdipMeasureString(IntPtr graphics, string text, Font font, RectangleF& layoutRect, IntPtr stringFormat)
public SizeF MeasureString(string text, Font font)
public SizeF MeasureString(string text, Font font, SizeF layoutArea)
public SizeF MeasureString(string text, Font font, int width)
public SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat)
public SizeF MeasureString(string text, Font font, int width, StringFormat format)
public SizeF MeasureString(string text, Font font, PointF origin, StringFormat stringFormat)
public SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat, Int32& charactersFitted, Int32& linesFilled)
public void MultiplyTransform(Matrix matrix)
public void MultiplyTransform(Matrix matrix, MatrixOrder order)
public void ReleaseHdc(IntPtr hdc)
public void ReleaseHdc()
public void ReleaseHdcInternal(IntPtr hdc)
public void ResetClip()
public void ResetTransform()
public void Restore(GraphicsState gstate)
public void RotateTransform(float angle)
public void RotateTransform(float angle, MatrixOrder order)
public GraphicsState Save()
public void ScaleTransform(float sx, float sy)
public void ScaleTransform(float sx, float sy, MatrixOrder order)
public void SetClip(RectangleF rect)
public void SetClip(GraphicsPath path)
public void SetClip(Rectangle rect)
public void SetClip(Graphics g)
public void SetClip(Graphics g, CombineMode combineMode)
public void SetClip(Rectangle rect, CombineMode combineMode)
public void SetClip(RectangleF rect, CombineMode combineMode)
public void SetClip(Region region, CombineMode combineMode)
public void SetClip(GraphicsPath path, CombineMode combineMode)
public void TransformPoints(CoordinateSpace destSpace, CoordinateSpace srcSpace, PointF[] pts)
public void TransformPoints(CoordinateSpace destSpace, CoordinateSpace srcSpace, Point[] pts)
public void TranslateClip(int dx, int dy)
public void TranslateClip(float dx, float dy)
public void TranslateTransform(float dx, float dy)
public void TranslateTransform(float dx, float dy, MatrixOrder order)
public Region get_Clip()
public void set_Clip(Region value)
public RectangleF get_ClipBounds()
public CompositingMode get_CompositingMode()
public void set_CompositingMode(CompositingMode value)
public CompositingQuality get_CompositingQuality()
public void set_CompositingQuality(CompositingQuality value)
public float get_DpiX()
public float get_DpiY()
public InterpolationMode get_InterpolationMode()
public void set_InterpolationMode(InterpolationMode value)
public bool get_IsClipEmpty()
public bool get_IsVisibleClipEmpty()
public float get_PageScale()
public void set_PageScale(float value)
public GraphicsUnit get_PageUnit()
public void set_PageUnit(GraphicsUnit value)
public PixelOffsetMode get_PixelOffsetMode()
public void set_PixelOffsetMode(PixelOffsetMode value)
public Point get_RenderingOrigin()
public void set_RenderingOrigin(Point value)
public SmoothingMode get_SmoothingMode()
public void set_SmoothingMode(SmoothingMode value)
public int get_TextContrast()
public void set_TextContrast(int value)
public TextRenderingHint get_TextRenderingHint()
public void set_TextRenderingHint(TextRenderingHint value)
public Matrix get_Transform()
public void set_Transform(Matrix value)
public RectangleF get_VisibleClipBounds()
public object GetContextInfo()
}
public System.Drawing.GraphicsUnit : Enum {
public int value__
public GraphicsUnit World
public GraphicsUnit Display
public GraphicsUnit Pixel
public GraphicsUnit Point
public GraphicsUnit Inch
public GraphicsUnit Document
public GraphicsUnit Millimeter
}
public System.Drawing.Icon : MarshalByRefObject {
private Size iconSize
private IntPtr handle
private IconDir iconDir
private ushort id
private ImageData[] imageData
private bool undisposable
private bool disposed
private Bitmap bitmap
public IntPtr Handle
public int Height
public Size Size
public int Width
private void .ctor(IntPtr handle)
public void .ctor(Icon original, int width, int height)
public void .ctor(Icon original, Size size)
public void .ctor(Stream stream)
public void .ctor(Stream stream, int width, int height)
public void .ctor(string fileName)
public void .ctor(Type type, string resource)
private void .ctor(SerializationInfo info, StreamingContext context)
internal void .ctor(string resourceName, bool undisposable)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
public void .ctor(Stream stream, Size size)
public void .ctor(string fileName, int width, int height)
public void .ctor(string fileName, Size size)
public Icon ExtractAssociatedIcon(string filePath)
public void Dispose()
public object Clone()
public Icon FromHandle(IntPtr handle)
private void SaveIconImage(BinaryWriter writer, IconImage ii)
private void SaveIconDump(BinaryWriter writer, IconDump id)
private void SaveIconDirEntry(BinaryWriter writer, IconDirEntry ide, UInt32 offset)
private void SaveAll(BinaryWriter writer)
private void SaveBestSingleIcon(BinaryWriter writer, int width, int height)
private void SaveBitmapAsIcon(BinaryWriter writer)
private void Save(Stream outputStream, int width, int height)
public void Save(Stream outputStream)
internal Bitmap BuildBitmapOnWin32()
internal Bitmap GetInternalBitmap()
public Bitmap ToBitmap()
public string ToString()
public IntPtr get_Handle()
public int get_Height()
public Size get_Size()
public int get_Width()
protected void Finalize()
private void InitFromStreamWithSize(Stream stream, int width, int height)
}
public System.Drawing.IconConverter : ExpandableObjectConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
internal System.Drawing.IconInfo : ValueType {
private int fIcon
public int xHotspot
public int yHotspot
public IntPtr hbmMask
public IntPtr hbmColor
public bool IsIcon
public bool get_IsIcon()
public void set_IsIcon(bool value)
}
public System.Drawing.IDeviceContext {
public IntPtr GetHdc()
public void ReleaseHdc()
}
internal System.Drawing.IMacContext {
public void Synchronize()
public void Release()
}
public System.Drawing.Image : MarshalByRefObject {
private object tag
internal IntPtr nativeObject
internal Stream stream
public int Flags
public Guid[] FrameDimensionsList
public int Height
public float HorizontalResolution
public ColorPalette Palette
public SizeF PhysicalDimension
public PixelFormat PixelFormat
public Int32[] PropertyIdList
public PropertyItem[] PropertyItems
public ImageFormat RawFormat
public Size Size
public object Tag
public float VerticalResolution
public int Width
internal IntPtr NativeObject
internal IntPtr nativeImage
internal void .ctor(SerializationInfo info, StreamingContext context)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
public Image FromFile(string filename)
public Image FromFile(string filename, bool useEmbeddedColorManagement)
public Bitmap FromHbitmap(IntPtr hbitmap)
public Bitmap FromHbitmap(IntPtr hbitmap, IntPtr hpalette)
public Image FromStream(Stream stream)
public Image FromStream(Stream stream, bool useEmbeddedColorManagement)
public Image FromStream(Stream stream, bool useEmbeddedColorManagement, bool validateImageData)
internal Image LoadFromStream(Stream stream, bool keepAlive)
internal Image CreateImageObject(IntPtr nativeImage)
internal Image CreateFromHandle(IntPtr handle)
public int GetPixelFormatSize(PixelFormat pixfmt)
public bool IsAlphaPixelFormat(PixelFormat pixfmt)
public bool IsCanonicalPixelFormat(PixelFormat pixfmt)
public bool IsExtendedPixelFormat(PixelFormat pixfmt)
internal IntPtr InitFromStream(Stream stream)
public RectangleF GetBounds(GraphicsUnit& pageUnit)
public EncoderParameters GetEncoderParameterList(Guid encoder)
public int GetFrameCount(FrameDimension dimension)
public PropertyItem GetPropertyItem(int propid)
public Image GetThumbnailImage(int thumbWidth, int thumbHeight, GetThumbnailImageAbort callback, IntPtr callbackData)
public void RemovePropertyItem(int propid)
public void RotateFlip(RotateFlipType rotateFlipType)
internal ImageCodecInfo findEncoderForFormat(ImageFormat format)
public void Save(string filename)
public void Save(string filename, ImageFormat format)
public void Save(string filename, ImageCodecInfo encoder, EncoderParameters encoderParams)
public void Save(Stream stream, ImageFormat format)
public void Save(Stream stream, ImageCodecInfo encoder, EncoderParameters encoderParams)
public void SaveAdd(EncoderParameters encoderParams)
public void SaveAdd(Image image, EncoderParameters encoderParams)
public int SelectActiveFrame(FrameDimension dimension, int frameIndex)
public void SetPropertyItem(PropertyItem propitem)
public int get_Flags()
public Guid[] get_FrameDimensionsList()
public int get_Height()
public float get_HorizontalResolution()
public ColorPalette get_Palette()
public void set_Palette(ColorPalette value)
internal ColorPalette retrieveGDIPalette()
internal void storeGDIPalette(ColorPalette palette)
public SizeF get_PhysicalDimension()
public PixelFormat get_PixelFormat()
public Int32[] get_PropertyIdList()
public PropertyItem[] get_PropertyItems()
public ImageFormat get_RawFormat()
public Size get_Size()
public object get_Tag()
public void set_Tag(object value)
public float get_VerticalResolution()
public int get_Width()
internal IntPtr get_NativeObject()
internal void set_NativeObject(IntPtr value)
internal IntPtr get_nativeImage()
public void Dispose()
protected void Finalize()
protected void Dispose(bool disposing)
public object Clone()
private object CloneFromStream()
}
public System.Drawing.ImageAnimator : object {
private Hashtable ht
public void Animate(Image image, EventHandler onFrameChangedHandler)
public bool CanAnimate(Image image)
public void StopAnimate(Image image, EventHandler onFrameChangedHandler)
public void UpdateFrames()
public void UpdateFrames(Image image)
private void UpdateImageFrame(Image image)
}
public System.Drawing.ImageConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
public System.Drawing.ImageFormatConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
internal System.Drawing.ImageType : Enum {
public int value__
public ImageType Unknown
public ImageType Bitmap
public ImageType Metafile
}
public System.Drawing.Imaging.BitmapData : object {
private int width
private int height
private int stride
private PixelFormat pixel_format
private IntPtr scan0
private int reserved
private IntPtr palette
private int property_count
private IntPtr property
private float dpi_horz
private float dpi_vert
private int image_flags
private int left
private int top
private int x
private int y
private int transparent
public int Height
public int Width
public PixelFormat PixelFormat
public int Reserved
public IntPtr Scan0
public int Stride
public int get_Height()
public void set_Height(int value)
public int get_Width()
public void set_Width(int value)
public PixelFormat get_PixelFormat()
public void set_PixelFormat(PixelFormat value)
public int get_Reserved()
public void set_Reserved(int value)
public IntPtr get_Scan0()
public void set_Scan0(IntPtr value)
public int get_Stride()
public void set_Stride(int value)
}
public System.Drawing.Imaging.ColorAdjustType : Enum {
public int value__
public ColorAdjustType Default
public ColorAdjustType Bitmap
public ColorAdjustType Brush
public ColorAdjustType Pen
public ColorAdjustType Text
public ColorAdjustType Count
public ColorAdjustType Any
}
public System.Drawing.Imaging.ColorChannelFlag : Enum {
public int value__
public ColorChannelFlag ColorChannelC
public ColorChannelFlag ColorChannelM
public ColorChannelFlag ColorChannelY
public ColorChannelFlag ColorChannelK
public ColorChannelFlag ColorChannelLast
}
public System.Drawing.Imaging.ColorMap : object {
private Color _oldColor
private Color _newColor
public Color OldColor
public Color NewColor
public Color get_OldColor()
public void set_OldColor(Color value)
public Color get_NewColor()
public void set_NewColor(Color value)
}
public System.Drawing.Imaging.ColorMapType : Enum {
public int value__
public ColorMapType Default
public ColorMapType Brush
}
public System.Drawing.Imaging.ColorMatrix : object {
private float _matrix00
private float _matrix01
private float _matrix02
private float _matrix03
private float _matrix04
private float _matrix10
private float _matrix11
private float _matrix12
private float _matrix13
private float _matrix14
private float _matrix20
private float _matrix21
private float _matrix22
private float _matrix23
private float _matrix24
private float _matrix30
private float _matrix31
private float _matrix32
private float _matrix33
private float _matrix34
private float _matrix40
private float _matrix41
private float _matrix42
private float _matrix43
private float _matrix44
public float Matrix00
public float Matrix01
public float Matrix02
public float Matrix03
public float Matrix04
public float Matrix10
public float Matrix11
public float Matrix12
public float Matrix13
public float Matrix14
public float Matrix20
public float Matrix21
public float Matrix22
public float Matrix23
public float Matrix24
public float Matrix30
public float Matrix31
public float Matrix32
public float Matrix33
public float Matrix34
public float Matrix40
public float Matrix41
public float Matrix42
public float Matrix43
public float Matrix44
public float Item
public float get_Matrix00()
public void set_Matrix00(float value)
public float get_Matrix01()
public void set_Matrix01(float value)
public float get_Matrix02()
public void set_Matrix02(float value)
public float get_Matrix03()
public void set_Matrix03(float value)
public float get_Matrix04()
public void set_Matrix04(float value)
public float get_Matrix10()
public void set_Matrix10(float value)
public float get_Matrix11()
public void set_Matrix11(float value)
public float get_Matrix12()
public void set_Matrix12(float value)
public float get_Matrix13()
public void set_Matrix13(float value)
public float get_Matrix14()
public void set_Matrix14(float value)
public float get_Matrix20()
public void set_Matrix20(float value)
public float get_Matrix21()
public void set_Matrix21(float value)
public float get_Matrix22()
public void set_Matrix22(float value)
public float get_Matrix23()
public void set_Matrix23(float value)
public float get_Matrix24()
public void set_Matrix24(float value)
public float get_Matrix30()
public void set_Matrix30(float value)
public float get_Matrix31()
public void set_Matrix31(float value)
public float get_Matrix32()
public void set_Matrix32(float value)
public float get_Matrix33()
public void set_Matrix33(float value)
public float get_Matrix34()
public void set_Matrix34(float value)
public float get_Matrix40()
public void set_Matrix40(float value)
public float get_Matrix41()
public void set_Matrix41(float value)
public float get_Matrix42()
public void set_Matrix42(float value)
public float get_Matrix43()
public void set_Matrix43(float value)
public float get_Matrix44()
public void set_Matrix44(float value)
public void .ctor(Single[][] newColorMatrix)
internal void SetMatrix(Single[][] newColorMatrix)
internal Single[][] GetMatrix()
public float get_Item(int row, int column)
public void set_Item(int row, int column, float value)
}
public System.Drawing.Imaging.ColorMatrixFlag : Enum {
public int value__
public ColorMatrixFlag Default
public ColorMatrixFlag SkipGrays
public ColorMatrixFlag AltGrays
}
public System.Drawing.Imaging.ColorMode : Enum {
public int value__
public ColorMode Argb32Mode
public ColorMode Argb64Mode
}
public System.Drawing.Imaging.ColorPalette : object {
private int _flags
private Color[] _entries
public int Flags
public Color[] Entries
public int get_Flags()
public Color[] get_Entries()
internal void .ctor(int count)
internal void ConvertFromMemory(IntPtr memory)
internal IntPtr ConvertToMemory()
}
internal System.Drawing.Imaging.EmfPlusFlags : Enum {
public int value__
public EmfPlusFlags Display
public EmfPlusFlags NonDualGdi
}
public System.Drawing.Imaging.EmfPlusRecordType : Enum {
public int value__
public EmfPlusRecordType WmfRecordBase
public EmfPlusRecordType WmfSetBkColor
public EmfPlusRecordType WmfSetBkMode
public EmfPlusRecordType WmfSetMapMode
public EmfPlusRecordType WmfSetROP2
public EmfPlusRecordType WmfSetRelAbs
public EmfPlusRecordType WmfSetPolyFillMode
public EmfPlusRecordType WmfSetStretchBltMode
public EmfPlusRecordType WmfSetTextCharExtra
public EmfPlusRecordType WmfSetTextColor
public EmfPlusRecordType WmfSetTextJustification
public EmfPlusRecordType WmfSetWindowOrg
public EmfPlusRecordType WmfSetWindowExt
public EmfPlusRecordType WmfSetViewportOrg
public EmfPlusRecordType WmfSetViewportExt
public EmfPlusRecordType WmfOffsetWindowOrg
public EmfPlusRecordType WmfScaleWindowExt
public EmfPlusRecordType WmfOffsetViewportOrg
public EmfPlusRecordType WmfScaleViewportExt
public EmfPlusRecordType WmfLineTo
public EmfPlusRecordType WmfMoveTo
public EmfPlusRecordType WmfExcludeClipRect
public EmfPlusRecordType WmfIntersectClipRect
public EmfPlusRecordType WmfArc
public EmfPlusRecordType WmfEllipse
public EmfPlusRecordType WmfFloodFill
public EmfPlusRecordType WmfPie
public EmfPlusRecordType WmfRectangle
public EmfPlusRecordType WmfRoundRect
public EmfPlusRecordType WmfPatBlt
public EmfPlusRecordType WmfSaveDC
public EmfPlusRecordType WmfSetPixel
public EmfPlusRecordType WmfOffsetCilpRgn
public EmfPlusRecordType WmfTextOut
public EmfPlusRecordType WmfBitBlt
public EmfPlusRecordType WmfStretchBlt
public EmfPlusRecordType WmfPolygon
public EmfPlusRecordType WmfPolyline
public EmfPlusRecordType WmfEscape
public EmfPlusRecordType WmfRestoreDC
public EmfPlusRecordType WmfFillRegion
public EmfPlusRecordType WmfFrameRegion
public EmfPlusRecordType WmfInvertRegion
public EmfPlusRecordType WmfPaintRegion
public EmfPlusRecordType WmfSelectClipRegion
public EmfPlusRecordType WmfSelectObject
public EmfPlusRecordType WmfSetTextAlign
public EmfPlusRecordType WmfChord
public EmfPlusRecordType WmfSetMapperFlags
public EmfPlusRecordType WmfExtTextOut
public EmfPlusRecordType WmfSetDibToDev
public EmfPlusRecordType WmfSelectPalette
public EmfPlusRecordType WmfRealizePalette
public EmfPlusRecordType WmfAnimatePalette
public EmfPlusRecordType WmfSetPalEntries
public EmfPlusRecordType WmfPolyPolygon
public EmfPlusRecordType WmfResizePalette
public EmfPlusRecordType WmfDibBitBlt
public EmfPlusRecordType WmfDibStretchBlt
public EmfPlusRecordType WmfDibCreatePatternBrush
public EmfPlusRecordType WmfStretchDib
public EmfPlusRecordType WmfExtFloodFill
public EmfPlusRecordType WmfSetLayout
public EmfPlusRecordType WmfDeleteObject
public EmfPlusRecordType WmfCreatePalette
public EmfPlusRecordType WmfCreatePatternBrush
public EmfPlusRecordType WmfCreatePenIndirect
public EmfPlusRecordType WmfCreateFontIndirect
public EmfPlusRecordType WmfCreateBrushIndirect
public EmfPlusRecordType WmfCreateRegion
public EmfPlusRecordType EmfHeader
public EmfPlusRecordType EmfPolyBezier
public EmfPlusRecordType EmfPolygon
public EmfPlusRecordType EmfPolyline
public EmfPlusRecordType EmfPolyBezierTo
public EmfPlusRecordType EmfPolyLineTo
public EmfPlusRecordType EmfPolyPolyline
public EmfPlusRecordType EmfPolyPolygon
public EmfPlusRecordType EmfSetWindowExtEx
public EmfPlusRecordType EmfSetWindowOrgEx
public EmfPlusRecordType EmfSetViewportExtEx
public EmfPlusRecordType EmfSetViewportOrgEx
public EmfPlusRecordType EmfSetBrushOrgEx
public EmfPlusRecordType EmfEof
public EmfPlusRecordType EmfSetPixelV
public EmfPlusRecordType EmfSetMapperFlags
public EmfPlusRecordType EmfSetMapMode
public EmfPlusRecordType EmfSetBkMode
public EmfPlusRecordType EmfSetPolyFillMode
public EmfPlusRecordType EmfSetROP2
public EmfPlusRecordType EmfSetStretchBltMode
public EmfPlusRecordType EmfSetTextAlign
public EmfPlusRecordType EmfSetColorAdjustment
public EmfPlusRecordType EmfSetTextColor
public EmfPlusRecordType EmfSetBkColor
public EmfPlusRecordType EmfOffsetClipRgn
public EmfPlusRecordType EmfMoveToEx
public EmfPlusRecordType EmfSetMetaRgn
public EmfPlusRecordType EmfExcludeClipRect
public EmfPlusRecordType EmfIntersectClipRect
public EmfPlusRecordType EmfScaleViewportExtEx
public EmfPlusRecordType EmfScaleWindowExtEx
public EmfPlusRecordType EmfSaveDC
public EmfPlusRecordType EmfRestoreDC
public EmfPlusRecordType EmfSetWorldTransform
public EmfPlusRecordType EmfModifyWorldTransform
public EmfPlusRecordType EmfSelectObject
public EmfPlusRecordType EmfCreatePen
public EmfPlusRecordType EmfCreateBrushIndirect
public EmfPlusRecordType EmfDeleteObject
public EmfPlusRecordType EmfAngleArc
public EmfPlusRecordType EmfEllipse
public EmfPlusRecordType EmfRectangle
public EmfPlusRecordType EmfRoundRect
public EmfPlusRecordType EmfRoundArc
public EmfPlusRecordType EmfChord
public EmfPlusRecordType EmfPie
public EmfPlusRecordType EmfSelectPalette
public EmfPlusRecordType EmfCreatePalette
public EmfPlusRecordType EmfSetPaletteEntries
public EmfPlusRecordType EmfResizePalette
public EmfPlusRecordType EmfRealizePalette
public EmfPlusRecordType EmfExtFloodFill
public EmfPlusRecordType EmfLineTo
public EmfPlusRecordType EmfArcTo
public EmfPlusRecordType EmfPolyDraw
public EmfPlusRecordType EmfSetArcDirection
public EmfPlusRecordType EmfSetMiterLimit
public EmfPlusRecordType EmfBeginPath
public EmfPlusRecordType EmfEndPath
public EmfPlusRecordType EmfCloseFigure
public EmfPlusRecordType EmfFillPath
public EmfPlusRecordType EmfStrokeAndFillPath
public EmfPlusRecordType EmfStrokePath
public EmfPlusRecordType EmfFlattenPath
public EmfPlusRecordType EmfWidenPath
public EmfPlusRecordType EmfSelectClipPath
public EmfPlusRecordType EmfAbortPath
public EmfPlusRecordType EmfReserved069
public EmfPlusRecordType EmfGdiComment
public EmfPlusRecordType EmfFillRgn
public EmfPlusRecordType EmfFrameRgn
public EmfPlusRecordType EmfInvertRgn
public EmfPlusRecordType EmfPaintRgn
public EmfPlusRecordType EmfExtSelectClipRgn
public EmfPlusRecordType EmfBitBlt
public EmfPlusRecordType EmfStretchBlt
public EmfPlusRecordType EmfMaskBlt
public EmfPlusRecordType EmfPlgBlt
public EmfPlusRecordType EmfSetDIBitsToDevice
public EmfPlusRecordType EmfStretchDIBits
public EmfPlusRecordType EmfExtCreateFontIndirect
public EmfPlusRecordType EmfExtTextOutA
public EmfPlusRecordType EmfExtTextOutW
public EmfPlusRecordType EmfPolyBezier16
public EmfPlusRecordType EmfPolygon16
public EmfPlusRecordType EmfPolyline16
public EmfPlusRecordType EmfPolyBezierTo16
public EmfPlusRecordType EmfPolylineTo16
public EmfPlusRecordType EmfPolyPolyline16
public EmfPlusRecordType EmfPolyPolygon16
public EmfPlusRecordType EmfPolyDraw16
public EmfPlusRecordType EmfCreateMonoBrush
public EmfPlusRecordType EmfCreateDibPatternBrushPt
public EmfPlusRecordType EmfExtCreatePen
public EmfPlusRecordType EmfPolyTextOutA
public EmfPlusRecordType EmfPolyTextOutW
public EmfPlusRecordType EmfSetIcmMode
public EmfPlusRecordType EmfCreateColorSpace
public EmfPlusRecordType EmfSetColorSpace
public EmfPlusRecordType EmfDeleteColorSpace
public EmfPlusRecordType EmfGlsRecord
public EmfPlusRecordType EmfGlsBoundedRecord
public EmfPlusRecordType EmfPixelFormat
public EmfPlusRecordType EmfDrawEscape
public EmfPlusRecordType EmfExtEscape
public EmfPlusRecordType EmfStartDoc
public EmfPlusRecordType EmfSmallTextOut
public EmfPlusRecordType EmfForceUfiMapping
public EmfPlusRecordType EmfNamedEscpae
public EmfPlusRecordType EmfColorCorrectPalette
public EmfPlusRecordType EmfSetIcmProfileA
public EmfPlusRecordType EmfSetIcmProfileW
public EmfPlusRecordType EmfAlphaBlend
public EmfPlusRecordType EmfSetLayout
public EmfPlusRecordType EmfTransparentBlt
public EmfPlusRecordType EmfReserved117
public EmfPlusRecordType EmfGradientFill
public EmfPlusRecordType EmfSetLinkedUfis
public EmfPlusRecordType EmfSetTextJustification
public EmfPlusRecordType EmfColorMatchToTargetW
public EmfPlusRecordType EmfCreateColorSpaceW
public EmfPlusRecordType EmfMax
public EmfPlusRecordType EmfMin
public EmfPlusRecordType EmfPlusRecordBase
public EmfPlusRecordType Invalid
public EmfPlusRecordType Header
public EmfPlusRecordType EndOfFile
public EmfPlusRecordType Comment
public EmfPlusRecordType GetDC
public EmfPlusRecordType MultiFormatStart
public EmfPlusRecordType MultiFormatSection
public EmfPlusRecordType MultiFormatEnd
public EmfPlusRecordType Object
public EmfPlusRecordType Clear
public EmfPlusRecordType FillRects
public EmfPlusRecordType DrawRects
public EmfPlusRecordType FillPolygon
public EmfPlusRecordType DrawLines
public EmfPlusRecordType FillEllipse
public EmfPlusRecordType DrawEllipse
public EmfPlusRecordType FillPie
public EmfPlusRecordType DrawPie
public EmfPlusRecordType DrawArc
public EmfPlusRecordType FillRegion
public EmfPlusRecordType FillPath
public EmfPlusRecordType DrawPath
public EmfPlusRecordType FillClosedCurve
public EmfPlusRecordType DrawClosedCurve
public EmfPlusRecordType DrawCurve
public EmfPlusRecordType DrawBeziers
public EmfPlusRecordType DrawImage
public EmfPlusRecordType DrawImagePoints
public EmfPlusRecordType DrawString
public EmfPlusRecordType SetRenderingOrigin
public EmfPlusRecordType SetAntiAliasMode
public EmfPlusRecordType SetTextRenderingHint
public EmfPlusRecordType SetTextContrast
public EmfPlusRecordType SetInterpolationMode
public EmfPlusRecordType SetPixelOffsetMode
public EmfPlusRecordType SetCompositingMode
public EmfPlusRecordType SetCompositingQuality
public EmfPlusRecordType Save
public EmfPlusRecordType Restore
public EmfPlusRecordType BeginContainer
public EmfPlusRecordType BeginContainerNoParams
public EmfPlusRecordType EndContainer
public EmfPlusRecordType SetWorldTransform
public EmfPlusRecordType ResetWorldTransform
public EmfPlusRecordType MultiplyWorldTransform
public EmfPlusRecordType TranslateWorldTransform
public EmfPlusRecordType ScaleWorldTransform
public EmfPlusRecordType RotateWorldTransform
public EmfPlusRecordType SetPageTransform
public EmfPlusRecordType ResetClip
public EmfPlusRecordType SetClipRect
public EmfPlusRecordType SetClipPath
public EmfPlusRecordType SetClipRegion
public EmfPlusRecordType OffsetClip
public EmfPlusRecordType DrawDriverString
public EmfPlusRecordType Total
public EmfPlusRecordType Max
public EmfPlusRecordType Min
}
public System.Drawing.Imaging.EmfType : Enum {
public int value__
public EmfType EmfOnly
public EmfType EmfPlusOnly
public EmfType EmfPlusDual
}
public System.Drawing.Imaging.Encoder : object {
public Encoder Compression
public Encoder ColorDepth
public Encoder ScanMethod
public Encoder Version
public Encoder RenderMethod
public Encoder Quality
public Encoder Transformation
public Encoder LuminanceTable
public Encoder ChrominanceTable
public Encoder SaveFlag
private Guid _guid
public Guid Guid
public void .ctor(Guid guid)
public Guid get_Guid()
}
public System.Drawing.Imaging.EncoderParameter : object {
private Guid _parameterGuid
private int _numberOfValues
private EncoderParameterValueType _parameterValueType
private IntPtr _parameterValue
public Encoder Encoder
public EncoderParameterValueType Type
public EncoderParameterValueType ValueType
public int NumberOfValues
protected void Finalize()
public Encoder get_Encoder()
public void set_Encoder(Encoder value)
public EncoderParameterValueType get_Type()
public EncoderParameterValueType get_ValueType()
public int get_NumberOfValues()
public void Dispose()
private void Dispose(bool disposing)
public void .ctor(Encoder encoder, byte value)
public void .ctor(Encoder encoder, byte value, bool undefined)
public void .ctor(Encoder encoder, short value)
public void .ctor(Encoder encoder, long value)
public void .ctor(Encoder encoder, int numerator, int denominator)
public void .ctor(Encoder encoder, long rangebegin, long rangeend)
public void .ctor(Encoder encoder, int numerator1, int demoninator1, int numerator2, int demoninator2)
public void .ctor(Encoder encoder, string value)
public void .ctor(Encoder encoder, Byte[] value)
public void .ctor(Encoder encoder, Byte[] value, bool undefined)
public void .ctor(Encoder encoder, Int16[] value)
public void .ctor(Encoder encoder, Int64[] value)
public void .ctor(Encoder encoder, Int32[] numerator, Int32[] denominator)
public void .ctor(Encoder encoder, Int64[] rangebegin, Int64[] rangeend)
public void .ctor(Encoder encoder, Int32[] numerator1, Int32[] denominator1, Int32[] numerator2, Int32[] denominator2)
public void .ctor(Encoder encoder, int NumberOfValues, int Type, int Value)
public void .ctor(Encoder encoder, int numberValues, EncoderParameterValueType type, IntPtr value)
private IntPtr Add(IntPtr a, int b)
private IntPtr Add(int a, IntPtr b)
}
public System.Drawing.Imaging.EncoderParameters : object {
private EncoderParameter[] _param
public EncoderParameter[] Param
public void .ctor(int count)
public EncoderParameter[] get_Param()
public void set_Param(EncoderParameter[] value)
internal IntPtr ConvertToMemory()
internal EncoderParameters ConvertFromMemory(IntPtr memory)
public void Dispose()
}
public System.Drawing.Imaging.EncoderParameterValueType : Enum {
public int value__
public EncoderParameterValueType ValueTypeByte
public EncoderParameterValueType ValueTypeAscii
public EncoderParameterValueType ValueTypeShort
public EncoderParameterValueType ValueTypeLong
public EncoderParameterValueType ValueTypeRational
public EncoderParameterValueType ValueTypeLongRange
public EncoderParameterValueType ValueTypeUndefined
public EncoderParameterValueType ValueTypeRationalRange
}
public System.Drawing.Imaging.EncoderValue : Enum {
public int value__
public EncoderValue ColorTypeCMYK
public EncoderValue ColorTypeYCCK
public EncoderValue CompressionLZW
public EncoderValue CompressionCCITT3
public EncoderValue CompressionCCITT4
public EncoderValue CompressionRle
public EncoderValue CompressionNone
public EncoderValue ScanMethodInterlaced
public EncoderValue ScanMethodNonInterlaced
public EncoderValue VersionGif87
public EncoderValue VersionGif89
public EncoderValue RenderProgressive
public EncoderValue RenderNonProgressive
public EncoderValue TransformRotate90
public EncoderValue TransformRotate180
public EncoderValue TransformRotate270
public EncoderValue TransformFlipHorizontal
public EncoderValue TransformFlipVertical
public EncoderValue MultiFrame
public EncoderValue LastFrame
public EncoderValue Flush
public EncoderValue FrameDimensionTime
public EncoderValue FrameDimensionResolution
public EncoderValue FrameDimensionPage
}
internal System.Drawing.Imaging.EnhMetafileHeader : ValueType {
public int type
public int size
public Rectangle bounds
public Rectangle frame
public int signature
public int version
public int bytes
public int records
public short handles
public short reserved
public int description
public int off_description
public int palette_entires
public Size device
public Size millimeters
}
public System.Drawing.Imaging.FrameDimension : object {
private FrameDimension s_time
private FrameDimension s_resolution
private FrameDimension s_page
private Guid _guid
public Guid Guid
public FrameDimension Time
public FrameDimension Resolution
public FrameDimension Page
public void .ctor(Guid guid)
public Guid get_Guid()
public FrameDimension get_Time()
public FrameDimension get_Resolution()
public FrameDimension get_Page()
public bool Equals(object o)
public int GetHashCode()
public string ToString()
}
public System.Drawing.Imaging.ImageAttributes : object {
internal IntPtr nativeImageAttributes
internal void SetNativeImageAttributes(IntPtr handle)
internal void .ctor(IntPtr newNativeImageAttributes)
public void Dispose()
private void Dispose(bool disposing)
protected void Finalize()
public object Clone()
public void SetColorMatrix(ColorMatrix newColorMatrix)
public void SetColorMatrix(ColorMatrix newColorMatrix, ColorMatrixFlag flags)
public void SetColorMatrix(ColorMatrix newColorMatrix, ColorMatrixFlag mode, ColorAdjustType type)
public void ClearColorMatrix()
public void ClearColorMatrix(ColorAdjustType type)
public void SetColorMatrices(ColorMatrix newColorMatrix, ColorMatrix grayMatrix)
public void SetColorMatrices(ColorMatrix newColorMatrix, ColorMatrix grayMatrix, ColorMatrixFlag flags)
public void SetColorMatrices(ColorMatrix newColorMatrix, ColorMatrix grayMatrix, ColorMatrixFlag mode, ColorAdjustType type)
public void SetThreshold(float threshold)
public void SetThreshold(float threshold, ColorAdjustType type)
public void ClearThreshold()
public void ClearThreshold(ColorAdjustType type)
public void SetGamma(float gamma)
public void SetGamma(float gamma, ColorAdjustType type)
public void ClearGamma()
public void ClearGamma(ColorAdjustType type)
public void SetNoOp()
public void SetNoOp(ColorAdjustType type)
public void ClearNoOp()
public void ClearNoOp(ColorAdjustType type)
public void SetColorKey(Color colorLow, Color colorHigh)
public void SetColorKey(Color colorLow, Color colorHigh, ColorAdjustType type)
public void ClearColorKey()
public void ClearColorKey(ColorAdjustType type)
public void SetOutputChannel(ColorChannelFlag flags)
public void SetOutputChannel(ColorChannelFlag flags, ColorAdjustType type)
public void ClearOutputChannel()
public void ClearOutputChannel(ColorAdjustType type)
public void SetOutputChannelColorProfile(string colorProfileFilename)
public void SetOutputChannelColorProfile(string colorProfileFilename, ColorAdjustType type)
public void ClearOutputChannelColorProfile()
public void ClearOutputChannelColorProfile(ColorAdjustType type)
public void SetRemapTable(ColorMap[] map)
public void SetRemapTable(ColorMap[] map, ColorAdjustType type)
public void ClearRemapTable()
public void ClearRemapTable(ColorAdjustType type)
public void SetBrushRemapTable(ColorMap[] map)
public void ClearBrushRemapTable()
public void SetWrapMode(WrapMode mode)
public void SetWrapMode(WrapMode mode, Color color)
public void SetWrapMode(WrapMode mode, Color color, bool clamp)
public void GetAdjustedPalette(ColorPalette palette, ColorAdjustType type)
}
public System.Drawing.Imaging.ImageCodecFlags : Enum {
public int value__
public ImageCodecFlags Encoder
public ImageCodecFlags Decoder
public ImageCodecFlags SupportBitmap
public ImageCodecFlags SupportVector
public ImageCodecFlags SeekableEncode
public ImageCodecFlags BlockingDecode
public ImageCodecFlags Builtin
public ImageCodecFlags System
public ImageCodecFlags User
}
public System.Drawing.Imaging.ImageCodecInfo : object {
private Guid _clsid
private Guid _formatID
private string _codecName
private string _dllName
private string _formatDescription
private string _filenameExtension
private string _mimeType
private ImageCodecFlags _flags
private int _version
private Byte[][] _signaturePatterns
private Byte[][] _signatureMasks
public Guid Clsid
public Guid FormatID
public string CodecName
public string DllName
public string FormatDescription
public string FilenameExtension
public string MimeType
public ImageCodecFlags Flags
public int Version
public Byte[][] SignaturePatterns
public Byte[][] SignatureMasks
public Guid get_Clsid()
public void set_Clsid(Guid value)
public Guid get_FormatID()
public void set_FormatID(Guid value)
public string get_CodecName()
public void set_CodecName(string value)
public string get_DllName()
public void set_DllName(string value)
public string get_FormatDescription()
public void set_FormatDescription(string value)
public string get_FilenameExtension()
public void set_FilenameExtension(string value)
public string get_MimeType()
public void set_MimeType(string value)
public ImageCodecFlags get_Flags()
public void set_Flags(ImageCodecFlags value)
public int get_Version()
public void set_Version(int value)
public Byte[][] get_SignaturePatterns()
public void set_SignaturePatterns(Byte[][] value)
public Byte[][] get_SignatureMasks()
public void set_SignatureMasks(Byte[][] value)
public ImageCodecInfo[] GetImageDecoders()
public ImageCodecInfo[] GetImageEncoders()
private ImageCodecInfo[] ConvertFromMemory(IntPtr memoryStart, int numCodecs)
}
internal System.Drawing.Imaging.ImageCodecInfoPrivate : object {
public Guid Clsid
public Guid FormatID
public IntPtr CodecName
public IntPtr DllName
public IntPtr FormatDescription
public IntPtr FilenameExtension
public IntPtr MimeType
public int Flags
public int Version
public int SigCount
public int SigSize
public IntPtr SigPattern
public IntPtr SigMask
}
public System.Drawing.Imaging.ImageFlags : Enum {
public int value__
public ImageFlags None
public ImageFlags Scalable
public ImageFlags HasAlpha
public ImageFlags HasTranslucent
public ImageFlags PartiallyScalable
public ImageFlags ColorSpaceRgb
public ImageFlags ColorSpaceCmyk
public ImageFlags ColorSpaceGray
public ImageFlags ColorSpaceYcbcr
public ImageFlags ColorSpaceYcck
public ImageFlags HasRealDpi
public ImageFlags HasRealPixelSize
public ImageFlags ReadOnly
public ImageFlags Caching
}
public System.Drawing.Imaging.ImageFormat : object {
private Guid guid
private string name
private string BmpGuid
private string EmfGuid
private string ExifGuid
private string GifGuid
private string TiffGuid
private string PngGuid
private string MemoryBmpGuid
private string IconGuid
private string JpegGuid
private string WmfGuid
private object locker
private ImageFormat BmpImageFormat
private ImageFormat EmfImageFormat
private ImageFormat ExifImageFormat
private ImageFormat GifImageFormat
private ImageFormat TiffImageFormat
private ImageFormat PngImageFormat
private ImageFormat MemoryBmpImageFormat
private ImageFormat IconImageFormat
private ImageFormat JpegImageFormat
private ImageFormat WmfImageFormat
public Guid Guid
public ImageFormat Bmp
public ImageFormat Emf
public ImageFormat Exif
public ImageFormat Gif
public ImageFormat Icon
public ImageFormat Jpeg
public ImageFormat MemoryBmp
public ImageFormat Png
public ImageFormat Tiff
public ImageFormat Wmf
public void .ctor(Guid guid)
private void .ctor(string name, string guid)
public bool Equals(object o)
public int GetHashCode()
public string ToString()
public Guid get_Guid()
public ImageFormat get_Bmp()
public ImageFormat get_Emf()
public ImageFormat get_Exif()
public ImageFormat get_Gif()
public ImageFormat get_Icon()
public ImageFormat get_Jpeg()
public ImageFormat get_MemoryBmp()
public ImageFormat get_Png()
public ImageFormat get_Tiff()
public ImageFormat get_Wmf()
}
public System.Drawing.Imaging.ImageLockMode : Enum {
public int value__
public ImageLockMode ReadOnly
public ImageLockMode WriteOnly
public ImageLockMode ReadWrite
public ImageLockMode UserInputBuffer
}
public System.Drawing.Imaging.Metafile : Image {
internal void .ctor(IntPtr ptr)
internal void .ctor(IntPtr ptr, Stream stream)
public void .ctor(Stream stream)
public void .ctor(string filename)
public void .ctor(IntPtr henhmetafile, bool deleteEmf)
public void .ctor(IntPtr referenceHdc, EmfType emfType)
public void .ctor(IntPtr referenceHdc, Rectangle frameRect)
public void .ctor(IntPtr referenceHdc, RectangleF frameRect)
public void .ctor(IntPtr hmetafile, WmfPlaceableFileHeader wmfHeader)
public void .ctor(Stream stream, IntPtr referenceHdc)
public void .ctor(string fileName, IntPtr referenceHdc)
public void .ctor(IntPtr referenceHdc, EmfType emfType, string description)
public void .ctor(IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit)
public void .ctor(IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit)
public void .ctor(IntPtr hmetafile, WmfPlaceableFileHeader wmfHeader, bool deleteWmf)
public void .ctor(Stream stream, IntPtr referenceHdc, EmfType type)
public void .ctor(Stream stream, IntPtr referenceHdc, Rectangle frameRect)
public void .ctor(Stream stream, IntPtr referenceHdc, RectangleF frameRect)
public void .ctor(string fileName, IntPtr referenceHdc, EmfType type)
public void .ctor(string fileName, IntPtr referenceHdc, Rectangle frameRect)
public void .ctor(string fileName, IntPtr referenceHdc, RectangleF frameRect)
public void .ctor(IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type)
public void .ctor(IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type)
public void .ctor(Stream stream, IntPtr referenceHdc, EmfType type, string description)
public void .ctor(Stream stream, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit)
public void .ctor(Stream stream, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit)
public void .ctor(string fileName, IntPtr referenceHdc, EmfType type, string description)
public void .ctor(string fileName, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit)
public void .ctor(string fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit)
public void .ctor(IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type, string desc)
public void .ctor(IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type, string description)
public void .ctor(Stream stream, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type)
public void .ctor(Stream stream, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type)
public void .ctor(string fileName, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type)
public void .ctor(string fileName, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, string description)
public void .ctor(string fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type)
public void .ctor(string fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, string desc)
public void .ctor(Stream stream, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type, string description)
public void .ctor(Stream stream, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type, string description)
public void .ctor(string fileName, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type, string description)
public void .ctor(string fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type, string description)
public IntPtr GetHenhmetafile()
public MetafileHeader GetMetafileHeader()
public MetafileHeader GetMetafileHeader(IntPtr henhmetafile)
public MetafileHeader GetMetafileHeader(Stream stream)
public MetafileHeader GetMetafileHeader(string fileName)
public MetafileHeader GetMetafileHeader(IntPtr hmetafile, WmfPlaceableFileHeader wmfHeader)
public void PlayRecord(EmfPlusRecordType recordType, int flags, int dataSize, Byte[] data)
}
public System.Drawing.Imaging.MetafileFrameUnit : Enum {
public int value__
public MetafileFrameUnit Pixel
public MetafileFrameUnit Point
public MetafileFrameUnit Inch
public MetafileFrameUnit Document
public MetafileFrameUnit Millimeter
public MetafileFrameUnit GdiCompatible
}
public System.Drawing.Imaging.MetafileHeader : object {
private MonoMetafileHeader header
public Rectangle Bounds
public float DpiX
public float DpiY
public int EmfPlusHeaderSize
public int LogicalDpiX
public int LogicalDpiY
public int MetafileSize
public MetafileType Type
public int Version
public MetaHeader WmfHeader
internal void .ctor(IntPtr henhmetafile)
public bool IsDisplay()
public bool IsEmf()
public bool IsEmfOrEmfPlus()
public bool IsEmfPlus()
public bool IsEmfPlusDual()
public bool IsEmfPlusOnly()
public bool IsWmf()
public bool IsWmfPlaceable()
public Rectangle get_Bounds()
public float get_DpiX()
public float get_DpiY()
public int get_EmfPlusHeaderSize()
public int get_LogicalDpiX()
public int get_LogicalDpiY()
public int get_MetafileSize()
public MetafileType get_Type()
public int get_Version()
public MetaHeader get_WmfHeader()
}
internal System.Drawing.Imaging.MetafileHeaderEmf : object {
public MetafileType type
public int size
public int version
public EmfPlusFlags emfPlusFlags
public float dpiX
public float dpiY
public int X
public int Y
public int Width
public int Height
public ENHMETAHEADER EmfHeader
public int EmfPlusHeaderSize
public int LogicalDpiX
public int LogicalDpiY
}
internal System.Drawing.Imaging.MetafileHeaderWmf : object {
public MetafileType type
public int size
public int version
public EmfPlusFlags emfPlusFlags
public float dpiX
public float dpiY
public int X
public int Y
public int Width
public int Height
public MetaHeader WmfHeader
public int dummy1
public int dummy2
public int dummy3
public int dummy4
public int dummy5
public int dummy6
public int dummy7
public int dummy8
public int dummy9
public int dummy10
public int dummy11
public int dummy12
public int dummy13
public int dummy14
public int dummy15
public int dummy16
public int EmfPlusHeaderSize
public int LogicalDpiX
public int LogicalDpiY
}
public System.Drawing.Imaging.MetafileType : Enum {
public int value__
public MetafileType Invalid
public MetafileType Wmf
public MetafileType WmfPlaceable
public MetafileType Emf
public MetafileType EmfPlusOnly
public MetafileType EmfPlusDual
}
public System.Drawing.Imaging.MetaHeader : object {
private WmfMetaHeader wmf
public short HeaderSize
public int MaxRecord
public short NoObjects
public short NoParameters
public int Size
public short Type
public short Version
internal void .ctor(WmfMetaHeader header)
public short get_HeaderSize()
public void set_HeaderSize(short value)
public int get_MaxRecord()
public void set_MaxRecord(int value)
public short get_NoObjects()
public void set_NoObjects(short value)
public short get_NoParameters()
public void set_NoParameters(short value)
public int get_Size()
public void set_Size(int value)
public short get_Type()
public void set_Type(short value)
public short get_Version()
public void set_Version(short value)
}
internal System.Drawing.Imaging.MonoMetafileHeader : ValueType {
public MetafileType type
public int size
public int version
public int emf_plus_flags
public float dpi_x
public float dpi_y
public int x
public int y
public int width
public int height
public WmfMetaHeader wmf_header
public EnhMetafileHeader emf_header
public int emfplus_header_size
public int logical_dpi_x
public int logical_dpi_y
}
public System.Drawing.Imaging.PaletteFlags : Enum {
public int value__
public PaletteFlags HasAlpha
public PaletteFlags GrayScale
public PaletteFlags Halftone
}
public System.Drawing.Imaging.PixelFormat : Enum {
public int value__
public PixelFormat Indexed
public PixelFormat Gdi
public PixelFormat Alpha
public PixelFormat PAlpha
public PixelFormat Extended
public PixelFormat Canonical
public PixelFormat Undefined
public PixelFormat DontCare
public PixelFormat Format1bppIndexed
public PixelFormat Format4bppIndexed
public PixelFormat Format8bppIndexed
public PixelFormat Format16bppGrayScale
public PixelFormat Format16bppRgb555
public PixelFormat Format16bppRgb565
public PixelFormat Format16bppArgb1555
public PixelFormat Format24bppRgb
public PixelFormat Format32bppRgb
public PixelFormat Format32bppArgb
public PixelFormat Format32bppPArgb
public PixelFormat Format48bppRgb
public PixelFormat Format64bppArgb
public PixelFormat Format64bppPArgb
public PixelFormat Max
}
public System.Drawing.Imaging.PlayRecordCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(EmfPlusRecordType recordType, int flags, int dataSize, IntPtr recordData)
public IAsyncResult BeginInvoke(EmfPlusRecordType recordType, int flags, int dataSize, IntPtr recordData, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Drawing.Imaging.PropertyItem : object {
private int _id
private int _len
private short _type
private Byte[] _value
public int Id
public int Len
public short Type
public Byte[] Value
public int get_Id()
public void set_Id(int value)
public int get_Len()
public void set_Len(int value)
public short get_Type()
public void set_Type(short value)
public Byte[] get_Value()
public void set_Value(Byte[] value)
}
internal System.Drawing.Imaging.PropertyItemInternal : object {
public int id
public int len
public short type
public IntPtr value
public Byte[] Value
protected void Finalize()
public void Dispose()
private void Dispose(bool disposing)
internal PropertyItemInternal ConvertFromPropertyItem(PropertyItem propItem)
internal PropertyItem[] ConvertFromMemory(IntPtr propdata, int count)
public Byte[] get_Value()
}
internal System.Drawing.Imaging.WmfMetaHeader : ValueType {
public short file_type
public short header_size
public short version
public ushort file_size_low
public ushort file_size_high
public short num_of_objects
public int max_record_size
public short num_of_params
}
public System.Drawing.Imaging.WmfPlaceableFileHeader : object {
private int _key
private short _hmf
private short _bboxLeft
private short _bboxTop
private short _bboxRight
private short _bboxBottom
private short _inch
private int _reserved
private short _checksum
public int Key
public short Hmf
public short BboxLeft
public short BboxTop
public short BboxRight
public short BboxBottom
public short Inch
public int Reserved
public short Checksum
public int get_Key()
public void set_Key(int value)
public short get_Hmf()
public void set_Hmf(short value)
public short get_BboxLeft()
public void set_BboxLeft(short value)
public short get_BboxTop()
public void set_BboxTop(short value)
public short get_BboxRight()
public void set_BboxRight(short value)
public short get_BboxBottom()
public void set_BboxBottom(short value)
public short get_Inch()
public void set_Inch(short value)
public int get_Reserved()
public void set_Reserved(int value)
public short get_Checksum()
public void set_Checksum(short value)
}
internal System.Drawing.Internal.GPPOINT : object {
internal int X
internal int Y
internal void .ctor(Point pt)
}
internal System.Drawing.Internal.GPPOINTF : object {
internal float X
internal float Y
internal void .ctor(PointF pt)
internal PointF ToPoint()
}
internal System.Drawing.Internal.GPRECT : ValueType {
internal int X
internal int Y
internal int Width
internal int Height
internal void .ctor(int x, int y, int width, int height)
internal void .ctor(Rectangle rect)
}
internal System.Drawing.Internal.GPRECTF : ValueType {
internal float X
internal float Y
internal float Width
internal float Height
internal SizeF SizeF
internal void .ctor(float x, float y, float width, float height)
internal void .ctor(RectangleF rect)
internal SizeF get_SizeF()
internal RectangleF ToRectangleF()
}
public System.Drawing.KnownColor : Enum {
public int value__
public KnownColor ActiveBorder
public KnownColor ActiveCaption
public KnownColor ActiveCaptionText
public KnownColor AppWorkspace
public KnownColor Control
public KnownColor ControlDark
public KnownColor ControlDarkDark
public KnownColor ControlLight
public KnownColor ControlLightLight
public KnownColor ControlText
public KnownColor Desktop
public KnownColor GrayText
public KnownColor Highlight
public KnownColor HighlightText
public KnownColor HotTrack
public KnownColor InactiveBorder
public KnownColor InactiveCaption
public KnownColor InactiveCaptionText
public KnownColor Info
public KnownColor InfoText
public KnownColor Menu
public KnownColor MenuText
public KnownColor ScrollBar
public KnownColor Window
public KnownColor WindowFrame
public KnownColor WindowText
public KnownColor Transparent
public KnownColor AliceBlue
public KnownColor AntiqueWhite
public KnownColor Aqua
public KnownColor Aquamarine
public KnownColor Azure
public KnownColor Beige
public KnownColor Bisque
public KnownColor Black
public KnownColor BlanchedAlmond
public KnownColor Blue
public KnownColor BlueViolet
public KnownColor Brown
public KnownColor BurlyWood
public KnownColor CadetBlue
public KnownColor Chartreuse
public KnownColor Chocolate
public KnownColor Coral
public KnownColor CornflowerBlue
public KnownColor Cornsilk
public KnownColor Crimson
public KnownColor Cyan
public KnownColor DarkBlue
public KnownColor DarkCyan
public KnownColor DarkGoldenrod
public KnownColor DarkGray
public KnownColor DarkGreen
public KnownColor DarkKhaki
public KnownColor DarkMagenta
public KnownColor DarkOliveGreen
public KnownColor DarkOrange
public KnownColor DarkOrchid
public KnownColor DarkRed
public KnownColor DarkSalmon
public KnownColor DarkSeaGreen
public KnownColor DarkSlateBlue
public KnownColor DarkSlateGray
public KnownColor DarkTurquoise
public KnownColor DarkViolet
public KnownColor DeepPink
public KnownColor DeepSkyBlue
public KnownColor DimGray
public KnownColor DodgerBlue
public KnownColor Firebrick
public KnownColor FloralWhite
public KnownColor ForestGreen
public KnownColor Fuchsia
public KnownColor Gainsboro
public KnownColor GhostWhite
public KnownColor Gold
public KnownColor Goldenrod
public KnownColor Gray
public KnownColor Green
public KnownColor GreenYellow
public KnownColor Honeydew
public KnownColor HotPink
public KnownColor IndianRed
public KnownColor Indigo
public KnownColor Ivory
public KnownColor Khaki
public KnownColor Lavender
public KnownColor LavenderBlush
public KnownColor LawnGreen
public KnownColor LemonChiffon
public KnownColor LightBlue
public KnownColor LightCoral
public KnownColor LightCyan
public KnownColor LightGoldenrodYellow
public KnownColor LightGray
public KnownColor LightGreen
public KnownColor LightPink
public KnownColor LightSalmon
public KnownColor LightSeaGreen
public KnownColor LightSkyBlue
public KnownColor LightSlateGray
public KnownColor LightSteelBlue
public KnownColor LightYellow
public KnownColor Lime
public KnownColor LimeGreen
public KnownColor Linen
public KnownColor Magenta
public KnownColor Maroon
public KnownColor MediumAquamarine
public KnownColor MediumBlue
public KnownColor MediumOrchid
public KnownColor MediumPurple
public KnownColor MediumSeaGreen
public KnownColor MediumSlateBlue
public KnownColor MediumSpringGreen
public KnownColor MediumTurquoise
public KnownColor MediumVioletRed
public KnownColor MidnightBlue
public KnownColor MintCream
public KnownColor MistyRose
public KnownColor Moccasin
public KnownColor NavajoWhite
public KnownColor Navy
public KnownColor OldLace
public KnownColor Olive
public KnownColor OliveDrab
public KnownColor Orange
public KnownColor OrangeRed
public KnownColor Orchid
public KnownColor PaleGoldenrod
public KnownColor PaleGreen
public KnownColor PaleTurquoise
public KnownColor PaleVioletRed
public KnownColor PapayaWhip
public KnownColor PeachPuff
public KnownColor Peru
public KnownColor Pink
public KnownColor Plum
public KnownColor PowderBlue
public KnownColor Purple
public KnownColor Red
public KnownColor RosyBrown
public KnownColor RoyalBlue
public KnownColor SaddleBrown
public KnownColor Salmon
public KnownColor SandyBrown
public KnownColor SeaGreen
public KnownColor SeaShell
public KnownColor Sienna
public KnownColor Silver
public KnownColor SkyBlue
public KnownColor SlateBlue
public KnownColor SlateGray
public KnownColor Snow
public KnownColor SpringGreen
public KnownColor SteelBlue
public KnownColor Tan
public KnownColor Teal
public KnownColor Thistle
public KnownColor Tomato
public KnownColor Turquoise
public KnownColor Violet
public KnownColor Wheat
public KnownColor White
public KnownColor WhiteSmoke
public KnownColor Yellow
public KnownColor YellowGreen
public KnownColor ButtonFace
public KnownColor ButtonHighlight
public KnownColor ButtonShadow
public KnownColor GradientActiveCaption
public KnownColor GradientInactiveCaption
public KnownColor MenuBar
public KnownColor MenuHighlight
}
internal System.Drawing.KnownColors : object {
internal UInt32[] ArgbValues
private UInt32 GetSysColor(GetSysColorIndex index)
private void RetrieveWindowsSystemColors()
public Color FromKnownColor(KnownColor kc)
public string GetName(short kc)
public string GetName(KnownColor kc)
public Color FindColorMatch(Color c)
public void Update(int knownColor, int color)
}
internal System.Drawing.LOGFONT : ValueType {
internal int lfHeight
internal UInt32 lfWidth
internal UInt32 lfEscapement
internal UInt32 lfOrientation
internal UInt32 lfWeight
internal byte lfItalic
internal byte lfUnderline
internal byte lfStrikeOut
internal byte lfCharSet
internal byte lfOutPrecision
internal byte lfClipPrecision
internal byte lfQuality
internal byte lfPitchAndFamily
internal string lfFaceName
}
internal System.Drawing.MacSupport : object {
internal Hashtable contextReference
internal object lockobj
internal Delegate hwnd_delegate
internal CocoaContext GetCGContextForNSView(IntPtr handle)
internal CarbonContext GetCGContextForView(IntPtr handle)
internal IntPtr GetContext(IntPtr port)
internal void ReleaseContext(IntPtr port, IntPtr context)
public IntPtr objc_getClass(string className)
public IntPtr objc_msgSend(IntPtr basePtr, IntPtr selector, string argument)
public IntPtr objc_msgSend(IntPtr basePtr, IntPtr selector)
public void objc_msgSend_stret(Rect& arect, IntPtr basePtr, IntPtr selector)
public bool bool_objc_msgSend(IntPtr handle, IntPtr selector)
public IntPtr sel_registerName(string selectorName)
internal IntPtr CGMainDisplayID()
internal Rect CGDisplayBounds(IntPtr display)
internal int HIViewGetBounds(IntPtr vHnd, Rect& r)
internal int HIViewConvertRect(Rect& r, IntPtr a, IntPtr b)
internal IntPtr GetControlOwner(IntPtr aView)
internal int GetWindowBounds(IntPtr wHnd, UInt32 reg, QDRect& rect)
internal IntPtr GetWindowPort(IntPtr hWnd)
internal IntPtr GetQDGlobalsThePort()
internal void CreateCGContextForPort(IntPtr port, IntPtr& context)
internal void CFRelease(IntPtr context)
internal void QDBeginCGContext(IntPtr port, IntPtr& context)
internal void QDEndCGContext(IntPtr port, IntPtr& context)
internal int CGContextClipToRect(IntPtr context, Rect clip)
internal int CGContextClipToRects(IntPtr context, Rect[] clip_rects, int count)
internal void CGContextTranslateCTM(IntPtr context, float tx, float ty)
internal void CGContextScaleCTM(IntPtr context, float x, float y)
internal void CGContextFlush(IntPtr context)
internal void CGContextSynchronize(IntPtr context)
internal IntPtr CGPathCreateMutable()
internal void CGPathAddRects(IntPtr path, IntPtr _void, Rect[] rects, int count)
internal void CGPathAddRect(IntPtr path, IntPtr _void, Rect rect)
internal void CGContextAddRects(IntPtr context, Rect[] rects, int count)
internal void CGContextAddRect(IntPtr context, Rect rect)
internal void CGContextBeginPath(IntPtr context)
internal void CGContextClosePath(IntPtr context)
internal void CGContextAddPath(IntPtr context, IntPtr path)
internal void CGContextClip(IntPtr context)
internal void CGContextEOClip(IntPtr context)
internal void CGContextEOFillPath(IntPtr context)
internal void CGContextSaveGState(IntPtr context)
internal void CGContextRestoreGState(IntPtr context)
}
internal System.Drawing.NativeMethods : object {
internal HandleRef NullHandleRef
public int MAX_PATH
internal int SM_REMOTESESSION
internal int OBJ_DC
internal int OBJ_METADC
internal int OBJ_MEMDC
internal int OBJ_ENHMETADC
internal int DIB_RGB_COLORS
internal int BI_BITFIELDS
internal int BI_RGB
internal int BITMAPINFO_MAX_COLORSIZE
internal int SPI_GETICONTITLELOGFONT
internal int SPI_GETNONCLIENTMETRICS
internal int DEFAULT_GUI_FONT
}
public System.Drawing.Pen : MarshalByRefObject {
internal IntPtr nativeObject
internal bool isModifiable
private Color color
private CustomLineCap startCap
private CustomLineCap endCap
public PenAlignment Alignment
public Brush Brush
public Color Color
public Single[] CompoundArray
public CustomLineCap CustomEndCap
public CustomLineCap CustomStartCap
public DashCap DashCap
public float DashOffset
public Single[] DashPattern
public DashStyle DashStyle
public LineCap StartCap
public LineCap EndCap
public LineJoin LineJoin
public float MiterLimit
public PenType PenType
public Matrix Transform
public float Width
internal IntPtr NativePen
internal void .ctor(IntPtr p)
public void .ctor(Brush brush)
public void .ctor(Color color)
public void .ctor(Brush brush, float width)
public void .ctor(Color color, float width)
public PenAlignment get_Alignment()
public void set_Alignment(PenAlignment value)
public Brush get_Brush()
public void set_Brush(Brush value)
public Color get_Color()
public void set_Color(Color value)
public Single[] get_CompoundArray()
public void set_CompoundArray(Single[] value)
public CustomLineCap get_CustomEndCap()
public void set_CustomEndCap(CustomLineCap value)
public CustomLineCap get_CustomStartCap()
public void set_CustomStartCap(CustomLineCap value)
public DashCap get_DashCap()
public void set_DashCap(DashCap value)
public float get_DashOffset()
public void set_DashOffset(float value)
public Single[] get_DashPattern()
public void set_DashPattern(Single[] value)
public DashStyle get_DashStyle()
public void set_DashStyle(DashStyle value)
public LineCap get_StartCap()
public void set_StartCap(LineCap value)
public LineCap get_EndCap()
public void set_EndCap(LineCap value)
public LineJoin get_LineJoin()
public void set_LineJoin(LineJoin value)
public float get_MiterLimit()
public void set_MiterLimit(float value)
public PenType get_PenType()
public Matrix get_Transform()
public void set_Transform(Matrix value)
public float get_Width()
public void set_Width(float value)
internal IntPtr get_NativePen()
public object Clone()
public void Dispose()
private void Dispose(bool disposing)
protected void Finalize()
public void MultiplyTransform(Matrix matrix)
public void MultiplyTransform(Matrix matrix, MatrixOrder order)
public void ResetTransform()
public void RotateTransform(float angle)
public void RotateTransform(float angle, MatrixOrder order)
public void ScaleTransform(float sx, float sy)
public void ScaleTransform(float sx, float sy, MatrixOrder order)
public void SetLineCap(LineCap startCap, LineCap endCap, DashCap dashCap)
public void TranslateTransform(float dx, float dy)
public void TranslateTransform(float dx, float dy, MatrixOrder order)
}
public System.Drawing.Pens : object {
private Pen aliceblue
private Pen antiquewhite
private Pen aqua
private Pen aquamarine
private Pen azure
private Pen beige
private Pen bisque
private Pen black
private Pen blanchedalmond
private Pen blue
private Pen blueviolet
private Pen brown
private Pen burlywood
private Pen cadetblue
private Pen chartreuse
private Pen chocolate
private Pen coral
private Pen cornflowerblue
private Pen cornsilk
private Pen crimson
private Pen cyan
private Pen darkblue
private Pen darkcyan
private Pen darkgoldenrod
private Pen darkgray
private Pen darkgreen
private Pen darkkhaki
private Pen darkmagenta
private Pen darkolivegreen
private Pen darkorange
private Pen darkorchid
private Pen darkred
private Pen darksalmon
private Pen darkseagreen
private Pen darkslateblue
private Pen darkslategray
private Pen darkturquoise
private Pen darkviolet
private Pen deeppink
private Pen deepskyblue
private Pen dimgray
private Pen dodgerblue
private Pen firebrick
private Pen floralwhite
private Pen forestgreen
private Pen fuchsia
private Pen gainsboro
private Pen ghostwhite
private Pen gold
private Pen goldenrod
private Pen gray
private Pen green
private Pen greenyellow
private Pen honeydew
private Pen hotpink
private Pen indianred
private Pen indigo
private Pen ivory
private Pen khaki
private Pen lavender
private Pen lavenderblush
private Pen lawngreen
private Pen lemonchiffon
private Pen lightblue
private Pen lightcoral
private Pen lightcyan
private Pen lightgoldenrodyellow
private Pen lightgray
private Pen lightgreen
private Pen lightpink
private Pen lightsalmon
private Pen lightseagreen
private Pen lightskyblue
private Pen lightslategray
private Pen lightsteelblue
private Pen lightyellow
private Pen lime
private Pen limegreen
private Pen linen
private Pen magenta
private Pen maroon
private Pen mediumaquamarine
private Pen mediumblue
private Pen mediumorchid
private Pen mediumpurple
private Pen mediumseagreen
private Pen mediumslateblue
private Pen mediumspringgreen
private Pen mediumturquoise
private Pen mediumvioletred
private Pen midnightblue
private Pen mintcream
private Pen mistyrose
private Pen moccasin
private Pen navajowhite
private Pen navy
private Pen oldlace
private Pen olive
private Pen olivedrab
private Pen orange
private Pen orangered
private Pen orchid
private Pen palegoldenrod
private Pen palegreen
private Pen paleturquoise
private Pen palevioletred
private Pen papayawhip
private Pen peachpuff
private Pen peru
private Pen pink
private Pen plum
private Pen powderblue
private Pen purple
private Pen red
private Pen rosybrown
private Pen royalblue
private Pen saddlebrown
private Pen salmon
private Pen sandybrown
private Pen seagreen
private Pen seashell
private Pen sienna
private Pen silver
private Pen skyblue
private Pen slateblue
private Pen slategray
private Pen snow
private Pen springgreen
private Pen steelblue
private Pen tan
private Pen teal
private Pen thistle
private Pen tomato
private Pen transparent
private Pen turquoise
private Pen violet
private Pen wheat
private Pen white
private Pen whitesmoke
private Pen yellow
private Pen yellowgreen
public Pen AliceBlue
public Pen AntiqueWhite
public Pen Aqua
public Pen Aquamarine
public Pen Azure
public Pen Beige
public Pen Bisque
public Pen Black
public Pen BlanchedAlmond
public Pen Blue
public Pen BlueViolet
public Pen Brown
public Pen BurlyWood
public Pen CadetBlue
public Pen Chartreuse
public Pen Chocolate
public Pen Coral
public Pen CornflowerBlue
public Pen Cornsilk
public Pen Crimson
public Pen Cyan
public Pen DarkBlue
public Pen DarkCyan
public Pen DarkGoldenrod
public Pen DarkGray
public Pen DarkGreen
public Pen DarkKhaki
public Pen DarkMagenta
public Pen DarkOliveGreen
public Pen DarkOrange
public Pen DarkOrchid
public Pen DarkRed
public Pen DarkSalmon
public Pen DarkSeaGreen
public Pen DarkSlateBlue
public Pen DarkSlateGray
public Pen DarkTurquoise
public Pen DarkViolet
public Pen DeepPink
public Pen DeepSkyBlue
public Pen DimGray
public Pen DodgerBlue
public Pen Firebrick
public Pen FloralWhite
public Pen ForestGreen
public Pen Fuchsia
public Pen Gainsboro
public Pen GhostWhite
public Pen Gold
public Pen Goldenrod
public Pen Gray
public Pen Green
public Pen GreenYellow
public Pen Honeydew
public Pen HotPink
public Pen IndianRed
public Pen Indigo
public Pen Ivory
public Pen Khaki
public Pen Lavender
public Pen LavenderBlush
public Pen LawnGreen
public Pen LemonChiffon
public Pen LightBlue
public Pen LightCoral
public Pen LightCyan
public Pen LightGoldenrodYellow
public Pen LightGray
public Pen LightGreen
public Pen LightPink
public Pen LightSalmon
public Pen LightSeaGreen
public Pen LightSkyBlue
public Pen LightSlateGray
public Pen LightSteelBlue
public Pen LightYellow
public Pen Lime
public Pen LimeGreen
public Pen Linen
public Pen Magenta
public Pen Maroon
public Pen MediumAquamarine
public Pen MediumBlue
public Pen MediumOrchid
public Pen MediumPurple
public Pen MediumSeaGreen
public Pen MediumSlateBlue
public Pen MediumSpringGreen
public Pen MediumTurquoise
public Pen MediumVioletRed
public Pen MidnightBlue
public Pen MintCream
public Pen MistyRose
public Pen Moccasin
public Pen NavajoWhite
public Pen Navy
public Pen OldLace
public Pen Olive
public Pen OliveDrab
public Pen Orange
public Pen OrangeRed
public Pen Orchid
public Pen PaleGoldenrod
public Pen PaleGreen
public Pen PaleTurquoise
public Pen PaleVioletRed
public Pen PapayaWhip
public Pen PeachPuff
public Pen Peru
public Pen Pink
public Pen Plum
public Pen PowderBlue
public Pen Purple
public Pen Red
public Pen RosyBrown
public Pen RoyalBlue
public Pen SaddleBrown
public Pen Salmon
public Pen SandyBrown
public Pen SeaGreen
public Pen SeaShell
public Pen Sienna
public Pen Silver
public Pen SkyBlue
public Pen SlateBlue
public Pen SlateGray
public Pen Snow
public Pen SpringGreen
public Pen SteelBlue
public Pen Tan
public Pen Teal
public Pen Thistle
public Pen Tomato
public Pen Transparent
public Pen Turquoise
public Pen Violet
public Pen Wheat
public Pen White
public Pen WhiteSmoke
public Pen Yellow
public Pen YellowGreen
public Pen get_AliceBlue()
public Pen get_AntiqueWhite()
public Pen get_Aqua()
public Pen get_Aquamarine()
public Pen get_Azure()
public Pen get_Beige()
public Pen get_Bisque()
public Pen get_Black()
public Pen get_BlanchedAlmond()
public Pen get_Blue()
public Pen get_BlueViolet()
public Pen get_Brown()
public Pen get_BurlyWood()
public Pen get_CadetBlue()
public Pen get_Chartreuse()
public Pen get_Chocolate()
public Pen get_Coral()
public Pen get_CornflowerBlue()
public Pen get_Cornsilk()
public Pen get_Crimson()
public Pen get_Cyan()
public Pen get_DarkBlue()
public Pen get_DarkCyan()
public Pen get_DarkGoldenrod()
public Pen get_DarkGray()
public Pen get_DarkGreen()
public Pen get_DarkKhaki()
public Pen get_DarkMagenta()
public Pen get_DarkOliveGreen()
public Pen get_DarkOrange()
public Pen get_DarkOrchid()
public Pen get_DarkRed()
public Pen get_DarkSalmon()
public Pen get_DarkSeaGreen()
public Pen get_DarkSlateBlue()
public Pen get_DarkSlateGray()
public Pen get_DarkTurquoise()
public Pen get_DarkViolet()
public Pen get_DeepPink()
public Pen get_DeepSkyBlue()
public Pen get_DimGray()
public Pen get_DodgerBlue()
public Pen get_Firebrick()
public Pen get_FloralWhite()
public Pen get_ForestGreen()
public Pen get_Fuchsia()
public Pen get_Gainsboro()
public Pen get_GhostWhite()
public Pen get_Gold()
public Pen get_Goldenrod()
public Pen get_Gray()
public Pen get_Green()
public Pen get_GreenYellow()
public Pen get_Honeydew()
public Pen get_HotPink()
public Pen get_IndianRed()
public Pen get_Indigo()
public Pen get_Ivory()
public Pen get_Khaki()
public Pen get_Lavender()
public Pen get_LavenderBlush()
public Pen get_LawnGreen()
public Pen get_LemonChiffon()
public Pen get_LightBlue()
public Pen get_LightCoral()
public Pen get_LightCyan()
public Pen get_LightGoldenrodYellow()
public Pen get_LightGray()
public Pen get_LightGreen()
public Pen get_LightPink()
public Pen get_LightSalmon()
public Pen get_LightSeaGreen()
public Pen get_LightSkyBlue()
public Pen get_LightSlateGray()
public Pen get_LightSteelBlue()
public Pen get_LightYellow()
public Pen get_Lime()
public Pen get_LimeGreen()
public Pen get_Linen()
public Pen get_Magenta()
public Pen get_Maroon()
public Pen get_MediumAquamarine()
public Pen get_MediumBlue()
public Pen get_MediumOrchid()
public Pen get_MediumPurple()
public Pen get_MediumSeaGreen()
public Pen get_MediumSlateBlue()
public Pen get_MediumSpringGreen()
public Pen get_MediumTurquoise()
public Pen get_MediumVioletRed()
public Pen get_MidnightBlue()
public Pen get_MintCream()
public Pen get_MistyRose()
public Pen get_Moccasin()
public Pen get_NavajoWhite()
public Pen get_Navy()
public Pen get_OldLace()
public Pen get_Olive()
public Pen get_OliveDrab()
public Pen get_Orange()
public Pen get_OrangeRed()
public Pen get_Orchid()
public Pen get_PaleGoldenrod()
public Pen get_PaleGreen()
public Pen get_PaleTurquoise()
public Pen get_PaleVioletRed()
public Pen get_PapayaWhip()
public Pen get_PeachPuff()
public Pen get_Peru()
public Pen get_Pink()
public Pen get_Plum()
public Pen get_PowderBlue()
public Pen get_Purple()
public Pen get_Red()
public Pen get_RosyBrown()
public Pen get_RoyalBlue()
public Pen get_SaddleBrown()
public Pen get_Salmon()
public Pen get_SandyBrown()
public Pen get_SeaGreen()
public Pen get_SeaShell()
public Pen get_Sienna()
public Pen get_Silver()
public Pen get_SkyBlue()
public Pen get_SlateBlue()
public Pen get_SlateGray()
public Pen get_Snow()
public Pen get_SpringGreen()
public Pen get_SteelBlue()
public Pen get_Tan()
public Pen get_Teal()
public Pen get_Thistle()
public Pen get_Tomato()
public Pen get_Transparent()
public Pen get_Turquoise()
public Pen get_Violet()
public Pen get_Wheat()
public Pen get_White()
public Pen get_WhiteSmoke()
public Pen get_Yellow()
public Pen get_YellowGreen()
}
public System.Drawing.Point : ValueType {
private int x
private int y
public Point Empty
public bool IsEmpty
public int X
public int Y
public Point Ceiling(PointF value)
public Point Round(PointF value)
public Point Truncate(PointF value)
public Point op_Addition(Point pt, Size sz)
public bool op_Equality(Point left, Point right)
public bool op_Inequality(Point left, Point right)
public Point op_Subtraction(Point pt, Size sz)
public Size op_Explicit(Point p)
public PointF op_Implicit(Point p)
public void .ctor(int dw)
public void .ctor(Size sz)
public void .ctor(int x, int y)
public bool get_IsEmpty()
public int get_X()
public void set_X(int value)
public int get_Y()
public void set_Y(int value)
public bool Equals(object obj)
public int GetHashCode()
public void Offset(int dx, int dy)
public string ToString()
public Point Add(Point pt, Size sz)
public void Offset(Point p)
public Point Subtract(Point pt, Size sz)
}
public System.Drawing.PointConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
public bool GetCreateInstanceSupported(ITypeDescriptorContext context)
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
public System.Drawing.PointF : ValueType {
private float x
private float y
public PointF Empty
public bool IsEmpty
public float X
public float Y
public PointF op_Addition(PointF pt, Size sz)
public PointF op_Addition(PointF pt, SizeF sz)
public bool op_Equality(PointF left, PointF right)
public bool op_Inequality(PointF left, PointF right)
public PointF op_Subtraction(PointF pt, Size sz)
public PointF op_Subtraction(PointF pt, SizeF sz)
public void .ctor(float x, float y)
public bool get_IsEmpty()
public float get_X()
public void set_X(float value)
public float get_Y()
public void set_Y(float value)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public PointF Add(PointF pt, Size sz)
public PointF Add(PointF pt, SizeF sz)
public PointF Subtract(PointF pt, Size sz)
public PointF Subtract(PointF pt, SizeF sz)
}
public System.Drawing.Printing.Duplex : Enum {
public int value__
public Duplex Default
public Duplex Simplex
public Duplex Horizontal
public Duplex Vertical
}
internal System.Drawing.Printing.GlobalPrintingServices : object {
internal StringCollection InstalledPrinters
internal StringCollection get_InstalledPrinters()
internal IntPtr CreateGraphicsContext(PrinterSettings settings, PageSettings page_settings)
internal bool StartDoc(GraphicsPrinter gr, string doc_name, string output_file)
internal bool StartPage(GraphicsPrinter gr)
internal bool EndPage(GraphicsPrinter gr)
internal bool EndDoc(GraphicsPrinter gr)
}
internal System.Drawing.Printing.GlobalPrintingServicesUnix : GlobalPrintingServices {
internal StringCollection InstalledPrinters
internal StringCollection get_InstalledPrinters()
internal IntPtr CreateGraphicsContext(PrinterSettings settings, PageSettings default_page_settings)
internal bool StartDoc(GraphicsPrinter gr, string doc_name, string output_file)
internal bool EndDoc(GraphicsPrinter gr)
internal bool StartPage(GraphicsPrinter gr)
internal bool EndPage(GraphicsPrinter gr)
}
internal System.Drawing.Printing.GlobalPrintingServicesWin32 : GlobalPrintingServices {
internal StringCollection InstalledPrinters
internal StringCollection get_InstalledPrinters()
internal IntPtr CreateGraphicsContext(PrinterSettings settings, PageSettings default_page_settings)
internal bool StartDoc(GraphicsPrinter gr, string doc_name, string output_file)
internal bool EndDoc(GraphicsPrinter gr)
internal bool StartPage(GraphicsPrinter gr)
internal bool EndPage(GraphicsPrinter gr)
}
internal System.Drawing.Printing.GraphicsPrinter : object {
private Graphics graphics
private IntPtr hDC
internal Graphics Graphics
internal IntPtr Hdc
internal void .ctor(Graphics gr, IntPtr dc)
internal Graphics get_Graphics()
internal void set_Graphics(Graphics value)
internal IntPtr get_Hdc()
}
public System.Drawing.Printing.InvalidPrinterException : SystemException {
private PrinterSettings _settings
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void .ctor(PrinterSettings settings)
private string GenerateMessage(PrinterSettings settings)
}
public System.Drawing.Printing.Margins : object {
private int _left
private int _right
private int _bottom
private int _top
private double _doubleLeft
private double _doubleRight
private double _doubleTop
private double _doubleBottom
public int Left
public int Right
public int Top
public int Bottom
internal double DoubleLeft
internal double DoubleRight
internal double DoubleTop
internal double DoubleBottom
private void OnDeserializedMethod(StreamingContext context)
public void .ctor(int left, int right, int top, int bottom)
public int get_Left()
public void set_Left(int value)
public int get_Right()
public void set_Right(int value)
public int get_Top()
public void set_Top(int value)
public int get_Bottom()
public void set_Bottom(int value)
internal double get_DoubleLeft()
internal void set_DoubleLeft(double value)
internal double get_DoubleRight()
internal void set_DoubleRight(double value)
internal double get_DoubleTop()
internal void set_DoubleTop(double value)
internal double get_DoubleBottom()
internal void set_DoubleBottom(double value)
private void CheckMargin(int margin, string name)
public object Clone()
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(Margins m1, Margins m2)
public bool op_Inequality(Margins m1, Margins m2)
public string ToString()
}
public System.Drawing.Printing.MarginsConverter : ExpandableObjectConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool GetCreateInstanceSupported(ITypeDescriptorContext context)
public object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
}
public System.Drawing.Printing.PageSettings : object {
internal bool color
internal bool landscape
internal PaperSize paperSize
internal PaperSource paperSource
internal PrinterResolution printerResolution
private Margins margins
private float hardMarginX
private float hardMarginY
private RectangleF printableArea
private PrinterSettings printerSettings
public Rectangle Bounds
public bool Color
public bool Landscape
public Margins Margins
public PaperSize PaperSize
public PaperSource PaperSource
public PrinterResolution PrinterResolution
public PrinterSettings PrinterSettings
public float HardMarginX
public float HardMarginY
public RectangleF PrintableArea
public void .ctor(PrinterSettings printerSettings)
internal void .ctor(PrinterSettings printerSettings, bool color, bool landscape, PaperSize paperSize, PaperSource paperSource, PrinterResolution printerResolution)
public Rectangle get_Bounds()
public bool get_Color()
public void set_Color(bool value)
public bool get_Landscape()
public void set_Landscape(bool value)
public Margins get_Margins()
public void set_Margins(Margins value)
public PaperSize get_PaperSize()
public void set_PaperSize(PaperSize value)
public PaperSource get_PaperSource()
public void set_PaperSource(PaperSource value)
public PrinterResolution get_PrinterResolution()
public void set_PrinterResolution(PrinterResolution value)
public PrinterSettings get_PrinterSettings()
public void set_PrinterSettings(PrinterSettings value)
public float get_HardMarginX()
public float get_HardMarginY()
public RectangleF get_PrintableArea()
public object Clone()
public void CopyToHdevmode(IntPtr hdevmode)
public void SetHdevmode(IntPtr hdevmode)
public string ToString()
}
public System.Drawing.Printing.PaperKind : Enum {
public int value__
public PaperKind Custom
public PaperKind Letter
public PaperKind Legal
public PaperKind A4
public PaperKind CSheet
public PaperKind DSheet
public PaperKind ESheet
public PaperKind LetterSmall
public PaperKind Tabloid
public PaperKind Ledger
public PaperKind Statement
public PaperKind Executive
public PaperKind A3
public PaperKind A4Small
public PaperKind A5
public PaperKind B4
public PaperKind B5
public PaperKind Folio
public PaperKind Quarto
public PaperKind Standard10x14
public PaperKind Standard11x17
public PaperKind Note
public PaperKind Number9Envelope
public PaperKind Number10Envelope
public PaperKind Number11Envelope
public PaperKind Number12Envelope
public PaperKind Number14Envelope
public PaperKind DLEnvelope
public PaperKind C5Envelope
public PaperKind C3Envelope
public PaperKind C4Envelope
public PaperKind C6Envelope
public PaperKind C65Envelope
public PaperKind B4Envelope
public PaperKind B5Envelope
public PaperKind B6Envelope
public PaperKind ItalyEnvelope
public PaperKind MonarchEnvelope
public PaperKind PersonalEnvelope
public PaperKind USStandardFanfold
public PaperKind GermanStandardFanfold
public PaperKind GermanLegalFanfold
public PaperKind IsoB4
public PaperKind JapanesePostcard
public PaperKind Standard9x11
public PaperKind Standard10x11
public PaperKind Standard15x11
public PaperKind InviteEnvelope
public PaperKind LetterExtra
public PaperKind LegalExtra
public PaperKind TabloidExtra
public PaperKind A4Extra
public PaperKind LetterTransverse
public PaperKind A4Transverse
public PaperKind LetterExtraTransverse
public PaperKind APlus
public PaperKind BPlus
public PaperKind LetterPlus
public PaperKind A4Plus
public PaperKind A5Transverse
public PaperKind B5Transverse
public PaperKind A3Extra
public PaperKind A5Extra
public PaperKind B5Extra
public PaperKind A2
public PaperKind A3Transverse
public PaperKind A3ExtraTransverse
public PaperKind JapaneseDoublePostcard
public PaperKind A6
public PaperKind JapaneseEnvelopeKakuNumber2
public PaperKind JapaneseEnvelopeKakuNumber3
public PaperKind JapaneseEnvelopeChouNumber3
public PaperKind JapaneseEnvelopeChouNumber4
public PaperKind LetterRotated
public PaperKind A3Rotated
public PaperKind A4Rotated
public PaperKind A5Rotated
public PaperKind B4JisRotated
public PaperKind B5JisRotated
public PaperKind JapanesePostcardRotated
public PaperKind JapaneseDoublePostcardRotated
public PaperKind A6Rotated
public PaperKind JapaneseEnvelopeKakuNumber2Rotated
public PaperKind JapaneseEnvelopeKakuNumber3Rotated
public PaperKind JapaneseEnvelopeChouNumber3Rotated
public PaperKind JapaneseEnvelopeChouNumber4Rotated
public PaperKind B6Jis
public PaperKind B6JisRotated
public PaperKind Standard12x11
public PaperKind JapaneseEnvelopeYouNumber4
public PaperKind JapaneseEnvelopeYouNumber4Rotated
public PaperKind Prc16K
public PaperKind Prc32K
public PaperKind Prc32KBig
public PaperKind PrcEnvelopeNumber1
public PaperKind PrcEnvelopeNumber2
public PaperKind PrcEnvelopeNumber3
public PaperKind PrcEnvelopeNumber4
public PaperKind PrcEnvelopeNumber5
public PaperKind PrcEnvelopeNumber6
public PaperKind PrcEnvelopeNumber7
public PaperKind PrcEnvelopeNumber8
public PaperKind PrcEnvelopeNumber9
public PaperKind PrcEnvelopeNumber10
public PaperKind Prc16KRotated
public PaperKind Prc32KRotated
public PaperKind Prc32KBigRotated
public PaperKind PrcEnvelopeNumber1Rotated
public PaperKind PrcEnvelopeNumber2Rotated
public PaperKind PrcEnvelopeNumber3Rotated
public PaperKind PrcEnvelopeNumber4Rotated
public PaperKind PrcEnvelopeNumber5Rotated
public PaperKind PrcEnvelopeNumber6Rotated
public PaperKind PrcEnvelopeNumber7Rotated
public PaperKind PrcEnvelopeNumber8Rotated
public PaperKind PrcEnvelopeNumber9Rotated
public PaperKind PrcEnvelopeNumber10Rotated
}
public System.Drawing.Printing.PaperSize : object {
private PaperKind _kind
private string _name
private int _width
private int _height
private bool _createdByDefaultConstructor
public int Height
public PaperKind Kind
public string PaperName
public int RawKind
public int Width
internal void .ctor(PaperKind kind, string name, int width, int height)
public void .ctor(string name, int width, int height)
public int get_Height()
public void set_Height(int value)
public PaperKind get_Kind()
public string get_PaperName()
public void set_PaperName(string value)
public int get_RawKind()
public void set_RawKind(int value)
public int get_Width()
public void set_Width(int value)
public string ToString()
}
public System.Drawing.Printing.PaperSource : object {
private string _name
private PaperSourceKind _kind
public PaperSourceKind Kind
public int RawKind
public string SourceName
internal void .ctor(PaperSourceKind kind, string name)
public PaperSourceKind get_Kind()
public int get_RawKind()
public void set_RawKind(int value)
public string get_SourceName()
public void set_SourceName(string value)
public string ToString()
}
public System.Drawing.Printing.PaperSourceKind : Enum {
public int value__
public PaperSourceKind Upper
public PaperSourceKind Lower
public PaperSourceKind Middle
public PaperSourceKind Manual
public PaperSourceKind Envelope
public PaperSourceKind ManualFeed
public PaperSourceKind AutomaticFeed
public PaperSourceKind TractorFeed
public PaperSourceKind SmallFormat
public PaperSourceKind LargeFormat
public PaperSourceKind LargeCapacity
public PaperSourceKind Cassette
public PaperSourceKind FormSource
public PaperSourceKind Custom
}
public System.Drawing.Printing.PreviewPageInfo : object {
private Image _image
private Size _physicalSize
public Image Image
public Size PhysicalSize
public void .ctor(Image image, Size physicalSize)
public Image get_Image()
public Size get_PhysicalSize()
}
public System.Drawing.Printing.PreviewPrintController : PrintController {
private bool useantialias
private ArrayList pageInfoList
public bool IsPreview
public bool UseAntiAlias
public bool get_IsPreview()
public void OnEndPage(PrintDocument document, PrintPageEventArgs e)
public void OnStartPrint(PrintDocument document, PrintEventArgs e)
public void OnEndPrint(PrintDocument document, PrintEventArgs e)
public Graphics OnStartPage(PrintDocument document, PrintPageEventArgs e)
public bool get_UseAntiAlias()
public void set_UseAntiAlias(bool value)
public PreviewPageInfo[] GetPreviewPageInfo()
}
public System.Drawing.Printing.PrintAction : Enum {
public int value__
public PrintAction PrintToFile
public PrintAction PrintToPreview
public PrintAction PrintToPrinter
}
public System.Drawing.Printing.PrintController : object {
public bool IsPreview
public bool get_IsPreview()
public void OnEndPage(PrintDocument document, PrintPageEventArgs e)
public void OnStartPrint(PrintDocument document, PrintEventArgs e)
public void OnEndPrint(PrintDocument document, PrintEventArgs e)
public Graphics OnStartPage(PrintDocument document, PrintPageEventArgs e)
}
public System.Drawing.Printing.PrintDocument : Component {
private PageSettings defaultpagesettings
private PrinterSettings printersettings
private PrintController printcontroller
private string documentname
private bool originAtMargins
private PrintEventHandler BeginPrint
private PrintEventHandler EndPrint
private PrintPageEventHandler PrintPage
private QueryPageSettingsEventHandler QueryPageSettings
public PageSettings DefaultPageSettings
public string DocumentName
public PrintController PrintController
public PrinterSettings PrinterSettings
public bool OriginAtMargins
public PageSettings get_DefaultPageSettings()
public void set_DefaultPageSettings(PageSettings value)
public string get_DocumentName()
public void set_DocumentName(string value)
public PrintController get_PrintController()
public void set_PrintController(PrintController value)
public PrinterSettings get_PrinterSettings()
public void set_PrinterSettings(PrinterSettings value)
public bool get_OriginAtMargins()
public void set_OriginAtMargins(bool value)
public void Print()
public string ToString()
protected void OnBeginPrint(PrintEventArgs e)
protected void OnEndPrint(PrintEventArgs e)
protected void OnPrintPage(PrintPageEventArgs e)
protected void OnQueryPageSettings(QueryPageSettingsEventArgs e)
public void add_BeginPrint(PrintEventHandler value)
public void remove_BeginPrint(PrintEventHandler value)
public void add_EndPrint(PrintEventHandler value)
public void remove_EndPrint(PrintEventHandler value)
public void add_PrintPage(PrintPageEventHandler value)
public void remove_PrintPage(PrintPageEventHandler value)
public void add_QueryPageSettings(QueryPageSettingsEventHandler value)
public void remove_QueryPageSettings(QueryPageSettingsEventHandler value)
}
public System.Drawing.Printing.PrinterResolution : object {
private int _x
private int _y
private PrinterResolutionKind _kind
public PrinterResolutionKind Kind
public int X
public int Y
internal void .ctor(PrinterResolutionKind kind, int x, int y)
public PrinterResolutionKind get_Kind()
public void set_Kind(PrinterResolutionKind value)
public int get_X()
public void set_X(int value)
public int get_Y()
public void set_Y(int value)
public string ToString()
}
public System.Drawing.Printing.PrinterResolutionKind : Enum {
public int value__
public PrinterResolutionKind High
public PrinterResolutionKind Medium
public PrinterResolutionKind Low
public PrinterResolutionKind Draft
public PrinterResolutionKind Custom
}
public System.Drawing.Printing.PrinterSettings : object {
private string printer_name
private string print_filename
private short copies
private int maximum_page
private int minimum_page
private int from_page
private int to_page
private bool collate
private PrintRange print_range
internal int maximum_copies
internal bool can_duplex
internal bool supports_color
internal int landscape_angle
private bool print_tofile
internal PrinterResolutionCollection printer_resolutions
internal PaperSizeCollection paper_sizes
internal PaperSourceCollection paper_sources
private PageSettings default_pagesettings
private Duplex duplex
internal bool is_plotter
private PrintingServices printing_services
internal NameValueCollection printer_capabilities
public bool CanDuplex
public bool Collate
public short Copies
public PageSettings DefaultPageSettings
public Duplex Duplex
public int FromPage
public StringCollection InstalledPrinters
public bool IsDefaultPrinter
public bool IsPlotter
public bool IsValid
public int LandscapeAngle
public int MaximumCopies
public int MaximumPage
public int MinimumPage
public PaperSizeCollection PaperSizes
public PaperSourceCollection PaperSources
public string PrintFileName
public string PrinterName
public PrinterResolutionCollection PrinterResolutions
public PrintRange PrintRange
public bool PrintToFile
public bool SupportsColor
public int ToPage
internal NameValueCollection PrinterCapabilities
internal void .ctor(PrintingServices printing_services)
private void ResetToDefaults()
public bool get_CanDuplex()
public bool get_Collate()
public void set_Collate(bool value)
public short get_Copies()
public void set_Copies(short value)
public PageSettings get_DefaultPageSettings()
public Duplex get_Duplex()
public void set_Duplex(Duplex value)
public int get_FromPage()
public void set_FromPage(int value)
public StringCollection get_InstalledPrinters()
public bool get_IsDefaultPrinter()
public bool get_IsPlotter()
public bool get_IsValid()
public int get_LandscapeAngle()
public int get_MaximumCopies()
public int get_MaximumPage()
public void set_MaximumPage(int value)
public int get_MinimumPage()
public void set_MinimumPage(int value)
public PaperSizeCollection get_PaperSizes()
public PaperSourceCollection get_PaperSources()
public string get_PrintFileName()
public void set_PrintFileName(string value)
public string get_PrinterName()
public void set_PrinterName(string value)
public PrinterResolutionCollection get_PrinterResolutions()
public PrintRange get_PrintRange()
public void set_PrintRange(PrintRange value)
public bool get_PrintToFile()
public void set_PrintToFile(bool value)
public bool get_SupportsColor()
public int get_ToPage()
public void set_ToPage(int value)
internal NameValueCollection get_PrinterCapabilities()
public object Clone()
public Graphics CreateMeasurementGraphics()
public Graphics CreateMeasurementGraphics(bool honorOriginAtMargins)
public Graphics CreateMeasurementGraphics(PageSettings pageSettings)
public Graphics CreateMeasurementGraphics(PageSettings pageSettings, bool honorOriginAtMargins)
public IntPtr GetHdevmode()
public IntPtr GetHdevmode(PageSettings pageSettings)
public IntPtr GetHdevnames()
public bool IsDirectPrintingSupported(Image image)
public bool IsDirectPrintingSupported(ImageFormat imageFormat)
public void SetHdevmode(IntPtr hdevmode)
public void SetHdevnames(IntPtr hdevnames)
public string ToString()
}
public System.Drawing.Printing.PrinterUnit : Enum {
public int value__
public PrinterUnit Display
public PrinterUnit ThousandthsOfAnInch
public PrinterUnit HundredthsOfAMillimeter
public PrinterUnit TenthsOfAMillimeter
}
public System.Drawing.Printing.PrinterUnitConvert : object {
public double Convert(double value, PrinterUnit fromUnit, PrinterUnit toUnit)
public int Convert(int value, PrinterUnit fromUnit, PrinterUnit toUnit)
public Point Convert(Point value, PrinterUnit fromUnit, PrinterUnit toUnit)
public Size Convert(Size value, PrinterUnit fromUnit, PrinterUnit toUnit)
public Rectangle Convert(Rectangle value, PrinterUnit fromUnit, PrinterUnit toUnit)
public Margins Convert(Margins value, PrinterUnit fromUnit, PrinterUnit toUnit)
private double UnitsPerDisplay(PrinterUnit unit)
}
public System.Drawing.Printing.PrintEventArgs : CancelEventArgs {
private GraphicsPrinter graphics_context
private PrintAction action
public PrintAction PrintAction
internal GraphicsPrinter GraphicsContext
internal void .ctor(PrintAction action)
public PrintAction get_PrintAction()
internal GraphicsPrinter get_GraphicsContext()
internal void set_GraphicsContext(GraphicsPrinter value)
}
public System.Drawing.Printing.PrintEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, PrintEventArgs e)
public IAsyncResult BeginInvoke(object sender, PrintEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Drawing.Printing.PrintingPermission : CodeAccessPermission {
private PrintingPermissionLevel printingLevel
public PrintingPermissionLevel Level
public void .ctor(PermissionState state)
public void .ctor(PrintingPermissionLevel printingLevel)
public PrintingPermissionLevel get_Level()
public void set_Level(PrintingPermissionLevel value)
private void VerifyPrintingLevel(PrintingPermissionLevel level)
public bool IsUnrestricted()
public bool IsSubsetOf(IPermission target)
public IPermission Intersect(IPermission target)
public IPermission Union(IPermission target)
public IPermission Copy()
public SecurityElement ToXml()
public void FromXml(SecurityElement esd)
}
public System.Drawing.Printing.PrintingPermissionAttribute : CodeAccessSecurityAttribute {
private PrintingPermissionLevel level
public PrintingPermissionLevel Level
public void .ctor(SecurityAction action)
public PrintingPermissionLevel get_Level()
public void set_Level(PrintingPermissionLevel value)
public IPermission CreatePermission()
}
public System.Drawing.Printing.PrintingPermissionLevel : Enum {
public int value__
public PrintingPermissionLevel NoPrinting
public PrintingPermissionLevel SafePrinting
public PrintingPermissionLevel DefaultPrinting
public PrintingPermissionLevel AllPrinting
}
internal System.Drawing.Printing.PrintingServices : object {
internal string DefaultPrinter
internal string get_DefaultPrinter()
internal bool IsPrinterValid(string printer)
internal void LoadPrinterSettings(string printer, PrinterSettings settings)
internal void LoadPrinterResolutions(string printer, PrinterSettings settings)
internal void GetPrintDialogInfo(string printer, String& port, String& type, String& status, String& comment)
internal void LoadDefaultResolutions(PrinterResolutionCollection col)
}
internal System.Drawing.Printing.PrintingServicesUnix : PrintingServices {
private Hashtable doc_info
private bool cups_installed
private Hashtable installed_printers
private string default_printer
private string tmpfile
internal StringCollection InstalledPrinters
internal string DefaultPrinter
internal StringCollection get_InstalledPrinters()
internal string get_DefaultPrinter()
private void CheckCupsInstalled()
private IntPtr OpenPrinter(string printer)
private void ClosePrinter(IntPtr& handle)
private int OpenDests(IntPtr& ptr)
private void CloseDests(IntPtr& ptr, int count)
internal bool IsPrinterValid(string printer)
internal void LoadPrinterSettings(string printer, PrinterSettings settings)
private void LoadPrinterOptions(IntPtr options, int numOptions, IntPtr ppd, NameValueCollection list, NameValueCollection paper_names, String& defsize, NameValueCollection paper_sources, String& defsource)
private NameValueCollection LoadPrinterOptions(IntPtr options, int numOptions)
private void LoadOptionList(IntPtr ppd, string option_name, NameValueCollection list, String& defoption)
internal void LoadPrinterResolutions(string printer, PrinterSettings settings)
private PrinterResolution ParseResolution(string resolution)
private PaperSize LoadPrinterPaperSizes(IntPtr ppd_handle, PrinterSettings settings, string def_size, NameValueCollection paper_names)
private PaperSource LoadPrinterPaperSources(PrinterSettings settings, string def_source, NameValueCollection paper_sources)
private void LoadPrinterResolutionsAndDefault(string printer, PrinterSettings settings, IntPtr ppd_handle)
private void LoadPrinters()
internal void GetPrintDialogInfo(string printer, String& port, String& type, String& status, String& comment)
private PaperKind GetPaperKind(int width, int height)
internal int GetCupsOptions(PrinterSettings printer_settings, PageSettings page_settings, IntPtr& options)
internal bool StartDoc(GraphicsPrinter gr, string doc_name, string output_file)
internal bool EndDoc(GraphicsPrinter gr)
internal bool StartPage(GraphicsPrinter gr)
internal bool EndPage(GraphicsPrinter gr)
internal IntPtr CreateGraphicsContext(PrinterSettings settings, PageSettings default_page_settings)
private int cupsGetDests(IntPtr& dests)
private void cupsFreeDests(int num_dests, IntPtr dests)
private IntPtr cupsTempFd(StringBuilder sb, int len)
private IntPtr cupsGetDefault()
private int cupsPrintFile(string printer, string filename, string title, int num_options, IntPtr options)
private IntPtr cupsGetPPD(string printer)
private IntPtr ppdOpenFile(string filename)
private IntPtr ppdFindOption(IntPtr ppd_file, string keyword)
private void ppdClose(IntPtr ppd)
private int cupsParseOptions(string arg, int number_of_options, IntPtr& options)
private void cupsFreeOptions(int number_options, IntPtr options)
private int GdipGetPostScriptGraphicsContext(string filename, int with, int height, double dpix, double dpiy, IntPtr& graphics)
private int GdipGetPostScriptSavePage(IntPtr graphics)
}
internal System.Drawing.Printing.PrintingServicesWin32 : PrintingServices {
private bool is_printer_valid
internal string DefaultPrinter
internal StringCollection InstalledPrinters
internal bool IsPrinterValid(string printer)
internal void LoadPrinterSettings(string printer, PrinterSettings settings)
internal void LoadPrinterResolutions(string printer, PrinterSettings settings)
private void LoadPrinterPaperSizes(string printer, PrinterSettings settings)
internal bool StartDoc(GraphicsPrinter gr, string doc_name, string output_file)
private void LoadPrinterPaperSources(string printer, PrinterSettings settings)
internal bool StartPage(GraphicsPrinter gr)
internal bool EndPage(GraphicsPrinter gr)
internal bool EndDoc(GraphicsPrinter gr)
internal IntPtr CreateGraphicsContext(PrinterSettings settings, PageSettings default_page_settings)
internal string get_DefaultPrinter()
internal StringCollection get_InstalledPrinters()
internal void GetPrintDialogInfo(string printer, String& port, String& type, String& status, String& comment)
private string GetPrinterStatusMsg(UInt32 status)
private int Win32OpenPrinter(string pPrinterName, IntPtr& phPrinter, IntPtr pDefault)
private int Win32GetPrinter(IntPtr hPrinter, int level, IntPtr dwBuf, int size, Int32& dwNeeded)
private int Win32ClosePrinter(IntPtr hPrinter)
private int Win32DeviceCapabilities(string device, string port, DCCapabilities cap, IntPtr outputBuffer, IntPtr deviceMode)
private int Win32EnumPrinters(int Flags, string Name, UInt32 Level, IntPtr pPrinterEnum, UInt32 cbBuf, UInt32& pcbNeeded, UInt32& pcReturned)
private int Win32GetDefaultPrinter(StringBuilder buffer, Int32& bufferSize)
private int Win32DocumentProperties(IntPtr hwnd, IntPtr hPrinter, string pDeviceName, IntPtr pDevModeOutput, IntPtr pDevModeInput, int fMode)
private IntPtr Win32CreateDC(string lpszDriver, string lpszDevice, string lpszOutput, IntPtr lpInitData)
private IntPtr Win32CreateIC(string lpszDriver, string lpszDevice, string lpszOutput, IntPtr lpInitData)
private int Win32StartDoc(IntPtr hdc, DOCINFO& lpdi)
private int Win32StartPage(IntPtr hDC)
private int Win32EndPage(IntPtr hdc)
private int Win32EndDoc(IntPtr hdc)
public IntPtr Win32DeleteDC(IntPtr hDc)
public int Win32GetDeviceCaps(IntPtr hDc, int index)
}
public System.Drawing.Printing.PrintPageEventArgs : EventArgs {
private bool cancel
private Graphics graphics
private bool hasmorePages
private Rectangle marginBounds
private Rectangle pageBounds
private PageSettings pageSettings
private GraphicsPrinter graphics_context
public bool Cancel
public Graphics Graphics
public bool HasMorePages
public Rectangle MarginBounds
public Rectangle PageBounds
public PageSettings PageSettings
internal GraphicsPrinter GraphicsContext
public void .ctor(Graphics graphics, Rectangle marginBounds, Rectangle pageBounds, PageSettings pageSettings)
public bool get_Cancel()
public void set_Cancel(bool value)
public Graphics get_Graphics()
public bool get_HasMorePages()
public void set_HasMorePages(bool value)
public Rectangle get_MarginBounds()
public Rectangle get_PageBounds()
public PageSettings get_PageSettings()
internal void SetGraphics(Graphics g)
internal GraphicsPrinter get_GraphicsContext()
internal void set_GraphicsContext(GraphicsPrinter value)
}
public System.Drawing.Printing.PrintPageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, PrintPageEventArgs e)
public IAsyncResult BeginInvoke(object sender, PrintPageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Drawing.Printing.PrintRange : Enum {
public int value__
public PrintRange AllPages
public PrintRange SomePages
public PrintRange Selection
public PrintRange CurrentPage
}
public System.Drawing.Printing.QueryPageSettingsEventArgs : PrintEventArgs {
private PageSettings _pageSettings
internal bool PageSettingsChanged
public PageSettings PageSettings
public void .ctor(PageSettings pageSettings)
public PageSettings get_PageSettings()
public void set_PageSettings(PageSettings value)
}
public System.Drawing.Printing.QueryPageSettingsEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, QueryPageSettingsEventArgs e)
public IAsyncResult BeginInvoke(object sender, QueryPageSettingsEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Drawing.Printing.StandardPrintController : PrintController {
public void OnEndPage(PrintDocument document, PrintPageEventArgs e)
public void OnStartPrint(PrintDocument document, PrintEventArgs e)
public void OnEndPrint(PrintDocument document, PrintEventArgs e)
public Graphics OnStartPage(PrintDocument document, PrintPageEventArgs e)
}
internal System.Drawing.Printing.SysPrn : object {
private GlobalPrintingServices global_printing_services
private bool is_unix
internal GlobalPrintingServices GlobalService
internal PrintingServices CreatePrintingService()
internal GlobalPrintingServices get_GlobalService()
internal void GetPrintDialogInfo(string printer, String& port, String& type, String& status, String& comment)
}
internal System.Drawing.QDRect : ValueType {
public short top
public short left
public short bottom
public short right
}
internal System.Drawing.Rect : ValueType {
public CGPoint origin
public CGSize size
public void .ctor(float x, float y, float width, float height)
}
public System.Drawing.Rectangle : ValueType {
private int x
private int y
private int width
private int height
public Rectangle Empty
public int Bottom
public int Height
public bool IsEmpty
public int Left
public Point Location
public int Right
public Size Size
public int Top
public int Width
public int X
public int Y
public Rectangle Ceiling(RectangleF value)
public Rectangle FromLTRB(int left, int top, int right, int bottom)
public Rectangle Inflate(Rectangle rect, int x, int y)
public void Inflate(int width, int height)
public void Inflate(Size size)
public Rectangle Intersect(Rectangle a, Rectangle b)
public void Intersect(Rectangle rect)
public Rectangle Round(RectangleF value)
public Rectangle Truncate(RectangleF value)
public Rectangle Union(Rectangle a, Rectangle b)
public bool op_Equality(Rectangle left, Rectangle right)
public bool op_Inequality(Rectangle left, Rectangle right)
public void .ctor(Point location, Size size)
public void .ctor(int x, int y, int width, int height)
public int get_Bottom()
public int get_Height()
public void set_Height(int value)
public bool get_IsEmpty()
public int get_Left()
public Point get_Location()
public void set_Location(Point value)
public int get_Right()
public Size get_Size()
public void set_Size(Size value)
public int get_Top()
public int get_Width()
public void set_Width(int value)
public int get_X()
public void set_X(int value)
public int get_Y()
public void set_Y(int value)
public bool Contains(int x, int y)
public bool Contains(Point pt)
public bool Contains(Rectangle rect)
public bool Equals(object obj)
public int GetHashCode()
public bool IntersectsWith(Rectangle rect)
private bool IntersectsWithInclusive(Rectangle r)
public void Offset(int x, int y)
public void Offset(Point pos)
public string ToString()
}
public System.Drawing.RectangleConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
public bool GetCreateInstanceSupported(ITypeDescriptorContext context)
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
public System.Drawing.RectangleF : ValueType {
private float x
private float y
private float width
private float height
public RectangleF Empty
public float Bottom
public float Height
public bool IsEmpty
public float Left
public PointF Location
public float Right
public SizeF Size
public float Top
public float Width
public float X
public float Y
public RectangleF FromLTRB(float left, float top, float right, float bottom)
public RectangleF Inflate(RectangleF rect, float x, float y)
public void Inflate(float x, float y)
public void Inflate(SizeF size)
public RectangleF Intersect(RectangleF a, RectangleF b)
public void Intersect(RectangleF rect)
public RectangleF Union(RectangleF a, RectangleF b)
public bool op_Equality(RectangleF left, RectangleF right)
public bool op_Inequality(RectangleF left, RectangleF right)
public RectangleF op_Implicit(Rectangle r)
public void .ctor(PointF location, SizeF size)
public void .ctor(float x, float y, float width, float height)
public float get_Bottom()
public float get_Height()
public void set_Height(float value)
public bool get_IsEmpty()
public float get_Left()
public PointF get_Location()
public void set_Location(PointF value)
public float get_Right()
public SizeF get_Size()
public void set_Size(SizeF value)
public float get_Top()
public float get_Width()
public void set_Width(float value)
public float get_X()
public void set_X(float value)
public float get_Y()
public void set_Y(float value)
public bool Contains(float x, float y)
public bool Contains(PointF pt)
public bool Contains(RectangleF rect)
public bool Equals(object obj)
public int GetHashCode()
public bool IntersectsWith(RectangleF rect)
private bool IntersectsWithInclusive(RectangleF r)
public void Offset(float x, float y)
public void Offset(PointF pos)
public string ToString()
}
public System.Drawing.Region : MarshalByRefObject {
private IntPtr nativeRegion
internal IntPtr NativeObject
internal void .ctor(IntPtr native)
public void .ctor(GraphicsPath path)
public void .ctor(Rectangle rect)
public void .ctor(RectangleF rect)
public void .ctor(RegionData rgnData)
public void Union(GraphicsPath path)
public void Union(Rectangle rect)
public void Union(RectangleF rect)
public void Union(Region region)
public void Intersect(GraphicsPath path)
public void Intersect(Rectangle rect)
public void Intersect(RectangleF rect)
public void Intersect(Region region)
public void Complement(GraphicsPath path)
public void Complement(Rectangle rect)
public void Complement(RectangleF rect)
public void Complement(Region region)
public void Exclude(GraphicsPath path)
public void Exclude(Rectangle rect)
public void Exclude(RectangleF rect)
public void Exclude(Region region)
public void Xor(GraphicsPath path)
public void Xor(Rectangle rect)
public void Xor(RectangleF rect)
public void Xor(Region region)
public RectangleF GetBounds(Graphics g)
public void Translate(int dx, int dy)
public void Translate(float dx, float dy)
public bool IsVisible(int x, int y, Graphics g)
public bool IsVisible(int x, int y, int width, int height)
public bool IsVisible(int x, int y, int width, int height, Graphics g)
public bool IsVisible(Point point)
public bool IsVisible(PointF point)
public bool IsVisible(Point point, Graphics g)
public bool IsVisible(PointF point, Graphics g)
public bool IsVisible(Rectangle rect)
public bool IsVisible(RectangleF rect)
public bool IsVisible(Rectangle rect, Graphics g)
public bool IsVisible(RectangleF rect, Graphics g)
public bool IsVisible(float x, float y)
public bool IsVisible(float x, float y, Graphics g)
public bool IsVisible(float x, float y, float width, float height)
public bool IsVisible(float x, float y, float width, float height, Graphics g)
public bool IsEmpty(Graphics g)
public bool IsInfinite(Graphics g)
public void MakeEmpty()
public void MakeInfinite()
public bool Equals(Region region, Graphics g)
public Region FromHrgn(IntPtr hrgn)
public IntPtr GetHrgn(Graphics g)
public RegionData GetRegionData()
public RectangleF[] GetRegionScans(Matrix matrix)
public void Transform(Matrix matrix)
public Region Clone()
public void Dispose()
private void DisposeHandle()
protected void Finalize()
internal IntPtr get_NativeObject()
internal void set_NativeObject(IntPtr value)
public void ReleaseHrgn(IntPtr regionHandle)
}
public System.Drawing.RotateFlipType : Enum {
public int value__
public RotateFlipType RotateNoneFlipNone
public RotateFlipType Rotate90FlipNone
public RotateFlipType Rotate180FlipNone
public RotateFlipType Rotate270FlipNone
public RotateFlipType RotateNoneFlipX
public RotateFlipType Rotate90FlipX
public RotateFlipType Rotate180FlipX
public RotateFlipType Rotate270FlipX
public RotateFlipType RotateNoneFlipY
public RotateFlipType Rotate90FlipY
public RotateFlipType Rotate180FlipY
public RotateFlipType Rotate270FlipY
public RotateFlipType RotateNoneFlipXY
public RotateFlipType Rotate90FlipXY
public RotateFlipType Rotate180FlipXY
public RotateFlipType Rotate270FlipXY
}
internal System.Drawing.SafeNativeMethods : object {
public int ERROR_CANCELLED
public int E_UNEXPECTED
public int E_NOTIMPL
public int E_ABORT
public int E_FAIL
public int E_ACCESSDENIED
public int GMEM_MOVEABLE
public int GMEM_ZEROINIT
public int DM_IN_BUFFER
public int DM_OUT_BUFFER
public int DT_PLOTTER
public int DT_RASPRINTER
public int TECHNOLOGY
public int DC_PAPERS
public int DC_PAPERSIZE
public int DC_BINS
public int DC_DUPLEX
public int DC_BINNAMES
public int DC_ENUMRESOLUTIONS
public int DC_PAPERNAMES
public int DC_ORIENTATION
public int DC_COPIES
public int PD_ALLPAGES
public int PD_SELECTION
public int PD_PAGENUMS
public int PD_CURRENTPAGE
public int PD_RETURNDEFAULT
public int DI_NORMAL
public int IMAGE_ICON
public int IDI_APPLICATION
public int IDI_HAND
public int IDI_QUESTION
public int IDI_EXCLAMATION
public int IDI_ASTERISK
public int IDI_WINLOGO
public int IDI_WARNING
public int IDI_ERROR
public int IDI_INFORMATION
public int SRCCOPY
public int PLANES
public int BITSPIXEL
public int LOGPIXELSX
public int LOGPIXELSY
public int PHYSICALWIDTH
public int PHYSICALHEIGHT
public int PHYSICALOFFSETX
public int PHYSICALOFFSETY
public int VERTRES
public int HORZRES
public int DM_ORIENTATION
public int DM_PAPERSIZE
public int DM_PAPERLENGTH
public int DM_PAPERWIDTH
public int DM_COPIES
public int DM_DEFAULTSOURCE
public int DM_PRINTQUALITY
public int DM_COLOR
public int DM_DUPLEX
public int DM_YRESOLUTION
public int DM_COLLATE
public int DMORIENT_PORTRAIT
public int DMORIENT_LANDSCAPE
public int DMPAPER_LETTER
public int DMPAPER_LETTERSMALL
public int DMPAPER_TABLOID
public int DMPAPER_LEDGER
public int DMPAPER_LEGAL
public int DMPAPER_STATEMENT
public int DMPAPER_EXECUTIVE
public int DMPAPER_A3
public int DMPAPER_A4
public int DMPAPER_A4SMALL
public int DMPAPER_A5
public int DMPAPER_B4
public int DMPAPER_B5
public int DMPAPER_FOLIO
public int DMPAPER_QUARTO
public int DMPAPER_10X14
public int DMPAPER_11X17
public int DMPAPER_NOTE
public int DMPAPER_ENV_9
public int DMPAPER_ENV_10
public int DMPAPER_ENV_11
public int DMPAPER_ENV_12
public int DMPAPER_ENV_14
public int DMPAPER_CSHEET
public int DMPAPER_DSHEET
public int DMPAPER_ESHEET
public int DMPAPER_ENV_DL
public int DMPAPER_ENV_C5
public int DMPAPER_ENV_C3
public int DMPAPER_ENV_C4
public int DMPAPER_ENV_C6
public int DMPAPER_ENV_C65
public int DMPAPER_ENV_B4
public int DMPAPER_ENV_B5
public int DMPAPER_ENV_B6
public int DMPAPER_ENV_ITALY
public int DMPAPER_ENV_MONARCH
public int DMPAPER_ENV_PERSONAL
public int DMPAPER_FANFOLD_US
public int DMPAPER_FANFOLD_STD_GERMAN
public int DMPAPER_FANFOLD_LGL_GERMAN
public int DMPAPER_ISO_B4
public int DMPAPER_JAPANESE_POSTCARD
public int DMPAPER_9X11
public int DMPAPER_10X11
public int DMPAPER_15X11
public int DMPAPER_ENV_INVITE
public int DMPAPER_RESERVED_48
public int DMPAPER_RESERVED_49
public int DMPAPER_LETTER_EXTRA
public int DMPAPER_LEGAL_EXTRA
public int DMPAPER_TABLOID_EXTRA
public int DMPAPER_A4_EXTRA
public int DMPAPER_LETTER_TRANSVERSE
public int DMPAPER_A4_TRANSVERSE
public int DMPAPER_LETTER_EXTRA_TRANSVERSE
public int DMPAPER_A_PLUS
public int DMPAPER_B_PLUS
public int DMPAPER_LETTER_PLUS
public int DMPAPER_A4_PLUS
public int DMPAPER_A5_TRANSVERSE
public int DMPAPER_B5_TRANSVERSE
public int DMPAPER_A3_EXTRA
public int DMPAPER_A5_EXTRA
public int DMPAPER_B5_EXTRA
public int DMPAPER_A2
public int DMPAPER_A3_TRANSVERSE
public int DMPAPER_A3_EXTRA_TRANSVERSE
public int DMPAPER_DBL_JAPANESE_POSTCARD
public int DMPAPER_A6
public int DMPAPER_JENV_KAKU2
public int DMPAPER_JENV_KAKU3
public int DMPAPER_JENV_CHOU3
public int DMPAPER_JENV_CHOU4
public int DMPAPER_LETTER_ROTATED
public int DMPAPER_A3_ROTATED
public int DMPAPER_A4_ROTATED
public int DMPAPER_A5_ROTATED
public int DMPAPER_B4_JIS_ROTATED
public int DMPAPER_B5_JIS_ROTATED
public int DMPAPER_JAPANESE_POSTCARD_ROTATED
public int DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED
public int DMPAPER_A6_ROTATED
public int DMPAPER_JENV_KAKU2_ROTATED
public int DMPAPER_JENV_KAKU3_ROTATED
public int DMPAPER_JENV_CHOU3_ROTATED
public int DMPAPER_JENV_CHOU4_ROTATED
public int DMPAPER_B6_JIS
public int DMPAPER_B6_JIS_ROTATED
public int DMPAPER_12X11
public int DMPAPER_JENV_YOU4
public int DMPAPER_JENV_YOU4_ROTATED
public int DMPAPER_P16K
public int DMPAPER_P32K
public int DMPAPER_P32KBIG
public int DMPAPER_PENV_1
public int DMPAPER_PENV_2
public int DMPAPER_PENV_3
public int DMPAPER_PENV_4
public int DMPAPER_PENV_5
public int DMPAPER_PENV_6
public int DMPAPER_PENV_7
public int DMPAPER_PENV_8
public int DMPAPER_PENV_9
public int DMPAPER_PENV_10
public int DMPAPER_P16K_ROTATED
public int DMPAPER_P32K_ROTATED
public int DMPAPER_P32KBIG_ROTATED
public int DMPAPER_PENV_1_ROTATED
public int DMPAPER_PENV_2_ROTATED
public int DMPAPER_PENV_3_ROTATED
public int DMPAPER_PENV_4_ROTATED
public int DMPAPER_PENV_5_ROTATED
public int DMPAPER_PENV_6_ROTATED
public int DMPAPER_PENV_7_ROTATED
public int DMPAPER_PENV_8_ROTATED
public int DMPAPER_PENV_9_ROTATED
public int DMPAPER_PENV_10_ROTATED
public int DMPAPER_LAST
public int DMBIN_UPPER
public int DMBIN_LOWER
public int DMBIN_MIDDLE
public int DMBIN_MANUAL
public int DMBIN_ENVELOPE
public int DMBIN_ENVMANUAL
public int DMBIN_AUTO
public int DMBIN_TRACTOR
public int DMBIN_SMALLFMT
public int DMBIN_LARGEFMT
public int DMBIN_LARGECAPACITY
public int DMBIN_CASSETTE
public int DMBIN_FORMSOURCE
public int DMBIN_LAST
public int DMBIN_USER
public int DMRES_DRAFT
public int DMRES_LOW
public int DMRES_MEDIUM
public int DMRES_HIGH
public int DMCOLOR_MONOCHROME
public int DMCOLOR_COLOR
public int DMDUP_SIMPLEX
public int DMDUP_VERTICAL
public int DMDUP_HORIZONTAL
public int DMCOLLATE_FALSE
public int DMCOLLATE_TRUE
public int PRINTER_ENUM_LOCAL
public int PRINTER_ENUM_CONNECTIONS
public int SRCPAINT
public int SRCAND
public int SRCINVERT
public int SRCERASE
public int NOTSRCCOPY
public int NOTSRCERASE
public int MERGECOPY
public int MERGEPAINT
public int PATCOPY
public int PATPAINT
public int PATINVERT
public int DSTINVERT
public int BLACKNESS
public int WHITENESS
public int CAPTUREBLT
public int SM_CXICON
public int SM_CYICON
public int DEFAULT_CHARSET
public int NOMIRRORBITMAP
public int QUERYESCSUPPORT
public int CHECKJPEGFORMAT
public int CHECKPNGFORMAT
public int ERROR_ACCESS_DENIED
public int ERROR_INVALID_PARAMETER
public int ERROR_PROC_NOT_FOUND
public IntPtr IntCreateCompatibleBitmap(HandleRef hDC, int width, int height)
public IntPtr CreateCompatibleBitmap(HandleRef hDC, int width, int height)
public int BitBlt(HandleRef hDC, int x, int y, int nWidth, int nHeight, HandleRef hSrcDC, int xSrc, int ySrc, int dwRop)
public int GetDIBits(HandleRef hdc, HandleRef hbm, int arg1, int arg2, IntPtr arg3, BITMAPINFO_FLAT& bmi, int arg5)
public UInt32 GetPaletteEntries(HandleRef hpal, int iStartIndex, int nEntries, Byte[] lppe)
public IntPtr IntCreateDIBSection(HandleRef hdc, BITMAPINFO_FLAT& bmi, int iUsage, IntPtr& ppvBits, IntPtr hSection, int dwOffset)
public IntPtr CreateDIBSection(HandleRef hdc, BITMAPINFO_FLAT& bmi, int iUsage, IntPtr& ppvBits, IntPtr hSection, int dwOffset)
public IntPtr GlobalFree(HandleRef handle)
public int StartDoc(HandleRef hDC, DOCINFO lpDocInfo)
public int StartPage(HandleRef hDC)
public int EndPage(HandleRef hDC)
public int AbortDoc(HandleRef hDC)
public int EndDoc(HandleRef hDC)
public bool PrintDlg(PRINTDLG lppd)
public bool PrintDlg(PRINTDLGX86 lppd)
public int DeviceCapabilities(string pDevice, string pPort, short fwCapabilities, IntPtr pOutput, IntPtr pDevMode)
public int DocumentProperties(HandleRef hwnd, HandleRef hPrinter, string pDeviceName, IntPtr pDevModeOutput, HandleRef pDevModeInput, int fMode)
public int DocumentProperties(HandleRef hwnd, HandleRef hPrinter, string pDeviceName, IntPtr pDevModeOutput, IntPtr pDevModeInput, int fMode)
public int EnumPrinters(int flags, string name, int level, IntPtr pPrinterEnum, int cbBuf, Int32& pcbNeeded, Int32& pcReturned)
public IntPtr GlobalLock(HandleRef handle)
public IntPtr ResetDC(HandleRef hDC, HandleRef lpDevMode)
public bool GlobalUnlock(HandleRef handle)
private IntPtr IntCreateRectRgn(int x1, int y1, int x2, int y2)
public IntPtr CreateRectRgn(int x1, int y1, int x2, int y2)
public int GetClipRgn(HandleRef hDC, HandleRef hRgn)
public int SelectClipRgn(HandleRef hDC, HandleRef hRgn)
public int AddFontResourceEx(string lpszFilename, int fl, IntPtr pdv)
public int AddFontFile(string fileName)
internal IntPtr SaveClipRgn(IntPtr hDC)
internal void RestoreClipRgn(IntPtr hDC, IntPtr hRgn)
public int ExtEscape(HandleRef hDC, int nEscape, int cbInput, Int32& inData, int cbOutput, Int32& outData)
public int ExtEscape(HandleRef hDC, int nEscape, int cbInput, Byte[] inData, int cbOutput, Int32& outData)
public int IntersectClipRect(HandleRef hDC, int x1, int y1, int x2, int y2)
public IntPtr IntGlobalAlloc(int uFlags, UIntPtr dwBytes)
public IntPtr GlobalAlloc(int uFlags, UInt32 dwBytes)
internal void ZeroMemory(Byte* ptr, ulong length)
internal int IntDeleteObject(HandleRef hObject)
public int DeleteObject(HandleRef hObject)
public IntPtr SelectObject(HandleRef hdc, HandleRef obj)
private IntPtr IntCreateIconFromResourceEx(Byte* pbIconBits, int cbIconBits, bool fIcon, int dwVersion, int csDesired, int cyDesired, int flags)
public IntPtr CreateIconFromResourceEx(Byte* pbIconBits, int cbIconBits, bool fIcon, int dwVersion, int csDesired, int cyDesired, int flags)
public IntPtr IntExtractAssociatedIcon(HandleRef hInst, StringBuilder iconPath, Int32& index)
public IntPtr ExtractAssociatedIcon(HandleRef hInst, StringBuilder iconPath, Int32& index)
private IntPtr IntLoadIcon(HandleRef hInst, IntPtr iconId)
public IntPtr LoadIcon(HandleRef hInst, int iconId)
private bool IntDestroyIcon(HandleRef hIcon)
public bool DestroyIcon(HandleRef hIcon)
private IntPtr IntCopyImage(HandleRef hImage, int uType, int cxDesired, int cyDesired, int fuFlags)
public IntPtr CopyImage(HandleRef hImage, int uType, int cxDesired, int cyDesired, int fuFlags)
public int GetObject(HandleRef hObject, int nSize, BITMAP bm)
public int GetObject(HandleRef hObject, int nSize, LOGFONT lf)
public int GetObject(HandleRef hObject, LOGFONT lp)
public bool GetIconInfo(HandleRef hIcon, ICONINFO info)
public bool DrawIconEx(HandleRef hDC, int x, int y, HandleRef hIcon, int width, int height, int iStepIfAniCursor, HandleRef hBrushFlickerFree, int diFlags)
public IPicture OleCreatePictureIndirect(PICTDESC pictdesc, Guid& refiid, bool fOwn)
}
public System.Drawing.Size : ValueType {
private int width
private int height
public Size Empty
public bool IsEmpty
public int Width
public int Height
public Size Ceiling(SizeF value)
public Size Round(SizeF value)
public Size Truncate(SizeF value)
public Size op_Addition(Size sz1, Size sz2)
public bool op_Equality(Size sz1, Size sz2)
public bool op_Inequality(Size sz1, Size sz2)
public Size op_Subtraction(Size sz1, Size sz2)
public Point op_Explicit(Size size)
public SizeF op_Implicit(Size p)
public void .ctor(Point pt)
public void .ctor(int width, int height)
public bool get_IsEmpty()
public int get_Width()
public void set_Width(int value)
public int get_Height()
public void set_Height(int value)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public Size Add(Size sz1, Size sz2)
public Size Subtract(Size sz1, Size sz2)
}
public System.Drawing.SizeConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
public bool GetCreateInstanceSupported(ITypeDescriptorContext context)
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
public System.Drawing.SizeF : ValueType {
private float width
private float height
public SizeF Empty
public bool IsEmpty
public float Width
public float Height
public SizeF op_Addition(SizeF sz1, SizeF sz2)
public bool op_Equality(SizeF sz1, SizeF sz2)
public bool op_Inequality(SizeF sz1, SizeF sz2)
public SizeF op_Subtraction(SizeF sz1, SizeF sz2)
public PointF op_Explicit(SizeF size)
public void .ctor(PointF pt)
public void .ctor(SizeF size)
public void .ctor(float width, float height)
public bool get_IsEmpty()
public float get_Width()
public void set_Width(float value)
public float get_Height()
public void set_Height(float value)
public bool Equals(object obj)
public int GetHashCode()
public PointF ToPointF()
public Size ToSize()
public string ToString()
public SizeF Add(SizeF sz1, SizeF sz2)
public SizeF Subtract(SizeF sz1, SizeF sz2)
}
public System.Drawing.SizeFConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
public bool GetCreateInstanceSupported(ITypeDescriptorContext context)
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
public System.Drawing.SolidBrush : Brush {
private Color _color
private bool _immutable
public Color Color
public void .ctor(Color color)
internal void .ctor(Color color, bool immutable)
internal void .ctor(IntPtr nativeBrush)
public object Clone()
protected void Dispose(bool disposing)
public Color get_Color()
public void set_Color(Color value)
private void InternalSetColor(Color value)
}
internal System.Drawing.SRDescriptionAttribute : DescriptionAttribute {
private bool isReplaced
public string Description
public void .ctor(string description)
public string get_Description()
}
internal System.Drawing.Status : Enum {
public int value__
public Status Ok
public Status GenericError
public Status InvalidParameter
public Status OutOfMemory
public Status ObjectBusy
public Status InsufficientBuffer
public Status NotImplemented
public Status Win32Error
public Status WrongState
public Status Aborted
public Status FileNotFound
public Status ValueOverflow
public Status AccessDenied
public Status UnknownImageFormat
public Status FontFamilyNotFound
public Status FontStyleNotFound
public Status NotTrueTypeFont
public Status UnsupportedGdiplusVersion
public Status GdiplusNotInitialized
public Status PropertyNotFound
public Status PropertyNotSupported
public Status ProfileNotFound
}
public System.Drawing.StringAlignment : Enum {
public int value__
public StringAlignment Near
public StringAlignment Center
public StringAlignment Far
}
public System.Drawing.StringDigitSubstitute : Enum {
public int value__
public StringDigitSubstitute User
public StringDigitSubstitute None
public StringDigitSubstitute National
public StringDigitSubstitute Traditional
}
public System.Drawing.StringFormat : MarshalByRefObject {
private IntPtr nativeStrFmt
private int language
public StringAlignment Alignment
public StringAlignment LineAlignment
public StringFormatFlags FormatFlags
public HotkeyPrefix HotkeyPrefix
public StringTrimming Trimming
public StringFormat GenericDefault
public int DigitSubstitutionLanguage
public StringFormat GenericTypographic
public StringDigitSubstitute DigitSubstitutionMethod
internal IntPtr NativeObject
internal IntPtr nativeFormat
public void .ctor(StringFormatFlags options, int language)
internal void .ctor(IntPtr native)
protected void Finalize()
public void Dispose()
private void Dispose(bool disposing)
public void .ctor(StringFormat format)
public void .ctor(StringFormatFlags options)
public StringAlignment get_Alignment()
public void set_Alignment(StringAlignment value)
public StringAlignment get_LineAlignment()
public void set_LineAlignment(StringAlignment value)
public StringFormatFlags get_FormatFlags()
public void set_FormatFlags(StringFormatFlags value)
public HotkeyPrefix get_HotkeyPrefix()
public void set_HotkeyPrefix(HotkeyPrefix value)
public StringTrimming get_Trimming()
public void set_Trimming(StringTrimming value)
public StringFormat get_GenericDefault()
public int get_DigitSubstitutionLanguage()
public StringFormat get_GenericTypographic()
public StringDigitSubstitute get_DigitSubstitutionMethod()
public void SetMeasurableCharacterRanges(CharacterRange[] ranges)
internal int GetMeasurableCharacterRangeCount()
public object Clone()
public string ToString()
internal IntPtr get_NativeObject()
internal void set_NativeObject(IntPtr value)
internal IntPtr get_nativeFormat()
public void SetTabStops(float firstTabOffset, Single[] tabStops)
public void SetDigitSubstitution(int language, StringDigitSubstitute substitute)
public Single[] GetTabStops(Single& firstTabOffset)
}
public System.Drawing.StringFormatFlags : Enum {
public int value__
public StringFormatFlags DirectionRightToLeft
public StringFormatFlags DirectionVertical
public StringFormatFlags FitBlackBox
public StringFormatFlags DisplayFormatControl
public StringFormatFlags NoFontFallback
public StringFormatFlags MeasureTrailingSpaces
public StringFormatFlags NoWrap
public StringFormatFlags LineLimit
public StringFormatFlags NoClip
}
public System.Drawing.StringTrimming : Enum {
public int value__
public StringTrimming None
public StringTrimming Character
public StringTrimming Word
public StringTrimming EllipsisCharacter
public StringTrimming EllipsisWord
public StringTrimming EllipsisPath
}
public System.Drawing.StringUnit : Enum {
public int value__
public StringUnit World
public StringUnit Display
public StringUnit Pixel
public StringUnit Point
public StringUnit Inch
public StringUnit Document
public StringUnit Millimeter
public StringUnit Em
}
public System.Drawing.SystemBrushes : object {
private object s_systemBrushesKey
public Brush ActiveBorder
public Brush ActiveCaption
public Brush ActiveCaptionText
public Brush AppWorkspace
public Brush ButtonFace
public Brush ButtonHighlight
public Brush ButtonShadow
public Brush Control
public Brush ControlLightLight
public Brush ControlLight
public Brush ControlDark
public Brush ControlDarkDark
public Brush ControlText
public Brush Desktop
public Brush GradientActiveCaption
public Brush GradientInactiveCaption
public Brush GrayText
public Brush Highlight
public Brush HighlightText
public Brush HotTrack
public Brush InactiveCaption
public Brush InactiveBorder
public Brush InactiveCaptionText
public Brush Info
public Brush InfoText
public Brush Menu
public Brush MenuBar
public Brush MenuHighlight
public Brush MenuText
public Brush ScrollBar
public Brush Window
public Brush WindowFrame
public Brush WindowText
public Brush get_ActiveBorder()
public Brush get_ActiveCaption()
public Brush get_ActiveCaptionText()
public Brush get_AppWorkspace()
public Brush get_ButtonFace()
public Brush get_ButtonHighlight()
public Brush get_ButtonShadow()
public Brush get_Control()
public Brush get_ControlLightLight()
public Brush get_ControlLight()
public Brush get_ControlDark()
public Brush get_ControlDarkDark()
public Brush get_ControlText()
public Brush get_Desktop()
public Brush get_GradientActiveCaption()
public Brush get_GradientInactiveCaption()
public Brush get_GrayText()
public Brush get_Highlight()
public Brush get_HighlightText()
public Brush get_HotTrack()
public Brush get_InactiveCaption()
public Brush get_InactiveBorder()
public Brush get_InactiveCaptionText()
public Brush get_Info()
public Brush get_InfoText()
public Brush get_Menu()
public Brush get_MenuBar()
public Brush get_MenuHighlight()
public Brush get_MenuText()
public Brush get_ScrollBar()
public Brush get_Window()
public Brush get_WindowFrame()
public Brush get_WindowText()
public Brush FromSystemColor(Color c)
}
public System.Drawing.SystemColors : object {
public Color ActiveBorder
public Color ActiveCaption
public Color ActiveCaptionText
public Color AppWorkspace
public Color Control
public Color ControlDark
public Color ControlDarkDark
public Color ControlLight
public Color ControlLightLight
public Color ControlText
public Color Desktop
public Color GrayText
public Color Highlight
public Color HighlightText
public Color HotTrack
public Color InactiveBorder
public Color InactiveCaption
public Color InactiveCaptionText
public Color Info
public Color InfoText
public Color Menu
public Color MenuText
public Color ScrollBar
public Color Window
public Color WindowFrame
public Color WindowText
public Color ButtonFace
public Color ButtonHighlight
public Color ButtonShadow
public Color GradientActiveCaption
public Color GradientInactiveCaption
public Color MenuBar
public Color MenuHighlight
public Color get_ActiveBorder()
public Color get_ActiveCaption()
public Color get_ActiveCaptionText()
public Color get_AppWorkspace()
public Color get_Control()
public Color get_ControlDark()
public Color get_ControlDarkDark()
public Color get_ControlLight()
public Color get_ControlLightLight()
public Color get_ControlText()
public Color get_Desktop()
public Color get_GrayText()
public Color get_Highlight()
public Color get_HighlightText()
public Color get_HotTrack()
public Color get_InactiveBorder()
public Color get_InactiveCaption()
public Color get_InactiveCaptionText()
public Color get_Info()
public Color get_InfoText()
public Color get_Menu()
public Color get_MenuText()
public Color get_ScrollBar()
public Color get_Window()
public Color get_WindowFrame()
public Color get_WindowText()
public Color get_ButtonFace()
public Color get_ButtonHighlight()
public Color get_ButtonShadow()
public Color get_GradientActiveCaption()
public Color get_GradientInactiveCaption()
public Color get_MenuBar()
public Color get_MenuHighlight()
}
public System.Drawing.SystemFonts : object {
public Font CaptionFont
public Font DefaultFont
public Font DialogFont
public Font IconTitleFont
public Font MenuFont
public Font MessageBoxFont
public Font SmallCaptionFont
public Font StatusFont
public Font GetFontByName(string systemFontName)
public Font get_CaptionFont()
public Font get_DefaultFont()
public Font get_DialogFont()
public Font get_IconTitleFont()
public Font get_MenuFont()
public Font get_MessageBoxFont()
public Font get_SmallCaptionFont()
public Font get_StatusFont()
}
public System.Drawing.SystemIcons : object {
private Icon[] icons
private int Application_Winlogo
private int Asterisk_Information
private int Error_Hand
private int Exclamation_Warning
private int Question_
private int Shield_
public Icon Application
public Icon Asterisk
public Icon Error
public Icon Exclamation
public Icon Hand
public Icon Information
public Icon Question
public Icon Warning
public Icon WinLogo
public Icon Shield
public Icon get_Application()
public Icon get_Asterisk()
public Icon get_Error()
public Icon get_Exclamation()
public Icon get_Hand()
public Icon get_Information()
public Icon get_Question()
public Icon get_Warning()
public Icon get_WinLogo()
public Icon get_Shield()
}
public System.Drawing.SystemPens : object {
private Pen active_caption_text
private Pen control
private Pen control_dark
private Pen control_dark_dark
private Pen control_light
private Pen control_light_light
private Pen control_text
private Pen gray_text
private Pen highlight
private Pen highlight_text
private Pen inactive_caption_text
private Pen info_text
private Pen menu_text
private Pen window_frame
private Pen window_text
private Pen active_border
private Pen active_caption
private Pen app_workspace
private Pen button_face
private Pen button_highlight
private Pen button_shadow
private Pen desktop
private Pen gradient_activecaption
private Pen gradient_inactivecaption
private Pen hot_track
private Pen inactive_border
private Pen inactive_caption
private Pen info
private Pen menu
private Pen menu_bar
private Pen menu_highlight
private Pen scroll_bar
private Pen window
public Pen ActiveCaptionText
public Pen Control
public Pen ControlDark
public Pen ControlDarkDark
public Pen ControlLight
public Pen ControlLightLight
public Pen ControlText
public Pen GrayText
public Pen Highlight
public Pen HighlightText
public Pen InactiveCaptionText
public Pen InfoText
public Pen MenuText
public Pen WindowFrame
public Pen WindowText
public Pen ActiveBorder
public Pen ActiveCaption
public Pen AppWorkspace
public Pen ButtonFace
public Pen ButtonHighlight
public Pen ButtonShadow
public Pen Desktop
public Pen GradientActiveCaption
public Pen GradientInactiveCaption
public Pen HotTrack
public Pen InactiveBorder
public Pen InactiveCaption
public Pen Info
public Pen Menu
public Pen MenuBar
public Pen MenuHighlight
public Pen ScrollBar
public Pen Window
public Pen get_ActiveCaptionText()
public Pen get_Control()
public Pen get_ControlDark()
public Pen get_ControlDarkDark()
public Pen get_ControlLight()
public Pen get_ControlLightLight()
public Pen get_ControlText()
public Pen get_GrayText()
public Pen get_Highlight()
public Pen get_HighlightText()
public Pen get_InactiveCaptionText()
public Pen get_InfoText()
public Pen get_MenuText()
public Pen get_WindowFrame()
public Pen get_WindowText()
public Pen FromSystemColor(Color c)
public Pen get_ActiveBorder()
public Pen get_ActiveCaption()
public Pen get_AppWorkspace()
public Pen get_ButtonFace()
public Pen get_ButtonHighlight()
public Pen get_ButtonShadow()
public Pen get_Desktop()
public Pen get_GradientActiveCaption()
public Pen get_GradientInactiveCaption()
public Pen get_HotTrack()
public Pen get_InactiveBorder()
public Pen get_InactiveCaption()
public Pen get_Info()
public Pen get_Menu()
public Pen get_MenuBar()
public Pen get_MenuHighlight()
public Pen get_ScrollBar()
public Pen get_Window()
}
public System.Drawing.Text.FontCollection : object {
internal IntPtr _nativeFontCollection
public FontFamily[] Families
public void Dispose()
protected void Dispose(bool disposing)
public FontFamily[] get_Families()
protected void Finalize()
}
public System.Drawing.Text.GenericFontFamilies : Enum {
public int value__
public GenericFontFamilies Serif
public GenericFontFamilies SansSerif
public GenericFontFamilies Monospace
}
public System.Drawing.Text.HotkeyPrefix : Enum {
public int value__
public HotkeyPrefix None
public HotkeyPrefix Show
public HotkeyPrefix Hide
}
public System.Drawing.Text.PrivateFontCollection : FontCollection {
public void AddFontFile(string filename)
public void AddMemoryFont(IntPtr memory, int length)
protected void Dispose(bool disposing)
}
public System.Drawing.Text.TextRenderingHint : Enum {
public int value__
public TextRenderingHint SystemDefault
public TextRenderingHint SingleBitPerPixelGridFit
public TextRenderingHint SingleBitPerPixel
public TextRenderingHint AntiAliasGridFit
public TextRenderingHint AntiAlias
public TextRenderingHint ClearTypeGridFit
}
public System.Drawing.TextureBrush : Brush {
public Matrix Transform
public WrapMode WrapMode
public Image Image
public void .ctor(Image bitmap)
public void .ctor(Image image, WrapMode wrapMode)
public void .ctor(Image image, WrapMode wrapMode, RectangleF dstRect)
public void .ctor(Image image, WrapMode wrapMode, Rectangle dstRect)
public void .ctor(Image image, RectangleF dstRect)
public void .ctor(Image image, RectangleF dstRect, ImageAttributes imageAttr)
public void .ctor(Image image, Rectangle dstRect)
public void .ctor(Image image, Rectangle dstRect, ImageAttributes imageAttr)
internal void .ctor(IntPtr nativeBrush)
public object Clone()
public Matrix get_Transform()
public void set_Transform(Matrix value)
public WrapMode get_WrapMode()
public void set_WrapMode(WrapMode value)
public Image get_Image()
public void ResetTransform()
public void MultiplyTransform(Matrix matrix)
public void MultiplyTransform(Matrix matrix, MatrixOrder order)
public void TranslateTransform(float dx, float dy)
public void TranslateTransform(float dx, float dy, MatrixOrder order)
public void ScaleTransform(float sx, float sy)
public void ScaleTransform(float sx, float sy, MatrixOrder order)
public void RotateTransform(float angle)
public void RotateTransform(float angle, MatrixOrder order)
}
public System.Drawing.ToolboxBitmapAttribute : Attribute {
private Image smallImage
private Image bigImage
public ToolboxBitmapAttribute Default
public void .ctor(string imageFile)
public void .ctor(Type t)
public void .ctor(Type t, string name)
public bool Equals(object value)
public int GetHashCode()
public Image GetImage(object component)
public Image GetImage(object component, bool large)
public Image GetImage(Type type)
public Image GetImage(Type type, bool large)
public Image GetImage(Type type, string imgName, bool large)
public Image GetImageFromResource(Type t, string imageName, bool large)
}
internal System.Drawing.UnsafeNativeMethods : object {
public void CopyMemory(HandleRef destData, HandleRef srcData, int size)
private IntPtr IntGetDC(HandleRef hWnd)
public IntPtr GetDC(HandleRef hWnd)
private bool IntDeleteDC(HandleRef hDC)
public bool DeleteDC(HandleRef hDC)
private int IntReleaseDC(HandleRef hWnd, HandleRef hDC)
public int ReleaseDC(HandleRef hWnd, HandleRef hDC)
private IntPtr IntCreateCompatibleDC(HandleRef hDC)
public IntPtr CreateCompatibleDC(HandleRef hDC)
public IntPtr GetStockObject(int nIndex)
public int GetSystemDefaultLCID()
public int GetSystemMetrics(int nIndex)
public bool SystemParametersInfo(int uiAction, int uiParam, NONCLIENTMETRICS pvParam, int fWinIni)
public bool SystemParametersInfo(int uiAction, int uiParam, LOGFONT pvParam, int fWinIni)
public int GetDeviceCaps(HandleRef hDC, int nIndex)
public int GetObjectType(HandleRef hObject)
}
internal System.Drawing.WorkerThread : object {
private EventHandler frameChangeHandler
private AnimateEventArgs animateEventArgs
private Int32[] delay
public void .ctor(EventHandler frmChgHandler, AnimateEventArgs aniEvtArgs, Int32[] delay)
public void LoopHandler()
}
internal System.Drawing.XColor : ValueType {
public int pixel
public ushort red
public ushort green
public ushort blue
public sbyte flags
public sbyte pad
}
internal System.Drawing.XVisualInfo : ValueType {
internal IntPtr visual
internal IntPtr visualid
internal int screen
internal UInt32 depth
internal int klass
internal IntPtr red_mask
internal IntPtr green_mask
internal IntPtr blue_mask
internal int colormap_size
internal int bits_per_rgb
}
internal System.Internal.HandleChangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string handleType, IntPtr handleValue, int currentHandleCount)
public IAsyncResult BeginInvoke(string handleType, IntPtr handleValue, int currentHandleCount, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Internal.HandleCollector : object {
private HandleType[] s_handleTypes
private int s_handleTypeCount
private HandleChangeEventHandler HandleAdded
private HandleChangeEventHandler HandleRemoved
private object s_internalSyncObject
internal void add_HandleAdded(HandleChangeEventHandler value)
internal void remove_HandleAdded(HandleChangeEventHandler value)
internal void add_HandleRemoved(HandleChangeEventHandler value)
internal void remove_HandleRemoved(HandleChangeEventHandler value)
internal IntPtr Add(IntPtr handle, int type)
internal int RegisterType(string typeName, int expense, int initialThreshold)
internal IntPtr Remove(IntPtr handle, int type)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
