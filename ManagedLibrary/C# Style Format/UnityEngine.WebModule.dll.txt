internal SimpleJson.IJsonSerializerStrategy {
public bool TrySerializeNonPrimitiveObject(object input, Object& output)
public object DeserializeObject(object value, Type type)
}
internal SimpleJson.JsonArray : List`1<object> {
public void .ctor(int capacity)
public string ToString()
}
internal SimpleJson.JsonObject : object {
private Dictionary`2<string, object> _members
public object Item
public ICollection`1<string> Keys
public ICollection`1<object> Values
public object Item
public int Count
public bool IsReadOnly
public void .ctor(IEqualityComparer`1<string> comparer)
public object get_Item(int index)
internal object GetAtIndex(IDictionary`2<string, object> obj, int index)
public void Add(string key, object value)
public bool ContainsKey(string key)
public ICollection`1<string> get_Keys()
public bool Remove(string key)
public bool TryGetValue(string key, Object& value)
public ICollection`1<object> get_Values()
public object get_Item(string key)
public void set_Item(string key, object value)
public void Add(KeyValuePair`2<string, object> item)
public void Clear()
public bool Contains(KeyValuePair`2<string, object> item)
public void CopyTo(KeyValuePair`2[] array, int arrayIndex)
public int get_Count()
public bool get_IsReadOnly()
public bool Remove(KeyValuePair`2<string, object> item)
public IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public string ToString()
}
internal SimpleJson.PocoJsonSerializerStrategy : object {
internal IDictionary`2<Type, ConstructorDelegate> ConstructorCache
internal IDictionary`2<Type, IDictionary`2<string, GetDelegate>> GetCache
internal IDictionary`2<Type, IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>>> SetCache
internal Type[] EmptyTypes
internal Type[] ArrayConstructorParameterTypes
private String[] Iso8601Format
protected string MapClrMemberNameToJsonFieldName(string clrPropertyName)
internal ConstructorDelegate ContructorDelegateFactory(Type key)
internal IDictionary`2<string, GetDelegate> GetterValueFactory(Type type)
internal IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type)
public bool TrySerializeNonPrimitiveObject(object input, Object& output)
public object DeserializeObject(object value, Type type)
protected object SerializeEnum(Enum p)
protected bool TrySerializeKnownTypes(object input, Object& output)
protected bool TrySerializeUnknownTypes(object input, Object& output)
}
internal SimpleJson.Reflection.ReflectionUtils : object {
private Object[] EmptyObjects
public Attribute GetAttribute(MemberInfo info, Type type)
public Attribute GetAttribute(Type objectType, Type attributeType)
public Type[] GetGenericTypeArguments(Type type)
public bool IsTypeGenericeCollectionInterface(Type type)
public bool IsAssignableFrom(Type type1, Type type2)
public bool IsTypeDictionary(Type type)
public bool IsNullableType(Type type)
public object ToNullableType(object obj, Type nullableType)
public bool IsValueType(Type type)
public IEnumerable`1<ConstructorInfo> GetConstructors(Type type)
public ConstructorInfo GetConstructorInfo(Type type, Type[] argsType)
public IEnumerable`1<PropertyInfo> GetProperties(Type type)
public IEnumerable`1<FieldInfo> GetFields(Type type)
public MethodInfo GetGetterMethodInfo(PropertyInfo propertyInfo)
public MethodInfo GetSetterMethodInfo(PropertyInfo propertyInfo)
public ConstructorDelegate GetContructor(ConstructorInfo constructorInfo)
public ConstructorDelegate GetContructor(Type type, Type[] argsType)
public ConstructorDelegate GetConstructorByReflection(ConstructorInfo constructorInfo)
public ConstructorDelegate GetConstructorByReflection(Type type, Type[] argsType)
public GetDelegate GetGetMethod(PropertyInfo propertyInfo)
public GetDelegate GetGetMethod(FieldInfo fieldInfo)
public GetDelegate GetGetMethodByReflection(PropertyInfo propertyInfo)
public GetDelegate GetGetMethodByReflection(FieldInfo fieldInfo)
public SetDelegate GetSetMethod(PropertyInfo propertyInfo)
public SetDelegate GetSetMethod(FieldInfo fieldInfo)
public SetDelegate GetSetMethodByReflection(PropertyInfo propertyInfo)
public SetDelegate GetSetMethodByReflection(FieldInfo fieldInfo)
}
internal SimpleJson.SimpleJson : object {
private int TOKEN_NONE
private int TOKEN_CURLY_OPEN
private int TOKEN_CURLY_CLOSE
private int TOKEN_SQUARED_OPEN
private int TOKEN_SQUARED_CLOSE
private int TOKEN_COLON
private int TOKEN_COMMA
private int TOKEN_STRING
private int TOKEN_NUMBER
private int TOKEN_TRUE
private int TOKEN_FALSE
private int TOKEN_NULL
private int BUILDER_CAPACITY
private IJsonSerializerStrategy _currentJsonSerializerStrategy
private PocoJsonSerializerStrategy _pocoJsonSerializerStrategy
public IJsonSerializerStrategy CurrentJsonSerializerStrategy
public PocoJsonSerializerStrategy PocoJsonSerializerStrategy
public object DeserializeObject(string json)
public bool TryDeserializeObject(string json, Object& obj)
public object DeserializeObject(string json, Type type, IJsonSerializerStrategy jsonSerializerStrategy)
public object DeserializeObject(string json, Type type)
public T DeserializeObject(string json, IJsonSerializerStrategy jsonSerializerStrategy)
public T DeserializeObject(string json)
public string SerializeObject(object json, IJsonSerializerStrategy jsonSerializerStrategy)
public string SerializeObject(object json)
public string EscapeToJavascriptString(string jsonString)
private IDictionary`2<string, object> ParseObject(Char[] json, Int32& index, Boolean& success)
private JsonArray ParseArray(Char[] json, Int32& index, Boolean& success)
private object ParseValue(Char[] json, Int32& index, Boolean& success)
private string ParseString(Char[] json, Int32& index, Boolean& success)
private string ConvertFromUtf32(int utf32)
private object ParseNumber(Char[] json, Int32& index, Boolean& success)
private int GetLastIndexOfNumber(Char[] json, int index)
private void EatWhitespace(Char[] json, Int32& index)
private int LookAhead(Char[] json, int index)
private int NextToken(Char[] json, Int32& index)
private bool SerializeValue(IJsonSerializerStrategy jsonSerializerStrategy, object value, StringBuilder builder)
private bool SerializeObject(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable keys, IEnumerable values, StringBuilder builder)
private bool SerializeArray(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable anArray, StringBuilder builder)
private bool SerializeString(string aString, StringBuilder builder)
private bool SerializeNumber(object number, StringBuilder builder)
private bool IsNumeric(object value)
public IJsonSerializerStrategy get_CurrentJsonSerializerStrategy()
public void set_CurrentJsonSerializerStrategy(IJsonSerializerStrategy value)
public PocoJsonSerializerStrategy get_PocoJsonSerializerStrategy()
}
