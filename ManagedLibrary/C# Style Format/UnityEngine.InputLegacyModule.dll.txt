public UnityEngine.AccelerationEvent : ValueType {
internal float x
internal float y
internal float z
internal float m_TimeDelta
public Vector3 acceleration
public float deltaTime
public Vector3 get_acceleration()
public float get_deltaTime()
}
internal UnityEngine.CameraRaycastHelper : object {
internal GameObject RaycastTry(Camera cam, Ray ray, float distance, int layerMask)
internal GameObject RaycastTry2D(Camera cam, Ray ray, float distance, int layerMask)
private GameObject RaycastTry_Injected(Camera cam, Ray& ray, float distance, int layerMask)
private GameObject RaycastTry2D_Injected(Camera cam, Ray& ray, float distance, int layerMask)
}
public UnityEngine.Compass : object {
public float magneticHeading
public float trueHeading
public float headingAccuracy
public Vector3 rawVector
public double timestamp
public bool enabled
public float get_magneticHeading()
public float get_trueHeading()
public float get_headingAccuracy()
public Vector3 get_rawVector()
public double get_timestamp()
public bool get_enabled()
public void set_enabled(bool value)
}
public UnityEngine.DeviceOrientation : Enum {
public int value__
public DeviceOrientation Unknown
public DeviceOrientation Portrait
public DeviceOrientation PortraitUpsideDown
public DeviceOrientation LandscapeLeft
public DeviceOrientation LandscapeRight
public DeviceOrientation FaceUp
public DeviceOrientation FaceDown
}
public UnityEngine.Gyroscope : object {
private int m_GyroIndex
public Vector3 rotationRate
public Vector3 rotationRateUnbiased
public Vector3 gravity
public Vector3 userAcceleration
public Quaternion attitude
public bool enabled
public float updateInterval
internal void .ctor(int index)
private Vector3 rotationRate_Internal(int idx)
private Vector3 rotationRateUnbiased_Internal(int idx)
private Vector3 gravity_Internal(int idx)
private Vector3 userAcceleration_Internal(int idx)
private Quaternion attitude_Internal(int idx)
private bool getEnabled_Internal(int idx)
private void setEnabled_Internal(int idx, bool enabled)
private float getUpdateInterval_Internal(int idx)
private void setUpdateInterval_Internal(int idx, float interval)
public Vector3 get_rotationRate()
public Vector3 get_rotationRateUnbiased()
public Vector3 get_gravity()
public Vector3 get_userAcceleration()
public Quaternion get_attitude()
public bool get_enabled()
public void set_enabled(bool value)
public float get_updateInterval()
public void set_updateInterval(float value)
private void rotationRate_Internal_Injected(int idx, Vector3& ret)
private void rotationRateUnbiased_Internal_Injected(int idx, Vector3& ret)
private void gravity_Internal_Injected(int idx, Vector3& ret)
private void userAcceleration_Internal_Injected(int idx, Vector3& ret)
private void attitude_Internal_Injected(int idx, Quaternion& ret)
}
public UnityEngine.IMECompositionMode : Enum {
public int value__
public IMECompositionMode Auto
public IMECompositionMode On
public IMECompositionMode Off
}
public UnityEngine.Input : object {
private LocationService locationServiceInstance
private Compass compassInstance
private Gyroscope s_MainGyro
public bool simulateMouseWithTouches
public bool anyKey
public bool anyKeyDown
public string inputString
public Vector3 mousePosition
public Vector2 mouseScrollDelta
public IMECompositionMode imeCompositionMode
public string compositionString
public bool imeIsSelected
public Vector2 compositionCursorPos
public bool eatKeyPressOnTextFieldFocus
public bool mousePresent
public int touchCount
public bool touchPressureSupported
public bool stylusTouchSupported
public bool touchSupported
public bool multiTouchEnabled
public bool isGyroAvailable
public DeviceOrientation deviceOrientation
public Vector3 acceleration
public bool compensateSensors
public int accelerationEventCount
public bool backButtonLeavesApp
public LocationService location
public Compass compass
public Gyroscope gyro
public Touch[] touches
public AccelerationEvent[] accelerationEvents
private bool GetKeyInt(KeyCode key)
private bool GetKeyString(string name)
private bool GetKeyUpInt(KeyCode key)
private bool GetKeyUpString(string name)
private bool GetKeyDownInt(KeyCode key)
private bool GetKeyDownString(string name)
public float GetAxis(string axisName)
public float GetAxisRaw(string axisName)
public bool GetButton(string buttonName)
public bool GetButtonDown(string buttonName)
public bool GetButtonUp(string buttonName)
public bool GetMouseButton(int button)
public bool GetMouseButtonDown(int button)
public bool GetMouseButtonUp(int button)
public void ResetInputAxes()
public String[] GetJoystickNames()
public Touch GetTouch(int index)
public AccelerationEvent GetAccelerationEvent(int index)
public bool GetKey(KeyCode key)
public bool GetKey(string name)
public bool GetKeyUp(KeyCode key)
public bool GetKeyUp(string name)
public bool GetKeyDown(KeyCode key)
public bool GetKeyDown(string name)
internal void SimulateTouch(int id, Vector2 position, TouchPhase action)
private void SimulateTouchInternal(int id, Vector2 position, TouchPhase action, long timestamp)
public bool get_simulateMouseWithTouches()
public void set_simulateMouseWithTouches(bool value)
public bool get_anyKey()
public bool get_anyKeyDown()
public string get_inputString()
public Vector3 get_mousePosition()
public Vector2 get_mouseScrollDelta()
public IMECompositionMode get_imeCompositionMode()
public void set_imeCompositionMode(IMECompositionMode value)
public string get_compositionString()
public bool get_imeIsSelected()
public Vector2 get_compositionCursorPos()
public void set_compositionCursorPos(Vector2 value)
public bool get_eatKeyPressOnTextFieldFocus()
public void set_eatKeyPressOnTextFieldFocus(bool value)
public bool get_mousePresent()
public int get_touchCount()
public bool get_touchPressureSupported()
public bool get_stylusTouchSupported()
public bool get_touchSupported()
public bool get_multiTouchEnabled()
public void set_multiTouchEnabled(bool value)
public bool get_isGyroAvailable()
public DeviceOrientation get_deviceOrientation()
public Vector3 get_acceleration()
public bool get_compensateSensors()
public void set_compensateSensors(bool value)
public int get_accelerationEventCount()
public bool get_backButtonLeavesApp()
public void set_backButtonLeavesApp(bool value)
public LocationService get_location()
public Compass get_compass()
private int GetGyroInternal()
public Gyroscope get_gyro()
public Touch[] get_touches()
public AccelerationEvent[] get_accelerationEvents()
private void GetTouch_Injected(int index, Touch& ret)
private void GetAccelerationEvent_Injected(int index, AccelerationEvent& ret)
private void SimulateTouchInternal_Injected(int id, Vector2& position, TouchPhase action, long timestamp)
private void get_mousePosition_Injected(Vector3& ret)
private void get_mouseScrollDelta_Injected(Vector2& ret)
private void get_compositionCursorPos_Injected(Vector2& ret)
private void set_compositionCursorPos_Injected(Vector2& value)
private void get_acceleration_Injected(Vector3& ret)
}
public UnityEngine.LocationInfo : ValueType {
internal double m_Timestamp
internal float m_Latitude
internal float m_Longitude
internal float m_Altitude
internal float m_HorizontalAccuracy
internal float m_VerticalAccuracy
public float latitude
public float longitude
public float altitude
public float horizontalAccuracy
public float verticalAccuracy
public double timestamp
public float get_latitude()
public float get_longitude()
public float get_altitude()
public float get_horizontalAccuracy()
public float get_verticalAccuracy()
public double get_timestamp()
}
public UnityEngine.LocationService : object {
public bool isEnabledByUser
public LocationServiceStatus status
public LocationInfo lastData
internal bool IsServiceEnabledByUser()
internal LocationServiceStatus GetLocationStatus()
internal LocationInfo GetLastLocation()
internal void SetDesiredAccuracy(float value)
internal void SetDistanceFilter(float value)
internal void StartUpdatingLocation()
internal void StopUpdatingLocation()
internal HeadingInfo GetLastHeading()
internal bool IsHeadingUpdatesEnabled()
internal void SetHeadingUpdatesEnabled(bool value)
public bool get_isEnabledByUser()
public LocationServiceStatus get_status()
public LocationInfo get_lastData()
public void Start(float desiredAccuracyInMeters, float updateDistanceInMeters)
public void Start(float desiredAccuracyInMeters)
public void Start()
public void Stop()
private void GetLastLocation_Injected(LocationInfo& ret)
private void GetLastHeading_Injected(HeadingInfo& ret)
}
public UnityEngine.LocationServiceStatus : Enum {
public int value__
public LocationServiceStatus Stopped
public LocationServiceStatus Initializing
public LocationServiceStatus Running
public LocationServiceStatus Failed
}
internal UnityEngine.SendMouseEvents : object {
private int m_HitIndexGUI
private int m_HitIndexPhysics3D
private int m_HitIndexPhysics2D
private bool s_MouseUsed
private HitInfo[] m_LastHit
private HitInfo[] m_MouseDownHit
private HitInfo[] m_CurrentHit
private Camera[] m_Cameras
private void SetMouseMoved()
private void DoSendMouseEvents(int skipRTCameras)
private void SendEvents(int i, HitInfo hit)
}
public UnityEngine.Touch : ValueType {
private int m_FingerId
private Vector2 m_Position
private Vector2 m_RawPosition
private Vector2 m_PositionDelta
private float m_TimeDelta
private int m_TapCount
private TouchPhase m_Phase
private TouchType m_Type
private float m_Pressure
private float m_maximumPossiblePressure
private float m_Radius
private float m_RadiusVariance
private float m_AltitudeAngle
private float m_AzimuthAngle
public int fingerId
public Vector2 position
public Vector2 rawPosition
public Vector2 deltaPosition
public float deltaTime
public int tapCount
public TouchPhase phase
public float pressure
public float maximumPossiblePressure
public TouchType type
public float altitudeAngle
public float azimuthAngle
public float radius
public float radiusVariance
public int get_fingerId()
public void set_fingerId(int value)
public Vector2 get_position()
public void set_position(Vector2 value)
public Vector2 get_rawPosition()
public void set_rawPosition(Vector2 value)
public Vector2 get_deltaPosition()
public void set_deltaPosition(Vector2 value)
public float get_deltaTime()
public void set_deltaTime(float value)
public int get_tapCount()
public void set_tapCount(int value)
public TouchPhase get_phase()
public void set_phase(TouchPhase value)
public float get_pressure()
public void set_pressure(float value)
public float get_maximumPossiblePressure()
public void set_maximumPossiblePressure(float value)
public TouchType get_type()
public void set_type(TouchType value)
public float get_altitudeAngle()
public void set_altitudeAngle(float value)
public float get_azimuthAngle()
public void set_azimuthAngle(float value)
public float get_radius()
public void set_radius(float value)
public float get_radiusVariance()
public void set_radiusVariance(float value)
}
public UnityEngine.TouchPhase : Enum {
public int value__
public TouchPhase Began
public TouchPhase Moved
public TouchPhase Stationary
public TouchPhase Ended
public TouchPhase Canceled
}
public UnityEngine.TouchType : Enum {
public int value__
public TouchType Direct
public TouchType Indirect
public TouchType Stylus
}
