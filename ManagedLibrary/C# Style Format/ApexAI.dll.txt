public Apex.AI.ActionBase : object {
public void Execute(IAIContext context)
}
public Apex.AI.ActionBase`1 : object {
private void Apex.AI.IAction.Execute(IAIContext context)
public void Execute(TContext context)
}
public Apex.AI.ActionWithOptions`1 : object {
protected List`1<IOptionScorer`1<TOption>> _scorers
public IList`1<IOptionScorer`1<TOption>> scorers
public IList`1<IOptionScorer`1<TOption>> get_scorers()
public TOption GetBest(IAIContext context, IList`1<TOption> options)
public void GetAllScores(IAIContext context, IList`1<TOption> options, IList`1<ScoredOption`1<TOption>> optionsBuffer)
public void Execute(IAIContext context)
public void CloneFrom(object other)
}
public Apex.AI.AICategoryAttribute : Attribute {
private string <name>k__BackingField
private int <sortOrder>k__BackingField
public string name
public int sortOrder
public void .ctor(string name)
public void .ctor(string name, int sortOrder)
public string get_name()
private void set_name(string value)
public int get_sortOrder()
private void set_sortOrder(int value)
}
public Apex.AI.AILinkAction : object {
private Guid _aiId
private ISelect _linkedAI
public Guid aiId
internal IUtilityAI linkedAI
public void .ctor(Guid aiId)
public Guid get_aiId()
public void set_aiId(Guid value)
internal IUtilityAI get_linkedAI()
public void Execute(IAIContext context)
public IAction Select(IAIContext context)
private void Apex.Serialization.IInitializeAfterDeserialization.Initialize(object rootObject)
}
public Apex.AI.AILoadBalancer : LoadBalancer {
public ILoadBalancer aiLoadBalancer
}
public Apex.AI.AIManager : object {
public string StorageFolder
private object initLock
private Dictionary`2<Guid, AIData> _aiLookup
private Dictionary`2<Guid, List`1<IUtilityAIClient>> _aiClients
public AIClientResolver GetAIClient
public IEnumerable`1<IUtilityAIClient> allClients
public IEnumerable`1<IUtilityAIClient> get_allClients()
public IList`1<IUtilityAIClient> GetAIClients(Guid aiId)
public IUtilityAI GetAI(Guid id)
public bool ExecuteAI(Guid id, IAIContext context)
public void EagerLoadAll()
public void Register(IUtilityAIClient client)
public void Unregister(IUtilityAIClient client)
private void ReadAndInit(AIData data)
private void EnsureLookup(bool init)
}
public Apex.AI.BasicExtensions : object {
public bool ExecuteOnce(IUtilityAI ai, IAIContext context)
internal IEnumerable`1<IQualifier> AllQualifiers(Selector source)
internal bool IsConnectedTo(Selector source, Selector target)
}
internal Apex.AI.Components.AIQuickStarts : object {
internal void LoadBalancer(GameObject target)
internal void UtilityAIClient(GameObject target, bool ensureLoadBalancer)
}
public Apex.AI.Components.IContextProvider {
public IAIContext GetContext(Guid aiId)
}
public Apex.AI.Components.IUtilityAIClient {
public IUtilityAI ai
public UtilityAIClientState state
public IUtilityAI get_ai()
public void set_ai(IUtilityAI value)
public UtilityAIClientState get_state()
public void Start()
public void Stop()
public void Execute()
public void Pause()
public void Resume()
}
public Apex.AI.Components.LoadBalancedUtilityAIClient : UtilityAIClient {
private ILoadBalancedHandle _lbHandle
private float <executionIntervalMin>k__BackingField
private float <executionIntervalMax>k__BackingField
private float <startDelayMin>k__BackingField
private float <startDelayMax>k__BackingField
public float executionIntervalMin
public float executionIntervalMax
public float startDelayMin
public float startDelayMax
private bool Apex.LoadBalancing.ILoadBalanced.repeat
public void .ctor(Guid aiId, IContextProvider contextProvider)
public void .ctor(IUtilityAI ai, IContextProvider contextProvider)
public void .ctor(Guid aiId, IContextProvider contextProvider, float executionIntervalMin, float executionIntervalMax, float startDelayMin, float startDelayMax)
public void .ctor(IUtilityAI ai, IContextProvider contextProvider, float executionIntervalMin, float executionIntervalMax, float startDelayMin, float startDelayMax)
public float get_executionIntervalMin()
public void set_executionIntervalMin(float value)
public float get_executionIntervalMax()
public void set_executionIntervalMax(float value)
public float get_startDelayMin()
public void set_startDelayMin(float value)
public float get_startDelayMax()
public void set_startDelayMax(float value)
private bool Apex.LoadBalancing.ILoadBalanced.get_repeat()
protected void OnStart()
protected void OnStop()
protected void OnPause()
protected void OnResume()
private Nullable`1<float> Apex.LoadBalancing.ILoadBalanced.ExecuteUpdate(float deltaTime, float nextInterval)
}
public Apex.AI.Components.UtilityAIClient : object {
private IUtilityAI _ai
private IContextProvider _contextProvider
private IRequireTermination _activeAction
private UtilityAIClientState <state>k__BackingField
public IUtilityAI ai
public UtilityAIClientState state
protected void .ctor(Guid aiId, IContextProvider contextProvider)
protected void .ctor(IUtilityAI ai, IContextProvider contextProvider)
public IUtilityAI get_ai()
public void set_ai(IUtilityAI value)
public UtilityAIClientState get_state()
protected void set_state(UtilityAIClientState value)
public void Start()
public void Stop()
public void Pause()
public void Resume()
public void Execute()
protected void OnStart()
protected void OnStop()
protected void OnPause()
protected void OnResume()
}
public Apex.AI.Components.UtilityAIClientQuickStart : ApexQuickStartComponent {
public GameObject Apply(bool isPrefab)
}
public Apex.AI.Components.UtilityAIClientState : Enum {
public int value__
public UtilityAIClientState Stopped
public UtilityAIClientState Running
public UtilityAIClientState Paused
}
public Apex.AI.Components.UtilityAIComponent : ExtendedMonoBehaviour {
internal UtilityAIConfig[] aiConfigs
private IUtilityAIClient[] _clients
private int _usedClients
private Action`1<IUtilityAIClient> OnNewAI
public IUtilityAIClient[] clients
internal void add_OnNewAI(Action`1<IUtilityAIClient> value)
internal void remove_OnNewAI(Action`1<IUtilityAIClient> value)
public IUtilityAIClient[] get_clients()
public IUtilityAIClient GetClient(Guid aiId)
public int AddClient(string aiId)
public int AddClient(Guid aiId)
public int AddClient(Guid aiId, IContextProvider contextProvider)
public int AddClient(Guid aiId, IContextProvider contextProvider, float intervalMin, float intervalMax, float startDelayMin, float startDelayMax)
private int AddClient(IUtilityAIClient client)
public bool RemoveClient(Guid aiId)
public bool RemoveClient(IUtilityAIClient client)
public void RemoveClientAt(int index)
public void Pause()
public void Resume()
internal void ToggleActive(int idx, bool active)
protected void OnStartAndEnable()
private void OnDisable()
private void Resize(T[]& array, int newCapacity)
}
internal Apex.AI.Components.UtilityAIConfig : object {
public string aiId
public float intervalMin
public float intervalMax
public float startDelayMin
public float startDelayMax
public bool isActive
}
public Apex.AI.CompositeAction : object {
protected List`1<IAction> _actions
private IConnectorAction _connectorAction
public IList`1<IAction> actions
internal IConnectorAction connectorAction
private bool Apex.AI.ICompositeAction.isConnector
public IList`1<IAction> get_actions()
internal IConnectorAction get_connectorAction()
internal void set_connectorAction(IConnectorAction value)
private bool Apex.AI.ICompositeAction.get_isConnector()
public void Execute(IAIContext context)
public IAction Select(IAIContext context)
public void CloneFrom(object other)
}
public Apex.AI.CompositeAllAboveThresholdQualifier : CompositeQualifier {
public float threshold
public float Score(IAIContext context, IList`1<IContextualScorer> scorers)
}
public Apex.AI.CompositeAllOrNothingQualifier : CompositeQualifier {
public float threshold
public float Score(IAIContext context, IList`1<IContextualScorer> scorers)
public bool Validate(IHTNContext context, IList`1<IContextualScorer> scorers)
}
public Apex.AI.CompositePriorityQualifier : CompositeQualifier {
public float threshold
public float Score(IAIContext context, IList`1<IContextualScorer> scorers)
}
public Apex.AI.CompositeQualifier : object {
protected List`1<IContextualScorer> _scorers
private bool <isDisabled>k__BackingField
private IAction <action>k__BackingField
public bool isDisabled
public IAction action
public IList`1<IContextualScorer> scorers
public bool get_isDisabled()
public void set_isDisabled(bool value)
public IAction get_action()
public void set_action(IAction value)
public IList`1<IContextualScorer> get_scorers()
public float Score(IAIContext context)
public float Score(IAIContext context, IList`1<IContextualScorer> scorers)
public bool Validate(IHTNContext context, IList`1<IContextualScorer> scorers)
public void CloneFrom(object other)
}
public Apex.AI.CompositeScoreAboveThresholdQualifier : CompositeQualifier {
public float threshold
public float Score(IAIContext context, IList`1<IContextualScorer> scorers)
}
public Apex.AI.CompositeScoreQualifier : CompositeQualifier {
public float Score(IAIContext context, IList`1<IContextualScorer> scorers)
}
public Apex.AI.ContextualScorerBase : object {
private bool <CanInvalidatePlan>k__BackingField
public float score
private bool <isDisabled>k__BackingField
public bool CanInvalidatePlan
public bool isDisabled
public bool get_CanInvalidatePlan()
public void set_CanInvalidatePlan(bool value)
public bool get_isDisabled()
public void set_isDisabled(bool value)
public float Score(IAIContext context)
}
public Apex.AI.ContextualScorerBase`1 : object {
private bool <CanInvalidatePlan>k__BackingField
public float score
private bool <isDisabled>k__BackingField
public bool CanInvalidatePlan
public bool isDisabled
public bool get_CanInvalidatePlan()
public void set_CanInvalidatePlan(bool value)
public bool get_isDisabled()
public void set_isDisabled(bool value)
private float Apex.AI.IContextualScorer.Score(IAIContext context)
public float Score(TContext context)
}
public Apex.AI.Core.HTN.IHTNDomain {
public IHTNContext PlannerContext
public IUtilityAI PlannerAi
public IUtilityAIClient PlannerAiClient
public IHTNContext get_PlannerContext()
public IUtilityAI get_PlannerAi()
public IUtilityAIClient get_PlannerAiClient()
public IAIContext GetContext(Guid aiId)
}
public Apex.AI.DefaultQualifier : QualifierBase {
private float <score>k__BackingField
public float score
public float get_score()
public void set_score(float value)
public float Score(IAIContext context)
}
public Apex.AI.FixedScoreQualifier : QualifierBase {
public float score
public float Score(IAIContext context)
}
public Apex.AI.FriendlyNameAttribute : Attribute {
private string <name>k__BackingField
private string <description>k__BackingField
private int <sortOrder>k__BackingField
public string name
public string description
public int sortOrder
public void .ctor(string name)
public void .ctor(string name, string description)
public string get_name()
private void set_name(string value)
public string get_description()
public void set_description(string value)
public int get_sortOrder()
public void set_sortOrder(int value)
}
public Apex.Ai.HTN.CompoundTaskSelector : Selector {
private DecompositionType _decomposition
private List`1<ICompositeScorer> _preconditions
private List`1<TaskQualifier> _taskQualifiers
private List`1<ITask> <Parents>k__BackingField
public List`1<ICompositeScorer> Preconditions
public DecompositionType Decomposition
public List`1<ITask> Parents
public List`1<ICompositeScorer> get_Preconditions()
public DecompositionType get_Decomposition()
public List`1<ITask> get_Parents()
public void Reset()
public float Decompose(DomainSelector domain, ITask parent, IHTNContext context, List`1& plan, Int32& score, int scoreThreshold, Int32& localCost)
private void RemovalAtFailedDecomposition(IHTNContext context, List`1& plan)
public void RemoveAppliedEffects(IHTNContext context, List`1& plan)
private bool _UpdateTasksQualifiers()
public void GetDecompositionCostFromIndex(Int32& cost, int index)
public void GetFullDecompositionCost(Int32& cost)
public bool ValidatePreconditions(IHTNContext context)
public IQualifier Select(IAIContext context, IList`1<IQualifier> qualifiers, IDefaultQualifier defaultQualifier)
}
public Apex.Ai.HTN.DecompositionType : Enum {
public int value__
public DecompositionType One
public DecompositionType All
}
public Apex.Ai.HTN.DomainSelector : Selector {
private List`1<TaskQualifier> _tasks
private List`1<PrimitiveTaskSelector> _plan
public int DecompositionScore
public IQualifier Select(IAIContext context, IList`1<IQualifier> qualifiers, IDefaultQualifier defaultQualifier)
private float ScoreOfDecomposition(List`1<float> scores)
private bool _UpdateTaskQualifiers()
}
public Apex.Ai.HTN.EffectBase`1 : object {
private void Apex.AI.IAction.Execute(IAIContext context)
public void Apply(IHTNContext context, bool fromPlanner, bool temporary)
private void Apex.Ai.HTN.IEffect.Reverse(IHTNContext context, bool fromPlanner)
public void Apply(TContext context, bool fromPlanner, bool temporary)
public void Reverse(TContext context, bool fromPlanner)
}
public Apex.Ai.HTN.IEffect {
public void Apply(IHTNContext context, bool fromPlanner, bool temporary)
public void Reverse(IHTNContext context, bool fromPlanner)
}
public Apex.Ai.HTN.IHTNContext {
public PlanResultType PlanResult
public PlanStateType PlanState
public Stack`1<PrimitiveTaskSelector> HtnPlan
public int DecompositionScore
public Dictionary`2<Guid, Stack`1<IEffect>> AppliedEffects
public Dictionary`2<Guid, Stack`1<IEffect>> AppliedExpectedEffects
public Byte[] WorldState
public Byte[] PreviousWorldState
public bool IsWorldStateDirty
public Stack`1[] WorldStateChanges
public List`1<PrimitiveTaskSelector> DebugPlan
public PrimitiveTaskSelector CurrentTask
public PlanResultType get_PlanResult()
public void set_PlanResult(PlanResultType value)
public PlanStateType get_PlanState()
public void set_PlanState(PlanStateType value)
public Stack`1<PrimitiveTaskSelector> get_HtnPlan()
public int get_DecompositionScore()
public void set_DecompositionScore(int value)
public Dictionary`2<Guid, Stack`1<IEffect>> get_AppliedEffects()
public Dictionary`2<Guid, Stack`1<IEffect>> get_AppliedExpectedEffects()
public Byte[] get_WorldState()
public Byte[] get_PreviousWorldState()
public bool get_IsWorldStateDirty()
public void set_IsWorldStateDirty(bool value)
public Stack`1[] get_WorldStateChanges()
public List`1<PrimitiveTaskSelector> get_DebugPlan()
public PrimitiveTaskSelector get_CurrentTask()
public void set_CurrentTask(PrimitiveTaskSelector value)
public void StartDomainDecomposition()
}
public Apex.Ai.HTN.IOperator {
public OperatorStateType Tick(IHTNContext context, PrimitiveTaskSelector task)
public void ApplyExpectedEffects(IHTNContext context, PrimitiveTaskSelector task)
public void Abort(IHTNContext context, PrimitiveTaskSelector task)
}
public Apex.Ai.HTN.ITask {
public List`1<ICompositeScorer> Preconditions
public List`1<ITask> Parents
public List`1<ICompositeScorer> get_Preconditions()
public void Reset()
public float Decompose(DomainSelector domain, ITask parent, IHTNContext context, List`1& plan, Int32& score, int scoreThreshold, Int32& localCost)
public void GetFullDecompositionCost(Int32& cost)
public void RemoveAppliedEffects(IHTNContext context, List`1& plan)
public List`1<ITask> get_Parents()
public bool ValidatePreconditions(IHTNContext context)
}
public Apex.Ai.HTN.OperatorBase`1 : object {
private void Apex.AI.IAction.Execute(IAIContext context)
private OperatorStateType Apex.Ai.HTN.IOperator.Tick(IHTNContext context, PrimitiveTaskSelector task)
private void Apex.Ai.HTN.IOperator.ApplyExpectedEffects(IHTNContext context, PrimitiveTaskSelector task)
private void Apex.Ai.HTN.IOperator.Abort(IHTNContext context, PrimitiveTaskSelector task)
public void Execute(TContext context)
public OperatorStateType Tick(TContext context, PrimitiveTaskSelector task)
public void Abort(TContext context, PrimitiveTaskSelector task)
public void ApplyExpectedEffects(TContext context, PrimitiveTaskSelector task)
}
public Apex.Ai.HTN.OperatorStateType : Enum {
public int value__
public OperatorStateType NotStarted
public OperatorStateType Running
public OperatorStateType Complete
public OperatorStateType Aborted
}
public Apex.Ai.HTN.PlanResultType : Enum {
public int value__
public PlanResultType NoPlan
public PlanResultType FoundNewPlan
public PlanResultType ReplacedPlan
public PlanResultType KeepCurrentPlan
}
public Apex.Ai.HTN.PlanStateType : Enum {
public int value__
public PlanStateType NoPlan
public PlanStateType Running
public PlanStateType Complete
public PlanStateType Aborted
}
public Apex.Ai.HTN.PrimitiveTaskAction : ActionBase {
private List`1<IAction> _actions
private string <Name>k__BackingField
public List`1<IAction> Actions
public string Name
public List`1<IAction> get_Actions()
public string get_Name()
internal void set_Name(string value)
public void Execute(IAIContext context)
}
public Apex.Ai.HTN.PrimitiveTaskSelector : Selector {
public string Name
private List`1<ICompositeScorer> _preconditions
private List`1<IOperator> _operators
private List`1<IEffect> _effects
private List`1<IEffect> _expectedEffects
private List`1<ITask> <Parents>k__BackingField
private bool <isBreakPoint>k__BackingField
private bool <breakPointHit>k__BackingField
private PrimitiveTaskStateType <State>k__BackingField
public List`1<ICompositeScorer> Preconditions
public List`1<IEffect> ExpectedEffects
public List`1<IOperator> Operators
public List`1<ITask> Parents
public bool isBreakPoint
public bool breakPointHit
public PrimitiveTaskAction PrimitiveTaskAction
public PrimitiveTaskStateType State
public List`1<ICompositeScorer> get_Preconditions()
public List`1<IEffect> get_ExpectedEffects()
public List`1<IOperator> get_Operators()
public List`1<ITask> get_Parents()
public bool get_isBreakPoint()
public void set_isBreakPoint(bool value)
public bool get_breakPointHit()
public void set_breakPointHit(bool value)
public PrimitiveTaskAction get_PrimitiveTaskAction()
public PrimitiveTaskStateType get_State()
public void set_State(PrimitiveTaskStateType value)
public void Reset()
public float Decompose(DomainSelector domain, ITask parent, IHTNContext context, List`1& plan, Int32& score, int scoreThreshold, Int32& localCost)
public void GetFullDecompositionCost(Int32& cost)
public void RemoveAppliedEffects(IHTNContext context, List`1& plan)
public bool ValidatePreconditions(IHTNContext context)
public IQualifier Select(IAIContext context, IList`1<IQualifier> qualifiers, IDefaultQualifier defaultQualifier)
}
public Apex.Ai.HTN.PrimitiveTaskStateType : Enum {
public int value__
public PrimitiveTaskStateType NotStarted
public PrimitiveTaskStateType Running
public PrimitiveTaskStateType Complete
public PrimitiveTaskStateType Aborted
}
public Apex.Ai.HTN.TaskQualifier : QualifierBase {
private ITask _task
private float _lastScore
public void Reset()
public float Decompose(DomainSelector domain, ITask parent, IHTNContext context, List`1& plan, Int32& score, int scoreThreshold, Int32& localCost)
private float DecomposeTask(DomainSelector domain, ITask parent, ITask task, IHTNContext context, List`1& plan, Int32& score, int scoreThreshold, Int32& localCost)
private ITask FindTaskOfQualifier()
public void GetFullDecompositionCost(Int32& cost)
public float TestPreconditions(ITask task, IHTNContext context)
public void RemoveAppliedEffects(IHTNContext context, List`1& plan)
public float Score(IAIContext context)
}
public Apex.Ai.HTN.WorldStateInfo : ValueType {
public byte Value
public bool Temporary
}
public Apex.AI.IAction {
public void Execute(IAIContext context)
}
public Apex.AI.ICanBeDisabled {
public bool isDisabled
public bool get_isDisabled()
public void set_isDisabled(bool value)
}
public Apex.AI.ICanClone {
public void CloneFrom(object other)
}
public Apex.AI.ICompositeAction {
public bool isConnector
public bool get_isConnector()
}
public Apex.AI.ICompositeScorer {
public IList`1<IContextualScorer> scorers
public IList`1<IContextualScorer> get_scorers()
public float Score(IAIContext context, IList`1<IContextualScorer> scorers)
public bool Validate(IHTNContext context, IList`1<IContextualScorer> scorers)
}
public Apex.AI.IConnectorAction {
public IAction Select(IAIContext context)
}
public Apex.AI.IContextualScorer {
public bool CanInvalidatePlan
public bool get_CanInvalidatePlan()
public void set_CanInvalidatePlan(bool value)
public float Score(IAIContext context)
}
public Apex.AI.IDefaultQualifier {
public float score
public float get_score()
public void set_score(float value)
}
public Apex.AI.IHaveFriendlyName {
public string friendlyName
public string description
public string get_friendlyName()
public string get_description()
}
public Apex.AI.IOptionScorer`1 {
public float Score(IAIContext context, T option)
}
public Apex.AI.IQualifier {
public IAction action
public IAction get_action()
public void set_action(IAction value)
public float Score(IAIContext context)
}
public Apex.AI.IRequireTermination {
public void Terminate(IAIContext context)
}
public Apex.AI.ISelect {
public Guid id
public Guid get_id()
public IAction Select(IAIContext context)
}
public Apex.AI.IUtilityAI {
public string name
public Selector rootSelector
public int selectorCount
public Selector Item
public string get_name()
public void set_name(string value)
public Selector get_rootSelector()
public void set_rootSelector(Selector value)
public int get_selectorCount()
public Selector get_Item(int idx)
public void AddSelector(Selector s)
public void RemoveSelector(Selector s)
public bool ReplaceSelector(Selector current, Selector replacement)
public Selector FindSelector(Guid id)
public void RegenerateIds()
}
public Apex.AI.MemberCategoryAttribute : Attribute {
private string <name>k__BackingField
private int <sortOrder>k__BackingField
public string name
public int sortOrder
public void .ctor(string name)
public void .ctor(string name, int sortOrder)
public string get_name()
private void set_name(string value)
public int get_sortOrder()
private void set_sortOrder(int value)
}
public Apex.AI.MemberDependencyAttribute : Attribute {
private string <dependsOn>k__BackingField
private ValueType <value>k__BackingField
private MaskMatch <match>k__BackingField
private CompareOperator <compare>k__BackingField
private bool <isMask>k__BackingField
public string dependsOn
public ValueType value
public MaskMatch match
public CompareOperator compare
public bool isMask
public void .ctor(string dependsOn, int value, MaskMatch match)
public void .ctor(string dependsOn, int value, CompareOperator compare)
public void .ctor(string dependsOn, float value, CompareOperator compare)
public void .ctor(string dependsOn, bool value)
public string get_dependsOn()
private void set_dependsOn(string value)
public ValueType get_value()
private void set_value(ValueType value)
public MaskMatch get_match()
private void set_match(MaskMatch value)
public CompareOperator get_compare()
private void set_compare(CompareOperator value)
public bool get_isMask()
private void set_isMask(bool value)
}
public Apex.AI.OptionScorerBase`1 : object {
private bool <isDisabled>k__BackingField
public bool isDisabled
public bool get_isDisabled()
public void set_isDisabled(bool value)
public float Score(IAIContext context, T option)
}
public Apex.AI.OptionScorerBase`2 : object {
private bool <isDisabled>k__BackingField
public bool isDisabled
public bool get_isDisabled()
public void set_isDisabled(bool value)
private float Apex.AI.IOptionScorer<T>.Score(IAIContext context, T option)
public float Score(TContext context, T option)
}
public Apex.AI.PrioritySelector : Selector {
public IQualifier Select(IAIContext context, IList`1<IQualifier> qualifiers, IDefaultQualifier defaultQualifier)
}
public Apex.AI.QualifierBase : object {
private bool <isDisabled>k__BackingField
private IAction <action>k__BackingField
public bool isDisabled
public IAction action
public bool get_isDisabled()
public void set_isDisabled(bool value)
public IAction get_action()
public void set_action(IAction value)
public float Score(IAIContext context)
}
public Apex.AI.QualifierBase`1 : object {
private bool <isDisabled>k__BackingField
private IAction <action>k__BackingField
public bool isDisabled
public IAction action
public bool get_isDisabled()
public void set_isDisabled(bool value)
public IAction get_action()
public void set_action(IAction value)
private float Apex.AI.IQualifier.Score(IAIContext context)
public float Score(TContext context)
}
public Apex.AI.ScoredOption`1 : ValueType {
private TOption _option
private float _score
public TOption option
public float score
public void .ctor(TOption option, float score)
public TOption get_option()
public float get_score()
}
public Apex.AI.ScoredOptionComparer`1 : ValueType {
public bool descending
public void .ctor(bool descending)
public int Compare(ScoredOption`1<T> x, ScoredOption`1<T> y)
}
public Apex.AI.ScoreSelector : Selector {
public IQualifier Select(IAIContext context, IList`1<IQualifier> qualifiers, IDefaultQualifier defaultQualifier)
}
public Apex.AI.Selector : object {
protected Guid _id
protected List`1<IQualifier> _qualifiers
protected IDefaultQualifier _defaultQualifier
public List`1<IQualifier> qualifiers
public IDefaultQualifier defaultQualifier
public Guid id
public List`1<IQualifier> get_qualifiers()
public IDefaultQualifier get_defaultQualifier()
public void set_defaultQualifier(IDefaultQualifier value)
public Guid get_id()
public IAction Select(IAIContext context)
public IQualifier Select(IAIContext context, IList`1<IQualifier> qualifiers, IDefaultQualifier defaultQualifier)
public void RegenerateId()
public void CloneFrom(object other)
}
public Apex.AI.SelectorAction : object {
private Guid _selectorId
private Selector _selector
public Selector selector
public void .ctor(Selector selector)
public Selector get_selector()
public void set_selector(Selector value)
public void Execute(IAIContext context)
public IAction Select(IAIContext context)
private void Apex.Serialization.IPrepareForSerialization.Prepare()
private void Apex.Serialization.IInitializeAfterDeserialization.Initialize(object rootObject)
}
public Apex.AI.Serialization.AIStorage : ScriptableObject {
public string description
public int version
public string aiId
public string configuration
public string editorConfiguration
private string Apex.AI.IHaveFriendlyName.friendlyName
private string Apex.AI.IHaveFriendlyName.description
private string Apex.AI.IHaveFriendlyName.get_friendlyName()
private string Apex.AI.IHaveFriendlyName.get_description()
public AIStorage Create(string aiId, string aiName)
}
public Apex.AI.TerminableActionBase`1 : ActionBase`1<TContext> {
private void Apex.AI.IRequireTermination.Terminate(IAIContext context)
public void Terminate(TContext context)
}
public Apex.AI.TerminableCompositeAction : CompositeAction {
public void Terminate(IAIContext context)
}
public Apex.AI.UtilityAI : object {
private Guid _rootSelectorId
private Guid _id
private List`1<Selector> _selectors
private Selector _rootSelector
private string <name>k__BackingField
public Guid id
public string name
public Selector rootSelector
public int selectorCount
public Selector Item
public Guid get_id()
public string get_name()
public void set_name(string value)
public Selector get_rootSelector()
public void set_rootSelector(Selector value)
public int get_selectorCount()
public Selector get_Item(int idx)
public void AddSelector(Selector s)
public void RemoveSelector(Selector s)
public bool ReplaceSelector(Selector current, Selector replacement)
public Selector FindSelector(Guid id)
public IAction Select(IAIContext context)
public void RegenerateIds()
private void Apex.Serialization.IPrepareForSerialization.Prepare()
private void Apex.Serialization.IInitializeAfterDeserialization.Initialize(object rootObject)
}
public Apex.AI.UtilityCurveEditorBaseScorer : ContextualScorerBase {
public AnimationCurve curve
public float GetCurveScore(float value)
}
internal Apex.AI.Visualization.ActionRequiresTerminationVisualizer : ActionVisualizer {
private IRequireTermination _action
internal void .ctor(IAction action, IQualifierVisualizer parent)
public void Terminate(IAIContext context)
}
internal Apex.AI.Visualization.ActionVisualizer : object {
private IAction _action
private IQualifierVisualizer _parent
internal IAction action
internal IQualifierVisualizer parent
private object Apex.AI.Visualization.IVisualizedObject.target
internal void .ctor(IAction action, IQualifierVisualizer parent)
internal IAction get_action()
internal IQualifierVisualizer get_parent()
private object Apex.AI.Visualization.IVisualizedObject.get_target()
internal void Init()
internal void Execute(IAIContext context, bool doCallback)
public void Execute(IAIContext context)
}
public Apex.AI.Visualization.ActionWithOptionsVisualizerComponent`2 : CustomGizmoGUIVisualizerComponent`2<T, IList`1<ScoredOption`1<TOption>>> {
private Dictionary`2<IAIContext, List`1<ScoredOption`1<TOption>>> _buffers
protected IList`1<ScoredOption`1<TOption>> GetDataForVisualization(T aiEntity, IAIContext context, Guid aiId)
protected IList`1<TOption> GetOptions(IAIContext context)
}
internal Apex.AI.Visualization.AILinkActionVisualizer : ConnectorActionVisualizer {
private UtilityAIVisualizer _linkedAI
internal void .ctor(AILinkAction action, IQualifierVisualizer parent)
internal void Init()
public IAction Select(IAIContext context)
}
public Apex.AI.Visualization.BreakpointCondition : object {
public float scoreThreshold
public CompareOperator compareOperator
public bool Evaluate(Nullable`1<float> score)
public string ToString()
}
internal Apex.AI.Visualization.CompositeActionVisualizer : ConnectorActionVisualizer {
private List`1<ActionVisualizer> _actions
private ConnectorActionVisualizer _connectorAction
private IList Apex.AI.Visualization.ICompositeVisualizer.children
private bool Apex.AI.ICompositeAction.isConnector
internal void .ctor(CompositeAction action, IQualifierVisualizer parent)
private IList Apex.AI.Visualization.ICompositeVisualizer.get_children()
private bool Apex.AI.ICompositeAction.get_isConnector()
internal void Init()
internal void Execute(IAIContext context, bool doCallback)
public IAction Select(IAIContext context)
private void Apex.AI.Visualization.ICompositeVisualizer.Add(object item)
public void Terminate(IAIContext context)
}
internal Apex.AI.Visualization.CompositeQualifierVisualizer : QualifierVisualizer {
private List`1<IContextualScorer> _scorers
private IList Apex.AI.Visualization.ICompositeVisualizer.children
internal void .ctor(ICompositeScorer q, SelectorVisualizer parent)
private IList Apex.AI.Visualization.ICompositeVisualizer.get_children()
public void Reset()
public float Score(IAIContext context)
private void Apex.AI.Visualization.ICompositeVisualizer.Add(object item)
}
internal Apex.AI.Visualization.ConnectorActionVisualizer : ActionVisualizer {
internal void .ctor(IAction action, IQualifierVisualizer parent)
internal void Execute(IAIContext context, bool doCallback)
public IAction Select(IAIContext context)
}
public Apex.AI.Visualization.ContextGizmoGUIVisualizerComponent : ContextVisualizerComponent {
public bool drawGizmos
public bool drawGUI
protected void DrawGUI(IAIContext context)
protected void DrawGizmos(IAIContext context)
private void OnDrawGizmos()
private void OnGUI()
}
public Apex.AI.Visualization.ContextGizmoGUIVisualizerComponent`1 : ContextGizmoGUIVisualizerComponent {
protected void DrawGizmos(IAIContext context)
protected void DrawGizmos(T context)
protected void DrawGUI(IAIContext context)
protected void DrawGUI(T context)
}
public Apex.AI.Visualization.ContextGizmoVisualizerComponent : ContextVisualizerComponent {
protected void DrawGizmos(IAIContext context)
private void OnDrawGizmos()
}
public Apex.AI.Visualization.ContextGizmoVisualizerComponent`1 : ContextGizmoVisualizerComponent {
protected void DrawGizmos(IAIContext context)
protected void DrawGizmos(T context)
}
public Apex.AI.Visualization.ContextGUIVisualizerComponent : ContextVisualizerComponent {
protected void DrawGUI(IAIContext context)
private void OnGUI()
}
public Apex.AI.Visualization.ContextGUIVisualizerComponent`1 : ContextGUIVisualizerComponent {
protected void DrawGUI(IAIContext context)
protected void DrawGUI(T context)
}
public Apex.AI.Visualization.ContextVisualizerComponent : MonoBehaviour {
internal string relevantAIId
internal SceneVisualizationMode mode
private Guid _relevantAIGuid
protected void GetContextsToVisualize(List`1<IAIContext> contextsBuffer, Guid relevantAIId)
protected void Awake()
private void OnEnable()
protected void DoDraw(Action`1<IAIContext> drawer)
}
public Apex.AI.Visualization.CustomGizmoGUIVisualizerComponent`2 : CustomVisualizerComponent`2<T, TData> {
public bool drawGizmos
public bool drawGUI
protected void DrawGUI(TData data)
protected void DrawGizmos(TData data)
private void OnDrawGizmos()
private void OnGUI()
private void DrawGizmoData(IAIContext context)
private void DrawGUIData(IAIContext context)
}
public Apex.AI.Visualization.CustomGizmoVisualizerComponent`2 : CustomVisualizerComponent`2<T, TData> {
protected void DrawGizmos(TData data)
private void OnDrawGizmos()
private void DrawGizmoData(IAIContext context)
}
public Apex.AI.Visualization.CustomGUIVisualizerComponent`2 : CustomVisualizerComponent`2<T, TData> {
protected void DrawGUI(TData data)
private void OnGUI()
private void DrawGUIData(IAIContext context)
}
public Apex.AI.Visualization.CustomVisualizerComponent`2 : ContextVisualizerComponent {
protected Dictionary`2<IAIContext, TData> _data
private bool <registerForDerivedTypes>k__BackingField
protected bool registerForDerivedTypes
protected bool get_registerForDerivedTypes()
protected void set_registerForDerivedTypes(bool value)
protected void Awake()
protected void OnEnable()
protected void OnDisable()
private void Apex.AI.Visualization.ICustomVisualizer.EntityUpdate(object aiEntity, IAIContext context, Guid aiId)
protected TData GetDataForVisualization(T aiEntity, IAIContext context, Guid aiId)
}
internal Apex.AI.Visualization.DefaultQualifierVisualizer : QualifierVisualizer {
private IDefaultQualifier _defQualifier
public float score
internal void .ctor(IDefaultQualifier q, SelectorVisualizer parent)
public float get_score()
public void set_score(float value)
}
public Apex.AI.Visualization.ICompositeVisualizer {
public IList children
public IList get_children()
public void Add(object item)
}
public Apex.AI.Visualization.ICustomVisualizer {
public void EntityUpdate(object aiEntity, IAIContext context, Guid aiId)
}
internal Apex.AI.Visualization.IQualifierVisualizer {
public SelectorVisualizer parent
public IQualifier qualifier
public bool isHighScorer
public bool isBreakPoint
public bool breakPointHit
public BreakpointCondition breakpointCondition
public Nullable`1<float> lastScore
public SelectorVisualizer get_parent()
public IQualifier get_qualifier()
public bool get_isHighScorer()
public bool get_isBreakPoint()
public void set_isBreakPoint(bool value)
public bool get_breakPointHit()
public void set_breakPointHit(bool value)
public BreakpointCondition get_breakpointCondition()
public void set_breakpointCondition(BreakpointCondition value)
public Nullable`1<float> get_lastScore()
public void Init()
public void Reset()
}
internal Apex.AI.Visualization.IVisualizedObject {
public object target
public object get_target()
}
internal Apex.AI.Visualization.QualifierVisualizer : object {
private IQualifier _qualifier
private ActionVisualizer _action
private SelectorVisualizer _parent
private bool <isBreakPoint>k__BackingField
private bool <breakPointHit>k__BackingField
private BreakpointCondition <breakpointCondition>k__BackingField
private Nullable`1<float> <lastScore>k__BackingField
public SelectorVisualizer parent
public IQualifier qualifier
public bool isDisabled
public IAction action
public bool isHighScorer
public bool isBreakPoint
public bool breakPointHit
public BreakpointCondition breakpointCondition
public Nullable`1<float> lastScore
private object Apex.AI.Visualization.IVisualizedObject.target
internal void .ctor(IQualifier q, SelectorVisualizer parent)
public SelectorVisualizer get_parent()
public IQualifier get_qualifier()
public bool get_isDisabled()
public void set_isDisabled(bool value)
public IAction get_action()
public void set_action(IAction value)
public bool get_isHighScorer()
public bool get_isBreakPoint()
public void set_isBreakPoint(bool value)
public bool get_breakPointHit()
public void set_breakPointHit(bool value)
public BreakpointCondition get_breakpointCondition()
public void set_breakpointCondition(BreakpointCondition value)
public Nullable`1<float> get_lastScore()
protected void set_lastScore(Nullable`1<float> value)
private object Apex.AI.Visualization.IVisualizedObject.get_target()
private void Apex.AI.Visualization.IQualifierVisualizer.Init()
public void Reset()
public float Score(IAIContext context)
}
public Apex.AI.Visualization.SceneVisualizationMode : Enum {
public int value__
public SceneVisualizationMode SingleSelectedGameObject
public SceneVisualizationMode AllSelectedGameObjects
public SceneVisualizationMode Custom
}
internal Apex.AI.Visualization.ScorerVisualizer : object {
private IContextualScorer _scorer
private CompositeQualifierVisualizer _parent
private string <lastScore>k__BackingField
public bool CanInvalidatePlan
public bool isDisabled
internal CompositeQualifierVisualizer parent
internal IContextualScorer scorer
internal string lastScore
internal void .ctor(IContextualScorer scorer, CompositeQualifierVisualizer parent)
public bool get_CanInvalidatePlan()
public void set_CanInvalidatePlan(bool value)
public bool get_isDisabled()
public void set_isDisabled(bool value)
internal CompositeQualifierVisualizer get_parent()
internal IContextualScorer get_scorer()
internal string get_lastScore()
private void set_lastScore(string value)
internal void Reset()
public float Score(IAIContext context)
}
internal Apex.AI.Visualization.SelectorActionVisualizer : ConnectorActionVisualizer {
private ISelect _connectedSelector
internal void .ctor(SelectorAction action, IQualifierVisualizer parent)
internal void Init()
public IAction Select(IAIContext context)
}
internal Apex.AI.Visualization.SelectorVisualizer : Selector {
private Selector _selector
private UtilityAIVisualizer _parent
private IQualifier <lastSelectedQualifier>k__BackingField
internal UtilityAIVisualizer parent
internal Guid id
internal Selector selector
internal IQualifier lastSelectedQualifier
private object Apex.AI.Visualization.IVisualizedObject.target
internal void .ctor(Selector s, UtilityAIVisualizer parent)
internal UtilityAIVisualizer get_parent()
internal Guid get_id()
internal Selector get_selector()
internal IQualifier get_lastSelectedQualifier()
private void set_lastSelectedQualifier(IQualifier value)
private object Apex.AI.Visualization.IVisualizedObject.get_target()
internal void ClearBreakpoints()
internal void Init()
internal void Reset()
public IQualifier Select(IAIContext context, IList`1<IQualifier> qualifiers, IDefaultQualifier defaultQualifier)
}
internal Apex.AI.Visualization.UtilityAIVisualizer : object {
private IUtilityAI _ai
private List`1<Action> _postExecute
private SelectorVisualizer _visualizerRootSelector
private List`1<SelectorVisualizer> _selectorVisualizers
private List`1<UtilityAIVisualizer> _linkedAIs
public Guid id
public string name
public IUtilityAI ai
internal List`1<UtilityAIVisualizer> linkedAIs
public Selector rootSelector
public int selectorCount
public Selector Item
internal void .ctor(IUtilityAI ai)
public Guid get_id()
public string get_name()
public void set_name(string value)
public IUtilityAI get_ai()
internal List`1<UtilityAIVisualizer> get_linkedAIs()
public Selector get_rootSelector()
public void set_rootSelector(Selector value)
public int get_selectorCount()
public Selector get_Item(int idx)
internal void PostExecute()
internal void Hook(Action postExecute)
internal void Unhook(Action postExecute)
public Selector FindSelector(Guid id)
internal IQualifierVisualizer FindQualifierVisualizer(IQualifier target)
internal ActionVisualizer FindActionVisualizer(IAction target)
private bool TryFindActionVisualizer(IAction source, IAction target, ActionVisualizer& result)
public IAction Select(IAIContext context)
internal void ClearBreakpoints()
private void Apex.AI.IUtilityAI.AddSelector(Selector s)
private void Apex.AI.IUtilityAI.RemoveSelector(Selector s)
private bool Apex.AI.IUtilityAI.ReplaceSelector(Selector current, Selector replacement)
private void Apex.AI.IUtilityAI.RegenerateIds()
internal void Reset()
}
public Apex.AI.Visualization.VisualizationManager : object {
private bool _visualizing
private Dictionary`2<Type, ICustomVisualizer> _visualizerLookup
private List`1<IContextProvider> _visualizedContextProviders
internal bool isVisualizing
internal IList`1<IContextProvider> visualizedContextProviders
internal bool get_isVisualizing()
internal IList`1<IContextProvider> get_visualizedContextProviders()
public void RegisterVisualizer(ICustomVisualizer visualizer, bool registerDerivedTypes)
public void RegisterVisualizer(Type forType, ICustomVisualizer visualizer, bool registerDerivedTypes)
public void UnregisterVisualizer(bool registeredDerivedTypes)
public void UnregisterVisualizer(Type forType, bool registeredDerivedTypes)
internal bool BeginVisualization()
internal void UpdateSelectedGameObjects(GameObject[] selected)
internal bool TryGetVisualizerFor(Type t, ICustomVisualizer& visualizer)
private IEnumerable`1<Type> GetDerived(Type forType)
}
public Apex.DataStructures.CircularStack`1 : object {
private T[] _array
private int _used
private int _head
public int count
public void .ctor(int capacity)
public int get_count()
public void Clear()
public T Peek()
public T Pop()
public void Push(T item)
}
public Apex.DataStructures.IQueue`1 {
public void Enqueue(T obj)
public T Dequeue()
}
public Apex.DataStructures.KeyedQueue`2 : object {
private HashSet`1<TKey> _hashset
private SimpleQueue`1<T> _queue
private Func`2<T, TKey> _keyProvider
private bool _strictSet
public int count
public T Item
public void .ctor(Func`2<T, TKey> keyProvider, bool strictSet)
public void .ctor(int capacity, Func`2<T, TKey> keyProvider, bool strictSet)
public int get_count()
public T get_Item(int idx)
public void Enqueue(T obj)
public T Dequeue()
public bool Contains(T obj)
public void Clear()
private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public Apex.DataStructures.SafeDynamicArray`1 : object {
private IDynamicArray`1<T> _array
public int count
public T Item
public void .ctor(IDynamicArray`1<T> array)
public int get_count()
public T get_Item(int idx)
public void Add(T item)
public bool Remove(T item)
public void RemoveAt(int index)
public void Clear()
public void EnsureCapacity(int capacity)
private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public Apex.DataStructures.SortedArray`1 : object {
private T[] _empty
private T[] _items
private int _capacity
private int _used
private IComparer`1<T> _sortComparer
public int count
public T Item
public void .ctor(IComparer`1<T> sortComparer)
public void .ctor(int capacity, IComparer`1<T> sortComparer)
public void .ctor(T[] source, IComparer`1<T> sortComparer)
public void .ctor(IIndexable`1<T> source, IComparer`1<T> sortComparer)
public void .ctor(IEnumerable`1<T> source, IComparer`1<T> sortComparer)
public int get_count()
public T get_Item(int idx)
public void Add(T item)
public void AddRange(IIndexable`1<T> items)
public void AddRange(IEnumerable`1<T> items)
public bool Remove(T item)
public void RemoveAt(int index)
public void Clear()
public void EnsureCapacity(int capacity)
private void Resize(int newCapacity)
private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
