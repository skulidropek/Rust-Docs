public BaseEditorExAttribute : PropertyAttribute {
public string isTrue
public string isFalse
}
public ButtonAttribute : BaseEditorExAttribute {
public string Label
public void .ctor(string name)
}
public CC_AnalogTV : CC_Base {
public float phase
public bool grayscale
public float noiseIntensity
public float scanlinesIntensity
public float scanlinesCount
public float distortion
public float cubicDistortion
public float scale
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Base : MonoBehaviour {
public Shader shader
protected Material _material
protected Material material
protected void Start()
protected Material get_material()
protected void OnDisable()
}
public CC_BleachBypass : CC_Base {
public float amount
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Blend : CC_Base {
public Texture texture
public float amount
public int mode
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_BrightnessContrastGamma : CC_Base {
public float redCoeff
public float greenCoeff
public float blueCoeff
public float brightness
public float contrast
public float gamma
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_ChannelMixer : CC_Base {
public float redR
public float redG
public float redB
public float greenR
public float greenG
public float greenB
public float blueR
public float blueG
public float blueB
public float constantR
public float constantG
public float constantB
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Convolution3x3 : CC_Base {
public Vector3 kernelTop
public Vector3 kernelMiddle
public Vector3 kernelBottom
public float divisor
public float amount
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_CrossStitch : CC_Base {
public int size
public float brightness
public bool invert
public bool pixelize
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_DoubleVision : CC_Base {
public Vector2 displace
public float amount
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_FastVignette : CC_Base {
public float sharpness
public float darkness
public bool desaturate
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Frost : CC_Base {
public float scale
public float sharpness
public float darkness
public bool enableVignette
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_GradientRamp : CC_Base {
public Texture rampTexture
public float amount
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Grayscale : CC_Base {
public float redLuminance
public float greenLuminance
public float blueLuminance
public float amount
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Halftone : CC_Base {
public float density
public int mode
public bool antialiasing
public bool showOriginal
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_HueSaturationValue : CC_Base {
public float hue
public float saturation
public float value
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Led : CC_Base {
public float scale
public bool automaticRatio
public float ratio
public float brightness
public int mode
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Levels : CC_Base {
public int mode
public float inputMinL
public float inputMaxL
public float inputGammaL
public float inputMinR
public float inputMaxR
public float inputGammaR
public float inputMinG
public float inputMaxG
public float inputGammaG
public float inputMinB
public float inputMaxB
public float inputGammaB
public float outputMinL
public float outputMaxL
public float outputMinR
public float outputMaxR
public float outputMinG
public float outputMaxG
public float outputMinB
public float outputMaxB
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_LookupFilter : CC_Base {
public Texture lookupTexture
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Negative : CC_Base {
public float amount
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_PhotoFilter : CC_Base {
public Color color
public float density
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Pixelate : CC_Base {
public float scale
public bool automaticRatio
public float ratio
public int mode
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Posterize : CC_Base {
public int levels
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_RadialBlur : CC_Base {
public float amount
public Vector2 center
public int quality
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_RGBSplit : CC_Base {
public float amount
public float angle
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Sharpen : CC_Base {
public float strength
public float clamp
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_SharpenAndVignette : CC_Base {
public bool applySharpen
public float strength
public float clamp
public bool applyVignette
public float sharpness
public float darkness
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Threshold : CC_Base {
public float threshold
public bool useNoise
public float noiseRange
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Vibrance : CC_Base {
public float amount
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public CC_Wiggle : CC_Base {
public float timer
public float speed
public float scale
private void Update()
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public ComponentHelpAttribute : BaseEditorExAttribute {
public string help
public void .ctor(string help)
}
public Facepunch.Integration : BaseIntegration {
private Auth _auth
private Ticket _steamTicket
public string PublicKey
public string Bucket
public string UserId
public string UserName
public Auth Auth
public bool DebugOutput
public string get_PublicKey()
public string get_Bucket()
public void OnManifestFile(Manifest manifest)
public string get_UserId()
public string get_UserName()
public Auth get_Auth()
public bool get_DebugOutput()
}
public Facepunch.RandomUsernames : object {
public String[] All
public string Get(int v)
public string Get(ulong v)
}
public Facepunch.UnityButtons : object {
private bool isRegistered
public void Register()
}
public FreeImage : object {
public UInt32 FI_RGBA_RED_MASK
public UInt32 FI_RGBA_GREEN_MASK
public UInt32 FI_RGBA_BLUE_MASK
public string FreeImageLibrary
public Format GetFIFFromFilename(string filename)
public Bitmap Load(Format fif, string filename, LoadFlags flags)
public bool Save(Format fif, Bitmap bitmap, string filename, SaveFlags flags)
public Bitmap Allocate(int width, int height, int bpp, UInt32 red_mask, UInt32 green_mask, UInt32 blue_mask)
public void Unload(Bitmap bitmap)
public IntPtr GetBits(Bitmap bitmap)
public UInt32 GetBPP(Bitmap bitmap)
public UInt32 GetWidth(Bitmap bitmap)
public UInt32 GetHeight(Bitmap bitmap)
public UInt32 GetLine(Bitmap bitmap)
public UInt32 GetPitch(Bitmap bitmap)
public bool GetPixelColor(Bitmap bitmap, UInt32 x, UInt32 y, RGBQuad& value)
public Bitmap Rescale(Bitmap bitmap, int dst_width, int dst_height, Filter filter)
public Bitmap ConvertTo24Bits(Bitmap bitmap)
public Bitmap ConvertTo32Bits(Bitmap bitmap)
}
public HudMenuInput : ListComponent`1<HudMenuInput> {
private InputField inputField
public bool AnyActive()
private void Start()
private bool IsCurrentlyActive()
}
public IImageEffect {
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public ImageEffectRedirect : MonoBehaviour {
public IImageEffect target
private void OnRenderImage(RenderTexture src, RenderTexture dst)
}
public ISONoise : PostEffectsBase {
public float monochromeTiling
public FilterMode filterMode
public Texture2D noiseTexture
public Shader noiseShader
private Material noiseMaterial
public bool CheckResources()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
private void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
}
public JSON.Array : object {
private List`1<Value> values
public Value Item
public int Length
public void .ctor(Array array)
public void Add(Value value)
public Value get_Item(int index)
public void set_Item(int index, Value value)
public int get_Length()
public string ToString()
public IEnumerator`1<Value> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public Array Parse(string jsonString)
public void Clear()
public void Remove(int index)
public Array op_Addition(Array lhs, Array rhs)
}
public JSON.Extensions : object {
public T Pop(List`1<T> list)
}
public JSON.Object : object {
private IDictionary`2<string, Value> values
public Value Item
public void .ctor(Object other)
public bool ContainsKey(string key)
public Value GetValue(string key)
public string GetString(string key, string strDEFAULT)
public double GetNumber(string key, double iDefault)
public int GetInt(string key, int iDefault)
public float GetFloat(string key, float iDefault)
public Object GetObject(string key)
public bool GetBoolean(string key, bool bDefault)
public Array GetArray(string key)
public Value get_Item(string key)
public void set_Item(string key, Value value)
public void Add(string key, Value value)
public void Add(KeyValuePair`2<string, Value> pair)
public Object Parse(string jsonString)
private int SkipWhitespace(string str, int pos)
private string ParseString(string str, Int32& startPosition)
private double ParseNumber(string str, Int32& startPosition)
private Object Fail(char expected, int position)
private Object Fail(string expected, int position)
public string ToString()
public IEnumerator`1<KeyValuePair`2<string, Value>> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public void Clear()
public void Remove(string key)
}
public JSON.Value : object {
private ValueType <Type>k__BackingField
private string <Str>k__BackingField
private double <Number>k__BackingField
private Object <Obj>k__BackingField
private Array <Array>k__BackingField
private bool <Boolean>k__BackingField
private Value <Parent>k__BackingField
public ValueType Type
public string Str
public double Number
public Object Obj
public Array Array
public bool Boolean
public Value Parent
public void .ctor(ValueType type)
public void .ctor(string str)
public void .ctor(double number)
public void .ctor(Object obj)
public void .ctor(Array array)
public void .ctor(bool boolean)
public void .ctor(Value value)
public ValueType get_Type()
private void set_Type(ValueType value)
public string get_Str()
public void set_Str(string value)
public double get_Number()
public void set_Number(double value)
public Object get_Obj()
public void set_Obj(Object value)
public Array get_Array()
public void set_Array(Array value)
public bool get_Boolean()
public void set_Boolean(bool value)
public Value get_Parent()
public void set_Parent(Value value)
public Value op_Implicit(string str)
public Value op_Implicit(double number)
public Value op_Implicit(Object obj)
public Value op_Implicit(Array array)
public Value op_Implicit(bool boolean)
public string ToString()
}
public JSON.ValueType : Enum {
public int value__
public ValueType String
public ValueType Number
public ValueType Object
public ValueType Array
public ValueType Boolean
public ValueType Null
}
public KeyBinding : ListComponent`1<KeyBinding> {
public bool IsOpen
public bool get_IsOpen()
}
public KeywordUtil : object {
public void EnsureKeywordState(string keyword, bool state)
public void EnsureKeywordState(Material mat, string keyword, bool state)
}
public Kino.Motion : MonoBehaviour {
private ExposureMode _exposureMode
private int _shutterSpeed
private float _exposureTimeScale
private SampleCount _sampleCount
private int _sampleCountValue
private float _maxBlurRadius
private DebugMode _debugMode
private Material _prefilterMaterial
private Material _reconstructionMaterial
public ExposureMode exposureMode
public int shutterSpeed
public float exposureTimeScale
public SampleCount sampleCount
public int sampleCountValue
public float maxBlurRadius
private float VelocityScale
public ExposureMode get_exposureMode()
public void set_exposureMode(ExposureMode value)
public int get_shutterSpeed()
public void set_shutterSpeed(int value)
public float get_exposureTimeScale()
public void set_exposureTimeScale(float value)
public SampleCount get_sampleCount()
public void set_sampleCount(SampleCount value)
public int get_sampleCountValue()
public void set_sampleCountValue(int value)
public float get_maxBlurRadius()
public void set_maxBlurRadius(float value)
private float get_VelocityScale()
private RenderTexture GetTemporaryRT(Texture source, int divider, RenderTextureFormat format, RenderTextureReadWrite rw)
private void ReleaseTemporaryRT(RenderTexture rt)
private void OnEnable()
private void OnDisable()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public LensDirtiness : MonoBehaviour {
private Shader Shader_Dirtiness
private Material Material_Dirtiness
private RenderTexture RTT_BloomThreshold
private RenderTexture RTT_1
private RenderTexture RTT_2
private RenderTexture RTT_3
private RenderTexture RTT_4
private RenderTexture RTT_Bloom_1
private RenderTexture RTT_Bloom_2
private int ScreenX
private int ScreenY
public bool ShowScreenControls
public bool SceneTintsBloom
public Texture2D DirtinessTexture
public float gain
public float threshold
public float BloomSize
public float Dirtiness
public Color BloomColor
private void OnEnable()
private void SetKeyword()
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public MegaWindType : Enum {
public int value__
public MegaWindType Planar
public MegaWindType Spherical
}
public MegaWire : MonoBehaviour {
public bool Rebuild
public float fudge
public MegaWireStrandedMesher strandedMesher
public float spring
public float damp
public float timeStep
public float Mass
public Vector3 gravity
public float airdrag
public float massRand
public bool doCollisions
public bool useraycast
public LayerMask collisionmask
public float collisionoff
public float collisiondist
public float floor
public int points
public int iters
public int frameWait
public int frameNum
public bool stiffnessSprings
public float stiffrate
public float stiffdamp
public bool lengthConstraints
public MegaWireSolver verletsolver
public bool showphysics
public bool showconnections
public bool showmeshparams
public List`1<MegaWireConnectionDef> connections
public List`1<MegaWireSpan> spans
public Vector3 windDir
public float windFrc
public float windEffect
public MegaWireWind wind
public Material material
public bool uselod
public float disableDist
public bool disableOnNotVisible
public float lodreducesides
public float lodreducesegs
public GameObject startObj
public float startAlpha
public Vector3 startRot
public Vector3 startOffset
public GameObject endObj
public float endAlpha
public Vector3 endRot
public Vector3 endOffset
public List`1<MegaWireLodLevel> lods
public bool hidespans
public bool disableOnDistance
public float distfromcamera
public float rbodyforce
public bool Enabled
public bool ShowWire
public float awakeTime
public bool displayGizmo
public Color gizmoColor
public List`1<Transform> poles
public float stretch
public float warmPhysicsTime
public bool builduvs
public bool DisableAll
public float startTime
public bool showWindParams
public bool showPhysicsAdv
public bool showAttach
public void Copy(MegaWire from, MegaWireConnectionHelper helper)
public MegaWire Create(MegaWire wire, List`1<GameObject> objs, Material mat, string name, MegaWire copyfrom, float wiresize, float str)
public void ChangeStretch(float stretch)
public int GetVertexCount()
public void SetHidden(bool hide)
public void SetSelection(List`1<GameObject> objs, bool add)
public void UpdateOffsets()
public void Init()
private void WireUpdate(float t)
public void RunPhysics(float t)
public Vector3 SetWeight(float alpha, int strand, float weight, bool snap)
public Vector3 GetPos(float alpha, int strand, bool snap)
private void Start()
public void SetWireVisible(bool show)
public void RebuildWire()
private void LateUpdate()
}
public MegaWireAttach : MonoBehaviour {
public MegaWire wire
public int span
public int connection
public float alpha
public Vector3 offset
public bool align
public Vector3 rotate
private Quaternion locrot
private Matrix4x4 wtm
public Transform parent
private void LateUpdate()
}
public MegaWireConnection : object {
public Vector3 inOffset
public Vector3 outOffset
public float radius
public Vector3 windFrc
public Transform start
public Transform end
public float WireLength
private Matrix4x4 wtm
public List`1<MegaWireMass> masses
public List`1<MegaWireSpring> springs
public List`1<MegaWirePointConstraint> constraints
public List`1<MegaWireLengthConstraint> lenconstraints
public Vector3[] masspos
public void SetEndConstraintActive(int index, bool active, float time)
public void Update(MegaWire wire, float timeStep)
public void Init(MegaWire wire)
public void MoveMasses(MegaWire wire)
public Vector3 Interp(float t)
public Vector3 Velocity(float t)
public Vector3 LinInterp(float t)
public Matrix4x4 GetDeformMat(float alpha)
public Matrix4x4 GetDeformMatLin(float alpha)
}
public MegaWireConnectionDef : object {
public Vector3 inOffset
public Vector3 outOffset
public float radius
public void .ctor(MegaWireConnectionDef src)
}
public MegaWireConnectionHelper : MonoBehaviour {
public List`1<MegaWireConnectionDef> connections
public bool showgizmo
}
public MegaWireConstraint : object {
public bool active
public float reactivate
public float rtime
public void Apply(MegaWireConnection soft)
}
public MegaWireGizmoType : Enum {
public int value__
public MegaWireGizmoType Waypoint
public MegaWireGizmoType Pole
public MegaWireGizmoType Both
}
public MegaWireHanger : MonoBehaviour {
public MegaWire wire
public float alpha
public int strand
public float offset
public float weight
public bool align
public Vector3 rotate
private Quaternion locrot
private Matrix4x4 wtm
public Transform parent
private void LateUpdate()
}
public MegaWireLengthConstraint : MegaWireConstraint {
public int p1
public int p2
public float length
private Vector3 moveVector
public void .ctor(int _p1, int _p2, float _len)
public void Apply(MegaWireConnection soft)
}
public MegaWireLodLevel : object {
public float distance
public int sides
public float segsperunit
}
public MegaWireMass : object {
public Vector3 pos
public Vector3 last
public Vector3 force
public Vector3 vel
public Vector3 posc
public Vector3 velc
public Vector3 forcec
public float mass
public float oneovermass
public bool collide
public void .ctor(float m, Vector3 p)
}
public MegaWireMesher : object {
public bool show
private Vector3[] tan1
private Vector3[] tan2
public void BuildMesh(MegaWire rope, MegaWireSpan span)
public void BuildTangents(Mesh mesh, Vector3[] verts, Vector2[] uvs, Vector3[] norms, Int32[] tris)
}
public MegaWireOrbit : MonoBehaviour {
public GameObject target
private MeshRenderer render
private SkinnedMeshRenderer srender
private MeshFilter filter
public float distance
public float xSpeed
public float ySpeed
public float zSpeed
public float yMinLimit
public float yMaxLimit
public float xMinLimit
public float xMaxLimit
public float x
public float y
private Vector3 center
public bool Dynamic
public Vector3 offset
public Vector3 EditTest
private Vector3 tpos
private float t
public float trantime
public float vx
public float vy
public float vz
public float nx
public float ny
public float nz
public float delay
public float delayz
public float mindist
private void Start()
private float easeInOutQuint(float start, float end, float value)
private float easeInQuad(float start, float end, float value)
private float easeInSine(float start, float end, float value)
public void NewTarget(GameObject targ)
private void LateUpdate()
private float ClampAngle(float angle, float min, float max)
private void OnGUI()
}
public MegaWirePerlin : object {
private MegaWirePerlin instance
private Int32[] p
private Int32[] permutation
public MegaWirePerlin Instance
public MegaWirePerlin get_Instance()
public int Perm(int i)
public float Noise(float x)
public float Noise(float x, float y)
public float Noise(float x, float y, float z)
private float fade(float t)
private float lerp(float t, float a, float b)
private float grad(int hash, float x)
private float grad(int hash, float x, float y)
private float grad(int hash, float x, float y, float z)
public float fBm1(float x, float H, float lacunarity, float octaves)
public float fBm1(Vector3 vertex, float H, float lacunarity, float octaves)
public float fBm1(float x, float y, float z, float H, float lacunarity, float octaves)
}
public MegaWirePlantPolesList : MonoBehaviour {
public List`1<Vector3> waypoints
public bool closed
public int curve
public float start
public float length
public float spacing
public bool update
public GameObject pole
public Vector3 rotate
public float offset
public bool conform
public float upright
public bool addwires
public List`1<GameObject> poles
public MegaWire copyfrom
public Material material
public Vector3 positionVariation
public Vector3 rotateVariation
public Vector3 scaleVariation
public float spacingVariation
public bool reverseWire
public int seed
public float wireSizeMult
public float stretch
public bool showgizmo
public bool showgizmoparams
public MegaWireGizmoType gizmoType
public float arrowwidth
public float arrowlength
public float vertStart
public float vertLength
public float arrowoff
public float dashdist
public Color arrowCol
public Color lineCol
public Color otherCol
public Color dashCol
public MegaWireUnits units
public float unitsScale
private List`1<MegaWireSection> knots
private float pathlength
public Vector3 Interpolate(float alpha)
public Vector3 InterpCurve3D(float alpha)
private float CalcLength()
public void Rebuild()
}
public MegaWirePointConstraint : MegaWireConstraint {
public int p1
public Vector3 offset
public Transform obj
public Vector3 ps
public Vector3 tp
public void .ctor(int _p1, Transform trans, Vector3 off)
private Vector3 easeInOutSine(Vector3 start, Vector3 end, float value)
public void ReActivate(MegaWireConnection soft, float t)
public void Apply(MegaWireConnection soft)
}
public MegaWireSolver : object {
public void doIntegration1(MegaWireConnection rope, MegaWire wire, float dt)
public void Solve()
}
public MegaWireSolverVertlet : MegaWireSolver {
private void doCalculateForces(MegaWireConnection rope, MegaWire wire)
private void DoConstraints(MegaWireConnection rope, MegaWire wire)
public void doIntegration1(MegaWireConnection rope, MegaWire wire, float dt)
private void DoCollisions(MegaWireConnection rope, MegaWire wire)
}
public MegaWireSpan : MonoBehaviour {
public bool visible
public bool on
public Transform start
public Transform end
public List`1<MegaWireConnection> connections
public Mesh mesh
public float WireLength
public bool AllowUpdates
public bool buildmesh
public float time
public Matrix4x4 startTm
public Matrix4x4 endTm
public int vcount
public Vector3[] verts
public Vector2[] uvs
public Int32[] tris
public Vector3[] norms
private void OnBecameVisible()
private void OnBecameInvisible()
public void Init(MegaWire wire)
public void UpdateSpan(MegaWire wire, float ts)
public void MoveMasses(MegaWire wire)
public void BuildMesh(MegaWire wire)
}
public MegaWireSpring : object {
public int p1
public int p2
public float restlen
public float initlen
public float ks
public float kd
public float len
public void .ctor(int _p1, int _p2, float _ks, float _kd, MegaWireConnection con)
public void .ctor(int _p1, int _p2, float _ks, float _kd, MegaWireConnection con, float stretch)
public void doCalculateSpringForce(MegaWireConnection hose)
public void doCalculateSpringForce1(MegaWireConnection mod)
}
public MegaWireStrandedMesher : MegaWireMesher {
private Matrix4x4 wtm
public int sides
public int segments
public float uvtwist
public float uvtilex
public float uvtiley
public int strands
public float offset
public float Twist
public bool cap
public float strandRadius
public float SegsPerUnit
public float TwistPerUnit
public bool calcBounds
public bool calcTangents
public bool genuv
public bool linInterp
private Vector3[] cross
private Vector3[] cnorms
public void Copy(MegaWireStrandedMesher src)
public void BuildMesh(MegaWire rope, MegaWireSpan span)
private void BuildCrossSection(float rad)
}
public MegaWireUnits : Enum {
public int value__
public MegaWireUnits Meters
public MegaWireUnits Centimeters
public MegaWireUnits Feet
public MegaWireUnits Inches
public MegaWireUnits Yards
}
public MegaWireWatch : MonoBehaviour {
public bool realtime
public GameObject watch
public Matrix4x4 mat
private void Start()
private void Update()
}
public MegaWireWind : MonoBehaviour {
public float decay
public float turb
public float strength
public MegaWindType type
public float freq
public float scale
public Vector3 force
private MegaWirePerlin iperlin
private float forceScaleFactor
public Vector3 gizmoSize
public int divs
public bool displayGizmo
public float gizscale
public Vector3 gizmopos
public Color gizmocol
public bool dirnoise
public float dirfreq
public float dirphase
public Vector3 dirscale
public bool strengthnoise
public float strengthfreq
public float strengthphase
public float strengthscale
public Vector3 dir
public float t
private Vector3 rotseed
private float strengthval
private Vector3 dirval
private float RTurbulence(Vector3 p, float freq)
public Vector3 Force(Vector3 pos)
private void Update()
}
public NeedsKeyboard : ListComponent`1<NeedsKeyboard> {
public UnityEvent onNoKeysDown
private bool watchForNoKeys
public bool AnyActive()
protected void OnEnable()
public void Update()
}
public NeedsMouseButtons : ListComponent`1<NeedsMouseButtons> {
public bool AnyActive()
}
public Network.Net : object {
public Server sv
}
public ParticleScaler : MonoBehaviour {
public float particleScale
public bool alsoScaleGameobject
private void Start()
private void Update()
private void ScaleShurikenSystems(float scaleFactor)
private void ScaleLegacySystems(float scaleFactor)
private void ScaleTrailRenderers(float scaleFactor)
}
public RustNative.Graphics : object {
public IntPtr GetRenderEventFunc()
}
public ScreenOverlayEx : PostEffectsBase {
public OverlayBlendMode blendMode
public float intensity
public Texture texture
public Texture normals
public Shader overlayShader
private Material overlayMaterial
public bool CheckResources()
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public TOD_AmbientParameters : object {
public TOD_AmbientType Mode
public float Saturation
public float UpdateInterval
}
public TOD_AmbientType : Enum {
public int value__
public TOD_AmbientType None
public TOD_AmbientType Color
public TOD_AmbientType Gradient
public TOD_AmbientType Spherical
}
public TOD_Animation : MonoBehaviour {
public float CameraMovement
public float WindDegrees
public float WindSpeed
private Vector3 <CloudUV>k__BackingField
private TOD_Sky sky
public Vector3 CloudUV
public Vector3 OffsetUV
public Vector3 get_CloudUV()
public void set_CloudUV(Vector3 value)
public Vector3 get_OffsetUV()
protected void Start()
protected void Update()
}
public TOD_AtmosphereParameters : object {
public float RayleighMultiplier
public float MieMultiplier
public float Brightness
public float Contrast
public float Directionality
public float Fogginess
}
public TOD_Audio : MonoBehaviour {
private AudioSource audioComponent
protected float GetVolume()
protected void SetVolume(float value)
protected void Awake()
}
public TOD_AudioAtDay : TOD_Audio {
public float fadeTime
private float lerpTime
private float maxVolume
protected void Start()
protected void Update()
}
public TOD_AudioAtNight : TOD_Audio {
public float fadeTime
private float lerpTime
private float maxVolume
protected void Start()
protected void Update()
}
public TOD_AudioAtTime : TOD_Audio {
public AnimationCurve Volume
protected void Update()
}
public TOD_Billboard : MonoBehaviour {
public float Altitude
public float Azimuth
public float Distance
public float Size
private T GetComponentInParents()
}
public TOD_Camera : MonoBehaviour {
public TOD_Sky sky
public bool DomePosToCamera
public Vector3 DomePosOffset
public bool DomeScaleToFarClip
public float DomeScaleFactor
private Camera cameraComponent
private Transform cameraTransform
public bool HDR
public float NearClipPlane
public float FarClipPlane
public Color BackgroundColor
public bool get_HDR()
public float get_NearClipPlane()
public float get_FarClipPlane()
public Color get_BackgroundColor()
protected void OnValidate()
protected void OnEnable()
protected void Update()
protected void OnPreCull()
private TOD_Sky FindSky(bool fallback)
public void DoDomeScaleToFarClip()
public void DoDomePosToCamera()
}
public TOD_CloudParameters : object {
public float Size
public float Opacity
public float Coverage
public float Sharpness
public float Coloring
public float Attenuation
public float Saturation
public float Scattering
public float Brightness
}
public TOD_CloudQualityType : Enum {
public int value__
public TOD_CloudQualityType Low
public TOD_CloudQualityType Medium
public TOD_CloudQualityType High
}
public TOD_ColorOutputType : Enum {
public int value__
public TOD_ColorOutputType Raw
public TOD_ColorOutputType Dithered
}
public TOD_ColorRangeType : Enum {
public int value__
public TOD_ColorRangeType Auto
public TOD_ColorRangeType HDR
public TOD_ColorRangeType LDR
}
public TOD_ColorSpaceType : Enum {
public int value__
public TOD_ColorSpaceType Auto
public TOD_ColorSpaceType Linear
public TOD_ColorSpaceType Gamma
}
public TOD_Components : MonoBehaviour {
public GameObject Space
public GameObject Stars
public GameObject Sun
public GameObject Moon
public GameObject Atmosphere
public GameObject Clear
public GameObject Clouds
public GameObject Billboards
public GameObject Light
private Transform <DomeTransform>k__BackingField
private Transform <SpaceTransform>k__BackingField
private Transform <StarTransform>k__BackingField
private Transform <SunTransform>k__BackingField
private Transform <MoonTransform>k__BackingField
private Transform <AtmosphereTransform>k__BackingField
private Transform <ClearTransform>k__BackingField
private Transform <CloudTransform>k__BackingField
private Transform <BillboardTransform>k__BackingField
private Transform <LightTransform>k__BackingField
private Renderer <SpaceRenderer>k__BackingField
private Renderer <StarRenderer>k__BackingField
private Renderer <SunRenderer>k__BackingField
private Renderer <MoonRenderer>k__BackingField
private Renderer <AtmosphereRenderer>k__BackingField
private Renderer <ClearRenderer>k__BackingField
private Renderer <CloudRenderer>k__BackingField
private Renderer[] <BillboardRenderers>k__BackingField
private MeshFilter <SpaceMeshFilter>k__BackingField
private MeshFilter <StarMeshFilter>k__BackingField
private MeshFilter <SunMeshFilter>k__BackingField
private MeshFilter <MoonMeshFilter>k__BackingField
private MeshFilter <AtmosphereMeshFilter>k__BackingField
private MeshFilter <ClearMeshFilter>k__BackingField
private MeshFilter <CloudMeshFilter>k__BackingField
private MeshFilter[] <BillboardMeshFilters>k__BackingField
private Material <SpaceMaterial>k__BackingField
private Material <StarMaterial>k__BackingField
private Material <SunMaterial>k__BackingField
private Material <MoonMaterial>k__BackingField
private Material <AtmosphereMaterial>k__BackingField
private Material <ClearMaterial>k__BackingField
private Material <CloudMaterial>k__BackingField
private Material[] <BillboardMaterials>k__BackingField
private Light <LightSource>k__BackingField
private TOD_Sky <Sky>k__BackingField
private TOD_Animation <Animation>k__BackingField
private TOD_Time <Time>k__BackingField
private TOD_Camera <Camera>k__BackingField
private TOD_Rays <Rays>k__BackingField
private TOD_Scattering <Scattering>k__BackingField
private TOD_Shadows <Shadows>k__BackingField
public Transform DomeTransform
public Transform SpaceTransform
public Transform StarTransform
public Transform SunTransform
public Transform MoonTransform
public Transform AtmosphereTransform
public Transform ClearTransform
public Transform CloudTransform
public Transform BillboardTransform
public Transform LightTransform
public Renderer SpaceRenderer
public Renderer StarRenderer
public Renderer SunRenderer
public Renderer MoonRenderer
public Renderer AtmosphereRenderer
public Renderer ClearRenderer
public Renderer CloudRenderer
public Renderer[] BillboardRenderers
public MeshFilter SpaceMeshFilter
public MeshFilter StarMeshFilter
public MeshFilter SunMeshFilter
public MeshFilter MoonMeshFilter
public MeshFilter AtmosphereMeshFilter
public MeshFilter ClearMeshFilter
public MeshFilter CloudMeshFilter
public MeshFilter[] BillboardMeshFilters
public Material SpaceMaterial
public Material StarMaterial
public Material SunMaterial
public Material MoonMaterial
public Material AtmosphereMaterial
public Material ClearMaterial
public Material CloudMaterial
public Material[] BillboardMaterials
public Light LightSource
public TOD_Sky Sky
public TOD_Animation Animation
public TOD_Time Time
public TOD_Camera Camera
public TOD_Rays Rays
public TOD_Scattering Scattering
public TOD_Shadows Shadows
public Transform get_DomeTransform()
public void set_DomeTransform(Transform value)
public Transform get_SpaceTransform()
public void set_SpaceTransform(Transform value)
public Transform get_StarTransform()
public void set_StarTransform(Transform value)
public Transform get_SunTransform()
public void set_SunTransform(Transform value)
public Transform get_MoonTransform()
public void set_MoonTransform(Transform value)
public Transform get_AtmosphereTransform()
public void set_AtmosphereTransform(Transform value)
public Transform get_ClearTransform()
public void set_ClearTransform(Transform value)
public Transform get_CloudTransform()
public void set_CloudTransform(Transform value)
public Transform get_BillboardTransform()
public void set_BillboardTransform(Transform value)
public Transform get_LightTransform()
public void set_LightTransform(Transform value)
public Renderer get_SpaceRenderer()
public void set_SpaceRenderer(Renderer value)
public Renderer get_StarRenderer()
public void set_StarRenderer(Renderer value)
public Renderer get_SunRenderer()
public void set_SunRenderer(Renderer value)
public Renderer get_MoonRenderer()
public void set_MoonRenderer(Renderer value)
public Renderer get_AtmosphereRenderer()
public void set_AtmosphereRenderer(Renderer value)
public Renderer get_ClearRenderer()
public void set_ClearRenderer(Renderer value)
public Renderer get_CloudRenderer()
public void set_CloudRenderer(Renderer value)
public Renderer[] get_BillboardRenderers()
public void set_BillboardRenderers(Renderer[] value)
public MeshFilter get_SpaceMeshFilter()
public void set_SpaceMeshFilter(MeshFilter value)
public MeshFilter get_StarMeshFilter()
public void set_StarMeshFilter(MeshFilter value)
public MeshFilter get_SunMeshFilter()
public void set_SunMeshFilter(MeshFilter value)
public MeshFilter get_MoonMeshFilter()
public void set_MoonMeshFilter(MeshFilter value)
public MeshFilter get_AtmosphereMeshFilter()
public void set_AtmosphereMeshFilter(MeshFilter value)
public MeshFilter get_ClearMeshFilter()
public void set_ClearMeshFilter(MeshFilter value)
public MeshFilter get_CloudMeshFilter()
public void set_CloudMeshFilter(MeshFilter value)
public MeshFilter[] get_BillboardMeshFilters()
public void set_BillboardMeshFilters(MeshFilter[] value)
public Material get_SpaceMaterial()
public void set_SpaceMaterial(Material value)
public Material get_StarMaterial()
public void set_StarMaterial(Material value)
public Material get_SunMaterial()
public void set_SunMaterial(Material value)
public Material get_MoonMaterial()
public void set_MoonMaterial(Material value)
public Material get_AtmosphereMaterial()
public void set_AtmosphereMaterial(Material value)
public Material get_ClearMaterial()
public void set_ClearMaterial(Material value)
public Material get_CloudMaterial()
public void set_CloudMaterial(Material value)
public Material[] get_BillboardMaterials()
public void set_BillboardMaterials(Material[] value)
public Light get_LightSource()
public void set_LightSource(Light value)
public TOD_Sky get_Sky()
public void set_Sky(TOD_Sky value)
public TOD_Animation get_Animation()
public void set_Animation(TOD_Animation value)
public TOD_Time get_Time()
public void set_Time(TOD_Time value)
public TOD_Camera get_Camera()
public void set_Camera(TOD_Camera value)
public TOD_Rays get_Rays()
public void set_Rays(TOD_Rays value)
public TOD_Scattering get_Scattering()
public void set_Scattering(TOD_Scattering value)
public TOD_Shadows get_Shadows()
public void set_Shadows(TOD_Shadows value)
public void Initialize()
}
public TOD_CycleParameters : object {
public float Hour
public int Day
public int Month
public int Year
public DateTime DateTime
public long Ticks
public DateTime get_DateTime()
public void set_DateTime(DateTime value)
public long get_Ticks()
public void set_Ticks(long value)
}
public TOD_DayParameters : object {
public Gradient SunColor
public Gradient LightColor
public Gradient RayColor
public Gradient SkyColor
public Gradient CloudColor
public Gradient FogColor
public Gradient AmbientColor
public float LightIntensity
public float ShadowStrength
public float AmbientMultiplier
public float ReflectionMultiplier
}
public TOD_FogParameters : object {
public TOD_FogType Mode
public float HeightBias
}
public TOD_FogType : Enum {
public int value__
public TOD_FogType None
public TOD_FogType Atmosphere
public TOD_FogType Directional
public TOD_FogType Gradient
}
public TOD_ImageEffect : MonoBehaviour {
public TOD_Sky sky
protected Camera cam
private bool supportsDepth
private bool supportsHdr
private Vector3[] frustumCornersArray
protected Material CreateMaterial(Shader shader)
private TOD_Sky FindSky(bool fallback)
protected void Awake()
protected bool CheckSupport(bool needDepth, bool needHdr)
protected void DrawBorder(RenderTexture dest, Material material)
protected Matrix4x4 FrustumCorners()
protected RenderTexture GetSkyMask(RenderTexture source, Material skyMaskMaterial, Material screenClearMaterial, ResolutionType resolution, Vector3 lightPos, int blurIterations, float blurRadius, float maxRadius)
}
public TOD_Light : MonoBehaviour {
private Light lightComponent
protected float GetIntensity()
protected void SetIntensity(float value)
protected void Awake()
}
public TOD_LightAtDay : TOD_Light {
public float fadeTime
private float lerpTime
private float maxIntensity
protected void Start()
protected void Update()
}
public TOD_LightAtNight : TOD_Light {
public float fadeTime
private float lerpTime
private float maxIntensity
protected void Start()
protected void Update()
}
public TOD_LightAtTime : TOD_Light {
public AnimationCurve Intensity
protected void Update()
}
public TOD_LightParameters : object {
public float UpdateInterval
public float MinimumHeight
}
public TOD_LoadSkyFromFile : MonoBehaviour {
public TOD_Sky sky
public TextAsset textAsset
protected void Start()
}
public TOD_MaxAttribute : PropertyAttribute {
public float max
public void .ctor(float max)
}
public TOD_MeshQualityType : Enum {
public int value__
public TOD_MeshQualityType Low
public TOD_MeshQualityType Medium
public TOD_MeshQualityType High
}
public TOD_MinAttribute : PropertyAttribute {
public float min
public void .ctor(float min)
}
public TOD_MoonParameters : object {
public float MeshSize
public float MeshBrightness
public float MeshContrast
public float HaloSize
public float HaloBrightness
public TOD_MoonPositionType Position
}
public TOD_MoonPositionType : Enum {
public int value__
public TOD_MoonPositionType OppositeToSun
public TOD_MoonPositionType Realistic
}
public TOD_NightParameters : object {
public Gradient MoonColor
public Gradient LightColor
public Gradient RayColor
public Gradient SkyColor
public Gradient CloudColor
public Gradient FogColor
public Gradient AmbientColor
public float LightIntensity
public float ShadowStrength
public float AmbientMultiplier
public float ReflectionMultiplier
}
public TOD_Parameters : object {
public TOD_CycleParameters Cycle
public TOD_WorldParameters World
public TOD_AtmosphereParameters Atmosphere
public TOD_DayParameters Day
public TOD_NightParameters Night
public TOD_SunParameters Sun
public TOD_MoonParameters Moon
public TOD_LightParameters Light
public TOD_StarParameters Stars
public TOD_CloudParameters Clouds
public TOD_FogParameters Fog
public TOD_AmbientParameters Ambient
public TOD_ReflectionParameters Reflection
public void .ctor(TOD_Sky sky)
public void ToSky(TOD_Sky sky)
}
public TOD_Particle : MonoBehaviour {
private ParticleSystem particleComponent
protected float GetEmission()
protected void SetEmission(float value)
protected void Awake()
}
public TOD_ParticleAtDay : TOD_Particle {
public float fadeTime
private float lerpTime
private float maxEmission
protected void Start()
protected void Update()
}
public TOD_ParticleAtNight : TOD_Particle {
public float fadeTime
private float lerpTime
private float maxEmission
protected void Start()
protected void Update()
}
public TOD_ParticleAtTime : TOD_Particle {
public AnimationCurve Emission
protected void Update()
}
public TOD_RangeAttribute : PropertyAttribute {
public float min
public float max
public void .ctor(float min, float max)
}
public TOD_Rays : TOD_ImageEffect {
public Shader GodRayShader
public Shader ScreenClearShader
public Shader SkyMaskShader
public bool UseDepthTexture
public BlendModeType BlendMode
public float Intensity
public ResolutionType Resolution
public int BlurIterations
public float BlurRadius
public float MaxRadius
private Material godRayMaterial
private Material screenClearMaterial
private Material skyMaskMaterial
private int PASS_SCREEN
private int PASS_ADD
protected void OnEnable()
protected void OnDisable()
protected void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public TOD_ReflectionParameters : object {
public TOD_ReflectionType Mode
public ReflectionProbeClearFlags ClearFlags
public LayerMask CullingMask
public ReflectionProbeTimeSlicingMode TimeSlicing
public int Resolution
public float UpdateInterval
public GameObject ProbePrefab
}
public TOD_ReflectionType : Enum {
public int value__
public TOD_ReflectionType None
public TOD_ReflectionType Cubemap
}
public TOD_Render : MonoBehaviour {
private Renderer rendererComponent
protected void SetState(bool value)
protected void Awake()
}
public TOD_RenderAtDay : TOD_Render {
protected void Start()
protected void Update()
}
public TOD_RenderAtNight : TOD_Render {
protected void Start()
protected void Update()
}
public TOD_Resources : MonoBehaviour {
public Material Skybox
public Mesh MoonLOD0
public Mesh MoonLOD1
public Mesh MoonLOD2
public Mesh SkyLOD0
public Mesh SkyLOD1
public Mesh SkyLOD2
public Mesh CloudsLOD0
public Mesh CloudsLOD1
public Mesh CloudsLOD2
public Mesh StarsLOD0
public Mesh StarsLOD1
public Mesh StarsLOD2
private int <ID_SunLightColor>k__BackingField
private int <ID_MoonLightColor>k__BackingField
private int <ID_SunSkyColor>k__BackingField
private int <ID_MoonSkyColor>k__BackingField
private int <ID_SunMeshColor>k__BackingField
private int <ID_MoonMeshColor>k__BackingField
private int <ID_SunCloudColor>k__BackingField
private int <ID_MoonCloudColor>k__BackingField
private int <ID_FogColor>k__BackingField
private int <ID_GroundColor>k__BackingField
private int <ID_AmbientColor>k__BackingField
private int <ID_SunDirection>k__BackingField
private int <ID_MoonDirection>k__BackingField
private int <ID_LightDirection>k__BackingField
private int <ID_LocalSunDirection>k__BackingField
private int <ID_LocalMoonDirection>k__BackingField
private int <ID_LocalLightDirection>k__BackingField
private int <ID_Contrast>k__BackingField
private int <ID_Brightness>k__BackingField
private int <ID_Fogginess>k__BackingField
private int <ID_Directionality>k__BackingField
private int <ID_MoonHaloPower>k__BackingField
private int <ID_MoonHaloColor>k__BackingField
private int <ID_CloudSize>k__BackingField
private int <ID_CloudOpacity>k__BackingField
private int <ID_CloudCoverage>k__BackingField
private int <ID_CloudSharpness>k__BackingField
private int <ID_CloudDensity>k__BackingField
private int <ID_CloudColoring>k__BackingField
private int <ID_CloudAttenuation>k__BackingField
private int <ID_CloudSaturation>k__BackingField
private int <ID_CloudScattering>k__BackingField
private int <ID_CloudBrightness>k__BackingField
private int <ID_CloudMultiplier>k__BackingField
private int <ID_CloudOffset>k__BackingField
private int <ID_CloudWind>k__BackingField
private int <ID_StarSize>k__BackingField
private int <ID_StarBrightness>k__BackingField
private int <ID_StarVisibility>k__BackingField
private int <ID_SunMeshContrast>k__BackingField
private int <ID_SunMeshBrightness>k__BackingField
private int <ID_MoonMeshContrast>k__BackingField
private int <ID_MoonMeshBrightness>k__BackingField
private int <ID_kBetaMie>k__BackingField
private int <ID_kSun>k__BackingField
private int <ID_k4PI>k__BackingField
private int <ID_kRadius>k__BackingField
private int <ID_kScale>k__BackingField
private int <ID_World2Sky>k__BackingField
private int <ID_Sky2World>k__BackingField
public int ID_SunLightColor
public int ID_MoonLightColor
public int ID_SunSkyColor
public int ID_MoonSkyColor
public int ID_SunMeshColor
public int ID_MoonMeshColor
public int ID_SunCloudColor
public int ID_MoonCloudColor
public int ID_FogColor
public int ID_GroundColor
public int ID_AmbientColor
public int ID_SunDirection
public int ID_MoonDirection
public int ID_LightDirection
public int ID_LocalSunDirection
public int ID_LocalMoonDirection
public int ID_LocalLightDirection
public int ID_Contrast
public int ID_Brightness
public int ID_Fogginess
public int ID_Directionality
public int ID_MoonHaloPower
public int ID_MoonHaloColor
public int ID_CloudSize
public int ID_CloudOpacity
public int ID_CloudCoverage
public int ID_CloudSharpness
public int ID_CloudDensity
public int ID_CloudColoring
public int ID_CloudAttenuation
public int ID_CloudSaturation
public int ID_CloudScattering
public int ID_CloudBrightness
public int ID_CloudMultiplier
public int ID_CloudOffset
public int ID_CloudWind
public int ID_StarSize
public int ID_StarBrightness
public int ID_StarVisibility
public int ID_SunMeshContrast
public int ID_SunMeshBrightness
public int ID_MoonMeshContrast
public int ID_MoonMeshBrightness
public int ID_kBetaMie
public int ID_kSun
public int ID_k4PI
public int ID_kRadius
public int ID_kScale
public int ID_World2Sky
public int ID_Sky2World
public int get_ID_SunLightColor()
private void set_ID_SunLightColor(int value)
public int get_ID_MoonLightColor()
private void set_ID_MoonLightColor(int value)
public int get_ID_SunSkyColor()
private void set_ID_SunSkyColor(int value)
public int get_ID_MoonSkyColor()
private void set_ID_MoonSkyColor(int value)
public int get_ID_SunMeshColor()
private void set_ID_SunMeshColor(int value)
public int get_ID_MoonMeshColor()
private void set_ID_MoonMeshColor(int value)
public int get_ID_SunCloudColor()
private void set_ID_SunCloudColor(int value)
public int get_ID_MoonCloudColor()
private void set_ID_MoonCloudColor(int value)
public int get_ID_FogColor()
private void set_ID_FogColor(int value)
public int get_ID_GroundColor()
private void set_ID_GroundColor(int value)
public int get_ID_AmbientColor()
private void set_ID_AmbientColor(int value)
public int get_ID_SunDirection()
private void set_ID_SunDirection(int value)
public int get_ID_MoonDirection()
private void set_ID_MoonDirection(int value)
public int get_ID_LightDirection()
private void set_ID_LightDirection(int value)
public int get_ID_LocalSunDirection()
private void set_ID_LocalSunDirection(int value)
public int get_ID_LocalMoonDirection()
private void set_ID_LocalMoonDirection(int value)
public int get_ID_LocalLightDirection()
private void set_ID_LocalLightDirection(int value)
public int get_ID_Contrast()
private void set_ID_Contrast(int value)
public int get_ID_Brightness()
private void set_ID_Brightness(int value)
public int get_ID_Fogginess()
private void set_ID_Fogginess(int value)
public int get_ID_Directionality()
private void set_ID_Directionality(int value)
public int get_ID_MoonHaloPower()
private void set_ID_MoonHaloPower(int value)
public int get_ID_MoonHaloColor()
private void set_ID_MoonHaloColor(int value)
public int get_ID_CloudSize()
private void set_ID_CloudSize(int value)
public int get_ID_CloudOpacity()
private void set_ID_CloudOpacity(int value)
public int get_ID_CloudCoverage()
private void set_ID_CloudCoverage(int value)
public int get_ID_CloudSharpness()
private void set_ID_CloudSharpness(int value)
public int get_ID_CloudDensity()
private void set_ID_CloudDensity(int value)
public int get_ID_CloudColoring()
private void set_ID_CloudColoring(int value)
public int get_ID_CloudAttenuation()
private void set_ID_CloudAttenuation(int value)
public int get_ID_CloudSaturation()
private void set_ID_CloudSaturation(int value)
public int get_ID_CloudScattering()
private void set_ID_CloudScattering(int value)
public int get_ID_CloudBrightness()
private void set_ID_CloudBrightness(int value)
public int get_ID_CloudMultiplier()
private void set_ID_CloudMultiplier(int value)
public int get_ID_CloudOffset()
private void set_ID_CloudOffset(int value)
public int get_ID_CloudWind()
private void set_ID_CloudWind(int value)
public int get_ID_StarSize()
private void set_ID_StarSize(int value)
public int get_ID_StarBrightness()
private void set_ID_StarBrightness(int value)
public int get_ID_StarVisibility()
private void set_ID_StarVisibility(int value)
public int get_ID_SunMeshContrast()
private void set_ID_SunMeshContrast(int value)
public int get_ID_SunMeshBrightness()
private void set_ID_SunMeshBrightness(int value)
public int get_ID_MoonMeshContrast()
private void set_ID_MoonMeshContrast(int value)
public int get_ID_MoonMeshBrightness()
private void set_ID_MoonMeshBrightness(int value)
public int get_ID_kBetaMie()
private void set_ID_kBetaMie(int value)
public int get_ID_kSun()
private void set_ID_kSun(int value)
public int get_ID_k4PI()
private void set_ID_k4PI(int value)
public int get_ID_kRadius()
private void set_ID_kRadius(int value)
public int get_ID_kScale()
private void set_ID_kScale(int value)
public int get_ID_World2Sky()
private void set_ID_World2Sky(int value)
public int get_ID_Sky2World()
private void set_ID_Sky2World(int value)
public void Initialize()
}
public TOD_Scattering : TOD_ImageEffect {
public Shader ScatteringShader
public Shader ScreenClearShader
public Shader SkyMaskShader
public Texture2D DitheringTexture
public bool SinglePass
public float GlobalDensity
public float HeightFalloff
public float StartDistance
public float ZeroLevel
public ResolutionType Resolution
public int BlurIterations
public float BlurRadius
public float MaxRadius
private Material scatteringMaterial
private Material screenClearMaterial
private Material skyMaskMaterial
protected void OnEnable()
protected void OnDisable()
protected void OnPreCull()
protected void OnPostRender()
protected void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public TOD_Shadows : TOD_ImageEffect {
public Shader ShadowShader
public Texture2D CloudTexture
public float Cutoff
public float Fade
public float Intensity
private Material shadowMaterial
protected void OnEnable()
protected void OnDisable()
protected void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public TOD_Sky : MonoBehaviour {
private float pi
private float tau
private List`1<TOD_Sky> instances
private int probeRenderID
public TOD_ColorSpaceType ColorSpace
public TOD_ColorRangeType ColorRange
public TOD_ColorOutputType ColorOutput
public TOD_SkyQualityType SkyQuality
public TOD_CloudQualityType CloudQuality
public TOD_MeshQualityType MeshQuality
public TOD_StarQualityType StarQuality
public TOD_CycleParameters Cycle
public TOD_WorldParameters World
public TOD_AtmosphereParameters Atmosphere
public TOD_DayParameters Day
public TOD_NightParameters Night
public TOD_SunParameters Sun
public TOD_MoonParameters Moon
public TOD_StarParameters Stars
public TOD_CloudParameters Clouds
public TOD_LightParameters Light
public TOD_FogParameters Fog
public TOD_AmbientParameters Ambient
public TOD_ReflectionParameters Reflection
private bool <Initialized>k__BackingField
private TOD_Components <Components>k__BackingField
private TOD_Resources <Resources>k__BackingField
private bool <IsDay>k__BackingField
private bool <IsNight>k__BackingField
private float <LerpValue>k__BackingField
private float <SunZenith>k__BackingField
private float <SunAltitude>k__BackingField
private float <SunAzimuth>k__BackingField
private float <MoonZenith>k__BackingField
private float <MoonAltitude>k__BackingField
private float <MoonAzimuth>k__BackingField
private float <SunsetTime>k__BackingField
private float <SunriseTime>k__BackingField
private float <LocalSiderealTime>k__BackingField
private float <SunVisibility>k__BackingField
private float <MoonVisibility>k__BackingField
private Vector3 <SunDirection>k__BackingField
private Vector3 <MoonDirection>k__BackingField
private Vector3 <LightDirection>k__BackingField
private Vector3 <LocalSunDirection>k__BackingField
private Vector3 <LocalMoonDirection>k__BackingField
private Vector3 <LocalLightDirection>k__BackingField
private Color <SunLightColor>k__BackingField
private Color <MoonLightColor>k__BackingField
private Color <SunRayColor>k__BackingField
private Color <MoonRayColor>k__BackingField
private Color <SunSkyColor>k__BackingField
private Color <MoonSkyColor>k__BackingField
private Color <SunMeshColor>k__BackingField
private Color <MoonMeshColor>k__BackingField
private Color <SunCloudColor>k__BackingField
private Color <MoonCloudColor>k__BackingField
private Color <FogColor>k__BackingField
private Color <GroundColor>k__BackingField
private Color <AmbientColor>k__BackingField
private Color <MoonHaloColor>k__BackingField
private ReflectionProbe <Probe>k__BackingField
private MonoBehaviour <ProbeEx>k__BackingField
private float timeSinceLightUpdate
private float timeSinceAmbientUpdate
private float timeSinceReflectionUpdate
private int TOD_SAMPLES
private Vector3 kBetaMie
private Vector4 kSun
private Vector4 k4PI
private Vector4 kRadius
private Vector4 kScale
public List`1<TOD_Sky> Instances
public TOD_Sky Instance
public bool Initialized
public bool Headless
public TOD_Components Components
public TOD_Resources Resources
public bool IsDay
public bool IsNight
public float Radius
public float Diameter
public float LerpValue
public float SunZenith
public float SunAltitude
public float SunAzimuth
public float MoonZenith
public float MoonAltitude
public float MoonAzimuth
public float SunsetTime
public float SunriseTime
public float LocalSiderealTime
public float LightZenith
public float LightIntensity
public float SunVisibility
public float MoonVisibility
public Vector3 SunDirection
public Vector3 MoonDirection
public Vector3 LightDirection
public Vector3 LocalSunDirection
public Vector3 LocalMoonDirection
public Vector3 LocalLightDirection
public Color SunLightColor
public Color MoonLightColor
public Color LightColor
public Color SunRayColor
public Color MoonRayColor
public Color SunSkyColor
public Color MoonSkyColor
public Color SunMeshColor
public Color MoonMeshColor
public Color SunCloudColor
public Color MoonCloudColor
public Color FogColor
public Color GroundColor
public Color AmbientColor
public Color MoonHaloColor
public ReflectionProbe Probe
public MonoBehaviour ProbeEx
private void UpdateScattering()
private void UpdateCelestials()
public List`1<TOD_Sky> get_Instances()
public TOD_Sky get_Instance()
public bool get_Initialized()
private void set_Initialized(bool value)
public bool get_Headless()
public TOD_Components get_Components()
private void set_Components(TOD_Components value)
public TOD_Resources get_Resources()
private void set_Resources(TOD_Resources value)
public bool get_IsDay()
private void set_IsDay(bool value)
public bool get_IsNight()
private void set_IsNight(bool value)
public float get_Radius()
public float get_Diameter()
public float get_LerpValue()
private void set_LerpValue(float value)
public float get_SunZenith()
private void set_SunZenith(float value)
public float get_SunAltitude()
private void set_SunAltitude(float value)
public float get_SunAzimuth()
private void set_SunAzimuth(float value)
public float get_MoonZenith()
private void set_MoonZenith(float value)
public float get_MoonAltitude()
private void set_MoonAltitude(float value)
public float get_MoonAzimuth()
private void set_MoonAzimuth(float value)
public float get_SunsetTime()
private void set_SunsetTime(float value)
public float get_SunriseTime()
private void set_SunriseTime(float value)
public float get_LocalSiderealTime()
private void set_LocalSiderealTime(float value)
public float get_LightZenith()
public float get_LightIntensity()
public float get_SunVisibility()
private void set_SunVisibility(float value)
public float get_MoonVisibility()
private void set_MoonVisibility(float value)
public Vector3 get_SunDirection()
private void set_SunDirection(Vector3 value)
public Vector3 get_MoonDirection()
private void set_MoonDirection(Vector3 value)
public Vector3 get_LightDirection()
private void set_LightDirection(Vector3 value)
public Vector3 get_LocalSunDirection()
private void set_LocalSunDirection(Vector3 value)
public Vector3 get_LocalMoonDirection()
private void set_LocalMoonDirection(Vector3 value)
public Vector3 get_LocalLightDirection()
private void set_LocalLightDirection(Vector3 value)
public Color get_SunLightColor()
private void set_SunLightColor(Color value)
public Color get_MoonLightColor()
private void set_MoonLightColor(Color value)
public Color get_LightColor()
public Color get_SunRayColor()
private void set_SunRayColor(Color value)
public Color get_MoonRayColor()
private void set_MoonRayColor(Color value)
public Color get_SunSkyColor()
private void set_SunSkyColor(Color value)
public Color get_MoonSkyColor()
private void set_MoonSkyColor(Color value)
public Color get_SunMeshColor()
private void set_SunMeshColor(Color value)
public Color get_MoonMeshColor()
private void set_MoonMeshColor(Color value)
public Color get_SunCloudColor()
private void set_SunCloudColor(Color value)
public Color get_MoonCloudColor()
private void set_MoonCloudColor(Color value)
public Color get_FogColor()
private void set_FogColor(Color value)
public Color get_GroundColor()
private void set_GroundColor(Color value)
public Color get_AmbientColor()
private void set_AmbientColor(Color value)
public Color get_MoonHaloColor()
private void set_MoonHaloColor(Color value)
public ReflectionProbe get_Probe()
private void set_Probe(ReflectionProbe value)
public MonoBehaviour get_ProbeEx()
private void set_ProbeEx(MonoBehaviour value)
public Vector3 OrbitalToUnity(float radius, float theta, float phi)
public Vector3 OrbitalToLocal(float theta, float phi)
public Color SampleAtmosphere(Vector3 direction, bool directLight)
public SphericalHarmonicsL2 RenderToSphericalHarmonics()
public SphericalHarmonicsL2 RenderToSphericalHarmonics(float intensity, float saturation)
public void RenderToCubemap(RenderTexture targetTexture)
public void RenderToProbeEx(RenderTexture targetTexture)
public Color SampleFogColor(bool directLight)
public Color SampleSkyColor()
public Color SampleEquatorColor()
public void UpdateFog()
public void UpdateAmbient()
public void UpdateReflection()
public void LoadParameters(string xml)
public string SaveParameters()
private void UpdateQualitySettings()
private void UpdateRenderSettings()
private void UpdateShaderKeywords()
private void UpdateShaderProperties()
private float ShaderScale(float inCos)
private float ShaderMiePhase(float eyeCos, float eyeCos2)
private float ShaderRayleighPhase(float eyeCos2)
private Color ShaderNightSkyColor(Vector3 dir)
private Color ShaderMoonHaloColor(Vector3 dir)
private Color TOD_HDR2LDR(Color color)
private Color TOD_GAMMA2LINEAR(Color color)
private Color TOD_LINEAR2GAMMA(Color color)
private Color ShaderScatteringColor(Vector3 dir, bool directLight)
private void Initialize()
private void Cleanup()
protected void OnEnable()
protected void OnDisable()
protected void LateUpdate()
protected void OnValidate()
}
public TOD_SkyQualityType : Enum {
public int value__
public TOD_SkyQualityType PerVertex
public TOD_SkyQualityType PerPixel
}
public TOD_StarParameters : object {
public float Size
public float Brightness
public TOD_StarsPositionType Position
}
public TOD_StarQualityType : Enum {
public int value__
public TOD_StarQualityType Low
public TOD_StarQualityType Medium
public TOD_StarQualityType High
}
public TOD_StarsPositionType : Enum {
public int value__
public TOD_StarsPositionType Static
public TOD_StarsPositionType Rotating
}
public TOD_SunParameters : object {
public float MeshSize
public float MeshBrightness
public float MeshContrast
}
public TOD_Time : MonoBehaviour {
public float DayLengthInMinutes
public bool ProgressTime
public bool UseDeviceDate
public bool UseDeviceTime
public bool UseTimeCurve
public AnimationCurve TimeCurve
private Action OnSecond
private Action OnMinute
private Action OnHour
private Action OnDay
private Action OnMonth
private Action OnYear
private Action OnSunrise
private Action OnSunset
private TOD_Sky sky
private AnimationCurve timeCurve
private AnimationCurve timeCurveInverse
public void add_OnSecond(Action value)
public void remove_OnSecond(Action value)
public void add_OnMinute(Action value)
public void remove_OnMinute(Action value)
public void add_OnHour(Action value)
public void remove_OnHour(Action value)
public void add_OnDay(Action value)
public void remove_OnDay(Action value)
public void add_OnMonth(Action value)
public void remove_OnMonth(Action value)
public void add_OnYear(Action value)
public void remove_OnYear(Action value)
public void add_OnSunrise(Action value)
public void remove_OnSunrise(Action value)
public void add_OnSunset(Action value)
public void remove_OnSunset(Action value)
public void RefreshTimeCurve()
public float ApplyTimeCurve(float deltaTime)
public void AddHours(float hours, bool adjust)
public void AddSeconds(float seconds, bool adjust)
private void CalculateLinearTangents(Keyframe[] keys)
private void ApproximateCurve(AnimationCurve source, AnimationCurve& approxCurve, AnimationCurve& approxInverse)
protected void Awake()
protected void FixedUpdate()
}
public TOD_Util : object {
public Color MulRGB(Color color, float multiplier)
public Color MulRGBA(Color color, float multiplier)
public Color PowRGB(Color color, float power)
public Color PowRGBA(Color color, float power)
public Color SatRGB(Color color, float saturation)
public Color SatRGBA(Color color, float saturation)
public Color AdjustRGB(Color color, float intensity, float saturation)
public Color AdjustRGBA(Color color, float intensity, float saturation)
public Color ApplyAlpha(Color color)
}
public TOD_WeatherManager : MonoBehaviour {
public ParticleSystem RainParticleSystem
public float FadeTime
public RainType Rain
public CloudType Clouds
public AtmosphereType Atmosphere
private float cloudOpacityMax
private float cloudBrightnessMax
private float atmosphereBrightnessMax
private float rainEmissionMax
private float cloudOpacity
private float cloudCoverage
private float cloudBrightness
private float atmosphereFog
private float atmosphereBrightness
private float rainEmission
private float GetRainEmission()
private void SetRainEmission(float value)
protected void Start()
protected void Update()
}
public TOD_WorldParameters : object {
public float Latitude
public float Longitude
public float UTC
}
public TrackIR : object {
private dNP_GetSignatureDelegate NP_GetSignatureDelegate
private dNP_RegisterWindowHandle NP_RegisterWindowHandle
private dNP_UnregisterWindowHandle NP_UnregisterWindowHandle
private dNP_RegisterProgramProfileID NP_RegisterProgramProfileID
private dNP_QueryVersion NP_QueryVersion
private dNP_RequestData NP_RequestData
private dNP_GetData NP_GetData
private dNP_StartCursor NP_StartCursor
private dNP_StopCursor NP_StopCursor
private dNP_ReCenter NP_ReCenter
private dNP_StartDataTransmission NP_StartDataTransmission
private dNP_StopDataTransmission NP_StopDataTransmission
private ulong frameSignature
private ulong staleFrames
private NPRESULT result
private NPDATA data
private bool verbose
private IntPtr dllPtr
private ushort developerID
private long appKeyHigh
private long appKeyLow
private int GetForegroundWindow()
private IntPtr LoadLibrary(string lpFileName)
private IntPtr GetProcAddress(IntPtr hModule, string lpProcName)
private bool FreeLibrary(IntPtr hModule)
public void .ctor(ushort developerID, long appKeyHigh, long appKeyLow, NPDATA data, bool verbose)
public void Init()
private bool Connect(string dllPath)
private string GetPath()
public void Shutdown()
public LPTRACKIRDATA GetData()
public void Refresh()
public void ReCenter()
}
public UnityEngine.AI.CollectObjects : Enum {
public int value__
public CollectObjects All
public CollectObjects Volume
public CollectObjects Children
}
public UnityEngine.AI.NavMeshLink : MonoBehaviour {
private bool <UpdateOnTransformChanged>k__BackingField
private int m_AgentTypeID
private Vector3 m_StartPoint
private Vector3 m_EndPoint
private float m_Width
private int m_CostModifier
private bool m_Bidirectional
private bool m_AutoUpdatePosition
private int m_Area
private NavMeshLinkInstance m_LinkInstance
private Vector3 m_LastPosition
private Quaternion m_LastRotation
private List`1<NavMeshLink> s_Tracked
public bool UpdateOnTransformChanged
public int agentTypeID
public Vector3 startPoint
public Vector3 endPoint
public float width
public int costModifier
public bool bidirectional
public bool autoUpdate
public int area
public bool get_UpdateOnTransformChanged()
public void set_UpdateOnTransformChanged(bool value)
public int get_agentTypeID()
public void set_agentTypeID(int value)
public Vector3 get_startPoint()
public void set_startPoint(Vector3 value)
public Vector3 get_endPoint()
public void set_endPoint(Vector3 value)
public float get_width()
public void set_width(float value)
public int get_costModifier()
public void set_costModifier(int value)
public bool get_bidirectional()
public void set_bidirectional(bool value)
public bool get_autoUpdate()
public void set_autoUpdate(bool value)
public int get_area()
public void set_area(int value)
private void OnEnable()
private void OnDisable()
public void UpdateLink()
private void AddTracking(NavMeshLink link)
private void RemoveTracking(NavMeshLink link)
private void SetAutoUpdate(bool value)
private void AddLink()
private bool HasTransformChanged()
private void OnDidApplyAnimationProperties()
private void UpdateTrackedInstances()
}
public UnityEngine.AI.NavMeshModifier : MonoBehaviour {
private bool m_OverrideArea
private int m_Area
private bool m_IgnoreFromBuild
private List`1<int> m_AffectedAgents
private List`1<NavMeshModifier> s_NavMeshModifiers
public bool overrideArea
public int area
public bool ignoreFromBuild
public List`1<NavMeshModifier> activeModifiers
public bool get_overrideArea()
public void set_overrideArea(bool value)
public int get_area()
public void set_area(int value)
public bool get_ignoreFromBuild()
public void set_ignoreFromBuild(bool value)
public List`1<NavMeshModifier> get_activeModifiers()
private void OnEnable()
private void OnDisable()
public bool AffectsAgentType(int agentTypeID)
}
public UnityEngine.AI.NavMeshModifierVolume : MonoBehaviour {
private Vector3 m_Size
private Vector3 m_Center
private int m_Area
private List`1<int> m_AffectedAgents
private List`1<NavMeshModifierVolume> s_NavMeshModifiers
public Vector3 size
public Vector3 center
public int area
public List`1<NavMeshModifierVolume> activeModifiers
public Vector3 get_size()
public void set_size(Vector3 value)
public Vector3 get_center()
public void set_center(Vector3 value)
public int get_area()
public void set_area(int value)
public List`1<NavMeshModifierVolume> get_activeModifiers()
private void OnEnable()
private void OnDisable()
public bool AffectsAgentType(int agentTypeID)
public void AddAgentType(int agentTypeID)
public void ClearAgentTypes()
}
public UnityEngine.AI.NavMeshSurface : MonoBehaviour {
private bool <UpdateOnTransformChanged>k__BackingField
private int m_AgentTypeID
private CollectObjects m_CollectObjects
private Vector3 m_Size
private Vector3 m_Center
private LayerMask m_LayerMask
private NavMeshCollectGeometry m_UseGeometry
private int m_DefaultArea
private bool m_IgnoreNavMeshAgent
private bool m_IgnoreNavMeshObstacle
private bool m_OverrideTileSize
private int m_TileSize
private bool m_OverrideVoxelSize
private float m_VoxelSize
private bool m_BuildHeightMesh
private NavMeshData m_NavMeshData
private NavMeshDataInstance m_NavMeshDataInstance
private Vector3 m_LastPosition
private Quaternion m_LastRotation
private List`1<NavMeshSurface> s_NavMeshSurfaces
public bool UpdateOnTransformChanged
public int agentTypeID
public CollectObjects collectObjects
public Vector3 size
public Vector3 center
public LayerMask layerMask
public NavMeshCollectGeometry useGeometry
public int defaultArea
public bool ignoreNavMeshAgent
public bool ignoreNavMeshObstacle
public bool overrideTileSize
public int tileSize
public bool overrideVoxelSize
public float voxelSize
public bool buildHeightMesh
public NavMeshData navMeshData
public List`1<NavMeshSurface> activeSurfaces
public bool get_UpdateOnTransformChanged()
public void set_UpdateOnTransformChanged(bool value)
public int get_agentTypeID()
public void set_agentTypeID(int value)
public CollectObjects get_collectObjects()
public void set_collectObjects(CollectObjects value)
public Vector3 get_size()
public void set_size(Vector3 value)
public Vector3 get_center()
public void set_center(Vector3 value)
public LayerMask get_layerMask()
public void set_layerMask(LayerMask value)
public NavMeshCollectGeometry get_useGeometry()
public void set_useGeometry(NavMeshCollectGeometry value)
public int get_defaultArea()
public void set_defaultArea(int value)
public bool get_ignoreNavMeshAgent()
public void set_ignoreNavMeshAgent(bool value)
public bool get_ignoreNavMeshObstacle()
public void set_ignoreNavMeshObstacle(bool value)
public bool get_overrideTileSize()
public void set_overrideTileSize(bool value)
public int get_tileSize()
public void set_tileSize(int value)
public bool get_overrideVoxelSize()
public void set_overrideVoxelSize(bool value)
public float get_voxelSize()
public void set_voxelSize(float value)
public bool get_buildHeightMesh()
public void set_buildHeightMesh(bool value)
public NavMeshData get_navMeshData()
public void set_navMeshData(NavMeshData value)
public List`1<NavMeshSurface> get_activeSurfaces()
private void OnEnable()
private void OnDisable()
public void AddData()
public void RemoveData()
public NavMeshBuildSettings GetBuildSettings()
public void BuildNavMesh()
public void BuildNavMesh(List`1<NavMeshBuildSource> sources, bool calculateWorldBounds, NavMeshBuildSettings buildSettings)
public AsyncOperation UpdateNavMesh()
public AsyncOperation UpdateNavMesh(List`1<NavMeshBuildSource> sources, bool calculateWorldBounds)
public AsyncOperation UpdateNavMesh(NavMeshData data)
private void Register(NavMeshSurface surface)
private void Unregister(NavMeshSurface surface)
private void UpdateActive()
private void AppendModifierVolumes(List`1& sources)
private List`1<NavMeshBuildSource> CollectSources()
private Vector3 Abs(Vector3 v)
private Bounds GetWorldBounds(Matrix4x4 mat, Bounds bounds)
private Bounds CalculateWorldBounds(List`1<NavMeshBuildSource> sources)
private bool HasTransformChanged()
private void UpdateDataIfTransformChanged()
}
public UnityStandardAssets.ImageEffects.AAMode : Enum {
public int value__
public AAMode FXAA2
public AAMode FXAA3Console
public AAMode FXAA1PresetA
public AAMode FXAA1PresetB
public AAMode NFAA
public AAMode SSAA
public AAMode DLAA
}
public UnityStandardAssets.ImageEffects.Antialiasing : PostEffectsBase {
public AAMode mode
public bool showGeneratedNormals
public float offsetScale
public float blurRadius
public float edgeThresholdMin
public float edgeThreshold
public float edgeSharpness
public bool dlaaSharp
public Shader ssaaShader
private Material ssaa
public Shader dlaaShader
private Material dlaa
public Shader nfaaShader
private Material nfaa
public Shader shaderFXAAPreset2
private Material materialFXAAPreset2
public Shader shaderFXAAPreset3
private Material materialFXAAPreset3
public Shader shaderFXAAII
private Material materialFXAAII
public Shader shaderFXAAIII
private Material materialFXAAIII
public Material CurrentAAMaterial()
public bool CheckResources()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.Bloom : PostEffectsBase {
public TweakMode tweakMode
public BloomScreenBlendMode screenBlendMode
public HDRBloomMode hdr
private bool doHdr
public float sepBlurSpread
public BloomQuality quality
public float bloomIntensity
public float bloomThreshold
public Color bloomThresholdColor
public int bloomBlurIterations
public int hollywoodFlareBlurIterations
public float flareRotation
public LensFlareStyle lensflareMode
public float hollyStretchWidth
public float lensflareIntensity
public float lensflareThreshold
public float lensFlareSaturation
public Color flareColorA
public Color flareColorB
public Color flareColorC
public Color flareColorD
public Texture2D lensFlareVignetteMask
public Shader lensFlareShader
private Material lensFlareMaterial
public Shader screenBlendShader
private Material screenBlend
public Shader blurAndFlaresShader
private Material blurAndFlaresMaterial
public Shader brightPassFilterShader
private Material brightPassFilterMaterial
public bool CheckResources()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
private void BlendFlares(RenderTexture from, RenderTexture to)
private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
private void Vignette(float amount, RenderTexture from, RenderTexture to)
}
public UnityStandardAssets.ImageEffects.BloomAndFlares : PostEffectsBase {
public TweakMode34 tweakMode
public BloomScreenBlendMode screenBlendMode
public HDRBloomMode hdr
private bool doHdr
public float sepBlurSpread
public float useSrcAlphaAsMask
public float bloomIntensity
public float bloomThreshold
public int bloomBlurIterations
public bool lensflares
public int hollywoodFlareBlurIterations
public LensflareStyle34 lensflareMode
public float hollyStretchWidth
public float lensflareIntensity
public float lensflareThreshold
public Color flareColorA
public Color flareColorB
public Color flareColorC
public Color flareColorD
public Texture2D lensFlareVignetteMask
public Shader lensFlareShader
private Material lensFlareMaterial
public Shader vignetteShader
private Material vignetteMaterial
public Shader separableBlurShader
private Material separableBlurMaterial
public Shader addBrightStuffOneOneShader
private Material addBrightStuffBlendOneOneMaterial
public Shader screenBlendShader
private Material screenBlend
public Shader hollywoodFlaresShader
private Material hollywoodFlaresMaterial
public Shader brightPassFilterShader
private Material brightPassFilterMaterial
public bool CheckResources()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
private void BlendFlares(RenderTexture from, RenderTexture to)
private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
private void Vignette(float amount, RenderTexture from, RenderTexture to)
}
public UnityStandardAssets.ImageEffects.BloomOptimized : PostEffectsBase {
public float threshold
public float intensity
public float blurSize
private Resolution resolution
public int blurIterations
public BlurType blurType
public Shader fastBloomShader
private Material fastBloomMaterial
public bool CheckResources()
private void OnDisable()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.BloomScreenBlendMode : Enum {
public int value__
public BloomScreenBlendMode Screen
public BloomScreenBlendMode Add
}
public UnityStandardAssets.ImageEffects.Blur : MonoBehaviour {
public int iterations
public float blurSpread
public Shader blurShader
private Material m_Material
protected Material material
protected Material get_material()
protected void OnDisable()
protected void Start()
public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
private void DownSample4x(RenderTexture source, RenderTexture dest)
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.BlurOptimized : PostEffectsBase {
public int downsample
public float blurSize
public int blurIterations
public float fadeToBlurDistance
public BlurType blurType
public Shader blurShader
private Material blurMaterial
public bool CheckResources()
public void OnDisable()
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.CameraMotionBlur : PostEffectsBase {
private float MAX_RADIUS
public MotionBlurFilter filterType
public bool preview
public Vector3 previewScale
public float movementScale
public float rotationScale
public float maxVelocity
public float minVelocity
public float velocityScale
public float softZDistance
public int velocityDownsample
public LayerMask excludeLayers
private GameObject tmpCam
public Shader shader
public Shader dx11MotionBlurShader
public Shader replacementClear
private Material motionBlurMaterial
private Material dx11MotionBlurMaterial
public Texture2D noiseTexture
public float jitter
public bool showVelocity
public float showVelocityScale
private Matrix4x4 currentViewProjMat
private Matrix4x4 prevViewProjMat
private int prevFrameCount
private bool wasActive
private Vector3 prevFrameForward
private Vector3 prevFrameUp
private Vector3 prevFramePos
private Camera _camera
private void CalculateViewProjection()
private void Start()
private void OnEnable()
private void OnDisable()
public bool CheckResources()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
private void Remember()
private Camera GetTmpCam()
private void StartFrame()
private int divRoundUp(int x, int d)
}
public UnityStandardAssets.ImageEffects.ColorCorrectionCurves : PostEffectsBase {
public AnimationCurve redChannel
public AnimationCurve greenChannel
public AnimationCurve blueChannel
public bool useDepthCorrection
public AnimationCurve zCurve
public AnimationCurve depthRedChannel
public AnimationCurve depthGreenChannel
public AnimationCurve depthBlueChannel
private Material ccMaterial
private Material ccDepthMaterial
private Material selectiveCcMaterial
private Texture2D rgbChannelTex
private Texture2D rgbDepthChannelTex
private Texture2D zCurveTex
public float saturation
public bool selectiveCc
public Color selectiveFromColor
public Color selectiveToColor
public ColorCorrectionMode mode
public bool updateTextures
public Shader colorCorrectionCurvesShader
public Shader simpleColorCorrectionCurvesShader
public Shader colorCorrectionSelectiveShader
private bool updateTexturesOnStartup
private void Start()
private void Awake()
public bool CheckResources()
public void UpdateParameters()
private void UpdateTextures()
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.ColorCorrectionLookup : PostEffectsBase {
public Shader shader
private Material material
public Texture3D converted3DLut
public string basedOnTempTex
public bool CheckResources()
private void OnDisable()
private void OnDestroy()
public void SetIdentityLut()
public bool ValidDimensions(Texture2D tex2d)
public void Convert(Texture2D temp2DTex, string path)
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.ColorCorrectionRamp : ImageEffectBase {
public Texture textureRamp
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
internal UnityStandardAssets.ImageEffects.ContrastEnhance : PostEffectsBase {
public float intensity
public float threshold
private Material separableBlurMaterial
private Material contrastCompositeMaterial
public float blurSpread
public Shader separableBlurShader
public Shader contrastCompositeShader
public bool CheckResources()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.ContrastStretch : MonoBehaviour {
public float adaptationSpeed
public float limitMinimum
public float limitMaximum
private RenderTexture[] adaptRenderTex
private int curAdaptIndex
public Shader shaderLum
private Material m_materialLum
public Shader shaderReduce
private Material m_materialReduce
public Shader shaderAdapt
private Material m_materialAdapt
public Shader shaderApply
private Material m_materialApply
protected Material materialLum
protected Material materialReduce
protected Material materialAdapt
protected Material materialApply
protected Material get_materialLum()
protected Material get_materialReduce()
protected Material get_materialAdapt()
protected Material get_materialApply()
private void Start()
private void OnEnable()
private void OnDisable()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
private void CalculateAdaptation(Texture curTexture)
}
internal UnityStandardAssets.ImageEffects.CreaseShading : PostEffectsBase {
public float intensity
public int softness
public float spread
public Shader blurShader
private Material blurMaterial
public Shader depthFetchShader
private Material depthFetchMaterial
public Shader creaseApplyShader
private Material creaseApplyMaterial
public bool CheckResources()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.DepthOfField : PostEffectsBase {
public bool visualizeFocus
public float focalLength
public float focalSize
public float aperture
public Transform focalTransform
public float maxBlurSize
public bool highResolution
public BlurType blurType
public BlurSampleCount blurSampleCount
public bool nearBlur
public float foregroundOverlap
public Shader dofHdrShader
private Material dofHdrMaterial
public Shader dx11BokehShader
private Material dx11bokehMaterial
public float dx11BokehThreshold
public float dx11SpawnHeuristic
public Texture2D dx11BokehTexture
public float dx11BokehScale
public float dx11BokehIntensity
private float focalDistance01
private ComputeBuffer cbDrawArgs
private ComputeBuffer cbPoints
private float internalBlurWidth
public bool CheckResources()
private void OnEnable()
private void OnDisable()
private void ReleaseComputeResources()
private void CreateComputeResources()
private float FocalDistance01(float worldDist)
private void WriteCoc(RenderTexture fromTo, bool fgDilate)
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.DepthOfFieldDeprecated : PostEffectsBase {
private int SMOOTH_DOWNSAMPLE_PASS
private float BOKEH_EXTRA_BLUR
public Dof34QualitySetting quality
public DofResolution resolution
public bool simpleTweakMode
public float focalPoint
public float smoothness
public float focalZDistance
public float focalZStartCurve
public float focalZEndCurve
private float focalStartCurve
private float focalEndCurve
private float focalDistance01
public Transform objectFocus
public float focalSize
public DofBlurriness bluriness
public float maxBlurSpread
public float foregroundBlurExtrude
public Shader dofBlurShader
private Material dofBlurMaterial
public Shader dofShader
private Material dofMaterial
public bool visualize
public BokehDestination bokehDestination
private float widthOverHeight
private float oneOverBaseSize
public bool bokeh
public bool bokehSupport
public Shader bokehShader
public Texture2D bokehTexture
public float bokehScale
public float bokehIntensity
public float bokehThresholdContrast
public float bokehThresholdLuminance
public int bokehDownsample
private Material bokehMaterial
private Camera _camera
private RenderTexture foregroundTexture
private RenderTexture mediumRezWorkTexture
private RenderTexture finalDefocus
private RenderTexture lowRezWorkTexture
private RenderTexture bokehSource
private RenderTexture bokehSource2
private void CreateMaterials()
public bool CheckResources()
private void OnDisable()
private void OnEnable()
private float FocalDistance01(float worldDist)
private int GetDividerBasedOnQuality()
private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
private void OnRenderImage(RenderTexture source, RenderTexture destination)
private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
private void Downsample(RenderTexture from, RenderTexture to)
private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
private void ReleaseTextures()
private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
}
public UnityStandardAssets.ImageEffects.EdgeDetection : PostEffectsBase {
public EdgeDetectMode mode
public float sensitivityDepth
public float sensitivityNormals
public float lumThreshold
public float edgeExp
public float sampleDist
public float edgesOnly
public Color edgesOnlyBgColor
public Shader edgeDetectShader
private Material edgeDetectMaterial
private EdgeDetectMode oldMode
public bool CheckResources()
private void Start()
private void SetCameraFlag()
private void OnEnable()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
internal UnityStandardAssets.ImageEffects.Fisheye : PostEffectsBase {
public float strengthX
public float strengthY
public Shader fishEyeShader
private Material fisheyeMaterial
public bool CheckResources()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
internal UnityStandardAssets.ImageEffects.GlobalFog : PostEffectsBase {
public bool distanceFog
public bool useRadialDistance
public bool heightFog
public float height
public float heightDensity
public float startDistance
public Shader fogShader
private Material fogMaterial
public bool CheckResources()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
private void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
}
public UnityStandardAssets.ImageEffects.Grayscale : ImageEffectBase {
public Texture textureRamp
public float rampOffset
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.HDRBloomMode : Enum {
public int value__
public HDRBloomMode Auto
public HDRBloomMode On
public HDRBloomMode Off
}
public UnityStandardAssets.ImageEffects.ImageEffectBase : MonoBehaviour {
public Shader shader
private Material m_Material
protected Material material
protected void Start()
protected Material get_material()
protected void OnDisable()
}
public UnityStandardAssets.ImageEffects.ImageEffects : object {
public void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
public void Blit(RenderTexture source, RenderTexture dest)
public void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
}
public UnityStandardAssets.ImageEffects.LensflareStyle34 : Enum {
public int value__
public LensflareStyle34 Ghosting
public LensflareStyle34 Anamorphic
public LensflareStyle34 Combined
}
public UnityStandardAssets.ImageEffects.MotionBlur : ImageEffectBase {
public float blurAmount
public bool extraBlur
private RenderTexture accumTexture
protected void Start()
protected void OnDisable()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.NoiseAndGrain : PostEffectsBase {
public float intensityMultiplier
public float generalIntensity
public float blackIntensity
public float whiteIntensity
public float midGrey
public bool dx11Grain
public float softness
public bool monochrome
public Vector3 intensities
public Vector3 tiling
public float monochromeTiling
public FilterMode filterMode
public Texture2D noiseTexture
public Shader noiseShader
private Material noiseMaterial
public Shader dx11NoiseShader
private Material dx11NoiseMaterial
private float TILE_AMOUNT
public bool CheckResources()
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
private void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
}
public UnityStandardAssets.ImageEffects.NoiseAndScratches : MonoBehaviour {
public bool monochrome
private bool rgbFallback
public float grainIntensityMin
public float grainIntensityMax
public float grainSize
public float scratchIntensityMin
public float scratchIntensityMax
public float scratchFPS
public float scratchJitter
public Texture grainTexture
public Texture scratchTexture
public Shader shaderRGB
public Shader shaderYUV
private Material m_MaterialRGB
private Material m_MaterialYUV
private float scratchTimeLeft
private float scratchX
private float scratchY
protected Material material
protected void Start()
protected Material get_material()
protected void OnDisable()
private void SanitizeParameters()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.PostEffectsBase : MonoBehaviour {
protected bool supportImageEffects
protected bool supportHDRTextures
protected bool supportDepthTextures
protected bool supportDX11
private bool checkedSystemInfo
protected bool isSupported
private Camera camera
public Camera Camera
public Camera get_Camera()
protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
protected Material CreateMaterial(Shader s, Material m2Create)
private void OnEnable()
protected bool CheckSupport()
public bool CheckResources()
protected void Start()
protected bool CheckSupport(bool needDepth)
protected bool CheckSupport(bool needDepth, bool needHdr)
public bool Dx11Support()
protected void ReportAutoDisable()
private bool CheckShader(Shader s)
protected void NotSupported()
protected void DrawBorder(RenderTexture dest, Material material)
}
internal UnityStandardAssets.ImageEffects.PostEffectsHelper : MonoBehaviour {
private void OnRenderImage(RenderTexture source, RenderTexture destination)
private void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
private void DrawBorder(RenderTexture dest, Material material)
private void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
}
internal UnityStandardAssets.ImageEffects.Quads : object {
private Mesh[] meshes
private int currentQuads
private bool HasMeshes()
public void Cleanup()
public Mesh[] GetMeshes(int totalWidth, int totalHeight)
private Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
}
public UnityStandardAssets.ImageEffects.ScreenOverlay : PostEffectsBase {
public OverlayBlendMode blendMode
public float intensity
public Texture texture
public Shader overlayShader
private Material overlayMaterial
public bool CheckResources()
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
internal UnityStandardAssets.ImageEffects.ScreenSpaceAmbientObscurance : PostEffectsBase {
public float intensity
public float radius
public int blurIterations
public float blurFilterDistance
public int downsample
public Texture2D rand
public Shader aoShader
private Material aoMaterial
public bool CheckResources()
private void OnDisable()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.ScreenSpaceAmbientOcclusion : MonoBehaviour {
public float m_Radius
public SSAOSamples m_SampleCount
public float m_OcclusionIntensity
public int m_Blur
public int m_Downsampling
public float m_OcclusionAttenuation
public float m_MinZ
public Shader m_SSAOShader
private Material m_SSAOMaterial
public Texture2D m_RandomTexture
private bool m_Supported
private Material CreateMaterial(Shader shader)
private void DestroyMaterial(Material mat)
private void OnDisable()
private void Start()
private void OnEnable()
private void CreateMaterials()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.SepiaTone : ImageEffectBase {
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.SunShafts : PostEffectsBase {
public SunShaftsResolution resolution
public ShaftsScreenBlendMode screenBlendMode
public Transform sunTransform
public int radialBlurIterations
public Color sunColor
public Color sunThreshold
public float sunShaftBlurRadius
public float sunShaftIntensity
public float maxRadius
public bool useDepthTexture
public Shader sunShaftsShader
private Material sunShaftsMaterial
public Shader simpleClearShader
private Material simpleClearMaterial
public bool CheckResources()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
internal UnityStandardAssets.ImageEffects.TiltShift : PostEffectsBase {
public TiltShiftMode mode
public TiltShiftQuality quality
public float blurArea
public float maxBlurSize
public int downsample
public Shader tiltShiftShader
private Material tiltShiftMaterial
public bool CheckResources()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.Tonemapping : PostEffectsBase {
public TonemapperType type
public AdaptiveTexSize adaptiveTextureSize
public AnimationCurve remapCurve
private Texture2D curveTex
public float exposureAdjustment
public float middleGrey
public float white
public float adaptionSpeed
public Shader tonemapper
public bool validRenderTextureFormat
private Material tonemapMaterial
private RenderTexture rt
private RenderTextureFormat rtFormat
public bool CheckResources()
public float UpdateCurve()
private void OnDisable()
private bool CreateInternalRenderTexture()
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
internal UnityStandardAssets.ImageEffects.Triangles : object {
private Mesh[] meshes
private int currentTris
private bool HasMeshes()
private void Cleanup()
private Mesh[] GetMeshes(int totalWidth, int totalHeight)
private Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
}
public UnityStandardAssets.ImageEffects.TweakMode34 : Enum {
public int value__
public TweakMode34 Basic
public TweakMode34 Complex
}
public UnityStandardAssets.ImageEffects.Twirl : ImageEffectBase {
public Vector2 radius
public float angle
public Vector2 center
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.VignetteAndChromaticAberration : PostEffectsBase {
public AberrationMode mode
public float intensity
public float chromaticAberration
public float axialAberration
public float blur
public float blurSpread
public float luminanceDependency
public float blurDistance
public Shader vignetteShader
public Shader separableBlurShader
public Shader chromAberrationShader
private Material m_VignetteMaterial
private Material m_SeparableBlurMaterial
private Material m_ChromAberrationMaterial
public bool CheckResources()
public bool IsActive()
public void OnRenderImage(RenderTexture source, RenderTexture destination)
}
public UnityStandardAssets.ImageEffects.Vortex : ImageEffectBase {
public Vector2 radius
public float angle
public Vector2 center
private void OnRenderImage(RenderTexture source, RenderTexture destination)
}
