public LZ4pn.LZ4Codec : object {
private int MEMORY_USAGE
private int NOTCOMPRESSIBLE_DETECTIONLEVEL
private int MINMATCH
private int SKIPSTRENGTH
private int COPYLENGTH
private int LASTLITERALS
private int MFLIMIT
private int MINLENGTH
private int MAXD_LOG
private int MAXD
private int MAXD_MASK
private int MAX_DISTANCE
private int ML_BITS
private int ML_MASK
private int RUN_BITS
private int RUN_MASK
private int STEPSIZE_64
private int STEPSIZE_32
private int LZ4_64KLIMIT
private int HASH_LOG
private int HASH_TABLESIZE
private int HASH_ADJUST
private int HASH64K_LOG
private int HASH64K_TABLESIZE
private int HASH64K_ADJUST
private int HASHHC_LOG
private int HASHHC_TABLESIZE
private int HASHHC_ADJUST
private int MAX_NB_ATTEMPTS
private int OPTIMAL_ML
private Int32[] DECODER_TABLE_32
private Int32[] DECODER_TABLE_64
private Int32[] DEBRUIJN_TABLE_32
private Int32[] DEBRUIJN_TABLE_64
public int MaximumOutputLength(int inputLength)
internal void CheckArguments(Byte[] input, int inputOffset, Int32& inputLength, Byte[] output, int outputOffset, Int32& outputLength)
private void BlockCopy(Byte* src, Byte* dst, int len)
private void BlockFill(Byte* dst, int len, byte val)
public int Encode32(Byte* input, Byte* output, int inputLength, int outputLength)
public int Encode32(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength)
public Byte[] Encode32(Byte[] input, int inputOffset, int inputLength)
public int Decode32(Byte* input, int inputLength, Byte* output, int outputLength, bool knownOutputLength)
public int Decode32(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength, bool knownOutputLength)
public Byte[] Decode32(Byte[] input, int inputOffset, int inputLength, int outputLength)
public int Encode64(Byte* input, Byte* output, int inputLength, int outputLength)
public int Encode64(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength)
public Byte[] Encode64(Byte[] input, int inputOffset, int inputLength)
public int Decode64(Byte* input, int inputLength, Byte* output, int outputLength, bool knownOutputLength)
public int Decode64(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength, bool knownOutputLength)
public Byte[] Decode64(Byte[] input, int inputOffset, int inputLength, int outputLength)
private LZ4HC_Data_Structure LZ4HC_Create(Byte* src)
private int LZ4_compressHC_32(Byte* input, Byte* output, int inputLength, int outputLength)
public int Encode32HC(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength)
public Byte[] Encode32HC(Byte[] input, int inputOffset, int inputLength)
private int LZ4_compressHC_64(Byte* input, Byte* output, int inputLength, int outputLength)
public int Encode64HC(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength)
public Byte[] Encode64HC(Byte[] input, int inputOffset, int inputLength)
private int LZ4_compressCtx_32(Byte** hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen)
private int LZ4_compress64kCtx_32(UInt16* hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen)
private int LZ4_uncompress_32(Byte* src, Byte* dst, int dst_len)
private int LZ4_uncompress_unknownOutputSize_32(Byte* src, Byte* dst, int src_len, int dst_maxlen)
private void LZ4HC_Insert_32(LZ4HC_Data_Structure hc4, Byte* src_p)
private int LZ4HC_CommonLength_32(Byte* p1, Byte* p2, Byte* src_LASTLITERALS)
private int LZ4HC_InsertAndFindBestMatch_32(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* src_LASTLITERALS, Byte*& matchpos)
private int LZ4HC_InsertAndGetWiderMatch_32(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* startLimit, Byte* src_LASTLITERALS, int longest, Byte*& matchpos, Byte*& startpos)
private int LZ4_encodeSequence_32(Byte*& src_p, Byte*& dst_p, Byte*& src_anchor, int matchLength, Byte* xxx_ref, Byte* dst_end)
private int LZ4_compressHCCtx_32(LZ4HC_Data_Structure ctx, Byte* src, Byte* dst, int src_len, int dst_maxlen)
private int LZ4_compressCtx_64(UInt32* hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen)
private int LZ4_compress64kCtx_64(UInt16* hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen)
private int LZ4_uncompress_64(Byte* src, Byte* dst, int dst_len)
private int LZ4_uncompress_unknownOutputSize_64(Byte* src, Byte* dst, int src_len, int dst_maxlen)
private void LZ4HC_Insert_64(LZ4HC_Data_Structure hc4, Byte* src_p)
private int LZ4HC_CommonLength_64(Byte* p1, Byte* p2, Byte* src_LASTLITERALS)
private int LZ4HC_InsertAndFindBestMatch_64(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* src_LASTLITERALS, Byte*& matchpos)
private int LZ4HC_InsertAndGetWiderMatch_64(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* startLimit, Byte* src_LASTLITERALS, int longest, Byte*& matchpos, Byte*& startpos)
private int LZ4_encodeSequence_64(Byte*& src_p, Byte*& dst_p, Byte*& src_anchor, int matchLength, Byte* src_ref, Byte* dst_end)
private int LZ4_compressHCCtx_64(LZ4HC_Data_Structure ctx, Byte* src, Byte* dst, int src_len, int dst_maxlen)
}
