internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public Mono.Web.Util.ISectionSettingsMapper {
public object MapSection(object section, List`1<SettingsMappingWhat> whats)
}
internal Mono.Web.Util.MembershipSectionMapper : object {
public object MapSection(object _section, List`1<SettingsMappingWhat> whats)
private bool GetCommonAttributes(SettingsMappingWhatContents how, String& name, String& type)
private void SetProviderProperties(SettingsMappingWhatContents how, ProviderSettings prov)
private void ProcessAdd(MembershipSection section, SettingsMappingWhatContents how)
private void ProcessRemove(MembershipSection section, SettingsMappingWhatContents how)
private void ProcessClear(MembershipSection section, SettingsMappingWhatContents how)
private void ProcessReplace(MembershipSection section, SettingsMappingWhatContents how)
}
internal Mono.Web.Util.RoleManagerSectionMapper : object {
public object MapSection(object _section, List`1<SettingsMappingWhat> whats)
private bool GetCommonAttributes(SettingsMappingWhatContents how, String& name, String& type)
private void SetProviderProperties(SettingsMappingWhatContents how, ProviderSettings prov)
private void ProcessAdd(RoleManagerSection section, SettingsMappingWhatContents how)
private void ProcessRemove(RoleManagerSection section, SettingsMappingWhatContents how)
private void ProcessClear(RoleManagerSection section, SettingsMappingWhatContents how)
private void ProcessReplace(RoleManagerSection section, SettingsMappingWhatContents how)
}
internal Mono.Web.Util.SettingsMapping : object {
private string _sectionTypeName
private Type _sectionType
private string _mapperTypeName
private Type _mapperType
private SettingsMappingPlatform _platform
private List`1<SettingsMappingWhat> _whats
public Type SectionType
public Type MapperType
public SettingsMappingPlatform Platform
public Type get_SectionType()
public Type get_MapperType()
public SettingsMappingPlatform get_Platform()
public void .ctor(XPathNavigator nav)
public object MapSection(object input, Type type)
private void LoadContents(XPathNavigator nav)
}
public Mono.Web.Util.SettingsMappingManager : object {
private string settingsMapFileName
private string localSettingsMapFileName
private object mapperLock
private SettingsMappingManager _instance
private string _mappingFile
private Dictionary`2<Type, SettingsMapping> _mappers
private Dictionary`2<object, object> _mappedSections
private SettingsMappingPlatform _myPlatform
private bool _runningOnWindows
internal bool IsRunningOnWindows
public SettingsMappingPlatform Platform
public bool HasMappings
internal bool get_IsRunningOnWindows()
public SettingsMappingPlatform get_Platform()
public bool get_HasMappings()
public void Init()
private void LoadMappings()
private void LoadMappings(string mappingFilePath)
public object MapSection(object input)
private object MapSection(object input, Type type)
}
public Mono.Web.Util.SettingsMappingPlatform : Enum {
public int value__
public SettingsMappingPlatform Windows
public SettingsMappingPlatform Unix
}
public Mono.Web.Util.SettingsMappingWhat : object {
private string _value
private List`1<SettingsMappingWhatContents> _contents
public string Value
public List`1<SettingsMappingWhatContents> Contents
public string get_Value()
public List`1<SettingsMappingWhatContents> get_Contents()
public void .ctor(XPathNavigator nav)
}
public Mono.Web.Util.SettingsMappingWhatContents : object {
private SettingsMappingWhatOperation _operation
private Dictionary`2<string, string> _attributes
public SettingsMappingWhatOperation Operation
public Dictionary`2<string, string> Attributes
public SettingsMappingWhatOperation get_Operation()
public Dictionary`2<string, string> get_Attributes()
public void .ctor(XPathNavigator nav, SettingsMappingWhatOperation operation)
}
public Mono.Web.Util.SettingsMappingWhatOperation : Enum {
public int value__
public SettingsMappingWhatOperation Add
public SettingsMappingWhatOperation Clear
public SettingsMappingWhatOperation Replace
public SettingsMappingWhatOperation Remove
}
internal PageLifeCycle : Enum {
public int value__
public PageLifeCycle Unknown
public PageLifeCycle Start
public PageLifeCycle PreInit
public PageLifeCycle Init
public PageLifeCycle InitComplete
public PageLifeCycle PreLoad
public PageLifeCycle Load
public PageLifeCycle ControlEvents
public PageLifeCycle LoadComplete
public PageLifeCycle PreRender
public PageLifeCycle PreRenderComplete
public PageLifeCycle SaveStateComplete
public PageLifeCycle Render
public PageLifeCycle Unload
public PageLifeCycle End
}
internal SR : object {
public string Parameter_Invalid
public string Parameter_NullOrEmpty
public string Property_NullOrEmpty
public string Property_Invalid
public string Unexpected_Error
public string PropertyCannotBeNullOrEmptyString
public string PropertyCannotBeNull
public string Invalid_string_from_browser_caps
public string Unrecognized_construct_in_pattern
public string Caps_cannot_be_inited_twice
public string Duplicate_browser_id
public string Invalid_browser_root
public string Browser_mutually_exclusive_attributes
public string Browser_refid_prohibits_identification
public string Browser_invalid_element
public string Browser_Circular_Reference
public string Browser_attributes_required
public string Browser_parentID_Not_Found
public string Browser_parentID_applied_to_default
public string Browser_InvalidID
public string Browser_Not_Allowed_InAppLevel
public string Browser_InvalidStrongNameKey
public string Browser_compile_error
public string DefaultBrowser_parentID_Not_Found
public string Browser_empty_identification
public string Browser_W3SVC_Failure_Helper_Text
public string DefaultSiteName
public string ControlAdapters_TypeNotFound
public string Failed_gac_install
public string Failed_gac_uninstall
public string WrongType_of_Protected_provider
public string Make_sure_remote_server_is_enabled_for_config_access
public string Config_unable_to_get_section
public string Config_failed_to_resolve_site_id
public string Config_GetSectionWithPathArgInvalid
public string Unable_to_create_temp_file
public string Config_allow_definition_error_application
public string Config_allow_definition_error_machine
public string Config_allow_definition_error_webroot
public string Config_base_unrecognized_element
public string Config_base_required_attribute_missing
public string Config_base_required_attribute_empty
public string Config_base_unrecognized_attribute
public string Config_base_elements_only
public string Config_base_no_child_nodes
public string Config_base_file_load_exception_no_message
public string Config_base_bad_image_exception_no_message
public string Config_base_report_exception_type
public string Config_property_generic
public string Config_section_not_supported
public string Unable_To_Register_Assembly
public string Unable_To_UnRegister_Assembly
public string Could_not_create_type_instance
public string Config_Invalid_enum_value
public string Config_element_below_app_illegal
public string Config_provider_must_exist
public string File_is_read_only
public string Can_not_access_files_other_than_config
public string Error_loading_XML_file
public string Unknown_tag_in_caps_config
public string Cannot_specify_test_without_match
public string Result_must_be_at_the_top_browser_section
public string Type_doesnt_inherit_from_type
public string Type_cannot_be_resolved
public string Problem_reading_caps_config
public string Special_module_cannot_be_added_manually
public string Special_module_cannot_be_removed_manually
public string Module_not_in_app
public string Invalid_credentials
public string Auth_Invalid_Login_Url
public string Invalid_value_for_globalization_attr
public string Invalid_credentials_2
public string Invalid_registry_config
public string Invalid_Passport_Redirect_URL
public string Invalid_redirect_return_url
public string Config_section_not_present
public string Local_free_threads_cannot_exceed_free_threads
public string Min_free_threads_must_be_under_thread_pool_limits
public string Thread_pool_limit_must_be_greater_than_minFreeThreads
public string Config_max_request_length_disk_threshold_exceeds_max_request_length
public string Config_max_request_length_smaller_than_max_request_length_disk_threshold
public string Capability_file_root_element
public string File_element_only_valid_in_config
public string HttpRuntimeSection_TargetFramework_Invalid
public string Clear_not_valid
public string Config_base_cannot_remove_inherited_items
public string Nested_group_not_valid
public string Dup_protocol_id
public string WebPartsSection_NoVerbs
public string WebPartsSection_InvalidVerb
public string Transformer_types_already_added
public string Transformer_attribute_error
public string File_changed_since_read
public string Config_invalid_element
public string Config_control_rendering_compatibility_version_is_less_than_minimum_version
public string InvalidExpressionSyntax
public string InvalidExpressionPrefix
public string ExpressionBuilder_InvalidType
public string MissingExpressionPrefix
public string MissingExpressionValue
public string ExpressionBuilder_LiteralExpressionsNotAllowed
public string ResourceExpresionBuilder_PageResourceNotFound
public string Failed_to_start_monitoring
public string Invalid_file_name_for_monitoring
public string Access_denied_for_monitoring
public string Directory_does_not_exist_for_monitoring
public string NetBios_command_limit_reached
public string Directory_rename_notification
public string Change_notification_critical_dir
public string Path_not_found
public string Path_forbidden
public string Method_for_path_not_implemented
public string Method_not_allowed
public string Cannot_call_defaulthttphandler_sync
public string Handler_access_denied
public string Debugging_forbidden
public string Debug_Access_Denied
public string Invalid_Debug_Request
public string Invalid_Debug_ID
public string Error_Attaching_with_MDM
public string VaryByCustom_already_set
public string CacheProfile_Not_Found
public string Invalid_operation_cache_dependency
public string Invalid_sqlDependency_argument
public string Invalid_sqlDependency_argument2
public string Etag_already_set
public string Cant_both_set_and_generate_Etag
public string Cacheability_for_field_must_be_private_or_nocache
public string Cache_dependency_used_more_that_once
public string Invalid_expiration_combination
public string Invalid_Dependency_Type
public string Invalid_Parameters_To_Insert
public string Invalid_sql_cache_dep_polltime
public string Database_not_found
public string Cant_connect_sql_cache_dep_database_polling
public string Cant_connect_sql_cache_dep_database_admin
public string Cant_connect_sql_cache_dep_database_admin_cmdtxt
public string Database_not_enabled_for_notification
public string Table_not_enabled_for_notification
public string Polling_not_enabled_for_sql_cache
public string Polltime_zero_for_database_sql_cache
public string Permission_denied_database_polling
public string Permission_denied_database_enable_notification
public string Permission_denied_table_enable_notification
public string Permission_denied_database_disable_notification
public string Permission_denied_table_disable_notification
public string Cant_get_enabled_tables_sql_cache_dep
public string Cant_disable_table_sql_cache_dep
public string Cache_null_table
public string Cache_null_table_in_tables
public string Cache_dep_table_not_found
public string UC_not_cached
public string UCCachePolicy_unavailable
public string SqlCacheDependency_permission_denied
public string No_UniqueId_Cache_Dependency
public string SqlCacheDependency_OutputCache_Conflict
public string Cache_not_available
public string Http_handler_not_found_for_request_type
public string Request_not_available
public string Response_not_available
public string Session_not_available
public string Server_not_available
public string User_not_available
public string Sync_not_supported
public string Type_not_factory_or_handler
public string Type_from_untrusted_assembly
public string Type_not_module
public string Request_timed_out
public string DynamicModuleRegistrationOff
public string Invalid_ControlState
public string Too_late_for_ViewStateUserKey
public string Too_late_for_RegisterRequiresViewStateEncryption
public string MethodCannotBeCalledAfterAppStart
public string Invalid_urlencoded_form_data
public string Invalid_request_filter
public string Cannot_map_path_without_context
public string Cross_app_not_allowed
public string Max_request_length_exceeded
public string Dangerous_input_detected
public string Dangerous_input_detected_descr
public string CollectionCountExceeded_HttpValueCollection
public string CollectionCountExceeded_JavaScriptObjectDeserializer
public string Invalid_substitution_callback
public string Url_too_long
public string QueryString_too_long
public string Using_BufferlessStream_API_Not_Supported
public string Using_InputStream_API_Not_Supported
public string Cannot_get_snapshot_if_not_buffered
public string Cannot_use_snapshot_after_headers_sent
public string Cannot_use_snapshot_for_TextWriter
public string Cannot_set_status_after_headers_sent
public string Cannot_set_content_type_after_headers_sent
public string Filtering_not_allowed
public string Cannot_append_header_after_headers_sent
public string Cannot_append_cookie_after_headers_sent
public string Cannot_modify_cookies_after_headers_sent
public string Cannot_clear_headers_after_headers_sent
public string Cannot_call_method_after_headers_sent_generic
public string Cannot_flush_completed_response
public string No_Route_Found_For_Redirect
public string Cannot_redirect_after_headers_sent
public string Cannot_set_header_encoding_after_headers_sent
public string Invalid_header_encoding
public string Cannot_redirect_to_newline
public string Invalid_status_string
public string Invalid_value_for_CacheControl
public string OutputStream_NotAvail
public string Information_Disclosure_Warning
public string InvalidOffsetOrCount
public string Access_denied_to_app_dir
public string Access_denied_to_unicode_app_dir
public string Access_denied_to_path
public string Insufficient_trust_for_attribute
public string XSP_init_error
public string Unable_create_app_object
public string Could_not_create_type
public string StateManagedCollection_InvalidIndex
public string StateManagedCollection_NoKnownTypes
public string VirtualPath_Length_Zero
public string Invalid_app_VirtualPath
public string Collection_CantAddNull
public string Collection_InvalidType
public string VirtualPath_AllowAppRelativePath
public string VirtualPath_AllowRelativePath
public string VirtualPath_AllowAbsolutePath
public string VirtualPath_CantMakeAppRelative
public string VirtualPath_CantMakeAppAbsolute
public string Bad_VirtualPath_in_VirtualFileBase
public string ControlRenderedOutsideServerForm
public string RequiresNT
public string ListEnumVersionMismatch
public string ListEnumCurrentOutOfRange
public string HTMLTextWriterUnbalancedPop
public string Server_too_busy
public string InvalidArgumentValue
public string CompilationMutex_Create
public string CompilationMutex_Null
public string CompilationMutex_Drained
public string CompilationMutex_Failed
public string Failed_to_create_temp_dir
public string Failed_to_execute_child_request
public string Cannot_impersonate
public string No_codegen_access
public string Transaction_not_supported_in_low_trust
public string Debugging_not_supported_in_low_trust
public string Session_state_need_higher_trust
public string ExecuteUrl_not_supported
public string Cannot_execute_url_in_this_context
public string Failed_to_execute_url
public string Aspnet_not_installed
public string Failed_to_initialize_AppDomain
public string Cannot_create_AppDomain
public string Cannot_create_HostEnv
public string Unknown_protocol_id
public string Only_1_HostEnv
public string Not_IRegisteredObject
public string Wellknown_object_already_exists
public string Invalid_IIS_app
public string App_Virtual_Path
public string Hosting_Phys_Path_Changed
public string App_Domain_Restart
public string Hosting_Env_Restart
public string Hosting_Env_IdleTimeout
public string Unhandled_Exception
public string Provider_must_implement_the_interface
public string Permission_set_not_found
public string Require_stable_string_hash_codes
public string Server_variable_cannot_be_modified
public string Cache_url_invalid
public string Invalid_range
public string Invalid_use_of_response_filter
public string Invalid_response_filter
public string Invalid_size
public string Process_information_not_available
public string Error_trying_to_enumerate_files
public string File_enumerator_access_denied
public string File_does_not_exist
public string File_is_hidden
public string Missing_star_mapping
public string Resource_access_forbidden
public string SMTP_TypeCreationError
public string Could_not_create_object_of_type
public string Could_not_create_object_from_clsid
public string Error_executing_child_request_for_path
public string Error_executing_child_request_for_handler
public string Invalid_path_for_child_request
public string Transacted_page_calls_aspcompat
public string Invalid_path_for_remove
public string Get_computer_name_failed
public string Cannot_map_path
public string Cannot_access_mappath_title
public string Cannot_access_mappath_details
public string Cannot_retrieve_request_data
public string Cannot_read_posted_data
public string Cannot_get_query_string
public string Cannot_get_query_string_bytes
public string Not_supported
public string GetGacLocaltion_failed
public string Server_Support_Function_Error
public string Server_Support_Function_Error_Disconnect
public string MachineKeyDataProtectorFactory_FactoryCreationFailed
public string MachineKey_InvalidPurpose
public string Provider_Schema_Version_Not_Match
public string Could_not_create_passport_identity
public string Passport_method_failed
public string Auth_rule_names_cant_contain_char
public string Auth_rule_must_specify_users_andor_roles
public string PageIndex_bad
public string PageSize_bad
public string PageIndex_PageSize_bad
public string Bad_machine_key
public string PassportAuthFailed
public string PassportAuthFailed_Title
public string PassportAuthFailed_Description
public string Unable_to_encrypt_cookie_ticket
public string Unable_to_get_cookie_authentication_validation_key
public string Unable_to_validate_data
public string Unable_to_get_policy_file
public string Wrong_validation_enum
public string Wrong_validation_enum_FX45
public string Wrong_decryption_enum
public string Role_is_not_empty
public string Assess_Denied_Title
public string Assess_Denied_Description2
public string Assess_Denied_Section_Title2
public string Assess_Denied_Misc_Content2
public string Assess_Denied_Description1
public string Assess_Denied_MiscTitle1
public string Assess_Denied_MiscContent1
public string Assess_Denied_Description3
public string Assess_Denied_Section_Title3
public string Assess_Denied_Misc_Content3
public string Assess_Denied_Misc_Content3_2
public string Auth_bad_url
public string Virtual_path_outside_application_not_supported
public string Invalid_decryption_key
public string Invalid_validation_key
public string Passport_not_installed
public string DbFileName_can_not_contain_invalid_chars
public string Provider_can_not_create_file_in_this_trust_level
public string LocalDB_cannot_have_userinstance_flag
public string MembershipPasswordAttribute_InvalidPasswordLength
public string MembershipPasswordAttribute_InvalidPasswordNonAlphanumericCharacters
public string MembershipPasswordAttribute_InvalidPasswordStrength
public string MembershipPasswordAttribute_InvalidRegularExpression
public string LocalizableString_LocalizationFailed
public string Role_provider_name_invalid
public string Def_provider_not_found
public string Provider_no_type_name
public string MembershipSqlProvider_description
public string RoleSqlProvider_description
public string RoleAuthStoreProvider_description
public string RoleWindowsTokenProvider_description
public string ProfileSqlProvider_description
public string Role_Principal_not_fully_constructed
public string Only_one_connection_string_allowed
public string Must_specify_connection_string_or_name
public string Cannot_use_integrated_security
public string Provider_application_name_too_long
public string Provider_bad_password_format
public string Provider_can_not_retrieve_hashed_password
public string Provider_unrecognized_attribute
public string Provider_can_not_decode_hashed_password
public string Profile_group_not_found
public string Profile_not_enabled
public string API_supported_for_current_user_only
public string API_failed_due_to_error
public string Profile_property_already_added
public string Profile_provider_not_found
public string Can_not_issue_cookie_or_redirect
public string Profile_default_provider_not_found
public string Value_must_be_boolean
public string Value_must_be_positive_integer
public string Value_must_be_non_negative_integer
public string Value_too_big
public string Profile_name_can_not_be_empty
public string Profile_name_can_not_contain_period
public string Provider_user_not_found
public string Provider_role_not_found
public string Provider_unknown_failure
public string Provider_role_already_exists
public string Profile_default_provider_not_specified
public string API_not_supported_at_this_level
public string Profile_bad_name
public string Profile_bad_group
public string Def_membership_provider_not_specified
public string Def_membership_provider_not_found
public string Provider_Error
public string Roles_feature_not_enabled
public string Def_role_provider_not_specified
public string Def_role_provider_not_found
public string Membership_PasswordRetrieval_not_supported
public string Membership_UserNotFound
public string Membership_WrongPassword
public string Membership_WrongAnswer
public string Membership_InvalidPassword
public string Membership_InvalidQuestion
public string Membership_InvalidAnswer
public string Membership_InvalidUserName
public string Membership_InvalidEmail
public string Membership_DuplicateUserName
public string Membership_DuplicateEmail
public string Membership_UserRejected
public string Membership_InvalidProviderUserKey
public string Membership_DuplicateProviderUserKey
public string Membership_AccountLockOut
public string Membership_Custom_Password_Validation_Failure
public string MinRequiredNonalphanumericCharacters_can_not_be_more_than_MinRequiredPasswordLength
public string ADMembership_Description
public string ADMembership_InvalidConnectionProtection
public string ADMembership_Connection_username_must_not_be_empty
public string ADMembership_Connection_password_must_not_be_empty
public string ADMembership_Schema_mappings_must_not_be_empty
public string ADMembership_Username_and_password_reqd
public string ADMembership_PasswordReset_without_question_not_supported
public string ADMembership_PasswordQuestionAnswerMapping_not_specified
public string ADMembership_Provider_not_initialized
public string ADMembership_PasswordQ_not_supported
public string ADMembership_PasswordA_not_supported
public string ADMembership_PasswordRetrieval_not_supported_AD
public string ADMembership_Username_mapping_invalid
public string ADMembership_Username_mapping_invalid_ADAM
public string ADMembership_Wrong_syntax
public string ADMembership_MappedAttribute_does_not_exist
public string ADMembership_MappedAttribute_does_not_exist_on_user
public string ADMembership_OnlyLdap_supported
public string ADMembership_ServerlessADsPath_not_supported
public string ADMembership_Secure_connection_not_established
public string ADMembership_Ssl_connection_not_established
public string ADMembership_DefContainer_not_specified
public string ADMembership_DefContainer_does_not_exist
public string ADMembership_Container_must_be_specified
public string ADMembership_Valid_Targets
public string ADMembership_OnlineUsers_not_supported
public string ADMembership_UserProperty_not_supported
public string ADMembership_Provider_SearchMethods_not_supported
public string ADMembership_No_ADAM_Partition
public string ADMembership_Setting_UserId_not_supported
public string ADMembership_Default_Creds_not_supported
public string ADMembership_Container_not_superior
public string ADMembership_Container_does_not_exist
public string ADMembership_Property_not_found_on_object
public string ADMembership_Property_not_found
public string ADMembership_BadPasswordAnswerMappings_not_specified
public string ADMembership_Unknown_Error
public string ADMembership_GCPortsNotSupported
public string ADMembership_attribute_not_single_valued
public string ADMembership_mapping_not_unique
public string ADMembership_InvalidProviderUserKey
public string ADMembership_unable_to_contact_domain
public string ADMembership_unable_to_set_password_port
public string ADMembership_invalid_path
public string ADMembership_Setting_ApplicationName_not_supported
public string ADMembership_Parameter_too_long
public string ADMembership_No_secure_conn_for_password
public string ADMembership_Generated_password_not_complex
public string ADMembership_UPN_contains_backslash
public string Windows_Token_API_not_supported
public string Parameter_can_not_contain_comma
public string Parameter_can_not_be_empty
public string Parameter_too_long
public string Parameter_array_empty
public string Parameter_collection_empty
public string Parameter_duplicate_array_element
public string Membership_password_too_long
public string Provider_this_user_not_found
public string Provider_this_user_already_in_role
public string Provider_this_user_already_not_in_role
public string SaveAs_requires_rooted_path
public string Connection_name_not_specified
public string Connection_string_not_found
public string AppSetting_not_found
public string AppSetting_not_convertible
public string Provider_must_implement_type
public string Feature_not_supported_at_this_level
public string Annoymous_id_module_not_enabled
public string Anonymous_ClearAnonymousIdentifierNotSupported
public string Anonymous_id_too_long
public string Anonymous_id_too_long_2
public string Profile_could_not_create_type
public string DataAccessError_CanNotCreateDataDir_Title
public string DataAccessError_CanNotCreateDataDir_Description
public string DataAccessError_CanNotCreateDataDir_Description_2
public string DataAccessError_MiscSectionTitle
public string DataAccessError_MiscSection_1
public string DataAccessError_MiscSection_2
public string DataAccessError_MiscSection_2_CanNotCreateDataDir
public string DataAccessError_MiscSection_2_CanNotWriteToDBFile_a
public string DataAccessError_MiscSection_2_CanNotWriteToDBFile_b
public string DataAccessError_MiscSection_3
public string DataAccessError_MiscSection_4
public string DataAccessError_MiscSection_4_2
public string DataAccessError_MiscSection_ClickAdd
public string DataAccessError_MiscSection_ClickOK
public string DataAccessError_MiscSection_5
public string SqlExpressError_CanNotWriteToDataDir_Title
public string SqlExpressError_CanNotWriteToDbfFile_Title
public string SqlExpressError_CanNotWriteToDataDir_Description
public string SqlExpressError_CanNotWriteToDbfFile_Description
public string SqlExpressError_CanNotWriteToDataDir_Description_2
public string SqlExpressError_CanNotWriteToDbfFile_Description_2
public string SqlExpressError_Description_1
public string Membership_password_length_incorrect
public string Membership_min_required_non_alphanumeric_characters_incorrect
public string Membership_more_than_one_user_with_email
public string Password_too_short
public string Password_need_more_non_alpha_numeric_chars
public string Password_does_not_match_regular_expression
public string Not_configured_to_support_password_resets
public string Property_not_serializable
public string Connection_not_secure_creating_secure_cookie
public string Profile_anonoymous_not_allowed_to_set_property
public string AuthStore_Application_not_found
public string AuthStore_Scope_not_found
public string AuthStoreNotInstalled_Title
public string AuthStoreNotInstalled_Description
public string AuthStore_policy_file_not_found
public string Wrong_profile_base_type
public string Command_not_recognized
public string Configuration_for_path_not_found
public string Configuration_for_physical_path_not_found
public string Configuration_for_machine_config_not_found
public string Configuration_Section_not_found
public string RSA_Key_Container_not_found
public string RSA_Key_Container_access_denied
public string RSA_Key_Container_already_exists
public string SqlError_Connection_String
public string SqlExpress_MDF_File_Auto_Creation_MiscSectionTitle
public string SqlExpress_MDF_File_Auto_Creation
public string SqlExpress_MDF_File_Auto_Creation_1
public string SqlExpress_MDF_File_Auto_Creation_2
public string SqlExpress_MDF_File_Auto_Creation_3
public string SqlExpress_MDF_File_Auto_Creation_4
public string SqlExpress_file_not_found_in_connection_string
public string SqlExpress_file_not_found
public string Invalid_value_for_sessionstate_stateConnectionString
public string No_database_allowed_in_sqlConnectionString
public string No_database_allowed_in_sql_partition_resolver_string
public string Error_parsing_session_sqlConnectionString
public string Error_parsing_sql_partition_resolver_string
public string Timeout_must_be_positive
public string Cant_make_session_request
public string Cant_make_session_request_partition_resolver
public string Need_v2_State_Server
public string Need_v2_State_Server_partition_resolver
public string Cant_connect_sql_session_database
public string Cant_connect_sql_session_database_partition_resolver
public string Login_failed_sql_session_database
public string Bad_partition_resolver_connection_string
public string Bad_state_server_request
public string Bad_state_server_request_partition_resolver
public string State_Server_detailed_error
public string State_Server_detailed_error_phase0
public string State_Server_detailed_error_phase1
public string State_Server_detailed_error_phase2
public string State_Server_detailed_error_phase3
public string Error_parsing_state_server_partition_resolver_string
public string SessionIDManager_uninit
public string SessionIDManager_InitializeRequest_not_called
public string Cant_save_session_id_because_response_was_flushed
public string Cant_save_session_id_because_id_is_invalid
public string Cant_serialize_session_state
public string Null_value_for_SessionStateItemCollection
public string Session_id_too_long
public string Need_v2_SQL_Server
public string Need_v2_SQL_Server_partition_resolver
public string Cant_have_multiple_session_module
public string Missing_session_custom_provider
public string Invalid_session_custom_provider
public string Invalid_session_state
public string Invalid_cache_based_session_timeout
public string Cant_use_partition_resolve
public string Previous_Page_Not_Authorized
public string Empty_path_has_no_directory
public string Path_must_be_rooted
public string Cannot_exit_up_top_directory
public string Physical_path_not_allowed
public string Invalid_vpath
public string Cannot_access_AspCompat
public string Apartment_component_not_allowed
public string Error_onpagestart
public string Cannot_execute_transacted_code
public string Cannot_post_workitem
public string Cannot_call_ISAPI_functions
public string Bad_attachment
public string Wrong_SimpleWorkerRequest
public string Atio2BadString
public string MakeMonthBadString
public string UtilParseDateTimeBad
public string SmtpMail_not_supported_on_Win7_and_higher
public string Illegal_special_dir
public string Precomp_stub_file
public string Already_precomp
public string Cant_delete_dir
public string Dir_not_empty
public string Dir_not_empty_not_precomp
public string Cant_update_precompiled_app
public string Too_early_for_webfile
public string Bar_dir_in_precompiled_app
public string Assembly_already_loaded
public string Success_precompile
public string Profile_not_precomped
public string Both_culture_and_language
public string Inconsistent_language
public string GetGeneratedSourceFile_Directory_Only
public string Duplicate_appinitialize
public string Virtual_codedir
public string Unknown_buildprovider_extension
public string Directory_progress
public string Bad_Base_Class_In_Code_File
public string Reference_assemblies_not_found
public string Higher_dependencies
public string Invalid_target_framework_version
public string Invalid_lower_target_version
public string Invalid_higher_target_version
public string Compiler_version_20_35_required
public string Compiler_version_40_required
public string Assembly_not_found_in_profile
public string Downlevel_requires_35
public string Invalid_PreApplicationStartMethodAttribute_value
public string Method_can_only_be_called_during_pre_start_init
public string Method_cannot_be_called_during_pre_start_init
public string Pre_application_start_init_method_threw_exception
public string Cant_use_default_items_and_filtered_collection
public string Children_not_supported_on_not_controls
public string Code_not_supported_on_not_controls
public string Code_not_allowed
public string Compilmode_not_allowed
public string Include_not_allowed
public string Attrib_not_allowed
public string Directive_not_allowed
public string Event_not_allowed
public string Literal_content_not_allowed
public string Literal_content_not_match_property
public string Too_many_controls
public string Too_many_dependencies
public string Too_many_direct_dependencies
public string Invalid_type
public string Assembly_not_compiled
public string Not_a_src_file
public string Ambiguous_type
public string Unsupported_filename
public string Cannot_convert_from_to
public string Object_tag_must_have_id
public string Invalid_scope
public string Invalid_progid
public string Invalid_clsid
public string Object_tag_must_have_class_classid_or_progid
public string Session_not_enabled
public string Page_ControlState_ControlCannotBeNull
public string Page_theme_not_found
public string Page_theme_invalid_name
public string Page_theme_default_theme_already_defined
public string Page_theme_skinID_already_defined
public string Page_theme_requires_page_header
public string Page_theme_only_controls_allowed
public string Page_theme_skin_file
public string Page_Title_Requires_Head
public string Page_Description_Requires_Head
public string Page_Keywords_Requires_Head
public string DataBoundLiterals_cant_bind
public string TwoWayBinding_requires_ID
public string NoCompileBinding_requires_ID
public string BadlyFormattedBind
public string BadlyFormattedBindItem
public string Property_readonly
public string Property_theme_disabled
public string Type_theme_disabled
public string Collection_readonly_Codeblocks
public string Parent_collections_readonly
public string Property_Not_Persistable
public string Property_Not_Supported
public string Property_Not_ClsCompliant
public string Property_Set_Not_Supported
public string ControlBuilder_InvalidLocalizeValue
public string meta_localize_error
public string meta_reskey_notallowed
public string meta_localize_notallowed
public string Invalid_enum_value
public string Type_not_creatable_from_string
public string Invalid_collection_item_type
public string Invalid_template_container
public string Event_handler_cant_be_empty
public string Events_cant_be_filtered
public string Type_doesnt_have_property
public string Property_doesnt_have_property
public string MasterPage_Multiple_content
public string MasterPage_doesnt_have_contentplaceholder
public string MasterPage_MasterPageFile
public string MasterPage_MasterPage
public string MasterPage_Circular_Master_Not_Allowed
public string MasterPage_Cannot_ApplyTo_ReadOnly_Collection
public string Only_Content_supported_on_content_page
public string Content_allowed_in_top_level_only
public string Content_only_allowed_in_content_page
public string Content_only_one_contentPlaceHolderID_allowed
public string Invalid_master_base
public string Invalid_typeless_reference
public string Bad_masterPage_ext
public string Illegal_Device
public string Illegal_Resource_Builder
public string Too_many_filters
public string Device_unsupported_in_directive
public string Cannot_add_value_not_collection
public string ControlBuilder_CollectionHasNoAddMethod
public string Cannot_set_property
public string Cannot_set_recursive_skin
public string Cannot_evaluate_expression
public string Cannot_init
public string Unexpected_Directory
public string Circular_include
public string Unexpected_eof_looking_for_tag
public string Invalid_app_file_content
public string Invalid_use_of_config_uc
public string Page_scope_in_global_asax
public string App_session_only_valid_in_global_asax
public string Multiple_forms_not_allowed
public string Postback_ctrl_not_found
public string Ctrl_not_data_handler
public string Transfer_not_allowed_in_callback
public string Redirect_not_allowed_in_callback
public string Script_tag_without_src_must_have_content
public string Unknown_server_tag
public string Ambiguous_server_tag
public string Invalid_type_for_input_tag
public string Control_type_not_allowed
public string Base_type_not_allowed
public string Reference_not_allowed
public string Id_already_used
public string Duplicate_id_used
public string Only_one_directive_allowed
public string Invalid_res_expr
public string Res_not_found
public string Res_not_found_with_class_and_key
public string Invalid_cache_settings_location
public string Registered_async_tasks_remain
public string Async_tasks_wrong_thread
public string Async_task_timed_out
public string ClientScriptManager_RegisterForEventValidation_Too_Early
public string ClientScriptManager_InvalidPostBackArgument
public string ClientScriptManager_JqueryNotRegistered
public string DesignTimeTemplateParser_ErrorParsingTheme
public string Duplicate_registered_tag
public string Empty_attribute
public string Space_attribute
public string Empty_expression
public string ControlBuilder_DatabindingRequiresEvent
public string ControlBuilder_TwoWayBindingNonProperty
public string ControlBuilder_CannotHaveMultipleBoundEntries
public string ControlBuilder_ExpressionsNotAllowedInThemes
public string FilteredAttributeDictionary_ArgumentMustBeString
public string HotSpotCollection_InvalidType
public string HotSpotCollection_InvalidTypeIndex
public string Invalid_attribute_value
public string Invalid_boolean_attribute
public string Invalid_integer_attribute
public string Invalid_nonnegative_integer_attribute
public string Invalid_positive_integer_attribute
public string Invalid_non_zero_hexadecimal_attribute
public string Invalid_hash_algorithm_type
public string Invalid_enum_attribute
public string Invalid_culture_attribute
public string Invalid_temp_directory
public string Invalid_reference_directive
public string Invalid_reference_directive_attrib
public string Invalid_typeNameOrVirtualPath_directive
public string Invalid_tagprefix_entry
public string Mapped_type_must_inherit
public string Missing_required_attribute
public string Missing_required_attributes
public string Attr_not_supported_in_directive
public string Attr_not_supported_in_ucdirective
public string Attr_not_supported_in_pagedirective
public string Invalid_attr
public string Attrib_parse_error
public string Missing_attr
public string Missing_output_cache_attr
public string Missing_varybyparam_attr
public string Missing_directive
public string Unknown_directive
public string Malformed_server_tag
public string Malformed_server_block
public string Server_tags_cant_contain_percent_constructs
public string Include_not_allowed_in_server_script_tag
public string Incompatible_with_get_bufferless_input_stream
public string Incompatible_with_get_buffered_input_stream
public string Incompatible_with_input_stream
public string Invalid_operation_with_get_buffered_input_stream
public string Only_file_virtual_supported_on_server_include
public string Runat_can_only_be_server
public string Invalid_identifier
public string Invalid_resourcekey
public string ControlBuilder_IDMustUseAttribute
public string ControlBuilder_CannotHaveComplexString
public string ControlBuilder_ParseTimeDataNotAvailable
public string Duplicate_attr_in_directive
public string Duplicate_attr_in_tag
public string Non_existent_base_type
public string Invalid_type_to_inherit_from
public string Invalid_type_to_implement
public string Error_page_not_supported_when_buffering_off
public string Enablesessionstate_must_be_true_false_or_readonly
public string Attributes_mutually_exclusive
public string Async_and_aspcompat
public string Async_and_transaction
public string Async_required
public string Async_addhandler_too_late
public string Async_operation_disabled
public string Async_operation_pending
public string Async_null_asyncresult
public string Async_operation_cannot_be_started
public string Async_operation_cannot_be_pending
public string Server_execute_blocked_on_async_handler
public string Mixed_lang_not_supported
public string Inconsistent_CodeFile_Language
public string Codefile_without_inherits
public string CodeFileBaseClass_Without_Codefile
public string Invalid_lang
public string Invalid_lang_extension
public string Cant_use_nocompile_uc
public string Invalid_CodeSubDirectory_Not_Exist
public string Invalid_CodeSubDirectory
public string Reserved_AssemblyName
public string Empty_extension
public string Base_class_field_with_type_different_from_type_of_control
public string ControlSkin_cannot_contain_controls
public string Inner_Content_not_literal
public string Invalid_client_target
public string Empty_file_name
public string SetStyleSheetThemeCannotBeSet
public string PropertySetBeforePageEvent
public string PropertySetBeforeStyleSheetApplied
public string PropertySetBeforePreInitOrAddToControls
public string PropertySetAfterFrameworkInitialize
public string StyleSheetAreadyAppliedOnControl
public string Control_CannotOwnSelf
public string AdRotator_cant_open_file
public string AdRotator_cant_open_file_no_permission
public string AdRotator_parse_error
public string AdRotator_no_advertisements
public string AdRotator_only_one_datasource
public string AdRotator_invalid_integer_format
public string AdRotator_expect_records_with_advertisement_properties
public string Validator_control_blank
public string Validator_control_not_found
public string Validator_bad_compare_control
public string Validator_bad_control_type
public string Validator_value_bad_type
public string Validator_range_overalap
public string Validator_bad_regex
public string ValSummary_error_message_1
public string ValSummary_error_message_2
public string ViewState_MissingViewStateField
public string ViewState_InvalidViewState
public string ViewState_InvalidViewStatePlus
public string ClientDisconnected
public string HttpBufferlessInputStream_ClientDisconnected
public string ViewState_ClientDisconnected
public string ViewState_AuthenticationFailed
public string Control_does_not_allow_children
public string DataBinder_Prop_Not_Found
public string DataBinder_Invalid_Indexed_Expr
public string DataBinder_No_Indexed_Accessor
public string XPathBinder_MustBeIXPathNavigable
public string XPathBinder_MustHaveXmlNodes
public string Field_Not_Found
public string DataItem_Not_Found
public string DataGrid_Missing_VirtualItemCount
public string DataGrid_NoAutoGenColumns
public string GridView_Missing_VirtualItemCount
public string GridView_NoAutoGenFields
public string GridView_DataSourceReturnedNullView
public string GridView_UnhandledEvent
public string GridView_MustBeParented
public string GridView_DataKeyNamesMustBeSpecified
public string GridView_PersistedSelectionRequiresDataKeysNames
public string DetailsView_NoAutoGenFields
public string DetailsView_UnhandledEvent
public string DetailsView_DataSourceMustBeCollection
public string DetailsView_MustBeParented
public string FileUpload_AllowMultiple
public string FileUpload_StreamNotSeekable
public string FileUpload_StreamTooLong
public string FileUpload_StreamLengthNotReached
public string FormView_UnhandledEvent
public string FormView_DataSourceMustBeCollection
public string DetailsViewFormView_ControlMustBeInEditMode
public string DetailsViewFormView_ControlMustBeInInsertMode
public string DataBoundControl_InvalidDataPropertyChange
public string DataBoundControl_NullView
public string DataBoundControl_InvalidDataSourceType
public string DataBoundControl_DataSourceDoesntSupportPaging
public string DataBoundControl_CallingDataMethods
public string DataBoundControl_NeedICollectionOrTotalRowCount
public string DataBoundControlHelper_NoNamingContainer
public string HierarchicalDataBoundControl_InvalidDataSource
public string DataBoundControl_OnCreatingModelDataSource
public string HierarchicalDataControl_ViewNotFound
public string HierarchicalDataControl_DataSourceIDMustBeHierarchicalDataControl
public string HierarchicalDataControl_DataSourceDoesntExist
public string DataControl_ViewNotFound
public string DataControl_DataSourceIDMustBeDataControl
public string DataControl_DataSourceDoesntExist
public string DataControl_MultipleDataSources
public string DataControl_ItemType_MultipleDataSources
public string DataControlField_NoContainer
public string DataControlField_CallbacksNotSupported
public string DataControlFieldCollection_InvalidType
public string DataControlFieldCollection_InvalidTypeIndex
public string BoundField_WrongControlType
public string CheckBoxField_WrongControlType
public string CheckBoxField_CouldntParseAsBoolean
public string CheckBoxField_NotSupported
public string CommandField_CallbacksNotSupported
public string ImageField_WrongControlType
public string TemplateField_CallbacksNotSupported
public string PagedDataSource_Cannot_Get_Count
public string Cannot_Have_Children_Of_Type
public string Control_Cannot_Databind
public string InnerHtml_not_supported
public string InnerText_not_supported
public string ListControl_SelectionOutOfRange
public string ListControl_RenderWhenDataEmptyNotSupportedWithTableLayout
public string ListControl_RenderWhenDataEmpty
public string BulletedList_SelectionNotSupported
public string BulletedList_TextNotSupported
public string CannotUseParentPostBackWhenValidating
public string CannotSetValidationOnDataControlButtons
public string CannotSetValidationOnPagerButtons
public string Invalid_DataSource_Type
public string Invalid_CurrentPageIndex
public string ListSource_Without_DataMembers
public string ListSource_Missing_DataMember
public string Enumerator_MoveNext_Not_Called
public string Sample_Databound_Text
public string Resource_problem
public string Duplicate_Resource_File
public string Property_Had_Malformed_Url
public string TypeResService_Needed
public string DataList_TemplateTableNotFound
public string DataList_DataKeyFieldMustBeSpecified
public string DataList_LayoutNotSupported
public string EnumAttributeInvalidString
public string UnitParseNumericPart
public string UnitParseNoDigits
public string IsValid_Cant_Be_Called
public string Invalid_HtmlTextWriter
public string Form_Needs_Page
public string InvalidDefaultAutoFieldGenerator
public string HtmlForm_OnlyIButtonControlCanBeDefaultButton
public string Head_Needs_Page
public string HtmlHead_StyleAlreadyRegistered
public string HtmlHead_OnlyOneHeadAllowed
public string HtmlHead_OnlyOneTitleAllowed
public string Style_RegisteredStylesAreReadOnly
public string Style_InvalidBorderWidth
public string Style_InvalidWidth
public string Style_InvalidHeight
public string Cant_Multiselect_In_Single_Mode
public string Cant_Multiselect
public string HtmlSelect_Cant_Multiselect_In_Single_Mode
public string Controls_Cant_Change_Between_Posts
public string Value_Set_Not_Supported
public string SiteMap_feature_disabled
public string SiteMapNode_readonly
public string SiteMapNodeCollection_Invalid_Type
public string SiteMapProvider_Circular_Provider
public string SiteMapProvider_Invalid_RootNode
public string SiteMapProvider_cannot_remove_root_node
public string XmlSiteMapProvider_cannot_add_node
public string XmlSiteMapProvider_invalid_resource_key
public string XmlSiteMapProvider_resourceKey_cannot_be_empty
public string XmlSiteMapProvider_cannot_find_provider
public string XmlSiteMapProvider_cannot_remove_node
public string XmlSiteMapProvider_missing_siteMapFile
public string XmlSiteMapProvider_Description
public string XmlSiteMapProvider_Not_Initialized
public string XmlSiteMapProvider_Cannot_Be_Inited_Twice
public string XmlSiteMapProvider_Top_Element_Must_Be_SiteMap
public string XmlSiteMapProvider_Only_One_SiteMapNode_Required_At_Top
public string XmlSiteMapProvider_Only_SiteMapNode_Allowed
public string XmlSiteMapProvider_invalid_sitemapnode_returned
public string XmlSiteMapProvider_invalid_GetRootNodeCore
public string XmlSiteMapProvider_Error_loading_Config_file
public string XmlSiteMapProvider_FileName_does_not_exist
public string XmlSiteMapProvider_FileName_already_in_use
public string XmlSiteMapProvider_Invalid_Extension
public string XmlSiteMapProvider_multiple_resource_definition
public string UrlMappings_only_app_relative_url_allowed
public string FileName_does_not_exist
public string SiteMapProvider_Multiple_Providers_With_Identical_Name
public string XmlSiteMapProvider_Multiple_Nodes_With_Identical_Url
public string XmlSiteMapProvider_Multiple_Nodes_With_Identical_Key
public string Provider_Not_Found
public string Provider_does_not_support_policy_for_responses
public string Provider_does_not_support_policy_for_fragments
public string GetOutputCacheProviderName_Invalid
public string OutputCacheExtensibility_CantSerializeDeserializeType
public string Collection_readonly
public string ParameterCollection_NotParameter
public string ControlParameter_CouldNotFindControl
public string ControlParameter_ControlIDNotSpecified
public string ControlParameter_PropertyNameNotSpecified
public string DataSourceCache_InvalidExpiryPolicy
public string DataSourceCache_InvalidDuration
public string DataSourceCache_CacheMustBeEnabled
public string DataSourceView_NoPaging
public string DataSourceView_NoSorting
public string DataSourceView_NoRowCount
public string AccessDataSource_Description
public string AccessDataSource_DisplayName
public string AccessDataSource_CannotSetConnectionString
public string AccessDataSource_CannotSetProvider
public string AccessDataSource_SqlCacheDependencyNotSupported
public string AccessDataSource_DesignTimeRelativePathsNotSupported
public string AccessDataSource_NoPathDiscoveryPermission
public string AccessDataSourceView_SelectRequiresDataFile
public string SqlDataSource_Description
public string SqlDataSource_DisplayName
public string SqlDataSource_InvalidMode
public string SqlDataSource_SqlCacheDependencyNotSupported
public string SqlDataSource_NoDbPermission
public string SqlDataSourceView_SortNotSupported
public string SqlDataSourceView_FilterNotSupported
public string SqlDataSourceView_CacheNotSupported
public string SqlDataSourceView_DeleteNotSupported
public string SqlDataSourceView_InsertNotSupported
public string SqlDataSourceView_UpdateNotSupported
public string SqlDataSourceView_CouldNotCreateConnection
public string SqlDataSourceView_NoPaging
public string SqlDataSourceView_NoSorting
public string SqlDataSourceView_NoRowCount
public string SqlDataSourceView_CountNotValid
public string SqlDataSourceView_SortParameterRequiresStoredProcedure
public string SqlDataSourceView_CommandNotificationNotSupported
public string SqlDataSourceView_Pessimistic
public string SqlDataSourceView_MissingParameters
public string SqlDataSourceView_NoParameters
public string DataSourceView_delete
public string DataSourceView_update
public string ModelDataSourceView_CannotCallOpenGenericMethods
public string ModelDataSourceView_CannotCallMethodsWithOutOrRefParameters
public string ModelDataSourceView_DataMethodNotFound
public string ModelDataSourceView_DeleteNotSupported
public string ModelDataSourceView_InvalidSelectReturnType
public string ModelDataSourceView_InvalidPagingParameters
public string ModelDataSourceView_InvalidSortingParameters
public string ModelDataSourceView_InsertNotSupported
public string ModelDataSourceView_MultipleModelMethodSources
public string ModelDataSourceView_MultipleValueProvidersNotSupported
public string ModelDataSourceView_UpdateNotSupported
public string ModelDataSourceView_SelectNotSupported
public string ModelDataSourceView_SortNotSupportedOnIEnumerable
public string ModelDataSourceView_ParameterCannotBeNull
public string ModelDataSourceView_ParameterValueHasWrongType
public string ObjectDataSource_Description
public string ObjectDataSource_DisplayName
public string ObjectDataSourceView_DeleteNotSupported
public string ObjectDataSourceView_InsertNotSupported
public string ObjectDataSourceView_UpdateNotSupported
public string ObjectDataSourceView_SelectNotSupported
public string ObjectDataSourceView_InsertRequiresValues
public string ObjectDataSourceView_TypeNotSpecified
public string ObjectDataSourceView_TypeNotFound
public string ObjectDataSourceView_MethodNotFoundNoParams
public string ObjectDataSourceView_MethodNotFoundWithParams
public string ObjectDataSourceView_MethodNotFoundForDataObject
public string ObjectDataSourceView_DataObjectTypeNotFound
public string ObjectDataSourceView_DataObjectPropertyNotFound
public string ObjectDataSourceView_DataObjectPropertyReadOnly
public string ObjectDataSourceView_MultipleOverloads
public string ObjectDataSourceView_CacheNotSupportedOnSortedDataView
public string ObjectDataSourceView_CacheNotSupportedOnIDataReader
public string ObjectDataSourceView_SortNotSupportedOnIEnumerable
public string ObjectDataSourceView_FilterNotSupported
public string ObjectDataSourceView_Pessimistic
public string ObjectDataSourceView_NoOldValuesParams
public string ObjectDataSourceView_MissingPagingSettings
public string ObjectDataSourceView_CannotConvertType
public string FilteredDataSetHelper_DataSetHasNoTables
public string StringPropertyBuilder_CannotHaveChildObjects
public string XmlHierarchyData_CouldNotFindNode
public string XmlDataSource_Description
public string XmlDataSource_DesignTimeRelativePathsNotSupported
public string XmlDataSource_DisplayName
public string XmlDataSource_SaveNotAllowed
public string XmlDataSource_NoWebPermission
public string XmlDataSource_CannotChangeWhileLoading
public string XmlDataSource_NeedUniqueIDForCache
public string XmlDataSource_CacheKeyContext
public string DataControlFieldCell_ShouldNotSetValidateRequestMode
public string NeedHeader
public string Form_Required_For_Focus
public string Page_MustCallBeforeAndDuringPreRender
public string RoleGroupCollection_InvalidType
public string Page_CallBackError
public string Page_CallBackInvalid
public string Page_CallBackTargetInvalid
public string NoThemingSupport
public string ControlNonVisual
public string NoFocusSupport
public string PageStatePersister_PageCannotBeNull
public string SessionPageStatePersister_SessionMustBeEnabled
public string Page_MissingDataBindingContext
public string TemplateControl_DataBindingRequiresPage
public string LabelForNotFound
public string Attrib_Sql9_not_allowed
public string FactoryGenerator_TypeNotPublic
public string FactoryGenerator_TypeHasNoParameterlessConstructor
public string FactoryInterface
public string InvalidSerializedData
public string NonSerializableType
public string ErrorSerializingValue
public string Control_ValidateRequestMode
public string Control_Controls
public string Control_ID
public string Control_MaintainState
public string Control_ViewStateMode
public string Control_Visible
public string Control_OnDisposed
public string Control_OnInit
public string Control_OnLoad
public string Control_OnUnload
public string Control_OnPreRender
public string Control_OnDataBind
public string Control_NamingContainer
public string Control_Page
public string Control_Parent
public string Control_TemplateSourceDirectory
public string Control_TemplateControl
public string Control_Site
public string Control_State
public string Control_UniqueID
public string Control_ClientID
public string Control_ClientIDMode
public string Control_SkinId
public string Control_EnableTheming
public string Page_ClientTarget
public string Page_ErrorPage
public string Page_ErrorDescription
public string Page_OnCommitTransaction
public string Page_OnAbortTransaction
public string Page_Illegal_MaxPageStateFieldLength
public string Page_Illegal_AsyncTimeout
public string Page_InvalidUpdateModelAttempt
public string Page_UnobtrusiveValidationMode
public string Page_UpdateModel_UpdateUnsuccessful
public string ObjectDataSource_ConflictDetection
public string ObjectDataSource_ConvertNullToDBNull
public string ObjectDataSource_DataObjectTypeName
public string ObjectDataSource_DeleteMethod
public string ObjectDataSource_DeleteParameters
public string ObjectDataSource_EnablePaging
public string ObjectDataSource_FilterExpression
public string ObjectDataSource_FilterParameters
public string ObjectDataSource_InsertMethod
public string ObjectDataSource_InsertParameters
public string ObjectDataSource_MaximumRowsParameterName
public string ObjectDataSource_SelectCountMethod
public string ObjectDataSource_SelectMethod
public string ObjectDataSource_SelectParameters
public string ObjectDataSource_SortParameterName
public string ObjectDataSource_StartRowIndexParameterName
public string ObjectDataSource_TypeName
public string ObjectDataSource_UpdateMethod
public string ObjectDataSource_UpdateParameters
public string ObjectDataSource_ObjectCreated
public string ObjectDataSource_ObjectCreating
public string ObjectDataSource_ObjectDisposing
public string ObjectDataSource_Selected
public string ObjectDataSource_Selecting
public string ObjectDataSource_ParsingCulture
public string DataSourceCache_Duration
public string DataSourceCache_Enabled
public string DataSourceCache_ExpirationPolicy
public string DataSourceCache_KeyDependency
public string SqlDataSource_ConflictDetection
public string SqlDataSource_ConnectionString
public string SqlDataSource_CancelSelectOnNullParameter
public string SqlDataSource_ProviderName
public string SqlDataSource_DataSourceMode
public string SqlDataSource_DeleteCommand
public string SqlDataSource_DeleteCommandType
public string SqlDataSource_DeleteParameters
public string SqlDataSource_FilterExpression
public string SqlDataSource_FilterParameters
public string SqlDataSource_InsertCommand
public string SqlDataSource_InsertCommandType
public string SqlDataSource_InsertParameters
public string SqlDataSource_SelectCommand
public string SqlDataSource_SelectCommandType
public string SqlDataSource_SelectParameters
public string SqlDataSource_SortParameterName
public string SqlDataSource_UpdateCommand
public string SqlDataSource_UpdateCommandType
public string SqlDataSource_UpdateParameters
public string SqlDataSource_Selected
public string SqlDataSource_Selecting
public string SqlDataSourceCache_SqlCacheDependency
public string Parameter_DbType
public string Parameter_DefaultValue
public string Parameter_Direction
public string Parameter_Name
public string Parameter_Size
public string Parameter_ConvertEmptyStringToNull
public string Parameter_Type
public string Parameter_TypeNotSupported
public string Parameter_ValidateInput
public string ControlParameter_ControlID
public string ControlParameter_PropertyName
public string CookieParameter_CookieName
public string QueryStringParameter_QueryStringField
public string FormParameter_FormField
public string SessionParameter_SessionField
public string ProfileParameter_PropertyName
public string HtmlInputHidden_OnServerChange
public string HtmlInputImage_OnServerClick
public string HtmlInputText_ServerChange
public string HtmlSelect_DataTextField
public string HtmlSelect_DataValueField
public string HtmlSelect_OnServerChange
public string HtmlSelect_DataMember
public string HtmlTextArea_OnServerChange
public string AccessDataSource_DataFile
public string AdRotator_AdvertisementFile
public string AdRotator_AlternateTextField
public string AdRotator_ImageUrlField
public string AdRotator_KeywordFilter
public string AdRotator_NavigateUrlField
public string AdRotator_Target
public string AdRotator_OnAdCreated
public string AssemblyResourceLoader_HandlerNotRegistered
public string AssemblyResourceLoader_InvalidRequest
public string AssemblyResourceLoader_AssemblyNotFound
public string AssemblyResourceLoader_ResourceNotFound
public string AssemblyResourceLoader_NoCircularReferences
public string DataControls_ShowFooter
public string DataControls_ShowHeader
public string DataControls_AutoGenerateColumns
public string Button_CausesValidation
public string WebControl_RepeatLayout
public string DataSource_Updating
public string DataSource_Inserting
public string DataSource_Deleting
public string DataSource_Updated
public string DataSource_Inserted
public string DataSource_Deleted
public string TableItem_VerticalAlign
public string Button_PostBackUrl
public string LoginControls_DefaultRequiredFieldValidatorText
public string LoginControls_SuccessPageUrl
public string LoginControls_EditProfileIconUrl
public string LoginControls_HelpPageIconUrl
public string LoginControls_HelpPageUrl
public string ChangePassword_ChangePasswordButtonImageUrl
public string ChangePassword_ContinueButtonImageUrl
public string PagerSettings_PreviousPageText
public string PagerSettings_NextPageText
public string ChangePassword_UserNameRequiredErrorMessage
public string ChangePassword_ConfirmPasswordCompareErrorMessage
public string LoginControls_ConfirmPasswordRequiredErrorMessage
public string LoginControls_AnswerRequiredErrorMessage
public string LoginControls_TitleText
public string ChangePassword_PasswordRecoveryText
public string ChangePassword_ChangePasswordButtonText
public string ChangePassword_HelpPageText
public string ChangePassword_CreateUserText
public string ChangePassword_SuccessText
public string LoginControls_UserNameLabelText
public string WebControl_SkipLinkText
public string View_HeaderText
public string View_FooterText
public string View_EmptyDataText
public string BoundField_NullDisplayText
public string View_PagerTemplate
public string WebControl_HeaderTemplate
public string View_EmptyDataTemplate
public string LoginControls_TitleTextStyle
public string LoginControls_TextBoxStyle
public string LoginControls_LabelStyle
public string WebControl_InstructionTextStyle
public string WebControl_HyperLinkStyle
public string WebControl_FailureTextStyle
public string View_EmptyDataRowStyle
public string WebControl_HeaderStyle
public string View_RowStyle
public string View_InsertRowStyle
public string View_EditRowStyle
public string DataControls_Columns
public string HotSpot_Target
public string MembershipProvider_Name
public string View_DefaultMode
public string LoginControls_TextLayout
public string UserName_InitialValue
public string WebControl_SelectedIndex
public string View_DataSourceReturnedNullView
public string WebControl_HorizontalAlign
public string TableItem_HorizontalAlign
public string DataSource_OldValuesParameterFormatString
public string Binding_DataMember
public string Item_RepeatDirection
public string DataControls_Caption
public string DataSource_InvalidViewName
public string WebControl_CommandName
public string WebControl_CommandArgument
public string WebControl_BackImageUrl
public string WebControl_TextAlign
public string WebControl_CaptionAlign
public string WebControl_InstructionText
public string DataControls_HeaderStyle
public string DataControls_FooterStyle
public string HotSpot_HotSpotMode
public string DataControls_GridLines
public string Password_InvalidPasswordErrorMessage
public string Table_UseAccessibleHeader
public string HtmlControl_OnServerClick
public string Button_OnCommand
public string Control_OnServerCheckChanged
public string DataControls_OnItemUpdated
public string DataControls_OnItemDeleting
public string DataControls_OnItemInserting
public string DataControls_OnItemUpdating
public string DataControls_OnItemCreated
public string DataControls_OnItemDataBound
public string DataControls_OnItemDeleted
public string DataControls_OnItemInserted
public string DataControls_DataKeyNames
public string DataControls_DataSourceMustBeCollectionWhenNotDataBinding
public string DataControls_OnRowDeleted
public string DataSource_Filtering
public string WebControl_PagerStyle
public string WebControl_CantFindProvider
public string BaseDataList_CellPadding
public string BaseDataList_CellSpacing
public string BaseDataList_DataKeyField
public string BaseDataList_DataKeys
public string BaseDataList_DataMember
public string BaseDataList_OnSelectedIndexChanged
public string BaseValidator_ControlToValidate
public string BaseValidator_ErrorMessage
public string BaseValidator_IsValid
public string BaseValidator_Display
public string BaseValidator_EnableClientScript
public string BaseValidator_SetFocusOnError
public string BaseValidator_Text
public string BaseValidator_ValidationGroup
public string BaseCompareValidator_CultureInvariantValues
public string BoundColumn_DataField
public string BoundColumn_DataFormatString
public string BoundColumn_ReadOnly
public string BoundField_ApplyFormatInEditMode
public string BoundField_DataField
public string BoundField_DataFormatString
public string BoundField_HtmlEncode
public string BoundField_ReadOnly
public string BoundField_ConvertEmptyStringToNull
public string BulletedList_BulletedListDisplayMode
public string BulletedList_BulletImageUrl
public string BulletedList_BulletStyle
public string BulletedList_FirstBulletNumber
public string BulletedList_Target
public string BulletedList_OnClick
public string Button_OnClientClick
public string ButtonColumn_ButtonType
public string ButtonColumn_CausesValidation
public string ButtonColumn_DataTextField
public string ButtonColumn_DataTextFormatString
public string ButtonColumn_Text
public string ButtonColumn_ValidationGroup
public string Button_Text
public string Button_OnClick
public string Button_UseSubmitBehavior
public string CheckBox_AutoPostBack
public string CheckBox_Checked
public string CheckBox_InputAttributes
public string CheckBox_LabelAttributes
public string CheckBox_Text
public string CheckBoxField_Text
public string CheckBoxList_CellPadding
public string CheckBoxList_CellSpacing
public string CheckBoxList_RepeatColumns
public string CircleHotSpot_X
public string CircleHotSpot_Y
public string CircleHotSpot_Radius
public string CommandField_DefaultCancelCaption
public string CommandField_DefaultDeleteCaption
public string CommandField_DefaultEditCaption
public string CommandField_DefaultInsertCaption
public string CommandField_DefaultNewCaption
public string CommandField_DefaultSelectCaption
public string CommandField_DefaultUpdateCaption
public string CommandField_CancelImageUrl
public string CommandField_DeleteImageUrl
public string CommandField_EditImageUrl
public string CommandField_InsertImageUrl
public string CommandField_NewImageUrl
public string CommandField_SelectImageUrl
public string CommandField_UpdateImageUrl
public string CommandField_ShowDeleteButton
public string CommandField_ShowCancelButton
public string CommandField_ShowInsertButton
public string CommandField_ShowEditButton
public string CommandField_ShowSelectButton
public string CommandField_CancelText
public string CommandField_DeleteText
public string CommandField_EditText
public string CommandField_InsertText
public string CommandField_NewText
public string CommandField_SelectText
public string CommandField_UpdateText
public string ButtonFieldBase_ButtonType
public string ButtonFieldBase_CausesValidation
public string ButtonFieldBase_ValidationGroup
public string ButtonField_DataTextField
public string ButtonField_DataTextFormatString
public string ButtonField_ImageUrl
public string ButtonField_Text
public string ChangePassword_CancelButtonType
public string ChangePassword_ContinueButtonType
public string ChangePassword_ChangePasswordButtonType
public string ChangePassword_CancelButtonImageUrl
public string ChangePassword_CancelButtonText
public string ChangePassword_CancelButtonStyle
public string ChangePassword_CancelButtonClick
public string ChangePassword_CancelDestinationPageUrl
public string ChangePassword_ChangePasswordError
public string ChangePassword_ChangedPassword
public string ChangePassword_ChangingPassword
public string ChangePassword_ChangePasswordFailureText
public string ChangePassword_ContinueButtonClick
public string LoginControls_ContinueDestinationPageUrl
public string ChangePassword_ContinueButtonText
public string ChangePassword_ContinueButtonStyle
public string ChangePassword_CreateUserIconUrl
public string ChangePassword_CreateUserUrl
public string ChangePassword_DefaultChangePasswordTitleText
public string ChangePassword_DefaultChangePasswordFailureText
public string ChangePassword_DefaultCancelButtonText
public string ChangePassword_DefaultConfirmPasswordRequiredErrorMessage
public string ChangePassword_DefaultConfirmNewPasswordLabelText
public string ChangePassword_DefaultContinueButtonText
public string ChangePassword_DefaultNewPasswordLabelText
public string ChangePassword_DefaultNewPasswordRequiredErrorMessage
public string ChangePassword_DefaultConfirmPasswordCompareErrorMessage
public string ChangePassword_DefaultPasswordRequiredErrorMessage
public string ChangePassword_DefaultChangePasswordButtonText
public string ChangePassword_DefaultSuccessTitleText
public string ChangePassword_DefaultSuccessText
public string ChangePassword_DefaultUserNameLabelText
public string ChangePassword_DefaultUserNameRequiredErrorMessage
public string ChangePassword_EditProfileText
public string ChangePassword_EditProfileUrl
public string ChangePassword_DisplayUserName
public string ChangePassword_InvalidBorderPadding
public string ChangePassword_PasswordHintText
public string ChangePassword_MailDefinition
public string ChangePassword_NewPasswordRegularExpressionErrorMessage
public string ChangePassword_NewPasswordLabelText
public string ChangePassword_NewPasswordRegularExpression
public string ChangePassword_NewPasswordRequiredErrorMessage
public string ChangePassword_NoCurrentPasswordTextBox
public string ChangePassword_NoNewPasswordTextBox
public string ChangePassword_NoUserNameTextBox
public string ChangePassword_UserNameTextBoxNotAllowed
public string ChangePassword_PasswordHintStyle
public string ChangePassword_PasswordRecoveryIconUrl
public string ChangePassword_PasswordRecoveryUrl
public string ChangePassword_PasswordRequiredErrorMessage
public string ChangePassword_SendingMail
public string ChangePassword_SendMailError
public string ChangePassword_ChangePasswordButtonStyle
public string ChangePassword_SuccessTitleText
public string ChangePassword_SuccessTextStyle
public string ChangePassword_ConfirmNewPasswordLabelText
public string ChangePassword_ValidatorTextStyle
public string CompareValidator_ControlToCompare
public string CompareValidator_Operator
public string CompareValidator_ValueToCompare
public string Content_ContentPlaceHolderID
public string ContentPlaceHolder_only_in_master
public string ContentPlaceHolder_duplicate_contentPlaceHolderID
public string CreateUserWizard_AutoGeneratePassword
public string CreateUserWizard_Answer
public string CreateUserWizard_InvalidAnswerErrorMessage
public string CreateUserWizard_AnswerLabelText
public string CreateUserWizard_CompleteSuccessText
public string CreateUserWizard_ContinueButtonType
public string CreateUserWizard_CreatingUser
public string CreateUserWizard_CreatedUser
public string CreateUserWizard_ConfirmPasswordLabelText
public string CreateUserWizard_ContinueButtonText
public string CreateUserWizard_ContinueButtonStyle
public string CreateUserWizard_ContinueButtonClick
public string CreateUserWizard_CreateUserButtonImageUrl
public string CreateUserWizard_CreateUserButtonType
public string CreateUserWizard_CreateUserButtonText
public string CreateUserWizard_CreateUserButtonStyle
public string CreateUserWizard_CreateUserError
public string CreateUserWizard_CreateUserStep
public string CreateUserWizard_DefaultConfirmPasswordCompareErrorMessage
public string CreateUserWizard_DefaultConfirmPasswordRequiredErrorMessage
public string CreateUserWizard_DefaultConfirmPasswordLabelText
public string CreateUserWizard_DefaultContinueButtonText
public string CreateUserWizard_DefaultCreateUserButtonText
public string CreateUserWizard_DefaultDuplicateUserNameErrorMessage
public string CreateUserWizard_DefaultDuplicateEmailErrorMessage
public string CreateUserWizard_DefaultEmailLabelText
public string CreateUserWizard_DefaultUnknownErrorMessage
public string CreateUserWizard_DefaultInvalidEmailErrorMessage
public string CreateUserWizard_DefaultInvalidPasswordErrorMessage
public string CreateUserWizard_DefaultCompleteTitleText
public string CreateUserWizard_DefaultPasswordRequiredErrorMessage
public string CreateUserWizard_DefaultQuestionLabelText
public string CreateUserWizard_DefaultInvalidQuestionErrorMessage
public string CreateUserWizard_DefaultInvalidAnswerErrorMessage
public string CreateUserWizard_DefaultAnswerLabelText
public string CreateUserWizard_DefaultEmailRegularExpressionErrorMessage
public string CreateUserWizard_DefaultCompleteSuccessText
public string CreateUserWizard_DefaultCreateUserTitleText
public string CreateUserWizard_DefaultUserNameLabelText
public string CreateUserWizard_DefaultUserNameRequiredErrorMessage
public string CreateUserWizard_DefaultAnswerRequiredErrorMessage
public string CreateUserWizard_DefaultEmailRequiredErrorMessage
public string CreateUserWizard_DefaultQuestionRequiredErrorMessage
public string CreateUserWizard_DuplicateEmailErrorMessage
public string CreateUserWizard_DuplicateUserNameErrorMessage
public string CreateUserWizard_EditProfileText
public string CreateUserWizard_EditProfileUrl
public string CreateUserWizard_Email
public string CreateUserWizard_EmailRegularExpression
public string CreateUserWizard_EmailRegularExpressionErrorMessage
public string CreateUserWizard_InvalidEmailErrorMessage
public string CreateUserWizard_EmailLabelText
public string CreateUserWizard_UnknownErrorMessage
public string CreateUserWizard_CompleteStep
public string CreateUserWizard_DisableCreatedUser
public string CreateUserWizard_LoginCreatedUser
public string CreateUserWizard_QuestionAndAnswerRequired
public string CreateUserWizard_RequireEmail
public string CreateUserWizard_ErrorMessageStyle
public string CreateUserWizard_PasswordHintStyle
public string CreateUserWizard_MailDefinition
public string CreateUserWizard_InvalidPasswordErrorMessage
public string CreateUserWizard_PasswordRegularExpression
public string CreateUserWizard_PasswordRegularExpressionErrorMessage
public string CreateUserWizard_PasswordRequiredErrorMessage
public string CreateUserWizard_NoPasswordTextBox
public string CreateUserWizard_NoUserNameTextBox
public string CreateUserWizard_NoEmailTextBox
public string CreateUserWizard_NoQuestionTextBox
public string CreateUserWizard_NoAnswerTextBox
public string CreateUserWizard_Question
public string CreateUserWizard_InvalidQuestionErrorMessage
public string CreateUserWizard_QuestionLabelText
public string CreateUserWizard_QuestionRequiredErrorMessage
public string CreateUserWizard_EmailRequiredErrorMessage
public string CreateUserWizard_SendMailError
public string CreateUserWizard_SideBar_Label_Not_Found
public string CreateUserWizard_CompleteSuccessTextStyle
public string CreateUserWizard_DuplicateCreateUserWizardStep
public string CreateUserWizard_DuplicateCompleteWizardStep
public string CreateUserWizard_ValidatorTextStyle
public string TemplatedWizardStep_ContentTemplate
public string TemplatedWizardStep_CustomNavigationTemplate
public string CreateUserWizardStep_AllowReturnCannotBeSet
public string CreateUserWizardStep_StepTypeCannotBeSet
public string CreateUserWizardStep_OnlyAllowedInCreateUserWizard
public string CompleteWizardStep_OnlyAllowedInCreateUserWizard
public string CustomValidator_ClientValidationFunction
public string CustomValidator_ValidateEmptyText
public string CustomValidator_ServerValidate
public string BaseDataBoundControl_DataSourceID
public string BaseDataBoundControl_DataSource
public string BaseDataBoundControl_OnDataBound
public string DataBoundControl_DataMember
public string DataBoundControl_EnableModelValidation
public string DataBoundControl_ItemType
public string DataBoundControl_SelectMethod
public string DataBoundControl_UpdateMethod
public string DataBoundControl_InsertMethod
public string DataBoundControl_DeleteMethod
public string DataControlField_AccessibleHeaderText
public string DataControlField_ControlStyle
public string DataControlField_FooterStyle
public string DataControlField_FooterText
public string DataControlField_HeaderImageUrl
public string DataControlField_HeaderStyle
public string DataControlField_HeaderText
public string DataControlField_InsertVisible
public string DataControlField_ItemStyle
public string DataControlField_ShowHeader
public string DataControlField_SortExpression
public string DataControlField_Visible
public string DataGrid_AllowCustomPaging
public string DataGrid_AllowPaging
public string DataGrid_AllowSorting
public string DataGrid_AlternatingItemStyle
public string DataGrid_CurrentPageIndex
public string DataGrid_EditItemIndex
public string DataGrid_EditItemStyle
public string DataGrid_ItemStyle
public string DataGrid_Items
public string DataGrid_PageCount
public string DataGrid_PagerStyle
public string DataGrid_PageSize
public string DataGrid_SelectedItem
public string DataGrid_SelectedItemStyle
public string DataGrid_OnCancelCommand
public string DataGrid_OnDeleteCommand
public string DataGrid_OnEditCommand
public string DataGrid_OnItemCommand
public string DataGrid_OnPageIndexChanged
public string DataGrid_OnSortCommand
public string DataGrid_OnUpdateCommand
public string DataGrid_VisibleItemCount
public string DataGridColumn_FooterStyle
public string DataGridColumn_FooterText
public string DataGridColumn_HeaderImageUrl
public string DataGridColumn_HeaderStyle
public string DataGridColumn_HeaderText
public string DataGridColumn_ItemStyle
public string DataGridColumn_SortExpression
public string DataGridColumn_Visible
public string DataGridPagerStyle_Mode
public string DataGridPagerStyle_PageButtonCount
public string DataGridPagerStyle_Position
public string DataGridPagerStyle_Visible
public string DataList_AlternatingItemStyle
public string DataList_AlternatingItemTemplate
public string DataList_EditItemIndex
public string DataList_EditItemStyle
public string DataList_EditItemTemplate
public string DataList_ExtractTemplateRows
public string DataList_FooterTemplate
public string DataList_HeaderTemplate
public string DataList_ItemStyle
public string DataList_Items
public string DataList_ItemTemplate
public string DataList_RepeatColumns
public string DataList_SelectedItemStyle
public string DataList_SelectedItem
public string DataList_SelectedItemTemplate
public string DataList_SeparatorStyle
public string DataList_SeparatorTemplate
public string DataList_OnCancelCommand
public string DataList_OnDeleteCommand
public string DataList_OnEditCommand
public string DataList_OnItemCommand
public string DataList_OnUpdateCommand
public string DetailsView_AllowPaging
public string DetailsView_AlternatingRowStyle
public string DetailsView_AutoGenerateDeleteButton
public string DetailsView_AutoGenerateEditButton
public string DetailsView_AutoGenerateInsertButton
public string DetailsView_AutoGenerateRows
public string DetailsView_CellPadding
public string DetailsView_CellSpacing
public string DetailsView_CommandRowStyle
public string DetailsView_DataKey
public string DetailsView_PageIndex
public string DetailsView_EnablePagingCallbacks
public string DetailsView_FooterStyle
public string DetailsView_FooterTemplate
public string DetailsView_FieldHeaderStyle
public string DetailsView_OnPageIndexChanged
public string DetailsView_OnPageIndexChanging
public string DetailsView_OnItemCommand
public string DetailsView_OnItemCreated
public string DetailsView_OnModeChanged
public string DetailsView_OnModeChanging
public string DetailsView_PagerSettings
public string DetailsView_Fields
public string DetailsView_Rows
public string FontInfo_Name
public string FontInfo_Names
public string FontInfo_Size
public string FontInfo_Bold
public string FontInfo_Italic
public string FontInfo_Underline
public string FontInfo_Strikeout
public string FontInfo_Overline
public string FormView_AllowPaging
public string FormView_CellPadding
public string FormView_CellSpacing
public string FormView_DataKey
public string FormView_PageIndex
public string FormView_EditItemTemplate
public string FormView_RenderOuterTable
public string FormView_FooterStyle
public string FormView_FooterTemplate
public string FormView_InsertItemTemplate
public string FormView_OnPageIndexChanged
public string FormView_OnPageIndexChanging
public string FormView_OnItemCommand
public string FormView_OnItemCreated
public string FormView_OnModeChanged
public string FormView_OnModeChanging
public string FormView_Rows
public string HiddenField_OnValueChanged
public string HiddenField_Value
public string HotSpot_AccessKey
public string HotSpot_AlternateText
public string HotSpot_PostBackValue
public string HotSpot_NavigateUrl
public string HotSpot_TabIndex
public string HyperLink_ImageUrl
public string HyperLink_ImageHeight
public string HyperLink_ImageWidth
public string HyperLink_NavigateUrl
public string HyperLink_Target
public string HyperLink_Text
public string HyperLinkColumn_DataNavigateUrlField
public string HyperLinkColumn_DataTextField
public string HyperLinkColumn_NavigateUrl
public string HyperLinkColumn_Text
public string HyperLinkField_DataNavigateUrlFields
public string HyperLinkField_DataNavigateUrlFormatString
public string HyperLinkField_DataTextField
public string HyperLinkField_DataTextFormatString
public string HyperLinkField_NavigateUrl
public string HyperLinkField_Text
public string Image_AlternateText
public string Image_DescriptionUrl
public string Image_GenerateEmptyAlternateText
public string Image_ImageAlign
public string Image_ImageUrl
public string ImageButton_OnClick
public string ImageButton_OnCommand
public string ImageField_AlternateText
public string ImageField_DataAlternateTextField
public string ImageField_DataAlternateTextFormatString
public string ImageField_ConvertEmptyStringToNull
public string ImageField_ImageUrlField
public string ImageField_ImageUrlFormatString
public string ImageField_NullImageUrl
public string ImageField_ReadOnly
public string ImageMap_Click
public string ImageMap_HotSpots
public string IRenderOuterTableControl_CannotSetStyleWhenDisableRenderOuterTable
public string Label_AssociatedControlID
public string Label_Text
public string Literal_Text
public string Literal_Mode
public string LinkButton_Text
public string LinkButton_OnClick
public string ListBox_Rows
public string ListBox_SelectionMode
public string ListControl_AppendDataBoundItems
public string ListControl_AutoPostBack
public string ListControl_DataTextField
public string ListControl_DataTextFormatString
public string ListControl_DataValueField
public string ListControl_Items
public string ListControl_SelectedItem
public string ListControl_SelectedValue
public string ListControl_OnSelectedIndexChanged
public string ListControl_Text
public string ListControl_TextChanged
public string Login_LoggedIn
public string Login_Authenticate
public string Login_LoggingIn
public string Login_CheckBoxStyle
public string Login_CreateUserUrl
public string Login_CreateUserIconUrl
public string Login_DefaultFailureText
public string LoginControls_DefaultPasswordLabelText
public string Login_DefaultPasswordRequiredErrorMessage
public string Login_DefaultRememberMeText
public string Login_DefaultLoginButtonText
public string Login_DefaultTitleText
public string Login_DefaultUserNameLabelText
public string Login_DefaultUserNameRequiredErrorMessage
public string Login_DestinationPageUrl
public string Login_DisplayRememberMe
public string Login_HelpPageIconUrl
public string Login_InvalidBorderPadding
public string Login_LoginError
public string Login_FailureAction
public string Login_FailureText
public string Login_Orientation
public string Login_NoPasswordTextBox
public string Login_NoUserNameTextBox
public string LoginControls_PasswordLabelText
public string Login_PasswordRecoveryUrl
public string Login_PasswordRecoveryIconUrl
public string Login_PasswordRequiredErrorMessage
public string Login_RememberMeSet
public string Login_RememberMeText
public string LoginControls_RenderOuterTable
public string Login_LoginButtonImageUrl
public string Login_LoginButtonStyle
public string Login_LoginButtonType
public string Login_LoginButtonText
public string Login_BorderPadding
public string Login_ValidatorTextStyle
public string Login_VisibleWhenLoggedIn
public string LoginName_InvalidFormatString
public string LoginName_FormatString
public string LoginName_DesignModeUserName
public string LoginStatus_LoginImageUrl
public string LoginStatus_LoginText
public string LoginStatus_LogoutAction
public string LoginStatus_LogoutImageUrl
public string LoginStatus_LogoutPageUrl
public string LoginStatus_LogoutText
public string LoginStatus_LoggedOut
public string LoginStatus_LoggingOut
public string LoginStatus_DefaultLoginText
public string LoginStatus_DefaultLogoutText
public string LoginView_RoleGroups
public string LoginView_ViewChanged
public string LoginView_ViewChanging
public string EmbeddedMailObject_Name
public string EmbeddedMailObject_Path
public string MailDefinition_EmbeddedObjects
public string MailDefinition_BodyFileName
public string MailDefinition_CC
public string MailDefinition_From
public string MailDefinition_InvalidReplacements
public string MailDefinition_IsBodyHtml
public string MailDefinition_NoFromAddressSpecified
public string MailDefinition_Priority
public string MailDefinition_Subject
public string MenuItemStyle_HorizontalPadding
public string MenuItemStyle_ItemSpacing
public string MenuItemStyle_VerticalPadding
public string MenuItemStyleCollection_InvalidArgument
public string MenuItemBinding_Depth
public string MenuItemBinding_Enabled
public string MenuItemBinding_EnabledField
public string MenuItemBinding_FormatString
public string MenuItemBinding_ImageUrl
public string MenuItemBinding_ImageUrlField
public string MenuItemBinding_NavigateUrl
public string MenuItemBinding_NavigateUrlField
public string MenuItemBinding_PopOutImageUrl
public string MenuItemBinding_PopOutImageUrlField
public string MenuItemBinding_Selectable
public string MenuItemBinding_SelectableField
public string MenuItemBinding_SeparatorImageUrl
public string MenuItemBinding_SeparatorImageUrlField
public string MenuItemBinding_Target
public string MenuItemBinding_TargetField
public string MenuItemBinding_Text
public string MenuItemBinding_TextField
public string MenuItemBinding_ToolTip
public string MenuItemBinding_ToolTipField
public string MenuItemBinding_Value
public string MenuItemBinding_ValueField
public string MenuItem_Enabled
public string MenuItem_ImageUrl
public string MenuItem_NavigateUrl
public string MenuItem_PopOutImageUrl
public string MenuItem_Selectable
public string MenuItem_Selected
public string MenuItem_SeparatorImageUrl
public string MenuItem_Target
public string MenuItem_Text
public string MenuItem_ToolTip
public string MenuItem_Value
public string MenuItemCollection_InvalidArrayType
public string Menu_Bindings
public string Menu_CannotChangeRenderingMode
public string Menu_DataSourceReturnedNullView
public string Menu_DesignTimeDummyItemText
public string Menu_DisappearAfter
public string Menu_DynamicBottomSeparatorImageUrl
public string Menu_DynamicDisplayPopOutImage
public string Menu_DynamicHorizontalOffset
public string Menu_DynamicHoverStyle
public string Menu_DynamicItemFormatString
public string Menu_DynamicMenuItemStyle
public string Menu_DynamicMenuStyle
public string Menu_DynamicPopoutImageUrl
public string Menu_DynamicPopoutImageText
public string Menu_DynamicSelectedStyle
public string Menu_DynamicTemplate
public string Menu_DynamicTopSeparatorImageUrl
public string Menu_DynamicVerticalOffset
public string Menu_IncludeStyleBlock
public string Menu_InvalidDataBinding
public string Menu_InvalidDepth
public string Menu_InvalidNavigation
public string Menu_InvalidSelection
public string Menu_Items
public string Menu_ItemWrap
public string Menu_LevelMenuItemStyles
public string Menu_LevelSelectedStyles
public string Menu_LevelSubMenuStyles
public string Menu_MaximumDynamicDisplayLevels
public string Menu_MaximumDynamicDisplayLevelsInvalid
public string Menu_MenuItemClick
public string Menu_MenuItemDataBound
public string Menu_Orientation
public string Menu_PathSeparator
public string Menu_RenderingMode
public string Menu_ScrollDown
public string Menu_ScrollDownImageUrl
public string Menu_ScrollDownText
public string Menu_ScrollUpImageUrl
public string Menu_SkipLinkTextDefault
public string Menu_ScrollUp
public string Menu_ScrollUpText
public string Menu_StaticBottomSeparatorImageUrl
public string Menu_StaticDisplayLevels
public string Menu_StaticDisplayPopOutImage
public string Menu_StaticHoverStyle
public string Menu_StaticItemFormatString
public string Menu_StaticMenuItemStyle
public string Menu_StaticMenuStyle
public string Menu_StaticPopoutImageText
public string Menu_StaticPopoutImageUrl
public string Menu_StaticSelectedStyle
public string Menu_StaticSubMenuIndent
public string Menu_StaticTemplate
public string Menu_StaticTopSeparatorImageUrl
public string ModelErrorMessage_AssociatedControlID
public string ModelErrorMessage_ModelStateKey
public string ModelErrorMessage_SetFocusOnError
public string MultiView_ActiveView
public string MultiView_ActiveViewChanged
public string MultiView_ActiveViewIndex_out_of_range
public string MultiView_cannot_have_children_of_type
public string Multiview_rendering_block_not_allowed
public string MultiView_Views
public string MultiView_invalid_view_id
public string MultiView_invalid_view_index_format
public string MultiView_view_not_found
public string MultiView_ActiveViewIndex_less_than_minus_one
public string MultiView_ActiveViewIndex_equal_or_greater_than_count
public string View_CannotSetVisible
public string SiteMapPath_CannotFindUrl
public string SiteMapPath_CurrentNodeStyle
public string SiteMapPath_CurrentNodeTemplate
public string SiteMapPath_OnItemDataBound
public string SiteMapPath_NodeStyle
public string SiteMapPath_NodeTemplate
public string SiteMapPath_PathDirection
public string SiteMapPath_PathSeparator
public string SiteMapPath_PathSeparatorTemplate
public string SiteMapPath_PathSeparatorStyle
public string SiteMapPath_Provider
public string SiteMapPath_RenderCurrentNodeAsLink
public string SiteMapPath_RootNodeStyle
public string SiteMapPath_RootNodeTemplate
public string SiteMapPath_SiteMapProvider
public string SiteMapPath_SkipToContentText
public string SiteMapPath_Default_SkipToContentText
public string SiteMapPath_ShowToolTips
public string SiteMapPath_ParentLevelsDisplayed
public string SubMenuStyle_HorizontalPadding
public string SubMenuStyle_VerticalPadding
public string SubMenuStyleCollection_InvalidArgument
public string Panel_BackImageUrl
public string Panel_DefaultButton
public string Panel_Direction
public string Panel_GroupingText
public string Panel_HorizontalAlign
public string Panel_ScrollBars
public string Panel_Wrap
public string PasswordRecovery_AnswerLabelText
public string PasswordRecovery_AnswerLookupError
public string PasswordRecovery_VerifyingAnswer
public string PasswordRecovery_SendingMail
public string PasswordRecovery_VerifyingUser
public string PasswordRecovery_DefaultAnswerLabelText
public string PasswordRecovery_DefaultAnswerRequiredErrorMessage
public string PasswordRecovery_DefaultBody
public string PasswordRecovery_DefaultGeneralFailureText
public string PasswordRecovery_DefaultUserNameFailureText
public string PasswordRecovery_DefaultQuestionInstructionText
public string PasswordRecovery_DefaultQuestionFailureText
public string PasswordRecovery_DefaultQuestionLabelText
public string PasswordRecovery_DefaultQuestionTitleText
public string PasswordRecovery_DefaultSubject
public string PasswordRecovery_DefaultSubmitButtonText
public string PasswordRecovery_DefaultSuccessText
public string PasswordRecovery_DefaultUserNameInstructionText
public string PasswordRecovery_DefaultUserNameLabelText
public string PasswordRecovery_DefaultUserNameRequiredErrorMessage
public string PasswordRecovery_DefaultUserNameTitleText
public string PasswordRecovery_GeneralFailureText
public string PasswordRecovery_InvalidBorderPadding
public string PasswordRecovery_MailDefinition
public string PasswordRecovery_NoUserNameTextBox
public string PasswordRecovery_NoAnswerTextBox
public string PasswordRecovery_QuestionFailureText
public string PasswordRecovery_QuestionInstructionText
public string PasswordRecovery_QuestionLabelText
public string PasswordRecovery_QuestionTemplate
public string PasswordRecovery_QuestionTemplateContainer
public string PasswordRecovery_QuestionTitleText
public string PasswordRecovery_RecoveryNotSupported
public string PasswordRecovery_SubmitButtonStyle
public string PasswordRecovery_SubmitButtonType
public string PasswordRecovery_SuccessTemplate
public string PasswordRecovery_SuccessTemplateContainer
public string PasswordRecovery_SuccessText
public string PasswordRecovery_SuccessTextStyle
public string PasswordRecovery_UserLookupError
public string PasswordRecovery_UserNameFailureText
public string PasswordRecovery_UserNameInstructionText
public string PasswordRecovery_UserNameLabelText
public string PasswordRecovery_UserNameTemplate
public string PasswordRecovery_UserNameTemplateContainer
public string PasswordRecovery_UserNameTitleText
public string PolygonHotSpot_Coordinates
public string RadioButton_GroupName
public string RadioButtonList_CellPadding
public string RadioButtonList_CellSpacing
public string RadioButtonList_RepeatColumns
public string RangeValidator_MaximumValue
public string RangeValidator_MinmumValue
public string RangeValidator_Type
public string ReadOnlyHierarchicalDataSourceView_CantAccessPathInEnumerable
public string RectangleHotSpot_Bottom
public string RectangleHotSpot_Right
public string RectangleHotSpot_Top
public string RectangleHotSpot_Left
public string RegularExpressionValidator_ValidationExpression
public string Repeater_AlternatingItemTemplate
public string Repeater_DataMember
public string Repeater_FooterTemplate
public string Repeater_Items
public string Repeater_ItemTemplate
public string Repeater_OnItemCommand
public string Repeater_SeparatorTemplate
public string RepeatInfo_ListLayoutDoesNotSupportHeaderFooterSeparator
public string RepeatInfo_ListLayoutOnlySupportsVerticalLayout
public string RepeatInfo_ListLayoutDoesNotSupportMultipleColumn
public string RepeatInfo_ListLayoutDoesNotSupportImpliedOuterTable
public string RequiredFieldValidator_InitialValue
public string SiteMapDataSource_Description
public string SiteMapDataSource_DisplayName
public string SiteMapDataSource_Provider
public string SiteMapDataSource_ContainsListCollection
public string SiteMapDataSource_StartingNodeOffset
public string SiteMapDataSource_StartingNodeUrl
public string SiteMapDataSource_SiteMapProvider
public string SiteMapDataSource_ProviderNotFound
public string SiteMapDataSource_DefaultProviderNotFound
public string SiteMapDataSource_ShowStartingNode
public string SiteMapDataSource_StartFromCurrentNode
public string SiteMapDataSource_StartingNodeUrlAndStartFromcurrentNode_Defined
public string GridView_AllowCustomPaging
public string GridView_AllowPaging
public string GridView_AllowSorting
public string GridView_AlternatingRowStyle
public string GridView_AutoGenerateDeleteButton
public string GridView_AutoGenerateEditButton
public string GridView_AutoGenerateSelectButton
public string GridView_CellPadding
public string GridView_CellSpacing
public string GridView_DataKeys
public string GridView_EditIndex
public string GridView_EditRowStyle
public string GridView_EnableSortingAndPagingCallbacks
public string GridView_EnablePersistedSelection
public string GridView_EmptyDataRowStyle
public string GridView_OnRowCancelingEdit
public string GridView_OnRowEditing
public string GridView_OnPageIndexChanging
public string GridView_OnPageIndexChanged
public string GridView_OnSelectedIndexChanged
public string GridView_OnSelectedIndexChanging
public string GridView_OnSorted
public string GridView_OnSorting
public string GridView_OnRowCommand
public string GridView_OnRowCreated
public string GridView_OnRowDataBound
public string GridView_PageCount
public string GridView_PageIndex
public string GridView_PagerSettings
public string GridView_PageSize
public string GridView_RowHeaderColumn
public string GridView_Rows
public string GridView_ShowHeaderWhenEmpty
public string GridView_SelectedIndex
public string GridView_SelectedRow
public string GridView_SelectedRowStyle
public string GridView_SortDirection
public string GridView_SortExpression
public string GridView_SortedAscendingCellStyle
public string GridView_SortedDescendingCellStyle
public string GridView_SortedAscendingHeaderStyle
public string GridView_SortedDescendingHeaderStyle
public string GridView_VirtualItemCount
public string PagerSettings_FirstPageImageUrl
public string PagerSettings_FirstPageText
public string PagerSettings_LastPageImageUrl
public string PagerSettings_LastPageText
public string PagerSettings_Mode
public string PagerSettings_NextPageImageUrl
public string PagerSettings_PageButtonCount
public string PagerSettings_PreviousPageImageUrl
public string PagerStyle_Position
public string PagerStyle_Visible
public string Style_BackColor
public string Style_BorderColor
public string Style_BorderWidth
public string Style_BorderStyle
public string Style_CSSClass
public string Style_Font
public string Style_ForeColor
public string Style_Height
public string Style_Width
public string Substitution_MethodNameDescr
public string Substitution_CannotBeInCachedControl
public string Substitution_BadMethodName
public string Substitution_NotAllowed
public string Substitution_SiteNotAllowed
public string Table_SectionsMustBeInOrder
public string Table_BackImageUrl
public string Table_Caption
public string Table_CellSpacing
public string Table_CellPadding
public string Table_GridLines
public string Table_HorizontalAlign
public string Table_Rows
public string TableCell_AssociatedHeaderCellNotFound
public string TableCell_AssociatedHeaderCellID
public string TableCell_ColumnSpan
public string TableCell_RowSpan
public string TableCell_Text
public string TableCell_Wrap
public string TableHeaderCell_AbbreviatedText
public string TableHeaderCell_Scope
public string TableHeaderCell_CategoryText
public string TableItemStyle_Wrap
public string TableRow_Cells
public string TableRow_TableSection
public string TableSectionStyle_Visible
public string TableStyle_BackImageUrl
public string TableStyle_CellPadding
public string TableStyle_CellSpacing
public string TableStyle_GridLines
public string TableStyle_InvalidCellSpacing
public string TableStyle_InvalidCellPadding
public string TableStyle_HorizontalAlign
public string Control_Missing_Attribute
public string TemplateColumn_EditItemTemplate
public string TemplateColumn_FooterTemplate
public string TemplateColumn_HeaderTemplate
public string TemplateColumn_ItemTemplate
public string TemplateField_AlternatingItemTemplate
public string TemplateField_EditItemTemplate
public string TemplateField_FooterTemplate
public string TemplateField_HeaderTemplate
public string TemplateField_InsertItemTemplate
public string TemplateField_ItemTemplate
public string TextBox_AutoCompleteType
public string TextBox_AutoPostBack
public string TextBox_Columns
public string TextBox_InvalidColumns
public string TextBox_InvalidRows
public string TextBox_MaxLength
public string TextBox_TextMode
public string TextBox_ReadOnly
public string TextBox_Rows
public string TextBox_Text
public string TextBox_Wrap
public string TextBox_OnTextChanged
public string TreeNodeStyle_ChildNodesPadding
public string TreeNodeStyle_HorizontalPadding
public string TreeNodeStyle_ImageUrl
public string TreeNodeStyle_NodeSpacing
public string TreeNodeStyle_VerticalPadding
public string TreeNodeStyleCollection_InvalidArgument
public string TreeNodeBinding_Depth
public string TreeNodeBinding_EmptyBindingText
public string TreeNodeBinding_FormatString
public string TreeNodeBinding_ImageToolTip
public string TreeNodeBinding_ImageToolTipField
public string TreeNodeBinding_ImageUrl
public string TreeNodeBinding_ImageUrlField
public string TreeNodeBinding_NavigateUrl
public string TreeNodeBinding_NavigateUrlField
public string TreeNodeBinding_PopulateOnDemand
public string TreeNodeBinding_SelectAction
public string TreeNodeBinding_ShowCheckBox
public string TreeNodeBinding_Target
public string TreeNodeBinding_TargetField
public string TreeNodeBinding_Text
public string TreeNodeBinding_TextField
public string TreeNodeBinding_ToolTip
public string TreeNodeBinding_ToolTipField
public string TreeNodeBinding_Value
public string TreeNodeBinding_ValueField
public string TreeNodeCollection_InvalidArrayType
public string TreeNode_Checked
public string TreeView_DataSourceReturnedNullView
public string TreeNode_Expanded
public string TreeNode_ImageToolTip
public string TreeNode_ImageUrl
public string TreeView_InvalidDataBinding
public string TreeNode_NavigateUrl
public string TreeNode_PopulateOnDemand
public string TreeView_PopulateOnlyForDataSourceControls
public string TreeView_PopulateOnlyEmptyNodes
public string TreeNode_Selected
public string TreeNode_SelectAction
public string TreeNode_ShowCheckBox
public string TreeNode_Target
public string TreeNode_Text
public string TreeNode_ToolTip
public string TreeNode_Value
public string TreeView_AutoGenerateDataBindings
public string TreeView_DataBindings
public string TreeView_CollapseImageToolTip
public string TreeView_CollapseImageToolTipDefaultValue
public string TreeView_CollapseImageUrl
public string TreeView_Default_SkipLinkText
public string TreeView_EnableClientScript
public string TreeView_ExpandImageToolTip
public string TreeView_ExpandImageToolTipDefaultValue
public string TreeView_ExpandImageUrl
public string TreeView_HoverNodeStyle
public string TreeView_ExpandDepth
public string TreeView_ImageSet
public string TreeView_LeafNodeStyle
public string TreeView_LevelStyles
public string TreeView_LineImagesFolderUrl
public string TreeView_MaxDataBindDepth
public string TreeView_NoExpandImageUrl
public string TreeView_NodeIndent
public string TreeView_Nodes
public string TreeView_NodeStyle
public string TreeView_NodeWrap
public string TreeView_ParentNodeStyle
public string TreeView_PathSeparator
public string TreeView_PopulateNodesFromClient
public string TreeView_RootNodeStyle
public string TreeView_SelectedNodeStyle
public string TreeView_ShowCheckBoxes
public string TreeView_ShowExpandCollapse
public string TreeView_ShowLines
public string TreeView_SkipLinkText
public string TreeView_CheckChanged
public string TreeView_SelectedNodeChanged
public string TreeView_TreeNodeCollapsed
public string TreeView_TreeNodeExpanded
public string TreeView_TreeNodeDataBound
public string TreeView_TreeNodePopulate
public string ValidationSummary_DisplayMode
public string ValidationSummary_HeaderText
public string ValidationSummary_ShowMessageBox
public string ValidationSummary_ShowModelStateErrors
public string ValidationSummary_ShowSummary
public string ValidationSummary_ShowValidationErrors
public string ValidationSummary_EnableClientScript
public string ValidationSummary_ValidationGroup
public string PostBackControl_ValidationGroup
public string AutoPostBackControl_CausesValidation
public string Calendar_Caption
public string Calendar_CellPadding
public string Calendar_CellSpacing
public string Calendar_DayHeaderStyle
public string Calendar_DayNameFormat
public string Calendar_DayStyle
public string Calendar_FirstDayOfWeek
public string Calendar_NextMonthText
public string Calendar_NextPrevFormat
public string Calendar_NextPrevStyle
public string Calendar_OtherMonthDayStyle
public string Calendar_PrevMonthText
public string Calendar_SelectedDate
public string Calendar_SelectedDates
public string Calendar_SelectedDayStyle
public string Calendar_SelectionMode
public string Calendar_SelectMonthText
public string Calendar_SelectorStyle
public string Calendar_SelectWeekText
public string Calendar_ShowDayHeader
public string Calendar_ShowGridLines
public string Calendar_ShowNextPrevMonth
public string Calendar_ShowTitle
public string Calendar_TitleFormat
public string Calendar_TitleStyle
public string Calendar_TodayDayStyle
public string Calendar_TodaysDate
public string Calendar_VisibleDate
public string Calendar_WeekendDayStyle
public string Calendar_OnDayRender
public string Calendar_OnSelectionChanged
public string Calendar_OnVisibleMonthChanged
public string Calendar_TitleText
public string Calendar_PreviousMonthTitle
public string Calendar_NextMonthTitle
public string Calendar_SelectMonthTitle
public string Calendar_SelectWeekTitle
public string View_Activate
public string View_Deactivate
public string ViewCollection_must_contain_view
public string WebControl_AccessKey
public string WebControl_InvalidAccessKey
public string WebControl_Attributes
public string WebControl_BackColor
public string WebControl_BorderColor
public string WebControl_BorderWidth
public string WebControl_BorderStyle
public string WebControl_CSSClassName
public string WebControl_ControlStyle
public string WebControl_ControlStyleCreated
public string WebControl_Enabled
public string WebControl_Font
public string WebControl_ForeColor
public string WebControl_Height
public string WebControl_Style
public string WebControl_TabIndex
public string WebControl_Tooltip
public string WebControl_Width
public string Wizard_ActiveStep
public string Wizard_ActiveStepIndex
public string Wizard_ActiveStepIndex_out_of_range
public string Wizard_CancelButtonClick
public string Wizard_CancelButtonImageUrl
public string Wizard_CancelButtonText
public string Wizard_CancelButtonType
public string Wizard_CancelButtonStyle
public string Wizard_CancelDestinationPageUrl
public string Wizard_CellPadding
public string Wizard_CellSpacing
public string Wizard_Default_CancelButtonText
public string Wizard_DisplayCancelButton
public string Wizard_FinishDestinationPageUrl
public string Wizard_FinishCompleteButtonStyle
public string Wizard_FinishCompleteButtonText
public string Wizard_FinishCompleteButtonType
public string Wizard_FinishCompleteButtonImageUrl
public string Wizard_FinishPreviousButtonStyle
public string Wizard_FinishPreviousButtonText
public string Wizard_FinishPreviousButtonType
public string Wizard_FinishPreviousButtonImageUrl
public string Wizard_FinishNavigationTemplate
public string Wizard_InvalidBubbleEvent
public string Wizard_NavigationButtonStyle
public string Wizard_NavigationStyle
public string Wizard_StepNextButtonStyle
public string Wizard_StepNextButtonText
public string Wizard_StepNextButtonType
public string Wizard_StepNextButtonImageUrl
public string Wizard_StepPreviousButtonStyle
public string Wizard_StepPreviousButtonText
public string Wizard_StepPreviousButtonType
public string Wizard_StepPreviousButtonImageUrl
public string Wizard_SideBarButtonStyle
public string Wizard_DisplaySideBar
public string Wizard_SideBarStyle
public string Wizard_SideBarTemplate
public string Wizard_StartNavigationTemplate
public string Wizard_StartNextButtonStyle
public string Wizard_StartNextButtonText
public string Wizard_StartNextButtonType
public string Wizard_StartNextButtonImageUrl
public string Wizard_Step_Not_In_Wizard
public string Wizard_StepNavigationTemplate
public string Wizard_StepStyle
public string Wizard_WizardSteps
public string Wizard_HeaderText
public string Wizard_Default_SkipToContentText
public string Wizard_ActiveStepChanged
public string Wizard_FinishButtonClick
public string Wizard_NextButtonClick
public string Wizard_PreviousButtonClick
public string Wizard_SideBarButtonClick
public string Wizard_Default_StepPreviousButtonText
public string Wizard_Default_StepNextButtonText
public string Wizard_Default_FinishButtonText
public string Wizard_SideBar_Button_Not_Found
public string Wizard_DataList_Not_Found
public string Wizard_Cannot_Modify_ControlCollection
public string Wizard_Header_Placeholder_Must_Be_Specified_For_HeaderTemplate
public string Wizard_Header_Placeholder_Must_Be_Specified_For_HeaderText
public string Wizard_Navigation_Placeholder_Must_Be_Specified
public string Wizard_Sidebar_Placeholder_Must_Be_Specified
public string Wizard_Step_Placeholder_Must_Be_Specified
public string Wizard_LayoutTemplate
public string Wizard_WizardStepOnly
public string WizardStep_AllowReturn
public string WizardStep_Name
public string WizardStep_Title
public string WizardStep_StepType
public string WizardStep_WrongContainment
public string Xml_DocumentContent
public string Xml_DocumentSource
public string Xml_TransformSource
public string Xml_Document
public string Xml_Transform
public string Xml_TransformArgumentList
public string Xml_XPathNavigator
public string XmlDataSource_Data
public string XmlDataSource_DataFile
public string XmlDataSource_Transform
public string XmlDataSource_TransformFile
public string XmlDataSource_XPath
public string XmlDataSource_Transforming
public string AppearanceEditorPart_Title
public string AppearanceEditorPart_Height
public string AppearanceEditorPart_Width
public string AppearanceEditorPart_ChromeType
public string AppearanceEditorPart_Hidden
public string AppearanceEditorPart_Direction
public string AppearanceEditorPart_PartTitle
public string AppearanceEditorPart_Pixels
public string AppearanceEditorPart_Points
public string AppearanceEditorPart_Picas
public string AppearanceEditorPart_Inches
public string AppearanceEditorPart_Millimeters
public string AppearanceEditorPart_Centimeters
public string AppearanceEditorPart_Percent
public string AppearanceEditorPart_Em
public string AppearanceEditorPart_Ex
public string BehaviorEditorPart_AllowClose
public string BehaviorEditorPart_AllowConnect
public string BehaviorEditorPart_AllowHide
public string BehaviorEditorPart_AllowMinimize
public string BehaviorEditorPart_AllowZoneChange
public string BehaviorEditorPart_ExportMode
public string BehaviorEditorPart_ExportModeNone
public string BehaviorEditorPart_ExportModeAll
public string BehaviorEditorPart_ExportModeNonSensitiveData
public string BehaviorEditorPart_HelpMode
public string BehaviorEditorPart_HelpModeModal
public string BehaviorEditorPart_HelpModeModeless
public string BehaviorEditorPart_HelpModeNavigate
public string BehaviorEditorPart_Description
public string BehaviorEditorPart_TitleLink
public string BehaviorEditorPart_TitleIconImageLink
public string BehaviorEditorPart_CatalogIconImageLink
public string BehaviorEditorPart_HelpLink
public string BehaviorEditorPart_ImportErrorMessage
public string BehaviorEditorPart_AuthorizationFilter
public string BehaviorEditorPart_AllowEdit
public string BehaviorEditorPart_PartTitle
public string BlobPersonalizationState_CantApply
public string BlobPersonalizationState_CantExtract
public string BlobPersonalizationState_DeserializeError
public string BlobPersonalizationState_NotApplied
public string BlobPersonalizationState_NotLoaded
public string CatalogPart_MustBeInZone
public string CatalogPart_SampleWebPartTitle
public string CatalogPart_UnknownDescription
public string CatalogZone_OnlyCatalogParts
public string CatalogZoneBase_AddVerb
public string CatalogZoneBase_CloseVerb
public string CatalogZoneBase_DefaultEmptyZoneText
public string CatalogZoneBase_DefaultSelectTargetZoneText
public string CatalogZoneBase_HeaderText
public string CatalogZoneBase_InstructionText
public string CatalogZoneBase_NoCatalogPartID
public string CatalogZoneBase_PartLinkStyle
public string CatalogZoneBase_SelectCatalogPart
public string CatalogZoneBase_SelectedCatalogPartID
public string CatalogZoneBase_SelectedPartLinkStyle
public string CatalogZoneBase_SelectTargetZoneText
public string CatalogZoneBase_ShowCatalogIcons
public string ConnectionConsumerAttribute_InvalidConnectionPointType
public string ConnectionProviderAttribute_InvalidConnectionPointType
public string ConnectionsZone_CancelVerb
public string ConnectionsZone_ConfigureConnectionTitle
public string ConnectionsZone_ConfigureConnectionTitleDescription
public string ConnectionsZone_ConfigureVerb
public string ConnectionsZone_ConnectToConsumerInstructionText
public string ConnectionsZone_ConnectToConsumerInstructionTextDescription
public string ConnectionsZone_ConnectToConsumerText
public string ConnectionsZone_ConnectToConsumerTextDescription
public string ConnectionsZone_ConnectToConsumerTitle
public string ConnectionsZone_ConnectToConsumerTitleDescription
public string ConnectionsZone_ConnectToProviderInstructionText
public string ConnectionsZone_ConnectToProviderInstructionTextDescription
public string ConnectionsZone_ConnectToProviderText
public string ConnectionsZone_ConnectToProviderTextDescription
public string ConnectionsZone_ConnectToProviderTitle
public string ConnectionsZone_ConnectToProviderTitleDescription
public string ConnectionsZone_ConnectVerb
public string ConnectionsZone_ConsumersInstructionText
public string ConnectionsZone_ConsumersInstructionTextDescription
public string ConnectionsZone_ConsumersTitle
public string ConnectionsZone_ConsumersTitleDescription
public string ConnectionsZone_CloseVerb
public string ConnectionsZone_DisconnectVerb
public string ConnectionsZone_DisconnectInvalid
public string ConnectionsZone_ErrorCantContinueConnectionCreation
public string ConnectionsZone_ErrorMessage
public string ConnectionsZone_Get
public string ConnectionsZone_GetDescription
public string ConnectionsZone_GetFromText
public string ConnectionsZone_GetFromTextDescription
public string ConnectionsZone_HeaderText
public string ConnectionsZone_HeaderTextDescription
public string ConnectionsZone_InstructionText
public string ConnectionsZone_InstructionTextDescription
public string ConnectionsZone_InstructionTitle
public string ConnectionsZone_InstructionTitleDescription
public string ConnectionsZone_MustImplementITransformerConfigurationControl
public string ConnectionsZone_NoConsumers
public string ConnectionsZone_NoExistingConnectionTitle
public string ConnectionsZone_NoExistingConnectionTitleDescription
public string ConnectionsZone_NoExistingConnectionInstructionText
public string ConnectionsZone_NoExistingConnectionInstructionTextDescription
public string ConnectionsZone_NoProviders
public string ConnectionsZone_ProvidersInstructionText
public string ConnectionsZone_ProvidersInstructionTextDescription
public string ConnectionsZone_ProvidersTitle
public string ConnectionsZone_ProvidersTitleDescription
public string ConnectionsZone_SendText
public string ConnectionsZone_SendTextDescription
public string ConnectionsZone_SendToText
public string ConnectionsZone_SendToTextDescription
public string ConnectionsZone_WarningConnectionDisabled
public string ConnectionsZone_WarningMessage
public string ConnectionPoint_InvalidControlType
public string ContentDirection_NotSet
public string ContentDirection_LeftToRight
public string ContentDirection_RightToLeft
public string DeclarativeCatalogPart_PartTitle
public string DeclarativeCatlaogPart_WebPartsListUserControlPath
public string EditorPart_MustBeInZone
public string EditorPart_ErrorBadUrl
public string EditorPart_ErrorConvertingProperty
public string EditorPart_ErrorConvertingPropertyWithType
public string EditorPart_ErrorSettingProperty
public string EditorPart_ErrorSettingPropertyWithExceptionMessage
public string EditorPart_PropertyMaxValue
public string EditorPart_PropertyMinValue
public string EditorPart_PropertyMustBeDecimal
public string EditorPart_PropertyMustBeInteger
public string EditorZone_OnlyEditorParts
public string EditorZoneBase_ApplyVerb
public string EditorZoneBase_CancelVerb
public string EditorZoneBase_DefaultEmptyZoneText
public string EditorZoneBase_DefaultErrorText
public string EditorZoneBase_DefaultHeaderText
public string EditorZoneBase_DefaultInstructionText
public string EditorZoneBase_ErrorText
public string EditorZoneBase_NoEditorPartID
public string EditorZoneBase_OKVerb
public string ErrorWebPart_ErrorText
public string GenericWebPart_CannotWrapWebPart
public string GenericWebPart_CannotWrapOutputCachedControl
public string GenericWebPart_NoID
public string GenericWebPart_CannotModify
public string GenericWebPart_ChildControlIsNull
public string ImportCatalogPart_PartTitle
public string ImportCatalogPart_Browse
public string ImportCatalogPart_BrowseHelpText
public string ImportCatalogPart_Upload
public string ImportCatalogPart_UploadHelpText
public string ImportCatalogPart_UploadButton
public string ImportCatalogPart_UploadButtonText
public string ImportCatalogPart_ImportedPartLabel
public string ImportCatalogPart_ImportedPartErrorLabel
public string ImportCatalogPart_PartImportErrorLabelText
public string ImportCatalogPart_ImportedPartLabelText
public string ImportCatalogPart_NoFileName
public string LayoutEditorPart_ChromeState
public string LayoutEditorPart_Zone
public string LayoutEditorPart_ZoneIndex
public string LayoutEditorPart_PartTitle
public string PageCatalogPart_PartTitle
public string Part_Description
public string Part_ChromeState
public string Part_ChromeType
public string Part_Title
public string Part_Unknown
public string Part_Untitled
public string PartChromeState_Normal
public string PartChromeState_Minimized
public string PartChromeType_Default
public string PartChromeType_TitleAndBorder
public string PartChromeType_TitleOnly
public string PartChromeType_BorderOnly
public string PartChromeType_None
public string PersonalizableTypeEntry_InvalidProperty
public string PersonalizationDictionary_MustBeTypeString
public string PersonalizationDictionary_MustBeTypePersonalizationEntry
public string PersonalizationDictionary_MustBeTypeDictionaryEntryArray
public string PersonalizationProvider_ApplicationNameExceedMaxLength
public string PersonalizationProvider_BadConnection
public string PersonalizationProvider_CantAccess
public string PersonalizationProvider_NoConnection
public string PersonalizationProvider_UnknownProp
public string PersonalizationProvider_WrongType
public string PropertyGridEditorPart_PartTitle
public string PropertyGridEditorPart_DesignModeWebPart_BoolProperty
public string PropertyGridEditorPart_DesignModeWebPart_EnumProperty
public string PropertyGridEditorPart_DesignModeWebPart_StringProperty
public string ProxyWebPartConnectionCollection_ReadOnly
public string RowToFieldTransformer_FieldName
public string RowToFieldTransformer_NoProviderSchema
public string RowToParametersTransformer_DifferentFieldNamesLength
public string RowToParametersTransformer_ConsumerFieldName
public string RowToParametersTransformer_NoConsumerSchema
public string RowToParametersTransformer_ProviderFieldName
public string RowToParametersTransformer_NoProviderSchema
public string SqlPersonalizationProvider_Description
public string ToolZone_CantSetVisible
public string ToolZone_EditUIStyle
public string ToolZone_HeaderCloseVerb
public string ToolZone_HeaderVerbStyle
public string ToolZone_InstructionText
public string ToolZone_InstructionTextStyle
public string ToolZone_LabelStyle
public string ToolZone_DisplayModesReadOnly
public string WebPartTransformerAttribute_Missing
public string WebPartTransformerAttribute_NotTransformer
public string WebPartTransformerAttribute_SameTypes
public string WebPartTransformerCollection_NotEmpty
public string WebPartTransformerCollection_ReadOnly
public string UnknownWebPart
public string WebPart_AllowClose
public string WebPart_AllowConnect
public string WebPart_AllowEdit
public string WebPart_AllowHide
public string WebPart_AllowMinimize
public string WebPart_AllowZoneChange
public string WebPart_AuthorizationFilter
public string WebPart_BadUrl
public string WebPart_CatalogIconImageUrl
public string WebPart_CantSetExportMode
public string WebPart_DefaultImportErrorMessage
public string WebPart_ErrorFormatString
public string WebPart_ExportMode
public string WebPart_HelpMode
public string WebPart_HelpUrl
public string WebPart_Hidden
public string WebPart_HiddenFormatString
public string WebPart_ImportErrorInvalidVersion
public string WebPart_ImportErrorMessage
public string WebPart_ImportErrorNoVersion
public string WebPart_NonWebPart
public string WebPart_NotStandalone
public string WebPart_OnlyStandalone
public string WebPart_SetZoneTemplateTooLate
public string WebPart_TitleIconImageUrl
public string WebPart_TitleUrl
public string WebPart_Collection_DuplicateID
public string WebPartActionVerb_CantSetChecked
public string WebPartCatalogAddVerb_Description
public string WebPartCatalogAddVerb_Text
public string WebPartCatalogCloseVerb_Description
public string WebPartCatalogCloseVerb_Text
public string WebPartChrome_ConfirmExportSensitive
public string WebPartCloseVerb_Description
public string WebPartCloseVerb_Text
public string WebPartConnectVerb_Description
public string WebPartConnectVerb_Text
public string WebPartConnection_ConsumerIDNotSet
public string WebPartConnection_ConsumerRequiresSecondaryInterfaces
public string WebPartConnection_DisabledConnectionPoint
public string WebPartConnection_Duplicate
public string WebPartConnection_IncompatibleConsumerTransformer
public string WebPartConnection_IncompatibleConsumerTransformerWithType
public string WebPartConnection_IncompatibleProviderTransformer
public string WebPartConnection_IncompatibleProviderTransformerWithType
public string WebPartConnection_IncompatibleSecondaryInterfaces
public string WebPartConnection_NoCommonInterface
public string WebPartConnection_NoConsumer
public string WebPartConnection_NoConsumerConnectionPoint
public string WebPartConnection_NoID
public string WebPartConnection_NoProvider
public string WebPartConnection_NoProviderConnectionPoint
public string WebPartConnection_ProviderIDNotSet
public string WebPartConnection_TransformerNotAvailable
public string WebPartConnection_TransformerNotAvailableWithType
public string WebPartConnectionsCancelVerb_Description
public string WebPartConnectionsCancelVerb_Text
public string WebPartConnectionsCloseVerb_Description
public string WebPartConnectionsCloseVerb_Text
public string WebPartConnectionsConfigureVerb_Description
public string WebPartConnectionsConfigureVerb_Text
public string WebPartConnectionsConnectVerb_Description
public string WebPartConnectionsConnectVerb_Text
public string WebPartConnectionsDisconnectVerb_Description
public string WebPartConnectionsDisconnectVerb_Text
public string WebPartDeleteVerb_Description
public string WebPartDeleteVerb_Text
public string WebPartDisplayModeCollection_CantRemove
public string WebPartDisplayModeCollection_CantSet
public string WebPartDisplayModeCollection_DuplicateName
public string WebPartEditorApplyVerb_Description
public string WebPartEditorApplyVerb_Text
public string WebPartEditorCancelVerb_Description
public string WebPartEditorCancelVerb_Text
public string WebPartEditorOKVerb_Description
public string WebPartEditorOKVerb_Text
public string WebPartEditVerb_Description
public string WebPartEditVerb_Text
public string WebPartExportHandler_InvalidArgument
public string WebPartExportHandler_DisabledExportHandler
public string WebPartExportVerb_Description
public string WebPartExportVerb_Text
public string WebPartHeaderCloseVerb_Description
public string WebPartHeaderCloseVerb_Text
public string WebPartHelpVerb_Description
public string WebPartHelpVerb_Text
public string WebPartManager_Personalization
public string WebPartManager_MustRegister
public string WebPartManager_UnknownConnection
public string WebPartManager_AlreadyInConnect
public string WebPartManager_AlreadyInZone
public string WebPartManager_MustBeInConnect
public string WebPartManager_AlreadyInEdit
public string WebPartManager_MustBeInEdit
public string WebPartManager_InvalidConnectionPoint
public string WebPartManager_NoSelectedWebPartConnect
public string WebPartManager_NoSelectedWebPartEdit
public string WebPartManager_MustBeInZone
public string WebPartManager_OnlyOneInstance
public string WebPartManager_AlreadyRegistered
public string WebPartManager_NoZoneID
public string WebPartManager_DuplicateZoneID
public string WebPartManager_CannotModify
public string WebPartManager_NoWebPartID
public string WebPartManager_NoChildControlID
public string WebPartManager_DuplicateWebPartID
public string WebPartManager_StaticConnections
public string WebPartManager_InvalidConsumerSignature
public string WebPartManager_InvalidProviderSignature
public string WebPartManager_ConnectTooLate
public string WebPartManager_DisconnectTooLate
public string WebPartManager_EnableClientScript
public string WebPartManager_ForbiddenType
public string WebPartManager_PartNotExportable
public string WebPartManager_ImportInvalidFormat
public string WebPartManager_ImportInvalidData
public string WebPartManager_RegisterTooLate
public string WebPartManager_ExportSensitiveDataWarning
public string WebPartManager_AlreadyDisconnected
public string WebPartManager_ConnectionsReadOnly
public string WebPartManager_DynamicConnectionsReadOnly
public string WebPartManager_StaticConnectionsReadOnly
public string WebPartManager_DisplayModesReadOnly
public string WebPartManager_InvalidDisplayMode
public string WebPartManager_DisabledDisplayMode
public string WebPartManager_CloseProviderWarning
public string WebPartManager_DefaultCloseProviderWarning
public string WebPartManager_DeleteWarning
public string WebPartManager_DefaultDeleteWarning
public string WebPartManager_CantConnectClosed
public string WebPartManager_DuplicateConnectionID
public string WebPartManager_AuthorizeWebPart
public string WebPartManager_ConnectionsActivated
public string WebPartManager_ConnectionsActivating
public string WebPartManager_DisplayModeChanged
public string WebPartManager_DisplayModeChanging
public string WebPartManager_SelectedWebPartChanged
public string WebPartManager_SelectedWebPartChanging
public string WebPartManager_WebPartAdded
public string WebPartManager_WebPartAdding
public string WebPartManager_WebPartClosed
public string WebPartManager_WebPartClosing
public string WebPartManager_WebPartDeleted
public string WebPartManager_WebPartDeleting
public string WebPartManager_WebPartMoved
public string WebPartManager_WebPartMoving
public string WebPartManager_WebPartsConnected
public string WebPartManager_WebPartsConnecting
public string WebPartManager_WebPartsDisconnected
public string WebPartManager_WebPartsDisconnecting
public string WebPartManager_CantDeleteStatic
public string WebPartManager_CantDeleteSharedInUserScope
public string WebPartManager_CantAddControlType
public string WebPartManager_PathCannotBeEmpty
public string WebPartManager_PathMustBeEmpty
public string WebPartManager_CantCreateInstance
public string WebPartManager_CantCreateInstanceWithType
public string WebPartManager_TypeMustDeriveFromControl
public string WebPartManager_TypeMustDeriveFromControlWithType
public string WebPartManager_InvalidPath
public string WebPartManager_InvalidPathWithPath
public string WebPartManager_CantCreateGeneric
public string WebPartManager_CantBeginConnectingClosed
public string WebPartManager_CantBeginEditingClosed
public string WebPartManager_AlreadyClosed
public string WebPartManager_CantSetEnableTheming
public string WebPartManager_CantConnectToSelf
public string WebPartManager_ErrorLoadingWebPartType
public string WebPartManagerRequired
public string WebPartMenu_DefaultDropDownAlternateText
public string WebPartMenuStyle_ShadowColor
public string WebPartMinimizeVerb_Description
public string WebPartMinimizeVerb_Text
public string WebPartPersonalization_CannotLoadPersonalization
public string WebPartPersonalization_CannotEnterSharedScope
public string WebPartPersonalization_CantCallMethodBeforeInit
public string WebPartPersonalization_CantUsePropertyBeforeInit
public string WebPartPersonalization_Enabled
public string WebPartPersonalization_InitialScope
public string WebPartPersonalization_MustSetBeforeInit
public string WebPartPersonalization_PersonalizationNotEnabled
public string WebPartPersonalization_PersonalizationNotModifiable
public string WebPartPersonalization_PersonalizationStateNotLoaded
public string WebPartPersonalization_ProviderName
public string WebPartPersonalization_ProviderNotFound
public string WebPartPersonalization_SameType
public string WebPartRestoreVerb_Description
public string WebPartRestoreVerb_Text
public string WebPartTracker_CircularConnection
public string WebPartVerb_Checked
public string WebPartVerb_Description
public string WebPartVerb_Enabled
public string WebPartVerb_ImageUrl
public string WebPartVerb_Text
public string WebPartVerb_Visible
public string WebPartZoneBase_AllowLayoutChange
public string WebPartZoneBase_CloseVerb
public string WebPartZoneBase_ConnectVerb
public string WebPartZoneBase_CreateVerbs
public string WebPartZoneBase_DefaultEmptyZoneText
public string WebPartZoneBase_DeleteVerb
public string WebPartZoneBase_DisplayTitleFallback
public string WebPartZoneBase_DragHighlightColor
public string WebPartZoneBase_EditVerb
public string WebPartZoneBase_ExportVerb
public string WebPartZoneBase_HelpVerb
public string WebPartZoneBase_LayoutOrientation
public string WebPartZoneBase_MenuPopupStyle
public string WebPartZoneBase_MenuCheckImageStyle
public string WebPartZoneBase_MenuCheckImageUrl
public string WebPartZoneBase_MenuLabelHoverStyle
public string WebPartZoneBase_MenuLabelStyle
public string WebPartZoneBase_MenuLabelText
public string WebPartZoneBase_MenuPopupImageUrl
public string WebPartZoneBase_MenuVerbHoverStyle
public string WebPartZoneBase_MenuVerbStyle
public string WebPartZoneBase_MinimizeVerb
public string WebPartZoneBase_RestoreVerb
public string WebPartZoneBase_SelectedPartChromeStyle
public string WebPartZoneBase_ShowTitleIcons
public string WebPartZoneBase_TitleBarVerbButtonType
public string WebPartZoneBase_TitleBarVerbStyle
public string WebPartZoneBase_WebPartVerbRenderMode
public string Zone_AddedTooLate
public string Zone_EmptyZoneText
public string Zone_EmptyZoneTextStyle
public string Zone_ErrorStyle
public string Zone_FooterStyle
public string Zone_HeaderStyle
public string Zone_HeaderText
public string Zone_InvalidParent
public string Zone_Padding
public string Zone_PartStyle
public string Zone_PartChromePadding
public string Zone_PartChromeStyle
public string Zone_PartChromeType
public string Zone_PartTitleStyle
public string Zone_VerbButtonType
public string Zone_VerbStyle
public string Zone_SampleHeaderText
public string PersonalizationAdmin_UnexpectedResetSharedStateReturnValue
public string PersonalizationAdmin_UnexpectedResetUserStateReturnValue
public string PersonalizationAdmin_UnexpectedPersonalizationProviderReturnValue
public string PersonalizationStateInfoCollection_CouldNotAddSharedStateInfo
public string PersonalizationStateInfoCollection_CouldNotAddUserStateInfo
public string PersonalizationStateQuery_IncorrectValueType
public string PersonalizationProviderHelper_CannotHaveCommaInString
public string PersonalizationProviderHelper_Empty_Collection
public string PersonalizationProviderHelper_Invalid_Less_Than_Parameter
public string PersonalizationProviderHelper_More_Than_One_Path
public string PersonalizationProviderHelper_Negative_Integer
public string PersonalizationProviderHelper_No_Usernames_Set_In_Shared_Scope
public string PersonalizationProviderHelper_Null_Entries
public string PersonalizationProviderHelper_Null_Or_Empty_String_Entries
public string PersonalizationProviderHelper_TrimmedEmptyString
public string PersonalizationProviderHelper_Trimmed_Entry_Value_Exceed_Maximum_Length
public string StringUtil_Trimmed_String_Exceed_Maximum_Length
public string Category_Accessibility
public string Category_Cache
public string Category_Control
public string Category_Databindings
public string Category_DefaultProperties
public string Category_Links
public string Category_Navigation
public string Category_Paging
public string Category_Parameter
public string Category_Styles
public string Category_Validation
public string Category_Verbs
public string Category_WebPart
public string Category_WebPartAppearance
public string Category_WebPartBehavior
public string Error_Formatter_ASPNET_Error
public string Error_Formatter_Description
public string Error_Formatter_Source_File
public string Error_Formatter_No_Source_File
public string Error_Formatter_Version
public string Error_Formatter_CLR_Build
public string Error_Formatter_ASPNET_Build
public string Error_Formatter_Line
public string Error_Formatter_FusionLog
public string Error_Formatter_FusionLogDesc
public string Unhandled_Err_Error
public string Unhandled_Err_Desc
public string Unhandled_Err_Exception_Details
public string Unhandled_Err_Stack_Trace
public string Unauthorized_Err_Desc1
public string Unauthorized_Err_Desc2
public string Security_Err_Error
public string Security_Err_Desc
public string NotFound_Resource_Not_Found
public string NotFound_Http_404
public string NotFound_Requested_Url
public string Forbidden_Type_Not_Served
public string Forbidden_Extension_Incorrect
public string Forbidden_Extension_Desc
public string Generic_Err_Title
public string Generic_Err_Local_Desc
public string Generic_Err_Remote_Desc
public string Generic_Err_Details_Title
public string Generic_Err_Local_Details_Desc
public string Generic_Err_Remote_Details_Desc
public string Generic_Err_Local_Details_Sample
public string Generic_Err_Remote_Details_Sample
public string Generic_Err_Notes_Title
public string Generic_Err_Notes_Desc
public string Generic_Err_Local_Notes_Sample
public string Generic_Err_Remote_Notes_Sample
public string CustomErrorFailed_Err_Desc
public string WithFile_No_Relevant_Line
public string Src_not_available
public string Src_not_available_nodebug
public string WithFile_Line_Num
public string TmplCompilerErrorTitle
public string TmplCompilerErrorDesc
public string TmplCompilerCompleteOutput
public string TmplCompilerGeneratedFile
public string TmplConfigurationAdditionalError
public string TmplCompilerErrorSecTitle
public string TmplCompilerFatalError
public string TmplCompilerWarningBanner
public string TmplCompilerWarningSecTitle
public string TmplCompilerSourceSecTitle
public string TmplCompilerSourceFileTitle
public string TmplCompilerSourceFileLine
public string TmplCompilerLineHeader
public string Parser_Error
public string Parser_Desc
public string Parser_Error_Message
public string Parser_Source_Error
public string Config_Error
public string Config_Desc
public string File_Circular_Reference
public string CantGenPropertySet
public string Trace_Request
public string Trace_Status_Code
public string Trace_Trace_Information
public string Trace_Category
public string Trace_From_First
public string Trace_Message
public string Trace_Warning
public string Trace_From_Last
public string Trace_Control_Tree
public string Trace_Control_Id
public string Trace_Parent_Id
public string Trace_Type
public string Trace_Viewstate_Size
public string Trace_Controlstate_Size
public string Trace_Render_Size
public string Trace_Session_State
public string Trace_Application_State
public string Trace_Request_Cookies_Collection
public string Trace_Response_Cookies_Collection
public string Trace_Headers_Collection
public string Trace_Response_Headers_Collection
public string Trace_Form_Collection
public string Trace_Querystring_Collection
public string Trace_Server_Variables
public string Trace_Time_of_Request
public string Trace_Url
public string Trace_Request_Type
public string Trace_Request_Encoding
public string Trace_Name
public string Trace_Value
public string Trace_Response_Encoding
public string Trace_Session_Id
public string Trace_No
public string Trace_Application_Key
public string Trace_Session_Key
public string Trace_Size
public string Trace_Request_Details
public string Trace_Application_Trace
public string Trace_Clear_Current
public string Trace_Physical_Directory
public string Trace_Requests_This
public string Trace_Remaining
public string Trace_File
public string Trace_Verb
public string Trace_View_Details
public string Trace_Render_Size_children
public string Trace_Viewstate_Size_Nochildren
public string Trace_Controlstate_Size_Nochildren
public string Trace_Page
public string Trace_Error_Title
public string Trace_Error_LocalOnly_Description
public string Trace_Error_LocalOnly_Details_Desc
public string Trace_Error_LocalOnly_Details_Sample
public string Trace_Error_Enabled_Description
public string Trace_Error_Enabled_Details_Desc
public string Trace_Error_Enabled_Details_Sample
public string WebPageTraceListener_Event
public string Adapter_GoLabel
public string Adapter_OKLabel
public string MenuAdapter_Up
public string MenuAdapter_UpOneLevel
public string MenuAdapter_Expand
public string PageAdapter_MustHaveFormRunatServer
public string PageAdapter_RenderDelegateMustBeInServerForm
public string SQL_Services_Database_Empty_Or_Space_Only_Arg
public string SQL_Services_Cant_connect_sql_database
public string SQL_Services_Invalid_Feature
public string SQL_Services_Error_Deleting_Session_Job
public string SQL_Services_Error_Executing_Command
public string SQL_Services_Error_Cant_Uninstall_Nonempty_Table
public string SQL_Services_Error_Cant_Uninstall_Nonexisting_Database
public string SQL_Services_Error_Cant_use_custom_database
public string SQL_Services_Error_missing_custom_database
public string SQL_Services_Database_contains_invalid_chars
public string Provider_missing_attribute
public string Invalid_provider_attribute
public string Invalid_mail_template_provider_attribute
public string Unexpected_provider_attribute
public string Invalid_provider_positive_attributes
public string Invalid_provider_non_zero_positive_attributes
public string Event_name_not_found
public string Event_name_invalid_code_range
public string Health_mon_profile_not_found
public string Health_mon_provider_not_found
public string Wmi_provider_cant_initialize
public string Invalid_max_event_details_length
public string Health_mon_buffer_mode_not_found
public string Invalid_attribute1_must_less_than_or_equal_attribute2
public string Invalid_attribute1_must_less_than_attribute2
public string MailWebEventProvider_discard_warning
public string MailWebEventProvider_events_drop_warning
public string MailWebEventProvider_summary_body
public string WebEvent_event_email_subject
public string WebEvent_event_group_email_subject
public string WebEvent_event_email_subject_template_error
public string MailWebEventProvider_Warnings
public string MailWebEventProvider_Summary
public string MailWebEventProvider_Application_Info
public string MailWebEventProvider_Events
public string MailWebEventProvider_template_file_not_found_error
public string MailWebEventProvider_template_runtime_error
public string MailWebEventProvider_template_compile_error
public string MailWebEventProvider_template_error_no_details
public string MailWebEventProvider_no_recipient_error
public string Sql_webevent_provider_events_dropped
public string MailWebEventProvider_cannot_send_mail
public string Invalid_eventCode_error
public string Invalid_eventDetailCode_error
public string System_eventCode_not_allowed
public string Event_log_provider_error
public string Wmi_provider_error
public string Webevent_msg_ApplicationStart
public string Webevent_msg_ApplicationShutdown
public string Webevent_msg_ApplicationCompilationStart
public string Webevent_msg_ApplicationCompilationEnd
public string Webevent_msg_ApplicationHeartbeat
public string Webevent_msg_RequestTransactionComplete
public string Webevent_msg_RequestTransactionAbort
public string Webevent_msg_RuntimeErrorRequestAbort
public string Webevent_msg_RuntimeErrorViewStateFailure
public string Webevent_msg_RuntimeErrorValidationFailure
public string Webevent_msg_RuntimeErrorPostTooLarge
public string Webevent_msg_RuntimeErrorUnhandledException
public string Webevent_msg_RuntimeErrorWebResourceFailure_DecryptionError
public string Webevent_msg_RuntimeErrorWebResourceFailure_ResourceMissing
public string Webevent_msg_WebErrorParserError
public string Webevent_msg_WebErrorCompilationError
public string Webevent_msg_WebErrorConfigurationError
public string Webevent_msg_AuditUnhandledSecurityException
public string Webevent_msg_AuditInvalidViewStateFailure
public string Webevent_msg_AuditFormsAuthenticationSuccess
public string Webevent_msg_AuditUrlAuthorizationSuccess
public string Webevent_msg_AuditFileAuthorizationFailure
public string Webevent_msg_AuditFormsAuthenticationFailure
public string Webevent_msg_AuditFileAuthorizationSuccess
public string Webevent_msg_AuditMembershipAuthenticationSuccess
public string Webevent_msg_AuditMembershipAuthenticationFailure
public string Webevent_msg_AuditUrlAuthorizationFailure
public string Webevent_msg_AuditUnhandledAccessException
public string Webevent_msg_OSF_Deserialization_String
public string Webevent_msg_OSF_Deserialization_Binary
public string Webevent_msg_OSF_Deserialization_Type
public string Webevent_msg_Property_Deserialization
public string Webevent_detail_ApplicationShutdownUnknown
public string Webevent_detail_ApplicationShutdownHostingEnvironment
public string Webevent_detail_ApplicationShutdownChangeInGlobalAsax
public string Webevent_detail_ApplicationShutdownConfigurationChange
public string Webevent_detail_ApplicationShutdownUnloadAppDomainCalled
public string Webevent_detail_ApplicationShutdownChangeInSecurityPolicyFile
public string Webevent_detail_ApplicationShutdownBinDirChangeOrDirectoryRename
public string Webevent_detail_ApplicationShutdownBrowsersDirChangeOrDirectoryRename
public string Webevent_detail_ApplicationShutdownCodeDirChangeOrDirectoryRename
public string Webevent_detail_ApplicationShutdownResourcesDirChangeOrDirectoryRename
public string Webevent_detail_ApplicationShutdownIdleTimeout
public string Webevent_detail_ApplicationShutdownPhysicalApplicationPathChanged
public string Webevent_detail_ApplicationShutdownHttpRuntimeClose
public string Webevent_detail_ApplicationShutdownInitializationError
public string Webevent_detail_ApplicationShutdownMaxRecompilationsReached
public string Webevent_detail_ApplicationShutdownBuildManagerChange
public string Webevent_detail_StateServerConnectionError
public string Webevent_detail_InvalidTicketFailure
public string Webevent_detail_ExpiredTicketFailure
public string Webevent_detail_InvalidViewStateMac
public string Webevent_detail_InvalidViewState
public string Webevent_detail_SqlProviderEventsDropped
public string Webevent_event_code
public string Webevent_event_message
public string Webevent_event_time
public string Webevent_event_time_Utc
public string Webevent_event_sequence
public string Webevent_event_occurrence
public string Webevent_event_id
public string Webevent_event_detail_code
public string Webevent_event_process_information
public string Webevent_event_application_information
public string Webevent_event_process_statistics
public string Webevent_event_request_information
public string Webevent_event_exception_information
public string Webevent_event_inner_exception_information
public string Webevent_event_exception_type
public string Webevent_event_exception_message
public string Webevent_event_thread_information
public string Webevent_event_process_id
public string Webevent_event_process_name
public string Webevent_event_account_name
public string Webevent_event_machine_name
public string Webevent_event_application_domain
public string Webevent_event_trust_level
public string Webevent_event_application_virtual_path
public string Webevent_event_application_path
public string Webevent_event_request_url
public string Webevent_event_request_path
public string Webevent_event_user
public string Webevent_event_is_authenticated
public string Webevent_event_is_not_authenticated
public string Webevent_event_authentication_type
public string Webevent_event_process_start_time
public string Webevent_event_thread_count
public string Webevent_event_working_set
public string Webevent_event_peak_working_set
public string Webevent_event_managed_heap_size
public string Webevent_event_application_domain_count
public string Webevent_event_requests_executing
public string Webevent_event_request_queued
public string Webevent_event_request_rejected
public string Webevent_event_thread_id
public string Webevent_event_thread_account_name
public string Webevent_event_is_impersonating
public string Webevent_event_is_not_impersonating
public string Webevent_event_stack_trace
public string Webevent_event_user_host_address
public string Webevent_event_name_to_authenticate
public string Webevent_event_custom_event_details
public string Webevent_event_ViewStateException_information
public string Etw_Batch_Compilation
public string Etw_Success
public string Etw_Failure
public string Config_collection_add_element_without_key
public string Failed_Pipeline_Subscription
public string Cant_Init_Native_Config
public string Cant_Enumerate_NativeDirs
public string Cant_Read_Native_Modules
public string Cant_Create_Process_Host
public string Invalid_AppDomain_Prot_Type
public string Invalid_Process_Prot_Type
public string Invalid_Application_Preload_Provider_Type
public string Invalid_Enabled_Preload_Parameter
public string Failure_ApplicationPreloadUtil_Already_Set
public string Failure_Create_Application_Preload_Provider_Type
public string Failure_Preload_Application_Initialization
public string Failure_Calling_Preload_Provider
public string Failure_Stop_Listener_Channel
public string Failure_Stop_Process_Prot
public string Failure_Start_AppDomain_Listener
public string Failure_Stop_AppDomain_Listener
public string Failure_Stop_AppDomain_Protocol
public string Failure_Start_Integrated_App
public string Failure_Stop_Integrated_App
public string Failure_Shutdown_ProcessHost
public string Failure_AppDomain_Enum
public string Failure_PMH_Ping
public string Failure_PMH_Idle
public string Failure_Create_Listener_Shim
public string Event_Binding_Disallowed
public string Requires_Iis_Integrated_Mode
public string Method_Not_Supported_By_Iis_Integrated_Mode
public string Requires_Iis_7
public string Requires_Iis_75_Integrated
public string Invalid_before_authentication
public string Application_instance_cannot_be_changed
public string Invalid_http_data_chunk
public string Substitution_blocks_cannot_be_modified
public string TransferRequest_cannot_be_invoked_more_than_once
public string Invoke_before_pipeline_event
public string Invalid_queue_limit
public string Queue_limit_is_zero
public string HttpMethodConstraint_ParameterValueMustBeString
public string Route_CannotHaveCatchAllInMultiSegment
public string Route_CannotHaveConsecutiveParameters
public string Route_CannotHaveConsecutiveSeparators
public string Route_CatchAllMustBeLast
public string Route_InvalidParameterName
public string Route_InvalidRouteUrl
public string Route_MismatchedParameter
public string Route_RepeatedParameter
public string Route_ValidationMustBeStringOrCustomConstraint
public string RouteCollection_DuplicateEntry
public string RouteCollection_DuplicateName
public string RouteCollection_NameNotFound
public string RouteCollection_RequiresContext
public string RouteData_RequiredValue
public string RouteTable_ContextMissingRequest
public string UrlRoutingHandler_NoRouteMatches
public string UrlRoutingModule_NoHttpHandler
public string UrlRoutingModule_NoRouteHandler
public string RouteUrlExpression_InvalidExpression
public string PageRouteHandler_InvalidVirtualPath
public string RouteParameter_RouteKey
public string Control_NotADescendentOfNamingContainer
public string DynamicModuleRegistry_ModulesAlreadyInitialized
public string DynamicModuleRegistry_TypeIsNotIHttpModule
public string StateApplication_FullTrustOnly
public string HttpTaskAsyncHandler_CannotExecuteSynchronously
public string SynchronizationContextUtil_AspCompatModeNotCompatible
public string SynchronizationContextUtil_PageAsyncVoidMethodsNotCompatible
public string SynchronizationContextUtil_TaskReturningPageAsyncMethodsNotCompatible
public string SynchronizationContextUtil_PageAsyncTaskTimeoutHandlerParallelNotCompatible
public string SynchronizationContextUtil_WebSocketsNotCompatible
public string SynchronizationContextUtil_UpgradeToTargetFramework45Instructions
public string SynchronizationContextUtil_AddDowngradeAppSettingsSwitch
public string SynchronizationContextUtil_RemoveAppSettingsSwitch
public string SynchronizationContextUtil_ForMoreInformation
public string PageAsyncManager_CannotEnqueue
public string TaskAsyncHelper_ParameterInvalid
public string WebSockets_WebSocketModuleNotEnabled
public string WebSockets_NotAWebSocketRequest
public string WebSockets_OriginCheckFailed
public string WebSockets_SubProtocolCannotBeNegotiated
public string WebSockets_AcceptWebSocketRequestCanOnlyBeCalledOnce
public string WebSockets_CannotBeCalledDuringBeginRequest
public string WebSockets_CannotBeCalledAfterHandlerExecute
public string WebSockets_CannotBeCalledDuringChildExecute
public string WebSockets_UnknownErrorWhileAccepting
public string WebSockets_MethodNotAvailableDuringWebSocketProcessing
public string AspNetWebSocket_SendInProgress
public string AspNetWebSocket_SendMessageTypeInvalid
public string AspNetWebSocket_CloseAlreadySent
public string AspNetWebSocket_ReceiveInProgress
public string AspNetWebSocket_CloseAlreadyReceived
public string AspNetWebSocket_CloseStatusEmptyButCloseDescriptionNonNull
public string AspNetWebSocket_CloseDescriptionTooLong
public string AspNetWebSocket_DisposeNotSupported
public string Common_NullOrEmpty
public string Common_PropertyCannotBeNullOrEmpty
public string ValueProviderResult_ConversionThrew
public string ValueProviderResult_NoConverterExists
public string Common_PropertyNotFound
public string DataAnnotationsModelMetadataProvider_UnknownProperty
public string DataAnnotationsModelMetadataProvider_UnreadableProperty
public string Common_TypeMustDriveFromType
public string DataAnnotationsModelValidatorProvider_ConstructorRequirements
public string ClientDataTypeModelValidatorProvider_FieldMustBeNumeric
public string DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements
public string ValidatableObjectAdapter_IncompatibleType
public string BindingBehavior_ValueNotFound
public string Common_TypeMustImplementInterface
public string GenericModelBinderProvider_ParameterMustSpecifyOpenGenericType
public string GenericModelBinderProvider_TypeArgumentCountMismatch
public string ModelBinderConfig_ValueInvalid
public string ModelBinderConfig_ValueRequired
public string ModelBinderProviderCollection_BinderForTypeNotFound
public string ModelBinderProviderCollection_InvalidBinderType
public string ModelBinderUtil_ModelCannotBeNull
public string ModelBinderUtil_ModelInstanceIsWrong
public string ModelBinderUtil_ModelMetadataCannotBeNull
public string ModelBinderUtil_ModelTypeIsWrong
public string ModelBindingContext_ModelMetadataMustBeSet
public string AppVerifier_Title
public string AppVerifier_Subtitle
public string AppVerifier_BasicInfo_URL
public string AppVerifier_BasicInfo_ErrorCode
public string AppVerifier_BasicInfo_Description
public string AppVerifier_BasicInfo_ThreadInfo
public string AppVerifier_BeginMethodInfo_EntryMethod
public string AppVerifier_BeginMethodInfo_RequestNotification_Integrated
public string AppVerifier_BeginMethodInfo_RequestNotification_NotIntegrated
public string AppVerifier_BeginMethodInfo_CurrentHandler
public string AppVerifier_BeginMethodInfo_ThreadInfo
public string AppVerifier_AsyncCallbackInfo_InvocationCount
public string AppVerifier_AsyncCallbackInfo_FirstInvocation_ThreadInfo
public string AppVerifier_Errors_HttpApplicationInstanceWasNull
public string AppVerifier_Errors_BeginHandlerDelegateWasNull
public string AppVerifier_Errors_AsyncCallbackInvokedMultipleTimes
public string AppVerifier_Errors_AsyncCallbackInvokedWithNullParameter
public string AppVerifier_Errors_AsyncCallbackGivenAsyncResultWhichWasNotCompleted
public string AppVerifier_Errors_AsyncCallbackInvokedAsynchronouslyButAsyncResultWasMarkedCompletedSynchronously
public string AppVerifier_Errors_AsyncCallbackInvokedSynchronouslyButAsyncResultWasNotMarkedCompletedSynchronously
public string AppVerifier_Errors_AsyncCallbackInvokedWithUnexpectedAsyncResultInstance
public string AppVerifier_Errors_AsyncCallbackInvokedEvenThoughBeginHandlerThrew
public string AppVerifier_Errors_AsyncCallbackInvokedWithUnexpectedAsyncResultAsyncState
public string AppVerifier_Errors_AsyncCallbackCalledAfterHttpApplicationReassigned
public string AppVerifier_Errors_BeginHandlerReturnedNull
public string AppVerifier_Errors_BeginHandlerReturnedAsyncResultMarkedCompletedSynchronouslyButWhichWasNotCompleted
public string AppVerifier_Errors_BeginHandlerReturnedAsyncResultMarkedCompletedSynchronouslyButAsyncCallbackNeverCalled
public string AppVerifier_Errors_BeginHandlerReturnedUnexpectedAsyncResultAsyncState
public string AppVerifier_Errors_SyncContextSendOrPostCalledAfterRequestCompleted
internal string GetString(string name, Object[] args)
internal string GetString(CultureInfo culture, string name, Object[] args)
internal string GetString(string name)
internal string GetString(CultureInfo culture, string name)
internal string Format(string resourceFormat, Object[] args)
internal string Format(string resourceFormat, object p1)
internal string Format(string resourceFormat, object p1, object p2)
internal string Format(string resourceFormat, object p1, object p2, object p3)
}
internal System.Collections.Concurrent.SplitOrderedList`2 : object {
private int MaxLoad
private UInt32 BucketSize
private Node<TKey, T> head
private Node<TKey, T> tail
private Node[] buckets
private int count
private int size
private SimpleRwLock<TKey, T> slim
private IEqualityComparer`1<TKey> comparer
private Byte[] reverseTable
private Byte[] logTable
public int Count
public void .ctor(IEqualityComparer`1<TKey> comparer)
public int get_Count()
public T InsertOrUpdate(UInt32 key, TKey subKey, Func`1<T> addGetter, Func`2<T, T> updateGetter)
public T InsertOrUpdate(UInt32 key, TKey subKey, T addValue, T updateValue)
public bool Insert(UInt32 key, TKey subKey, T data)
public T InsertOrGet(UInt32 key, TKey subKey, T data, Func`1<T> dataCreator)
private bool InsertInternal(UInt32 key, TKey subKey, T data, Func`1<T> dataCreator, Node& current)
public bool Find(UInt32 key, TKey subKey, T& data)
public bool CompareExchange(UInt32 key, TKey subKey, T data, Func`2<T, bool> check)
public bool Delete(UInt32 key, TKey subKey, T& data)
public IEnumerator`1<T> GetEnumerator()
private Node<TKey, T> InitializeBucket(UInt32 b)
private UInt32 GetParent(UInt32 v)
private ulong ComputeRegularKey(UInt32 key)
private ulong ComputeDummyKey(UInt32 key)
private Node<TKey, T> GetBucket(UInt32 index)
private Node<TKey, T> SetBucket(UInt32 index, Node<TKey, T> node)
private void CheckSegment(UInt32 segment, bool readLockTaken)
private Node<TKey, T> ListSearch(ulong key, TKey subKey, Node& left, Node<TKey, T> h)
private bool ListDelete(Node<TKey, T> startPoint, ulong key, TKey subKey, T& data)
private bool ListInsert(Node<TKey, T> newNode, Node<TKey, T> startPoint, Node& current, Func`1<T> dataCreator)
private bool ListFind(ulong key, TKey subKey, Node<TKey, T> startPoint, Node& data)
}
internal System.Configuration.NullableStringValidator : ConfigurationValidatorBase {
private Char[] invalidCharacters
private int maxLength
private int minLength
public void .ctor(int minLength)
public void .ctor(int minLength, int maxLength)
public void .ctor(int minLength, int maxLength, string invalidCharacters)
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Data.Design.TypedDataSetGenerator : object {
public ICollection`1<Assembly> ReferencedAssemblies
public ICollection`1<Assembly> get_ReferencedAssemblies()
public string Generate(DataSet dataSet, CodeNamespace codeNamespace, CodeDomProvider codeProvider)
public string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider)
public void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders)
public void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, DbProviderFactory specifiedFactory)
public string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, GenerateOption option)
public void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders, GenerateOption option)
public string GetProviderName(string inputFileContent)
public string GetProviderName(string inputFileContent, string tableName)
}
internal System.InvariantComparer : object {
private CompareInfo m_compareInfo
internal InvariantComparer Default
public int Compare(object a, object b)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal System.MonoToolsLocator : object {
public string Mono
public string McsCSharpCompiler
public string VBCompiler
public string AssemblyLinker
private UInt32 GetModuleFileName(IntPtr hModule, StringBuilder lpFilename, int nSize)
}
internal System.Resources.AssemblyNamesTypeResolutionService : object {
public void .ctor(AssemblyName[] names)
public Assembly GetAssembly(AssemblyName name)
public Assembly GetAssembly(AssemblyName name, bool throwOnError)
public Type GetType(string name)
public Type GetType(string name, bool throwOnError)
public Type GetType(string name, bool throwOnError, bool ignoreCase)
public void ReferenceAssembly(AssemblyName name)
public string GetPathOfAssembly(AssemblyName name)
}
internal System.Resources.ByteArrayFromResXHandler : ResXDataNodeHandler {
private string dataString
public string DataString
public void .ctor(string data)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
public string get_DataString()
}
internal System.Resources.FileRefHandler : ResXDataNodeHandler {
private ResXFileRef resXFileRef
public void .ctor(ResXFileRef fileRef)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
private object GetValue()
}
internal System.Resources.InMemoryHandler : ResXDataNodeHandler {
private object value
public void .ctor(object valueObject)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
}
internal System.Resources.IWritableHandler {
public string DataString
public string get_DataString()
}
internal System.Resources.NullRefHandler : ResXDataNodeHandler {
private string dataString
public string DataString
public void .ctor(string _dataString)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
public string get_DataString()
}
internal System.Resources.ResXDataNode : object {
private string name
private ResXFileRef fileRef
private string comment
private Point pos
internal ResXDataNodeHandler handler
private string <MimeType>k__BackingField
private string <Type>k__BackingField
public string Comment
public ResXFileRef FileRef
public string Name
internal bool IsWritable
internal string MimeType
internal string Type
internal string DataString
public string get_Comment()
public void set_Comment(string value)
public ResXFileRef get_FileRef()
public string get_Name()
public void set_Name(string value)
internal bool get_IsWritable()
internal string get_MimeType()
internal void set_MimeType(string value)
internal string get_Type()
internal void set_Type(string value)
internal string get_DataString()
public void .ctor(string name, object value)
public void .ctor(string name, ResXFileRef fileRef)
internal void .ctor(string name, object value, Point position)
internal void .ctor(string nameAtt, string mimeTypeAtt, string typeAtt, string dataString, string commentString, Point position, string basePath)
public Point GetNodePosition()
public string GetValueTypeName(AssemblyName[] names)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] names)
public object GetValue(ITypeResolutionService typeResolver)
private ResXFileRef BuildFileRef(string dataString, string basePath)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
}
internal System.Resources.ResXDataNodeHandler : object {
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
public object GetValueForResX()
protected Type ResolveType(string typeString)
protected Type ResolveType(string typeString, AssemblyName[] assemblyNames)
protected Type ResolveType(string typeString, ITypeResolutionService typeResolver)
}
internal System.Resources.ResXFileRef : object {
private string filename
private string typename
private Encoding textFileEncoding
public string FileName
public Encoding TextFileEncoding
public string TypeName
public void .ctor(string fileName, string typeName)
public void .ctor(string fileName, string typeName, Encoding textFileEncoding)
public string get_FileName()
public Encoding get_TextFileEncoding()
public string get_TypeName()
public string ToString()
internal String[] Parse(string fileRef)
}
internal System.Resources.ResXResourceReader : object {
private string fileName
private Stream stream
private TextReader reader
private OrderedDictionary hasht
private ITypeResolutionService typeresolver
private XmlTextReader xmlReader
private string basepath
private bool useResXDataNodes
private AssemblyName[] assemblyNames
private OrderedDictionary hashtm
public string BasePath
public bool UseResXDataNodes
public void .ctor(Stream stream)
public void .ctor(Stream stream, ITypeResolutionService typeResolver)
public void .ctor(string fileName)
public void .ctor(string fileName, ITypeResolutionService typeResolver)
public void .ctor(TextReader reader)
public void .ctor(TextReader reader, ITypeResolutionService typeResolver)
public void .ctor(Stream stream, AssemblyName[] assemblyNames)
public void .ctor(string fileName, AssemblyName[] assemblyNames)
public void .ctor(TextReader reader, AssemblyName[] assemblyNames)
protected void Finalize()
public string get_BasePath()
public void set_BasePath(string value)
public bool get_UseResXDataNodes()
public void set_UseResXDataNodes(bool value)
private void LoadData()
private void ParseHeaderNode(ResXHeader header)
private string GetHeaderValue()
private string GetAttribute(string name)
private string GetDataValue(bool meta, String& comment)
private void ParseDataNode(bool meta)
public void Close()
public IDictionaryEnumerator GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private void System.IDisposable.Dispose()
protected void Dispose(bool disposing)
public ResXResourceReader FromFileContents(string fileContents)
public ResXResourceReader FromFileContents(string fileContents, ITypeResolutionService typeResolver)
public ResXResourceReader FromFileContents(string fileContents, AssemblyName[] assemblyNames)
public IDictionaryEnumerator GetMetadataEnumerator()
}
public System.Resources.ResXResourceSet : ResourceSet {
public void .ctor(Stream stream)
public void .ctor(string fileName)
public Type GetDefaultReader()
public Type GetDefaultWriter()
}
internal System.Resources.ResXResourceWriter : object {
private string filename
private Stream stream
private TextWriter textwriter
private XmlTextWriter writer
private bool written
private string base_path
public string BinSerializedObjectMimeType
public string ByteArraySerializedObjectMimeType
public string DefaultSerializedObjectMimeType
public string ResMimeType
public string ResourceSchema
public string SoapSerializedObjectMimeType
public string Version
private string schema
public string BasePath
public void .ctor(Stream stream)
public void .ctor(TextWriter textWriter)
public void .ctor(string fileName)
protected void Finalize()
private void InitWriter()
private void WriteHeader(string name, string value)
private void WriteNiceBase64(Byte[] value, int offset, int length)
private void WriteBytes(string name, Type type, Byte[] value, int offset, int length)
private void WriteBytes(string name, Type type, Byte[] value, int offset, int length, string comment)
private void WriteBytes(string name, Type type, Byte[] value, string comment)
private void WriteString(string name, string value)
private void WriteString(string name, string value, Type type)
private void WriteString(string name, string value, Type type, string comment)
public void AddResource(string name, Byte[] value)
public void AddResource(string name, object value)
private void AddResource(string name, object value, string comment)
public void AddResource(string name, string value)
private void AddResource(string name, string value, string comment)
public void AddAlias(string aliasName, AssemblyName assemblyName)
public void AddResource(ResXDataNode node)
private ResXFileRef ProcessFileRefBasePath(ResXFileRef fileRef)
private bool IsSeparator(char ch)
private string AbsoluteToRelativePath(string baseDirectoryPath, string absPath)
private void WriteWritableNode(ResXDataNode node)
public void AddMetadata(string name, string value)
public void AddMetadata(string name, Byte[] value)
public void AddMetadata(string name, object value)
public void Close()
public void Dispose()
public void Generate()
protected void Dispose(bool disposing)
public string get_BasePath()
public void set_BasePath(string value)
}
internal System.Resources.SerializedFromResXHandler : ResXDataNodeHandler {
private string dataString
private string mime_type
private CustomBinder binder
public string DataString
public void .ctor(string data, string _mime_type)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
public string get_DataString()
private string InternalGetValueType(ITypeResolutionService typeResolver)
private object DeserializeObject(ITypeResolutionService typeResolver)
}
internal System.Resources.TypeConverterFromResXHandler : ResXDataNodeHandler {
private string dataString
private string mime_type
private string typeString
public string DataString
public void .ctor(string data, string _mime_type, string _typeString)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
public string get_DataString()
private object ConvertData(TypeConverter c)
}
public System.Web.ApplicationShutdownReason : Enum {
public int value__
public ApplicationShutdownReason None
public ApplicationShutdownReason HostingEnvironment
public ApplicationShutdownReason ChangeInGlobalAsax
public ApplicationShutdownReason ConfigurationChange
public ApplicationShutdownReason UnloadAppDomainCalled
public ApplicationShutdownReason ChangeInSecurityPolicyFile
public ApplicationShutdownReason BinDirChangeOrDirectoryRename
public ApplicationShutdownReason BrowsersDirChangeOrDirectoryRename
public ApplicationShutdownReason CodeDirChangeOrDirectoryRename
public ApplicationShutdownReason ResourcesDirChangeOrDirectoryRename
public ApplicationShutdownReason IdleTimeout
public ApplicationShutdownReason PhysicalApplicationPathChanged
public ApplicationShutdownReason HttpRuntimeClose
public ApplicationShutdownReason InitializationError
public ApplicationShutdownReason MaxRecompilationsReached
public ApplicationShutdownReason BuildManagerChange
}
internal System.Web.AppPerfCounter : Enum {
public int value__
public AppPerfCounter ANONYMOUS_REQUESTS
public AppPerfCounter TOTAL_CACHE_ENTRIES
public AppPerfCounter TOTAL_CACHE_TURNOVER_RATE
public AppPerfCounter TOTAL_CACHE_HITS
public AppPerfCounter TOTAL_CACHE_MISSES
public AppPerfCounter TOTAL_CACHE_RATIO_BASE
public AppPerfCounter API_CACHE_ENTRIES
public AppPerfCounter API_CACHE_TURNOVER_RATE
public AppPerfCounter API_CACHE_HITS
public AppPerfCounter API_CACHE_MISSES
public AppPerfCounter API_CACHE_RATIO_BASE
public AppPerfCounter OUTPUT_CACHE_ENTRIES
public AppPerfCounter OUTPUT_CACHE_TURNOVER_RATE
public AppPerfCounter OUTPUT_CACHE_HITS
public AppPerfCounter OUTPUT_CACHE_MISSES
public AppPerfCounter OUTPUT_CACHE_RATIO_BASE
public AppPerfCounter COMPILATIONS
public AppPerfCounter DEBUGGING_REQUESTS
public AppPerfCounter ERRORS_PRE_PROCESSING
public AppPerfCounter ERRORS_COMPILING
public AppPerfCounter ERRORS_DURING_REQUEST
public AppPerfCounter ERRORS_UNHANDLED
public AppPerfCounter ERRORS_TOTAL
public AppPerfCounter PIPELINES
public AppPerfCounter REQUEST_BYTES_IN
public AppPerfCounter REQUEST_BYTES_OUT
public AppPerfCounter REQUESTS_EXECUTING
public AppPerfCounter REQUESTS_FAILED
public AppPerfCounter REQUESTS_NOT_FOUND
public AppPerfCounter REQUESTS_NOT_AUTHORIZED
public AppPerfCounter REQUESTS_IN_APPLICATION_QUEUE
public AppPerfCounter REQUESTS_TIMED_OUT
public AppPerfCounter REQUESTS_SUCCEDED
public AppPerfCounter REQUESTS_TOTAL
public AppPerfCounter SESSIONS_ACTIVE
public AppPerfCounter SESSIONS_ABANDONED
public AppPerfCounter SESSIONS_TIMED_OUT
public AppPerfCounter SESSIONS_TOTAL
public AppPerfCounter TRANSACTIONS_ABORTED
public AppPerfCounter TRANSACTIONS_COMMITTED
public AppPerfCounter TRANSACTIONS_PENDING
public AppPerfCounter TRANSACTIONS_TOTAL
public AppPerfCounter SESSION_STATE_SERVER_CONNECTIONS
public AppPerfCounter SESSION_SQL_SERVER_CONNECTIONS
public AppPerfCounter EVENTS_TOTAL
public AppPerfCounter EVENTS_APP
public AppPerfCounter EVENTS_ERROR
public AppPerfCounter EVENTS_HTTP_REQ_ERROR
public AppPerfCounter EVENTS_HTTP_INFRA_ERROR
public AppPerfCounter EVENTS_WEB_REQ
public AppPerfCounter AUDIT_SUCCESS
public AppPerfCounter AUDIT_FAIL
public AppPerfCounter MEMBER_SUCCESS
public AppPerfCounter MEMBER_FAIL
public AppPerfCounter FORMS_AUTH_SUCCESS
public AppPerfCounter FORMS_AUTH_FAIL
public AppPerfCounter VIEWSTATE_MAC_FAIL
public AppPerfCounter APP_REQUEST_EXEC_TIME
public AppPerfCounter APP_REQUEST_DISCONNECTED
public AppPerfCounter APP_REQUESTS_REJECTED
public AppPerfCounter APP_REQUEST_WAIT_TIME
public AppPerfCounter CACHE_PERCENT_MACH_MEM_LIMIT_USED
public AppPerfCounter CACHE_PERCENT_MACH_MEM_LIMIT_USED_BASE
public AppPerfCounter CACHE_PERCENT_PROC_MEM_LIMIT_USED
public AppPerfCounter CACHE_PERCENT_PROC_MEM_LIMIT_USED_BASE
public AppPerfCounter CACHE_TOTAL_TRIMS
public AppPerfCounter CACHE_API_TRIMS
public AppPerfCounter CACHE_OUTPUT_TRIMS
public AppPerfCounter APP_CPU_USED
public AppPerfCounter APP_CPU_USED_BASE
public AppPerfCounter APP_MEMORY_USED
public AppPerfCounter REQUEST_BYTES_IN_WEBSOCKETS
public AppPerfCounter REQUEST_BYTES_OUT_WEBSOCKETS
public AppPerfCounter REQUESTS_EXECUTING_WEBSOCKETS
public AppPerfCounter REQUESTS_FAILED_WEBSOCKETS
public AppPerfCounter REQUESTS_SUCCEEDED_WEBSOCKETS
public AppPerfCounter REQUESTS_TOTAL_WEBSOCKETS
}
internal System.Web.AsyncInvoker : object {
public BeginEventHandler begin
public EndEventHandler end
public object data
private HttpApplication app
private AsyncCallback callback
public void .ctor(BeginEventHandler bh, EndEventHandler eh, HttpApplication a, object d)
public void .ctor(BeginEventHandler bh, EndEventHandler eh, HttpApplication app)
public void Invoke(object sender, EventArgs e)
private void doAsyncCallback(IAsyncResult res)
private void <doAsyncCallback>b__8_0(object ores)
}
internal System.Web.AsyncRequestState : object {
private AsyncCallback cb
private object cb_data
private bool completed
private ManualResetEvent complete_event
public object AsyncState
public bool CompletedSynchronously
public bool IsCompleted
public WaitHandle AsyncWaitHandle
internal void .ctor(ManualResetEvent complete_event, AsyncCallback cb, object cb_data)
internal void Complete()
public object get_AsyncState()
public bool get_CompletedSynchronously()
public bool get_IsCompleted()
public WaitHandle get_AsyncWaitHandle()
}
internal System.Web.BaseParamsCollection : WebROCollection {
protected HttpRequest _request
protected bool _loaded
public String[] AllKeys
public int Count
public KeysCollection Keys
public void .ctor(HttpRequest request)
private void LoadInfo()
protected void InsertInfo()
public string Get(int index)
protected string InternalGet(string name)
public string Get(string name)
public string GetKey(int index)
public String[] GetValues(int index)
public String[] GetValues(string name)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public String[] get_AllKeys()
public int get_Count()
public KeysCollection get_Keys()
public IEnumerator GetEnumerator()
}
internal System.Web.BaseResponseHeader : object {
private string headerValue
public string Value
public string get_Value()
public void set_Value(string value)
internal void .ctor(string val)
internal void SendContent(HttpWorkerRequest wr)
}
public System.Web.BeginEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public IAsyncResult Invoke(object sender, EventArgs e, AsyncCallback cb, object extraData)
public IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback cb, object extraData, AsyncCallback callback, object object)
public IAsyncResult EndInvoke(IAsyncResult result)
}
internal System.Web.BrowserData : object {
private Char[] wildchars
private object this_lock
private BrowserData parent
private string text
private string pattern
private Regex regex
private ListDictionary data
public BrowserData Parent
public void .ctor(string pattern)
public BrowserData get_Parent()
public void set_Parent(BrowserData value)
public void Add(string key, string value)
public Hashtable GetProperties(Hashtable tbl)
public string GetParentName()
public string GetAlternateBrowser()
public string GetBrowser()
public bool IsMatch(string expression)
}
public System.Web.Caching.AggregateCacheDependency : CacheDependency {
private object dependenciesLock
private List`1<CacheDependency> dependencies
public void Add(CacheDependency[] dependencies)
public string GetUniqueID()
protected void DependencyDispose()
internal void DependencyDisposeInternal()
private void OnAnyChanged(object sender, EventArgs args)
public String[] GetFileDependencies()
}
public System.Web.Caching.Cache : object {
private int LOW_WATER_MARK
private int HIGH_WATER_MARK
public DateTime NoAbsoluteExpiration
public TimeSpan NoSlidingExpiration
private ReaderWriterLockSlim cacheLock
private CacheItemLRU cache
private CacheItemPriorityQueue timedItems
private Timer expirationTimer
private long expirationTimerPeriod
private Cache dependencyCache
private Nullable`1<bool> disableExpiration
private long privateBytesLimit
private long percentagePhysicalMemoryLimit
private bool DisableExpiration
public long EffectivePrivateBytesLimit
public long EffectivePercentagePhysicalMemoryLimit
public int Count
public object Item
internal Cache DependencyCache
private bool get_DisableExpiration()
public long get_EffectivePrivateBytesLimit()
public long get_EffectivePercentagePhysicalMemoryLimit()
public int get_Count()
public object get_Item(string key)
public void set_Item(string key, object value)
private CacheItem RemoveCacheItem(string key)
public object Add(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback)
public object Get(string key)
public void Insert(string key, object value)
public void Insert(string key, object value, CacheDependency dependencies)
public void Insert(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration)
public void Insert(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, CacheItemUpdateCallback onUpdateCallback)
public void Insert(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback)
private void Insert(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback, CacheItemUpdateCallback onUpdateCallback, bool doLock)
internal void SetItemTimeout(string key, DateTime absoluteExpiration, TimeSpan slidingExpiration, bool doLock)
private void SetItemTimeout(CacheItem ci, DateTime absoluteExpiration, TimeSpan slidingExpiration, CacheItemRemovedCallback onRemoveCallback, CacheItemUpdateCallback onUpdateCallback, string key, bool doLock)
private bool UpdateTimedItem(CacheItem item)
private void UpdateTimerPeriod(CacheItem item)
private void EnqueueTimedItem(CacheItem item)
public object Remove(string key)
internal object Remove(string key, CacheItemRemovedReason reason, bool doLock, bool invokeCallback)
internal void InvokePrivateCallbacks()
public IDictionaryEnumerator GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private void OnDependencyChanged(object o, EventArgs a)
private bool NeedsUpdate(CacheItem item, CacheItemUpdateReason reason, bool needLock)
private void ExpireItems(object data)
internal void CheckDependencies()
internal DateTime GetKeyLastChange(string key)
internal Cache get_DependencyCache()
internal void set_DependencyCache(Cache value)
private bool <CheckDependencies>b__47_0(CacheItem it)
}
public System.Web.Caching.CacheDependency : object {
private object dependencyChangedEvent
private String[] cachekeys
private CacheDependency dependency
private DateTime start
private Cache cache
private FileSystemWatcher[] watchers
private bool hasChanged
private bool used
private DateTime utcLastModified
private object locker
private EventHandlerList events
internal bool IsUsed
internal DateTime Start
public DateTime UtcLastModified
public bool HasChanged
internal void add_DependencyChanged(EventHandler value)
internal void remove_DependencyChanged(EventHandler value)
public void .ctor(string filename)
public void .ctor(String[] filenames)
public void .ctor(string filename, DateTime start)
public void .ctor(String[] filenames, DateTime start)
public void .ctor(String[] filenames, String[] cachekeys)
public void .ctor(String[] filenames, String[] cachekeys, CacheDependency dependency)
public void .ctor(String[] filenames, String[] cachekeys, DateTime start)
public void .ctor(String[] filenames, String[] cachekeys, CacheDependency dependency, DateTime start)
public string GetUniqueID()
private void OnChanged(object sender, FileSystemEventArgs args)
private bool DoOnChanged()
private void DisposeWatchers()
public void Dispose()
internal void DependencyDisposeInternal()
protected void DependencyDispose()
internal void SetCache(Cache c)
protected internal void FinishInit()
internal bool get_IsUsed()
internal DateTime get_Start()
internal void set_Start(DateTime value)
public DateTime get_UtcLastModified()
protected void SetUtcLastModified(DateTime utcLastModified)
public bool get_HasChanged()
private void OnChildDependencyChanged(object o, EventArgs e)
private void OnDependencyChanged(object sender, EventArgs e)
protected void NotifyDependencyChanged(object sender, EventArgs e)
public String[] GetFileDependencies()
public void ItemRemoved()
public void KeepDependenciesAlive()
public void SetCacheDependencyChanged(Action`2<object, EventArgs> dependencyChangedAction)
public bool TakeOwnership()
}
internal System.Web.Caching.CachedRawResponse : object {
private HttpCachePolicy policy
private CachedVaryBy varyby
private int status_code
private string status_desc
private NameValueCollection headers
private List`1<DataItem> data
private IList Data
public HttpCachePolicy Policy
public CachedVaryBy VaryBy
public int StatusCode
public string StatusDescription
public NameValueCollection Headers
private IList get_Data()
public void .ctor(HttpCachePolicy policy)
public HttpCachePolicy get_Policy()
public void set_Policy(HttpCachePolicy value)
public CachedVaryBy get_VaryBy()
public void set_VaryBy(CachedVaryBy value)
public int get_StatusCode()
public void set_StatusCode(int value)
public string get_StatusDescription()
public void set_StatusDescription(string value)
public NameValueCollection get_Headers()
public void SetHeaders(NameValueCollection headers)
public void SetData(MemoryStream ms)
public void SetData(HttpResponseSubstitutionCallback callback)
public IList GetData()
}
internal System.Web.Caching.CachedVaryBy : object {
private String[] prms
private String[] headers
private string custom
private string key
private List`1<string> item_list
private bool wildCardParams
internal List`1<string> ItemList
internal string Key
internal void .ctor(HttpCachePolicy policy, string key)
internal List`1<string> get_ItemList()
internal string get_Key()
internal string CreateKey(string file_path, HttpContext context)
}
public System.Web.Caching.CacheInsertOptions : object {
public DateTime AbsoluteExpiration
public CacheDependency Dependencies
public CacheItemRemovedCallback OnRemovedCallback
public CacheItemPriority Priority
public TimeSpan SlidingExpiration
public DateTime get_AbsoluteExpiration()
public void set_AbsoluteExpiration(DateTime value)
public CacheDependency get_Dependencies()
public void set_Dependencies(CacheDependency value)
public CacheItemRemovedCallback get_OnRemovedCallback()
public void set_OnRemovedCallback(CacheItemRemovedCallback value)
public CacheItemPriority get_Priority()
public void set_Priority(CacheItemPriority value)
public TimeSpan get_SlidingExpiration()
public void set_SlidingExpiration(TimeSpan value)
}
internal System.Web.Caching.CacheItem : object {
public object Value
public string Key
public CacheDependency Dependency
public DateTime AbsoluteExpiration
public TimeSpan SlidingExpiration
public CacheItemPriority Priority
public CacheItemRemovedCallback OnRemoveCallback
public CacheItemUpdateCallback OnUpdateCallback
public DateTime LastChange
public long ExpiresAt
public bool Disabled
public bool IsTimedItem
public int PriorityQueueIndex
}
internal System.Web.Caching.CacheItemEnumerator : object {
private List`1<CacheItem> list
private int pos
private CacheItem Item
public DictionaryEntry Entry
public object Key
public object Value
public object Current
public void .ctor(List`1<CacheItem> list)
private CacheItem get_Item()
public DictionaryEntry get_Entry()
public object get_Key()
public object get_Value()
public object get_Current()
public bool MoveNext()
public void Reset()
}
internal System.Web.Caching.CacheItemLRU : object {
private Dictionary`2<string, LinkedListNode`1<CacheItem>> dict
private Dictionary`2<LinkedListNode`1<CacheItem>, string> revdict
private LinkedList`1<CacheItem> list
private Cache owner
private int highWaterMark
private int lowWaterMark
private bool needsEviction
public int Count
public CacheItem Item
public int get_Count()
public void .ctor(Cache owner, int highWaterMark, int lowWaterMark)
public bool TryGetValue(string key, CacheItem& value)
public void EvictIfNecessary()
public void InvokePrivateCallbacks()
public List`1<CacheItem> SelectItems(SelectItemsQualifier qualifier)
public List`1<CacheItem> ToList()
public void Remove(string key)
public CacheItem get_Item(string key)
public void set_Item(string key, CacheItem value)
}
public System.Web.Caching.CacheItemPriority : Enum {
public int value__
public CacheItemPriority Low
public CacheItemPriority BelowNormal
public CacheItemPriority Normal
public CacheItemPriority Default
public CacheItemPriority AboveNormal
public CacheItemPriority High
public CacheItemPriority NotRemovable
}
internal System.Web.Caching.CacheItemPriorityQueue : object {
private int INITIAL_HEAP_SIZE
private int HEAP_RESIZE_THRESHOLD
private CacheItem[] heap
private int heapSize
private int heapCount
private ReaderWriterLockSlim queueLock
public int Count
public int Size
public CacheItem[] Heap
public int get_Count()
public int get_Size()
public CacheItem[] get_Heap()
private void ResizeHeap(int newSize)
private CacheItem[] GetHeapWithGrow()
private CacheItem[] GetHeapWithShrink()
public void Enqueue(CacheItem item)
public CacheItem Dequeue()
public bool Update(CacheItem item)
public CacheItem Peek()
private int BubbleDown(CacheItem[] heap, int startIndex)
private int BubbleUp(CacheItem[] heap, int startIndex)
private void InitDebugMode()
private void AddSequenceEntry(CacheItem item, EDSequenceEntryType type)
public void OnItemDisable(CacheItem i)
}
public System.Web.Caching.CacheItemRemovedCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string key, object value, CacheItemRemovedReason reason)
public IAsyncResult BeginInvoke(string key, object value, CacheItemRemovedReason reason, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Caching.CacheItemRemovedReason : Enum {
public int value__
public CacheItemRemovedReason Removed
public CacheItemRemovedReason Expired
public CacheItemRemovedReason Underused
public CacheItemRemovedReason DependencyChanged
}
public System.Web.Caching.CacheItemUpdateCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string key, CacheItemUpdateReason reason, Object& expensiveObject, CacheDependency& dependency, DateTime& absoluteExpiration, TimeSpan& slidingExpiration)
public IAsyncResult BeginInvoke(string key, CacheItemUpdateReason reason, Object& expensiveObject, CacheDependency& dependency, DateTime& absoluteExpiration, TimeSpan& slidingExpiration, AsyncCallback callback, object object)
public void EndInvoke(Object& expensiveObject, CacheDependency& dependency, DateTime& absoluteExpiration, TimeSpan& slidingExpiration, IAsyncResult result)
}
public System.Web.Caching.CacheItemUpdateReason : Enum {
public int value__
public CacheItemUpdateReason Expired
public CacheItemUpdateReason DependencyChanged
}
public System.Web.Caching.CacheStoreProvider : ProviderBase {
public long ItemCount
public long SizeInBytes
public long get_ItemCount()
public long get_SizeInBytes()
public object Add(string key, object item, CacheInsertOptions options)
public bool AddDependent(string key, CacheDependency dependency, DateTime& utcLastUpdated)
public void Dispose()
public object Get(string key)
public IDictionaryEnumerator GetEnumerator()
public void Insert(string key, object item, CacheInsertOptions options)
public object Remove(string key)
public object Remove(string key, CacheItemRemovedReason reason)
public void RemoveDependent(string key, CacheDependency dependency)
public long Trim(int percent)
}
public System.Web.Caching.DatabaseNotEnabledForNotificationException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
}
internal System.Web.Caching.EDSequenceEntryType : Enum {
public int value__
public EDSequenceEntryType Enqueue
public EDSequenceEntryType Dequeue
public EDSequenceEntryType Disable
public EDSequenceEntryType Peek
public EDSequenceEntryType Update
}
public System.Web.Caching.FileResponseElement : ResponseElement {
private long <Length>k__BackingField
private long <Offset>k__BackingField
private string <Path>k__BackingField
public long Length
public long Offset
public string Path
public long get_Length()
private void set_Length(long value)
public long get_Offset()
private void set_Offset(long value)
public string get_Path()
private void set_Path(string value)
public void .ctor(string path, long offset, long length)
}
public System.Web.Caching.HeaderElement : object {
private string <Name>k__BackingField
private string <Value>k__BackingField
public string Name
public string Value
public string get_Name()
private void set_Name(string value)
public string get_Value()
private void set_Value(string value)
public void .ctor(string name, string value)
}
internal System.Web.Caching.InMemoryOutputCacheProvider : OutputCacheProvider {
private string CACHE_PREFIX
public object Add(string key, object entry, DateTime utcExpiry)
public object Get(string key)
public void Remove(string key)
public void Set(string key, object entry, DateTime utcExpiry)
}
public System.Web.Caching.IOutputCacheEntry {
public List`1<HeaderElement> HeaderElements
public List`1<ResponseElement> ResponseElements
public List`1<HeaderElement> get_HeaderElements()
public void set_HeaderElements(List`1<HeaderElement> value)
public List`1<ResponseElement> get_ResponseElements()
public void set_ResponseElements(List`1<ResponseElement> value)
}
public System.Web.Caching.MemoryResponseElement : ResponseElement {
private Byte[] <Buffer>k__BackingField
private long <Length>k__BackingField
public Byte[] Buffer
public long Length
public Byte[] get_Buffer()
private void set_Buffer(Byte[] value)
public long get_Length()
private void set_Length(long value)
public void .ctor(Byte[] buffer, long length)
}
public System.Web.Caching.OutputCache : object {
internal string DEFAULT_PROVIDER_NAME
private object initLock
private object defaultProviderInitLock
private bool initialized
private string defaultProviderName
private OutputCacheProviderCollection providers
private OutputCacheProvider defaultProvider
public string DefaultProviderName
internal OutputCacheProvider DefaultProvider
public OutputCacheProviderCollection Providers
public string get_DefaultProviderName()
internal OutputCacheProvider get_DefaultProvider()
public OutputCacheProviderCollection get_Providers()
public object Deserialize(Stream stream)
public void Serialize(Stream stream, object data)
internal OutputCacheProvider GetProvider(string providerName)
private bool IsInvalidType(object data)
private void Init()
private OutputCacheProvider LoadProvider(ProviderSettings ps)
internal void RemoveFromProvider(string key, string providerName)
}
internal System.Web.Caching.OutputCacheModule : object {
private CacheItemRemovedCallback response_removed
private object keysCacheLock
private Dictionary`2<string, string> keysCache
private Dictionary`2<string, string> entriesToInvalidate
private OutputCacheProvider FindCacheProvider(HttpApplication app)
public void Dispose()
public void Init(HttpApplication context)
private void OnBuildManagerRemoveEntry(BuildManagerRemoveEntryEventArgs args)
private void OnResolveRequestCache(object o, EventArgs args)
private void OnUpdateRequestCache(object o, EventArgs args)
private void DoCacheInsert(HttpContext context, HttpApplication app, HttpResponse response)
private void OnRawResponseRemoved(string key, object value, CacheItemRemovedReason reason)
}
public System.Web.Caching.OutputCacheProvider : ProviderBase {
public object Add(string key, object entry, DateTime utcExpiry)
public object Get(string key)
public void Remove(string key)
public void Set(string key, object entry, DateTime utcExpiry)
}
public System.Web.Caching.OutputCacheProviderAsync : OutputCacheProvider {
public Task`1<object> AddAsync(string key, object entry, DateTime utcExpiry)
public Task`1<object> GetAsync(string key)
public Task RemoveAsync(string key)
public Task SetAsync(string key, object entry, DateTime utcExpiry)
}
public System.Web.Caching.OutputCacheProviderCollection : ProviderCollection {
public OutputCacheProvider Item
public OutputCacheProvider get_Item(string name)
public void Add(ProviderBase provider)
public void CopyTo(OutputCacheProvider[] array, int index)
}
public System.Web.Caching.OutputCacheUtility : object {
public CacheDependency CreateCacheDependency(HttpResponse response)
public void FlushKernelCache(string cacheKey)
public ArrayList GetContentBuffers(HttpResponse response)
public IEnumerable`1<KeyValuePair`2<HttpCacheValidateHandler, object>> GetValidationCallbacks(HttpResponse response)
public void SetContentBuffers(HttpResponse response, ArrayList buffers)
public string SetupKernelCaching(string originalCacheUrl, HttpResponse response)
}
public System.Web.Caching.SqlCacheDependency : CacheDependency {
private string uniqueId
public void .ctor(SqlCommand sqlCmd)
public void .ctor(string databaseEntryName, string tableName)
public CacheDependency CreateOutputCacheDependency(string dependency)
private string InvalidDependencyFormatMessage(string dependency)
protected void DependencyDispose()
public string GetUniqueID()
}
public System.Web.Caching.SqlCacheDependencyAdmin : object {
public String[] GetTablesEnabledForNotifications(string connectionString)
public void DisableNotifications(string connectionString)
public void DisableTableForNotifications(string connectionString, string table)
public void DisableTableForNotifications(string connectionString, String[] tables)
public void EnableNotifications(string connectionString)
public void EnableTableForNotifications(string connectionString, string table)
public void EnableTableForNotifications(string connectionString, String[] tables)
}
public System.Web.Caching.SubstitutionResponseElement : ResponseElement {
private string typeName
private string methodName
private HttpResponseSubstitutionCallback <Callback>k__BackingField
public HttpResponseSubstitutionCallback Callback
public HttpResponseSubstitutionCallback get_Callback()
private void set_Callback(HttpResponseSubstitutionCallback value)
public void .ctor(HttpResponseSubstitutionCallback callback)
private void ObjectDeserialized(StreamingContext context)
}
public System.Web.Caching.TableNotEnabledForNotificationException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
}
internal System.Web.CapabilitiesLoader : MarshalByRefObject {
private int userAgentsCacheSize
private Hashtable defaultCaps
private object lockobj
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) loaded
private ICollection alldata
private Hashtable userAgentsCache
private Char[] eq
public Hashtable GetCapabilities(string userAgent)
private void Init()
private void LoadFile(string filename)
private void ReadCapabilities(TextReader input, BrowserData data)
}
internal System.Web.Compilation.AppCodeAssembly : object {
private List`1<string> files
private List`1<CodeCompileUnit> units
private string name
private string path
private bool validAssembly
private string outputAssemblyName
public string OutputAssemblyName
public bool IsValid
public string SourcePath
public string Name
public List`1<string> Files
public string get_OutputAssemblyName()
public bool get_IsValid()
public string get_SourcePath()
public string get_Name()
public List`1<string> get_Files()
public void .ctor(string name, string path)
public void AddFile(string path)
public void AddUnit(CodeCompileUnit unit)
private object OnCreateTemporaryAssemblyFile(string path)
public void Build(String[] binAssemblies)
private VirtualPath PhysicalToVirtual(string file)
private BuildProvider GetBuildProviderFor(string file, BuildProviderCollection buildProviders)
private bool IsCorrectBuilderType(BuildProvider bp)
}
internal System.Web.Compilation.AppCodeCompiler : object {
private bool _alreadyCompiled
internal string DefaultAppCodeAssemblyName
private List`1<AppCodeAssembly> assemblies
private string providerTypeName
private bool ProcessAppCodeDir(string appCode, AppCodeAssembly defasm)
private CodeTypeReference GetProfilePropertyType(string type)
private string FindProviderTypeName(ProfileSection ps, string providerName)
private void GetProfileProviderAttribute(ProfileSection ps, CodeAttributeDeclarationCollection collection, string providerName)
private void GetProfileSettingsSerializeAsAttribute(ProfileSection ps, CodeAttributeDeclarationCollection collection, SerializationMode mode)
private void AddProfileClassGetProfileMethod(CodeTypeDeclaration profileClass)
private void AddProfileClassProperty(ProfileSection ps, CodeTypeDeclaration profileClass, ProfilePropertySettings pset)
private void AddProfileClassGroupProperty(string groupName, string memberName, CodeTypeDeclaration profileClass)
private void BuildProfileClass(ProfileSection ps, string className, ProfilePropertySettingsCollection psc, CodeNamespace ns, string baseClass, bool baseIsGlobal, SortedList`2<string, string> groupProperties)
private string MakeGroupName(string name)
private bool ProcessCustomProfile(ProfileSection ps, AppCodeAssembly defasm)
public bool HaveCustomProfile(ProfileSection ps)
public void Compile()
private void RunAppInitialize()
private bool CollectFiles(string dir, AppCodeAssembly aca)
}
internal System.Web.Compilation.ApplicationFileBuildProvider : TemplateBuildProvider {
protected BaseCompiler CreateCompiler(TemplateParser parser)
protected TemplateParser CreateParser(VirtualPath virtualPath, string physicalPath, HttpContext context)
protected TemplateParser CreateParser(VirtualPath virtualPath, string physicalPath, TextReader reader, HttpContext context)
}
internal System.Web.Compilation.AppResourceFileInfo : object {
public bool Embeddable
public bool Compilable
public FileInfo Info
public AppResourceFileKind Kind
public bool Seen
public void .ctor(FileInfo info, AppResourceFileKind kind)
}
internal System.Web.Compilation.AppResourceFileKind : Enum {
public int value__
public AppResourceFileKind NotResource
public AppResourceFileKind ResX
public AppResourceFileKind Resource
public AppResourceFileKind Binary
}
internal System.Web.Compilation.AppResourceFilesCollection : object {
private List`1<AppResourceFileInfo> files
private bool isGlobal
private string sourceDir
public string SourceDir
public bool HasFiles
public List`1<AppResourceFileInfo> Files
public string get_SourceDir()
public bool get_HasFiles()
public List`1<AppResourceFileInfo> get_Files()
public void .ctor(HttpContext context)
public void .ctor(string parserDir)
public void Collect()
private bool Acceptable(string extension, AppResourceFileKind& kind)
}
internal System.Web.Compilation.AppResourcesAssemblyBuilder : object {
private CompilationSection config
private CompilerInfo ci
private CodeDomProvider _provider
private string baseAssemblyPath
private string baseAssemblyDirectory
private string canonicAssemblyName
private Assembly mainAssembly
private AppResourcesCompiler appResourcesCompiler
public CodeDomProvider Provider
public Assembly MainAssembly
public CodeDomProvider get_Provider()
public Assembly get_MainAssembly()
public void .ctor(string canonicAssemblyName, string baseAssemblyPath, AppResourcesCompiler appres)
public void Build()
public void Build(CodeCompileUnit unit)
private void BuildDefaultAssembly(List`1<string> files, CodeCompileUnit unit)
private void BuildSatelliteAssembly(string cultureName, List`1<string> files)
private string SetAlPath(ProcessStartInfo info)
private string BuildAssemblyPath(string cultureName)
private CodeCompileUnit GenerateAssemblyInfo(string cultureName)
}
internal System.Web.Compilation.AppResourcesCompiler : object {
private string cachePrefix
private bool isGlobal
private AppResourceFilesCollection files
private string tempDirectory
private string virtualPath
private Dictionary`2<string, List`1<string>> cultureFiles
private List`1<string> defaultCultureFiles
private string TempDirectory
public Dictionary`2<string, List`1<string>> CultureFiles
public List`1<string> DefaultCultureFiles
private string get_TempDirectory()
public Dictionary`2<string, List`1<string>> get_CultureFiles()
public List`1<string> get_DefaultCultureFiles()
public void .ctor(HttpContext context)
public void .ctor(string virtualPath)
private Assembly LoadAssembly(string asmPath)
private string GetPrecompiledVirtualPath(string asmPath)
public Assembly Compile()
private Assembly CompileGlobal()
private Assembly CompileLocal()
internal Assembly GetCachedLocalResourcesAssembly(string path)
private void AddAssemblyToCache(string path, Assembly asm)
private UInt32 CountChars(char c, string s)
private string IsFileCultureValid(string fileName)
private string GetResourceFile(AppResourceFileInfo arfi, bool local)
private List`1[] GroupGlobalFiles()
private void DomFromResource(string resfile, CodeCompileUnit unit, Dictionary`2<string, bool> assemblies, CodeDomProvider provider)
private bool is_identifier_start_character(int c)
private bool is_identifier_part_character(char c)
private string SanitizeResourceName(CodeDomProvider provider, string name)
private CodeObjectCreateExpression NewResourceManager(string name, string typename)
private void CodePropertyResourceManagerGet(CodeStatementCollection csc, string resfile, string typename)
private void CodePropertyResourceGet(CodeStatementCollection csc, string resname, Type restype, string typename)
private void CodePropertyGenericGet(CodeStatementCollection csc, string field, string typename)
private void CodePropertyGenericSet(CodeStatementCollection csc, string field, string typename)
private string CompileResource(AppResourceFileInfo arfi, bool local)
private IResourceReader GetReaderForKind(AppResourceFileKind kind, Stream stream, string path)
private object OnCreateRandomFile(string path)
}
internal System.Web.Compilation.AppResourcesLengthComparer`1 : object {
private int CompareStrings(string a, string b)
private int System.Collections.Generic.IComparer<T>.Compare(T _a, T _b)
}
public System.Web.Compilation.AppSettingsExpressionBuilder : ExpressionBuilder {
public bool SupportsEvaluate
public object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public object GetAppSetting(string key)
public object GetAppSetting(string key, Type targetType, string propertyName)
public CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public bool get_SupportsEvaluate()
}
internal System.Web.Compilation.AppWebReferencesCompiler : object {
private string ResourcesDirName
public void Compile()
}
internal System.Web.Compilation.AspComponent : object {
public Type Type
public string Prefix
public string Source
public bool FromConfig
public string Namespace
public void .ctor(Type type, string ns, string prefix, string source, bool fromConfig)
}
internal System.Web.Compilation.AspComponentFoundry : object {
private Hashtable foundries
private Dictionary`2<string, AspComponent> components
private Dictionary`2<string, AspComponent> Components
private Dictionary`2<string, AspComponent> get_Components()
public AspComponent GetComponent(string tagName)
private AspComponent CreateComponent(Foundry foundry, string tagName, string prefix, string tag)
public void RegisterFoundry(string foundryName, Assembly assembly, string nameSpace)
public void RegisterFoundry(string foundryName, Assembly assembly, string nameSpace, bool fromConfig)
public void RegisterFoundry(string foundryName, string tagName, Type type)
public void RegisterFoundry(string foundryName, string tagName, Type type, bool fromConfig)
public void RegisterFoundry(string foundryName, string tagName, string source)
public void RegisterFoundry(string foundryName, string tagName, string source, bool fromConfig)
public void RegisterAssemblyFoundry(string foundryName, string assemblyName, string nameSpace, bool fromConfig)
private void RegisterConfigControls()
private void InternalRegister(string foundryName, Foundry foundry, bool fromConfig)
public bool LookupFoundry(string foundryName)
}
internal System.Web.Compilation.AspGenerator : object {
private int READ_BUFFER_SIZE
internal Regex DirectiveRegex
private Regex runatServer
private Regex endOfTag
private Regex expressionRegex
private Regex clientCommentRegex
private ParserStack pstack
private BuilderLocationStack stack
private TemplateParser tparser
private StringBuilder text
private RootBuilder rootBuilder
private bool inScript
private bool javascript
private bool ignore_text
private ILocation location
private bool isApplication
private StringBuilder tagInnerText
private IDictionary emptyHash
private bool inForm
private bool useOtherTags
private TagType lastTag
private AspComponentFoundry componentFoundry
private Stream inputStream
public RootBuilder RootBuilder
public AspParser Parser
public string Filename
private PageParserFilter PageParserFilter
public ILocation Location
public void .ctor(TemplateParser tparser, AspComponentFoundry componentFoundry)
public void .ctor(TemplateParser tparser)
public RootBuilder get_RootBuilder()
public AspParser get_Parser()
public string get_Filename()
private PageParserFilter get_PageParserFilter()
private IDictionary GetDirectiveAttributesDictionary(string skipKeyName, CaptureCollection names, CaptureCollection values)
private string GetDirectiveName(CaptureCollection names)
private int GetLineNumberForIndex(string fileContents, int index)
private int GetNumberOfLinesForRange(string fileContents, int index, int length)
private Type GetInheritedType(string fileContents, string filename)
private string ReadFileContents(Stream inputStream, string filename)
private Type GetRootBuilderType(Stream inputStream, string filename)
private void CreateRootBuilder(Stream inputStream, string filename)
private BaseCompiler GetCompilerFromType()
private void InitParser(TextReader reader, string filename)
private void InitParser(string filename)
private void CheckForDuplicateIds(ControlBuilder root, Stack scopes)
public void Parse(string file)
public void Parse(TextReader reader, string filename, bool doInitParser)
public void Parse(Stream stream, string filename, bool doInitParser)
public void Parse(string filename, bool doInitParser)
public void Parse()
internal void AddTypeToCache(List`1<string> dependencies, string inputFile, Type type)
public Type GetCompiledType()
private void ParseError(ILocation location, string message)
private bool ProcessTagsInAttributes(ILocation location, string tagid, TagAttributes attributes, TagType type)
private void ParseAttributeTag(string code, ILocation location)
private void ParsingCompleted()
private void CheckIfIncludeFileIsSecure(string filePath)
private string ChopOffTagStart(ILocation location, string content, string tagid)
private void TagParsed(ILocation location, TagType tagtype, string tagid, TagAttributes attributes)
private bool TryRemoveTag(string tagid, ArrayList otags)
private string GetIncludeFilePath(string basedir, string filename)
private bool CheckTagEndNeeded(string text)
private List`1<TextBlock> FindRegexBlocks(Regex rxStart, Regex rxEnd, CheckBlockEnd checkEnd, IList blocks, TextBlockType typeForMatches, bool discardBlocks)
private IList SplitTextIntoBlocks(string text)
private void TextParsed(ILocation location, string text)
private void FlushText()
private void FlushText(bool ignoreEmptyString)
private bool BuilderHasOtherThan(Type type, ControlBuilder cb)
private bool OtherControlsAllowed(ControlBuilder cb)
public void AddControl(Type type, IDictionary attributes)
private bool ProcessTag(ILocation location, string tagid, TagAttributes atts, TagType tagtype, Boolean& ignored)
private string ReadFile(string filename)
private bool ProcessScript(TagType tagtype, TagAttributes attributes)
private bool CloseControl(string tagid)
private CodeConstructType MapTagTypeToConstructType(TagType tagtype)
private bool ProcessCode(TagType tagtype, string code, ILocation location)
public ILocation get_Location()
private void CheckLanguage(string lang)
}
internal System.Web.Compilation.AspParser : object {
private object errorEvent
private object tagParsedEvent
private object textParsedEvent
private object parsingCompleteEvent
private MD5 checksum
private AspTokenizer tokenizer
private int beginLine
private int endLine
private int beginColumn
private int endColumn
private int beginPosition
private int endPosition
private string filename
private string verbatimID
private string fileText
private StringReader fileReader
private bool _internal
private int _internalLineOffset
private int _internalPositionOffset
private AspParser outer
private EventHandlerList events
public Byte[] MD5Checksum
public int BeginPosition
public int EndPosition
public int BeginLine
public int BeginColumn
public int EndLine
public int EndColumn
public string FileText
public string PlainText
public string Filename
public string VerbatimID
public void add_Error(ParseErrorHandler value)
public void remove_Error(ParseErrorHandler value)
public void add_TagParsed(TagParsedHandler value)
public void remove_TagParsed(TagParsedHandler value)
public void add_TextParsed(TextParsedHandler value)
public void remove_TextParsed(TextParsedHandler value)
public void add_ParsingComplete(ParsingCompleteHandler value)
public void remove_ParsingComplete(ParsingCompleteHandler value)
public void .ctor(string filename, TextReader input)
public void .ctor(string filename, TextReader input, int startLineOffset, int positionOffset, AspParser outer)
public Byte[] get_MD5Checksum()
public int get_BeginPosition()
public int get_EndPosition()
public int get_BeginLine()
public int get_BeginColumn()
public int get_EndLine()
public int get_EndColumn()
public string get_FileText()
public string get_PlainText()
public string get_Filename()
public void set_VerbatimID(string value)
private bool Eat(int expected_token)
private void BeginElement()
private void EndElement()
public void Parse()
private bool GetInclude(string str, String& pathType, String& filename)
private void GetTag(TagType& tagtype, String& id, TagAttributes& attributes)
private TagAttributes GetAttributes()
private string GetVerbatim(int token, string end)
private string RemoveComments(string text)
private void GetServerTag(TagType& tagtype, String& id, TagAttributes& attributes)
public string ToString()
private void OnError(string msg)
private void OnTagParsed(TagType tagtype, string id, TagAttributes attributes)
private void OnTextParsed(string text)
private void OnParsingComplete()
}
internal System.Web.Compilation.AspTokenizer : object {
private int CHECKSUM_BUF_SIZE
private Char[] lfcr
private TextReader sr
private int current_token
private StringBuilder sb
private StringBuilder odds
private int col
private int line
private int begcol
private int begline
private int position
private bool inTag
private bool expectAttrValue
private bool alternatingQuotes
private bool hasPutBack
private bool verbatim
private bool have_value
private bool have_unget
private int unget_value
private string val
private Stack putBackBuffer
private MD5 checksum
private Char[] checksum_buf
private int checksum_buf_pos
public MD5 Checksum
public bool Verbatim
public string Value
public string Odds
public bool InTag
public bool ExpectAttrValue
public bool AlternatingQuotes
public int BeginLine
public int BeginColumn
public int EndLine
public int EndColumn
public int Position
public MD5 get_Checksum()
public void .ctor(TextReader reader)
public bool get_Verbatim()
public void set_Verbatim(bool value)
public void put_back()
public int get_token()
private bool is_identifier_start_character(char c)
private bool is_identifier_part_character(char c)
private void ungetc(int value)
private void TransformNextBlock(int count, bool final)
private void UpdateChecksum(int c)
private int read_char()
private int ReadAttValue(int start)
private int NextToken()
public string get_Value()
public string get_Odds()
public bool get_InTag()
public void set_InTag(bool value)
public bool get_ExpectAttrValue()
public void set_ExpectAttrValue(bool value)
public bool get_AlternatingQuotes()
public int get_BeginLine()
public int get_BeginColumn()
public int get_EndLine()
public int get_EndColumn()
public int get_Position()
}
public System.Web.Compilation.AssemblyBuilder : object {
private string DEFAULT_ASSEMBLY_BASE_NAME
private int COPY_BUFFER_SIZE
private bool KeepFiles
private CodeDomProvider provider
private CompilerParameters parameters
private Dictionary`2<string, bool> code_files
private Dictionary`2<string, List`1<CompileUnitPartialType>> partial_types
private Dictionary`2<string, BuildProvider> path_to_buildprovider
private List`1<CodeUnit> units
private List`1<string> source_files
private List`1<Assembly> referenced_assemblies
private Dictionary`2<string, string> resource_files
private TempFileCollection temp_files
private string outputFilesPrefix
private string outputAssemblyPrefix
private string outputAssemblyName
internal string OutputFilesPrefix
internal string OutputAssemblyPrefix
internal string OutputAssemblyName
internal TempFileCollection TempFiles
internal CompilerParameters CompilerOptions
internal Dictionary`2<string, List`1<CompileUnitPartialType>> PartialTypes
private Dictionary`2<string, bool> CodeFiles
private List`1<string> SourceFiles
private Dictionary`2<string, string> ResourceFiles
public CodeDomProvider CodeDomProvider
private List`1<Assembly> ReferencedAssemblies
internal void .ctor(CodeDomProvider provider)
internal void .ctor(CodeDomProvider provider, string assemblyBaseName)
internal void .ctor(VirtualPath virtualPath, CodeDomProvider provider)
internal void .ctor(VirtualPath virtualPath, CodeDomProvider provider, string assemblyBaseName)
internal string get_OutputFilesPrefix()
internal void set_OutputFilesPrefix(string value)
internal string get_OutputAssemblyPrefix()
internal string get_OutputAssemblyName()
internal TempFileCollection get_TempFiles()
internal CompilerParameters get_CompilerOptions()
internal void set_CompilerOptions(CompilerParameters value)
private CodeUnit[] GetUnitsAsArray()
internal Dictionary`2<string, List`1<CompileUnitPartialType>> get_PartialTypes()
private Dictionary`2<string, bool> get_CodeFiles()
private List`1<string> get_SourceFiles()
private Dictionary`2<string, string> get_ResourceFiles()
internal BuildProvider GetBuildProviderForPhysicalFilePath(string path)
public void AddAssemblyReference(Assembly a)
internal void AddAssemblyReference(string assemblyLocation)
internal void AddAssemblyReference(ICollection asmcoll)
internal void AddAssemblyReference(List`1<Assembly> asmlist)
internal void AddCodeCompileUnit(CodeCompileUnit compileUnit)
public void AddCodeCompileUnit(BuildProvider buildProvider, CodeCompileUnit compileUnit)
private void AddPathToBuilderMap(string path, BuildProvider bp)
public TextWriter CreateCodeFile(BuildProvider buildProvider)
internal void AddCodeFile(string path)
internal void AddCodeFile(string path, BuildProvider bp)
internal void AddCodeFile(string path, BuildProvider bp, bool isVirtual)
private void CopyFileWithChecksum(string input, string to, string from, ICodePragmaGenerator pragmaGenerator)
private void CopyFileWithChecksum(Stream input, string to, string from, ICodePragmaGenerator pragmaGenerator)
private void UpdateChecksum(Char[] buf, int count, MD5 checksum, bool final)
public Stream CreateEmbeddedResource(BuildProvider buildProvider, string name)
public void GenerateTypeFactory(string typeName)
public string GetTempFilePhysicalPath(string extension)
public CodeDomProvider get_CodeDomProvider()
private List`1<Assembly> get_ReferencedAssemblies()
private CodeUnit CheckForPartialTypes(CodeUnit codeUnit)
private void ProcessPartialTypes()
private void ProcessType(List`1<CompileUnitPartialType> typeList)
private void CompareTypes(CompileUnitPartialType source, CompileUnitPartialType target)
private bool TypeHasMember(CodeTypeDeclaration type, CodeTypeMember member)
private CodeTypeMember FindMemberByName(CodeTypeDeclaration type, string name)
internal CompilerResults BuildAssembly()
internal CompilerResults BuildAssembly(VirtualPath virtualPath)
internal CompilerResults BuildAssembly(CompilerParameters options)
internal CompilerResults BuildAssembly(VirtualPath virtualPath, CompilerParameters options)
private void ReferenceAssembly(Dictionary`2<Guid, bool> moduleGuidCache, List`1<Assembly> assemblies, Assembly asm)
private void ReferenceAssemblies(Dictionary`2<Guid, bool> moduleGuidCache, List`1<Assembly> assemblies, List`1<Assembly> references)
private void ReferenceAssemblies(Dictionary`2<Guid, bool> moduleGuidCache, List`1<Assembly> assemblies, StringCollection references)
private void ReferenceAssembly(Dictionary`2<Guid, bool> moduleGuidCache, List`1<Assembly> assemblies, string asmLocation)
}
internal System.Web.Compilation.AssemblyPathResolver : object {
private Dictionary`2<string, string> assemblyCache
public string GetAssemblyPath(string assemblyName)
}
internal System.Web.Compilation.BaseCompiler : object {
private string DEFAULT_NAMESPACE
internal Guid HashMD5
private BindingFlags replaceableFlags
private TemplateParser parser
private CodeDomProvider provider
private ICodeCompiler compiler
private CodeCompileUnit unit
private CodeNamespace mainNS
private CompilerParameters compilerParameters
private bool isRebuilding
protected Hashtable partialNameOverride
protected CodeTypeDeclaration partialClass
protected CodeTypeReferenceExpression partialClassExpr
protected CodeTypeDeclaration mainClass
protected CodeTypeReferenceExpression mainClassExpr
protected CodeThisReferenceExpression thisRef
private VirtualPath inputVirtualPath
public VirtualPath InputVirtualPath
internal string MainClassType
internal bool IsRebuildingPartial
internal CodeDomProvider Provider
internal ICodeCompiler Compiler
internal CompilerParameters CompilerParameters
internal CodeCompileUnit CompileUnit
internal CodeTypeDeclaration DerivedType
internal CodeTypeDeclaration BaseType
internal TemplateParser Parser
public VirtualPath get_InputVirtualPath()
protected void .ctor(TemplateParser parser)
protected void AddReferencedAssembly(Assembly asm)
internal CodeStatement AddLinePragma(CodeExpression expression, ControlBuilder builder)
internal CodeStatement AddLinePragma(CodeStatement statement, ControlBuilder builder)
internal CodeStatement AddLinePragma(CodeStatement statement, ILocation location)
private bool IgnoreFile(string fileName)
internal CodeStatement AddLinePragma(CodeStatement statement, int line, string fileName)
internal CodeTypeMember AddLinePragma(CodeTypeMember member, ControlBuilder builder)
internal CodeTypeMember AddLinePragma(CodeTypeMember member, ILocation location)
internal CodeTypeMember AddLinePragma(CodeTypeMember member, int line, string fileName)
internal void ConstructType()
internal CodeFieldReferenceExpression GetMainClassFieldReferenceExpression(string fieldName)
protected void InitializeType()
protected void CreateStaticFields()
private void AssignAppRelativeVirtualPath(CodeConstructor ctor)
protected void CreateConstructor(CodeStatementCollection localVars, CodeStatementCollection trueStmt)
protected void AddStatementsToConstructor(CodeConstructor ctor)
private void AddScripts()
protected internal void CreateMethods()
private void InternalCreatePageProperty(string retType, string name, string contextProperty)
protected void CreateProfileProperty()
protected void AddInterfaces()
protected void AddClassAttributes()
protected void AddApplicationAndSessionObjects()
protected void CreateApplicationOrSessionPropertyForObject(Type type, string propName, bool isApplication, bool isPublic)
protected string CreateFieldForObject(Type type, string name)
protected void CreatePropertyForObject(Type type, string propName, string fieldName, bool isPublic)
private void CheckCompilerErrors(CompilerResults results)
protected string DynamicDir()
internal CodeDomProvider CreateProvider(string lang)
internal CodeDomProvider CreateProvider(string lang, String& compilerOptions, Int32& warningLevel, String& tempdir)
internal CodeDomProvider CreateProvider(HttpContext context, string lang, String& compilerOptions, Int32& warningLevel, String& tempdir)
internal CodeDomProvider CreateProvider(HttpContext context, string lang, CompilerParameters& par, String& tempdir)
public Type GetCompiledType()
internal string get_MainClassType()
internal bool get_IsRebuildingPartial()
internal bool CheckPartialBaseType(Type type)
internal bool CheckPartialBaseFields(Type type, Type baseType)
internal bool CheckPartialBaseProperties(Type type, Type baseType)
internal CodeDomProvider get_Provider()
internal void set_Provider(CodeDomProvider value)
internal ICodeCompiler get_Compiler()
internal void set_Compiler(ICodeCompiler value)
internal CompilerParameters get_CompilerParameters()
internal void set_CompilerParameters(CompilerParameters value)
internal CodeCompileUnit get_CompileUnit()
internal CodeTypeDeclaration get_DerivedType()
internal CodeTypeDeclaration get_BaseType()
internal TemplateParser get_Parser()
}
public System.Web.Compilation.BuildDependencySet : object {
public string HashCode
public IEnumerable VirtualPaths
public string get_HashCode()
public IEnumerable get_VirtualPaths()
}
internal System.Web.Compilation.BuilderLocation : object {
public ControlBuilder Builder
public ILocation Location
public void .ctor(ControlBuilder builder, ILocation location)
}
internal System.Web.Compilation.BuilderLocationStack : Stack {
public ControlBuilder Builder
public void Push(object o)
public void Push(ControlBuilder builder, ILocation location)
public BuilderLocation Peek()
public BuilderLocation Pop()
public ControlBuilder get_Builder()
}
public System.Web.Compilation.BuildManager : object {
internal string FAKE_VIRTUAL_PATH_PREFIX
private string BUILD_MANAGER_VIRTUAL_PATH_CACHE_PREFIX
private int BUILD_MANAGER_VIRTUAL_PATH_CACHE_PREFIX_LENGTH
private object bigCompilationLock
private object virtualPathsToIgnoreLock
private Char[] virtualPathsToIgnoreSplitChars
private EventHandlerList events
private object buildManagerRemoveEntryEvent
private bool hosted
private Dictionary`2<string, bool> virtualPathsToIgnore
private bool virtualPathsToIgnoreChecked
private bool haveVirtualPathsToIgnore
private List`1<Assembly> AppCode_Assemblies
private List`1<Assembly> TopLevel_Assemblies
private Dictionary`2<Type, CodeDomProvider> codeDomProviders
private Dictionary`2<string, BuildManagerCacheItem> buildCache
private List`1<Assembly> referencedAssemblies
private List`1<Assembly> configReferencedAssemblies
private bool getReferencedAssembliesInvoked
private int buildCount
private bool is_precompiled
private bool allowReferencedAssembliesCaching
private List`1<Assembly> dynamicallyRegisteredAssemblies
private Nullable`1<bool> batchCompilationEnabled
private FrameworkName targetFramework
private bool preStartMethodsDone
private bool preStartMethodsRunning
private Dictionary`2<string, PreCompilationData> precompiled
internal bool suppressDebugModeMessages
private ReaderWriterLockSlim buildCacheLock
private ulong recursionDepth
private bool <CompilingTopLevelAssemblies>k__BackingField
private bool <HaveResources>k__BackingField
internal bool AllowReferencedAssembliesCaching
internal bool IsPrecompiled
internal bool CompilingTopLevelAssemblies
internal bool PreStartMethodsRunning
public Nullable`1<bool> BatchCompilationEnabled
public FrameworkName TargetFramework
internal bool BatchMode
public IList CodeAssemblies
internal CompilationSection CompilationConfig
internal bool HaveResources
internal IList TopLevelAssemblies
public bool IsPrecompiledApp
public bool IsUpdatablePrecompiledApp
internal bool get_AllowReferencedAssembliesCaching()
internal void set_AllowReferencedAssembliesCaching(bool value)
internal bool get_IsPrecompiled()
internal void add_RemoveEntry(BuildManagerRemoveEntryEventHandler value)
internal void remove_RemoveEntry(BuildManagerRemoveEntryEventHandler value)
internal bool get_CompilingTopLevelAssemblies()
internal void set_CompilingTopLevelAssemblies(bool value)
internal bool get_PreStartMethodsRunning()
public Nullable`1<bool> get_BatchCompilationEnabled()
public void set_BatchCompilationEnabled(Nullable`1<bool> value)
public FrameworkName get_TargetFramework()
internal bool get_BatchMode()
public IList get_CodeAssemblies()
internal CompilationSection get_CompilationConfig()
internal bool get_HaveResources()
internal void set_HaveResources(bool value)
internal IList get_TopLevelAssemblies()
internal void AssertPreStartMethodsRunning()
private void FixVirtualPaths()
private bool LoadPrecompilationInfo(string precomp_config)
private void LoadCompiled(string filename)
private PreCompilationData LoadPageData(XmlTextReader reader, bool store)
private void AddAssembly(Assembly asm, List`1<Assembly> al)
private void AddPathToIgnore(string vp)
internal void AddToReferencedAssemblies(Assembly asm)
private void AssertVirtualPathExists(VirtualPath virtualPath)
private void Build(VirtualPath vp)
private void BuildInner(VirtualPath vp, bool debug)
private CodeDomProvider CreateDomProvider(CompilerType ct)
internal void CallPreStartMethods()
private List`1<MethodInfo> LoadPreStartMethodsFromAssemblies(List`1<Assembly> assemblies)
public Type GetGlobalAsaxType()
public Stream CreateCachedFile(string fileName)
public Stream ReadCachedFile(string fileName)
public void AddReferencedAssembly(Assembly assembly)
public IWebObjectFactory GetObjectFactory(string virtualPath, bool throwIfNotFound)
public object CreateInstanceFromVirtualPath(string virtualPath, Type requiredBaseType)
internal object CreateInstanceFromVirtualPath(VirtualPath virtualPath, Type requiredBaseType)
private void DescribeCompilationError(string format, CompilationException ex, Object[] parms)
private BuildProvider FindBuildProviderForPhysicalPath(string path, BuildProviderGroup group, HttpRequest req)
private void GenerateAssembly(AssemblyBuilder abuilder, BuildProviderGroup group, VirtualPath vp, bool debug)
private VirtualPath GetAbsoluteVirtualPath(string virtualPath)
public BuildDependencySet GetCachedBuildDependencySet(HttpContext context, string virtualPath)
public BuildDependencySet GetCachedBuildDependencySet(HttpContext context, string virtualPath, bool ensureIsUpToDate)
private BuildManagerCacheItem GetCachedItem(string vp)
private BuildManagerCacheItem GetCachedItemNoLock(string vp)
internal Type GetCodeDomProviderType(BuildProvider provider)
private Type GetPrecompiledType(string virtualPath)
internal Type GetPrecompiledApplicationType()
public Assembly GetCompiledAssembly(string virtualPath)
internal Assembly GetCompiledAssembly(VirtualPath virtualPath)
public Type GetCompiledType(string virtualPath)
internal Type GetCompiledType(VirtualPath virtualPath)
public string GetCompiledCustomString(string virtualPath)
internal string GetCompiledCustomString(VirtualPath virtualPath)
internal CompilerType GetDefaultCompilerTypeForLanguage(string language, CompilationSection configSection)
internal CompilerType GetDefaultCompilerTypeForLanguage(string language, CompilationSection configSection, bool throwOnMissing)
public ICollection GetReferencedAssemblies()
public Type GetType(string typeName, bool throwOnError)
public Type GetType(string typeName, bool throwOnError, bool ignoreCase)
public ICollection GetVirtualPathDependencies(string virtualPath)
internal ICollection GetVirtualPathDependencies(string virtualPath, BuildProvider bprovider)
internal bool HasCachedItemNoLock(string vp, Boolean& entryExists)
internal bool HasCachedItemNoLock(string vp)
internal bool IgnoreVirtualPath(string virtualPath)
private bool IsSingleBuild(VirtualPath vp, bool recursive)
private void LoadAssembly(string path, List`1<Assembly> al)
private void LoadAssembly(AssemblyInfo info, List`1<Assembly> al)
private void LoadVirtualPathsToIgnore()
private void OnEntryRemoved(string vp)
private void OnVirtualPathChanged(string key, object value, CacheItemRemovedReason removedReason)
private void ReferenceAssemblyInCompilation(BuildManagerCacheItem bmci)
private void RemoveFailedAssemblies(string requestedVirtualPath, CompilationException ex, AssemblyBuilder abuilder, BuildProviderGroup group, CompilerResults results, bool debug)
private void SetCommonParameters(CompilationSection config, CompilerParameters p, Type compilerType, string language)
private void ShowDebugModeMessage(string msg)
private void StoreInCache(BuildProvider bp, Assembly compiledAssembly, CompilerResults results)
public bool get_IsPrecompiledApp()
public bool get_IsUpdatablePrecompiledApp()
public void AddCompilationDependency(string dependency)
}
internal System.Web.Compilation.BuildManagerCacheItem : object {
public string CompiledCustomString
public Assembly BuiltAssembly
public string VirtualPath
public Type Type
public void .ctor(Assembly assembly, BuildProvider bp, CompilerResults results)
public string ToString()
}
internal System.Web.Compilation.BuildManagerDirectoryBuilder : object {
private VirtualPath virtualPath
private string virtualPathDirectory
private CompilationSection compilationSection
private Dictionary`2<string, BuildProvider> buildProviders
private VirtualPathProvider vpp
private CompilationSection CompilationSection
private CompilationSection get_CompilationSection()
public void .ctor(VirtualPath virtualPath)
public List`1<BuildProviderGroup> Build(bool single)
private bool AddBuildProvider(BuildProvider buildProvider)
private void AddVirtualDir(VirtualDirectory vdir, BuildProviderCollection bpcoll, Dictionary`2<string, bool> cache)
private void AddVirtualFile(VirtualFile file, BuildProviderCollection bpcoll)
private List`1<BuildProviderGroup> GetSingleBuildProviderGroup(BuildProvider bp)
private VirtualDirectory GetVirtualDirectory(string virtualPath)
private VirtualFile GetVirtualFile(string virtualPath)
private Type GetBuildProviderCodeDomType(BuildProvider bp)
private void AssignToGroup(BuildProvider buildProvider, List`1<BuildProviderGroup> groups)
private void InsertGroup(BuildProviderGroup group, List`1<BuildProviderGroup> groups)
private bool SkipStandaloneGroups(BuildProviderGroup group)
private bool SkipApplicationGroup(BuildProviderGroup group)
private bool IsDependency(BuildProvider bp1, BuildProvider bp2)
private bool IsDependencyCycle(BuildProvider buildProvider)
private bool IsDependencyCycle(Dictionary`2<BuildProvider, bool> cache, IDictionary`2<string, bool> deps)
public BuildProvider GetBuildProvider(string virtualPath, BuildProviderCollection coll)
public BuildProvider GetBuildProvider(VirtualPath virtualPath, BuildProviderCollection coll)
}
internal System.Web.Compilation.BuildManagerHost : MarshalByRefObject {
protected void RegisterAssembly(string assemblyName, string assemblyLocation)
public void Stop(bool immediate)
}
public System.Web.Compilation.BuildManagerHostUnloadEventArgs : EventArgs {
private ApplicationShutdownReason reason
public ApplicationShutdownReason Reason
public void .ctor(ApplicationShutdownReason reason)
public ApplicationShutdownReason get_Reason()
}
public System.Web.Compilation.BuildManagerHostUnloadEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, BuildManagerHostUnloadEventArgs e)
public IAsyncResult BeginInvoke(object sender, BuildManagerHostUnloadEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Web.Compilation.BuildManagerRemoveEntryEventArgs : EventArgs {
private string <EntryName>k__BackingField
private HttpContext <Context>k__BackingField
public string EntryName
public HttpContext Context
public string get_EntryName()
private void set_EntryName(string value)
public HttpContext get_Context()
private void set_Context(HttpContext value)
public void .ctor(string entryName, HttpContext context)
}
internal System.Web.Compilation.BuildManagerRemoveEntryEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(BuildManagerRemoveEntryEventArgs args)
public IAsyncResult BeginInvoke(BuildManagerRemoveEntryEventArgs args, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Compilation.BuildProvider : object {
private Dictionary`2<string, Type> registeredBuildProviderTypes
private ArrayList ref_assemblies
private ICollection vpath_deps
private CompilationSection compilationSection
private VirtualPath vpath
private CompilationSection CompilationConfig
internal string LanguageName
public CompilerType CodeCompilerType
protected ICollection ReferencedAssemblies
protected internal string VirtualPath
internal VirtualPath VirtualPathInternal
public ICollection VirtualPathDependencies
internal CodeCompileUnit CodeUnit
private CompilationSection get_CompilationConfig()
internal string get_LanguageName()
internal void SetVirtualPath(VirtualPath virtualPath)
internal void GenerateCode()
internal IDictionary`2<string, bool> ExtractDependencies()
public void GenerateCode(AssemblyBuilder assemblyBuilder)
public string GetCustomString(CompilerResults results)
protected CompilerType GetDefaultCompilerType()
protected CompilerType GetDefaultCompilerTypeForLanguage(string language)
public Type GetGeneratedType(CompilerResults results)
public BuildProviderResultFlags GetResultFlags(CompilerResults results)
protected TextReader OpenReader()
protected TextReader OpenReader(string virtualPath)
protected Stream OpenStream()
protected Stream OpenStream(string virtualPath)
public void RegisterBuildProvider(string extension, Type providerType)
internal Type GetProviderTypeForExtension(string extension)
internal BuildProvider GetProviderInstanceForExtension(string extension)
public CompilerType get_CodeCompilerType()
protected ICollection get_ReferencedAssemblies()
protected internal string get_VirtualPath()
internal VirtualPath get_VirtualPathInternal()
public ICollection get_VirtualPathDependencies()
internal CodeCompileUnit get_CodeUnit()
public void ProcessCompileErrors(CompilerResults results)
}
public System.Web.Compilation.BuildProviderAppliesTo : Enum {
public int value__
public BuildProviderAppliesTo Web
public BuildProviderAppliesTo Code
public BuildProviderAppliesTo Resources
public BuildProviderAppliesTo All
}
public System.Web.Compilation.BuildProviderAppliesToAttribute : Attribute {
private BuildProviderAppliesTo _appliesTo
public BuildProviderAppliesTo AppliesTo
public void .ctor(BuildProviderAppliesTo appliesTo)
public BuildProviderAppliesTo get_AppliesTo()
}
internal System.Web.Compilation.BuildProviderGroup : List`1<BuildProvider> {
private string <NamePrefix>k__BackingField
private bool <Standalone>k__BackingField
private bool <Application>k__BackingField
private bool <Master>k__BackingField
private CompilerType <CompilerType>k__BackingField
public string NamePrefix
public bool Standalone
public bool Application
public bool Master
public CompilerType CompilerType
public string get_NamePrefix()
private void set_NamePrefix(string value)
public bool get_Standalone()
public void set_Standalone(bool value)
public bool get_Application()
private void set_Application(bool value)
public bool get_Master()
public void set_Master(bool value)
public CompilerType get_CompilerType()
private void set_CompilerType(CompilerType value)
public void AddProvider(BuildProvider bp)
}
public System.Web.Compilation.BuildProviderResultFlags : Enum {
public int value__
public BuildProviderResultFlags Default
public BuildProviderResultFlags ShutdownAppDomainOnChange
}
internal System.Web.Compilation.BuildResultTypeCode : Enum {
public int value__
public BuildResultTypeCode Unknown
public BuildResultTypeCode AppCodeSubFolder
public BuildResultTypeCode Handler
public BuildResultTypeCode PageOrControl
public BuildResultTypeCode AppCode
public BuildResultTypeCode Global
public BuildResultTypeCode TopLevelAssembly
}
internal System.Web.Compilation.CachingCompiler : object {
private string dynamicBase
private Hashtable compilationTickets
private string cachePrefix
private string cacheTypePrefix
private Hashtable assemblyCache
public void InsertTypeFileDep(Type type, string filename)
public void InsertType(Type type, string filename)
public Type GetTypeFromCache(string filename)
public CompilerResults Compile(BaseCompiler compiler)
public CompilerResults Compile(WebServiceCompiler compiler)
internal CompilerParameters GetOptions(ICollection assemblies)
public CompilerResults Compile(string language, string key, string file, ArrayList assemblies)
public CompilerResults Compile(string language, string key, string file, ArrayList assemblies, bool debug)
public Type CompileAndGetType(string typename, string language, string key, string file, ArrayList assemblies)
private void GetExtraAssemblies(CompilerParameters options)
private string GetAssemblyLocationFromName(string name)
private bool AcquireCompilationTicket(string key, Object& ticket)
private void ReleaseCompilationTicket(string key)
}
public System.Web.Compilation.ClientBuildManager : MarshalByRefObject {
private object appDomainShutdownEvent
private object appDomainStartedEvent
private object appDomainUnloadedEvent
private string virt_dir
private string phys_src_dir
private BareApplicationHost host
private ApplicationManager manager
private string app_id
private string cache_path
private EventHandlerList events
private String[] shutdown_directories
private BareApplicationHost Host
public string CodeGenDir
public bool IsHostCreated
public void add_AppDomainShutdown(BuildManagerHostUnloadEventHandler value)
public void remove_AppDomainShutdown(BuildManagerHostUnloadEventHandler value)
public void add_AppDomainStarted(EventHandler value)
public void remove_AppDomainStarted(EventHandler value)
public void add_AppDomainUnloaded(BuildManagerHostUnloadEventHandler value)
public void remove_AppDomainUnloaded(BuildManagerHostUnloadEventHandler value)
public void .ctor(string appVirtualDir, string appPhysicalSourceDir)
public void .ctor(string appVirtualDir, string appPhysicalSourceDir, string appPhysicalTargetDir)
public void .ctor(string appVirtualDir, string appPhysicalSourceDir, string appPhysicalTargetDir, ClientBuildManagerParameter parameter)
private BareApplicationHost get_Host()
private void OnAppDomainStarted()
private void OnAppDomainShutdown(ApplicationShutdownReason reason)
public void CompileApplicationDependencies()
public void CompileFile(string virtualPath)
public void CompileFile(string virtualPath, ClientBuildManagerCallback callback)
public IRegisteredObject CreateObject(Type type, bool failIfExists)
public string GenerateCode(string virtualPath, string virtualFileString, IDictionary& linePragmasTable)
public CodeCompileUnit GenerateCodeCompileUnit(string virtualPath, string virtualFileString, Type& codeDomProviderType, CompilerParameters& compilerParameters, IDictionary& linePragmasTable)
public CodeCompileUnit GenerateCodeCompileUnit(string virtualPath, Type& codeDomProviderType, CompilerParameters& compilerParameters, IDictionary& linePragmasTable)
public String[] GetAppDomainShutdownDirectories()
public IDictionary GetBrowserDefinitions()
public void GetCodeDirectoryInformation(string virtualCodeDir, Type& codeDomProviderType, CompilerParameters& compilerParameters, String& generatedFilesDir)
public Type GetCompiledType(string virtualPath)
public void GetCompilerParameters(string virtualPath, Type& codeDomProviderType, CompilerParameters& compilerParameters)
public string GetGeneratedFileVirtualPath(string filePath)
public string GetGeneratedSourceFile(string virtualPath)
public String[] GetTopLevelAssemblyReferences(string virtualPath)
public String[] GetVirtualCodeDirectories()
public object InitializeLifetimeService()
public bool IsCodeAssembly(string assemblyName)
public void PrecompileApplication()
public void PrecompileApplication(ClientBuildManagerCallback callback)
public void PrecompileApplication(ClientBuildManagerCallback callback, bool forceCleanBuild)
public bool Unload()
public string get_CodeGenDir()
public bool get_IsHostCreated()
private void System.IDisposable.Dispose()
public void .ctor(string appVirtualDir, string appPhysicalSourceDir, string appPhysicalTargetDir, ClientBuildManagerParameter parameter, TypeDescriptionProvider typeDescriptionProvider)
}
public System.Web.Compilation.ClientBuildManagerCallback : MarshalByRefObject {
public void ReportCompilerError(CompilerError error)
public void ReportParseError(ParserError error)
public void ReportProgress(string message)
}
public System.Web.Compilation.ClientBuildManagerParameter : object {
private PrecompilationFlags precompilationFlags
private string strongNameKeyContainer
private string strongNameKeyFile
public PrecompilationFlags PrecompilationFlags
public string StrongNameKeyContainer
public string StrongNameKeyFile
public List`1<string> ExcludedVirtualPaths
public PrecompilationFlags get_PrecompilationFlags()
public void set_PrecompilationFlags(PrecompilationFlags value)
public string get_StrongNameKeyContainer()
public void set_StrongNameKeyContainer(string value)
public string get_StrongNameKeyFile()
public void set_StrongNameKeyFile(string value)
public List`1<string> get_ExcludedVirtualPaths()
}
internal System.Web.Compilation.CompilationException : HtmlizedException {
private string filename
private CompilerErrorCollection errors
private CompilerResults results
private string fileText
private string errmsg
private Int32[] errorLines
public string Message
public string SourceFile
public string FileName
public string Title
public string Description
public string ErrorMessage
public string FileText
public Int32[] ErrorLines
public bool ErrorLinesPaired
public StringCollection CompilerOutput
public CompilerResults Results
private void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string filename, CompilerErrorCollection errors, string fileText)
public void .ctor(string filename, CompilerResults results, string fileText)
public void GetObjectData(SerializationInfo info, StreamingContext ctx)
public string get_Message()
public string get_SourceFile()
public string get_FileName()
public string get_Title()
public string get_Description()
public string get_ErrorMessage()
public string get_FileText()
public Int32[] get_ErrorLines()
public bool get_ErrorLinesPaired()
public StringCollection get_CompilerOutput()
public CompilerResults get_Results()
}
public System.Web.Compilation.CompilerType : object {
private Type type
private CompilerParameters parameters
public Type CodeDomProviderType
public CompilerParameters CompilerParameters
internal void .ctor(Type type, CompilerParameters parameters)
public bool Equals(object o)
public int GetHashCode()
public Type get_CodeDomProviderType()
public CompilerParameters get_CompilerParameters()
}
internal System.Web.Compilation.CompileUnitPartialType : object {
public CodeCompileUnit Unit
public CodeNamespace ParentNamespace
public CodeTypeDeclaration PartialType
private string typeName
public string TypeName
public string get_TypeName()
public void .ctor(CodeCompileUnit unit, CodeNamespace parentNamespace, CodeTypeDeclaration type)
}
public System.Web.Compilation.ConnectionStringsExpressionBuilder : ExpressionBuilder {
public bool SupportsEvaluate
public object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public string GetConnectionString(string connectionStringName)
public string GetConnectionStringProviderName(string connectionStringName)
public object ParseExpression(string expression, Type propertyType, ExpressionBuilderContext context)
public bool get_SupportsEvaluate()
}
public System.Web.Compilation.ControlBuilderInterceptor : object {
public void OnProcessGeneratedCode(ControlBuilder controlBuilder, CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod, IDictionary additionalState)
public void PreControlBuilderInit(ControlBuilder controlBuilder, TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attributes, IDictionary additionalState)
}
internal System.Web.Compilation.DefaultImplicitResourceProvider : object {
private IResourceProvider _resourceProvider
private IDictionary _implicitResources
private bool _attemptedGetPageResources
internal void .ctor(IResourceProvider resourceProvider)
public object GetObject(ImplicitResourceKey entry, CultureInfo culture)
public ICollection GetImplicitResourceKeys(string keyPrefix)
internal void EnsureGetPageResources()
private ImplicitResourceKey ParseFullKey(string key)
private string ConstructFullKey(ImplicitResourceKey entry)
}
internal System.Web.Compilation.DefaultResourceProvider : object {
private Dictionary`2<ResourceManagerCacheKey, ResourceManager> resourceManagerCache
private string resource
private bool isGlobal
public IResourceReader ResourceReader
public IResourceReader get_ResourceReader()
public void .ctor(string resource, bool isGlobal)
public object GetObject(string resourceKey, CultureInfo culture)
private Assembly GetLocalResourcesAssembly()
private ResourceManager GetResourceManager()
}
internal System.Web.Compilation.DefaultResourceProviderFactory : ResourceProviderFactory {
public IResourceProvider CreateGlobalResourceProvider(string classKey)
public IResourceProvider CreateLocalResourceProvider(string virtualPath)
}
public System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute : Attribute {
private string _factoryTypeName
public string FactoryTypeName
public void .ctor(Type factoryType)
public void .ctor(string factoryTypeName)
public string get_FactoryTypeName()
public bool IsDefaultAttribute()
}
internal System.Web.Compilation.Directive : object {
private Hashtable directivesHash
private String[] page_atts
private String[] control_atts
private String[] import_atts
private String[] implements_atts
private String[] assembly_atts
private String[] register_atts
private String[] outputcache_atts
private String[] reference_atts
private String[] webservice_atts
private String[] application_atts
private String[] mastertype_atts
private String[] previouspagetype_atts
private void InitHash()
public bool IsDirective(string id)
}
public System.Web.Compilation.ExpressionBuilder : object {
public bool SupportsEvaluate
public CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public object ParseExpression(string expression, Type propertyType, ExpressionBuilderContext context)
public bool get_SupportsEvaluate()
}
public System.Web.Compilation.ExpressionBuilderContext : object {
private TemplateControl tcontrol
private string vpath
public TemplateControl TemplateControl
public string VirtualPath
public void .ctor(string virtualPath)
public void .ctor(TemplateControl templateControl)
public TemplateControl get_TemplateControl()
public string get_VirtualPath()
}
public System.Web.Compilation.ExpressionEditorAttribute : Attribute {
private string _editorTypeName
public string EditorTypeName
public void .ctor(Type type)
public void .ctor(string typeName)
public string get_EditorTypeName()
public bool Equals(object obj)
public int GetHashCode()
}
public System.Web.Compilation.ExpressionPrefixAttribute : Attribute {
private string _expressionPrefix
public string ExpressionPrefix
public void .ctor(string expressionPrefix)
public string get_ExpressionPrefix()
}
public System.Web.Compilation.FolderLevelBuildProviderAppliesTo : Enum {
public int value__
public FolderLevelBuildProviderAppliesTo None
public FolderLevelBuildProviderAppliesTo Code
public FolderLevelBuildProviderAppliesTo WebReferences
public FolderLevelBuildProviderAppliesTo LocalResources
public FolderLevelBuildProviderAppliesTo GlobalResources
}
public System.Web.Compilation.FolderLevelBuildProviderAppliesToAttribute : Attribute {
private FolderLevelBuildProviderAppliesTo _appliesTo
public FolderLevelBuildProviderAppliesTo AppliesTo
public void .ctor(FolderLevelBuildProviderAppliesTo appliesTo)
public FolderLevelBuildProviderAppliesTo get_AppliesTo()
}
internal System.Web.Compilation.GenericBuildProvider`1 : BuildProvider {
private TParser _parser
private CompilerType _compilerType
private BaseCompiler _compiler
private TextReader _reader
private bool _parsed
private bool _codeGenerated
protected bool Parsed
public ICollection VirtualPathDependencies
internal string LanguageName
public CompilerType CodeCompilerType
public TParser Parser
protected bool IsDirectoryBuilder
protected bool NeedsConstructType
protected bool NeedsLoadFromBin
internal CodeCompileUnit CodeUnit
protected bool get_Parsed()
protected TParser CreateParser(VirtualPath virtualPath, string physicalPath, TextReader reader, HttpContext context)
protected TParser CreateParser(VirtualPath virtualPath, string physicalPath, HttpContext context)
protected BaseCompiler CreateCompiler(TParser parser)
protected string GetParserLanguage(TParser parser)
protected ICollection GetParserDependencies(TParser parser)
protected string GetCodeBehindSource(TParser parser)
protected string GetClassType(BaseCompiler compiler, TParser parser)
protected AspGenerator CreateAspGenerator(TParser parser)
protected List`1<string> GetReferencedAssemblies(TParser parser)
protected string MapPath(VirtualPath virtualPath)
protected TParser Parse()
protected void OverrideAssemblyPrefix(TParser parser, AssemblyBuilder assemblyBuilder)
internal void GenerateCode()
protected void GenerateCode(AssemblyBuilder assemblyBuilder, TParser parser, BaseCompiler compiler)
public void GenerateCode(AssemblyBuilder assemblyBuilder)
protected Type LoadTypeFromBin(BaseCompiler compiler, TParser parser)
public Type GetGeneratedType(CompilerResults results)
protected TextReader SpecialOpenReader(VirtualPath virtualPath, String& physicalPath)
public ICollection get_VirtualPathDependencies()
internal string get_LanguageName()
public CompilerType get_CodeCompilerType()
public TParser get_Parser()
protected bool get_IsDirectoryBuilder()
protected bool get_NeedsConstructType()
protected bool get_NeedsLoadFromBin()
internal CodeCompileUnit get_CodeUnit()
}
internal System.Web.Compilation.GlobalAsaxCompiler : BaseCompiler {
private ApplicationFileParser parser
private ArrayList applicationObjectTags
private ArrayList sessionObjectTags
internal ArrayList ApplicationObjects
internal ArrayList SessionObjects
public void .ctor(ApplicationFileParser parser)
public Type CompileApplicationType(ApplicationFileParser parser)
protected internal void CreateMethods()
private void ProcessObjects(ControlBuilder builder)
internal ArrayList get_ApplicationObjects()
internal ArrayList get_SessionObjects()
}
public System.Web.Compilation.IAssemblyPostProcessor {
public void PostProcessAssembly(string path)
}
internal System.Web.Compilation.IgnoreFileBuildProvider : BuildProvider {
public void GenerateCode(AssemblyBuilder assemblyBuilder)
}
public System.Web.Compilation.IImplicitResourceProvider {
public object GetObject(ImplicitResourceKey key, CultureInfo culture)
public ICollection GetImplicitResourceKeys(string keyPrefix)
}
internal System.Web.Compilation.ILocation {
public string Filename
public int BeginLine
public int EndLine
public int BeginColumn
public int EndColumn
public string PlainText
public string FileText
public string get_Filename()
public int get_BeginLine()
public int get_EndLine()
public int get_BeginColumn()
public int get_EndColumn()
public string get_PlainText()
public string get_FileText()
}
public System.Web.Compilation.ImplicitResourceKey : object {
private string _filter
private string _keyPrefix
private string _property
public string Filter
public string KeyPrefix
public string Property
public void .ctor(string filter, string keyPrefix, string property)
public string get_Filter()
public void set_Filter(string value)
public string get_KeyPrefix()
public void set_KeyPrefix(string value)
public string get_Property()
public void set_Property(string value)
}
public System.Web.Compilation.IResourceProvider {
public IResourceReader ResourceReader
public object GetObject(string resourceKey, CultureInfo culture)
public IResourceReader get_ResourceReader()
}
public System.Web.Compilation.LinePragmaCodeInfo : object {
public int CodeLength
public bool IsCodeNugget
public int StartColumn
public int StartGeneratedColumn
public int StartLine
public int get_CodeLength()
public bool get_IsCodeNugget()
public int get_StartColumn()
public int get_StartGeneratedColumn()
public int get_StartLine()
public void .ctor(int startLine, int startColumn, int startGeneratedColumn, int codeLength, bool isCodeNugget)
}
internal System.Web.Compilation.Location : object {
private int beginLine
private int endLine
private int beginColumn
private int endColumn
private string fileName
private string plainText
private ILocation location
public string Filename
public int BeginLine
public int EndLine
public int BeginColumn
public int EndColumn
public string PlainText
public string FileText
public void .ctor(ILocation location)
public void Init(ILocation location)
public string get_Filename()
public void set_Filename(string value)
public int get_BeginLine()
public void set_BeginLine(int value)
public int get_EndLine()
public void set_EndLine(int value)
public int get_BeginColumn()
public void set_BeginColumn(int value)
public int get_EndColumn()
public void set_EndColumn(int value)
public string get_PlainText()
public void set_PlainText(string value)
public string get_FileText()
}
internal System.Web.Compilation.MasterPageBuildProvider : TemplateBuildProvider {
protected BaseCompiler CreateCompiler(TemplateParser parser)
protected TemplateParser CreateParser(VirtualPath virtualPath, string physicalPath, HttpContext context)
protected TemplateParser CreateParser(VirtualPath virtualPath, string physicalPath, TextReader reader, HttpContext context)
}
internal System.Web.Compilation.MasterPageCompiler : UserControlCompiler {
private MasterPageParser parser
public void .ctor(MasterPageParser parser)
protected internal void CreateMethods()
}
internal System.Web.Compilation.OneNullCollection : object {
public int Count
public bool IsSynchronized
public object SyncRoot
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
}
internal System.Web.Compilation.PageBuildProvider : TemplateBuildProvider {
protected string MapPath(VirtualPath virtualPath)
protected TextReader SpecialOpenReader(VirtualPath virtualPath, String& physicalPath)
protected BaseCompiler CreateCompiler(TemplateParser parser)
protected TemplateParser CreateParser(VirtualPath virtualPath, string physicalPath, HttpContext context)
protected TemplateParser CreateParser(VirtualPath virtualPath, string physicalPath, TextReader reader, HttpContext context)
}
internal System.Web.Compilation.PageCompiler : TemplateControlCompiler {
private PageParser pageParser
private CodeTypeReference intRef
public void .ctor(PageParser pageParser)
protected void CreateStaticFields()
protected void CreateConstructor(CodeStatementCollection localVars, CodeStatementCollection trueStmt)
protected void AddInterfaces()
private void CreateGetTypeHashCode()
private CodeExpression GetExpressionForValueAndType(object value, Type valueType)
private CodeAssignStatement CreatePropertyAssign(CodeExpression owner, string name, CodeExpression rhs)
private CodeAssignStatement CreatePropertyAssign(CodeExpression owner, string name, object value)
private CodeAssignStatement CreatePropertyAssign(string name, object value)
private void AssignPropertyWithExpression(CodeMemberMethod method, string name, MainDirectiveAttribute`1<T> value, ILocation location)
private void AddStatementsFromDirective(ControlBuilder builder, CodeMemberMethod method, ILocation location)
protected void AddStatementsToConstructor(CodeConstructor ctor)
protected void AddStatementsToInitMethodTop(ControlBuilder builder, CodeMemberMethod method)
protected void AddStatementsToInitMethodBottom(ControlBuilder builder, CodeMemberMethod method)
protected void PrependStatementsToFrameworkInitialize(CodeMemberMethod method)
protected void AppendStatementsToFrameworkInitialize(CodeMemberMethod method)
private CodeAssignStatement AssignOutputCacheParameter(CodeVariableReferenceExpression variable, string propName, object value)
private void OutputCacheParamsBlock(CodeMemberMethod method)
private void CreateStronglyTypedProperty(Type type, string name)
protected internal void CreateMethods()
private void CreateAsyncMethods()
public Type CompilePageType(PageParser pageParser)
}
internal System.Web.Compilation.PageThemeCompiler : TemplateControlCompiler {
private PageThemeParser parser
public void .ctor(PageThemeParser parser)
protected internal void CreateMethods()
private CodeExpression CreateLinkedStyleSheets()
protected string HandleUrlProperty(string str, MemberInfo member)
private void CreateControlSkinMethod(ControlBuilder builder)
protected void AddClassAttributes()
protected void CreateStaticFields()
protected void CreateConstructor(CodeStatementCollection localVars, CodeStatementCollection trueStmt)
}
internal System.Web.Compilation.ParseErrorHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ILocation location, string message)
public IAsyncResult BeginInvoke(ILocation location, string message, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Web.Compilation.ParseException : HtmlizedException {
private ILocation location
private string fileText
public string Title
public string Description
public string ErrorMessage
public string SourceFile
public string FileName
public string FileText
public Int32[] ErrorLines
public bool ErrorLinesPaired
private void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(ILocation location, string message)
public void .ctor(ILocation location, string message, Exception inner)
public string get_Title()
public string get_Description()
public string get_ErrorMessage()
public string get_SourceFile()
public string get_FileName()
public string get_FileText()
public Int32[] get_ErrorLines()
public bool get_ErrorLinesPaired()
public void GetObjectData(SerializationInfo info, StreamingContext ctx)
}
internal System.Web.Compilation.ParserStack : object {
private Hashtable files
private Stack parsers
private AspParser current
public int Count
public AspParser Parser
public string Filename
public bool Push(AspParser parser)
public AspParser Pop()
public int get_Count()
public AspParser get_Parser()
public string get_Filename()
}
internal System.Web.Compilation.ParsingCompleteHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Compilation.PrecompilationFlags : Enum {
public int value__
public PrecompilationFlags Default
public PrecompilationFlags Updatable
public PrecompilationFlags OverwriteTarget
public PrecompilationFlags ForceDebug
public PrecompilationFlags Clean
public PrecompilationFlags CodeAnalysis
public PrecompilationFlags AllowPartiallyTrustedCallers
public PrecompilationFlags DelaySign
public PrecompilationFlags FixedNames
public PrecompilationFlags IgnoreBadImageFormatException
}
internal System.Web.Compilation.PreservationFile : object {
private string _filePath
private string _assembly
private int _fileHash
private int _flags
private int _hash
private BuildResultTypeCode _resultType
private string _virtualPath
private List`1<string> _filedeps
public string Assembly
public string FilePath
public int FileHash
public int Flags
public int Hash
public BuildResultTypeCode ResultType
public string VirtualPath
public List`1<string> FileDeps
public string get_Assembly()
public void set_Assembly(string value)
public string get_FilePath()
public void set_FilePath(string value)
public int get_FileHash()
public void set_FileHash(int value)
public int get_Flags()
public void set_Flags(int value)
public int get_Hash()
public void set_Hash(int value)
public BuildResultTypeCode get_ResultType()
public void set_ResultType(BuildResultTypeCode value)
public string get_VirtualPath()
public void set_VirtualPath(string value)
public List`1<string> get_FileDeps()
public void set_FileDeps(List`1<string> value)
public void .ctor(string filePath)
public void Parse()
public void Parse(string filePath)
private void ParseRecursively(XmlNode root)
private void ReadFileDeps(XmlNode node)
public void Save()
public void Save(string filePath)
private string GetNonEmptyOptionalAttribute(XmlNode n, string name)
private int GetNonEmptyOptionalAttributeInt32(XmlNode n, string name)
private string GetNonEmptyRequiredAttribute(XmlNode n, string name)
}
public System.Web.Compilation.ResourceExpressionBuilder : ExpressionBuilder {
public bool SupportsEvaluate
public object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public ResourceExpressionFields ParseExpression(string expression)
public object ParseExpression(string expression, Type propertyType, ExpressionBuilderContext context)
public bool get_SupportsEvaluate()
internal CodeExpression CreateGetLocalResourceObject(BoundPropertyEntry bpe, string resname)
internal CodeExpression CreateGetLocalResourceObject(MemberInfo mi, string resname)
private CodeExpression CreateGetLocalResourceObject(Type member_type, Type declaringType, string memberName, string resname)
}
public System.Web.Compilation.ResourceExpressionFields : object {
private string classKey
private string resourceKey
public string ClassKey
public string ResourceKey
internal void .ctor(string classKey, string resourceKey)
internal void .ctor(string resourceKey)
public string get_ClassKey()
public string get_ResourceKey()
}
public System.Web.Compilation.ResourceProviderFactory : object {
public IResourceProvider CreateGlobalResourceProvider(string classKey)
public IResourceProvider CreateLocalResourceProvider(string virtualPath)
}
public System.Web.Compilation.RouteUrlExpressionBuilder : ExpressionBuilder {
private Char[] expressionSplitChars
private Char[] keyValueSplitChars
public bool SupportsEvaluate
public bool get_SupportsEvaluate()
public object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public string GetRouteUrl(Control control, string expression)
public bool TryParseRouteExpression(string expression, RouteValueDictionary routeValues, String& routeName)
}
public System.Web.Compilation.RouteValueExpressionBuilder : ExpressionBuilder {
public bool SupportsEvaluate
public bool get_SupportsEvaluate()
public object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
public object GetRouteValue(Page page, string key, Type controlType, string propertyName)
}
internal System.Web.Compilation.SimpleBuildProvider : GenericBuildProvider`1<SimpleWebHandlerParser> {
private bool _parsed
private bool _needLoadFromBin
protected bool NeedsConstructType
protected bool NeedsLoadFromBin
protected SimpleWebHandlerParser Parse()
protected void GenerateCode(AssemblyBuilder assemblyBuilder, SimpleWebHandlerParser parser, BaseCompiler compiler)
protected Type LoadTypeFromBin(BaseCompiler compiler, SimpleWebHandlerParser parser)
protected string GetClassType(BaseCompiler compiler, SimpleWebHandlerParser parser)
protected ICollection GetParserDependencies(SimpleWebHandlerParser parser)
protected string GetParserLanguage(SimpleWebHandlerParser parser)
protected string GetCodeBehindSource(SimpleWebHandlerParser parser)
protected AspGenerator CreateAspGenerator(SimpleWebHandlerParser parser)
protected BaseCompiler CreateCompiler(SimpleWebHandlerParser parser)
protected List`1<string> GetReferencedAssemblies(SimpleWebHandlerParser parser)
protected bool get_NeedsConstructType()
protected bool get_NeedsLoadFromBin()
}
internal System.Web.Compilation.TagAttributes : object {
private Hashtable atts_hash
private Hashtable tmp_hash
private ArrayList keys
private ArrayList values
private bool got_hashed
public ICollection Keys
public ICollection Values
public object Item
public int Count
private void MakeHash()
public bool IsRunAtServer()
public void Add(object key, object value)
public ICollection get_Keys()
public ICollection get_Values()
private int CaseInsensitiveSearch(string key)
public object get_Item(object key)
public void set_Item(object key, object value)
public int get_Count()
public bool IsDataBound(string att)
public IDictionary GetDictionary(string key)
public string ToString()
private void CheckServerKey(object key)
}
internal System.Web.Compilation.TagParsedHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ILocation location, TagType tagtype, string id, TagAttributes attributes)
public IAsyncResult BeginInvoke(ILocation location, TagType tagtype, string id, TagAttributes attributes, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Web.Compilation.TagStack : object {
private Stack tags
public int Count
public string Current
public void Push(string tagid)
public string Pop()
public bool CompareTo(string tagid)
public int get_Count()
public string get_Current()
}
internal System.Web.Compilation.TagType : Enum {
public int value__
public TagType Text
public TagType Tag
public TagType Close
public TagType SelfClosing
public TagType Directive
public TagType ServerComment
public TagType DataBinding
public TagType CodeRender
public TagType CodeRenderExpression
public TagType Include
public TagType CodeRenderEncode
}
internal System.Web.Compilation.TemplateBuildProvider : GenericBuildProvider`1<TemplateParser> {
private SortedDictionary`2<string, ExtractDirectiveDependencies> directiveAttributes
private Char[] directiveValueTrimChars
private SortedDictionary`2<string, bool> dependencies
private string compilationLanguage
internal string LanguageName
internal string get_LanguageName()
private string ExtractDirectiveAttribute(string baseDirectory, string name, CaptureCollection names, CaptureCollection values)
private string ExtractDirectiveAttribute(string baseDirectory, string name, CaptureCollection names, CaptureCollection values, bool isPath)
private void ExtractControlDependencies(string baseDirectory, CaptureCollection names, CaptureCollection values, TemplateBuildProvider bp)
private void ExtractLanguage(string baseDirectory, CaptureCollection names, CaptureCollection values, TemplateBuildProvider bp)
private void ExtractPageOrMasterDependencies(string baseDirectory, CaptureCollection names, CaptureCollection values, TemplateBuildProvider bp)
private void ExtractCodeBehind(string baseDirectory, CaptureCollection names, CaptureCollection values, TemplateBuildProvider bp)
private void ExtractRegisterDependencies(string baseDirectory, CaptureCollection names, CaptureCollection values, TemplateBuildProvider bp)
private void ExtractPreviousPageTypeOrMasterTypeDependencies(string baseDirectory, CaptureCollection names, CaptureCollection values, TemplateBuildProvider bp)
private void ExtractReferenceDependencies(string baseDirectory, CaptureCollection names, CaptureCollection values, TemplateBuildProvider bp)
private IDictionary`2<string, bool> AddParsedDependencies(IDictionary`2<string, bool> dict)
internal IDictionary`2<string, bool> ExtractDependencies()
protected string GetClassType(BaseCompiler compiler, TemplateParser parser)
protected ICollection GetParserDependencies(TemplateParser parser)
protected string GetParserLanguage(TemplateParser parser)
protected string GetCodeBehindSource(TemplateParser parser)
protected AspGenerator CreateAspGenerator(TemplateParser parser)
protected List`1<string> GetReferencedAssemblies(TemplateParser parser)
}
internal System.Web.Compilation.TemplateControlCompiler : BaseCompiler {
private BindingFlags noCaseFlags
private Type monoTypeType
private TemplateControlParser parser
private int dataBoundAtts
internal ILocation currentLocation
private TypeConverter colorConverter
internal CodeVariableReferenceExpression ctrlVar
private List`1<string> masterPageContentPlaceHolders
private Regex startsWithBindRegex
private Regex bindRegex
private Regex bindRegexInValue
private Regex evalRegexInValue
private List`1<string> MasterPageContentPlaceHolders
private List`1<string> get_MasterPageContentPlaceHolders()
public void .ctor(TemplateControlParser parser)
protected void EnsureID(ControlBuilder builder)
private void CreateField(ControlBuilder builder, bool check)
private bool CheckBaseFieldOrProperty(string id, Type type, MemberAttributes& ma)
private void AddParsedSubObjectStmt(ControlBuilder builder, CodeExpression expr)
private CodeStatement CreateControlVariable(Type type, ControlBuilder builder, CodeMemberMethod method, CodeTypeReference ctrlTypeRef)
private void InitMethod(ControlBuilder builder, bool isTemplate, bool childrenAsProperties)
private void ProcessTemplateChildren(ControlBuilder builder)
private void SetCustomAttribute(CodeMemberMethod method, UnknownAttributeDescriptor uad)
private void SetCustomAttributes(CodeMemberMethod method)
protected void AddStatementsToInitMethodTop(ControlBuilder builder, CodeMemberMethod method)
protected void AddStatementsToInitMethodBottom(ControlBuilder builder, CodeMemberMethod method)
private void AddLiteralSubObject(ControlBuilder builder, string str)
private string TrimDB(string value, bool trimTail)
private CodeExpression CreateEvalInvokeExpression(Regex regex, string value, bool isBind)
private string SanitizeBindCall(Match match)
private string DataBoundProperty(ControlBuilder builder, Type type, string varName, string value)
private void AddCodeForPropertyOrField(ControlBuilder builder, Type type, string var_name, string att, MemberInfo member, bool isDataBound, bool isExpression)
private void RegisterBindingInfo(ControlBuilder builder, string propName, String& value)
private bool InvariantCompareNoCase(string a, string b)
internal MemberInfo GetFieldOrProperty(Type type, string name)
private bool IsWritablePropertyOrField(MemberInfo member)
private bool ProcessPropertiesAndFields(ControlBuilder builder, MemberInfo member, string id, string attValue, string prefix)
internal CodeExpression CompileExpression(MemberInfo member, Type type, string value, bool useSetAttribute)
private void AddExpressionAssign(CodeMemberMethod method, ControlBuilder builder, MemberInfo member, Type type, string name, string value)
internal CodeMethodInvokeExpression CreateConvertToCall(TypeCode typeCode, CodeExpression expr)
private BoundPropertyEntry CreateBoundPropertyEntry(PropertyInfo pi, string prefix, string expr, bool useSetAttribute)
private bool ResourceProviderHasObject(string key)
private void AssignPropertyFromResources(ControlBuilder builder, MemberInfo mi, string attvalue)
private void AssignPropertiesFromResources(ControlBuilder builder, Type controlType, string attvalue)
private void AssignPropertiesFromResources(ControlBuilder builder, string attvalue)
private void AddEventAssign(CodeMemberMethod method, ControlBuilder builder, string name, Type type, string value)
private void CreateAssignStatementFromAttribute(ControlBuilder builder, string id)
protected void CreateAssignStatementsFromAttributes(ControlBuilder builder)
private void CreateDBAttributeMethod(ControlBuilder builder, string attr, CodeExpression code)
private void AddRenderControl(ControlBuilder builder)
protected void AddChildCall(ControlBuilder parent, ControlBuilder child)
private void AddTemplateInvocation(ControlBuilder builder, string name, string methodName)
private void AddBindableTemplateInvocation(ControlBuilder builder, string name, string methodName, string extractMethodName)
private string CreateExtractValuesMethod(TemplateBuilder builder)
private void AddContentTemplateInvocation(ContentBuilderInternal cbuilder, CodeMemberMethod method, string methodName)
private void AddCodeRender(ControlBuilder parent, CodeRenderBuilder cr)
private CodeExpression GetWrappedCodeExpression(CodeRenderBuilder cr)
private Type GetContainerType(ControlBuilder builder)
private CodeMemberMethod CreateDBMethod(ControlBuilder builder, string name, Type container, Type target)
private void AddDataBindingLiteral(ControlBuilder builder, DataBindingBuilder db)
private void FlushText(ControlBuilder builder, StringBuilder sb)
protected void CreateControlTree(ControlBuilder builder, bool inTemplate, bool childrenAsProperties)
protected void AddStatementsToConstructor(CodeConstructor ctor)
protected internal void CreateMethods()
protected void InitializeType()
private void CallBaseFrameworkInitialize(CodeMemberMethod method)
private void CallSetStringResourcePointer(CodeMemberMethod method)
private void CreateFrameworkInitializeMethod()
protected void PrependStatementsToFrameworkInitialize(CodeMemberMethod method)
protected void AppendStatementsToFrameworkInitialize(CodeMemberMethod method)
protected void AddApplicationAndSessionObjects()
protected void CreateStaticFields()
protected void ProcessObjectTag(ObjectTagBuilder tag)
private void CreateProperties()
private void CreateApplicationInstance()
private void CreateContentPlaceHolderTemplateProperty(string backingField, string name)
private void CreateAutoHandlers()
private void CreateAutoEventWireup()
protected string HandleUrlProperty(string str, MemberInfo member)
private TypeConverter GetConverterForMember(MemberInfo member)
private CodeExpression CreateNullableExpression(Type type, CodeExpression inst, bool nullable)
private bool SafeCanConvertFrom(Type type, TypeConverter cvt)
private bool SafeCanConvertTo(Type type, TypeConverter cvt)
private CodeExpression GetExpressionFromString(Type type, string str, MemberInfo member)
private CodeExpression GenerateInstance(InstanceDescriptor idesc, bool throwOnError)
private CodeExpression GenerateObjectInstance(object value, bool throwOnError)
private InstanceDescriptor GetDefaultInstanceDescriptor(object value)
}
internal System.Web.Compilation.TextBlock : object {
public string Content
public TextBlockType Type
public int Length
public void .ctor(TextBlockType type, string content)
public string ToString()
}
internal System.Web.Compilation.TextBlockType : Enum {
public int value__
public TextBlockType Verbatim
public TextBlockType Expression
public TextBlockType Tag
public TextBlockType Comment
}
internal System.Web.Compilation.TextParsedHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ILocation location, string text)
public IAsyncResult BeginInvoke(ILocation location, string text, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Web.Compilation.ThemeDirectoryBuildProvider : TemplateBuildProvider {
protected bool IsDirectoryBuilder
protected void OverrideAssemblyPrefix(TemplateParser parser, AssemblyBuilder assemblyBuilder)
protected BaseCompiler CreateCompiler(TemplateParser parser)
protected TemplateParser CreateParser(VirtualPath virtualPath, string inputFile, TextReader reader, HttpContext context)
protected TemplateParser CreateParser(VirtualPath virtualPath, string inputFile, HttpContext context)
protected bool get_IsDirectoryBuilder()
}
internal System.Web.Compilation.Token : object {
public int EOF
public int IDENTIFIER
public int DIRECTIVE
public int ATTVALUE
public int TEXT
public int DOUBLEDASH
public int CLOSING
}
internal System.Web.Compilation.UserControlBuildProvider : TemplateBuildProvider {
protected BaseCompiler CreateCompiler(TemplateParser parser)
protected TemplateParser CreateParser(VirtualPath virtualPath, string physicalPath, HttpContext context)
protected TemplateParser CreateParser(VirtualPath virtualPath, string physicalPath, TextReader reader, HttpContext context)
}
internal System.Web.Compilation.UserControlCompiler : TemplateControlCompiler {
private UserControlParser parser
public void .ctor(UserControlParser parser)
public Type CompileUserControlType(UserControlParser parser)
protected void AddClassAttributes()
protected internal void CreateMethods()
private void AddOutputCacheAttribute()
private void AddPrimitiveArgument(CodeAttributeArgumentCollection arguments, object obj)
protected void AddStatementsToInitMethodTop(ControlBuilder builder, CodeMemberMethod method)
}
internal System.Web.Compilation.WebHandlerBuildProvider : SimpleBuildProvider {
protected SimpleWebHandlerParser CreateParser(VirtualPath virtualPath, string physicalPath, TextReader reader, HttpContext context)
protected SimpleWebHandlerParser CreateParser(VirtualPath virtualPath, string physicalPath, HttpContext context)
}
internal System.Web.Compilation.WebServiceBuildProvider : SimpleBuildProvider {
protected SimpleWebHandlerParser CreateParser(VirtualPath virtualPath, string physicalPath, TextReader reader, HttpContext context)
protected SimpleWebHandlerParser CreateParser(VirtualPath virtualPath, string physicalPath, HttpContext context)
}
internal System.Web.Compilation.WebServiceCompiler : BaseCompiler {
private SimpleWebHandlerParser parser
private string inputFile
internal SimpleWebHandlerParser Parser
internal string InputFile
public void .ctor(SimpleWebHandlerParser wService)
public Type CompileIntoType(SimpleWebHandlerParser wService)
public Type GetCompiledType()
private void CheckCompilerErrors(CompilerResults results)
internal SimpleWebHandlerParser get_Parser()
internal string get_InputFile()
}
internal System.Web.Compilation.WsdlBuildProvider : BuildProvider {
private CompilerType _compilerType
public CompilerType CodeCompilerType
public CompilerType get_CodeCompilerType()
public void GenerateCode(AssemblyBuilder assemblyBuilder)
}
internal System.Web.Compilation.XsdBuildProvider : BuildProvider {
public void GenerateCode(AssemblyBuilder assemblyBuilder)
}
public System.Web.Configuration.AdapterDictionary : OrderedDictionary {
public string Item
public string get_Item(string key)
public void set_Item(string key, string value)
}
public System.Web.Configuration.AnonymousIdentificationSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty enabledProp
private ConfigurationProperty cookielessProp
private ConfigurationProperty cookieNameProp
private ConfigurationProperty cookieTimeoutProp
private ConfigurationProperty cookiePathProp
private ConfigurationProperty cookieRequireSSLProp
private ConfigurationProperty cookieSlidingExpirationProp
private ConfigurationProperty cookieProtectionProp
private ConfigurationProperty domainProp
public HttpCookieMode Cookieless
public string CookieName
public string CookiePath
public CookieProtection CookieProtection
public bool CookieRequireSSL
public bool CookieSlidingExpiration
public TimeSpan CookieTimeout
public string Domain
public bool Enabled
protected internal ConfigurationPropertyCollection Properties
public HttpCookieMode get_Cookieless()
public void set_Cookieless(HttpCookieMode value)
public string get_CookieName()
public void set_CookieName(string value)
public string get_CookiePath()
public void set_CookiePath(string value)
public CookieProtection get_CookieProtection()
public void set_CookieProtection(CookieProtection value)
public bool get_CookieRequireSSL()
public void set_CookieRequireSSL(bool value)
public bool get_CookieSlidingExpiration()
public void set_CookieSlidingExpiration(bool value)
public TimeSpan get_CookieTimeout()
public void set_CookieTimeout(TimeSpan value)
public string get_Domain()
public void set_Domain(string value)
public bool get_Enabled()
public void set_Enabled(bool value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.AssemblyCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public AssemblyInfo Item
public AssemblyInfo Item
protected internal ConfigurationPropertyCollection Properties
public void Add(AssemblyInfo assemblyInformation)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string key)
public void RemoveAt(int index)
public AssemblyInfo get_Item(int index)
public void set_Item(int index, AssemblyInfo value)
public AssemblyInfo get_Item(string assemblyName)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.AssemblyInfo : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty assemblyProp
public string Assembly
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string assemblyName)
public string get_Assembly()
public void set_Assembly(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.AsyncPreloadModeFlags : Enum {
public int value__
public AsyncPreloadModeFlags None
public AsyncPreloadModeFlags Form
public AsyncPreloadModeFlags FormMultiPart
public AsyncPreloadModeFlags NonForm
public AsyncPreloadModeFlags AllFormTypes
public AsyncPreloadModeFlags All
}
public System.Web.Configuration.AuthenticationMode : Enum {
public int value__
public AuthenticationMode None
public AuthenticationMode Windows
public AuthenticationMode Passport
public AuthenticationMode Forms
}
public System.Web.Configuration.AuthenticationSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty formsProp
private ConfigurationProperty passportProp
private ConfigurationProperty modeProp
public FormsAuthenticationConfiguration Forms
public PassportAuthentication Passport
public AuthenticationMode Mode
protected internal ConfigurationPropertyCollection Properties
protected internal void Reset(ConfigurationElement parentElement)
public FormsAuthenticationConfiguration get_Forms()
public PassportAuthentication get_Passport()
public AuthenticationMode get_Mode()
public void set_Mode(AuthenticationMode value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.AuthorizationRule : ConfigurationElement {
private ConfigurationProperty rolesProp
private ConfigurationProperty usersProp
private ConfigurationProperty verbsProp
private ConfigurationPropertyCollection properties
private AuthorizationRuleAction action
private ConfigurationSaveMode saveMode
public AuthorizationRuleAction Action
public StringCollection Roles
public StringCollection Users
public StringCollection Verbs
protected internal ConfigurationPropertyCollection Properties
public void .ctor(AuthorizationRuleAction action)
public bool Equals(object obj)
public int GetHashCode()
protected internal bool IsModified()
private void VerifyData()
protected void PostDeserialize()
protected void PreSerialize(XmlWriter writer)
protected internal void Reset(ConfigurationElement parentElement)
protected internal void ResetModified()
protected internal bool SerializeElement(XmlWriter writer, bool serializeCollectionKey)
protected internal void SetReadOnly()
protected internal void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode)
public AuthorizationRuleAction get_Action()
public void set_Action(AuthorizationRuleAction value)
public StringCollection get_Roles()
public StringCollection get_Users()
public StringCollection get_Verbs()
protected internal ConfigurationPropertyCollection get_Properties()
internal bool CheckVerb(string verb)
internal bool CheckUser(string user)
internal bool CheckRole(IPrincipal user)
}
public System.Web.Configuration.AuthorizationRuleAction : Enum {
public int value__
public AuthorizationRuleAction Deny
public AuthorizationRuleAction Allow
}
public System.Web.Configuration.AuthorizationRuleCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public ConfigurationElementCollectionType CollectionType
protected string ElementName
public AuthorizationRule Item
protected internal ConfigurationPropertyCollection Properties
public void Add(AuthorizationRule rule)
public void Clear()
protected ConfigurationElement CreateNewElement(string elementName)
protected ConfigurationElement CreateNewElement()
public AuthorizationRule Get(int index)
protected object GetElementKey(ConfigurationElement element)
public int IndexOf(AuthorizationRule rule)
protected bool IsElementName(string elementname)
public void Remove(AuthorizationRule rule)
public void RemoveAt(int index)
public void Set(int index, AuthorizationRule rule)
public ConfigurationElementCollectionType get_CollectionType()
protected string get_ElementName()
public AuthorizationRule get_Item(int index)
public void set_Item(int index, AuthorizationRule value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.AuthorizationSection : ConfigurationSection {
private ConfigurationProperty rulesProp
private ConfigurationPropertyCollection properties
public AuthorizationRuleCollection Rules
protected internal ConfigurationPropertyCollection Properties
protected void PostDeserialize()
public AuthorizationRuleCollection get_Rules()
protected internal ConfigurationPropertyCollection get_Properties()
internal bool IsValidUser(IPrincipal user, string verb)
}
public System.Web.Configuration.BrowserCapabilitiesCodeGenerator : object {
public void Create()
public bool Uninstall()
}
public System.Web.Configuration.BrowserCapabilitiesFactory : BrowserCapabilitiesFactoryBase {
public void ConfigureBrowserCapabilities(NameValueCollection headers, HttpBrowserCapabilities browserCaps)
protected void PopulateBrowserElements(IDictionary dictionary)
protected void PopulateMatchedHeaders(IDictionary dictionary)
}
public System.Web.Configuration.BrowserCapabilitiesFactoryBase : object {
public void ConfigureBrowserCapabilities(NameValueCollection headers, HttpBrowserCapabilities browserCaps)
public void ConfigureCustomCapabilities(NameValueCollection headers, HttpBrowserCapabilities browserCaps)
}
internal System.Web.Configuration.BrowserCapsElementType : Enum {
public int value__
public BrowserCapsElementType Capabilities
public BrowserCapsElementType Capture
public BrowserCapsElementType ControlAdapters
public BrowserCapsElementType Identification
public BrowserCapsElementType SampleHeaders
}
public System.Web.Configuration.BufferModesCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public BufferModeSettings Item
public BufferModeSettings Item
protected internal ConfigurationPropertyCollection Properties
public void Add(BufferModeSettings bufferModeSettings)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string s)
public BufferModeSettings get_Item(int index)
public void set_Item(int index, BufferModeSettings value)
public BufferModeSettings get_Item(string key)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.BufferModeSettings : ConfigurationElement {
private ConfigurationProperty maxBufferSizeProp
private ConfigurationProperty maxBufferThreadsProp
private ConfigurationProperty maxFlushSizeProp
private ConfigurationProperty nameProp
private ConfigurationProperty regularFlushIntervalProp
private ConfigurationProperty urgentFlushIntervalProp
private ConfigurationProperty urgentFlushThresholdProp
private ConfigurationPropertyCollection properties
private ConfigurationElementProperty elementProperty
protected internal ConfigurationElementProperty ElementProperty
public int MaxBufferSize
public int MaxBufferThreads
public int MaxFlushSize
public string Name
public TimeSpan RegularFlushInterval
public TimeSpan UrgentFlushInterval
public int UrgentFlushThreshold
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name, int maxBufferSize, int maxFlushSize, int urgentFlushThreshold, TimeSpan regularFlushInterval, TimeSpan urgentFlushInterval, int maxBufferThreads)
private void ValidateElement(object o)
protected internal ConfigurationElementProperty get_ElementProperty()
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public int get_MaxBufferThreads()
public void set_MaxBufferThreads(int value)
public int get_MaxFlushSize()
public void set_MaxFlushSize(int value)
public string get_Name()
public void set_Name(string value)
public TimeSpan get_RegularFlushInterval()
public void set_RegularFlushInterval(TimeSpan value)
public TimeSpan get_UrgentFlushInterval()
public void set_UrgentFlushInterval(TimeSpan value)
public int get_UrgentFlushThreshold()
public void set_UrgentFlushThreshold(int value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.BuildProvider : ConfigurationElement {
private ConfigurationProperty extensionProp
private ConfigurationProperty typeProp
private ConfigurationPropertyCollection properties
public string Extension
public string Type
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string extension, string type)
public string get_Extension()
public void set_Extension(string value)
public string get_Type()
public void set_Type(string value)
protected internal ConfigurationPropertyCollection get_Properties()
public bool Equals(object provider)
public int GetHashCode()
}
public System.Web.Configuration.BuildProviderCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection props
public BuildProvider Item
public BuildProvider Item
protected internal ConfigurationPropertyCollection Properties
public BuildProvider get_Item(int index)
public void set_Item(int index, BuildProvider value)
public BuildProvider get_Item(string name)
protected internal ConfigurationPropertyCollection get_Properties()
public void Add(BuildProvider buildProvider)
public void Clear()
public void Remove(string name)
public void RemoveAt(int index)
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
internal Type GetProviderTypeForExtension(string extension)
internal BuildProvider GetProviderInstanceForExtension(string extension)
}
public System.Web.Configuration.CacheSection : ConfigurationSection {
private ConfigurationProperty disableExpirationProp
private ConfigurationProperty disableMemoryCollectionProp
private ConfigurationProperty percentagePhysicalMemoryUsedLimitProp
private ConfigurationProperty privateBytesLimitProp
private ConfigurationProperty privateBytesPollTimeProp
private ConfigurationPropertyCollection properties
public bool DisableExpiration
public bool DisableMemoryCollection
public int PercentagePhysicalMemoryUsedLimit
public long PrivateBytesLimit
public TimeSpan PrivateBytesPollTime
protected internal ConfigurationPropertyCollection Properties
public string DefaultProvider
public ProviderSettingsCollection Providers
public bool get_DisableExpiration()
public void set_DisableExpiration(bool value)
public bool get_DisableMemoryCollection()
public void set_DisableMemoryCollection(bool value)
public int get_PercentagePhysicalMemoryUsedLimit()
public void set_PercentagePhysicalMemoryUsedLimit(int value)
public long get_PrivateBytesLimit()
public void set_PrivateBytesLimit(long value)
public TimeSpan get_PrivateBytesPollTime()
public void set_PrivateBytesPollTime(TimeSpan value)
protected internal ConfigurationPropertyCollection get_Properties()
public string get_DefaultProvider()
public void set_DefaultProvider(string value)
public ProviderSettingsCollection get_Providers()
}
internal System.Web.Configuration.CapabilitiesBuild : object {
protected Collection`1<string> HeaderNames(Collection`1<string> list)
public CapabilitiesResult Process(string userAgent, IDictionary initialCapabilities)
public CapabilitiesResult Process(HttpRequest request, IDictionary initialCapabilities)
public CapabilitiesResult Process(NameValueCollection header, IDictionary initialCapabilities)
}
internal System.Web.Configuration.CapabilitiesResult : HttpBrowserCapabilities {
public StringCollection Keys
public string UserAgent
internal void .ctor(IDictionary items)
internal void AddCapabilities(string name, string value)
internal void AddMatchingBrowserId(string id)
internal string Replace(string item)
public StringCollection get_Keys()
public string get_UserAgent()
}
public System.Web.Configuration.ClientTarget : ConfigurationElement {
private ConfigurationProperty aliasProp
private ConfigurationProperty userAgentProp
private ConfigurationPropertyCollection properties
public string Alias
public string UserAgent
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string alias, string userAgent)
public string get_Alias()
internal void set_Alias(string value)
public string get_UserAgent()
internal void set_UserAgent(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.ClientTargetCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public String[] AllKeys
public ClientTarget Item
public ClientTarget Item
protected internal ConfigurationPropertyCollection Properties
public void Add(ClientTarget clientTarget)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public string GetKey(int index)
public void Remove(string name)
public void Remove(ClientTarget clientTarget)
public void RemoveAt(int index)
public String[] get_AllKeys()
public ClientTarget get_Item(int index)
public void set_Item(int index, ClientTarget value)
public ClientTarget get_Item(string name)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.ClientTargetSection : ConfigurationSection {
private ConfigurationProperty clientTargetsProp
private ConfigurationPropertyCollection properties
public ClientTargetCollection ClientTargets
protected internal ConfigurationPropertyCollection Properties
public ClientTargetCollection get_ClientTargets()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.CodeSubDirectoriesCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection props
public CodeSubDirectory Item
public ConfigurationElementCollectionType CollectionType
protected string ElementName
protected internal ConfigurationPropertyCollection Properties
public CodeSubDirectory get_Item(int index)
public void set_Item(int index, CodeSubDirectory value)
public ConfigurationElementCollectionType get_CollectionType()
protected string get_ElementName()
protected internal ConfigurationPropertyCollection get_Properties()
public void Add(CodeSubDirectory codeSubDirectory)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string directoryName)
public void RemoveAt(int index)
}
public System.Web.Configuration.CodeSubDirectory : ConfigurationElement {
private ConfigurationProperty directoryNameProp
private ConfigurationPropertyCollection properties
public string DirectoryName
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string directoryName)
public string get_DirectoryName()
public void set_DirectoryName(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.CompilationSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty compilersProp
private ConfigurationProperty tempDirectoryProp
private ConfigurationProperty debugProp
private ConfigurationProperty strictProp
private ConfigurationProperty explicitProp
private ConfigurationProperty batchProp
private ConfigurationProperty batchTimeoutProp
private ConfigurationProperty maxBatchSizeProp
private ConfigurationProperty maxBatchGeneratedFileSizeProp
private ConfigurationProperty numRecompilesBeforeAppRestartProp
private ConfigurationProperty defaultLanguageProp
private ConfigurationProperty assembliesProp
private ConfigurationProperty assemblyPostProcessorTypeProp
private ConfigurationProperty buildProvidersProp
private ConfigurationProperty expressionBuildersProp
private ConfigurationProperty urlLinePragmasProp
private ConfigurationProperty codeSubDirectoriesProp
private ConfigurationProperty optimizeCompilationsProp
private ConfigurationProperty targetFrameworkProp
public AssemblyCollection Assemblies
public string AssemblyPostProcessorType
public bool Batch
public TimeSpan BatchTimeout
public BuildProviderCollection BuildProviders
public CodeSubDirectoriesCollection CodeSubDirectories
public CompilerCollection Compilers
public bool Debug
public string DefaultLanguage
public bool Explicit
public ExpressionBuilderCollection ExpressionBuilders
public int MaxBatchGeneratedFileSize
public int MaxBatchSize
public int NumRecompilesBeforeAppRestart
public bool OptimizeCompilations
public bool Strict
public string TargetFramework
public string TempDirectory
public bool UrlLinePragmas
protected internal ConfigurationPropertyCollection Properties
public string ControlBuilderInterceptorType
public bool DisableObsoleteWarnings
public bool EnablePrefetchOptimization
public FolderLevelBuildProviderCollection FolderLevelBuildProviders
public int MaxConcurrentCompilations
public ProfileGuidedOptimizationsFlags ProfileGuidedOptimizations
protected void PostDeserialize()
protected internal object GetRuntimeObject()
public AssemblyCollection get_Assemblies()
public string get_AssemblyPostProcessorType()
public void set_AssemblyPostProcessorType(string value)
public bool get_Batch()
public void set_Batch(bool value)
public TimeSpan get_BatchTimeout()
public void set_BatchTimeout(TimeSpan value)
public BuildProviderCollection get_BuildProviders()
public CodeSubDirectoriesCollection get_CodeSubDirectories()
public CompilerCollection get_Compilers()
public bool get_Debug()
public void set_Debug(bool value)
public string get_DefaultLanguage()
public void set_DefaultLanguage(string value)
public bool get_Explicit()
public void set_Explicit(bool value)
public ExpressionBuilderCollection get_ExpressionBuilders()
public int get_MaxBatchGeneratedFileSize()
public void set_MaxBatchGeneratedFileSize(int value)
public int get_MaxBatchSize()
public void set_MaxBatchSize(int value)
public int get_NumRecompilesBeforeAppRestart()
public void set_NumRecompilesBeforeAppRestart(int value)
public bool get_OptimizeCompilations()
public void set_OptimizeCompilations(bool value)
public bool get_Strict()
public void set_Strict(bool value)
public string get_TargetFramework()
public void set_TargetFramework(string value)
public string get_TempDirectory()
public void set_TempDirectory(string value)
public bool get_UrlLinePragmas()
public void set_UrlLinePragmas(bool value)
protected internal ConfigurationPropertyCollection get_Properties()
public string get_ControlBuilderInterceptorType()
public void set_ControlBuilderInterceptorType(string value)
public bool get_DisableObsoleteWarnings()
public void set_DisableObsoleteWarnings(bool value)
public bool get_EnablePrefetchOptimization()
public void set_EnablePrefetchOptimization(bool value)
public FolderLevelBuildProviderCollection get_FolderLevelBuildProviders()
public int get_MaxConcurrentCompilations()
public void set_MaxConcurrentCompilations(int value)
public ProfileGuidedOptimizationsFlags get_ProfileGuidedOptimizations()
public void set_ProfileGuidedOptimizations(ProfileGuidedOptimizationsFlags value)
}
public System.Web.Configuration.Compiler : ConfigurationElement {
private ConfigurationProperty compilerOptionsProp
private ConfigurationProperty extensionProp
private ConfigurationProperty languageProp
private ConfigurationProperty typeProp
private ConfigurationProperty warningLevelProp
private ConfigurationPropertyCollection properties
public string CompilerOptions
public string Extension
public string Language
public string Type
public int WarningLevel
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string compilerOptions, string extension, string language, string type, int warningLevel)
public string get_CompilerOptions()
internal void set_CompilerOptions(string value)
public string get_Extension()
internal void set_Extension(string value)
public string get_Language()
internal void set_Language(string value)
public string get_Type()
internal void set_Type(string value)
public int get_WarningLevel()
internal void set_WarningLevel(int value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.CompilerCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public String[] AllKeys
public ConfigurationElementCollectionType CollectionType
protected string ElementName
protected internal ConfigurationPropertyCollection Properties
public Compiler Item
public Compiler Item
protected ConfigurationElement CreateNewElement()
public Compiler Get(int index)
public Compiler Get(string language)
protected object GetElementKey(ConfigurationElement element)
public string GetKey(int index)
public String[] get_AllKeys()
public ConfigurationElementCollectionType get_CollectionType()
protected string get_ElementName()
protected internal ConfigurationPropertyCollection get_Properties()
public Compiler get_Item(int index)
public Compiler get_Item(string language)
}
public System.Web.Configuration.CustomError : ConfigurationElement {
private ConfigurationProperty redirectProp
private ConfigurationProperty statusCodeProp
private ConfigurationPropertyCollection properties
public string Redirect
public int StatusCode
protected internal ConfigurationPropertyCollection Properties
public void .ctor(int statusCode, string redirect)
public bool Equals(object customError)
public int GetHashCode()
public string get_Redirect()
public void set_Redirect(string value)
public int get_StatusCode()
public void set_StatusCode(int value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.CustomErrorCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public String[] AllKeys
public ConfigurationElementCollectionType CollectionType
protected string ElementName
public CustomError Item
public CustomError Item
protected internal ConfigurationPropertyCollection Properties
public void Add(CustomError customError)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public string GetKey(int index)
public CustomError Get(string statusCode)
public CustomError Get(int index)
public void Remove(string statusCode)
public void RemoveAt(int index)
public void Set(CustomError customError)
public String[] get_AllKeys()
public ConfigurationElementCollectionType get_CollectionType()
protected string get_ElementName()
public CustomError get_Item(int index)
public void set_Item(int index, CustomError value)
public CustomError get_Item(string statusCode)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.CustomErrorsMode : Enum {
public int value__
public CustomErrorsMode RemoteOnly
public CustomErrorsMode On
public CustomErrorsMode Off
}
public System.Web.Configuration.CustomErrorsRedirectMode : Enum {
public int value__
public CustomErrorsRedirectMode ResponseRedirect
public CustomErrorsRedirectMode ResponseRewrite
}
public System.Web.Configuration.CustomErrorsSection : ConfigurationSection {
private ConfigurationProperty defaultRedirectProp
private ConfigurationProperty errorsProp
private ConfigurationProperty modeProp
private ConfigurationProperty redirectModeProp
private ConfigurationPropertyCollection properties
public string DefaultRedirect
public CustomErrorCollection Errors
public CustomErrorsMode Mode
public CustomErrorsRedirectMode RedirectMode
protected internal ConfigurationPropertyCollection Properties
public bool AllowNestedErrors
protected internal void DeserializeSection(XmlReader reader)
protected internal void Reset(ConfigurationElement parentElement)
public string get_DefaultRedirect()
public void set_DefaultRedirect(string value)
public CustomErrorCollection get_Errors()
public CustomErrorsMode get_Mode()
public void set_Mode(CustomErrorsMode value)
public CustomErrorsRedirectMode get_RedirectMode()
public void set_RedirectMode(CustomErrorsRedirectMode value)
protected internal ConfigurationPropertyCollection get_Properties()
public bool get_AllowNestedErrors()
public void set_AllowNestedErrors(bool value)
}
internal System.Web.Configuration.CustomWebEventKey : object {
internal Type _type
internal int _eventCode
internal void .ctor(Type eventType, int eventCode)
}
internal System.Web.Configuration.DelayedRegex : object {
private string _regstring
private Regex _regex
internal void .ctor(string s)
internal Match Match(string s)
internal int GroupNumberFromName(string name)
internal void EnsureRegex()
}
public System.Web.Configuration.DeploymentSection : ConfigurationSection {
private ConfigurationProperty retailProp
private ConfigurationPropertyCollection properties
public bool Retail
protected internal ConfigurationPropertyCollection Properties
public bool get_Retail()
public void set_Retail(bool value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.EventMappingSettings : ConfigurationElement {
private ConfigurationProperty endEventCodeProp
private ConfigurationProperty nameProp
private ConfigurationProperty startEventCodeProp
private ConfigurationProperty typeProp
private ConfigurationPropertyCollection properties
public int EndEventCode
public string Name
public int StartEventCode
public string Type
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name, string type)
public void .ctor(string name, string type, int startEventCode, int endEventCode)
public int get_EndEventCode()
public void set_EndEventCode(int value)
public string get_Name()
public void set_Name(string value)
public int get_StartEventCode()
public void set_StartEventCode(int value)
public string get_Type()
public void set_Type(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.EventMappingSettingsCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public EventMappingSettings Item
public EventMappingSettings Item
protected internal ConfigurationPropertyCollection Properties
public void Add(EventMappingSettings eventMappingSettings)
public void Clear()
public bool Contains(string name)
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public int IndexOf(string name)
public void Insert(int index, EventMappingSettings eventMappingSettings)
public void Remove(string name)
public void RemoveAt(int index)
public EventMappingSettings get_Item(int index)
public void set_Item(int index, EventMappingSettings value)
public EventMappingSettings get_Item(string key)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.ExpressionBuilder : ConfigurationElement {
private ConfigurationProperty expressionPrefixProp
private ConfigurationProperty typeProp
private ConfigurationPropertyCollection properties
public string ExpressionPrefix
public string Type
internal Type TypeInternal
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string expressionPrefix, string theType)
public string get_ExpressionPrefix()
public void set_ExpressionPrefix(string value)
public string get_Type()
public void set_Type(string value)
internal Type get_TypeInternal()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.ExpressionBuilderCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection props
public ExpressionBuilder Item
public ExpressionBuilder Item
protected internal ConfigurationPropertyCollection Properties
public ExpressionBuilder get_Item(int index)
public void set_Item(int index, ExpressionBuilder value)
public ExpressionBuilder get_Item(string name)
protected internal ConfigurationPropertyCollection get_Properties()
public void Add(ExpressionBuilder buildProvider)
public void Clear()
public void Remove(string name)
public void RemoveAt(int index)
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
}
public System.Web.Configuration.FcnMode : Enum {
public int value__
public FcnMode Default
public FcnMode Disabled
public FcnMode NotSet
public FcnMode Single
}
public System.Web.Configuration.FolderLevelBuildProvider : ConfigurationElement {
public string Name
public string Type
public void .ctor(string name, string type)
public string get_Name()
public void set_Name(string value)
public string get_Type()
public void set_Type(string value)
}
public System.Web.Configuration.FolderLevelBuildProviderCollection : ConfigurationElementCollection {
public FolderLevelBuildProvider Item
public FolderLevelBuildProvider get_Item(int index)
public void set_Item(int index, FolderLevelBuildProvider value)
public void Add(FolderLevelBuildProvider buildProvider)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string name)
public void RemoveAt(int index)
}
public System.Web.Configuration.FormsAuthenticationConfiguration : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty cookielessProp
private ConfigurationProperty credentialsProp
private ConfigurationProperty defaultUrlProp
private ConfigurationProperty domainProp
private ConfigurationProperty enableCrossAppRedirectsProp
private ConfigurationProperty loginUrlProp
private ConfigurationProperty nameProp
private ConfigurationProperty pathProp
private ConfigurationProperty protectionProp
private ConfigurationProperty requireSSLProp
private ConfigurationProperty slidingExpirationProp
private ConfigurationProperty timeoutProp
private ConfigurationElementProperty elementProperty
protected internal ConfigurationElementProperty ElementProperty
public HttpCookieMode Cookieless
public FormsAuthenticationCredentials Credentials
public string DefaultUrl
public string Domain
public bool EnableCrossAppRedirects
public string LoginUrl
public string Name
public string Path
public FormsProtectionEnum Protection
public bool RequireSSL
public bool SlidingExpiration
public TimeSpan Timeout
protected internal ConfigurationPropertyCollection Properties
public TicketCompatibilityMode TicketCompatibilityMode
private void ValidateElement(object o)
protected internal ConfigurationElementProperty get_ElementProperty()
public HttpCookieMode get_Cookieless()
public void set_Cookieless(HttpCookieMode value)
public FormsAuthenticationCredentials get_Credentials()
public string get_DefaultUrl()
public void set_DefaultUrl(string value)
public string get_Domain()
public void set_Domain(string value)
public bool get_EnableCrossAppRedirects()
public void set_EnableCrossAppRedirects(bool value)
public string get_LoginUrl()
public void set_LoginUrl(string value)
public string get_Name()
public void set_Name(string value)
public string get_Path()
public void set_Path(string value)
public FormsProtectionEnum get_Protection()
public void set_Protection(FormsProtectionEnum value)
public bool get_RequireSSL()
public void set_RequireSSL(bool value)
public bool get_SlidingExpiration()
public void set_SlidingExpiration(bool value)
public TimeSpan get_Timeout()
public void set_Timeout(TimeSpan value)
protected internal ConfigurationPropertyCollection get_Properties()
public TicketCompatibilityMode get_TicketCompatibilityMode()
public void set_TicketCompatibilityMode(TicketCompatibilityMode value)
}
public System.Web.Configuration.FormsAuthenticationCredentials : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty passwordFormatProp
private ConfigurationProperty usersProp
public FormsAuthPasswordFormat PasswordFormat
public FormsAuthenticationUserCollection Users
protected internal ConfigurationPropertyCollection Properties
public FormsAuthPasswordFormat get_PasswordFormat()
public void set_PasswordFormat(FormsAuthPasswordFormat value)
public FormsAuthenticationUserCollection get_Users()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.FormsAuthenticationUser : ConfigurationElement {
private ConfigurationProperty nameProp
private ConfigurationProperty passwordProp
private ConfigurationPropertyCollection properties
public string Name
public string Password
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name, string password)
public string get_Name()
public void set_Name(string value)
public string get_Password()
public void set_Password(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.FormsAuthenticationUserCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public String[] AllKeys
public ConfigurationElementCollectionType CollectionType
protected string ElementName
protected internal ConfigurationPropertyCollection Properties
public FormsAuthenticationUser Item
public FormsAuthenticationUser Item
protected bool ThrowOnDuplicate
public void Add(FormsAuthenticationUser user)
public void Clear()
protected ConfigurationElement CreateNewElement()
public FormsAuthenticationUser Get(int index)
public FormsAuthenticationUser Get(string name)
protected object GetElementKey(ConfigurationElement element)
public string GetKey(int index)
public void Remove(string name)
public void RemoveAt(int index)
public void Set(FormsAuthenticationUser user)
public String[] get_AllKeys()
public ConfigurationElementCollectionType get_CollectionType()
protected string get_ElementName()
protected internal ConfigurationPropertyCollection get_Properties()
public FormsAuthenticationUser get_Item(int index)
public void set_Item(int index, FormsAuthenticationUser value)
public FormsAuthenticationUser get_Item(string name)
protected bool get_ThrowOnDuplicate()
}
public System.Web.Configuration.FormsAuthPasswordFormat : Enum {
public int value__
public FormsAuthPasswordFormat Clear
public FormsAuthPasswordFormat SHA1
public FormsAuthPasswordFormat MD5
public FormsAuthPasswordFormat SHA256
public FormsAuthPasswordFormat SHA384
public FormsAuthPasswordFormat SHA512
}
public System.Web.Configuration.FormsProtectionEnum : Enum {
public int value__
public FormsProtectionEnum All
public FormsProtectionEnum None
public FormsProtectionEnum Encryption
public FormsProtectionEnum Validation
}
public System.Web.Configuration.FullTrustAssembliesSection : ConfigurationSection {
public FullTrustAssemblyCollection FullTrustAssemblies
public FullTrustAssemblyCollection get_FullTrustAssemblies()
}
public System.Web.Configuration.FullTrustAssembly : ConfigurationElement {
public string AssemblyName
public string PublicKey
public string Version
public void .ctor(string assemblyName, string version, string publicKey)
public string get_AssemblyName()
public void set_AssemblyName(string value)
public string get_PublicKey()
public void set_PublicKey(string value)
public string get_Version()
public void set_Version(string value)
}
public System.Web.Configuration.FullTrustAssemblyCollection : ConfigurationElementCollection {
public FullTrustAssembly Item
public FullTrustAssembly get_Item(int index)
public void set_Item(int index, FullTrustAssembly value)
public void Add(FullTrustAssembly fullTrustAssembly)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string key)
public void RemoveAt(int index)
}
public System.Web.Configuration.GlobalizationSection : ConfigurationSection {
private ConfigurationProperty cultureProp
private ConfigurationProperty enableBestFitResponseEncodingProp
private ConfigurationProperty enableClientBasedCultureProp
private ConfigurationProperty fileEncodingProp
private ConfigurationProperty requestEncodingProp
private ConfigurationProperty resourceProviderFactoryTypeProp
private ConfigurationProperty responseEncodingProp
private ConfigurationProperty responseHeaderEncodingProp
private ConfigurationProperty uiCultureProp
private ConfigurationPropertyCollection properties
private string cached_fileencoding
private string cached_requestencoding
private string cached_responseencoding
private string cached_responseheaderencoding
private Hashtable encodingHash
private string cached_culture
private CultureInfo cached_cultureinfo
private string cached_uiculture
private CultureInfo cached_uicultureinfo
private bool encoding_warning
private bool culture_warning
private bool autoCulture
private bool autoUICulture
public string Culture
public bool EnableBestFitResponseEncoding
public bool EnableClientBasedCulture
public Encoding FileEncoding
public Encoding RequestEncoding
public string ResourceProviderFactoryType
public Encoding ResponseEncoding
public Encoding ResponseHeaderEncoding
public string UICulture
protected internal ConfigurationPropertyCollection Properties
internal bool IsAutoCulture
internal bool IsAutoUICulture
private void VerifyData()
protected void PostDeserialize()
protected void PreSerialize(XmlWriter writer)
public string get_Culture()
public void set_Culture(string value)
public bool get_EnableBestFitResponseEncoding()
public void set_EnableBestFitResponseEncoding(bool value)
public bool get_EnableClientBasedCulture()
public void set_EnableClientBasedCulture(bool value)
public Encoding get_FileEncoding()
public void set_FileEncoding(Encoding value)
public Encoding get_RequestEncoding()
public void set_RequestEncoding(Encoding value)
public string get_ResourceProviderFactoryType()
public void set_ResourceProviderFactoryType(string value)
public Encoding get_ResponseEncoding()
public void set_ResponseEncoding(Encoding value)
public Encoding get_ResponseHeaderEncoding()
public void set_ResponseHeaderEncoding(Encoding value)
public string get_UICulture()
public void set_UICulture(string value)
protected internal ConfigurationPropertyCollection get_Properties()
internal bool get_IsAutoCulture()
internal bool get_IsAutoUICulture()
private CultureInfo GetSanitizedCulture(string culture, Boolean& auto)
internal CultureInfo GetUICulture()
internal CultureInfo GetCulture()
private Encoding GetEncoding(ConfigurationProperty prop, String& cached_encoding_name)
private void EncodingFailed(string att, string enc)
private void CultureFailed(string att, string cul)
}
internal System.Web.Configuration.HandlersUtil : object {
public string ExtractAttributeValue(string attKey, XmlNode node)
public string ExtractAttributeValue(string attKey, XmlNode node, bool optional)
public string ExtractAttributeValue(string attKey, XmlNode node, bool optional, bool allowEmpty)
public void ThrowException(string msg, XmlNode node)
}
public System.Web.Configuration.HealthMonitoringSection : ConfigurationSection {
private ConfigurationProperty bufferModesProp
private ConfigurationProperty enabledProp
private ConfigurationProperty eventMappingsProp
private ConfigurationProperty heartbeatIntervalProp
private ConfigurationProperty profilesProp
private ConfigurationProperty providersProp
private ConfigurationProperty rulesProp
private ConfigurationPropertyCollection properties
public BufferModesCollection BufferModes
public bool Enabled
public EventMappingSettingsCollection EventMappings
public TimeSpan HeartbeatInterval
public ProfileSettingsCollection Profiles
public ProviderSettingsCollection Providers
public RuleSettingsCollection Rules
protected internal ConfigurationPropertyCollection Properties
public BufferModesCollection get_BufferModes()
public bool get_Enabled()
public void set_Enabled(bool value)
public EventMappingSettingsCollection get_EventMappings()
public TimeSpan get_HeartbeatInterval()
public void set_HeartbeatInterval(TimeSpan value)
public ProfileSettingsCollection get_Profiles()
public ProviderSettingsCollection get_Providers()
public RuleSettingsCollection get_Rules()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.HostingEnvironmentSection : ConfigurationSection {
private ConfigurationProperty idleTimeoutProp
private ConfigurationProperty shadowCopyBinAssembliesProp
private ConfigurationProperty shutdownTimeoutProp
private ConfigurationPropertyCollection properties
public TimeSpan IdleTimeout
public bool ShadowCopyBinAssemblies
public TimeSpan ShutdownTimeout
protected internal ConfigurationPropertyCollection Properties
public TimeSpan UrlMetadataSlidingExpiration
public TimeSpan get_IdleTimeout()
public void set_IdleTimeout(TimeSpan value)
public bool get_ShadowCopyBinAssemblies()
public void set_ShadowCopyBinAssemblies(bool value)
public TimeSpan get_ShutdownTimeout()
public void set_ShutdownTimeout(TimeSpan value)
protected internal ConfigurationPropertyCollection get_Properties()
public TimeSpan get_UrlMetadataSlidingExpiration()
public void set_UrlMetadataSlidingExpiration(TimeSpan value)
}
public System.Web.Configuration.HttpCapabilitiesBase : object {
internal IDictionary capabilities
internal bool GetConfigCapabilities_called
private IDictionary adapters
private bool canCombineFormsInDeck
private bool canInitiateVoiceCall
private bool canRenderAfterInputOrSelectElement
private bool canRenderEmptySelects
private bool canRenderInputAndSelectElementsTogether
private bool canRenderMixedSelects
private bool canRenderOneventAndPrevElementsTogether
private bool canRenderPostBackCards
private bool canRenderSetvarZeroWithMultiSelectionList
private bool canSendMail
private int defaultSubmitButtonLimit
private int gatewayMajorVersion
private double gatewayMinorVersion
private string gatewayVersion
private bool hasBackButton
private bool hidesRightAlignedMultiselectScrollbars
private string htmlTextWriter
private string inputType
private bool isColor
private bool isMobileDevice
private Version jscriptVersion
private int maximumHrefLength
private int maximumRenderedPageSize
private int maximumSoftkeyLabelLength
private string minorVersionString
private string mobileDeviceManufacturer
private string mobileDeviceModel
private int numberOfSoftkeys
private string preferredImageMime
private string preferredRenderingMime
private string preferredRenderingType
private string preferredRequestEncoding
private string preferredResponseEncoding
private bool rendersBreakBeforeWmlSelectAndInput
private bool rendersBreaksAfterHtmlLists
private bool rendersBreaksAfterWmlAnchor
private bool rendersBreaksAfterWmlInput
private bool rendersWmlDoAcceptsInline
private bool rendersWmlSelectsAsMenuCards
private string requiredMetaTagNameValue
private bool requiresAttributeColonSubstitution
private bool requiresContentTypeMetaTag
private bool requiresControlStateInSession
private bool requiresDBCSCharacter
private bool requiresHtmlAdaptiveErrorReporting
private bool requiresLeadingPageBreak
private bool requiresNoBreakInFormatting
private bool requiresOutputOptimization
private bool requiresPhoneNumbersAsPlainText
private bool requiresSpecialViewStateEncoding
private bool requiresUniqueFilePathSuffix
private bool requiresUniqueHtmlCheckboxNames
private bool requiresUniqueHtmlInputNames
private bool requiresUrlEncodedPostfieldValues
private int screenBitDepth
private int screenCharactersHeight
private int screenCharactersWidth
private int screenPixelsHeight
private int screenPixelsWidth
private bool supportsAccesskeyAttribute
private bool supportsBodyColor
private bool supportsBold
private bool supportsCacheControlMetaTag
private bool supportsCallback
private bool supportsCss
private bool supportsDivAlign
private bool supportsDivNoWrap
private bool supportsEmptyStringInCookieValue
private bool supportsFontColor
private bool supportsFontName
private bool supportsFontSize
private bool supportsImageSubmit
private bool supportsIModeSymbols
private bool supportsInputIStyle
private bool supportsInputMode
private bool supportsItalic
private bool supportsJPhoneMultiMediaAttributes
private bool supportsJPhoneSymbols
private bool supportsQueryStringInFormAction
private bool supportsRedirectWithCookie
private bool supportsSelectMultiple
private bool supportsUncheck
private bool supportsXmlHttp
private bool useOptimizedCacheKey
private HttpCapabilitiesProvider _provider
private int HaveActiveXControls
private int HaveAdapters
private int HaveAOL
private int HaveBackGroundSounds
private int HaveBeta
private int HaveBrowser
private int HaveBrowsers
private int HaveCanCombineFormsInDeck
private int HaveCanInitiateVoiceCall
private int HaveCanRenderAfterInputOrSelectElement
private int HaveCanRenderEmptySelects
private int HaveCanRenderInputAndSelectElementsTogether
private int HaveCanRenderMixedSelects
private int HaveCanRenderOneventAndPrevElementsTogether
private int HaveCanRenderPostBackCards
private int HaveCanRenderSetvarZeroWithMultiSelectionList
private int HaveCanSendMail
private int HaveCDF
private int HaveCookies
private int HaveCrawler
private int HaveDefaultSubmitButtonLimit
private int HaveEcmaScriptVersion
private int HaveFrames
private int HaveGatewayMajorVersion
private int HaveGatewayMinorVersion
private int HaveGatewayVersion
private int HaveHasBackButton
private int HaveHidesRightAlignedMultiselectScrollbars
private int HaveHtmlTextWriter
private int HaveId
private int HaveInputType
private int HaveIsColor
private int HaveIsMobileDevice
private int HaveJavaApplets
private int HaveJavaScript
private int HaveJScriptVersion
private int HaveMajorVersion
private int HaveMaximumHrefLength
private int HaveMaximumRenderedPageSize
private int HaveMaximumSoftkeyLabelLength
private int HaveMinorVersion
private int HaveMinorVersionString
private int HaveMobileDeviceManufacturer
private int HaveMobileDeviceModel
private int HaveMSDomVersion
private int HaveNumberOfSoftkeys
private int HavePlatform
private int HavePreferredImageMime
private int HavePreferredRenderingMime
private int HavePreferredRenderingType
private int HavePreferredRequestEncoding
private int HavePreferredResponseEncoding
private int HaveRendersBreakBeforeWmlSelectAndInput
private int HaveRendersBreaksAfterHtmlLists
private int HaveRendersBreaksAfterWmlAnchor
private int HaveRendersBreaksAfterWmlInput
private int HaveRendersWmlDoAcceptsInline
private int HaveRendersWmlSelectsAsMenuCards
private int HaveRequiredMetaTagNameValue
private int HaveRequiresAttributeColonSubstitution
private int HaveRequiresContentTypeMetaTag
private int HaveRequiresControlStateInSession
private int HaveRequiresDBCSCharacter
private int HaveRequiresHtmlAdaptiveErrorReporting
private int HaveRequiresLeadingPageBreak
private int HaveRequiresNoBreakInFormatting
private int HaveRequiresOutputOptimization
private int HaveRequiresPhoneNumbersAsPlainText
private int HaveRequiresSpecialViewStateEncoding
private int HaveRequiresUniqueFilePathSuffix
private int HaveRequiresUniqueHtmlCheckboxNames
private int HaveRequiresUniqueHtmlInputNames
private int HaveRequiresUrlEncodedPostfieldValues
private int HaveScreenBitDepth
private int HaveScreenCharactersHeight
private int HaveScreenCharactersWidth
private int HaveScreenPixelsHeight
private int HaveScreenPixelsWidth
private int HaveSupportsAccesskeyAttribute
private int HaveSupportsBodyColor
private int HaveSupportsBold
private int HaveSupportsCacheControlMetaTag
private int HaveSupportsCallback
private int HaveSupportsCss
private int HaveSupportsDivAlign
private int HaveSupportsDivNoWrap
private int HaveSupportsEmptyStringInCookieValue
private int HaveSupportsFontColor
private int HaveSupportsFontName
private int HaveSupportsFontSize
private int HaveSupportsImageSubmit
private int HaveSupportsIModeSymbols
private int HaveSupportsInputIStyle
private int HaveSupportsInputMode
private int HaveSupportsItalic
private int HaveSupportsJPhoneMultiMediaAttributes
private int HaveSupportsJPhoneSymbols
private int HaveSupportsQueryStringInFormAction
private int HaveSupportsRedirectWithCookie
private int HaveSupportsSelectMultiple
private int HaveSupportsUncheck
private int HaveSupportsXmlHttp
private int HaveTables
private int HaveTagWriter
private int HaveType
private int HaveUseOptimizedCacheKey
private int HaveVBScript
private int HaveVersion
private int HaveW3CDomVersion
private int HaveWin16
private int HaveWin32
private int LastHaveFlag
private BitArray flags
private bool activeXControls
private bool aol
private bool backgroundSounds
private bool beta
private string browser
private bool cdf
private Version clrVersion
private bool cookies
private bool crawler
private Version ecmaScriptVersion
private bool frames
private bool javaApplets
private bool javaScript
private int majorVersion
private double minorVersion
private Version msDomVersion
private string platform
private bool tables
private Type tagWriter
private bool vbscript
private string version
private Version w3CDomVersion
private bool win16
private bool win32
private Version[] clrVersions
internal string useragent
private ArrayList browsers
public string Item
public IDictionary Adapters
public bool CanCombineFormsInDeck
public bool CanInitiateVoiceCall
public bool CanRenderAfterInputOrSelectElement
public bool CanRenderEmptySelects
public bool CanRenderInputAndSelectElementsTogether
public bool CanRenderMixedSelects
public bool CanRenderOneventAndPrevElementsTogether
public bool CanRenderPostBackCards
public bool CanRenderSetvarZeroWithMultiSelectionList
public bool CanSendMail
public IDictionary Capabilities
public int DefaultSubmitButtonLimit
public int GatewayMajorVersion
public double GatewayMinorVersion
public string GatewayVersion
public bool HasBackButton
public bool HidesRightAlignedMultiselectScrollbars
public string HtmlTextWriter
public string Id
public string InputType
public bool IsColor
public bool IsMobileDevice
public Version JScriptVersion
public int MaximumHrefLength
public int MaximumRenderedPageSize
public int MaximumSoftkeyLabelLength
public string MinorVersionString
public string MobileDeviceManufacturer
public string MobileDeviceModel
public int NumberOfSoftkeys
public string PreferredImageMime
public string PreferredRenderingMime
public string PreferredRenderingType
public string PreferredRequestEncoding
public string PreferredResponseEncoding
public bool RendersBreakBeforeWmlSelectAndInput
public bool RendersBreaksAfterHtmlLists
public bool RendersBreaksAfterWmlAnchor
public bool RendersBreaksAfterWmlInput
public bool RendersWmlDoAcceptsInline
public bool RendersWmlSelectsAsMenuCards
public string RequiredMetaTagNameValue
public bool RequiresAttributeColonSubstitution
public bool RequiresContentTypeMetaTag
public bool RequiresControlStateInSession
public bool RequiresDBCSCharacter
public bool RequiresHtmlAdaptiveErrorReporting
public bool RequiresLeadingPageBreak
public bool RequiresNoBreakInFormatting
public bool RequiresOutputOptimization
public bool RequiresPhoneNumbersAsPlainText
public bool RequiresSpecialViewStateEncoding
public bool RequiresUniqueFilePathSuffix
public bool RequiresUniqueHtmlCheckboxNames
public bool RequiresUniqueHtmlInputNames
public bool RequiresUrlEncodedPostfieldValues
public int ScreenBitDepth
public int ScreenCharactersHeight
public int ScreenCharactersWidth
public int ScreenPixelsHeight
public int ScreenPixelsWidth
public bool SupportsAccesskeyAttribute
public bool SupportsBodyColor
public bool SupportsBold
public bool SupportsCacheControlMetaTag
public bool SupportsCallback
public bool SupportsCss
public bool SupportsDivAlign
public bool SupportsDivNoWrap
public bool SupportsEmptyStringInCookieValue
public bool SupportsFontColor
public bool SupportsFontName
public bool SupportsFontSize
public bool SupportsImageSubmit
public bool SupportsIModeSymbols
public bool SupportsInputIStyle
public bool SupportsInputMode
public bool SupportsItalic
public bool SupportsJPhoneMultiMediaAttributes
public bool SupportsJPhoneSymbols
public bool SupportsQueryStringInFormAction
public bool SupportsRedirectWithCookie
public bool SupportsSelectMultiple
public bool SupportsUncheck
public bool SupportsXmlHttp
public bool UseOptimizedCacheKey
public HttpCapabilitiesProvider BrowserCapabilitiesProvider
public bool ActiveXControls
public bool AOL
public bool BackgroundSounds
public bool Beta
public string Browser
public ArrayList Browsers
public bool CDF
public Version ClrVersion
public bool Cookies
public bool Crawler
public Version EcmaScriptVersion
public bool Frames
public bool JavaApplets
public bool JavaScript
public int MajorVersion
public double MinorVersion
public Version MSDomVersion
public string Platform
public bool Tables
public Type TagWriter
public string Type
public bool VBScript
public string Version
public Version W3CDomVersion
public bool Win16
public bool Win32
public string get_Item(string key)
internal string GetUserAgentForDetection(HttpRequest request)
private HttpBrowserCapabilities GetHttpBrowserCapabilitiesFromBrowscapini(string ua)
public HttpCapabilitiesBase GetConfigCapabilities(string configKey, HttpRequest request)
protected void Init()
private int System.Web.UI.IFilterResolutionService.CompareFilters(string filter1, string filter2)
private bool System.Web.UI.IFilterResolutionService.EvaluateFilter(string filterName)
public void AddBrowser(string browserName)
public HtmlTextWriter CreateHtmlTextWriter(TextWriter w)
public void DisableOptimizedCacheKey()
public IDictionary get_Adapters()
internal IDictionary GetAdapters()
public bool get_CanCombineFormsInDeck()
public bool get_CanInitiateVoiceCall()
public bool get_CanRenderAfterInputOrSelectElement()
public bool get_CanRenderEmptySelects()
public bool get_CanRenderInputAndSelectElementsTogether()
public bool get_CanRenderMixedSelects()
public bool get_CanRenderOneventAndPrevElementsTogether()
public bool get_CanRenderPostBackCards()
public bool get_CanRenderSetvarZeroWithMultiSelectionList()
public bool get_CanSendMail()
public IDictionary get_Capabilities()
public void set_Capabilities(IDictionary value)
public int get_DefaultSubmitButtonLimit()
public int get_GatewayMajorVersion()
public double get_GatewayMinorVersion()
public string get_GatewayVersion()
public bool get_HasBackButton()
public bool get_HidesRightAlignedMultiselectScrollbars()
public string get_HtmlTextWriter()
public void set_HtmlTextWriter(string value)
public string get_Id()
public string get_InputType()
public bool get_IsColor()
public bool get_IsMobileDevice()
public Version get_JScriptVersion()
public int get_MaximumHrefLength()
public int get_MaximumRenderedPageSize()
public int get_MaximumSoftkeyLabelLength()
public string get_MinorVersionString()
public string get_MobileDeviceManufacturer()
public string get_MobileDeviceModel()
public int get_NumberOfSoftkeys()
public string get_PreferredImageMime()
public string get_PreferredRenderingMime()
public string get_PreferredRenderingType()
public string get_PreferredRequestEncoding()
public string get_PreferredResponseEncoding()
public bool get_RendersBreakBeforeWmlSelectAndInput()
public bool get_RendersBreaksAfterHtmlLists()
public bool get_RendersBreaksAfterWmlAnchor()
public bool get_RendersBreaksAfterWmlInput()
public bool get_RendersWmlDoAcceptsInline()
public bool get_RendersWmlSelectsAsMenuCards()
public string get_RequiredMetaTagNameValue()
public bool get_RequiresAttributeColonSubstitution()
public bool get_RequiresContentTypeMetaTag()
public bool get_RequiresControlStateInSession()
public bool get_RequiresDBCSCharacter()
public bool get_RequiresHtmlAdaptiveErrorReporting()
public bool get_RequiresLeadingPageBreak()
public bool get_RequiresNoBreakInFormatting()
public bool get_RequiresOutputOptimization()
public bool get_RequiresPhoneNumbersAsPlainText()
public bool get_RequiresSpecialViewStateEncoding()
public bool get_RequiresUniqueFilePathSuffix()
public bool get_RequiresUniqueHtmlCheckboxNames()
public bool get_RequiresUniqueHtmlInputNames()
public bool get_RequiresUrlEncodedPostfieldValues()
public int get_ScreenBitDepth()
public int get_ScreenCharactersHeight()
public int get_ScreenCharactersWidth()
public int get_ScreenPixelsHeight()
public int get_ScreenPixelsWidth()
public bool get_SupportsAccesskeyAttribute()
public bool get_SupportsBodyColor()
public bool get_SupportsBold()
public bool get_SupportsCacheControlMetaTag()
public bool get_SupportsCallback()
public bool get_SupportsCss()
public bool get_SupportsDivAlign()
public bool get_SupportsDivNoWrap()
public bool get_SupportsEmptyStringInCookieValue()
public bool get_SupportsFontColor()
public bool get_SupportsFontName()
public bool get_SupportsFontSize()
public bool get_SupportsImageSubmit()
public bool get_SupportsIModeSymbols()
public bool get_SupportsInputIStyle()
public bool get_SupportsInputMode()
public bool get_SupportsItalic()
public bool get_SupportsJPhoneMultiMediaAttributes()
public bool get_SupportsJPhoneSymbols()
public bool get_SupportsQueryStringInFormAction()
public bool get_SupportsRedirectWithCookie()
public bool get_SupportsSelectMultiple()
public bool get_SupportsUncheck()
public bool get_SupportsXmlHttp()
public bool get_UseOptimizedCacheKey()
public HttpCapabilitiesProvider get_BrowserCapabilitiesProvider()
public void set_BrowserCapabilitiesProvider(HttpCapabilitiesProvider value)
public bool get_ActiveXControls()
public bool get_AOL()
public bool get_BackgroundSounds()
public bool get_Beta()
public string get_Browser()
public ArrayList get_Browsers()
public bool IsBrowser(string browserName)
public bool get_CDF()
public Version get_ClrVersion()
public bool get_Cookies()
public bool get_Crawler()
public Version get_EcmaScriptVersion()
public bool get_Frames()
public bool get_JavaApplets()
public bool get_JavaScript()
public int get_MajorVersion()
public double get_MinorVersion()
public Version get_MSDomVersion()
public string get_Platform()
public bool get_Tables()
public Type get_TagWriter()
internal Type GetTagWriter()
public string get_Type()
public bool get_VBScript()
public string get_Version()
public Version get_W3CDomVersion()
public bool get_Win16()
public bool get_Win32()
public Version[] GetClrVersions()
private void InternalGetClrVersions()
private bool ReadBoolean(string key)
private int ReadInt32(string key)
private double ReadDouble(string key)
private string ReadString(string key)
private Version ReadVersion(string key)
private ArrayList ReadArrayList(string key)
private Exception CreateCapabilityNotFoundException(string key)
private bool Get(int idx)
private void Set(int idx)
}
public System.Web.Configuration.HttpCapabilitiesDefaultProvider : HttpCapabilitiesProvider {
private TimeSpan <CacheTime>k__BackingField
private Type <ResultType>k__BackingField
private int <UserAgentCacheKeyLength>k__BackingField
public TimeSpan CacheTime
public Type ResultType
public int UserAgentCacheKeyLength
public TimeSpan get_CacheTime()
public void set_CacheTime(TimeSpan value)
public Type get_ResultType()
public void set_ResultType(Type value)
public int get_UserAgentCacheKeyLength()
public void set_UserAgentCacheKeyLength(int value)
public void .ctor(HttpCapabilitiesDefaultProvider parent)
public void AddDependency(string variable)
public void AddRuleList(ArrayList ruleList)
public HttpBrowserCapabilities GetBrowserCapabilities(HttpRequest request)
}
public System.Web.Configuration.HttpCapabilitiesProvider : object {
public HttpBrowserCapabilities GetBrowserCapabilities(HttpRequest request)
}
public System.Web.Configuration.HttpCapabilitiesSectionHandler : object {
public object Create(object parent, object configurationContext, XmlNode section)
}
public System.Web.Configuration.HttpConfigurationContext : object {
private string virtualPath
public string VirtualPath
internal void .ctor(string virtualPath)
public string get_VirtualPath()
}
internal System.Web.Configuration.HttpConfigurationSystem : object {
private bool System.Configuration.Internal.IInternalConfigSystem.SupportsUserConfig
private object System.Configuration.Internal.IInternalConfigSystem.GetSection(string configKey)
private void System.Configuration.Internal.IInternalConfigSystem.RefreshConfig(string sectionName)
private bool System.Configuration.Internal.IInternalConfigSystem.get_SupportsUserConfig()
}
public System.Web.Configuration.HttpCookiesSection : ConfigurationSection {
private ConfigurationProperty domainProp
private ConfigurationProperty httpOnlyCookiesProp
private ConfigurationProperty requireSSLProp
private ConfigurationPropertyCollection properties
public string Domain
public bool HttpOnlyCookies
public bool RequireSSL
protected internal ConfigurationPropertyCollection Properties
public string get_Domain()
public void set_Domain(string value)
public bool get_HttpOnlyCookies()
public void set_HttpOnlyCookies(bool value)
public bool get_RequireSSL()
public void set_RequireSSL(bool value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.HttpHandlerAction : ConfigurationElement {
private ConfigurationPropertyCollection _properties
private ConfigurationProperty pathProp
private ConfigurationProperty typeProp
private ConfigurationProperty validateProp
private ConfigurationProperty verbProp
private object instance
private Type type
private string cached_verb
private String[] cached_verbs
public string Path
public string Type
public bool Validate
public string Verb
protected internal ConfigurationPropertyCollection Properties
internal String[] Verbs
public void .ctor(string path, string type, string verb)
public void .ctor(string path, string type, string verb, bool validate)
public string get_Path()
public void set_Path(string value)
public string get_Type()
public void set_Type(string value)
public bool get_Validate()
public void set_Validate(bool value)
public string get_Verb()
public void set_Verb(string value)
protected internal ConfigurationPropertyCollection get_Properties()
private String[] SplitVerbs()
internal String[] get_Verbs()
internal Type LoadType(string type_name)
internal bool PathMatches(string pathToMatch)
private string AdjustPath(string pattern, string path)
internal object GetHandlerInstance()
}
public System.Web.Configuration.HttpHandlerActionCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public ConfigurationElementCollectionType CollectionType
protected internal ConfigurationPropertyCollection Properties
public HttpHandlerAction Item
protected bool ThrowOnDuplicate
public void Add(HttpHandlerAction httpHandlerAction)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public int IndexOf(HttpHandlerAction action)
public void Remove(string verb, string path)
public void Remove(HttpHandlerAction action)
public void RemoveAt(int index)
public ConfigurationElementCollectionType get_CollectionType()
protected internal ConfigurationPropertyCollection get_Properties()
public HttpHandlerAction get_Item(int index)
public void set_Item(int index, HttpHandlerAction value)
protected bool get_ThrowOnDuplicate()
}
public System.Web.Configuration.HttpHandlersSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty handlersProp
public HttpHandlerActionCollection Handlers
protected internal ConfigurationPropertyCollection Properties
public HttpHandlerActionCollection get_Handlers()
protected internal ConfigurationPropertyCollection get_Properties()
internal object LocateHandler(string verb, string filepath, Boolean& allowCache)
}
public System.Web.Configuration.HttpModuleAction : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty nameProp
private ConfigurationProperty typeProp
private ConfigurationElementProperty elementProperty
protected internal ConfigurationElementProperty ElementProperty
public string Name
public string Type
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name, string type)
private void ValidateElement(object o)
protected internal ConfigurationElementProperty get_ElementProperty()
public string get_Name()
public void set_Name(string value)
public string get_Type()
public void set_Type(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.HttpModuleActionCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
protected internal ConfigurationPropertyCollection Properties
public HttpModuleAction Item
public void Add(HttpModuleAction httpModule)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public int IndexOf(HttpModuleAction action)
public void Remove(string name)
public void Remove(HttpModuleAction action)
public void RemoveAt(int index)
protected bool IsElementRemovable(ConfigurationElement element)
protected internal ConfigurationPropertyCollection get_Properties()
public HttpModuleAction get_Item(int index)
public void set_Item(int index, HttpModuleAction value)
}
public System.Web.Configuration.HttpModulesSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty modulesProp
public HttpModuleActionCollection Modules
protected internal ConfigurationPropertyCollection Properties
public HttpModuleActionCollection get_Modules()
protected internal ConfigurationPropertyCollection get_Properties()
internal HttpModuleCollection LoadModules(HttpApplication app)
}
public System.Web.Configuration.HttpRuntimeSection : ConfigurationSection {
private ConfigurationProperty apartmentThreadingProp
private ConfigurationProperty appRequestQueueLimitProp
private ConfigurationProperty delayNotificationTimeoutProp
private ConfigurationProperty enableProp
private ConfigurationProperty enableHeaderCheckingProp
private ConfigurationProperty enableKernelOutputCacheProp
private ConfigurationProperty enableVersionHeaderProp
private ConfigurationProperty executionTimeoutProp
private ConfigurationProperty maxRequestLengthProp
private ConfigurationProperty maxWaitChangeNotificationProp
private ConfigurationProperty minFreeThreadsProp
private ConfigurationProperty minLocalRequestFreeThreadsProp
private ConfigurationProperty requestLengthDiskThresholdProp
private ConfigurationProperty requireRootedSaveAsPathProp
private ConfigurationProperty sendCacheControlHeaderProp
private ConfigurationProperty shutdownTimeoutProp
private ConfigurationProperty useFullyQualifiedRedirectUrlProp
private ConfigurationProperty waitChangeNotificationProp
private ConfigurationProperty requestPathInvalidCharactersProp
private ConfigurationProperty requestValidationTypeProp
private ConfigurationProperty requestValidationModeProp
private ConfigurationProperty maxQueryStringLengthProp
private ConfigurationProperty maxUrlLengthProp
private ConfigurationProperty encoderTypeProp
private ConfigurationProperty relaxedUrlToFileSystemMappingProp
private ConfigurationProperty targetFrameworkProp
private ConfigurationProperty allowDynamicModuleRegistrationProp
private ConfigurationPropertyCollection properties
public bool ApartmentThreading
public int AppRequestQueueLimit
public TimeSpan DelayNotificationTimeout
public bool Enable
public bool EnableHeaderChecking
public bool EnableKernelOutputCache
public bool EnableVersionHeader
public TimeSpan ExecutionTimeout
public int MaxRequestLength
public int MaxWaitChangeNotification
public int MinFreeThreads
public int MinLocalRequestFreeThreads
public int RequestLengthDiskThreshold
public bool RequireRootedSaveAsPath
public bool SendCacheControlHeader
public TimeSpan ShutdownTimeout
public bool UseFullyQualifiedRedirectUrl
public int WaitChangeNotification
public string RequestPathInvalidCharacters
public string RequestValidationType
public Version RequestValidationMode
public int MaxQueryStringLength
public int MaxUrlLength
public string EncoderType
public bool RelaxedUrlToFileSystemMapping
public Version TargetFramework
protected internal ConfigurationPropertyCollection Properties
public bool AllowDynamicModuleRegistration
public AsyncPreloadModeFlags AsyncPreloadMode
public TimeSpan DefaultRegexMatchTimeout
public FcnMode FcnMode
public bool get_ApartmentThreading()
public void set_ApartmentThreading(bool value)
public int get_AppRequestQueueLimit()
public void set_AppRequestQueueLimit(int value)
public TimeSpan get_DelayNotificationTimeout()
public void set_DelayNotificationTimeout(TimeSpan value)
public bool get_Enable()
public void set_Enable(bool value)
public bool get_EnableHeaderChecking()
public void set_EnableHeaderChecking(bool value)
public bool get_EnableKernelOutputCache()
public void set_EnableKernelOutputCache(bool value)
public bool get_EnableVersionHeader()
public void set_EnableVersionHeader(bool value)
public TimeSpan get_ExecutionTimeout()
public void set_ExecutionTimeout(TimeSpan value)
public int get_MaxRequestLength()
public void set_MaxRequestLength(int value)
public int get_MaxWaitChangeNotification()
public void set_MaxWaitChangeNotification(int value)
public int get_MinFreeThreads()
public void set_MinFreeThreads(int value)
public int get_MinLocalRequestFreeThreads()
public void set_MinLocalRequestFreeThreads(int value)
public int get_RequestLengthDiskThreshold()
public void set_RequestLengthDiskThreshold(int value)
public bool get_RequireRootedSaveAsPath()
public void set_RequireRootedSaveAsPath(bool value)
public bool get_SendCacheControlHeader()
public void set_SendCacheControlHeader(bool value)
public TimeSpan get_ShutdownTimeout()
public void set_ShutdownTimeout(TimeSpan value)
public bool get_UseFullyQualifiedRedirectUrl()
public void set_UseFullyQualifiedRedirectUrl(bool value)
public int get_WaitChangeNotification()
public void set_WaitChangeNotification(int value)
public string get_RequestPathInvalidCharacters()
public void set_RequestPathInvalidCharacters(string value)
public string get_RequestValidationType()
public void set_RequestValidationType(string value)
public Version get_RequestValidationMode()
public void set_RequestValidationMode(Version value)
public int get_MaxQueryStringLength()
public void set_MaxQueryStringLength(int value)
public int get_MaxUrlLength()
public void set_MaxUrlLength(int value)
public string get_EncoderType()
public void set_EncoderType(string value)
public bool get_RelaxedUrlToFileSystemMapping()
public void set_RelaxedUrlToFileSystemMapping(bool value)
public Version get_TargetFramework()
public void set_TargetFramework(Version value)
protected internal ConfigurationPropertyCollection get_Properties()
public bool get_AllowDynamicModuleRegistration()
public void set_AllowDynamicModuleRegistration(bool value)
public AsyncPreloadModeFlags get_AsyncPreloadMode()
public void set_AsyncPreloadMode(AsyncPreloadModeFlags value)
public TimeSpan get_DefaultRegexMatchTimeout()
public void set_DefaultRegexMatchTimeout(TimeSpan value)
public FcnMode get_FcnMode()
public void set_FcnMode(FcnMode value)
}
internal System.Web.Configuration.ICapabilitiesProcess {
public CapabilitiesResult Process(string userAgent, IDictionary initialCapabilities)
public CapabilitiesResult Process(HttpRequest request, IDictionary initialCapabilities)
public CapabilitiesResult Process(NameValueCollection header, IDictionary initialCapabilities)
}
public System.Web.Configuration.IConfigMapPath {
public string GetMachineConfigFilename()
public string GetRootWebConfigFilename()
public void GetPathConfigFilename(string siteID, string path, String& directory, String& baseName)
public void GetDefaultSiteNameAndID(String& siteName, String& siteID)
public void ResolveSiteArgument(string siteArgument, String& siteName, String& siteID)
public string MapPath(string siteID, string path)
public string GetAppPathForPath(string siteID, string path)
}
internal System.Web.Configuration.IConfigMapPath2 {
public void GetPathConfigFilename(string siteID, VirtualPath path, String& directory, String& baseName)
public string MapPath(string siteID, VirtualPath path)
public VirtualPath GetAppPathForPath(string siteID, VirtualPath path)
}
public System.Web.Configuration.IConfigMapPathFactory {
public IConfigMapPath Create(string virtualPath, string physicalPath)
}
public System.Web.Configuration.IdentitySection : ConfigurationSection {
private ConfigurationProperty impersonateProp
private ConfigurationProperty passwordProp
private ConfigurationProperty userNameProp
private ConfigurationPropertyCollection properties
public bool Impersonate
public string Password
public string UserName
protected internal ConfigurationPropertyCollection Properties
protected internal object GetRuntimeObject()
protected internal void Reset(ConfigurationElement parentElement)
protected internal void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode)
public bool get_Impersonate()
public void set_Impersonate(bool value)
public string get_Password()
public void set_Password(string value)
public string get_UserName()
public void set_UserName(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.IgnoreDeviceFilterElement : ConfigurationElement {
public string Name
public void .ctor(string name)
public string get_Name()
}
public System.Web.Configuration.IgnoreDeviceFilterElementCollection : ConfigurationElementCollection {
public IgnoreDeviceFilterElement Item
public IgnoreDeviceFilterElement get_Item(int index)
public void set_Item(int index, IgnoreDeviceFilterElement value)
public void Add(IgnoreDeviceFilterElement deviceFilter)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string name)
public void Remove(IgnoreDeviceFilterElement deviceFilter)
public void RemoveAt(int index)
}
public System.Web.Configuration.Internal.IInternalConfigWebHost {
public void GetSiteIDAndVPathFromConfigPath(string configPath, String& siteID, String& vpath)
public string GetConfigPathFromSiteIDAndVPath(string siteID, string vpath)
}
public System.Web.Configuration.IRemoteWebConfigurationHostServer {
public Byte[] GetData(string fileName, bool getReadTimeOnly, Int64& readTime)
public void WriteData(string fileName, string templateFileName, Byte[] data, Int64& readTime)
public string GetFilePaths(int webLevel, string path, string site, string locationSubPath)
public string DoEncryptOrDecrypt(bool doEncrypt, string xmlString, string protectionProviderName, string protectionProviderType, String[] parameterKeys, String[] parameterValues)
public void GetFileDetails(string name, Boolean& exists, Int64& size, Int64& createDate, Int64& lastWriteDate)
}
internal System.Web.Configuration.IServerConfig2 {
public bool IsWithinApp(string virtualPath)
}
public System.Web.Configuration.LowerCaseStringConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext ctx, Type type)
public bool CanConvertTo(ITypeDescriptorContext ctx, Type type)
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
internal System.Web.Configuration.LruCache`2 : object {
private Dictionary`2<TKey, LinkedListNode`1<TValue>> dict
private Dictionary`2<LinkedListNode`1<TValue>, TKey> revdict
private LinkedList`1<TValue> list
private int entry_limit
private bool eviction_warning_shown
private int evictions
private string <EvictionWarning>k__BackingField
internal string EvictionWarning
internal void set_EvictionWarning(string value)
private string get_EvictionWarning()
public void .ctor(int entryLimit)
private void Evict()
public void Clear()
private void DisposeValue(TValue value)
public bool TryGetValue(TKey key, TValue& value)
public void Add(TKey key, TValue value)
public string ToString()
}
public System.Web.Configuration.MachineKeyCompatibilityMode : Enum {
public int value__
public MachineKeyCompatibilityMode Framework20SP1
public MachineKeyCompatibilityMode Framework20SP2
public MachineKeyCompatibilityMode Framework45
}
internal System.Web.Configuration.MachineKeyRegistryStorage : object {
private string keyEncryption
private string keyValidation
public Byte[] Retrieve(KeyType kt)
private RegistryKey OpenRegistryKey(string path, bool write)
public void Store(Byte[] buf, KeyType kt)
}
public System.Web.Configuration.MachineKeySection : ConfigurationSection {
private ConfigurationProperty decryptionProp
private ConfigurationProperty decryptionKeyProp
private ConfigurationProperty validationProp
private ConfigurationProperty validationKeyProp
private ConfigurationPropertyCollection properties
private MachineKeyValidationConverter converter
private MachineKeyValidation validation
private MachineKeyCompatibilityMode <CompatibilityMode>k__BackingField
private Byte[] decryption_key
private Byte[] validation_key
private SymmetricAlgorithm decryption_template
private KeyedHashAlgorithm validation_template
public MachineKeyCompatibilityMode CompatibilityMode
public string Decryption
public string DecryptionKey
public MachineKeyValidation Validation
public string ValidationAlgorithm
public string ValidationKey
protected internal ConfigurationPropertyCollection Properties
internal MachineKeySection Config
private SymmetricAlgorithm DecryptionTemplate
private KeyedHashAlgorithm ValidationTemplate
public string ApplicationName
public string DataProtectorType
public MachineKeyCompatibilityMode get_CompatibilityMode()
public void set_CompatibilityMode(MachineKeyCompatibilityMode value)
protected internal void Reset(ConfigurationElement parentElement)
public string get_Decryption()
public void set_Decryption(string value)
public string get_DecryptionKey()
public void set_DecryptionKey(string value)
public MachineKeyValidation get_Validation()
public void set_Validation(MachineKeyValidation value)
public string get_ValidationAlgorithm()
public void set_ValidationAlgorithm(string value)
public string get_ValidationKey()
public void set_ValidationKey(string value)
protected internal ConfigurationPropertyCollection get_Properties()
internal MachineKeySection get_Config()
internal SymmetricAlgorithm GetDecryptionAlgorithm()
private SymmetricAlgorithm get_DecryptionTemplate()
internal Byte[] GetDecryptionKey()
private void SetDecryptionKey(string key)
internal KeyedHashAlgorithm GetValidationAlgorithm()
private KeyedHashAlgorithm get_ValidationTemplate()
internal Byte[] GetValidationKey()
private void SetValidationKey(string key)
private Byte[] AutoGenerate(KeyType type)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public string get_DataProtectorType()
public void set_DataProtectorType(string value)
}
public System.Web.Configuration.MachineKeyValidation : Enum {
public int value__
public MachineKeyValidation MD5
public MachineKeyValidation SHA1
public MachineKeyValidation TripleDES
public MachineKeyValidation AES
public MachineKeyValidation HMACSHA256
public MachineKeyValidation HMACSHA384
public MachineKeyValidation HMACSHA512
public MachineKeyValidation Custom
}
public System.Web.Configuration.MachineKeyValidationConverter : ConfigurationConverterBase {
private string InvalidValue
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
public System.Web.Configuration.MembershipSection : ConfigurationSection {
private ConfigurationProperty defaultProviderProp
private ConfigurationProperty hashAlgorithmTypeProp
private ConfigurationProperty providersProp
private ConfigurationProperty userIsOnlineTimeWindowProp
private ConfigurationPropertyCollection properties
public string DefaultProvider
public string HashAlgorithmType
public ProviderSettingsCollection Providers
public TimeSpan UserIsOnlineTimeWindow
protected internal ConfigurationPropertyCollection Properties
public string get_DefaultProvider()
public void set_DefaultProvider(string value)
public string get_HashAlgorithmType()
public void set_HashAlgorithmType(string value)
public ProviderSettingsCollection get_Providers()
public TimeSpan get_UserIsOnlineTimeWindow()
public void set_UserIsOnlineTimeWindow(TimeSpan value)
protected internal ConfigurationPropertyCollection get_Properties()
}
internal System.Web.Configuration.MonoSettingsSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty compilersCompatibilityProp
private ConfigurationProperty useCompilersCompatibilityProp
private ConfigurationProperty verificationCompatibilityProp
public CompilerCollection CompilersCompatibility
public bool UseCompilersCompatibility
public int VerificationCompatibility
protected internal ConfigurationPropertyCollection Properties
public CompilerCollection get_CompilersCompatibility()
public bool get_UseCompilersCompatibility()
public void set_UseCompilersCompatibility(bool value)
public int get_VerificationCompatibility()
public void set_VerificationCompatibility(int value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.NamespaceCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty autoImportVBNamespaceProp
public bool AutoImportVBNamespace
protected internal ConfigurationPropertyCollection Properties
public NamespaceInfo Item
public void Add(NamespaceInfo namespaceInformation)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string s)
public void RemoveAt(int index)
public bool get_AutoImportVBNamespace()
public void set_AutoImportVBNamespace(bool value)
protected internal ConfigurationPropertyCollection get_Properties()
public NamespaceInfo get_Item(int index)
public void set_Item(int index, NamespaceInfo value)
}
public System.Web.Configuration.NamespaceInfo : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty namespaceProp
public string Namespace
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name)
public bool Equals(object namespaceInformation)
public int GetHashCode()
public string get_Namespace()
public void set_Namespace(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
internal System.Web.Configuration.nBrowser.Build : CapabilitiesBuild {
private Dictionary`2<string, File> Browserfiles
private List`1<File> nbrowserfiles
private Dictionary`2<string, string> DefaultKeys
private Dictionary`2<string, string> BrowserKeys
private object browserSyncRoot
private Node browser
public void AddBrowserDirectory(string path)
public void AddBrowserFile(string fileName)
private void AddBrowserFile(File file)
public void AddBrowserFile(XmlDocument browser, string fileName)
public Node Browser()
private Node InitializeTree()
private Node GetNode(string Key)
public Node[] Nodes()
public CapabilitiesResult Process(NameValueCollection header, IDictionary initialCapabilities)
protected Collection`1<string> HeaderNames(Collection`1<string> list)
}
internal System.Web.Configuration.nBrowser.Exception : Exception {
public void .ctor(string errorMessage)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Web.Configuration.nBrowser.File : object {
private XmlDocument BrowserFile
internal Node[] Nodes
private ListDictionary Lookup
private ListDictionary DefaultLookup
internal List`1<Node> RefNodes
private string pFileName
public string FileName
public String[] Keys
public String[] DefaultKeys
public string get_FileName()
public void .ctor(string file)
public void .ctor(XmlDocument BrowserFile, string filename)
private void Load(XmlDocument BrowserFile)
public String[] get_Keys()
public String[] get_DefaultKeys()
internal Node GetNode(string Key)
internal Node GetDefaultNode(string Key)
}
internal System.Web.Configuration.nBrowser.Identification : object {
private bool MatchType
private string MatchName
private string MatchGroup
private string MatchPattern
private Regex RegexPattern
public string Name
public string Group
public string Pattern
public void .ctor(bool matchType, string matchGroup, string matchName, string matchPattern)
public Match GetMatch(string Header)
public bool IsMatchSuccessful(Match m)
public string get_Name()
public string get_Group()
public string get_Pattern()
}
internal System.Web.Configuration.nBrowser.Node : object {
private NodeType pName
private string pId
private string pParentID
private string pRefID
private string pMarkupTextWriterType
private string pFileName
private XmlNode xmlNode
private Identification[] Identification
private Identification[] Capture
private NameValueCollection Capabilities
private NameValueCollection Adapter
private Type[] AdapterControlTypes
private Type[] AdapterTypes
private List`1<string> ChildrenKeys
private List`1<string> DefaultChildrenKeys
private SortedList`2<string, Node> Children
private SortedList`2<string, Node> DefaultChildren
private NameValueCollection sampleHeaders
private bool HaveAdapterTypes
private object LookupAdapterTypesLock
public NodeType NameType
public string Id
public string ParentId
public string RefId
public string MarkupTextWriterType
public string FileName
public bool HasChildren
public NameValueCollection SampleHeader
public NodeType get_NameType()
public void set_NameType(NodeType value)
public string get_Id()
public void set_Id(string value)
public string get_ParentId()
public void set_ParentId(string value)
public string get_RefId()
public void set_RefId(string value)
public string get_MarkupTextWriterType()
public void set_MarkupTextWriterType(string value)
public string get_FileName()
public void set_FileName(string value)
public void .ctor(XmlNode xmlNode)
private void ProcessIdentification(XmlNode node)
private void ProcessCapture(XmlNode node)
private void ProcessCapabilities(XmlNode node)
private void ProcessControlAdapters(XmlNode node)
private void ProcessSampleHeaders(XmlNode node)
internal void ResetChildern()
public bool get_HasChildren()
public void Reset()
public void AddChild(Node child)
public void RemoveChild(Node child)
private Type FindType(string typeName)
internal bool Process(NameValueCollection header, Result result, List`1<Match> matchList)
private bool ProcessSubtree(NameValueCollection header, Result result, List`1<Match> matchList)
private bool BrowserIdentification(NameValueCollection header, CapabilitiesResult result, List`1<Match> matchList)
private void LookupAdapterTypes()
public NameValueCollection get_SampleHeader()
public void Tree(XmlTextWriter xmlwriter, int position)
public Collection`1<string> HeaderNames(Collection`1<string> list)
public void MergeFrom(Node n)
}
internal System.Web.Configuration.nBrowser.NodeType : Enum {
public int value__
public NodeType None
public NodeType Browser
public NodeType Gateway
public NodeType DefaultBrowser
}
internal System.Web.Configuration.nBrowser.Result : CapabilitiesResult {
private Dictionary`2<Type, Type> AdapterTypeMap
private StringCollection Track
internal Type MarkupTextWriter
public StringCollection Tracks
internal void .ctor(IDictionary items)
internal void AddTrack(string track)
internal void AddAdapter(Type controlType, Type adapterType)
public StringCollection get_Tracks()
internal Type GetTagWriter()
internal IDictionary GetAdapters()
}
public System.Web.Configuration.OutputCacheProfile : ConfigurationElement {
private ConfigurationProperty durationProp
private ConfigurationProperty enabledProp
private ConfigurationProperty locationProp
private ConfigurationProperty nameProp
private ConfigurationProperty noStoreProp
private ConfigurationProperty sqlDependencyProp
private ConfigurationProperty varyByContentEncodingProp
private ConfigurationProperty varyByControlProp
private ConfigurationProperty varyByCustomProp
private ConfigurationProperty varyByHeaderProp
private ConfigurationProperty varyByParamProp
private ConfigurationPropertyCollection properties
public int Duration
public bool Enabled
public OutputCacheLocation Location
public string Name
public bool NoStore
public string SqlDependency
public string VaryByContentEncoding
public string VaryByControl
public string VaryByCustom
public string VaryByHeader
public string VaryByParam
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name)
public int get_Duration()
public void set_Duration(int value)
public bool get_Enabled()
public void set_Enabled(bool value)
public OutputCacheLocation get_Location()
public void set_Location(OutputCacheLocation value)
public string get_Name()
public void set_Name(string value)
public bool get_NoStore()
public void set_NoStore(bool value)
public string get_SqlDependency()
public void set_SqlDependency(string value)
public string get_VaryByContentEncoding()
public void set_VaryByContentEncoding(string value)
public string get_VaryByControl()
public void set_VaryByControl(string value)
public string get_VaryByCustom()
public void set_VaryByCustom(string value)
public string get_VaryByHeader()
public void set_VaryByHeader(string value)
public string get_VaryByParam()
public void set_VaryByParam(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.OutputCacheProfileCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public String[] AllKeys
public OutputCacheProfile Item
public OutputCacheProfile Item
protected internal ConfigurationPropertyCollection Properties
public void Add(OutputCacheProfile name)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public string GetKey(int index)
public OutputCacheProfile Get(string name)
public OutputCacheProfile Get(int index)
public void Remove(string name)
public void RemoveAt(int index)
public void Set(OutputCacheProfile user)
public String[] get_AllKeys()
public OutputCacheProfile get_Item(int index)
public void set_Item(int index, OutputCacheProfile value)
public OutputCacheProfile get_Item(string name)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.OutputCacheSection : ConfigurationSection {
private ConfigurationProperty enableFragmentCacheProp
private ConfigurationProperty enableOutputCacheProp
private ConfigurationProperty omitVaryStarProp
private ConfigurationProperty sendCacheControlHeaderProp
private ConfigurationProperty enableKernelCacheForVaryByStarProp
private ConfigurationProperty providersProp
private ConfigurationProperty defaultProviderNameProp
private ConfigurationPropertyCollection properties
public bool EnableFragmentCache
public bool EnableOutputCache
public bool EnableKernelCacheForVaryByStar
public bool OmitVaryStar
public bool SendCacheControlHeader
public string DefaultProviderName
public ProviderSettingsCollection Providers
protected internal ConfigurationPropertyCollection Properties
public bool get_EnableFragmentCache()
public void set_EnableFragmentCache(bool value)
public bool get_EnableOutputCache()
public void set_EnableOutputCache(bool value)
public bool get_EnableKernelCacheForVaryByStar()
public void set_EnableKernelCacheForVaryByStar(bool value)
public bool get_OmitVaryStar()
public void set_OmitVaryStar(bool value)
public bool get_SendCacheControlHeader()
public void set_SendCacheControlHeader(bool value)
public string get_DefaultProviderName()
public void set_DefaultProviderName(string value)
public ProviderSettingsCollection get_Providers()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.OutputCacheSettingsSection : ConfigurationSection {
private ConfigurationProperty outputCacheProfilesProp
private ConfigurationPropertyCollection properties
public OutputCacheProfileCollection OutputCacheProfiles
protected internal ConfigurationPropertyCollection Properties
public OutputCacheProfileCollection get_OutputCacheProfiles()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.PagesEnableSessionState : Enum {
public int value__
public PagesEnableSessionState False
public PagesEnableSessionState ReadOnly
public PagesEnableSessionState True
}
public System.Web.Configuration.PagesSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty asyncTimeoutProp
private ConfigurationProperty autoEventWireupProp
private ConfigurationProperty bufferProp
private ConfigurationProperty controlsProp
private ConfigurationProperty enableEventValidationProp
private ConfigurationProperty enableSessionStateProp
private ConfigurationProperty enableViewStateProp
private ConfigurationProperty enableViewStateMacProp
private ConfigurationProperty maintainScrollPositionOnPostBackProp
private ConfigurationProperty masterPageFileProp
private ConfigurationProperty maxPageStateFieldLengthProp
private ConfigurationProperty modeProp
private ConfigurationProperty namespacesProp
private ConfigurationProperty pageBaseTypeProp
private ConfigurationProperty pageParserFilterTypeProp
private ConfigurationProperty smartNavigationProp
private ConfigurationProperty styleSheetThemeProp
private ConfigurationProperty tagMappingProp
private ConfigurationProperty themeProp
private ConfigurationProperty userControlBaseTypeProp
private ConfigurationProperty validateRequestProp
private ConfigurationProperty viewStateEncryptionModeProp
private ConfigurationProperty clientIDModeProp
private ConfigurationProperty controlRenderingCompatibilityVersionProp
public TimeSpan AsyncTimeout
public bool AutoEventWireup
public bool Buffer
public CompilationMode CompilationMode
public TagPrefixCollection Controls
public bool EnableEventValidation
public PagesEnableSessionState EnableSessionState
public bool EnableViewState
public bool EnableViewStateMac
public bool MaintainScrollPositionOnPostBack
public string MasterPageFile
public int MaxPageStateFieldLength
public NamespaceCollection Namespaces
public string PageBaseType
public string PageParserFilterType
public bool SmartNavigation
public string StyleSheetTheme
public TagMapCollection TagMapping
public string Theme
public string UserControlBaseType
public bool ValidateRequest
public ViewStateEncryptionMode ViewStateEncryptionMode
public ClientIDMode ClientIDMode
public Version ControlRenderingCompatibilityVersion
protected internal ConfigurationPropertyCollection Properties
public IgnoreDeviceFilterElementCollection IgnoreDeviceFilters
public bool RenderAllHiddenFieldsAtTopOfForm
public TimeSpan get_AsyncTimeout()
public void set_AsyncTimeout(TimeSpan value)
public bool get_AutoEventWireup()
public void set_AutoEventWireup(bool value)
public bool get_Buffer()
public void set_Buffer(bool value)
public CompilationMode get_CompilationMode()
public void set_CompilationMode(CompilationMode value)
public TagPrefixCollection get_Controls()
public bool get_EnableEventValidation()
public void set_EnableEventValidation(bool value)
public PagesEnableSessionState get_EnableSessionState()
public void set_EnableSessionState(PagesEnableSessionState value)
public bool get_EnableViewState()
public void set_EnableViewState(bool value)
public bool get_EnableViewStateMac()
public void set_EnableViewStateMac(bool value)
public bool get_MaintainScrollPositionOnPostBack()
public void set_MaintainScrollPositionOnPostBack(bool value)
public string get_MasterPageFile()
public void set_MasterPageFile(string value)
public int get_MaxPageStateFieldLength()
public void set_MaxPageStateFieldLength(int value)
public NamespaceCollection get_Namespaces()
public string get_PageBaseType()
public void set_PageBaseType(string value)
public string get_PageParserFilterType()
public void set_PageParserFilterType(string value)
public bool get_SmartNavigation()
public void set_SmartNavigation(bool value)
public string get_StyleSheetTheme()
public void set_StyleSheetTheme(string value)
public TagMapCollection get_TagMapping()
public string get_Theme()
public void set_Theme(string value)
public string get_UserControlBaseType()
public void set_UserControlBaseType(string value)
public bool get_ValidateRequest()
public void set_ValidateRequest(bool value)
public ViewStateEncryptionMode get_ViewStateEncryptionMode()
public void set_ViewStateEncryptionMode(ViewStateEncryptionMode value)
public ClientIDMode get_ClientIDMode()
public void set_ClientIDMode(ClientIDMode value)
public Version get_ControlRenderingCompatibilityVersion()
public void set_ControlRenderingCompatibilityVersion(Version value)
protected internal ConfigurationPropertyCollection get_Properties()
protected internal void DeserializeSection(XmlReader reader)
public IgnoreDeviceFilterElementCollection get_IgnoreDeviceFilters()
public bool get_RenderAllHiddenFieldsAtTopOfForm()
public void set_RenderAllHiddenFieldsAtTopOfForm(bool value)
}
public System.Web.Configuration.PartialTrustVisibleAssembliesSection : ConfigurationSection {
public PartialTrustVisibleAssemblyCollection PartialTrustVisibleAssemblies
public PartialTrustVisibleAssemblyCollection get_PartialTrustVisibleAssemblies()
}
public System.Web.Configuration.PartialTrustVisibleAssembly : ConfigurationElement {
public string AssemblyName
public string PublicKey
public void .ctor(string assemblyName, string publicKey)
public string get_AssemblyName()
public void set_AssemblyName(string value)
public string get_PublicKey()
public void set_PublicKey(string value)
}
public System.Web.Configuration.PartialTrustVisibleAssemblyCollection : ConfigurationElementCollection {
public PartialTrustVisibleAssembly Item
public PartialTrustVisibleAssembly get_Item(int index)
public void set_Item(int index, PartialTrustVisibleAssembly value)
public void Add(PartialTrustVisibleAssembly partialTrustVisibleAssembly)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string key)
public void RemoveAt(int index)
}
public System.Web.Configuration.PassportAuthentication : ConfigurationElement {
private ConfigurationProperty redirectUrlProp
private ConfigurationPropertyCollection properties
private ConfigurationElementProperty elementProperty
protected internal ConfigurationElementProperty ElementProperty
public string RedirectUrl
protected internal ConfigurationPropertyCollection Properties
private void ValidateElement(object o)
protected internal ConfigurationElementProperty get_ElementProperty()
public string get_RedirectUrl()
public void set_RedirectUrl(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.PositiveTimeSpanValidator : ConfigurationValidatorBase {
public bool CanValidate(Type t)
public void Validate(object value)
}
public System.Web.Configuration.ProcessModelComAuthenticationLevel : Enum {
public int value__
public ProcessModelComAuthenticationLevel None
public ProcessModelComAuthenticationLevel Call
public ProcessModelComAuthenticationLevel Connect
public ProcessModelComAuthenticationLevel Default
public ProcessModelComAuthenticationLevel Pkt
public ProcessModelComAuthenticationLevel PktIntegrity
public ProcessModelComAuthenticationLevel PktPrivacy
}
public System.Web.Configuration.ProcessModelComImpersonationLevel : Enum {
public int value__
public ProcessModelComImpersonationLevel Default
public ProcessModelComImpersonationLevel Anonymous
public ProcessModelComImpersonationLevel Delegate
public ProcessModelComImpersonationLevel Identify
public ProcessModelComImpersonationLevel Impersonate
}
public System.Web.Configuration.ProcessModelLogLevel : Enum {
public int value__
public ProcessModelLogLevel None
public ProcessModelLogLevel All
public ProcessModelLogLevel Errors
}
public System.Web.Configuration.ProcessModelSection : ConfigurationSection {
private ConfigurationProperty autoConfigProp
private ConfigurationProperty clientConnectedCheckProp
private ConfigurationProperty comAuthenticationLevelProp
private ConfigurationProperty comImpersonationLevelProp
private ConfigurationProperty cpuMaskProp
private ConfigurationProperty enableProp
private ConfigurationProperty idleTimeoutProp
private ConfigurationProperty logLevelProp
private ConfigurationProperty maxAppDomainsProp
private ConfigurationProperty maxIoThreadsProp
private ConfigurationProperty maxWorkerThreadsProp
private ConfigurationProperty memoryLimitProp
private ConfigurationProperty minIoThreadsProp
private ConfigurationProperty minWorkerThreadsProp
private ConfigurationProperty passwordProp
private ConfigurationProperty pingFrequencyProp
private ConfigurationProperty pingTimeoutProp
private ConfigurationProperty requestLimitProp
private ConfigurationProperty requestQueueLimitProp
private ConfigurationProperty responseDeadlockIntervalProp
private ConfigurationProperty responseRestartDeadlockIntervalProp
private ConfigurationProperty restartQueueLimitProp
private ConfigurationProperty serverErrorMessageFileProp
private ConfigurationProperty shutdownTimeoutProp
private ConfigurationProperty timeoutProp
private ConfigurationProperty userNameProp
private ConfigurationProperty webGardenProp
private ConfigurationPropertyCollection properties
private ConfigurationElementProperty elementProperty
protected internal ConfigurationElementProperty ElementProperty
public bool AutoConfig
public TimeSpan ClientConnectedCheck
public ProcessModelComAuthenticationLevel ComAuthenticationLevel
public ProcessModelComImpersonationLevel ComImpersonationLevel
public int CpuMask
public bool Enable
public TimeSpan IdleTimeout
public ProcessModelLogLevel LogLevel
public int MaxAppDomains
public int MaxIOThreads
public int MaxWorkerThreads
public int MemoryLimit
public int MinIOThreads
public int MinWorkerThreads
public string Password
public TimeSpan PingFrequency
public TimeSpan PingTimeout
public int RequestLimit
public int RequestQueueLimit
public TimeSpan ResponseDeadlockInterval
public TimeSpan ResponseRestartDeadlockInterval
public int RestartQueueLimit
public string ServerErrorMessageFile
public TimeSpan ShutdownTimeout
public TimeSpan Timeout
public string UserName
public bool WebGarden
protected internal ConfigurationPropertyCollection Properties
private void ValidateElement(object o)
protected internal ConfigurationElementProperty get_ElementProperty()
public bool get_AutoConfig()
public void set_AutoConfig(bool value)
public TimeSpan get_ClientConnectedCheck()
public void set_ClientConnectedCheck(TimeSpan value)
public ProcessModelComAuthenticationLevel get_ComAuthenticationLevel()
public void set_ComAuthenticationLevel(ProcessModelComAuthenticationLevel value)
public ProcessModelComImpersonationLevel get_ComImpersonationLevel()
public void set_ComImpersonationLevel(ProcessModelComImpersonationLevel value)
public int get_CpuMask()
public void set_CpuMask(int value)
public bool get_Enable()
public void set_Enable(bool value)
public TimeSpan get_IdleTimeout()
public void set_IdleTimeout(TimeSpan value)
public ProcessModelLogLevel get_LogLevel()
public void set_LogLevel(ProcessModelLogLevel value)
public int get_MaxAppDomains()
public void set_MaxAppDomains(int value)
public int get_MaxIOThreads()
public void set_MaxIOThreads(int value)
public int get_MaxWorkerThreads()
public void set_MaxWorkerThreads(int value)
public int get_MemoryLimit()
public void set_MemoryLimit(int value)
public int get_MinIOThreads()
public void set_MinIOThreads(int value)
public int get_MinWorkerThreads()
public void set_MinWorkerThreads(int value)
public string get_Password()
public void set_Password(string value)
public TimeSpan get_PingFrequency()
public void set_PingFrequency(TimeSpan value)
public TimeSpan get_PingTimeout()
public void set_PingTimeout(TimeSpan value)
public int get_RequestLimit()
public void set_RequestLimit(int value)
public int get_RequestQueueLimit()
public void set_RequestQueueLimit(int value)
public TimeSpan get_ResponseDeadlockInterval()
public void set_ResponseDeadlockInterval(TimeSpan value)
public TimeSpan get_ResponseRestartDeadlockInterval()
public void set_ResponseRestartDeadlockInterval(TimeSpan value)
public int get_RestartQueueLimit()
public void set_RestartQueueLimit(int value)
public string get_ServerErrorMessageFile()
public void set_ServerErrorMessageFile(string value)
public TimeSpan get_ShutdownTimeout()
public void set_ShutdownTimeout(TimeSpan value)
public TimeSpan get_Timeout()
public void set_Timeout(TimeSpan value)
public string get_UserName()
public void set_UserName(string value)
public bool get_WebGarden()
public void set_WebGarden(bool value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.ProfileGroupSettings : ConfigurationElement {
private ConfigurationProperty propertySettingsProp
private ConfigurationProperty nameProp
private ConfigurationPropertyCollection properties
public string Name
public ProfilePropertySettingsCollection PropertySettings
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name)
public bool Equals(object obj)
public int GetHashCode()
internal void DoDeserialize(XmlReader reader)
public string get_Name()
internal void set_Name(string value)
public ProfilePropertySettingsCollection get_PropertySettings()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.ProfileGroupSettingsCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public String[] AllKeys
public ProfileGroupSettings Item
public ProfileGroupSettings Item
protected internal ConfigurationPropertyCollection Properties
public void Add(ProfileGroupSettings group)
public String[] get_AllKeys()
protected internal bool IsModified()
protected internal void ResetModified()
public void Clear()
protected ConfigurationElement CreateNewElement()
public ProfileGroupSettings Get(int index)
public ProfileGroupSettings Get(string name)
protected object GetElementKey(ConfigurationElement element)
public string GetKey(int index)
public int IndexOf(ProfileGroupSettings group)
public void Remove(string name)
public void RemoveAt(int index)
public void Set(ProfileGroupSettings group)
public ProfileGroupSettings get_Item(int index)
public void set_Item(int index, ProfileGroupSettings value)
public ProfileGroupSettings get_Item(string name)
protected internal ConfigurationPropertyCollection get_Properties()
internal void ResetInternal(ConfigurationElement parentElement)
internal void AddNewSettings(ProfileGroupSettings newSettings)
}
public System.Web.Configuration.ProfileGuidedOptimizationsFlags : Enum {
public int value__
public ProfileGuidedOptimizationsFlags None
public ProfileGuidedOptimizationsFlags All
}
internal System.Web.Configuration.ProfilePropertyNameValidator : StringValidator {
public void Validate(object value)
}
public System.Web.Configuration.ProfilePropertySettings : ConfigurationElement {
private ConfigurationProperty allowAnonymousProp
private ConfigurationProperty customProviderDataProp
private ConfigurationProperty defaultValueProp
private ConfigurationProperty nameProp
private ConfigurationProperty providerProp
private ConfigurationProperty readOnlyProp
private ConfigurationProperty serializeAsProp
private ConfigurationProperty typeProp
private ConfigurationPropertyCollection properties
public bool AllowAnonymous
public string CustomProviderData
public string DefaultValue
public string Name
public string Provider
public bool ReadOnly
public SerializationMode SerializeAs
public string Type
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name)
public void .ctor(string name, bool readOnly, SerializationMode serializeAs, string providerName, string defaultValue, string profileType, bool allowAnonymous, string customProviderData)
public bool get_AllowAnonymous()
public void set_AllowAnonymous(bool value)
public string get_CustomProviderData()
public void set_CustomProviderData(string value)
public string get_DefaultValue()
public void set_DefaultValue(string value)
public string get_Name()
public void set_Name(string value)
public string get_Provider()
public void set_Provider(string value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public SerializationMode get_SerializeAs()
public void set_SerializeAs(SerializationMode value)
public string get_Type()
public void set_Type(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.ProfilePropertySettingsCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public String[] AllKeys
protected bool AllowClear
public ProfilePropertySettings Item
public ProfilePropertySettings Item
protected bool ThrowOnDuplicate
protected internal ConfigurationPropertyCollection Properties
public void Add(ProfilePropertySettings propertySettings)
public void Clear()
protected ConfigurationElement CreateNewElement()
public ProfilePropertySettings Get(int index)
public ProfilePropertySettings Get(string name)
protected object GetElementKey(ConfigurationElement element)
protected bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader)
public string GetKey(int index)
public int IndexOf(ProfilePropertySettings propertySettings)
public void Remove(string name)
public void RemoveAt(int index)
public void Set(ProfilePropertySettings propertySettings)
public String[] get_AllKeys()
protected bool get_AllowClear()
public ProfilePropertySettings get_Item(int index)
public void set_Item(int index, ProfilePropertySettings value)
public ProfilePropertySettings get_Item(string name)
protected bool get_ThrowOnDuplicate()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.ProfileSection : ConfigurationSection {
private ConfigurationProperty automaticSaveEnabledProp
private ConfigurationProperty defaultProviderProp
private ConfigurationProperty enabledProp
private ConfigurationProperty inheritsProp
private ConfigurationProperty propertySettingsProp
private ConfigurationProperty providersProp
private ConfigurationPropertyCollection properties
public bool AutomaticSaveEnabled
public string DefaultProvider
public bool Enabled
public string Inherits
public RootProfilePropertySettingsCollection PropertySettings
public ProviderSettingsCollection Providers
protected internal ConfigurationPropertyCollection Properties
public bool get_AutomaticSaveEnabled()
public void set_AutomaticSaveEnabled(bool value)
public string get_DefaultProvider()
public void set_DefaultProvider(string value)
public bool get_Enabled()
public void set_Enabled(bool value)
public string get_Inherits()
public void set_Inherits(string value)
public RootProfilePropertySettingsCollection get_PropertySettings()
public ProviderSettingsCollection get_Providers()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.ProfileSettings : ConfigurationElement {
private ConfigurationProperty customProp
private ConfigurationProperty maxLimitProp
private ConfigurationProperty minInstancesProp
private ConfigurationProperty minIntervalProp
private ConfigurationProperty nameProp
private ConfigurationPropertyCollection properties
public string Custom
public int MaxLimit
public int MinInstances
public TimeSpan MinInterval
public string Name
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name)
public void .ctor(string name, int minInstances, int maxLimit, TimeSpan minInterval, string custom)
public void .ctor(string name, int minInstances, int maxLimit, TimeSpan minInterval)
public string get_Custom()
public void set_Custom(string value)
public int get_MaxLimit()
public void set_MaxLimit(int value)
public int get_MinInstances()
public void set_MinInstances(int value)
public TimeSpan get_MinInterval()
public void set_MinInterval(TimeSpan value)
public string get_Name()
public void set_Name(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.ProfileSettingsCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public ProfileSettings Item
public ProfileSettings Item
protected internal ConfigurationPropertyCollection Properties
public void Add(ProfileSettings profilesSettings)
public void Clear()
public bool Contains(string name)
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public int IndexOf(string name)
public void Insert(int index, ProfileSettings authorizationSettings)
public void Remove(string name)
public void RemoveAt(int index)
public ProfileSettings get_Item(string key)
public ProfileSettings get_Item(int index)
public void set_Item(int index, ProfileSettings value)
protected internal ConfigurationPropertyCollection get_Properties()
}
internal System.Web.Configuration.PropertyHelper : object {
internal WhiteSpaceTrimStringConverter WhiteSpaceTrimStringConverter
internal InfiniteTimeSpanConverter InfiniteTimeSpanConverter
internal InfiniteIntConverter InfiniteIntConverter
internal TimeSpanMinutesConverter TimeSpanMinutesConverter
internal TimeSpanSecondsOrInfiniteConverter TimeSpanSecondsOrInfiniteConverter
internal TimeSpanSecondsConverter TimeSpanSecondsConverter
internal CommaDelimitedStringCollectionConverter CommaDelimitedStringCollectionConverter
internal DefaultValidator DefaultValidator
internal NullableStringValidator NonEmptyStringValidator
internal PositiveTimeSpanValidator PositiveTimeSpanValidator
internal TimeSpanMinutesOrInfiniteConverter TimeSpanMinutesOrInfiniteConverter
internal IntegerValidator IntFromZeroToMaxValidator
internal IntegerValidator IntFromOneToMax_1Validator
internal VersionConverter VersionConverter
}
public System.Web.Configuration.ProtocolCollection : ConfigurationElementCollection {
public String[] AllKeys
public ProtocolElement Item
public String[] get_AllKeys()
public ProtocolElement get_Item(int index)
public void set_Item(int index, ProtocolElement value)
public void Add(ProtocolElement protocolElement)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string name)
public void Remove(ProtocolElement protocolElement)
public void RemoveAt(int index)
}
public System.Web.Configuration.ProtocolElement : ConfigurationElement {
public string AppDomainHandlerType
public string Name
public string ProcessHandlerType
public bool Validate
public void .ctor(string name)
public string get_AppDomainHandlerType()
public void set_AppDomainHandlerType(string value)
public string get_Name()
public void set_Name(string value)
public string get_ProcessHandlerType()
public void set_ProcessHandlerType(string value)
public bool get_Validate()
public void set_Validate(bool value)
}
public System.Web.Configuration.ProtocolsConfigurationHandler : object {
public object Create(object parent, object configContextObj, XmlNode section)
}
public System.Web.Configuration.ProtocolsSection : ConfigurationSection {
public ProtocolCollection Protocols
public ProtocolCollection get_Protocols()
}
public System.Web.Configuration.ProvidersHelper : object {
public ProviderBase InstantiateProvider(ProviderSettings providerSettings, Type providerType)
public void InstantiateProviders(ProviderSettingsCollection configProviders, ProviderCollection providers, Type providerType)
internal DbProviderFactory GetDbProviderFactory(string providerName)
}
internal System.Web.Configuration.RegexMatchTimeoutValidator : TimeSpanValidator {
private TimeSpan _minValue
private TimeSpan _maxValue
}
internal System.Web.Configuration.RegexMatchTimeoutValidatorAttribute : ConfigurationValidatorAttribute {
public ConfigurationValidatorBase ValidatorInstance
public ConfigurationValidatorBase get_ValidatorInstance()
}
public System.Web.Configuration.RegexWorker : object {
public string Item
public void .ctor(HttpBrowserCapabilities browserCaps)
public bool ProcessRegex(string target, string regexExpression)
public string get_Item(string key)
}
public System.Web.Configuration.RemoteWebConfigurationHostServer : object {
public string DoEncryptOrDecrypt(bool doEncrypt, string xmlString, string protectionProviderName, string protectionProviderType, String[] paramKeys, String[] paramValues)
public Byte[] GetData(string fileName, bool getReadTimeOnly, Int64& readTime)
public void GetFileDetails(string name, Boolean& exists, Int64& size, Int64& createDate, Int64& lastWriteDate)
public string GetFilePaths(int webLevelAsInt, string path, string site, string locationSubPath)
public void WriteData(string fileName, string templateFileName, Byte[] data, Int64& readTime)
}
public System.Web.Configuration.RoleManagerSection : ConfigurationSection {
private ConfigurationProperty cacheRolesInCookieProp
private ConfigurationProperty cookieNameProp
private ConfigurationProperty cookiePathProp
private ConfigurationProperty cookieProtectionProp
private ConfigurationProperty cookieRequireSSLProp
private ConfigurationProperty cookieSlidingExpirationProp
private ConfigurationProperty cookieTimeoutProp
private ConfigurationProperty createPersistentCookieProp
private ConfigurationProperty defaultProviderProp
private ConfigurationProperty domainProp
private ConfigurationProperty enabledProp
private ConfigurationProperty maxCachedResultsProp
private ConfigurationProperty providersProp
private ConfigurationPropertyCollection properties
public bool CacheRolesInCookie
public string CookieName
public string CookiePath
public CookieProtection CookieProtection
public bool CookieRequireSSL
public bool CookieSlidingExpiration
public TimeSpan CookieTimeout
public bool CreatePersistentCookie
public string DefaultProvider
public string Domain
public bool Enabled
public int MaxCachedResults
public ProviderSettingsCollection Providers
protected internal ConfigurationPropertyCollection Properties
public bool get_CacheRolesInCookie()
public void set_CacheRolesInCookie(bool value)
public string get_CookieName()
public void set_CookieName(string value)
public string get_CookiePath()
public void set_CookiePath(string value)
public CookieProtection get_CookieProtection()
public void set_CookieProtection(CookieProtection value)
public bool get_CookieRequireSSL()
public void set_CookieRequireSSL(bool value)
public bool get_CookieSlidingExpiration()
public void set_CookieSlidingExpiration(bool value)
public TimeSpan get_CookieTimeout()
public void set_CookieTimeout(TimeSpan value)
public bool get_CreatePersistentCookie()
public void set_CreatePersistentCookie(bool value)
public string get_DefaultProvider()
public void set_DefaultProvider(string value)
public string get_Domain()
public void set_Domain(string value)
public bool get_Enabled()
public void set_Enabled(bool value)
public int get_MaxCachedResults()
public void set_MaxCachedResults(int value)
public ProviderSettingsCollection get_Providers()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.RootProfilePropertySettingsCollection : ProfilePropertySettingsCollection {
private ConfigurationPropertyCollection properties
private ProfileGroupSettingsCollection groupSettings
protected bool AllowClear
public ProfileGroupSettingsCollection GroupSettings
protected internal ConfigurationPropertyCollection Properties
protected bool ThrowOnDuplicate
public bool Equals(object rootProfilePropertySettingsCollection)
public int GetHashCode()
protected bool get_AllowClear()
protected bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader)
protected internal void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode)
public ProfileGroupSettingsCollection get_GroupSettings()
protected internal ConfigurationPropertyCollection get_Properties()
protected bool get_ThrowOnDuplicate()
protected internal bool IsModified()
protected internal void ResetModified()
protected internal void Reset(ConfigurationElement parentElement)
}
internal System.Web.Configuration.RpcAuthent : Enum {
public int value__
public RpcAuthent None
public RpcAuthent DcePrivate
public RpcAuthent DcePublic
public RpcAuthent DecPublic
public RpcAuthent GssNegotiate
public RpcAuthent WinNT
public RpcAuthent GssSchannel
public RpcAuthent GssKerberos
public RpcAuthent DPA
public RpcAuthent MSN
public RpcAuthent Digest
public RpcAuthent MQ
public RpcAuthent Default
}
internal System.Web.Configuration.RpcImpers : Enum {
public int value__
public RpcImpers Default
public RpcImpers Anonymous
public RpcImpers Identify
public RpcImpers Impersonate
public RpcImpers Delegate
}
internal System.Web.Configuration.RpcLevel : Enum {
public int value__
public RpcLevel Default
public RpcLevel None
public RpcLevel Connect
public RpcLevel Call
public RpcLevel Pkt
public RpcLevel PktIntegrity
public RpcLevel PktPrivacy
}
public System.Web.Configuration.RuleSettings : ConfigurationElement {
private ConfigurationProperty customProp
private ConfigurationProperty eventNameProp
private ConfigurationProperty maxLimitProp
private ConfigurationProperty minInstancesProp
private ConfigurationProperty minIntervalProp
private ConfigurationProperty nameProp
private ConfigurationProperty profileProp
private ConfigurationProperty providerProp
private ConfigurationPropertyCollection properties
public string Custom
public string EventName
public int MaxLimit
public int MinInstances
public TimeSpan MinInterval
public string Name
public string Profile
public string Provider
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name, string eventName, string provider, string profile, int minInstances, int maxLimit, TimeSpan minInterval, string custom)
public void .ctor(string name, string eventName, string provider, string profile, int minInstances, int maxLimit, TimeSpan minInterval)
public void .ctor(string name, string eventName, string provider)
public string get_Custom()
public void set_Custom(string value)
public string get_EventName()
public void set_EventName(string value)
public int get_MaxLimit()
public void set_MaxLimit(int value)
public int get_MinInstances()
public void set_MinInstances(int value)
public TimeSpan get_MinInterval()
public void set_MinInterval(TimeSpan value)
public string get_Name()
public void set_Name(string value)
public string get_Profile()
public void set_Profile(string value)
public string get_Provider()
public void set_Provider(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.RuleSettingsCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public RuleSettings Item
public RuleSettings Item
protected internal ConfigurationPropertyCollection Properties
public void Add(RuleSettings ruleSettings)
public void Clear()
public bool Contains(string name)
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public int IndexOf(string name)
public void Insert(int index, RuleSettings eventSettings)
public void Remove(string name)
public void RemoveAt(int index)
public RuleSettings get_Item(string key)
public RuleSettings get_Item(int index)
public void set_Item(int index, RuleSettings value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.SecurityPolicySection : ConfigurationSection {
private ConfigurationProperty Prop
private ConfigurationPropertyCollection properties
public TrustLevelCollection TrustLevels
protected internal ConfigurationPropertyCollection Properties
public TrustLevelCollection get_TrustLevels()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.SerializationMode : Enum {
public int value__
public SerializationMode String
public SerializationMode Xml
public SerializationMode Binary
public SerializationMode ProviderSpecific
}
public System.Web.Configuration.SessionPageStateSection : ConfigurationSection {
private ConfigurationProperty historySizeProp
private ConfigurationPropertyCollection properties
public int DefaultHistorySize
public int HistorySize
protected internal ConfigurationPropertyCollection Properties
public int get_HistorySize()
public void set_HistorySize(int value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.SessionStateSection : ConfigurationSection {
internal string DefaultSqlConnectionString
private ConfigurationProperty allowCustomSqlDatabaseProp
private ConfigurationProperty cookielessProp
private ConfigurationProperty cookieNameProp
private ConfigurationProperty customProviderProp
private ConfigurationProperty modeProp
private ConfigurationProperty partitionResolverTypeProp
private ConfigurationProperty providersProp
private ConfigurationProperty regenerateExpiredSessionIdProp
private ConfigurationProperty sessionIDManagerTypeProp
private ConfigurationProperty sqlCommandTimeoutProp
private ConfigurationProperty sqlConnectionStringProp
private ConfigurationProperty stateConnectionStringProp
private ConfigurationProperty stateNetworkTimeoutProp
private ConfigurationProperty timeoutProp
private ConfigurationProperty useHostingIdentityProp
private ConfigurationProperty compressionEnabledProp
private ConfigurationProperty sqlConnectionRetryIntervalProp
private ConfigurationPropertyCollection properties
private ConfigurationElementProperty elementProperty
public bool AllowCustomSqlDatabase
public HttpCookieMode Cookieless
public string CookieName
public string CustomProvider
public SessionStateMode Mode
public string PartitionResolverType
public ProviderSettingsCollection Providers
public bool RegenerateExpiredSessionId
public string SessionIDManagerType
public TimeSpan SqlCommandTimeout
public string SqlConnectionString
public string StateConnectionString
public TimeSpan StateNetworkTimeout
public TimeSpan Timeout
public bool UseHostingIdentity
public bool CompressionEnabled
public TimeSpan SqlConnectionRetryInterval
protected internal ConfigurationElementProperty ElementProperty
protected internal ConfigurationPropertyCollection Properties
internal bool CookieLess
protected void PostDeserialize()
public bool get_AllowCustomSqlDatabase()
public void set_AllowCustomSqlDatabase(bool value)
public HttpCookieMode get_Cookieless()
public void set_Cookieless(HttpCookieMode value)
public string get_CookieName()
public void set_CookieName(string value)
public string get_CustomProvider()
public void set_CustomProvider(string value)
public SessionStateMode get_Mode()
public void set_Mode(SessionStateMode value)
public string get_PartitionResolverType()
public void set_PartitionResolverType(string value)
public ProviderSettingsCollection get_Providers()
public bool get_RegenerateExpiredSessionId()
public void set_RegenerateExpiredSessionId(bool value)
public string get_SessionIDManagerType()
public void set_SessionIDManagerType(string value)
public TimeSpan get_SqlCommandTimeout()
public void set_SqlCommandTimeout(TimeSpan value)
public string get_SqlConnectionString()
public void set_SqlConnectionString(string value)
public string get_StateConnectionString()
public void set_StateConnectionString(string value)
public TimeSpan get_StateNetworkTimeout()
public void set_StateNetworkTimeout(TimeSpan value)
public TimeSpan get_Timeout()
public void set_Timeout(TimeSpan value)
public bool get_UseHostingIdentity()
public void set_UseHostingIdentity(bool value)
public bool get_CompressionEnabled()
public void set_CompressionEnabled(bool value)
public TimeSpan get_SqlConnectionRetryInterval()
public void set_SqlConnectionRetryInterval(TimeSpan value)
private void ValidateElement(object o)
protected internal ConfigurationElementProperty get_ElementProperty()
protected internal ConfigurationPropertyCollection get_Properties()
private HttpCookieMode ParseCookieMode(string s)
internal bool get_CookieLess()
internal void set_CookieLess(bool value)
}
public System.Web.Configuration.SiteMapSection : ConfigurationSection {
private ConfigurationProperty defaultProviderProp
private ConfigurationProperty enabledProp
private ConfigurationProperty providersProp
private ConfigurationPropertyCollection properties
private SiteMapProviderCollection providers
public string DefaultProvider
public bool Enabled
public ProviderSettingsCollection Providers
internal SiteMapProviderCollection ProvidersInternal
protected internal ConfigurationPropertyCollection Properties
public string get_DefaultProvider()
public void set_DefaultProvider(string value)
public bool get_Enabled()
public void set_Enabled(bool value)
public ProviderSettingsCollection get_Providers()
internal SiteMapProviderCollection get_ProvidersInternal()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.SqlCacheDependencyDatabase : ConfigurationElement {
private ConfigurationProperty connectionStringNameProp
private ConfigurationProperty nameProp
private ConfigurationProperty pollTimeProp
private ConfigurationPropertyCollection properties
private ConfigurationElementProperty elementProperty
protected internal ConfigurationElementProperty ElementProperty
public string ConnectionStringName
public string Name
public int PollTime
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name, string connectionStringName)
public void .ctor(string name, string connectionStringName, int pollTime)
private void ValidateElement(object o)
protected internal ConfigurationElementProperty get_ElementProperty()
public string get_ConnectionStringName()
public void set_ConnectionStringName(string value)
public string get_Name()
public void set_Name(string value)
public int get_PollTime()
public void set_PollTime(int value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.SqlCacheDependencyDatabaseCollection : ConfigurationElementCollection {
public String[] AllKeys
public SqlCacheDependencyDatabase Item
public SqlCacheDependencyDatabase Item
public void Add(SqlCacheDependencyDatabase name)
public void Clear()
public SqlCacheDependencyDatabase Get(string name)
public SqlCacheDependencyDatabase Get(int index)
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public string GetKey(int index)
public void Remove(string name)
public void RemoveAt(int index)
public void Set(SqlCacheDependencyDatabase user)
public String[] get_AllKeys()
public SqlCacheDependencyDatabase get_Item(int index)
public void set_Item(int index, SqlCacheDependencyDatabase value)
public SqlCacheDependencyDatabase get_Item(string name)
}
public System.Web.Configuration.SqlCacheDependencySection : ConfigurationSection {
private ConfigurationProperty databasesProp
private ConfigurationProperty enabledProp
private ConfigurationProperty pollTimeProp
private ConfigurationPropertyCollection properties
private ConfigurationElementProperty elementProperty
protected internal ConfigurationElementProperty ElementProperty
public SqlCacheDependencyDatabaseCollection Databases
public bool Enabled
public int PollTime
protected internal ConfigurationPropertyCollection Properties
private void ValidateElement(object o)
protected internal ConfigurationElementProperty get_ElementProperty()
protected void PostDeserialize()
public SqlCacheDependencyDatabaseCollection get_Databases()
public bool get_Enabled()
public void set_Enabled(bool value)
public int get_PollTime()
public void set_PollTime(int value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.SystemWebCachingSectionGroup : ConfigurationSectionGroup {
public CacheSection Cache
public OutputCacheSection OutputCache
public OutputCacheSettingsSection OutputCacheSettings
public SqlCacheDependencySection SqlCacheDependency
public CacheSection get_Cache()
public OutputCacheSection get_OutputCache()
public OutputCacheSettingsSection get_OutputCacheSettings()
public SqlCacheDependencySection get_SqlCacheDependency()
}
public System.Web.Configuration.SystemWebSectionGroup : ConfigurationSectionGroup {
public AnonymousIdentificationSection AnonymousIdentification
public AuthenticationSection Authentication
public AuthorizationSection Authorization
public DefaultSection BrowserCaps
public ClientTargetSection ClientTarget
public CompilationSection Compilation
public CustomErrorsSection CustomErrors
public DeploymentSection Deployment
public DefaultSection DeviceFilters
public GlobalizationSection Globalization
public HealthMonitoringSection HealthMonitoring
public HostingEnvironmentSection HostingEnvironment
public HttpCookiesSection HttpCookies
public HttpHandlersSection HttpHandlers
public HttpModulesSection HttpModules
public HttpRuntimeSection HttpRuntime
public IdentitySection Identity
public MachineKeySection MachineKey
public MembershipSection Membership
public ConfigurationSection MobileControls
public PagesSection Pages
public ProcessModelSection ProcessModel
public ProfileSection Profile
public DefaultSection Protocols
public RoleManagerSection RoleManager
public SecurityPolicySection SecurityPolicy
public SessionStateSection SessionState
public SiteMapSection SiteMap
public TraceSection Trace
public TrustSection Trust
public UrlMappingsSection UrlMappings
public WebControlsSection WebControls
public WebPartsSection WebParts
public WebServicesSection WebServices
public XhtmlConformanceSection XhtmlConformance
public FullTrustAssembliesSection FullTrustAssemblies
public PartialTrustVisibleAssembliesSection PartialTrustVisibleAssemblies
public AnonymousIdentificationSection get_AnonymousIdentification()
public AuthenticationSection get_Authentication()
public AuthorizationSection get_Authorization()
public DefaultSection get_BrowserCaps()
public ClientTargetSection get_ClientTarget()
public CompilationSection get_Compilation()
public CustomErrorsSection get_CustomErrors()
public DeploymentSection get_Deployment()
public DefaultSection get_DeviceFilters()
public GlobalizationSection get_Globalization()
public HealthMonitoringSection get_HealthMonitoring()
public HostingEnvironmentSection get_HostingEnvironment()
public HttpCookiesSection get_HttpCookies()
public HttpHandlersSection get_HttpHandlers()
public HttpModulesSection get_HttpModules()
public HttpRuntimeSection get_HttpRuntime()
public IdentitySection get_Identity()
public MachineKeySection get_MachineKey()
public MembershipSection get_Membership()
public ConfigurationSection get_MobileControls()
public PagesSection get_Pages()
public ProcessModelSection get_ProcessModel()
public ProfileSection get_Profile()
public DefaultSection get_Protocols()
public RoleManagerSection get_RoleManager()
public SecurityPolicySection get_SecurityPolicy()
public SessionStateSection get_SessionState()
public SiteMapSection get_SiteMap()
public TraceSection get_Trace()
public TrustSection get_Trust()
public UrlMappingsSection get_UrlMappings()
public WebControlsSection get_WebControls()
public WebPartsSection get_WebParts()
public WebServicesSection get_WebServices()
public XhtmlConformanceSection get_XhtmlConformance()
public FullTrustAssembliesSection get_FullTrustAssemblies()
public PartialTrustVisibleAssembliesSection get_PartialTrustVisibleAssemblies()
}
public System.Web.Configuration.TagMapCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
protected internal ConfigurationPropertyCollection Properties
public TagMapInfo Item
public void Add(TagMapInfo tagMapInformation)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(TagMapInfo tagMapInformation)
protected internal ConfigurationPropertyCollection get_Properties()
public TagMapInfo get_Item(int index)
public void set_Item(int index, TagMapInfo value)
}
public System.Web.Configuration.TagMapInfo : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty mappedTagTypeProp
private ConfigurationProperty tagTypeProp
public string MappedTagType
public string TagType
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string tagTypeName, string mappedTagTypeName)
public bool Equals(object o)
public int GetHashCode()
protected internal bool SerializeElement(XmlWriter writer, bool serializeCollectionKey)
public string get_MappedTagType()
public void set_MappedTagType(string value)
public string get_TagType()
public void set_TagType(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.TagPrefixCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public ConfigurationElementCollectionType CollectionType
protected string ElementName
protected internal ConfigurationPropertyCollection Properties
public TagPrefixInfo Item
protected bool ThrowOnDuplicate
public void Add(TagPrefixInfo tagPrefixInformation)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(TagPrefixInfo tagPrefixInformation)
public ConfigurationElementCollectionType get_CollectionType()
protected string get_ElementName()
protected internal ConfigurationPropertyCollection get_Properties()
public TagPrefixInfo get_Item(int index)
public void set_Item(int index, TagPrefixInfo value)
protected bool get_ThrowOnDuplicate()
}
public System.Web.Configuration.TagPrefixInfo : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty tagPrefixProp
private ConfigurationProperty namespaceProp
private ConfigurationProperty assemblyProp
private ConfigurationProperty tagNameProp
private ConfigurationProperty sourceProp
private ConfigurationElementProperty elementProperty
protected internal ConfigurationElementProperty ElementProperty
public string Assembly
public string Namespace
public string Source
public string TagName
public string TagPrefix
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string tagPrefix, string nameSpace, string assembly, string tagName, string source)
private void ValidateElement(object o)
protected internal ConfigurationElementProperty get_ElementProperty()
public bool Equals(object prefix)
public int GetHashCode()
public string get_Assembly()
public void set_Assembly(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_Source()
public void set_Source(string value)
public string get_TagName()
public void set_TagName(string value)
public string get_TagPrefix()
public void set_TagPrefix(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.TicketCompatibilityMode : Enum {
public int value__
public TicketCompatibilityMode Framework20
public TicketCompatibilityMode Framework40
}
public System.Web.Configuration.TraceDisplayMode : Enum {
public int value__
public TraceDisplayMode SortByTime
public TraceDisplayMode SortByCategory
}
public System.Web.Configuration.TraceSection : ConfigurationSection {
private ConfigurationProperty enabledProp
private ConfigurationProperty localOnlyProp
private ConfigurationProperty mostRecentProp
private ConfigurationProperty pageOutputProp
private ConfigurationProperty requestLimitProp
private ConfigurationProperty traceModeProp
private ConfigurationProperty writeToDiagnosticsTraceProp
private ConfigurationPropertyCollection properties
public bool Enabled
public bool LocalOnly
public bool MostRecent
public bool PageOutput
public int RequestLimit
public TraceDisplayMode TraceMode
public bool WriteToDiagnosticsTrace
protected internal ConfigurationPropertyCollection Properties
public bool get_Enabled()
public void set_Enabled(bool value)
public bool get_LocalOnly()
public void set_LocalOnly(bool value)
public bool get_MostRecent()
public void set_MostRecent(bool value)
public bool get_PageOutput()
public void set_PageOutput(bool value)
public int get_RequestLimit()
public void set_RequestLimit(int value)
public TraceDisplayMode get_TraceMode()
public void set_TraceMode(TraceDisplayMode value)
public bool get_WriteToDiagnosticsTrace()
public void set_WriteToDiagnosticsTrace(bool value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.TransformerInfo : ConfigurationElement {
private ConfigurationProperty nameProp
private ConfigurationProperty typeProp
private ConfigurationPropertyCollection properties
public string Name
public string Type
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name, string type)
public bool Equals(object o)
public int GetHashCode()
public string get_Name()
public void set_Name(string value)
public string get_Type()
public void set_Type(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.TransformerInfoCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public TransformerInfo Item
protected internal ConfigurationPropertyCollection Properties
public void Add(TransformerInfo transformerInfo)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public void Remove(string s)
public void RemoveAt(int index)
public TransformerInfo get_Item(int index)
public void set_Item(int index, TransformerInfo value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.TrustLevel : ConfigurationElement {
private ConfigurationProperty nameProp
private ConfigurationProperty policyFileProp
private ConfigurationPropertyCollection properties
public string Name
public string PolicyFile
protected internal ConfigurationPropertyCollection Properties
public void .ctor(string name, string policyFile)
public string get_Name()
public void set_Name(string value)
public string get_PolicyFile()
public void set_PolicyFile(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.TrustLevelCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public ConfigurationElementCollectionType CollectionType
protected string ElementName
public TrustLevel Item
public TrustLevel Item
protected bool ThrowOnDuplicate
protected internal ConfigurationPropertyCollection Properties
public void Add(TrustLevel trustLevel)
public void Clear()
public TrustLevel Get(int index)
public void Remove(TrustLevel trustLevel)
public void RemoveAt(int index)
public void Set(int index, TrustLevel trustLevel)
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
protected bool IsElementName(string elementname)
public ConfigurationElementCollectionType get_CollectionType()
protected string get_ElementName()
public TrustLevel get_Item(string key)
public TrustLevel get_Item(int index)
public void set_Item(int index, TrustLevel value)
protected bool get_ThrowOnDuplicate()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.TrustSection : ConfigurationSection {
private ConfigurationProperty levelProp
private ConfigurationProperty originUrlProp
private ConfigurationProperty processRequestInApplicationTrustProp
private ConfigurationPropertyCollection properties
public string Level
public string OriginUrl
public bool ProcessRequestInApplicationTrust
protected internal ConfigurationPropertyCollection Properties
public string HostSecurityPolicyResolverType
public bool LegacyCasModel
public string PermissionSetName
public string get_Level()
public void set_Level(string value)
public string get_OriginUrl()
public void set_OriginUrl(string value)
public bool get_ProcessRequestInApplicationTrust()
public void set_ProcessRequestInApplicationTrust(bool value)
protected internal ConfigurationPropertyCollection get_Properties()
public string get_HostSecurityPolicyResolverType()
public void set_HostSecurityPolicyResolverType(string value)
public bool get_LegacyCasModel()
public void set_LegacyCasModel(bool value)
public string get_PermissionSetName()
public void set_PermissionSetName(string value)
}
public System.Web.Configuration.UrlMapping : ConfigurationElement {
private ConfigurationProperty mappedUrlProp
private ConfigurationProperty urlProp
private ConfigurationPropertyCollection properties
public string MappedUrl
public string Url
protected internal ConfigurationPropertyCollection Properties
private void ValidateUrl(object value)
public void .ctor(string url, string mappedUrl)
public string get_MappedUrl()
internal void set_MappedUrl(string value)
public string get_Url()
internal void set_Url(string value)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.UrlMappingCollection : ConfigurationElementCollection {
private ConfigurationPropertyCollection properties
public String[] AllKeys
public UrlMapping Item
public UrlMapping Item
protected internal ConfigurationPropertyCollection Properties
public void Add(UrlMapping urlMapping)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public string GetKey(int index)
public void Remove(string name)
public void Remove(UrlMapping urlMapping)
public void RemoveAt(int index)
public String[] get_AllKeys()
public UrlMapping get_Item(int index)
public void set_Item(int index, UrlMapping value)
public UrlMapping get_Item(string name)
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.UrlMappingsSection : ConfigurationSection {
private ConfigurationProperty enabledProp
private ConfigurationProperty urlMappingsProp
private ConfigurationPropertyCollection properties
public bool IsEnabled
public UrlMappingCollection UrlMappings
protected internal ConfigurationPropertyCollection Properties
public bool get_IsEnabled()
public void set_IsEnabled(bool value)
public UrlMappingCollection get_UrlMappings()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.UserMapPath : object {
public void .ctor(ConfigurationFileMap fileMap)
public string GetAppPathForPath(string siteID, string path)
public void GetDefaultSiteNameAndID(String& siteName, String& siteID)
public string GetMachineConfigFilename()
public void GetPathConfigFilename(string siteID, string path, String& directory, String& baseName)
public string GetRootWebConfigFilename()
public string MapPath(string siteID, string path)
public void ResolveSiteArgument(string siteArgument, String& siteName, String& siteID)
}
internal System.Web.Configuration.VersionConverter : ConfigurationConverterBase {
private Version minVersion
private string exceptionText
public void .ctor(int minMajor, int minMinor, string exceptionText)
public object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data)
public object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type)
}
public System.Web.Configuration.VirtualDirectoryMapping : object {
private string physicalDirectory
private bool isAppRoot
private string configFileBaseName
private string virtualDirectory
public string ConfigFileBaseName
public bool IsAppRoot
public string PhysicalDirectory
public string VirtualDirectory
public void .ctor(string physicalDirectory, bool isAppRoot)
public void .ctor(string physicalDirectory, bool isAppRoot, string configFileBaseName)
internal void SetVirtualDirectory(string dir)
public string get_ConfigFileBaseName()
public void set_ConfigFileBaseName(string value)
public bool get_IsAppRoot()
public void set_IsAppRoot(bool value)
public string get_PhysicalDirectory()
public void set_PhysicalDirectory(string value)
public string get_VirtualDirectory()
}
public System.Web.Configuration.VirtualDirectoryMappingCollection : NameObjectCollectionBase {
public ICollection AllKeys
public VirtualDirectoryMapping Item
public VirtualDirectoryMapping Item
public void Add(string virtualDirectory, VirtualDirectoryMapping mapping)
public void Clear()
public void CopyTo(VirtualDirectoryMapping[] array, int index)
public VirtualDirectoryMapping Get(int index)
public VirtualDirectoryMapping Get(string virtualDirectory)
public string GetKey(int index)
public void Remove(string virtualDirectory)
public void RemoveAt(int index)
public ICollection get_AllKeys()
public VirtualDirectoryMapping get_Item(int index)
public VirtualDirectoryMapping get_Item(string virtualDirectory)
}
internal System.Web.Configuration.Web20DefaultConfig : object {
private Web20DefaultConfig instance
public Web20DefaultConfig GetInstance()
public object GetConfig(string sectionName)
public void Init()
}
public System.Web.Configuration.WebApplicationLevel : Enum {
public int value__
public WebApplicationLevel AboveApplication
public WebApplicationLevel AtApplication
public WebApplicationLevel BelowApplication
}
public System.Web.Configuration.WebConfigurationFileMap : ConfigurationFileMap {
private VirtualDirectoryMappingCollection virtualDirectories
public VirtualDirectoryMappingCollection VirtualDirectories
public VirtualDirectoryMappingCollection get_VirtualDirectories()
public object Clone()
public void .ctor(string machineConfigFileName)
}
internal System.Web.Configuration.WebConfigurationHost : object {
private WebConfigurationFileMap map
private string MachinePath
private string MachineWebPath
private string appVirtualPath
public bool SupportsChangeNotifications
public bool SupportsLocation
public bool SupportsPath
public bool SupportsRefresh
public bool IsRemote
public object CreateConfigurationContext(string configPath, string locationSubPath)
public object CreateDeprecatedConfigContext(string configPath)
public string DecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedSection)
public void DeleteStream(string streamName)
public string EncryptSection(string clearXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedSection)
public string GetConfigPathFromLocationSubPath(string configPath, string locationSubPath)
public Type GetConfigType(string typeName, bool throwOnError)
public string GetConfigTypeName(Type t)
public void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady)
public string GetStreamName(string configPath)
public string GetStreamNameForConfigSource(string streamName, string configSource)
public object GetStreamVersion(string streamName)
public IDisposable Impersonate()
public void Init(IInternalConfigRoot root, Object[] hostInitParams)
public void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot root, Object[] hostInitConfigurationParams)
public string MapPath(string virtualPath)
public string NormalizeVirtualPath(string virtualPath)
public string MapPathFromMapper(string virtualPath)
internal string GetWebConfigFileName(string dir)
public bool IsAboveApplication(string configPath)
public bool IsConfigRecordRequired(string configPath)
public bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition)
internal bool IsApplication(string strPath)
public bool IsFile(string streamName)
public bool IsLocationApplicable(string configPath)
public Stream OpenStreamForRead(string streamName)
public Stream OpenStreamForRead(string streamName, bool assertPermissions)
public Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext)
public Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext, bool assertPermissions)
public bool PrefetchAll(string configPath, string streamName)
public bool PrefetchSection(string sectionGroupName, string sectionName)
public void RequireCompleteInit(IInternalConfigRecord configRecord)
public object StartMonitoringStreamForChanges(string streamName, StreamChangeCallback callback)
public void StopMonitoringStreamForChanges(string streamName, StreamChangeCallback callback)
public void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo)
public void WriteCompleted(string streamName, bool success, object writeContext)
public void WriteCompleted(string streamName, bool success, object writeContext, bool assertPermissions)
public bool get_SupportsChangeNotifications()
public bool get_SupportsLocation()
public bool get_SupportsPath()
public bool get_SupportsRefresh()
public bool get_IsRemote()
public bool IsFullTrustSectionWithoutAptcaAllowed(IInternalConfigRecord configRecord)
public bool IsInitDelayed(IInternalConfigRecord configRecord)
public bool IsSecondaryRoot(string configPath)
public bool IsTrustedConfigPath(string configPath)
}
public System.Web.Configuration.WebConfigurationManager : object {
private int SAVE_LOCATIONS_CHECK_INTERVAL
private int SECTION_CACHE_LOCK_TIMEOUT
private Char[] pathTrimChars
private object suppressAppReloadLock
private object saveLocationsCacheLock
private object getSectionLock
private ReaderWriterLockSlim sectionCacheLock
private IInternalConfigConfigurationFactory configFactory
private Hashtable configurations
private Hashtable configPaths
private bool suppressAppReload
private Dictionary`2<string, DateTime> saveLocationsCache
private Timer saveLocationsTimer
private ArrayList extra_assemblies
private int DEFAULT_SECTION_CACHE_SIZE
private string CACHE_SIZE_OVERRIDING_KEY
private LruCache`2<int, object> sectionCache
internal IConfigurationSystem oldConfig
private Web20DefaultConfig config
private BindingFlags privStatic
private object lockobj
internal ArrayList ExtraAssemblies
public NameValueCollection AppSettings
public ConnectionStringSettingsCollection ConnectionStrings
internal IInternalConfigConfigurationFactory ConfigurationFactory
internal ArrayList get_ExtraAssemblies()
private void ReenableWatcherOnConfigLocation(object state)
private void ConfigurationSaveHandler(Configuration sender, ConfigurationSaveEventArgs args)
public Configuration OpenMachineConfiguration()
public Configuration OpenMachineConfiguration(string locationSubPath)
public Configuration OpenMachineConfiguration(string locationSubPath, string server)
public Configuration OpenMachineConfiguration(string locationSubPath, string server, IntPtr userToken)
public Configuration OpenMachineConfiguration(string locationSubPath, string server, string userName, string password)
public Configuration OpenWebConfiguration(string path)
public Configuration OpenWebConfiguration(string path, string site)
public Configuration OpenWebConfiguration(string path, string site, string locationSubPath)
public Configuration OpenWebConfiguration(string path, string site, string locationSubPath, string server)
public Configuration OpenWebConfiguration(string path, string site, string locationSubPath, string server, IntPtr userToken)
public Configuration OpenWebConfiguration(string path, string site, string locationSubPath, string server, string userName, string password)
private Configuration OpenWebConfiguration(string path, string site, string locationSubPath, string server, string userName, string password, bool fweb)
public Configuration OpenMappedWebConfiguration(WebConfigurationFileMap fileMap, string path)
public Configuration OpenMappedWebConfiguration(WebConfigurationFileMap fileMap, string path, string site)
public Configuration OpenMappedWebConfiguration(WebConfigurationFileMap fileMap, string path, string site, string locationSubPath)
public Configuration OpenMappedMachineConfiguration(ConfigurationFileMap fileMap)
public Configuration OpenMappedMachineConfiguration(ConfigurationFileMap fileMap, string locationSubPath)
internal object SafeGetSection(string sectionName, Type configSectionType)
internal object SafeGetSection(string sectionName, string path, Type configSectionType)
public object GetSection(string sectionName)
public object GetSection(string sectionName, string path)
private bool LookUpLocation(string relativePath, Configuration& defaultConfiguration)
internal object GetSection(string sectionName, string path, HttpContext context)
private string MapPath(HttpRequest req, string virtualPath)
private string GetParentDir(string rootPath, string curPath)
internal string FindWebConfig(string path)
internal string FindWebConfig(string path, Boolean& inAnotherApp)
private string GetCurrentPath(HttpContext ctx)
internal bool SuppressAppReload(bool newValue)
internal void RemoveConfigurationFromCache(HttpContext ctx)
public object GetWebApplicationSection(string sectionName)
public NameValueCollection get_AppSettings()
public ConnectionStringSettingsCollection get_ConnectionStrings()
internal IInternalConfigConfigurationFactory get_ConfigurationFactory()
private void AddSectionToCache(int key, object section)
internal void Init()
}
public System.Web.Configuration.WebContext : object {
private WebApplicationLevel pathLevel
private string site
private string applicationPath
private string path
private string locationSubPath
public WebApplicationLevel ApplicationLevel
public string ApplicationPath
public string LocationSubPath
public string Path
public string Site
public void .ctor(WebApplicationLevel pathLevel, string site, string applicationPath, string path, string locationSubPath)
public WebApplicationLevel get_ApplicationLevel()
public string get_ApplicationPath()
public string get_LocationSubPath()
public string get_Path()
public string get_Site()
public void .ctor(WebApplicationLevel pathLevel, string site, string applicationPath, string path, string locationSubPath, string appConfigPath)
}
public System.Web.Configuration.WebControlsSection : ConfigurationSection {
private ConfigurationProperty clientScriptsLocationProp
private ConfigurationPropertyCollection properties
public string ClientScriptsLocation
protected internal ConfigurationPropertyCollection Properties
protected internal object GetRuntimeObject()
public string get_ClientScriptsLocation()
protected internal ConfigurationPropertyCollection get_Properties()
}
internal System.Web.Configuration.WebLevel : Enum {
public int value__
public WebLevel Machine
public WebLevel Path
}
public System.Web.Configuration.WebPartsPersonalization : ConfigurationElement {
private ConfigurationProperty authorizationProp
private ConfigurationProperty defaultProviderProp
private ConfigurationProperty providersProp
private ConfigurationPropertyCollection properties
public WebPartsPersonalizationAuthorization Authorization
public string DefaultProvider
public ProviderSettingsCollection Providers
protected internal ConfigurationPropertyCollection Properties
public WebPartsPersonalizationAuthorization get_Authorization()
public string get_DefaultProvider()
public void set_DefaultProvider(string value)
public ProviderSettingsCollection get_Providers()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.WebPartsPersonalizationAuthorization : ConfigurationElement {
private ConfigurationProperty Prop
private ConfigurationPropertyCollection properties
public AuthorizationRuleCollection Rules
protected internal ConfigurationPropertyCollection Properties
public AuthorizationRuleCollection get_Rules()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.WebPartsSection : ConfigurationSection {
private ConfigurationProperty enableExportProp
private ConfigurationProperty personalizationProp
private ConfigurationProperty transformersProp
private ConfigurationPropertyCollection properties
public bool EnableExport
public WebPartsPersonalization Personalization
public TransformerInfoCollection Transformers
protected internal ConfigurationPropertyCollection Properties
protected internal object GetRuntimeObject()
public bool get_EnableExport()
public void set_EnableExport(bool value)
public WebPartsPersonalization get_Personalization()
public TransformerInfoCollection get_Transformers()
protected internal ConfigurationPropertyCollection get_Properties()
}
public System.Web.Configuration.XhtmlConformanceMode : Enum {
public int value__
public XhtmlConformanceMode Transitional
public XhtmlConformanceMode Legacy
public XhtmlConformanceMode Strict
}
public System.Web.Configuration.XhtmlConformanceSection : ConfigurationSection {
private ConfigurationProperty modeProp
private ConfigurationPropertyCollection properties
public XhtmlConformanceMode Mode
protected internal ConfigurationPropertyCollection Properties
public XhtmlConformanceMode get_Mode()
public void set_Mode(XhtmlConformanceMode value)
protected internal ConfigurationPropertyCollection get_Properties()
}
internal System.Web.ControlTraceData : object {
public string ControlId
public Type Type
public int RenderSize
public int ViewstateSize
public int Depth
public int ControlstateSize
public void .ctor(string controlId, Type type, int renderSize, int viewstateSize, int controlstateSize, int depth)
}
internal System.Web.CookieFlags : Enum {
public byte value__
public CookieFlags Secure
public CookieFlags HttpOnly
}
internal System.Web.DefaultExceptionPageTemplate : ExceptionPageTemplate {
public void Init()
}
public System.Web.DefaultHttpHandler : object {
private NameValueCollection executeUrlHeaders
private HttpContext <Context>k__BackingField
protected HttpContext Context
public bool IsReusable
protected NameValueCollection ExecuteUrlHeaders
protected HttpContext get_Context()
private void set_Context(HttpContext value)
public bool get_IsReusable()
protected NameValueCollection get_ExecuteUrlHeaders()
public IAsyncResult BeginProcessRequest(HttpContext context, AsyncCallback callback, object state)
public void EndProcessRequest(IAsyncResult result)
public void ProcessRequest(HttpContext context)
public void OnExecuteUrlPreconditionFailure()
public string OverrideExecuteUrlPath()
}
internal System.Web.DynamicModuleInfo : ValueType {
public string Name
public Type Type
public void .ctor(Type type, string name)
}
internal System.Web.DynamicModuleManager : object {
private string moduleNameFormat
private List`1<DynamicModuleInfo> entries
private bool entriesAreReadOnly
private object mutex
public void Add(Type moduleType)
public ICollection`1<DynamicModuleInfo> LockAndGetModules()
}
public System.Web.EndEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IAsyncResult ar)
public IAsyncResult BeginInvoke(IAsyncResult ar, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.EventHandlerTaskAsyncHelper : object {
private TaskEventHandler taskEventHandler
private BeginEventHandler beginEventHandler
private EndEventHandler endEventHandler
public BeginEventHandler BeginEventHandler
public EndEventHandler EndEventHandler
public BeginEventHandler get_BeginEventHandler()
public EndEventHandler get_EndEventHandler()
public void .ctor(TaskEventHandler handler)
private IAsyncResult GetAsyncResult(object sender, EventArgs e, AsyncCallback callback, object state)
}
internal System.Web.ExceptionPageTemplate : object {
public string Template_PageTopName
public string Template_PageBottomName
public string Template_PageStandardName
public string Template_PageCustomErrorDefaultName
public string Template_PageHtmlizedExceptionName
public string Template_PageTitleName
public string Template_ExceptionTypeName
public string Template_ExceptionMessageName
public string Template_DescriptionName
public string Template_DetailsName
public string Template_RuntimeVersionInformationName
public string Template_AspNetVersionInformationName
public string Template_StackTraceName
public string Template_FullStackTraceName
public string Template_HtmlizedExceptionOriginName
public string Template_HtmlizedExceptionShortSourceName
public string Template_HtmlizedExceptionLongSourceName
public string Template_HtmlizedExceptionSourceFileName
public string Template_HtmlizedExceptionErrorLinesName
public string Template_HtmlizedExceptionCompilerOutputName
private List`1<ExceptionPageTemplateFragment> fragments
public List`1<ExceptionPageTemplateFragment> Fragments
public List`1<ExceptionPageTemplateFragment> get_Fragments()
public void Init()
private void InitFragments(ExceptionPageTemplateValues values)
public string Render(ExceptionPageTemplateValues values, ExceptionPageTemplateType pageType)
public void Render(HttpResponse response, ExceptionPageTemplateValues values, ExceptionPageTemplateType pageType)
private void Render(ExceptionPageTemplateValues values, ExceptionPageTemplateType pageType, Action`1<string> writer)
}
internal System.Web.ExceptionPageTemplateFragment : object {
private string <Name>k__BackingField
private string <FilePath>k__BackingField
private string <ResourceName>k__BackingField
private string <ResourceAssembly>k__BackingField
private List`1<string> <MacroNames>k__BackingField
private List`1<string> <RequiredMacros>k__BackingField
private string <Value>k__BackingField
private ExceptionPageTemplateType <ValidForPageType>k__BackingField
public string Name
public string FilePath
public string ResourceName
public string ResourceAssembly
public List`1<string> MacroNames
public List`1<string> RequiredMacros
public string Value
public ExceptionPageTemplateType ValidForPageType
public string get_Name()
public void set_Name(string value)
public string get_FilePath()
public void set_FilePath(string value)
public string get_ResourceName()
public void set_ResourceName(string value)
public string get_ResourceAssembly()
public void set_ResourceAssembly(string value)
public List`1<string> get_MacroNames()
public void set_MacroNames(List`1<string> value)
public List`1<string> get_RequiredMacros()
public void set_RequiredMacros(List`1<string> value)
public string get_Value()
public void set_Value(string value)
public ExceptionPageTemplateType get_ValidForPageType()
public void set_ValidForPageType(ExceptionPageTemplateType value)
public void Init(ExceptionPageTemplateValues values)
public bool Visible(ExceptionPageTemplateValues values)
public string ReplaceMacros(string value, ExceptionPageTemplateValues values)
protected string LoadFile(string path)
protected string LoadResource(string resourceName)
}
internal System.Web.ExceptionPageTemplateFragmentValue : object {
private Func`2<string, string> valueProvider
private string value
private string name
public string Value
public string get_Value()
public void .ctor(string name, Func`2<string, string> valueProvider)
public void .ctor(string name, string value)
}
internal System.Web.ExceptionPageTemplateType : Enum {
public int value__
public ExceptionPageTemplateType Standard
public ExceptionPageTemplateType CustomErrorDefault
public ExceptionPageTemplateType Htmlized
public ExceptionPageTemplateType SourceError
public ExceptionPageTemplateType CompilerOutput
public ExceptionPageTemplateType Any
}
internal System.Web.ExceptionPageTemplateValues : object {
private Dictionary`2<string, ExceptionPageTemplateFragmentValue> values
private Dictionary`2<string, ExceptionPageTemplateFragmentValue> Values
public int Count
private Dictionary`2<string, ExceptionPageTemplateFragmentValue> get_Values()
public int get_Count()
public string Get(string name)
public void Add(string name, Func`2<string, string> valueProvider)
public void Add(string name, string value)
}
internal System.Web.FlagEnd : object {
public object Value
}
public System.Web.Globalization.IStringLocalizerProvider {
public string GetLocalizedString(CultureInfo culture, string name, Object[] arguments)
}
public System.Web.Globalization.ResourceFileStringLocalizerProvider : object {
public string ResourceFileName
public string GetLocalizedString(CultureInfo culture, string name, Object[] arguments)
}
public System.Web.Globalization.StringLocalizerProviders : object {
public IStringLocalizerProvider DataAnnotationStringLocalizerProvider
public IStringLocalizerProvider get_DataAnnotationStringLocalizerProvider()
public void set_DataAnnotationStringLocalizerProvider(IStringLocalizerProvider value)
}
internal System.Web.GlobalPerfCounter : Enum {
public int value__
public GlobalPerfCounter APPLICATION_RESTARTS
public GlobalPerfCounter APPLICATIONS_RUNNING
public GlobalPerfCounter REQUESTS_DISCONNECTED
public GlobalPerfCounter REQUEST_EXECUTION_TIME
public GlobalPerfCounter REQUESTS_REJECTED
public GlobalPerfCounter REQUESTS_QUEUED
public GlobalPerfCounter WPS_RUNNING
public GlobalPerfCounter WPS_RESTARTS
public GlobalPerfCounter REQUEST_WAIT_TIME
public GlobalPerfCounter STATE_SERVER_SESSIONS_ACTIVE
public GlobalPerfCounter STATE_SERVER_SESSIONS_ABANDONED
public GlobalPerfCounter STATE_SERVER_SESSIONS_TIMED_OUT
public GlobalPerfCounter STATE_SERVER_SESSIONS_TOTAL
public GlobalPerfCounter REQUESTS_CURRENT
public GlobalPerfCounter GLOBAL_AUDIT_SUCCESS
public GlobalPerfCounter GLOBAL_AUDIT_FAIL
public GlobalPerfCounter GLOBAL_EVENTS_ERROR
public GlobalPerfCounter GLOBAL_EVENTS_HTTP_REQ_ERROR
public GlobalPerfCounter GLOBAL_EVENTS_HTTP_INFRA_ERROR
public GlobalPerfCounter REQUESTS_IN_NATIVE_QUEUE
}
public System.Web.Handlers.AssemblyResourceLoader : object {
private string HandlerFileName
private Assembly currAsm
private char QueryParamSeparator
private Dictionary`2<string, AssemblyEmbeddedResources> _embeddedResources
private ReaderWriterLockSlim _embeddedResourcesLock
private ReaderWriterLockSlim _stringHashCacheLock
private Dictionary`2<string, string> stringHashCache
private KeyedHashAlgorithm hashAlg
private bool canReuseHashAlg
private KeyedHashAlgorithm ReusableHashAlgorithm
private bool System.Web.IHttpHandler.IsReusable
private KeyedHashAlgorithm get_ReusableHashAlgorithm()
private string GetStringHash(KeyedHashAlgorithm kha, string str)
private void InitEmbeddedResourcesUrls(KeyedHashAlgorithm kha, Assembly assembly, string assemblyName, string assemblyHash, AssemblyEmbeddedResources entry)
internal string GetResourceUrl(Type type, string resourceName)
private EmbeddedResource DecryptAssemblyResource(string val, AssemblyEmbeddedResources& entry)
private void GetAssemblyNameAndHashes(KeyedHashAlgorithm kha, Assembly assembly, string resourceName, String& assemblyName, String& assemblyNameHash, String& resourceNameHash)
private AssemblyEmbeddedResources GetAssemblyEmbeddedResource(KeyedHashAlgorithm kha, Assembly assembly, string assemblyNameHash, string assemblyName)
internal string GetResourceUrl(Assembly assembly, string resourceName, bool notifyScriptLoaded)
private string GetResourceUrl(KeyedHashAlgorithm kha, Assembly assembly, string resourceName, bool notifyScriptLoaded)
private string CreateResourceUrl(KeyedHashAlgorithm kha, string assemblyName, string assemblyNameHash, string assemblyPath, string resourceNameHash, bool debug, bool notifyScriptLoaded, bool includeTimeStamp)
private bool HasIfModifiedSince(HttpRequest request, DateTime& modified)
private void RespondWithNotModified(HttpContext context)
private void SendEmbeddedResource(HttpContext context, EmbeddedResource& res, Assembly& assembly)
private void System.Web.IHttpHandler.ProcessRequest(HttpContext context)
private bool System.Web.IHttpHandler.get_IsReusable()
}
public System.Web.Handlers.TraceHandler : object {
private bool System.Web.IHttpHandler.IsReusable
protected bool IsReusable
private void System.Web.IHttpHandler.ProcessRequest(HttpContext context)
protected void ProcessRequest(HttpContext context)
private bool System.Web.IHttpHandler.get_IsReusable()
protected bool get_IsReusable()
private void RenderMenu(TraceManager manager, HtmlTextWriter output, string dir)
private void RenderHeader(HtmlTextWriter output, string dir)
private void RenderItem(TraceManager manager, HtmlTextWriter output, int item)
protected void ShowDetails(DataSet data)
protected void ShowRequests(IList data)
protected void ShowVersionDetails()
}
internal System.Web.Handlers.TraceNotAvailableException : HttpException {
private bool notLocal
internal string Description
public void .ctor(bool notLocal)
internal string get_Description()
}
internal System.Web.HeadersCollection : BaseParamsCollection {
public void .ctor(HttpRequest request)
public void Add(string name, string value)
public void Set(string name, string value)
public void Remove(string name)
protected void InsertInfo()
protected string InternalGet(string name)
}
public System.Web.Hosting.AppDomainFactory : object {
public object Create(string module, string typeName, string appId, string appPath, string strUrlOfAppOrigin, int iZone)
}
public System.Web.Hosting.AppDomainInfo : object {
public string GetId()
public string GetPhysicalPath()
public int GetSiteId()
public string GetVirtualPath()
public bool IsIdle()
}
public System.Web.Hosting.AppDomainInfoEnum : object {
public int Count()
public IAppDomainInfo GetData()
public bool MoveNext()
public void Reset()
}
public System.Web.Hosting.AppDomainProtocolHandler : MarshalByRefObject {
public object InitializeLifetimeService()
public void StartListenerChannel(IListenerChannelCallback listenerChannelCallback)
public void StopListenerChannel(int listenerChannelId, bool immediate)
public void StopProtocol(bool immediate)
public void Stop(bool immediate)
}
public System.Web.Hosting.ApplicationHost : object {
private string DEFAULT_WEB_CONFIG_NAME
internal string MonoHostedDataKey
private object create_dir
internal string FindWebConfig(string basedir)
internal bool ClearDynamicBaseDirectory(string directory)
private bool CreateDirectory(string directory)
private string BuildPrivateBinPath(string physicalPath, String[] dirs)
public object CreateApplicationHost(Type hostType, string virtualDir, string physicalDir)
private void SetHostingEnvironment()
}
public System.Web.Hosting.ApplicationInfo : object {
private string id
private string physical_path
private string virtual_path
public string ID
public string PhysicalPath
public string VirtualPath
internal void .ctor(string id, string phys, string virt)
public string get_ID()
public string get_PhysicalPath()
public string get_VirtualPath()
}
public System.Web.Hosting.ApplicationManager : MarshalByRefObject {
private ApplicationManager instance
private int users
private Dictionary`2<string, BareApplicationHost> id_to_host
public void Close()
public IRegisteredObject CreateObject(IApplicationHost appHost, Type type)
public IRegisteredObject CreateObject(string appId, Type type, string virtualPath, string physicalPath, bool failIfExists)
public IRegisteredObject CreateObject(string appId, Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError)
internal BareApplicationHost CreateHostWithCheck(string appId, string vpath, string ppath)
private BareApplicationHost CreateHost(string appId, string vpath, string ppath)
internal void RemoveHost(string appId)
private IRegisteredObject CheckIfExists(BareApplicationHost host, Type type, bool failIfExists)
public ApplicationManager GetApplicationManager()
public IRegisteredObject GetObject(string appId, Type type)
public ApplicationInfo[] GetRunningApplications()
public object InitializeLifetimeService()
public bool IsIdle()
public void Open()
public void ShutdownAll()
public void ShutdownApplication(string appId)
public void StopObject(string appId, Type type)
public AppDomain GetAppDomain(string appId)
public AppDomain GetAppDomain(IApplicationHost appHost)
}
public System.Web.Hosting.ApplicationMonitors : object {
public IApplicationMonitor MemoryMonitor
public IApplicationMonitor get_MemoryMonitor()
public void set_MemoryMonitor(IApplicationMonitor value)
}
public System.Web.Hosting.AppManagerAppDomainFactory : object {
public object Create(string appId, string appPath)
public void Stop()
}
public System.Web.Hosting.AspNetMemoryMonitor : object {
public IObserver`1<LowPhysicalMemoryInfo> DefaultLowPhysicalMemoryObserver
public IObserver`1<RecycleLimitInfo> DefaultRecycleLimitObserver
public IObserver`1<LowPhysicalMemoryInfo> get_DefaultLowPhysicalMemoryObserver()
public void set_DefaultLowPhysicalMemoryObserver(IObserver`1<LowPhysicalMemoryInfo> value)
public IObserver`1<RecycleLimitInfo> get_DefaultRecycleLimitObserver()
public void set_DefaultRecycleLimitObserver(IObserver`1<RecycleLimitInfo> value)
public void Dispose()
public void Start()
public void Stop()
public IDisposable Subscribe(IObserver`1<LowPhysicalMemoryInfo> observer)
public IDisposable Subscribe(IObserver`1<RecycleLimitInfo> observer)
}
internal System.Web.Hosting.BackgroundWorkScheduler : object {
private CancellationTokenHelper _cancellationTokenHelper
private int _numExecutingWorkItems
private Action`1<BackgroundWorkScheduler> _unregisterCallback
private Action`2<AppDomain, Exception> _logCallback
private Action _workItemCompleteCallback
internal void .ctor(Action`1<BackgroundWorkScheduler> unregisterCallback, Action`2<AppDomain, Exception> logCallback, Action workItemCompleteCallback)
private void FinalShutdown()
private void RunWorkItemImpl(Func`2<CancellationToken, Task> workItem)
public void ScheduleWorkItem(Func`2<CancellationToken, Task> workItem)
public void Stop(bool immediate)
private void WorkItemComplete()
private void <ScheduleWorkItem>b__8_0(object state)
}
internal System.Web.Hosting.BareApplicationHost : MarshalByRefObject {
private string vpath
private string phys_path
private Dictionary`2<Type, RegisteredItem> hash
internal ApplicationManager Manager
internal string AppID
public string VirtualPath
public string PhysicalPath
public AppDomain Domain
private void Init()
public string get_VirtualPath()
public string get_PhysicalPath()
public AppDomain get_Domain()
public void Shutdown()
public void StopObject(Type type)
public IRegisteredObject CreateInstance(Type type)
public void RegisterObject(IRegisteredObject obj, bool auto_clean)
public bool UnregisterObject(IRegisteredObject obj)
public IRegisteredObject GetObject(Type type)
public string GetCodeGenDir()
private void OnDomainUnload(object sender, EventArgs args)
}
internal System.Web.Hosting.DefaultVirtualDirectory : VirtualDirectory {
private string phys_dir
private string virtual_dir
public IEnumerable Children
public IEnumerable Directories
public IEnumerable Files
internal void .ctor(string virtualPath)
private void Init()
private List`1<VirtualFileBase> AddDirectories(List`1<VirtualFileBase> list, string dir)
private List`1<VirtualFileBase> AddFiles(List`1<VirtualFileBase> list, string dir)
public IEnumerable get_Children()
public IEnumerable get_Directories()
public IEnumerable get_Files()
}
internal System.Web.Hosting.DefaultVirtualFile : VirtualFile {
internal void .ctor(string virtualPath)
public Stream Open()
}
internal System.Web.Hosting.DefaultVirtualPathProvider : VirtualPathProvider {
protected void Initialize()
public bool DirectoryExists(string virtualDir)
public bool FileExists(string virtualPath)
public CacheDependency GetCacheDependency(string virtualPath, IEnumerable virtualPathDependencies, DateTime utcStart)
public string GetCacheKey(string virtualPath)
public VirtualDirectory GetDirectory(string virtualDir)
public VirtualFile GetFile(string virtualPath)
public string GetFileHash(string virtualPath, IEnumerable virtualPathDependencies)
}
public System.Web.Hosting.HostingEnvironment : MarshalByRefObject {
private bool is_hosted
private string site_name
private ApplicationShutdownReason shutdown_reason
internal BareApplicationHost Host
private VirtualPathProvider vpath_provider
private int busy_count
private BackgroundWorkScheduler _backgroundWorkScheduler
private Task`1<object> _completedTask
private bool <HaveCustomVPP>k__BackingField
internal bool HaveCustomVPP
public string ApplicationID
public string ApplicationPhysicalPath
public string ApplicationVirtualPath
public Cache Cache
public Exception InitializationException
public bool IsHosted
public ApplicationShutdownReason ShutdownReason
public string SiteName
public VirtualPathProvider VirtualPathProvider
public bool InClientBuildManager
public IApplicationHost ApplicationHost
public ApplicationMonitors ApplicationMonitors
public bool IsDevelopmentEnvironment
public int MaxConcurrentRequestsPerCPU
public int MaxConcurrentThreadsPerCPU
internal bool get_HaveCustomVPP()
private void set_HaveCustomVPP(bool value)
public string get_ApplicationID()
public string get_ApplicationPhysicalPath()
public string get_ApplicationVirtualPath()
public Cache get_Cache()
public Exception get_InitializationException()
public bool get_IsHosted()
internal void set_IsHosted(bool value)
public ApplicationShutdownReason get_ShutdownReason()
public string get_SiteName()
internal void set_SiteName(string value)
public VirtualPathProvider get_VirtualPathProvider()
public bool get_InClientBuildManager()
public void DecrementBusyCount()
public IDisposable Impersonate()
public IDisposable Impersonate(IntPtr token)
public IDisposable Impersonate(IntPtr userToken, string virtualPath)
public void IncrementBusyCount()
public object InitializeLifetimeService()
public void InitiateShutdown()
public string MapPath(string virtualPath)
public void RegisterObject(IRegisteredObject obj)
public void RegisterVirtualPathProvider(VirtualPathProvider virtualPathProvider)
public IDisposable SetCultures(string virtualPath)
public IDisposable SetCultures()
public void UnregisterObject(IRegisteredObject obj)
public void QueueBackgroundWorkItem(Action`1<CancellationToken> workItem)
public void QueueBackgroundWorkItem(Func`2<CancellationToken, Task> workItem)
private void QueueBackgroundWorkItemInternal(Func`2<CancellationToken, Task> workItem)
private void WriteUnhandledException(AppDomain appDomain, Exception exception)
public IApplicationHost get_ApplicationHost()
public ApplicationMonitors get_ApplicationMonitors()
public bool get_IsDevelopmentEnvironment()
public int get_MaxConcurrentRequestsPerCPU()
public void set_MaxConcurrentRequestsPerCPU(int value)
public int get_MaxConcurrentThreadsPerCPU()
public void set_MaxConcurrentThreadsPerCPU(int value)
public void add_StopListening(EventHandler value)
public void remove_StopListening(EventHandler value)
public void MessageReceived()
}
internal System.Web.Hosting.HostingEnvironmentException : Exception {
private string _details
internal string Details
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
internal void .ctor(string message, string details)
internal string get_Details()
}
public System.Web.Hosting.HostSecurityPolicyResolver : object {
public HostSecurityPolicyResults ResolvePolicy(Evidence evidence)
}
public System.Web.Hosting.HostSecurityPolicyResults : Enum {
public int value__
public HostSecurityPolicyResults AppDomainTrust
public HostSecurityPolicyResults DefaultPolicy
public HostSecurityPolicyResults FullTrust
public HostSecurityPolicyResults Nothing
}
internal System.Web.Hosting.HTTP_COOKED_URL : ValueType {
internal ushort FullUrlLength
internal ushort HostLength
internal ushort AbsPathLength
internal ushort QueryStringLength
internal Char* pFullUrl
internal Char* pHost
internal Char* pAbsPath
internal Char* pQueryString
}
public System.Web.Hosting.IAdphManager {
public void StartAppDomainProtocolListenerChannel(string appId, string protocolId, IListenerChannelCallback listenerChannelCallback)
public void StopAppDomainProtocol(string appId, string protocolId, bool immediate)
public void StopAppDomainProtocolListenerChannel(string appId, string protocolId, int listenerChannelId, bool immediate)
}
public System.Web.Hosting.IAppDomainFactory {
public object Create(string module, string typeName, string appId, string appPath, string strUrlOfAppOrigin, int iZone)
}
public System.Web.Hosting.IAppDomainInfo {
public string GetId()
public string GetPhysicalPath()
public int GetSiteId()
public string GetVirtualPath()
public bool IsIdle()
}
public System.Web.Hosting.IAppDomainInfoEnum {
public int Count()
public IAppDomainInfo GetData()
public bool MoveNext()
public void Reset()
}
public System.Web.Hosting.IApplicationHost {
public string GetVirtualPath()
public string GetPhysicalPath()
public IConfigMapPathFactory GetConfigMapPathFactory()
public IntPtr GetConfigToken()
public string GetSiteName()
public string GetSiteID()
public void MessageReceived()
}
public System.Web.Hosting.IApplicationMonitor {
public void Start()
public void Stop()
}
public System.Web.Hosting.IApplicationPreloadManager {
public void SetApplicationPreloadState(string context, string appId, bool enabled)
public void SetApplicationPreloadUtil(IApplicationPreloadUtil preloadUtil)
}
public System.Web.Hosting.IApplicationPreloadUtil {
public void GetApplicationPreloadInfo(string context, Boolean& enabled, String& startupObjType, String[]& parametersForStartupObj)
public void ReportApplicationPreloadFailure(string context, int errorCode, string errorMessage)
}
public System.Web.Hosting.IAppManagerAppDomainFactory {
public object Create(string appId, string appPath)
public void Stop()
}
internal System.Web.Hosting.ICustomLoader {
public IObjectHandle LoadApplication(string appId, string appConfigPath, IProcessHostSupportFunctions supportFunctions, IntPtr pLoadAppData, int loadAppDataSize)
}
internal System.Web.Hosting.ICustomRuntime {
public void Start(IntPtr reserved0, int reserved1)
public void ResolveModules(IntPtr pResolveModuleData, int resolveModuleDataSize)
public void Stop(IntPtr reserved0, int reserved1)
}
internal System.Web.Hosting.ICustomRuntimeManager {
public ICustomRuntimeRegistrationToken Register(ICustomRuntime customRuntime)
}
internal System.Web.Hosting.ICustomRuntimeRegistrationToken {
public void Unregister()
}
public System.Web.Hosting.IISAPIRuntime {
public void DoGCCollect()
public int ProcessRequest(IntPtr ecb, int useProcessModel)
public void StartProcessing()
public void StopProcessing()
}
public System.Web.Hosting.IListenerChannelCallback {
public void ReportStarted()
public void ReportStopped(int hr)
public void ReportMessageReceived()
public int GetId()
public int GetBlobLength()
public void GetBlob(Byte[] buffer, Int32& bufferSize)
}
public System.Web.Hosting.IPphManager {
public void StartProcessProtocolListenerChannel(string protocolId, IListenerChannelCallback listenerChannelCallback)
public void StopProcessProtocol(string protocolId, bool immediate)
public void StopProcessProtocolListenerChannel(string protocolId, int listenerChannelId, bool immediate)
}
public System.Web.Hosting.IProcessHost {
public void EnumerateAppDomains(IAppDomainInfoEnum& appDomainInfoEnum)
public void Shutdown()
public void ShutdownApplication(string appId)
public void StartApplication(string appId, string appPath, Object& runtimeInterface)
}
public System.Web.Hosting.IProcessHostFactoryHelper {
public object GetProcessHost(IProcessHostSupportFunctions functions)
}
public System.Web.Hosting.IProcessHostIdleAndHealthCheck {
public bool IsIdle()
public void Ping(IProcessPingCallback callback)
}
public System.Web.Hosting.IProcessHostPreloadClient {
public void Preload(String[] parameters)
}
public System.Web.Hosting.IProcessHostSupportFunctions {
public void GetApplicationProperties(string appId, String& virtualPath, String& physicalPath, String& siteName, String& siteId)
public void MapPath(string appId, string virtualPath, String& physicalPath)
public IntPtr GetConfigToken(string appId)
public string GetAppHostConfigFilename()
public string GetRootWebConfigFilename()
public IntPtr GetNativeConfigurationSystem()
}
public System.Web.Hosting.IProcessPingCallback {
public void Respond()
}
internal System.Web.Hosting.IProcessResumeCallback {
public void Resume()
}
internal System.Web.Hosting.IProcessSuspendListener {
public IProcessResumeCallback Suspend()
}
public System.Web.Hosting.IRegisteredObject {
public void Stop(bool immediate)
}
public System.Web.Hosting.ISAPIRuntime : MarshalByRefObject {
public void DoGCCollect()
public int ProcessRequest(IntPtr ecb, int iWRType)
public void StartProcessing()
public void StopProcessing()
public object InitializeLifetimeService()
private void System.Web.Hosting.IRegisteredObject.Stop(bool immediate)
}
public System.Web.Hosting.IStopListeningRegisteredObject {
public void StopListening()
}
public System.Web.Hosting.ISuspendibleRegisteredObject {
public Action Suspend()
}
public System.Web.Hosting.LowPhysicalMemoryInfo : object {
public int CurrentPercentUsed
public int PercentLimit
public bool RequestGC
public void .ctor(int currentPercentUsed, int percentLimit)
public int get_CurrentPercentUsed()
public int get_PercentLimit()
public bool get_RequestGC()
public void set_RequestGC(bool value)
}
public System.Web.Hosting.LowPhysicalMemoryObserver : object {
public void OnCompleted()
public void OnError(Exception error)
public void OnNext(LowPhysicalMemoryInfo lowMemoryInfo)
}
public System.Web.Hosting.ProcessHost : MarshalByRefObject {
public void EnumerateAppDomains(IAppDomainInfoEnum& appDomainInfoEnum)
public bool IsIdle()
public void Ping(IProcessPingCallback callback)
public void SetApplicationPreloadState(string context, string appId, bool enabled)
public void SetApplicationPreloadUtil(IApplicationPreloadUtil applicationPreloadUtil)
public void Shutdown()
public void ShutdownApplication(string appId)
public void StartAppDomainProtocolListenerChannel(string appId, string protocolId, IListenerChannelCallback listenerChannelCallback)
public void StartApplication(string appId, string appPath, Object& runtimeInterface)
public void StartProcessProtocolListenerChannel(string protocolId, IListenerChannelCallback listenerChannelCallback)
public void StopAppDomainProtocol(string appId, string protocolId, bool immediate)
public void StopAppDomainProtocolListenerChannel(string appId, string protocolId, int listenerChannelId, bool immediate)
public void StopProcessProtocol(string protocolId, bool immediate)
public void StopProcessProtocolListenerChannel(string protocolId, int listenerChannelId, bool immediate)
}
public System.Web.Hosting.ProcessHostFactoryHelper : MarshalByRefObject {
public object GetProcessHost(IProcessHostSupportFunctions functions)
}
public System.Web.Hosting.ProcessProtocolHandler : MarshalByRefObject {
public void StartListenerChannel(IListenerChannelCallback listenerChannelCallback, IAdphManager AdphManager)
public void StopListenerChannel(int listenerChannelId, bool immediate)
public void StopProtocol(bool immediate)
}
public System.Web.Hosting.RecycleLimitInfo : object {
public long CurrentPrivateBytes
public long RecycleLimit
public bool RequestGC
public RecycleLimitNotificationFrequency TrimFrequency
public void .ctor(long currentPrivateBytes, long recycleLimit, RecycleLimitNotificationFrequency recycleLimitNearFrequency)
public long get_CurrentPrivateBytes()
public long get_RecycleLimit()
public bool get_RequestGC()
public void set_RequestGC(bool value)
public RecycleLimitNotificationFrequency get_TrimFrequency()
}
public System.Web.Hosting.RecycleLimitMonitor : MarshalByRefObject {
public void Dispose()
}
public System.Web.Hosting.RecycleLimitNotificationFrequency : Enum {
public int value__
public RecycleLimitNotificationFrequency High
public RecycleLimitNotificationFrequency Low
public RecycleLimitNotificationFrequency Medium
}
public System.Web.Hosting.RecycleLimitObserver : object {
public void OnCompleted()
public void OnError(Exception error)
public void OnNext(RecycleLimitInfo recycleLimitInfo)
}
internal System.Web.Hosting.RegisteredItem : object {
public IRegisteredObject Item
public bool AutoClean
public void .ctor(IRegisteredObject item, bool autoclean)
}
public System.Web.Hosting.SimpleWorkerRequest : HttpWorkerRequest {
private string page
private string query
private string app_virtual_dir
private string app_physical_dir
private string path_info
private TextWriter output
private bool hosted
private string raw_url
public string MachineConfigPath
public string MachineInstallDirectory
public string RootWebConfigPath
public void .ctor(string page, string query, TextWriter output)
public void .ctor(string appVirtualDir, string appPhysicalDir, string page, string query, TextWriter output)
private void InitializePaths()
public string get_MachineConfigPath()
public string get_MachineInstallDirectory()
public string get_RootWebConfigPath()
public void EndOfRequest()
public void FlushResponse(bool finalFlush)
public string GetAppPath()
public string GetAppPathTranslated()
public string GetFilePath()
public string GetFilePathTranslated()
public string GetHttpVerbName()
public string GetHttpVersion()
public string GetLocalAddress()
public int GetLocalPort()
public string GetPathInfo()
public string GetQueryString()
public string GetRawUrl()
public string GetRemoteAddress()
public int GetRemotePort()
public string GetServerVariable(string name)
public string GetUriPath()
public IntPtr GetUserToken()
public string MapPath(string path)
public void SendKnownResponseHeader(int index, string value)
public void SendResponseFromFile(IntPtr handle, long offset, long length)
public void SendResponseFromFile(string filename, long offset, long length)
public void SendResponseFromMemory(Byte[] data, int length)
public void SendStatus(int statusCode, string statusDescription)
public void SendUnknownResponseHeader(string name, string value)
}
public System.Web.Hosting.VirtualDirectory : VirtualFileBase {
public IEnumerable Children
public IEnumerable Directories
public IEnumerable Files
public bool IsDirectory
protected void .ctor(string virtualPath)
public IEnumerable get_Children()
public IEnumerable get_Directories()
public IEnumerable get_Files()
public bool get_IsDirectory()
}
public System.Web.Hosting.VirtualFile : VirtualFileBase {
public bool IsDirectory
protected void .ctor(string virtualPath)
public bool get_IsDirectory()
public Stream Open()
}
public System.Web.Hosting.VirtualFileBase : MarshalByRefObject {
private string vpath
public bool IsDirectory
public string Name
public string VirtualPath
internal void SetVirtualPath(string vpath)
public bool get_IsDirectory()
public string get_Name()
public string get_VirtualPath()
public object InitializeLifetimeService()
}
public System.Web.Hosting.VirtualPathProvider : MarshalByRefObject {
private VirtualPathProvider prev
protected internal VirtualPathProvider Previous
protected internal VirtualPathProvider get_Previous()
protected void Initialize()
internal void InitializeAndSetPrevious(VirtualPathProvider prev)
public string CombineVirtualPaths(string basePath, string relativePath)
public bool DirectoryExists(string virtualDir)
public bool FileExists(string virtualPath)
public CacheDependency GetCacheDependency(string virtualPath, IEnumerable virtualPathDependencies, DateTime utcStart)
public string GetCacheKey(string virtualPath)
public VirtualDirectory GetDirectory(string virtualDir)
public VirtualFile GetFile(string virtualPath)
public string GetFileHash(string virtualPath, IEnumerable virtualPathDependencies)
public object InitializeLifetimeService()
public Stream OpenFile(string virtualPath)
}
internal System.Web.HtmlizedException : HttpException {
public string Title
public string Description
public string ErrorMessage
public string FileName
public string SourceFile
public string FileText
public Int32[] ErrorLines
public bool ErrorLinesPaired
protected void .ctor(SerializationInfo info, StreamingContext context)
protected void .ctor(string message)
protected void .ctor(string message, Exception inner)
public string get_Title()
public string get_Description()
public string get_ErrorMessage()
public string get_FileName()
public string get_SourceFile()
public string get_FileText()
public Int32[] get_ErrorLines()
public bool get_ErrorLinesPaired()
}
public System.Web.HtmlString : object {
private string _htmlString
public void .ctor(string value)
public string ToHtmlString()
public string ToString()
}
public System.Web.HttpApplication : object {
private object disposedEvent
private object errorEvent
internal PerformanceCounter requests_total_counter
internal String[] BinDirs
private object this_lock
private HttpContext context
private HttpSessionState session
private ISite isite
private HttpModuleCollection modreq(System.Runtime.CompilerServices.IsVolatile) modcoll
private string assemblyLocation
private IHttpHandlerFactory factory
private bool autoCulture
private bool autoUICulture
private bool stop_processing
private bool in_application_start
private IEnumerator pipeline
private ManualResetEvent done
private AsyncRequestState begin_iar
private AsyncInvoker current_ai
private EventHandlerList events
private EventHandlerList nonApplicationEvents
private CultureInfo app_culture
private CultureInfo appui_culture
private CultureInfo prev_app_culture
private CultureInfo prev_appui_culture
private IPrincipal prev_user
private string binDirectory
private Exception modreq(System.Runtime.CompilerServices.IsVolatile) initialization_exception
private bool removeConfigurationFromCache
private bool fullInitComplete
private DynamicModuleManager dynamicModuleManeger
private bool must_yield
private bool in_begin
private object PreSendRequestHeadersEvent
private object PreSendRequestContentEvent
private object AcquireRequestStateEvent
private object AuthenticateRequestEvent
private object AuthorizeRequestEvent
private object BeginRequestEvent
private object EndRequestEvent
private object PostRequestHandlerExecuteEvent
private object PreRequestHandlerExecuteEvent
private object ReleaseRequestStateEvent
private object ResolveRequestCacheEvent
private object UpdateRequestCacheEvent
private object PostAuthenticateRequestEvent
private object PostAuthorizeRequestEvent
private object PostResolveRequestCacheEvent
private object PostMapRequestHandlerEvent
private object PostAcquireRequestStateEvent
private object PostReleaseRequestStateEvent
private object PostUpdateRequestCacheEvent
private object LogRequestEvent
private object MapRequestHandlerEvent
private object PostLogRequestEvent
private EventHandler DefaultAuthentication
private Tim tim
private string HANDLER_CACHE
internal bool InApplicationStart
internal string AssemblyLocation
internal Exception InitializationException
public HttpApplicationState Application
public HttpContext Context
protected EventHandlerList Events
public HttpModuleCollection Modules
public HttpRequest Request
public HttpResponse Response
public HttpServerUtility Server
public HttpSessionState Session
public ISite Site
public IPrincipal User
internal bool RequestCompleted
private bool System.Web.IHttpHandler.IsReusable
internal string BinDirectory
internal String[] BinDirectoryAssemblies
public void add_Disposed(EventHandler value)
public void remove_Disposed(EventHandler value)
public void add_Error(EventHandler value)
public void remove_Error(EventHandler value)
internal void InitOnce(bool full_init)
internal bool get_InApplicationStart()
internal void set_InApplicationStart(bool value)
internal string get_AssemblyLocation()
internal Exception get_InitializationException()
public HttpApplicationState get_Application()
public HttpContext get_Context()
protected EventHandlerList get_Events()
public HttpModuleCollection get_Modules()
public HttpRequest get_Request()
public HttpResponse get_Response()
public HttpServerUtility get_Server()
public HttpSessionState get_Session()
public ISite get_Site()
public void set_Site(ISite value)
public IPrincipal get_User()
public void add_PreSendRequestHeaders(EventHandler value)
public void remove_PreSendRequestHeaders(EventHandler value)
internal void TriggerPreSendRequestHeaders()
public void add_PreSendRequestContent(EventHandler value)
public void remove_PreSendRequestContent(EventHandler value)
internal void TriggerPreSendRequestContent()
public void add_AcquireRequestState(EventHandler value)
public void remove_AcquireRequestState(EventHandler value)
public void AddOnAcquireRequestStateAsync(BeginEventHandler bh, EndEventHandler eh)
public void add_AuthenticateRequest(EventHandler value)
public void remove_AuthenticateRequest(EventHandler value)
public void AddOnAuthenticateRequestAsync(BeginEventHandler bh, EndEventHandler eh)
public void add_AuthorizeRequest(EventHandler value)
public void remove_AuthorizeRequest(EventHandler value)
public void AddOnAuthorizeRequestAsync(BeginEventHandler bh, EndEventHandler eh)
public void add_BeginRequest(EventHandler value)
public void remove_BeginRequest(EventHandler value)
public void AddOnBeginRequestAsync(BeginEventHandler bh, EndEventHandler eh)
public void add_EndRequest(EventHandler value)
public void remove_EndRequest(EventHandler value)
public void AddOnEndRequestAsync(BeginEventHandler bh, EndEventHandler eh)
public void add_PostRequestHandlerExecute(EventHandler value)
public void remove_PostRequestHandlerExecute(EventHandler value)
public void AddOnPostRequestHandlerExecuteAsync(BeginEventHandler bh, EndEventHandler eh)
public void add_PreRequestHandlerExecute(EventHandler value)
public void remove_PreRequestHandlerExecute(EventHandler value)
public void AddOnPreRequestHandlerExecuteAsync(BeginEventHandler bh, EndEventHandler eh)
public void add_ReleaseRequestState(EventHandler value)
public void remove_ReleaseRequestState(EventHandler value)
public void AddOnReleaseRequestStateAsync(BeginEventHandler bh, EndEventHandler eh)
public void add_ResolveRequestCache(EventHandler value)
public void remove_ResolveRequestCache(EventHandler value)
public void AddOnResolveRequestCacheAsync(BeginEventHandler bh, EndEventHandler eh)
public void add_UpdateRequestCache(EventHandler value)
public void remove_UpdateRequestCache(EventHandler value)
public void AddOnUpdateRequestCacheAsync(BeginEventHandler bh, EndEventHandler eh)
public void add_PostAuthenticateRequest(EventHandler value)
public void remove_PostAuthenticateRequest(EventHandler value)
public void AddOnPostAuthenticateRequestAsync(BeginEventHandler bh, EndEventHandler eh)
public void AddOnPostAuthenticateRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void add_PostAuthorizeRequest(EventHandler value)
public void remove_PostAuthorizeRequest(EventHandler value)
public void AddOnPostAuthorizeRequestAsync(BeginEventHandler bh, EndEventHandler eh)
public void AddOnPostAuthorizeRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void add_PostResolveRequestCache(EventHandler value)
public void remove_PostResolveRequestCache(EventHandler value)
public void AddOnPostResolveRequestCacheAsync(BeginEventHandler bh, EndEventHandler eh)
public void AddOnPostResolveRequestCacheAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void add_PostMapRequestHandler(EventHandler value)
public void remove_PostMapRequestHandler(EventHandler value)
public void AddOnPostMapRequestHandlerAsync(BeginEventHandler bh, EndEventHandler eh)
public void AddOnPostMapRequestHandlerAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void add_PostAcquireRequestState(EventHandler value)
public void remove_PostAcquireRequestState(EventHandler value)
public void AddOnPostAcquireRequestStateAsync(BeginEventHandler bh, EndEventHandler eh)
public void AddOnPostAcquireRequestStateAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void add_PostReleaseRequestState(EventHandler value)
public void remove_PostReleaseRequestState(EventHandler value)
public void AddOnPostReleaseRequestStateAsync(BeginEventHandler bh, EndEventHandler eh)
public void AddOnPostReleaseRequestStateAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void add_PostUpdateRequestCache(EventHandler value)
public void remove_PostUpdateRequestCache(EventHandler value)
public void AddOnPostUpdateRequestCacheAsync(BeginEventHandler bh, EndEventHandler eh)
public void AddOnPostUpdateRequestCacheAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void AddOnAcquireRequestStateAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void AddOnAuthenticateRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void AddOnAuthorizeRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void AddOnBeginRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void AddOnEndRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void AddOnPostRequestHandlerExecuteAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void AddOnPreRequestHandlerExecuteAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void AddOnReleaseRequestStateAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void AddOnResolveRequestCacheAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void AddOnUpdateRequestCacheAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void add_LogRequest(EventHandler value)
public void remove_LogRequest(EventHandler value)
public void AddOnLogRequestAsync(BeginEventHandler bh, EndEventHandler eh)
public void AddOnLogRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void add_MapRequestHandler(EventHandler value)
public void remove_MapRequestHandler(EventHandler value)
public void AddOnMapRequestHandlerAsync(BeginEventHandler bh, EndEventHandler eh)
public void AddOnMapRequestHandlerAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
public void add_PostLogRequest(EventHandler value)
public void remove_PostLogRequest(EventHandler value)
public void AddOnPostLogRequestAsync(BeginEventHandler bh, EndEventHandler eh)
public void AddOnPostLogRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
internal void add_DefaultAuthentication(EventHandler value)
internal void remove_DefaultAuthentication(EventHandler value)
private void AddEventHandler(object key, EventHandler handler)
private void RemoveEventHandler(object key, EventHandler handler)
public void CompleteRequest()
internal void set_RequestCompleted(bool value)
internal void DisposeInternal()
public void Dispose()
public string GetOutputCacheProviderName(HttpContext context)
public string GetVaryByCustomString(HttpContext context, string custom)
private bool ShouldHandleException(Exception e)
internal void ProcessError(Exception e)
internal void Tick()
private void Resume()
private void async_callback_completed_cb(IAsyncResult ar)
private void async_handler_complete_cb(IAsyncResult ar)
private IEnumerable RunHooks(Delegate list)
private void FinalErrorWrite(HttpResponse response, string error)
private void OutputPage()
private void PipelineDone()
private void StartTimer(string name)
private void StopTimer()
private IEnumerator Pipeline()
internal CultureInfo GetThreadCulture(HttpRequest request, CultureInfo culture, bool isAuto)
private void PreStart()
private void PostDone()
private void Start(object x)
internal Hashtable GetHandlerCache()
internal void ClearHandlerCache()
private object LocateHandler(HttpRequest req, string verb, string url)
internal IHttpHandler GetHandler(HttpContext context, string url)
internal IHttpHandler GetHandler(HttpContext context, string url, bool ignoreContextHandler)
private void System.Web.IHttpHandler.ProcessRequest(HttpContext context)
internal void SetContext(HttpContext context)
internal void SetSession(HttpSessionState session)
private IAsyncResult System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData)
private void System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult result)
public void Init()
private bool System.Web.IHttpHandler.get_IsReusable()
public void RegisterModule(Type moduleType)
private HttpModuleCollection CreateDynamicModules()
private IHttpModule CreateModuleInstance(Type type)
internal void ClearError()
private bool RedirectErrorPage(string error_page)
private bool RedirectCustomError(HttpException& httpEx)
internal string get_BinDirectory()
internal String[] get_BinDirectoryAssemblies()
internal Type LoadType(string typeName)
internal Type LoadType(string typeName, bool throwOnMissing)
internal Type LoadType(string typeName, bool throwOnMissing)
internal Type LoadTypeFromBin(string typeName)
private void <System.Web.IHttpAsyncHandler.BeginProcessRequest>b__239_0(object x)
public void add_RequestCompleted(EventHandler value)
public void remove_RequestCompleted(EventHandler value)
public void OnExecuteRequestStep(Action`2<HttpContextBase, Action> callback)
}
internal System.Web.HttpApplicationFactory : object {
private object this_lock
private HttpApplicationFactory theFactory
private object session_end
private bool needs_init
private bool app_start_needed
private bool have_app_events
private Type app_type
private HttpApplicationState app_state
private Hashtable app_event_handlers
private ArrayList watchers
private object watchers_lock
private bool app_shutdown
private bool app_disabled
private String[] app_browsers_files
private String[] default_machine_browsers_files
private String[] app_mono_machine_browsers_files
private Stack available
private object next_free
private Stack available_for_end
private Build capabilities_processor
private object capabilities_processor_lock
internal HttpApplicationState ApplicationState
internal Type AppType
internal bool ContextAvailable
internal bool ApplicationDisabled
internal String[] AppBrowsersFiles
internal ICapabilitiesProcess CapabilitiesProcessor
private bool IsEventHandler(MethodInfo m)
private void AddEvent(MethodInfo method, Hashtable appTypeEventHandlers)
private ArrayList GetMethodsDeep(Type type)
private Hashtable GetApplicationTypeEvents(Type type)
private Hashtable GetApplicationTypeEvents(HttpApplication app)
private bool FireEvent(string method_name, object target, Object[] args)
private HttpApplication FireOnAppStart(HttpContext context)
private void FireOnAppEnd()
public void Dispose()
private FileSystemWatcher CreateWatcher(string file, FileSystemEventHandler hnd, RenamedEventHandler reh)
internal void AttachEvents(HttpApplication app)
private void AddHandler(EventInfo evt, object target, HttpApplication app, MethodInfo method)
internal void InvokeSessionEnd(object state)
internal void InvokeSessionEnd(object state, object source, EventArgs e)
private HttpStaticObjectsCollection MakeStaticCollection(ArrayList list)
internal HttpApplicationState get_ApplicationState()
internal Type get_AppType()
private void InitType(HttpContext context)
internal HttpApplication GetApplication(HttpContext context)
private HttpApplication GetApplicationForSessionEnd()
internal void RecycleForSessionEnd(HttpApplication app)
internal void Recycle(HttpApplication app)
internal bool get_ContextAvailable()
internal bool WatchLocationForRestart(string filter)
internal bool WatchLocationForRestart(string virtualPath, string filter)
internal bool WatchLocationForRestart(string virtualPath, string filter, bool watchSubdirs)
internal bool get_ApplicationDisabled()
internal void set_ApplicationDisabled(bool value)
internal String[] get_AppBrowsersFiles()
internal ICapabilitiesProcess get_CapabilitiesProcessor()
internal void DisableWatchers()
internal void DisableWatcher(string virtualPath, string filter)
internal void EnableWatcher(string virtualPath, string filter)
private void EnableWatcherEvents(string virtualPath, string filter, bool enable)
internal void EnableWatchers()
private void OnFileRenamed(object sender, RenamedEventArgs args)
private void OnFileChanged(object sender, FileSystemEventArgs args)
}
public System.Web.HttpApplicationState : NameObjectCollectionBase {
private HttpStaticObjectsCollection _AppObjects
private HttpStaticObjectsCollection _SessionObjects
private ReaderWriterLockSlim _Lock
private bool IsLockHeld
public String[] AllKeys
public HttpApplicationState Contents
public int Count
public object Item
public object Item
internal HttpStaticObjectsCollection SessionObjects
public HttpStaticObjectsCollection StaticObjects
internal void .ctor(HttpStaticObjectsCollection AppObj, HttpStaticObjectsCollection SessionObj)
private bool get_IsLockHeld()
public void Add(string name, object value)
public void Clear()
public object Get(string name)
public object Get(int index)
public string GetKey(int index)
public void Lock()
public void Remove(string name)
public void RemoveAll()
public void RemoveAt(int index)
public void Set(string name, object value)
public void UnLock()
public String[] get_AllKeys()
public HttpApplicationState get_Contents()
public int get_Count()
public object get_Item(string name)
public void set_Item(string name, object value)
public object get_Item(int index)
internal HttpStaticObjectsCollection get_SessionObjects()
public HttpStaticObjectsCollection get_StaticObjects()
}
public System.Web.HttpApplicationStateBase : NameObjectCollectionBase {
public String[] AllKeys
public HttpApplicationStateBase Contents
public int Count
public bool IsSynchronized
public object SyncRoot
public object Item
public object Item
public HttpStaticObjectsCollectionBase StaticObjects
public String[] get_AllKeys()
public HttpApplicationStateBase get_Contents()
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
public object get_Item(int index)
public object get_Item(string name)
public void set_Item(string name, object value)
public HttpStaticObjectsCollectionBase get_StaticObjects()
public void Add(string name, object value)
public void Clear()
public void CopyTo(Array array, int index)
public object Get(int index)
public object Get(string name)
public IEnumerator GetEnumerator()
public string GetKey(int index)
public void Lock()
public void Remove(string name)
public void RemoveAll()
public void RemoveAt(int index)
public void Set(string name, object value)
public void UnLock()
}
public System.Web.HttpApplicationStateWrapper : HttpApplicationStateBase {
private HttpApplicationState _application
public String[] AllKeys
public HttpApplicationStateBase Contents
public int Count
public bool IsSynchronized
public KeysCollection Keys
public object SyncRoot
public object Item
public object Item
public HttpStaticObjectsCollectionBase StaticObjects
public void .ctor(HttpApplicationState httpApplicationState)
public String[] get_AllKeys()
public HttpApplicationStateBase get_Contents()
public int get_Count()
public bool get_IsSynchronized()
public KeysCollection get_Keys()
public object get_SyncRoot()
public object get_Item(int index)
public object get_Item(string name)
public void set_Item(string name, object value)
public HttpStaticObjectsCollectionBase get_StaticObjects()
public void Add(string name, object value)
public void Clear()
public void CopyTo(Array array, int index)
public object Get(int index)
public object Get(string name)
public IEnumerator GetEnumerator()
public string GetKey(int index)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void Lock()
public void OnDeserialization(object sender)
public void Remove(string name)
public void RemoveAll()
public void RemoveAt(int index)
public void Set(string name, object value)
public void UnLock()
}
public System.Web.HttpBrowserCapabilities : HttpCapabilitiesBase {
private bool System.Web.UI.IFilterResolutionService.EvaluateFilter(string filterName)
private int System.Web.UI.IFilterResolutionService.CompareFilters(string filter1, string filter2)
}
public System.Web.HttpBrowserCapabilitiesBase : object {
public bool ActiveXControls
public IDictionary Adapters
public bool AOL
public bool BackgroundSounds
public bool Beta
public string Browser
public ArrayList Browsers
public bool CanCombineFormsInDeck
public bool CanInitiateVoiceCall
public bool CanRenderAfterInputOrSelectElement
public bool CanRenderEmptySelects
public bool CanRenderInputAndSelectElementsTogether
public bool CanRenderMixedSelects
public bool CanRenderOneventAndPrevElementsTogether
public bool CanRenderPostBackCards
public bool CanRenderSetvarZeroWithMultiSelectionList
public bool CanSendMail
public IDictionary Capabilities
public bool CDF
public Version ClrVersion
public bool Cookies
public bool Crawler
public int DefaultSubmitButtonLimit
public Version EcmaScriptVersion
public bool Frames
public int GatewayMajorVersion
public double GatewayMinorVersion
public string GatewayVersion
public bool HasBackButton
public bool HidesRightAlignedMultiselectScrollbars
public string HtmlTextWriter
public string Id
public string InputType
public bool IsColor
public bool IsMobileDevice
public bool JavaApplets
public Version JScriptVersion
public int MajorVersion
public int MaximumHrefLength
public int MaximumRenderedPageSize
public int MaximumSoftkeyLabelLength
public double MinorVersion
public string MinorVersionString
public string MobileDeviceManufacturer
public string MobileDeviceModel
public Version MSDomVersion
public int NumberOfSoftkeys
public string Platform
public string PreferredImageMime
public string PreferredRenderingMime
public string PreferredRenderingType
public string PreferredRequestEncoding
public string PreferredResponseEncoding
public bool RendersBreakBeforeWmlSelectAndInput
public bool RendersBreaksAfterHtmlLists
public bool RendersBreaksAfterWmlAnchor
public bool RendersBreaksAfterWmlInput
public bool RendersWmlDoAcceptsInline
public bool RendersWmlSelectsAsMenuCards
public string RequiredMetaTagNameValue
public bool RequiresAttributeColonSubstitution
public bool RequiresContentTypeMetaTag
public bool RequiresControlStateInSession
public bool RequiresDBCSCharacter
public bool RequiresHtmlAdaptiveErrorReporting
public bool RequiresLeadingPageBreak
public bool RequiresNoBreakInFormatting
public bool RequiresOutputOptimization
public bool RequiresPhoneNumbersAsPlainText
public bool RequiresSpecialViewStateEncoding
public bool RequiresUniqueFilePathSuffix
public bool RequiresUniqueHtmlCheckboxNames
public bool RequiresUniqueHtmlInputNames
public bool RequiresUrlEncodedPostfieldValues
public int ScreenBitDepth
public int ScreenCharactersHeight
public int ScreenCharactersWidth
public int ScreenPixelsHeight
public int ScreenPixelsWidth
public bool SupportsAccesskeyAttribute
public bool SupportsBodyColor
public bool SupportsBold
public bool SupportsCacheControlMetaTag
public bool SupportsCallback
public bool SupportsCss
public bool SupportsDivAlign
public bool SupportsDivNoWrap
public bool SupportsEmptyStringInCookieValue
public bool SupportsFontColor
public bool SupportsFontName
public bool SupportsFontSize
public bool SupportsImageSubmit
public bool SupportsIModeSymbols
public bool SupportsInputIStyle
public bool SupportsInputMode
public bool SupportsItalic
public bool SupportsJPhoneMultiMediaAttributes
public bool SupportsJPhoneSymbols
public bool SupportsQueryStringInFormAction
public bool SupportsRedirectWithCookie
public bool SupportsSelectMultiple
public bool SupportsUncheck
public bool SupportsXmlHttp
public bool Tables
public Type TagWriter
public string Type
public bool UseOptimizedCacheKey
public bool VBScript
public string Version
public Version W3CDomVersion
public bool Win16
public bool Win32
public string Item
public bool get_ActiveXControls()
public IDictionary get_Adapters()
public bool get_AOL()
public bool get_BackgroundSounds()
public bool get_Beta()
public string get_Browser()
public ArrayList get_Browsers()
public bool get_CanCombineFormsInDeck()
public bool get_CanInitiateVoiceCall()
public bool get_CanRenderAfterInputOrSelectElement()
public bool get_CanRenderEmptySelects()
public bool get_CanRenderInputAndSelectElementsTogether()
public bool get_CanRenderMixedSelects()
public bool get_CanRenderOneventAndPrevElementsTogether()
public bool get_CanRenderPostBackCards()
public bool get_CanRenderSetvarZeroWithMultiSelectionList()
public bool get_CanSendMail()
public IDictionary get_Capabilities()
public void set_Capabilities(IDictionary value)
public bool get_CDF()
public Version get_ClrVersion()
public bool get_Cookies()
public bool get_Crawler()
public int get_DefaultSubmitButtonLimit()
public Version get_EcmaScriptVersion()
public bool get_Frames()
public int get_GatewayMajorVersion()
public double get_GatewayMinorVersion()
public string get_GatewayVersion()
public bool get_HasBackButton()
public bool get_HidesRightAlignedMultiselectScrollbars()
public string get_HtmlTextWriter()
public void set_HtmlTextWriter(string value)
public string get_Id()
public string get_InputType()
public bool get_IsColor()
public bool get_IsMobileDevice()
public bool get_JavaApplets()
public Version get_JScriptVersion()
public int get_MajorVersion()
public int get_MaximumHrefLength()
public int get_MaximumRenderedPageSize()
public int get_MaximumSoftkeyLabelLength()
public double get_MinorVersion()
public string get_MinorVersionString()
public string get_MobileDeviceManufacturer()
public string get_MobileDeviceModel()
public Version get_MSDomVersion()
public int get_NumberOfSoftkeys()
public string get_Platform()
public string get_PreferredImageMime()
public string get_PreferredRenderingMime()
public string get_PreferredRenderingType()
public string get_PreferredRequestEncoding()
public string get_PreferredResponseEncoding()
public bool get_RendersBreakBeforeWmlSelectAndInput()
public bool get_RendersBreaksAfterHtmlLists()
public bool get_RendersBreaksAfterWmlAnchor()
public bool get_RendersBreaksAfterWmlInput()
public bool get_RendersWmlDoAcceptsInline()
public bool get_RendersWmlSelectsAsMenuCards()
public string get_RequiredMetaTagNameValue()
public bool get_RequiresAttributeColonSubstitution()
public bool get_RequiresContentTypeMetaTag()
public bool get_RequiresControlStateInSession()
public bool get_RequiresDBCSCharacter()
public bool get_RequiresHtmlAdaptiveErrorReporting()
public bool get_RequiresLeadingPageBreak()
public bool get_RequiresNoBreakInFormatting()
public bool get_RequiresOutputOptimization()
public bool get_RequiresPhoneNumbersAsPlainText()
public bool get_RequiresSpecialViewStateEncoding()
public bool get_RequiresUniqueFilePathSuffix()
public bool get_RequiresUniqueHtmlCheckboxNames()
public bool get_RequiresUniqueHtmlInputNames()
public bool get_RequiresUrlEncodedPostfieldValues()
public int get_ScreenBitDepth()
public int get_ScreenCharactersHeight()
public int get_ScreenCharactersWidth()
public int get_ScreenPixelsHeight()
public int get_ScreenPixelsWidth()
public bool get_SupportsAccesskeyAttribute()
public bool get_SupportsBodyColor()
public bool get_SupportsBold()
public bool get_SupportsCacheControlMetaTag()
public bool get_SupportsCallback()
public bool get_SupportsCss()
public bool get_SupportsDivAlign()
public bool get_SupportsDivNoWrap()
public bool get_SupportsEmptyStringInCookieValue()
public bool get_SupportsFontColor()
public bool get_SupportsFontName()
public bool get_SupportsFontSize()
public bool get_SupportsImageSubmit()
public bool get_SupportsIModeSymbols()
public bool get_SupportsInputIStyle()
public bool get_SupportsInputMode()
public bool get_SupportsItalic()
public bool get_SupportsJPhoneMultiMediaAttributes()
public bool get_SupportsJPhoneSymbols()
public bool get_SupportsQueryStringInFormAction()
public bool get_SupportsRedirectWithCookie()
public bool get_SupportsSelectMultiple()
public bool get_SupportsUncheck()
public bool get_SupportsXmlHttp()
public bool get_Tables()
public Type get_TagWriter()
public string get_Type()
public bool get_UseOptimizedCacheKey()
public bool get_VBScript()
public string get_Version()
public Version get_W3CDomVersion()
public bool get_Win16()
public bool get_Win32()
public string get_Item(string key)
public void AddBrowser(string browserName)
public HtmlTextWriter CreateHtmlTextWriter(TextWriter w)
public void DisableOptimizedCacheKey()
public Version[] GetClrVersions()
public bool IsBrowser(string browserName)
public int CompareFilters(string filter1, string filter2)
public bool EvaluateFilter(string filterName)
}
public System.Web.HttpBrowserCapabilitiesWrapper : HttpBrowserCapabilitiesBase {
private HttpBrowserCapabilities _browser
public string Browser
public Version EcmaScriptVersion
public Version JScriptVersion
public bool SupportsCallback
public Version W3CDomVersion
public bool ActiveXControls
public IDictionary Adapters
public bool AOL
public bool BackgroundSounds
public bool Beta
public ArrayList Browsers
public bool CanCombineFormsInDeck
public bool CanInitiateVoiceCall
public bool CanRenderAfterInputOrSelectElement
public bool CanRenderEmptySelects
public bool CanRenderInputAndSelectElementsTogether
public bool CanRenderMixedSelects
public bool CanRenderOneventAndPrevElementsTogether
public bool CanRenderPostBackCards
public bool CanRenderSetvarZeroWithMultiSelectionList
public bool CanSendMail
public IDictionary Capabilities
public bool CDF
public Version ClrVersion
public bool Cookies
public bool Crawler
public int DefaultSubmitButtonLimit
public bool Frames
public int GatewayMajorVersion
public double GatewayMinorVersion
public string GatewayVersion
public bool HasBackButton
public bool HidesRightAlignedMultiselectScrollbars
public string HtmlTextWriter
public string Id
public string InputType
public bool IsColor
public bool IsMobileDevice
public bool JavaApplets
public int MajorVersion
public int MaximumHrefLength
public int MaximumRenderedPageSize
public int MaximumSoftkeyLabelLength
public double MinorVersion
public string MinorVersionString
public string MobileDeviceManufacturer
public string MobileDeviceModel
public Version MSDomVersion
public int NumberOfSoftkeys
public string Platform
public string PreferredImageMime
public string PreferredRenderingMime
public string PreferredRenderingType
public string PreferredRequestEncoding
public string PreferredResponseEncoding
public bool RendersBreakBeforeWmlSelectAndInput
public bool RendersBreaksAfterHtmlLists
public bool RendersBreaksAfterWmlAnchor
public bool RendersBreaksAfterWmlInput
public bool RendersWmlDoAcceptsInline
public bool RendersWmlSelectsAsMenuCards
public string RequiredMetaTagNameValue
public bool RequiresAttributeColonSubstitution
public bool RequiresContentTypeMetaTag
public bool RequiresControlStateInSession
public bool RequiresDBCSCharacter
public bool RequiresHtmlAdaptiveErrorReporting
public bool RequiresLeadingPageBreak
public bool RequiresNoBreakInFormatting
public bool RequiresOutputOptimization
public bool RequiresPhoneNumbersAsPlainText
public bool RequiresSpecialViewStateEncoding
public bool RequiresUniqueFilePathSuffix
public bool RequiresUniqueHtmlCheckboxNames
public bool RequiresUniqueHtmlInputNames
public bool RequiresUrlEncodedPostfieldValues
public int ScreenBitDepth
public int ScreenCharactersHeight
public int ScreenCharactersWidth
public int ScreenPixelsHeight
public int ScreenPixelsWidth
public bool SupportsAccesskeyAttribute
public bool SupportsBodyColor
public bool SupportsBold
public bool SupportsCacheControlMetaTag
public bool SupportsCss
public bool SupportsDivAlign
public bool SupportsDivNoWrap
public bool SupportsEmptyStringInCookieValue
public bool SupportsFontColor
public bool SupportsFontName
public bool SupportsFontSize
public bool SupportsImageSubmit
public bool SupportsIModeSymbols
public bool SupportsInputIStyle
public bool SupportsInputMode
public bool SupportsItalic
public bool SupportsJPhoneMultiMediaAttributes
public bool SupportsJPhoneSymbols
public bool SupportsQueryStringInFormAction
public bool SupportsRedirectWithCookie
public bool SupportsSelectMultiple
public bool SupportsUncheck
public bool SupportsXmlHttp
public bool Tables
public Type TagWriter
public string Type
public bool UseOptimizedCacheKey
public bool VBScript
public string Version
public bool Win16
public bool Win32
public string Item
public void .ctor(HttpBrowserCapabilities httpBrowserCapabilities)
public string get_Browser()
public Version get_EcmaScriptVersion()
public Version get_JScriptVersion()
public bool get_SupportsCallback()
public Version get_W3CDomVersion()
public bool get_ActiveXControls()
public IDictionary get_Adapters()
public bool get_AOL()
public bool get_BackgroundSounds()
public bool get_Beta()
public ArrayList get_Browsers()
public bool get_CanCombineFormsInDeck()
public bool get_CanInitiateVoiceCall()
public bool get_CanRenderAfterInputOrSelectElement()
public bool get_CanRenderEmptySelects()
public bool get_CanRenderInputAndSelectElementsTogether()
public bool get_CanRenderMixedSelects()
public bool get_CanRenderOneventAndPrevElementsTogether()
public bool get_CanRenderPostBackCards()
public bool get_CanRenderSetvarZeroWithMultiSelectionList()
public bool get_CanSendMail()
public IDictionary get_Capabilities()
public void set_Capabilities(IDictionary value)
public bool get_CDF()
public Version get_ClrVersion()
public bool get_Cookies()
public bool get_Crawler()
public int get_DefaultSubmitButtonLimit()
public bool get_Frames()
public int get_GatewayMajorVersion()
public double get_GatewayMinorVersion()
public string get_GatewayVersion()
public bool get_HasBackButton()
public bool get_HidesRightAlignedMultiselectScrollbars()
public string get_HtmlTextWriter()
public void set_HtmlTextWriter(string value)
public string get_Id()
public string get_InputType()
public bool get_IsColor()
public bool get_IsMobileDevice()
public bool get_JavaApplets()
public int get_MajorVersion()
public int get_MaximumHrefLength()
public int get_MaximumRenderedPageSize()
public int get_MaximumSoftkeyLabelLength()
public double get_MinorVersion()
public string get_MinorVersionString()
public string get_MobileDeviceManufacturer()
public string get_MobileDeviceModel()
public Version get_MSDomVersion()
public int get_NumberOfSoftkeys()
public string get_Platform()
public string get_PreferredImageMime()
public string get_PreferredRenderingMime()
public string get_PreferredRenderingType()
public string get_PreferredRequestEncoding()
public string get_PreferredResponseEncoding()
public bool get_RendersBreakBeforeWmlSelectAndInput()
public bool get_RendersBreaksAfterHtmlLists()
public bool get_RendersBreaksAfterWmlAnchor()
public bool get_RendersBreaksAfterWmlInput()
public bool get_RendersWmlDoAcceptsInline()
public bool get_RendersWmlSelectsAsMenuCards()
public string get_RequiredMetaTagNameValue()
public bool get_RequiresAttributeColonSubstitution()
public bool get_RequiresContentTypeMetaTag()
public bool get_RequiresControlStateInSession()
public bool get_RequiresDBCSCharacter()
public bool get_RequiresHtmlAdaptiveErrorReporting()
public bool get_RequiresLeadingPageBreak()
public bool get_RequiresNoBreakInFormatting()
public bool get_RequiresOutputOptimization()
public bool get_RequiresPhoneNumbersAsPlainText()
public bool get_RequiresSpecialViewStateEncoding()
public bool get_RequiresUniqueFilePathSuffix()
public bool get_RequiresUniqueHtmlCheckboxNames()
public bool get_RequiresUniqueHtmlInputNames()
public bool get_RequiresUrlEncodedPostfieldValues()
public int get_ScreenBitDepth()
public int get_ScreenCharactersHeight()
public int get_ScreenCharactersWidth()
public int get_ScreenPixelsHeight()
public int get_ScreenPixelsWidth()
public bool get_SupportsAccesskeyAttribute()
public bool get_SupportsBodyColor()
public bool get_SupportsBold()
public bool get_SupportsCacheControlMetaTag()
public bool get_SupportsCss()
public bool get_SupportsDivAlign()
public bool get_SupportsDivNoWrap()
public bool get_SupportsEmptyStringInCookieValue()
public bool get_SupportsFontColor()
public bool get_SupportsFontName()
public bool get_SupportsFontSize()
public bool get_SupportsImageSubmit()
public bool get_SupportsIModeSymbols()
public bool get_SupportsInputIStyle()
public bool get_SupportsInputMode()
public bool get_SupportsItalic()
public bool get_SupportsJPhoneMultiMediaAttributes()
public bool get_SupportsJPhoneSymbols()
public bool get_SupportsQueryStringInFormAction()
public bool get_SupportsRedirectWithCookie()
public bool get_SupportsSelectMultiple()
public bool get_SupportsUncheck()
public bool get_SupportsXmlHttp()
public bool get_Tables()
public Type get_TagWriter()
public string get_Type()
public bool get_UseOptimizedCacheKey()
public bool get_VBScript()
public string get_Version()
public bool get_Win16()
public bool get_Win32()
public string get_Item(string key)
public void AddBrowser(string browserName)
public HtmlTextWriter CreateHtmlTextWriter(TextWriter w)
public void DisableOptimizedCacheKey()
public Version[] GetClrVersions()
public bool IsBrowser(string browserName)
public int CompareFilters(string filter1, string filter2)
public bool EvaluateFilter(string filterName)
}
public System.Web.HttpCacheability : Enum {
public int value__
public HttpCacheability NoCache
public HttpCacheability Private
public HttpCacheability Server
public HttpCacheability Public
public HttpCacheability ServerAndPrivate
public HttpCacheability ServerAndNoCache
}
public System.Web.HttpCachePolicy : object {
private HttpCacheVaryByContentEncodings vary_by_content_encodings
private HttpCacheVaryByHeaders vary_by_headers
private HttpCacheVaryByParams vary_by_params
private ArrayList validation_callbacks
private StringBuilder cache_extension
internal HttpCacheability Cacheability
private string etag
private bool etag_from_file_dependencies
private bool last_modified_from_file_dependencies
internal bool have_expire_date
internal DateTime expire_date
internal bool have_last_modified
internal DateTime last_modified
private HttpCacheRevalidation revalidation
private string vary_by_custom
private bool HaveMaxAge
private TimeSpan MaxAge
private bool HaveProxyMaxAge
private TimeSpan ProxyMaxAge
private ArrayList fields
private bool sliding_expiration
private int duration
private bool allow_response_in_browser_history
private bool allow_server_caching
private bool set_no_store
private bool set_no_transform
private bool valid_until_expires
private bool omit_vary_star
public HttpCacheVaryByContentEncodings VaryByContentEncodings
public HttpCacheVaryByHeaders VaryByHeaders
public HttpCacheVaryByParams VaryByParams
internal bool AllowServerCaching
internal int Duration
internal bool Sliding
internal DateTime Expires
internal ArrayList ValidationCallbacks
internal bool OmitVaryStar
internal bool ValidUntilExpires
public DateTime UtcTimestampCreated
public HttpCacheVaryByContentEncodings get_VaryByContentEncodings()
public HttpCacheVaryByHeaders get_VaryByHeaders()
public HttpCacheVaryByParams get_VaryByParams()
internal bool get_AllowServerCaching()
internal int get_Duration()
internal void set_Duration(int value)
internal bool get_Sliding()
internal DateTime get_Expires()
internal ArrayList get_ValidationCallbacks()
internal bool get_OmitVaryStar()
internal bool get_ValidUntilExpires()
internal int ExpireMinutes()
public void AddValidationCallback(HttpCacheValidateHandler handler, object data)
public void AppendCacheExtension(string extension)
public void SetCacheability(HttpCacheability cacheability)
public void SetCacheability(HttpCacheability cacheability, string field)
public void SetETag(string etag)
public void SetETagFromFileDependencies()
public void SetExpires(DateTime date)
public void SetLastModified(DateTime date)
public void SetLastModifiedFromFileDependencies()
public void SetMaxAge(TimeSpan delta)
public void SetNoServerCaching()
public void SetNoStore()
public void SetNoTransforms()
public void SetProxyMaxAge(TimeSpan delta)
public void SetRevalidation(HttpCacheRevalidation revalidation)
public void SetSlidingExpiration(bool slide)
public void SetValidUntilExpires(bool validUntilExpires)
public void SetVaryByCustom(string custom)
internal string GetVaryByCustom()
public void SetAllowResponseInBrowserHistory(bool allow)
internal void SetHeaders(HttpResponse response, NameValueCollection headers)
private void HeadersFromFileDependencies(HttpResponse response)
public void SetOmitVaryStar(bool omit)
public DateTime get_UtcTimestampCreated()
public void set_UtcTimestampCreated(DateTime value)
public HttpCacheability GetCacheability()
public string GetCacheExtensions()
public string GetETag()
public bool GetETagFromFileDependencies()
public DateTime GetExpires()
public bool GetIgnoreRangeRequests()
public bool GetLastModifiedFromFileDependencies()
public TimeSpan GetMaxAge()
public bool GetNoServerCaching()
public bool GetNoStore()
public bool GetNoTransforms()
public int GetOmitVaryStar()
public TimeSpan GetProxyMaxAge()
public HttpCacheRevalidation GetRevalidation()
public DateTime GetUtcLastModified()
public bool HasSlidingExpiration()
public bool IsModified()
public bool IsValidUntilExpires()
}
public System.Web.HttpCachePolicyBase : object {
public HttpCacheVaryByContentEncodings VaryByContentEncodings
public HttpCacheVaryByHeaders VaryByHeaders
public HttpCacheVaryByParams VaryByParams
public HttpCacheVaryByContentEncodings get_VaryByContentEncodings()
public HttpCacheVaryByHeaders get_VaryByHeaders()
public HttpCacheVaryByParams get_VaryByParams()
public void AddValidationCallback(HttpCacheValidateHandler handler, object data)
public void AppendCacheExtension(string extension)
public void SetAllowResponseInBrowserHistory(bool allow)
public void SetCacheability(HttpCacheability cacheability)
public void SetCacheability(HttpCacheability cacheability, string field)
public void SetETag(string etag)
public void SetETagFromFileDependencies()
public void SetExpires(DateTime date)
public void SetLastModified(DateTime date)
public void SetLastModifiedFromFileDependencies()
public void SetMaxAge(TimeSpan delta)
public void SetNoServerCaching()
public void SetNoStore()
public void SetNoTransforms()
public void SetOmitVaryStar(bool omit)
public void SetProxyMaxAge(TimeSpan delta)
public void SetRevalidation(HttpCacheRevalidation revalidation)
public void SetSlidingExpiration(bool slide)
public void SetValidUntilExpires(bool validUntilExpires)
public void SetVaryByCustom(string custom)
}
public System.Web.HttpCachePolicyWrapper : HttpCachePolicyBase {
private HttpCachePolicy _httpCachePolicy
public HttpCacheVaryByContentEncodings VaryByContentEncodings
public HttpCacheVaryByHeaders VaryByHeaders
public HttpCacheVaryByParams VaryByParams
public void .ctor(HttpCachePolicy httpCachePolicy)
public HttpCacheVaryByContentEncodings get_VaryByContentEncodings()
public HttpCacheVaryByHeaders get_VaryByHeaders()
public HttpCacheVaryByParams get_VaryByParams()
public void AddValidationCallback(HttpCacheValidateHandler handler, object data)
public void AppendCacheExtension(string extension)
public void SetAllowResponseInBrowserHistory(bool allow)
public void SetCacheability(HttpCacheability cacheability)
public void SetCacheability(HttpCacheability cacheability, string field)
public void SetETag(string etag)
public void SetETagFromFileDependencies()
public void SetExpires(DateTime date)
public void SetLastModified(DateTime date)
public void SetLastModifiedFromFileDependencies()
public void SetMaxAge(TimeSpan delta)
public void SetNoServerCaching()
public void SetNoStore()
public void SetNoTransforms()
public void SetOmitVaryStar(bool omit)
public void SetProxyMaxAge(TimeSpan delta)
public void SetRevalidation(HttpCacheRevalidation revalidation)
public void SetSlidingExpiration(bool slide)
public void SetValidUntilExpires(bool validUntilExpires)
public void SetVaryByCustom(string custom)
}
public System.Web.HttpCacheRevalidation : Enum {
public int value__
public HttpCacheRevalidation AllCaches
public HttpCacheRevalidation ProxyCaches
public HttpCacheRevalidation None
}
public System.Web.HttpCacheValidateHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(HttpContext context, object data, HttpValidationStatus& validationStatus)
public IAsyncResult BeginInvoke(HttpContext context, object data, HttpValidationStatus& validationStatus, AsyncCallback callback, object object)
public void EndInvoke(HttpValidationStatus& validationStatus, IAsyncResult result)
}
public System.Web.HttpCacheVaryByContentEncodings : object {
private Dictionary`2<string, bool> encodings
public bool Item
public bool get_Item(string contentEncoding)
public void set_Item(string contentEncoding, bool value)
public String[] GetContentEncodings()
public void SetContentEncodings(String[] contentEncodings)
}
public System.Web.HttpCacheVaryByHeaders : object {
private bool vary_by_unspecified
private bool vary_by_accept
private bool vary_by_user_agent
private bool vary_by_user_charset
private bool vary_by_user_language
private Hashtable fields
public bool AcceptTypes
public bool UserAgent
public bool UserCharSet
public bool UserLanguage
public bool Item
internal String[] GetHeaderNames(bool omitVaryStar)
public bool get_AcceptTypes()
public void set_AcceptTypes(bool value)
public bool get_UserAgent()
public void set_UserAgent(bool value)
public bool get_UserCharSet()
public void set_UserCharSet(bool value)
public bool get_UserLanguage()
public void set_UserLanguage(bool value)
public bool get_Item(string header)
public void set_Item(string header, bool value)
public void VaryByUnspecifiedParameters()
public String[] GetHeaders()
public void SetHeaders(String[] headers)
}
public System.Web.HttpCacheVaryByParams : object {
private bool ignore_parms
private Hashtable parms
public bool IgnoreParams
public bool Item
internal String[] GetParamNames()
internal string GetResponseHeaderValue()
public bool get_IgnoreParams()
public void set_IgnoreParams(bool value)
public bool get_Item(string header)
public void set_Item(string header, bool value)
public String[] GetParams()
public void SetParams(String[] parameters)
}
internal System.Web.HttpChannelBindingToken : ChannelBinding {
private int _size
public int Size
internal void .ctor(IntPtr token, int tokenSize)
protected bool ReleaseHandle()
public int get_Size()
}
public System.Web.HttpClientCertificate : NameValueCollection {
private HttpWorkerRequest hwr
private int flags
private DateTime from
private DateTime until
public Byte[] BinaryIssuer
public int CertEncoding
public Byte[] Certificate
public string Cookie
public int Flags
public bool IsPresent
public string Issuer
public bool IsValid
public int KeySize
public Byte[] PublicKey
public int SecretKeySize
public string SerialNumber
public string ServerIssuer
public string ServerSubject
public string Subject
public DateTime ValidFrom
public DateTime ValidUntil
internal void .ctor(HttpWorkerRequest hwr)
public Byte[] get_BinaryIssuer()
public int get_CertEncoding()
public Byte[] get_Certificate()
public string get_Cookie()
public int get_Flags()
public bool get_IsPresent()
public string get_Issuer()
public bool get_IsValid()
public int get_KeySize()
public Byte[] get_PublicKey()
public int get_SecretKeySize()
public string get_SerialNumber()
public string get_ServerIssuer()
public string get_ServerSubject()
public string get_Subject()
public DateTime get_ValidFrom()
public DateTime get_ValidUntil()
public string Get(string field)
private int GetInt(string variable)
private int GetIntNoPresense(string variable)
private string GetString(string variable)
}
public System.Web.HttpCompileException : HttpException {
private CompilerResults results
private string sourceCode
public CompilerResults Results
public string SourceCode
public string Message
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(CompilerResults results, string sourceCode)
public CompilerResults get_Results()
public string get_SourceCode()
public string get_Message()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Web.HttpContext : object {
internal HttpWorkerRequest WorkerRequest
private HttpApplication app_instance
private HttpRequest request
private HttpResponse response
private HttpSessionState session_state
private HttpServerUtility server
private TraceContext trace_context
private IHttpHandler handler
private string error_page
private bool skip_authorization
private IPrincipal user
private object errors
private Hashtable items
private object config_timeout
private int timeout_possible
private DateTime time_stamp
private Timer timer
private Thread thread
private bool _isProcessingInclude
private ResourceProviderFactory provider_factory
private DefaultResourceProviderFactory default_provider_factory
private Dictionary`2<string, IResourceProvider> resource_providers
internal Assembly AppGlobalResourcesAssembly
private ProfileBase profile
private LinkedList`1<IHttpHandler> handlers
private bool <MapRequestHandlerDone>k__BackingField
private SessionStateBehavior <SessionStateBehavior>k__BackingField
private DefaultResourceProviderFactory DefaultProviderFactory
internal bool IsProcessingInclude
public Exception[] AllErrors
public HttpApplicationState Application
public HttpApplication ApplicationInstance
public Cache Cache
internal Cache InternalCache
public HttpContext Current
public Exception Error
public IHttpHandler Handler
public bool IsCustomErrorEnabled
internal bool IsCustomErrorEnabledUnsafe
public bool IsDebuggingEnabled
public IDictionary Items
public HttpRequest Request
public HttpResponse Response
public HttpServerUtility Server
public HttpSessionState Session
public bool SkipAuthorization
public DateTime Timestamp
public TraceContext Trace
public IPrincipal User
internal bool MapRequestHandlerDone
public RequestNotification CurrentNotification
public bool IsPostNotification
public IHttpHandler CurrentHandler
public IHttpHandler PreviousHandler
internal bool ProfileInitialized
public ProfileBase Profile
internal string ErrorPage
internal TimeSpan ConfigTimeout
internal SessionStateBehavior SessionStateBehavior
internal bool TimeoutPossible
public bool AllowAsyncDuringSyncStages
public AsyncPreloadModeFlags AsyncPreloadMode
public bool IsWebSocketRequest
public bool IsWebSocketRequestUpgrading
public PageInstrumentationService PageInstrumentation
public bool ThreadAbortOnTimeout
public string WebSocketNegotiatedProtocol
public IList`1<string> WebSocketRequestedProtocols
private DefaultResourceProviderFactory get_DefaultProviderFactory()
public void .ctor(HttpWorkerRequest wr)
public void .ctor(HttpRequest request, HttpResponse response)
internal bool get_IsProcessingInclude()
internal void set_IsProcessingInclude(bool value)
public Exception[] get_AllErrors()
public HttpApplicationState get_Application()
public HttpApplication get_ApplicationInstance()
public void set_ApplicationInstance(HttpApplication value)
public Cache get_Cache()
internal Cache get_InternalCache()
public HttpContext get_Current()
public void set_Current(HttpContext value)
public Exception get_Error()
public IHttpHandler get_Handler()
public void set_Handler(IHttpHandler value)
public bool get_IsCustomErrorEnabled()
internal bool get_IsCustomErrorEnabledUnsafe()
public bool get_IsDebuggingEnabled()
public IDictionary get_Items()
public HttpRequest get_Request()
public HttpResponse get_Response()
public HttpServerUtility get_Server()
public HttpSessionState get_Session()
public bool get_SkipAuthorization()
public void set_SkipAuthorization(bool value)
public DateTime get_Timestamp()
public TraceContext get_Trace()
public IPrincipal get_User()
public void set_User(IPrincipal value)
internal bool get_MapRequestHandlerDone()
internal void set_MapRequestHandlerDone(bool value)
public RequestNotification get_CurrentNotification()
public bool get_IsPostNotification()
internal void PushHandler(IHttpHandler handler)
internal void PopHandler()
private IHttpHandler GetCurrentHandler()
private IHttpHandler GetPreviousHandler()
public IHttpHandler get_CurrentHandler()
public IHttpHandler get_PreviousHandler()
internal bool get_ProfileInitialized()
public ProfileBase get_Profile()
internal void set_Profile(ProfileBase value)
public void AddError(Exception errorInfo)
internal void ClearError(Exception e)
internal bool HasError(Exception e)
public void ClearError()
public object GetAppConfig(string name)
public object GetConfig(string name)
public object GetGlobalResourceObject(string classKey, string resourceKey)
private bool EnsureProviderFactory()
internal IResourceProvider GetResourceProvider(string virtualPath, bool isLocal)
private object GetGlobalObjectFromFactory(string classKey, string resourceKey, CultureInfo culture)
public object GetGlobalResourceObject(string classKey, string resourceKey, CultureInfo culture)
public object GetLocalResourceObject(string virtualPath, string resourceKey)
private object GetLocalObjectFromFactory(string virtualPath, string resourceKey, CultureInfo culture)
public object GetLocalResourceObject(string virtualPath, string resourceKey, CultureInfo culture)
public object GetSection(string sectionName)
private object System.IServiceProvider.GetService(Type service)
public void RemapHandler(IHttpHandler handler)
public void RewritePath(string path)
public void RewritePath(string filePath, string pathInfo, string queryString)
public void RewritePath(string path, bool rebaseClientPath)
public void RewritePath(string filePath, string pathInfo, string queryString, bool setClientFilePath)
public void SetSessionStateBehavior(SessionStateBehavior sessionStateBehavior)
internal void SetSession(HttpSessionState state)
internal string get_ErrorPage()
internal void set_ErrorPage(string value)
internal TimeSpan get_ConfigTimeout()
internal void set_ConfigTimeout(TimeSpan value)
internal SessionStateBehavior get_SessionStateBehavior()
private void set_SessionStateBehavior(SessionStateBehavior value)
private void TimeoutReached(object state)
internal void StartTimeoutTimer()
internal void StopTimeoutTimer()
internal bool get_TimeoutPossible()
internal void BeginTimeoutPossible()
internal void EndTimeoutPossible()
public bool get_AllowAsyncDuringSyncStages()
public void set_AllowAsyncDuringSyncStages(bool value)
public AsyncPreloadModeFlags get_AsyncPreloadMode()
public void set_AsyncPreloadMode(AsyncPreloadModeFlags value)
public bool get_IsWebSocketRequest()
public bool get_IsWebSocketRequestUpgrading()
public PageInstrumentationService get_PageInstrumentation()
public bool get_ThreadAbortOnTimeout()
public void set_ThreadAbortOnTimeout(bool value)
public string get_WebSocketNegotiatedProtocol()
public IList`1<string> get_WebSocketRequestedProtocols()
public void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc)
public void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc, AspNetWebSocketOptions options)
public ISubscriptionToken AddOnRequestCompleted(Action`1<HttpContext> callback)
public ISubscriptionToken DisposeOnPipelineCompleted(IDisposable target)
}
public System.Web.HttpContextBase : object {
public Exception[] AllErrors
public HttpApplicationStateBase Application
public HttpApplication ApplicationInstance
public Cache Cache
public IHttpHandler CurrentHandler
public RequestNotification CurrentNotification
public Exception Error
public IHttpHandler Handler
public bool IsCustomErrorEnabled
public bool IsDebuggingEnabled
public bool IsPostNotification
public IDictionary Items
public IHttpHandler PreviousHandler
public ProfileBase Profile
public HttpRequestBase Request
public HttpResponseBase Response
public HttpServerUtilityBase Server
public HttpSessionStateBase Session
public bool SkipAuthorization
public DateTime Timestamp
public TraceContext Trace
public IPrincipal User
public bool AllowAsyncDuringSyncStages
public AsyncPreloadModeFlags AsyncPreloadMode
public bool IsWebSocketRequest
public bool IsWebSocketRequestUpgrading
public PageInstrumentationService PageInstrumentation
public bool ThreadAbortOnTimeout
public string WebSocketNegotiatedProtocol
public IList`1<string> WebSocketRequestedProtocols
private void NotImplemented()
public Exception[] get_AllErrors()
public HttpApplicationStateBase get_Application()
public HttpApplication get_ApplicationInstance()
public void set_ApplicationInstance(HttpApplication value)
public Cache get_Cache()
public IHttpHandler get_CurrentHandler()
public RequestNotification get_CurrentNotification()
public Exception get_Error()
public IHttpHandler get_Handler()
public void set_Handler(IHttpHandler value)
public bool get_IsCustomErrorEnabled()
public bool get_IsDebuggingEnabled()
public bool get_IsPostNotification()
public IDictionary get_Items()
public IHttpHandler get_PreviousHandler()
public ProfileBase get_Profile()
public HttpRequestBase get_Request()
public HttpResponseBase get_Response()
public HttpServerUtilityBase get_Server()
public HttpSessionStateBase get_Session()
public bool get_SkipAuthorization()
public void set_SkipAuthorization(bool value)
public DateTime get_Timestamp()
public TraceContext get_Trace()
public IPrincipal get_User()
public void set_User(IPrincipal value)
public void AddError(Exception errorInfo)
public void ClearError()
public object GetGlobalResourceObject(string classKey, string resourceKey)
public object GetGlobalResourceObject(string classKey, string resourceKey, CultureInfo culture)
public object GetLocalResourceObject(string virtualPath, string resourceKey)
public object GetLocalResourceObject(string virtualPath, string resourceKey, CultureInfo culture)
public object GetSection(string sectionName)
public object GetService(Type serviceType)
public void RemapHandler(IHttpHandler handler)
public void RewritePath(string path)
public void RewritePath(string path, bool rebaseClientPath)
public void RewritePath(string filePath, string pathInfo, string queryString)
public void RewritePath(string filePath, string pathInfo, string queryString, bool setClientFilePath)
public void SetSessionStateBehavior(SessionStateBehavior sessionStateBehavior)
public bool get_AllowAsyncDuringSyncStages()
public void set_AllowAsyncDuringSyncStages(bool value)
public AsyncPreloadModeFlags get_AsyncPreloadMode()
public void set_AsyncPreloadMode(AsyncPreloadModeFlags value)
public bool get_IsWebSocketRequest()
public bool get_IsWebSocketRequestUpgrading()
public PageInstrumentationService get_PageInstrumentation()
public bool get_ThreadAbortOnTimeout()
public void set_ThreadAbortOnTimeout(bool value)
public string get_WebSocketNegotiatedProtocol()
public IList`1<string> get_WebSocketRequestedProtocols()
public void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc)
public void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc, AspNetWebSocketOptions options)
public ISubscriptionToken AddOnRequestCompleted(Action`1<HttpContextBase> callback)
public ISubscriptionToken DisposeOnPipelineCompleted(IDisposable target)
}
public System.Web.HttpContextWrapper : HttpContextBase {
private HttpContext w
public Exception[] AllErrors
public HttpApplicationStateBase Application
public HttpApplication ApplicationInstance
public Cache Cache
public IHttpHandler CurrentHandler
public RequestNotification CurrentNotification
public Exception Error
public IHttpHandler Handler
public bool IsCustomErrorEnabled
public bool IsDebuggingEnabled
public bool IsPostNotification
public IDictionary Items
public IHttpHandler PreviousHandler
public ProfileBase Profile
public HttpRequestBase Request
public HttpResponseBase Response
public HttpServerUtilityBase Server
public HttpSessionStateBase Session
public bool SkipAuthorization
public DateTime Timestamp
public TraceContext Trace
public IPrincipal User
public bool AllowAsyncDuringSyncStages
public AsyncPreloadModeFlags AsyncPreloadMode
public bool IsWebSocketRequest
public bool IsWebSocketRequestUpgrading
public PageInstrumentationService PageInstrumentation
public bool ThreadAbortOnTimeout
public string WebSocketNegotiatedProtocol
public IList`1<string> WebSocketRequestedProtocols
public void .ctor(HttpContext httpContext)
public Exception[] get_AllErrors()
public HttpApplicationStateBase get_Application()
public HttpApplication get_ApplicationInstance()
public void set_ApplicationInstance(HttpApplication value)
public Cache get_Cache()
public IHttpHandler get_CurrentHandler()
public RequestNotification get_CurrentNotification()
public Exception get_Error()
public IHttpHandler get_Handler()
public void set_Handler(IHttpHandler value)
public bool get_IsCustomErrorEnabled()
public bool get_IsDebuggingEnabled()
public bool get_IsPostNotification()
public IDictionary get_Items()
public IHttpHandler get_PreviousHandler()
public ProfileBase get_Profile()
public HttpRequestBase get_Request()
public HttpResponseBase get_Response()
public HttpServerUtilityBase get_Server()
public HttpSessionStateBase get_Session()
public bool get_SkipAuthorization()
public void set_SkipAuthorization(bool value)
public DateTime get_Timestamp()
public TraceContext get_Trace()
public IPrincipal get_User()
public void set_User(IPrincipal value)
public void AddError(Exception errorInfo)
public void ClearError()
public object GetGlobalResourceObject(string classKey, string resourceKey)
public object GetGlobalResourceObject(string classKey, string resourceKey, CultureInfo culture)
public object GetLocalResourceObject(string virtualPath, string resourceKey)
public object GetLocalResourceObject(string virtualPath, string resourceKey, CultureInfo culture)
public object GetSection(string sectionName)
public object GetService(Type serviceType)
public void RemapHandler(IHttpHandler handler)
public void RewritePath(string path)
public void RewritePath(string path, bool rebaseClientPath)
public void RewritePath(string filePath, string pathInfo, string queryString)
public void RewritePath(string filePath, string pathInfo, string queryString, bool setClientFilePath)
public void SetSessionStateBehavior(SessionStateBehavior sessionStateBehavior)
public bool get_AllowAsyncDuringSyncStages()
public void set_AllowAsyncDuringSyncStages(bool value)
public AsyncPreloadModeFlags get_AsyncPreloadMode()
public void set_AsyncPreloadMode(AsyncPreloadModeFlags value)
public bool get_IsWebSocketRequest()
public bool get_IsWebSocketRequestUpgrading()
public PageInstrumentationService get_PageInstrumentation()
public bool get_ThreadAbortOnTimeout()
public void set_ThreadAbortOnTimeout(bool value)
public string get_WebSocketNegotiatedProtocol()
public IList`1<string> get_WebSocketRequestedProtocols()
public void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc)
public void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc, AspNetWebSocketOptions options)
public ISubscriptionToken AddOnRequestCompleted(Action`1<HttpContextBase> callback)
public ISubscriptionToken DisposeOnPipelineCompleted(IDisposable target)
}
public System.Web.HttpCookie : object {
private string path
private string domain
private DateTime expires
private string name
private CookieFlags flags
private NameValueCollection values
public string Domain
public DateTime Expires
public bool HasKeys
public string Item
public string Name
public string Path
public bool Secure
public string Value
public NameValueCollection Values
public bool HttpOnly
public bool Shareable
internal void .ctor(string name, string value, string path, DateTime expires)
public void .ctor(string name)
public void .ctor(string name, string value)
internal string GetCookieHeaderValue()
public string get_Domain()
public void set_Domain(string value)
public DateTime get_Expires()
public void set_Expires(DateTime value)
public bool get_HasKeys()
public string get_Item(string key)
public void set_Item(string key, string value)
public string get_Name()
public void set_Name(string value)
public string get_Path()
public void set_Path(string value)
public bool get_Secure()
public void set_Secure(bool value)
public string get_Value()
public void set_Value(string value)
public NameValueCollection get_Values()
public bool get_HttpOnly()
public void set_HttpOnly(bool value)
public bool get_Shareable()
public void set_Shareable(bool value)
public bool TryParse(string input, HttpCookie& result)
}
public System.Web.HttpCookieCollection : NameObjectCollectionBase {
private bool auto_fill
public HttpCookie Item
public HttpCookie Item
public String[] AllKeys
internal void .ctor(HttpResponse Response, bool ReadOnly)
internal void .ctor(bool auto_fill, bool read_only)
internal void .ctor(string cookies)
public void Add(HttpCookie cookie)
public void Clear()
public void CopyTo(Array dest, int index)
public string GetKey(int index)
public void Remove(string name)
public void Set(HttpCookie cookie)
public HttpCookie Get(int index)
public HttpCookie Get(string name)
public HttpCookie get_Item(int index)
public HttpCookie get_Item(string name)
public String[] get_AllKeys()
}
public System.Web.HttpCookieMode : Enum {
public int value__
public HttpCookieMode UseUri
public HttpCookieMode UseCookies
public HttpCookieMode AutoDetect
public HttpCookieMode UseDeviceProfile
}
public System.Web.HttpException : ExternalException {
private string DEFAULT_DESCRIPTION_TEXT
private string ERROR_404_DESCRIPTION
private int webEventCode
private int http_code
private string resource_name
private string description
private ExceptionPageTemplate pageTemplate
private string DoubleFaultExceptionMessage
private ExceptionPageTemplate PageTemplate
public int WebEventCode
internal string Description
private ExceptionPageTemplate get_PageTemplate()
public int get_WebEventCode()
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(int httpCode, string message)
internal void .ctor(int httpCode, string message, string resourceName)
internal void .ctor(int httpCode, string message, string resourceName, string description)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void .ctor(int httpCode, string message, int hr)
public void .ctor(string message, int hr)
public void .ctor(int httpCode, string message, Exception innerException)
internal void .ctor(int httpCode, string message, Exception innerException, string resourceName)
private ExceptionPageTemplate GetPageTemplate()
public string GetHtmlErrorMessage()
internal string get_Description()
internal void set_Description(string value)
internal HttpException NewWithCode(string message, int webEventCode)
internal HttpException NewWithCode(string message, Exception innerException, int webEventCode)
internal HttpException NewWithCode(int httpCode, string message, int webEventCode)
internal HttpException NewWithCode(int httpCode, string message, Exception innerException, string resourceName, int webEventCode)
internal HttpException NewWithCode(int httpCode, string message, string resourceName, int webEventCode)
internal HttpException NewWithCode(int httpCode, string message, Exception innerException, int webEventCode)
internal void SetWebEventCode(int webEventCode)
private string FormatFullStackTrace()
private void FillHtmlizedErrorValues(ExceptionPageTemplateValues values, HtmlizedException exc, ExceptionPageTemplateType& pageType)
private void FillDefaultCustomErrorValues(ExceptionPageTemplateValues values)
private void FillDefaultErrorValues(bool showTrace, bool showExceptionType, Exception baseEx, ExceptionPageTemplateValues values)
private string HtmlEncode(string s)
private string FormatSourceFile(string filename)
private void FormatSource(StringBuilder builder, StringBuilder longVersion, HtmlizedException e)
private void WriteCompilationSource(StringBuilder builder, StringBuilder longVersion, HtmlizedException e)
private void WritePageSource(StringBuilder builder, HtmlizedException e)
public int GetHttpCode()
public HttpException CreateFromLastError(string message)
}
public System.Web.HttpFileCollection : NameObjectCollectionBase {
public HttpPostedFile Item
public HttpPostedFile Item
public String[] AllKeys
internal void AddFile(string name, HttpPostedFile file)
public void CopyTo(Array dest, int index)
public string GetKey(int index)
public HttpPostedFile Get(int index)
public HttpPostedFile Get(string name)
public HttpPostedFile get_Item(string name)
public HttpPostedFile get_Item(int index)
public String[] get_AllKeys()
public IList`1<HttpPostedFile> GetMultiple(string name)
}
public System.Web.HttpFileCollectionBase : NameObjectCollectionBase {
public String[] AllKeys
public int Count
public bool IsSynchronized
public object SyncRoot
public HttpPostedFileBase Item
public HttpPostedFileBase Item
public String[] get_AllKeys()
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
public HttpPostedFileBase get_Item(string name)
public HttpPostedFileBase get_Item(int index)
public void CopyTo(Array dest, int index)
public HttpPostedFileBase Get(int index)
public HttpPostedFileBase Get(string name)
public IList`1<HttpPostedFileBase> GetMultiple(string name)
public IEnumerator GetEnumerator()
public string GetKey(int index)
}
public System.Web.HttpFileCollectionWrapper : HttpFileCollectionBase {
private HttpFileCollection w
public String[] AllKeys
public int Count
public bool IsSynchronized
public HttpPostedFileBase Item
public HttpPostedFileBase Item
public KeysCollection Keys
public object SyncRoot
public void .ctor(HttpFileCollection httpFileCollection)
public String[] get_AllKeys()
public int get_Count()
public bool get_IsSynchronized()
public HttpPostedFileBase get_Item(int index)
public HttpPostedFileBase get_Item(string name)
public KeysCollection get_Keys()
public object get_SyncRoot()
public void CopyTo(Array dest, int index)
public HttpPostedFileBase Get(int index)
public HttpPostedFileBase Get(string name)
public IEnumerator GetEnumerator()
public string GetKey(int index)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void OnDeserialization(object sender)
}
internal System.Web.HttpForbiddenHandler : object {
public bool IsReusable
public void ProcessRequest(HttpContext context)
public bool get_IsReusable()
}
internal System.Web.HttpHeaderCollection : NameValueCollection {
private Nullable`1<bool> headerCheckingEnabled
private bool HeaderCheckingEnabled
private bool get_HeaderCheckingEnabled()
public void Add(string name, string value)
public void Set(string name, string value)
private void EncodeAndSetHeader(string name, string value, bool replaceExisting)
}
internal System.Web.HttpMethodNotAllowedHandler : object {
public bool IsReusable
public void ProcessRequest(HttpContext context)
public bool get_IsReusable()
}
public System.Web.HttpModuleCollection : NameObjectCollectionBase {
public IHttpModule Item
public IHttpModule Item
public String[] AllKeys
internal void AddModule(string key, IHttpModule m)
public void CopyTo(Array dest, int index)
public string GetKey(int index)
public IHttpModule Get(int index)
public IHttpModule Get(string name)
public IHttpModule get_Item(string name)
public IHttpModule get_Item(int index)
public String[] get_AllKeys()
}
internal System.Web.HttpMultipart : object {
private Stream data
private string boundary
private Byte[] boundary_bytes
private Byte[] buffer
private bool at_eof
private Encoding encoding
private StringBuilder sb
private byte HYPHEN
private byte LF
private byte CR
public void .ctor(Stream data, string b, Encoding encoding)
private string ReadLine()
private string GetContentDispositionAttribute(string l, string name)
private string GetContentDispositionAttributeWithEncoding(string l, string name)
private bool ReadBoundary()
private string ReadHeaders()
private bool CompareBytes(Byte[] orig, Byte[] other)
private long MoveToNextBoundary()
public Element ReadNextElement()
private string StripPath(string path)
}
internal System.Web.HttpNotFoundHandler : object {
public bool IsReusable
public void ProcessRequest(HttpContext context)
public bool get_IsReusable()
}
internal System.Web.HttpNotImplementedHandler : object {
public bool IsReusable
public void ProcessRequest(HttpContext context)
public bool get_IsReusable()
}
internal System.Web.HttpParamsCollection : WebROCollection {
private NameValueCollection _queryString
private NameValueCollection _form
private NameValueCollection _serverVariables
private HttpCookieCollection _cookies
private bool _merged
public String[] AllKeys
public int Count
public void .ctor(NameValueCollection queryString, NameValueCollection form, NameValueCollection serverVariables, HttpCookieCollection cookies)
public string Get(string name)
private void MergeCollections()
public string Get(int index)
public string GetKey(int index)
public String[] GetValues(int index)
public String[] GetValues(string name)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public String[] get_AllKeys()
public int get_Count()
}
public System.Web.HttpParseException : HttpException {
private int line
private string virtualPath
private ParserErrorCollection errors
public string FileName
public int Line
public string VirtualPath
public ParserErrorCollection ParserErrors
internal void .ctor(string message, string virtualPath, int line)
private void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(string message, Exception innerException, string virtualPath, string sourceCode, int line)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public string get_FileName()
public int get_Line()
public string get_VirtualPath()
public ParserErrorCollection get_ParserErrors()
}
public System.Web.HttpPostedFile : object {
private string name
private string content_type
private Stream stream
public string ContentType
public int ContentLength
public string FileName
public Stream InputStream
internal void .ctor(string name, string content_type, Stream base_stream, long offset, long length)
public string get_ContentType()
public int get_ContentLength()
public string get_FileName()
public Stream get_InputStream()
public void SaveAs(string filename)
}
public System.Web.HttpPostedFileBase : object {
public int ContentLength
public string ContentType
public string FileName
public Stream InputStream
public int get_ContentLength()
public string get_ContentType()
public string get_FileName()
public Stream get_InputStream()
public void SaveAs(string filename)
}
public System.Web.HttpPostedFileWrapper : HttpPostedFileBase {
private HttpPostedFile _file
public int ContentLength
public string ContentType
public string FileName
public Stream InputStream
public void .ctor(HttpPostedFile httpPostedFile)
public int get_ContentLength()
public string get_ContentType()
public string get_FileName()
public Stream get_InputStream()
public void SaveAs(string filename)
}
internal System.Web.HttpRawResponse : object {
private int _statusCode
private string _statusDescr
private ArrayList _headers
private ArrayList _buffers
private bool _hasSubstBlocks
internal int StatusCode
internal string StatusDescription
internal ArrayList Headers
internal ArrayList Buffers
internal bool HasSubstBlocks
internal void .ctor(int statusCode, string statusDescription, ArrayList headers, ArrayList buffers, bool hasSubstBlocks)
internal int get_StatusCode()
internal string get_StatusDescription()
internal ArrayList get_Headers()
internal ArrayList get_Buffers()
internal bool get_HasSubstBlocks()
}
public System.Web.HttpRequest : object {
private HttpWorkerRequest worker_request
private HttpContext context
private WebROCollection query_string_nvc
private string orig_url
private UriBuilder url_components
private string client_target
private HttpBrowserCapabilities browser_capabilities
private string file_path
private string base_virtual_dir
private string root_virtual_dir
private string client_file_path
private string content_type
private int content_length
private Encoding encoding
private string current_exe_path
private string physical_path
private string unescaped_path
private string original_path
private string path_info
private string path_info_unvalidated
private string raw_url
private string raw_url_unvalidated
private WebROCollection all_params
private NameValueCollection headers
private WebROCollection headers_unvalidated
private Stream input_stream
private InputFilterStream input_filter
private Stream filter
private HttpCookieCollection cookies
private HttpCookieCollection cookies_unvalidated
private string http_method
private WebROCollection form
private HttpFileCollection files
private ServerVariablesCollection server_variables
private HttpClientCertificate client_cert
private string request_type
private String[] accept_types
private String[] user_languages
private Uri cached_url
private TempFileStream request_file
private IPAddress[] host_addresses
private bool validate_cookies
private bool validate_query_string
private bool validate_form
private bool checked_cookies
private bool checked_query_string
private bool checked_form
private UrlMappingCollection urlMappings
private Char[] queryTrimChars
private bool lazyFormValidation
private bool lazyQueryStringValidation
private bool inputValidationEnabled
private RequestContext requestContext
private BufferlessInputStream bufferlessInputStream
private bool validateRequestNewMode
private Char[] <RequestPathInvalidCharacters>k__BackingField
private string anonymous_id
private int INPUT_BUFFER_SIZE
internal bool ValidateRequestNewMode
internal bool InputValidationEnabled
private Char[] RequestPathInvalidCharacters
internal UriBuilder UrlComponents
public String[] AcceptTypes
public WindowsIdentity LogonUserIdentity
public string AnonymousID
public string ApplicationPath
public HttpBrowserCapabilities Browser
internal bool BrowserMightHaveSpecialWriter
internal bool BrowserMightHaveAdapters
public HttpClientCertificate ClientCertificate
public Encoding ContentEncoding
public int ContentLength
public string ContentType
internal HttpCookieCollection CookiesNoValidation
public HttpCookieCollection Cookies
public string CurrentExecutionFilePath
public string CurrentExecutionFilePathExtension
public string AppRelativeCurrentExecutionFilePath
public string FilePath
internal string ClientFilePath
internal string BaseVirtualDir
public HttpFileCollection Files
public Stream Filter
internal WebROCollection FormUnvalidated
public NameValueCollection Form
internal NameValueCollection HeadersNoValidation
public NameValueCollection Headers
public string HttpMethod
public RequestContext RequestContext
public ChannelBinding HttpChannelBinding
public Stream InputStream
public bool IsAuthenticated
public bool IsSecureConnection
public string Item
public NameValueCollection Params
internal string PathNoValidation
public string Path
internal string PathInfoNoValidation
public string PathInfo
public string PhysicalApplicationPath
public string PhysicalPath
internal string RootVirtualDir
internal WebROCollection QueryStringUnvalidated
public NameValueCollection QueryString
internal string RawUrlUnvalidated
public string RawUrl
public string RequestType
public NameValueCollection ServerVariables
public CancellationToken TimedOutToken
public int TotalBytes
public UnvalidatedRequestValues Unvalidated
public Uri Url
public Uri UrlReferrer
public string UserAgent
public string UserHostAddress
public string UserHostName
public String[] UserLanguages
internal string ClientTarget
public bool IsLocal
internal string QueryStringRaw
internal HttpWorkerRequest WorkerRequest
internal HttpContext Context
public ReadEntityBodyMode ReadEntityBodyMode
public ITlsTokenBindingInfo TlsTokenBindingInfo
internal bool get_ValidateRequestNewMode()
internal bool get_InputValidationEnabled()
private Char[] get_RequestPathInvalidCharacters()
private void set_RequestPathInvalidCharacters(Char[] value)
private Char[] CharsFromList(string list)
public void .ctor(string filename, string url, string queryString)
internal void .ctor(HttpWorkerRequest worker_request, HttpContext context)
internal UriBuilder get_UrlComponents()
private void BuildUrlComponents(string path, string query)
internal string ApplyUrlMapping(string url)
private String[] SplitHeader(int header_index)
public String[] get_AcceptTypes()
public WindowsIdentity get_LogonUserIdentity()
public string get_AnonymousID()
internal void set_AnonymousID(string value)
public string get_ApplicationPath()
public HttpBrowserCapabilities get_Browser()
public void set_Browser(HttpBrowserCapabilities value)
internal bool get_BrowserMightHaveSpecialWriter()
internal bool get_BrowserMightHaveAdapters()
public HttpClientCertificate get_ClientCertificate()
internal string GetParameter(string header, string attr)
public Encoding get_ContentEncoding()
public void set_ContentEncoding(Encoding value)
public int get_ContentLength()
public string get_ContentType()
public void set_ContentType(string value)
internal HttpCookieCollection get_CookiesNoValidation()
public HttpCookieCollection get_Cookies()
public string get_CurrentExecutionFilePath()
public string get_CurrentExecutionFilePathExtension()
public string get_AppRelativeCurrentExecutionFilePath()
public string get_FilePath()
internal string get_ClientFilePath()
internal void set_ClientFilePath(string value)
internal string get_BaseVirtualDir()
public HttpFileCollection get_Files()
public Stream get_Filter()
public void set_Filter(Stream value)
private Stream GetSubStream(Stream stream)
private void EndSubStream(Stream stream)
private void LoadMultiPart()
private void AddRawKeyValue(StringBuilder key, StringBuilder value)
private void LoadWwwForm()
private bool IsContentType(string ct, bool starts_with)
internal WebROCollection get_FormUnvalidated()
public NameValueCollection get_Form()
internal NameValueCollection get_HeadersNoValidation()
public NameValueCollection get_Headers()
public string get_HttpMethod()
private void DoFilter(Byte[] buffer)
private TempFileStream GetTempStream()
private void MakeInputStream()
internal void ReleaseResources()
public RequestContext get_RequestContext()
internal void set_RequestContext(RequestContext value)
public ChannelBinding get_HttpChannelBinding()
public Stream GetBufferedInputStream()
public Stream GetBufferlessInputStream()
public Stream GetBufferlessInputStream(bool disableMaxRequestLength)
public Stream get_InputStream()
public bool get_IsAuthenticated()
public bool get_IsSecureConnection()
public string get_Item(string key)
public NameValueCollection get_Params()
internal string get_PathNoValidation()
public string get_Path()
internal string get_PathInfoNoValidation()
public string get_PathInfo()
public string get_PhysicalApplicationPath()
public string get_PhysicalPath()
internal string get_RootVirtualDir()
internal WebROCollection get_QueryStringUnvalidated()
public NameValueCollection get_QueryString()
internal string get_RawUrlUnvalidated()
public string get_RawUrl()
public string get_RequestType()
public void set_RequestType(string value)
public NameValueCollection get_ServerVariables()
public CancellationToken get_TimedOutToken()
public int get_TotalBytes()
public UnvalidatedRequestValues get_Unvalidated()
public Uri get_Url()
public Uri get_UrlReferrer()
public string get_UserAgent()
public string get_UserHostAddress()
public string get_UserHostName()
public String[] get_UserLanguages()
public Byte[] BinaryRead(int count)
public Int32[] MapImageCoordinates(string imageFieldName)
public Double[] MapRawImageCoordinates(string imageFieldName)
private String[] GetImageCoordinatesParameters(string imageFieldName)
public string MapPath(string virtualPath)
public string MapPath(string virtualPath, string baseVirtualDir, bool allowCrossAppMapping)
public void SaveAs(string filename, bool includeHeaders)
public void ValidateInput()
internal void Validate()
internal string get_ClientTarget()
internal void set_ClientTarget(string value)
public bool get_IsLocal()
internal void SetFilePath(string path)
internal void SetCurrentExePath(string path)
internal void SetPathInfo(string pi)
internal void SetFormCollection(WebROCollection coll, bool lazyValidation)
internal void SetQueryStringCollection(WebROCollection coll, bool lazyValidation)
internal void SetHeader(string name, string value)
internal string get_QueryStringRaw()
internal void set_QueryStringRaw(string value)
internal void SetForm(WebROCollection coll)
internal HttpWorkerRequest get_WorkerRequest()
internal HttpContext get_Context()
internal void set_Context(HttpContext value)
private void ValidateNameValueCollection(string name, NameValueCollection coll)
private void ValidateNameValueCollection(string name, NameValueCollection coll, RequestValidationSource source)
public void InsertEntityBody()
public void InsertEntityBody(Byte[] buffer, int offset, int count)
private void ValidateCookieCollection(HttpCookieCollection cookies)
private void ThrowValidationException(string name, string key, string value)
internal void ValidateString(string key, string value, RequestValidationSource source)
internal bool IsInvalidString(string val)
internal bool IsInvalidString(string val, Int32& validationFailureIndex)
private IPAddress[] GetLocalHostAddresses()
public ReadEntityBodyMode get_ReadEntityBodyMode()
public ITlsTokenBindingInfo get_TlsTokenBindingInfo()
public void Abort()
}
public System.Web.HttpRequestBase : object {
public String[] AcceptTypes
public string ApplicationPath
public string AnonymousID
public string AppRelativeCurrentExecutionFilePath
public HttpBrowserCapabilitiesBase Browser
public ChannelBinding HttpChannelBinding
public HttpClientCertificate ClientCertificate
public Encoding ContentEncoding
public int ContentLength
public string ContentType
public HttpCookieCollection Cookies
public string CurrentExecutionFilePath
public string CurrentExecutionFilePathExtension
public string FilePath
public HttpFileCollectionBase Files
public Stream Filter
public NameValueCollection Form
public string HttpMethod
public Stream InputStream
public bool IsAuthenticated
public bool IsLocal
public bool IsSecureConnection
public WindowsIdentity LogonUserIdentity
public NameValueCollection Params
public string Path
public string PathInfo
public string PhysicalApplicationPath
public string PhysicalPath
public string RawUrl
public ReadEntityBodyMode ReadEntityBodyMode
public RequestContext RequestContext
public string RequestType
public NameValueCollection ServerVariables
public CancellationToken TimedOutToken
public ITlsTokenBindingInfo TlsTokenBindingInfo
public int TotalBytes
public UnvalidatedRequestValuesBase Unvalidated
public Uri Url
public Uri UrlReferrer
public string UserAgent
public String[] UserLanguages
public string UserHostAddress
public string UserHostName
public NameValueCollection Headers
public NameValueCollection QueryString
public string Item
public String[] get_AcceptTypes()
public string get_ApplicationPath()
public string get_AnonymousID()
public string get_AppRelativeCurrentExecutionFilePath()
public HttpBrowserCapabilitiesBase get_Browser()
public ChannelBinding get_HttpChannelBinding()
public HttpClientCertificate get_ClientCertificate()
public Encoding get_ContentEncoding()
public void set_ContentEncoding(Encoding value)
public int get_ContentLength()
public string get_ContentType()
public void set_ContentType(string value)
public HttpCookieCollection get_Cookies()
public string get_CurrentExecutionFilePath()
public string get_CurrentExecutionFilePathExtension()
public string get_FilePath()
public HttpFileCollectionBase get_Files()
public Stream get_Filter()
public void set_Filter(Stream value)
public NameValueCollection get_Form()
public string get_HttpMethod()
public Stream get_InputStream()
public bool get_IsAuthenticated()
public bool get_IsLocal()
public bool get_IsSecureConnection()
public WindowsIdentity get_LogonUserIdentity()
public NameValueCollection get_Params()
public string get_Path()
public string get_PathInfo()
public string get_PhysicalApplicationPath()
public string get_PhysicalPath()
public string get_RawUrl()
public ReadEntityBodyMode get_ReadEntityBodyMode()
public RequestContext get_RequestContext()
public void set_RequestContext(RequestContext value)
public string get_RequestType()
public void set_RequestType(string value)
public NameValueCollection get_ServerVariables()
public CancellationToken get_TimedOutToken()
public ITlsTokenBindingInfo get_TlsTokenBindingInfo()
public int get_TotalBytes()
public UnvalidatedRequestValuesBase get_Unvalidated()
public Uri get_Url()
public Uri get_UrlReferrer()
public string get_UserAgent()
public String[] get_UserLanguages()
public string get_UserHostAddress()
public string get_UserHostName()
public NameValueCollection get_Headers()
public NameValueCollection get_QueryString()
public string get_Item(string key)
public void Abort()
public Byte[] BinaryRead(int count)
public Stream GetBufferedInputStream()
public Stream GetBufferlessInputStream()
public Stream GetBufferlessInputStream(bool disableMaxRequestLength)
public void InsertEntityBody()
public void InsertEntityBody(Byte[] buffer, int offset, int count)
public Int32[] MapImageCoordinates(string imageFieldName)
public Double[] MapRawImageCoordinates(string imageFieldName)
public string MapPath(string virtualPath)
public string MapPath(string virtualPath, string baseVirtualDir, bool allowCrossAppMapping)
public void ValidateInput()
public void SaveAs(string filename, bool includeHeaders)
}
public System.Web.HttpRequestValidationException : HttpException {
internal string Description
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
internal string get_Description()
}
public System.Web.HttpRequestWrapper : HttpRequestBase {
private HttpRequest w
public String[] AcceptTypes
public string AnonymousID
public string ApplicationPath
public string AppRelativeCurrentExecutionFilePath
public HttpBrowserCapabilitiesBase Browser
public HttpClientCertificate ClientCertificate
public Encoding ContentEncoding
public int ContentLength
public string ContentType
public HttpCookieCollection Cookies
public string CurrentExecutionFilePath
public string FilePath
public HttpFileCollectionBase Files
public Stream Filter
public NameValueCollection Form
public NameValueCollection Headers
public string HttpMethod
public ChannelBinding HttpChannelBinding
public Stream InputStream
public bool IsAuthenticated
public bool IsLocal
public bool IsSecureConnection
public string Item
public WindowsIdentity LogonUserIdentity
public NameValueCollection Params
public string Path
public string PathInfo
public string PhysicalApplicationPath
public string PhysicalPath
public NameValueCollection QueryString
public string RawUrl
public string RequestType
public RequestContext RequestContext
public NameValueCollection ServerVariables
public CancellationToken TimedOutToken
public int TotalBytes
public UnvalidatedRequestValuesBase Unvalidated
public ReadEntityBodyMode ReadEntityBodyMode
public Uri Url
public Uri UrlReferrer
public string UserAgent
public string UserHostAddress
public string UserHostName
public String[] UserLanguages
public void .ctor(HttpRequest httpRequest)
public String[] get_AcceptTypes()
public string get_AnonymousID()
public string get_ApplicationPath()
public string get_AppRelativeCurrentExecutionFilePath()
public HttpBrowserCapabilitiesBase get_Browser()
public HttpClientCertificate get_ClientCertificate()
public Encoding get_ContentEncoding()
public void set_ContentEncoding(Encoding value)
public int get_ContentLength()
public string get_ContentType()
public void set_ContentType(string value)
public HttpCookieCollection get_Cookies()
public string get_CurrentExecutionFilePath()
public string get_FilePath()
public HttpFileCollectionBase get_Files()
public Stream get_Filter()
public void set_Filter(Stream value)
public NameValueCollection get_Form()
public NameValueCollection get_Headers()
public Stream GetBufferedInputStream()
public Stream GetBufferlessInputStream()
public Stream GetBufferlessInputStream(bool disableMaxRequestLength)
public string get_HttpMethod()
public ChannelBinding get_HttpChannelBinding()
public Stream get_InputStream()
public bool get_IsAuthenticated()
public bool get_IsLocal()
public bool get_IsSecureConnection()
public string get_Item(string key)
public WindowsIdentity get_LogonUserIdentity()
public NameValueCollection get_Params()
public string get_Path()
public string get_PathInfo()
public string get_PhysicalApplicationPath()
public string get_PhysicalPath()
public NameValueCollection get_QueryString()
public string get_RawUrl()
public string get_RequestType()
public void set_RequestType(string value)
public RequestContext get_RequestContext()
public void set_RequestContext(RequestContext value)
public NameValueCollection get_ServerVariables()
public CancellationToken get_TimedOutToken()
public int get_TotalBytes()
public UnvalidatedRequestValuesBase get_Unvalidated()
public ReadEntityBodyMode get_ReadEntityBodyMode()
public Uri get_Url()
public Uri get_UrlReferrer()
public string get_UserAgent()
public string get_UserHostAddress()
public string get_UserHostName()
public String[] get_UserLanguages()
public void Abort()
public Byte[] BinaryRead(int count)
public Int32[] MapImageCoordinates(string imageFieldName)
public string MapPath(string virtualPath)
public string MapPath(string virtualPath, string baseVirtualDir, bool allowCrossAppMapping)
public Double[] MapRawImageCoordinates(string imageFieldName)
public void SaveAs(string filename, bool includeHeaders)
public void ValidateInput()
}
public System.Web.HttpResponse : object {
internal HttpWorkerRequest WorkerRequest
internal HttpResponseStream output_stream
internal bool buffer
private ArrayList fileDependencies
private HttpContext context
private TextWriter writer
private HttpCachePolicy cache_policy
private Encoding encoding
private HttpCookieCollection cookies
private int status_code
private string status_description
private string content_type
private string charset
private bool charset_set
private CachedRawResponse cached_response
private string user_cache_control
private string redirect_location
private string version_header
private bool version_header_checked
private long content_length
private HttpHeaderCollection headers
private bool headers_sent
private NameValueCollection cached_headers
private string transfer_encoding
internal bool use_chunked
private bool closed
private bool completed
internal bool suppress_content
private string app_path_mod
private bool is_request_being_redirected
private Encoding headerEncoding
private int <SubStatusCode>k__BackingField
private bool <SuppressFormsAuthenticationRedirect>k__BackingField
private bool <TrySkipIisCustomErrors>k__BackingField
private int bufLen
internal string VersionHeader
internal HttpContext Context
internal String[] FileDependencies
private ArrayList FileDependenciesArray
public bool Buffer
public bool BufferOutput
public Encoding ContentEncoding
public string ContentType
public string Charset
public HttpCookieCollection Cookies
public int Expires
public DateTime ExpiresAbsolute
public Stream Filter
public Encoding HeaderEncoding
public NameValueCollection Headers
public bool IsClientConnected
public bool IsRequestBeingRedirected
public TextWriter Output
public Stream OutputStream
public string RedirectLocation
public string Status
public int SubStatusCode
public bool SuppressFormsAuthenticationRedirect
public bool TrySkipIisCustomErrors
public int StatusCode
public string StatusDescription
public bool SuppressContent
internal bool HeadersSent
internal bool IsCached
public HttpCachePolicy Cache
public string CacheControl
public CancellationToken ClientDisconnectedToken
public bool HeadersWritten
public bool SupportsAsyncFlush
public bool SuppressDefaultCacheControlHeader
public void .ctor(TextWriter writer)
internal void .ctor(HttpWorkerRequest worker_request, HttpContext context)
internal TextWriter SetTextWriter(TextWriter writer)
internal string get_VersionHeader()
internal HttpContext get_Context()
internal void set_Context(HttpContext value)
internal String[] get_FileDependencies()
private ArrayList get_FileDependenciesArray()
public bool get_Buffer()
public void set_Buffer(bool value)
public bool get_BufferOutput()
public void set_BufferOutput(bool value)
public Encoding get_ContentEncoding()
public void set_ContentEncoding(Encoding value)
public string get_ContentType()
public void set_ContentType(string value)
public string get_Charset()
public void set_Charset(string value)
public HttpCookieCollection get_Cookies()
public int get_Expires()
public void set_Expires(int value)
public DateTime get_ExpiresAbsolute()
public void set_ExpiresAbsolute(DateTime value)
public Stream get_Filter()
public void set_Filter(Stream value)
public Encoding get_HeaderEncoding()
public void set_HeaderEncoding(Encoding value)
public NameValueCollection get_Headers()
public bool get_IsClientConnected()
public bool get_IsRequestBeingRedirected()
public TextWriter get_Output()
public void set_Output(TextWriter value)
public Stream get_OutputStream()
public string get_RedirectLocation()
public void set_RedirectLocation(string value)
public string get_Status()
public void set_Status(string value)
public int get_SubStatusCode()
public void set_SubStatusCode(int value)
public bool get_SuppressFormsAuthenticationRedirect()
public void set_SuppressFormsAuthenticationRedirect(bool value)
public bool get_TrySkipIisCustomErrors()
public void set_TrySkipIisCustomErrors(bool value)
public int get_StatusCode()
public void set_StatusCode(int value)
public string get_StatusDescription()
public void set_StatusDescription(string value)
public bool get_SuppressContent()
public void set_SuppressContent(bool value)
public void AddCacheDependency(CacheDependency[] dependencies)
public void AddCacheItemDependencies(String[] cacheKeys)
public void AddCacheItemDependencies(ArrayList cacheKeys)
public void AddCacheItemDependency(string cacheKey)
public void AddFileDependencies(ArrayList filenames)
public void AddFileDependencies(String[] filenames)
public void AddFileDependency(string filename)
public void AddHeader(string name, string value)
public void AppendCookie(HttpCookie cookie)
public void AppendHeader(string name, string value)
public void AppendToLog(string param)
public string ApplyAppPathModifier(string virtualPath)
public void BinaryWrite(Byte[] buffer)
internal void BinaryWrite(Byte[] buffer, int start, int len)
public void Clear()
public void ClearContent()
public void ClearHeaders()
internal bool get_HeadersSent()
public void Close()
public void DisableKernelCache()
public void End()
private void AddHeadersNoCache(NameValueCollection write_headers, bool final_flush)
internal void WriteHeaders(bool final_flush)
internal void DoFilter(bool close)
internal void Flush(bool final_flush)
public void Flush()
public void Pics(string value)
private void Redirect(string url, bool endResponse, int code)
public void Redirect(string url)
public void Redirect(string url, bool endResponse)
public void RedirectPermanent(string url)
public void RedirectPermanent(string url, bool endResponse)
public void RedirectToRoute(object routeValues)
public void RedirectToRoute(RouteValueDictionary routeValues)
public void RedirectToRoute(string routeName)
public void RedirectToRoute(string routeName, object routeValues)
public void RedirectToRoute(string routeName, RouteValueDictionary routeValues)
public void RedirectToRoutePermanent(object routeValues)
public void RedirectToRoutePermanent(RouteValueDictionary routeValues)
public void RedirectToRoutePermanent(string routeName)
public void RedirectToRoutePermanent(string routeName, object routeValues)
public void RedirectToRoutePermanent(string routeName, RouteValueDictionary routeValues)
private void RedirectToRoute(string callerName, string routeName, RouteValueDictionary routeValues, int redirectCode, bool endResponse)
public void RemoveOutputCacheItem(string path, string providerName)
public void RemoveOutputCacheItem(string path)
public void SetCookie(HttpCookie cookie)
public void Write(char ch)
public void Write(object obj)
public void Write(string s)
public void Write(Char[] buffer, int index, int count)
private bool IsFileSystemDirSeparator(char ch)
private string GetNormalizedFileName(string fn)
internal void WriteFile(FileStream fs, long offset, long size)
public void WriteFile(string filename)
public void WriteFile(string filename, bool readIntoMemory)
public void WriteFile(IntPtr fileHandle, long offset, long size)
public void WriteFile(string filename, long offset, long size)
public void WriteSubstitution(HttpResponseSubstitutionCallback callback)
public void TransmitFile(string filename)
internal void TransmitFile(string filename, bool final_flush)
public void TransmitFile(string filename, long offset, long length)
internal void TransmitFile(VirtualFile vf)
internal void TransmitFile(VirtualFile vf, bool final_flush)
internal void SetAppPathModifier(string app_modifier)
internal void SetCachedHeaders(NameValueCollection headers)
internal bool get_IsCached()
internal void set_IsCached(bool value)
public HttpCachePolicy get_Cache()
internal CachedRawResponse GetCachedResponse()
public void set_CacheControl(string value)
public string get_CacheControl()
internal int GetOutputByteCount()
internal void ReleaseResources()
public CancellationToken get_ClientDisconnectedToken()
public bool get_HeadersWritten()
public bool get_SupportsAsyncFlush()
public bool get_SuppressDefaultCacheControlHeader()
public void set_SuppressDefaultCacheControlHeader(bool value)
public ISubscriptionToken AddOnSendingHeaders(Action`1<HttpContext> callback)
public IAsyncResult BeginFlush(AsyncCallback callback, object state)
public void DisableUserCache()
public void EndFlush(IAsyncResult asyncResult)
public Task FlushAsync()
public void PushPromise(string path)
public void PushPromise(string path, string method, NameValueCollection headers)
}
public System.Web.HttpResponseBase : object {
public bool Buffer
public bool BufferOutput
public HttpCachePolicyBase Cache
public string CacheControl
public string Charset
public CancellationToken ClientDisconnectedToken
public Encoding ContentEncoding
public string ContentType
public HttpCookieCollection Cookies
public int Expires
public DateTime ExpiresAbsolute
public Stream Filter
public NameValueCollection Headers
public bool HeadersWritten
public Encoding HeaderEncoding
public bool IsClientConnected
public bool IsRequestBeingRedirected
public TextWriter Output
public Stream OutputStream
public string RedirectLocation
public string Status
public int StatusCode
public string StatusDescription
public int SubStatusCode
public bool SupportsAsyncFlush
public bool SuppressContent
public bool SuppressDefaultCacheControlHeader
public bool SuppressFormsAuthenticationRedirect
public bool TrySkipIisCustomErrors
public bool get_Buffer()
public void set_Buffer(bool value)
public bool get_BufferOutput()
public void set_BufferOutput(bool value)
public HttpCachePolicyBase get_Cache()
public string get_CacheControl()
public void set_CacheControl(string value)
public string get_Charset()
public void set_Charset(string value)
public CancellationToken get_ClientDisconnectedToken()
public void set_ContentEncoding(Encoding value)
public Encoding get_ContentEncoding()
public string get_ContentType()
public void set_ContentType(string value)
public HttpCookieCollection get_Cookies()
public int get_Expires()
public void set_Expires(int value)
public DateTime get_ExpiresAbsolute()
public void set_ExpiresAbsolute(DateTime value)
public Stream get_Filter()
public void set_Filter(Stream value)
public NameValueCollection get_Headers()
public bool get_HeadersWritten()
public void set_HeaderEncoding(Encoding value)
public Encoding get_HeaderEncoding()
public bool get_IsClientConnected()
public bool get_IsRequestBeingRedirected()
public TextWriter get_Output()
public void set_Output(TextWriter value)
public Stream get_OutputStream()
public string get_RedirectLocation()
public void set_RedirectLocation(string value)
public string get_Status()
public void set_Status(string value)
public int get_StatusCode()
public void set_StatusCode(int value)
public string get_StatusDescription()
public void set_StatusDescription(string value)
public int get_SubStatusCode()
public void set_SubStatusCode(int value)
public bool get_SupportsAsyncFlush()
public bool get_SuppressContent()
public void set_SuppressContent(bool value)
public bool get_SuppressDefaultCacheControlHeader()
public void set_SuppressDefaultCacheControlHeader(bool value)
public bool get_SuppressFormsAuthenticationRedirect()
public void set_SuppressFormsAuthenticationRedirect(bool value)
public bool get_TrySkipIisCustomErrors()
public void set_TrySkipIisCustomErrors(bool value)
public void AddCacheItemDependency(string cacheKey)
public void AddCacheItemDependencies(ArrayList cacheKeys)
public void AddCacheItemDependencies(String[] cacheKeys)
public void AddCacheDependency(CacheDependency[] dependencies)
public void AddFileDependency(string filename)
public void AddFileDependencies(ArrayList filenames)
public void AddFileDependencies(String[] filenames)
public void AddHeader(string name, string value)
public ISubscriptionToken AddOnSendingHeaders(Action`1<HttpContextBase> callback)
public void AppendCookie(HttpCookie cookie)
public void AppendHeader(string name, string value)
public void AppendToLog(string param)
public string ApplyAppPathModifier(string virtualPath)
public IAsyncResult BeginFlush(AsyncCallback callback, object state)
public void BinaryWrite(Byte[] buffer)
public void Clear()
public void ClearContent()
public void ClearHeaders()
public void Close()
public void DisableKernelCache()
public void DisableUserCache()
public void End()
public void EndFlush(IAsyncResult asyncResult)
public void Flush()
public Task FlushAsync()
public void Pics(string value)
public void Redirect(string url)
public void Redirect(string url, bool endResponse)
public void RedirectToRoute(object routeValues)
public void RedirectToRoute(string routeName)
public void RedirectToRoute(RouteValueDictionary routeValues)
public void RedirectToRoute(string routeName, object routeValues)
public void RedirectToRoute(string routeName, RouteValueDictionary routeValues)
public void RedirectToRoutePermanent(object routeValues)
public void RedirectToRoutePermanent(string routeName)
public void RedirectToRoutePermanent(RouteValueDictionary routeValues)
public void RedirectToRoutePermanent(string routeName, object routeValues)
public void RedirectToRoutePermanent(string routeName, RouteValueDictionary routeValues)
public void RedirectPermanent(string url)
public void RedirectPermanent(string url, bool endResponse)
public void RemoveOutputCacheItem(string path)
public void RemoveOutputCacheItem(string path, string providerName)
public void SetCookie(HttpCookie cookie)
public void TransmitFile(string filename)
public void TransmitFile(string filename, long offset, long length)
public void Write(char ch)
public void Write(Char[] buffer, int index, int count)
public void Write(object obj)
public void Write(string s)
public void WriteFile(string filename)
public void WriteFile(string filename, bool readIntoMemory)
public void WriteFile(string filename, long offset, long size)
public void WriteFile(IntPtr fileHandle, long offset, long size)
public void WriteSubstitution(HttpResponseSubstitutionCallback callback)
public void PushPromise(string path)
public void PushPromise(string path, string method, NameValueCollection headers)
}
internal System.Web.HttpResponseStream : Stream {
private Bucket first_bucket
private Bucket cur_bucket
private HttpResponse response
internal long total
private Stream filter
private Byte[] chunk_buffer
private bool filtering
private string notsupported
internal bool HaveFilter
public Stream Filter
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(HttpResponse response)
internal bool get_HaveFilter()
public Stream get_Filter()
public void set_Filter(Stream value)
private void AppendBucket(Bucket b)
public void Flush()
private void SendChunkSize(long l, bool last)
internal void Flush(HttpWorkerRequest wr, bool final_flush)
internal int GetTotalLength()
internal MemoryStream GetData()
public void WriteFile(string f, long offset, long length)
internal void ApplyFilter(bool close)
public void WritePtr(IntPtr ptr, int length)
public void Write(Byte[] buffer, int offset, int count)
private void UnsafeWrite(HttpWorkerRequest wr, Byte[] buffer, int offset, int count)
private void AppendBuffer(Byte[] buffer, int offset, int count)
private void AppendBuffer(IntPtr ptr, int count)
internal void ReleaseResources(bool close_filter)
public void Clear()
private void memcpy4(Byte* dest, Byte* src, int size)
private void memcpy2(Byte* dest, Byte* src, int size)
private void memcpy1(Byte* dest, Byte* src, int size)
private void memcpy(Byte* dest, Byte* src, int size)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public int Read(Byte[] buffer, int offset, int count)
}
public System.Web.HttpResponseSubstitutionCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public string Invoke(HttpContext context)
public IAsyncResult BeginInvoke(HttpContext context, AsyncCallback callback, object object)
public string EndInvoke(IAsyncResult result)
}
public System.Web.HttpResponseWrapper : HttpResponseBase {
private HttpResponse w
public bool Buffer
public bool BufferOutput
public HttpCachePolicyBase Cache
public string CacheControl
public string Charset
public CancellationToken ClientDisconnectedToken
public Encoding ContentEncoding
public string ContentType
public HttpCookieCollection Cookies
public int Expires
public DateTime ExpiresAbsolute
public Stream Filter
public Encoding HeaderEncoding
public NameValueCollection Headers
public bool IsClientConnected
public bool IsRequestBeingRedirected
public TextWriter Output
public Stream OutputStream
public string RedirectLocation
public string Status
public int StatusCode
public string StatusDescription
public int SubStatusCode
public bool SuppressContent
public bool SuppressFormsAuthenticationRedirect
public bool TrySkipIisCustomErrors
public void .ctor(HttpResponse httpResponse)
public bool get_Buffer()
public void set_Buffer(bool value)
public bool get_BufferOutput()
public void set_BufferOutput(bool value)
public HttpCachePolicyBase get_Cache()
public string get_CacheControl()
public void set_CacheControl(string value)
public string get_Charset()
public void set_Charset(string value)
public CancellationToken get_ClientDisconnectedToken()
public Encoding get_ContentEncoding()
public void set_ContentEncoding(Encoding value)
public string get_ContentType()
public void set_ContentType(string value)
public HttpCookieCollection get_Cookies()
public int get_Expires()
public void set_Expires(int value)
public DateTime get_ExpiresAbsolute()
public void set_ExpiresAbsolute(DateTime value)
public Stream get_Filter()
public void set_Filter(Stream value)
public Encoding get_HeaderEncoding()
public void set_HeaderEncoding(Encoding value)
public NameValueCollection get_Headers()
public bool get_IsClientConnected()
public bool get_IsRequestBeingRedirected()
public TextWriter get_Output()
public void set_Output(TextWriter value)
public Stream get_OutputStream()
public string get_RedirectLocation()
public void set_RedirectLocation(string value)
public string get_Status()
public void set_Status(string value)
public int get_StatusCode()
public void set_StatusCode(int value)
public string get_StatusDescription()
public void set_StatusDescription(string value)
public int get_SubStatusCode()
public void set_SubStatusCode(int value)
public bool get_SuppressContent()
public void set_SuppressContent(bool value)
public bool get_SuppressFormsAuthenticationRedirect()
public void set_SuppressFormsAuthenticationRedirect(bool value)
public bool get_TrySkipIisCustomErrors()
public void set_TrySkipIisCustomErrors(bool value)
public void AddCacheDependency(CacheDependency[] dependencies)
public void AddCacheItemDependencies(ArrayList cacheKeys)
public void AddCacheItemDependencies(String[] cacheKeys)
public void AddCacheItemDependency(string cacheKey)
public void AddFileDependencies(ArrayList filenames)
public void AddFileDependencies(String[] filenames)
public void AddFileDependency(string filename)
public void AddHeader(string name, string value)
public void AppendCookie(HttpCookie cookie)
public void AppendHeader(string name, string value)
public void AppendToLog(string param)
public string ApplyAppPathModifier(string virtualPath)
public void BinaryWrite(Byte[] buffer)
public void Clear()
public void ClearContent()
public void ClearHeaders()
public void Close()
public void DisableKernelCache()
public void End()
public void Flush()
public void Pics(string value)
public void Redirect(string url)
public void Redirect(string url, bool endResponse)
public void RedirectPermanent(string url)
public void RedirectPermanent(string url, bool endResponse)
public void RemoveOutputCacheItem(string path, string providerName)
public void RemoveOutputCacheItem(string path)
public void SetCookie(HttpCookie cookie)
public void TransmitFile(string filename)
public void TransmitFile(string filename, long offset, long length)
public void Write(char ch)
public void Write(object obj)
public void Write(string s)
public void Write(Char[] buffer, int index, int count)
public void WriteFile(string filename)
public void WriteFile(string filename, bool readIntoMemory)
public void WriteFile(IntPtr fileHandle, long offset, long size)
public void WriteFile(string filename, long offset, long size)
public void WriteSubstitution(HttpResponseSubstitutionCallback callback)
}
public System.Web.HttpRuntime : object {
private bool domainUnloading
private SplitOrderedList`2<string, string> registeredAssemblies
private QueueManager queue_manager
private TraceManager trace_manager
private Cache cache
private Cache internalCache
private WaitCallback do_RealProcessRequest
private EndOfSendNotification end_of_send_cb
private Exception initialException
private bool firstRun
private bool assemblyMappingEnabled
private object assemblyMappingLock
private object appOfflineLock
private HttpRuntimeSection runtime_section
private string _actual_bin_directory
private String[] app_offline_files
private string app_offline_file
private string content503
internal SplitOrderedList`2<string, string> RegisteredAssemblies
internal bool DomainUnloading
public string AspClientScriptPhysicalPath
public string AspClientScriptVirtualPath
public string AppDomainAppId
public string AppDomainAppPath
public string AppDomainAppVirtualPath
public string AppDomainId
public string AspInstallDirectory
public string BinDirectory
public Cache Cache
internal Cache InternalCache
public string ClrInstallDirectory
public string CodegenDir
public bool IsOnUNCShare
public string MachineConfigurationDirectory
internal HttpRuntimeSection Section
public bool UsingIntegratedPipeline
public Version IISVersion
public Version TargetFramework
internal TraceManager TraceManager
internal SplitOrderedList`2<string, string> get_RegisteredAssemblies()
internal bool get_DomainUnloading()
public string get_AspClientScriptPhysicalPath()
public string get_AspClientScriptVirtualPath()
public string get_AppDomainAppId()
public string get_AppDomainAppPath()
public string get_AppDomainAppVirtualPath()
public string get_AppDomainId()
public string get_AspInstallDirectory()
public string get_BinDirectory()
public Cache get_Cache()
internal Cache get_InternalCache()
public string get_ClrInstallDirectory()
public string get_CodegenDir()
public bool get_IsOnUNCShare()
public string get_MachineConfigurationDirectory()
internal HttpRuntimeSection get_Section()
public bool get_UsingIntegratedPipeline()
public Version get_IISVersion()
public Version get_TargetFramework()
public void Close()
internal HttpWorkerRequest QueuePendingRequest(bool started_internally)
private bool AppIsOffline(HttpContext context)
private void AppOfflineFileRenamed(object sender, RenamedEventArgs args)
private void AppOfflineFileChanged(object sender, FileSystemEventArgs args)
private void SetOfflineMode(bool offline, string filePath)
private void SetupOfflineWatch()
private void RealProcessRequest(object o)
private void Process(HttpWorkerRequest req)
private void EndOfSend(HttpWorkerRequest ignored1, object ignored2)
public void ProcessRequest(HttpWorkerRequest wr)
public void UnloadAppDomain()
private void ShutdownAppDomain()
private void DoUnload()
private void FinishWithException(HttpWorkerRequest wr, HttpException e)
internal void FinishUnavailable(HttpWorkerRequest wr)
public NamedPermissionSet GetNamedPermissionSet()
internal void WritePreservationFile(Assembly asm, string genericNameBase)
private Assembly ResolveAssemblyHandler(object sender, ResolveEventArgs e)
internal void EnableAssemblyMapping(bool enable)
internal TraceManager get_TraceManager()
}
public System.Web.HttpServerUtility : object {
private HttpContext context
public string MachineName
public int ScriptTimeout
internal void .ctor(HttpContext context)
public void ClearError()
public object CreateObject(string progID)
public object CreateObject(Type type)
public object CreateObjectFromClsid(string clsid)
public void Execute(string path)
public void Execute(string path, TextWriter writer)
public void Execute(string path, bool preserveForm)
public void Execute(string path, TextWriter writer, bool preserveForm)
private void Execute(string path, TextWriter writer, bool preserveForm, bool isTransfer)
internal void Execute(IHttpHandler handler, TextWriter writer, bool preserveForm, string exePath, string queryString, bool isTransfer, bool isInclude)
public Exception GetLastError()
public string HtmlDecode(string s)
public void HtmlDecode(string s, TextWriter output)
public string HtmlEncode(string s)
public void HtmlEncode(string s, TextWriter output)
public string MapPath(string path)
public void TransferRequest(string path)
public void TransferRequest(string path, bool preserveForm)
public void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers)
public void Transfer(string path)
public void Transfer(string path, bool preserveForm)
public void Transfer(IHttpHandler handler, bool preserveForm)
public void Execute(IHttpHandler handler, TextWriter writer, bool preserveForm)
public Byte[] UrlTokenDecode(string input)
public string UrlTokenEncode(Byte[] input)
public string UrlDecode(string s)
public void UrlDecode(string s, TextWriter output)
public string UrlEncode(string s)
public void UrlEncode(string s, TextWriter output)
public string UrlPathEncode(string s)
public string get_MachineName()
public int get_ScriptTimeout()
public void set_ScriptTimeout(int value)
public void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers, bool preserveUser)
}
public System.Web.HttpServerUtilityBase : object {
public string MachineName
public int ScriptTimeout
public string get_MachineName()
public int get_ScriptTimeout()
public void set_ScriptTimeout(int value)
public void ClearError()
public object CreateObject(string progID)
public object CreateObject(Type type)
public object CreateObjectFromClsid(string clsid)
public void Execute(string path)
public void Execute(string path, TextWriter writer)
public void Execute(string path, bool preserveForm)
public void Execute(string path, TextWriter writer, bool preserveForm)
public void Execute(IHttpHandler handler, TextWriter writer, bool preserveForm)
public Exception GetLastError()
public string HtmlDecode(string s)
public void HtmlDecode(string s, TextWriter output)
public string HtmlEncode(string s)
public void HtmlEncode(string s, TextWriter output)
public string MapPath(string path)
public void Transfer(string path, bool preserveForm)
public void Transfer(string path)
public void Transfer(IHttpHandler handler, bool preserveForm)
public void TransferRequest(string path)
public void TransferRequest(string path, bool preserveForm)
public void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers)
public void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers, bool preserveUser)
public string UrlDecode(string s)
public void UrlDecode(string s, TextWriter output)
public string UrlEncode(string s)
public void UrlEncode(string s, TextWriter output)
public string UrlPathEncode(string s)
public Byte[] UrlTokenDecode(string input)
public string UrlTokenEncode(Byte[] input)
}
public System.Web.HttpServerUtilityWrapper : HttpServerUtilityBase {
private HttpServerUtility w
public string MachineName
public int ScriptTimeout
public void .ctor(HttpServerUtility httpServerUtility)
public string get_MachineName()
public int get_ScriptTimeout()
public void set_ScriptTimeout(int value)
public void ClearError()
public object CreateObject(string progID)
public object CreateObject(Type type)
public object CreateObjectFromClsid(string clsid)
public void Execute(string path)
public void Execute(string path, bool preserveForm)
public void Execute(string path, TextWriter writer)
public void Execute(string path, TextWriter writer, bool preserveForm)
public void Execute(IHttpHandler handler, TextWriter writer, bool preserveForm)
public Exception GetLastError()
public string HtmlDecode(string s)
public void HtmlDecode(string s, TextWriter output)
public string HtmlEncode(string s)
public void HtmlEncode(string s, TextWriter output)
public string MapPath(string path)
public void Transfer(string path)
public void Transfer(string path, bool preserveForm)
public void Transfer(IHttpHandler handler, bool preserveForm)
public void TransferRequest(string path)
public void TransferRequest(string path, bool preserveForm)
public void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers)
public string UrlDecode(string s)
public void UrlDecode(string s, TextWriter output)
public string UrlEncode(string s)
public void UrlEncode(string s, TextWriter output)
public string UrlPathEncode(string s)
public Byte[] UrlTokenDecode(string input)
public string UrlTokenEncode(Byte[] input)
}
public System.Web.HttpSessionStateBase : object {
public int CodePage
public HttpSessionStateBase Contents
public HttpCookieMode CookieMode
public bool IsCookieless
public bool IsNewSession
public bool IsReadOnly
public KeysCollection Keys
public int LCID
public SessionStateMode Mode
public string SessionID
public HttpStaticObjectsCollectionBase StaticObjects
public int Timeout
public object Item
public object Item
public int Count
public bool IsSynchronized
public object SyncRoot
public int get_CodePage()
public void set_CodePage(int value)
public HttpSessionStateBase get_Contents()
public HttpCookieMode get_CookieMode()
public bool get_IsCookieless()
public bool get_IsNewSession()
public bool get_IsReadOnly()
public KeysCollection get_Keys()
public int get_LCID()
public void set_LCID(int value)
public SessionStateMode get_Mode()
public string get_SessionID()
public HttpStaticObjectsCollectionBase get_StaticObjects()
public int get_Timeout()
public void set_Timeout(int value)
public object get_Item(int index)
public void set_Item(int index, object value)
public object get_Item(string name)
public void set_Item(string name, object value)
public void Abandon()
public void Add(string name, object value)
public void Clear()
public void Remove(string name)
public void RemoveAll()
public void RemoveAt(int index)
public void CopyTo(Array array, int index)
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
public IEnumerator GetEnumerator()
}
public System.Web.HttpSessionStateWrapper : HttpSessionStateBase {
private HttpSessionState _session
public int CodePage
public HttpSessionStateBase Contents
public HttpCookieMode CookieMode
public bool IsCookieless
public bool IsNewSession
public bool IsReadOnly
public KeysCollection Keys
public int LCID
public SessionStateMode Mode
public string SessionID
public HttpStaticObjectsCollectionBase StaticObjects
public int Timeout
public object Item
public object Item
public int Count
public bool IsSynchronized
public object SyncRoot
public void .ctor(HttpSessionState httpSessionState)
public int get_CodePage()
public void set_CodePage(int value)
public HttpSessionStateBase get_Contents()
public HttpCookieMode get_CookieMode()
public bool get_IsCookieless()
public bool get_IsNewSession()
public bool get_IsReadOnly()
public KeysCollection get_Keys()
public int get_LCID()
public void set_LCID(int value)
public SessionStateMode get_Mode()
public string get_SessionID()
public HttpStaticObjectsCollectionBase get_StaticObjects()
public int get_Timeout()
public void set_Timeout(int value)
public object get_Item(int index)
public void set_Item(int index, object value)
public object get_Item(string name)
public void set_Item(string name, object value)
public void Abandon()
public void Add(string name, object value)
public void Clear()
public void Remove(string name)
public void RemoveAll()
public void RemoveAt(int index)
public void CopyTo(Array array, int index)
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
public IEnumerator GetEnumerator()
}
public System.Web.HttpStaticObjectsCollection : object {
private Dictionary`2<string, object> objects
private Dictionary`2<string, object> Objects
public object Item
public int Count
public bool IsReadOnly
public bool IsSynchronized
public bool NeverAccessed
public object SyncRoot
private Dictionary`2<string, object> get_Objects()
internal void .ctor(HttpApplicationState appstate)
public object GetObject(string name)
public IEnumerator GetEnumerator()
public void CopyTo(Array array, int index)
internal IDictionary GetObjects()
public object get_Item(string name)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public bool get_NeverAccessed()
public object get_SyncRoot()
internal HttpStaticObjectsCollection Clone()
internal void Add(ObjectTagBuilder tag)
private void Set(string name, object obj)
public void Serialize(BinaryWriter writer)
public HttpStaticObjectsCollection Deserialize(BinaryReader reader)
internal Byte[] ToByteArray()
internal HttpStaticObjectsCollection FromByteArray(Byte[] data)
}
public System.Web.HttpStaticObjectsCollectionBase : object {
public int Count
public bool IsReadOnly
public bool IsSynchronized
public object Item
public bool NeverAccessed
public object SyncRoot
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_Item(string name)
public bool get_NeverAccessed()
public object get_SyncRoot()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public object GetObject(string name)
public void Serialize(BinaryWriter writer)
}
public System.Web.HttpStaticObjectsCollectionWrapper : HttpStaticObjectsCollectionBase {
private HttpStaticObjectsCollection _collection
public int Count
public bool IsReadOnly
public bool IsSynchronized
public object Item
public bool NeverAccessed
public object SyncRoot
public void .ctor(HttpStaticObjectsCollection httpStaticObjectsCollection)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_Item(string name)
public bool get_NeverAccessed()
public object get_SyncRoot()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public object GetObject(string name)
public void Serialize(BinaryWriter writer)
}
public System.Web.HttpTaskAsyncHandler : object {
public bool IsReusable
public bool get_IsReusable()
public void ProcessRequest(HttpContext context)
public Task ProcessRequestAsync(HttpContext context)
private IAsyncResult System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData)
private void System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult result)
}
public System.Web.HttpUnhandledException : HttpException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
}
public System.Web.HttpUtility : object {
public void HtmlAttributeEncode(string s, TextWriter output)
public string HtmlAttributeEncode(string s)
public string UrlDecode(string str)
private Char[] GetChars(MemoryStream b, Encoding e)
private void WriteCharBytes(IList buf, char ch, Encoding e)
public string UrlDecode(string str, Encoding e)
public string UrlDecode(Byte[] bytes, Encoding e)
private int GetInt(byte b)
private int GetChar(Byte[] bytes, int offset, int length)
private int GetChar(string str, int offset, int length)
public string UrlDecode(Byte[] bytes, int offset, int count, Encoding e)
public Byte[] UrlDecodeToBytes(Byte[] bytes)
public Byte[] UrlDecodeToBytes(string str)
public Byte[] UrlDecodeToBytes(string str, Encoding e)
public Byte[] UrlDecodeToBytes(Byte[] bytes, int offset, int count)
public string UrlEncode(string str)
public string UrlEncode(string str, Encoding e)
public string UrlEncode(Byte[] bytes)
public string UrlEncode(Byte[] bytes, int offset, int count)
public Byte[] UrlEncodeToBytes(string str)
public Byte[] UrlEncodeToBytes(string str, Encoding e)
public Byte[] UrlEncodeToBytes(Byte[] bytes)
public Byte[] UrlEncodeToBytes(Byte[] bytes, int offset, int count)
public string UrlEncodeUnicode(string str)
public Byte[] UrlEncodeUnicodeToBytes(string str)
public string HtmlDecode(string s)
public void HtmlDecode(string s, TextWriter output)
public string HtmlEncode(string s)
public void HtmlEncode(string s, TextWriter output)
public string HtmlEncode(object value)
public string JavaScriptStringEncode(string value)
public string JavaScriptStringEncode(string value, bool addDoubleQuotes)
public string UrlPathEncode(string str)
public NameValueCollection ParseQueryString(string query)
public NameValueCollection ParseQueryString(string query, Encoding encoding)
internal void ParseQueryString(string query, Encoding encoding, NameValueCollection result)
}
public System.Web.HttpValidationStatus : Enum {
public int value__
public HttpValidationStatus Invalid
public HttpValidationStatus IgnoreThisRequest
public HttpValidationStatus Valid
}
public System.Web.HttpWorkerRequest : object {
public int HeaderCacheControl
public int HeaderConnection
public int HeaderDate
public int HeaderKeepAlive
public int HeaderPragma
public int HeaderTrailer
public int HeaderTransferEncoding
public int HeaderUpgrade
public int HeaderVia
public int HeaderWarning
public int HeaderAllow
public int HeaderContentLength
public int HeaderContentType
public int HeaderContentEncoding
public int HeaderContentLanguage
public int HeaderContentLocation
public int HeaderContentMd5
public int HeaderContentRange
public int HeaderExpires
public int HeaderLastModified
public int HeaderAccept
public int HeaderAcceptCharset
public int HeaderAcceptEncoding
public int HeaderAcceptLanguage
public int HeaderAuthorization
public int HeaderCookie
public int HeaderExpect
public int HeaderFrom
public int HeaderHost
public int HeaderIfMatch
public int HeaderIfModifiedSince
public int HeaderIfNoneMatch
public int HeaderIfRange
public int HeaderIfUnmodifiedSince
public int HeaderMaxForwards
public int HeaderProxyAuthorization
public int HeaderReferer
public int HeaderRange
public int HeaderTe
public int HeaderUserAgent
public int RequestHeaderMaximum
public int HeaderAcceptRanges
public int HeaderAge
public int HeaderEtag
public int HeaderLocation
public int HeaderProxyAuthenticate
public int HeaderRetryAfter
public int HeaderServer
public int HeaderSetCookie
public int HeaderVary
public int HeaderWwwAuthenticate
public int ResponseHeaderMaximum
public int ReasonResponseCacheMiss
public int ReasonFileHandleCacheMiss
public int ReasonCachePolicy
public int ReasonCacheSecurity
public int ReasonClientDisconnect
public int ReasonDefault
private Dictionary`2<string, int> RequestHeaderIndexer
private Dictionary`2<string, int> ResponseHeaderIndexer
private bool started_internally
internal bool StartedInternally
public string MachineConfigPath
public string MachineInstallDirectory
public Guid RequestTraceIdentifier
public string RootWebConfigPath
public bool SupportsAsyncFlush
public bool SupportsAsyncRead
internal bool get_StartedInternally()
internal void set_StartedInternally(bool value)
public string get_MachineConfigPath()
public string get_MachineInstallDirectory()
public Guid get_RequestTraceIdentifier()
public string get_RootWebConfigPath()
public void CloseConnection()
public string GetAppPath()
public string GetAppPathTranslated()
public string GetAppPoolID()
public long GetBytesRead()
public string GetFilePath()
public string GetFilePathTranslated()
public string GetKnownRequestHeader(int index)
public string GetPathInfo()
public Byte[] GetPreloadedEntityBody()
public int GetPreloadedEntityBody(Byte[] buffer, int offset)
public int GetPreloadedEntityBodyLength()
public string GetProtocol()
public Byte[] GetQueryStringRawBytes()
public string GetRemoteName()
public int GetRequestReason()
public string GetServerName()
public string GetServerVariable(string name)
public int GetTotalEntityBodyLength()
public string GetUnknownRequestHeader(string name)
public String[][] GetUnknownRequestHeaders()
public IntPtr GetUserToken()
public bool HasEntityBody()
public bool HeadersSent()
public bool IsClientConnected()
public bool IsEntireEntityBodyIsPreloaded()
public bool IsSecure()
public string MapPath(string virtualPath)
public int ReadEntityBody(Byte[] buffer, int size)
public int ReadEntityBody(Byte[] buffer, int offset, int size)
public void SendCalculatedContentLength(long contentLength)
public void SendCalculatedContentLength(int contentLength)
public void SendResponseFromMemory(IntPtr data, int length)
public void SetEndOfSendNotification(EndOfSendNotification callback, object extraData)
public void EndOfRequest()
public void FlushResponse(bool finalFlush)
public string GetHttpVerbName()
public string GetHttpVersion()
public string GetLocalAddress()
public int GetLocalPort()
public string GetQueryString()
public string GetRawUrl()
public string GetRemoteAddress()
public int GetRemotePort()
public string GetUriPath()
public void SendKnownResponseHeader(int index, string value)
public void SendResponseFromFile(IntPtr handle, long offset, long length)
public void SendResponseFromFile(string filename, long offset, long length)
public void SendResponseFromMemory(Byte[] data, int length)
public void SendStatus(int statusCode, string statusDescription)
public void SendUnknownResponseHeader(string name, string value)
public int GetKnownRequestHeaderIndex(string header)
public string GetKnownRequestHeaderName(int index)
public int GetKnownResponseHeaderIndex(string header)
public string GetKnownResponseHeaderName(int index)
public string GetStatusDescription(int code)
public Byte[] GetClientCertificate()
public Byte[] GetClientCertificateBinaryIssuer()
public int GetClientCertificateEncoding()
public Byte[] GetClientCertificatePublicKey()
public DateTime GetClientCertificateValidFrom()
public DateTime GetClientCertificateValidUntil()
public long GetConnectionID()
public long GetUrlContextID()
public IntPtr GetVirtualPathToken()
public bool get_SupportsAsyncFlush()
public bool get_SupportsAsyncRead()
public IAsyncResult BeginFlush(AsyncCallback callback, object state)
public IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public void EndFlush(IAsyncResult asyncResult)
public int EndRead(IAsyncResult asyncResult)
}
public System.Web.HttpWriter : TextWriter {
private long MAX_TOTAL_BUFFERS_SIZE
private UInt32 SINGLE_BUFFER_SIZE
private UInt32 MIN_SINGLE_BUFFER_SIZE
private HttpResponseStream output_stream
private HttpResponse response
private Encoding encoding
private Byte[] _bytebuffer
private UInt32 byteBufferSize
private Char[] chars
private Char[] newline
public Encoding Encoding
public Stream OutputStream
internal HttpResponse Response
internal void .ctor(HttpResponse response)
private Byte[] GetByteBuffer(int length)
public Encoding get_Encoding()
internal void SetEncoding(Encoding new_encoding)
public Stream get_OutputStream()
internal HttpResponse get_Response()
public void Close()
public void Flush()
public void Write(char ch)
public void Write(object obj)
public void Write(string s)
public void Write(Char[] buffer, int index, int count)
public void WriteLine()
public void WriteString(string s, int index, int count)
internal void WriteUTF8Ptr(IntPtr ptr, int length)
public void WriteBytes(Byte[] buffer, int index, int count)
}
public System.Web.IHtmlString {
public string ToHtmlString()
}
public System.Web.IHttpAsyncHandler {
public IAsyncResult BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData)
public void EndProcessRequest(IAsyncResult result)
}
public System.Web.IHttpHandler {
public bool IsReusable
public void ProcessRequest(HttpContext context)
public bool get_IsReusable()
}
public System.Web.IHttpHandlerFactory {
public IHttpHandler GetHandler(HttpContext context, string requestType, string url, string pathTranslated)
public void ReleaseHandler(IHttpHandler handler)
}
internal System.Web.IHttpHandlerFactory2 {
public IHttpHandler GetHandler(HttpContext context, string requestType, VirtualPath virtualPath, string physicalPath)
}
internal System.Web.IHttpMapPath {
public string MachineConfigPath
public string MapPath(string path)
public string get_MachineConfigPath()
}
public System.Web.IHttpModule {
public void Init(HttpApplication context)
public void Dispose()
}
public System.Web.IisTraceListener : TraceListener {
public void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data)
public void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data)
public void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id, string message)
public void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id, string format, Object[] args)
public void Write(string message)
public void Write(string message, string category)
public void WriteLine(string message)
public void WriteLine(string message, string category)
}
internal System.Web.InfoTraceData : object {
public string Category
public string Message
public string Exception
public double TimeSinceFirst
public double TimeSinceLast
public bool IsWarning
public void .ctor(string category, string message, string exception, double timeSinceFirst, double timeSinceLast, bool isWarning)
}
internal System.Web.InputFilterStream : Stream {
private Stream stream
internal Stream BaseStream
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Position
public long Length
internal void set_BaseStream(Stream value)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Position()
public void set_Position(long value)
public long get_Length()
public int Read(Byte[] buffer, int offset, int count)
public int ReadByte()
public long Seek(long offset, SeekOrigin loc)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
public void WriteByte(byte value)
public void Flush()
public void Close()
}
public System.Web.Instrumentation.PageExecutionContext : object {
public bool IsLiteral
public int Length
public int StartPosition
public TextWriter TextWriter
public string VirtualPath
public bool get_IsLiteral()
public void set_IsLiteral(bool value)
public int get_Length()
public void set_Length(int value)
public int get_StartPosition()
public void set_StartPosition(int value)
public TextWriter get_TextWriter()
public void set_TextWriter(TextWriter value)
public string get_VirtualPath()
public void set_VirtualPath(string value)
}
public System.Web.Instrumentation.PageExecutionListener : object {
public void BeginContext(PageExecutionContext context)
public void EndContext(PageExecutionContext context)
}
public System.Web.Instrumentation.PageInstrumentationService : object {
public IList`1<PageExecutionListener> ExecutionListeners
public bool IsEnabled
public IList`1<PageExecutionListener> get_ExecutionListeners()
public bool get_IsEnabled()
public void set_IsEnabled(bool value)
}
internal System.Web.IntPtrStream : Stream {
private Byte* base_address
private int size
private int position
private bool owns
protected IntPtr BaseAddress
protected int Size
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Position
public long Length
public void .ctor(IntPtr base_address, int size)
public void .ctor(Stream stream)
protected IntPtr get_BaseAddress()
protected int get_Size()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Position()
public void set_Position(long value)
public long get_Length()
public int Read(Byte[] buffer, int offset, int count)
public int ReadByte()
public long Seek(long offset, SeekOrigin loc)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
public void WriteByte(byte value)
public void Flush()
public void Close()
protected void Finalize()
}
public System.Web.IPartitionResolver {
public void Initialize()
public string ResolvePartition(object key)
}
internal System.Web.IPrincipalContainer {
public IPrincipal Principal
public IPrincipal get_Principal()
public void set_Principal(IPrincipal value)
}
internal System.Web.IRequestCompletedNotifier {
public bool IsRequestCompleted
public bool get_IsRequestCompleted()
}
public System.Web.ISubscriptionToken {
public bool IsActive
public bool get_IsActive()
public void Unsubscribe()
}
public System.Web.ITlsTokenBindingInfo {
public Byte[] GetProvidedTokenBindingId()
public Byte[] GetReferredTokenBindingId()
}
internal System.Web.KnownResponseHeader : BaseResponseHeader {
public int ID
internal void .ctor(int ID, string val)
internal void SendContent(HttpWorkerRequest wr)
}
internal System.Web.Mail.Base64AttachmentEncoder : object {
public void EncodeStream(Stream ins, Stream outs)
}
internal System.Web.Mail.IAttachmentEncoder {
public void EncodeStream(Stream ins, Stream outs)
}
internal System.Web.Mail.MailAddress : object {
protected string user
protected string host
protected string name
public string User
public string Host
public string Name
public string Address
public string get_User()
public void set_User(string value)
public string get_Host()
public void set_Host(string value)
public string get_Name()
public void set_Name(string value)
public string get_Address()
public void set_Address(string value)
public MailAddress Parse(string str)
public string ToString()
}
internal System.Web.Mail.MailAddressCollection : object {
protected ArrayList data
public MailAddress Item
public int Count
public MailAddress get_Item(int index)
public int get_Count()
public void Add(MailAddress addr)
public MailAddress Get(int index)
public IEnumerator GetEnumerator()
public string ToString()
public MailAddressCollection Parse(string str)
}
public System.Web.Mail.MailAttachment : object {
private string filename
private MailEncoding encoding
public string Filename
public MailEncoding Encoding
public void .ctor(string filename)
public void .ctor(string filename, MailEncoding encoding)
public string get_Filename()
public MailEncoding get_Encoding()
}
public System.Web.Mail.MailEncoding : Enum {
public int value__
public MailEncoding UUEncode
public MailEncoding Base64
}
public System.Web.Mail.MailFormat : Enum {
public int value__
public MailFormat Text
public MailFormat Html
}
internal System.Web.Mail.MailHeader : object {
protected NameValueCollection data
public string To
public string From
public string Cc
public string Bcc
public string Subject
public string Importance
public string Priority
public string MimeVersion
public string ContentType
public string ContentTransferEncoding
public string ContentDisposition
public string ContentBase
public string ContentLocation
public NameValueCollection Data
public string get_To()
public void set_To(string value)
public string get_From()
public void set_From(string value)
public string get_Cc()
public void set_Cc(string value)
public string get_Bcc()
public void set_Bcc(string value)
public string get_Subject()
public void set_Subject(string value)
public string get_Importance()
public void set_Importance(string value)
public string get_Priority()
public void set_Priority(string value)
public string get_MimeVersion()
public void set_MimeVersion(string value)
public string get_ContentType()
public void set_ContentType(string value)
public string get_ContentTransferEncoding()
public void set_ContentTransferEncoding(string value)
public string get_ContentDisposition()
public void set_ContentDisposition(string value)
public string get_ContentBase()
public void set_ContentBase(string value)
public string get_ContentLocation()
public void set_ContentLocation(string value)
public NameValueCollection get_Data()
}
public System.Web.Mail.MailMessage : object {
private ArrayList attachments
private string bcc
private string body
private Encoding bodyEncoding
private MailFormat bodyFormat
private string cc
private string from
private ListDictionary headers
private MailPriority priority
private string subject
private string to
private string urlContentBase
private string urlContentLocation
private Hashtable fields
public IList Attachments
public string Bcc
public string Body
public Encoding BodyEncoding
public MailFormat BodyFormat
public string Cc
public string From
public IDictionary Headers
public MailPriority Priority
public string Subject
public string To
public string UrlContentBase
public string UrlContentLocation
public IDictionary Fields
public IList get_Attachments()
public string get_Bcc()
public void set_Bcc(string value)
public string get_Body()
public void set_Body(string value)
public Encoding get_BodyEncoding()
public void set_BodyEncoding(Encoding value)
public MailFormat get_BodyFormat()
public void set_BodyFormat(MailFormat value)
public string get_Cc()
public void set_Cc(string value)
public string get_From()
public void set_From(string value)
public IDictionary get_Headers()
public MailPriority get_Priority()
public void set_Priority(MailPriority value)
public string get_Subject()
public void set_Subject(string value)
public string get_To()
public void set_To(string value)
public string get_UrlContentBase()
public void set_UrlContentBase(string value)
public string get_UrlContentLocation()
public void set_UrlContentLocation(string value)
public IDictionary get_Fields()
}
internal System.Web.Mail.MailMessageWrapper : object {
private MailAddressCollection bcc
private MailAddressCollection cc
private MailAddress from
private MailAddressCollection to
private MailHeader header
private MailMessage message
private string body
public IList Attachments
public MailAddressCollection Bcc
public string Body
public Encoding BodyEncoding
public MailFormat BodyFormat
public MailAddressCollection Cc
public MailAddress From
public MailHeader Header
public MailPriority Priority
public string Subject
public MailAddressCollection To
public string UrlContentBase
public string UrlContentLocation
public MailHeader Fields
public void .ctor(MailMessage message)
public IList get_Attachments()
public MailAddressCollection get_Bcc()
public string get_Body()
public void set_Body(string value)
public Encoding get_BodyEncoding()
public void set_BodyEncoding(Encoding value)
public MailFormat get_BodyFormat()
public void set_BodyFormat(MailFormat value)
public MailAddressCollection get_Cc()
public MailAddress get_From()
public MailHeader get_Header()
public MailPriority get_Priority()
public void set_Priority(MailPriority value)
public string get_Subject()
public void set_Subject(string value)
public MailAddressCollection get_To()
public string get_UrlContentBase()
public string get_UrlContentLocation()
public MailHeader get_Fields()
}
public System.Web.Mail.MailPriority : Enum {
public int value__
public MailPriority Normal
public MailPriority Low
public MailPriority High
}
internal System.Web.Mail.MailUtil : object {
public bool NeedEncoding(string str)
public string Base64Encode(string str)
public string GenerateBoundary()
}
public System.Web.Mail.RelatedBodyPart : object {
private string id
private string fileName
public string Name
public string Path
public void .ctor(string id, string fileName)
public string get_Name()
public void set_Name(string value)
public string get_Path()
public void set_Path(string value)
private bool FileExists(string fileName)
}
internal System.Web.Mail.SmtpClient : object {
private string server
private TcpClient tcpConnection
private SmtpStream smtp
private string username
private string password
private int port
private bool usessl
private short authenticate
public void .ctor(string server)
private void Connect()
private void ChangeToSSLSocket()
private void ReadFields(MailMessageWrapper msg)
private void StartSend(MailMessageWrapper msg)
public void Send(MailMessageWrapper msg)
private void SendSinglepartMail(MailMessageWrapper msg)
private void SendMultipartMail(MailMessageWrapper msg)
public void Close()
}
internal System.Web.Mail.SmtpException : IOException {
public void .ctor(string message)
}
public System.Web.Mail.SmtpMail : object {
private string smtpServer
public string SmtpServer
public string get_SmtpServer()
public void set_SmtpServer(string value)
public void Send(MailMessage message)
public void Send(string from, string to, string subject, string messageText)
}
internal System.Web.Mail.SmtpResponse : object {
private string rawResponse
private int statusCode
private String[] parts
public int StatusCode
public string RawResponse
public String[] Parts
public int get_StatusCode()
public void set_StatusCode(int value)
public string get_RawResponse()
public void set_RawResponse(string value)
public String[] get_Parts()
public void set_Parts(String[] value)
public SmtpResponse Parse(string line)
}
internal System.Web.Mail.SmtpStream : object {
protected Stream stream
protected Encoding encoding
protected SmtpResponse lastResponse
protected string command
public Stream Stream
public SmtpResponse LastResponse
public void .ctor(Stream stream)
public Stream get_Stream()
public SmtpResponse get_LastResponse()
public void WriteRset()
public void WriteAuthLogin()
public bool WriteStartTLS()
public void WriteEhlo(string hostName)
public void WriteHelo(string hostName)
public void WriteMailFrom(string from)
public void WriteRcptTo(string to)
public void WriteData()
public void WriteQuit()
public void WriteBoundary(string boundary)
public void WriteFinalBoundary(string boundary)
public void WriteDataEndTag()
public void WriteHeader(MailHeader header)
public void CheckForStatusCode(int statusCode)
public void WriteBytes(Byte[] buffer)
public void WriteLine(string format, Object[] args)
public void WriteLine(string line)
public void ReadResponse()
}
internal System.Web.Mail.ToUUEncodingTransform : object {
public int InputBlockSize
public int OutputBlockSize
public bool CanTransformMultipleBlocks
public bool CanReuseTransform
public int get_InputBlockSize()
public int get_OutputBlockSize()
public bool get_CanTransformMultipleBlocks()
public bool get_CanReuseTransform()
public int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset)
public Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount)
protected int TransformTriplet(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset)
public void Dispose()
}
internal System.Web.Mail.UUAttachmentEncoder : object {
protected Byte[] beginTag
protected Byte[] endTag
protected Byte[] endl
public void .ctor(int mode, string fileName)
public void EncodeStream(Stream ins, Stream outs)
}
public System.Web.Management.BufferedWebEventProvider : WebEventProvider {
public string BufferMode
public bool UseBuffering
public string get_BufferMode()
public bool get_UseBuffering()
public void Flush()
public void ProcessEvent(WebBaseEvent eventRaised)
public void ProcessEventFlush(WebEventBufferFlushInfo flushInfo)
public void Shutdown()
}
public System.Web.Management.EventLogWebEventProvider : WebEventProvider {
public void Flush()
public void ProcessEvent(WebBaseEvent eventRaised)
public void Shutdown()
}
public System.Web.Management.EventNotificationType : Enum {
public int value__
public EventNotificationType Regular
public EventNotificationType Urgent
public EventNotificationType Flush
public EventNotificationType Unbuffered
}
public System.Web.Management.IisTraceWebEventProvider : WebEventProvider {
public void Flush()
public void ProcessEvent(WebBaseEvent eventRaised)
public void Shutdown()
}
public System.Web.Management.IRegiisUtility {
public void ProtectedConfigAction(long actionToPerform, string firstArgument, string secondArgument, string providerName, string appPath, string site, string cspOrLocation, int keySize, IntPtr& exception)
public void RegisterAsnetMmcAssembly(int doReg, string assemblyName, string binaryDirectory, IntPtr& exception)
public void RegisterSystemWebAssembly(int doReg, IntPtr& exception)
public void RemoveBrowserCaps(IntPtr& exception)
}
public System.Web.Management.IWebEventCustomEvaluator {
public bool CanFire(WebBaseEvent raisedEvent, RuleFiringRecord record)
}
public System.Web.Management.MailEventNotificationInfo : object {
public WebBaseEventCollection Events
public int EventsDiscardedByBuffer
public int EventsDiscardedDueToMessageLimit
public int EventsInBuffer
public int EventsInNotification
public int EventsRemaining
public DateTime LastNotificationUtc
public MailMessage Message
public int MessageSequence
public int MessagesInNotification
public int NotificationSequence
public EventNotificationType NotificationType
public WebBaseEventCollection get_Events()
public int get_EventsDiscardedByBuffer()
public int get_EventsDiscardedDueToMessageLimit()
public int get_EventsInBuffer()
public int get_EventsInNotification()
public int get_EventsRemaining()
public DateTime get_LastNotificationUtc()
public MailMessage get_Message()
public int get_MessageSequence()
public int get_MessagesInNotification()
public int get_NotificationSequence()
public EventNotificationType get_NotificationType()
}
public System.Web.Management.MailWebEventProvider : BufferedWebEventProvider {
public void ProcessEvent(WebBaseEvent eventRaised)
public void ProcessEventFlush(WebEventBufferFlushInfo flushInfo)
public void Shutdown()
}
public System.Web.Management.RegiisUtility : object {
public void ProtectedConfigAction(long options, string firstArgument, string secondArgument, string providerName, string appPath, string site, string cspOrLocation, int keySize, IntPtr& exception)
public void RegisterAsnetMmcAssembly(int doReg, string typeName, string binaryDirectory, IntPtr& exception)
public void RegisterSystemWebAssembly(int doReg, IntPtr& exception)
public void RemoveBrowserCaps(IntPtr& exception)
}
public System.Web.Management.RuleFiringRecord : object {
public DateTime LastFired
public int TimesRaised
public DateTime get_LastFired()
public int get_TimesRaised()
}
public System.Web.Management.SessionStateType : Enum {
public int value__
public SessionStateType Temporary
public SessionStateType Persisted
public SessionStateType Custom
}
public System.Web.Management.SqlExecutionException : SystemException {
public string Commands
public string Database
public SqlException Exception
public string Server
public string SqlFile
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(string message, string server, string database, string sqlFile, string commands, SqlException sqlException)
public string get_Commands()
public string get_Database()
public SqlException get_Exception()
public string get_Server()
public string get_SqlFile()
}
public System.Web.Management.SqlFeatures : Enum {
public int value__
public SqlFeatures None
public SqlFeatures Membership
public SqlFeatures Profile
public SqlFeatures RoleManager
public SqlFeatures Personalization
public SqlFeatures SqlWebEventProvider
public SqlFeatures All
}
public System.Web.Management.SqlServices : object {
public string GenerateApplicationServicesScripts(bool install, SqlFeatures features, string database)
public string GenerateSessionStateScripts(bool install, SessionStateType type, string customDatabase)
public void Install(string server, string user, string password, string database, SqlFeatures features)
public void Install(string server, string database, SqlFeatures features)
public void Install(string database, SqlFeatures features, string connectionString)
public void InstallSessionState(string server, string user, string password, string customDatabase, SessionStateType type)
public void InstallSessionState(string server, string customDatabase, SessionStateType type)
public void InstallSessionState(string customDatabase, SessionStateType type, string connectionString)
public void Uninstall(string server, string user, string password, string database, SqlFeatures features)
public void Uninstall(string server, string database, SqlFeatures features)
public void Uninstall(string database, SqlFeatures features, string connectionString)
public void UninstallSessionState(string server, string user, string password, string customDatabase, SessionStateType type)
public void UninstallSessionState(string server, string customDatabase, SessionStateType type)
public void UninstallSessionState(string customDatabase, SessionStateType type, string connectionString)
}
public System.Web.Management.SqlWebEventProvider : BufferedWebEventProvider {
public void ProcessEvent(WebBaseEvent eventRaised)
public void ProcessEventFlush(WebEventBufferFlushInfo flushInfo)
public void Shutdown()
}
public System.Web.Management.TemplatedMailWebEventProvider : MailWebEventProvider {
public MailEventNotificationInfo CurrentNotification
public MailEventNotificationInfo get_CurrentNotification()
}
public System.Web.Management.TraceWebEventProvider : WebEventProvider {
public void Flush()
public void ProcessEvent(WebBaseEvent eventRaised)
public void Shutdown()
}
public System.Web.Management.WebApplicationInformation : object {
private string application_domain
private string application_path
private string application_virtual_path
private string machine_name
private string trust_level
public string ApplicationDomain
public string ApplicationPath
public string ApplicationVirtualPath
public string MachineName
public string TrustLevel
public string get_ApplicationDomain()
public string get_ApplicationPath()
public string get_ApplicationVirtualPath()
public string get_MachineName()
public string get_TrustLevel()
public void FormatToString(WebEventFormatter formatter)
public string ToString()
}
public System.Web.Management.WebAuditEvent : WebManagementEvent {
public WebRequestInformation RequestInformation
public WebRequestInformation get_RequestInformation()
}
public System.Web.Management.WebAuthenticationFailureAuditEvent : WebFailureAuditEvent {
public string NameToAuthenticate
public string get_NameToAuthenticate()
}
public System.Web.Management.WebAuthenticationSuccessAuditEvent : WebSuccessAuditEvent {
public string NameToAuthenticate
public string get_NameToAuthenticate()
}
public System.Web.Management.WebBaseErrorEvent : WebManagementEvent {
public Exception ErrorException
public Exception get_ErrorException()
}
public System.Web.Management.WebBaseEvent : object {
private string message
private object event_source
private int event_code
private int event_detail_code
public WebApplicationInformation ApplicationInformation
public int EventCode
public int EventDetailCode
public Guid EventID
public long EventSequence
public object EventSource
public DateTime EventTime
public DateTime EventTimeUtc
public string Message
public long EventOccurrence
protected void .ctor(string message, object eventSource, int eventCode)
protected void .ctor(string message, object eventSource, int eventCode, int eventDetailCode)
public WebApplicationInformation get_ApplicationInformation()
public int get_EventCode()
public int get_EventDetailCode()
public Guid get_EventID()
public long get_EventSequence()
public object get_EventSource()
public DateTime get_EventTime()
public DateTime get_EventTimeUtc()
public string get_Message()
public void FormatCustomEventDetails(WebEventFormatter formatter)
public void Raise()
public void Raise(WebBaseEvent eventRaised)
public string ToString()
public string ToString(bool includeAppInfo, bool includeCustomEventDetails)
public long get_EventOccurrence()
}
public System.Web.Management.WebBaseEventCollection : ReadOnlyCollectionBase {
public WebBaseEvent Item
public void .ctor(ICollection events)
public WebBaseEvent get_Item(int index)
public bool Contains(WebBaseEvent value)
public int IndexOf(WebBaseEvent value)
}
public System.Web.Management.WebErrorEvent : WebBaseErrorEvent {
public WebRequestInformation RequestInformation
public WebThreadInformation ThreadInformation
public WebRequestInformation get_RequestInformation()
public WebThreadInformation get_ThreadInformation()
}
public System.Web.Management.WebEventBufferFlushInfo : object {
public WebBaseEventCollection Events
public int EventsDiscardedSinceLastNotification
public int EventsInBuffer
public DateTime LastNotificationUtc
public int NotificationSequence
public EventNotificationType NotificationType
public WebBaseEventCollection get_Events()
public int get_EventsDiscardedSinceLastNotification()
public int get_EventsInBuffer()
public DateTime get_LastNotificationUtc()
public int get_NotificationSequence()
public EventNotificationType get_NotificationType()
}
public System.Web.Management.WebEventCodes : object {
public int InvalidEventCode
public int UndefinedEventCode
public int UndefinedEventDetailCode
public int ApplicationCodeBase
public int ApplicationStart
public int ApplicationShutdown
public int ApplicationCompilationStart
public int ApplicationCompilationEnd
public int ApplicationHeartbeat
public int RequestCodeBase
public int RequestTransactionComplete
public int RequestTransactionAbort
public int ErrorCodeBase
public int RuntimeErrorRequestAbort
public int RuntimeErrorViewStateFailure
public int RuntimeErrorValidationFailure
public int RuntimeErrorPostTooLarge
public int RuntimeErrorUnhandledException
public int WebErrorParserError
public int WebErrorCompilationError
public int WebErrorConfigurationError
public int WebErrorOtherError
public int WebErrorPropertyDeserializationError
public int WebErrorObjectStateFormatterDeserializationError
public int AuditCodeBase
public int AuditFormsAuthenticationSuccess
public int AuditMembershipAuthenticationSuccess
public int AuditUrlAuthorizationSuccess
public int AuditFileAuthorizationSuccess
public int AuditFormsAuthenticationFailure
public int AuditMembershipAuthenticationFailure
public int AuditUrlAuthorizationFailure
public int AuditFileAuthorizationFailure
public int AuditInvalidViewStateFailure
public int AuditUnhandledSecurityException
public int AuditUnhandledAccessException
public int MiscCodeBase
public int WebEventProviderInformation
public int ApplicationDetailCodeBase
public int ApplicationShutdownUnknown
public int ApplicationShutdownHostingEnvironment
public int ApplicationShutdownChangeInGlobalAsax
public int ApplicationShutdownConfigurationChange
public int ApplicationShutdownUnloadAppDomainCalled
public int ApplicationShutdownChangeInSecurityPolicyFile
public int ApplicationShutdownBinDirChangeOrDirectoryRename
public int ApplicationShutdownBrowsersDirChangeOrDirectoryRename
public int ApplicationShutdownCodeDirChangeOrDirectoryRename
public int ApplicationShutdownResourcesDirChangeOrDirectoryRename
public int ApplicationShutdownIdleTimeout
public int ApplicationShutdownPhysicalApplicationPathChanged
public int ApplicationShutdownHttpRuntimeClose
public int ApplicationShutdownInitializationError
public int ApplicationShutdownMaxRecompilationsReached
public int StateServerConnectionError
public int AuditDetailCodeBase
public int InvalidTicketFailure
public int ExpiredTicketFailure
public int InvalidViewStateMac
public int InvalidViewState
public int WebEventDetailCodeBase
public int SqlProviderEventsDropped
public int WebExtendedBase
public int ApplicationShutdownBuildManagerChange
public int RuntimeErrorWebResourceFailure
}
public System.Web.Management.WebEventFormatter : object {
private int indentation_level
private int tab_size
public int IndentationLevel
public int TabSize
public int get_IndentationLevel()
public void set_IndentationLevel(int value)
public int get_TabSize()
public void set_TabSize(int value)
public void AppendLine(string s)
public string ToString()
}
public System.Web.Management.WebEventManager : object {
public void Flush()
public void Flush(string providerName)
}
public System.Web.Management.WebEventProvider : ProviderBase {
public void Flush()
public void ProcessEvent(WebBaseEvent raisedEvent)
public void Shutdown()
}
public System.Web.Management.WebHeartbeatEvent : WebManagementEvent {
public WebProcessStatistics ProcessStatistics
public WebProcessStatistics get_ProcessStatistics()
}
public System.Web.Management.WebManagementEvent : WebBaseEvent {
public WebProcessInformation ProcessInformation
public WebProcessInformation get_ProcessInformation()
}
public System.Web.Management.WebProcessInformation : object {
public string AccountName
public int ProcessID
public string ProcessName
public string get_AccountName()
public int get_ProcessID()
public string get_ProcessName()
public void FormatToString(WebEventFormatter formatter)
}
public System.Web.Management.WebProcessStatistics : object {
public int AppDomainCount
public long ManagedHeapSize
public long PeakWorkingSet
public DateTime ProcessStartTime
public int RequestsExecuting
public int RequestsQueued
public int RequestsRejected
public int ThreadCount
public long WorkingSet
public int get_AppDomainCount()
public long get_ManagedHeapSize()
public long get_PeakWorkingSet()
public DateTime get_ProcessStartTime()
public int get_RequestsExecuting()
public int get_RequestsQueued()
public int get_RequestsRejected()
public int get_ThreadCount()
public long get_WorkingSet()
public void FormatToString(WebEventFormatter formatter)
}
public System.Web.Management.WebRequestErrorEvent : WebBaseErrorEvent {
public WebRequestInformation RequestInformation
public WebThreadInformation ThreadInformation
public WebRequestInformation get_RequestInformation()
public WebThreadInformation get_ThreadInformation()
}
public System.Web.Management.WebRequestEvent : WebManagementEvent {
public WebRequestInformation RequestInformation
public WebRequestInformation get_RequestInformation()
}
public System.Web.Management.WebRequestInformation : object {
public IPrincipal Principal
public string RequestPath
public string RequestUrl
public string ThreadAccountName
public string UserHostAddress
public IPrincipal get_Principal()
public string get_RequestPath()
public string get_RequestUrl()
public string get_ThreadAccountName()
public string get_UserHostAddress()
public void FormatToString(WebEventFormatter formatter)
}
public System.Web.Management.WebThreadInformation : object {
public bool IsImpersonating
public string StackTrace
public string ThreadAccountName
public int ThreadID
public bool get_IsImpersonating()
public string get_StackTrace()
public string get_ThreadAccountName()
public int get_ThreadID()
public void FormatToString(WebEventFormatter formatter)
}
public System.Web.Management.WebViewStateFailureAuditEvent : WebFailureAuditEvent {
public ViewStateException ViewStateException
public ViewStateException get_ViewStateException()
}
public System.Web.Management.WmiWebEventProvider : WebEventProvider {
public void Flush()
public void ProcessEvent(WebBaseEvent eventRaised)
public void Shutdown()
}
public System.Web.MimeMapping : object {
public string GetMimeMapping(string fileName)
}
internal System.Web.MimeTypes : object {
private Dictionary`2<string, string> mimeTypes
public string GetMimeType(string fileName)
}
public System.Web.ModelBinding.ArrayModelBinder`1 : CollectionModelBinder`1<TElement> {
protected bool CreateOrReplaceCollection(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext, IList`1<TElement> newCollection)
}
public System.Web.ModelBinding.ArrayModelBinderProvider : ModelBinderProvider {
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.AssociatedMetadataProvider : ModelMetadataProvider {
public IEnumerable`1<ModelMetadata> GetMetadataForProperties(object container, Type containerType)
public ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, string propertyName)
public ModelMetadata GetMetadataForType(Func`1<object> modelAccessor, Type modelType)
}
public System.Web.ModelBinding.AssociatedValidatorProvider : ModelValidatorProvider {
public IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ModelBindingExecutionContext context)
}
public System.Web.ModelBinding.BinaryDataModelBinderProvider : ModelBinderProvider {
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.BindingBehavior : Enum {
public int value__
public BindingBehavior Optional
public BindingBehavior Never
public BindingBehavior Required
}
public System.Web.ModelBinding.BindingBehaviorAttribute : Attribute {
private object _typeId
private BindingBehavior <Behavior>k__BackingField
public BindingBehavior Behavior
public object TypeId
public void .ctor(BindingBehavior behavior)
public BindingBehavior get_Behavior()
private void set_Behavior(BindingBehavior value)
public object get_TypeId()
}
public System.Web.ModelBinding.CollectionModelBinder`1 : object {
public bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.CollectionModelBinderProvider : ModelBinderProvider {
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.ComplexModel : object {
public ModelMetadata ModelMetadata
public ReadOnlyCollection`1<ModelMetadata> PropertyMetadata
public IDictionary`2<ModelMetadata, ComplexModelResult> Results
public void .ctor(ModelMetadata modelMetadata, IEnumerable`1<ModelMetadata> propertyMetadata)
public ModelMetadata get_ModelMetadata()
public ReadOnlyCollection`1<ModelMetadata> get_PropertyMetadata()
public IDictionary`2<ModelMetadata, ComplexModelResult> get_Results()
}
public System.Web.ModelBinding.ComplexModelBinder : object {
public bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.ComplexModelBinderProvider : ModelBinderProvider {
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.ComplexModelResult : object {
public object Model
public ModelValidationNode ValidationNode
public void .ctor(object model, ModelValidationNode validationNode)
public object get_Model()
public ModelValidationNode get_ValidationNode()
}
public System.Web.ModelBinding.ControlAttribute : ValueProviderSourceAttribute {
public string ControlID
public string PropertyName
public void .ctor(string controlID)
public void .ctor(string controlID, string propertyName)
public string get_ControlID()
public string get_PropertyName()
public string GetModelName()
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.ControlValueProvider : SimpleValueProvider {
public string PropertyName
public void .ctor(ModelBindingExecutionContext modelBindingExecutionContext, string propertyName)
public string get_PropertyName()
protected object FetchValue(string controlId)
}
public System.Web.ModelBinding.CookieAttribute : ValueProviderSourceAttribute {
public string Name
public bool ValidateInput
public void .ctor(string name)
public string get_Name()
public bool get_ValidateInput()
public void set_ValidateInput(bool value)
public string GetModelName()
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.CookieValueProvider : object {
public void .ctor(ModelBindingExecutionContext modelBindingExecutionContext)
public bool ContainsPrefix(string prefix)
public ValueProviderResult GetValue(string key)
public ValueProviderResult GetValue(string key, bool skipValidation)
}
public System.Web.ModelBinding.DataAnnotationsModelMetadata : ModelMetadata {
public void .ctor(DataAnnotationsModelMetadataProvider provider, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName, DisplayColumnAttribute displayColumnAttribute)
protected string GetSimpleDisplayText()
}
public System.Web.ModelBinding.DataAnnotationsModelMetadataProvider : AssociatedMetadataProvider {
protected ModelMetadata CreateMetadata(IEnumerable`1<Attribute> attributes, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName)
}
public System.Web.ModelBinding.DataAnnotationsModelValidationFactory : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ModelValidator Invoke(ModelMetadata metadata, ModelBindingExecutionContext context, ValidationAttribute attribute)
public IAsyncResult BeginInvoke(ModelMetadata metadata, ModelBindingExecutionContext context, ValidationAttribute attribute, AsyncCallback callback, object object)
public ModelValidator EndInvoke(IAsyncResult result)
}
public System.Web.ModelBinding.DataAnnotationsModelValidator : ModelValidator {
public bool IsRequired
public void .ctor(ModelMetadata metadata, ModelBindingExecutionContext context, ValidationAttribute attribute)
public bool get_IsRequired()
public IEnumerable`1<ModelValidationResult> Validate(object container)
}
public System.Web.ModelBinding.DataAnnotationsModelValidator`1 : DataAnnotationsModelValidator {
public void .ctor(ModelMetadata metadata, ModelBindingExecutionContext context, TAttribute attribute)
}
public System.Web.ModelBinding.DataAnnotationsModelValidatorProvider : AssociatedValidatorProvider {
public bool AddImplicitRequiredAttributeForValueTypes
public bool get_AddImplicitRequiredAttributeForValueTypes()
public void set_AddImplicitRequiredAttributeForValueTypes(bool value)
protected IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ModelBindingExecutionContext context, IEnumerable`1<Attribute> attributes)
public void RegisterAdapter(Type attributeType, Type adapterType)
public void RegisterAdapterFactory(Type attributeType, DataAnnotationsModelValidationFactory factory)
public void RegisterDefaultAdapter(Type adapterType)
public void RegisterDefaultAdapterFactory(DataAnnotationsModelValidationFactory factory)
public void RegisterDefaultValidatableObjectAdapter(Type adapterType)
public void RegisterDefaultValidatableObjectAdapterFactory(DataAnnotationsValidatableObjectAdapterFactory factory)
public void RegisterValidatableObjectAdapter(Type modelType, Type adapterType)
public void RegisterValidatableObjectAdapterFactory(Type modelType, DataAnnotationsValidatableObjectAdapterFactory factory)
}
public System.Web.ModelBinding.DataAnnotationsValidatableObjectAdapterFactory : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ModelValidator Invoke(ModelMetadata metadata, ModelBindingExecutionContext context)
public IAsyncResult BeginInvoke(ModelMetadata metadata, ModelBindingExecutionContext context, AsyncCallback callback, object object)
public ModelValidator EndInvoke(IAsyncResult result)
}
public System.Web.ModelBinding.DefaultModelBinder : object {
public ModelBinderProviderCollection Providers
public ModelBinderProviderCollection get_Providers()
public bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
internal System.Web.ModelBinding.DictionaryHelpers : object {
public IEnumerable`1<KeyValuePair`2<string, TValue>> FindKeysWithPrefix(IDictionary`2<string, TValue> dictionary, string prefix)
public bool DoesAnyKeyHavePrefix(IDictionary`2<string, TValue> dictionary, string prefix)
}
public System.Web.ModelBinding.DictionaryModelBinder`2 : CollectionModelBinder`1<KeyValuePair`2<TKey, TValue>> {
protected bool CreateOrReplaceCollection(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext, IList`1<KeyValuePair`2<TKey, TValue>> newCollection)
}
public System.Web.ModelBinding.DictionaryModelBinderProvider : ModelBinderProvider {
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.DictionaryValueProvider`1 : object {
public void .ctor(IDictionary`2<string, TValue> dictionary, CultureInfo culture)
public bool ContainsPrefix(string prefix)
public ValueProviderResult GetValue(string key)
}
public System.Web.ModelBinding.EmptyModelMetadataProvider : AssociatedMetadataProvider {
protected ModelMetadata CreateMetadata(IEnumerable`1<Attribute> attributes, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName)
}
public System.Web.ModelBinding.ExtensibleModelBinderAttribute : Attribute {
private Type <BinderType>k__BackingField
private bool <SuppressPrefixCheck>k__BackingField
public Type BinderType
public bool SuppressPrefixCheck
public void .ctor(Type binderType)
public Type get_BinderType()
private void set_BinderType(Type value)
public bool get_SuppressPrefixCheck()
public void set_SuppressPrefixCheck(bool value)
}
public System.Web.ModelBinding.FormAttribute : ValueProviderSourceAttribute {
public string FieldName
public bool ValidateInput
public void .ctor(string fieldName)
public string get_FieldName()
public bool get_ValidateInput()
public void set_ValidateInput(bool value)
public string GetModelName()
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.FormValueProvider : NameValueCollectionValueProvider {
public void .ctor(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.GenericModelBinderProvider : ModelBinderProvider {
public Type ModelType
public bool SuppressPrefixCheck
public void .ctor(Type modelType, Func`2<Type[], IModelBinder> modelBinderFactory)
public void .ctor(Type modelType, Type modelBinderType)
public void .ctor(Type modelType, IModelBinder modelBinder)
public Type get_ModelType()
public bool get_SuppressPrefixCheck()
public void set_SuppressPrefixCheck(bool value)
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.IMetadataAware {
public void OnMetadataCreated(ModelMetadata metadata)
}
public System.Web.ModelBinding.IModelBinder {
public bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.IModelNameProvider {
public string GetModelName()
}
public System.Web.ModelBinding.IUnvalidatedValueProvider {
public ValueProviderResult GetValue(string key, bool skipValidation)
}
public System.Web.ModelBinding.IUnvalidatedValueProviderSource {
public bool ValidateInput
public bool get_ValidateInput()
public void set_ValidateInput(bool value)
}
public System.Web.ModelBinding.IValueProvider {
public bool ContainsPrefix(string prefix)
public ValueProviderResult GetValue(string key)
}
public System.Web.ModelBinding.IValueProviderSource {
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.KeyValuePairModelBinder`2 : object {
public bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.KeyValuePairModelBinderProvider : ModelBinderProvider {
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.MaxLengthAttributeAdapter : DataAnnotationsModelValidator`1<MaxLengthAttribute> {
public void .ctor(ModelMetadata metadata, ModelBindingExecutionContext context, MaxLengthAttribute attribute)
protected string GetLocalizedErrorMessage(string errorMessage)
}
public System.Web.ModelBinding.MinLengthAttributeAdapter : DataAnnotationsModelValidator`1<MinLengthAttribute> {
public void .ctor(ModelMetadata metadata, ModelBindingExecutionContext context, MinLengthAttribute attribute)
protected string GetLocalizedErrorMessage(string errorMessage)
}
public System.Web.ModelBinding.ModelBinderDictionary : object {
public int Count
public IModelBinder DefaultBinder
public bool IsReadOnly
public IModelBinder Item
public ICollection`1<Type> Keys
public ICollection`1<IModelBinder> Values
public int get_Count()
public IModelBinder get_DefaultBinder()
public void set_DefaultBinder(IModelBinder value)
public bool get_IsReadOnly()
public IModelBinder get_Item(Type key)
public void set_Item(Type key, IModelBinder value)
public ICollection`1<Type> get_Keys()
public ICollection`1<IModelBinder> get_Values()
public void Add(KeyValuePair`2<Type, IModelBinder> item)
public void Add(Type key, IModelBinder value)
public void Clear()
public bool Contains(KeyValuePair`2<Type, IModelBinder> item)
public bool ContainsKey(Type key)
public void CopyTo(KeyValuePair`2[] array, int arrayIndex)
public IEnumerator`1<KeyValuePair`2<Type, IModelBinder>> GetEnumerator()
public bool Remove(KeyValuePair`2<Type, IModelBinder> item)
public bool Remove(Type key)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool TryGetValue(Type key, IModelBinder& value)
}
public System.Web.ModelBinding.ModelBinderErrorMessageProvider : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public string Invoke(ModelBindingExecutionContext modelBindingExecutionContext, ModelMetadata modelMetadata, object incomingValue)
public IAsyncResult BeginInvoke(ModelBindingExecutionContext modelBindingExecutionContext, ModelMetadata modelMetadata, object incomingValue, AsyncCallback callback, object object)
public string EndInvoke(IAsyncResult result)
}
public System.Web.ModelBinding.ModelBinderErrorMessageProviders : object {
public ModelBinderErrorMessageProvider TypeConversionErrorMessageProvider
public ModelBinderErrorMessageProvider ValueRequiredErrorMessageProvider
public ModelBinderErrorMessageProvider get_TypeConversionErrorMessageProvider()
public void set_TypeConversionErrorMessageProvider(ModelBinderErrorMessageProvider value)
public ModelBinderErrorMessageProvider get_ValueRequiredErrorMessageProvider()
public void set_ValueRequiredErrorMessageProvider(ModelBinderErrorMessageProvider value)
}
public System.Web.ModelBinding.ModelBinderProvider : object {
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.ModelBinderProviderCollection : Collection`1<ModelBinderProvider> {
public void .ctor(IList`1<ModelBinderProvider> list)
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
protected void InsertItem(int index, ModelBinderProvider item)
public void RegisterBinderForGenericType(Type modelType, Func`2<Type[], IModelBinder> modelBinderFactory)
public void RegisterBinderForGenericType(Type modelType, Type modelBinderType)
public void RegisterBinderForGenericType(Type modelType, IModelBinder modelBinder)
public void RegisterBinderForType(Type modelType, Func`1<IModelBinder> modelBinderFactory)
public void RegisterBinderForType(Type modelType, IModelBinder modelBinder)
protected void SetItem(int index, ModelBinderProvider item)
}
public System.Web.ModelBinding.ModelBinderProviderOptionsAttribute : Attribute {
private bool <FrontOfList>k__BackingField
public bool FrontOfList
public bool get_FrontOfList()
public void set_FrontOfList(bool value)
}
public System.Web.ModelBinding.ModelBinderProviders : object {
public ModelBinderProviderCollection Providers
public ModelBinderProviderCollection get_Providers()
}
public System.Web.ModelBinding.ModelBinders : object {
public ModelBinderDictionary Binders
public ModelBinderDictionary get_Binders()
}
public System.Web.ModelBinding.ModelBindingContext : object {
public object Model
public ModelBinderProviderCollection ModelBinderProviders
public ModelMetadata ModelMetadata
public string ModelName
public ModelStateDictionary ModelState
public Type ModelType
public IDictionary`2<string, ModelMetadata> PropertyMetadata
public bool ValidateRequest
public ModelValidationNode ValidationNode
public IValueProvider ValueProvider
public void .ctor(ModelBindingContext bindingContext)
public object get_Model()
public void set_Model(object value)
public ModelBinderProviderCollection get_ModelBinderProviders()
public void set_ModelBinderProviders(ModelBinderProviderCollection value)
public ModelMetadata get_ModelMetadata()
public void set_ModelMetadata(ModelMetadata value)
public string get_ModelName()
public void set_ModelName(string value)
public ModelStateDictionary get_ModelState()
public void set_ModelState(ModelStateDictionary value)
public Type get_ModelType()
public IDictionary`2<string, ModelMetadata> get_PropertyMetadata()
public bool get_ValidateRequest()
public void set_ValidateRequest(bool value)
public ModelValidationNode get_ValidationNode()
public void set_ValidationNode(ModelValidationNode value)
public IValueProvider get_ValueProvider()
public void set_ValueProvider(IValueProvider value)
}
public System.Web.ModelBinding.ModelBindingExecutionContext : object {
private Dictionary`2<Type, object> _services
private HttpContextBase _httpContext
private ModelStateDictionary _modelState
public HttpContextBase HttpContext
public ModelStateDictionary ModelState
public void .ctor(HttpContextBase httpContext, ModelStateDictionary modelState)
public HttpContextBase get_HttpContext()
public ModelStateDictionary get_ModelState()
public void PublishService(TService service)
public TService GetService()
public TService TryGetService()
}
public System.Web.ModelBinding.ModelError : object {
private Exception <Exception>k__BackingField
private string <ErrorMessage>k__BackingField
public Exception Exception
public string ErrorMessage
public void .ctor(Exception exception)
public void .ctor(Exception exception, string errorMessage)
public void .ctor(string errorMessage)
public Exception get_Exception()
private void set_Exception(Exception value)
public string get_ErrorMessage()
private void set_ErrorMessage(string value)
}
public System.Web.ModelBinding.ModelErrorCollection : Collection`1<ModelError> {
public void Add(Exception exception)
public void Add(string errorMessage)
}
public System.Web.ModelBinding.ModelMetadata : object {
public int DefaultOrder
public Dictionary`2<string, object> AdditionalValues
public Type ContainerType
public bool ConvertEmptyStringToNull
public string DataTypeName
public string Description
public string DisplayFormatString
public string DisplayName
public string EditFormatString
public bool HideSurroundingHtml
public bool IsComplexType
public bool IsNullableValueType
public bool IsReadOnly
public bool IsRequired
public object Model
public Type ModelType
public string NullDisplayText
public int Order
public IEnumerable`1<ModelMetadata> Properties
public string PropertyName
public bool RequestValidationEnabled
public string ShortDisplayName
public bool ShowForDisplay
public bool ShowForEdit
public string SimpleDisplayText
public string TemplateHint
public string Watermark
public void .ctor(ModelMetadataProvider provider, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName)
public Dictionary`2<string, object> get_AdditionalValues()
public Type get_ContainerType()
public bool get_ConvertEmptyStringToNull()
public void set_ConvertEmptyStringToNull(bool value)
public string get_DataTypeName()
public void set_DataTypeName(string value)
public string get_Description()
public void set_Description(string value)
public string get_DisplayFormatString()
public void set_DisplayFormatString(string value)
public string get_DisplayName()
public void set_DisplayName(string value)
public string get_EditFormatString()
public void set_EditFormatString(string value)
public bool get_HideSurroundingHtml()
public void set_HideSurroundingHtml(bool value)
public bool get_IsComplexType()
public bool get_IsNullableValueType()
public bool get_IsReadOnly()
public void set_IsReadOnly(bool value)
public bool get_IsRequired()
public void set_IsRequired(bool value)
public object get_Model()
public void set_Model(object value)
public Type get_ModelType()
public string get_NullDisplayText()
public void set_NullDisplayText(string value)
public int get_Order()
public void set_Order(int value)
public IEnumerable`1<ModelMetadata> get_Properties()
public string get_PropertyName()
public bool get_RequestValidationEnabled()
public void set_RequestValidationEnabled(bool value)
public string get_ShortDisplayName()
public void set_ShortDisplayName(string value)
public bool get_ShowForDisplay()
public void set_ShowForDisplay(bool value)
public bool get_ShowForEdit()
public void set_ShowForEdit(bool value)
public string get_SimpleDisplayText()
public void set_SimpleDisplayText(string value)
public string get_TemplateHint()
public void set_TemplateHint(string value)
public string get_Watermark()
public void set_Watermark(string value)
public string GetDisplayName()
public IEnumerable`1<ModelValidator> GetValidators(ModelBindingExecutionContext context)
}
public System.Web.ModelBinding.ModelMetadataProvider : object {
public IEnumerable`1<ModelMetadata> GetMetadataForProperties(object container, Type containerType)
public ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, string propertyName)
public ModelMetadata GetMetadataForType(Func`1<object> modelAccessor, Type modelType)
}
public System.Web.ModelBinding.ModelMetadataProviders : object {
public ModelMetadataProvider Current
public ModelMetadataProvider get_Current()
public void set_Current(ModelMetadataProvider value)
}
public System.Web.ModelBinding.ModelState : object {
private ModelErrorCollection _errors
private ValueProviderResult <Value>k__BackingField
public ValueProviderResult Value
public ModelErrorCollection Errors
public ValueProviderResult get_Value()
public void set_Value(ValueProviderResult value)
public ModelErrorCollection get_Errors()
}
public System.Web.ModelBinding.ModelStateDictionary : object {
private Dictionary`2<string, ModelState> _innerDictionary
public int Count
public bool IsReadOnly
public bool IsValid
public ICollection`1<string> Keys
public ModelState Item
public ICollection`1<ModelState> Values
public void .ctor(ModelStateDictionary dictionary)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsValid()
public ICollection`1<string> get_Keys()
public ModelState get_Item(string key)
public void set_Item(string key, ModelState value)
public ICollection`1<ModelState> get_Values()
public void Add(KeyValuePair`2<string, ModelState> item)
public void Add(string key, ModelState value)
public void AddModelError(string key, Exception exception)
public void AddModelError(string key, string errorMessage)
public void Clear()
public bool Contains(KeyValuePair`2<string, ModelState> item)
public bool ContainsKey(string key)
public void CopyTo(KeyValuePair`2[] array, int arrayIndex)
public IEnumerator`1<KeyValuePair`2<string, ModelState>> GetEnumerator()
private ModelState GetModelStateForKey(string key)
public bool IsValidField(string key)
public void Merge(ModelStateDictionary dictionary)
public bool Remove(KeyValuePair`2<string, ModelState> item)
public bool Remove(string key)
public void SetModelValue(string key, ValueProviderResult value)
public bool TryGetValue(string key, ModelState& value)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public System.Web.ModelBinding.ModelValidatedEventArgs : EventArgs {
public ModelBindingExecutionContext ModelBindingExecutionContext
public ModelValidationNode ParentNode
public void .ctor(ModelBindingExecutionContext modelBindingExecutionContext, ModelValidationNode parentNode)
public ModelBindingExecutionContext get_ModelBindingExecutionContext()
public ModelValidationNode get_ParentNode()
}
public System.Web.ModelBinding.ModelValidatingEventArgs : CancelEventArgs {
public ModelBindingExecutionContext ModelBindingExecutionContext
public ModelValidationNode ParentNode
public void .ctor(ModelBindingExecutionContext modelBindingExecutionContext, ModelValidationNode parentNode)
public ModelBindingExecutionContext get_ModelBindingExecutionContext()
public ModelValidationNode get_ParentNode()
}
public System.Web.ModelBinding.ModelValidationNode : object {
public ICollection`1<ModelValidationNode> ChildNodes
public ModelMetadata ModelMetadata
public string ModelStateKey
public bool SuppressValidation
public bool ValidateAllProperties
public void .ctor(ModelMetadata modelMetadata, string modelStateKey)
public void .ctor(ModelMetadata modelMetadata, string modelStateKey, IEnumerable`1<ModelValidationNode> childNodes)
public ICollection`1<ModelValidationNode> get_ChildNodes()
public ModelMetadata get_ModelMetadata()
public string get_ModelStateKey()
public bool get_SuppressValidation()
public void set_SuppressValidation(bool value)
public bool get_ValidateAllProperties()
public void set_ValidateAllProperties(bool value)
public void add_Validated(EventHandler`1<ModelValidatedEventArgs> value)
public void remove_Validated(EventHandler`1<ModelValidatedEventArgs> value)
public void add_Validating(EventHandler`1<ModelValidatingEventArgs> value)
public void remove_Validating(EventHandler`1<ModelValidatingEventArgs> value)
public void CombineWith(ModelValidationNode otherNode)
public void Validate(ModelBindingExecutionContext modelBindingExecutionContext)
public void Validate(ModelBindingExecutionContext modelBindingExecutionContext, ModelValidationNode parentNode)
}
public System.Web.ModelBinding.ModelValidationResult : object {
public string MemberName
public string Message
public string get_MemberName()
public void set_MemberName(string value)
public string get_Message()
public void set_Message(string value)
}
public System.Web.ModelBinding.ModelValidator : object {
public bool IsRequired
public bool get_IsRequired()
public ModelValidator GetModelValidator(ModelMetadata metadata, ModelBindingExecutionContext context)
public IEnumerable`1<ModelValidationResult> Validate(object container)
}
public System.Web.ModelBinding.ModelValidatorProvider : object {
public IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ModelBindingExecutionContext context)
}
public System.Web.ModelBinding.ModelValidatorProviderCollection : Collection`1<ModelValidatorProvider> {
public void .ctor(IList`1<ModelValidatorProvider> list)
public IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ModelBindingExecutionContext context)
protected void InsertItem(int index, ModelValidatorProvider item)
protected void SetItem(int index, ModelValidatorProvider item)
}
public System.Web.ModelBinding.ModelValidatorProviders : object {
public ModelValidatorProviderCollection Providers
public ModelValidatorProviderCollection get_Providers()
}
public System.Web.ModelBinding.MutableObjectModelBinder : object {
public bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.MutableObjectModelBinderProvider : ModelBinderProvider {
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.NameValueCollectionValueProvider : object {
public void .ctor(NameValueCollection collection, NameValueCollection unvalidatedCollection, CultureInfo culture)
public void .ctor(NameValueCollection collection, CultureInfo culture)
public bool ContainsPrefix(string prefix)
public ValueProviderResult GetValue(string key)
public ValueProviderResult GetValue(string key, bool skipValidation)
}
public System.Web.ModelBinding.ProfileAttribute : ValueProviderSourceAttribute {
public string Key
public void .ctor(string key)
public string get_Key()
public string GetModelName()
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.ProfileValueProvider : SimpleValueProvider {
public void .ctor(ModelBindingExecutionContext modelBindingExecutionContext)
protected object FetchValue(string key)
}
public System.Web.ModelBinding.QueryStringAttribute : ValueProviderSourceAttribute {
public string Key
public bool ValidateInput
public void .ctor(string key)
public string get_Key()
public bool get_ValidateInput()
public void set_ValidateInput(bool value)
public string GetModelName()
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.QueryStringValueProvider : NameValueCollectionValueProvider {
public void .ctor(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.RangeAttributeAdapter : DataAnnotationsModelValidator`1<RangeAttribute> {
public void .ctor(ModelMetadata metadata, ModelBindingExecutionContext context, RangeAttribute attribute)
protected string GetLocalizedErrorMessage(string errorMessage)
}
public System.Web.ModelBinding.RegularExpressionAttributeAdapter : DataAnnotationsModelValidator`1<RegularExpressionAttribute> {
public void .ctor(ModelMetadata metadata, ModelBindingExecutionContext context, RegularExpressionAttribute attribute)
protected string GetLocalizedErrorMessage(string errorMessage)
}
public System.Web.ModelBinding.RequiredAttributeAdapter : DataAnnotationsModelValidator`1<RequiredAttribute> {
public void .ctor(ModelMetadata metadata, ModelBindingExecutionContext context, RequiredAttribute attribute)
}
public System.Web.ModelBinding.RouteDataAttribute : ValueProviderSourceAttribute {
public string Key
public void .ctor(string key)
public string get_Key()
public string GetModelName()
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.RouteDataValueProvider : DictionaryValueProvider`1<object> {
public void .ctor(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.SessionAttribute : ValueProviderSourceAttribute {
public string Name
public void .ctor(string name)
public string get_Name()
public string GetModelName()
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.SimpleModelBinderProvider : ModelBinderProvider {
public Type ModelType
public bool SuppressPrefixCheck
public void .ctor(Type modelType, Func`1<IModelBinder> modelBinderFactory)
public void .ctor(Type modelType, IModelBinder modelBinder)
public Type get_ModelType()
public bool get_SuppressPrefixCheck()
public void set_SuppressPrefixCheck(bool value)
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.SimpleValueProvider : object {
public bool ContainsPrefix(string prefix)
public ValueProviderResult GetValue(string key)
}
public System.Web.ModelBinding.StringLengthAttributeAdapter : DataAnnotationsModelValidator`1<StringLengthAttribute> {
public void .ctor(ModelMetadata metadata, ModelBindingExecutionContext context, StringLengthAttribute attribute)
protected string GetLocalizedErrorMessage(string errorMessage)
}
public System.Web.ModelBinding.TypeConverterModelBinder : object {
public bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.TypeConverterModelBinderProvider : ModelBinderProvider {
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.TypeMatchModelBinder : object {
public bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.TypeMatchModelBinderProvider : ModelBinderProvider {
public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext)
}
public System.Web.ModelBinding.UserProfileAttribute : Attribute {
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.UserProfileValueProvider : SimpleValueProvider {
public void .ctor(ModelBindingExecutionContext modelBindingExecutionContext)
protected object FetchValue(string key)
}
public System.Web.ModelBinding.ValidatableObjectAdapter : ModelValidator {
public void .ctor(ModelMetadata metadata, ModelBindingExecutionContext context)
public IEnumerable`1<ModelValidationResult> Validate(object container)
}
public System.Web.ModelBinding.ValueProviderCollection : Collection`1<IValueProvider> {
public void .ctor(IList`1<IValueProvider> list)
public bool ContainsPrefix(string prefix)
public ValueProviderResult GetValue(string key)
public ValueProviderResult GetValue(string key, bool skipValidation)
protected void InsertItem(int index, IValueProvider item)
protected void SetItem(int index, IValueProvider item)
}
public System.Web.ModelBinding.ValueProviderResult : object {
private CultureInfo _staticCulture
private CultureInfo _instanceCulture
private string <AttemptedValue>k__BackingField
private object <RawValue>k__BackingField
public string AttemptedValue
public CultureInfo Culture
public object RawValue
public void .ctor(object rawValue, string attemptedValue, CultureInfo culture)
public string get_AttemptedValue()
protected void set_AttemptedValue(string value)
public CultureInfo get_Culture()
protected void set_Culture(CultureInfo value)
public object get_RawValue()
protected void set_RawValue(object value)
private object ConvertSimpleType(CultureInfo culture, object value, Type destinationType)
public object ConvertTo(Type type)
public object ConvertTo(Type type, CultureInfo culture)
private object UnwrapPossibleArrayType(CultureInfo culture, object value, Type destinationType)
}
public System.Web.ModelBinding.ValueProviderSourceAttribute : Attribute {
public string GetModelName()
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.ViewStateAttribute : ValueProviderSourceAttribute {
public string Key
public void .ctor(string key)
public string get_Key()
public string GetModelName()
public IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext)
}
public System.Web.ModelBinding.ViewStateValueProvider : SimpleValueProvider {
public void .ctor(ModelBindingExecutionContext modelBindingExecutionContext)
protected object FetchValue(string key)
}
internal System.Web.ModuleConfigurationInfo : object {
private string _type
private string _name
private string _precondition
internal string Type
internal string Name
internal string Precondition
internal void .ctor(string name, string type, string condition)
internal string get_Type()
internal string get_Name()
internal string get_Precondition()
}
internal System.Web.NameValueTraceData : object {
public string Name
public string Value
public void .ctor(string name, string value)
}
internal System.Web.NoParamsDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Web.NoParamsInvoker : object {
private EventHandler faked
private NoParamsDelegate real
public EventHandler FakeDelegate
public void .ctor(object o, MethodInfo method)
private void InvokeNoParams(object o, EventArgs args)
public EventHandler get_FakeDelegate()
}
internal System.Web.OutputFilterStream : Stream {
private HttpResponseStream stream
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Position
public long Length
public void .ctor(HttpResponseStream stream)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Position()
public void set_Position(long value)
public long get_Length()
public int Read(Byte[] buffer, int offset, int count)
public int ReadByte()
public long Seek(long offset, SeekOrigin loc)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
public void Flush()
}
public System.Web.ParserError : object {
private string _errorText
private string _virtualPath
private int _line
public string ErrorText
public string VirtualPath
public int Line
public void .ctor(string errorText, string virtualPath, int line)
public string get_ErrorText()
public void set_ErrorText(string value)
public string get_VirtualPath()
public void set_VirtualPath(string value)
public int get_Line()
public void set_Line(int value)
}
public System.Web.ParserErrorCollection : CollectionBase {
public ParserError Item
public void .ctor(ParserError[] value)
public ParserError get_Item(int index)
public void set_Item(int index, ParserError value)
public int Add(ParserError value)
public void AddRange(ParserErrorCollection value)
public void AddRange(ParserError[] value)
public bool Contains(ParserError value)
public void CopyTo(ParserError[] array, int index)
public int IndexOf(ParserError value)
public void Insert(int index, ParserError value)
public void Remove(ParserError value)
}
public System.Web.PreApplicationStartMethodAttribute : Attribute {
private Type _type
private string _methodName
public Type Type
public string MethodName
public void .ctor(Type type, string methodName)
public Type get_Type()
public string get_MethodName()
}
public System.Web.ProcessInfo : object {
private TimeSpan age
private int peakMemoryUsed
private int processID
private int requestCount
private ProcessShutdownReason shutdownReason
private DateTime startTime
private ProcessStatus status
public TimeSpan Age
public int PeakMemoryUsed
public int ProcessID
public int RequestCount
public ProcessShutdownReason ShutdownReason
public DateTime StartTime
public ProcessStatus Status
public void .ctor(DateTime startTime, TimeSpan age, int processID, int requestCount, ProcessStatus status, ProcessShutdownReason shutdownReason, int peakMemoryUsed)
public TimeSpan get_Age()
public int get_PeakMemoryUsed()
public int get_ProcessID()
public int get_RequestCount()
public ProcessShutdownReason get_ShutdownReason()
public DateTime get_StartTime()
public ProcessStatus get_Status()
public void SetAll(DateTime startTime, TimeSpan age, int processID, int requestCount, ProcessStatus status, ProcessShutdownReason shutdownReason, int peakMemoryUsed)
}
public System.Web.ProcessModelInfo : object {
public ProcessInfo GetCurrentProcessInfo()
public ProcessInfo[] GetHistory(int numRecords)
}
public System.Web.ProcessShutdownReason : Enum {
public int value__
public ProcessShutdownReason None
public ProcessShutdownReason Unexpected
public ProcessShutdownReason RequestsLimit
public ProcessShutdownReason RequestQueueLimit
public ProcessShutdownReason Timeout
public ProcessShutdownReason IdleTimeout
public ProcessShutdownReason MemoryLimitExceeded
public ProcessShutdownReason PingFailed
public ProcessShutdownReason DeadlockSuspected
}
public System.Web.ProcessStatus : Enum {
public int value__
public ProcessStatus Alive
public ProcessStatus ShuttingDown
public ProcessStatus ShutDown
public ProcessStatus Terminated
}
public System.Web.Profile.CustomProviderDataAttribute : Attribute {
private string customProviderData
public string CustomProviderData
public void .ctor(string customProviderData)
public bool IsDefaultAttribute()
public string get_CustomProviderData()
}
public System.Web.Profile.ProfileAuthenticationOption : Enum {
public int value__
public ProfileAuthenticationOption Anonymous
public ProfileAuthenticationOption Authenticated
public ProfileAuthenticationOption All
}
public System.Web.Profile.ProfileAutoSaveEventArgs : EventArgs {
private HttpContext context
private bool continueWithProfileAutoSave
public HttpContext Context
public bool ContinueWithProfileAutoSave
public void .ctor(HttpContext context)
public HttpContext get_Context()
public bool get_ContinueWithProfileAutoSave()
public void set_ContinueWithProfileAutoSave(bool value)
}
public System.Web.Profile.ProfileAutoSaveEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ProfileAutoSaveEventArgs e)
public IAsyncResult BeginInvoke(object sender, ProfileAutoSaveEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Profile.ProfileBase : SettingsBase {
private bool _propertiyValuesLoaded
private bool _dirty
private DateTime _lastActivityDate
private DateTime _lastUpdatedDate
private SettingsContext _settingsContext
private SettingsPropertyValueCollection _propertiyValues
private string Profiles_SettingsPropertyCollection
private SettingsPropertyCollection _properties
public object Item
public bool IsAnonymous
public bool IsDirty
public DateTime LastActivityDate
public DateTime LastUpdatedDate
public SettingsPropertyCollection Properties
public string UserName
private void InitProperties()
public ProfileBase Create(string username)
public ProfileBase Create(string username, bool isAuthenticated)
public ProfileGroupBase GetProfileGroup(string groupName)
public object GetPropertyValue(string propertyName)
public void SetPropertyValue(string propertyName, object propertyValue)
public object get_Item(string propertyName)
public void set_Item(string propertyName, object value)
private void InitPropertiesValues()
private Type GetPropertyType(ProfileGroupSettings pgs, ProfilePropertySettings pps)
private void ValidateProperty(SettingsProperty settingsProperty, ElementInformation elementInfo)
private SettingsProperty CreateSettingsProperty(PropertyInfo property)
private SettingsProperty CreateSettingsProperty(ProfileGroupSettings pgs, ProfilePropertySettings pps)
public void Initialize(string username, bool isAuthenticated)
public void Save()
public bool get_IsAnonymous()
public bool get_IsDirty()
public DateTime get_LastActivityDate()
public DateTime get_LastUpdatedDate()
public SettingsPropertyCollection get_Properties()
public string get_UserName()
}
public System.Web.Profile.ProfileEventArgs : EventArgs {
private HttpContext _Context
private ProfileBase _Profile
public HttpContext Context
public ProfileBase Profile
public HttpContext get_Context()
public ProfileBase get_Profile()
public void set_Profile(ProfileBase value)
public void .ctor(HttpContext context)
}
public System.Web.Profile.ProfileEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ProfileEventArgs e)
public IAsyncResult BeginInvoke(object sender, ProfileEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Profile.ProfileGroupBase : object {
private string _MyName
private ProfileBase _Parent
public object Item
public object get_Item(string propertyName)
public void set_Item(string propertyName, object value)
public object GetPropertyValue(string propertyName)
public void SetPropertyValue(string propertyName, object propertyValue)
public void Init(ProfileBase parent, string myName)
}
public System.Web.Profile.ProfileInfo : object {
private string _UserName
private DateTime _LastActivityDate
private DateTime _LastUpdatedDate
private bool _IsAnonymous
private int _Size
public string UserName
public DateTime LastActivityDate
public DateTime LastUpdatedDate
public bool IsAnonymous
public int Size
public void .ctor(string username, bool isAnonymous, DateTime lastActivityDate, DateTime lastUpdatedDate, int size)
public string get_UserName()
public DateTime get_LastActivityDate()
public DateTime get_LastUpdatedDate()
public bool get_IsAnonymous()
public int get_Size()
}
public System.Web.Profile.ProfileInfoCollection : object {
private Hashtable _Hashtable
private ArrayList _ArrayList
private bool _ReadOnly
private int _CurPos
private int _NumBlanks
public ProfileInfo Item
public int Count
public bool IsSynchronized
public object SyncRoot
public void Add(ProfileInfo profileInfo)
public void Remove(string name)
public ProfileInfo get_Item(string name)
public IEnumerator GetEnumerator()
public void SetReadOnly()
public void Clear()
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
public void CopyTo(Array array, int index)
public void CopyTo(ProfileInfo[] array, int index)
private void DoCompact()
}
public System.Web.Profile.ProfileManager : object {
private ProfileSection config
private ProfileProviderCollection providersCollection
public string ApplicationName
public bool AutomaticSaveEnabled
public bool Enabled
public ProfileProvider Provider
public ProfileProviderCollection Providers
public int DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
public bool DeleteProfile(string username)
public int DeleteProfiles(String[] usernames)
public int DeleteProfiles(ProfileInfoCollection profiles)
public ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate)
public ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch)
public ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
public ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption)
public ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption, int pageIndex, int pageSize, Int32& totalRecords)
public int GetNumberOfInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
public int GetNumberOfProfiles(ProfileAuthenticationOption authenticationOption)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public bool get_AutomaticSaveEnabled()
public bool get_Enabled()
public ProfileProvider get_Provider()
public ProfileProviderCollection get_Providers()
private void CheckEnabled()
public void AddDynamicProfileProperty(ProfilePropertySettings property)
}
public System.Web.Profile.ProfileMigrateEventArgs : EventArgs {
private HttpContext context
private string anonymousId
public string AnonymousID
public HttpContext Context
public void .ctor(HttpContext context, string anonymousId)
public string get_AnonymousID()
public HttpContext get_Context()
}
public System.Web.Profile.ProfileMigrateEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ProfileMigrateEventArgs e)
public IAsyncResult BeginInvoke(object sender, ProfileMigrateEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Profile.ProfileModule : object {
private object migrateAnonymousEvent
private object personalizeEvent
private object profileAutoSavingEvent
private HttpApplication app
private ProfileBase profile
private string anonymousCookieName
private EventHandlerList events
public void add_MigrateAnonymous(ProfileMigrateEventHandler value)
public void remove_MigrateAnonymous(ProfileMigrateEventHandler value)
public void add_Personalize(ProfileEventHandler value)
public void remove_Personalize(ProfileEventHandler value)
public void add_ProfileAutoSaving(ProfileAutoSaveEventHandler value)
public void remove_ProfileAutoSaving(ProfileAutoSaveEventHandler value)
public void Dispose()
public void Init(HttpApplication app)
private void OnEnter(object o, EventArgs eventArgs)
private void OnLeave(object o, EventArgs eventArgs)
}
internal System.Web.Profile.ProfileParser : object {
internal void .ctor(HttpContext context)
public Type GetProfileCommonType(HttpContext context)
public Type GetProfileGroupType(HttpContext context, string groupName)
}
public System.Web.Profile.ProfileProvider : SettingsProvider {
public int DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
public int DeleteProfiles(String[] usernames)
public int DeleteProfiles(ProfileInfoCollection profiles)
public ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption, int pageIndex, int pageSize, Int32& totalRecords)
public int GetNumberOfInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
}
public System.Web.Profile.ProfileProviderAttribute : Attribute {
private string providerName
public string ProviderName
public void .ctor(string providerName)
public string get_ProviderName()
}
public System.Web.Profile.ProfileProviderCollection : SettingsProviderCollection {
public ProfileProvider Item
public void Add(ProviderBase provider)
public ProfileProvider get_Item(string name)
}
public System.Web.Profile.SettingsAllowAnonymousAttribute : Attribute {
private bool allow
public bool Allow
public void .ctor(bool allow)
public bool IsDefaultAttribute()
public bool get_Allow()
}
internal System.Web.Profile.SqliteProfileProvider : ProfileProvider {
private string m_ProfilesTableName
private string m_ProfileDataTableName
private string m_ConnectionString
private SerializationHelper m_serializationHelper
private string m_ApplicationName
public string ApplicationName
private DbParameter AddParameter(DbCommand command, string parameterName)
private DbParameter AddParameter(DbCommand command, string parameterName, object parameterValue)
private DbParameter AddParameter(DbCommand command, string parameterName, ParameterDirection direction, object parameterValue)
public void Initialize(string name, NameValueCollection config)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public int DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
public int DeleteProfiles(String[] usernames)
public int DeleteProfiles(ProfileInfoCollection profiles)
public ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption, int pageIndex, int pageSize, Int32& totalRecords)
public int GetNumberOfInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
public SettingsPropertyValueCollection GetPropertyValues(SettingsContext context, SettingsPropertyCollection collection)
public void SetPropertyValues(SettingsContext context, SettingsPropertyValueCollection collection)
private void CreateProfileForUser(string username, bool isAuthenticated)
private bool ProfileExists(string username)
private void UpdateActivityDates(string username, bool isAuthenticated, bool activityOnly)
private string GetConfigValue(string configValue, string defaultValue)
}
public System.Web.Profile.SqlProfileProvider : ProfileProvider {
private ConnectionStringSettings connectionString
private DbProviderFactory factory
private string applicationName
private bool schemaIsOk
public string ApplicationName
public int DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
public int DeleteProfiles(ProfileInfoCollection profiles)
public int DeleteProfiles(String[] usernames)
private int DeleteProfilesInternal(String[] usernames)
public ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords)
public ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption, int pageIndex, int pageSize, Int32& totalRecords)
public int GetNumberOfInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
public SettingsPropertyValueCollection GetPropertyValues(SettingsContext sc, SettingsPropertyCollection properties)
public void SetPropertyValues(SettingsContext sc, SettingsPropertyValueCollection properties)
public void Initialize(string name, NameValueCollection config)
public string get_ApplicationName()
public void set_ApplicationName(string value)
private DbConnection CreateConnection()
private DbParameter AddParameter(DbCommand command, string parameterName, object parameterValue)
private DbParameter AddParameter(DbCommand command, string parameterName, ParameterDirection direction, object parameterValue)
private void CheckParam(string pName, string p, int length)
private int GetReturnValue(DbParameter returnValue)
private ProfileInfo ReadProfileInfo(DbDataReader reader)
private ProfileInfoCollection BuildProfileInfoCollection(DbDataReader reader, Int32& totalRecords)
private string GetStringConfigValue(NameValueCollection config, string name, string def)
private void DecodeProfileData(string allnames, string values, Byte[] buf, SettingsPropertyValueCollection properties)
private void EncodeProfileData(String& allNames, String& allValues, Byte[]& buf, SettingsPropertyValueCollection properties, bool userIsAuthenticated)
}
internal System.Web.Properties.Resources : object {
private ResourceManager resourceMan
private CultureInfo resourceCulture
internal ResourceManager ResourceManager
internal CultureInfo Culture
internal string ErrArgumentNull
internal string ErrArgumentNullOrEmpty
internal string ErrAutoGeneratedKeyNotSupported
internal string ErrCantDecodeHashedPw
internal string ErrCantDeletePopulatedRole
internal string ErrCantLogoutUser
internal string ErrCantRetrieveHashedPw
internal string ErrCantUpdateFailtureCount
internal string ErrCantUpdateFailtureCountAndWindowStart
internal string ErrConnectionStringNullOrEmpty
internal string ErrIncorrectPasswordAnswer
internal string ErrOperationAborted
internal string ErrPasswordAnswerRequired
internal string ErrPasswordChangeCanceled
internal string ErrPasswordResetAborted
internal string ErrPasswordResetCanceled
internal string ErrPasswordResetNotEnabled
internal string ErrPasswordRetrievalNotEnabled
internal string ErrProfileAlreadyExist
internal string ErrPwFormatNotSupported
internal string ErrRoleAlreadyExist
internal string ErrRoleNotExist
internal string ErrRollbackFailed
internal string ErrUserAlreadyInRole
internal string ErrUserIsLoggedOut
internal string ErrUserIsNotInRole
internal string ErrUserNotFound
internal string LogRollbackAttempt
internal string MembershipProviderDefaultDescription
internal string MembershipProviderDefaultName
internal string ProfileProviderDefaultDescription
internal string ProfileProviderDefaultName
internal string RoleProviderDefaultDescription
internal string RoleProviderDefaultName
internal string SessionStoreProviderDefaultDescription
internal string SessionStoreProviderDefaultName
internal ResourceManager get_ResourceManager()
internal CultureInfo get_Culture()
internal void set_Culture(CultureInfo value)
internal string get_ErrArgumentNull()
internal string get_ErrArgumentNullOrEmpty()
internal string get_ErrAutoGeneratedKeyNotSupported()
internal string get_ErrCantDecodeHashedPw()
internal string get_ErrCantDeletePopulatedRole()
internal string get_ErrCantLogoutUser()
internal string get_ErrCantRetrieveHashedPw()
internal string get_ErrCantUpdateFailtureCount()
internal string get_ErrCantUpdateFailtureCountAndWindowStart()
internal string get_ErrConnectionStringNullOrEmpty()
internal string get_ErrIncorrectPasswordAnswer()
internal string get_ErrOperationAborted()
internal string get_ErrPasswordAnswerRequired()
internal string get_ErrPasswordChangeCanceled()
internal string get_ErrPasswordResetAborted()
internal string get_ErrPasswordResetCanceled()
internal string get_ErrPasswordResetNotEnabled()
internal string get_ErrPasswordRetrievalNotEnabled()
internal string get_ErrProfileAlreadyExist()
internal string get_ErrPwFormatNotSupported()
internal string get_ErrRoleAlreadyExist()
internal string get_ErrRoleNotExist()
internal string get_ErrRollbackFailed()
internal string get_ErrUserAlreadyInRole()
internal string get_ErrUserIsLoggedOut()
internal string get_ErrUserIsNotInRole()
internal string get_ErrUserNotFound()
internal string get_LogRollbackAttempt()
internal string get_MembershipProviderDefaultDescription()
internal string get_MembershipProviderDefaultName()
internal string get_ProfileProviderDefaultDescription()
internal string get_ProfileProviderDefaultName()
internal string get_RoleProviderDefaultDescription()
internal string get_RoleProviderDefaultName()
internal string get_SessionStoreProviderDefaultDescription()
internal string get_SessionStoreProviderDefaultName()
}
internal System.Web.QueueManager : object {
private int minFree
private int minLocalFree
private int queueLimit
private Queue queue
private bool disposing
private Exception initialException
private PerformanceCounter requestsQueuedCounter
public bool HasException
public Exception InitialException
public bool get_HasException()
public Exception get_InitialException()
private bool CanExecuteRequest(HttpWorkerRequest req)
public HttpWorkerRequest GetNextRequest(HttpWorkerRequest req)
private void Queue(HttpWorkerRequest wr)
private HttpWorkerRequest Dequeue()
public void Dispose()
}
public System.Web.ReadEntityBodyMode : Enum {
public int value__
public ReadEntityBodyMode None
public ReadEntityBodyMode Classic
public ReadEntityBodyMode Bufferless
public ReadEntityBodyMode Buffered
}
public System.Web.RequestNotification : Enum {
public int value__
public RequestNotification BeginRequest
public RequestNotification AuthenticateRequest
public RequestNotification AuthorizeRequest
public RequestNotification ResolveRequestCache
public RequestNotification MapRequestHandler
public RequestNotification AcquireRequestState
public RequestNotification PreExecuteRequestHandler
public RequestNotification ExecuteRequestHandler
public RequestNotification ReleaseRequestState
public RequestNotification UpdateRequestCache
public RequestNotification LogRequest
public RequestNotification EndRequest
public RequestNotification SendResponse
}
public System.Web.RequestNotificationStatus : Enum {
public int value__
public RequestNotificationStatus Continue
public RequestNotificationStatus Pending
public RequestNotificationStatus FinishRequest
}
internal System.Web.Routing.BoundUrl : object {
private string <Url>k__BackingField
private RouteValueDictionary <Values>k__BackingField
public string Url
public RouteValueDictionary Values
public string get_Url()
public void set_Url(string value)
public RouteValueDictionary get_Values()
public void set_Values(RouteValueDictionary value)
}
internal System.Web.Routing.ContentPathSegment : PathSegment {
private IList`1<PathSubsegment> <Subsegments>k__BackingField
public bool IsCatchAll
public IList`1<PathSubsegment> Subsegments
public void .ctor(IList`1<PathSubsegment> subsegments)
public bool get_IsCatchAll()
public IList`1<PathSubsegment> get_Subsegments()
private void set_Subsegments(IList`1<PathSubsegment> value)
}
public System.Web.Routing.HttpMethodConstraint : object {
private ICollection`1<string> <AllowedMethods>k__BackingField
public ICollection`1<string> AllowedMethods
public void .ctor(String[] allowedMethods)
public ICollection`1<string> get_AllowedMethods()
private void set_AllowedMethods(ICollection`1<string> value)
protected bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection)
private bool System.Web.Routing.IRouteConstraint.Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection)
}
public System.Web.Routing.IRouteConstraint {
public bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection)
}
public System.Web.Routing.IRouteHandler {
public IHttpHandler GetHttpHandler(RequestContext requestContext)
}
internal System.Web.Routing.LiteralSubsegment : PathSubsegment {
private string <Literal>k__BackingField
public string Literal
public void .ctor(string literal)
public string get_Literal()
private void set_Literal(string value)
}
public System.Web.Routing.PageRouteHandler : object {
private string <VirtualPath>k__BackingField
private bool <CheckPhysicalUrlAccess>k__BackingField
private bool _useRouteVirtualPath
private Route _routeVirtualPath
public string VirtualPath
public bool CheckPhysicalUrlAccess
private Route RouteVirtualPath
public void .ctor(string virtualPath)
public void .ctor(string virtualPath, bool checkPhysicalUrlAccess)
public string get_VirtualPath()
private void set_VirtualPath(string value)
public bool get_CheckPhysicalUrlAccess()
private void set_CheckPhysicalUrlAccess(bool value)
private Route get_RouteVirtualPath()
private bool CheckUrlAccess(string virtualPath, RequestContext requestContext)
private bool CheckUrlAccessWithAssert(string virtualPath, RequestContext requestContext, IPrincipal user)
public IHttpHandler GetHttpHandler(RequestContext requestContext)
public string GetSubstitutedVirtualPath(RequestContext requestContext)
}
internal System.Web.Routing.ParameterSubsegment : PathSubsegment {
private bool <IsCatchAll>k__BackingField
private string <ParameterName>k__BackingField
public bool IsCatchAll
public string ParameterName
public void .ctor(string parameterName)
public bool get_IsCatchAll()
private void set_IsCatchAll(bool value)
public string get_ParameterName()
private void set_ParameterName(string value)
}
internal System.Web.Routing.ParsedRoute : object {
private IList`1<PathSegment> <PathSegments>k__BackingField
private IList`1<PathSegment> PathSegments
public void .ctor(IList`1<PathSegment> pathSegments)
private IList`1<PathSegment> get_PathSegments()
private void set_PathSegments(IList`1<PathSegment> value)
public BoundUrl Bind(RouteValueDictionary currentValues, RouteValueDictionary values, RouteValueDictionary defaultValues, RouteValueDictionary constraints)
private string EscapeReservedCharacters(Match m)
private bool ForEachParameter(IList`1<PathSegment> pathSegments, Func`2<ParameterSubsegment, bool> action)
private ParameterSubsegment GetParameterSubsegment(IList`1<PathSegment> pathSegments, string parameterName)
private bool IsParameterRequired(ParameterSubsegment parameterSubsegment, RouteValueDictionary defaultValues, Object& defaultValue)
private bool IsRoutePartNonEmpty(object routePart)
public RouteValueDictionary Match(string virtualPath, RouteValueDictionary defaultValues)
private void MatchCatchAll(ContentPathSegment contentPathSegment, IEnumerable`1<string> remainingRequestSegments, RouteValueDictionary defaultValues, RouteValueDictionary matchedValues)
private bool MatchContentPathSegment(ContentPathSegment routeSegment, string requestPathSegment, RouteValueDictionary defaultValues, RouteValueDictionary matchedValues)
private bool RoutePartsEqual(object a, object b)
private string UrlEncode(string str)
}
public System.Web.Routing.RequestContext : object {
private HttpContextBase <HttpContext>k__BackingField
private RouteData <RouteData>k__BackingField
public HttpContextBase HttpContext
public RouteData RouteData
public void .ctor(HttpContextBase httpContext, RouteData routeData)
public HttpContextBase get_HttpContext()
public void set_HttpContext(HttpContextBase value)
public RouteData get_RouteData()
public void set_RouteData(RouteData value)
}
public System.Web.Routing.Route : RouteBase {
private string HttpMethodParameterName
private string _url
private ParsedRoute _parsedRoute
private RouteValueDictionary <Constraints>k__BackingField
private RouteValueDictionary <DataTokens>k__BackingField
private RouteValueDictionary <Defaults>k__BackingField
private IRouteHandler <RouteHandler>k__BackingField
public RouteValueDictionary Constraints
public RouteValueDictionary DataTokens
public RouteValueDictionary Defaults
public IRouteHandler RouteHandler
public string Url
public void .ctor(string url, IRouteHandler routeHandler)
public void .ctor(string url, RouteValueDictionary defaults, IRouteHandler routeHandler)
public void .ctor(string url, RouteValueDictionary defaults, RouteValueDictionary constraints, IRouteHandler routeHandler)
public void .ctor(string url, RouteValueDictionary defaults, RouteValueDictionary constraints, RouteValueDictionary dataTokens, IRouteHandler routeHandler)
public RouteValueDictionary get_Constraints()
public void set_Constraints(RouteValueDictionary value)
public RouteValueDictionary get_DataTokens()
public void set_DataTokens(RouteValueDictionary value)
public RouteValueDictionary get_Defaults()
public void set_Defaults(RouteValueDictionary value)
public IRouteHandler get_RouteHandler()
public void set_RouteHandler(IRouteHandler value)
public string get_Url()
public void set_Url(string value)
public RouteData GetRouteData(HttpContextBase httpContext)
public VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values)
protected bool ProcessConstraint(HttpContextBase httpContext, object constraint, string parameterName, RouteValueDictionary values, RouteDirection routeDirection)
private bool ProcessConstraints(HttpContextBase httpContext, RouteValueDictionary values, RouteDirection routeDirection)
}
public System.Web.Routing.RouteBase : object {
private bool _routeExistingFiles
public bool RouteExistingFiles
public RouteData GetRouteData(HttpContextBase httpContext)
public VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values)
public bool get_RouteExistingFiles()
public void set_RouteExistingFiles(bool value)
}
public System.Web.Routing.RouteCollection : Collection`1<RouteBase> {
private Dictionary`2<string, RouteBase> _namedMap
private VirtualPathProvider _vpp
private ReaderWriterLockSlim _rwLock
private bool <AppendTrailingSlash>k__BackingField
private bool <LowercaseUrls>k__BackingField
private bool <RouteExistingFiles>k__BackingField
public bool AppendTrailingSlash
public bool LowercaseUrls
public bool RouteExistingFiles
private VirtualPathProvider VPP
public RouteBase Item
public void .ctor(VirtualPathProvider virtualPathProvider)
public bool get_AppendTrailingSlash()
public void set_AppendTrailingSlash(bool value)
public bool get_LowercaseUrls()
public void set_LowercaseUrls(bool value)
public bool get_RouteExistingFiles()
public void set_RouteExistingFiles(bool value)
private VirtualPathProvider get_VPP()
private void set_VPP(VirtualPathProvider value)
public RouteBase get_Item(string name)
public void Add(string name, RouteBase item)
public Route MapPageRoute(string routeName, string routeUrl, string physicalFile)
public Route MapPageRoute(string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess)
public Route MapPageRoute(string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, RouteValueDictionary defaults)
public Route MapPageRoute(string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, RouteValueDictionary defaults, RouteValueDictionary constraints)
public Route MapPageRoute(string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, RouteValueDictionary defaults, RouteValueDictionary constraints, RouteValueDictionary dataTokens)
protected void ClearItems()
public IDisposable GetReadLock()
private RequestContext GetRequestContext(RequestContext requestContext)
private bool IsRouteToExistingFile(HttpContextBase httpContext)
public RouteData GetRouteData(HttpContextBase httpContext)
private string NormalizeVirtualPath(RequestContext requestContext, string virtualPath)
public VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values)
public VirtualPathData GetVirtualPath(RequestContext requestContext, string name, RouteValueDictionary values)
public IDisposable GetWriteLock()
public void Ignore(string url)
public void Ignore(string url, object constraints)
protected void InsertItem(int index, RouteBase item)
protected void RemoveItem(int index)
private void RemoveRouteName(int index)
protected void SetItem(int index, RouteBase item)
}
public System.Web.Routing.RouteData : object {
private IRouteHandler _routeHandler
private RouteValueDictionary _values
private RouteValueDictionary _dataTokens
private RouteBase <Route>k__BackingField
public RouteValueDictionary DataTokens
public RouteBase Route
public IRouteHandler RouteHandler
public RouteValueDictionary Values
public void .ctor(RouteBase route, IRouteHandler routeHandler)
public RouteValueDictionary get_DataTokens()
public RouteBase get_Route()
public void set_Route(RouteBase value)
public IRouteHandler get_RouteHandler()
public void set_RouteHandler(IRouteHandler value)
public RouteValueDictionary get_Values()
public string GetRequiredString(string valueName)
}
public System.Web.Routing.RouteDirection : Enum {
public int value__
public RouteDirection IncomingRequest
public RouteDirection UrlGeneration
}
internal System.Web.Routing.RouteParser : object {
private string GetLiteral(string segmentLiteral)
private int IndexOfFirstOpenParameter(string segment, int startIndex)
internal bool IsSeparator(string s)
private bool IsValidParameterName(string parameterName)
internal bool IsInvalidRouteUrl(string routeUrl)
public ParsedRoute Parse(string routeUrl)
private IList`1<PathSubsegment> ParseUrlSegment(string segment, Exception& exception)
private IList`1<PathSegment> SplitUrlToPathSegments(IList`1<string> urlParts)
internal IList`1<string> SplitUrlToPathSegmentStrings(string url)
private Exception ValidateUrlParts(IList`1<string> pathSegments)
private Exception ValidateUrlSegment(IList`1<PathSubsegment> pathSubsegments, HashSet`1<string> usedParameterNames, string pathSegment)
}
public System.Web.Routing.RouteTable : object {
private RouteCollection _instance
public RouteCollection Routes
public RouteCollection get_Routes()
}
public System.Web.Routing.RouteValueDictionary : object {
private Dictionary`2<string, object> _dictionary
public int Count
public KeyCollection<string, object> Keys
public ValueCollection<string, object> Values
public object Item
private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.Keys
private ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.Values
private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly
public void .ctor(object values)
public void .ctor(IDictionary`2<string, object> dictionary)
public int get_Count()
public KeyCollection<string, object> get_Keys()
public ValueCollection<string, object> get_Values()
public object get_Item(string key)
public void set_Item(string key, object value)
public void Add(string key, object value)
private void AddValues(object values)
public void Clear()
public bool ContainsKey(string key)
public bool ContainsValue(object value)
public Enumerator<string, object> GetEnumerator()
public bool Remove(string key)
public bool TryGetValue(string key, Object& value)
private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Keys()
private ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Values()
private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item)
private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item)
private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex)
private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly()
private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item)
private IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public System.Web.Routing.StopRoutingHandler : object {
protected IHttpHandler GetHttpHandler(RequestContext requestContext)
private IHttpHandler System.Web.Routing.IRouteHandler.GetHttpHandler(RequestContext requestContext)
}
internal System.Web.Routing.UrlAuthFailureHandler : object {
public bool IsReusable
public void ProcessRequest(HttpContext context)
public bool get_IsReusable()
}
public System.Web.Routing.UrlRoutingHandler : object {
private RouteCollection _routeCollection
protected bool IsReusable
public RouteCollection RouteCollection
private bool System.Web.IHttpHandler.IsReusable
protected bool get_IsReusable()
public RouteCollection get_RouteCollection()
public void set_RouteCollection(RouteCollection value)
protected void ProcessRequest(HttpContext httpContext)
protected void ProcessRequest(HttpContextBase httpContext)
protected void VerifyAndProcessRequest(IHttpHandler httpHandler, HttpContextBase httpContext)
private bool System.Web.IHttpHandler.get_IsReusable()
private void System.Web.IHttpHandler.ProcessRequest(HttpContext context)
}
public System.Web.Routing.UrlRoutingModule : object {
private object _contextKey
private object _requestDataKey
private RouteCollection _routeCollection
public RouteCollection RouteCollection
public RouteCollection get_RouteCollection()
public void set_RouteCollection(RouteCollection value)
protected void Dispose()
protected void Init(HttpApplication application)
private void OnApplicationPostResolveRequestCache(object sender, EventArgs e)
public void PostMapRequestHandler(HttpContextBase context)
public void PostResolveRequestCache(HttpContextBase context)
private void System.Web.IHttpModule.Dispose()
private void System.Web.IHttpModule.Init(HttpApplication application)
}
public System.Web.Routing.VirtualPathData : object {
private string _virtualPath
private RouteValueDictionary _dataTokens
private RouteBase <Route>k__BackingField
public RouteValueDictionary DataTokens
public RouteBase Route
public string VirtualPath
public void .ctor(RouteBase route, string virtualPath)
public RouteValueDictionary get_DataTokens()
public RouteBase get_Route()
public void set_Route(RouteBase value)
public string get_VirtualPath()
public void set_VirtualPath(string value)
}
public System.Web.Security.ActiveDirectoryConnectionProtection : Enum {
public int value__
public ActiveDirectoryConnectionProtection None
public ActiveDirectoryConnectionProtection Ssl
public ActiveDirectoryConnectionProtection SignAndSeal
}
public System.Web.Security.ActiveDirectoryMembershipProvider : MembershipProvider {
public string ApplicationName
public ActiveDirectoryConnectionProtection CurrentConnectionProtection
public bool EnablePasswordReset
public bool EnablePasswordRetrieval
public bool EnableSearchMethods
public MembershipPasswordFormat PasswordFormat
public bool RequiresQuestionAndAnswer
public bool RequiresUniqueEmail
public int MaxInvalidPasswordAttempts
public int MinRequiredNonAlphanumericCharacters
public int MinRequiredPasswordLength
public int PasswordAttemptWindow
public int PasswordAnswerAttemptLockoutDuration
public string PasswordStrengthRegularExpression
public bool ChangePassword(string username, string oldPassword, string newPassword)
public bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer)
public MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status)
public bool DeleteUser(string username, bool deleteAllRelatedData)
public string GeneratePassword()
public MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords)
public int GetNumberOfUsersOnline()
public string GetPassword(string username, string passwordAnswer)
public MembershipUser GetUser(string username, bool userIsOnline)
public MembershipUser GetUser(object providerUserKey, bool userIsOnline)
public string GetUserNameByEmail(string email)
public void Initialize(string name, NameValueCollection config)
public string ResetPassword(string username, string passwordAnswer)
public void UpdateUser(MembershipUser user)
public bool ValidateUser(string username, string password)
public bool UnlockUser(string username)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public ActiveDirectoryConnectionProtection get_CurrentConnectionProtection()
public bool get_EnablePasswordReset()
public bool get_EnablePasswordRetrieval()
public bool get_EnableSearchMethods()
public MembershipPasswordFormat get_PasswordFormat()
public bool get_RequiresQuestionAndAnswer()
public bool get_RequiresUniqueEmail()
public int get_MaxInvalidPasswordAttempts()
public int get_MinRequiredNonAlphanumericCharacters()
public int get_MinRequiredPasswordLength()
public int get_PasswordAttemptWindow()
public int get_PasswordAnswerAttemptLockoutDuration()
public string get_PasswordStrengthRegularExpression()
}
public System.Web.Security.ActiveDirectoryMembershipUser : MembershipUser {
public void .ctor(string providerName, string name, object providerUserKey, string email, string passwordQuestion, string comment, bool isApproved, bool isLockedOut, DateTime creationDate, DateTime lastLoginDate, DateTime lastActivityDate, DateTime lastPasswordChangedDate, DateTime lastLockoutDate)
}
public System.Web.Security.AnonymousIdentificationEventArgs : EventArgs {
private HttpContext context
private string anonymousId
public HttpContext Context
public string AnonymousID
public void .ctor(HttpContext context)
public HttpContext get_Context()
public string get_AnonymousID()
public void set_AnonymousID(string value)
}
public System.Web.Security.AnonymousIdentificationEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, AnonymousIdentificationEventArgs e)
public IAsyncResult BeginInvoke(object sender, AnonymousIdentificationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Security.AnonymousIdentificationModule : object {
private object creatingEvent
private HttpApplication app
private EventHandlerList events
private AnonymousIdentificationSection Config
public bool Enabled
public void add_Creating(AnonymousIdentificationEventHandler value)
public void remove_Creating(AnonymousIdentificationEventHandler value)
public void ClearAnonymousIdentifier()
public void Dispose()
public void Init(HttpApplication app)
private void OnEnter(object source, EventArgs eventArgs)
public bool get_Enabled()
}
public System.Web.Security.AntiXss.AntiXssEncoder : HttpEncoder {
public string CssEncode(string input)
public string HtmlEncode(string input, bool useNamedEntities)
public string HtmlFormUrlEncode(string input)
public string HtmlFormUrlEncode(string input, int codePage)
public string HtmlFormUrlEncode(string input, Encoding inputEncoding)
public void MarkAsSafe(LowerCodeCharts lowerCodeCharts, LowerMidCodeCharts lowerMidCodeCharts, MidCodeCharts midCodeCharts, UpperMidCodeCharts upperMidCodeCharts, UpperCodeCharts upperCodeCharts)
public string UrlEncode(string input)
public string UrlEncode(string input, int codePage)
public string UrlEncode(string input, Encoding inputEncoding)
public string XmlAttributeEncode(string input)
public string XmlEncode(string input)
}
public System.Web.Security.AntiXss.LowerCodeCharts : Enum {
public long value__
public LowerCodeCharts None
public LowerCodeCharts BasicLatin
public LowerCodeCharts C1ControlsAndLatin1Supplement
public LowerCodeCharts LatinExtendedA
public LowerCodeCharts LatinExtendedB
public LowerCodeCharts IpaExtensions
public LowerCodeCharts SpacingModifierLetters
public LowerCodeCharts CombiningDiacriticalMarks
public LowerCodeCharts GreekAndCoptic
public LowerCodeCharts Cyrillic
public LowerCodeCharts CyrillicSupplement
public LowerCodeCharts Armenian
public LowerCodeCharts Hebrew
public LowerCodeCharts Arabic
public LowerCodeCharts Syriac
public LowerCodeCharts ArabicSupplement
public LowerCodeCharts Thaana
public LowerCodeCharts Nko
public LowerCodeCharts Samaritan
public LowerCodeCharts Devanagari
public LowerCodeCharts Bengali
public LowerCodeCharts Gurmukhi
public LowerCodeCharts Gujarati
public LowerCodeCharts Oriya
public LowerCodeCharts Tamil
public LowerCodeCharts Telugu
public LowerCodeCharts Kannada
public LowerCodeCharts Malayalam
public LowerCodeCharts Sinhala
public LowerCodeCharts Thai
public LowerCodeCharts Lao
public LowerCodeCharts Tibetan
public LowerCodeCharts Default
}
public System.Web.Security.AntiXss.LowerMidCodeCharts : Enum {
public long value__
public LowerMidCodeCharts None
public LowerMidCodeCharts Myanmar
public LowerMidCodeCharts Georgian
public LowerMidCodeCharts HangulJamo
public LowerMidCodeCharts Ethiopic
public LowerMidCodeCharts EthiopicSupplement
public LowerMidCodeCharts Cherokee
public LowerMidCodeCharts UnifiedCanadianAboriginalSyllabics
public LowerMidCodeCharts Ogham
public LowerMidCodeCharts Runic
public LowerMidCodeCharts Tagalog
public LowerMidCodeCharts Hanunoo
public LowerMidCodeCharts Buhid
public LowerMidCodeCharts Tagbanwa
public LowerMidCodeCharts Khmer
public LowerMidCodeCharts Mongolian
public LowerMidCodeCharts UnifiedCanadianAboriginalSyllabicsExtended
public LowerMidCodeCharts Limbu
public LowerMidCodeCharts TaiLe
public LowerMidCodeCharts NewTaiLue
public LowerMidCodeCharts KhmerSymbols
public LowerMidCodeCharts Buginese
public LowerMidCodeCharts TaiTham
public LowerMidCodeCharts Balinese
public LowerMidCodeCharts Sudanese
public LowerMidCodeCharts Lepcha
public LowerMidCodeCharts OlChiki
public LowerMidCodeCharts VedicExtensions
public LowerMidCodeCharts PhoneticExtensions
public LowerMidCodeCharts PhoneticExtensionsSupplement
public LowerMidCodeCharts CombiningDiacriticalMarksSupplement
public LowerMidCodeCharts LatinExtendedAdditional
}
public System.Web.Security.AntiXss.MidCodeCharts : Enum {
public long value__
public MidCodeCharts None
public MidCodeCharts GreekExtended
public MidCodeCharts GeneralPunctuation
public MidCodeCharts SuperscriptsAndSubscripts
public MidCodeCharts CurrencySymbols
public MidCodeCharts CombiningDiacriticalMarksForSymbols
public MidCodeCharts LetterlikeSymbols
public MidCodeCharts NumberForms
public MidCodeCharts Arrows
public MidCodeCharts MathematicalOperators
public MidCodeCharts MiscellaneousTechnical
public MidCodeCharts ControlPictures
public MidCodeCharts OpticalCharacterRecognition
public MidCodeCharts EnclosedAlphanumerics
public MidCodeCharts BoxDrawing
public MidCodeCharts BlockElements
public MidCodeCharts GeometricShapes
public MidCodeCharts MiscellaneousSymbols
public MidCodeCharts Dingbats
public MidCodeCharts MiscellaneousMathematicalSymbolsA
public MidCodeCharts SupplementalArrowsA
public MidCodeCharts BraillePatterns
public MidCodeCharts SupplementalArrowsB
public MidCodeCharts MiscellaneousMathematicalSymbolsB
public MidCodeCharts SupplementalMathematicalOperators
public MidCodeCharts MiscellaneousSymbolsAndArrows
public MidCodeCharts Glagolitic
public MidCodeCharts LatinExtendedC
public MidCodeCharts Coptic
public MidCodeCharts GeorgianSupplement
public MidCodeCharts Tifinagh
public MidCodeCharts EthiopicExtended
}
public System.Web.Security.AntiXss.UpperCodeCharts : Enum {
public int value__
public UpperCodeCharts None
public UpperCodeCharts DevanagariExtended
public UpperCodeCharts KayahLi
public UpperCodeCharts Rejang
public UpperCodeCharts HangulJamoExtendedA
public UpperCodeCharts Javanese
public UpperCodeCharts Cham
public UpperCodeCharts MyanmarExtendedA
public UpperCodeCharts TaiViet
public UpperCodeCharts MeeteiMayek
public UpperCodeCharts HangulSyllables
public UpperCodeCharts HangulJamoExtendedB
public UpperCodeCharts CjkCompatibilityIdeographs
public UpperCodeCharts AlphabeticPresentationForms
public UpperCodeCharts ArabicPresentationFormsA
public UpperCodeCharts VariationSelectors
public UpperCodeCharts VerticalForms
public UpperCodeCharts CombiningHalfMarks
public UpperCodeCharts CjkCompatibilityForms
public UpperCodeCharts SmallFormVariants
public UpperCodeCharts ArabicPresentationFormsB
public UpperCodeCharts HalfWidthAndFullWidthForms
public UpperCodeCharts Specials
}
public System.Web.Security.AntiXss.UpperMidCodeCharts : Enum {
public long value__
public UpperMidCodeCharts None
public UpperMidCodeCharts CyrillicExtendedA
public UpperMidCodeCharts SupplementalPunctuation
public UpperMidCodeCharts CjkRadicalsSupplement
public UpperMidCodeCharts KangxiRadicals
public UpperMidCodeCharts IdeographicDescriptionCharacters
public UpperMidCodeCharts CjkSymbolsAndPunctuation
public UpperMidCodeCharts Hiragana
public UpperMidCodeCharts Katakana
public UpperMidCodeCharts Bopomofo
public UpperMidCodeCharts HangulCompatibilityJamo
public UpperMidCodeCharts Kanbun
public UpperMidCodeCharts BopomofoExtended
public UpperMidCodeCharts CjkStrokes
public UpperMidCodeCharts KatakanaPhoneticExtensions
public UpperMidCodeCharts EnclosedCjkLettersAndMonths
public UpperMidCodeCharts CjkCompatibility
public UpperMidCodeCharts CjkUnifiedIdeographsExtensionA
public UpperMidCodeCharts YijingHexagramSymbols
public UpperMidCodeCharts CjkUnifiedIdeographs
public UpperMidCodeCharts YiSyllables
public UpperMidCodeCharts YiRadicals
public UpperMidCodeCharts Lisu
public UpperMidCodeCharts Vai
public UpperMidCodeCharts CyrillicExtendedB
public UpperMidCodeCharts Bamum
public UpperMidCodeCharts ModifierToneLetters
public UpperMidCodeCharts LatinExtendedD
public UpperMidCodeCharts SylotiNagri
public UpperMidCodeCharts CommonIndicNumberForms
public UpperMidCodeCharts Phagspa
public UpperMidCodeCharts Saurashtra
}
internal System.Web.Security.AspNetDBSchemaChecker : object {
private DbConnection CreateConnection(DbProviderFactory factory, string connStr)
public bool CheckMembershipSchemaVersion(DbProviderFactory factory, string connStr, string feature, string compatibleVersion)
private DbParameter AddParameter(DbProviderFactory factory, DbCommand command, string parameterName, ParameterDirection direction, object parameterValue)
}
public System.Web.Security.AuthorizationStoreRoleProvider : RoleProvider {
public string ApplicationName
public int CacheRefreshInterval
public string ScopeName
public string get_ApplicationName()
public void set_ApplicationName(string value)
public int get_CacheRefreshInterval()
public string get_ScopeName()
public void set_ScopeName(string value)
public void AddUsersToRoles(String[] usernames, String[] roleNames)
public void CreateRole(string roleName)
public bool DeleteRole(string roleName, bool throwOnPopulatedRole)
public String[] FindUsersInRole(string roleName, string usernameToMatch)
public String[] GetAllRoles()
public String[] GetRolesForUser(string username)
public String[] GetUsersInRole(string roleName)
public bool IsUserInRole(string username, string roleName)
public void RemoveUsersFromRoles(String[] userNames, String[] roleNames)
public bool RoleExists(string roleName)
}
public System.Web.Security.CookieProtection : Enum {
public int value__
public CookieProtection None
public CookieProtection Validation
public CookieProtection Encryption
public CookieProtection All
}
internal System.Web.Security.Cryptography.ICryptoService {
public Byte[] Protect(Byte[] clearData)
public Byte[] Unprotect(Byte[] protectedData)
}
public System.Web.Security.DefaultAuthenticationEventArgs : EventArgs {
private HttpContext _context
public HttpContext Context
public void .ctor(HttpContext context)
public HttpContext get_Context()
}
public System.Web.Security.DefaultAuthenticationEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DefaultAuthenticationEventArgs e)
public IAsyncResult BeginInvoke(object sender, DefaultAuthenticationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Security.DefaultAuthenticationModule : object {
private object authenticateEvent
private IPrincipal generic_principal
private EventHandlerList events
public void add_Authenticate(DefaultAuthenticationEventHandler value)
public void remove_Authenticate(DefaultAuthenticationEventHandler value)
public void Dispose()
public void Init(HttpApplication app)
private void OnDefaultAuthentication(object sender, EventArgs args)
}
public System.Web.Security.FileAuthorizationModule : object {
public void Dispose()
public void Init(HttpApplication app)
public bool CheckFileAccessForUser(string virtualPath, IntPtr token, string verb)
}
public System.Web.Security.FormsAuthentication : object {
private string authConfigPath
private string machineKeyConfigPath
private object locker
private bool initialized
private string cookieName
private string cookiePath
private int timeout
private FormsProtectionEnum protection
private bool requireSSL
private bool slidingExpiration
private string cookie_domain
private HttpCookieMode cookie_mode
private bool cookies_supported
private string default_url
private bool enable_crossapp_redirects
private string login_url
private String[] indexFiles
private TimeSpan <Timeout>k__BackingField
public TimeSpan Timeout
public bool IsEnabled
internal string ReturnUrl
public string FormsCookieName
public string FormsCookiePath
public bool RequireSSL
public bool SlidingExpiration
public string CookieDomain
public HttpCookieMode CookieMode
public bool CookiesSupported
public string DefaultUrl
public bool EnableCrossAppRedirects
public string LoginUrl
public TicketCompatibilityMode TicketCompatibilityMode
public TimeSpan get_Timeout()
private void set_Timeout(TimeSpan value)
public bool get_IsEnabled()
public void EnableFormsAuthentication(NameValueCollection configurationData)
public bool Authenticate(string name, string password)
private FormsAuthenticationTicket Decrypt2(Byte[] bytes)
public FormsAuthenticationTicket Decrypt(string encryptedTicket)
public string Encrypt(FormsAuthenticationTicket ticket)
public HttpCookie GetAuthCookie(string userName, bool createPersistentCookie)
public HttpCookie GetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath)
internal string get_ReturnUrl()
public string GetRedirectUrl(string userName, bool createPersistentCookie)
private string HashPasswordForStoringInConfigFile(string password, FormsAuthPasswordFormat passwordFormat)
public string HashPasswordForStoringInConfigFile(string password, string passwordFormat)
public void Initialize()
private string MapUrl(string url)
public void RedirectFromLoginPage(string userName, bool createPersistentCookie)
public void RedirectFromLoginPage(string userName, bool createPersistentCookie, string strCookiePath)
public FormsAuthenticationTicket RenewTicketIfOld(FormsAuthenticationTicket tOld)
public void SetAuthCookie(string userName, bool createPersistentCookie)
public void SetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath)
public void SignOut()
public string get_FormsCookieName()
public string get_FormsCookiePath()
public bool get_RequireSSL()
public bool get_SlidingExpiration()
public string get_CookieDomain()
public HttpCookieMode get_CookieMode()
public bool get_CookiesSupported()
public string get_DefaultUrl()
public bool get_EnableCrossAppRedirects()
public string get_LoginUrl()
public void RedirectToLoginPage()
public void RedirectToLoginPage(string extraQueryString)
private void Redirect(string url)
private void Redirect(string url, bool end)
public TicketCompatibilityMode get_TicketCompatibilityMode()
}
public System.Web.Security.FormsAuthenticationEventArgs : EventArgs {
private IPrincipal _User
private HttpContext _Context
public IPrincipal User
public HttpContext Context
public IPrincipal get_User()
public void set_User(IPrincipal value)
public HttpContext get_Context()
public void .ctor(HttpContext context)
}
public System.Web.Security.FormsAuthenticationEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormsAuthenticationEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormsAuthenticationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Security.FormsAuthenticationModule : object {
private object authenticateEvent
private bool _fAuthChecked
private bool _fAuthRequired
private AuthenticationSection _config
private bool isConfigInitialized
private EventHandlerList events
internal bool FormsAuthRequired
internal bool get_FormsAuthRequired()
public void add_Authenticate(FormsAuthenticationEventHandler value)
public void remove_Authenticate(FormsAuthenticationEventHandler value)
private void InitConfig(HttpContext context)
public void Dispose()
public void Init(HttpApplication app)
private void OnAuthenticateRequest(object sender, EventArgs args)
private void OnEndRequest(object sender, EventArgs args)
}
public System.Web.Security.FormsAuthenticationTicket : object {
private int version
private bool persistent
private DateTime issue_date
private DateTime expiration
private string name
private string cookie_path
private string user_data
public string CookiePath
public DateTime Expiration
public bool Expired
public bool IsPersistent
public DateTime IssueDate
public string Name
public string UserData
public int Version
internal Byte[] ToByteArray()
internal FormsAuthenticationTicket FromByteArray(Byte[] bytes)
public void .ctor(int version, string name, DateTime issueDate, DateTime expiration, bool isPersistent, string userData)
public void .ctor(int version, string name, DateTime issueDate, DateTime expiration, bool isPersistent, string userData, string cookiePath)
public void .ctor(string name, bool isPersistent, int timeout)
internal void SetDates(DateTime issue_date, DateTime expiration)
internal FormsAuthenticationTicket Clone()
public string get_CookiePath()
public DateTime get_Expiration()
public bool get_Expired()
public bool get_IsPersistent()
public DateTime get_IssueDate()
public string get_Name()
public string get_UserData()
public int get_Version()
}
public System.Web.Security.FormsIdentity : object {
private FormsAuthenticationTicket ticket
public string AuthenticationType
public bool IsAuthenticated
public string Name
public FormsAuthenticationTicket Ticket
public IEnumerable`1<Claim> Claims
public void .ctor(FormsAuthenticationTicket ticket)
public string get_AuthenticationType()
public bool get_IsAuthenticated()
public string get_Name()
public FormsAuthenticationTicket get_Ticket()
public IEnumerable`1<Claim> get_Claims()
public ClaimsIdentity Clone()
}
public System.Web.Security.MachineKey : object {
public Byte[] Decode(string encodedData, MachineKeyProtection protectionOption)
public string Encode(Byte[] data, MachineKeyProtection protectionOption)
public Byte[] Protect(Byte[] userData, String[] purposes)
public Byte[] Unprotect(Byte[] protectedData, String[] purposes)
private Byte[] GetHashed(string purposes)
}
public System.Web.Security.MachineKeyProtection : Enum {
public int value__
public MachineKeyProtection All
public MachineKeyProtection Encryption
public MachineKeyProtection Validation
}
public System.Web.Security.Membership : object {
private MembershipProviderCollection providers
private MembershipProvider provider
private int onlineTimeWindow
private string hashAlgorithmType
public string ApplicationName
public bool EnablePasswordReset
public bool EnablePasswordRetrieval
public string HashAlgorithmType
public bool RequiresQuestionAndAnswer
public int MaxInvalidPasswordAttempts
public int MinRequiredNonAlphanumericCharacters
public int MinRequiredPasswordLength
public int PasswordAttemptWindow
public string PasswordStrengthRegularExpression
public MembershipProvider Provider
public MembershipProviderCollection Providers
public int UserIsOnlineTimeWindow
public MembershipUser CreateUser(string username, string password)
public MembershipUser CreateUser(string username, string password, string email)
public MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, MembershipCreateStatus& status)
public MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status)
public bool DeleteUser(string username)
public bool DeleteUser(string username, bool deleteAllRelatedData)
public string GeneratePassword(int length, int numberOfNonAlphanumericCharacters)
public MembershipUserCollection GetAllUsers()
public MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords)
public int GetNumberOfUsersOnline()
public MembershipUser GetUser()
public MembershipUser GetUser(bool userIsOnline)
public MembershipUser GetUser(string username)
public MembershipUser GetUser(string username, bool userIsOnline)
public MembershipUser GetUser(object providerUserKey)
public MembershipUser GetUser(object providerUserKey, bool userIsOnline)
public string GetUserNameByEmail(string emailToMatch)
public void UpdateUser(MembershipUser user)
public bool ValidateUser(string username, string password)
public MembershipUserCollection FindUsersByEmail(string emailToMatch)
public MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public MembershipUserCollection FindUsersByName(string usernameToMatch)
public MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public bool get_EnablePasswordReset()
public bool get_EnablePasswordRetrieval()
public string get_HashAlgorithmType()
public bool get_RequiresQuestionAndAnswer()
public int get_MaxInvalidPasswordAttempts()
public int get_MinRequiredNonAlphanumericCharacters()
public int get_MinRequiredPasswordLength()
public int get_PasswordAttemptWindow()
public string get_PasswordStrengthRegularExpression()
public MembershipProvider get_Provider()
public MembershipProviderCollection get_Providers()
public int get_UserIsOnlineTimeWindow()
public void add_ValidatingPassword(MembershipValidatePasswordEventHandler value)
public void remove_ValidatingPassword(MembershipValidatePasswordEventHandler value)
}
internal System.Web.Security.MembershipHelper : object {
internal int SALT_BYTES
public int UserIsOnlineTimeWindow
public MembershipProviderCollection Providers
public int get_UserIsOnlineTimeWindow()
public MembershipProviderCollection get_Providers()
private SymmetricAlgorithm GetAlgorithm()
public Byte[] DecryptPassword(Byte[] encodedPassword)
public Byte[] EncryptPassword(Byte[] password)
}
public System.Web.Security.MembershipPasswordAttribute : ValidationAttribute {
private string <MinNonAlphanumericCharactersError>k__BackingField
private string <MinPasswordLengthError>k__BackingField
private int <MinRequiredNonAlphanumericCharacters>k__BackingField
private int <MinRequiredPasswordLength>k__BackingField
private string <PasswordStrengthError>k__BackingField
private string <PasswordStrengthRegularExpression>k__BackingField
private Type <ResourceType>k__BackingField
public string MinNonAlphanumericCharactersError
public string MinPasswordLengthError
public int MinRequiredNonAlphanumericCharacters
public int MinRequiredPasswordLength
public string PasswordStrengthError
public string PasswordStrengthRegularExpression
public Type ResourceType
public Nullable`1<int> PasswordStrengthRegexTimeout
public string get_MinNonAlphanumericCharactersError()
public void set_MinNonAlphanumericCharactersError(string value)
public string get_MinPasswordLengthError()
public void set_MinPasswordLengthError(string value)
public int get_MinRequiredNonAlphanumericCharacters()
public void set_MinRequiredNonAlphanumericCharacters(int value)
public int get_MinRequiredPasswordLength()
public void set_MinRequiredPasswordLength(int value)
public string get_PasswordStrengthError()
public void set_PasswordStrengthError(string value)
public string get_PasswordStrengthRegularExpression()
public void set_PasswordStrengthRegularExpression(string value)
public Type get_ResourceType()
public void set_ResourceType(Type value)
protected ValidationResult IsValid(object value, ValidationContext validationContext)
public Nullable`1<int> get_PasswordStrengthRegexTimeout()
public void set_PasswordStrengthRegexTimeout(Nullable`1<int> value)
}
public System.Web.Security.PassportAuthenticationEventArgs : EventArgs {
private IPrincipal _User
private HttpContext _Context
private PassportIdentity _Identity
public IPrincipal User
public HttpContext Context
public PassportIdentity Identity
public IPrincipal get_User()
public void set_User(IPrincipal value)
public HttpContext get_Context()
public PassportIdentity get_Identity()
public void .ctor(PassportIdentity identity, HttpContext context)
}
public System.Web.Security.PassportAuthenticationEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, PassportAuthenticationEventArgs e)
public IAsyncResult BeginInvoke(object sender, PassportAuthenticationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Security.PassportAuthenticationModule : object {
private object authenticateEvent
private EventHandlerList events
public void add_Authenticate(PassportAuthenticationEventHandler value)
public void remove_Authenticate(PassportAuthenticationEventHandler value)
public void Dispose()
public void Init(HttpApplication app)
}
public System.Web.Security.PassportIdentity : object {
public string AuthenticationType
public int Error
public bool GetFromNetworkServer
public bool HasSavedPassword
public bool HasTicket
public string HexPUID
public bool IsAuthenticated
public string Item
public string Name
public int TicketAge
public int TimeSinceSignIn
protected void Finalize()
public string AuthUrl()
public string AuthUrl(string strReturnUrl)
public string AuthUrl(string strReturnUrl, int iTimeWindow, bool fForceLogin, string strCoBrandedArgs, int iLangID, string strNameSpace, int iKPP, bool bUseSecureAuth)
public string AuthUrl(string strReturnUrl, int iTimeWindow, int iForceLogin, string strCoBrandedArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth)
public string AuthUrl2()
public string AuthUrl2(string strReturnUrl)
public string AuthUrl2(string strReturnUrl, int iTimeWindow, bool fForceLogin, string strCoBrandedArgs, int iLangID, string strNameSpace, int iKPP, bool bUseSecureAuth)
public string AuthUrl2(string strReturnUrl, int iTimeWindow, int iForceLogin, string strCoBrandedArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth)
public string Compress(string strData)
public bool CryptIsValid()
public int CryptPutHost(string strHost)
public int CryptPutSite(string strSite)
public string Decompress(string strData)
public string Decrypt(string strData)
public string Encrypt(string strData)
public object GetCurrentConfig(string strAttribute)
public string GetDomainAttribute(string strAttribute, int iLCID, string strDomain)
public string GetDomainFromMemberName(string strMemberName)
public bool GetIsAuthenticated(int iTimeWindow, bool bForceLogin, bool bCheckSecure)
public bool GetIsAuthenticated(int iTimeWindow, int iForceLogin, int iCheckSecure)
public string GetLoginChallenge()
public string GetLoginChallenge(string strReturnUrl)
public string GetLoginChallenge(string szRetURL, int iTimeWindow, int fForceLogin, string szCOBrandArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth, object oExtraParams)
public object GetOption(string strOpt)
public object GetProfileObject(string strProfileName)
public bool HasFlag(int iFlagMask)
public bool HasProfile(string strProfile)
public bool HaveConsent(bool bNeedFullConsent, bool bNeedBirthdate)
public int LoginUser()
public int LoginUser(string strReturnUrl)
public int LoginUser(string szRetURL, int iTimeWindow, bool fForceLogin, string szCOBrandArgs, int iLangID, string strNameSpace, int iKPP, bool fUseSecureAuth, object oExtraParams)
public int LoginUser(string szRetURL, int iTimeWindow, int fForceLogin, string szCOBrandArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth, object oExtraParams)
public string LogoTag()
public string LogoTag(string strReturnUrl)
public string LogoTag(string strReturnUrl, int iTimeWindow, bool fForceLogin, string strCoBrandedArgs, int iLangID, bool fSecure, string strNameSpace, int iKPP, bool bUseSecureAuth)
public string LogoTag(string strReturnUrl, int iTimeWindow, int iForceLogin, string strCoBrandedArgs, int iLangID, int iSecure, string strNameSpace, int iKPP, int iUseSecureAuth)
public string LogoTag2()
public string LogoTag2(string strReturnUrl)
public string LogoTag2(string strReturnUrl, int iTimeWindow, bool fForceLogin, string strCoBrandedArgs, int iLangID, bool fSecure, string strNameSpace, int iKPP, bool bUseSecureAuth)
public string LogoTag2(string strReturnUrl, int iTimeWindow, int iForceLogin, string strCoBrandedArgs, int iLangID, int iSecure, string strNameSpace, int iKPP, int iUseSecureAuth)
public string LogoutURL()
public string LogoutURL(string szReturnURL, string szCOBrandArgs, int iLangID, string strDomain, int iUseSecureAuth)
public void SetOption(string strOpt, object vOpt)
public void SignOut(string strSignOutDotGifFileName)
public object Ticket(string strAttribute)
public string get_AuthenticationType()
public int get_Error()
public bool get_GetFromNetworkServer()
public bool get_HasSavedPassword()
public bool get_HasTicket()
public string get_HexPUID()
public bool get_IsAuthenticated()
public string get_Item(string strProfileName)
public string get_Name()
public int get_TicketAge()
public int get_TimeSinceSignIn()
private void System.IDisposable.Dispose()
}
public System.Web.Security.PassportPrincipal : GenericPrincipal {
public void .ctor(PassportIdentity identity, String[] roles)
}
public System.Web.Security.RoleManagerEventArgs : EventArgs {
private HttpContext _Context
private bool _RolesPopulated
public bool RolesPopulated
public HttpContext Context
public bool get_RolesPopulated()
public void set_RolesPopulated(bool value)
public HttpContext get_Context()
public void .ctor(HttpContext context)
}
public System.Web.Security.RoleManagerEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, RoleManagerEventArgs e)
public IAsyncResult BeginInvoke(object sender, RoleManagerEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Security.RoleManagerModule : object {
private object getRolesEvent
private RoleManagerSection _config
private EventHandlerList events
public void add_GetRoles(RoleManagerEventHandler value)
public void remove_GetRoles(RoleManagerEventHandler value)
public void Dispose()
private void ClearCookie(HttpApplication app, string cookieName)
private void OnPostAuthenticateRequest(object sender, EventArgs args)
private void OnEndRequest(object sender, EventArgs args)
public void Init(HttpApplication app)
}
public System.Web.Security.RolePrincipal : object {
private IIdentity _identity
private bool _listChanged
private String[] _cachedArray
private HybridDictionary _cachedRoles
private string _providerName
private int _version
private string _cookiePath
private DateTime _issueDate
private DateTime _expireDate
public bool CachedListChanged
public string CookiePath
public bool Expired
public DateTime ExpireDate
public IIdentity Identity
public bool IsRoleListCached
public DateTime IssueDate
public string ProviderName
public int Version
private RoleProvider Provider
private RoleManagerSection RoleManagerConfig
private MachineKeySection MachineConfig
public void .ctor(IIdentity identity)
public void .ctor(IIdentity identity, string encryptedTicket)
public void .ctor(string providerName, IIdentity identity)
public void .ctor(string providerName, IIdentity identity, string encryptedTicket)
public String[] GetRoles()
public bool IsInRole(string role)
public string ToEncryptedTicket()
private void DecryptTicket(string encryptedTicket)
private void InitializeRoles(string decryptedRoles)
public bool get_CachedListChanged()
public string get_CookiePath()
public bool get_Expired()
public DateTime get_ExpireDate()
public IIdentity get_Identity()
public bool get_IsRoleListCached()
public DateTime get_IssueDate()
public string get_ProviderName()
public int get_Version()
private RoleProvider get_Provider()
public void SetDirty()
private string GetBase64FromBytes(Byte[] bytes, int offset, int len)
private Byte[] GetBytesFromBase64(string base64String)
private RoleManagerSection get_RoleManagerConfig()
private MachineKeySection get_MachineConfig()
protected void GetObjectData(SerializationInfo info, StreamingContext context)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Web.Security.RoleProviderCollection : ProviderCollection {
public RoleProvider Item
public void Add(ProviderBase provider)
public RoleProvider get_Item(string name)
public void CopyTo(RoleProvider[] array, int index)
}
public System.Web.Security.Roles : object {
private RoleManagerSection config
private RoleProviderCollection providersCollection
private string CurrentUser
public string ApplicationName
public bool CacheRolesInCookie
public string CookieName
public string CookiePath
public CookieProtection CookieProtectionValue
public bool CookieRequireSSL
public bool CookieSlidingExpiration
public int CookieTimeout
public bool CreatePersistentCookie
public string Domain
public bool Enabled
public int MaxCachedResults
public RoleProvider Provider
public RoleProviderCollection Providers
public void AddUsersToRole(String[] usernames, string roleName)
public void AddUsersToRoles(String[] usernames, String[] roleNames)
public void AddUserToRole(string username, string roleName)
public void AddUserToRoles(string username, String[] roleNames)
public void CreateRole(string roleName)
public void DeleteCookie()
public bool DeleteRole(string roleName)
public bool DeleteRole(string roleName, bool throwOnPopulatedRole)
public String[] GetAllRoles()
public String[] GetRolesForUser()
private string get_CurrentUser()
public String[] GetRolesForUser(string username)
public String[] GetUsersInRole(string roleName)
public bool IsUserInRole(string roleName)
public bool IsUserInRole(string username, string roleName)
public void RemoveUserFromRole(string username, string roleName)
public void RemoveUserFromRoles(string username, String[] roleNames)
public void RemoveUsersFromRole(String[] usernames, string roleName)
public void RemoveUsersFromRoles(String[] usernames, String[] roleNames)
public bool RoleExists(string roleName)
public String[] FindUsersInRole(string roleName, string usernameToMatch)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public bool get_CacheRolesInCookie()
public string get_CookieName()
public string get_CookiePath()
public CookieProtection get_CookieProtectionValue()
public bool get_CookieRequireSSL()
public bool get_CookieSlidingExpiration()
public int get_CookieTimeout()
public bool get_CreatePersistentCookie()
public string get_Domain()
public bool get_Enabled()
public void set_Enabled(bool value)
public int get_MaxCachedResults()
public RoleProvider get_Provider()
public RoleProviderCollection get_Providers()
private void CheckEnabled()
}
internal System.Web.Security.SqliteMembershipProvider : MembershipProvider {
private string m_TableName
private string m_ConnectionString
private int m_NewPasswordLength
private bool machineKeyIsAutoGenerated
private MachineKeySection m_MachineKey
private string m_ApplicationName
private bool m_EnablePasswordReset
private bool m_EnablePasswordRetrieval
private bool m_RequiresQuestionAndAnswer
private bool m_RequiresUniqueEmail
private int m_MaxInvalidPasswordAttempts
private int m_PasswordAttemptWindow
private MembershipPasswordFormat m_PasswordFormat
private int m_MinRequiredNonAlphanumericCharacters
private int m_MinRequiredPasswordLength
private string m_PasswordStrengthRegularExpression
public string ApplicationName
public bool EnablePasswordReset
public bool EnablePasswordRetrieval
public bool RequiresQuestionAndAnswer
public bool RequiresUniqueEmail
public int MaxInvalidPasswordAttempts
public int PasswordAttemptWindow
public MembershipPasswordFormat PasswordFormat
public int MinRequiredNonAlphanumericCharacters
public int MinRequiredPasswordLength
public string PasswordStrengthRegularExpression
private DbParameter AddParameter(DbCommand command, string parameterName, object parameterValue)
private DbParameter AddParameter(DbCommand command, string parameterName, ParameterDirection direction, object parameterValue)
public void Initialize(string name, NameValueCollection config)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public bool get_EnablePasswordReset()
public bool get_EnablePasswordRetrieval()
public bool get_RequiresQuestionAndAnswer()
public bool get_RequiresUniqueEmail()
public int get_MaxInvalidPasswordAttempts()
public int get_PasswordAttemptWindow()
public MembershipPasswordFormat get_PasswordFormat()
public int get_MinRequiredNonAlphanumericCharacters()
public int get_MinRequiredPasswordLength()
public string get_PasswordStrengthRegularExpression()
public bool ChangePassword(string username, string oldPassword, string newPassword)
public bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer)
public MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status)
public bool DeleteUser(string username, bool deleteAllRelatedData)
public MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords)
public int GetNumberOfUsersOnline()
public string GetPassword(string username, string answer)
public MembershipUser GetUser(string username, bool userIsOnline)
public MembershipUser GetUser(object providerUserKey, bool userIsOnline)
public string GetUserNameByEmail(string email)
public string ResetPassword(string username, string answer)
public bool UnlockUser(string userName)
public void UpdateUser(MembershipUser user)
public bool ValidateUser(string username, string password)
private string GetConfigValue(string configValue, string defaultValue)
private MembershipUser GetUserFromReader(SqliteDataReader reader)
private bool CheckPassword(string password, string dbpassword)
private string EncodePassword(string password)
private string UnEncodePassword(string encodedPassword)
private Byte[] HexToByte(string hexString)
private void UpdateFailureCount(string username, FailureType failType)
}
internal System.Web.Security.SqliteRoleProvider : RoleProvider {
private string m_RolesTableName
private string m_UserInRolesTableName
private string m_ConnectionString
private string m_ApplicationName
public string ApplicationName
private DbParameter AddParameter(DbCommand command, string parameterName)
private DbParameter AddParameter(DbCommand command, string parameterName, object parameterValue)
private DbParameter AddParameter(DbCommand command, string parameterName, ParameterDirection direction, object parameterValue)
public void Initialize(string name, NameValueCollection config)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public void AddUsersToRoles(String[] userNames, String[] roleNames)
public void CreateRole(string roleName)
public bool DeleteRole(string roleName, bool throwOnPopulatedRole)
public String[] FindUsersInRole(string roleName, string usernameToMatch)
public String[] GetAllRoles()
public String[] GetRolesForUser(string username)
public String[] GetUsersInRole(string roleName)
public bool IsUserInRole(string userName, string roleName)
public void RemoveUsersFromRoles(String[] userNames, String[] roleNames)
public bool RoleExists(string roleName)
private string GetConfigValue(string configValue, string defaultValue)
}
public System.Web.Security.SqlMembershipProvider : MembershipProvider {
private bool enablePasswordReset
private bool enablePasswordRetrieval
private int maxInvalidPasswordAttempts
private MembershipPasswordFormat passwordFormat
private bool requiresQuestionAndAnswer
private bool requiresUniqueEmail
private int minRequiredNonAlphanumericCharacters
private int minRequiredPasswordLength
private int passwordAttemptWindow
private string passwordStrengthRegularExpression
private TimeSpan userIsOnlineTimeWindow
private ConnectionStringSettings connectionString
private DbProviderFactory factory
private string applicationName
private bool schemaIsOk
public string ApplicationName
public bool EnablePasswordReset
public bool EnablePasswordRetrieval
public MembershipPasswordFormat PasswordFormat
public bool RequiresQuestionAndAnswer
public bool RequiresUniqueEmail
public int MaxInvalidPasswordAttempts
public int MinRequiredNonAlphanumericCharacters
public int MinRequiredPasswordLength
public int PasswordAttemptWindow
public string PasswordStrengthRegularExpression
private DbConnection CreateConnection()
private DbParameter AddParameter(DbCommand command, string parameterName, object parameterValue)
private DbParameter AddParameter(DbCommand command, string parameterName, ParameterDirection direction, object parameterValue)
private DbParameter AddParameter(DbCommand command, string parameterName, ParameterDirection direction, DbType type, object parameterValue)
private int GetReturnValue(DbParameter returnValue)
private void CheckParam(string pName, string p, int length)
public bool ChangePassword(string username, string oldPassword, string newPassword)
public bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer)
public MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status)
private bool CheckPassword(string password)
public bool DeleteUser(string username, bool deleteAllRelatedData)
public string GeneratePassword()
public MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords)
private MembershipUserCollection BuildMembershipUserCollection(DbCommand command, int pageIndex, int pageSize, Int32& totalRecords)
public int GetNumberOfUsersOnline()
public string GetPassword(string username, string passwordAnswer)
private MembershipUser GetUserFromReader(DbDataReader reader, string username, object userId)
private MembershipUser BuildMembershipUser(DbCommand query, string username, object userId)
public MembershipUser GetUser(string username, bool userIsOnline)
public MembershipUser GetUser(object providerUserKey, bool userIsOnline)
public string GetUserNameByEmail(string email)
private bool GetBoolConfigValue(NameValueCollection config, string name, bool def)
private int GetIntConfigValue(NameValueCollection config, string name, int def)
private int GetEnumConfigValue(NameValueCollection config, string name, Type enumType, int def)
private string GetStringConfigValue(NameValueCollection config, string name, string def)
private void EmitValidatingPassword(string username, string password, bool isNewUser)
public void Initialize(string name, NameValueCollection config)
public string ResetPassword(string username, string passwordAnswer)
public void UpdateUser(MembershipUser user)
public bool ValidateUser(string username, string password)
public bool UnlockUser(string username)
private void UpdateUserInfo(string username, PasswordInfo pi, bool isPasswordCorrect, bool updateLoginActivity)
private PasswordInfo ValidateUsingPassword(string username, string password)
private PasswordInfo GetPasswordInfo(string username)
private string EncodePassword(string password, MembershipPasswordFormat passwordFormat, string salt)
private string DecodePassword(string password, MembershipPasswordFormat passwordFormat)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public bool get_EnablePasswordReset()
public bool get_EnablePasswordRetrieval()
public MembershipPasswordFormat get_PasswordFormat()
public bool get_RequiresQuestionAndAnswer()
public bool get_RequiresUniqueEmail()
public int get_MaxInvalidPasswordAttempts()
public int get_MinRequiredNonAlphanumericCharacters()
public int get_MinRequiredPasswordLength()
public int get_PasswordAttemptWindow()
public string get_PasswordStrengthRegularExpression()
}
public System.Web.Security.SqlRoleProvider : RoleProvider {
private string applicationName
private bool schemaIsOk
private ConnectionStringSettings connectionString
private DbProviderFactory factory
public string ApplicationName
private DbConnection CreateConnection()
private void AddParameter(DbCommand command, string parameterName, object parameterValue)
private DbParameter AddParameter(DbCommand command, string parameterName, ParameterDirection direction, object parameterValue)
private DbParameter AddParameter(DbCommand command, string parameterName, ParameterDirection direction, DbType type, object parameterValue)
public void AddUsersToRoles(String[] usernames, String[] roleNames)
public void CreateRole(string roleName)
public bool DeleteRole(string roleName, bool throwOnPopulatedRole)
public String[] FindUsersInRole(string roleName, string usernameToMatch)
public String[] GetAllRoles()
public String[] GetRolesForUser(string username)
public String[] GetUsersInRole(string roleName)
private string GetStringConfigValue(NameValueCollection config, string name, string def)
public void Initialize(string name, NameValueCollection config)
public bool IsUserInRole(string username, string roleName)
public void RemoveUsersFromRoles(String[] usernames, String[] roleNames)
public bool RoleExists(string roleName)
public string get_ApplicationName()
public void set_ApplicationName(string value)
}
public System.Web.Security.UrlAuthorizationModule : object {
public void Dispose()
public void Init(HttpApplication app)
private void OnAuthorizeRequest(object sender, EventArgs args)
public bool CheckUrlAccessForPrincipal(string virtualPath, IPrincipal user, string verb)
internal void ReportUrlAuthorizationFailure(HttpContext context, object webEventSource)
}
public System.Web.Security.WindowsAuthenticationEventArgs : EventArgs {
private IPrincipal _User
private HttpContext _Context
private WindowsIdentity _Identity
public IPrincipal User
public HttpContext Context
public WindowsIdentity Identity
public IPrincipal get_User()
public void set_User(IPrincipal value)
public HttpContext get_Context()
public WindowsIdentity get_Identity()
public void .ctor(WindowsIdentity identity, HttpContext context)
}
public System.Web.Security.WindowsAuthenticationEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WindowsAuthenticationEventArgs e)
public IAsyncResult BeginInvoke(object sender, WindowsAuthenticationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Security.WindowsAuthenticationModule : object {
private object authenticateEvent
private EventHandlerList events
public void add_Authenticate(WindowsAuthenticationEventHandler value)
public void remove_Authenticate(WindowsAuthenticationEventHandler value)
public void Dispose()
public void Init(HttpApplication app)
}
public System.Web.Security.WindowsTokenRoleProvider : RoleProvider {
public string ApplicationName
public string get_ApplicationName()
public void set_ApplicationName(string value)
public void AddUsersToRoles(String[] usernames, String[] roleNames)
public void CreateRole(string roleName)
public bool DeleteRole(string roleName, bool throwOnPopulatedRole)
public String[] FindUsersInRole(string roleName, string usernameToMatch)
public String[] GetAllRoles()
public String[] GetRolesForUser(string username)
public String[] GetUsersInRole(string roleName)
public bool IsUserInRole(string username, WindowsBuiltInRole role)
public bool IsUserInRole(string username, string roleName)
public void RemoveUsersFromRoles(String[] usernames, String[] roleNames)
public bool RoleExists(string roleName)
}
internal System.Web.ServerVariablesCollection : BaseParamsCollection {
private bool loaded
private string QueryString
private IIdentity UserIdentity
private string get_QueryString()
private IIdentity get_UserIdentity()
public void .ctor(HttpRequest request)
private void AppendKeyValue(StringBuilder sb, string key, string value, bool standard)
private string Fill(HttpWorkerRequest wr, bool standard)
private void AddHeaderVariables(HttpWorkerRequest wr)
private void loadServerVariablesCollection()
protected void InsertInfo()
protected string InternalGet(string name)
}
public System.Web.SessionState.HttpSessionState : object {
private IHttpSessionState container
internal IHttpSessionState Container
public int CodePage
public HttpSessionState Contents
public HttpCookieMode CookieMode
public int Count
public bool IsCookieless
public bool IsNewSession
public bool IsReadOnly
public bool IsSynchronized
public object Item
public object Item
public KeysCollection Keys
public int LCID
public SessionStateMode Mode
public string SessionID
public HttpStaticObjectsCollection StaticObjects
public object SyncRoot
public int Timeout
internal void .ctor(IHttpSessionState container)
internal IHttpSessionState get_Container()
public int get_CodePage()
public void set_CodePage(int value)
public HttpSessionState get_Contents()
public HttpCookieMode get_CookieMode()
public int get_Count()
public bool get_IsCookieless()
public bool get_IsNewSession()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_Item(string name)
public void set_Item(string name, object value)
public object get_Item(int index)
public void set_Item(int index, object value)
public KeysCollection get_Keys()
public int get_LCID()
public void set_LCID(int value)
public SessionStateMode get_Mode()
public string get_SessionID()
public HttpStaticObjectsCollection get_StaticObjects()
public object get_SyncRoot()
public int get_Timeout()
public void set_Timeout(int value)
public void Abandon()
public void Add(string name, object value)
public void Clear()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void Remove(string name)
public void RemoveAll()
public void RemoveAt(int index)
}
public System.Web.SessionState.HttpSessionStateContainer : object {
private string id
private HttpStaticObjectsCollection staticObjects
private int timeout
private bool newSession
private bool isCookieless
private SessionStateMode mode
private bool isReadOnly
internal bool abandoned
private ISessionStateItemCollection sessionItems
private HttpCookieMode cookieMode
public int CodePage
public HttpCookieMode CookieMode
public int Count
public bool IsAbandoned
public bool IsCookieless
public bool IsNewSession
public bool IsReadOnly
public bool IsSynchronized
private object System.Web.SessionState.IHttpSessionState.Item
private object System.Web.SessionState.IHttpSessionState.Item
private KeysCollection System.Web.SessionState.IHttpSessionState.Keys
public int LCID
public SessionStateMode Mode
public string SessionID
public HttpStaticObjectsCollection StaticObjects
public object SyncRoot
public int Timeout
public object Item
public KeysCollection Keys
public void .ctor(string id, ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout, bool newSession, HttpCookieMode cookieMode, SessionStateMode mode, bool isReadonly)
public int get_CodePage()
public void set_CodePage(int value)
public HttpCookieMode get_CookieMode()
public int get_Count()
public bool get_IsAbandoned()
public bool get_IsCookieless()
public bool get_IsNewSession()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
private object System.Web.SessionState.IHttpSessionState.get_Item(int index)
private void System.Web.SessionState.IHttpSessionState.set_Item(int index, object value)
private object System.Web.SessionState.IHttpSessionState.get_Item(string name)
private void System.Web.SessionState.IHttpSessionState.set_Item(string name, object value)
private KeysCollection System.Web.SessionState.IHttpSessionState.get_Keys()
public int get_LCID()
public void set_LCID(int value)
public SessionStateMode get_Mode()
public string get_SessionID()
public HttpStaticObjectsCollection get_StaticObjects()
public object get_SyncRoot()
public int get_Timeout()
public void set_Timeout(int value)
internal void SetNewSession(bool value)
public void Abandon()
public void Add(string name, object value)
public void Clear()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void Remove(string name)
public void RemoveAll()
public void RemoveAt(int index)
public object get_Item(int index)
public void set_Item(int index, object value)
public object get_Item(string name)
public void set_Item(string name, object value)
public KeysCollection get_Keys()
}
public System.Web.SessionState.IHttpSessionState {
public int CodePage
public HttpCookieMode CookieMode
public int Count
public bool IsCookieless
public bool IsNewSession
public bool IsReadOnly
public bool IsSynchronized
public object Item
public object Item
public KeysCollection Keys
public int LCID
public SessionStateMode Mode
public string SessionID
public HttpStaticObjectsCollection StaticObjects
public object SyncRoot
public int Timeout
public void Abandon()
public void Add(string name, object value)
public void Clear()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void Remove(string name)
public void RemoveAll()
public void RemoveAt(int index)
public int get_CodePage()
public void set_CodePage(int value)
public HttpCookieMode get_CookieMode()
public int get_Count()
public bool get_IsCookieless()
public bool get_IsNewSession()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_Item(int index)
public void set_Item(int index, object value)
public object get_Item(string name)
public void set_Item(string name, object value)
public KeysCollection get_Keys()
public int get_LCID()
public void set_LCID(int value)
public SessionStateMode get_Mode()
public string get_SessionID()
public HttpStaticObjectsCollection get_StaticObjects()
public object get_SyncRoot()
public int get_Timeout()
public void set_Timeout(int value)
}
internal System.Web.SessionState.InProcSessionItem : object {
public bool locked
public bool cookieless
public ISessionStateItemCollection items
public DateTime lockedTime
public DateTime expiresAt
public ReaderWriterLockSlim rwlock
public int lockId
public int timeout
public bool resettingTimeout
public HttpStaticObjectsCollection staticItems
public void Dispose()
protected void Finalize()
}
public System.Web.SessionState.IPartialSessionState {
public IList`1<string> PartialSessionStateKeys
public IList`1<string> get_PartialSessionStateKeys()
}
public System.Web.SessionState.ISessionIDManager {
public string CreateSessionID(HttpContext context)
public string GetSessionID(HttpContext context)
public void Initialize()
public bool InitializeRequest(HttpContext context, bool suppressAutoDetectRedirect, Boolean& supportSessionIDReissue)
public void RemoveSessionID(HttpContext context)
public void SaveSessionID(HttpContext context, string id, Boolean& redirected, Boolean& cookieAdded)
public bool Validate(string id)
}
public System.Web.SessionState.ISessionStateItemCollection {
public bool Dirty
public object Item
public object Item
public KeysCollection Keys
public void Clear()
public void Remove(string name)
public void RemoveAt(int index)
public bool get_Dirty()
public void set_Dirty(bool value)
public object get_Item(int index)
public void set_Item(int index, object value)
public object get_Item(string name)
public void set_Item(string name, object value)
public KeysCollection get_Keys()
}
public System.Web.SessionState.ISessionStateModule {
public void ReleaseSessionState(HttpContext context)
public Task ReleaseSessionStateAsync(HttpContext context)
}
public System.Web.SessionState.IStateRuntime {
public void ProcessRequest(IntPtr tracker, int verb, string uri, int exclusive, int timeout, int lockCookieExists, int lockCookie, int contentLength, IntPtr content)
public void ProcessRequest(IntPtr tracker, int verb, string uri, int exclusive, int extraFlags, int timeout, int lockCookieExists, int lockCookie, int contentLength, IntPtr content)
public void StopProcessing()
}
internal System.Web.SessionState.LockableStateServerItem : object {
public StateServerItem item
public ReaderWriterLock rwlock
public void .ctor(StateServerItem item)
}
internal System.Web.SessionState.RemoteStateServer : MarshalByRefObject {
private int lockAcquireTimeout
private Cache cache
private void Insert(string id, LockableStateServerItem item)
private LockableStateServerItem Retrieve(string id)
internal void CreateUninitializedItem(string id, int timeout)
internal StateServerItem GetItem(string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions, bool exclusive)
internal void Remove(string id, object lockid)
internal void ResetItemTimeout(string id)
internal void ReleaseItemExclusive(string id, object lockId)
internal void SetAndReleaseItemExclusive(string id, Byte[] collection_data, Byte[] sobjs_data, object lockId, int timeout, bool newItem)
public object InitializeLifetimeService()
}
internal System.Web.SessionState.SessionId : object {
internal int IdLength
private int half_len
private RandomNumberGenerator rng
internal string Create()
}
public System.Web.SessionState.SessionIDManager : object {
private SessionStateSection config
public int SessionIDMaxLength
public int get_SessionIDMaxLength()
public string CreateSessionID(HttpContext context)
public string Decode(string id)
public string Encode(string id)
public string GetSessionID(HttpContext context)
public void Initialize()
public bool InitializeRequest(HttpContext context, bool suppressAutoDetectRedirect, Boolean& supportSessionIDReissue)
public void RemoveSessionID(HttpContext context)
public void SaveSessionID(HttpContext context, string id, Boolean& redirected, Boolean& cookieAdded)
public bool Validate(string id)
}
internal System.Web.SessionState.SessionInProcHandler : SessionStateStoreProviderBase {
private string CachePrefix
private int CachePrefixLength
private int lockAcquireTimeout
private CacheItemRemovedCallback removedCB
private SessionStateItemExpireCallback expireCallback
private HttpStaticObjectsCollection staticObjects
public SessionStateStoreData CreateNewStoreData(HttpContext context, int timeout)
private void InsertSessionItem(InProcSessionItem item, int timeout, string id)
private void UpdateSessionItemTimeout(int timeout, string id)
public void CreateUninitializedItem(HttpContext context, string id, int timeout)
public void Dispose()
public void EndRequest(HttpContext context)
private SessionStateStoreData GetItemInternal(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions, bool exclusive)
public SessionStateStoreData GetItem(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions)
public SessionStateStoreData GetItemExclusive(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions)
public void Initialize(string name, NameValueCollection config)
public void InitializeRequest(HttpContext context)
public void ReleaseItemExclusive(HttpContext context, string id, object lockId)
public void RemoveItem(HttpContext context, string id, object lockId, SessionStateStoreData item)
public void ResetItemTimeout(HttpContext context, string id)
public void SetAndReleaseItemExclusive(HttpContext context, string id, SessionStateStoreData item, object lockId, bool newItem)
public bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback)
private void EnsureGoodId(string id, bool throwOnNull)
private void OnSessionRemoved(string key, object value, CacheItemRemovedReason reason)
}
internal System.Web.SessionState.SessionSQLServerHandler : SessionStateStoreProviderBase {
private string defaultDbFactoryTypeName
private SessionStateSection sessionConfig
private string connectionString
private Type providerFactoryType
private DbProviderFactory providerFactory
private int sqlCommandTimeout
private string <ApplicationName>k__BackingField
private DbProviderFactory ProviderFactory
public string ApplicationName
private DbProviderFactory get_ProviderFactory()
public string get_ApplicationName()
private void set_ApplicationName(string value)
public void Initialize(string name, NameValueCollection config)
public void Dispose()
public bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback)
public void SetAndReleaseItemExclusive(HttpContext context, string id, SessionStateStoreData item, object lockId, bool newItem)
public SessionStateStoreData GetItem(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags)
public SessionStateStoreData GetItemExclusive(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags)
private SessionStateStoreData GetSessionStoreItem(bool lockRecord, HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags)
private string Serialize(SessionStateItemCollection items)
private SessionStateStoreData Deserialize(HttpContext context, string serializedItems, int timeout)
public void ReleaseItemExclusive(HttpContext context, string id, object lockId)
public void RemoveItem(HttpContext context, string id, object lockId, SessionStateStoreData item)
public void CreateUninitializedItem(HttpContext context, string id, int timeout)
public SessionStateStoreData CreateNewStoreData(HttpContext context, int timeout)
public void ResetItemTimeout(HttpContext context, string id)
public void InitializeRequest(HttpContext context)
public void EndRequest(HttpContext context)
private DbConnection CreateConnection(DbProviderFactory factory)
private DbCommand CreateCommand(DbProviderFactory factory, DbConnection conn, string commandText)
private DbParameter CreateParameter(DbProviderFactory factory, string name, ValueType value)
private DbParameter CreateParameter(DbProviderFactory factory, string name, ValueType value, int size)
}
public System.Web.SessionState.SessionStateActions : Enum {
public int value__
public SessionStateActions None
public SessionStateActions InitializeItem
}
public System.Web.SessionState.SessionStateBehavior : Enum {
public int value__
public SessionStateBehavior Default
public SessionStateBehavior Required
public SessionStateBehavior ReadOnly
public SessionStateBehavior Disabled
}
public System.Web.SessionState.SessionStateItemCollection : NameObjectCollectionBase {
private bool is_dirty
public bool Dirty
public object Item
public object Item
public KeysCollection Keys
private bool IsMutable(object o)
internal void .ctor(int capacity)
public bool get_Dirty()
public void set_Dirty(bool value)
public object get_Item(int index)
public void set_Item(int index, object value)
public object get_Item(string name)
public void set_Item(string name, object value)
public KeysCollection get_Keys()
public void Clear()
public SessionStateItemCollection Deserialize(BinaryReader reader)
public void Serialize(BinaryWriter writer)
public IEnumerator GetEnumerator()
public void Remove(string name)
public void RemoveAt(int index)
}
public System.Web.SessionState.SessionStateItemExpireCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string id, SessionStateStoreData item)
public IAsyncResult BeginInvoke(string id, SessionStateStoreData item, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.SessionState.SessionStateMode : Enum {
public int value__
public SessionStateMode Off
public SessionStateMode InProc
public SessionStateMode StateServer
public SessionStateMode SQLServer
public SessionStateMode Custom
}
public System.Web.SessionState.SessionStateModule : object {
internal string HeaderName
internal string CookielessFlagName
private object startEvent
private object endEvent
private SessionStateSection config
private SessionStateStoreProviderBase handler
private ISessionIDManager idManager
private bool supportsExpiration
private HttpApplication app
private bool storeLocked
private TimeSpan storeLockAge
private object storeLockId
private SessionStateActions storeSessionAction
private bool storeIsNew
private SessionStateStoreData storeData
private HttpSessionStateContainer container
private TimeSpan executionTimeout
private EventHandlerList events
public void add_Start(EventHandler value)
public void remove_Start(EventHandler value)
public void add_End(EventHandler value)
public void remove_End(EventHandler value)
public void Dispose()
public void Init(HttpApplication app)
internal bool IsCookieLess(HttpContext context, SessionStateSection config)
private void OnBeginRequest(object o, EventArgs args)
private void OnAcquireRequestState(object o, EventArgs args)
private void OnReleaseRequestState(object o, EventArgs args)
private void OnEndRequest(object o, EventArgs args)
private SessionStateStoreData GetStoreData(HttpContext context, string sessionId, bool isReadOnly)
private void WaitForStoreUnlock(HttpContext context, string sessionId, bool isReadOnly)
private HttpSessionStateContainer CreateContainer(string sessionId, SessionStateStoreData data, bool isNew, bool isReadOnly)
private void OnSessionExpired(string id, SessionStateStoreData item)
private void OnSessionStart()
public void ReleaseSessionState(HttpContext context)
public Task ReleaseSessionStateAsync(HttpContext context)
}
internal System.Web.SessionState.SessionStateServerHandler : SessionStateStoreProviderBase {
private int lockAcquireTimeout
private SessionStateSection config
private RemoteStateServer stateServer
public SessionStateStoreData CreateNewStoreData(HttpContext context, int timeout)
public void CreateUninitializedItem(HttpContext context, string id, int timeout)
public void Dispose()
public void EndRequest(HttpContext context)
private SessionStateStoreData GetItemInternal(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions, bool exclusive)
public SessionStateStoreData GetItem(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions)
public SessionStateStoreData GetItemExclusive(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions)
public void Initialize(string name, NameValueCollection config)
public void InitializeRequest(HttpContext context)
public void ReleaseItemExclusive(HttpContext context, string id, object lockId)
public void RemoveItem(HttpContext context, string id, object lockId, SessionStateStoreData item)
public void ResetItemTimeout(HttpContext context, string id)
public void SetAndReleaseItemExclusive(HttpContext context, string id, SessionStateStoreData item, object lockId, bool newItem)
public bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback)
private void EnsureGoodId(string id, bool throwOnNull)
private void GetConData(String& proto, String& server, String& port)
}
public System.Web.SessionState.SessionStateStoreData : object {
private ISessionStateItemCollection sessionItems
private HttpStaticObjectsCollection staticObjects
private int timeout
public ISessionStateItemCollection Items
public HttpStaticObjectsCollection StaticObjects
public int Timeout
public void .ctor(ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout)
public ISessionStateItemCollection get_Items()
public HttpStaticObjectsCollection get_StaticObjects()
public int get_Timeout()
public void set_Timeout(int value)
}
public System.Web.SessionState.SessionStateStoreProviderBase : ProviderBase {
public SessionStateStoreData CreateNewStoreData(HttpContext context, int timeout)
public void CreateUninitializedItem(HttpContext context, string id, int timeout)
public void Dispose()
public void EndRequest(HttpContext context)
public SessionStateStoreData GetItem(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions)
public SessionStateStoreData GetItemExclusive(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions)
public void InitializeRequest(HttpContext context)
public void ReleaseItemExclusive(HttpContext context, string id, object lockId)
public void RemoveItem(HttpContext context, string id, object lockId, SessionStateStoreData item)
public void ResetItemTimeout(HttpContext context, string id)
public void SetAndReleaseItemExclusive(HttpContext context, string id, SessionStateStoreData item, object lockId, bool newItem)
public bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback)
}
public System.Web.SessionState.SessionStateUtility : object {
public ISurrogateSelector SerializationSurrogateSelector
public void AddHttpSessionStateToContext(HttpContext context, IHttpSessionState container)
public IHttpSessionState GetHttpSessionStateFromContext(HttpContext context)
public HttpStaticObjectsCollection GetSessionStaticObjects(HttpContext context)
public void RaiseSessionEnd(IHttpSessionState session, object eventSource, EventArgs eventArgs)
public void RemoveHttpSessionStateFromContext(HttpContext context)
public ISurrogateSelector get_SerializationSurrogateSelector()
public void set_SerializationSurrogateSelector(ISurrogateSelector value)
public bool IsSessionStateReadOnly(HttpContext context)
public bool IsSessionStateRequired(HttpContext context)
}
public System.Web.SessionState.StateRuntime : object {
public void ProcessRequest(IntPtr tracker, int verb, string uri, int exclusive, int timeout, int lockCookieExists, int lockCookie, int contentLength, IntPtr content)
public void ProcessRequest(IntPtr tracker, int verb, string uri, int exclusive, int extraFlags, int timeout, int lockCookieExists, int lockCookie, int contentLength, IntPtr content)
public void StopProcessing()
}
internal System.Web.SessionState.StateServerItem : object {
public Byte[] CollectionData
public Byte[] StaticObjectsData
private DateTime last_access
public int Timeout
public int LockId
public bool Locked
public DateTime LockedTime
public SessionStateActions Action
public void .ctor(int timeout)
public void .ctor(Byte[] collection_data, Byte[] sobjs_data, int timeout)
public void Touch()
public bool IsAbandoned()
}
public System.Web.SiteMap : object {
private SiteMapProvider provider
private SiteMapProviderCollection providers
private object locker
public SiteMapNode CurrentNode
public SiteMapNode RootNode
public SiteMapProvider Provider
public SiteMapProviderCollection Providers
public bool Enabled
private void Init()
public SiteMapNode get_CurrentNode()
public SiteMapNode get_RootNode()
public SiteMapProvider get_Provider()
public SiteMapProviderCollection get_Providers()
public void add_SiteMapResolve(SiteMapResolveEventHandler value)
public void remove_SiteMapResolve(SiteMapResolveEventHandler value)
public bool get_Enabled()
}
public System.Web.SiteMapNode : object {
private SiteMapProvider provider
private string key
private string url
private string title
private string description
private IList roles
private NameValueCollection attributes
private NameValueCollection resourceKeys
private bool readOnly
private string resourceKey
private SiteMapNode parent
private SiteMapNodeCollection childNodes
private IPrincipal user
public bool HasChildNodes
public SiteMapNode NextSibling
public SiteMapNode PreviousSibling
public SiteMapNode ParentNode
public SiteMapNodeCollection ChildNodes
public SiteMapNode RootNode
private SiteMapNodeCollection SiblingNodes
public string Item
protected NameValueCollection Attributes
public string Description
public string Title
public string Url
public IList Roles
public bool ReadOnly
public string ResourceKey
public string Key
public SiteMapProvider Provider
private bool System.Web.UI.IHierarchyData.HasChildren
private object System.Web.UI.IHierarchyData.Item
private string System.Web.UI.IHierarchyData.Path
private string System.Web.UI.IHierarchyData.Type
private string System.Web.UI.INavigateUIData.Name
private string System.Web.UI.INavigateUIData.NavigateUrl
private string System.Web.UI.INavigateUIData.Value
public void .ctor(SiteMapProvider provider, string key)
public void .ctor(SiteMapProvider provider, string key, string url)
public void .ctor(SiteMapProvider provider, string key, string url, string title)
public void .ctor(SiteMapProvider provider, string key, string url, string title, string description)
public void .ctor(SiteMapProvider provider, string key, string url, string title, string description, IList roles, NameValueCollection attributes, NameValueCollection explicitResourceKeys, string implicitResourceKey)
public SiteMapDataSourceView GetDataSourceView(SiteMapDataSource owner, string viewName)
public SiteMapHierarchicalDataSourceView GetHierarchicalDataSourceView()
public bool IsAccessibleToUser(HttpContext context)
public string ToString()
public bool get_HasChildNodes()
public SiteMapNodeCollection GetAllNodes()
private void GetAllNodesRecursive(SiteMapNodeCollection c)
public bool IsDescendantOf(SiteMapNode node)
public SiteMapNode get_NextSibling()
public SiteMapNode get_PreviousSibling()
public SiteMapNode get_ParentNode()
public void set_ParentNode(SiteMapNode value)
public SiteMapNodeCollection get_ChildNodes()
public void set_ChildNodes(SiteMapNodeCollection value)
public SiteMapNode get_RootNode()
private SiteMapNodeCollection get_SiblingNodes()
protected string GetExplicitResourceString(string attributeName, string defaultValue, bool throwIfNotFound)
protected string GetImplicitResourceString(string attributeName)
public string get_Item(string key)
public void set_Item(string key, string value)
private object System.ICloneable.Clone()
public SiteMapNode Clone()
public SiteMapNode Clone(bool cloneParentNodes)
public bool Equals(object obj)
public int GetHashCode()
private void CheckWritable()
protected NameValueCollection get_Attributes()
protected void set_Attributes(NameValueCollection value)
public string get_Description()
public void set_Description(string value)
public string get_Title()
public void set_Title(string value)
public string get_Url()
public void set_Url(string value)
public IList get_Roles()
public void set_Roles(IList value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public string get_ResourceKey()
public void set_ResourceKey(string value)
public string get_Key()
public SiteMapProvider get_Provider()
private IHierarchicalEnumerable System.Web.UI.IHierarchyData.GetChildren()
private IHierarchyData System.Web.UI.IHierarchyData.GetParent()
private bool System.Web.UI.IHierarchyData.get_HasChildren()
private object System.Web.UI.IHierarchyData.get_Item()
private string System.Web.UI.IHierarchyData.get_Path()
private string System.Web.UI.IHierarchyData.get_Type()
private string System.Web.UI.INavigateUIData.get_Name()
private string System.Web.UI.INavigateUIData.get_NavigateUrl()
private string System.Web.UI.INavigateUIData.get_Value()
}
public System.Web.SiteMapNodeCollection : object {
private ArrayList list
internal SiteMapNodeCollection EmptyList
internal SiteMapNodeCollection EmptyCollection
private ArrayList List
public int Count
public bool IsSynchronized
public object SyncRoot
public SiteMapNode Item
public bool IsFixedSize
public bool IsReadOnly
private object System.Collections.IList.Item
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
public void .ctor(int capacity)
public void .ctor(SiteMapNode value)
public void .ctor(SiteMapNode[] value)
public void .ctor(SiteMapNodeCollection value)
internal SiteMapNodeCollection get_EmptyCollection()
private ArrayList get_List()
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
public IEnumerator GetEnumerator()
public void Clear()
public void RemoveAt(int index)
public int Add(SiteMapNode value)
public void AddRange(SiteMapNode[] value)
public void AddRange(SiteMapNodeCollection value)
internal void AddRangeInternal(IList value)
public bool Contains(SiteMapNode value)
public void CopyTo(SiteMapNode[] array, int index)
public int IndexOf(SiteMapNode value)
public void Insert(int index, SiteMapNode value)
protected void OnValidate(object value)
public SiteMapNodeCollection ReadOnly(SiteMapNodeCollection collection)
public void Remove(SiteMapNode value)
public IHierarchyData GetHierarchyData(object enumeratedItem)
public SiteMapDataSourceView GetDataSourceView(SiteMapDataSource owner, string viewName)
public SiteMapHierarchicalDataSourceView GetHierarchicalDataSourceView()
public SiteMapNode get_Item(int index)
public void set_Item(int index, SiteMapNode value)
public bool get_IsFixedSize()
public bool get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private int System.Collections.IList.Add(object value)
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private void System.Collections.IList.RemoveAt(int index)
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private IHierarchyData System.Web.UI.IHierarchicalEnumerable.GetHierarchyData(object enumeratedItem)
}
public System.Web.SiteMapProvider : ProviderBase {
private object siteMapResolveEvent
internal object this_lock
private bool enableLocalization
private SiteMapProvider parentProvider
private SiteMapProvider rootProviderCache
private bool securityTrimming
private object resolveLock
private bool resolving
private EventHandlerList events
private string resourceKey
public SiteMapNode CurrentNode
public SiteMapProvider ParentProvider
public SiteMapProvider RootProvider
public bool EnableLocalization
public bool SecurityTrimmingEnabled
public string ResourceKey
public SiteMapNode RootNode
public void add_SiteMapResolve(SiteMapResolveEventHandler value)
public void remove_SiteMapResolve(SiteMapResolveEventHandler value)
protected void AddNode(SiteMapNode node)
protected internal void AddNode(SiteMapNode node, SiteMapNode parentNode)
public SiteMapNode FindSiteMapNode(HttpContext context)
public SiteMapNode FindSiteMapNode(string rawUrl)
public SiteMapNode FindSiteMapNodeFromKey(string key)
public SiteMapNodeCollection GetChildNodes(SiteMapNode node)
public SiteMapNode GetCurrentNodeAndHintAncestorNodes(int upLevel)
public SiteMapNode GetCurrentNodeAndHintNeighborhoodNodes(int upLevel, int downLevel)
public SiteMapNode GetParentNode(SiteMapNode node)
public SiteMapNode GetParentNodeRelativeToCurrentNodeAndHintDownFromParent(int walkupLevels, int relativeDepthFromWalkup)
public SiteMapNode GetParentNodeRelativeToNodeAndHintDownFromParent(SiteMapNode node, int walkupLevels, int relativeDepthFromWalkup)
protected internal SiteMapNode GetRootNodeCore()
protected SiteMapNode GetRootNodeCoreFromProvider(SiteMapProvider provider)
public void HintAncestorNodes(SiteMapNode node, int upLevel)
public void HintNeighborhoodNodes(SiteMapNode node, int upLevel, int downLevel)
protected void RemoveNode(SiteMapNode node)
public void Initialize(string name, NameValueCollection attributes)
public bool IsAccessibleToUser(HttpContext context, SiteMapNode node)
public SiteMapNode get_CurrentNode()
public SiteMapProvider get_ParentProvider()
public void set_ParentProvider(SiteMapProvider value)
public SiteMapProvider get_RootProvider()
protected SiteMapNode ResolveSiteMapNode(HttpContext context)
public bool get_EnableLocalization()
public void set_EnableLocalization(bool value)
public bool get_SecurityTrimmingEnabled()
public string get_ResourceKey()
public void set_ResourceKey(string value)
public SiteMapNode get_RootNode()
internal SiteMapNode ReturnNodeIfAccessible(SiteMapNode node)
}
public System.Web.SiteMapProviderCollection : ProviderCollection {
public SiteMapProvider Item
public void Add(ProviderBase provider)
public void Add(SiteMapProvider provider)
public void AddArray(SiteMapProvider[] providerArray)
public SiteMapProvider get_Item(string name)
}
public System.Web.SiteMapResolveEventArgs : EventArgs {
private HttpContext _context
private SiteMapProvider _provider
public HttpContext Context
public SiteMapProvider Provider
public void .ctor(HttpContext context, SiteMapProvider provider)
public HttpContext get_Context()
public SiteMapProvider get_Provider()
}
public System.Web.SiteMapResolveEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public SiteMapNode Invoke(object sender, SiteMapResolveEventArgs e)
public IAsyncResult BeginInvoke(object sender, SiteMapResolveEventArgs e, AsyncCallback callback, object object)
public SiteMapNode EndInvoke(IAsyncResult result)
}
internal System.Web.StateServicePerfCounter : Enum {
public int value__
public StateServicePerfCounter STATE_SERVICE_SESSIONS_ACTIVE
public StateServicePerfCounter STATE_SERVICE_SESSIONS_ABANDONED
public StateServicePerfCounter STATE_SERVICE_SESSIONS_TIMED_OUT
public StateServicePerfCounter STATE_SERVICE_SESSIONS_TOTAL
}
internal System.Web.StaticFileHandler : object {
public bool IsReusable
private bool ValidFileName(string fileName)
public void ProcessRequest(HttpContext context)
public bool get_IsReusable()
}
public System.Web.StaticSiteMapProvider : SiteMapProvider {
private Dictionary`2<string, SiteMapNode> keyToNode
private Dictionary`2<SiteMapNode, SiteMapNode> nodeToParent
private Dictionary`2<SiteMapNode, SiteMapNodeCollection> nodeToChildren
private Dictionary`2<string, SiteMapNode> urlToNode
protected internal void AddNode(SiteMapNode node, SiteMapNode parentNode)
protected void Clear()
public SiteMapNode FindSiteMapNode(string rawUrl)
public SiteMapNodeCollection GetChildNodes(SiteMapNode node)
public SiteMapNode GetParentNode(SiteMapNode node)
protected void RemoveNode(SiteMapNode node)
public SiteMapNode FindSiteMapNodeFromKey(string key)
public SiteMapNode BuildSiteMap()
private SiteMapNode CheckAccessibility(SiteMapNode node)
internal string MapUrl(string url)
}
internal System.Web.TaskAsyncResult : object {
private Action`2<Task, object> invokeCallback
private Task task
private AsyncCallback callback
private object <AsyncState>k__BackingField
private bool <CompletedSynchronously>k__BackingField
public object AsyncState
public WaitHandle AsyncWaitHandle
public bool CompletedSynchronously
public bool IsCompleted
public object get_AsyncState()
private void set_AsyncState(object value)
public WaitHandle get_AsyncWaitHandle()
public bool get_CompletedSynchronously()
private void set_CompletedSynchronously(bool value)
public bool get_IsCompleted()
private void .ctor(Task task, AsyncCallback callback, object state)
public IAsyncResult GetAsyncResult(Task task, AsyncCallback callback, object state)
public void Wait(IAsyncResult result)
private void InvokeCallback(Task task, object state)
}
public System.Web.TaskEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Task Invoke(object sender, EventArgs e)
public IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object)
public Task EndInvoke(IAsyncResult result)
}
internal System.Web.TaskWrapperAsyncResult : object {
private bool _forceCompletedSynchronously
private object <AsyncState>k__BackingField
private Task <Task>k__BackingField
public object AsyncState
public WaitHandle AsyncWaitHandle
public bool CompletedSynchronously
public bool IsCompleted
internal Task Task
internal void .ctor(Task task, object asyncState)
public object get_AsyncState()
private void set_AsyncState(object value)
public WaitHandle get_AsyncWaitHandle()
public bool get_CompletedSynchronously()
public bool get_IsCompleted()
internal Task get_Task()
private void set_Task(Task value)
internal void ForceCompletedSynchronously()
}
internal System.Web.TelemetryLogger : object {
public void LogHttpHandler(Type type)
public void LogTargetFramework(Version version)
}
internal System.Web.TempFileStream : FileStream {
private bool read_mode
private bool disposed
private long saved_position
public bool CanRead
public bool CanWrite
public void .ctor(string name)
public bool get_CanRead()
public bool get_CanWrite()
public void SavePosition()
public void RestorePosition()
public void SetReadOnly()
public void SetWriteOnly()
public void Write(Byte[] buffer, int offset, int count)
public int Read(Byte[] buffer, int offset, int count)
protected void Dispose(bool disposing)
}
public System.Web.TraceContext : object {
private object traceFinishedEvent
private HttpContext _Context
private TraceManager _traceManager
private bool _Enabled
private TraceMode _Mode
private TraceData data
private bool data_saved
private bool _haveTrace
private Hashtable view_states
private Hashtable control_states
private Hashtable sizes
private EventHandlerList events
internal bool HaveTrace
public bool IsEnabled
private TraceManager TraceManager
public TraceMode TraceMode
public void add_TraceFinished(TraceContextEventHandler value)
public void remove_TraceFinished(TraceContextEventHandler value)
public void .ctor(HttpContext context)
internal bool get_HaveTrace()
public bool get_IsEnabled()
public void set_IsEnabled(bool value)
private TraceManager get_TraceManager()
public TraceMode get_TraceMode()
public void set_TraceMode(TraceMode value)
public void Warn(string message)
public void Warn(string category, string message)
public void Warn(string category, string message, Exception errorInfo)
public void Write(string message)
public void Write(string category, string message)
public void Write(string category, string message, Exception errorInfo)
private void Write(string category, string msg, Exception error, bool Warning)
internal void SaveData()
internal void SaveViewState(Control ctrl, object vs)
internal void SaveControlState(Control ctrl, object vs)
internal void SaveSize(Control ctrl, int size)
internal void Render(HtmlTextWriter output)
private void SetRequestDetails()
private void AddCookies()
private void AddHeaders()
private void AddServerVars()
}
public System.Web.TraceContextEventArgs : EventArgs {
private ICollection _records
public ICollection TraceRecords
public void .ctor(ICollection records)
public ICollection get_TraceRecords()
}
public System.Web.TraceContextEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TraceContextEventArgs e)
public IAsyncResult BeginInvoke(object sender, TraceContextEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.TraceContextRecord : object {
private string category
private Exception errorInfo
private bool isWarning
private string message
public string Category
public Exception ErrorInfo
public bool IsWarning
public string Message
public void .ctor(string category, string msg, bool isWarning, Exception errorInfo)
public string get_Category()
public Exception get_ErrorInfo()
public bool get_IsWarning()
public string get_Message()
}
internal System.Web.TraceData : object {
private bool is_first_time
private DateTime first_time
private double prev_time
private Queue`1<InfoTraceData> info
private Queue`1<ControlTraceData> control_data
private Queue`1<NameValueTraceData> cookie_data
private Queue`1<NameValueTraceData> header_data
private Queue`1<NameValueTraceData> servervar_data
private Hashtable ctrl_cs
private string request_path
private string session_id
private DateTime request_time
private Encoding request_encoding
private Encoding response_encoding
private string request_type
private int status_code
private Page page
private TraceMode _traceMode
private Hashtable sizes
private Hashtable ctrl_vs
public TraceMode TraceMode
public string RequestPath
public string SessionID
public DateTime RequestTime
public Encoding RequestEncoding
public Encoding ResponseEncoding
public string RequestType
public int StatusCode
public TraceMode get_TraceMode()
public void set_TraceMode(TraceMode value)
public string get_RequestPath()
public void set_RequestPath(string value)
public string get_SessionID()
public void set_SessionID(string value)
public DateTime get_RequestTime()
public void set_RequestTime(DateTime value)
public Encoding get_RequestEncoding()
public void set_RequestEncoding(Encoding value)
public Encoding get_ResponseEncoding()
public void set_ResponseEncoding(Encoding value)
public string get_RequestType()
public void set_RequestType(string value)
public int get_StatusCode()
public void set_StatusCode(int value)
public void Write(string category, string msg, Exception error, bool Warning)
private string HtmlEncode(string s)
public void AddControlTree(Page page, Hashtable ctrl_vs, Hashtable ctrl_cs, Hashtable sizes)
private void AddControl(Control c, int control_pos)
private int GetRenderSize(Control ctrl)
private int GetViewStateSize(Control ctrl, object vs)
public void AddCookie(string name, string value)
public void AddHeader(string name, string value)
public void AddServerVar(string name, string value)
public void Render(HtmlTextWriter output)
private void RenderRequestDetails(HtmlTextWriter output)
private void RenderTraceInfo(HtmlTextWriter output)
private void RenderControlTree(HtmlTextWriter output)
private void RenderControlTraceDataRow(Table table, ControlTraceData r, int pos)
private void RenderCookies(HtmlTextWriter output)
private void RenderCookieDataRow(Table table, NameValueTraceData r, int pos)
private void RenderHeaders(HtmlTextWriter output)
private void RenderServerVars(HtmlTextWriter output)
internal TableRow AltRow(string title)
private void RenderTraceInfoRow(Table table, InfoTraceData i, int pos)
internal TableRow SubHeadRow(String[] cells)
internal TableRow RenderAltRow(Table table, int pos, String[] cells)
private TableRow InfoRow2(string title1, string info1, string title2, string info2)
internal Table CreateTable()
internal void RenderStyleSheet(HtmlTextWriter o)
}
internal System.Web.TraceManager : object {
private bool enabled
private bool local_only
private bool page_output
private TraceMode mode
private int request_limit
private int cur_item
private TraceData[] data
private Exception initialException
public bool HasException
public Exception InitialException
public bool Enabled
public bool LocalOnly
public bool PageOutput
public int RequestLimit
public TraceMode TraceMode
public TraceData[] TraceData
public int ItemCount
public bool get_HasException()
public Exception get_InitialException()
public bool get_Enabled()
public void set_Enabled(bool value)
public bool get_LocalOnly()
public void set_LocalOnly(bool value)
public bool get_PageOutput()
public void set_PageOutput(bool value)
public int get_RequestLimit()
public void set_RequestLimit(int value)
public TraceMode get_TraceMode()
public void set_TraceMode(TraceMode value)
public TraceData[] get_TraceData()
public void AddTraceData(TraceData item)
public void Clear()
public int get_ItemCount()
}
public System.Web.TraceMode : Enum {
public int value__
public TraceMode SortByTime
public TraceMode SortByCategory
public TraceMode Default
}
public System.Web.UI.Adapters.ControlAdapter : object {
internal Control control
protected HttpBrowserCapabilities Browser
protected Control Control
protected Page Page
protected PageAdapter PageAdapter
internal void .ctor(Control c)
protected HttpBrowserCapabilities get_Browser()
protected Control get_Control()
protected Page get_Page()
protected PageAdapter get_PageAdapter()
protected internal void BeginRender(HtmlTextWriter writer)
protected internal void CreateChildControls()
protected internal void EndRender(HtmlTextWriter writer)
protected internal void LoadAdapterControlState(object state)
protected internal void LoadAdapterViewState(object state)
protected internal void OnInit(EventArgs e)
protected internal void OnLoad(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected internal void OnUnload(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
protected internal void RenderChildren(HtmlTextWriter writer)
protected internal object SaveAdapterControlState()
protected internal object SaveAdapterViewState()
}
public System.Web.UI.Adapters.PageAdapter : ControlAdapter {
private ListDictionary radio_button_group
public StringCollection CacheVaryByHeaders
public StringCollection CacheVaryByParams
protected string ClientState
internal void .ctor(Page p)
public StringCollection get_CacheVaryByHeaders()
public StringCollection get_CacheVaryByParams()
protected string get_ClientState()
public NameValueCollection DeterminePostBackMode()
public ICollection GetRadioButtonsByGroup(string groupName)
public PageStatePersister GetStatePersister()
public void RegisterRadioButton(RadioButton radioButton)
public void RenderBeginHyperlink(HtmlTextWriter writer, string targetUrl, bool encodeUrl, string softkeyLabel)
public void RenderBeginHyperlink(HtmlTextWriter writer, string targetUrl, bool encodeUrl, string softkeyLabel, string accessKey)
private void InternalRenderBeginHyperlink(HtmlTextWriter w, string targetUrl, bool encodeUrl, string softKeyLabel, string accessKey)
public void RenderEndHyperlink(HtmlTextWriter writer)
public void RenderPostBackEvent(HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text)
public void RenderPostBackEvent(HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text, string postUrl, string accessKey)
protected void RenderPostBackEvent(HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text, string postUrl, string accessKey, bool encode)
public string TransformText(string text)
protected internal string GetPostBackFormReference(string formId)
public NameValueCollection DeterminePostBackModeUnvalidated()
}
internal System.Web.UI.ApplicationFileParser : TemplateParser {
private List`1<string> dependencies
private TextReader reader
internal List`1<string> FileDependencies
internal Type DefaultBaseType
internal string DefaultBaseTypeName
internal string DefaultDirectiveName
internal string BaseVirtualDir
internal TextReader Reader
public void .ctor(string fname, HttpContext context)
internal void .ctor(VirtualPath virtualPath, TextReader reader, HttpContext context)
internal void .ctor(VirtualPath virtualPath, string inputFile, TextReader reader, HttpContext context)
internal Type CompileIntoType()
internal Type GetCompiledApplicationType(string inputFile, HttpContext context)
internal void AddDirective(string directive, IDictionary atts)
internal List`1<string> get_FileDependencies()
internal Type get_DefaultBaseType()
internal string get_DefaultBaseTypeName()
internal string get_DefaultDirectiveName()
internal string get_BaseVirtualDir()
internal TextReader get_Reader()
internal void set_Reader(TextReader value)
}
public System.Web.UI.AttributeCollection : object {
private StateBag bag
private CssStyleCollection styleCollection
internal string StyleAttribute
public int Count
public CssStyleCollection CssStyle
public string Item
public ICollection Keys
public void .ctor(StateBag bag)
public bool Equals(object o)
public int GetHashCode()
public int get_Count()
public CssStyleCollection get_CssStyle()
public string get_Item(string key)
public void set_Item(string key, string value)
public ICollection get_Keys()
public void Add(string key, string value)
public void AddAttributes(HtmlTextWriter writer)
public void Clear()
public void Remove(string key)
public void Render(HtmlTextWriter writer)
internal void CopyFrom(AttributeCollection attributeCollection)
}
public System.Web.UI.BaseParser : object {
private HttpContext context
private string baseDir
private string baseVDir
private ILocation location
private VirtualPath <VirtualPath>k__BackingField
internal ILocation Location
internal HttpContext Context
internal string BaseDir
internal string BaseVirtualDir
internal VirtualPath VirtualPath
internal CompilationSection CompilationConfig
internal string MapPath(string path)
internal string MapPath(string path, bool allowCrossAppMapping)
internal string PhysicalPath(string path)
internal bool GetBool(IDictionary hash, string key, bool deflt)
internal string GetString(IDictionary hash, string key, string deflt)
internal bool IsDirective(string value, char directiveChar)
internal bool IsDataBound(string value)
internal bool IsExpression(string value)
internal void ThrowParseException(string message, Object[] parms)
internal void ThrowParseException(string message, Exception inner, Object[] parms)
internal void ThrowParseFileNotFound(string path, Object[] parms)
internal ILocation get_Location()
internal void set_Location(ILocation value)
internal HttpContext get_Context()
internal void set_Context(HttpContext value)
internal string get_BaseDir()
internal string get_BaseVirtualDir()
internal void set_BaseVirtualDir(string value)
internal TSection GetConfigSection(string section)
internal VirtualPath get_VirtualPath()
internal void set_VirtualPath(VirtualPath value)
internal CompilationSection get_CompilationConfig()
}
public System.Web.UI.BasePartialCachingControl : Control {
private CacheDependency dependency
private string ctrl_id
private string guid
private int duration
private string varyby_params
private string varyby_controls
private string varyby_custom
private DateTime expirationTime
private bool slidingExpiration
private Control control
private ControlCachePolicy cachePolicy
private string cacheKey
private string cachedData
private string <ProviderName>k__BackingField
internal string CtrlID
internal string Guid
internal int Duration
internal string VaryByParams
internal string VaryByControls
internal string VaryByCustom
internal DateTime ExpirationTime
internal bool SlidingExpiration
internal string ProviderName
public ControlCachePolicy CachePolicy
public CacheDependency Dependency
internal string get_CtrlID()
internal void set_CtrlID(string value)
internal string get_Guid()
internal void set_Guid(string value)
internal int get_Duration()
internal void set_Duration(int value)
internal string get_VaryByParams()
internal void set_VaryByParams(string value)
internal string get_VaryByControls()
internal void set_VaryByControls(string value)
internal string get_VaryByCustom()
internal void set_VaryByCustom(string value)
internal DateTime get_ExpirationTime()
internal void set_ExpirationTime(DateTime value)
internal bool get_SlidingExpiration()
internal void set_SlidingExpiration(bool value)
internal string get_ProviderName()
internal void set_ProviderName(string value)
internal Control CreateControl()
public void Dispose()
private void RetrieveCachedContents()
private OutputCacheProvider GetProvider()
private void OnDependencyChanged(string key, object value, CacheItemRemovedReason reason)
internal void InitRecursive(Control namingContainer)
protected internal void Render(HtmlTextWriter output)
public ControlCachePolicy get_CachePolicy()
public CacheDependency get_Dependency()
public void set_Dependency(CacheDependency value)
private string CreateKey()
}
public System.Web.UI.BaseTemplateParser : TemplateParser {
protected Type GetReferencedType(string virtualPath)
protected internal Type GetUserControlType(string virtualPath)
}
public System.Web.UI.BindableTemplateBuilder : TemplateBuilder {
public IOrderedDictionary ExtractValues(Control container)
}
public System.Web.UI.BoundPropertyEntry : PropertyEntry {
private string <ControlID>k__BackingField
private Type <ControlType>k__BackingField
private string <Expression>k__BackingField
private ExpressionBuilder <ExpressionBuilder>k__BackingField
private string <ExpressionPrefix>k__BackingField
private string <FieldName>k__BackingField
private string <FormatString>k__BackingField
private bool <Generated>k__BackingField
private object <ParsedExpressionData>k__BackingField
private bool <ReadOnlyProperty>k__BackingField
private bool <TwoWayBound>k__BackingField
private bool <UseSetAttribute>k__BackingField
public string ControlID
public Type ControlType
public string Expression
public ExpressionBuilder ExpressionBuilder
public string ExpressionPrefix
public string FieldName
public string FormatString
public bool Generated
public object ParsedExpressionData
public bool ReadOnlyProperty
public bool TwoWayBound
public bool UseSetAttribute
public bool IsEncoded
public string get_ControlID()
public void set_ControlID(string value)
public Type get_ControlType()
public void set_ControlType(Type value)
public string get_Expression()
public void set_Expression(string value)
public ExpressionBuilder get_ExpressionBuilder()
public void set_ExpressionBuilder(ExpressionBuilder value)
public string get_ExpressionPrefix()
public void set_ExpressionPrefix(string value)
public string get_FieldName()
public void set_FieldName(string value)
public string get_FormatString()
public void set_FormatString(string value)
public bool get_Generated()
public void set_Generated(bool value)
public object get_ParsedExpressionData()
public void set_ParsedExpressionData(object value)
public bool get_ReadOnlyProperty()
public void set_ReadOnlyProperty(bool value)
public bool get_TwoWayBound()
public void set_TwoWayBound(bool value)
public bool get_UseSetAttribute()
public void set_UseSetAttribute(bool value)
public bool get_IsEncoded()
public void set_IsEncoded(bool value)
}
public System.Web.UI.BuilderPropertyEntry : PropertyEntry {
private ControlBuilder <Builder>k__BackingField
public ControlBuilder Builder
public ControlBuilder get_Builder()
public void set_Builder(ControlBuilder value)
}
public System.Web.UI.BuildMethod : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Control Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public Control EndInvoke(IAsyncResult result)
}
public System.Web.UI.BuildTemplateMethod : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(Control control)
public IAsyncResult BeginInvoke(Control control, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.ChtmlTextWriter : Html32TextWriter {
private Hashtable global_suppressed_attrs
private String[] global_suppressed_attributes
private String[] recognized_attributes
private Hashtable recognized_attrs
private Hashtable suppressed_attrs
private Hashtable attr_render
protected Hashtable GlobalSuppressedAttributes
protected Hashtable RecognizedAttributes
protected Hashtable SuppressedAttributes
private void SetupGlobalSuppressedAttrs(String[] attrs)
private void PopulateHash(Hashtable hash, String[] keys)
public void .ctor(TextWriter writer)
public void .ctor(TextWriter writer, string tabString)
private void SetupSuppressedAttrs()
private void Init(string key, String[] attrs, Hashtable container)
protected Hashtable get_GlobalSuppressedAttributes()
protected Hashtable get_RecognizedAttributes()
protected Hashtable get_SuppressedAttributes()
public void AddRecognizedAttribute(string elementName, string attributeName)
public void RemoveRecognizedAttribute(string elementName, string attributeName)
public void WriteBreak()
public void WriteEncodedText(string text)
protected bool OnAttributeRender(string name, string value, HtmlTextWriterAttribute key)
protected bool OnStyleAttributeRender(string name, string value, HtmlTextWriterStyle key)
protected bool OnTagRender(string name, HtmlTextWriterTag key)
}
public System.Web.UI.ClientIDMode : Enum {
public int value__
public ClientIDMode Inherit
public ClientIDMode AutoID
public ClientIDMode Predictable
public ClientIDMode Static
}
public System.Web.UI.ClientScriptManager : object {
internal string EventStateFieldName
private Hashtable registeredArrayDeclares
private ScriptEntry clientScriptBlocks
private ScriptEntry startupScriptBlocks
internal Hashtable hiddenFields
private ScriptEntry submitStatements
private Page ownerPage
private Int32[] eventValidationValues
private int eventValidationPos
private Hashtable expandoAttributes
private bool _hasRegisteredForEventValidationOnCallback
private bool _pageInRender
private bool _initCallBackRegistered
private bool _webFormClientScriptRendered
private bool _webFormClientScriptRequired
private bool _scriptTagOpened
internal string SCRIPT_BLOCK_START
internal string SCRIPT_BLOCK_END
internal string SCRIPT_ELEMENT_START
internal string SCRIPT_ELEMENT_END
internal bool ScriptsPresent
private Page OwnerPage
internal bool get_ScriptsPresent()
private Page get_OwnerPage()
internal void .ctor(Page page)
public string GetPostBackClientHyperlink(Control control, string argument)
public string GetPostBackClientHyperlink(Control control, string argument, bool registerForEventValidation)
public string GetPostBackEventReference(Control control, string argument)
public string GetPostBackEventReference(Control control, string argument, bool registerForEventValidation)
public string GetPostBackEventReference(PostBackOptions options, bool registerForEventValidation)
public string GetPostBackEventReference(PostBackOptions options)
internal void RegisterWebFormClientScript()
internal void WriteWebFormClientScript(HtmlTextWriter writer)
public string GetCallbackEventReference(Control control, string argument, string clientCallback, string context)
public string GetCallbackEventReference(Control control, string argument, string clientCallback, string context, bool useAsync)
public string GetCallbackEventReference(Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync)
public string GetCallbackEventReference(string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync)
public string GetWebResourceUrl(Type type, string resourceName)
public bool IsClientScriptBlockRegistered(string key)
public bool IsClientScriptBlockRegistered(Type type, string key)
public bool IsStartupScriptRegistered(string key)
public bool IsStartupScriptRegistered(Type type, string key)
public bool IsOnSubmitStatementRegistered(string key)
public bool IsOnSubmitStatementRegistered(Type type, string key)
public bool IsClientScriptIncludeRegistered(string key)
public bool IsClientScriptIncludeRegistered(Type type, string key)
private bool IsScriptRegistered(ScriptEntry scriptList, Type type, string key)
public void RegisterArrayDeclaration(string arrayName, string arrayValue)
private void RegisterScript(ScriptEntry& scriptList, Type type, string key, string script, bool addScriptTags)
private void RegisterScript(ScriptEntry& scriptList, Type type, string key, string script, ScriptEntryFormat format)
internal void RegisterClientScriptBlock(string key, string script)
public void RegisterClientScriptBlock(Type type, string key, string script)
public void RegisterClientScriptBlock(Type type, string key, string script, bool addScriptTags)
public void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue)
internal void RegisterOnSubmitStatement(string key, string script)
public void RegisterOnSubmitStatement(Type type, string key, string script)
internal void RegisterStartupScript(string key, string script)
public void RegisterStartupScript(Type type, string key, string script)
public void RegisterStartupScript(Type type, string key, string script, bool addScriptTags)
public void RegisterClientScriptInclude(string key, string url)
public void RegisterClientScriptInclude(Type type, string key, string url)
public void RegisterClientScriptResource(Type type, string resourceName)
public void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue)
public void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode)
private void EnsureEventValidationArray()
internal void ResetEventValidationState()
private int CalculateEventHash(string uniqueId, string argument)
public void RegisterForEventValidation(PostBackOptions options)
public void RegisterForEventValidation(string uniqueId)
public void RegisterForEventValidation(string uniqueId, string argument)
public void ValidateEvent(string uniqueId)
private ArgumentException InvalidPostBackException()
public void ValidateEvent(string uniqueId, string argument)
private void WriteScripts(HtmlTextWriter writer, ScriptEntry scriptList)
private void EnsureBeginScriptBlock(HtmlTextWriter writer)
private void EnsureEndScriptBlock(HtmlTextWriter writer)
internal void RestoreEventValidationState(string fieldValue)
internal void SaveEventValidationState()
internal string GetEventValidationStateFormatted()
internal void WriteExpandoAttributes(HtmlTextWriter writer)
internal void WriteBeginScriptBlock(HtmlTextWriter writer)
internal void WriteEndScriptBlock(HtmlTextWriter writer)
internal void WriteHiddenFields(HtmlTextWriter writer)
internal void WriteClientScriptInclude(HtmlTextWriter writer, string path, Type type, string key)
internal void WriteClientScriptBlocks(HtmlTextWriter writer)
internal void WriteStartupScriptBlocks(HtmlTextWriter writer)
internal void WriteArrayDeclares(HtmlTextWriter writer)
internal string GetClientValidationEvent(string validationGroup)
internal string GetClientValidationEvent()
internal string WriteSubmitStatements()
internal string GetScriptLiteral(object ob)
internal string EnsureEndsWithSemicolon(string value)
}
public System.Web.UI.CodeBlockType : Enum {
public int value__
public CodeBlockType Code
public CodeBlockType DataBinding
public CodeBlockType EncodedExpression
public CodeBlockType Expression
}
internal System.Web.UI.CodeBuilder : ControlBuilder {
private string code
private bool isAssign
internal string Code
internal bool IsAssign
public void .ctor(string code, bool isAssign, ILocation location)
internal object CreateInstance()
internal string get_Code()
internal void set_Code(string value)
internal bool get_IsAssign()
}
public System.Web.UI.CodeConstructType : Enum {
public int value__
public CodeConstructType CodeSnippet
public CodeConstructType ExpressionSnippet
public CodeConstructType DataBindingSnippet
public CodeConstructType ScriptTag
public CodeConstructType EncodedExpressionSnippet
}
internal System.Web.UI.CodeRenderBuilder : CodeBuilder {
private bool <HtmlEncode>k__BackingField
public bool HtmlEncode
public bool get_HtmlEncode()
private void set_HtmlEncode(bool value)
public void .ctor(string code, bool isAssign, ILocation location, bool doHtmlEncode)
public void .ctor(string code, bool isAssign, ILocation location)
}
public System.Web.UI.CodeStatementBuilder : ControlBuilder {
public CodeStatement BuildStatement(CodeArgumentReferenceExpression writerReferenceExpression)
}
internal System.Web.UI.CollectionBuilder : ControlBuilder {
private Type[] possibleElementTypes
public void AppendLiteralString(string s)
public Type GetChildControlType(string tagName, IDictionary attribs)
public void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attribs)
}
public System.Web.UI.CompilationMode : Enum {
public int value__
public CompilationMode Auto
public CompilationMode Never
public CompilationMode Always
}
public System.Web.UI.CompiledBindableTemplateBuilder : object {
private BuildTemplateMethod templateMethod
private ExtractTemplateValuesMethod extractMethod
public void .ctor(BuildTemplateMethod buildTemplateMethod, ExtractTemplateValuesMethod extractTemplateValuesMethod)
public void InstantiateIn(Control container)
public IOrderedDictionary ExtractValues(Control container)
}
public System.Web.UI.CompiledTemplateBuilder : object {
private BuildTemplateMethod templateMethod
public void .ctor(BuildTemplateMethod buildTemplateMethod)
public void InstantiateIn(Control container)
}
public System.Web.UI.ComplexPropertyEntry : BuilderPropertyEntry {
private bool <IsCollectionItem>k__BackingField
private bool <ReadOnly>k__BackingField
public bool IsCollectionItem
public bool ReadOnly
internal void .ctor(bool isCollectionItem, bool readOnly)
public bool get_IsCollectionItem()
private void set_IsCollectionItem(bool value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
}
public System.Web.UI.ConflictOptions : Enum {
public int value__
public ConflictOptions OverwriteChanges
public ConflictOptions CompareAllValues
}
public System.Web.UI.ConstructorNeedsTagAttribute : Attribute {
private bool needsTag
public bool NeedsTag
public void .ctor(bool needsTag)
public bool get_NeedsTag()
}
public System.Web.UI.Control : object {
internal object DataBindingEvent
internal object DisposedEvent
internal object InitEvent
internal object LoadEvent
internal object PreRenderEvent
internal object UnloadEvent
internal String[] defaultNameArray
private int event_mask
private int databinding_mask
private int disposed_mask
private int init_mask
private int load_mask
private int prerender_mask
private int unload_mask
private Dictionary`2<Type, bool> loadViewStateByIDCache
private Nullable`1<bool> loadViewStateByID
private string uniqueID
private string clientID
private string _userId
private ControlCollection _controls
private Control _namingContainer
private Page _page
private Control _parent
private ISite _site
private StateBag _viewState
private EventHandlerList _events
private RenderMethod _renderMethodDelegate
private Hashtable _controlsCache
private int defaultNumberID
private DataBindingCollection dataBindings
private Hashtable pendingVS
private TemplateControl _templateControl
private bool _isChildControlStateCleared
private string _templateSourceDirectory
private ViewStateMode viewStateMode
private Nullable`1<ClientIDMode> clientIDMode
private Nullable`1<ClientIDMode> effectiveClientIDMode
private Version renderingCompatibility
private Nullable`1<bool> renderingCompatibilityOld
private int stateMask
private int ENABLE_VIEWSTATE
private int VISIBLE
private int AUTOID
private int CREATING_CONTROLS
private int BINDING_CONTAINER
private int AUTO_EVENT_WIREUP
private int IS_NAMING_CONTAINER
private int VISIBLE_CHANGED
private int TRACK_VIEWSTATE
private int CHILD_CONTROLS_CREATED
private int ID_SET
private int INITED
private int INITING
private int VIEWSTATE_LOADED
private int LOADED
private int PRERENDERED
private int ENABLE_THEMING
private int AUTOID_SET
private int REMOVED
private ControlAdapter adapter
private bool did_adapter_lookup
private string _appRelativeTemplateSourceDirectory
internal ControlSkin controlSkin
private string skinId
private bool _enableTheming
private ExpressionBindingCollection expressionBindings
protected internal ControlAdapter Adapter
public string AppRelativeTemplateSourceDirectory
public Control BindingContainer
public string ClientID
public Version RenderingCompatibility
internal bool RenderingCompatibilityLessThan40
public Control DataItemContainer
public Control DataKeysContainer
public ClientIDMode ClientIDMode
internal ClientIDMode EffectiveClientIDMode
protected char ClientIDSeparator
public ControlCollection Controls
protected internal bool DesignMode
public bool EnableViewState
public string ID
protected internal bool IsChildControlStateCleared
protected bool LoadViewStateByID
protected internal bool IsViewStateEnabled
protected char IdSeparator
public Control NamingContainer
public Page Page
public Control Parent
public ISite Site
public TemplateControl TemplateControl
internal TemplateControl TemplateControlInternal
public string TemplateSourceDirectory
public string UniqueID
public bool Visible
protected bool ChildControlsCreated
protected internal HttpContext Context
protected EventHandlerList Events
protected bool HasChildViewState
protected bool IsTrackingViewState
protected StateBag ViewState
protected bool ViewStateIgnoresCase
internal bool AutoEventWireup
internal bool AutoID
public bool EnableTheming
public string SkinID
private ControlBuilder System.Web.UI.IControlBuilderAccessor.ControlBuilder
private IDictionary System.Web.UI.IControlDesignerAccessor.UserData
private ExpressionBindingCollection System.Web.UI.IExpressionsAccessor.Expressions
private bool System.Web.UI.IExpressionsAccessor.HasExpressions
internal bool IsInited
internal bool IsLoaded
internal bool IsPrerendered
private DataBindingCollection System.Web.UI.IDataBindingsAccessor.DataBindings
private bool System.Web.UI.IDataBindingsAccessor.HasDataBindings
public ViewStateMode ViewStateMode
public ValidateRequestMode ValidateRequestMode
protected internal ControlAdapter get_Adapter()
public string get_AppRelativeTemplateSourceDirectory()
public void set_AppRelativeTemplateSourceDirectory(string value)
public Control get_BindingContainer()
public string get_ClientID()
public Version get_RenderingCompatibility()
public void set_RenderingCompatibility(Version value)
internal bool get_RenderingCompatibilityLessThan40()
public Control get_DataItemContainer()
public Control get_DataKeysContainer()
public ClientIDMode get_ClientIDMode()
public void set_ClientIDMode(ClientIDMode value)
internal ClientIDMode get_EffectiveClientIDMode()
protected void ClearCachedClientID()
protected void ClearEffectiveClientIDMode()
private string GetClientID()
private string GeneratePredictableClientID()
private void GetDataBoundControlFieldValue(StringBuilder sb, char separator, IDataItemContainer dataItemContainer, IDataKeysControl dataKeysContainer)
internal string UniqueID2ClientID(string uniqueId)
protected char get_ClientIDSeparator()
public ControlCollection get_Controls()
protected internal bool get_DesignMode()
public bool get_EnableViewState()
public void set_EnableViewState(bool value)
public string get_ID()
public void set_ID(string value)
protected internal bool get_IsChildControlStateCleared()
protected bool get_LoadViewStateByID()
protected internal bool get_IsViewStateEnabled()
protected char get_IdSeparator()
public Control get_NamingContainer()
public Page get_Page()
public void set_Page(Page value)
public Control get_Parent()
public ISite get_Site()
public void set_Site(ISite value)
public TemplateControl get_TemplateControl()
public void set_TemplateControl(TemplateControl value)
internal TemplateControl get_TemplateControlInternal()
public string get_TemplateSourceDirectory()
public string get_UniqueID()
private void SetMask(int m, bool val)
public bool get_Visible()
public void set_Visible(bool value)
protected bool get_ChildControlsCreated()
protected void set_ChildControlsCreated(bool value)
protected internal HttpContext get_Context()
protected EventHandlerList get_Events()
protected bool get_HasChildViewState()
protected bool get_IsTrackingViewState()
protected StateBag get_ViewState()
protected bool get_ViewStateIgnoresCase()
internal bool get_AutoEventWireup()
internal void set_AutoEventWireup(bool value)
internal void SetBindingContainer(bool isBC)
internal void ResetChildNames()
internal void ResetChildNames(int value)
internal int GetDefaultNumberID()
private string GetDefaultName()
private void NullifyUniqueID()
private bool IsLoadViewStateByID()
protected internal void AddedControl(Control control, int index)
private void SetNamingContainer(Control nc)
protected void AddParsedSubObject(object obj)
public void ApplyStyleSheetSkin(Page page)
protected void BuildProfileTree(string parentId, bool calcViewState)
protected void ClearChildControlState()
protected void ClearChildState()
protected void ClearChildViewState()
protected internal void CreateChildControls()
protected ControlCollection CreateControlCollection()
protected void EnsureChildControls()
private void EnsureIDInternal()
protected void EnsureID()
protected bool HasEvents()
private void ResetControlsCache()
private Hashtable InitControlsCache()
private void EnsureControlsCache()
private void FillControlCache(ControlCollection controls)
protected bool IsLiteralContent()
public Control FindControl(string id)
private Control LookForControlByName(string id)
protected Control FindControl(string id, int pathOffset)
protected void LoadViewState(object savedState)
protected string MapPathSecure(string virtualPath)
protected bool OnBubbleEvent(object source, EventArgs args)
protected void OnDataBinding(EventArgs e)
protected internal void OnInit(EventArgs e)
protected internal void OnLoad(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected internal void OnUnload(EventArgs e)
protected internal Stream OpenFile(string path)
internal string GetPhysicalFilePath(string virtualPath)
protected void RaiseBubbleEvent(object source, EventArgs args)
protected internal void Render(HtmlTextWriter writer)
protected internal void RenderChildren(HtmlTextWriter writer)
protected ControlAdapter ResolveAdapter()
protected object SaveViewState()
protected void TrackViewState()
public void Dispose()
public void add_DataBinding(EventHandler value)
public void remove_DataBinding(EventHandler value)
public void add_Disposed(EventHandler value)
public void remove_Disposed(EventHandler value)
public void add_Init(EventHandler value)
public void remove_Init(EventHandler value)
public void add_Load(EventHandler value)
public void remove_Load(EventHandler value)
public void add_PreRender(EventHandler value)
public void remove_PreRender(EventHandler value)
public void add_Unload(EventHandler value)
public void remove_Unload(EventHandler value)
public void DataBind()
protected void DataBindChildren()
public bool HasControls()
public void RenderControl(HtmlTextWriter writer)
protected void RenderControl(HtmlTextWriter writer, ControlAdapter adapter)
public string ResolveUrl(string relativeUrl)
public string ResolveClientUrl(string relativeUrl)
internal bool HasRenderMethodDelegate()
public void SetRenderMethodDelegate(RenderMethod renderMethod)
internal void LoadRecursive()
internal void UnloadRecursive(bool dispose)
internal void PreRenderRecursiveInternal()
internal void InitRecursive(Control namingContainer)
internal object SaveViewStateRecursive()
internal void LoadViewStateRecursive(object savedState)
internal void ApplyTheme()
internal bool get_AutoID()
internal void set_AutoID(bool value)
protected internal void RemovedControl(Control control)
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
public string get_SkinID()
public void set_SkinID(string value)
private ControlBuilder System.Web.UI.IControlBuilderAccessor.get_ControlBuilder()
private IDictionary System.Web.UI.IControlDesignerAccessor.GetDesignModeState()
private void System.Web.UI.IControlDesignerAccessor.SetDesignModeState(IDictionary designData)
private void System.Web.UI.IControlDesignerAccessor.SetOwnerControl(Control control)
private IDictionary System.Web.UI.IControlDesignerAccessor.get_UserData()
private ExpressionBindingCollection System.Web.UI.IExpressionsAccessor.get_Expressions()
private bool System.Web.UI.IExpressionsAccessor.get_HasExpressions()
public void Focus()
protected internal void LoadControlState(object savedState)
protected internal object SaveControlState()
protected void DataBind(bool raiseOnDataBinding)
protected IDictionary GetDesignModeState()
protected void SetDesignModeState(IDictionary data)
internal bool get_IsInited()
internal bool get_IsLoaded()
internal bool get_IsPrerendered()
private bool CheckForValidationSupport()
internal void ValidateEvent(string uniqueId, string argument)
private void System.Web.UI.IParserAccessor.AddParsedSubObject(object obj)
private DataBindingCollection System.Web.UI.IDataBindingsAccessor.get_DataBindings()
private bool System.Web.UI.IDataBindingsAccessor.get_HasDataBindings()
public ViewStateMode get_ViewStateMode()
public void set_ViewStateMode(ViewStateMode value)
public string GetRouteUrl(object routeParameters)
public string GetRouteUrl(RouteValueDictionary routeParameters)
public string GetRouteUrl(string routeName, object routeParameters)
public string GetRouteUrl(string routeName, RouteValueDictionary routeParameters)
public string GetUniqueIDRelativeTo(Control control)
public ValidateRequestMode get_ValidateRequestMode()
public void set_ValidateRequestMode(ValidateRequestMode value)
public void SetTraceData(object traceDataKey, object traceDataValue)
public void SetTraceData(object tracedObject, object traceDataKey, object traceDataValue)
}
public System.Web.UI.ControlBuilder : object {
internal BindingFlags FlagsNoCase
private ControlBuilder myNamingContainer
private TemplateParser parser
private Type parserType
private ControlBuilder parentBuilder
private Type type
private string tagName
private string originalTagName
private string id
private IDictionary attribs
private int line
private string fileName
private bool childrenAsProperties
private bool isIParserAccessor
private bool hasAspCode
private ControlBuilder defaultPropertyBuilder
private ArrayList children
private ArrayList templateChildren
private int nextID
private bool haveParserVariable
private CodeMemberMethod method
private CodeStatementCollection methodStatements
private CodeMemberMethod renderMethod
private int renderIndex
private bool isProperty
private bool isPropertyWritable
private ILocation location
private ArrayList otherTags
private int localVariableCount
private Nullable`1<bool> isTemplate
private CodeMemberMethod <DataBindingMethod>k__BackingField
public string DesignerFilter
internal ControlBuilder ParentBuilder
internal IDictionary Attributes
internal int Line
internal string FileName
internal ControlBuilder DefaultPropertyBuilder
internal bool HaveParserVariable
internal CodeMemberMethod Method
internal CodeMemberMethod DataBindingMethod
internal CodeStatementCollection MethodStatements
internal CodeMemberMethod RenderMethod
internal int RenderIndex
internal bool IsProperty
internal bool IsPropertyWritable
internal ILocation Location
internal ArrayList OtherTags
public Type ControlType
protected bool FChildrenAsProperties
protected bool FIsNonParserAccessor
public bool HasAspCode
public string ID
internal ArrayList Children
internal ArrayList TemplateChildren
protected bool InDesigner
public Type NamingContainerType
internal bool IsNamingContainer
internal bool IsTemplate
internal bool PropertyBuilderShouldReturnValue
private ControlBuilder MyNamingContainer
public Type BindingContainerType
internal TemplateBuilder ParentTemplateBuilder
protected TemplateParser Parser
public string TagName
internal string OriginalTagName
internal RootBuilder Root
internal bool ChildrenAsProperties
public ControlBuilder BindingContainerBuilder
public ICollection ComplexPropertyEntries
public IFilterResolutionService CurrentFilterResolutionService
public Type DeclareType
public string ItemType
public bool Localize
public string PageVirtualPath
public IServiceProvider ServiceProvider
public ArrayList SubBuilders
public ICollection TemplatePropertyEntries
public IThemeResolutionService ThemeResolutionService
internal void .ctor(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attribs, int line, string sourceFileName)
internal void EnsureOtherTags()
internal ControlBuilder get_ParentBuilder()
internal IDictionary get_Attributes()
internal int get_Line()
internal void set_Line(int value)
internal string get_FileName()
internal void set_FileName(string value)
internal ControlBuilder get_DefaultPropertyBuilder()
internal bool get_HaveParserVariable()
internal void set_HaveParserVariable(bool value)
internal CodeMemberMethod get_Method()
internal void set_Method(CodeMemberMethod value)
internal CodeMemberMethod get_DataBindingMethod()
internal void set_DataBindingMethod(CodeMemberMethod value)
internal CodeStatementCollection get_MethodStatements()
internal void set_MethodStatements(CodeStatementCollection value)
internal CodeMemberMethod get_RenderMethod()
internal void set_RenderMethod(CodeMemberMethod value)
internal int get_RenderIndex()
internal bool get_IsProperty()
internal bool get_IsPropertyWritable()
internal ILocation get_Location()
internal void set_Location(ILocation value)
internal ArrayList get_OtherTags()
public Type get_ControlType()
protected bool get_FChildrenAsProperties()
protected bool get_FIsNonParserAccessor()
public bool get_HasAspCode()
public string get_ID()
public void set_ID(string value)
internal ArrayList get_Children()
internal ArrayList get_TemplateChildren()
internal void SetControlType(Type t)
protected bool get_InDesigner()
public Type get_NamingContainerType()
internal bool get_IsNamingContainer()
internal bool get_IsTemplate()
internal bool get_PropertyBuilderShouldReturnValue()
private ControlBuilder get_MyNamingContainer()
public Type get_BindingContainerType()
internal TemplateBuilder get_ParentTemplateBuilder()
protected TemplateParser get_Parser()
public string get_TagName()
internal string get_OriginalTagName()
internal RootBuilder get_Root()
internal bool get_ChildrenAsProperties()
internal string GetAttribute(string name)
internal void IncreaseRenderIndex()
private void AddChild(object child)
public bool AllowWhitespaceLiterals()
public void AppendLiteralString(string s)
public void AppendSubBuilder(ControlBuilder subBuilder)
private void AppendToProperty(ControlBuilder subBuilder)
private void AppendCode(ControlBuilder subBuilder)
public void CloseControl()
private Type MapTagType(Type tagType)
public ControlBuilder CreateBuilderFromType(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attribs, int line, string sourceFileName)
public Type GetChildControlType(string tagName, IDictionary attribs)
public bool HasBody()
public bool HtmlDecodeLiterals()
private ControlBuilder CreatePropertyBuilder(string propName, TemplateParser parser, IDictionary atts)
public void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attribs)
public bool NeedsTagInnerText()
public void OnAppendToParentBuilder(ControlBuilder parentBuilder)
internal void SetTagName(string name)
public void SetTagInnerText(string text)
internal string GetNextID(string proposedID)
internal string GetNextLocalVariableName(string baseName)
internal ControlBuilder CreateSubBuilder(string tagid, IDictionary atts, Type childType, TemplateParser parser, ILocation location)
internal object CreateInstance()
internal void CreateChildren(object parent)
public object BuildObject()
public void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod)
internal void ResetState()
public ControlBuilder get_BindingContainerBuilder()
public ICollection get_ComplexPropertyEntries()
public IFilterResolutionService get_CurrentFilterResolutionService()
public Type get_DeclareType()
public string get_ItemType()
public bool get_Localize()
public string get_PageVirtualPath()
public IServiceProvider get_ServiceProvider()
public ArrayList get_SubBuilders()
public ICollection get_TemplatePropertyEntries()
public IThemeResolutionService get_ThemeResolutionService()
public ObjectPersistData GetObjectPersistData()
public string GetResourceKey()
public void SetResourceKey(string resourceKey)
public void SetServiceProvider(IServiceProvider serviceProvider)
}
public System.Web.UI.ControlBuilderAttribute : Attribute {
public ControlBuilderAttribute Default
private Type builderType
public Type BuilderType
public void .ctor(Type builderType)
public Type get_BuilderType()
public int GetHashCode()
public bool Equals(object obj)
public bool IsDefaultAttribute()
}
public System.Web.UI.ControlCachePolicy : object {
private BasePartialCachingControl bpcc
private bool cached
public bool Cached
public CacheDependency Dependency
public TimeSpan Duration
public string ProviderName
public bool SupportsCaching
public string VaryByControl
public HttpCacheVaryByParams VaryByParams
internal void .ctor(BasePartialCachingControl bpcc)
public bool get_Cached()
public void set_Cached(bool value)
public CacheDependency get_Dependency()
public void set_Dependency(CacheDependency value)
public TimeSpan get_Duration()
public void set_Duration(TimeSpan value)
public string get_ProviderName()
public void set_ProviderName(string value)
public bool get_SupportsCaching()
public string get_VaryByControl()
public void set_VaryByControl(string value)
public HttpCacheVaryByParams get_VaryByParams()
public void SetExpires(DateTime expirationTime)
public void SetSlidingExpiration(bool useSlidingExpiration)
public void SetVaryByCustom(string varyByCustom)
private void AssertBasePartialCachingControl()
}
public System.Web.UI.ControlCollection : object {
private Control owner
private Control[] controls
private int version
private int count
private bool readOnly
public int Count
public bool IsReadOnly
public bool IsSynchronized
public Control Item
protected Control Owner
public object SyncRoot
public void .ctor(Control owner)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public Control get_Item(int index)
protected Control get_Owner()
public object get_SyncRoot()
private void EnsureControls()
public void Add(Control child)
public void AddAt(int index, Control child)
public void Clear()
public bool Contains(Control c)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public int IndexOf(Control value)
public void Remove(Control value)
public void RemoveAt(int index)
internal void SetReadonly(bool readOnly)
}
public System.Web.UI.ControlSkin : object {
private Type controlType
private ControlSkinDelegate themeDelegate
public Type ControlType
public void .ctor(Type controlType, ControlSkinDelegate themeDelegate)
public void ApplySkin(Control control)
public Type get_ControlType()
}
public System.Web.UI.ControlSkinDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Control Invoke(Control control)
public IAsyncResult BeginInvoke(Control control, AsyncCallback callback, object object)
public Control EndInvoke(IAsyncResult result)
}
public System.Web.UI.ControlValuePropertyAttribute : Attribute {
private string propertyName
private object propertyValue
private Type propertyType
public string Name
public object DefaultValue
public void .ctor(string name)
public void .ctor(string name, object defaultValue)
public void .ctor(string name, Type type, string defaultValue)
public string get_Name()
public object get_DefaultValue()
public bool Equals(object obj)
public int GetHashCode()
}
public System.Web.UI.CssStyleCollection : object {
private StateBag bag
private ListDictionary style
private StringBuilder _value
public int Count
public string Item
public ICollection Keys
public string Item
public string Value
internal void .ctor(StateBag bag)
private void InitFromStyle()
private int ParseStyle(int startIndex)
private void BagToValue()
private void AppendStyle(StringBuilder sb, string key, string value)
public int get_Count()
public string get_Item(string key)
public void set_Item(string key, string value)
public ICollection get_Keys()
public void Add(string key, string value)
public void Add(HtmlTextWriterStyle key, string value)
public void Clear()
public void Remove(string key)
public string get_Item(HtmlTextWriterStyle key)
public void set_Item(HtmlTextWriterStyle key, string value)
public void Remove(HtmlTextWriterStyle key)
public string get_Value()
public void set_Value(string value)
private void SetValueInternal(string value)
}
public System.Web.UI.DataBinder : object {
private Dictionary`2<Type, PropertyInfo> dataItemCache
public bool EnableCaching
internal string FormatResult(object result, string format)
public object Eval(object container, string expression)
public string Eval(object container, string expression, string format)
public object GetIndexedPropertyValue(object container, string expr)
public string GetIndexedPropertyValue(object container, string propName, string format)
public object GetPropertyValue(object container, string propName)
public string GetPropertyValue(object container, string propName, string format)
public object GetDataItem(object container, Boolean& foundDataItem)
public object GetDataItem(object container)
public bool get_EnableCaching()
public void set_EnableCaching(bool value)
public bool IsBindableType(Type type)
}
public System.Web.UI.DataBinding : object {
private string propertyName
private Type propertyType
private string expression
public string Expression
public string PropertyName
public Type PropertyType
public void .ctor(string propertyName, Type propertyType, string expression)
public string get_Expression()
public void set_Expression(string value)
public string get_PropertyName()
public Type get_PropertyType()
public bool Equals(object obj)
public int GetHashCode()
}
internal System.Web.UI.DataBindingBuilder : CodeBuilder {
public void .ctor(string code, ILocation location)
}
public System.Web.UI.DataBindingCollection : object {
private object changedEvent
private Hashtable list
private ArrayList removed
private EventHandlerList events
public int Count
public bool IsReadOnly
public bool IsSynchronized
public DataBinding Item
public String[] RemovedBindings
public object SyncRoot
public void add_Changed(EventHandler value)
public void remove_Changed(EventHandler value)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public DataBinding get_Item(string propertyName)
public String[] get_RemovedBindings()
public object get_SyncRoot()
public void Add(DataBinding binding)
public void Clear()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void Remove(DataBinding binding)
public void Remove(string propertyName)
public void Remove(string propertyName, bool addToRemovedList)
public bool Contains(string propertyName)
internal void RaiseChanged()
}
public System.Web.UI.DataBindingHandlerAttribute : Attribute {
private string _typeName
public DataBindingHandlerAttribute Default
public string HandlerTypeName
public void .ctor(Type type)
public void .ctor(string typeName)
public string get_HandlerTypeName()
public bool Equals(object obj)
public int GetHashCode()
}
public System.Web.UI.DataBoundLiteralControl : Control {
private int staticLiteralsCount
private String[] staticLiterals
private String[] dataBoundLiterals
public string Text
private string System.Web.UI.ITextControl.Text
public void .ctor(int staticLiteralsCount, int dataBoundLiteralCount)
public string get_Text()
protected ControlCollection CreateControlCollection()
protected void LoadViewState(object savedState)
protected internal void Render(HtmlTextWriter output)
protected object SaveViewState()
public void SetDataBoundString(int index, string s)
public void SetStaticString(int index, string s)
private string System.Web.UI.ITextControl.get_Text()
private void System.Web.UI.ITextControl.set_Text(string value)
}
public System.Web.UI.DataKeyPropertyAttribute : Attribute {
private string _name
public string Name
public void .ctor(string name)
public string get_Name()
public bool Equals(object obj)
public int GetHashCode()
}
public System.Web.UI.DataSourceCacheDurationConverter : Int32Converter {
private List`1<int> standardValues
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Web.UI.DataSourceCacheExpiry : Enum {
public int value__
public DataSourceCacheExpiry Absolute
public DataSourceCacheExpiry Sliding
}
public System.Web.UI.DataSourceCapabilities : Enum {
public int value__
public DataSourceCapabilities None
public DataSourceCapabilities Sort
public DataSourceCapabilities Page
public DataSourceCapabilities RetrieveTotalRowCount
}
public System.Web.UI.DataSourceControl : Control {
private object dataSourceChanged
public string ClientID
public ControlCollection Controls
public bool EnableTheming
public string SkinID
private bool System.ComponentModel.IListSource.ContainsListCollection
public bool Visible
public void ApplyStyleSheetSkin(Page page)
protected ControlCollection CreateControlCollection()
public Control FindControl(string id)
public void Focus()
protected DataSourceView GetView(string viewName)
private DataSourceView System.Web.UI.IDataSource.GetView(string viewName)
protected ICollection GetViewNames()
private ICollection System.Web.UI.IDataSource.GetViewNames()
private IList System.ComponentModel.IListSource.GetList()
public bool HasControls()
protected void RaiseDataSourceChangedEvent(EventArgs e)
public void RenderControl(HtmlTextWriter writer)
public string get_ClientID()
public ControlCollection get_Controls()
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
public string get_SkinID()
public void set_SkinID(string value)
private bool System.ComponentModel.IListSource.get_ContainsListCollection()
public bool get_Visible()
public void set_Visible(bool value)
private void System.Web.UI.IDataSource.add_DataSourceChanged(EventHandler value)
private void System.Web.UI.IDataSource.remove_DataSourceChanged(EventHandler value)
}
public System.Web.UI.DataSourceControlBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
}
public System.Web.UI.DataSourceOperation : Enum {
public int value__
public DataSourceOperation Delete
public DataSourceOperation Insert
public DataSourceOperation Select
public DataSourceOperation Update
public DataSourceOperation SelectCount
}
public System.Web.UI.DataSourceSelectArguments : object {
private string sortExpression
private int startingRowIndex
private int maxRows
private bool getTotalRowCount
private int totalRowCount
private DataSourceCapabilities dsc
public DataSourceSelectArguments Empty
private DataSourceCapabilities RequestedCapabilities
public int MaximumRows
public bool RetrieveTotalRowCount
public string SortExpression
public int StartRowIndex
public int TotalRowCount
public DataSourceSelectArguments get_Empty()
public void .ctor(string sortExpression)
public void .ctor(int startRowIndex, int maximumRows)
public void .ctor(string sortExpression, int startRowIndex, int maximumRows)
public void AddSupportedCapabilities(DataSourceCapabilities capabilities)
public bool Equals(object obj)
public int GetHashCode()
public void RaiseUnsupportedCapabilitiesError(DataSourceView view)
private DataSourceCapabilities get_RequestedCapabilities()
public int get_MaximumRows()
public void set_MaximumRows(int value)
public bool get_RetrieveTotalRowCount()
public void set_RetrieveTotalRowCount(bool value)
public string get_SortExpression()
public void set_SortExpression(string value)
public int get_StartRowIndex()
public void set_StartRowIndex(int value)
public int get_TotalRowCount()
public void set_TotalRowCount(int value)
}
public System.Web.UI.DataSourceView : object {
private string viewName
private EventHandlerList eventsList
private object EventDataSourceViewChanged
public bool CanDelete
public bool CanInsert
public bool CanPage
public bool CanRetrieveTotalRowCount
public bool CanSort
public bool CanUpdate
protected EventHandlerList Events
public string Name
protected void .ctor(IDataSource owner, string viewName)
private void OnDataSourceChanged(object sender, EventArgs e)
public void Delete(IDictionary keys, IDictionary oldValues, DataSourceViewOperationCallback callback)
protected int ExecuteDelete(IDictionary keys, IDictionary oldValues)
protected int ExecuteInsert(IDictionary values)
protected internal IEnumerable ExecuteSelect(DataSourceSelectArguments arguments)
protected int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues)
public void Insert(IDictionary values, DataSourceViewOperationCallback callback)
protected void OnDataSourceViewChanged(EventArgs e)
protected internal void RaiseUnsupportedCapabilityError(DataSourceCapabilities capability)
public void Select(DataSourceSelectArguments arguments, DataSourceViewSelectCallback callback)
public void Update(IDictionary keys, IDictionary values, IDictionary oldValues, DataSourceViewOperationCallback callback)
public bool get_CanDelete()
public bool get_CanInsert()
public bool get_CanPage()
public bool get_CanRetrieveTotalRowCount()
public bool get_CanSort()
public bool get_CanUpdate()
protected EventHandlerList get_Events()
internal bool HasEvents()
public string get_Name()
public void add_DataSourceViewChanged(EventHandler value)
public void remove_DataSourceViewChanged(EventHandler value)
public bool CanExecute(string commandName)
public void ExecuteCommand(string commandName, IDictionary keys, IDictionary values, DataSourceViewOperationCallback callback)
}
public System.Web.UI.DataSourceViewOperationCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(int affectedRecords, Exception ex)
public IAsyncResult BeginInvoke(int affectedRecords, Exception ex, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
public System.Web.UI.DataSourceViewSelectCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IEnumerable data)
public IAsyncResult BeginInvoke(IEnumerable data, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.DesignerDataBoundLiteralControl : Control {
private string text
public string Text
public string get_Text()
public void set_Text(string value)
protected ControlCollection CreateControlCollection()
protected void LoadViewState(object savedState)
protected internal void Render(HtmlTextWriter output)
protected object SaveViewState()
}
public System.Web.UI.DesignTimeParseData : object {
private EventHandler db_handler
private string text
private IDesignerHost host
private string durl
private string filter
private bool theme
private ICollection collection
public EventHandler DataBindingHandler
public IDesignerHost DesignerHost
public string DocumentUrl
public string ParseText
public string Filter
public bool ShouldApplyTheme
public ICollection UserControlRegisterEntries
public void .ctor(IDesignerHost designerHost, string parseText)
public void .ctor(IDesignerHost designerHost, string parseText, string filter)
internal void SetCollection(ICollection collection)
public EventHandler get_DataBindingHandler()
public void set_DataBindingHandler(EventHandler value)
public IDesignerHost get_DesignerHost()
public string get_DocumentUrl()
public void set_DocumentUrl(string value)
public string get_ParseText()
public string get_Filter()
public bool get_ShouldApplyTheme()
public void set_ShouldApplyTheme(bool value)
public ICollection get_UserControlRegisterEntries()
}
public System.Web.UI.DesignTimeTemplateParser : object {
public Control ParseControl(DesignTimeParseData data)
public ITemplate ParseTemplate(DesignTimeParseData data)
private TemplateParser InitParser(DesignTimeParseData data)
public Control[] ParseControls(DesignTimeParseData data)
public ControlBuilder ParseTheme(IDesignerHost host, string theme, string themePath)
}
public System.Web.UI.EmptyControlCollection : ControlCollection {
public void .ctor(Control owner)
private void ThrowNotSupportedException()
public void Add(Control child)
public void AddAt(int index, Control child)
}
public System.Web.UI.EventEntry : object {
private Type _handlerType
private string _handlerMethodName
private string _name
public string HandlerMethodName
public Type HandlerType
public string Name
public string get_HandlerMethodName()
public void set_HandlerMethodName(string value)
public Type get_HandlerType()
public void set_HandlerType(Type value)
public string get_Name()
public void set_Name(string value)
}
public System.Web.UI.ExpressionBinding : object {
private string propertyName
private Type propertyType
private string expression
private string prefix
private bool generated
public string Expression
public string ExpressionPrefix
public bool Generated
public string PropertyName
public Type PropertyType
public object ParsedExpressionData
public void .ctor(string propertyName, Type propertyType, string expressionPrefix, string expression)
public string get_Expression()
public void set_Expression(string value)
public string get_ExpressionPrefix()
public void set_ExpressionPrefix(string value)
public bool get_Generated()
public string get_PropertyName()
public Type get_PropertyType()
public bool Equals(object obj)
public int GetHashCode()
public object get_ParsedExpressionData()
}
public System.Web.UI.ExpressionBindingCollection : object {
private object changedEvent
private Hashtable list
private ArrayList removed
private EventHandlerList events
public int Count
public bool IsReadOnly
public bool IsSynchronized
public ExpressionBinding Item
public ICollection RemovedBindings
public object SyncRoot
public void add_Changed(EventHandler value)
public void remove_Changed(EventHandler value)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public ExpressionBinding get_Item(string propertyName)
public ICollection get_RemovedBindings()
public object get_SyncRoot()
public void Add(ExpressionBinding binding)
public void Clear()
public bool Contains(string propName)
public void CopyTo(Array array, int index)
public void CopyTo(ExpressionBinding[] array, int index)
public IEnumerator GetEnumerator()
public void Remove(ExpressionBinding binding)
public void Remove(string propertyName)
public void Remove(string propertyName, bool addToRemovedList)
private void OnChanged(EventArgs e)
}
public System.Web.UI.ExtractTemplateValuesMethod : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public IOrderedDictionary Invoke(Control control)
public IAsyncResult BeginInvoke(Control control, AsyncCallback callback, object object)
public IOrderedDictionary EndInvoke(IAsyncResult result)
}
public System.Web.UI.FileLevelControlBuilderAttribute : Attribute {
public FileLevelControlBuilderAttribute Default
private Type builderType
public Type BuilderType
public void .ctor(Type builderType)
public Type get_BuilderType()
public int GetHashCode()
public bool Equals(object obj)
public bool IsDefaultAttribute()
}
public System.Web.UI.FileLevelPageControlBuilder : RootBuilder {
private bool hasContentControls
private bool hasLiteralControls
private bool hasOtherControls
public void AppendLiteralString(string text)
public void AppendSubBuilder(ControlBuilder subBuilder)
}
public System.Web.UI.FilterableAttribute : Attribute {
public FilterableAttribute Yes
public FilterableAttribute No
public FilterableAttribute Default
private bool _filterable
private Hashtable _filterableTypes
public bool Filterable
public void .ctor(bool filterable)
public bool get_Filterable()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
public bool IsObjectFilterable(object instance)
public bool IsPropertyFilterable(PropertyDescriptor propertyDescriptor)
public bool IsTypeFilterable(Type type)
}
public System.Web.UI.HiddenFieldPageStatePersister : PageStatePersister {
public void .ctor(Page page)
public void Load()
public void Save()
}
public System.Web.UI.HierarchicalDataSourceControl : Control {
private object dataSourceChanged
public bool EnableTheming
public string SkinID
public bool Visible
protected HierarchicalDataSourceView GetHierarchicalView(string viewPath)
private HierarchicalDataSourceView System.Web.UI.IHierarchicalDataSource.GetHierarchicalView(string viewPath)
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
public string get_SkinID()
public void set_SkinID(string value)
public bool get_Visible()
public void set_Visible(bool value)
protected ControlCollection CreateControlCollection()
public Control FindControl(string id)
public bool HasControls()
public void Focus()
private void System.Web.UI.IHierarchicalDataSource.add_DataSourceChanged(EventHandler value)
private void System.Web.UI.IHierarchicalDataSource.remove_DataSourceChanged(EventHandler value)
protected void OnDataSourceChanged(EventArgs e)
public void RenderControl(HtmlTextWriter writer)
}
public System.Web.UI.HierarchicalDataSourceView : object {
public IHierarchicalEnumerable Select()
}
public System.Web.UI.Html32TextWriter : HtmlTextWriter {
private bool div_table_substitution
private bool bold
private bool italic
public bool ShouldPerformDivTableSubstitution
public bool SupportsBold
public bool SupportsItalic
protected Stack FontStack
public void .ctor(TextWriter writer)
public void .ctor(TextWriter writer, string tabString)
public bool get_ShouldPerformDivTableSubstitution()
public void set_ShouldPerformDivTableSubstitution(bool value)
public bool get_SupportsBold()
public void set_SupportsBold(bool value)
public bool get_SupportsItalic()
public void set_SupportsItalic(bool value)
public void RenderBeginTag(HtmlTextWriterTag tagKey)
public void RenderEndTag()
protected string GetTagName(HtmlTextWriterTag tagKey)
protected bool OnStyleAttributeRender(string name, string value, HtmlTextWriterStyle key)
protected bool OnTagRender(string name, HtmlTextWriterTag key)
protected string RenderAfterContent()
protected string RenderAfterTag()
protected string RenderBeforeContent()
protected string RenderBeforeTag()
protected Stack get_FontStack()
}
internal System.Web.UI.HtmlControlPersistableAttribute : Attribute {
private bool persist
public bool Persist
public void .ctor(bool persist)
public bool get_Persist()
}
public System.Web.UI.HtmlControls.HtmlAnchor : HtmlContainerControl {
private object serverClickEvent
public string HRef
public string Name
public string Target
public string Title
public bool CausesValidation
public string ValidationGroup
public string get_HRef()
public void set_HRef(string value)
public string get_Name()
public void set_Name(string value)
public string get_Target()
public void set_Target(string value)
public string get_Title()
public void set_Title(string value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
protected internal void OnPreRender(EventArgs e)
protected void OnServerClick(EventArgs e)
protected void RenderAttributes(HtmlTextWriter writer)
protected void RaisePostBackEvent(string eventArgument)
private PostBackOptions GetPostBackOptions()
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
public void add_ServerClick(EventHandler value)
public void remove_ServerClick(EventHandler value)
}
public System.Web.UI.HtmlControls.HtmlArea : HtmlControl {
public string Href
public string get_Href()
public void set_Href(string value)
}
public System.Web.UI.HtmlControls.HtmlAudio : HtmlContainerControl {
public string Src
public string get_Src()
public void set_Src(string value)
}
public System.Web.UI.HtmlControls.HtmlButton : HtmlContainerControl {
private object ServerClickEvent
public bool CausesValidation
public string ValidationGroup
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected void RaisePostBackEvent(string eventArgument)
protected internal void OnPreRender(EventArgs e)
protected void OnServerClick(EventArgs e)
protected void RenderAttributes(HtmlTextWriter writer)
private PostBackOptions GetPostBackOptions()
public void add_ServerClick(EventHandler value)
public void remove_ServerClick(EventHandler value)
}
public System.Web.UI.HtmlControls.HtmlContainerControl : HtmlControl {
public string InnerHtml
public string InnerText
public void .ctor(string tag)
public string get_InnerHtml()
public void set_InnerHtml(string value)
public string get_InnerText()
public void set_InnerText(string value)
protected internal void Render(HtmlTextWriter writer)
protected void RenderEndTag(HtmlTextWriter writer)
protected void RenderAttributes(HtmlTextWriter writer)
protected ControlCollection CreateControlCollection()
protected void LoadViewState(object savedState)
}
public System.Web.UI.HtmlControls.HtmlControl : Control {
internal string _tagName
private AttributeCollection _attributes
public AttributeCollection Attributes
public bool Disabled
public CssStyleCollection Style
public string TagName
protected bool ViewStateIgnoresCase
protected void .ctor(string tag)
protected ControlCollection CreateControlCollection()
internal string AttributeToString(int n)
internal string AttributeToString(string s)
internal void PreProcessRelativeReference(HtmlTextWriter writer, string attribName)
protected string GetAttribute(string name)
protected void SetAttribute(string name, string value)
private string System.Web.UI.IAttributeAccessor.GetAttribute(string name)
private void System.Web.UI.IAttributeAccessor.SetAttribute(string name, string value)
protected void RenderBeginTag(HtmlTextWriter writer)
protected internal void Render(HtmlTextWriter writer)
protected void RenderAttributes(HtmlTextWriter writer)
public AttributeCollection get_Attributes()
public bool get_Disabled()
public void set_Disabled(bool value)
public CssStyleCollection get_Style()
public string get_TagName()
protected bool get_ViewStateIgnoresCase()
}
internal System.Web.UI.HtmlControls.HtmlControlBuilder : ControlBuilder {
public bool HasBody()
}
public System.Web.UI.HtmlControls.HtmlElement : HtmlContainerControl {
public string Manifest
public string get_Manifest()
public void set_Manifest(string value)
}
public System.Web.UI.HtmlControls.HtmlEmbed : HtmlContainerControl {
public string Src
public string get_Src()
public void set_Src(string value)
}
public System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder : ControlBuilder {
public bool HasBody()
}
public System.Web.UI.HtmlControls.HtmlForm : HtmlContainerControl {
private bool inited
private string _defaultfocus
private string _defaultbutton
private bool submitdisabledcontrols
private Nullable`1<bool> isUplevel
public string Action
public string DefaultButton
public string DefaultFocus
public string Enctype
public string Method
public string Name
public bool SubmitDisabledControls
public string Target
public string UniqueID
public string get_Action()
public void set_Action(string value)
public string get_DefaultButton()
public void set_DefaultButton(string value)
public string get_DefaultFocus()
public void set_DefaultFocus(string value)
public string get_Enctype()
public void set_Enctype(string value)
public string get_Method()
public void set_Method(string value)
public string get_Name()
public void set_Name(string value)
public bool get_SubmitDisabledControls()
public void set_SubmitDisabledControls(bool value)
public string get_Target()
public void set_Target(string value)
public string get_UniqueID()
protected ControlCollection CreateControlCollection()
protected internal void OnInit(EventArgs e)
internal bool DetermineRenderUplevel()
protected internal void OnPreRender(EventArgs e)
protected void RenderAttributes(HtmlTextWriter writer)
protected internal void RenderChildren(HtmlTextWriter writer)
public void RenderControl(HtmlTextWriter writer)
protected internal void Render(HtmlTextWriter output)
}
public System.Web.UI.HtmlControls.HtmlGenericControl : HtmlContainerControl {
public string TagName
public void .ctor(string tag)
public string get_TagName()
public void set_TagName(string value)
}
public System.Web.UI.HtmlControls.HtmlHead : HtmlGenericControl {
private string descriptionText
private string keywordsText
private HtmlMeta descriptionMeta
private HtmlMeta keywordsMeta
private string titleText
private HtmlTitle title
private StyleSheetBag styleSheet
public string Description
public string Keywords
public IStyleSheet StyleSheet
public string Title
public void .ctor(string tag)
protected internal void OnInit(EventArgs e)
protected internal void RenderChildren(HtmlTextWriter writer)
protected internal void AddedControl(Control control, int index)
protected internal void RemovedControl(Control control)
public string get_Description()
public void set_Description(string value)
public string get_Keywords()
public void set_Keywords(string value)
public IStyleSheet get_StyleSheet()
public string get_Title()
public void set_Title(string value)
}
public System.Web.UI.HtmlControls.HtmlHeadBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
public Type GetChildControlType(string tagName, IDictionary attribs)
}
public System.Web.UI.HtmlControls.HtmlIframe : HtmlContainerControl {
public string Src
public string get_Src()
public void set_Src(string value)
}
public System.Web.UI.HtmlControls.HtmlImage : HtmlControl {
public string Align
public string Alt
public int Border
public int Height
public string Src
public int Width
public string get_Align()
public void set_Align(string value)
public string get_Alt()
public void set_Alt(string value)
public int get_Border()
public void set_Border(int value)
public int get_Height()
public void set_Height(int value)
public string get_Src()
public void set_Src(string value)
public int get_Width()
public void set_Width(int value)
protected void RenderAttributes(HtmlTextWriter writer)
}
public System.Web.UI.HtmlControls.HtmlInputButton : HtmlInputControl {
private object ServerClickEvent
public bool CausesValidation
public string ValidationGroup
public void .ctor(string type)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
private void RaisePostBackEventInternal(string eventArgument)
private HtmlForm FindForm()
private void ResetForm(HtmlForm form)
private void ResetChildrenValues(ControlCollection children)
private void ResetChildValue(Control child)
protected void RaisePostBackEvent(string eventArgument)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected internal void OnPreRender(EventArgs e)
protected void OnServerClick(EventArgs e)
protected void RenderAttributes(HtmlTextWriter writer)
private PostBackOptions GetPostBackOptions()
public void add_ServerClick(EventHandler value)
public void remove_ServerClick(EventHandler value)
}
public System.Web.UI.HtmlControls.HtmlInputCheckBox : HtmlInputControl {
private object EventServerChange
public bool Checked
public bool get_Checked()
public void set_Checked(bool value)
public void add_ServerChange(EventHandler value)
public void remove_ServerChange(EventHandler value)
protected void RenderAttributes(HtmlTextWriter writer)
protected internal void OnPreRender(EventArgs e)
protected void OnServerChange(EventArgs e)
private bool LoadPostDataInternal(string postDataKey, NameValueCollection postCollection)
private void RaisePostDataChangedEventInternal()
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
}
public System.Web.UI.HtmlControls.HtmlInputControl : HtmlControl {
public string Name
public string Type
public string Value
protected void .ctor(string type)
public string get_Name()
public void set_Name(string value)
public string get_Type()
public string get_Value()
public void set_Value(string value)
protected void RenderAttributes(HtmlTextWriter writer)
}
public System.Web.UI.HtmlControls.HtmlInputFile : HtmlInputControl {
private HttpPostedFile posted_file
public string Accept
public int MaxLength
public HttpPostedFile PostedFile
public int Size
public string Value
public string get_Accept()
public void set_Accept(string value)
public int get_MaxLength()
public void set_MaxLength(int value)
public HttpPostedFile get_PostedFile()
public int get_Size()
public void set_Size(int value)
public string get_Value()
public void set_Value(string value)
protected internal void OnPreRender(EventArgs e)
private Control SearchParentByType(Type type)
private bool LoadPostDataInternal(string postDataKey, NameValueCollection postCollection)
private void RaisePostDataChangedEventInternal()
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
}
public System.Web.UI.HtmlControls.HtmlInputGenericControl : HtmlInputControl {
public void .ctor(string type)
public void add_ServerChange(EventHandler value)
public void remove_ServerChange(EventHandler value)
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
}
public System.Web.UI.HtmlControls.HtmlInputHidden : HtmlInputControl {
private object ServerChangeEvent
private bool LoadPostDataInternal(string postDataKey, NameValueCollection postCollection)
private void RaisePostDataChangedEventInternal()
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
protected void RenderAttributes(HtmlTextWriter writer)
protected internal void OnPreRender(EventArgs e)
protected void OnServerChange(EventArgs e)
public void add_ServerChange(EventHandler value)
public void remove_ServerChange(EventHandler value)
}
public System.Web.UI.HtmlControls.HtmlInputImage : HtmlInputControl {
private object ServerClickEvent
private int clicked_x
private int clicked_y
public bool CausesValidation
public string Align
public string Alt
public string Src
public int Border
public string ValidationGroup
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_Align()
public void set_Align(string value)
public string get_Alt()
public void set_Alt(string value)
public string get_Src()
public void set_Src(string value)
public int get_Border()
public void set_Border(int value)
private bool LoadPostDataInternal(string postDataKey, NameValueCollection postCollection)
private void RaisePostBackEventInternal(string eventArgument)
private void RaisePostDataChangedEventInternal()
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostBackEvent(string eventArgument)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected internal void OnPreRender(EventArgs e)
protected void OnServerClick(ImageClickEventArgs e)
protected void RenderAttributes(HtmlTextWriter writer)
private void SetAtt(string name, string value)
private string GetAtt(string name)
public void add_ServerClick(ImageClickEventHandler value)
public void remove_ServerClick(ImageClickEventHandler value)
}
public System.Web.UI.HtmlControls.HtmlInputPassword : HtmlInputText {
protected void RenderAttributes(HtmlTextWriter writer)
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
}
public System.Web.UI.HtmlControls.HtmlInputRadioButton : HtmlInputControl {
private object serverChangeEvent
public bool Checked
public string Name
public string Value
public bool get_Checked()
public void set_Checked(bool value)
public string get_Name()
public void set_Name(string value)
public string get_Value()
public void set_Value(string value)
protected internal void OnPreRender(EventArgs e)
protected void OnServerChange(EventArgs e)
protected void RenderAttributes(HtmlTextWriter writer)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
public void add_ServerChange(EventHandler value)
public void remove_ServerChange(EventHandler value)
}
public System.Web.UI.HtmlControls.HtmlInputReset : HtmlInputButton {
private object ServerClickEvent
public bool CausesValidation
public string ValidationGroup
public void .ctor(string type)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
public void add_ServerClick(EventHandler value)
public void remove_ServerClick(EventHandler value)
}
public System.Web.UI.HtmlControls.HtmlInputSubmit : HtmlInputButton {
public void .ctor(string type)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
}
public System.Web.UI.HtmlControls.HtmlInputText : HtmlInputControl {
private object serverChangeEvent
public int MaxLength
public int Size
public string Value
public void .ctor(string type)
public int get_MaxLength()
public void set_MaxLength(int value)
public int get_Size()
public void set_Size(int value)
public string get_Value()
public void set_Value(string value)
protected internal void Render(HtmlTextWriter writer)
protected internal void OnPreRender(EventArgs e)
protected void OnServerChange(EventArgs e)
protected void RenderAttributes(HtmlTextWriter writer)
private bool LoadPostDataInternal(string postDataKey, NameValueCollection postCollection)
private void RaisePostDataChangedEventInternal()
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
public void add_ServerChange(EventHandler value)
public void remove_ServerChange(EventHandler value)
}
public System.Web.UI.HtmlControls.HtmlLink : HtmlControl {
public string Href
public string get_Href()
public void set_Href(string value)
protected internal void Render(HtmlTextWriter writer)
protected void RenderAttributes(HtmlTextWriter writer)
}
public System.Web.UI.HtmlControls.HtmlMeta : HtmlControl {
public string Content
public string HttpEquiv
public string Name
public string Scheme
public string get_Content()
public void set_Content(string value)
public string get_HttpEquiv()
public void set_HttpEquiv(string value)
public string get_Name()
public void set_Name(string value)
public string get_Scheme()
public void set_Scheme(string value)
protected internal void Render(HtmlTextWriter writer)
}
public System.Web.UI.HtmlControls.HtmlSelect : HtmlContainerControl {
private object EventServerChange
private DataSourceView _boundDataSourceView
private bool requiresDataBinding
private bool _initialized
private object datasource
private ListItemCollection items
public string DataMember
public object DataSource
public string DataSourceID
public string DataTextField
public string DataValueField
public string InnerHtml
public string InnerText
protected bool IsBoundUsingDataSourceID
public ListItemCollection Items
public bool Multiple
public string Name
protected bool RequiresDataBinding
public int SelectedIndex
protected Int32[] SelectedIndices
public int Size
public string Value
private bool IsDataBound
public string get_DataMember()
public void set_DataMember(string value)
public object get_DataSource()
public void set_DataSource(object value)
public string get_DataSourceID()
public void set_DataSourceID(string value)
public string get_DataTextField()
public void set_DataTextField(string value)
public string get_DataValueField()
public void set_DataValueField(string value)
public string get_InnerHtml()
public void set_InnerHtml(string value)
public string get_InnerText()
public void set_InnerText(string value)
protected bool get_IsBoundUsingDataSourceID()
public ListItemCollection get_Items()
public bool get_Multiple()
public void set_Multiple(bool value)
public string get_Name()
public void set_Name(string value)
protected bool get_RequiresDataBinding()
protected void set_RequiresDataBinding(bool value)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
protected Int32[] get_SelectedIndices()
public int get_Size()
public void set_Size(int value)
public string get_Value()
public void set_Value(string value)
public void add_ServerChange(EventHandler value)
public void remove_ServerChange(EventHandler value)
protected void AddParsedSubObject(object obj)
protected void ClearSelection()
protected ControlCollection CreateControlCollection()
protected void EnsureDataBound()
protected IEnumerable GetData()
protected void LoadViewState(object savedState)
protected void OnDataBinding(EventArgs e)
protected void OnDataPropertyChanged()
protected void OnDataSourceViewChanged(object sender, EventArgs e)
protected internal void OnInit(EventArgs e)
protected void OnPagePreLoad(object sender, EventArgs e)
protected internal void OnLoad(EventArgs e)
private void Initialize()
private bool get_IsDataBound()
private void set_IsDataBound(bool value)
private DataSourceView ConnectToDataSource()
protected internal void OnPreRender(EventArgs e)
protected void OnServerChange(EventArgs e)
protected void RenderAttributes(HtmlTextWriter writer)
protected internal void RenderChildren(HtmlTextWriter writer)
protected object SaveViewState()
protected void Select(Int32[] selectedIndices)
protected void TrackViewState()
protected void RaisePostDataChangedEvent()
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
}
public System.Web.UI.HtmlControls.HtmlSelectBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
public Type GetChildControlType(string tagName, IDictionary attribs)
}
public System.Web.UI.HtmlControls.HtmlSource : HtmlControl {
public string Src
public string get_Src()
public void set_Src(string value)
}
public System.Web.UI.HtmlControls.HtmlTable : HtmlContainerControl {
private HtmlTableRowCollection _rows
public string Align
public string BgColor
public int Border
public string BorderColor
public int CellPadding
public int CellSpacing
public string Height
public string InnerHtml
public string InnerText
public HtmlTableRowCollection Rows
public string Width
public string get_Align()
public void set_Align(string value)
public string get_BgColor()
public void set_BgColor(string value)
public int get_Border()
public void set_Border(int value)
public string get_BorderColor()
public void set_BorderColor(string value)
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public string get_Height()
public void set_Height(string value)
public string get_InnerHtml()
public void set_InnerHtml(string value)
public string get_InnerText()
public void set_InnerText(string value)
public HtmlTableRowCollection get_Rows()
public string get_Width()
public void set_Width(string value)
protected ControlCollection CreateControlCollection()
protected internal void RenderChildren(HtmlTextWriter writer)
protected void RenderEndTag(HtmlTextWriter writer)
}
public System.Web.UI.HtmlControls.HtmlTableCell : HtmlContainerControl {
public string Align
public string BgColor
public string BorderColor
public int ColSpan
public string Height
public bool NoWrap
public int RowSpan
public string VAlign
public string Width
public void .ctor(string tagName)
public string get_Align()
public void set_Align(string value)
public string get_BgColor()
public void set_BgColor(string value)
public string get_BorderColor()
public void set_BorderColor(string value)
public int get_ColSpan()
public void set_ColSpan(int value)
public string get_Height()
public void set_Height(string value)
public bool get_NoWrap()
public void set_NoWrap(bool value)
public int get_RowSpan()
public void set_RowSpan(int value)
public string get_VAlign()
public void set_VAlign(string value)
public string get_Width()
public void set_Width(string value)
protected void RenderEndTag(HtmlTextWriter writer)
}
public System.Web.UI.HtmlControls.HtmlTableCellCollection : object {
private ControlCollection cc
public int Count
public bool IsReadOnly
public bool IsSynchronized
public HtmlTableCell Item
public object SyncRoot
internal void .ctor(HtmlTableRow tr)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public HtmlTableCell get_Item(int index)
public object get_SyncRoot()
public void Add(HtmlTableCell cell)
public void Clear()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void Insert(int index, HtmlTableCell cell)
public void Remove(HtmlTableCell cell)
public void RemoveAt(int index)
}
public System.Web.UI.HtmlControls.HtmlTableRow : HtmlContainerControl {
private HtmlTableCellCollection _cells
public string Align
public string BgColor
public string BorderColor
public HtmlTableCellCollection Cells
public string Height
public string InnerHtml
public string InnerText
public string VAlign
private int Count
public string get_Align()
public void set_Align(string value)
public string get_BgColor()
public void set_BgColor(string value)
public string get_BorderColor()
public void set_BorderColor(string value)
public HtmlTableCellCollection get_Cells()
public string get_Height()
public void set_Height(string value)
public string get_InnerHtml()
public void set_InnerHtml(string value)
public string get_InnerText()
public void set_InnerText(string value)
public string get_VAlign()
public void set_VAlign(string value)
private int get_Count()
protected ControlCollection CreateControlCollection()
protected internal void RenderChildren(HtmlTextWriter writer)
protected void RenderEndTag(HtmlTextWriter writer)
}
public System.Web.UI.HtmlControls.HtmlTableRowCollection : object {
private ControlCollection cc
public int Count
public bool IsReadOnly
public bool IsSynchronized
public HtmlTableRow Item
public object SyncRoot
internal void .ctor(HtmlTable table)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public HtmlTableRow get_Item(int index)
public object get_SyncRoot()
public void Add(HtmlTableRow row)
public void Clear()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void Insert(int index, HtmlTableRow row)
public void Remove(HtmlTableRow row)
public void RemoveAt(int index)
}
public System.Web.UI.HtmlControls.HtmlTextArea : HtmlContainerControl {
private object serverChangeEvent
public int Cols
public string Name
public int Rows
public string Value
public int get_Cols()
public void set_Cols(int value)
public string get_Name()
public void set_Name(string value)
public int get_Rows()
public void set_Rows(int value)
public string get_Value()
public void set_Value(string value)
protected void AddParsedSubObject(object obj)
protected internal void OnPreRender(EventArgs e)
protected void OnServerChange(EventArgs e)
protected void RenderAttributes(HtmlTextWriter writer)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
internal bool DefaultLoadPostData(string postDataKey, NameValueCollection postCollection)
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
public void add_ServerChange(EventHandler value)
public void remove_ServerChange(EventHandler value)
}
public System.Web.UI.HtmlControls.HtmlTitle : HtmlControl {
private string text
public string Text
protected void AddParsedSubObject(object obj)
protected ControlCollection CreateControlCollection()
public string get_Text()
public void set_Text(string value)
protected internal void Render(HtmlTextWriter writer)
}
public System.Web.UI.HtmlControls.HtmlTrack : HtmlControl {
public string Src
public string get_Src()
public void set_Src(string value)
}
public System.Web.UI.HtmlControls.HtmlVideo : HtmlContainerControl {
public string Poster
public string Src
public string get_Poster()
public void set_Poster(string value)
public string get_Src()
public void set_Src(string value)
}
internal System.Web.UI.HtmlControls.StyleSheetBag : object {
private ArrayList entries
public void CreateStyleRule(Style style, IUrlResolutionService urlResolver, string selection)
public void RegisterStyle(Style style, IUrlResolutionService urlResolver)
public void Render(HtmlTextWriter writer)
}
public System.Web.UI.HtmlTextWriter : TextWriter {
private Hashtable _tagTable
private Hashtable _attributeTable
private Hashtable _styleTable
private int indent
private TextWriter b
private string tab_string
private bool newline
private AddedStyle[] styles
private AddedAttr[] attrs
private AddedTag[] tagstack
private int styles_pos
private int attrs_pos
private int tagstack_pos
public string DefaultTabString
public char DoubleQuoteChar
public string EndTagLeftChars
public char EqualsChar
public string EqualsDoubleQuoteString
public string SelfClosingChars
public string SelfClosingTagEnd
public char SemicolonChar
public char SingleQuoteChar
public char SlashChar
public char SpaceChar
public char StyleEqualsChar
public char TagLeftChar
public char TagRightChar
private HtmlTag[] tags
private HtmlAttribute[] htmlattrs
private HtmlStyle[] htmlstyles
public Encoding Encoding
public int Indent
public TextWriter InnerWriter
public string NewLine
protected HtmlTextWriterTag TagKey
protected string TagName
private bool TagIgnore
public void .ctor(TextWriter writer)
public void .ctor(TextWriter writer, string tabString)
internal string StaticGetStyleName(HtmlTextWriterStyle styleKey)
protected void RegisterAttribute(string name, HtmlTextWriterAttribute key)
protected void RegisterStyle(string name, HtmlTextWriterStyle key)
protected void RegisterTag(string name, HtmlTextWriterTag key)
public void AddAttribute(HtmlTextWriterAttribute key, string value, bool fEncode)
public void AddAttribute(HtmlTextWriterAttribute key, string value)
public void AddAttribute(string name, string value, bool fEndode)
public void AddAttribute(string name, string value)
protected void AddAttribute(string name, string value, HtmlTextWriterAttribute key)
protected void AddStyleAttribute(string name, string value, HtmlTextWriterStyle key)
public void AddStyleAttribute(string name, string value)
public void AddStyleAttribute(HtmlTextWriterStyle key, string value)
public void Close()
protected string EncodeAttributeValue(HtmlTextWriterAttribute attrKey, string value)
protected string EncodeAttributeValue(string value, bool fEncode)
protected string EncodeUrl(string url)
protected void FilterAttributes()
public void Flush()
protected HtmlTextWriterAttribute GetAttributeKey(string attrName)
protected string GetAttributeName(HtmlTextWriterAttribute attrKey)
protected HtmlTextWriterStyle GetStyleKey(string styleName)
protected string GetStyleName(HtmlTextWriterStyle styleKey)
protected HtmlTextWriterTag GetTagKey(string tagName)
internal string StaticGetTagName(HtmlTextWriterTag tagKey)
protected string GetTagName(HtmlTextWriterTag tagKey)
protected bool IsAttributeDefined(HtmlTextWriterAttribute key)
protected bool IsAttributeDefined(HtmlTextWriterAttribute key, String& value)
protected bool IsStyleAttributeDefined(HtmlTextWriterStyle key)
protected bool IsStyleAttributeDefined(HtmlTextWriterStyle key, String& value)
protected bool OnAttributeRender(string name, string value, HtmlTextWriterAttribute key)
protected bool OnStyleAttributeRender(string name, string value, HtmlTextWriterStyle key)
protected bool OnTagRender(string name, HtmlTextWriterTag key)
protected void OutputTabs()
protected string PopEndTag()
protected void PushEndTag(string endTag)
private void PushEndTag(HtmlTextWriterTag t)
protected string RenderAfterContent()
protected string RenderAfterTag()
protected string RenderBeforeContent()
protected string RenderBeforeTag()
public void RenderBeginTag(string tagName)
public void RenderBeginTag(HtmlTextWriterTag tagKey)
private void WriteIfNotNull(string s)
private void DoBeginTag()
public void RenderEndTag()
public void WriteAttribute(string name, string value, bool fEncode)
public void WriteBeginTag(string tagName)
public void WriteEndTag(string tagName)
public void WriteFullBeginTag(string tagName)
public void WriteStyleAttribute(string name, string value)
public void WriteStyleAttribute(string name, string value, bool fEncode)
public void Write(Char[] buffer, int index, int count)
public void Write(double value)
public void Write(char value)
public void Write(Char[] buffer)
public void Write(int value)
public void Write(string format, object arg0)
public void Write(string format, object arg0, object arg1)
public void Write(string format, Object[] arg)
public void Write(string s)
public void Write(long value)
public void Write(object value)
public void Write(float value)
public void Write(bool value)
public void WriteAttribute(string name, string value)
public void WriteLine(char value)
public void WriteLine(long value)
public void WriteLine(object value)
public void WriteLine(double value)
public void WriteLine(Char[] buffer, int index, int count)
public void WriteLine(Char[] buffer)
public void WriteLine(bool value)
public void WriteLine()
public void WriteLine(int value)
public void WriteLine(string format, object arg0, object arg1)
public void WriteLine(string format, object arg0)
public void WriteLine(string format, Object[] arg)
public void WriteLine(UInt32 value)
public void WriteLine(string s)
public void WriteLine(float value)
public void WriteLineNoTabs(string s)
public Encoding get_Encoding()
public int get_Indent()
public void set_Indent(int value)
public TextWriter get_InnerWriter()
public void set_InnerWriter(TextWriter value)
public string get_NewLine()
public void set_NewLine(string value)
protected HtmlTextWriterTag get_TagKey()
protected void set_TagKey(HtmlTextWriterTag value)
protected string get_TagName()
protected void set_TagName(string value)
private bool get_TagIgnore()
private void set_TagIgnore(bool value)
internal HttpWriter GetHttpWriter()
private void NextStyleStack()
private void NextAttrStack()
private void NextTagStack()
public bool IsValidFormAttribute(string attribute)
public void WriteBreak()
public void WriteEncodedText(string text)
public void WriteEncodedUrl(string url)
public void WriteEncodedUrlParameter(string urlText)
protected void WriteUrlEncodedString(string text, bool argument)
public void EnterStyle(Style style)
public void EnterStyle(Style style, HtmlTextWriterTag tag)
public void ExitStyle(Style style)
public void ExitStyle(Style style, HtmlTextWriterTag tag)
public void BeginRender()
public void EndRender()
}
public System.Web.UI.HtmlTextWriterAttribute : Enum {
public int value__
public HtmlTextWriterAttribute Accesskey
public HtmlTextWriterAttribute Align
public HtmlTextWriterAttribute Alt
public HtmlTextWriterAttribute Background
public HtmlTextWriterAttribute Bgcolor
public HtmlTextWriterAttribute Border
public HtmlTextWriterAttribute Bordercolor
public HtmlTextWriterAttribute Cellpadding
public HtmlTextWriterAttribute Cellspacing
public HtmlTextWriterAttribute Checked
public HtmlTextWriterAttribute Class
public HtmlTextWriterAttribute Cols
public HtmlTextWriterAttribute Colspan
public HtmlTextWriterAttribute Disabled
public HtmlTextWriterAttribute For
public HtmlTextWriterAttribute Height
public HtmlTextWriterAttribute Href
public HtmlTextWriterAttribute Id
public HtmlTextWriterAttribute Maxlength
public HtmlTextWriterAttribute Multiple
public HtmlTextWriterAttribute Name
public HtmlTextWriterAttribute Nowrap
public HtmlTextWriterAttribute Onchange
public HtmlTextWriterAttribute Onclick
public HtmlTextWriterAttribute ReadOnly
public HtmlTextWriterAttribute Rows
public HtmlTextWriterAttribute Rowspan
public HtmlTextWriterAttribute Rules
public HtmlTextWriterAttribute Selected
public HtmlTextWriterAttribute Size
public HtmlTextWriterAttribute Src
public HtmlTextWriterAttribute Style
public HtmlTextWriterAttribute Tabindex
public HtmlTextWriterAttribute Target
public HtmlTextWriterAttribute Title
public HtmlTextWriterAttribute Type
public HtmlTextWriterAttribute Valign
public HtmlTextWriterAttribute Value
public HtmlTextWriterAttribute Width
public HtmlTextWriterAttribute Wrap
public HtmlTextWriterAttribute Abbr
public HtmlTextWriterAttribute AutoComplete
public HtmlTextWriterAttribute Axis
public HtmlTextWriterAttribute Content
public HtmlTextWriterAttribute Coords
public HtmlTextWriterAttribute DesignerRegion
public HtmlTextWriterAttribute Dir
public HtmlTextWriterAttribute Headers
public HtmlTextWriterAttribute Longdesc
public HtmlTextWriterAttribute Rel
public HtmlTextWriterAttribute Scope
public HtmlTextWriterAttribute Shape
public HtmlTextWriterAttribute Usemap
public HtmlTextWriterAttribute VCardName
}
public System.Web.UI.HtmlTextWriterStyle : Enum {
public int value__
public HtmlTextWriterStyle BackgroundColor
public HtmlTextWriterStyle BackgroundImage
public HtmlTextWriterStyle BorderCollapse
public HtmlTextWriterStyle BorderColor
public HtmlTextWriterStyle BorderStyle
public HtmlTextWriterStyle BorderWidth
public HtmlTextWriterStyle Color
public HtmlTextWriterStyle FontFamily
public HtmlTextWriterStyle FontSize
public HtmlTextWriterStyle FontStyle
public HtmlTextWriterStyle FontWeight
public HtmlTextWriterStyle Height
public HtmlTextWriterStyle TextDecoration
public HtmlTextWriterStyle Width
public HtmlTextWriterStyle ListStyleImage
public HtmlTextWriterStyle ListStyleType
public HtmlTextWriterStyle Cursor
public HtmlTextWriterStyle Direction
public HtmlTextWriterStyle Display
public HtmlTextWriterStyle Filter
public HtmlTextWriterStyle FontVariant
public HtmlTextWriterStyle Left
public HtmlTextWriterStyle Margin
public HtmlTextWriterStyle MarginBottom
public HtmlTextWriterStyle MarginLeft
public HtmlTextWriterStyle MarginRight
public HtmlTextWriterStyle MarginTop
public HtmlTextWriterStyle Overflow
public HtmlTextWriterStyle OverflowX
public HtmlTextWriterStyle OverflowY
public HtmlTextWriterStyle Padding
public HtmlTextWriterStyle PaddingBottom
public HtmlTextWriterStyle PaddingLeft
public HtmlTextWriterStyle PaddingRight
public HtmlTextWriterStyle PaddingTop
public HtmlTextWriterStyle Position
public HtmlTextWriterStyle TextAlign
public HtmlTextWriterStyle VerticalAlign
public HtmlTextWriterStyle TextOverflow
public HtmlTextWriterStyle Top
public HtmlTextWriterStyle Visibility
public HtmlTextWriterStyle WhiteSpace
public HtmlTextWriterStyle ZIndex
}
public System.Web.UI.HtmlTextWriterTag : Enum {
public int value__
public HtmlTextWriterTag Unknown
public HtmlTextWriterTag A
public HtmlTextWriterTag Acronym
public HtmlTextWriterTag Address
public HtmlTextWriterTag Area
public HtmlTextWriterTag B
public HtmlTextWriterTag Base
public HtmlTextWriterTag Basefont
public HtmlTextWriterTag Bdo
public HtmlTextWriterTag Bgsound
public HtmlTextWriterTag Big
public HtmlTextWriterTag Blockquote
public HtmlTextWriterTag Body
public HtmlTextWriterTag Br
public HtmlTextWriterTag Button
public HtmlTextWriterTag Caption
public HtmlTextWriterTag Center
public HtmlTextWriterTag Cite
public HtmlTextWriterTag Code
public HtmlTextWriterTag Col
public HtmlTextWriterTag Colgroup
public HtmlTextWriterTag Dd
public HtmlTextWriterTag Del
public HtmlTextWriterTag Dfn
public HtmlTextWriterTag Dir
public HtmlTextWriterTag Div
public HtmlTextWriterTag Dl
public HtmlTextWriterTag Dt
public HtmlTextWriterTag Em
public HtmlTextWriterTag Embed
public HtmlTextWriterTag Fieldset
public HtmlTextWriterTag Font
public HtmlTextWriterTag Form
public HtmlTextWriterTag Frame
public HtmlTextWriterTag Frameset
public HtmlTextWriterTag H1
public HtmlTextWriterTag H2
public HtmlTextWriterTag H3
public HtmlTextWriterTag H4
public HtmlTextWriterTag H5
public HtmlTextWriterTag H6
public HtmlTextWriterTag Head
public HtmlTextWriterTag Hr
public HtmlTextWriterTag Html
public HtmlTextWriterTag I
public HtmlTextWriterTag Iframe
public HtmlTextWriterTag Img
public HtmlTextWriterTag Input
public HtmlTextWriterTag Ins
public HtmlTextWriterTag Isindex
public HtmlTextWriterTag Kbd
public HtmlTextWriterTag Label
public HtmlTextWriterTag Legend
public HtmlTextWriterTag Li
public HtmlTextWriterTag Link
public HtmlTextWriterTag Map
public HtmlTextWriterTag Marquee
public HtmlTextWriterTag Menu
public HtmlTextWriterTag Meta
public HtmlTextWriterTag Nobr
public HtmlTextWriterTag Noframes
public HtmlTextWriterTag Noscript
public HtmlTextWriterTag Object
public HtmlTextWriterTag Ol
public HtmlTextWriterTag Option
public HtmlTextWriterTag P
public HtmlTextWriterTag Param
public HtmlTextWriterTag Pre
public HtmlTextWriterTag Q
public HtmlTextWriterTag Rt
public HtmlTextWriterTag Ruby
public HtmlTextWriterTag S
public HtmlTextWriterTag Samp
public HtmlTextWriterTag Script
public HtmlTextWriterTag Select
public HtmlTextWriterTag Small
public HtmlTextWriterTag Span
public HtmlTextWriterTag Strike
public HtmlTextWriterTag Strong
public HtmlTextWriterTag Style
public HtmlTextWriterTag Sub
public HtmlTextWriterTag Sup
public HtmlTextWriterTag Table
public HtmlTextWriterTag Tbody
public HtmlTextWriterTag Td
public HtmlTextWriterTag Textarea
public HtmlTextWriterTag Tfoot
public HtmlTextWriterTag Th
public HtmlTextWriterTag Thead
public HtmlTextWriterTag Title
public HtmlTextWriterTag Tr
public HtmlTextWriterTag Tt
public HtmlTextWriterTag U
public HtmlTextWriterTag Ul
public HtmlTextWriterTag Var
public HtmlTextWriterTag Wbr
public HtmlTextWriterTag Xml
}
public System.Web.UI.IAttributeAccessor {
public string GetAttribute(string key)
public void SetAttribute(string key, string value)
}
public System.Web.UI.IAutoFieldGenerator {
public ICollection GenerateFields(Control control)
}
public System.Web.UI.IBindableControl {
public void ExtractValues(IOrderedDictionary dictionary)
}
public System.Web.UI.IBindableTemplate {
public IOrderedDictionary ExtractValues(Control container)
}
internal System.Web.UI.IBorderPaddingControl {
public int BorderPadding
public int get_BorderPadding()
}
public System.Web.UI.ICallbackEventHandler {
public void RaiseCallbackEvent(string eventArgument)
public string GetCallbackResult()
}
public System.Web.UI.ICheckBoxControl {
public bool Checked
public bool get_Checked()
public void set_Checked(bool value)
public void add_CheckedChanged(EventHandler value)
public void remove_CheckedChanged(EventHandler value)
}
public System.Web.UI.ICodeBlockTypeAccessor {
public CodeBlockType BlockType
public CodeBlockType get_BlockType()
}
public System.Web.UI.IControlBuilderAccessor {
public ControlBuilder ControlBuilder
public ControlBuilder get_ControlBuilder()
}
public System.Web.UI.IControlDesignerAccessor {
public IDictionary UserData
public IDictionary get_UserData()
public IDictionary GetDesignModeState()
public void SetDesignModeState(IDictionary data)
public void SetOwnerControl(Control owner)
}
public System.Web.UI.IDataBindingsAccessor {
public DataBindingCollection DataBindings
public bool HasDataBindings
public DataBindingCollection get_DataBindings()
public bool get_HasDataBindings()
}
public System.Web.UI.IDataItemContainer {
public object DataItem
public int DataItemIndex
public int DisplayIndex
public object get_DataItem()
public int get_DataItemIndex()
public int get_DisplayIndex()
}
public System.Web.UI.IDataKeysControl {
public String[] ClientIDRowSuffix
public DataKeyArray ClientIDRowSuffixDataKeys
public String[] get_ClientIDRowSuffix()
public DataKeyArray get_ClientIDRowSuffixDataKeys()
}
public System.Web.UI.IDataSource {
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public DataSourceView GetView(string viewName)
public ICollection GetViewNames()
}
public System.Web.UI.IDataSourceViewSchemaAccessor {
public object DataSourceViewSchema
public object get_DataSourceViewSchema()
public void set_DataSourceViewSchema(object value)
}
public System.Web.UI.IDReferencePropertyAttribute : Attribute {
private Type _referencedControlType
public Type ReferencedControlType
public void .ctor(Type referencedControlType)
public Type get_ReferencedControlType()
public int GetHashCode()
public bool Equals(object obj)
}
public System.Web.UI.IEditableTextControl {
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
}
public System.Web.UI.IExpressionsAccessor {
public bool HasExpressions
public ExpressionBindingCollection Expressions
public bool get_HasExpressions()
public ExpressionBindingCollection get_Expressions()
}
public System.Web.UI.IFilterResolutionService {
public bool EvaluateFilter(string filterName)
public int CompareFilters(string filter1, string filter2)
}
public System.Web.UI.IHierarchicalDataSource {
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public HierarchicalDataSourceView GetHierarchicalView(string viewPath)
}
public System.Web.UI.IHierarchicalEnumerable {
public IHierarchyData GetHierarchyData(object enumeratedItem)
}
public System.Web.UI.IHierarchyData {
public bool HasChildren
public string Path
public object Item
public string Type
public bool get_HasChildren()
public string get_Path()
public object get_Item()
public string get_Type()
public IHierarchicalEnumerable GetChildren()
public IHierarchyData GetParent()
}
public System.Web.UI.ImageClickEventArgs : EventArgs {
public int X
public int Y
public double XRaw
public double YRaw
public void .ctor(int x, int y)
public void .ctor(int x, int y, double xRaw, double yRaw)
}
public System.Web.UI.ImageClickEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ImageClickEventArgs e)
public IAsyncResult BeginInvoke(object sender, ImageClickEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.INavigateUIData {
public string Description
public string Name
public string NavigateUrl
public string Value
public string get_Description()
public string get_Name()
public string get_NavigateUrl()
public string get_Value()
}
public System.Web.UI.IndexedString : object {
private string _value
public string Value
public void .ctor(string s)
public string get_Value()
}
public System.Web.UI.IParserAccessor {
public void AddParsedSubObject(object obj)
}
public System.Web.UI.IPostBackDataHandler {
public bool LoadPostData(string postDataKey, NameValueCollection postCollection)
public void RaisePostDataChangedEvent()
}
public System.Web.UI.IPostBackEventHandler {
public void RaisePostBackEvent(string eventArgument)
}
internal System.Web.UI.IRenderOuterTableControl {
public string ID
public bool RenderOuterTable
public string get_ID()
public bool get_RenderOuterTable()
public void set_RenderOuterTable(bool value)
}
public System.Web.UI.IResourceUrlGenerator {
public string GetResourceUrl(Type type, string resourceName)
}
internal System.Web.UI.IScriptManager {
public void RegisterOnSubmitStatementExternal(Control control, Type type, string key, string script)
public void RegisterExpandoAttributeExternal(Control control, string controlId, string attributeName, string attributeValue, bool encode)
public void RegisterHiddenFieldExternal(Control control, string hiddenFieldName, string hiddenFieldInitialValue)
public void RegisterStartupScriptExternal(Control control, Type type, string key, string script, bool addScriptTags)
public void RegisterArrayDeclarationExternal(Control control, string arrayName, string arrayValue)
public void RegisterClientScriptBlockExternal(Control control, Type type, string key, string script, bool addScriptTags)
public void RegisterClientScriptIncludeExternal(Control control, Type type, string key, string url)
public void RegisterClientScriptResourceExternal(Control control, Type type, string resourceName)
}
internal System.Web.UI.IScriptResourceDefinition {
public string Path
public string DebugPath
public string CdnPath
public string CdnDebugPath
public string CdnPathSecureConnection
public string CdnDebugPathSecureConnection
public string ResourceName
public Assembly ResourceAssembly
public string get_Path()
public string get_DebugPath()
public string get_CdnPath()
public string get_CdnDebugPath()
public string get_CdnPathSecureConnection()
public string get_CdnDebugPathSecureConnection()
public string get_ResourceName()
public Assembly get_ResourceAssembly()
}
internal System.Web.UI.IScriptResourceMapping {
public IScriptResourceDefinition GetDefinition(string resourceName)
public IScriptResourceDefinition GetDefinition(string resourceName, Assembly resourceAssembly)
}
public System.Web.UI.IStateFormatter {
public object Deserialize(string serializedState)
public string Serialize(object state)
}
public System.Web.UI.IStateManager {
public bool IsTrackingViewState
public bool get_IsTrackingViewState()
public void LoadViewState(object state)
public object SaveViewState()
public void TrackViewState()
}
public System.Web.UI.IStyleSheet {
public void CreateStyleRule(Style style, IUrlResolutionService urlResolver, string selector)
public void RegisterStyle(Style style, IUrlResolutionService urlResolver)
}
internal System.Web.UI.ITagNameToTypeMapper {
public Type GetControlType(string tagName, IDictionary attribs)
}
public System.Web.UI.ITemplate {
public void InstantiateIn(Control container)
}
public System.Web.UI.ITextControl {
public string Text
public string get_Text()
public void set_Text(string value)
}
public System.Web.UI.IThemeResolutionService {
public ThemeProvider[] GetAllThemeProviders()
public ThemeProvider GetThemeProvider()
public ThemeProvider GetStylesheetThemeProvider()
}
public System.Web.UI.IUrlResolutionService {
public string ResolveClientUrl(string relativeUrl)
}
public System.Web.UI.IUserControlDesignerAccessor {
public string InnerText
public string TagName
public string get_InnerText()
public void set_InnerText(string value)
public string get_TagName()
public void set_TagName(string value)
}
public System.Web.UI.IUserControlTypeResolutionService {
public Type GetType(string tagPrefix, string tagName)
}
public System.Web.UI.IValidator {
public bool IsValid
public string ErrorMessage
public bool get_IsValid()
public void set_IsValid(bool value)
public string get_ErrorMessage()
public void set_ErrorMessage(string value)
public void Validate()
}
public System.Web.UI.ListSourceHelper : object {
public bool ContainsListCollection(IDataSource dataSource)
public IList GetList(IDataSource dataSource)
}
public System.Web.UI.LiteralControl : Control {
private string _text
public string Text
public void .ctor(string text)
public string get_Text()
public void set_Text(string value)
protected internal void Render(HtmlTextWriter output)
protected ControlCollection CreateControlCollection()
}
public System.Web.UI.LosFormatter : object {
private ObjectStateFormatter osf
public void .ctor(bool enableMac, string macKeyModifier)
public void .ctor(bool enableMac, Byte[] macKeyModifier)
private void SetMacKey(Byte[] macKeyModifier)
public object Deserialize(Stream stream)
public object Deserialize(TextReader input)
public object Deserialize(string input)
internal string SerializeToBase64(object value)
public void Serialize(Stream stream, object value)
public void Serialize(TextWriter output, object value)
}
internal System.Web.UI.MainDirectiveAttribute`1 : object {
private string unparsedValue
private T value
private bool isExpression
public string UnparsedValue
public bool IsExpression
public T Value
public string get_UnparsedValue()
public bool get_IsExpression()
public T get_Value()
public void .ctor(string value)
public void .ctor(T value, bool unused)
}
public System.Web.UI.MasterPage : UserControl {
private Hashtable definedContentTemplates
private Hashtable templates
private List`1<string> placeholders
private string parentMasterPageFile
private MasterPage parentMasterPage
protected internal IList ContentPlaceHolders
protected internal IDictionary ContentTemplates
public string MasterPageFile
public MasterPage Master
protected internal void AddContentTemplate(string templateName, ITemplate template)
protected internal IList get_ContentPlaceHolders()
protected internal IDictionary get_ContentTemplates()
public string get_MasterPageFile()
public void set_MasterPageFile(string value)
public MasterPage get_Master()
public void InstantiateInContentPlaceHolder(Control contentPlaceHolder, ITemplate template)
internal MasterPage CreateMasterPage(TemplateControl owner, HttpContext context, string masterPageFile, IDictionary contentTemplateCollection)
internal void ApplyMasterPageRecursive(string currentFilePath, VirtualPathProvider vpp, MasterPage master, Dictionary`2<string, bool> appliedMasterPageFiles)
}
internal System.Web.UI.MasterPageParser : UserControlParser {
private Type masterType
private string masterTypeVirtualPath
private List`1<string> contentPlaceHolderIds
private string cacheEntryName
internal Type MasterType
internal string DefaultBaseTypeName
internal string DefaultDirectiveName
internal void .ctor(VirtualPath virtualPath, string inputFile, HttpContext context)
internal void .ctor(VirtualPath virtualPath, TextReader reader, HttpContext context)
internal void .ctor(VirtualPath virtualPath, string inputFile, TextReader reader, HttpContext context)
public MasterPage GetCompiledMasterInstance(string virtualPath, string inputFile, HttpContext context)
public Type GetCompiledMasterType(string virtualPath, string inputFile, HttpContext context)
internal void HandleOptions(object obj)
internal void AddDirective(string directive, IDictionary atts)
internal void AddContentPlaceHolderId(string id)
internal Type get_MasterType()
internal string get_DefaultBaseTypeName()
internal string get_DefaultDirectiveName()
}
internal System.Web.UI.MinimizableAttributeTypeConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
}
public System.Web.UI.NonVisualControlAttribute : Attribute {
public NonVisualControlAttribute NonVisual
public NonVisualControlAttribute Visual
public NonVisualControlAttribute Default
private bool _nonVisual
public bool IsNonVisual
public void .ctor(bool nonVisual)
public bool get_IsNonVisual()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Web.UI.ObjectConverter : object {
public object ConvertValue(object value, Type toType, string formatString)
}
public System.Web.UI.ObjectPersistData : object {
public ICollection AllPropertyEntries
public IDictionary BuiltObjects
public ICollection CollectionItems
public ICollection EventEntries
public bool IsCollection
public bool Localize
public Type ObjectType
public string ResourceKey
public void .ctor(ControlBuilder builder, IDictionary builtObjects)
public ICollection get_AllPropertyEntries()
public IDictionary get_BuiltObjects()
public ICollection get_CollectionItems()
public ICollection get_EventEntries()
public bool get_IsCollection()
public bool get_Localize()
public Type get_ObjectType()
public string get_ResourceKey()
public void AddToObjectControlBuilderTable(IDictionary table)
public IDictionary GetFilteredProperties(string filter)
public PropertyEntry GetFilteredProperty(string filter, string name)
public ICollection GetPropertyAllFilters(string name)
}
public System.Web.UI.ObjectStateFormatter : object {
private ushort SERIALIZED_STREAM_MAGIC
private Page page
private MachineKeySection section
private bool EnableMac
private bool NeedViewStateEncryption
internal MachineKeySection Section
private SerializationBinder System.Runtime.Serialization.IFormatter.Binder
private StreamingContext System.Runtime.Serialization.IFormatter.Context
private ISurrogateSelector System.Runtime.Serialization.IFormatter.SurrogateSelector
internal void .ctor(Page page)
private bool get_EnableMac()
private bool get_NeedViewStateEncryption()
internal MachineKeySection get_Section()
internal void set_Section(MachineKeySection value)
public object Deserialize(Stream inputStream)
public object Deserialize(string inputString)
public string Serialize(object stateGraph)
public void Serialize(Stream outputStream, object stateGraph)
private void SerializeValue(BinaryWriter w, object o)
private object DeserializeObject(BinaryReader r)
private object System.Runtime.Serialization.IFormatter.Deserialize(Stream serializationStream)
private void System.Runtime.Serialization.IFormatter.Serialize(Stream serializationStream, object stateGraph)
private SerializationBinder System.Runtime.Serialization.IFormatter.get_Binder()
private void System.Runtime.Serialization.IFormatter.set_Binder(SerializationBinder value)
private StreamingContext System.Runtime.Serialization.IFormatter.get_Context()
private void System.Runtime.Serialization.IFormatter.set_Context(StreamingContext value)
private ISurrogateSelector System.Runtime.Serialization.IFormatter.get_SurrogateSelector()
private void System.Runtime.Serialization.IFormatter.set_SurrogateSelector(ISurrogateSelector value)
}
public System.Web.UI.ObjectTagBuilder : ControlBuilder {
private string id
private string scope
private Type type
internal Type Type
internal string ObjectID
internal string Scope
public void AppendLiteralString(string s)
public void AppendSubBuilder(ControlBuilder subBuilder)
public void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attribs)
internal Type get_Type()
internal string get_ObjectID()
internal string get_Scope()
}
public System.Web.UI.OutputCacheLocation : Enum {
public int value__
public OutputCacheLocation Any
public OutputCacheLocation Client
public OutputCacheLocation Downstream
public OutputCacheLocation Server
public OutputCacheLocation None
public OutputCacheLocation ServerAndClient
}
public System.Web.UI.OutputCacheParameters : object {
private string _cacheProfile
private int _duration
private bool _enabled
private OutputCacheLocation _location
private bool _noStore
private string _sqlDependency
private string _varByControl
private string _varByCustom
private string _varByHeader
private string _varByParam
private string _varyByContentEncoding
public string CacheProfile
public int Duration
public bool Enabled
public OutputCacheLocation Location
public bool NoStore
public string SqlDependency
public string VaryByContentEncoding
public string VaryByControl
public string VaryByCustom
public string VaryByHeader
public string VaryByParam
public string get_CacheProfile()
public void set_CacheProfile(string value)
public int get_Duration()
public void set_Duration(int value)
public bool get_Enabled()
public void set_Enabled(bool value)
public OutputCacheLocation get_Location()
public void set_Location(OutputCacheLocation value)
public bool get_NoStore()
public void set_NoStore(bool value)
public string get_SqlDependency()
public void set_SqlDependency(string value)
public string get_VaryByContentEncoding()
public void set_VaryByContentEncoding(string value)
public string get_VaryByControl()
public void set_VaryByControl(string value)
public string get_VaryByCustom()
public void set_VaryByCustom(string value)
public string get_VaryByHeader()
public void set_VaryByHeader(string value)
public string get_VaryByParam()
public void set_VaryByParam(string value)
}
public System.Web.UI.Page : TemplateControl {
private bool _eventValidation
private Object[] _savedControlState
private bool _doLoadPreviousPage
private string _focusedControlID
private bool _hasEnabledControlArray
private bool _viewState
private bool _viewStateMac
private string _errorPage
private bool is_validated
private bool _smartNavigation
private int _transactionMode
private ValidatorCollection _validators
private bool renderingForm
private string _savedViewState
private List`1<string> _requiresPostBack
private List`1<string> _requiresPostBackCopy
private List`1<IPostBackDataHandler> requiresPostDataChanged
private IPostBackEventHandler requiresRaiseEvent
private IPostBackEventHandler formPostedRequiresRaiseEvent
private NameValueCollection secondPostData
private bool requiresPostBackScript
private bool postBackScriptRendered
private bool requiresFormScriptDeclaration
private bool formScriptDeclarationRendered
private bool handleViewState
private string viewStateUserKey
private NameValueCollection _requestValueCollection
private string clientTarget
private ClientScriptManager scriptManager
private bool allow_load
private PageStatePersister page_state_persister
private CultureInfo _appCulture
private CultureInfo _appUICulture
private HttpContext _context
private HttpApplicationState _application
private HttpResponse _response
private HttpRequest _request
private Cache _cache
private HttpSessionState _session
public string postEventArgumentID
public string postEventSourceID
private string ScrollPositionXID
private string ScrollPositionYID
private string EnabledControlArrayID
internal string LastFocusID
internal string CallbackArgumentID
internal string CallbackSourceID
internal string PreviousPageID
private int maxPageStateFieldLength
private string uniqueFilePathSuffix
private HtmlHead htmlHeader
private MasterPage masterPage
private string masterPageFile
private Page previousPage
private bool isCrossPagePostBack
private bool isPostBack
private bool isCallback
private List`1<Control> requireStateControls
private HtmlForm _form
private string _title
private string _theme
private string _styleSheetTheme
private string _metaDescription
private string _metaKeywords
private Control _autoPostBackControl
private bool frameworkInitialized
private Hashtable items
private bool _maintainScrollPositionOnPostBack
private bool asyncMode
private TimeSpan asyncTimeout
private double DefaultAsyncTimeout
private List`1<PageAsyncTask> parallelTasks
private List`1<PageAsyncTask> serialTasks
private ViewStateEncryptionMode viewStateEncryptionMode
private bool controlRegisteredForViewStateEncryption
private string _validationStartupScript
private string _validationOnSubmitStatement
private string _validationInitializeScript
private string _webFormScriptReference
internal object InitCompleteEvent
internal object LoadCompleteEvent
internal object PreInitEvent
internal object PreLoadEvent
internal object PreRenderCompleteEvent
internal object SaveStateCompleteEvent
private int event_mask
private int initcomplete_mask
private int loadcomplete_mask
private int preinit_mask
private int preload_mask
private int prerendercomplete_mask
private int savestatecomplete_mask
private Hashtable contentTemplates
private PageTheme _pageTheme
private PageTheme _styleSheetPageTheme
private Stack dataItemCtx
public HttpApplicationState Application
protected bool AspCompatMode
public bool Buffer
public Cache Cache
public string ClientTarget
public int CodePage
public string ContentType
protected internal HttpContext Context
public string Culture
public bool EnableEventValidation
public bool EnableViewState
public bool EnableViewStateMac
internal bool EnableViewStateMacInternal
public string ErrorPage
protected ArrayList FileDependencies
public string ID
public bool IsPostBack
public bool IsPostBackEventControlRegistered
public bool IsReusable
public bool IsValid
public IDictionary Items
public int LCID
public bool MaintainScrollPositionOnPostBack
public PageAdapter PageAdapter
internal string WebFormScriptReference
internal string ValidationStartupScript
internal string ValidationOnSubmitStatement
internal string ValidationInitializeScript
internal IScriptManager ScriptManager
internal string theForm
internal bool IsMultiForm
public HttpRequest Request
internal HttpRequest RequestInternal
public HttpResponse Response
public string ResponseEncoding
public HttpServerUtility Server
public HttpSessionState Session
public bool SmartNavigation
public string StyleSheetTheme
public string Theme
public Control AutoPostBackControl
public RouteData RouteData
public string MetaDescription
public string MetaKeywords
public string Title
public TraceContext Trace
public bool TraceEnabled
public TraceMode TraceModeValue
protected int TransactionMode
public string UICulture
public IPrincipal User
public ValidatorCollection Validators
public string ViewStateUserKey
public bool Visible
internal string RawViewState
protected PageStatePersister PageStatePersister
public ClientScriptManager ClientScript
public HtmlForm Form
public string ClientQueryString
public Page PreviousPage
public bool IsCallback
public bool IsCrossPagePostBack
public char IdSeparator
public HtmlHead Header
protected bool AsyncMode
public TimeSpan AsyncTimeout
public bool IsAsync
protected internal string UniqueFilePathSuffix
public int MaxPageStateFieldLength
private List`1<PageAsyncTask> ParallelTasks
private List`1<PageAsyncTask> SerialTasks
public ViewStateEncryptionMode ViewStateEncryptionMode
internal bool NeedViewStateEncryption
public string MasterPageFile
public MasterPage Master
internal PageTheme PageTheme
internal PageTheme StyleSheetPageTheme
public ModelBindingExecutionContext ModelBindingExecutionContext
public ModelStateDictionary ModelState
public bool SkipFormActionValidation
public UnobtrusiveValidationMode UnobtrusiveValidationMode
public ValidateRequestMode ValidateRequestMode
public HttpApplicationState get_Application()
protected bool get_AspCompatMode()
protected void set_AspCompatMode(bool value)
public bool get_Buffer()
public void set_Buffer(bool value)
public Cache get_Cache()
public string get_ClientTarget()
public void set_ClientTarget(string value)
public int get_CodePage()
public void set_CodePage(int value)
public string get_ContentType()
public void set_ContentType(string value)
protected internal HttpContext get_Context()
public string get_Culture()
public void set_Culture(string value)
public bool get_EnableEventValidation()
public void set_EnableEventValidation(bool value)
public bool get_EnableViewState()
public void set_EnableViewState(bool value)
public bool get_EnableViewStateMac()
public void set_EnableViewStateMac(bool value)
internal bool get_EnableViewStateMacInternal()
internal void set_EnableViewStateMacInternal(bool value)
public string get_ErrorPage()
public void set_ErrorPage(string value)
protected void set_FileDependencies(ArrayList value)
public string get_ID()
public void set_ID(string value)
public bool get_IsPostBack()
public bool get_IsPostBackEventControlRegistered()
public bool get_IsReusable()
public bool get_IsValid()
public IDictionary get_Items()
public int get_LCID()
public void set_LCID(int value)
public bool get_MaintainScrollPositionOnPostBack()
public void set_MaintainScrollPositionOnPostBack(bool value)
public PageAdapter get_PageAdapter()
internal string get_WebFormScriptReference()
internal string get_ValidationStartupScript()
internal string get_ValidationOnSubmitStatement()
internal string get_ValidationInitializeScript()
internal IScriptManager get_ScriptManager()
internal string get_theForm()
internal bool get_IsMultiForm()
public HttpRequest get_Request()
internal HttpRequest get_RequestInternal()
public HttpResponse get_Response()
public string get_ResponseEncoding()
public void set_ResponseEncoding(string value)
public HttpServerUtility get_Server()
public HttpSessionState get_Session()
public bool get_SmartNavigation()
public void set_SmartNavigation(bool value)
public string get_StyleSheetTheme()
public void set_StyleSheetTheme(string value)
public string get_Theme()
public void set_Theme(string value)
private void InitializeStyleSheet()
private void InitializeTheme()
public Control get_AutoPostBackControl()
public void set_AutoPostBackControl(Control value)
public RouteData get_RouteData()
public string get_MetaDescription()
public void set_MetaDescription(string value)
public string get_MetaKeywords()
public void set_MetaKeywords(string value)
public string get_Title()
public void set_Title(string value)
public TraceContext get_Trace()
public bool get_TraceEnabled()
public void set_TraceEnabled(bool value)
public TraceMode get_TraceModeValue()
public void set_TraceModeValue(TraceMode value)
protected int get_TransactionMode()
protected void set_TransactionMode(int value)
public string get_UICulture()
public void set_UICulture(string value)
public IPrincipal get_User()
public ValidatorCollection get_Validators()
public string get_ViewStateUserKey()
public void set_ViewStateUserKey(string value)
public bool get_Visible()
public void set_Visible(bool value)
private CultureInfo GetPageCulture(string culture, CultureInfo deflt)
protected IAsyncResult AspCompatBeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData)
protected void AspCompatEndProcessRequest(IAsyncResult result)
protected HtmlTextWriter CreateHtmlTextWriter(TextWriter tw)
public void DesignerInitialize()
protected internal NameValueCollection DeterminePostBackMode()
public Control FindControl(string id)
private Control FindControl(string id, bool decode)
public string GetPostBackClientEvent(Control control, string argument)
public string GetPostBackClientHyperlink(Control control, string argument)
public string GetPostBackEventReference(Control control)
public string GetPostBackEventReference(Control control, string argument)
internal void RequiresFormScriptDeclaration()
internal void RequiresPostBackScript()
public int GetTypeHashCode()
protected internal void InitOutputCache(OutputCacheParameters cacheSettings)
protected void InitOutputCache(int duration, string varyByContentEncoding, string varyByHeader, string varyByCustom, OutputCacheLocation location, string varyByParam)
protected void InitOutputCache(int duration, string varyByHeader, string varyByCustom, OutputCacheLocation location, string varyByParam)
public bool IsClientScriptBlockRegistered(string key)
public bool IsStartupScriptRegistered(string key)
public string MapPath(string virtualPath)
protected internal void Render(HtmlTextWriter writer)
private void RenderPostBackScript(HtmlTextWriter writer, string formUniqueID)
private void RenderClientScriptFormDeclaration(HtmlTextWriter writer, string formUniqueID)
internal void OnFormRender(HtmlTextWriter writer, string formUniqueID)
internal IStateFormatter GetFormatter()
internal string GetSavedViewState()
internal void OnFormPostRender(HtmlTextWriter writer, string formUniqueID)
private void ProcessPostData(NameValueCollection data, bool second)
public void ProcessRequest(HttpContext context)
private void ProcessException(Exception e)
private void ProcessUnload()
protected IAsyncResult AsyncPageBeginProcessRequest(HttpContext context, AsyncCallback callback, object extraData)
protected void AsyncPageEndProcessRequest(IAsyncResult result)
private void InternalProcessRequest()
private void RestorePageState()
private void ProcessPostData()
private void ProcessLoad()
private void ProcessRaiseEvents()
private bool ProcessLoadComplete()
internal void RenderPage()
internal void SetContext(HttpContext context)
private void RenderTrace()
private void RaisePostBackEvents()
internal void RaiseChangedEvents()
protected void RaisePostBackEvent(IPostBackEventHandler sourceControl, string eventArgument)
public void RegisterArrayDeclaration(string arrayName, string arrayValue)
public void RegisterClientScriptBlock(string key, string script)
public void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue)
internal void RegisterClientScriptFile(string a, string b, string c)
public void RegisterOnSubmitStatement(string key, string script)
internal string GetSubmitStatements()
public void RegisterRequiresPostBack(Control control)
public void RegisterRequiresRaiseEvent(IPostBackEventHandler control)
public void RegisterStartupScript(string key, string script)
public void RegisterViewStateHandler()
protected void SavePageStateToPersistenceMedium(object state)
internal string get_RawViewState()
internal void set_RawViewState(string value)
protected PageStatePersister get_PageStatePersister()
protected object LoadPageStateFromPersistenceMedium()
internal void LoadPageViewState()
internal void SavePageViewState()
public void Validate()
internal bool AreValidatorsUplevel()
internal bool AreValidatorsUplevel(string valGroup)
private bool ValidateCollection(ValidatorCollection validators)
public void VerifyRenderingInServerForm(Control control)
protected void FrameworkInitialize()
public ClientScriptManager get_ClientScript()
public void add_InitComplete(EventHandler value)
public void remove_InitComplete(EventHandler value)
public void add_LoadComplete(EventHandler value)
public void remove_LoadComplete(EventHandler value)
public void add_PreInit(EventHandler value)
public void remove_PreInit(EventHandler value)
public void add_PreLoad(EventHandler value)
public void remove_PreLoad(EventHandler value)
public void add_PreRenderComplete(EventHandler value)
public void remove_PreRenderComplete(EventHandler value)
public void add_SaveStateComplete(EventHandler value)
public void remove_SaveStateComplete(EventHandler value)
protected void OnInitComplete(EventArgs e)
protected void OnLoadComplete(EventArgs e)
protected void OnPreInit(EventArgs e)
protected void OnPreLoad(EventArgs e)
protected void OnPreRenderComplete(EventArgs e)
internal void RegisterEnabledControl(Control control)
protected void OnSaveStateComplete(EventArgs e)
public HtmlForm get_Form()
internal void RegisterForm(HtmlForm form)
public string get_ClientQueryString()
public Page get_PreviousPage()
public bool get_IsCallback()
public bool get_IsCrossPagePostBack()
public char get_IdSeparator()
private string ProcessCallbackData()
private ICallbackEventHandler GetCallbackTarget()
private void ProcessRaiseCallbackEvent(ICallbackEventHandler target, String& callbackEventError)
private string ProcessGetCallbackResult(ICallbackEventHandler target, string callbackEventError)
public HtmlHead get_Header()
internal void SetHeader(HtmlHead header)
protected bool get_AsyncMode()
protected void set_AsyncMode(bool value)
public TimeSpan get_AsyncTimeout()
public void set_AsyncTimeout(TimeSpan value)
public bool get_IsAsync()
protected internal string get_UniqueFilePathSuffix()
public int get_MaxPageStateFieldLength()
public void set_MaxPageStateFieldLength(int value)
public void AddOnPreRenderCompleteAsync(BeginEventHandler beginHandler, EndEventHandler endHandler)
public void AddOnPreRenderCompleteAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state)
private List`1<PageAsyncTask> get_ParallelTasks()
private List`1<PageAsyncTask> get_SerialTasks()
public void RegisterAsyncTask(PageAsyncTask task)
public void ExecuteRegisteredAsyncTasks()
private void EndAsyncTaskCallback(IAsyncResult result)
public HtmlTextWriter CreateHtmlTextWriterFromType(TextWriter tw, Type writerType)
public ViewStateEncryptionMode get_ViewStateEncryptionMode()
public void set_ViewStateEncryptionMode(ViewStateEncryptionMode value)
public void RegisterRequiresViewStateEncryption()
internal bool get_NeedViewStateEncryption()
private void ApplyMasterPage()
public string get_MasterPageFile()
public void set_MasterPageFile(string value)
public MasterPage get_Master()
public void SetFocus(string clientID)
public void SetFocus(Control control)
public void RegisterRequiresControlState(Control control)
public bool RequiresControlState(Control control)
public void UnregisterRequiresControlState(Control control)
public ValidatorCollection GetValidators(string validationGroup)
private bool BelongsToGroup(IValidator v, string validationGroup)
public void Validate(string validationGroup)
private object SavePageControlState()
private void LoadPageControlState(object data)
private void LoadPreviousPageReference()
protected internal void AddContentTemplate(string templateName, ITemplate template)
internal PageTheme get_PageTheme()
internal PageTheme get_StyleSheetPageTheme()
internal void PushDataItemContext(object o)
internal void PopDataItemContext()
public object GetDataItem()
private void AddStyleSheets(PageTheme theme, List`1& links)
protected internal void OnInit(EventArgs e)
protected object GetWrappedFileDependencies(String[] virtualFileDependencies)
protected void InitializeCulture()
protected internal void AddWrappedFileDependencies(object virtualFileDependencies)
public ModelBindingExecutionContext get_ModelBindingExecutionContext()
public ModelStateDictionary get_ModelState()
public bool get_SkipFormActionValidation()
public void set_SkipFormActionValidation(bool value)
public UnobtrusiveValidationMode get_UnobtrusiveValidationMode()
public void set_UnobtrusiveValidationMode(UnobtrusiveValidationMode value)
public ValidateRequestMode get_ValidateRequestMode()
public void set_ValidateRequestMode(ValidateRequestMode value)
public bool TryUpdateModel(TModel model)
public bool TryUpdateModel(TModel model, IValueProvider valueProvider)
public void UpdateModel(TModel model)
public void UpdateModel(TModel model, IValueProvider valueProvider)
}
public System.Web.UI.PageAsyncTask : object {
private BeginEventHandler beginHandler
private EndEventHandler endHandler
private EndEventHandler timeoutHandler
private bool executeInParallel
private object state
public BeginEventHandler BeginHandler
public EndEventHandler EndHandler
public EndEventHandler TimeoutHandler
public bool ExecuteInParallel
public object State
public void .ctor(BeginEventHandler beginHandler, EndEventHandler endHandler, EndEventHandler timeoutHandler, object state)
public void .ctor(BeginEventHandler beginHandler, EndEventHandler endHandler, EndEventHandler timeoutHandler, object state, bool executeInParallel)
public BeginEventHandler get_BeginHandler()
public EndEventHandler get_EndHandler()
public EndEventHandler get_TimeoutHandler()
public bool get_ExecuteInParallel()
public object get_State()
public void .ctor(Func`2<CancellationToken, Task> handler)
public void .ctor(Func`1<Task> handler)
}
public System.Web.UI.PageHandlerFactory : object {
public IHttpHandler GetHandler(HttpContext context, string requestType, string virtualPath, string path)
public void ReleaseHandler(IHttpHandler handler)
}
public System.Web.UI.PageParser : TemplateControlParser {
private Type defaultPageBaseType
private Type defaultApplicationBaseType
private Type defaultPageParserFilterType
private Type defaultUserControlBaseType
private bool enableLongStringsAsResources
private PagesEnableSessionState enableSessionState
private bool enableViewStateMac
private bool enableViewStateMacSet
private bool smartNavigation
private bool haveTrace
private bool trace
private bool notBuffer
private TraceMode tracemode
private string contentType
private MainDirectiveAttribute`1<int> codepage
private MainDirectiveAttribute`1<string> responseEncoding
private MainDirectiveAttribute`1<int> lcid
private MainDirectiveAttribute`1<string> clientTarget
private MainDirectiveAttribute`1<string> masterPage
private MainDirectiveAttribute`1<string> title
private MainDirectiveAttribute`1<string> theme
private MainDirectiveAttribute`1<string> metaDescription
private MainDirectiveAttribute`1<string> metaKeywords
private string culture
private string uiculture
private string errorPage
private bool validateRequest
private bool async
private int asyncTimeout
private Type masterType
private string masterVirtualPath
private string styleSheetTheme
private bool enable_event_validation
private bool maintainScrollPositionOnPostBack
private int maxPageStateFieldLength
private Type previousPageType
private string previousPageVirtualPath
public bool EnableLongStringsAsResources
public Type DefaultPageBaseType
public Type DefaultApplicationBaseType
public Type DefaultPageParserFilterType
public Type DefaultUserControlBaseType
internal bool EnableSessionState
internal bool EnableViewStateMac
internal bool EnableViewStateMacSet
internal bool SmartNavigation
internal bool ReadOnlySessionState
internal bool HaveTrace
internal bool Trace
internal TraceMode TraceMode
internal Type DefaultBaseType
internal string DefaultBaseTypeName
internal string DefaultDirectiveName
internal string ContentType
internal MainDirectiveAttribute`1<string> ResponseEncoding
internal MainDirectiveAttribute`1<int> CodePage
internal MainDirectiveAttribute`1<int> LCID
internal MainDirectiveAttribute`1<string> ClientTarget
internal MainDirectiveAttribute`1<string> MasterPageFile
internal MainDirectiveAttribute`1<string> Title
internal MainDirectiveAttribute`1<string> Theme
internal MainDirectiveAttribute`1<string> MetaDescription
internal MainDirectiveAttribute`1<string> MetaKeywords
internal string Culture
internal string UICulture
internal string ErrorPage
internal bool ValidateRequest
internal bool NotBuffer
internal bool Async
internal int AsyncTimeout
internal string StyleSheetTheme
internal Type MasterType
internal bool EnableEventValidation
internal bool MaintainScrollPositionOnPostBack
internal int MaxPageStateFieldLength
internal Type PreviousPageType
public bool get_EnableLongStringsAsResources()
public void set_EnableLongStringsAsResources(bool value)
public Type get_DefaultPageBaseType()
public void set_DefaultPageBaseType(Type value)
public Type get_DefaultApplicationBaseType()
public void set_DefaultApplicationBaseType(Type value)
public Type get_DefaultPageParserFilterType()
public void set_DefaultPageParserFilterType(Type value)
public Type get_DefaultUserControlBaseType()
public void set_DefaultUserControlBaseType(Type value)
internal void .ctor(string virtualPath, string inputFile, HttpContext context)
internal void .ctor(VirtualPath virtualPath, TextReader reader, HttpContext context)
internal void .ctor(VirtualPath virtualPath, string inputFile, TextReader reader, HttpContext context)
internal void LoadConfigDefaults()
public IHttpHandler GetCompiledPageInstance(string virtualPath, string inputFile, HttpContext context)
internal void ProcessMainAttributes(IDictionary atts)
internal void AddDirective(string directive, IDictionary atts)
private string SuggestCulture(string culture)
internal Type GetCompiledPageType(string virtualPath, string inputFile, HttpContext context)
internal Type CompileIntoType()
internal bool get_EnableSessionState()
internal bool get_EnableViewStateMac()
internal bool get_EnableViewStateMacSet()
internal bool get_SmartNavigation()
internal bool get_ReadOnlySessionState()
internal bool get_HaveTrace()
internal bool get_Trace()
internal TraceMode get_TraceMode()
internal Type get_DefaultBaseType()
internal string get_DefaultBaseTypeName()
internal string get_DefaultDirectiveName()
internal string get_ContentType()
internal MainDirectiveAttribute`1<string> get_ResponseEncoding()
internal MainDirectiveAttribute`1<int> get_CodePage()
internal MainDirectiveAttribute`1<int> get_LCID()
internal MainDirectiveAttribute`1<string> get_ClientTarget()
internal MainDirectiveAttribute`1<string> get_MasterPageFile()
internal MainDirectiveAttribute`1<string> get_Title()
internal MainDirectiveAttribute`1<string> get_Theme()
internal MainDirectiveAttribute`1<string> get_MetaDescription()
internal MainDirectiveAttribute`1<string> get_MetaKeywords()
internal string get_Culture()
internal string get_UICulture()
internal string get_ErrorPage()
internal bool get_ValidateRequest()
internal bool get_NotBuffer()
internal bool get_Async()
internal int get_AsyncTimeout()
internal string get_StyleSheetTheme()
internal Type get_MasterType()
internal bool get_EnableEventValidation()
internal bool get_MaintainScrollPositionOnPostBack()
internal int get_MaxPageStateFieldLength()
internal Type get_PreviousPageType()
}
public System.Web.UI.PageParserFilter : object {
private TemplateParser parser
public bool AllowCode
protected int Line
public int NumberOfControlsAllowed
public int NumberOfDirectDependenciesAllowed
public int TotalNumberOfDependenciesAllowed
protected string VirtualPath
public bool get_AllowCode()
protected int get_Line()
public int get_NumberOfControlsAllowed()
public int get_NumberOfDirectDependenciesAllowed()
public int get_TotalNumberOfDependenciesAllowed()
protected string get_VirtualPath()
protected void AddControl(Type type, IDictionary attributes)
public bool AllowBaseType(Type baseType)
public bool AllowControl(Type controlType, ControlBuilder builder)
public bool AllowServerSideInclude(string includeVirtualPath)
public bool AllowVirtualReference(string referenceVirtualPath, VirtualReferenceType referenceType)
public CompilationMode GetCompilationMode(CompilationMode current)
public Type GetNoCompileUserControlType()
protected void Initialize()
internal void Initialize(TemplateParser parser)
public void ParseComplete(ControlBuilder rootBuilder)
public void PreprocessDirective(string directiveName, IDictionary attributes)
public bool ProcessCodeConstruct(CodeConstructType codeType, string code)
public bool ProcessDataBindingAttribute(string controlId, string name, string value)
public bool ProcessEventHookup(string controlId, string eventName, string handlerName)
protected void SetPageProperty(string filter, string name, string value)
}
public System.Web.UI.PageStatePersister : object {
private object control_state
private object view_state
private Page page
private IStateFormatter state_formatter
public object ControlState
public object ViewState
protected Page Page
protected IStateFormatter StateFormatter
protected void .ctor(Page page)
public object get_ControlState()
public void set_ControlState(object value)
public object get_ViewState()
public void set_ViewState(object value)
protected Page get_Page()
protected void set_Page(Page value)
protected IStateFormatter get_StateFormatter()
public void Load()
public void Save()
}
public System.Web.UI.PageTheme : object {
private Page _page
protected string AppRelativeTemplateSourceDirectory
protected IDictionary ControlSkins
protected String[] LinkedStyleSheets
protected Page Page
public object CreateSkinKey(Type controlType, string skinID)
protected object Eval(string expression)
protected string Eval(string expression, string format)
public bool TestDeviceFilter(string deviceFilterName)
protected object XPath(string xPathExpression)
protected object XPath(string xPathExpression, IXmlNamespaceResolver resolver)
protected string XPath(string xPathExpression, string format)
protected string XPath(string xPathExpression, string format, IXmlNamespaceResolver resolver)
protected IEnumerable XPathSelect(string xPathExpression)
protected IEnumerable XPathSelect(string xPathExpression, IXmlNamespaceResolver resolver)
protected string get_AppRelativeTemplateSourceDirectory()
protected IDictionary get_ControlSkins()
protected String[] get_LinkedStyleSheets()
protected Page get_Page()
internal void SetPage(Page page)
internal ControlSkin GetControlSkin(Type controlType, string skinID)
internal String[] GetStyleSheets()
}
internal System.Web.UI.PageThemeBuilder : UserControlControlBuilder {
public void AppendLiteralString(string s)
}
internal System.Web.UI.PageThemeFileParser : UserControlParser {
internal string DefaultBaseTypeName
internal void .ctor(VirtualPath virtualPath, string inputFile, HttpContext context)
internal void HandleOptions(object obj)
internal void AddDirective(string directive, IDictionary atts)
internal string get_DefaultBaseTypeName()
}
internal System.Web.UI.PageThemeParser : UserControlParser {
private String[] linkedStyleSheets
public String[] LinkedStyleSheets
internal string DefaultBaseTypeName
public String[] get_LinkedStyleSheets()
public void set_LinkedStyleSheets(String[] value)
internal void .ctor(VirtualPath virtualPath, HttpContext context)
internal void HandleOptions(object obj)
internal string get_DefaultBaseTypeName()
}
public System.Web.UI.Pair : object {
public object First
public object Second
public void .ctor(object x, object y)
}
public System.Web.UI.ParseChildrenAttribute : Attribute {
private bool childrenAsProperties
private string defaultProperty
public ParseChildrenAttribute Default
public ParseChildrenAttribute ParseAsChildren
public ParseChildrenAttribute ParseAsProperties
private Type childType
public bool ChildrenAsProperties
public string DefaultProperty
public Type ChildControlType
public void .ctor(bool childrenAsProperties)
public void .ctor(bool childrenAsProperties, string defaultProperty)
public void .ctor(Type childControlType)
public bool get_ChildrenAsProperties()
public void set_ChildrenAsProperties(bool value)
public string get_DefaultProperty()
public void set_DefaultProperty(string value)
public Type get_ChildControlType()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Web.UI.ParseRecorder : object {
public IList`1<Func`1<ParseRecorder>> RecorderFactories
public IList`1<Func`1<ParseRecorder>> get_RecorderFactories()
public void Initialize(TemplateParser parser)
public void ParseComplete(ControlBuilder root)
public void ProcessGeneratedCode(ControlBuilder builder, CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod)
public void RecordBeginTag(ControlBuilder builder, Match tag)
public void RecordCodeBlock(ControlBuilder builder, Match codeBlock)
public void RecordEmptyTag(ControlBuilder builder, Match tag)
public void RecordEndTag(ControlBuilder builder, Match tag)
}
public System.Web.UI.PartialCachingAttribute : Attribute {
private int duration
private string varyByControls
private string varyByCustom
private string varyByParams
private bool shared
private string sqlDependency
private string <ProviderName>k__BackingField
public int Duration
public string ProviderName
public string VaryByParams
public string VaryByControls
public string VaryByCustom
public bool Shared
public string SqlDependency
public void .ctor(int duration)
public void .ctor(int duration, string varyByParams, string varyByControls, string varyByCustom)
public void .ctor(int duration, string varyByParams, string varyByControls, string varyByCustom, bool shared)
public void .ctor(int duration, string varyByParams, string varyByControls, string varyByCustom, string sqlDependency, bool shared)
public int get_Duration()
public string get_ProviderName()
public void set_ProviderName(string value)
public string get_VaryByParams()
public string get_VaryByControls()
public string get_VaryByCustom()
public bool get_Shared()
public string get_SqlDependency()
public void set_Duration(int value)
public void set_Shared(bool value)
public void set_SqlDependency(string value)
public void set_VaryByControls(string value)
public void set_VaryByCustom(string value)
public void set_VaryByParams(string value)
}
public System.Web.UI.PartialCachingControl : BasePartialCachingControl {
private Type type
private Object[] parameters
private Control control
public Control CachedControl
internal void .ctor(Type type, Object[] parameters)
internal Control CreateControl()
public Control get_CachedControl()
}
public System.Web.UI.PersistChildrenAttribute : Attribute {
public PersistChildrenAttribute Yes
public PersistChildrenAttribute No
public PersistChildrenAttribute Default
private bool _persist
private bool _usesCustomPersistence
public bool Persist
public bool UsesCustomPersistence
public void .ctor(bool persist)
public void .ctor(bool persist, bool usesCustomPersistence)
public bool get_Persist()
public bool get_UsesCustomPersistence()
public int GetHashCode()
public bool Equals(object obj)
public bool IsDefaultAttribute()
}
public System.Web.UI.PersistenceMode : Enum {
public int value__
public PersistenceMode Attribute
public PersistenceMode InnerProperty
public PersistenceMode InnerDefaultProperty
public PersistenceMode EncodedInnerDefaultProperty
}
public System.Web.UI.PersistenceModeAttribute : Attribute {
private PersistenceMode mode
public PersistenceModeAttribute Attribute
public PersistenceModeAttribute Default
public PersistenceModeAttribute EncodedInnerDefaultProperty
public PersistenceModeAttribute InnerDefaultProperty
public PersistenceModeAttribute InnerProperty
public PersistenceMode Mode
public void .ctor(PersistenceMode mode)
public PersistenceMode get_Mode()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Web.UI.PostBackOptions : object {
private Control control
private string argument
private string actionUrl
private bool autoPostBack
private bool requiresJavaScriptProtocol
private bool trackFocus
private bool clientSubmit
private bool performValidation
private string validationGroup
public string ActionUrl
public string Argument
public bool AutoPostBack
public bool ClientSubmit
public bool PerformValidation
public bool RequiresJavaScriptProtocol
public Control TargetControl
public bool TrackFocus
public string ValidationGroup
internal bool RequiresSpecialPostBack
public void .ctor(Control targetControl)
public void .ctor(Control targetControl, string argument)
public void .ctor(Control targetControl, string argument, string actionUrl, bool autoPostBack, bool requiresJavaScriptProtocol, bool trackFocus, bool clientSubmit, bool performValidation, string validationGroup)
public string get_ActionUrl()
public void set_ActionUrl(string value)
public string get_Argument()
public void set_Argument(string value)
public bool get_AutoPostBack()
public void set_AutoPostBack(bool value)
public bool get_ClientSubmit()
public void set_ClientSubmit(bool value)
public bool get_PerformValidation()
public void set_PerformValidation(bool value)
public bool get_RequiresJavaScriptProtocol()
public void set_RequiresJavaScriptProtocol(bool value)
public Control get_TargetControl()
public bool get_TrackFocus()
public void set_TrackFocus(bool value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
internal bool get_RequiresSpecialPostBack()
}
public System.Web.UI.PropertyConverter : object {
public object EnumFromString(Type enumType, string value)
public string EnumToString(Type enumType, object enumValue)
public object ObjectFromString(Type objType, MemberInfo propertyInfo, string value)
}
public System.Web.UI.PropertyEntry : object {
private Type type
private string name
private string filter
private PropertyInfo pinfo
public Type DeclaringType
public string Filter
public string Name
public PropertyInfo PropertyInfo
public Type Type
public Type get_DeclaringType()
public string get_Filter()
public void set_Filter(string value)
public string get_Name()
public void set_Name(string value)
public PropertyInfo get_PropertyInfo()
public void set_PropertyInfo(PropertyInfo value)
public Type get_Type()
public void set_Type(Type value)
}
internal System.Web.UI.ReadOnlyDataSourceView : HierarchicalDataSourceView {
private IHierarchicalEnumerable datasource
public void .ctor(IHierarchicalEnumerable datasource)
public IHierarchicalEnumerable Select()
}
public System.Web.UI.RenderMethod : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(HtmlTextWriter output, Control container)
public IAsyncResult BeginInvoke(HtmlTextWriter output, Control container, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.RenderTraceListener : object {
public IList`1<Func`1<RenderTraceListener>> ListenerFactories
public IList`1<Func`1<RenderTraceListener>> get_ListenerFactories()
public void BeginRendering(TextWriter writer, object renderedObject)
public void EndRendering(TextWriter writer, object renderedObject)
public void Initialize(HttpContext context)
public void SetTraceData(object tracedObject, object traceDataKey, object traceDataValue)
public void ShareTraceData(object source, object destination)
}
internal System.Web.UI.ResourceBasedLiteralControl : LiteralControl {
private IntPtr ptr
private int length
public string Text
public void .ctor(IntPtr ptr, int length)
public string get_Text()
public void set_Text(string value)
protected internal void Render(HtmlTextWriter writer)
}
public System.Web.UI.RootBuilder : TemplateBuilder {
private Hashtable built_objects
private Hashtable htmlControls
private Hashtable htmlInputControls
private AspComponentFoundry foundry
internal AspComponentFoundry Foundry
public IDictionary BuiltObjects
public void .ctor(TemplateParser parser)
public Type GetChildControlType(string tagName, IDictionary attribs)
private Type LookupHtmlControls(string tagName, IDictionary attribs)
internal AspComponentFoundry get_Foundry()
internal void set_Foundry(AspComponentFoundry value)
public IDictionary get_BuiltObjects()
}
internal System.Web.UI.ServerSideScript : object {
public string Script
public ILocation Location
public void .ctor(string script, ILocation location)
}
public System.Web.UI.SessionPageStatePersister : PageStatePersister {
public void .ctor(Page page)
public void Load()
public void Save()
}
internal System.Web.UI.SimpleHandlerFactory : object {
public IHttpHandler GetHandler(HttpContext context, string requestType, string virtualPath, string path)
public void ReleaseHandler(IHttpHandler handler)
}
public System.Web.UI.SimplePropertyEntry : PropertyEntry {
private bool useSetAttribute
private object val
public bool UseSetAttribute
public object Value
public string PersistedValue
public bool get_UseSetAttribute()
public void set_UseSetAttribute(bool value)
public object get_Value()
public void set_Value(object value)
public string get_PersistedValue()
public void set_PersistedValue(string value)
}
public System.Web.UI.SimpleWebHandlerParser : object {
private HttpContext context
private string vPath
private string physPath
private string className
private bool debug
private string language
private string program
private bool gotDefault
private ArrayList assemblies
private ArrayList dependencies
private Hashtable anames
private string baseDir
private string baseVDir
private TextReader reader
private int appAssemblyIndex
private Type cachedType
protected string DefaultDirectiveName
internal HttpContext Context
internal string VirtualPath
internal string PhysicalPath
internal string ClassName
internal bool Debug
internal string Language
internal string Program
internal ArrayList Assemblies
internal ArrayList Dependencies
internal string BaseDir
internal string BaseVirtualDir
private CompilationSection CompilationConfig
internal TextReader Reader
protected void .ctor(HttpContext context, string virtualPath, string physicalPath)
internal void .ctor(HttpContext context, string virtualPath, string physicalPath, TextReader reader)
protected Type GetCompiledTypeFromCache()
private void GetDirectivesAndContent()
private void TagParsed(ILocation location, TagType tagtype, string tagid, TagAttributes attributes)
private void TextParsed(ILocation location, string text)
private void ParseError(ILocation location, string message)
private string GetAndRemove(IDictionary table, string key)
private void ParseDirective(string line)
internal void AddDefaultDirective(ILocation location, TagAttributes attrs)
internal void AddAssemblyDirective(ILocation location, TagAttributes attrs)
internal void AddAssembly(Assembly assembly, bool fullPath)
internal Assembly AddAssemblyByName(string name, ILocation location)
private void AddAssembliesInBin()
private Assembly LoadAssemblyFromBin(string name)
private Assembly GetAssemblyFromSource(string vpath, ILocation location)
internal Type GetTypeFromBin(string tname)
internal void AddDependency(string filename)
protected string get_DefaultDirectiveName()
internal HttpContext get_Context()
internal string get_VirtualPath()
internal string get_PhysicalPath()
internal string get_ClassName()
internal bool get_Debug()
internal string get_Language()
internal string get_Program()
internal ArrayList get_Assemblies()
internal ArrayList get_Dependencies()
internal string get_BaseDir()
internal string get_BaseVirtualDir()
private CompilationSection get_CompilationConfig()
internal TextReader get_Reader()
internal void set_Reader(TextReader value)
}
public System.Web.UI.SkinBuilder : ControlBuilder {
private Control control
public void .ctor(ThemeProvider provider, Control control, ControlBuilder skinBuilder, string themePath)
public Control ApplyTheme()
}
public System.Web.UI.StateBag : object {
private HybridDictionary ht
private bool track
private bool System.Web.UI.IStateManager.IsTrackingViewState
internal bool IsTrackingViewState
public int Count
public object Item
public ICollection Keys
public ICollection Values
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private object System.Collections.IDictionary.Item
private bool System.Collections.IDictionary.IsFixedSize
private bool System.Collections.IDictionary.IsReadOnly
public void .ctor(bool ignoreCase)
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
internal bool get_IsTrackingViewState()
internal void LoadViewState(object savedState)
internal object SaveViewState()
internal void TrackViewState()
public StateItem Add(string key, object value)
internal string GetString(string key, string def)
internal bool GetBool(string key, bool def)
internal char GetChar(string key, char def)
internal int GetInt(string key, int def)
internal short GetShort(string key, short def)
public void Clear()
public IDictionaryEnumerator GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool IsItemDirty(string key)
public void Remove(string key)
public void SetItemDirty(string key, bool dirty)
public int get_Count()
public object get_Item(string key)
public void set_Item(string key, object value)
public ICollection get_Keys()
public ICollection get_Values()
private void System.Collections.IDictionary.Add(object key, object value)
private void System.Collections.IDictionary.Remove(object key)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private bool System.Collections.IDictionary.Contains(object key)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private object System.Collections.IDictionary.get_Item(object key)
private void System.Collections.IDictionary.set_Item(object key, object value)
private bool System.Collections.IDictionary.get_IsFixedSize()
private bool System.Collections.IDictionary.get_IsReadOnly()
public void SetDirty(bool dirty)
}
public System.Web.UI.StateItem : object {
private bool _isDirty
private object _value
public bool IsDirty
public object Value
public bool get_IsDirty()
public void set_IsDirty(bool value)
public object get_Value()
public void set_Value(object value)
internal void .ctor(object value)
}
public System.Web.UI.StateManagedCollection : object {
private ArrayList items
private bool saveEverything
private bool isTrackingViewState
private bool System.Web.UI.IStateManager.IsTrackingViewState
public int Count
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
protected object CreateKnownType(int index)
public void SetDirty()
protected void SetDirtyObject(object o)
protected Type[] GetKnownTypes()
protected void OnClear()
protected void OnClearComplete()
protected void OnInsert(int index, object value)
protected void OnInsertComplete(int index, object value)
protected void OnRemove(int index, object value)
protected void OnRemoveComplete(int index, object value)
protected void OnValidate(object value)
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private void AddListItem(List`1& list, T item)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
public void Clear()
public IEnumerator GetEnumerator()
public void CopyTo(Array array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
public int get_Count()
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
}
public System.Web.UI.StaticPartialCachingControl : BasePartialCachingControl {
private BuildMethod buildMethod
public void .ctor(string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, BuildMethod buildMethod)
public void .ctor(string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, string sqlDependency, BuildMethod buildMethod)
public void .ctor(string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, string sqlDependency, BuildMethod buildMethod, string providerName)
public void BuildCachedControl(Control parent, string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, string sqlDependency, BuildMethod buildMethod)
public void BuildCachedControl(Control parent, string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, BuildMethod buildMethod)
public void BuildCachedControl(Control parent, string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, string sqlDependency, BuildMethod buildMethod, string providerName)
internal Control CreateControl()
}
internal System.Web.UI.StringPropertyBuilder : ControlBuilder {
private string prop_name
public string PropertyName
public void .ctor(string prop_name)
public string get_PropertyName()
public bool AllowWhitespaceLiterals()
public void AppendSubBuilder(ControlBuilder subBuilder)
}
public System.Web.UI.SupportsEventValidationAttribute : Attribute {
private Hashtable _typesSupportsEventValidation
internal bool SupportsEventValidation(Type type)
}
public System.Web.UI.TagPrefixAttribute : Attribute {
private string namespaceName
private string tagPrefix
public string NamespaceName
public string TagPrefix
public void .ctor(string namespaceName, string tagPrefix)
public string get_NamespaceName()
public string get_TagPrefix()
}
internal System.Web.UI.TemplateBinding : object {
public Type ControlType
public string ControlProperty
public string ControlId
public string FieldName
public void .ctor(Type controlType, string controlProperty, string controlId, string fieldName)
}
public System.Web.UI.TemplateBuilder : ControlBuilder {
private string text
private TemplateContainerAttribute containerAttribute
private TemplateInstanceAttribute instanceAttribute
private List`1<TemplateBinding> bindings
public string Text
internal Type ContainerType
internal Nullable`1<TemplateInstance> TemplateInstance
internal BindingDirection BindingDirection
internal ICollection Bindings
internal void .ctor(ICustomAttributeProvider prov)
public string get_Text()
public void set_Text(string value)
internal Type get_ContainerType()
internal Nullable`1<TemplateInstance> get_TemplateInstance()
internal BindingDirection get_BindingDirection()
internal void RegisterBoundProperty(Type controlType, string controlProperty, string controlId, string fieldName)
internal ICollection get_Bindings()
public object BuildObject()
public void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string ID, IDictionary attribs)
public void InstantiateIn(Control container)
public bool NeedsTagInnerText()
public void SetTagInnerText(string text)
}
public System.Web.UI.TemplateContainerAttribute : Attribute {
private Type containerType
private BindingDirection direction
public BindingDirection BindingDirection
public Type ContainerType
public void .ctor(Type containerType, BindingDirection bindingDirection)
public BindingDirection get_BindingDirection()
public void .ctor(Type containerType)
public Type get_ContainerType()
}
public System.Web.UI.TemplateContentType : Enum {
public int value__
public TemplateContentType Complete
public TemplateContentType Fragment
}
public System.Web.UI.TemplateControl : Control {
private Assembly _System_Web_Assembly
private object abortTransaction
private object commitTransaction
private object error
private String[] methodNames
private BindingFlags bflags
private string _appRelativeVirtualPath
private StringResourceData resource_data
private SplitOrderedList`2<Type, ArrayList> auto_event_info
protected int AutoHandlers
protected bool SupportAutoEvents
public string AppRelativeVirtualPath
internal TemplateControl TemplateControlInternal
protected int get_AutoHandlers()
protected void set_AutoHandlers(int value)
protected bool get_SupportAutoEvents()
public string get_AppRelativeVirtualPath()
public void set_AppRelativeVirtualPath(string value)
protected void Construct()
protected LiteralControl CreateResourceBasedLiteralControl(int offset, int size, bool fAsciiOnly)
internal void WireupAutomaticEvents()
private ArrayList CollectAutomaticEventInfo()
protected void FrameworkInitialize()
private Type GetTypeFromControlPath(string virtualPath)
public Control LoadControl(string virtualPath)
public Control LoadControl(Type t, Object[] parameters)
public ITemplate LoadTemplate(string virtualPath)
protected void OnAbortTransaction(EventArgs e)
protected void OnCommitTransaction(EventArgs e)
protected void OnError(EventArgs e)
public Control ParseControl(string content)
public Control ParseControl(string content, bool ignoreParserFilter)
public object ReadStringResource()
protected object GetGlobalResourceObject(string className, string resourceKey)
protected object GetGlobalResourceObject(string className, string resourceKey, Type objType, string propName)
protected object GetLocalResourceObject(string resourceKey)
protected object GetLocalResourceObject(string resourceKey, Type objType, string propName)
internal TemplateControl get_TemplateControlInternal()
public object ReadStringResource(Type t)
protected void SetStringResourcePointer(object stringResourcePointer, int maxResourceOffset)
private IntPtr AddOffset(IntPtr ptr, int offset)
protected void WriteUTF8ResourceString(HtmlTextWriter output, int offset, int size, bool fAsciiOnly)
public void add_AbortTransaction(EventHandler value)
public void remove_AbortTransaction(EventHandler value)
public void add_CommitTransaction(EventHandler value)
public void remove_CommitTransaction(EventHandler value)
public void add_Error(EventHandler value)
public void remove_Error(EventHandler value)
protected internal object Eval(string expression)
protected internal string Eval(string expression, string format)
protected internal object XPath(string xPathExpression)
protected internal object XPath(string xPathExpression, IXmlNamespaceResolver resolver)
protected internal string XPath(string xPathExpression, string format)
protected internal string XPath(string xPathExpression, string format, IXmlNamespaceResolver resolver)
protected internal IEnumerable XPathSelect(string xPathExpression)
protected internal IEnumerable XPathSelect(string xPathExpression, IXmlNamespaceResolver resolver)
private int System.Web.UI.IFilterResolutionService.CompareFilters(string filter1, string filter2)
private bool System.Web.UI.IFilterResolutionService.EvaluateFilter(string filterName)
public bool TestDeviceFilter(string filterName)
}
public System.Web.UI.TemplateControlParser : BaseTemplateParser {
private bool autoEventWireup
private bool enableViewState
private CompilationMode compilationMode
private Nullable`1<ClientIDMode> clientIDMode
private TextReader reader
internal bool AutoEventWireup
internal bool EnableViewState
internal CompilationMode CompilationMode
internal Nullable`1<ClientIDMode> ClientIDMode
internal TextReader Reader
internal void LoadConfigDefaults()
internal void ProcessMainAttributes(IDictionary atts)
internal object GetCompiledInstance()
internal void AddDirective(string directive, IDictionary atts)
internal void HandleOptions(object obj)
internal bool get_AutoEventWireup()
internal bool get_EnableViewState()
internal CompilationMode get_CompilationMode()
internal Nullable`1<ClientIDMode> get_ClientIDMode()
internal TextReader get_Reader()
internal void set_Reader(TextReader value)
}
public System.Web.UI.TemplateInstance : Enum {
public int value__
public TemplateInstance Multiple
public TemplateInstance Single
}
public System.Web.UI.TemplateInstanceAttribute : Attribute {
public TemplateInstanceAttribute Multiple
public TemplateInstanceAttribute Single
public TemplateInstanceAttribute Default
private TemplateInstance _instances
public TemplateInstance Instances
public void .ctor(TemplateInstance instances)
public TemplateInstance get_Instances()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Web.UI.TemplateParser : BaseParser {
private string inputFile
private string text
private IDictionary mainAttributes
private List`1<string> dependencies
private List`1<string> assemblies
private IDictionary anames
private String[] binDirAssemblies
private Dictionary`2<string, bool> namespacesCache
private Dictionary`2<string, bool> imports
private List`1<string> interfaces
private List`1<ServerSideScript> scripts
private Type baseType
private bool baseTypeIsGlobal
private string className
private RootBuilder rootBuilder
private bool debug
private string compilerOptions
private string language
private bool implicitLanguage
private bool strictOn
private bool explicitOn
private bool linePragmasOn
private bool output_cache
private int oc_duration
private string oc_header
private string oc_custom
private string oc_param
private string oc_controls
private string oc_content_encodings
private string oc_cacheprofile
private string oc_sqldependency
private bool oc_nostore
private OutputCacheParsedParams oc_parsed_params
private bool oc_shared
private OutputCacheLocation oc_location
internal int allowedMainDirectives
private Byte[] md5checksum
private string src
private bool srcIsLegacy
private string partialClassName
private string codeFileBaseClass
private string metaResourceKey
private Type codeFileBaseClassType
private Type pageParserFilterType
private PageParserFilter pageParserFilter
private List`1<UnknownAttributeDescriptor> unknownMainAttributes
private Stack`1<string> includeDirs
private List`1<string> registeredTagNames
private ILocation directiveLocation
private int appAssemblyIndex
private long autoClassCounter
private AspGenerator <AspGenerator>k__BackingField
internal string DefaultBaseTypeName
internal string DefaultDirectiveName
internal bool LinePragmasOn
internal Byte[] MD5Checksum
internal PageParserFilter PageParserFilter
internal Type PageParserFilterType
internal Type DefaultBaseType
internal ILocation DirectiveLocation
internal string ParserDir
internal string InputFile
internal bool IsPartial
internal string CodeBehindSource
internal string PartialClassName
internal string CodeFileBaseClass
internal string MetaResourceKey
internal Type CodeFileBaseClassType
internal List`1<UnknownAttributeDescriptor> UnknownMainAttributes
internal string Text
internal Type BaseType
internal bool BaseTypeIsGlobal
internal string ClassName
internal List`1<ServerSideScript> Scripts
internal Dictionary`2<string, bool> Imports
internal List`1<string> Interfaces
internal List`1<string> Assemblies
internal RootBuilder RootBuilder
internal List`1<string> Dependencies
internal string CompilerOptions
internal string Language
internal bool ImplicitLanguage
internal bool StrictOn
internal bool ExplicitOn
internal bool Debug
internal bool OutputCache
internal int OutputCacheDuration
internal OutputCacheParsedParams OutputCacheParsedParameters
internal string OutputCacheSqlDependency
internal string OutputCacheCacheProfile
internal string OutputCacheVaryByContentEncodings
internal bool OutputCacheNoStore
internal TextReader Reader
internal string OutputCacheVaryByHeader
internal string OutputCacheVaryByCustom
internal string OutputCacheVaryByControls
internal bool OutputCacheShared
internal OutputCacheLocation OutputCacheLocation
internal string OutputCacheVaryByParam
internal List`1<string> RegisteredTagNames
internal PagesSection PagesConfig
internal AspGenerator AspGenerator
internal void LoadConfigDefaults()
internal void AddApplicationAssembly()
internal Type CompileIntoType()
internal void AddControl(Type type, IDictionary attributes)
private void AddNamespaces(Dictionary`2<string, bool> imports)
internal void RegisterCustomControl(string tagPrefix, string tagName, string src)
internal void RegisterNamespace(string tagPrefix, string ns, string assembly)
internal void HandleOptions(object obj)
internal string GetOneKey(IDictionary tbl)
internal void AddDirective(string directive, IDictionary atts)
internal void ProcessOutputCacheAttributes(IDictionary atts)
internal Type LoadType(string typeName)
internal void AddInterface(string iface)
internal void AddImport(string namesp)
private void AddAssemblyForNamespace(string namesp)
private bool FindNamespaceInAssembly(Assembly asm, string namesp)
internal void AddSourceDependency(string filename)
internal void AddDependency(string filename)
internal void AddDependency(string filename, bool combinePaths)
internal void AddAssembly(Assembly assembly, bool fullPath)
internal Assembly AddAssemblyByFileName(string filename)
internal Assembly AddAssemblyByName(string name)
internal void ProcessMainAttributes(IDictionary atts)
private void RegisterTagName(string tagName)
private void CheckUnknownAttribute(string name, string val, string inherits)
internal void SetBaseType(string type)
internal void SetLanguage(string language)
internal void PushIncludeDir(string dir)
internal string PopIncludeDir()
private Assembly GetAssemblyFromSource(string vpath)
internal string get_DefaultBaseTypeName()
internal string get_DefaultDirectiveName()
internal bool get_LinePragmasOn()
internal Byte[] get_MD5Checksum()
internal void set_MD5Checksum(Byte[] value)
internal PageParserFilter get_PageParserFilter()
internal Type get_PageParserFilterType()
internal Type get_DefaultBaseType()
internal ILocation get_DirectiveLocation()
internal string get_ParserDir()
internal string get_InputFile()
internal void set_InputFile(string value)
internal bool get_IsPartial()
internal string get_CodeBehindSource()
internal string get_PartialClassName()
internal string get_CodeFileBaseClass()
internal string get_MetaResourceKey()
internal Type get_CodeFileBaseClassType()
internal List`1<UnknownAttributeDescriptor> get_UnknownMainAttributes()
internal string get_Text()
internal void set_Text(string value)
internal Type get_BaseType()
internal bool get_BaseTypeIsGlobal()
internal void set_BaseTypeIsGlobal(bool value)
internal string EncodeIdentifier(string value)
internal string get_ClassName()
internal List`1<ServerSideScript> get_Scripts()
internal Dictionary`2<string, bool> get_Imports()
internal List`1<string> get_Interfaces()
internal List`1<string> get_Assemblies()
internal RootBuilder get_RootBuilder()
internal void set_RootBuilder(RootBuilder value)
internal List`1<string> get_Dependencies()
internal void set_Dependencies(List`1<string> value)
internal string get_CompilerOptions()
internal string get_Language()
internal bool get_ImplicitLanguage()
internal bool get_StrictOn()
internal bool get_ExplicitOn()
internal bool get_Debug()
internal bool get_OutputCache()
internal int get_OutputCacheDuration()
internal OutputCacheParsedParams get_OutputCacheParsedParameters()
internal string get_OutputCacheSqlDependency()
internal string get_OutputCacheCacheProfile()
internal string get_OutputCacheVaryByContentEncodings()
internal bool get_OutputCacheNoStore()
internal TextReader get_Reader()
internal void set_Reader(TextReader value)
internal string get_OutputCacheVaryByHeader()
internal string get_OutputCacheVaryByCustom()
internal string get_OutputCacheVaryByControls()
internal bool get_OutputCacheShared()
internal OutputCacheLocation get_OutputCacheLocation()
internal string get_OutputCacheVaryByParam()
internal List`1<string> get_RegisteredTagNames()
internal PagesSection get_PagesConfig()
internal AspGenerator get_AspGenerator()
internal void set_AspGenerator(AspGenerator value)
public ITemplate ParseTemplate(string content, string virtualPath, bool ignoreFilter)
}
public System.Web.UI.TemplatePropertyEntry : BuilderPropertyEntry {
public bool BindableTemplate
public bool get_BindableTemplate()
}
public System.Web.UI.ThemeableAttribute : Attribute {
public ThemeableAttribute Yes
public ThemeableAttribute No
public ThemeableAttribute Default
private bool _themeable
private Hashtable _themeableTypes
public bool Themeable
public void .ctor(bool themeable)
public bool get_Themeable()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
public bool IsObjectThemeable(object instance)
public bool IsTypeThemeable(Type type)
}
internal System.Web.UI.ThemeDirectoryCompiler : object {
public Type GetCompiledType(string theme, HttpContext context)
public PageTheme GetCompiledInstance(string theme, HttpContext context)
}
public System.Web.UI.ThemeProvider : object {
private IDesignerHost host
private string name
private String[] cssFiles
public int ContentHashCode
public ICollection CssFiles
public IDesignerHost DesignerHost
public string ThemeName
public void .ctor(IDesignerHost host, string name, string themeDefinition, String[] cssFiles, string themePath)
public SkinBuilder GetSkinBuilder(Control control)
public IDictionary GetSkinControlBuildersForControlType(Type type)
public ICollection GetSkinsForControl(Type type)
public int get_ContentHashCode()
public ICollection get_CssFiles()
public IDesignerHost get_DesignerHost()
public string get_ThemeName()
}
public System.Web.UI.ToolboxDataAttribute : Attribute {
public ToolboxDataAttribute Default
private string data
public string Data
public void .ctor(string data)
public string get_Data()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Web.UI.Triplet : object {
public object First
public object Second
public object Third
public void .ctor(object x, object y)
public void .ctor(object x, object y, object z)
}
internal System.Web.UI.UnknownAttributeDescriptor : object {
public MemberInfo Info
public object Value
public void .ctor(MemberInfo memberInfo, object value)
}
public System.Web.UI.UnobtrusiveValidationMode : Enum {
public int value__
public UnobtrusiveValidationMode None
public UnobtrusiveValidationMode WebForms
}
public System.Web.UI.UrlPropertyAttribute : Attribute {
private string filter
public string Filter
public void .ctor(string filter)
public string get_Filter()
public bool Equals(object obj)
public int GetHashCode()
}
public System.Web.UI.UrlTypes : Enum {
public int value__
public UrlTypes Absolute
public UrlTypes AppRelative
public UrlTypes DocRelative
public UrlTypes RootRelative
}
public System.Web.UI.UserControl : TemplateControl {
private ControlCachePolicy cachePolicy
private bool initialized
private AttributeCollection attributes
private StateBag attrBag
public HttpApplicationState Application
public AttributeCollection Attributes
public Cache Cache
public ControlCachePolicy CachePolicy
public bool IsPostBack
public HttpRequest Request
public HttpResponse Response
public HttpServerUtility Server
public HttpSessionState Session
public TraceContext Trace
private string System.Web.UI.IUserControlDesignerAccessor.InnerText
private string System.Web.UI.IUserControlDesignerAccessor.TagName
public HttpApplicationState get_Application()
private void EnsureAttributes()
public AttributeCollection get_Attributes()
public Cache get_Cache()
public ControlCachePolicy get_CachePolicy()
public bool get_IsPostBack()
public HttpRequest get_Request()
public HttpResponse get_Response()
public HttpServerUtility get_Server()
public HttpSessionState get_Session()
public TraceContext get_Trace()
public void DesignerInitialize()
public void InitializeAsUserControl(Page page)
internal void InitializeAsUserControlInternal()
public string MapPath(string virtualPath)
protected void LoadViewState(object savedState)
protected internal void OnInit(EventArgs e)
protected object SaveViewState()
private string System.Web.UI.IAttributeAccessor.GetAttribute(string name)
private void System.Web.UI.IAttributeAccessor.SetAttribute(string name, string value)
private string System.Web.UI.IUserControlDesignerAccessor.get_InnerText()
private void System.Web.UI.IUserControlDesignerAccessor.set_InnerText(string value)
private string System.Web.UI.IUserControlDesignerAccessor.get_TagName()
private void System.Web.UI.IUserControlDesignerAccessor.set_TagName(string value)
private int System.Web.UI.IFilterResolutionService.CompareFilters(string filter1, string filter2)
private bool System.Web.UI.IFilterResolutionService.EvaluateFilter(string filterName)
public bool TryUpdateModel(TModel model)
public bool TryUpdateModel(TModel model, IValueProvider valueProvider)
public void UpdateModel(TModel model)
public void UpdateModel(TModel model, IValueProvider valueProvider)
}
public System.Web.UI.UserControlControlBuilder : ControlBuilder {
public bool NeedsTagInnerText()
public void SetTagInnerText(string text)
public object BuildObject()
}
internal System.Web.UI.UserControlParser : TemplateControlParser {
private string masterPage
private string providerName
internal Type DefaultBaseType
internal string DefaultBaseTypeName
internal string DefaultDirectiveName
internal string MasterPageFile
internal string ProviderName
internal void .ctor(VirtualPath virtualPath, string inputFile, HttpContext context)
internal void .ctor(VirtualPath virtualPath, string inputFile, List`1<string> deps, HttpContext context)
internal void .ctor(VirtualPath virtualPath, string inputFile, HttpContext context, string type)
internal void .ctor(VirtualPath virtualPath, TextReader reader, HttpContext context)
internal void .ctor(VirtualPath virtualPath, string inputFile, TextReader reader, HttpContext context)
internal void .ctor(TextReader reader, Nullable`1<int> uniqueSuffix, HttpContext context)
internal Type GetCompiledType(TextReader reader, Nullable`1<int> inputHashCode, HttpContext context)
internal Type GetCompiledType(string virtualPath, string inputFile, List`1<string> deps, HttpContext context)
public Type GetCompiledType(string virtualPath, string inputFile, HttpContext context)
internal Type CompileIntoType()
internal void ProcessMainAttributes(IDictionary atts)
internal void ProcessOutputCacheAttributes(IDictionary atts)
internal Type get_DefaultBaseType()
internal string get_DefaultBaseTypeName()
internal string get_DefaultDirectiveName()
internal string get_MasterPageFile()
internal string get_ProviderName()
}
internal System.Web.UI.Util : object {
internal string GetUrlWithApplicationPath(HttpContextBase context, string url)
}
public System.Web.UI.ValidateRequestMode : Enum {
public int value__
public ValidateRequestMode Inherit
public ValidateRequestMode Disabled
public ValidateRequestMode Enabled
}
public System.Web.UI.ValidationPropertyAttribute : Attribute {
private string name
public string Name
public void .ctor(string name)
public string get_Name()
}
public System.Web.UI.ValidationSettings : object {
public UnobtrusiveValidationMode UnobtrusiveValidationMode
public UnobtrusiveValidationMode get_UnobtrusiveValidationMode()
public void set_UnobtrusiveValidationMode(UnobtrusiveValidationMode value)
}
public System.Web.UI.ValidatorCollection : object {
private ArrayList _validators
public int Count
public bool IsReadOnly
public bool IsSynchronized
public IValidator Item
public object SyncRoot
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public IValidator get_Item(int index)
public object get_SyncRoot()
public void Add(IValidator validator)
public bool Contains(IValidator validator)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void Remove(IValidator validator)
}
public System.Web.UI.VerificationAttribute : Attribute {
public string Checkpoint
public string ConditionalProperty
public string ConditionalValue
public string Guideline
public string GuidelineUrl
public string Message
public int Priority
public VerificationConditionalOperator VerificationConditionalOperator
public VerificationReportLevel VerificationReportLevel
public VerificationRule VerificationRule
public void .ctor(string guideline, string checkpoint, VerificationReportLevel reportLevel, int priority, string message)
public void .ctor(string guideline, string checkpoint, VerificationReportLevel reportLevel, int priority, string message, VerificationRule rule, string conditionalProperty)
public void .ctor(string guideline, string checkpoint, VerificationReportLevel reportLevel, int priority, string message, VerificationRule rule, string conditionalProperty, VerificationConditionalOperator conditionalOperator, string conditionalValue, string guidelineUrl)
public string get_Checkpoint()
public string get_ConditionalProperty()
public string get_ConditionalValue()
public string get_Guideline()
public string get_GuidelineUrl()
public string get_Message()
public int get_Priority()
public VerificationConditionalOperator get_VerificationConditionalOperator()
public VerificationReportLevel get_VerificationReportLevel()
public VerificationRule get_VerificationRule()
}
public System.Web.UI.VerificationConditionalOperator : Enum {
public int value__
public VerificationConditionalOperator Equals
public VerificationConditionalOperator NotEquals
}
public System.Web.UI.VerificationReportLevel : Enum {
public int value__
public VerificationReportLevel Error
public VerificationReportLevel Warning
public VerificationReportLevel Guideline
}
public System.Web.UI.VerificationRule : Enum {
public int value__
public VerificationRule Required
public VerificationRule Prohibited
public VerificationRule NotEmptyString
}
public System.Web.UI.ViewStateEncryptionMode : Enum {
public int value__
public ViewStateEncryptionMode Auto
public ViewStateEncryptionMode Always
public ViewStateEncryptionMode Never
}
public System.Web.UI.ViewStateException : Exception {
public bool IsConnected
public string Message
public string Path
public string PersistedState
public string Referer
public string RemoteAddress
public string RemotePort
public string UserAgent
public bool get_IsConnected()
public string get_Message()
public string get_Path()
public string get_PersistedState()
public string get_Referer()
public string get_RemoteAddress()
public string get_RemotePort()
public string get_UserAgent()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Web.UI.ViewStateMode : Enum {
public int value__
public ViewStateMode Inherit
public ViewStateMode Enabled
public ViewStateMode Disabled
}
public System.Web.UI.VirtualReferenceType : Enum {
public int value__
public VirtualReferenceType Page
public VirtualReferenceType UserControl
public VirtualReferenceType Master
public VirtualReferenceType SourceFile
public VirtualReferenceType Other
}
public System.Web.UI.WebControls.AccessDataSource : SqlDataSource {
private string PROVIDER_NAME
private string PROVIDER_STRING
private string connectionString
public string SqlCacheDependency
public string ConnectionString
public string DataFile
public string ProviderName
public void .ctor(string dataFile, string selectCommand)
protected SqlDataSourceView CreateDataSourceView(string viewName)
public string get_SqlCacheDependency()
public void set_SqlCacheDependency(string value)
protected DbProviderFactory GetDbProviderFactory()
private string GetPhysicalDataFilePath()
public string get_ConnectionString()
public void set_ConnectionString(string value)
public string get_DataFile()
public void set_DataFile(string value)
public string get_ProviderName()
public void set_ProviderName(string value)
}
public System.Web.UI.WebControls.AccessDataSourceView : SqlDataSourceView {
private OleDbConnection oleConnection
private OleDbCommand oleCommand
private AccessDataSource dataSource
public void .ctor(AccessDataSource owner, string name, HttpContext context)
protected internal IEnumerable ExecuteSelect(DataSourceSelectArguments arguments)
}
public System.Web.UI.WebControls.Adapters.DataBoundControlAdapter : WebControlAdapter {
protected DataBoundControl Control
internal void .ctor(DataBoundControl c)
protected internal void PerformDataBinding(IEnumerable data)
protected DataBoundControl get_Control()
}
public System.Web.UI.WebControls.Adapters.HideDisabledControlAdapter : WebControlAdapter {
internal void .ctor(WebControl c)
protected internal void Render(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.Adapters.HierarchicalDataBoundControlAdapter : WebControlAdapter {
protected HierarchicalDataBoundControl Control
internal void .ctor(HierarchicalDataBoundControl c)
protected internal void PerformDataBinding()
protected HierarchicalDataBoundControl get_Control()
}
public System.Web.UI.WebControls.Adapters.MenuAdapter : WebControlAdapter {
protected Menu Control
internal void .ctor(Menu c)
protected internal void OnInit(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected void RaisePostBackEvent(string eventArgument)
protected void RenderBeginTag(HtmlTextWriter writer)
protected void RenderContents(HtmlTextWriter writer)
protected void RenderEndTag(HtmlTextWriter writer)
protected internal void RenderItem(HtmlTextWriter writer, MenuItem item, int position)
protected internal void LoadAdapterControlState(object state)
protected internal object SaveAdapterControlState()
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected Menu get_Control()
}
public System.Web.UI.WebControls.Adapters.WebControlAdapter : ControlAdapter {
protected WebControl Control
protected bool IsEnabled
internal void .ctor(WebControl wc)
protected internal void Render(HtmlTextWriter writer)
protected void RenderBeginTag(HtmlTextWriter writer)
protected void RenderContents(HtmlTextWriter writer)
protected void RenderEndTag(HtmlTextWriter writer)
protected WebControl get_Control()
protected bool get_IsEnabled()
}
public System.Web.UI.WebControls.AdCreatedEventArgs : EventArgs {
private IDictionary properties
private string alt_text
private string img_url
private string nav_url
public IDictionary AdProperties
public string AlternateText
public string ImageUrl
public string NavigateUrl
public void .ctor(IDictionary adProperties)
public IDictionary get_AdProperties()
public string get_AlternateText()
public void set_AlternateText(string value)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public string get_NavigateUrl()
public void set_NavigateUrl(string value)
}
public System.Web.UI.WebControls.AdCreatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, AdCreatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, AdCreatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.AdRotator : DataBoundControl {
private AdCreatedEventArgs createdargs
private ArrayList ads
private string ad_file
private object AdCreatedEvent
public string AdvertisementFile
public string AlternateTextField
public FontInfo Font
public string ImageUrlField
public string KeywordFilter
public string NavigateUrlField
public string Target
public string UniqueID
protected HtmlTextWriterTag TagKey
protected internal void OnInit(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected internal void PerformDataBinding(IEnumerable data)
protected void PerformSelect()
protected internal void Render(HtmlTextWriter writer)
private string ResolveAdUrl(string url)
private Hashtable ChooseAd()
private void ReadAdsFromFile(string s)
public string get_AdvertisementFile()
public void set_AdvertisementFile(string value)
public string get_AlternateTextField()
public void set_AlternateTextField(string value)
public FontInfo get_Font()
public string get_ImageUrlField()
public void set_ImageUrlField(string value)
public string get_KeywordFilter()
public void set_KeywordFilter(string value)
public string get_NavigateUrlField()
public void set_NavigateUrlField(string value)
public string get_Target()
public void set_Target(string value)
public string get_UniqueID()
protected HtmlTextWriterTag get_TagKey()
protected void OnAdCreated(AdCreatedEventArgs e)
public void add_AdCreated(AdCreatedEventHandler value)
public void remove_AdCreated(AdCreatedEventHandler value)
}
public System.Web.UI.WebControls.AssociatedControlConverter : ControlIDConverter {
protected bool FilterControl(Control control)
}
public System.Web.UI.WebControls.AuthenticateEventArgs : EventArgs {
private bool _authenticated
public bool Authenticated
public void .ctor(bool authenticated)
public bool get_Authenticated()
public void set_Authenticated(bool value)
}
public System.Web.UI.WebControls.AuthenticateEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, AuthenticateEventArgs e)
public IAsyncResult BeginInvoke(object sender, AuthenticateEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.AutoCompleteType : Enum {
public int value__
public AutoCompleteType None
public AutoCompleteType Disabled
public AutoCompleteType Cellular
public AutoCompleteType Company
public AutoCompleteType Department
public AutoCompleteType DisplayName
public AutoCompleteType Email
public AutoCompleteType FirstName
public AutoCompleteType Gender
public AutoCompleteType HomeCity
public AutoCompleteType HomeCountryRegion
public AutoCompleteType HomeFax
public AutoCompleteType HomePhone
public AutoCompleteType HomeState
public AutoCompleteType HomeStreetAddress
public AutoCompleteType HomeZipCode
public AutoCompleteType Homepage
public AutoCompleteType JobTitle
public AutoCompleteType LastName
public AutoCompleteType MiddleName
public AutoCompleteType Notes
public AutoCompleteType Office
public AutoCompleteType Pager
public AutoCompleteType BusinessCity
public AutoCompleteType BusinessCountryRegion
public AutoCompleteType BusinessFax
public AutoCompleteType BusinessPhone
public AutoCompleteType BusinessState
public AutoCompleteType BusinessStreetAddress
public AutoCompleteType BusinessUrl
public AutoCompleteType BusinessZipCode
public AutoCompleteType Search
public AutoCompleteType Enabled
}
public System.Web.UI.WebControls.AutoFieldsGenerator : object {
public Nullable`1<bool> AutoGenerateEnumFields
public Nullable`1<bool> get_AutoGenerateEnumFields()
public void set_AutoGenerateEnumFields(Nullable`1<bool> value)
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
public List`1<AutoGeneratedField> CreateAutoGeneratedFields(object dataItem, Control control)
public ICollection GenerateFields(Control control)
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
}
public System.Web.UI.WebControls.AutoGeneratedField : BoundField {
private Type dataType
public Type DataType
public bool ConvertEmptyStringToNull
public string DataFormatString
public bool InsertVisible
public void .ctor(string dataField)
internal void .ctor(AutoGeneratedFieldProperties fieldProperties)
public Type get_DataType()
public void set_DataType(Type value)
public bool get_ConvertEmptyStringToNull()
public void set_ConvertEmptyStringToNull(bool value)
public string get_DataFormatString()
public void set_DataFormatString(string value)
public bool get_InsertVisible()
public void set_InsertVisible(bool value)
public void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly)
protected void InitializeDataCell(DataControlFieldCell cell, DataControlRowState rowState)
protected void OnDataBindField(object sender, EventArgs e)
public void ValidateSupportsCallback()
protected DataControlField CreateField()
protected void CopyProperties(DataControlField newField)
protected object GetDesignTimeValue()
}
public System.Web.UI.WebControls.AutoGeneratedFieldProperties : object {
private StateBag ViewState
public string DataField
public bool IsReadOnly
public string Name
public Type Type
private bool System.Web.UI.IStateManager.IsTrackingViewState
public string get_DataField()
public void set_DataField(string value)
public bool get_IsReadOnly()
public void set_IsReadOnly(bool value)
public string get_Name()
public void set_Name(string value)
public Type get_Type()
public void set_Type(Type value)
private void System.Web.UI.IStateManager.LoadViewState(object state)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
}
public System.Web.UI.WebControls.BaseCompareValidator : BaseValidator {
public bool CultureInvariantValues
protected int CutoffYear
public ValidationDataType Type
protected void AddAttributesToRender(HtmlTextWriter writer)
public bool CanConvert(string text, ValidationDataType type)
protected bool Convert(string text, ValidationDataType type, Object& value)
protected bool Compare(string leftText, string rightText, ValidationCompareOperator op, ValidationDataType type)
protected bool DetermineRenderUplevel()
protected string GetDateElementOrder()
protected int GetFullYear(int shortYear)
public bool get_CultureInvariantValues()
public void set_CultureInvariantValues(bool value)
protected int get_CutoffYear()
public ValidationDataType get_Type()
public void set_Type(ValidationDataType value)
public bool CanConvert(string text, ValidationDataType type, bool cultureInvariant)
protected bool Compare(string leftText, bool cultureInvariantLeftText, string rightText, bool cultureInvariantRightText, ValidationCompareOperator op, ValidationDataType type)
protected bool Convert(string text, ValidationDataType type, bool cultureInvariant, Object& value)
}
public System.Web.UI.WebControls.BaseDataBoundControl : WebControl {
private object dataBoundEvent
private EventHandlerList events
private object dataSource
private bool initialized
private bool preRendered
private bool requiresDataBinding
public object DataSource
public string DataSourceID
protected bool Initialized
protected bool IsBoundUsingDataSourceID
protected bool RequiresDataBinding
public bool SupportsDisabledAttribute
public void add_DataBound(EventHandler value)
public void remove_DataBound(EventHandler value)
internal void .ctor(HtmlTextWriterTag tag)
public object get_DataSource()
public void set_DataSource(object value)
public string get_DataSourceID()
public void set_DataSourceID(string value)
protected bool get_Initialized()
protected bool get_IsBoundUsingDataSourceID()
protected bool get_RequiresDataBinding()
protected void set_RequiresDataBinding(bool value)
public bool get_SupportsDisabledAttribute()
protected void ConfirmInitState()
public void DataBind()
protected void EnsureDataBound()
protected void OnDataBound(EventArgs e)
protected void OnDataPropertyChanged()
protected internal void OnInit(EventArgs e)
protected void OnPagePreLoad(object sender, EventArgs e)
protected internal void OnPreRender(EventArgs e)
internal Control FindDataSource()
protected void PerformSelect()
protected void ValidateDataSource(object dataSource)
}
public System.Web.UI.WebControls.BaseDataList : WebControl {
private object selectedIndexChangedEvent
private DataKeyCollection keycoll
private object source
private IDataSource boundDataSource
private bool initialized
private bool requiresDataBinding
private DataSourceSelectArguments selectArguments
private IEnumerable data
public string Caption
public TableCaptionAlign CaptionAlign
public int CellPadding
public int CellSpacing
public ControlCollection Controls
public string DataKeyField
public DataKeyCollection DataKeys
protected ArrayList DataKeysArray
public string DataMember
public object DataSource
public GridLines GridLines
public HorizontalAlign HorizontalAlign
public bool UseAccessibleHeader
public string DataSourceID
protected bool Initialized
protected bool IsBoundUsingDataSourceID
protected bool RequiresDataBinding
protected DataSourceSelectArguments SelectArguments
public bool SupportsDisabledAttribute
private TableStyle TableStyle
private bool IsDataBound
public string get_Caption()
public void set_Caption(string value)
public TableCaptionAlign get_CaptionAlign()
public void set_CaptionAlign(TableCaptionAlign value)
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public ControlCollection get_Controls()
public string get_DataKeyField()
public void set_DataKeyField(string value)
public DataKeyCollection get_DataKeys()
protected ArrayList get_DataKeysArray()
public string get_DataMember()
public void set_DataMember(string value)
public object get_DataSource()
public void set_DataSource(object value)
public GridLines get_GridLines()
public void set_GridLines(GridLines value)
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public bool get_UseAccessibleHeader()
public void set_UseAccessibleHeader(bool value)
public string get_DataSourceID()
public void set_DataSourceID(string value)
protected bool get_Initialized()
protected bool get_IsBoundUsingDataSourceID()
protected bool get_RequiresDataBinding()
protected void set_RequiresDataBinding(bool value)
protected DataSourceSelectArguments get_SelectArguments()
public bool get_SupportsDisabledAttribute()
private TableStyle get_TableStyle()
protected void AddParsedSubObject(object obj)
protected internal void CreateChildControls()
protected void CreateControlHierarchy(bool useDataSource)
public void DataBind()
protected DataSourceSelectArguments CreateDataSourceSelectArguments()
protected void EnsureDataBound()
private void SelectCallback(IEnumerable data)
protected IEnumerable GetData()
private bool get_IsDataBound()
private void set_IsDataBound(bool value)
protected void OnDataBinding(EventArgs e)
protected void OnDataPropertyChanged()
protected void OnDataSourceViewChanged(object sender, EventArgs e)
protected internal void OnInit(EventArgs e)
private void OnPagePreLoad(object sender, EventArgs e)
protected internal void OnLoad(EventArgs e)
private void Initialize()
protected internal void OnPreRender(EventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
protected void PrepareControlHierarchy()
protected internal void Render(HtmlTextWriter writer)
public void add_SelectedIndexChanged(EventHandler value)
public void remove_SelectedIndexChanged(EventHandler value)
public bool IsBindableType(Type type)
private void ConnectToDataSource()
}
internal System.Web.UI.WebControls.BaseMenuRenderer : object {
private int registeredStylesCounter
private Menu <Owner>k__BackingField
public HtmlTextWriterTag Tag
protected Menu Owner
public HtmlTextWriterTag get_Tag()
protected Menu get_Owner()
private void set_Owner(Menu value)
public void .ctor(Menu owner)
public void AddAttributesToRender(HtmlTextWriter writer)
public void PreRender(Page page, HtmlHead head, ClientScriptManager csm, string cmenu, StringBuilder script)
public void RenderMenuBeginTag(HtmlTextWriter writer, bool dynamic, int menuLevel)
public void RenderMenuBody(HtmlTextWriter writer, MenuItemCollection items, bool vertical, bool dynamic, bool notLast)
public void RenderBeginTag(HtmlTextWriter writer, string skipLinkText)
public void RenderEndTag(HtmlTextWriter writer)
public void RenderContents(HtmlTextWriter writer)
public bool IsDynamicItem(Menu owner, MenuItem item)
protected void RenderMenuItem(HtmlTextWriter writer, MenuItem item, bool vertical, bool notLast, bool isFirst, OwnerContext oc)
public void RenderMenuItem(HtmlTextWriter writer, MenuItem item, bool notLast, bool isFirst)
public void RenderMenuEndTag(HtmlTextWriter writer, bool dynamic, int menuLevel)
public void RenderItemContent(HtmlTextWriter writer, MenuItem item, bool isDynamicItem)
public void AddCssClass(Style style, string cssClass)
public string GetItemClientId(string ownerClientID, MenuItem item, string suffix)
public void RenderItemHref(Menu owner, HtmlTextWriter writer, MenuItem item)
public string GetPopOutImage(Menu owner, MenuItem item, bool isDynamicItem)
public string GetArrowResourceUrl(Menu owner)
public void FillMenuStyle(HtmlHead header, bool dynamic, int menuLevel, SubMenuStyle style)
public void RegisterStyle(Style baseStyle, Style linkStyle, HtmlHead head)
public void RegisterStyle(Style baseStyle, Style linkStyle, string className, HtmlHead head)
public void RegisterStyle(Style baseStyle, HtmlHead head)
public void RegisterStyle(Style baseStyle, string className, HtmlHead head)
public void RenderSeparatorImage(Menu owner, HtmlTextWriter writer, string url, bool standardsCompliant)
public bool IsDynamicItem(MenuItem item)
private string GetClientEvent(Menu owner, MenuItem item)
private string IncrementStyleClassName()
}
public System.Web.UI.WebControls.BaseValidator : Label {
private bool render_uplevel
private bool valid
private Color forecolor
private bool pre_render_called
public string AssociatedControlID
public string ValidationGroup
public bool SetFocusOnError
public string Text
public string ControlToValidate
public ValidatorDisplay Display
public bool EnableClientScript
public bool Enabled
public string ErrorMessage
public Color ForeColor
public bool IsValid
protected bool PropertiesValid
protected bool RenderUplevel
public string get_AssociatedControlID()
public void set_AssociatedControlID(string value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
public bool get_SetFocusOnError()
public void set_SetFocusOnError(bool value)
public string get_Text()
public void set_Text(string value)
public string get_ControlToValidate()
public void set_ControlToValidate(string value)
public ValidatorDisplay get_Display()
public void set_Display(ValidatorDisplay value)
public bool get_EnableClientScript()
public void set_EnableClientScript(bool value)
public bool get_Enabled()
public void set_Enabled(bool value)
public string get_ErrorMessage()
public void set_ErrorMessage(string value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public bool get_IsValid()
public void set_IsValid(bool value)
protected bool get_PropertiesValid()
protected bool get_RenderUplevel()
internal bool GetRenderUplevel()
protected void AddAttributesToRender(HtmlTextWriter writer)
internal void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue)
internal void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode)
protected void CheckControlValidationProperty(string name, string propertyName)
protected bool ControlPropertiesValid()
protected bool DetermineRenderUplevel()
protected bool EvaluateIsValid()
protected string GetControlRenderID(string name)
protected string GetControlValidationValue(string name)
public PropertyDescriptor GetValidationProperty(object component)
protected internal void OnInit(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected internal void OnUnload(EventArgs e)
protected void RegisterValidatorCommonScript()
protected void RegisterValidatorDeclaration()
protected internal void Render(HtmlTextWriter writer)
public void Validate()
}
public System.Web.UI.WebControls.BorderStyle : Enum {
public int value__
public BorderStyle NotSet
public BorderStyle None
public BorderStyle Dotted
public BorderStyle Dashed
public BorderStyle Solid
public BorderStyle Double
public BorderStyle Groove
public BorderStyle Ridge
public BorderStyle Inset
public BorderStyle Outset
}
public System.Web.UI.WebControls.BoundColumn : DataGridColumn {
private string data_format_string
public string thisExpr
public string DataField
public string DataFormatString
public bool ReadOnly
public string get_DataField()
public void set_DataField(string value)
public string get_DataFormatString()
public void set_DataFormatString(string value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public void Initialize()
public void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType)
protected string FormatDataValue(object dataValue)
private string GetValueFromItem(DataGridItem item)
private void ItemDataBinding(object sender, EventArgs e)
}
public System.Web.UI.WebControls.BoundField : DataControlField {
public string ThisExpression
public bool ApplyFormatInEditMode
public bool ConvertEmptyStringToNull
public string DataField
public string DataFormatString
public string HeaderText
public string NullDisplayText
public bool ReadOnly
public bool HtmlEncode
public bool HtmlEncodeFormatString
protected bool SupportsHtmlEncode
public ValidateRequestMode ValidateRequestMode
public bool get_ApplyFormatInEditMode()
public void set_ApplyFormatInEditMode(bool value)
public bool get_ConvertEmptyStringToNull()
public void set_ConvertEmptyStringToNull(bool value)
public string get_DataField()
public void set_DataField(string value)
public string get_DataFormatString()
public void set_DataFormatString(string value)
public string get_HeaderText()
public void set_HeaderText(string value)
public string get_NullDisplayText()
public void set_NullDisplayText(string value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public bool get_HtmlEncode()
public void set_HtmlEncode(bool value)
public bool get_HtmlEncodeFormatString()
public void set_HtmlEncodeFormatString(bool value)
public void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly)
public bool Initialize(bool enableSorting, Control control)
public void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex)
protected void InitializeDataCell(DataControlFieldCell cell, DataControlRowState rowState)
internal bool IsEditable(DataControlRowState rowState)
protected bool get_SupportsHtmlEncode()
protected string FormatDataValue(object dataValue, bool encode)
protected object GetValue(Control controlContainer)
protected object GetDesignTimeValue()
private object GetBoundValue(Control controlContainer)
protected void LoadViewState(object state)
protected void OnDataBindField(object sender, EventArgs e)
protected DataControlField CreateField()
protected void CopyProperties(DataControlField newField)
public void ValidateSupportsCallback()
public ValidateRequestMode get_ValidateRequestMode()
public void set_ValidateRequestMode(ValidateRequestMode value)
}
public System.Web.UI.WebControls.BulletedList : ListControl {
private object ClickEvent
private PostBackOptions postBackOptions
public bool AutoPostBack
public int SelectedIndex
public ListItem SelectedItem
public string SelectedValue
public string BulletImageUrl
public BulletStyle BulletStyle
public ControlCollection Controls
public BulletedListDisplayMode DisplayMode
public int FirstBulletNumber
protected HtmlTextWriterTag TagKey
public string Target
public string Text
public bool RenderWhenDataEmpty
public void add_Click(BulletedListEventHandler value)
public void remove_Click(BulletedListEventHandler value)
protected void AddAttributesToRender(HtmlTextWriter writer)
protected void RenderBulletText(ListItem item, int index, HtmlTextWriter writer)
private PostBackOptions GetPostBackOptions(string argument)
protected internal void RenderContents(HtmlTextWriter writer)
protected internal void Render(HtmlTextWriter writer)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected void RaisePostBackEvent(string eventArgument)
public bool get_AutoPostBack()
public void set_AutoPostBack(bool value)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public ListItem get_SelectedItem()
public string get_SelectedValue()
public void set_SelectedValue(string value)
public string get_BulletImageUrl()
public void set_BulletImageUrl(string value)
public BulletStyle get_BulletStyle()
public void set_BulletStyle(BulletStyle value)
public ControlCollection get_Controls()
public BulletedListDisplayMode get_DisplayMode()
public void set_DisplayMode(BulletedListDisplayMode value)
public int get_FirstBulletNumber()
public void set_FirstBulletNumber(int value)
protected HtmlTextWriterTag get_TagKey()
public string get_Target()
public void set_Target(string value)
public string get_Text()
public void set_Text(string value)
protected void OnClick(BulletedListEventArgs e)
public bool get_RenderWhenDataEmpty()
public void set_RenderWhenDataEmpty(bool value)
}
public System.Web.UI.WebControls.BulletedListDisplayMode : Enum {
public int value__
public BulletedListDisplayMode Text
public BulletedListDisplayMode HyperLink
public BulletedListDisplayMode LinkButton
}
public System.Web.UI.WebControls.BulletedListEventArgs : EventArgs {
private int _index
public int Index
public void .ctor(int index)
public int get_Index()
}
public System.Web.UI.WebControls.BulletedListEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, BulletedListEventArgs e)
public IAsyncResult BeginInvoke(object sender, BulletedListEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.BulletStyle : Enum {
public int value__
public BulletStyle NotSet
public BulletStyle Numbered
public BulletStyle LowerAlpha
public BulletStyle UpperAlpha
public BulletStyle LowerRoman
public BulletStyle UpperRoman
public BulletStyle Disc
public BulletStyle Circle
public BulletStyle Square
public BulletStyle CustomImage
}
public System.Web.UI.WebControls.Button : WebControl {
private object ClickEvent
private object CommandEvent
public bool CausesValidation
public string CommandArgument
public string CommandName
public string OnClientClick
public string Text
public bool UseSubmitBehavior
public string PostBackUrl
public string ValidationGroup
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_CommandArgument()
public void set_CommandArgument(string value)
public string get_CommandName()
public void set_CommandName(string value)
public string get_OnClientClick()
public void set_OnClientClick(string value)
public string get_Text()
public void set_Text(string value)
public bool get_UseSubmitBehavior()
public void set_UseSubmitBehavior(bool value)
protected void AddAttributesToRender(HtmlTextWriter writer)
internal string GetClientScriptEventReference()
protected PostBackOptions GetPostBackOptions()
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected void OnClick(EventArgs e)
protected void OnCommand(CommandEventArgs e)
protected void RaisePostBackEvent(string eventArgument)
protected internal void OnPreRender(EventArgs e)
protected internal void RenderContents(HtmlTextWriter writer)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_Command(CommandEventHandler value)
public void remove_Command(CommandEventHandler value)
public string get_PostBackUrl()
public void set_PostBackUrl(string value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
}
public System.Web.UI.WebControls.ButtonColumn : DataGridColumn {
private string text_field
private string format
public ButtonColumnType ButtonType
public string CommandName
public bool CausesValidation
public string DataTextField
public string DataTextFormatString
public string Text
public string ValidationGroup
public ButtonColumnType get_ButtonType()
public void set_ButtonType(ButtonColumnType value)
public string get_CommandName()
public void set_CommandName(string value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_DataTextField()
public void set_DataTextField(string value)
public string get_DataTextFormatString()
public void set_DataTextFormatString(string value)
public string get_Text()
public void set_Text(string value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
public void Initialize()
public void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType)
private string GetValueFromItem(DataGridItem item)
private void DoDataBind(object sender, EventArgs e)
protected string FormatDataTextValue(object dataTextValue)
}
public System.Web.UI.WebControls.ButtonColumnType : Enum {
public int value__
public ButtonColumnType LinkButton
public ButtonColumnType PushButton
}
public System.Web.UI.WebControls.ButtonField : ButtonFieldBase {
private PropertyDescriptor boundProperty
public string CommandName
public string DataTextField
public string DataTextFormatString
public string ImageUrl
public string Text
public string get_CommandName()
public void set_CommandName(string value)
public string get_DataTextField()
public void set_DataTextField(string value)
public string get_DataTextFormatString()
public void set_DataTextFormatString(string value)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public string get_Text()
public void set_Text(string value)
public bool Initialize(bool sortingEnabled, Control control)
protected string FormatDataTextValue(object dataTextValue)
public void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex)
private void OnDataBindField(object sender, EventArgs e)
private object GetBoundValue(Control controlContainer)
protected DataControlField CreateField()
protected void CopyProperties(DataControlField newField)
public void ValidateSupportsCallback()
}
public System.Web.UI.WebControls.ButtonFieldBase : DataControlField {
public ButtonType ButtonType
public bool CausesValidation
public bool ShowHeader
public string ValidationGroup
public ButtonType get_ButtonType()
public void set_ButtonType(ButtonType value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public bool get_ShowHeader()
public void set_ShowHeader(bool value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
protected void CopyProperties(DataControlField newField)
}
public System.Web.UI.WebControls.ButtonType : Enum {
public int value__
public ButtonType Button
public ButtonType Image
public ButtonType Link
}
public System.Web.UI.WebControls.Calendar : WebControl {
private TableItemStyle dayHeaderStyle
private TableItemStyle dayStyle
private TableItemStyle nextPrevStyle
private TableItemStyle otherMonthDayStyle
private TableItemStyle selectedDayStyle
private TableItemStyle titleStyle
private TableItemStyle todayDayStyle
private TableItemStyle selectorStyle
private TableItemStyle weekendDayStyle
private DateTimeFormatInfo dateInfo
private SelectedDatesCollection selectedDatesCollection
private ArrayList dateList
private DateTime today
private DateTime dateZenith
private int daysInAWeek
private object DayRenderEvent
private object SelectionChangedEvent
private object VisibleMonthChangedEvent
public string Caption
public TableCaptionAlign CaptionAlign
public int CellPadding
public int CellSpacing
public TableItemStyle DayHeaderStyle
public DayNameFormat DayNameFormat
public TableItemStyle DayStyle
public FirstDayOfWeek FirstDayOfWeek
public string NextMonthText
public NextPrevFormat NextPrevFormat
public TableItemStyle NextPrevStyle
public TableItemStyle OtherMonthDayStyle
public string PrevMonthText
public DateTime SelectedDate
public SelectedDatesCollection SelectedDates
public TableItemStyle SelectedDayStyle
public CalendarSelectionMode SelectionMode
public string SelectMonthText
public TableItemStyle SelectorStyle
public string SelectWeekText
public bool ShowDayHeader
public bool ShowGridLines
public bool ShowNextPrevMonth
public bool ShowTitle
public TitleFormat TitleFormat
public TableItemStyle TitleStyle
public TableItemStyle TodayDayStyle
public DateTime TodaysDate
public bool UseAccessibleHeader
public DateTime VisibleDate
public TableItemStyle WeekendDayStyle
public bool SupportsDisabledAttribute
private DateTimeFormatInfo DateInfo
private DateTime DisplayDate
private DayOfWeek DisplayFirstDayOfWeek
public string get_Caption()
public void set_Caption(string value)
public TableCaptionAlign get_CaptionAlign()
public void set_CaptionAlign(TableCaptionAlign value)
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public TableItemStyle get_DayHeaderStyle()
public DayNameFormat get_DayNameFormat()
public void set_DayNameFormat(DayNameFormat value)
public TableItemStyle get_DayStyle()
public FirstDayOfWeek get_FirstDayOfWeek()
public void set_FirstDayOfWeek(FirstDayOfWeek value)
public string get_NextMonthText()
public void set_NextMonthText(string value)
public NextPrevFormat get_NextPrevFormat()
public void set_NextPrevFormat(NextPrevFormat value)
public TableItemStyle get_NextPrevStyle()
public TableItemStyle get_OtherMonthDayStyle()
public string get_PrevMonthText()
public void set_PrevMonthText(string value)
public DateTime get_SelectedDate()
public void set_SelectedDate(DateTime value)
public SelectedDatesCollection get_SelectedDates()
public TableItemStyle get_SelectedDayStyle()
public CalendarSelectionMode get_SelectionMode()
public void set_SelectionMode(CalendarSelectionMode value)
public string get_SelectMonthText()
public void set_SelectMonthText(string value)
public TableItemStyle get_SelectorStyle()
public string get_SelectWeekText()
public void set_SelectWeekText(string value)
public bool get_ShowDayHeader()
public void set_ShowDayHeader(bool value)
public bool get_ShowGridLines()
public void set_ShowGridLines(bool value)
public bool get_ShowNextPrevMonth()
public void set_ShowNextPrevMonth(bool value)
public bool get_ShowTitle()
public void set_ShowTitle(bool value)
public TitleFormat get_TitleFormat()
public void set_TitleFormat(TitleFormat value)
public TableItemStyle get_TitleStyle()
public TableItemStyle get_TodayDayStyle()
public DateTime get_TodaysDate()
public void set_TodaysDate(DateTime value)
public bool get_UseAccessibleHeader()
public void set_UseAccessibleHeader(bool value)
public DateTime get_VisibleDate()
public void set_VisibleDate(DateTime value)
public TableItemStyle get_WeekendDayStyle()
public bool get_SupportsDisabledAttribute()
private DateTimeFormatInfo get_DateInfo()
private DateTime get_DisplayDate()
private DayOfWeek get_DisplayFirstDayOfWeek()
protected ControlCollection CreateControlCollection()
protected bool HasWeekSelectors(CalendarSelectionMode selectionMode)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected void RaisePostBackEvent(string eventArgument)
protected void LoadViewState(object savedState)
protected void OnDayRender(TableCell cell, CalendarDay day)
protected internal void OnPreRender(EventArgs e)
protected void OnSelectionChanged()
protected void OnVisibleMonthChanged(DateTime newDate, DateTime previousDate)
protected internal void Render(HtmlTextWriter writer)
protected object SaveViewState()
protected void TrackViewState()
private void WriteDayHeader(HtmlTextWriter writer, bool enabled)
private void WriteDay(DateTime date, HtmlTextWriter writer, bool enabled)
private void WriteDays(HtmlTextWriter writer, bool enabled)
private string BuildLink(string arg, string text, Color foreColor, bool hasLink)
private int GetDaysFromZenith(DateTime date)
private void WriteCaption(HtmlTextWriter writer)
private void WriteTitle(HtmlTextWriter writer, bool enabled)
private string GetNextPrevFormatText(DateTime date, bool next)
private bool IsWeekEnd(DayOfWeek day)
private double GetCellWidth()
private Calendar GetGlobalCalendar()
public void add_DayRender(DayRenderEventHandler value)
public void remove_DayRender(DayRenderEventHandler value)
public void add_SelectionChanged(EventHandler value)
public void remove_SelectionChanged(EventHandler value)
public void add_VisibleMonthChanged(MonthChangedEventHandler value)
public void remove_VisibleMonthChanged(MonthChangedEventHandler value)
}
public System.Web.UI.WebControls.CalendarDay : object {
private DateTime date
private bool isWeekend
private bool isToday
private bool isSelected
private bool isOtherMonth
private string dayNumberText
private bool isSelectable
public DateTime Date
public string DayNumberText
public bool IsOtherMonth
public bool IsSelectable
public bool IsSelected
public bool IsToday
public bool IsWeekend
public void .ctor(DateTime date, bool isWeekend, bool isToday, bool isSelected, bool isOtherMonth, string dayNumberText)
public DateTime get_Date()
public string get_DayNumberText()
public bool get_IsOtherMonth()
public bool get_IsSelectable()
public void set_IsSelectable(bool value)
public bool get_IsSelected()
public bool get_IsToday()
public bool get_IsWeekend()
}
public System.Web.UI.WebControls.CalendarSelectionMode : Enum {
public int value__
public CalendarSelectionMode None
public CalendarSelectionMode Day
public CalendarSelectionMode DayWeek
public CalendarSelectionMode DayWeekMonth
}
public System.Web.UI.WebControls.CallingDataMethodsEventArgs : EventArgs {
private Type <DataMethodsType>k__BackingField
private object <DataMethodsObject>k__BackingField
public Type DataMethodsType
public object DataMethodsObject
public Type get_DataMethodsType()
public void set_DataMethodsType(Type value)
public object get_DataMethodsObject()
public void set_DataMethodsObject(object value)
}
public System.Web.UI.WebControls.CallingDataMethodsEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, CallingDataMethodsEventArgs e)
public IAsyncResult BeginInvoke(object sender, CallingDataMethodsEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.ChangePassword : CompositeControl {
private object cancelButtonClickEvent
private object changedPasswordEvent
private object changePasswordErrorEvent
private object changingPasswordEvent
private object continueButtonClickEvent
private object sendingMailEvent
private object sendMailErrorEvent
public string CancelButtonCommandName
public string ChangePasswordButtonCommandName
public string ContinueButtonCommandName
private bool renderOuterTable
private Style _cancelButtonStyle
private Style _changePasswordButtonStyle
private Style _continueButtonStyle
private TableItemStyle _failureTextStyle
private TableItemStyle _hyperLinkStyle
private TableItemStyle _instructionTextStyle
private TableItemStyle _labelStyle
private TableItemStyle _passwordHintStyle
private TableItemStyle _successTextStyle
private Style _textBoxStyle
private TableItemStyle _titleTextStyle
private Style _validatorTextStyle
private MailDefinition _mailDefinition
private MembershipProvider _provider
private ITemplate _changePasswordTemplate
private ITemplate _successTemplate
private Control _changePasswordTemplateContainer
private Control _successTemplateContainer
private string _username
private string _currentPassword
private string _newPassword
private string _newPasswordConfirm
private bool _showContinue
private EventHandlerList events
public int BorderPadding
public string CancelButtonImageUrl
public Style CancelButtonStyle
public string CancelButtonText
public ButtonType CancelButtonType
public string CancelDestinationPageUrl
public string ChangePasswordButtonImageUrl
public Style ChangePasswordButtonStyle
public string ChangePasswordButtonText
public ButtonType ChangePasswordButtonType
public string ChangePasswordFailureText
public ITemplate ChangePasswordTemplate
public Control ChangePasswordTemplateContainer
public string ChangePasswordTitleText
public string ConfirmNewPassword
public string ConfirmNewPasswordLabelText
public string ConfirmPasswordCompareErrorMessage
public string ConfirmPasswordRequiredErrorMessage
public string ContinueButtonImageUrl
public Style ContinueButtonStyle
public string ContinueButtonText
public ButtonType ContinueButtonType
public string ContinueDestinationPageUrl
public string CreateUserIconUrl
public string CreateUserText
public string CreateUserUrl
public string CurrentPassword
public bool DisplayUserName
public string EditProfileIconUrl
public string EditProfileText
public string EditProfileUrl
public TableItemStyle FailureTextStyle
public string HelpPageIconUrl
public string HelpPageText
public string HelpPageUrl
public TableItemStyle HyperLinkStyle
public string InstructionText
public TableItemStyle InstructionTextStyle
public TableItemStyle LabelStyle
public MailDefinition MailDefinition
public string MembershipProvider
public string NewPassword
public string NewPasswordLabelText
public string NewPasswordRegularExpression
public string NewPasswordRegularExpressionErrorMessage
public string NewPasswordRequiredErrorMessage
public TableItemStyle PasswordHintStyle
public string PasswordHintText
public string PasswordLabelText
public string PasswordRecoveryIconUrl
public string PasswordRecoveryText
public string PasswordRecoveryUrl
public string PasswordRequiredErrorMessage
public bool RenderOuterTable
public string SuccessPageUrl
public ITemplate SuccessTemplate
public Control SuccessTemplateContainer
public string SuccessText
public TableItemStyle SuccessTextStyle
public string SuccessTitleText
public Style TextBoxStyle
public TableItemStyle TitleTextStyle
public string UserName
public string UserNameLabelText
public string UserNameRequiredErrorMessage
public Style ValidatorTextStyle
protected HtmlTextWriterTag TagKey
internal MembershipProvider MembershipProviderInternal
public void add_CancelButtonClick(EventHandler value)
public void remove_CancelButtonClick(EventHandler value)
public void add_ChangedPassword(EventHandler value)
public void remove_ChangedPassword(EventHandler value)
public void add_ChangePasswordError(EventHandler value)
public void remove_ChangePasswordError(EventHandler value)
public void add_ChangingPassword(LoginCancelEventHandler value)
public void remove_ChangingPassword(LoginCancelEventHandler value)
public void add_ContinueButtonClick(EventHandler value)
public void remove_ContinueButtonClick(EventHandler value)
public void add_SendingMail(MailMessageEventHandler value)
public void remove_SendingMail(MailMessageEventHandler value)
public void add_SendMailError(SendMailErrorEventHandler value)
public void remove_SendMailError(SendMailErrorEventHandler value)
public int get_BorderPadding()
public void set_BorderPadding(int value)
public string get_CancelButtonImageUrl()
public void set_CancelButtonImageUrl(string value)
public Style get_CancelButtonStyle()
public string get_CancelButtonText()
public void set_CancelButtonText(string value)
public ButtonType get_CancelButtonType()
public void set_CancelButtonType(ButtonType value)
public string get_CancelDestinationPageUrl()
public void set_CancelDestinationPageUrl(string value)
public string get_ChangePasswordButtonImageUrl()
public void set_ChangePasswordButtonImageUrl(string value)
public Style get_ChangePasswordButtonStyle()
public string get_ChangePasswordButtonText()
public void set_ChangePasswordButtonText(string value)
public ButtonType get_ChangePasswordButtonType()
public void set_ChangePasswordButtonType(ButtonType value)
public string get_ChangePasswordFailureText()
public void set_ChangePasswordFailureText(string value)
public ITemplate get_ChangePasswordTemplate()
public void set_ChangePasswordTemplate(ITemplate value)
public Control get_ChangePasswordTemplateContainer()
public string get_ChangePasswordTitleText()
public void set_ChangePasswordTitleText(string value)
public string get_ConfirmNewPassword()
public string get_ConfirmNewPasswordLabelText()
public void set_ConfirmNewPasswordLabelText(string value)
public string get_ConfirmPasswordCompareErrorMessage()
public void set_ConfirmPasswordCompareErrorMessage(string value)
public string get_ConfirmPasswordRequiredErrorMessage()
public void set_ConfirmPasswordRequiredErrorMessage(string value)
public string get_ContinueButtonImageUrl()
public void set_ContinueButtonImageUrl(string value)
public Style get_ContinueButtonStyle()
public string get_ContinueButtonText()
public void set_ContinueButtonText(string value)
public ButtonType get_ContinueButtonType()
public void set_ContinueButtonType(ButtonType value)
public string get_ContinueDestinationPageUrl()
public void set_ContinueDestinationPageUrl(string value)
public string get_CreateUserIconUrl()
public void set_CreateUserIconUrl(string value)
public string get_CreateUserText()
public void set_CreateUserText(string value)
public string get_CreateUserUrl()
public void set_CreateUserUrl(string value)
public string get_CurrentPassword()
public bool get_DisplayUserName()
public void set_DisplayUserName(bool value)
public string get_EditProfileIconUrl()
public void set_EditProfileIconUrl(string value)
public string get_EditProfileText()
public void set_EditProfileText(string value)
public string get_EditProfileUrl()
public void set_EditProfileUrl(string value)
public TableItemStyle get_FailureTextStyle()
public string get_HelpPageIconUrl()
public void set_HelpPageIconUrl(string value)
public string get_HelpPageText()
public void set_HelpPageText(string value)
public string get_HelpPageUrl()
public void set_HelpPageUrl(string value)
public TableItemStyle get_HyperLinkStyle()
public string get_InstructionText()
public void set_InstructionText(string value)
public TableItemStyle get_InstructionTextStyle()
public TableItemStyle get_LabelStyle()
public MailDefinition get_MailDefinition()
public string get_MembershipProvider()
public void set_MembershipProvider(string value)
public string get_NewPassword()
public string get_NewPasswordLabelText()
public void set_NewPasswordLabelText(string value)
public string get_NewPasswordRegularExpression()
public void set_NewPasswordRegularExpression(string value)
public string get_NewPasswordRegularExpressionErrorMessage()
public void set_NewPasswordRegularExpressionErrorMessage(string value)
public string get_NewPasswordRequiredErrorMessage()
public void set_NewPasswordRequiredErrorMessage(string value)
public TableItemStyle get_PasswordHintStyle()
public string get_PasswordHintText()
public void set_PasswordHintText(string value)
public string get_PasswordLabelText()
public void set_PasswordLabelText(string value)
public string get_PasswordRecoveryIconUrl()
public void set_PasswordRecoveryIconUrl(string value)
public string get_PasswordRecoveryText()
public void set_PasswordRecoveryText(string value)
public string get_PasswordRecoveryUrl()
public void set_PasswordRecoveryUrl(string value)
public string get_PasswordRequiredErrorMessage()
public void set_PasswordRequiredErrorMessage(string value)
public bool get_RenderOuterTable()
public void set_RenderOuterTable(bool value)
public string get_SuccessPageUrl()
public void set_SuccessPageUrl(string value)
public ITemplate get_SuccessTemplate()
public void set_SuccessTemplate(ITemplate value)
public Control get_SuccessTemplateContainer()
public string get_SuccessText()
public void set_SuccessText(string value)
public TableItemStyle get_SuccessTextStyle()
public string get_SuccessTitleText()
public void set_SuccessTitleText(string value)
public Style get_TextBoxStyle()
public TableItemStyle get_TitleTextStyle()
public string get_UserName()
public void set_UserName(string value)
public string get_UserNameLabelText()
public void set_UserNameLabelText(string value)
public string get_UserNameRequiredErrorMessage()
public void set_UserNameRequiredErrorMessage(string value)
public Style get_ValidatorTextStyle()
protected internal void CreateChildControls()
protected internal void Render(HtmlTextWriter writer)
protected void SetDesignModeState(IDictionary data)
private void InitMemberShipProvider()
private void ProcessChangePasswordEvent(CommandEventArgs args)
private void ProcessCancelEvent(CommandEventArgs args)
private void ProcessContinueEvent(CommandEventArgs args)
private void SendMail(string username, string password)
protected HtmlTextWriterTag get_TagKey()
internal MembershipProvider get_MembershipProviderInternal()
protected internal void LoadControlState(object savedState)
protected internal object SaveControlState()
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
protected bool OnBubbleEvent(object source, EventArgs e)
protected void OnCancelButtonClick(EventArgs e)
protected void OnChangedPassword(EventArgs e)
protected void OnChangePasswordError(EventArgs e)
protected void OnChangingPassword(LoginCancelEventArgs e)
protected void OnContinueButtonClick(EventArgs e)
protected internal void OnInit(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected void OnSendingMail(MailMessageEventArgs e)
protected void OnSendMailError(SendMailErrorEventArgs e)
private void UserName_TextChanged(object sender, EventArgs e)
private void CurrentPassword_TextChanged(object sender, EventArgs e)
private void NewPassword_TextChanged(object sender, EventArgs e)
private void NewPasswordConfirm_TextChanged(object sender, EventArgs e)
}
public System.Web.UI.WebControls.CheckBox : WebControl {
private string render_type
private AttributeCollection common_attrs
private AttributeCollection inputAttributes
private StateBag inputAttributesState
private AttributeCollection labelAttributes
private StateBag labelAttributesState
private object EventCheckedChanged
public bool AutoPostBack
public bool CausesValidation
public bool Checked
public AttributeCollection InputAttributes
public AttributeCollection LabelAttributes
public string Text
public TextAlign TextAlign
public string ValidationGroup
internal string NameAttribute
internal void .ctor(string render_type)
public bool get_AutoPostBack()
public void set_AutoPostBack(bool value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public bool get_Checked()
public void set_Checked(bool value)
public AttributeCollection get_InputAttributes()
public AttributeCollection get_LabelAttributes()
public string get_Text()
public void set_Text(string value)
public TextAlign get_TextAlign()
public void set_TextAlign(TextAlign value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
public void add_CheckedChanged(EventHandler value)
public void remove_CheckedChanged(EventHandler value)
protected void OnCheckedChanged(EventArgs e)
internal string get_NameAttribute()
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
protected internal void OnPreRender(EventArgs e)
private bool IsInputOrCommonAttr(string attname)
private bool AddAttributesForSpan(HtmlTextWriter writer)
protected internal void Render(HtmlTextWriter writer)
private void RenderInput(HtmlTextWriter w, bool enabled)
private void RenderLabel(HtmlTextWriter w)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
private PostBackOptions GetPostBackOptions()
protected void AddAttributesToRender(HtmlTextWriter writer)
internal void InternalAddAttributesToRender(HtmlTextWriter w, bool enabled)
}
public System.Web.UI.WebControls.CheckBoxField : BoundField {
public bool ApplyFormatInEditMode
public bool ConvertEmptyStringToNull
public string DataField
public string DataFormatString
public bool HtmlEncode
public bool HtmlEncodeFormatString
public string NullDisplayText
protected bool SupportsHtmlEncode
public string Text
public bool get_ApplyFormatInEditMode()
public void set_ApplyFormatInEditMode(bool value)
public bool get_ConvertEmptyStringToNull()
public void set_ConvertEmptyStringToNull(bool value)
public string get_DataField()
public void set_DataField(string value)
public string get_DataFormatString()
public void set_DataFormatString(string value)
public bool get_HtmlEncode()
public void set_HtmlEncode(bool value)
public bool get_HtmlEncodeFormatString()
public void set_HtmlEncodeFormatString(bool value)
public string get_NullDisplayText()
public void set_NullDisplayText(string value)
protected bool get_SupportsHtmlEncode()
public string get_Text()
public void set_Text(string value)
protected void InitializeDataCell(DataControlFieldCell cell, DataControlRowState rowState)
public void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly)
protected void OnDataBindField(object sender, EventArgs e)
protected object GetDesignTimeValue()
protected DataControlField CreateField()
protected void CopyProperties(DataControlField newField)
public void ValidateSupportsCallback()
}
public System.Web.UI.WebControls.CheckBoxList : ListControl {
private CheckBox check_box
public int CellPadding
public int CellSpacing
public int RepeatColumns
public RepeatDirection RepeatDirection
public RepeatLayout RepeatLayout
public TextAlign TextAlign
private TableStyle TableStyle
protected bool HasFooter
private bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
protected bool HasHeader
private bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
protected bool HasSeparators
private bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
protected int RepeatedItemCount
private int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
public bool RenderWhenDataEmpty
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public int get_RepeatColumns()
public void set_RepeatColumns(int value)
public RepeatDirection get_RepeatDirection()
public void set_RepeatDirection(RepeatDirection value)
public RepeatLayout get_RepeatLayout()
public void set_RepeatLayout(RepeatLayout value)
public TextAlign get_TextAlign()
public void set_TextAlign(TextAlign value)
private TableStyle get_TableStyle()
protected Style CreateControlStyle()
protected Control FindControl(string id, int pathOffset)
protected internal void OnPreRender(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
protected bool get_HasFooter()
private bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasFooter()
protected bool get_HasHeader()
private bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasHeader()
protected bool get_HasSeparators()
private bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasSeparators()
protected int get_RepeatedItemCount()
private int System.Web.UI.WebControls.IRepeatInfoUser.get_RepeatedItemCount()
protected Style GetItemStyle(ListItemType itemType, int repeatIndex)
private Style System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType itemType, int repeatIndex)
protected void RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer)
private void System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer)
internal bool MultiSelectOk()
public bool get_RenderWhenDataEmpty()
public void set_RenderWhenDataEmpty(bool value)
}
internal System.Web.UI.WebControls.ChildTable : Table {
private Control parent
public void .ctor(Control parent)
protected void AddAttributesToRender(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.CircleHotSpot : HotSpot {
protected internal string MarkupName
public int Radius
public int X
public int Y
public string GetCoordinates()
protected internal string get_MarkupName()
public int get_Radius()
public void set_Radius(int value)
public int get_X()
public void set_X(int value)
public int get_Y()
public void set_Y(int value)
}
internal System.Web.UI.WebControls.CollectionDataSource : object {
private String[] names
private IEnumerable collection
public void .ctor(IEnumerable collection)
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public DataSourceView GetView(string viewName)
public ICollection GetViewNames()
}
internal System.Web.UI.WebControls.CollectionDataSourceView : DataSourceView {
private IEnumerable collection
public void .ctor(IDataSource owner, string viewName, IEnumerable collection)
protected internal IEnumerable ExecuteSelect(DataSourceSelectArguments arguments)
}
public System.Web.UI.WebControls.CommandEventArgs : EventArgs {
private string commandName
private object argument
public string CommandName
public object CommandArgument
public void .ctor(CommandEventArgs e)
public void .ctor(string commandName, object argument)
public string get_CommandName()
public object get_CommandArgument()
}
public System.Web.UI.WebControls.CommandEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, CommandEventArgs e)
public IAsyncResult BeginInvoke(object sender, CommandEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.CommandField : ButtonFieldBase {
public string CancelImageUrl
public string CancelText
public bool CausesValidation
public string DeleteImageUrl
public string DeleteText
public string EditImageUrl
public string EditText
public string InsertImageUrl
public string InsertText
public string NewImageUrl
public string NewText
public string SelectImageUrl
public string SelectText
public bool ShowCancelButton
public bool ShowDeleteButton
public bool ShowEditButton
public bool ShowSelectButton
public bool ShowInsertButton
public string UpdateImageUrl
public string UpdateText
public string get_CancelImageUrl()
public void set_CancelImageUrl(string value)
public string get_CancelText()
public void set_CancelText(string value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_DeleteImageUrl()
public void set_DeleteImageUrl(string value)
public string get_DeleteText()
public void set_DeleteText(string value)
public string get_EditImageUrl()
public void set_EditImageUrl(string value)
public string get_EditText()
public void set_EditText(string value)
public string get_InsertImageUrl()
public void set_InsertImageUrl(string value)
public string get_InsertText()
public void set_InsertText(string value)
public string get_NewImageUrl()
public void set_NewImageUrl(string value)
public string get_NewText()
public void set_NewText(string value)
public string get_SelectImageUrl()
public void set_SelectImageUrl(string value)
public string get_SelectText()
public void set_SelectText(string value)
public bool get_ShowCancelButton()
public void set_ShowCancelButton(bool value)
public bool get_ShowDeleteButton()
public void set_ShowDeleteButton(bool value)
public bool get_ShowEditButton()
public void set_ShowEditButton(bool value)
public bool get_ShowSelectButton()
public void set_ShowSelectButton(bool value)
public bool get_ShowInsertButton()
public void set_ShowInsertButton(bool value)
public string get_UpdateImageUrl()
public void set_UpdateImageUrl(string value)
public string get_UpdateText()
public void set_UpdateText(string value)
public void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex)
private Control CreateButton(string text, string image, string command, string arg)
private void AddSeparator(DataControlFieldCell cell)
protected DataControlField CreateField()
protected void CopyProperties(DataControlField newField)
public void ValidateSupportsCallback()
}
public System.Web.UI.WebControls.CompareValidator : BaseCompareValidator {
public string ControlToCompare
public ValidationCompareOperator Operator
public string ValueToCompare
protected void AddAttributesToRender(HtmlTextWriter writer)
protected bool ControlPropertiesValid()
protected bool EvaluateIsValid()
public string get_ControlToCompare()
public void set_ControlToCompare(string value)
public ValidationCompareOperator get_Operator()
public void set_Operator(ValidationCompareOperator value)
public string get_ValueToCompare()
public void set_ValueToCompare(string value)
}
public System.Web.UI.WebControls.CompleteWizardStep : TemplatedWizardStep {
public WizardStepType StepType
public string Title
public WizardStepType get_StepType()
public void set_StepType(WizardStepType value)
public string get_Title()
public void set_Title(string value)
}
public System.Web.UI.WebControls.CompositeControl : WebControl {
public bool SupportsDisabledAttribute
public ControlCollection Controls
public bool get_SupportsDisabledAttribute()
public void DataBind()
protected internal void Render(HtmlTextWriter writer)
private void System.Web.UI.WebControls.ICompositeControlDesignerAccessor.RecreateChildControls()
protected void RecreateChildControls()
public ControlCollection get_Controls()
}
public System.Web.UI.WebControls.CompositeDataBoundControl : DataBoundControl {
public ControlCollection Controls
protected bool IsUsingModelBinders
public ControlCollection get_Controls()
protected internal void CreateChildControls()
protected internal void PerformDataBinding(IEnumerable data)
protected int CreateChildControls(IEnumerable dataSource, bool dataBinding)
protected bool get_IsUsingModelBinders()
}
internal System.Web.UI.WebControls.ContainedTable : Table {
private WebControl _container
public void .ctor(WebControl container)
protected void AddAttributesToRender(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.Content : Control {
public string ContentPlaceHolderID
public string get_ContentPlaceHolderID()
public void set_ContentPlaceHolderID(string value)
public void add_DataBinding(EventHandler value)
public void remove_DataBinding(EventHandler value)
public void add_Disposed(EventHandler value)
public void remove_Disposed(EventHandler value)
public void add_Init(EventHandler value)
public void remove_Init(EventHandler value)
public void add_Load(EventHandler value)
public void remove_Load(EventHandler value)
public void add_PreRender(EventHandler value)
public void remove_PreRender(EventHandler value)
public void add_Unload(EventHandler value)
public void remove_Unload(EventHandler value)
}
internal System.Web.UI.WebControls.ContentBuilderInternal : TemplateBuilder {
private string placeHolderID
public string ContentPlaceHolderID
public void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string ID, IDictionary attribs)
public string get_ContentPlaceHolderID()
}
public System.Web.UI.WebControls.ContentDirection : Enum {
public int value__
public ContentDirection NotSet
public ContentDirection LeftToRight
public ContentDirection RightToLeft
}
internal System.Web.UI.WebControls.ContentPlaceHolderBuilder : ControlBuilder {
public void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string ID, IDictionary attribs)
}
public System.Web.UI.WebControls.ControlIDConverter : StringConverter {
protected bool FilterControl(Control control)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Web.UI.WebControls.ControlParameter : Parameter {
public string ControlID
public string PropertyName
protected void .ctor(ControlParameter original)
public void .ctor(string name, string controlID)
public void .ctor(string name, string controlID, string propertyName)
public void .ctor(string name, TypeCode type, string controlID, string propertyName)
public void .ctor(string name, DbType dbType, string controlID, string propertyName)
protected Parameter Clone()
protected internal object Evaluate(HttpContext context, Control control)
public string get_ControlID()
public void set_ControlID(string value)
public string get_PropertyName()
public void set_PropertyName(string value)
}
public System.Web.UI.WebControls.ControlPropertyNameConverter : StringConverter {
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
}
public System.Web.UI.WebControls.CookieParameter : Parameter {
public string CookieName
public bool ValidateInput
protected void .ctor(CookieParameter original)
public void .ctor(string name, string cookieName)
public void .ctor(string name, TypeCode type, string cookieName)
public void .ctor(string name, DbType dbType, string cookieName)
protected Parameter Clone()
protected internal object Evaluate(HttpContext context, Control control)
public string get_CookieName()
public void set_CookieName(string value)
public bool get_ValidateInput()
public void set_ValidateInput(bool value)
}
public System.Web.UI.WebControls.CreateUserErrorEventArgs : EventArgs {
private MembershipCreateStatus _error
public MembershipCreateStatus CreateUserError
public void .ctor(MembershipCreateStatus s)
public MembershipCreateStatus get_CreateUserError()
public void set_CreateUserError(MembershipCreateStatus value)
}
public System.Web.UI.WebControls.CreateUserErrorEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, CreateUserErrorEventArgs e)
public IAsyncResult BeginInvoke(object sender, CreateUserErrorEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.CreateUserWizard : Wizard {
public string ContinueButtonCommandName
private string _password
private string _confirmPassword
private MembershipProvider _provider
private ITextControl _errorMessageLabel
private MailDefinition _mailDefinition
private Style _textBoxStyle
private Style _validatorTextStyle
private TableItemStyle _completeSuccessTextStyle
private TableItemStyle _errorMessageStyle
private TableItemStyle _hyperLinkStyle
private TableItemStyle _instructionTextStyle
private TableItemStyle _labelStyle
private TableItemStyle _passwordHintStyle
private TableItemStyle _titleTextStyle
private Style _createUserButtonStyle
private Style _continueButtonStyle
private object CreatedUserEvent
private object CreateUserErrorEvent
private object CreatingUserEvent
private object ContinueButtonClickEvent
private object SendingMailEvent
private object SendMailErrorEvent
private CompleteWizardStep _completeWizardStep
private CreateUserWizardStep _createUserWizardStep
public int ActiveStepIndex
public string Answer
public string AnswerLabelText
public string AnswerRequiredErrorMessage
public bool AutoGeneratePassword
public CompleteWizardStep CompleteStep
public string CompleteSuccessText
public TableItemStyle CompleteSuccessTextStyle
public string ConfirmPassword
public string ConfirmPasswordCompareErrorMessage
public string ConfirmPasswordLabelText
public string ConfirmPasswordRequiredErrorMessage
public string ContinueButtonImageUrl
public Style ContinueButtonStyle
public string ContinueButtonText
public ButtonType ContinueButtonType
public string ContinueDestinationPageUrl
public string CreateUserButtonImageUrl
public Style CreateUserButtonStyle
public string CreateUserButtonText
public ButtonType CreateUserButtonType
public CreateUserWizardStep CreateUserStep
public bool DisableCreatedUser
public bool DisplaySideBar
public string DuplicateEmailErrorMessage
public string DuplicateUserNameErrorMessage
public string EditProfileIconUrl
public string EditProfileText
public string EditProfileUrl
public string Email
public string EmailLabelText
public string EmailRegularExpression
public string EmailRegularExpressionErrorMessage
public string EmailRequiredErrorMessage
public TableItemStyle ErrorMessageStyle
public string HelpPageIconUrl
public string HelpPageText
public string HelpPageUrl
public TableItemStyle HyperLinkStyle
public string InstructionText
public TableItemStyle InstructionTextStyle
public string InvalidAnswerErrorMessage
public string InvalidEmailErrorMessage
public string InvalidPasswordErrorMessage
public string InvalidQuestionErrorMessage
public TableItemStyle LabelStyle
public bool LoginCreatedUser
public MailDefinition MailDefinition
public string MembershipProvider
internal MembershipProvider MembershipProviderInternal
public string Password
public TableItemStyle PasswordHintStyle
public string PasswordHintText
public string PasswordLabelText
public string PasswordRegularExpression
public string PasswordRegularExpressionErrorMessage
public string PasswordRequiredErrorMessage
public string Question
public string QuestionLabelText
public string QuestionRequiredErrorMessage
public bool RequireEmail
public string SkipLinkText
public Style TextBoxStyle
public TableItemStyle TitleTextStyle
public string UnknownErrorMessage
public string UserName
public string UserNameLabelText
public string UserNameRequiredErrorMessage
public Style ValidatorTextStyle
public WizardStepCollection WizardSteps
protected internal bool QuestionAndAnswerRequired
internal ITemplate SideBarItemTemplate
public int get_ActiveStepIndex()
public void set_ActiveStepIndex(int value)
public string get_Answer()
public void set_Answer(string value)
public string get_AnswerLabelText()
public void set_AnswerLabelText(string value)
public string get_AnswerRequiredErrorMessage()
public void set_AnswerRequiredErrorMessage(string value)
public bool get_AutoGeneratePassword()
public void set_AutoGeneratePassword(bool value)
public CompleteWizardStep get_CompleteStep()
public string get_CompleteSuccessText()
public void set_CompleteSuccessText(string value)
public TableItemStyle get_CompleteSuccessTextStyle()
public string get_ConfirmPassword()
public string get_ConfirmPasswordCompareErrorMessage()
public void set_ConfirmPasswordCompareErrorMessage(string value)
public string get_ConfirmPasswordLabelText()
public void set_ConfirmPasswordLabelText(string value)
public string get_ConfirmPasswordRequiredErrorMessage()
public void set_ConfirmPasswordRequiredErrorMessage(string value)
public string get_ContinueButtonImageUrl()
public void set_ContinueButtonImageUrl(string value)
public Style get_ContinueButtonStyle()
public string get_ContinueButtonText()
public void set_ContinueButtonText(string value)
public ButtonType get_ContinueButtonType()
public void set_ContinueButtonType(ButtonType value)
public string get_ContinueDestinationPageUrl()
public void set_ContinueDestinationPageUrl(string value)
public string get_CreateUserButtonImageUrl()
public void set_CreateUserButtonImageUrl(string value)
public Style get_CreateUserButtonStyle()
public string get_CreateUserButtonText()
public void set_CreateUserButtonText(string value)
public ButtonType get_CreateUserButtonType()
public void set_CreateUserButtonType(ButtonType value)
public CreateUserWizardStep get_CreateUserStep()
public bool get_DisableCreatedUser()
public void set_DisableCreatedUser(bool value)
public bool get_DisplaySideBar()
public void set_DisplaySideBar(bool value)
public string get_DuplicateEmailErrorMessage()
public void set_DuplicateEmailErrorMessage(string value)
public string get_DuplicateUserNameErrorMessage()
public void set_DuplicateUserNameErrorMessage(string value)
public string get_EditProfileIconUrl()
public void set_EditProfileIconUrl(string value)
public string get_EditProfileText()
public void set_EditProfileText(string value)
public string get_EditProfileUrl()
public void set_EditProfileUrl(string value)
public string get_Email()
public void set_Email(string value)
public string get_EmailLabelText()
public void set_EmailLabelText(string value)
public string get_EmailRegularExpression()
public void set_EmailRegularExpression(string value)
public string get_EmailRegularExpressionErrorMessage()
public void set_EmailRegularExpressionErrorMessage(string value)
public string get_EmailRequiredErrorMessage()
public void set_EmailRequiredErrorMessage(string value)
public TableItemStyle get_ErrorMessageStyle()
public string get_HelpPageIconUrl()
public void set_HelpPageIconUrl(string value)
public string get_HelpPageText()
public void set_HelpPageText(string value)
public string get_HelpPageUrl()
public void set_HelpPageUrl(string value)
public TableItemStyle get_HyperLinkStyle()
public string get_InstructionText()
public void set_InstructionText(string value)
public TableItemStyle get_InstructionTextStyle()
public string get_InvalidAnswerErrorMessage()
public void set_InvalidAnswerErrorMessage(string value)
public string get_InvalidEmailErrorMessage()
public void set_InvalidEmailErrorMessage(string value)
public string get_InvalidPasswordErrorMessage()
public void set_InvalidPasswordErrorMessage(string value)
public string get_InvalidQuestionErrorMessage()
public void set_InvalidQuestionErrorMessage(string value)
public TableItemStyle get_LabelStyle()
public bool get_LoginCreatedUser()
public void set_LoginCreatedUser(bool value)
public MailDefinition get_MailDefinition()
public string get_MembershipProvider()
public void set_MembershipProvider(string value)
internal MembershipProvider get_MembershipProviderInternal()
public string get_Password()
public TableItemStyle get_PasswordHintStyle()
public string get_PasswordHintText()
public void set_PasswordHintText(string value)
public string get_PasswordLabelText()
public void set_PasswordLabelText(string value)
public string get_PasswordRegularExpression()
public void set_PasswordRegularExpression(string value)
public string get_PasswordRegularExpressionErrorMessage()
public void set_PasswordRegularExpressionErrorMessage(string value)
public string get_PasswordRequiredErrorMessage()
public void set_PasswordRequiredErrorMessage(string value)
public string get_Question()
public void set_Question(string value)
public string get_QuestionLabelText()
public void set_QuestionLabelText(string value)
public string get_QuestionRequiredErrorMessage()
public void set_QuestionRequiredErrorMessage(string value)
public bool get_RequireEmail()
public void set_RequireEmail(bool value)
public string get_SkipLinkText()
public void set_SkipLinkText(string value)
public Style get_TextBoxStyle()
public TableItemStyle get_TitleTextStyle()
public string get_UnknownErrorMessage()
public void set_UnknownErrorMessage(string value)
public string get_UserName()
public void set_UserName(string value)
public string get_UserNameLabelText()
public void set_UserNameLabelText(string value)
public string get_UserNameRequiredErrorMessage()
public void set_UserNameRequiredErrorMessage(string value)
public Style get_ValidatorTextStyle()
public WizardStepCollection get_WizardSteps()
protected internal bool get_QuestionAndAnswerRequired()
public void add_ContinueButtonClick(EventHandler value)
public void remove_ContinueButtonClick(EventHandler value)
public void add_CreatedUser(EventHandler value)
public void remove_CreatedUser(EventHandler value)
public void add_CreateUserError(CreateUserErrorEventHandler value)
public void remove_CreateUserError(CreateUserErrorEventHandler value)
public void add_CreatingUser(LoginCancelEventHandler value)
public void remove_CreatingUser(LoginCancelEventHandler value)
public void add_SendingMail(MailMessageEventHandler value)
public void remove_SendingMail(MailMessageEventHandler value)
public void add_SendMailError(SendMailErrorEventHandler value)
public void remove_SendMailError(SendMailErrorEventHandler value)
internal void InstantiateTemplateStep(TemplatedWizardStep step)
private void InstantiateCompleteWizardStep(CompleteWizardStep step)
private void InstantiateCreateUserWizardStep(CreateUserWizardStep step)
internal ITemplate get_SideBarItemTemplate()
protected internal void CreateChildControls()
protected void CreateControlHierarchy()
protected IDictionary GetDesignModeState()
protected bool OnBubbleEvent(object source, EventArgs e)
private void ProcessContinueEvent()
protected void OnContinueButtonClick(EventArgs e)
protected void OnCreatedUser(EventArgs e)
protected void OnCreateUserError(CreateUserErrorEventArgs e)
protected void OnCreatingUser(LoginCancelEventArgs e)
protected void OnNextButtonClick(WizardNavigationEventArgs e)
protected internal void OnPreRender(EventArgs e)
protected void OnSendingMail(MailMessageEventArgs e)
protected void OnSendMailError(SendMailErrorEventArgs e)
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void SetDesignModeState(IDictionary data)
protected void TrackViewState()
private void UserName_TextChanged(object sender, EventArgs e)
private void Password_TextChanged(object sender, EventArgs e)
private void ConfirmPassword_TextChanged(object sender, EventArgs e)
private void Email_TextChanged(object sender, EventArgs e)
private void Question_TextChanged(object sender, EventArgs e)
private void Answer_TextChanged(object sender, EventArgs e)
private void InitMemberShipProvider()
private bool CreateUser()
private void SendPasswordByMail(MembershipUser user, string password)
private void Login()
private void ShowErrorMessage(string errorMessage)
private string GeneratePassword()
}
public System.Web.UI.WebControls.CreateUserWizardStep : TemplatedWizardStep {
public bool AllowReturn
public string Title
public WizardStepType StepType
public bool get_AllowReturn()
public void set_AllowReturn(bool value)
public string get_Title()
public void set_Title(string value)
public WizardStepType get_StepType()
public void set_StepType(WizardStepType value)
}
public System.Web.UI.WebControls.CreatingModelDataSourceEventArgs : EventArgs {
public ModelDataSource ModelDataSource
public ModelDataSource get_ModelDataSource()
public void set_ModelDataSource(ModelDataSource value)
}
public System.Web.UI.WebControls.CreatingModelDataSourceEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, CreatingModelDataSourceEventArgs e)
public IAsyncResult BeginInvoke(object sender, CreatingModelDataSourceEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.CustomValidator : BaseValidator {
private object serverValidateEvent
private EventHandlerList events
public string ClientValidationFunction
public bool ValidateEmptyText
public void add_ServerValidate(ServerValidateEventHandler value)
public void remove_ServerValidate(ServerValidateEventHandler value)
public string get_ClientValidationFunction()
public void set_ClientValidationFunction(string value)
public bool get_ValidateEmptyText()
public void set_ValidateEmptyText(bool value)
protected void AddAttributesToRender(HtmlTextWriter writer)
protected bool ControlPropertiesValid()
protected bool EvaluateIsValid()
protected bool OnServerValidate(string value)
}
public System.Web.UI.WebControls.DataBoundControl : BaseDataBoundControl {
private DataSourceSelectArguments selectArguments
private DataSourceView currentView
public string DataMember
public string DataSourceID
public IDataSource DataSourceObject
protected DataSourceSelectArguments SelectArguments
private bool IsDataBound
protected bool IsUsingModelBinders
public string ItemType
public string SelectMethod
internal void .ctor(HtmlTextWriterTag tag)
protected IDataSource GetDataSource()
protected DataSourceView GetData()
private DataSourceView InternalGetData()
protected void OnDataPropertyChanged()
protected void OnDataSourceViewChanged(object sender, EventArgs e)
protected void OnPagePreLoad(object sender, EventArgs e)
private void Initialize()
private void UpdateViewData()
protected internal void OnLoad(EventArgs e)
protected internal void PerformDataBinding(IEnumerable data)
protected void ValidateDataSource(object dataSource)
public string get_DataMember()
public void set_DataMember(string value)
public string get_DataSourceID()
public void set_DataSourceID(string value)
public IDataSource get_DataSourceObject()
protected void PerformSelect()
private void OnSelect(IEnumerable data)
internal void InternalPerformDataBinding(IEnumerable data)
protected DataSourceSelectArguments CreateDataSourceSelectArguments()
protected DataSourceSelectArguments get_SelectArguments()
private void set_SelectArguments(DataSourceSelectArguments value)
private bool get_IsDataBound()
private void set_IsDataBound(bool value)
protected void MarkAsDataBound()
protected bool get_IsUsingModelBinders()
public string get_ItemType()
public void set_ItemType(string value)
public string get_SelectMethod()
public void set_SelectMethod(string value)
public void add_CallingDataMethods(CallingDataMethodsEventHandler value)
public void remove_CallingDataMethods(CallingDataMethodsEventHandler value)
public void add_CreatingModelDataSource(CreatingModelDataSourceEventHandler value)
public void remove_CreatingModelDataSource(CreatingModelDataSourceEventHandler value)
}
public System.Web.UI.WebControls.DataBoundControlMode : Enum {
public int value__
public DataBoundControlMode ReadOnly
public DataBoundControlMode Edit
public DataBoundControlMode Insert
}
internal System.Web.UI.WebControls.DataControlButton : Button {
private Control _container
public Control Container
public string ImageUrl
public bool AllowCallback
public ButtonType ButtonType
public bool UseSubmitBehavior
public IDataControlButton CreateButton(ButtonType type, Control container, string text, string image, string command, string commandArg, bool allowCallback)
public Control get_Container()
public void set_Container(Control value)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public bool get_AllowCallback()
public void set_AllowCallback(bool value)
public ButtonType get_ButtonType()
public bool get_UseSubmitBehavior()
public void set_UseSubmitBehavior(bool value)
internal string GetClientScriptEventReference()
protected PostBackOptions GetPostBackOptions()
}
public System.Web.UI.WebControls.DataControlCellType : Enum {
public int value__
public DataControlCellType Header
public DataControlCellType Footer
public DataControlCellType DataCell
}
public System.Web.UI.WebControls.DataControlCommands : object {
public string CancelCommandName
public string DeleteCommandName
public string EditCommandName
public string FirstPageCommandArgument
public string InsertCommandName
public string LastPageCommandArgument
public string NextPageCommandArgument
public string NewCommandName
public string PageCommandName
public string PreviousPageCommandArgument
public string SelectCommandName
public string SortCommandName
public string UpdateCommandName
}
public System.Web.UI.WebControls.DataControlField : object {
private object fieldChangedEvent
private bool tracking
private StateBag viewState
private Control control
private Style controlStyle
private TableItemStyle footerStyle
private TableItemStyle headerStyle
private TableItemStyle itemStyle
private bool sortingEnabled
private EventHandlerList events
protected StateBag ViewState
internal bool ControlStyleCreated
internal bool HeaderStyleCreated
internal bool FooterStyleCreated
internal bool ItemStyleCreated
public string AccessibleHeaderText
protected Control Control
public Style ControlStyle
protected bool DesignMode
public TableItemStyle FooterStyle
public string FooterText
public string HeaderImageUrl
public TableItemStyle HeaderStyle
public string HeaderText
public bool InsertVisible
public TableItemStyle ItemStyle
public bool ShowHeader
public string SortExpression
public bool Visible
protected bool IsTrackingViewState
private bool System.Web.UI.IStateManager.IsTrackingViewState
private object System.Web.UI.IDataSourceViewSchemaAccessor.DataSourceViewSchema
internal void add_FieldChanged(EventHandler value)
internal void remove_FieldChanged(EventHandler value)
internal void SetDirty()
protected StateBag get_ViewState()
public void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly)
public bool Initialize(bool sortingEnabled, Control control)
public void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex)
protected internal DataControlField CloneField()
protected DataControlField CreateField()
protected void CopyProperties(DataControlField newField)
protected void OnFieldChanged()
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
public void ValidateSupportsCallback()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
internal Exception GetNotSupportedPropException(string propName)
internal bool get_ControlStyleCreated()
internal bool get_HeaderStyleCreated()
internal bool get_FooterStyleCreated()
internal bool get_ItemStyleCreated()
public string get_AccessibleHeaderText()
public void set_AccessibleHeaderText(string value)
protected Control get_Control()
public Style get_ControlStyle()
protected bool get_DesignMode()
public TableItemStyle get_FooterStyle()
public string get_FooterText()
public void set_FooterText(string value)
public string get_HeaderImageUrl()
public void set_HeaderImageUrl(string value)
public TableItemStyle get_HeaderStyle()
public string get_HeaderText()
public void set_HeaderText(string value)
public bool get_InsertVisible()
public void set_InsertVisible(bool value)
public TableItemStyle get_ItemStyle()
public bool get_ShowHeader()
public void set_ShowHeader(bool value)
public string get_SortExpression()
public void set_SortExpression(string value)
public bool get_Visible()
public void set_Visible(bool value)
protected bool get_IsTrackingViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
private object System.Web.UI.IDataSourceViewSchemaAccessor.get_DataSourceViewSchema()
private void System.Web.UI.IDataSourceViewSchemaAccessor.set_DataSourceViewSchema(object value)
public string ToString()
}
public System.Web.UI.WebControls.DataControlFieldCell : TableCell {
private DataControlField containerField
public DataControlField ContainingField
public ValidateRequestMode ValidateRequestMode
public void .ctor(DataControlField containingField)
protected void .ctor(HtmlTextWriterTag tagKey, DataControlField containingField)
public DataControlField get_ContainingField()
public ValidateRequestMode get_ValidateRequestMode()
public void set_ValidateRequestMode(ValidateRequestMode value)
}
public System.Web.UI.WebControls.DataControlFieldCollection : StateManagedCollection {
private object fieldsChangedEvent
private Type[] fieldTypes
private EventHandlerList events
public DataControlField Item
public void add_FieldsChanged(EventHandler value)
public void remove_FieldsChanged(EventHandler value)
public DataControlFieldCollection CloneFields()
public void Add(DataControlField field)
public bool Contains(DataControlField field)
public void CopyTo(DataControlField[] array, int index)
public int IndexOf(DataControlField field)
public void Insert(int index, DataControlField field)
public void Remove(DataControlField field)
public void RemoveAt(int index)
public DataControlField get_Item(int index)
protected void OnInsertComplete(int index, object value)
protected void OnRemoveComplete(int index, object value)
protected void OnClearComplete()
private void OnFieldChanged(object sender, EventArgs args)
private void OnFieldsChanged()
protected void OnValidate(object o)
protected void SetDirtyObject(object o)
protected object CreateKnownType(int index)
protected Type[] GetKnownTypes()
}
public System.Web.UI.WebControls.DataControlFieldHeaderCell : DataControlFieldCell {
private TableHeaderScope scope
public TableHeaderScope Scope
public string AbbreviatedText
public void .ctor(DataControlField containingField)
internal void .ctor(DataControlField containerField, TableHeaderScope scope)
public TableHeaderScope get_Scope()
public void set_Scope(TableHeaderScope value)
public string get_AbbreviatedText()
public void set_AbbreviatedText(string value)
protected void AddAttributesToRender(HtmlTextWriter writer)
}
internal System.Web.UI.WebControls.DataControlImageButton : ImageButton {
private Control _container
public Control Container
public bool AllowCallback
public ButtonType ButtonType
public Control get_Container()
public void set_Container(Control value)
public bool get_AllowCallback()
public void set_AllowCallback(bool value)
public ButtonType get_ButtonType()
internal string GetClientScriptEventReference()
protected PostBackOptions GetPostBackOptions()
}
internal System.Web.UI.WebControls.DataControlLinkButton : LinkButton {
private Control _container
public Control Container
public string ImageUrl
public bool AllowCallback
public ButtonType ButtonType
public Control get_Container()
public void set_Container(Control value)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public bool get_AllowCallback()
public void set_AllowCallback(bool value)
public ButtonType get_ButtonType()
protected internal void Render(HtmlTextWriter writer)
private void EnsureForeColor()
protected PostBackOptions GetPostBackOptions()
}
public System.Web.UI.WebControls.DataControlRowState : Enum {
public int value__
public DataControlRowState Normal
public DataControlRowState Alternate
public DataControlRowState Selected
public DataControlRowState Edit
public DataControlRowState Insert
}
public System.Web.UI.WebControls.DataControlRowType : Enum {
public int value__
public DataControlRowType Header
public DataControlRowType Footer
public DataControlRowType DataRow
public DataControlRowType Separator
public DataControlRowType Pager
public DataControlRowType EmptyDataRow
}
public System.Web.UI.WebControls.DataGrid : BaseDataList {
public string CancelCommandName
public string DeleteCommandName
public string EditCommandName
public string SelectCommandName
public string SortCommandName
public string UpdateCommandName
public string PageCommandName
public string NextPageCommandArgument
public string PrevPageCommandArgument
private object CancelCommandEvent
private object DeleteCommandEvent
private object EditCommandEvent
private object ItemCommandEvent
private object ItemCreatedEvent
private object ItemDataBoundEvent
private object PageIndexChangedEvent
private object SortCommandEvent
private object UpdateCommandEvent
private TableItemStyle alt_item_style
private TableItemStyle edit_item_style
private TableItemStyle footer_style
private TableItemStyle header_style
private TableItemStyle item_style
private TableItemStyle selected_style
private DataGridPagerStyle pager_style
private ArrayList items_list
private DataGridItemCollection items
private ArrayList columns_list
private DataGridColumnCollection columns
private ArrayList data_source_columns_list
private DataGridColumnCollection data_source_columns
private Table render_table
private DataGridColumn[] render_columns
private PagedDataSource paged_data_source
private IEnumerator data_enumerator
private Type[] item_args
public bool AllowCustomPaging
public bool AllowPaging
public bool AllowSorting
public bool AutoGenerateColumns
public string BackImageUrl
public int CurrentPageIndex
public int EditItemIndex
public int PageCount
public int PageSize
public int SelectedIndex
public TableItemStyle AlternatingItemStyle
public TableItemStyle EditItemStyle
public TableItemStyle FooterStyle
public TableItemStyle HeaderStyle
public TableItemStyle ItemStyle
public TableItemStyle SelectedItemStyle
public DataGridPagerStyle PagerStyle
public DataGridItemCollection Items
public DataGridColumnCollection Columns
private DataGridColumnCollection DataSourceColumns
private Table RenderTable
public DataGridItem SelectedItem
public bool ShowFooter
public bool ShowHeader
public int VirtualItemCount
protected HtmlTextWriterTag TagKey
private TableStyle TableStyle
public bool get_AllowCustomPaging()
public void set_AllowCustomPaging(bool value)
public bool get_AllowPaging()
public void set_AllowPaging(bool value)
public bool get_AllowSorting()
public void set_AllowSorting(bool value)
public bool get_AutoGenerateColumns()
public void set_AutoGenerateColumns(bool value)
public string get_BackImageUrl()
public void set_BackImageUrl(string value)
public int get_CurrentPageIndex()
public void set_CurrentPageIndex(int value)
public int get_EditItemIndex()
public void set_EditItemIndex(int value)
public int get_PageCount()
public int get_PageSize()
public void set_PageSize(int value)
private void AdjustItemTypes(int prev_select, int new_select)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public TableItemStyle get_AlternatingItemStyle()
public TableItemStyle get_EditItemStyle()
public TableItemStyle get_FooterStyle()
public TableItemStyle get_HeaderStyle()
public TableItemStyle get_ItemStyle()
public TableItemStyle get_SelectedItemStyle()
public DataGridPagerStyle get_PagerStyle()
public DataGridItemCollection get_Items()
public DataGridColumnCollection get_Columns()
private DataGridColumnCollection get_DataSourceColumns()
private Table get_RenderTable()
public DataGridItem get_SelectedItem()
public bool get_ShowFooter()
public void set_ShowFooter(bool value)
public bool get_ShowHeader()
public void set_ShowHeader(bool value)
public int get_VirtualItemCount()
public void set_VirtualItemCount(int value)
protected HtmlTextWriterTag get_TagKey()
private TableStyle get_TableStyle()
private void AddColumnsFromSource(PagedDataSource data_source)
protected ArrayList CreateColumnSet(PagedDataSource dataSource, bool useDataSource)
private void AddPropertyToColumns()
private void AddPropertyToColumns(PropertyDescriptor prop, bool tothis)
protected void TrackViewState()
protected object SaveViewState()
protected void LoadViewState(object savedState)
protected Style CreateControlStyle()
protected void InitializeItem(DataGridItem item, DataGridColumn[] columns)
protected void InitializePager(DataGridItem item, int columnSpan, PagedDataSource pagedDataSource)
private TableCell InitializeNumericPager(DataGridItem item, int columnSpan, PagedDataSource paged)
private TableCell InitializeNextPrevPager(DataGridItem item, int columnSpan, PagedDataSource paged)
protected DataGridItem CreateItem(int itemIndex, int dataSourceIndex, ListItemType itemType)
private DataGridItem CreateItem(int item_index, int data_source_index, ListItemType type, bool data_bind, object data_item, PagedDataSource paged)
protected void CreateControlHierarchy(bool useDataSource)
private void ApplyColumnStyle(TableCellCollection cells, ListItemType type)
protected void PrepareControlHierarchy()
private void ApplyItemStyle(DataGridItem item)
protected bool OnBubbleEvent(object source, EventArgs e)
protected void OnCancelCommand(DataGridCommandEventArgs e)
protected void OnDeleteCommand(DataGridCommandEventArgs e)
protected void OnEditCommand(DataGridCommandEventArgs e)
protected void OnItemCommand(DataGridCommandEventArgs e)
protected void OnItemCreated(DataGridItemEventArgs e)
protected void OnItemDataBound(DataGridItemEventArgs e)
protected void OnPageIndexChanged(DataGridPageChangedEventArgs e)
protected void OnSortCommand(DataGridSortCommandEventArgs e)
protected void OnUpdateCommand(DataGridCommandEventArgs e)
public void add_CancelCommand(DataGridCommandEventHandler value)
public void remove_CancelCommand(DataGridCommandEventHandler value)
public void add_DeleteCommand(DataGridCommandEventHandler value)
public void remove_DeleteCommand(DataGridCommandEventHandler value)
public void add_EditCommand(DataGridCommandEventHandler value)
public void remove_EditCommand(DataGridCommandEventHandler value)
public void add_ItemCommand(DataGridCommandEventHandler value)
public void remove_ItemCommand(DataGridCommandEventHandler value)
public void add_ItemCreated(DataGridItemEventHandler value)
public void remove_ItemCreated(DataGridItemEventHandler value)
public void add_ItemDataBound(DataGridItemEventHandler value)
public void remove_ItemDataBound(DataGridItemEventHandler value)
public void add_PageIndexChanged(DataGridPageChangedEventHandler value)
public void remove_PageIndexChanged(DataGridPageChangedEventHandler value)
public void add_SortCommand(DataGridSortCommandEventHandler value)
public void remove_SortCommand(DataGridSortCommandEventHandler value)
public void add_UpdateCommand(DataGridCommandEventHandler value)
public void remove_UpdateCommand(DataGridCommandEventHandler value)
}
public System.Web.UI.WebControls.DataGridColumn : object {
private DataGrid owner
private StateBag viewstate
private bool tracking_viewstate
private bool design
private TableItemStyle footer_style
private TableItemStyle header_style
private TableItemStyle item_style
public TableItemStyle FooterStyle
public string FooterText
public string HeaderImageUrl
public TableItemStyle HeaderStyle
public string HeaderText
public TableItemStyle ItemStyle
public string SortExpression
public bool Visible
protected bool DesignMode
protected DataGrid Owner
protected StateBag ViewState
private bool System.Web.UI.IStateManager.IsTrackingViewState
protected bool IsTrackingViewState
public TableItemStyle get_FooterStyle()
public string get_FooterText()
public void set_FooterText(string value)
public string get_HeaderImageUrl()
public void set_HeaderImageUrl(string value)
public TableItemStyle get_HeaderStyle()
public string get_HeaderText()
public void set_HeaderText(string value)
public TableItemStyle get_ItemStyle()
public string get_SortExpression()
public void set_SortExpression(string value)
public bool get_Visible()
public void set_Visible(bool value)
public void Initialize()
public void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType)
public string ToString()
protected bool get_DesignMode()
protected DataGrid get_Owner()
internal TableItemStyle GetStyle(ListItemType type)
internal void Set_Owner(DataGrid value)
protected StateBag get_ViewState()
protected void OnColumnChanged()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
protected bool get_IsTrackingViewState()
}
public System.Web.UI.WebControls.DataGridColumnCollection : object {
private DataGrid owner
private ArrayList columns
private bool track
public int Count
private bool System.Web.UI.IStateManager.IsTrackingViewState
public bool IsReadOnly
public bool IsSynchronized
public DataGridColumn Item
public object SyncRoot
public void .ctor(DataGrid owner, ArrayList columns)
public void Add(DataGridColumn column)
public void AddAt(int index, DataGridColumn column)
public void Clear()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public int IndexOf(DataGridColumn column)
internal void OnColumnsChanged()
public void Remove(DataGridColumn column)
public void RemoveAt(int index)
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
public int get_Count()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public DataGridColumn get_Item(int index)
public object get_SyncRoot()
}
public System.Web.UI.WebControls.DataGridCommandEventArgs : CommandEventArgs {
private DataGridItem item
private object commandSource
public object CommandSource
public DataGridItem Item
public void .ctor(DataGridItem item, object commandSource, CommandEventArgs originalArgs)
public object get_CommandSource()
public DataGridItem get_Item()
}
public System.Web.UI.WebControls.DataGridCommandEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object source, DataGridCommandEventArgs e)
public IAsyncResult BeginInvoke(object source, DataGridCommandEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DataGridItem : TableRow {
private object item
private int dataset_index
private int item_index
private ListItemType item_type
public object DataItem
public int DataSetIndex
public int ItemIndex
public ListItemType ItemType
private object System.Web.UI.IDataItemContainer.DataItem
private int System.Web.UI.IDataItemContainer.DataItemIndex
private int System.Web.UI.IDataItemContainer.DisplayIndex
public void .ctor(int itemIndex, int dataSetIndex, ListItemType itemType)
public object get_DataItem()
public void set_DataItem(object value)
public int get_DataSetIndex()
public int get_ItemIndex()
public ListItemType get_ItemType()
private object System.Web.UI.IDataItemContainer.get_DataItem()
private int System.Web.UI.IDataItemContainer.get_DataItemIndex()
private int System.Web.UI.IDataItemContainer.get_DisplayIndex()
protected bool OnBubbleEvent(object source, EventArgs e)
protected internal void SetItemType(ListItemType itemType)
}
public System.Web.UI.WebControls.DataGridItemCollection : object {
private ArrayList array
public int Count
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
public DataGridItem Item
public void .ctor(ArrayList items)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
public DataGridItem get_Item(int index)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
}
public System.Web.UI.WebControls.DataGridItemEventArgs : EventArgs {
private DataGridItem item
public DataGridItem Item
public void .ctor(DataGridItem item)
public DataGridItem get_Item()
}
public System.Web.UI.WebControls.DataGridItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DataGridPageChangedEventArgs : EventArgs {
private object commandSource
private int newPageIndex
public object CommandSource
public int NewPageIndex
public void .ctor(object commandSource, int newPageIndex)
public object get_CommandSource()
public int get_NewPageIndex()
}
public System.Web.UI.WebControls.DataGridPageChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object source, DataGridPageChangedEventArgs e)
public IAsyncResult BeginInvoke(object source, DataGridPageChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DataGridPagerStyle : TableItemStyle {
public PagerMode Mode
public string NextPageText
public int PageButtonCount
public PagerPosition Position
public string PrevPageText
public bool Visible
public PagerMode get_Mode()
public void set_Mode(PagerMode value)
public string get_NextPageText()
public void set_NextPageText(string value)
public int get_PageButtonCount()
public void set_PageButtonCount(int value)
public PagerPosition get_Position()
public void set_Position(PagerPosition value)
public string get_PrevPageText()
public void set_PrevPageText(string value)
public bool get_Visible()
public void set_Visible(bool value)
public void CopyFrom(Style s)
public void MergeWith(Style s)
public void Reset()
}
public System.Web.UI.WebControls.DataGridSortCommandEventArgs : EventArgs {
private string sortExpression
private object commandSource
public object CommandSource
public string SortExpression
public void .ctor(object commandSource, DataGridCommandEventArgs dce)
public object get_CommandSource()
public string get_SortExpression()
}
public System.Web.UI.WebControls.DataGridSortCommandEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object source, DataGridSortCommandEventArgs e)
public IAsyncResult BeginInvoke(object source, DataGridSortCommandEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DataKey : object {
private IOrderedDictionary keyTable
private String[] keyNames
private bool trackViewState
private IOrderedDictionary readonlyKeyTable
public object Item
public object Item
public object Value
public IOrderedDictionary Values
protected bool IsTrackingViewState
private bool System.Web.UI.IStateManager.IsTrackingViewState
public void .ctor(IOrderedDictionary keyTable)
public void .ctor(IOrderedDictionary keyTable, String[] keyNames)
public object get_Item(int index)
public object get_Item(string name)
public object get_Value()
public IOrderedDictionary get_Values()
public bool Equals(DataKey other)
protected void LoadViewState(object state)
protected object SaveViewState()
protected void TrackViewState()
protected bool get_IsTrackingViewState()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
}
public System.Web.UI.WebControls.DataKeyArray : object {
private IList keys
private bool trackViewState
public int Count
public bool IsReadOnly
public bool IsSynchronized
public DataKey Item
public object SyncRoot
private bool System.Web.UI.IStateManager.IsTrackingViewState
internal void .ctor(IList keys)
public void .ctor(ArrayList keys)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public DataKey get_Item(int index)
public object get_SyncRoot()
public void CopyTo(DataKey[] array, int index)
private void System.Collections.ICollection.CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
}
public System.Web.UI.WebControls.DataKeyCollection : object {
private ArrayList list
public int Count
public bool IsReadOnly
public bool IsSynchronized
public object Item
public object SyncRoot
public void .ctor(ArrayList keys)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_Item(int index)
public object get_SyncRoot()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
}
public System.Web.UI.WebControls.DataList : BaseDataList {
public string CancelCommandName
public string DeleteCommandName
public string EditCommandName
public string SelectCommandName
public string UpdateCommandName
private object cancelCommandEvent
private object deleteCommandEvent
private object editCommandEvent
private object itemCommandEvent
private object itemCreatedEvent
private object itemDataBoundEvent
private object updateCommandEvent
private TableItemStyle alternatingItemStyle
private TableItemStyle editItemStyle
private TableItemStyle footerStyle
private TableItemStyle headerStyle
private TableItemStyle itemStyle
private TableItemStyle selectedItemStyle
private TableItemStyle separatorStyle
private ITemplate alternatingItemTemplate
private ITemplate editItemTemplate
private ITemplate footerTemplate
private ITemplate headerTemplate
private ITemplate itemTemplate
private ITemplate selectedItemTemplate
private ITemplate separatorTemplate
private DataListItemCollection items
private ArrayList list
private int idx
public TableItemStyle AlternatingItemStyle
public ITemplate AlternatingItemTemplate
public int EditItemIndex
public TableItemStyle EditItemStyle
public ITemplate EditItemTemplate
public bool ExtractTemplateRows
public TableItemStyle FooterStyle
public ITemplate FooterTemplate
public GridLines GridLines
public TableItemStyle HeaderStyle
public ITemplate HeaderTemplate
public DataListItemCollection Items
public TableItemStyle ItemStyle
public ITemplate ItemTemplate
public int RepeatColumns
public RepeatDirection RepeatDirection
public RepeatLayout RepeatLayout
public int SelectedIndex
public DataListItem SelectedItem
public TableItemStyle SelectedItemStyle
public ITemplate SelectedItemTemplate
public TableItemStyle SeparatorStyle
public ITemplate SeparatorTemplate
public bool ShowFooter
public bool ShowHeader
public object SelectedValue
protected HtmlTextWriterTag TagKey
private TableStyle TableStyle
private ArrayList ItemList
private bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
private bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
private bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
private int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
public TableItemStyle get_AlternatingItemStyle()
public ITemplate get_AlternatingItemTemplate()
public void set_AlternatingItemTemplate(ITemplate value)
public int get_EditItemIndex()
public void set_EditItemIndex(int value)
public TableItemStyle get_EditItemStyle()
public ITemplate get_EditItemTemplate()
public void set_EditItemTemplate(ITemplate value)
public bool get_ExtractTemplateRows()
public void set_ExtractTemplateRows(bool value)
public TableItemStyle get_FooterStyle()
public ITemplate get_FooterTemplate()
public void set_FooterTemplate(ITemplate value)
public GridLines get_GridLines()
public void set_GridLines(GridLines value)
public TableItemStyle get_HeaderStyle()
public ITemplate get_HeaderTemplate()
public void set_HeaderTemplate(ITemplate value)
public DataListItemCollection get_Items()
public TableItemStyle get_ItemStyle()
public ITemplate get_ItemTemplate()
public void set_ItemTemplate(ITemplate value)
public int get_RepeatColumns()
public void set_RepeatColumns(int value)
public RepeatDirection get_RepeatDirection()
public void set_RepeatDirection(RepeatDirection value)
public RepeatLayout get_RepeatLayout()
public void set_RepeatLayout(RepeatLayout value)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public DataListItem get_SelectedItem()
public TableItemStyle get_SelectedItemStyle()
public ITemplate get_SelectedItemTemplate()
public void set_SelectedItemTemplate(ITemplate value)
public TableItemStyle get_SeparatorStyle()
public ITemplate get_SeparatorTemplate()
public void set_SeparatorTemplate(ITemplate value)
public bool get_ShowFooter()
public void set_ShowFooter(bool value)
public bool get_ShowHeader()
public void set_ShowHeader(bool value)
public object get_SelectedValue()
protected HtmlTextWriterTag get_TagKey()
private TableStyle get_TableStyle()
private ArrayList get_ItemList()
private void DoItem(int i, ListItemType t, object d, bool databind)
private void DoItemInLoop(int i, object d, bool databind, ListItemType type)
protected void CreateControlHierarchy(bool useDataSource)
protected Style CreateControlStyle()
protected DataListItem CreateItem(int itemIndex, ListItemType itemType)
protected void InitializeItem(DataListItem item)
protected void LoadViewState(object savedState)
protected bool OnBubbleEvent(object source, EventArgs e)
protected void OnCancelCommand(DataListCommandEventArgs e)
protected void OnDeleteCommand(DataListCommandEventArgs e)
protected void OnEditCommand(DataListCommandEventArgs e)
protected internal void OnInit(EventArgs e)
protected void OnItemCommand(DataListCommandEventArgs e)
protected void OnItemCreated(DataListItemEventArgs e)
protected void OnItemDataBound(DataListItemEventArgs e)
protected void OnUpdateCommand(DataListCommandEventArgs e)
protected void PrepareControlHierarchy()
protected internal void RenderContents(HtmlTextWriter writer)
protected object SaveViewState()
protected void TrackViewState()
public void add_CancelCommand(DataListCommandEventHandler value)
public void remove_CancelCommand(DataListCommandEventHandler value)
public void add_DeleteCommand(DataListCommandEventHandler value)
public void remove_DeleteCommand(DataListCommandEventHandler value)
public void add_EditCommand(DataListCommandEventHandler value)
public void remove_EditCommand(DataListCommandEventHandler value)
public void add_ItemCommand(DataListCommandEventHandler value)
public void remove_ItemCommand(DataListCommandEventHandler value)
public void add_ItemCreated(DataListItemEventHandler value)
public void remove_ItemCreated(DataListItemEventHandler value)
public void add_ItemDataBound(DataListItemEventHandler value)
public void remove_ItemDataBound(DataListItemEventHandler value)
public void add_UpdateCommand(DataListCommandEventHandler value)
public void remove_UpdateCommand(DataListCommandEventHandler value)
private bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasFooter()
private bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasHeader()
private bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasSeparators()
private int System.Web.UI.WebControls.IRepeatInfoUser.get_RepeatedItemCount()
private Style System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType itemType, int repeatIndex)
private DataListItem FindFirstItem(ListItemType itemType)
private DataListItem FindSpecificItem(ListItemType itemType, int repeatIndex)
private DataListItem FindBestItem(int repeatIndex)
private void System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer)
}
public System.Web.UI.WebControls.DataListCommandEventArgs : CommandEventArgs {
private DataListItem item
private object commandSource
public DataListItem Item
public object CommandSource
public void .ctor(DataListItem item, object commandSource, CommandEventArgs originalArgs)
public DataListItem get_Item()
public object get_CommandSource()
}
public System.Web.UI.WebControls.DataListCommandEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object source, DataListCommandEventArgs e)
public IAsyncResult BeginInvoke(object source, DataListCommandEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DataListItem : WebControl {
private int index
private ListItemType type
private object item
public object DataItem
public int ItemIndex
public ListItemType ItemType
public bool SupportsDisabledAttribute
private object System.Web.UI.IDataItemContainer.DataItem
private int System.Web.UI.IDataItemContainer.DataItemIndex
private int System.Web.UI.IDataItemContainer.DisplayIndex
public void .ctor(int itemIndex, ListItemType itemType)
public object get_DataItem()
public void set_DataItem(object value)
public int get_ItemIndex()
public ListItemType get_ItemType()
public bool get_SupportsDisabledAttribute()
protected Style CreateControlStyle()
protected bool OnBubbleEvent(object source, EventArgs e)
public void RenderItem(HtmlTextWriter writer, bool extractRows, bool tableLayout)
protected void SetItemType(ListItemType itemType)
private object System.Web.UI.IDataItemContainer.get_DataItem()
private int System.Web.UI.IDataItemContainer.get_DataItemIndex()
private int System.Web.UI.IDataItemContainer.get_DisplayIndex()
}
public System.Web.UI.WebControls.DataListItemCollection : object {
private ArrayList list
public int Count
public bool IsReadOnly
public bool IsSynchronized
public DataListItem Item
public object SyncRoot
public void .ctor(ArrayList items)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public DataListItem get_Item(int index)
public object get_SyncRoot()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
}
public System.Web.UI.WebControls.DataListItemEventArgs : EventArgs {
private DataListItem item
public DataListItem Item
public void .ctor(DataListItem item)
public DataListItem get_Item()
}
public System.Web.UI.WebControls.DataListItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataListItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataListItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Web.UI.WebControls.DataSourceCacheManager : object {
private int cacheDuration
private string cacheKeyDependency
private string controlID
private DataSourceCacheExpiry cacheExpirationPolicy
private Control owner
private HttpContext context
private Cache DataCache
internal void .ctor(int cacheDuration, string cacheKeyDependency, DataSourceCacheExpiry cacheExpirationPolicy, Control owner, HttpContext context)
internal void Expire()
internal object GetCachedObject(string methodName, ParameterCollection parameters)
internal void SetCachedObject(string methodName, ParameterCollection parameters, object o)
private Cache get_DataCache()
private string GetKeyFromParameters(string methodName, ParameterCollection parameters)
}
public System.Web.UI.WebControls.DataSourceSelectResultProcessingOptions : object {
public bool AutoPage
public bool AutoSort
public Type ModelType
public bool get_AutoPage()
public void set_AutoPage(bool value)
public bool get_AutoSort()
public void set_AutoSort(bool value)
public Type get_ModelType()
public void set_ModelType(Type value)
}
public System.Web.UI.WebControls.DayNameFormat : Enum {
public int value__
public DayNameFormat Full
public DayNameFormat Short
public DayNameFormat FirstLetter
public DayNameFormat FirstTwoLetters
public DayNameFormat Shortest
}
public System.Web.UI.WebControls.DayRenderEventArgs : object {
private TableCell cell
private CalendarDay day
private string _selectUrl
public TableCell Cell
public CalendarDay Day
public string SelectUrl
public void .ctor(TableCell cell, CalendarDay day)
public void .ctor(TableCell cell, CalendarDay day, string selectUrl)
public TableCell get_Cell()
public CalendarDay get_Day()
public string get_SelectUrl()
}
public System.Web.UI.WebControls.DayRenderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DayRenderEventArgs e)
public IAsyncResult BeginInvoke(object sender, DayRenderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DetailsView : CompositeDataBoundControl {
private object dataItem
private Table table
private DetailsViewRowCollection rows
private DetailsViewRow headerRow
private DetailsViewRow footerRow
private DetailsViewRow bottomPagerRow
private DetailsViewRow topPagerRow
private IOrderedDictionary currentEditRowKeys
private IOrderedDictionary currentEditNewValues
private IOrderedDictionary currentEditOldValues
private ITemplate pagerTemplate
private ITemplate emptyDataTemplate
private ITemplate headerTemplate
private ITemplate footerTemplate
private PropertyDescriptor[] cachedKeyProperties
private String[] emptyKeys
private string unhandledEventExceptionMessage
private DataControlFieldCollection columns
private PagerSettings pagerSettings
private TableItemStyle alternatingRowStyle
private TableItemStyle editRowStyle
private TableItemStyle insertRowStyle
private TableItemStyle emptyDataRowStyle
private TableItemStyle footerStyle
private TableItemStyle headerStyle
private TableItemStyle pagerStyle
private TableItemStyle rowStyle
private TableItemStyle commandRowStyle
private TableItemStyle fieldHeaderStyle
private IOrderedDictionary _keyTable
private DataKey key
private DataKey oldEditValues
private AutoGeneratedFieldProperties[] autoFieldProperties
private object PageIndexChangedEvent
private object PageIndexChangingEvent
private object ItemCommandEvent
private object ItemCreatedEvent
private object ItemDeletedEvent
private object ItemDeletingEvent
private object ItemInsertedEvent
private object ItemInsertingEvent
private object ModeChangingEvent
private object ModeChangedEvent
private object ItemUpdatedEvent
private object ItemUpdatingEvent
private int pageIndex
private DetailsViewMode currentMode
private bool hasCurrentMode
private int pageCount
private DetailsViewMode defaultMode
private String[] dataKeyNames
private IAutoFieldGenerator <RowsGenerator>k__BackingField
private bool <EnableModelValidation>k__BackingField
private string onPreRenderScript
private DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode
private IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject
private IAutoFieldGenerator System.Web.UI.WebControls.IFieldControl.FieldsGenerator
public bool AllowPaging
public TableItemStyle AlternatingRowStyle
public bool AutoGenerateEditButton
public bool AutoGenerateDeleteButton
public bool AutoGenerateInsertButton
public bool AutoGenerateRows
public string BackImageUrl
public DetailsViewRow BottomPagerRow
public string Caption
public TableCaptionAlign CaptionAlign
public int CellPadding
public int CellSpacing
public TableItemStyle CommandRowStyle
public DetailsViewMode CurrentMode
public DetailsViewMode DefaultMode
public DataControlFieldCollection Fields
public String[] DataKeyNames
private IOrderedDictionary KeyTable
public DataKey DataKey
private DataKey OldEditValues
public TableItemStyle EditRowStyle
public TableItemStyle EmptyDataRowStyle
public ITemplate EmptyDataTemplate
public string EmptyDataText
public bool EnablePagingCallbacks
public TableItemStyle FieldHeaderStyle
public DetailsViewRow FooterRow
public ITemplate FooterTemplate
public string FooterText
public TableItemStyle FooterStyle
public GridLines GridLines
public DetailsViewRow HeaderRow
public TableItemStyle HeaderStyle
public ITemplate HeaderTemplate
public string HeaderText
public HorizontalAlign HorizontalAlign
public TableItemStyle InsertRowStyle
public int PageCount
public int PageIndex
public PagerSettings PagerSettings
public TableItemStyle PagerStyle
public ITemplate PagerTemplate
public DetailsViewRowCollection Rows
public IAutoFieldGenerator RowsGenerator
public TableItemStyle RowStyle
public object SelectedValue
public DetailsViewRow TopPagerRow
public object DataItem
public int DataItemCount
public int DataItemIndex
private int System.Web.UI.IDataItemContainer.DisplayIndex
private int System.Web.UI.IDataItemContainer.DataItemIndex
public bool EnableModelValidation
protected HtmlTextWriterTag TagKey
public string DeleteMethod
public string InsertMethod
public string UpdateMethod
public void add_PageIndexChanged(EventHandler value)
public void remove_PageIndexChanged(EventHandler value)
public void add_PageIndexChanging(DetailsViewPageEventHandler value)
public void remove_PageIndexChanging(DetailsViewPageEventHandler value)
public void add_ItemCommand(DetailsViewCommandEventHandler value)
public void remove_ItemCommand(DetailsViewCommandEventHandler value)
public void add_ItemCreated(EventHandler value)
public void remove_ItemCreated(EventHandler value)
public void add_ItemDeleted(DetailsViewDeletedEventHandler value)
public void remove_ItemDeleted(DetailsViewDeletedEventHandler value)
public void add_ItemDeleting(DetailsViewDeleteEventHandler value)
public void remove_ItemDeleting(DetailsViewDeleteEventHandler value)
public void add_ItemInserted(DetailsViewInsertedEventHandler value)
public void remove_ItemInserted(DetailsViewInsertedEventHandler value)
public void add_ItemInserting(DetailsViewInsertEventHandler value)
public void remove_ItemInserting(DetailsViewInsertEventHandler value)
public void add_ModeChanging(DetailsViewModeEventHandler value)
public void remove_ModeChanging(DetailsViewModeEventHandler value)
public void add_ModeChanged(EventHandler value)
public void remove_ModeChanged(EventHandler value)
public void add_ItemUpdated(DetailsViewUpdatedEventHandler value)
public void remove_ItemUpdated(DetailsViewUpdatedEventHandler value)
public void add_ItemUpdating(DetailsViewUpdateEventHandler value)
public void remove_ItemUpdating(DetailsViewUpdateEventHandler value)
protected void OnPageIndexChanged(EventArgs e)
protected void OnPageIndexChanging(DetailsViewPageEventArgs e)
protected void OnItemCommand(DetailsViewCommandEventArgs e)
protected void OnItemCreated(EventArgs e)
protected void OnItemDeleted(DetailsViewDeletedEventArgs e)
protected void OnItemInserted(DetailsViewInsertedEventArgs e)
protected void OnItemInserting(DetailsViewInsertEventArgs e)
protected void OnItemDeleting(DetailsViewDeleteEventArgs e)
protected void OnModeChanged(EventArgs e)
protected void OnModeChanging(DetailsViewModeEventArgs e)
protected void OnItemUpdated(DetailsViewUpdatedEventArgs e)
protected void OnItemUpdating(DetailsViewUpdateEventArgs e)
private DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.get_Mode()
private IDataSource System.Web.UI.WebControls.IDataBoundControl.get_DataSourceObject()
private IAutoFieldGenerator System.Web.UI.WebControls.IFieldControl.get_FieldsGenerator()
private void System.Web.UI.WebControls.IFieldControl.set_FieldsGenerator(IAutoFieldGenerator value)
public bool get_AllowPaging()
public void set_AllowPaging(bool value)
public TableItemStyle get_AlternatingRowStyle()
public bool get_AutoGenerateEditButton()
public void set_AutoGenerateEditButton(bool value)
public bool get_AutoGenerateDeleteButton()
public void set_AutoGenerateDeleteButton(bool value)
public bool get_AutoGenerateInsertButton()
public void set_AutoGenerateInsertButton(bool value)
public bool get_AutoGenerateRows()
public void set_AutoGenerateRows(bool value)
public string get_BackImageUrl()
public void set_BackImageUrl(string value)
public DetailsViewRow get_BottomPagerRow()
public string get_Caption()
public void set_Caption(string value)
public TableCaptionAlign get_CaptionAlign()
public void set_CaptionAlign(TableCaptionAlign value)
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public TableItemStyle get_CommandRowStyle()
public DetailsViewMode get_CurrentMode()
private void set_CurrentMode(DetailsViewMode value)
public DetailsViewMode get_DefaultMode()
public void set_DefaultMode(DetailsViewMode value)
public DataControlFieldCollection get_Fields()
public String[] get_DataKeyNames()
public void set_DataKeyNames(String[] value)
private IOrderedDictionary get_KeyTable()
public DataKey get_DataKey()
private DataKey get_OldEditValues()
public TableItemStyle get_EditRowStyle()
public TableItemStyle get_EmptyDataRowStyle()
public ITemplate get_EmptyDataTemplate()
public void set_EmptyDataTemplate(ITemplate value)
public string get_EmptyDataText()
public void set_EmptyDataText(string value)
public bool get_EnablePagingCallbacks()
public void set_EnablePagingCallbacks(bool value)
public TableItemStyle get_FieldHeaderStyle()
public DetailsViewRow get_FooterRow()
public ITemplate get_FooterTemplate()
public void set_FooterTemplate(ITemplate value)
public string get_FooterText()
public void set_FooterText(string value)
public TableItemStyle get_FooterStyle()
public GridLines get_GridLines()
public void set_GridLines(GridLines value)
public DetailsViewRow get_HeaderRow()
public TableItemStyle get_HeaderStyle()
public ITemplate get_HeaderTemplate()
public void set_HeaderTemplate(ITemplate value)
public string get_HeaderText()
public void set_HeaderText(string value)
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public TableItemStyle get_InsertRowStyle()
public int get_PageCount()
private void set_PageCount(int value)
public int get_PageIndex()
public void set_PageIndex(int value)
public PagerSettings get_PagerSettings()
public TableItemStyle get_PagerStyle()
public ITemplate get_PagerTemplate()
public void set_PagerTemplate(ITemplate value)
public DetailsViewRowCollection get_Rows()
public IAutoFieldGenerator get_RowsGenerator()
public void set_RowsGenerator(IAutoFieldGenerator value)
public TableItemStyle get_RowStyle()
public object get_SelectedValue()
public DetailsViewRow get_TopPagerRow()
public object get_DataItem()
public int get_DataItemCount()
public int get_DataItemIndex()
private int System.Web.UI.IDataItemContainer.get_DisplayIndex()
private int System.Web.UI.IDataItemContainer.get_DataItemIndex()
public bool get_EnableModelValidation()
public void set_EnableModelValidation(bool value)
public bool IsBindableType(Type type)
protected DataSourceSelectArguments CreateDataSourceSelectArguments()
protected ICollection CreateFieldSet(object dataItem, bool useDataSource)
protected ICollection CreateAutoGeneratedRows(object dataItem)
protected AutoGeneratedField CreateAutoGeneratedRow(AutoGeneratedFieldProperties fieldProperties)
private AutoGeneratedFieldProperties[] CreateAutoFieldProperties(object dataItem)
protected DetailsViewRow CreateRow(int rowIndex, DataControlRowType rowType, DataControlRowState rowState)
private void RequireBinding()
protected Table CreateTable()
protected Style CreateControlStyle()
protected int CreateChildControls(IEnumerable dataSource, bool dataBinding)
protected void EnsureDataBound()
private DataControlRowState GetRowState(int index)
protected void InitializePager(DetailsViewRow row, PagedDataSource pagedDataSource)
private DetailsViewRow CreateEmptyRow()
protected void InitializeRow(DetailsViewRow row, DataControlField field)
private void FillRowDataKey(object dataItem)
private IOrderedDictionary GetRowValues(bool includeReadOnlyFields, bool includePrimaryKey)
protected void ExtractRowValues(IOrderedDictionary fieldValues, bool includeReadOnlyFields, bool includeKeys)
protected HtmlTextWriterTag get_TagKey()
public void DataBind()
protected internal void PerformDataBinding(IEnumerable data)
protected internal void PrepareControlHierarchy()
protected internal void OnInit(EventArgs e)
private void OnFieldsChanged(object sender, EventArgs args)
protected void OnDataSourceViewChanged(object sender, EventArgs e)
protected bool OnBubbleEvent(object source, EventArgs e)
private void ProcessCommand(DetailsViewCommandEventArgs args, bool causesValidation)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected void RaisePostBackEvent(string eventArgument)
private void ProcessEvent(string eventName, string param, bool causesValidation)
public void SetPageIndex(int index)
public void ChangeMode(DetailsViewMode newMode)
private void ProcessChangeMode(DetailsViewMode newMode)
private void CancelEdit()
public void UpdateItem(bool causesValidation)
private void UpdateItem(string param, bool causesValidation)
private bool UpdateCallback(int recordsAffected, Exception exception)
public void InsertItem(bool causesValidation)
private void InsertItem(string param, bool causesValidation)
private bool InsertCallback(int recordsAffected, Exception exception)
public void DeleteItem()
private bool DeleteCallback(int recordsAffected, Exception exception)
private void EndRowEdit()
private void EndRowEdit(bool switchToDefaultMode)
protected internal void LoadControlState(object savedState)
protected internal object SaveControlState()
protected void TrackViewState()
protected object SaveViewState()
protected void LoadViewState(object savedState)
private void System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(string eventArgument)
protected void RaiseCallbackEvent(string eventArgument)
private string System.Web.UI.ICallbackEventHandler.GetCallbackResult()
protected string GetCallbackResult()
protected string GetCallbackScript(IButtonControl buttonControl, string argument)
private string System.Web.UI.WebControls.ICallbackContainer.GetCallbackScript(IButtonControl control, string argument)
protected void OnPagePreLoad(object sender, EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
private void RenderGrid(HtmlTextWriter writer)
private PostBackOptions System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl control)
public string get_DeleteMethod()
public void set_DeleteMethod(string value)
public string get_InsertMethod()
public void set_InsertMethod(string value)
private string System.Web.UI.WebControls.IDataBoundControl.get_DataMember()
private void System.Web.UI.WebControls.IDataBoundControl.set_DataMember(string value)
private object System.Web.UI.WebControls.IDataBoundControl.get_DataSource()
private void System.Web.UI.WebControls.IDataBoundControl.set_DataSource(object value)
private string System.Web.UI.WebControls.IDataBoundControl.get_DataSourceID()
private void System.Web.UI.WebControls.IDataBoundControl.set_DataSourceID(string value)
public string get_UpdateMethod()
public void set_UpdateMethod(string value)
}
public System.Web.UI.WebControls.DetailsViewCommandEventArgs : CommandEventArgs {
private object _commandSource
private bool <Handled>k__BackingField
public object CommandSource
public bool Handled
public void .ctor(object commandSource, CommandEventArgs originalArgs)
public object get_CommandSource()
public bool get_Handled()
public void set_Handled(bool value)
}
public System.Web.UI.WebControls.DetailsViewCommandEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DetailsViewCommandEventArgs e)
public IAsyncResult BeginInvoke(object sender, DetailsViewCommandEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DetailsViewDeletedEventArgs : EventArgs {
private int rowsAffected
private Exception e
private bool exceptionHandled
private IOrderedDictionary keys
private IOrderedDictionary values
public int AffectedRows
public Exception Exception
public bool ExceptionHandled
public IOrderedDictionary Keys
public IOrderedDictionary Values
public void .ctor(int affectedRows, Exception e)
internal void .ctor(int affectedRows, Exception e, IOrderedDictionary keys, IOrderedDictionary values)
public int get_AffectedRows()
public Exception get_Exception()
public bool get_ExceptionHandled()
public void set_ExceptionHandled(bool value)
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_Values()
}
public System.Web.UI.WebControls.DetailsViewDeletedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DetailsViewDeletedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DetailsViewDeletedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DetailsViewDeleteEventArgs : CancelEventArgs {
private int rowIndex
private IOrderedDictionary keys
private IOrderedDictionary values
public int RowIndex
public IOrderedDictionary Keys
public IOrderedDictionary Values
public void .ctor(int rowIndex)
internal void .ctor(int index, IOrderedDictionary keys, IOrderedDictionary values)
public int get_RowIndex()
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_Values()
}
public System.Web.UI.WebControls.DetailsViewDeleteEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DetailsViewDeleteEventArgs e)
public IAsyncResult BeginInvoke(object sender, DetailsViewDeleteEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DetailsViewInsertedEventArgs : EventArgs {
private int rowsAffected
private Exception e
private bool exceptionHandled
private bool keepInsertedMode
private IOrderedDictionary values
public int AffectedRows
public Exception Exception
public bool ExceptionHandled
public bool KeepInInsertMode
public IOrderedDictionary Values
public void .ctor(int affectedRows, Exception e)
internal void .ctor(int affectedRows, Exception e, IOrderedDictionary values)
public int get_AffectedRows()
public Exception get_Exception()
public bool get_ExceptionHandled()
public void set_ExceptionHandled(bool value)
public bool get_KeepInInsertMode()
public void set_KeepInInsertMode(bool value)
public IOrderedDictionary get_Values()
}
public System.Web.UI.WebControls.DetailsViewInsertedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DetailsViewInsertedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DetailsViewInsertedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DetailsViewInsertEventArgs : CancelEventArgs {
private object argument
private IOrderedDictionary values
public object CommandArgument
public IOrderedDictionary Values
public void .ctor(object commandArgument)
internal void .ctor(object argument, IOrderedDictionary values)
public object get_CommandArgument()
public IOrderedDictionary get_Values()
}
public System.Web.UI.WebControls.DetailsViewInsertEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DetailsViewInsertEventArgs e)
public IAsyncResult BeginInvoke(object sender, DetailsViewInsertEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DetailsViewMode : Enum {
public int value__
public DetailsViewMode ReadOnly
public DetailsViewMode Edit
public DetailsViewMode Insert
}
public System.Web.UI.WebControls.DetailsViewModeEventArgs : CancelEventArgs {
private DetailsViewMode _mode
private bool _cancelingEdit
public bool CancelingEdit
public DetailsViewMode NewMode
public void .ctor(DetailsViewMode mode, bool cancelingEdit)
public bool get_CancelingEdit()
public DetailsViewMode get_NewMode()
public void set_NewMode(DetailsViewMode value)
}
public System.Web.UI.WebControls.DetailsViewModeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DetailsViewModeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DetailsViewModeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DetailsViewPageEventArgs : CancelEventArgs {
private int _newPageIndex
public int NewPageIndex
public void .ctor(int newPageIndex)
public int get_NewPageIndex()
public void set_NewPageIndex(int value)
}
public System.Web.UI.WebControls.DetailsViewPageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DetailsViewPageEventArgs e)
public IAsyncResult BeginInvoke(object sender, DetailsViewPageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DetailsViewPagerRow : DetailsViewRow {
public void .ctor(int rowIndex, DataControlRowType rowType, DataControlRowState rowState)
}
public System.Web.UI.WebControls.DetailsViewRow : TableRow {
private int rowIndex
private DataControlRowState rowState
private DataControlRowType rowType
private DataControlField containingField
public int RowIndex
public DataControlRowState RowState
public DataControlRowType RowType
internal DataControlField ContainingField
public void .ctor(int rowIndex, DataControlRowType rowType, DataControlRowState rowState)
public int get_RowIndex()
public DataControlRowState get_RowState()
public DataControlRowType get_RowType()
internal DataControlField get_ContainingField()
internal void set_ContainingField(DataControlField value)
protected bool OnBubbleEvent(object source, EventArgs e)
}
public System.Web.UI.WebControls.DetailsViewRowCollection : object {
private ArrayList rows
public DetailsViewRow Item
public int Count
public bool IsSynchronized
public object SyncRoot
public bool IsReadOnly
public void .ctor(ArrayList rows)
public DetailsViewRow get_Item(int index)
public void CopyTo(DetailsViewRow[] array, int index)
public IEnumerator GetEnumerator()
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
public bool get_IsReadOnly()
private void System.Collections.ICollection.CopyTo(Array array, int index)
}
public System.Web.UI.WebControls.DetailsViewRowsGenerator : AutoFieldsGenerator {
public List`1<AutoGeneratedField> CreateAutoGeneratedFields(object dataItem, Control control)
}
public System.Web.UI.WebControls.DetailsViewUpdatedEventArgs : EventArgs {
private int rowsAffected
private Exception e
private bool exceptionHandled
private bool keepEditMode
private IOrderedDictionary keys
private IOrderedDictionary newValues
private IOrderedDictionary oldValues
public int AffectedRows
public Exception Exception
public bool ExceptionHandled
public bool KeepInEditMode
public IOrderedDictionary Keys
public IOrderedDictionary NewValues
public IOrderedDictionary OldValues
public void .ctor(int affectedRows, Exception e)
internal void .ctor(int affectedRows, Exception e, IOrderedDictionary keys, IOrderedDictionary oldValues, IOrderedDictionary newValues)
public int get_AffectedRows()
public Exception get_Exception()
public bool get_ExceptionHandled()
public void set_ExceptionHandled(bool value)
public bool get_KeepInEditMode()
public void set_KeepInEditMode(bool value)
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_NewValues()
public IOrderedDictionary get_OldValues()
}
public System.Web.UI.WebControls.DetailsViewUpdatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DetailsViewUpdatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DetailsViewUpdatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DetailsViewUpdateEventArgs : CancelEventArgs {
private object argument
private IOrderedDictionary keys
private IOrderedDictionary newValues
private IOrderedDictionary oldValues
public object CommandArgument
public IOrderedDictionary Keys
public IOrderedDictionary NewValues
public IOrderedDictionary OldValues
public void .ctor(object commandArgument)
internal void .ctor(object argument, IOrderedDictionary keys, IOrderedDictionary oldValues, IOrderedDictionary newValues)
public object get_CommandArgument()
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_NewValues()
public IOrderedDictionary get_OldValues()
}
public System.Web.UI.WebControls.DetailsViewUpdateEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DetailsViewUpdateEventArgs e)
public IAsyncResult BeginInvoke(object sender, DetailsViewUpdateEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.DropDownList : ListControl {
public Color BorderColor
public BorderStyle BorderStyle
public Unit BorderWidth
public int SelectedIndex
public bool SupportsDisabledAttribute
public Color get_BorderColor()
public void set_BorderColor(Color value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public Unit get_BorderWidth()
public void set_BorderWidth(Unit value)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public bool get_SupportsDisabledAttribute()
protected void AddAttributesToRender(HtmlTextWriter writer)
private PostBackOptions GetPostBackOptions()
protected ControlCollection CreateControlCollection()
protected internal void VerifyMultiSelect()
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
}
public System.Web.UI.WebControls.EditCommandColumn : DataGridColumn {
public ButtonColumnType ButtonType
public string CancelText
public bool CausesValidation
public string ValidationGroup
public string EditText
public string UpdateText
public ButtonColumnType get_ButtonType()
public void set_ButtonType(ButtonColumnType value)
public string get_CancelText()
public void set_CancelText(string value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
public string get_EditText()
public void set_EditText(string value)
public string get_UpdateText()
public void set_UpdateText(string value)
public void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType)
private Control CreateButton(ButtonColumnType type, string text, string command, bool valid)
}
public System.Web.UI.WebControls.EmbeddedMailObject : object {
private string <Name>k__BackingField
private string <Path>k__BackingField
public string Name
public string Path
public void .ctor(string name, string path)
public string get_Name()
public void set_Name(string value)
public string get_Path()
public void set_Path(string value)
}
public System.Web.UI.WebControls.EmbeddedMailObjectsCollection : CollectionBase {
public EmbeddedMailObject Item
public EmbeddedMailObject get_Item(int index)
public void set_Item(int index, EmbeddedMailObject value)
public int Add(EmbeddedMailObject value)
public bool Contains(EmbeddedMailObject value)
public void CopyTo(EmbeddedMailObject[] array, int index)
public int IndexOf(EmbeddedMailObject value)
public void Insert(int index, EmbeddedMailObject value)
protected void OnValidate(object value)
public void Remove(EmbeddedMailObject value)
}
public System.Web.UI.WebControls.FileUpload : WebControl {
private Byte[] cachedBytes
public Byte[] FileBytes
public Stream FileContent
public string FileName
public bool HasFile
public HttpPostedFile PostedFile
public bool AllowMultiple
public bool HasFiles
public IList`1<HttpPostedFile> PostedFiles
public Byte[] get_FileBytes()
public Stream get_FileContent()
public string get_FileName()
public bool get_HasFile()
public HttpPostedFile get_PostedFile()
protected void AddAttributesToRender(HtmlTextWriter writer)
protected internal void OnPreRender(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
public void SaveAs(string filename)
public bool get_AllowMultiple()
public void set_AllowMultiple(bool value)
public bool get_HasFiles()
public IList`1<HttpPostedFile> get_PostedFiles()
}
public System.Web.UI.WebControls.FirstDayOfWeek : Enum {
public int value__
public FirstDayOfWeek Sunday
public FirstDayOfWeek Monday
public FirstDayOfWeek Tuesday
public FirstDayOfWeek Wednesday
public FirstDayOfWeek Thursday
public FirstDayOfWeek Friday
public FirstDayOfWeek Saturday
public FirstDayOfWeek Default
}
public System.Web.UI.WebControls.FontInfo : object {
private String[] empty_names
private StateBag bag
private Style _owner
public bool Bold
public bool Italic
public string Name
public String[] Names
public bool Overline
public FontUnit Size
public bool Strikeout
public bool Underline
private bool IsEmpty
internal void .ctor(Style owner)
public bool get_Bold()
public void set_Bold(bool value)
public bool get_Italic()
public void set_Italic(bool value)
public string get_Name()
public void set_Name(string value)
public String[] get_Names()
public void set_Names(String[] value)
public bool get_Overline()
public void set_Overline(bool value)
public FontUnit get_Size()
public void set_Size(FontUnit value)
public bool get_Strikeout()
public void set_Strikeout(bool value)
public bool get_Underline()
public void set_Underline(bool value)
public void CopyFrom(FontInfo f)
public void MergeWith(FontInfo f)
public bool ShouldSerializeNames()
public string ToString()
public void ClearDefaults()
internal void Reset()
internal void FillStyleAttributes(CssStyleCollection attributes, bool alwaysRenderTextDecoration)
private bool get_IsEmpty()
}
public System.Web.UI.WebControls.FontNamesConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Web.UI.WebControls.FontSize : Enum {
public int value__
public FontSize NotSet
public FontSize AsUnit
public FontSize Smaller
public FontSize Larger
public FontSize XXSmall
public FontSize XSmall
public FontSize Small
public FontSize Medium
public FontSize Large
public FontSize XLarge
public FontSize XXLarge
}
public System.Web.UI.WebControls.FontUnit : ValueType {
private FontSize type
private Unit unit
public FontUnit Empty
public FontUnit Smaller
public FontUnit Larger
public FontUnit XXSmall
public FontUnit XSmall
public FontUnit Small
public FontUnit Medium
public FontUnit Large
public FontUnit XLarge
public FontUnit XXLarge
private String[] font_size_names
public bool IsEmpty
public FontSize Type
public Unit Unit
public void .ctor(FontSize type)
public void .ctor(int value)
public void .ctor(double value)
public void .ctor(double value, UnitType type)
public void .ctor(Unit value)
public void .ctor(string value)
public void .ctor(string value, CultureInfo culture)
public bool get_IsEmpty()
public FontSize get_Type()
public Unit get_Unit()
public FontUnit Parse(string s)
public FontUnit Parse(string s, CultureInfo culture)
public FontUnit Point(int n)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(FontUnit left, FontUnit right)
public bool op_Inequality(FontUnit left, FontUnit right)
public FontUnit op_Implicit(int n)
public string ToString(IFormatProvider formatProvider)
public string ToString(CultureInfo culture)
public string ToString()
}
public System.Web.UI.WebControls.FontUnitConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Web.UI.WebControls.FormParameter : Parameter {
public string FormField
public bool ValidateInput
protected void .ctor(FormParameter original)
public void .ctor(string name, string formField)
public void .ctor(string name, TypeCode type, string formField)
public void .ctor(string name, DbType dbType, string formField)
protected Parameter Clone()
protected internal object Evaluate(HttpContext context, Control control)
public string get_FormField()
public void set_FormField(string value)
public bool get_ValidateInput()
public void set_ValidateInput(bool value)
}
public System.Web.UI.WebControls.FormView : CompositeDataBoundControl {
private object dataItem
private Table table
private FormViewRow headerRow
private FormViewRow footerRow
private FormViewRow bottomPagerRow
private FormViewRow topPagerRow
private FormViewRow itemRow
private IOrderedDictionary currentEditRowKeys
private IOrderedDictionary currentEditNewValues
private IOrderedDictionary currentEditOldValues
private ITemplate pagerTemplate
private ITemplate emptyDataTemplate
private ITemplate headerTemplate
private ITemplate footerTemplate
private ITemplate editItemTemplate
private ITemplate insertItemTemplate
private ITemplate itemTemplate
private PropertyDescriptor[] cachedKeyProperties
private String[] emptyKeys
private string unhandledEventExceptionMessage
private PagerSettings pagerSettings
private TableItemStyle editRowStyle
private TableItemStyle insertRowStyle
private TableItemStyle emptyDataRowStyle
private TableItemStyle footerStyle
private TableItemStyle headerStyle
private TableItemStyle pagerStyle
private TableItemStyle rowStyle
private IOrderedDictionary _keyTable
private DataKey key
private DataKey oldEditValues
private bool renderOuterTable
private object PageIndexChangedEvent
private object PageIndexChangingEvent
private object ItemCommandEvent
private object ItemCreatedEvent
private object ItemDeletedEvent
private object ItemDeletingEvent
private object ItemInsertedEvent
private object ItemInsertingEvent
private object ModeChangingEvent
private object ModeChangedEvent
private object ItemUpdatedEvent
private object ItemUpdatingEvent
private int pageIndex
private FormViewMode currentMode
private bool hasCurrentMode
private int pageCount
private FormViewMode defaultMode
private String[] dataKeyNames
private bool <EnableModelValidation>k__BackingField
public bool AllowPaging
public string BackImageUrl
public FormViewRow BottomPagerRow
public string Caption
public TableCaptionAlign CaptionAlign
public int CellPadding
public int CellSpacing
public FormViewMode CurrentMode
public FormViewMode DefaultMode
public String[] DataKeyNames
private IOrderedDictionary KeyTable
public DataKey DataKey
private DataKey OldEditValues
public ITemplate EditItemTemplate
public TableItemStyle EditRowStyle
public TableItemStyle EmptyDataRowStyle
public ITemplate EmptyDataTemplate
public string EmptyDataText
public FormViewRow FooterRow
public ITemplate FooterTemplate
public string FooterText
public TableItemStyle FooterStyle
public GridLines GridLines
public FormViewRow HeaderRow
public TableItemStyle HeaderStyle
public ITemplate HeaderTemplate
public string HeaderText
public HorizontalAlign HorizontalAlign
public ITemplate InsertItemTemplate
public TableItemStyle InsertRowStyle
public ITemplate ItemTemplate
public int PageCount
public int PageIndex
public PagerSettings PagerSettings
public TableItemStyle PagerStyle
public ITemplate PagerTemplate
public FormViewRow Row
public TableItemStyle RowStyle
public object SelectedValue
public FormViewRow TopPagerRow
public object DataItem
public int DataItemCount
public int DataItemIndex
private int System.Web.UI.IDataItemContainer.DataItemIndex
private int System.Web.UI.IDataItemContainer.DisplayIndex
public bool EnableModelValidation
public bool RenderOuterTable
private DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode
protected HtmlTextWriterTag TagKey
public string DeleteMethod
public string InsertMethod
public string UpdateMethod
public void add_PageIndexChanged(EventHandler value)
public void remove_PageIndexChanged(EventHandler value)
public void add_PageIndexChanging(FormViewPageEventHandler value)
public void remove_PageIndexChanging(FormViewPageEventHandler value)
public void add_ItemCommand(FormViewCommandEventHandler value)
public void remove_ItemCommand(FormViewCommandEventHandler value)
public void add_ItemCreated(EventHandler value)
public void remove_ItemCreated(EventHandler value)
public void add_ItemDeleted(FormViewDeletedEventHandler value)
public void remove_ItemDeleted(FormViewDeletedEventHandler value)
public void add_ItemDeleting(FormViewDeleteEventHandler value)
public void remove_ItemDeleting(FormViewDeleteEventHandler value)
public void add_ItemInserted(FormViewInsertedEventHandler value)
public void remove_ItemInserted(FormViewInsertedEventHandler value)
public void add_ItemInserting(FormViewInsertEventHandler value)
public void remove_ItemInserting(FormViewInsertEventHandler value)
public void add_ModeChanging(FormViewModeEventHandler value)
public void remove_ModeChanging(FormViewModeEventHandler value)
public void add_ModeChanged(EventHandler value)
public void remove_ModeChanged(EventHandler value)
public void add_ItemUpdated(FormViewUpdatedEventHandler value)
public void remove_ItemUpdated(FormViewUpdatedEventHandler value)
public void add_ItemUpdating(FormViewUpdateEventHandler value)
public void remove_ItemUpdating(FormViewUpdateEventHandler value)
protected void OnPageIndexChanged(EventArgs e)
protected void OnPageIndexChanging(FormViewPageEventArgs e)
protected void OnItemCommand(FormViewCommandEventArgs e)
protected void OnItemCreated(EventArgs e)
protected void OnItemDeleted(FormViewDeletedEventArgs e)
protected void OnItemInserted(FormViewInsertedEventArgs e)
protected void OnItemInserting(FormViewInsertEventArgs e)
protected void OnItemDeleting(FormViewDeleteEventArgs e)
protected void OnModeChanged(EventArgs e)
protected void OnModeChanging(FormViewModeEventArgs e)
protected void OnItemUpdated(FormViewUpdatedEventArgs e)
protected void OnItemUpdating(FormViewUpdateEventArgs e)
public bool get_AllowPaging()
public void set_AllowPaging(bool value)
public string get_BackImageUrl()
public void set_BackImageUrl(string value)
public FormViewRow get_BottomPagerRow()
public string get_Caption()
public void set_Caption(string value)
public TableCaptionAlign get_CaptionAlign()
public void set_CaptionAlign(TableCaptionAlign value)
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public FormViewMode get_CurrentMode()
private void set_CurrentMode(FormViewMode value)
public FormViewMode get_DefaultMode()
public void set_DefaultMode(FormViewMode value)
public String[] get_DataKeyNames()
public void set_DataKeyNames(String[] value)
private IOrderedDictionary get_KeyTable()
public DataKey get_DataKey()
private DataKey get_OldEditValues()
public ITemplate get_EditItemTemplate()
public void set_EditItemTemplate(ITemplate value)
public TableItemStyle get_EditRowStyle()
public TableItemStyle get_EmptyDataRowStyle()
public ITemplate get_EmptyDataTemplate()
public void set_EmptyDataTemplate(ITemplate value)
public string get_EmptyDataText()
public void set_EmptyDataText(string value)
public FormViewRow get_FooterRow()
public ITemplate get_FooterTemplate()
public void set_FooterTemplate(ITemplate value)
public string get_FooterText()
public void set_FooterText(string value)
public TableItemStyle get_FooterStyle()
public GridLines get_GridLines()
public void set_GridLines(GridLines value)
public FormViewRow get_HeaderRow()
public TableItemStyle get_HeaderStyle()
public ITemplate get_HeaderTemplate()
public void set_HeaderTemplate(ITemplate value)
public string get_HeaderText()
public void set_HeaderText(string value)
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public ITemplate get_InsertItemTemplate()
public void set_InsertItemTemplate(ITemplate value)
public TableItemStyle get_InsertRowStyle()
public ITemplate get_ItemTemplate()
public void set_ItemTemplate(ITemplate value)
public int get_PageCount()
private void set_PageCount(int value)
public int get_PageIndex()
public void set_PageIndex(int value)
public PagerSettings get_PagerSettings()
public TableItemStyle get_PagerStyle()
public ITemplate get_PagerTemplate()
public void set_PagerTemplate(ITemplate value)
public FormViewRow get_Row()
public TableItemStyle get_RowStyle()
public object get_SelectedValue()
public FormViewRow get_TopPagerRow()
public object get_DataItem()
public int get_DataItemCount()
public int get_DataItemIndex()
private int System.Web.UI.IDataItemContainer.get_DataItemIndex()
private int System.Web.UI.IDataItemContainer.get_DisplayIndex()
public bool get_EnableModelValidation()
public void set_EnableModelValidation(bool value)
public bool get_RenderOuterTable()
public void set_RenderOuterTable(bool value)
private DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.get_Mode()
protected internal string ModifiedOuterTableStylePropertyName()
internal string InlinePropertiesSet()
public bool IsBindableType(Type type)
protected DataSourceSelectArguments CreateDataSourceSelectArguments()
protected FormViewRow CreateRow(int itemIndex, DataControlRowType rowType, DataControlRowState rowState)
private void RequireBinding()
protected Table CreateTable()
protected void EnsureDataBound()
protected Style CreateControlStyle()
protected int CreateChildControls(IEnumerable dataSource, bool dataBinding)
private DataControlRowState GetRowState()
protected void InitializePager(FormViewRow row, PagedDataSource pagedDataSource)
protected void InitializeRow(FormViewRow row)
private void FillRowDataKey(object dataItem)
private IOrderedDictionary GetRowValues(bool includePrimaryKey)
protected void ExtractRowValues(IOrderedDictionary fieldValues, bool includeKeys)
protected HtmlTextWriterTag get_TagKey()
public void DataBind()
protected internal void PerformDataBinding(IEnumerable data)
protected internal void PrepareControlHierarchy()
protected internal void OnInit(EventArgs e)
protected bool OnBubbleEvent(object source, EventArgs e)
private void ProcessCommand(FormViewCommandEventArgs args, bool causesValidation)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected void RaisePostBackEvent(string eventArgument)
private void ProcessEvent(string eventName, string param, bool causesValidation)
public void SetPageIndex(int index)
public void ChangeMode(FormViewMode newMode)
private void ProcessChangeMode(FormViewMode newMode, bool cancelingEdit)
private void CancelEdit()
public void UpdateItem(bool causesValidation)
private void UpdateItem(string param, bool causesValidation)
private bool UpdateCallback(int recordsAffected, Exception exception)
public void InsertItem(bool causesValidation)
private void InsertItem(string param, bool causesValidation)
private bool InsertCallback(int recordsAffected, Exception exception)
public void DeleteItem()
private bool DeleteCallback(int recordsAffected, Exception exception)
private void EndRowEdit(bool switchToDefaultMode, bool cancelingEdit)
protected internal void LoadControlState(object savedState)
protected internal object SaveControlState()
protected void TrackViewState()
protected object SaveViewState()
protected void LoadViewState(object savedState)
protected internal void Render(HtmlTextWriter writer)
private PostBackOptions System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl control)
public string get_DeleteMethod()
public void set_DeleteMethod(string value)
public string get_InsertMethod()
public void set_InsertMethod(string value)
private string System.Web.UI.WebControls.IDataBoundControl.get_DataMember()
private void System.Web.UI.WebControls.IDataBoundControl.set_DataMember(string value)
private object System.Web.UI.WebControls.IDataBoundControl.get_DataSource()
private void System.Web.UI.WebControls.IDataBoundControl.set_DataSource(object value)
private string System.Web.UI.WebControls.IDataBoundControl.get_DataSourceID()
private void System.Web.UI.WebControls.IDataBoundControl.set_DataSourceID(string value)
private IDataSource System.Web.UI.WebControls.IDataBoundControl.get_DataSourceObject()
public string get_UpdateMethod()
public void set_UpdateMethod(string value)
}
public System.Web.UI.WebControls.FormViewCommandEventArgs : CommandEventArgs {
private object source
public object CommandSource
public bool Handled
public void .ctor(object commandSource, CommandEventArgs originalArgs)
public object get_CommandSource()
public bool get_Handled()
public void set_Handled(bool value)
}
public System.Web.UI.WebControls.FormViewCommandEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormViewCommandEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormViewCommandEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.FormViewDeletedEventArgs : EventArgs {
private int rowsAffected
private Exception e
private bool exceptionHandled
private IOrderedDictionary keys
private IOrderedDictionary values
public int AffectedRows
public Exception Exception
public bool ExceptionHandled
public IOrderedDictionary Keys
public IOrderedDictionary Values
public void .ctor(int affectedRows, Exception e)
internal void .ctor(int affectedRows, Exception e, IOrderedDictionary keys, IOrderedDictionary values)
public int get_AffectedRows()
public Exception get_Exception()
public bool get_ExceptionHandled()
public void set_ExceptionHandled(bool value)
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_Values()
}
public System.Web.UI.WebControls.FormViewDeletedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormViewDeletedEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormViewDeletedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.FormViewDeleteEventArgs : CancelEventArgs {
private int rowIndex
private IOrderedDictionary keys
private IOrderedDictionary values
public int RowIndex
public IOrderedDictionary Keys
public IOrderedDictionary Values
public void .ctor(int rowIndex)
internal void .ctor(int index, IOrderedDictionary keys, IOrderedDictionary values)
public int get_RowIndex()
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_Values()
}
public System.Web.UI.WebControls.FormViewDeleteEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormViewDeleteEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormViewDeleteEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.FormViewInsertedEventArgs : EventArgs {
private int rowsAffected
private Exception e
private bool exceptionHandled
private bool keepInsertedMode
private IOrderedDictionary values
public int AffectedRows
public Exception Exception
public bool ExceptionHandled
public bool KeepInInsertMode
public IOrderedDictionary Values
public void .ctor(int affectedRows, Exception e)
internal void .ctor(int affectedRows, Exception e, IOrderedDictionary values)
public int get_AffectedRows()
public Exception get_Exception()
public bool get_ExceptionHandled()
public void set_ExceptionHandled(bool value)
public bool get_KeepInInsertMode()
public void set_KeepInInsertMode(bool value)
public IOrderedDictionary get_Values()
}
public System.Web.UI.WebControls.FormViewInsertedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormViewInsertedEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormViewInsertedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.FormViewInsertEventArgs : CancelEventArgs {
private object argument
private IOrderedDictionary values
public object CommandArgument
public IOrderedDictionary Values
public void .ctor(object commandArgument)
internal void .ctor(object argument, IOrderedDictionary values)
public object get_CommandArgument()
public IOrderedDictionary get_Values()
}
public System.Web.UI.WebControls.FormViewInsertEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormViewInsertEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormViewInsertEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.FormViewMode : Enum {
public int value__
public FormViewMode ReadOnly
public FormViewMode Edit
public FormViewMode Insert
}
public System.Web.UI.WebControls.FormViewModeEventArgs : CancelEventArgs {
private FormViewMode _mode
private bool _cancelingEdit
public bool CancelingEdit
public FormViewMode NewMode
public void .ctor(FormViewMode mode, bool cancelingEdit)
public bool get_CancelingEdit()
public FormViewMode get_NewMode()
public void set_NewMode(FormViewMode value)
}
public System.Web.UI.WebControls.FormViewModeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormViewModeEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormViewModeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.FormViewPageEventArgs : CancelEventArgs {
private int _newPageIndex
public int NewPageIndex
public void .ctor(int newPageIndex)
public int get_NewPageIndex()
public void set_NewPageIndex(int value)
}
public System.Web.UI.WebControls.FormViewPageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormViewPageEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormViewPageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.FormViewPagerRow : FormViewRow {
public void .ctor(int rowIndex, DataControlRowType rowType, DataControlRowState rowState)
}
public System.Web.UI.WebControls.FormViewRow : TableRow {
private int rowIndex
private DataControlRowState rowState
private DataControlRowType rowType
private bool <RenderJustCellContents>k__BackingField
internal bool RenderJustCellContents
public int ItemIndex
public DataControlRowState RowState
public DataControlRowType RowType
internal bool get_RenderJustCellContents()
internal void set_RenderJustCellContents(bool value)
public void .ctor(int itemIndex, DataControlRowType rowType, DataControlRowState rowState)
public int get_ItemIndex()
public DataControlRowState get_RowState()
public DataControlRowType get_RowType()
protected bool OnBubbleEvent(object source, EventArgs e)
protected internal void Render(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.FormViewUpdatedEventArgs : EventArgs {
private int rowsAffected
private Exception e
private bool exceptionHandled
private bool keepEditMode
private IOrderedDictionary keys
private IOrderedDictionary oldValues
private IOrderedDictionary newValues
public int AffectedRows
public Exception Exception
public bool ExceptionHandled
public bool KeepInEditMode
public IOrderedDictionary Keys
public IOrderedDictionary NewValues
public IOrderedDictionary OldValues
public void .ctor(int affectedRows, Exception e)
internal void .ctor(int affectedRows, Exception e, IOrderedDictionary keys, IOrderedDictionary oldValues, IOrderedDictionary newValues)
public int get_AffectedRows()
public Exception get_Exception()
public bool get_ExceptionHandled()
public void set_ExceptionHandled(bool value)
public bool get_KeepInEditMode()
public void set_KeepInEditMode(bool value)
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_NewValues()
public IOrderedDictionary get_OldValues()
}
public System.Web.UI.WebControls.FormViewUpdatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormViewUpdatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormViewUpdatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.FormViewUpdateEventArgs : CancelEventArgs {
private object argument
private IOrderedDictionary keys
private IOrderedDictionary oldValues
private IOrderedDictionary newValues
public object CommandArgument
public IOrderedDictionary Keys
public IOrderedDictionary NewValues
public IOrderedDictionary OldValues
public void .ctor(object commandArgument)
internal void .ctor(object argument, IOrderedDictionary keys, IOrderedDictionary oldValues, IOrderedDictionary newValues)
public object get_CommandArgument()
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_NewValues()
public IOrderedDictionary get_OldValues()
}
public System.Web.UI.WebControls.FormViewUpdateEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormViewUpdateEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormViewUpdateEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridLines : Enum {
public int value__
public GridLines None
public GridLines Horizontal
public GridLines Vertical
public GridLines Both
}
public System.Web.UI.WebControls.GridView : CompositeDataBoundControl {
private Table table
private GridViewRowCollection rows
private GridViewRow bottomPagerRow
private GridViewRow topPagerRow
private IOrderedDictionary currentEditRowKeys
private IOrderedDictionary currentEditNewValues
private IOrderedDictionary currentEditOldValues
private ITemplate pagerTemplate
private ITemplate emptyDataTemplate
private PropertyDescriptor[] cachedKeyProperties
private PropertyDescriptor[] cachedSuffixKeyProperties
private DataControlFieldCollection columns
private PagerSettings pagerSettings
private TableItemStyle alternatingRowStyle
private TableItemStyle editRowStyle
private TableItemStyle emptyDataRowStyle
private TableItemStyle footerStyle
private TableItemStyle headerStyle
private TableItemStyle pagerStyle
private TableItemStyle rowStyle
private TableItemStyle selectedRowStyle
private TableItemStyle sortedAscendingCellStyle
private TableItemStyle sortedAscendingHeaderStyle
private TableItemStyle sortedDescendingCellStyle
private TableItemStyle sortedDescendingHeaderStyle
private List`1<DataKey> _dataKeySuffixList
private DataKeyArray rowSuffixKeys
private List`1<DataKey> _dataKeyList
private DataKeyArray keys
private DataKey oldEditValues
private AutoGeneratedFieldProperties[] autoFieldProperties
private String[] dataKeyNames
private String[] emptyKeys
private IEnumerator _dataEnumerator
private object PageIndexChangedEvent
private object PageIndexChangingEvent
private object RowCancelingEditEvent
private object RowCommandEvent
private object RowCreatedEvent
private object RowDataBoundEvent
private object RowDeletedEvent
private object RowDeletingEvent
private object RowEditingEvent
private object RowUpdatedEvent
private object RowUpdatingEvent
private object SelectedIndexChangedEvent
private object SelectedIndexChangingEvent
private object SortedEvent
private object SortingEvent
private int pageIndex
private int selectedIndex
private int editIndex
private int pageCount
private SortDirection sortDirection
private string sortExpression
private IAutoFieldGenerator <ColumnsGenerator>k__BackingField
private bool <EnableModelValidation>k__BackingField
private DataKey <SelectedPersistedDataKey>k__BackingField
private String[] <ClientIDRowSuffix>k__BackingField
private string onPreRenderScript
public bool AllowPaging
public bool AllowSorting
public TableItemStyle AlternatingRowStyle
public bool AutoGenerateEditButton
public bool AutoGenerateDeleteButton
public bool AutoGenerateSelectButton
public bool AutoGenerateColumns
public string BackImageUrl
public GridViewRow BottomPagerRow
public string Caption
public TableCaptionAlign CaptionAlign
public int CellPadding
public int CellSpacing
public DataControlFieldCollection Columns
public IAutoFieldGenerator ColumnsGenerator
public String[] DataKeyNames
private List`1<DataKey> DataKeyList
private List`1<DataKey> DataKeySuffixList
public DataKeyArray DataKeys
private DataKey OldEditValues
public int EditIndex
public TableItemStyle EditRowStyle
public TableItemStyle EmptyDataRowStyle
public ITemplate EmptyDataTemplate
public string EmptyDataText
public bool EnableSortingAndPagingCallbacks
public bool EnableModelValidation
public GridViewRow FooterRow
public TableItemStyle FooterStyle
public GridLines GridLines
public GridViewRow HeaderRow
public TableItemStyle HeaderStyle
public HorizontalAlign HorizontalAlign
public int PageCount
public int PageIndex
public int PageSize
public PagerSettings PagerSettings
public TableItemStyle PagerStyle
public ITemplate PagerTemplate
public string RowHeaderColumn
public GridViewRowCollection Rows
public TableItemStyle RowStyle
public DataKey SelectedDataKey
public DataKey SelectedPersistedDataKey
private DataKey System.Web.UI.WebControls.IPersistedSelector.DataKey
public int SelectedIndex
public GridViewRow SelectedRow
public TableItemStyle SelectedRowStyle
public object SelectedValue
public bool ShowFooter
public bool ShowHeader
public SortDirection SortDirection
public string SortExpression
public GridViewRow TopPagerRow
public bool UseAccessibleHeader
public String[] ClientIDRowSuffix
public DataKeyArray ClientIDRowSuffixDataKeys
public bool EnablePersistedSelection
private IAutoFieldGenerator System.Web.UI.WebControls.IFieldControl.FieldsGenerator
public bool ShowHeaderWhenEmpty
public TableItemStyle SortedAscendingCellStyle
public TableItemStyle SortedAscendingHeaderStyle
public TableItemStyle SortedDescendingCellStyle
public TableItemStyle SortedDescendingHeaderStyle
private Table ContainedTable
protected HtmlTextWriterTag TagKey
public bool AllowCustomPaging
public string DeleteMethod
public string UpdateMethod
public int VirtualItemCount
public void add_PageIndexChanged(EventHandler value)
public void remove_PageIndexChanged(EventHandler value)
public void add_PageIndexChanging(GridViewPageEventHandler value)
public void remove_PageIndexChanging(GridViewPageEventHandler value)
public void add_RowCancelingEdit(GridViewCancelEditEventHandler value)
public void remove_RowCancelingEdit(GridViewCancelEditEventHandler value)
public void add_RowCommand(GridViewCommandEventHandler value)
public void remove_RowCommand(GridViewCommandEventHandler value)
public void add_RowCreated(GridViewRowEventHandler value)
public void remove_RowCreated(GridViewRowEventHandler value)
public void add_RowDataBound(GridViewRowEventHandler value)
public void remove_RowDataBound(GridViewRowEventHandler value)
public void add_RowDeleted(GridViewDeletedEventHandler value)
public void remove_RowDeleted(GridViewDeletedEventHandler value)
public void add_RowDeleting(GridViewDeleteEventHandler value)
public void remove_RowDeleting(GridViewDeleteEventHandler value)
public void add_RowEditing(GridViewEditEventHandler value)
public void remove_RowEditing(GridViewEditEventHandler value)
public void add_RowUpdated(GridViewUpdatedEventHandler value)
public void remove_RowUpdated(GridViewUpdatedEventHandler value)
public void add_RowUpdating(GridViewUpdateEventHandler value)
public void remove_RowUpdating(GridViewUpdateEventHandler value)
public void add_SelectedIndexChanged(EventHandler value)
public void remove_SelectedIndexChanged(EventHandler value)
public void add_SelectedIndexChanging(GridViewSelectEventHandler value)
public void remove_SelectedIndexChanging(GridViewSelectEventHandler value)
public void add_Sorted(EventHandler value)
public void remove_Sorted(EventHandler value)
public void add_Sorting(GridViewSortEventHandler value)
public void remove_Sorting(GridViewSortEventHandler value)
protected void OnPageIndexChanged(EventArgs e)
protected void OnPageIndexChanging(GridViewPageEventArgs e)
protected void OnRowCancelingEdit(GridViewCancelEditEventArgs e)
protected void OnRowCommand(GridViewCommandEventArgs e)
protected void OnRowCreated(GridViewRowEventArgs e)
protected void OnRowDataBound(GridViewRowEventArgs e)
protected void OnRowDeleted(GridViewDeletedEventArgs e)
protected void OnRowDeleting(GridViewDeleteEventArgs e)
protected void OnRowEditing(GridViewEditEventArgs e)
protected void OnRowUpdated(GridViewUpdatedEventArgs e)
protected void OnRowUpdating(GridViewUpdateEventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
protected void OnSelectedIndexChanging(GridViewSelectEventArgs e)
protected void OnSorted(EventArgs e)
protected void OnSorting(GridViewSortEventArgs e)
public bool get_AllowPaging()
public void set_AllowPaging(bool value)
public bool get_AllowSorting()
public void set_AllowSorting(bool value)
public TableItemStyle get_AlternatingRowStyle()
public bool get_AutoGenerateEditButton()
public void set_AutoGenerateEditButton(bool value)
public bool get_AutoGenerateDeleteButton()
public void set_AutoGenerateDeleteButton(bool value)
public bool get_AutoGenerateSelectButton()
public void set_AutoGenerateSelectButton(bool value)
public bool get_AutoGenerateColumns()
public void set_AutoGenerateColumns(bool value)
public string get_BackImageUrl()
public void set_BackImageUrl(string value)
public GridViewRow get_BottomPagerRow()
public string get_Caption()
public void set_Caption(string value)
public TableCaptionAlign get_CaptionAlign()
public void set_CaptionAlign(TableCaptionAlign value)
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public DataControlFieldCollection get_Columns()
public IAutoFieldGenerator get_ColumnsGenerator()
public void set_ColumnsGenerator(IAutoFieldGenerator value)
public String[] get_DataKeyNames()
public void set_DataKeyNames(String[] value)
private List`1<DataKey> get_DataKeyList()
private List`1<DataKey> get_DataKeySuffixList()
public DataKeyArray get_DataKeys()
private DataKey get_OldEditValues()
public int get_EditIndex()
public void set_EditIndex(int value)
public TableItemStyle get_EditRowStyle()
public TableItemStyle get_EmptyDataRowStyle()
public ITemplate get_EmptyDataTemplate()
public void set_EmptyDataTemplate(ITemplate value)
public string get_EmptyDataText()
public void set_EmptyDataText(string value)
public bool get_EnableSortingAndPagingCallbacks()
public void set_EnableSortingAndPagingCallbacks(bool value)
public bool get_EnableModelValidation()
public void set_EnableModelValidation(bool value)
public GridViewRow get_FooterRow()
public TableItemStyle get_FooterStyle()
public GridLines get_GridLines()
public void set_GridLines(GridLines value)
public GridViewRow get_HeaderRow()
public TableItemStyle get_HeaderStyle()
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public int get_PageCount()
private void set_PageCount(int value)
public int get_PageIndex()
public void set_PageIndex(int value)
public int get_PageSize()
public void set_PageSize(int value)
public PagerSettings get_PagerSettings()
public TableItemStyle get_PagerStyle()
public ITemplate get_PagerTemplate()
public void set_PagerTemplate(ITemplate value)
public string get_RowHeaderColumn()
public void set_RowHeaderColumn(string value)
public GridViewRowCollection get_Rows()
public TableItemStyle get_RowStyle()
public DataKey get_SelectedDataKey()
public DataKey get_SelectedPersistedDataKey()
public void set_SelectedPersistedDataKey(DataKey value)
private DataKey System.Web.UI.WebControls.IPersistedSelector.get_DataKey()
private void System.Web.UI.WebControls.IPersistedSelector.set_DataKey(DataKey value)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public GridViewRow get_SelectedRow()
public TableItemStyle get_SelectedRowStyle()
public object get_SelectedValue()
public bool get_ShowFooter()
public void set_ShowFooter(bool value)
public bool get_ShowHeader()
public void set_ShowHeader(bool value)
public SortDirection get_SortDirection()
private void set_SortDirection(SortDirection value)
public string get_SortExpression()
private void set_SortExpression(string value)
public GridViewRow get_TopPagerRow()
public bool get_UseAccessibleHeader()
public void set_UseAccessibleHeader(bool value)
public String[] get_ClientIDRowSuffix()
public void set_ClientIDRowSuffix(String[] value)
public DataKeyArray get_ClientIDRowSuffixDataKeys()
public bool get_EnablePersistedSelection()
public void set_EnablePersistedSelection(bool value)
private IAutoFieldGenerator System.Web.UI.WebControls.IFieldControl.get_FieldsGenerator()
private void System.Web.UI.WebControls.IFieldControl.set_FieldsGenerator(IAutoFieldGenerator value)
public bool get_ShowHeaderWhenEmpty()
public void set_ShowHeaderWhenEmpty(bool value)
public TableItemStyle get_SortedAscendingCellStyle()
public TableItemStyle get_SortedAscendingHeaderStyle()
public TableItemStyle get_SortedDescendingCellStyle()
public TableItemStyle get_SortedDescendingHeaderStyle()
public bool IsBindableType(Type type)
protected DataSourceSelectArguments CreateDataSourceSelectArguments()
protected ICollection CreateColumns(PagedDataSource dataSource, bool useDataSource)
protected AutoGeneratedField CreateAutoGeneratedColumn(AutoGeneratedFieldProperties fieldProperties)
private AutoGeneratedFieldProperties[] CreateAutoFieldProperties(PagedDataSource source)
protected GridViewRow CreateRow(int rowIndex, int dataSourceIndex, DataControlRowType rowType, DataControlRowState rowState)
private void RequireBinding()
protected Table CreateChildTable()
private void CreateHeaderRow(Table mainTable, DataControlField[] fields, bool dataBinding)
protected int CreateChildControls(IEnumerable dataSource, bool dataBinding)
private Table get_ContainedTable()
protected Style CreateControlStyle()
private DataControlRowState GetRowState(int index)
private GridViewRow CreatePagerRow(int fieldCount, PagedDataSource dataSource)
protected void InitializePager(GridViewRow row, int columnSpan, PagedDataSource pagedDataSource)
private GridViewRow CreateEmptyrRow(int fieldCount)
protected void InitializeRow(GridViewRow row, DataControlField[] fields)
private void LoadAndCacheProperties(String[] names, object dataItem, PropertyDescriptor[]& cache)
private IOrderedDictionary CreateDictionaryFromProperties(PropertyDescriptor[] cache, object dataItem)
private IOrderedDictionary CreateRowDataKey(GridViewRow row)
private IOrderedDictionary CreateRowSuffixDataKey(GridViewRow row)
private IOrderedDictionary GetRowValues(GridViewRow row, bool includeReadOnlyFields, bool includePrimaryKey)
protected void ExtractRowValues(IOrderedDictionary fieldValues, GridViewRow row, bool includeReadOnlyFields, bool includePrimaryKey)
protected HtmlTextWriterTag get_TagKey()
public void DataBind()
protected internal void PerformDataBinding(IEnumerable data)
protected internal void PrepareControlHierarchy()
private void MergeWithSortingStyle(string sortExpression, TableItemStyle ascending, TableItemStyle descending, DataControlField field, TableCell cell)
protected internal void OnInit(EventArgs e)
private void OnFieldsChanged(object sender, EventArgs args)
protected void OnDataPropertyChanged()
protected void OnDataSourceViewChanged(object sender, EventArgs e)
protected bool OnBubbleEvent(object source, EventArgs e)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected void RaisePostBackEvent(string eventArgument)
private void ProcessEvent(string eventName, string param, bool causesValidation)
private void Sort(string newSortExpression)
public void Sort(string sortExpression, SortDirection sortDirection)
public void SelectRow(int rowIndex)
public void SetPageIndex(int rowIndex)
public void SetEditRow(int rowIndex)
private void CancelEdit()
public void UpdateRow(int rowIndex, bool causesValidation)
private void UpdateRow(GridViewRow row, int rowIndex, bool causesValidation)
private IOrderedDictionary CopyOrderedDictionary(IOrderedDictionary sourceDic)
private bool UpdateCallback(int recordsAffected, Exception exception)
public void DeleteRow(int rowIndex)
private bool DeleteCallback(int recordsAffected, Exception exception)
private void EndRowEdit()
protected internal void LoadControlState(object savedState)
protected internal object SaveControlState()
private Object[] SaveDataKeyArrayState(DataKeyArray keys)
private void LoadDataKeyArrayState(Object[] state, DataKeyArray& keys)
protected void TrackViewState()
protected object SaveViewState()
protected void LoadViewState(object savedState)
private void System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(string eventArgument)
protected void RaiseCallbackEvent(string eventArgument)
private string System.Web.UI.ICallbackEventHandler.GetCallbackResult()
protected string GetCallbackResult()
private string System.Web.UI.WebControls.ICallbackContainer.GetCallbackScript(IButtonControl buttonControl, string argument)
protected string GetCallbackScript(IButtonControl buttonControl, string argument)
protected void OnPagePreLoad(object sender, EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
private void RenderGrid(HtmlTextWriter writer)
private PostBackOptions System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl control)
public bool get_AllowCustomPaging()
public void set_AllowCustomPaging(bool value)
public string get_DeleteMethod()
public void set_DeleteMethod(string value)
private string System.Web.UI.WebControls.IDataBoundControl.get_DataMember()
private void System.Web.UI.WebControls.IDataBoundControl.set_DataMember(string value)
private object System.Web.UI.WebControls.IDataBoundControl.get_DataSource()
private void System.Web.UI.WebControls.IDataBoundControl.set_DataSource(object value)
private string System.Web.UI.WebControls.IDataBoundControl.get_DataSourceID()
private void System.Web.UI.WebControls.IDataBoundControl.set_DataSourceID(string value)
private IDataSource System.Web.UI.WebControls.IDataBoundControl.get_DataSourceObject()
public string get_UpdateMethod()
public void set_UpdateMethod(string value)
public int get_VirtualItemCount()
public void set_VirtualItemCount(int value)
}
public System.Web.UI.WebControls.GridViewCancelEditEventArgs : CancelEventArgs {
private int _rowIndex
public int RowIndex
public void .ctor(int rowIndex)
public int get_RowIndex()
}
public System.Web.UI.WebControls.GridViewCancelEditEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewCancelEditEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewCancelEditEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridViewColumnsGenerator : AutoFieldsGenerator {
public List`1<AutoGeneratedField> CreateAutoGeneratedFields(object dataObject, Control control)
}
public System.Web.UI.WebControls.GridViewCommandEventArgs : CommandEventArgs {
private GridViewRow _row
private object _commandSource
private bool <Handled>k__BackingField
public object CommandSource
public bool Handled
internal GridViewRow Row
public void .ctor(GridViewRow row, object commandSource, CommandEventArgs originalArgs)
public void .ctor(object commandSource, CommandEventArgs originalArgs)
public object get_CommandSource()
public bool get_Handled()
public void set_Handled(bool value)
internal GridViewRow get_Row()
}
public System.Web.UI.WebControls.GridViewCommandEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewCommandEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewCommandEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridViewDeletedEventArgs : EventArgs {
private int rowsAffected
private Exception e
private bool exceptionHandled
private IOrderedDictionary keys
private IOrderedDictionary values
public int AffectedRows
public Exception Exception
public bool ExceptionHandled
public IOrderedDictionary Keys
public IOrderedDictionary Values
public void .ctor(int affectedRows, Exception e)
internal void .ctor(int affectedRows, Exception e, IOrderedDictionary keys, IOrderedDictionary values)
public int get_AffectedRows()
public Exception get_Exception()
public bool get_ExceptionHandled()
public void set_ExceptionHandled(bool value)
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_Values()
}
public System.Web.UI.WebControls.GridViewDeletedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewDeletedEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewDeletedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridViewDeleteEventArgs : CancelEventArgs {
private int rowIndex
private IOrderedDictionary keys
private IOrderedDictionary values
public int RowIndex
public IOrderedDictionary Keys
public IOrderedDictionary Values
public void .ctor(int rowIndex)
internal void .ctor(int index, IOrderedDictionary keys, IOrderedDictionary values)
public int get_RowIndex()
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_Values()
}
public System.Web.UI.WebControls.GridViewDeleteEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewDeleteEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewDeleteEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridViewEditEventArgs : CancelEventArgs {
private int _newEditIndex
public int NewEditIndex
public void .ctor(int newEditIndex)
public int get_NewEditIndex()
public void set_NewEditIndex(int value)
}
public System.Web.UI.WebControls.GridViewEditEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewEditEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewEditEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridViewPageEventArgs : CancelEventArgs {
private int _newPageIndex
public int NewPageIndex
public void .ctor(int newPageIndex)
public int get_NewPageIndex()
public void set_NewPageIndex(int value)
}
public System.Web.UI.WebControls.GridViewPageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewPageEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewPageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridViewRow : TableRow {
private object dataItem
private int rowIndex
private int dataItemIndex
private DataControlRowState rowState
private DataControlRowType rowType
public object DataItem
public int DataItemIndex
public int RowIndex
public DataControlRowState RowState
public DataControlRowType RowType
private object System.Web.UI.IDataItemContainer.DataItem
private int System.Web.UI.IDataItemContainer.DataItemIndex
private int System.Web.UI.IDataItemContainer.DisplayIndex
public void .ctor(int rowIndex, int dataItemIndex, DataControlRowType rowType, DataControlRowState rowState)
public object get_DataItem()
public void set_DataItem(object value)
public int get_DataItemIndex()
public int get_RowIndex()
public DataControlRowState get_RowState()
public void set_RowState(DataControlRowState value)
public DataControlRowType get_RowType()
public void set_RowType(DataControlRowType value)
private object System.Web.UI.IDataItemContainer.get_DataItem()
private int System.Web.UI.IDataItemContainer.get_DataItemIndex()
private int System.Web.UI.IDataItemContainer.get_DisplayIndex()
protected bool OnBubbleEvent(object source, EventArgs e)
}
public System.Web.UI.WebControls.GridViewRowCollection : object {
private ArrayList rows
public GridViewRow Item
public int Count
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
public void .ctor(ArrayList rows)
public GridViewRow get_Item(int index)
public void CopyTo(GridViewRow[] array, int index)
public IEnumerator GetEnumerator()
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
private void System.Collections.ICollection.CopyTo(Array array, int index)
}
public System.Web.UI.WebControls.GridViewRowEventArgs : EventArgs {
private GridViewRow _row
public GridViewRow Row
public void .ctor(GridViewRow row)
public GridViewRow get_Row()
}
public System.Web.UI.WebControls.GridViewRowEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewRowEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewRowEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridViewSelectEventArgs : CancelEventArgs {
private int _newSelectedIndex
public int NewSelectedIndex
public void .ctor(int newSelectedIndex)
public int get_NewSelectedIndex()
public void set_NewSelectedIndex(int value)
}
public System.Web.UI.WebControls.GridViewSelectEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewSelectEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewSelectEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridViewSortEventArgs : CancelEventArgs {
private string _sortExpression
private SortDirection _sortDirection
public SortDirection SortDirection
public string SortExpression
public void .ctor(string sortExpression, SortDirection sortDirection)
public SortDirection get_SortDirection()
public void set_SortDirection(SortDirection value)
public string get_SortExpression()
public void set_SortExpression(string value)
}
public System.Web.UI.WebControls.GridViewSortEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewSortEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewSortEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridViewUpdatedEventArgs : EventArgs {
private int rowsAffected
private Exception e
private bool exceptionHandled
private bool keepEditMode
private IOrderedDictionary keys
private IOrderedDictionary newValues
private IOrderedDictionary oldValues
public int AffectedRows
public Exception Exception
public bool ExceptionHandled
public bool KeepInEditMode
public IOrderedDictionary Keys
public IOrderedDictionary NewValues
public IOrderedDictionary OldValues
public void .ctor(int affectedRows, Exception e)
internal void .ctor(int affectedRows, Exception e, IOrderedDictionary keys, IOrderedDictionary oldValues, IOrderedDictionary newValues)
public int get_AffectedRows()
public Exception get_Exception()
public bool get_ExceptionHandled()
public void set_ExceptionHandled(bool value)
public bool get_KeepInEditMode()
public void set_KeepInEditMode(bool value)
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_NewValues()
public IOrderedDictionary get_OldValues()
}
public System.Web.UI.WebControls.GridViewUpdatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewUpdatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewUpdatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.GridViewUpdateEventArgs : CancelEventArgs {
private int rowIndex
private IOrderedDictionary keys
private IOrderedDictionary newValues
private IOrderedDictionary oldValues
public int RowIndex
public IOrderedDictionary Keys
public IOrderedDictionary NewValues
public IOrderedDictionary OldValues
public void .ctor(int rowIndex)
internal void .ctor(int rowIndex, IOrderedDictionary keys, IOrderedDictionary oldValues, IOrderedDictionary newValues)
public int get_RowIndex()
public IOrderedDictionary get_Keys()
public IOrderedDictionary get_NewValues()
public IOrderedDictionary get_OldValues()
}
public System.Web.UI.WebControls.GridViewUpdateEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GridViewUpdateEventArgs e)
public IAsyncResult BeginInvoke(object sender, GridViewUpdateEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.HiddenField : Control {
private object ValueChangedEvent
public string Value
public bool EnableTheming
public string SkinID
public void add_ValueChanged(EventHandler value)
public void remove_ValueChanged(EventHandler value)
public string get_Value()
public void set_Value(string value)
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
public string get_SkinID()
public void set_SkinID(string value)
public void Focus()
protected void OnValueChanged(EventArgs e)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
protected ControlCollection CreateControlCollection()
protected internal void OnPreRender(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
}
public System.Web.UI.WebControls.HierarchicalDataBoundControl : BaseDataBoundControl {
public string DataSourceID
private bool IsDataBound
public string get_DataSourceID()
public void set_DataSourceID(string value)
protected HierarchicalDataSourceView GetData(string viewPath)
protected IHierarchicalDataSource GetDataSource()
private bool get_IsDataBound()
private void set_IsDataBound(bool value)
protected void MarkAsDataBound()
protected void OnDataPropertyChanged()
protected void OnDataSourceChanged(object sender, EventArgs e)
protected internal void OnLoad(EventArgs e)
private void Initialize()
protected void OnPagePreLoad(object sender, EventArgs e)
protected void InternalPerformDataBinding()
protected internal void PerformDataBinding()
protected void PerformSelect()
protected void ValidateDataSource(object dataSource)
}
public System.Web.UI.WebControls.HorizontalAlign : Enum {
public int value__
public HorizontalAlign NotSet
public HorizontalAlign Left
public HorizontalAlign Center
public HorizontalAlign Right
public HorizontalAlign Justify
}
internal System.Web.UI.WebControls.HorizontalAlignConverter : EnumConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Web.UI.WebControls.HotSpot : object {
private StateBag viewState
public string AccessKey
public string AlternateText
public HotSpotMode HotSpotMode
public string NavigateUrl
public string PostBackValue
public short TabIndex
public string Target
protected StateBag ViewState
protected bool IsTrackingViewState
private bool System.Web.UI.IStateManager.IsTrackingViewState
protected internal string MarkupName
public string get_AccessKey()
public void set_AccessKey(string value)
public string get_AlternateText()
public void set_AlternateText(string value)
public HotSpotMode get_HotSpotMode()
public void set_HotSpotMode(HotSpotMode value)
public string get_NavigateUrl()
public void set_NavigateUrl(string value)
public string get_PostBackValue()
public void set_PostBackValue(string value)
public short get_TabIndex()
public void set_TabIndex(short value)
public string get_Target()
public void set_Target(string value)
protected StateBag get_ViewState()
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
protected bool get_IsTrackingViewState()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
public string ToString()
internal void SetDirty()
public string GetCoordinates()
protected internal string get_MarkupName()
}
public System.Web.UI.WebControls.HotSpotCollection : StateManagedCollection {
private Type[] _knownTypes
public HotSpot Item
public HotSpot get_Item(int index)
public int Add(HotSpot spot)
protected object CreateKnownType(int index)
protected Type[] GetKnownTypes()
public void Insert(int index, HotSpot spot)
protected void OnValidate(object o)
public void Remove(HotSpot spot)
public void RemoveAt(int index)
protected void SetDirtyObject(object o)
}
public System.Web.UI.WebControls.HotSpotMode : Enum {
public int value__
public HotSpotMode NotSet
public HotSpotMode Navigate
public HotSpotMode PostBack
public HotSpotMode Inactive
}
public System.Web.UI.WebControls.HyperLink : WebControl {
public string ImageUrl
public string NavigateUrl
public string Target
public string Text
public bool SupportsDisabledAttribute
public Unit ImageHeight
public Unit ImageWidth
protected void AddAttributesToRender(HtmlTextWriter writer)
protected void AddParsedSubObject(object obj)
protected void LoadViewState(object savedState)
protected internal void RenderContents(HtmlTextWriter writer)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public string get_NavigateUrl()
public void set_NavigateUrl(string value)
public string get_Target()
public void set_Target(string value)
public string get_Text()
public void set_Text(string value)
public bool get_SupportsDisabledAttribute()
public Unit get_ImageHeight()
public void set_ImageHeight(Unit value)
public Unit get_ImageWidth()
public void set_ImageWidth(Unit value)
}
public System.Web.UI.WebControls.HyperLinkColumn : DataGridColumn {
public string DataNavigateUrlField
public string DataNavigateUrlFormatString
public string DataTextField
public string DataTextFormatString
public string NavigateUrl
public string Target
public string Text
public string get_DataNavigateUrlField()
public void set_DataNavigateUrlField(string value)
public string get_DataNavigateUrlFormatString()
public void set_DataNavigateUrlFormatString(string value)
public string get_DataTextField()
public void set_DataTextField(string value)
public string get_DataTextFormatString()
public void set_DataTextFormatString(string value)
public string get_NavigateUrl()
public void set_NavigateUrl(string value)
public string get_Target()
public void set_Target(string value)
public string get_Text()
public void set_Text(string value)
protected string FormatDataNavigateUrlValue(object dataUrlValue)
protected string FormatDataTextValue(object dataTextValue)
public void Initialize()
private void ItemDataBinding(object sender, EventArgs args)
public void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType)
}
public System.Web.UI.WebControls.HyperLinkControlBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
}
public System.Web.UI.WebControls.HyperLinkField : DataControlField {
private PropertyDescriptor textProperty
private PropertyDescriptor[] urlProperties
private String[] emptyFields
public String[] DataNavigateUrlFields
public string DataNavigateUrlFormatString
public string DataTextField
public string DataTextFormatString
public string NavigateUrl
public string Target
public string Text
public bool Initialize(bool enableSorting, Control control)
public String[] get_DataNavigateUrlFields()
public void set_DataNavigateUrlFields(String[] value)
public string get_DataNavigateUrlFormatString()
public void set_DataNavigateUrlFormatString(string value)
public string get_DataTextField()
public void set_DataTextField(string value)
public string get_DataTextFormatString()
public void set_DataTextFormatString(string value)
public string get_NavigateUrl()
public void set_NavigateUrl(string value)
public string get_Target()
public void set_Target(string value)
public string get_Text()
public void set_Text(string value)
public void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex)
protected string FormatDataNavigateUrlValue(Object[] dataUrlValues)
protected string FormatDataTextValue(object dataTextValue)
private void OnDataBindField(object sender, EventArgs e)
private void SetupProperties(object controlContainer)
protected DataControlField CreateField()
protected void CopyProperties(DataControlField newField)
public void ValidateSupportsCallback()
}
public System.Web.UI.WebControls.IButtonControl {
public bool CausesValidation
public string CommandArgument
public string CommandName
public string PostBackUrl
public string Text
public string ValidationGroup
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_CommandArgument()
public void set_CommandArgument(string value)
public string get_CommandName()
public void set_CommandName(string value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_Command(CommandEventHandler value)
public void remove_Command(CommandEventHandler value)
public string get_PostBackUrl()
public void set_PostBackUrl(string value)
public string get_Text()
public void set_Text(string value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
}
public System.Web.UI.WebControls.ICallbackContainer {
public string GetCallbackScript(IButtonControl buttonControl, string argument)
}
public System.Web.UI.WebControls.ICompositeControlDesignerAccessor {
public void RecreateChildControls()
}
public System.Web.UI.WebControls.IDataBoundControl {
public string DataSourceID
public IDataSource DataSourceObject
public object DataSource
public String[] DataKeyNames
public string DataMember
public string get_DataSourceID()
public void set_DataSourceID(string value)
public IDataSource get_DataSourceObject()
public object get_DataSource()
public void set_DataSource(object value)
public String[] get_DataKeyNames()
public void set_DataKeyNames(String[] value)
public string get_DataMember()
public void set_DataMember(string value)
}
public System.Web.UI.WebControls.IDataBoundItemControl {
public DataKey DataKey
public DataBoundControlMode Mode
public DataKey get_DataKey()
public DataBoundControlMode get_Mode()
}
public System.Web.UI.WebControls.IDataBoundListControl {
public DataKeyArray DataKeys
public DataKey SelectedDataKey
public int SelectedIndex
public String[] ClientIDRowSuffix
public bool EnablePersistedSelection
public DataKeyArray get_DataKeys()
public DataKey get_SelectedDataKey()
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public String[] get_ClientIDRowSuffix()
public void set_ClientIDRowSuffix(String[] value)
public bool get_EnablePersistedSelection()
public void set_EnablePersistedSelection(bool value)
}
internal System.Web.UI.WebControls.IDataControlButton {
public Control Container
public string ImageUrl
public bool AllowCallback
public ButtonType ButtonType
public Control get_Container()
public void set_Container(Control value)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public bool get_AllowCallback()
public void set_AllowCallback(bool value)
public ButtonType get_ButtonType()
}
public System.Web.UI.WebControls.IFieldControl {
public IAutoFieldGenerator FieldsGenerator
public IAutoFieldGenerator get_FieldsGenerator()
public void set_FieldsGenerator(IAutoFieldGenerator value)
}
public System.Web.UI.WebControls.Image : WebControl {
public string AlternateText
public bool Enabled
public FontInfo Font
public ImageAlign ImageAlign
public string ImageUrl
public string DescriptionUrl
public bool GenerateEmptyAlternateText
public bool SupportsDisabledAttribute
public string get_AlternateText()
public void set_AlternateText(string value)
public bool get_Enabled()
public void set_Enabled(bool value)
public FontInfo get_Font()
public ImageAlign get_ImageAlign()
public void set_ImageAlign(ImageAlign value)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public string get_DescriptionUrl()
public void set_DescriptionUrl(string value)
public bool get_GenerateEmptyAlternateText()
public void set_GenerateEmptyAlternateText(bool value)
public bool get_SupportsDisabledAttribute()
protected void AddAttributesToRender(HtmlTextWriter writer)
protected internal void RenderContents(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.ImageAlign : Enum {
public int value__
public ImageAlign NotSet
public ImageAlign Left
public ImageAlign Right
public ImageAlign Baseline
public ImageAlign Top
public ImageAlign Middle
public ImageAlign Bottom
public ImageAlign AbsBottom
public ImageAlign AbsMiddle
public ImageAlign TextTop
}
public System.Web.UI.WebControls.ImageButton : Image {
private object ClickEvent
private object CommandEvent
private int pos_x
private int pos_y
public bool CausesValidation
public string CommandArgument
public string CommandName
public bool Enabled
public bool GenerateEmptyAlternateText
public string OnClientClick
public string PostBackUrl
public string ValidationGroup
protected HtmlTextWriterTag TagKey
protected string Text
public bool SupportsDisabledAttribute
private string System.Web.UI.WebControls.IButtonControl.Text
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_CommandArgument()
public void set_CommandArgument(string value)
public string get_CommandName()
public void set_CommandName(string value)
public bool get_Enabled()
public void set_Enabled(bool value)
public bool get_GenerateEmptyAlternateText()
public void set_GenerateEmptyAlternateText(bool value)
public string get_OnClientClick()
public void set_OnClientClick(string value)
public string get_PostBackUrl()
public void set_PostBackUrl(string value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
protected HtmlTextWriterTag get_TagKey()
protected string get_Text()
protected void set_Text(string value)
public bool get_SupportsDisabledAttribute()
protected void AddAttributesToRender(HtmlTextWriter writer)
internal string GetClientScriptEventReference()
protected PostBackOptions GetPostBackOptions()
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
protected void RaisePostBackEvent(string eventArgument)
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected void OnClick(ImageClickEventArgs e)
protected void OnCommand(CommandEventArgs e)
protected internal void OnPreRender(EventArgs e)
public void add_Click(ImageClickEventHandler value)
public void remove_Click(ImageClickEventHandler value)
public void add_Command(CommandEventHandler value)
public void remove_Command(CommandEventHandler value)
private string System.Web.UI.WebControls.IButtonControl.get_Text()
private void System.Web.UI.WebControls.IButtonControl.set_Text(string value)
private void System.Web.UI.WebControls.IButtonControl.add_Click(EventHandler value)
private void System.Web.UI.WebControls.IButtonControl.remove_Click(EventHandler value)
}
public System.Web.UI.WebControls.ImageField : DataControlField {
public string ThisExpression
private PropertyDescriptor imageProperty
private PropertyDescriptor textProperty
public string AlternateText
public bool ConvertEmptyStringToNull
public string DataAlternateTextField
public string DataAlternateTextFormatString
public string DataImageUrlField
public string DataImageUrlFormatString
public string NullDisplayText
public string NullImageUrl
public bool ReadOnly
public bool Initialize(bool enableSorting, Control control)
public string get_AlternateText()
public void set_AlternateText(string value)
public bool get_ConvertEmptyStringToNull()
public void set_ConvertEmptyStringToNull(bool value)
public string get_DataAlternateTextField()
public void set_DataAlternateTextField(string value)
public string get_DataAlternateTextFormatString()
public void set_DataAlternateTextFormatString(string value)
public string get_DataImageUrlField()
public void set_DataImageUrlField(string value)
public string get_DataImageUrlFormatString()
public void set_DataImageUrlFormatString(string value)
public string get_NullDisplayText()
public void set_NullDisplayText(string value)
public string get_NullImageUrl()
public void set_NullImageUrl(string value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly)
public void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex)
protected void InitializeDataCell(DataControlFieldCell cell, DataControlRowState rowState)
protected string FormatImageUrlValue(object dataValue)
protected string GetFormattedAlternateText(Control controlContainer)
protected object GetValue(Control controlContainer, string fieldName, PropertyDescriptor& cachedDescriptor)
private PropertyDescriptor GetProperty(Control controlContainer, string fieldName)
protected string GetDesignTimeValue()
protected void OnDataBindField(object sender, EventArgs e)
public void ValidateSupportsCallback()
protected DataControlField CreateField()
protected void CopyProperties(DataControlField newField)
}
public System.Web.UI.WebControls.ImageMap : Image {
private HotSpotCollection spots
private object ClickEvent
public bool Enabled
public HotSpotMode HotSpotMode
public string Target
public HotSpotCollection HotSpots
public void add_Click(ImageMapEventHandler value)
public void remove_Click(ImageMapEventHandler value)
protected void OnClick(ImageMapEventArgs e)
public bool get_Enabled()
public void set_Enabled(bool value)
public HotSpotMode get_HotSpotMode()
public void set_HotSpotMode(HotSpotMode value)
public string get_Target()
public void set_Target(string value)
public HotSpotCollection get_HotSpots()
protected void TrackViewState()
protected object SaveViewState()
protected void LoadViewState(object savedState)
protected void RaisePostBackEvent(string eventArgument)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
protected void AddAttributesToRender(HtmlTextWriter writer)
protected internal void Render(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.ImageMapEventArgs : EventArgs {
private string _postBackValue
public string PostBackValue
public void .ctor(string value)
public string get_PostBackValue()
}
public System.Web.UI.WebControls.ImageMapEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ImageMapEventArgs e)
public IAsyncResult BeginInvoke(object sender, ImageMapEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Web.UI.WebControls.IMenuRenderer {
public HtmlTextWriterTag Tag
public HtmlTextWriterTag get_Tag()
public void AddAttributesToRender(HtmlTextWriter writer)
public void PreRender(Page page, HtmlHead head, ClientScriptManager csm, string cmenu, StringBuilder script)
public void RenderBeginTag(HtmlTextWriter writer, string skipLinkText)
public void RenderEndTag(HtmlTextWriter writer)
public void RenderContents(HtmlTextWriter writer)
public void RenderItemContent(HtmlTextWriter writer, MenuItem item, bool isDynamicItem)
public void RenderMenuBeginTag(HtmlTextWriter writer, bool dynamic, int menuLevel)
public void RenderMenuBody(HtmlTextWriter writer, MenuItemCollection items, bool vertical, bool dynamic, bool notLast)
public void RenderMenuEndTag(HtmlTextWriter writer, bool dynamic, int menuLevel)
public void RenderMenuItem(HtmlTextWriter writer, MenuItem item, bool notLast, bool isFirst)
public bool IsDynamicItem(MenuItem item)
public bool IsDynamicItem(Menu owner, MenuItem item)
}
public System.Web.UI.WebControls.IPersistedSelector {
public DataKey DataKey
public DataKey get_DataKey()
public void set_DataKey(DataKey value)
}
public System.Web.UI.WebControls.IPostBackContainer {
public PostBackOptions GetPostBackOptions(IButtonControl buttonControl)
}
internal System.Web.UI.WebControls.IRenderOuterTable {
public bool RenderOuterTable
public bool get_RenderOuterTable()
public void set_RenderOuterTable(bool value)
}
public System.Web.UI.WebControls.IRepeatInfoUser {
public bool HasHeader
public bool HasFooter
public bool HasSeparators
public int RepeatedItemCount
public bool get_HasHeader()
public bool get_HasFooter()
public bool get_HasSeparators()
public int get_RepeatedItemCount()
public Style GetItemStyle(ListItemType itemType, int repeatIndex)
public void RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer)
}
internal System.Web.UI.WebControls.IWizardSideBarListControl {
public object DataSource
public IEnumerable Items
public ITemplate ItemTemplate
public int SelectedIndex
public object get_DataSource()
public void set_DataSource(object value)
public IEnumerable get_Items()
public ITemplate get_ItemTemplate()
public void set_ItemTemplate(ITemplate value)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public void add_ItemCommand(CommandEventHandler value)
public void remove_ItemCommand(CommandEventHandler value)
public void add_ItemDataBound(EventHandler`1<WizardSideBarListControlItemEventArgs> value)
public void remove_ItemDataBound(EventHandler`1<WizardSideBarListControlItemEventArgs> value)
public void DataBind()
}
public System.Web.UI.WebControls.Label : WebControl {
public string Text
public string AssociatedControlID
public bool SupportsDisabledAttribute
protected HtmlTextWriterTag TagKey
public string get_Text()
public void set_Text(string value)
public string get_AssociatedControlID()
public void set_AssociatedControlID(string value)
public bool get_SupportsDisabledAttribute()
protected void LoadViewState(object savedState)
protected void AddParsedSubObject(object obj)
protected internal void RenderContents(HtmlTextWriter writer)
protected HtmlTextWriterTag get_TagKey()
protected void AddAttributesToRender(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.LabelControlBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
}
public System.Web.UI.WebControls.LinkButton : WebControl {
private object ClickEvent
private object CommandEvent
public bool CausesValidation
public string CommandArgument
public string CommandName
public string OnClientClick
public string Text
public string PostBackUrl
public string ValidationGroup
public bool SupportsDisabledAttribute
protected void AddAttributesToRender(HtmlTextWriter writer)
protected void RaisePostBackEvent(string eventArgument)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string ea)
protected void AddParsedSubObject(object obj)
protected PostBackOptions GetPostBackOptions()
protected void LoadViewState(object savedState)
protected internal void OnPreRender(EventArgs e)
protected internal void RenderContents(HtmlTextWriter writer)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_CommandArgument()
public void set_CommandArgument(string value)
public string get_CommandName()
public void set_CommandName(string value)
public string get_OnClientClick()
public void set_OnClientClick(string value)
public string get_Text()
public void set_Text(string value)
protected void OnClick(EventArgs e)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
protected void OnCommand(CommandEventArgs e)
public void add_Command(CommandEventHandler value)
public void remove_Command(CommandEventHandler value)
public string get_PostBackUrl()
public void set_PostBackUrl(string value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
public bool get_SupportsDisabledAttribute()
}
public System.Web.UI.WebControls.LinkButtonControlBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
}
public System.Web.UI.WebControls.ListBox : ListControl {
public Color BorderColor
public BorderStyle BorderStyle
public Unit BorderWidth
public int Rows
public ListSelectionMode SelectionMode
public Color get_BorderColor()
public void set_BorderColor(Color value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public Unit get_BorderWidth()
public void set_BorderWidth(Unit value)
public int get_Rows()
public void set_Rows(int value)
public ListSelectionMode get_SelectionMode()
public void set_SelectionMode(ListSelectionMode value)
public Int32[] GetSelectedIndices()
protected void AddAttributesToRender(HtmlTextWriter writer)
private PostBackOptions GetPostBackOptions()
protected internal void OnPreRender(EventArgs e)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
private bool SelectSingle(String[] values)
private bool SelectMultiple(String[] values)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
internal bool MultiSelectOk()
}
public System.Web.UI.WebControls.ListControl : DataBoundControl {
private object SelectedIndexChangedEvent
private object TextChangedEvent
private ListItemCollection items
private int _selectedIndex
private string _selectedValue
public bool AppendDataBoundItems
public bool AutoPostBack
public string DataTextField
public string DataTextFormatString
public string DataValueField
public ListItemCollection Items
public int SelectedIndex
public ListItem SelectedItem
public string SelectedValue
public string Text
protected HtmlTextWriterTag TagKey
public bool CausesValidation
public string ValidationGroup
public bool get_AppendDataBoundItems()
public void set_AppendDataBoundItems(bool value)
public bool get_AutoPostBack()
public void set_AutoPostBack(bool value)
public string get_DataTextField()
public void set_DataTextField(string value)
public string get_DataTextFormatString()
public void set_DataTextFormatString(string value)
public string get_DataValueField()
public void set_DataValueField(string value)
public ListItemCollection get_Items()
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public ListItem get_SelectedItem()
public string get_SelectedValue()
public void set_SelectedValue(string value)
private bool SetSelectedValue(string value)
public string get_Text()
public void set_Text(string value)
protected HtmlTextWriterTag get_TagKey()
protected void AddAttributesToRender(HtmlTextWriter writer)
public void ClearSelection()
protected void OnDataBinding(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected void OnTextChanged(EventArgs e)
protected internal void PerformDataBinding(IEnumerable dataSource)
protected void PerformSelect()
protected internal void RenderContents(HtmlTextWriter writer)
internal ArrayList GetSelectedIndicesInternal()
protected object SaveViewState()
protected void LoadViewState(object savedState)
protected void SetPostDataSelection(int selectedIndex)
protected void TrackViewState()
protected void OnSelectedIndexChanged(EventArgs e)
protected internal void VerifyMultiSelect()
internal bool MultiSelectOk()
public void add_SelectedIndexChanged(EventHandler value)
public void remove_SelectedIndexChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
}
public System.Web.UI.WebControls.ListItem : object {
private string text
private string value
private bool selected
private bool dirty
private bool enabled
private bool tracking
private StateBag sb
private AttributeCollection attrs
public AttributeCollection Attributes
private bool System.Web.UI.IStateManager.IsTrackingViewState
public bool Selected
public string Text
public string Value
public bool Enabled
internal bool HasAttributes
public void .ctor(string text, string value, bool enabled)
public void .ctor(string text, string value)
public void .ctor(string text)
public ListItem FromString(string s)
public bool Equals(object o)
public int GetHashCode()
private string System.Web.UI.IAttributeAccessor.GetAttribute(string key)
private void System.Web.UI.IAttributeAccessor.SetAttribute(string key, string value)
private void System.Web.UI.IParserAccessor.AddParsedSubObject(object obj)
private void System.Web.UI.IStateManager.LoadViewState(object state)
internal void LoadViewState(object state)
private object System.Web.UI.IStateManager.SaveViewState()
internal object SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
internal void TrackViewState()
public string ToString()
public AttributeCollection get_Attributes()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
public bool get_Selected()
public void set_Selected(bool value)
public string get_Text()
public void set_Text(string value)
public string get_Value()
public void set_Value(string value)
internal void SetDirty()
public bool get_Enabled()
public void set_Enabled(bool value)
internal bool get_HasAttributes()
}
public System.Web.UI.WebControls.ListItemCollection : object {
private ArrayList items
private bool tracking
private bool dirty
private int lastDirty
public int Capacity
public int Count
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
public ListItem Item
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
private bool System.Web.UI.IStateManager.IsTrackingViewState
public int get_Capacity()
public void set_Capacity(int value)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
public ListItem get_Item(int index)
public void Add(ListItem item)
public void Add(string item)
public void AddRange(ListItem[] items)
public void Clear()
public bool Contains(ListItem item)
public void CopyTo(Array array, int index)
public ListItem FindByText(string text)
public ListItem FindByValue(string value)
public IEnumerator GetEnumerator()
public int IndexOf(ListItem item)
internal int IndexOf(string value)
public void Insert(int index, ListItem item)
public void Insert(int index, string item)
public void Remove(ListItem item)
public void Remove(string item)
public void RemoveAt(int index)
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private int System.Collections.IList.Add(object value)
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private void SetDirty()
}
public System.Web.UI.WebControls.ListItemControlBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
public bool HtmlDecodeLiterals()
}
public System.Web.UI.WebControls.ListItemType : Enum {
public int value__
public ListItemType Header
public ListItemType Footer
public ListItemType Item
public ListItemType AlternatingItem
public ListItemType SelectedItem
public ListItemType EditItem
public ListItemType Separator
public ListItemType Pager
}
public System.Web.UI.WebControls.ListSelectionMode : Enum {
public int value__
public ListSelectionMode Single
public ListSelectionMode Multiple
}
public System.Web.UI.WebControls.Literal : Control {
public LiteralMode Mode
public string Text
public LiteralMode get_Mode()
public void set_Mode(LiteralMode value)
public string get_Text()
public void set_Text(string value)
public void Focus()
protected ControlCollection CreateControlCollection()
protected void AddParsedSubObject(object obj)
protected internal void Render(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.LiteralControlBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
public void AppendSubBuilder(ControlBuilder subBuilder)
public void AppendLiteralString(string s)
}
public System.Web.UI.WebControls.LiteralMode : Enum {
public int value__
public LiteralMode Transform
public LiteralMode PassThrough
public LiteralMode Encode
}
public System.Web.UI.WebControls.Login : CompositeControl {
public string LoginButtonCommandName
private object authenticateEvent
private object loggedInEvent
private object loggingInEvent
private object loginErrorEvent
private TableItemStyle checkBoxStyle
private TableItemStyle failureTextStyle
private TableItemStyle hyperLinkStyle
private TableItemStyle instructionTextStyle
private TableItemStyle labelStyle
private Style logonButtonStyle
private Style textBoxStyle
private TableItemStyle titleTextStyle
private Style validatorTextStyle
private ArrayList styles
private ITemplate layoutTemplate
private LoginContainer container
private string _password
private bool renderOuterTable
public int BorderPadding
public TableItemStyle CheckBoxStyle
public string CreateUserIconUrl
public string CreateUserText
public string CreateUserUrl
public string DestinationPageUrl
public bool DisplayRememberMe
public LoginFailureAction FailureAction
public string FailureText
public TableItemStyle FailureTextStyle
public string HelpPageIconUrl
public string HelpPageText
public string HelpPageUrl
public TableItemStyle HyperLinkStyle
public string InstructionText
public TableItemStyle InstructionTextStyle
public TableItemStyle LabelStyle
public ITemplate LayoutTemplate
public string LoginButtonImageUrl
public Style LoginButtonStyle
public string LoginButtonText
public ButtonType LoginButtonType
public string MembershipProvider
public Orientation Orientation
public string Password
public string PasswordLabelText
public string PasswordRecoveryIconUrl
public string PasswordRecoveryText
public string PasswordRecoveryUrl
public string PasswordRequiredErrorMessage
public bool RenderOuterTable
public bool RememberMeSet
public string RememberMeText
protected HtmlTextWriterTag TagKey
public Style TextBoxStyle
public LoginTextLayout TextLayout
public string TitleText
public TableItemStyle TitleTextStyle
public string UserName
public string UserNameLabelText
public string UserNameRequiredErrorMessage
public Style ValidatorTextStyle
public bool VisibleWhenLoggedIn
private LoginContainer LoginTemplateContainer
public int get_BorderPadding()
public void set_BorderPadding(int value)
public TableItemStyle get_CheckBoxStyle()
public string get_CreateUserIconUrl()
public void set_CreateUserIconUrl(string value)
public string get_CreateUserText()
public void set_CreateUserText(string value)
public string get_CreateUserUrl()
public void set_CreateUserUrl(string value)
public string get_DestinationPageUrl()
public void set_DestinationPageUrl(string value)
public bool get_DisplayRememberMe()
public void set_DisplayRememberMe(bool value)
public LoginFailureAction get_FailureAction()
public void set_FailureAction(LoginFailureAction value)
public string get_FailureText()
public void set_FailureText(string value)
public TableItemStyle get_FailureTextStyle()
public string get_HelpPageIconUrl()
public void set_HelpPageIconUrl(string value)
public string get_HelpPageText()
public void set_HelpPageText(string value)
public string get_HelpPageUrl()
public void set_HelpPageUrl(string value)
public TableItemStyle get_HyperLinkStyle()
public string get_InstructionText()
public void set_InstructionText(string value)
public TableItemStyle get_InstructionTextStyle()
public TableItemStyle get_LabelStyle()
public ITemplate get_LayoutTemplate()
public void set_LayoutTemplate(ITemplate value)
public string get_LoginButtonImageUrl()
public void set_LoginButtonImageUrl(string value)
public Style get_LoginButtonStyle()
public string get_LoginButtonText()
public void set_LoginButtonText(string value)
public ButtonType get_LoginButtonType()
public void set_LoginButtonType(ButtonType value)
public string get_MembershipProvider()
public void set_MembershipProvider(string value)
public Orientation get_Orientation()
public void set_Orientation(Orientation value)
public string get_Password()
public string get_PasswordLabelText()
public void set_PasswordLabelText(string value)
public string get_PasswordRecoveryIconUrl()
public void set_PasswordRecoveryIconUrl(string value)
public string get_PasswordRecoveryText()
public void set_PasswordRecoveryText(string value)
public string get_PasswordRecoveryUrl()
public void set_PasswordRecoveryUrl(string value)
public string get_PasswordRequiredErrorMessage()
public void set_PasswordRequiredErrorMessage(string value)
public bool get_RenderOuterTable()
public void set_RenderOuterTable(bool value)
public bool get_RememberMeSet()
public void set_RememberMeSet(bool value)
public string get_RememberMeText()
public void set_RememberMeText(string value)
protected HtmlTextWriterTag get_TagKey()
public Style get_TextBoxStyle()
public LoginTextLayout get_TextLayout()
public void set_TextLayout(LoginTextLayout value)
public string get_TitleText()
public void set_TitleText(string value)
public TableItemStyle get_TitleTextStyle()
public string get_UserName()
public void set_UserName(string value)
public string get_UserNameLabelText()
public void set_UserNameLabelText(string value)
public string get_UserNameRequiredErrorMessage()
public void set_UserNameRequiredErrorMessage(string value)
public Style get_ValidatorTextStyle()
public bool get_VisibleWhenLoggedIn()
public void set_VisibleWhenLoggedIn(bool value)
private LoginContainer get_LoginTemplateContainer()
protected internal void CreateChildControls()
protected void LoadViewState(object savedState)
private bool HasOnAuthenticateHandler()
protected void OnAuthenticate(AuthenticateEventArgs e)
protected bool OnBubbleEvent(object source, EventArgs e)
protected void OnLoggedIn(EventArgs e)
protected void OnLoggingIn(LoginCancelEventArgs e)
protected void OnLoginError(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
protected object SaveViewState()
protected void SetDesignModeState(IDictionary data)
protected void TrackViewState()
public void add_Authenticate(AuthenticateEventHandler value)
public void remove_Authenticate(AuthenticateEventHandler value)
public void add_LoggedIn(EventHandler value)
public void remove_LoggedIn(EventHandler value)
public void add_LoggingIn(LoginCancelEventHandler value)
public void remove_LoggingIn(LoginCancelEventHandler value)
public void add_LoginError(EventHandler value)
public void remove_LoginError(EventHandler value)
internal void RegisterApplyStyle(WebControl control, Style style)
private bool AuthenticateUser()
private void LoginClick(object sender, CommandEventArgs e)
private bool IsDefaultLoginPage()
private bool IsLoggedIn()
private void Redirect(string url)
private void Refresh()
private void UserName_TextChanged(object sender, EventArgs e)
private void Password_TextChanged(object sender, EventArgs e)
private void RememberMe_CheckedChanged(object sender, EventArgs e)
}
public System.Web.UI.WebControls.LoginCancelEventArgs : EventArgs {
private bool _cancel
public bool Cancel
public void .ctor(bool cancel)
public bool get_Cancel()
public void set_Cancel(bool value)
}
public System.Web.UI.WebControls.LoginCancelEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, LoginCancelEventArgs e)
public IAsyncResult BeginInvoke(object sender, LoginCancelEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.LoginFailureAction : Enum {
public int value__
public LoginFailureAction Refresh
public LoginFailureAction RedirectToLoginPage
}
public System.Web.UI.WebControls.LoginName : WebControl {
public string FormatString
public bool SupportsDisabledAttribute
private bool Anonymous
private string User
public string get_FormatString()
public void set_FormatString(string value)
public bool get_SupportsDisabledAttribute()
protected internal void Render(HtmlTextWriter writer)
public void RenderBeginTag(HtmlTextWriter writer)
protected internal void RenderContents(HtmlTextWriter writer)
public void RenderEndTag(HtmlTextWriter writer)
private bool get_Anonymous()
private string get_User()
}
public System.Web.UI.WebControls.LoginStatus : CompositeControl {
private object loggedOutEvent
private object loggingOutEvent
private LinkButton logoutLinkButton
private ImageButton logoutImageButton
private LinkButton loginLinkButton
private ImageButton loginImageButton
public string LoginImageUrl
public string LoginText
public LogoutAction LogoutAction
public string LogoutImageUrl
public string LogoutPageUrl
public string LogoutText
protected HtmlTextWriterTag TagKey
public string get_LoginImageUrl()
public void set_LoginImageUrl(string value)
public string get_LoginText()
public void set_LoginText(string value)
public LogoutAction get_LogoutAction()
public void set_LogoutAction(LogoutAction value)
public string get_LogoutImageUrl()
public void set_LogoutImageUrl(string value)
public string get_LogoutPageUrl()
public void set_LogoutPageUrl(string value)
public string get_LogoutText()
public void set_LogoutText(string value)
protected HtmlTextWriterTag get_TagKey()
protected internal void CreateChildControls()
protected void OnLoggedOut(EventArgs e)
protected void OnLoggingOut(LoginCancelEventArgs e)
protected internal void OnPreRender(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
protected internal void RenderContents(HtmlTextWriter writer)
protected void SetDesignModeState(IDictionary data)
public void add_LoggedOut(EventHandler value)
public void remove_LoggedOut(EventHandler value)
public void add_LoggingOut(LoginCancelEventHandler value)
public void remove_LoggingOut(LoginCancelEventHandler value)
private void LogoutClick(object sender, CommandEventArgs e)
private void LoginClick(object sender, CommandEventArgs e)
}
public System.Web.UI.WebControls.LoginTextLayout : Enum {
public int value__
public LoginTextLayout TextOnLeft
public LoginTextLayout TextOnTop
}
public System.Web.UI.WebControls.LoginView : Control {
private object viewChangedEvent
private object viewChangingEvent
private ITemplate anonymousTemplate
private ITemplate loggedInTemplate
private bool isAuthenticated
private bool theming
private RoleGroupCollection coll
public ITemplate AnonymousTemplate
public ControlCollection Controls
public bool EnableTheming
public ITemplate LoggedInTemplate
public RoleGroupCollection RoleGroups
public string SkinID
private bool IsAuthenticated
public ITemplate get_AnonymousTemplate()
public void set_AnonymousTemplate(ITemplate value)
public ControlCollection get_Controls()
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
public ITemplate get_LoggedInTemplate()
public void set_LoggedInTemplate(ITemplate value)
public RoleGroupCollection get_RoleGroups()
public string get_SkinID()
public void set_SkinID(string value)
private bool get_IsAuthenticated()
private void set_IsAuthenticated(bool value)
private ITemplate GetTemplateFromRoleGroup(RoleGroup rg, IPrincipal user)
protected internal void CreateChildControls()
public void DataBind()
public void Focus()
protected internal void LoadControlState(object savedState)
protected internal void OnInit(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected void OnViewChanged(EventArgs e)
protected void OnViewChanging(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
protected internal object SaveControlState()
protected void SetDesignModeState(IDictionary data)
public void add_ViewChanged(EventHandler value)
public void remove_ViewChanged(EventHandler value)
public void add_ViewChanging(EventHandler value)
public void remove_ViewChanging(EventHandler value)
}
public System.Web.UI.WebControls.LogoutAction : Enum {
public int value__
public LogoutAction Refresh
public LogoutAction Redirect
public LogoutAction RedirectToLoginPage
}
public System.Web.UI.WebControls.MailDefinition : object {
private StateBag _bag
public string BodyFileName
public string CC
public EmbeddedMailObjectsCollection EmbeddedObjects
public string From
public bool IsBodyHtml
public MailPriority Priority
public string Subject
private bool System.Web.UI.IStateManager.IsTrackingViewState
public string get_BodyFileName()
public void set_BodyFileName(string value)
public string get_CC()
public void set_CC(string value)
public EmbeddedMailObjectsCollection get_EmbeddedObjects()
public string get_From()
public void set_From(string value)
public bool get_IsBodyHtml()
public void set_IsBodyHtml(bool value)
public MailPriority get_Priority()
public void set_Priority(MailPriority value)
public string get_Subject()
public void set_Subject(string value)
public MailMessage CreateMailMessage(string recipients, IDictionary replacements, Control owner)
public MailMessage CreateMailMessage(string recipients, IDictionary replacements, string body, Control owner)
private void System.Web.UI.IStateManager.LoadViewState(object state)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
}
public System.Web.UI.WebControls.MailMessageEventArgs : LoginCancelEventArgs {
private MailMessage _message
public MailMessage Message
public void .ctor(MailMessage message)
public MailMessage get_Message()
}
public System.Web.UI.WebControls.MailMessageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MailMessageEventArgs e)
public IAsyncResult BeginInvoke(object sender, MailMessageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.Menu : HierarchicalDataBoundControl {
private IMenuRenderer renderer
private MenuItemStyle dynamicMenuItemStyle
private SubMenuStyle dynamicMenuStyle
private MenuItemStyle dynamicSelectedStyle
private MenuItemStyle staticMenuItemStyle
private SubMenuStyle staticMenuStyle
private MenuItemStyle staticSelectedStyle
private Style staticHoverStyle
private Style dynamicHoverStyle
private MenuItemStyleCollection levelMenuItemStyles
private MenuItemStyleCollection levelSelectedStyles
private SubMenuStyleCollection levelSubMenuStyles
private ITemplate staticItemTemplate
private ITemplate dynamicItemTemplate
private MenuItemCollection items
private MenuItemBindingCollection dataBindings
private MenuItem selectedItem
private string selectedItemPath
private Hashtable bindings
private Hashtable _menuItemControls
private bool _requiresChildControlsDataBinding
private SiteMapNode _currSiteMapNode
private Style popOutBoxStyle
private Style controlLinkStyle
private Style dynamicMenuItemLinkStyle
private Style staticMenuItemLinkStyle
private Style dynamicSelectedLinkStyle
private Style staticSelectedLinkStyle
private Style dynamicHoverLinkStyle
private Style staticHoverLinkStyle
private Nullable`1<bool> renderList
private bool includeStyleBlock
private MenuRenderingMode renderingMode
private object MenuItemClickEvent
private object MenuItemDataBoundEvent
public string MenuItemClickCommandName
private MenuRenderHtmlTemplate _dynamicTemplate
private IMenuRenderer Renderer
private bool RenderList
public bool IncludeStyleBlock
public MenuRenderingMode RenderingMode
public MenuItemBindingCollection DataBindings
public int DisappearAfter
public string DynamicBottomSeparatorImageUrl
public string DynamicItemFormatString
public string DynamicTopSeparatorImageUrl
public string StaticBottomSeparatorImageUrl
public string StaticTopSeparatorImageUrl
public Orientation Orientation
public int StaticDisplayLevels
public string StaticItemFormatString
public Unit StaticSubMenuIndent
public int MaximumDynamicDisplayLevels
public int DynamicVerticalOffset
public int DynamicHorizontalOffset
public bool DynamicEnableDefaultPopOutImage
public bool StaticEnableDefaultPopOutImage
public MenuItemCollection Items
public char PathSeparator
public bool ItemWrap
internal Style PopOutBoxStyle
internal Style ControlLinkStyle
internal Style DynamicMenuItemLinkStyle
internal Style StaticMenuItemLinkStyle
internal Style DynamicSelectedLinkStyle
internal Style StaticSelectedLinkStyle
internal Style DynamicHoverLinkStyle
internal Style StaticHoverLinkStyle
internal MenuItemStyle StaticMenuItemStyleInternal
internal SubMenuStyle StaticMenuStyleInternal
internal MenuItemStyle DynamicMenuItemStyleInternal
internal SubMenuStyle DynamicMenuStyleInternal
internal MenuItemStyleCollection LevelMenuItemStylesInternal
internal List`1<Style> LevelMenuItemLinkStyles
internal SubMenuStyleCollection LevelSubMenuStylesInternal
internal MenuItemStyle StaticSelectedStyleInternal
internal MenuItemStyle DynamicSelectedStyleInternal
internal MenuItemStyleCollection LevelSelectedStylesInternal
internal List`1<Style> LevelSelectedLinkStyles
internal Style StaticHoverStyleInternal
internal Style DynamicHoverStyleInternal
public MenuItemStyle DynamicMenuItemStyle
public MenuItemStyle DynamicSelectedStyle
public SubMenuStyle DynamicMenuStyle
public MenuItemStyle StaticMenuItemStyle
public MenuItemStyle StaticSelectedStyle
public SubMenuStyle StaticMenuStyle
public MenuItemStyleCollection LevelMenuItemStyles
public MenuItemStyleCollection LevelSelectedStyles
public SubMenuStyleCollection LevelSubMenuStyles
public Style DynamicHoverStyle
public Style StaticHoverStyle
public string ScrollDownImageUrl
public string ScrollUpImageUrl
public string ScrollDownText
public string ScrollUpText
public string DynamicPopOutImageTextFormatString
public string DynamicPopOutImageUrl
public string StaticPopOutImageTextFormatString
public string StaticPopOutImageUrl
public string Target
public ITemplate StaticItemTemplate
public ITemplate DynamicItemTemplate
public MenuItem SelectedItem
public string SelectedValue
public string SkipLinkText
protected HtmlTextWriterTag TagKey
public ControlCollection Controls
public void add_MenuItemClick(MenuEventHandler value)
public void remove_MenuItemClick(MenuEventHandler value)
public void add_MenuItemDataBound(MenuEventHandler value)
public void remove_MenuItemDataBound(MenuEventHandler value)
protected void OnMenuItemClick(MenuEventArgs e)
protected void OnMenuItemDataBound(MenuEventArgs e)
private IMenuRenderer get_Renderer()
private bool get_RenderList()
public bool get_IncludeStyleBlock()
public void set_IncludeStyleBlock(bool value)
public MenuRenderingMode get_RenderingMode()
public void set_RenderingMode(MenuRenderingMode value)
public MenuItemBindingCollection get_DataBindings()
public int get_DisappearAfter()
public void set_DisappearAfter(int value)
public string get_DynamicBottomSeparatorImageUrl()
public void set_DynamicBottomSeparatorImageUrl(string value)
public string get_DynamicItemFormatString()
public void set_DynamicItemFormatString(string value)
public string get_DynamicTopSeparatorImageUrl()
public void set_DynamicTopSeparatorImageUrl(string value)
public string get_StaticBottomSeparatorImageUrl()
public void set_StaticBottomSeparatorImageUrl(string value)
public string get_StaticTopSeparatorImageUrl()
public void set_StaticTopSeparatorImageUrl(string value)
public Orientation get_Orientation()
public void set_Orientation(Orientation value)
public int get_StaticDisplayLevels()
public void set_StaticDisplayLevels(int value)
public string get_StaticItemFormatString()
public void set_StaticItemFormatString(string value)
public Unit get_StaticSubMenuIndent()
public void set_StaticSubMenuIndent(Unit value)
public int get_MaximumDynamicDisplayLevels()
public void set_MaximumDynamicDisplayLevels(int value)
public int get_DynamicVerticalOffset()
public void set_DynamicVerticalOffset(int value)
public int get_DynamicHorizontalOffset()
public void set_DynamicHorizontalOffset(int value)
public bool get_DynamicEnableDefaultPopOutImage()
public void set_DynamicEnableDefaultPopOutImage(bool value)
public bool get_StaticEnableDefaultPopOutImage()
public void set_StaticEnableDefaultPopOutImage(bool value)
public MenuItemCollection get_Items()
public char get_PathSeparator()
public void set_PathSeparator(char value)
public bool get_ItemWrap()
public void set_ItemWrap(bool value)
internal Style get_PopOutBoxStyle()
internal Style get_ControlLinkStyle()
internal Style get_DynamicMenuItemLinkStyle()
internal Style get_StaticMenuItemLinkStyle()
internal Style get_DynamicSelectedLinkStyle()
internal Style get_StaticSelectedLinkStyle()
internal Style get_DynamicHoverLinkStyle()
internal Style get_StaticHoverLinkStyle()
internal MenuItemStyle get_StaticMenuItemStyleInternal()
internal SubMenuStyle get_StaticMenuStyleInternal()
internal MenuItemStyle get_DynamicMenuItemStyleInternal()
internal SubMenuStyle get_DynamicMenuStyleInternal()
internal MenuItemStyleCollection get_LevelMenuItemStylesInternal()
internal List`1<Style> get_LevelMenuItemLinkStyles()
internal SubMenuStyleCollection get_LevelSubMenuStylesInternal()
internal MenuItemStyle get_StaticSelectedStyleInternal()
internal MenuItemStyle get_DynamicSelectedStyleInternal()
internal MenuItemStyleCollection get_LevelSelectedStylesInternal()
internal List`1<Style> get_LevelSelectedLinkStyles()
internal Style get_StaticHoverStyleInternal()
internal Style get_DynamicHoverStyleInternal()
public MenuItemStyle get_DynamicMenuItemStyle()
public MenuItemStyle get_DynamicSelectedStyle()
public SubMenuStyle get_DynamicMenuStyle()
public MenuItemStyle get_StaticMenuItemStyle()
public MenuItemStyle get_StaticSelectedStyle()
public SubMenuStyle get_StaticMenuStyle()
public MenuItemStyleCollection get_LevelMenuItemStyles()
public MenuItemStyleCollection get_LevelSelectedStyles()
public SubMenuStyleCollection get_LevelSubMenuStyles()
public Style get_DynamicHoverStyle()
public Style get_StaticHoverStyle()
public string get_ScrollDownImageUrl()
public void set_ScrollDownImageUrl(string value)
public string get_ScrollUpImageUrl()
public void set_ScrollUpImageUrl(string value)
public string get_ScrollDownText()
public void set_ScrollDownText(string value)
public string get_ScrollUpText()
public void set_ScrollUpText(string value)
public string get_DynamicPopOutImageTextFormatString()
public void set_DynamicPopOutImageTextFormatString(string value)
public string get_DynamicPopOutImageUrl()
public void set_DynamicPopOutImageUrl(string value)
public string get_StaticPopOutImageTextFormatString()
public void set_StaticPopOutImageTextFormatString(string value)
public string get_StaticPopOutImageUrl()
public void set_StaticPopOutImageUrl(string value)
public string get_Target()
public void set_Target(string value)
public ITemplate get_StaticItemTemplate()
public void set_StaticItemTemplate(ITemplate value)
public ITemplate get_DynamicItemTemplate()
public void set_DynamicItemTemplate(ITemplate value)
public MenuItem get_SelectedItem()
public string get_SelectedValue()
public string get_SkipLinkText()
public void set_SkipLinkText(string value)
private IMenuRenderer CreateRenderer(IMenuRenderer current)
internal void SetSelectedItem(MenuItem item)
public MenuItem FindItem(string valuePath)
private string GetBindingKey(string dataMember, int depth)
internal MenuItemBinding FindBindingForItem(string type, int depth)
protected internal void PerformDataBinding()
private void FillBoundChildrenRecursive(IHierarchicalEnumerable hEnumerable, MenuItemCollection itemCollection)
protected void SetItemDataBound(MenuItem node, bool dataBound)
protected void SetItemDataPath(MenuItem node, string dataPath)
protected void SetItemDataItem(MenuItem node, object dataItem)
protected internal void RaisePostBackEvent(string eventArgument)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
private MenuItem FindItemByPos(string path)
protected HtmlTextWriterTag get_TagKey()
protected void TrackViewState()
protected object SaveViewState()
protected void LoadViewState(object state)
protected internal void OnInit(EventArgs e)
protected internal void LoadControlState(object savedState)
protected internal object SaveControlState()
protected internal void CreateChildControls()
private void CreateChildControlsForItems()
private void CreateChildControlsForItems(MenuItemCollection items)
protected void EnsureDataBound()
private void EnsureChildControlsDataBound()
protected IDictionary GetDesignModeState()
protected void SetDesignModeState(IDictionary data)
public ControlCollection get_Controls()
public void DataBind()
protected bool OnBubbleEvent(object source, EventArgs e)
protected void OnDataBinding(EventArgs e)
protected internal void OnPreRender(EventArgs e)
private void InitializeDataBindings()
protected internal void Render(HtmlTextWriter writer)
protected void AddAttributesToRender(HtmlTextWriter writer)
public void RenderBeginTag(HtmlTextWriter writer)
public void RenderEndTag(HtmlTextWriter writer)
protected internal void RenderContents(HtmlTextWriter writer)
internal void RenderDynamicMenu(HtmlTextWriter writer, MenuItemCollection items)
private MenuRenderHtmlTemplate GetDynamicMenuTemplate(MenuItem item)
private void RenderDynamicMenu(HtmlTextWriter writer, MenuItem item)
private string GetCssMenuStyle(bool dynamic, int menuLevel)
internal void RenderMenu(HtmlTextWriter writer, MenuItemCollection items, bool vertical, bool dynamic, int menuLevel, bool notLast)
internal bool DisplayChildren(MenuItem item)
internal void RenderItem(HtmlTextWriter writer, MenuItem item, int position)
internal void RenderItemContent(HtmlTextWriter writer, MenuItem item, bool isDynamicItem)
internal Unit GetItemSpacing(MenuItem item, bool dynamic)
}
public System.Web.UI.WebControls.MenuEventArgs : CommandEventArgs {
private MenuItem _item
private object _commandSource
public object CommandSource
public MenuItem Item
public void .ctor(MenuItem item, object commandSource, CommandEventArgs originalArgs)
public void .ctor(MenuItem item)
public object get_CommandSource()
public MenuItem get_Item()
}
public System.Web.UI.WebControls.MenuEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MenuEventArgs e)
public IAsyncResult BeginInvoke(object sender, MenuEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.MenuItem : object {
private StateBag ViewState
private MenuItemCollection items
private bool marked
private Menu menu
private MenuItem parent
private int index
private string path
private int depth
private object dataItem
private IHierarchyData hierarchyData
private bool gotBinding
private MenuItemBinding binding
private PropertyDescriptorCollection boundProperties
public int Depth
internal Menu Menu
public bool DataBound
public object DataItem
public string DataPath
public MenuItemCollection ChildItems
public string ImageUrl
public string NavigateUrl
public string PopOutImageUrl
public string Target
public string Text
public string ToolTip
public string Value
public string SeparatorImageUrl
public bool Selectable
public bool Enabled
internal bool BranchEnabled
public bool Selected
public MenuItem Parent
public string ValuePath
internal int Index
internal string Path
internal bool HasChildData
private bool System.Web.UI.IStateManager.IsTrackingViewState
public void .ctor(string text)
public void .ctor(string text, string value)
public void .ctor(string text, string value, string imageUrl)
public void .ctor(string text, string value, string imageUrl, string navigateUrl)
public void .ctor(string text, string value, string imageUrl, string navigateUrl, string target)
public int get_Depth()
private void ResetPathData()
internal Menu get_Menu()
internal void set_Menu(Menu value)
public bool get_DataBound()
private void set_DataBound(bool value)
public object get_DataItem()
public string get_DataPath()
private void set_DataPath(string value)
public MenuItemCollection get_ChildItems()
public string get_ImageUrl()
public void set_ImageUrl(string value)
public string get_NavigateUrl()
public void set_NavigateUrl(string value)
public string get_PopOutImageUrl()
public void set_PopOutImageUrl(string value)
public string get_Target()
public void set_Target(string value)
public string get_Text()
public void set_Text(string value)
public string get_ToolTip()
public void set_ToolTip(string value)
public string get_Value()
public void set_Value(string value)
public string get_SeparatorImageUrl()
public void set_SeparatorImageUrl(string value)
public bool get_Selectable()
public void set_Selectable(bool value)
public bool get_Enabled()
public void set_Enabled(bool value)
internal bool get_BranchEnabled()
public bool get_Selected()
public void set_Selected(bool value)
public MenuItem get_Parent()
public string get_ValuePath()
internal int get_Index()
internal void set_Index(int value)
internal void SetParent(MenuItem item)
internal string get_Path()
internal bool get_HasChildData()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
internal void SetDirty()
private object System.ICloneable.Clone()
internal void Bind(IHierarchyData hierarchyData)
internal void SetDataItem(object item)
internal void SetDataPath(string path)
internal void SetDataBound(bool bound)
private string GetDefaultBoundText()
private string GetDataItemType()
private MenuItemBinding GetBinding()
private object GetBoundPropertyValue(string name)
}
public System.Web.UI.WebControls.MenuItemBinding : object {
private StateBag ViewState
public string DataMember
public int Depth
public bool Enabled
public string EnabledField
public string FormatString
public string ImageUrl
public string ImageUrlField
public string NavigateUrl
public string NavigateUrlField
public bool Selectable
public string SelectableField
public string Target
public string TargetField
public string Text
public string TextField
public string ToolTip
public string ToolTipField
public string Value
public string ValueField
public string PopOutImageUrl
public string PopOutImageUrlField
public string SeparatorImageUrl
public string SeparatorImageUrlField
private bool System.Web.UI.IStateManager.IsTrackingViewState
private object System.Web.UI.IDataSourceViewSchemaAccessor.DataSourceViewSchema
public string get_DataMember()
public void set_DataMember(string value)
public int get_Depth()
public void set_Depth(int value)
public bool get_Enabled()
public void set_Enabled(bool value)
public string get_EnabledField()
public void set_EnabledField(string value)
public string get_FormatString()
public void set_FormatString(string value)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public string get_ImageUrlField()
public void set_ImageUrlField(string value)
public string get_NavigateUrl()
public void set_NavigateUrl(string value)
public string get_NavigateUrlField()
public void set_NavigateUrlField(string value)
public bool get_Selectable()
public void set_Selectable(bool value)
public string get_SelectableField()
public void set_SelectableField(string value)
public string get_Target()
public void set_Target(string value)
public string get_TargetField()
public void set_TargetField(string value)
public string get_Text()
public void set_Text(string value)
public string get_TextField()
public void set_TextField(string value)
public string get_ToolTip()
public void set_ToolTip(string value)
public string get_ToolTipField()
public void set_ToolTipField(string value)
public string get_Value()
public void set_Value(string value)
public string get_ValueField()
public void set_ValueField(string value)
public string get_PopOutImageUrl()
public void set_PopOutImageUrl(string value)
public string get_PopOutImageUrlField()
public void set_PopOutImageUrlField(string value)
public string get_SeparatorImageUrl()
public void set_SeparatorImageUrl(string value)
public string get_SeparatorImageUrlField()
public void set_SeparatorImageUrlField(string value)
public string ToString()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
private object System.Web.UI.IDataSourceViewSchemaAccessor.get_DataSourceViewSchema()
private void System.Web.UI.IDataSourceViewSchemaAccessor.set_DataSourceViewSchema(object value)
private object System.ICloneable.Clone()
internal void SetDirty()
}
public System.Web.UI.WebControls.MenuItemBindingCollection : StateManagedCollection {
private Type[] types
public MenuItemBinding Item
public int Add(MenuItemBinding binding)
public bool Contains(MenuItemBinding binding)
public void CopyTo(MenuItemBinding[] array, int index)
protected object CreateKnownType(int index)
protected Type[] GetKnownTypes()
public int IndexOf(MenuItemBinding value)
public void Insert(int index, MenuItemBinding binding)
public void Remove(MenuItemBinding binding)
public void RemoveAt(int index)
public MenuItemBinding get_Item(int i)
public void set_Item(int i, MenuItemBinding value)
protected void SetDirtyObject(object o)
protected void OnClear()
protected void OnRemoveComplete(int index, object value)
protected void OnValidate(object value)
}
public System.Web.UI.WebControls.MenuItemCollection : object {
private ArrayList items
private Menu menu
private MenuItem parent
private bool marked
private bool dirty
public MenuItem Item
public int Count
public bool IsSynchronized
public object SyncRoot
private bool System.Web.UI.IStateManager.IsTrackingViewState
public void .ctor(MenuItem owner)
internal void .ctor(Menu menu)
internal void SetMenu(Menu menu)
public MenuItem get_Item(int index)
public void Add(MenuItem child)
internal void SetDirty()
public void AddAt(int index, MenuItem child)
public void Clear()
public bool Contains(MenuItem c)
public void CopyTo(Array array, int index)
public void CopyTo(MenuItem[] array, int index)
public IEnumerator GetEnumerator()
public int IndexOf(MenuItem value)
public void Remove(MenuItem value)
public void RemoveAt(int index)
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
private void System.Collections.ICollection.CopyTo(Array array, int index)
private void System.Web.UI.IStateManager.LoadViewState(object state)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
}
public System.Web.UI.WebControls.MenuItemStyle : Style {
public Unit HorizontalPadding
public Unit VerticalPadding
public Unit ItemSpacing
public void .ctor(StateBag bag)
public Unit get_HorizontalPadding()
public void set_HorizontalPadding(Unit value)
public Unit get_VerticalPadding()
public void set_VerticalPadding(Unit value)
public Unit get_ItemSpacing()
public void set_ItemSpacing(Unit value)
public void CopyFrom(Style s)
public void MergeWith(Style s)
public void Reset()
protected void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver)
}
public System.Web.UI.WebControls.MenuItemStyleCollection : StateManagedCollection {
private Type[] types
public MenuItemStyle Item
public int Add(MenuItemStyle style)
public bool Contains(MenuItemStyle style)
public void CopyTo(MenuItemStyle[] styleArray, int index)
protected object CreateKnownType(int index)
protected Type[] GetKnownTypes()
public int IndexOf(MenuItemStyle style)
public void Insert(int index, MenuItemStyle style)
public void Remove(MenuItemStyle style)
public void RemoveAt(int index)
public MenuItemStyle get_Item(int i)
public void set_Item(int i, MenuItemStyle value)
protected void SetDirtyObject(object o)
protected void OnInsert(int index, object value)
}
public System.Web.UI.WebControls.MenuItemTemplateContainer : Control {
private object dataItem
private int index
public object DataItem
public int ItemIndex
private int System.Web.UI.IDataItemContainer.DataItemIndex
private int System.Web.UI.IDataItemContainer.DisplayIndex
public void .ctor(int itemIndex, MenuItem dataItem)
protected bool OnBubbleEvent(object source, EventArgs e)
protected internal void Render(HtmlTextWriter writer)
public object get_DataItem()
public void set_DataItem(object value)
public int get_ItemIndex()
private int System.Web.UI.IDataItemContainer.get_DataItemIndex()
private int System.Web.UI.IDataItemContainer.get_DisplayIndex()
}
internal System.Web.UI.WebControls.MenuListRenderer : BaseMenuRenderer {
private bool haveDynamicPopOut
public HtmlTextWriterTag Tag
public HtmlTextWriterTag get_Tag()
public void .ctor(Menu owner)
public void PreRender(Page page, HtmlHead head, ClientScriptManager csm, string cmenu, StringBuilder script)
public void RenderBeginTag(HtmlTextWriter writer, string skipLinkText)
public void RenderEndTag(HtmlTextWriter writer)
public void AddAttributesToRender(HtmlTextWriter writer)
public void RenderContents(HtmlTextWriter writer)
public void RenderMenuBeginTag(HtmlTextWriter writer, bool dynamic, int menuLevel)
public void RenderMenuEndTag(HtmlTextWriter writer, bool dynamic, int menuLevel)
public void RenderMenuBody(HtmlTextWriter writer, MenuItemCollection items, bool vertical, bool dynamic, bool notLast)
protected void RenderMenuItem(HtmlTextWriter writer, MenuItem item, bool vertical, bool notLast, bool isFirst, OwnerContext oc)
public bool IsDynamicItem(Menu owner, MenuItem item)
private NamedCssStyleCollection RenderAnchorStyle(StyleBlock block, Style style, string styleName)
private void RenderLevelStyles(StyleBlock block, int num, IList levelStyles, string name, string unitName, double indent)
}
public System.Web.UI.WebControls.MenuRenderingMode : Enum {
public int value__
public MenuRenderingMode Default
public MenuRenderingMode Table
public MenuRenderingMode List
}
internal System.Web.UI.WebControls.MenuTableRenderer : BaseMenuRenderer {
private string onPreRenderScript
public HtmlTextWriterTag Tag
public HtmlTextWriterTag get_Tag()
public void .ctor(Menu owner)
public void AddAttributesToRender(HtmlTextWriter writer)
public void PreRender(Page page, HtmlHead head, ClientScriptManager csm, string cmenu, StringBuilder script)
public void RenderBeginTag(HtmlTextWriter writer, string skipLinkText)
public void RenderEndTag(HtmlTextWriter writer)
public void RenderContents(HtmlTextWriter writer)
private void RenderMenuBeginTagAttributes(HtmlTextWriter writer, bool dynamic, int menuLevel)
public void RenderMenuBeginTag(HtmlTextWriter writer, bool dynamic, int menuLevel)
private void RenderMenuItemSpacing(HtmlTextWriter writer, Unit itemSpacing, bool vertical)
public void RenderMenuBody(HtmlTextWriter writer, MenuItemCollection items, bool vertical, bool dynamic, bool notLast)
protected void RenderMenuItem(HtmlTextWriter writer, MenuItem item, bool vertical, bool notLast, bool isFirst, OwnerContext oc)
public bool IsDynamicItem(Menu owner, MenuItem item)
}
public System.Web.UI.WebControls.ModelDataMethodResult : object {
public OrderedDictionary OutputParameters
public object ReturnValue
public void .ctor(object returnValue, OrderedDictionary outputParameters)
public OrderedDictionary get_OutputParameters()
public object get_ReturnValue()
}
public System.Web.UI.WebControls.ModelDataSource : object {
public Control DataControl
public ModelDataSourceView View
public void .ctor(Control dataControl)
public Control get_DataControl()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
public ModelDataSourceView get_View()
public void add_CallingDataMethods(CallingDataMethodsEventHandler value)
public void remove_CallingDataMethods(CallingDataMethodsEventHandler value)
private void System.Web.UI.IDataSource.add_DataSourceChanged(EventHandler value)
private void System.Web.UI.IDataSource.remove_DataSourceChanged(EventHandler value)
private DataSourceView System.Web.UI.IDataSource.GetView(string viewName)
private ICollection System.Web.UI.IDataSource.GetViewNames()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
public void UpdateProperties(string modelTypeName, string selectMethod)
public void UpdateProperties(string modelTypeName, string selectMethod, string updateMethod, string insertMethod, string deleteMethod, string dataKeyName)
}
public System.Web.UI.WebControls.ModelDataSourceMethod : object {
public object Instance
public MethodInfo MethodInfo
public OrderedDictionary Parameters
public void .ctor(object instance, MethodInfo methodInfo)
public object get_Instance()
public MethodInfo get_MethodInfo()
public OrderedDictionary get_Parameters()
}
public System.Web.UI.WebControls.ModelDataSourceView : DataSourceView {
public string DataKeyName
public string DeleteMethod
public string InsertMethod
public string ModelTypeName
public string SelectMethod
public string UpdateMethod
public void .ctor(ModelDataSource owner)
public string get_DataKeyName()
public string get_DeleteMethod()
public string get_InsertMethod()
public string get_ModelTypeName()
public string get_SelectMethod()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
public string get_UpdateMethod()
public void add_CallingDataMethods(CallingDataMethodsEventHandler value)
public void remove_CallingDataMethods(CallingDataMethodsEventHandler value)
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
public void UpdateProperties(string modelTypeName, string selectMethod, string updateMethod, string insertMethod, string deleteMethod, string dataKeyName)
}
public System.Web.UI.WebControls.ModelErrorMessage : Label {
public string ModelStateKey
public bool SetFocusOnError
public string get_ModelStateKey()
public void set_ModelStateKey(string value)
public bool get_SetFocusOnError()
public void set_SetFocusOnError(bool value)
}
public System.Web.UI.WebControls.ModelMethodContext : object {
public ModelMethodContext Current
public ModelStateDictionary ModelState
public void .ctor(Page page)
public ModelMethodContext get_Current()
public ModelStateDictionary get_ModelState()
public bool TryUpdateModel(TModel model)
public bool TryUpdateModel(TModel model, IValueProvider valueProvider)
public void UpdateModel(TModel model)
public void UpdateModel(TModel model, IValueProvider valueProvider)
}
public System.Web.UI.WebControls.MonthChangedEventArgs : object {
private DateTime newDate
private DateTime previousDate
public DateTime NewDate
public DateTime PreviousDate
public void .ctor(DateTime newDate, DateTime previousDate)
public DateTime get_NewDate()
public DateTime get_PreviousDate()
}
public System.Web.UI.WebControls.MonthChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MonthChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, MonthChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.MultiView : Control {
public string NextViewCommandName
public string PreviousViewCommandName
public string SwitchViewByIDCommandName
public string SwitchViewByIndexCommandName
private object ActiveViewChangedEvent
private int viewIndex
private int initialIndex
public int ActiveViewIndex
public bool EnableTheming
public ViewCollection Views
public void add_ActiveViewChanged(EventHandler value)
public void remove_ActiveViewChanged(EventHandler value)
protected void AddParsedSubObject(object obj)
protected ControlCollection CreateControlCollection()
public View GetActiveView()
public void SetActiveView(View view)
public int get_ActiveViewIndex()
public void set_ActiveViewIndex(int value)
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
public ViewCollection get_Views()
protected bool OnBubbleEvent(object source, EventArgs e)
protected internal void OnInit(EventArgs e)
private void UpdateViewVisibility()
protected internal void RemovedControl(Control ctl)
protected internal void LoadControlState(object state)
protected internal object SaveControlState()
protected void OnActiveViewChanged(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.MultiViewControlBuilder : ControlBuilder {
public void AppendSubBuilder(ControlBuilder subBuilder)
}
internal System.Web.UI.WebControls.NamedCssStyleCollection : object {
private CssStyleCollection collection
private string <Name>k__BackingField
public CssStyleCollection Collection
public string Name
public CssStyleCollection get_Collection()
public string get_Name()
private void set_Name(string value)
public void .ctor(string name)
public NamedCssStyleCollection CopyFrom(CssStyleCollection coll)
public NamedCssStyleCollection Add(HtmlTextWriterStyle key, string value)
public NamedCssStyleCollection Add(string key, string value)
public NamedCssStyleCollection Add(Style style)
}
public System.Web.UI.WebControls.NextPrevFormat : Enum {
public int value__
public NextPrevFormat CustomText
public NextPrevFormat ShortMonth
public NextPrevFormat FullMonth
}
public System.Web.UI.WebControls.ObjectDataSource : DataSourceControl {
private String[] emptyNames
private ObjectDataSourceView defaultView
private int cacheDuration
private bool enableCaching
private string cacheKeyDependency
private string sqlCacheDependency
private DataSourceCacheManager cache
private DataSourceCacheExpiry cacheExpirationPolicy
private ObjectDataSourceView DefaultView
public int CacheDuration
public DataSourceCacheExpiry CacheExpirationPolicy
public string CacheKeyDependency
public ConflictOptions ConflictDetection
public bool ConvertNullToDBNull
public string DataObjectTypeName
public string DeleteMethod
public ParameterCollection DeleteParameters
public bool EnableCaching
public bool EnablePaging
public string FilterExpression
public ParameterCollection FilterParameters
public string InsertMethod
public ParameterCollection InsertParameters
public string MaximumRowsParameterName
public string OldValuesParameterFormatString
public string SelectCountMethod
public string SelectMethod
public ParameterCollection SelectParameters
public string SortParameterName
public string SqlCacheDependency
public string StartRowIndexParameterName
public string TypeName
public string UpdateMethod
public ParameterCollection UpdateParameters
internal DataSourceCacheManager Cache
public ParsingCulture ParsingCulture
public void .ctor(string typeName, string selectMethod)
private ObjectDataSourceView get_DefaultView()
public void add_Deleted(ObjectDataSourceStatusEventHandler value)
public void remove_Deleted(ObjectDataSourceStatusEventHandler value)
public void add_Deleting(ObjectDataSourceMethodEventHandler value)
public void remove_Deleting(ObjectDataSourceMethodEventHandler value)
public void add_Filtering(ObjectDataSourceFilteringEventHandler value)
public void remove_Filtering(ObjectDataSourceFilteringEventHandler value)
public void add_Inserted(ObjectDataSourceStatusEventHandler value)
public void remove_Inserted(ObjectDataSourceStatusEventHandler value)
public void add_Inserting(ObjectDataSourceMethodEventHandler value)
public void remove_Inserting(ObjectDataSourceMethodEventHandler value)
public void add_ObjectCreated(ObjectDataSourceObjectEventHandler value)
public void remove_ObjectCreated(ObjectDataSourceObjectEventHandler value)
public void add_ObjectCreating(ObjectDataSourceObjectEventHandler value)
public void remove_ObjectCreating(ObjectDataSourceObjectEventHandler value)
public void add_ObjectDisposing(ObjectDataSourceDisposingEventHandler value)
public void remove_ObjectDisposing(ObjectDataSourceDisposingEventHandler value)
public void add_Selected(ObjectDataSourceStatusEventHandler value)
public void remove_Selected(ObjectDataSourceStatusEventHandler value)
public void add_Selecting(ObjectDataSourceSelectingEventHandler value)
public void remove_Selecting(ObjectDataSourceSelectingEventHandler value)
public void add_Updated(ObjectDataSourceStatusEventHandler value)
public void remove_Updated(ObjectDataSourceStatusEventHandler value)
public void add_Updating(ObjectDataSourceMethodEventHandler value)
public void remove_Updating(ObjectDataSourceMethodEventHandler value)
public int get_CacheDuration()
public void set_CacheDuration(int value)
public DataSourceCacheExpiry get_CacheExpirationPolicy()
public void set_CacheExpirationPolicy(DataSourceCacheExpiry value)
public string get_CacheKeyDependency()
public void set_CacheKeyDependency(string value)
public ConflictOptions get_ConflictDetection()
public void set_ConflictDetection(ConflictOptions value)
public bool get_ConvertNullToDBNull()
public void set_ConvertNullToDBNull(bool value)
public string get_DataObjectTypeName()
public void set_DataObjectTypeName(string value)
public string get_DeleteMethod()
public void set_DeleteMethod(string value)
public ParameterCollection get_DeleteParameters()
public bool get_EnableCaching()
public void set_EnableCaching(bool value)
public bool get_EnablePaging()
public void set_EnablePaging(bool value)
public string get_FilterExpression()
public void set_FilterExpression(string value)
public ParameterCollection get_FilterParameters()
public string get_InsertMethod()
public void set_InsertMethod(string value)
public ParameterCollection get_InsertParameters()
public string get_MaximumRowsParameterName()
public void set_MaximumRowsParameterName(string value)
public string get_OldValuesParameterFormatString()
public void set_OldValuesParameterFormatString(string value)
public string get_SelectCountMethod()
public void set_SelectCountMethod(string value)
public string get_SelectMethod()
public void set_SelectMethod(string value)
public ParameterCollection get_SelectParameters()
public string get_SortParameterName()
public void set_SortParameterName(string value)
public string get_SqlCacheDependency()
public void set_SqlCacheDependency(string value)
public string get_StartRowIndexParameterName()
public void set_StartRowIndexParameterName(string value)
public string get_TypeName()
public void set_TypeName(string value)
public string get_UpdateMethod()
public void set_UpdateMethod(string value)
public ParameterCollection get_UpdateParameters()
internal DataSourceCacheManager get_Cache()
protected DataSourceView GetView(string viewName)
protected ICollection GetViewNames()
public IEnumerable Select()
public int Update()
public int Delete()
public int Insert()
protected internal void OnInit(EventArgs e)
private void OnPageLoadComplete(object sender, EventArgs e)
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
public ParsingCulture get_ParsingCulture()
public void set_ParsingCulture(ParsingCulture value)
}
public System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs : CancelEventArgs {
private object _objectInstance
public object ObjectInstance
public void .ctor(object objectInstance)
public object get_ObjectInstance()
}
public System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ObjectDataSourceDisposingEventArgs e)
public IAsyncResult BeginInvoke(object sender, ObjectDataSourceDisposingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.ObjectDataSourceEventArgs : EventArgs {
private object _objectInstance
public object ObjectInstance
public void .ctor(object objectInstance)
public object get_ObjectInstance()
public void set_ObjectInstance(object value)
}
public System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs : CancelEventArgs {
private IOrderedDictionary _parameterValues
public IOrderedDictionary ParameterValues
public void .ctor(IOrderedDictionary parameterValues)
public IOrderedDictionary get_ParameterValues()
}
public System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ObjectDataSourceFilteringEventArgs e)
public IAsyncResult BeginInvoke(object sender, ObjectDataSourceFilteringEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs : CancelEventArgs {
private IOrderedDictionary _inputParameters
public IOrderedDictionary InputParameters
public void .ctor(IOrderedDictionary inputParameters)
public IOrderedDictionary get_InputParameters()
}
public System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ObjectDataSourceMethodEventArgs e)
public IAsyncResult BeginInvoke(object sender, ObjectDataSourceMethodEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ObjectDataSourceEventArgs e)
public IAsyncResult BeginInvoke(object sender, ObjectDataSourceEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs : ObjectDataSourceMethodEventArgs {
private DataSourceSelectArguments _arguments
private bool _executingSelectCount
public DataSourceSelectArguments Arguments
public bool ExecutingSelectCount
public void .ctor(IOrderedDictionary inputParameters, DataSourceSelectArguments arguments, bool executingSelectCount)
public DataSourceSelectArguments get_Arguments()
public bool get_ExecutingSelectCount()
}
public System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ObjectDataSourceSelectingEventArgs e)
public IAsyncResult BeginInvoke(object sender, ObjectDataSourceSelectingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs : EventArgs {
private object _returnValue
private IDictionary _outputParameters
private Exception _exception
private bool _exceptionHandled
private int _affectedRows
public IDictionary OutputParameters
public Exception Exception
public bool ExceptionHandled
public object ReturnValue
public int AffectedRows
public void .ctor(object returnValue, IDictionary outputParameters)
public void .ctor(object returnValue, IDictionary outputParameters, Exception exception)
public IDictionary get_OutputParameters()
public Exception get_Exception()
public bool get_ExceptionHandled()
public void set_ExceptionHandled(bool value)
public object get_ReturnValue()
public int get_AffectedRows()
public void set_AffectedRows(int value)
}
public System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ObjectDataSourceStatusEventArgs e)
public IAsyncResult BeginInvoke(object sender, ObjectDataSourceStatusEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.ObjectDataSourceView : DataSourceView {
private ObjectDataSource owner
private HttpContext context
private Type objectType
private Type dataObjectType
private bool convertNullToDBNull
private bool enablePaging
private string dataObjectTypeName
private string filterExpression
private string maximumRowsParameterName
private string oldValuesParameterFormatString
private string deleteMethod
private string insertMethod
private string selectCountMethod
private string selectMethod
private string sortParameterName
private string startRowIndexParameterName
private string typeName
private string updateMethod
private bool isTrackingViewState
private ParameterCollection selectParameters
private ParameterCollection updateParameters
private ParameterCollection deleteParameters
private ParameterCollection insertParameters
private ParameterCollection filterParameters
private object DeletedEvent
private object DeletingEvent
private object FilteringEvent
private object InsertedEvent
private object InsertingEvent
private object ObjectCreatedEvent
private object ObjectCreatingEvent
private object ObjectDisposingEvent
private object SelectedEvent
private object SelectingEvent
private object UpdatedEvent
private object UpdatingEvent
private ConflictOptions conflictDetection
public bool CanDelete
public bool CanInsert
public bool CanPage
public bool CanRetrieveTotalRowCount
public bool CanSort
public bool CanUpdate
public ConflictOptions ConflictDetection
public bool ConvertNullToDBNull
public string DataObjectTypeName
public string DeleteMethod
public ParameterCollection DeleteParameters
public bool EnablePaging
public string FilterExpression
public ParameterCollection FilterParameters
public string InsertMethod
public ParameterCollection InsertParameters
public string MaximumRowsParameterName
public string OldValuesParameterFormatString
public string SelectCountMethod
public string SelectMethod
public ParameterCollection SelectParameters
public string SortParameterName
public string StartRowIndexParameterName
public string TypeName
public string UpdateMethod
public ParameterCollection UpdateParameters
private Type ObjectType
private Type DataObjectType
protected bool IsTrackingViewState
private bool System.Web.UI.IStateManager.IsTrackingViewState
public ParsingCulture ParsingCulture
public void .ctor(ObjectDataSource owner, string name, HttpContext context)
public void add_Deleted(ObjectDataSourceStatusEventHandler value)
public void remove_Deleted(ObjectDataSourceStatusEventHandler value)
public void add_Deleting(ObjectDataSourceMethodEventHandler value)
public void remove_Deleting(ObjectDataSourceMethodEventHandler value)
public void add_Filtering(ObjectDataSourceFilteringEventHandler value)
public void remove_Filtering(ObjectDataSourceFilteringEventHandler value)
public void add_Inserted(ObjectDataSourceStatusEventHandler value)
public void remove_Inserted(ObjectDataSourceStatusEventHandler value)
public void add_Inserting(ObjectDataSourceMethodEventHandler value)
public void remove_Inserting(ObjectDataSourceMethodEventHandler value)
public void add_ObjectCreated(ObjectDataSourceObjectEventHandler value)
public void remove_ObjectCreated(ObjectDataSourceObjectEventHandler value)
public void add_ObjectCreating(ObjectDataSourceObjectEventHandler value)
public void remove_ObjectCreating(ObjectDataSourceObjectEventHandler value)
public void add_ObjectDisposing(ObjectDataSourceDisposingEventHandler value)
public void remove_ObjectDisposing(ObjectDataSourceDisposingEventHandler value)
public void add_Selected(ObjectDataSourceStatusEventHandler value)
public void remove_Selected(ObjectDataSourceStatusEventHandler value)
public void add_Selecting(ObjectDataSourceSelectingEventHandler value)
public void remove_Selecting(ObjectDataSourceSelectingEventHandler value)
public void add_Updated(ObjectDataSourceStatusEventHandler value)
public void remove_Updated(ObjectDataSourceStatusEventHandler value)
public void add_Updating(ObjectDataSourceMethodEventHandler value)
public void remove_Updating(ObjectDataSourceMethodEventHandler value)
protected void OnDeleted(ObjectDataSourceStatusEventArgs e)
protected void OnDeleting(ObjectDataSourceMethodEventArgs e)
protected void OnFiltering(ObjectDataSourceFilteringEventArgs e)
protected void OnInserted(ObjectDataSourceStatusEventArgs e)
protected void OnInserting(ObjectDataSourceMethodEventArgs e)
protected void OnObjectCreated(ObjectDataSourceEventArgs e)
protected void OnObjectCreating(ObjectDataSourceEventArgs e)
protected void OnObjectDisposing(ObjectDataSourceDisposingEventArgs e)
protected void OnSelected(ObjectDataSourceStatusEventArgs e)
protected void OnSelecting(ObjectDataSourceSelectingEventArgs e)
protected void OnUpdated(ObjectDataSourceStatusEventArgs e)
protected void OnUpdating(ObjectDataSourceMethodEventArgs e)
public bool get_CanDelete()
public bool get_CanInsert()
public bool get_CanPage()
public bool get_CanRetrieveTotalRowCount()
public bool get_CanSort()
public bool get_CanUpdate()
public ConflictOptions get_ConflictDetection()
public void set_ConflictDetection(ConflictOptions value)
public bool get_ConvertNullToDBNull()
public void set_ConvertNullToDBNull(bool value)
public string get_DataObjectTypeName()
public void set_DataObjectTypeName(string value)
public string get_DeleteMethod()
public void set_DeleteMethod(string value)
public ParameterCollection get_DeleteParameters()
public bool get_EnablePaging()
public void set_EnablePaging(bool value)
public string get_FilterExpression()
public void set_FilterExpression(string value)
public ParameterCollection get_FilterParameters()
public string get_InsertMethod()
public void set_InsertMethod(string value)
public ParameterCollection get_InsertParameters()
public string get_MaximumRowsParameterName()
public void set_MaximumRowsParameterName(string value)
public string get_OldValuesParameterFormatString()
public void set_OldValuesParameterFormatString(string value)
public string get_SelectCountMethod()
public void set_SelectCountMethod(string value)
public string get_SelectMethod()
public void set_SelectMethod(string value)
public ParameterCollection get_SelectParameters()
public string get_SortParameterName()
public void set_SortParameterName(string value)
public string get_StartRowIndexParameterName()
public void set_StartRowIndexParameterName(string value)
public string get_TypeName()
public void set_TypeName(string value)
public string get_UpdateMethod()
public void set_UpdateMethod(string value)
public ParameterCollection get_UpdateParameters()
private Type get_ObjectType()
private Type get_DataObjectType()
public IEnumerable Select(DataSourceSelectArguments arguments)
public int Update(IDictionary keys, IDictionary values, IDictionary oldValues)
public int Delete(IDictionary keys, IDictionary oldValues)
public int Insert(IDictionary values)
protected int ExecuteInsert(IDictionary values)
protected int ExecuteDelete(IDictionary keys, IDictionary oldValues)
protected int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues)
private IDictionary BuildOldValuesList(IDictionary keys, IDictionary oldValues, bool keysWin)
protected internal IEnumerable ExecuteSelect(DataSourceSelectArguments arguments)
private int QueryTotalRowCount(IOrderedDictionary mergedParameters, DataSourceSelectArguments arguments)
private object InvokeSelect(string methodName, IOrderedDictionary paramValues)
private ObjectDataSourceStatusEventArgs InvokeMethod(MethodInfo method, IOrderedDictionary paramValues)
private MethodInfo GetObjectMethod(string methodName, IOrderedDictionary parameters, DataObjectMethodType methodType)
private MethodInfo ResolveDataObjectMethod(string methodName, IDictionary values, IDictionary oldValues, IOrderedDictionary& paramValues)
private Exception CreateMethodException(string methodName, IOrderedDictionary parameters)
private object CreateDataObject(IDictionary values)
private object CreateObjectInstance()
private void DisposeObjectInstance(object obj)
private object FindValueByName(string name, IDictionary values, bool format)
private IOrderedDictionary MergeParameterValues(ParameterCollection viewParams, IDictionary values, IDictionary oldValues)
private Object[] GetParameterArray(ParameterInfo[] methodParams, IOrderedDictionary viewParams, ArrayList& outParamInfos)
private object ConvertParameterWithTypeConverter(Object[] attributes, Type targetType, object value)
private object ConvertParameter(Type targetType, object value)
private object ConvertParameter(TypeCode targetType, object value)
private string FormatOldParameter(string name)
private void OnParametersChanged(object sender, EventArgs args)
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
protected bool get_IsTrackingViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
public ParsingCulture get_ParsingCulture()
public void set_ParsingCulture(ParsingCulture value)
}
public System.Web.UI.WebControls.Orientation : Enum {
public int value__
public Orientation Horizontal
public Orientation Vertical
}
public System.Web.UI.WebControls.PagedDataSource : object {
private int page_size
private int current_page_index
private int virtual_count
private bool allow_paging
private bool allow_custom_paging
private IEnumerable source
private bool allow_server_paging
public bool AllowCustomPaging
public bool AllowPaging
public int Count
public int CurrentPageIndex
public IEnumerable DataSource
public int DataSourceCount
public int FirstIndexInPage
public bool IsCustomPagingEnabled
public bool IsServerPagingEnabled
public bool IsFirstPage
public bool IsLastPage
public bool IsPagingEnabled
public bool IsReadOnly
public bool IsSynchronized
public int PageCount
public int PageSize
public object SyncRoot
public int VirtualCount
public bool AllowServerPaging
public bool get_AllowCustomPaging()
public void set_AllowCustomPaging(bool value)
public bool get_AllowPaging()
public void set_AllowPaging(bool value)
public int get_Count()
public int get_CurrentPageIndex()
public void set_CurrentPageIndex(int value)
public IEnumerable get_DataSource()
public void set_DataSource(IEnumerable value)
public int get_DataSourceCount()
public int get_FirstIndexInPage()
public bool get_IsCustomPagingEnabled()
public bool get_IsServerPagingEnabled()
public bool get_IsFirstPage()
public bool get_IsLastPage()
public bool get_IsPagingEnabled()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public int get_PageCount()
public int get_PageSize()
public void set_PageSize(int value)
public object get_SyncRoot()
public int get_VirtualCount()
public void set_VirtualCount(int value)
public bool get_AllowServerPaging()
public void set_AllowServerPaging(bool value)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors)
public string GetListName(PropertyDescriptor[] listAccessors)
private IEnumerator GetListEnum(IList list, int start, int end)
private IEnumerator GetEnumeratorEnum(IEnumerator e, int start, int end)
}
public System.Web.UI.WebControls.PagerButtons : Enum {
public int value__
public PagerButtons NextPrevious
public PagerButtons Numeric
public PagerButtons NextPreviousFirstLast
public PagerButtons NumericFirstLast
}
public System.Web.UI.WebControls.PagerMode : Enum {
public int value__
public PagerMode NextPrev
public PagerMode NumericPages
}
public System.Web.UI.WebControls.PagerPosition : Enum {
public int value__
public PagerPosition Bottom
public PagerPosition Top
public PagerPosition TopAndBottom
}
public System.Web.UI.WebControls.PagerSettings : object {
private object propertyChangedEvent
private StateBag ViewState
private Control ctrl
private EventHandlerList events
public string FirstPageImageUrl
public string FirstPageText
public string LastPageImageUrl
public string LastPageText
public PagerButtons Mode
public string NextPageImageUrl
public string NextPageText
public int PageButtonCount
public PagerPosition Position
public string PreviousPageImageUrl
public string PreviousPageText
public bool Visible
private bool System.Web.UI.IStateManager.IsTrackingViewState
public void add_PropertyChanged(EventHandler value)
public void remove_PropertyChanged(EventHandler value)
internal void .ctor(Control ctrl)
public string get_FirstPageImageUrl()
public void set_FirstPageImageUrl(string value)
public string get_FirstPageText()
public void set_FirstPageText(string value)
public string get_LastPageImageUrl()
public void set_LastPageImageUrl(string value)
public string get_LastPageText()
public void set_LastPageText(string value)
public PagerButtons get_Mode()
public void set_Mode(PagerButtons value)
public string get_NextPageImageUrl()
public void set_NextPageImageUrl(string value)
public string get_NextPageText()
public void set_NextPageText(string value)
public int get_PageButtonCount()
public void set_PageButtonCount(int value)
public PagerPosition get_Position()
public void set_Position(PagerPosition value)
public string get_PreviousPageImageUrl()
public void set_PreviousPageImageUrl(string value)
public string get_PreviousPageText()
public void set_PreviousPageText(string value)
public bool get_Visible()
public void set_Visible(bool value)
private void RaisePropertyChanged()
public string ToString()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
internal Table CreatePagerControl(int currentPage, int pageCount)
private TableCell CreateCell(string text, string image, string command, string argument)
}
public System.Web.UI.WebControls.Panel : WebControl {
private PanelStyle PanelStyle
public string BackImageUrl
public HorizontalAlign HorizontalAlign
public bool Wrap
public string DefaultButton
public ContentDirection Direction
public string GroupingText
public ScrollBars ScrollBars
public bool SupportsDisabledAttribute
protected void AddAttributesToRender(HtmlTextWriter writer)
private PanelStyle get_PanelStyle()
public string get_BackImageUrl()
public void set_BackImageUrl(string value)
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public bool get_Wrap()
public void set_Wrap(bool value)
public string get_DefaultButton()
public void set_DefaultButton(string value)
public ContentDirection get_Direction()
public void set_Direction(ContentDirection value)
public string get_GroupingText()
public void set_GroupingText(string value)
public ScrollBars get_ScrollBars()
public void set_ScrollBars(ScrollBars value)
public bool get_SupportsDisabledAttribute()
protected Style CreateControlStyle()
public void RenderBeginTag(HtmlTextWriter writer)
public void RenderEndTag(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.PanelStyle : Style {
public string BackImageUrl
public ContentDirection Direction
public HorizontalAlign HorizontalAlign
public ScrollBars ScrollBars
public bool Wrap
public void .ctor(StateBag bag)
public string get_BackImageUrl()
public void set_BackImageUrl(string value)
public ContentDirection get_Direction()
public void set_Direction(ContentDirection value)
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public ScrollBars get_ScrollBars()
public void set_ScrollBars(ScrollBars value)
public bool get_Wrap()
public void set_Wrap(bool value)
public void CopyFrom(Style s)
public void MergeWith(Style s)
public void Reset()
}
public System.Web.UI.WebControls.Parameter : object {
private StateBag viewState
private bool isTrackingViewState
private ParameterCollection _owner
private bool System.Web.UI.IStateManager.IsTrackingViewState
public string DefaultValue
public ParameterDirection Direction
public string Name
public bool ConvertEmptyStringToNull
public DbType DbType
public int Size
public TypeCode Type
protected StateBag ViewState
protected bool IsTrackingViewState
protected void .ctor(Parameter original)
public void .ctor(string name)
public void .ctor(string name, TypeCode type)
public void .ctor(string name, TypeCode type, string defaultValue)
public void .ctor(string name, DbType dbType)
public void .ctor(string name, DbType dbType, string defaultValue)
public TypeCode ConvertDbTypeToTypeCode(DbType dbType)
public DbType ConvertTypeCodeToDbType(TypeCode typeCode)
public DbType GetDatabaseType()
protected Parameter Clone()
protected void OnParameterChanged()
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
private object System.ICloneable.Clone()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
public string ToString()
public string get_DefaultValue()
public void set_DefaultValue(string value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public string get_Name()
public void set_Name(string value)
public bool get_ConvertEmptyStringToNull()
public void set_ConvertEmptyStringToNull(bool value)
public DbType get_DbType()
public void set_DbType(DbType value)
public int get_Size()
public void set_Size(int value)
public TypeCode get_Type()
public void set_Type(TypeCode value)
protected StateBag get_ViewState()
protected bool get_IsTrackingViewState()
protected internal object Evaluate(HttpContext context, Control control)
internal void UpdateValue(HttpContext context, Control control)
internal object GetValue(HttpContext context, Control control)
internal object ConvertValue(object val)
protected internal void SetDirty()
internal void SetOwnerCollection(ParameterCollection own)
}
public System.Web.UI.WebControls.ParameterCollection : StateManagedCollection {
private Type[] _knownTypes
private EventHandler _parametersChanged
public Parameter Item
public Parameter Item
public int Add(Parameter parameter)
public int Add(string name, string value)
public int Add(string name, TypeCode type, string value)
public int Add(string name, DbType dbType, string value)
protected object CreateKnownType(int index)
protected Type[] GetKnownTypes()
public IOrderedDictionary GetValues(HttpContext context, Control control)
public void UpdateValues(HttpContext context, Control control)
public void Insert(int index, Parameter parameter)
protected void OnClearComplete()
protected void OnInsert(int index, object value)
protected void OnInsertComplete(int index, object value)
protected void OnParametersChanged(EventArgs e)
protected void OnValidate(object o)
public void Remove(Parameter parameter)
public void RemoveAt(int index)
protected void SetDirtyObject(object o)
internal void CallOnParameterChanged()
private int IndexOfString(string name)
public Parameter get_Item(int index)
public void set_Item(int index, Parameter value)
public Parameter get_Item(string name)
public void set_Item(string name, Parameter value)
public void add_ParametersChanged(EventHandler value)
public void remove_ParametersChanged(EventHandler value)
public bool Contains(Parameter parameter)
public void CopyTo(Parameter[] parameterArray, int index)
public int IndexOf(Parameter parameter)
protected void OnRemoveComplete(int index, object value)
}
public System.Web.UI.WebControls.ParsingCulture : Enum {
public int value__
public ParsingCulture Current
public ParsingCulture Invariant
}
public System.Web.UI.WebControls.PasswordRecovery : CompositeControl {
private object answerLookupErrorEvent
private object sendingMailEvent
private object sendMailErrorEvent
private object userLookupErrorEvent
private object verifyingAnswerEvent
private object verifyingUserEvent
public string SubmitButtonCommandName
private bool renderOuterTable
private TableItemStyle _failureTextStyle
private TableItemStyle _hyperLinkStyle
private TableItemStyle _instructionTextStyle
private TableItemStyle _labelStyle
private Style _submitButtonStyle
private TableItemStyle _successTextStyle
private Style _textBoxStyle
private TableItemStyle _titleTextStyle
private Style _validatorTextStyle
private MailDefinition _mailDefinition
private MembershipProvider _provider
private ITemplate _questionTemplate
private ITemplate _successTemplate
private ITemplate _userNameTemplate
private QuestionContainer _questionTemplateContainer
private SuccessContainer _successTemplateContainer
private UserNameContainer _userNameTemplateContainer
private PasswordReciveryStep _currentStep
private string _username
private string _answer
private EventHandlerList events
public string Answer
public string AnswerLabelText
public string AnswerRequiredErrorMessage
public int BorderPadding
public string GeneralFailureText
public string HelpPageIconUrl
public string HelpPageText
public string HelpPageUrl
public MailDefinition MailDefinition
public string MembershipProvider
public string Question
public string QuestionFailureText
public string QuestionInstructionText
public string QuestionLabelText
public string QuestionTitleText
public bool RenderOuterTable
public string SubmitButtonImageUrl
public string SubmitButtonText
public ButtonType SubmitButtonType
public string SuccessPageUrl
public string SuccessText
public LoginTextLayout TextLayout
public string UserName
public string UserNameFailureText
public string UserNameInstructionText
public string UserNameLabelText
public string UserNameRequiredErrorMessage
public string UserNameTitleText
public ITemplate QuestionTemplate
public Control QuestionTemplateContainer
public ITemplate SuccessTemplate
public Control SuccessTemplateContainer
public ITemplate UserNameTemplate
public Control UserNameTemplateContainer
public TableItemStyle FailureTextStyle
public TableItemStyle HyperLinkStyle
public TableItemStyle InstructionTextStyle
public TableItemStyle LabelStyle
public Style SubmitButtonStyle
public TableItemStyle SuccessTextStyle
public Style TextBoxStyle
public TableItemStyle TitleTextStyle
public Style ValidatorTextStyle
protected HtmlTextWriterTag TagKey
internal MembershipProvider MembershipProviderInternal
public void add_AnswerLookupError(EventHandler value)
public void remove_AnswerLookupError(EventHandler value)
public void add_SendingMail(MailMessageEventHandler value)
public void remove_SendingMail(MailMessageEventHandler value)
public void add_SendMailError(SendMailErrorEventHandler value)
public void remove_SendMailError(SendMailErrorEventHandler value)
public void add_UserLookupError(EventHandler value)
public void remove_UserLookupError(EventHandler value)
public void add_VerifyingAnswer(LoginCancelEventHandler value)
public void remove_VerifyingAnswer(LoginCancelEventHandler value)
public void add_VerifyingUser(LoginCancelEventHandler value)
public void remove_VerifyingUser(LoginCancelEventHandler value)
public string get_Answer()
public string get_AnswerLabelText()
public void set_AnswerLabelText(string value)
public string get_AnswerRequiredErrorMessage()
public void set_AnswerRequiredErrorMessage(string value)
public int get_BorderPadding()
public void set_BorderPadding(int value)
public string get_GeneralFailureText()
public void set_GeneralFailureText(string value)
public string get_HelpPageIconUrl()
public void set_HelpPageIconUrl(string value)
public string get_HelpPageText()
public void set_HelpPageText(string value)
public string get_HelpPageUrl()
public void set_HelpPageUrl(string value)
public MailDefinition get_MailDefinition()
public string get_MembershipProvider()
public void set_MembershipProvider(string value)
public string get_Question()
private void set_Question(string value)
public string get_QuestionFailureText()
public void set_QuestionFailureText(string value)
public string get_QuestionInstructionText()
public void set_QuestionInstructionText(string value)
public string get_QuestionLabelText()
public void set_QuestionLabelText(string value)
public string get_QuestionTitleText()
public void set_QuestionTitleText(string value)
public bool get_RenderOuterTable()
public void set_RenderOuterTable(bool value)
public string get_SubmitButtonImageUrl()
public void set_SubmitButtonImageUrl(string value)
public string get_SubmitButtonText()
public void set_SubmitButtonText(string value)
public ButtonType get_SubmitButtonType()
public void set_SubmitButtonType(ButtonType value)
public string get_SuccessPageUrl()
public void set_SuccessPageUrl(string value)
public string get_SuccessText()
public void set_SuccessText(string value)
public LoginTextLayout get_TextLayout()
public void set_TextLayout(LoginTextLayout value)
public string get_UserName()
public void set_UserName(string value)
public string get_UserNameFailureText()
public void set_UserNameFailureText(string value)
public string get_UserNameInstructionText()
public void set_UserNameInstructionText(string value)
public string get_UserNameLabelText()
public void set_UserNameLabelText(string value)
public string get_UserNameRequiredErrorMessage()
public void set_UserNameRequiredErrorMessage(string value)
public string get_UserNameTitleText()
public void set_UserNameTitleText(string value)
public ITemplate get_QuestionTemplate()
public void set_QuestionTemplate(ITemplate value)
public Control get_QuestionTemplateContainer()
public ITemplate get_SuccessTemplate()
public void set_SuccessTemplate(ITemplate value)
public Control get_SuccessTemplateContainer()
public ITemplate get_UserNameTemplate()
public void set_UserNameTemplate(ITemplate value)
public Control get_UserNameTemplateContainer()
public TableItemStyle get_FailureTextStyle()
public TableItemStyle get_HyperLinkStyle()
public TableItemStyle get_InstructionTextStyle()
public TableItemStyle get_LabelStyle()
public Style get_SubmitButtonStyle()
public TableItemStyle get_SuccessTextStyle()
public Style get_TextBoxStyle()
public TableItemStyle get_TitleTextStyle()
public Style get_ValidatorTextStyle()
protected HtmlTextWriterTag get_TagKey()
internal MembershipProvider get_MembershipProviderInternal()
protected internal void CreateChildControls()
protected internal void Render(HtmlTextWriter writer)
protected internal void LoadControlState(object savedState)
protected internal object SaveControlState()
protected void TrackViewState()
protected void LoadViewState(object savedState)
protected object SaveViewState()
private void ProcessCommand(CommandEventArgs args)
private void ProcessUserName()
private void ProcessUserAnswer()
private void GenerateAndSendEmail()
private void InitMemberShipProvider()
private void SendPasswordByMail(string username, string password)
protected void OnAnswerLookupError(EventArgs e)
protected bool OnBubbleEvent(object source, EventArgs e)
protected internal void OnInit(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected void OnSendingMail(MailMessageEventArgs e)
protected void OnSendMailError(SendMailErrorEventArgs e)
protected void OnUserLookupError(EventArgs e)
protected void OnVerifyingAnswer(LoginCancelEventArgs e)
protected void OnVerifyingUser(LoginCancelEventArgs e)
private void UserName_TextChanged(object sender, EventArgs e)
private void Answer_TextChanged(object sender, EventArgs e)
protected void SetDesignModeState(IDictionary data)
}
public System.Web.UI.WebControls.PathDirection : Enum {
public int value__
public PathDirection RootToCurrent
public PathDirection CurrentToRoot
}
public System.Web.UI.WebControls.PlaceHolder : Control {
private bool <EnableTheming>k__BackingField
public bool EnableTheming
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
}
public System.Web.UI.WebControls.PlaceHolderControlBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
}
public System.Web.UI.WebControls.PolygonHotSpot : HotSpot {
protected internal string MarkupName
public string Coordinates
public string GetCoordinates()
protected internal string get_MarkupName()
public string get_Coordinates()
public void set_Coordinates(string value)
}
public System.Web.UI.WebControls.ProfileParameter : Parameter {
public string PropertyName
protected void .ctor(ProfileParameter original)
public void .ctor(string name, string propertyName)
public void .ctor(string name, TypeCode type, string propertyName)
public void .ctor(string name, DbType dbType, string propertyName)
protected Parameter Clone()
protected internal object Evaluate(HttpContext context, Control control)
public string get_PropertyName()
public void set_PropertyName(string value)
}
public System.Web.UI.WebControls.QueryExtensions : object {
public IQueryable`1<T> SortBy(IQueryable`1<T> source, string sortExpression)
}
public System.Web.UI.WebControls.QueryStringParameter : Parameter {
public string QueryStringField
public bool ValidateInput
protected void .ctor(QueryStringParameter original)
public void .ctor(string name, string queryStringField)
public void .ctor(string name, TypeCode type, string queryStringField)
public void .ctor(string name, DbType dbType, string queryStringField)
protected Parameter Clone()
protected internal object Evaluate(HttpContext context, Control control)
public string get_QueryStringField()
public void set_QueryStringField(string value)
public bool get_ValidateInput()
public void set_ValidateInput(bool value)
}
public System.Web.UI.WebControls.RadioButton : CheckBox {
public string GroupName
internal string NameAttribute
internal string ValueAttribute
public string get_GroupName()
public void set_GroupName(string value)
internal string get_NameAttribute()
internal string get_ValueAttribute()
internal void set_ValueAttribute(string value)
internal void InternalAddAttributesToRender(HtmlTextWriter w, bool enabled)
protected internal void OnPreRender(EventArgs e)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
}
public System.Web.UI.WebControls.RadioButtonList : ListControl {
private short tabIndex
public int CellPadding
public int CellSpacing
public int RepeatColumns
public RepeatDirection RepeatDirection
public RepeatLayout RepeatLayout
public TextAlign TextAlign
protected bool HasFooter
protected bool HasHeader
protected bool HasSeparators
protected int RepeatedItemCount
private bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
private bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
private bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
private int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
public bool RenderWhenDataEmpty
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public int get_RepeatColumns()
public void set_RepeatColumns(int value)
public RepeatDirection get_RepeatDirection()
public void set_RepeatDirection(RepeatDirection value)
public RepeatLayout get_RepeatLayout()
public void set_RepeatLayout(RepeatLayout value)
public TextAlign get_TextAlign()
public void set_TextAlign(TextAlign value)
protected bool get_HasFooter()
protected bool get_HasHeader()
protected bool get_HasSeparators()
protected int get_RepeatedItemCount()
private bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasFooter()
private bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasHeader()
private bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasSeparators()
private int System.Web.UI.WebControls.IRepeatInfoUser.get_RepeatedItemCount()
protected Style CreateControlStyle()
protected Control FindControl(string id, int pathOffset)
protected Style GetItemStyle(ListItemType itemType, int repeatIndex)
protected void RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
private Style System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType itemType, int repeatIndex)
private void System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer)
protected internal void Render(HtmlTextWriter writer)
public bool get_RenderWhenDataEmpty()
public void set_RenderWhenDataEmpty(bool value)
}
public System.Web.UI.WebControls.RangeValidator : BaseCompareValidator {
public string MaximumValue
public string MinimumValue
public string get_MaximumValue()
public void set_MaximumValue(string value)
public string get_MinimumValue()
public void set_MinimumValue(string value)
protected void AddAttributesToRender(HtmlTextWriter writer)
protected bool ControlPropertiesValid()
protected bool EvaluateIsValid()
}
public System.Web.UI.WebControls.RectangleHotSpot : HotSpot {
protected internal string MarkupName
public int Left
public int Top
public int Right
public int Bottom
public string GetCoordinates()
protected internal string get_MarkupName()
public int get_Left()
public void set_Left(int value)
public int get_Top()
public void set_Top(int value)
public int get_Right()
public void set_Right(int value)
public int get_Bottom()
public void set_Bottom(int value)
}
public System.Web.UI.WebControls.RegularExpressionValidator : BaseValidator {
public string ValidationExpression
public Nullable`1<int> MatchTimeout
protected void AddAttributesToRender(HtmlTextWriter writer)
protected bool EvaluateIsValid()
public string get_ValidationExpression()
public void set_ValidationExpression(string value)
public Nullable`1<int> get_MatchTimeout()
public void set_MatchTimeout(Nullable`1<int> value)
}
public System.Web.UI.WebControls.RepeatDirection : Enum {
public int value__
public RepeatDirection Horizontal
public RepeatDirection Vertical
}
public System.Web.UI.WebControls.Repeater : Control {
private object dataSource
private IDataSource boundDataSource
private bool initialized
private bool preRendered
private bool requiresDataBinding
private DataSourceSelectArguments selectArguments
private IEnumerable data
private RepeaterItemCollection itemscol
private ArrayList items
private ITemplate alt_itm_tmpl
private ITemplate footer_tmpl
private ITemplate header_tmpl
private ITemplate item_tmpl
private ITemplate separator_tmpl
private object ItemCommandEvent
private object ItemCreatedEvent
private object ItemDataBoundEvent
public ControlCollection Controls
public RepeaterItemCollection Items
public string DataMember
public object DataSource
public string DataSourceID
public bool EnableTheming
public ITemplate AlternatingItemTemplate
public ITemplate FooterTemplate
public ITemplate HeaderTemplate
public ITemplate ItemTemplate
public ITemplate SeparatorTemplate
protected bool Initialized
protected bool IsBoundUsingDataSourceID
protected bool RequiresDataBinding
protected DataSourceSelectArguments SelectArguments
public string ItemType
public string SelectMethod
protected internal void CreateChildControls()
protected void OnDataBinding(EventArgs e)
private void DoItem(int i, ListItemType t, object d, bool databind)
protected void CreateControlHierarchy(bool useDataSource)
public void DataBind()
protected RepeaterItem CreateItem(int itemIndex, ListItemType itemType)
protected void InitializeItem(RepeaterItem item)
protected bool OnBubbleEvent(object sender, EventArgs e)
public ControlCollection get_Controls()
public RepeaterItemCollection get_Items()
public string get_DataMember()
public void set_DataMember(string value)
public object get_DataSource()
public void set_DataSource(object value)
public string get_DataSourceID()
public void set_DataSourceID(string value)
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
public ITemplate get_AlternatingItemTemplate()
public void set_AlternatingItemTemplate(ITemplate value)
public ITemplate get_FooterTemplate()
public void set_FooterTemplate(ITemplate value)
public ITemplate get_HeaderTemplate()
public void set_HeaderTemplate(ITemplate value)
public ITemplate get_ItemTemplate()
public void set_ItemTemplate(ITemplate value)
public ITemplate get_SeparatorTemplate()
public void set_SeparatorTemplate(ITemplate value)
protected void OnItemCommand(RepeaterCommandEventArgs e)
public void add_ItemCommand(RepeaterCommandEventHandler value)
public void remove_ItemCommand(RepeaterCommandEventHandler value)
protected void OnItemCreated(RepeaterItemEventArgs e)
public void add_ItemCreated(RepeaterItemEventHandler value)
public void remove_ItemCreated(RepeaterItemEventHandler value)
protected void OnItemDataBound(RepeaterItemEventArgs e)
public void add_ItemDataBound(RepeaterItemEventHandler value)
public void remove_ItemDataBound(RepeaterItemEventHandler value)
protected bool get_Initialized()
protected bool get_IsBoundUsingDataSourceID()
protected bool get_RequiresDataBinding()
protected void set_RequiresDataBinding(bool value)
protected DataSourceSelectArguments get_SelectArguments()
protected DataSourceSelectArguments CreateDataSourceSelectArguments()
protected void EnsureDataBound()
private void SelectCallback(IEnumerable data)
protected IEnumerable GetData()
protected void OnDataPropertyChanged()
protected void OnDataSourceViewChanged(object sender, EventArgs e)
protected internal void OnInit(EventArgs e)
private void OnPagePreLoad(object sender, EventArgs e)
protected internal void OnLoad(EventArgs e)
private void Initialize()
protected internal void OnPreRender(EventArgs e)
private void ConnectToDataSource()
public string get_ItemType()
public void set_ItemType(string value)
public string get_SelectMethod()
public void set_SelectMethod(string value)
public void add_CallingDataMethods(CallingDataMethodsEventHandler value)
public void remove_CallingDataMethods(CallingDataMethodsEventHandler value)
public void add_CreatingModelDataSource(CreatingModelDataSourceEventHandler value)
public void remove_CreatingModelDataSource(CreatingModelDataSourceEventHandler value)
}
public System.Web.UI.WebControls.RepeaterCommandEventArgs : CommandEventArgs {
private RepeaterItem item
private object commandSource
public RepeaterItem Item
public object CommandSource
public void .ctor(RepeaterItem item, object commandSource, CommandEventArgs originalArgs)
public RepeaterItem get_Item()
public object get_CommandSource()
}
public System.Web.UI.WebControls.RepeaterCommandEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object source, RepeaterCommandEventArgs e)
public IAsyncResult BeginInvoke(object source, RepeaterCommandEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.RepeaterItem : Control {
private object data_item
private int idx
private ListItemType type
public object DataItem
public int ItemIndex
public ListItemType ItemType
private int System.Web.UI.IDataItemContainer.DataItemIndex
private int System.Web.UI.IDataItemContainer.DisplayIndex
public void .ctor(int itemIndex, ListItemType itemType)
protected bool OnBubbleEvent(object source, EventArgs e)
public object get_DataItem()
public void set_DataItem(object value)
public int get_ItemIndex()
public ListItemType get_ItemType()
private int System.Web.UI.IDataItemContainer.get_DataItemIndex()
private int System.Web.UI.IDataItemContainer.get_DisplayIndex()
}
public System.Web.UI.WebControls.RepeaterItemCollection : object {
private ArrayList l
public int Count
public bool IsReadOnly
public bool IsSynchronized
public RepeaterItem Item
public object SyncRoot
public void .ctor(ArrayList items)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public RepeaterItem get_Item(int index)
public object get_SyncRoot()
}
public System.Web.UI.WebControls.RepeaterItemEventArgs : EventArgs {
private RepeaterItem item
public RepeaterItem Item
public void .ctor(RepeaterItem item)
public RepeaterItem get_Item()
}
public System.Web.UI.WebControls.RepeaterItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, RepeaterItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, RepeaterItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.RepeatInfo : object {
private bool outer_table_implied
private int repeat_cols
private RepeatDirection dir
private RepeatLayout layout
private string caption
private TableCaptionAlign captionAlign
private bool useAccessibleHeader
public bool OuterTableImplied
public int RepeatColumns
public RepeatDirection RepeatDirection
public RepeatLayout RepeatLayout
public string Caption
public TableCaptionAlign CaptionAlign
public bool UseAccessibleHeader
public void RenderRepeater(HtmlTextWriter writer, IRepeatInfoUser user, Style controlStyle, WebControl baseControl)
private void RenderBr(HtmlTextWriter w)
private void RenderList(HtmlTextWriter w, IRepeatInfoUser user, Style controlStyle, WebControl baseControl)
private void RenderVert(HtmlTextWriter w, IRepeatInfoUser user, Style controlStyle, WebControl baseControl)
private void RenderHoriz(HtmlTextWriter w, IRepeatInfoUser user, Style controlStyle, WebControl baseControl)
private int index_vert(int rows, int cols, int r, int c, int items)
private void RenderBeginTag(HtmlTextWriter w, Style s, WebControl wc)
public bool get_OuterTableImplied()
public void set_OuterTableImplied(bool value)
public int get_RepeatColumns()
public void set_RepeatColumns(int value)
public RepeatDirection get_RepeatDirection()
public void set_RepeatDirection(RepeatDirection value)
public RepeatLayout get_RepeatLayout()
public void set_RepeatLayout(RepeatLayout value)
internal void PrintValues(IRepeatInfoUser riu)
public string get_Caption()
public void set_Caption(string value)
public TableCaptionAlign get_CaptionAlign()
public void set_CaptionAlign(TableCaptionAlign value)
public bool get_UseAccessibleHeader()
public void set_UseAccessibleHeader(bool value)
}
public System.Web.UI.WebControls.RepeatLayout : Enum {
public int value__
public RepeatLayout Table
public RepeatLayout Flow
public RepeatLayout UnorderedList
public RepeatLayout OrderedList
}
public System.Web.UI.WebControls.RequiredFieldValidator : BaseValidator {
public string InitialValue
protected void AddAttributesToRender(HtmlTextWriter writer)
protected bool EvaluateIsValid()
public string get_InitialValue()
public void set_InitialValue(string value)
}
public System.Web.UI.WebControls.RoleGroup : object {
private ITemplate contentTemplate
private String[] roles
public ITemplate ContentTemplate
public String[] Roles
public ITemplate get_ContentTemplate()
public void set_ContentTemplate(ITemplate value)
public String[] get_Roles()
public void set_Roles(String[] value)
public bool ContainsUser(IPrincipal user)
public string ToString()
}
public System.Web.UI.WebControls.RoleGroupCollection : CollectionBase {
public RoleGroup Item
public RoleGroup get_Item(int index)
public void Add(RoleGroup group)
public bool Contains(RoleGroup group)
public void CopyTo(RoleGroup[] array, int index)
public RoleGroup GetMatchingRoleGroup(IPrincipal user)
public int IndexOf(RoleGroup group)
public void Insert(int index, RoleGroup group)
protected void OnValidate(object value)
public void Remove(RoleGroup group)
}
public System.Web.UI.WebControls.RouteParameter : Parameter {
private string routeKey
public string RouteKey
public string get_RouteKey()
public void set_RouteKey(string value)
protected void .ctor(RouteParameter original)
public void .ctor(string name, string routeKey)
public void .ctor(string name, DbType dbType, string routeKey)
public void .ctor(string name, TypeCode type, string routeKey)
protected Parameter Clone()
protected internal object Evaluate(HttpContext context, Control control)
}
public System.Web.UI.WebControls.ScrollBars : Enum {
public int value__
public ScrollBars None
public ScrollBars Horizontal
public ScrollBars Vertical
public ScrollBars Both
public ScrollBars Auto
}
public System.Web.UI.WebControls.SelectedDatesCollection : object {
private ArrayList l
public int Count
public bool IsReadOnly
public bool IsSynchronized
public DateTime Item
public object SyncRoot
public void .ctor(ArrayList dateList)
public void Add(DateTime date)
public void Clear()
public bool Contains(DateTime date)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void Remove(DateTime date)
public void SelectRange(DateTime fromDate, DateTime toDate)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public DateTime get_Item(int index)
public object get_SyncRoot()
}
public System.Web.UI.WebControls.SelectResult : object {
public IEnumerable Results
public int TotalRowCount
public void .ctor(int totalRowCount, IEnumerable results)
public IEnumerable get_Results()
public int get_TotalRowCount()
}
public System.Web.UI.WebControls.SendMailErrorEventArgs : EventArgs {
private Exception exception
private bool exceptionHandled
public Exception Exception
public bool Handled
public void .ctor(Exception e)
public Exception get_Exception()
public void set_Exception(Exception value)
public bool get_Handled()
public void set_Handled(bool value)
}
public System.Web.UI.WebControls.SendMailErrorEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SendMailErrorEventArgs e)
public IAsyncResult BeginInvoke(object sender, SendMailErrorEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.ServerValidateEventArgs : EventArgs {
private bool isValid
private string value
public string Value
public bool IsValid
public void .ctor(string value, bool isValid)
public string get_Value()
public bool get_IsValid()
public void set_IsValid(bool value)
}
public System.Web.UI.WebControls.ServerValidateEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object source, ServerValidateEventArgs args)
public IAsyncResult BeginInvoke(object source, ServerValidateEventArgs args, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.SessionParameter : Parameter {
public string SessionField
protected void .ctor(SessionParameter original)
public void .ctor(string name, string sessionField)
public void .ctor(string name, TypeCode type, string sessionField)
public void .ctor(string name, DbType dbType, string sessionField)
protected Parameter Clone()
protected internal object Evaluate(HttpContext context, Control control)
public string get_SessionField()
public void set_SessionField(string value)
}
public System.Web.UI.WebControls.SiteMapDataSource : HierarchicalDataSourceControl {
private String[] emptyNames
private SiteMapProvider provider
private bool System.ComponentModel.IListSource.ContainsListCollection
public bool ContainsListCollection
public SiteMapProvider Provider
public string SiteMapProvider
public string StartingNodeUrl
public int StartingNodeOffset
public bool StartFromCurrentNode
public bool ShowStartingNode
public ICollection GetViewNames()
private IList System.ComponentModel.IListSource.GetList()
private bool System.ComponentModel.IListSource.get_ContainsListCollection()
public IList GetList()
public bool get_ContainsListCollection()
private DataSourceView System.Web.UI.IDataSource.GetView(string viewName)
private ICollection System.Web.UI.IDataSource.GetViewNames()
private void System.Web.UI.IDataSource.add_DataSourceChanged(EventHandler value)
private void System.Web.UI.IDataSource.remove_DataSourceChanged(EventHandler value)
public SiteMapProvider get_Provider()
public void set_Provider(SiteMapProvider value)
public string get_SiteMapProvider()
public void set_SiteMapProvider(string value)
public string get_StartingNodeUrl()
public void set_StartingNodeUrl(string value)
public int get_StartingNodeOffset()
public void set_StartingNodeOffset(int value)
public bool get_StartFromCurrentNode()
public void set_StartFromCurrentNode(bool value)
public bool get_ShowStartingNode()
public void set_ShowStartingNode(bool value)
public DataSourceView GetView(string viewName)
protected HierarchicalDataSourceView GetHierarchicalView(string viewPath)
private SiteMapNode GetStartNode(string viewPath)
private string MapUrl(string url)
}
public System.Web.UI.WebControls.SiteMapDataSourceView : DataSourceView {
private SiteMapNodeCollection collection
public void .ctor(SiteMapDataSource owner, string name, SiteMapNode node)
public void .ctor(SiteMapDataSource owner, string name, SiteMapNodeCollection collection)
public IEnumerable Select(DataSourceSelectArguments arguments)
protected internal IEnumerable ExecuteSelect(DataSourceSelectArguments arguments)
protected void OnDataSourceViewChanged(EventArgs e)
}
public System.Web.UI.WebControls.SiteMapHierarchicalDataSourceView : HierarchicalDataSourceView {
private SiteMapNodeCollection collection
public void .ctor(SiteMapNode node)
public void .ctor(SiteMapNodeCollection collection)
public IHierarchicalEnumerable Select()
}
public System.Web.UI.WebControls.SiteMapNodeItem : WebControl {
private int itemIndex
private SiteMapNodeItemType itemType
private SiteMapNode node
public int ItemIndex
public SiteMapNodeItemType ItemType
public SiteMapNode SiteMapNode
private object System.Web.UI.IDataItemContainer.DataItem
private int System.Web.UI.IDataItemContainer.DataItemIndex
private int System.Web.UI.IDataItemContainer.DisplayIndex
public void .ctor(int itemIndex, SiteMapNodeItemType itemType)
protected internal void SetItemType(SiteMapNodeItemType itemType)
public int get_ItemIndex()
public SiteMapNodeItemType get_ItemType()
public SiteMapNode get_SiteMapNode()
public void set_SiteMapNode(SiteMapNode value)
private object System.Web.UI.IDataItemContainer.get_DataItem()
private int System.Web.UI.IDataItemContainer.get_DataItemIndex()
private int System.Web.UI.IDataItemContainer.get_DisplayIndex()
}
public System.Web.UI.WebControls.SiteMapNodeItemEventArgs : EventArgs {
private SiteMapNodeItem _item
public SiteMapNodeItem Item
public void .ctor(SiteMapNodeItem item)
public SiteMapNodeItem get_Item()
}
public System.Web.UI.WebControls.SiteMapNodeItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SiteMapNodeItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, SiteMapNodeItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.SiteMapNodeItemType : Enum {
public int value__
public SiteMapNodeItemType Root
public SiteMapNodeItemType Parent
public SiteMapNodeItemType Current
public SiteMapNodeItemType PathSeparator
}
public System.Web.UI.WebControls.SiteMapPath : CompositeControl {
private SiteMapProvider provider
private Style currentNodeStyle
private Style nodeStyle
private Style pathSeparatorStyle
private Style rootNodeStyle
private ITemplate currentNodeTemplate
private ITemplate nodeTemplate
private ITemplate pathSeparatorTemplate
private ITemplate rootNodeTemplate
private object ItemCreatedEvent
private object ItemDataBoundEvent
public Style CurrentNodeStyle
public ITemplate CurrentNodeTemplate
public Style NodeStyle
public ITemplate NodeTemplate
public int ParentLevelsDisplayed
public PathDirection PathDirection
public string PathSeparator
public Style PathSeparatorStyle
public ITemplate PathSeparatorTemplate
public SiteMapProvider Provider
public bool RenderCurrentNodeAsLink
public Style RootNodeStyle
public ITemplate RootNodeTemplate
public bool ShowToolTips
public string SiteMapProvider
public string SkipLinkText
public void add_ItemCreated(SiteMapNodeItemEventHandler value)
public void remove_ItemCreated(SiteMapNodeItemEventHandler value)
public void add_ItemDataBound(SiteMapNodeItemEventHandler value)
public void remove_ItemDataBound(SiteMapNodeItemEventHandler value)
protected void OnItemCreated(SiteMapNodeItemEventArgs e)
protected void OnItemDataBound(SiteMapNodeItemEventArgs e)
public Style get_CurrentNodeStyle()
public ITemplate get_CurrentNodeTemplate()
public void set_CurrentNodeTemplate(ITemplate value)
public Style get_NodeStyle()
public ITemplate get_NodeTemplate()
public void set_NodeTemplate(ITemplate value)
public int get_ParentLevelsDisplayed()
public void set_ParentLevelsDisplayed(int value)
public PathDirection get_PathDirection()
public void set_PathDirection(PathDirection value)
public string get_PathSeparator()
public void set_PathSeparator(string value)
public Style get_PathSeparatorStyle()
public ITemplate get_PathSeparatorTemplate()
public void set_PathSeparatorTemplate(ITemplate value)
public SiteMapProvider get_Provider()
public void set_Provider(SiteMapProvider value)
public bool get_RenderCurrentNodeAsLink()
public void set_RenderCurrentNodeAsLink(bool value)
public Style get_RootNodeStyle()
public ITemplate get_RootNodeTemplate()
public void set_RootNodeTemplate(ITemplate value)
public bool get_ShowToolTips()
public void set_ShowToolTips(bool value)
public string get_SiteMapProvider()
public void set_SiteMapProvider(string value)
public string get_SkipLinkText()
public void set_SkipLinkText(string value)
private void UpdateControls()
public void DataBind()
protected internal void CreateChildControls()
protected void CreateControlHierarchy()
protected void InitializeItem(SiteMapNodeItem item)
private HyperLink CreateHyperLink(SiteMapNodeItem item)
private Literal CreateLiteral(SiteMapNodeItem item)
protected void LoadViewState(object savedState)
protected void OnDataBinding(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
protected internal void RenderContents(HtmlTextWriter writer)
protected object SaveViewState()
protected void TrackViewState()
}
internal System.Web.UI.WebControls.SiteMapViewType : Enum {
public int value__
public SiteMapViewType Automatic
public SiteMapViewType Flat
public SiteMapViewType Path
public SiteMapViewType Tree
}
public System.Web.UI.WebControls.SortDirection : Enum {
public int value__
public SortDirection Ascending
public SortDirection Descending
}
public System.Web.UI.WebControls.SqlDataSource : DataSourceControl {
private String[] emptyNames
private string providerName
private string connectionString
private SqlDataSourceMode dataSourceMode
private int cacheDuration
private bool enableCaching
private string cacheKeyDependency
private string sqlCacheDependency
private DataSourceCacheManager cache
private DataSourceCacheExpiry cacheExpirationPolicy
private SqlDataSourceView view
public bool CancelSelectOnNullParameter
public ConflictOptions ConflictDetection
public SqlDataSourceCommandType DeleteCommandType
public SqlDataSourceCommandType InsertCommandType
public SqlDataSourceCommandType SelectCommandType
public SqlDataSourceCommandType UpdateCommandType
public string OldValuesParameterFormatString
public string SortParameterName
public string FilterExpression
public string ProviderName
public string ConnectionString
public SqlDataSourceMode DataSourceMode
public string DeleteCommand
public ParameterCollection DeleteParameters
public ParameterCollection FilterParameters
public string InsertCommand
public ParameterCollection InsertParameters
public string SelectCommand
public ParameterCollection SelectParameters
public string UpdateCommand
public ParameterCollection UpdateParameters
internal DataSourceCacheManager Cache
public string CacheKeyDependency
public string SqlCacheDependency
public int CacheDuration
public DataSourceCacheExpiry CacheExpirationPolicy
public bool EnableCaching
private SqlDataSourceView View
public void .ctor(string connectionString, string selectCommand)
public void .ctor(string providerName, string connectionString, string selectCommand)
protected DataSourceView GetView(string viewName)
protected SqlDataSourceView CreateDataSourceView(string viewName)
protected DbProviderFactory GetDbProviderFactory()
internal DbProviderFactory GetDbProviderFactoryInternal()
protected ICollection GetViewNames()
public int Insert()
public int Delete()
public IEnumerable Select(DataSourceSelectArguments arguments)
public int Update()
protected internal void OnInit(EventArgs e)
private void OnPageLoadComplete(object sender, EventArgs e)
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
public bool get_CancelSelectOnNullParameter()
public void set_CancelSelectOnNullParameter(bool value)
public ConflictOptions get_ConflictDetection()
public void set_ConflictDetection(ConflictOptions value)
public SqlDataSourceCommandType get_DeleteCommandType()
public void set_DeleteCommandType(SqlDataSourceCommandType value)
public SqlDataSourceCommandType get_InsertCommandType()
public void set_InsertCommandType(SqlDataSourceCommandType value)
public SqlDataSourceCommandType get_SelectCommandType()
public void set_SelectCommandType(SqlDataSourceCommandType value)
public SqlDataSourceCommandType get_UpdateCommandType()
public void set_UpdateCommandType(SqlDataSourceCommandType value)
public string get_OldValuesParameterFormatString()
public void set_OldValuesParameterFormatString(string value)
public string get_SortParameterName()
public void set_SortParameterName(string value)
public string get_FilterExpression()
public void set_FilterExpression(string value)
public string get_ProviderName()
public void set_ProviderName(string value)
public string get_ConnectionString()
public void set_ConnectionString(string value)
public SqlDataSourceMode get_DataSourceMode()
public void set_DataSourceMode(SqlDataSourceMode value)
public string get_DeleteCommand()
public void set_DeleteCommand(string value)
public ParameterCollection get_DeleteParameters()
public ParameterCollection get_FilterParameters()
public string get_InsertCommand()
public void set_InsertCommand(string value)
public ParameterCollection get_InsertParameters()
public string get_SelectCommand()
public void set_SelectCommand(string value)
public ParameterCollection get_SelectParameters()
public string get_UpdateCommand()
public void set_UpdateCommand(string value)
public ParameterCollection get_UpdateParameters()
internal DataSourceCacheManager get_Cache()
public string get_CacheKeyDependency()
public void set_CacheKeyDependency(string value)
public string get_SqlCacheDependency()
public void set_SqlCacheDependency(string value)
public int get_CacheDuration()
public void set_CacheDuration(int value)
public DataSourceCacheExpiry get_CacheExpirationPolicy()
public void set_CacheExpirationPolicy(DataSourceCacheExpiry value)
public bool get_EnableCaching()
public void set_EnableCaching(bool value)
public void add_Deleted(SqlDataSourceStatusEventHandler value)
public void remove_Deleted(SqlDataSourceStatusEventHandler value)
public void add_Deleting(SqlDataSourceCommandEventHandler value)
public void remove_Deleting(SqlDataSourceCommandEventHandler value)
public void add_Inserted(SqlDataSourceStatusEventHandler value)
public void remove_Inserted(SqlDataSourceStatusEventHandler value)
public void add_Filtering(SqlDataSourceFilteringEventHandler value)
public void remove_Filtering(SqlDataSourceFilteringEventHandler value)
public void add_Inserting(SqlDataSourceCommandEventHandler value)
public void remove_Inserting(SqlDataSourceCommandEventHandler value)
public void add_Selected(SqlDataSourceStatusEventHandler value)
public void remove_Selected(SqlDataSourceStatusEventHandler value)
public void add_Selecting(SqlDataSourceSelectingEventHandler value)
public void remove_Selecting(SqlDataSourceSelectingEventHandler value)
public void add_Updated(SqlDataSourceStatusEventHandler value)
public void remove_Updated(SqlDataSourceStatusEventHandler value)
public void add_Updating(SqlDataSourceCommandEventHandler value)
public void remove_Updating(SqlDataSourceCommandEventHandler value)
private SqlDataSourceView get_View()
}
public System.Web.UI.WebControls.SqlDataSourceCommandEventArgs : CancelEventArgs {
private DbCommand _command
public DbCommand Command
public void .ctor(DbCommand command)
public DbCommand get_Command()
}
public System.Web.UI.WebControls.SqlDataSourceCommandEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlDataSourceCommandEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlDataSourceCommandEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.SqlDataSourceCommandType : Enum {
public int value__
public SqlDataSourceCommandType Text
public SqlDataSourceCommandType StoredProcedure
}
public System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs : CancelEventArgs {
private IOrderedDictionary _parameterValues
public IOrderedDictionary ParameterValues
public void .ctor(IOrderedDictionary parameterValues)
public IOrderedDictionary get_ParameterValues()
}
public System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlDataSourceFilteringEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlDataSourceFilteringEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.SqlDataSourceMode : Enum {
public int value__
public SqlDataSourceMode DataReader
public SqlDataSourceMode DataSet
}
public System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs : SqlDataSourceCommandEventArgs {
private DataSourceSelectArguments _arguments
public DataSourceSelectArguments Arguments
public void .ctor(DbCommand command, DataSourceSelectArguments arguments)
public DataSourceSelectArguments get_Arguments()
}
public System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlDataSourceSelectingEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlDataSourceSelectingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.SqlDataSourceStatusEventArgs : EventArgs {
private DbCommand _command
private Exception _exception
private bool _exceptionHandled
private int _affectedRows
public int AffectedRows
public DbCommand Command
public Exception Exception
public bool ExceptionHandled
public void .ctor(DbCommand command, int affectedRows, Exception exception)
public int get_AffectedRows()
public DbCommand get_Command()
public Exception get_Exception()
public bool get_ExceptionHandled()
public void set_ExceptionHandled(bool value)
}
public System.Web.UI.WebControls.SqlDataSourceStatusEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlDataSourceStatusEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlDataSourceStatusEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.SqlDataSourceView : DataSourceView {
private HttpContext context
private DbProviderFactory factory
private DbConnection connection
private bool cancelSelectOnNullParameter
private ConflictOptions conflictDetection
private string deleteCommand
private SqlDataSourceCommandType deleteCommandType
private string filterExpression
private string insertCommand
private SqlDataSourceCommandType insertCommandType
private string oldValuesParameterFormatString
private string selectCommand
private SqlDataSourceCommandType selectCommandType
private string sortParameterName
private string updateCommand
private SqlDataSourceCommandType updateCommandType
private ParameterCollection deleteParameters
private ParameterCollection filterParameters
private ParameterCollection insertParameters
private ParameterCollection selectParameters
private ParameterCollection updateParameters
private bool tracking
private string name
private SqlDataSource owner
private object EventDeleted
private object EventDeleting
private object EventFiltering
private object EventInserted
private object EventInserting
private object EventSelected
private object EventSelecting
private object EventUpdated
private object EventUpdating
private bool System.Web.UI.IStateManager.IsTrackingViewState
public bool CancelSelectOnNullParameter
public bool CanDelete
public bool CanInsert
public bool CanPage
public bool CanRetrieveTotalRowCount
public bool CanSort
public bool CanUpdate
public ConflictOptions ConflictDetection
public string DeleteCommand
public SqlDataSourceCommandType DeleteCommandType
public ParameterCollection DeleteParameters
public string FilterExpression
public ParameterCollection FilterParameters
public string InsertCommand
public SqlDataSourceCommandType InsertCommandType
public ParameterCollection InsertParameters
protected bool IsTrackingViewState
public string OldValuesParameterFormatString
public string SelectCommand
public SqlDataSourceCommandType SelectCommandType
public ParameterCollection SelectParameters
public string SortParameterName
public string UpdateCommand
public SqlDataSourceCommandType UpdateCommandType
public ParameterCollection UpdateParameters
protected string ParameterPrefix
public void .ctor(SqlDataSource owner, string name, HttpContext context)
private void InitConnection()
public int Delete(IDictionary keys, IDictionary oldValues)
protected int ExecuteDelete(IDictionary keys, IDictionary oldValues)
public int Insert(IDictionary values)
protected int ExecuteInsert(IDictionary values)
public IEnumerable Select(DataSourceSelectArguments arguments)
protected internal IEnumerable ExecuteSelect(DataSourceSelectArguments arguments)
private bool PrepareNullParameters(DbCommand command, bool cancelIfHas)
public int Update(IDictionary keys, IDictionary values, IDictionary oldValues)
protected int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues)
private string FormatOldParameter(string name)
private object FindValueByName(string parameterName, IDictionary values, bool format)
private void InitializeParameters(DbCommand command, ParameterCollection parameters, IDictionary values, IDictionary oldValues, bool parametersMayMatchOldValues)
private DbParameter CreateDbParameter(string name, object value)
private DbParameter CreateDbParameter(string name, object value, ParameterDirection dir, int size)
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private NotSupportedException CreateNotSupportedException(string capabilityName)
protected internal void RaiseUnsupportedCapabilityError(DataSourceCapabilities capability)
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
public bool get_CancelSelectOnNullParameter()
public void set_CancelSelectOnNullParameter(bool value)
public bool get_CanDelete()
public bool get_CanInsert()
public bool get_CanPage()
public bool get_CanRetrieveTotalRowCount()
public bool get_CanSort()
public bool get_CanUpdate()
public ConflictOptions get_ConflictDetection()
public void set_ConflictDetection(ConflictOptions value)
public string get_DeleteCommand()
public void set_DeleteCommand(string value)
public SqlDataSourceCommandType get_DeleteCommandType()
public void set_DeleteCommandType(SqlDataSourceCommandType value)
public ParameterCollection get_DeleteParameters()
public string get_FilterExpression()
public void set_FilterExpression(string value)
public ParameterCollection get_FilterParameters()
public string get_InsertCommand()
public void set_InsertCommand(string value)
public SqlDataSourceCommandType get_InsertCommandType()
public void set_InsertCommandType(SqlDataSourceCommandType value)
public ParameterCollection get_InsertParameters()
protected bool get_IsTrackingViewState()
public string get_OldValuesParameterFormatString()
public void set_OldValuesParameterFormatString(string value)
public string get_SelectCommand()
public void set_SelectCommand(string value)
public SqlDataSourceCommandType get_SelectCommandType()
public void set_SelectCommandType(SqlDataSourceCommandType value)
public ParameterCollection get_SelectParameters()
public string get_SortParameterName()
public void set_SortParameterName(string value)
public string get_UpdateCommand()
public void set_UpdateCommand(string value)
public SqlDataSourceCommandType get_UpdateCommandType()
public void set_UpdateCommandType(SqlDataSourceCommandType value)
public ParameterCollection get_UpdateParameters()
private void ParametersChanged(object source, EventArgs args)
private ParameterCollection GetParameterCollection(ParameterCollection& output, bool propagateTrackViewState, bool subscribeChanged)
protected string get_ParameterPrefix()
protected void OnDeleted(SqlDataSourceStatusEventArgs e)
public void add_Deleted(SqlDataSourceStatusEventHandler value)
public void remove_Deleted(SqlDataSourceStatusEventHandler value)
protected void OnDeleting(SqlDataSourceCommandEventArgs e)
public void add_Deleting(SqlDataSourceCommandEventHandler value)
public void remove_Deleting(SqlDataSourceCommandEventHandler value)
protected void OnFiltering(SqlDataSourceFilteringEventArgs e)
public void add_Filtering(SqlDataSourceFilteringEventHandler value)
public void remove_Filtering(SqlDataSourceFilteringEventHandler value)
protected void OnInserted(SqlDataSourceStatusEventArgs e)
public void add_Inserted(SqlDataSourceStatusEventHandler value)
public void remove_Inserted(SqlDataSourceStatusEventHandler value)
protected void OnInserting(SqlDataSourceCommandEventArgs e)
public void add_Inserting(SqlDataSourceCommandEventHandler value)
public void remove_Inserting(SqlDataSourceCommandEventHandler value)
protected void OnSelected(SqlDataSourceStatusEventArgs e)
public void add_Selected(SqlDataSourceStatusEventHandler value)
public void remove_Selected(SqlDataSourceStatusEventHandler value)
protected void OnSelecting(SqlDataSourceSelectingEventArgs e)
public void add_Selecting(SqlDataSourceSelectingEventHandler value)
public void remove_Selecting(SqlDataSourceSelectingEventHandler value)
protected void OnUpdated(SqlDataSourceStatusEventArgs e)
public void add_Updated(SqlDataSourceStatusEventHandler value)
public void remove_Updated(SqlDataSourceStatusEventHandler value)
protected void OnUpdating(SqlDataSourceCommandEventArgs e)
public void add_Updating(SqlDataSourceCommandEventHandler value)
public void remove_Updating(SqlDataSourceCommandEventHandler value)
}
public System.Web.UI.WebControls.StringArrayConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Web.UI.WebControls.Style : Component {
internal string BitStateKey
private int styles
private int stylesTraked
internal StateBag viewstate
private FontInfo fontinfo
private bool tracking
private bool _isSharedViewState
private string registered_class
public Color BackColor
public Color BorderColor
public BorderStyle BorderStyle
public Unit BorderWidth
public string CssClass
public FontInfo Font
public Color ForeColor
public Unit Height
public Unit Width
public bool IsEmpty
protected bool IsTrackingViewState
protected internal StateBag ViewState
internal bool AlwaysRenderTextDecoration
private bool System.Web.UI.IStateManager.IsTrackingViewState
public string RegisteredCssClass
public void .ctor(StateBag bag)
public Color get_BackColor()
public void set_BackColor(Color value)
public Color get_BorderColor()
public void set_BorderColor(Color value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public Unit get_BorderWidth()
public void set_BorderWidth(Unit value)
public string get_CssClass()
public void set_CssClass(string value)
public FontInfo get_Font()
public Color get_ForeColor()
public void set_ForeColor(Color value)
public Unit get_Height()
public void set_Height(Unit value)
public Unit get_Width()
public void set_Width(Unit value)
public bool get_IsEmpty()
protected bool get_IsTrackingViewState()
protected internal StateBag get_ViewState()
internal bool get_AlwaysRenderTextDecoration()
internal void set_AlwaysRenderTextDecoration(bool value)
public void AddAttributesToRender(HtmlTextWriter writer)
public void AddAttributesToRender(HtmlTextWriter writer, WebControl owner)
protected void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver)
public void CopyFrom(Style s)
public void MergeWith(Style s)
public void Reset()
protected internal void LoadViewState(object state)
protected internal object SaveViewState()
internal void SaveBitState()
internal void LoadBitState()
protected internal void SetBit(int bit)
internal void RemoveBit(int bit)
internal bool CheckBit(int bit)
protected internal void TrackViewState()
private void System.Web.UI.IStateManager.LoadViewState(object state)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
internal void SetRegisteredCssClass(string name)
public CssStyleCollection GetStyleAttributes(IUrlResolutionService urlResolver)
public string get_RegisteredCssClass()
internal void CopyTextStylesFrom(Style source)
internal void RemoveTextStyles()
internal void AddCssClass(string cssClass)
internal void PrependCssClass(string cssClass)
public void SetDirty()
}
internal System.Web.UI.WebControls.StyleBlock : Control {
private List`1<NamedCssStyleCollection> cssStyles
private Dictionary`2<string, NamedCssStyleCollection> cssStyleIndex
private string stylePrefix
private List`1<NamedCssStyleCollection> CssStyles
private List`1<NamedCssStyleCollection> get_CssStyles()
public void .ctor(string stylePrefix)
public NamedCssStyleCollection RegisterStyle(string name)
public NamedCssStyleCollection RegisterStyle(Style style, string name)
public NamedCssStyleCollection RegisterStyle(HtmlTextWriterStyle key, string value, string styleName)
private NamedCssStyleCollection GetStyle(string name)
protected internal void Render(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.StyleCollection : StateManagedCollection {
public Style Item
public Style get_Item(int i)
public void set_Item(int i, Style value)
public int Add(Style style)
public bool Contains(Style style)
public void CopyTo(Style[] styleArray, int index)
protected object CreateKnownType(int index)
protected Type[] GetKnownTypes()
public int IndexOf(Style style)
public void Insert(int index, Style style)
public void Remove(Style style)
public void RemoveAt(int index)
protected void SetDirtyObject(object o)
}
public System.Web.UI.WebControls.SubMenuStyle : Style {
private string HORZ_PADD
private string VERT_PADD
public Unit HorizontalPadding
public Unit VerticalPadding
public void .ctor(StateBag bag)
private bool IsSet(string v)
public Unit get_HorizontalPadding()
public void set_HorizontalPadding(Unit value)
public Unit get_VerticalPadding()
public void set_VerticalPadding(Unit value)
public void CopyFrom(Style s)
public void MergeWith(Style s)
public void Reset()
protected void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver)
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] arr)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] arr)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
}
public System.Web.UI.WebControls.SubMenuStyleCollection : StateManagedCollection {
private Type[] types
public SubMenuStyle Item
public int Add(SubMenuStyle style)
public bool Contains(SubMenuStyle style)
public void CopyTo(SubMenuStyle[] styleArray, int index)
protected object CreateKnownType(int index)
protected Type[] GetKnownTypes()
public int IndexOf(SubMenuStyle style)
public void Insert(int index, SubMenuStyle style)
public void Remove(SubMenuStyle style)
public void RemoveAt(int index)
public SubMenuStyle get_Item(int i)
public void set_Item(int i, SubMenuStyle value)
protected void SetDirtyObject(object o)
}
public System.Web.UI.WebControls.Substitution : Control {
public string MethodName
public string get_MethodName()
public void set_MethodName(string value)
protected ControlCollection CreateControlCollection()
protected internal void OnPreRender(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
private HttpResponseSubstitutionCallback CreateCallback(string method, TemplateControl tc)
}
public System.Web.UI.WebControls.Table : WebControl {
private TableRowCollection rows
private bool generateTableSections
internal bool GenerateTableSections
public string BackImageUrl
public string Caption
public TableCaptionAlign CaptionAlign
public int CellPadding
public int CellSpacing
public GridLines GridLines
public HorizontalAlign HorizontalAlign
public TableRowCollection Rows
private TableStyle TableStyle
public bool SupportsDisabledAttribute
internal bool get_GenerateTableSections()
internal void set_GenerateTableSections(bool value)
public string get_BackImageUrl()
public void set_BackImageUrl(string value)
public string get_Caption()
public void set_Caption(string value)
public TableCaptionAlign get_CaptionAlign()
public void set_CaptionAlign(TableCaptionAlign value)
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public GridLines get_GridLines()
public void set_GridLines(GridLines value)
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public TableRowCollection get_Rows()
private TableStyle get_TableStyle()
public bool get_SupportsDisabledAttribute()
protected void AddAttributesToRender(HtmlTextWriter writer)
protected ControlCollection CreateControlCollection()
protected Style CreateControlStyle()
protected internal void RenderContents(HtmlTextWriter writer)
public void RenderBeginTag(HtmlTextWriter writer)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string argument)
protected void RaisePostBackEvent(string argument)
}
public System.Web.UI.WebControls.TableCaptionAlign : Enum {
public int value__
public TableCaptionAlign NotSet
public TableCaptionAlign Top
public TableCaptionAlign Bottom
public TableCaptionAlign Left
public TableCaptionAlign Right
}
public System.Web.UI.WebControls.TableCell : WebControl {
public String[] AssociatedHeaderCellID
public int ColumnSpan
public HorizontalAlign HorizontalAlign
public int RowSpan
public string Text
public VerticalAlign VerticalAlign
public bool Wrap
public bool SupportsDisabledAttribute
private TableItemStyle TableItemStyle
internal void .ctor(HtmlTextWriterTag tag)
public String[] get_AssociatedHeaderCellID()
public void set_AssociatedHeaderCellID(String[] value)
public int get_ColumnSpan()
public void set_ColumnSpan(int value)
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public int get_RowSpan()
public void set_RowSpan(int value)
public string get_Text()
public void set_Text(string value)
public VerticalAlign get_VerticalAlign()
public void set_VerticalAlign(VerticalAlign value)
public bool get_Wrap()
public void set_Wrap(bool value)
public bool get_SupportsDisabledAttribute()
private TableItemStyle get_TableItemStyle()
protected void AddAttributesToRender(HtmlTextWriter writer)
protected void AddParsedSubObject(object obj)
protected Style CreateControlStyle()
protected internal void RenderContents(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.TableCellCollection : object {
private ControlCollection cc
public int Count
public bool IsReadOnly
public bool IsSynchronized
public TableCell Item
public object SyncRoot
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
internal void .ctor(TableRow tr)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public TableCell get_Item(int index)
public object get_SyncRoot()
public int Add(TableCell cell)
public void AddAt(int index, TableCell cell)
public void AddRange(TableCell[] cells)
public void Clear()
public void CopyTo(Array array, int index)
public int GetCellIndex(TableCell cell)
public IEnumerator GetEnumerator()
public void Remove(TableCell cell)
public void RemoveAt(int index)
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private int System.Collections.IList.Add(object value)
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
}
public System.Web.UI.WebControls.TableCellControlBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
}
public System.Web.UI.WebControls.TableHeaderCell : TableCell {
public string AbbreviatedText
public String[] CategoryText
public TableHeaderScope Scope
public string get_AbbreviatedText()
public void set_AbbreviatedText(string value)
public String[] get_CategoryText()
public void set_CategoryText(String[] value)
public TableHeaderScope get_Scope()
public void set_Scope(TableHeaderScope value)
protected void AddAttributesToRender(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.TableHeaderScope : Enum {
public int value__
public TableHeaderScope NotSet
public TableHeaderScope Row
public TableHeaderScope Column
}
public System.Web.UI.WebControls.TableItemStyle : Style {
public HorizontalAlign HorizontalAlign
public VerticalAlign VerticalAlign
public bool Wrap
public void .ctor(StateBag bag)
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public VerticalAlign get_VerticalAlign()
public void set_VerticalAlign(VerticalAlign value)
public bool get_Wrap()
public void set_Wrap(bool value)
public void AddAttributesToRender(HtmlTextWriter writer, WebControl owner)
private void Copy(string name, TableItemStyles s, Style source)
public void CopyFrom(Style s)
private void Merge(string name, TableItemStyles s, Style source)
public void MergeWith(Style s)
public void Reset()
}
public System.Web.UI.WebControls.TableRow : WebControl {
private TableCellCollection cells
private bool tableRowSectionSet
private TableRowCollection <Container>k__BackingField
internal TableRowCollection Container
internal bool TableRowSectionSet
public TableCellCollection Cells
public HorizontalAlign HorizontalAlign
public VerticalAlign VerticalAlign
private TableItemStyle TableItemStyle
public bool SupportsDisabledAttribute
public TableRowSection TableSection
internal TableRowCollection get_Container()
internal void set_Container(TableRowCollection value)
internal bool get_TableRowSectionSet()
public TableCellCollection get_Cells()
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public VerticalAlign get_VerticalAlign()
public void set_VerticalAlign(VerticalAlign value)
private TableItemStyle get_TableItemStyle()
public bool get_SupportsDisabledAttribute()
protected ControlCollection CreateControlCollection()
protected Style CreateControlStyle()
public TableRowSection get_TableSection()
public void set_TableSection(TableRowSection value)
}
public System.Web.UI.WebControls.TableRowCollection : object {
private ControlCollection cc
private Table owner
public int Count
public bool IsReadOnly
public bool IsSynchronized
public TableRow Item
public object SyncRoot
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
internal void .ctor(Table table)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public TableRow get_Item(int index)
public object get_SyncRoot()
public int Add(TableRow row)
public void AddAt(int index, TableRow row)
public void AddRange(TableRow[] rows)
public void Clear()
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public int GetRowIndex(TableRow row)
internal void RowTableSectionSet()
public void Remove(TableRow row)
public void RemoveAt(int index)
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private int System.Collections.IList.Add(object value)
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
}
public System.Web.UI.WebControls.TableRowSection : Enum {
public int value__
public TableRowSection TableHeader
public TableRowSection TableBody
public TableRowSection TableFooter
}
public System.Web.UI.WebControls.TableSectionStyle : Style {
public bool Visible
public bool get_Visible()
public void set_Visible(bool value)
}
public System.Web.UI.WebControls.TableStyle : Style {
public string BackImageUrl
public int CellPadding
public int CellSpacing
public GridLines GridLines
public HorizontalAlign HorizontalAlign
public void .ctor(StateBag bag)
public string get_BackImageUrl()
public void set_BackImageUrl(string value)
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public GridLines get_GridLines()
public void set_GridLines(GridLines value)
public HorizontalAlign get_HorizontalAlign()
public void set_HorizontalAlign(HorizontalAlign value)
public void AddAttributesToRender(HtmlTextWriter writer, WebControl owner)
private void Copy(string name, TableStyles s, Style source)
public void CopyFrom(Style s)
private void Merge(string name, TableStyles s, Style source)
public void MergeWith(Style s)
public void Reset()
protected void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver)
}
public System.Web.UI.WebControls.TargetConverter : StringConverter {
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Web.UI.WebControls.TemplateColumn : DataGridColumn {
private ITemplate editItemTemplate
private ITemplate footerTemplate
private ITemplate headerTemplate
private ITemplate itemTemplate
public ITemplate EditItemTemplate
public ITemplate FooterTemplate
public ITemplate HeaderTemplate
public ITemplate ItemTemplate
public void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType)
public ITemplate get_EditItemTemplate()
public void set_EditItemTemplate(ITemplate value)
public ITemplate get_FooterTemplate()
public void set_FooterTemplate(ITemplate value)
public ITemplate get_HeaderTemplate()
public void set_HeaderTemplate(ITemplate value)
public ITemplate get_ItemTemplate()
public void set_ItemTemplate(ITemplate value)
}
public System.Web.UI.WebControls.TemplatedWizardStep : WizardStepBase {
private ITemplate _contentTemplate
private Control _contentTemplateContainer
private ITemplate _customNavigationTemplate
private Control _customNavigationTemplateContainer
public ITemplate ContentTemplate
public Control ContentTemplateContainer
public ITemplate CustomNavigationTemplate
public Control CustomNavigationTemplateContainer
public string SkinID
public ITemplate get_ContentTemplate()
public void set_ContentTemplate(ITemplate value)
public Control get_ContentTemplateContainer()
internal void set_ContentTemplateContainer(Control value)
public ITemplate get_CustomNavigationTemplate()
public void set_CustomNavigationTemplate(ITemplate value)
public Control get_CustomNavigationTemplateContainer()
internal void set_CustomNavigationTemplateContainer(Control value)
public string get_SkinID()
public void set_SkinID(string value)
}
public System.Web.UI.WebControls.TemplateField : DataControlField {
private ITemplate alternatingItemTemplate
private ITemplate editItemTemplate
private ITemplate footerTemplate
private ITemplate headerTemplate
private ITemplate insertItemTemplate
private ITemplate itemTemplate
public ITemplate AlternatingItemTemplate
public bool ConvertEmptyStringToNull
public ITemplate EditItemTemplate
public ITemplate FooterTemplate
public ITemplate HeaderTemplate
public ITemplate InsertItemTemplate
public ITemplate ItemTemplate
public ValidateRequestMode ValidateRequestMode
public ITemplate get_AlternatingItemTemplate()
public void set_AlternatingItemTemplate(ITemplate value)
public bool get_ConvertEmptyStringToNull()
public void set_ConvertEmptyStringToNull(bool value)
public ITemplate get_EditItemTemplate()
public void set_EditItemTemplate(ITemplate value)
public ITemplate get_FooterTemplate()
public void set_FooterTemplate(ITemplate value)
public ITemplate get_HeaderTemplate()
public void set_HeaderTemplate(ITemplate value)
public ITemplate get_InsertItemTemplate()
public void set_InsertItemTemplate(ITemplate value)
public ITemplate get_ItemTemplate()
public void set_ItemTemplate(ITemplate value)
public void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex)
public void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly)
public void ValidateSupportsCallback()
protected DataControlField CreateField()
protected void CopyProperties(DataControlField newField)
public ValidateRequestMode get_ValidateRequestMode()
public void set_ValidateRequestMode(ValidateRequestMode value)
}
public System.Web.UI.WebControls.TextAlign : Enum {
public int value__
public TextAlign Left
public TextAlign Right
}
public System.Web.UI.WebControls.TextBox : WebControl {
private String[] VCardValues
private object TextChangedEvent
public AutoCompleteType AutoCompleteType
public bool AutoPostBack
public bool CausesValidation
public int Columns
public int MaxLength
public bool ReadOnly
public int Rows
protected HtmlTextWriterTag TagKey
public string Text
public TextBoxMode TextMode
public string ValidationGroup
public bool Wrap
protected void AddAttributesToRender(HtmlTextWriter writer)
protected void AddParsedSubObject(object obj)
protected internal void OnPreRender(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected void RaisePostDataChangedEvent()
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
protected object SaveViewState()
private PostBackOptions GetPostBackOptions()
private void RegisterKeyHandlerClientScript()
public AutoCompleteType get_AutoCompleteType()
public void set_AutoCompleteType(AutoCompleteType value)
public bool get_AutoPostBack()
public void set_AutoPostBack(bool value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public int get_Columns()
public void set_Columns(int value)
public int get_MaxLength()
public void set_MaxLength(int value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public int get_Rows()
public void set_Rows(int value)
protected HtmlTextWriterTag get_TagKey()
public string get_Text()
public void set_Text(string value)
public TextBoxMode get_TextMode()
public void set_TextMode(TextBoxMode value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
public bool get_Wrap()
public void set_Wrap(bool value)
protected void OnTextChanged(EventArgs e)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
}
public System.Web.UI.WebControls.TextBoxControlBuilder : ControlBuilder {
public bool AllowWhitespaceLiterals()
public bool HtmlDecodeLiterals()
}
public System.Web.UI.WebControls.TextBoxMode : Enum {
public int value__
public TextBoxMode SingleLine
public TextBoxMode MultiLine
public TextBoxMode Password
public TextBoxMode Color
public TextBoxMode Date
public TextBoxMode DateTime
public TextBoxMode DateTimeLocal
public TextBoxMode Email
public TextBoxMode Month
public TextBoxMode Number
public TextBoxMode Range
public TextBoxMode Search
public TextBoxMode Phone
public TextBoxMode Time
public TextBoxMode Url
public TextBoxMode Week
}
public System.Web.UI.WebControls.TitleFormat : Enum {
public int value__
public TitleFormat Month
public TitleFormat MonthYear
}
public System.Web.UI.WebControls.TreeNode : object {
private StateBag ViewState
private TreeNodeCollection nodes
private bool marked
private TreeView tree
private TreeNode parent
private int index
private string path
private int depth
private object dataItem
private IHierarchyData hierarchyData
private bool gotBinding
private TreeNodeBinding binding
private PropertyDescriptorCollection boundProperties
private bool populating
private bool hadChildrenBeforePopulating
public int Depth
internal TreeView Tree
public bool DataBound
public object DataItem
public string DataPath
public bool Checked
public TreeNodeCollection ChildNodes
public Nullable`1<bool> Expanded
public string ImageToolTip
public string ImageUrl
public string NavigateUrl
internal bool HadChildrenBeforePopulating
public bool PopulateOnDemand
public TreeNodeSelectAction SelectAction
public Nullable`1<bool> ShowCheckBox
internal bool ShowCheckBoxInternal
public string Target
public string Text
public string ToolTip
public string Value
public bool Selected
internal bool SelectedFlag
public TreeNode Parent
public string ValuePath
internal int Index
internal string Path
internal bool Populated
internal bool HasChildData
private bool System.Web.UI.IStateManager.IsTrackingViewState
protected bool IsTrackingViewState
internal bool IsParentNode
internal bool IsLeafNode
internal bool IsRootNode
internal void .ctor(TreeView tree)
public void .ctor(string text)
public void .ctor(string text, string value)
public void .ctor(string text, string value, string imageUrl)
public void .ctor(string text, string value, string imageUrl, string navigateUrl, string target)
protected void .ctor(TreeView owner, bool isRoot)
public int get_Depth()
private void ResetPathData()
internal TreeView get_Tree()
internal void set_Tree(TreeView value)
public bool get_DataBound()
private void set_DataBound(bool value)
public object get_DataItem()
public string get_DataPath()
private void set_DataPath(string value)
public bool get_Checked()
public void set_Checked(bool value)
public TreeNodeCollection get_ChildNodes()
public Nullable`1<bool> get_Expanded()
public void set_Expanded(Nullable`1<bool> value)
public string get_ImageToolTip()
public void set_ImageToolTip(string value)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public string get_NavigateUrl()
public void set_NavigateUrl(string value)
internal bool get_HadChildrenBeforePopulating()
internal void set_HadChildrenBeforePopulating(bool value)
public bool get_PopulateOnDemand()
public void set_PopulateOnDemand(bool value)
public TreeNodeSelectAction get_SelectAction()
public void set_SelectAction(TreeNodeSelectAction value)
public Nullable`1<bool> get_ShowCheckBox()
public void set_ShowCheckBox(Nullable`1<bool> value)
internal bool get_ShowCheckBoxInternal()
public string get_Target()
public void set_Target(string value)
public string get_Text()
public void set_Text(string value)
public string get_ToolTip()
public void set_ToolTip(string value)
public string get_Value()
public void set_Value(string value)
public bool get_Selected()
public void set_Selected(bool value)
internal bool get_SelectedFlag()
internal void set_SelectedFlag(bool value)
public TreeNode get_Parent()
public string get_ValuePath()
internal int get_Index()
internal void set_Index(int value)
internal void SetParent(TreeNode node)
internal string get_Path()
internal bool get_Populated()
internal void set_Populated(bool value)
internal bool get_HasChildData()
internal void Populate()
public void Collapse()
public void CollapseAll()
public void Expand()
internal void Expand(int depth)
public void ExpandAll()
private void SetExpandedRec(bool expanded, int depth)
public void Select()
public void ToggleExpandState()
private void System.Web.UI.IStateManager.LoadViewState(object state)
protected void LoadViewState(object state)
private object System.Web.UI.IStateManager.SaveViewState()
protected object SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
protected void TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
protected bool get_IsTrackingViewState()
internal void SetDirty()
public object Clone()
private object System.ICloneable.Clone()
internal void Bind(IHierarchyData hierarchyData)
internal void SetDataItem(object item)
internal void SetDataPath(string path)
internal void SetDataBound(bool bound)
private string GetDefaultBoundText()
private string GetDataItemType()
internal bool get_IsParentNode()
internal bool get_IsLeafNode()
internal bool get_IsRootNode()
private TreeNodeBinding GetBinding()
private object GetBoundPropertyValue(string name)
internal void BeginRenderText(HtmlTextWriter writer)
internal void EndRenderText(HtmlTextWriter writer)
protected void RenderPreText(HtmlTextWriter writer)
protected void RenderPostText(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.TreeNodeBinding : object {
private StateBag ViewState
public string DataMember
public int Depth
public string FormatString
public string ImageToolTip
public string ImageToolTipField
public string ImageUrl
public string ImageUrlField
public string NavigateUrl
public string NavigateUrlField
public bool PopulateOnDemand
public TreeNodeSelectAction SelectAction
public Nullable`1<bool> ShowCheckBox
public string Target
public string TargetField
public string Text
public string TextField
public string ToolTip
public string ToolTipField
public string Value
public string ValueField
private bool System.Web.UI.IStateManager.IsTrackingViewState
private object System.Web.UI.IDataSourceViewSchemaAccessor.DataSourceViewSchema
public string get_DataMember()
public void set_DataMember(string value)
public int get_Depth()
public void set_Depth(int value)
public string get_FormatString()
public void set_FormatString(string value)
public string get_ImageToolTip()
public void set_ImageToolTip(string value)
public string get_ImageToolTipField()
public void set_ImageToolTipField(string value)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public string get_ImageUrlField()
public void set_ImageUrlField(string value)
public string get_NavigateUrl()
public void set_NavigateUrl(string value)
public string get_NavigateUrlField()
public void set_NavigateUrlField(string value)
public bool get_PopulateOnDemand()
public void set_PopulateOnDemand(bool value)
public TreeNodeSelectAction get_SelectAction()
public void set_SelectAction(TreeNodeSelectAction value)
public Nullable`1<bool> get_ShowCheckBox()
public void set_ShowCheckBox(Nullable`1<bool> value)
public string get_Target()
public void set_Target(string value)
public string get_TargetField()
public void set_TargetField(string value)
public string get_Text()
public void set_Text(string value)
public string get_TextField()
public void set_TextField(string value)
public string get_ToolTip()
public void set_ToolTip(string value)
public string get_ToolTipField()
public void set_ToolTipField(string value)
public string get_Value()
public void set_Value(string value)
internal bool HasPropertyValue(string propName)
public string get_ValueField()
public void set_ValueField(string value)
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
private object System.Web.UI.IDataSourceViewSchemaAccessor.get_DataSourceViewSchema()
private void System.Web.UI.IDataSourceViewSchemaAccessor.set_DataSourceViewSchema(object value)
private object System.ICloneable.Clone()
internal void SetDirty()
public string ToString()
}
public System.Web.UI.WebControls.TreeNodeBindingCollection : StateManagedCollection {
private Type[] types
public TreeNodeBinding Item
public int Add(TreeNodeBinding binding)
public bool Contains(TreeNodeBinding binding)
public void CopyTo(TreeNodeBinding[] bindingArray, int index)
protected object CreateKnownType(int index)
protected Type[] GetKnownTypes()
public int IndexOf(TreeNodeBinding binding)
public void Insert(int index, TreeNodeBinding binding)
public void Remove(TreeNodeBinding binding)
public void RemoveAt(int index)
public TreeNodeBinding get_Item(int i)
public void set_Item(int i, TreeNodeBinding value)
protected void SetDirtyObject(object o)
protected void OnClear()
protected void OnRemoveComplete(int index, object value)
protected void OnValidate(object value)
}
public System.Web.UI.WebControls.TreeNodeCollection : object {
private ArrayList items
private TreeView tree
private TreeNode parent
private bool marked
private bool dirty
public TreeNode Item
public int Count
public bool IsSynchronized
public object SyncRoot
private bool System.Web.UI.IStateManager.IsTrackingViewState
public void .ctor(TreeNode owner)
internal void .ctor(TreeView tree)
internal void SetTree(TreeView tree)
public TreeNode get_Item(int index)
public void Add(TreeNode child)
internal void Add(TreeNode child, bool updateParent)
public void AddAt(int index, TreeNode child)
internal void SetDirty()
public void Clear()
public bool Contains(TreeNode c)
public void CopyTo(TreeNode[] nodeArray, int index)
public IEnumerator GetEnumerator()
public int IndexOf(TreeNode value)
public void Remove(TreeNode value)
public void RemoveAt(int index)
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
private void System.Collections.ICollection.CopyTo(Array array, int index)
private void System.Web.UI.IStateManager.LoadViewState(object state)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
}
public System.Web.UI.WebControls.TreeNodeEventArgs : EventArgs {
private TreeNode _node
public TreeNode Node
public void .ctor(TreeNode node)
public TreeNode get_Node()
}
public System.Web.UI.WebControls.TreeNodeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TreeNodeEventArgs e)
public IAsyncResult BeginInvoke(object sender, TreeNodeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.TreeNodeSelectAction : Enum {
public int value__
public TreeNodeSelectAction Select
public TreeNodeSelectAction Expand
public TreeNodeSelectAction SelectExpand
public TreeNodeSelectAction None
}
public System.Web.UI.WebControls.TreeNodeStyle : Style {
private string CHILD_PADD
private string HORZ_PADD
private string IMG_URL
private string SPACING
private string VERT_PADD
public string ImageUrl
public Unit ChildNodesPadding
public Unit HorizontalPadding
public Unit VerticalPadding
public Unit NodeSpacing
public void .ctor(StateBag bag)
public string get_ImageUrl()
public void set_ImageUrl(string value)
public Unit get_ChildNodesPadding()
public void set_ChildNodesPadding(Unit value)
public Unit get_HorizontalPadding()
public void set_HorizontalPadding(Unit value)
public Unit get_VerticalPadding()
public void set_VerticalPadding(Unit value)
public Unit get_NodeSpacing()
public void set_NodeSpacing(Unit value)
public void CopyFrom(Style s)
public void MergeWith(Style s)
public void Reset()
protected void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver)
}
public System.Web.UI.WebControls.TreeNodeStyleCollection : StateManagedCollection {
private Type[] types
public TreeNodeStyle Item
public int Add(TreeNodeStyle style)
public bool Contains(TreeNodeStyle style)
public void CopyTo(TreeNodeStyle[] styleArray, int index)
protected object CreateKnownType(int index)
protected Type[] GetKnownTypes()
public int IndexOf(TreeNodeStyle style)
public void Insert(int index, TreeNodeStyle style)
public void Remove(TreeNodeStyle style)
public void RemoveAt(int index)
public TreeNodeStyle get_Item(int i)
public void set_Item(int i, TreeNodeStyle value)
protected void SetDirtyObject(object o)
protected void OnInsert(int index, object value)
}
public System.Web.UI.WebControls.TreeNodeTypes : Enum {
public int value__
public TreeNodeTypes None
public TreeNodeTypes Root
public TreeNodeTypes Parent
public TreeNodeTypes Leaf
public TreeNodeTypes All
}
public System.Web.UI.WebControls.TreeView : HierarchicalDataBoundControl {
private Char[] postDataSplitChars
private string activeSiteMapPath
private bool stylesPrepared
private Style hoverNodeStyle
private TreeNodeStyle leafNodeStyle
private TreeNodeStyle nodeStyle
private TreeNodeStyle parentNodeStyle
private TreeNodeStyle rootNodeStyle
private TreeNodeStyle selectedNodeStyle
private TreeNodeStyleCollection levelStyles
private TreeNodeCollection nodes
private TreeNodeBindingCollection dataBindings
private TreeNode selectedNode
private Hashtable bindings
private int registeredStylesCounter
private List`1<Style> levelLinkStyles
private Style controlLinkStyle
private Style nodeLinkStyle
private Style rootNodeLinkStyle
private Style parentNodeLinkStyle
private Style leafNodeLinkStyle
private Style selectedNodeLinkStyle
private Style hoverNodeLinkStyle
private object TreeNodeCheckChangedEvent
private object SelectedNodeChangedEvent
private object TreeNodeCollapsedEvent
private object TreeNodeDataBoundEvent
private object TreeNodeExpandedEvent
private object TreeNodePopulateEvent
private Hashtable imageStyles
private string callbackResult
private string _OnPreRender_Script_Preamble
private string _OnPreRender_Script_ShowExpandCollapse
private string _OnPreRender_Script_ShowExpandCollapse_Populate
private string _OnPreRender_Script_PopulateCallback
private string _OnPreRender_Script_CallbackOptions
private string _OnPreRender_Script_HoverStyle
public string CollapseImageToolTip
public bool AutoGenerateDataBindings
public string CollapseImageUrl
public TreeNodeBindingCollection DataBindings
public bool EnableClientScript
public int ExpandDepth
public string ExpandImageToolTip
public string ExpandImageUrl
public Style HoverNodeStyle
public TreeViewImageSet ImageSet
public TreeNodeStyle LeafNodeStyle
public TreeNodeStyleCollection LevelStyles
public string LineImagesFolder
public int MaxDataBindDepth
public int NodeIndent
public TreeNodeCollection Nodes
public TreeNodeStyle NodeStyle
public bool NodeWrap
public string NoExpandImageUrl
public TreeNodeStyle ParentNodeStyle
public char PathSeparator
public bool PopulateNodesFromClient
public TreeNodeStyle RootNodeStyle
public TreeNodeStyle SelectedNodeStyle
private Style ControlLinkStyle
private Style NodeLinkStyle
private Style RootNodeLinkStyle
private Style ParentNodeLinkStyle
private Style SelectedNodeLinkStyle
private Style LeafNodeLinkStyle
private Style HoverNodeLinkStyle
public TreeNodeTypes ShowCheckBoxes
public bool ShowExpandCollapse
public bool ShowLines
public string SkipLinkText
public TreeNode SelectedNode
public string SelectedValue
public string Target
public bool Visible
public TreeNodeCollection CheckedNodes
protected HtmlTextWriterTag TagKey
public void add_TreeNodeCheckChanged(TreeNodeEventHandler value)
public void remove_TreeNodeCheckChanged(TreeNodeEventHandler value)
public void add_SelectedNodeChanged(EventHandler value)
public void remove_SelectedNodeChanged(EventHandler value)
public void add_TreeNodeCollapsed(TreeNodeEventHandler value)
public void remove_TreeNodeCollapsed(TreeNodeEventHandler value)
public void add_TreeNodeDataBound(TreeNodeEventHandler value)
public void remove_TreeNodeDataBound(TreeNodeEventHandler value)
public void add_TreeNodeExpanded(TreeNodeEventHandler value)
public void remove_TreeNodeExpanded(TreeNodeEventHandler value)
public void add_TreeNodePopulate(TreeNodeEventHandler value)
public void remove_TreeNodePopulate(TreeNodeEventHandler value)
protected void OnTreeNodeCheckChanged(TreeNodeEventArgs e)
protected void OnSelectedNodeChanged(EventArgs e)
protected void OnTreeNodeCollapsed(TreeNodeEventArgs e)
protected void OnTreeNodeDataBound(TreeNodeEventArgs e)
protected void OnTreeNodeExpanded(TreeNodeEventArgs e)
protected void OnTreeNodePopulate(TreeNodeEventArgs e)
public string get_CollapseImageToolTip()
public void set_CollapseImageToolTip(string value)
public bool get_AutoGenerateDataBindings()
public void set_AutoGenerateDataBindings(bool value)
public string get_CollapseImageUrl()
public void set_CollapseImageUrl(string value)
public TreeNodeBindingCollection get_DataBindings()
public bool get_EnableClientScript()
public void set_EnableClientScript(bool value)
public int get_ExpandDepth()
public void set_ExpandDepth(int value)
public string get_ExpandImageToolTip()
public void set_ExpandImageToolTip(string value)
public string get_ExpandImageUrl()
public void set_ExpandImageUrl(string value)
public Style get_HoverNodeStyle()
public TreeViewImageSet get_ImageSet()
public void set_ImageSet(TreeViewImageSet value)
public TreeNodeStyle get_LeafNodeStyle()
public TreeNodeStyleCollection get_LevelStyles()
public string get_LineImagesFolder()
public void set_LineImagesFolder(string value)
public int get_MaxDataBindDepth()
public void set_MaxDataBindDepth(int value)
public int get_NodeIndent()
public void set_NodeIndent(int value)
public TreeNodeCollection get_Nodes()
public TreeNodeStyle get_NodeStyle()
public bool get_NodeWrap()
public void set_NodeWrap(bool value)
public string get_NoExpandImageUrl()
public void set_NoExpandImageUrl(string value)
public TreeNodeStyle get_ParentNodeStyle()
public char get_PathSeparator()
public void set_PathSeparator(char value)
public bool get_PopulateNodesFromClient()
public void set_PopulateNodesFromClient(bool value)
public TreeNodeStyle get_RootNodeStyle()
public TreeNodeStyle get_SelectedNodeStyle()
private Style get_ControlLinkStyle()
private Style get_NodeLinkStyle()
private Style get_RootNodeLinkStyle()
private Style get_ParentNodeLinkStyle()
private Style get_SelectedNodeLinkStyle()
private Style get_LeafNodeLinkStyle()
private Style get_HoverNodeLinkStyle()
public TreeNodeTypes get_ShowCheckBoxes()
public void set_ShowCheckBoxes(TreeNodeTypes value)
public bool get_ShowExpandCollapse()
public void set_ShowExpandCollapse(bool value)
public bool get_ShowLines()
public void set_ShowLines(bool value)
public string get_SkipLinkText()
public void set_SkipLinkText(string value)
public TreeNode get_SelectedNode()
public string get_SelectedValue()
public string get_Target()
public void set_Target(string value)
public bool get_Visible()
public void set_Visible(bool value)
public TreeNodeCollection get_CheckedNodes()
private void FindCheckedNodes(TreeNodeCollection nodeList, TreeNodeCollection result)
public void ExpandAll()
public void CollapseAll()
public TreeNode FindNode(string valuePath)
private ImageStyle GetImageStyle()
protected HtmlTextWriterTag get_TagKey()
protected internal TreeNode CreateNode()
public void DataBind()
protected void SetNodeDataBound(TreeNode node, bool dataBound)
protected void SetNodeDataPath(TreeNode node, string dataPath)
protected void SetNodeDataItem(TreeNode node, object dataItem)
protected internal void OnInit(EventArgs e)
internal void SetSelectedNode(TreeNode node, bool loading)
internal void NotifyCheckChanged(TreeNode node)
internal void NotifyExpandedChanged(TreeNode node)
internal void NotifyPopulateRequired(TreeNode node)
protected void TrackViewState()
protected object SaveViewState()
protected void LoadViewState(object state)
protected void RaisePostBackEvent(string eventArgument)
private void HandleSelectEvent(TreeNode node)
private void HandleExpandCollapseEvent(TreeNode node)
protected void RaisePostDataChangedEvent()
private TreeNode MakeNodeTree(String[] args)
protected void RaiseCallbackEvent(string eventArgument)
protected string GetCallbackResult()
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
private void System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(string eventArgs)
private string System.Web.UI.ICallbackEventHandler.GetCallbackResult()
protected ControlCollection CreateControlCollection()
protected internal void PerformDataBinding()
private void FillBoundChildrenRecursive(IHierarchicalEnumerable hEnumerable, TreeNodeCollection nodeCollection)
protected bool LoadPostData(string postDataKey, NameValueCollection postCollection)
protected internal void OnPreRender(EventArgs e)
private void EnsureStylesPrepared()
private void PrepareStyles()
private void SetNodesExpandedToDepthRecursive(TreeNodeCollection nodes)
private string IncrementStyleClassName()
private void RegisterStyle(Style baseStyle, Style linkStyle)
private void RegisterStyle(Style baseStyle)
private string GetBindingKey(string dataMember, int depth)
private void InitializeDataBindings()
internal TreeNodeBinding FindBindingForNode(string type, int depth)
internal void DecorateNode(TreeNode node)
protected internal void RenderContents(HtmlTextWriter writer)
protected void AddAttributesToRender(HtmlTextWriter writer)
public void RenderBeginTag(HtmlTextWriter writer)
public void RenderEndTag(HtmlTextWriter writer)
private void RenderNode(HtmlTextWriter writer, TreeNode node, int level, ArrayList levelLines, bool hasPrevious, bool hasNext)
private void AddChildrenPadding(HtmlTextWriter writer, TreeNode node)
private void RenderMenuItemSpacing(HtmlTextWriter writer, Unit itemSpacing)
private Unit GetNodeSpacing(TreeNode node)
private void AddNodeStyle(HtmlTextWriter writer, TreeNode node, int level, bool nodeIsSelected)
private void AddNodeLinkStyle(HtmlTextWriter writer, TreeNode node, int level, bool nodeIsSelected)
private void BeginNodeTag(HtmlTextWriter writer, TreeNode node, bool clientExpand)
private string GetNodeImageToolTip(bool expand, string txt)
private string GetNodeClientId(TreeNode node, string sufix)
private string GetNodeImageUrl(string shape, ImageStyle imageStyle)
private string GetNodeIconUrl(string icon)
private string GetClientEvent(TreeNode node, string ev)
private string GetClientExpandEvent(TreeNode node)
private TreeNode FindNodeByPos(string path)
private void UnsetCheckStates(TreeNodeCollection col, NameValueCollection states)
private void SetCheckStates(NameValueCollection states)
private void UnsetExpandStates(TreeNodeCollection col, String[] states)
private void SetExpandStates(String[] states)
private string GetExpandStates()
private void GetExpandStates(StringBuilder sb, TreeNode node)
}
public System.Web.UI.WebControls.TreeViewImageSet : Enum {
public int value__
public TreeViewImageSet Custom
public TreeViewImageSet XPFileExplorer
public TreeViewImageSet Msdn
public TreeViewImageSet WindowsHelp
public TreeViewImageSet Simple
public TreeViewImageSet Simple2
public TreeViewImageSet BulletedList
public TreeViewImageSet BulletedList2
public TreeViewImageSet BulletedList3
public TreeViewImageSet BulletedList4
public TreeViewImageSet Arrows
public TreeViewImageSet News
public TreeViewImageSet Contacts
public TreeViewImageSet Inbox
public TreeViewImageSet Events
public TreeViewImageSet Faq
}
public System.Web.UI.WebControls.Unit : ValueType {
private UnitType type
private double value
private bool valueSet
public Unit Empty
public bool IsEmpty
public UnitType Type
public double Value
public void .ctor(double value, UnitType type)
public void .ctor(double value)
public void .ctor(int value)
internal void .ctor(string input, char sep)
public void .ctor(string value)
public void .ctor(string value, CultureInfo culture)
internal void .ctor(string value, CultureInfo culture, UnitType t)
public bool get_IsEmpty()
public UnitType get_Type()
public double get_Value()
public Unit Parse(string s)
public Unit Parse(string s, CultureInfo culture)
public Unit Percentage(double n)
public Unit Pixel(int n)
public Unit Point(int n)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(Unit left, Unit right)
public bool op_Inequality(Unit left, Unit right)
public Unit op_Implicit(int n)
internal string GetExtension(UnitType type)
public string ToString(CultureInfo culture)
public string ToString()
public string ToString(IFormatProvider formatProvider)
}
public System.Web.UI.WebControls.UnitConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
}
public System.Web.UI.WebControls.UnitType : Enum {
public int value__
public UnitType Pixel
public UnitType Point
public UnitType Pica
public UnitType Inch
public UnitType Mm
public UnitType Cm
public UnitType Percentage
public UnitType Em
public UnitType Ex
}
public System.Web.UI.WebControls.ValidatedControlConverter : ControlIDConverter {
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
protected bool FilterControl(Control control)
}
public System.Web.UI.WebControls.ValidationCompareOperator : Enum {
public int value__
public ValidationCompareOperator Equal
public ValidationCompareOperator NotEqual
public ValidationCompareOperator GreaterThan
public ValidationCompareOperator GreaterThanEqual
public ValidationCompareOperator LessThan
public ValidationCompareOperator LessThanEqual
public ValidationCompareOperator DataTypeCheck
}
public System.Web.UI.WebControls.ValidationDataType : Enum {
public int value__
public ValidationDataType String
public ValidationDataType Integer
public ValidationDataType Double
public ValidationDataType Date
public ValidationDataType Currency
}
public System.Web.UI.WebControls.ValidationSummary : WebControl {
private bool pre_render_called
private bool has_errors
public ValidationSummaryDisplayMode DisplayMode
public bool EnableClientScript
public Color ForeColor
public string HeaderText
public bool ShowMessageBox
public bool ShowSummary
public string ValidationGroup
public bool SupportsDisabledAttribute
public bool ShowModelStateErrors
public bool ShowValidationErrors
public ValidationSummaryDisplayMode get_DisplayMode()
public void set_DisplayMode(ValidationSummaryDisplayMode value)
public bool get_EnableClientScript()
public void set_EnableClientScript(bool value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public string get_HeaderText()
public void set_HeaderText(string value)
public bool get_ShowMessageBox()
public void set_ShowMessageBox(bool value)
public bool get_ShowSummary()
public void set_ShowSummary(bool value)
public string get_ValidationGroup()
public void set_ValidationGroup(string value)
public bool get_SupportsDisabledAttribute()
protected void AddAttributesToRender(HtmlTextWriter writer)
internal void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue)
internal void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode)
protected internal void OnInit(EventArgs e)
protected internal void OnPreRender(EventArgs e)
protected internal void Render(HtmlTextWriter writer)
public bool get_ShowModelStateErrors()
public void set_ShowModelStateErrors(bool value)
public bool get_ShowValidationErrors()
public void set_ShowValidationErrors(bool value)
}
public System.Web.UI.WebControls.ValidationSummaryDisplayMode : Enum {
public int value__
public ValidationSummaryDisplayMode List
public ValidationSummaryDisplayMode BulletList
public ValidationSummaryDisplayMode SingleParagraph
}
public System.Web.UI.WebControls.ValidatorDisplay : Enum {
public int value__
public ValidatorDisplay None
public ValidatorDisplay Static
public ValidatorDisplay Dynamic
}
public System.Web.UI.WebControls.VerticalAlign : Enum {
public int value__
public VerticalAlign NotSet
public VerticalAlign Top
public VerticalAlign Middle
public VerticalAlign Bottom
}
internal System.Web.UI.WebControls.VerticalAlignConverter : EnumConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Web.UI.WebControls.View : Control {
private object ActivateEvent
private object DeactivateEvent
public bool EnableTheming
internal bool VisibleInternal
public bool Visible
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
internal void NotifyActivation(bool activated)
public void add_Activate(EventHandler value)
public void remove_Activate(EventHandler value)
public void add_Deactivate(EventHandler value)
public void remove_Deactivate(EventHandler value)
protected void OnActivate(EventArgs e)
protected void OnDeactivate(EventArgs e)
internal bool get_VisibleInternal()
internal void set_VisibleInternal(bool value)
public bool get_Visible()
public void set_Visible(bool value)
}
public System.Web.UI.WebControls.ViewCollection : ControlCollection {
public View Item
public void .ctor(Control owner)
public void Add(Control v)
public void AddAt(int index, Control v)
public View get_Item(int i)
}
public System.Web.UI.WebControls.WebColorConverter : ColorConverter {
private Hashtable htmlSysColorTable
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
private void InitializeHTMLSysColorTable()
}
public System.Web.UI.WebControls.WebControl : Control {
private string DEFAULT_DISABLED_CSS_CLASS
private Style style
private HtmlTextWriterTag tag
private string tag_name
private AttributeCollection attributes
private StateBag attribute_state
private bool enabled
private bool track_enabled_state
private string <DisabledCssClass>k__BackingField
private Char[] _script_trim_chars
public string AccessKey
public AttributeCollection Attributes
public Color BackColor
public Color BorderColor
public BorderStyle BorderStyle
public Unit BorderWidth
public Style ControlStyle
public bool ControlStyleCreated
public string CssClass
public bool Enabled
public bool EnableTheming
public FontInfo Font
public Color ForeColor
public bool HasAttributes
public Unit Height
public string SkinID
public CssStyleCollection Style
public short TabIndex
public string ToolTip
public Unit Width
protected HtmlTextWriterTag TagKey
protected string TagName
protected internal bool IsEnabled
public string DisabledCssClass
public bool SupportsDisabledAttribute
public void .ctor(HtmlTextWriterTag tag)
protected void .ctor(string tag)
public string get_AccessKey()
public void set_AccessKey(string value)
public AttributeCollection get_Attributes()
public Color get_BackColor()
public void set_BackColor(Color value)
public Color get_BorderColor()
public void set_BorderColor(Color value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public Unit get_BorderWidth()
public void set_BorderWidth(Unit value)
public Style get_ControlStyle()
public bool get_ControlStyleCreated()
public string get_CssClass()
public void set_CssClass(string value)
public bool get_Enabled()
public void set_Enabled(bool value)
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
public FontInfo get_Font()
public Color get_ForeColor()
public void set_ForeColor(Color value)
public bool get_HasAttributes()
public Unit get_Height()
public void set_Height(Unit value)
public string get_SkinID()
public void set_SkinID(string value)
public CssStyleCollection get_Style()
public short get_TabIndex()
public void set_TabIndex(short value)
public string get_ToolTip()
public void set_ToolTip(string value)
public Unit get_Width()
public void set_Width(Unit value)
protected HtmlTextWriterTag get_TagKey()
protected string get_TagName()
protected internal bool get_IsEnabled()
public string get_DisabledCssClass()
public void set_DisabledCssClass(string value)
public bool get_SupportsDisabledAttribute()
public void ApplyStyle(Style s)
public void CopyBaseAttributes(WebControl controlSrc)
public void MergeStyle(Style s)
public void RenderBeginTag(HtmlTextWriter writer)
public void RenderEndTag(HtmlTextWriter writer)
internal string BuildScriptAttribute(string name, string tail)
internal void AddDisplayStyleAttribute(HtmlTextWriter writer)
private void RenderDisabled(HtmlTextWriter writer)
protected void AddAttributesToRender(HtmlTextWriter writer)
protected Style CreateControlStyle()
protected void LoadViewState(object savedState)
internal string InlinePropertiesSet()
internal void VerifyInlinePropertiesNotSet()
protected internal void Render(HtmlTextWriter writer)
protected internal void RenderContents(HtmlTextWriter writer)
protected object SaveViewState()
protected void TrackViewState()
private string System.Web.UI.IAttributeAccessor.GetAttribute(string key)
private void System.Web.UI.IAttributeAccessor.SetAttribute(string key, string value)
}
public System.Web.UI.WebControls.WebParts.AppearanceEditorPart : EditorPart {
public bool ApplyChanges()
public void SyncChanges()
}
public System.Web.UI.WebControls.WebParts.BehaviorEditorPart : EditorPart {
public bool ApplyChanges()
public void SyncChanges()
}
public System.Web.UI.WebControls.WebParts.CatalogPart : Part {
public string DisplayTitle
public string get_DisplayTitle()
public WebPartDescriptionCollection GetAvailableWebPartDescriptions()
public WebPart GetWebPart(WebPartDescription description)
}
public System.Web.UI.WebControls.WebParts.CatalogPartChrome : object {
public void .ctor(CatalogZoneBase zone)
public void PerformPreRender()
public void RenderCatalogPart(HtmlTextWriter writer, CatalogPart catalogPart)
}
public System.Web.UI.WebControls.WebParts.CatalogPartCollection : ReadOnlyCollectionBase {
public CatalogPartCollection Empty
public CatalogPart Item
public void .ctor(ICollection catalogParts)
public void .ctor(CatalogPartCollection existingCatalogParts, ICollection catalogParts)
public CatalogPart get_Item(int index)
public CatalogPart get_Item(string id)
public bool Contains(CatalogPart catalogPart)
public void CopyTo(CatalogPart[] array, int index)
public int IndexOf(CatalogPart catalogPart)
}
public System.Web.UI.WebControls.WebParts.CatalogZone : CatalogZoneBase {
public ITemplate ZoneTemplate
public ITemplate get_ZoneTemplate()
public void set_ZoneTemplate(ITemplate value)
protected CatalogPartCollection CreateCatalogParts()
}
public System.Web.UI.WebControls.WebParts.CatalogZoneBase : ToolZone {
public WebPartVerb AddVerb
public CatalogPartChrome CatalogPartChrome
public CatalogPartCollection CatalogParts
public WebPartVerb CloseVerb
public string EmptyZoneText
public string HeaderText
public string InstructionText
public Style PartLinkStyle
public string SelectedCatalogPartID
public Style SelectedPartLinkStyle
public string SelectTargetZoneText
public bool ShowCatalogIcons
public WebPartVerb get_AddVerb()
public CatalogPartChrome get_CatalogPartChrome()
public CatalogPartCollection get_CatalogParts()
public WebPartVerb get_CloseVerb()
public string get_EmptyZoneText()
public void set_EmptyZoneText(string value)
public string get_HeaderText()
public void set_HeaderText(string value)
public string get_InstructionText()
public void set_InstructionText(string value)
public Style get_PartLinkStyle()
public string get_SelectedCatalogPartID()
public void set_SelectedCatalogPartID(string value)
public Style get_SelectedPartLinkStyle()
public string get_SelectTargetZoneText()
public void set_SelectTargetZoneText(string value)
public bool get_ShowCatalogIcons()
public void set_ShowCatalogIcons(bool value)
protected void Close()
protected void RaisePostBackEvent(string eventArgument)
protected void RenderBody(HtmlTextWriter writer)
protected void RenderFooter(HtmlTextWriter writer)
protected void RenderVerbs(HtmlTextWriter writer)
private bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection)
private void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent()
}
public System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute : Attribute {
public bool AllowsMultipleConnections
public Type ConnectionPointType
public string DisplayName
public string ID
public void .ctor(string displayName)
public void .ctor(string displayName, string id)
public void .ctor(string displayName, string id, Type connectionPointType)
public void .ctor(string displayName, Type connectionPointType)
public bool get_AllowsMultipleConnections()
public void set_AllowsMultipleConnections(bool value)
public Type get_ConnectionPointType()
public string get_DisplayName()
public string get_ID()
}
public System.Web.UI.WebControls.WebParts.ConnectionConsumerCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object conn)
public IAsyncResult BeginInvoke(object conn, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection : ReadOnlyCollectionBase {
public ConnectionInterfaceCollection Empty
public Type Item
public void .ctor(ICollection connectionInterfaces)
public void .ctor(ConnectionInterfaceCollection existingConnectionInterfaces, ICollection connectionInterfaces)
public bool Contains(Type value)
public void CopyTo(Type[] array, int index)
public int IndexOf(Type value)
public Type get_Item(int index)
}
public System.Web.UI.WebControls.WebParts.ConnectionPoint : object {
private bool allowMultiConn
private string name
private string id
private Type interfaceType
private Type controlType
private MethodInfo callBackMethod
public string DefaultID
internal MethodInfo CallbackMethod
public bool AllowsMultipleConnections
public Type ControlType
public string ID
public Type InterfaceType
public string Name
public string DisplayName
internal void .ctor(MethodInfo callBack, Type interFace, Type control, string name, string id, bool allowsMultiConnections)
internal MethodInfo get_CallbackMethod()
public bool GetEnabled(Control control)
public bool get_AllowsMultipleConnections()
public Type get_ControlType()
public string get_ID()
public Type get_InterfaceType()
public string get_Name()
public string get_DisplayName()
}
public System.Web.UI.WebControls.WebParts.ConnectionPointType : Enum {
public int value__
public ConnectionPointType Consumer
public ConnectionPointType Provider
}
public System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute : Attribute {
public bool AllowsMultipleConnections
public Type ConnectionPointType
public string DisplayName
public string ID
public void .ctor(string displayName)
public void .ctor(string displayName, string id)
public void .ctor(string displayName, string id, Type connectionPointType)
public void .ctor(string displayName, Type connectionPointType)
public bool get_AllowsMultipleConnections()
public void set_AllowsMultipleConnections(bool value)
public Type get_ConnectionPointType()
public string get_DisplayName()
public string get_ID()
}
public System.Web.UI.WebControls.WebParts.ConnectionProviderCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.ConnectionsZone : ToolZone {
public WebPartVerb CancelVerb
public WebPartVerb CloseVerb
public string ConfigureConnectionTitle
public WebPartVerb ConfigureVerb
public string ConnectToConsumerInstructionText
public string ConnectToConsumerText
public string ConnectToConsumerTitle
public string ConnectToProviderInstructionText
public string ConnectToProviderText
public string ConnectToProviderTitle
public WebPartVerb ConnectVerb
public string ConsumersInstructionText
public string ConsumersTitle
public WebPartVerb DisconnectVerb
protected bool Display
public string EmptyZoneText
public string ExistingConnectionErrorMessage
public string GetFromText
public string GetText
public string HeaderText
public string InstructionText
public string InstructionTitle
public string NewConnectionErrorMessage
public string NoExistingConnectionInstructionText
public string NoExistingConnectionTitle
public PartChromeType PartChromeType
public string ProvidersInstructionText
public string ProvidersTitle
public string SendText
public string SendToText
public WebPartVerb get_CancelVerb()
public WebPartVerb get_CloseVerb()
public string get_ConfigureConnectionTitle()
public void set_ConfigureConnectionTitle(string value)
public WebPartVerb get_ConfigureVerb()
public string get_ConnectToConsumerInstructionText()
public void set_ConnectToConsumerInstructionText(string value)
public string get_ConnectToConsumerText()
public void set_ConnectToConsumerText(string value)
public string get_ConnectToConsumerTitle()
public void set_ConnectToConsumerTitle(string value)
public string get_ConnectToProviderInstructionText()
public void set_ConnectToProviderInstructionText(string value)
public string get_ConnectToProviderText()
public void set_ConnectToProviderText(string value)
public string get_ConnectToProviderTitle()
public void set_ConnectToProviderTitle(string value)
public WebPartVerb get_ConnectVerb()
public string get_ConsumersInstructionText()
public void set_ConsumersInstructionText(string value)
public string get_ConsumersTitle()
public void set_ConsumersTitle(string value)
public WebPartVerb get_DisconnectVerb()
protected bool get_Display()
public string get_EmptyZoneText()
public void set_EmptyZoneText(string value)
public string get_ExistingConnectionErrorMessage()
public void set_ExistingConnectionErrorMessage(string value)
public string get_GetFromText()
public void set_GetFromText(string value)
public string get_GetText()
public void set_GetText(string value)
public string get_HeaderText()
public void set_HeaderText(string value)
public string get_InstructionText()
public void set_InstructionText(string value)
public string get_InstructionTitle()
public void set_InstructionTitle(string value)
public string get_NewConnectionErrorMessage()
public void set_NewConnectionErrorMessage(string value)
public string get_NoExistingConnectionInstructionText()
public void set_NoExistingConnectionInstructionText(string value)
public string get_NoExistingConnectionTitle()
public void set_NoExistingConnectionTitle(string value)
public PartChromeType get_PartChromeType()
public void set_PartChromeType(PartChromeType value)
public string get_ProvidersInstructionText()
public void set_ProvidersInstructionText(string value)
public string get_ProvidersTitle()
public void set_ProvidersTitle(string value)
public string get_SendText()
public void set_SendText(string value)
public string get_SendToText()
public void set_SendToText(string value)
protected void Close()
protected void OnDisplayModeChanged(object sender, WebPartDisplayModeEventArgs e)
protected void OnSelectedWebPartChanged(object sender, WebPartEventArgs e)
protected void RaisePostBackEvent(string eventArgument)
protected void RenderBody(HtmlTextWriter writer)
protected void RenderVerbs(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : ConnectionPoint {
public void .ctor(MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections)
public void SetObject(Control control, object data)
public bool SupportsConnection(Control control, TypeCollection interfaces)
}
public System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection : ReadOnlyCollectionBase {
public ConsumerConnectionPoint Default
public ConsumerConnectionPoint Item
public void .ctor(ICollection connectionPoints)
public ConsumerConnectionPoint get_Default()
public ConsumerConnectionPoint get_Item(int index)
public ConsumerConnectionPoint get_Item(string id)
public bool Contains(ConsumerConnectionPoint connectionPoint)
public void CopyTo(ConsumerConnectionPoint[] array, int index)
public int IndexOf(ConsumerConnectionPoint connectionPoint)
}
public System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart : CatalogPart {
public string WebPartsListUserControlPath
public ITemplate WebPartsTemplate
public string get_WebPartsListUserControlPath()
public void set_WebPartsListUserControlPath(string value)
public ITemplate get_WebPartsTemplate()
public void set_WebPartsTemplate(ITemplate value)
public WebPartDescriptionCollection GetAvailableWebPartDescriptions()
public WebPart GetWebPart(WebPartDescription description)
}
public System.Web.UI.WebControls.WebParts.EditorPart : Part {
private bool display
private WebPart webPartToEdit
private object zone
private string displayTitle
public bool Display
public string DisplayTitle
protected WebPart WebPartToEdit
public bool ApplyChanges()
protected IDictionary GetDesignModeState()
protected internal void OnPreRender(EventArgs e)
public void SyncChanges()
public bool get_Display()
public string get_DisplayTitle()
protected WebPart get_WebPartToEdit()
}
public System.Web.UI.WebControls.WebParts.EditorPartChrome : object {
public void .ctor(EditorZoneBase zone)
public void PerformPreRender()
public void RenderEditorPart(HtmlTextWriter writer, EditorPart editorPart)
}
public System.Web.UI.WebControls.WebParts.EditorPartCollection : ReadOnlyCollectionBase {
public EditorPartCollection Empty
public EditorPart Item
public void .ctor(ICollection editorParts)
public void .ctor(EditorPartCollection existingEditorParts, ICollection editorParts)
public bool Contains(EditorPart editorPart)
public void CopyTo(EditorPart[] array, int index)
public int IndexOf(EditorPart editorPart)
public EditorPart get_Item(int index)
}
public System.Web.UI.WebControls.WebParts.EditorZone : EditorZoneBase {
public ITemplate ZoneTemplate
public ITemplate get_ZoneTemplate()
public void set_ZoneTemplate(ITemplate value)
protected EditorPartCollection CreateEditorParts()
}
public System.Web.UI.WebControls.WebParts.EditorZoneBase : ToolZone {
public WebPartVerb ApplyVerb
public WebPartVerb CancelVerb
protected bool Display
public EditorPartChrome EditorPartChrome
public EditorPartCollection EditorParts
public string EmptyZoneText
public string ErrorText
public string HeaderText
public string InstructionText
public WebPartVerb OKVerb
public WebPartVerb get_ApplyVerb()
public WebPartVerb get_CancelVerb()
protected bool get_Display()
public EditorPartChrome get_EditorPartChrome()
public EditorPartCollection get_EditorParts()
public string get_EmptyZoneText()
public void set_EmptyZoneText(string value)
public string get_ErrorText()
public void set_ErrorText(string value)
public string get_HeaderText()
public void set_HeaderText(string value)
public string get_InstructionText()
public void set_InstructionText(string value)
public WebPartVerb get_OKVerb()
protected void Close()
protected void OnDisplayModeChanged(object sender, WebPartDisplayModeEventArgs e)
protected void OnSelectedWebPartChanged(object sender, WebPartEventArgs e)
protected void RaisePostBackEvent(string eventArgument)
protected void RenderBody(HtmlTextWriter writer)
protected void RenderVerbs(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.WebParts.ErrorWebPart : ProxyWebPart {
public string ErrorMessage
public void .ctor(string originalID, string originalTypeName, string originalPath, string genericWebPartID)
public string get_ErrorMessage()
public void set_ErrorMessage(string value)
private bool System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.get_TracksChanges()
private void System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.BeginLoad()
private void System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.BeginSave()
private void System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.EndLoad()
private void System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.EndSave()
}
public System.Web.UI.WebControls.WebParts.FieldCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object fieldValue)
public IAsyncResult BeginInvoke(object fieldValue, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.GenericWebPart : WebPart {
public Control ChildControl
public object WebBrowsableObject
public Control get_ChildControl()
public object get_WebBrowsableObject()
public EditorPartCollection CreateEditorParts()
}
public System.Web.UI.WebControls.WebParts.ImportCatalogPart : CatalogPart {
public string BrowseHelpText
public string ImportedPartLabelText
public string PartImportErrorLabelText
public string UploadButtonText
public string UploadHelpText
public string get_BrowseHelpText()
public void set_BrowseHelpText(string value)
public string get_ImportedPartLabelText()
public void set_ImportedPartLabelText(string value)
public string get_PartImportErrorLabelText()
public void set_PartImportErrorLabelText(string value)
public string get_UploadButtonText()
public void set_UploadButtonText(string value)
public string get_UploadHelpText()
public void set_UploadHelpText(string value)
public WebPartDescriptionCollection GetAvailableWebPartDescriptions()
public WebPart GetWebPart(WebPartDescription description)
}
public System.Web.UI.WebControls.WebParts.IPersonalizable {
public bool IsDirty
public bool get_IsDirty()
public void Load(PersonalizationDictionary state)
public void Save(PersonalizationDictionary state)
}
public System.Web.UI.WebControls.WebParts.ITrackingPersonalizable {
public bool TracksChanges
public bool get_TracksChanges()
public void BeginLoad()
public void BeginSave()
public void EndLoad()
public void EndSave()
}
public System.Web.UI.WebControls.WebParts.ITransformerConfigurationControl {
public void add_Cancelled(EventHandler value)
public void remove_Cancelled(EventHandler value)
public void add_Succeeded(EventHandler value)
public void remove_Succeeded(EventHandler value)
}
public System.Web.UI.WebControls.WebParts.IVersioningPersonalizable {
public void Load(IDictionary unknownProperties)
}
public System.Web.UI.WebControls.WebParts.IWebActionable {
public WebPartVerbCollection Verbs
public WebPartVerbCollection get_Verbs()
}
public System.Web.UI.WebControls.WebParts.IWebEditable {
public object WebBrowsableObject
public object get_WebBrowsableObject()
public EditorPartCollection CreateEditorParts()
}
public System.Web.UI.WebControls.WebParts.IWebPart {
public string CatalogIconImageUrl
public string Description
public string Subtitle
public string Title
public string TitleIconImageUrl
public string TitleUrl
public string get_CatalogIconImageUrl()
public void set_CatalogIconImageUrl(string value)
public string get_Description()
public void set_Description(string value)
public string get_Subtitle()
public string get_Title()
public void set_Title(string value)
public string get_TitleIconImageUrl()
public void set_TitleIconImageUrl(string value)
public string get_TitleUrl()
public void set_TitleUrl(string value)
}
public System.Web.UI.WebControls.WebParts.IWebPartField {
public PropertyDescriptor Schema
public PropertyDescriptor get_Schema()
public void GetFieldValue(FieldCallback callback)
}
public System.Web.UI.WebControls.WebParts.IWebPartParameters {
public PropertyDescriptorCollection Schema
public PropertyDescriptorCollection get_Schema()
public void GetParametersData(ParametersCallback callback)
public void SetConsumerSchema(PropertyDescriptorCollection schema)
}
public System.Web.UI.WebControls.WebParts.IWebPartRow {
public PropertyDescriptorCollection Schema
public PropertyDescriptorCollection get_Schema()
public void GetRowData(RowCallback callback)
}
public System.Web.UI.WebControls.WebParts.IWebPartTable {
public PropertyDescriptorCollection Schema
public PropertyDescriptorCollection get_Schema()
public void GetTableData(TableCallback callback)
}
public System.Web.UI.WebControls.WebParts.LayoutEditorPart : EditorPart {
public bool ApplyChanges()
public void SyncChanges()
}
public System.Web.UI.WebControls.WebParts.PageCatalogPart : CatalogPart {
public WebPartDescriptionCollection GetAvailableWebPartDescriptions()
public WebPart GetWebPart(WebPartDescription description)
}
public System.Web.UI.WebControls.WebParts.ParametersCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IDictionary parametersData)
public IAsyncResult BeginInvoke(IDictionary parametersData, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.Part : Panel {
private string description
private string title
private PartChromeState chrome_state
private PartChromeType chrome_type
private ControlCollection controls
public PartChromeState ChromeState
public PartChromeType ChromeType
public ControlCollection Controls
public string Description
public string Title
public void DataBind()
private void System.Web.UI.WebControls.ICompositeControlDesignerAccessor.RecreateChildControls()
public PartChromeState get_ChromeState()
public void set_ChromeState(PartChromeState value)
public PartChromeType get_ChromeType()
public void set_ChromeType(PartChromeType value)
public ControlCollection get_Controls()
public string get_Description()
public void set_Description(string value)
public string get_Title()
public void set_Title(string value)
}
public System.Web.UI.WebControls.WebParts.PartChromeState : Enum {
public int value__
public PartChromeState Normal
public PartChromeState Minimized
}
public System.Web.UI.WebControls.WebParts.PartChromeType : Enum {
public int value__
public PartChromeType Default
public PartChromeType TitleAndBorder
public PartChromeType None
public PartChromeType TitleOnly
public PartChromeType BorderOnly
}
public System.Web.UI.WebControls.WebParts.PersonalizableAttribute : Attribute {
public PersonalizableAttribute Default
public PersonalizableAttribute NotPersonalizable
public PersonalizableAttribute Personalizable
public PersonalizableAttribute SharedPersonalizable
public PersonalizableAttribute UserPersonalizable
private bool isPersonalizable
private bool isSensitive
private PersonalizationScope scope
public bool IsPersonalizable
public bool IsSensitive
public PersonalizationScope Scope
public void .ctor(bool isPersonalizable)
public void .ctor(PersonalizationScope scope)
public void .ctor(PersonalizationScope scope, bool isSensitive)
public bool get_IsPersonalizable()
public bool get_IsSensitive()
public PersonalizationScope get_Scope()
public bool Equals(object obj)
public int GetHashCode()
public ICollection GetPersonalizableProperties(Type type)
private bool PropertyQualifies(PropertyInfo pi)
public bool IsDefaultAttribute()
public bool Match(object obj)
}
public System.Web.UI.WebControls.WebParts.PersonalizationAdministration : object {
public string ApplicationName
public PersonalizationProvider Provider
public PersonalizationProviderCollection Providers
public string get_ApplicationName()
public void set_ApplicationName(string value)
public PersonalizationProvider get_Provider()
public PersonalizationProviderCollection get_Providers()
public PersonalizationStateInfoCollection FindInactiveUserState(string pathToMatch, string usernameToMatch, DateTime userInactiveSinceDate)
public PersonalizationStateInfoCollection FindInactiveUserState(string pathToMatch, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords)
public PersonalizationStateInfoCollection FindSharedState(string pathToMatch)
public PersonalizationStateInfoCollection FindSharedState(string pathToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public PersonalizationStateInfoCollection FindUserState(string pathToMatch, string usernameToMatch)
public PersonalizationStateInfoCollection FindUserState(string pathToMatch, string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords)
public PersonalizationStateInfoCollection GetAllInactiveUserState(DateTime userInactiveSinceDate)
public PersonalizationStateInfoCollection GetAllInactiveUserState(DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords)
public PersonalizationStateInfoCollection GetAllState(PersonalizationScope scope)
public PersonalizationStateInfoCollection GetAllState(PersonalizationScope scope, int pageIndex, int pageSize, Int32& totalRecords)
public int GetCountOfInactiveUserState(DateTime userInactiveSinceDate)
public int GetCountOfInactiveUserState(string pathToMatch, DateTime userInactiveSinceDate)
public int GetCountOfState(PersonalizationScope scope)
public int GetCountOfState(PersonalizationScope scope, string pathToMatch)
public int GetCountOfUserState(string usernameToMatch)
public int ResetAllState(PersonalizationScope scope)
public int ResetInactiveUserState(DateTime userInactiveSinceDate)
public int ResetInactiveUserState(string path, DateTime userInactiveSinceDate)
public bool ResetSharedState(string path)
public int ResetSharedState(String[] paths)
public int ResetState(PersonalizationStateInfoCollection data)
public int ResetUserState(string path)
public bool ResetUserState(string path, string username)
public int ResetUserState(string path, String[] usernames)
public int ResetUserState(String[] usernames)
}
public System.Web.UI.WebControls.WebParts.PersonalizationDictionary : object {
public int Count
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public PersonalizationEntry Item
public ICollection Keys
public object SyncRoot
public ICollection Values
public void .ctor(int initialSize)
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public PersonalizationEntry get_Item(string key)
public void set_Item(string key, PersonalizationEntry value)
public ICollection get_Keys()
public object get_SyncRoot()
private object System.Collections.IDictionary.get_Item(object key)
private void System.Collections.IDictionary.set_Item(object key, object value)
public ICollection get_Values()
public void Add(string key, PersonalizationEntry value)
public void Clear()
public bool Contains(string key)
public void CopyTo(DictionaryEntry[] array, int index)
public IDictionaryEnumerator GetEnumerator()
public void Remove(string key)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private void System.Collections.IDictionary.Add(object key, object value)
private bool System.Collections.IDictionary.Contains(object key)
private void System.Collections.IDictionary.Remove(object key)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public System.Web.UI.WebControls.WebParts.PersonalizationEntry : object {
public bool IsSensitive
public PersonalizationScope Scope
public object Value
public void .ctor(object value, PersonalizationScope scope)
public void .ctor(object value, PersonalizationScope scope, bool isSensitive)
public bool get_IsSensitive()
public void set_IsSensitive(bool value)
public PersonalizationScope get_Scope()
public void set_Scope(PersonalizationScope value)
public object get_Value()
public void set_Value(object value)
}
public System.Web.UI.WebControls.WebParts.PersonalizationProvider : ProviderBase {
public string ApplicationName
public string get_ApplicationName()
public void set_ApplicationName(string value)
public PersonalizationScope DetermineInitialScope(WebPartManager webPartManager, PersonalizationState loadedState)
public IDictionary DetermineUserCapabilities(WebPartManager webPartManager)
public PersonalizationStateInfoCollection FindState(PersonalizationScope scope, PersonalizationStateQuery query, int pageIndex, int pageSize, Int32& totalRecords)
public int GetCountOfState(PersonalizationScope scope, PersonalizationStateQuery query)
public PersonalizationState LoadPersonalizationState(WebPartManager webPartManager, bool ignoreCurrentUser)
public void ResetPersonalizationState(WebPartManager webPartManager)
public int ResetState(PersonalizationScope scope, String[] paths, String[] usernames)
public int ResetUserState(string path, DateTime userInactiveSinceDate)
public void SavePersonalizationState(PersonalizationState state)
}
public System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection : ProviderCollection {
public void CopyTo(PersonalizationProvider[] array, int index)
}
public System.Web.UI.WebControls.WebParts.PersonalizationScope : Enum {
public int value__
public PersonalizationScope User
public PersonalizationScope Shared
}
public System.Web.UI.WebControls.WebParts.PersonalizationState : object {
public bool IsDirty
public bool IsEmpty
public WebPartManager WebPartManager
public bool get_IsDirty()
public bool get_IsEmpty()
public WebPartManager get_WebPartManager()
public void ApplyWebPartManagerPersonalization()
public void ApplyWebPartPersonalization(WebPart webPart)
public void ExtractWebPartManagerPersonalization()
public void ExtractWebPartPersonalization(WebPart webPart)
public string GetAuthorizationFilter(string webPartID)
public void SetWebPartDirty(WebPart webPart)
public void SetWebPartManagerDirty()
}
public System.Web.UI.WebControls.WebParts.PersonalizationStateInfo : object {
public DateTime LastUpdatedDate
public string Path
public int Size
public DateTime get_LastUpdatedDate()
public string get_Path()
public int get_Size()
}
public System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection : object {
public int Count
public bool IsSynchronized
public PersonalizationStateInfo Item
public object SyncRoot
public int get_Count()
public bool get_IsSynchronized()
public PersonalizationStateInfo get_Item(int index)
public PersonalizationStateInfo get_Item(string path, string username)
public object get_SyncRoot()
public void Add(PersonalizationStateInfo data)
public void Clear()
public void CopyTo(PersonalizationStateInfo[] array, int index)
public IEnumerator GetEnumerator()
public void Remove(string path, string username)
public void SetReadOnly()
private void System.Collections.ICollection.CopyTo(Array array, int index)
}
public System.Web.UI.WebControls.WebParts.PersonalizationStateQuery : object {
public object Item
public string PathToMatch
public DateTime UserInactiveSinceDate
public string UsernameToMatch
public object get_Item(string queryKey)
public void set_Item(string queryKey, object value)
public string get_PathToMatch()
public void set_PathToMatch(string value)
public DateTime get_UserInactiveSinceDate()
public void set_UserInactiveSinceDate(DateTime value)
public string get_UsernameToMatch()
public void set_UsernameToMatch(string value)
}
public System.Web.UI.WebControls.WebParts.PropertyGridEditorPart : EditorPart {
public bool ApplyChanges()
public void SyncChanges()
}
public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : ConnectionPoint {
public void .ctor(MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections)
public object GetObject(Control control)
public ConnectionInterfaceCollection GetSecondaryInterfaces(Control control)
}
public System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection : ReadOnlyCollectionBase {
public ProviderConnectionPoint Default
public ProviderConnectionPoint Item
public void .ctor(ICollection connectionPoints)
public ProviderConnectionPoint get_Default()
public ProviderConnectionPoint get_Item(int index)
public ProviderConnectionPoint get_Item(string id)
public bool Contains(ProviderConnectionPoint connectionPoint)
public void CopyTo(ProviderConnectionPoint[] array, int index)
public int IndexOf(ProviderConnectionPoint connectionPoint)
}
public System.Web.UI.WebControls.WebParts.ProxyWebPart : WebPart {
public string GenericWebPartID
public string OriginalID
public string OriginalPath
public string OriginalTypeName
public string get_GenericWebPartID()
public string get_OriginalID()
public string get_OriginalPath()
public string get_OriginalTypeName()
}
public System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection : CollectionBase {
public bool IsReadOnly
public WebPartConnection Item
public bool get_IsReadOnly()
public WebPartConnection get_Item(int index)
public void set_Item(int index, WebPartConnection value)
public WebPartConnection get_Item(string id)
public int Add(WebPartConnection value)
public bool Contains(WebPartConnection value)
public void CopyTo(WebPartConnection[] array, int index)
public int IndexOf(WebPartConnection value)
public void Insert(int index, WebPartConnection value)
public void Remove(WebPartConnection value)
}
public System.Web.UI.WebControls.WebParts.ProxyWebPartManager : Control {
public ProxyWebPartConnectionCollection StaticConnections
public ProxyWebPartConnectionCollection get_StaticConnections()
}
public System.Web.UI.WebControls.WebParts.RowCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object rowData)
public IAsyncResult BeginInvoke(object rowData, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.RowToFieldTransformer : WebPartTransformer {
public string FieldName
public string get_FieldName()
public void set_FieldName(string value)
private PropertyDescriptor System.Web.UI.WebControls.WebParts.IWebPartField.get_Schema()
public Control CreateConfigurationControl()
private void System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(FieldCallback callback)
public object Transform(object providerData)
}
public System.Web.UI.WebControls.WebParts.RowToParametersTransformer : WebPartTransformer {
public String[] ConsumerFieldNames
public String[] ProviderFieldNames
public String[] get_ConsumerFieldNames()
public void set_ConsumerFieldNames(String[] value)
public String[] get_ProviderFieldNames()
public void set_ProviderFieldNames(String[] value)
private PropertyDescriptorCollection System.Web.UI.WebControls.WebParts.IWebPartParameters.get_Schema()
public Control CreateConfigurationControl()
private void System.Web.UI.WebControls.WebParts.IWebPartParameters.GetParametersData(ParametersCallback callback)
private void System.Web.UI.WebControls.WebParts.IWebPartParameters.SetConsumerSchema(PropertyDescriptorCollection schema)
public object Transform(object providerData)
}
public System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo : PersonalizationStateInfo {
public int CountOfPersonalizations
public int SizeOfPersonalizations
public void .ctor(string path, DateTime lastUpdatedDate, int size, int sizeOfPersonalizations, int countOfPersonalizations)
public int get_CountOfPersonalizations()
public int get_SizeOfPersonalizations()
}
public System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider : PersonalizationProvider {
public string ApplicationName
public string get_ApplicationName()
public void set_ApplicationName(string value)
public PersonalizationStateInfoCollection FindState(PersonalizationScope scope, PersonalizationStateQuery query, int pageIndex, int pageSize, Int32& totalRecords)
public int GetCountOfState(PersonalizationScope scope, PersonalizationStateQuery query)
protected void LoadPersonalizationBlobs(WebPartManager webPartManager, string path, string userName, Byte[]& sharedDataBlob, Byte[]& userDataBlob)
protected void ResetPersonalizationBlob(WebPartManager webPartManager, string path, string userName)
public int ResetState(PersonalizationScope scope, String[] paths, String[] usernames)
public int ResetUserState(string path, DateTime userInactiveSinceDate)
protected void SavePersonalizationBlob(WebPartManager webPartManager, string path, string userName, Byte[] dataBlob)
}
public System.Web.UI.WebControls.WebParts.TableCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ICollection tableData)
public IAsyncResult BeginInvoke(ICollection tableData, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.ToolZone : WebZone {
public WebPartDisplayModeCollection AssociatedDisplayModes
public Style EditUIStyle
public WebPartVerb HeaderCloseVerb
public Style HeaderVerbStyle
public string InstructionText
public Style InstructionTextStyle
public Style LabelStyle
public WebPartDisplayModeCollection get_AssociatedDisplayModes()
public Style get_EditUIStyle()
public WebPartVerb get_HeaderCloseVerb()
public Style get_HeaderVerbStyle()
public string get_InstructionText()
public void set_InstructionText(string value)
public Style get_InstructionTextStyle()
public Style get_LabelStyle()
protected void RenderFooter(HtmlTextWriter writer)
protected void RenderHeader(HtmlTextWriter writer)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
}
public System.Web.UI.WebControls.WebParts.TransformerTypeCollection : ReadOnlyCollectionBase {
public TransformerTypeCollection Empty
public Type Item
public void .ctor(ICollection transformerTypes)
public void .ctor(TransformerTypeCollection existingTransformerTypes, ICollection transformerTypes)
public Type get_Item(int index)
public bool Contains(Type value)
public void CopyTo(Type[] array, int index)
public int IndexOf(Type value)
}
public System.Web.UI.WebControls.WebParts.TypeCollection : ReadOnlyCollectionBase {
public TypeCollection Empty
public Type Item
public void .ctor(ICollection types)
public void .ctor(TypeCollection existingTypes, ICollection types)
public bool Contains(Type value)
public void CopyTo(Type[] array, int index)
public int IndexOf(Type value)
public Type get_Item(int index)
}
public System.Web.UI.WebControls.WebParts.UnauthorizedWebPart : ProxyWebPart {
public void .ctor(string originalID, string originalTypeName, string originalPath, string genericWebPartID)
public void .ctor(WebPart webPart)
}
public System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo : PersonalizationStateInfo {
public DateTime LastActivityDate
public string Username
public void .ctor(string path, DateTime lastUpdatedDate, int size, string username, DateTime lastActivityDate)
public DateTime get_LastActivityDate()
public string get_Username()
}
public System.Web.UI.WebControls.WebParts.WebBrowsableAttribute : Attribute {
public WebBrowsableAttribute Yes
public WebBrowsableAttribute No
public WebBrowsableAttribute Default
private bool _browsable
public bool Browsable
public void .ctor(bool browsable)
public bool get_Browsable()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Web.UI.WebControls.WebParts.WebDescriptionAttribute : Attribute {
public WebDescriptionAttribute Default
private string _description
public string Description
protected string DescriptionValue
public void .ctor(string description)
public string get_Description()
protected string get_DescriptionValue()
protected void set_DescriptionValue(string value)
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Web.UI.WebControls.WebParts.WebDisplayNameAttribute : Attribute {
public WebDisplayNameAttribute Default
private string _displayName
public string DisplayName
protected string DisplayNameValue
public void .ctor(string displayName)
public string get_DisplayName()
protected string get_DisplayNameValue()
protected void set_DisplayNameValue(string value)
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Web.UI.WebControls.WebParts.WebPart : Part {
private WebPartVerbCollection verbs
private Allow allow
private string auth_filter
private string catalog_icon_url
private WebPartExportMode exportMode
private string titleIconImageUrl
private string titleUrl
private string helpUrl
private bool isStatic
private bool hidden
private bool isClosed
private bool hasSharedData
private bool hasUserData
private WebPartHelpMode helpMode
private int zoneIndex
public bool AllowClose
public bool AllowConnect
public bool AllowEdit
public bool AllowHide
public bool AllowMinimize
public bool AllowZoneChange
public string AuthorizationFilter
public string CatalogIconImageUrl
public PartChromeState ChromeState
public PartChromeType ChromeType
public string ConnectErrorMessage
public string Description
public ContentDirection Direction
public string DisplayTitle
public WebPartExportMode ExportMode
public bool HasSharedData
public bool HasUserData
public Unit Height
public WebPartHelpMode HelpMode
public string HelpUrl
public bool Hidden
public string ImportErrorMessage
public bool IsClosed
public bool IsShared
public bool IsStandalone
public bool IsStatic
public string Subtitle
public string Title
public string TitleIconImageUrl
public string TitleUrl
public WebPartVerbCollection Verbs
public Unit Width
public int ZoneIndex
public object WebBrowsableObject
public WebPartZoneBase Zone
protected void SetPersonalizationDirty()
public void SetPersonalizationDirty(Control control)
protected void TrackViewState()
internal void SetZoneIndex(int index)
protected internal void OnClosing(EventArgs e)
protected internal void OnConnectModeChanged(EventArgs e)
protected internal void OnDeleting(EventArgs e)
protected internal void OnEditModeChanged(EventArgs e)
public bool get_AllowClose()
public void set_AllowClose(bool value)
public bool get_AllowConnect()
public void set_AllowConnect(bool value)
public bool get_AllowEdit()
public void set_AllowEdit(bool value)
public bool get_AllowHide()
public void set_AllowHide(bool value)
public bool get_AllowMinimize()
public void set_AllowMinimize(bool value)
public bool get_AllowZoneChange()
public void set_AllowZoneChange(bool value)
public string get_AuthorizationFilter()
public void set_AuthorizationFilter(string value)
public string get_CatalogIconImageUrl()
public void set_CatalogIconImageUrl(string value)
public PartChromeState get_ChromeState()
public void set_ChromeState(PartChromeState value)
public PartChromeType get_ChromeType()
public void set_ChromeType(PartChromeType value)
public string get_ConnectErrorMessage()
public string get_Description()
public void set_Description(string value)
public ContentDirection get_Direction()
public void set_Direction(ContentDirection value)
public string get_DisplayTitle()
public WebPartExportMode get_ExportMode()
public void set_ExportMode(WebPartExportMode value)
public bool get_HasSharedData()
public bool get_HasUserData()
public Unit get_Height()
public void set_Height(Unit value)
public WebPartHelpMode get_HelpMode()
public void set_HelpMode(WebPartHelpMode value)
public string get_HelpUrl()
public void set_HelpUrl(string value)
public bool get_Hidden()
public void set_Hidden(bool value)
public string get_ImportErrorMessage()
public void set_ImportErrorMessage(string value)
public bool get_IsClosed()
public bool get_IsShared()
public bool get_IsStandalone()
public bool get_IsStatic()
public string get_Subtitle()
public string get_Title()
public void set_Title(string value)
public string get_TitleIconImageUrl()
public void set_TitleIconImageUrl(string value)
public string get_TitleUrl()
public void set_TitleUrl(string value)
public WebPartVerbCollection get_Verbs()
public Unit get_Width()
public void set_Width(Unit value)
public int get_ZoneIndex()
public object get_WebBrowsableObject()
public WebPartZoneBase get_Zone()
public EditorPartCollection CreateEditorParts()
}
public System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs : WebPartCancelEventArgs {
public WebPartZoneBase Zone
public int ZoneIndex
public void .ctor(WebPart webPart, WebPartZoneBase zone, int zoneIndex)
public WebPartZoneBase get_Zone()
public void set_Zone(WebPartZoneBase value)
public int get_ZoneIndex()
public void set_ZoneIndex(int value)
}
public System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebPartAddingEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebPartAddingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs : EventArgs {
private bool authorized
private Type type
private string path
private string authorizationFilter
private bool isShared
public Type Type
public string Path
public string AuthorizationFilter
public bool IsShared
public bool IsAuthorized
public void .ctor(Type type, string path, string authorizationFilter, bool isShared)
public Type get_Type()
public string get_Path()
public string get_AuthorizationFilter()
public bool get_IsShared()
public bool get_IsAuthorized()
public void set_IsAuthorized(bool value)
}
public System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebPartAuthorizationEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebPartAuthorizationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs : CancelEventArgs {
private WebPart _webPart
public WebPart WebPart
public void .ctor(WebPart webPart)
public WebPart get_WebPart()
public void set_WebPart(WebPart value)
}
public System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebPartCancelEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebPartCancelEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.WebPartChrome : object {
public void .ctor(WebPartZoneBase zone, WebPartManager manager)
public void PerformPreRender()
public void RenderWebPart(HtmlTextWriter writer, WebPart webPart)
}
public System.Web.UI.WebControls.WebParts.WebPartCollection : ReadOnlyCollectionBase {
public WebPart Item
public void .ctor(ICollection webParts)
public WebPart get_Item(int index)
public WebPart get_Item(string id)
public bool Contains(WebPart value)
public void CopyTo(WebPart[] array, int index)
public int IndexOf(WebPart value)
}
public System.Web.UI.WebControls.WebParts.WebPartConnection : object {
public WebPart Consumer
public ConsumerConnectionPoint ConsumerConnectionPoint
public string ConsumerConnectionPointID
public string ConsumerID
public string ID
public bool IsActive
public bool IsShared
public bool IsStatic
public WebPart Provider
public ProviderConnectionPoint ProviderConnectionPoint
public string ProviderConnectionPointID
public string ProviderID
public WebPartTransformer Transformer
public WebPartTransformerCollection Transformers
public WebPart get_Consumer()
public ConsumerConnectionPoint get_ConsumerConnectionPoint()
public string get_ConsumerConnectionPointID()
public void set_ConsumerConnectionPointID(string value)
public string get_ConsumerID()
public void set_ConsumerID(string value)
public string get_ID()
public void set_ID(string value)
public bool get_IsActive()
public bool get_IsShared()
public bool get_IsStatic()
public WebPart get_Provider()
public ProviderConnectionPoint get_ProviderConnectionPoint()
public string get_ProviderConnectionPointID()
public void set_ProviderConnectionPointID(string value)
public string get_ProviderID()
public void set_ProviderID(string value)
public WebPartTransformer get_Transformer()
public WebPartTransformerCollection get_Transformers()
}
public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection : CollectionBase {
public bool IsReadOnly
public WebPartConnection Item
public bool get_IsReadOnly()
public WebPartConnection get_Item(int index)
public void set_Item(int index, WebPartConnection value)
public WebPartConnection get_Item(string id)
public int Add(WebPartConnection value)
public bool Contains(WebPartConnection value)
public void CopyTo(WebPartConnection[] array, int index)
public int IndexOf(WebPartConnection value)
public void Insert(int index, WebPartConnection value)
public void Remove(WebPartConnection value)
}
public System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs : CancelEventArgs {
public WebPartConnection Connection
public WebPart Consumer
public ConsumerConnectionPoint ConsumerConnectionPoint
public WebPart Provider
public ProviderConnectionPoint ProviderConnectionPoint
public void .ctor(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint)
public void .ctor(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint, WebPartConnection connection)
public WebPartConnection get_Connection()
public WebPart get_Consumer()
public ConsumerConnectionPoint get_ConsumerConnectionPoint()
public WebPart get_Provider()
public ProviderConnectionPoint get_ProviderConnectionPoint()
}
public System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebPartConnectionsCancelEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebPartConnectionsCancelEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs : EventArgs {
public WebPartConnection Connection
public WebPart Consumer
public ConsumerConnectionPoint ConsumerConnectionPoint
public WebPart Provider
public ProviderConnectionPoint ProviderConnectionPoint
public void .ctor(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint)
public void .ctor(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint, WebPartConnection connection)
public WebPartConnection get_Connection()
public WebPart get_Consumer()
public ConsumerConnectionPoint get_ConsumerConnectionPoint()
public WebPart get_Provider()
public ProviderConnectionPoint get_ProviderConnectionPoint()
}
public System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebPartConnectionsEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebPartConnectionsEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.WebPartDescription : object {
public string CatalogIconImageUrl
public string Description
public string ID
public string Title
public void .ctor(string id, string title, string description, string imageUrl)
public void .ctor(WebPart part)
public string get_CatalogIconImageUrl()
public string get_Description()
public string get_ID()
public string get_Title()
}
public System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection : ReadOnlyCollectionBase {
public WebPartDescription Item
public void .ctor(ICollection webPartDescriptions)
public WebPartDescription get_Item(int index)
public WebPartDescription get_Item(string id)
public bool Contains(WebPartDescription value)
public void CopyTo(WebPartDescription[] array, int index)
public int IndexOf(WebPartDescription value)
}
public System.Web.UI.WebControls.WebParts.WebPartDisplayMode : object {
public bool AllowPageDesign
public bool AssociatedWithToolZone
public string Name
public bool RequiresPersonalization
public bool ShowHiddenWebParts
public bool get_AllowPageDesign()
public bool get_AssociatedWithToolZone()
public string get_Name()
public bool get_RequiresPersonalization()
public bool get_ShowHiddenWebParts()
public bool IsEnabled(WebPartManager webPartManager)
}
public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs : CancelEventArgs {
public WebPartDisplayMode NewDisplayMode
public void .ctor(WebPartDisplayMode newDisplayMode)
public WebPartDisplayMode get_NewDisplayMode()
public void set_NewDisplayMode(WebPartDisplayMode value)
}
public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebPartDisplayModeCancelEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebPartDisplayModeCancelEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection : CollectionBase {
public bool IsReadOnly
public WebPartDisplayMode Item
public bool get_IsReadOnly()
public WebPartDisplayMode get_Item(int index)
public WebPartDisplayMode get_Item(string modeName)
public int Add(WebPartDisplayMode value)
public bool Contains(WebPartDisplayMode value)
public void CopyTo(WebPartDisplayMode[] array, int index)
public int IndexOf(WebPartDisplayMode value)
public void Insert(int index, WebPartDisplayMode value)
}
public System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs : EventArgs {
public WebPartDisplayMode OldDisplayMode
public void .ctor(WebPartDisplayMode oldDisplayMode)
public WebPartDisplayMode get_OldDisplayMode()
public void set_OldDisplayMode(WebPartDisplayMode value)
}
public System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebPartDisplayModeEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebPartDisplayModeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.WebPartEventArgs : EventArgs {
private WebPart _webPart
public WebPart WebPart
public void .ctor(WebPart webPart)
public WebPart get_WebPart()
}
public System.Web.UI.WebControls.WebParts.WebPartEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebPartEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebPartEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.WebPartExportMode : Enum {
public int value__
public WebPartExportMode None
public WebPartExportMode All
public WebPartExportMode NonSensitiveData
}
public System.Web.UI.WebControls.WebParts.WebPartHelpMode : Enum {
public int value__
public WebPartHelpMode Modal
public WebPartHelpMode Modeless
public WebPartHelpMode Navigate
}
public System.Web.UI.WebControls.WebParts.WebPartManager : Control {
public WebPartDisplayMode BrowseDisplayMode
public WebPartDisplayMode CatalogDisplayMode
public WebPartDisplayMode ConnectDisplayMode
public WebPartDisplayMode DesignDisplayMode
public WebPartDisplayMode EditDisplayMode
public TransformerTypeCollection AvailableTransformers
public string CloseProviderWarning
public WebPartConnectionCollection Connections
public string DeleteWarning
public WebPartDisplayMode DisplayMode
public WebPartDisplayModeCollection DisplayModes
public bool EnableClientScript
public string ExportSensitiveDataWarning
public WebPartPersonalization Personalization
public WebPart SelectedWebPart
public WebPartConnectionCollection StaticConnections
public WebPartDisplayModeCollection SupportedDisplayModes
public WebPartCollection WebParts
public WebPartZoneCollection Zones
public TransformerTypeCollection get_AvailableTransformers()
public string get_CloseProviderWarning()
public void set_CloseProviderWarning(string value)
public WebPartConnectionCollection get_Connections()
public string get_DeleteWarning()
public void set_DeleteWarning(string value)
public WebPartDisplayMode get_DisplayMode()
public void set_DisplayMode(WebPartDisplayMode value)
public WebPartDisplayModeCollection get_DisplayModes()
public bool get_EnableClientScript()
public void set_EnableClientScript(bool value)
public string get_ExportSensitiveDataWarning()
public void set_ExportSensitiveDataWarning(string value)
public WebPartPersonalization get_Personalization()
public WebPart get_SelectedWebPart()
public WebPartConnectionCollection get_StaticConnections()
public WebPartDisplayModeCollection get_SupportedDisplayModes()
private bool System.Web.UI.WebControls.WebParts.IPersonalizable.get_IsDirty()
public WebPartCollection get_WebParts()
public WebPartZoneCollection get_Zones()
public void add_AuthorizeWebPart(WebPartAuthorizationEventHandler value)
public void remove_AuthorizeWebPart(WebPartAuthorizationEventHandler value)
public void add_ConnectionsActivated(EventHandler value)
public void remove_ConnectionsActivated(EventHandler value)
public void add_ConnectionsActivating(EventHandler value)
public void remove_ConnectionsActivating(EventHandler value)
public void add_DisplayModeChanged(WebPartDisplayModeEventHandler value)
public void remove_DisplayModeChanged(WebPartDisplayModeEventHandler value)
public void add_DisplayModeChanging(WebPartDisplayModeCancelEventHandler value)
public void remove_DisplayModeChanging(WebPartDisplayModeCancelEventHandler value)
public void add_SelectedWebPartChanged(WebPartEventHandler value)
public void remove_SelectedWebPartChanged(WebPartEventHandler value)
public void add_SelectedWebPartChanging(WebPartCancelEventHandler value)
public void remove_SelectedWebPartChanging(WebPartCancelEventHandler value)
public void add_WebPartAdded(WebPartEventHandler value)
public void remove_WebPartAdded(WebPartEventHandler value)
public void add_WebPartAdding(WebPartAddingEventHandler value)
public void remove_WebPartAdding(WebPartAddingEventHandler value)
public void add_WebPartClosed(WebPartEventHandler value)
public void remove_WebPartClosed(WebPartEventHandler value)
public void add_WebPartClosing(WebPartCancelEventHandler value)
public void remove_WebPartClosing(WebPartCancelEventHandler value)
public void add_WebPartDeleted(WebPartEventHandler value)
public void remove_WebPartDeleted(WebPartEventHandler value)
public void add_WebPartDeleting(WebPartCancelEventHandler value)
public void remove_WebPartDeleting(WebPartCancelEventHandler value)
public void add_WebPartMoved(WebPartEventHandler value)
public void remove_WebPartMoved(WebPartEventHandler value)
public void add_WebPartMoving(WebPartMovingEventHandler value)
public void remove_WebPartMoving(WebPartMovingEventHandler value)
public void add_WebPartsConnected(WebPartConnectionsEventHandler value)
public void remove_WebPartsConnected(WebPartConnectionsEventHandler value)
public void add_WebPartsConnecting(WebPartConnectionsCancelEventHandler value)
public void remove_WebPartsConnecting(WebPartConnectionsCancelEventHandler value)
public void add_WebPartsDisconnected(WebPartConnectionsEventHandler value)
public void remove_WebPartsDisconnected(WebPartConnectionsEventHandler value)
public void add_WebPartsDisconnecting(WebPartConnectionsCancelEventHandler value)
public void remove_WebPartsDisconnecting(WebPartConnectionsCancelEventHandler value)
public WebPart AddWebPart(WebPart webPart, WebPartZoneBase zone, int zoneIndex)
public void BeginWebPartConnecting(WebPart webPart)
public void BeginWebPartEditing(WebPart webPart)
public bool CanConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint)
public bool CanConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint, WebPartTransformer transformer)
public void CloseWebPart(WebPart webPart)
public WebPartConnection ConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint)
public WebPartConnection ConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint, WebPartTransformer transformer)
public GenericWebPart CreateWebPart(Control control)
public void DeleteWebPart(WebPart webPart)
public void DisconnectWebParts(WebPartConnection connection)
public void EndWebPartConnecting()
public void EndWebPartEditing()
public void ExportWebPart(WebPart webPart, XmlWriter writer)
public ConsumerConnectionPointCollection GetConsumerConnectionPoints(WebPart webPart)
public WebPartManager GetCurrentWebPartManager(Page page)
public string GetExportUrl(WebPart webPart)
public GenericWebPart GetGenericWebPart(Control control)
public ProviderConnectionPointCollection GetProviderConnectionPoints(WebPart webPart)
public WebPart ImportWebPart(XmlReader reader, String& errorMessage)
public bool IsAuthorized(Type type, string path, string authorizationFilter, bool isShared)
public bool IsAuthorized(WebPart webPart)
public void MoveWebPart(WebPart webPart, WebPartZoneBase zone, int zoneIndex)
private void System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary state)
private void System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary state)
}
public System.Web.UI.WebControls.WebParts.WebPartManagerInternals : object {
public void AddWebPart(WebPart webPart)
public void CallOnClosing(WebPart webPart)
public void CallOnConnectModeChanged(WebPart webPart)
public void CallOnDeleting(WebPart webPart)
public void CallOnEditModeChanged(WebPart webPart)
public bool ConnectionDeleted(WebPartConnection connection)
public object CreateObjectFromType(Type type)
public void DeleteConnection(WebPartConnection connection)
public string GetZoneID(WebPart webPart)
public void LoadConfigurationState(WebPartTransformer transformer, object savedState)
public void RemoveWebPart(WebPart webPart)
public object SaveConfigurationState(WebPartTransformer transformer)
public void SetConnectErrorMessage(WebPart webPart, string connectErrorMessage)
public void SetHasSharedData(WebPart webPart, bool hasSharedData)
public void SetHasUserData(WebPart webPart, bool hasUserData)
public void SetIsClosed(WebPart webPart, bool isClosed)
public void SetIsShared(WebPart webPart, bool isShared)
public void SetIsShared(WebPartConnection connection, bool isShared)
public void SetIsStandalone(WebPart webPart, bool isStandalone)
public void SetIsStatic(WebPart webPart, bool isStatic)
public void SetIsStatic(WebPartConnection connection, bool isStatic)
public void SetTransformer(WebPartConnection connection, WebPartTransformer transformer)
public void SetZoneID(WebPart webPart, string zoneID)
public void SetZoneIndex(WebPart webPart, int zoneIndex)
}
public System.Web.UI.WebControls.WebParts.WebPartMenuStyle : TableStyle {
public Color ShadowColor
public void .ctor(StateBag bag)
public Color get_ShadowColor()
public void set_ShadowColor(Color value)
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
}
public System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs : WebPartCancelEventArgs {
public WebPartZoneBase Zone
public int ZoneIndex
public void .ctor(WebPart webPart, WebPartZoneBase zone, int zoneIndex)
public WebPartZoneBase get_Zone()
public void set_Zone(WebPartZoneBase value)
public int get_ZoneIndex()
public void set_ZoneIndex(int value)
}
public System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebPartMovingEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebPartMovingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.WebPartPageMenuMode : Enum {
public int value__
public WebPartPageMenuMode Menu
public WebPartPageMenuMode DropDown
}
public System.Web.UI.WebControls.WebParts.WebPartPersonalization : object {
public WebPartUserCapability EnterSharedScopeUserCapability
public WebPartUserCapability ModifyStateUserCapability
public bool CanEnterSharedScope
public bool Enabled
public bool HasPersonalizationState
public PersonalizationScope InitialScope
public bool IsEnabled
public bool IsModifiable
public string ProviderName
public PersonalizationScope Scope
public void .ctor(WebPartManager owner)
public bool get_CanEnterSharedScope()
public bool get_Enabled()
public void set_Enabled(bool value)
public bool get_HasPersonalizationState()
public PersonalizationScope get_InitialScope()
public void set_InitialScope(PersonalizationScope value)
public bool get_IsEnabled()
public bool get_IsModifiable()
public string get_ProviderName()
public void set_ProviderName(string value)
public PersonalizationScope get_Scope()
public void EnsureEnabled(bool ensureModifiable)
public void ResetPersonalizationState()
public void ToggleScope()
}
public System.Web.UI.WebControls.WebParts.WebPartTracker : object {
public bool IsCircularConnection
public void .ctor(WebPart webPart, ProviderConnectionPoint providerConnectionPoint)
public bool get_IsCircularConnection()
private void System.IDisposable.Dispose()
}
public System.Web.UI.WebControls.WebParts.WebPartTransformer : object {
public Control CreateConfigurationControl()
public object Transform(object providerData)
}
public System.Web.UI.WebControls.WebParts.WebPartTransformerAttribute : Attribute {
public Type ConsumerType
public Type ProviderType
public void .ctor(Type consumerType, Type providerType)
public Type get_ConsumerType()
public Type get_ProviderType()
public Type GetConsumerType(Type transformerType)
public Type GetProviderType(Type transformerType)
}
public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection : CollectionBase {
public bool IsReadOnly
public WebPartTransformer Item
public bool get_IsReadOnly()
public WebPartTransformer get_Item(int index)
public void set_Item(int index, WebPartTransformer value)
public int Add(WebPartTransformer transformer)
public bool Contains(WebPartTransformer transformer)
public void CopyTo(WebPartTransformer[] array, int index)
public int IndexOf(WebPartTransformer transformer)
public void Insert(int index, WebPartTransformer transformer)
public void Remove(WebPartTransformer transformer)
}
public System.Web.UI.WebControls.WebParts.WebPartUserCapability : object {
public string Name
public void .ctor(string name)
public string get_Name()
}
public System.Web.UI.WebControls.WebParts.WebPartVerb : object {
private string clientClickHandler
private WebPartEventHandler serverClickHandler
private StateBag stateBag
private bool isChecked
private string description
private bool enabled
private string imageUrl
private string text
private bool visible
private string id
public string ID
private bool System.Web.UI.IStateManager.IsTrackingViewState
public bool Checked
public string ClientClickHandler
public string Description
public bool Enabled
public string ImageUrl
protected bool IsTrackingViewState
public WebPartEventHandler ServerClickHandler
public string Text
protected StateBag ViewState
public bool Visible
public string get_ID()
public void .ctor(string id, string clientClickHandler)
public void .ctor(string id, WebPartEventHandler serverClickHandler)
public void .ctor(string id, WebPartEventHandler serverClickHandler, string clientClickHandler)
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
private void System.Web.UI.IStateManager.LoadViewState(object savedState)
private object System.Web.UI.IStateManager.SaveViewState()
private void System.Web.UI.IStateManager.TrackViewState()
private bool System.Web.UI.IStateManager.get_IsTrackingViewState()
public bool get_Checked()
public void set_Checked(bool value)
public string get_ClientClickHandler()
public string get_Description()
public void set_Description(string value)
public bool get_Enabled()
public void set_Enabled(bool value)
public string get_ImageUrl()
public void set_ImageUrl(string value)
protected bool get_IsTrackingViewState()
public WebPartEventHandler get_ServerClickHandler()
public string get_Text()
public void set_Text(string value)
protected StateBag get_ViewState()
public bool get_Visible()
public void set_Visible(bool value)
}
public System.Web.UI.WebControls.WebParts.WebPartVerbCollection : ReadOnlyCollectionBase {
public WebPartVerbCollection Empty
public WebPartVerb Item
public void .ctor(ICollection verbs)
public void .ctor(WebPartVerbCollection existingVerbs, ICollection verbs)
public bool Contains(WebPartVerb value)
public void CopyTo(WebPartVerb[] array, int index)
public int IndexOf(WebPartVerb value)
public WebPartVerb get_Item(int index)
}
public System.Web.UI.WebControls.WebParts.WebPartVerbRenderMode : Enum {
public int value__
public WebPartVerbRenderMode Menu
public WebPartVerbRenderMode TitleBar
}
public System.Web.UI.WebControls.WebParts.WebPartVerbsEventArgs : EventArgs {
private WebPartVerbCollection _verbs
public WebPartVerbCollection Verbs
public void .ctor(WebPartVerbCollection verbs)
public WebPartVerbCollection get_Verbs()
public void set_Verbs(WebPartVerbCollection value)
}
public System.Web.UI.WebControls.WebParts.WebPartVerbsEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebPartVerbsEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebPartVerbsEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.UI.WebControls.WebParts.WebPartZone : WebPartZoneBase {
public ITemplate ZoneTemplate
public ITemplate get_ZoneTemplate()
public void set_ZoneTemplate(ITemplate value)
}
public System.Web.UI.WebControls.WebParts.WebPartZoneBase : WebZone {
public bool AllowLayoutChange
public WebPartVerb CloseVerb
public WebPartVerb ConnectVerb
public WebPartVerb DeleteVerb
public string DisplayTitle
public Color DragHighlightColor
public WebPartVerb EditVerb
public string EmptyZoneText
public WebPartVerb ExportVerb
protected bool HasFooter
protected bool HasHeader
public WebPartVerb HelpVerb
public Orientation LayoutOrientation
public Style MenuCheckImageStyle
public string MenuCheckImageUrl
public Style MenuLabelHoverStyle
public Style MenuLabelStyle
public string MenuLabelText
public string MenuPopupImageUrl
public WebPartMenuStyle MenuPopupStyle
public Style MenuVerbHoverStyle
public Style MenuVerbStyle
public WebPartVerb MinimizeVerb
public WebPartVerb RestoreVerb
public Style SelectedPartChromeStyle
public bool ShowTitleIcons
public ButtonType TitleBarVerbButtonType
public Style TitleBarVerbStyle
public ButtonType VerbButtonType
public WebPartChrome WebPartChrome
public WebPartCollection WebParts
public WebPartVerbRenderMode WebPartVerbRenderMode
public bool get_AllowLayoutChange()
public void set_AllowLayoutChange(bool value)
public WebPartVerb get_CloseVerb()
public WebPartVerb get_ConnectVerb()
public WebPartVerb get_DeleteVerb()
public string get_DisplayTitle()
public Color get_DragHighlightColor()
public void set_DragHighlightColor(Color value)
public WebPartVerb get_EditVerb()
public string get_EmptyZoneText()
public void set_EmptyZoneText(string value)
public WebPartVerb get_ExportVerb()
protected bool get_HasFooter()
protected bool get_HasHeader()
public WebPartVerb get_HelpVerb()
public Orientation get_LayoutOrientation()
public void set_LayoutOrientation(Orientation value)
public Style get_MenuCheckImageStyle()
public string get_MenuCheckImageUrl()
public void set_MenuCheckImageUrl(string value)
public Style get_MenuLabelHoverStyle()
public Style get_MenuLabelStyle()
public string get_MenuLabelText()
public void set_MenuLabelText(string value)
public string get_MenuPopupImageUrl()
public void set_MenuPopupImageUrl(string value)
public WebPartMenuStyle get_MenuPopupStyle()
public Style get_MenuVerbHoverStyle()
public Style get_MenuVerbStyle()
public WebPartVerb get_MinimizeVerb()
public WebPartVerb get_RestoreVerb()
public Style get_SelectedPartChromeStyle()
public bool get_ShowTitleIcons()
public void set_ShowTitleIcons(bool value)
public ButtonType get_TitleBarVerbButtonType()
public void set_TitleBarVerbButtonType(ButtonType value)
public Style get_TitleBarVerbStyle()
public ButtonType get_VerbButtonType()
public void set_VerbButtonType(ButtonType value)
public WebPartChrome get_WebPartChrome()
public WebPartCollection get_WebParts()
public WebPartVerbRenderMode get_WebPartVerbRenderMode()
public void set_WebPartVerbRenderMode(WebPartVerbRenderMode value)
public void add_CreateVerbs(WebPartVerbsEventHandler value)
public void remove_CreateVerbs(WebPartVerbsEventHandler value)
public PartChromeType GetEffectiveChromeType(Part part)
protected void RenderBody(HtmlTextWriter writer)
protected void RenderHeader(HtmlTextWriter writer)
private void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
}
public System.Web.UI.WebControls.WebParts.WebPartZoneCollection : ReadOnlyCollectionBase {
public WebPartZoneBase Item
public void .ctor(ICollection webPartZones)
public WebPartZoneBase get_Item(int index)
public WebPartZoneBase get_Item(string id)
public bool Contains(WebPartZoneBase value)
public void CopyTo(WebPartZoneBase[] array, int index)
public int IndexOf(WebPartZoneBase value)
}
public System.Web.UI.WebControls.WebParts.WebZone : CompositeControl {
public string BackImageUrl
public string EmptyZoneText
public Style EmptyZoneTextStyle
public Style ErrorStyle
public TitleStyle FooterStyle
public TitleStyle HeaderStyle
public string HeaderText
public int Padding
public Unit PartChromePadding
public Style PartChromeStyle
public PartChromeType PartChromeType
public TableStyle PartStyle
public TitleStyle PartTitleStyle
public ButtonType VerbButtonType
public Style VerbStyle
public string get_BackImageUrl()
public void set_BackImageUrl(string value)
public string get_EmptyZoneText()
public void set_EmptyZoneText(string value)
public Style get_EmptyZoneTextStyle()
public Style get_ErrorStyle()
public TitleStyle get_FooterStyle()
public TitleStyle get_HeaderStyle()
public string get_HeaderText()
public void set_HeaderText(string value)
public int get_Padding()
public void set_Padding(int value)
public Unit get_PartChromePadding()
public void set_PartChromePadding(Unit value)
public Style get_PartChromeStyle()
public PartChromeType get_PartChromeType()
public void set_PartChromeType(PartChromeType value)
public TableStyle get_PartStyle()
public TitleStyle get_PartTitleStyle()
public ButtonType get_VerbButtonType()
public void set_VerbButtonType(ButtonType value)
public Style get_VerbStyle()
public PartChromeType GetEffectiveChromeType(Part part)
}
public System.Web.UI.WebControls.Wizard : CompositeControl {
public string CancelCommandName
public string MoveCompleteCommandName
public string MoveNextCommandName
public string MovePreviousCommandName
public string MoveToCommandName
public string HeaderPlaceholderId
public string NavigationPlaceholderId
public string SideBarPlaceholderId
public string WizardStepPlaceholderId
protected string DataListID
private string CancelButtonIDShort
protected string CancelButtonID
private string CustomFinishButtonIDShort
protected string CustomFinishButtonID
private string CustomNextButtonIDShort
protected string CustomNextButtonID
private string CustomPreviousButtonIDShort
protected string CustomPreviousButtonID
private string FinishButtonIDShort
protected string FinishButtonID
private string FinishPreviousButtonIDShort
protected string FinishPreviousButtonID
private string SideBarButtonIDShort
protected string SideBarButtonID
private string StartNextButtonIDShort
protected string StartNextButtonID
private string StepNextButtonIDShort
protected string StepNextButtonID
private string StepPreviousButtonIDShort
protected string StepPreviousButtonID
private WizardStepCollection steps
private TableItemStyle stepStyle
private TableItemStyle sideBarStyle
private TableItemStyle headerStyle
private TableItemStyle navigationStyle
private Style sideBarButtonStyle
private Style cancelButtonStyle
private Style finishCompleteButtonStyle
private Style finishPreviousButtonStyle
private Style startNextButtonStyle
private Style stepNextButtonStyle
private Style stepPreviousButtonStyle
private Style navigationButtonStyle
private ITemplate finishNavigationTemplate
private ITemplate startNavigationTemplate
private ITemplate stepNavigationTemplate
private ITemplate headerTemplate
private ITemplate sideBarTemplate
private int activeStepIndex
private bool inited
private ArrayList history
private Table wizardTable
private WizardHeaderCell _headerCell
private TableCell _navigationCell
private StartNavigationContainer _startNavContainer
private StepNavigationContainer _stepNavContainer
private FinishNavigationContainer _finishNavContainer
private MultiView multiView
private DataList stepDatalist
private ArrayList styles
private Hashtable customNavigation
private object ActiveStepChangedEvent
private object CancelButtonClickEvent
private object FinishButtonClickEvent
private object NextButtonClickEvent
private object PreviousButtonClickEvent
private object SideBarButtonClickEvent
private ITemplate <LayoutTemplate>k__BackingField
public WizardStepBase ActiveStep
public int ActiveStepIndex
public string CancelButtonImageUrl
public Style CancelButtonStyle
public string CancelButtonText
public ButtonType CancelButtonType
public string CancelDestinationPageUrl
public int CellPadding
public int CellSpacing
public bool DisplayCancelButton
public bool DisplaySideBar
public string FinishCompleteButtonImageUrl
public Style FinishCompleteButtonStyle
public string FinishCompleteButtonText
public ButtonType FinishCompleteButtonType
public string FinishDestinationPageUrl
public ITemplate FinishNavigationTemplate
public string FinishPreviousButtonImageUrl
public Style FinishPreviousButtonStyle
public string FinishPreviousButtonText
public ButtonType FinishPreviousButtonType
public TableItemStyle HeaderStyle
public ITemplate HeaderTemplate
public string HeaderText
public ITemplate LayoutTemplate
public Style NavigationButtonStyle
public TableItemStyle NavigationStyle
public TableItemStyle SideBarStyle
public Style SideBarButtonStyle
public ITemplate SideBarTemplate
public string SkipLinkText
public ITemplate StartNavigationTemplate
public string StartNextButtonImageUrl
public Style StartNextButtonStyle
public string StartNextButtonText
public ButtonType StartNextButtonType
public ITemplate StepNavigationTemplate
public string StepNextButtonImageUrl
public Style StepNextButtonStyle
public string StepNextButtonText
public ButtonType StepNextButtonType
public string StepPreviousButtonImageUrl
public Style StepPreviousButtonStyle
public string StepPreviousButtonText
public ButtonType StepPreviousButtonType
public TableItemStyle StepStyle
public WizardStepCollection WizardSteps
protected HtmlTextWriterTag TagKey
internal ITemplate SideBarItemTemplate
public void add_ActiveStepChanged(EventHandler value)
public void remove_ActiveStepChanged(EventHandler value)
public void add_CancelButtonClick(EventHandler value)
public void remove_CancelButtonClick(EventHandler value)
public void add_FinishButtonClick(WizardNavigationEventHandler value)
public void remove_FinishButtonClick(WizardNavigationEventHandler value)
public void add_NextButtonClick(WizardNavigationEventHandler value)
public void remove_NextButtonClick(WizardNavigationEventHandler value)
public void add_PreviousButtonClick(WizardNavigationEventHandler value)
public void remove_PreviousButtonClick(WizardNavigationEventHandler value)
public void add_SideBarButtonClick(WizardNavigationEventHandler value)
public void remove_SideBarButtonClick(WizardNavigationEventHandler value)
protected void OnActiveStepChanged(object source, EventArgs e)
protected void OnCancelButtonClick(EventArgs e)
protected void OnFinishButtonClick(WizardNavigationEventArgs e)
protected void OnNextButtonClick(WizardNavigationEventArgs e)
protected void OnPreviousButtonClick(WizardNavigationEventArgs e)
protected void OnSideBarButtonClick(WizardNavigationEventArgs e)
public WizardStepBase get_ActiveStep()
public int get_ActiveStepIndex()
public void set_ActiveStepIndex(int value)
public string get_CancelButtonImageUrl()
public void set_CancelButtonImageUrl(string value)
public Style get_CancelButtonStyle()
public string get_CancelButtonText()
public void set_CancelButtonText(string value)
public ButtonType get_CancelButtonType()
public void set_CancelButtonType(ButtonType value)
public string get_CancelDestinationPageUrl()
public void set_CancelDestinationPageUrl(string value)
public int get_CellPadding()
public void set_CellPadding(int value)
public int get_CellSpacing()
public void set_CellSpacing(int value)
public bool get_DisplayCancelButton()
public void set_DisplayCancelButton(bool value)
public bool get_DisplaySideBar()
public void set_DisplaySideBar(bool value)
public string get_FinishCompleteButtonImageUrl()
public void set_FinishCompleteButtonImageUrl(string value)
public Style get_FinishCompleteButtonStyle()
public string get_FinishCompleteButtonText()
public void set_FinishCompleteButtonText(string value)
public ButtonType get_FinishCompleteButtonType()
public void set_FinishCompleteButtonType(ButtonType value)
public string get_FinishDestinationPageUrl()
public void set_FinishDestinationPageUrl(string value)
public ITemplate get_FinishNavigationTemplate()
public void set_FinishNavigationTemplate(ITemplate value)
public string get_FinishPreviousButtonImageUrl()
public void set_FinishPreviousButtonImageUrl(string value)
public Style get_FinishPreviousButtonStyle()
public string get_FinishPreviousButtonText()
public void set_FinishPreviousButtonText(string value)
public ButtonType get_FinishPreviousButtonType()
public void set_FinishPreviousButtonType(ButtonType value)
public TableItemStyle get_HeaderStyle()
public ITemplate get_HeaderTemplate()
public void set_HeaderTemplate(ITemplate value)
public string get_HeaderText()
public void set_HeaderText(string value)
public ITemplate get_LayoutTemplate()
public void set_LayoutTemplate(ITemplate value)
public Style get_NavigationButtonStyle()
public TableItemStyle get_NavigationStyle()
public TableItemStyle get_SideBarStyle()
public Style get_SideBarButtonStyle()
public ITemplate get_SideBarTemplate()
public void set_SideBarTemplate(ITemplate value)
public string get_SkipLinkText()
public void set_SkipLinkText(string value)
public ITemplate get_StartNavigationTemplate()
public void set_StartNavigationTemplate(ITemplate value)
public string get_StartNextButtonImageUrl()
public void set_StartNextButtonImageUrl(string value)
public Style get_StartNextButtonStyle()
public string get_StartNextButtonText()
public void set_StartNextButtonText(string value)
public ButtonType get_StartNextButtonType()
public void set_StartNextButtonType(ButtonType value)
public ITemplate get_StepNavigationTemplate()
public void set_StepNavigationTemplate(ITemplate value)
public string get_StepNextButtonImageUrl()
public void set_StepNextButtonImageUrl(string value)
public Style get_StepNextButtonStyle()
public string get_StepNextButtonText()
public void set_StepNextButtonText(string value)
public ButtonType get_StepNextButtonType()
public void set_StepNextButtonType(ButtonType value)
public string get_StepPreviousButtonImageUrl()
public void set_StepPreviousButtonImageUrl(string value)
public Style get_StepPreviousButtonStyle()
public string get_StepPreviousButtonText()
public void set_StepPreviousButtonText(string value)
public ButtonType get_StepPreviousButtonType()
public void set_StepPreviousButtonType(ButtonType value)
public TableItemStyle get_StepStyle()
public WizardStepCollection get_WizardSteps()
protected HtmlTextWriterTag get_TagKey()
internal ITemplate get_SideBarItemTemplate()
public ICollection GetHistory()
public void MoveTo(WizardStepBase wizardStep)
public WizardStepType GetStepType(WizardStepBase wizardStep, int index)
protected bool AllowNavigationToStep(int index)
protected internal void OnInit(EventArgs e)
protected ControlCollection CreateControlCollection()
protected internal void CreateChildControls()
private InvalidOperationException MakeLayoutException(string phName, string phID, string condition)
private void CreateControlHierarchy_LayoutTemplate(ITemplate layoutTemplate)
private void ReplacePlaceHolder(WebControl container, Control placeHolder, Control replacement)
protected void CreateControlHierarchy()
internal void InstantiateTemplateStep(TemplatedWizardStep step)
internal void RegisterCustomNavigation(TemplatedWizardStep step, BaseWizardNavigationContainer customNavigationTemplateContainer)
private void CreateButtonBar(Control container)
private void AddNavButtonsTable(BaseWizardNavigationContainer container, TableRow& row)
private Control[] CreateButtonSet(string id, string command)
private Control[] CreateButtonSet(string id, string command, bool causesValidation)
internal Control[] CreateButtonSet(string id, string command, bool causesValidation, string validationGroup)
private Control CreateButton(string id, string command, ButtonType type, bool causesValidation, string validationGroup)
private WebControl CreateStandardButton()
private WebControl CreateImageButton(string imageUrl)
private WebControl CreateLinkButton()
private void AddButtonCell(TableRow row, Control[] controls)
private void CreateSideBar(Control container)
private void StepDatalistItemCommand(object sender, DataListCommandEventArgs e)
private void StepDatalistItemDataBound(object sender, DataListItemEventArgs e)
private void AddHeaderRow(Table table)
internal void RegisterApplyStyle(WebControl control, Style style)
protected Style CreateControlStyle()
protected IDictionary GetDesignModeState()
protected internal void LoadControlState(object state)
protected internal object SaveControlState()
protected void LoadViewState(object savedState)
protected object SaveViewState()
protected void TrackViewState()
protected internal void RegisterCommandEvents(IButtonControl button)
private void ProcessCommand(object sender, CommandEventArgs args)
protected bool OnBubbleEvent(object source, EventArgs e)
private void ProcessEvent(string commandName, string commandArg)
internal void UpdateViews()
protected internal void Render(HtmlTextWriter writer)
private void PrepareControlHierarchy()
private BaseWizardNavigationContainer GetCurrentNavContainer()
}
internal System.Web.UI.WebControls.WizardLayoutContainer : WebControl {
protected internal void Render(HtmlTextWriter writer)
}
internal System.Web.UI.WebControls.WizardLayoutNavigationContainer : WebControl {
protected internal void Render(HtmlTextWriter writer)
}
public System.Web.UI.WebControls.WizardNavigationEventArgs : EventArgs {
private int curStepIndex
private int nxtStepIndex
private bool cancel
public bool Cancel
public int CurrentStepIndex
public int NextStepIndex
public void .ctor(int currentStepIndex, int nextStepIndex)
public bool get_Cancel()
public void set_Cancel(bool value)
public int get_CurrentStepIndex()
public int get_NextStepIndex()
}
public System.Web.UI.WebControls.WizardNavigationEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WizardNavigationEventArgs e)
public IAsyncResult BeginInvoke(object sender, WizardNavigationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Web.UI.WebControls.WizardSideBarListControlItem : object {
private Control _container
private object <DataItem>k__BackingField
private ListItemType <ItemType>k__BackingField
private int <ItemIndex>k__BackingField
public object DataItem
public ListItemType ItemType
public int ItemIndex
public object get_DataItem()
private void set_DataItem(object value)
public ListItemType get_ItemType()
private void set_ItemType(ListItemType value)
public int get_ItemIndex()
private void set_ItemIndex(int value)
public void .ctor(object dataItem, ListItemType itemType, int itemIndex, Control container)
internal Control FindControl(string id)
}
internal System.Web.UI.WebControls.WizardSideBarListControlItemEventArgs : EventArgs {
private WizardSideBarListControlItem <Item>k__BackingField
public WizardSideBarListControlItem Item
public WizardSideBarListControlItem get_Item()
private void set_Item(WizardSideBarListControlItem value)
public void .ctor(WizardSideBarListControlItem item)
}
public System.Web.UI.WebControls.WizardStepBase : View {
private Wizard wizard
public bool AllowReturn
public bool EnableTheming
public string ID
public string Name
public WizardStepType StepType
public string Title
public Wizard Wizard
public bool get_AllowReturn()
public void set_AllowReturn(bool value)
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
public string get_ID()
public void set_ID(string value)
public string get_Name()
public WizardStepType get_StepType()
public void set_StepType(WizardStepType value)
public string get_Title()
public void set_Title(string value)
public Wizard get_Wizard()
protected void LoadViewState(object savedState)
protected internal void OnLoad(EventArgs e)
protected internal void RenderChildren(HtmlTextWriter writer)
internal void SetWizard(Wizard w)
}
public System.Web.UI.WebControls.WizardStepCollection : object {
private ArrayList list
private Wizard wizard
public int Count
public bool IsReadOnly
public bool IsSynchronized
public WizardStepBase Item
public object SyncRoot
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
internal void .ctor(Wizard wizard)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public WizardStepBase get_Item(int index)
public object get_SyncRoot()
public void Add(WizardStepBase wizardStep)
public void AddAt(int index, WizardStepBase wizardStep)
public void Clear()
public bool Contains(WizardStepBase wizardStep)
public void CopyTo(WizardStepBase[] array, int index)
public IEnumerator GetEnumerator()
public int IndexOf(WizardStepBase wizardStep)
public void Insert(int index, WizardStepBase wizardStep)
public void Remove(WizardStepBase wizardStep)
public void RemoveAt(int index)
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private int System.Collections.IList.Add(object ob)
private bool System.Collections.IList.Contains(object ob)
private int System.Collections.IList.IndexOf(object ob)
private void System.Collections.IList.Insert(int index, object ob)
private void System.Collections.IList.Remove(object ob)
private void System.Collections.ICollection.CopyTo(Array array, int index)
}
public System.Web.UI.WebControls.WizardStepType : Enum {
public int value__
public WizardStepType Auto
public WizardStepType Complete
public WizardStepType Finish
public WizardStepType Start
public WizardStepType Step
}
public System.Web.UI.WebControls.Xml : Control {
private XmlDocument xml_document
private XPathNavigator xpath_navigator
private string xml_content
private string xml_file
private XslTransform xsl_transform
private XsltArgumentList transform_arguments
private string transform_file
public string ClientID
public ControlCollection Controls
public XmlDocument Document
public string DocumentContent
public string DocumentSource
public bool EnableTheming
public string SkinID
public XslTransform Transform
public XsltArgumentList TransformArgumentList
public string TransformSource
public XPathNavigator XPathNavigator
public string get_ClientID()
public ControlCollection get_Controls()
public XmlDocument get_Document()
public void set_Document(XmlDocument value)
public string get_DocumentContent()
public void set_DocumentContent(string value)
public string get_DocumentSource()
public void set_DocumentSource(string value)
public bool get_EnableTheming()
public void set_EnableTheming(bool value)
public string get_SkinID()
public void set_SkinID(string value)
public XslTransform get_Transform()
public void set_Transform(XslTransform value)
public XsltArgumentList get_TransformArgumentList()
public void set_TransformArgumentList(XsltArgumentList value)
public string get_TransformSource()
public void set_TransformSource(string value)
public XPathNavigator get_XPathNavigator()
public void set_XPathNavigator(XPathNavigator value)
public Control FindControl(string id)
public void Focus()
public bool HasControls()
protected internal void Render(HtmlTextWriter output)
protected void AddParsedSubObject(object obj)
protected ControlCollection CreateControlCollection()
protected IDictionary GetDesignModeState()
}
public System.Web.UI.WebControls.XmlBuilder : ControlBuilder {
public void AppendLiteralString(string s)
public Type GetChildControlType(string tagName, IDictionary attribs)
public bool NeedsTagInnerText()
public void SetTagInnerText(string text)
}
public System.Web.UI.WebControls.XmlDataSource : HierarchicalDataSourceControl {
private string _data
private string _transform
private string _xpath
private string _dataFile
private string _transformFile
private string _cacheKeyDependency
private bool _enableCaching
private int _cacheDuration
private bool _documentNeedsUpdate
private DataSourceCacheExpiry _cacheExpirationPolicy
private String[] emptyNames
private object EventTransforming
private XmlDocument xmlDocument
private XsltArgumentList transformArgumentList
private Cache DataCache
private bool CanBeSaved
private bool System.ComponentModel.IListSource.ContainsListCollection
public int CacheDuration
public DataSourceCacheExpiry CacheExpirationPolicy
public string CacheKeyDependency
public bool EnableCaching
public string Data
public string DataFile
public XsltArgumentList TransformArgumentList
public string Transform
public string TransformFile
public string XPath
public string CacheKeyContext
private void System.Web.UI.IDataSource.add_DataSourceChanged(EventHandler value)
private void System.Web.UI.IDataSource.remove_DataSourceChanged(EventHandler value)
public void add_Transforming(EventHandler value)
public void remove_Transforming(EventHandler value)
protected void OnTransforming(EventArgs e)
public XmlDocument GetXmlDocument()
private XmlDocument LoadXmlDocument()
private XmlDocument LoadFileOrData(string filename, string data)
private XmlDocument GetXmlDocumentFromCache()
private string GetDataKey()
private Cache get_DataCache()
private void UpdateCache()
private void UpdateXml()
public void Save()
private bool get_CanBeSaved()
protected HierarchicalDataSourceView GetHierarchicalView(string viewPath)
private IList System.ComponentModel.IListSource.GetList()
private bool System.ComponentModel.IListSource.get_ContainsListCollection()
private DataSourceView System.Web.UI.IDataSource.GetView(string viewName)
private ICollection System.Web.UI.IDataSource.GetViewNames()
public int get_CacheDuration()
public void set_CacheDuration(int value)
public DataSourceCacheExpiry get_CacheExpirationPolicy()
public void set_CacheExpirationPolicy(DataSourceCacheExpiry value)
public string get_CacheKeyDependency()
public void set_CacheKeyDependency(string value)
public bool get_EnableCaching()
public void set_EnableCaching(bool value)
public string get_Data()
public void set_Data(string value)
public string get_DataFile()
public void set_DataFile(string value)
public XsltArgumentList get_TransformArgumentList()
public void set_TransformArgumentList(XsltArgumentList value)
public string get_Transform()
public void set_Transform(string value)
public string get_TransformFile()
public void set_TransformFile(string value)
public string get_XPath()
public void set_XPath(string value)
public string get_CacheKeyContext()
public void set_CacheKeyContext(string value)
}
internal System.Web.UI.WebControls.XmlDataSourceNodeDescriptor : object {
private XmlNode node
public XmlNode Node
public void .ctor(XmlNode node)
public XmlNode get_Node()
public AttributeCollection GetAttributes()
public string GetClassName()
public string GetComponentName()
public TypeConverter GetConverter()
public EventDescriptor GetDefaultEvent()
public PropertyDescriptor GetDefaultProperty()
public object GetEditor(Type editorBaseType)
public EventDescriptorCollection GetEvents()
public EventDescriptorCollection GetEvents(Attribute[] arr)
public PropertyDescriptorCollection GetProperties()
public PropertyDescriptorCollection GetProperties(Attribute[] arr)
public object GetPropertyOwner(PropertyDescriptor pd)
public XPathNavigator CreateNavigator()
}
internal System.Web.UI.WebControls.XmlDataSourcePropertyDescriptor : PropertyDescriptor {
private bool readOnly
public Type ComponentType
public bool IsReadOnly
public Type PropertyType
public void .ctor(string name, bool readOnly)
public bool CanResetValue(object o)
public void ResetValue(object o)
public object GetValue(object o)
public void SetValue(object o, object value)
public bool ShouldSerializeValue(object o)
public Type get_ComponentType()
public bool get_IsReadOnly()
public Type get_PropertyType()
}
public System.Web.UI.WebControls.XmlDataSourceView : DataSourceView {
private ArrayList nodes
private XmlDataSource owner
public void .ctor(XmlDataSource owner, string name)
public IEnumerable Select(DataSourceSelectArguments arguments)
private void DoXPathSelect()
protected internal IEnumerable ExecuteSelect(DataSourceSelectArguments arguments)
}
public System.Web.UI.WebControls.XmlHierarchicalDataSourceView : HierarchicalDataSourceView {
private XmlNodeList nodeList
internal void .ctor(XmlNodeList nodeList)
public IHierarchicalEnumerable Select()
}
internal System.Web.UI.WebControls.XmlHierarchicalEnumerable : object {
private XmlNodeList nodeList
internal void .ctor(XmlNodeList nodeList)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private IHierarchyData System.Web.UI.IHierarchicalEnumerable.GetHierarchyData(object enumeratedItem)
}
internal System.Web.UI.WebControls.XmlHierarchyData : object {
private XmlNode item
private bool System.Web.UI.IHierarchyData.HasChildren
private object System.Web.UI.IHierarchyData.Item
private string System.Web.UI.IHierarchyData.Path
private string System.Web.UI.IHierarchyData.Type
internal void .ctor(XmlNode item)
public string ToString()
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attrs)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attrFilter)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
private IHierarchicalEnumerable System.Web.UI.IHierarchyData.GetChildren()
private IHierarchyData System.Web.UI.IHierarchyData.GetParent()
private bool System.Web.UI.IHierarchyData.get_HasChildren()
private object System.Web.UI.IHierarchyData.get_Item()
private string System.Web.UI.IHierarchyData.get_Path()
private string System.Web.UI.IHierarchyData.get_Type()
}
internal System.Web.UI.WebHandlerParser : SimpleWebHandlerParser {
protected string DefaultDirectiveName
private void .ctor(HttpContext context, string virtualPath, string physicalPath)
internal void .ctor(HttpContext context, VirtualPath virtualPath, TextReader reader)
internal void .ctor(HttpContext context, VirtualPath virtualPath, string physicalPath, TextReader reader)
public Type GetCompiledType(HttpContext context, string virtualPath, string physicalPath)
protected string get_DefaultDirectiveName()
}
public System.Web.UI.WebResourceAttribute : Attribute {
private bool performSubstitution
private string webResource
private string contentType
public string ContentType
public bool PerformSubstitution
public string WebResource
public string CdnPath
public bool CdnSupportsSecureConnection
public string LoadSuccessExpression
public void .ctor(string webResource, string contentType)
public string get_ContentType()
public bool get_PerformSubstitution()
public void set_PerformSubstitution(bool value)
public string get_WebResource()
public string get_CdnPath()
public void set_CdnPath(string value)
public bool get_CdnSupportsSecureConnection()
public void set_CdnSupportsSecureConnection(bool value)
public string get_LoadSuccessExpression()
public void set_LoadSuccessExpression(string value)
}
public System.Web.UI.WebServiceParser : SimpleWebHandlerParser {
protected string DefaultDirectiveName
private void .ctor(HttpContext context, string virtualPath, string physicalPath)
internal void .ctor(HttpContext context, VirtualPath virtualPath, TextReader reader)
internal void .ctor(HttpContext context, VirtualPath virtualPath, string physicalPath, TextReader reader)
public Type GetCompiledType(string inputFile, HttpContext context)
protected string get_DefaultDirectiveName()
}
public System.Web.UI.XhtmlMobileDocType : Enum {
public int value__
public XhtmlMobileDocType XhtmlBasic
public XhtmlMobileDocType XhtmlMobileProfile
public XhtmlMobileDocType Wml20
}
public System.Web.UI.XhtmlTextWriter : HtmlTextWriter {
private Hashtable default_common_attrs
private Hashtable default_suppress_common_attrs
private Hashtable default_element_specific_attrs
private Hashtable common_attrs
private Hashtable suppress_common_attrs
private Hashtable element_specific_attrs
private String[] DefaultCommonAttributes
private String[] DefaultSuppressCommonAttributes
protected Hashtable CommonAttributes
protected Hashtable ElementSpecificAttributes
protected Hashtable SuppressCommonAttributes
private void SetupHash(Hashtable hash, String[] values)
private void SetupElementsSpecificAttributes()
private void SetupElementSpecificAttributes(string elementName, String[] attributesNames)
public void .ctor(TextWriter writer)
public void .ctor(TextWriter writer, string tabString)
protected Hashtable get_CommonAttributes()
protected Hashtable get_ElementSpecificAttributes()
protected Hashtable get_SuppressCommonAttributes()
public void AddRecognizedAttribute(string elementName, string attributeName)
public bool IsValidFormAttribute(string attributeName)
public void RemoveRecognizedAttribute(string elementName, string attributeName)
public void SetDocType(XhtmlMobileDocType docType)
public void WriteBreak()
protected bool OnAttributeRender(string name, string value, HtmlTextWriterAttribute key)
protected bool OnStyleAttributeRender(string name, string value, HtmlTextWriterStyle key)
}
public System.Web.UI.XPathBinder : object {
public object Eval(object container, string xPath)
public object Eval(object container, string xPath, IXmlNamespaceResolver resolver)
public string Eval(object container, string xPath, string format)
public string Eval(object container, string xPath, string format, IXmlNamespaceResolver resolver)
public IEnumerable Select(object container, string xPath)
public IEnumerable Select(object container, string xPath, IXmlNamespaceResolver resolver)
}
internal System.Web.UnknownResponseHeader : BaseResponseHeader {
private string headerName
public string Name
public string get_Name()
public void set_Name(string value)
public void .ctor(string name, string val)
internal void SendContent(HttpWorkerRequest wr)
}
public System.Web.UnvalidatedRequestValues : object {
private HttpCookieCollection <Cookies>k__BackingField
private HttpFileCollection <Files>k__BackingField
private NameValueCollection <Form>k__BackingField
private NameValueCollection <Headers>k__BackingField
private string <Path>k__BackingField
private string <PathInfo>k__BackingField
private NameValueCollection <QueryString>k__BackingField
private string <RawUrl>k__BackingField
private Uri <Url>k__BackingField
public HttpCookieCollection Cookies
public HttpFileCollection Files
public NameValueCollection Form
public NameValueCollection Headers
public string Path
public string PathInfo
public NameValueCollection QueryString
public string RawUrl
public Uri Url
public string Item
public HttpCookieCollection get_Cookies()
internal void set_Cookies(HttpCookieCollection value)
public HttpFileCollection get_Files()
internal void set_Files(HttpFileCollection value)
public NameValueCollection get_Form()
internal void set_Form(NameValueCollection value)
public NameValueCollection get_Headers()
internal void set_Headers(NameValueCollection value)
public string get_Path()
internal void set_Path(string value)
public string get_PathInfo()
internal void set_PathInfo(string value)
public NameValueCollection get_QueryString()
internal void set_QueryString(NameValueCollection value)
public string get_RawUrl()
internal void set_RawUrl(string value)
public Uri get_Url()
internal void set_Url(Uri value)
public string get_Item(string field)
}
public System.Web.UnvalidatedRequestValuesBase : object {
public NameValueCollection Form
public NameValueCollection QueryString
public NameValueCollection Headers
public HttpCookieCollection Cookies
public HttpFileCollectionBase Files
public string RawUrl
public string Path
public string PathInfo
public string Item
public Uri Url
public NameValueCollection get_Form()
public NameValueCollection get_QueryString()
public NameValueCollection get_Headers()
public HttpCookieCollection get_Cookies()
public HttpFileCollectionBase get_Files()
public string get_RawUrl()
public string get_Path()
public string get_PathInfo()
public string get_Item(string field)
public Uri get_Url()
}
public System.Web.UnvalidatedRequestValuesWrapper : UnvalidatedRequestValuesBase {
private UnvalidatedRequestValues _requestValues
public NameValueCollection Form
public NameValueCollection QueryString
public NameValueCollection Headers
public HttpCookieCollection Cookies
public HttpFileCollectionBase Files
public string RawUrl
public string Path
public string PathInfo
public string Item
public Uri Url
public void .ctor(UnvalidatedRequestValues requestValues)
public NameValueCollection get_Form()
public NameValueCollection get_QueryString()
public NameValueCollection get_Headers()
public HttpCookieCollection get_Cookies()
public HttpFileCollectionBase get_Files()
public string get_RawUrl()
public string get_Path()
public string get_PathInfo()
public string get_Item(string field)
public Uri get_Url()
}
internal System.Web.UplevelHelper : object {
public bool IsUplevel(string ua)
private bool DetermineUplevel_1_1(string ua, Boolean& hasJavaScript, int ualength)
private bool ScanForMatch_2_3(string ua, Boolean& hasJavaScript, int ualength)
private bool ScanForMatch_2_4(string ua, Boolean& hasJavaScript, int ualength)
private bool ScanForMatch_2_6(string ua, Boolean& hasJavaScript, int ualength)
}
internal System.Web.Util.AltSerialization : object {
internal void Serialize(BinaryWriter w, object value)
internal object Deserialize(BinaryReader r)
}
internal System.Web.Util.AppVerifierErrorCode : Enum {
public int value__
public AppVerifierErrorCode Ok
public AppVerifierErrorCode HttpApplicationInstanceWasNull
public AppVerifierErrorCode BeginHandlerDelegateWasNull
public AppVerifierErrorCode AsyncCallbackInvokedMultipleTimes
public AppVerifierErrorCode AsyncCallbackInvokedWithNullParameter
public AppVerifierErrorCode AsyncCallbackGivenAsyncResultWhichWasNotCompleted
public AppVerifierErrorCode AsyncCallbackInvokedSynchronouslyButAsyncResultWasNotMarkedCompletedSynchronously
public AppVerifierErrorCode AsyncCallbackInvokedAsynchronouslyButAsyncResultWasMarkedCompletedSynchronously
public AppVerifierErrorCode AsyncCallbackInvokedWithUnexpectedAsyncResultInstance
public AppVerifierErrorCode AsyncCallbackInvokedAsynchronouslyThenBeginHandlerThrew
public AppVerifierErrorCode BeginHandlerThrewThenAsyncCallbackInvokedAsynchronously
public AppVerifierErrorCode AsyncCallbackInvokedSynchronouslyThenBeginHandlerThrew
public AppVerifierErrorCode AsyncCallbackInvokedWithUnexpectedAsyncResultAsyncState
public AppVerifierErrorCode AsyncCallbackCalledAfterHttpApplicationReassigned
public AppVerifierErrorCode BeginHandlerReturnedNull
public AppVerifierErrorCode BeginHandlerReturnedAsyncResultMarkedCompletedSynchronouslyButWhichWasNotCompleted
public AppVerifierErrorCode BeginHandlerReturnedAsyncResultMarkedCompletedSynchronouslyButAsyncCallbackNeverCalled
public AppVerifierErrorCode BeginHandlerReturnedUnexpectedAsyncResultInstance
public AppVerifierErrorCode BeginHandlerReturnedUnexpectedAsyncResultAsyncState
public AppVerifierErrorCode SyncContextSendOrPostCalledAfterRequestCompleted
public AppVerifierErrorCode SyncContextSendOrPostCalledBetweenNotifications
public AppVerifierErrorCode SyncContextPostCalledInNestedNotification
public AppVerifierErrorCode RequestNotificationCompletedSynchronouslyWithNotificationContextPending
public AppVerifierErrorCode NotificationContextHasChangedAfterSynchronouslyProcessingNotification
public AppVerifierErrorCode PendingProcessRequestNotificationStatusAfterCompletingNestedNotification
}
internal System.Web.Util.AppVerifierException : Exception {
private AppVerifierErrorCode _errorCode
public AppVerifierErrorCode ErrorCode
public void .ctor(AppVerifierErrorCode errorCode, string message)
private void .ctor(SerializationInfo info, StreamingContext context)
public AppVerifierErrorCode get_ErrorCode()
}
internal System.Web.Util.AssemblySet : ObjectSet {
internal AssemblySet Create(ICollection c)
}
internal System.Web.Util.AssemblyUtil : object {
private string _emptyFileVersion
public string GetAssemblyFileVersion(Assembly assembly)
}
internal System.Web.Util.BinaryCompatibility : object {
internal string TargetFrameworkKey
public BinaryCompatibility Current
private bool <TargetsAtLeastFramework45>k__BackingField
private bool <TargetsAtLeastFramework451>k__BackingField
private bool <TargetsAtLeastFramework452>k__BackingField
private bool <TargetsAtLeastFramework46>k__BackingField
private bool <TargetsAtLeastFramework461>k__BackingField
private bool <TargetsAtLeastFramework463>k__BackingField
private Version <TargetFramework>k__BackingField
public bool TargetsAtLeastFramework45
public bool TargetsAtLeastFramework451
public bool TargetsAtLeastFramework452
public bool TargetsAtLeastFramework46
public bool TargetsAtLeastFramework461
public bool TargetsAtLeastFramework463
public Version TargetFramework
public void .ctor(FrameworkName frameworkName)
public bool get_TargetsAtLeastFramework45()
private void set_TargetsAtLeastFramework45(bool value)
public bool get_TargetsAtLeastFramework451()
private void set_TargetsAtLeastFramework451(bool value)
public bool get_TargetsAtLeastFramework452()
private void set_TargetsAtLeastFramework452(bool value)
public bool get_TargetsAtLeastFramework46()
private void set_TargetsAtLeastFramework46(bool value)
public bool get_TargetsAtLeastFramework461()
private void set_TargetsAtLeastFramework461(bool value)
public bool get_TargetsAtLeastFramework463()
private void set_TargetsAtLeastFramework463(bool value)
public Version get_TargetFramework()
private void set_TargetFramework(Version value)
}
internal System.Web.Util.CancellationTokenHelper : object {
private int STATE_CREATED
private int STATE_CANCELING
private int STATE_CANCELED
private int STATE_DISPOSING
private int STATE_DISPOSED
internal CancellationTokenHelper StaticDisposed
private CancellationTokenSource _cts
private int _state
internal bool IsCancellationRequested
internal CancellationToken Token
public void .ctor(bool canceled)
internal bool get_IsCancellationRequested()
internal CancellationToken get_Token()
public void Cancel()
public void Dispose()
private CancellationTokenHelper GetStaticDisposedHelper()
private void <Cancel>b__13_0(object _)
}
internal System.Web.Util.CaseInsensitiveStringSet : StringSet {
protected bool CaseInsensitive
protected bool get_CaseInsensitive()
}
internal System.Web.Util.DataSourceHelper : object {
public IEnumerable GetResolvedDataSource(object o, string data_member)
}
internal System.Web.Util.DataSourceResolver : object {
public IEnumerable ResolveDataSource(object o, string data_member)
}
internal System.Web.Util.DateTimeUtil : object {
private long FileTimeOffset
private DateTime MinValuePlusOneDay
private DateTime MaxValueMinusOneDay
internal DateTime FromFileTimeToUtc(long filetime)
internal DateTime ConvertToUniversalTime(DateTime localTime)
internal DateTime ConvertToLocalTime(DateTime utcTime)
internal TimeSpan GetTimeoutFromTimeUnit(int timeoutValue, TimeUnit timeoutUnit)
}
internal System.Web.Util.Debug : object {
internal string TAG_INTERNAL
internal string TAG_EXTERNAL
internal string TAG_ALL
internal string DATE_FORMAT
internal string TIME_FORMAT
internal void Trace(string tagName, string message)
internal void Trace(string tagName, string message, bool includePrefix)
internal void Trace(string tagName, string message, Exception e)
internal void Trace(string tagName, Exception e)
internal void Trace(string tagName, string message, Exception e, bool includePrefix)
public void TraceException(string tagName, Exception e)
internal void Assert(bool assertion, string message)
internal void Assert(bool assertion)
internal void Fail(string message)
internal bool IsTagEnabled(string tagName)
internal bool IsTagPresent(string tagName)
internal bool IsDebuggerPresent()
internal void Break()
internal void AlwaysValidate(string tagName)
internal void CheckValid(bool assertion, string message)
internal void Validate(object obj)
internal void ValidateArrayBounds(T[] array, int offset, int count)
internal void Validate(string tagName, object obj)
internal void Dump(string tagName, object obj)
internal string FormatUtcDate(DateTime utcTime)
internal string FormatLocalDate(DateTime localTime)
}
internal System.Web.Util.DisposableAction : object {
public DisposableAction Empty
private Action _disposeAction
public void .ctor(Action disposeAction)
public void Dispose()
}
internal System.Web.Util.DisposableGCHandleRef`1 : object {
private GCHandle _handle
public T Target
public void .ctor(T t)
public T get_Target()
public void Dispose()
}
internal System.Web.Util.EmptyCollection : object {
private EmptyCollection s_theEmptyCollection
internal EmptyCollection Instance
public int Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private object System.Collections.IEnumerator.Current
internal EmptyCollection get_Instance()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
public void CopyTo(Array array, int index)
private object System.Collections.IEnumerator.get_Current()
private bool System.Collections.IEnumerator.MoveNext()
private void System.Collections.IEnumerator.Reset()
}
internal System.Web.Util.EnumerationRangeValidationUtil : object {
public void ValidateRepeatLayout(RepeatLayout value)
}
internal System.Web.Util.ExceptionUtil : object {
internal ArgumentException ParameterInvalid(string parameter)
internal ArgumentException ParameterNullOrEmpty(string parameter)
internal ArgumentException PropertyInvalid(string property)
internal ArgumentException PropertyNullOrEmpty(string property)
internal InvalidOperationException UnexpectedError(string methodName)
}
internal System.Web.Util.FastDelegateCreator`1 : object {
private Func`3<object, IntPtr, TDelegate> _factory
internal TDelegate BindTo(object obj, IntPtr method)
internal TDelegate BindTo(object obj, MethodInfo method)
private Func`3<object, IntPtr, TDelegate> GetFactory()
}
internal System.Web.Util.FileUtils : object {
private Random rnd
internal object CreateTemporaryFile(string tempdir, CreateTempFile createFile)
internal object CreateTemporaryFile(string tempdir, string extension, CreateTempFile createFile)
internal object CreateTemporaryFile(string tempdir, string prefix, string extension, CreateTempFile createFile)
public void WriteLineLog(string logFilePath, string format, Object[] parms)
public void WriteLog(string logFilePath, string format, Object[] parms)
}
internal System.Web.Util.GCUtil : object {
public IntPtr RootObject(object obj)
public object UnrootObject(IntPtr pointer)
}
internal System.Web.Util.Helpers : object {
public CultureInfo InvariantCulture
}
internal System.Web.Util.HResults : object {
internal int S_OK
internal int S_FALSE
internal int E_NOTIMPL
internal int E_POINTER
internal int E_FAIL
internal int E_FILENOTFOUND
internal int E_PATHNOTFOUND
internal int E_ACCESSDENIED
internal int E_INVALID_DATA
internal int E_OUTOFMEMORY
internal int E_INVALIDARG
internal int E_INSUFFICIENT_BUFFER
internal int E_NOT_SET
internal int WSAECONNABORTED
internal int WSAECONNRESET
internal int ERROR_TOO_MANY_CMDS
internal int ERROR_NOT_SUPPORTED
}
internal System.Web.Util.HttpDate : object {
private Int32[] s_tensDigit
private String[] s_days
private String[] s_months
private SByte[] s_monthIndexTable
private int atoi2(string s, int startIndex)
private int make_month(string s, int startIndex)
internal DateTime UtcParse(string time)
}
public System.Web.Util.HttpEncoder : object {
private Char[] hexChars
private object entitiesLock
private SortedDictionary`2<string, char> entities
private Lazy`1<HttpEncoder> defaultEncoder
private Lazy`1<HttpEncoder> currentEncoderLazy
private HttpEncoder currentEncoder
private IDictionary`2<string, char> Entities
public HttpEncoder Current
public HttpEncoder Default
private IDictionary`2<string, char> get_Entities()
public HttpEncoder get_Current()
public void set_Current(HttpEncoder value)
public HttpEncoder get_Default()
protected internal void HeaderNameValueEncode(string headerName, string headerValue, String& encodedHeaderName, String& encodedHeaderValue)
private void StringBuilderAppend(string s, StringBuilder& sb)
private string EncodeHeaderString(string input)
protected internal void HtmlAttributeEncode(string value, TextWriter output)
protected internal void HtmlDecode(string value, TextWriter output)
protected internal void HtmlEncode(string value, TextWriter output)
protected internal Byte[] UrlEncode(Byte[] bytes, int offset, int count)
private HttpEncoder GetCustomEncoderFromConfig()
protected internal string UrlPathEncode(string value)
internal Byte[] UrlEncodeToBytes(Byte[] bytes, int offset, int count)
internal string HtmlEncode(string s)
internal string HtmlAttributeEncode(string s)
internal string HtmlDecode(string s)
internal bool NotEncoded(char c)
internal void UrlEncodeChar(char c, Stream result, bool isUnicode)
internal void UrlPathEncodeChar(char c, Stream result)
private void InitEntities()
}
internal System.Web.Util.ICalls : object {
public string GetMachineConfigPath()
public string GetMachineInstallDirectory()
public bool GetUnmanagedResourcesPtr(Assembly assembly, IntPtr& ptr, Int32& length)
}
internal System.Web.Util.ISyncContext {
public HttpContext HttpContext
public HttpContext get_HttpContext()
public ISyncContextLock Enter()
}
internal System.Web.Util.ISyncContextLock {
public void Leave()
}
internal System.Web.Util.ITypedWebObjectFactory {
public Type InstantiatedType
public Type get_InstantiatedType()
}
public System.Web.Util.IWebObjectFactory {
public object CreateInstance()
}
public System.Web.Util.IWebPropertyAccessor {
public object GetProperty(object target)
public void SetProperty(object target, object value)
}
internal System.Web.Util.MachineKeySectionUtils : object {
private byte ToHexValue(char c, bool high)
internal Byte[] GetBytes(string key, int len)
public string GetHexString(Byte[] bytes)
public SymmetricAlgorithm GetDecryptionAlgorithm(string name)
public KeyedHashAlgorithm GetValidationAlgorithm(MachineKeySection section)
private SymmetricAlgorithm GetDecryptionAlgorithm(MachineKeySection section)
private Byte[] GetDecryptionKey(MachineKeySection section)
public Byte[] GetValidationKey(MachineKeySection section)
public Byte[] Decrypt(MachineKeySection section, Byte[] encodedData)
private Byte[] Decrypt(MachineKeySection section, Byte[] encodedData, int offset, int length)
public Byte[] Decrypt(SymmetricAlgorithm alg, Byte[] encodedData, int offset, int length)
public Byte[] Encrypt(MachineKeySection section, Byte[] data)
public Byte[] Encrypt(SymmetricAlgorithm alg, Byte[] data)
public Byte[] Sign(MachineKeySection section, Byte[] data)
private Byte[] Sign(MachineKeySection section, Byte[] data, int offset, int length)
public Byte[] Verify(MachineKeySection section, Byte[] data)
public Byte[] EncryptSign(MachineKeySection section, Byte[] data)
public Byte[] VerifyDecrypt(MachineKeySection section, Byte[] block)
}
internal System.Web.Util.Msec : object {
internal int ONE_SECOND
internal int ONE_MINUTE
internal int ONE_HOUR
internal int ONE_DAY
internal int ONE_WEEK
internal long ONE_YEAR
internal long ONE_LEAP_YEAR
}
internal System.Web.Util.ObjectSet : object {
private EmptyEnumerator _emptyEnumerator
private IDictionary _objects
protected bool CaseInsensitive
public int Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
protected bool get_CaseInsensitive()
public void Add(object o)
public void AddCollection(ICollection c)
public void Remove(object o)
public bool Contains(object o)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
public void CopyTo(Array array, int index)
}
internal System.Web.Util.OrderingMethodFinder : ExpressionVisitor {
private bool isTopLevelMethodCall
private bool <OrderingMethodFound>k__BackingField
private bool OrderingMethodFound
private bool get_OrderingMethodFound()
private void set_OrderingMethodFound(bool value)
protected Expression VisitMethodCall(MethodCallExpression node)
internal bool OrderMethodExists(Expression expression)
}
internal System.Web.Util.PathUtil : object {
private string _system32Path
private string GetSystem32Path()
internal string GetSystemDllFullPath(string filename)
}
internal System.Web.Util.QueryableUtility : object {
private String[] _orderMethods
private MethodInfo[] _methods
private MethodInfo GetQueryableMethod(Expression expression)
public bool IsQueryableMethod(Expression expression, string method)
public bool IsOrderingMethod(Expression expression)
}
internal System.Web.Util.RegexUtil : object {
private Nullable`1<bool> _isRegexTimeoutSetInAppDomain
private bool IsRegexTimeoutSetInAppDomain
public bool IsMatch(string stringToMatch, string pattern, RegexOptions regOption, Nullable`1<int> timeoutInMillsec)
public Match Match(string stringToMatch, string pattern, RegexOptions regOption, Nullable`1<int> timeoutInMillsec)
public Regex CreateRegex(string pattern, RegexOptions option, Nullable`1<int> timeoutInMillsec)
internal Regex CreateRegex(string pattern, RegexOptions option)
private bool get_IsRegexTimeoutSetInAppDomain()
private int GetRegexTimeout(Nullable`1<int> timeoutInMillsec)
}
public System.Web.Util.RequestValidationSource : Enum {
public int value__
public RequestValidationSource QueryString
public RequestValidationSource Form
public RequestValidationSource Cookies
public RequestValidationSource Files
public RequestValidationSource RawUrl
public RequestValidationSource Path
public RequestValidationSource PathInfo
public RequestValidationSource Headers
}
public System.Web.Util.RequestValidator : object {
private RequestValidator current
private Lazy`1<RequestValidator> lazyLoader
public RequestValidator Current
public RequestValidator get_Current()
public void set_Current(RequestValidator value)
protected internal bool IsValidRequestString(HttpContext context, string value, RequestValidationSource requestValidationSource, string collectionKey, Int32& validationFailureIndex)
private void ParseTypeName(string spec, String& typeName, String& assemblyName)
private RequestValidator LoadConfiguredValidator()
public bool InvokeIsValidRequestString(HttpContext context, string value, RequestValidationSource requestValidationSource, string collectionKey, Int32& validationFailureIndex)
}
internal System.Web.Util.RuntimeHelpers : object {
private bool <CaseInsensitive>k__BackingField
private IEqualityComparer`1<string> <StringEqualityComparer>k__BackingField
private IEqualityComparer`1<string> <StringEqualityComparerCulture>k__BackingField
private bool <IsUncShare>k__BackingField
private string <MonoVersion>k__BackingField
private bool <RunningOnWindows>k__BackingField
private StringComparison <StringComparison>k__BackingField
private StringComparison <StringComparisonCulture>k__BackingField
public bool CaseInsensitive
public bool DebuggingEnabled
public IEqualityComparer`1<string> StringEqualityComparer
public IEqualityComparer`1<string> StringEqualityComparerCulture
public bool IsUncShare
public string MonoVersion
public bool RunningOnWindows
public StringComparison StringComparison
public StringComparison StringComparisonCulture
public bool get_CaseInsensitive()
private void set_CaseInsensitive(bool value)
public bool get_DebuggingEnabled()
public IEqualityComparer`1<string> get_StringEqualityComparer()
private void set_StringEqualityComparer(IEqualityComparer`1<string> value)
public IEqualityComparer`1<string> get_StringEqualityComparerCulture()
private void set_StringEqualityComparerCulture(IEqualityComparer`1<string> value)
public bool get_IsUncShare()
private void set_IsUncShare(bool value)
public string get_MonoVersion()
private void set_MonoVersion(string value)
public bool get_RunningOnWindows()
private void set_RunningOnWindows(bool value)
public StringComparison get_StringComparison()
private void set_StringComparison(StringComparison value)
public StringComparison get_StringComparisonCulture()
private void set_StringComparisonCulture(StringComparison value)
}
internal System.Web.Util.SearchPattern : object {
private Op ops
private bool ignore
internal Char[] WildcardChars
public void .ctor(string pattern)
public void .ctor(string pattern, bool ignore)
public void SetPattern(string pattern, bool ignore)
public bool IsMatch(string text)
private void Compile(string pattern)
private bool Match(Op op, string text, int ptr)
}
internal System.Web.Util.Sec : object {
internal int ONE_SECOND
internal int ONE_MINUTE
internal int ONE_HOUR
internal int ONE_DAY
internal int ONE_WEEK
internal int ONE_YEAR
internal int ONE_LEAP_YEAR
}
internal System.Web.Util.SecureHashCodeProvider : object {
private SecureHashCodeProvider singletonInvariant
private SecureHashCodeProvider singleton
private object sync
private int seed
private TextInfo m_text
public SecureHashCodeProvider Default
public SecureHashCodeProvider DefaultInvariant
public SecureHashCodeProvider get_Default()
public SecureHashCodeProvider get_DefaultInvariant()
public void .ctor(CultureInfo culture)
private bool AreEqual(CultureInfo a, CultureInfo b)
private bool AreEqual(TextInfo info, CultureInfo culture)
public int GetHashCode(object obj)
}
internal System.Web.Util.SerializationHelper : object {
internal string SerializeToBase64(object value)
internal object DeserializeFromBase64(string value)
internal string SerializeToXml(object value)
internal object DeserializeFromXml(string value)
internal Byte[] SerializeToBinary(object value)
internal object DeserializeFromBinary(Byte[] value)
}
internal System.Web.Util.SimpleRecyclingCache : object {
private int MAX_SIZE
private Hashtable _hashtable
internal object Item
private void CreateHashtable()
internal object get_Item(object key)
internal void set_Item(object key, object value)
}
internal System.Web.Util.SimpleWebObjectFactory : object {
private Type type
public void .ctor(Type type)
public object CreateInstance()
}
internal System.Web.Util.StringUtil : object {
internal string CheckAndTrimString(string paramValue, string paramName)
internal string CheckAndTrimString(string paramValue, string paramName, bool throwIfNull)
internal string CheckAndTrimString(string paramValue, string paramName, bool throwIfNull, int lengthToCheck)
internal bool Equals(string s1, string s2)
internal bool Equals(string s1, int offset1, string s2, int offset2, int length)
internal bool EqualsIgnoreCase(string s1, string s2)
internal bool EqualsIgnoreCase(string s1, int index1, string s2, int index2, int length)
internal string StringFromWCharPtr(IntPtr ip, int length)
internal string StringFromCharPtr(IntPtr ip, int length)
internal bool StringEndsWith(string s, char c)
internal bool StringEndsWith(string s1, string s2)
internal bool StringEndsWithIgnoreCase(string s1, string s2)
internal bool StringStartsWith(string s, char c)
internal bool StringStartsWith(string s1, string s2)
internal bool StringStartsWithIgnoreCase(string s1, string s2)
internal bool StringArrayEquals(String[] a, String[] b)
internal int GetStringHashCode(string s)
internal int GetNullTerminatedByteArray(Encoding enc, string s, Byte[]& bytes)
internal void memcpyimpl(Byte* src, Byte* dest, int len)
internal String[] ObjectArrayToStringArray(Object[] objectArray)
}
internal System.Web.Util.StrUtils : object {
public bool StartsWith(string str1, string str2)
public bool StartsWith(string str1, string str2, bool ignore_case)
public bool EndsWith(string str1, string str2)
public bool EndsWith(string str1, string str2, bool ignore_case)
public string EscapeQuotesAndBackslashes(string attributeValue)
public bool IsNullOrEmpty(string value)
public String[] SplitRemoveEmptyEntries(string value, Char[] separator)
}
internal System.Web.Util.SymbolEqualComparer : object {
internal IComparer Default
private int System.Collections.IComparer.Compare(object keyLeft, object keyRight)
}
internal System.Web.Util.SynchronizationContextMode : Enum {
public int value__
public SynchronizationContextMode Normal
public SynchronizationContextMode Legacy
}
internal System.Web.Util.TimeUnit : Enum {
public int value__
public TimeUnit Unknown
public TimeUnit Days
public TimeUnit Hours
public TimeUnit Minutes
public TimeUnit Seconds
public TimeUnit Milliseconds
}
internal System.Web.Util.TimeUtil : object {
internal string ToUtcTimeString(DateTime dt)
}
public System.Web.Util.TransactedCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Web.Util.Transactions : object {
public void InvokeTransacted(TransactedCallback callback, TransactionOption mode)
public void InvokeTransacted(TransactedCallback callback, TransactionOption mode, Boolean& transactionAborted)
}
internal System.Web.Util.UrlUtils : object {
private Char[] path_sep
public string InsertSessionId(string id, string path)
public string GetSessionId(string path)
public bool HasSessionId(string path)
public string RemoveSessionId(string base_path, string file_path)
public string Combine(string basePath, string relPath)
public string Canonic(string path)
public string GetDirectory(string url)
public string RemoveDoubleSlashes(string input)
public string GetFile(string url)
public bool IsRooted(string path)
public bool IsRelativeUrl(string path)
public string ResolveVirtualPathFromAppAbsolute(string path)
public string ResolvePhysicalPathFromAppAbsolute(string path)
}
internal System.Web.Util.VersionUtil : object {
public Version Framework00
public Version Framework20
public Version Framework35
public Version Framework40
public Version Framework45
public Version Framework451
public Version Framework452
public Version Framework46
public Version Framework461
public Version Framework463
public Version FrameworkDefault
public string FrameworkDefaultString
}
internal System.Web.Util.WebEncoding : object {
private bool cached
private GlobalizationSection sect
private GlobalizationSection GlobalizationConfig
public Encoding FileEncoding
public Encoding ResponseEncoding
public Encoding RequestEncoding
private GlobalizationSection get_GlobalizationConfig()
public Encoding get_FileEncoding()
public Encoding get_ResponseEncoding()
public Encoding get_RequestEncoding()
}
internal System.Web.Util.WebTrace : object {
private Stack ctxStack
private bool trace
public string Context
public bool StackTrace
public void PushContext(string context)
public void PopContext()
public string get_Context()
public bool get_StackTrace()
public void set_StackTrace(bool value)
public void WriteLine(string msg)
public void WriteLine(string msg, object arg)
public void WriteLine(string msg, object arg1, object arg2)
public void WriteLine(string msg, object arg1, object arg2, object arg3)
public void WriteLine(string msg, Object[] args)
private string Format(string msg)
}
public System.Web.Util.WorkItem : object {
public void Post(WorkItemCallback callback)
}
public System.Web.Util.WorkItemCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Web.ValidateStringCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string key, string value)
public IAsyncResult BeginInvoke(string key, string value, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Web.VirtualPath : object {
private string _absolute
private string _appRelative
private string _appRelativeNotRooted
private string _extension
private string _directory
private string _directoryNoNormalize
private string _currentRequestDirectory
private string _physicalPath
private bool <IsAbsolute>k__BackingField
private bool <IsFake>k__BackingField
private bool <IsRooted>k__BackingField
private bool <IsAppRelative>k__BackingField
private string <Original>k__BackingField
public bool IsAbsolute
public bool IsFake
public bool IsRooted
public bool IsAppRelative
public string Original
public string Absolute
public string AppRelative
public string AppRelativeNotRooted
public string Extension
public string Directory
public string DirectoryNoNormalize
public string CurrentRequestDirectory
public string PhysicalPath
public bool get_IsAbsolute()
private void set_IsAbsolute(bool value)
public bool get_IsFake()
private void set_IsFake(bool value)
public bool get_IsRooted()
private void set_IsRooted(bool value)
public bool get_IsAppRelative()
private void set_IsAppRelative(bool value)
public string get_Original()
private void set_Original(string value)
public string get_Absolute()
public string get_AppRelative()
public string get_AppRelativeNotRooted()
public string get_Extension()
public string get_Directory()
public string get_DirectoryNoNormalize()
public string get_CurrentRequestDirectory()
public void set_CurrentRequestDirectory(string value)
public string get_PhysicalPath()
public void .ctor(string vpath)
public void .ctor(string vpath, string baseVirtualDir)
public void .ctor(string vpath, string physicalPath, bool isFake)
public bool StartsWith(string s)
private string MakeRooted(string original)
public void Dispose()
public string ToString()
public VirtualPath PhysicalToVirtual(string physical_path)
}
public System.Web.VirtualPathUtility : object {
private bool monoSettingsVerifyCompatibility
private bool runningOnWindows
private Char[] path_sep
private Char[] invalidVirtualPathChars
private string aspNetVerificationKey
public string AppendTrailingSlash(string virtualPath)
public string Combine(string basePath, string relativePath)
public string GetDirectory(string virtualPath)
internal string GetDirectory(string virtualPath, bool normalize)
public string GetExtension(string virtualPath)
public string GetFileName(string virtualPath)
internal bool IsRooted(string virtualPath)
public bool IsAbsolute(string virtualPath)
public bool IsAppRelative(string virtualPath)
public string MakeRelative(string fromPath, string toPath)
private string ToAbsoluteInternal(string virtualPath)
public string RemoveTrailingSlash(string virtualPath)
public string ToAbsolute(string virtualPath)
internal string ToAbsolute(string virtualPath, bool normalize)
public string ToAbsolute(string virtualPath, string applicationPath)
internal string ToAbsolute(string virtualPath, string applicationPath, bool normalize)
public string ToAppRelative(string virtualPath)
public string ToAppRelative(string virtualPath, string applicationPath)
internal string Normalize(string path)
internal string Canonize(string path)
internal bool IsValidVirtualPath(string path)
}
internal System.Web.WebCategoryAttribute : CategoryAttribute {
public void .ctor(string category)
}
public System.Web.WebPageTraceListener : TraceListener {
public void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id, string message)
public void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id, string format, Object[] args)
public void Write(string message)
public void Write(string message, string category)
public void WriteLine(string message)
public void WriteLine(string message, string category)
}
internal System.Web.WebROCollection : NameValueCollection {
private bool got_id
private int id
public bool GotID
public int ID
public bool get_GotID()
public int get_ID()
public void set_ID(int value)
public void Protect()
public void Unprotect()
public string ToString()
}
public System.Web.WebSockets.AspNetWebSocket : WebSocket {
public Nullable`1<WebSocketCloseStatus> CloseStatus
public string CloseStatusDescription
public WebSocketState State
public string SubProtocol
public Nullable`1<WebSocketCloseStatus> get_CloseStatus()
public string get_CloseStatusDescription()
public WebSocketState get_State()
public string get_SubProtocol()
public void Abort()
public Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken)
public Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken)
public void Dispose()
public Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken)
public Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken)
}
public System.Web.WebSockets.AspNetWebSocketContext : WebSocketContext {
public string AnonymousID
public HttpApplicationStateBase Application
public string ApplicationPath
public Cache Cache
public HttpClientCertificate ClientCertificate
public int ConnectionCount
public CookieCollection CookieCollection
public HttpCookieCollection Cookies
public string FilePath
public NameValueCollection Headers
public bool IsAuthenticated
public bool IsClientConnected
public bool IsDebuggingEnabled
public bool IsLocal
public bool IsSecureConnection
public IDictionary Items
public WindowsIdentity LogonUserIdentity
public string Origin
public string Path
public string PathInfo
public ProfileBase Profile
public NameValueCollection QueryString
public string RawUrl
public Uri RequestUri
public string SecWebSocketKey
public IEnumerable`1<string> SecWebSocketProtocols
public string SecWebSocketVersion
public HttpServerUtilityBase Server
public NameValueCollection ServerVariables
public DateTime Timestamp
public UnvalidatedRequestValuesBase Unvalidated
public Uri UrlReferrer
public IPrincipal User
public string UserAgent
public string UserHostAddress
public string UserHostName
public String[] UserLanguages
public WebSocket WebSocket
public string get_AnonymousID()
public HttpApplicationStateBase get_Application()
public string get_ApplicationPath()
public Cache get_Cache()
public HttpClientCertificate get_ClientCertificate()
public int get_ConnectionCount()
public CookieCollection get_CookieCollection()
public HttpCookieCollection get_Cookies()
public string get_FilePath()
public NameValueCollection get_Headers()
public bool get_IsAuthenticated()
public bool get_IsClientConnected()
public bool get_IsDebuggingEnabled()
public bool get_IsLocal()
public bool get_IsSecureConnection()
public IDictionary get_Items()
public WindowsIdentity get_LogonUserIdentity()
public string get_Origin()
public string get_Path()
public string get_PathInfo()
public ProfileBase get_Profile()
public NameValueCollection get_QueryString()
public string get_RawUrl()
public Uri get_RequestUri()
public string get_SecWebSocketKey()
public IEnumerable`1<string> get_SecWebSocketProtocols()
public string get_SecWebSocketVersion()
public HttpServerUtilityBase get_Server()
public NameValueCollection get_ServerVariables()
public DateTime get_Timestamp()
public UnvalidatedRequestValuesBase get_Unvalidated()
public Uri get_UrlReferrer()
public IPrincipal get_User()
public string get_UserAgent()
public string get_UserHostAddress()
public string get_UserHostName()
public String[] get_UserLanguages()
public WebSocket get_WebSocket()
}
public System.Web.WebSockets.AspNetWebSocketOptions : object {
private string _subProtocol
private bool <RequireSameOrigin>k__BackingField
public bool RequireSameOrigin
public string SubProtocol
public bool get_RequireSameOrigin()
public void set_RequireSameOrigin(bool value)
public string get_SubProtocol()
public void set_SubProtocol(string value)
}
internal System.Web.WebSockets.SubProtocolUtil : object {
private Char[] _lwsTrimChars
private Char[] _splitChars
public bool IsValidSubProtocolName(string subprotocol)
private bool IsValidSubProtocolChar(char c)
private bool IsSeparatorChar(char c)
public List`1<string> ParseHeader(string headerValue)
}
internal System.Web.WebSocketTransitionState : Enum {
public byte value__
public WebSocketTransitionState Inactive
public WebSocketTransitionState AcceptWebSocketRequestCalled
public WebSocketTransitionState TransitionStarted
public WebSocketTransitionState TransitionCompleted
}
internal System.Web.WebSysDefaultValueAttribute : DefaultValueAttribute {
private Type _type
private bool _localized
public object TypeId
public object Value
internal void .ctor(Type type, string value)
internal void .ctor(string value)
public object get_TypeId()
public object get_Value()
}
internal System.Web.WebSysDescriptionAttribute : DescriptionAttribute {
private bool replaced
public string Description
public object TypeId
internal void .ctor(string description)
public string get_Description()
public object get_TypeId()
}
internal System.Web.WebSysDisplayNameAttribute : DisplayNameAttribute {
private bool replaced
public string DisplayName
public object TypeId
internal void .ctor(string DisplayName)
public string get_DisplayName()
public object get_TypeId()
}
public System.Web.XmlSiteMapProvider : StaticSiteMapProvider {
private Char[] seperators
private bool initialized
private string fileVirtualPath
private SiteMapNode root
private List`1<FileSystemWatcher> watchers
private Dictionary`2<string, bool> _childProvidersPresent
private List`1<SiteMapProvider> _childProviders
private Dictionary`2<string, bool> ChildProvidersPresent
private List`1<SiteMapProvider> ChildProviders
public SiteMapNode RootNode
private Dictionary`2<string, bool> get_ChildProvidersPresent()
private List`1<SiteMapProvider> get_ChildProviders()
protected internal void AddNode(SiteMapNode node, SiteMapNode parentNode)
private void AddNodeNoCheck(SiteMapNode node, SiteMapNode parentNode)
protected void AddProvider(string providerName, SiteMapNode parentNode)
private void RegisterChildProvider(string name, SiteMapProvider smp)
private XmlNode FindStartingNode(string virtualPath, Boolean& enableLocalization)
private XmlDocument GetConfigDocument(string virtualPath)
public SiteMapNode BuildSiteMap()
private SiteMapNode ConvertToSiteMapNode(XmlNode xmlNode)
private void BuildSiteMapRecursive(XmlNode xmlNode, SiteMapNode parent)
private string GetNonEmptyOptionalAttribute(XmlNode n, string name)
private string GetOptionalAttribute(XmlNode n, string name)
private void PutInCollection(string name, string value, NameValueCollection& coll)
private void PutInCollection(string name, string classKey, string value, NameValueCollection& coll)
private bool GetAttributeLocalization(string value, String& resClass, String& resKey, String& resDefault)
private void CollectLocalizationInfo(XmlNode xmlNode, String& title, String& description, NameValueCollection& attributes, NameValueCollection& explicitResourceKeys)
protected void Clear()
protected void Dispose(bool disposing)
public void Dispose()
public SiteMapNode FindSiteMapNode(string rawUrl)
public SiteMapNode FindSiteMapNodeFromKey(string key)
public void Initialize(string name, NameValueCollection attributes)
private void CreateWatcher(string file)
protected void RemoveNode(SiteMapNode node)
protected void RemoveProvider(string providerName)
private void OnFileChanged(object sender, FileSystemEventArgs args)
public SiteMapNode get_RootNode()
protected internal SiteMapNode GetRootNodeCore()
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
