public System.Collections.Generic.IAsyncEnumerable`1 {
public IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken)
}
public System.Collections.Generic.IAsyncEnumerator`1 {
public T Current
public ValueTask`1<bool> MoveNextAsync()
public T get_Current()
}
public System.IAsyncDisposable {
public ValueTask DisposeAsync()
}
public System.Runtime.CompilerServices.AsyncIteratorMethodBuilder : ValueType {
private AsyncTaskMethodBuilder _methodBuilder
private object _id
internal object ObjectIdForDebugger
public AsyncIteratorMethodBuilder Create()
public void MoveNext(TStateMachine& stateMachine)
public void AwaitOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine)
public void AwaitUnsafeOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine)
public void Complete()
internal object get_ObjectIdForDebugger()
}
public System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute : StateMachineAttribute {
public void .ctor(Type stateMachineType)
}
public System.Runtime.CompilerServices.ConfiguredAsyncDisposable : ValueType {
private IAsyncDisposable _source
private bool _continueOnCapturedContext
internal void .ctor(IAsyncDisposable source, bool continueOnCapturedContext)
public ConfiguredValueTaskAwaitable DisposeAsync()
}
public System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1 : ValueType {
private IAsyncEnumerable`1<T> _enumerable
private CancellationToken _cancellationToken
private bool _continueOnCapturedContext
internal void .ctor(IAsyncEnumerable`1<T> enumerable, bool continueOnCapturedContext, CancellationToken cancellationToken)
public ConfiguredCancelableAsyncEnumerable`1<T> ConfigureAwait(bool continueOnCapturedContext)
public ConfiguredCancelableAsyncEnumerable`1<T> WithCancellation(CancellationToken cancellationToken)
public Enumerator<T> GetAsyncEnumerator()
}
public System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1 : ValueType {
private Action`1<object> _continuation
private object _continuationState
private ExecutionContext _executionContext
private object _capturedContext
private bool _completed
private TResult _result
private ExceptionDispatchInfo _error
private short _version
private bool <RunContinuationsAsynchronously>k__BackingField
public bool RunContinuationsAsynchronously
public short Version
public bool get_RunContinuationsAsynchronously()
public void set_RunContinuationsAsynchronously(bool value)
public void Reset()
public void SetResult(TResult result)
public void SetException(Exception error)
public short get_Version()
public ValueTaskSourceStatus GetStatus(short token)
public TResult GetResult(short token)
public void OnCompleted(Action`1<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
private void ValidateToken(short token)
private void SignalCompletion()
private void InvokeContinuation()
}
internal System.Threading.Tasks.Sources.ManualResetValueTaskSourceCoreShared : object {
internal Action`1<object> s_sentinel
private void CompletionSentinel(object _)
}
public System.Threading.Tasks.TaskAsyncEnumerableExtensions : object {
public ConfiguredAsyncDisposable ConfigureAwait(IAsyncDisposable source, bool continueOnCapturedContext)
public ConfiguredCancelableAsyncEnumerable`1<T> ConfigureAwait(IAsyncEnumerable`1<T> source, bool continueOnCapturedContext)
public ConfiguredCancelableAsyncEnumerable`1<T> WithCancellation(IAsyncEnumerable`1<T> source, CancellationToken cancellationToken)
}
