public Mono.Cecil.Mdb.MdbReader : object {
private ModuleDefinition module
private MonoSymbolFile symbol_file
private Dictionary`2<string, Document> documents
public void .ctor(ModuleDefinition module, MonoSymbolFile symFile)
public ISymbolWriterProvider GetWriterProvider()
public bool ProcessDebugHeader(ImageDebugHeader header)
public MethodDebugInformation Read(MethodDefinition method)
private int ReadCodeSize(MethodDefinition method)
private void ReadLocalVariables(MethodEntry entry, ScopeDebugInformation[] scopes)
private void ReadLineNumbers(MethodEntry entry, MethodDebugInformation info)
private Document GetDocument(SourceFileEntry file)
private ScopeDebugInformation[] ReadScopes(MethodEntry entry, MethodDebugInformation info)
private bool AddScope(Collection`1<ScopeDebugInformation> scopes, ScopeDebugInformation scope)
private SequencePoint LineToSequencePoint(LineNumberEntry line)
public void Dispose()
}
public Mono.Cecil.Mdb.MdbReaderProvider : object {
public ISymbolReader GetSymbolReader(ModuleDefinition module, string fileName)
public ISymbolReader GetSymbolReader(ModuleDefinition module, Stream symbolStream)
}
public Mono.Cecil.Mdb.MdbWriter : object {
private ModuleDefinition module
private MonoSymbolWriter writer
private Dictionary`2<string, SourceFile> source_files
public void .ctor(ModuleDefinition module, string assembly)
public ISymbolReaderProvider GetReaderProvider()
private SourceFile GetSourceFile(Document document)
private void Populate(Collection`1<SequencePoint> sequencePoints, Int32[] offsets, Int32[] startRows, Int32[] endRows, Int32[] startCols, Int32[] endCols, SourceFile& file)
public void Write(MethodDebugInformation info)
private void WriteRootScope(ScopeDebugInformation scope, MethodDebugInformation info)
private void WriteScope(ScopeDebugInformation scope, MethodDebugInformation info)
private void WriteScopes(Collection`1<ScopeDebugInformation> scopes, MethodDebugInformation info)
private void WriteScopeVariables(ScopeDebugInformation scope)
public ImageDebugHeader GetDebugHeader()
public void Dispose()
}
public Mono.Cecil.Mdb.MdbWriterProvider : object {
public ISymbolWriter GetSymbolWriter(ModuleDefinition module, string fileName)
public ISymbolWriter GetSymbolWriter(ModuleDefinition module, Stream symbolStream)
}
internal Mono.Cecil.Mdb.MethodEntryExtensions : object {
public bool HasColumnInfo(MethodEntry entry)
public bool HasEndInfo(MethodEntry entry)
}
public Mono.CompilerServices.SymbolWriter.AnonymousScopeEntry : object {
public int ID
private List`1<CapturedVariable> captured_vars
private List`1<CapturedScope> captured_scopes
public CapturedVariable[] CapturedVariables
public CapturedScope[] CapturedScopes
public void .ctor(int id)
internal void .ctor(MyBinaryReader reader)
internal void AddCapturedVariable(string name, string captured_name, CapturedKind kind)
public CapturedVariable[] get_CapturedVariables()
internal void AddCapturedScope(int scope, string captured_name)
public CapturedScope[] get_CapturedScopes()
internal void Write(MyBinaryWriter bw)
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.CapturedScope : ValueType {
public int Scope
public string CapturedName
public void .ctor(int scope, string captured_name)
internal void .ctor(MyBinaryReader reader)
internal void Write(MyBinaryWriter bw)
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.CapturedVariable : ValueType {
public string Name
public string CapturedName
public CapturedKind Kind
public void .ctor(string name, string captured_name, CapturedKind kind)
internal void .ctor(MyBinaryReader reader)
internal void Write(MyBinaryWriter bw)
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.CodeBlockEntry : object {
public int Index
public int Parent
public Type BlockType
public int StartOffset
public int EndOffset
public void .ctor(int index, int parent, Type type, int start_offset)
internal void .ctor(int index, MyBinaryReader reader)
public void Close(int end_offset)
internal void Write(MyBinaryWriter bw)
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.CompileUnitEntry : object {
public int Index
private int DataOffset
private MonoSymbolFile file
private SourceFileEntry source
private List`1<SourceFileEntry> include_files
private List`1<NamespaceEntry> namespaces
private bool creating
public int Size
private CompileUnitEntry Mono.CompilerServices.SymbolWriter.ICompileUnit.Entry
public SourceFileEntry SourceFile
public NamespaceEntry[] Namespaces
public SourceFileEntry[] IncludeFiles
public int get_Size()
private CompileUnitEntry Mono.CompilerServices.SymbolWriter.ICompileUnit.get_Entry()
public void .ctor(MonoSymbolFile file, SourceFileEntry source)
public void AddFile(SourceFileEntry file)
public SourceFileEntry get_SourceFile()
public int DefineNamespace(string name, String[] using_clauses, int parent)
internal void WriteData(MyBinaryWriter bw)
internal void Write(BinaryWriter bw)
internal void .ctor(MonoSymbolFile file, MyBinaryReader reader)
public void ReadAll()
private void ReadData()
public NamespaceEntry[] get_Namespaces()
public SourceFileEntry[] get_IncludeFiles()
}
public Mono.CompilerServices.SymbolWriter.ICompileUnit {
public CompileUnitEntry Entry
public CompileUnitEntry get_Entry()
}
public Mono.CompilerServices.SymbolWriter.IMethodDef {
public string Name
public int Token
public string get_Name()
public int get_Token()
}
public Mono.CompilerServices.SymbolWriter.ISourceFile {
public SourceFileEntry Entry
public SourceFileEntry get_Entry()
}
public Mono.CompilerServices.SymbolWriter.LineNumberEntry : object {
public int Row
public int Column
public int EndRow
public int EndColumn
public int File
public int Offset
public bool IsHidden
public LineNumberEntry Null
public void .ctor(int file, int row, int column, int offset)
public void .ctor(int file, int row, int offset)
public void .ctor(int file, int row, int column, int offset, bool is_hidden)
public void .ctor(int file, int row, int column, int end_row, int end_column, int offset, bool is_hidden)
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.LineNumberTable : object {
protected LineNumberEntry[] _line_numbers
public int LineBase
public int LineRange
public byte OpcodeBase
public int MaxAddressIncrement
public int Default_LineBase
public int Default_LineRange
public byte Default_OpcodeBase
public byte DW_LNS_copy
public byte DW_LNS_advance_pc
public byte DW_LNS_advance_line
public byte DW_LNS_set_file
public byte DW_LNS_const_add_pc
public byte DW_LNE_end_sequence
public byte DW_LNE_MONO_negate_is_hidden
internal byte DW_LNE_MONO__extensions_start
internal byte DW_LNE_MONO__extensions_end
public LineNumberEntry[] LineNumbers
public LineNumberEntry[] get_LineNumbers()
protected void .ctor(MonoSymbolFile file)
internal void .ctor(MonoSymbolFile file, LineNumberEntry[] lines)
internal void Write(MonoSymbolFile file, MyBinaryWriter bw, bool hasColumnsInfo, bool hasEndInfo)
internal LineNumberTable Read(MonoSymbolFile file, MyBinaryReader br, bool readColumnsInfo, bool readEndInfo)
private void DoRead(MonoSymbolFile file, MyBinaryReader br, bool includesColumns, bool includesEnds)
public bool GetMethodBounds(LineNumberEntry& start, LineNumberEntry& end)
}
public Mono.CompilerServices.SymbolWriter.LocalVariableEntry : ValueType {
public int Index
public string Name
public int BlockIndex
public void .ctor(int index, string name, int block)
internal void .ctor(MonoSymbolFile file, MyBinaryReader reader)
internal void Write(MonoSymbolFile file, MyBinaryWriter bw)
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.MethodEntry : object {
public int CompileUnitIndex
public int Token
public int NamespaceID
private int DataOffset
private int LocalVariableTableOffset
private int LineNumberTableOffset
private int CodeBlockTableOffset
private int ScopeVariableTableOffset
private int RealNameOffset
private Flags flags
private int index
public CompileUnitEntry CompileUnit
private LocalVariableEntry[] locals
private CodeBlockEntry[] code_blocks
private ScopeVariable[] scope_vars
private LineNumberTable lnt
private string real_name
public MonoSymbolFile SymbolFile
public int Size
public Flags MethodFlags
public int Index
public Flags get_MethodFlags()
public int get_Index()
public void set_Index(int value)
internal void .ctor(MonoSymbolFile file, MyBinaryReader reader, int index)
internal void .ctor(MonoSymbolFile file, CompileUnitEntry comp_unit, int token, ScopeVariable[] scope_vars, LocalVariableEntry[] locals, LineNumberEntry[] lines, CodeBlockEntry[] code_blocks, string real_name, Flags flags, int namespace_id)
private void CheckLineNumberTable(LineNumberEntry[] line_numbers)
internal void Write(MyBinaryWriter bw)
internal void WriteData(MonoSymbolFile file, MyBinaryWriter bw)
public void ReadAll()
public LineNumberTable GetLineNumberTable()
public LocalVariableEntry[] GetLocals()
public CodeBlockEntry[] GetCodeBlocks()
public ScopeVariable[] GetScopeVariables()
public string GetRealName()
public int CompareTo(object obj)
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.MonoSymbolFile : object {
private List`1<MethodEntry> methods
private List`1<SourceFileEntry> sources
private List`1<CompileUnitEntry> comp_units
private Dictionary`2<int, AnonymousScopeEntry> anonymous_scopes
private OffsetTable ot
private int last_type_index
private int last_method_index
private int last_namespace_index
public int MajorVersion
public int MinorVersion
public int NumLineNumbers
private MyBinaryReader reader
private Dictionary`2<int, SourceFileEntry> source_file_hash
private Dictionary`2<int, CompileUnitEntry> compile_unit_hash
private List`1<MethodEntry> method_list
private Dictionary`2<int, MethodEntry> method_token_hash
private Dictionary`2<string, int> source_name_hash
private Guid guid
internal int LineNumberCount
internal int LocalCount
internal int StringSize
internal int LineNumberSize
internal int ExtendedLineNumberSize
public int CompileUnitCount
public int SourceCount
public int MethodCount
public int TypeCount
public int AnonymousScopeCount
public int NamespaceCount
public Guid Guid
public OffsetTable OffsetTable
public SourceFileEntry[] Sources
public CompileUnitEntry[] CompileUnits
public MethodEntry[] Methods
internal MyBinaryReader BinaryReader
public int AddSource(SourceFileEntry source)
public int AddCompileUnit(CompileUnitEntry entry)
public void AddMethod(MethodEntry entry)
public MethodEntry DefineMethod(CompileUnitEntry comp_unit, int token, ScopeVariable[] scope_vars, LocalVariableEntry[] locals, LineNumberEntry[] lines, CodeBlockEntry[] code_blocks, string real_name, Flags flags, int namespace_id)
internal void DefineAnonymousScope(int id)
internal void DefineCapturedVariable(int scope_id, string name, string captured_name, CapturedKind kind)
internal void DefineCapturedScope(int scope_id, int id, string captured_name)
internal int GetNextTypeIndex()
internal int GetNextMethodIndex()
internal int GetNextNamespaceIndex()
private void Write(MyBinaryWriter bw, Guid guid)
public void CreateSymbolFile(Guid guid, FileStream fs)
private void .ctor(Stream stream)
public MonoSymbolFile ReadSymbolFile(string mdbFilename)
public MonoSymbolFile ReadSymbolFile(string mdbFilename, Guid assemblyGuid)
public MonoSymbolFile ReadSymbolFile(Stream stream)
public int get_CompileUnitCount()
public int get_SourceCount()
public int get_MethodCount()
public int get_TypeCount()
public int get_AnonymousScopeCount()
public int get_NamespaceCount()
public Guid get_Guid()
public OffsetTable get_OffsetTable()
public SourceFileEntry GetSourceFile(int index)
public SourceFileEntry[] get_Sources()
public CompileUnitEntry GetCompileUnit(int index)
public CompileUnitEntry[] get_CompileUnits()
private void read_methods()
public MethodEntry GetMethodByToken(int token)
public MethodEntry GetMethod(int index)
public MethodEntry[] get_Methods()
public int FindSource(string file_name)
public AnonymousScopeEntry GetAnonymousScope(int id)
internal MyBinaryReader get_BinaryReader()
public void Dispose()
protected void Dispose(bool disposing)
}
public Mono.CompilerServices.SymbolWriter.MonoSymbolFileException : Exception {
public void .ctor(string message, Object[] args)
public void .ctor(string message, Exception innerException)
}
public Mono.CompilerServices.SymbolWriter.MonoSymbolWriter : object {
private List`1<SourceMethodBuilder> methods
private List`1<SourceFileEntry> sources
private List`1<CompileUnitEntry> comp_units
protected MonoSymbolFile file
private string filename
private SourceMethodBuilder current_method
private Stack`1<SourceMethodBuilder> current_method_stack
public MonoSymbolFile SymbolFile
public void .ctor(string filename)
public MonoSymbolFile get_SymbolFile()
public void CloseNamespace()
public void DefineLocalVariable(int index, string name)
public void DefineCapturedLocal(int scope_id, string name, string captured_name)
public void DefineCapturedParameter(int scope_id, string name, string captured_name)
public void DefineCapturedThis(int scope_id, string captured_name)
public void DefineCapturedScope(int scope_id, int id, string captured_name)
public void DefineScopeVariable(int scope, int index)
public void MarkSequencePoint(int offset, SourceFileEntry file, int line, int column, bool is_hidden)
public SourceMethodBuilder OpenMethod(ICompileUnit file, int ns_id, IMethodDef method)
public void CloseMethod()
public SourceFileEntry DefineDocument(string url)
public SourceFileEntry DefineDocument(string url, Byte[] guid, Byte[] checksum)
public CompileUnitEntry DefineCompilationUnit(SourceFileEntry source)
public int DefineNamespace(string name, CompileUnitEntry unit, String[] using_clauses, int parent)
public int OpenScope(int start_offset)
public void CloseScope(int end_offset)
public void OpenCompilerGeneratedBlock(int start_offset)
public void CloseCompilerGeneratedBlock(int end_offset)
public void StartIteratorBody(int start_offset)
public void EndIteratorBody(int end_offset)
public void StartIteratorDispatcher(int start_offset)
public void EndIteratorDispatcher(int end_offset)
public void DefineAnonymousScope(int id)
public void WriteSymbolFile(Guid guid)
}
internal Mono.CompilerServices.SymbolWriter.MyBinaryReader : BinaryReader {
public void .ctor(Stream stream)
public int ReadLeb128()
public string ReadString(int offset)
}
internal Mono.CompilerServices.SymbolWriter.MyBinaryWriter : BinaryWriter {
public void .ctor(Stream stream)
public void WriteLeb128(int value)
}
public Mono.CompilerServices.SymbolWriter.NamespaceEntry : ValueType {
public string Name
public int Index
public int Parent
public String[] UsingClauses
public void .ctor(string name, int index, String[] using_clauses, int parent)
internal void .ctor(MonoSymbolFile file, MyBinaryReader reader)
internal void Write(MonoSymbolFile file, MyBinaryWriter bw)
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.OffsetTable : object {
public int MajorVersion
public int MinorVersion
public long Magic
public int TotalFileSize
public int DataSectionOffset
public int DataSectionSize
public int CompileUnitCount
public int CompileUnitTableOffset
public int CompileUnitTableSize
public int SourceCount
public int SourceTableOffset
public int SourceTableSize
public int MethodCount
public int MethodTableOffset
public int MethodTableSize
public int TypeCount
public int AnonymousScopeCount
public int AnonymousScopeTableOffset
public int AnonymousScopeTableSize
public Flags FileFlags
public int LineNumberTable_LineBase
public int LineNumberTable_LineRange
public int LineNumberTable_OpcodeBase
internal void .ctor(BinaryReader reader, int major_version, int minor_version)
internal void Write(BinaryWriter bw, int major_version, int minor_version)
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.ScopeVariable : ValueType {
public int Scope
public int Index
public void .ctor(int scope, int index)
internal void .ctor(MyBinaryReader reader)
internal void Write(MyBinaryWriter bw)
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.SourceFileEntry : object {
public int Index
private int DataOffset
private MonoSymbolFile file
private string file_name
private Byte[] guid
private Byte[] hash
private bool creating
private bool auto_generated
private string sourceFile
public int Size
public Byte[] Checksum
public string FileName
public bool AutoGenerated
public int get_Size()
public void .ctor(MonoSymbolFile file, string file_name)
public void .ctor(MonoSymbolFile file, string sourceFile, Byte[] guid, Byte[] checksum)
public void .ctor(MonoSymbolFile file, string fileName, string sourceFile, Byte[] guid, Byte[] checksum)
public Byte[] get_Checksum()
internal void WriteData(MyBinaryWriter bw)
internal void Write(BinaryWriter bw)
internal void .ctor(MonoSymbolFile file, MyBinaryReader reader)
public string get_FileName()
public void set_FileName(string value)
public bool get_AutoGenerated()
public void SetAutoGenerated()
public bool CheckChecksum()
public string ToString()
}
public Mono.CompilerServices.SymbolWriter.SourceMethodBuilder : object {
private List`1<LocalVariableEntry> _locals
private List`1<CodeBlockEntry> _blocks
private List`1<ScopeVariable> _scope_vars
private Stack`1<CodeBlockEntry> _block_stack
private List`1<LineNumberEntry> method_lines
private ICompileUnit _comp_unit
private int ns_id
private IMethodDef method
public CodeBlockEntry[] Blocks
public CodeBlockEntry CurrentBlock
public LocalVariableEntry[] Locals
public ICompileUnit SourceFile
public ScopeVariable[] ScopeVariables
public void .ctor(ICompileUnit comp_unit)
public void .ctor(ICompileUnit comp_unit, int ns_id, IMethodDef method)
public void MarkSequencePoint(int offset, SourceFileEntry file, int line, int column, bool is_hidden)
public void MarkSequencePoint(int offset, SourceFileEntry file, int line, int column, int end_line, int end_column, bool is_hidden)
public void StartBlock(Type type, int start_offset)
public void StartBlock(Type type, int start_offset, int scopeIndex)
public void EndBlock(int end_offset)
public CodeBlockEntry[] get_Blocks()
public CodeBlockEntry get_CurrentBlock()
public LocalVariableEntry[] get_Locals()
public ICompileUnit get_SourceFile()
public void AddLocal(int index, string name)
public ScopeVariable[] get_ScopeVariables()
public void AddScopeVariable(int scope, int index)
public void DefineMethod(MonoSymbolFile file)
public void DefineMethod(MonoSymbolFile file, int token)
}
