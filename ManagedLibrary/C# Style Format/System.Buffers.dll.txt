public System.Buffers.ArrayPool`1 : object {
private ArrayPool`1<T> s_sharedInstance
public ArrayPool`1<T> Shared
public ArrayPool`1<T> get_Shared()
private ArrayPool`1<T> EnsureSharedCreated()
public ArrayPool`1<T> Create()
public ArrayPool`1<T> Create(int maxArrayLength, int maxArraysPerBucket)
public T[] Rent(int minimumLength)
public void Return(T[] array, bool clearArray)
}
internal System.Buffers.ArrayPoolEventSource : EventSource {
internal ArrayPoolEventSource Log
internal void BufferRented(int bufferId, int bufferSize, int poolId, int bucketId)
internal void BufferAllocated(int bufferId, int bufferSize, int poolId, int bucketId, BufferAllocatedReason reason)
internal void BufferReturned(int bufferId, int bufferSize, int poolId)
}
internal System.Buffers.DefaultArrayPool`1 : ArrayPool`1<T> {
private int DefaultMaxArrayLength
private int DefaultMaxNumberOfArraysPerBucket
private T[] s_emptyArray
private Bucket[] _buckets
private int Id
internal void .ctor(int maxArrayLength, int maxArraysPerBucket)
private int get_Id()
public T[] Rent(int minimumLength)
public void Return(T[] array, bool clearArray)
}
internal System.Buffers.Utilities : object {
internal int SelectBucketIndex(int bufferSize)
internal int GetMaxSizeForBucket(int binIndex)
}
internal System.SR : object {
private ResourceManager s_resourceManager
private Type <ResourceType>k__BackingField
private ResourceManager ResourceManager
internal Type ResourceType
internal string ArgumentException_BufferNotFromPool
private ResourceManager get_ResourceManager()
private bool UsingResourceKeys()
internal string GetResourceString(string resourceKey, string defaultString)
internal string Format(string resourceFormat, Object[] args)
internal string Format(string resourceFormat, object p1)
internal string Format(string resourceFormat, object p1, object p2)
internal string Format(string resourceFormat, object p1, object p2, object p3)
internal Type get_ResourceType()
internal string get_ArgumentException_BufferNotFromPool()
}
