public UnityEngine.EventSystems.AbstractEventData : object {
protected bool m_Used
public bool used
public void Reset()
public void Use()
public bool get_used()
}
public UnityEngine.EventSystems.AxisEventData : BaseEventData {
private Vector2 <moveVector>k__BackingField
private MoveDirection <moveDir>k__BackingField
public Vector2 moveVector
public MoveDirection moveDir
public Vector2 get_moveVector()
public void set_moveVector(Vector2 value)
public MoveDirection get_moveDir()
public void set_moveDir(MoveDirection value)
public void .ctor(EventSystem eventSystem)
}
public UnityEngine.EventSystems.BaseEventData : AbstractEventData {
private EventSystem m_EventSystem
public BaseInputModule currentInputModule
public GameObject selectedObject
public void .ctor(EventSystem eventSystem)
public BaseInputModule get_currentInputModule()
public GameObject get_selectedObject()
public void set_selectedObject(GameObject value)
}
public UnityEngine.EventSystems.BaseInput : UIBehaviour {
public string compositionString
public IMECompositionMode imeCompositionMode
public Vector2 compositionCursorPos
public bool mousePresent
public Vector2 mousePosition
public Vector2 mouseScrollDelta
public bool touchSupported
public int touchCount
public string get_compositionString()
public IMECompositionMode get_imeCompositionMode()
public void set_imeCompositionMode(IMECompositionMode value)
public Vector2 get_compositionCursorPos()
public void set_compositionCursorPos(Vector2 value)
public bool get_mousePresent()
public bool GetMouseButtonDown(int button)
public bool GetMouseButtonUp(int button)
public bool GetMouseButton(int button)
public Vector2 get_mousePosition()
public Vector2 get_mouseScrollDelta()
public bool get_touchSupported()
public int get_touchCount()
public Touch GetTouch(int index)
public float GetAxisRaw(string axisName)
public bool GetButtonDown(string buttonName)
}
public UnityEngine.EventSystems.BaseInputModule : UIBehaviour {
protected List`1<RaycastResult> m_RaycastResultCache
private AxisEventData m_AxisEventData
private EventSystem m_EventSystem
private BaseEventData m_BaseEventData
protected BaseInput m_InputOverride
private BaseInput m_DefaultInput
public BaseInput input
public BaseInput inputOverride
protected EventSystem eventSystem
public BaseInput get_input()
public BaseInput get_inputOverride()
public void set_inputOverride(BaseInput value)
protected EventSystem get_eventSystem()
protected void OnEnable()
protected void OnDisable()
public void Process()
protected RaycastResult FindFirstRaycast(List`1<RaycastResult> candidates)
protected MoveDirection DetermineMoveDirection(float x, float y)
protected MoveDirection DetermineMoveDirection(float x, float y, float deadZone)
protected GameObject FindCommonRoot(GameObject g1, GameObject g2)
protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget)
protected AxisEventData GetAxisEventData(float x, float y, float moveDeadZone)
protected BaseEventData GetBaseEventData()
public bool IsPointerOverGameObject(int pointerId)
public bool ShouldActivateModule()
public void DeactivateModule()
public void ActivateModule()
public void UpdateModule()
public bool IsModuleSupported()
}
public UnityEngine.EventSystems.BaseRaycaster : UIBehaviour {
private BaseRaycaster m_RootRaycaster
public Camera eventCamera
public int priority
public int sortOrderPriority
public int renderOrderPriority
public BaseRaycaster rootRaycaster
public void Raycast(PointerEventData eventData, List`1<RaycastResult> resultAppendList)
public Camera get_eventCamera()
public int get_priority()
public int get_sortOrderPriority()
public int get_renderOrderPriority()
public BaseRaycaster get_rootRaycaster()
public string ToString()
protected void OnEnable()
protected void OnDisable()
protected void OnCanvasHierarchyChanged()
protected void OnTransformParentChanged()
}
public UnityEngine.EventSystems.EventHandle : Enum {
public int value__
public EventHandle Unused
public EventHandle Used
}
public UnityEngine.EventSystems.EventSystem : UIBehaviour {
private List`1<BaseInputModule> m_SystemInputModules
private BaseInputModule m_CurrentInputModule
private List`1<EventSystem> m_EventSystems
private GameObject m_FirstSelected
private bool m_sendNavigationEvents
private int m_DragThreshold
private GameObject m_CurrentSelected
private bool m_HasFocus
private bool m_SelectionGuard
private BaseEventData m_DummyData
private Comparison`1<RaycastResult> s_RaycastComparer
public EventSystem current
public bool sendNavigationEvents
public int pixelDragThreshold
public BaseInputModule currentInputModule
public GameObject firstSelectedGameObject
public GameObject currentSelectedGameObject
public GameObject lastSelectedGameObject
public bool isFocused
public bool alreadySelecting
private BaseEventData baseEventDataCache
public EventSystem get_current()
public void set_current(EventSystem value)
public bool get_sendNavigationEvents()
public void set_sendNavigationEvents(bool value)
public int get_pixelDragThreshold()
public void set_pixelDragThreshold(int value)
public BaseInputModule get_currentInputModule()
public GameObject get_firstSelectedGameObject()
public void set_firstSelectedGameObject(GameObject value)
public GameObject get_currentSelectedGameObject()
public GameObject get_lastSelectedGameObject()
public bool get_isFocused()
public void UpdateModules()
public bool get_alreadySelecting()
public void SetSelectedGameObject(GameObject selected, BaseEventData pointer)
private BaseEventData get_baseEventDataCache()
public void SetSelectedGameObject(GameObject selected)
private int RaycastComparer(RaycastResult lhs, RaycastResult rhs)
public void RaycastAll(PointerEventData eventData, List`1<RaycastResult> raycastResults)
public bool IsPointerOverGameObject()
public bool IsPointerOverGameObject(int pointerId)
protected void OnEnable()
protected void OnDisable()
private void TickModules()
protected void OnApplicationFocus(bool hasFocus)
protected void Update()
private void ChangeEventModule(BaseInputModule module)
public string ToString()
}
public UnityEngine.EventSystems.EventTrigger : MonoBehaviour {
private List`1<Entry> m_Delegates
public List`1<Entry> delegates
public List`1<Entry> triggers
public List`1<Entry> get_delegates()
public void set_delegates(List`1<Entry> value)
public List`1<Entry> get_triggers()
public void set_triggers(List`1<Entry> value)
private void Execute(EventTriggerType id, BaseEventData eventData)
public void OnPointerEnter(PointerEventData eventData)
public void OnPointerExit(PointerEventData eventData)
public void OnDrag(PointerEventData eventData)
public void OnDrop(PointerEventData eventData)
public void OnPointerDown(PointerEventData eventData)
public void OnPointerUp(PointerEventData eventData)
public void OnPointerClick(PointerEventData eventData)
public void OnSelect(BaseEventData eventData)
public void OnDeselect(BaseEventData eventData)
public void OnScroll(PointerEventData eventData)
public void OnMove(AxisEventData eventData)
public void OnUpdateSelected(BaseEventData eventData)
public void OnInitializePotentialDrag(PointerEventData eventData)
public void OnBeginDrag(PointerEventData eventData)
public void OnEndDrag(PointerEventData eventData)
public void OnSubmit(BaseEventData eventData)
public void OnCancel(BaseEventData eventData)
}
public UnityEngine.EventSystems.EventTriggerType : Enum {
public int value__
public EventTriggerType PointerEnter
public EventTriggerType PointerExit
public EventTriggerType PointerDown
public EventTriggerType PointerUp
public EventTriggerType PointerClick
public EventTriggerType Drag
public EventTriggerType Drop
public EventTriggerType Scroll
public EventTriggerType UpdateSelected
public EventTriggerType Select
public EventTriggerType Deselect
public EventTriggerType Move
public EventTriggerType InitializePotentialDrag
public EventTriggerType BeginDrag
public EventTriggerType EndDrag
public EventTriggerType Submit
public EventTriggerType Cancel
}
public UnityEngine.EventSystems.ExecuteEvents : object {
private EventFunction`1<IPointerEnterHandler> s_PointerEnterHandler
private EventFunction`1<IPointerExitHandler> s_PointerExitHandler
private EventFunction`1<IPointerDownHandler> s_PointerDownHandler
private EventFunction`1<IPointerUpHandler> s_PointerUpHandler
private EventFunction`1<IPointerClickHandler> s_PointerClickHandler
private EventFunction`1<IInitializePotentialDragHandler> s_InitializePotentialDragHandler
private EventFunction`1<IBeginDragHandler> s_BeginDragHandler
private EventFunction`1<IDragHandler> s_DragHandler
private EventFunction`1<IEndDragHandler> s_EndDragHandler
private EventFunction`1<IDropHandler> s_DropHandler
private EventFunction`1<IScrollHandler> s_ScrollHandler
private EventFunction`1<IUpdateSelectedHandler> s_UpdateSelectedHandler
private EventFunction`1<ISelectHandler> s_SelectHandler
private EventFunction`1<IDeselectHandler> s_DeselectHandler
private EventFunction`1<IMoveHandler> s_MoveHandler
private EventFunction`1<ISubmitHandler> s_SubmitHandler
private EventFunction`1<ICancelHandler> s_CancelHandler
private ObjectPool`1<List`1<IEventSystemHandler>> s_HandlerListPool
private List`1<Transform> s_InternalTransformList
public EventFunction`1<IPointerEnterHandler> pointerEnterHandler
public EventFunction`1<IPointerExitHandler> pointerExitHandler
public EventFunction`1<IPointerDownHandler> pointerDownHandler
public EventFunction`1<IPointerUpHandler> pointerUpHandler
public EventFunction`1<IPointerClickHandler> pointerClickHandler
public EventFunction`1<IInitializePotentialDragHandler> initializePotentialDrag
public EventFunction`1<IBeginDragHandler> beginDragHandler
public EventFunction`1<IDragHandler> dragHandler
public EventFunction`1<IEndDragHandler> endDragHandler
public EventFunction`1<IDropHandler> dropHandler
public EventFunction`1<IScrollHandler> scrollHandler
public EventFunction`1<IUpdateSelectedHandler> updateSelectedHandler
public EventFunction`1<ISelectHandler> selectHandler
public EventFunction`1<IDeselectHandler> deselectHandler
public EventFunction`1<IMoveHandler> moveHandler
public EventFunction`1<ISubmitHandler> submitHandler
public EventFunction`1<ICancelHandler> cancelHandler
public T ValidateEventData(BaseEventData data)
private void Execute(IPointerEnterHandler handler, BaseEventData eventData)
private void Execute(IPointerExitHandler handler, BaseEventData eventData)
private void Execute(IPointerDownHandler handler, BaseEventData eventData)
private void Execute(IPointerUpHandler handler, BaseEventData eventData)
private void Execute(IPointerClickHandler handler, BaseEventData eventData)
private void Execute(IInitializePotentialDragHandler handler, BaseEventData eventData)
private void Execute(IBeginDragHandler handler, BaseEventData eventData)
private void Execute(IDragHandler handler, BaseEventData eventData)
private void Execute(IEndDragHandler handler, BaseEventData eventData)
private void Execute(IDropHandler handler, BaseEventData eventData)
private void Execute(IScrollHandler handler, BaseEventData eventData)
private void Execute(IUpdateSelectedHandler handler, BaseEventData eventData)
private void Execute(ISelectHandler handler, BaseEventData eventData)
private void Execute(IDeselectHandler handler, BaseEventData eventData)
private void Execute(IMoveHandler handler, BaseEventData eventData)
private void Execute(ISubmitHandler handler, BaseEventData eventData)
private void Execute(ICancelHandler handler, BaseEventData eventData)
public EventFunction`1<IPointerEnterHandler> get_pointerEnterHandler()
public EventFunction`1<IPointerExitHandler> get_pointerExitHandler()
public EventFunction`1<IPointerDownHandler> get_pointerDownHandler()
public EventFunction`1<IPointerUpHandler> get_pointerUpHandler()
public EventFunction`1<IPointerClickHandler> get_pointerClickHandler()
public EventFunction`1<IInitializePotentialDragHandler> get_initializePotentialDrag()
public EventFunction`1<IBeginDragHandler> get_beginDragHandler()
public EventFunction`1<IDragHandler> get_dragHandler()
public EventFunction`1<IEndDragHandler> get_endDragHandler()
public EventFunction`1<IDropHandler> get_dropHandler()
public EventFunction`1<IScrollHandler> get_scrollHandler()
public EventFunction`1<IUpdateSelectedHandler> get_updateSelectedHandler()
public EventFunction`1<ISelectHandler> get_selectHandler()
public EventFunction`1<IDeselectHandler> get_deselectHandler()
public EventFunction`1<IMoveHandler> get_moveHandler()
public EventFunction`1<ISubmitHandler> get_submitHandler()
public EventFunction`1<ICancelHandler> get_cancelHandler()
private void GetEventChain(GameObject root, IList`1<Transform> eventChain)
public bool Execute(GameObject target, BaseEventData eventData, EventFunction`1<T> functor)
public GameObject ExecuteHierarchy(GameObject root, BaseEventData eventData, EventFunction`1<T> callbackFunction)
private bool ShouldSendToComponent(Component component)
private void GetEventList(GameObject go, IList`1<IEventSystemHandler> results)
public bool CanHandleEvent(GameObject go)
public GameObject GetEventHandler(GameObject root)
}
public UnityEngine.EventSystems.IBeginDragHandler {
public void OnBeginDrag(PointerEventData eventData)
}
public UnityEngine.EventSystems.ICancelHandler {
public void OnCancel(BaseEventData eventData)
}
public UnityEngine.EventSystems.IDeselectHandler {
public void OnDeselect(BaseEventData eventData)
}
public UnityEngine.EventSystems.IDragHandler {
public void OnDrag(PointerEventData eventData)
}
public UnityEngine.EventSystems.IDropHandler {
public void OnDrop(PointerEventData eventData)
}
public UnityEngine.EventSystems.IEndDragHandler {
public void OnEndDrag(PointerEventData eventData)
}
public UnityEngine.EventSystems.IInitializePotentialDragHandler {
public void OnInitializePotentialDrag(PointerEventData eventData)
}
public UnityEngine.EventSystems.IMoveHandler {
public void OnMove(AxisEventData eventData)
}
public UnityEngine.EventSystems.IPointerClickHandler {
public void OnPointerClick(PointerEventData eventData)
}
public UnityEngine.EventSystems.IPointerDownHandler {
public void OnPointerDown(PointerEventData eventData)
}
public UnityEngine.EventSystems.IPointerEnterHandler {
public void OnPointerEnter(PointerEventData eventData)
}
public UnityEngine.EventSystems.IPointerExitHandler {
public void OnPointerExit(PointerEventData eventData)
}
public UnityEngine.EventSystems.IPointerUpHandler {
public void OnPointerUp(PointerEventData eventData)
}
public UnityEngine.EventSystems.IScrollHandler {
public void OnScroll(PointerEventData eventData)
}
public UnityEngine.EventSystems.ISelectHandler {
public void OnSelect(BaseEventData eventData)
}
public UnityEngine.EventSystems.ISubmitHandler {
public void OnSubmit(BaseEventData eventData)
}
public UnityEngine.EventSystems.IUpdateSelectedHandler {
public void OnUpdateSelected(BaseEventData eventData)
}
public UnityEngine.EventSystems.MoveDirection : Enum {
public int value__
public MoveDirection Left
public MoveDirection Up
public MoveDirection Right
public MoveDirection Down
public MoveDirection None
}
public UnityEngine.EventSystems.Physics2DRaycaster : PhysicsRaycaster {
private RaycastHit2D[] m_Hits
public void Raycast(PointerEventData eventData, List`1<RaycastResult> resultAppendList)
}
public UnityEngine.EventSystems.PhysicsRaycaster : BaseRaycaster {
protected int kNoEventMaskSet
protected Camera m_EventCamera
protected LayerMask m_EventMask
protected int m_MaxRayIntersections
protected int m_LastMaxRayIntersections
private RaycastHit[] m_Hits
public Camera eventCamera
public int depth
public int finalEventMask
public LayerMask eventMask
public int maxRayIntersections
public Camera get_eventCamera()
public int get_depth()
public int get_finalEventMask()
public LayerMask get_eventMask()
public void set_eventMask(LayerMask value)
public int get_maxRayIntersections()
public void set_maxRayIntersections(int value)
protected bool ComputeRayAndDistance(PointerEventData eventData, Ray& ray, Single& distanceToClipPlane)
public void Raycast(PointerEventData eventData, List`1<RaycastResult> resultAppendList)
}
public UnityEngine.EventSystems.PointerEventData : BaseEventData {
private GameObject <pointerEnter>k__BackingField
private GameObject m_PointerPress
private GameObject <lastPress>k__BackingField
private GameObject <rawPointerPress>k__BackingField
private GameObject <pointerDrag>k__BackingField
private RaycastResult <pointerCurrentRaycast>k__BackingField
private RaycastResult <pointerPressRaycast>k__BackingField
public List`1<GameObject> hovered
private bool <eligibleForClick>k__BackingField
private int <pointerId>k__BackingField
private Vector2 <position>k__BackingField
private Vector2 <delta>k__BackingField
private Vector2 <pressPosition>k__BackingField
private Vector3 <worldPosition>k__BackingField
private Vector3 <worldNormal>k__BackingField
private float <clickTime>k__BackingField
private int <clickCount>k__BackingField
private Vector2 <scrollDelta>k__BackingField
private bool <useDragThreshold>k__BackingField
private bool <dragging>k__BackingField
private InputButton <button>k__BackingField
public GameObject pointerEnter
public GameObject lastPress
public GameObject rawPointerPress
public GameObject pointerDrag
public RaycastResult pointerCurrentRaycast
public RaycastResult pointerPressRaycast
public bool eligibleForClick
public int pointerId
public Vector2 position
public Vector2 delta
public Vector2 pressPosition
public Vector3 worldPosition
public Vector3 worldNormal
public float clickTime
public int clickCount
public Vector2 scrollDelta
public bool useDragThreshold
public bool dragging
public InputButton button
public Camera enterEventCamera
public Camera pressEventCamera
public GameObject pointerPress
public GameObject get_pointerEnter()
public void set_pointerEnter(GameObject value)
public GameObject get_lastPress()
private void set_lastPress(GameObject value)
public GameObject get_rawPointerPress()
public void set_rawPointerPress(GameObject value)
public GameObject get_pointerDrag()
public void set_pointerDrag(GameObject value)
public RaycastResult get_pointerCurrentRaycast()
public void set_pointerCurrentRaycast(RaycastResult value)
public RaycastResult get_pointerPressRaycast()
public void set_pointerPressRaycast(RaycastResult value)
public bool get_eligibleForClick()
public void set_eligibleForClick(bool value)
public int get_pointerId()
public void set_pointerId(int value)
public Vector2 get_position()
public void set_position(Vector2 value)
public Vector2 get_delta()
public void set_delta(Vector2 value)
public Vector2 get_pressPosition()
public void set_pressPosition(Vector2 value)
public Vector3 get_worldPosition()
public void set_worldPosition(Vector3 value)
public Vector3 get_worldNormal()
public void set_worldNormal(Vector3 value)
public float get_clickTime()
public void set_clickTime(float value)
public int get_clickCount()
public void set_clickCount(int value)
public Vector2 get_scrollDelta()
public void set_scrollDelta(Vector2 value)
public bool get_useDragThreshold()
public void set_useDragThreshold(bool value)
public bool get_dragging()
public void set_dragging(bool value)
public InputButton get_button()
public void set_button(InputButton value)
public void .ctor(EventSystem eventSystem)
public bool IsPointerMoving()
public bool IsScrolling()
public Camera get_enterEventCamera()
public Camera get_pressEventCamera()
public GameObject get_pointerPress()
public void set_pointerPress(GameObject value)
public string ToString()
}
public UnityEngine.EventSystems.PointerInputModule : BaseInputModule {
public int kMouseLeftId
public int kMouseRightId
public int kMouseMiddleId
public int kFakeTouchesId
protected Dictionary`2<int, PointerEventData> m_PointerData
private MouseState m_MouseState
protected bool GetPointerData(int id, PointerEventData& data, bool create)
protected void RemovePointerData(PointerEventData data)
protected PointerEventData GetTouchPointerEventData(Touch input, Boolean& pressed, Boolean& released)
protected void CopyFromTo(PointerEventData from, PointerEventData to)
protected FramePressState StateForMouseButton(int buttonId)
protected MouseState GetMousePointerEventData()
protected MouseState GetMousePointerEventData(int id)
protected PointerEventData GetLastPointerEventData(int id)
private bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold)
protected void ProcessMove(PointerEventData pointerEvent)
protected void ProcessDrag(PointerEventData pointerEvent)
public bool IsPointerOverGameObject(int pointerId)
protected void ClearSelection()
public string ToString()
protected void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent)
}
internal UnityEngine.EventSystems.RaycasterManager : object {
private List`1<BaseRaycaster> s_Raycasters
public void AddRaycaster(BaseRaycaster baseRaycaster)
public List`1<BaseRaycaster> GetRaycasters()
public void RemoveRaycasters(BaseRaycaster baseRaycaster)
}
public UnityEngine.EventSystems.RaycastResult : ValueType {
private GameObject m_GameObject
public BaseRaycaster module
public float distance
public float index
public int depth
public int sortingLayer
public int sortingOrder
public Vector3 worldPosition
public Vector3 worldNormal
public Vector2 screenPosition
public GameObject gameObject
public bool isValid
public GameObject get_gameObject()
public void set_gameObject(GameObject value)
public bool get_isValid()
public void Clear()
public string ToString()
}
public UnityEngine.EventSystems.StandaloneInputModule : PointerInputModule {
private float m_PrevActionTime
private Vector2 m_LastMoveVector
private int m_ConsecutiveMoveCount
private Vector2 m_LastMousePosition
private Vector2 m_MousePosition
private GameObject m_CurrentFocusedGameObject
private PointerEventData m_InputPointerEvent
private string m_HorizontalAxis
private string m_VerticalAxis
private string m_SubmitButton
private string m_CancelButton
private float m_InputActionsPerSecond
private float m_RepeatDelay
private bool m_ForceModuleActive
public InputMode inputMode
public bool allowActivationOnMobileDevice
public bool forceModuleActive
public float inputActionsPerSecond
public float repeatDelay
public string horizontalAxis
public string verticalAxis
public string submitButton
public string cancelButton
public InputMode get_inputMode()
public bool get_allowActivationOnMobileDevice()
public void set_allowActivationOnMobileDevice(bool value)
public bool get_forceModuleActive()
public void set_forceModuleActive(bool value)
public float get_inputActionsPerSecond()
public void set_inputActionsPerSecond(float value)
public float get_repeatDelay()
public void set_repeatDelay(float value)
public string get_horizontalAxis()
public void set_horizontalAxis(string value)
public string get_verticalAxis()
public void set_verticalAxis(string value)
public string get_submitButton()
public void set_submitButton(string value)
public string get_cancelButton()
public void set_cancelButton(string value)
private bool ShouldIgnoreEventsOnNoFocus()
public void UpdateModule()
private void ReleaseMouse(PointerEventData pointerEvent, GameObject currentOverGo)
public bool IsModuleSupported()
public bool ShouldActivateModule()
public void ActivateModule()
public void DeactivateModule()
public void Process()
private bool ProcessTouchEvents()
protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released)
protected bool SendSubmitEventToSelectedObject()
private Vector2 GetRawMoveVector()
protected bool SendMoveEventToSelectedObject()
protected void ProcessMouseEvent()
protected bool ForceAutoSelect()
protected void ProcessMouseEvent(int id)
protected bool SendUpdateEventToSelectedObject()
protected void ProcessMousePress(MouseButtonEventData data)
protected GameObject GetCurrentFocusedGameObject()
}
public UnityEngine.EventSystems.TouchInputModule : PointerInputModule {
private Vector2 m_LastMousePosition
private Vector2 m_MousePosition
private PointerEventData m_InputPointerEvent
private bool m_ForceModuleActive
public bool allowActivationOnStandalone
public bool forceModuleActive
public bool get_allowActivationOnStandalone()
public void set_allowActivationOnStandalone(bool value)
public bool get_forceModuleActive()
public void set_forceModuleActive(bool value)
public void UpdateModule()
public bool IsModuleSupported()
public bool ShouldActivateModule()
private bool UseFakeInput()
public void Process()
private void FakeTouches()
private void ProcessTouchEvents()
protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released)
public void DeactivateModule()
public string ToString()
}
public UnityEngine.EventSystems.UIBehaviour : MonoBehaviour {
protected void Awake()
protected void OnEnable()
protected void Start()
protected void OnDisable()
protected void OnDestroy()
public bool IsActive()
protected void OnRectTransformDimensionsChange()
protected void OnBeforeTransformParentChanged()
protected void OnTransformParentChanged()
protected void OnDidApplyAnimationProperties()
protected void OnCanvasGroupChanged()
protected void OnCanvasHierarchyChanged()
public bool IsDestroyed()
}
public UnityEngine.UI.AnimationTriggers : object {
private string kDefaultNormalAnimName
private string kDefaultHighlightedAnimName
private string kDefaultPressedAnimName
private string kDefaultSelectedAnimName
private string kDefaultDisabledAnimName
private string m_NormalTrigger
private string m_HighlightedTrigger
private string m_PressedTrigger
private string m_SelectedTrigger
private string m_DisabledTrigger
public string normalTrigger
public string highlightedTrigger
public string pressedTrigger
public string selectedTrigger
public string disabledTrigger
public string get_normalTrigger()
public void set_normalTrigger(string value)
public string get_highlightedTrigger()
public void set_highlightedTrigger(string value)
public string get_pressedTrigger()
public void set_pressedTrigger(string value)
public string get_selectedTrigger()
public void set_selectedTrigger(string value)
public string get_disabledTrigger()
public void set_disabledTrigger(string value)
}
public UnityEngine.UI.AspectRatioFitter : UIBehaviour {
private AspectMode m_AspectMode
private float m_AspectRatio
private RectTransform m_Rect
private bool m_DelayedSetDirty
private DrivenRectTransformTracker m_Tracker
public AspectMode aspectMode
public float aspectRatio
private RectTransform rectTransform
public AspectMode get_aspectMode()
public void set_aspectMode(AspectMode value)
public float get_aspectRatio()
public void set_aspectRatio(float value)
private RectTransform get_rectTransform()
protected void OnEnable()
protected void OnDisable()
protected void Update()
protected void OnRectTransformDimensionsChange()
private void UpdateRect()
private float GetSizeDeltaToProduceSize(float size, int axis)
private Vector2 GetParentSize()
public void SetLayoutHorizontal()
public void SetLayoutVertical()
protected void SetDirty()
}
public UnityEngine.UI.BaseMeshEffect : UIBehaviour {
private Graphic m_Graphic
protected Graphic graphic
protected Graphic get_graphic()
protected void OnEnable()
protected void OnDisable()
protected void OnDidApplyAnimationProperties()
public void ModifyMesh(Mesh mesh)
public void ModifyMesh(VertexHelper vh)
}
public UnityEngine.UI.BaseVertexEffect : object {
public void ModifyVertices(List`1<UIVertex> vertices)
}
public UnityEngine.UI.Button : Selectable {
private ButtonClickedEvent m_OnClick
public ButtonClickedEvent onClick
public ButtonClickedEvent get_onClick()
public void set_onClick(ButtonClickedEvent value)
private void Press()
public void OnPointerClick(PointerEventData eventData)
public void OnSubmit(BaseEventData eventData)
private IEnumerator OnFinishSubmit()
}
public UnityEngine.UI.CanvasScaler : UIBehaviour {
private ScaleMode m_UiScaleMode
protected float m_ReferencePixelsPerUnit
protected float m_ScaleFactor
protected Vector2 m_ReferenceResolution
protected ScreenMatchMode m_ScreenMatchMode
protected float m_MatchWidthOrHeight
private float kLogBase
protected Unit m_PhysicalUnit
protected float m_FallbackScreenDPI
protected float m_DefaultSpriteDPI
protected float m_DynamicPixelsPerUnit
private Canvas m_Canvas
private float m_PrevScaleFactor
private float m_PrevReferencePixelsPerUnit
public ScaleMode uiScaleMode
public float referencePixelsPerUnit
public float scaleFactor
public Vector2 referenceResolution
public ScreenMatchMode screenMatchMode
public float matchWidthOrHeight
public Unit physicalUnit
public float fallbackScreenDPI
public float defaultSpriteDPI
public float dynamicPixelsPerUnit
public ScaleMode get_uiScaleMode()
public void set_uiScaleMode(ScaleMode value)
public float get_referencePixelsPerUnit()
public void set_referencePixelsPerUnit(float value)
public float get_scaleFactor()
public void set_scaleFactor(float value)
public Vector2 get_referenceResolution()
public void set_referenceResolution(Vector2 value)
public ScreenMatchMode get_screenMatchMode()
public void set_screenMatchMode(ScreenMatchMode value)
public float get_matchWidthOrHeight()
public void set_matchWidthOrHeight(float value)
public Unit get_physicalUnit()
public void set_physicalUnit(Unit value)
public float get_fallbackScreenDPI()
public void set_fallbackScreenDPI(float value)
public float get_defaultSpriteDPI()
public void set_defaultSpriteDPI(float value)
public float get_dynamicPixelsPerUnit()
public void set_dynamicPixelsPerUnit(float value)
protected void OnEnable()
protected void OnDisable()
protected void Update()
protected void Handle()
protected void HandleWorldCanvas()
protected void HandleConstantPixelSize()
protected void HandleScaleWithScreenSize()
protected void HandleConstantPhysicalSize()
protected void SetScaleFactor(float scaleFactor)
protected void SetReferencePixelsPerUnit(float referencePixelsPerUnit)
}
public UnityEngine.UI.CanvasUpdate : Enum {
public int value__
public CanvasUpdate Prelayout
public CanvasUpdate Layout
public CanvasUpdate PostLayout
public CanvasUpdate PreRender
public CanvasUpdate LatePreRender
public CanvasUpdate MaxUpdateValue
}
public UnityEngine.UI.CanvasUpdateRegistry : object {
private CanvasUpdateRegistry s_Instance
private bool m_PerformingLayoutUpdate
private bool m_PerformingGraphicUpdate
private IndexedSet`1<ICanvasElement> m_LayoutRebuildQueue
private IndexedSet`1<ICanvasElement> m_GraphicRebuildQueue
private Comparison`1<ICanvasElement> s_SortLayoutFunction
public CanvasUpdateRegistry instance
public CanvasUpdateRegistry get_instance()
private bool ObjectValidForUpdate(ICanvasElement element)
private void CleanInvalidItems()
private void PerformUpdate()
private int ParentCount(Transform child)
private int SortLayoutList(ICanvasElement x, ICanvasElement y)
public void RegisterCanvasElementForLayoutRebuild(ICanvasElement element)
public bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element)
private bool InternalRegisterCanvasElementForLayoutRebuild(ICanvasElement element)
public void RegisterCanvasElementForGraphicRebuild(ICanvasElement element)
public bool TryRegisterCanvasElementForGraphicRebuild(ICanvasElement element)
private bool InternalRegisterCanvasElementForGraphicRebuild(ICanvasElement element)
public void UnRegisterCanvasElementForRebuild(ICanvasElement element)
private void InternalUnRegisterCanvasElementForLayoutRebuild(ICanvasElement element)
private void InternalUnRegisterCanvasElementForGraphicRebuild(ICanvasElement element)
public bool IsRebuildingLayout()
public bool IsRebuildingGraphics()
}
public UnityEngine.UI.ClipperRegistry : object {
private ClipperRegistry s_Instance
private IndexedSet`1<IClipper> m_Clippers
public ClipperRegistry instance
public ClipperRegistry get_instance()
public void Cull()
public void Register(IClipper c)
public void Unregister(IClipper c)
}
public UnityEngine.UI.Clipping : object {
public Rect FindCullAndClipWorldRect(List`1<RectMask2D> rectMaskParents, Boolean& validRect)
}
internal UnityEngine.UI.Collections.IndexedSet`1 : object {
private List`1<T> m_List
private Dictionary`2<T, int> m_Dictionary
public int Count
public bool IsReadOnly
public T Item
public void Add(T item)
public bool AddUnique(T item)
public bool Remove(T item)
public IEnumerator`1<T> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public void Clear()
public bool Contains(T item)
public void CopyTo(T[] array, int arrayIndex)
public int get_Count()
public bool get_IsReadOnly()
public int IndexOf(T item)
public void Insert(int index, T item)
public void RemoveAt(int index)
public T get_Item(int index)
public void set_Item(int index, T value)
public void RemoveAll(Predicate`1<T> match)
public void Sort(Comparison`1<T> sortLayoutFunction)
}
public UnityEngine.UI.ColorBlock : ValueType {
private Color m_NormalColor
private Color m_HighlightedColor
private Color m_PressedColor
private Color m_SelectedColor
private Color m_DisabledColor
private float m_ColorMultiplier
private float m_FadeDuration
public Color normalColor
public Color highlightedColor
public Color pressedColor
public Color selectedColor
public Color disabledColor
public float colorMultiplier
public float fadeDuration
public ColorBlock defaultColorBlock
public Color get_normalColor()
public void set_normalColor(Color value)
public Color get_highlightedColor()
public void set_highlightedColor(Color value)
public Color get_pressedColor()
public void set_pressedColor(Color value)
public Color get_selectedColor()
public void set_selectedColor(Color value)
public Color get_disabledColor()
public void set_disabledColor(Color value)
public float get_colorMultiplier()
public void set_colorMultiplier(float value)
public float get_fadeDuration()
public void set_fadeDuration(float value)
public ColorBlock get_defaultColorBlock()
public bool Equals(object obj)
public bool Equals(ColorBlock other)
public bool op_Equality(ColorBlock point1, ColorBlock point2)
public bool op_Inequality(ColorBlock point1, ColorBlock point2)
public int GetHashCode()
}
public UnityEngine.UI.ContentSizeFitter : UIBehaviour {
protected FitMode m_HorizontalFit
protected FitMode m_VerticalFit
private RectTransform m_Rect
private DrivenRectTransformTracker m_Tracker
public FitMode horizontalFit
public FitMode verticalFit
private RectTransform rectTransform
public FitMode get_horizontalFit()
public void set_horizontalFit(FitMode value)
public FitMode get_verticalFit()
public void set_verticalFit(FitMode value)
private RectTransform get_rectTransform()
protected void OnEnable()
protected void OnDisable()
protected void OnRectTransformDimensionsChange()
private void HandleSelfFittingAlongAxis(int axis)
public void SetLayoutHorizontal()
public void SetLayoutVertical()
protected void SetDirty()
}
internal UnityEngine.UI.CoroutineTween.ColorTween : ValueType {
private ColorTweenCallback m_Target
private Color m_StartColor
private Color m_TargetColor
private ColorTweenMode m_TweenMode
private float m_Duration
private bool m_IgnoreTimeScale
public Color startColor
public Color targetColor
public ColorTweenMode tweenMode
public float duration
public bool ignoreTimeScale
public Color get_startColor()
public void set_startColor(Color value)
public Color get_targetColor()
public void set_targetColor(Color value)
public ColorTweenMode get_tweenMode()
public void set_tweenMode(ColorTweenMode value)
public float get_duration()
public void set_duration(float value)
public bool get_ignoreTimeScale()
public void set_ignoreTimeScale(bool value)
public void TweenValue(float floatPercentage)
public void AddOnChangedCallback(UnityAction`1<Color> callback)
public bool GetIgnoreTimescale()
public float GetDuration()
public bool ValidTarget()
}
internal UnityEngine.UI.CoroutineTween.FloatTween : ValueType {
private FloatTweenCallback m_Target
private float m_StartValue
private float m_TargetValue
private float m_Duration
private bool m_IgnoreTimeScale
public float startValue
public float targetValue
public float duration
public bool ignoreTimeScale
public float get_startValue()
public void set_startValue(float value)
public float get_targetValue()
public void set_targetValue(float value)
public float get_duration()
public void set_duration(float value)
public bool get_ignoreTimeScale()
public void set_ignoreTimeScale(bool value)
public void TweenValue(float floatPercentage)
public void AddOnChangedCallback(UnityAction`1<float> callback)
public bool GetIgnoreTimescale()
public float GetDuration()
public bool ValidTarget()
}
internal UnityEngine.UI.CoroutineTween.ITweenValue {
public bool ignoreTimeScale
public float duration
public void TweenValue(float floatPercentage)
public bool get_ignoreTimeScale()
public float get_duration()
public bool ValidTarget()
}
internal UnityEngine.UI.CoroutineTween.TweenRunner`1 : object {
protected MonoBehaviour m_CoroutineContainer
protected IEnumerator m_Tween
private IEnumerator Start(T tweenInfo)
public void Init(MonoBehaviour coroutineContainer)
public void StartTween(T info)
public void StopTween()
}
public UnityEngine.UI.DefaultControls : object {
private IFactoryControls m_CurrentFactory
private float kWidth
private float kThickHeight
private float kThinHeight
private Vector2 s_ThickElementSize
private Vector2 s_ThinElementSize
private Vector2 s_ImageElementSize
private Color s_DefaultSelectableColor
private Color s_PanelColor
private Color s_TextColor
public IFactoryControls factory
public IFactoryControls get_factory()
private GameObject CreateUIElementRoot(string name, Vector2 size, Type[] components)
private GameObject CreateUIObject(string name, GameObject parent, Type[] components)
private void SetDefaultTextValues(Text lbl)
private void SetDefaultColorTransitionValues(Selectable slider)
private void SetParentAndAlign(GameObject child, GameObject parent)
private void SetLayerRecursively(GameObject go, int layer)
public GameObject CreatePanel(Resources resources)
public GameObject CreateButton(Resources resources)
public GameObject CreateText(Resources resources)
public GameObject CreateImage(Resources resources)
public GameObject CreateRawImage(Resources resources)
public GameObject CreateSlider(Resources resources)
public GameObject CreateScrollbar(Resources resources)
public GameObject CreateToggle(Resources resources)
public GameObject CreateInputField(Resources resources)
public GameObject CreateDropdown(Resources resources)
public GameObject CreateScrollView(Resources resources)
}
public UnityEngine.UI.Dropdown : Selectable {
private RectTransform m_Template
private Text m_CaptionText
private Image m_CaptionImage
private Text m_ItemText
private Image m_ItemImage
private int m_Value
private OptionDataList m_Options
private DropdownEvent m_OnValueChanged
private float m_AlphaFadeSpeed
private GameObject m_Dropdown
private GameObject m_Blocker
private List`1<DropdownItem> m_Items
private TweenRunner`1<FloatTween> m_AlphaTweenRunner
private bool validTemplate
private OptionData s_NoOptionData
public RectTransform template
public Text captionText
public Image captionImage
public Text itemText
public Image itemImage
public List`1<OptionData> options
public DropdownEvent onValueChanged
public float alphaFadeSpeed
public int value
public RectTransform get_template()
public void set_template(RectTransform value)
public Text get_captionText()
public void set_captionText(Text value)
public Image get_captionImage()
public void set_captionImage(Image value)
public Text get_itemText()
public void set_itemText(Text value)
public Image get_itemImage()
public void set_itemImage(Image value)
public List`1<OptionData> get_options()
public void set_options(List`1<OptionData> value)
public DropdownEvent get_onValueChanged()
public void set_onValueChanged(DropdownEvent value)
public float get_alphaFadeSpeed()
public void set_alphaFadeSpeed(float value)
public int get_value()
public void set_value(int value)
public void SetValueWithoutNotify(int input)
private void Set(int value, bool sendCallback)
protected void Awake()
protected void Start()
protected void OnDisable()
public void RefreshShownValue()
public void AddOptions(List`1<OptionData> options)
public void AddOptions(List`1<string> options)
public void AddOptions(List`1<Sprite> options)
public void ClearOptions()
private void SetupTemplate()
private T GetOrAddComponent(GameObject go)
public void OnPointerClick(PointerEventData eventData)
public void OnSubmit(BaseEventData eventData)
public void OnCancel(BaseEventData eventData)
public void Show()
protected GameObject CreateBlocker(Canvas rootCanvas)
protected void DestroyBlocker(GameObject blocker)
protected GameObject CreateDropdownList(GameObject template)
protected void DestroyDropdownList(GameObject dropdownList)
protected DropdownItem CreateItem(DropdownItem itemTemplate)
protected void DestroyItem(DropdownItem item)
private DropdownItem AddItem(OptionData data, bool selected, DropdownItem itemTemplate, List`1<DropdownItem> items)
private void AlphaFadeList(float duration, float alpha)
private void AlphaFadeList(float duration, float start, float end)
private void SetAlpha(float alpha)
public void Hide()
private IEnumerator DelayedDestroyDropdownList(float delay)
private void ImmediateDestroyDropdownList()
private void OnSelectItem(Toggle toggle)
}
public UnityEngine.UI.FontData : object {
private Font m_Font
private int m_FontSize
private FontStyle m_FontStyle
private bool m_BestFit
private int m_MinSize
private int m_MaxSize
private TextAnchor m_Alignment
private bool m_AlignByGeometry
private bool m_RichText
private HorizontalWrapMode m_HorizontalOverflow
private VerticalWrapMode m_VerticalOverflow
private float m_LineSpacing
public FontData defaultFontData
public Font font
public int fontSize
public FontStyle fontStyle
public bool bestFit
public int minSize
public int maxSize
public TextAnchor alignment
public bool alignByGeometry
public bool richText
public HorizontalWrapMode horizontalOverflow
public VerticalWrapMode verticalOverflow
public float lineSpacing
public FontData get_defaultFontData()
public Font get_font()
public void set_font(Font value)
public int get_fontSize()
public void set_fontSize(int value)
public FontStyle get_fontStyle()
public void set_fontStyle(FontStyle value)
public bool get_bestFit()
public void set_bestFit(bool value)
public int get_minSize()
public void set_minSize(int value)
public int get_maxSize()
public void set_maxSize(int value)
public TextAnchor get_alignment()
public void set_alignment(TextAnchor value)
public bool get_alignByGeometry()
public void set_alignByGeometry(bool value)
public bool get_richText()
public void set_richText(bool value)
public HorizontalWrapMode get_horizontalOverflow()
public void set_horizontalOverflow(HorizontalWrapMode value)
public VerticalWrapMode get_verticalOverflow()
public void set_verticalOverflow(VerticalWrapMode value)
public float get_lineSpacing()
public void set_lineSpacing(float value)
private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
}
public UnityEngine.UI.FontUpdateTracker : object {
private Dictionary`2<Font, HashSet`1<Text>> m_Tracked
public void TrackText(Text t)
private void RebuildForFont(Font f)
public void UntrackText(Text t)
}
public UnityEngine.UI.Graphic : UIBehaviour {
protected Material s_DefaultUI
protected Texture2D s_WhiteTexture
protected Material m_Material
private Color m_Color
protected bool m_SkipLayoutUpdate
protected bool m_SkipMaterialUpdate
private bool m_RaycastTarget
private RectTransform m_RectTransform
private CanvasRenderer m_CanvasRenderer
private Canvas m_Canvas
private bool m_VertsDirty
private bool m_MaterialDirty
protected UnityAction m_OnDirtyLayoutCallback
protected UnityAction m_OnDirtyVertsCallback
protected UnityAction m_OnDirtyMaterialCallback
protected Mesh s_Mesh
private VertexHelper s_VertexHelper
protected Mesh m_CachedMesh
protected Vector2[] m_CachedUvs
private TweenRunner`1<ColorTween> m_ColorTweenRunner
private bool <useLegacyMeshGeneration>k__BackingField
public Material defaultGraphicMaterial
public Color color
public bool raycastTarget
protected bool useLegacyMeshGeneration
public int depth
public RectTransform rectTransform
public Canvas canvas
public CanvasRenderer canvasRenderer
public Material defaultMaterial
public Material material
public Material materialForRendering
public Texture mainTexture
protected Mesh workerMesh
public Material get_defaultGraphicMaterial()
public Color get_color()
public void set_color(Color value)
public bool get_raycastTarget()
public void set_raycastTarget(bool value)
protected bool get_useLegacyMeshGeneration()
protected void set_useLegacyMeshGeneration(bool value)
public void SetAllDirty()
public void SetLayoutDirty()
public void SetVerticesDirty()
public void SetMaterialDirty()
protected void OnRectTransformDimensionsChange()
protected void OnBeforeTransformParentChanged()
protected void OnTransformParentChanged()
public int get_depth()
public RectTransform get_rectTransform()
public Canvas get_canvas()
private void CacheCanvas()
public CanvasRenderer get_canvasRenderer()
public Material get_defaultMaterial()
public Material get_material()
public void set_material(Material value)
public Material get_materialForRendering()
public Texture get_mainTexture()
protected void OnEnable()
protected void OnDisable()
protected void OnDestroy()
protected void OnCanvasHierarchyChanged()
public void OnCullingChanged()
public void Rebuild(CanvasUpdate update)
public void LayoutComplete()
public void GraphicUpdateComplete()
protected void UpdateMaterial()
protected void UpdateGeometry()
private void DoMeshGeneration()
private void DoLegacyMeshGeneration()
protected Mesh get_workerMesh()
protected void OnFillVBO(List`1<UIVertex> vbo)
protected void OnPopulateMesh(Mesh m)
protected void OnPopulateMesh(VertexHelper vh)
protected void OnDidApplyAnimationProperties()
public void SetNativeSize()
public bool Raycast(Vector2 sp, Camera eventCamera)
public Vector2 PixelAdjustPoint(Vector2 point)
public Rect GetPixelAdjustedRect()
public void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha)
public void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB)
private Color CreateColorFromAlpha(float alpha)
public void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale)
public void RegisterDirtyLayoutCallback(UnityAction action)
public void UnregisterDirtyLayoutCallback(UnityAction action)
public void RegisterDirtyVerticesCallback(UnityAction action)
public void UnregisterDirtyVerticesCallback(UnityAction action)
public void RegisterDirtyMaterialCallback(UnityAction action)
public void UnregisterDirtyMaterialCallback(UnityAction action)
private Transform UnityEngine.UI.ICanvasElement.get_transform()
}
public UnityEngine.UI.GraphicRaycaster : BaseRaycaster {
protected int kNoEventMaskSet
private bool m_IgnoreReversedGraphics
private BlockingObjects m_BlockingObjects
protected LayerMask m_BlockingMask
private Canvas m_Canvas
private List`1<Graphic> m_RaycastResults
private List`1<Graphic> s_SortedGraphics
public int sortOrderPriority
public int renderOrderPriority
public bool ignoreReversedGraphics
public BlockingObjects blockingObjects
private Canvas canvas
public Camera eventCamera
public int get_sortOrderPriority()
public int get_renderOrderPriority()
public bool get_ignoreReversedGraphics()
public void set_ignoreReversedGraphics(bool value)
public BlockingObjects get_blockingObjects()
public void set_blockingObjects(BlockingObjects value)
private Canvas get_canvas()
public void Raycast(PointerEventData eventData, List`1<RaycastResult> resultAppendList)
public Camera get_eventCamera()
private void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList`1<Graphic> foundGraphics, List`1<Graphic> results)
}
public UnityEngine.UI.GraphicRegistry : object {
private GraphicRegistry s_Instance
private Dictionary`2<Canvas, IndexedSet`1<Graphic>> m_Graphics
private List`1<Graphic> s_EmptyList
public GraphicRegistry instance
public GraphicRegistry get_instance()
public void RegisterGraphicForCanvas(Canvas c, Graphic graphic)
public void UnregisterGraphicForCanvas(Canvas c, Graphic graphic)
public IList`1<Graphic> GetGraphicsForCanvas(Canvas canvas)
}
public UnityEngine.UI.GridLayoutGroup : LayoutGroup {
protected Corner m_StartCorner
protected Axis m_StartAxis
protected Vector2 m_CellSize
protected Vector2 m_Spacing
protected Constraint m_Constraint
protected int m_ConstraintCount
public Corner startCorner
public Axis startAxis
public Vector2 cellSize
public Vector2 spacing
public Constraint constraint
public int constraintCount
public Corner get_startCorner()
public void set_startCorner(Corner value)
public Axis get_startAxis()
public void set_startAxis(Axis value)
public Vector2 get_cellSize()
public void set_cellSize(Vector2 value)
public Vector2 get_spacing()
public void set_spacing(Vector2 value)
public Constraint get_constraint()
public void set_constraint(Constraint value)
public int get_constraintCount()
public void set_constraintCount(int value)
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public void SetLayoutHorizontal()
public void SetLayoutVertical()
private void SetCellsAlongAxis(int axis)
}
public UnityEngine.UI.HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup {
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public void SetLayoutHorizontal()
public void SetLayoutVertical()
}
public UnityEngine.UI.HorizontalOrVerticalLayoutGroup : LayoutGroup {
protected float m_Spacing
protected bool m_ChildForceExpandWidth
protected bool m_ChildForceExpandHeight
protected bool m_ChildControlWidth
protected bool m_ChildControlHeight
protected bool m_ChildScaleWidth
protected bool m_ChildScaleHeight
public float spacing
public bool childForceExpandWidth
public bool childForceExpandHeight
public bool childControlWidth
public bool childControlHeight
public bool childScaleWidth
public bool childScaleHeight
public float get_spacing()
public void set_spacing(float value)
public bool get_childForceExpandWidth()
public void set_childForceExpandWidth(bool value)
public bool get_childForceExpandHeight()
public void set_childForceExpandHeight(bool value)
public bool get_childControlWidth()
public void set_childControlWidth(bool value)
public bool get_childControlHeight()
public void set_childControlHeight(bool value)
public bool get_childScaleWidth()
public void set_childScaleWidth(bool value)
public bool get_childScaleHeight()
public void set_childScaleHeight(bool value)
protected void CalcAlongAxis(int axis, bool isVertical)
protected void SetChildrenAlongAxis(int axis, bool isVertical)
private void GetChildSizes(RectTransform child, int axis, bool controlSize, bool childForceExpand, Single& min, Single& preferred, Single& flexible)
}
public UnityEngine.UI.ICanvasElement {
public Transform transform
public void Rebuild(CanvasUpdate executing)
public Transform get_transform()
public void LayoutComplete()
public void GraphicUpdateComplete()
public bool IsDestroyed()
}
public UnityEngine.UI.IClippable {
public GameObject gameObject
public RectTransform rectTransform
public GameObject get_gameObject()
public void RecalculateClipping()
public RectTransform get_rectTransform()
public void Cull(Rect clipRect, bool validRect)
public void SetClipRect(Rect value, bool validRect)
}
public UnityEngine.UI.IClipper {
public void PerformClipping()
}
internal UnityEngine.UI.IGraphicEnabledDisabled {
public void OnSiblingGraphicEnabledDisabled()
}
public UnityEngine.UI.ILayoutController {
public void SetLayoutHorizontal()
public void SetLayoutVertical()
}
public UnityEngine.UI.ILayoutElement {
public float minWidth
public float preferredWidth
public float flexibleWidth
public float minHeight
public float preferredHeight
public float flexibleHeight
public int layoutPriority
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public float get_minWidth()
public float get_preferredWidth()
public float get_flexibleWidth()
public float get_minHeight()
public float get_preferredHeight()
public float get_flexibleHeight()
public int get_layoutPriority()
}
public UnityEngine.UI.ILayoutIgnorer {
public bool ignoreLayout
public bool get_ignoreLayout()
}
public UnityEngine.UI.Image : MaskableGraphic {
protected Material s_ETC1DefaultUI
private Sprite m_Sprite
private Sprite m_OverrideSprite
private Type m_Type
private bool m_PreserveAspect
private bool m_FillCenter
private FillMethod m_FillMethod
private float m_FillAmount
private bool m_FillClockwise
private int m_FillOrigin
private float m_AlphaHitTestMinimumThreshold
private bool m_Tracked
private bool m_UseSpriteMesh
private float m_PixelsPerUnitMultiplier
private float m_CachedReferencePixelsPerUnit
private Vector2[] s_VertScratch
private Vector2[] s_UVScratch
private Vector3[] s_Xy
private Vector3[] s_Uv
private List`1<Image> m_TrackedTexturelessImages
private bool s_Initialized
public Sprite sprite
public Sprite overrideSprite
private Sprite activeSprite
public Type type
public bool preserveAspect
public bool fillCenter
public FillMethod fillMethod
public float fillAmount
public bool fillClockwise
public int fillOrigin
public float eventAlphaThreshold
public float alphaHitTestMinimumThreshold
public bool useSpriteMesh
public Material defaultETC1GraphicMaterial
public Texture mainTexture
public bool hasBorder
public float pixelsPerUnitMultiplier
public float pixelsPerUnit
protected float multipliedPixelsPerUnit
public Material material
public float minWidth
public float preferredWidth
public float flexibleWidth
public float minHeight
public float preferredHeight
public float flexibleHeight
public int layoutPriority
public Sprite get_sprite()
public void set_sprite(Sprite value)
public void DisableSpriteOptimizations()
public Sprite get_overrideSprite()
public void set_overrideSprite(Sprite value)
private Sprite get_activeSprite()
public Type get_type()
public void set_type(Type value)
public bool get_preserveAspect()
public void set_preserveAspect(bool value)
public bool get_fillCenter()
public void set_fillCenter(bool value)
public FillMethod get_fillMethod()
public void set_fillMethod(FillMethod value)
public float get_fillAmount()
public void set_fillAmount(float value)
public bool get_fillClockwise()
public void set_fillClockwise(bool value)
public int get_fillOrigin()
public void set_fillOrigin(int value)
public float get_eventAlphaThreshold()
public void set_eventAlphaThreshold(float value)
public float get_alphaHitTestMinimumThreshold()
public void set_alphaHitTestMinimumThreshold(float value)
public bool get_useSpriteMesh()
public void set_useSpriteMesh(bool value)
public Material get_defaultETC1GraphicMaterial()
public Texture get_mainTexture()
public bool get_hasBorder()
public float get_pixelsPerUnitMultiplier()
public void set_pixelsPerUnitMultiplier(float value)
public float get_pixelsPerUnit()
protected float get_multipliedPixelsPerUnit()
public Material get_material()
public void set_material(Material value)
public void OnBeforeSerialize()
public void OnAfterDeserialize()
private void PreserveSpriteAspectRatio(Rect& rect, Vector2 spriteSize)
private Vector4 GetDrawingDimensions(bool shouldPreserveAspect)
public void SetNativeSize()
protected void OnRectTransformDimensionsChange()
protected void OnTransformParentChanged()
protected void OnPopulateMesh(VertexHelper toFill)
private void TrackSprite()
protected void OnEnable()
protected void OnDisable()
protected void UpdateMaterial()
protected void OnCanvasHierarchyChanged()
private void GenerateSimpleSprite(VertexHelper vh, bool lPreserveAspect)
private void GenerateSprite(VertexHelper vh, bool lPreserveAspect)
private void GenerateSlicedSprite(VertexHelper toFill)
private void GenerateTiledSprite(VertexHelper toFill)
private void AddQuad(VertexHelper vertexHelper, Vector3[] quadPositions, Color32 color, Vector3[] quadUVs)
private void AddQuad(VertexHelper vertexHelper, Vector2 posMin, Vector2 posMax, Color32 color, Vector2 uvMin, Vector2 uvMax)
private Vector4 GetAdjustedBorders(Vector4 border, Rect adjustedRect)
private void GenerateFilledSprite(VertexHelper toFill, bool preserveAspect)
private bool RadialCut(Vector3[] xy, Vector3[] uv, float fill, bool invert, int corner)
private void RadialCut(Vector3[] xy, float cos, float sin, bool invert, int corner)
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public float get_minWidth()
public float get_preferredWidth()
public float get_flexibleWidth()
public float get_minHeight()
public float get_preferredHeight()
public float get_flexibleHeight()
public int get_layoutPriority()
public bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
private Vector2 MapCoordinate(Vector2 local, Rect rect)
private void RebuildImage(SpriteAtlas spriteAtlas)
private void TrackImage(Image g)
private void UnTrackImage(Image g)
}
public UnityEngine.UI.IMask {
public RectTransform rectTransform
public bool Enabled()
public RectTransform get_rectTransform()
}
public UnityEngine.UI.IMaskable {
public void RecalculateMasking()
}
public UnityEngine.UI.IMaterialModifier {
public Material GetModifiedMaterial(Material baseMaterial)
}
public UnityEngine.UI.IMeshModifier {
public void ModifyMesh(Mesh mesh)
public void ModifyMesh(VertexHelper verts)
}
public UnityEngine.UI.InputField : Selectable {
protected TouchScreenKeyboard m_Keyboard
private Char[] kSeparators
protected Text m_TextComponent
protected Graphic m_Placeholder
private ContentType m_ContentType
private InputType m_InputType
private char m_AsteriskChar
private TouchScreenKeyboardType m_KeyboardType
private LineType m_LineType
private bool m_HideMobileInput
private CharacterValidation m_CharacterValidation
private int m_CharacterLimit
private SubmitEvent m_OnEndEdit
private OnChangeEvent m_OnValueChanged
private OnValidateInput m_OnValidateInput
private Color m_CaretColor
private bool m_CustomCaretColor
private Color m_SelectionColor
protected string m_Text
private float m_CaretBlinkRate
private int m_CaretWidth
private bool m_ReadOnly
protected int m_CaretPosition
protected int m_CaretSelectPosition
private RectTransform caretRectTrans
protected UIVertex[] m_CursorVerts
private TextGenerator m_InputTextCache
private CanvasRenderer m_CachedInputRenderer
private bool m_PreventFontCallback
protected Mesh m_Mesh
private bool m_AllowInput
private bool m_ShouldActivateNextUpdate
private bool m_UpdateDrag
private bool m_DragPositionOutOfBounds
private float kHScrollSpeed
private float kVScrollSpeed
protected bool m_CaretVisible
private Coroutine m_BlinkCoroutine
private float m_BlinkStartTime
protected int m_DrawStart
protected int m_DrawEnd
private Coroutine m_DragCoroutine
private string m_OriginalText
private bool m_WasCanceled
private bool m_HasDoneFocusTransition
private WaitForSecondsRealtime m_WaitForSecondsRealtime
private bool m_TouchKeyboardAllowsInPlaceEditing
private string kEmailSpecialCharacters
private Event m_ProcessingEvent
private int k_MaxTextLength
private BaseInput input
private string compositionString
protected Mesh mesh
protected TextGenerator cachedInputTextGenerator
public bool shouldHideMobileInput
private bool shouldActivateOnSelect
public string text
public bool isFocused
public float caretBlinkRate
public int caretWidth
public Text textComponent
public Graphic placeholder
public Color caretColor
public bool customCaretColor
public Color selectionColor
public SubmitEvent onEndEdit
public OnChangeEvent onValueChange
public OnChangeEvent onValueChanged
public OnValidateInput onValidateInput
public int characterLimit
public ContentType contentType
public LineType lineType
public InputType inputType
public TouchScreenKeyboard touchScreenKeyboard
public TouchScreenKeyboardType keyboardType
public CharacterValidation characterValidation
public bool readOnly
public bool multiLine
public char asteriskChar
public bool wasCanceled
protected int caretPositionInternal
protected int caretSelectPositionInternal
private bool hasSelection
public int caretPosition
public int selectionAnchorPosition
public int selectionFocusPosition
private string clipboard
public float minWidth
public float preferredWidth
public float flexibleWidth
public float minHeight
public float preferredHeight
public float flexibleHeight
public int layoutPriority
private BaseInput get_input()
private string get_compositionString()
protected Mesh get_mesh()
protected TextGenerator get_cachedInputTextGenerator()
public void set_shouldHideMobileInput(bool value)
public bool get_shouldHideMobileInput()
private bool get_shouldActivateOnSelect()
public string get_text()
public void set_text(string value)
public void SetTextWithoutNotify(string input)
private void SetText(string value, bool sendCallback)
public bool get_isFocused()
public float get_caretBlinkRate()
public void set_caretBlinkRate(float value)
public int get_caretWidth()
public void set_caretWidth(int value)
public Text get_textComponent()
public void set_textComponent(Text value)
public Graphic get_placeholder()
public void set_placeholder(Graphic value)
public Color get_caretColor()
public void set_caretColor(Color value)
public bool get_customCaretColor()
public void set_customCaretColor(bool value)
public Color get_selectionColor()
public void set_selectionColor(Color value)
public SubmitEvent get_onEndEdit()
public void set_onEndEdit(SubmitEvent value)
public OnChangeEvent get_onValueChange()
public void set_onValueChange(OnChangeEvent value)
public OnChangeEvent get_onValueChanged()
public void set_onValueChanged(OnChangeEvent value)
public OnValidateInput get_onValidateInput()
public void set_onValidateInput(OnValidateInput value)
public int get_characterLimit()
public void set_characterLimit(int value)
public ContentType get_contentType()
public void set_contentType(ContentType value)
public LineType get_lineType()
public void set_lineType(LineType value)
public InputType get_inputType()
public void set_inputType(InputType value)
public TouchScreenKeyboard get_touchScreenKeyboard()
public TouchScreenKeyboardType get_keyboardType()
public void set_keyboardType(TouchScreenKeyboardType value)
public CharacterValidation get_characterValidation()
public void set_characterValidation(CharacterValidation value)
public bool get_readOnly()
public void set_readOnly(bool value)
public bool get_multiLine()
public char get_asteriskChar()
public void set_asteriskChar(char value)
public bool get_wasCanceled()
protected void ClampPos(Int32& pos)
protected int get_caretPositionInternal()
protected void set_caretPositionInternal(int value)
protected int get_caretSelectPositionInternal()
protected void set_caretSelectPositionInternal(int value)
private bool get_hasSelection()
public int get_caretPosition()
public void set_caretPosition(int value)
public int get_selectionAnchorPosition()
public void set_selectionAnchorPosition(int value)
public int get_selectionFocusPosition()
public void set_selectionFocusPosition(int value)
protected void OnEnable()
protected void OnDisable()
private IEnumerator CaretBlink()
private void SetCaretVisible()
private void SetCaretActive()
private void UpdateCaretMaterial()
protected void OnFocus()
protected void SelectAll()
public void MoveTextEnd(bool shift)
public void MoveTextStart(bool shift)
private string get_clipboard()
private void set_clipboard(string value)
private bool InPlaceEditing()
private void UpdateCaretFromKeyboard()
protected void LateUpdate()
public Vector2 ScreenToLocal(Vector2 screen)
private int GetUnclampedCharacterLineFromPosition(Vector2 pos, TextGenerator generator)
protected int GetCharacterIndexFromPosition(Vector2 pos)
private bool MayDrag(PointerEventData eventData)
public void OnBeginDrag(PointerEventData eventData)
public void OnDrag(PointerEventData eventData)
private IEnumerator MouseDragOutsideRect(PointerEventData eventData)
public void OnEndDrag(PointerEventData eventData)
public void OnPointerDown(PointerEventData eventData)
protected EditState KeyPressed(Event evt)
private bool IsValidChar(char c)
public void ProcessEvent(Event e)
public void OnUpdateSelected(BaseEventData eventData)
private string GetSelectedString()
private int FindtNextWordBegin()
private void MoveRight(bool shift, bool ctrl)
private int FindtPrevWordBegin()
private void MoveLeft(bool shift, bool ctrl)
private int DetermineCharacterLine(int charPos, TextGenerator generator)
private int LineUpCharacterPosition(int originalPos, bool goToFirstChar)
private int LineDownCharacterPosition(int originalPos, bool goToLastChar)
private void MoveDown(bool shift)
private void MoveDown(bool shift, bool goToLastChar)
private void MoveUp(bool shift)
private void MoveUp(bool shift, bool goToFirstChar)
private void Delete()
private void ForwardSpace()
private void Backspace()
private void Insert(char c)
private void UpdateTouchKeyboardFromEditChanges()
private void SendOnValueChangedAndUpdateLabel()
private void SendOnValueChanged()
protected void SendOnSubmit()
protected void Append(string input)
protected void Append(char input)
protected void UpdateLabel()
private bool IsSelectionVisible()
private int GetLineStartPosition(TextGenerator gen, int line)
private int GetLineEndPosition(TextGenerator gen, int line)
private void SetDrawRangeToContainCaretPosition(int caretPos)
public void ForceLabelUpdate()
private void MarkGeometryAsDirty()
public void Rebuild(CanvasUpdate update)
public void LayoutComplete()
public void GraphicUpdateComplete()
private void UpdateGeometry()
private void AssignPositioningIfNeeded()
private void OnFillVBO(Mesh vbo)
private void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset)
private void CreateCursorVerts()
private void GenerateHighlight(VertexHelper vbo, Vector2 roundingOffset)
protected char Validate(string text, int pos, char ch)
public void ActivateInputField()
private void ActivateInputFieldInternal()
public void OnSelect(BaseEventData eventData)
public void OnPointerClick(PointerEventData eventData)
public void DeactivateInputField()
public void OnDeselect(BaseEventData eventData)
public void OnSubmit(BaseEventData eventData)
private void EnforceContentType()
private void EnforceTextHOverflow()
private void SetToCustomIfContentTypeIsNot(ContentType[] allowedContentTypes)
private void SetToCustom()
protected void DoStateTransition(SelectionState state, bool instant)
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public float get_minWidth()
public float get_preferredWidth()
public float get_flexibleWidth()
public float get_minHeight()
public float get_preferredHeight()
public float get_flexibleHeight()
public int get_layoutPriority()
private Transform UnityEngine.UI.ICanvasElement.get_transform()
}
public UnityEngine.UI.IVertexModifier {
public void ModifyVertices(List`1<UIVertex> verts)
}
public UnityEngine.UI.LayoutElement : UIBehaviour {
private bool m_IgnoreLayout
private float m_MinWidth
private float m_MinHeight
private float m_PreferredWidth
private float m_PreferredHeight
private float m_FlexibleWidth
private float m_FlexibleHeight
private int m_LayoutPriority
public bool ignoreLayout
public float minWidth
public float minHeight
public float preferredWidth
public float preferredHeight
public float flexibleWidth
public float flexibleHeight
public int layoutPriority
public bool get_ignoreLayout()
public void set_ignoreLayout(bool value)
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public float get_minWidth()
public void set_minWidth(float value)
public float get_minHeight()
public void set_minHeight(float value)
public float get_preferredWidth()
public void set_preferredWidth(float value)
public float get_preferredHeight()
public void set_preferredHeight(float value)
public float get_flexibleWidth()
public void set_flexibleWidth(float value)
public float get_flexibleHeight()
public void set_flexibleHeight(float value)
public int get_layoutPriority()
public void set_layoutPriority(int value)
protected void OnEnable()
protected void OnTransformParentChanged()
protected void OnDisable()
protected void OnDidApplyAnimationProperties()
protected void OnBeforeTransformParentChanged()
protected void SetDirty()
}
public UnityEngine.UI.LayoutGroup : UIBehaviour {
protected RectOffset m_Padding
protected TextAnchor m_ChildAlignment
private RectTransform m_Rect
protected DrivenRectTransformTracker m_Tracker
private Vector2 m_TotalMinSize
private Vector2 m_TotalPreferredSize
private Vector2 m_TotalFlexibleSize
private List`1<RectTransform> m_RectChildren
public RectOffset padding
public TextAnchor childAlignment
protected RectTransform rectTransform
protected List`1<RectTransform> rectChildren
public float minWidth
public float preferredWidth
public float flexibleWidth
public float minHeight
public float preferredHeight
public float flexibleHeight
public int layoutPriority
private bool isRootLayoutGroup
public RectOffset get_padding()
public void set_padding(RectOffset value)
public TextAnchor get_childAlignment()
public void set_childAlignment(TextAnchor value)
protected RectTransform get_rectTransform()
protected List`1<RectTransform> get_rectChildren()
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public float get_minWidth()
public float get_preferredWidth()
public float get_flexibleWidth()
public float get_minHeight()
public float get_preferredHeight()
public float get_flexibleHeight()
public int get_layoutPriority()
public void SetLayoutHorizontal()
public void SetLayoutVertical()
protected void OnEnable()
protected void OnDisable()
protected void OnDidApplyAnimationProperties()
protected float GetTotalMinSize(int axis)
protected float GetTotalPreferredSize(int axis)
protected float GetTotalFlexibleSize(int axis)
protected float GetStartOffset(int axis, float requiredSpaceWithoutPadding)
protected float GetAlignmentOnAxis(int axis)
protected void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis)
protected void SetChildAlongAxis(RectTransform rect, int axis, float pos)
protected void SetChildAlongAxisWithScale(RectTransform rect, int axis, float pos, float scaleFactor)
protected void SetChildAlongAxis(RectTransform rect, int axis, float pos, float size)
protected void SetChildAlongAxisWithScale(RectTransform rect, int axis, float pos, float size, float scaleFactor)
private bool get_isRootLayoutGroup()
protected void OnRectTransformDimensionsChange()
protected void OnTransformChildrenChanged()
protected void SetProperty(T& currentValue, T newValue)
protected void SetDirty()
private IEnumerator DelayedSetDirty(RectTransform rectTransform)
}
public UnityEngine.UI.LayoutRebuilder : object {
private RectTransform m_ToRebuild
private int m_CachedHashFromTransform
private ObjectPool`1<LayoutRebuilder> s_Rebuilders
public Transform transform
private void Initialize(RectTransform controller)
private void Clear()
private void ReapplyDrivenProperties(RectTransform driven)
public Transform get_transform()
public bool IsDestroyed()
private void StripDisabledBehavioursFromList(List`1<Component> components)
public void ForceRebuildLayoutImmediate(RectTransform layoutRoot)
public void Rebuild(CanvasUpdate executing)
private void PerformLayoutControl(RectTransform rect, UnityAction`1<Component> action)
private void PerformLayoutCalculation(RectTransform rect, UnityAction`1<Component> action)
public void MarkLayoutForRebuild(RectTransform rect)
private bool ValidController(RectTransform layoutRoot, List`1<Component> comps)
private void MarkLayoutRootForRebuild(RectTransform controller)
public void LayoutComplete()
public void GraphicUpdateComplete()
public int GetHashCode()
public bool Equals(object obj)
public string ToString()
}
public UnityEngine.UI.LayoutUtility : object {
public float GetMinSize(RectTransform rect, int axis)
public float GetPreferredSize(RectTransform rect, int axis)
public float GetFlexibleSize(RectTransform rect, int axis)
public float GetMinWidth(RectTransform rect)
public float GetPreferredWidth(RectTransform rect)
public float GetFlexibleWidth(RectTransform rect)
public float GetMinHeight(RectTransform rect)
public float GetPreferredHeight(RectTransform rect)
public float GetFlexibleHeight(RectTransform rect)
public float GetLayoutProperty(RectTransform rect, Func`2<ILayoutElement, float> property, float defaultValue)
public float GetLayoutProperty(RectTransform rect, Func`2<ILayoutElement, float> property, float defaultValue, ILayoutElement& source)
}
internal UnityEngine.UI.ListPool`1 : object {
private ObjectPool`1<List`1<T>> s_ListPool
private void Clear(List`1<T> l)
public List`1<T> Get()
public void Release(List`1<T> toRelease)
}
public UnityEngine.UI.Mask : UIBehaviour {
private RectTransform m_RectTransform
private bool m_ShowMaskGraphic
private Graphic m_Graphic
private Material m_MaskMaterial
private Material m_UnmaskMaterial
public RectTransform rectTransform
public bool showMaskGraphic
public Graphic graphic
public RectTransform get_rectTransform()
public bool get_showMaskGraphic()
public void set_showMaskGraphic(bool value)
public Graphic get_graphic()
public bool MaskEnabled()
public void OnSiblingGraphicEnabledDisabled()
protected void OnEnable()
protected void OnDisable()
public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
public Material GetModifiedMaterial(Material baseMaterial)
}
public UnityEngine.UI.MaskableGraphic : Graphic {
protected bool m_ShouldRecalculateStencil
protected Material m_MaskMaterial
private RectMask2D m_ParentMask
private bool m_Maskable
protected bool m_IncludeForMasking
private CullStateChangedEvent m_OnCullStateChanged
protected bool m_ShouldRecalculate
protected int m_StencilValue
private Vector3[] m_Corners
public CullStateChangedEvent onCullStateChanged
public bool maskable
private Rect rootCanvasRect
public CullStateChangedEvent get_onCullStateChanged()
public void set_onCullStateChanged(CullStateChangedEvent value)
public bool get_maskable()
public void set_maskable(bool value)
public Material GetModifiedMaterial(Material baseMaterial)
public void Cull(Rect clipRect, bool validRect)
private void UpdateCull(bool cull)
public void SetClipRect(Rect clipRect, bool validRect)
protected void OnEnable()
protected void OnDisable()
protected void OnTransformParentChanged()
public void ParentMaskStateChanged()
protected void OnCanvasHierarchyChanged()
private Rect get_rootCanvasRect()
private void UpdateClipParent()
public void RecalculateClipping()
public void RecalculateMasking()
private GameObject UnityEngine.UI.IClippable.get_gameObject()
}
public UnityEngine.UI.MaskUtilities : object {
public void Notify2DMaskStateChanged(Component mask)
public void NotifyStencilStateChanged(Component mask)
public Transform FindRootSortOverrideCanvas(Transform start)
public int GetStencilDepth(Transform transform, Transform stopAfter)
public bool IsDescendantOrSelf(Transform father, Transform child)
public RectMask2D GetRectMaskForClippable(IClippable clippable)
public void GetRectMasksForClip(RectMask2D clipper, List`1<RectMask2D> masks)
}
internal UnityEngine.UI.Misc : object {
public void Destroy(Object obj)
public void DestroyImmediate(Object obj)
}
public UnityEngine.UI.Navigation : ValueType {
private Mode m_Mode
private Selectable m_SelectOnUp
private Selectable m_SelectOnDown
private Selectable m_SelectOnLeft
private Selectable m_SelectOnRight
public Mode mode
public Selectable selectOnUp
public Selectable selectOnDown
public Selectable selectOnLeft
public Selectable selectOnRight
public Navigation defaultNavigation
public Mode get_mode()
public void set_mode(Mode value)
public Selectable get_selectOnUp()
public void set_selectOnUp(Selectable value)
public Selectable get_selectOnDown()
public void set_selectOnDown(Selectable value)
public Selectable get_selectOnLeft()
public void set_selectOnLeft(Selectable value)
public Selectable get_selectOnRight()
public void set_selectOnRight(Selectable value)
public Navigation get_defaultNavigation()
public bool Equals(Navigation other)
}
internal UnityEngine.UI.ObjectPool`1 : object {
private Stack`1<T> m_Stack
private UnityAction`1<T> m_ActionOnGet
private UnityAction`1<T> m_ActionOnRelease
private int <countAll>k__BackingField
public int countAll
public int countActive
public int countInactive
public int get_countAll()
private void set_countAll(int value)
public int get_countActive()
public int get_countInactive()
public void .ctor(UnityAction`1<T> actionOnGet, UnityAction`1<T> actionOnRelease)
public T Get()
public void Release(T element)
}
public UnityEngine.UI.Outline : Shadow {
public void ModifyMesh(VertexHelper vh)
}
public UnityEngine.UI.PositionAsUV1 : BaseMeshEffect {
public void ModifyMesh(VertexHelper vh)
}
public UnityEngine.UI.RawImage : MaskableGraphic {
private Texture m_Texture
private Rect m_UVRect
public Texture mainTexture
public Texture texture
public Rect uvRect
public Texture get_mainTexture()
public Texture get_texture()
public void set_texture(Texture value)
public Rect get_uvRect()
public void set_uvRect(Rect value)
public void SetNativeSize()
protected void OnPopulateMesh(VertexHelper vh)
protected void OnDidApplyAnimationProperties()
}
internal UnityEngine.UI.RectangularVertexClipper : object {
private Vector3[] m_WorldCorners
private Vector3[] m_CanvasCorners
public Rect GetCanvasRect(RectTransform t, Canvas c)
}
public UnityEngine.UI.RectMask2D : UIBehaviour {
private RectangularVertexClipper m_VertexClipper
private RectTransform m_RectTransform
private HashSet`1<MaskableGraphic> m_MaskableTargets
private HashSet`1<IClippable> m_ClipTargets
private bool m_ShouldRecalculateClipRects
private List`1<RectMask2D> m_Clippers
private Rect m_LastClipRectCanvasSpace
private bool m_ForceClip
private Canvas m_Canvas
private Vector3[] m_Corners
private Canvas Canvas
public Rect canvasRect
public RectTransform rectTransform
private Rect rootCanvasRect
private Canvas get_Canvas()
public Rect get_canvasRect()
public RectTransform get_rectTransform()
protected void OnEnable()
protected void OnDisable()
public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
private Rect get_rootCanvasRect()
public void PerformClipping()
public void AddClippable(IClippable clippable)
public void RemoveClippable(IClippable clippable)
protected void OnTransformParentChanged()
protected void OnCanvasHierarchyChanged()
}
internal UnityEngine.UI.ReflectionMethodsCache : object {
public Raycast3DCallback raycast3D
public RaycastAllCallback raycast3DAll
public Raycast2DCallback raycast2D
public GetRayIntersectionAllCallback getRayIntersectionAll
public GetRayIntersectionAllNonAllocCallback getRayIntersectionAllNonAlloc
public GetRaycastNonAllocCallback getRaycastNonAlloc
private ReflectionMethodsCache s_ReflectionMethodsCache
public ReflectionMethodsCache Singleton
public ReflectionMethodsCache get_Singleton()
}
public UnityEngine.UI.Scrollbar : Selectable {
private RectTransform m_HandleRect
private Direction m_Direction
private float m_Value
private float m_Size
private int m_NumberOfSteps
private ScrollEvent m_OnValueChanged
private RectTransform m_ContainerRect
private Vector2 m_Offset
private DrivenRectTransformTracker m_Tracker
private Coroutine m_PointerDownRepeat
private bool isPointerDownAndNotDragging
private bool m_DelayedUpdateVisuals
public RectTransform handleRect
public Direction direction
public float value
public float size
public int numberOfSteps
public ScrollEvent onValueChanged
private float stepSize
private Axis axis
private bool reverseValue
public RectTransform get_handleRect()
public void set_handleRect(RectTransform value)
public Direction get_direction()
public void set_direction(Direction value)
public float get_value()
public void set_value(float value)
public void SetValueWithoutNotify(float input)
public float get_size()
public void set_size(float value)
public int get_numberOfSteps()
public void set_numberOfSteps(int value)
public ScrollEvent get_onValueChanged()
public void set_onValueChanged(ScrollEvent value)
private float get_stepSize()
public void Rebuild(CanvasUpdate executing)
public void LayoutComplete()
public void GraphicUpdateComplete()
protected void OnEnable()
protected void OnDisable()
protected void Update()
private void UpdateCachedReferences()
private void Set(float input, bool sendCallback)
protected void OnRectTransformDimensionsChange()
private Axis get_axis()
private bool get_reverseValue()
private void UpdateVisuals()
private void UpdateDrag(PointerEventData eventData)
private void DoUpdateDrag(Vector2 handleCorner, float remainingSize)
private bool MayDrag(PointerEventData eventData)
public void OnBeginDrag(PointerEventData eventData)
public void OnDrag(PointerEventData eventData)
public void OnPointerDown(PointerEventData eventData)
protected IEnumerator ClickRepeat(PointerEventData eventData)
public void OnPointerUp(PointerEventData eventData)
public void OnMove(AxisEventData eventData)
public Selectable FindSelectableOnLeft()
public Selectable FindSelectableOnRight()
public Selectable FindSelectableOnUp()
public Selectable FindSelectableOnDown()
public void OnInitializePotentialDrag(PointerEventData eventData)
public void SetDirection(Direction direction, bool includeRectLayouts)
private Transform UnityEngine.UI.ICanvasElement.get_transform()
}
public UnityEngine.UI.ScrollRect : UIBehaviour {
private RectTransform m_Content
private bool m_Horizontal
private bool m_Vertical
private MovementType m_MovementType
private float m_Elasticity
private bool m_Inertia
private float m_DecelerationRate
private float m_ScrollSensitivity
private RectTransform m_Viewport
private Scrollbar m_HorizontalScrollbar
private Scrollbar m_VerticalScrollbar
private ScrollbarVisibility m_HorizontalScrollbarVisibility
private ScrollbarVisibility m_VerticalScrollbarVisibility
private float m_HorizontalScrollbarSpacing
private float m_VerticalScrollbarSpacing
private ScrollRectEvent m_OnValueChanged
private Vector2 m_PointerStartLocalCursor
protected Vector2 m_ContentStartPosition
private RectTransform m_ViewRect
protected Bounds m_ContentBounds
private Bounds m_ViewBounds
private Vector2 m_Velocity
private bool m_Dragging
private bool m_Scrolling
private Vector2 m_PrevPosition
private Bounds m_PrevContentBounds
private Bounds m_PrevViewBounds
private bool m_HasRebuiltLayout
private bool m_HSliderExpand
private bool m_VSliderExpand
private float m_HSliderHeight
private float m_VSliderWidth
private RectTransform m_Rect
private RectTransform m_HorizontalScrollbarRect
private RectTransform m_VerticalScrollbarRect
private DrivenRectTransformTracker m_Tracker
private Vector3[] m_Corners
public RectTransform content
public bool horizontal
public bool vertical
public MovementType movementType
public float elasticity
public bool inertia
public float decelerationRate
public float scrollSensitivity
public RectTransform viewport
public Scrollbar horizontalScrollbar
public Scrollbar verticalScrollbar
public ScrollbarVisibility horizontalScrollbarVisibility
public ScrollbarVisibility verticalScrollbarVisibility
public float horizontalScrollbarSpacing
public float verticalScrollbarSpacing
public ScrollRectEvent onValueChanged
protected RectTransform viewRect
public Vector2 velocity
private RectTransform rectTransform
public Vector2 normalizedPosition
public float horizontalNormalizedPosition
public float verticalNormalizedPosition
private bool hScrollingNeeded
private bool vScrollingNeeded
public float minWidth
public float preferredWidth
public float flexibleWidth
public float minHeight
public float preferredHeight
public float flexibleHeight
public int layoutPriority
public RectTransform get_content()
public void set_content(RectTransform value)
public bool get_horizontal()
public void set_horizontal(bool value)
public bool get_vertical()
public void set_vertical(bool value)
public MovementType get_movementType()
public void set_movementType(MovementType value)
public float get_elasticity()
public void set_elasticity(float value)
public bool get_inertia()
public void set_inertia(bool value)
public float get_decelerationRate()
public void set_decelerationRate(float value)
public float get_scrollSensitivity()
public void set_scrollSensitivity(float value)
public RectTransform get_viewport()
public void set_viewport(RectTransform value)
public Scrollbar get_horizontalScrollbar()
public void set_horizontalScrollbar(Scrollbar value)
public Scrollbar get_verticalScrollbar()
public void set_verticalScrollbar(Scrollbar value)
public ScrollbarVisibility get_horizontalScrollbarVisibility()
public void set_horizontalScrollbarVisibility(ScrollbarVisibility value)
public ScrollbarVisibility get_verticalScrollbarVisibility()
public void set_verticalScrollbarVisibility(ScrollbarVisibility value)
public float get_horizontalScrollbarSpacing()
public void set_horizontalScrollbarSpacing(float value)
public float get_verticalScrollbarSpacing()
public void set_verticalScrollbarSpacing(float value)
public ScrollRectEvent get_onValueChanged()
public void set_onValueChanged(ScrollRectEvent value)
protected RectTransform get_viewRect()
public Vector2 get_velocity()
public void set_velocity(Vector2 value)
private RectTransform get_rectTransform()
public void Rebuild(CanvasUpdate executing)
public void LayoutComplete()
public void GraphicUpdateComplete()
private void UpdateCachedData()
protected void OnEnable()
protected void OnDisable()
public bool IsActive()
private void EnsureLayoutHasRebuilt()
public void StopMovement()
public void OnScroll(PointerEventData data)
public void OnInitializePotentialDrag(PointerEventData eventData)
public void OnBeginDrag(PointerEventData eventData)
public void OnEndDrag(PointerEventData eventData)
public void OnDrag(PointerEventData eventData)
protected void SetContentAnchoredPosition(Vector2 position)
protected void LateUpdate()
protected void UpdatePrevData()
private void UpdateScrollbars(Vector2 offset)
public Vector2 get_normalizedPosition()
public void set_normalizedPosition(Vector2 value)
public float get_horizontalNormalizedPosition()
public void set_horizontalNormalizedPosition(float value)
public float get_verticalNormalizedPosition()
public void set_verticalNormalizedPosition(float value)
private void SetHorizontalNormalizedPosition(float value)
private void SetVerticalNormalizedPosition(float value)
protected void SetNormalizedPosition(float value, int axis)
private float RubberDelta(float overStretching, float viewSize)
protected void OnRectTransformDimensionsChange()
private bool get_hScrollingNeeded()
private bool get_vScrollingNeeded()
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public float get_minWidth()
public float get_preferredWidth()
public float get_flexibleWidth()
public float get_minHeight()
public float get_preferredHeight()
public float get_flexibleHeight()
public int get_layoutPriority()
public void SetLayoutHorizontal()
public void SetLayoutVertical()
private void UpdateScrollbarVisibility()
private void UpdateOneScrollbarVisibility(bool xScrollingNeeded, bool xAxisEnabled, ScrollbarVisibility scrollbarVisibility, Scrollbar scrollbar)
private void UpdateScrollbarLayout()
protected void UpdateBounds()
internal void AdjustBounds(Bounds& viewBounds, Vector2& contentPivot, Vector3& contentSize, Vector3& contentPos)
private Bounds GetBounds()
internal Bounds InternalGetBounds(Vector3[] corners, Matrix4x4& viewWorldToLocalMatrix)
private Vector2 CalculateOffset(Vector2 delta)
internal Vector2 InternalCalculateOffset(Bounds& viewBounds, Bounds& contentBounds, bool horizontal, bool vertical, MovementType movementType, Vector2& delta)
protected void SetDirty()
protected void SetDirtyCaching()
private Transform UnityEngine.UI.ICanvasElement.get_transform()
}
public UnityEngine.UI.Selectable : UIBehaviour {
private Selectable[] s_Selectables
private int s_SelectableCount
private bool s_IsDirty
private Navigation m_Navigation
private Transition m_Transition
private ColorBlock m_Colors
private SpriteState m_SpriteState
private AnimationTriggers m_AnimationTriggers
private bool m_Interactable
private Graphic m_TargetGraphic
private bool m_GroupsAllowInteraction
private bool m_WillRemove
private bool <isPointerInside>k__BackingField
private bool <isPointerDown>k__BackingField
private bool <hasSelection>k__BackingField
private List`1<CanvasGroup> m_CanvasGroupCache
public Selectable[] allSelectablesArray
public int allSelectableCount
public List`1<Selectable> allSelectables
public Navigation navigation
public Transition transition
public ColorBlock colors
public SpriteState spriteState
public AnimationTriggers animationTriggers
public Graphic targetGraphic
public bool interactable
private bool isPointerInside
private bool isPointerDown
private bool hasSelection
public Image image
public Animator animator
protected SelectionState currentSelectionState
public Selectable[] get_allSelectablesArray()
public int get_allSelectableCount()
public List`1<Selectable> get_allSelectables()
public int AllSelectablesNoAlloc(Selectable[] selectables)
public Navigation get_navigation()
public void set_navigation(Navigation value)
public Transition get_transition()
public void set_transition(Transition value)
public ColorBlock get_colors()
public void set_colors(ColorBlock value)
public SpriteState get_spriteState()
public void set_spriteState(SpriteState value)
public AnimationTriggers get_animationTriggers()
public void set_animationTriggers(AnimationTriggers value)
public Graphic get_targetGraphic()
public void set_targetGraphic(Graphic value)
public bool get_interactable()
public void set_interactable(bool value)
private bool get_isPointerInside()
private void set_isPointerInside(bool value)
private bool get_isPointerDown()
private void set_isPointerDown(bool value)
private bool get_hasSelection()
private void set_hasSelection(bool value)
public Image get_image()
public void set_image(Image value)
public Animator get_animator()
protected void Awake()
protected void OnCanvasGroupChanged()
public bool IsInteractable()
protected void OnDidApplyAnimationProperties()
protected void OnEnable()
protected void OnTransformParentChanged()
private void OnSetProperty()
protected void OnDisable()
private void RemoveInvalidSelectables()
protected SelectionState get_currentSelectionState()
protected void InstantClearState()
protected void DoStateTransition(SelectionState state, bool instant)
public Selectable FindSelectable(Vector3 dir)
private Vector3 GetPointOnRectEdge(RectTransform rect, Vector2 dir)
private void Navigate(AxisEventData eventData, Selectable sel)
public Selectable FindSelectableOnLeft()
public Selectable FindSelectableOnRight()
public Selectable FindSelectableOnUp()
public Selectable FindSelectableOnDown()
public void OnMove(AxisEventData eventData)
private void StartColorTween(Color targetColor, bool instant)
private void DoSpriteSwap(Sprite newSprite)
private void TriggerAnimation(string triggername)
protected bool IsHighlighted()
protected bool IsPressed()
private void EvaluateAndTransitionToSelectionState()
public void OnPointerDown(PointerEventData eventData)
public void OnPointerUp(PointerEventData eventData)
public void OnPointerEnter(PointerEventData eventData)
public void OnPointerExit(PointerEventData eventData)
public void OnSelect(BaseEventData eventData)
public void OnDeselect(BaseEventData eventData)
public void Select()
}
internal UnityEngine.UI.SetPropertyUtility : object {
public bool SetColor(Color& currentValue, Color newValue)
public bool SetStruct(T& currentValue, T newValue)
public bool SetClass(T& currentValue, T newValue)
}
public UnityEngine.UI.Shadow : BaseMeshEffect {
private Color m_EffectColor
private Vector2 m_EffectDistance
private bool m_UseGraphicAlpha
private float kMaxEffectDistance
public Color effectColor
public Vector2 effectDistance
public bool useGraphicAlpha
public Color get_effectColor()
public void set_effectColor(Color value)
public Vector2 get_effectDistance()
public void set_effectDistance(Vector2 value)
public bool get_useGraphicAlpha()
public void set_useGraphicAlpha(bool value)
protected void ApplyShadowZeroAlloc(List`1<UIVertex> verts, Color32 color, int start, int end, float x, float y)
protected void ApplyShadow(List`1<UIVertex> verts, Color32 color, int start, int end, float x, float y)
public void ModifyMesh(VertexHelper vh)
}
public UnityEngine.UI.Slider : Selectable {
private RectTransform m_FillRect
private RectTransform m_HandleRect
private Direction m_Direction
private float m_MinValue
private float m_MaxValue
private bool m_WholeNumbers
protected float m_Value
private SliderEvent m_OnValueChanged
private Image m_FillImage
private Transform m_FillTransform
private RectTransform m_FillContainerRect
private Transform m_HandleTransform
private RectTransform m_HandleContainerRect
private Vector2 m_Offset
private DrivenRectTransformTracker m_Tracker
private bool m_DelayedUpdateVisuals
public RectTransform fillRect
public RectTransform handleRect
public Direction direction
public float minValue
public float maxValue
public bool wholeNumbers
public float value
public float normalizedValue
public SliderEvent onValueChanged
private float stepSize
private Axis axis
private bool reverseValue
public RectTransform get_fillRect()
public void set_fillRect(RectTransform value)
public RectTransform get_handleRect()
public void set_handleRect(RectTransform value)
public Direction get_direction()
public void set_direction(Direction value)
public float get_minValue()
public void set_minValue(float value)
public float get_maxValue()
public void set_maxValue(float value)
public bool get_wholeNumbers()
public void set_wholeNumbers(bool value)
public float get_value()
public void set_value(float value)
public void SetValueWithoutNotify(float input)
public float get_normalizedValue()
public void set_normalizedValue(float value)
public SliderEvent get_onValueChanged()
public void set_onValueChanged(SliderEvent value)
private float get_stepSize()
public void Rebuild(CanvasUpdate executing)
public void LayoutComplete()
public void GraphicUpdateComplete()
protected void OnEnable()
protected void OnDisable()
protected void Update()
protected void OnDidApplyAnimationProperties()
private void UpdateCachedReferences()
private float ClampValue(float input)
protected void Set(float input, bool sendCallback)
protected void OnRectTransformDimensionsChange()
private Axis get_axis()
private bool get_reverseValue()
private void UpdateVisuals()
private void UpdateDrag(PointerEventData eventData, Camera cam)
private bool MayDrag(PointerEventData eventData)
public void OnPointerDown(PointerEventData eventData)
public void OnDrag(PointerEventData eventData)
public void OnMove(AxisEventData eventData)
public Selectable FindSelectableOnLeft()
public Selectable FindSelectableOnRight()
public Selectable FindSelectableOnUp()
public Selectable FindSelectableOnDown()
public void OnInitializePotentialDrag(PointerEventData eventData)
public void SetDirection(Direction direction, bool includeRectLayouts)
private Transform UnityEngine.UI.ICanvasElement.get_transform()
}
public UnityEngine.UI.SpriteState : ValueType {
private Sprite m_HighlightedSprite
private Sprite m_PressedSprite
private Sprite m_SelectedSprite
private Sprite m_DisabledSprite
public Sprite highlightedSprite
public Sprite pressedSprite
public Sprite selectedSprite
public Sprite disabledSprite
public Sprite get_highlightedSprite()
public void set_highlightedSprite(Sprite value)
public Sprite get_pressedSprite()
public void set_pressedSprite(Sprite value)
public Sprite get_selectedSprite()
public void set_selectedSprite(Sprite value)
public Sprite get_disabledSprite()
public void set_disabledSprite(Sprite value)
public bool Equals(SpriteState other)
}
public UnityEngine.UI.StencilMaterial : object {
private List`1<MatEntry> m_List
public Material Add(Material baseMat, int stencilID)
public Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask)
public Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask)
public void Remove(Material customMat)
public void ClearAll()
}
public UnityEngine.UI.Text : MaskableGraphic {
private FontData m_FontData
protected string m_Text
private TextGenerator m_TextCache
private TextGenerator m_TextCacheForLayout
protected Material s_DefaultText
protected bool m_DisableFontTextureRebuiltCallback
private UIVertex[] m_TempVerts
public TextGenerator cachedTextGenerator
public TextGenerator cachedTextGeneratorForLayout
public Texture mainTexture
public Font font
public string text
public bool supportRichText
public bool resizeTextForBestFit
public int resizeTextMinSize
public int resizeTextMaxSize
public TextAnchor alignment
public bool alignByGeometry
public int fontSize
public HorizontalWrapMode horizontalOverflow
public VerticalWrapMode verticalOverflow
public float lineSpacing
public FontStyle fontStyle
public float pixelsPerUnit
public float minWidth
public float preferredWidth
public float flexibleWidth
public float minHeight
public float preferredHeight
public float flexibleHeight
public int layoutPriority
public TextGenerator get_cachedTextGenerator()
public TextGenerator get_cachedTextGeneratorForLayout()
public Texture get_mainTexture()
public void FontTextureChanged()
public Font get_font()
public void set_font(Font value)
public string get_text()
public void set_text(string value)
public bool get_supportRichText()
public void set_supportRichText(bool value)
public bool get_resizeTextForBestFit()
public void set_resizeTextForBestFit(bool value)
public int get_resizeTextMinSize()
public void set_resizeTextMinSize(int value)
public int get_resizeTextMaxSize()
public void set_resizeTextMaxSize(int value)
public TextAnchor get_alignment()
public void set_alignment(TextAnchor value)
public bool get_alignByGeometry()
public void set_alignByGeometry(bool value)
public int get_fontSize()
public void set_fontSize(int value)
public HorizontalWrapMode get_horizontalOverflow()
public void set_horizontalOverflow(HorizontalWrapMode value)
public VerticalWrapMode get_verticalOverflow()
public void set_verticalOverflow(VerticalWrapMode value)
public float get_lineSpacing()
public void set_lineSpacing(float value)
public FontStyle get_fontStyle()
public void set_fontStyle(FontStyle value)
public float get_pixelsPerUnit()
protected void OnEnable()
protected void OnDisable()
protected void UpdateGeometry()
internal void AssignDefaultFont()
public TextGenerationSettings GetGenerationSettings(Vector2 extents)
public Vector2 GetTextAnchorPivot(TextAnchor anchor)
protected void OnPopulateMesh(VertexHelper toFill)
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public float get_minWidth()
public float get_preferredWidth()
public float get_flexibleWidth()
public float get_minHeight()
public float get_preferredHeight()
public float get_flexibleHeight()
public int get_layoutPriority()
}
public UnityEngine.UI.Toggle : Selectable {
public ToggleTransition toggleTransition
public Graphic graphic
private ToggleGroup m_Group
public ToggleEvent onValueChanged
private bool m_IsOn
public ToggleGroup group
public bool isOn
public ToggleGroup get_group()
public void set_group(ToggleGroup value)
public void Rebuild(CanvasUpdate executing)
public void LayoutComplete()
public void GraphicUpdateComplete()
protected void OnDestroy()
protected void OnEnable()
protected void OnDisable()
protected void OnDidApplyAnimationProperties()
private void SetToggleGroup(ToggleGroup newGroup, bool setMemberValue)
public bool get_isOn()
public void set_isOn(bool value)
public void SetIsOnWithoutNotify(bool value)
private void Set(bool value, bool sendCallback)
private void PlayEffect(bool instant)
protected void Start()
private void InternalToggle()
public void OnPointerClick(PointerEventData eventData)
public void OnSubmit(BaseEventData eventData)
private Transform UnityEngine.UI.ICanvasElement.get_transform()
}
public UnityEngine.UI.ToggleGroup : UIBehaviour {
private bool m_AllowSwitchOff
private List`1<Toggle> m_Toggles
public bool allowSwitchOff
public bool get_allowSwitchOff()
public void set_allowSwitchOff(bool value)
protected void Start()
private void ValidateToggleIsInGroup(Toggle toggle)
public void NotifyToggleOn(Toggle toggle, bool sendCallback)
public void UnregisterToggle(Toggle toggle)
public void RegisterToggle(Toggle toggle)
public void EnsureValidState()
public bool AnyTogglesOn()
public IEnumerable`1<Toggle> ActiveToggles()
public void SetAllTogglesOff(bool sendCallback)
}
public UnityEngine.UI.VertexHelper : object {
private List`1<Vector3> m_Positions
private List`1<Color32> m_Colors
private List`1<Vector2> m_Uv0S
private List`1<Vector2> m_Uv1S
private List`1<Vector2> m_Uv2S
private List`1<Vector2> m_Uv3S
private List`1<Vector3> m_Normals
private List`1<Vector4> m_Tangents
private List`1<int> m_Indices
private Vector4 s_DefaultTangent
private Vector3 s_DefaultNormal
private bool m_ListsInitalized
public int currentVertCount
public int currentIndexCount
public void .ctor(Mesh m)
private void InitializeListIfRequired()
public void Dispose()
public void Clear()
public int get_currentVertCount()
public int get_currentIndexCount()
public void PopulateUIVertex(UIVertex& vertex, int i)
public void SetUIVertex(UIVertex vertex, int i)
public void FillMesh(Mesh mesh)
public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector3 normal, Vector4 tangent)
public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector3 normal, Vector4 tangent)
public void AddVert(Vector3 position, Color32 color, Vector2 uv0)
public void AddVert(UIVertex v)
public void AddTriangle(int idx0, int idx1, int idx2)
public void AddUIVertexQuad(UIVertex[] verts)
public void AddUIVertexStream(List`1<UIVertex> verts, List`1<int> indices)
public void AddUIVertexTriangleStream(List`1<UIVertex> verts)
public void GetUIVertexStream(List`1<UIVertex> stream)
}
public UnityEngine.UI.VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup {
public void CalculateLayoutInputHorizontal()
public void CalculateLayoutInputVertical()
public void SetLayoutHorizontal()
public void SetLayoutVertical()
}
