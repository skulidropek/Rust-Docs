internal static class Consts : object {
    
public static string MonoCorlibVersion;
    
public static string MonoVersion;
    
public static string MonoCompany;
    
public static string MonoProduct;
    
public static string MonoCopyright;
    
public static string FxVersion;
    
public static string FxFileVersion;
    
public static string EnvironmentVersion;
    
public static string VsVersion;
    
public static string VsFileVersion;
    
private static string PublicKeyToken;
    
public static string AssemblyI18N;
    
public static string AssemblyMicrosoft_JScript;
    
public static string AssemblyMicrosoft_VisualStudio;
    
public static string AssemblyMicrosoft_VisualStudio_Web;
    
public static string AssemblyMicrosoft_VSDesigner;
    
public static string AssemblyMono_Http;
    
public static string AssemblyMono_Posix;
    
public static string AssemblyMono_Security;
    
public static string AssemblyMono_Messaging_RabbitMQ;
    
public static string AssemblyCorlib;
    
public static string AssemblySystem;
    
public static string AssemblySystem_Data;
    
public static string AssemblySystem_Design;
    
public static string AssemblySystem_DirectoryServices;
    
public static string AssemblySystem_Drawing;
    
public static string AssemblySystem_Drawing_Design;
    
public static string AssemblySystem_Messaging;
    
public static string AssemblySystem_Security;
    
public static string AssemblySystem_ServiceProcess;
    
public static string AssemblySystem_Web;
    
public static string AssemblySystem_Windows_Forms;
    
public static string AssemblySystem_2_0;
    
public static string AssemblySystemCore_3_5;
    
public static string AssemblySystem_Core;
    
public static string WindowsBase_3_0;
    
public static string AssemblyWindowsBase;
    
public static string AssemblyPresentationCore_3_5;
    
public static string AssemblyPresentationCore_4_0;
    
public static string AssemblyPresentationFramework_3_5;
    
public static string AssemblySystemServiceModel_3_0;
}
internal class SR : object {
    
public static string IO_DirectoryNameWithData;
    
public static string IO_ExtractingResultsInOutside;
}
public static class System.IO.Compression.ZipFile : object {
    
private static char PathSeparator;
    public static ZipArchive OpenRead(string archiveFileName);
    public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode);
    public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode, Encoding entryNameEncoding);
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName);
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory);
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory, Encoding entryNameEncoding);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool overwrite);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, Encoding entryNameEncoding);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, Encoding entryNameEncoding, bool overwrite);
    private static void DoCreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, Nullable`1<CompressionLevel> compressionLevel, bool includeBaseDirectory, Encoding entryNameEncoding);
    private static string EntryFromPath(string entry, int offset, int length, Char[]& buffer, bool appendPathSeparator);
    private static void EnsureCapacity(Char[]& buffer, int min);
    private static bool IsDirEmpty(DirectoryInfo possiblyEmptyDir);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static class System.IO.Compression.ZipFileExtensions : object {
    [ExtensionAttribute]
public static ZipArchiveEntry CreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName);
    [ExtensionAttribute]
public static ZipArchiveEntry CreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName, CompressionLevel compressionLevel);
    [ExtensionAttribute]
public static void ExtractToDirectory(ZipArchive source, string destinationDirectoryName);
    [ExtensionAttribute]
public static void ExtractToDirectory(ZipArchive source, string destinationDirectoryName, bool overwrite);
    internal static ZipArchiveEntry DoCreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName, Nullable`1<CompressionLevel> compressionLevel);
    [ExtensionAttribute]
public static void ExtractToFile(ZipArchiveEntry source, string destinationFileName);
    [ExtensionAttribute]
public static void ExtractToFile(ZipArchiveEntry source, string destinationFileName, bool overwrite);
}
internal static class System.IO.PathInternal : object {
    
private static bool s_isCaseSensitive;
    
internal static StringComparison StringComparison { get; }
    
internal static bool IsCaseSensitive { get; }
    private static PathInternal();
    internal static StringComparison get_StringComparison();
    internal static bool get_IsCaseSensitive();
    private static bool GetIsCaseSensitive();
}
