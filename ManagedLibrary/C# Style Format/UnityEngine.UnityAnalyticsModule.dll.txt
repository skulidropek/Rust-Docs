public UnityEngine.Analytics.Analytics : object {
public bool initializeOnStartup
private bool initializeOnStartupInternal
private bool enabledInternal
private bool playerOptedOutInternal
private string eventUrlInternal
private string configUrlInternal
private bool limitUserTrackingInternal
private bool deviceStatsEnabledInternal
public bool playerOptedOut
public string eventUrl
public string configUrl
public bool limitUserTracking
public bool deviceStatsEnabled
public bool enabled
public bool get_initializeOnStartup()
public void set_initializeOnStartup(bool value)
public AnalyticsResult ResumeInitialization()
private AnalyticsResult ResumeInitializationInternal()
private bool get_initializeOnStartupInternal()
private void set_initializeOnStartupInternal(bool value)
internal bool IsInitialized()
private bool get_enabledInternal()
private void set_enabledInternal(bool value)
private bool get_playerOptedOutInternal()
private string get_eventUrlInternal()
private string get_configUrlInternal()
private bool get_limitUserTrackingInternal()
private void set_limitUserTrackingInternal(bool value)
private bool get_deviceStatsEnabledInternal()
private void set_deviceStatsEnabledInternal(bool value)
private bool FlushArchivedEvents()
private AnalyticsResult Transaction(string productId, double amount, string currency, string receiptPurchaseData, string signature, bool usingIAPService)
private AnalyticsResult SendCustomEventName(string customEventName)
private AnalyticsResult SendCustomEvent(CustomEventData eventData)
internal AnalyticsResult IsCustomEventWithLimitEnabled(string customEventName)
internal AnalyticsResult EnableCustomEventWithLimit(string customEventName, bool enable)
internal AnalyticsResult IsEventWithLimitEnabled(string eventName, int ver, string prefix)
internal AnalyticsResult EnableEventWithLimit(string eventName, bool enable, int ver, string prefix)
internal AnalyticsResult RegisterEventWithLimit(string eventName, int maxEventPerHour, int maxItems, string vendorKey, int ver, string prefix, string assemblyInfo, bool notifyServer)
internal AnalyticsResult RegisterEventsWithLimit(String[] eventName, int maxEventPerHour, int maxItems, string vendorKey, int ver, string prefix, string assemblyInfo, bool notifyServer)
internal AnalyticsResult SendEventWithLimit(string eventName, object parameters, int ver, string prefix)
internal AnalyticsResult SetEventWithLimitEndPoint(string eventName, string endPoint, int ver, string prefix)
internal AnalyticsResult SetEventWithLimitPriority(string eventName, AnalyticsEventPriority eventPriority, int ver, string prefix)
internal bool QueueEvent(string eventName, object parameters, int ver, string prefix)
public bool get_playerOptedOut()
public string get_eventUrl()
public string get_configUrl()
public bool get_limitUserTracking()
public void set_limitUserTracking(bool value)
public bool get_deviceStatsEnabled()
public void set_deviceStatsEnabled(bool value)
public bool get_enabled()
public void set_enabled(bool value)
public AnalyticsResult FlushEvents()
public AnalyticsResult SetUserId(string userId)
public AnalyticsResult SetUserGender(Gender gender)
public AnalyticsResult SetUserBirthYear(int birthYear)
private AnalyticsResult SendUserInfoEvent(object param)
public AnalyticsResult Transaction(string productId, decimal amount, string currency)
public AnalyticsResult Transaction(string productId, decimal amount, string currency, string receiptPurchaseData, string signature)
public AnalyticsResult Transaction(string productId, decimal amount, string currency, string receiptPurchaseData, string signature, bool usingIAPService)
public AnalyticsResult CustomEvent(string customEventName)
public AnalyticsResult CustomEvent(string customEventName, Vector3 position)
public AnalyticsResult CustomEvent(string customEventName, IDictionary`2<string, object> eventData)
public AnalyticsResult EnableCustomEvent(string customEventName, bool enabled)
public AnalyticsResult IsCustomEventEnabled(string customEventName)
public AnalyticsResult RegisterEvent(string eventName, int maxEventPerHour, int maxItems, string vendorKey, string prefix)
public AnalyticsResult RegisterEvent(string eventName, int maxEventPerHour, int maxItems, string vendorKey, int ver, string prefix)
private AnalyticsResult RegisterEvent(string eventName, int maxEventPerHour, int maxItems, string vendorKey, int ver, string prefix, string assemblyInfo)
public AnalyticsResult SendEvent(string eventName, object parameters, int ver, string prefix)
public AnalyticsResult SetEventEndPoint(string eventName, string endPoint, int ver, string prefix)
public AnalyticsResult SetEventPriority(string eventName, AnalyticsEventPriority eventPriority, int ver, string prefix)
public AnalyticsResult EnableEvent(string eventName, bool enabled, int ver, string prefix)
public AnalyticsResult IsEventEnabled(string eventName, int ver, string prefix)
}
public UnityEngine.Analytics.AnalyticsEventPriority : Enum {
public int value__
public AnalyticsEventPriority FlushQueueFlag
public AnalyticsEventPriority CacheImmediatelyFlag
public AnalyticsEventPriority AllowInStopModeFlag
public AnalyticsEventPriority SendImmediateFlag
public AnalyticsEventPriority NormalPriorityEvent
public AnalyticsEventPriority NormalPriorityEvent_WithCaching
public AnalyticsEventPriority HighPriorityEvent
public AnalyticsEventPriority HighPriorityEvent_InStopMode
public AnalyticsEventPriority HighestPriorityEvent
}
public UnityEngine.Analytics.AnalyticsResult : Enum {
public int value__
public AnalyticsResult Ok
public AnalyticsResult NotInitialized
public AnalyticsResult AnalyticsDisabled
public AnalyticsResult TooManyItems
public AnalyticsResult SizeLimitReached
public AnalyticsResult TooManyRequests
public AnalyticsResult InvalidData
public AnalyticsResult UnsupportedPlatform
}
public UnityEngine.Analytics.AnalyticsSessionInfo : object {
private SessionStateChanged sessionStateChanged
private IdentityTokenChanged identityTokenChanged
public AnalyticsSessionState sessionState
public long sessionId
public long sessionCount
public long sessionElapsedTime
public bool sessionFirstRun
public string userId
public string customUserId
public string customDeviceId
public string identityToken
private string identityTokenInternal
private string customUserIdInternal
private string customDeviceIdInternal
public void add_sessionStateChanged(SessionStateChanged value)
public void remove_sessionStateChanged(SessionStateChanged value)
internal void CallSessionStateChanged(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged)
public AnalyticsSessionState get_sessionState()
public long get_sessionId()
public long get_sessionCount()
public long get_sessionElapsedTime()
public bool get_sessionFirstRun()
public string get_userId()
public string get_customUserId()
public void set_customUserId(string value)
public string get_customDeviceId()
public void set_customDeviceId(string value)
public void add_identityTokenChanged(IdentityTokenChanged value)
public void remove_identityTokenChanged(IdentityTokenChanged value)
internal void CallIdentityTokenChanged(string token)
public string get_identityToken()
private string get_identityTokenInternal()
private string get_customUserIdInternal()
private void set_customUserIdInternal(string value)
private string get_customDeviceIdInternal()
private void set_customDeviceIdInternal(string value)
}
public UnityEngine.Analytics.AnalyticsSessionState : Enum {
public int value__
public AnalyticsSessionState kSessionStopped
public AnalyticsSessionState kSessionStarted
public AnalyticsSessionState kSessionPaused
public AnalyticsSessionState kSessionResumed
}
public UnityEngine.Analytics.ContinuousEvent : object {
public AnalyticsResult RegisterCollector(string metricName, Func`1<T> del)
public AnalyticsResult SetEventHistogramThresholds(string eventName, int count, T[] data, int ver, string prefix)
public AnalyticsResult SetCustomEventHistogramThresholds(string eventName, int count, T[] data)
public AnalyticsResult ConfigureCustomEvent(string customEventName, string metricName, float interval, float period, bool enabled)
public AnalyticsResult ConfigureEvent(string eventName, string metricName, float interval, float period, bool enabled, int ver, string prefix)
private AnalyticsResult InternalRegisterCollector(string type, string metricName, object collector)
private AnalyticsResult InternalSetEventHistogramThresholds(string type, string eventName, int count, object data, int ver, string prefix)
private AnalyticsResult InternalSetCustomEventHistogramThresholds(string type, string eventName, int count, object data)
private AnalyticsResult InternalConfigureCustomEvent(string customEventName, string metricName, float interval, float period, bool enabled)
private AnalyticsResult InternalConfigureEvent(string eventName, string metricName, float interval, float period, bool enabled, int ver, string prefix)
internal bool IsInitialized()
}
internal UnityEngine.Analytics.CustomEventData : object {
internal IntPtr m_Ptr
public void .ctor(string name)
protected void Finalize()
private void Destroy()
public void Dispose()
internal IntPtr Internal_Create(CustomEventData ced, string name)
internal void Internal_Destroy(IntPtr ptr)
public bool AddString(string key, string value)
public bool AddInt32(string key, int value)
public bool AddUInt32(string key, UInt32 value)
public bool AddInt64(string key, long value)
public bool AddUInt64(string key, ulong value)
public bool AddBool(string key, bool value)
public bool AddDouble(string key, double value)
public bool AddDictionary(IDictionary`2<string, object> eventData)
}
public UnityEngine.Analytics.Gender : Enum {
public int value__
public Gender Male
public Gender Female
public Gender Unknown
}
public UnityEngine.RemoteConfigSettings : object {
internal IntPtr m_Ptr
private Action`1<bool> Updated
public void add_Updated(Action`1<bool> value)
public void remove_Updated(Action`1<bool> value)
public void .ctor(string configKey)
protected void Finalize()
private void Destroy()
public void Dispose()
internal IntPtr Internal_Create(RemoteConfigSettings rcs, string configKey)
internal void Internal_Destroy(IntPtr ptr)
internal void RemoteConfigSettingsUpdated(RemoteConfigSettings rcs, bool wasLastUpdatedFromServer)
public bool QueueConfig(string name, object param, int ver, string prefix)
public bool SendDeviceInfoInConfigRequest()
public void AddSessionTag(string tag)
public void ForceUpdate()
public bool WasLastUpdatedFromServer()
public int GetInt(string key)
public int GetInt(string key, int defaultValue)
public long GetLong(string key)
public long GetLong(string key, long defaultValue)
public float GetFloat(string key)
public float GetFloat(string key, float defaultValue)
public string GetString(string key)
public string GetString(string key, string defaultValue)
public bool GetBool(string key)
public bool GetBool(string key, bool defaultValue)
public bool HasKey(string key)
public int GetCount()
public String[] GetKeys()
public T GetObject(string key)
public object GetObject(Type type, string key)
public object GetObject(string key, object defaultValue)
internal object GetAsScriptingObject(Type t, object defaultValue, string key)
public IDictionary`2<string, object> GetDictionary(string key)
internal void UseSafeLock()
internal void ReleaseSafeLock()
internal IntPtr GetSafeTopMap()
}
internal UnityEngine.RemoteConfigSettingsHelper : object {
internal IntPtr GetSafeMap(IntPtr m, string key)
internal String[] GetSafeMapKeys(IntPtr m)
internal Tag[] GetSafeMapTypes(IntPtr m)
internal long GetSafeNumber(IntPtr m, string key, long defaultValue)
internal float GetSafeFloat(IntPtr m, string key, float defaultValue)
internal bool GetSafeBool(IntPtr m, string key, bool defaultValue)
internal string GetSafeStringValue(IntPtr m, string key, string defaultValue)
internal IntPtr GetSafeArray(IntPtr m, string key)
internal long GetSafeArraySize(IntPtr a)
internal IntPtr GetSafeArrayArray(IntPtr a, long i)
internal IntPtr GetSafeArrayMap(IntPtr a, long i)
internal Tag GetSafeArrayType(IntPtr a, long i)
internal long GetSafeNumberArray(IntPtr a, long i)
internal float GetSafeArrayFloat(IntPtr a, long i)
internal bool GetSafeArrayBool(IntPtr a, long i)
internal string GetSafeArrayStringValue(IntPtr a, long i)
public IDictionary`2<string, object> GetDictionary(IntPtr m, string key)
internal IDictionary`2<string, object> GetDictionary(IntPtr m)
internal object GetArrayArrayEntries(IntPtr a, long i)
internal IDictionary`2<string, object> GetArrayMapEntries(IntPtr a, long i)
internal T[] GetArrayEntriesType(IntPtr a, long size, Func`3<IntPtr, long, T> f)
internal object GetArrayEntries(IntPtr a)
internal object GetMixedArrayEntries(IntPtr a)
internal void SetDictKeyType(IntPtr m, IDictionary`2<string, object> dict, string key, Tag tag)
}
public UnityEngine.RemoteSettings : object {
private UpdatedEventHandler Updated
private Action BeforeFetchFromServer
private Action`3<bool, bool, int> Completed
public void add_Updated(UpdatedEventHandler value)
public void remove_Updated(UpdatedEventHandler value)
public void add_BeforeFetchFromServer(Action value)
public void remove_BeforeFetchFromServer(Action value)
public void add_Completed(Action`3<bool, bool, int> value)
public void remove_Completed(Action`3<bool, bool, int> value)
internal void RemoteSettingsUpdated(bool wasLastUpdatedFromServer)
internal void RemoteSettingsBeforeFetchFromServer()
internal void RemoteSettingsUpdateCompleted(bool wasLastUpdatedFromServer, bool settingsChanged, int response)
public void CallOnUpdate()
public void ForceUpdate()
public bool WasLastUpdatedFromServer()
public int GetInt(string key)
public int GetInt(string key, int defaultValue)
public long GetLong(string key)
public long GetLong(string key, long defaultValue)
public float GetFloat(string key)
public float GetFloat(string key, float defaultValue)
public string GetString(string key)
public string GetString(string key, string defaultValue)
public bool GetBool(string key)
public bool GetBool(string key, bool defaultValue)
public bool HasKey(string key)
public int GetCount()
public String[] GetKeys()
public T GetObject(string key)
public object GetObject(Type type, string key)
public object GetObject(string key, object defaultValue)
internal object GetAsScriptingObject(Type t, object defaultValue, string key)
public IDictionary`2<string, object> GetDictionary(string key)
internal void UseSafeLock()
internal void ReleaseSafeLock()
internal IntPtr GetSafeTopMap()
}
