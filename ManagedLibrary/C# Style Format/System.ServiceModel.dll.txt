internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public Mono.CodeGeneration.CodeAdd : CodeArithmeticOperation {
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
}
public Mono.CodeGeneration.CodeAddOne : CodeExpression {
private CodeValueReference exp
private MethodInfo incMet
public void .ctor(CodeValueReference exp)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeAnd : CodeConditionExpression {
private CodeExpression exp1
private CodeExpression exp2
private Type t1
private Type t2
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
public void GenerateForBranch(ILGenerator gen, Label label, bool branchCase)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeArgument : CodeExpression {
private int argument
public int Argument
public void .ctor(int arg, Type type)
public int get_Argument()
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeArgumentReference : CodeValueReference {
private Type type
private int argNum
private string name
public void .ctor(Type type, int argNum, string name)
public void Generate(ILGenerator gen)
public void GenerateSet(ILGenerator gen, CodeExpression value)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeArithmeticOperation : CodeExpression {
protected CodeExpression exp1
protected CodeExpression exp2
protected Type t1
protected Type t2
protected string symbol
public void .ctor(CodeExpression exp1, CodeExpression exp2, string symbol)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeArrayItem : CodeValueReference {
private CodeExpression array
private CodeExpression index
public void .ctor(CodeExpression array, CodeExpression index)
public void Generate(ILGenerator gen)
public void GenerateSet(ILGenerator gen, CodeExpression value)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeArrayLength : CodeExpression {
private CodeExpression array
public void .ctor(CodeExpression array)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeAssignment : CodeExpression {
private CodeValueReference var
private CodeExpression exp
public void .ctor(CodeValueReference var, CodeExpression exp)
public void Generate(ILGenerator gen)
public void GenerateAsStatement(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeBinaryComparison : CodeConditionExpression {
protected CodeExpression exp1
protected CodeExpression exp2
protected Type t1
protected Type t2
private string symbol
public void .ctor(CodeExpression exp1, CodeExpression exp2, string symbol)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeBinaryOperation : CodeConditionExpression {
protected CodeExpression exp1
protected CodeExpression exp2
protected Type t1
protected Type t2
private string symbol
public void .ctor(CodeExpression exp1, CodeExpression exp2, string symbol)
public void PrintCode(CodeWriter cp)
}
public Mono.CodeGeneration.CodeBlock : CodeItem {
private ArrayList statements
public bool IsEmpty
public void Add(CodeItem code)
public bool get_IsEmpty()
public CodeBlock op_Addition(CodeBlock cb, CodeExpression e)
public CodeItem GetLastItem()
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
}
public Mono.CodeGeneration.CodeBuilder : object {
private CodeBlock mainBlock
private CodeBlock currentBlock
private Stack blockStack
private int varId
private Label returnLabel
private ArrayList nestedIfs
private int currentIfSerie
private CodeClass codeClass
public CodeBlock CurrentBlock
public CodeClass OwnerClass
internal Label ReturnLabel
public void .ctor(CodeClass codeClass)
private void .ctor(CodeBlock block)
public CodeBlock get_CurrentBlock()
public CodeClass get_OwnerClass()
public void Generate(ILGenerator gen)
public string PrintCode()
public void PrintCode(CodeWriter cp)
public CodeVariableReference DeclareVariable(Type type)
public CodeVariableReference DeclareVariable(Type type, object ob)
public CodeVariableReference DeclareVariable(CodeExpression initValue)
public CodeVariableReference DeclareVariable(Type type, CodeExpression initValue)
public void Assign(CodeValueReference var, CodeExpression val)
public void If(CodeExpression condition)
public void ElseIf(CodeExpression condition)
public void Else()
public void EndIf()
public void Select()
public void Case(CodeExpression condition)
public void EndSelect()
public void While(CodeExpression condition)
public void EndWhile()
public void Foreach(Type type, CodeExpression& item, CodeExpression array)
public void EndForeach()
public void For(CodeExpression initExp, CodeExpression conditionExp, CodeExpression nextExp)
public void EndFor()
public void Call(CodeExpression target, string name, CodeExpression[] parameters)
public void Call(CodeExpression target, MethodBase method, CodeExpression[] parameters)
public void Call(CodeExpression target, CodeMethod method, CodeExpression[] parameters)
public void Call(Type type, string name, CodeExpression[] parameters)
public void Call(MethodInfo method, CodeExpression[] parameters)
public void Call(CodeMethod method, CodeExpression[] parameters)
public CodeExpression CallFunc(CodeExpression target, string name, CodeExpression[] parameters)
public CodeExpression CallFunc(CodeExpression target, MethodInfo method, CodeExpression[] parameters)
public CodeExpression CallFunc(CodeExpression target, CodeMethod method, CodeExpression[] parameters)
public CodeExpression CallFunc(Type type, string name, CodeExpression[] parameters)
public CodeExpression CallFunc(MethodInfo method, CodeExpression[] parameters)
public CodeExpression CallFunc(CodeMethod method, CodeExpression[] parameters)
public void Inc(CodeValueReference val)
public void Dec(CodeValueReference val)
public CodeExpression When(CodeExpression condition, CodeExpression trueResult, CodeExpression falseResult)
public void ConsoleWriteLine(CodeExpression[] parameters)
public void ConsoleWriteLine(Object[] parameters)
public void Return(CodeExpression exp)
public void Return()
public CodeBuilder op_Addition(CodeBuilder cb, CodeItem e)
internal Label get_ReturnLabel()
internal void set_ReturnLabel(Label value)
private void PushNewBlock()
private CodeBlock PopBlock()
}
public Mono.CodeGeneration.CodeCast : CodeExpression {
private Type type
private CodeExpression exp
public void .ctor(Type type, CodeExpression exp)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeClass : object {
private TypeBuilder typeBuilder
private ArrayList customAttributes
private ArrayList methods
private ArrayList properties
private ArrayList fields
private Hashtable fieldAttributes
private Type baseType
private Type[] interfaces
private CodeMethod ctor
private CodeMethod cctor
private CodeBuilder instanceInit
private CodeBuilder classInit
private int varId
public TypeBuilder TypeBuilder
public void .ctor(ModuleBuilder mb, string name)
public void .ctor(ModuleBuilder mb, string name, Type baseType, Type[] interfaces)
public void .ctor(ModuleBuilder mb, string name, TypeAttributes attr, Type baseType, Type[] interfaces)
public CodeCustomAttribute CreateCustomAttribute(Type attributeType)
public CodeCustomAttribute CreateCustomAttribute(Type attributeType, Type[] ctorArgTypes, Object[] ctorArgs, String[] namedArgFieldNames, Object[] namedArgValues)
public CodeCustomAttribute CreateCustomAttribute(Type attributeType, Type[] ctorArgTypes, CodeLiteral[] ctorArgs, FieldInfo[] fields, CodeLiteral[] fieldValues)
public CodeProperty CreateProperty(string name, Type returnType, Type[] parameterTypes)
public CodeProperty CreateProperty(string name, Type returnType, MethodAttributes methodAttributes, Type[] parameterTypes)
public CodeMethod CreateMethod(string name, Type returnType, Type[] parameterTypes)
public CodeMethod CreateVirtualMethod(string name, Type returnType, Type[] parameterTypes)
public CodeMethod CreateStaticMethod(string name, Type returnType, Type[] parameterTypes)
public CodeMethod CreateMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
public CodeMethod GetDefaultConstructor()
public CodeMethod CreateConstructor(Type[] parameters)
public CodeMethod CreateConstructor(MethodAttributes attributes, Type[] parameters)
public CodeMethod GetStaticConstructor()
public CodeMethod ImplementMethod(Type baseType, string methodName)
public CodeMethod ImplementMethod(MethodInfo basem)
public CodeMethod ImplementMethod(Type baseType, MethodInfo basem)
public CodeFieldReference DefineField(string name, Type type, CodeCustomAttribute[] customAttributes)
public CodeFieldReference DefineStaticField(CodeExpression initialValue, CodeCustomAttribute[] customAttributes)
public CodeFieldReference DefineStaticField(string name, Type type, CodeExpression initialValue, CodeCustomAttribute[] customAttributes)
public CodeFieldReference DefineField(string name, Type type, FieldAttributes attrs, CodeExpression initialValue, CodeCustomAttribute[] customAttributes)
public TypeBuilder get_TypeBuilder()
private CodeBuilder GetInstanceInitBuilder()
private CodeBuilder GetClassInitBuilder()
private string GetFieldName(string name)
private string GetMethodName(string name)
private string GetPropertyName(string name)
public string PrintCode()
public void PrintCode(CodeWriter cw)
public Type CreateType()
}
public Mono.CodeGeneration.CodeConditionExpression : CodeExpression {
public void GenerateForBranch(ILGenerator gen, Label label, bool jumpCase)
}
public Mono.CodeGeneration.CodeCustomAttribute : object {
private CustomAttributeBuilder customAttributeBuilder
private Type type
private ConstructorInfo constructor
private CodeLiteral[] ctorArgs
private MemberInfo[] members
private CodeLiteral[] namedArgValues
public CustomAttributeBuilder Builder
public CodeCustomAttribute Create(Type attributeType)
public CodeCustomAttribute Create(Type attributeType, Type[] ctorArgTypes, Object[] ctorArgs, String[] namedArgNames, Object[] namedArgValues)
public CodeCustomAttribute Create(Type attributeType, Type[] ctorArgTypes, CodeLiteral[] ctorArgs, MemberInfo[] members, CodeLiteral[] values)
public void .ctor(CustomAttributeBuilder attributeBuilder, Type type, ConstructorInfo constructor, CodeLiteral[] ctorArgs, MemberInfo[] namedArgMembers, CodeLiteral[] namedArgValues)
public CustomAttributeBuilder get_Builder()
public string PrintCode()
public void PrintCode(CodeWriter cw)
}
public Mono.CodeGeneration.CodeDecrement : CodeValueReference {
private CodeValueReference exp
public void .ctor(CodeValueReference exp)
public void Generate(ILGenerator gen)
public void GenerateSet(ILGenerator gen, CodeExpression value)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeDiv : CodeArithmeticOperation {
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
}
public Mono.CodeGeneration.CodeEquals : CodeConditionExpression {
private CodeExpression exp1
private CodeExpression exp2
private Type t1
private Type t2
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
public void GenerateForBranch(ILGenerator gen, Label label, bool branchCase)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeExpression : CodeItem {
internal CodeVariableReference var
public CodeValueReference Item
public CodeValueReference Item
public CodeValueReference Item
public CodeValueReference Item
public CodeExpression ArrayLength
public CodeExpression IsNull
public bool IsNumber
public Type GetResultType()
public void GenerateAsStatement(ILGenerator gen)
public CodeExpression CallToString()
public CodeExpression AreEqual(CodeExpression e1, CodeExpression e2)
public CodeExpression AreNotEqual(CodeExpression e1, CodeExpression e2)
public CodeExpression IsGreaterThan(CodeExpression e1, CodeExpression e2)
public CodeExpression IsSmallerThan(CodeExpression e1, CodeExpression e2)
public CodeExpression IsGreaterEqualThan(CodeExpression e1, CodeExpression e2)
public CodeExpression IsSmallerEqualThan(CodeExpression e1, CodeExpression e2)
public CodeExpression Not(CodeExpression e)
public CodeExpression Add(CodeExpression e1, CodeExpression e2)
public CodeExpression Subtract(CodeExpression e1, CodeExpression e2)
public CodeExpression Multiply(CodeExpression e1, CodeExpression e2)
public CodeExpression Divide(CodeExpression e1, CodeExpression e2)
public CodeExpression CastTo(Type type)
public CodeExpression And(CodeExpression other)
public CodeExpression Is(Type type)
public CodeExpression Call(string name, CodeExpression[] parameters)
public CodeExpression Call(MethodInfo method, CodeExpression[] parameters)
public CodeValueReference MemGet(string name)
public CodeValueReference MemGet(MemberInfo member)
public CodeValueReference get_Item(CodeExpression index)
public CodeValueReference get_Item(string name)
public CodeValueReference get_Item(FieldInfo field)
public CodeValueReference get_Item(PropertyInfo prop)
public CodeExpression get_ArrayLength()
public CodeExpression get_IsNull()
public CodeExpression NullValue(Type type)
public bool get_IsNumber()
}
public Mono.CodeGeneration.CodeFieldReference : CodeValueReference {
private CodeExpression target
private FieldInfo field
public void .ctor(CodeExpression target, FieldInfo field)
public void .ctor(FieldInfo field)
public void Generate(ILGenerator gen)
public void GenerateSet(ILGenerator gen, CodeExpression value)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeFor : CodeStatement {
private CodeExpression initExp
private CodeExpression conditionExp
private CodeExpression nextExp
private CodeBlock forBlock
public CodeBlock ForBlock
public void .ctor(CodeExpression initExp, CodeExpression conditionExp, CodeExpression nextExp)
public CodeBlock get_ForBlock()
public void set_ForBlock(CodeBlock value)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
}
public Mono.CodeGeneration.CodeForeach : CodeStatement {
private Type itemType
private CodeExpression array
private CodeBlock forBlock
private CodeVariableDeclaration itemDec
public CodeValueReference ItemExpression
public CodeBlock ForBlock
public void .ctor(CodeExpression array, Type itemType)
public CodeValueReference get_ItemExpression()
public CodeBlock get_ForBlock()
public void set_ForBlock(CodeBlock value)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
}
public Mono.CodeGeneration.CodeGenerationHelper : object {
public void GenerateMethodCall(ILGenerator gen, CodeExpression target, MethodBase method, CodeExpression[] parameters)
public void GenerateMethodCall(ILGenerator gen, CodeExpression target, CodeMethod method, CodeExpression[] parameters)
private void GenerateMethodCall(ILGenerator gen, CodeExpression target, MethodBase method, Type[] parameterTypes, CodeExpression[] parameters)
public Exception GetMethodException(MethodBase method, string msg)
public void GenerateSafeConversion(ILGenerator gen, Type targetType, Type sourceType)
public void LoadFromPtr(ILGenerator ig, Type t)
public void SaveToPtr(ILGenerator ig, Type t)
public bool IsNumber(Type t)
public void GeneratePrimitiveValue()
}
public Mono.CodeGeneration.CodeGreaterEqualThan : CodeBinaryComparison {
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
public void GenerateForBranch(ILGenerator gen, Label label, bool branchCase)
}
public Mono.CodeGeneration.CodeGreaterThan : CodeBinaryComparison {
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
public void GenerateForBranch(ILGenerator gen, Label label, bool branchCase)
}
public Mono.CodeGeneration.CodeIf : CodeStatement {
private CodeExpression condition
private CodeBlock trueBlock
private CodeBlock falseBlock
public CodeBlock TrueBlock
public CodeBlock FalseBlock
public void .ctor(CodeExpression condition)
public void Generate(ILGenerator gen)
private void GenerateCondition(ILGenerator gen, Label falseLabel)
public void PrintCode(CodeWriter cp)
public CodeBlock get_TrueBlock()
public void set_TrueBlock(CodeBlock value)
public CodeBlock get_FalseBlock()
public void set_FalseBlock(CodeBlock value)
}
public Mono.CodeGeneration.CodeIncrement : CodeValueReference {
private CodeValueReference exp
public void .ctor(CodeValueReference exp)
public void Generate(ILGenerator gen)
public void GenerateAsStatement(ILGenerator gen)
public void GenerateSet(ILGenerator gen, CodeExpression value)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeIs : CodeConditionExpression {
private Type type
private CodeExpression exp
public void .ctor(Type type, CodeExpression exp)
public void Generate(ILGenerator gen)
public void GenerateForBranch(ILGenerator gen, Label label, bool branchCase)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeItem : object {
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
}
public Mono.CodeGeneration.CodeLessEqualThan : CodeBinaryComparison {
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
public void GenerateForBranch(ILGenerator gen, Label label, bool branchCase)
}
public Mono.CodeGeneration.CodeLessThan : CodeBinaryComparison {
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
public void GenerateForBranch(ILGenerator gen, Label label, bool branchCase)
}
public Mono.CodeGeneration.CodeLiteral : CodeExpression {
private object value
private Type type
public object Value
public void .ctor(object value)
public void .ctor(object value, Type type)
public object get_Value()
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeMethod : object {
private MethodBase methodBase
private CodeBuilder builder
private string name
private MethodAttributes attributes
private Type returnType
private TypeBuilder typeBuilder
private Type[] parameterTypes
private ArrayList customAttributes
private CodeClass cls
public TypeBuilder DeclaringType
public MethodInfo MethodInfo
public MethodBase MethodBase
public string Name
public MethodAttributes Attributes
public Type ReturnType
public Type[] ParameterTypes
public CodeBuilder CodeBuilder
public bool IsStatic
internal CodeMethod DefineMethod(CodeClass cls, string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
public CodeMethod DefineConstructor(CodeClass cls, MethodAttributes attributes, Type[] parameterTypes)
internal void .ctor(CodeClass cls, string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
private void .ctor(CodeClass cls, MethodAttributes attributes, Type[] parameterTypes)
public TypeBuilder get_DeclaringType()
public MethodInfo get_MethodInfo()
public MethodBase get_MethodBase()
public string get_Name()
public MethodAttributes get_Attributes()
public Type get_ReturnType()
public Type[] get_ParameterTypes()
public CodeBuilder get_CodeBuilder()
public bool get_IsStatic()
public CodeCustomAttribute CreateCustomAttribute(Type attributeType)
public CodeCustomAttribute CreateCustomAttribute(Type attributeType, Type[] ctorArgTypes, Object[] ctorArgs)
public CodeCustomAttribute CreateCustomAttribute(Type attributeType, Type[] ctorArgTypes, Object[] ctorArgs, String[] namedArgFieldNames, Object[] namedArgValues)
public CodeCustomAttribute CreateCustomAttribute(Type attributeType, Type[] ctorArgTypes, CodeLiteral[] ctorArgs, FieldInfo[] fields, CodeLiteral[] fieldValues)
private void SetCustomAttribute(CodeCustomAttribute cca)
public string PrintCode()
public void PrintCode(CodeWriter cp)
public CodeArgumentReference GetArg(int n)
public CodeArgumentReference GetThis()
public void Generate()
public void UpdateMethodBase(Type type)
}
public Mono.CodeGeneration.CodeMethodCall : CodeExpression {
private CodeExpression target
private CodeExpression[] parameters
private MethodBase method
private CodeMethod codeMethod
public void .ctor(CodeExpression target, string name, CodeExpression[] parameters)
public void .ctor(CodeExpression target, MethodBase method, CodeExpression[] parameters)
public void .ctor(CodeExpression target, CodeMethod method, CodeExpression[] parameters)
public void .ctor(Type type, string name, CodeExpression[] parameters)
public void .ctor(MethodInfo method, CodeExpression[] parameters)
public void .ctor(CodeMethod method, CodeExpression[] parameters)
private Type[] GetParameterTypes(CodeExpression[] parameters)
private string GetSignature(Type type, string name, CodeExpression[] parameters)
public void Generate(ILGenerator gen)
public void GenerateAsStatement(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeModule : object {
private ModuleBuilder module
private CodeModule sharedModule
public CodeModule Shared
public ModuleBuilder ModuleBuilder
public void .ctor(string name)
public CodeModule get_Shared()
public CodeClass CreateClass(string name)
public CodeClass CreateClass(string name, Type baseType, Type[] interfaces)
public CodeClass CreateClass(string name, TypeAttributes attr, Type baseType, Type[] interfaces)
public ModuleBuilder get_ModuleBuilder()
}
public Mono.CodeGeneration.CodeMul : CodeArithmeticOperation {
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
}
public Mono.CodeGeneration.CodeNeg : CodeExpression {
private CodeExpression exp
public void .ctor(CodeExpression exp)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeNew : CodeExpression {
private object value
private Type type
private ConstructorInfo ctor
private CodeExpression[] parameters
public void .ctor(Type type, CodeExpression[] parameters)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeNewArray : CodeExpression {
private Type elemType
private CodeExpression size
public void .ctor(Type type, CodeExpression size)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeNot : CodeConditionExpression {
private CodeExpression exp
public void .ctor(CodeExpression exp)
public void Generate(ILGenerator gen)
public void GenerateForBranch(ILGenerator gen, Label label, bool branchCase)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeNotEquals : CodeConditionExpression {
private CodeExpression exp1
private CodeExpression exp2
private Type t1
private Type t2
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
public void GenerateForBranch(ILGenerator gen, Label label, bool branchCase)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeOr : CodeConditionExpression {
private CodeExpression exp1
private CodeExpression exp2
private Type t1
private Type t2
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
public void GenerateForBranch(ILGenerator gen, Label label, bool branchCase)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
internal Mono.CodeGeneration.CodePop : CodeStatement {
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
}
public Mono.CodeGeneration.CodeProperty : object {
private PropertyInfo propertyInfo
private CodeBuilder get_builder
private CodeBuilder set_builder
private string name
private PropertyAttributes attributes
private MethodAttributes methodAttributes
private Type returnType
private TypeBuilder typeBuilder
private Type[] parameterTypes
private ArrayList customAttributes
private CodeClass cls
public TypeBuilder DeclaringType
public PropertyBuilder PropertyBuilder
public string Name
public PropertyAttributes Attributes
public Type ReturnType
public Type[] ParameterTypes
public CodeBuilder CodeBuilderGet
public CodeBuilder CodeBuilderSet
public bool IsStatic
public bool IsPublic
internal CodeProperty DefineProperty(CodeClass cls, string name, PropertyAttributes attributes, MethodAttributes methodAttributes, Type returnType, Type[] parameterTypes)
internal void .ctor(CodeClass cls, string name, PropertyAttributes attributes, MethodAttributes methodAttributes, Type returnType, Type[] parameterTypes)
public TypeBuilder get_DeclaringType()
public PropertyBuilder get_PropertyBuilder()
public string get_Name()
public PropertyAttributes get_Attributes()
public Type get_ReturnType()
public Type[] get_ParameterTypes()
public CodeBuilder get_CodeBuilderGet()
public CodeBuilder get_CodeBuilderSet()
public bool get_IsStatic()
public bool get_IsPublic()
public CodeCustomAttribute CreateCustomAttribute(Type attributeType)
public CodeCustomAttribute CreateCustomAttribute(Type attributeType, Type[] ctorArgTypes, Object[] ctorArgs)
public CodeCustomAttribute CreateCustomAttribute(Type attributeType, Type[] ctorArgTypes, Object[] ctorArgs, String[] namedArgFieldNames, Object[] namedArgValues)
public CodeCustomAttribute CreateCustomAttribute(Type attributeType, Type[] ctorArgTypes, CodeLiteral[] ctorArgs, FieldInfo[] fields, CodeLiteral[] fieldValues)
private void SetCustomAttribute(CodeCustomAttribute cca)
public string PrintCode()
public void PrintCode(CodeWriter cp)
public CodeArgumentReference GetArg(int n)
public CodeArgumentReference GetThis()
public void Generate()
public void UpdatePropertyInfo(Type type)
}
public Mono.CodeGeneration.CodePropertyReference : CodeValueReference {
private CodeExpression target
private PropertyInfo property
public void .ctor(CodeExpression target, PropertyInfo property)
public void Generate(ILGenerator gen)
public void GenerateSet(ILGenerator gen, CodeExpression value)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeReturn : CodeStatement {
private CodeExpression retValue
private CodeBuilder codeBuilder
internal void .ctor(CodeBuilder codeBuilder, CodeExpression retValue)
internal void .ctor(CodeBuilder codeBuilder)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
}
public Mono.CodeGeneration.CodeSelect : CodeStatement {
private ArrayList conditions
private ArrayList blocks
public void AddCase(CodeExpression condition, CodeBlock block)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
}
public Mono.CodeGeneration.CodeSelfIncrement : CodeExpression {
private CodeValueReference exp
public void .ctor(CodeValueReference exp)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeSub : CodeArithmeticOperation {
public void .ctor(CodeExpression exp1, CodeExpression exp2)
public void Generate(ILGenerator gen)
}
public Mono.CodeGeneration.CodeSubstractOne : CodeExpression {
private CodeExpression exp
private MethodInfo decMet
public void .ctor(CodeExpression exp)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeTry : CodeStatement {
private CodeExpression condition
private CodeBlock tryBlock
private CodeBlock finallyBlock
private List`1<KeyValuePair`2<CodeVariableDeclaration, CodeBlock>> catchBlocks
public CodeBlock TryBlock
public List`1<KeyValuePair`2<CodeVariableDeclaration, CodeBlock>> CatchBlocks
public CodeBlock FinallyBlock
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public CodeBlock get_TryBlock()
public void set_TryBlock(CodeBlock value)
public List`1<KeyValuePair`2<CodeVariableDeclaration, CodeBlock>> get_CatchBlocks()
public CodeBlock get_FinallyBlock()
public void set_FinallyBlock(CodeBlock value)
}
public Mono.CodeGeneration.CodeValueReference : CodeExpression {
public void GenerateSet(ILGenerator gen, CodeExpression value)
}
public Mono.CodeGeneration.CodeVariableDeclaration : CodeStatement {
private CodeVariableReference var
public CodeVariableReference Variable
public void .ctor(Type type, string name)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public CodeVariableReference get_Variable()
}
public Mono.CodeGeneration.CodeVariableReference : CodeValueReference {
private LocalBuilder localBuilder
private Type type
private string name
public Type Type
public string Name
internal LocalBuilder LocalBuilder
public void .ctor(Type type, string name)
public Type get_Type()
public string get_Name()
internal LocalBuilder get_LocalBuilder()
internal void set_LocalBuilder(LocalBuilder value)
public void Generate(ILGenerator gen)
public void GenerateSet(ILGenerator gen, CodeExpression value)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeWhen : CodeExpression {
private CodeExpression condition
private CodeExpression trueBlock
private CodeExpression falseBlock
public void .ctor(CodeExpression condition, CodeExpression trueResult, CodeExpression falseResult)
public void Generate(ILGenerator gen)
private void GenerateCondition(ILGenerator gen, Label falseLabel)
public void PrintCode(CodeWriter cp)
public Type GetResultType()
}
public Mono.CodeGeneration.CodeWhile : CodeStatement {
private CodeExpression condition
private CodeBlock whileBlock
public CodeBlock WhileBlock
public void .ctor(CodeExpression condition)
public void Generate(ILGenerator gen)
public void PrintCode(CodeWriter cp)
public CodeBlock get_WhileBlock()
public void set_WhileBlock(CodeBlock value)
}
public Mono.CodeGeneration.CodeWriter : object {
private TextWriter writer
private int indent
public void .ctor(TextWriter tw)
public CodeWriter BeginLine()
public CodeWriter Write(string s)
public CodeWriter EndLine()
public CodeWriter WriteLine(string s)
public CodeWriter WriteLineInd(string s)
public CodeWriter WriteLineUnind(string s)
public void Indent()
public void Unindent()
}
public Mono.CodeGeneration.Exp : object {
public CodeExpression Literal(object ob)
public CodeExpression Literal(string ob)
public CodeExpression New(Type type, CodeExpression[] pars)
public CodeExpression NewArray(Type type, CodeExpression size)
public CodeExpression And(CodeExpression e1, CodeExpression e2)
public CodeExpression And(CodeExpression e1, CodeExpression e2, CodeExpression e3)
public CodeExpression Or(CodeExpression e1, CodeExpression e2)
public CodeValueReference Inc(CodeValueReference e)
public CodeExpression Call(CodeExpression target, string name, CodeExpression[] parameters)
public CodeExpression Call(CodeExpression target, MethodInfo method, CodeExpression[] parameters)
public CodeExpression Call(CodeExpression target, CodeMethod method, CodeExpression[] parameters)
public CodeExpression Call(Type type, string name, CodeExpression[] parameters)
public CodeExpression Call(MethodInfo method, CodeExpression[] parameters)
public CodeExpression Call(CodeMethod method, CodeExpression[] parameters)
}
internal Mono.Security.BitConverterLE : object {
private Byte[] GetUShortBytes(Byte* bytes)
private Byte[] GetUIntBytes(Byte* bytes)
private Byte[] GetULongBytes(Byte* bytes)
internal Byte[] GetBytes(bool value)
internal Byte[] GetBytes(char value)
internal Byte[] GetBytes(short value)
internal Byte[] GetBytes(int value)
internal Byte[] GetBytes(long value)
internal Byte[] GetBytes(ushort value)
internal Byte[] GetBytes(UInt32 value)
internal Byte[] GetBytes(ulong value)
internal Byte[] GetBytes(float value)
internal Byte[] GetBytes(double value)
private void UShortFromBytes(Byte* dst, Byte[] src, int startIndex)
private void UIntFromBytes(Byte* dst, Byte[] src, int startIndex)
private void ULongFromBytes(Byte* dst, Byte[] src, int startIndex)
internal bool ToBoolean(Byte[] value, int startIndex)
internal char ToChar(Byte[] value, int startIndex)
internal short ToInt16(Byte[] value, int startIndex)
internal int ToInt32(Byte[] value, int startIndex)
internal long ToInt64(Byte[] value, int startIndex)
internal ushort ToUInt16(Byte[] value, int startIndex)
internal UInt32 ToUInt32(Byte[] value, int startIndex)
internal ulong ToUInt64(Byte[] value, int startIndex)
internal float ToSingle(Byte[] value, int startIndex)
internal double ToDouble(Byte[] value, int startIndex)
}
internal Mono.Security.Cryptography.HMAC : KeyedHashAlgorithm {
private HashAlgorithm hash
private bool hashing
private Byte[] innerPad
private Byte[] outerPad
public Byte[] Key
public Byte[] get_Key()
public void set_Key(Byte[] value)
public void .ctor(string hashName, Byte[] rgbKey)
public void Initialize()
protected Byte[] HashFinal()
protected void HashCore(Byte[] array, int ibStart, int cbSize)
private void initializePad()
}
internal Mono.Security.Cryptography.MD5SHA1 : HashAlgorithm {
private HashAlgorithm md5
private HashAlgorithm sha
private bool hashing
public void Initialize()
protected Byte[] HashFinal()
protected void HashCore(Byte[] array, int ibStart, int cbSize)
public Byte[] CreateSignature(RSA rsa)
public bool VerifySignature(RSA rsa, Byte[] rgbSignature)
}
public Mono.Security.Protocol.Ntlm.ChallengeResponse : object {
private Byte[] magic
private Byte[] nullEncMagic
private bool _disposed
private Byte[] _challenge
private Byte[] _lmpwd
private Byte[] _ntpwd
public string Password
public Byte[] Challenge
public Byte[] LM
public Byte[] NT
public Byte[] LMSessionKey
public void .ctor(string password, Byte[] challenge)
protected void Finalize()
public string get_Password()
public void set_Password(string value)
public Byte[] get_Challenge()
public void set_Challenge(Byte[] value)
public Byte[] get_LM()
public Byte[] get_NT()
public Byte[] get_LMSessionKey()
public void Dispose()
private void Dispose(bool disposing)
private Byte[] GetResponse(Byte[] pwd)
private Byte[] PrepareDESKey(Byte[] key56bits, int position)
private Byte[] PasswordToKey(string password, int position)
}
public Mono.Security.Protocol.Ntlm.MessageBase : object {
private Byte[] _current_os_version
private Byte[] header
private int _type
private NtlmFlags _flags
private NtlmVersion _version
private Byte[] _osversion
public NtlmFlags Flags
public Byte[] OSVersion
public int Type
public NtlmVersion Version
private Byte[] GetOSVersion()
protected void .ctor(int messageType)
protected void .ctor(int messageType, NtlmVersion version)
public NtlmFlags get_Flags()
public void set_Flags(NtlmFlags value)
public Byte[] get_OSVersion()
public void set_OSVersion(Byte[] value)
public int get_Type()
public NtlmVersion get_Version()
protected Byte[] PrepareMessage(int messageSize)
protected void Decode(Byte[] message)
protected bool CheckHeader(Byte[] message)
public Byte[] GetBytes()
internal Byte[] CreateSubArray(Byte[] source, int offset, int length)
}
public Mono.Security.Protocol.Ntlm.NtlmFlags : Enum {
public int value__
public NtlmFlags NegotiateUnicode
public NtlmFlags NegotiateOem
public NtlmFlags RequestTarget
public NtlmFlags NegotiateSign
public NtlmFlags NegotiateSeal
public NtlmFlags NegotiateDatagramStyle
public NtlmFlags NegotiateLm
public NtlmFlags NegotiateNtlm
public NtlmFlags NegotiateAnonymous
public NtlmFlags NegotiateDomainSupplied
public NtlmFlags NegotiateWorkstationSupplied
public NtlmFlags NegotiateAlwaysSign
public NtlmFlags NegotiateNtlm2Key
public NtlmFlags Negotiate128
public NtlmFlags NegotiateKeyExchange
public NtlmFlags Negotiate56
}
public Mono.Security.Protocol.Ntlm.NtlmTargetInformation : object {
private string _server
private string _domain
private string _dns_host
private string _dns_domain
public string ServerName
public string DomainName
public string DnsHostName
public string DnsDomainName
public string get_ServerName()
public void set_ServerName(string value)
public string get_DomainName()
public void set_DomainName(string value)
public string get_DnsHostName()
public void set_DnsHostName(string value)
public string get_DnsDomainName()
public void set_DnsDomainName(string value)
public void Decode(Byte[] bytes, int length, int offset)
public Byte[] ToBytes()
private void WriteName(BinaryWriter bw, short type, string value)
}
public Mono.Security.Protocol.Ntlm.NtlmVersion : Enum {
public int value__
public NtlmVersion Version1
public NtlmVersion Version2
public NtlmVersion Version3
}
public Mono.Security.Protocol.Ntlm.Type1Message : MessageBase {
private string _host
private string _domain
public string Domain
public string Host
public void .ctor(NtlmVersion version)
public void .ctor(Byte[] message)
public void .ctor(Byte[] message, NtlmVersion version)
public string get_Domain()
public void set_Domain(string value)
public string get_Host()
public void set_Host(string value)
protected void Decode(Byte[] message)
public Byte[] GetBytes()
}
public Mono.Security.Protocol.Ntlm.Type2Message : MessageBase {
private Byte[] _nonce
private Byte[] _context
private NtlmTargetInformation _target
private string _target_name
public Byte[] Context
public Byte[] Nonce
public NtlmTargetInformation Target
public string TargetName
public void .ctor(NtlmVersion version)
public void .ctor(Byte[] message)
public void .ctor(Byte[] message, NtlmVersion version)
protected void Finalize()
public Byte[] get_Context()
public void set_Context(Byte[] value)
public Byte[] get_Nonce()
public void set_Nonce(Byte[] value)
public NtlmTargetInformation get_Target()
public string get_TargetName()
public void set_TargetName(string value)
protected void Decode(Byte[] message)
public Byte[] GetBytes()
}
public Mono.Security.Protocol.Ntlm.Type3Message : MessageBase {
private Byte[] _challenge
private string _host
private string _domain
private string _username
private string _password
private Byte[] _lm
private Byte[] _nt
private Byte[] _nonce
public Byte[] Challenge
public string Domain
public string Host
public string Password
public string Username
public Byte[] LM
public Byte[] NT
public void .ctor(NtlmVersion version)
public void .ctor(Byte[] message)
public void .ctor(Byte[] message, NtlmVersion version)
protected void Finalize()
public Byte[] get_Challenge()
public void set_Challenge(Byte[] value)
public string get_Domain()
public void set_Domain(string value)
public string get_Host()
public void set_Host(string value)
public string get_Password()
public void set_Password(string value)
public string get_Username()
public void set_Username(string value)
public Byte[] get_LM()
public Byte[] get_NT()
protected void Decode(Byte[] message)
public Byte[] GetBytes()
}
internal Mono.Security.Protocol.Tls.Alert : object {
private AlertLevel level
private AlertDescription description
public AlertLevel Level
public AlertDescription Description
public string Message
public bool IsWarning
public bool IsCloseNotify
public AlertLevel get_Level()
public AlertDescription get_Description()
public string get_Message()
public bool get_IsWarning()
public bool get_IsCloseNotify()
public void .ctor(AlertDescription description)
public void .ctor(AlertLevel level, AlertDescription description)
private void inferAlertLevel()
public string GetAlertMessage(AlertDescription description)
}
internal Mono.Security.Protocol.Tls.AlertDescription : Enum {
public byte value__
public AlertDescription CloseNotify
public AlertDescription UnexpectedMessage
public AlertDescription BadRecordMAC
public AlertDescription DecryptionFailed
public AlertDescription RecordOverflow
public AlertDescription DecompressionFailiure
public AlertDescription HandshakeFailiure
public AlertDescription NoCertificate
public AlertDescription BadCertificate
public AlertDescription UnsupportedCertificate
public AlertDescription CertificateRevoked
public AlertDescription CertificateExpired
public AlertDescription CertificateUnknown
public AlertDescription IlegalParameter
public AlertDescription UnknownCA
public AlertDescription AccessDenied
public AlertDescription DecodeError
public AlertDescription DecryptError
public AlertDescription ExportRestriction
public AlertDescription ProtocolVersion
public AlertDescription InsuficientSecurity
public AlertDescription InternalError
public AlertDescription UserCancelled
public AlertDescription NoRenegotiation
}
internal Mono.Security.Protocol.Tls.AlertLevel : Enum {
public byte value__
public AlertLevel Warning
public AlertLevel Fatal
}
public Mono.Security.Protocol.Tls.CertificateSelectionCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public X509Certificate Invoke(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates)
public IAsyncResult BeginInvoke(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates, AsyncCallback callback, object object)
public X509Certificate EndInvoke(IAsyncResult result)
}
public Mono.Security.Protocol.Tls.CertificateValidationCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(X509Certificate certificate, Int32[] certificateErrors)
public IAsyncResult BeginInvoke(X509Certificate certificate, Int32[] certificateErrors, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
public Mono.Security.Protocol.Tls.CertificateValidationCallback2 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ValidationResult Invoke(X509CertificateCollection collection)
public IAsyncResult BeginInvoke(X509CertificateCollection collection, AsyncCallback callback, object object)
public ValidationResult EndInvoke(IAsyncResult result)
}
public Mono.Security.Protocol.Tls.CipherAlgorithmType : Enum {
public int value__
public CipherAlgorithmType Des
public CipherAlgorithmType None
public CipherAlgorithmType Rc2
public CipherAlgorithmType Rc4
public CipherAlgorithmType Rijndael
public CipherAlgorithmType SkipJack
public CipherAlgorithmType TripleDes
}
internal Mono.Security.Protocol.Tls.CipherSuite : object {
public Byte[] EmptyArray
private short code
private string name
private CipherAlgorithmType cipherAlgorithmType
private HashAlgorithmType hashAlgorithmType
private ExchangeAlgorithmType exchangeAlgorithmType
private bool isExportable
private CipherMode cipherMode
private byte keyMaterialSize
private int keyBlockSize
private byte expandedKeyMaterialSize
private short effectiveKeyBits
private byte ivSize
private byte blockSize
private Context context
private SymmetricAlgorithm encryptionAlgorithm
private ICryptoTransform encryptionCipher
private SymmetricAlgorithm decryptionAlgorithm
private ICryptoTransform decryptionCipher
private KeyedHashAlgorithm clientHMAC
private KeyedHashAlgorithm serverHMAC
protected ICryptoTransform EncryptionCipher
protected ICryptoTransform DecryptionCipher
protected KeyedHashAlgorithm ClientHMAC
protected KeyedHashAlgorithm ServerHMAC
public CipherAlgorithmType CipherAlgorithmType
public string HashAlgorithmName
public HashAlgorithmType HashAlgorithmType
public int HashSize
public ExchangeAlgorithmType ExchangeAlgorithmType
public CipherMode CipherMode
public short Code
public string Name
public bool IsExportable
public byte KeyMaterialSize
public int KeyBlockSize
public byte ExpandedKeyMaterialSize
public short EffectiveKeyBits
public byte IvSize
public Context Context
protected ICryptoTransform get_EncryptionCipher()
protected ICryptoTransform get_DecryptionCipher()
protected KeyedHashAlgorithm get_ClientHMAC()
protected KeyedHashAlgorithm get_ServerHMAC()
public CipherAlgorithmType get_CipherAlgorithmType()
public string get_HashAlgorithmName()
public HashAlgorithmType get_HashAlgorithmType()
public int get_HashSize()
public ExchangeAlgorithmType get_ExchangeAlgorithmType()
public CipherMode get_CipherMode()
public short get_Code()
public string get_Name()
public bool get_IsExportable()
public byte get_KeyMaterialSize()
public int get_KeyBlockSize()
public byte get_ExpandedKeyMaterialSize()
public short get_EffectiveKeyBits()
public byte get_IvSize()
public Context get_Context()
public void set_Context(Context value)
public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBits, byte ivSize, byte blockSize)
internal void Write(Byte[] array, int offset, short value)
internal void Write(Byte[] array, int offset, ulong value)
public void InitializeCipher()
public Byte[] EncryptRecord(Byte[] fragment, Byte[] mac)
public void DecryptRecord(Byte[] fragment, Byte[]& dcrFragment, Byte[]& dcrMAC)
public Byte[] ComputeClientRecordMAC(ContentType contentType, Byte[] fragment)
public Byte[] ComputeServerRecordMAC(ContentType contentType, Byte[] fragment)
public void ComputeMasterSecret(Byte[] preMasterSecret)
public void ComputeKeys()
public Byte[] CreatePremasterSecret()
public Byte[] PRF(Byte[] secret, string label, Byte[] data, int length)
public Byte[] Expand(string hashName, Byte[] secret, Byte[] seed, int length)
private void createEncryptionCipher()
private void createDecryptionCipher()
}
internal Mono.Security.Protocol.Tls.CipherSuiteCollection : object {
private ArrayList cipherSuites
private SecurityProtocolType protocol
public CipherSuite Item
public CipherSuite Item
public CipherSuite Item
private object System.Collections.IList.Item
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
public int Count
public bool IsFixedSize
public bool IsReadOnly
public CipherSuite get_Item(string name)
public void set_Item(string name, CipherSuite value)
public CipherSuite get_Item(int index)
public void set_Item(int index, CipherSuite value)
public CipherSuite get_Item(short code)
public void set_Item(short code, CipherSuite value)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public void .ctor(SecurityProtocolType protocol)
public void CopyTo(Array array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public void Clear()
private bool System.Collections.IList.Contains(object value)
public int IndexOf(string name)
public int IndexOf(short code)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
public CipherSuite Add(short code, string name, CipherAlgorithmType cipherType, HashAlgorithmType hashType, ExchangeAlgorithmType exchangeType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize)
private TlsCipherSuite add(TlsCipherSuite cipherSuite)
private SslCipherSuite add(SslCipherSuite cipherSuite)
private int System.Collections.IList.Add(object value)
private bool cultureAwareCompare(string strA, string strB)
}
internal Mono.Security.Protocol.Tls.CipherSuiteFactory : object {
public CipherSuiteCollection GetSupportedCiphers(SecurityProtocolType protocol)
private CipherSuiteCollection GetTls1SupportedCiphers()
private CipherSuiteCollection GetSsl3SupportedCiphers()
}
internal Mono.Security.Protocol.Tls.ClientContext : Context {
private SslClientStream sslStream
private short clientHelloProtocol
public SslClientStream SslStream
public short ClientHelloProtocol
public SslClientStream get_SslStream()
public short get_ClientHelloProtocol()
public void set_ClientHelloProtocol(short value)
public void .ctor(SslClientStream stream, SecurityProtocolType securityProtocolType, string targetHost, X509CertificateCollection clientCertificates)
public void Clear()
}
internal Mono.Security.Protocol.Tls.ClientRecordProtocol : RecordProtocol {
public void .ctor(Stream innerStream, ClientContext context)
public HandshakeMessage GetMessage(HandshakeType type)
protected void ProcessHandshakeMessage(TlsStream handMsg)
private HandshakeMessage createClientHandshakeMessage(HandshakeType type)
private HandshakeMessage createServerHandshakeMessage(HandshakeType type, Byte[] buffer)
}
internal Mono.Security.Protocol.Tls.ClientSessionCache : object {
private Hashtable cache
private object locker
public void Add(string host, Byte[] id)
public Byte[] FromHost(string host)
private ClientSessionInfo FromContext(Context context, bool checkValidity)
public bool SetContextInCache(Context context)
public bool SetContextFromCache(Context context)
}
internal Mono.Security.Protocol.Tls.ClientSessionInfo : object {
private int DefaultValidityInterval
private int ValidityInterval
private bool disposed
private DateTime validuntil
private string host
private Byte[] sid
private Byte[] masterSecret
public string HostName
public Byte[] Id
public bool Valid
public void .ctor(string hostname, Byte[] id)
protected void Finalize()
public string get_HostName()
public Byte[] get_Id()
public bool get_Valid()
public void GetContext(Context context)
public void SetContext(Context context)
public void KeepAlive()
public void Dispose()
private void Dispose(bool disposing)
private void CheckDisposed()
}
internal Mono.Security.Protocol.Tls.ContentType : Enum {
public byte value__
public ContentType ChangeCipherSpec
public ContentType Alert
public ContentType Handshake
public ContentType ApplicationData
}
internal Mono.Security.Protocol.Tls.Context : object {
internal short MAX_FRAGMENT_SIZE
internal short TLS1_PROTOCOL_CODE
internal short SSL3_PROTOCOL_CODE
internal long UNIX_BASE_TICKS
private SecurityProtocolType securityProtocol
private Byte[] sessionId
private SecurityCompressionType compressionMethod
private TlsServerSettings serverSettings
private TlsClientSettings clientSettings
private SecurityParameters current
private SecurityParameters negotiating
private SecurityParameters read
private SecurityParameters write
private CipherSuiteCollection supportedCiphers
private HandshakeType lastHandshakeMsg
private HandshakeState handshakeState
private bool abbreviatedHandshake
private bool receivedConnectionEnd
private bool sentConnectionEnd
private bool protocolNegotiated
private ulong writeSequenceNumber
private ulong readSequenceNumber
private Byte[] clientRandom
private Byte[] serverRandom
private Byte[] randomCS
private Byte[] randomSC
private Byte[] masterSecret
private Byte[] clientWriteKey
private Byte[] serverWriteKey
private Byte[] clientWriteIV
private Byte[] serverWriteIV
private TlsStream handshakeMessages
private RandomNumberGenerator random
private RecordProtocol recordProtocol
public bool AbbreviatedHandshake
public bool ProtocolNegotiated
public SecurityProtocolType SecurityProtocol
public SecurityProtocolType SecurityProtocolFlags
public short Protocol
public Byte[] SessionId
public SecurityCompressionType CompressionMethod
public TlsServerSettings ServerSettings
public TlsClientSettings ClientSettings
public HandshakeType LastHandshakeMsg
public HandshakeState HandshakeState
public bool ReceivedConnectionEnd
public bool SentConnectionEnd
public CipherSuiteCollection SupportedCiphers
public TlsStream HandshakeMessages
public ulong WriteSequenceNumber
public ulong ReadSequenceNumber
public Byte[] ClientRandom
public Byte[] ServerRandom
public Byte[] RandomCS
public Byte[] RandomSC
public Byte[] MasterSecret
public Byte[] ClientWriteKey
public Byte[] ServerWriteKey
public Byte[] ClientWriteIV
public Byte[] ServerWriteIV
public RecordProtocol RecordProtocol
public SecurityParameters Current
public SecurityParameters Negotiating
public SecurityParameters Read
public SecurityParameters Write
public bool get_AbbreviatedHandshake()
public void set_AbbreviatedHandshake(bool value)
public bool get_ProtocolNegotiated()
public void set_ProtocolNegotiated(bool value)
public SecurityProtocolType get_SecurityProtocol()
public void set_SecurityProtocol(SecurityProtocolType value)
public SecurityProtocolType get_SecurityProtocolFlags()
public short get_Protocol()
public Byte[] get_SessionId()
public void set_SessionId(Byte[] value)
public SecurityCompressionType get_CompressionMethod()
public void set_CompressionMethod(SecurityCompressionType value)
public TlsServerSettings get_ServerSettings()
public TlsClientSettings get_ClientSettings()
public HandshakeType get_LastHandshakeMsg()
public void set_LastHandshakeMsg(HandshakeType value)
public HandshakeState get_HandshakeState()
public void set_HandshakeState(HandshakeState value)
public bool get_ReceivedConnectionEnd()
public void set_ReceivedConnectionEnd(bool value)
public bool get_SentConnectionEnd()
public void set_SentConnectionEnd(bool value)
public CipherSuiteCollection get_SupportedCiphers()
public void set_SupportedCiphers(CipherSuiteCollection value)
public TlsStream get_HandshakeMessages()
public ulong get_WriteSequenceNumber()
public void set_WriteSequenceNumber(ulong value)
public ulong get_ReadSequenceNumber()
public void set_ReadSequenceNumber(ulong value)
public Byte[] get_ClientRandom()
public void set_ClientRandom(Byte[] value)
public Byte[] get_ServerRandom()
public void set_ServerRandom(Byte[] value)
public Byte[] get_RandomCS()
public void set_RandomCS(Byte[] value)
public Byte[] get_RandomSC()
public void set_RandomSC(Byte[] value)
public Byte[] get_MasterSecret()
public void set_MasterSecret(Byte[] value)
public Byte[] get_ClientWriteKey()
public void set_ClientWriteKey(Byte[] value)
public Byte[] get_ServerWriteKey()
public void set_ServerWriteKey(Byte[] value)
public Byte[] get_ClientWriteIV()
public void set_ClientWriteIV(Byte[] value)
public Byte[] get_ServerWriteIV()
public void set_ServerWriteIV(Byte[] value)
public RecordProtocol get_RecordProtocol()
public void set_RecordProtocol(RecordProtocol value)
public void .ctor(SecurityProtocolType securityProtocolType)
public int GetUnixTime()
public Byte[] GetSecureRandomBytes(int count)
public void Clear()
public void ClearKeyInfo()
public SecurityProtocolType DecodeProtocolCode(short code)
public void ChangeProtocol(short protocol)
public SecurityParameters get_Current()
public SecurityParameters get_Negotiating()
public SecurityParameters get_Read()
public SecurityParameters get_Write()
public void StartSwitchingSecurityParameters(bool client)
public void EndSwitchingSecurityParameters(bool client)
}
internal Mono.Security.Protocol.Tls.DebugHelper : object {
private bool isInitialized
public void Initialize()
public void WriteLine(string format, Object[] args)
public void WriteLine(string message)
public void WriteLine(string message, Byte[] buffer)
public void WriteBuffer(Byte[] buffer)
public void WriteBuffer(Byte[] buffer, int index, int length)
}
public Mono.Security.Protocol.Tls.ExchangeAlgorithmType : Enum {
public int value__
public ExchangeAlgorithmType DiffieHellman
public ExchangeAlgorithmType Fortezza
public ExchangeAlgorithmType None
public ExchangeAlgorithmType RsaKeyX
public ExchangeAlgorithmType RsaSign
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsClientCertificate : HandshakeMessage {
private bool clientCertSelected
private X509Certificate clientCert
public X509Certificate ClientCertificate
public void .ctor(Context context)
public X509Certificate get_ClientCertificate()
public void Update()
private void GetClientCertificate()
private void SendCertificates()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
private X509Certificate FindParentCertificate(X509Certificate cert)
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsClientCertificateVerify : HandshakeMessage {
public void .ctor(Context context)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
private RSA getClientCertRSA(RSA privKey)
private Byte[] getUnsignedBigInteger(Byte[] integer)
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsClientFinished : HandshakeMessage {
private Byte[] Ssl3Marker
public void .ctor(Context context)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsClientHello : HandshakeMessage {
private Byte[] random
public void .ctor(Context context)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsClientKeyExchange : HandshakeMessage {
public void .ctor(Context context)
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
public void ProcessCommon(bool sendLength)
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsServerCertificate : HandshakeMessage {
private X509CertificateCollection certificates
public void .ctor(Context context, Byte[] buffer)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
private bool checkCertificateUsage(X509Certificate cert)
private void VerifyOSX(X509CertificateCollection certificates)
private void validateCertificates(X509CertificateCollection certificates)
private bool checkServerIdentity(X509Certificate cert)
private bool checkDomainName(string subjectName)
private bool Match(string hostname, string pattern)
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsServerCertificateRequest : HandshakeMessage {
private ClientCertificateType[] certificateTypes
private String[] distinguisedNames
public void .ctor(Context context, Byte[] buffer)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsServerFinished : HandshakeMessage {
private Byte[] Ssl3Marker
public void .ctor(Context context, Byte[] buffer)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsServerHello : HandshakeMessage {
private SecurityCompressionType compressionMethod
private Byte[] random
private Byte[] sessionId
private CipherSuite cipherSuite
public void .ctor(Context context, Byte[] buffer)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
private void processProtocol(short protocol)
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsServerHelloDone : HandshakeMessage {
public void .ctor(Context context, Byte[] buffer)
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Client.TlsServerKeyExchange : HandshakeMessage {
private RSAParameters rsaParams
private Byte[] signedParams
public void .ctor(Context context, Byte[] buffer)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
private void verifySignature()
}
internal Mono.Security.Protocol.Tls.Handshake.ClientCertificateType : Enum {
public int value__
public ClientCertificateType RSA
public ClientCertificateType DSS
public ClientCertificateType RSAFixed
public ClientCertificateType DSSFixed
public ClientCertificateType Unknown
}
internal Mono.Security.Protocol.Tls.Handshake.HandshakeMessage : TlsStream {
private Context context
private HandshakeType handshakeType
private ContentType contentType
private Byte[] cache
public Context Context
public HandshakeType HandshakeType
public ContentType ContentType
public Context get_Context()
public HandshakeType get_HandshakeType()
public ContentType get_ContentType()
public void .ctor(Context context, HandshakeType handshakeType)
public void .ctor(Context context, HandshakeType handshakeType, ContentType contentType)
public void .ctor(Context context, HandshakeType handshakeType, Byte[] data)
protected void ProcessAsTls1()
protected void ProcessAsSsl3()
public void Process()
public void Update()
public Byte[] EncodeMessage()
public bool Compare(Byte[] buffer1, Byte[] buffer2)
}
internal Mono.Security.Protocol.Tls.Handshake.HandshakeType : Enum {
public byte value__
public HandshakeType HelloRequest
public HandshakeType ClientHello
public HandshakeType ServerHello
public HandshakeType Certificate
public HandshakeType ServerKeyExchange
public HandshakeType CertificateRequest
public HandshakeType ServerHelloDone
public HandshakeType CertificateVerify
public HandshakeType ClientKeyExchange
public HandshakeType Finished
public HandshakeType None
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsClientCertificate : HandshakeMessage {
private X509CertificateCollection clientCertificates
public void .ctor(Context context, Byte[] buffer)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
private bool checkCertificateUsage(X509Certificate cert)
private void validateCertificates(X509CertificateCollection certificates)
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsClientCertificateVerify : HandshakeMessage {
public void .ctor(Context context, Byte[] buffer)
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsClientFinished : HandshakeMessage {
public void .ctor(Context context, Byte[] buffer)
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsClientHello : HandshakeMessage {
private Byte[] random
private Byte[] sessionId
private Int16[] cipherSuites
private Byte[] compressionMethods
public void .ctor(Context context, Byte[] buffer)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
private void processProtocol(short protocol)
private void selectCipherSuite()
private void selectCompressionMethod()
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsClientKeyExchange : HandshakeMessage {
public void .ctor(Context context, Byte[] buffer)
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsServerCertificate : HandshakeMessage {
public void .ctor(Context context)
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsServerCertificateRequest : HandshakeMessage {
public void .ctor(Context context)
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsServerFinished : HandshakeMessage {
private Byte[] Ssl3Marker
public void .ctor(Context context)
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsServerHello : HandshakeMessage {
private int unixTime
private Byte[] random
public void .ctor(Context context)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsServerHelloDone : HandshakeMessage {
public void .ctor(Context context)
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
}
internal Mono.Security.Protocol.Tls.Handshake.Server.TlsServerKeyExchange : HandshakeMessage {
public void .ctor(Context context)
public void Update()
protected void ProcessAsSsl3()
protected void ProcessAsTls1()
private Byte[] createSignature(RSA rsa, Byte[] buffer)
}
internal Mono.Security.Protocol.Tls.HandshakeState : Enum {
public int value__
public HandshakeState None
public HandshakeState Started
public HandshakeState Finished
}
public Mono.Security.Protocol.Tls.HashAlgorithmType : Enum {
public int value__
public HashAlgorithmType Md5
public HashAlgorithmType None
public HashAlgorithmType Sha1
}
internal Mono.Security.Protocol.Tls.HttpsClientStream : SslClientStream {
private HttpWebRequest _request
private int _status
public bool TrustFailure
public void .ctor(Stream stream, X509CertificateCollection clientCertificates, HttpWebRequest request, Byte[] buffer)
public bool get_TrustFailure()
internal bool RaiseServerCertificateValidation(X509Certificate certificate, Int32[] certificateErrors)
}
public Mono.Security.Protocol.Tls.PrivateKeySelectionCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public AsymmetricAlgorithm Invoke(X509Certificate certificate, string targetHost)
public IAsyncResult BeginInvoke(X509Certificate certificate, string targetHost, AsyncCallback callback, object object)
public AsymmetricAlgorithm EndInvoke(IAsyncResult result)
}
internal Mono.Security.Protocol.Tls.RecordProtocol : object {
private ManualResetEvent record_processing
protected Stream innerStream
protected Context context
public Context Context
public Context get_Context()
public void set_Context(Context value)
public void .ctor(Stream innerStream, Context context)
public void SendRecord(HandshakeType type)
protected void ProcessHandshakeMessage(TlsStream handMsg)
protected void ProcessChangeCipherSpec()
public HandshakeMessage GetMessage(HandshakeType type)
public IAsyncResult BeginReceiveRecord(Stream record, AsyncCallback callback, object state)
private void InternalReceiveRecordCallback(IAsyncResult asyncResult)
public Byte[] EndReceiveRecord(IAsyncResult asyncResult)
public Byte[] ReceiveRecord(Stream record)
private Byte[] ReadRecordBuffer(int contentType, Stream record)
private Byte[] ReadClientHelloV2(Stream record)
private Byte[] ReadStandardRecordBuffer(Stream record)
private void ProcessAlert(AlertLevel alertLevel, AlertDescription alertDesc)
public void SendAlert(AlertDescription description)
public void SendAlert(AlertLevel level, AlertDescription description)
public void SendAlert(Alert alert)
public void SendChangeCipherSpec()
public IAsyncResult BeginSendRecord(HandshakeType handshakeType, AsyncCallback callback, object state)
private void InternalSendRecordCallback(IAsyncResult ar)
public IAsyncResult BeginSendRecord(ContentType contentType, Byte[] recordData, AsyncCallback callback, object state)
public void EndSendRecord(IAsyncResult asyncResult)
public void SendRecord(ContentType contentType, Byte[] recordData)
public Byte[] EncodeRecord(ContentType contentType, Byte[] recordData)
public Byte[] EncodeRecord(ContentType contentType, Byte[] recordData, int offset, int count)
private Byte[] encryptRecordFragment(ContentType contentType, Byte[] fragment)
private Byte[] decryptRecordFragment(ContentType contentType, Byte[] fragment)
private bool Compare(Byte[] array1, Byte[] array2)
private void ProcessCipherSpecV2Buffer(SecurityProtocolType protocol, Byte[] buffer)
private CipherSuite MapV2CipherCode(string prefix, int code)
}
internal Mono.Security.Protocol.Tls.RSASslSignatureDeformatter : AsymmetricSignatureDeformatter {
private RSA key
private HashAlgorithm hash
public void .ctor(AsymmetricAlgorithm key)
public bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature)
public void SetHashAlgorithm(string strName)
public void SetKey(AsymmetricAlgorithm key)
}
internal Mono.Security.Protocol.Tls.RSASslSignatureFormatter : AsymmetricSignatureFormatter {
private RSA key
private HashAlgorithm hash
public void .ctor(AsymmetricAlgorithm key)
public Byte[] CreateSignature(Byte[] rgbHash)
public void SetHashAlgorithm(string strName)
public void SetKey(AsymmetricAlgorithm key)
}
public Mono.Security.Protocol.Tls.SecurityCompressionType : Enum {
public int value__
public SecurityCompressionType None
public SecurityCompressionType Zlib
}
internal Mono.Security.Protocol.Tls.SecurityParameters : object {
private CipherSuite cipher
private Byte[] clientWriteMAC
private Byte[] serverWriteMAC
public CipherSuite Cipher
public Byte[] ClientWriteMAC
public Byte[] ServerWriteMAC
public CipherSuite get_Cipher()
public void set_Cipher(CipherSuite value)
public Byte[] get_ClientWriteMAC()
public void set_ClientWriteMAC(Byte[] value)
public Byte[] get_ServerWriteMAC()
public void set_ServerWriteMAC(Byte[] value)
public void Clear()
}
public Mono.Security.Protocol.Tls.SecurityProtocolType : Enum {
public int value__
public SecurityProtocolType Default
public SecurityProtocolType Ssl2
public SecurityProtocolType Ssl3
public SecurityProtocolType Tls
}
internal Mono.Security.Protocol.Tls.ServerContext : Context {
private SslServerStream sslStream
private bool request_client_certificate
private bool clientCertificateRequired
public SslServerStream SslStream
public bool ClientCertificateRequired
public bool RequestClientCertificate
public SslServerStream get_SslStream()
public bool get_ClientCertificateRequired()
public bool get_RequestClientCertificate()
public void .ctor(SslServerStream stream, SecurityProtocolType securityProtocolType, X509Certificate serverCertificate, bool clientCertificateRequired, bool requestClientCertificate)
}
internal Mono.Security.Protocol.Tls.ServerRecordProtocol : RecordProtocol {
public void .ctor(Stream innerStream, ServerContext context)
public HandshakeMessage GetMessage(HandshakeType type)
protected void ProcessHandshakeMessage(TlsStream handMsg)
private HandshakeMessage createClientHandshakeMessage(HandshakeType type, Byte[] buffer)
private HandshakeMessage createServerHandshakeMessage(HandshakeType type)
}
internal Mono.Security.Protocol.Tls.SslCipherSuite : CipherSuite {
private Byte[] pad1
private Byte[] pad2
private int MacHeaderLength
private Byte[] header
public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize)
public Byte[] ComputeServerRecordMAC(ContentType contentType, Byte[] fragment)
public Byte[] ComputeClientRecordMAC(ContentType contentType, Byte[] fragment)
public void ComputeMasterSecret(Byte[] preMasterSecret)
public void ComputeKeys()
private Byte[] prf(Byte[] secret, string label, Byte[] random)
}
public Mono.Security.Protocol.Tls.SslClientStream : SslStreamBase {
private CertificateValidationCallback ServerCertValidation
private CertificateSelectionCallback ClientCertSelection
private PrivateKeySelectionCallback PrivateKeySelection
private CertificateValidationCallback2 ServerCertValidation2
internal Stream InputBuffer
public X509CertificateCollection ClientCertificates
public X509Certificate SelectedClientCertificate
public CertificateValidationCallback ServerCertValidationDelegate
public CertificateSelectionCallback ClientCertSelectionDelegate
public PrivateKeySelectionCallback PrivateKeyCertSelectionDelegate
internal bool HaveRemoteValidation2Callback
internal void add_ServerCertValidation(CertificateValidationCallback value)
internal void remove_ServerCertValidation(CertificateValidationCallback value)
internal void add_ClientCertSelection(CertificateSelectionCallback value)
internal void remove_ClientCertSelection(CertificateSelectionCallback value)
internal void add_PrivateKeySelection(PrivateKeySelectionCallback value)
internal void remove_PrivateKeySelection(PrivateKeySelectionCallback value)
internal Stream get_InputBuffer()
public X509CertificateCollection get_ClientCertificates()
public X509Certificate get_SelectedClientCertificate()
public CertificateValidationCallback get_ServerCertValidationDelegate()
public void set_ServerCertValidationDelegate(CertificateValidationCallback value)
public CertificateSelectionCallback get_ClientCertSelectionDelegate()
public void set_ClientCertSelectionDelegate(CertificateSelectionCallback value)
public PrivateKeySelectionCallback get_PrivateKeyCertSelectionDelegate()
public void set_PrivateKeyCertSelectionDelegate(PrivateKeySelectionCallback value)
public void add_ServerCertValidation2(CertificateValidationCallback2 value)
public void remove_ServerCertValidation2(CertificateValidationCallback2 value)
public void .ctor(Stream stream, string targetHost, bool ownsStream)
public void .ctor(Stream stream, string targetHost, X509Certificate clientCertificate)
public void .ctor(Stream stream, string targetHost, X509CertificateCollection clientCertificates)
public void .ctor(Stream stream, string targetHost, bool ownsStream, SecurityProtocolType securityProtocolType)
public void .ctor(Stream stream, string targetHost, bool ownsStream, SecurityProtocolType securityProtocolType, X509CertificateCollection clientCertificates)
protected void Finalize()
protected void Dispose(bool disposing)
internal IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state)
private void SafeReceiveRecord(Stream s)
internal void OnNegotiateHandshakeCallback(IAsyncResult asyncResult)
internal X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates)
internal bool get_HaveRemoteValidation2Callback()
internal ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection)
internal bool OnRemoteCertificateValidation(X509Certificate certificate, Int32[] errors)
internal bool RaiseServerCertificateValidation(X509Certificate certificate, Int32[] certificateErrors)
internal ValidationResult RaiseServerCertificateValidation2(X509CertificateCollection collection)
internal X509Certificate RaiseClientCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates)
internal AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost)
internal AsymmetricAlgorithm RaisePrivateKeySelection(X509Certificate certificate, string targetHost)
}
internal Mono.Security.Protocol.Tls.SslHandshakeHash : HashAlgorithm {
private HashAlgorithm md5
private HashAlgorithm sha
private bool hashing
private Byte[] secret
private Byte[] innerPadMD5
private Byte[] outerPadMD5
private Byte[] innerPadSHA
private Byte[] outerPadSHA
public void .ctor(Byte[] secret)
public void Initialize()
protected Byte[] HashFinal()
protected void HashCore(Byte[] array, int ibStart, int cbSize)
public Byte[] CreateSignature(RSA rsa)
public bool VerifySignature(RSA rsa, Byte[] rgbSignature)
private void initializePad()
}
public Mono.Security.Protocol.Tls.SslServerStream : SslStreamBase {
private CertificateValidationCallback ClientCertValidation
private PrivateKeySelectionCallback PrivateKeySelection
private CertificateValidationCallback2 ClientCertValidation2
public X509Certificate ClientCertificate
public CertificateValidationCallback ClientCertValidationDelegate
public PrivateKeySelectionCallback PrivateKeyCertSelectionDelegate
internal bool HaveRemoteValidation2Callback
internal void add_ClientCertValidation(CertificateValidationCallback value)
internal void remove_ClientCertValidation(CertificateValidationCallback value)
internal void add_PrivateKeySelection(PrivateKeySelectionCallback value)
internal void remove_PrivateKeySelection(PrivateKeySelectionCallback value)
public X509Certificate get_ClientCertificate()
public CertificateValidationCallback get_ClientCertValidationDelegate()
public void set_ClientCertValidationDelegate(CertificateValidationCallback value)
public PrivateKeySelectionCallback get_PrivateKeyCertSelectionDelegate()
public void set_PrivateKeyCertSelectionDelegate(PrivateKeySelectionCallback value)
public void add_ClientCertValidation2(CertificateValidationCallback2 value)
public void remove_ClientCertValidation2(CertificateValidationCallback2 value)
public void .ctor(Stream stream, X509Certificate serverCertificate)
public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool ownsStream)
public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool requestClientCertificate, bool ownsStream)
public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool ownsStream, SecurityProtocolType securityProtocolType)
public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool requestClientCertificate, bool ownsStream, SecurityProtocolType securityProtocolType)
protected void Finalize()
protected void Dispose(bool disposing)
internal IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state)
internal void OnNegotiateHandshakeCallback(IAsyncResult asyncResult)
internal X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates)
internal bool OnRemoteCertificateValidation(X509Certificate certificate, Int32[] errors)
internal bool get_HaveRemoteValidation2Callback()
internal ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection)
internal bool RaiseClientCertificateValidation(X509Certificate certificate, Int32[] certificateErrors)
internal AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost)
internal AsymmetricAlgorithm RaisePrivateKeySelection(X509Certificate certificate, string targetHost)
}
public Mono.Security.Protocol.Tls.SslStreamBase : Stream {
private ManualResetEvent record_processing
private int WaitTimeOut
internal Stream innerStream
internal MemoryStream inputBuffer
internal Context context
internal RecordProtocol protocol
internal bool ownsStream
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed
private bool checkCertRevocationStatus
private object negotiate
private object read
private object write
private ManualResetEvent negotiationComplete
private Byte[] recbuf
private MemoryStream recordStream
internal bool MightNeedHandshake
internal bool HaveRemoteValidation2Callback
public bool CheckCertRevocationStatus
public CipherAlgorithmType CipherAlgorithm
public int CipherStrength
public HashAlgorithmType HashAlgorithm
public int HashStrength
public int KeyExchangeStrength
public ExchangeAlgorithmType KeyExchangeAlgorithm
public SecurityProtocolType SecurityProtocol
public X509Certificate ServerCertificate
internal X509CertificateCollection ServerCertificates
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
protected void .ctor(Stream stream, bool ownsStream)
private void AsyncHandshakeCallback(IAsyncResult asyncResult)
internal bool get_MightNeedHandshake()
internal void NegotiateHandshake()
internal IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state)
internal void OnNegotiateHandshakeCallback(IAsyncResult asyncResult)
internal X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates)
internal bool OnRemoteCertificateValidation(X509Certificate certificate, Int32[] errors)
internal ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection)
internal bool get_HaveRemoteValidation2Callback()
internal AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost)
internal X509Certificate RaiseLocalCertificateSelection(X509CertificateCollection certificates, X509Certificate remoteCertificate, string targetHost, X509CertificateCollection requestedCertificates)
internal bool RaiseRemoteCertificateValidation(X509Certificate certificate, Int32[] errors)
internal ValidationResult RaiseRemoteCertificateValidation2(X509CertificateCollection collection)
internal AsymmetricAlgorithm RaiseLocalPrivateKeySelection(X509Certificate certificate, string targetHost)
public bool get_CheckCertRevocationStatus()
public void set_CheckCertRevocationStatus(bool value)
public CipherAlgorithmType get_CipherAlgorithm()
public int get_CipherStrength()
public HashAlgorithmType get_HashAlgorithm()
public int get_HashStrength()
public int get_KeyExchangeStrength()
public ExchangeAlgorithmType get_KeyExchangeAlgorithm()
public SecurityProtocolType get_SecurityProtocol()
public X509Certificate get_ServerCertificate()
internal X509CertificateCollection get_ServerCertificates()
private bool BeginNegotiateHandshake(InternalAsyncResult asyncResult)
private void EndNegotiateHandshake(InternalAsyncResult asyncResult)
public IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
private void InternalBeginRead(InternalAsyncResult asyncResult)
private void InternalReadCallback(IAsyncResult result)
private void InternalBeginWrite(InternalAsyncResult asyncResult)
private void InternalWriteCallback(IAsyncResult ar)
public IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public int EndRead(IAsyncResult asyncResult)
public void EndWrite(IAsyncResult asyncResult)
public void Close()
public void Flush()
public int Read(Byte[] buffer)
public int Read(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer)
public void Write(Byte[] buffer, int offset, int count)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
protected void Finalize()
protected void Dispose(bool disposing)
private void resetBuffer()
internal void checkDisposed()
}
internal Mono.Security.Protocol.Tls.TlsCipherSuite : CipherSuite {
private int MacHeaderLength
private Byte[] header
private object headerLock
public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize)
public Byte[] ComputeServerRecordMAC(ContentType contentType, Byte[] fragment)
public Byte[] ComputeClientRecordMAC(ContentType contentType, Byte[] fragment)
public void ComputeMasterSecret(Byte[] preMasterSecret)
public void ComputeKeys()
}
internal Mono.Security.Protocol.Tls.TlsClientSettings : object {
private string targetHost
private X509CertificateCollection certificates
private X509Certificate clientCertificate
private RSAManaged certificateRSA
public string TargetHost
public X509CertificateCollection Certificates
public X509Certificate ClientCertificate
public RSAManaged CertificateRSA
public string get_TargetHost()
public void set_TargetHost(string value)
public X509CertificateCollection get_Certificates()
public void set_Certificates(X509CertificateCollection value)
public X509Certificate get_ClientCertificate()
public void set_ClientCertificate(X509Certificate value)
public RSAManaged get_CertificateRSA()
public void UpdateCertificateRSA()
}
internal Mono.Security.Protocol.Tls.TlsException : Exception {
private Alert alert
public Alert Alert
public Alert get_Alert()
internal void .ctor(string message)
internal void .ctor(SerializationInfo info, StreamingContext context)
internal void .ctor(string message, Exception ex)
internal void .ctor(AlertLevel level, AlertDescription description)
internal void .ctor(AlertLevel level, AlertDescription description, string message)
internal void .ctor(AlertDescription description)
internal void .ctor(AlertDescription description, string message)
}
internal Mono.Security.Protocol.Tls.TlsServerSettings : object {
private X509CertificateCollection certificates
private RSA certificateRSA
private RSAParameters rsaParameters
private Byte[] signedParams
private String[] distinguisedNames
private bool serverKeyExchange
private bool certificateRequest
private ClientCertificateType[] certificateTypes
public bool ServerKeyExchange
public X509CertificateCollection Certificates
public RSA CertificateRSA
public RSAParameters RsaParameters
public Byte[] SignedParams
public bool CertificateRequest
public ClientCertificateType[] CertificateTypes
public String[] DistinguisedNames
public bool get_ServerKeyExchange()
public void set_ServerKeyExchange(bool value)
public X509CertificateCollection get_Certificates()
public void set_Certificates(X509CertificateCollection value)
public RSA get_CertificateRSA()
public RSAParameters get_RsaParameters()
public void set_RsaParameters(RSAParameters value)
public Byte[] get_SignedParams()
public void set_SignedParams(Byte[] value)
public bool get_CertificateRequest()
public void set_CertificateRequest(bool value)
public ClientCertificateType[] get_CertificateTypes()
public void set_CertificateTypes(ClientCertificateType[] value)
public String[] get_DistinguisedNames()
public void set_DistinguisedNames(String[] value)
public void UpdateCertificateRSA()
}
internal Mono.Security.Protocol.Tls.TlsStream : Stream {
private bool canRead
private bool canWrite
private MemoryStream buffer
private Byte[] temp
private int temp_size
public bool EOF
public bool CanWrite
public bool CanRead
public bool CanSeek
public long Position
public long Length
public bool get_EOF()
public bool get_CanWrite()
public bool get_CanRead()
public bool get_CanSeek()
public long get_Position()
public void set_Position(long value)
public long get_Length()
public void .ctor(Byte[] data)
private Byte[] ReadSmallValue(int length)
public byte ReadByte()
public short ReadInt16()
public int ReadInt24()
public int ReadInt32()
public Byte[] ReadBytes(int count)
public void Write(byte value)
public void Write(short value)
public void WriteInt24(int value)
public void Write(int value)
public void Write(ulong value)
public void Write(Byte[] buffer)
public void Reset()
public Byte[] ToArray()
public void Flush()
public void SetLength(long length)
public long Seek(long offset, SeekOrigin loc)
public int Read(Byte[] buffer, int offset, int count)
public void Write(Byte[] buffer, int offset, int count)
}
public Mono.Security.Protocol.Tls.ValidationResult : object {
private bool trusted
private bool user_denied
private int error_code
public bool Trusted
public bool UserDenied
public int ErrorCode
public void .ctor(bool trusted, bool user_denied, int error_code)
public bool get_Trusted()
public bool get_UserDenied()
public int get_ErrorCode()
}
internal Mono.Xml.XPath.DTMXPathAttributeNode2 : ValueType {
public int OwnerElement
public int NextAttribute
public int LocalName
public int NamespaceURI
public int Prefix
public int Value
public int LineNumber
public int LinePosition
}
internal Mono.Xml.XPath.DTMXPathDocument2 : object {
private XPathNavigator root
internal XmlNameTable NameTable
internal DTMXPathLinkedNode2[] Nodes
internal DTMXPathAttributeNode2[] Attributes
internal DTMXPathNamespaceNode2[] Namespaces
internal String[] AtomicStringPool
internal String[] NonAtomicStringPool
internal Hashtable IdTable
public void .ctor(XmlNameTable nameTable, DTMXPathLinkedNode2[] nodes, DTMXPathAttributeNode2[] attributes, DTMXPathNamespaceNode2[] namespaces, String[] atomicStringPool, String[] nonAtomicStringPool, Hashtable idTable)
public XPathNavigator CreateNavigator()
}
internal Mono.Xml.XPath.DTMXPathDocumentBuilder2 : object {
private XmlReader xmlReader
private XmlValidatingReader validatingReader
private XmlSpace xmlSpace
private XmlNameTable nameTable
private IXmlLineInfo lineInfo
private int nodeCapacity
private int attributeCapacity
private int nsCapacity
private DTMXPathLinkedNode2[] nodes
private DTMXPathAttributeNode2[] attributes
private DTMXPathNamespaceNode2[] namespaces
private String[] atomicStringPool
private int atomicIndex
private String[] nonAtomicStringPool
private int nonAtomicIndex
private Hashtable idTable
private int nodeIndex
private int attributeIndex
private int nsIndex
private bool hasAttributes
private bool hasLocalNs
private int attrIndexAtStart
private int nsIndexAtStart
private int lastNsInScope
private bool skipRead
private Int32[] parentStack
private int parentStackIndex
public void .ctor(string url)
public void .ctor(string url, XmlSpace space)
public void .ctor(string url, XmlSpace space, int defaultCapacity)
public void .ctor(XmlReader reader)
public void .ctor(XmlReader reader, XmlSpace space)
public void .ctor(XmlReader reader, XmlSpace space, int defaultCapacity)
private void Init(XmlReader reader, XmlSpace space, int defaultCapacity)
public DTMXPathDocument2 CreateDocument()
public void Compile()
public void Read()
private void ProcessElement(int parent, int previousSibling)
private void PrepareStartElement(int previousSibling)
private void AdjustLastNsInScope(int target)
private void WriteStartElement(int parent, int previousSibling)
private void CloseStartElement()
private void ProcessNamespace(string prefix, string ns)
private void ProcessAttribute(string prefix, string localName, string ns, string value)
private int AtomicIndex(string s)
private int NonAtomicIndex(string s)
private void SetNodeArrayLength(int size)
private void SetAttributeArrayLength(int size)
private void SetNsArrayLength(int size)
public void AddNode(int parent, int firstAttribute, int previousSibling, XPathNodeType nodeType, int baseUri, bool isEmptyElement, int localName, int ns, int prefix, int value, int xmlLang, int namespaceNode, int lineNumber, int linePosition)
public void AddAttribute(int ownerElement, int localName, int ns, int prefix, int value, int lineNumber, int linePosition)
public void AddNsNode(int declaredElement, int name, int ns, int nextNs)
}
internal Mono.Xml.XPath.DTMXPathDocumentWriter2 : XmlWriter {
private XmlNameTable nameTable
private int nodeCapacity
private int attributeCapacity
private int nsCapacity
private DTMXPathLinkedNode2[] nodes
private DTMXPathAttributeNode2[] attributes
private DTMXPathNamespaceNode2[] namespaces
private String[] atomicStringPool
private int atomicIndex
private String[] nonAtomicStringPool
private int nonAtomicIndex
private Hashtable idTable
private int nodeIndex
private int attributeIndex
private int nsIndex
private Int32[] parentStack
private int parentStackIndex
private bool hasAttributes
private bool hasLocalNs
private int attrIndexAtStart
private int nsIndexAtStart
private int lastNsInScope
private int prevSibling
private WriteState state
private bool openNamespace
private bool isClosed
public string XmlLang
public XmlSpace XmlSpace
public WriteState WriteState
public void .ctor(XmlNameTable nt, int defaultCapacity)
public DTMXPathDocument2 CreateDocument()
public void Init()
private int GetParentIndex()
private int GetPreviousSiblingIndex()
private void UpdateTreeForAddition()
private void CloseStartElement()
private int AtomicIndex(string s)
private int NonAtomicIndex(string s)
private void SetNodeArrayLength(int size)
private void SetAttributeArrayLength(int size)
private void SetNsArrayLength(int size)
public void AddNode(int parent, int firstAttribute, int previousSibling, XPathNodeType nodeType, string baseUri, bool isEmptyElement, string localName, string ns, string prefix, string value, string xmlLang, int namespaceNode, int lineNumber, int linePosition)
public void AddAttribute(int ownerElement, string localName, string ns, string prefix, string value, int lineNumber, int linePosition)
public void AddNsNode(int declaredElement, string name, string ns, int nextNs)
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public WriteState get_WriteState()
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public void WriteCData(string data)
private void AddTextNode(string data)
private void CheckTopLevelNode()
public void WriteComment(string data)
public void WriteProcessingInstruction(string name, string data)
public void WriteWhitespace(string data)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteStartElement(string prefix, string localName, string ns)
private void WriteStartElement(int parent, int previousSibling, string prefix, string localName, string ns)
private void PrepareStartElement(int previousSibling)
public void WriteEndElement()
public void WriteFullEndElement()
private void WriteEndElement(bool full)
public void WriteStartAttribute(string prefix, string localName, string ns)
private void ProcessNamespace(string prefix, string ns)
private void ProcessAttribute(string prefix, string localName, string ns, string value)
public void WriteEndAttribute()
public void WriteString(string text)
public void WriteRaw(string data)
public void WriteRaw(Char[] data, int start, int len)
public void WriteName(string name)
public void WriteNmToken(string name)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteCharEntity(char c)
public void WriteDocType(string name, string pub, string sys, string intSubset)
public void WriteEntityRef(string name)
public void WriteQualifiedName(string localName, string ns)
public void WriteSurrogateCharEntity(char high, char low)
private bool IsWhitespace(string data)
}
internal Mono.Xml.XPath.DTMXPathLinkedNode2 : ValueType {
public int FirstChild
public int Parent
public int PreviousSibling
public int NextSibling
public int FirstAttribute
public int FirstNamespace
public XPathNodeType NodeType
public int BaseURI
public bool IsEmptyElement
public int LocalName
public int NamespaceURI
public int Prefix
public int Value
public int XmlLang
public int LineNumber
public int LinePosition
}
internal Mono.Xml.XPath.DTMXPathNamespaceNode2 : ValueType {
public int DeclaredElement
public int NextNamespace
public int Name
public int Namespace
}
internal Mono.Xml.XPath.SeekableDTMXPathNavigator2 : SeekableXPathNavigator {
private DTMXPathDocument2 document
private bool currentIsNode
private bool currentIsAttr
private int currentNode
private int currentAttr
private int currentNs
public long CurrentPosition
private XmlNameTable nameTable
private DTMXPathLinkedNode2[] nodes
private DTMXPathAttributeNode2[] attributes
private DTMXPathNamespaceNode2[] namespaces
private String[] atomicStringPool
private String[] nonAtomicStringPool
private Hashtable idTable
public string BaseURI
public bool HasAttributes
public bool HasChildren
public bool IsEmptyElement
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XPathNodeType NodeType
public string Prefix
public string Value
public string XmlLang
public void .ctor(DTMXPathDocument2 document)
public void .ctor(SeekableDTMXPathNavigator2 org)
public long get_CurrentPosition()
public void set_CurrentPosition(long value)
public XPathNodeType GetNodeType(long nodePosition)
public string GetLocalName(long nodePosition)
public string GetName(long nodePosition)
public string GetNamespace(long nodePosition)
public string GetValue(long nodePosition)
private int GetOwnerPosition(long position)
public XmlNodeOrder ComparePosition(long firstPosition, long secondPosition)
private XmlNameTable get_nameTable()
private DTMXPathLinkedNode2[] get_nodes()
private DTMXPathAttributeNode2[] get_attributes()
private DTMXPathNamespaceNode2[] get_namespaces()
private String[] get_atomicStringPool()
private String[] get_nonAtomicStringPool()
private Hashtable get_idTable()
public string get_BaseURI()
public bool get_HasAttributes()
public bool get_HasChildren()
public bool get_IsEmptyElement()
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XPathNodeType get_NodeType()
public string get_Prefix()
public string get_Value()
private void BuildValue(int iter, StringBuilder& valueBuilder)
public string get_XmlLang()
public XPathNavigator Clone()
public XmlNodeOrder ComparePosition(XPathNavigator nav)
private int findAttribute(string localName, string namespaceURI)
public string GetAttribute(string localName, string namespaceURI)
public string GetNamespace(string name)
private bool System.Xml.IXmlLineInfo.HasLineInfo()
public bool IsDescendant(XPathNavigator nav)
public bool IsSamePosition(XPathNavigator other)
public bool MoveTo(XPathNavigator other)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirst()
public bool MoveToFirstAttribute()
public bool MoveToFirstChild()
private bool moveToSpecifiedNamespace(int cur, XPathNamespaceScope namespaceScope)
public bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToId(string id)
private void moveToNamespace(int nsNode)
public bool MoveToNamespace(string name)
public bool MoveToNext()
public bool MoveToNextAttribute()
public bool MoveToNextNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToParent()
public bool MoveToPrevious()
public void MoveToRoot()
}
internal Mono.Xml.XPath.XmlNamespaces : object {
public string XML
public string XMLNS
public int IndexXML
public int IndexXMLNS
}
public System.Collections.Generic.KeyedByTypeCollection`1 : KeyedCollection`2<Type, TItem> {
public void .ctor(IEnumerable`1<TItem> items)
protected Type GetKeyForItem(TItem item)
public T Find()
public Collection`1<T> FindAll()
protected void InsertItem(int index, TItem item)
protected void SetItem(int index, TItem item)
public T Remove()
public Collection`1<T> RemoveAll()
}
public System.Collections.Generic.SynchronizedCollection`1 : object {
private object root
private List`1<T> list
public int Count
public T Item
public object SyncRoot
protected List`1<T> Items
private bool System.Collections.Generic.ICollection<T>.IsReadOnly
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
public void .ctor(object syncRoot)
public void .ctor(object syncRoot, IEnumerable`1<T> list)
public void .ctor(object syncRoot, T[] list)
public void .ctor(object syncRoot, List`1<T> list, bool makeCopy)
public int get_Count()
public T get_Item(int index)
public void set_Item(int index, T value)
public object get_SyncRoot()
protected List`1<T> get_Items()
public void Add(T item)
public void Clear()
public bool Contains(T item)
public void CopyTo(T[] array, int index)
public IEnumerator`1<T> GetEnumerator()
public int IndexOf(T item)
public void Insert(int index, T item)
public bool Remove(T item)
public void RemoveAt(int index)
protected void ClearItems()
protected void InsertItem(int index, T item)
protected void RemoveItem(int index)
protected void SetItem(int index, T item)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.IList.Add(object value)
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
}
public System.Collections.Generic.SynchronizedKeyedCollection`2 : SynchronizedCollection`1<T> {
private Dictionary`2<K, T> dict
public T Item
protected IDictionary`2<K, T> Dictionary
protected void .ctor(object syncRoot)
protected void .ctor(object syncRoot, IEqualityComparer`1<K> comparer)
protected void .ctor(object syncRoot, IEqualityComparer`1<K> comparer, int dictionaryCreationThreshold)
public T get_Item(K key)
protected IDictionary`2<K, T> get_Dictionary()
public bool Contains(K key)
public bool Remove(K key)
protected void ChangeItemKey(T item, K newKey)
protected void ClearItems()
protected K GetKeyForItem(T item)
protected void InsertItem(int index, T item)
protected void RemoveItem(int index)
protected void SetItem(int index, T item)
}
public System.Collections.Generic.SynchronizedReadOnlyCollection`1 : object {
private List`1<T> l
private object sync_root
public int Count
public T Item
protected IList`1<T> Items
private bool System.Collections.Generic.ICollection<T>.IsReadOnly
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private T System.Collections.Generic.IList<T>.Item
private object System.Collections.IList.Item
public void .ctor(object syncRoot)
public void .ctor(object syncRoot, IEnumerable`1<T> list)
public void .ctor(object syncRoot, T[] list)
public void .ctor(object sync_root, List`1<T> list, bool make_copy)
public bool Contains(T value)
public void CopyTo(T[] array, int index)
public IEnumerator`1<T> GetEnumerator()
public int IndexOf(T value)
private void System.Collections.Generic.ICollection<T>.Add(T value)
private void System.Collections.Generic.ICollection<T>.Clear()
private bool System.Collections.Generic.ICollection<T>.Remove(T value)
private void System.Collections.Generic.IList<T>.Insert(int index, T value)
private void System.Collections.Generic.IList<T>.RemoveAt(int index)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
public int get_Count()
public T get_Item(int index)
protected IList`1<T> get_Items()
private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private T System.Collections.Generic.IList<T>.get_Item(int index)
private void System.Collections.Generic.IList<T>.set_Item(int index, T value)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
}
public System.IO.PipeException : IOException {
public int ErrorCode
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception inner)
public void .ctor(string message, int errorCode)
public int get_ErrorCode()
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
public System.ServiceModel.ActionNotSupportedException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute : Attribute {
private AspNetCompatibilityRequirementsMode requirements_mode
public AspNetCompatibilityRequirementsMode RequirementsMode
public AspNetCompatibilityRequirementsMode get_RequirementsMode()
public void set_RequirementsMode(AspNetCompatibilityRequirementsMode value)
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase)
}
public System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode : Enum {
public int value__
public AspNetCompatibilityRequirementsMode NotAllowed
public AspNetCompatibilityRequirementsMode Allowed
public AspNetCompatibilityRequirementsMode Required
}
public System.ServiceModel.Activation.Configuration.DiagnosticSection : ConfigurationSection {
public bool PerformanceCountersEnabled
public bool get_PerformanceCountersEnabled()
public void set_PerformanceCountersEnabled(bool value)
}
public System.ServiceModel.Activation.Configuration.NetPipeSection : ConfigurationSection {
public SecurityIdentifierElementCollection AllowAccounts
public int MaxPendingAccepts
public int MaxPendingConnections
public TimeSpan ReceiveTimeout
public SecurityIdentifierElementCollection get_AllowAccounts()
public int get_MaxPendingAccepts()
public void set_MaxPendingAccepts(int value)
public int get_MaxPendingConnections()
public void set_MaxPendingConnections(int value)
public TimeSpan get_ReceiveTimeout()
public void set_ReceiveTimeout(TimeSpan value)
}
public System.ServiceModel.Activation.Configuration.NetTcpSection : ConfigurationSection {
public SecurityIdentifierElementCollection AllowAccounts
public int ListenBacklog
public int MaxPendingAccepts
public int MaxPendingConnections
public TimeSpan ReceiveTimeout
public bool TeredoEnabled
public SecurityIdentifierElementCollection get_AllowAccounts()
public int get_ListenBacklog()
public void set_ListenBacklog(int value)
public int get_MaxPendingAccepts()
public void set_MaxPendingAccepts(int value)
public int get_MaxPendingConnections()
public void set_MaxPendingConnections(int value)
public TimeSpan get_ReceiveTimeout()
public void set_ReceiveTimeout(TimeSpan value)
public bool get_TeredoEnabled()
public void set_TeredoEnabled(bool value)
}
public System.ServiceModel.Activation.Configuration.SecurityIdentifierElement : ConfigurationElement {
public SecurityIdentifier SecurityIdentifier
public void .ctor(SecurityIdentifier sid)
public SecurityIdentifier get_SecurityIdentifier()
public void set_SecurityIdentifier(SecurityIdentifier value)
}
public System.ServiceModel.Activation.Configuration.SecurityIdentifierElementCollection : ServiceModelConfigurationElementCollection`1<SecurityIdentifierElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup : ConfigurationSectionGroup {
public DiagnosticSection Diagnostics
public NetPipeSection NetPipe
public NetTcpSection NetTcp
public DiagnosticSection get_Diagnostics()
public NetPipeSection get_NetPipe()
public NetTcpSection get_NetTcp()
public ServiceModelActivationSectionGroup GetSectionGroup(Configuration config)
}
public System.ServiceModel.Activation.HostedTransportConfiguration : object {
public Uri[] GetBaseAddresses(string virtualPath)
}
public System.ServiceModel.Activation.ServiceHostFactoryBase : object {
public ServiceHostBase CreateServiceHost(string constructorString, Uri[] baseAddresses)
}
public System.ServiceModel.Activation.VirtualPathExtension : object {
private string <VirtualPath>k__BackingField
public string VirtualPath
public string ApplicationVirtualPath
public string SiteName
internal void .ctor(string virtualPath)
public void Attach(ServiceHostBase owner)
public void Detach(ServiceHostBase owner)
public string get_VirtualPath()
private void set_VirtualPath(string value)
public string get_ApplicationVirtualPath()
public string get_SiteName()
}
public System.ServiceModel.AddressAccessDeniedException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.AddressAlreadyInUseException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.AddressFilterMode : Enum {
public int value__
public AddressFilterMode Exact
public AddressFilterMode Prefix
public AddressFilterMode Any
}
public System.ServiceModel.AuditLevel : Enum {
public int value__
public AuditLevel None
public AuditLevel Success
public AuditLevel Failure
public AuditLevel SuccessOrFailure
}
public System.ServiceModel.AuditLogLocation : Enum {
public int value__
public AuditLogLocation Default
public AuditLogLocation Application
public AuditLogLocation Security
}
public System.ServiceModel.BasicHttpBinding : HttpBindingBase {
private WSMessageEncoding message_encoding
private BasicHttpSecurity security
public WSMessageEncoding MessageEncoding
public string Scheme
public BasicHttpSecurity Security
public bool EnableHttpCookieContainer
public void .ctor(string configurationName)
public void .ctor(BasicHttpSecurityMode securityMode)
public WSMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(WSMessageEncoding value)
public string get_Scheme()
public BasicHttpSecurity get_Security()
public void set_Security(BasicHttpSecurity value)
public BindingElementCollection CreateBindingElements()
private SecurityBindingElement CreateSecurityBindingElement()
private MessageEncodingBindingElement BuildMessageEncodingBindingElement()
private TransportBindingElement GetTransport()
public bool get_EnableHttpCookieContainer()
public void set_EnableHttpCookieContainer(bool value)
public bool ShouldSerializeEnableHttpCookieContainer()
public bool ShouldSerializeSecurity()
}
public System.ServiceModel.BasicHttpContextBinding : BasicHttpBinding {
public bool ContextManagementEnabled
public void .ctor(BasicHttpSecurityMode securityMode)
public void .ctor(string configName)
public bool get_ContextManagementEnabled()
public void set_ContextManagementEnabled(bool value)
}
public System.ServiceModel.BasicHttpMessageCredentialType : Enum {
public int value__
public BasicHttpMessageCredentialType UserName
public BasicHttpMessageCredentialType Certificate
}
public System.ServiceModel.BasicHttpMessageSecurity : object {
private SecurityAlgorithmSuite alg
private BasicHttpMessageCredentialType ctype
public SecurityAlgorithmSuite AlgorithmSuite
public BasicHttpMessageCredentialType ClientCredentialType
public SecurityAlgorithmSuite get_AlgorithmSuite()
public void set_AlgorithmSuite(SecurityAlgorithmSuite value)
public BasicHttpMessageCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(BasicHttpMessageCredentialType value)
public bool ShouldSerializeAlgorithmSuite()
public bool ShouldSerializeClientCredentialType()
}
public System.ServiceModel.BasicHttpsBinding : HttpBindingBase {
private WSMessageEncoding message_encoding
private BasicHttpsSecurity security
public WSMessageEncoding MessageEncoding
public string Scheme
public BasicHttpsSecurity Security
public void .ctor(string configurationName)
public void .ctor(BasicHttpsSecurityMode securityMode)
public WSMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(WSMessageEncoding value)
public string get_Scheme()
public BasicHttpsSecurity get_Security()
public void set_Security(BasicHttpsSecurity value)
public BindingElementCollection CreateBindingElements()
private SecurityBindingElement CreateSecurityBindingElement()
private MessageEncodingBindingElement BuildMessageEncodingBindingElement()
private TransportBindingElement GetTransport()
public bool ShouldSerializeSecurity()
}
public System.ServiceModel.BasicHttpSecurity : object {
private BasicHttpMessageSecurity message
private BasicHttpSecurityMode mode
private HttpTransportSecurity transport
public BasicHttpMessageSecurity Message
public BasicHttpSecurityMode Mode
public HttpTransportSecurity Transport
internal void .ctor(BasicHttpSecurityMode mode)
public BasicHttpMessageSecurity get_Message()
public void set_Message(BasicHttpMessageSecurity value)
public BasicHttpSecurityMode get_Mode()
public void set_Mode(BasicHttpSecurityMode value)
public HttpTransportSecurity get_Transport()
public void set_Transport(HttpTransportSecurity value)
public bool ShouldSerializeMessage()
public bool ShouldSerializeTransport()
}
public System.ServiceModel.BasicHttpSecurityMode : Enum {
public int value__
public BasicHttpSecurityMode None
public BasicHttpSecurityMode Transport
public BasicHttpSecurityMode Message
public BasicHttpSecurityMode TransportWithMessageCredential
public BasicHttpSecurityMode TransportCredentialOnly
}
public System.ServiceModel.BasicHttpsSecurity : object {
private BasicHttpMessageSecurity message
private BasicHttpsSecurityMode mode
private HttpTransportSecurity transport
public BasicHttpMessageSecurity Message
public BasicHttpsSecurityMode Mode
public HttpTransportSecurity Transport
internal void .ctor(BasicHttpsSecurityMode mode)
public BasicHttpMessageSecurity get_Message()
public BasicHttpsSecurityMode get_Mode()
public void set_Mode(BasicHttpsSecurityMode value)
public HttpTransportSecurity get_Transport()
public void set_Transport(HttpTransportSecurity value)
public void set_Message(BasicHttpMessageSecurity value)
public bool ShouldSerializeMessage()
public bool ShouldSerializeTransport()
}
public System.ServiceModel.BasicHttpsSecurityMode : Enum {
public int value__
public BasicHttpsSecurityMode Transport
public BasicHttpsSecurityMode TransportWithMessageCredential
}
public System.ServiceModel.CacheSetting : Enum {
public int value__
public CacheSetting AlwaysOff
public CacheSetting AlwaysOn
public CacheSetting Default
}
public System.ServiceModel.CallbackBehaviorAttribute : Attribute {
private bool <AutomaticSessionShutdown>k__BackingField
private ConcurrencyMode <ConcurrencyMode>k__BackingField
private bool <IgnoreExtensionDataObject>k__BackingField
private bool <IncludeExceptionDetailInFaults>k__BackingField
private int <MaxItemsInObjectGraph>k__BackingField
private IsolationLevel <TransactionIsolationLevel>k__BackingField
private string <TransactionTimeout>k__BackingField
private bool <UseSynchronizationContext>k__BackingField
private bool <ValidateMustUnderstand>k__BackingField
public bool AutomaticSessionShutdown
public ConcurrencyMode ConcurrencyMode
public bool IgnoreExtensionDataObject
public bool IncludeExceptionDetailInFaults
public int MaxItemsInObjectGraph
public IsolationLevel TransactionIsolationLevel
public string TransactionTimeout
public bool UseSynchronizationContext
public bool ValidateMustUnderstand
public bool get_AutomaticSessionShutdown()
public void set_AutomaticSessionShutdown(bool value)
public ConcurrencyMode get_ConcurrencyMode()
public void set_ConcurrencyMode(ConcurrencyMode value)
public bool get_IgnoreExtensionDataObject()
public void set_IgnoreExtensionDataObject(bool value)
public bool get_IncludeExceptionDetailInFaults()
public void set_IncludeExceptionDetailInFaults(bool value)
public int get_MaxItemsInObjectGraph()
public void set_MaxItemsInObjectGraph(int value)
public IsolationLevel get_TransactionIsolationLevel()
public void set_TransactionIsolationLevel(IsolationLevel value)
public string get_TransactionTimeout()
public void set_TransactionTimeout(string value)
public bool get_UseSynchronizationContext()
public void set_UseSynchronizationContext(bool value)
public bool get_ValidateMustUnderstand()
public void set_ValidateMustUnderstand(bool value)
private void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher dispatcher)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime behavior)
private void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint)
}
public System.ServiceModel.ChannelFactory : CommunicationObject {
private ServiceEndpoint service_endpoint
private IChannelFactory factory
private List`1<IClientChannel> opened_channels
private Action`1<TimeSpan> close_delegate
private Action`1<TimeSpan> open_delegate
internal IChannelFactory OpenedChannelFactory
internal List`1<IClientChannel> OpenedChannels
public ServiceEndpoint Endpoint
public ClientCredentials Credentials
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
internal IChannelFactory get_OpenedChannelFactory()
private void set_OpenedChannelFactory(IChannelFactory value)
internal List`1<IClientChannel> get_OpenedChannels()
public ServiceEndpoint get_Endpoint()
public ClientCredentials get_Credentials()
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
protected void ApplyConfiguration(string configurationName)
private void ApplyBehavior(string behaviorConfig)
protected IChannelFactory CreateFactory()
private BindingParameterCollection CreateBindingParameters()
protected ServiceEndpoint CreateDescription()
private void System.IDisposable.Dispose()
public T GetProperty()
protected void EnsureOpened()
protected void InitializeEndpoint(string configurationName, EndpointAddress address)
protected void InitializeEndpoint(Binding binding, EndpointAddress address)
protected void InitializeEndpoint(ServiceEndpoint endpoint)
protected void OnAbort()
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
protected void OnOpening()
protected void OnOpened()
}
public System.ServiceModel.ChannelFactory`1 : ChannelFactory {
private object <OwnerClientBase>k__BackingField
internal object OwnerClientBase
protected void .ctor(Type channelType)
public void .ctor(string endpointConfigurationName)
public void .ctor(string endpointConfigurationName, EndpointAddress remoteAddress)
public void .ctor(ServiceEndpoint endpoint)
public void .ctor(Binding binding, string remoteAddress)
public void .ctor(Binding binding)
public void .ctor(Binding binding, EndpointAddress remoteAddress)
internal object get_OwnerClientBase()
internal void set_OwnerClientBase(object value)
public TChannel CreateChannel()
public TChannel CreateChannel(EndpointAddress address)
private TChannel CreateChannelCore(ChannelFactory`1<TChannel> cf, Func`2<ChannelFactory`1<TChannel>, TChannel> f)
public TChannel CreateChannel(Binding binding, EndpointAddress endpointAddress)
public TChannel CreateChannel(Binding binding, EndpointAddress endpointAddress, Uri via)
public TChannel CreateChannel(EndpointAddress address, Uri via)
protected TChannel CreateChannel(string endpointConfigurationName)
protected ServiceEndpoint CreateDescription()
public TChannel CreateChannelWithActAsToken(SecurityToken actAsToken)
public TChannel CreateChannelWithActAsToken(SecurityToken actAsToken, EndpointAddress address)
public TChannel CreateChannelWithActAsToken(SecurityToken actAsToken, EndpointAddress address, Uri via)
public TChannel CreateChannelWithIssuedToken(SecurityToken issuedToken)
public TChannel CreateChannelWithIssuedToken(SecurityToken issuedToken, EndpointAddress address)
public TChannel CreateChannelWithIssuedToken(SecurityToken issuedToken, EndpointAddress address, Uri via)
public TChannel CreateChannelWithOnBehalfOfToken(SecurityToken onBehalfOf)
public TChannel CreateChannelWithOnBehalfOfToken(SecurityToken onBehalfOf, EndpointAddress address)
public TChannel CreateChannelWithOnBehalfOfToken(SecurityToken onBehalfOf, EndpointAddress address, Uri via)
}
public System.ServiceModel.Channels.AddressHeader : object {
public string Name
public string Namespace
public AddressHeader CreateAddressHeader(object value)
public AddressHeader CreateAddressHeader(object value, XmlObjectSerializer serializer)
public AddressHeader CreateAddressHeader(string name, string ns, object value)
public AddressHeader CreateAddressHeader(string name, string ns, object value, XmlObjectSerializer serializer)
public bool Equals(object obj)
public XmlDictionaryReader GetAddressHeaderReader()
public int GetHashCode()
public T GetValue()
public T GetValue(XmlObjectSerializer serializer)
protected void OnWriteAddressHeaderContents(XmlDictionaryWriter writer)
protected void OnWriteStartAddressHeader(XmlDictionaryWriter writer)
public MessageHeader ToMessageHeader()
public void WriteAddressHeader(XmlDictionaryWriter writer)
public void WriteAddressHeader(XmlWriter writer)
public void WriteAddressHeaderContents(XmlDictionaryWriter writer)
public void WriteStartAddressHeader(XmlDictionaryWriter writer)
public string get_Name()
public string get_Namespace()
}
public System.ServiceModel.Channels.AddressHeaderCollection : ReadOnlyCollection`1<AddressHeader> {
private AddressHeader[] empty
private IList`1<AddressHeader> GetList(IEnumerable`1<AddressHeader> arg)
public void .ctor(IEnumerable`1<AddressHeader> addressHeaders)
public void AddHeadersTo(Message message)
public AddressHeader FindHeader(string name, string ns)
public AddressHeader[] FindAll(string name, string ns)
}
public System.ServiceModel.Channels.AddressingVersion : object {
private string name
private string address
private string fault_ns
private AddressingVersion addressing200408
private AddressingVersion addressing1_0
private AddressingVersion none
public AddressingVersion WSAddressing10
public AddressingVersion WSAddressingAugust2004
public AddressingVersion None
internal string Namespace
internal string FaultNamespace
internal string ActionNotSupported
private void .ctor(string name, string address, string faultNS)
public AddressingVersion get_WSAddressing10()
public AddressingVersion get_WSAddressingAugust2004()
public AddressingVersion get_None()
internal string get_Namespace()
internal string get_FaultNamespace()
internal string get_ActionNotSupported()
public string ToString()
}
public System.ServiceModel.Channels.ApplicationContainerSettings : object {
public int CurrentSession
public int ServiceSession
public string PackageFullName
public int SessionId
public string get_PackageFullName()
public void set_PackageFullName(string value)
public int get_SessionId()
public void set_SessionId(int value)
}
public System.ServiceModel.Channels.AsymmetricSecurityBindingElement : SecurityBindingElement {
private MessageProtectionOrder msg_protection_order
private SecurityTokenParameters initiator_token_params
private SecurityTokenParameters recipient_token_params
private bool allow_serialized_sign
private bool require_sig_confirm
public bool AllowSerializedSigningTokenOnReply
public MessageProtectionOrder MessageProtectionOrder
public SecurityTokenParameters InitiatorTokenParameters
public SecurityTokenParameters RecipientTokenParameters
public bool RequireSignatureConfirmation
public void .ctor(SecurityTokenParameters recipientTokenParameters)
public void .ctor(SecurityTokenParameters recipientTokenParameters, SecurityTokenParameters initiatorTokenParameters)
private void .ctor(AsymmetricSecurityBindingElement other)
public bool get_AllowSerializedSigningTokenOnReply()
public void set_AllowSerializedSigningTokenOnReply(bool value)
public MessageProtectionOrder get_MessageProtectionOrder()
public void set_MessageProtectionOrder(MessageProtectionOrder value)
public SecurityTokenParameters get_InitiatorTokenParameters()
public void set_InitiatorTokenParameters(SecurityTokenParameters value)
public SecurityTokenParameters get_RecipientTokenParameters()
public void set_RecipientTokenParameters(SecurityTokenParameters value)
public bool get_RequireSignatureConfirmation()
public void set_RequireSignatureConfirmation(bool value)
public void SetKeyDerivation(bool requireDerivedKeys)
public string ToString()
protected IChannelFactory`1<TChannel> BuildChannelFactoryCore(BindingContext context)
protected IChannelListener`1<TChannel> BuildChannelListenerCore(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
private AsymmetricSecurityCapabilities GetCapabilities()
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext policyContext)
}
internal System.ServiceModel.Channels.AttributeCollection : List`1<AttributeInfo> {
public void .ctor(AttributeCollection copy)
}
internal System.ServiceModel.Channels.AttributeInfo : object {
public string Prefix
public string Name
public string Namespace
public string Value
}
internal System.ServiceModel.Channels.BinaryMessageEncoder : MessageEncoder {
private BinaryMessageEncoderFactory owner
private bool session
private XmlBinaryReaderSession <CurrentReaderSession>k__BackingField
private XmlBinaryWriterSession <CurrentWriterSession>k__BackingField
internal bool UseSession
public string ContentType
public string MediaType
public MessageVersion MessageVersion
internal XmlBinaryReaderSession CurrentReaderSession
internal XmlBinaryWriterSession CurrentWriterSession
public void .ctor(BinaryMessageEncoderFactory owner, bool session)
internal bool get_UseSession()
public string get_ContentType()
public string get_MediaType()
public MessageVersion get_MessageVersion()
public Message ReadMessage(ArraySegment`1<byte> buffer, BufferManager bufferManager, string contentType)
internal XmlBinaryReaderSession get_CurrentReaderSession()
internal void set_CurrentReaderSession(XmlBinaryReaderSession value)
internal XmlBinaryWriterSession get_CurrentWriterSession()
internal void set_CurrentWriterSession(XmlBinaryWriterSession value)
public Message ReadMessage(Stream stream, int maxSizeOfHeaders, string contentType)
public void WriteMessage(Message message, Stream stream)
public ArraySegment`1<byte> WriteMessage(Message message, int maxMessageSize, BufferManager bufferManager, int messageOffset)
}
internal System.ServiceModel.Channels.BinaryMessageEncoderFactory : MessageEncoderFactory {
private BinaryMessageEncodingBindingElement owner
private BinaryMessageEncoder encoder
public BinaryMessageEncodingBindingElement Owner
public MessageEncoder Encoder
public MessageVersion MessageVersion
public void .ctor(BinaryMessageEncodingBindingElement owner)
public BinaryMessageEncodingBindingElement get_Owner()
public MessageEncoder get_Encoder()
public MessageVersion get_MessageVersion()
public MessageEncoder CreateSessionEncoder()
}
public System.ServiceModel.Channels.BinaryMessageEncodingBindingElement : MessageEncodingBindingElement {
private int max_session_size
private int max_read_pool_size
private int max_write_pool_size
private XmlDictionaryReaderQuotas quotas
private MessageVersion version
public MessageVersion MessageVersion
public int MaxSessionSize
public int MaxReadPoolSize
public int MaxWritePoolSize
public XmlDictionaryReaderQuotas ReaderQuotas
public CompressionFormat CompressionFormat
private void .ctor(BinaryMessageEncodingBindingElement other)
public MessageVersion get_MessageVersion()
public void set_MessageVersion(MessageVersion value)
public int get_MaxSessionSize()
public void set_MaxSessionSize(int value)
public int get_MaxReadPoolSize()
public void set_MaxReadPoolSize(int value)
public int get_MaxWritePoolSize()
public void set_MaxWritePoolSize(int value)
public XmlDictionaryReaderQuotas get_ReaderQuotas()
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
public MessageEncoderFactory CreateMessageEncoderFactory()
private void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
public CompressionFormat get_CompressionFormat()
public void set_CompressionFormat(CompressionFormat value)
public bool ShouldSerializeMessageVersion()
public bool ShouldSerializeReaderQuotas()
}
public System.ServiceModel.Channels.Binding : object {
private string name
private string ns
private TimeSpan open_timeout
private TimeSpan close_timeout
private TimeSpan receive_timeout
private TimeSpan send_timeout
public TimeSpan CloseTimeout
public TimeSpan OpenTimeout
public TimeSpan ReceiveTimeout
public TimeSpan SendTimeout
public string Name
public string Namespace
public string Scheme
public MessageVersion MessageVersion
protected void .ctor(string name, string ns)
public TimeSpan get_CloseTimeout()
public void set_CloseTimeout(TimeSpan value)
public TimeSpan get_OpenTimeout()
public void set_OpenTimeout(TimeSpan value)
public TimeSpan get_ReceiveTimeout()
public void set_ReceiveTimeout(TimeSpan value)
public TimeSpan get_SendTimeout()
public void set_SendTimeout(TimeSpan value)
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_Scheme()
public MessageVersion get_MessageVersion()
private BindingContext CreateContext(BindingParameterCollection parameters)
private BindingContext CreateContext(Uri listenUriBaseAddress, string listenUriRelativeAddress, ListenUriMode listenUriMode, BindingParameterCollection parameters)
public IChannelFactory`1<TChannel> BuildChannelFactory(Object[] parameters)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingParameterCollection parameters)
public IChannelListener`1<TChannel> BuildChannelListener(Uri listenUriBaseAddress, string listenUriRelativeAddress, ListenUriMode listenUriMode, Object[] parameters)
public IChannelListener`1<TChannel> BuildChannelListener(Uri listenUriBaseAddress, string listenUriRelativeAddress, ListenUriMode listenUriMode, BindingParameterCollection parameters)
public IChannelListener`1<TChannel> BuildChannelListener(Uri listenUriBaseAddress, Object[] parameters)
public IChannelListener`1<TChannel> BuildChannelListener(Uri listenUriBaseAddress, BindingParameterCollection parameters)
public IChannelListener`1<TChannel> BuildChannelListener(Uri listenUriBaseAddress, string listenUriRelativeAddress, Object[] parameters)
public IChannelListener`1<TChannel> BuildChannelListener(Uri listenUriBaseAddress, string listenUriRelativeAddress, BindingParameterCollection parameters)
public IChannelListener`1<TChannel> BuildChannelListener(Object[] parameters)
public IChannelListener`1<TChannel> BuildChannelListener(BindingParameterCollection parameters)
public bool CanBuildChannelFactory(Object[] parameters)
public bool CanBuildChannelFactory(BindingParameterCollection parameters)
public bool CanBuildChannelListener(Object[] parameters)
public bool CanBuildChannelListener(BindingParameterCollection parameters)
public BindingElementCollection CreateBindingElements()
public T GetProperty(BindingParameterCollection parameters)
private void Initialize()
public bool ShouldSerializeName()
public bool ShouldSerializeNamespace()
}
public System.ServiceModel.Channels.BindingContext : object {
private CustomBinding binding
private BindingParameterCollection parameters
private Uri listen_uri_base
private string listen_uri_relative
private ListenUriMode listen_uri_mode
private BindingElementCollection elements
public CustomBinding Binding
public BindingParameterCollection BindingParameters
public Uri ListenUriBaseAddress
public string ListenUriRelativeAddress
public ListenUriMode ListenUriMode
public BindingElementCollection RemainingBindingElements
public void .ctor(CustomBinding binding, BindingParameterCollection parameters)
public void .ctor(CustomBinding binding, BindingParameterCollection parameters, Uri listenUriBaseAddress, string listenUriRelativeAddress, ListenUriMode listenUriMode)
private void .ctor(CustomBinding binding, BindingParameterCollection parms, BindingElementCollection elems, Uri listenUriBaseAddress, string listenUriRelativeAddress, ListenUriMode listenUriMode)
public CustomBinding get_Binding()
public BindingParameterCollection get_BindingParameters()
public Uri get_ListenUriBaseAddress()
public void set_ListenUriBaseAddress(Uri value)
public string get_ListenUriRelativeAddress()
public void set_ListenUriRelativeAddress(string value)
public ListenUriMode get_ListenUriMode()
public void set_ListenUriMode(ListenUriMode value)
public BindingElementCollection get_RemainingBindingElements()
internal BindingElement DequeueBindingElement()
private BindingElement DequeueBindingElement(bool raiseError)
public IChannelFactory`1<TChannel> BuildInnerChannelFactory()
public IChannelListener`1<TChannel> BuildInnerChannelListener()
public bool CanBuildInnerChannelFactory()
public bool CanBuildInnerChannelListener()
public T GetInnerProperty()
public BindingContext Clone()
}
public System.ServiceModel.Channels.BindingElement : object {
protected void .ctor(BindingElement elementToBeCloned)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public bool CanBuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
}
public System.ServiceModel.Channels.BindingElementCollection : Collection`1<BindingElement> {
public void .ctor(BindingElement[] elements)
public void .ctor(IEnumerable`1<BindingElement> elements)
public void AddRange(BindingElement[] elements)
public BindingElementCollection Clone()
public bool Contains(Type bindingElementType)
public T Find()
public Collection`1<T> FindAll()
public T Remove()
public Collection`1<T> RemoveAll()
protected void InsertItem(int index, BindingElement item)
protected void SetItem(int index, BindingElement item)
}
public System.ServiceModel.Channels.BindingParameterCollection : KeyedByTypeCollection`1<object> {
protected Type GetKeyForItem(object item)
protected void InsertItem(int index, object item)
protected void SetItem(int index, object item)
}
public System.ServiceModel.Channels.BodyWriter : object {
private bool is_buffered
public bool IsBuffered
protected void .ctor(bool isBuffered)
public bool get_IsBuffered()
public BodyWriter CreateBufferedCopy(int maxBufferSize)
public void WriteBodyContents(XmlDictionaryWriter writer)
protected BodyWriter OnCreateBufferedCopy(int maxBufferSize)
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
public IAsyncResult BeginWriteBodyContents(XmlDictionaryWriter writer, AsyncCallback callback, object state)
public void EndWriteBodyContents(IAsyncResult result)
}
public System.ServiceModel.Channels.BufferManager : object {
public void Clear()
public BufferManager CreateBufferManager(long maxBufferPoolSize, int maxBufferSize)
public void ReturnBuffer(Byte[] buffer)
public Byte[] TakeBuffer(int bufferSize)
}
internal System.ServiceModel.Channels.CachingCompiler : object {
private string dynamicBase
private Hashtable compilationTickets
public string cachePrefix
public string cacheTypePrefix
public void InsertTypeFileDep(Type type, string filename)
public void InsertType(Type type, string filename, string key, CacheItemRemovedCallback removed_callback)
public Type GetTypeFromCache(string filename)
internal CompilerParameters GetOptions(ICollection assemblies)
public CompilerResults Compile(string language, string key, string source, string filename, ArrayList assemblies)
public Type CompileAndGetType(ServiceHostParser parser, string key, CacheItemRemovedCallback removed_callback)
private bool AcquireCompilationTicket(string key, Object& ticket)
private void ReleaseCompilationTicket(string key)
}
public System.ServiceModel.Channels.CallbackContextMessageProperty : object {
public EndpointAddress CallbackAddress
public IDictionary`2<string, string> Context
public string Name
public void .ctor(IDictionary`2<string, string> context)
public void .ctor(EndpointAddress callbackAddress)
public void .ctor(EndpointAddress listenAddress, IDictionary`2<string, string> context)
public void .ctor(string listenAddress, IDictionary`2<string, string> context)
public void .ctor(Uri listenAddress, IDictionary`2<string, string> context)
public EndpointAddress get_CallbackAddress()
public IDictionary`2<string, string> get_Context()
public string get_Name()
public void AddOrReplaceInMessage(Message message)
public void AddOrReplaceInMessageProperties(MessageProperties properties)
public EndpointAddress CreateCallbackAddress(Uri listenAddress)
public IMessageProperty CreateCopy()
public void GetListenAddressAndContext(EndpointAddress& listenAddress, IDictionary`2& context)
public bool TryGet(Message message, CallbackContextMessageProperty& contextMessageProperty)
public bool TryGet(MessageProperties properties, CallbackContextMessageProperty& contextMessageProperty)
}
public System.ServiceModel.Channels.ChannelBase : CommunicationObject {
private ChannelManagerBase manager
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
protected internal TimeSpan DefaultReceiveTimeout
protected internal TimeSpan DefaultSendTimeout
protected ChannelManagerBase Manager
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout
protected void .ctor(ChannelManagerBase channelManager)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
protected internal TimeSpan get_DefaultReceiveTimeout()
protected internal TimeSpan get_DefaultSendTimeout()
protected ChannelManagerBase get_Manager()
public T GetProperty()
protected void OnClosed()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_CloseTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_OpenTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_ReceiveTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_SendTimeout()
}
public System.ServiceModel.Channels.ChannelFactoryBase : ChannelManagerBase {
private TimeSpan open_timeout
private TimeSpan close_timeout
private TimeSpan receive_timeout
private TimeSpan send_timeout
private Action`1<TimeSpan> close_delegate
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
protected internal TimeSpan DefaultReceiveTimeout
protected internal TimeSpan DefaultSendTimeout
protected void .ctor(IDefaultCommunicationTimeouts timeouts)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
protected internal TimeSpan get_DefaultReceiveTimeout()
protected internal TimeSpan get_DefaultSendTimeout()
public T GetProperty()
protected void OnAbort()
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
}
public System.ServiceModel.Channels.ChannelFactoryBase`1 : ChannelFactoryBase {
private List`1<TChannel> channels
protected void .ctor(IDefaultCommunicationTimeouts timeouts)
public TChannel CreateChannel(EndpointAddress address)
public TChannel CreateChannel(EndpointAddress address, Uri via)
protected TChannel OnCreateChannel(EndpointAddress address, Uri via)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected void ValidateCreateChannel()
}
public System.ServiceModel.Channels.ChannelListenerBase : ChannelManagerBase {
private IDefaultCommunicationTimeouts timeouts
private KeyedByTypeCollection`1<object> properties
public Uri Uri
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
protected internal TimeSpan DefaultReceiveTimeout
protected internal TimeSpan DefaultSendTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout
internal KeyedByTypeCollection`1<object> Properties
protected void .ctor(IDefaultCommunicationTimeouts timeouts)
public Uri get_Uri()
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
protected internal TimeSpan get_DefaultReceiveTimeout()
protected internal TimeSpan get_DefaultSendTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_CloseTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_OpenTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_ReceiveTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_SendTimeout()
internal KeyedByTypeCollection`1<object> get_Properties()
public T GetProperty()
public IAsyncResult BeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state)
public bool EndWaitForChannel(IAsyncResult result)
public bool WaitForChannel(TimeSpan timeout)
protected IAsyncResult OnBeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state)
protected bool OnEndWaitForChannel(IAsyncResult result)
protected bool OnWaitForChannel(TimeSpan timeout)
}
public System.ServiceModel.Channels.ChannelListenerBase`1 : ChannelListenerBase {
private IDefaultCommunicationTimeouts timeouts
protected void .ctor(IDefaultCommunicationTimeouts timeouts)
public TChannel AcceptChannel()
public TChannel AcceptChannel(TimeSpan timeout)
public IAsyncResult BeginAcceptChannel(AsyncCallback callback, object state)
public IAsyncResult BeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object state)
public TChannel EndAcceptChannel(IAsyncResult result)
protected TChannel OnAcceptChannel(TimeSpan timeout)
protected IAsyncResult OnBeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object state)
protected TChannel OnEndAcceptChannel(IAsyncResult result)
}
public System.ServiceModel.Channels.ChannelManagerBase : CommunicationObject {
protected internal TimeSpan DefaultReceiveTimeout
protected internal TimeSpan DefaultSendTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout
protected internal TimeSpan get_DefaultReceiveTimeout()
protected internal TimeSpan get_DefaultSendTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_OpenTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_CloseTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_ReceiveTimeout()
private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_SendTimeout()
internal MessageEncoder CreateEncoder(MessageEncodingBindingElement mbe)
}
public System.ServiceModel.Channels.ChannelParameterCollection : Collection`1<object> {
private IChannel channel
protected IChannel Channel
public void .ctor(IChannel channel)
protected IChannel get_Channel()
public void PropagateChannelParameters(IChannel innerChannel)
protected void ClearItems()
protected void InsertItem(int index, object item)
protected void RemoveItem(int index)
protected void SetItem(int index, object item)
}
public System.ServiceModel.Channels.ChannelPoolSettings : object {
private TimeSpan idle_timeout
private TimeSpan lease_timeout
private int max_outbound
public TimeSpan IdleTimeout
public TimeSpan LeaseTimeout
public int MaxOutboundChannelsPerEndpoint
internal void .ctor(ChannelPoolSettings other)
public TimeSpan get_IdleTimeout()
public void set_IdleTimeout(TimeSpan value)
public TimeSpan get_LeaseTimeout()
public void set_LeaseTimeout(TimeSpan value)
public int get_MaxOutboundChannelsPerEndpoint()
public void set_MaxOutboundChannelsPerEndpoint(int value)
}
public System.ServiceModel.Channels.ClientWebSocketFactory : object {
public string WebSocketVersion
public string get_WebSocketVersion()
public WebSocket CreateWebSocket(Stream connection, WebSocketTransportSettings settings)
}
public System.ServiceModel.Channels.CommunicationObject : object {
private object mutex
private CommunicationState state
private TimeSpan default_open_timeout
private TimeSpan default_close_timeout
private bool aborted
private EventHandler Closed
private EventHandler Closing
private EventHandler Faulted
private EventHandler Opened
private EventHandler Opening
public CommunicationState State
protected bool IsDisposed
protected object ThisLock
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
protected void .ctor(object mutex)
public void add_Closed(EventHandler value)
public void remove_Closed(EventHandler value)
public void add_Closing(EventHandler value)
public void remove_Closing(EventHandler value)
public void add_Faulted(EventHandler value)
public void remove_Faulted(EventHandler value)
public void add_Opened(EventHandler value)
public void remove_Opened(EventHandler value)
public void add_Opening(EventHandler value)
public void remove_Opening(EventHandler value)
public CommunicationState get_State()
protected bool get_IsDisposed()
protected object get_ThisLock()
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
public void Abort()
protected void Fault()
public IAsyncResult BeginClose(AsyncCallback callback, object state)
public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginOpen(AsyncCallback callback, object state)
public IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
public void Close()
public void Close(TimeSpan timeout)
public void EndClose(IAsyncResult result)
public void EndOpen(IAsyncResult result)
public void Open()
public void Open(TimeSpan timeout)
protected void OnAbort()
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnClose(TimeSpan timeout)
private void ProcessClosing()
protected void OnClosing()
private void ProcessClosed()
protected void OnClosed()
protected void OnEndClose(IAsyncResult result)
protected void OnEndOpen(IAsyncResult result)
private void ProcessFaulted()
protected void OnFaulted()
protected void OnOpen(TimeSpan timeout)
private void ProcessOpened()
protected void OnOpened()
private void ProcessOpening()
protected void OnOpening()
protected void ThrowIfDisposed()
protected void ThrowIfDisposedOrNotOpen()
protected void ThrowIfDisposedOrImmutable()
protected Type GetCommunicationObjectType()
private void <BeginClose>b__35_0(object <p0>, EventArgs <p1>)
}
internal System.ServiceModel.Channels.CompilationException : HtmlizedException {
private string filename
private CompilerErrorCollection errors
private string fileText
private string errmsg
private Int32[] errorLines
public string SourceFile
public string FileName
public string Title
public string Description
public string ErrorMessage
public string FileText
public Int32[] ErrorLines
public bool ErrorLinesPaired
public void .ctor(string filename, CompilerErrorCollection errors, string fileText)
public string get_SourceFile()
public string get_FileName()
public string get_Title()
public string get_Description()
public string get_ErrorMessage()
public string get_FileText()
public Int32[] get_ErrorLines()
public bool get_ErrorLinesPaired()
}
public System.ServiceModel.Channels.CompositeDuplexBindingElement : BindingElement {
private EndpointAddress endpoint
public Uri ClientBaseAddress
private void .ctor(EndpointAddress endpoint)
public Uri get_ClientBaseAddress()
public void set_ClientBaseAddress(Uri value)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
}
public System.ServiceModel.Channels.CompositeDuplexBindingElementImporter : object {
private void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(MetadataImporter importer, PolicyConversionContext context)
}
public System.ServiceModel.Channels.CompressionFormat : Enum {
public int value__
public CompressionFormat None
public CompressionFormat GZip
public CompressionFormat Deflate
}
public System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement : TransportBindingElement {
private int connection_buf_size
private int max_buf_size
private int max_pending_conn
private int max_pending_accepts
private HostNameComparisonMode host_cmp_mode
private TimeSpan max_output_delay
private TimeSpan ch_init_timeout
private TransferMode transfer_mode
public TimeSpan ChannelInitializationTimeout
public int ConnectionBufferSize
public HostNameComparisonMode HostNameComparisonMode
public int MaxBufferSize
public int MaxPendingConnections
public TimeSpan MaxOutputDelay
public int MaxPendingAccepts
public TransferMode TransferMode
internal void .ctor(ConnectionOrientedTransportBindingElement other)
public TimeSpan get_ChannelInitializationTimeout()
public void set_ChannelInitializationTimeout(TimeSpan value)
public int get_ConnectionBufferSize()
public void set_ConnectionBufferSize(int value)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public int get_MaxPendingConnections()
public void set_MaxPendingConnections(int value)
public TimeSpan get_MaxOutputDelay()
public void set_MaxOutputDelay(TimeSpan value)
public int get_MaxPendingAccepts()
public void set_MaxPendingAccepts(int value)
public TransferMode get_TransferMode()
public void set_TransferMode(TransferMode value)
public bool CanBuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public T GetProperty(BindingContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
public bool ShouldSerializeMaxPendingAccepts()
public bool ShouldSerializeMaxPendingConnections()
}
internal System.ServiceModel.Channels.ContentType : object {
private string mediaType
private Dictionary`2<string, string> parameters
private Char[] eq
public string MediaType
public Dictionary`2<string, string> Parameters
public void .ctor(string contentType)
private void Parse(string pair)
public string get_MediaType()
public void set_MediaType(string value)
public Dictionary`2<string, string> get_Parameters()
}
public System.ServiceModel.Channels.ContextBindingElement : BindingElement {
public Uri ClientCallbackAddress
public ContextExchangeMechanism ContextExchangeMechanism
public bool ContextManagementEnabled
public ProtectionLevel ProtectionLevel
public void .ctor(ProtectionLevel protectionLevel)
public void .ctor(ProtectionLevel protectionLevel, ContextExchangeMechanism contextExchangeMechanism)
public void .ctor(ProtectionLevel protectionLevel, ContextExchangeMechanism contextExchangeMechanism, Uri clientCallbackAddress)
public void .ctor(ProtectionLevel protectionLevel, ContextExchangeMechanism contextExchangeMechanism, Uri clientCallbackAddress, bool contextManagementEnabled)
public Uri get_ClientCallbackAddress()
public void set_ClientCallbackAddress(Uri value)
public ContextExchangeMechanism get_ContextExchangeMechanism()
public void set_ContextExchangeMechanism(ContextExchangeMechanism value)
public bool get_ContextManagementEnabled()
public void set_ContextManagementEnabled(bool value)
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public BindingElement Clone()
public void ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
public T GetProperty(BindingContext context)
}
public System.ServiceModel.Channels.ContextBindingElementImporter : object {
public void BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy)
public void ImportContract(WsdlImporter importer, WsdlContractConversionContext context)
public void ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context)
public void ImportPolicy(MetadataImporter importer, PolicyConversionContext context)
}
public System.ServiceModel.Channels.ContextExchangeMechanism : Enum {
public int value__
public ContextExchangeMechanism ContextSoapHeader
public ContextExchangeMechanism HttpCookie
}
public System.ServiceModel.Channels.ContextMessageProperty : object {
public IDictionary`2<string, string> Context
public string Name
public void .ctor(IDictionary`2<string, string> context)
public IDictionary`2<string, string> get_Context()
public string get_Name()
public void AddOrReplaceInMessage(Message message)
public void AddOrReplaceInMessageProperties(MessageProperties properties)
public IMessageProperty CreateCopy()
public bool TryCreateFromHttpCookieHeader(string httpCookieHeader, ContextMessageProperty& context)
public bool TryGet(Message message, ContextMessageProperty& contextMessageProperty)
public bool TryGet(MessageProperties properties, ContextMessageProperty& contextMessageProperty)
}
public System.ServiceModel.Channels.CorrelationCallbackMessageProperty : object {
public bool IsFullyDefined
public string Name
public IEnumerable`1<string> NeededData
public bool get_IsFullyDefined()
public string get_Name()
public IEnumerable`1<string> get_NeededData()
public void AddData(string name, Func`1<string> value)
public IAsyncResult BeginFinalizeCorrelation(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public IMessageProperty CreateCopy()
public Message EndFinalizeCorrelation(IAsyncResult result)
public Message FinalizeCorrelation(Message message, TimeSpan timeout)
public bool TryGet(Message message, CorrelationCallbackMessageProperty& property)
public bool TryGet(MessageProperties properties, CorrelationCallbackMessageProperty& property)
}
public System.ServiceModel.Channels.CorrelationDataDescription : object {
public bool IsDefault
public bool IsOptional
public bool KnownBeforeSend
public string Name
public bool ReceiveValue
public bool SendValue
public bool get_IsDefault()
public bool get_IsOptional()
public bool get_KnownBeforeSend()
public string get_Name()
public bool get_ReceiveValue()
public bool get_SendValue()
}
public System.ServiceModel.Channels.CorrelationDataMessageProperty : object {
public string Name
public string get_Name()
public void Add(string name, Func`1<string> dataProvider)
public void AddData(Message message, string name, Func`1<string> dataProvider)
public IMessageProperty CreateCopy()
public bool Remove(string name)
public bool TryGet(Message message, CorrelationDataMessageProperty& property)
public bool TryGet(MessageProperties properties, CorrelationDataMessageProperty& property)
public bool TryGetValue(string name, String& value)
}
public System.ServiceModel.Channels.CorrelationKey : InstanceKey {
public IDictionary`2<string, string> KeyData
public string KeyString
public string Name
public XNamespace Provider
public XName ScopeName
public void .ctor(IDictionary`2<string, string> keyData, XName scopeName, XNamespace provider)
public IDictionary`2<string, string> get_KeyData()
public string get_KeyString()
public string get_Name()
public void set_Name(string value)
public XNamespace get_Provider()
public XName get_ScopeName()
}
public System.ServiceModel.Channels.CorrelationMessageProperty : object {
public ReadOnlyCollection`1<InstanceKey> AdditionalKeys
public InstanceKey CorrelationKey
public string Name
public ReadOnlyCollection`1<InstanceKey> TransientCorrelations
public void .ctor(InstanceKey correlationKey, IEnumerable`1<InstanceKey> additionalKeys)
public void .ctor(InstanceKey correlationKey, IEnumerable`1<InstanceKey> additionalKeys, IEnumerable`1<InstanceKey> transientCorrelations)
public ReadOnlyCollection`1<InstanceKey> get_AdditionalKeys()
public InstanceKey get_CorrelationKey()
public string get_Name()
public ReadOnlyCollection`1<InstanceKey> get_TransientCorrelations()
public bool TryGet(Message message, CorrelationMessageProperty& property)
public bool TryGet(MessageProperties properties, CorrelationMessageProperty& property)
}
public System.ServiceModel.Channels.CustomBinding : Binding {
private string default_ns
private BindingElementCollection elements
private ISecurityCapabilities security
private string scheme
public BindingElementCollection Elements
public string Scheme
public void .ctor(string configurationName)
public void .ctor(Binding binding)
public void .ctor(BindingElement[] bindingElementsInTopDownChannelStackOrder)
public void .ctor(IEnumerable`1<BindingElement> bindingElementsInTopDownChannelStackOrder)
public void .ctor(string name, string ns, BindingElement[] bindingElementsInTopDownChannelStackOrder)
private void .ctor(IEnumerable`1<BindingElement> binding, string name, string ns)
public BindingElementCollection get_Elements()
public string get_Scheme()
public BindingElementCollection CreateBindingElements()
}
internal System.ServiceModel.Channels.DefaultMessageBuffer : MessageBuffer {
private MessageHeaders headers
private MessageProperties properties
private BodyWriter body
private bool closed
private bool is_fault
private int max_buffer_size
private AttributeCollection attributes
public int BufferSize
internal void .ctor(MessageHeaders headers, MessageProperties properties, AttributeCollection attributes)
internal void .ctor(int maxBufferSize, MessageHeaders headers, MessageProperties properties, BodyWriter body, bool isFault, AttributeCollection attributes)
public void Close()
public Message CreateMessage()
public int get_BufferSize()
}
public System.ServiceModel.Channels.DeliveryFailure : Enum {
public int value__
public DeliveryFailure Unknown
public DeliveryFailure BadDestinationQueue
public DeliveryFailure Purged
public DeliveryFailure ReachQueueTimeout
public DeliveryFailure QueueExceedMaximumSize
public DeliveryFailure AccessDenied
public DeliveryFailure HopCountExceeded
public DeliveryFailure BadSignature
public DeliveryFailure BadEncryption
public DeliveryFailure CouldNotEncrypt
public DeliveryFailure NotTransactionalQueue
public DeliveryFailure NotTransactionalMessage
public DeliveryFailure QueueDeleted
public DeliveryFailure QueuePurged
public DeliveryFailure ReceiveTimeout
}
public System.ServiceModel.Channels.DeliveryStatus : Enum {
public int value__
public DeliveryStatus InDoubt
public DeliveryStatus NotDelivered
}
internal System.ServiceModel.Channels.DuplexChannelBase : ChannelBase {
private ChannelFactoryBase channel_factory_base
private ChannelListenerBase channel_listener_base
private EndpointAddress local_address
private EndpointAddress remote_address
private Uri via
private Action`1<TimeSpan> open_handler
private Action`1<TimeSpan> close_handler
private AsyncSendHandler send_handler
private AsyncReceiveHandler receive_handler
private TryReceiveHandler try_receive_handler
private AsyncWaitForMessageHandler wait_handler
public EndpointAddress LocalAddress
public EndpointAddress RemoteAddress
public Uri Via
public void .ctor(ChannelFactoryBase factory, EndpointAddress remoteAddress, Uri via)
public void .ctor(ChannelListenerBase listener)
public EndpointAddress get_LocalAddress()
public EndpointAddress get_RemoteAddress()
public Uri get_Via()
private void SetupDelegates()
public T GetProperty()
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
public IAsyncResult BeginSend(Message message, AsyncCallback callback, object state)
public IAsyncResult BeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public void EndSend(IAsyncResult result)
public void Send(Message message)
public void Send(Message message, TimeSpan timeout)
public IAsyncResult BeginReceive(AsyncCallback callback, object state)
public IAsyncResult BeginReceive(TimeSpan timeout, AsyncCallback callback, object state)
public Message EndReceive(IAsyncResult result)
public Message Receive()
public Message Receive(TimeSpan timeout)
public IAsyncResult BeginTryReceive(TimeSpan timeout, AsyncCallback callback, object state)
public bool EndTryReceive(IAsyncResult result, Message& message)
public bool TryReceive(TimeSpan timeout, Message& message)
public IAsyncResult BeginWaitForMessage(TimeSpan timeout, AsyncCallback callback, object state)
public bool EndWaitForMessage(IAsyncResult result)
public bool WaitForMessage(TimeSpan timeout)
}
internal System.ServiceModel.Channels.DuplexSessionBase : object {
private AsyncHandler async_method
private string <Id>k__BackingField
public TimeSpan DefaultCloseTimeout
public string Id
public TimeSpan get_DefaultCloseTimeout()
public string get_Id()
private void set_Id(string value)
public void Close(TimeSpan timeout)
public void CloseOutputSession()
public void CloseOutputSession(TimeSpan timeout)
public IAsyncResult BeginCloseOutputSession(AsyncCallback callback, object state)
public IAsyncResult BeginCloseOutputSession(TimeSpan timeout, AsyncCallback callback, object state)
public void EndCloseOutputSession(IAsyncResult result)
}
internal System.ServiceModel.Channels.EmptyMessage : MessageImplBase {
private AttributeCollection empty_attributes
public bool IsEmpty
public void .ctor(MessageVersion version, string action)
public bool get_IsEmpty()
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
protected MessageBuffer OnCreateBufferedCopy(int maxBufferSize)
}
public System.ServiceModel.Channels.FaultConverter : object {
public FaultConverter GetDefaultFaultConverter(MessageVersion version)
protected bool OnTryCreateException(Message message, MessageFault fault, Exception& exception)
protected bool OnTryCreateFaultMessage(Exception exception, Message& message)
public bool TryCreateException(Message message, MessageFault fault, Exception& exception)
public bool TryCreateFaultMessage(Exception exception, Message& message)
}
internal System.ServiceModel.Channels.HtmlizedException : Exception {
public string Title
public string Description
public string ErrorMessage
public string FileName
public string SourceFile
public string FileText
public Int32[] ErrorLines
public bool ErrorLinesPaired
protected void .ctor(string message)
protected void .ctor(string message, Exception inner)
public string get_Title()
public string get_Description()
public string get_ErrorMessage()
public string get_FileName()
public string get_SourceFile()
public string get_FileText()
public Int32[] get_ErrorLines()
public bool get_ErrorLinesPaired()
}
internal System.ServiceModel.Channels.Http.AspNetHttpContextInfo : HttpContextInfo {
private HttpContext ctx
private SvcHttpHandler handler
private AspNetHttpRequestInfo request
private AspNetHttpResponseInfo response
public HttpContext Source
public HttpRequestInfo Request
public HttpResponseInfo Response
public string User
public string Password
public void .ctor(SvcHttpHandler handler, HttpContext ctx)
public HttpContext get_Source()
public HttpRequestInfo get_Request()
public HttpResponseInfo get_Response()
public string get_User()
public string get_Password()
public void ReturnUnauthorized()
protected void OnContextClosed()
}
internal System.ServiceModel.Channels.Http.AspNetHttpListenerManager : HttpListenerManager {
public void .ctor(Uri uri)
public void RegisterListener(ChannelDispatcher channel, HttpTransportBindingElement element, TimeSpan timeout)
public void UnregisterListener(ChannelDispatcher channel, TimeSpan timeout)
}
internal System.ServiceModel.Channels.Http.AspNetHttpRequestInfo : HttpRequestInfo {
private HttpRequest req
public long ContentLength64
public NameValueCollection QueryString
public NameValueCollection Headers
public Uri Url
public string ContentType
public string HttpMethod
public Stream InputStream
public string ClientIPAddress
public int ClientPort
public void .ctor(HttpRequest request)
public long get_ContentLength64()
public NameValueCollection get_QueryString()
public NameValueCollection get_Headers()
public Uri get_Url()
public string get_ContentType()
public string get_HttpMethod()
public Stream get_InputStream()
public string get_ClientIPAddress()
public int get_ClientPort()
}
internal System.ServiceModel.Channels.Http.AspNetHttpResponseInfo : HttpResponseInfo {
private HttpResponse res
public bool SuppressContent
public string ContentType
public NameValueCollection Headers
public int StatusCode
public string StatusDescription
public Stream OutputStream
public void .ctor(HttpResponse response)
public bool get_SuppressContent()
public void set_SuppressContent(bool value)
public string get_ContentType()
public void set_ContentType(string value)
public NameValueCollection get_Headers()
public int get_StatusCode()
public void set_StatusCode(int value)
public string get_StatusDescription()
public void set_StatusDescription(string value)
public Stream get_OutputStream()
public void Abort()
public void Close()
public void SetLength(long value)
}
internal System.ServiceModel.Channels.Http.HttpChannelListener`1 : InternalChannelListenerBase`1<TChannel> {
private HttpListenerManager listener_manager
private ChannelDispatcher <ChannelDispatcher>k__BackingField
private HttpTransportBindingElement <Source>k__BackingField
private ServiceCredentialsSecurityTokenManager <SecurityTokenManager>k__BackingField
private ManualResetEvent accept_channel_handle
public ChannelDispatcher ChannelDispatcher
public HttpTransportBindingElement Source
public HttpListenerManager ListenerManager
public ServiceCredentialsSecurityTokenManager SecurityTokenManager
public void .ctor(HttpTransportBindingElement source, BindingContext context)
public ChannelDispatcher get_ChannelDispatcher()
public void set_ChannelDispatcher(ChannelDispatcher value)
public HttpTransportBindingElement get_Source()
private void set_Source(HttpTransportBindingElement value)
public HttpListenerManager get_ListenerManager()
public ServiceCredentialsSecurityTokenManager get_SecurityTokenManager()
private void set_SecurityTokenManager(ServiceCredentialsSecurityTokenManager value)
protected TChannel OnAcceptChannel(TimeSpan timeout)
protected TChannel CreateChannel(TimeSpan timeout)
private TChannel CreateChannelCore(TimeSpan timeout)
protected bool OnWaitForChannel(TimeSpan timeout)
protected HttpListenerManager GetOrCreateListenerManager()
protected void OnOpen(TimeSpan timeout)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
public bool CancelAsync(TimeSpan timeout)
private void <.ctor>b__1_0(ChannelDispatcher cd)
private void <OnAcceptChannel>b__17_0(object <p0>, EventArgs <p1>)
}
internal System.ServiceModel.Channels.Http.HttpChannelListenerEntry : object {
private object <RetrieverLock>k__BackingField
private ChannelDispatcher <ChannelDispatcher>k__BackingField
private EventWaitHandle <WaitHandle>k__BackingField
private Queue`1<HttpContextInfo> <ContextQueue>k__BackingField
private UriComponents cmpflag
private UriFormat fmtflag
public object RetrieverLock
public ChannelDispatcher ChannelDispatcher
public EventWaitHandle WaitHandle
public Queue`1<HttpContextInfo> ContextQueue
public void .ctor(ChannelDispatcher channel, EventWaitHandle waitHandle)
public object get_RetrieverLock()
private void set_RetrieverLock(object value)
public ChannelDispatcher get_ChannelDispatcher()
private void set_ChannelDispatcher(ChannelDispatcher value)
public EventWaitHandle get_WaitHandle()
private void set_WaitHandle(EventWaitHandle value)
public Queue`1<HttpContextInfo> get_ContextQueue()
private void set_ContextQueue(Queue`1<HttpContextInfo> value)
internal int CompareEntries(HttpChannelListenerEntry e1, HttpChannelListenerEntry e2)
internal bool FilterHttpContext(HttpContextInfo ctx)
}
internal System.ServiceModel.Channels.Http.HttpContextInfo : object {
public HttpRequestInfo Request
public HttpResponseInfo Response
public string User
public string Password
public HttpRequestInfo get_Request()
public HttpResponseInfo get_Response()
public string get_User()
public string get_Password()
public void ReturnUnauthorized()
public void Abort()
public void Close()
protected void OnContextClosed()
}
internal System.ServiceModel.Channels.Http.HttpListenerManager : object {
private List`1<HttpChannelListenerEntry> <Entries>k__BackingField
private object entries_lock
protected List`1<HttpChannelListenerEntry> Entries
protected List`1<HttpChannelListenerEntry> get_Entries()
private void set_Entries(List`1<HttpChannelListenerEntry> value)
public void RegisterListener(ChannelDispatcher channel, HttpTransportBindingElement element, TimeSpan timeout)
public void UnregisterListener(ChannelDispatcher channel, TimeSpan timeout)
protected void RegisterListenerCommon(ChannelDispatcher channel, TimeSpan timeout)
protected void UnregisterListenerCommon(ChannelDispatcher channel, TimeSpan timeout)
public void ProcessNewContext(HttpContextInfo ctxi)
private HttpChannelListenerEntry SelectChannel(HttpContextInfo ctx)
public bool TryDequeueRequest(ChannelDispatcher channel, TimeSpan timeout, HttpContextInfo& context)
}
internal System.ServiceModel.Channels.Http.HttpListenerManagerTable : object {
private List`1<HttpListenerManagerTable> instances
private Dictionary`2<Uri, HttpListenerManager> listeners
private object <ServiceHostKey>k__BackingField
public object ServiceHostKey
public HttpListenerManagerTable GetOrCreate(object serviceHostKey)
private void .ctor(object serviceHostKey)
public object get_ServiceHostKey()
private void set_ServiceHostKey(object value)
public HttpListenerManager GetOrCreateManager(Uri uri, HttpTransportBindingElement element)
private HttpListenerManager CreateListenerManager(Uri uri, HttpTransportBindingElement element)
}
internal System.ServiceModel.Channels.Http.HttpReplyChannel : InternalReplyChannelBase {
private HttpChannelListener`1<IReplyChannel> source
private RequestContext reqctx
private SecurityTokenAuthenticator security_token_authenticator
private SecurityTokenResolver security_token_resolver
private bool close_started
private object close_lock
internal HttpChannelListener`1<IReplyChannel> Source
public MessageEncoder Encoder
internal MessageVersion MessageVersion
public void .ctor(HttpChannelListener`1<IReplyChannel> listener)
internal HttpChannelListener`1<IReplyChannel> get_Source()
public MessageEncoder get_Encoder()
internal MessageVersion get_MessageVersion()
public RequestContext ReceiveRequest(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
protected void OnAbort()
public bool CancelAsync(TimeSpan timeout)
private void AbortConnections(TimeSpan timeout)
protected void OnClose(TimeSpan timeout)
protected string GetHeaderItem(string raw)
protected HttpRequestMessageProperty CreateRequestProperty(HttpContextInfo ctxi)
public bool TryReceiveRequest(TimeSpan timeout, RequestContext& context)
protected Message CreatePostMessage(HttpContextInfo ctxi)
public bool WaitForRequest(TimeSpan timeout)
}
internal System.ServiceModel.Channels.Http.HttpRequestContext : RequestContext {
private Message request
private HttpReplyChannel channel
private HttpContextInfo context
private Action`2<Message, TimeSpan> reply_delegate
public Message RequestMessage
public HttpReplyChannel Channel
public HttpContextInfo Context
public void .ctor(HttpReplyChannel channel, HttpContextInfo context, Message request)
public Message get_RequestMessage()
public HttpReplyChannel get_Channel()
public HttpContextInfo get_Context()
public IAsyncResult BeginReply(Message msg, AsyncCallback callback, object state)
public IAsyncResult BeginReply(Message msg, TimeSpan timeout, AsyncCallback callback, object state)
public void EndReply(IAsyncResult result)
public void Reply(Message msg)
public void Reply(Message msg, TimeSpan timeout)
public void Abort()
public void Close()
public void Close(TimeSpan timeout)
protected void InternalAbort()
protected void InternalClose(TimeSpan timeout)
protected void InternalReply(Message msg, TimeSpan timeout)
}
internal System.ServiceModel.Channels.Http.HttpRequestInfo : object {
public long ContentLength64
public NameValueCollection QueryString
public NameValueCollection Headers
public Uri Url
public string ContentType
public string HttpMethod
public Stream InputStream
public string ClientIPAddress
public int ClientPort
public long get_ContentLength64()
public NameValueCollection get_QueryString()
public NameValueCollection get_Headers()
public Uri get_Url()
public string get_ContentType()
public string get_HttpMethod()
public Stream get_InputStream()
public string get_ClientIPAddress()
public int get_ClientPort()
}
internal System.ServiceModel.Channels.Http.HttpResponseInfo : object {
private bool <SuppressContent>k__BackingField
public string ContentType
public NameValueCollection Headers
public Stream OutputStream
public int StatusCode
public string StatusDescription
public bool SuppressContent
public string get_ContentType()
public void set_ContentType(string value)
public NameValueCollection get_Headers()
public Stream get_OutputStream()
public int get_StatusCode()
public void set_StatusCode(int value)
public string get_StatusDescription()
public void set_StatusDescription(string value)
public void Abort()
public void Close()
public void SetLength(long value)
public bool get_SuppressContent()
public void set_SuppressContent(bool value)
}
internal System.ServiceModel.Channels.Http.HttpStandaloneContextInfo : HttpContextInfo {
private HttpListenerContext ctx
private HttpStandaloneRequestInfo request
private HttpStandaloneResponseInfo response
public HttpListenerContext Source
public HttpRequestInfo Request
public HttpResponseInfo Response
public string User
public string Password
public void .ctor(HttpListenerContext ctx)
public HttpListenerContext get_Source()
public HttpRequestInfo get_Request()
public HttpResponseInfo get_Response()
public string get_User()
public string get_Password()
public void ReturnUnauthorized()
}
internal System.ServiceModel.Channels.Http.HttpStandaloneListenerManager : HttpListenerManager {
private HttpListener listener
private Thread loop
public void .ctor(Uri uri, HttpTransportBindingElement element)
public void RegisterListener(ChannelDispatcher channel, HttpTransportBindingElement element, TimeSpan timeout)
public void UnregisterListener(ChannelDispatcher channel, TimeSpan timeout)
private void GetContextCompleted(IAsyncResult result)
private void ProcessNewContext(HttpListenerContext ctx)
}
internal System.ServiceModel.Channels.Http.HttpStandaloneRequestInfo : HttpRequestInfo {
private HttpListenerRequest req
public long ContentLength64
public NameValueCollection QueryString
public NameValueCollection Headers
public Uri Url
public string ContentType
public string HttpMethod
public Stream InputStream
public string ClientIPAddress
public int ClientPort
public void .ctor(HttpListenerRequest request)
public long get_ContentLength64()
public NameValueCollection get_QueryString()
public NameValueCollection get_Headers()
public Uri get_Url()
public string get_ContentType()
public string get_HttpMethod()
public Stream get_InputStream()
public string get_ClientIPAddress()
public int get_ClientPort()
}
internal System.ServiceModel.Channels.Http.HttpStandaloneResponseInfo : HttpResponseInfo {
private HttpListenerResponse res
public string ContentType
public NameValueCollection Headers
public int StatusCode
public string StatusDescription
public Stream OutputStream
public void .ctor(HttpListenerResponse response)
public string get_ContentType()
public void set_ContentType(string value)
public NameValueCollection get_Headers()
public int get_StatusCode()
public void set_StatusCode(int value)
public string get_StatusDescription()
public void set_StatusDescription(string value)
public Stream get_OutputStream()
public void Abort()
public void Close()
public void SetLength(long value)
}
internal System.ServiceModel.Channels.HttpBindingProperties : object {
private HttpTransportBindingElement source
public bool AssuresOrderedDelivery
public bool QueuedDelivery
public ProtectionLevel SupportedRequestProtectionLevel
public ProtectionLevel SupportedResponseProtectionLevel
public bool SupportsClientAuthentication
public bool SupportsServerAuthentication
public bool SupportsClientWindowsIdentity
public void .ctor(HttpTransportBindingElement source)
public bool get_AssuresOrderedDelivery()
public bool get_QueuedDelivery()
public ProtectionLevel get_SupportedRequestProtectionLevel()
public ProtectionLevel get_SupportedResponseProtectionLevel()
public bool get_SupportsClientAuthentication()
public bool get_SupportsServerAuthentication()
public bool get_SupportsClientWindowsIdentity()
}
internal System.ServiceModel.Channels.HttpChannelFactory`1 : TransportChannelFactoryBase`1<TChannel> {
private IHttpCookieContainerManager cookie_manager
private ClientCredentials <ClientCredentials>k__BackingField
private Action`1<TimeSpan> open_delegate
public ClientCredentials ClientCredentials
public void .ctor(HttpTransportBindingElement source, BindingContext ctx)
public ClientCredentials get_ClientCredentials()
private void set_ClientCredentials(ClientCredentials value)
protected TChannel OnCreateChannel(EndpointAddress address, Uri via)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
public T GetProperty()
}
public System.ServiceModel.Channels.HttpCookieContainerBindingElement : BindingElement {
private HttpCookieContainerManager manager
protected void .ctor(HttpCookieContainerBindingElement elementToBeCloned)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
}
internal System.ServiceModel.Channels.HttpCookieContainerManager : object {
private CookieContainer <CookieContainer>k__BackingField
public CookieContainer CookieContainer
public void .ctor(HttpCookieContainerManager original)
public CookieContainer get_CookieContainer()
public void set_CookieContainer(CookieContainer value)
}
public System.ServiceModel.Channels.HttpMessageHandlerFactory : object {
public void .ctor(Func`1<IEnumerable`1<DelegatingHandler>> handlers)
public void .ctor(Type[] handlers)
public HttpMessageHandler Create(HttpMessageHandler innerChannel)
}
public System.ServiceModel.Channels.HttpMessageSettings : object {
public bool HttpMessagesSupported
public bool get_HttpMessagesSupported()
public void set_HttpMessagesSupported(bool value)
public bool Equals(HttpMessageSettings other)
}
internal System.ServiceModel.Channels.HttpRequestChannel : RequestChannelBase {
private HttpChannelFactory`1<IRequestChannel> source
private List`1<WebRequest> web_requests
public MessageEncoder Encoder
public void .ctor(HttpChannelFactory`1<IRequestChannel> factory, EndpointAddress address, Uri via)
public MessageEncoder get_Encoder()
public Message Request(Message message, TimeSpan timeout)
private void BeginProcessRequest(HttpChannelRequestAsyncResult result)
private void GotResponse(IAsyncResult result)
public IAsyncResult BeginRequest(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public Message EndRequest(IAsyncResult result)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
}
public System.ServiceModel.Channels.HttpRequestMessageExtensionMethods : object {
public IPrincipal GetUserPrincipal(HttpRequestMessage httpRequestMessage)
public void SetUserPrincipal(HttpRequestMessage httpRequestMessage, IPrincipal user)
}
public System.ServiceModel.Channels.HttpRequestMessageProperty : object {
private WebHeaderCollection headers
private string method
private string query_string
private bool suppress_entity
public string Name
public WebHeaderCollection Headers
public string Method
public string QueryString
public bool SuppressEntityBody
public string get_Name()
public WebHeaderCollection get_Headers()
public string get_Method()
public void set_Method(string value)
public string get_QueryString()
public void set_QueryString(string value)
public bool get_SuppressEntityBody()
public void set_SuppressEntityBody(bool value)
private IMessageProperty System.ServiceModel.Channels.IMessageProperty.CreateCopy()
}
public System.ServiceModel.Channels.HttpResponseMessageProperty : object {
private WebHeaderCollection headers
private string status_desc
private HttpStatusCode status_code
private bool suppress_entity
public string Name
public WebHeaderCollection Headers
public HttpStatusCode StatusCode
public string StatusDescription
public bool SuppressEntityBody
public bool SuppressPreamble
public string get_Name()
public WebHeaderCollection get_Headers()
public HttpStatusCode get_StatusCode()
public void set_StatusCode(HttpStatusCode value)
public string get_StatusDescription()
public void set_StatusDescription(string value)
public bool get_SuppressEntityBody()
public void set_SuppressEntityBody(bool value)
private IMessageProperty System.ServiceModel.Channels.IMessageProperty.CreateCopy()
public bool get_SuppressPreamble()
public void set_SuppressPreamble(bool value)
}
internal System.ServiceModel.Channels.HttpsBindingProperties : HttpBindingProperties {
private HttpsTransportBindingElement source
public ProtectionLevel SupportedRequestProtectionLevel
public ProtectionLevel SupportedResponseProtectionLevel
public bool SupportsClientAuthentication
public bool SupportsServerAuthentication
public bool SupportsClientWindowsIdentity
public void .ctor(HttpsTransportBindingElement source)
public ProtectionLevel get_SupportedRequestProtectionLevel()
public ProtectionLevel get_SupportedResponseProtectionLevel()
public bool get_SupportsClientAuthentication()
public bool get_SupportsServerAuthentication()
public bool get_SupportsClientWindowsIdentity()
}
public System.ServiceModel.Channels.HttpsTransportBindingElement : HttpTransportBindingElement {
private bool req_cli_cert
public bool RequireClientCertificate
public string Scheme
protected void .ctor(HttpsTransportBindingElement elementToBeCloned)
public bool get_RequireClientCertificate()
public void set_RequireClientCertificate(bool value)
public string get_Scheme()
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public BindingElement Clone()
public XmlElement GetTransportTokenAssertion()
public T GetProperty(BindingContext context)
}
public System.ServiceModel.Channels.HttpTransportBindingElement : TransportBindingElement {
private bool allow_cookies
private bool bypass_proxy_on_local
private bool unsafe_ntlm_auth
private bool use_default_proxy
private bool keep_alive_enabled
private int max_buffer_size
private HostNameComparisonMode host_cmp_mode
private Uri proxy_address
private string realm
private TransferMode transfer_mode
private IDefaultCommunicationTimeouts timeouts
private AuthenticationSchemes auth_scheme
private AuthenticationSchemes proxy_auth_scheme
private HttpCookieContainerManager cookie_manager
private bool <DecompressionEnabled>k__BackingField
private object <LegacyExtendedProtectionPolicy>k__BackingField
private ExtendedProtectionPolicy <ExtendedProtectionPolicy>k__BackingField
internal object ListenerBuildLock
public AuthenticationSchemes AuthenticationScheme
public AuthenticationSchemes ProxyAuthenticationScheme
public bool AllowCookies
public bool BypassProxyOnLocal
public bool DecompressionEnabled
public HostNameComparisonMode HostNameComparisonMode
public bool KeepAliveEnabled
public int MaxBufferSize
public Uri ProxyAddress
public string Realm
public string Scheme
public TransferMode TransferMode
public bool UnsafeConnectionNtlmAuthentication
public bool UseDefaultWebProxy
public object LegacyExtendedProtectionPolicy
public ExtendedProtectionPolicy ExtendedProtectionPolicy
public WebSocketTransportSettings WebSocketSettings
public int MaxPendingAccepts
public HttpMessageHandlerFactory MessageHandlerFactory
public TimeSpan RequestInitializationTimeout
protected void .ctor(HttpTransportBindingElement elementToBeCloned)
public AuthenticationSchemes get_AuthenticationScheme()
public void set_AuthenticationScheme(AuthenticationSchemes value)
public AuthenticationSchemes get_ProxyAuthenticationScheme()
public void set_ProxyAuthenticationScheme(AuthenticationSchemes value)
public bool get_AllowCookies()
public void set_AllowCookies(bool value)
public bool get_BypassProxyOnLocal()
public void set_BypassProxyOnLocal(bool value)
public bool get_DecompressionEnabled()
public void set_DecompressionEnabled(bool value)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public bool get_KeepAliveEnabled()
public void set_KeepAliveEnabled(bool value)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public Uri get_ProxyAddress()
public void set_ProxyAddress(Uri value)
public string get_Realm()
public void set_Realm(string value)
public string get_Scheme()
public TransferMode get_TransferMode()
public void set_TransferMode(TransferMode value)
public bool get_UnsafeConnectionNtlmAuthentication()
public void set_UnsafeConnectionNtlmAuthentication(bool value)
public bool get_UseDefaultWebProxy()
public void set_UseDefaultWebProxy(bool value)
public object get_LegacyExtendedProtectionPolicy()
public void set_LegacyExtendedProtectionPolicy(object value)
public ExtendedProtectionPolicy get_ExtendedProtectionPolicy()
public void set_ExtendedProtectionPolicy(ExtendedProtectionPolicy value)
public bool CanBuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
public WebSocketTransportSettings get_WebSocketSettings()
public void set_WebSocketSettings(WebSocketTransportSettings value)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
private XmlElement CreateTransportBinding(XmlElement transportToken)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)
public int get_MaxPendingAccepts()
public void set_MaxPendingAccepts(int value)
public HttpMessageHandlerFactory get_MessageHandlerFactory()
public void set_MessageHandlerFactory(HttpMessageHandlerFactory value)
public TimeSpan get_RequestInitializationTimeout()
public void set_RequestInitializationTimeout(TimeSpan value)
public bool ShouldSerializeExtendedProtectionPolicy()
public bool ShouldSerializeMessageHandlerFactory()
public bool ShouldSerializeWebSocketSettings()
}
public System.ServiceModel.Channels.IAnonymousUriPrefixMatcher {
public void Register(Uri anonymousUriPrefix)
}
public System.ServiceModel.Channels.IBindingDeliveryCapabilities {
public bool AssuresOrderedDelivery
public bool QueuedDelivery
public bool get_AssuresOrderedDelivery()
public bool get_QueuedDelivery()
}
public System.ServiceModel.Channels.IBindingMulticastCapabilities {
public bool IsMulticast
public bool get_IsMulticast()
}
public System.ServiceModel.Channels.IBindingRuntimePreferences {
public bool ReceiveSynchronously
public bool get_ReceiveSynchronously()
}
public System.ServiceModel.Channels.IChannel {
public T GetProperty()
}
public System.ServiceModel.Channels.IChannelFactory {
public T GetProperty()
}
public System.ServiceModel.Channels.IChannelFactory`1 {
public TChannel CreateChannel(EndpointAddress to)
public TChannel CreateChannel(EndpointAddress to, Uri via)
}
public System.ServiceModel.Channels.IChannelListener {
public Uri Uri
public Uri get_Uri()
public T GetProperty()
public IAsyncResult BeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state)
public bool EndWaitForChannel(IAsyncResult result)
public bool WaitForChannel(TimeSpan timeout)
}
public System.ServiceModel.Channels.IChannelListener`1 {
public TChannel AcceptChannel()
public TChannel AcceptChannel(TimeSpan timeout)
public IAsyncResult BeginAcceptChannel(AsyncCallback callback, object state)
public IAsyncResult BeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object state)
public TChannel EndAcceptChannel(IAsyncResult result)
}
public System.ServiceModel.Channels.IContextManager {
public bool Enabled
public bool get_Enabled()
public void set_Enabled(bool value)
public IDictionary`2<string, string> GetContext()
public void SetContext(IDictionary`2<string, string> context)
}
public System.ServiceModel.Channels.ICorrelationDataSource {
public ICollection`1<CorrelationDataDescription> DataSources
public ICollection`1<CorrelationDataDescription> get_DataSources()
}
public System.ServiceModel.Channels.IDuplexSession {
public IAsyncResult BeginCloseOutputSession(AsyncCallback callback, object state)
public IAsyncResult BeginCloseOutputSession(TimeSpan timeout, AsyncCallback callback, object state)
public void CloseOutputSession()
public void CloseOutputSession(TimeSpan timeout)
public void EndCloseOutputSession(IAsyncResult result)
}
internal System.ServiceModel.Channels.IHasMessageEncoder {
public MessageEncoder MessageEncoder
public MessageEncoder get_MessageEncoder()
}
public System.ServiceModel.Channels.IHttpCookieContainerManager {
public CookieContainer CookieContainer
public CookieContainer get_CookieContainer()
public void set_CookieContainer(CookieContainer value)
}
public System.ServiceModel.Channels.IInputChannel {
public EndpointAddress LocalAddress
public EndpointAddress get_LocalAddress()
public IAsyncResult BeginReceive(AsyncCallback callback, object state)
public IAsyncResult BeginReceive(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginTryReceive(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginWaitForMessage(TimeSpan timeout, AsyncCallback callback, object state)
public Message EndReceive(IAsyncResult result)
public bool EndTryReceive(IAsyncResult result, Message& message)
public bool EndWaitForMessage(IAsyncResult result)
public Message Receive()
public Message Receive(TimeSpan timeout)
public bool TryReceive(TimeSpan timeout, Message& message)
public bool WaitForMessage(TimeSpan timeout)
}
public System.ServiceModel.Channels.IMessageProperty {
public IMessageProperty CreateCopy()
}
internal System.ServiceModel.Channels.InputChannelBase : ChannelBase {
private ChannelListenerBase channel_listener
public EndpointAddress LocalAddress
public void .ctor(ChannelListenerBase listener)
public EndpointAddress get_LocalAddress()
public IAsyncResult BeginReceive(AsyncCallback callback, object state)
public IAsyncResult BeginReceive(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginTryReceive(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginWaitForMessage(TimeSpan timeout, AsyncCallback callback, object state)
public Message EndReceive(IAsyncResult result)
public bool EndTryReceive(IAsyncResult result, Message& message)
public bool EndWaitForMessage(IAsyncResult result)
public Message Receive()
public Message Receive(TimeSpan timeout)
public bool TryReceive(TimeSpan timeout, Message& message)
public bool WaitForMessage(TimeSpan timeout)
}
internal System.ServiceModel.Channels.InternalChannelListenerBase`1 : ChannelListenerBase`1<TChannel> {
private Uri listen_uri
private Func`2<TimeSpan, TChannel> accept_channel_delegate
private Func`2<TimeSpan, bool> wait_delegate
private Action`1<TimeSpan> open_delegate
private Action`1<TimeSpan> close_delegate
private MessageEncoder <MessageEncoder>k__BackingField
private Thread <CurrentAsyncThread>k__BackingField
private IAsyncResult <CurrentAsyncResult>k__BackingField
public MessageEncoder MessageEncoder
public Uri Uri
protected Thread CurrentAsyncThread
protected IAsyncResult CurrentAsyncResult
protected void .ctor(BindingContext context)
public MessageEncoder get_MessageEncoder()
internal void set_MessageEncoder(MessageEncoder value)
public Uri get_Uri()
protected Thread get_CurrentAsyncThread()
private void set_CurrentAsyncThread(Thread value)
protected IAsyncResult get_CurrentAsyncResult()
private void set_CurrentAsyncResult(IAsyncResult value)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
public bool CancelAsync(TimeSpan timeout)
protected IAsyncResult OnBeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object asyncState)
protected TChannel OnEndAcceptChannel(IAsyncResult result)
protected IAsyncResult OnBeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state)
protected bool OnEndWaitForChannel(IAsyncResult result)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
}
internal System.ServiceModel.Channels.InternalReplyChannelBase : ReplyChannelBase {
private EndpointAddress local_address
public EndpointAddress LocalAddress
public void .ctor(ChannelListenerBase listener)
public EndpointAddress get_LocalAddress()
}
internal System.ServiceModel.Channels.InternalRequestContext : RequestContext {
private IDefaultCommunicationTimeouts timeouts
private Action`2<Message, TimeSpan> reply_delegate
protected void .ctor(IDefaultCommunicationTimeouts timeouts)
public IAsyncResult BeginReply(Message message, AsyncCallback callback, object state)
public IAsyncResult BeginReply(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public void EndReply(IAsyncResult result)
public void Close()
public void Reply(Message message)
}
public System.ServiceModel.Channels.InvalidChannelBindingException : Exception {
public void .ctor(string message)
public void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception innerException)
}
public System.ServiceModel.Channels.IOutputChannel {
public EndpointAddress RemoteAddress
public Uri Via
public EndpointAddress get_RemoteAddress()
public IAsyncResult BeginSend(Message message, AsyncCallback callback, object state)
public IAsyncResult BeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public void EndSend(IAsyncResult result)
public void Send(Message message)
public void Send(Message message, TimeSpan timeout)
public Uri get_Via()
}
internal System.ServiceModel.Channels.IPeerChannelManager {
public PeerTransportBindingElement Source
public PeerResolver Resolver
public MessageEncoder MessageEncoder
public PeerTransportBindingElement get_Source()
public PeerResolver get_Resolver()
public MessageEncoder get_MessageEncoder()
}
public System.ServiceModel.Channels.IReceiveContextSettings {
public bool Enabled
public TimeSpan ValidityDuration
public bool get_Enabled()
public void set_Enabled(bool value)
public TimeSpan get_ValidityDuration()
}
public System.ServiceModel.Channels.IReplyChannel {
public EndpointAddress LocalAddress
public EndpointAddress get_LocalAddress()
public IAsyncResult BeginReceiveRequest(AsyncCallback callback, object state)
public IAsyncResult BeginReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginWaitForRequest(TimeSpan timeout, AsyncCallback callback, object state)
public RequestContext EndReceiveRequest(IAsyncResult result)
public bool EndTryReceiveRequest(IAsyncResult result, RequestContext& context)
public bool EndWaitForRequest(IAsyncResult result)
public RequestContext ReceiveRequest()
public RequestContext ReceiveRequest(TimeSpan timeout)
public bool TryReceiveRequest(TimeSpan timeout, RequestContext& context)
public bool WaitForRequest(TimeSpan timeout)
}
public System.ServiceModel.Channels.IRequestChannel {
public EndpointAddress RemoteAddress
public Uri Via
public EndpointAddress get_RemoteAddress()
public IAsyncResult BeginRequest(Message message, AsyncCallback callback, object state)
public IAsyncResult BeginRequest(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public Message EndRequest(IAsyncResult result)
public Message Request(Message message)
public Message Request(Message message, TimeSpan timeout)
public Uri get_Via()
}
public System.ServiceModel.Channels.ISecurityCapabilities {
public ProtectionLevel SupportedRequestProtectionLevel
public ProtectionLevel SupportedResponseProtectionLevel
public bool SupportsClientAuthentication
public bool SupportsServerAuthentication
public bool SupportsClientWindowsIdentity
public ProtectionLevel get_SupportedRequestProtectionLevel()
public ProtectionLevel get_SupportedResponseProtectionLevel()
public bool get_SupportsClientAuthentication()
public bool get_SupportsServerAuthentication()
public bool get_SupportsClientWindowsIdentity()
}
public System.ServiceModel.Channels.ISession {
public string Id
public string get_Id()
}
public System.ServiceModel.Channels.ISessionChannel`1 {
public TSession Session
public TSession get_Session()
}
public System.ServiceModel.Channels.ITransactedBindingElement {
public bool TransactedReceiveEnabled
public bool get_TransactedReceiveEnabled()
}
public System.ServiceModel.Channels.ITransportTokenAssertionProvider {
public XmlElement GetTransportTokenAssertion()
}
public System.ServiceModel.Channels.IWebSocketCloseDetails {
public Nullable`1<WebSocketCloseStatus> InputCloseStatus
public string InputCloseStatusDescription
public Nullable`1<WebSocketCloseStatus> get_InputCloseStatus()
public string get_InputCloseStatusDescription()
public void SetOutputCloseStatus(WebSocketCloseStatus closeStatus, string closeStatusDescription)
}
internal System.ServiceModel.Channels.LayeredCommunicationObject : object {
private ICommunicationObject inner
public ChannelManagerBase ChannelManager
private IDefaultCommunicationTimeouts Timeouts
public CommunicationState State
protected void .ctor(ICommunicationObject source)
public ChannelManagerBase get_ChannelManager()
private IDefaultCommunicationTimeouts get_Timeouts()
public CommunicationState get_State()
public void Abort()
public IAsyncResult BeginClose(AsyncCallback callback, object state)
public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
public void EndClose(IAsyncResult result)
protected void OnEndClose(IAsyncResult result)
public void Close()
public void Close(TimeSpan timeout)
protected void OnClose(TimeSpan timeout)
public void Dispose()
public IAsyncResult BeginOpen(AsyncCallback callback, object state)
public IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
public void EndOpen(IAsyncResult result)
protected void OnEndOpen(IAsyncResult result)
public void Open()
public void Open(TimeSpan timeout)
protected Type GetCommunicationObjectType()
protected void ThrowIfNotOpen()
protected void ThrowIfImmutable()
public void add_Closing(EventHandler value)
public void remove_Closing(EventHandler value)
public void add_Closed(EventHandler value)
public void remove_Closed(EventHandler value)
public void add_Opening(EventHandler value)
public void remove_Opening(EventHandler value)
public void add_Opened(EventHandler value)
public void remove_Opened(EventHandler value)
public void add_Faulted(EventHandler value)
public void remove_Faulted(EventHandler value)
}
internal System.ServiceModel.Channels.LayeredOutputChannel : LayeredCommunicationObject {
private IOutputChannel inner
public ChannelFactoryBase Factory
public ChannelManagerBase ChannelManager
public EndpointAddress RemoteAddress
public Uri Via
public void .ctor(IOutputChannel source)
public ChannelFactoryBase get_Factory()
public ChannelManagerBase get_ChannelManager()
public EndpointAddress get_RemoteAddress()
public IAsyncResult BeginSend(Message message, AsyncCallback callback, object state)
public IAsyncResult BeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state)
protected IAsyncResult OnBeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public void EndSend(IAsyncResult result)
protected void OnEndSend(IAsyncResult result)
public void Send(Message message)
public void Send(Message message, TimeSpan timeout)
protected void OnSend(Message message, TimeSpan timeout)
public Uri get_Via()
public T GetProperty()
}
internal System.ServiceModel.Channels.LayeredReplyChannel : LayeredCommunicationObject {
private IReplyChannel inner
public ChannelListenerBase Listener
public ChannelManagerBase ChannelManager
public EndpointAddress LocalAddress
public void .ctor(IReplyChannel innerChannel)
public ChannelListenerBase get_Listener()
public ChannelManagerBase get_ChannelManager()
public EndpointAddress get_LocalAddress()
public IAsyncResult BeginReceiveRequest(AsyncCallback callback, object state)
public IAsyncResult BeginReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginWaitForRequest(TimeSpan timeout, AsyncCallback callback, object state)
public RequestContext EndReceiveRequest(IAsyncResult result)
public bool EndTryReceiveRequest(IAsyncResult result, RequestContext& context)
public bool EndWaitForRequest(IAsyncResult result)
public RequestContext ReceiveRequest()
public RequestContext ReceiveRequest(TimeSpan timeout)
public bool TryReceiveRequest(TimeSpan timeout, RequestContext& context)
public bool WaitForRequest(TimeSpan timeout)
public T GetProperty()
}
internal System.ServiceModel.Channels.LayeredRequestChannel : LayeredCommunicationObject {
private IRequestChannel inner
public ChannelFactoryBase Factory
public ChannelManagerBase ChannelManager
public EndpointAddress RemoteAddress
public Uri Via
public void .ctor(IRequestChannel source)
public ChannelFactoryBase get_Factory()
public ChannelManagerBase get_ChannelManager()
public EndpointAddress get_RemoteAddress()
public IAsyncResult BeginRequest(Message message, AsyncCallback callback, object state)
public IAsyncResult BeginRequest(Message message, TimeSpan timeout, AsyncCallback callback, object state)
protected IAsyncResult OnBeginRequest(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public Message EndRequest(IAsyncResult result)
protected Message OnEndRequest(IAsyncResult result)
public Message Request(Message message)
public Message Request(Message message, TimeSpan timeout)
protected Message OnRequest(Message message, TimeSpan timeout)
public Uri get_Via()
public T GetProperty()
}
public System.ServiceModel.Channels.LocalClientSecuritySettings : object {
private bool cache_cookies
private int cookie_renewal
private bool detect_replays
private IdentityVerifier verifier
private TimeSpan max_cookie_cache_time
private bool reconnect
private int replay_cache_size
private TimeSpan renewal_interval
private TimeSpan rollover_interval
private TimeSpan <MaxClockSkew>k__BackingField
private TimeSpan <ReplayWindow>k__BackingField
private TimeSpan <TimestampValidityDuration>k__BackingField
public TimeSpan MaxClockSkew
public TimeSpan ReplayWindow
public TimeSpan TimestampValidityDuration
public bool CacheCookies
public int CookieRenewalThresholdPercentage
public bool DetectReplays
public IdentityVerifier IdentityVerifier
public TimeSpan MaxCookieCachingTime
public bool ReconnectTransportOnFailure
public int ReplayCacheSize
public TimeSpan SessionKeyRenewalInterval
public TimeSpan SessionKeyRolloverInterval
public NonceCache NonceCache
public TimeSpan get_MaxClockSkew()
public void set_MaxClockSkew(TimeSpan value)
public TimeSpan get_ReplayWindow()
public void set_ReplayWindow(TimeSpan value)
public TimeSpan get_TimestampValidityDuration()
public void set_TimestampValidityDuration(TimeSpan value)
public bool get_CacheCookies()
public void set_CacheCookies(bool value)
public int get_CookieRenewalThresholdPercentage()
public void set_CookieRenewalThresholdPercentage(int value)
public bool get_DetectReplays()
public void set_DetectReplays(bool value)
public IdentityVerifier get_IdentityVerifier()
public void set_IdentityVerifier(IdentityVerifier value)
public TimeSpan get_MaxCookieCachingTime()
public void set_MaxCookieCachingTime(TimeSpan value)
public bool get_ReconnectTransportOnFailure()
public void set_ReconnectTransportOnFailure(bool value)
public int get_ReplayCacheSize()
public void set_ReplayCacheSize(int value)
public TimeSpan get_SessionKeyRenewalInterval()
public void set_SessionKeyRenewalInterval(TimeSpan value)
public TimeSpan get_SessionKeyRolloverInterval()
public void set_SessionKeyRolloverInterval(TimeSpan value)
public LocalClientSecuritySettings Clone()
public NonceCache get_NonceCache()
public void set_NonceCache(NonceCache value)
}
public System.ServiceModel.Channels.LocalServiceSecuritySettings : object {
private bool detect_replays
private TimeSpan max_clock_skew
private bool reconnect
private int replay_cache_size
private TimeSpan inactivity_timeout
private TimeSpan cookie_lifetime
private TimeSpan negotiation_timeout
private TimeSpan replay_window
private TimeSpan renewal_interval
private TimeSpan rollover_interval
private TimeSpan validity_duration
private Collection`1<Type> claim_types
private int max_sessions
private int max_negotiations
private int max_cached_cookies
private SecurityStateEncoder encoder
private bool send_fault
public bool DetectReplays
public TimeSpan InactivityTimeout
public TimeSpan IssuedCookieLifetime
public int MaxCachedCookies
public TimeSpan MaxClockSkew
public int MaxPendingSessions
public int MaxStatefulNegotiations
public TimeSpan NegotiationTimeout
public bool ReconnectTransportOnFailure
public int ReplayCacheSize
public TimeSpan ReplayWindow
public TimeSpan SessionKeyRenewalInterval
public TimeSpan SessionKeyRolloverInterval
public TimeSpan TimestampValidityDuration
public NonceCache NonceCache
public bool get_DetectReplays()
public void set_DetectReplays(bool value)
public TimeSpan get_InactivityTimeout()
public void set_InactivityTimeout(TimeSpan value)
public TimeSpan get_IssuedCookieLifetime()
public void set_IssuedCookieLifetime(TimeSpan value)
public int get_MaxCachedCookies()
public void set_MaxCachedCookies(int value)
public TimeSpan get_MaxClockSkew()
public void set_MaxClockSkew(TimeSpan value)
public int get_MaxPendingSessions()
public void set_MaxPendingSessions(int value)
public int get_MaxStatefulNegotiations()
public void set_MaxStatefulNegotiations(int value)
public TimeSpan get_NegotiationTimeout()
public void set_NegotiationTimeout(TimeSpan value)
public bool get_ReconnectTransportOnFailure()
public void set_ReconnectTransportOnFailure(bool value)
public int get_ReplayCacheSize()
public void set_ReplayCacheSize(int value)
public TimeSpan get_ReplayWindow()
public void set_ReplayWindow(TimeSpan value)
public TimeSpan get_SessionKeyRenewalInterval()
public void set_SessionKeyRenewalInterval(TimeSpan value)
public TimeSpan get_SessionKeyRolloverInterval()
public void set_SessionKeyRolloverInterval(TimeSpan value)
public TimeSpan get_TimestampValidityDuration()
public void set_TimestampValidityDuration(TimeSpan value)
public LocalServiceSecuritySettings Clone()
public NonceCache get_NonceCache()
public void set_NonceCache(NonceCache value)
}
public System.ServiceModel.Channels.Message : object {
private bool disposed
private string body_id
private Message copied_message
private string string_cache
private MessageState <State>k__BackingField
private AttributeCollection empty_attributes
public MessageHeaders Headers
public bool IsEmpty
public bool IsFault
public MessageProperties Properties
public MessageState State
public MessageVersion Version
protected bool IsDisposed
public MessageHeaders get_Headers()
public bool get_IsEmpty()
public bool get_IsFault()
public MessageProperties get_Properties()
public MessageState get_State()
private void set_State(MessageState value)
public MessageVersion get_Version()
protected bool get_IsDisposed()
public void Close()
public MessageBuffer CreateBufferedCopy(int maxBufferSize)
private void System.IDisposable.Dispose()
public T GetBody()
public T GetBody(XmlObjectSerializer serializer)
protected T OnGetBody(XmlDictionaryReader reader)
public string GetBodyAttribute(string localName, string ns)
public XmlDictionaryReader GetReaderAtBodyContents()
public string ToString()
private void WriteXsiNil(XmlDictionaryWriter writer)
public void WriteBody(XmlDictionaryWriter writer)
public void WriteBody(XmlWriter writer)
public void WriteBodyContents(XmlDictionaryWriter writer)
public void WriteMessage(XmlDictionaryWriter writer)
public void WriteMessage(XmlWriter writer)
public void WriteStartBody(XmlDictionaryWriter writer)
public void WriteStartBody(XmlWriter writer)
public void WriteStartEnvelope(XmlDictionaryWriter writer)
protected void OnBodyToString(XmlDictionaryWriter writer)
protected void OnClose()
protected MessageBuffer OnCreateBufferedCopy(int maxBufferSize)
protected string OnGetBodyAttribute(string localName, string ns)
protected XmlDictionaryReader OnGetReaderAtBodyContents()
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
protected void OnWriteMessage(XmlDictionaryWriter writer)
protected void OnWriteStartBody(XmlDictionaryWriter writer)
protected void OnWriteStartEnvelope(XmlDictionaryWriter writer)
protected void OnWriteStartHeaders(XmlDictionaryWriter writer)
public Message CreateMessage(MessageVersion version, FaultCode faultCode, string reason, string action)
public Message CreateMessage(MessageVersion version, FaultCode faultCode, string reason, object detail, string action)
public Message CreateMessage(MessageVersion version, MessageFault fault, string action)
public Message CreateMessage(MessageVersion version, string action, object body)
public Message CreateMessage(MessageVersion version, string action, object body, XmlObjectSerializer serializer)
public Message CreateMessage(MessageVersion version, string action, XmlReader body)
public Message CreateMessage(MessageVersion version, string action, XmlDictionaryReader body)
public Message CreateMessage(XmlReader envelopeReader, int maxSizeOfHeaders, MessageVersion version)
public Message CreateMessage(MessageVersion version, string action, BodyWriter body)
public Message CreateMessage(MessageVersion version, string action)
public Message CreateMessage(XmlDictionaryReader envelopeReader, int maxSizeOfHeaders, MessageVersion version)
public IAsyncResult BeginWriteBodyContents(XmlDictionaryWriter writer, AsyncCallback callback, object state)
public IAsyncResult BeginWriteMessage(XmlDictionaryWriter writer, AsyncCallback callback, object state)
public void EndWriteBodyContents(IAsyncResult result)
public void EndWriteMessage(IAsyncResult result)
}
public System.ServiceModel.Channels.MessageBuffer : object {
private XPathNavigator nav_cache
public int BufferSize
public string MessageContentType
public void Close()
public Message CreateMessage()
public XPathNavigator CreateNavigator()
public XPathNavigator CreateNavigator(int nodeQuota)
public XPathNavigator CreateNavigator(XmlSpace space)
public XPathNavigator CreateNavigator(int nodeQuota, XmlSpace space)
private void System.IDisposable.Dispose()
public void WriteMessage(Stream stream)
public int get_BufferSize()
public string get_MessageContentType()
}
public System.ServiceModel.Channels.MessageEncoder : object {
public string ContentType
public string MediaType
public MessageVersion MessageVersion
public string get_ContentType()
public string get_MediaType()
public MessageVersion get_MessageVersion()
public T GetProperty()
public bool IsContentTypeSupported(string contentType)
public Message ReadMessage(ArraySegment`1<byte> buffer, BufferManager bufferManager)
public Message ReadMessage(ArraySegment`1<byte> buffer, BufferManager bufferManager, string contentType)
public Message ReadMessage(Stream stream, int maxSizeOfHeaders)
public Message ReadMessage(Stream stream, int maxSizeOfHeaders, string contentType)
public void WriteMessage(Message message, Stream stream)
public ArraySegment`1<byte> WriteMessage(Message message, int maxMessageSize, BufferManager bufferManager)
public ArraySegment`1<byte> WriteMessage(Message message, int maxMessageSize, BufferManager bufferManager, int messageOffset)
public string ToString()
internal void VerifyMessageVersion(Message message)
public IAsyncResult BeginWriteMessage(Message message, Stream stream, AsyncCallback callback, object state)
public void EndWriteMessage(IAsyncResult result)
}
public System.ServiceModel.Channels.MessageEncoderFactory : object {
public MessageEncoder Encoder
public MessageVersion MessageVersion
public MessageEncoder get_Encoder()
public MessageVersion get_MessageVersion()
public MessageEncoder CreateSessionEncoder()
}
public System.ServiceModel.Channels.MessageEncodingBindingElement : BindingElement {
public MessageVersion MessageVersion
public void .ctor(MessageEncodingBindingElement elementToBeCloned)
public MessageEncoderFactory CreateMessageEncoderFactory()
public MessageVersion get_MessageVersion()
public void set_MessageVersion(MessageVersion value)
public T GetProperty(BindingContext context)
protected void OnImportPolicy(XmlElement assertion, MessageVersion messageVersion, MetadataImporter exporter, PolicyConversionContext context)
}
public System.ServiceModel.Channels.MessageEncodingBindingElementImporter : object {
private void System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy)
private void System.ServiceModel.Description.IWsdlImportExtension.ImportContract(WsdlImporter importer, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context)
private void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(MetadataImporter importer, PolicyConversionContext context)
}
public System.ServiceModel.Channels.MessageFault : object {
public string Actor
public FaultCode Code
public bool HasDetail
public string Node
public FaultReason Reason
public bool IsMustUnderstandFault
public MessageFault CreateFault(Message message, int maxBufferSize)
private MessageFault CreateFault11(Message message, int maxBufferSize)
private MessageFault CreateFault12(Message message, int maxBufferSize)
private FaultCode ReadFaultCode11(XmlDictionaryReader r)
private FaultCode ReadFaultCode12(XmlDictionaryReader r, string ns)
private FaultReason ReadFaultReason12(XmlDictionaryReader r, string ns)
public MessageFault CreateFault(FaultCode code, string reason)
public MessageFault CreateFault(FaultCode code, FaultReason reason)
public MessageFault CreateFault(FaultCode code, FaultReason reason, object detail)
public MessageFault CreateFault(FaultCode code, FaultReason reason, object detail, XmlObjectSerializer serializer)
public MessageFault CreateFault(FaultCode code, FaultReason reason, object detail, XmlObjectSerializer serializer, string actor)
public MessageFault CreateFault(FaultCode code, FaultReason reason, object detail, XmlObjectSerializer serializer, string actor, string node)
public string get_Actor()
public FaultCode get_Code()
public bool get_HasDetail()
public string get_Node()
public FaultReason get_Reason()
public T GetDetail()
public T GetDetail(XmlObjectSerializer serializer)
public XmlDictionaryReader GetReaderAtDetailContents()
public void WriteTo(XmlDictionaryWriter writer, EnvelopeVersion version)
private void WriteFaultCode(XmlDictionaryWriter writer, EnvelopeVersion version, FaultCode code, bool sub)
private void WriteReason(XmlDictionaryWriter writer, EnvelopeVersion version)
public void WriteTo(XmlWriter writer, EnvelopeVersion version)
protected XmlDictionaryReader OnGetReaderAtDetailContents()
protected void OnWriteDetail(XmlDictionaryWriter writer, EnvelopeVersion version)
protected void OnWriteStartDetail(XmlDictionaryWriter writer, EnvelopeVersion version)
protected void OnWriteDetailContents(XmlDictionaryWriter writer)
public bool get_IsMustUnderstandFault()
public bool WasHeaderNotUnderstood(MessageHeaders headers, string name, string ns)
}
internal System.ServiceModel.Channels.MessageFaultBodyWriter : BodyWriter {
private MessageFault fault
private MessageVersion version
public void .ctor(MessageFault fault, MessageVersion version)
protected BodyWriter OnCreateBufferedCopy(int maxBufferSize)
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
}
public System.ServiceModel.Channels.MessageHeader : MessageHeaderInfo {
private XmlWriterSettings writer_settings
private string default_actor
private bool default_is_ref
private bool default_must_understand
private bool default_relay
public string Actor
public bool IsReferenceParameter
public bool MustUnderstand
public bool Relay
public MessageHeader CreateHeader(string name, string ns, object value)
public MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand)
public MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer)
public MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand, string actor)
public MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer, bool mustUnderstand)
public MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand, string actor, bool relay)
public MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer, bool mustUnderstand, string actor)
public MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer, bool mustUnderstand, string actor, bool relay)
public bool IsMessageVersionSupported(MessageVersion messageVersion)
protected void OnWriteHeaderContents(XmlDictionaryWriter writer, MessageVersion messageVersion)
protected void OnWriteStartHeader(XmlDictionaryWriter writer, MessageVersion messageVersion)
public string ToString()
public void WriteHeader(XmlDictionaryWriter writer, MessageVersion messageVersion)
public void WriteHeader(XmlWriter writer, MessageVersion messageVersion)
protected void WriteHeaderAttributes(XmlDictionaryWriter writer, MessageVersion messageVersion)
public void WriteHeaderContents(XmlDictionaryWriter writer, MessageVersion messageVersion)
public void WriteStartHeader(XmlDictionaryWriter writer, MessageVersion messageVersion)
public string get_Actor()
public bool get_IsReferenceParameter()
public bool get_MustUnderstand()
public bool get_Relay()
}
public System.ServiceModel.Channels.MessageHeaderInfo : object {
private string id
private string <Prefix>k__BackingField
public string Actor
public bool IsReferenceParameter
public bool MustUnderstand
public string Name
public string Namespace
public bool Relay
internal string Id
internal string Prefix
public string get_Actor()
public bool get_IsReferenceParameter()
public bool get_MustUnderstand()
public string get_Name()
public string get_Namespace()
public bool get_Relay()
internal string get_Id()
internal void set_Id(string value)
internal string get_Prefix()
internal void set_Prefix(string value)
}
public System.ServiceModel.Channels.MessageHeaders : object {
private XmlReaderSettings reader_settings
private List`1<MessageHeaderInfo> l
private Dictionary`2<Type, XmlObjectSerializer> serializers
private MessageVersion version
public string Action
public int Count
public EndpointAddress FaultTo
public EndpointAddress From
public MessageHeaderInfo Item
public UniqueId MessageId
public MessageVersion MessageVersion
public UniqueId RelatesTo
public EndpointAddress ReplyTo
public Uri To
public UnderstoodHeaders UnderstoodHeaders
public void .ctor(MessageHeaders collection)
public void .ctor(MessageVersion version)
public void .ctor(MessageVersion version, int initialSize)
public void Add(MessageHeader header)
public void CopyHeaderFrom(Message message, int headerIndex)
public void Clear()
public void CopyHeaderFrom(MessageHeaders collection, int headerIndex)
public void CopyHeadersFrom(Message message)
public void CopyHeadersFrom(MessageHeaders collection)
public void CopyTo(MessageHeaderInfo[] array, int index)
public int FindHeader(string name, string ns)
private bool HasActor(string actor, String[] candidates)
public int FindHeader(string name, string ns, String[] actors)
public IEnumerator`1<MessageHeaderInfo> GetEnumerator()
private XmlObjectSerializer GetSerializer(int headerIndex)
public T GetHeader(int index)
public T GetHeader(int index, XmlObjectSerializer serializer)
public T GetHeader(string name, string ns)
public T GetHeader(string name, string ns, String[] actors)
public T GetHeader(string name, string ns, XmlObjectSerializer serializer)
public XmlDictionaryReader GetReaderAtHeader(int headerIndex)
public bool HaveMandatoryHeadersBeenUnderstood()
public bool HaveMandatoryHeadersBeenUnderstood(String[] actors)
public void Insert(int headerIndex, MessageHeader header)
public void RemoveAll(string name, string ns)
public void RemoveAt(int headerIndex)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public void WriteHeader(int headerIndex, XmlDictionaryWriter writer)
public void WriteHeader(int headerIndex, XmlWriter writer)
public void WriteHeaderContents(int headerIndex, XmlDictionaryWriter writer)
public void WriteHeaderContents(int headerIndex, XmlWriter writer)
public void WriteStartHeader(int headerIndex, XmlDictionaryWriter writer)
public void WriteStartHeader(int headerIndex, XmlWriter writer)
public string get_Action()
public void set_Action(string value)
public int get_Count()
private void AddEndpointAddressHeader(string name, string ns, EndpointAddress address)
public EndpointAddress get_FaultTo()
public void set_FaultTo(EndpointAddress value)
public EndpointAddress get_From()
public void set_From(EndpointAddress value)
public MessageHeaderInfo get_Item(int index)
public UniqueId get_MessageId()
public void set_MessageId(UniqueId value)
public MessageVersion get_MessageVersion()
public UniqueId get_RelatesTo()
public void set_RelatesTo(UniqueId value)
public EndpointAddress get_ReplyTo()
public void set_ReplyTo(EndpointAddress value)
public Uri get_To()
public void set_To(Uri value)
public UnderstoodHeaders get_UnderstoodHeaders()
public void SetAction(XmlDictionaryString action)
}
internal System.ServiceModel.Channels.MessageImplBase : Message {
private MessageHeaders headers
private MessageProperties properties
private AttributeCollection attributes
internal AttributeCollection Attributes
public MessageHeaders Headers
public MessageProperties Properties
public MessageVersion Version
public void .ctor(MessageVersion version, string action, AttributeCollection attributes)
internal AttributeCollection get_Attributes()
public MessageHeaders get_Headers()
public MessageProperties get_Properties()
public MessageVersion get_Version()
protected string OnGetBodyAttribute(string localName, string ns)
protected void OnWriteStartBody(XmlDictionaryWriter writer)
}
public System.ServiceModel.Channels.MessageProperties : object {
private List`1<KeyValuePair`2<string, object>> list
public bool AllowOutputBatching
public int Count
public MessageEncoder Encoder
public bool IsFixedSize
public bool IsReadOnly
public ICollection`1<string> Keys
public object Item
public SecurityMessageProperty Security
public ICollection`1<object> Values
public Uri Via
public void .ctor(MessageProperties properties)
public bool get_AllowOutputBatching()
public void set_AllowOutputBatching(bool value)
public int get_Count()
public MessageEncoder get_Encoder()
public void set_Encoder(MessageEncoder value)
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public ICollection`1<string> get_Keys()
public object get_Item(string name)
public void set_Item(string name, object value)
public SecurityMessageProperty get_Security()
public void set_Security(SecurityMessageProperty value)
public ICollection`1<object> get_Values()
public Uri get_Via()
public void set_Via(Uri value)
public void Add(string name, object property)
public void Clear()
public bool ContainsKey(string name)
public void CopyProperties(MessageProperties properties)
public void Dispose()
public bool Remove(string name)
public bool TryGetValue(string name, Object& value)
private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> pair)
private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> pair)
private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int index)
private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> pair)
private IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public System.ServiceModel.Channels.MessageState : Enum {
public int value__
public MessageState Created
public MessageState Read
public MessageState Written
public MessageState Copied
public MessageState Closed
}
public System.ServiceModel.Channels.MessageVersion : object {
private EnvelopeVersion envelope
private AddressingVersion addressing
private MessageVersion <None>k__BackingField
private MessageVersion <Soap11>k__BackingField
private MessageVersion <Soap12WSAddressing10>k__BackingField
private MessageVersion <Soap12>k__BackingField
private MessageVersion <Soap11WSAddressing10>k__BackingField
private MessageVersion <Soap11WSAddressingAugust2004>k__BackingField
private MessageVersion <Soap12WSAddressingAugust2004>k__BackingField
public AddressingVersion Addressing
public MessageVersion Default
public EnvelopeVersion Envelope
public MessageVersion None
public MessageVersion Soap11
public MessageVersion Soap12WSAddressing10
public MessageVersion Soap12
public MessageVersion Soap11WSAddressing10
public MessageVersion Soap11WSAddressingAugust2004
public MessageVersion Soap12WSAddressingAugust2004
private void .ctor(EnvelopeVersion envelope, AddressingVersion addressing)
public MessageVersion CreateVersion(EnvelopeVersion envelopeVersion)
public MessageVersion CreateVersion(EnvelopeVersion envelopeVersion, AddressingVersion addressingVersion)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public AddressingVersion get_Addressing()
public MessageVersion get_Default()
public EnvelopeVersion get_Envelope()
public MessageVersion get_None()
private void set_None(MessageVersion value)
public MessageVersion get_Soap11()
private void set_Soap11(MessageVersion value)
public MessageVersion get_Soap12WSAddressing10()
private void set_Soap12WSAddressing10(MessageVersion value)
public MessageVersion get_Soap12()
private void set_Soap12(MessageVersion value)
public MessageVersion get_Soap11WSAddressing10()
private void set_Soap11WSAddressing10(MessageVersion value)
public MessageVersion get_Soap11WSAddressingAugust2004()
private void set_Soap11WSAddressingAugust2004(MessageVersion value)
public MessageVersion get_Soap12WSAddressingAugust2004()
private void set_Soap12WSAddressingAugust2004(MessageVersion value)
}
public System.ServiceModel.Channels.MsmqBindingElementBase : TransportBindingElement {
private Uri custom_dead_letter_queue
private DeadLetterQueue dead_letter_queue
private bool durable
private bool exactly_once
private bool tx_enabled
private bool use_msmq_trace
private bool use_source_journal
private int max_retry_cycles
private int receive_retry_count
private ReceiveErrorHandling receive_error_handling
private TimeSpan retry_cycle_delay
private TimeSpan ttl
private MsmqTransportSecurity transport_security
public Uri CustomDeadLetterQueue
public DeadLetterQueue DeadLetterQueue
public bool Durable
public bool ExactlyOnce
public int MaxRetryCycles
public MsmqTransportSecurity MsmqTransportSecurity
public ReceiveErrorHandling ReceiveErrorHandling
public int ReceiveRetryCount
public TimeSpan RetryCycleDelay
public TimeSpan TimeToLive
public bool TransactedReceiveEnabled
public bool UseMsmqTracing
public bool UseSourceJournal
public bool ReceiveContextEnabled
public TimeSpan ValidityDuration
public Uri get_CustomDeadLetterQueue()
public void set_CustomDeadLetterQueue(Uri value)
public DeadLetterQueue get_DeadLetterQueue()
public void set_DeadLetterQueue(DeadLetterQueue value)
public bool get_Durable()
public void set_Durable(bool value)
public bool get_ExactlyOnce()
public void set_ExactlyOnce(bool value)
public int get_MaxRetryCycles()
public void set_MaxRetryCycles(int value)
public MsmqTransportSecurity get_MsmqTransportSecurity()
public ReceiveErrorHandling get_ReceiveErrorHandling()
public void set_ReceiveErrorHandling(ReceiveErrorHandling value)
public int get_ReceiveRetryCount()
public void set_ReceiveRetryCount(int value)
public TimeSpan get_RetryCycleDelay()
public void set_RetryCycleDelay(TimeSpan value)
public TimeSpan get_TimeToLive()
public void set_TimeToLive(TimeSpan value)
public bool get_TransactedReceiveEnabled()
public bool get_UseMsmqTracing()
public void set_UseMsmqTracing(bool value)
public bool get_UseSourceJournal()
public void set_UseSourceJournal(bool value)
public T GetProperty(BindingContext context)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext endpointContext)
public bool get_ReceiveContextEnabled()
public void set_ReceiveContextEnabled(bool value)
public TimeSpan get_ValidityDuration()
public void set_ValidityDuration(TimeSpan value)
}
internal System.ServiceModel.Channels.MsmqChannelFactory`1 : ChannelFactoryBase`1<TChannel> {
private MsmqTransportBindingElement source
private MessageEncoder encoder
public MessageEncoder MessageEncoder
public void .ctor(MsmqTransportBindingElement source, BindingContext ctx)
public MessageEncoder get_MessageEncoder()
protected TChannel OnCreateChannel(EndpointAddress address, Uri via)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
}
internal System.ServiceModel.Channels.MsmqChannelListener`1 : ChannelListenerBase`1<TChannel> {
private MsmqTransportBindingElement source
private BindingContext context
private Uri listen_uri
private MessageQueue queue
private List`1<IChannel> channels
private MessageEncoder encoder
public MessageQueue Queue
public MessageEncoder MessageEncoder
public Uri Uri
public void .ctor(MsmqTransportBindingElement source, BindingContext context)
public MessageQueue get_Queue()
public MessageEncoder get_MessageEncoder()
public Uri get_Uri()
protected TChannel OnAcceptChannel(TimeSpan timeout)
private TChannel PopulateChannel(TimeSpan timeout)
protected IAsyncResult OnBeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object asyncState)
protected TChannel OnEndAcceptChannel(IAsyncResult result)
protected IAsyncResult OnBeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state)
protected bool OnEndWaitForChannel(IAsyncResult result)
protected bool OnWaitForChannel(TimeSpan timeout)
private void StartListening(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected void OnAbort()
}
internal System.ServiceModel.Channels.MsmqInputChannel : InputChannelBase {
private MsmqChannelListener`1<IInputChannel> listener
private EndpointAddress local_address
public EndpointAddress LocalAddress
public void .ctor(MsmqChannelListener`1<IInputChannel> listener, TimeSpan timeout)
public EndpointAddress get_LocalAddress()
public IAsyncResult BeginReceive(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginTryReceive(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginWaitForMessage(TimeSpan timeout, AsyncCallback callback, object state)
public Message EndReceive(IAsyncResult result)
public bool EndTryReceive(IAsyncResult result, Message& message)
public bool EndWaitForMessage(IAsyncResult result)
public Message Receive(TimeSpan timeout)
public bool TryReceive(TimeSpan timeout, Message& message)
public bool WaitForMessage(TimeSpan timeout)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object sender)
protected void OnEndOpen(IAsyncResult result)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object sender)
protected void OnEndClose(IAsyncResult result)
}
public System.ServiceModel.Channels.MsmqMessageProperty : object {
public string Name
private int abort_count
private int move_count
private Nullable`1<DeliveryFailure> failure
private Nullable`1<DeliveryStatus> delivery_status
public int AbortCount
public int MoveCount
public Nullable`1<DeliveryFailure> DeliveryFailure
public Nullable`1<DeliveryStatus> DeliveryStatus
public MsmqMessageProperty Get(Message message)
public int get_AbortCount()
public int get_MoveCount()
public Nullable`1<DeliveryFailure> get_DeliveryFailure()
public Nullable`1<DeliveryStatus> get_DeliveryStatus()
}
internal System.ServiceModel.Channels.MsmqOutputChannel : OutputChannelBase {
private MsmqChannelFactory`1<IOutputChannel> source
private MessageQueue queue
public void .ctor(MsmqChannelFactory`1<IOutputChannel> factory, EndpointAddress address, Uri via)
public IAsyncResult BeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public void EndSend(IAsyncResult result)
public void Send(Message message, TimeSpan timeout)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
}
public System.ServiceModel.Channels.MsmqTransportBindingElement : MsmqBindingElementBase {
private int max_pool_size
private QueueTransferProtocol queue_tr_protocol
private bool use_ad
public int MaxPoolSize
public QueueTransferProtocol QueueTransferProtocol
public string Scheme
public bool UseActiveDirectory
public int get_MaxPoolSize()
public void set_MaxPoolSize(int value)
public QueueTransferProtocol get_QueueTransferProtocol()
public void set_QueueTransferProtocol(QueueTransferProtocol value)
public string get_Scheme()
public bool get_UseActiveDirectory()
public void set_UseActiveDirectory(bool value)
public BindingElement Clone()
public bool CanBuildChannelFactory(BindingContext context)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
}
internal System.ServiceModel.Channels.MtomMessageEncoder : MessageEncoder {
private Encoding encoding
private MessageVersion version
private XmlDictionaryReaderQuotas quotas
public string ContentType
public string MediaType
public MessageVersion MessageVersion
public void .ctor(MtomMessageEncoderFactory owner)
public string get_ContentType()
public string get_MediaType()
public MessageVersion get_MessageVersion()
public Message ReadMessage(ArraySegment`1<byte> buffer, BufferManager bufferManager, string contentType)
public Message ReadMessage(Stream stream, int maxSizeOfHeaders, string contentType)
public void WriteMessage(Message message, Stream stream)
public ArraySegment`1<byte> WriteMessage(Message message, int maxMessageSize, BufferManager bufferManager, int messageOffset)
}
internal System.ServiceModel.Channels.MtomMessageEncoderFactory : MessageEncoderFactory {
private MtomMessageEncodingBindingElement owner
private MtomMessageEncoder encoder
public MtomMessageEncodingBindingElement Owner
public MessageEncoder Encoder
public MessageVersion MessageVersion
public void .ctor(MtomMessageEncodingBindingElement owner)
public MtomMessageEncodingBindingElement get_Owner()
public MessageEncoder get_Encoder()
public MessageVersion get_MessageVersion()
}
public System.ServiceModel.Channels.MtomMessageEncodingBindingElement : MessageEncodingBindingElement {
private MessageVersion version
private Encoding encoding
private int max_buffer_size
private int max_read_pool_size
private int max_write_pool_size
private XmlDictionaryReaderQuotas quotas
public int MaxBufferSize
public int MaxReadPoolSize
public int MaxWritePoolSize
public MessageVersion MessageVersion
public Encoding WriteEncoding
public XmlDictionaryReaderQuotas ReaderQuotas
public void .ctor(MessageVersion messageVersion, Encoding writeEncoding)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public int get_MaxReadPoolSize()
public void set_MaxReadPoolSize(int value)
public int get_MaxWritePoolSize()
public void set_MaxWritePoolSize(int value)
public MessageVersion get_MessageVersion()
public void set_MessageVersion(MessageVersion value)
public Encoding get_WriteEncoding()
public void set_WriteEncoding(Encoding value)
public XmlDictionaryReaderQuotas get_ReaderQuotas()
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
public MessageEncoderFactory CreateMessageEncoderFactory()
protected void OnImportPolicy(XmlElement assertion, MessageVersion messageVersion, MetadataImporter exporter, PolicyConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)
public void ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
public bool ShouldSerializeMessageVersion()
public bool ShouldSerializeReaderQuotas()
public bool ShouldSerializeWriteEncoding()
}
internal System.ServiceModel.Channels.NamedPipeChannelFactory`1 : TransportChannelFactoryBase`1<TChannel> {
private NamedPipeTransportBindingElement source
private XmlDictionaryReaderQuotas quotas
public void .ctor(NamedPipeTransportBindingElement source, BindingContext ctx)
protected TChannel OnCreateChannel(EndpointAddress address, Uri via)
}
internal System.ServiceModel.Channels.NamedPipeChannelListener`1 : InternalChannelListenerBase`1<TChannel> {
private NamedPipeTransportBindingElement source
private XmlDictionaryReaderQuotas quotas
private BindingContext context
private NamedPipeServerStream active_server
private AutoResetEvent server_release_handle
public void .ctor(NamedPipeTransportBindingElement source, BindingContext context)
protected TChannel OnAcceptChannel(TimeSpan timeout)
protected bool OnWaitForChannel(TimeSpan timeout)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
}
public System.ServiceModel.Channels.NamedPipeConnectionPoolSettings : object {
private string group_name
private TimeSpan idle_timeout
private int max_conn
public string GroupName
public TimeSpan IdleTimeout
public int MaxOutboundConnectionsPerEndpoint
internal void CopyPropertiesFrom(NamedPipeConnectionPoolSettings other)
public string get_GroupName()
public void set_GroupName(string value)
public TimeSpan get_IdleTimeout()
public void set_IdleTimeout(TimeSpan value)
public int get_MaxOutboundConnectionsPerEndpoint()
public void set_MaxOutboundConnectionsPerEndpoint(int value)
}
internal System.ServiceModel.Channels.NamedPipeReplyChannel : InternalReplyChannelBase {
private NamedPipeServerStream server
private TcpBinaryFrameManager frame
private MessageEncoder <Encoder>k__BackingField
public MessageEncoder Encoder
public void .ctor(ChannelListenerBase listener, MessageEncoder encoder, NamedPipeServerStream server)
public MessageEncoder get_Encoder()
private void set_Encoder(MessageEncoder value)
public RequestContext ReceiveRequest(TimeSpan timeout)
public bool TryReceiveRequest(TimeSpan timeout, RequestContext& context)
public bool WaitForRequest(TimeSpan timeout)
protected void OnClose(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
}
internal System.ServiceModel.Channels.NamedPipeRequestChannel : RequestChannelBase {
private TcpBinaryFrameManager frame
private MessageEncoder <Encoder>k__BackingField
public MessageEncoder Encoder
public void .ctor(ChannelFactoryBase factory, MessageEncoder encoder, EndpointAddress address, Uri via)
public MessageEncoder get_Encoder()
private void set_Encoder(MessageEncoder value)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
private void CreateClient(TimeSpan timeout)
public Message Request(Message input, TimeSpan timeout)
}
public System.ServiceModel.Channels.NamedPipeSettings : object {
public ApplicationContainerSettings ApplicationContainerSettings
public ApplicationContainerSettings get_ApplicationContainerSettings()
}
public System.ServiceModel.Channels.NamedPipeTransportBindingElement : ConnectionOrientedTransportBindingElement {
private NamedPipeConnectionPoolSettings pool
public NamedPipeConnectionPoolSettings ConnectionPoolSettings
public string Scheme
public Collection`1<SecurityIdentifier> AllowedSecurityIdentifiers
public NamedPipeSettings PipeSettings
protected void .ctor(NamedPipeTransportBindingElement elementToBeCloned)
public NamedPipeConnectionPoolSettings get_ConnectionPoolSettings()
public string get_Scheme()
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
public Collection`1<SecurityIdentifier> get_AllowedSecurityIdentifiers()
public NamedPipeSettings get_PipeSettings()
}
internal System.ServiceModel.Channels.NetTcp.TcpBinaryFrameManager : object {
public byte VersionRecord
public byte ModeRecord
public byte ViaRecord
public byte KnownEncodingRecord
public byte ExtendingEncodingRecord
public byte UnsizedEnvelopeRecord
public byte SizedEnvelopeRecord
public byte EndRecord
public byte FaultRecord
public byte UpgradeRequestRecord
public byte UpgradeResponseRecord
public byte PreambleAckRecord
public byte PreambleEndRecord
public byte UnsizedMessageTerminator
public byte SingletonUnsizedMode
public byte DuplexMode
public byte SimplexMode
public byte SingletonSizedMode
public byte Soap11EncodingUtf8
public byte Soap11EncodingUtf16
public byte Soap11EncodingUtf16LE
public byte Soap12EncodingUtf8
public byte Soap12EncodingUtf16
public byte Soap12EncodingUtf16LE
public byte Soap12EncodingMtom
public byte Soap12EncodingBinary
public byte Soap12EncodingBinaryWithDictionary
public byte UseExtendedEncodingRecord
private MyBinaryReader reader
private MyBinaryWriter writer
private Stream s
private MemoryStream buffer
private bool is_service_side
private int mode
private byte <EncodingRecord>k__BackingField
private string <ExtendedEncodingRecord>k__BackingField
private Uri <Via>k__BackingField
private Char[] convtest
private MessageEncoder encoder
private Byte[] empty_bytes
private XmlBinaryReaderSession reader_session
private int reader_session_items
private object read_lock
private object write_lock
private Byte[] eof_buffer
private MyXmlBinaryWriterSession writer_session
public byte EncodingRecord
public string ExtendedEncodingRecord
public Uri Via
public MessageEncoder Encoder
public void .ctor(int mode, Stream s, bool isServiceSide)
public byte get_EncodingRecord()
private void set_EncodingRecord(byte value)
public string get_ExtendedEncodingRecord()
private void set_ExtendedEncodingRecord(string value)
public Uri get_Via()
public void set_Via(Uri value)
public MessageEncoder get_Encoder()
public void set_Encoder(MessageEncoder value)
private void ResetWriteBuffer()
public Byte[] ReadSizedChunk()
private void WriteSizedChunk(Byte[] data, int index, int length)
public void ProcessPreambleInitiator()
public void ProcessPreambleAckInitiator()
public void ProcessPreambleAckRecipient()
public bool ProcessPreambleRecipient()
private bool ProcessPreambleRecipient(int initialByte)
public Message ReadSizedMessage()
public Message ReadUnsizedMessage(TimeSpan timeout)
public void WriteSizedMessage(Message message)
public void WriteUnsizedMessage(Message message, TimeSpan timeout)
public void WriteEndRecord()
public void ReadEndRecord()
}
internal System.ServiceModel.Channels.NetTcp.TcpChannelFactory`1 : TransportChannelFactoryBase`1<TChannel> {
private TcpChannelInfo info
public void .ctor(TcpTransportBindingElement source, BindingContext ctx)
protected TChannel OnCreateChannel(EndpointAddress address, Uri via)
}
internal System.ServiceModel.Channels.NetTcp.TcpChannelInfo : object {
private TransportBindingElement <BindingElement>k__BackingField
private MessageEncoder <MessageEncoder>k__BackingField
private XmlDictionaryReaderQuotas <ReaderQuotas>k__BackingField
public TransportBindingElement BindingElement
public MessageEncoder MessageEncoder
public XmlDictionaryReaderQuotas ReaderQuotas
public void .ctor(TransportBindingElement element, MessageEncoder encoder, XmlDictionaryReaderQuotas readerQuotas)
public TransportBindingElement get_BindingElement()
private void set_BindingElement(TransportBindingElement value)
public MessageEncoder get_MessageEncoder()
private void set_MessageEncoder(MessageEncoder value)
public XmlDictionaryReaderQuotas get_ReaderQuotas()
private void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
}
internal System.ServiceModel.Channels.NetTcp.TcpChannelListener`1 : InternalChannelListenerBase`1<TChannel> {
private BindingContext context
private TcpChannelInfo info
private TcpListener tcp_listener
private SynchronizedCollection`1<ManualResetEvent> accept_handles
private Queue`1<TcpClient> accepted_clients
private SynchronizedCollection`1<TChannel> accepted_channels
public void .ctor(TcpTransportBindingElement source, BindingContext context)
protected TChannel OnAcceptChannel(TimeSpan timeout)
internal TcpClient AcceptTcpClient(TimeSpan timeout)
protected bool OnWaitForChannel(TimeSpan timeout)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
private void ProcessClose(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
private void TcpListenerAcceptedClient(IAsyncResult result)
}
internal System.ServiceModel.Channels.NetTcp.TcpDuplexSessionChannel : DuplexChannelBase {
private TcpChannelInfo info
private TcpClient client
private bool is_service_side
private TcpBinaryFrameManager frame
private TcpDuplexSession session
private EndpointAddress counterpart_address
public MessageEncoder Encoder
public EndpointAddress RemoteAddress
public EndpointAddress LocalAddress
public IDuplexSession Session
internal TcpClient TcpClient
public void .ctor(ChannelFactoryBase factory, TcpChannelInfo info, EndpointAddress address, Uri via)
public void .ctor(ChannelListenerBase listener, TcpChannelInfo info, TcpClient client)
private EndpointAddress GetEndpointAddressFromTcpClient(TcpClient client)
public MessageEncoder get_Encoder()
public EndpointAddress get_RemoteAddress()
public EndpointAddress get_LocalAddress()
public IDuplexSession get_Session()
internal TcpClient get_TcpClient()
private void DiscardSession()
public void Send(Message message)
public void Send(Message message, TimeSpan timeout)
public bool TryReceive(TimeSpan timeout, Message& message)
public bool WaitForMessage(TimeSpan timeout)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
}
internal System.ServiceModel.Channels.NetTcp.TcpReplyChannel : InternalReplyChannelBase {
private TcpClient client
private TcpChannelInfo info
private TcpBinaryFrameManager frame
private bool close_started
private object close_lock
public MessageEncoder Encoder
public void .ctor(ChannelListenerBase listener, TcpChannelInfo info, TcpClient client)
public MessageEncoder get_Encoder()
public RequestContext ReceiveRequest(TimeSpan timeout)
public bool TryReceiveRequest(TimeSpan timeout, RequestContext& context)
public bool WaitForRequest(TimeSpan timeout)
protected void OnClose(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
}
internal System.ServiceModel.Channels.NetTcp.TcpRequestChannel : RequestChannelBase {
private TcpChannelInfo info
private TcpClient client
private TcpBinaryFrameManager frame
public MessageEncoder Encoder
public void .ctor(ChannelFactoryBase factory, TcpChannelInfo info, EndpointAddress address, Uri via)
public MessageEncoder get_Encoder()
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
private void CreateClient(TimeSpan timeout)
public Message Request(Message input, TimeSpan timeout)
}
public System.ServiceModel.Channels.OneWayBindingElement : BindingElement {
private ChannelPoolSettings pool
public ChannelPoolSettings ChannelPoolSettings
public int MaxAcceptedChannels
public bool PacketRoutable
private void .ctor(OneWayBindingElement other)
public ChannelPoolSettings get_ChannelPoolSettings()
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public bool CanBuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
public void set_ChannelPoolSettings(ChannelPoolSettings value)
public int get_MaxAcceptedChannels()
public void set_MaxAcceptedChannels(int value)
public bool get_PacketRoutable()
public void set_PacketRoutable(bool value)
public bool ShouldSerializeChannelPoolSettings()
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
}
public System.ServiceModel.Channels.OneWayBindingElementImporter : object {
private void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(MetadataImporter importer, PolicyConversionContext context)
}
internal System.ServiceModel.Channels.OneWayChannelFactory`1 : ChannelFactoryBase`1<TChannel> {
private IChannelFactory`1<TChannel> inner
public void .ctor(IChannelFactory`1<TChannel> inner)
protected TChannel OnCreateChannel(EndpointAddress address, Uri via)
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
}
internal System.ServiceModel.Channels.OneWayChannelListener`1 : ChannelListenerBase`1<TChannel> {
private IChannelListener`1<TChannel> inner
public Uri Uri
public void .ctor(IChannelListener`1<TChannel> inner)
public Uri get_Uri()
protected void OnAbort()
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected bool OnWaitForChannel(TimeSpan timeout)
protected IAsyncResult OnBeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state)
protected bool OnEndWaitForChannel(IAsyncResult result)
protected TChannel OnAcceptChannel(TimeSpan timeout)
protected IAsyncResult OnBeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object state)
protected TChannel OnEndAcceptChannel(IAsyncResult result)
}
internal System.ServiceModel.Channels.OutputChannelBase : ChannelBase {
private ChannelFactoryBase channel_factory
private EndpointAddress <RemoteAddress>k__BackingField
private Uri <Via>k__BackingField
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
public EndpointAddress RemoteAddress
public Uri Via
public void .ctor(ChannelFactoryBase factory, EndpointAddress remoteAddress, Uri via)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
public EndpointAddress get_RemoteAddress()
private void set_RemoteAddress(EndpointAddress value)
public Uri get_Via()
private void set_Via(Uri value)
public IAsyncResult BeginSend(Message message, AsyncCallback callback, object state)
public IAsyncResult BeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public void EndSend(IAsyncResult result)
public void Send(Message message)
public void Send(Message message, TimeSpan timeout)
}
internal System.ServiceModel.Channels.PeerChannelFactory`1 : TransportChannelFactoryBase`1<TChannel> {
private PeerTransportBindingElement source
private PeerResolver <Resolver>k__BackingField
public PeerResolver Resolver
public PeerTransportBindingElement Source
public void .ctor(PeerTransportBindingElement source, BindingContext ctx)
public PeerResolver get_Resolver()
public void set_Resolver(PeerResolver value)
public PeerTransportBindingElement get_Source()
protected TChannel OnCreateChannel(EndpointAddress address, Uri via)
}
internal System.ServiceModel.Channels.PeerChannelListener`1 : InternalChannelListenerBase`1<TChannel> {
private PeerTransportBindingElement source
private BindingContext context
private TChannel channel
private AutoResetEvent accept_handle
private PeerResolver <Resolver>k__BackingField
public PeerResolver Resolver
public PeerTransportBindingElement Source
public void .ctor(PeerTransportBindingElement source, BindingContext context)
public PeerResolver get_Resolver()
public void set_Resolver(PeerResolver value)
public PeerTransportBindingElement get_Source()
protected TChannel OnAcceptChannel(TimeSpan timeout)
private TChannel PopulateChannel(TimeSpan timeout)
protected bool OnWaitForChannel(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
protected void OnClose(TimeSpan timeout)
protected void OnAbort()
private void <OnAcceptChannel>b__11_0(object <p0>, EventArgs <p1>)
}
internal System.ServiceModel.Channels.PeerCustomResolver : PeerResolver {
private Guid client_id
private ICustomPeerResolverClient client
private string preserved_mesh_id
public bool CanShareReferrals
public void .ctor(ServiceEndpoint endpoint)
public bool get_CanShareReferrals()
public object Register(string meshId, PeerNodeAddress nodeAddress, TimeSpan timeout)
public ReadOnlyCollection`1<PeerNodeAddress> Resolve(string meshId, int maxAddresses, TimeSpan timeout)
public void Unregister(object registrationId, TimeSpan timeout)
public void Update(object registrationId, PeerNodeAddress updatedNodeAddress, TimeSpan timeout)
}
public System.ServiceModel.Channels.PeerCustomResolverBindingElement : PeerResolverBindingElement {
private BindingContext context
private PeerCustomResolverSettings settings
private PeerReferralPolicy <ReferralPolicy>k__BackingField
public EndpointAddress Address
public Binding Binding
public PeerReferralPolicy ReferralPolicy
public void .ctor(PeerCustomResolverBindingElement other)
public void .ctor(BindingContext context, PeerCustomResolverSettings settings)
public void .ctor(PeerCustomResolverSettings settings)
public EndpointAddress get_Address()
public void set_Address(EndpointAddress value)
public Binding get_Binding()
public void set_Binding(Binding value)
public PeerReferralPolicy get_ReferralPolicy()
public void set_ReferralPolicy(PeerReferralPolicy value)
public bool CanBuildChannelFactory(BindingContext context)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public BindingElement Clone()
public PeerResolver CreatePeerResolver()
public T GetProperty(BindingContext context)
}
internal System.ServiceModel.Channels.PeerDuplexChannel : DuplexChannelBase {
private IChannelFactory`1<IDuplexSessionChannel> client_factory
private PeerTransportBindingElement binding
private PeerResolver resolver
private PeerNode node
private ServiceHost listener_host
private TcpChannelInfo info
private List`1<RemotePeerConnection> peers
private PeerNodeAddress local_node_address
private Queue`1<Message> queue
private AutoResetEvent receive_handle
public void .ctor(IPeerChannelManager factory, EndpointAddress address, Uri via, PeerResolver resolver)
public void .ctor(IPeerChannelManager listener)
public T GetProperty()
private IPeerConnectorClient CreateInnerClient(RemotePeerConnection conn)
public void Send(Message message, TimeSpan timeout)
internal void EnqueueMessage(Message message)
public bool TryReceive(TimeSpan timeout, Message& message)
public bool WaitForMessage(TimeSpan timeout)
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
}
public System.ServiceModel.Channels.PeerResolverBindingElement : BindingElement {
public PeerReferralPolicy ReferralPolicy
protected void .ctor(PeerResolverBindingElement other)
public PeerReferralPolicy get_ReferralPolicy()
public void set_ReferralPolicy(PeerReferralPolicy value)
public PeerResolver CreatePeerResolver()
}
public System.ServiceModel.Channels.PeerTransportBindingElement : TransportBindingElement {
private long max_recv_message_size
private int port
private PeerSecuritySettings security
private IPAddress <ListenIPAddress>k__BackingField
public IPAddress ListenIPAddress
public long MaxReceivedMessageSize
public int Port
public string Scheme
public PeerSecuritySettings Security
private void .ctor(PeerTransportBindingElement other)
public IPAddress get_ListenIPAddress()
public void set_ListenIPAddress(IPAddress value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public int get_Port()
public void set_Port(int value)
public string get_Scheme()
public bool CanBuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
public PeerSecuritySettings get_Security()
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext contxt)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
}
internal System.ServiceModel.Channels.PnrpPeerResolver : PeerResolver {
public bool CanShareReferrals
public void .ctor(PnrpPeerResolverBindingElement binding)
public bool get_CanShareReferrals()
public object Register(string meshId, PeerNodeAddress nodeAddress, TimeSpan timeout)
public ReadOnlyCollection`1<PeerNodeAddress> Resolve(string meshId, int maxAddresses, TimeSpan timeout)
public void Unregister(object registrationId, TimeSpan timeout)
public void Update(object registrationId, PeerNodeAddress updatedNodeAddress, TimeSpan timeout)
}
public System.ServiceModel.Channels.PnrpPeerResolverBindingElement : PeerResolverBindingElement {
private PeerReferralPolicy <ReferralPolicy>k__BackingField
public PeerReferralPolicy ReferralPolicy
private void .ctor(PnrpPeerResolverBindingElement other)
public PeerReferralPolicy get_ReferralPolicy()
public void set_ReferralPolicy(PeerReferralPolicy value)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public BindingElement Clone()
public PeerResolver CreatePeerResolver()
public T GetProperty(BindingContext context)
}
internal System.ServiceModel.Channels.PolicyImportHelper : object {
internal string SecurityPolicyNS
internal string PolicyNS
internal string MimeSerializationNS
internal string HttpAuthNS
internal string FramingPolicyNS
internal string NetBinaryEncodingNS
internal string WSSecurityNS
internal XmlElement GetTransportBindingPolicy(PolicyAssertionCollection collection)
internal XmlElement GetStreamedMessageFramingPolicy(PolicyAssertionCollection collection)
internal XmlElement GetBinaryMessageEncodingPolicy(PolicyAssertionCollection collection)
internal XmlElement GetMtomMessageEncodingPolicy(PolicyAssertionCollection collection)
private XmlElement FindAndRemove(PolicyAssertionCollection collection, string name, string ns)
internal List`1<XmlElement> FindAssertionByNS(PolicyAssertionCollection collection, string ns)
internal List`1<XmlElement> GetPolicyElements(XmlElement root, Boolean& error)
internal bool FindPolicyElement(MetadataImporter importer, XmlElement root, XmlQualifiedName name, bool required, bool removeWhenFound, XmlElement& element)
internal bool FindPolicyElement(XmlElement root, XmlQualifiedName name, bool removeWhenFound, XmlElement& element)
internal XmlElement GetElement(MetadataImporter importer, XmlElement root, string name, string ns)
internal XmlElement GetElement(MetadataImporter importer, XmlElement root, string name, string ns, bool required)
internal XmlElement GetElement(MetadataImporter importer, XmlElement root, XmlQualifiedName name, bool required)
internal XmlElement WrapPolicy(XmlElement element)
internal void AddWrappedPolicyElement(XmlElement root, XmlElement element)
internal void AddWrappedPolicyElements(XmlElement root, XmlElement[] elements)
}
public System.ServiceModel.Channels.PrivacyNoticeBindingElement : BindingElement {
private Uri <Url>k__BackingField
private int <Version>k__BackingField
public Uri Url
public int Version
public void .ctor(PrivacyNoticeBindingElement elementToBeCloned)
public Uri get_Url()
public void set_Url(Uri value)
public int get_Version()
public void set_Version(int value)
public BindingElement Clone()
public T GetProperty(BindingContext context)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
}
public System.ServiceModel.Channels.PrivacyNoticeBindingElementImporter : object {
private void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(MetadataImporter importer, PolicyConversionContext policyContext)
}
public System.ServiceModel.Channels.ReceiveContext : object {
public string Name
public ReceiveContextState State
public ReceiveContextState get_State()
public void add_Faulted(EventHandler value)
public void remove_Faulted(EventHandler value)
public void Abandon(Exception exception, TimeSpan timeout)
public void Abandon(TimeSpan timeout)
public IAsyncResult BeginAbandon(Exception exception, TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginAbandon(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginComplete(TimeSpan timeout, AsyncCallback callback, object state)
public void Complete(TimeSpan timeout)
public void EndAbandon(IAsyncResult result)
public void EndComplete(IAsyncResult result)
public bool TryGet(Message message, ReceiveContext& property)
public bool TryGet(MessageProperties properties, ReceiveContext& property)
}
public System.ServiceModel.Channels.ReceiveContextState : Enum {
public int value__
public ReceiveContextState Abandoned
public ReceiveContextState Abandoning
public ReceiveContextState Completed
public ReceiveContextState Completing
public ReceiveContextState Faulted
public ReceiveContextState Received
}
public System.ServiceModel.Channels.RedirectionDuration : object {
public string Namespace
public RedirectionDuration Permanent
public RedirectionDuration Temporary
public string Value
public string get_Namespace()
public RedirectionDuration get_Permanent()
public RedirectionDuration get_Temporary()
public string get_Value()
public RedirectionDuration Create(string duration, string ns)
public bool op_Equality(RedirectionDuration left, RedirectionDuration right)
public bool op_Inequality(RedirectionDuration left, RedirectionDuration right)
}
public System.ServiceModel.Channels.RedirectionException : CommunicationException {
public RedirectionDuration Duration
public IEnumerable`1<RedirectionLocation> Locations
public RedirectionScope Scope
public RedirectionType Type
public void .ctor(RedirectionType type, RedirectionDuration duration, RedirectionScope scope, Exception innerException, RedirectionLocation[] locations)
public void .ctor(RedirectionType type, RedirectionDuration duration, RedirectionScope scope, RedirectionLocation[] locations)
public void .ctor(string message, RedirectionType type, RedirectionDuration duration, RedirectionScope scope, Exception innerException, RedirectionLocation[] locations)
public void .ctor(string message, RedirectionType type, RedirectionDuration duration, RedirectionScope scope, RedirectionLocation[] locations)
public RedirectionDuration get_Duration()
public IEnumerable`1<RedirectionLocation> get_Locations()
public RedirectionScope get_Scope()
public RedirectionType get_Type()
}
public System.ServiceModel.Channels.RedirectionLocation : object {
public Uri Address
public void .ctor(Uri address)
public Uri get_Address()
}
public System.ServiceModel.Channels.RedirectionScope : object {
public RedirectionScope Endpoint
public RedirectionScope Message
public string Namespace
public RedirectionScope Session
public string Value
public RedirectionScope get_Endpoint()
public RedirectionScope get_Message()
public string get_Namespace()
public RedirectionScope get_Session()
public string get_Value()
public RedirectionScope Create(string scope, string ns)
public bool op_Equality(RedirectionScope left, RedirectionScope right)
public bool op_Inequality(RedirectionScope left, RedirectionScope right)
}
public System.ServiceModel.Channels.RedirectionType : object {
public RedirectionType Cache
public string Namespace
public RedirectionType Resource
public RedirectionType UseIntermediary
public string Value
public RedirectionType get_Cache()
public string get_Namespace()
public RedirectionType get_Resource()
public RedirectionType get_UseIntermediary()
public string get_Value()
public RedirectionType Create(string type, string ns)
public bool op_Equality(RedirectionType left, RedirectionType right)
public bool op_Inequality(RedirectionType left, RedirectionType right)
}
public System.ServiceModel.Channels.ReliableSessionBindingElement : BindingElement {
private TimeSpan <AcknowledgementInterval>k__BackingField
private bool <FlowControlEnabled>k__BackingField
private TimeSpan <InactivityTimeout>k__BackingField
private int <MaxPendingChannels>k__BackingField
private int <MaxRetryCount>k__BackingField
private int <MaxTransferWindowSize>k__BackingField
private bool <Ordered>k__BackingField
private ReliableMessagingVersion <ReliableMessagingVersion>k__BackingField
public TimeSpan AcknowledgementInterval
public bool FlowControlEnabled
public TimeSpan InactivityTimeout
public int MaxPendingChannels
public int MaxRetryCount
public int MaxTransferWindowSize
public bool Ordered
public ReliableMessagingVersion ReliableMessagingVersion
public void .ctor(bool ordered)
public TimeSpan get_AcknowledgementInterval()
public void set_AcknowledgementInterval(TimeSpan value)
public bool get_FlowControlEnabled()
public void set_FlowControlEnabled(bool value)
public TimeSpan get_InactivityTimeout()
public void set_InactivityTimeout(TimeSpan value)
public int get_MaxPendingChannels()
public void set_MaxPendingChannels(int value)
public int get_MaxRetryCount()
public void set_MaxRetryCount(int value)
public int get_MaxTransferWindowSize()
public void set_MaxTransferWindowSize(int value)
public bool get_Ordered()
public void set_Ordered(bool value)
public ReliableMessagingVersion get_ReliableMessagingVersion()
public void set_ReliableMessagingVersion(ReliableMessagingVersion value)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public bool CanBuildChannelFactory(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
}
public System.ServiceModel.Channels.ReliableSessionBindingElementImporter : object {
private void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(MetadataImporter importer, PolicyConversionContext context)
}
public System.ServiceModel.Channels.RemoteEndpointMessageProperty : object {
private string <Address>k__BackingField
private int <Port>k__BackingField
public string Name
public string Address
public int Port
public string get_Name()
public void .ctor(string address, int port)
public string get_Address()
private void set_Address(string value)
public int get_Port()
private void set_Port(int value)
}
internal System.ServiceModel.Channels.ReplyChannelBase : ChannelBase {
private ChannelListenerBase listener
private TryReceiveDelegate try_recv_delegate
private object async_result_lock
private HashSet`1<Thread> currentAsyncThreads
private HashSet`1<IAsyncResult> currentAsyncResults
private Func`2<TimeSpan, bool> wait_delegate
private Func`2<TimeSpan, RequestContext> recv_delegate
private Action`1<TimeSpan> open_delegate
private Action`1<TimeSpan> close_delegate
public ChannelListenerBase Listener
public EndpointAddress LocalAddress
public void .ctor(ChannelListenerBase listener)
public ChannelListenerBase get_Listener()
public EndpointAddress get_LocalAddress()
public T GetProperty()
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
public bool CancelAsync(TimeSpan timeout)
public bool TryReceiveRequest()
public bool TryReceiveRequest(TimeSpan timeout, RequestContext& context)
public IAsyncResult BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state)
public bool EndTryReceiveRequest(IAsyncResult result)
public bool EndTryReceiveRequest(IAsyncResult result, RequestContext& context)
public bool WaitForRequest()
public bool WaitForRequest(TimeSpan timeout)
public IAsyncResult BeginWaitForRequest(TimeSpan timeout, AsyncCallback callback, object state)
public bool EndWaitForRequest(IAsyncResult result)
public RequestContext ReceiveRequest()
public RequestContext ReceiveRequest(TimeSpan timeout)
public IAsyncResult BeginReceiveRequest(AsyncCallback callback, object state)
public IAsyncResult BeginReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state)
public RequestContext EndReceiveRequest(IAsyncResult result)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
}
internal System.ServiceModel.Channels.RequestChannelBase : ChannelBase {
private ChannelFactoryBase channel_factory
private EndpointAddress address
private Uri via
private Func`3<Message, TimeSpan, Message> request_delegate
private Action`1<TimeSpan> open_delegate
private Action`1<TimeSpan> close_delegate
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
public EndpointAddress RemoteAddress
public Uri Via
public void .ctor(ChannelFactoryBase factory, EndpointAddress address, Uri via)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
public EndpointAddress get_RemoteAddress()
public Uri get_Via()
public T GetProperty()
public Message Request(Message message)
public Message Request(Message message, TimeSpan timeout)
public IAsyncResult BeginRequest(Message message, AsyncCallback callback, object state)
public IAsyncResult BeginRequest(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public Message EndRequest(IAsyncResult result)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
}
public System.ServiceModel.Channels.RequestContext : object {
public Message RequestMessage
public Message get_RequestMessage()
public void Abort()
public IAsyncResult BeginReply(Message message, AsyncCallback callback, object state)
public IAsyncResult BeginReply(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public void Close()
public void Close(TimeSpan timeout)
public void EndReply(IAsyncResult result)
public void Reply(Message message)
public void Reply(Message message, TimeSpan timeout)
protected void Dispose(bool disposing)
private void System.IDisposable.Dispose()
}
public System.ServiceModel.Channels.RetryException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
}
internal System.ServiceModel.Channels.Security.AsymmetricSecurityCapabilities : SecurityCapabilities {
private AsymmetricSecurityBindingElement element
public bool AllowSerializedSigningTokenOnReply
public SecurityBindingElement Element
public MessageProtectionOrder MessageProtectionOrder
public SecurityTokenParameters InitiatorParameters
public SecurityTokenParameters RecipientParameters
public bool RequireSignatureConfirmation
public string DefaultSignatureAlgorithm
public string DefaultKeyWrapAlgorithm
public void .ctor(AsymmetricSecurityBindingElement element)
public bool get_AllowSerializedSigningTokenOnReply()
public SecurityBindingElement get_Element()
public MessageProtectionOrder get_MessageProtectionOrder()
public SecurityTokenParameters get_InitiatorParameters()
public SecurityTokenParameters get_RecipientParameters()
public bool get_RequireSignatureConfirmation()
public string get_DefaultSignatureAlgorithm()
public string get_DefaultKeyWrapAlgorithm()
}
internal System.ServiceModel.Channels.Security.InitiatorMessageSecurityBindingSupport : MessageSecurityBindingSupport {
private ChannelFactoryBase factory
private EndpointAddress message_to
private SecurityToken encryption_token
private SecurityToken signing_token
public IDefaultCommunicationTimeouts Timeouts
public SecurityToken EncryptionToken
public SecurityToken SigningToken
public void .ctor(SecurityCapabilities elementSupport, SecurityTokenManager manager, ChannelProtectionRequirements requirements)
public IDefaultCommunicationTimeouts get_Timeouts()
public void Prepare(ChannelFactoryBase factory, EndpointAddress address)
public SecurityToken get_EncryptionToken()
public SecurityToken get_SigningToken()
protected void ReleaseCore()
public SecurityTokenRequirement CreateRequirement()
public SecurityTokenAuthenticator CreateTokenAuthenticator(SecurityTokenParameters p, SecurityTokenResolver& resolver)
}
internal System.ServiceModel.Channels.Security.InitiatorMessageSecurityGenerator : MessageSecurityGenerator {
private EndpointAddress message_to
private InitiatorMessageSecurityBindingSupport security
public SecurityTokenParameters Parameters
public SecurityTokenParameters CounterParameters
public MessageDirection Direction
public EndpointAddress MessageTo
public ScopedMessagePartSpecification SignatureParts
public ScopedMessagePartSpecification EncryptionParts
public void .ctor(Message msg, InitiatorMessageSecurityBindingSupport security, EndpointAddress messageTo)
public SecurityTokenParameters get_Parameters()
public SecurityTokenParameters get_CounterParameters()
public MessageDirection get_Direction()
public EndpointAddress get_MessageTo()
public bool ShouldIncludeToken(SecurityTokenInclusionMode mode, bool isInitialized)
public ScopedMessagePartSpecification get_SignatureParts()
public ScopedMessagePartSpecification get_EncryptionParts()
}
internal System.ServiceModel.Channels.Security.InitiatorSecureMessageDecryptor : SecureMessageDecryptor {
private InitiatorMessageSecurityBindingSupport security
private SecurityMessageProperty request_security
public SecurityMessageProperty RequestSecurity
public MessageDirection Direction
public SecurityTokenParameters Parameters
public SecurityTokenParameters CounterParameters
public void .ctor(Message source, SecurityMessageProperty secprop, InitiatorMessageSecurityBindingSupport security)
public SecurityMessageProperty get_RequestSecurity()
public MessageDirection get_Direction()
public SecurityTokenParameters get_Parameters()
public SecurityTokenParameters get_CounterParameters()
}
internal System.ServiceModel.Channels.Security.ISecurityChannelSource {
public MessageSecurityBindingSupport Support
public MessageSecurityBindingSupport get_Support()
}
internal System.ServiceModel.Channels.Security.MessageSecurityBindingSupport : object {
private SecurityTokenManager manager
private ChannelProtectionRequirements requirements
private SecurityTokenSerializer serializer
private SecurityCapabilities element_support
private SecurityTokenAuthenticator authenticator
private SecurityTokenResolver auth_token_resolver
public IDefaultCommunicationTimeouts Timeouts
public ChannelProtectionRequirements ChannelRequirements
public SecurityTokenManager SecurityTokenManager
public SecurityTokenSerializer TokenSerializer
public SecurityTokenAuthenticator TokenAuthenticator
public SecurityTokenResolver OutOfBandTokenResolver
public SecurityToken EncryptionToken
public SecurityToken SigningToken
public SecurityBindingElement Element
public bool AllowSerializedSigningTokenOnReply
public MessageProtectionOrder MessageProtectionOrder
public SecurityTokenParameters InitiatorParameters
public SecurityTokenParameters RecipientParameters
public bool RequireSignatureConfirmation
public string DefaultSignatureAlgorithm
public string DefaultKeyWrapAlgorithm
protected void .ctor(SecurityCapabilities elementSupport, SecurityTokenManager manager, ChannelProtectionRequirements requirements)
public void Initialize(SecurityTokenManager manager, ChannelProtectionRequirements requirements)
public IDefaultCommunicationTimeouts get_Timeouts()
public ChannelProtectionRequirements get_ChannelRequirements()
public SecurityTokenManager get_SecurityTokenManager()
public SecurityTokenSerializer get_TokenSerializer()
public SecurityTokenAuthenticator get_TokenAuthenticator()
public SecurityTokenResolver get_OutOfBandTokenResolver()
public SecurityToken get_EncryptionToken()
public SecurityToken get_SigningToken()
public SecurityBindingElement get_Element()
public bool get_AllowSerializedSigningTokenOnReply()
public MessageProtectionOrder get_MessageProtectionOrder()
public SecurityTokenParameters get_InitiatorParameters()
public SecurityTokenParameters get_RecipientParameters()
public bool get_RequireSignatureConfirmation()
public string get_DefaultSignatureAlgorithm()
public string get_DefaultKeyWrapAlgorithm()
public SecurityTokenProvider CreateTokenProvider(SecurityTokenRequirement requirement)
public SecurityTokenAuthenticator CreateTokenAuthenticator(SecurityTokenParameters p, SecurityTokenResolver& resolver)
protected void PrepareAuthenticator()
protected void InitializeRequirement(SecurityTokenParameters p, SecurityTokenRequirement r)
public void Release()
protected void ReleaseCore()
public SupportingTokenInfoCollection CollectSupportingTokens(string action)
private void CollectSupportingTokensCore(SupportingTokenInfoCollection l, SupportingTokenParameters s, bool required)
private SecurityToken GetSigningToken(SecurityTokenParameters p)
private SecurityToken GetExchangeToken(SecurityTokenParameters p)
public SecurityToken GetToken(SecurityTokenRequirement requirement, SecurityTokenParameters targetParams, SecurityKeyUsage usage)
public SecurityTokenRequirement CreateRequirement()
}
internal System.ServiceModel.Channels.Security.MessageSecurityGenerator : object {
private Message msg
private SecurityMessageProperty secprop
private MessageSecurityBindingSupport security
private int idbase
public Message Message
public MessageSecurityBindingSupport Security
public SecurityTokenParameters Parameters
public SecurityTokenParameters CounterParameters
public MessageDirection Direction
public EndpointAddress MessageTo
public ScopedMessagePartSpecification SignatureParts
public ScopedMessagePartSpecification EncryptionParts
public MessagePartSpecification SignaturePart
public MessagePartSpecification EncryptionPart
public bool ShouldOutputEncryptedKey
public void .ctor(Message msg, MessageSecurityBindingSupport security)
public Message get_Message()
public MessageSecurityBindingSupport get_Security()
public SecurityTokenParameters get_Parameters()
public SecurityTokenParameters get_CounterParameters()
public MessageDirection get_Direction()
public EndpointAddress get_MessageTo()
public ScopedMessagePartSpecification get_SignatureParts()
public ScopedMessagePartSpecification get_EncryptionParts()
public MessagePartSpecification get_SignaturePart()
public MessagePartSpecification get_EncryptionPart()
public bool ShouldIncludeToken(SecurityTokenInclusionMode mode, bool isInitialized)
public bool get_ShouldOutputEncryptedKey()
public Message SecureMessage()
private Signature CreateSignature(XmlDocument doc, XmlElement body, XmlNamespaceManager nsmgr, SupportingTokenInfoCollection tokenInfos, SecurityKeyIdentifierClause actualClause, SymmetricAlgorithm actualKey, SecurityToken signToken, bool includeSigToken, bool signatureProtection, WSSecurityMessageHeader header, Collection`1<WSSignedXml> endorsedSignatures, String& bodyId)
private void AddAddressingToHeader(MessageHeaders headers)
private DerivedKeySecurityToken CreateDerivedKey(string id, SecurityKeyIdentifierClause actualClause, SymmetricAlgorithm actualKey)
private void AddTimestampToHeader(WSSecurityMessageHeader header, string id)
private void CreateReference(Signature sig, XmlElement el, string id)
private void CreateReference(Signature sig, XmlDocument doc, string id)
private Transform CreateTransform(string url)
private EncryptedData Encrypt(XmlElement target, SymmetricAlgorithm actualKey, string ekeyId, ReferenceList refList, SecurityKeyIdentifierClause encClause, EncryptedXml exml, XmlDocument doc, string elementType)
private string GenerateId(XmlDocument doc)
public string GetAction()
}
internal System.ServiceModel.Channels.Security.RecipientMessageSecurityBindingSupport : MessageSecurityBindingSupport {
private ChannelListenerBase listener
private Uri listen_uri
private SecurityToken encryption_token
private SecurityToken signing_token
public IDefaultCommunicationTimeouts Timeouts
public SecurityToken EncryptionToken
public SecurityToken SigningToken
public void .ctor(SecurityCapabilities elementSupport, SecurityTokenManager manager, ChannelProtectionRequirements requirements)
public IDefaultCommunicationTimeouts get_Timeouts()
public void Prepare(ChannelListenerBase listener, Uri listenUri)
public SecurityToken get_EncryptionToken()
public SecurityToken get_SigningToken()
protected void ReleaseCore()
public SecurityTokenRequirement CreateRequirement()
public SecurityTokenAuthenticator CreateTokenAuthenticator(SecurityTokenParameters p, SecurityTokenResolver& resolver)
}
internal System.ServiceModel.Channels.Security.RecipientMessageSecurityGenerator : MessageSecurityGenerator {
private RecipientMessageSecurityBindingSupport security
public SecurityTokenParameters Parameters
public SecurityTokenParameters CounterParameters
public MessageDirection Direction
public EndpointAddress MessageTo
public ScopedMessagePartSpecification SignatureParts
public ScopedMessagePartSpecification EncryptionParts
public void .ctor(Message msg, SecurityMessageProperty requestSecProp, RecipientMessageSecurityBindingSupport security)
public SecurityTokenParameters get_Parameters()
public SecurityTokenParameters get_CounterParameters()
public MessageDirection get_Direction()
public EndpointAddress get_MessageTo()
public bool ShouldIncludeToken(SecurityTokenInclusionMode mode, bool isInitialized)
public ScopedMessagePartSpecification get_SignatureParts()
public ScopedMessagePartSpecification get_EncryptionParts()
}
internal System.ServiceModel.Channels.Security.RecipientSecureMessageDecryptor : SecureMessageDecryptor {
private RecipientMessageSecurityBindingSupport security
public MessageDirection Direction
public SecurityMessageProperty RequestSecurity
public SecurityTokenParameters Parameters
public SecurityTokenParameters CounterParameters
public void .ctor(Message source, RecipientMessageSecurityBindingSupport security)
public MessageDirection get_Direction()
public SecurityMessageProperty get_RequestSecurity()
public SecurityTokenParameters get_Parameters()
public SecurityTokenParameters get_CounterParameters()
}
internal System.ServiceModel.Channels.Security.SecureMessageDecryptor : object {
private Message source_message
private MessageBuffer buf
private MessageSecurityBindingSupport security
private XmlDocument doc
private XmlNamespaceManager nsmgr
private SecurityMessageProperty sec_prop
private WSSecurityMessageHeader wss_header
private WSSecurityMessageHeaderReader wss_header_reader
private List`1<MessageHeaderInfo> headers
private SecurityTokenResolver token_resolver
private List`1<SecurityToken> tokens
public MessageDirection Direction
public SecurityTokenParameters Parameters
public SecurityTokenParameters CounterParameters
public SecurityMessageProperty RequestSecurity
public SecurityTokenResolver TokenResolver
protected void .ctor(Message source, MessageSecurityBindingSupport security)
public MessageDirection get_Direction()
public SecurityTokenParameters get_Parameters()
public SecurityTokenParameters get_CounterParameters()
public SecurityMessageProperty get_RequestSecurity()
public SecurityTokenResolver get_TokenResolver()
public Message DecryptMessage()
private void ReadHeaders(Message srcmsg)
private void ExtractSecurity()
private void ProcessSupportingTokens(SignedXml sxml)
private void ValidateTokensByParameters(SupportingTokenParameters supp, List`1<SupportingTokenInfo> tokens, bool optional)
private void ValidateTokensByParameters(IEnumerable`1<SecurityTokenParameters> plist, List`1<SupportingTokenInfo> tokens, bool optional, SecurityTokenAttachmentMode attachMode)
private WSSignedXml GetSignatureForToken(SecurityToken token)
private SupportingTokenSpecification ValidateTokensByParameters(SecurityTokenAuthenticator a, SecurityTokenResolver r, List`1<SupportingTokenInfo> tokens)
private string GetAction()
}
internal System.ServiceModel.Channels.Security.SecurityCapabilities : object {
public SecurityBindingElement Element
public bool AllowSerializedSigningTokenOnReply
public MessageProtectionOrder MessageProtectionOrder
public SecurityTokenParameters InitiatorParameters
public SecurityTokenParameters RecipientParameters
public bool RequireSignatureConfirmation
public string DefaultKeyWrapAlgorithm
public string DefaultSignatureAlgorithm
public ProtectionLevel SupportedRequestProtectionLevel
public ProtectionLevel SupportedResponseProtectionLevel
public bool SupportsClientAuthentication
public bool SupportsClientWindowsIdentity
public bool SupportsServerAuthentication
public SecurityBindingElement get_Element()
public bool get_AllowSerializedSigningTokenOnReply()
public MessageProtectionOrder get_MessageProtectionOrder()
public SecurityTokenParameters get_InitiatorParameters()
public SecurityTokenParameters get_RecipientParameters()
public bool get_RequireSignatureConfirmation()
public string get_DefaultKeyWrapAlgorithm()
public string get_DefaultSignatureAlgorithm()
public ProtectionLevel get_SupportedRequestProtectionLevel()
public ProtectionLevel get_SupportedResponseProtectionLevel()
public bool get_SupportsClientAuthentication()
public bool get_SupportsClientWindowsIdentity()
public bool get_SupportsServerAuthentication()
}
internal System.ServiceModel.Channels.Security.SecurityChannelListener`1 : ChannelListenerBase`1<TChannel> {
private IChannelListener`1<TChannel> inner
private RecipientMessageSecurityBindingSupport security
public RecipientMessageSecurityBindingSupport SecuritySupport
public Uri Uri
public void .ctor(IChannelListener`1<TChannel> innerListener, RecipientMessageSecurityBindingSupport security)
public RecipientMessageSecurityBindingSupport get_SecuritySupport()
public T GetProperty()
private TChannel CreateSecurityWrapper(TChannel src)
private void AcquireTokens()
private void ReleaseTokens()
protected TChannel OnAcceptChannel(TimeSpan timeout)
protected IAsyncResult OnBeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object state)
protected TChannel OnEndAcceptChannel(IAsyncResult result)
protected bool OnWaitForChannel(TimeSpan timeout)
protected IAsyncResult OnBeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state)
protected bool OnEndWaitForChannel(IAsyncResult result)
public Uri get_Uri()
protected void OnAbort()
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
}
internal System.ServiceModel.Channels.Security.SecurityDuplexSession : DuplexSessionBase {
private SecurityDuplexSessionChannel channel
public TimeSpan DefaultCloseTimeout
public void .ctor(SecurityDuplexSessionChannel channel)
public TimeSpan get_DefaultCloseTimeout()
public void Close(TimeSpan timeout)
}
internal System.ServiceModel.Channels.Security.SecurityDuplexSessionChannel : DuplexChannelBase {
private IChannel channel
private InitiatorMessageSecurityBindingSupport security_initiator
private RecipientMessageSecurityBindingSupport security_recipient
private SecurityDuplexSession session
public IChannel Channel
public IDuplexSession Session
public void .ctor(ChannelFactoryBase factory, IChannel innerChannel, EndpointAddress remoteAddress, Uri via, InitiatorMessageSecurityBindingSupport security)
public void .ctor(ChannelListenerBase listener, IChannel innerChannel, RecipientMessageSecurityBindingSupport security)
public IChannel get_Channel()
public IDuplexSession get_Session()
private void InitializeSecurityFunctionality(InitiatorMessageSecurityBindingSupport security)
private void InitializeSecurityFunctionality(RecipientMessageSecurityBindingSupport security)
protected void OnOpen(TimeSpan timeout)
protected void OnClose(TimeSpan timeout)
protected void OnAbort()
public bool TryReceive(TimeSpan timeout, Message& message)
public bool WaitForMessage(TimeSpan timeout)
public void Send(Message message)
public void Send(Message message, TimeSpan timeout)
private Message SecureMessage(Message msg)
private Message DecryptMessage(Message msg)
}
internal System.ServiceModel.Channels.Security.SecurityReplyChannel : InternalReplyChannelBase {
private IReplyChannel inner
public SecurityChannelListener`1<IReplyChannel> Source
public void .ctor(SecurityChannelListener`1<IReplyChannel> source, IReplyChannel innerChannel)
public SecurityChannelListener`1<IReplyChannel> get_Source()
protected void OnOpen(TimeSpan timeout)
protected void OnClose(TimeSpan timeout)
public RequestContext ReceiveRequest(TimeSpan timeout)
public bool TryReceiveRequest(TimeSpan timeout, RequestContext& context)
public bool WaitForRequest(TimeSpan timeout)
public T GetProperty()
}
internal System.ServiceModel.Channels.Security.SecurityRequestChannel : SecurityRequestChannelBase {
private SecurityChannelFactory`1<IRequestChannel> source
public ChannelFactoryBase Factory
public void .ctor(IRequestChannel innerChannel, SecurityChannelFactory`1<IRequestChannel> source)
public ChannelFactoryBase get_Factory()
}
internal System.ServiceModel.Channels.Security.SecurityRequestChannelBase : LayeredRequestChannel {
private InitiatorMessageSecurityBindingSupport security
private SecurityMessageProperty secprop
protected void .ctor(IRequestChannel innerChannel)
protected void InitializeSecurityFunctionality(InitiatorMessageSecurityBindingSupport security)
protected IAsyncResult OnBeginRequest(Message message, TimeSpan timeout, AsyncCallback callback, object state)
protected Message OnEndRequest(IAsyncResult result)
protected Message OnRequest(Message message, TimeSpan timeout)
private Message SecureMessage(Message msg)
private Message ProcessReply(Message message, SecurityMessageProperty secprop)
private void AcquireSecurityKey(object o, EventArgs e)
private void ReleaseSecurityKey(object o, EventArgs e)
}
internal System.ServiceModel.Channels.Security.SecurityRequestContext : RequestContext {
private RecipientMessageSecurityBindingSupport security
private SecurityReplyChannel channel
private RequestContext source
private Message msg
private MessageBuffer source_request
public Message RequestMessage
public void .ctor(SecurityReplyChannel channel, RequestContext source)
public Message get_RequestMessage()
public void Abort()
public IAsyncResult BeginReply(Message message, AsyncCallback callback, object state)
public IAsyncResult BeginReply(Message message, TimeSpan timeout, AsyncCallback callback, object state)
public void Close()
public void Close(TimeSpan timeout)
public void EndReply(IAsyncResult result)
public void Reply(Message message)
public void Reply(Message message, TimeSpan timeout)
private Message SecureMessage(Message input)
}
internal System.ServiceModel.Channels.Security.SecurityRequestSessionChannel : SecurityRequestChannelBase {
private SecurityChannelFactory`1<IRequestSessionChannel> source
public ChannelFactoryBase Factory
public void .ctor(IRequestSessionChannel innerChannel, SecurityChannelFactory`1<IRequestSessionChannel> source)
public ChannelFactoryBase get_Factory()
}
internal System.ServiceModel.Channels.Security.SecurityTokenReferenceKeyInfo : KeyInfoClause {
private SecurityKeyIdentifierClause clause
private SecurityTokenSerializer serializer
private XmlDocument doc
public SecurityKeyIdentifierClause Clause
public void .ctor(SecurityTokenSerializer serializer, XmlDocument doc)
public void .ctor(SecurityKeyIdentifierClause clause, SecurityTokenSerializer serializer, XmlDocument doc)
public SecurityKeyIdentifierClause get_Clause()
public XmlElement GetXml()
public void LoadXml(XmlElement element)
}
internal System.ServiceModel.Channels.Security.SupportingTokenInfo : object {
public SecurityToken Token
public SecurityTokenAttachmentMode Mode
public bool IsOptional
public EncryptedData Encrypted
public void .ctor(SecurityToken token, SecurityTokenAttachmentMode mode, bool isOptional)
}
internal System.ServiceModel.Channels.Security.SupportingTokenInfoCollection : Collection`1<SupportingTokenInfo> {
protected void InsertItem(int index, SupportingTokenInfo item)
}
internal System.ServiceModel.Channels.Security.SymmetricSecurityCapabilities : SecurityCapabilities {
private SymmetricSecurityBindingElement element
public SecurityBindingElement Element
public bool AllowSerializedSigningTokenOnReply
public MessageProtectionOrder MessageProtectionOrder
public SecurityTokenParameters InitiatorParameters
public SecurityTokenParameters RecipientParameters
public bool RequireSignatureConfirmation
public string DefaultSignatureAlgorithm
public string DefaultKeyWrapAlgorithm
public void .ctor(SymmetricSecurityBindingElement element)
public SecurityBindingElement get_Element()
public bool get_AllowSerializedSigningTokenOnReply()
public MessageProtectionOrder get_MessageProtectionOrder()
public SecurityTokenParameters get_InitiatorParameters()
public SecurityTokenParameters get_RecipientParameters()
public bool get_RequireSignatureConfirmation()
public string get_DefaultSignatureAlgorithm()
public string get_DefaultKeyWrapAlgorithm()
}
internal System.ServiceModel.Channels.Security.WSEncryptedXml : EncryptedXml {
public void .ctor(XmlDocument doc)
public XmlElement GetIdElement(XmlDocument doc, string id)
private XmlElement SearchChildren(XmlNode node, string id)
}
internal System.ServiceModel.Channels.Security.Wss11SignatureConfirmation : object {
private string id
private string value
public string Id
public string Value
public void .ctor(string id, string value)
public string get_Id()
public void set_Id(string value)
public string get_Value()
public void set_Value(string value)
}
internal System.ServiceModel.Channels.Security.WSSecurityMessage : Message {
private Message msg
private string body_id
public MessageVersion Version
public MessageHeaders Headers
public MessageProperties Properties
public void .ctor(Message msg, string bodyId)
public MessageVersion get_Version()
public MessageHeaders get_Headers()
public MessageProperties get_Properties()
protected MessageBuffer OnCreateBufferedCopy(int maxBufferSize)
protected string OnGetBodyAttribute(string localName, string ns)
protected void OnWriteStartBody(XmlDictionaryWriter writer)
protected void OnWriteBodyContents(XmlDictionaryWriter w)
}
internal System.ServiceModel.Channels.Security.WSSecurityMessageBuffer : MessageBuffer {
private MessageBuffer buffer
private string body_id
public int BufferSize
public void .ctor(MessageBuffer mb, string bodyId)
public int get_BufferSize()
public void Close()
public Message CreateMessage()
}
internal System.ServiceModel.Channels.Security.WSSecurityMessageHeader : MessageHeader {
private SecurityTokenSerializer serializer
private Collection`1<object> contents
public Collection`1<object> Contents
public bool MustUnderstand
public string Name
public string Namespace
public void .ctor(SecurityTokenSerializer serializer)
public Collection`1<object> get_Contents()
public bool get_MustUnderstand()
public string get_Name()
public string get_Namespace()
public void AddContent(object obj)
public T Find()
public Collection`1<T> FindAll()
protected void OnWriteStartHeader(XmlDictionaryWriter writer, MessageVersion version)
protected void OnWriteHeaderContents(XmlDictionaryWriter writer, MessageVersion version)
}
internal System.ServiceModel.Channels.Security.WSSecurityMessageHeaderReader : object {
private WSSecurityMessageHeader header
private SecurityTokenSerializer serializer
private SecurityTokenResolver resolver
private XmlDocument doc
private XmlNamespaceManager nsmgr
private List`1<SecurityToken> tokens
private Dictionary`2<string, EncryptedData> encryptedDataList
public void .ctor(WSSecurityMessageHeader header, SecurityTokenSerializer serializer, SecurityTokenResolver resolver, XmlDocument doc, XmlNamespaceManager nsmgr, List`1<SecurityToken> tokens)
public void ReadContents(XmlReader reader)
private object ReadContent(XmlReader reader)
private void UpdateSignatureKeyInfo(Signature sig, XmlDocument doc, SecurityTokenSerializer serializer)
public void DecryptSecurity(SecureMessageDecryptor decryptor, SymmetricSecurityKey sym, Byte[] dummyEncKey)
private EncryptedData CreateEncryptedData(XmlElement el)
private Byte[] GetEncryptionKeyForData(EncryptedData ed2, EncryptedXml encXml, Byte[] dummyEncKey)
private Byte[] DecryptData(EncryptedXml encXml, EncryptedData ed, SymmetricAlgorithm symAlg)
private string StripUri(string src)
private Wss11SignatureConfirmation ReadSignatureConfirmation(XmlReader reader, XmlDocument doc)
private WsuTimestamp ReadTimestamp(XmlReader reader)
}
internal System.ServiceModel.Channels.Security.WSSignedXml : SignedXml {
public void .ctor(XmlDocument doc)
public XmlElement GetIdElement(XmlDocument doc, string id)
private XmlElement SearchChildren(XmlNode node, string id)
}
internal System.ServiceModel.Channels.Security.WsuTimestamp : object {
private string id
private DateTime created
private DateTime expires
public string Id
public DateTime Created
public DateTime Expires
public string get_Id()
public void set_Id(string value)
public DateTime get_Created()
public void set_Created(DateTime value)
public DateTime get_Expires()
public void set_Expires(DateTime value)
public void WriteTo(XmlWriter writer)
private string FormatAsUtc(DateTime date)
}
public System.ServiceModel.Channels.SecurityBindingElement : BindingElement {
private SecurityHeaderLayout security_header_layout
private MessageSecurityVersion msg_security_version
private SupportingTokenParameters endpoint
private SecurityAlgorithmSuite alg_suite
private SecurityKeyEntropyMode key_entropy_mode
private SupportingTokenParameters opt_endpoint
private IDictionary`2<string, SupportingTokenParameters> operation
private IDictionary`2<string, SupportingTokenParameters> opt_operation
private LocalServiceSecuritySettings service_settings
private bool <IncludeTimestamp>k__BackingField
private LocalClientSecuritySettings <LocalClientSettings>k__BackingField
public bool IncludeTimestamp
public LocalClientSecuritySettings LocalClientSettings
public SecurityHeaderLayout SecurityHeaderLayout
public MessageSecurityVersion MessageSecurityVersion
public SupportingTokenParameters EndpointSupportingTokenParameters
public SecurityAlgorithmSuite DefaultAlgorithmSuite
public SecurityKeyEntropyMode KeyEntropyMode
public LocalServiceSecuritySettings LocalServiceSettings
public IDictionary`2<string, SupportingTokenParameters> OperationSupportingTokenParameters
public SupportingTokenParameters OptionalEndpointSupportingTokenParameters
public IDictionary`2<string, SupportingTokenParameters> OptionalOperationSupportingTokenParameters
public bool AllowInsecureTransport
public bool EnableUnsecuredResponse
public bool ProtectTokens
internal void .ctor(SecurityBindingElement other)
public bool get_IncludeTimestamp()
public void set_IncludeTimestamp(bool value)
public LocalClientSecuritySettings get_LocalClientSettings()
private void set_LocalClientSettings(LocalClientSecuritySettings value)
public SecurityHeaderLayout get_SecurityHeaderLayout()
public void set_SecurityHeaderLayout(SecurityHeaderLayout value)
public MessageSecurityVersion get_MessageSecurityVersion()
public void set_MessageSecurityVersion(MessageSecurityVersion value)
public SupportingTokenParameters get_EndpointSupportingTokenParameters()
public SecurityAlgorithmSuite get_DefaultAlgorithmSuite()
public void set_DefaultAlgorithmSuite(SecurityAlgorithmSuite value)
public SecurityKeyEntropyMode get_KeyEntropyMode()
public void set_KeyEntropyMode(SecurityKeyEntropyMode value)
public LocalServiceSecuritySettings get_LocalServiceSettings()
public IDictionary`2<string, SupportingTokenParameters> get_OperationSupportingTokenParameters()
public SupportingTokenParameters get_OptionalEndpointSupportingTokenParameters()
public IDictionary`2<string, SupportingTokenParameters> get_OptionalOperationSupportingTokenParameters()
public bool CanBuildChannelFactory(BindingContext context)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
protected IChannelFactory`1<TChannel> BuildChannelFactoryCore(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
protected IChannelListener`1<TChannel> BuildChannelListenerCore(BindingContext context)
public T GetProperty(BindingContext context)
public void SetKeyDerivation(bool requireDerivedKeys)
public string ToString()
public SymmetricSecurityBindingElement CreateAnonymousForCertificateBindingElement()
public TransportSecurityBindingElement CreateCertificateOverTransportBindingElement()
public TransportSecurityBindingElement CreateCertificateOverTransportBindingElement(MessageSecurityVersion version)
public AsymmetricSecurityBindingElement CreateCertificateSignatureBindingElement()
public SymmetricSecurityBindingElement CreateIssuedTokenBindingElement(IssuedSecurityTokenParameters issuedTokenParameters)
public SymmetricSecurityBindingElement CreateIssuedTokenForCertificateBindingElement(IssuedSecurityTokenParameters issuedTokenParameters)
public SymmetricSecurityBindingElement CreateIssuedTokenForSslBindingElement(IssuedSecurityTokenParameters issuedTokenParameters)
public SymmetricSecurityBindingElement CreateIssuedTokenForSslBindingElement(IssuedSecurityTokenParameters issuedTokenParameters, bool requireCancellation)
public TransportSecurityBindingElement CreateIssuedTokenOverTransportBindingElement(IssuedSecurityTokenParameters issuedTokenParameters)
public SymmetricSecurityBindingElement CreateKerberosBindingElement()
public TransportSecurityBindingElement CreateKerberosOverTransportBindingElement()
public SecurityBindingElement CreateMutualCertificateBindingElement()
public SecurityBindingElement CreateMutualCertificateBindingElement(MessageSecurityVersion version)
public SecurityBindingElement CreateMutualCertificateBindingElement(MessageSecurityVersion version, bool allowSerializedSigningTokenOnReply)
public AsymmetricSecurityBindingElement CreateMutualCertificateDuplexBindingElement()
public AsymmetricSecurityBindingElement CreateMutualCertificateDuplexBindingElement(MessageSecurityVersion version)
public SymmetricSecurityBindingElement CreateSslNegotiationBindingElement(bool requireClientCertificate)
public SymmetricSecurityBindingElement CreateSslNegotiationBindingElement(bool requireClientCertificate, bool requireCancellation)
public SymmetricSecurityBindingElement CreateSspiNegotiationBindingElement()
public SymmetricSecurityBindingElement CreateSspiNegotiationBindingElement(bool requireCancellation)
public TransportSecurityBindingElement CreateSspiNegotiationOverTransportBindingElement()
public TransportSecurityBindingElement CreateSspiNegotiationOverTransportBindingElement(bool requireCancellation)
private X509SecurityTokenParameters CreateProtectionTokenParameters(bool cert)
public SymmetricSecurityBindingElement CreateUserNameForCertificateBindingElement()
public SymmetricSecurityBindingElement CreateUserNameForSslBindingElement()
public SymmetricSecurityBindingElement CreateUserNameForSslBindingElement(bool requireCancellation)
public SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement bootstrapSecurity)
public SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement bootstrapSecurity, bool requireCancellation)
public SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement bootstrapSecurity, bool requireCancellation, ChannelProtectionRequirements bootstrapProtectionRequirements)
public TransportSecurityBindingElement CreateUserNameOverTransportBindingElement()
protected void SetIssuerBindingContextIfRequired(SecurityTokenParameters parameters, BindingContext issuerBindingContext)
public bool get_AllowInsecureTransport()
public void set_AllowInsecureTransport(bool value)
public bool get_EnableUnsecuredResponse()
public void set_EnableUnsecuredResponse(bool value)
public bool get_ProtectTokens()
public void set_ProtectTokens(bool value)
}
public System.ServiceModel.Channels.SecurityBindingElementImporter : object {
public int MaxPolicyRedirections
public int get_MaxPolicyRedirections()
private void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(MetadataImporter importer, PolicyConversionContext context)
}
internal System.ServiceModel.Channels.SecurityChannelFactory`1 : ChannelFactoryBase`1<TChannel> {
private IChannelFactory`1<TChannel> inner
private InitiatorMessageSecurityBindingSupport security
public InitiatorMessageSecurityBindingSupport SecuritySupport
public void .ctor(IChannelFactory`1<TChannel> innerFactory, InitiatorMessageSecurityBindingSupport security)
public InitiatorMessageSecurityBindingSupport get_SecuritySupport()
protected TChannel OnCreateChannel(EndpointAddress remoteAddress, Uri via)
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
}
public System.ServiceModel.Channels.SecurityHeaderLayout : Enum {
public int value__
public SecurityHeaderLayout Strict
public SecurityHeaderLayout Lax
public SecurityHeaderLayout LaxTimestampFirst
public SecurityHeaderLayout LaxTimestampLast
}
internal System.ServiceModel.Channels.ServiceHostParser : object {
private string file
private string url
private string type_name
private string language
private string factory
private bool debug
private bool got_default_directive
private string program
private ArrayList assemblies
private HttpContext context
public HttpContext Context
public string Filename
public string TypeName
public bool Debug
public string Program
public ArrayList Assemblies
public string Factory
public string Language
public void .ctor(string file, string url, HttpContext context)
public HttpContext get_Context()
public string get_Filename()
public string get_TypeName()
public bool get_Debug()
public string get_Program()
public ArrayList get_Assemblies()
public string get_Factory()
public string get_Language()
public void Parse()
private void ParseDirective(string line)
private StringDictionary Split(string line)
}
public System.ServiceModel.Channels.SessionOpenNotification : object {
public bool IsEnabled
public bool get_IsEnabled()
public void UpdateMessageProperties(MessageProperties inboundMessageProperties)
}
internal System.ServiceModel.Channels.SimpleFaultConverter : FaultConverter {
private Dictionary`2<Type, string> map
private MessageVersion version
public void .ctor(MessageVersion version)
protected bool OnTryCreateException(Message message, MessageFault fault, Exception& error)
protected bool OnTryCreateFaultMessage(Exception error, Message& message)
}
internal System.ServiceModel.Channels.SimpleMessage : MessageImplBase {
private BodyWriter body
private bool is_fault
public bool IsEmpty
public bool IsFault
public void .ctor(MessageVersion version, string action, BodyWriter body, bool isFault, AttributeCollection attributes)
public bool get_IsEmpty()
public bool get_IsFault()
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
protected MessageBuffer OnCreateBufferedCopy(int maxBufferSize)
}
public System.ServiceModel.Channels.SslStreamSecurityBindingElement : BindingElement {
private IdentityVerifier verifier
private bool require_client_certificate
public IdentityVerifier IdentityVerifier
public bool RequireClientCertificate
public SslProtocols SslProtocols
public IdentityVerifier get_IdentityVerifier()
public void set_IdentityVerifier(IdentityVerifier value)
public bool get_RequireClientCertificate()
public void set_RequireClientCertificate(bool value)
public SslProtocols get_SslProtocols()
public void set_SslProtocols(SslProtocols value)
private void .ctor(SslStreamSecurityBindingElement other)
public StreamUpgradeProvider BuildClientStreamUpgradeProvider(BindingContext context)
public StreamUpgradeProvider BuildServerStreamUpgradeProvider(BindingContext context)
public XmlElement GetTransportTokenAssertion()
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public bool CanBuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
public bool ShouldSerializeIdentityVerifier()
}
internal System.ServiceModel.Channels.SslStreamSecurityUpgradeAcceptor : StreamSecurityUpgradeAcceptor {
private SslStreamSecurityUpgradeProvider source
public void .ctor(SslStreamSecurityUpgradeProvider source)
public SecurityMessageProperty GetRemoteSecurity()
public bool CanUpgrade(string contentType)
public IAsyncResult BeginAcceptUpgrade(Stream stream, AsyncCallback callback, object state)
public Stream EndAcceptUpgrade(IAsyncResult result)
}
internal System.ServiceModel.Channels.SslStreamSecurityUpgradeProvider : StreamSecurityUpgradeProvider {
private SslStreamSecurityBindingElement source
public EndpointIdentity Identity
public void .ctor(SslStreamSecurityBindingElement source)
public EndpointIdentity get_Identity()
public StreamUpgradeAcceptor CreateUpgradeAcceptor()
public StreamUpgradeInitiator CreateUpgradeInitiator(EndpointAddress remoteAddress, Uri via)
protected void OnAbort()
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
}
public System.ServiceModel.Channels.StandardBindingImporter : object {
private string TcpTransport
public void BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy)
public void ImportContract(WsdlImporter importer, WsdlContractConversionContext contractContext)
private Port LookupPort(WsdlImporter importer, XmlQualifiedName name)
public void ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context)
internal SoapBinding GetHttpSoapBinding(Binding binding)
internal Soap12Binding GetTcpSoapBinding(Binding binding)
private bool ImportBasicHttpBinding(WsdlImporter importer, WsdlEndpointConversionContext context, CustomBinding custom, SoapBinding soap)
private bool ImportNetTcpBinding(WsdlImporter importer, WsdlEndpointConversionContext context, CustomBinding custom, Soap12Binding soap)
}
public System.ServiceModel.Channels.StreamSecurityUpgradeAcceptor : StreamUpgradeAcceptor {
public SecurityMessageProperty GetRemoteSecurity()
}
public System.ServiceModel.Channels.StreamSecurityUpgradeInitiator : StreamUpgradeInitiator {
public SecurityMessageProperty GetRemoteSecurity()
}
public System.ServiceModel.Channels.StreamSecurityUpgradeProvider : StreamUpgradeProvider {
public EndpointIdentity Identity
protected void .ctor(IDefaultCommunicationTimeouts timeouts)
public EndpointIdentity get_Identity()
}
public System.ServiceModel.Channels.StreamUpgradeAcceptor : object {
public Stream AcceptUpgrade(Stream stream)
public IAsyncResult BeginAcceptUpgrade(Stream stream, AsyncCallback callback, object state)
public bool CanUpgrade(string contentType)
public Stream EndAcceptUpgrade(IAsyncResult result)
}
public System.ServiceModel.Channels.StreamUpgradeBindingElement : BindingElement {
protected void .ctor(StreamUpgradeBindingElement elementToBeCloned)
public StreamUpgradeProvider BuildClientStreamUpgradeProvider(BindingContext context)
public StreamUpgradeProvider BuildServerStreamUpgradeProvider(BindingContext context)
}
public System.ServiceModel.Channels.StreamUpgradeInitiator : object {
public Stream InitiateUpgrade(Stream stream)
public IAsyncResult BeginInitiateUpgrade(Stream stream, AsyncCallback callback, object state)
public string GetNextUpgrade()
public Stream EndInitiateUpgrade(IAsyncResult result)
}
public System.ServiceModel.Channels.StreamUpgradeProvider : CommunicationObject {
private TimeSpan default_open_timeout
private TimeSpan default_close_timeout
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
protected void .ctor(IDefaultCommunicationTimeouts timeouts)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
public StreamUpgradeAcceptor CreateUpgradeAcceptor()
public StreamUpgradeInitiator CreateUpgradeInitiator(EndpointAddress remoteAddress, Uri via)
public T GetProperty()
}
public System.ServiceModel.Channels.SupportedAddressingMode : Enum {
public int value__
public SupportedAddressingMode Anonymous
public SupportedAddressingMode NonAnonymous
public SupportedAddressingMode Mixed
}
internal System.ServiceModel.Channels.SvcHttpHandler : object {
internal SvcHttpHandler Current
private object type_lock
private Type type
private Type factory_type
private string path
private ServiceHostBase host
private Dictionary`2<HttpContext, ManualResetEvent> wcf_wait_handles
private int close_state
public bool IsReusable
public ServiceHostBase Host
public void .ctor(Type type, Type factoryType, string path)
public bool get_IsReusable()
public ServiceHostBase get_Host()
public void ProcessRequest(HttpContext context)
public void EndHttpRequest(HttpContext context)
public void Close()
private void EnsureServiceHost()
private void EnsureServiceHostCore()
}
internal System.ServiceModel.Channels.SvcHttpHandlerFactory : object {
private Dictionary`2<string, SvcHttpHandler> handlers
private string privateBinPath
private Type service_type
private Type factory_type
private string PrivateBinPath
public IHttpHandler GetHandler(HttpContext context, string requestType, string url, string pathTranslated)
public void ReleaseHandler(IHttpHandler handler)
private void LoadTypeFromSvc(string path, string url, HttpContext context)
private string get_PrivateBinPath()
private Type GetTypeFromBinAndConfig(string typeName)
public void RemovedCallback(string key, object value, CacheItemRemovedReason reason)
}
public System.ServiceModel.Channels.SymmetricSecurityBindingElement : SecurityBindingElement {
private MessageProtectionOrder msg_protection_order
private SecurityTokenParameters protection_token_params
private bool require_sig_confirm
public MessageProtectionOrder MessageProtectionOrder
public SecurityTokenParameters ProtectionTokenParameters
public bool RequireSignatureConfirmation
public void .ctor(SecurityTokenParameters protectionTokenParameters)
private void .ctor(SymmetricSecurityBindingElement other)
public MessageProtectionOrder get_MessageProtectionOrder()
public void set_MessageProtectionOrder(MessageProtectionOrder value)
public SecurityTokenParameters get_ProtectionTokenParameters()
public void set_ProtectionTokenParameters(SecurityTokenParameters value)
public bool get_RequireSignatureConfirmation()
public void set_RequireSignatureConfirmation(bool value)
public void SetKeyDerivation(bool requireDerivedKeys)
public string ToString()
protected IChannelFactory`1<TChannel> BuildChannelFactoryCore(BindingContext context)
protected IChannelListener`1<TChannel> BuildChannelListenerCore(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
private SymmetricSecurityCapabilities GetCapabilities()
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext policyContext)
}
internal System.ServiceModel.Channels.TcpBindingProperties : object {
private TcpTransportBindingElement source
public bool AssuresOrderedDelivery
public bool QueuedDelivery
public void .ctor(TcpTransportBindingElement source)
public bool get_AssuresOrderedDelivery()
public bool get_QueuedDelivery()
}
public System.ServiceModel.Channels.TcpConnectionPoolSettings : object {
private string group_name
private TimeSpan idle_timeout
private TimeSpan lease_timeout
private int max_conn
public string GroupName
public TimeSpan IdleTimeout
public TimeSpan LeaseTimeout
public int MaxOutboundConnectionsPerEndpoint
internal void CopyPropertiesFrom(TcpConnectionPoolSettings other)
public string get_GroupName()
public void set_GroupName(string value)
public TimeSpan get_IdleTimeout()
public void set_IdleTimeout(TimeSpan value)
public TimeSpan get_LeaseTimeout()
public void set_LeaseTimeout(TimeSpan value)
public int get_MaxOutboundConnectionsPerEndpoint()
public void set_MaxOutboundConnectionsPerEndpoint(int value)
}
public System.ServiceModel.Channels.TcpTransportBindingElement : ConnectionOrientedTransportBindingElement {
internal int DefaultPort
private int listen_backlog
private bool port_sharing_enabled
private bool teredo_enabled
private TcpConnectionPoolSettings pool
public TcpConnectionPoolSettings ConnectionPoolSettings
public int ListenBacklog
public bool PortSharingEnabled
public string Scheme
public bool TeredoEnabled
public ExtendedProtectionPolicy ExtendedProtectionPolicy
protected void .ctor(TcpTransportBindingElement elementToBeCloned)
public TcpConnectionPoolSettings get_ConnectionPoolSettings()
public int get_ListenBacklog()
public void set_ListenBacklog(int value)
public bool get_PortSharingEnabled()
public void set_PortSharingEnabled(bool value)
public string get_Scheme()
public bool get_TeredoEnabled()
public void set_TeredoEnabled(bool value)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
public ExtendedProtectionPolicy get_ExtendedProtectionPolicy()
public void set_ExtendedProtectionPolicy(ExtendedProtectionPolicy value)
public bool ShouldSerializeExtendedProtectionPolicy()
public bool ShouldSerializeListenBacklog()
}
internal System.ServiceModel.Channels.TextMessageEncoder : MessageEncoder {
private Encoding encoding
private MessageVersion version
internal Encoding Encoding
public string ContentType
public string MediaType
public MessageVersion MessageVersion
public void .ctor(MessageVersion version, Encoding encoding)
internal Encoding get_Encoding()
public string get_ContentType()
public string get_MediaType()
public MessageVersion get_MessageVersion()
public Message ReadMessage(ArraySegment`1<byte> buffer, BufferManager bufferManager, string contentType)
public Message ReadMessage(Stream stream, int maxSizeOfHeaders, string contentType)
private void FillActionContentType(Message msg, string contentType)
public void WriteMessage(Message message, Stream stream)
public ArraySegment`1<byte> WriteMessage(Message message, int maxMessageSize, BufferManager bufferManager, int messageOffset)
}
internal System.ServiceModel.Channels.TextMessageEncoderFactory : MessageEncoderFactory {
private TextMessageEncodingBindingElement owner
private TextMessageEncoder encoder
public MessageEncoder Encoder
public MessageVersion MessageVersion
public void .ctor(TextMessageEncodingBindingElement owner)
public MessageEncoder get_Encoder()
public MessageVersion get_MessageVersion()
}
public System.ServiceModel.Channels.TextMessageEncodingBindingElement : MessageEncodingBindingElement {
private MessageVersion version
private int max_read_pool_size
private int max_write_pool_size
private XmlDictionaryReaderQuotas quotas
private Encoding encoding
public MessageVersion MessageVersion
public int MaxReadPoolSize
public int MaxWritePoolSize
public XmlDictionaryReaderQuotas ReaderQuotas
public Encoding WriteEncoding
public void .ctor(MessageVersion messageVersion, Encoding writeEncoding)
private void .ctor(TextMessageEncodingBindingElement source)
public MessageVersion get_MessageVersion()
public void set_MessageVersion(MessageVersion value)
public int get_MaxReadPoolSize()
public void set_MaxReadPoolSize(int value)
public int get_MaxWritePoolSize()
public void set_MaxWritePoolSize(int value)
public XmlDictionaryReaderQuotas get_ReaderQuotas()
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
public Encoding get_WriteEncoding()
public void set_WriteEncoding(Encoding value)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
public MessageEncoderFactory CreateMessageEncoderFactory()
protected void OnImportPolicy(XmlElement assertion, MessageVersion messageVersion, MetadataImporter exporter, PolicyConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
public bool ShouldSerializeReaderQuotas()
public bool ShouldSerializeWriteEncoding()
}
internal System.ServiceModel.Channels.TransactionChannelFactory`1 : ChannelFactoryBase`1<TChannel> {
private IChannelFactory`1<TChannel> inner_factory
private TransactionScope txscope
private TransactionProtocol protocol
public void .ctor(IChannelFactory`1<TChannel> innerFactory, TransactionProtocol protocol)
private void ProcessOpen()
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected TChannel OnCreateChannel(EndpointAddress remoteAddress, Uri via)
protected void OnClose(TimeSpan timeout)
}
internal System.ServiceModel.Channels.TransactionChannelListener`1 : ChannelListenerBase`1<TChannel> {
private IChannelListener`1<TChannel> inner_listener
private TransactionScope txscope
private TransactionProtocol protocol
public Uri Uri
public void .ctor(IChannelListener`1<TChannel> innerListener, TransactionProtocol protocol)
public T GetProperty()
public Uri get_Uri()
protected void OnAbort()
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected bool OnWaitForChannel(TimeSpan timeout)
protected IAsyncResult OnBeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state)
protected bool OnEndWaitForChannel(IAsyncResult result)
protected TChannel OnAcceptChannel(TimeSpan timeout)
protected IAsyncResult OnBeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object asyncState)
protected TChannel OnEndAcceptChannel(IAsyncResult result)
}
public System.ServiceModel.Channels.TransactionFlowBindingElement : BindingElement {
private TransactionProtocol protocol
public TransactionProtocol TransactionProtocol
public bool AllowWildcardAction
public void .ctor(TransactionProtocol transactionProtocol)
public TransactionProtocol get_TransactionProtocol()
public BindingElement Clone()
public T GetProperty(BindingContext context)
public bool CanBuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public bool get_AllowWildcardAction()
public void set_AllowWildcardAction(bool value)
public void set_TransactionProtocol(TransactionProtocol value)
public bool ShouldSerializeTransactionProtocol()
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
}
public System.ServiceModel.Channels.TransactionFlowBindingElementImporter : object {
public XmlElement GetAssertion(XmlDocument doc, TransactionFlowOption option, string prefix, string name, string ns)
public void ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
private void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(MetadataImporter importer, PolicyConversionContext context)
}
public System.ServiceModel.Channels.TransactionMessageProperty : object {
private Transaction tx
private Message msg
public Transaction Transaction
public void .ctor(Transaction tx, Message msg)
public Transaction get_Transaction()
public void Set(Transaction tx, Message msg)
}
public System.ServiceModel.Channels.TransferSession : Enum {
public int value__
public TransferSession None
public TransferSession Ordered
public TransferSession Unordered
}
public System.ServiceModel.Channels.TransportBindingElement : BindingElement {
private bool manual_addressing
private long max_buffer_pool_size
private long max_recv_message_size
public bool ManualAddressing
public long MaxBufferPoolSize
public long MaxReceivedMessageSize
public string Scheme
protected void .ctor(TransportBindingElement elementToBeCloned)
public bool get_ManualAddressing()
public void set_ManualAddressing(bool value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public string get_Scheme()
public T GetProperty(BindingContext context)
internal XmlElement CreateTransportBinding(XmlElement transportToken)
internal MessageEncodingBindingElement ExportAddressingPolicy(PolicyConversionContext context)
}
public System.ServiceModel.Channels.TransportBindingElementImporter : object {
public void BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy)
public void ImportContract(WsdlImporter importer, WsdlContractConversionContext contractContext)
public void ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context)
private bool DoImportEndpoint(WsdlEndpointConversionContext context)
public void ImportPolicy(MetadataImporter importer, PolicyConversionContext context)
private bool ImportHttpAuthScheme(MetadataImporter importer, HttpTransportBindingElement bindingElement, PolicyConversionContext context)
private bool ImportWindowsTransportSecurity(MetadataImporter importer, PolicyConversionContext context, XmlElement policyElement)
private bool ImportTransport(MetadataImporter importer, TransportBindingElement bindingElement, XmlElement transportPolicy)
private bool GetTransportToken(MetadataImporter importer, XmlElement transportPolicy, XmlElement& transportToken)
private bool ImportHttpTransport(MetadataImporter importer, PolicyConversionContext context, XmlElement transportPolicy, HttpTransportBindingElement& bindingElement)
private bool ImportTcpTransport(MetadataImporter importer, PolicyConversionContext context, XmlElement transportPolicy)
private bool ImportHttpPolicy(MetadataImporter importer, PolicyConversionContext context, SoapBinding soap)
private bool ImportTcpPolicy(MetadataImporter importer, PolicyConversionContext context, Soap12Binding soap)
}
internal System.ServiceModel.Channels.TransportChannelFactoryBase`1 : ChannelFactoryBase`1<TChannel> {
private TransportBindingElement <Transport>k__BackingField
private MessageEncoder <MessageEncoder>k__BackingField
private Action`1<TimeSpan> open_delegate
public TransportBindingElement Transport
public MessageEncoder MessageEncoder
protected void .ctor(TransportBindingElement source, BindingContext ctx)
public TransportBindingElement get_Transport()
private void set_Transport(TransportBindingElement value)
public MessageEncoder get_MessageEncoder()
internal void set_MessageEncoder(MessageEncoder value)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
}
public System.ServiceModel.Channels.TransportSecurityBindingElement : SecurityBindingElement {
private void .ctor(TransportSecurityBindingElement other)
public BindingElement Clone()
protected IChannelFactory`1<TChannel> BuildChannelFactoryCore(BindingContext context)
protected IChannelListener`1<TChannel> BuildChannelListenerCore(BindingContext context)
public T GetProperty(BindingContext context)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext policyContext)
}
public System.ServiceModel.Channels.UnderstoodHeaders : object {
private List`1<MessageHeaderInfo> headers
public void Add(MessageHeaderInfo headerInfo)
public bool Contains(MessageHeaderInfo headerInfo)
public IEnumerator`1<MessageHeaderInfo> GetEnumerator()
public void Remove(MessageHeaderInfo headerInfo)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
internal System.ServiceModel.Channels.UnionSecurityTokenResolver : SecurityTokenResolver {
private SecurityTokenResolver[] resolvers
public void .ctor(SecurityTokenResolver[] resolvers)
protected bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityKey& key)
protected bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, SecurityToken& token)
protected bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityToken& token)
}
public System.ServiceModel.Channels.UseManagedPresentationBindingElement : BindingElement {
public BindingElement Clone()
public T GetProperty(BindingContext context)
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
}
public System.ServiceModel.Channels.UseManagedPresentationBindingElementImporter : object {
private void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(MetadataImporter importer, PolicyConversionContext policyContext)
}
public System.ServiceModel.Channels.WebSocketMessageProperty : object {
public string Name
public WebSocketMessageType MessageType
public ReadOnlyDictionary`2<string, object> OpeningHandshakeProperties
public string SubProtocol
public WebSocketContext WebSocketContext
public WebSocketMessageType get_MessageType()
public void set_MessageType(WebSocketMessageType value)
public ReadOnlyDictionary`2<string, object> get_OpeningHandshakeProperties()
public string get_SubProtocol()
public WebSocketContext get_WebSocketContext()
}
public System.ServiceModel.Channels.WebSocketTransportSettings : object {
public string BinaryEncoderTransferModeHeader
public string BinaryMessageReceivedAction
public string ConnectionOpenedAction
public string SoapContentTypeHeader
public string TextMessageReceivedAction
private bool <CreateNotificationOnConnection>k__BackingField
private bool <DisablePayloadMasking>k__BackingField
private TimeSpan <KeepAliveInterval>k__BackingField
private int <MaxPendingConnections>k__BackingField
private int <ReceiveBufferSize>k__BackingField
private int <SendBufferSize>k__BackingField
private string <SubProtocol>k__BackingField
private WebSocketTransportUsage <TransportUsage>k__BackingField
public bool CreateNotificationOnConnection
public bool DisablePayloadMasking
public TimeSpan KeepAliveInterval
public int MaxPendingConnections
public int ReceiveBufferSize
public int SendBufferSize
public string SubProtocol
public WebSocketTransportUsage TransportUsage
public bool get_CreateNotificationOnConnection()
public void set_CreateNotificationOnConnection(bool value)
public bool get_DisablePayloadMasking()
public void set_DisablePayloadMasking(bool value)
public TimeSpan get_KeepAliveInterval()
public void set_KeepAliveInterval(TimeSpan value)
public int get_MaxPendingConnections()
public void set_MaxPendingConnections(int value)
public int get_ReceiveBufferSize()
public void set_ReceiveBufferSize(int value)
public int get_SendBufferSize()
public void set_SendBufferSize(int value)
public string get_SubProtocol()
public void set_SubProtocol(string value)
public WebSocketTransportUsage get_TransportUsage()
public void set_TransportUsage(WebSocketTransportUsage value)
public bool Equals(WebSocketTransportSettings other)
}
public System.ServiceModel.Channels.WebSocketTransportUsage : Enum {
public int value__
public WebSocketTransportUsage WhenDuplex
public WebSocketTransportUsage Always
public WebSocketTransportUsage Never
}
public System.ServiceModel.Channels.WindowsStreamSecurityBindingElement : BindingElement {
private ProtectionLevel <ProtectionLevel>k__BackingField
public ProtectionLevel ProtectionLevel
private ProtectionLevel System.ServiceModel.Channels.ISecurityCapabilities.SupportedRequestProtectionLevel
private ProtectionLevel System.ServiceModel.Channels.ISecurityCapabilities.SupportedResponseProtectionLevel
private bool System.ServiceModel.Channels.ISecurityCapabilities.SupportsClientAuthentication
private bool System.ServiceModel.Channels.ISecurityCapabilities.SupportsClientWindowsIdentity
private bool System.ServiceModel.Channels.ISecurityCapabilities.SupportsServerAuthentication
public void .ctor(WindowsStreamSecurityBindingElement other)
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public bool CanBuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public BindingElement Clone()
public T GetProperty(BindingContext context)
private ProtectionLevel System.ServiceModel.Channels.ISecurityCapabilities.get_SupportedRequestProtectionLevel()
private ProtectionLevel System.ServiceModel.Channels.ISecurityCapabilities.get_SupportedResponseProtectionLevel()
private bool System.ServiceModel.Channels.ISecurityCapabilities.get_SupportsClientAuthentication()
private bool System.ServiceModel.Channels.ISecurityCapabilities.get_SupportsClientWindowsIdentity()
private bool System.ServiceModel.Channels.ISecurityCapabilities.get_SupportsServerAuthentication()
private void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
public XmlElement GetTransportTokenAssertion()
public StreamUpgradeProvider BuildClientStreamUpgradeProvider(BindingContext context)
public StreamUpgradeProvider BuildServerStreamUpgradeProvider(BindingContext context)
}
public System.ServiceModel.Channels.WrappedOptions : object {
public bool WrappedFlag
public bool get_WrappedFlag()
public void set_WrappedFlag(bool value)
}
internal System.ServiceModel.Channels.XmlObjectSerializerBodyWriter : BodyWriter {
private object body
private XmlObjectSerializer formatter
public void .ctor(object body, XmlObjectSerializer formatter)
protected BodyWriter OnCreateBufferedCopy(int maxBufferSize)
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
}
internal System.ServiceModel.Channels.XmlReaderBodyWriter : BodyWriter {
private XmlDictionaryReader reader
private string xml_bak
private XmlParserContext parser_context
private bool consumed
public void .ctor(string xml, int maxBufferSize, XmlParserContext ctx)
public void .ctor(XmlDictionaryReader reader)
protected BodyWriter OnCreateBufferedCopy(int maxBufferSize)
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
}
internal System.ServiceModel.Channels.XmlReaderMessage : Message {
private MessageVersion version
private XmlDictionaryReader reader
private MessageHeaders headers
private MessageProperties properties
private bool is_empty
private bool is_fault
private bool body_started
private bool body_consumed
private int max_headers
private AttributeCollection attributes
private Char[] whitespaceChars
public MessageHeaders Headers
public bool IsEmpty
public bool IsFault
public MessageProperties Properties
public MessageVersion Version
public void .ctor(MessageVersion version, XmlDictionaryReader reader, int maxSizeOfHeaders)
public MessageHeaders get_Headers()
public bool get_IsEmpty()
public bool get_IsFault()
public MessageProperties get_Properties()
public MessageVersion get_Version()
protected MessageBuffer OnCreateBufferedCopy(int maxBufferSize)
protected string OnGetBodyAttribute(string localName, string ns)
protected XmlDictionaryReader OnGetReaderAtBodyContents()
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
private void ReadEnvelopeStart()
private void ReadHeaders()
private void ReadBodyStart()
protected void OnWriteStartBody(XmlDictionaryWriter writer)
}
public System.ServiceModel.Channels.XmlSerializerImportOptions : object {
public string ClrNamespace
public CodeCompileUnit CodeCompileUnit
public CodeDomProvider CodeProvider
public WebReferenceOptions WebReferenceOptions
public void .ctor(CodeCompileUnit codeCompileUnit)
public string get_ClrNamespace()
public void set_ClrNamespace(string value)
public CodeCompileUnit get_CodeCompileUnit()
public CodeDomProvider get_CodeProvider()
public void set_CodeProvider(CodeDomProvider value)
public WebReferenceOptions get_WebReferenceOptions()
public void set_WebReferenceOptions(WebReferenceOptions value)
}
internal System.ServiceModel.Channels.XPathMessageBuffer : MessageBuffer {
private IXPathNavigable source
private MessageVersion version
private int max_header_size
private MessageProperties properties
private AttributeCollection attributes
public int BufferSize
public void .ctor(IXPathNavigable source, MessageVersion version, int maxSizeOfHeaders, MessageProperties properties, AttributeCollection attributes)
public void Close()
public Message CreateMessage()
public int get_BufferSize()
}
public System.ServiceModel.ChannelTerminatedException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.ClientBase`1 : object {
private InstanceContext initialContxt
private ChannelFactory`1<TChannel> factory
private IClientChannel inner_channel
private IAsyncResult begin_async_result
public ChannelFactory`1<TChannel> ChannelFactory
public ClientCredentials ClientCredentials
public ServiceEndpoint Endpoint
public IClientChannel InnerChannel
protected TChannel Channel
public CommunicationState State
public CacheSetting CacheSetting
protected void .ctor(string endpointConfigurationName)
protected void .ctor(Binding binding, EndpointAddress remoteAddress)
protected void .ctor(string endpointConfigurationName, EndpointAddress remoteAddress)
protected void .ctor(string endpointConfigurationName, string remoteAddress)
protected void .ctor(InstanceContext callbackInstance)
protected void .ctor(InstanceContext callbackInstance, string endpointConfigurationName)
protected void .ctor(InstanceContext callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress)
protected void .ctor(InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress)
protected void .ctor(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress)
protected void .ctor(ServiceEndpoint endpoint)
protected void .ctor(InstanceContext callbackInstance, ServiceEndpoint endpoint)
internal void .ctor(ChannelFactory`1<TChannel> factory)
internal void .ctor(InstanceContext instance, ChannelFactory`1<TChannel> factory)
internal void Initialize(InstanceContext instance, string endpointConfigurationName, EndpointAddress remoteAddress)
internal void Initialize(InstanceContext instance, Binding binding, EndpointAddress remoteAddress)
public ChannelFactory`1<TChannel> get_ChannelFactory()
internal void set_ChannelFactory(ChannelFactory`1<TChannel> value)
public ClientCredentials get_ClientCredentials()
public ServiceEndpoint get_Endpoint()
public IClientChannel get_InnerChannel()
protected TChannel get_Channel()
public CommunicationState get_State()
public void Abort()
public void Close()
public void DisplayInitializationUI()
protected T GetDefaultValueForInitialization()
private void RunCompletedCallback(SendOrPostCallback callback, InvokeAsyncCompletedEventArgs<TChannel> args)
protected void InvokeAsync(BeginOperationDelegate<TChannel> beginOperationDelegate, Object[] inValues, EndOperationDelegate<TChannel> endOperationDelegate, SendOrPostCallback operationCompletedCallback, object userState)
private void System.IDisposable.Dispose()
protected TChannel CreateChannel()
public void Open()
private IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(AsyncCallback callback, object state)
private IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
private void System.ServiceModel.ICommunicationObject.EndOpen(IAsyncResult result)
private IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(AsyncCallback callback, object state)
private IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(TimeSpan timeout, AsyncCallback callback, object state)
private void System.ServiceModel.ICommunicationObject.EndClose(IAsyncResult result)
private void System.ServiceModel.ICommunicationObject.Close(TimeSpan timeout)
private void System.ServiceModel.ICommunicationObject.Open(TimeSpan timeout)
private void System.ServiceModel.ICommunicationObject.add_Opening(EventHandler value)
private void System.ServiceModel.ICommunicationObject.remove_Opening(EventHandler value)
private void System.ServiceModel.ICommunicationObject.add_Opened(EventHandler value)
private void System.ServiceModel.ICommunicationObject.remove_Opened(EventHandler value)
private void System.ServiceModel.ICommunicationObject.add_Closing(EventHandler value)
private void System.ServiceModel.ICommunicationObject.remove_Closing(EventHandler value)
private void System.ServiceModel.ICommunicationObject.add_Closed(EventHandler value)
private void System.ServiceModel.ICommunicationObject.remove_Closed(EventHandler value)
private void System.ServiceModel.ICommunicationObject.add_Faulted(EventHandler value)
private void System.ServiceModel.ICommunicationObject.remove_Faulted(EventHandler value)
public CacheSetting get_CacheSetting()
public void set_CacheSetting(CacheSetting value)
}
public System.ServiceModel.ClientCredentialsSecurityTokenManager : SecurityTokenManager {
private ClientCredentials credentials
public ClientCredentials ClientCredentials
public void .ctor(ClientCredentials clientCredentials)
public ClientCredentials get_ClientCredentials()
public SecurityTokenAuthenticator CreateSecurityTokenAuthenticator(SecurityTokenRequirement tokenRequirement, SecurityTokenResolver& outOfBandTokenResolver)
private X509SecurityTokenAuthenticator CreateX509Authenticator(SecurityTokenRequirement requirement)
public SecurityTokenProvider CreateSecurityTokenProvider(SecurityTokenRequirement tokenRequirement)
private UserNameSecurityTokenProvider CreateUserNameProvider(SecurityTokenRequirement requirement)
private KerberosSecurityTokenProvider CreateKerberosProvider(SecurityTokenRequirement requirement)
private X509SecurityTokenProvider CreateX509SecurityTokenProvider(SecurityTokenRequirement requirement)
private X509Certificate2 GetServiceCertificate(SecurityTokenRequirement requirement)
private void InitializeProviderCommunicationObject(ProviderCommunicationObject p, SecurityTokenRequirement r)
private SecurityTokenProvider CreateSecureConversationProvider(SecurityTokenRequirement r)
private SecurityTokenProvider CreateSslnegoProvider(SecurityTokenRequirement r)
private SecurityTokenProvider CreateSpnegoProvider(SecurityTokenRequirement r)
private IssuedSecurityTokenProvider CreateIssuedTokenProvider(SecurityTokenRequirement requirement)
public SecurityTokenSerializer CreateSecurityTokenSerializer(SecurityTokenVersion version)
protected SecurityTokenSerializer CreateSecurityTokenSerializer(SecurityVersion version)
protected internal bool IsIssuedSecurityTokenRequirement(SecurityTokenRequirement requirement)
}
internal System.ServiceModel.ClientRealProxy : RealProxy {
private bool isDuplex
private IInternalContextChannel channel
private Dictionary`2<object, Object[]> saved_params
private ManualResetEvent wait
private string <TypeName>k__BackingField
public string TypeName
public void .ctor(Type type, IInternalContextChannel channel, bool isDuplex)
public string get_TypeName()
public void set_TypeName(string value)
private bool CanCastTo(Type type)
public bool CanCastTo(Type t, object o)
public IMessage Invoke(IMessage inputMessage)
private IMessage DoInvoke(IMessage inputMessage)
}
public System.ServiceModel.ComIntegration.DllHostInitializer : object {
public void Shutdown()
public void Startup(object punkProcessControl)
}
public System.ServiceModel.ComIntegration.IChannelCredentials {
public void SetClientCertificateFromFile(string fileName, string password, string keyStorageFlags)
public void SetClientCertificateFromStore(string storeLocation, string storeName, string findType, object findValue)
public void SetClientCertificateFromStoreByName(string subjectName, string storeLocation, string storeName)
public void SetDefaultServiceCertificateFromFile(string fileName, string password, string keyStorageFlags)
public void SetDefaultServiceCertificateFromStore(string storeLocation, string storeName, string findType, object findValue)
public void SetDefaultServiceCertificateFromStoreByName(string subjectName, string storeLocation, string storeName)
public void SetIssuedToken(string localIssuerAddres, string localIssuerBindingType, string localIssuerBinding)
public void SetServiceCertificateAuthentication(string storeLocation, string revocationMode, string certificationValidationMode)
public void SetUserNameCredential(string userName, string password)
public void SetWindowsCredential(string domain, string userName, string password, int impersonationLevel, bool allowNtlm)
}
public System.ServiceModel.ComIntegration.PersistStreamTypeWrapper : object {
public ExtensionDataObject ExtensionData
public ExtensionDataObject get_ExtensionData()
public void set_ExtensionData(ExtensionDataObject value)
public void GetObject(T& obj)
public void SetObject(T obj)
}
public System.ServiceModel.ComIntegration.WasHostedComPlusFactory : ServiceHostFactoryBase {
public ServiceHostBase CreateServiceHost(string constructorString, Uri[] baseAddresses)
}
public System.ServiceModel.CommunicationException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.CommunicationObjectAbortedException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.CommunicationObjectFaultedException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.CommunicationState : Enum {
public int value__
public CommunicationState Created
public CommunicationState Opening
public CommunicationState Opened
public CommunicationState Closing
public CommunicationState Closed
public CommunicationState Faulted
}
public System.ServiceModel.ConcurrencyMode : Enum {
public int value__
public ConcurrencyMode Single
public ConcurrencyMode Reentrant
public ConcurrencyMode Multiple
}
public System.ServiceModel.Configuration.AddressHeaderCollectionElement : ConfigurationElement {
private AddressHeaderCollection _headers
public AddressHeaderCollection Headers
protected ConfigurationPropertyCollection Properties
public AddressHeaderCollection get_Headers()
public void set_Headers(AddressHeaderCollection value)
protected ConfigurationPropertyCollection get_Properties()
protected void DeserializeElement(XmlReader reader, bool serializeCollectionKey)
private IEnumerable`1<AddressHeader> DeserializeAddressHeaders(XmlReader reader)
protected bool SerializeToXmlElement(XmlWriter writer, string elementName)
}
public System.ServiceModel.Configuration.AllowedAudienceUriElement : ConfigurationElement {
private ConfigurationPropertyCollection _properties
public string AllowedAudienceUri
protected ConfigurationPropertyCollection Properties
public string get_AllowedAudienceUri()
public void set_AllowedAudienceUri(string value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.AllowedAudienceUriElementCollection : ServiceModelConfigurationElementCollection`1<AllowedAudienceUriElement> {
protected bool ThrowOnDuplicate
protected bool get_ThrowOnDuplicate()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.ApplicationContainerSettingsElement : ServiceModelConfigurationElement {
public string PackageFullName
public int SessionId
public string get_PackageFullName()
public void set_PackageFullName(string value)
public int get_SessionId()
public void set_SessionId(int value)
}
public System.ServiceModel.Configuration.AuthenticationMode : Enum {
public int value__
public AuthenticationMode AnonymousForCertificate
public AuthenticationMode AnonymousForSslNegotiated
public AuthenticationMode CertificateOverTransport
public AuthenticationMode IssuedToken
public AuthenticationMode IssuedTokenForCertificate
public AuthenticationMode IssuedTokenForSslNegotiated
public AuthenticationMode IssuedTokenOverTransport
public AuthenticationMode Kerberos
public AuthenticationMode KerberosOverTransport
public AuthenticationMode MutualCertificate
public AuthenticationMode MutualCertificateDuplex
public AuthenticationMode MutualSslNegotiated
public AuthenticationMode SecureConversation
public AuthenticationMode SspiNegotiated
public AuthenticationMode UserNameForCertificate
public AuthenticationMode UserNameForSslNegotiated
public AuthenticationMode UserNameOverTransport
public AuthenticationMode SspiNegotiatedOverTransport
}
public System.ServiceModel.Configuration.AuthorizationPolicyTypeElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty policy_type
public string PolicyType
protected ConfigurationPropertyCollection Properties
public void .ctor(string policyType)
public string get_PolicyType()
public void set_PolicyType(string value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.AuthorizationPolicyTypeElementCollection : ServiceModelConfigurationElementCollection`1<AuthorizationPolicyTypeElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.BaseAddressElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty base_address
public string BaseAddress
protected ConfigurationPropertyCollection Properties
public string get_BaseAddress()
public void set_BaseAddress(string value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.BaseAddressElementCollection : ServiceModelConfigurationElementCollection`1<BaseAddressElement> {
protected bool ThrowOnDuplicate
protected object GetElementKey(ConfigurationElement element)
protected ConfigurationElement CreateNewElement()
protected bool get_ThrowOnDuplicate()
}
public System.ServiceModel.Configuration.BaseAddressPrefixFilterElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty prefix
public Uri Prefix
protected ConfigurationPropertyCollection Properties
public void .ctor(Uri prefix)
public Uri get_Prefix()
public void set_Prefix(Uri value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.BaseAddressPrefixFilterElementCollection : ServiceModelConfigurationElementCollection`1<BaseAddressPrefixFilterElement> {
protected bool ThrowOnDuplicate
protected object GetElementKey(ConfigurationElement element)
protected ConfigurationElement CreateNewElement()
protected bool get_ThrowOnDuplicate()
}
public System.ServiceModel.Configuration.BasicHttpBindingElement : HttpBindingBaseElement {
private ConfigurationPropertyCollection _properties
protected Type BindingElementType
public WSMessageEncoding MessageEncoding
protected ConfigurationPropertyCollection Properties
public BasicHttpSecurityElement Security
public void .ctor(string name)
protected Type get_BindingElementType()
public WSMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(WSMessageEncoding value)
protected ConfigurationPropertyCollection get_Properties()
public BasicHttpSecurityElement get_Security()
protected void OnApplyConfiguration(Binding binding)
protected internal void InitializeFrom(Binding binding)
}
public System.ServiceModel.Configuration.BasicHttpContextBindingElement : BasicHttpBindingElement {
public bool ContextManagementEnabled
public void .ctor(string name)
public bool get_ContextManagementEnabled()
public void set_ContextManagementEnabled(bool value)
}
public System.ServiceModel.Configuration.BasicHttpMessageSecurityElement : ConfigurationElement {
public SecurityAlgorithmSuite AlgorithmSuite
public BasicHttpMessageCredentialType ClientCredentialType
protected ConfigurationPropertyCollection Properties
public SecurityAlgorithmSuite get_AlgorithmSuite()
public void set_AlgorithmSuite(SecurityAlgorithmSuite value)
public BasicHttpMessageCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(BasicHttpMessageCredentialType value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.BasicHttpsBindingElement : HttpBindingBaseElement {
private ConfigurationPropertyCollection _properties
protected Type BindingElementType
public WSMessageEncoding MessageEncoding
protected ConfigurationPropertyCollection Properties
public BasicHttpsSecurityElement Security
public void .ctor(string name)
protected Type get_BindingElementType()
public WSMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(WSMessageEncoding value)
protected ConfigurationPropertyCollection get_Properties()
public BasicHttpsSecurityElement get_Security()
protected void OnApplyConfiguration(Binding binding)
protected internal void InitializeFrom(Binding binding)
}
public System.ServiceModel.Configuration.BasicHttpSecurityElement : ConfigurationElement {
public BasicHttpMessageSecurityElement Message
public BasicHttpSecurityMode Mode
protected ConfigurationPropertyCollection Properties
public HttpTransportSecurityElement Transport
public BasicHttpMessageSecurityElement get_Message()
public BasicHttpSecurityMode get_Mode()
public void set_Mode(BasicHttpSecurityMode value)
protected ConfigurationPropertyCollection get_Properties()
public HttpTransportSecurityElement get_Transport()
}
public System.ServiceModel.Configuration.BasicHttpsSecurityElement : ConfigurationElement {
public BasicHttpMessageSecurityElement Message
public BasicHttpsSecurityMode Mode
protected ConfigurationPropertyCollection Properties
public HttpTransportSecurityElement Transport
public BasicHttpMessageSecurityElement get_Message()
public BasicHttpsSecurityMode get_Mode()
public void set_Mode(BasicHttpsSecurityMode value)
protected ConfigurationPropertyCollection get_Properties()
public HttpTransportSecurityElement get_Transport()
}
public System.ServiceModel.Configuration.BehaviorExtensionElement : ServiceModelExtensionElement {
public Type BehaviorType
public Type get_BehaviorType()
protected internal object CreateBehavior()
internal string GetConfigurationElementName()
}
public System.ServiceModel.Configuration.BehaviorsSection : ConfigurationSection {
private ConfigurationPropertyCollection _properties
public EndpointBehaviorElementCollection EndpointBehaviors
protected ConfigurationPropertyCollection Properties
public ServiceBehaviorElementCollection ServiceBehaviors
public EndpointBehaviorElementCollection get_EndpointBehaviors()
protected ConfigurationPropertyCollection get_Properties()
public ServiceBehaviorElementCollection get_ServiceBehaviors()
}
public System.ServiceModel.Configuration.BinaryMessageEncodingElement : BindingElementExtensionElement {
public Type BindingElementType
public int MaxReadPoolSize
public int MaxSessionSize
public int MaxWritePoolSize
protected ConfigurationPropertyCollection Properties
public XmlDictionaryReaderQuotasElement ReaderQuotas
public CompressionFormat CompressionFormat
public Type get_BindingElementType()
public int get_MaxReadPoolSize()
public void set_MaxReadPoolSize(int value)
public int get_MaxSessionSize()
public void set_MaxSessionSize(int value)
public int get_MaxWritePoolSize()
public void set_MaxWritePoolSize(int value)
protected ConfigurationPropertyCollection get_Properties()
public XmlDictionaryReaderQuotasElement get_ReaderQuotas()
protected internal BindingElement CreateBindingElement()
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected internal void InitializeFrom(BindingElement bindingElement)
public CompressionFormat get_CompressionFormat()
public void set_CompressionFormat(CompressionFormat value)
}
public System.ServiceModel.Configuration.BindingCollectionElement : ConfigurationElement {
private string _name
public string BindingName
public Type BindingType
public ReadOnlyCollection`1<IBindingConfigurationElement> ConfiguredBindings
public string get_BindingName()
public Type get_BindingType()
public ReadOnlyCollection`1<IBindingConfigurationElement> get_ConfiguredBindings()
public bool ContainsKey(string name)
protected internal Binding GetDefault()
protected internal bool TryAdd(string name, Binding binding, Configuration config)
}
public System.ServiceModel.Configuration.BindingElementExtensionElement : ServiceModelExtensionElement {
public Type BindingElementType
public Type get_BindingElementType()
public void ApplyConfiguration(BindingElement bindingElement)
protected internal BindingElement CreateBindingElement()
protected internal void InitializeFrom(BindingElement bindingElement)
internal string GetConfigurationElementName()
}
public System.ServiceModel.Configuration.BindingsSection : ConfigurationSection {
private ConfigurationPropertyCollection _properties
private List`1<BindingCollectionElement> _collections
public BasicHttpBindingCollectionElement BasicHttpBinding
public BasicHttpsBindingCollectionElement BasicHttpsBinding
public List`1<BindingCollectionElement> BindingCollections
public CustomBindingCollectionElement CustomBinding
public MsmqIntegrationBindingCollectionElement MsmqIntegrationBinding
public NetMsmqBindingCollectionElement NetMsmqBinding
public NetNamedPipeBindingCollectionElement NetNamedPipeBinding
public NetPeerTcpBindingCollectionElement NetPeerTcpBinding
public NetTcpBindingCollectionElement NetTcpBinding
protected ConfigurationPropertyCollection Properties
public WSDualHttpBindingCollectionElement WSDualHttpBinding
public WSFederationHttpBindingCollectionElement WSFederationHttpBinding
public WSHttpBindingCollectionElement WSHttpBinding
public BindingCollectionElement Item
public NetHttpBindingCollectionElement NetHttpBinding
public NetHttpsBindingCollectionElement NetHttpsBinding
public WS2007FederationHttpBindingCollectionElement WS2007FederationHttpBinding
public WS2007HttpBindingCollectionElement WS2007HttpBinding
public BasicHttpBindingCollectionElement get_BasicHttpBinding()
public BasicHttpsBindingCollectionElement get_BasicHttpsBinding()
public List`1<BindingCollectionElement> get_BindingCollections()
public CustomBindingCollectionElement get_CustomBinding()
public MsmqIntegrationBindingCollectionElement get_MsmqIntegrationBinding()
public NetMsmqBindingCollectionElement get_NetMsmqBinding()
public NetNamedPipeBindingCollectionElement get_NetNamedPipeBinding()
public NetPeerTcpBindingCollectionElement get_NetPeerTcpBinding()
public NetTcpBindingCollectionElement get_NetTcpBinding()
protected ConfigurationPropertyCollection get_Properties()
public WSDualHttpBindingCollectionElement get_WSDualHttpBinding()
public WSFederationHttpBindingCollectionElement get_WSFederationHttpBinding()
public WSHttpBindingCollectionElement get_WSHttpBinding()
public BindingsSection GetSection(Configuration config)
public BindingCollectionElement get_Item(string binding)
public NetHttpBindingCollectionElement get_NetHttpBinding()
public NetHttpsBindingCollectionElement get_NetHttpsBinding()
public WS2007FederationHttpBindingCollectionElement get_WS2007FederationHttpBinding()
public WS2007HttpBindingCollectionElement get_WS2007HttpBinding()
}
public System.ServiceModel.Configuration.CallbackDebugElement : BehaviorExtensionElement {
public Type BehaviorType
public bool IncludeExceptionDetailInFaults
protected ConfigurationPropertyCollection Properties
public Type get_BehaviorType()
public bool get_IncludeExceptionDetailInFaults()
public void set_IncludeExceptionDetailInFaults(bool value)
protected ConfigurationPropertyCollection get_Properties()
protected internal object CreateBehavior()
}
public System.ServiceModel.Configuration.CallbackTimeoutsElement : BehaviorExtensionElement {
public Type BehaviorType
protected ConfigurationPropertyCollection Properties
public TimeSpan TransactionTimeout
public Type get_BehaviorType()
protected ConfigurationPropertyCollection get_Properties()
public TimeSpan get_TransactionTimeout()
public void set_TransactionTimeout(TimeSpan value)
protected internal object CreateBehavior()
}
public System.ServiceModel.Configuration.CertificateElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty encoded_value
public string EncodedValue
protected ConfigurationPropertyCollection Properties
public string get_EncodedValue()
public void set_EncodedValue(string value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.CertificateReferenceElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty find_value
private ConfigurationProperty is_chain_included
private ConfigurationProperty store_location
private ConfigurationProperty store_name
private ConfigurationProperty x509_find_type
public string FindValue
public bool IsChainIncluded
protected ConfigurationPropertyCollection Properties
public StoreLocation StoreLocation
public StoreName StoreName
public X509FindType X509FindType
public string get_FindValue()
public void set_FindValue(string value)
public bool get_IsChainIncluded()
public void set_IsChainIncluded(bool value)
protected ConfigurationPropertyCollection get_Properties()
public StoreLocation get_StoreLocation()
public void set_StoreLocation(StoreLocation value)
public StoreName get_StoreName()
public void set_StoreName(StoreName value)
public X509FindType get_X509FindType()
public void set_X509FindType(X509FindType value)
}
public System.ServiceModel.Configuration.ChannelEndpointElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty address
private ConfigurationProperty behavior_configuration
private ConfigurationProperty binding
private ConfigurationProperty binding_configuration
private ConfigurationProperty contract
private ConfigurationProperty headers
private ConfigurationProperty identity
private ConfigurationProperty name
private ConfigurationProperty endpoint_configuration
private ConfigurationProperty kind
public Uri Address
public string BehaviorConfiguration
public string Binding
public string BindingConfiguration
public string Contract
public AddressHeaderCollectionElement Headers
public IdentityElement Identity
public string Name
public string EndpointConfiguration
public string Kind
protected ConfigurationPropertyCollection Properties
public Uri get_Address()
public void set_Address(Uri value)
public string get_BehaviorConfiguration()
public void set_BehaviorConfiguration(string value)
public string get_Binding()
public void set_Binding(string value)
public string get_BindingConfiguration()
public void set_BindingConfiguration(string value)
public string get_Contract()
public void set_Contract(string value)
public AddressHeaderCollectionElement get_Headers()
public IdentityElement get_Identity()
public string get_Name()
public void set_Name(string value)
public string get_EndpointConfiguration()
public void set_EndpointConfiguration(string value)
public string get_Kind()
public void set_Kind(string value)
protected ConfigurationPropertyCollection get_Properties()
public void .ctor(EndpointAddress address, string contractType)
}
public System.ServiceModel.Configuration.ChannelEndpointElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<ChannelEndpointElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.ChannelPoolSettingsElement : ConfigurationElement {
public TimeSpan IdleTimeout
public TimeSpan LeaseTimeout
public int MaxOutboundChannelsPerEndpoint
protected ConfigurationPropertyCollection Properties
public TimeSpan get_IdleTimeout()
public void set_IdleTimeout(TimeSpan value)
public TimeSpan get_LeaseTimeout()
public void set_LeaseTimeout(TimeSpan value)
public int get_MaxOutboundChannelsPerEndpoint()
public void set_MaxOutboundChannelsPerEndpoint(int value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.ClaimTypeElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty claim_type
private ConfigurationProperty is_optional
public string ClaimType
public bool IsOptional
protected ConfigurationPropertyCollection Properties
public void .ctor(string claimType, bool isOptional)
public string get_ClaimType()
public void set_ClaimType(string value)
public bool get_IsOptional()
public void set_IsOptional(bool value)
protected ConfigurationPropertyCollection get_Properties()
internal ClaimTypeRequirement Create()
}
public System.ServiceModel.Configuration.ClaimTypeElementCollection : ServiceModelConfigurationElementCollection`1<ClaimTypeElement> {
private ConfigurationPropertyCollection properties
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.ClearBehaviorElement : BehaviorExtensionElement {
public Type BehaviorType
public Type get_BehaviorType()
}
public System.ServiceModel.Configuration.ClientCredentialsElement : BehaviorExtensionElement {
private ConfigurationPropertyCollection _properties
public Type BehaviorType
public X509InitiatorCertificateClientElement ClientCertificate
public HttpDigestClientElement HttpDigest
public IssuedTokenClientElement IssuedToken
public PeerCredentialElement Peer
protected ConfigurationPropertyCollection Properties
public X509RecipientCertificateClientElement ServiceCertificate
public bool SupportInteractive
public string Type
public WindowsClientElement Windows
public bool UseIdentityConfiguration
public Type get_BehaviorType()
public X509InitiatorCertificateClientElement get_ClientCertificate()
public HttpDigestClientElement get_HttpDigest()
public IssuedTokenClientElement get_IssuedToken()
public PeerCredentialElement get_Peer()
protected ConfigurationPropertyCollection get_Properties()
public X509RecipientCertificateClientElement get_ServiceCertificate()
public bool get_SupportInteractive()
public void set_SupportInteractive(bool value)
public string get_Type()
public void set_Type(string value)
public WindowsClientElement get_Windows()
protected internal object CreateBehavior()
protected internal void ApplyConfiguration(ClientCredentials behavior)
private object CreateInstance(string typeName)
public bool get_UseIdentityConfiguration()
public void set_UseIdentityConfiguration(bool value)
}
public System.ServiceModel.Configuration.ClientSection : ConfigurationSection {
private Type[] _defaultPolicyImporters
private Type[] _defaultWsdlImporters
public ChannelEndpointElementCollection Endpoints
public MetadataElement Metadata
protected ConfigurationPropertyCollection Properties
public ChannelEndpointElementCollection get_Endpoints()
public MetadataElement get_Metadata()
protected ConfigurationPropertyCollection get_Properties()
protected void InitializeDefault()
protected void PostDeserialize()
}
public System.ServiceModel.Configuration.ClientViaElement : BehaviorExtensionElement {
public Type BehaviorType
protected ConfigurationPropertyCollection Properties
public Uri ViaUri
public Type get_BehaviorType()
protected ConfigurationPropertyCollection get_Properties()
public Uri get_ViaUri()
public void set_ViaUri(Uri value)
protected internal object CreateBehavior()
}
public System.ServiceModel.Configuration.ComContractElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty contract
private ConfigurationProperty exposed_methods
private ConfigurationProperty name
private ConfigurationProperty ns
private ConfigurationProperty persistable_types
private ConfigurationProperty requires_session
private ConfigurationProperty user_defined_types
public string Contract
public ComMethodElementCollection ExposedMethods
public string Name
public string Namespace
public ComPersistableTypeElementCollection PersistableTypes
protected ConfigurationPropertyCollection Properties
public bool RequiresSession
public ComUdtElementCollection UserDefinedTypes
public string get_Contract()
public void set_Contract(string value)
public ComMethodElementCollection get_ExposedMethods()
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public ComPersistableTypeElementCollection get_PersistableTypes()
protected ConfigurationPropertyCollection get_Properties()
public bool get_RequiresSession()
public void set_RequiresSession(bool value)
public ComUdtElementCollection get_UserDefinedTypes()
public void .ctor(string contractType)
}
public System.ServiceModel.Configuration.ComContractElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<ComContractElement> {
private ConfigurationPropertyCollection properties
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.ComContractsSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty com_contracts
public ComContractElementCollection ComContracts
protected ConfigurationPropertyCollection Properties
public ComContractElementCollection get_ComContracts()
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.ComMethodElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty exposed_method
public string ExposedMethod
protected ConfigurationPropertyCollection Properties
public string get_ExposedMethod()
public void set_ExposedMethod(string value)
protected ConfigurationPropertyCollection get_Properties()
public void .ctor(string method)
}
public System.ServiceModel.Configuration.ComMethodElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<ComMethodElement> {
private ConfigurationPropertyCollection properties
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.CommonBehaviorsSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty endpoint_behaviors
private ConfigurationProperty service_behaviors
public CommonEndpointBehaviorElement EndpointBehaviors
protected ConfigurationPropertyCollection Properties
public CommonServiceBehaviorElement ServiceBehaviors
public CommonEndpointBehaviorElement get_EndpointBehaviors()
protected ConfigurationPropertyCollection get_Properties()
public CommonServiceBehaviorElement get_ServiceBehaviors()
}
public System.ServiceModel.Configuration.CommonEndpointBehaviorElement : ServiceModelExtensionCollectionElement`1<BehaviorExtensionElement> {
private ConfigurationPropertyCollection properties
public void Add(BehaviorExtensionElement element)
public bool CanAdd(BehaviorExtensionElement element)
}
public System.ServiceModel.Configuration.CommonServiceBehaviorElement : ServiceModelExtensionCollectionElement`1<BehaviorExtensionElement> {
private ConfigurationPropertyCollection properties
public void Add(BehaviorExtensionElement element)
public bool CanAdd(BehaviorExtensionElement element)
}
public System.ServiceModel.Configuration.ComPersistableTypeElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty i_d
private ConfigurationProperty name
public string ID
public string Name
protected ConfigurationPropertyCollection Properties
public string get_ID()
public void set_ID(string value)
public string get_Name()
public void set_Name(string value)
protected ConfigurationPropertyCollection get_Properties()
public void .ctor(string ID)
}
public System.ServiceModel.Configuration.ComPersistableTypeElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<ComPersistableTypeElement> {
private ConfigurationPropertyCollection properties
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.CompositeDuplexElement : BindingElementExtensionElement {
public Type BindingElementType
public Uri ClientBaseAddress
protected ConfigurationPropertyCollection Properties
public Type get_BindingElementType()
public Uri get_ClientBaseAddress()
public void set_ClientBaseAddress(Uri value)
protected ConfigurationPropertyCollection get_Properties()
protected internal BindingElement CreateBindingElement()
}
public System.ServiceModel.Configuration.ComUdtElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty name
private ConfigurationProperty type_def_i_d
private ConfigurationProperty type_lib_i_d
private ConfigurationProperty type_lib_version
public string Name
protected ConfigurationPropertyCollection Properties
public string TypeDefID
public string TypeLibID
public string TypeLibVersion
public string get_Name()
public void set_Name(string value)
protected ConfigurationPropertyCollection get_Properties()
public string get_TypeDefID()
public void set_TypeDefID(string value)
public string get_TypeLibID()
public void set_TypeLibID(string value)
public string get_TypeLibVersion()
public void set_TypeLibVersion(string value)
public void .ctor(string typeDefID)
}
public System.ServiceModel.Configuration.ComUdtElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<ComUdtElement> {
private ConfigurationPropertyCollection properties
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.ConfigurationChannelFactory`1 : ChannelFactory`1<TChannel> {
public void .ctor(string endpointConfigurationName, Configuration configuration, EndpointAddress remoteAddress)
}
public System.ServiceModel.Configuration.ConfigurationDuplexChannelFactory`1 : DuplexChannelFactory`1<TChannel> {
public void .ctor(object callbackObject, string endpointConfigurationName, EndpointAddress remoteAddress, Configuration configuration)
}
internal System.ServiceModel.Configuration.ConfigUtil : object {
private List`1<Assembly> cached_assemblies
private List`1<NamedConfigType> cached_named_config_types
public BindingsSection BindingsSection
public ClientSection ClientSection
public ServicesSection ServicesSection
public BehaviorsSection BehaviorsSection
public DiagnosticSection DiagnosticSection
public ExtensionsSection ExtensionsSection
public ProtocolMappingSection ProtocolMappingSection
public StandardEndpointsSection StandardEndpointsSection
private object GetSection(string name)
public BindingsSection get_BindingsSection()
public ClientSection get_ClientSection()
public ServicesSection get_ServicesSection()
public BehaviorsSection get_BehaviorsSection()
public DiagnosticSection get_DiagnosticSection()
public ExtensionsSection get_ExtensionsSection()
public ProtocolMappingSection get_ProtocolMappingSection()
public StandardEndpointsSection get_StandardEndpointsSection()
public Binding CreateBinding(string binding, string bindingConfiguration)
public Type GetTypeFromConfigString(string name, NamedConfigCategory category)
public Binding GetBindingByProtocolMapping(Uri address)
public ServiceEndpoint ConfigureStandardEndpoint(ContractDescription cd, ChannelEndpointElement element)
public ServiceEndpoint ConfigureStandardEndpoint(ContractDescription cd, ServiceEndpointElement element)
public KeyedByTypeCollection`1<IEndpointBehavior> CreateEndpointBehaviors(string bindingConfiguration)
public EndpointAddress CreateInstance(EndpointAddressElementBase el)
public void CopyFrom(ChannelEndpointElement to, ChannelEndpointElement from)
public EndpointAddress CreateEndpointAddress(ChannelEndpointElement el)
public EndpointAddress CreateEndpointAddress(ServiceEndpointElement el)
public EndpointIdentity CreateInstance(IdentityElement el)
public X509Certificate2 CreateCertificateFrom(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue)
public X509Certificate2 CreateInstance(CertificateElement el)
public X509Certificate2 CreateInstance(CertificateReferenceElement el)
public X509Certificate2 CreateInstance(X509ClientCertificateCredentialsElement el)
public X509Certificate2 CreateInstance(X509ScopedServiceCertificateElement el)
public X509Certificate2 CreateInstance(X509DefaultServiceCertificateElement el)
public BindingCollectionElement FindCollectionElement(Binding binding, Configuration config)
}
public System.ServiceModel.Configuration.ConnectionOrientedTransportElement : TransportElement {
private ConfigurationPropertyCollection _properties
public TimeSpan ChannelInitializationTimeout
public int ConnectionBufferSize
public HostNameComparisonMode HostNameComparisonMode
public int MaxBufferSize
public TimeSpan MaxOutputDelay
public int MaxPendingAccepts
public int MaxPendingConnections
protected ConfigurationPropertyCollection Properties
public TransferMode TransferMode
public TimeSpan get_ChannelInitializationTimeout()
public void set_ChannelInitializationTimeout(TimeSpan value)
public int get_ConnectionBufferSize()
public void set_ConnectionBufferSize(int value)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public TimeSpan get_MaxOutputDelay()
public void set_MaxOutputDelay(TimeSpan value)
public int get_MaxPendingAccepts()
public void set_MaxPendingAccepts(int value)
public int get_MaxPendingConnections()
public void set_MaxPendingConnections(int value)
protected ConfigurationPropertyCollection get_Properties()
public TransferMode get_TransferMode()
public void set_TransferMode(TransferMode value)
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected internal void InitializeFrom(BindingElement bindingElement)
}
public System.ServiceModel.Configuration.ContextBindingElementExtensionElement : BindingElementExtensionElement {
public Type BindingElementType
public Uri ClientCallbackAddress
public ContextExchangeMechanism ContextExchangeMechanism
public bool ContextManagementEnabled
public ProtectionLevel ProtectionLevel
public Type get_BindingElementType()
public Uri get_ClientCallbackAddress()
public void set_ClientCallbackAddress(Uri value)
public ContextExchangeMechanism get_ContextExchangeMechanism()
public void set_ContextExchangeMechanism(ContextExchangeMechanism value)
public bool get_ContextManagementEnabled()
public void set_ContextManagementEnabled(bool value)
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
}
public System.ServiceModel.Configuration.CustomBindingCollectionElement : BindingCollectionElement {
public CustomBindingElementCollection Bindings
public ReadOnlyCollection`1<IBindingConfigurationElement> ConfiguredBindings
protected ConfigurationPropertyCollection Properties
public Type BindingType
public CustomBindingElementCollection get_Bindings()
public ReadOnlyCollection`1<IBindingConfigurationElement> get_ConfiguredBindings()
protected ConfigurationPropertyCollection get_Properties()
public Type get_BindingType()
public bool ContainsKey(string name)
protected internal Binding GetDefault()
protected internal bool TryAdd(string name, Binding binding, Configuration config)
}
public System.ServiceModel.Configuration.CustomBindingElement : NamedServiceModelExtensionCollectionElement`1<BindingElementExtensionElement> {
private ConfigurationPropertyCollection _properties
public TimeSpan CloseTimeout
public TimeSpan OpenTimeout
protected ConfigurationPropertyCollection Properties
public TimeSpan ReceiveTimeout
public TimeSpan SendTimeout
public void .ctor(string name)
public TimeSpan get_CloseTimeout()
public void set_CloseTimeout(TimeSpan value)
public TimeSpan get_OpenTimeout()
public void set_OpenTimeout(TimeSpan value)
protected ConfigurationPropertyCollection get_Properties()
public TimeSpan get_ReceiveTimeout()
public void set_ReceiveTimeout(TimeSpan value)
public TimeSpan get_SendTimeout()
public void set_SendTimeout(TimeSpan value)
public void Add(BindingElementExtensionElement element)
public bool CanAdd(BindingElementExtensionElement element)
public void ApplyConfiguration(Binding binding)
internal BindingElementExtensionElement DeserializeExtensionElement(string elementName, XmlReader reader)
protected void OnApplyConfiguration(Binding binding)
internal void InitializeFrom(Binding binding)
}
public System.ServiceModel.Configuration.CustomBindingElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<CustomBindingElement> {
private ConfigurationPropertyCollection properties
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.DataContractSerializerElement : BehaviorExtensionElement {
public Type BehaviorType
public bool IgnoreExtensionDataObject
public int MaxItemsInObjectGraph
protected ConfigurationPropertyCollection Properties
public Type get_BehaviorType()
public bool get_IgnoreExtensionDataObject()
public void set_IgnoreExtensionDataObject(bool value)
public int get_MaxItemsInObjectGraph()
public void set_MaxItemsInObjectGraph(int value)
protected ConfigurationPropertyCollection get_Properties()
protected internal object CreateBehavior()
}
public System.ServiceModel.Configuration.DefaultPortElement : ConfigurationElement {
public int Port
public string Scheme
public void .ctor(DefaultPortElement other)
public int get_Port()
public void set_Port(int value)
public string get_Scheme()
public void set_Scheme(string value)
}
public System.ServiceModel.Configuration.DefaultPortElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<DefaultPortElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.DelegatingHandlerElement : ConfigurationElement {
public string Type
public string get_Type()
public void set_Type(string value)
}
public System.ServiceModel.Configuration.DelegatingHandlerElementCollection : ServiceModelConfigurationElementCollection`1<DelegatingHandlerElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.DiagnosticSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty end_to_end_tracing
private ConfigurationProperty etw_provider_id
private ConfigurationProperty message_logging
private ConfigurationProperty performance_counters
private ConfigurationProperty performance_counter_enabled
private ConfigurationProperty wmi_provider_enabled
public EndToEndTracingElement EndToEndTracing
public string EtwProviderId
public MessageLoggingElement MessageLogging
public PerformanceCounterScope PerformanceCounters
public bool PerformanceCounterEnabled
protected ConfigurationPropertyCollection Properties
public bool WmiProviderEnabled
public EndToEndTracingElement get_EndToEndTracing()
public string get_EtwProviderId()
public void set_EtwProviderId(string value)
public MessageLoggingElement get_MessageLogging()
public PerformanceCounterScope get_PerformanceCounters()
public void set_PerformanceCounters(PerformanceCounterScope value)
public bool get_PerformanceCounterEnabled()
public void set_PerformanceCounterEnabled(bool value)
protected ConfigurationPropertyCollection get_Properties()
public bool get_WmiProviderEnabled()
public void set_WmiProviderEnabled(bool value)
}
public System.ServiceModel.Configuration.DispatcherSynchronizationElement : BehaviorExtensionElement {
public bool AsynchronousSendEnabled
public Type BehaviorType
public int MaxPendingReceives
public bool get_AsynchronousSendEnabled()
public void set_AsynchronousSendEnabled(bool value)
public Type get_BehaviorType()
public int get_MaxPendingReceives()
public void set_MaxPendingReceives(int value)
}
public System.ServiceModel.Configuration.DnsElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty value
protected ConfigurationPropertyCollection Properties
public string Value
protected ConfigurationPropertyCollection get_Properties()
public string get_Value()
public void set_Value(string value)
}
internal System.ServiceModel.Configuration.EncodingConverter : TypeConverter {
private EncodingConverter _instance
public EncodingConverter Instance
public EncodingConverter get_Instance()
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.ServiceModel.Configuration.EndpointAddressElementBase : ConfigurationElement {
private ConfigurationPropertyCollection _properties
public Uri Address
public AddressHeaderCollectionElement Headers
public IdentityElement Identity
protected ConfigurationPropertyCollection Properties
public Uri get_Address()
public void set_Address(Uri value)
public AddressHeaderCollectionElement get_Headers()
public IdentityElement get_Identity()
protected ConfigurationPropertyCollection get_Properties()
public void InitializeFrom(EndpointAddress endpointAddress)
}
public System.ServiceModel.Configuration.EndpointBehaviorElement : NamedServiceModelExtensionCollectionElement`1<BehaviorExtensionElement> {
public void .ctor(string name)
internal BehaviorExtensionElement DeserializeExtensionElement(string elementName, XmlReader reader)
public void Add(BehaviorExtensionElement element)
public bool CanAdd(BehaviorExtensionElement element)
}
public System.ServiceModel.Configuration.EndpointBehaviorElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<EndpointBehaviorElement> {
protected bool ThrowOnDuplicate
protected object GetElementKey(ConfigurationElement element)
protected bool get_ThrowOnDuplicate()
}
public System.ServiceModel.Configuration.EndpointCollectionElement : ConfigurationElement {
public ReadOnlyCollection`1<StandardEndpointElement> ConfiguredEndpoints
public string EndpointName
public Type EndpointType
public ReadOnlyCollection`1<StandardEndpointElement> get_ConfiguredEndpoints()
public string get_EndpointName()
public Type get_EndpointType()
public bool ContainsKey(string name)
protected internal StandardEndpointElement GetDefaultStandardEndpointElement()
protected internal bool TryAdd(string name, ServiceEndpoint endpoint, Configuration config)
}
public System.ServiceModel.Configuration.EndToEndTracingElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty activity_tracing
private ConfigurationProperty message_flow_tracing
private ConfigurationProperty propagate_activity
public bool ActivityTracing
public bool MessageFlowTracing
public bool PropagateActivity
protected ConfigurationPropertyCollection Properties
public bool get_ActivityTracing()
public void set_ActivityTracing(bool value)
public bool get_MessageFlowTracing()
public void set_MessageFlowTracing(bool value)
public bool get_PropagateActivity()
public void set_PropagateActivity(bool value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.ExtensionElement : ConfigurationElement {
private ConfigurationPropertyCollection _properties
public string Name
protected ConfigurationPropertyCollection Properties
public string Type
public void .ctor(string name)
public void .ctor(string name, string type)
public string get_Name()
public void set_Name(string value)
protected ConfigurationPropertyCollection get_Properties()
public string get_Type()
public void set_Type(string value)
}
public System.ServiceModel.Configuration.ExtensionElementCollection : ServiceModelConfigurationElementCollection`1<ExtensionElement> {
private Dictionary`2<Type, ExtensionElement> _lookup
private Dictionary`2<Type, ExtensionElement> Lookup
protected bool ThrowOnDuplicate
private Dictionary`2<Type, ExtensionElement> get_Lookup()
protected bool get_ThrowOnDuplicate()
protected object GetElementKey(ConfigurationElement element)
protected void BaseAdd(ConfigurationElement element)
protected void BaseAdd(int index, ConfigurationElement element)
private void AddLookup(ConfigurationElement element)
internal string GetConfigurationElementName(Type type)
}
public System.ServiceModel.Configuration.ExtensionsSection : ConfigurationSection {
private ConfigurationPropertyCollection _properties
public ExtensionElementCollection BehaviorExtensions
public ExtensionElementCollection BindingElementExtensions
public ExtensionElementCollection BindingExtensions
public ExtensionElementCollection EndpointExtensions
protected ConfigurationPropertyCollection Properties
public ExtensionElementCollection get_BehaviorExtensions()
public ExtensionElementCollection get_BindingElementExtensions()
public ExtensionElementCollection get_BindingExtensions()
public ExtensionElementCollection get_EndpointExtensions()
protected ConfigurationPropertyCollection get_Properties()
protected void InitializeDefault()
private void InitializeBindingExtensionsDefault()
private void InitializeBindingElementExtensionsDefault()
private void InitializeBehaviorExtensionsDefault()
private void InitializeEndpointExtensionsDefault()
}
public System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty algorithm_suite
private ConfigurationProperty claim_type_requirements
private ConfigurationProperty establish_security_context
private ConfigurationProperty issued_key_type
private ConfigurationProperty issued_token_type
private ConfigurationProperty issuer
private ConfigurationProperty issuer_metadata
private ConfigurationProperty negotiate_service_credential
private ConfigurationProperty token_request_parameters
public SecurityAlgorithmSuite AlgorithmSuite
public ClaimTypeElementCollection ClaimTypeRequirements
public bool EstablishSecurityContext
public SecurityKeyType IssuedKeyType
public string IssuedTokenType
public IssuedTokenParametersEndpointAddressElement Issuer
public EndpointAddressElementBase IssuerMetadata
public bool NegotiateServiceCredential
protected ConfigurationPropertyCollection Properties
public XmlElementElementCollection TokenRequestParameters
public SecurityAlgorithmSuite get_AlgorithmSuite()
public void set_AlgorithmSuite(SecurityAlgorithmSuite value)
public ClaimTypeElementCollection get_ClaimTypeRequirements()
public bool get_EstablishSecurityContext()
public void set_EstablishSecurityContext(bool value)
public SecurityKeyType get_IssuedKeyType()
public void set_IssuedKeyType(SecurityKeyType value)
public string get_IssuedTokenType()
public void set_IssuedTokenType(string value)
public IssuedTokenParametersEndpointAddressElement get_Issuer()
public EndpointAddressElementBase get_IssuerMetadata()
public bool get_NegotiateServiceCredential()
public void set_NegotiateServiceCredential(bool value)
protected ConfigurationPropertyCollection get_Properties()
public XmlElementElementCollection get_TokenRequestParameters()
internal void ApplyConfiguration(FederatedMessageSecurityOverHttp s)
}
public System.ServiceModel.Configuration.HostElement : ConfigurationElement {
public BaseAddressElementCollection BaseAddresses
protected ConfigurationPropertyCollection Properties
public HostTimeoutsElement Timeouts
public BaseAddressElementCollection get_BaseAddresses()
protected ConfigurationPropertyCollection get_Properties()
public HostTimeoutsElement get_Timeouts()
}
public System.ServiceModel.Configuration.HostTimeoutsElement : ConfigurationElement {
public TimeSpan CloseTimeout
public TimeSpan OpenTimeout
protected ConfigurationPropertyCollection Properties
public TimeSpan get_CloseTimeout()
public void set_CloseTimeout(TimeSpan value)
public TimeSpan get_OpenTimeout()
public void set_OpenTimeout(TimeSpan value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.HttpBindingBaseElement : StandardBindingElement {
private ConfigurationPropertyCollection _properties
public bool AllowCookies
public bool BypassProxyOnLocal
public HostNameComparisonMode HostNameComparisonMode
public long MaxBufferPoolSize
public int MaxBufferSize
public long MaxReceivedMessageSize
protected ConfigurationPropertyCollection Properties
public Uri ProxyAddress
public XmlDictionaryReaderQuotasElement ReaderQuotas
public Encoding TextEncoding
public TransferMode TransferMode
public bool UseDefaultWebProxy
public void .ctor(string name)
public bool get_AllowCookies()
public void set_AllowCookies(bool value)
public bool get_BypassProxyOnLocal()
public void set_BypassProxyOnLocal(bool value)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
protected ConfigurationPropertyCollection get_Properties()
public Uri get_ProxyAddress()
public void set_ProxyAddress(Uri value)
public XmlDictionaryReaderQuotasElement get_ReaderQuotas()
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public TransferMode get_TransferMode()
public void set_TransferMode(TransferMode value)
public bool get_UseDefaultWebProxy()
public void set_UseDefaultWebProxy(bool value)
protected void OnApplyConfiguration(Binding binding)
protected internal void InitializeFrom(Binding binding)
}
public System.ServiceModel.Configuration.HttpDigestClientElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty impersonation_level
public TokenImpersonationLevel ImpersonationLevel
protected ConfigurationPropertyCollection Properties
public TokenImpersonationLevel get_ImpersonationLevel()
public void set_ImpersonationLevel(TokenImpersonationLevel value)
protected ConfigurationPropertyCollection get_Properties()
public void Copy(HttpDigestClientElement from)
}
public System.ServiceModel.Configuration.HttpMessageHandlerFactoryElement : ConfigurationElement {
public DelegatingHandlerElementCollection Handlers
public string Type
public DelegatingHandlerElementCollection get_Handlers()
public string get_Type()
public void set_Type(string value)
}
public System.ServiceModel.Configuration.HttpsTransportElement : HttpTransportElement {
private ConfigurationPropertyCollection _properties
public Type BindingElementType
protected ConfigurationPropertyCollection Properties
public bool RequireClientCertificate
public Type get_BindingElementType()
protected ConfigurationPropertyCollection get_Properties()
public bool get_RequireClientCertificate()
public void set_RequireClientCertificate(bool value)
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected TransportBindingElement CreateDefaultBindingElement()
protected internal void InitializeFrom(BindingElement bindingElement)
}
public System.ServiceModel.Configuration.HttpTransportElement : TransportElement {
private ConfigurationPropertyCollection _properties
public bool AllowCookies
public AuthenticationSchemes AuthenticationScheme
public Type BindingElementType
public bool BypassProxyOnLocal
public HostNameComparisonMode HostNameComparisonMode
public bool KeepAliveEnabled
public int MaxBufferSize
protected ConfigurationPropertyCollection Properties
public bool DecompressionEnabled
public ExtendedProtectionPolicyElement ExtendedProtectionPolicy
public Uri ProxyAddress
public AuthenticationSchemes ProxyAuthenticationScheme
public string Realm
public TransferMode TransferMode
public bool UnsafeConnectionNtlmAuthentication
public bool UseDefaultWebProxy
public int MaxPendingAccepts
public HttpMessageHandlerFactoryElement MessageHandlerFactory
public TimeSpan RequestInitializationTimeout
public WebSocketTransportSettingsElement WebSocketSettings
public bool get_AllowCookies()
public void set_AllowCookies(bool value)
public AuthenticationSchemes get_AuthenticationScheme()
public void set_AuthenticationScheme(AuthenticationSchemes value)
public Type get_BindingElementType()
public bool get_BypassProxyOnLocal()
public void set_BypassProxyOnLocal(bool value)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public bool get_KeepAliveEnabled()
public void set_KeepAliveEnabled(bool value)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
protected ConfigurationPropertyCollection get_Properties()
public bool get_DecompressionEnabled()
public void set_DecompressionEnabled(bool value)
public ExtendedProtectionPolicyElement get_ExtendedProtectionPolicy()
public void set_ExtendedProtectionPolicy(ExtendedProtectionPolicyElement value)
public Uri get_ProxyAddress()
public void set_ProxyAddress(Uri value)
public AuthenticationSchemes get_ProxyAuthenticationScheme()
public void set_ProxyAuthenticationScheme(AuthenticationSchemes value)
public string get_Realm()
public void set_Realm(string value)
public TransferMode get_TransferMode()
public void set_TransferMode(TransferMode value)
public bool get_UnsafeConnectionNtlmAuthentication()
public void set_UnsafeConnectionNtlmAuthentication(bool value)
public bool get_UseDefaultWebProxy()
public void set_UseDefaultWebProxy(bool value)
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected TransportBindingElement CreateDefaultBindingElement()
protected internal void InitializeFrom(BindingElement bindingElement)
public int get_MaxPendingAccepts()
public void set_MaxPendingAccepts(int value)
public HttpMessageHandlerFactoryElement get_MessageHandlerFactory()
public void set_MessageHandlerFactory(HttpMessageHandlerFactoryElement value)
public TimeSpan get_RequestInitializationTimeout()
public void set_RequestInitializationTimeout(TimeSpan value)
public WebSocketTransportSettingsElement get_WebSocketSettings()
public void set_WebSocketSettings(WebSocketTransportSettingsElement value)
}
public System.ServiceModel.Configuration.HttpTransportSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty client_credential_type
private ConfigurationProperty proxy_credential_type
private ConfigurationProperty realm
private ConfigurationProperty extended_protection_policy
public HttpClientCredentialType ClientCredentialType
public ExtendedProtectionPolicyElement extendedProtectionPolicy
protected ConfigurationPropertyCollection Properties
public HttpProxyCredentialType ProxyCredentialType
public string Realm
public ExtendedProtectionPolicyElement ExtendedProtectionPolicy
public HttpClientCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(HttpClientCredentialType value)
public ExtendedProtectionPolicyElement get_extendedProtectionPolicy()
public void set_extendedProtectionPolicy(ExtendedProtectionPolicyElement value)
protected ConfigurationPropertyCollection get_Properties()
public HttpProxyCredentialType get_ProxyCredentialType()
public void set_ProxyCredentialType(HttpProxyCredentialType value)
public string get_Realm()
public void set_Realm(string value)
internal void ApplyConfiguration(HttpTransportSecurity security)
public ExtendedProtectionPolicyElement get_ExtendedProtectionPolicy()
}
public System.ServiceModel.Configuration.IBindingConfigurationElement {
public TimeSpan CloseTimeout
public string Name
public TimeSpan OpenTimeout
public TimeSpan ReceiveTimeout
public TimeSpan SendTimeout
public TimeSpan get_CloseTimeout()
public string get_Name()
public TimeSpan get_OpenTimeout()
public TimeSpan get_ReceiveTimeout()
public TimeSpan get_SendTimeout()
public void ApplyConfiguration(Binding binding)
}
public System.ServiceModel.Configuration.IdentityElement : ConfigurationElement {
public CertificateElement Certificate
public CertificateReferenceElement CertificateReference
public DnsElement Dns
protected ConfigurationPropertyCollection Properties
public RsaElement Rsa
public ServicePrincipalNameElement ServicePrincipalName
public UserPrincipalNameElement UserPrincipalName
public CertificateElement get_Certificate()
public CertificateReferenceElement get_CertificateReference()
public DnsElement get_Dns()
protected ConfigurationPropertyCollection get_Properties()
public RsaElement get_Rsa()
public ServicePrincipalNameElement get_ServicePrincipalName()
public UserPrincipalNameElement get_UserPrincipalName()
internal EndpointIdentity Create()
public void InitializeFrom(EndpointIdentity identity)
}
internal System.ServiceModel.Configuration.IPAddressConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
}
public System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty behavior_configuration
private ConfigurationProperty issuer_address
public string BehaviorConfiguration
public string IssuerAddress
protected ConfigurationPropertyCollection Properties
public string get_BehaviorConfiguration()
public void set_BehaviorConfiguration(string value)
public string get_IssuerAddress()
public void set_IssuerAddress(string value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElementCollection : ServiceModelConfigurationElementCollection`1<IssuedTokenClientBehaviorsElement> {
private ConfigurationPropertyCollection properties
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.IssuedTokenClientElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty cache_issued_tokens
private ConfigurationProperty default_key_entropy_mode
private ConfigurationProperty issued_token_renewal_threshold_percentage
private ConfigurationProperty issuer_channel_behaviors
private ConfigurationProperty local_issuer
private ConfigurationProperty local_issuer_channel_behaviors
private ConfigurationProperty max_issued_token_caching_time
public bool CacheIssuedTokens
public SecurityKeyEntropyMode DefaultKeyEntropyMode
public int IssuedTokenRenewalThresholdPercentage
public IssuedTokenClientBehaviorsElementCollection IssuerChannelBehaviors
public IssuedTokenParametersEndpointAddressElement LocalIssuer
public string LocalIssuerChannelBehaviors
public TimeSpan MaxIssuedTokenCachingTime
protected ConfigurationPropertyCollection Properties
public bool get_CacheIssuedTokens()
public void set_CacheIssuedTokens(bool value)
public SecurityKeyEntropyMode get_DefaultKeyEntropyMode()
public void set_DefaultKeyEntropyMode(SecurityKeyEntropyMode value)
public int get_IssuedTokenRenewalThresholdPercentage()
public void set_IssuedTokenRenewalThresholdPercentage(int value)
public IssuedTokenClientBehaviorsElementCollection get_IssuerChannelBehaviors()
public IssuedTokenParametersEndpointAddressElement get_LocalIssuer()
public string get_LocalIssuerChannelBehaviors()
public void set_LocalIssuerChannelBehaviors(string value)
public TimeSpan get_MaxIssuedTokenCachingTime()
public void set_MaxIssuedTokenCachingTime(TimeSpan value)
protected ConfigurationPropertyCollection get_Properties()
public void Copy(IssuedTokenClientElement from)
}
public System.ServiceModel.Configuration.IssuedTokenParametersElement : ConfigurationElement {
public XmlElementElementCollection AdditionalRequestParameters
public ClaimTypeElementCollection ClaimTypeRequirements
public IssuedTokenParametersEndpointAddressElement Issuer
public EndpointAddressElementBase IssuerMetadata
public int KeySize
public SecurityKeyType KeyType
protected ConfigurationPropertyCollection Properties
public string TokenType
public MessageSecurityVersion DefaultMessageSecurityVersion
public bool UseStrTransform
public XmlElementElementCollection get_AdditionalRequestParameters()
public ClaimTypeElementCollection get_ClaimTypeRequirements()
public IssuedTokenParametersEndpointAddressElement get_Issuer()
public EndpointAddressElementBase get_IssuerMetadata()
public int get_KeySize()
public void set_KeySize(int value)
public SecurityKeyType get_KeyType()
public void set_KeyType(SecurityKeyType value)
protected ConfigurationPropertyCollection get_Properties()
public string get_TokenType()
public void set_TokenType(string value)
public MessageSecurityVersion get_DefaultMessageSecurityVersion()
public void set_DefaultMessageSecurityVersion(MessageSecurityVersion value)
public bool get_UseStrTransform()
public void set_UseStrTransform(bool value)
}
public System.ServiceModel.Configuration.IssuedTokenParametersEndpointAddressElement : EndpointAddressElementBase {
private ConfigurationPropertyCollection _properties
public string Binding
public string BindingConfiguration
protected ConfigurationPropertyCollection Properties
public string get_Binding()
public void set_Binding(string value)
public string get_BindingConfiguration()
public void set_BindingConfiguration(string value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.IssuedTokenServiceElement : ConfigurationElement {
public bool AllowUntrustedRsaIssuers
public X509CertificateTrustedIssuerElementCollection KnownCertificates
protected ConfigurationPropertyCollection Properties
public string SamlSerializerType
public AllowedAudienceUriElementCollection AllowedAudienceUris
public AudienceUriMode AudienceUriMode
public X509CertificateValidationMode CertificateValidationMode
public string CustomCertificateValidatorType
public X509RevocationMode RevocationMode
public StoreLocation TrustedStoreLocation
public bool get_AllowUntrustedRsaIssuers()
public void set_AllowUntrustedRsaIssuers(bool value)
public X509CertificateTrustedIssuerElementCollection get_KnownCertificates()
protected ConfigurationPropertyCollection get_Properties()
public string get_SamlSerializerType()
public void set_SamlSerializerType(string value)
public AllowedAudienceUriElementCollection get_AllowedAudienceUris()
public AudienceUriMode get_AudienceUriMode()
public void set_AudienceUriMode(AudienceUriMode value)
public X509CertificateValidationMode get_CertificateValidationMode()
public void set_CertificateValidationMode(X509CertificateValidationMode value)
public string get_CustomCertificateValidatorType()
public void set_CustomCertificateValidatorType(string value)
public X509RevocationMode get_RevocationMode()
public void set_RevocationMode(X509RevocationMode value)
public StoreLocation get_TrustedStoreLocation()
public void set_TrustedStoreLocation(StoreLocation value)
public void Copy(IssuedTokenServiceElement from)
}
public System.ServiceModel.Configuration.LocalClientSecuritySettingsElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty cache_cookies
private ConfigurationProperty cookie_renewal_threshold_percentage
private ConfigurationProperty detect_replays
private ConfigurationProperty max_clock_skew
private ConfigurationProperty max_cookie_caching_time
private ConfigurationProperty reconnect_transport_on_failure
private ConfigurationProperty replay_cache_size
private ConfigurationProperty replay_window
private ConfigurationProperty session_key_renewal_interval
private ConfigurationProperty session_key_rollover_interval
private ConfigurationProperty timestamp_validity_duration
public bool CacheCookies
public int CookieRenewalThresholdPercentage
public bool DetectReplays
public TimeSpan MaxClockSkew
public TimeSpan MaxCookieCachingTime
protected ConfigurationPropertyCollection Properties
public bool ReconnectTransportOnFailure
public int ReplayCacheSize
public TimeSpan ReplayWindow
public TimeSpan SessionKeyRenewalInterval
public TimeSpan SessionKeyRolloverInterval
public TimeSpan TimestampValidityDuration
public bool get_CacheCookies()
public void set_CacheCookies(bool value)
public int get_CookieRenewalThresholdPercentage()
public void set_CookieRenewalThresholdPercentage(int value)
public bool get_DetectReplays()
public void set_DetectReplays(bool value)
public TimeSpan get_MaxClockSkew()
public void set_MaxClockSkew(TimeSpan value)
public TimeSpan get_MaxCookieCachingTime()
public void set_MaxCookieCachingTime(TimeSpan value)
protected ConfigurationPropertyCollection get_Properties()
public bool get_ReconnectTransportOnFailure()
public void set_ReconnectTransportOnFailure(bool value)
public int get_ReplayCacheSize()
public void set_ReplayCacheSize(int value)
public TimeSpan get_ReplayWindow()
public void set_ReplayWindow(TimeSpan value)
public TimeSpan get_SessionKeyRenewalInterval()
public void set_SessionKeyRenewalInterval(TimeSpan value)
public TimeSpan get_SessionKeyRolloverInterval()
public void set_SessionKeyRolloverInterval(TimeSpan value)
public TimeSpan get_TimestampValidityDuration()
public void set_TimestampValidityDuration(TimeSpan value)
}
public System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty detect_replays
private ConfigurationProperty inactivity_timeout
private ConfigurationProperty issued_cookie_lifetime
private ConfigurationProperty max_cached_cookies
private ConfigurationProperty max_clock_skew
private ConfigurationProperty max_pending_sessions
private ConfigurationProperty max_stateful_negotiations
private ConfigurationProperty negotiation_timeout
private ConfigurationProperty reconnect_transport_on_failure
private ConfigurationProperty replay_cache_size
private ConfigurationProperty replay_window
private ConfigurationProperty session_key_renewal_interval
private ConfigurationProperty session_key_rollover_interval
private ConfigurationProperty timestamp_validity_duration
public bool DetectReplays
public TimeSpan InactivityTimeout
public TimeSpan IssuedCookieLifetime
public int MaxCachedCookies
public TimeSpan MaxClockSkew
public int MaxPendingSessions
public int MaxStatefulNegotiations
public TimeSpan NegotiationTimeout
protected ConfigurationPropertyCollection Properties
public bool ReconnectTransportOnFailure
public int ReplayCacheSize
public TimeSpan ReplayWindow
public TimeSpan SessionKeyRenewalInterval
public TimeSpan SessionKeyRolloverInterval
public TimeSpan TimestampValidityDuration
public bool get_DetectReplays()
public void set_DetectReplays(bool value)
public TimeSpan get_InactivityTimeout()
public void set_InactivityTimeout(TimeSpan value)
public TimeSpan get_IssuedCookieLifetime()
public void set_IssuedCookieLifetime(TimeSpan value)
public int get_MaxCachedCookies()
public void set_MaxCachedCookies(int value)
public TimeSpan get_MaxClockSkew()
public void set_MaxClockSkew(TimeSpan value)
public int get_MaxPendingSessions()
public void set_MaxPendingSessions(int value)
public int get_MaxStatefulNegotiations()
public void set_MaxStatefulNegotiations(int value)
public TimeSpan get_NegotiationTimeout()
public void set_NegotiationTimeout(TimeSpan value)
protected ConfigurationPropertyCollection get_Properties()
public bool get_ReconnectTransportOnFailure()
public void set_ReconnectTransportOnFailure(bool value)
public int get_ReplayCacheSize()
public void set_ReplayCacheSize(int value)
public TimeSpan get_ReplayWindow()
public void set_ReplayWindow(TimeSpan value)
public TimeSpan get_SessionKeyRenewalInterval()
public void set_SessionKeyRenewalInterval(TimeSpan value)
public TimeSpan get_SessionKeyRolloverInterval()
public void set_SessionKeyRolloverInterval(TimeSpan value)
public TimeSpan get_TimestampValidityDuration()
public void set_TimestampValidityDuration(TimeSpan value)
}
public System.ServiceModel.Configuration.MessageLoggingElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty filters
private ConfigurationProperty log_entire_message
private ConfigurationProperty log_known_pii
private ConfigurationProperty log_malformed_messages
private ConfigurationProperty log_messages_at_service_level
private ConfigurationProperty log_messages_at_transport_level
private ConfigurationProperty max_messages_to_log
private ConfigurationProperty max_size_of_message_to_log
public XPathMessageFilterElementCollection Filters
public bool LogEntireMessage
public bool LogKnownPii
public bool LogMalformedMessages
public bool LogMessagesAtServiceLevel
public bool LogMessagesAtTransportLevel
public int MaxMessagesToLog
public int MaxSizeOfMessageToLog
protected ConfigurationPropertyCollection Properties
public XPathMessageFilterElementCollection get_Filters()
public bool get_LogEntireMessage()
public void set_LogEntireMessage(bool value)
public bool get_LogKnownPii()
public void set_LogKnownPii(bool value)
public bool get_LogMalformedMessages()
public void set_LogMalformedMessages(bool value)
public bool get_LogMessagesAtServiceLevel()
public void set_LogMessagesAtServiceLevel(bool value)
public bool get_LogMessagesAtTransportLevel()
public void set_LogMessagesAtTransportLevel(bool value)
public int get_MaxMessagesToLog()
public void set_MaxMessagesToLog(int value)
public int get_MaxSizeOfMessageToLog()
public void set_MaxSizeOfMessageToLog(int value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.MessageSecurityOverHttpElement : ConfigurationElement {
public SecurityAlgorithmSuite AlgorithmSuite
public MessageCredentialType ClientCredentialType
public bool NegotiateServiceCredential
protected ConfigurationPropertyCollection Properties
public SecurityAlgorithmSuite get_AlgorithmSuite()
public void set_AlgorithmSuite(SecurityAlgorithmSuite value)
public MessageCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(MessageCredentialType value)
public bool get_NegotiateServiceCredential()
public void set_NegotiateServiceCredential(bool value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.MessageSecurityOverMsmqElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty algorithm_suite
private ConfigurationProperty client_credential_type
public SecurityAlgorithmSuite AlgorithmSuite
public MessageCredentialType ClientCredentialType
protected ConfigurationPropertyCollection Properties
public SecurityAlgorithmSuite get_AlgorithmSuite()
public void set_AlgorithmSuite(SecurityAlgorithmSuite value)
public MessageCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(MessageCredentialType value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.MessageSecurityOverTcpElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty algorithm_suite
private ConfigurationProperty client_credential_type
public SecurityAlgorithmSuite AlgorithmSuite
public MessageCredentialType ClientCredentialType
protected ConfigurationPropertyCollection Properties
public SecurityAlgorithmSuite get_AlgorithmSuite()
public void set_AlgorithmSuite(SecurityAlgorithmSuite value)
public MessageCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(MessageCredentialType value)
protected ConfigurationPropertyCollection get_Properties()
}
internal System.ServiceModel.Configuration.MessageSecurityVersionConverter : TypeConverter {
private Dictionary`2<string, MessageSecurityVersion> _lookup
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
}
internal System.ServiceModel.Configuration.MessageVersionConverter : TypeConverter {
private Dictionary`2<string, MessageVersion> _lookup
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
}
public System.ServiceModel.Configuration.MetadataElement : ConfigurationElement {
public PolicyImporterElementCollection PolicyImporters
protected ConfigurationPropertyCollection Properties
public WsdlImporterElementCollection WsdlImporters
public PolicyImporterElementCollection get_PolicyImporters()
protected ConfigurationPropertyCollection get_Properties()
public WsdlImporterElementCollection get_WsdlImporters()
public Collection`1<IPolicyImportExtension> LoadPolicyImportExtensions()
public Collection`1<IWsdlImportExtension> LoadWsdlImportExtensions()
}
public System.ServiceModel.Configuration.MexBindingBindingCollectionElement`2 : StandardBindingCollectionElement`2<TStandardBinding, TBindingConfiguration> {
private ConfigurationPropertyCollection properties
}
public System.ServiceModel.Configuration.MexBindingElement`1 : StandardBindingElement {
protected Type BindingElementType
protected void .ctor(string name)
protected Type get_BindingElementType()
protected void OnApplyConfiguration(Binding binding)
}
public System.ServiceModel.Configuration.MexHttpBindingCollectionElement : MexBindingBindingCollectionElement`2<WSHttpBinding, MexHttpBindingElement> {
private ConfigurationPropertyCollection properties
protected internal Binding GetDefault()
}
public System.ServiceModel.Configuration.MexHttpBindingElement : MexBindingElement`1<WSHttpBinding> {
public void .ctor(string name)
}
public System.ServiceModel.Configuration.MexHttpsBindingCollectionElement : MexBindingBindingCollectionElement`2<WSHttpBinding, MexHttpsBindingElement> {
private ConfigurationPropertyCollection properties
protected internal Binding GetDefault()
}
public System.ServiceModel.Configuration.MexHttpsBindingElement : MexBindingElement`1<WSHttpBinding> {
public void .ctor(string name)
}
public System.ServiceModel.Configuration.MexNamedPipeBindingCollectionElement : MexBindingBindingCollectionElement`2<CustomBinding, MexNamedPipeBindingElement> {
private ConfigurationPropertyCollection properties
}
public System.ServiceModel.Configuration.MexNamedPipeBindingElement : MexBindingElement`1<CustomBinding> {
public void .ctor(string name)
}
public System.ServiceModel.Configuration.MexTcpBindingCollectionElement : MexBindingBindingCollectionElement`2<CustomBinding, MexTcpBindingElement> {
private ConfigurationPropertyCollection properties
}
public System.ServiceModel.Configuration.MexTcpBindingElement : MexBindingElement`1<CustomBinding> {
public void .ctor(string name)
}
public System.ServiceModel.Configuration.MsmqBindingElementBase : StandardBindingElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty custom_dead_letter_queue
private ConfigurationProperty dead_letter_queue
private ConfigurationProperty durable
private ConfigurationProperty exactly_once
private ConfigurationProperty max_received_message_size
private ConfigurationProperty max_retry_cycles
private ConfigurationProperty receive_error_handling
private ConfigurationProperty receive_retry_count
private ConfigurationProperty retry_cycle_delay
private ConfigurationProperty time_to_live
private ConfigurationProperty use_msmq_tracing
private ConfigurationProperty use_source_journal
public Uri CustomDeadLetterQueue
public DeadLetterQueue DeadLetterQueue
public bool Durable
public bool ExactlyOnce
public long MaxReceivedMessageSize
public int MaxRetryCycles
protected ConfigurationPropertyCollection Properties
public ReceiveErrorHandling ReceiveErrorHandling
public int ReceiveRetryCount
public TimeSpan RetryCycleDelay
public TimeSpan TimeToLive
public bool UseMsmqTracing
public bool UseSourceJournal
public bool ReceiveContextEnabled
public TimeSpan ValidityDuration
public Uri get_CustomDeadLetterQueue()
public void set_CustomDeadLetterQueue(Uri value)
public DeadLetterQueue get_DeadLetterQueue()
public void set_DeadLetterQueue(DeadLetterQueue value)
public bool get_Durable()
public void set_Durable(bool value)
public bool get_ExactlyOnce()
public void set_ExactlyOnce(bool value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public int get_MaxRetryCycles()
public void set_MaxRetryCycles(int value)
protected ConfigurationPropertyCollection get_Properties()
public ReceiveErrorHandling get_ReceiveErrorHandling()
public void set_ReceiveErrorHandling(ReceiveErrorHandling value)
public int get_ReceiveRetryCount()
public void set_ReceiveRetryCount(int value)
public TimeSpan get_RetryCycleDelay()
public void set_RetryCycleDelay(TimeSpan value)
public TimeSpan get_TimeToLive()
public void set_TimeToLive(TimeSpan value)
public bool get_UseMsmqTracing()
public void set_UseMsmqTracing(bool value)
public bool get_UseSourceJournal()
public void set_UseSourceJournal(bool value)
public bool get_ReceiveContextEnabled()
public void set_ReceiveContextEnabled(bool value)
public TimeSpan get_ValidityDuration()
public void set_ValidityDuration(TimeSpan value)
protected void OnApplyConfiguration(Binding binding)
}
public System.ServiceModel.Configuration.MsmqElementBase : TransportElement {
private ConfigurationPropertyCollection _properties
public Uri CustomDeadLetterQueue
public DeadLetterQueue DeadLetterQueue
public bool Durable
public bool ExactlyOnce
public int MaxRetryCycles
public MsmqTransportSecurityElement MsmqTransportSecurity
protected ConfigurationPropertyCollection Properties
public ReceiveErrorHandling ReceiveErrorHandling
public int ReceiveRetryCount
public TimeSpan RetryCycleDelay
public TimeSpan TimeToLive
public bool UseMsmqTracing
public bool UseSourceJournal
public bool ReceiveContextEnabled
public TimeSpan ValidityDuration
public Uri get_CustomDeadLetterQueue()
public void set_CustomDeadLetterQueue(Uri value)
public DeadLetterQueue get_DeadLetterQueue()
public void set_DeadLetterQueue(DeadLetterQueue value)
public bool get_Durable()
public void set_Durable(bool value)
public bool get_ExactlyOnce()
public void set_ExactlyOnce(bool value)
public int get_MaxRetryCycles()
public void set_MaxRetryCycles(int value)
public MsmqTransportSecurityElement get_MsmqTransportSecurity()
protected ConfigurationPropertyCollection get_Properties()
public ReceiveErrorHandling get_ReceiveErrorHandling()
public void set_ReceiveErrorHandling(ReceiveErrorHandling value)
public int get_ReceiveRetryCount()
public void set_ReceiveRetryCount(int value)
public TimeSpan get_RetryCycleDelay()
public void set_RetryCycleDelay(TimeSpan value)
public TimeSpan get_TimeToLive()
public void set_TimeToLive(TimeSpan value)
public bool get_UseMsmqTracing()
public void set_UseMsmqTracing(bool value)
public bool get_UseSourceJournal()
public void set_UseSourceJournal(bool value)
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected internal void InitializeFrom(BindingElement bindingElement)
public bool get_ReceiveContextEnabled()
public void set_ReceiveContextEnabled(bool value)
public TimeSpan get_ValidityDuration()
public void set_ValidityDuration(TimeSpan value)
}
public System.ServiceModel.Configuration.MsmqIntegrationBindingCollectionElement : StandardBindingCollectionElement`2<MsmqIntegrationBinding, MsmqIntegrationBindingElement> {
private ConfigurationPropertyCollection properties
}
public System.ServiceModel.Configuration.MsmqIntegrationBindingElement : MsmqBindingElementBase {
private ConfigurationPropertyCollection properties
private ConfigurationProperty binding_element_type
private ConfigurationProperty security
private ConfigurationProperty serialization_format
protected Type BindingElementType
protected ConfigurationPropertyCollection Properties
public MsmqIntegrationSecurityElement Security
public MsmqMessageSerializationFormat SerializationFormat
protected Type get_BindingElementType()
protected ConfigurationPropertyCollection get_Properties()
public MsmqIntegrationSecurityElement get_Security()
public MsmqMessageSerializationFormat get_SerializationFormat()
public void set_SerializationFormat(MsmqMessageSerializationFormat value)
protected void OnApplyConfiguration(Binding binding)
public void .ctor(string name)
}
public System.ServiceModel.Configuration.MsmqIntegrationElement : MsmqElementBase {
private ConfigurationPropertyCollection _properties
public Type BindingElementType
protected ConfigurationPropertyCollection Properties
public MsmqMessageSerializationFormat SerializationFormat
public Type get_BindingElementType()
protected ConfigurationPropertyCollection get_Properties()
public MsmqMessageSerializationFormat get_SerializationFormat()
public void set_SerializationFormat(MsmqMessageSerializationFormat value)
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected TransportBindingElement CreateDefaultBindingElement()
protected internal void InitializeFrom(BindingElement bindingElement)
}
public System.ServiceModel.Configuration.MsmqIntegrationSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty mode
private ConfigurationProperty transport
public MsmqIntegrationSecurityMode Mode
protected ConfigurationPropertyCollection Properties
public MsmqTransportSecurityElement Transport
public MsmqIntegrationSecurityMode get_Mode()
public void set_Mode(MsmqIntegrationSecurityMode value)
protected ConfigurationPropertyCollection get_Properties()
public MsmqTransportSecurityElement get_Transport()
}
public System.ServiceModel.Configuration.MsmqTransportElement : MsmqElementBase {
private ConfigurationPropertyCollection _properties
public Type BindingElementType
public int MaxPoolSize
protected ConfigurationPropertyCollection Properties
public QueueTransferProtocol QueueTransferProtocol
public bool UseActiveDirectory
public Type get_BindingElementType()
public int get_MaxPoolSize()
public void set_MaxPoolSize(int value)
protected ConfigurationPropertyCollection get_Properties()
public QueueTransferProtocol get_QueueTransferProtocol()
public void set_QueueTransferProtocol(QueueTransferProtocol value)
public bool get_UseActiveDirectory()
public void set_UseActiveDirectory(bool value)
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected TransportBindingElement CreateDefaultBindingElement()
protected internal void InitializeFrom(BindingElement bindingElement)
}
public System.ServiceModel.Configuration.MsmqTransportSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty msmq_authentication_mode
private ConfigurationProperty msmq_encryption_algorithm
private ConfigurationProperty msmq_protection_level
private ConfigurationProperty msmq_secure_hash_algorithm
public MsmqAuthenticationMode MsmqAuthenticationMode
public MsmqEncryptionAlgorithm MsmqEncryptionAlgorithm
public ProtectionLevel MsmqProtectionLevel
public MsmqSecureHashAlgorithm MsmqSecureHashAlgorithm
protected ConfigurationPropertyCollection Properties
public MsmqAuthenticationMode get_MsmqAuthenticationMode()
public void set_MsmqAuthenticationMode(MsmqAuthenticationMode value)
public MsmqEncryptionAlgorithm get_MsmqEncryptionAlgorithm()
public void set_MsmqEncryptionAlgorithm(MsmqEncryptionAlgorithm value)
public ProtectionLevel get_MsmqProtectionLevel()
public void set_MsmqProtectionLevel(ProtectionLevel value)
public MsmqSecureHashAlgorithm get_MsmqSecureHashAlgorithm()
public void set_MsmqSecureHashAlgorithm(MsmqSecureHashAlgorithm value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.MtomMessageEncodingElement : BindingElementExtensionElement {
public Type BindingElementType
public int MaxBufferSize
public int MaxReadPoolSize
public int MaxWritePoolSize
public MessageVersion MessageVersion
protected ConfigurationPropertyCollection Properties
public XmlDictionaryReaderQuotasElement ReaderQuotas
public Encoding WriteEncoding
public Type get_BindingElementType()
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public int get_MaxReadPoolSize()
public void set_MaxReadPoolSize(int value)
public int get_MaxWritePoolSize()
public void set_MaxWritePoolSize(int value)
public MessageVersion get_MessageVersion()
public void set_MessageVersion(MessageVersion value)
protected ConfigurationPropertyCollection get_Properties()
public XmlDictionaryReaderQuotasElement get_ReaderQuotas()
public Encoding get_WriteEncoding()
public void set_WriteEncoding(Encoding value)
protected internal BindingElement CreateBindingElement()
}
internal System.ServiceModel.Configuration.NamedConfigCategory : Enum {
public int value__
public NamedConfigCategory None
public NamedConfigCategory Contract
}
internal System.ServiceModel.Configuration.NamedConfigType : object {
private NamedConfigCategory <Category>k__BackingField
private string <Name>k__BackingField
private Type <Type>k__BackingField
public NamedConfigCategory Category
public string Name
public Type Type
public NamedConfigCategory get_Category()
public void set_Category(NamedConfigCategory value)
public string get_Name()
public void set_Name(string value)
public Type get_Type()
public void set_Type(Type value)
}
public System.ServiceModel.Configuration.NamedPipeConnectionPoolSettingsElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty group_name
private ConfigurationProperty idle_timeout
private ConfigurationProperty max_outbound_connections_per_endpoint
public string GroupName
public TimeSpan IdleTimeout
public int MaxOutboundConnectionsPerEndpoint
protected ConfigurationPropertyCollection Properties
public string get_GroupName()
public void set_GroupName(string value)
public TimeSpan get_IdleTimeout()
public void set_IdleTimeout(TimeSpan value)
public int get_MaxOutboundConnectionsPerEndpoint()
public void set_MaxOutboundConnectionsPerEndpoint(int value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.NamedPipeSettingsElement : ServiceModelConfigurationElement {
public ApplicationContainerSettingsElement ApplicationContainerSettings
public ApplicationContainerSettingsElement get_ApplicationContainerSettings()
public void set_ApplicationContainerSettings(ApplicationContainerSettingsElement value)
}
public System.ServiceModel.Configuration.NamedPipeTransportElement : ConnectionOrientedTransportElement {
private ConfigurationPropertyCollection _properties
public Type BindingElementType
public NamedPipeConnectionPoolSettingsElement ConnectionPoolSettings
protected ConfigurationPropertyCollection Properties
public NamedPipeSettingsElement PipeSettings
public Type get_BindingElementType()
public NamedPipeConnectionPoolSettingsElement get_ConnectionPoolSettings()
public void set_ConnectionPoolSettings(NamedPipeConnectionPoolSettingsElement value)
protected ConfigurationPropertyCollection get_Properties()
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected TransportBindingElement CreateDefaultBindingElement()
protected internal void InitializeFrom(BindingElement bindingElement)
public NamedPipeSettingsElement get_PipeSettings()
public void set_PipeSettings(NamedPipeSettingsElement value)
}
public System.ServiceModel.Configuration.NamedPipeTransportSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty protection_level
protected ConfigurationPropertyCollection Properties
public ProtectionLevel ProtectionLevel
protected ConfigurationPropertyCollection get_Properties()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
}
public System.ServiceModel.Configuration.NamedServiceModelExtensionCollectionElement`1 : ServiceModelExtensionCollectionElement`1<TServiceModelExtensionElement> {
private int minNameLength
private ConfigurationPropertyCollection _properties
public string Name
protected ConfigurationPropertyCollection Properties
public string get_Name()
public void set_Name(string value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.NetHttpBindingElement : HttpBindingBaseElement {
protected Type BindingElementType
public NetHttpMessageEncoding MessageEncoding
public StandardBindingOptionalReliableSessionElement ReliableSession
public BasicHttpSecurityElement Security
public NetHttpWebSocketTransportSettingsElement WebSocketSettings
public void .ctor(string name)
protected Type get_BindingElementType()
public NetHttpMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(NetHttpMessageEncoding value)
public StandardBindingOptionalReliableSessionElement get_ReliableSession()
public BasicHttpSecurityElement get_Security()
public NetHttpWebSocketTransportSettingsElement get_WebSocketSettings()
public void set_WebSocketSettings(NetHttpWebSocketTransportSettingsElement value)
}
public System.ServiceModel.Configuration.NetHttpsBindingElement : HttpBindingBaseElement {
protected Type BindingElementType
public NetHttpMessageEncoding MessageEncoding
public StandardBindingOptionalReliableSessionElement ReliableSession
public BasicHttpsSecurityElement Security
public NetHttpWebSocketTransportSettingsElement WebSocketSettings
public void .ctor(string name)
protected Type get_BindingElementType()
public NetHttpMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(NetHttpMessageEncoding value)
public StandardBindingOptionalReliableSessionElement get_ReliableSession()
public BasicHttpsSecurityElement get_Security()
public NetHttpWebSocketTransportSettingsElement get_WebSocketSettings()
public void set_WebSocketSettings(NetHttpWebSocketTransportSettingsElement value)
}
public System.ServiceModel.Configuration.NetHttpWebSocketTransportSettingsElement : WebSocketTransportSettingsElement {
public string SubProtocol
public WebSocketTransportUsage TransportUsage
public string get_SubProtocol()
public void set_SubProtocol(string value)
public WebSocketTransportUsage get_TransportUsage()
public void set_TransportUsage(WebSocketTransportUsage value)
}
public System.ServiceModel.Configuration.NetMsmqBindingCollectionElement : StandardBindingCollectionElement`2<NetMsmqBinding, NetMsmqBindingElement> {
private ConfigurationPropertyCollection properties
}
public System.ServiceModel.Configuration.NetMsmqBindingElement : MsmqBindingElementBase {
private ConfigurationPropertyCollection properties
private ConfigurationProperty binding_element_type
private ConfigurationProperty max_buffer_pool_size
private ConfigurationProperty queue_transfer_protocol
private ConfigurationProperty reader_quotas
private ConfigurationProperty security
private ConfigurationProperty use_active_directory
protected Type BindingElementType
public long MaxBufferPoolSize
protected ConfigurationPropertyCollection Properties
public QueueTransferProtocol QueueTransferProtocol
public XmlDictionaryReaderQuotasElement ReaderQuotas
public NetMsmqSecurityElement Security
public bool UseActiveDirectory
protected Type get_BindingElementType()
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
protected ConfigurationPropertyCollection get_Properties()
public QueueTransferProtocol get_QueueTransferProtocol()
public void set_QueueTransferProtocol(QueueTransferProtocol value)
public XmlDictionaryReaderQuotasElement get_ReaderQuotas()
public NetMsmqSecurityElement get_Security()
public bool get_UseActiveDirectory()
public void set_UseActiveDirectory(bool value)
protected void OnApplyConfiguration(Binding binding)
public void .ctor(string name)
}
public System.ServiceModel.Configuration.NetMsmqSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty message
private ConfigurationProperty mode
private ConfigurationProperty transport
public MessageSecurityOverMsmqElement Message
public NetMsmqSecurityMode Mode
protected ConfigurationPropertyCollection Properties
public MsmqTransportSecurityElement Transport
public MessageSecurityOverMsmqElement get_Message()
public NetMsmqSecurityMode get_Mode()
public void set_Mode(NetMsmqSecurityMode value)
protected ConfigurationPropertyCollection get_Properties()
public MsmqTransportSecurityElement get_Transport()
}
public System.ServiceModel.Configuration.NetNamedPipeBindingCollectionElement : StandardBindingCollectionElement`2<NetNamedPipeBinding, NetNamedPipeBindingElement> {
private ConfigurationPropertyCollection properties
}
public System.ServiceModel.Configuration.NetNamedPipeBindingElement : StandardBindingElement {
private ConfigurationPropertyCollection _properties
protected Type BindingElementType
public HostNameComparisonMode HostNameComparisonMode
public long MaxBufferPoolSize
public int MaxBufferSize
public int MaxConnections
public long MaxReceivedMessageSize
protected ConfigurationPropertyCollection Properties
public XmlDictionaryReaderQuotasElement ReaderQuotas
public NetNamedPipeSecurityElement Security
public bool TransactionFlow
public TransactionProtocol TransactionProtocol
public TransferMode TransferMode
public void .ctor(string name)
protected Type get_BindingElementType()
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public int get_MaxConnections()
public void set_MaxConnections(int value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
protected ConfigurationPropertyCollection get_Properties()
public XmlDictionaryReaderQuotasElement get_ReaderQuotas()
public NetNamedPipeSecurityElement get_Security()
public bool get_TransactionFlow()
public void set_TransactionFlow(bool value)
public TransactionProtocol get_TransactionProtocol()
public void set_TransactionProtocol(TransactionProtocol value)
public TransferMode get_TransferMode()
public void set_TransferMode(TransferMode value)
protected void OnApplyConfiguration(Binding binding)
}
public System.ServiceModel.Configuration.NetNamedPipeSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty mode
private ConfigurationProperty transport
public NetNamedPipeSecurityMode Mode
protected ConfigurationPropertyCollection Properties
public NamedPipeTransportSecurityElement Transport
public NetNamedPipeSecurityMode get_Mode()
public void set_Mode(NetNamedPipeSecurityMode value)
protected ConfigurationPropertyCollection get_Properties()
public NamedPipeTransportSecurityElement get_Transport()
}
public System.ServiceModel.Configuration.NetPeerTcpBindingCollectionElement : StandardBindingCollectionElement`2<NetPeerTcpBinding, NetPeerTcpBindingElement> {
private ConfigurationPropertyCollection properties
}
public System.ServiceModel.Configuration.NetPeerTcpBindingElement : StandardBindingElement {
private ConfigurationPropertyCollection _properties
protected Type BindingElementType
public IPAddress ListenIPAddress
public long MaxBufferPoolSize
public long MaxReceivedMessageSize
public int Port
protected ConfigurationPropertyCollection Properties
public XmlDictionaryReaderQuotasElement ReaderQuotas
public PeerResolverElement Resolver
public PeerSecurityElement Security
public void .ctor(string name)
protected Type get_BindingElementType()
public IPAddress get_ListenIPAddress()
public void set_ListenIPAddress(IPAddress value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public int get_Port()
public void set_Port(int value)
protected ConfigurationPropertyCollection get_Properties()
public XmlDictionaryReaderQuotasElement get_ReaderQuotas()
public PeerResolverElement get_Resolver()
public PeerSecurityElement get_Security()
protected void OnApplyConfiguration(Binding binding)
private bool <OnApplyConfiguration>b__25_0(IBindingConfigurationElement b)
}
public System.ServiceModel.Configuration.NetTcpBindingCollectionElement : StandardBindingCollectionElement`2<NetTcpBinding, NetTcpBindingElement> {
private ConfigurationPropertyCollection properties
}
public System.ServiceModel.Configuration.NetTcpBindingElement : StandardBindingElement {
private ConfigurationPropertyCollection _properties
protected Type BindingElementType
public HostNameComparisonMode HostNameComparisonMode
public int ListenBacklog
public long MaxBufferPoolSize
public int MaxBufferSize
public int MaxConnections
public long MaxReceivedMessageSize
public bool PortSharingEnabled
protected ConfigurationPropertyCollection Properties
public XmlDictionaryReaderQuotasElement ReaderQuotas
public StandardBindingOptionalReliableSessionElement ReliableSession
public NetTcpSecurityElement Security
public bool TransactionFlow
public TransactionProtocol TransactionProtocol
public TransferMode TransferMode
public void .ctor(string name)
protected Type get_BindingElementType()
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public int get_ListenBacklog()
public void set_ListenBacklog(int value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public int get_MaxConnections()
public void set_MaxConnections(int value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public bool get_PortSharingEnabled()
public void set_PortSharingEnabled(bool value)
protected ConfigurationPropertyCollection get_Properties()
public XmlDictionaryReaderQuotasElement get_ReaderQuotas()
public StandardBindingOptionalReliableSessionElement get_ReliableSession()
public NetTcpSecurityElement get_Security()
public bool get_TransactionFlow()
public void set_TransactionFlow(bool value)
public TransactionProtocol get_TransactionProtocol()
public void set_TransactionProtocol(TransactionProtocol value)
public TransferMode get_TransferMode()
public void set_TransferMode(TransferMode value)
protected void OnApplyConfiguration(Binding binding)
}
public System.ServiceModel.Configuration.NetTcpContextBindingElement : NetTcpBindingElement {
public Uri ClientCallbackAddress
public bool ContextManagementEnabled
public ProtectionLevel ContextProtectionLevel
public void .ctor(string name)
public Uri get_ClientCallbackAddress()
public void set_ClientCallbackAddress(Uri value)
public bool get_ContextManagementEnabled()
public void set_ContextManagementEnabled(bool value)
public ProtectionLevel get_ContextProtectionLevel()
public void set_ContextProtectionLevel(ProtectionLevel value)
}
public System.ServiceModel.Configuration.NetTcpSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty message
private ConfigurationProperty mode
private ConfigurationProperty transport
public MessageSecurityOverTcpElement Message
public SecurityMode Mode
protected ConfigurationPropertyCollection Properties
public TcpTransportSecurityElement Transport
public MessageSecurityOverTcpElement get_Message()
public SecurityMode get_Mode()
public void set_Mode(SecurityMode value)
protected ConfigurationPropertyCollection get_Properties()
public TcpTransportSecurityElement get_Transport()
}
public System.ServiceModel.Configuration.NonDualMessageSecurityOverHttpElement : MessageSecurityOverHttpElement {
public bool EstablishSecurityContext
protected ConfigurationPropertyCollection Properties
public bool get_EstablishSecurityContext()
public void set_EstablishSecurityContext(bool value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.OneWayElement : BindingElementExtensionElement {
public Type BindingElementType
public ChannelPoolSettingsElement ChannelPoolSettings
public int MaxAcceptedChannels
public bool PacketRoutable
protected ConfigurationPropertyCollection Properties
public Type get_BindingElementType()
public ChannelPoolSettingsElement get_ChannelPoolSettings()
public int get_MaxAcceptedChannels()
public void set_MaxAcceptedChannels(int value)
public bool get_PacketRoutable()
public void set_PacketRoutable(bool value)
protected ConfigurationPropertyCollection get_Properties()
protected internal BindingElement CreateBindingElement()
}
public System.ServiceModel.Configuration.PeerCredentialElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty certificate
private ConfigurationProperty message_sender_authentication
private ConfigurationProperty peer_authentication
public X509PeerCertificateElement Certificate
public X509PeerCertificateAuthenticationElement MessageSenderAuthentication
public X509PeerCertificateAuthenticationElement PeerAuthentication
protected ConfigurationPropertyCollection Properties
public X509PeerCertificateElement get_Certificate()
public X509PeerCertificateAuthenticationElement get_MessageSenderAuthentication()
public X509PeerCertificateAuthenticationElement get_PeerAuthentication()
protected ConfigurationPropertyCollection get_Properties()
public void Copy(PeerCredentialElement from)
}
public System.ServiceModel.Configuration.PeerCustomResolverElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty address
private ConfigurationProperty binding
private ConfigurationProperty binding_configuration
private ConfigurationProperty headers
private ConfigurationProperty identity
private ConfigurationProperty resolver_type
public Uri Address
public string Binding
public string BindingConfiguration
public AddressHeaderCollectionElement Headers
public IdentityElement Identity
protected ConfigurationPropertyCollection Properties
public string ResolverType
public Uri get_Address()
public void set_Address(Uri value)
public string get_Binding()
public void set_Binding(string value)
public string get_BindingConfiguration()
public void set_BindingConfiguration(string value)
public AddressHeaderCollectionElement get_Headers()
public IdentityElement get_Identity()
protected ConfigurationPropertyCollection get_Properties()
public string get_ResolverType()
public void set_ResolverType(string value)
}
public System.ServiceModel.Configuration.PeerResolverElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty custom
private ConfigurationProperty mode
private ConfigurationProperty referral_policy
public PeerCustomResolverElement Custom
public PeerResolverMode Mode
protected ConfigurationPropertyCollection Properties
public PeerReferralPolicy ReferralPolicy
public PeerCustomResolverElement get_Custom()
public PeerResolverMode get_Mode()
public void set_Mode(PeerResolverMode value)
protected ConfigurationPropertyCollection get_Properties()
public PeerReferralPolicy get_ReferralPolicy()
public void set_ReferralPolicy(PeerReferralPolicy value)
}
public System.ServiceModel.Configuration.PeerSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty mode
private ConfigurationProperty transport
public SecurityMode Mode
protected ConfigurationPropertyCollection Properties
public PeerTransportSecurityElement Transport
public SecurityMode get_Mode()
public void set_Mode(SecurityMode value)
protected ConfigurationPropertyCollection get_Properties()
public PeerTransportSecurityElement get_Transport()
}
public System.ServiceModel.Configuration.PeerTransportElement : BindingElementExtensionElement {
private ConfigurationPropertyCollection _properties
public Type BindingElementType
public IPAddress ListenIPAddress
public long MaxBufferPoolSize
public long MaxReceivedMessageSize
public int Port
protected ConfigurationPropertyCollection Properties
public PeerSecurityElement Security
public Type get_BindingElementType()
public IPAddress get_ListenIPAddress()
public void set_ListenIPAddress(IPAddress value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public int get_Port()
public void set_Port(int value)
protected ConfigurationPropertyCollection get_Properties()
public PeerSecurityElement get_Security()
protected internal BindingElement CreateBindingElement()
}
public System.ServiceModel.Configuration.PeerTransportSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty credential_type
public PeerTransportCredentialType CredentialType
protected ConfigurationPropertyCollection Properties
public PeerTransportCredentialType get_CredentialType()
public void set_CredentialType(PeerTransportCredentialType value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.PnrpPeerResolverElement : BindingElementExtensionElement {
public Type BindingElementType
public Type get_BindingElementType()
protected internal BindingElement CreateBindingElement()
}
public System.ServiceModel.Configuration.PolicyImporterElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty type
protected ConfigurationPropertyCollection Properties
public string Type
public void .ctor(string type)
public void .ctor(Type type)
protected ConfigurationPropertyCollection get_Properties()
public string get_Type()
public void set_Type(string value)
}
public System.ServiceModel.Configuration.PolicyImporterElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<PolicyImporterElement> {
protected object GetElementKey(ConfigurationElement element)
}
internal System.ServiceModel.Configuration.PolicyVersionConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.ServiceModel.Configuration.PrivacyNoticeElement : BindingElementExtensionElement {
private ConfigurationPropertyCollection _properties
public Type BindingElementType
protected ConfigurationPropertyCollection Properties
public Uri Url
public int Version
public Type get_BindingElementType()
protected ConfigurationPropertyCollection get_Properties()
public Uri get_Url()
public void set_Url(Uri value)
public int get_Version()
public void set_Version(int value)
protected internal BindingElement CreateBindingElement()
}
public System.ServiceModel.Configuration.ProtocolMappingElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty binding
private ConfigurationProperty binding_configuration
private ConfigurationProperty scheme
public string Binding
public string BindingConfiguration
public string Scheme
protected ConfigurationPropertyCollection Properties
public void .ctor(string schemeType, string binding, string bindingConfiguration)
public string get_Binding()
public void set_Binding(string value)
public string get_BindingConfiguration()
public void set_BindingConfiguration(string value)
public string get_Scheme()
public void set_Scheme(string value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.ProtocolMappingElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<ProtocolMappingElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.ProtocolMappingSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty collection
public ProtocolMappingElementCollection ProtocolMappingCollection
protected ConfigurationPropertyCollection Properties
public ProtocolMappingElementCollection get_ProtocolMappingCollection()
protected ConfigurationPropertyCollection get_Properties()
protected void InitializeDefault()
}
internal System.ServiceModel.Configuration.ReliableMessagingVersionConverter : TypeConverter {
private Dictionary`2<string, ReliableMessagingVersion> _lookup
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
}
public System.ServiceModel.Configuration.ReliableSessionElement : BindingElementExtensionElement {
public TimeSpan AcknowledgementInterval
public Type BindingElementType
public bool FlowControlEnabled
public TimeSpan InactivityTimeout
public int MaxPendingChannels
public int MaxRetryCount
public int MaxTransferWindowSize
public bool Ordered
public ReliableMessagingVersion ReliableMessagingVersion
protected ConfigurationPropertyCollection Properties
public TimeSpan get_AcknowledgementInterval()
public void set_AcknowledgementInterval(TimeSpan value)
public Type get_BindingElementType()
public bool get_FlowControlEnabled()
public void set_FlowControlEnabled(bool value)
public TimeSpan get_InactivityTimeout()
public void set_InactivityTimeout(TimeSpan value)
public int get_MaxPendingChannels()
public void set_MaxPendingChannels(int value)
public int get_MaxRetryCount()
public void set_MaxRetryCount(int value)
public int get_MaxTransferWindowSize()
public void set_MaxTransferWindowSize(int value)
public bool get_Ordered()
public void set_Ordered(bool value)
public ReliableMessagingVersion get_ReliableMessagingVersion()
public void set_ReliableMessagingVersion(ReliableMessagingVersion value)
protected ConfigurationPropertyCollection get_Properties()
protected internal BindingElement CreateBindingElement()
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected internal void InitializeFrom(BindingElement bindingElement)
}
public System.ServiceModel.Configuration.RemoveBehaviorElement : BehaviorExtensionElement {
public Type BehaviorType
public string Name
public Type get_BehaviorType()
public string get_Name()
public void set_Name(string value)
}
public System.ServiceModel.Configuration.RsaElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty value
protected ConfigurationPropertyCollection Properties
public string Value
protected ConfigurationPropertyCollection get_Properties()
public string get_Value()
public void set_Value(string value)
}
public System.ServiceModel.Configuration.SecureConversationServiceElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty security_state_encoder_type
protected ConfigurationPropertyCollection Properties
public string SecurityStateEncoderType
protected ConfigurationPropertyCollection get_Properties()
public string get_SecurityStateEncoderType()
public void set_SecurityStateEncoderType(string value)
public void Copy(SecureConversationServiceElement from)
}
internal System.ServiceModel.Configuration.SecurityAlgorithmSuiteConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.ServiceModel.Configuration.SecurityElement : SecurityElementBase {
private ConfigurationPropertyCollection _properties
protected ConfigurationPropertyCollection Properties
public SecurityElementBase SecureConversationBootstrap
protected ConfigurationPropertyCollection get_Properties()
public SecurityElementBase get_SecureConversationBootstrap()
protected void AddBindingTemplates(Dictionary`2<AuthenticationMode, SecurityBindingElement> bindingTemplates)
protected void InitializeNestedTokenParameterSettings(SecurityTokenParameters sp, bool initializeNestedBindings)
}
public System.ServiceModel.Configuration.SecurityElementBase : BindingElementExtensionElement {
private ConfigurationPropertyCollection _properties
public bool AllowSerializedSigningTokenOnReply
public AuthenticationMode AuthenticationMode
public Type BindingElementType
public SecurityAlgorithmSuite DefaultAlgorithmSuite
public bool IncludeTimestamp
public IssuedTokenParametersElement IssuedTokenParameters
public SecurityKeyEntropyMode KeyEntropyMode
public LocalClientSecuritySettingsElement LocalClientSettings
public LocalServiceSecuritySettingsElement LocalServiceSettings
public MessageProtectionOrder MessageProtectionOrder
public MessageSecurityVersion MessageSecurityVersion
protected ConfigurationPropertyCollection Properties
public bool RequireDerivedKeys
public bool RequireSecurityContextCancellation
public bool RequireSignatureConfirmation
public SecurityHeaderLayout SecurityHeaderLayout
public bool AllowInsecureTransport
public bool CanRenewSecurityContextToken
public bool EnableUnsecuredResponse
public bool ProtectTokens
public bool get_AllowSerializedSigningTokenOnReply()
public void set_AllowSerializedSigningTokenOnReply(bool value)
public AuthenticationMode get_AuthenticationMode()
public void set_AuthenticationMode(AuthenticationMode value)
public Type get_BindingElementType()
public SecurityAlgorithmSuite get_DefaultAlgorithmSuite()
public void set_DefaultAlgorithmSuite(SecurityAlgorithmSuite value)
public bool get_IncludeTimestamp()
public void set_IncludeTimestamp(bool value)
public IssuedTokenParametersElement get_IssuedTokenParameters()
public SecurityKeyEntropyMode get_KeyEntropyMode()
public void set_KeyEntropyMode(SecurityKeyEntropyMode value)
public LocalClientSecuritySettingsElement get_LocalClientSettings()
public LocalServiceSecuritySettingsElement get_LocalServiceSettings()
public MessageProtectionOrder get_MessageProtectionOrder()
public void set_MessageProtectionOrder(MessageProtectionOrder value)
public MessageSecurityVersion get_MessageSecurityVersion()
public void set_MessageSecurityVersion(MessageSecurityVersion value)
protected ConfigurationPropertyCollection get_Properties()
public bool get_RequireDerivedKeys()
public void set_RequireDerivedKeys(bool value)
public bool get_RequireSecurityContextCancellation()
public void set_RequireSecurityContextCancellation(bool value)
public bool get_RequireSignatureConfirmation()
public void set_RequireSignatureConfirmation(bool value)
public SecurityHeaderLayout get_SecurityHeaderLayout()
public void set_SecurityHeaderLayout(SecurityHeaderLayout value)
protected internal BindingElement CreateBindingElement()
public bool get_AllowInsecureTransport()
public void set_AllowInsecureTransport(bool value)
public bool get_CanRenewSecurityContextToken()
public void set_CanRenewSecurityContextToken(bool value)
public bool get_EnableUnsecuredResponse()
public void set_EnableUnsecuredResponse(bool value)
public bool get_ProtectTokens()
public void set_ProtectTokens(bool value)
}
public System.ServiceModel.Configuration.ServiceActivationElement : ConfigurationElement {
public string Factory
public string RelativeAddress
public string Service
public void .ctor(string relativeAddress)
public void .ctor(string relativeAddress, string service)
public void .ctor(string relativeAddress, string service, string factory)
public string get_Factory()
public void set_Factory(string value)
public string get_RelativeAddress()
public void set_RelativeAddress(string value)
public string get_Service()
public void set_Service(string value)
}
public System.ServiceModel.Configuration.ServiceActivationElementCollection : ServiceModelConfigurationElementCollection`1<ServiceActivationElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.ServiceAuthenticationElement : BehaviorExtensionElement {
public AuthenticationSchemes AuthenticationSchemes
public Type BehaviorType
public string ServiceAuthenticationManagerType
public AuthenticationSchemes get_AuthenticationSchemes()
public void set_AuthenticationSchemes(AuthenticationSchemes value)
public Type get_BehaviorType()
public string get_ServiceAuthenticationManagerType()
public void set_ServiceAuthenticationManagerType(string value)
}
public System.ServiceModel.Configuration.ServiceAuthorizationElement : BehaviorExtensionElement {
public AuthorizationPolicyTypeElementCollection AuthorizationPolicies
public Type BehaviorType
public bool ImpersonateCallerForAllOperations
public PrincipalPermissionMode PrincipalPermissionMode
protected ConfigurationPropertyCollection Properties
public string RoleProviderName
public string ServiceAuthorizationManagerType
public bool ImpersonateOnSerializingReply
public AuthorizationPolicyTypeElementCollection get_AuthorizationPolicies()
public Type get_BehaviorType()
public bool get_ImpersonateCallerForAllOperations()
public void set_ImpersonateCallerForAllOperations(bool value)
public PrincipalPermissionMode get_PrincipalPermissionMode()
public void set_PrincipalPermissionMode(PrincipalPermissionMode value)
protected ConfigurationPropertyCollection get_Properties()
public string get_RoleProviderName()
public void set_RoleProviderName(string value)
public string get_ServiceAuthorizationManagerType()
public void set_ServiceAuthorizationManagerType(string value)
protected internal object CreateBehavior()
public void CopyFrom(ServiceModelExtensionElement from)
public bool get_ImpersonateOnSerializingReply()
public void set_ImpersonateOnSerializingReply(bool value)
}
public System.ServiceModel.Configuration.ServiceBehaviorElement : NamedServiceModelExtensionCollectionElement`1<BehaviorExtensionElement> {
public void .ctor(string name)
protected void DeserializeElement(XmlReader reader, bool serializeCollectionKey)
internal BehaviorExtensionElement DeserializeExtensionElement(string elementName, XmlReader reader)
public void Add(BehaviorExtensionElement element)
public bool CanAdd(BehaviorExtensionElement element)
}
public System.ServiceModel.Configuration.ServiceBehaviorElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<ServiceBehaviorElement> {
protected bool ThrowOnDuplicate
protected object GetElementKey(ConfigurationElement element)
protected bool get_ThrowOnDuplicate()
protected void DeserializeElement(XmlReader reader, bool serializeCollectionKey)
protected void BaseAdd(ConfigurationElement element)
}
public System.ServiceModel.Configuration.ServiceCredentialsElement : BehaviorExtensionElement {
public Type BehaviorType
public X509InitiatorCertificateServiceElement ClientCertificate
public IssuedTokenServiceElement IssuedTokenAuthentication
public PeerCredentialElement Peer
protected ConfigurationPropertyCollection Properties
public SecureConversationServiceElement SecureConversationAuthentication
public X509RecipientCertificateServiceElement ServiceCertificate
public string Type
public UserNameServiceElement UserNameAuthentication
public WindowsServiceElement WindowsAuthentication
public string IdentityConfiguration
public bool UseIdentityConfiguration
public Type get_BehaviorType()
public X509InitiatorCertificateServiceElement get_ClientCertificate()
public IssuedTokenServiceElement get_IssuedTokenAuthentication()
public PeerCredentialElement get_Peer()
protected ConfigurationPropertyCollection get_Properties()
public SecureConversationServiceElement get_SecureConversationAuthentication()
public X509RecipientCertificateServiceElement get_ServiceCertificate()
public string get_Type()
public void set_Type(string value)
public UserNameServiceElement get_UserNameAuthentication()
public WindowsServiceElement get_WindowsAuthentication()
protected internal object CreateBehavior()
protected internal void ApplyConfiguration(ServiceCredentials behavior)
private X509Certificate2 GetCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue)
private object CreateInstance(string typeName)
public string get_IdentityConfiguration()
public void set_IdentityConfiguration(string value)
public bool get_UseIdentityConfiguration()
public void set_UseIdentityConfiguration(bool value)
}
public System.ServiceModel.Configuration.ServiceDebugElement : BehaviorExtensionElement {
public Type BehaviorType
public string HttpHelpPageBinding
public string HttpHelpPageBindingConfiguration
public bool HttpHelpPageEnabled
public Uri HttpHelpPageUrl
public string HttpsHelpPageBinding
public string HttpsHelpPageBindingConfiguration
public bool HttpsHelpPageEnabled
public Uri HttpsHelpPageUrl
public bool IncludeExceptionDetailInFaults
protected ConfigurationPropertyCollection Properties
public Type get_BehaviorType()
public string get_HttpHelpPageBinding()
public void set_HttpHelpPageBinding(string value)
public string get_HttpHelpPageBindingConfiguration()
public void set_HttpHelpPageBindingConfiguration(string value)
public bool get_HttpHelpPageEnabled()
public void set_HttpHelpPageEnabled(bool value)
public Uri get_HttpHelpPageUrl()
public void set_HttpHelpPageUrl(Uri value)
public string get_HttpsHelpPageBinding()
public void set_HttpsHelpPageBinding(string value)
public string get_HttpsHelpPageBindingConfiguration()
public void set_HttpsHelpPageBindingConfiguration(string value)
public bool get_HttpsHelpPageEnabled()
public void set_HttpsHelpPageEnabled(bool value)
public Uri get_HttpsHelpPageUrl()
public void set_HttpsHelpPageUrl(Uri value)
public bool get_IncludeExceptionDetailInFaults()
public void set_IncludeExceptionDetailInFaults(bool value)
protected ConfigurationPropertyCollection get_Properties()
protected internal object CreateBehavior()
}
public System.ServiceModel.Configuration.ServiceElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty behavior_configuration
private ConfigurationProperty endpoints
private ConfigurationProperty host
private ConfigurationProperty name
public string BehaviorConfiguration
public ServiceEndpointElementCollection Endpoints
public HostElement Host
public string Name
protected ConfigurationPropertyCollection Properties
public string get_BehaviorConfiguration()
public void set_BehaviorConfiguration(string value)
public ServiceEndpointElementCollection get_Endpoints()
public HostElement get_Host()
public string get_Name()
public void set_Name(string value)
protected ConfigurationPropertyCollection get_Properties()
public void .ctor(string serviceName)
}
public System.ServiceModel.Configuration.ServiceElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<ServiceElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.ServiceEndpointElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty address
private ConfigurationProperty behavior_configuration
private ConfigurationProperty binding
private ConfigurationProperty binding_configuration
private ConfigurationProperty binding_name
private ConfigurationProperty binding_namespace
private ConfigurationProperty contract
private ConfigurationProperty headers
private ConfigurationProperty identity
private ConfigurationProperty listen_uri
private ConfigurationProperty listen_uri_mode
private ConfigurationProperty name
private ConfigurationProperty endpoint_configuration
private ConfigurationProperty is_system_endpoint
private ConfigurationProperty kind
public Uri Address
public string BehaviorConfiguration
public string Binding
public string BindingConfiguration
public string BindingName
public string BindingNamespace
public string Contract
public AddressHeaderCollectionElement Headers
public IdentityElement Identity
public string EndpointConfiguration
public bool IsSystemEndpoint
public string Kind
public Uri ListenUri
public ListenUriMode ListenUriMode
public string Name
protected ConfigurationPropertyCollection Properties
public Uri get_Address()
public void set_Address(Uri value)
public string get_BehaviorConfiguration()
public void set_BehaviorConfiguration(string value)
public string get_Binding()
public void set_Binding(string value)
public string get_BindingConfiguration()
public void set_BindingConfiguration(string value)
public string get_BindingName()
public void set_BindingName(string value)
public string get_BindingNamespace()
public void set_BindingNamespace(string value)
public string get_Contract()
public void set_Contract(string value)
public AddressHeaderCollectionElement get_Headers()
public IdentityElement get_Identity()
public string get_EndpointConfiguration()
public void set_EndpointConfiguration(string value)
public bool get_IsSystemEndpoint()
public void set_IsSystemEndpoint(bool value)
public string get_Kind()
public void set_Kind(string value)
public Uri get_ListenUri()
public void set_ListenUri(Uri value)
public ListenUriMode get_ListenUriMode()
public void set_ListenUriMode(ListenUriMode value)
public string get_Name()
public void set_Name(string value)
protected ConfigurationPropertyCollection get_Properties()
public void .ctor(Uri address, string contractType)
}
public System.ServiceModel.Configuration.ServiceEndpointElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<ServiceEndpointElement> {
protected object GetElementKey(ConfigurationElement element)
private string GetHashCode(object obj)
}
public System.ServiceModel.Configuration.ServiceHostingEnvironmentSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty asp_net_compatibility_enabled
private ConfigurationProperty min_free_memory_percentage_to_activate_service
private ConfigurationProperty transport_configuration_types
public bool AspNetCompatibilityEnabled
public int MinFreeMemoryPercentageToActivateService
protected ConfigurationPropertyCollection Properties
public TransportConfigurationTypeElementCollection TransportConfigurationTypes
public BaseAddressPrefixFilterElementCollection BaseAddressPrefixFilters
public bool CloseIdleServicesAtLowMemory
public bool MultipleSiteBindingsEnabled
public ServiceActivationElementCollection ServiceActivations
public bool get_AspNetCompatibilityEnabled()
public void set_AspNetCompatibilityEnabled(bool value)
public int get_MinFreeMemoryPercentageToActivateService()
public void set_MinFreeMemoryPercentageToActivateService(int value)
protected ConfigurationPropertyCollection get_Properties()
public TransportConfigurationTypeElementCollection get_TransportConfigurationTypes()
public BaseAddressPrefixFilterElementCollection get_BaseAddressPrefixFilters()
public bool get_CloseIdleServicesAtLowMemory()
public void set_CloseIdleServicesAtLowMemory(bool value)
public bool get_MultipleSiteBindingsEnabled()
public void set_MultipleSiteBindingsEnabled(bool value)
public ServiceActivationElementCollection get_ServiceActivations()
}
public System.ServiceModel.Configuration.ServiceMetadataEndpointElement : StandardEndpointElement {
private ConfigurationPropertyCollection properties
protected internal Type EndpointType
protected ConfigurationPropertyCollection Properties
protected internal Type get_EndpointType()
protected ConfigurationPropertyCollection get_Properties()
protected internal ServiceEndpoint CreateServiceEndpoint(ContractDescription contractDescription)
protected void OnApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement serviceEndpointElement)
protected void OnApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement)
protected void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement)
protected void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement)
}
public System.ServiceModel.Configuration.ServiceMetadataPublishingElement : BehaviorExtensionElement {
public Type BehaviorType
public Uri ExternalMetadataLocation
public string HttpGetBinding
public string HttpGetBindingConfiguration
public bool HttpGetEnabled
public Uri HttpGetUrl
public string HttpsGetBinding
public string HttpsGetBindingConfiguration
public bool HttpsGetEnabled
public Uri HttpsGetUrl
protected ConfigurationPropertyCollection Properties
public PolicyVersion PolicyVersion
public Type get_BehaviorType()
public Uri get_ExternalMetadataLocation()
public void set_ExternalMetadataLocation(Uri value)
public string get_HttpGetBinding()
public void set_HttpGetBinding(string value)
public string get_HttpGetBindingConfiguration()
public void set_HttpGetBindingConfiguration(string value)
public bool get_HttpGetEnabled()
public void set_HttpGetEnabled(bool value)
public Uri get_HttpGetUrl()
public void set_HttpGetUrl(Uri value)
public string get_HttpsGetBinding()
public void set_HttpsGetBinding(string value)
public string get_HttpsGetBindingConfiguration()
public void set_HttpsGetBindingConfiguration(string value)
public bool get_HttpsGetEnabled()
public void set_HttpsGetEnabled(bool value)
public Uri get_HttpsGetUrl()
public void set_HttpsGetUrl(Uri value)
protected ConfigurationPropertyCollection get_Properties()
protected internal object CreateBehavior()
public PolicyVersion get_PolicyVersion()
public void set_PolicyVersion(PolicyVersion value)
}
public System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1 : ConfigurationElementCollection {
public ConfigurationElementType Item
public ConfigurationElementType Item
public ConfigurationElementCollectionType CollectionType
protected string ElementName
public ConfigurationElementType get_Item(int index)
public void set_Item(int index, ConfigurationElementType value)
public ConfigurationElementType get_Item(object key)
public void set_Item(object key, ConfigurationElementType value)
public ConfigurationElementCollectionType get_CollectionType()
protected string get_ElementName()
public void Add(ConfigurationElementType element)
protected void BaseAdd(ConfigurationElement element)
public void Clear()
public bool ContainsKey(object key)
protected ConfigurationElement CreateNewElement()
public void CopyTo(ConfigurationElementType[] array, int start)
public int IndexOf(ConfigurationElementType element)
public void Remove(ConfigurationElementType element)
public void RemoveAt(int index)
public void RemoveAt(object key)
}
public System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection`1 : ServiceModelConfigurationElementCollection`1<TConfigurationElement> {
protected bool ThrowOnDuplicate
protected bool get_ThrowOnDuplicate()
protected void BaseAdd(ConfigurationElement element)
}
public System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1 : ConfigurationElement {
private ConfigurationPropertyCollection properties
private KeyedByTypeCollection`1<TServiceModelExtensionElement> _list
private bool is_modified
private bool System.Collections.Generic.ICollection<TServiceModelExtensionElement>.IsReadOnly
public TServiceModelExtensionElement Item
public TServiceModelExtensionElement Item
public int Count
protected ConfigurationPropertyCollection Properties
public void Add(TServiceModelExtensionElement element)
public bool CanAdd(TServiceModelExtensionElement element)
public void Clear()
public bool Contains(TServiceModelExtensionElement element)
public bool ContainsKey(string elementName)
public bool ContainsKey(Type elementType)
public void CopyTo(TServiceModelExtensionElement[] elements, int start)
public IEnumerator`1<TServiceModelExtensionElement> GetEnumerator()
public bool Remove(TServiceModelExtensionElement element)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private bool System.Collections.Generic.ICollection<TServiceModelExtensionElement>.get_IsReadOnly()
public TServiceModelExtensionElement get_Item(int index)
public TServiceModelExtensionElement get_Item(Type extensionType)
protected void DeserializeElement(XmlReader reader, bool serializeCollectionKey)
protected bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader)
internal TServiceModelExtensionElement DeserializeExtensionElement(string elementName, XmlReader reader)
public int get_Count()
protected void Reset(ConfigurationElement parentElement)
protected bool IsModified()
protected void ResetModified()
protected void SetIsModified()
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.ServiceModelExtensionElement : ConfigurationElement {
private string _configurationElementName
public string ConfigurationElementName
public string get_ConfigurationElementName()
internal string GetConfigurationElementName()
public void CopyFrom(ServiceModelExtensionElement from)
protected bool IsModified()
protected void Reset(ConfigurationElement parentElement)
protected bool SerializeElement(XmlWriter writer, bool serializeCollectionKey)
internal void DeserializeElementInternal(XmlReader reader, bool serializeCollectionKey)
}
public System.ServiceModel.Configuration.ServiceModelSectionGroup : ConfigurationSectionGroup {
public BehaviorsSection Behaviors
public BindingsSection Bindings
public ClientSection Client
public CommonBehaviorsSection CommonBehaviors
public DiagnosticSection Diagnostic
public ExtensionsSection Extensions
public ServiceHostingEnvironmentSection ServiceHostingEnvironment
public ServicesSection Services
public ProtocolMappingSection ProtocolMapping
public StandardEndpointsSection StandardEndpoints
public ComContractsSection ComContracts
public ServiceModelSectionGroup GetSectionGroup(Configuration config)
public BehaviorsSection get_Behaviors()
public BindingsSection get_Bindings()
public ClientSection get_Client()
public CommonBehaviorsSection get_CommonBehaviors()
public DiagnosticSection get_Diagnostic()
public ExtensionsSection get_Extensions()
public ServiceHostingEnvironmentSection get_ServiceHostingEnvironment()
public ServicesSection get_Services()
public ProtocolMappingSection get_ProtocolMapping()
public StandardEndpointsSection get_StandardEndpoints()
public ComContractsSection get_ComContracts()
}
public System.ServiceModel.Configuration.ServicePrincipalNameElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty value
protected ConfigurationPropertyCollection Properties
public string Value
protected ConfigurationPropertyCollection get_Properties()
public string get_Value()
public void set_Value(string value)
}
public System.ServiceModel.Configuration.ServiceSecurityAuditElement : BehaviorExtensionElement {
public AuditLogLocation AuditLogLocation
public Type BehaviorType
public AuditLevel MessageAuthenticationAuditLevel
protected ConfigurationPropertyCollection Properties
public AuditLevel ServiceAuthorizationAuditLevel
public bool SuppressAuditFailure
public AuditLogLocation get_AuditLogLocation()
public void set_AuditLogLocation(AuditLogLocation value)
public Type get_BehaviorType()
public AuditLevel get_MessageAuthenticationAuditLevel()
public void set_MessageAuthenticationAuditLevel(AuditLevel value)
protected ConfigurationPropertyCollection get_Properties()
public AuditLevel get_ServiceAuthorizationAuditLevel()
public void set_ServiceAuthorizationAuditLevel(AuditLevel value)
public bool get_SuppressAuditFailure()
public void set_SuppressAuditFailure(bool value)
protected internal object CreateBehavior()
}
public System.ServiceModel.Configuration.ServicesSection : ConfigurationSection {
protected ConfigurationPropertyCollection Properties
public ServiceElementCollection Services
protected ConfigurationPropertyCollection get_Properties()
public ServiceElementCollection get_Services()
}
public System.ServiceModel.Configuration.ServiceThrottlingElement : BehaviorExtensionElement {
public Type BehaviorType
public int MaxConcurrentCalls
public int MaxConcurrentInstances
public int MaxConcurrentSessions
protected ConfigurationPropertyCollection Properties
public Type get_BehaviorType()
public int get_MaxConcurrentCalls()
public void set_MaxConcurrentCalls(int value)
public int get_MaxConcurrentInstances()
public void set_MaxConcurrentInstances(int value)
public int get_MaxConcurrentSessions()
public void set_MaxConcurrentSessions(int value)
protected ConfigurationPropertyCollection get_Properties()
protected internal object CreateBehavior()
}
public System.ServiceModel.Configuration.ServiceTimeoutsElement : BehaviorExtensionElement {
public Type BehaviorType
protected ConfigurationPropertyCollection Properties
public TimeSpan TransactionTimeout
public Type get_BehaviorType()
protected ConfigurationPropertyCollection get_Properties()
public TimeSpan get_TransactionTimeout()
public void set_TransactionTimeout(TimeSpan value)
protected internal object CreateBehavior()
}
public System.ServiceModel.Configuration.SslStreamSecurityElement : BindingElementExtensionElement {
public Type BindingElementType
protected ConfigurationPropertyCollection Properties
public bool RequireClientCertificate
public SslProtocols SslProtocols
public Type get_BindingElementType()
protected ConfigurationPropertyCollection get_Properties()
public bool get_RequireClientCertificate()
public void set_RequireClientCertificate(bool value)
protected internal BindingElement CreateBindingElement()
public SslProtocols get_SslProtocols()
}
public System.ServiceModel.Configuration.StandardBindingCollectionElement`2 : BindingCollectionElement {
private ConfigurationPropertyCollection _properties
public StandardBindingElementCollection`1<TBindingConfiguration> Bindings
public ReadOnlyCollection`1<IBindingConfigurationElement> ConfiguredBindings
protected ConfigurationPropertyCollection Properties
public Type BindingType
public StandardBindingElementCollection`1<TBindingConfiguration> get_Bindings()
public ReadOnlyCollection`1<IBindingConfigurationElement> get_ConfiguredBindings()
protected ConfigurationPropertyCollection get_Properties()
public Type get_BindingType()
public bool ContainsKey(string name)
protected internal Binding GetDefault()
protected internal bool TryAdd(string name, Binding binding, Configuration config)
}
public System.ServiceModel.Configuration.StandardBindingElement : ConfigurationElement {
private ConfigurationPropertyCollection _properties
protected Type BindingElementType
public TimeSpan CloseTimeout
public string Name
public TimeSpan OpenTimeout
protected ConfigurationPropertyCollection Properties
public TimeSpan ReceiveTimeout
public TimeSpan SendTimeout
protected void .ctor(string name)
protected Type get_BindingElementType()
public TimeSpan get_CloseTimeout()
public void set_CloseTimeout(TimeSpan value)
public string get_Name()
public void set_Name(string value)
public TimeSpan get_OpenTimeout()
public void set_OpenTimeout(TimeSpan value)
protected ConfigurationPropertyCollection get_Properties()
public TimeSpan get_ReceiveTimeout()
public void set_ReceiveTimeout(TimeSpan value)
public TimeSpan get_SendTimeout()
public void set_SendTimeout(TimeSpan value)
protected void OnApplyConfiguration(Binding binding)
public void ApplyConfiguration(Binding binding)
protected internal void InitializeFrom(Binding binding)
}
public System.ServiceModel.Configuration.StandardBindingElementCollection`1 : ServiceModelEnhancedConfigurationElementCollection`1<TBindingConfiguration> {
private ConfigurationPropertyCollection properties
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement : StandardBindingReliableSessionElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty enabled
public bool Enabled
protected ConfigurationPropertyCollection Properties
public bool get_Enabled()
public void set_Enabled(bool value)
protected ConfigurationPropertyCollection get_Properties()
public void ApplyConfiguration(OptionalReliableSession optionalReliableSession)
public void InitializeFrom(OptionalReliableSession optionalReliableSession)
}
public System.ServiceModel.Configuration.StandardBindingReliableSessionElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty inactivity_timeout
private ConfigurationProperty ordered
public TimeSpan InactivityTimeout
public bool Ordered
protected ConfigurationPropertyCollection Properties
internal ConfigurationPropertyCollection CreateBaseProperties()
public TimeSpan get_InactivityTimeout()
public void set_InactivityTimeout(TimeSpan value)
public bool get_Ordered()
public void set_Ordered(bool value)
protected ConfigurationPropertyCollection get_Properties()
public void ApplyConfiguration(ReliableSession reliableSession)
public void InitializeFrom(ReliableSession reliableSession)
}
public System.ServiceModel.Configuration.StandardEndpointCollectionElement`2 : EndpointCollectionElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty endpoints
public ReadOnlyCollection`1<StandardEndpointElement> ConfiguredEndpoints
public StandardEndpointElementCollection`1<TEndpointConfiguration> Endpoints
public Type EndpointType
protected ConfigurationPropertyCollection Properties
private void FillProperties(ConfigurationPropertyCollection baseProps)
public ReadOnlyCollection`1<StandardEndpointElement> get_ConfiguredEndpoints()
public StandardEndpointElementCollection`1<TEndpointConfiguration> get_Endpoints()
public Type get_EndpointType()
protected ConfigurationPropertyCollection get_Properties()
public bool ContainsKey(string name)
protected internal StandardEndpointElement GetDefaultStandardEndpointElement()
protected internal bool TryAdd(string name, ServiceEndpoint endpoint, Configuration config)
}
public System.ServiceModel.Configuration.StandardEndpointElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty name
public string Name
protected internal Type EndpointType
protected ConfigurationPropertyCollection Properties
public string get_Name()
public void set_Name(string value)
protected internal Type get_EndpointType()
protected ConfigurationPropertyCollection get_Properties()
public void ApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement channelEndpointElement)
public void ApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement)
protected internal ServiceEndpoint CreateServiceEndpoint(ContractDescription contractDescription)
public void InitializeAndValidate(ChannelEndpointElement channelEndpointElement)
public void InitializeAndValidate(ServiceEndpointElement serviceEndpointElement)
protected internal void InitializeFrom(ServiceEndpoint endpoint)
protected void OnApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement channelEndpointElement)
protected void OnApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement)
protected void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement)
protected void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement)
protected void Reset(ConfigurationElement parentElement)
}
public System.ServiceModel.Configuration.StandardEndpointElementCollection`1 : ServiceModelEnhancedConfigurationElementCollection`1<TEndpointConfiguration> {
protected bool ThrowOnDuplicate
protected bool get_ThrowOnDuplicate()
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.StandardEndpointsSection : ConfigurationSection {
private ConfigurationPropertyCollection _properties
private List`1<EndpointCollectionElement> endpoint_collections
public List`1<EndpointCollectionElement> EndpointCollections
public ServiceMetadataEndpointCollectionElement MexEndpoint
protected ConfigurationPropertyCollection Properties
internal ConfigurationPropertyCollection PropertiesInternal
public EndpointCollectionElement Item
public List`1<EndpointCollectionElement> get_EndpointCollections()
public ServiceMetadataEndpointCollectionElement get_MexEndpoint()
protected ConfigurationPropertyCollection get_Properties()
internal ConfigurationPropertyCollection get_PropertiesInternal()
public StandardEndpointsSection GetSection(Configuration config)
public EndpointCollectionElement get_Item(string endpoint)
}
public System.ServiceModel.Configuration.SynchronousReceiveElement : BehaviorExtensionElement {
public Type BehaviorType
public Type get_BehaviorType()
protected internal object CreateBehavior()
}
public System.ServiceModel.Configuration.TcpConnectionPoolSettingsElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty group_name
private ConfigurationProperty idle_timeout
private ConfigurationProperty lease_timeout
private ConfigurationProperty max_outbound_connections_per_endpoint
public string GroupName
public TimeSpan IdleTimeout
public TimeSpan LeaseTimeout
public int MaxOutboundConnectionsPerEndpoint
protected ConfigurationPropertyCollection Properties
public string get_GroupName()
public void set_GroupName(string value)
public TimeSpan get_IdleTimeout()
public void set_IdleTimeout(TimeSpan value)
public TimeSpan get_LeaseTimeout()
public void set_LeaseTimeout(TimeSpan value)
public int get_MaxOutboundConnectionsPerEndpoint()
public void set_MaxOutboundConnectionsPerEndpoint(int value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.TcpTransportElement : ConnectionOrientedTransportElement {
private ConfigurationPropertyCollection _properties
public Type BindingElementType
public TcpConnectionPoolSettingsElement ConnectionPoolSettings
public int ListenBacklog
public bool PortSharingEnabled
protected ConfigurationPropertyCollection Properties
public bool TeredoEnabled
public ExtendedProtectionPolicyElement ExtendedProtectionPolicy
public Type get_BindingElementType()
public TcpConnectionPoolSettingsElement get_ConnectionPoolSettings()
public void set_ConnectionPoolSettings(TcpConnectionPoolSettingsElement value)
public int get_ListenBacklog()
public void set_ListenBacklog(int value)
public bool get_PortSharingEnabled()
public void set_PortSharingEnabled(bool value)
protected ConfigurationPropertyCollection get_Properties()
public bool get_TeredoEnabled()
public void set_TeredoEnabled(bool value)
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected TransportBindingElement CreateDefaultBindingElement()
protected internal void InitializeFrom(BindingElement bindingElement)
public ExtendedProtectionPolicyElement get_ExtendedProtectionPolicy()
}
public System.ServiceModel.Configuration.TcpTransportSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty client_credential_type
private ConfigurationProperty protection_level
public TcpClientCredentialType ClientCredentialType
protected ConfigurationPropertyCollection Properties
public ProtectionLevel ProtectionLevel
public ExtendedProtectionPolicyElement ExtendedProtectionPolicy
public SslProtocols SslProtocols
public TcpClientCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(TcpClientCredentialType value)
protected ConfigurationPropertyCollection get_Properties()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public ExtendedProtectionPolicyElement get_ExtendedProtectionPolicy()
public SslProtocols get_SslProtocols()
}
public System.ServiceModel.Configuration.TextMessageEncodingElement : BindingElementExtensionElement {
public Type BindingElementType
public int MaxReadPoolSize
public int MaxWritePoolSize
public MessageVersion MessageVersion
protected ConfigurationPropertyCollection Properties
public XmlDictionaryReaderQuotasElement ReaderQuotas
public Encoding WriteEncoding
public Type get_BindingElementType()
public int get_MaxReadPoolSize()
public void set_MaxReadPoolSize(int value)
public int get_MaxWritePoolSize()
public void set_MaxWritePoolSize(int value)
public MessageVersion get_MessageVersion()
public void set_MessageVersion(MessageVersion value)
protected ConfigurationPropertyCollection get_Properties()
public XmlDictionaryReaderQuotasElement get_ReaderQuotas()
public Encoding get_WriteEncoding()
public void set_WriteEncoding(Encoding value)
protected internal BindingElement CreateBindingElement()
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected internal void InitializeFrom(BindingElement bindingElement)
}
public System.ServiceModel.Configuration.TransactedBatchingElement : BehaviorExtensionElement {
public Type BehaviorType
public int MaxBatchSize
protected ConfigurationPropertyCollection Properties
public Type get_BehaviorType()
public int get_MaxBatchSize()
public void set_MaxBatchSize(int value)
protected ConfigurationPropertyCollection get_Properties()
protected internal object CreateBehavior()
}
public System.ServiceModel.Configuration.TransactionFlowElement : BindingElementExtensionElement {
private ConfigurationPropertyCollection _properties
public Type BindingElementType
protected ConfigurationPropertyCollection Properties
public TransactionProtocol TransactionProtocol
public bool AllowWildcardAction
public Type get_BindingElementType()
protected ConfigurationPropertyCollection get_Properties()
public TransactionProtocol get_TransactionProtocol()
public void set_TransactionProtocol(TransactionProtocol value)
protected internal BindingElement CreateBindingElement()
public bool get_AllowWildcardAction()
public void set_AllowWildcardAction(bool value)
}
internal System.ServiceModel.Configuration.TransactionProtocolConverter : TypeConverter {
private TransactionProtocolConverter _instance
public TransactionProtocolConverter Instance
public TransactionProtocolConverter get_Instance()
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
}
public System.ServiceModel.Configuration.TransportConfigurationTypeElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty name
private ConfigurationProperty transport_configuration_type
public string Name
protected ConfigurationPropertyCollection Properties
public string TransportConfigurationType
public string get_Name()
public void set_Name(string value)
protected ConfigurationPropertyCollection get_Properties()
public string get_TransportConfigurationType()
public void set_TransportConfigurationType(string value)
public void .ctor(string name)
public void .ctor(string name, string transportConfigurationTypeName)
}
public System.ServiceModel.Configuration.TransportConfigurationTypeElementCollection : ServiceModelConfigurationElementCollection`1<TransportConfigurationTypeElement> {
private ConfigurationPropertyCollection properties
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.TransportElement : BindingElementExtensionElement {
private ConfigurationPropertyCollection _properties
public bool ManualAddressing
public long MaxBufferPoolSize
public long MaxReceivedMessageSize
protected ConfigurationPropertyCollection Properties
public bool get_ManualAddressing()
public void set_ManualAddressing(bool value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
protected ConfigurationPropertyCollection get_Properties()
public void ApplyConfiguration(BindingElement bindingElement)
public void CopyFrom(ServiceModelExtensionElement from)
protected internal BindingElement CreateBindingElement()
protected TransportBindingElement CreateDefaultBindingElement()
protected internal void InitializeFrom(BindingElement bindingElement)
}
public System.ServiceModel.Configuration.UseManagedPresentationElement : BindingElementExtensionElement {
public Type BindingElementType
public Type get_BindingElementType()
protected internal BindingElement CreateBindingElement()
}
public System.ServiceModel.Configuration.UseRequestHeadersForMetadataAddressElement : BehaviorExtensionElement {
public Type BehaviorType
public DefaultPortElementCollection DefaultPorts
public Type get_BehaviorType()
public DefaultPortElementCollection get_DefaultPorts()
}
public System.ServiceModel.Configuration.UserNameServiceElement : ConfigurationElement {
public TimeSpan CachedLogonTokenLifetime
public bool CacheLogonTokens
public string CustomUserNamePasswordValidatorType
public bool IncludeWindowsGroups
public int MaxCachedLogonTokens
public string MembershipProviderName
protected ConfigurationPropertyCollection Properties
public UserNamePasswordValidationMode UserNamePasswordValidationMode
public TimeSpan get_CachedLogonTokenLifetime()
public void set_CachedLogonTokenLifetime(TimeSpan value)
public bool get_CacheLogonTokens()
public void set_CacheLogonTokens(bool value)
public string get_CustomUserNamePasswordValidatorType()
public void set_CustomUserNamePasswordValidatorType(string value)
public bool get_IncludeWindowsGroups()
public void set_IncludeWindowsGroups(bool value)
public int get_MaxCachedLogonTokens()
public void set_MaxCachedLogonTokens(int value)
public string get_MembershipProviderName()
public void set_MembershipProviderName(string value)
protected ConfigurationPropertyCollection get_Properties()
public UserNamePasswordValidationMode get_UserNamePasswordValidationMode()
public void set_UserNamePasswordValidationMode(UserNamePasswordValidationMode value)
public void Copy(UserNameServiceElement from)
}
public System.ServiceModel.Configuration.UserPrincipalNameElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty value
protected ConfigurationPropertyCollection Properties
public string Value
protected ConfigurationPropertyCollection get_Properties()
public string get_Value()
public void set_Value(string value)
}
public System.ServiceModel.Configuration.WebSocketTransportSettingsElement : ServiceModelConfigurationElement {
public bool CreateNotificationOnConnection
public bool DisablePayloadMasking
public TimeSpan KeepAliveInterval
public int MaxPendingConnections
public string SubProtocol
public WebSocketTransportUsage TransportUsage
public bool get_CreateNotificationOnConnection()
public void set_CreateNotificationOnConnection(bool value)
public bool get_DisablePayloadMasking()
public void set_DisablePayloadMasking(bool value)
public TimeSpan get_KeepAliveInterval()
public void set_KeepAliveInterval(TimeSpan value)
public int get_MaxPendingConnections()
public void set_MaxPendingConnections(int value)
public string get_SubProtocol()
public void set_SubProtocol(string value)
public WebSocketTransportUsage get_TransportUsage()
public void set_TransportUsage(WebSocketTransportUsage value)
public void ApplyConfiguration(WebSocketTransportSettings settings)
public void InitializeFrom(WebSocketTransportSettings settings)
}
public System.ServiceModel.Configuration.WindowsClientElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty allowed_impersonation_level
private ConfigurationProperty allow_ntlm
public TokenImpersonationLevel AllowedImpersonationLevel
public bool AllowNtlm
protected ConfigurationPropertyCollection Properties
public TokenImpersonationLevel get_AllowedImpersonationLevel()
public void set_AllowedImpersonationLevel(TokenImpersonationLevel value)
public bool get_AllowNtlm()
public void set_AllowNtlm(bool value)
protected ConfigurationPropertyCollection get_Properties()
public void Copy(WindowsClientElement from)
}
public System.ServiceModel.Configuration.WindowsServiceElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty allow_anonymous_logons
private ConfigurationProperty include_windows_groups
public bool AllowAnonymousLogons
public bool IncludeWindowsGroups
protected ConfigurationPropertyCollection Properties
public bool get_AllowAnonymousLogons()
public void set_AllowAnonymousLogons(bool value)
public bool get_IncludeWindowsGroups()
public void set_IncludeWindowsGroups(bool value)
protected ConfigurationPropertyCollection get_Properties()
public void Copy(WindowsServiceElement from)
}
public System.ServiceModel.Configuration.WindowsStreamSecurityElement : BindingElementExtensionElement {
public Type BindingElementType
protected ConfigurationPropertyCollection Properties
public ProtectionLevel ProtectionLevel
public Type get_BindingElementType()
protected ConfigurationPropertyCollection get_Properties()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
protected internal BindingElement CreateBindingElement()
}
public System.ServiceModel.Configuration.WS2007FederationHttpBindingElement : WSFederationHttpBindingElement {
public void .ctor(string name)
}
public System.ServiceModel.Configuration.WS2007HttpBindingElement : WSHttpBindingElement {
public void .ctor(string name)
}
public System.ServiceModel.Configuration.WsdlImporterElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty type
protected ConfigurationPropertyCollection Properties
public string Type
public void .ctor(string type)
public void .ctor(Type type)
protected ConfigurationPropertyCollection get_Properties()
public string get_Type()
public void set_Type(string value)
}
public System.ServiceModel.Configuration.WsdlImporterElementCollection : ServiceModelEnhancedConfigurationElementCollection`1<WsdlImporterElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.WSDualHttpBindingCollectionElement : StandardBindingCollectionElement`2<WSDualHttpBinding, WSDualHttpBindingElement> {
private ConfigurationPropertyCollection properties
}
public System.ServiceModel.Configuration.WSDualHttpBindingElement : StandardBindingElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty bypass_proxy_on_local
private ConfigurationProperty client_base_address
private ConfigurationProperty host_name_comparison_mode
private ConfigurationProperty max_buffer_pool_size
private ConfigurationProperty max_received_message_size
private ConfigurationProperty message_encoding
private ConfigurationProperty proxy_address
private ConfigurationProperty reader_quotas
private ConfigurationProperty reliable_session
private ConfigurationProperty security
private ConfigurationProperty text_encoding
private ConfigurationProperty transaction_flow
private ConfigurationProperty use_default_web_proxy
protected Type BindingElementType
public bool BypassProxyOnLocal
public Uri ClientBaseAddress
public HostNameComparisonMode HostNameComparisonMode
public long MaxBufferPoolSize
public long MaxReceivedMessageSize
public WSMessageEncoding MessageEncoding
protected ConfigurationPropertyCollection Properties
public Uri ProxyAddress
public XmlDictionaryReaderQuotasElement ReaderQuotas
public StandardBindingReliableSessionElement ReliableSession
public WSDualHttpSecurityElement Security
public Encoding TextEncoding
public bool TransactionFlow
public bool UseDefaultWebProxy
private void FillProperties(ConfigurationPropertyCollection baseProps)
protected Type get_BindingElementType()
public bool get_BypassProxyOnLocal()
public void set_BypassProxyOnLocal(bool value)
public Uri get_ClientBaseAddress()
public void set_ClientBaseAddress(Uri value)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public WSMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(WSMessageEncoding value)
protected ConfigurationPropertyCollection get_Properties()
public Uri get_ProxyAddress()
public void set_ProxyAddress(Uri value)
public XmlDictionaryReaderQuotasElement get_ReaderQuotas()
public StandardBindingReliableSessionElement get_ReliableSession()
public WSDualHttpSecurityElement get_Security()
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public bool get_TransactionFlow()
public void set_TransactionFlow(bool value)
public bool get_UseDefaultWebProxy()
public void set_UseDefaultWebProxy(bool value)
protected void OnApplyConfiguration(Binding binding)
public void .ctor(string name)
}
public System.ServiceModel.Configuration.WSDualHttpSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty message
private ConfigurationProperty mode
public MessageSecurityOverHttpElement Message
public WSDualHttpSecurityMode Mode
protected ConfigurationPropertyCollection Properties
public MessageSecurityOverHttpElement get_Message()
public WSDualHttpSecurityMode get_Mode()
public void set_Mode(WSDualHttpSecurityMode value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.WSFederationHttpBindingElement : WSHttpBindingBaseElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty privacy_notice_at
private ConfigurationProperty privacy_notice_version
private ConfigurationProperty security
protected Type BindingElementType
public Uri PrivacyNoticeAt
public int PrivacyNoticeVersion
protected ConfigurationPropertyCollection Properties
public WSFederationHttpSecurityElement Security
private void FillProperties(ConfigurationPropertyCollection baseProps)
protected Type get_BindingElementType()
public Uri get_PrivacyNoticeAt()
public void set_PrivacyNoticeAt(Uri value)
public int get_PrivacyNoticeVersion()
public void set_PrivacyNoticeVersion(int value)
protected ConfigurationPropertyCollection get_Properties()
public WSFederationHttpSecurityElement get_Security()
protected void OnApplyConfiguration(Binding binding)
public void .ctor(string name)
}
public System.ServiceModel.Configuration.WSFederationHttpSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty message
private ConfigurationProperty mode
public FederatedMessageSecurityOverHttpElement Message
public WSFederationHttpSecurityMode Mode
protected ConfigurationPropertyCollection Properties
public FederatedMessageSecurityOverHttpElement get_Message()
public WSFederationHttpSecurityMode get_Mode()
public void set_Mode(WSFederationHttpSecurityMode value)
protected ConfigurationPropertyCollection get_Properties()
internal void ApplyConfiguration(WSFederationHttpSecurity security)
}
public System.ServiceModel.Configuration.WSHttpBindingBaseElement : StandardBindingElement {
private ConfigurationPropertyCollection _properties
public bool BypassProxyOnLocal
public HostNameComparisonMode HostNameComparisonMode
public long MaxBufferPoolSize
public long MaxReceivedMessageSize
public WSMessageEncoding MessageEncoding
protected ConfigurationPropertyCollection Properties
public Uri ProxyAddress
public XmlDictionaryReaderQuotasElement ReaderQuotas
public StandardBindingOptionalReliableSessionElement ReliableSession
public Encoding TextEncoding
public bool TransactionFlow
public bool UseDefaultWebProxy
protected void .ctor(string name)
public bool get_BypassProxyOnLocal()
public void set_BypassProxyOnLocal(bool value)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public WSMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(WSMessageEncoding value)
protected ConfigurationPropertyCollection get_Properties()
public Uri get_ProxyAddress()
public void set_ProxyAddress(Uri value)
public XmlDictionaryReaderQuotasElement get_ReaderQuotas()
public StandardBindingOptionalReliableSessionElement get_ReliableSession()
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public bool get_TransactionFlow()
public void set_TransactionFlow(bool value)
public bool get_UseDefaultWebProxy()
public void set_UseDefaultWebProxy(bool value)
protected void OnApplyConfiguration(Binding binding)
}
public System.ServiceModel.Configuration.WSHttpBindingCollectionElement : StandardBindingCollectionElement`2<WSHttpBinding, WSHttpBindingElement> {
private ConfigurationPropertyCollection properties
}
public System.ServiceModel.Configuration.WSHttpBindingElement : WSHttpBindingBaseElement {
private ConfigurationPropertyCollection _properties
public bool AllowCookies
protected Type BindingElementType
protected ConfigurationPropertyCollection Properties
public WSHttpSecurityElement Security
public void .ctor(string name)
public bool get_AllowCookies()
public void set_AllowCookies(bool value)
protected Type get_BindingElementType()
protected ConfigurationPropertyCollection get_Properties()
public WSHttpSecurityElement get_Security()
protected void OnApplyConfiguration(Binding binding)
}
public System.ServiceModel.Configuration.WSHttpContextBindingElement : WSHttpBindingElement {
public Uri ClientCallbackAddress
public bool ContextManagementEnabled
public ProtectionLevel ContextProtectionLevel
public void .ctor(string name)
public Uri get_ClientCallbackAddress()
public void set_ClientCallbackAddress(Uri value)
public bool get_ContextManagementEnabled()
public void set_ContextManagementEnabled(bool value)
public ProtectionLevel get_ContextProtectionLevel()
public void set_ContextProtectionLevel(ProtectionLevel value)
}
public System.ServiceModel.Configuration.WSHttpSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty message
private ConfigurationProperty mode
private ConfigurationProperty transport
public NonDualMessageSecurityOverHttpElement Message
public SecurityMode Mode
protected ConfigurationPropertyCollection Properties
public WSHttpTransportSecurityElement Transport
public NonDualMessageSecurityOverHttpElement get_Message()
public SecurityMode get_Mode()
public void set_Mode(SecurityMode value)
protected ConfigurationPropertyCollection get_Properties()
public WSHttpTransportSecurityElement get_Transport()
}
public System.ServiceModel.Configuration.WSHttpTransportSecurityElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty client_credential_type
private ConfigurationProperty proxy_credential_type
private ConfigurationProperty realm
public HttpClientCredentialType ClientCredentialType
protected ConfigurationPropertyCollection Properties
public HttpProxyCredentialType ProxyCredentialType
public string Realm
public ExtendedProtectionPolicyElement ExtendedProtectionPolicy
public HttpClientCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(HttpClientCredentialType value)
protected ConfigurationPropertyCollection get_Properties()
public HttpProxyCredentialType get_ProxyCredentialType()
public void set_ProxyCredentialType(HttpProxyCredentialType value)
public string get_Realm()
public void set_Realm(string value)
public ExtendedProtectionPolicyElement get_ExtendedProtectionPolicy()
}
public System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement : ConfigurationElement {
public string FindValue
protected ConfigurationPropertyCollection Properties
public StoreLocation StoreLocation
public StoreName StoreName
public X509FindType X509FindType
public string get_FindValue()
public void set_FindValue(string value)
protected ConfigurationPropertyCollection get_Properties()
public StoreLocation get_StoreLocation()
public void set_StoreLocation(StoreLocation value)
public StoreName get_StoreName()
public void set_StoreName(StoreName value)
public X509FindType get_X509FindType()
public void set_X509FindType(X509FindType value)
public void Copy(X509CertificateTrustedIssuerElement from)
}
public System.ServiceModel.Configuration.X509CertificateTrustedIssuerElementCollection : ServiceModelConfigurationElementCollection`1<X509CertificateTrustedIssuerElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty certificate_validation_mode
private ConfigurationProperty custom_certificate_validator_type
private ConfigurationProperty include_windows_groups
private ConfigurationProperty map_client_certificate_to_windows_account
private ConfigurationProperty revocation_mode
private ConfigurationProperty trusted_store_location
public X509CertificateValidationMode CertificateValidationMode
public string CustomCertificateValidatorType
public bool IncludeWindowsGroups
public bool MapClientCertificateToWindowsAccount
protected ConfigurationPropertyCollection Properties
public X509RevocationMode RevocationMode
public StoreLocation TrustedStoreLocation
public X509CertificateValidationMode get_CertificateValidationMode()
public void set_CertificateValidationMode(X509CertificateValidationMode value)
public string get_CustomCertificateValidatorType()
public void set_CustomCertificateValidatorType(string value)
public bool get_IncludeWindowsGroups()
public void set_IncludeWindowsGroups(bool value)
public bool get_MapClientCertificateToWindowsAccount()
public void set_MapClientCertificateToWindowsAccount(bool value)
protected ConfigurationPropertyCollection get_Properties()
public X509RevocationMode get_RevocationMode()
public void set_RevocationMode(X509RevocationMode value)
public StoreLocation get_TrustedStoreLocation()
public void set_TrustedStoreLocation(StoreLocation value)
public void Copy(X509ClientCertificateAuthenticationElement from)
}
public System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty find_value
private ConfigurationProperty store_location
private ConfigurationProperty store_name
private ConfigurationProperty x509_find_type
public string FindValue
protected ConfigurationPropertyCollection Properties
public StoreLocation StoreLocation
public StoreName StoreName
public X509FindType X509FindType
public string get_FindValue()
public void set_FindValue(string value)
protected ConfigurationPropertyCollection get_Properties()
public StoreLocation get_StoreLocation()
public void set_StoreLocation(StoreLocation value)
public StoreName get_StoreName()
public void set_StoreName(StoreName value)
public X509FindType get_X509FindType()
public void set_X509FindType(X509FindType value)
public void Copy(X509ClientCertificateCredentialsElement from)
}
public System.ServiceModel.Configuration.X509DefaultServiceCertificateElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty find_value
private ConfigurationProperty store_location
private ConfigurationProperty store_name
private ConfigurationProperty x509_find_type
public string FindValue
protected ConfigurationPropertyCollection Properties
public StoreLocation StoreLocation
public StoreName StoreName
public X509FindType X509FindType
public string get_FindValue()
public void set_FindValue(string value)
protected ConfigurationPropertyCollection get_Properties()
public StoreLocation get_StoreLocation()
public void set_StoreLocation(StoreLocation value)
public StoreName get_StoreName()
public void set_StoreName(StoreName value)
public X509FindType get_X509FindType()
public void set_X509FindType(X509FindType value)
public void Copy(X509DefaultServiceCertificateElement from)
}
public System.ServiceModel.Configuration.X509InitiatorCertificateClientElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty find_value
private ConfigurationProperty store_location
private ConfigurationProperty store_name
private ConfigurationProperty x509_find_type
public string FindValue
protected ConfigurationPropertyCollection Properties
public StoreLocation StoreLocation
public StoreName StoreName
public X509FindType X509FindType
public string get_FindValue()
public void set_FindValue(string value)
protected ConfigurationPropertyCollection get_Properties()
public StoreLocation get_StoreLocation()
public void set_StoreLocation(StoreLocation value)
public StoreName get_StoreName()
public void set_StoreName(StoreName value)
public X509FindType get_X509FindType()
public void set_X509FindType(X509FindType value)
public void Copy(X509InitiatorCertificateClientElement from)
}
public System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty authentication
private ConfigurationProperty certificate
public X509ClientCertificateAuthenticationElement Authentication
public X509ClientCertificateCredentialsElement Certificate
protected ConfigurationPropertyCollection Properties
public X509ClientCertificateAuthenticationElement get_Authentication()
public X509ClientCertificateCredentialsElement get_Certificate()
protected ConfigurationPropertyCollection get_Properties()
public void Copy(X509InitiatorCertificateServiceElement from)
}
public System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty certificate_validation_mode
private ConfigurationProperty custom_certificate_validator_type
private ConfigurationProperty revocation_mode
private ConfigurationProperty trusted_store_location
public X509CertificateValidationMode CertificateValidationMode
public string CustomCertificateValidatorType
protected ConfigurationPropertyCollection Properties
public X509RevocationMode RevocationMode
public StoreLocation TrustedStoreLocation
public X509CertificateValidationMode get_CertificateValidationMode()
public void set_CertificateValidationMode(X509CertificateValidationMode value)
public string get_CustomCertificateValidatorType()
public void set_CustomCertificateValidatorType(string value)
protected ConfigurationPropertyCollection get_Properties()
public X509RevocationMode get_RevocationMode()
public void set_RevocationMode(X509RevocationMode value)
public StoreLocation get_TrustedStoreLocation()
public void set_TrustedStoreLocation(StoreLocation value)
public void Copy(X509PeerCertificateAuthenticationElement from)
}
public System.ServiceModel.Configuration.X509PeerCertificateElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty find_value
private ConfigurationProperty store_location
private ConfigurationProperty store_name
private ConfigurationProperty x509_find_type
public string FindValue
protected ConfigurationPropertyCollection Properties
public StoreLocation StoreLocation
public StoreName StoreName
public X509FindType X509FindType
public string get_FindValue()
public void set_FindValue(string value)
protected ConfigurationPropertyCollection get_Properties()
public StoreLocation get_StoreLocation()
public void set_StoreLocation(StoreLocation value)
public StoreName get_StoreName()
public void set_StoreName(StoreName value)
public X509FindType get_X509FindType()
public void set_X509FindType(X509FindType value)
public void Copy(X509PeerCertificateElement from)
}
public System.ServiceModel.Configuration.X509RecipientCertificateClientElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty authentication
private ConfigurationProperty default_certificate
private ConfigurationProperty scoped_certificates
public X509ServiceCertificateAuthenticationElement Authentication
public X509DefaultServiceCertificateElement DefaultCertificate
protected ConfigurationPropertyCollection Properties
public X509ScopedServiceCertificateElementCollection ScopedCertificates
public X509ServiceCertificateAuthenticationElement SslCertificateAuthentication
public X509ServiceCertificateAuthenticationElement get_Authentication()
public X509DefaultServiceCertificateElement get_DefaultCertificate()
protected ConfigurationPropertyCollection get_Properties()
public X509ScopedServiceCertificateElementCollection get_ScopedCertificates()
public X509ServiceCertificateAuthenticationElement get_SslCertificateAuthentication()
public void Copy(X509RecipientCertificateClientElement from)
}
public System.ServiceModel.Configuration.X509RecipientCertificateServiceElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty find_value
private ConfigurationProperty store_location
private ConfigurationProperty store_name
private ConfigurationProperty x509_find_type
public string FindValue
protected ConfigurationPropertyCollection Properties
public StoreLocation StoreLocation
public StoreName StoreName
public X509FindType X509FindType
public string get_FindValue()
public void set_FindValue(string value)
protected ConfigurationPropertyCollection get_Properties()
public StoreLocation get_StoreLocation()
public void set_StoreLocation(StoreLocation value)
public StoreName get_StoreName()
public void set_StoreName(StoreName value)
public X509FindType get_X509FindType()
public void set_X509FindType(X509FindType value)
public void Copy(X509RecipientCertificateServiceElement from)
}
public System.ServiceModel.Configuration.X509ScopedServiceCertificateElement : ConfigurationElement {
public string FindValue
protected ConfigurationPropertyCollection Properties
public StoreLocation StoreLocation
public StoreName StoreName
public Uri TargetUri
public X509FindType X509FindType
public string get_FindValue()
public void set_FindValue(string value)
protected ConfigurationPropertyCollection get_Properties()
public StoreLocation get_StoreLocation()
public void set_StoreLocation(StoreLocation value)
public StoreName get_StoreName()
public void set_StoreName(StoreName value)
public Uri get_TargetUri()
public void set_TargetUri(Uri value)
public X509FindType get_X509FindType()
public void set_X509FindType(X509FindType value)
public void Copy(X509ScopedServiceCertificateElement from)
}
public System.ServiceModel.Configuration.X509ScopedServiceCertificateElementCollection : ServiceModelConfigurationElementCollection`1<X509ScopedServiceCertificateElement> {
protected object GetElementKey(ConfigurationElement element)
}
public System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty certificate_validation_mode
private ConfigurationProperty custom_certificate_validator_type
private ConfigurationProperty revocation_mode
private ConfigurationProperty trusted_store_location
public X509CertificateValidationMode CertificateValidationMode
public string CustomCertificateValidatorType
protected ConfigurationPropertyCollection Properties
public X509RevocationMode RevocationMode
public StoreLocation TrustedStoreLocation
public X509CertificateValidationMode get_CertificateValidationMode()
public void set_CertificateValidationMode(X509CertificateValidationMode value)
public string get_CustomCertificateValidatorType()
public void set_CustomCertificateValidatorType(string value)
protected ConfigurationPropertyCollection get_Properties()
public X509RevocationMode get_RevocationMode()
public void set_RevocationMode(X509RevocationMode value)
public StoreLocation get_TrustedStoreLocation()
public void set_TrustedStoreLocation(StoreLocation value)
public void Copy(X509ServiceCertificateAuthenticationElement from)
}
public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty max_array_length
private ConfigurationProperty max_bytes_per_read
private ConfigurationProperty max_depth
private ConfigurationProperty max_name_table_char_count
private ConfigurationProperty max_string_content_length
public int MaxArrayLength
public int MaxBytesPerRead
public int MaxDepth
public int MaxNameTableCharCount
public int MaxStringContentLength
protected ConfigurationPropertyCollection Properties
public int get_MaxArrayLength()
public void set_MaxArrayLength(int value)
public int get_MaxBytesPerRead()
public void set_MaxBytesPerRead(int value)
public int get_MaxDepth()
public void set_MaxDepth(int value)
public int get_MaxNameTableCharCount()
public void set_MaxNameTableCharCount(int value)
public int get_MaxStringContentLength()
public void set_MaxStringContentLength(int value)
protected ConfigurationPropertyCollection get_Properties()
internal XmlDictionaryReaderQuotas Create()
internal void ApplyConfiguration(XmlDictionaryReaderQuotas q)
internal void ApplyConfiguration(XmlDictionaryReaderQuotasElement q)
internal void InitializeFrom(XmlDictionaryReaderQuotas q)
internal void CopyFrom(XmlDictionaryReaderQuotasElement q)
}
public System.ServiceModel.Configuration.XmlElementElement : ConfigurationElement {
protected ConfigurationPropertyCollection Properties
public XmlElement XmlElement
public void .ctor(XmlElement element)
protected ConfigurationPropertyCollection get_Properties()
public XmlElement get_XmlElement()
public void set_XmlElement(XmlElement value)
protected void DeserializeElement(XmlReader reader, bool serializeCollectionKey)
protected void PostDeserialize()
protected bool SerializeToXmlElement(XmlWriter writer, string elementName)
public void Copy(XmlElementElement source)
}
public System.ServiceModel.Configuration.XmlElementElementCollection : ServiceModelConfigurationElementCollection`1<XmlElementElement> {
protected object GetElementKey(ConfigurationElement element)
protected bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader)
protected void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode)
}
public System.ServiceModel.Configuration.XPathMessageFilterElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty filter
public XPathMessageFilter Filter
protected ConfigurationPropertyCollection Properties
public XPathMessageFilter get_Filter()
public void set_Filter(XPathMessageFilter value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.ServiceModel.Configuration.XPathMessageFilterElementCollection : ServiceModelConfigurationElementCollection`1<XPathMessageFilterElement> {
private ConfigurationPropertyCollection properties
protected ConfigurationPropertyCollection Properties
public object Item
protected object GetElementKey(ConfigurationElement element)
protected ConfigurationPropertyCollection get_Properties()
public void set_Item(object key, XPathMessageFilterElement value)
}
public System.ServiceModel.Configuration.XPathMessageFilterElementComparer : object {
private int System.Collections.IComparer.Compare(object x, object y)
}
internal System.ServiceModel.Constants : object {
public string Soap11
public string Soap12
public string WSBasicSecurityProfileCore1
public string WsaAnonymousUri
public string WsaIdentityUri
public string MSSerialization
public string WssKeyIdentifierX509Thumbptint
public string WssBase64BinaryEncodingType
public string WssKeyIdentifierEncryptedKey
public string XmlDsig
public string WSSSamlToken
public string WSSX509Token
public string WssKeyIdentifierSamlAssertion
public string WSSUserNameToken
public string WsscContextToken
public string WSSKerberosToken
public string WSSEncryptedKeyToken
public string WstNamespace
public string WssNamespace
public string Wss11Namespace
public string WspNamespace
public string WsaNamespace
public string WsuNamespace
public string WsscNamespace
public string WsidNamespace
public string WstIssueAction
public string WstRenewAction
public string WstCancelAction
public string WstValidateAction
public string WstIssueReplyAction
public string WstRenewReplyAction
public string WstCancelReplyAction
public string WstValidateReplyAction
public string WsscDefaultLabel
public string WstBinaryExchangeValueTls
public string WstBinaryExchangeValueGss
public string MSTlsnegoTokenContent
public string WstTlsnegoProofTokenType
public string WstSpnegoProofTokenType
public string WstIssueRequest
public string WstRenewRequest
public string WstCancelRequest
public string WstValidateRequest
public string WstSymmetricKeyTypeUri
public string WstAsymmetricKeyTypeUri
public string LifetimeFormat
public string OidSpnego
public string OidNtlmSsp
public string OidKerberos5
public string OidMIT
public string NetPeer
private String[] dict_strings
private XmlDictionary <SoapDictionary>k__BackingField
public XmlDictionary SoapDictionary
public XmlDictionary get_SoapDictionary()
private void set_SoapDictionary(XmlDictionary value)
}
public System.ServiceModel.DataContractFormatAttribute : Attribute {
private OperationFormatStyle style
public OperationFormatStyle Style
public OperationFormatStyle get_Style()
public void set_Style(OperationFormatStyle value)
}
public System.ServiceModel.DeadLetterQueue : Enum {
public int value__
public DeadLetterQueue None
public DeadLetterQueue System
public DeadLetterQueue Custom
}
internal System.ServiceModel.DefaultCommunicationTimeouts : object {
public DefaultCommunicationTimeouts Instance
private TimeSpan close
private TimeSpan open
private TimeSpan receive
private TimeSpan send
public TimeSpan CloseTimeout
public TimeSpan OpenTimeout
public TimeSpan ReceiveTimeout
public TimeSpan SendTimeout
public TimeSpan get_CloseTimeout()
public TimeSpan get_OpenTimeout()
public TimeSpan get_ReceiveTimeout()
public TimeSpan get_SendTimeout()
}
public System.ServiceModel.DeliveryRequirementsAttribute : Attribute {
private QueuedDeliveryRequirementsMode queued_delivery_req
private bool require_ordered
private Type target_contract
public QueuedDeliveryRequirementsMode QueuedDeliveryRequirements
public bool RequireOrderedDelivery
public Type TargetContract
public QueuedDeliveryRequirementsMode get_QueuedDeliveryRequirements()
public void set_QueuedDeliveryRequirements(QueuedDeliveryRequirementsMode value)
public bool get_RequireOrderedDelivery()
public void set_RequireOrderedDelivery(bool value)
public Type get_TargetContract()
public void set_TargetContract(Type value)
private void System.ServiceModel.Description.IContractBehavior.AddBindingParameters(ContractDescription description, ServiceEndpoint endpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(ContractDescription description, ServiceEndpoint endpoint, ClientRuntime proxy)
private void System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(ContractDescription description, ServiceEndpoint endpoint, DispatchRuntime dispatch)
private void System.ServiceModel.Description.IContractBehavior.Validate(ContractDescription description, ServiceEndpoint endpoint)
}
internal System.ServiceModel.Description.BaseXmlSerializer : XmlSerializer {
protected XmlSerializationReader CreateReader()
protected XmlSerializationWriter CreateWriter()
public bool CanDeserialize(XmlReader xmlReader)
}
public System.ServiceModel.Description.CallbackDebugBehavior : object {
private bool include_exception
public bool IncludeExceptionDetailInFaults
public void .ctor(bool includeExceptionDetailInFaults)
public bool get_IncludeExceptionDetailInFaults()
public void set_IncludeExceptionDetailInFaults(bool value)
private void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher dispatcher)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime behavior)
private void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint)
}
internal System.ServiceModel.Description.CallbackTimeoutsBehavior : object {
private TimeSpan <TransactionTimeout>k__BackingField
public TimeSpan TransactionTimeout
public TimeSpan get_TransactionTimeout()
public void set_TransactionTimeout(TimeSpan value)
public void .ctor(TimeSpan timeout)
private void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher dispatcher)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime behavior)
private void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint)
}
public System.ServiceModel.Description.ClientCredentials : SecurityCredentialsManager {
private UserNamePasswordClientCredential userpass
private HttpDigestClientCredential digest
private X509CertificateInitiatorClientCredential initiator
private X509CertificateRecipientClientCredential recipient
private WindowsClientCredential windows
private IssuedTokenClientCredential issued_token
private PeerCredential peer
private bool support_interactive
public X509CertificateInitiatorClientCredential ClientCertificate
public HttpDigestClientCredential HttpDigest
public X509CertificateRecipientClientCredential ServiceCertificate
public WindowsClientCredential Windows
public IssuedTokenClientCredential IssuedToken
public PeerCredential Peer
public bool SupportInteractive
public UserNamePasswordClientCredential UserName
public SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager
public bool UseIdentityConfiguration
protected void .ctor(ClientCredentials other)
public X509CertificateInitiatorClientCredential get_ClientCertificate()
public HttpDigestClientCredential get_HttpDigest()
public X509CertificateRecipientClientCredential get_ServiceCertificate()
public WindowsClientCredential get_Windows()
public IssuedTokenClientCredential get_IssuedToken()
public PeerCredential get_Peer()
public bool get_SupportInteractive()
public void set_SupportInteractive(bool value)
public UserNamePasswordClientCredential get_UserName()
public ClientCredentials Clone()
protected ClientCredentials CloneCore()
public SecurityTokenManager CreateSecurityTokenManager()
protected SecurityToken GetInfoCardSecurityToken(bool requiresInfoCard, CardSpacePolicyElement[] chain, SecurityTokenSerializer tokenSerializer)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher dispatcher)
private void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection parameters)
public void ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime behavior)
private void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint)
public SecurityTokenHandlerCollectionManager get_SecurityTokenHandlerCollectionManager()
public void set_SecurityTokenHandlerCollectionManager(SecurityTokenHandlerCollectionManager value)
public bool get_UseIdentityConfiguration()
public void set_UseIdentityConfiguration(bool value)
}
public System.ServiceModel.Description.ClientViaBehavior : object {
private Uri uri
public Uri Uri
public void .ctor(Uri uri)
public Uri get_Uri()
public void set_Uri(Uri value)
private void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher dispatcher)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime behavior)
private void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint)
}
public System.ServiceModel.Description.ContractDescription : object {
private OperationDescriptionCollection operations
private KeyedByTypeCollection`1<IContractBehavior> behaviors
private Type callback_contract_type
private Type contract_type
private string name
private string ns
private string config_name
private ProtectionLevel protection_level
private bool has_protection_level
private SessionMode session
public KeyedByTypeCollection`1<IContractBehavior> Behaviors
public KeyedCollection`2<Type, IContractBehavior> ContractBehaviors
public Type CallbackContractType
public string ConfigurationName
public Type ContractType
public bool HasProtectionLevel
public ProtectionLevel ProtectionLevel
public string Name
public string Namespace
public OperationDescriptionCollection Operations
public SessionMode SessionMode
public ContractDescription GetContract(Type contractType)
public ContractDescription GetContract(Type contractType, object serviceImplementation)
public ContractDescription GetContract(Type contractType, Type serviceType)
public void .ctor(string name)
public void .ctor(string name, string ns)
public KeyedByTypeCollection`1<IContractBehavior> get_Behaviors()
public KeyedCollection`2<Type, IContractBehavior> get_ContractBehaviors()
public Type get_CallbackContractType()
public void set_CallbackContractType(Type value)
public string get_ConfigurationName()
public void set_ConfigurationName(string value)
public Type get_ContractType()
public void set_ContractType(Type value)
public bool get_HasProtectionLevel()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public OperationDescriptionCollection get_Operations()
public SessionMode get_SessionMode()
public void set_SessionMode(SessionMode value)
public Collection`1<ContractDescription> GetInheritedContracts()
internal ClientRuntime CreateClientRuntime(object callbackDispatchRuntime)
internal void FillClientOperations(ClientRuntime proxy, bool isCallback)
private void PopulateClientOperation(ClientRuntime proxy, OperationDescription od, bool isCallback)
public bool ShouldSerializeProtectionLevel()
}
internal System.ServiceModel.Description.ContractDescriptionGenerator : object {
private List`1<GetOperationContractAttributeExtender> getOperationContractAttributeExtenders
public void RegisterGetOperationContractAttributeExtender(GetOperationContractAttributeExtender extender)
public OperationContractAttribute GetOperationContractAttribute(MethodBase method)
private void GetServiceContractAttribute(Type type, Dictionary`2<Type, ServiceContractAttribute> table)
public Dictionary`2<Type, ServiceContractAttribute> GetServiceContractAttributes(Type type)
public ContractDescription GetContract(Type contractType)
public ContractDescription GetContract(Type contractType, object serviceImplementation)
public MessageContractAttribute GetMessageContractAttribute(Type type)
public ContractDescription GetCallbackContract(Type serviceType, Type callbackType)
public ContractDescription GetContract(Type givenContractType, Type givenServiceType)
private ContractDescription GetContract(Type givenContractType, Type givenServiceType, Type serviceTypeForCallback)
internal Type GetContractAssignableToInterfaces(Type given, Type[] givenInterfaces)
internal ContractDescription GetContractInternal(Type givenContractType, Type givenServiceType, Type serviceTypeForCallback)
private void FillOperationsForInterface(ContractDescription cd, Type exactContractType, Type givenServiceType, bool isCallback)
private MethodInfo[] GetAllMethods(Type type)
private IEnumerable`1<Type> GetAllInterfaceTypes(Type type)
private OperationDescription GetOrCreateOperation(ContractDescription cd, MethodInfo mi, MethodInfo serviceMethod, OperationContractAttribute oca, MethodInfo endMethod, bool isCallback, Type givenServiceType)
private bool HasInvalidMessageContract(MethodInfo mi, bool async)
private MessageDescription GetMessage(OperationDescription od, MethodInfo mi, OperationContractAttribute oca, bool isRequest, bool isCallback, Type asyncReturnType)
public MessageDescription CreateMessageDescription(Type messageType, string defaultNamespace, string action, bool isRequest, bool isCallback, MessageContractAttribute mca)
public MessageDescription CreateMessageDescription(OperationContractAttribute oca, ParameterInfo[] plist, string name, string defaultNamespace, string action, bool isRequest, bool isCallback, Type retType)
private MessageHeaderDescription CreateHeaderDescription(MessageHeaderAttribute mha, string defaultName, string defaultNamespace)
private MessagePartDescription CreatePartCore(MessageParameterAttribute mpa, string defaultName, string defaultNamespace)
private MessagePartDescription CreatePartCore(MessageBodyMemberAttribute mba, string defaultName, string defaultNamespace)
private T CreatePartCore(MessageContractMemberAttribute mba, string defaultName, string defaultNamespace, Func`3<string, string, T> creator)
private Type MessageFilterOutByRef(Type type)
private MessageParameterAttribute GetMessageParameterAttribute(ICustomAttributeProvider provider)
private MessageBodyMemberAttribute GetMessageBodyMemberAttribute(MemberInfo mi)
}
internal System.ServiceModel.Description.CustomPolicyConversionContext : PolicyConversionContext {
private Binding binding
private PolicyAssertionCollection assertions
private BindingElementCollection binding_elements
internal Binding WsdlBinding
public BindingElementCollection BindingElements
internal Binding get_WsdlBinding()
public PolicyAssertionCollection GetBindingAssertions()
public PolicyAssertionCollection GetFaultBindingAssertions(FaultDescription fault)
public PolicyAssertionCollection GetMessageBindingAssertions(MessageDescription message)
public PolicyAssertionCollection GetOperationBindingAssertions(OperationDescription operation)
public BindingElementCollection get_BindingElements()
public void .ctor(Binding binding, ServiceEndpoint endpoint)
public void .ctor(ServiceEndpoint endpoint)
public void AddPolicyAssertion(XmlElement element)
}
internal System.ServiceModel.Description.DataContractMessageContractImporterInternal : MessageContractImporterInternal {
private XsdDataContractImporter dc_importer
protected void Init(WsdlImporter importer)
protected void ImportPartsBySchemaElement(XmlQualifiedName qname, List`1<MessagePartDescription> parts, Message msg, MessagePart part)
private IEnumerable`1<XmlSchemaElement> GetElementsInParticle(XmlSchemaParticle p)
private MessagePartDescription CreateMessagePart(XmlSchemaElement elem, Message msg, MessagePart msgPart)
protected void ResolveType(XmlQualifiedName qname, List`1<MessagePartDescription> parts, string ns)
private Message FindMessage(OperationMessage om)
protected bool CanImportOperation(PortType portType, Operation op)
protected void OnOperationImported(OperationDescription od)
}
public System.ServiceModel.Description.DataContractSerializerMessageContractImporter : object {
private MessageContractImporterInternal impl
private bool enabled
public bool Enabled
public bool get_Enabled()
public void set_Enabled(bool value)
private void System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy)
private void System.ServiceModel.Description.IWsdlImportExtension.ImportContract(WsdlImporter importer, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context)
}
public System.ServiceModel.Description.DataContractSerializerOperationBehavior : object {
private DataContractFormatAttribute format
private OperationDescription operation
private DataContractResolver <DataContractResolver>k__BackingField
private bool <IgnoreExtensionDataObject>k__BackingField
private int <MaxItemsInObjectGraph>k__BackingField
private IDataContractSurrogate <DataContractSurrogate>k__BackingField
public DataContractFormatAttribute DataContractFormatAttribute
public DataContractResolver DataContractResolver
public bool IgnoreExtensionDataObject
public int MaxItemsInObjectGraph
public IDataContractSurrogate DataContractSurrogate
public void .ctor(OperationDescription operation)
public void .ctor(OperationDescription operation, DataContractFormatAttribute dataContractFormatAttribute)
public DataContractFormatAttribute get_DataContractFormatAttribute()
public DataContractResolver get_DataContractResolver()
public void set_DataContractResolver(DataContractResolver value)
public bool get_IgnoreExtensionDataObject()
public void set_IgnoreExtensionDataObject(bool value)
public int get_MaxItemsInObjectGraph()
public void set_MaxItemsInObjectGraph(int value)
public IDataContractSurrogate get_DataContractSurrogate()
public void set_DataContractSurrogate(IDataContractSurrogate value)
public XmlObjectSerializer CreateSerializer(Type type, string name, string ns, IList`1<Type> knownTypes)
public XmlObjectSerializer CreateSerializer(Type type, XmlDictionaryString name, XmlDictionaryString ns, IList`1<Type> knownTypes)
private void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription description, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch)
private void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription description, ClientOperation proxy)
private void System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription description)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)
}
internal System.ServiceModel.Description.DefaultTypedMessageConverter : TypedMessageConverter {
private IClientMessageFormatter formatter
public void .ctor(IClientMessageFormatter formatter)
public object FromMessage(Message message)
public Message ToMessage(object typedMessage)
public Message ToMessage(object typedMessage, MessageVersion version)
}
public System.ServiceModel.Description.DispatcherSynchronizationBehavior : object {
public bool AsynchronousSendEnabled
public int MaxPendingReceives
public void .ctor(bool asynchronousSendEnabled, int maxPendingReceives)
public bool get_AsynchronousSendEnabled()
public void set_AsynchronousSendEnabled(bool value)
public int get_MaxPendingReceives()
public void set_MaxPendingReceives(int value)
private void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint serviceEndpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime behavior)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher endpointDispatcher)
private void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint)
}
public System.ServiceModel.Description.FaultDescription : object {
private string action
private string name
private string ns
private Type detail_type
private bool has_protection_level
private ProtectionLevel protection_level
public string Action
public Type DetailType
public string Name
public string Namespace
public bool HasProtectionLevel
public ProtectionLevel ProtectionLevel
public void .ctor(string action)
public string get_Action()
public Type get_DetailType()
public void set_DetailType(Type value)
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public bool get_HasProtectionLevel()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public bool ShouldSerializeProtectionLevel()
}
public System.ServiceModel.Description.FaultDescriptionCollection : Collection`1<FaultDescription> {
public FaultDescription Find(string action)
public Collection`1<FaultDescription> FindAll(string action)
}
internal System.ServiceModel.Description.HttpGetWsdl : object {
private ServiceMetadataExtension ext
private bool initialized
private Dictionary`2<string, ServiceDescription> wsdl_documents
private Dictionary`2<string, XmlSchema> schemas
private Uri <HelpUrl>k__BackingField
private Uri <WsdlUrl>k__BackingField
public Uri HelpUrl
public Uri WsdlUrl
public void .ctor(ServiceMetadataExtension ext)
public Uri get_HelpUrl()
public void set_HelpUrl(Uri value)
public Uri get_WsdlUrl()
public void set_WsdlUrl(Uri value)
private void EnsureMetadata()
public Message Get(Message req)
private NameValueCollection CreateQueryString(string query)
private Message CreateHelpPage(Message request)
private Message CreateWsdlMessage(ServiceDescription wsdl)
private void GetMetadata()
private ServiceDescription GetWsdl(string which)
private XmlSchema GetXmlSchema(string which)
}
public System.ServiceModel.Description.IContractBehavior {
public void AddBindingParameters(ContractDescription contractDescription, ServiceEndpoint endpoint, BindingParameterCollection bindingParameters)
public void ApplyClientBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime)
public void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime)
public void Validate(ContractDescription contractDescription, ServiceEndpoint endpoint)
}
public System.ServiceModel.Description.IContractBehaviorAttribute {
public Type TargetContract
public Type get_TargetContract()
}
public System.ServiceModel.Description.IEndpointBehavior {
public void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters)
public void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)
public void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)
public void Validate(ServiceEndpoint endpoint)
}
internal System.ServiceModel.Description.IHttpGetHelpPageAndMetadataContract {
public Message Get(Message req)
}
public System.ServiceModel.Description.IMetadataExchange {
public IAsyncResult BeginGet(Message request, AsyncCallback callback, object state)
public Message EndGet(IAsyncResult result)
public Message Get(Message request)
}
public System.ServiceModel.Description.IOperationBehavior {
public void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters)
public void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation)
public void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation)
public void Validate(OperationDescription operationDescription)
}
public System.ServiceModel.Description.IOperationContractGenerationExtension {
public void GenerateOperation(OperationContractGenerationContext context)
}
public System.ServiceModel.Description.IPolicyExportExtension {
public void ExportPolicy(MetadataExporter exporter, PolicyConversionContext context)
}
public System.ServiceModel.Description.IPolicyImportExtension {
public void ImportPolicy(MetadataImporter importer, PolicyConversionContext context)
}
public System.ServiceModel.Description.IServiceBehavior {
public void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters)
public void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
public void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
}
public System.ServiceModel.Description.IServiceContractGenerationExtension {
public void GenerateContract(ServiceContractGenerationContext context)
}
public System.ServiceModel.Description.IWsdlExportExtension {
public void ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
public void ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)
}
public System.ServiceModel.Description.IWsdlImportExtension {
public void BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy)
public void ImportContract(WsdlImporter importer, WsdlContractConversionContext context)
public void ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context)
}
internal System.ServiceModel.Description.IWSTrustSecurityTokenService {
public Message Issue(Message request)
public Message IssueReply(Message request)
public Message Renew(Message request)
public Message Cancel(Message request)
public Message Validate(Message request)
}
public System.ServiceModel.Description.ListenUriMode : Enum {
public int value__
public ListenUriMode Explicit
public ListenUriMode Unique
}
public System.ServiceModel.Description.MessageBodyDescription : object {
private string wrapper_name
private string wrapper_ns
private MessagePartDescriptionCollection parts
private MessagePartDescription return_value
public MessagePartDescriptionCollection Parts
public MessagePartDescription ReturnValue
public string WrapperName
public string WrapperNamespace
public MessagePartDescriptionCollection get_Parts()
internal void set_Parts(MessagePartDescriptionCollection value)
public MessagePartDescription get_ReturnValue()
public void set_ReturnValue(MessagePartDescription value)
public string get_WrapperName()
public void set_WrapperName(string value)
public string get_WrapperNamespace()
public void set_WrapperNamespace(string value)
}
internal System.ServiceModel.Description.MessageContractImporterInternal : object {
internal WsdlImporter importer
private WsdlContractConversionContext context
internal XmlSchemaSet schema_set_in_use
protected void Init(WsdlImporter importer)
public void ImportContract(WsdlImporter importer, WsdlContractConversionContext context)
public void BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy)
private void DoImportContract()
private bool IsOperationImported(PortType pt, Operation op)
private void resolveMessage(Message msg, MessageBodyDescription body, List`1<MessagePartDescription> parts)
public void ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context)
protected void ImportPartsBySchemaElement(XmlQualifiedName qname, List`1<MessagePartDescription> parts, Message msg, MessagePart part)
protected void ResolveType(XmlQualifiedName qname, List`1<MessagePartDescription> parts, string ns)
protected bool CanImportOperation(PortType portType, Operation op)
protected void OnOperationImported(OperationDescription od)
}
public System.ServiceModel.Description.MessageDescription : object {
private string action
private MessageDirection direction
private MessagePropertyDescriptionCollection properties
private MessageBodyDescription body
private MessageHeaderDescriptionCollection headers
private Type message_type
private bool has_protection_level
private ProtectionLevel protection_level
private bool <IsRequest>k__BackingField
internal bool IsRequest
public string Action
public MessageBodyDescription Body
public MessageDirection Direction
public MessageHeaderDescriptionCollection Headers
public bool HasProtectionLevel
public ProtectionLevel ProtectionLevel
public Type MessageType
public MessagePropertyDescriptionCollection Properties
internal bool IsTypedMessage
internal bool IsUntypedMessage
internal bool IsVoid
public void .ctor(string action, MessageDirection direction)
internal bool get_IsRequest()
internal void set_IsRequest(bool value)
public string get_Action()
public MessageBodyDescription get_Body()
public MessageDirection get_Direction()
public MessageHeaderDescriptionCollection get_Headers()
public bool get_HasProtectionLevel()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public Type get_MessageType()
public void set_MessageType(Type value)
public MessagePropertyDescriptionCollection get_Properties()
internal bool get_IsTypedMessage()
internal bool get_IsUntypedMessage()
internal bool get_IsVoid()
private bool IsOfType(Type t)
public bool ShouldSerializeProtectionLevel()
}
public System.ServiceModel.Description.MessageDescriptionCollection : Collection`1<MessageDescription> {
public MessageDescription Find(string action)
public Collection`1<MessageDescription> FindAll(string action)
}
public System.ServiceModel.Description.MessageDirection : Enum {
public int value__
public MessageDirection Input
public MessageDirection Output
}
public System.ServiceModel.Description.MessageHeaderDescription : MessagePartDescription {
private string actor
private bool must_understand
private bool relay
private bool typed_header
public string Actor
public bool MustUnderstand
public bool Relay
public bool TypedHeader
public void .ctor(string name, string ns)
public string get_Actor()
public void set_Actor(string value)
public bool get_MustUnderstand()
public void set_MustUnderstand(bool value)
public bool get_Relay()
public void set_Relay(bool value)
public bool get_TypedHeader()
public void set_TypedHeader(bool value)
}
public System.ServiceModel.Description.MessageHeaderDescriptionCollection : KeyedCollection`2<XmlQualifiedName, MessageHeaderDescription> {
protected XmlQualifiedName GetKeyForItem(MessageHeaderDescription item)
}
public System.ServiceModel.Description.MessagePartDescription : object {
private int index
private MemberInfo member
private bool multiple
private Type type
private string name
private string ns
private bool has_protection_level
private ProtectionLevel protection_level
private XmlQualifiedName xml_schema_type_name
private XmlTypeMapping xml_type_mapping
private XsdDataContractImporter <DataContractImporter>k__BackingField
private XmlSerializerMessageContractImporterInternal <XmlSerializationImporter>k__BackingField
private CodeTypeReference <CodeTypeReference>k__BackingField
private XmlName <XmlName>k__BackingField
private ICustomAttributeProvider additional_att_provider
private int <SerializationPosition>k__BackingField
public int Index
public MemberInfo MemberInfo
public string Name
public string Namespace
public bool HasProtectionLevel
public ProtectionLevel ProtectionLevel
public bool Multiple
public Type Type
internal XsdDataContractImporter DataContractImporter
internal XmlSerializerMessageContractImporterInternal XmlSerializationImporter
internal CodeTypeReference CodeTypeReference
internal XmlName XmlName
internal ICustomAttributeProvider AdditionalAttributesProvider
internal int SerializationPosition
public void .ctor(string name, string ns)
public int get_Index()
public void set_Index(int value)
public MemberInfo get_MemberInfo()
public void set_MemberInfo(MemberInfo value)
public string get_Name()
internal void set_Name(string value)
public string get_Namespace()
public bool get_HasProtectionLevel()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public bool get_Multiple()
public void set_Multiple(bool value)
public Type get_Type()
public void set_Type(Type value)
internal XsdDataContractImporter get_DataContractImporter()
internal void set_DataContractImporter(XsdDataContractImporter value)
internal XmlSerializerMessageContractImporterInternal get_XmlSerializationImporter()
internal void set_XmlSerializationImporter(XmlSerializerMessageContractImporterInternal value)
internal CodeTypeReference get_CodeTypeReference()
internal void set_CodeTypeReference(CodeTypeReference value)
internal XmlName get_XmlName()
private void set_XmlName(XmlName value)
internal ICustomAttributeProvider get_AdditionalAttributesProvider()
internal void set_AdditionalAttributesProvider(ICustomAttributeProvider value)
internal int get_SerializationPosition()
internal void set_SerializationPosition(int value)
}
public System.ServiceModel.Description.MessagePartDescriptionCollection : KeyedCollection`2<XmlQualifiedName, MessagePartDescription> {
protected XmlQualifiedName GetKeyForItem(MessagePartDescription item)
}
public System.ServiceModel.Description.MessagePropertyDescription : MessagePartDescription {
public void .ctor(string name)
}
public System.ServiceModel.Description.MessagePropertyDescriptionCollection : KeyedCollection`2<string, MessagePropertyDescription> {
protected string GetKeyForItem(MessagePropertyDescription item)
}
public System.ServiceModel.Description.MetadataConversionError : object {
private string msg
private bool warning
public bool IsWarning
public string Message
public void .ctor(string message)
public void .ctor(string message, bool isWarning)
public bool get_IsWarning()
public string get_Message()
public bool Equals(object obj)
public int GetHashCode()
}
public System.ServiceModel.Description.MetadataExchangeBindings : object {
public Binding CreateMexHttpBinding()
public Binding CreateMexHttpsBinding()
public Binding CreateMexNamedPipeBinding()
public Binding CreateMexTcpBinding()
}
public System.ServiceModel.Description.MetadataExchangeClient : object {
private string scheme
private EndpointAddress address
private Binding binding
private MetadataExchangeClientMode mode
private Nullable`1<TimeSpan> operation_timeout
private ICredentials <HttpCredentials>k__BackingField
private int <MaximumResolvedReferences>k__BackingField
private bool <ResolveMetadataReferences>k__BackingField
private ClientCredentials <SoapCredentials>k__BackingField
private Func`2<Func`1<MetadataSet>, MetadataSet> getter
public ICredentials HttpCredentials
public int MaximumResolvedReferences
public TimeSpan OperationTimeout
public bool ResolveMetadataReferences
public ClientCredentials SoapCredentials
public void .ctor(Binding mexBinding)
public void .ctor(EndpointAddress address)
public void .ctor(string endpointConfigurationName)
public void .ctor(Uri address, MetadataExchangeClientMode mode)
public ICredentials get_HttpCredentials()
public void set_HttpCredentials(ICredentials value)
public int get_MaximumResolvedReferences()
public void set_MaximumResolvedReferences(int value)
public TimeSpan get_OperationTimeout()
public void set_OperationTimeout(TimeSpan value)
public bool get_ResolveMetadataReferences()
public void set_ResolveMetadataReferences(bool value)
public ClientCredentials get_SoapCredentials()
public void set_SoapCredentials(ClientCredentials value)
protected internal ChannelFactory`1<IMetadataExchange> GetChannelFactory(EndpointAddress metadataAddress, string dialect, string identifier)
protected internal HttpWebRequest GetWebRequest(Uri location, string dialect, string identifier)
private Binding CreateBinding(EndpointAddress address)
public MetadataSet GetMetadata()
public MetadataSet GetMetadata(EndpointAddress address)
public MetadataSet GetMetadata(Uri address, MetadataExchangeClientMode mode)
internal MetadataSet GetMetadataInternal(EndpointAddress address, MetadataExchangeClientMode mode)
private void PrepareGetter()
public MetadataSet EndGetMetadata(IAsyncResult result)
private MetadataSet GetMetadata(Func`1<MetadataSet> func)
public IAsyncResult BeginGetMetadata(AsyncCallback callback, object asyncState)
public IAsyncResult BeginGetMetadata(EndpointAddress address, AsyncCallback callback, object asyncState)
public IAsyncResult BeginGetMetadata(Uri address, MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState)
private MetadataSet <BeginGetMetadata>b__40_0()
public Task`1<MetadataSet> GetMetadataAsync()
public Task`1<MetadataSet> GetMetadataAsync(EndpointAddress address)
public Task`1<MetadataSet> GetMetadataAsync(EndpointAddress address, Uri via)
public Task`1<MetadataSet> GetMetadataAsync(Uri address, MetadataExchangeClientMode mode)
}
public System.ServiceModel.Description.MetadataExchangeClientMode : Enum {
public int value__
public MetadataExchangeClientMode MetadataExchange
public MetadataExchangeClientMode HttpGet
}
public System.ServiceModel.Description.MetadataExporter : object {
private Collection`1<MetadataConversionError> errors
public Collection`1<MetadataConversionError> Errors
public Dictionary`2<object, object> State
public PolicyVersion PolicyVersion
public Collection`1<MetadataConversionError> get_Errors()
public Dictionary`2<object, object> get_State()
public void ExportContract(ContractDescription contract)
public void ExportEndpoint(ServiceEndpoint endpoint)
public MetadataSet GetGeneratedMetadata()
protected internal PolicyConversionContext ExportPolicy(ServiceEndpoint endpoint)
internal MetadataConversionError AddError(string message, Object[] args)
internal MetadataConversionError AddWarning(string message, Object[] args)
public PolicyVersion get_PolicyVersion()
public void set_PolicyVersion(PolicyVersion value)
}
public System.ServiceModel.Description.MetadataImporter : object {
private KeyedByTypeCollection`1<IPolicyImportExtension> policy_extensions
private Collection`1<MetadataConversionError> errors
private Dictionary`2<object, object> state
public Collection`1<MetadataConversionError> Errors
public KeyedByTypeCollection`1<IPolicyImportExtension> PolicyImportExtensions
public Dictionary`2<object, object> State
public Dictionary`2<XmlQualifiedName, ContractDescription> KnownContracts
internal void .ctor(IEnumerable`1<IPolicyImportExtension> policyImportExtensions)
public Collection`1<MetadataConversionError> get_Errors()
public KeyedByTypeCollection`1<IPolicyImportExtension> get_PolicyImportExtensions()
public Dictionary`2<object, object> get_State()
public Dictionary`2<XmlQualifiedName, ContractDescription> get_KnownContracts()
public Collection`1<ContractDescription> ImportAllContracts()
public ServiceEndpointCollection ImportAllEndpoints()
internal T GetState()
internal MetadataConversionError AddError(string message, Object[] args)
internal MetadataConversionError AddWarning(string message, Object[] args)
}
public System.ServiceModel.Description.MetadataImporterQuotas : object {
public MetadataImporterQuotas Defaults
public MetadataImporterQuotas Max
public MetadataImporterQuotas get_Defaults()
public MetadataImporterQuotas get_Max()
}
public System.ServiceModel.Description.MetadataLocation : object {
private string location
public string Location
public void .ctor(string location)
public string get_Location()
public void set_Location(string value)
}
public System.ServiceModel.Description.MetadataReference : object {
private EndpointAddress address
private AddressingVersion address_version
public EndpointAddress Address
public AddressingVersion AddressVersion
public void .ctor(EndpointAddress address, AddressingVersion addressVersion)
public EndpointAddress get_Address()
public void set_Address(EndpointAddress value)
public AddressingVersion get_AddressVersion()
public void set_AddressVersion(AddressingVersion value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
}
public System.ServiceModel.Description.MetadataResolver : object {
private Resolver resolver
private IEnumerable`1<ContractDescription> ToContracts(Type contract)
public IAsyncResult BeginResolve(IEnumerable`1<ContractDescription> contracts, EndpointAddress address, AsyncCallback callback, object asyncState)
public IAsyncResult BeginResolve(Type contract, EndpointAddress address, AsyncCallback callback, object asyncState)
public IAsyncResult BeginResolve(IEnumerable`1<ContractDescription> contracts, EndpointAddress address, MetadataExchangeClient client, AsyncCallback callback, object asyncState)
public IAsyncResult BeginResolve(IEnumerable`1<ContractDescription> contracts, Uri address, MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState)
public IAsyncResult BeginResolve(Type contract, Uri address, MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState)
public IAsyncResult BeginResolve(IEnumerable`1<ContractDescription> contracts, Uri address, MetadataExchangeClientMode mode, MetadataExchangeClient client, AsyncCallback callback, object asyncState)
public ServiceEndpointCollection EndResolve(IAsyncResult result)
public ServiceEndpointCollection Resolve(Type contract, EndpointAddress address)
public ServiceEndpointCollection Resolve(Type contract, Uri address, MetadataExchangeClientMode mode)
public ServiceEndpointCollection Resolve(IEnumerable`1<ContractDescription> contracts, EndpointAddress address)
public ServiceEndpointCollection Resolve(IEnumerable`1<ContractDescription> contracts, Uri address, MetadataExchangeClientMode mode)
public ServiceEndpointCollection Resolve(IEnumerable`1<ContractDescription> contracts, EndpointAddress address, MetadataExchangeClient client)
public ServiceEndpointCollection Resolve(IEnumerable`1<ContractDescription> contracts, Uri address, MetadataExchangeClientMode mode, MetadataExchangeClient client)
private ServiceEndpointCollection ResolveContracts(IEnumerable`1<ContractDescription> contracts, Func`1<MetadataSet> metadataGetter)
}
public System.ServiceModel.Description.MetadataSection : object {
private string dialect
private string identifier
private object metadata
private Collection`1<XmlAttribute> attributes
private MetadataSectionSerializer serializer
public string MetadataExchangeDialect
public string PolicyDialect
public string ServiceDescriptionDialect
public string XmlSchemaDialect
public string Dialect
public string Identifier
public object Metadata
public Collection`1<XmlAttribute> Attributes
internal XmlSerializer Serializer
public void .ctor(string dialect, string identifier, object metadata)
public string get_MetadataExchangeDialect()
public string get_PolicyDialect()
public string get_ServiceDescriptionDialect()
public string get_XmlSchemaDialect()
public string get_Dialect()
public void set_Dialect(string value)
public string get_Identifier()
public void set_Identifier(string value)
public object get_Metadata()
public void set_Metadata(object value)
public Collection`1<XmlAttribute> get_Attributes()
internal XmlSerializer get_Serializer()
public MetadataSection CreateFromSchema(XmlSchema schema)
public MetadataSection CreateFromServiceDescription(ServiceDescription serviceDescription)
public MetadataSection CreateFromPolicy(XmlElement policy, string identifier)
}
internal System.ServiceModel.Description.MetadataSectionReaderBase : XmlSerializationReader {
public object ReadRoot_MetadataSection()
public MetadataSection ReadObject_MetadataSection(bool isNullable, bool checkType)
public XmlSchema ReadObject_XmlSchema(bool isNullable, bool checkType)
public MetadataLocation ReadObject_MetadataLocation(bool isNullable, bool checkType)
public ServiceDescription ReadObject_ServiceDescription(bool isNullable, bool checkType)
protected void InitCallbacks()
protected void InitIDs()
}
internal System.ServiceModel.Description.MetadataSectionSerializer : BaseXmlSerializer {
protected void Serialize(object obj, XmlSerializationWriter writer)
protected object Deserialize(XmlSerializationReader reader)
}
internal System.ServiceModel.Description.MetadataSectionWriterBase : XmlSerializationWriter {
private string xmlNamespace
public void WriteRoot_MetadataSection(object o)
private void WriteObject_MetadataSection(MetadataSection ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_ServiceDescription(ServiceDescription ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchema(XmlSchema ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_MetadataLocation(MetadataLocation ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_Import(Import ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_Types(Types ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_Message(Message ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_PortType(PortType ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_Binding(Binding ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_Service(Service ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_MessagePart(MessagePart ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_Operation(Operation ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_OperationBinding(OperationBinding ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_Port(Port ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_OperationFault(OperationFault ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_OperationInput(OperationInput ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_OperationOutput(OperationOutput ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_FaultBinding(FaultBinding ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_InputBinding(InputBinding ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_OutputBinding(OutputBinding ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
protected void InitCallbacks()
}
public System.ServiceModel.Description.MetadataSet : object {
private Collection`1<MetadataSection> sections
private Collection`1<XmlAttribute> attributes
public Collection`1<MetadataSection> MetadataSections
public Collection`1<XmlAttribute> Attributes
public void .ctor(IEnumerable`1<MetadataSection> sections)
public Collection`1<MetadataSection> get_MetadataSections()
public Collection`1<XmlAttribute> get_Attributes()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public MetadataSet ReadFrom(XmlReader reader)
public void WriteTo(XmlWriter writer)
}
public System.ServiceModel.Description.MustUnderstandBehavior : object {
private bool validate
public bool ValidateMustUnderstand
public void .ctor(bool validate)
public bool get_ValidateMustUnderstand()
public void set_ValidateMustUnderstand(bool value)
private void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher dispatcher)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime proxy)
private void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint)
}
public System.ServiceModel.Description.OperationContractGenerationContext : object {
private ServiceContractGenerator generator
private ServiceContractGenerationContext contract
private OperationDescription operation
private CodeTypeDeclaration declaring_type
private CodeMemberMethod method
private CodeMemberMethod begin_method
private CodeMemberMethod end_method
public ServiceContractGenerator ServiceContractGenerator
public ServiceContractGenerationContext Contract
public OperationDescription Operation
public CodeTypeDeclaration DeclaringType
public CodeMemberMethod SyncMethod
public CodeMemberMethod BeginMethod
public CodeMemberMethod EndMethod
public bool IsAsync
public bool IsTask
public CodeMemberMethod TaskMethod
public void .ctor(ServiceContractGenerator serviceContractGenerator, ServiceContractGenerationContext contract, OperationDescription operation, CodeTypeDeclaration declaringType, CodeMemberMethod method)
public void .ctor(ServiceContractGenerator serviceContractGenerator, ServiceContractGenerationContext contract, OperationDescription operation, CodeTypeDeclaration declaringType, CodeMemberMethod syncMethod, CodeMemberMethod beginMethod, CodeMemberMethod endMethod)
public ServiceContractGenerator get_ServiceContractGenerator()
public ServiceContractGenerationContext get_Contract()
public OperationDescription get_Operation()
public CodeTypeDeclaration get_DeclaringType()
public CodeMemberMethod get_SyncMethod()
public CodeMemberMethod get_BeginMethod()
public CodeMemberMethod get_EndMethod()
public bool get_IsAsync()
public void .ctor(ServiceContractGenerator serviceContractGenerator, ServiceContractGenerationContext contract, OperationDescription operation, CodeTypeDeclaration declaringType, CodeMemberMethod syncMethod, CodeMemberMethod taskMethod)
public void .ctor(ServiceContractGenerator serviceContractGenerator, ServiceContractGenerationContext contract, OperationDescription operation, CodeTypeDeclaration declaringType, CodeMemberMethod syncMethod, CodeMemberMethod beginMethod, CodeMemberMethod endMethod, CodeMemberMethod taskMethod)
public bool get_IsTask()
public CodeMemberMethod get_TaskMethod()
}
public System.ServiceModel.Description.OperationDescription : object {
private MethodInfo begin_method
private MethodInfo end_method
private MethodInfo sync_method
private FaultDescriptionCollection faults
private ContractDescription contract
private KeyedByTypeCollection`1<IOperationBehavior> behaviors
private bool is_initiating
private bool is_oneway
private bool is_terminating
private Collection`1<Type> known_types
private MessageDescriptionCollection messages
private string name
private ProtectionLevel protection_level
private bool has_protection_level
private bool <InOrdinalContract>k__BackingField
private bool <InCallbackContract>k__BackingField
private XmlName <XmlName>k__BackingField
private object <FormatterBehavior>k__BackingField
internal bool InOrdinalContract
internal bool InCallbackContract
public MethodInfo BeginMethod
public KeyedByTypeCollection`1<IOperationBehavior> Behaviors
public KeyedCollection`2<Type, IOperationBehavior> OperationBehaviors
public MethodInfo TaskMethod
public ContractDescription DeclaringContract
public MethodInfo EndMethod
public FaultDescriptionCollection Faults
public bool HasProtectionLevel
public bool IsInitiating
public bool IsOneWay
public bool IsTerminating
public Collection`1<Type> KnownTypes
public MessageDescriptionCollection Messages
public string Name
public ProtectionLevel ProtectionLevel
public MethodInfo SyncMethod
internal XmlName XmlName
internal object FormatterBehavior
public void .ctor(string name, ContractDescription declaringContract)
internal bool get_InOrdinalContract()
internal void set_InOrdinalContract(bool value)
internal bool get_InCallbackContract()
internal void set_InCallbackContract(bool value)
public MethodInfo get_BeginMethod()
public void set_BeginMethod(MethodInfo value)
public KeyedByTypeCollection`1<IOperationBehavior> get_Behaviors()
public KeyedCollection`2<Type, IOperationBehavior> get_OperationBehaviors()
public MethodInfo get_TaskMethod()
public void set_TaskMethod(MethodInfo value)
public ContractDescription get_DeclaringContract()
public void set_DeclaringContract(ContractDescription value)
public MethodInfo get_EndMethod()
public void set_EndMethod(MethodInfo value)
public FaultDescriptionCollection get_Faults()
public bool get_HasProtectionLevel()
public bool get_IsInitiating()
public void set_IsInitiating(bool value)
public bool get_IsOneWay()
internal void set_IsOneWay(bool value)
public bool get_IsTerminating()
public void set_IsTerminating(bool value)
public Collection`1<Type> get_KnownTypes()
public MessageDescriptionCollection get_Messages()
public string get_Name()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public MethodInfo get_SyncMethod()
public void set_SyncMethod(MethodInfo value)
internal XmlName get_XmlName()
private void set_XmlName(XmlName value)
internal object get_FormatterBehavior()
internal void set_FormatterBehavior(object value)
public bool ShouldSerializeProtectionLevel()
}
public System.ServiceModel.Description.OperationDescriptionCollection : Collection`1<OperationDescription> {
public OperationDescription Find(string name)
public Collection`1<OperationDescription> FindAll(string name)
protected void InsertItem(int index, OperationDescription item)
protected void SetItem(int index, OperationDescription item)
}
public System.ServiceModel.Description.ParameterXPathQueryGenerator : object {
public string CreateFromDataContractSerializer(XName serviceContractName, string operationName, string parameterName, bool isReply, Type type, MemberInfo[] pathToMember, XmlNamespaceManager& namespaces)
}
public System.ServiceModel.Description.PolicyAssertionCollection : Collection`1<XmlElement> {
public void .ctor(IEnumerable`1<XmlElement> elements)
public bool Contains(string localName, string namespaceUri)
public XmlElement Find(string localName, string namespaceUri)
public Collection`1<XmlElement> FindAll(string localName, string namespaceUri)
public XmlElement Remove(string localName, string namespaceUri)
public Collection`1<XmlElement> RemoveAll(string localName, string namespaceUri)
protected void InsertItem(int index, XmlElement item)
protected void SetItem(int index, XmlElement item)
}
public System.ServiceModel.Description.PolicyConversionContext : object {
private ServiceEndpoint endpoint
internal ServiceEndpoint Endpoint
public BindingElementCollection BindingElements
public ContractDescription Contract
protected void .ctor(ServiceEndpoint endpoint)
internal ServiceEndpoint get_Endpoint()
public BindingElementCollection get_BindingElements()
public ContractDescription get_Contract()
public PolicyAssertionCollection GetBindingAssertions()
public PolicyAssertionCollection GetFaultBindingAssertions(FaultDescription fault)
public PolicyAssertionCollection GetMessageBindingAssertions(MessageDescription message)
public PolicyAssertionCollection GetOperationBindingAssertions(OperationDescription operation)
}
public System.ServiceModel.Description.PolicyVersion : object {
private PolicyVersion _policy12
private PolicyVersion _policy15
private string _namespace
public PolicyVersion Default
public PolicyVersion Policy12
public PolicyVersion Policy15
public string Namespace
private void .ctor(string namespace)
public PolicyVersion get_Default()
public PolicyVersion get_Policy12()
public PolicyVersion get_Policy15()
public string get_Namespace()
public string ToString()
}
public System.ServiceModel.Description.PrincipalPermissionMode : Enum {
public int value__
public PrincipalPermissionMode None
public PrincipalPermissionMode UseWindowsGroups
public PrincipalPermissionMode UseAspNetRoles
public PrincipalPermissionMode Custom
public PrincipalPermissionMode Always
}
public System.ServiceModel.Description.ServiceAuthenticationBehavior : object {
public AuthenticationSchemes AuthenticationSchemes
public ServiceAuthenticationManager ServiceAuthenticationManager
public AuthenticationSchemes get_AuthenticationSchemes()
public void set_AuthenticationSchemes(AuthenticationSchemes value)
public ServiceAuthenticationManager get_ServiceAuthenticationManager()
public void set_ServiceAuthenticationManager(ServiceAuthenticationManager value)
public bool ShouldSerializeAuthenticationSchemes()
public bool ShouldSerializeServiceAuthenticationManager()
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase)
}
public System.ServiceModel.Description.ServiceAuthorizationBehavior : object {
private bool impersonate
private PrincipalPermissionMode perm_mode
private RoleProvider role_provider
private ServiceAuthorizationManager svc_auth_manager
private ReadOnlyCollection`1<IAuthorizationPolicy> ext_auth_policies
public ReadOnlyCollection`1<IAuthorizationPolicy> ExternalAuthorizationPolicies
public bool ImpersonateCallerForAllOperations
public PrincipalPermissionMode PrincipalPermissionMode
public RoleProvider RoleProvider
public ServiceAuthorizationManager ServiceAuthorizationManager
public bool ImpersonateOnSerializingReply
public ReadOnlyCollection`1<IAuthorizationPolicy> get_ExternalAuthorizationPolicies()
public void set_ExternalAuthorizationPolicies(ReadOnlyCollection`1<IAuthorizationPolicy> value)
public bool get_ImpersonateCallerForAllOperations()
public void set_ImpersonateCallerForAllOperations(bool value)
public PrincipalPermissionMode get_PrincipalPermissionMode()
public void set_PrincipalPermissionMode(PrincipalPermissionMode value)
public RoleProvider get_RoleProvider()
public void set_RoleProvider(RoleProvider value)
public ServiceAuthorizationManager get_ServiceAuthorizationManager()
public void set_ServiceAuthorizationManager(ServiceAuthorizationManager value)
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase)
public bool get_ImpersonateOnSerializingReply()
public void set_ImpersonateOnSerializingReply(bool value)
public bool ShouldSerializeExternalAuthorizationPolicies()
public bool ShouldSerializeServiceAuthorizationManager()
}
public System.ServiceModel.Description.ServiceContractGenerationContext : object {
private ServiceContractGenerator generator
private ContractDescription contract
private CodeTypeDeclaration contract_type
private CodeTypeDeclaration duplex_callback_type
private Collection`1<OperationContractGenerationContext> operations
public ServiceContractGenerator ServiceContractGenerator
public ContractDescription Contract
public CodeTypeDeclaration ContractType
public CodeTypeDeclaration DuplexCallbackType
public Collection`1<OperationContractGenerationContext> Operations
public void .ctor(ServiceContractGenerator serviceContractGenerator, ContractDescription contract, CodeTypeDeclaration contractType)
public void .ctor(ServiceContractGenerator serviceContractGenerator, ContractDescription contract, CodeTypeDeclaration contractType, CodeTypeDeclaration duplexCallbackType)
public ServiceContractGenerator get_ServiceContractGenerator()
public ContractDescription get_Contract()
public CodeTypeDeclaration get_ContractType()
public CodeTypeDeclaration get_DuplexCallbackType()
public Collection`1<OperationContractGenerationContext> get_Operations()
}
public System.ServiceModel.Description.ServiceContractGenerationOptions : Enum {
public int value__
public ServiceContractGenerationOptions None
public ServiceContractGenerationOptions AsynchronousMethods
public ServiceContractGenerationOptions ChannelInterface
public ServiceContractGenerationOptions InternalTypes
public ServiceContractGenerationOptions ClientClass
public ServiceContractGenerationOptions TypedMessages
public ServiceContractGenerationOptions EventBasedAsynchronousMethods
public ServiceContractGenerationOptions TaskBasedAsynchronousMethod
}
public System.ServiceModel.Description.ServiceContractGenerator : object {
private CodeCompileUnit ccu
private Configuration config
private CodeIdentifiers identifiers
private Collection`1<MetadataConversionError> errors
private Dictionary`2<string, string> nsmappings
private Dictionary`2<ContractDescription, Type> referenced_types
private Dictionary`2<ContractDescription, ContractCacheEntry> generated_contracts
private ServiceContractGenerationOptions options
private Dictionary`2<XmlQualifiedName, XmlQualifiedName> imported_names
private ServiceContractGenerationContext contract_context
private List`1<KeyValuePair`2<IOperationContractGenerationExtension, OperationContractGenerationContext>> operation_contexts
private XsdDataContractImporter data_contract_importer
private XmlSerializerMessageContractImporterInternal xml_serialization_importer
private string ms_arrays_ns
public Configuration Configuration
public Collection`1<MetadataConversionError> Errors
public Dictionary`2<string, string> NamespaceMappings
public ServiceContractGenerationOptions Options
private bool GenerateAsync
private bool GenerateEventBasedAsync
public Dictionary`2<ContractDescription, Type> ReferencedTypes
public CodeCompileUnit TargetCompileUnit
public void .ctor(CodeCompileUnit targetCompileUnit)
public void .ctor(Configuration targetConfig)
public void .ctor(CodeCompileUnit targetCompileUnit, Configuration targetConfig)
public Configuration get_Configuration()
public Collection`1<MetadataConversionError> get_Errors()
public Dictionary`2<string, string> get_NamespaceMappings()
public ServiceContractGenerationOptions get_Options()
public void set_Options(ServiceContractGenerationOptions value)
private bool get_GenerateAsync()
private bool get_GenerateEventBasedAsync()
public Dictionary`2<ContractDescription, Type> get_ReferencedTypes()
public CodeCompileUnit get_TargetCompileUnit()
public void GenerateBinding(Binding binding, String& bindingSectionName, String& configurationName)
public CodeTypeReference GenerateServiceContractType(ContractDescription contractDescription)
private CodeNamespace GetNamespace(string contractNs)
private CodeTypeDeclaration GetTypeDeclaration(CodeNamespace cns, string name)
private void GenerateProxyClass(ContractDescription cd, CodeNamespace cns)
private void GenerateChannelInterface(ContractDescription cd, CodeNamespace cns)
private CodeTypeReference ExportInterface(ContractDescription cd, CodeNamespace cns)
private ContractCacheEntry ExportInterface_internal(ContractDescription cd, CodeNamespace cns)
private void AddBeginAsyncArgs(CodeMemberMethod cm)
private void AddOperationMethods(CodeTypeDeclaration type, ContractDescription cd)
private CodeMemberMethod GenerateOperationMethod(CodeTypeDeclaration type, ContractDescription cd, OperationDescription od, bool async, CodeTypeReference& returnType)
private void ExportParameters(CodeMemberMethod method, ParameterInfo[] parameters)
private void AddImplementationClientMethods(CodeTypeDeclaration type, ContractDescription cd)
private CodeMemberMethod GenerateImplementationClientMethod(CodeTypeDeclaration type, ContractDescription cd, OperationDescription od, bool async, CodeTypeReference& returnTypeFromMessageContract)
private CodeMemberMethod FindByName(CodeTypeDeclaration type, string name)
private void GenerateEventBasedAsyncSupport(CodeTypeDeclaration type, OperationDescription od, CodeNamespace cns)
private void AddMethodParam(CodeMemberMethod cm, Type type, string name)
private CodeExpression[] ExportMessages(MessageDescriptionCollection messages, CodeMemberMethod method, bool return_args)
public CodeTypeReference GenerateServiceEndpoint(ServiceEndpoint endpoint, ChannelEndpointElement& channelElement)
private void MergeCompileUnit(CodeCompileUnit from, CodeCompileUnit to)
private void MergeNamespace(CodeNamespace from, CodeNamespace to)
private void ExportDataContract(MessagePartDescription md)
private string GetXmlNamespace(CodeTypeDeclaration type)
}
public System.ServiceModel.Description.ServiceCredentials : SecurityCredentialsManager {
private X509CertificateInitiatorServiceCredential initiator
private PeerCredential peer
private X509CertificateRecipientServiceCredential recipient
private UserNamePasswordServiceCredential userpass
private WindowsServiceCredential windows
private IssuedTokenServiceCredential issued_token
private SecureConversationServiceCredential secure_conversation
public X509CertificateInitiatorServiceCredential ClientCertificate
public IssuedTokenServiceCredential IssuedTokenAuthentication
public PeerCredential Peer
public SecureConversationServiceCredential SecureConversationAuthentication
public X509CertificateRecipientServiceCredential ServiceCertificate
public UserNamePasswordServiceCredential UserNameAuthentication
public WindowsServiceCredential WindowsAuthentication
public ExceptionMapper ExceptionMapper
public IdentityConfiguration IdentityConfiguration
public bool UseIdentityConfiguration
protected void .ctor(ServiceCredentials other)
public X509CertificateInitiatorServiceCredential get_ClientCertificate()
public IssuedTokenServiceCredential get_IssuedTokenAuthentication()
public PeerCredential get_Peer()
public SecureConversationServiceCredential get_SecureConversationAuthentication()
public X509CertificateRecipientServiceCredential get_ServiceCertificate()
public UserNamePasswordServiceCredential get_UserNameAuthentication()
public WindowsServiceCredential get_WindowsAuthentication()
public ServiceCredentials Clone()
protected ServiceCredentials CloneCore()
public SecurityTokenManager CreateSecurityTokenManager()
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase)
public ExceptionMapper get_ExceptionMapper()
public void set_ExceptionMapper(ExceptionMapper value)
public IdentityConfiguration get_IdentityConfiguration()
public void set_IdentityConfiguration(IdentityConfiguration value)
public bool get_UseIdentityConfiguration()
public void set_UseIdentityConfiguration(bool value)
}
public System.ServiceModel.Description.ServiceDebugBehavior : object {
private bool <IncludeExceptionDetailInFaults>k__BackingField
private bool <HttpHelpPageEnabled>k__BackingField
private Uri <HttpHelpPageUrl>k__BackingField
private bool <HttpsHelpPageEnabled>k__BackingField
private Uri <HttpsHelpPageUrl>k__BackingField
private Binding <HttpHelpPageBinding>k__BackingField
private Binding <HttpsHelpPageBinding>k__BackingField
public bool IncludeExceptionDetailInFaults
public bool HttpHelpPageEnabled
public Uri HttpHelpPageUrl
public bool HttpsHelpPageEnabled
public Uri HttpsHelpPageUrl
public Binding HttpHelpPageBinding
public Binding HttpsHelpPageBinding
public bool get_IncludeExceptionDetailInFaults()
public void set_IncludeExceptionDetailInFaults(bool value)
public bool get_HttpHelpPageEnabled()
public void set_HttpHelpPageEnabled(bool value)
public Uri get_HttpHelpPageUrl()
public void set_HttpHelpPageUrl(Uri value)
public bool get_HttpsHelpPageEnabled()
public void set_HttpsHelpPageEnabled(bool value)
public Uri get_HttpsHelpPageUrl()
public void set_HttpsHelpPageUrl(Uri value)
public Binding get_HttpHelpPageBinding()
public void set_HttpHelpPageBinding(Binding value)
public Binding get_HttpsHelpPageBinding()
public void set_HttpsHelpPageBinding(Binding value)
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase)
}
public System.ServiceModel.Description.ServiceDescription : object {
private ServiceEndpointCollection endpoints
private KeyedByTypeCollection`1<IServiceBehavior> behaviors
private Type service_type
private object well_known
private string name
private string ns
private string config_name
public string ConfigurationName
public KeyedByTypeCollection`1<IServiceBehavior> Behaviors
public ServiceEndpointCollection Endpoints
public string Name
public string Namespace
public Type ServiceType
public void .ctor(IEnumerable`1<ServiceEndpoint> endpoints)
public string get_ConfigurationName()
public void set_ConfigurationName(string value)
public KeyedByTypeCollection`1<IServiceBehavior> get_Behaviors()
public ServiceEndpointCollection get_Endpoints()
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public Type get_ServiceType()
public void set_ServiceType(Type value)
public ServiceDescription GetService(Type serviceType)
public ServiceDescription GetService(object serviceImplementation)
}
public System.ServiceModel.Description.ServiceEndpoint : object {
private ContractDescription contract
private Binding binding
private EndpointAddress address
private KeyedByTypeCollection`1<IEndpointBehavior> behaviors
private Uri listen_uri
private ListenUriMode listen_mode
private string name
private bool <IsSystemEndpoint>k__BackingField
public KeyedByTypeCollection`1<IEndpointBehavior> Behaviors
public KeyedCollection`2<Type, IEndpointBehavior> EndpointBehaviors
public ContractDescription Contract
public EndpointAddress Address
public Binding Binding
public bool IsSystemEndpoint
public Uri ListenUri
public ListenUriMode ListenUriMode
public string Name
public void .ctor(ContractDescription contract)
public void .ctor(ContractDescription contract, Binding binding, EndpointAddress address)
public KeyedByTypeCollection`1<IEndpointBehavior> get_Behaviors()
public KeyedCollection`2<Type, IEndpointBehavior> get_EndpointBehaviors()
public ContractDescription get_Contract()
public void set_Contract(ContractDescription value)
public EndpointAddress get_Address()
public void set_Address(EndpointAddress value)
public Binding get_Binding()
public void set_Binding(Binding value)
public bool get_IsSystemEndpoint()
public void set_IsSystemEndpoint(bool value)
public Uri get_ListenUri()
public void set_ListenUri(Uri value)
public ListenUriMode get_ListenUriMode()
public void set_ListenUriMode(ListenUriMode value)
public string get_Name()
public void set_Name(string value)
internal void Validate()
internal ClientRuntime CreateClientRuntime(object callbackDispatchRuntime)
}
public System.ServiceModel.Description.ServiceEndpointCollection : Collection`1<ServiceEndpoint> {
public ServiceEndpoint Find(Type contractType)
public ServiceEndpoint Find(Uri address)
public ServiceEndpoint Find(XmlQualifiedName contractName)
public ServiceEndpoint Find(XmlQualifiedName contractName, XmlQualifiedName bindingName)
public ServiceEndpoint Find(Type contractType, XmlQualifiedName bindingName)
public Collection`1<ServiceEndpoint> FindAll(Type contractType)
public Collection`1<ServiceEndpoint> FindAll(XmlQualifiedName contractName)
protected void InsertItem(int index, ServiceEndpoint item)
protected void SetItem(int index, ServiceEndpoint item)
}
public System.ServiceModel.Description.ServiceMetadataBehavior : object {
public string MexContractName
private MetadataExporter exporter
private bool <HttpGetEnabled>k__BackingField
private bool <HttpsGetEnabled>k__BackingField
private Uri <ExternalMetadataLocation>k__BackingField
private Uri <HttpGetUrl>k__BackingField
private Uri <HttpsGetUrl>k__BackingField
private Binding <HttpGetBinding>k__BackingField
private Binding <HttpsGetBinding>k__BackingField
public bool HttpGetEnabled
public bool HttpsGetEnabled
public MetadataExporter MetadataExporter
public Uri ExternalMetadataLocation
public Uri HttpGetUrl
public Uri HttpsGetUrl
public Binding HttpGetBinding
public Binding HttpsGetBinding
public bool get_HttpGetEnabled()
public void set_HttpGetEnabled(bool value)
public bool get_HttpsGetEnabled()
public void set_HttpsGetEnabled(bool value)
public MetadataExporter get_MetadataExporter()
public void set_MetadataExporter(MetadataExporter value)
public Uri get_ExternalMetadataLocation()
public void set_ExternalMetadataLocation(Uri value)
public Uri get_HttpGetUrl()
public void set_HttpGetUrl(Uri value)
public Uri get_HttpsGetUrl()
public void set_HttpsGetUrl(Uri value)
public Binding get_HttpGetBinding()
public void set_HttpGetBinding(Binding value)
public Binding get_HttpsGetBinding()
public void set_HttpsGetBinding(Binding value)
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase)
}
public System.ServiceModel.Description.ServiceMetadataContractBehavior : object {
public bool MetadataGenerationDisabled
public void .ctor(bool metadataGenerationDisabled)
public bool get_MetadataGenerationDisabled()
public void set_MetadataGenerationDisabled(bool value)
private void System.ServiceModel.Description.IContractBehavior.AddBindingParameters(ContractDescription description, ServiceEndpoint endpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(ContractDescription description, ServiceEndpoint endpoint, ClientRuntime proxy)
private void System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(ContractDescription description, ServiceEndpoint endpoint, DispatchRuntime dispatch)
private void System.ServiceModel.Description.IContractBehavior.Validate(ContractDescription description, ServiceEndpoint endpoint)
}
public System.ServiceModel.Description.ServiceMetadataEndpoint : ServiceEndpoint {
public void .ctor(EndpointAddress address)
public void .ctor(Binding binding, EndpointAddress address)
}
public System.ServiceModel.Description.ServiceMetadataExtension : object {
private string ServiceMetadataBehaviorHttpGetBinding
private MetadataSet metadata
private ServiceHostBase owner
private Dictionary`2<Uri, ChannelDispatcher> dispatchers
private HttpGetWsdl instance
internal HttpGetWsdl Instance
public MetadataSet Metadata
internal ServiceHostBase Owner
public ServiceDescription SingleWsdl
internal HttpGetWsdl get_Instance()
public MetadataSet get_Metadata()
internal ServiceHostBase get_Owner()
internal ServiceMetadataExtension EnsureServiceMetadataExtension(ServiceHostBase serviceHostBase)
internal void EnsureChannelDispatcher(bool isMex, string scheme, Uri uri, Binding binding)
private void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Attach(ServiceHostBase owner)
private void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Detach(ServiceHostBase owner)
public ServiceDescription get_SingleWsdl()
}
public System.ServiceModel.Description.ServiceSecurityAuditBehavior : object {
private AuditLogLocation audit_log_loc
private bool suppress_failure
private AuditLevel msg_audit_level
private AuditLevel svc_audit_level
public AuditLogLocation AuditLogLocation
public AuditLevel MessageAuthenticationAuditLevel
public AuditLevel ServiceAuthorizationAuditLevel
public bool SuppressAuditFailure
public AuditLogLocation get_AuditLogLocation()
public void set_AuditLogLocation(AuditLogLocation value)
public AuditLevel get_MessageAuthenticationAuditLevel()
public void set_MessageAuthenticationAuditLevel(AuditLevel value)
public AuditLevel get_ServiceAuthorizationAuditLevel()
public void set_ServiceAuthorizationAuditLevel(AuditLevel value)
public bool get_SuppressAuditFailure()
public void set_SuppressAuditFailure(bool value)
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase)
}
public System.ServiceModel.Description.ServiceThrottlingBehavior : object {
private int max_calls
private int max_conn
private int max_instance
public int MaxConcurrentCalls
public int MaxConcurrentSessions
public int MaxConcurrentInstances
public int get_MaxConcurrentCalls()
public void set_MaxConcurrentCalls(int value)
public int get_MaxConcurrentSessions()
public void set_MaxConcurrentSessions(int value)
public int get_MaxConcurrentInstances()
public void set_MaxConcurrentInstances(int value)
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase)
}
internal System.ServiceModel.Description.ServiceTimeoutsBehavior : object {
private TimeSpan <TransactionTimeout>k__BackingField
public TimeSpan TransactionTimeout
public TimeSpan get_TransactionTimeout()
public void set_TransactionTimeout(TimeSpan value)
public void .ctor(TimeSpan timeout)
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase)
}
public System.ServiceModel.Description.SynchronousReceiveBehavior : object {
private void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher dispatcher)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime behavior)
private void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint)
}
public System.ServiceModel.Description.TransactedBatchingBehavior : object {
private int max_batch_size
public int MaxBatchSize
public void .ctor(int maxBatchSize)
public int get_MaxBatchSize()
public void set_MaxBatchSize(int value)
private void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher dispatcher)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime behavior)
private void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint)
}
public System.ServiceModel.Description.TypedMessageConverter : object {
internal string TempUri
public TypedMessageConverter Create(Type messageContract, string action)
public TypedMessageConverter Create(Type messageContract, string action, string defaultNamespace)
public TypedMessageConverter Create(Type messageContract, string action, DataContractFormatAttribute formatterAttribute)
public TypedMessageConverter Create(Type messageContract, string action, string defaultNamespace, DataContractFormatAttribute formatterAttribute)
public TypedMessageConverter Create(Type messageContract, string action, XmlSerializerFormatAttribute formatterAttribute)
public TypedMessageConverter Create(Type messageContract, string action, string defaultNamespace, XmlSerializerFormatAttribute formatterAttribute)
public object FromMessage(Message message)
public Message ToMessage(object typedMessage)
public Message ToMessage(object typedMessage, MessageVersion version)
private MessageDescriptionCollection MessageContractToMessagesDescription(Type src, string defaultNamespace, string action)
}
public System.ServiceModel.Description.UseRequestHeadersForMetadataAddressBehavior : object {
public IDictionary`2<string, int> DefaultPortsByScheme
public IDictionary`2<string, int> get_DefaultPortsByScheme()
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
}
internal System.ServiceModel.Description.WsaEndpointReference : object {
public string Address
}
public System.ServiceModel.Description.WsdlContractConversionContext : object {
private ContractDescription contract
private PortType port_type
public ContractDescription Contract
public PortType WsdlPortType
internal void .ctor(ContractDescription contract, PortType portType)
public ContractDescription get_Contract()
public PortType get_WsdlPortType()
public MessageDescription GetMessageDescription(OperationMessage operationMessage)
public Operation GetOperation(OperationDescription operation)
public OperationDescription GetOperationDescription(Operation operation)
public OperationMessage GetOperationMessage(MessageDescription message)
public FaultDescription GetFaultDescription(OperationFault operationFault)
public OperationFault GetOperationFault(FaultDescription fault)
}
public System.ServiceModel.Description.WsdlEndpointConversionContext : object {
private WsdlContractConversionContext context
private ServiceEndpoint endpoint
private Port port
private Binding wsdl_binding
public WsdlContractConversionContext ContractConversionContext
public ServiceEndpoint Endpoint
public Binding WsdlBinding
public Port WsdlPort
internal void .ctor(WsdlContractConversionContext context, ServiceEndpoint endpoint, Port port, Binding wsdlBinding)
public WsdlContractConversionContext get_ContractConversionContext()
public ServiceEndpoint get_Endpoint()
public Binding get_WsdlBinding()
public Port get_WsdlPort()
public MessageBinding GetMessageBinding(MessageDescription message)
public MessageDescription GetMessageDescription(MessageBinding messageBinding)
public OperationBinding GetOperationBinding(OperationDescription operation)
public OperationDescription GetOperationDescription(OperationBinding operationBinding)
public FaultBinding GetFaultBinding(FaultDescription fault)
public FaultDescription GetFaultDescription(FaultBinding faultBinding)
}
public System.ServiceModel.Description.WsdlExporter : MetadataExporter {
private MetadataSet metadata
private ServiceDescriptionCollection wsdl_colln
private XsdDataContractExporter xsd_exporter
private Dictionary`2<ContractDescription, ContractExportMap> exported_contracts
private List`1<EndpointExportMap> exported_endpoints
public ServiceDescriptionCollection GeneratedWsdlDocuments
public XmlSchemaSet GeneratedXmlSchemas
private XsdDataContractExporter XsdExporter
private Dictionary`2<ContractDescription, ContractExportMap> ExportedContracts
private List`1<EndpointExportMap> ExportedEndpoints
public MetadataSet GetGeneratedMetadata()
public void ExportContract(ContractDescription contract)
private ContractExportMap ExportContractInternal(ContractDescription contract)
public void ExportEndpoint(ServiceEndpoint endpoint)
private EndpointExportMap ExportEndpoint_Internal(ServiceEndpoint endpoint)
private OperationBinding CreateOperationBinding(ServiceEndpoint endpoint, OperationDescription sm_op)
private void CreateInputBinding(ServiceEndpoint endpoint, OperationBinding op_binding, MessageDescription sm_md)
private void CreateOutputBinding(ServiceEndpoint endpoint, OperationBinding op_binding, MessageDescription sm_md)
private Port ExportService(ServiceDescription sd, Binding ws_binding, EndpointAddress address)
private Service GetService(ServiceDescription sd, string name)
private ServiceDescription GetServiceDescription(string ns)
public ServiceDescriptionCollection get_GeneratedWsdlDocuments()
public XmlSchemaSet get_GeneratedXmlSchemas()
public void ExportEndpoints(IEnumerable`1<ServiceEndpoint> endpoints, XmlQualifiedName wsdlServiceQName)
private XsdDataContractExporter get_XsdExporter()
private Dictionary`2<ContractDescription, ContractExportMap> get_ExportedContracts()
private List`1<EndpointExportMap> get_ExportedEndpoints()
private XmlSerializerNamespaces GetNamespaces(string target_namespace)
private MessagePart ExportMessageBodyDescription(MessageBodyDescription msgbody, string name, string ns)
private string IsTypeMessage(MessageBodyDescription msgbody)
private XmlQualifiedName ExportParameters(MessageBodyDescription msgbody, string name, string ns)
private XmlQualifiedName ExportTypeMessage()
private XmlSchemaElement GetSchemaElementForPart(MessagePartDescription part, XmlSchema schema)
private void AddImport(XmlSchema schema, string ns)
private XmlSchema GetSchema(string ns)
private PolicyConversionContext ExportPolicy(ServiceEndpoint endpoint, Binding binding)
}
public System.ServiceModel.Description.WsdlImporter : MetadataImporter {
private ServiceDescriptionCollection wsdl_documents
private XmlSchemaSet xmlschemas
private List`1<XmlElement> policies
private MetadataSet metadata
private bool beforeImportCalled
private KeyedByTypeCollection`1<IWsdlImportExtension> wsdl_extensions
private Collection`1<ContractDescription> contracts
private ServiceEndpointCollection endpoint_colln
private Dictionary`2<PortType, ContractDescription> contractHash
private Dictionary`2<Binding, ServiceEndpoint> bindingHash
private Dictionary`2<Port, ServiceEndpoint> endpointHash
public ServiceDescriptionCollection WsdlDocuments
public KeyedByTypeCollection`1<IWsdlImportExtension> WsdlImportExtensions
public XmlSchemaSet XmlSchemas
public void .ctor(MetadataSet metadata, IEnumerable`1<IPolicyImportExtension> policyImportExtensions, IEnumerable`1<IWsdlImportExtension> wsdlImportExtensions)
public void .ctor(MetadataSet metadata)
public ServiceDescriptionCollection get_WsdlDocuments()
public KeyedByTypeCollection`1<IWsdlImportExtension> get_WsdlImportExtensions()
public XmlSchemaSet get_XmlSchemas()
public Collection`1<Binding> ImportAllBindings()
private void BeforeImport()
public Binding ImportBinding(Binding wsdlBinding)
private ServiceEndpoint ImportBinding(Binding binding, bool throwOnError)
private ServiceEndpoint ImportBinding(Binding binding, WsdlContractConversionContext contract_context)
private void ImportPolicy(Binding binding, ServiceEndpoint endpoint)
private PortType GetPortTypeFromBinding(Binding binding)
public Collection`1<ContractDescription> ImportAllContracts()
public ServiceEndpointCollection ImportAllEndpoints()
public ContractDescription ImportContract(PortType wsdlPortType)
private ContractDescription ImportContract(PortType portType, bool throwOnError)
private ContractDescription DoImportContract(PortType wsdlPortType)
private string GetActionFromOperationBinding(PortType pt, string opName)
public ServiceEndpoint ImportEndpoint(Port wsdlPort)
private ServiceEndpoint ImportEndpoint(Port port, bool throwOnError)
private void ImportEndpoint(Port port, Binding wsb, ServiceEndpoint sep, bool throwOnError)
private void ImportEndpoints(ServiceEndpointCollection coll, Binding binding)
public ServiceEndpointCollection ImportEndpoints(Binding wsdlBinding)
public ServiceEndpointCollection ImportEndpoints(PortType wsdlPortType)
public ServiceEndpointCollection ImportEndpoints(Service wsdlService)
public void .ctor(MetadataSet metadata, IEnumerable`1<IPolicyImportExtension> policyImportExtensions, IEnumerable`1<IWsdlImportExtension> wsdlImportExtensions, MetadataImporterQuotas quotas)
}
internal System.ServiceModel.Description.WspAppliesTo : object {
public WsaEndpointReference EndpointReference
}
internal System.ServiceModel.Description.WstBinaryExchange : object {
public string ValueType
public string EncodingType
public Byte[] Value
public void .ctor(string valueType)
public void WriteTo(XmlWriter w)
}
internal System.ServiceModel.Description.WstBinarySecret : object {
public string Id
public string Type
public string Value
}
internal System.ServiceModel.Description.WstEntropy : object {
public object Token
}
internal System.ServiceModel.Description.WstLifetime : object {
public DateTime Created
public DateTime Expires
}
internal System.ServiceModel.Description.WstRequestSecurityToken : WstRequestSecurityTokenBase {
protected void OnWriteBodyContents(XmlDictionaryWriter w)
}
internal System.ServiceModel.Description.WstRequestSecurityTokenBase : BodyWriter {
public string Context
public string RequestType
public WspAppliesTo AppliesTo
public SecurityToken Entropy
public int KeySize
public string KeyType
public string ComputedKeyAlgorithm
public WstBinaryExchange BinaryExchange
protected void WriteBodyContentsCore(XmlDictionaryWriter w)
}
internal System.ServiceModel.Description.WstRequestSecurityTokenResponse : WstRequestSecurityTokenBase {
private SecurityTokenSerializer serializer
public string TokenType
public SecurityContextSecurityToken RequestedSecurityToken
public SecurityKeyIdentifierClause RequestedAttachedReference
public SecurityKeyIdentifierClause RequestedUnattachedReference
public object RequestedProofToken
public WstLifetime Lifetime
public Byte[] Authenticator
public void .ctor(SecurityTokenSerializer serializer)
protected void OnWriteBodyContents(XmlDictionaryWriter w)
}
internal System.ServiceModel.Description.WstRequestSecurityTokenResponseCollection : BodyWriter {
private Collection`1<WstRequestSecurityTokenResponse> responses
public Collection`1<WstRequestSecurityTokenResponse> Responses
public Collection`1<WstRequestSecurityTokenResponse> get_Responses()
protected void OnWriteBodyContents(XmlDictionaryWriter w)
public void Read(string negotiationType, XmlDictionaryReader r, SecurityTokenSerializer serializer, SecurityTokenResolver resolver)
}
internal System.ServiceModel.Description.WstRequestSecurityTokenResponseWriter : BodyWriter {
private WstRequestSecurityTokenResponse res
private SecurityTokenSerializer serializer
public void .ctor(WstRequestSecurityTokenResponse res, SecurityTokenSerializer serializer)
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
}
internal System.ServiceModel.Description.WstRequestSecurityTokenWriter : BodyWriter {
private WstRequestSecurityToken value
private SecurityTokenSerializer serializer
public void .ctor(WstRequestSecurityToken value, SecurityTokenSerializer serializer)
protected void OnWriteBodyContents(XmlDictionaryWriter w)
}
internal System.ServiceModel.Description.WSTrustRequestSecurityTokenReader : object {
private WstRequestSecurityToken req
private XmlDictionaryReader reader
private SecurityTokenSerializer serializer
public WstRequestSecurityToken Value
public void .ctor(XmlDictionaryReader reader, SecurityTokenSerializer serializer)
public WstRequestSecurityToken get_Value()
private string LineInfo()
public void Dispose()
public WstRequestSecurityToken Read()
private void ReadTokenContent()
protected void ReadBinaryExchange()
private void ReadEntropy()
private void ReadAppliesTo()
}
internal System.ServiceModel.Description.WSTrustRequestSecurityTokenResponseReader : object {
private string negotiation_type
private WstRequestSecurityTokenResponse res
private XmlDictionaryReader reader
private SecurityTokenSerializer serializer
private SecurityTokenResolver resolver
public WstRequestSecurityTokenResponse Value
public void .ctor(string negotiationType, XmlDictionaryReader reader, SecurityTokenSerializer serializer, SecurityTokenResolver resolver)
public WstRequestSecurityTokenResponse get_Value()
private string LineInfo()
public void Dispose()
public WstRequestSecurityTokenResponse Read()
private void ReadTokenContent()
private void ReadAuthenticator()
private void ReadLifetime()
private SecurityToken ReadToken()
private SecurityKeyIdentifierClause ReadTokenReference()
private void ReadBinaryExchange()
}
internal System.ServiceModel.Description.WSTrustSecurityTokenServiceProxy : ClientBase`1<IWSTrustSecurityTokenService> {
public void .ctor(Binding binding, EndpointAddress address)
public Message Issue(Message request)
public Message IssueReply(Message request)
public Message Renew(Message request)
public Message Cancel(Message request)
public Message Validate(Message request)
}
internal System.ServiceModel.Description.XmlName : object {
private string encoded_name
private string decoded_name
public bool IsEmpty
public string DecodedName
public string EncodedName
public void .ctor(string name)
public void .ctor(string name, bool allowNull)
public bool get_IsEmpty()
public string get_DecodedName()
public string get_EncodedName()
public void ValidateEncodedName(string name, bool allowNull)
public string ToString()
public bool op_Equality(XmlName a, XmlName b)
public bool op_Inequality(XmlName a, XmlName b)
public bool Equals(object obj)
public int GetHashCode()
}
internal System.ServiceModel.Description.XmlSerializerContract : XmlSerializerImplementation {
private Hashtable readMethods
private Hashtable writeMethods
private Hashtable typedSerializers
public XmlSerializationReader Reader
public XmlSerializationWriter Writer
public Hashtable ReadMethods
public Hashtable WriteMethods
public Hashtable TypedSerializers
public XmlSerializationReader get_Reader()
public XmlSerializationWriter get_Writer()
public Hashtable get_ReadMethods()
public Hashtable get_WriteMethods()
public Hashtable get_TypedSerializers()
public bool CanSerialize(Type type)
}
internal System.ServiceModel.Description.XmlSerializerMappingBehavior : object {
public void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters)
public void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation)
public void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation)
public void Validate(OperationDescription operationDescription)
}
public System.ServiceModel.Description.XmlSerializerMessageContractImporter : object {
private MessageContractImporterInternal impl
private bool enabled
public bool Enabled
public bool get_Enabled()
public void set_Enabled(bool value)
private void System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy)
private void System.ServiceModel.Description.IWsdlImportExtension.ImportContract(WsdlImporter importer, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context)
}
internal System.ServiceModel.Description.XmlSerializerMessageContractImporterInternal : MessageContractImporterInternal {
private CodeCompileUnit ccu
private XmlSchemaSet schema_set_cache
private XmlSchemaImporter schema_importer
private XmlCodeExporter code_exporter
public CodeCompileUnit CodeCompileUnit
public CodeCompileUnit get_CodeCompileUnit()
protected void Init(WsdlImporter importer)
protected void ImportPartsBySchemaElement(XmlQualifiedName qname, List`1<MessagePartDescription> parts, Message msg, MessagePart msgPart)
protected void ResolveType(XmlQualifiedName qname, List`1<MessagePartDescription> parts, string ns)
protected bool CanImportOperation(PortType portType, Operation op)
protected void OnOperationImported(OperationDescription od)
}
public System.ServiceModel.Description.XmlSerializerOperationBehavior : object {
private XmlSerializerFormatAttribute format
private OperationDescription operation
public XmlSerializerFormatAttribute XmlSerializerFormatAttribute
public void .ctor(OperationDescription operation)
public void .ctor(OperationDescription operation, XmlSerializerFormatAttribute attribute)
public Collection`1<XmlMapping> GetXmlMappings()
public XmlSerializerFormatAttribute get_XmlSerializerFormatAttribute()
private void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription description, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch)
private void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription description, ClientOperation proxy)
private void System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription description)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
private void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)
}
internal System.ServiceModel.Diagnostics.MessageLoggingSettings : object {
private bool <LogEntireMessage>k__BackingField
private bool <LogKnownPii>k__BackingField
private bool <LogMalformedMessages>k__BackingField
private bool <LogMessagesAtServiceLevel>k__BackingField
private bool <LogMessagesAtTransportLevel>k__BackingField
private int <MaxMessagesToLog>k__BackingField
private int <MaxSizeOfMessageToLog>k__BackingField
public bool LogEntireMessage
public bool LogKnownPii
public bool LogMalformedMessages
public bool LogMessagesAtServiceLevel
public bool LogMessagesAtTransportLevel
public int MaxMessagesToLog
public int MaxSizeOfMessageToLog
public bool get_LogEntireMessage()
public void set_LogEntireMessage(bool value)
public bool get_LogKnownPii()
public void set_LogKnownPii(bool value)
public bool get_LogMalformedMessages()
public void set_LogMalformedMessages(bool value)
public bool get_LogMessagesAtServiceLevel()
public void set_LogMessagesAtServiceLevel(bool value)
public bool get_LogMessagesAtTransportLevel()
public void set_LogMessagesAtTransportLevel(bool value)
public int get_MaxMessagesToLog()
public void set_MaxMessagesToLog(int value)
public int get_MaxSizeOfMessageToLog()
public void set_MaxSizeOfMessageToLog(int value)
}
internal System.ServiceModel.Diagnostics.MessageLogTraceRecord : object {
private DateTime <Time>k__BackingField
private MessageLogSourceKind <Source>k__BackingField
private Type <Type>k__BackingField
private MessageBuffer <Message>k__BackingField
public DateTime Time
public MessageLogSourceKind Source
public Type Type
public MessageBuffer Message
public void .ctor(MessageLogSourceKind kind, Type type, MessageBuffer msgbuf)
public DateTime get_Time()
public void set_Time(DateTime value)
public MessageLogSourceKind get_Source()
public void set_Source(MessageLogSourceKind value)
public Type get_Type()
public void set_Type(Type value)
public MessageBuffer get_Message()
public void set_Message(MessageBuffer value)
}
public System.ServiceModel.Diagnostics.PerformanceCounterScope : Enum {
public int value__
public PerformanceCounterScope Off
public PerformanceCounterScope ServiceOnly
public PerformanceCounterScope All
public PerformanceCounterScope Default
}
public System.ServiceModel.Dispatcher.ActionMessageFilter : MessageFilter {
private ReadOnlyCollection`1<string> actions
public ReadOnlyCollection`1<string> Actions
public void .ctor(String[] actions)
protected internal IMessageFilterTable`1<FilterData> CreateFilterTable()
public bool Match(Message message)
public bool Match(MessageBuffer messageBuffer)
public ReadOnlyCollection`1<string> get_Actions()
}
internal System.ServiceModel.Dispatcher.ActionMessageFilterTable`1 : object {
private Dictionary`2<MessageFilter, TFilterData> table
public int Count
public bool IsReadOnly
public TFilterData Item
public ICollection`1<MessageFilter> Keys
public ICollection`1<TFilterData> Values
public void Add(KeyValuePair`2<MessageFilter, TFilterData> item)
public void Add(ActionMessageFilter filter, TFilterData data)
public void Add(MessageFilter filter, TFilterData data)
public void Clear()
public bool Contains(KeyValuePair`2<MessageFilter, TFilterData> item)
public bool ContainsKey(MessageFilter filter)
public void CopyTo(KeyValuePair`2[] array, int index)
public IEnumerator`1<KeyValuePair`2<MessageFilter, TFilterData>> GetEnumerator()
public bool GetMatchingFilter(Message message, MessageFilter& result)
public bool GetMatchingFilter(MessageBuffer buffer, MessageFilter& result)
public bool GetMatchingFilters(Message message, ICollection`1<MessageFilter> results)
public bool GetMatchingFilters(MessageBuffer buffer, ICollection`1<MessageFilter> results)
public bool GetMatchingValue(Message message, TFilterData& data)
public bool GetMatchingValue(MessageBuffer buffer, TFilterData& data)
public bool GetMatchingValues(Message message, ICollection`1<TFilterData> results)
public bool GetMatchingValues(MessageBuffer buffer, ICollection`1<TFilterData> results)
public bool Remove(ActionMessageFilter filter)
public bool Remove(MessageFilter filter)
public bool Remove(KeyValuePair`2<MessageFilter, TFilterData> item)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool TryGetValue(MessageFilter filter, TFilterData& data)
public int get_Count()
public bool get_IsReadOnly()
public TFilterData get_Item(MessageFilter filter)
public void set_Item(MessageFilter filter, TFilterData value)
public ICollection`1<MessageFilter> get_Keys()
public ICollection`1<TFilterData> get_Values()
}
internal System.ServiceModel.Dispatcher.BaseMessagesFormatter : object {
private MessageDescriptionCollection messages
private bool isAsync
private ParameterInfo[] requestMethodParams
private ParameterInfo[] replyMethodParams
private List`1<Type> operation_known_types
public IEnumerable`1<Type> OperationKnownTypes
public void .ctor(MessageDescriptionCollection messages)
public void .ctor(OperationDescription desc)
public BaseMessagesFormatter Create(OperationDescription desc)
public IEnumerable`1<Type> get_OperationKnownTypes()
protected Message PartsToMessage(MessageDescription md, MessageVersion version, string action, Object[] parts)
protected Object[] MessageToParts(MessageDescription md, Message message)
protected Dictionary`2<MessageHeaderDescription, object> MessageToHeaderObjects(MessageDescription md, Message message)
public Message SerializeRequest(MessageVersion version, Object[] parameters)
public Message SerializeReply(MessageVersion version, Object[] parameters, object result)
private MessageHeader CreateHeader(MessageHeaderDescription mh, object value)
public void DeserializeRequest(Message message, Object[] parameters)
public object DeserializeReply(Message message, Object[] parameters)
private void PartsToMessageObject(MessageDescription md, Dictionary`2<MessageHeaderDescription, object> headers, Object[] parts, object msgObject)
private void MessageObjectToParts(MessageDescription md, object msgObject, Dictionary`2<MessageHeaderDescription, object> headers, Object[] parts)
internal bool HasReturnValue(MessageBodyDescription desc)
protected int ParamsOffset(MessageBodyDescription desc)
protected Object[] CreatePartsArray(MessageBodyDescription desc)
}
internal System.ServiceModel.Dispatcher.BaseRequestProcessor : object {
private HandlersChain initialize_handlers_chain
private HandlersChain process_handlers_chain
private HandlersChain error_handlers_chain
private HandlersChain finalize_handlers_chain
public HandlersChain InitializeChain
public HandlersChain ProcessingChain
public HandlersChain ErrorChain
public HandlersChain FinalizationChain
protected void ProcessRequest(MessageProcessingContext mrc)
public HandlersChain get_InitializeChain()
public HandlersChain get_ProcessingChain()
public HandlersChain get_ErrorChain()
public HandlersChain get_FinalizationChain()
}
internal System.ServiceModel.Dispatcher.BaseRequestProcessorHandler : object {
private BaseRequestProcessorHandler next
public BaseRequestProcessorHandler Next
public void ProcessRequestChain(MessageProcessingContext mrc)
public BaseRequestProcessorHandler get_Next()
public void set_Next(BaseRequestProcessorHandler value)
protected bool ProcessRequest(MessageProcessingContext mrc)
}
internal System.ServiceModel.Dispatcher.CallbackInstanceContextProvider : object {
private InstanceContext ctx
public void .ctor(InstanceContext context)
public InstanceContext GetExistingInstanceContext(Message message, IContextChannel channel)
public void InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel)
public bool IsIdle(InstanceContext instanceContext)
public void NotifyIdle(InstanceContextIdleCallback callback, InstanceContext instanceContext)
}
public System.ServiceModel.Dispatcher.ChannelDispatcher : ChannelDispatcherBase {
private ServiceHostBase host
private string binding_name
private Collection`1<IErrorHandler> error_handlers
private IChannelListener listener
internal IDefaultCommunicationTimeouts timeouts
private MessageVersion message_version
private bool receive_sync
private bool include_exception_detail_in_faults
private bool manual_addressing
private bool is_tx_receive
private int max_tx_batch_size
private SynchronizedCollection`1<IChannelInitializer> initializers
private IsolationLevel tx_isolation_level
private TimeSpan tx_timeout
private ServiceThrottle throttle
private Guid identifier
private ManualResetEvent async_event
private ListenerLoopManager loop_manager
private SynchronizedCollection`1<EndpointDispatcher> endpoints
private Action`1<TimeSpan> open_delegate
private Action`1<TimeSpan> close_delegate
public string BindingName
public SynchronizedCollection`1<IChannelInitializer> ChannelInitializers
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
public Collection`1<IErrorHandler> ErrorHandlers
public SynchronizedCollection`1<EndpointDispatcher> Endpoints
public bool IsTransactedAccept
public bool IsTransactedReceive
public bool ManualAddressing
public int MaxTransactedBatchSize
public ServiceHostBase Host
public IChannelListener Listener
public MessageVersion MessageVersion
public bool ReceiveSynchronously
public bool IncludeExceptionDetailInFaults
public ServiceThrottle ServiceThrottle
public IsolationLevel TransactionIsolationLevel
public TimeSpan TransactionTimeout
public bool AsynchronousTransactedAcceptEnabled
public int MaxPendingReceives
public bool ReceiveContextEnabled
public bool SendAsynchronously
public void .ctor(IChannelListener listener)
public void .ctor(IChannelListener listener, string bindingName)
public void .ctor(IChannelListener listener, string bindingName, IDefaultCommunicationTimeouts timeouts)
private void Init(IChannelListener listener, string bindingName, IDefaultCommunicationTimeouts timeouts)
internal EndpointDispatcher InitializeServiceEndpoint(Type serviceType, ServiceEndpoint se)
public string get_BindingName()
public SynchronizedCollection`1<IChannelInitializer> get_ChannelInitializers()
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
public Collection`1<IErrorHandler> get_ErrorHandlers()
public SynchronizedCollection`1<EndpointDispatcher> get_Endpoints()
public bool get_IsTransactedAccept()
public bool get_IsTransactedReceive()
public void set_IsTransactedReceive(bool value)
public bool get_ManualAddressing()
public void set_ManualAddressing(bool value)
public int get_MaxTransactedBatchSize()
public void set_MaxTransactedBatchSize(int value)
public ServiceHostBase get_Host()
public IChannelListener get_Listener()
public MessageVersion get_MessageVersion()
public void set_MessageVersion(MessageVersion value)
public bool get_ReceiveSynchronously()
public void set_ReceiveSynchronously(bool value)
public bool get_IncludeExceptionDetailInFaults()
public void set_IncludeExceptionDetailInFaults(bool value)
public ServiceThrottle get_ServiceThrottle()
public void set_ServiceThrottle(ServiceThrottle value)
public IsolationLevel get_TransactionIsolationLevel()
public void set_TransactionIsolationLevel(IsolationLevel value)
public TimeSpan get_TransactionTimeout()
public void set_TransactionTimeout(TimeSpan value)
protected internal void Attach(ServiceHostBase host)
public void CloseInput()
protected internal void Detach(ServiceHostBase host)
protected void OnAbort()
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnClose(TimeSpan timeout)
protected void OnClosed()
protected void OnEndClose(IAsyncResult result)
protected void OnEndOpen(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
protected void OnOpening()
protected void OnOpened()
private void StartLoop()
public bool get_AsynchronousTransactedAcceptEnabled()
public void set_AsynchronousTransactedAcceptEnabled(bool value)
public int get_MaxPendingReceives()
public void set_MaxPendingReceives(int value)
public bool get_ReceiveContextEnabled()
public void set_ReceiveContextEnabled(bool value)
public bool get_SendAsynchronously()
public void set_SendAsynchronously(bool value)
}
public System.ServiceModel.Dispatcher.ChannelDispatcherBase : CommunicationObject {
private bool <IsMex>k__BackingField
internal bool IsMex
public IChannelListener Listener
public ServiceHostBase Host
internal bool get_IsMex()
internal void set_IsMex(bool value)
public IChannelListener get_Listener()
public ServiceHostBase get_Host()
protected internal void Attach(ServiceHostBase host)
public void CloseInput()
protected internal void Detach(ServiceHostBase host)
}
public System.ServiceModel.Dispatcher.ChannelDispatcherCollection : SynchronizedCollection`1<ChannelDispatcherBase> {
private ServiceHostBase _service
internal void .ctor(ServiceHostBase service)
protected void ClearItems()
protected void InsertItem(int index, ChannelDispatcherBase item)
protected void RemoveItem(int index)
protected void SetItem(int index, ChannelDispatcherBase item)
}
public System.ServiceModel.Dispatcher.ClientOperation : object {
private ClientRuntime parent
private string name
private string action
private string reply_action
private MethodInfo sync_method
private MethodInfo begin_method
private MethodInfo end_method
private bool deserialize_reply
private bool serialize_request
private bool is_initiating
private bool is_terminating
private bool is_oneway
private IClientMessageFormatter formatter
private SynchronizedCollection`1<IParameterInspector> inspectors
private SynchronizedCollection`1<FaultContractInfo> fault_contract_infos
public string Action
public string ReplyAction
public MethodInfo BeginMethod
public bool DeserializeReply
public MethodInfo EndMethod
public SynchronizedCollection`1<FaultContractInfo> FaultContractInfos
public IClientMessageFormatter Formatter
public bool IsInitiating
public bool IsOneWay
public bool IsTerminating
public string Name
public SynchronizedCollection`1<IParameterInspector> ParameterInspectors
public ClientRuntime Parent
public bool SerializeRequest
public MethodInfo SyncMethod
public ICollection`1<IParameterInspector> ClientParameterInspectors
public MethodInfo TaskMethod
public Type TaskTResult
public void .ctor(ClientRuntime parent, string name, string action)
public void .ctor(ClientRuntime parent, string name, string action, string replyAction)
public string get_Action()
public string get_ReplyAction()
public MethodInfo get_BeginMethod()
public void set_BeginMethod(MethodInfo value)
public bool get_DeserializeReply()
public void set_DeserializeReply(bool value)
public MethodInfo get_EndMethod()
public void set_EndMethod(MethodInfo value)
public SynchronizedCollection`1<FaultContractInfo> get_FaultContractInfos()
public IClientMessageFormatter get_Formatter()
public void set_Formatter(IClientMessageFormatter value)
public bool get_IsInitiating()
public void set_IsInitiating(bool value)
public bool get_IsOneWay()
public void set_IsOneWay(bool value)
public bool get_IsTerminating()
public void set_IsTerminating(bool value)
public string get_Name()
public SynchronizedCollection`1<IParameterInspector> get_ParameterInspectors()
public ClientRuntime get_Parent()
public bool get_SerializeRequest()
public void set_SerializeRequest(bool value)
public MethodInfo get_SyncMethod()
public void set_SyncMethod(MethodInfo value)
private void ThrowIfOpened()
public ICollection`1<IParameterInspector> get_ClientParameterInspectors()
public MethodInfo get_TaskMethod()
public void set_TaskMethod(MethodInfo value)
public Type get_TaskTResult()
public void set_TaskTResult(Type value)
}
public System.ServiceModel.Dispatcher.ClientOperationCompatBase : object {
public IList`1<IParameterInspector> ParameterInspectors
public IList`1<IParameterInspector> get_ParameterInspectors()
}
public System.ServiceModel.Dispatcher.ClientRuntime : object {
private SynchronizedCollection`1<IChannelInitializer> channel_initializers
private SynchronizedCollection`1<IInteractiveChannelInitializer> interactive_channel_initializers
private SynchronizedCollection`1<IClientMessageInspector> inspectors
private ClientOperationCollection operations
private IClientOperationSelector selector
private Uri via
private bool validate
private bool manual_addressing
private string contract_name
private string contract_ns
private int max_fault_size
private Type <CallbackClientType>k__BackingField
private Type <ContractClientType>k__BackingField
private DispatchRuntime <CallbackDispatchRuntime>k__BackingField
public Type CallbackClientType
public SynchronizedCollection`1<IChannelInitializer> ChannelInitializers
public SynchronizedCollection`1<IInteractiveChannelInitializer> InteractiveChannelInitializers
public string ContractName
public string ContractNamespace
public Type ContractClientType
public DispatchRuntime CallbackDispatchRuntime
public SynchronizedCollection`1<IClientMessageInspector> MessageInspectors
public SynchronizedKeyedCollection`2<string, ClientOperation> Operations
public ICollection`1<ClientOperation> ClientOperations
public ICollection`1<IClientMessageInspector> ClientMessageInspectors
public bool ManualAddressing
public int MaxFaultSize
public IClientOperationSelector OperationSelector
public bool ValidateMustUnderstand
public Uri Via
public ClientOperation UnhandledClientOperation
public bool MessageVersionNoneFaultsEnabled
internal void .ctor(string name, string ns, object callbackDispatchRuntime)
public Type get_CallbackClientType()
public void set_CallbackClientType(Type value)
public SynchronizedCollection`1<IChannelInitializer> get_ChannelInitializers()
public SynchronizedCollection`1<IInteractiveChannelInitializer> get_InteractiveChannelInitializers()
public string get_ContractName()
public string get_ContractNamespace()
public Type get_ContractClientType()
public void set_ContractClientType(Type value)
public DispatchRuntime get_CallbackDispatchRuntime()
internal void set_CallbackDispatchRuntime(DispatchRuntime value)
public SynchronizedCollection`1<IClientMessageInspector> get_MessageInspectors()
public SynchronizedKeyedCollection`2<string, ClientOperation> get_Operations()
public ICollection`1<ClientOperation> get_ClientOperations()
public ICollection`1<IClientMessageInspector> get_ClientMessageInspectors()
public bool get_ManualAddressing()
public void set_ManualAddressing(bool value)
public int get_MaxFaultSize()
public void set_MaxFaultSize(int value)
public IClientOperationSelector get_OperationSelector()
public void set_OperationSelector(IClientOperationSelector value)
public bool get_ValidateMustUnderstand()
public void set_ValidateMustUnderstand(bool value)
public Uri get_Via()
public void set_Via(Uri value)
public ClientOperation get_UnhandledClientOperation()
public bool get_MessageVersionNoneFaultsEnabled()
public void set_MessageVersionNoneFaultsEnabled(bool value)
}
public System.ServiceModel.Dispatcher.ClientRuntimeCompatBase : object {
public IList`1<IClientMessageInspector> MessageInspectors
public KeyedCollection`2<string, ClientOperation> Operations
public IList`1<IClientMessageInspector> get_MessageInspectors()
public KeyedCollection`2<string, ClientOperation> get_Operations()
}
internal System.ServiceModel.Dispatcher.DataContractMessagesFormatter : BaseMessagesFormatter {
private DataContractFormatAttribute attr
private DataContractSerializerOperationBehavior serializerBehavior
private Dictionary`2<MessagePartDescription, XmlObjectSerializer> serializers
public void .ctor(OperationDescription desc, DataContractFormatAttribute attr)
public void .ctor(MessageDescriptionCollection messages, DataContractFormatAttribute attr)
protected Message PartsToMessage(MessageDescription md, MessageVersion version, string action, Object[] parts)
protected Dictionary`2<MessageHeaderDescription, object> MessageToHeaderObjects(MessageDescription md, Message message)
protected Object[] MessageToParts(MessageDescription md, Message message)
private object ReadMessagePart(MessagePartDescription part, XmlDictionaryReader r)
private XmlObjectSerializer GetSerializer(MessagePartDescription partDesc)
private object ReadHeaderObject(Type type, XmlObjectSerializer serializer, XmlDictionaryReader reader)
}
internal System.ServiceModel.Dispatcher.DataContractSerializerServiceBehavior : object {
private bool <IgnoreExtensionDataObject>k__BackingField
private int <MaxItemsInObjectGraph>k__BackingField
public bool IgnoreExtensionDataObject
public int MaxItemsInObjectGraph
public bool get_IgnoreExtensionDataObject()
public void set_IgnoreExtensionDataObject(bool value)
public int get_MaxItemsInObjectGraph()
public void set_MaxItemsInObjectGraph(int value)
public void .ctor(bool ignoreExtensionDataObject, int maxItemsInObjectGraph)
private void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher dispatcher)
private void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime behavior)
private void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint)
}
internal System.ServiceModel.Dispatcher.DefaultInstanceContextProvider : object {
public InstanceContext GetExistingInstanceContext(Message message, IContextChannel channel)
public void InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel)
public bool IsIdle(InstanceContext instanceContext)
public void NotifyIdle(InstanceContextIdleCallback callback, InstanceContext instanceContext)
}
internal System.ServiceModel.Dispatcher.DefaultOperationInvoker : object {
private OperationDescription od
private ParameterInfo[] in_params
private ParameterInfo[] out_params
private bool is_synchronous
public bool IsSynchronous
public void .ctor(OperationDescription od)
public bool get_IsSynchronous()
public Object[] AllocateInputs()
public object Invoke(object instance, Object[] inputs, Object[]& outputs)
public IAsyncResult InvokeBegin(object instance, Object[] inputs, AsyncCallback callback, object state)
public object InvokeEnd(object instance, Object[]& outputs, IAsyncResult result)
}
public System.ServiceModel.Dispatcher.DispatchOperation : object {
private DispatchRuntime parent
private string name
private string action
private string reply_action
private bool serialize_reply
private bool deserialize_request
private bool is_oneway
private bool is_terminating
private bool release_after_call
private bool release_before_call
private bool tx_auto_complete
private bool tx_required
private bool auto_dispose_params
private IDispatchMessageFormatter formatter
private ImpersonationOption impersonation
private IOperationInvoker invoker
private SynchronizedCollection`1<IParameterInspector> inspectors
private SynchronizedCollection`1<FaultContractInfo> fault_contract_infos
private SynchronizedCollection`1<ICallContextInitializer> ctx_initializers
public string Action
public SynchronizedCollection`1<ICallContextInitializer> CallContextInitializers
public SynchronizedCollection`1<FaultContractInfo> FaultContractInfos
public ImpersonationOption Impersonation
public IOperationInvoker Invoker
public bool IsTerminating
public SynchronizedCollection`1<IParameterInspector> ParameterInspectors
public bool ReleaseInstanceAfterCall
public bool ReleaseInstanceBeforeCall
public string ReplyAction
public bool TransactionAutoComplete
public bool TransactionRequired
public bool AutoDisposeParameters
public bool DeserializeRequest
public IDispatchMessageFormatter Formatter
public bool IsOneWay
public string Name
public DispatchRuntime Parent
public bool SerializeReply
public bool IsInsideTransactedReceiveScope
public void .ctor(DispatchRuntime parent, string name, string action)
public void .ctor(DispatchRuntime parent, string name, string action, string replyAction)
public string get_Action()
public SynchronizedCollection`1<ICallContextInitializer> get_CallContextInitializers()
public SynchronizedCollection`1<FaultContractInfo> get_FaultContractInfos()
public ImpersonationOption get_Impersonation()
public void set_Impersonation(ImpersonationOption value)
public IOperationInvoker get_Invoker()
public void set_Invoker(IOperationInvoker value)
public bool get_IsTerminating()
public void set_IsTerminating(bool value)
public SynchronizedCollection`1<IParameterInspector> get_ParameterInspectors()
public bool get_ReleaseInstanceAfterCall()
public void set_ReleaseInstanceAfterCall(bool value)
public bool get_ReleaseInstanceBeforeCall()
public void set_ReleaseInstanceBeforeCall(bool value)
public string get_ReplyAction()
public bool get_TransactionAutoComplete()
public void set_TransactionAutoComplete(bool value)
public bool get_TransactionRequired()
public void set_TransactionRequired(bool value)
public bool get_AutoDisposeParameters()
public void set_AutoDisposeParameters(bool value)
public bool get_DeserializeRequest()
public void set_DeserializeRequest(bool value)
public IDispatchMessageFormatter get_Formatter()
public void set_Formatter(IDispatchMessageFormatter value)
public bool get_IsOneWay()
public string get_Name()
public DispatchRuntime get_Parent()
public bool get_SerializeReply()
public void set_SerializeReply(bool value)
private void ThrowIfOpened()
public bool get_IsInsideTransactedReceiveScope()
public void set_IsInsideTransactedReceiveScope(bool value)
}
public System.ServiceModel.Dispatcher.DispatchRuntime : object {
private DispatchOperationCollection operations
private AuditLogLocation <SecurityAuditLogLocation>k__BackingField
private bool <AutomaticInputSessionShutdown>k__BackingField
private ConcurrencyMode <ConcurrencyMode>k__BackingField
private EndpointDispatcher <EndpointDispatcher>k__BackingField
private ClientRuntime <CallbackClientRuntime>k__BackingField
private ReadOnlyCollection`1<IAuthorizationPolicy> <ExternalAuthorizationPolicies>k__BackingField
private bool <IgnoreTransactionMessageProperty>k__BackingField
private bool <ImpersonateCallerForAllOperations>k__BackingField
private SynchronizedCollection`1<IInputSessionShutdown> <InputSessionShutdownHandlers>k__BackingField
private SynchronizedCollection`1<IInstanceContextInitializer> <InstanceContextInitializers>k__BackingField
private IInstanceProvider <InstanceProvider>k__BackingField
private IInstanceContextProvider <InstanceContextProvider>k__BackingField
private AuditLevel <MessageAuthenticationAuditLevel>k__BackingField
private SynchronizedCollection`1<IDispatchMessageInspector> <MessageInspectors>k__BackingField
private IDispatchOperationSelector <OperationSelector>k__BackingField
private PrincipalPermissionMode <PrincipalPermissionMode>k__BackingField
private bool <ReleaseServiceInstanceOnTransactionComplete>k__BackingField
private RoleProvider <RoleProvider>k__BackingField
private AuditLevel <ServiceAuthorizationAuditLevel>k__BackingField
private ServiceAuthorizationManager <ServiceAuthorizationManager>k__BackingField
private InstanceContext <SingletonInstanceContext>k__BackingField
private bool <SuppressAuditFailure>k__BackingField
private SynchronizationContext <SynchronizationContext>k__BackingField
private bool <TransactionAutoCompleteOnSessionClose>k__BackingField
private Type <Type>k__BackingField
private bool <ValidateMustUnderstand>k__BackingField
private DispatchOperation <UnhandledDispatchOperation>k__BackingField
public AuditLogLocation SecurityAuditLogLocation
public bool AutomaticInputSessionShutdown
public ChannelDispatcher ChannelDispatcher
public ConcurrencyMode ConcurrencyMode
public EndpointDispatcher EndpointDispatcher
public ClientRuntime CallbackClientRuntime
public ReadOnlyCollection`1<IAuthorizationPolicy> ExternalAuthorizationPolicies
public bool IgnoreTransactionMessageProperty
public bool ImpersonateCallerForAllOperations
public SynchronizedCollection`1<IInputSessionShutdown> InputSessionShutdownHandlers
public SynchronizedCollection`1<IInstanceContextInitializer> InstanceContextInitializers
public IInstanceProvider InstanceProvider
public IInstanceContextProvider InstanceContextProvider
public AuditLevel MessageAuthenticationAuditLevel
public SynchronizedCollection`1<IDispatchMessageInspector> MessageInspectors
public SynchronizedKeyedCollection`2<string, DispatchOperation> Operations
public IDispatchOperationSelector OperationSelector
public PrincipalPermissionMode PrincipalPermissionMode
public bool ReleaseServiceInstanceOnTransactionComplete
public RoleProvider RoleProvider
public AuditLevel ServiceAuthorizationAuditLevel
public ServiceAuthorizationManager ServiceAuthorizationManager
public InstanceContext SingletonInstanceContext
public bool SuppressAuditFailure
public SynchronizationContext SynchronizationContext
public bool TransactionAutoCompleteOnSessionClose
public Type Type
public bool ValidateMustUnderstand
public DispatchOperation UnhandledDispatchOperation
public bool EnsureOrderedDispatch
public bool ImpersonateOnSerializingReply
public bool PreserveMessage
public ServiceAuthenticationManager ServiceAuthenticationManager
internal void .ctor(EndpointDispatcher dispatcher, ClientRuntime callbackClientRuntime)
public AuditLogLocation get_SecurityAuditLogLocation()
public void set_SecurityAuditLogLocation(AuditLogLocation value)
public bool get_AutomaticInputSessionShutdown()
public void set_AutomaticInputSessionShutdown(bool value)
public ChannelDispatcher get_ChannelDispatcher()
public ConcurrencyMode get_ConcurrencyMode()
public void set_ConcurrencyMode(ConcurrencyMode value)
public EndpointDispatcher get_EndpointDispatcher()
private void set_EndpointDispatcher(EndpointDispatcher value)
public ClientRuntime get_CallbackClientRuntime()
internal void set_CallbackClientRuntime(ClientRuntime value)
public ReadOnlyCollection`1<IAuthorizationPolicy> get_ExternalAuthorizationPolicies()
public void set_ExternalAuthorizationPolicies(ReadOnlyCollection`1<IAuthorizationPolicy> value)
public bool get_IgnoreTransactionMessageProperty()
public void set_IgnoreTransactionMessageProperty(bool value)
public bool get_ImpersonateCallerForAllOperations()
public void set_ImpersonateCallerForAllOperations(bool value)
public SynchronizedCollection`1<IInputSessionShutdown> get_InputSessionShutdownHandlers()
private void set_InputSessionShutdownHandlers(SynchronizedCollection`1<IInputSessionShutdown> value)
public SynchronizedCollection`1<IInstanceContextInitializer> get_InstanceContextInitializers()
private void set_InstanceContextInitializers(SynchronizedCollection`1<IInstanceContextInitializer> value)
public IInstanceProvider get_InstanceProvider()
public void set_InstanceProvider(IInstanceProvider value)
public IInstanceContextProvider get_InstanceContextProvider()
public void set_InstanceContextProvider(IInstanceContextProvider value)
public AuditLevel get_MessageAuthenticationAuditLevel()
public void set_MessageAuthenticationAuditLevel(AuditLevel value)
public SynchronizedCollection`1<IDispatchMessageInspector> get_MessageInspectors()
private void set_MessageInspectors(SynchronizedCollection`1<IDispatchMessageInspector> value)
public SynchronizedKeyedCollection`2<string, DispatchOperation> get_Operations()
public IDispatchOperationSelector get_OperationSelector()
public void set_OperationSelector(IDispatchOperationSelector value)
public PrincipalPermissionMode get_PrincipalPermissionMode()
public void set_PrincipalPermissionMode(PrincipalPermissionMode value)
public bool get_ReleaseServiceInstanceOnTransactionComplete()
public void set_ReleaseServiceInstanceOnTransactionComplete(bool value)
public RoleProvider get_RoleProvider()
public void set_RoleProvider(RoleProvider value)
public AuditLevel get_ServiceAuthorizationAuditLevel()
public void set_ServiceAuthorizationAuditLevel(AuditLevel value)
public ServiceAuthorizationManager get_ServiceAuthorizationManager()
public void set_ServiceAuthorizationManager(ServiceAuthorizationManager value)
public InstanceContext get_SingletonInstanceContext()
public void set_SingletonInstanceContext(InstanceContext value)
public bool get_SuppressAuditFailure()
public void set_SuppressAuditFailure(bool value)
public SynchronizationContext get_SynchronizationContext()
public void set_SynchronizationContext(SynchronizationContext value)
public bool get_TransactionAutoCompleteOnSessionClose()
public void set_TransactionAutoCompleteOnSessionClose(bool value)
public Type get_Type()
public void set_Type(Type value)
public bool get_ValidateMustUnderstand()
public void set_ValidateMustUnderstand(bool value)
public DispatchOperation get_UnhandledDispatchOperation()
public void set_UnhandledDispatchOperation(DispatchOperation value)
public bool get_EnsureOrderedDispatch()
public void set_EnsureOrderedDispatch(bool value)
public bool get_ImpersonateOnSerializingReply()
public void set_ImpersonateOnSerializingReply(bool value)
public bool get_PreserveMessage()
public void set_PreserveMessage(bool value)
public ServiceAuthenticationManager get_ServiceAuthenticationManager()
public void set_ServiceAuthenticationManager(ServiceAuthenticationManager value)
}
public System.ServiceModel.Dispatcher.EndpointAddressMessageFilter : MessageFilter {
private EndpointAddress address
private bool cmp_host
public EndpointAddress Address
public bool IncludeHostNameInComparison
public void .ctor(EndpointAddress address)
public void .ctor(EndpointAddress address, bool includeHostNameInComparison)
public EndpointAddress get_Address()
public bool get_IncludeHostNameInComparison()
protected internal IMessageFilterTable`1<FilterData> CreateFilterTable()
public bool Match(Message message)
public bool Match(MessageBuffer messageBuffer)
}
internal System.ServiceModel.Dispatcher.EndpointAddressMessageFilterTable`1 : object {
private Dictionary`2<MessageFilter, TFilterData> dict
public TFilterData Item
public int Count
public bool IsReadOnly
public ICollection`1<MessageFilter> Keys
public ICollection`1<TFilterData> Values
public TFilterData get_Item(MessageFilter key)
public void set_Item(MessageFilter key, TFilterData value)
public int get_Count()
public bool get_IsReadOnly()
public ICollection`1<MessageFilter> get_Keys()
public ICollection`1<TFilterData> get_Values()
public void Add(KeyValuePair`2<MessageFilter, TFilterData> item)
public void Add(EndpointAddressMessageFilter filter, TFilterData data)
public void Add(MessageFilter filter, TFilterData data)
public void Clear()
public bool Contains(KeyValuePair`2<MessageFilter, TFilterData> item)
public bool ContainsKey(MessageFilter key)
public void CopyTo(KeyValuePair`2[] array, int index)
public IEnumerator`1<KeyValuePair`2<MessageFilter, TFilterData>> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool GetMatchingFilter(Message message, MessageFilter& result)
public bool GetMatchingFilter(MessageBuffer buffer, MessageFilter& result)
public bool GetMatchingFilters(Message message, ICollection`1<MessageFilter> results)
public bool GetMatchingFilters(MessageBuffer buffer, ICollection`1<MessageFilter> results)
public bool GetMatchingValue(Message message, TFilterData& data)
public bool GetMatchingValue(MessageBuffer buffer, TFilterData& data)
public bool GetMatchingValues(Message message, ICollection`1<TFilterData> results)
public bool GetMatchingValues(MessageBuffer buffer, ICollection`1<TFilterData> results)
public bool Remove(KeyValuePair`2<MessageFilter, TFilterData> item)
public bool Remove(EndpointAddressMessageFilter filter)
public bool Remove(MessageFilter filter)
public bool TryGetValue(MessageFilter filter, TFilterData& filterData)
}
public System.ServiceModel.Dispatcher.EndpointDispatcher : object {
private EndpointAddress address
private string contract_name
private string contract_ns
private ChannelDispatcher channel_dispatcher
private MessageFilter address_filter
private MessageFilter contract_filter
private int filter_priority
private DispatchRuntime dispatch_runtime
private bool <IsSystemEndpoint>k__BackingField
public DispatchRuntime DispatchRuntime
public string ContractName
public string ContractNamespace
public ChannelDispatcher ChannelDispatcher
public MessageFilter AddressFilter
public MessageFilter ContractFilter
public EndpointAddress EndpointAddress
public int FilterPriority
public bool IsSystemEndpoint
public void .ctor(EndpointAddress address, string contractName, string contractNamespace)
public DispatchRuntime get_DispatchRuntime()
public string get_ContractName()
public string get_ContractNamespace()
public ChannelDispatcher get_ChannelDispatcher()
internal void set_ChannelDispatcher(ChannelDispatcher value)
public MessageFilter get_AddressFilter()
public void set_AddressFilter(MessageFilter value)
public MessageFilter get_ContractFilter()
public void set_ContractFilter(MessageFilter value)
public EndpointAddress get_EndpointAddress()
public int get_FilterPriority()
public void set_FilterPriority(int value)
public bool get_IsSystemEndpoint()
private void set_IsSystemEndpoint(bool value)
internal void InitializeServiceEndpoint(bool isCallback, Type serviceType, ServiceEndpoint se)
private void PopulateDispatchOperation(DispatchRuntime db, OperationDescription od)
private MessageFilter GetContractFilter(ContractDescription cd, bool isCallback)
public void .ctor(EndpointAddress address, string contractName, string contractNamespace, bool isSystemEndpoint)
}
internal System.ServiceModel.Dispatcher.ErrorProcessingHandler : BaseRequestProcessorHandler {
private IDuplexChannel duplex
public void .ctor(IChannel channel)
protected bool ProcessRequest(MessageProcessingContext mrc)
}
public System.ServiceModel.Dispatcher.ExceptionHandler : object {
private ExceptionHandler async_handler
private ExceptionHandler always_handler
private ExceptionHandler transport_handler
public ExceptionHandler AlwaysHandle
public ExceptionHandler AsynchronousThreadExceptionHandler
public ExceptionHandler TransportExceptionHandler
public ExceptionHandler get_AlwaysHandle()
public ExceptionHandler get_AsynchronousThreadExceptionHandler()
public void set_AsynchronousThreadExceptionHandler(ExceptionHandler value)
public ExceptionHandler get_TransportExceptionHandler()
public void set_TransportExceptionHandler(ExceptionHandler value)
public bool HandleException(Exception exception)
}
public System.ServiceModel.Dispatcher.FaultContractInfo : object {
private DataContractSerializer serializer
private string <Action>k__BackingField
private Type <Detail>k__BackingField
public string Action
public Type Detail
internal DataContractSerializer Serializer
public void .ctor(string action, Type detail)
public string get_Action()
private void set_Action(string value)
public Type get_Detail()
private void set_Detail(Type value)
internal DataContractSerializer get_Serializer()
}
public System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException : InvalidBodyAccessException {
private Collection`1<MessageFilter> filters
public Collection`1<MessageFilter> Filters
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Collection`1<MessageFilter> filters)
public void .ctor(string message, Exception innerException, Collection`1<MessageFilter> filters)
public Collection`1<MessageFilter> get_Filters()
}
internal System.ServiceModel.Dispatcher.FinalizeProcessingHandler : BaseRequestProcessorHandler {
protected bool ProcessRequest(MessageProcessingContext mrc)
private void FinishRequest(MessageProcessingContext mrc)
}
internal System.ServiceModel.Dispatcher.HandlersChain : object {
private BaseRequestProcessorHandler chain
public void ProcessRequestChain(MessageProcessingContext mrc)
public HandlersChain AddHandler(BaseRequestProcessorHandler handler)
}
public System.ServiceModel.Dispatcher.ICallContextInitializer {
public object BeforeInvoke(InstanceContext instanceContext, IClientChannel channel, Message message)
public void AfterInvoke(object correlationState)
}
internal System.ServiceModel.Dispatcher.IChannelDispatcherBoundListener {
public ChannelDispatcher ChannelDispatcher
public ChannelDispatcher get_ChannelDispatcher()
public void set_ChannelDispatcher(ChannelDispatcher value)
}
public System.ServiceModel.Dispatcher.IChannelInitializer {
public void Initialize(IClientChannel channel)
}
public System.ServiceModel.Dispatcher.IClientMessageFormatter {
public object DeserializeReply(Message message, Object[] parameters)
public Message SerializeRequest(MessageVersion messageVersion, Object[] parameters)
}
public System.ServiceModel.Dispatcher.IClientMessageInspector {
public void AfterReceiveReply(Message& reply, object correlationState)
public object BeforeSendRequest(Message& request, IClientChannel channel)
}
public System.ServiceModel.Dispatcher.IClientOperationSelector {
public bool AreParametersRequiredForSelection
public bool get_AreParametersRequiredForSelection()
public string SelectOperation(MethodBase method, Object[] parameters)
}
public System.ServiceModel.Dispatcher.IDispatchMessageFormatter {
public void DeserializeRequest(Message message, Object[] parameters)
public Message SerializeReply(MessageVersion messageVersion, Object[] parameters, object result)
}
public System.ServiceModel.Dispatcher.IDispatchMessageInspector {
public object AfterReceiveRequest(Message& request, IClientChannel channel, InstanceContext instanceContext)
public void BeforeSendReply(Message& reply, object correlationState)
}
public System.ServiceModel.Dispatcher.IDispatchOperationSelector {
public string SelectOperation(Message& message)
}
public System.ServiceModel.Dispatcher.IErrorHandler {
public bool HandleError(Exception error)
public void ProvideFault(Exception error, MessageVersion version, Message& fault)
}
public System.ServiceModel.Dispatcher.IInputSessionShutdown {
public void ChannelFaulted(IDuplexContextChannel channel)
public void DoneReceiving(IDuplexContextChannel channel)
}
public System.ServiceModel.Dispatcher.IInstanceContextInitializer {
public void Initialize(InstanceContext instanceContext, Message message)
}
public System.ServiceModel.Dispatcher.IInstanceContextProvider {
public InstanceContext GetExistingInstanceContext(Message message, IContextChannel channel)
public void InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel)
public bool IsIdle(InstanceContext instanceContext)
public void NotifyIdle(InstanceContextIdleCallback callback, InstanceContext instanceContext)
}
public System.ServiceModel.Dispatcher.IInstanceProvider {
public object GetInstance(InstanceContext instanceContext)
public object GetInstance(InstanceContext instanceContext, Message message)
public void ReleaseInstance(InstanceContext instanceContext, object instance)
}
public System.ServiceModel.Dispatcher.IInteractiveChannelInitializer {
public IAsyncResult BeginDisplayInitializationUI(IClientChannel channel, AsyncCallback callback, object state)
public void EndDisplayInitializationUI(IAsyncResult result)
}
public System.ServiceModel.Dispatcher.IMessageFilterTable`1 {
public bool GetMatchingFilter(Message message, MessageFilter& filter)
public bool GetMatchingFilter(MessageBuffer messageBuffer, MessageFilter& filter)
public bool GetMatchingFilters(Message message, ICollection`1<MessageFilter> results)
public bool GetMatchingFilters(MessageBuffer messageBuffer, ICollection`1<MessageFilter> results)
public bool GetMatchingValue(Message message, TFilterData& value)
public bool GetMatchingValue(MessageBuffer messageBuffer, TFilterData& value)
public bool GetMatchingValues(Message message, ICollection`1<TFilterData> results)
public bool GetMatchingValues(MessageBuffer messageBuffer, ICollection`1<TFilterData> results)
}
internal System.ServiceModel.Dispatcher.InitializingHandler : BaseRequestProcessorHandler {
protected bool ProcessRequest(MessageProcessingContext mrc)
private InstanceContext CreateInstanceContext(MessageProcessingContext mrc)
}
internal System.ServiceModel.Dispatcher.InputOrReplyRequestProcessor : BaseRequestProcessor {
private DispatchRuntime dispatch_runtime
private IChannel reply_or_input
private IContextChannel context_channel
public void .ctor(DispatchRuntime runtime, IChannel replyOrInput)
private void Init(DispatchRuntime runtime, IChannel replyOrInput)
public void ProcessInput(Message message)
public void ProcessReply(RequestContext rc)
private OperationContext CreateOperationContext(Message incoming)
}
public System.ServiceModel.Dispatcher.InstanceContextIdleCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(InstanceContext instanceContext)
public IAsyncResult BeginInvoke(InstanceContext instanceContext, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.ServiceModel.Dispatcher.InstanceManager : object {
private DispatchRuntime dispatch_runtime
internal IInstanceContextProvider InstanceContextProvider
internal void .ctor(DispatchRuntime runtime)
internal void Initialize(InstanceContext iCtx)
internal object GetServiceInstance(InstanceContext ctx, Message m, Boolean& createdByUserProvider)
internal IInstanceContextProvider get_InstanceContextProvider()
internal void ReleaseServiceInstance(InstanceContext ctx, object impl)
}
public System.ServiceModel.Dispatcher.InvalidBodyAccessException : SystemException {
protected void .ctor(string message)
protected void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.Dispatcher.IOperationInvoker {
public bool IsSynchronous
public bool get_IsSynchronous()
public Object[] AllocateInputs()
public object Invoke(object instance, Object[] inputs, Object[]& outputs)
public IAsyncResult InvokeBegin(object instance, Object[] inputs, AsyncCallback callback, object state)
public object InvokeEnd(object instance, Object[]& outputs, IAsyncResult result)
}
public System.ServiceModel.Dispatcher.IParameterInspector {
public void AfterCall(string operationName, Object[] outputs, object returnValue, object correlationState)
public object BeforeCall(string operationName, Object[] inputs)
}
internal System.ServiceModel.Dispatcher.ListenerLoopManager : object {
private ChannelDispatcher owner
private AutoResetEvent throttle_wait_handle
private AutoResetEvent creator_handle
private ManualResetEvent stop_handle
private bool loop
private Thread loop_thread
private DateTime close_started
private TimeSpan close_timeout
private Func`1<IAsyncResult> channel_acceptor
private List`1<IChannel> channels
private AddressFilterMode address_filter_mode
private List`1<ISession> sessions
public void .ctor(ChannelDispatcher owner)
public void Setup(TimeSpan openTimeout)
public void Start()
private Func`1<IAsyncResult> CreateAcceptor(IChannelListener l)
private void SetupChannelAcceptor()
public void Stop(TimeSpan timeout)
private void AddChannel(IChannel ch)
private void RemoveChannel(IChannel ch)
public void CloseInput()
private void Loop()
private void LoopCore()
private void ChannelAccepted(IChannel ch)
private void ProcessRequestOrInput(IChannel ch)
private void TryReceiveRequestDone(IAsyncResult result)
private void TryReceiveDone(IAsyncResult result)
private void ProcessRequest(IReplyChannel reply, RequestContext rc)
private bool ProcessErrorWithHandlers(IChannel ch, Exception ex, Message& res)
private void ProcessInput(IInputChannel input, Message message)
private EndpointDispatcher FindEndpointDispatcher(Message message)
}
public System.ServiceModel.Dispatcher.MatchAllMessageFilter : MessageFilter {
public bool Match(Message message)
public bool Match(MessageBuffer messageBuffer)
}
public System.ServiceModel.Dispatcher.MatchNoneMessageFilter : MessageFilter {
public bool Match(Message message)
public bool Match(MessageBuffer messageBuffer)
}
public System.ServiceModel.Dispatcher.MessageFilter : object {
protected internal IMessageFilterTable`1<FilterData> CreateFilterTable()
public bool Match(Message message)
public bool Match(MessageBuffer buffer)
}
public System.ServiceModel.Dispatcher.MessageFilterException : CommunicationException {
private Collection`1<MessageFilter> filters
public Collection`1<MessageFilter> Filters
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Collection`1<MessageFilter> filters)
public void .ctor(string message, Exception innerException, Collection`1<MessageFilter> filters)
public Collection`1<MessageFilter> get_Filters()
}
public System.ServiceModel.Dispatcher.MessageFilterTable`1 : object {
private int default_priority
private Dictionary`2<MessageFilter, TFilterData> table
private Dictionary`2<MessageFilter, int> priority_list
public int Count
public int DefaultPriority
public bool IsReadOnly
public TFilterData Item
public ICollection`1<MessageFilter> Keys
public ICollection`1<TFilterData> Values
public void .ctor(int defaultPriority)
public void Add(KeyValuePair`2<MessageFilter, TFilterData> item)
public void Add(MessageFilter filter, TFilterData data)
public void Add(MessageFilter filter, TFilterData data, int priority)
public void Clear()
public bool Contains(KeyValuePair`2<MessageFilter, TFilterData> item)
public bool ContainsKey(MessageFilter filter)
public void CopyTo(KeyValuePair`2[] array, int arrayIndex)
protected IMessageFilterTable`1<TFilterData> CreateFilterTable(MessageFilter filter)
public IEnumerator`1<KeyValuePair`2<MessageFilter, TFilterData>> GetEnumerator()
public int GetPriority(MessageFilter filter)
public bool GetMatchingFilter(Message message, MessageFilter& filter)
public bool GetMatchingFilter(MessageBuffer buffer, MessageFilter& filter)
public bool GetMatchingFilters(Message message, ICollection`1<MessageFilter> results)
public bool GetMatchingFilters(MessageBuffer buffer, ICollection`1<MessageFilter> results)
public bool GetMatchingValue(Message message, TFilterData& data)
public bool GetMatchingValue(MessageBuffer buffer, TFilterData& data)
public bool GetMatchingValues(Message message, ICollection`1<TFilterData> results)
public bool GetMatchingValues(MessageBuffer buffer, ICollection`1<TFilterData> results)
public bool Remove(MessageFilter filter)
public bool Remove(KeyValuePair`2<MessageFilter, TFilterData> item)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool TryGetValue(MessageFilter filter, TFilterData& data)
public int get_Count()
public int get_DefaultPriority()
public void set_DefaultPriority(int value)
public bool get_IsReadOnly()
public TFilterData get_Item(MessageFilter filter)
public void set_Item(MessageFilter filter, TFilterData value)
public ICollection`1<MessageFilter> get_Keys()
public ICollection`1<TFilterData> get_Values()
}
internal System.ServiceModel.Dispatcher.MessageProcessingContext : object {
private OperationContext operation_context
private RequestContext request_context
private Message incoming_message
private Message reply_message
private InstanceContext instance_context
private Exception processingException
private DispatchOperation operation
private UserEventsHandler user_events_handler
private IChannel reply_or_input
public IChannel Channel
public DispatchOperation Operation
public Exception ProcessingException
public Message ReplyMessage
public InstanceContext InstanceContext
public Message IncomingMessage
public RequestContext RequestContext
public OperationContext OperationContext
public UserEventsHandler EventsHandler
public void .ctor(OperationContext opCtx, IChannel replyOrInput)
public IChannel get_Channel()
public DispatchOperation get_Operation()
public void set_Operation(DispatchOperation value)
public Exception get_ProcessingException()
public void set_ProcessingException(Exception value)
public Message get_ReplyMessage()
public void set_ReplyMessage(Message value)
public InstanceContext get_InstanceContext()
public void set_InstanceContext(InstanceContext value)
public Message get_IncomingMessage()
public void set_IncomingMessage(Message value)
public RequestContext get_RequestContext()
public void set_RequestContext(RequestContext value)
public OperationContext get_OperationContext()
public void set_OperationContext(OperationContext value)
public UserEventsHandler get_EventsHandler()
public void set_EventsHandler(UserEventsHandler value)
public void Reply(IDuplexChannel channel, bool useTimeout)
public void Reply(bool useTimeout)
}
public System.ServiceModel.Dispatcher.MessageQuery : object {
public MessageQueryCollection CreateMessageQueryCollection()
public TResult Evaluate(Message message)
public TResult Evaluate(MessageBuffer buffer)
}
public System.ServiceModel.Dispatcher.MessageQueryCollection : Collection`1<MessageQuery> {
public IEnumerable`1<KeyValuePair`2<MessageQuery, TResult>> Evaluate(Message message)
public IEnumerable`1<KeyValuePair`2<MessageQuery, TResult>> Evaluate(MessageBuffer buffer)
}
public System.ServiceModel.Dispatcher.MessageQueryTable`1 : object {
public int Count
public bool IsReadOnly
public TItem Item
public ICollection`1<MessageQuery> Keys
public ICollection`1<TItem> Values
public int get_Count()
public bool get_IsReadOnly()
public TItem get_Item(MessageQuery key)
public void set_Item(MessageQuery key, TItem value)
public ICollection`1<MessageQuery> get_Keys()
public ICollection`1<TItem> get_Values()
public void Add(KeyValuePair`2<MessageQuery, TItem> item)
public void Add(MessageQuery key, TItem value)
public void Clear()
public bool Contains(KeyValuePair`2<MessageQuery, TItem> item)
public bool ContainsKey(MessageQuery key)
public void CopyTo(KeyValuePair`2[] array, int arrayIndex)
public IEnumerable`1<KeyValuePair`2<MessageQuery, TResult>> Evaluate(Message message)
public IEnumerable`1<KeyValuePair`2<MessageQuery, TResult>> Evaluate(MessageBuffer buffer)
public IEnumerator`1<KeyValuePair`2<MessageQuery, TItem>> GetEnumerator()
public bool Remove(KeyValuePair`2<MessageQuery, TItem> item)
public bool Remove(MessageQuery key)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool TryGetValue(MessageQuery key, TItem& value)
}
internal System.ServiceModel.Dispatcher.MetadataExchange : object {
private ServiceMetadataBehavior beh
public void .ctor(ServiceMetadataBehavior beh)
public Message Get(Message request)
public IAsyncResult BeginGet(Message request, AsyncCallback cb, object state)
public Message EndGet(IAsyncResult result)
}
internal System.ServiceModel.Dispatcher.MexInstanceContextProvider : object {
private InstanceContext ctx
public void .ctor(ServiceHostBase service_host)
public InstanceContext GetExistingInstanceContext(Message message, IContextChannel channel)
public void InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel)
public bool IsIdle(InstanceContext instanceContext)
public void NotifyIdle(InstanceContextIdleCallback callback, InstanceContext instanceContext)
}
public System.ServiceModel.Dispatcher.MultipleFilterMatchesException : SystemException {
private Collection`1<MessageFilter> filters
public Collection`1<MessageFilter> Filters
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Collection`1<MessageFilter> filters)
public void .ctor(string message, Exception innerException, Collection`1<MessageFilter> filters)
public Collection`1<MessageFilter> get_Filters()
}
public System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException : InvalidBodyAccessException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.ServiceModel.Dispatcher.OperationFormatter : object {
private BaseMessagesFormatter impl
private string operation_name
public string OperationName
public void .ctor(OperationDescription od, bool isRpc, bool isEncoded)
public string get_OperationName()
internal bool IsValidReturnValue(MessagePartDescription part)
internal void Validate(OperationDescription od, bool isRpc, bool isEncoded)
public object DeserializeReply(Message message, Object[] parameters)
public Message SerializeRequest(MessageVersion messageVersion, Object[] parameters)
public void DeserializeRequest(Message message, Object[] parameters)
public Message SerializeReply(MessageVersion messageVersion, Object[] parameters, object result)
}
internal System.ServiceModel.Dispatcher.OperationInvokerHandler : BaseRequestProcessorHandler {
private IDuplexChannel duplex
public void .ctor(IChannel channel)
protected bool ProcessRequest(MessageProcessingContext mrc)
private void DoProcessRequest(MessageProcessingContext mrc)
private void Reply(MessageProcessingContext mrc, bool useTimeout)
private DispatchOperation GetOperation(Message input, DispatchRuntime dispatchRuntime)
private void HandleInvokeResult(MessageProcessingContext mrc, Object[] outputs, object result)
private void BuildInvokeParams(MessageProcessingContext mrc, Object[]& parameters)
private void ProcessCustomErrorHandlers(MessageProcessingContext mrc, Exception ex)
private void ProcessSessionErrorShutdown(MessageProcessingContext mrc)
private bool IsGenericFaultException(Type type, Type& arg)
private Message BuildExceptionMessage(MessageProcessingContext mrc, Exception ex, bool includeDetailsInFault)
private void EnsureValid(DispatchOperation operation)
}
internal System.ServiceModel.Dispatcher.PostReceiveRequestHandler : BaseRequestProcessorHandler {
protected bool ProcessRequest(MessageProcessingContext mrc)
private void AfterReceiveRequest(MessageProcessingContext mrc)
private void EnsureInstanceContextOpen(InstanceContext ictx)
}
public System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter : MessageFilter {
private EndpointAddress address
private bool cmp_host
public EndpointAddress Address
public bool IncludeHostNameInComparison
public void .ctor(EndpointAddress address)
public void .ctor(EndpointAddress address, bool includeHostNameInComparison)
public EndpointAddress get_Address()
public bool get_IncludeHostNameInComparison()
protected internal IMessageFilterTable`1<FilterData> CreateFilterTable()
public bool Match(Message message)
public bool Match(MessageBuffer messageBuffer)
}
public System.ServiceModel.Dispatcher.SeekableXPathNavigator : XPathNavigator {
public long CurrentPosition
public XmlNodeOrder ComparePosition(long firstPosition, long secondPosition)
public string GetLocalName(long nodePosition)
public string GetName(long nodePosition)
public string GetNamespace(long nodePosition)
public XPathNodeType GetNodeType(long nodePosition)
public string GetValue(long nodePosition)
public long get_CurrentPosition()
public void set_CurrentPosition(long value)
}
public System.ServiceModel.Dispatcher.ServiceThrottle : object {
private ChannelDispatcher owner
private int max_call
private int max_session
private int max_instance
public int MaxConcurrentCalls
public int MaxConcurrentSessions
public int MaxConcurrentInstances
internal void .ctor(ChannelDispatcher owner)
public int get_MaxConcurrentCalls()
public void set_MaxConcurrentCalls(int value)
public int get_MaxConcurrentSessions()
public void set_MaxConcurrentSessions(int value)
public int get_MaxConcurrentInstances()
public void set_MaxConcurrentInstances(int value)
private void CheckState()
}
internal System.ServiceModel.Dispatcher.SessionInstanceContextProvider : object {
private ServiceHostBase host
private Dictionary`2<string, InstanceContext> pool
public void .ctor(ServiceHostBase host)
public InstanceContext GetExistingInstanceContext(Message message, IContextChannel channel)
public void InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel)
public bool IsIdle(InstanceContext instanceContext)
public void NotifyIdle(InstanceContextIdleCallback callback, InstanceContext instanceContext)
}
internal System.ServiceModel.Dispatcher.SingletonInstanceContextProvider : object {
private InstanceContext ctx
public void .ctor(InstanceContext context)
public InstanceContext GetExistingInstanceContext(Message message, IContextChannel channel)
public void InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel)
public bool IsIdle(InstanceContext instanceContext)
public void NotifyIdle(InstanceContextIdleCallback callback, InstanceContext instanceContext)
}
internal System.ServiceModel.Dispatcher.UserEventsHandler : object {
private MessageProcessingContext request_context
private DispatchRuntime dispatch_runtime
private IClientChannel channel
private Object[] msg_inspectors_states
private Object[] callcontext_initializers_states
public void .ctor(MessageProcessingContext mrc)
public void AfterReceiveRequest()
public void BeforeSendReply()
public void BeforeInvoke(DispatchOperation operation)
public void AfterInvoke(DispatchOperation operation)
}
internal System.ServiceModel.Dispatcher.XmlMessagesFormatter : BaseMessagesFormatter {
private XmlSerializerFormatAttribute attr
private Dictionary`2<MessageBodyDescription, XmlSerializer> bodySerializers
public void .ctor(OperationDescription desc, XmlSerializerFormatAttribute attr)
public void .ctor(MessageDescriptionCollection messages, XmlSerializerFormatAttribute attr)
private XmlReflectionMember CreateReflectionMember(MessagePartDescription partDesc, bool isReturnValue)
protected Message PartsToMessage(MessageDescription md, MessageVersion version, string action, Object[] parts)
protected Object[] MessageToParts(MessageDescription md, Message message)
protected Dictionary`2<MessageHeaderDescription, object> MessageToHeaderObjects(MessageDescription md, Message message)
private XmlSerializer GetSerializer(MessageBodyDescription desc)
}
public System.ServiceModel.Dispatcher.XPathMessageContext : XsltContext {
public bool Whitespace
public void .ctor(NameTable table)
public bool get_Whitespace()
public int CompareDocument(string baseUri, string nextBaseUri)
public bool PreserveWhitespace(XPathNavigator node)
public IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] argTypes)
public IXsltContextVariable ResolveVariable(string prefix, string name)
}
public System.ServiceModel.Dispatcher.XPathMessageFilter : MessageFilter {
private XmlNamespaceManager namespaces
private int node_quota
private string xpath
private XPathExpression expr
public XmlNamespaceManager Namespaces
public int NodeQuota
public string XPath
public XmlSchemaType StaticGetSchema(XmlSchemaSet schemas)
public void .ctor(string xpath)
public void .ctor(string xpath, XmlNamespaceManager namespaces)
public void .ctor(string xpath, XsltContext context)
public void .ctor(XmlReader reader)
public void .ctor(XmlReader reader, XmlNamespaceManager namespaces)
public void .ctor(XmlReader reader, XsltContext context)
private void Initialize(string xpath, XmlNamespaceManager nsmgr)
public XmlNamespaceManager get_Namespaces()
public int get_NodeQuota()
public void set_NodeQuota(int value)
public string get_XPath()
protected internal IMessageFilterTable`1<FilterData> CreateFilterTable()
public bool Match(Message message)
public bool Match(MessageBuffer messageBuffer)
public bool Match(SeekableXPathNavigator navigator)
public bool Match(XPathNavigator navigator)
public void TrimToSize()
public void WriteXPathTo(XmlWriter writer, string prefix, string localName, string ns, bool writeNamespaces)
protected XmlSchema OnGetSchema()
protected void OnReadXml(XmlReader reader)
protected void OnWriteXml(XmlWriter writer)
protected void ReadXPath(XmlReader reader, XmlNamespaceManager namespaces)
protected void WriteXPath(XmlWriter writer, IXmlNamespaceResolver resolver)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
}
public System.ServiceModel.Dispatcher.XPathMessageFilterTable`1 : object {
private Dictionary`2<MessageFilter, TFilterData> dict
private int quota
private Exception trim_to_size_error
public int NodeQuota
public TFilterData Item
public int Count
public bool IsReadOnly
public ICollection`1<MessageFilter> Keys
public ICollection`1<TFilterData> Values
public void .ctor(int capacity)
public int get_NodeQuota()
public void set_NodeQuota(int value)
public TFilterData get_Item(MessageFilter filter)
public void set_Item(MessageFilter filter, TFilterData value)
public int get_Count()
public bool get_IsReadOnly()
public ICollection`1<MessageFilter> get_Keys()
public ICollection`1<TFilterData> get_Values()
public void Add(KeyValuePair`2<MessageFilter, TFilterData> item)
public void Add(XPathMessageFilter filter, TFilterData data)
public void Add(MessageFilter filter, TFilterData data)
public void Clear()
public bool Contains(KeyValuePair`2<MessageFilter, TFilterData> item)
public bool ContainsKey(MessageFilter filter)
public void CopyTo(KeyValuePair`2[] array, int arrayIndex)
public IEnumerator`1<KeyValuePair`2<MessageFilter, TFilterData>> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool GetMatchingFilter(Message message, MessageFilter& filter)
public bool GetMatchingFilter(MessageBuffer messageBuffer, MessageFilter& filter)
public bool GetMatchingFilter(SeekableXPathNavigator navigator, MessageFilter& filter)
public bool GetMatchingFilter(XPathNavigator navigator, MessageFilter& filter)
public bool GetMatchingFilters(Message message, ICollection`1<MessageFilter> results)
public bool GetMatchingFilters(MessageBuffer messageBuffer, ICollection`1<MessageFilter> results)
public bool GetMatchingFilters(SeekableXPathNavigator navigator, ICollection`1<MessageFilter> results)
public bool GetMatchingFilters(XPathNavigator navigator, ICollection`1<MessageFilter> results)
public bool GetMatchingValue(Message message, TFilterData& data)
public bool GetMatchingValue(MessageBuffer messageBuffer, TFilterData& data)
public bool GetMatchingValue(SeekableXPathNavigator navigator, TFilterData& data)
public bool GetMatchingValue(XPathNavigator navigator, TFilterData& data)
public bool GetMatchingValues(Message message, ICollection`1<TFilterData> results)
public bool GetMatchingValues(MessageBuffer messageBuffer, ICollection`1<TFilterData> results)
public bool GetMatchingValues(SeekableXPathNavigator navigator, ICollection`1<TFilterData> results)
public bool GetMatchingValues(XPathNavigator navigator, ICollection`1<TFilterData> results)
public bool Remove(KeyValuePair`2<MessageFilter, TFilterData> item)
public bool Remove(XPathMessageFilter filter)
public bool Remove(MessageFilter filter)
public void TrimToSize()
public bool TryGetValue(MessageFilter filter, TFilterData& data)
}
public System.ServiceModel.Dispatcher.XPathMessageQueryCollection : MessageQueryCollection {
public IEnumerable`1<KeyValuePair`2<MessageQuery, TResult>> Evaluate(Message message)
public IEnumerable`1<KeyValuePair`2<MessageQuery, TResult>> Evaluate(MessageBuffer buffer)
protected void InsertItem(int index, MessageQuery item)
protected void SetItem(int index, MessageQuery item)
}
public System.ServiceModel.Dispatcher.XPathNavigatorException : XPathException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.Dispatcher.XPathResult : object {
public XPathResultType ResultType
public XPathResultType get_ResultType()
public void Dispose()
public bool GetResultAsBoolean()
public XPathNodeIterator GetResultAsNodeset()
public double GetResultAsNumber()
public string GetResultAsString()
}
internal System.ServiceModel.DispatcherBuilder : object {
private ServiceHostBase host
private Dictionary`2<Binding, ChannelDispatcher> built_dispatchers
private Dictionary`2<ServiceEndpoint, EndpointDispatcher> ep_to_dispatcher_ep
internal Action`1<ChannelDispatcher> ChannelDispatcherSetter
public void .ctor(ServiceHostBase host)
internal ChannelDispatcher BuildChannelDispatcher(Type serviceType, ServiceEndpoint se, BindingParameterCollection commonParams)
private ChannelDispatcher FindExistingDispatcher(ServiceEndpoint se)
internal void ApplyDispatchBehaviors()
private void ApplyDispatchBehavior(EndpointDispatcher ed, ServiceEndpoint endPoint)
private void AddBindingParameters(BindingParameterCollection commonParams, ServiceEndpoint endPoint)
private IChannelListener BuildListener(ServiceEndpoint se, BindingParameterCollection pl)
}
public System.ServiceModel.DnsEndpointIdentity : EndpointIdentity {
public void .ctor(Claim identity)
public void .ctor(string dnsName)
}
internal System.ServiceModel.DummyClientBase`1 : ClientBase`1<T> {
public void .ctor(ChannelFactory`1<T> factory)
}
public System.ServiceModel.DuplexChannelFactory`1 : ChannelFactory`1<TChannel> {
private InstanceContext callback_instance
private Type callback_instance_type
public void .ctor(Type callbackInstanceType)
public void .ctor(Type callbackInstanceType, string endpointConfigurationName)
public void .ctor(Type callbackInstanceType, string endpointConfigurationName, EndpointAddress remoteAddress)
public void .ctor(Type callbackInstanceType, ServiceEndpoint endpoint)
public void .ctor(Type callbackInstanceType, Binding binding)
public void .ctor(Type callbackInstanceType, Binding binding, string remoteAddress)
public void .ctor(Type callbackInstanceType, Binding binding, EndpointAddress remoteAddress)
public void .ctor(object callbackObject)
public void .ctor(object callbackObject, string endpointConfigurationName)
public void .ctor(object callbackObject, string endpointConfigurationName, EndpointAddress remoteAddress)
public void .ctor(object callbackObject, ServiceEndpoint endpoint)
public void .ctor(object callbackObject, Binding binding)
public void .ctor(object callbackObject, Binding binding, string remoteAddress)
public void .ctor(object callbackObject, Binding binding, EndpointAddress remoteAddress)
public void .ctor(InstanceContext callbackInstance)
public void .ctor(InstanceContext callbackInstance, Binding binding)
public void .ctor(InstanceContext callbackInstance, Binding binding, string remoteAddress)
public void .ctor(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress)
public void .ctor(InstanceContext callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress)
public void .ctor(InstanceContext callbackInstance, string endpointConfigurationName)
public void .ctor(InstanceContext callbackInstance, ServiceEndpoint endpoint)
public TChannel CreateChannel(InstanceContext callbackInstance)
public TChannel CreateChannel(EndpointAddress address, Uri via)
public TChannel CreateChannel(InstanceContext callbackInstance, EndpointAddress address)
public TChannel CreateChannel(InstanceContext callbackInstance, EndpointAddress address, Uri via)
private TChannel CreateChannelCore(DuplexChannelFactory`1<TChannel> cf, Func`2<DuplexChannelFactory`1<TChannel>, TChannel> f)
public TChannel CreateChannel(object callbackObject, string endpointConfigurationName)
public TChannel CreateChannel(InstanceContext callbackInstance, string endpointConfigurationName)
public TChannel CreateChannel(object callbackObject, Binding binding, EndpointAddress endpointAddress)
public TChannel CreateChannel(InstanceContext callbackInstance, Binding binding, EndpointAddress endpointAddress)
public TChannel CreateChannel(object callbackObject, Binding binding, EndpointAddress endpointAddress, Uri via)
public TChannel CreateChannel(InstanceContext callbackInstance, Binding binding, EndpointAddress endpointAddress, Uri via)
}
public System.ServiceModel.DuplexClientBase`1 : ClientBase`1<TChannel> {
public IDuplexContextChannel InnerDuplexChannel
protected void .ctor(object callbackInstance)
protected void .ctor(object callbackInstance, Binding binding, EndpointAddress remoteAddress)
protected void .ctor(object callbackInstance, string endpointConfigurationName)
protected void .ctor(object callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress)
protected void .ctor(object callbackInstance, string endpointConfigurationName, string remoteAddress)
protected void .ctor(InstanceContext callbackInstance)
protected void .ctor(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress)
protected void .ctor(InstanceContext callbackInstance, string endpointConfigurationName)
protected void .ctor(InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress)
protected void .ctor(InstanceContext callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress)
protected void .ctor(object callbackInstance, ServiceEndpoint endpoint)
protected void .ctor(InstanceContext callbackInstance, ServiceEndpoint endpoint)
public IDuplexContextChannel get_InnerDuplexChannel()
internal void Initialize(InstanceContext instance, string endpointConfigurationName, EndpointAddress remoteAddress)
internal void Initialize(InstanceContext instance, Binding binding, EndpointAddress remoteAddress)
protected TChannel CreateChannel()
}
public System.ServiceModel.EndpointAddress : object {
private Uri w3c_anonymous
private Uri anonymous_role
private Uri none_role
private Uri address
private AddressHeaderCollection headers
private EndpointIdentity identity
private XmlDictionaryReader metadata_reader
private XmlDictionaryReader extension_reader
private XmlSchema schema
public Uri AnonymousUri
public Uri NoneUri
public bool IsAnonymous
public bool IsNone
public AddressHeaderCollection Headers
public EndpointIdentity Identity
public Uri Uri
internal XmlSchema Schema
public Uri get_AnonymousUri()
public Uri get_NoneUri()
public void .ctor(string uri)
public void .ctor(Uri uri, AddressHeader[] addressHeaders)
public void .ctor(Uri uri, EndpointIdentity identity, AddressHeader[] addressHeaders)
public void .ctor(Uri uri, EndpointIdentity identity, AddressHeaderCollection headers)
public void .ctor(Uri uri, EndpointIdentity identity, AddressHeaderCollection headers, XmlDictionaryReader metadataReader, XmlDictionaryReader extensionReader)
public bool get_IsAnonymous()
public bool get_IsNone()
public AddressHeaderCollection get_Headers()
public EndpointIdentity get_Identity()
public Uri get_Uri()
internal XmlSchema get_Schema()
public void ApplyTo(Message message)
public bool Equals(object obj)
public int GetHashCode()
public XmlDictionaryReader GetReaderAtExtensions()
public XmlDictionaryReader GetReaderAtMetadata()
public bool op_Equality(EndpointAddress address1, EndpointAddress address2)
public bool op_Inequality(EndpointAddress address1, EndpointAddress address2)
public EndpointAddress ReadFrom(XmlDictionaryReader reader)
public EndpointAddress ReadFrom(AddressingVersion addressingVersion, XmlDictionaryReader reader)
public EndpointAddress ReadFrom(AddressingVersion addressingVersion, XmlReader reader)
public EndpointAddress ReadFrom(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString ns)
public EndpointAddress ReadFrom(AddressingVersion addressingVersion, XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString ns)
public EndpointAddress ReadFrom(AddressingVersion addressingVersion, XmlReader reader, string localName, string ns)
private EndpointAddress ReadFromInternal(AddressingVersion addressingVersion, XmlReader reader, string localName, string ns, XmlDictionaryString dictLocalName, XmlDictionaryString dictNS)
private EndpointAddress ReadContents(AddressingVersion addressingVersion, XmlReader reader)
public string ToString()
public void WriteContentsTo(AddressingVersion addressingVersion, XmlDictionaryWriter writer)
public void WriteContentsTo(AddressingVersion addressingVersion, XmlWriter writer)
public void WriteTo(AddressingVersion addressingVersion, XmlDictionaryWriter writer)
public void WriteTo(AddressingVersion addressingVersion, XmlWriter writer)
public void WriteTo(AddressingVersion addressingVersion, XmlDictionaryWriter writer, XmlDictionaryString localName, XmlDictionaryString ns)
public void WriteTo(AddressingVersion addressingVersion, XmlWriter writer, string localName, string ns)
}
public System.ServiceModel.EndpointAddress10 : object {
private Uri w3c_anonymous
private EndpointAddress address
internal void .ctor(EndpointAddress address)
public EndpointAddress10 FromEndpointAddress(EndpointAddress address)
public XmlQualifiedName GetSchema(XmlSchemaSet xmlSchemaSet)
public EndpointAddress ToEndpointAddress()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
}
public System.ServiceModel.EndpointAddressAugust2004 : object {
private EndpointAddress address
internal void .ctor(EndpointAddress address)
public EndpointAddressAugust2004 FromEndpointAddress(EndpointAddress address)
public XmlQualifiedName GetSchema(XmlSchemaSet xmlSchemaSet)
public EndpointAddress ToEndpointAddress()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
}
public System.ServiceModel.EndpointAddressBuilder : object {
private Collection`1<AddressHeader> headers
private EndpointIdentity identity
private Uri uri
private string extension
private string metadata
public Collection`1<AddressHeader> Headers
public Uri Uri
public EndpointIdentity Identity
public void .ctor(EndpointAddress address)
public Collection`1<AddressHeader> get_Headers()
public Uri get_Uri()
public void set_Uri(Uri value)
public EndpointIdentity get_Identity()
public void set_Identity(EndpointIdentity value)
public XmlDictionaryReader GetReaderAtExtensions()
public XmlDictionaryReader GetReaderAtMetadata()
public void SetExtensionReader(XmlDictionaryReader reader)
public void SetMetadataReader(XmlDictionaryReader reader)
public EndpointAddress ToEndpointAddress()
}
public System.ServiceModel.EndpointIdentity : object {
private Claim claim
private IEqualityComparer`1<Claim> comparer
public Claim IdentityClaim
public Claim get_IdentityClaim()
public EndpointIdentity CreateDnsIdentity(string dnsName)
public EndpointIdentity CreateIdentity(Claim identity)
public EndpointIdentity CreateRsaIdentity(string publicKey)
public EndpointIdentity CreateRsaIdentity(X509Certificate2 certificate)
public EndpointIdentity CreateSpnIdentity(string spnName)
public EndpointIdentity CreateUpnIdentity(string upnName)
public EndpointIdentity CreateX509CertificateIdentity(X509Certificate2 certificate)
public EndpointIdentity CreateX509CertificateIdentity(X509Certificate2 primaryCertificate, X509Certificate2Collection supportingCertificates)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
protected void Initialize(Claim identityClaim)
protected void Initialize(Claim identityClaim, IEqualityComparer`1<Claim> claimComparer)
}
public System.ServiceModel.EndpointNotFoundException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.EnvelopeVersion : object {
private string Soap11NextReceiver
private string Soap12NextReceiver
internal string Soap12UltimateReceiver
private string name
private string uri
private string next_destination
private String[] ultimate_destination
private EnvelopeVersion soap11
private EnvelopeVersion soap12
private EnvelopeVersion none
internal string Namespace
public EnvelopeVersion Soap11
public EnvelopeVersion Soap12
public EnvelopeVersion None
public string NextDestinationActorValue
private void .ctor(string name, string uri, string next_destination, String[] ultimate_destination)
internal string get_Namespace()
public EnvelopeVersion get_Soap11()
public EnvelopeVersion get_Soap12()
public EnvelopeVersion get_None()
public string get_NextDestinationActorValue()
public String[] GetUltimateDestinationActorValues()
public string ToString()
}
public System.ServiceModel.ExceptionDetail : object {
private string <HelpLink>k__BackingField
private ExceptionDetail <InnerException>k__BackingField
private string <Message>k__BackingField
private string <StackTrace>k__BackingField
private string <Type>k__BackingField
public string HelpLink
public ExceptionDetail InnerException
public string Message
public string StackTrace
public string Type
public void .ctor(Exception exception)
public string get_HelpLink()
public void set_HelpLink(string value)
public ExceptionDetail get_InnerException()
public void set_InnerException(ExceptionDetail value)
public string get_Message()
public void set_Message(string value)
public string get_StackTrace()
public void set_StackTrace(string value)
public string get_Type()
public void set_Type(string value)
public string ToString()
}
public System.ServiceModel.ExceptionMapper : object {
public FaultException FromException(Exception ex)
public FaultException FromException(Exception ex, string soapNamespace, string trustNamespace)
public bool HandleSecurityTokenProcessingException(Exception ex)
}
public System.ServiceModel.ExtensionCollection`1 : SynchronizedCollection`1<IExtension`1<T>> {
private T owner
private bool System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>.IsReadOnly
public void .ctor(T owner)
public void .ctor(T owner, object syncRoot)
public E Find()
public Collection`1<E> FindAll()
private bool System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>.get_IsReadOnly()
protected void ClearItems()
protected void InsertItem(int index, IExtension`1<T> item)
protected void RemoveItem(int index)
protected void SetItem(int index, IExtension`1<T> item)
}
public System.ServiceModel.FaultCode : object {
private string name
private string ns
private FaultCode subcode
public bool IsPredefinedFault
public bool IsReceiverFault
public bool IsSenderFault
public string Name
public string Namespace
public FaultCode SubCode
public void .ctor(string name)
public void .ctor(string name, string ns)
public void .ctor(string name, FaultCode subCode)
public void .ctor(string name, string ns, FaultCode subCode)
public bool get_IsPredefinedFault()
public bool get_IsReceiverFault()
public bool get_IsSenderFault()
public string get_Name()
public string get_Namespace()
public FaultCode get_SubCode()
public FaultCode CreateReceiverFaultCode(FaultCode subCode)
public FaultCode CreateReceiverFaultCode(string name, string ns)
public FaultCode CreateSenderFaultCode(FaultCode subCode)
public FaultCode CreateSenderFaultCode(string name, string ns)
}
public System.ServiceModel.FaultContractAttribute : Attribute {
private string action
private string name
private string ns
private Type detail_type
private ProtectionLevel protection_level
private bool has_protection_level
public string Action
public Type DetailType
public bool HasProtectionLevel
public ProtectionLevel ProtectionLevel
public string Name
public string Namespace
public void .ctor(Type detailType)
public string get_Action()
public void set_Action(string value)
public Type get_DetailType()
public bool get_HasProtectionLevel()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
}
public System.ServiceModel.FaultException : CommunicationException {
private MessageFault fault
private string action
public string Action
public FaultCode Code
public FaultReason Reason
public string Message
public void .ctor(string reason)
public void .ctor(string reason, FaultCode code)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(MessageFault fault)
public void .ctor(MessageFault fault, string action)
public void .ctor(FaultReason reason)
public void .ctor(FaultReason reason, FaultCode code)
public void .ctor(string reason, FaultCode code, string action)
public void .ctor(FaultReason reason, FaultCode code, string action)
public FaultException CreateFault(MessageFault messageFault, Type[] faultDetailTypes)
public FaultException CreateFault(MessageFault messageFault, string action, Type[] faultDetailTypes)
public MessageFault CreateMessageFault()
public void GetObjectData(SerializationInfo info, StreamingContext context)
public string get_Action()
public FaultCode get_Code()
public FaultReason get_Reason()
public string get_Message()
}
public System.ServiceModel.FaultException`1 : FaultException {
private TDetail detail
public TDetail Detail
public void .ctor(TDetail detail)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(TDetail detail, string reason)
public void .ctor(TDetail detail, FaultReason reason)
public void .ctor(TDetail detail, string reason, FaultCode code)
public void .ctor(TDetail detail, FaultReason reason, FaultCode code)
public void .ctor(TDetail detail, string reason, FaultCode code, string action)
public void .ctor(TDetail detail, FaultReason reason, FaultCode code, string action)
public MessageFault CreateMessageFault()
public void GetObjectData(SerializationInfo info, StreamingContext context)
public string ToString()
public TDetail get_Detail()
}
public System.ServiceModel.FaultImportOptions : object {
public bool UseMessageFormat
public bool get_UseMessageFormat()
public void set_UseMessageFormat(bool value)
}
public System.ServiceModel.FaultReason : object {
private List`1<FaultReasonText> trans
private SynchronizedReadOnlyCollection`1<FaultReasonText> public_trans
public SynchronizedReadOnlyCollection`1<FaultReasonText> Translations
public void .ctor(FaultReasonText translation)
public void .ctor(IEnumerable`1<FaultReasonText> translations)
public void .ctor(string text)
public SynchronizedReadOnlyCollection`1<FaultReasonText> get_Translations()
public FaultReasonText GetMatchingTranslation()
public FaultReasonText GetMatchingTranslation(CultureInfo cultureInfo)
public string ToString()
}
public System.ServiceModel.FaultReasonText : object {
private string text
private string xmllang
public string Text
public string XmlLang
public void .ctor(string text)
public void .ctor(string text, CultureInfo cultureInfo)
public void .ctor(string text, string xmlLang)
public string get_Text()
public string get_XmlLang()
public bool Matches(CultureInfo cultureInfo)
}
public System.ServiceModel.FederatedMessageSecurityOverHttp : object {
private SecurityAlgorithmSuite algorithm
private SecurityKeyType issued_key_type
private string issued_token_type
private EndpointAddress issuer_address
private EndpointAddress metadata_address
private Binding issuer_binding
private bool establish_sec_ctx
private bool negotiate
private Collection`1<ClaimTypeRequirement> claim_type_reqs
private Collection`1<XmlElement> request_params
public SecurityAlgorithmSuite AlgorithmSuite
public bool EstablishSecurityContext
public SecurityKeyType IssuedKeyType
public string IssuedTokenType
public EndpointAddress IssuerAddress
public Binding IssuerBinding
public EndpointAddress IssuerMetadataAddress
public bool NegotiateServiceCredential
public Collection`1<ClaimTypeRequirement> ClaimTypeRequirements
public Collection`1<XmlElement> TokenRequestParameters
public SecurityAlgorithmSuite get_AlgorithmSuite()
public void set_AlgorithmSuite(SecurityAlgorithmSuite value)
public bool get_EstablishSecurityContext()
public void set_EstablishSecurityContext(bool value)
public SecurityKeyType get_IssuedKeyType()
public void set_IssuedKeyType(SecurityKeyType value)
public string get_IssuedTokenType()
public void set_IssuedTokenType(string value)
public EndpointAddress get_IssuerAddress()
public void set_IssuerAddress(EndpointAddress value)
public Binding get_IssuerBinding()
public void set_IssuerBinding(Binding value)
public EndpointAddress get_IssuerMetadataAddress()
public void set_IssuerMetadataAddress(EndpointAddress value)
public bool get_NegotiateServiceCredential()
public void set_NegotiateServiceCredential(bool value)
public Collection`1<ClaimTypeRequirement> get_ClaimTypeRequirements()
public Collection`1<XmlElement> get_TokenRequestParameters()
public bool ShouldSerializeAlgorithmSuite()
public bool ShouldSerializeClaimTypeRequirements()
public bool ShouldSerializeEstablishSecurityContext()
public bool ShouldSerializeIssuedKeyType()
public bool ShouldSerializeNegotiateServiceCredential()
public bool ShouldSerializeTokenRequestParameters()
}
public System.ServiceModel.HostNameComparisonMode : Enum {
public int value__
public HostNameComparisonMode StrongWildcard
public HostNameComparisonMode Exact
public HostNameComparisonMode WeakWildcard
}
public System.ServiceModel.HttpBindingBase : Binding {
private bool allow_cookies
private bool bypass_proxy_on_local
private HostNameComparisonMode host_name_comparison_mode
private long max_buffer_pool_size
private int max_buffer_size
private long max_recv_message_size
private Uri proxy_address
private XmlDictionaryReaderQuotas reader_quotas
private EnvelopeVersion env_version
private Encoding text_encoding
private Encoding default_text_encoding
private TransferMode transfer_mode
private bool use_default_web_proxy
private string <Scheme>k__BackingField
public bool AllowCookies
public bool BypassProxyOnLocal
public HostNameComparisonMode HostNameComparisonMode
public long MaxBufferPoolSize
public int MaxBufferSize
public long MaxReceivedMessageSize
public Uri ProxyAddress
public XmlDictionaryReaderQuotas ReaderQuotas
public string Scheme
public EnvelopeVersion EnvelopeVersion
internal Encoding DefaultTextEncoding
public Encoding TextEncoding
public TransferMode TransferMode
public bool UseDefaultWebProxy
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
public bool get_AllowCookies()
public void set_AllowCookies(bool value)
public bool get_BypassProxyOnLocal()
public void set_BypassProxyOnLocal(bool value)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public Uri get_ProxyAddress()
public void set_ProxyAddress(Uri value)
public XmlDictionaryReaderQuotas get_ReaderQuotas()
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
public string get_Scheme()
public EnvelopeVersion get_EnvelopeVersion()
internal Encoding get_DefaultTextEncoding()
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public TransferMode get_TransferMode()
public void set_TransferMode(TransferMode value)
public bool get_UseDefaultWebProxy()
public void set_UseDefaultWebProxy(bool value)
public BindingElementCollection CreateBindingElements()
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.get_ReceiveSynchronously()
public bool ShouldSerializeReaderQuotas()
public bool ShouldSerializeTextEncoding()
}
public System.ServiceModel.HttpClientCredentialType : Enum {
public int value__
public HttpClientCredentialType None
public HttpClientCredentialType Basic
public HttpClientCredentialType Digest
public HttpClientCredentialType Ntlm
public HttpClientCredentialType Windows
public HttpClientCredentialType Certificate
public HttpClientCredentialType InheritedFromHost
}
public System.ServiceModel.HttpProxyCredentialType : Enum {
public int value__
public HttpProxyCredentialType None
public HttpProxyCredentialType Basic
public HttpProxyCredentialType Digest
public HttpProxyCredentialType Ntlm
public HttpProxyCredentialType Windows
}
public System.ServiceModel.HttpTransportSecurity : object {
private HttpClientCredentialType client
private HttpProxyCredentialType proxy
private string realm
private ExtendedProtectionPolicy <ExtendedProtectionPolicy>k__BackingField
public HttpClientCredentialType ClientCredentialType
public HttpProxyCredentialType ProxyCredentialType
public string Realm
public ExtendedProtectionPolicy ExtendedProtectionPolicy
public HttpClientCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(HttpClientCredentialType value)
public HttpProxyCredentialType get_ProxyCredentialType()
public void set_ProxyCredentialType(HttpProxyCredentialType value)
public string get_Realm()
public void set_Realm(string value)
public ExtendedProtectionPolicy get_ExtendedProtectionPolicy()
public void set_ExtendedProtectionPolicy(ExtendedProtectionPolicy value)
public bool ShouldSerializeClientCredentialType()
public bool ShouldSerializeExtendedProtectionPolicy()
public bool ShouldSerializeProxyCredentialType()
public bool ShouldSerializeRealm()
}
public System.ServiceModel.IClientChannel {
public bool AllowInitializationUI
public bool DidInteractiveInitialization
public Uri Via
public bool get_AllowInitializationUI()
public void set_AllowInitializationUI(bool value)
public bool get_DidInteractiveInitialization()
public Uri get_Via()
public IAsyncResult BeginDisplayInitializationUI(AsyncCallback callback, object state)
public void EndDisplayInitializationUI(IAsyncResult result)
public void DisplayInitializationUI()
public void add_UnknownMessageReceived(EventHandler`1<UnknownMessageReceivedEventArgs> value)
public void remove_UnknownMessageReceived(EventHandler`1<UnknownMessageReceivedEventArgs> value)
}
public System.ServiceModel.ICommunicationObject {
public CommunicationState State
public CommunicationState get_State()
public void Abort()
public IAsyncResult BeginClose(AsyncCallback callback, object state)
public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginOpen(AsyncCallback callback, object state)
public IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
public void Close()
public void Close(TimeSpan timeout)
public void EndClose(IAsyncResult result)
public void EndOpen(IAsyncResult result)
public void Open()
public void Open(TimeSpan timeout)
public void add_Closed(EventHandler value)
public void remove_Closed(EventHandler value)
public void add_Closing(EventHandler value)
public void remove_Closing(EventHandler value)
public void add_Faulted(EventHandler value)
public void remove_Faulted(EventHandler value)
public void add_Opened(EventHandler value)
public void remove_Opened(EventHandler value)
public void add_Opening(EventHandler value)
public void remove_Opening(EventHandler value)
}
public System.ServiceModel.IContextChannel {
public bool AllowOutputBatching
public IInputSession InputSession
public EndpointAddress LocalAddress
public TimeSpan OperationTimeout
public IOutputSession OutputSession
public EndpointAddress RemoteAddress
public string SessionId
public bool get_AllowOutputBatching()
public void set_AllowOutputBatching(bool value)
public IInputSession get_InputSession()
public EndpointAddress get_LocalAddress()
public TimeSpan get_OperationTimeout()
public void set_OperationTimeout(TimeSpan value)
public IOutputSession get_OutputSession()
public EndpointAddress get_RemoteAddress()
public string get_SessionId()
}
public System.ServiceModel.IDefaultCommunicationTimeouts {
public TimeSpan CloseTimeout
public TimeSpan OpenTimeout
public TimeSpan ReceiveTimeout
public TimeSpan SendTimeout
public TimeSpan get_CloseTimeout()
public TimeSpan get_OpenTimeout()
public TimeSpan get_ReceiveTimeout()
public TimeSpan get_SendTimeout()
}
public System.ServiceModel.IDuplexContextChannel {
public bool AutomaticInputSessionShutdown
public InstanceContext CallbackInstance
public bool get_AutomaticInputSessionShutdown()
public void set_AutomaticInputSessionShutdown(bool value)
public InstanceContext get_CallbackInstance()
public void set_CallbackInstance(InstanceContext value)
public IAsyncResult BeginCloseOutputSession(TimeSpan timeout, AsyncCallback callback, object state)
public void CloseOutputSession(TimeSpan timeout)
public void EndCloseOutputSession(IAsyncResult result)
}
public System.ServiceModel.IExtensibleObject`1 {
public IExtensionCollection`1<T> Extensions
public IExtensionCollection`1<T> get_Extensions()
}
public System.ServiceModel.IExtension`1 {
public void Attach(T owner)
public void Detach(T owner)
}
public System.ServiceModel.IExtensionCollection`1 {
public E Find()
public Collection`1<E> FindAll()
}
public System.ServiceModel.ImpersonationOption : Enum {
public int value__
public ImpersonationOption NotAllowed
public ImpersonationOption Allowed
public ImpersonationOption Required
}
public System.ServiceModel.InstanceContext : CommunicationObject {
private ServiceHostBase host
private object implementation
private int manual_flow_limit
private InstanceManager instance_manager
private bool is_user_instance_provider
private bool is_user_context_provider
private ExtensionCollection`1<InstanceContext> _extensions
private InstanceContextIdleCallback idle_callback
private Action`1<TimeSpan> open_delegate
private Action`1<TimeSpan> close_delegate
internal bool IsUserProvidedInstance
internal bool IsUserProvidedContext
internal InstanceManager InstanceManager
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
public IExtensionCollection`1<InstanceContext> Extensions
public ServiceHostBase Host
public ICollection`1<IChannel> IncomingChannels
public int ManualFlowControlLimit
public ICollection`1<IChannel> OutgoingChannels
internal InstanceContextIdleCallback IdleCallback
public SynchronizationContext SynchronizationContext
public void .ctor(object implementation)
public void .ctor(ServiceHostBase host)
public void .ctor(ServiceHostBase host, object implementation)
internal void .ctor(ServiceHostBase host, object implementation, bool userContextProvider)
internal bool get_IsUserProvidedInstance()
internal bool get_IsUserProvidedContext()
internal InstanceManager get_InstanceManager()
internal void set_InstanceManager(InstanceManager value)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
public IExtensionCollection`1<InstanceContext> get_Extensions()
public ServiceHostBase get_Host()
public ICollection`1<IChannel> get_IncomingChannels()
public int get_ManualFlowControlLimit()
public void set_ManualFlowControlLimit(int value)
public ICollection`1<IChannel> get_OutgoingChannels()
public object GetServiceInstance()
public object GetServiceInstance(Message message)
public int IncrementManualFlowControlLimit(int incrementBy)
internal void CloseIfIdle()
private void NotifyIdle(InstanceContext ctx)
internal InstanceContextIdleCallback get_IdleCallback()
public void ReleaseServiceInstance()
private void DisposeInstance()
protected void OnAbort()
protected void OnFaulted()
protected void OnClosed()
protected void OnOpened()
protected void OnOpening()
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
public SynchronizationContext get_SynchronizationContext()
public void set_SynchronizationContext(SynchronizationContext value)
}
public System.ServiceModel.InstanceContextMode : Enum {
public int value__
public InstanceContextMode PerSession
public InstanceContextMode PerCall
public InstanceContextMode Single
}
public System.ServiceModel.InvalidMessageContractException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.IOnlineStatus {
public bool IsOnline
public bool get_IsOnline()
public void add_Offline(EventHandler value)
public void remove_Offline(EventHandler value)
public void add_Online(EventHandler value)
public void remove_Online(EventHandler value)
}
public System.ServiceModel.IServiceChannel {
public Uri ListenUri
public Uri get_ListenUri()
}
internal System.ServiceModel.Logger : object {
private string xmlns
private MessageLoggingSettings settings
private int event_id
private TextWriter log_writer
private XmlWriter xml_writer
private TraceSource source
private TraceSource message_source
private XmlWriterSettings xws
private XmlWriterSettings xml_writer_settings
private string e2e_ns
private string sys_ns
public void Critical(string message, Object[] args)
public void Error(string message, Object[] args)
public void Warning(string message, Object[] args)
public void Info(string message, Object[] args)
public void Verbose(string message, Object[] args)
private void Log(TraceEventType eventType, string message, Object[] args)
public void LogMessage(MessageLogSourceKind sourceKind, Message& msg, long maxMessageSize)
public void LogMessage(MessageLogTraceRecord log)
private void TraceCore(TraceEventType eventType, int id, bool hasRelatedActivity, Guid relatedActivity, Object[] data)
private string XPathNavigatorToString(XPathNavigator nav)
}
public System.ServiceModel.MessageBodyMemberAttribute : MessageContractMemberAttribute {
private int order
public int Order
public int get_Order()
public void set_Order(int value)
}
public System.ServiceModel.MessageContractAttribute : Attribute {
private bool has_protection_level
private bool is_wrapped
private string name
private string ns
private ProtectionLevel protection_level
public bool HasProtectionLevel
public ProtectionLevel ProtectionLevel
public bool IsWrapped
public string WrapperName
public string WrapperNamespace
public bool get_HasProtectionLevel()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public bool get_IsWrapped()
public void set_IsWrapped(bool value)
public string get_WrapperName()
public void set_WrapperName(string value)
public string get_WrapperNamespace()
public void set_WrapperNamespace(string value)
}
public System.ServiceModel.MessageContractMemberAttribute : Attribute {
private bool has_protection_level
private string name
private string ns
private ProtectionLevel protection_level
public bool HasProtectionLevel
public string Name
public string Namespace
public ProtectionLevel ProtectionLevel
public bool get_HasProtectionLevel()
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
}
public System.ServiceModel.MessageCredentialType : Enum {
public int value__
public MessageCredentialType None
public MessageCredentialType Windows
public MessageCredentialType UserName
public MessageCredentialType Certificate
public MessageCredentialType IssuedToken
}
public System.ServiceModel.MessageHeader`1 : object {
private T content
private string actor
private bool must_understand
private bool relay
private XmlObjectSerializer formatter
public string Actor
public T Content
public bool MustUnderstand
public bool Relay
public void .ctor(T content)
public void .ctor(T content, bool mustUnderstand, string actor, bool relay)
public MessageHeader GetUntypedHeader(string name, string ns)
public string get_Actor()
public void set_Actor(string value)
public T get_Content()
public void set_Content(T value)
public bool get_MustUnderstand()
public void set_MustUnderstand(bool value)
public bool get_Relay()
public void set_Relay(bool value)
}
public System.ServiceModel.MessageHeaderAttribute : MessageContractMemberAttribute {
private string actor
private bool must_understand
private bool relay
public string Actor
public bool MustUnderstand
public bool Relay
public string get_Actor()
public void set_Actor(string value)
public bool get_MustUnderstand()
public void set_MustUnderstand(bool value)
public bool get_Relay()
public void set_Relay(bool value)
}
public System.ServiceModel.MessageHeaderException : ProtocolException {
private string <HeaderName>k__BackingField
private string <HeaderNamespace>k__BackingField
private bool <IsDuplicate>k__BackingField
public string HeaderName
public string HeaderNamespace
public bool IsDuplicate
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, bool isDuplicate)
public void .ctor(string message, string headerName, string ns)
public void .ctor(string message, string headerName, string ns, bool isDuplicate)
public void .ctor(string message, string headerName, string ns, Exception innerException)
public void .ctor(string message, string headerName, string ns, bool isDuplicate, Exception innerException)
public string get_HeaderName()
private void set_HeaderName(string value)
public string get_HeaderNamespace()
private void set_HeaderNamespace(string value)
public bool get_IsDuplicate()
private void set_IsDuplicate(bool value)
}
internal System.ServiceModel.MessageLogSourceKind : Enum {
public int value__
public MessageLogSourceKind TransportSend
public MessageLogSourceKind TransportReceive
public MessageLogSourceKind ServiceLevelReceiveDatagram
public MessageLogSourceKind ServiceLevelSendDatagram
}
public System.ServiceModel.MessageParameterAttribute : Attribute {
private string name
public string Name
public string get_Name()
public void set_Name(string value)
}
public System.ServiceModel.MessagePropertyAttribute : Attribute {
private string name
public string Name
public string get_Name()
public void set_Name(string value)
}
public System.ServiceModel.MessageSecurityOverHttp : object {
private SecurityAlgorithmSuite alg_suite
private MessageCredentialType client_credential_type
private bool negotiate_service_credential
public SecurityAlgorithmSuite AlgorithmSuite
public MessageCredentialType ClientCredentialType
public bool NegotiateServiceCredential
public SecurityAlgorithmSuite get_AlgorithmSuite()
public void set_AlgorithmSuite(SecurityAlgorithmSuite value)
public MessageCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(MessageCredentialType value)
public bool get_NegotiateServiceCredential()
public void set_NegotiateServiceCredential(bool value)
protected bool IsSecureConversationEnabled()
public bool ShouldSerializeAlgorithmSuite()
public bool ShouldSerializeClientCredentialType()
public bool ShouldSerializeNegotiateServiceCredential()
}
public System.ServiceModel.MessageSecurityOverMsmq : object {
private SecurityAlgorithmSuite suite
private MessageCredentialType cred
public SecurityAlgorithmSuite AlgorithmSuite
public MessageCredentialType ClientCredentialType
public SecurityAlgorithmSuite get_AlgorithmSuite()
public void set_AlgorithmSuite(SecurityAlgorithmSuite value)
public MessageCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(MessageCredentialType value)
}
public System.ServiceModel.MessageSecurityOverTcp : object {
private SecurityAlgorithmSuite alg_suite
private MessageCredentialType client_credential_type
public SecurityAlgorithmSuite AlgorithmSuite
public MessageCredentialType ClientCredentialType
public SecurityAlgorithmSuite get_AlgorithmSuite()
public void set_AlgorithmSuite(SecurityAlgorithmSuite value)
public MessageCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(MessageCredentialType value)
}
public System.ServiceModel.MessageSecurityVersion : object {
private MessageSecurityVersion wss10_basic
private MessageSecurityVersion wss11
private MessageSecurityVersion wss11_basic
private MessageSecurityVersion wss10_2007_basic
private MessageSecurityVersion wss11_2007_basic
private MessageSecurityVersion wss11_2007
private SecurityVersion <SecurityVersion>k__BackingField
private SecureConversationVersion <SecureConversationVersion>k__BackingField
private TrustVersion <TrustVersion>k__BackingField
public MessageSecurityVersion Default
public MessageSecurityVersion WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10
public MessageSecurityVersion WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11
public MessageSecurityVersion WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10
public MessageSecurityVersion WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10
public MessageSecurityVersion WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10
public MessageSecurityVersion WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12
public BasicSecurityProfileVersion BasicSecurityProfileVersion
public SecurityTokenVersion SecurityTokenVersion
public SecurityVersion SecurityVersion
public SecureConversationVersion SecureConversationVersion
public SecurityPolicyVersion SecurityPolicyVersion
public TrustVersion TrustVersion
public MessageSecurityVersion get_Default()
public MessageSecurityVersion get_WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10()
public MessageSecurityVersion get_WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11()
public MessageSecurityVersion get_WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10()
public MessageSecurityVersion get_WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10()
public MessageSecurityVersion get_WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10()
public MessageSecurityVersion get_WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12()
public BasicSecurityProfileVersion get_BasicSecurityProfileVersion()
public SecurityTokenVersion get_SecurityTokenVersion()
public SecurityVersion get_SecurityVersion()
internal void set_SecurityVersion(SecurityVersion value)
public SecureConversationVersion get_SecureConversationVersion()
internal void set_SecureConversationVersion(SecureConversationVersion value)
public SecurityPolicyVersion get_SecurityPolicyVersion()
public TrustVersion get_TrustVersion()
internal void set_TrustVersion(TrustVersion value)
}
internal System.ServiceModel.MonoInternal.ClientRuntimeChannel : CommunicationObject {
private ClientRuntime runtime
private EndpointAddress remote_address
private ContractDescription contract
private MessageVersion message_version
private TimeSpan default_open_timeout
private TimeSpan default_close_timeout
private IChannel channel
private IChannelFactory factory
private Nullable`1<TimeSpan> operation_timeout
private ChannelFactory channel_factory
private ProcessDelegate _processDelegate
private RequestDelegate requestDelegate
private SendDelegate sendDelegate
private bool did_interactive_initialization
private bool <AllowInitializationUI>k__BackingField
private EventHandler`1<UnknownMessageReceivedEventArgs> UnknownMessageReceived
private bool <AllowOutputBatching>k__BackingField
private Action`1<TimeSpan> close_delegate
private Action`1<TimeSpan> open_callback
private IExtensionCollection`1<IContextChannel> extensions
public ContractDescription Contract
public ClientRuntime Runtime
private IRequestChannel RequestChannel
private IOutputChannel OutputChannel
internal IDuplexChannel DuplexChannel
public bool AllowInitializationUI
public bool DidInteractiveInitialization
public Uri Via
public bool AllowOutputBatching
public IInputSession InputSession
public EndpointAddress LocalAddress
public TimeSpan OperationTimeout
public IOutputSession OutputSession
public EndpointAddress RemoteAddress
public string SessionId
protected internal TimeSpan DefaultOpenTimeout
protected internal TimeSpan DefaultCloseTimeout
private IChannel OperationChannel
public IExtensionCollection`1<IContextChannel> Extensions
public void .ctor(ServiceEndpoint endpoint, ChannelFactory channelFactory, EndpointAddress remoteAddress, Uri via)
public void .ctor(ClientRuntime runtime, ContractDescription contract, TimeSpan openTimeout, TimeSpan closeTimeout, IChannel contextChannel, IChannelFactory factory, MessageVersion messageVersion, EndpointAddress remoteAddress, Uri via)
public ContractDescription get_Contract()
public ClientRuntime get_Runtime()
private IRequestChannel get_RequestChannel()
private IOutputChannel get_OutputChannel()
internal IDuplexChannel get_DuplexChannel()
public bool get_AllowInitializationUI()
public void set_AllowInitializationUI(bool value)
public bool get_DidInteractiveInitialization()
public Uri get_Via()
public IAsyncResult BeginDisplayInitializationUI(AsyncCallback callback, object state)
public void EndDisplayInitializationUI(IAsyncResult result)
public void DisplayInitializationUI()
private void OnInitializationUI()
public void Dispose()
public void add_UnknownMessageReceived(EventHandler`1<UnknownMessageReceivedEventArgs> value)
public void remove_UnknownMessageReceived(EventHandler`1<UnknownMessageReceivedEventArgs> value)
public bool get_AllowOutputBatching()
public void set_AllowOutputBatching(bool value)
public IInputSession get_InputSession()
public EndpointAddress get_LocalAddress()
public TimeSpan get_OperationTimeout()
public void set_OperationTimeout(TimeSpan value)
public IOutputSession get_OutputSession()
public EndpointAddress get_RemoteAddress()
public string get_SessionId()
protected internal TimeSpan get_DefaultOpenTimeout()
protected internal TimeSpan get_DefaultCloseTimeout()
protected void OnAbort()
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
private IChannel get_OperationChannel()
public T GetProperty()
public IExtensionCollection`1<IContextChannel> get_Extensions()
public IAsyncResult BeginProcess(MethodBase method, string operationName, Object[] parameters, AsyncCallback callback, object asyncState)
public object EndProcess(MethodBase method, string operationName, Object[] parameters, IAsyncResult result)
public object Process(MethodBase method, string operationName, Object[] parameters, OperationContext context)
private object Process(MethodBase method, string operationName, bool isAsync, Object[]& parameters, OperationContext context)
private object DoProcess(MethodBase method, string operationName, bool isAsync, Object[]& parameters, OperationContext context)
private OperationDescription SelectOperation(MethodBase method, string operationName, Object[] parameters)
private void Output(OperationDescription od, Object[] parameters, OperationContext context)
private object Request(OperationDescription od, bool isAsync, Object[]& parameters, OperationContext context)
internal Message Request(Message msg, TimeSpan timeout)
internal Message RequestCorrelated(Message msg, TimeSpan timeout, IOutputChannel channel)
internal IAsyncResult BeginRequest(Message msg, TimeSpan timeout, AsyncCallback callback, object state)
internal Message EndRequest(IAsyncResult result)
internal void Send(Message msg, TimeSpan timeout)
internal IAsyncResult BeginSend(Message msg, TimeSpan timeout, AsyncCallback callback, object state)
internal void EndSend(IAsyncResult result)
private Message CreateRequest(ClientOperation op, Object[] parameters, OperationContext context)
}
internal System.ServiceModel.MonoInternal.DuplexClientRuntimeChannel : ClientRuntimeChannel {
private InstanceContext callback_instance
private Action`1<TimeSpan> session_shutdown_delegate
private bool loop
private TimeSpan receive_timeout
private bool receive_synchronously
private IAsyncResult loop_result
private AutoResetEvent loop_handle
private AutoResetEvent finish_handle
private AutoResetEvent receive_reply_handle
internal Queue`1<Action`1<Message>> ReplyHandlerQueue
public bool AutomaticInputSessionShutdown
public InstanceContext CallbackInstance
public void .ctor(ServiceEndpoint endpoint, ChannelFactory factory, EndpointAddress remoteAddress, Uri via)
public bool get_AutomaticInputSessionShutdown()
public void set_AutomaticInputSessionShutdown(bool value)
public InstanceContext get_CallbackInstance()
public void set_CallbackInstance(InstanceContext value)
public void CloseOutputSession(TimeSpan timeout)
public IAsyncResult BeginCloseOutputSession(TimeSpan timeout, AsyncCallback callback, object state)
public void EndCloseOutputSession(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
protected void OnOpened()
protected void OnClose(TimeSpan timeout)
private void ProcessRequestOrInput(IInputChannel input)
private void TryReceiveDone(IAsyncResult result)
private void ProcessInputCore(IInputChannel input, Message message)
private void ProcessInput(IInputChannel input, Message message)
private bool MessageMatchesEndpointDispatcher(Message req, EndpointDispatcher endpoint)
internal Message RequestCorrelated(Message msg, TimeSpan timeout, IOutputChannel channel)
}
internal System.ServiceModel.MonoInternal.DuplexServiceRuntimeChannel : ServiceRuntimeChannel {
private ClientRuntimeChannel client
private ContractDescription contract
private InstanceContext <CallbackInstance>k__BackingField
private Action`1<TimeSpan> session_shutdown_delegate
public bool AllowOutputBatching
public TimeSpan OperationTimeout
public bool AutomaticInputSessionShutdown
public InstanceContext CallbackInstance
public ContractDescription Contract
public OperationContext Context
public void .ctor(IChannel channel, DispatchRuntime runtime)
public bool get_AllowOutputBatching()
public void set_AllowOutputBatching(bool value)
public TimeSpan get_OperationTimeout()
public void set_OperationTimeout(TimeSpan value)
public bool get_AutomaticInputSessionShutdown()
public void set_AutomaticInputSessionShutdown(bool value)
public InstanceContext get_CallbackInstance()
public void set_CallbackInstance(InstanceContext value)
public ContractDescription get_Contract()
public void set_Context(OperationContext value)
public void CloseOutputSession(TimeSpan timeout)
public IAsyncResult BeginCloseOutputSession(TimeSpan timeout, AsyncCallback callback, object state)
public void EndCloseOutputSession(IAsyncResult result)
public IAsyncResult BeginProcess(MethodBase method, string operationName, Object[] parameters, AsyncCallback callback, object asyncState)
public object EndProcess(MethodBase method, string operationName, Object[] parameters, IAsyncResult result)
public object Process(MethodBase method, string operationName, Object[] parameters, OperationContext context)
}
internal System.ServiceModel.MonoInternal.IInternalContextChannel {
public ContractDescription Contract
public ContractDescription get_Contract()
public object Process(MethodBase method, string operationName, Object[] parameters, OperationContext context)
public IAsyncResult BeginProcess(MethodBase method, string operationName, Object[] parameters, AsyncCallback callback, object asyncState)
public object EndProcess(MethodBase method, string operationName, Object[] parameters, IAsyncResult result)
}
internal System.ServiceModel.MonoInternal.ServiceRuntimeChannel : CommunicationObject {
private IExtensionCollection`1<IContextChannel> extensions
private IChannel channel
private DispatchRuntime runtime
private bool <AllowOutputBatching>k__BackingField
private TimeSpan <OperationTimeout>k__BackingField
private Action`1<TimeSpan> close_delegate
public bool AllowOutputBatching
public IInputSession InputSession
public EndpointAddress LocalAddress
public TimeSpan OperationTimeout
public IOutputSession OutputSession
public EndpointAddress RemoteAddress
public string SessionId
protected internal TimeSpan DefaultOpenTimeout
protected internal TimeSpan DefaultCloseTimeout
public IExtensionCollection`1<IContextChannel> Extensions
public Uri ListenUri
public void .ctor(IChannel channel, DispatchRuntime runtime)
private void OnChannelClose(object o, EventArgs e)
public bool get_AllowOutputBatching()
public void set_AllowOutputBatching(bool value)
public IInputSession get_InputSession()
public EndpointAddress get_LocalAddress()
public TimeSpan get_OperationTimeout()
public void set_OperationTimeout(TimeSpan value)
public IOutputSession get_OutputSession()
public EndpointAddress get_RemoteAddress()
public string get_SessionId()
protected internal TimeSpan get_DefaultOpenTimeout()
protected internal TimeSpan get_DefaultCloseTimeout()
protected void OnAbort()
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnOpen(TimeSpan timeout)
public T GetProperty()
public IExtensionCollection`1<IContextChannel> get_Extensions()
public Uri get_ListenUri()
public void Dispose()
}
public System.ServiceModel.MsmqAuthenticationMode : Enum {
public int value__
public MsmqAuthenticationMode None
public MsmqAuthenticationMode WindowsDomain
public MsmqAuthenticationMode Certificate
}
public System.ServiceModel.MsmqBindingBase : Binding {
private Uri custom_dead_letter_queue
private DeadLetterQueue dead_letter_queue
private bool durable
private bool exactly_once
private bool use_msmq_trace
private bool use_source_journal
private int max_retry_cycles
private int receive_retry_count
private long max_recv_msg_size
private ReceiveErrorHandling receive_error_handling
private TimeSpan retry_cycle_delay
private TimeSpan ttl
public Uri CustomDeadLetterQueue
public DeadLetterQueue DeadLetterQueue
public bool Durable
public bool ExactlyOnce
public long MaxReceivedMessageSize
public int MaxRetryCycles
public ReceiveErrorHandling ReceiveErrorHandling
public int ReceiveRetryCount
public TimeSpan RetryCycleDelay
public TimeSpan TimeToLive
public string Scheme
public bool UseMsmqTracing
public bool UseSourceJournal
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
public bool ReceiveContextEnabled
public TimeSpan ValidityDuration
public Uri get_CustomDeadLetterQueue()
public void set_CustomDeadLetterQueue(Uri value)
public DeadLetterQueue get_DeadLetterQueue()
public void set_DeadLetterQueue(DeadLetterQueue value)
public bool get_Durable()
public void set_Durable(bool value)
public bool get_ExactlyOnce()
public void set_ExactlyOnce(bool value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public int get_MaxRetryCycles()
public void set_MaxRetryCycles(int value)
public ReceiveErrorHandling get_ReceiveErrorHandling()
public void set_ReceiveErrorHandling(ReceiveErrorHandling value)
public int get_ReceiveRetryCount()
public void set_ReceiveRetryCount(int value)
public TimeSpan get_RetryCycleDelay()
public void set_RetryCycleDelay(TimeSpan value)
public TimeSpan get_TimeToLive()
public void set_TimeToLive(TimeSpan value)
public string get_Scheme()
public bool get_UseMsmqTracing()
public void set_UseMsmqTracing(bool value)
public bool get_UseSourceJournal()
public void set_UseSourceJournal(bool value)
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.get_ReceiveSynchronously()
public bool get_ReceiveContextEnabled()
public void set_ReceiveContextEnabled(bool value)
public TimeSpan get_ValidityDuration()
public void set_ValidityDuration(TimeSpan value)
}
public System.ServiceModel.MsmqEncryptionAlgorithm : Enum {
public int value__
public MsmqEncryptionAlgorithm RC4Stream
public MsmqEncryptionAlgorithm Aes
}
public System.ServiceModel.MsmqException : ExternalException {
public void .ctor(string message)
public void .ctor(string message, int error)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding : MsmqBindingBase {
private MsmqIntegrationSecurity security
private MsmqMessageSerializationFormat format
public MsmqIntegrationSecurity Security
public MsmqMessageSerializationFormat SerializationFormat
public void .ctor(MsmqIntegrationSecurityMode securityMode)
public void .ctor(string configurationName)
public MsmqIntegrationSecurity get_Security()
public MsmqMessageSerializationFormat get_SerializationFormat()
public void set_SerializationFormat(MsmqMessageSerializationFormat value)
public BindingElementCollection CreateBindingElements()
public void set_Security(MsmqIntegrationSecurity value)
public bool ShouldSerializeSecurity()
}
public System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement : MsmqBindingElementBase {
private MsmqMessageSerializationFormat format
private Type[] target_types
public MsmqMessageSerializationFormat SerializationFormat
public string Scheme
public Type[] TargetSerializationTypes
public MsmqMessageSerializationFormat get_SerializationFormat()
public void set_SerializationFormat(MsmqMessageSerializationFormat value)
public string get_Scheme()
public Type[] get_TargetSerializationTypes()
public void set_TargetSerializationTypes(Type[] value)
public BindingElement Clone()
public bool CanBuildChannelFactory(BindingContext context)
public IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context)
public bool CanBuildChannelListener(BindingContext context)
public IChannelListener`1<TChannel> BuildChannelListener(BindingContext context)
public T GetProperty(BindingContext context)
}
public System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty : object {
public string Name
private Nullable`1<AcknowledgeTypes> <AcknowledgeType>k__BackingField
private Nullable`1<Acknowledgment> <Acknowledgment>k__BackingField
private Uri <AdministrationQueue>k__BackingField
private Nullable`1<int> <AppSpecific>k__BackingField
private Nullable`1<DateTime> <ArrivedTime>k__BackingField
private Nullable`1<bool> <Authenticated>k__BackingField
private object <Body>k__BackingField
private Nullable`1<int> <BodyType>k__BackingField
private string <CorrelationId>k__BackingField
private Uri <DestinationQueue>k__BackingField
private Byte[] <Extension>k__BackingField
private string <Id>k__BackingField
private string <Label>k__BackingField
private Nullable`1<MessageType> <MessageType>k__BackingField
private Nullable`1<MessagePriority> <Priority>k__BackingField
private Uri <ResponseQueue>k__BackingField
private Byte[] <SenderId>k__BackingField
private Nullable`1<DateTime> <SentTime>k__BackingField
private Nullable`1<TimeSpan> <TimeToReachQueue>k__BackingField
public Nullable`1<AcknowledgeTypes> AcknowledgeType
public Nullable`1<Acknowledgment> Acknowledgment
public Uri AdministrationQueue
public Nullable`1<int> AppSpecific
public Nullable`1<DateTime> ArrivedTime
public Nullable`1<bool> Authenticated
public object Body
public Nullable`1<int> BodyType
public string CorrelationId
public Uri DestinationQueue
public Byte[] Extension
public string Id
public string Label
public Nullable`1<MessageType> MessageType
public Nullable`1<MessagePriority> Priority
public Uri ResponseQueue
public Byte[] SenderId
public Nullable`1<DateTime> SentTime
public Nullable`1<TimeSpan> TimeToReachQueue
public MsmqIntegrationMessageProperty Get(Message message)
internal MsmqIntegrationMessageProperty Get(Message message)
private Uri CreateUriFromQueue(MessageQueue queue)
public Nullable`1<AcknowledgeTypes> get_AcknowledgeType()
public void set_AcknowledgeType(Nullable`1<AcknowledgeTypes> value)
public Nullable`1<Acknowledgment> get_Acknowledgment()
private void set_Acknowledgment(Nullable`1<Acknowledgment> value)
public Uri get_AdministrationQueue()
public void set_AdministrationQueue(Uri value)
public Nullable`1<int> get_AppSpecific()
public void set_AppSpecific(Nullable`1<int> value)
public Nullable`1<DateTime> get_ArrivedTime()
private void set_ArrivedTime(Nullable`1<DateTime> value)
public Nullable`1<bool> get_Authenticated()
private void set_Authenticated(Nullable`1<bool> value)
public object get_Body()
public void set_Body(object value)
public Nullable`1<int> get_BodyType()
public void set_BodyType(Nullable`1<int> value)
public string get_CorrelationId()
public void set_CorrelationId(string value)
public Uri get_DestinationQueue()
private void set_DestinationQueue(Uri value)
public Byte[] get_Extension()
public void set_Extension(Byte[] value)
public string get_Id()
private void set_Id(string value)
public string get_Label()
public void set_Label(string value)
public Nullable`1<MessageType> get_MessageType()
private void set_MessageType(Nullable`1<MessageType> value)
public Nullable`1<MessagePriority> get_Priority()
public void set_Priority(Nullable`1<MessagePriority> value)
public Uri get_ResponseQueue()
public void set_ResponseQueue(Uri value)
public Byte[] get_SenderId()
private void set_SenderId(Byte[] value)
public Nullable`1<DateTime> get_SentTime()
private void set_SentTime(Nullable`1<DateTime> value)
public Nullable`1<TimeSpan> get_TimeToReachQueue()
public void set_TimeToReachQueue(Nullable`1<TimeSpan> value)
}
public System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity : object {
private MsmqIntegrationSecurityMode mode
private MsmqTransportSecurity transport
public MsmqIntegrationSecurityMode Mode
public MsmqTransportSecurity Transport
public MsmqIntegrationSecurityMode get_Mode()
public void set_Mode(MsmqIntegrationSecurityMode value)
public MsmqTransportSecurity get_Transport()
public void set_Transport(MsmqTransportSecurity value)
}
public System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode : Enum {
public int value__
public MsmqIntegrationSecurityMode None
public MsmqIntegrationSecurityMode Transport
}
public System.ServiceModel.MsmqIntegration.MsmqMessage`1 : object {
private MsmqIntegrationMessageProperty prop
public Nullable`1<AcknowledgeTypes> AcknowledgeType
public Nullable`1<Acknowledgment> Acknowledgment
public Uri AdministrationQueue
public Nullable`1<int> AppSpecific
public Nullable`1<DateTime> ArrivedTime
public Nullable`1<bool> Authenticated
public T Body
public Nullable`1<int> BodyType
public string CorrelationId
public Uri DestinationQueue
public Byte[] Extension
public string Id
public string Label
public Nullable`1<MessageType> MessageType
public Nullable`1<MessagePriority> Priority
public Uri ResponseQueue
public Byte[] SenderId
public Nullable`1<DateTime> SentTime
public Nullable`1<TimeSpan> TimeToReachQueue
public void .ctor(T body)
public Nullable`1<AcknowledgeTypes> get_AcknowledgeType()
public void set_AcknowledgeType(Nullable`1<AcknowledgeTypes> value)
public Nullable`1<Acknowledgment> get_Acknowledgment()
public Uri get_AdministrationQueue()
public void set_AdministrationQueue(Uri value)
public Nullable`1<int> get_AppSpecific()
public void set_AppSpecific(Nullable`1<int> value)
public Nullable`1<DateTime> get_ArrivedTime()
public Nullable`1<bool> get_Authenticated()
public T get_Body()
public void set_Body(T value)
public Nullable`1<int> get_BodyType()
public void set_BodyType(Nullable`1<int> value)
public string get_CorrelationId()
public void set_CorrelationId(string value)
public Uri get_DestinationQueue()
public Byte[] get_Extension()
public void set_Extension(Byte[] value)
public string get_Id()
public string get_Label()
public void set_Label(string value)
public Nullable`1<MessageType> get_MessageType()
public Nullable`1<MessagePriority> get_Priority()
public void set_Priority(Nullable`1<MessagePriority> value)
public Uri get_ResponseQueue()
public void set_ResponseQueue(Uri value)
public Byte[] get_SenderId()
public Nullable`1<DateTime> get_SentTime()
public Nullable`1<TimeSpan> get_TimeToReachQueue()
public void set_TimeToReachQueue(Nullable`1<TimeSpan> value)
}
public System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat : Enum {
public int value__
public MsmqMessageSerializationFormat Xml
public MsmqMessageSerializationFormat Binary
public MsmqMessageSerializationFormat ActiveX
public MsmqMessageSerializationFormat ByteArray
public MsmqMessageSerializationFormat Stream
}
public System.ServiceModel.MsmqPoisonMessageException : PoisonMessageException {
public long MessageLookupId
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
public long get_MessageLookupId()
}
public System.ServiceModel.MsmqSecureHashAlgorithm : Enum {
public int value__
public MsmqSecureHashAlgorithm MD5
public MsmqSecureHashAlgorithm Sha1
public MsmqSecureHashAlgorithm Sha256
public MsmqSecureHashAlgorithm Sha512
}
public System.ServiceModel.MsmqTransportSecurity : object {
private MsmqAuthenticationMode auth
private MsmqEncryptionAlgorithm enc
private MsmqSecureHashAlgorithm hash
private ProtectionLevel protection_level
public MsmqAuthenticationMode MsmqAuthenticationMode
public MsmqEncryptionAlgorithm MsmqEncryptionAlgorithm
public MsmqSecureHashAlgorithm MsmqSecureHashAlgorithm
public ProtectionLevel MsmqProtectionLevel
public void .ctor(MsmqTransportSecurity other)
public MsmqAuthenticationMode get_MsmqAuthenticationMode()
public void set_MsmqAuthenticationMode(MsmqAuthenticationMode value)
public MsmqEncryptionAlgorithm get_MsmqEncryptionAlgorithm()
public void set_MsmqEncryptionAlgorithm(MsmqEncryptionAlgorithm value)
public MsmqSecureHashAlgorithm get_MsmqSecureHashAlgorithm()
public void set_MsmqSecureHashAlgorithm(MsmqSecureHashAlgorithm value)
public ProtectionLevel get_MsmqProtectionLevel()
public void set_MsmqProtectionLevel(ProtectionLevel value)
}
public System.ServiceModel.NamedPipeTransportSecurity : object {
private ProtectionLevel <ProtectionLevel>k__BackingField
public ProtectionLevel ProtectionLevel
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
}
public System.ServiceModel.NetHttpBinding : HttpBindingBase {
private NetHttpMessageEncoding <MessageEncoding>k__BackingField
private OptionalReliableSession <ReliableSession>k__BackingField
private BasicHttpSecurity <Security>k__BackingField
public NetHttpMessageEncoding MessageEncoding
public OptionalReliableSession ReliableSession
public BasicHttpSecurity Security
public WebSocketTransportSettings WebSocketSettings
public string Scheme
public void .ctor(BasicHttpSecurityMode securityMode)
public void .ctor(string configurationName)
public void .ctor(BasicHttpSecurityMode securityMode, bool reliableSessionEnabled)
public NetHttpMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(NetHttpMessageEncoding value)
public OptionalReliableSession get_ReliableSession()
public void set_ReliableSession(OptionalReliableSession value)
public BasicHttpSecurity get_Security()
public void set_Security(BasicHttpSecurity value)
public WebSocketTransportSettings get_WebSocketSettings()
public string get_Scheme()
public BindingElementCollection CreateBindingElements()
public bool ShouldSerializeReliableSession()
public bool ShouldSerializeSecurity()
}
public System.ServiceModel.NetHttpMessageEncoding : Enum {
public int value__
public NetHttpMessageEncoding Binary
public NetHttpMessageEncoding Text
public NetHttpMessageEncoding Mtom
}
public System.ServiceModel.NetHttpsBinding : HttpBindingBase {
private NetHttpMessageEncoding <MessageEncoding>k__BackingField
private OptionalReliableSession <ReliableSession>k__BackingField
private BasicHttpsSecurity <Security>k__BackingField
public NetHttpMessageEncoding MessageEncoding
public OptionalReliableSession ReliableSession
public BasicHttpsSecurity Security
public WebSocketTransportSettings WebSocketSettings
public string Scheme
public void .ctor(BasicHttpsSecurityMode securityMode)
public void .ctor(string configurationName)
public void .ctor(BasicHttpsSecurityMode securityMode, bool reliableSessionEnabled)
public NetHttpMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(NetHttpMessageEncoding value)
public OptionalReliableSession get_ReliableSession()
public void set_ReliableSession(OptionalReliableSession value)
public BasicHttpsSecurity get_Security()
public void set_Security(BasicHttpsSecurity value)
public WebSocketTransportSettings get_WebSocketSettings()
public string get_Scheme()
public BindingElementCollection CreateBindingElements()
public bool ShouldSerializeReliableSession()
public bool ShouldSerializeSecurity()
}
public System.ServiceModel.NetMsmqBinding : MsmqBindingBase {
private NetMsmqSecurity security
private bool use_ad
private long max_buffer_pool_size
private QueueTransferProtocol queue_tr_protocol
private XmlDictionaryReaderQuotas quotas
private EnvelopeVersion envelope_version
public NetMsmqSecurity Security
public EnvelopeVersion EnvelopeVersion
public long MaxBufferPoolSize
public QueueTransferProtocol QueueTransferProtocol
public XmlDictionaryReaderQuotas ReaderQuotas
public bool UseActiveDirectory
public void .ctor(NetMsmqSecurityMode securityMode)
public void .ctor(string configurationName)
public NetMsmqSecurity get_Security()
public EnvelopeVersion get_EnvelopeVersion()
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public QueueTransferProtocol get_QueueTransferProtocol()
public void set_QueueTransferProtocol(QueueTransferProtocol value)
public XmlDictionaryReaderQuotas get_ReaderQuotas()
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
public bool get_UseActiveDirectory()
public void set_UseActiveDirectory(bool value)
public BindingElementCollection CreateBindingElements()
public void set_Security(NetMsmqSecurity value)
public bool ShouldSerializeReaderQuotas()
public bool ShouldSerializeSecurity()
}
public System.ServiceModel.NetMsmqSecurity : object {
private NetMsmqSecurityMode mode
private MessageSecurityOverMsmq message
private MsmqTransportSecurity transport
public MessageSecurityOverMsmq Message
public NetMsmqSecurityMode Mode
public MsmqTransportSecurity Transport
internal void .ctor(NetMsmqSecurityMode mode)
public MessageSecurityOverMsmq get_Message()
public NetMsmqSecurityMode get_Mode()
public void set_Mode(NetMsmqSecurityMode value)
public MsmqTransportSecurity get_Transport()
public void set_Message(MessageSecurityOverMsmq value)
public void set_Transport(MsmqTransportSecurity value)
}
public System.ServiceModel.NetMsmqSecurityMode : Enum {
public int value__
public NetMsmqSecurityMode None
public NetMsmqSecurityMode Transport
public NetMsmqSecurityMode Message
public NetMsmqSecurityMode Both
}
public System.ServiceModel.NetNamedPipeBinding : Binding {
private XmlDictionaryReaderQuotas reader_quotas
private NetNamedPipeSecurity security
private NamedPipeTransportBindingElement transport
private int <MaxConnections>k__BackingField
private bool <TransactionFlow>k__BackingField
private TransactionProtocol <TransactionProtocol>k__BackingField
public bool IsPnrpAvailable
public EnvelopeVersion EnvelopeVersion
public HostNameComparisonMode HostNameComparisonMode
public long MaxBufferPoolSize
public int MaxBufferSize
public int MaxConnections
public long MaxReceivedMessageSize
public XmlDictionaryReaderQuotas ReaderQuotas
public string Scheme
public NetNamedPipeSecurity Security
public bool TransactionFlow
public TransactionProtocol TransactionProtocol
public TransferMode TransferMode
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
public bool get_IsPnrpAvailable()
public void .ctor(NetNamedPipeSecurityMode securityMode)
public void .ctor(string configurationName)
public EnvelopeVersion get_EnvelopeVersion()
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public int get_MaxConnections()
public void set_MaxConnections(int value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public XmlDictionaryReaderQuotas get_ReaderQuotas()
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
public string get_Scheme()
public NetNamedPipeSecurity get_Security()
public bool get_TransactionFlow()
public void set_TransactionFlow(bool value)
public TransactionProtocol get_TransactionProtocol()
public void set_TransactionProtocol(TransactionProtocol value)
public TransferMode get_TransferMode()
public void set_TransferMode(TransferMode value)
public BindingElementCollection CreateBindingElements()
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.get_ReceiveSynchronously()
public void set_Security(NetNamedPipeSecurity value)
public bool ShouldSerializeMaxConnections()
public bool ShouldSerializeReaderQuotas()
public bool ShouldSerializeSecurity()
public bool ShouldSerializeTransactionProtocol()
}
public System.ServiceModel.NetNamedPipeSecurity : object {
private NetNamedPipeSecurityMode <Mode>k__BackingField
private NamedPipeTransportSecurity <Transport>k__BackingField
public NetNamedPipeSecurityMode Mode
public NamedPipeTransportSecurity Transport
public NetNamedPipeSecurityMode get_Mode()
public void set_Mode(NetNamedPipeSecurityMode value)
public NamedPipeTransportSecurity get_Transport()
private void set_Transport(NamedPipeTransportSecurity value)
public bool ShouldSerializeTransport()
}
public System.ServiceModel.NetNamedPipeSecurityMode : Enum {
public int value__
public NetNamedPipeSecurityMode None
public NetNamedPipeSecurityMode Transport
}
public System.ServiceModel.NetPeerTcpBinding : Binding {
private XmlDictionaryReaderQuotas reader_quotas
private PeerResolverSettings resolver
private PeerSecuritySettings security
private PeerTransportBindingElement transport
public bool IsPnrpAvailable
public IPAddress ListenIPAddress
public long MaxBufferPoolSize
public long MaxReceivedMessageSize
public int Port
public PeerResolverSettings Resolver
public XmlDictionaryReaderQuotas ReaderQuotas
public string Scheme
public PeerSecuritySettings Security
public EnvelopeVersion EnvelopeVersion
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
public bool get_IsPnrpAvailable()
public void .ctor(string configurationName)
public IPAddress get_ListenIPAddress()
public void set_ListenIPAddress(IPAddress value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public int get_Port()
public void set_Port(int value)
public PeerResolverSettings get_Resolver()
public XmlDictionaryReaderQuotas get_ReaderQuotas()
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
public string get_Scheme()
public PeerSecuritySettings get_Security()
public EnvelopeVersion get_EnvelopeVersion()
public BindingElementCollection CreateBindingElements()
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.get_ReceiveSynchronously()
public void set_Security(PeerSecuritySettings value)
public bool ShouldSerializeReaderQuotas()
public bool ShouldSerializeSecurity()
}
public System.ServiceModel.NetTcpBinding : Binding {
private int max_conn
private OptionalReliableSession reliable_session
private NetTcpSecurity security
private XmlDictionaryReaderQuotas reader_quotas
private bool transaction_flow
private TransactionProtocol transaction_protocol
private TcpTransportBindingElement transport
public HostNameComparisonMode HostNameComparisonMode
public int ListenBacklog
public long MaxBufferPoolSize
public int MaxBufferSize
public int MaxConnections
public long MaxReceivedMessageSize
public bool PortSharingEnabled
public OptionalReliableSession ReliableSession
public XmlDictionaryReaderQuotas ReaderQuotas
public NetTcpSecurity Security
public EnvelopeVersion EnvelopeVersion
public TransferMode TransferMode
public bool TransactionFlow
public TransactionProtocol TransactionProtocol
public string Scheme
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
public void .ctor(SecurityMode securityMode)
public void .ctor(SecurityMode securityMode, bool reliableSessionEnabled)
public void .ctor(string configurationName)
internal void .ctor(TcpTransportBindingElement transport, NetTcpSecurity security, bool reliableSessionEnabled)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public int get_ListenBacklog()
public void set_ListenBacklog(int value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public int get_MaxBufferSize()
public void set_MaxBufferSize(int value)
public int get_MaxConnections()
public void set_MaxConnections(int value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public bool get_PortSharingEnabled()
public void set_PortSharingEnabled(bool value)
public OptionalReliableSession get_ReliableSession()
public XmlDictionaryReaderQuotas get_ReaderQuotas()
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
public NetTcpSecurity get_Security()
public void set_Security(NetTcpSecurity value)
public EnvelopeVersion get_EnvelopeVersion()
public TransferMode get_TransferMode()
public void set_TransferMode(TransferMode value)
public bool get_TransactionFlow()
public void set_TransactionFlow(bool value)
public TransactionProtocol get_TransactionProtocol()
public void set_TransactionProtocol(TransactionProtocol value)
public string get_Scheme()
public BindingElementCollection CreateBindingElements()
private BindingElement GetTransport()
private SecurityBindingElement CreateMessageSecurity()
private BindingElement CreateTransportSecurity()
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.get_ReceiveSynchronously()
public void set_ReliableSession(OptionalReliableSession value)
public bool ShouldSerializeListenBacklog()
public bool ShouldSerializeMaxConnections()
public bool ShouldSerializeReaderQuotas()
public bool ShouldSerializeReliableSession()
public bool ShouldSerializeSecurity()
public bool ShouldSerializeTransactionProtocol()
}
public System.ServiceModel.NetTcpContextBinding : NetTcpBinding {
public Uri ClientCallbackAddress
public bool ContextManagementEnabled
public ProtectionLevel ContextProtectionLevel
public void .ctor(SecurityMode securityMode)
public void .ctor(SecurityMode securityMode, bool reliableSessionEnabled)
public void .ctor(string configName)
public Uri get_ClientCallbackAddress()
public void set_ClientCallbackAddress(Uri value)
public bool get_ContextManagementEnabled()
public void set_ContextManagementEnabled(bool value)
public ProtectionLevel get_ContextProtectionLevel()
public void set_ContextProtectionLevel(ProtectionLevel value)
}
public System.ServiceModel.NetTcpSecurity : object {
private MessageSecurityOverTcp message
private SecurityMode mode
private TcpTransportSecurity transport
public MessageSecurityOverTcp Message
public SecurityMode Mode
public TcpTransportSecurity Transport
internal void .ctor(SecurityMode mode)
public MessageSecurityOverTcp get_Message()
public void set_Message(MessageSecurityOverTcp value)
public SecurityMode get_Mode()
public void set_Mode(SecurityMode value)
public TcpTransportSecurity get_Transport()
public void set_Transport(TcpTransportSecurity value)
}
public System.ServiceModel.NonDualMessageSecurityOverHttp : MessageSecurityOverHttp {
private bool establish_sec_ctx
public bool EstablishSecurityContext
public bool get_EstablishSecurityContext()
public void set_EstablishSecurityContext(bool value)
}
public System.ServiceModel.OperationBehaviorAttribute : Attribute {
private ImpersonationOption impersonation
private bool tx_auto_complete
private bool tx_scope_required
private bool auto_dispose_params
private ReleaseInstanceMode mode
public bool AutoDisposeParameters
public ImpersonationOption Impersonation
public ReleaseInstanceMode ReleaseInstanceMode
public bool TransactionAutoComplete
public bool TransactionScopeRequired
public bool get_AutoDisposeParameters()
public void set_AutoDisposeParameters(bool value)
public ImpersonationOption get_Impersonation()
public void set_Impersonation(ImpersonationOption value)
public ReleaseInstanceMode get_ReleaseInstanceMode()
public void set_ReleaseInstanceMode(ReleaseInstanceMode value)
public bool get_TransactionAutoComplete()
public void set_TransactionAutoComplete(bool value)
public bool get_TransactionScopeRequired()
public void set_TransactionScopeRequired(bool value)
private void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription description, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch)
private void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription description, ClientOperation proxy)
private void System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription description)
}
public System.ServiceModel.OperationContext : object {
private OperationContext current
private Message incoming_message
private EndpointDispatcher dispatcher
private IContextChannel channel
private RequestContext request_ctx
private ExtensionCollection`1<OperationContext> extensions
private MessageHeaders outgoing_headers
private MessageProperties outgoing_properties
private InstanceContext instance_context
private EventHandler OperationCompleted
private bool <IsUserContext>k__BackingField
public OperationContext Current
public IContextChannel Channel
public IExtensionCollection`1<OperationContext> Extensions
public EndpointDispatcher EndpointDispatcher
public bool HasSupportingTokens
public ServiceHostBase Host
public MessageHeaders IncomingMessageHeaders
public MessageProperties IncomingMessageProperties
public MessageVersion IncomingMessageVersion
public InstanceContext InstanceContext
public bool IsUserContext
public MessageHeaders OutgoingMessageHeaders
public MessageProperties OutgoingMessageProperties
public RequestContext RequestContext
public string SessionId
public ServiceSecurityContext ServiceSecurityContext
public ICollection`1<SupportingTokenSpecification> SupportingTokens
internal Message IncomingMessage
public ClaimsPrincipal ClaimsPrincipal
public OperationContext get_Current()
public void set_Current(OperationContext value)
public void .ctor(IContextChannel channel)
internal void .ctor(IContextChannel channel, bool isUserContext)
public void add_OperationCompleted(EventHandler value)
public void remove_OperationCompleted(EventHandler value)
public IContextChannel get_Channel()
public IExtensionCollection`1<OperationContext> get_Extensions()
public EndpointDispatcher get_EndpointDispatcher()
public void set_EndpointDispatcher(EndpointDispatcher value)
public bool get_HasSupportingTokens()
public ServiceHostBase get_Host()
public MessageHeaders get_IncomingMessageHeaders()
public MessageProperties get_IncomingMessageProperties()
public MessageVersion get_IncomingMessageVersion()
public InstanceContext get_InstanceContext()
internal void set_InstanceContext(InstanceContext value)
public bool get_IsUserContext()
private void set_IsUserContext(bool value)
public MessageHeaders get_OutgoingMessageHeaders()
public MessageProperties get_OutgoingMessageProperties()
public RequestContext get_RequestContext()
public void set_RequestContext(RequestContext value)
public string get_SessionId()
public ServiceSecurityContext get_ServiceSecurityContext()
public ICollection`1<SupportingTokenSpecification> get_SupportingTokens()
public T GetCallbackChannel()
public void SetTransactionComplete()
internal Message get_IncomingMessage()
internal void set_IncomingMessage(Message value)
public ClaimsPrincipal get_ClaimsPrincipal()
}
public System.ServiceModel.OperationContextScope : object {
private OperationContext previous
public void .ctor(IContextChannel channel)
public void .ctor(OperationContext context)
public void Dispose()
}
public System.ServiceModel.OperationContractAttribute : Attribute {
private string action
private string reply_action
private string name
private bool is_initiating
private bool is_terminating
private bool is_oneway
private bool is_async
private ProtectionLevel protection_level
private bool has_protection_level
public string Action
public bool AsyncPattern
public bool IsInitiating
public bool IsOneWay
public bool IsTerminating
public string Name
public bool HasProtectionLevel
public ProtectionLevel ProtectionLevel
public string ReplyAction
public string get_Action()
public void set_Action(string value)
public bool get_AsyncPattern()
public void set_AsyncPattern(bool value)
public bool get_IsInitiating()
public void set_IsInitiating(bool value)
public bool get_IsOneWay()
public void set_IsOneWay(bool value)
public bool get_IsTerminating()
public void set_IsTerminating(bool value)
public string get_Name()
public void set_Name(string value)
public bool get_HasProtectionLevel()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public string get_ReplyAction()
public void set_ReplyAction(string value)
}
public System.ServiceModel.OperationFormatStyle : Enum {
public int value__
public OperationFormatStyle Document
public OperationFormatStyle Rpc
}
public System.ServiceModel.OperationFormatUse : Enum {
public int value__
public OperationFormatUse Literal
public OperationFormatUse Encoded
}
public System.ServiceModel.OptionalReliableSession : ReliableSession {
private bool enabled
private ReliableSessionBindingElement binding
public bool Enabled
public void .ctor(ReliableSessionBindingElement reliableSessionBindingElement)
public bool get_Enabled()
public void set_Enabled(bool value)
}
public System.ServiceModel.PeerHopCountAttribute : object {
public string Actor
public bool MustUnderstand
public string Name
public string Namespace
public ProtectionLevel ProtectionLevel
public bool Relay
public string get_Actor()
public bool get_MustUnderstand()
public string get_Name()
public string get_Namespace()
public ProtectionLevel get_ProtectionLevel()
public bool get_Relay()
}
public System.ServiceModel.PeerMessageOrigination : Enum {
public int value__
public PeerMessageOrigination Local
public PeerMessageOrigination Remote
}
public System.ServiceModel.PeerMessagePropagation : Enum {
public int value__
public PeerMessagePropagation None
public PeerMessagePropagation Local
public PeerMessagePropagation Remote
public PeerMessagePropagation LocalAndRemote
}
public System.ServiceModel.PeerMessagePropagationFilter : object {
public PeerMessagePropagation ShouldMessagePropagate(Message message, PeerMessageOrigination origination)
}
public System.ServiceModel.PeerNode : object {
private EventHandler Offline
private EventHandler Online
private bool <IsOnline>k__BackingField
private string <MeshId>k__BackingField
private ulong <NodeId>k__BackingField
private object <RegisteredId>k__BackingField
private int <Port>k__BackingField
public bool IsOnline
internal string MeshId
internal ulong NodeId
internal bool IsOpen
internal object RegisteredId
public int Port
public PeerMessagePropagationFilter MessagePropagationFilter
internal void .ctor(string meshId, int port)
public void add_Offline(EventHandler value)
public void remove_Offline(EventHandler value)
public void add_Online(EventHandler value)
public void remove_Online(EventHandler value)
public bool get_IsOnline()
internal void set_IsOnline(bool value)
internal string get_MeshId()
private void set_MeshId(string value)
internal ulong get_NodeId()
internal void set_NodeId(ulong value)
internal bool get_IsOpen()
internal object get_RegisteredId()
internal void set_RegisteredId(object value)
public int get_Port()
private void set_Port(int value)
public PeerMessagePropagationFilter get_MessagePropagationFilter()
public void set_MessagePropagationFilter(PeerMessagePropagationFilter value)
public void RefreshConnection()
public string ToString()
internal void SetOnline()
internal void SetOffline()
}
public System.ServiceModel.PeerNodeAddress : object {
private EndpointAddress endpoint
private ReadOnlyCollection`1<IPAddress> peer_addresses
public EndpointAddress EndpointAddress
public ReadOnlyCollection`1<IPAddress> IPAddresses
private EndpointAddress10 SerializedEndpoint
private IPAddress[] SerializedIPAddresses
public void .ctor(EndpointAddress endpointAddress, ReadOnlyCollection`1<IPAddress> ipAddresses)
public EndpointAddress get_EndpointAddress()
public ReadOnlyCollection`1<IPAddress> get_IPAddresses()
private EndpointAddress10 get_SerializedEndpoint()
private void set_SerializedEndpoint(EndpointAddress10 value)
private IPAddress[] get_SerializedIPAddresses()
private void set_SerializedIPAddresses(IPAddress[] value)
}
internal System.ServiceModel.PeerNodeImpl : PeerNode {
private IPAddress listen_address
private PeerMessagePropagationFilter <MessagePropagationFilter>k__BackingField
public PeerMessagePropagationFilter MessagePropagationFilter
internal void .ctor(string meshId, IPAddress fixedListenAddress, int port)
public PeerMessagePropagationFilter get_MessagePropagationFilter()
public void set_MessagePropagationFilter(PeerMessagePropagationFilter value)
}
public System.ServiceModel.PeerResolver : object {
public bool CanShareReferrals
public bool get_CanShareReferrals()
public void Initialize(EndpointAddress address, Binding binding, ClientCredentials credentials, PeerReferralPolicy referralPolicy)
public object Register(string meshId, PeerNodeAddress nodeAddress, TimeSpan timeout)
public ReadOnlyCollection`1<PeerNodeAddress> Resolve(string meshId, int maxAddresses, TimeSpan timeout)
public void Unregister(object registrationId, TimeSpan timeout)
public void Update(object registrationId, PeerNodeAddress updatedNodeAddress, TimeSpan timeout)
}
internal System.ServiceModel.PeerResolverImpl : PeerResolver {
public bool CanShareReferrals
public bool get_CanShareReferrals()
public object Register(string meshId, PeerNodeAddress nodeAddress, TimeSpan timeout)
public ReadOnlyCollection`1<PeerNodeAddress> Resolve(string meshId, int maxAddresses, TimeSpan timeout)
public void Unregister(object registrationId, TimeSpan timeout)
public void Update(object registrationId, PeerNodeAddress updatedNodeAddress, TimeSpan timeout)
}
internal System.ServiceModel.PeerResolvers.ConnectInfo : object {
private ConnectInfoDC dc
public PeerNodeAddress Address
public ulong NodeId
public PeerNodeAddress get_Address()
public void set_Address(PeerNodeAddress value)
public ulong get_NodeId()
public void set_NodeId(ulong value)
}
internal System.ServiceModel.PeerResolvers.ConnectInfoDC : object {
private PeerNodeAddress <Address>k__BackingField
private ulong <NodeId>k__BackingField
public PeerNodeAddress Address
public ulong NodeId
public PeerNodeAddress get_Address()
public void set_Address(PeerNodeAddress value)
public ulong get_NodeId()
public void set_NodeId(ulong value)
}
public System.ServiceModel.PeerResolvers.CustomPeerResolverService : object {
private ServiceHost localhost
private int port
private ICustomPeerResolverClient client
private bool control_shape
private bool opened
private TimeSpan refresh_interval
private TimeSpan cleanup_interval
public TimeSpan CleanupInterval
public bool ControlShape
public TimeSpan RefreshInterval
private void SetupCustomPeerResolverServiceHost()
public TimeSpan get_CleanupInterval()
public void set_CleanupInterval(TimeSpan value)
public bool get_ControlShape()
public void set_ControlShape(bool value)
public TimeSpan get_RefreshInterval()
public void set_RefreshInterval(TimeSpan value)
public void Close()
public ServiceSettingsResponseInfo GetServiceSettings()
public void Open()
public RefreshResponseInfo Refresh(RefreshInfo refreshInfo)
public RegisterResponseInfo Register(RegisterInfo registerInfo)
public RegisterResponseInfo Register(Guid clientId, string meshId, PeerNodeAddress address)
public ResolveResponseInfo Resolve(ResolveInfo resolveInfo)
public void Unregister(UnregisterInfo unregisterInfo)
public RegisterResponseInfo Update(UpdateInfo updateInfo)
}
internal System.ServiceModel.PeerResolvers.DisconnectInfo : object {
private DisconnectInfoDC dc
public Referral[] Referrals
public DisconnectReason Reason
public Referral[] get_Referrals()
public void set_Referrals(Referral[] value)
public DisconnectReason get_Reason()
public void set_Reason(DisconnectReason value)
}
internal System.ServiceModel.PeerResolvers.DisconnectInfoDC : object {
private Referral[] <Referrals>k__BackingField
private DisconnectReason <Reason>k__BackingField
public Referral[] Referrals
public DisconnectReason Reason
public Referral[] get_Referrals()
public void set_Referrals(Referral[] value)
public DisconnectReason get_Reason()
public void set_Reason(DisconnectReason value)
}
internal System.ServiceModel.PeerResolvers.DisconnectReason : Enum {
public int value__
public DisconnectReason LeavingMesh
public DisconnectReason NotUsefulNeighbor
public DisconnectReason DuplicateNeighbor
public DisconnectReason DuplicateNodeId
}
internal System.ServiceModel.PeerResolvers.ICustomPeerResolverContract {
public PeerServiceSettingsInfo GetCustomServiceSettings()
public void SetCustomServiceSettings(PeerServiceSettingsInfo info)
}
internal System.ServiceModel.PeerResolvers.IPeerConnectorContract {
public void Connect(ConnectInfo connect)
public void Welcome(WelcomeInfo welcome)
public void Refuse(RefuseInfo refuse)
public void Disconnect(DisconnectInfo disconnect)
public void LinkUtility(LinkUtilityInfo linkUtility)
public void Ping()
public void SendMessage(Message msg)
}
public System.ServiceModel.PeerResolvers.IPeerResolverContract {
public ServiceSettingsResponseInfo GetServiceSettings()
public RefreshResponseInfo Refresh(RefreshInfo refreshInfo)
public RegisterResponseInfo Register(RegisterInfo registerInfo)
public ResolveResponseInfo Resolve(ResolveInfo resolveInfo)
public void Unregister(UnregisterInfo unregisterInfo)
public RegisterResponseInfo Update(UpdateInfo updateInfo)
}
internal System.ServiceModel.PeerResolvers.LinkUtilityInfo : object {
private LinkUtilityInfoDC dc
public UInt32 Total
public UInt32 Useful
public UInt32 get_Total()
public void set_Total(UInt32 value)
public UInt32 get_Useful()
public void set_Useful(UInt32 value)
}
internal System.ServiceModel.PeerResolvers.LinkUtilityInfoDC : object {
private UInt32 <Total>k__BackingField
private UInt32 <Useful>k__BackingField
public UInt32 Total
public UInt32 Useful
public UInt32 get_Total()
public void set_Total(UInt32 value)
public UInt32 get_Useful()
public void set_Useful(UInt32 value)
}
internal System.ServiceModel.PeerResolvers.LocalPeerResolverService : object {
private TextWriter log
private Dictionary`2<string, Mesh> mesh_map
private bool <ControlShape>k__BackingField
private TimeSpan <RefreshInterval>k__BackingField
private TimeSpan <CleanupInterval>k__BackingField
public bool ControlShape
public TimeSpan RefreshInterval
public TimeSpan CleanupInterval
public void .ctor(TextWriter log)
public bool get_ControlShape()
public void set_ControlShape(bool value)
public TimeSpan get_RefreshInterval()
public void set_RefreshInterval(TimeSpan value)
public TimeSpan get_CleanupInterval()
public void set_CleanupInterval(TimeSpan value)
public PeerServiceSettingsInfo GetCustomServiceSettings()
public void SetCustomServiceSettings(PeerServiceSettingsInfo info)
public ServiceSettingsResponseInfo GetServiceSettings()
public RefreshResponseInfo Refresh(RefreshInfo refreshInfo)
public RegisterResponseInfo Register(RegisterInfo registerInfo)
public ResolveResponseInfo Resolve(ResolveInfo resolveInfo)
public void Unregister(UnregisterInfo unregisterInfo)
public RegisterResponseInfo Update(UpdateInfo updateInfo)
private Mesh GetExistingMesh(string meshId)
private Node RegisterNode(Mesh mesh, Guid clientId, PeerNodeAddress addr)
}
internal System.ServiceModel.PeerResolvers.Mesh : List`1<Node> {
private string <Id>k__BackingField
public string Id
public void .ctor(string id)
public string get_Id()
private void set_Id(string value)
public Node GetRegisteredNode(Guid registrationId)
}
internal System.ServiceModel.PeerResolvers.Node : object {
private Guid <RegistrationId>k__BackingField
private Guid <ClientId>k__BackingField
private PeerNodeAddress <Address>k__BackingField
private DateTime <LastRefreshTime>k__BackingField
public Guid RegistrationId
public Guid ClientId
public PeerNodeAddress Address
public DateTime LastRefreshTime
public Guid get_RegistrationId()
private void set_RegistrationId(Guid value)
public Guid get_ClientId()
public void set_ClientId(Guid value)
public PeerNodeAddress get_Address()
public void set_Address(PeerNodeAddress value)
public DateTime get_LastRefreshTime()
public void set_LastRefreshTime(DateTime value)
public void Refresh()
public void Update(PeerNodeAddress addr)
}
public System.ServiceModel.PeerResolvers.PeerCustomResolverSettings : object {
private EndpointAddress <Address>k__BackingField
private Binding <Binding>k__BackingField
private PeerResolver <Resolver>k__BackingField
public EndpointAddress Address
public Binding Binding
public bool IsBindingSpecified
public PeerResolver Resolver
public EndpointAddress get_Address()
public void set_Address(EndpointAddress value)
public Binding get_Binding()
public void set_Binding(Binding value)
public bool get_IsBindingSpecified()
public PeerResolver get_Resolver()
public void set_Resolver(PeerResolver value)
internal PeerCustomResolverBindingElement CreateBinding()
internal PeerCustomResolverSettings Clone()
}
public System.ServiceModel.PeerResolvers.PeerReferralPolicy : Enum {
public int value__
public PeerReferralPolicy Service
public PeerReferralPolicy Share
public PeerReferralPolicy DoNotShare
}
public System.ServiceModel.PeerResolvers.PeerResolverMode : Enum {
public int value__
public PeerResolverMode Auto
public PeerResolverMode Pnrp
public PeerResolverMode Custom
}
public System.ServiceModel.PeerResolvers.PeerResolverSettings : object {
private PeerCustomResolverSettings custom
private PeerResolverMode mode
private PeerResolverMode <Mode>k__BackingField
private PeerReferralPolicy <ReferralPolicy>k__BackingField
public PeerCustomResolverSettings Custom
public PeerResolverMode Mode
public PeerReferralPolicy ReferralPolicy
public PeerCustomResolverSettings get_Custom()
public PeerResolverMode get_Mode()
public void set_Mode(PeerResolverMode value)
public PeerReferralPolicy get_ReferralPolicy()
public void set_ReferralPolicy(PeerReferralPolicy value)
internal BindingElement CreateBinding()
}
internal System.ServiceModel.PeerResolvers.PeerServiceSettingsInfo : object {
private TimeSpan <RefreshInterval>k__BackingField
private TimeSpan <CleanupInterval>k__BackingField
private bool <ControlMeshShape>k__BackingField
public TimeSpan RefreshInterval
public TimeSpan CleanupInterval
public bool ControlMeshShape
public TimeSpan get_RefreshInterval()
public void set_RefreshInterval(TimeSpan value)
public TimeSpan get_CleanupInterval()
public void set_CleanupInterval(TimeSpan value)
public bool get_ControlMeshShape()
public void set_ControlMeshShape(bool value)
}
internal System.ServiceModel.PeerResolvers.Referral : object {
private ulong <Id>k__BackingField
private PeerNodeAddress <PeerNodeAddress>k__BackingField
public ulong Id
public PeerNodeAddress PeerNodeAddress
public ulong get_Id()
public void set_Id(ulong value)
public PeerNodeAddress get_PeerNodeAddress()
public void set_PeerNodeAddress(PeerNodeAddress value)
}
public System.ServiceModel.PeerResolvers.RefreshInfo : object {
private RefreshInfoDC body
private RefreshInfoDC Body
public string MeshId
public Guid RegistrationId
private RefreshInfoDC get_Body()
private void set_Body(RefreshInfoDC value)
public void .ctor(string meshId, Guid regId)
public string get_MeshId()
public Guid get_RegistrationId()
public bool HasBody()
}
internal System.ServiceModel.PeerResolvers.RefreshInfoDC : object {
private string mesh_id
private Guid registration_id
public string MeshId
public Guid RegistrationId
public string get_MeshId()
public void set_MeshId(string value)
public Guid get_RegistrationId()
public void set_RegistrationId(Guid value)
}
public System.ServiceModel.PeerResolvers.RefreshResponseInfo : object {
private RefreshResponseInfoDC body
private RefreshResponseInfoDC Body
public TimeSpan RegistrationLifetime
public RefreshResult Result
private RefreshResponseInfoDC get_Body()
private void set_Body(RefreshResponseInfoDC value)
public void .ctor(TimeSpan registrationLifetime, RefreshResult result)
public TimeSpan get_RegistrationLifetime()
public void set_RegistrationLifetime(TimeSpan value)
public RefreshResult get_Result()
public void set_Result(RefreshResult value)
public bool HasBody()
}
internal System.ServiceModel.PeerResolvers.RefreshResponseInfoDC : object {
private TimeSpan registration_lifetime
private RefreshResult result
public TimeSpan RegistrationLifetime
public RefreshResult Result
public TimeSpan get_RegistrationLifetime()
public void set_RegistrationLifetime(TimeSpan value)
public RefreshResult get_Result()
public void set_Result(RefreshResult value)
}
public System.ServiceModel.PeerResolvers.RefreshResult : Enum {
public int value__
public RefreshResult Success
public RefreshResult RegistrationNotFound
}
internal System.ServiceModel.PeerResolvers.RefuseInfo : object {
private RefuseInfoDC dc
public Referral[] Referrals
public RefuseReason Reason
public Referral[] get_Referrals()
public void set_Referrals(Referral[] value)
public RefuseReason get_Reason()
public void set_Reason(RefuseReason value)
}
internal System.ServiceModel.PeerResolvers.RefuseInfoDC : object {
private Referral[] <Referrals>k__BackingField
private RefuseReason <Reason>k__BackingField
public Referral[] Referrals
public RefuseReason Reason
public Referral[] get_Referrals()
public void set_Referrals(Referral[] value)
public RefuseReason get_Reason()
public void set_Reason(RefuseReason value)
}
internal System.ServiceModel.PeerResolvers.RefuseReason : Enum {
public int value__
public RefuseReason DuplicateNeighbor
public RefuseReason DuplicateNodeId
public RefuseReason NodeBusy
}
public System.ServiceModel.PeerResolvers.RegisterInfo : object {
private RegisterInfoDC body
private RegisterInfoDC Body
public Guid ClientId
public string MeshId
public PeerNodeAddress NodeAddress
private RegisterInfoDC get_Body()
private void set_Body(RegisterInfoDC value)
public void .ctor(Guid client, string meshId, PeerNodeAddress address)
public Guid get_ClientId()
public string get_MeshId()
public PeerNodeAddress get_NodeAddress()
public bool HasBody()
}
internal System.ServiceModel.PeerResolvers.RegisterInfoDC : object {
private Guid client_id
private string mesh_id
private PeerNodeAddress node_address
public Guid ClientId
public string MeshId
public PeerNodeAddress NodeAddress
public Guid get_ClientId()
public void set_ClientId(Guid value)
public string get_MeshId()
public void set_MeshId(string value)
public PeerNodeAddress get_NodeAddress()
public void set_NodeAddress(PeerNodeAddress value)
}
public System.ServiceModel.PeerResolvers.RegisterResponseInfo : object {
private RegisterResponseInfoDC body
private RegisterResponseInfoDC Body
public Guid RegistrationId
public TimeSpan RegistrationLifetime
private RegisterResponseInfoDC get_Body()
private void set_Body(RegisterResponseInfoDC value)
public void .ctor(Guid registrationId, TimeSpan registrationLifetime)
public Guid get_RegistrationId()
public void set_RegistrationId(Guid value)
public TimeSpan get_RegistrationLifetime()
public void set_RegistrationLifetime(TimeSpan value)
public bool HasBody()
}
internal System.ServiceModel.PeerResolvers.RegisterResponseInfoDC : object {
private Guid registration_id
private TimeSpan registration_lifetime
public Guid RegistrationId
public TimeSpan RegistrationLifetime
public Guid get_RegistrationId()
public void set_RegistrationId(Guid value)
public TimeSpan get_RegistrationLifetime()
public void set_RegistrationLifetime(TimeSpan value)
}
public System.ServiceModel.PeerResolvers.ResolveInfo : object {
private ResolveInfoDC body
private ResolveInfoDC Body
public Guid ClientId
public int MaxAddresses
public string MeshId
private ResolveInfoDC get_Body()
private void set_Body(ResolveInfoDC value)
public void .ctor(Guid clientId, string meshId, int maxAddresses)
public Guid get_ClientId()
public int get_MaxAddresses()
public string get_MeshId()
public bool HasBody()
}
internal System.ServiceModel.PeerResolvers.ResolveInfoDC : object {
private Guid client_id
private int max_addresses
private string mesh_id
public Guid ClientId
public int MaxAddresses
public string MeshId
public Guid get_ClientId()
public void set_ClientId(Guid value)
public int get_MaxAddresses()
public void set_MaxAddresses(int value)
public string get_MeshId()
public void set_MeshId(string value)
}
public System.ServiceModel.PeerResolvers.ResolveResponseInfo : object {
private ResolveResponseInfoDC body
private ResolveResponseInfoDC Body
public IList`1<PeerNodeAddress> Addresses
private ResolveResponseInfoDC get_Body()
private void set_Body(ResolveResponseInfoDC value)
public void .ctor(PeerNodeAddress[] addresses)
public IList`1<PeerNodeAddress> get_Addresses()
public void set_Addresses(IList`1<PeerNodeAddress> value)
public bool HasBody()
}
internal System.ServiceModel.PeerResolvers.ResolveResponseInfoDC : object {
private IList`1<PeerNodeAddress> addresses
public IList`1<PeerNodeAddress> Addresses
public IList`1<PeerNodeAddress> get_Addresses()
public void set_Addresses(IList`1<PeerNodeAddress> value)
}
public System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo : object {
private ServiceSettingsResponseInfoDC body
private ServiceSettingsResponseInfoDC Body
public bool ControlMeshShape
private ServiceSettingsResponseInfoDC get_Body()
private void set_Body(ServiceSettingsResponseInfoDC value)
public void .ctor(bool control)
public bool get_ControlMeshShape()
public void set_ControlMeshShape(bool value)
public bool HasBody()
}
internal System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfoDC : object {
private bool control_mesh_shape
public bool ControlMeshShape
public bool get_ControlMeshShape()
public void set_ControlMeshShape(bool value)
}
public System.ServiceModel.PeerResolvers.UnregisterInfo : object {
private UnregisterInfoDC body
private UnregisterInfoDC Body
public string MeshId
public Guid RegistrationId
private UnregisterInfoDC get_Body()
private void set_Body(UnregisterInfoDC value)
public void .ctor(string meshId, Guid registrationId)
public string get_MeshId()
public Guid get_RegistrationId()
public bool HasBody()
}
internal System.ServiceModel.PeerResolvers.UnregisterInfoDC : object {
private string mesh_id
private Guid registration_id
public string MeshId
public Guid RegistrationId
public string get_MeshId()
public void set_MeshId(string value)
public Guid get_RegistrationId()
public void set_RegistrationId(Guid value)
}
public System.ServiceModel.PeerResolvers.UpdateInfo : object {
private UpdateInfoDC body
private UpdateInfoDC Body
public Guid ClientId
public string MeshId
public PeerNodeAddress NodeAddress
public Guid RegistrationId
private UpdateInfoDC get_Body()
private void set_Body(UpdateInfoDC value)
public void .ctor(Guid registrationId, Guid client, string meshId, PeerNodeAddress address)
public Guid get_ClientId()
public string get_MeshId()
public PeerNodeAddress get_NodeAddress()
public Guid get_RegistrationId()
public bool HasBody()
}
internal System.ServiceModel.PeerResolvers.UpdateInfoDC : object {
private Guid client_id
private string mesh_id
private PeerNodeAddress node_address
private Guid registration_id
public Guid ClientId
public string MeshId
public PeerNodeAddress NodeAddress
public Guid RegistrationId
public Guid get_ClientId()
public void set_ClientId(Guid value)
public string get_MeshId()
public void set_MeshId(string value)
public PeerNodeAddress get_NodeAddress()
public void set_NodeAddress(PeerNodeAddress value)
public Guid get_RegistrationId()
public void set_RegistrationId(Guid value)
}
internal System.ServiceModel.PeerResolvers.WelcomeInfo : object {
private WelcomeInfoDC dc
public ulong NodeId
public Referral[] Referrals
public ulong get_NodeId()
public void set_NodeId(ulong value)
public Referral[] get_Referrals()
public void set_Referrals(Referral[] value)
}
internal System.ServiceModel.PeerResolvers.WelcomeInfoDC : object {
private ulong <NodeId>k__BackingField
private Referral[] <Referrals>k__BackingField
public ulong NodeId
public Referral[] Referrals
public ulong get_NodeId()
public void set_NodeId(ulong value)
public Referral[] get_Referrals()
public void set_Referrals(Referral[] value)
}
public System.ServiceModel.PeerSecuritySettings : object {
private SecurityMode mode
private PeerTransportSecuritySettings <Transport>k__BackingField
public SecurityMode Mode
public PeerTransportSecuritySettings Transport
public SecurityMode get_Mode()
public void set_Mode(SecurityMode value)
public PeerTransportSecuritySettings get_Transport()
private void set_Transport(PeerTransportSecuritySettings value)
internal void CopyTo(PeerSecuritySettings other)
public bool ShouldSerializeMode()
public bool ShouldSerializeTransport()
}
public System.ServiceModel.PeerTransportCredentialType : Enum {
public int value__
public PeerTransportCredentialType Password
public PeerTransportCredentialType Certificate
}
public System.ServiceModel.PeerTransportSecuritySettings : object {
private PeerTransportCredentialType <CredentialType>k__BackingField
public PeerTransportCredentialType CredentialType
public PeerTransportCredentialType get_CredentialType()
public void set_CredentialType(PeerTransportCredentialType value)
}
public System.ServiceModel.PoisonMessageException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.ProtocolException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.QueuedDeliveryRequirementsMode : Enum {
public int value__
public QueuedDeliveryRequirementsMode Allowed
public QueuedDeliveryRequirementsMode Required
public QueuedDeliveryRequirementsMode NotAllowed
}
public System.ServiceModel.QueueTransferProtocol : Enum {
public int value__
public QueueTransferProtocol Native
public QueueTransferProtocol Srmp
public QueueTransferProtocol SrmpSecure
}
public System.ServiceModel.QuotaExceededException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.ReceiveContextEnabledAttribute : Attribute {
public bool ManualControl
public bool get_ManualControl()
public void set_ManualControl(bool value)
public void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters)
public void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation)
public void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation)
public void Validate(OperationDescription operationDescription)
}
public System.ServiceModel.ReceiveErrorHandling : Enum {
public int value__
public ReceiveErrorHandling Fault
public ReceiveErrorHandling Drop
public ReceiveErrorHandling Reject
public ReceiveErrorHandling Move
}
public System.ServiceModel.ReleaseInstanceMode : Enum {
public int value__
public ReleaseInstanceMode None
public ReleaseInstanceMode BeforeCall
public ReleaseInstanceMode AfterCall
public ReleaseInstanceMode BeforeAndAfterCall
}
public System.ServiceModel.ReliableMessagingVersion : object {
private ReliableMessagingVersion _default
private ReliableMessagingVersion _wsReliableMessaging11
private ReliableMessagingVersion _wsReliableMessagingFebruary2005
public ReliableMessagingVersion Default
public ReliableMessagingVersion WSReliableMessaging11
public ReliableMessagingVersion WSReliableMessagingFebruary2005
public ReliableMessagingVersion get_Default()
public ReliableMessagingVersion get_WSReliableMessaging11()
public ReliableMessagingVersion get_WSReliableMessagingFebruary2005()
}
public System.ServiceModel.ReliableSession : object {
private TimeSpan <InactivityTimeout>k__BackingField
private bool <Ordered>k__BackingField
public TimeSpan InactivityTimeout
public bool Ordered
public void .ctor(ReliableSessionBindingElement reliableSessionBindingElement)
public TimeSpan get_InactivityTimeout()
public void set_InactivityTimeout(TimeSpan value)
public bool get_Ordered()
public void set_Ordered(bool value)
}
public System.ServiceModel.RsaEndpointIdentity : EndpointIdentity {
private RSA rsa
public void .ctor(Claim identity)
public void .ctor(string publicKey)
public void .ctor(X509Certificate2 certificate)
}
public System.ServiceModel.Security.Basic128SecurityAlgorithmSuite : SecurityAlgorithmSuite {
public string DefaultAsymmetricKeyWrapAlgorithm
public string DefaultAsymmetricSignatureAlgorithm
public string DefaultCanonicalizationAlgorithm
public string DefaultDigestAlgorithm
public string DefaultEncryptionAlgorithm
public int DefaultEncryptionKeyDerivationLength
public int DefaultSignatureKeyDerivationLength
public int DefaultSymmetricKeyLength
public string DefaultSymmetricKeyWrapAlgorithm
public string DefaultSymmetricSignatureAlgorithm
public string get_DefaultAsymmetricKeyWrapAlgorithm()
public string get_DefaultAsymmetricSignatureAlgorithm()
public string get_DefaultCanonicalizationAlgorithm()
public string get_DefaultDigestAlgorithm()
public string get_DefaultEncryptionAlgorithm()
public int get_DefaultEncryptionKeyDerivationLength()
public int get_DefaultSignatureKeyDerivationLength()
public int get_DefaultSymmetricKeyLength()
public string get_DefaultSymmetricKeyWrapAlgorithm()
public string get_DefaultSymmetricSignatureAlgorithm()
public bool IsAsymmetricKeyLengthSupported(int length)
public bool IsSymmetricKeyLengthSupported(int length)
}
public System.ServiceModel.Security.Basic192SecurityAlgorithmSuite : SecurityAlgorithmSuite {
public string DefaultAsymmetricKeyWrapAlgorithm
public string DefaultAsymmetricSignatureAlgorithm
public string DefaultCanonicalizationAlgorithm
public string DefaultDigestAlgorithm
public string DefaultEncryptionAlgorithm
public int DefaultEncryptionKeyDerivationLength
public int DefaultSignatureKeyDerivationLength
public int DefaultSymmetricKeyLength
public string DefaultSymmetricKeyWrapAlgorithm
public string DefaultSymmetricSignatureAlgorithm
public string get_DefaultAsymmetricKeyWrapAlgorithm()
public string get_DefaultAsymmetricSignatureAlgorithm()
public string get_DefaultCanonicalizationAlgorithm()
public string get_DefaultDigestAlgorithm()
public string get_DefaultEncryptionAlgorithm()
public int get_DefaultEncryptionKeyDerivationLength()
public int get_DefaultSignatureKeyDerivationLength()
public int get_DefaultSymmetricKeyLength()
public string get_DefaultSymmetricKeyWrapAlgorithm()
public string get_DefaultSymmetricSignatureAlgorithm()
public bool IsAsymmetricKeyLengthSupported(int length)
public bool IsSymmetricKeyLengthSupported(int length)
}
public System.ServiceModel.Security.Basic256SecurityAlgorithmSuite : SecurityAlgorithmSuite {
public string DefaultAsymmetricKeyWrapAlgorithm
public string DefaultAsymmetricSignatureAlgorithm
public string DefaultCanonicalizationAlgorithm
public string DefaultDigestAlgorithm
public string DefaultEncryptionAlgorithm
public int DefaultEncryptionKeyDerivationLength
public int DefaultSignatureKeyDerivationLength
public int DefaultSymmetricKeyLength
public string DefaultSymmetricKeyWrapAlgorithm
public string DefaultSymmetricSignatureAlgorithm
public string get_DefaultAsymmetricKeyWrapAlgorithm()
public string get_DefaultAsymmetricSignatureAlgorithm()
public string get_DefaultCanonicalizationAlgorithm()
public string get_DefaultDigestAlgorithm()
public string get_DefaultEncryptionAlgorithm()
public int get_DefaultEncryptionKeyDerivationLength()
public int get_DefaultSignatureKeyDerivationLength()
public int get_DefaultSymmetricKeyLength()
public string get_DefaultSymmetricKeyWrapAlgorithm()
public string get_DefaultSymmetricSignatureAlgorithm()
public bool IsAsymmetricKeyLengthSupported(int length)
public bool IsSymmetricKeyLengthSupported(int length)
}
public System.ServiceModel.Security.BasicSecurityProfileVersion : object {
private BasicSecurityProfileVersion impl
public BasicSecurityProfileVersion BasicSecurityProfile10
public BasicSecurityProfileVersion get_BasicSecurityProfile10()
}
public System.ServiceModel.Security.ChannelProtectionRequirements : object {
private bool is_readonly
private ScopedMessagePartSpecification in_enc
private ScopedMessagePartSpecification in_sign
private ScopedMessagePartSpecification out_enc
private ScopedMessagePartSpecification out_sign
public bool IsReadOnly
public ScopedMessagePartSpecification IncomingEncryptionParts
public ScopedMessagePartSpecification IncomingSignatureParts
public ScopedMessagePartSpecification OutgoingEncryptionParts
public ScopedMessagePartSpecification OutgoingSignatureParts
public void .ctor(ChannelProtectionRequirements other)
public bool get_IsReadOnly()
public ScopedMessagePartSpecification get_IncomingEncryptionParts()
public ScopedMessagePartSpecification get_IncomingSignatureParts()
public ScopedMessagePartSpecification get_OutgoingEncryptionParts()
public ScopedMessagePartSpecification get_OutgoingSignatureParts()
public void Add(ChannelProtectionRequirements protectionRequirements)
public void Add(ChannelProtectionRequirements protectionRequirements, bool channelScopeOnly)
private void AddScopedParts(ScopedMessagePartSpecification src, ScopedMessagePartSpecification dst, bool channelOnly)
public ChannelProtectionRequirements CreateInverse()
public void MakeReadOnly()
internal ChannelProtectionRequirements CreateFromContract(ContractDescription cd)
private void AddPartProtectionRequirements(List`1<XmlQualifiedName> enc, List`1<XmlQualifiedName> sig, MessageHeaderDescription pd, ChannelProtectionRequirements cp)
}
public System.ServiceModel.Security.DataProtectionSecurityStateEncoder : SecurityStateEncoder {
private bool user
private Byte[] entropy
public bool UseCurrentUserProtectionScope
public void .ctor(bool useCurrentUserProtectionScope)
public void .ctor(bool useCurrentUserProtectionScope, Byte[] entropy)
public bool get_UseCurrentUserProtectionScope()
public Byte[] GetEntropy()
public string ToString()
protected internal Byte[] DecodeSecurityState(Byte[] data)
protected internal Byte[] EncodeSecurityState(Byte[] data)
}
public System.ServiceModel.Security.DispatchContext : object {
public ClaimsPrincipal Principal
public string RequestAction
public WSTrustMessage RequestMessage
public string ResponseAction
public RequestSecurityTokenResponse ResponseMessage
public SecurityTokenService SecurityTokenService
public string TrustNamespace
public ClaimsPrincipal get_Principal()
public void set_Principal(ClaimsPrincipal value)
public string get_RequestAction()
public void set_RequestAction(string value)
public WSTrustMessage get_RequestMessage()
public void set_RequestMessage(WSTrustMessage value)
public string get_ResponseAction()
public void set_ResponseAction(string value)
public RequestSecurityTokenResponse get_ResponseMessage()
public void set_ResponseMessage(RequestSecurityTokenResponse value)
public SecurityTokenService get_SecurityTokenService()
public void set_SecurityTokenService(SecurityTokenService value)
public string get_TrustNamespace()
public void set_TrustNamespace(string value)
}
public System.ServiceModel.Security.ExpiredSecurityTokenException : MessageSecurityException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext ctx)
}
public System.ServiceModel.Security.HttpDigestClientCredential : object {
private NetworkCredential credential
private TokenImpersonationLevel level
public NetworkCredential ClientCredential
public TokenImpersonationLevel AllowedImpersonationLevel
internal HttpDigestClientCredential Clone()
public NetworkCredential get_ClientCredential()
public void set_ClientCredential(NetworkCredential value)
public TokenImpersonationLevel get_AllowedImpersonationLevel()
public void set_AllowedImpersonationLevel(TokenImpersonationLevel value)
}
public System.ServiceModel.Security.IdentityVerifier : object {
public IdentityVerifier CreateDefault()
public bool CheckAccess(EndpointIdentity identity, AuthorizationContext authContext)
public bool TryGetIdentity(EndpointAddress reference, EndpointIdentity& identity)
}
public System.ServiceModel.Security.IEndpointIdentityProvider {
public EndpointIdentity GetIdentityOfSelf(SecurityTokenRequirement tokenRequirement)
}
public System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty : object {
public string Name
public string get_Name()
public IMessageProperty CreateCopy()
public void StartImpersonation(IDisposable& impersonationContext, IPrincipal& originalPrincipal, Boolean& isThreadPrincipalSet)
public void StopImpersonation(IDisposable impersonationContext, IPrincipal originalPrincipal, bool isThreadPrincipalSet)
public bool TryGet(Message message, ImpersonateOnSerializingReplyMessageProperty& property)
public bool TryGet(MessageProperties properties, ImpersonateOnSerializingReplyMessageProperty& property)
}
public System.ServiceModel.Security.InfocardInteractiveChannelInitializer : object {
private Binding binding
private ClientCredentials credentials
public Binding Binding
public void .ctor(ClientCredentials credentials, Binding binding)
public Binding get_Binding()
public IAsyncResult BeginDisplayInitializationUI(IClientChannel channel, AsyncCallback callback, object state)
public void EndDisplayInitializationUI(IAsyncResult result)
}
public System.ServiceModel.Security.ISecureConversationSession {
public bool TryReadSessionTokenIdentifier(XmlReader reader)
public void WriteSessionTokenIdentifier(XmlDictionaryWriter writer)
}
public System.ServiceModel.Security.ISecuritySession {
public EndpointIdentity RemoteIdentity
public EndpointIdentity get_RemoteIdentity()
}
public System.ServiceModel.Security.IssuedTokenClientCredential : object {
private bool cache
private Dictionary`2<Uri, KeyedByTypeCollection`1<IEndpointBehavior>> behaviors
private SecurityKeyEntropyMode entropy
private KeyedByTypeCollection`1<IEndpointBehavior> local_behaviors
private EndpointAddress local_issuer_address
private Binding local_issuer_binding
private TimeSpan max_cache_time
private int renewal_threshold
public bool CacheIssuedTokens
public int IssuedTokenRenewalThresholdPercentage
public Dictionary`2<Uri, KeyedByTypeCollection`1<IEndpointBehavior>> IssuerChannelBehaviors
public SecurityKeyEntropyMode DefaultKeyEntropyMode
public KeyedByTypeCollection`1<IEndpointBehavior> LocalIssuerChannelBehaviors
public EndpointAddress LocalIssuerAddress
public Binding LocalIssuerBinding
public TimeSpan MaxIssuedTokenCachingTime
internal IssuedTokenClientCredential Clone()
public bool get_CacheIssuedTokens()
public void set_CacheIssuedTokens(bool value)
public int get_IssuedTokenRenewalThresholdPercentage()
public void set_IssuedTokenRenewalThresholdPercentage(int value)
public Dictionary`2<Uri, KeyedByTypeCollection`1<IEndpointBehavior>> get_IssuerChannelBehaviors()
public SecurityKeyEntropyMode get_DefaultKeyEntropyMode()
public void set_DefaultKeyEntropyMode(SecurityKeyEntropyMode value)
public KeyedByTypeCollection`1<IEndpointBehavior> get_LocalIssuerChannelBehaviors()
public EndpointAddress get_LocalIssuerAddress()
public void set_LocalIssuerAddress(EndpointAddress value)
public Binding get_LocalIssuerBinding()
public void set_LocalIssuerBinding(Binding value)
public TimeSpan get_MaxIssuedTokenCachingTime()
public void set_MaxIssuedTokenCachingTime(TimeSpan value)
}
public System.ServiceModel.Security.IssuedTokenServiceCredential : object {
private bool allow_untrusted_rsa_issuers
private X509CertificateValidationMode cert_verify_mode
private X509CertificateValidator custom_cert_validator
private List`1<X509Certificate2> known_certs
private X509RevocationMode revocation_mode
private SamlSerializer saml_serializer
private StoreLocation store_location
private IList`1<string> <AllowedAudienceUris>k__BackingField
private AudienceUriMode <AudienceUriMode>k__BackingField
public IList`1<string> AllowedAudienceUris
public bool AllowUntrustedRsaIssuers
public AudienceUriMode AudienceUriMode
public X509CertificateValidationMode CertificateValidationMode
public X509CertificateValidator CustomCertificateValidator
public IList`1<X509Certificate2> KnownCertificates
public X509RevocationMode RevocationMode
public SamlSerializer SamlSerializer
public StoreLocation TrustedStoreLocation
internal IssuedTokenServiceCredential Clone()
public IList`1<string> get_AllowedAudienceUris()
private void set_AllowedAudienceUris(IList`1<string> value)
public bool get_AllowUntrustedRsaIssuers()
public void set_AllowUntrustedRsaIssuers(bool value)
public AudienceUriMode get_AudienceUriMode()
public void set_AudienceUriMode(AudienceUriMode value)
public X509CertificateValidationMode get_CertificateValidationMode()
public void set_CertificateValidationMode(X509CertificateValidationMode value)
public X509CertificateValidator get_CustomCertificateValidator()
public void set_CustomCertificateValidator(X509CertificateValidator value)
public IList`1<X509Certificate2> get_KnownCertificates()
public X509RevocationMode get_RevocationMode()
public void set_RevocationMode(X509RevocationMode value)
public SamlSerializer get_SamlSerializer()
public void set_SamlSerializer(SamlSerializer value)
public StoreLocation get_TrustedStoreLocation()
public void set_TrustedStoreLocation(StoreLocation value)
}
public System.ServiceModel.Security.IWSTrust13AsyncContract {
public IAsyncResult BeginTrust13Cancel(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13CancelResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13Issue(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13IssueResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13Renew(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13RenewResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13Validate(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13ValidateResponse(Message request, AsyncCallback callback, object state)
public Message EndTrust13Cancel(IAsyncResult ar)
public Message EndTrust13CancelResponse(IAsyncResult ar)
public Message EndTrust13Issue(IAsyncResult ar)
public Message EndTrust13IssueResponse(IAsyncResult ar)
public Message EndTrust13Renew(IAsyncResult ar)
public Message EndTrust13RenewResponse(IAsyncResult ar)
public Message EndTrust13Validate(IAsyncResult ar)
public Message EndTrust13ValidateResponse(IAsyncResult ar)
}
public System.ServiceModel.Security.IWSTrust13SyncContract {
public Message ProcessTrust13Cancel(Message message)
public Message ProcessTrust13CancelResponse(Message message)
public Message ProcessTrust13Issue(Message message)
public Message ProcessTrust13IssueResponse(Message message)
public Message ProcessTrust13Renew(Message message)
public Message ProcessTrust13RenewResponse(Message message)
public Message ProcessTrust13Validate(Message message)
public Message ProcessTrust13ValidateResponse(Message message)
}
public System.ServiceModel.Security.IWSTrustChannelContract {
public IAsyncResult BeginCancel(RequestSecurityToken request, AsyncCallback callback, object state)
public IAsyncResult BeginIssue(RequestSecurityToken request, AsyncCallback callback, object asyncState)
public IAsyncResult BeginRenew(RequestSecurityToken request, AsyncCallback callback, object state)
public IAsyncResult BeginValidate(RequestSecurityToken request, AsyncCallback callback, object state)
public RequestSecurityTokenResponse Cancel(RequestSecurityToken request)
public void EndCancel(IAsyncResult result, RequestSecurityTokenResponse& response)
public SecurityToken EndIssue(IAsyncResult result, RequestSecurityTokenResponse& response)
public void EndRenew(IAsyncResult result, RequestSecurityTokenResponse& response)
public void EndValidate(IAsyncResult result, RequestSecurityTokenResponse& response)
public SecurityToken Issue(RequestSecurityToken request)
public SecurityToken Issue(RequestSecurityToken request, RequestSecurityTokenResponse& response)
public RequestSecurityTokenResponse Renew(RequestSecurityToken request)
public RequestSecurityTokenResponse Validate(RequestSecurityToken request)
}
public System.ServiceModel.Security.IWSTrustContract {
public IAsyncResult BeginCancel(Message message, AsyncCallback callback, object asyncState)
public IAsyncResult BeginIssue(Message message, AsyncCallback callback, object asyncState)
public IAsyncResult BeginRenew(Message message, AsyncCallback callback, object asyncState)
public IAsyncResult BeginValidate(Message message, AsyncCallback callback, object asyncState)
public Message Cancel(Message message)
public Message EndCancel(IAsyncResult asyncResult)
public Message EndIssue(IAsyncResult asyncResult)
public Message EndRenew(IAsyncResult asyncResult)
public Message EndValidate(IAsyncResult asyncResult)
public Message Issue(Message message)
public Message Renew(Message message)
public Message Validate(Message message)
}
public System.ServiceModel.Security.IWSTrustFeb2005AsyncContract {
public IAsyncResult BeginTrustFeb2005Cancel(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005CancelResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005Issue(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005IssueResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005Renew(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005RenewResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005Validate(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005ValidateResponse(Message request, AsyncCallback callback, object state)
public Message EndTrustFeb2005Cancel(IAsyncResult ar)
public Message EndTrustFeb2005CancelResponse(IAsyncResult ar)
public Message EndTrustFeb2005Issue(IAsyncResult ar)
public Message EndTrustFeb2005IssueResponse(IAsyncResult ar)
public Message EndTrustFeb2005Renew(IAsyncResult ar)
public Message EndTrustFeb2005RenewResponse(IAsyncResult ar)
public Message EndTrustFeb2005Validate(IAsyncResult ar)
public Message EndTrustFeb2005ValidateResponse(IAsyncResult ar)
}
public System.ServiceModel.Security.IWSTrustFeb2005SyncContract {
public Message ProcessTrustFeb2005Cancel(Message message)
public Message ProcessTrustFeb2005CancelResponse(Message message)
public Message ProcessTrustFeb2005Issue(Message message)
public Message ProcessTrustFeb2005IssueResponse(Message message)
public Message ProcessTrustFeb2005Renew(Message message)
public Message ProcessTrustFeb2005RenewResponse(Message message)
public Message ProcessTrustFeb2005Validate(Message message)
public Message ProcessTrustFeb2005ValidateResponse(Message message)
}
public System.ServiceModel.Security.MessagePartSpecification : object {
private XmlQualifiedName[] empty
private MessagePartSpecification no_parts
private bool body
private IList`1<XmlQualifiedName> header_types
public MessagePartSpecification NoParts
public ICollection`1<XmlQualifiedName> HeaderTypes
public bool IsBodyIncluded
public bool IsReadOnly
public MessagePartSpecification get_NoParts()
public void .ctor(bool isBodyIncluded)
public void .ctor(XmlQualifiedName[] headerTypes)
public void .ctor(bool isBodyIncluded, XmlQualifiedName[] headerTypes)
public ICollection`1<XmlQualifiedName> get_HeaderTypes()
public bool get_IsBodyIncluded()
public void set_IsBodyIncluded(bool value)
public bool get_IsReadOnly()
public void Clear()
public void MakeReadOnly()
public void Union(MessagePartSpecification specification)
}
public System.ServiceModel.Security.MessageProtectionOrder : Enum {
public int value__
public MessageProtectionOrder SignBeforeEncrypt
public MessageProtectionOrder SignBeforeEncryptAndEncryptSignature
public MessageProtectionOrder EncryptBeforeSign
}
public System.ServiceModel.Security.MessageSecurityException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext ctx)
}
public System.ServiceModel.Security.NonceCache : object {
public int CacheSize
public TimeSpan CachingTimeSpan
public int get_CacheSize()
public void set_CacheSize(int value)
public TimeSpan get_CachingTimeSpan()
public void set_CachingTimeSpan(TimeSpan value)
public bool CheckNonce(Byte[] nonce)
public bool TryAddNonce(Byte[] nonce)
}
public System.ServiceModel.Security.PeerCredential : object {
private X509Certificate2 cert
private string mesh_pwd
private X509PeerCertificateAuthentication cert_auth
private X509PeerCertificateAuthentication peer_auth
public X509Certificate2 Certificate
public string MeshPassword
public X509PeerCertificateAuthentication MessageSenderAuthentication
public X509PeerCertificateAuthentication PeerAuthentication
internal PeerCredential Clone()
public X509Certificate2 get_Certificate()
public void set_Certificate(X509Certificate2 value)
public string get_MeshPassword()
public void set_MeshPassword(string value)
public X509PeerCertificateAuthentication get_MessageSenderAuthentication()
public void set_MessageSenderAuthentication(X509PeerCertificateAuthentication value)
public X509PeerCertificateAuthentication get_PeerAuthentication()
public void set_PeerAuthentication(X509PeerCertificateAuthentication value)
public void SetCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName)
public void SetCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue)
}
public System.ServiceModel.Security.ScopedMessagePartSpecification : object {
private Dictionary`2<string, MessagePartSpecification> table
private MessagePartSpecification parts
private bool is_readonly
public ICollection`1<string> Actions
public MessagePartSpecification ChannelParts
public bool IsReadOnly
public void .ctor(ScopedMessagePartSpecification other)
public ICollection`1<string> get_Actions()
public MessagePartSpecification get_ChannelParts()
public bool get_IsReadOnly()
public void AddParts(MessagePartSpecification parts)
public void AddParts(MessagePartSpecification parts, string action)
public void MakeReadOnly()
public bool TryGetParts(string action, MessagePartSpecification& parts)
public bool TryGetParts(string action, bool excludeChannelScope, MessagePartSpecification& parts)
}
public System.ServiceModel.Security.SecureConversationServiceCredential : object {
private Collection`1<Type> ctx_claim_types
private SecurityStateEncoder encoder
public Collection`1<Type> SecurityContextClaimTypes
public SecurityStateEncoder SecurityStateEncoder
internal SecureConversationServiceCredential Clone()
public Collection`1<Type> get_SecurityContextClaimTypes()
public SecurityStateEncoder get_SecurityStateEncoder()
public void set_SecurityStateEncoder(SecurityStateEncoder value)
}
public System.ServiceModel.Security.SecureConversationVersion : object {
private SecureConversationVersion <Default>k__BackingField
private SecureConversationVersion <WSSecureConversation13>k__BackingField
private SecureConversationVersion <WSSecureConversationFeb2005>k__BackingField
private XmlDictionaryString <Namespace>k__BackingField
private XmlDictionaryString <Prefix>k__BackingField
public SecureConversationVersion Default
public SecureConversationVersion WSSecureConversation13
public SecureConversationVersion WSSecureConversationFeb2005
public XmlDictionaryString Namespace
public XmlDictionaryString Prefix
public SecureConversationVersion get_Default()
private void set_Default(SecureConversationVersion value)
public SecureConversationVersion get_WSSecureConversation13()
private void set_WSSecureConversation13(SecureConversationVersion value)
public SecureConversationVersion get_WSSecureConversationFeb2005()
private void set_WSSecureConversationFeb2005(SecureConversationVersion value)
public XmlDictionaryString get_Namespace()
internal void set_Namespace(XmlDictionaryString value)
public XmlDictionaryString get_Prefix()
internal void set_Prefix(XmlDictionaryString value)
}
public System.ServiceModel.Security.SecurityAccessDeniedException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.Security.SecurityAlgorithmSuite : object {
private SecurityAlgorithmSuite b128
private SecurityAlgorithmSuite b128r
private SecurityAlgorithmSuite b128s
private SecurityAlgorithmSuite b128sr
private SecurityAlgorithmSuite b192
private SecurityAlgorithmSuite b192r
private SecurityAlgorithmSuite b192s
private SecurityAlgorithmSuite b192sr
private SecurityAlgorithmSuite b256
private SecurityAlgorithmSuite b256r
private SecurityAlgorithmSuite b256s
private SecurityAlgorithmSuite b256sr
private SecurityAlgorithmSuite tdes
private SecurityAlgorithmSuite tdes_r
private SecurityAlgorithmSuite tdes_s
private SecurityAlgorithmSuite tdes_sr
public SecurityAlgorithmSuite Default
public SecurityAlgorithmSuite Basic128
public SecurityAlgorithmSuite Basic128Rsa15
public SecurityAlgorithmSuite Basic128Sha256
public SecurityAlgorithmSuite Basic128Sha256Rsa15
public SecurityAlgorithmSuite Basic192
public SecurityAlgorithmSuite Basic192Rsa15
public SecurityAlgorithmSuite Basic192Sha256
public SecurityAlgorithmSuite Basic192Sha256Rsa15
public SecurityAlgorithmSuite Basic256
public SecurityAlgorithmSuite Basic256Rsa15
public SecurityAlgorithmSuite Basic256Sha256
public SecurityAlgorithmSuite Basic256Sha256Rsa15
public SecurityAlgorithmSuite TripleDes
public SecurityAlgorithmSuite TripleDesRsa15
public SecurityAlgorithmSuite TripleDesSha256
public SecurityAlgorithmSuite TripleDesSha256Rsa15
public string DefaultAsymmetricKeyWrapAlgorithm
public string DefaultAsymmetricSignatureAlgorithm
public string DefaultCanonicalizationAlgorithm
public string DefaultDigestAlgorithm
public string DefaultEncryptionAlgorithm
public int DefaultEncryptionKeyDerivationLength
public int DefaultSignatureKeyDerivationLength
public int DefaultSymmetricKeyLength
public string DefaultSymmetricKeyWrapAlgorithm
public string DefaultSymmetricSignatureAlgorithm
public SecurityAlgorithmSuite get_Default()
public SecurityAlgorithmSuite get_Basic128()
public SecurityAlgorithmSuite get_Basic128Rsa15()
public SecurityAlgorithmSuite get_Basic128Sha256()
public SecurityAlgorithmSuite get_Basic128Sha256Rsa15()
public SecurityAlgorithmSuite get_Basic192()
public SecurityAlgorithmSuite get_Basic192Rsa15()
public SecurityAlgorithmSuite get_Basic192Sha256()
public SecurityAlgorithmSuite get_Basic192Sha256Rsa15()
public SecurityAlgorithmSuite get_Basic256()
public SecurityAlgorithmSuite get_Basic256Rsa15()
public SecurityAlgorithmSuite get_Basic256Sha256()
public SecurityAlgorithmSuite get_Basic256Sha256Rsa15()
public SecurityAlgorithmSuite get_TripleDes()
public SecurityAlgorithmSuite get_TripleDesRsa15()
public SecurityAlgorithmSuite get_TripleDesSha256()
public SecurityAlgorithmSuite get_TripleDesSha256Rsa15()
public string get_DefaultAsymmetricKeyWrapAlgorithm()
public string get_DefaultAsymmetricSignatureAlgorithm()
public string get_DefaultCanonicalizationAlgorithm()
public string get_DefaultDigestAlgorithm()
public string get_DefaultEncryptionAlgorithm()
public int get_DefaultEncryptionKeyDerivationLength()
public int get_DefaultSignatureKeyDerivationLength()
public int get_DefaultSymmetricKeyLength()
public string get_DefaultSymmetricKeyWrapAlgorithm()
public string get_DefaultSymmetricSignatureAlgorithm()
public bool IsAsymmetricKeyWrapAlgorithmSupported(string algorithm)
public bool IsAsymmetricKeyLengthSupported(int length)
public bool IsAsymmetricSignatureAlgorithmSupported(string algorithm)
public bool IsCanonicalizationAlgorithmSupported(string algorithm)
public bool IsDigestAlgorithmSupported(string algorithm)
public bool IsEncryptionAlgorithmSupported(string algorithm)
public bool IsEncryptionKeyDerivationAlgorithmSupported(string algorithm)
public bool IsSignatureKeyDerivationAlgorithmSupported(string algorithm)
public bool IsSymmetricKeyLengthSupported(int length)
public bool IsSymmetricKeyWrapAlgorithmSupported(string algorithm)
public bool IsSymmetricSignatureAlgorithmSupported(string algorithm)
}
public System.ServiceModel.Security.SecurityCredentialsManager : object {
public SecurityTokenManager CreateSecurityTokenManager()
}
public System.ServiceModel.Security.SecurityKeyEntropyMode : Enum {
public int value__
public SecurityKeyEntropyMode ClientEntropy
public SecurityKeyEntropyMode ServerEntropy
public SecurityKeyEntropyMode CombinedEntropy
}
public System.ServiceModel.Security.SecurityMessageProperty : object {
private SecurityTokenSpecification initiator_token
private SecurityTokenSpecification protection_token
private SecurityTokenSpecification recipient_token
private SecurityTokenSpecification transport_token
private Collection`1<SupportingTokenSpecification> incoming_supp_tokens
private ReadOnlyCollection`1<IAuthorizationPolicy> policies
private string sender_id_prefix
private ServiceSecurityContext context
internal Collection`1<string> ConfirmedSignatures
internal Byte[] EncryptionKey
public bool HasIncomingSupportingTokens
public ReadOnlyCollection`1<IAuthorizationPolicy> ExternalAuthorizationPolicies
public Collection`1<SupportingTokenSpecification> IncomingSupportingTokens
public SecurityTokenSpecification InitiatorToken
public SecurityTokenSpecification ProtectionToken
public SecurityTokenSpecification RecipientToken
public SecurityTokenSpecification TransportToken
public string SenderIdPrefix
public ServiceSecurityContext ServiceSecurityContext
public Collection`1<SupportingTokenSpecification> OutgoingSupportingTokens
public bool get_HasIncomingSupportingTokens()
public ReadOnlyCollection`1<IAuthorizationPolicy> get_ExternalAuthorizationPolicies()
public void set_ExternalAuthorizationPolicies(ReadOnlyCollection`1<IAuthorizationPolicy> value)
public Collection`1<SupportingTokenSpecification> get_IncomingSupportingTokens()
public SecurityTokenSpecification get_InitiatorToken()
public void set_InitiatorToken(SecurityTokenSpecification value)
public SecurityTokenSpecification get_ProtectionToken()
public void set_ProtectionToken(SecurityTokenSpecification value)
public SecurityTokenSpecification get_RecipientToken()
public void set_RecipientToken(SecurityTokenSpecification value)
public SecurityTokenSpecification get_TransportToken()
public void set_TransportToken(SecurityTokenSpecification value)
public string get_SenderIdPrefix()
public void set_SenderIdPrefix(string value)
public ServiceSecurityContext get_ServiceSecurityContext()
public void set_ServiceSecurityContext(ServiceSecurityContext value)
public IMessageProperty CreateCopy()
public void Dispose()
public SecurityMessageProperty GetOrCreate(Message message)
public Collection`1<SupportingTokenSpecification> get_OutgoingSupportingTokens()
}
public System.ServiceModel.Security.SecurityNegotiationException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.Security.SecurityPolicyVersion : object {
private SecurityPolicyVersion <WSSecurityPolicy11>k__BackingField
private SecurityPolicyVersion <WSSecurityPolicy12>k__BackingField
private string <Namespace>k__BackingField
private string <Prefix>k__BackingField
public SecurityPolicyVersion WSSecurityPolicy11
public SecurityPolicyVersion WSSecurityPolicy12
public string Namespace
public string Prefix
public SecurityPolicyVersion get_WSSecurityPolicy11()
private void set_WSSecurityPolicy11(SecurityPolicyVersion value)
public SecurityPolicyVersion get_WSSecurityPolicy12()
private void set_WSSecurityPolicy12(SecurityPolicyVersion value)
public string get_Namespace()
internal void set_Namespace(string value)
public string get_Prefix()
internal void set_Prefix(string value)
}
public System.ServiceModel.Security.SecurityStateEncoder : object {
protected internal Byte[] DecodeSecurityState(Byte[] data)
protected internal Byte[] EncodeSecurityState(Byte[] data)
}
public System.ServiceModel.Security.SecurityTokenAttachmentMode : Enum {
public int value__
public SecurityTokenAttachmentMode Signed
public SecurityTokenAttachmentMode Endorsing
public SecurityTokenAttachmentMode SignedEndorsing
public SecurityTokenAttachmentMode SignedEncrypted
}
public System.ServiceModel.Security.SecurityTokenSpecification : object {
private SecurityToken token
private ReadOnlyCollection`1<IAuthorizationPolicy> policies
public SecurityToken SecurityToken
public ReadOnlyCollection`1<IAuthorizationPolicy> SecurityTokenPolicies
public void .ctor(SecurityToken token, ReadOnlyCollection`1<IAuthorizationPolicy> tokenPolicies)
public SecurityToken get_SecurityToken()
public ReadOnlyCollection`1<IAuthorizationPolicy> get_SecurityTokenPolicies()
}
public System.ServiceModel.Security.SecurityVersion : object {
private SecurityVersion wss10
private SecurityVersion wss11
public SecurityVersion WSSecurity10
public SecurityVersion WSSecurity11
public SecurityVersion get_WSSecurity10()
public SecurityVersion get_WSSecurity11()
}
public System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager : SecurityTokenManager {
private ServiceCredentials credentials
public ServiceCredentials ServiceCredentials
public void .ctor(ServiceCredentials parent)
public ServiceCredentials get_ServiceCredentials()
public EndpointIdentity GetIdentityOfSelf(SecurityTokenRequirement tokenRequirement)
public SecurityTokenAuthenticator CreateSecurityTokenAuthenticator(SecurityTokenRequirement tokenRequirement, SecurityTokenResolver& outOfBandTokenResolver)
private SpnegoSecurityTokenAuthenticator CreateSpnegoTokenAuthenticator(SecurityTokenRequirement requirement)
private SslSecurityTokenAuthenticator CreateSslTokenAuthenticator(SecurityTokenRequirement requirement)
private UserNameSecurityTokenAuthenticator CreateUserNameAuthenticator(SecurityTokenRequirement requirement)
private X509SecurityTokenAuthenticator CreateX509Authenticator(SecurityTokenRequirement requirement)
private void InitializeAuthenticatorCommunicationObject(AuthenticatorCommunicationObject p, SecurityTokenRequirement r)
public SecurityTokenProvider CreateSecurityTokenProvider(SecurityTokenRequirement requirement)
private X509SecurityTokenProvider CreateX509SecurityTokenProvider(SecurityTokenRequirement requirement)
private IssuedSecurityTokenProvider CreateIssuedProviderBase(SecurityTokenRequirement r)
private SecurityTokenProvider CreateSecureConversationProvider(SecurityTokenRequirement r)
private IssuedSecurityTokenProvider CreateIssuedTokenProvider(SecurityTokenRequirement requirement)
public SecurityTokenSerializer CreateSecurityTokenSerializer(SecurityTokenVersion version)
protected internal bool IsIssuedSecurityTokenRequirement(SecurityTokenRequirement requirement)
}
public System.ServiceModel.Security.SimpleSecurityTokenProvider : SecurityTokenProvider {
public void .ctor(SecurityToken token, SecurityTokenRequirement tokenRequirement)
protected SecurityToken GetTokenCore(TimeSpan timeout)
}
internal System.ServiceModel.Security.SpnegoCommunicationObject : ProviderCommunicationObject {
private SpnegoSecurityTokenProvider owner
private WSTrustSecurityTokenServiceProxy proxy
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
public void .ctor(SpnegoSecurityTokenProvider owner)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
protected void OnAbort()
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
public SecurityToken GetToken(TimeSpan timeout)
}
internal System.ServiceModel.Security.SpnegoSecurityTokenProvider : CommunicationSecurityTokenProvider {
private ClientCredentialsSecurityTokenManager manager
private SecurityTokenRequirement requirement
private SpnegoCommunicationObject comm
public ClientCredentialsSecurityTokenManager Manager
public ProviderCommunicationObject Communication
public void .ctor(ClientCredentialsSecurityTokenManager manager, SecurityTokenRequirement requirement)
public ClientCredentialsSecurityTokenManager get_Manager()
public ProviderCommunicationObject get_Communication()
public SecurityToken GetOnlineToken(TimeSpan timeout)
}
internal System.ServiceModel.Security.SspiClientSession : SspiSession {
private Type2Message type2
private Type3Message type3
private string TargetName
public Byte[] ProcessSpnegoInitialContextTokenRequest()
public void ProcessSpnegoInitialContextTokenResponse(Byte[] raw)
public Byte[] ProcessSpnegoProcessContextToken(string user, string pass)
public Byte[] ProcessMessageType1()
public void ProcessMessageType2(Byte[] raw)
public Byte[] ProcessMessageType3(string user, string password)
}
internal System.ServiceModel.Security.SspiSecurityBufferStruct : ValueType {
public short Length
public short AllocatedSpace
public int Offset
public void .ctor(short length, short allocatedSpace, int offset)
}
public System.ServiceModel.Security.SspiSecurityTokenProvider : SecurityTokenProvider {
private NetworkCredential credential
private bool allow_ntlm
private TokenImpersonationLevel impersonation_level
public void .ctor(NetworkCredential credential, bool extractGroupsForWindowsAccounts, bool allowUnauthenticatedCallers)
public void .ctor(NetworkCredential credential, bool allowNtlm, TokenImpersonationLevel impersonationLevel)
protected SecurityToken GetTokenCore(TimeSpan timeout)
}
internal System.ServiceModel.Security.SspiServerSession : SspiSession {
public string TargetName
public long SuppliedDomain
public long SuppliedWorkstation
private Type1Message type1
private Type2Message type2
private Type3Message type3
public void ProcessSpnegoInitialContextTokenRequest(Byte[] raw)
public Byte[] ProcessSpnegoInitialContextTokenResponse()
public void ProcessSpnegoProcessContextToken(Byte[] raw)
public void ProcessMessageType1(Byte[] raw)
public Byte[] ProcessMessageType2()
public void ProcessMessageType3(Byte[] raw)
}
internal System.ServiceModel.Security.SspiSession : object {
internal Byte[] NtlmSSP
public long Challenge
public long Context
public long ClientOSVersion
public long ServerOSVersion
public string ServerName
public string DomainName
public string DnsHostName
public string DnsDomainName
public bool Verify(Byte[] expected, Byte[] actual, int offset, int length)
public SspiSecurityBufferStruct ReadSecurityBuffer(BinaryReader reader)
}
public System.ServiceModel.Security.SupportingTokenSpecification : SecurityTokenSpecification {
private SecurityTokenAttachmentMode mode
public SecurityTokenAttachmentMode SecurityTokenAttachmentMode
public void .ctor(SecurityToken token, ReadOnlyCollection`1<IAuthorizationPolicy> tokenPolicies, SecurityTokenAttachmentMode attachmentMode)
public SecurityTokenAttachmentMode get_SecurityTokenAttachmentMode()
public void .ctor(SecurityToken token, ReadOnlyCollection`1<IAuthorizationPolicy> tokenPolicies, SecurityTokenAttachmentMode attachmentMode, SecurityTokenParameters tokenParameters)
}
internal System.ServiceModel.Security.Tokens.AuthenticatorCommunicationObject : CommunicationObject {
private Binding issuer_binding
private EndpointAddress issuer_address
private Uri listen_uri
private KeyedByTypeCollection`1<IEndpointBehavior> behaviors
private SecurityTokenSerializer serializer
private SecurityAlgorithmSuite algorithm
private SecurityBindingElement element
public EndpointAddress IssuerAddress
public Uri ListenUri
public Binding IssuerBinding
public KeyedByTypeCollection`1<IEndpointBehavior> IssuerChannelBehaviors
public SecurityAlgorithmSuite SecurityAlgorithmSuite
public SecurityBindingElement SecurityBindingElement
public SecurityTokenSerializer SecurityTokenSerializer
public Message ProcessNegotiation(Message request, TimeSpan timeout)
public EndpointAddress get_IssuerAddress()
public void set_IssuerAddress(EndpointAddress value)
public Uri get_ListenUri()
public void set_ListenUri(Uri value)
public Binding get_IssuerBinding()
public void set_IssuerBinding(Binding value)
public KeyedByTypeCollection`1<IEndpointBehavior> get_IssuerChannelBehaviors()
public SecurityAlgorithmSuite get_SecurityAlgorithmSuite()
public void set_SecurityAlgorithmSuite(SecurityAlgorithmSuite value)
public SecurityBindingElement get_SecurityBindingElement()
public void set_SecurityBindingElement(SecurityBindingElement value)
public SecurityTokenSerializer get_SecurityTokenSerializer()
public void set_SecurityTokenSerializer(SecurityTokenSerializer value)
protected void EnsureProperties()
}
public System.ServiceModel.Security.Tokens.ClaimTypeRequirement : object {
private string claim_type
private bool is_optional
public string ClaimType
public bool IsOptional
public void .ctor(string claimType)
public void .ctor(string claimType, bool isOptional)
public string get_ClaimType()
public bool get_IsOptional()
}
internal System.ServiceModel.Security.Tokens.CommunicationSecurityTokenAuthenticator : SecurityTokenAuthenticator {
private IssuedSecurityTokenHandler issuance_handler
private RenewedSecurityTokenHandler renew_handler
public IssuedSecurityTokenHandler IssuedSecurityTokenHandler
public RenewedSecurityTokenHandler RenewedSecurityTokenHandler
public AuthenticatorCommunicationObject Communication
public CommunicationState State
public IssuedSecurityTokenHandler get_IssuedSecurityTokenHandler()
public void set_IssuedSecurityTokenHandler(IssuedSecurityTokenHandler value)
public RenewedSecurityTokenHandler get_RenewedSecurityTokenHandler()
public void set_RenewedSecurityTokenHandler(RenewedSecurityTokenHandler value)
public AuthenticatorCommunicationObject get_Communication()
protected bool CanValidateTokenCore(SecurityToken token)
protected ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token)
public CommunicationState get_State()
public void Abort()
public void Open()
public void Open(TimeSpan timeout)
public IAsyncResult BeginOpen(AsyncCallback callback, object state)
public IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
public void EndOpen(IAsyncResult result)
public void Close()
public void Close(TimeSpan timeout)
public IAsyncResult BeginClose(AsyncCallback callback, object state)
public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state)
public void EndClose(IAsyncResult result)
public void add_Opening(EventHandler value)
public void remove_Opening(EventHandler value)
public void add_Opened(EventHandler value)
public void remove_Opened(EventHandler value)
public void add_Closing(EventHandler value)
public void remove_Closing(EventHandler value)
public void add_Closed(EventHandler value)
public void remove_Closed(EventHandler value)
public void add_Faulted(EventHandler value)
public void remove_Faulted(EventHandler value)
}
internal System.ServiceModel.Security.Tokens.CommunicationSecurityTokenProvider : SecurityTokenProvider {
public ProviderCommunicationObject Communication
public CommunicationState State
public ProviderCommunicationObject get_Communication()
protected SecurityToken GetTokenCore(TimeSpan timeout)
public SecurityToken GetOnlineToken(TimeSpan timeout)
public CommunicationState get_State()
public void Abort()
public void Open()
public void Open(TimeSpan timeout)
public IAsyncResult BeginOpen(AsyncCallback callback, object state)
public IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
public void EndOpen(IAsyncResult result)
public void Close()
public void Close(TimeSpan timeout)
public IAsyncResult BeginClose(AsyncCallback callback, object state)
public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state)
public void EndClose(IAsyncResult result)
public void add_Opening(EventHandler value)
public void remove_Opening(EventHandler value)
public void add_Opened(EventHandler value)
public void remove_Opened(EventHandler value)
public void add_Closing(EventHandler value)
public void remove_Closing(EventHandler value)
public void add_Closed(EventHandler value)
public void remove_Closed(EventHandler value)
public void add_Faulted(EventHandler value)
public void remove_Faulted(EventHandler value)
}
internal System.ServiceModel.Security.Tokens.DerivedKeySecurityToken : SecurityToken {
private string algorithm
private SecurityKeyIdentifierClause reference
private SecurityToken resolved_token
private Nullable`1<int> generation
private Nullable`1<int> offset
private Nullable`1<int> length
private string id
private string name
private string label
private Byte[] nonce
private ReadOnlyCollection`1<SecurityKey> keys
private ReferenceList reflist
public string Id
public ReadOnlyCollection`1<SecurityKey> SecurityKeys
public DateTime ValidFrom
public DateTime ValidTo
internal ReferenceList ReferenceList
public SecurityKeyIdentifierClause TokenReference
public Nullable`1<int> Generation
public Nullable`1<int> Length
public Nullable`1<int> Offset
public string Label
public Byte[] Nonce
public string Name
public void .ctor(string id, string algorithm, SecurityKeyIdentifierClause reference, SymmetricSecurityKey referencedKey, string name, Nullable`1<int> generation, Nullable`1<int> offset, Nullable`1<int> length, string label, Byte[] nonce)
public string get_Id()
public ReadOnlyCollection`1<SecurityKey> get_SecurityKeys()
public DateTime get_ValidFrom()
public DateTime get_ValidTo()
internal ReferenceList get_ReferenceList()
internal void set_ReferenceList(ReferenceList value)
public SecurityKeyIdentifierClause get_TokenReference()
public Nullable`1<int> get_Generation()
public Nullable`1<int> get_Length()
public Nullable`1<int> get_Offset()
public string get_Label()
public Byte[] get_Nonce()
public string get_Name()
public bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause)
public SecurityKey ResolveKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause)
}
public System.ServiceModel.Security.Tokens.IIssuanceSecurityTokenAuthenticator {
public IssuedSecurityTokenHandler IssuedSecurityTokenHandler
public RenewedSecurityTokenHandler RenewedSecurityTokenHandler
public IssuedSecurityTokenHandler get_IssuedSecurityTokenHandler()
public void set_IssuedSecurityTokenHandler(IssuedSecurityTokenHandler value)
public RenewedSecurityTokenHandler get_RenewedSecurityTokenHandler()
public void set_RenewedSecurityTokenHandler(RenewedSecurityTokenHandler value)
}
public System.ServiceModel.Security.Tokens.ILogonTokenCacheManager {
public void FlushLogonTokenCache()
public bool RemoveCachedLogonToken(string username)
}
public System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement : ServiceModelSecurityTokenRequirement {
public EndpointAddress TargetAddress
public Uri Via
public EndpointAddress get_TargetAddress()
public void set_TargetAddress(EndpointAddress value)
public Uri get_Via()
public void set_Via(Uri value)
public string ToString()
}
public System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache {
public void AddContext(SecurityContextSecurityToken token)
public void ClearContexts()
public Collection`1<SecurityContextSecurityToken> GetAllContexts(UniqueId contextId)
public SecurityContextSecurityToken GetContext(UniqueId contextId, UniqueId generation)
public void RemoveAllContexts(UniqueId contextId)
public void RemoveContext(UniqueId contextId, UniqueId generation)
public bool TryAddContext(SecurityContextSecurityToken token)
public void UpdateContextCachingTime(SecurityContextSecurityToken context, DateTime expirationTime)
}
public System.ServiceModel.Security.Tokens.IssuedSecurityTokenHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(SecurityToken issuedToken, EndpointAddress tokenRequestor)
public IAsyncResult BeginInvoke(SecurityToken issuedToken, EndpointAddress tokenRequestor, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters : SecurityTokenParameters {
private Binding binding
private EndpointAddress issuer_address
private EndpointAddress issuer_meta_address
private int key_size
private SecurityKeyType key_type
private string token_type
private Collection`1<ClaimTypeRequirement> reqs
private Collection`1<XmlElement> additional_reqs
public Collection`1<XmlElement> AdditionalRequestParameters
public Collection`1<ClaimTypeRequirement> ClaimTypeRequirements
protected bool HasAsymmetricKey
public EndpointAddress IssuerAddress
public Binding IssuerBinding
public EndpointAddress IssuerMetadataAddress
public int KeySize
public SecurityKeyType KeyType
public string TokenType
protected bool SupportsClientAuthentication
protected bool SupportsClientWindowsIdentity
protected bool SupportsServerAuthentication
public MessageSecurityVersion DefaultMessageSecurityVersion
public bool UseStrTransform
public void .ctor(string tokenType)
public void .ctor(string tokenType, EndpointAddress issuerAddress)
public void .ctor(string tokenType, EndpointAddress issuerAddress, Binding issuerBinding)
protected void .ctor(IssuedSecurityTokenParameters other)
public string ToString()
public Collection`1<XmlElement> get_AdditionalRequestParameters()
public Collection`1<ClaimTypeRequirement> get_ClaimTypeRequirements()
protected bool get_HasAsymmetricKey()
public EndpointAddress get_IssuerAddress()
public void set_IssuerAddress(EndpointAddress value)
public Binding get_IssuerBinding()
public void set_IssuerBinding(Binding value)
public EndpointAddress get_IssuerMetadataAddress()
public void set_IssuerMetadataAddress(EndpointAddress value)
public int get_KeySize()
public void set_KeySize(int value)
public SecurityKeyType get_KeyType()
public void set_KeyType(SecurityKeyType value)
public string get_TokenType()
public void set_TokenType(string value)
protected bool get_SupportsClientAuthentication()
protected bool get_SupportsClientWindowsIdentity()
protected bool get_SupportsServerAuthentication()
protected SecurityTokenParameters CloneCore()
protected SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle)
public Collection`1<XmlElement> CreateRequestParameters(MessageSecurityVersion messageSecurityVersion, SecurityTokenSerializer securityTokenSerializer)
protected internal void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement)
public MessageSecurityVersion get_DefaultMessageSecurityVersion()
public void set_DefaultMessageSecurityVersion(MessageSecurityVersion value)
public bool get_UseStrTransform()
public void set_UseStrTransform(bool value)
}
public System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider : SecurityTokenProvider {
private IssuedTokenCommunicationObject comm
private SecurityKeyEntropyMode entropy_mode
private TimeSpan max_cache_time
private MessageSecurityVersion version
private int threshold
private IdentityVerifier verifier
private bool cache_issued_tokens
private Collection`1<XmlElement> request_params
private CommunicationState state
internal IssuedTokenCommunicationObject Communication
public bool CacheIssuedTokens
public TimeSpan DefaultCloseTimeout
public TimeSpan DefaultOpenTimeout
public IdentityVerifier IdentityVerifier
public int IssuedTokenRenewalThresholdPercentage
public EndpointAddress IssuerAddress
public Binding IssuerBinding
public KeyedByTypeCollection`1<IEndpointBehavior> IssuerChannelBehaviors
public SecurityKeyEntropyMode KeyEntropyMode
public TimeSpan MaxIssuedTokenCachingTime
public MessageSecurityVersion MessageSecurityVersion
public SecurityAlgorithmSuite SecurityAlgorithmSuite
public SecurityTokenSerializer SecurityTokenSerializer
public EndpointAddress TargetAddress
public Collection`1<XmlElement> TokenRequestParameters
public bool SupportsTokenCancellation
public CommunicationState State
internal IssuedTokenCommunicationObject get_Communication()
public bool get_CacheIssuedTokens()
public void set_CacheIssuedTokens(bool value)
public TimeSpan get_DefaultCloseTimeout()
public TimeSpan get_DefaultOpenTimeout()
public IdentityVerifier get_IdentityVerifier()
public void set_IdentityVerifier(IdentityVerifier value)
public int get_IssuedTokenRenewalThresholdPercentage()
public void set_IssuedTokenRenewalThresholdPercentage(int value)
public EndpointAddress get_IssuerAddress()
public void set_IssuerAddress(EndpointAddress value)
public Binding get_IssuerBinding()
public void set_IssuerBinding(Binding value)
public KeyedByTypeCollection`1<IEndpointBehavior> get_IssuerChannelBehaviors()
public SecurityKeyEntropyMode get_KeyEntropyMode()
public void set_KeyEntropyMode(SecurityKeyEntropyMode value)
public TimeSpan get_MaxIssuedTokenCachingTime()
public void set_MaxIssuedTokenCachingTime(TimeSpan value)
public MessageSecurityVersion get_MessageSecurityVersion()
public void set_MessageSecurityVersion(MessageSecurityVersion value)
public SecurityAlgorithmSuite get_SecurityAlgorithmSuite()
public void set_SecurityAlgorithmSuite(SecurityAlgorithmSuite value)
public SecurityTokenSerializer get_SecurityTokenSerializer()
public void set_SecurityTokenSerializer(SecurityTokenSerializer value)
public EndpointAddress get_TargetAddress()
public void set_TargetAddress(EndpointAddress value)
public Collection`1<XmlElement> get_TokenRequestParameters()
public bool get_SupportsTokenCancellation()
protected SecurityToken GetTokenCore(TimeSpan timeout)
protected IAsyncResult BeginGetTokenCore(TimeSpan timeout, AsyncCallback callback, object state)
protected SecurityToken EndGetTokenCore(IAsyncResult result)
public CommunicationState get_State()
public void Abort()
public void Open()
public void Open(TimeSpan timeout)
public IAsyncResult BeginOpen(AsyncCallback callback, object state)
public IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
public void EndOpen(IAsyncResult result)
public void Close()
public void Close(TimeSpan timeout)
public IAsyncResult BeginClose(AsyncCallback callback, object state)
public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state)
public void EndClose(IAsyncResult result)
public void Dispose()
public void add_Opened(EventHandler value)
public void remove_Opened(EventHandler value)
public void add_Opening(EventHandler value)
public void remove_Opening(EventHandler value)
public void add_Closed(EventHandler value)
public void remove_Closed(EventHandler value)
public void add_Closing(EventHandler value)
public void remove_Closing(EventHandler value)
public void add_Faulted(EventHandler value)
public void remove_Faulted(EventHandler value)
}
internal System.ServiceModel.Security.Tokens.IssuedTokenCommunicationObject : ProviderCommunicationObject {
private WSTrustSecurityTokenServiceProxy comm
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
public SecurityToken GetToken(TimeSpan timeout)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
protected void OnAbort()
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
}
public System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters : SecurityTokenParameters {
protected bool HasAsymmetricKey
protected bool SupportsClientAuthentication
protected bool SupportsClientWindowsIdentity
protected bool SupportsServerAuthentication
protected void .ctor(KerberosSecurityTokenParameters other)
protected bool get_HasAsymmetricKey()
protected bool get_SupportsClientAuthentication()
protected bool get_SupportsClientWindowsIdentity()
protected bool get_SupportsServerAuthentication()
protected SecurityTokenParameters CloneCore()
protected SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle)
protected internal void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement)
}
internal System.ServiceModel.Security.Tokens.ProviderCommunicationObject : CommunicationObject {
private Binding issuer_binding
private EndpointAddress issuer_address
private EndpointAddress target_address
private KeyedByTypeCollection`1<IEndpointBehavior> behaviors
private SecurityTokenSerializer serializer
private SecurityAlgorithmSuite algorithm
public EndpointAddress IssuerAddress
public EndpointAddress TargetAddress
public Binding IssuerBinding
public KeyedByTypeCollection`1<IEndpointBehavior> IssuerChannelBehaviors
public SecurityAlgorithmSuite SecurityAlgorithmSuite
public SecurityTokenSerializer SecurityTokenSerializer
public EndpointAddress get_IssuerAddress()
public void set_IssuerAddress(EndpointAddress value)
public EndpointAddress get_TargetAddress()
public void set_TargetAddress(EndpointAddress value)
public Binding get_IssuerBinding()
public void set_IssuerBinding(Binding value)
public KeyedByTypeCollection`1<IEndpointBehavior> get_IssuerChannelBehaviors()
public SecurityAlgorithmSuite get_SecurityAlgorithmSuite()
public void set_SecurityAlgorithmSuite(SecurityAlgorithmSuite value)
public SecurityTokenSerializer get_SecurityTokenSerializer()
public void set_SecurityTokenSerializer(SecurityTokenSerializer value)
protected void EnsureProperties()
}
public System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement : ServiceModelSecurityTokenRequirement {
public AuditLogLocation AuditLogLocation
public Uri ListenUri
public AuditLevel MessageAuthenticationAuditLevel
public bool SuppressAuditFailure
public AuditLogLocation get_AuditLogLocation()
public void set_AuditLogLocation(AuditLogLocation value)
public Uri get_ListenUri()
public void set_ListenUri(Uri value)
public AuditLevel get_MessageAuthenticationAuditLevel()
public void set_MessageAuthenticationAuditLevel(AuditLevel value)
public bool get_SuppressAuditFailure()
public void set_SuppressAuditFailure(bool value)
public string ToString()
}
public System.ServiceModel.Security.Tokens.RenewedSecurityTokenHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(SecurityToken newSecurityToken, SecurityToken oldSecurityToken)
public IAsyncResult BeginInvoke(SecurityToken newSecurityToken, SecurityToken oldSecurityToken, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters : SecurityTokenParameters {
protected bool HasAsymmetricKey
protected bool SupportsClientAuthentication
protected bool SupportsClientWindowsIdentity
protected bool SupportsServerAuthentication
protected void .ctor(RsaSecurityTokenParameters other)
protected bool get_HasAsymmetricKey()
protected bool get_SupportsClientAuthentication()
protected bool get_SupportsClientWindowsIdentity()
protected bool get_SupportsServerAuthentication()
protected SecurityTokenParameters CloneCore()
protected SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle)
protected internal void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement)
}
internal System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenAuthenticator : CommunicationSecurityTokenAuthenticator {
private SecurityTokenRequirement req
private SecurityContextSecurityTokenAuthenticator sc_auth
private SecurityContextSecurityTokenResolver sc_res
private WsscAuthenticatorCommunicationObject comm
public AuthenticatorCommunicationObject Communication
public void .ctor(SecurityTokenRequirement r, SecurityContextSecurityTokenAuthenticator scAuth, SecurityContextSecurityTokenResolver scResolver)
public AuthenticatorCommunicationObject get_Communication()
protected bool CanValidateTokenCore(SecurityToken token)
protected ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token)
}
public System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters : SecurityTokenParameters {
private ChannelProtectionRequirements default_channel_protection_requirements
private BindingContext dummy_context
private SecurityBindingElement element
private ChannelProtectionRequirements requirements
private bool cancellable
public bool RequireCancellation
public SecurityBindingElement BootstrapSecurityBindingElement
public ChannelProtectionRequirements BootstrapProtectionRequirements
protected bool HasAsymmetricKey
protected bool SupportsClientAuthentication
protected bool SupportsClientWindowsIdentity
protected bool SupportsServerAuthentication
public bool CanRenewSession
public void .ctor(SecurityBindingElement bootstrapSecurityBindingElement)
public void .ctor(SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation)
public void .ctor(SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation, ChannelProtectionRequirements bootstrapProtectionRequirements)
protected void .ctor(SecureConversationSecurityTokenParameters other)
public bool get_RequireCancellation()
public void set_RequireCancellation(bool value)
public SecurityBindingElement get_BootstrapSecurityBindingElement()
public void set_BootstrapSecurityBindingElement(SecurityBindingElement value)
public ChannelProtectionRequirements get_BootstrapProtectionRequirements()
protected bool get_HasAsymmetricKey()
protected bool get_SupportsClientAuthentication()
protected bool get_SupportsClientWindowsIdentity()
protected bool get_SupportsServerAuthentication()
protected SecurityTokenParameters CloneCore()
protected SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle)
protected internal void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement)
public string ToString()
public void .ctor(SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation, bool canRenewSession, ChannelProtectionRequirements bootstrapProtectionRequirements)
public bool get_CanRenewSession()
public void set_CanRenewSession(bool value)
}
public System.ServiceModel.Security.Tokens.SecurityContextSecurityToken : SecurityToken {
private string id
private InMemorySymmetricSecurityKey key
private ReadOnlyCollection`1<SecurityKey> keys
private DateTime token_since
private DateTime token_until
private DateTime key_since
private DateTime key_until
private UniqueId context_id
private UniqueId key_generation
private ReadOnlyCollection`1<IAuthorizationPolicy> policies
private Byte[] cookie
public ReadOnlyCollection`1<IAuthorizationPolicy> AuthorizationPolicies
public UniqueId ContextId
public UniqueId KeyGeneration
public DateTime KeyEffectiveTime
public DateTime KeyExpirationTime
public DateTime ValidFrom
public DateTime ValidTo
public string Id
public ReadOnlyCollection`1<SecurityKey> SecurityKeys
internal Byte[] Cookie
public SecurityMessageProperty BootstrapMessageProperty
public bool IsCookieMode
public SecurityContextSecurityToken CreateCookieSecurityContextToken(UniqueId contextId, string id, Byte[] key, DateTime validFrom, DateTime validTo, ReadOnlyCollection`1<IAuthorizationPolicy> authorizationPolicies, SecurityStateEncoder securityStateEncoder)
public SecurityContextSecurityToken CreateCookieSecurityContextToken(UniqueId contextId, string id, Byte[] key, DateTime validFrom, DateTime validTo, UniqueId keyGeneration, DateTime keyEffectiveTime, DateTime keyExpirationTime, ReadOnlyCollection`1<IAuthorizationPolicy> authorizationPolicies, SecurityStateEncoder securityStateEncoder)
public void .ctor(UniqueId contextId, Byte[] key, DateTime validFrom, DateTime validTo)
public void .ctor(UniqueId contextId, string id, Byte[] key, DateTime validFrom, DateTime validTo)
public void .ctor(UniqueId contextId, string id, Byte[] key, DateTime validFrom, DateTime validTo, ReadOnlyCollection`1<IAuthorizationPolicy> authorizationPolicies)
public void .ctor(UniqueId contextId, string id, Byte[] key, DateTime validFrom, DateTime validTo, UniqueId keyGeneration, DateTime keyEffectiveTime, DateTime keyExpirationTime, ReadOnlyCollection`1<IAuthorizationPolicy> authorizationPolicies)
public ReadOnlyCollection`1<IAuthorizationPolicy> get_AuthorizationPolicies()
public UniqueId get_ContextId()
public UniqueId get_KeyGeneration()
public DateTime get_KeyEffectiveTime()
public DateTime get_KeyExpirationTime()
public DateTime get_ValidFrom()
public DateTime get_ValidTo()
public string get_Id()
public ReadOnlyCollection`1<SecurityKey> get_SecurityKeys()
internal Byte[] get_Cookie()
internal void set_Cookie(Byte[] value)
public bool CanCreateKeyIdentifierClause()
public T CreateKeyIdentifierClause()
public bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause)
public string ToString()
public SecurityMessageProperty get_BootstrapMessageProperty()
public void set_BootstrapMessageProperty(SecurityMessageProperty value)
public bool get_IsCookieMode()
public void Dispose()
}
public System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator : SecurityTokenAuthenticator {
protected bool CanValidateTokenCore(SecurityToken token)
protected ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token)
}
public System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver : SecurityTokenResolver {
private int capacity
private bool allow_removal
private Dictionary`2<UniqueId, Dictionary`2<UniqueId, SecurityContextSecurityToken>> cache
public bool RemoveOldestTokensOnCacheFull
public int SecurityContextTokenCacheCapacity
public TimeSpan ClockSkew
public void .ctor(int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull)
public bool get_RemoveOldestTokensOnCacheFull()
public int get_SecurityContextTokenCacheCapacity()
public void AddContext(SecurityContextSecurityToken token)
public void ClearContexts()
public Collection`1<SecurityContextSecurityToken> GetAllContexts(UniqueId contextId)
public SecurityContextSecurityToken GetContext(UniqueId contextId, UniqueId generation)
public void RemoveAllContexts(UniqueId contextId)
public void RemoveContext(UniqueId contextId, UniqueId generation)
public bool TryAddContext(SecurityContextSecurityToken token)
public void UpdateContextCachingTime(SecurityContextSecurityToken context, DateTime expirationTime)
protected bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityKey& key)
protected bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, SecurityToken& token)
protected bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityToken& token)
public void .ctor(int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull, TimeSpan clockSkew)
public TimeSpan get_ClockSkew()
}
public System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode : Enum {
public int value__
public SecurityTokenInclusionMode AlwaysToRecipient
public SecurityTokenInclusionMode Never
public SecurityTokenInclusionMode Once
public SecurityTokenInclusionMode AlwaysToInitiator
}
public System.ServiceModel.Security.Tokens.SecurityTokenParameters : object {
private SecurityTokenInclusionMode inclusion_mode
private SecurityTokenReferenceStyle reference_style
private bool require_derived_keys
private BindingContext issuer_binding_context
public SecurityTokenInclusionMode InclusionMode
public SecurityTokenReferenceStyle ReferenceStyle
public bool RequireDerivedKeys
protected bool HasAsymmetricKey
protected bool SupportsClientAuthentication
protected bool SupportsClientWindowsIdentity
protected bool SupportsServerAuthentication
internal bool InternalHasAsymmetricKey
internal bool InternalSupportsClientAuthentication
internal bool InternalSupportsClientWindowsIdentity
internal bool InternalSupportsServerAuthentication
internal BindingContext IssuerBindingContext
protected void .ctor(SecurityTokenParameters other)
public SecurityTokenInclusionMode get_InclusionMode()
public void set_InclusionMode(SecurityTokenInclusionMode value)
public SecurityTokenReferenceStyle get_ReferenceStyle()
public void set_ReferenceStyle(SecurityTokenReferenceStyle value)
public bool get_RequireDerivedKeys()
public void set_RequireDerivedKeys(bool value)
public SecurityTokenParameters Clone()
public string ToString()
protected bool get_HasAsymmetricKey()
protected bool get_SupportsClientAuthentication()
protected bool get_SupportsClientWindowsIdentity()
protected bool get_SupportsServerAuthentication()
internal bool get_InternalHasAsymmetricKey()
internal bool get_InternalSupportsClientAuthentication()
internal bool get_InternalSupportsClientWindowsIdentity()
internal bool get_InternalSupportsServerAuthentication()
protected SecurityTokenParameters CloneCore()
protected SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle)
internal SecurityKeyIdentifierClause CallCreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle)
protected internal void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement)
internal void set_IssuerBindingContext(BindingContext value)
internal void CallInitializeSecurityTokenRequirement(SecurityTokenRequirement requirement)
protected bool MatchesKeyIdentifierClause(SecurityToken token, SecurityKeyIdentifierClause keyIdentifierClause, SecurityTokenReferenceStyle referenceStyle)
}
public System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle : Enum {
public int value__
public SecurityTokenReferenceStyle Internal
public SecurityTokenReferenceStyle External
}
public System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement : SecurityTokenRequirement {
protected string Namespace
public string AuditLogLocationProperty
public string ChannelParametersCollectionProperty
public string DuplexClientLocalAddressProperty
public string EndpointFilterTableProperty
public string ExtendedProtectionPolicy
public string HttpAuthenticationSchemeProperty
public string IsInitiatorProperty
public string IsOutOfBandTokenProperty
public string IssuedSecurityTokenParametersProperty
public string IssuerAddressProperty
public string IssuerBindingContextProperty
public string IssuerBindingProperty
public string ListenUriProperty
public string MessageAuthenticationAuditLevelProperty
public string MessageDirectionProperty
public string MessageSecurityVersionProperty
public string PrivacyNoticeUriProperty
public string PrivacyNoticeVersionProperty
public string SecureConversationSecurityBindingElementProperty
public string SecurityAlgorithmSuiteProperty
public string SecurityBindingElementProperty
public string SupportingTokenAttachmentModeProperty
public string SupportSecurityContextCancellationProperty
public string SuppressAuditFailureProperty
public string TargetAddressProperty
public string TransportSchemeProperty
public string ViaProperty
public bool IsInitiator
public EndpointAddress IssuerAddress
public Binding IssuerBinding
public SecurityTokenVersion MessageSecurityVersion
public SecurityBindingElement SecureConversationSecurityBindingElement
public SecurityAlgorithmSuite SecurityAlgorithmSuite
public SecurityBindingElement SecurityBindingElement
public string TransportScheme
public string PreferSslCertificateAuthenticatorProperty
public string get_AuditLogLocationProperty()
public string get_ChannelParametersCollectionProperty()
public string get_DuplexClientLocalAddressProperty()
public string get_EndpointFilterTableProperty()
public string get_ExtendedProtectionPolicy()
public string get_HttpAuthenticationSchemeProperty()
public string get_IsInitiatorProperty()
public string get_IsOutOfBandTokenProperty()
public string get_IssuedSecurityTokenParametersProperty()
public string get_IssuerAddressProperty()
public string get_IssuerBindingContextProperty()
public string get_IssuerBindingProperty()
public string get_ListenUriProperty()
public string get_MessageAuthenticationAuditLevelProperty()
public string get_MessageDirectionProperty()
public string get_MessageSecurityVersionProperty()
public string get_PrivacyNoticeUriProperty()
public string get_PrivacyNoticeVersionProperty()
public string get_SecureConversationSecurityBindingElementProperty()
public string get_SecurityAlgorithmSuiteProperty()
public string get_SecurityBindingElementProperty()
public string get_SupportingTokenAttachmentModeProperty()
public string get_SupportSecurityContextCancellationProperty()
public string get_SuppressAuditFailureProperty()
public string get_TargetAddressProperty()
public string get_TransportSchemeProperty()
public string get_ViaProperty()
public bool get_IsInitiator()
public EndpointAddress get_IssuerAddress()
public void set_IssuerAddress(EndpointAddress value)
public Binding get_IssuerBinding()
public void set_IssuerBinding(Binding value)
public SecurityTokenVersion get_MessageSecurityVersion()
public void set_MessageSecurityVersion(SecurityTokenVersion value)
public SecurityBindingElement get_SecureConversationSecurityBindingElement()
public void set_SecureConversationSecurityBindingElement(SecurityBindingElement value)
public SecurityAlgorithmSuite get_SecurityAlgorithmSuite()
public void set_SecurityAlgorithmSuite(SecurityAlgorithmSuite value)
public SecurityBindingElement get_SecurityBindingElement()
public void set_SecurityBindingElement(SecurityBindingElement value)
public string get_TransportScheme()
public void set_TransportScheme(string value)
internal string Dump()
public string get_PreferSslCertificateAuthenticatorProperty()
}
public System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes : object {
public string AnonymousSslnego
public string MutualSslnego
public string SecureConversation
public string SecurityContext
public string Spnego
public string SspiCredential
public string get_AnonymousSslnego()
public string get_MutualSslnego()
public string get_SecureConversation()
public string get_SecurityContext()
public string get_Spnego()
public string get_SspiCredential()
}
internal System.ServiceModel.Security.Tokens.SpnegoAuthenticatorCommunicationObject : AuthenticatorCommunicationObject {
private SpnegoSecurityTokenAuthenticator owner
private WSTrustSecurityTokenServiceProxy proxy
private Dictionary`2<string, SspiServerSession> sessions
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
public void .ctor(SpnegoSecurityTokenAuthenticator owner)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
public Message ProcessNegotiation(Message request, TimeSpan timeout)
private void AppendNegotiationMessageXml(XmlReader reader, TlsServerSessionInfo tlsInfo)
private Message ProcessMessageType1(Message request, TimeSpan timeout)
private Message ProcessMessageType3(Message request, TimeSpan timeout)
protected void OnAbort()
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
}
internal System.ServiceModel.Security.Tokens.SpnegoSecurityTokenAuthenticator : CommunicationSecurityTokenAuthenticator {
private ServiceCredentialsSecurityTokenManager manager
private SpnegoAuthenticatorCommunicationObject comm
public ServiceCredentialsSecurityTokenManager Manager
public AuthenticatorCommunicationObject Communication
public void .ctor(ServiceCredentialsSecurityTokenManager manager, SecurityTokenRequirement r)
public ServiceCredentialsSecurityTokenManager get_Manager()
public AuthenticatorCommunicationObject get_Communication()
protected bool CanValidateTokenCore(SecurityToken token)
protected ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token)
}
internal System.ServiceModel.Security.Tokens.SslAuthenticatorCommunicationObject : AuthenticatorCommunicationObject {
private SslSecurityTokenAuthenticator owner
private WSTrustSecurityTokenServiceProxy proxy
private Dictionary`2<string, TlsServerSessionInfo> sessions
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
public void .ctor(SslSecurityTokenAuthenticator owner)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
public Message ProcessNegotiation(Message request, TimeSpan timeout)
private void AppendNegotiationMessageXml(XmlReader reader, TlsServerSessionInfo tlsInfo)
private Message ProcessClientHello(Message request, TimeSpan timeout)
private Message ProcessClientKeyExchange(Message request, TimeSpan timeout)
protected void OnAbort()
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
}
internal System.ServiceModel.Security.Tokens.SslCommunicationObject : ProviderCommunicationObject {
private SslSecurityTokenProvider owner
private WSTrustSecurityTokenServiceProxy proxy
private X509Certificate2 client_certificate
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
public void .ctor(SslSecurityTokenProvider owner, bool mutual)
public SecurityToken GetToken(TimeSpan timeout)
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
protected void OnAbort()
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
}
internal System.ServiceModel.Security.Tokens.SslnegoCookieResolver : object {
public SecurityContextSecurityToken ResolveCookie(Byte[] bytes, Byte[] cookie)
public Byte[] CreateData(UniqueId contextId, UniqueId session, Byte[] key, DateTime tokenSince, DateTime tokenUntil, DateTime keySince, DateTime keyUntil)
}
internal System.ServiceModel.Security.Tokens.SslSecurityTokenAuthenticator : CommunicationSecurityTokenAuthenticator {
private ServiceCredentialsSecurityTokenManager manager
private SslAuthenticatorCommunicationObject comm
private bool mutual
public bool IsMutual
public ServiceCredentialsSecurityTokenManager Manager
public AuthenticatorCommunicationObject Communication
public void .ctor(ServiceCredentialsSecurityTokenManager manager, SecurityTokenRequirement r)
public bool get_IsMutual()
public ServiceCredentialsSecurityTokenManager get_Manager()
public AuthenticatorCommunicationObject get_Communication()
protected bool CanValidateTokenCore(SecurityToken token)
protected ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token)
}
public System.ServiceModel.Security.Tokens.SslSecurityTokenParameters : SecurityTokenParameters {
private bool cert
private bool cancel
public bool RequireClientCertificate
public bool RequireCancellation
protected bool HasAsymmetricKey
protected bool SupportsClientAuthentication
protected bool SupportsClientWindowsIdentity
protected bool SupportsServerAuthentication
public void .ctor(bool requireClientCertificate)
public void .ctor(bool requireClientCertificate, bool requireCancellation)
protected void .ctor(SslSecurityTokenParameters other)
public bool get_RequireClientCertificate()
public void set_RequireClientCertificate(bool value)
public bool get_RequireCancellation()
public void set_RequireCancellation(bool value)
public string ToString()
protected bool get_HasAsymmetricKey()
protected bool get_SupportsClientAuthentication()
protected bool get_SupportsClientWindowsIdentity()
protected bool get_SupportsServerAuthentication()
protected SecurityTokenParameters CloneCore()
protected SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle)
protected internal void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement)
}
internal System.ServiceModel.Security.Tokens.SslSecurityTokenProvider : CommunicationSecurityTokenProvider {
private SslCommunicationObject comm
private ClientCredentialsSecurityTokenManager manager
public ProviderCommunicationObject Communication
public ClientCredentialsSecurityTokenManager Manager
public void .ctor(ClientCredentialsSecurityTokenManager manager, bool mutual)
public ProviderCommunicationObject get_Communication()
public ClientCredentialsSecurityTokenManager get_Manager()
public SecurityToken GetOnlineToken(TimeSpan timeout)
}
internal System.ServiceModel.Security.Tokens.SspiClientSecurityTokenAuthenticator : SecurityTokenAuthenticator {
private ClientCredentialsSecurityTokenManager manager
public ClientCredentialsSecurityTokenManager Manager
public void .ctor(ClientCredentialsSecurityTokenManager manager, SecurityTokenRequirement r)
public ClientCredentialsSecurityTokenManager get_Manager()
protected bool CanValidateTokenCore(SecurityToken token)
protected ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token)
}
public System.ServiceModel.Security.Tokens.SspiSecurityToken : SecurityToken {
private string id
private DateTime valid_from
private DateTime valid_to
private ReadOnlyCollection`1<SecurityKey> keys
private bool extract_groups
private bool allow_unauth
public DateTime ValidFrom
public DateTime ValidTo
public string Id
public ReadOnlyCollection`1<SecurityKey> SecurityKeys
public bool AllowNtlm
public bool AllowUnauthenticatedCallers
public bool ExtractGroupsForWindowsAccounts
public TokenImpersonationLevel ImpersonationLevel
public NetworkCredential NetworkCredential
public void .ctor(NetworkCredential networkCredential, bool extractGroupsForWindowsAccounts, bool allowUnauthenticatedCallers)
public void .ctor(TokenImpersonationLevel impersonationLevel, bool allowNtlm, NetworkCredential networkCredential)
public DateTime get_ValidFrom()
public DateTime get_ValidTo()
public string get_Id()
public ReadOnlyCollection`1<SecurityKey> get_SecurityKeys()
public bool get_AllowNtlm()
public bool get_AllowUnauthenticatedCallers()
public bool get_ExtractGroupsForWindowsAccounts()
public TokenImpersonationLevel get_ImpersonationLevel()
public NetworkCredential get_NetworkCredential()
}
public System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters : SecurityTokenParameters {
private bool cancel
public bool RequireCancellation
protected bool HasAsymmetricKey
protected bool SupportsClientAuthentication
protected bool SupportsClientWindowsIdentity
protected bool SupportsServerAuthentication
public void .ctor(bool requireCancellation)
protected void .ctor(SspiSecurityTokenParameters other)
public bool get_RequireCancellation()
public void set_RequireCancellation(bool value)
protected bool get_HasAsymmetricKey()
protected bool get_SupportsClientAuthentication()
protected bool get_SupportsClientWindowsIdentity()
protected bool get_SupportsServerAuthentication()
protected SecurityTokenParameters CloneCore()
protected SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle)
protected internal void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement)
public string ToString()
}
public System.ServiceModel.Security.Tokens.SupportingTokenParameters : object {
private Collection`1<SecurityTokenParameters> endorsing
private Collection`1<SecurityTokenParameters> signed
private Collection`1<SecurityTokenParameters> signed_encrypted
private Collection`1<SecurityTokenParameters> signed_endorsing
public Collection`1<SecurityTokenParameters> Endorsing
public Collection`1<SecurityTokenParameters> Signed
public Collection`1<SecurityTokenParameters> SignedEncrypted
public Collection`1<SecurityTokenParameters> SignedEndorsing
private void .ctor(SupportingTokenParameters source)
public Collection`1<SecurityTokenParameters> get_Endorsing()
public Collection`1<SecurityTokenParameters> get_Signed()
public Collection`1<SecurityTokenParameters> get_SignedEncrypted()
public Collection`1<SecurityTokenParameters> get_SignedEndorsing()
public SupportingTokenParameters Clone()
public void SetKeyDerivation(bool requireDerivedKeys)
public string ToString()
private void AppendCollection(StringBuilder sb, Collection`1<SecurityTokenParameters> col, string emptyLabel, string label)
}
internal System.ServiceModel.Security.Tokens.TlsClientSession : TlsSession {
private SslClientStream ssl
private MemoryStream stream
private bool mutual
protected Context Context
protected RecordProtocol Protocol
public void .ctor(string host, X509Certificate2 clientCert, X509ServiceCertificateAuthentication auth)
protected Context get_Context()
protected RecordProtocol get_Protocol()
public Byte[] ProcessClientHello()
public void ProcessServerHello(Byte[] raw)
public Byte[] ProcessClientKeyExchange()
public void ProcessServerFinished(Byte[] raw)
public Byte[] ProcessApplicationData(Byte[] raw)
}
internal System.ServiceModel.Security.Tokens.TlsServerSession : TlsSession {
private SslServerStream ssl
private MemoryStream stream
private bool mutual
protected Context Context
protected RecordProtocol Protocol
public void .ctor(X509Certificate2 cert, bool mutual)
protected Context get_Context()
protected RecordProtocol get_Protocol()
public void ProcessClientHello(Byte[] raw)
public Byte[] ProcessServerHello()
public void ProcessClientKeyExchange(Byte[] raw)
public Byte[] ProcessServerFinished()
public Byte[] ProcessApplicationData(Byte[] raw)
}
internal System.ServiceModel.Security.Tokens.TlsSession : object {
protected Context Context
protected RecordProtocol Protocol
public Byte[] MasterSecret
protected Context get_Context()
protected RecordProtocol get_Protocol()
public Byte[] get_MasterSecret()
public Byte[] CreateHash(Byte[] key, Byte[] seedSrc, string label)
public Byte[] CreateHashAlt(Byte[] key, Byte[] seed, string label)
protected void WriteHandshake(MemoryStream ms)
protected void WriteChangeCipherSpec(MemoryStream ms)
protected void ReadHandshake(MemoryStream ms)
protected void ReadChangeCipherSpec(MemoryStream ms)
protected Byte[] ReadNextOperation(MemoryStream ms, HandshakeType expected)
protected void WriteOperations(MemoryStream ms, HandshakeMessage[] msgs)
protected void VerifyEndOfTransmit(MemoryStream ms)
}
public System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters : SecurityTokenParameters {
protected bool HasAsymmetricKey
protected bool SupportsClientAuthentication
protected bool SupportsClientWindowsIdentity
protected bool SupportsServerAuthentication
protected void .ctor(UserNameSecurityTokenParameters other)
protected bool get_HasAsymmetricKey()
protected bool get_SupportsClientAuthentication()
protected bool get_SupportsClientWindowsIdentity()
protected bool get_SupportsServerAuthentication()
protected SecurityTokenParameters CloneCore()
protected SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle)
protected internal void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement)
}
internal System.ServiceModel.Security.Tokens.WsscAuthenticatorCommunicationObject : AuthenticatorCommunicationObject {
private WSTrustSecurityTokenServiceProxy proxy
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
public Message ProcessNegotiation(Message request, TimeSpan timeout)
protected void OnAbort()
protected void OnOpen(TimeSpan timeout)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndOpen(IAsyncResult result)
protected void OnClose(TimeSpan timeout)
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnEndClose(IAsyncResult result)
}
public System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType : Enum {
public int value__
public X509KeyIdentifierClauseType Any
public X509KeyIdentifierClauseType Thumbprint
public X509KeyIdentifierClauseType IssuerSerial
public X509KeyIdentifierClauseType SubjectKeyIdentifier
public X509KeyIdentifierClauseType RawDataKeyIdentifier
}
public System.ServiceModel.Security.Tokens.X509SecurityTokenParameters : SecurityTokenParameters {
private X509KeyIdentifierClauseType reference_style
public X509KeyIdentifierClauseType X509ReferenceStyle
protected bool HasAsymmetricKey
protected bool SupportsClientAuthentication
protected bool SupportsClientWindowsIdentity
protected bool SupportsServerAuthentication
public void .ctor(X509KeyIdentifierClauseType x509ReferenceStyle)
public void .ctor(X509KeyIdentifierClauseType x509ReferenceStyle, SecurityTokenInclusionMode inclusionMode)
protected void .ctor(X509SecurityTokenParameters other)
public X509KeyIdentifierClauseType get_X509ReferenceStyle()
public void set_X509ReferenceStyle(X509KeyIdentifierClauseType value)
protected bool get_HasAsymmetricKey()
protected bool get_SupportsClientAuthentication()
protected bool get_SupportsClientWindowsIdentity()
protected bool get_SupportsServerAuthentication()
protected SecurityTokenParameters CloneCore()
protected SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle)
protected internal void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement)
public string ToString()
}
public System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite : SecurityAlgorithmSuite {
public string DefaultAsymmetricKeyWrapAlgorithm
public string DefaultAsymmetricSignatureAlgorithm
public string DefaultCanonicalizationAlgorithm
public string DefaultDigestAlgorithm
public string DefaultEncryptionAlgorithm
public int DefaultEncryptionKeyDerivationLength
public int DefaultSignatureKeyDerivationLength
public int DefaultSymmetricKeyLength
public string DefaultSymmetricKeyWrapAlgorithm
public string DefaultSymmetricSignatureAlgorithm
public string get_DefaultAsymmetricKeyWrapAlgorithm()
public string get_DefaultAsymmetricSignatureAlgorithm()
public string get_DefaultCanonicalizationAlgorithm()
public string get_DefaultDigestAlgorithm()
public string get_DefaultEncryptionAlgorithm()
public int get_DefaultEncryptionKeyDerivationLength()
public int get_DefaultSignatureKeyDerivationLength()
public int get_DefaultSymmetricKeyLength()
public string get_DefaultSymmetricKeyWrapAlgorithm()
public string get_DefaultSymmetricSignatureAlgorithm()
public bool IsAsymmetricKeyLengthSupported(int length)
public bool IsSymmetricKeyLengthSupported(int length)
}
public System.ServiceModel.Security.TrustVersion : object {
private TrustVersion <Default>k__BackingField
private TrustVersion <WSTrust13>k__BackingField
private TrustVersion <WSTrustFeb2005>k__BackingField
private XmlDictionaryString <Namespace>k__BackingField
private XmlDictionaryString <Prefix>k__BackingField
public TrustVersion Default
public TrustVersion WSTrust13
public TrustVersion WSTrustFeb2005
public XmlDictionaryString Namespace
public XmlDictionaryString Prefix
public TrustVersion get_Default()
private void set_Default(TrustVersion value)
public TrustVersion get_WSTrust13()
private void set_WSTrust13(TrustVersion value)
public TrustVersion get_WSTrustFeb2005()
private void set_WSTrustFeb2005(TrustVersion value)
public XmlDictionaryString get_Namespace()
internal void set_Namespace(XmlDictionaryString value)
public XmlDictionaryString get_Prefix()
internal void set_Prefix(XmlDictionaryString value)
}
public System.ServiceModel.Security.UserNamePasswordClientCredential : object {
private string username
private string password
public string Password
public string UserName
internal UserNamePasswordClientCredential Clone()
public string get_Password()
public void set_Password(string value)
public string get_UserName()
public void set_UserName(string value)
}
public System.ServiceModel.Security.UserNamePasswordServiceCredential : object {
private MembershipProvider provider
private TimeSpan lifetime
private bool cache_tokens
private bool include_win_groups
private int max_cache_tokens
private UserNamePasswordValidator validator
private UserNamePasswordValidationMode mode
public UserNamePasswordValidationMode UserNamePasswordValidationMode
public bool CacheLogonTokens
public TimeSpan CachedLogonTokenLifetime
public bool IncludeWindowsGroups
public int MaxCachedLogonTokens
public UserNamePasswordValidator CustomUserNamePasswordValidator
public MembershipProvider MembershipProvider
internal UserNamePasswordServiceCredential Clone()
public UserNamePasswordValidationMode get_UserNamePasswordValidationMode()
public void set_UserNamePasswordValidationMode(UserNamePasswordValidationMode value)
public bool get_CacheLogonTokens()
public void set_CacheLogonTokens(bool value)
public TimeSpan get_CachedLogonTokenLifetime()
public void set_CachedLogonTokenLifetime(TimeSpan value)
public bool get_IncludeWindowsGroups()
public void set_IncludeWindowsGroups(bool value)
public int get_MaxCachedLogonTokens()
public void set_MaxCachedLogonTokens(int value)
public UserNamePasswordValidator get_CustomUserNamePasswordValidator()
public void set_CustomUserNamePasswordValidator(UserNamePasswordValidator value)
public MembershipProvider get_MembershipProvider()
public void set_MembershipProvider(MembershipProvider value)
}
public System.ServiceModel.Security.UserNamePasswordValidationMode : Enum {
public int value__
public UserNamePasswordValidationMode Windows
public UserNamePasswordValidationMode MembershipProvider
public UserNamePasswordValidationMode Custom
}
public System.ServiceModel.Security.WindowsClientCredential : object {
private bool allow_ntlm
private TokenImpersonationLevel impersonation_level
private NetworkCredential client_credential
public TokenImpersonationLevel AllowedImpersonationLevel
public bool AllowNtlm
public NetworkCredential ClientCredential
internal WindowsClientCredential Clone()
public TokenImpersonationLevel get_AllowedImpersonationLevel()
public void set_AllowedImpersonationLevel(TokenImpersonationLevel value)
public bool get_AllowNtlm()
public void set_AllowNtlm(bool value)
public NetworkCredential get_ClientCredential()
public void set_ClientCredential(NetworkCredential value)
}
public System.ServiceModel.Security.WindowsServiceCredential : object {
private bool allow_anon
private bool inc_win_groups
public bool AllowAnonymousLogons
public bool IncludeWindowsGroups
internal WindowsServiceCredential Clone()
public bool get_AllowAnonymousLogons()
public void set_AllowAnonymousLogons(bool value)
public bool get_IncludeWindowsGroups()
public void set_IncludeWindowsGroups(bool value)
}
public System.ServiceModel.Security.WSSecurityTokenSerializer : SecurityTokenSerializer {
private WSSecurityTokenSerializer default_instance
private int defaultOffset
private int defaultLabelLength
private int defaultNonceLength
private SecurityVersion security_version
private bool emit_bsp
private SamlSerializer saml_serializer
private SecurityStateEncoder encoder
private List`1<Type> known_types
private int max_offset
private int max_label_length
private int max_nonce_length
public WSSecurityTokenSerializer DefaultInstance
private bool WSS1_0
public bool EmitBspRequiredAttributes
public SecurityVersion SecurityVersion
public int MaximumKeyDerivationOffset
public int MaximumKeyDerivationLabelLength
public int MaximumKeyDerivationNonceLength
public WSSecurityTokenSerializer get_DefaultInstance()
public void .ctor(bool emitBspRequiredAttributes)
public void .ctor(SecurityVersion securityVersion)
public void .ctor(SecurityVersion securityVersion, bool emitBspRequiredAttributes)
public void .ctor(SecurityVersion securityVersion, bool emitBspRequiredAttributes, SamlSerializer samlSerializer)
public void .ctor(SecurityVersion securityVersion, bool emitBspRequiredAttributes, SamlSerializer samlSerializer, SecurityStateEncoder securityStateEncoder, IEnumerable`1<Type> knownTypes)
public void .ctor(SecurityVersion securityVersion, bool emitBspRequiredAttributes, SamlSerializer samlSerializer, SecurityStateEncoder securityStateEncoder, IEnumerable`1<Type> knownTypes, int maximumKeyDerivationOffset, int maximumKeyDerivationLabelLength, int maximumKeyDerivationNonceLength)
private bool get_WSS1_0()
public bool get_EmitBspRequiredAttributes()
public SecurityVersion get_SecurityVersion()
public int get_MaximumKeyDerivationOffset()
public int get_MaximumKeyDerivationLabelLength()
public int get_MaximumKeyDerivationNonceLength()
protected string GetTokenTypeUri(Type tokenType)
protected bool CanReadKeyIdentifierClauseCore(XmlReader reader)
protected bool CanReadKeyIdentifierCore(XmlReader reader)
protected bool CanReadTokenCore(XmlReader reader)
public SecurityKeyIdentifierClause CreateKeyIdentifierClauseFromTokenXml(XmlElement element, SecurityTokenReferenceStyle tokenReferenceStyle)
protected SecurityKeyIdentifier ReadKeyIdentifierCore(XmlReader reader)
protected SecurityKeyIdentifierClause ReadKeyIdentifierClauseCore(XmlReader reader)
private SecurityKeyIdentifierClause ReadSecurityTokenReference(XmlReader reader)
private EncryptedKeyIdentifierClause ReadEncryptedKeyIdentifierClause(XmlReader reader)
protected SecurityToken ReadTokenCore(XmlReader reader, SecurityTokenResolver tokenResolver)
private DerivedKeySecurityToken ReadDerivedKeyToken(XmlReader reader, SecurityTokenResolver tokenResolver)
private DerivedKeySecurityToken ReadDerivedKeyTokenCore(XmlReader reader, SecurityTokenResolver tokenResolver)
private SecurityContextSecurityToken ReadSecurityContextToken(XmlReader reader, SecurityTokenResolver tokenResolver)
private WrappedKeySecurityToken ReadWrappedKeySecurityTokenCore(XmlReader reader, SecurityTokenResolver tokenResolver)
private X509SecurityToken ReadX509TokenCore(XmlReader reader, SecurityTokenResolver resolver)
private UserNameSecurityToken ReadUserNameTokenCore(XmlReader reader, SecurityTokenResolver resolver)
private BinarySecretSecurityToken ReadBinarySecretTokenCore(XmlReader reader, SecurityTokenResolver resolver)
protected bool CanWriteKeyIdentifierCore(SecurityKeyIdentifier keyIdentifier)
protected bool CanWriteKeyIdentifierClauseCore(SecurityKeyIdentifierClause keyIdentifierClause)
protected bool CanWriteTokenCore(SecurityToken token)
protected void WriteKeyIdentifierCore(XmlWriter writer, SecurityKeyIdentifier keyIdentifier)
protected void WriteKeyIdentifierClauseCore(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause)
private void WriteX509IssuerSerialKeyIdentifierClause(XmlWriter w, X509IssuerSerialKeyIdentifierClause ic)
private void WriteX509ThumbprintKeyIdentifierClause(XmlWriter w, X509ThumbprintKeyIdentifierClause ic)
private void WriteLocalIdKeyIdentifierClause(XmlWriter w, LocalIdKeyIdentifierClause ic)
private void WriteSecurityContextKeyIdentifierClause(XmlWriter w, SecurityContextKeyIdentifierClause ic)
private void WriteEncryptedKeyIdentifierClause(XmlWriter w, EncryptedKeyIdentifierClause ic)
private void WriteBinarySecretKeyIdentifierClause(XmlWriter w, BinarySecretKeyIdentifierClause ic)
private void WriteInternalEncryptedKeyIdentifierClause(XmlWriter w, InternalEncryptedKeyIdentifierClause ic)
private void WriteSamlAssertionKeyIdentifierClause(XmlWriter w, SamlAssertionKeyIdentifierClause ic)
protected void WriteTokenCore(XmlWriter writer, SecurityToken token)
private void WriteUserNameSecurityToken(XmlWriter w, UserNameSecurityToken token)
private void WriteX509SecurityToken(XmlWriter w, X509SecurityToken token)
private void WriteBinarySecretSecurityToken(XmlWriter w, BinarySecretSecurityToken token)
private void WriteDerivedKeySecurityToken(XmlWriter w, DerivedKeySecurityToken token)
private void WriteWrappedKeySecurityToken(XmlWriter w, WrappedKeySecurityToken token)
private void WriteSecurityContextSecurityToken(XmlWriter w, SecurityContextSecurityToken token)
public void .ctor(SecurityVersion securityVersion, TrustVersion trustVersion, SecureConversationVersion secureConversationVersion, bool emitBspRequiredAttributes, SamlSerializer samlSerializer, SecurityStateEncoder securityStateEncoder, IEnumerable`1<Type> knownTypes)
public void .ctor(SecurityVersion securityVersion, TrustVersion trustVersion, SecureConversationVersion secureConversationVersion, bool emitBspRequiredAttributes, SamlSerializer samlSerializer, SecurityStateEncoder securityStateEncoder, IEnumerable`1<Type> knownTypes, int maximumKeyDerivationOffset, int maximumKeyDerivationLabelLength, int maximumKeyDerivationNonceLength)
public bool TryCreateKeyIdentifierClauseFromTokenXml(XmlElement element, SecurityTokenReferenceStyle tokenReferenceStyle, SecurityKeyIdentifierClause& securityKeyIdentifierClause)
}
public System.ServiceModel.Security.WSTrustChannel : object {
public IChannel Channel
public WSTrustChannelFactory ChannelFactory
public IWSTrustChannelContract Contract
public CommunicationState State
public TrustVersion TrustVersion
public WSTrustRequestSerializer WSTrustRequestSerializer
public WSTrustResponseSerializer WSTrustResponseSerializer
public WSTrustSerializationContext WSTrustSerializationContext
public void .ctor(WSTrustChannelFactory factory, IWSTrustChannelContract inner, TrustVersion trustVersion, WSTrustSerializationContext context, WSTrustRequestSerializer requestSerializer, WSTrustResponseSerializer responseSerializer)
public IChannel get_Channel()
public WSTrustChannelFactory get_ChannelFactory()
public IWSTrustChannelContract get_Contract()
public CommunicationState get_State()
public TrustVersion get_TrustVersion()
public WSTrustRequestSerializer get_WSTrustRequestSerializer()
public WSTrustResponseSerializer get_WSTrustResponseSerializer()
public WSTrustSerializationContext get_WSTrustSerializationContext()
public void add_Closed(EventHandler value)
public void remove_Closed(EventHandler value)
public void add_Closing(EventHandler value)
public void remove_Closing(EventHandler value)
public void add_Faulted(EventHandler value)
public void remove_Faulted(EventHandler value)
public void add_Opened(EventHandler value)
public void remove_Opened(EventHandler value)
public void add_Opening(EventHandler value)
public void remove_Opening(EventHandler value)
public void Abort()
public IAsyncResult BeginCancel(RequestSecurityToken rst, AsyncCallback callback, object state)
public IAsyncResult BeginCancel(Message message, AsyncCallback callback, object asyncState)
public IAsyncResult BeginClose(AsyncCallback callback, object state)
public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginIssue(RequestSecurityToken rst, AsyncCallback callback, object asyncState)
public IAsyncResult BeginIssue(Message message, AsyncCallback callback, object asyncState)
public IAsyncResult BeginOpen(AsyncCallback callback, object state)
public IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
public IAsyncResult BeginRenew(RequestSecurityToken rst, AsyncCallback callback, object state)
public IAsyncResult BeginRenew(Message message, AsyncCallback callback, object asyncState)
public IAsyncResult BeginValidate(RequestSecurityToken rst, AsyncCallback callback, object state)
public IAsyncResult BeginValidate(Message message, AsyncCallback callback, object asyncState)
public RequestSecurityTokenResponse Cancel(RequestSecurityToken rst)
public Message Cancel(Message message)
public void Close()
public void Close(TimeSpan timeout)
public Message EndCancel(IAsyncResult asyncResult)
public void EndCancel(IAsyncResult result, RequestSecurityTokenResponse& rstr)
public void EndClose(IAsyncResult result)
public Message EndIssue(IAsyncResult asyncResult)
public SecurityToken EndIssue(IAsyncResult result, RequestSecurityTokenResponse& rstr)
public void EndOpen(IAsyncResult result)
public Message EndRenew(IAsyncResult asyncResult)
public void EndRenew(IAsyncResult result, RequestSecurityTokenResponse& rstr)
public Message EndValidate(IAsyncResult asyncResult)
public void EndValidate(IAsyncResult result, RequestSecurityTokenResponse& rstr)
public T GetProperty()
public SecurityToken GetTokenFromResponse(RequestSecurityToken request, RequestSecurityTokenResponse response)
public SecurityToken Issue(RequestSecurityToken rst)
public SecurityToken Issue(RequestSecurityToken rst, RequestSecurityTokenResponse& rstr)
public Message Issue(Message message)
public void Open()
public void Open(TimeSpan timeout)
public RequestSecurityTokenResponse Renew(RequestSecurityToken rst)
public Message Renew(Message message)
public RequestSecurityTokenResponse Validate(RequestSecurityToken rst)
public Message Validate(Message message)
}
public System.ServiceModel.Security.WSTrustChannelFactory : ChannelFactory`1<IWSTrustChannelContract> {
public SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager
public SecurityTokenResolver SecurityTokenResolver
public TrustVersion TrustVersion
public SecurityTokenResolver UseKeyTokenResolver
public WSTrustRequestSerializer WSTrustRequestSerializer
public WSTrustResponseSerializer WSTrustResponseSerializer
public void .ctor(Binding binding)
public void .ctor(Binding binding, EndpointAddress remoteAddress)
public void .ctor(Binding binding, string remoteAddress)
public void .ctor(ServiceEndpoint endpoint)
public void .ctor(string endpointConfigurationName)
public void .ctor(string endpointConfigurationName, EndpointAddress remoteAddress)
public SecurityTokenHandlerCollectionManager get_SecurityTokenHandlerCollectionManager()
public void set_SecurityTokenHandlerCollectionManager(SecurityTokenHandlerCollectionManager value)
public SecurityTokenResolver get_SecurityTokenResolver()
public void set_SecurityTokenResolver(SecurityTokenResolver value)
public TrustVersion get_TrustVersion()
public void set_TrustVersion(TrustVersion value)
public SecurityTokenResolver get_UseKeyTokenResolver()
public void set_UseKeyTokenResolver(SecurityTokenResolver value)
public WSTrustRequestSerializer get_WSTrustRequestSerializer()
public void set_WSTrustRequestSerializer(WSTrustRequestSerializer value)
public WSTrustResponseSerializer get_WSTrustResponseSerializer()
public void set_WSTrustResponseSerializer(WSTrustResponseSerializer value)
}
public System.ServiceModel.Security.WSTrustRequestBodyWriter : BodyWriter {
public void .ctor(RequestSecurityToken requestSecurityToken, WSTrustRequestSerializer serializer, WSTrustSerializationContext serializationContext)
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
}
public System.ServiceModel.Security.WSTrustRequestProcessingErrorEventArgs : EventArgs {
public Exception Exception
public string RequestType
public void .ctor(string requestType, Exception exception)
public Exception get_Exception()
public string get_RequestType()
}
public System.ServiceModel.Security.WSTrustResponseBodyWriter : BodyWriter {
public void .ctor(RequestSecurityTokenResponse requestSecurityTokenResponse, WSTrustResponseSerializer serializer, WSTrustSerializationContext context)
protected void OnWriteBodyContents(XmlDictionaryWriter writer)
}
public System.ServiceModel.Security.WSTrustServiceContract : object {
public SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration
public void .ctor(SecurityTokenServiceConfiguration securityTokenServiceConfiguration)
public SecurityTokenServiceConfiguration get_SecurityTokenServiceConfiguration()
public void add_RequestFailed(EventHandler`1<WSTrustRequestProcessingErrorEventArgs> value)
public void remove_RequestFailed(EventHandler`1<WSTrustRequestProcessingErrorEventArgs> value)
public void AddBindingParameters(ContractDescription contractDescription, ServiceEndpoint endpoint, BindingParameterCollection bindingParameters)
public void ApplyClientBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime)
public void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime)
public IAsyncResult BeginTrust13Cancel(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13CancelResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13Issue(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13IssueResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13Renew(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13RenewResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13Validate(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrust13ValidateResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005Cancel(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005CancelResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005Issue(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005IssueResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005Renew(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005RenewResponse(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005Validate(Message request, AsyncCallback callback, object state)
public IAsyncResult BeginTrustFeb2005ValidateResponse(Message request, AsyncCallback callback, object state)
public Message EndTrust13Cancel(IAsyncResult ar)
public Message EndTrust13CancelResponse(IAsyncResult ar)
public Message EndTrust13Issue(IAsyncResult ar)
public Message EndTrust13IssueResponse(IAsyncResult ar)
public Message EndTrust13Renew(IAsyncResult ar)
public Message EndTrust13RenewResponse(IAsyncResult ar)
public Message EndTrust13Validate(IAsyncResult ar)
public Message EndTrust13ValidateResponse(IAsyncResult ar)
public Message EndTrustFeb2005Cancel(IAsyncResult ar)
public Message EndTrustFeb2005CancelResponse(IAsyncResult ar)
public Message EndTrustFeb2005Issue(IAsyncResult ar)
public Message EndTrustFeb2005IssueResponse(IAsyncResult ar)
public Message EndTrustFeb2005Renew(IAsyncResult ar)
public Message EndTrustFeb2005RenewResponse(IAsyncResult ar)
public Message EndTrustFeb2005Validate(IAsyncResult ar)
public Message EndTrustFeb2005ValidateResponse(IAsyncResult ar)
public void ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)
public void ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)
public Message ProcessTrust13Cancel(Message message)
public Message ProcessTrust13CancelResponse(Message message)
public Message ProcessTrust13Issue(Message message)
public Message ProcessTrust13IssueResponse(Message message)
public Message ProcessTrust13Renew(Message message)
public Message ProcessTrust13RenewResponse(Message message)
public Message ProcessTrust13Validate(Message message)
public Message ProcessTrust13ValidateResponse(Message message)
public Message ProcessTrustFeb2005Cancel(Message message)
public Message ProcessTrustFeb2005CancelResponse(Message message)
public Message ProcessTrustFeb2005Issue(Message message)
public Message ProcessTrustFeb2005IssueResponse(Message message)
public Message ProcessTrustFeb2005Renew(Message message)
public Message ProcessTrustFeb2005RenewResponse(Message message)
public Message ProcessTrustFeb2005Validate(Message message)
public Message ProcessTrustFeb2005ValidateResponse(Message message)
public void Validate(ContractDescription contractDescription, ServiceEndpoint endpoint)
}
public System.ServiceModel.Security.WSTrustServiceHost : ServiceHost {
public SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration
public WSTrustServiceContract ServiceContract
public void .ctor(SecurityTokenServiceConfiguration securityTokenServiceConfiguration, Uri[] baseAddresses)
public void .ctor(WSTrustServiceContract serviceContract, Uri[] baseAddresses)
public SecurityTokenServiceConfiguration get_SecurityTokenServiceConfiguration()
public WSTrustServiceContract get_ServiceContract()
}
public System.ServiceModel.Security.X509CertificateInitiatorClientCredential : object {
private X509Certificate2 certificate
public X509Certificate2 Certificate
internal X509CertificateInitiatorClientCredential Clone()
public X509Certificate2 get_Certificate()
public void set_Certificate(X509Certificate2 value)
public void SetCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue)
public void SetCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName)
}
public System.ServiceModel.Security.X509CertificateInitiatorServiceCredential : object {
private X509ClientCertificateAuthentication auth
private X509Certificate2 certificate
public X509ClientCertificateAuthentication Authentication
public X509Certificate2 Certificate
internal X509CertificateInitiatorServiceCredential Clone()
public X509ClientCertificateAuthentication get_Authentication()
public X509Certificate2 get_Certificate()
public void set_Certificate(X509Certificate2 value)
public void SetCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue)
public void SetCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName)
}
public System.ServiceModel.Security.X509CertificateRecipientClientCredential : object {
private X509ServiceCertificateAuthentication auth
private X509Certificate2 certificate
private Dictionary`2<Uri, X509Certificate2> scoped
private X509CertificateValidator validator
private X509RevocationMode revocation_mode
private StoreLocation store_loc
public X509ServiceCertificateAuthentication Authentication
public X509Certificate2 DefaultCertificate
public Dictionary`2<Uri, X509Certificate2> ScopedCertificates
public X509ServiceCertificateAuthentication SslCertificateAuthentication
internal X509CertificateRecipientClientCredential Clone()
public X509ServiceCertificateAuthentication get_Authentication()
public X509Certificate2 get_DefaultCertificate()
public void set_DefaultCertificate(X509Certificate2 value)
public Dictionary`2<Uri, X509Certificate2> get_ScopedCertificates()
public X509ServiceCertificateAuthentication get_SslCertificateAuthentication()
public void set_SslCertificateAuthentication(X509ServiceCertificateAuthentication value)
public void SetDefaultCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName)
public void SetDefaultCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue)
public void SetScopedCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName, Uri targetService)
public void SetScopedCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue, Uri targetService)
}
public System.ServiceModel.Security.X509CertificateRecipientServiceCredential : object {
private X509Certificate2 certificate
public X509Certificate2 Certificate
internal X509CertificateRecipientServiceCredential Clone()
public X509Certificate2 get_Certificate()
public void set_Certificate(X509Certificate2 value)
public void SetCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue)
public void SetCertificate(string subjectName)
public void SetCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName)
}
public System.ServiceModel.Security.X509ClientCertificateAuthentication : object {
private X509CertificateValidationMode validation_mode
private X509CertificateValidator custom_validator
private bool include_windows_groups
private bool map_cert_account
private X509RevocationMode revocation_mode
private StoreLocation trusted_store_loc
public X509CertificateValidationMode CertificateValidationMode
public X509CertificateValidator CustomCertificateValidator
public bool IncludeWindowsGroups
public bool MapClientCertificateToWindowsAccount
public X509RevocationMode RevocationMode
public StoreLocation TrustedStoreLocation
internal X509ClientCertificateAuthentication Clone()
public X509CertificateValidationMode get_CertificateValidationMode()
public void set_CertificateValidationMode(X509CertificateValidationMode value)
public X509CertificateValidator get_CustomCertificateValidator()
public void set_CustomCertificateValidator(X509CertificateValidator value)
public bool get_IncludeWindowsGroups()
public void set_IncludeWindowsGroups(bool value)
public bool get_MapClientCertificateToWindowsAccount()
public void set_MapClientCertificateToWindowsAccount(bool value)
public X509RevocationMode get_RevocationMode()
public void set_RevocationMode(X509RevocationMode value)
public StoreLocation get_TrustedStoreLocation()
public void set_TrustedStoreLocation(StoreLocation value)
}
public System.ServiceModel.Security.X509PeerCertificateAuthentication : object {
private X509CertificateValidator validator
private X509RevocationMode revocation_mode
private StoreLocation store_loc
private X509CertificateValidationMode validation_mode
public X509CertificateValidator CustomCertificateValidator
public X509RevocationMode RevocationMode
public StoreLocation TrustedStoreLocation
public X509CertificateValidationMode CertificateValidationMode
internal X509PeerCertificateAuthentication Clone()
public X509CertificateValidator get_CustomCertificateValidator()
public void set_CustomCertificateValidator(X509CertificateValidator value)
public X509RevocationMode get_RevocationMode()
public void set_RevocationMode(X509RevocationMode value)
public StoreLocation get_TrustedStoreLocation()
public void set_TrustedStoreLocation(StoreLocation value)
public X509CertificateValidationMode get_CertificateValidationMode()
public void set_CertificateValidationMode(X509CertificateValidationMode value)
}
public System.ServiceModel.Security.X509ServiceCertificateAuthentication : object {
private X509CertificateValidationMode validation_mode
private X509CertificateValidator custom_validator
private X509RevocationMode revocation_mode
private StoreLocation trusted_store_loc
public X509CertificateValidationMode CertificateValidationMode
public X509CertificateValidator CustomCertificateValidator
public X509RevocationMode RevocationMode
public StoreLocation TrustedStoreLocation
internal X509ServiceCertificateAuthentication Clone()
public X509CertificateValidationMode get_CertificateValidationMode()
public void set_CertificateValidationMode(X509CertificateValidationMode value)
public X509CertificateValidator get_CustomCertificateValidator()
public void set_CustomCertificateValidator(X509CertificateValidator value)
public X509RevocationMode get_RevocationMode()
public void set_RevocationMode(X509RevocationMode value)
public StoreLocation get_TrustedStoreLocation()
public void set_TrustedStoreLocation(StoreLocation value)
}
public System.ServiceModel.SecurityMode : Enum {
public int value__
public SecurityMode None
public SecurityMode Transport
public SecurityMode Message
public SecurityMode TransportWithMessageCredential
}
public System.ServiceModel.ServerTooBusyException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.ServiceActivationException : CommunicationException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.ServiceModel.ServiceAuthenticationManager : object {
public ReadOnlyCollection`1<IAuthorizationPolicy> Authenticate(ReadOnlyCollection`1<IAuthorizationPolicy> authPolicy, Uri listenUri, Message& message)
}
public System.ServiceModel.ServiceAuthorizationManager : object {
public bool CheckAccess(OperationContext operationContext)
public bool CheckAccess(OperationContext operationContext, Message& message)
protected bool CheckAccessCore(OperationContext operationContext)
protected ReadOnlyCollection`1<IAuthorizationPolicy> GetAuthorizationPolicies(OperationContext operationContext)
}
public System.ServiceModel.ServiceBehaviorAttribute : Attribute {
private string tx_timeout
private object singleton
private string <Name>k__BackingField
private string <Namespace>k__BackingField
private string <ConfigurationName>k__BackingField
private AddressFilterMode <AddressFilterMode>k__BackingField
private bool <AutomaticSessionShutdown>k__BackingField
private ConcurrencyMode <ConcurrencyMode>k__BackingField
private bool <IgnoreExtensionDataObject>k__BackingField
private InstanceContextMode <InstanceContextMode>k__BackingField
private bool <IncludeExceptionDetailInFaults>k__BackingField
private int <MaxItemsInObjectGraph>k__BackingField
private bool <ReleaseServiceInstanceOnTransactionComplete>k__BackingField
private bool <UseSynchronizationContext>k__BackingField
private IsolationLevel <TransactionIsolationLevel>k__BackingField
private bool <TransactionAutoCompleteOnSessionClose>k__BackingField
private bool <ValidateMustUnderstand>k__BackingField
public string Name
public string Namespace
public string ConfigurationName
public AddressFilterMode AddressFilterMode
public bool AutomaticSessionShutdown
public ConcurrencyMode ConcurrencyMode
public bool IgnoreExtensionDataObject
public InstanceContextMode InstanceContextMode
public bool IncludeExceptionDetailInFaults
public int MaxItemsInObjectGraph
public bool ReleaseServiceInstanceOnTransactionComplete
public bool UseSynchronizationContext
public IsolationLevel TransactionIsolationLevel
public bool TransactionAutoCompleteOnSessionClose
public string TransactionTimeout
public bool ValidateMustUnderstand
public bool EnsureOrderedDispatch
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_ConfigurationName()
public void set_ConfigurationName(string value)
public AddressFilterMode get_AddressFilterMode()
public void set_AddressFilterMode(AddressFilterMode value)
public bool get_AutomaticSessionShutdown()
public void set_AutomaticSessionShutdown(bool value)
public ConcurrencyMode get_ConcurrencyMode()
public void set_ConcurrencyMode(ConcurrencyMode value)
public bool get_IgnoreExtensionDataObject()
public void set_IgnoreExtensionDataObject(bool value)
public InstanceContextMode get_InstanceContextMode()
public void set_InstanceContextMode(InstanceContextMode value)
public bool get_IncludeExceptionDetailInFaults()
public void set_IncludeExceptionDetailInFaults(bool value)
public int get_MaxItemsInObjectGraph()
public void set_MaxItemsInObjectGraph(int value)
public bool get_ReleaseServiceInstanceOnTransactionComplete()
public void set_ReleaseServiceInstanceOnTransactionComplete(bool value)
public bool get_UseSynchronizationContext()
public void set_UseSynchronizationContext(bool value)
public IsolationLevel get_TransactionIsolationLevel()
public void set_TransactionIsolationLevel(IsolationLevel value)
public bool get_TransactionAutoCompleteOnSessionClose()
public void set_TransactionAutoCompleteOnSessionClose(bool value)
public string get_TransactionTimeout()
public void set_TransactionTimeout(string value)
public bool get_ValidateMustUnderstand()
public void set_ValidateMustUnderstand(bool value)
public object GetWellKnownSingleton()
public void SetWellKnownSingleton(object value)
private void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
private InstanceContext CreateSingletonInstanceContext(ServiceHostBase host)
private IInstanceContextProvider CreateInstanceContextProvider(ServiceHostBase host, DispatchRuntime runtime)
private void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase)
public bool get_EnsureOrderedDispatch()
public void set_EnsureOrderedDispatch(bool value)
public bool ShouldSerializeConfigurationName()
public bool ShouldSerializeReleaseServiceInstanceOnTransactionComplete()
public bool ShouldSerializeTransactionAutoCompleteOnSessionClose()
public bool ShouldSerializeTransactionIsolationLevel()
public bool ShouldSerializeTransactionTimeout()
}
public System.ServiceModel.ServiceConfiguration : object {
public ServiceAuthenticationBehavior Authentication
public ServiceAuthorizationBehavior Authorization
public ReadOnlyCollection`1<Uri> BaseAddresses
public TimeSpan CloseTimeout
public ServiceCredentials Credentials
public ServiceDescription Description
public IdentityConfiguration IdentityConfiguration
public TimeSpan OpenTimeout
public bool UseIdentityConfiguration
public ServiceAuthenticationBehavior get_Authentication()
public ServiceAuthorizationBehavior get_Authorization()
public ReadOnlyCollection`1<Uri> get_BaseAddresses()
public TimeSpan get_CloseTimeout()
public void set_CloseTimeout(TimeSpan value)
public ServiceCredentials get_Credentials()
public ServiceDescription get_Description()
public IdentityConfiguration get_IdentityConfiguration()
public void set_IdentityConfiguration(IdentityConfiguration value)
public TimeSpan get_OpenTimeout()
public void set_OpenTimeout(TimeSpan value)
public bool get_UseIdentityConfiguration()
public void set_UseIdentityConfiguration(bool value)
public void AddServiceEndpoint(ServiceEndpoint endpoint)
public ServiceEndpoint AddServiceEndpoint(Type contractType, Binding binding, string address)
public ServiceEndpoint AddServiceEndpoint(Type contractType, Binding binding, string address, Uri listenUri)
public ServiceEndpoint AddServiceEndpoint(Type contractType, Binding binding, Uri address)
public ServiceEndpoint AddServiceEndpoint(Type contractType, Binding binding, Uri address, Uri listenUri)
public Collection`1<ServiceEndpoint> EnableProtocol(Binding protocol)
public void LoadFromConfiguration()
public void LoadFromConfiguration(Configuration configuration)
public void SetEndpointAddress(ServiceEndpoint endpoint, string relativeAddress)
}
public System.ServiceModel.ServiceContractAttribute : Attribute {
private Type callback_contract
private string name
private string ns
private SessionMode session
private ProtectionLevel protection_level
private bool has_protection_level
private string _configurationName
public Type CallbackContract
public string Name
public string Namespace
public bool HasProtectionLevel
public ProtectionLevel ProtectionLevel
public SessionMode SessionMode
public string ConfigurationName
public Type get_CallbackContract()
public void set_CallbackContract(Type value)
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public bool get_HasProtectionLevel()
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public SessionMode get_SessionMode()
public void set_SessionMode(SessionMode value)
public string get_ConfigurationName()
public void set_ConfigurationName(string value)
}
public System.ServiceModel.ServiceHost : ServiceHostBase {
private Type service_type
private object instance
private Dictionary`2<string, ContractDescription> contracts
public object SingletonInstance
public void .ctor(object singletonInstance, Uri[] baseAddresses)
public void .ctor(Type serviceType, Uri[] baseAddresses)
public object get_SingletonInstance()
private Uri CreateUri(string address)
public ServiceEndpoint AddServiceEndpoint(Type implementedContract, Binding binding, string address)
public ServiceEndpoint AddServiceEndpoint(Type implementedContract, Binding binding, string address, Uri listenUri)
public ServiceEndpoint AddServiceEndpoint(Type implementedContract, Binding binding, Uri address)
public ServiceEndpoint AddServiceEndpoint(Type implementedContract, Binding binding, Uri address, Uri listenUri)
private ContractDescription GetExistingContract(Type implementedContract)
protected ServiceDescription CreateDescription(IDictionary`2& implementedContracts)
private IEnumerable`1<ContractDescription> GetServiceContractDescriptions()
private TAttr PopulateAttribute()
protected void InitializeDescription(Type serviceType, UriSchemeKeyedCollection baseAddresses)
protected void InitializeDescription(object singletonInstance, UriSchemeKeyedCollection baseAddresses)
}
public System.ServiceModel.ServiceHostBase : CommunicationObject {
internal ServiceHostBase CurrentServiceHostHack
private ServiceCredentials credentials
private ServiceDescription description
private UriSchemeKeyedCollection base_addresses
private TimeSpan open_timeout
private TimeSpan close_timeout
private TimeSpan instance_idle_timeout
private List`1<InstanceContext> contexts
private ReadOnlyCollection`1<InstanceContext> exposed_contexts
private ChannelDispatcherCollection channel_dispatchers
private IDictionary`2<string, ContractDescription> contracts
private int flow_limit
private IExtensionCollection`1<ServiceHostBase> extensions
private EventHandler`1<UnknownMessageReceivedEventArgs> UnknownMessageReceived
private ServiceAuthorizationBehavior <Authorization>k__BackingField
private ContractDescription mex_contract
private ContractDescription help_page_contract
private Action`1<TimeSpan> close_delegate
private Action`1<TimeSpan> open_delegate
public ReadOnlyCollection`1<Uri> BaseAddresses
public ChannelDispatcherCollection ChannelDispatchers
public ServiceAuthorizationBehavior Authorization
public ServiceCredentials Credentials
public ServiceDescription Description
protected internal IDictionary`2<string, ContractDescription> ImplementedContracts
public IExtensionCollection`1<ServiceHostBase> Extensions
protected internal TimeSpan DefaultCloseTimeout
protected internal TimeSpan DefaultOpenTimeout
public TimeSpan CloseTimeout
public TimeSpan OpenTimeout
public int ManualFlowControlLimit
public ServiceAuthenticationBehavior Authentication
public void add_UnknownMessageReceived(EventHandler`1<UnknownMessageReceivedEventArgs> value)
public void remove_UnknownMessageReceived(EventHandler`1<UnknownMessageReceivedEventArgs> value)
internal void OnUnknownMessageReceived(Message message)
public ReadOnlyCollection`1<Uri> get_BaseAddresses()
internal Uri CreateUri(string scheme, Uri relativeUri)
public ChannelDispatcherCollection get_ChannelDispatchers()
public ServiceAuthorizationBehavior get_Authorization()
private void set_Authorization(ServiceAuthorizationBehavior value)
public ServiceCredentials get_Credentials()
public ServiceDescription get_Description()
protected internal IDictionary`2<string, ContractDescription> get_ImplementedContracts()
public IExtensionCollection`1<ServiceHostBase> get_Extensions()
protected internal TimeSpan get_DefaultCloseTimeout()
protected internal TimeSpan get_DefaultOpenTimeout()
public TimeSpan get_CloseTimeout()
public void set_CloseTimeout(TimeSpan value)
public TimeSpan get_OpenTimeout()
public void set_OpenTimeout(TimeSpan value)
public int get_ManualFlowControlLimit()
public void set_ManualFlowControlLimit(int value)
protected void AddBaseAddress(Uri baseAddress)
public ServiceEndpoint AddServiceEndpoint(string implementedContract, Binding binding, string address)
public ServiceEndpoint AddServiceEndpoint(string implementedContract, Binding binding, string address, Uri listenUri)
public ServiceEndpoint AddServiceEndpoint(string implementedContract, Binding binding, Uri address)
public ServiceEndpoint AddServiceEndpoint(string implementedContract, Binding binding, Uri address, Uri listenUri)
public void AddServiceEndpoint(ServiceEndpoint endpoint)
private Type PopulateType(string typeName)
private ContractDescription GetContract(string name, bool mexBinding)
internal Uri BuildAbsoluteUri(Uri address, Binding binding)
internal ServiceEndpoint AddServiceEndpointCore(ContractDescription cd, Binding binding, EndpointAddress address, Uri listenUri)
protected void ApplyConfiguration()
private void AddServiceBehaviors(string configurationName, bool throwIfNotFound)
private void ApplyServiceElement(ServiceElement service)
private ServiceElement GetServiceElement()
protected ServiceDescription CreateDescription(IDictionary`2& implementedContracts)
protected void InitializeDescription(UriSchemeKeyedCollection baseAddresses)
protected void InitializeRuntime()
private void ValidateDescription()
protected void LoadConfigurationSection(ServiceElement serviceSection)
protected void OnAbort()
protected IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
protected IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
protected void OnClose(TimeSpan timeout)
private void OnCloseOrAbort(TimeSpan timeout)
protected void OnOpen(TimeSpan timeout)
protected void OnEndClose(IAsyncResult result)
protected void OnEndOpen(IAsyncResult result)
protected void OnOpened()
protected void ReleasePerformanceCounters()
private void System.IDisposable.Dispose()
private bool <ValidateDescription>b__67_0(ServiceEndpoint e)
public ServiceAuthenticationBehavior get_Authentication()
public ReadOnlyCollection`1<ServiceEndpoint> AddDefaultEndpoints()
public int IncrementManualFlowControlLimit(int incrementBy)
public void SetEndpointAddress(ServiceEndpoint endpoint, string relativeAddress)
}
public System.ServiceModel.ServiceKnownTypeAttribute : Attribute {
private string method
private Type declaring_type
private Type type
private MethodInfo method_cached
private BindingFlags flags
private Type[] get_types
public string MethodName
public Type DeclaringType
public Type Type
public void .ctor(string methodName)
public void .ctor(Type type)
public void .ctor(string methodName, Type declaringType)
public string get_MethodName()
public Type get_DeclaringType()
public Type get_Type()
internal IEnumerable`1<Type> GetTypes(ICustomAttributeProvider provider)
}
public System.ServiceModel.ServiceSecurityContext : object {
private ServiceSecurityContext anonymous
private ServiceSecurityContext current
private AuthorizationContext context
private ReadOnlyCollection`1<IAuthorizationPolicy> policies
private IIdentity primary_identity
public ServiceSecurityContext Anonymous
public ServiceSecurityContext Current
public AuthorizationContext AuthorizationContext
public ReadOnlyCollection`1<IAuthorizationPolicy> AuthorizationPolicies
public bool IsAnonymous
public IIdentity PrimaryIdentity
public WindowsIdentity WindowsIdentity
public ServiceSecurityContext get_Anonymous()
public ServiceSecurityContext get_Current()
public void .ctor(AuthorizationContext authorizationContext)
public void .ctor(ReadOnlyCollection`1<IAuthorizationPolicy> authorizationPolicies)
public void .ctor(AuthorizationContext authorizationContext, ReadOnlyCollection`1<IAuthorizationPolicy> authorizationPolicies)
public AuthorizationContext get_AuthorizationContext()
public ReadOnlyCollection`1<IAuthorizationPolicy> get_AuthorizationPolicies()
public void set_AuthorizationPolicies(ReadOnlyCollection`1<IAuthorizationPolicy> value)
public bool get_IsAnonymous()
public IIdentity get_PrimaryIdentity()
public WindowsIdentity get_WindowsIdentity()
}
public System.ServiceModel.SessionMode : Enum {
public int value__
public SessionMode Allowed
public SessionMode Required
public SessionMode NotAllowed
}
public System.ServiceModel.SpnEndpointIdentity : EndpointIdentity {
public TimeSpan SpnLookupTime
public void .ctor(Claim identity)
public void .ctor(string spnName)
public TimeSpan get_SpnLookupTime()
public void set_SpnLookupTime(TimeSpan value)
}
public System.ServiceModel.Syndication.Atom10FeedFormatter : SyndicationFeedFormatter {
private string AtomNamespace
private bool preserve_att_ext
private bool preserve_elem_ext
private Type feed_type
protected Type FeedType
public bool PreserveAttributeExtensions
public bool PreserveElementExtensions
public string Version
public void .ctor(SyndicationFeed feedToWrite)
public void .ctor(Type feedTypeToCreate)
protected Type get_FeedType()
public bool get_PreserveAttributeExtensions()
public void set_PreserveAttributeExtensions(bool value)
public bool get_PreserveElementExtensions()
public void set_PreserveElementExtensions(bool value)
public string get_Version()
protected SyndicationFeed CreateFeedInstance()
public bool CanRead(XmlReader reader)
public void ReadFrom(XmlReader reader)
protected SyndicationItem ReadItem(XmlReader reader, SyndicationFeed feed)
protected IEnumerable`1<SyndicationItem> ReadItems(XmlReader reader, SyndicationFeed feed, Boolean& areAllItemsRead)
protected void WriteItem(XmlWriter writer, SyndicationItem item, Uri feedBaseUri)
protected void WriteItems(XmlWriter writer, IEnumerable`1<SyndicationItem> items, Uri feedBaseUri)
public void WriteTo(XmlWriter writer)
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void ReadXml(XmlReader reader, bool fromSerializable)
internal TextSyndicationContent ReadTextSyndicationContent(XmlReader reader)
internal void ReadCategory(XmlReader reader, SyndicationCategory category)
private void ReadLink(XmlReader reader, SyndicationLink link)
private void ReadPerson(XmlReader reader, SyndicationPerson person)
private Uri CreateUri(string uri)
private void WriteXml(XmlWriter writer, bool writeRoot)
internal void WriteCategory(SyndicationCategory category, XmlWriter writer)
}
public System.ServiceModel.Syndication.Atom10FeedFormatter`1 : Atom10FeedFormatter {
public void .ctor(TSyndicationFeed feedToWrite)
protected SyndicationFeed CreateFeedInstance()
}
public System.ServiceModel.Syndication.Atom10ItemFormatter : SyndicationItemFormatter {
private string AtomNamespace
private bool preserve_att_ext
private bool preserve_elem_ext
private Type item_type
protected Type ItemType
public bool PreserveAttributeExtensions
public bool PreserveElementExtensions
public string Version
public void .ctor(SyndicationItem itemToWrite)
public void .ctor(Type itemTypeToCreate)
protected Type get_ItemType()
public bool get_PreserveAttributeExtensions()
public void set_PreserveAttributeExtensions(bool value)
public bool get_PreserveElementExtensions()
public void set_PreserveElementExtensions(bool value)
public string get_Version()
protected SyndicationItem CreateItemInstance()
public bool CanRead(XmlReader reader)
public void ReadFrom(XmlReader reader)
public void WriteTo(XmlWriter writer)
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void ReadXml(XmlReader reader, bool fromSerializable)
private TextSyndicationContent ReadTextSyndicationContent(XmlReader reader)
private void ReadCategory(XmlReader reader, SyndicationCategory category)
private void ReadLink(XmlReader reader, SyndicationLink link)
private void ReadPerson(XmlReader reader, SyndicationPerson person)
private SyndicationFeed ReadSourceFeed(XmlReader reader)
private Uri CreateUri(string uri)
private void WriteXml(XmlWriter writer, bool writeRoot)
}
public System.ServiceModel.Syndication.Atom10ItemFormatter`1 : Atom10ItemFormatter {
public void .ctor(TSyndicationItem itemToWrite)
protected SyndicationItem CreateItemInstance()
}
public System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter : CategoriesDocumentFormatter {
private Type inline_type
private Type ref_type
private Atom10FeedFormatter atom10_formatter
public string Version
public void .ctor(CategoriesDocument documentToWrite)
public void .ctor(Type inlineDocumentType, Type referencedDocumentType)
public string get_Version()
public bool CanRead(XmlReader reader)
protected InlineCategoriesDocument CreateInlineCategoriesDocument()
protected ReferencedCategoriesDocument CreateReferencedCategoriesDocument()
public void ReadFrom(XmlReader reader)
private void ReadInlineCategoriesContent(InlineCategoriesDocument doc, XmlReader reader)
public void WriteTo(XmlWriter writer)
private void WriteInlineCategoriesContent(InlineCategoriesDocument doc, XmlWriter writer)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
}
public System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter : ServiceDocumentFormatter {
private Type doc_type
public string Version
public void .ctor(ServiceDocument documentToWrite)
public void .ctor(Type documentTypeToCreate)
public string get_Version()
public bool CanRead(XmlReader reader)
protected ServiceDocument CreateDocumentInstance()
public void ReadFrom(XmlReader reader)
public void WriteTo(XmlWriter writer)
private void WriteContentTo(XmlWriter writer)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
}
public System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter`1 : AtomPub10ServiceDocumentFormatter {
public void .ctor(TServiceDocument documentToWrite)
protected ServiceDocument CreateDocumentInstance()
}
public System.ServiceModel.Syndication.CategoriesDocument : object {
private CategoriesDocumentFormatter formatter
private SyndicationExtensions extensions
private Uri <BaseUri>k__BackingField
private string <Language>k__BackingField
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public Uri BaseUri
public SyndicationElementExtensionCollection ElementExtensions
public string Language
public InlineCategoriesDocument Create(Collection`1<SyndicationCategory> categories)
public ReferencedCategoriesDocument Create(Uri linkToCategoriesDocument)
public InlineCategoriesDocument Create(Collection`1<SyndicationCategory> categories, bool isFixed, string scheme)
public CategoriesDocument Load(XmlReader reader)
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
public SyndicationElementExtensionCollection get_ElementExtensions()
public string get_Language()
public void set_Language(string value)
public CategoriesDocumentFormatter GetFormatter()
public void Save(XmlWriter writer)
protected internal bool TryParseAttribute(string name, string ns, string value, string version)
protected internal bool TryParseElement(XmlReader reader, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, string version)
protected internal void WriteElementExtensions(XmlWriter writer, string version)
}
public System.ServiceModel.Syndication.CategoriesDocumentFormatter : object {
private CategoriesDocument <Document>k__BackingField
public CategoriesDocument Document
public string Version
protected void .ctor(CategoriesDocument documentToWrite)
public CategoriesDocument get_Document()
private void set_Document(CategoriesDocument value)
public string get_Version()
public bool CanRead(XmlReader reader)
protected InlineCategoriesDocument CreateInlineCategoriesDocument()
protected ReferencedCategoriesDocument CreateReferencedCategoriesDocument()
public void ReadFrom(XmlReader reader)
protected void SetDocument(CategoriesDocument document)
public void WriteTo(XmlWriter writer)
}
public System.ServiceModel.Syndication.InlineCategoriesDocument : CategoriesDocument {
private Collection`1<SyndicationCategory> <Categories>k__BackingField
private bool <IsFixed>k__BackingField
private string <Scheme>k__BackingField
public Collection`1<SyndicationCategory> Categories
public bool IsFixed
public string Scheme
public void .ctor(IEnumerable`1<SyndicationCategory> categories)
public void .ctor(IEnumerable`1<SyndicationCategory> categories, bool isFixed, string scheme)
protected internal SyndicationCategory CreateCategory()
public Collection`1<SyndicationCategory> get_Categories()
private void set_Categories(Collection`1<SyndicationCategory> value)
public bool get_IsFixed()
public void set_IsFixed(bool value)
public string get_Scheme()
public void set_Scheme(string value)
}
internal System.ServiceModel.Syndication.ISyndicationElement {
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public SyndicationElementExtensionCollection ElementExtensions
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public SyndicationElementExtensionCollection get_ElementExtensions()
}
internal System.ServiceModel.Syndication.Namespaces : object {
public string Xml
public string Xmlns
public string AtomPP
public string Atom10
}
public System.ServiceModel.Syndication.ReferencedCategoriesDocument : CategoriesDocument {
private Uri <Link>k__BackingField
public Uri Link
public void .ctor(Uri link)
public Uri get_Link()
public void set_Link(Uri value)
}
public System.ServiceModel.Syndication.ResourceCollectionInfo : object {
private bool allow_new_entries
private SyndicationExtensions extensions
private Collection`1<string> <Accepts>k__BackingField
private Uri <BaseUri>k__BackingField
private Collection`1<CategoriesDocument> <Categories>k__BackingField
private Uri <Link>k__BackingField
private TextSyndicationContent <Title>k__BackingField
public Collection`1<string> Accepts
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public Uri BaseUri
public Collection`1<CategoriesDocument> Categories
public SyndicationElementExtensionCollection ElementExtensions
public Uri Link
public TextSyndicationContent Title
public void .ctor(TextSyndicationContent title, Uri link)
public void .ctor(string title, Uri link)
public void .ctor(TextSyndicationContent title, Uri link, IEnumerable`1<CategoriesDocument> categories, bool allowsNewEntries)
public void .ctor(TextSyndicationContent title, Uri link, IEnumerable`1<CategoriesDocument> categories, IEnumerable`1<string> accepts)
public Collection`1<string> get_Accepts()
private void set_Accepts(Collection`1<string> value)
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
public Collection`1<CategoriesDocument> get_Categories()
private void set_Categories(Collection`1<CategoriesDocument> value)
public SyndicationElementExtensionCollection get_ElementExtensions()
public Uri get_Link()
public void set_Link(Uri value)
public TextSyndicationContent get_Title()
public void set_Title(TextSyndicationContent value)
protected internal InlineCategoriesDocument CreateInlineCategoriesDocument()
protected internal ReferencedCategoriesDocument CreateReferencedCategoriesDocument()
protected internal bool TryParseAttribute(string name, string ns, string value, string version)
protected internal bool TryParseElement(XmlReader reader, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, string version)
protected internal void WriteElementExtensions(XmlWriter writer, string version)
}
public System.ServiceModel.Syndication.Rss20FeedFormatter : SyndicationFeedFormatter {
private string AtomNamespace
private bool ext_atom_serialization
private bool preserve_att_ext
private bool preserve_elem_ext
private Type feed_type
public bool SerializeExtensionsAsAtom
protected Type FeedType
public bool PreserveAttributeExtensions
public bool PreserveElementExtensions
public string Version
public void .ctor(SyndicationFeed feedToWrite)
public void .ctor(SyndicationFeed feedToWrite, bool serializeExtensionsAsAtom)
public void .ctor(Type feedTypeToCreate)
public bool get_SerializeExtensionsAsAtom()
public void set_SerializeExtensionsAsAtom(bool value)
protected Type get_FeedType()
public bool get_PreserveAttributeExtensions()
public void set_PreserveAttributeExtensions(bool value)
public bool get_PreserveElementExtensions()
public void set_PreserveElementExtensions(bool value)
public string get_Version()
protected SyndicationFeed CreateFeedInstance()
protected internal void SetFeed(SyndicationFeed feed)
public bool CanRead(XmlReader reader)
public void ReadFrom(XmlReader reader)
protected SyndicationItem ReadItem(XmlReader reader, SyndicationFeed feed)
protected IEnumerable`1<SyndicationItem> ReadItems(XmlReader reader, SyndicationFeed feed, Boolean& areAllItemsRead)
protected void WriteItem(XmlWriter writer, SyndicationItem item, Uri feedBaseUri)
protected void WriteItems(XmlWriter writer, IEnumerable`1<SyndicationItem> items, Uri feedBaseUri)
public void WriteTo(XmlWriter writer)
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void ReadXml(XmlReader reader, bool fromSerializable)
private TextSyndicationContent ReadTextSyndicationContent(XmlReader reader)
private void ReadCategory(XmlReader reader, SyndicationCategory category)
private void ReadLink(XmlReader reader, SyndicationLink link)
private void ReadPerson(XmlReader reader, SyndicationPerson person)
private Uri CreateUri(string uri)
private void WriteXml(XmlWriter writer, bool writeRoot)
private string ToRFC822DateString(DateTimeOffset date)
}
public System.ServiceModel.Syndication.Rss20FeedFormatter`1 : Rss20FeedFormatter {
public void .ctor(TSyndicationFeed feedToWrite)
public void .ctor(TSyndicationFeed feedToWrite, bool serializeExtensionsAsAtom)
protected SyndicationFeed CreateFeedInstance()
}
public System.ServiceModel.Syndication.Rss20ItemFormatter : SyndicationItemFormatter {
private string AtomNamespace
private bool ext_atom_serialization
private bool preserve_att_ext
private bool preserve_elem_ext
private Type item_type
private String[] rfc822formats
public bool SerializeExtensionsAsAtom
protected Type ItemType
public bool PreserveAttributeExtensions
public bool PreserveElementExtensions
public string Version
public void .ctor(SyndicationItem itemToWrite)
public void .ctor(SyndicationItem itemToWrite, bool serializeExtensionsAsAtom)
public void .ctor(Type itemTypeToCreate)
public bool get_SerializeExtensionsAsAtom()
public void set_SerializeExtensionsAsAtom(bool value)
protected Type get_ItemType()
public bool get_PreserveAttributeExtensions()
public void set_PreserveAttributeExtensions(bool value)
public bool get_PreserveElementExtensions()
public void set_PreserveElementExtensions(bool value)
public string get_Version()
protected SyndicationItem CreateItemInstance()
public bool CanRead(XmlReader reader)
public void ReadFrom(XmlReader reader)
public void WriteTo(XmlWriter writer)
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void ReadXml(XmlReader reader, bool fromSerializable)
private TextSyndicationContent ReadTextSyndicationContent(XmlReader reader)
private void ReadCategory(XmlReader reader, SyndicationCategory category)
private void ReadEnclosure(XmlReader reader, SyndicationLink link)
private void ReadLink(XmlReader reader, SyndicationLink link)
private void ReadPerson(XmlReader reader, SyndicationPerson person)
private void ReadPersonAtom10(XmlReader reader, SyndicationPerson person)
private void ReadSourceFeed(XmlReader reader, SyndicationFeed feed)
private Uri CreateUri(string uri)
private void WriteXml(XmlWriter writer, bool writeRoot)
private string ToRFC822DateString(DateTimeOffset date)
private DateTimeOffset FromRFC822DateString(string s)
}
public System.ServiceModel.Syndication.Rss20ItemFormatter`1 : Rss20ItemFormatter {
public void .ctor(TSyndicationItem itemToWrite)
public void .ctor(TSyndicationItem itemToWrite, bool serializeExtensionsAsAtom)
protected SyndicationItem CreateItemInstance()
}
public System.ServiceModel.Syndication.ServiceDocument : object {
private ServiceDocumentFormatter formatter
private SyndicationExtensions extensions
private Uri <BaseUri>k__BackingField
private string <Language>k__BackingField
private Collection`1<Workspace> <Workspaces>k__BackingField
internal ServiceDocumentFormatter InternalFormatter
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public Uri BaseUri
public SyndicationElementExtensionCollection ElementExtensions
public string Language
public Collection`1<Workspace> Workspaces
public TServiceDocument Load(XmlReader reader)
public ServiceDocument Load(XmlReader reader)
public void .ctor(IEnumerable`1<Workspace> workspaces)
internal void set_InternalFormatter(ServiceDocumentFormatter value)
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
public SyndicationElementExtensionCollection get_ElementExtensions()
public string get_Language()
public void set_Language(string value)
public Collection`1<Workspace> get_Workspaces()
private void set_Workspaces(Collection`1<Workspace> value)
protected internal Workspace CreateWorkspace()
public ServiceDocumentFormatter GetFormatter()
public void Save(XmlWriter writer)
protected internal bool TryParseAttribute(string name, string ns, string value, string version)
protected internal bool TryParseElement(XmlReader reader, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, string version)
protected internal void WriteElementExtensions(XmlWriter writer, string version)
}
public System.ServiceModel.Syndication.ServiceDocumentFormatter : object {
private ServiceDocument <Document>k__BackingField
public ServiceDocument Document
public string Version
protected SyndicationCategory CreateCategory(InlineCategoriesDocument inlineCategories)
protected ResourceCollectionInfo CreateCollection(Workspace workspace)
protected InlineCategoriesDocument CreateInlineCategories(ResourceCollectionInfo collection)
protected ReferencedCategoriesDocument CreateReferencedCategories(ResourceCollectionInfo collection)
protected Workspace CreateWorkspace(ServiceDocument document)
protected void LoadElementExtensions(XmlReader reader, CategoriesDocument categories, int maxExtensionSize)
protected void LoadElementExtensions(XmlReader reader, ResourceCollectionInfo collection, int maxExtensionSize)
protected void LoadElementExtensions(XmlReader reader, ServiceDocument document, int maxExtensionSize)
protected void LoadElementExtensions(XmlReader reader, Workspace workspace, int maxExtensionSize)
protected bool TryParseAttribute(string name, string ns, string value, CategoriesDocument categories, string version)
protected bool TryParseAttribute(string name, string ns, string value, ResourceCollectionInfo collection, string version)
protected bool TryParseAttribute(string name, string ns, string value, ServiceDocument document, string version)
protected bool TryParseAttribute(string name, string ns, string value, Workspace workspace, string version)
protected bool TryParseElement(XmlReader reader, CategoriesDocument categories, string version)
protected bool TryParseElement(XmlReader reader, ResourceCollectionInfo collection, string version)
protected bool TryParseElement(XmlReader reader, ServiceDocument document, string version)
protected bool TryParseElement(XmlReader reader, Workspace workspace, string version)
protected void WriteAttributeExtensions(XmlWriter writer, CategoriesDocument categories, string version)
protected void WriteAttributeExtensions(XmlWriter writer, ResourceCollectionInfo collection, string version)
protected void WriteAttributeExtensions(XmlWriter writer, ServiceDocument document, string version)
protected void WriteAttributeExtensions(XmlWriter writer, Workspace workspace, string version)
protected void WriteElementExtensions(XmlWriter writer, CategoriesDocument categories, string version)
protected void WriteElementExtensions(XmlWriter writer, ResourceCollectionInfo collection, string version)
protected void WriteElementExtensions(XmlWriter writer, ServiceDocument document, string version)
protected void WriteElementExtensions(XmlWriter writer, Workspace workspace, string version)
protected void .ctor(ServiceDocument documentToWrite)
public ServiceDocument get_Document()
private void set_Document(ServiceDocument value)
public string get_Version()
public bool CanRead(XmlReader reader)
protected ServiceDocument CreateDocumentInstance()
public void ReadFrom(XmlReader reader)
protected void SetDocument(ServiceDocument document)
public void WriteTo(XmlWriter writer)
}
public System.ServiceModel.Syndication.SyndicationCategory : object {
private string name
private string scheme
private string label
private SyndicationExtensions extensions
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public SyndicationElementExtensionCollection ElementExtensions
public string Label
public string Name
public string Scheme
public void .ctor(string name)
public void .ctor(string name, string scheme, string label)
protected void .ctor(SyndicationCategory source)
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public SyndicationElementExtensionCollection get_ElementExtensions()
public string get_Label()
public void set_Label(string value)
public string get_Name()
public void set_Name(string value)
public string get_Scheme()
public void set_Scheme(string value)
public SyndicationCategory Clone()
protected internal bool TryParseAttribute(string name, string ns, string value, string version)
protected internal bool TryParseElement(XmlReader reader, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, string version)
protected internal void WriteElementExtensions(XmlWriter writer, string version)
}
public System.ServiceModel.Syndication.SyndicationContent : object {
private SyndicationExtensions extensions
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public string Type
public TextSyndicationContent CreateHtmlContent(string content)
public TextSyndicationContent CreatePlaintextContent(string content)
public TextSyndicationContent CreateXhtmlContent(string content)
public UrlSyndicationContent CreateUrlContent(Uri url, string mediaType)
public XmlSyndicationContent CreateXmlContent(object dataContractObject)
public XmlSyndicationContent CreateXmlContent(object dataContractObject, XmlObjectSerializer dataContractSerializer)
public XmlSyndicationContent CreateXmlContent(object xmlSerializerObject, XmlSerializer serializer)
public XmlSyndicationContent CreateXmlContent(XmlReader xmlReader)
protected void .ctor(SyndicationContent source)
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public string get_Type()
public SyndicationContent Clone()
protected void WriteContentsTo(XmlWriter writer)
public void WriteTo(XmlWriter writer, string outerElementName, string outerElementNamespace)
}
public System.ServiceModel.Syndication.SyndicationElementExtension : object {
private ReadWriteHandler handler
public string OuterName
public string OuterNamespace
public void .ctor(object dataContractExtension)
public void .ctor(object dataContractExtension, XmlObjectSerializer dataContractSerializer)
public void .ctor(string outerName, string outerNamespace, object dataContractExtension)
public void .ctor(string outerName, string outerNamespace, object dataContractExtension, XmlObjectSerializer dataContractSerializer)
public void .ctor(object xmlSerializerExtension, XmlSerializer serializer)
public void .ctor(XmlReader xmlReader)
public string get_OuterName()
public string get_OuterNamespace()
public TExtension GetObject()
public TExtension GetObject(XmlObjectSerializer serializer)
public TExtension GetObject(XmlSerializer serializer)
public XmlReader GetReader()
public void WriteTo(XmlWriter writer)
}
public System.ServiceModel.Syndication.SyndicationElementExtensionCollection : Collection`1<SyndicationElementExtension> {
internal void .ctor(IEnumerable`1<SyndicationElementExtension> source)
public void Add(object extension)
public void Add(object dataContractExtension, DataContractSerializer serializer)
public void Add(object xmlSerializerExtension, XmlSerializer serializer)
public void Add(string outerName, string outerNamespace, object dataContractExtension)
public void Add(string outerName, string outerNamespace, object dataContractExtension, XmlObjectSerializer dataContractSerializer)
public void Add(XmlReader xmlReader)
internal void Add(SyndicationElementExtension item)
protected void ClearItems()
public XmlReader GetReaderAtElementExtensions()
protected void InsertItem(int index, SyndicationElementExtension item)
public Collection`1<TExtension> ReadElementExtensions(string extensionName, string extensionNamespace)
public Collection`1<TExtension> ReadElementExtensions(string extensionName, string extensionNamespace, XmlObjectSerializer serializer)
public Collection`1<TExtension> ReadElementExtensions(string extensionName, string extensionNamespace, XmlSerializer serializer)
protected void RemoveItem(int index)
protected void SetItem(int index, SyndicationElementExtension item)
}
internal System.ServiceModel.Syndication.SyndicationExtensions : object {
private Dictionary`2<XmlQualifiedName, string> attributes
private SyndicationElementExtensionCollection elements
public Dictionary`2<XmlQualifiedName, string> Attributes
public SyndicationElementExtensionCollection Elements
public Dictionary`2<XmlQualifiedName, string> get_Attributes()
public SyndicationElementExtensionCollection get_Elements()
public SyndicationExtensions Clone()
internal void WriteAttributeExtensions(XmlWriter writer, string version)
internal void WriteElementExtensions(XmlWriter writer, string version)
}
public System.ServiceModel.Syndication.SyndicationFeed : object {
private SyndicationExtensions extensions
private Collection`1<SyndicationCategory> categories
private Collection`1<SyndicationPerson> authors
private Collection`1<SyndicationPerson> contributors
private Collection`1<SyndicationLink> links
private Uri base_uri
private TextSyndicationContent copyright
private TextSyndicationContent title
private string id
private DateTimeOffset last_updated_time
private IEnumerable`1<SyndicationItem> items
private TextSyndicationContent description
private string generator
private string language
private Uri image_url
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public SyndicationElementExtensionCollection ElementExtensions
public Collection`1<SyndicationPerson> Authors
public Collection`1<SyndicationCategory> Categories
public Collection`1<SyndicationPerson> Contributors
public Collection`1<SyndicationLink> Links
public Uri BaseUri
public TextSyndicationContent Copyright
public string Id
public DateTimeOffset LastUpdatedTime
public TextSyndicationContent Title
public IEnumerable`1<SyndicationItem> Items
public TextSyndicationContent Description
public string Generator
public Uri ImageUrl
public string Language
public SyndicationFeed Load(XmlReader reader)
public TSyndicationFeed Load(XmlReader reader)
public void .ctor(IEnumerable`1<SyndicationItem> items)
public void .ctor(string title, string description, Uri feedAlternateLink)
public void .ctor(string title, string description, Uri feedAlternateLink, IEnumerable`1<SyndicationItem> items)
public void .ctor(string title, string description, Uri feedAlternateLink, string id, DateTimeOffset lastUpdatedTime)
public void .ctor(string title, string description, Uri feedAlternateLink, string id, DateTimeOffset lastUpdatedTime, IEnumerable`1<SyndicationItem> items)
protected void .ctor(SyndicationFeed source, bool cloneItems)
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public SyndicationElementExtensionCollection get_ElementExtensions()
public Collection`1<SyndicationPerson> get_Authors()
public Collection`1<SyndicationCategory> get_Categories()
public Collection`1<SyndicationPerson> get_Contributors()
public Collection`1<SyndicationLink> get_Links()
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
public TextSyndicationContent get_Copyright()
public void set_Copyright(TextSyndicationContent value)
public string get_Id()
public void set_Id(string value)
public DateTimeOffset get_LastUpdatedTime()
public void set_LastUpdatedTime(DateTimeOffset value)
public TextSyndicationContent get_Title()
public void set_Title(TextSyndicationContent value)
public IEnumerable`1<SyndicationItem> get_Items()
public void set_Items(IEnumerable`1<SyndicationItem> value)
public TextSyndicationContent get_Description()
public void set_Description(TextSyndicationContent value)
public string get_Generator()
public void set_Generator(string value)
public Uri get_ImageUrl()
public void set_ImageUrl(Uri value)
public string get_Language()
public void set_Language(string value)
public SyndicationFeed Clone(bool cloneItems)
protected internal SyndicationCategory CreateCategory()
protected internal SyndicationLink CreateLink()
protected internal SyndicationPerson CreatePerson()
protected internal SyndicationItem CreateItem()
public Atom10FeedFormatter GetAtom10Formatter()
public Rss20FeedFormatter GetRss20Formatter()
public Rss20FeedFormatter GetRss20Formatter(bool serializeExtensionsAsAtom)
public void SaveAsAtom10(XmlWriter writer)
public void SaveAsRss20(XmlWriter writer)
protected internal bool TryParseAttribute(string name, string ns, string value, string version)
protected internal bool TryParseElement(XmlReader reader, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, string version)
protected internal void WriteElementExtensions(XmlWriter writer, string version)
}
public System.ServiceModel.Syndication.SyndicationFeedFormatter : object {
private SyndicationFeed feed
public SyndicationFeed Feed
public string Version
protected internal SyndicationCategory CreateCategory(SyndicationFeed feed)
protected internal SyndicationCategory CreateCategory(SyndicationItem item)
protected internal SyndicationItem CreateItem(SyndicationFeed feed)
protected internal SyndicationLink CreateLink(SyndicationFeed feed)
protected internal SyndicationLink CreateLink(SyndicationItem item)
protected internal SyndicationPerson CreatePerson(SyndicationFeed feed)
protected internal SyndicationPerson CreatePerson(SyndicationItem item)
protected internal void LoadElementExtensions(XmlReader reader, SyndicationCategory category, int maxExtensionSize)
protected internal void LoadElementExtensions(XmlReader reader, SyndicationFeed feed, int maxExtensionSize)
protected internal void LoadElementExtensions(XmlReader reader, SyndicationItem item, int maxExtensionSize)
protected internal void LoadElementExtensions(XmlReader reader, SyndicationLink link, int maxExtensionSize)
protected internal void LoadElementExtensions(XmlReader reader, SyndicationPerson person, int maxExtensionSize)
protected internal bool TryParseAttribute(string name, string ns, string value, SyndicationCategory category, string version)
protected internal bool TryParseAttribute(string name, string ns, string value, SyndicationFeed feed, string version)
protected internal bool TryParseAttribute(string name, string ns, string value, SyndicationItem item, string version)
protected internal bool TryParseAttribute(string name, string ns, string value, SyndicationLink link, string version)
protected internal bool TryParseAttribute(string name, string ns, string value, SyndicationPerson person, string version)
protected internal bool TryParseContent(XmlReader reader, SyndicationItem item, string contentType, string version, SyndicationContent& content)
protected internal bool TryParseElement(XmlReader reader, SyndicationCategory category, string version)
protected internal bool TryParseElement(XmlReader reader, SyndicationFeed feed, string version)
protected internal bool TryParseElement(XmlReader reader, SyndicationItem item, string version)
protected internal bool TryParseElement(XmlReader reader, SyndicationLink link, string version)
protected internal bool TryParseElement(XmlReader reader, SyndicationPerson person, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, SyndicationCategory category, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, SyndicationItem item, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, SyndicationLink link, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, SyndicationPerson person, string version)
protected internal void WriteElementExtensions(XmlWriter writer, SyndicationCategory category, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, SyndicationFeed feed, string version)
protected internal void WriteElementExtensions(XmlWriter writer, SyndicationFeed feed, string version)
protected internal void WriteElementExtensions(XmlWriter writer, SyndicationItem item, string version)
protected internal void WriteElementExtensions(XmlWriter writer, SyndicationLink link, string version)
protected internal void WriteElementExtensions(XmlWriter writer, SyndicationPerson person, string version)
protected void .ctor(SyndicationFeed feedToWrite)
protected internal void SetFeed(SyndicationFeed feed)
public SyndicationFeed get_Feed()
public string get_Version()
protected SyndicationFeed CreateFeedInstance()
public bool CanRead(XmlReader reader)
public void ReadFrom(XmlReader reader)
public void WriteTo(XmlWriter writer)
public string ToString()
}
public System.ServiceModel.Syndication.SyndicationItem : object {
private SyndicationExtensions extensions
private Collection`1<SyndicationCategory> categories
private Collection`1<SyndicationPerson> authors
private Collection`1<SyndicationPerson> contributors
private Collection`1<SyndicationLink> links
private Uri base_uri
private TextSyndicationContent copyright
private TextSyndicationContent summary
private TextSyndicationContent title
private SyndicationContent content
private string id
private DateTimeOffset last_updated_time
private DateTimeOffset published_date
private SyndicationFeed source_feed
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public SyndicationElementExtensionCollection ElementExtensions
public Collection`1<SyndicationPerson> Authors
public Collection`1<SyndicationCategory> Categories
public Collection`1<SyndicationPerson> Contributors
public Collection`1<SyndicationLink> Links
public Uri BaseUri
public TextSyndicationContent Copyright
public SyndicationContent Content
public string Id
public DateTimeOffset LastUpdatedTime
public DateTimeOffset PublishDate
public SyndicationFeed SourceFeed
public TextSyndicationContent Summary
public TextSyndicationContent Title
public SyndicationItem Load(XmlReader reader)
public TSyndicationItem Load(XmlReader reader)
public void .ctor(string title, string content, Uri itemAlternateLink)
public void .ctor(string title, string content, Uri itemAlternateLink, string id, DateTimeOffset lastUpdatedTime)
public void .ctor(string title, SyndicationContent content, Uri itemAlternateLink, string id, DateTimeOffset lastUpdatedTime)
protected void .ctor(SyndicationItem source)
private Collection`1<T> Copy(Collection`1<T> source)
private object CreateCopy(object source)
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public SyndicationElementExtensionCollection get_ElementExtensions()
public Collection`1<SyndicationPerson> get_Authors()
public Collection`1<SyndicationCategory> get_Categories()
public Collection`1<SyndicationPerson> get_Contributors()
public Collection`1<SyndicationLink> get_Links()
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
public TextSyndicationContent get_Copyright()
public void set_Copyright(TextSyndicationContent value)
public SyndicationContent get_Content()
public void set_Content(SyndicationContent value)
public string get_Id()
public void set_Id(string value)
public DateTimeOffset get_LastUpdatedTime()
public void set_LastUpdatedTime(DateTimeOffset value)
public DateTimeOffset get_PublishDate()
public void set_PublishDate(DateTimeOffset value)
public SyndicationFeed get_SourceFeed()
public void set_SourceFeed(SyndicationFeed value)
public TextSyndicationContent get_Summary()
public void set_Summary(TextSyndicationContent value)
public TextSyndicationContent get_Title()
public void set_Title(TextSyndicationContent value)
public void AddPermalink(Uri permalink)
public SyndicationItem Clone()
protected internal SyndicationCategory CreateCategory()
protected internal SyndicationLink CreateLink()
protected internal SyndicationPerson CreatePerson()
public Atom10ItemFormatter GetAtom10Formatter()
public Rss20ItemFormatter GetRss20Formatter()
public Rss20ItemFormatter GetRss20Formatter(bool serializeExtensionsAsAtom)
public void SaveAsAtom10(XmlWriter writer)
public void SaveAsRss20(XmlWriter writer)
protected internal bool TryParseContent(XmlReader reader, string contentType, string version, SyndicationContent& content)
protected internal bool TryParseAttribute(string name, string ns, string value, string version)
protected internal bool TryParseElement(XmlReader reader, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, string version)
protected internal void WriteElementExtensions(XmlWriter writer, string version)
}
public System.ServiceModel.Syndication.SyndicationItemFormatter : object {
private SyndicationItem item
public SyndicationItem Item
public string Version
protected internal SyndicationCategory CreateCategory(SyndicationItem item)
protected internal SyndicationLink CreateLink(SyndicationItem item)
protected internal SyndicationPerson CreatePerson(SyndicationItem item)
protected internal void LoadElementExtensions(XmlReader reader, SyndicationCategory category, int maxExtensionSize)
protected internal void LoadElementExtensions(XmlReader reader, SyndicationItem item, int maxExtensionSize)
protected internal void LoadElementExtensions(XmlReader reader, SyndicationLink link, int maxExtensionSize)
protected internal void LoadElementExtensions(XmlReader reader, SyndicationPerson person, int maxExtensionSize)
protected internal bool TryParseAttribute(string name, string ns, string value, SyndicationCategory category, string version)
protected internal bool TryParseAttribute(string name, string ns, string value, SyndicationItem item, string version)
protected internal bool TryParseAttribute(string name, string ns, string value, SyndicationLink link, string version)
protected internal bool TryParseAttribute(string name, string ns, string value, SyndicationPerson person, string version)
protected internal bool TryParseContent(XmlReader reader, SyndicationItem item, string contentType, string version, SyndicationContent& content)
protected internal bool TryParseElement(XmlReader reader, SyndicationCategory category, string version)
protected internal bool TryParseElement(XmlReader reader, SyndicationItem item, string version)
protected internal bool TryParseElement(XmlReader reader, SyndicationLink link, string version)
protected internal bool TryParseElement(XmlReader reader, SyndicationPerson person, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, SyndicationCategory category, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, SyndicationItem item, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, SyndicationLink link, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, SyndicationPerson person, string version)
protected internal void WriteElementExtensions(XmlWriter writer, SyndicationCategory category, string version)
protected internal void WriteElementExtensions(XmlWriter writer, SyndicationItem item, string version)
protected internal void WriteElementExtensions(XmlWriter writer, SyndicationLink link, string version)
protected internal void WriteElementExtensions(XmlWriter writer, SyndicationPerson person, string version)
protected void .ctor(SyndicationItem itemToWrite)
protected internal void SetItem(SyndicationItem item)
public SyndicationItem get_Item()
public string get_Version()
protected SyndicationItem CreateItemInstance()
public bool CanRead(XmlReader reader)
public void ReadFrom(XmlReader reader)
public void WriteTo(XmlWriter writer)
public string ToString()
}
public System.ServiceModel.Syndication.SyndicationLink : object {
private Uri base_uri
private Uri href
private long length
private string rel
private string title
private string type
private SyndicationExtensions extensions
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public SyndicationElementExtensionCollection ElementExtensions
public Uri BaseUri
public long Length
public string MediaType
public string RelationshipType
public string Title
public Uri Uri
public SyndicationLink CreateAlternateLink(Uri uri)
public SyndicationLink CreateAlternateLink(Uri uri, string mediaType)
public SyndicationLink CreateMediaEnclosureLink(Uri uri, string mediaType, long length)
public SyndicationLink CreateSelfLink(Uri uri)
public SyndicationLink CreateSelfLink(Uri uri, string mediaType)
public void .ctor(Uri uri)
public void .ctor(Uri uri, string relationshipType, string title, string mediaType, long length)
protected void .ctor(SyndicationLink source)
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public SyndicationElementExtensionCollection get_ElementExtensions()
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
public long get_Length()
public void set_Length(long value)
public string get_MediaType()
public void set_MediaType(string value)
public string get_RelationshipType()
public void set_RelationshipType(string value)
public string get_Title()
public void set_Title(string value)
public Uri get_Uri()
public void set_Uri(Uri value)
public SyndicationLink Clone()
protected internal bool TryParseAttribute(string name, string ns, string value, string version)
protected internal bool TryParseElement(XmlReader reader, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, string version)
protected internal void WriteElementExtensions(XmlWriter writer, string version)
public Uri GetAbsoluteUri()
}
public System.ServiceModel.Syndication.SyndicationPerson : object {
private string email
private string name
private string uri
private SyndicationExtensions extensions
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public SyndicationElementExtensionCollection ElementExtensions
public string Email
public string Name
public string Uri
public void .ctor(string email)
public void .ctor(string email, string name, string uri)
protected void .ctor(SyndicationPerson source)
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public SyndicationElementExtensionCollection get_ElementExtensions()
public string get_Email()
public void set_Email(string value)
public string get_Name()
public void set_Name(string value)
public string get_Uri()
public void set_Uri(string value)
public SyndicationPerson Clone()
protected internal bool TryParseAttribute(string name, string ns, string value, string version)
protected internal bool TryParseElement(XmlReader reader, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, string version)
protected internal void WriteElementExtensions(XmlWriter writer, string version)
}
public System.ServiceModel.Syndication.SyndicationVersions : object {
public string Atom10
public string Rss20
private string AtomNamespace
private string DetectVersion(XmlReader reader, ReaderKind kind)
internal TSyndicationFeed LoadFeed(XmlReader reader)
internal TSyndicationItem LoadItem(XmlReader reader)
}
public System.ServiceModel.Syndication.TextSyndicationContent : SyndicationContent {
private string text
private TextSyndicationContentKind kind
public string Text
public string Type
public void .ctor(string text)
public void .ctor(string text, TextSyndicationContentKind textKind)
protected void .ctor(TextSyndicationContent source)
public SyndicationContent Clone()
protected void WriteContentsTo(XmlWriter writer)
public string get_Text()
public string get_Type()
}
public System.ServiceModel.Syndication.TextSyndicationContentKind : Enum {
public int value__
public TextSyndicationContentKind Plaintext
public TextSyndicationContentKind Html
public TextSyndicationContentKind XHtml
}
public System.ServiceModel.Syndication.UrlSyndicationContent : SyndicationContent {
private Uri url
private string media_type
public Uri Url
public string Type
public void .ctor(Uri url, string mediaType)
protected void .ctor(UrlSyndicationContent source)
public SyndicationContent Clone()
protected void WriteContentsTo(XmlWriter writer)
public Uri get_Url()
public string get_Type()
}
public System.ServiceModel.Syndication.Workspace : object {
private SyndicationExtensions extensions
private Uri <BaseUri>k__BackingField
private Collection`1<ResourceCollectionInfo> <Collections>k__BackingField
private TextSyndicationContent <Title>k__BackingField
public Dictionary`2<XmlQualifiedName, string> AttributeExtensions
public Uri BaseUri
public Collection`1<ResourceCollectionInfo> Collections
public SyndicationElementExtensionCollection ElementExtensions
public TextSyndicationContent Title
public void .ctor(TextSyndicationContent title, IEnumerable`1<ResourceCollectionInfo> collections)
public void .ctor(string title, IEnumerable`1<ResourceCollectionInfo> collections)
public Dictionary`2<XmlQualifiedName, string> get_AttributeExtensions()
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
public Collection`1<ResourceCollectionInfo> get_Collections()
private void set_Collections(Collection`1<ResourceCollectionInfo> value)
public SyndicationElementExtensionCollection get_ElementExtensions()
public TextSyndicationContent get_Title()
public void set_Title(TextSyndicationContent value)
protected internal ResourceCollectionInfo CreateResourceCollection()
protected internal bool TryParseAttribute(string name, string ns, string value, string version)
protected internal bool TryParseElement(XmlReader reader, string version)
protected internal void WriteAttributeExtensions(XmlWriter writer, string version)
protected internal void WriteElementExtensions(XmlWriter writer, string version)
}
internal System.ServiceModel.Syndication.XmlReaderExtensions : object {
public bool IsTextNode(XmlReader r)
}
public System.ServiceModel.Syndication.XmlSyndicationContent : SyndicationContent {
private SyndicationElementExtension writer_extension
private SyndicationElementExtension reader_extension
private string type
private SyndicationElementExtension extension
public SyndicationElementExtension Extension
public string Type
public void .ctor(XmlReader reader)
public void .ctor(string type, object dataContractExtension, XmlObjectSerializer dataContractSerializer)
public void .ctor(string type, object xmlSerializerExtension, XmlSerializer serializer)
public void .ctor(string type, SyndicationElementExtension extension)
protected void .ctor(XmlSyndicationContent source)
public SyndicationContent Clone()
private SyndicationElementExtension get_extension()
public XmlDictionaryReader GetReaderAtContent()
public TContent ReadContent()
public TContent ReadContent(XmlObjectSerializer dataContractSerializer)
public TContent ReadContent(XmlSerializer serializer)
protected void WriteContentsTo(XmlWriter writer)
public SyndicationElementExtension get_Extension()
public string get_Type()
}
public System.ServiceModel.TcpClientCredentialType : Enum {
public int value__
public TcpClientCredentialType None
public TcpClientCredentialType Windows
public TcpClientCredentialType Certificate
}
public System.ServiceModel.TcpTransportSecurity : object {
private TcpClientCredentialType <ClientCredentialType>k__BackingField
private ProtectionLevel <ProtectionLevel>k__BackingField
public TcpClientCredentialType ClientCredentialType
public ProtectionLevel ProtectionLevel
public SslProtocols SslProtocols
public ExtendedProtectionPolicy ExtendedProtectionPolicy
public TcpClientCredentialType get_ClientCredentialType()
public void set_ClientCredentialType(TcpClientCredentialType value)
public ProtectionLevel get_ProtectionLevel()
public void set_ProtectionLevel(ProtectionLevel value)
public SslProtocols get_SslProtocols()
public void set_SslProtocols(SslProtocols value)
public ExtendedProtectionPolicy get_ExtendedProtectionPolicy()
public void set_ExtendedProtectionPolicy(ExtendedProtectionPolicy value)
public bool ShouldSerializeExtendedProtectionPolicy()
}
public System.ServiceModel.TransactionFlowAttribute : Attribute {
private TransactionFlowOption <Transactions>k__BackingField
public TransactionFlowOption Transactions
public void .ctor(TransactionFlowOption transactions)
public TransactionFlowOption get_Transactions()
private void set_Transactions(TransactionFlowOption value)
private void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription description, BindingParameterCollection parameters)
private void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription description, ClientOperation proxy)
private void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch)
private void System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription description)
}
public System.ServiceModel.TransactionFlowOption : Enum {
public int value__
public TransactionFlowOption NotAllowed
public TransactionFlowOption Allowed
public TransactionFlowOption Mandatory
}
public System.ServiceModel.TransactionProtocol : object {
private TransactionProtocol wsat
private TransactionProtocol oletx
public TransactionProtocol Default
public TransactionProtocol OleTransactions
public TransactionProtocol WSAtomicTransactionOctober2004
public TransactionProtocol WSAtomicTransaction11
public TransactionProtocol get_Default()
public TransactionProtocol get_OleTransactions()
public TransactionProtocol get_WSAtomicTransactionOctober2004()
public TransactionProtocol get_WSAtomicTransaction11()
}
public System.ServiceModel.TransferMode : Enum {
public int value__
public TransferMode Buffered
public TransferMode Streamed
public TransferMode StreamedRequest
public TransferMode StreamedResponse
}
public System.ServiceModel.UnknownMessageReceivedEventArgs : EventArgs {
private Message message
public Message Message
internal void .ctor(Message message)
public Message get_Message()
}
public System.ServiceModel.UpnEndpointIdentity : EndpointIdentity {
public void .ctor(Claim identity)
public void .ctor(string upnName)
}
public System.ServiceModel.UriSchemeKeyedCollection : SynchronizedKeyedCollection`2<string, Uri> {
internal IList`1<Uri> InternalItems
public void .ctor(Uri[] addresses)
protected string GetKeyForItem(Uri item)
protected void InsertItem(int index, Uri item)
protected void SetItem(int index, Uri item)
internal IList`1<Uri> get_InternalItems()
}
public System.ServiceModel.WS2007FederationHttpBinding : WSFederationHttpBinding {
public void .ctor(WSFederationHttpSecurityMode securityMode)
public void .ctor(WSFederationHttpSecurityMode securityMode, bool reliableSessionEnabled)
public void .ctor(string configName)
}
public System.ServiceModel.WS2007HttpBinding : WSHttpBinding {
public void .ctor(SecurityMode securityMode)
public void .ctor(SecurityMode securityMode, bool reliableSessionEnabled)
public void .ctor(string configName)
}
public System.ServiceModel.WSDualHttpBinding : Binding {
private bool bypass_proxy_on_local
private HostNameComparisonMode host_name_comparison_mode
private long max_buffer_pool_size
private long max_recv_msg_size
private WSDualHttpSecurity security
private WSMessageEncoding message_encoding
private Uri proxy_address
private XmlDictionaryReaderQuotas reader_quotas
private ReliableSession reliable_session
private EnvelopeVersion env_version
private Encoding text_encoding
private bool transaction_flow
private bool use_default_web_proxy
public Uri ClientBaseAddress
public bool BypassProxyOnLocal
public HostNameComparisonMode HostNameComparisonMode
public long MaxBufferPoolSize
public long MaxReceivedMessageSize
public WSMessageEncoding MessageEncoding
public Uri ProxyAddress
public XmlDictionaryReaderQuotas ReaderQuotas
public ReliableSession ReliableSession
public string Scheme
public WSDualHttpSecurity Security
public EnvelopeVersion EnvelopeVersion
public Encoding TextEncoding
public bool TransactionFlow
public bool UseDefaultWebProxy
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
public void .ctor(string configName)
public void .ctor(WSDualHttpSecurityMode securityMode)
public Uri get_ClientBaseAddress()
public void set_ClientBaseAddress(Uri value)
public bool get_BypassProxyOnLocal()
public void set_BypassProxyOnLocal(bool value)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public WSMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(WSMessageEncoding value)
public Uri get_ProxyAddress()
public void set_ProxyAddress(Uri value)
public XmlDictionaryReaderQuotas get_ReaderQuotas()
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
public ReliableSession get_ReliableSession()
public string get_Scheme()
public WSDualHttpSecurity get_Security()
public EnvelopeVersion get_EnvelopeVersion()
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public bool get_TransactionFlow()
public void set_TransactionFlow(bool value)
public bool get_UseDefaultWebProxy()
public void set_UseDefaultWebProxy(bool value)
public BindingElementCollection CreateBindingElements()
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.get_ReceiveSynchronously()
public void set_ReliableSession(ReliableSession value)
public void set_Security(WSDualHttpSecurity value)
public bool ShouldSerializeReaderQuotas()
public bool ShouldSerializeReliableSession()
public bool ShouldSerializeSecurity()
public bool ShouldSerializeTextEncoding()
}
public System.ServiceModel.WSDualHttpSecurity : object {
private WSDualHttpSecurityMode mode
private MessageSecurityOverHttp message
public MessageSecurityOverHttp Message
public WSDualHttpSecurityMode Mode
internal void .ctor(WSDualHttpSecurityMode mode)
public MessageSecurityOverHttp get_Message()
public WSDualHttpSecurityMode get_Mode()
public void set_Mode(WSDualHttpSecurityMode value)
public void set_Message(MessageSecurityOverHttp value)
public bool ShouldSerializeMessage()
public bool ShouldSerializeMode()
}
public System.ServiceModel.WSDualHttpSecurityMode : Enum {
public int value__
public WSDualHttpSecurityMode None
public WSDualHttpSecurityMode Message
}
public System.ServiceModel.WSFederationHttpBinding : WSHttpBindingBase {
private WSFederationHttpSecurity security
private Uri privacy_notice_at
private int privacy_notice_ver
private bool allow_cookies
public bool AllowCookies
public Uri PrivacyNoticeAt
public int PrivacyNoticeVersion
public WSFederationHttpSecurity Security
public void .ctor(WSFederationHttpSecurityMode securityMode)
public void .ctor(WSFederationHttpSecurityMode securityMode, bool reliableSessionEnabled)
public void .ctor(string configName)
public bool get_AllowCookies()
public void set_AllowCookies(bool value)
public Uri get_PrivacyNoticeAt()
public void set_PrivacyNoticeAt(Uri value)
public int get_PrivacyNoticeVersion()
public void set_PrivacyNoticeVersion(int value)
public WSFederationHttpSecurity get_Security()
public BindingElementCollection CreateBindingElements()
protected SecurityBindingElement CreateMessageSecurity()
protected TransportBindingElement GetTransport()
public void set_Security(WSFederationHttpSecurity value)
public bool ShouldSerializeSecurity()
}
public System.ServiceModel.WSFederationHttpSecurity : object {
private WSFederationHttpSecurityMode mode
private FederatedMessageSecurityOverHttp message
public FederatedMessageSecurityOverHttp Message
public WSFederationHttpSecurityMode Mode
internal void .ctor(WSFederationHttpSecurityMode mode)
public FederatedMessageSecurityOverHttp get_Message()
public WSFederationHttpSecurityMode get_Mode()
public void set_Mode(WSFederationHttpSecurityMode value)
public void set_Message(FederatedMessageSecurityOverHttp value)
public bool ShouldSerializeMessage()
public bool ShouldSerializeMode()
}
public System.ServiceModel.WSFederationHttpSecurityMode : Enum {
public int value__
public WSFederationHttpSecurityMode None
public WSFederationHttpSecurityMode Message
public WSFederationHttpSecurityMode TransportWithMessageCredential
}
public System.ServiceModel.WSHttpBinding : WSHttpBindingBase {
private WSHttpSecurity security
private bool allow_cookies
public bool AllowCookies
public WSHttpSecurity Security
public void .ctor(SecurityMode securityMode)
public void .ctor(SecurityMode securityMode, bool reliableSessionEnabled)
public void .ctor(string configName)
public bool get_AllowCookies()
public void set_AllowCookies(bool value)
public WSHttpSecurity get_Security()
public BindingElementCollection CreateBindingElements()
protected SecurityBindingElement CreateMessageSecurity()
protected TransportBindingElement GetTransport()
public void set_Security(WSHttpSecurity value)
public bool ShouldSerializeSecurity()
}
public System.ServiceModel.WSHttpBindingBase : Binding {
private bool bypass_proxy_on_local
private bool reliable_session_enabled
private HostNameComparisonMode host_name_comparison_mode
private long max_buffer_pool_size
private long max_recv_msg_size
private WSMessageEncoding message_encoding
private Uri proxy_address
private XmlDictionaryReaderQuotas reader_quotas
private OptionalReliableSession reliable_session
private EnvelopeVersion env_version
private Encoding text_encoding
private bool transaction_flow
private bool use_default_web_proxy
private ReliableSessionBindingElement rel_element
public bool BypassProxyOnLocal
public HostNameComparisonMode HostNameComparisonMode
public long MaxBufferPoolSize
public long MaxReceivedMessageSize
public WSMessageEncoding MessageEncoding
public Uri ProxyAddress
public XmlDictionaryReaderQuotas ReaderQuotas
public string Scheme
public OptionalReliableSession ReliableSession
public EnvelopeVersion EnvelopeVersion
public Encoding TextEncoding
public bool TransactionFlow
public bool UseDefaultWebProxy
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
protected void .ctor(bool reliableSessionEnabled)
internal void .ctor(WSHttpBindingBaseElement config)
public bool get_BypassProxyOnLocal()
public void set_BypassProxyOnLocal(bool value)
public HostNameComparisonMode get_HostNameComparisonMode()
public void set_HostNameComparisonMode(HostNameComparisonMode value)
public long get_MaxBufferPoolSize()
public void set_MaxBufferPoolSize(long value)
public long get_MaxReceivedMessageSize()
public void set_MaxReceivedMessageSize(long value)
public WSMessageEncoding get_MessageEncoding()
public void set_MessageEncoding(WSMessageEncoding value)
public Uri get_ProxyAddress()
public void set_ProxyAddress(Uri value)
public XmlDictionaryReaderQuotas get_ReaderQuotas()
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value)
public string get_Scheme()
public OptionalReliableSession get_ReliableSession()
public EnvelopeVersion get_EnvelopeVersion()
public Encoding get_TextEncoding()
public void set_TextEncoding(Encoding value)
public bool get_TransactionFlow()
public void set_TransactionFlow(bool value)
public bool get_UseDefaultWebProxy()
public void set_UseDefaultWebProxy(bool value)
public BindingElementCollection CreateBindingElements()
protected SecurityBindingElement CreateMessageSecurity()
protected TransportBindingElement GetTransport()
private bool System.ServiceModel.Channels.IBindingRuntimePreferences.get_ReceiveSynchronously()
public void set_ReliableSession(OptionalReliableSession value)
public bool ShouldSerializeReaderQuotas()
public bool ShouldSerializeReliableSession()
public bool ShouldSerializeTextEncoding()
}
public System.ServiceModel.WSHttpContextBinding : WSHttpBinding {
public Uri ClientCallbackAddress
public bool ContextManagementEnabled
public ProtectionLevel ContextProtectionLevel
public void .ctor(SecurityMode securityMode)
public void .ctor(SecurityMode securityMode, bool reliableSessionEnabled)
public void .ctor(string configName)
public Uri get_ClientCallbackAddress()
public void set_ClientCallbackAddress(Uri value)
public bool get_ContextManagementEnabled()
public void set_ContextManagementEnabled(bool value)
public ProtectionLevel get_ContextProtectionLevel()
public void set_ContextProtectionLevel(ProtectionLevel value)
}
public System.ServiceModel.WSHttpSecurity : object {
private SecurityMode mode
private NonDualMessageSecurityOverHttp message
private HttpTransportSecurity transport
public NonDualMessageSecurityOverHttp Message
public SecurityMode Mode
public HttpTransportSecurity Transport
internal void .ctor(SecurityMode mode)
public NonDualMessageSecurityOverHttp get_Message()
public SecurityMode get_Mode()
public void set_Mode(SecurityMode value)
public HttpTransportSecurity get_Transport()
public void set_Message(NonDualMessageSecurityOverHttp value)
public void set_Transport(HttpTransportSecurity value)
public bool ShouldSerializeMessage()
public bool ShouldSerializeMode()
public bool ShouldSerializeTransport()
}
public System.ServiceModel.WSMessageEncoding : Enum {
public int value__
public WSMessageEncoding Text
public WSMessageEncoding Mtom
}
public System.ServiceModel.X509CertificateEndpointIdentity : EndpointIdentity {
private X509Certificate2 primary
private X509Certificate2Collection supporting
private X509Certificate2Collection all
public X509Certificate2Collection Certificates
public void .ctor(X509Certificate2 certificate)
public void .ctor(X509Certificate2 primaryCertificate, X509Certificate2Collection supportingCertificates)
public X509Certificate2Collection get_Certificates()
}
public System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension : MarkupExtension {
public Dictionary`2<string, string> Namespaces
public void .ctor(XPathMessageContext context)
public Dictionary`2<string, string> get_Namespaces()
public object ProvideValue(IServiceProvider serviceProvider)
}
public System.ServiceModel.XmlSerializerFormatAttribute : Attribute {
private OperationFormatStyle <Style>k__BackingField
private OperationFormatUse <Use>k__BackingField
private bool <SupportFaults>k__BackingField
public OperationFormatStyle Style
public OperationFormatUse Use
public bool SupportFaults
public OperationFormatStyle get_Style()
public void set_Style(OperationFormatStyle value)
public OperationFormatUse get_Use()
public void set_Use(OperationFormatUse value)
public bool get_SupportFaults()
public void set_SupportFaults(bool value)
}
public System.ServiceModel.XPathMessageQuery : MessageQuery {
public string Expression
public XmlNamespaceManager Namespaces
public void .ctor(string expression)
public void .ctor(string expression, XmlNamespaceManager namespaces)
public void .ctor(string expression, XsltContext context)
public string get_Expression()
public void set_Expression(string value)
public XmlNamespaceManager get_Namespaces()
public void set_Namespaces(XmlNamespaceManager value)
public MessageQueryCollection CreateMessageQueryCollection()
public TResult Evaluate(Message message)
public TResult Evaluate(MessageBuffer buffer)
}
public System.UriTemplate : object {
private ReadOnlyCollection`1<string> empty_strings
private string template
private ReadOnlyCollection`1<string> path
private ReadOnlyCollection`1<string> query
private string wild_path_name
private Dictionary`2<string, string> query_params
private bool <IgnoreTrailingSlash>k__BackingField
private IDictionary`2<string, string> <Defaults>k__BackingField
private Char[] slashSep
public bool IgnoreTrailingSlash
public IDictionary`2<string, string> Defaults
public ReadOnlyCollection`1<string> PathSegmentVariableNames
public ReadOnlyCollection`1<string> QueryValueVariableNames
public void .ctor(string template)
public void .ctor(string template, IDictionary`2<string, string> additionalDefaults)
public void .ctor(string template, bool ignoreTrailingSlash)
public void .ctor(string template, bool ignoreTrailingSlash, IDictionary`2<string, string> additionalDefaults)
public bool get_IgnoreTrailingSlash()
private void set_IgnoreTrailingSlash(bool value)
public IDictionary`2<string, string> get_Defaults()
private void set_Defaults(IDictionary`2<string, string> value)
public ReadOnlyCollection`1<string> get_PathSegmentVariableNames()
public ReadOnlyCollection`1<string> get_QueryValueVariableNames()
public string ToString()
public Uri BindByName(Uri baseAddress, NameValueCollection parameters)
public Uri BindByName(Uri baseAddress, NameValueCollection parameters, bool omitDefaults)
public Uri BindByName(Uri baseAddress, IDictionary`2<string, string> parameters)
public Uri BindByName(Uri baseAddress, IDictionary`2<string, string> parameters, bool omitDefaults)
private string SuffixEndRenderedUri(string s)
private string TrimStartRenderedUri(StringBuilder sb)
private Uri BindByNameCommon(Uri baseAddress, NameValueCollection nvc, IDictionary`2<string, string> dic, bool omitDefaults)
private void BindByName(Int32& src, StringBuilder sb, ReadOnlyCollection`1<string> names, NameValueCollection nvc, IDictionary`2<string, string> dic, bool omitDefaults, bool query)
public Uri BindByPosition(Uri baseAddress, String[] values)
private void BindByPosition(Int32& src, StringBuilder sb, ReadOnlyCollection`1<string> names, String[] values, Int32& index)
public bool IsEquivalentTo(UriTemplate other)
public UriTemplateMatch Match(Uri baseAddress, Uri candidate)
private int StringIndexOf(string s, string pattern, int idx)
private void CheckBaseAddress(Uri baseAddress)
private ReadOnlyCollection`1<string> ParsePathTemplate(string template, int index, int end)
private void ParseQueryTemplate(string template, int index, int end)
}
public System.UriTemplateEquivalenceComparer : object {
public bool Equals(UriTemplate x, UriTemplate y)
public int GetHashCode(UriTemplate obj)
}
public System.UriTemplateMatch : object {
private Uri base_uri
private Uri request_uri
private NameValueCollection nvc
private NameValueCollection query_params
private object data
private UriTemplate template
private Collection`1<string> path_segments
private Collection`1<string> wildcard
public Uri BaseUri
public NameValueCollection BoundVariables
public object Data
public NameValueCollection QueryParameters
public Collection`1<string> RelativePathSegments
public Uri RequestUri
public UriTemplate Template
public Collection`1<string> WildcardPathSegments
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
public NameValueCollection get_BoundVariables()
public object get_Data()
public void set_Data(object value)
public NameValueCollection get_QueryParameters()
public Collection`1<string> get_RelativePathSegments()
public Uri get_RequestUri()
public void set_RequestUri(Uri value)
public UriTemplate get_Template()
public void set_Template(UriTemplate value)
public Collection`1<string> get_WildcardPathSegments()
}
public System.UriTemplateMatchException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.UriTemplateTable : object {
private bool is_readonly
private Uri base_address
private IList`1<KeyValuePair`2<UriTemplate, object>> key_value_pairs
public Uri BaseAddress
public bool IsReadOnly
public IList`1<KeyValuePair`2<UriTemplate, object>> KeyValuePairs
public Uri OriginalBaseAddress
public void .ctor(Uri baseAddress)
public void .ctor(IEnumerable`1<KeyValuePair`2<UriTemplate, object>> keyValuePairs)
public void .ctor(Uri baseAddress, IEnumerable`1<KeyValuePair`2<UriTemplate, object>> keyValuePairs)
private void CheckReadOnly()
public Uri get_BaseAddress()
public void set_BaseAddress(Uri value)
public bool get_IsReadOnly()
public IList`1<KeyValuePair`2<UriTemplate, object>> get_KeyValuePairs()
public void MakeReadOnly(bool allowDuplicateEquivalentUriTemplates)
public Collection`1<UriTemplateMatch> Match(Uri uri)
public UriTemplateMatch MatchSingle(Uri uri)
public Uri get_OriginalBaseAddress()
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
