public UnityEngine.AI.NavMesh : object {
public int AllAreas
public OnNavMeshPreUpdate onPreUpdate
public float avoidancePredictionTime
public int pathfindingIterationsPerFrame
private void Internal_CallOnNavMeshPreUpdate()
public bool Raycast(Vector3 sourcePosition, Vector3 targetPosition, NavMeshHit& hit, int areaMask)
public bool CalculatePath(Vector3 sourcePosition, Vector3 targetPosition, int areaMask, NavMeshPath path)
private bool CalculatePathInternal(Vector3 sourcePosition, Vector3 targetPosition, int areaMask, NavMeshPath path)
public bool FindClosestEdge(Vector3 sourcePosition, NavMeshHit& hit, int areaMask)
public bool SamplePosition(Vector3 sourcePosition, NavMeshHit& hit, float maxDistance, int areaMask)
public void SetLayerCost(int layer, float cost)
public float GetLayerCost(int layer)
public int GetNavMeshLayerFromName(string layerName)
public void SetAreaCost(int areaIndex, float cost)
public float GetAreaCost(int areaIndex)
public int GetAreaFromName(string areaName)
public NavMeshTriangulation CalculateTriangulation()
public void Triangulate(Vector3[]& vertices, Int32[]& indices)
public void AddOffMeshLinks()
public void RestoreNavMesh()
public float get_avoidancePredictionTime()
public void set_avoidancePredictionTime(float value)
public int get_pathfindingIterationsPerFrame()
public void set_pathfindingIterationsPerFrame(int value)
public NavMeshDataInstance AddNavMeshData(NavMeshData navMeshData)
public NavMeshDataInstance AddNavMeshData(NavMeshData navMeshData, Vector3 position, Quaternion rotation)
public void RemoveNavMeshData(NavMeshDataInstance handle)
internal bool IsValidNavMeshDataHandle(int handle)
internal bool IsValidLinkHandle(int handle)
internal Object InternalGetOwner(int dataID)
internal bool InternalSetOwner(int dataID, int ownerID)
internal Object InternalGetLinkOwner(int linkID)
internal bool InternalSetLinkOwner(int linkID, int ownerID)
internal int AddNavMeshDataInternal(NavMeshData navMeshData)
internal int AddNavMeshDataTransformedInternal(NavMeshData navMeshData, Vector3 position, Quaternion rotation)
internal void RemoveNavMeshDataInternal(int handle)
public NavMeshLinkInstance AddLink(NavMeshLinkData link)
public NavMeshLinkInstance AddLink(NavMeshLinkData link, Vector3 position, Quaternion rotation)
public void RemoveLink(NavMeshLinkInstance handle)
internal int AddLinkInternal(NavMeshLinkData link, Vector3 position, Quaternion rotation)
internal void RemoveLinkInternal(int handle)
public bool SamplePosition(Vector3 sourcePosition, NavMeshHit& hit, float maxDistance, NavMeshQueryFilter filter)
private bool SamplePositionFilter(Vector3 sourcePosition, NavMeshHit& hit, float maxDistance, int type, int mask)
public bool FindClosestEdge(Vector3 sourcePosition, NavMeshHit& hit, NavMeshQueryFilter filter)
private bool FindClosestEdgeFilter(Vector3 sourcePosition, NavMeshHit& hit, int type, int mask)
public bool Raycast(Vector3 sourcePosition, Vector3 targetPosition, NavMeshHit& hit, NavMeshQueryFilter filter)
private bool RaycastFilter(Vector3 sourcePosition, Vector3 targetPosition, NavMeshHit& hit, int type, int mask)
public bool CalculatePath(Vector3 sourcePosition, Vector3 targetPosition, NavMeshQueryFilter filter, NavMeshPath path)
private bool CalculatePathFilterInternal(Vector3 sourcePosition, Vector3 targetPosition, NavMeshPath path, int type, int mask, Single[] costs)
public NavMeshBuildSettings CreateSettings()
public void RemoveSettings(int agentTypeID)
public NavMeshBuildSettings GetSettingsByID(int agentTypeID)
public int GetSettingsCount()
public NavMeshBuildSettings GetSettingsByIndex(int index)
public string GetSettingsNameFromID(int agentTypeID)
public void RemoveAllNavMeshData()
private bool Raycast_Injected(Vector3& sourcePosition, Vector3& targetPosition, NavMeshHit& hit, int areaMask)
private bool CalculatePathInternal_Injected(Vector3& sourcePosition, Vector3& targetPosition, int areaMask, NavMeshPath path)
private bool FindClosestEdge_Injected(Vector3& sourcePosition, NavMeshHit& hit, int areaMask)
private bool SamplePosition_Injected(Vector3& sourcePosition, NavMeshHit& hit, float maxDistance, int areaMask)
private void CalculateTriangulation_Injected(NavMeshTriangulation& ret)
private int AddNavMeshDataTransformedInternal_Injected(NavMeshData navMeshData, Vector3& position, Quaternion& rotation)
private int AddLinkInternal_Injected(NavMeshLinkData& link, Vector3& position, Quaternion& rotation)
private bool SamplePositionFilter_Injected(Vector3& sourcePosition, NavMeshHit& hit, float maxDistance, int type, int mask)
private bool FindClosestEdgeFilter_Injected(Vector3& sourcePosition, NavMeshHit& hit, int type, int mask)
private bool RaycastFilter_Injected(Vector3& sourcePosition, Vector3& targetPosition, NavMeshHit& hit, int type, int mask)
private bool CalculatePathFilterInternal_Injected(Vector3& sourcePosition, Vector3& targetPosition, NavMeshPath path, int type, int mask, Single[] costs)
private void CreateSettings_Injected(NavMeshBuildSettings& ret)
private void GetSettingsByID_Injected(int agentTypeID, NavMeshBuildSettings& ret)
private void GetSettingsByIndex_Injected(int index, NavMeshBuildSettings& ret)
}
public UnityEngine.AI.NavMeshAgent : Behaviour {
public Vector3 destination
public float stoppingDistance
public Vector3 velocity
public Vector3 nextPosition
public Vector3 steeringTarget
public Vector3 desiredVelocity
public float remainingDistance
public float baseOffset
public bool isOnOffMeshLink
public OffMeshLinkData currentOffMeshLinkData
public OffMeshLinkData nextOffMeshLinkData
public bool autoTraverseOffMeshLink
public bool autoBraking
public bool autoRepath
public bool hasPath
public bool pathPending
public bool isPathStale
public NavMeshPathStatus pathStatus
public Vector3 pathEndPosition
public bool isStopped
public NavMeshPath path
public Object navMeshOwner
public int agentTypeID
public int walkableMask
public int areaMask
public float speed
public float angularSpeed
public float acceleration
public bool updatePosition
public bool updateRotation
public bool updateUpAxis
public float radius
public float height
public ObstacleAvoidanceType obstacleAvoidanceType
public int avoidancePriority
public bool isOnNavMesh
public bool SetDestination(Vector3 target)
public Vector3 get_destination()
public void set_destination(Vector3 value)
public float get_stoppingDistance()
public void set_stoppingDistance(float value)
public Vector3 get_velocity()
public void set_velocity(Vector3 value)
public Vector3 get_nextPosition()
public void set_nextPosition(Vector3 value)
public Vector3 get_steeringTarget()
public Vector3 get_desiredVelocity()
public float get_remainingDistance()
public float get_baseOffset()
public void set_baseOffset(float value)
public bool get_isOnOffMeshLink()
public void ActivateCurrentOffMeshLink(bool activated)
public OffMeshLinkData get_currentOffMeshLinkData()
internal OffMeshLinkData GetCurrentOffMeshLinkDataInternal()
public OffMeshLinkData get_nextOffMeshLinkData()
internal OffMeshLinkData GetNextOffMeshLinkDataInternal()
public void CompleteOffMeshLink()
public bool get_autoTraverseOffMeshLink()
public void set_autoTraverseOffMeshLink(bool value)
public bool get_autoBraking()
public void set_autoBraking(bool value)
public bool get_autoRepath()
public void set_autoRepath(bool value)
public bool get_hasPath()
public bool get_pathPending()
public bool get_isPathStale()
public NavMeshPathStatus get_pathStatus()
public Vector3 get_pathEndPosition()
public bool Warp(Vector3 newPosition)
public void Move(Vector3 offset)
public void Stop()
public void Stop(bool stopUpdates)
public void Resume()
public bool get_isStopped()
public void set_isStopped(bool value)
public void ResetPath()
public bool SetPath(NavMeshPath path)
public NavMeshPath get_path()
public void set_path(NavMeshPath value)
internal void CopyPathTo(NavMeshPath path)
public bool FindClosestEdge(NavMeshHit& hit)
public bool Raycast(Vector3 targetPosition, NavMeshHit& hit)
public bool CalculatePath(Vector3 targetPosition, NavMeshPath path)
private bool CalculatePathInternal(Vector3 targetPosition, NavMeshPath path)
public bool SamplePathPosition(int areaMask, float maxDistance, NavMeshHit& hit)
public void SetLayerCost(int layer, float cost)
public float GetLayerCost(int layer)
public void SetAreaCost(int areaIndex, float areaCost)
public float GetAreaCost(int areaIndex)
public Object get_navMeshOwner()
public int get_agentTypeID()
public void set_agentTypeID(int value)
private Object GetOwnerInternal()
public int get_walkableMask()
public void set_walkableMask(int value)
public int get_areaMask()
public void set_areaMask(int value)
public float get_speed()
public void set_speed(float value)
public float get_angularSpeed()
public void set_angularSpeed(float value)
public float get_acceleration()
public void set_acceleration(float value)
public bool get_updatePosition()
public void set_updatePosition(bool value)
public bool get_updateRotation()
public void set_updateRotation(bool value)
public bool get_updateUpAxis()
public void set_updateUpAxis(bool value)
public float get_radius()
public void set_radius(float value)
public float get_height()
public void set_height(float value)
public ObstacleAvoidanceType get_obstacleAvoidanceType()
public void set_obstacleAvoidanceType(ObstacleAvoidanceType value)
public int get_avoidancePriority()
public void set_avoidancePriority(int value)
public bool get_isOnNavMesh()
private bool SetDestination_Injected(Vector3& target)
private void get_destination_Injected(Vector3& ret)
private void set_destination_Injected(Vector3& value)
private void get_velocity_Injected(Vector3& ret)
private void set_velocity_Injected(Vector3& value)
private void get_nextPosition_Injected(Vector3& ret)
private void set_nextPosition_Injected(Vector3& value)
private void get_steeringTarget_Injected(Vector3& ret)
private void get_desiredVelocity_Injected(Vector3& ret)
private void GetCurrentOffMeshLinkDataInternal_Injected(OffMeshLinkData& ret)
private void GetNextOffMeshLinkDataInternal_Injected(OffMeshLinkData& ret)
private void get_pathEndPosition_Injected(Vector3& ret)
private bool Warp_Injected(Vector3& newPosition)
private void Move_Injected(Vector3& offset)
private bool Raycast_Injected(Vector3& targetPosition, NavMeshHit& hit)
private bool CalculatePathInternal_Injected(Vector3& targetPosition, NavMeshPath path)
}
public UnityEngine.AI.NavMeshBuildDebugFlags : Enum {
public int value__
public NavMeshBuildDebugFlags None
public NavMeshBuildDebugFlags InputGeometry
public NavMeshBuildDebugFlags Voxels
public NavMeshBuildDebugFlags Regions
public NavMeshBuildDebugFlags RawContours
public NavMeshBuildDebugFlags SimplifiedContours
public NavMeshBuildDebugFlags PolygonMeshes
public NavMeshBuildDebugFlags PolygonMeshesDetail
public NavMeshBuildDebugFlags All
}
public UnityEngine.AI.NavMeshBuildDebugSettings : ValueType {
private byte m_Flags
public NavMeshBuildDebugFlags flags
public NavMeshBuildDebugFlags get_flags()
public void set_flags(NavMeshBuildDebugFlags value)
}
public UnityEngine.AI.NavMeshBuilder : object {
public void CollectSources(Bounds includedWorldBounds, int includedLayerMask, NavMeshCollectGeometry geometry, int defaultArea, bool generateLinksByDefault, List`1<NavMeshBuildMarkup> markups, bool includeOnlyMarkedObjects, List`1<NavMeshBuildSource> results)
public void CollectSources(Bounds includedWorldBounds, int includedLayerMask, NavMeshCollectGeometry geometry, int defaultArea, List`1<NavMeshBuildMarkup> markups, List`1<NavMeshBuildSource> results)
public void CollectSources(Transform root, int includedLayerMask, NavMeshCollectGeometry geometry, int defaultArea, bool generateLinksByDefault, List`1<NavMeshBuildMarkup> markups, bool includeOnlyMarkedObjects, List`1<NavMeshBuildSource> results)
public void CollectSources(Transform root, int includedLayerMask, NavMeshCollectGeometry geometry, int defaultArea, List`1<NavMeshBuildMarkup> markups, List`1<NavMeshBuildSource> results)
private NavMeshBuildSource[] CollectSourcesInternal(int includedLayerMask, Bounds includedWorldBounds, Transform root, bool useBounds, NavMeshCollectGeometry geometry, int defaultArea, bool generateLinksByDefault, NavMeshBuildMarkup[] markups, bool includeOnlyMarkedObjects)
public NavMeshData BuildNavMeshData(NavMeshBuildSettings buildSettings, List`1<NavMeshBuildSource> sources, Bounds localBounds, Vector3 position, Quaternion rotation)
public bool UpdateNavMeshData(NavMeshData data, NavMeshBuildSettings buildSettings, List`1<NavMeshBuildSource> sources, Bounds localBounds)
private bool UpdateNavMeshDataListInternal(NavMeshData data, NavMeshBuildSettings buildSettings, object sources, Bounds localBounds)
public AsyncOperation UpdateNavMeshDataAsync(NavMeshData data, NavMeshBuildSettings buildSettings, List`1<NavMeshBuildSource> sources, Bounds localBounds)
public void Cancel(NavMeshData data)
private AsyncOperation UpdateNavMeshDataAsyncListInternal(NavMeshData data, NavMeshBuildSettings buildSettings, object sources, Bounds localBounds)
private NavMeshBuildSource[] CollectSourcesInternal_Injected(int includedLayerMask, Bounds& includedWorldBounds, Transform root, bool useBounds, NavMeshCollectGeometry geometry, int defaultArea, bool generateLinksByDefault, NavMeshBuildMarkup[] markups, bool includeOnlyMarkedObjects)
private bool UpdateNavMeshDataListInternal_Injected(NavMeshData data, NavMeshBuildSettings& buildSettings, object sources, Bounds& localBounds)
private AsyncOperation UpdateNavMeshDataAsyncListInternal_Injected(NavMeshData data, NavMeshBuildSettings& buildSettings, object sources, Bounds& localBounds)
}
public UnityEngine.AI.NavMeshBuildMarkup : ValueType {
private int m_OverrideArea
private int m_Area
private int m_InheritIgnoreFromBuild
private int m_IgnoreFromBuild
private int m_OverrideGenerateLinks
private int m_GenerateLinks
private int m_InstanceID
private int m_IgnoreChildren
public bool overrideArea
public int area
public bool overrideIgnore
public bool ignoreFromBuild
public bool overrideGenerateLinks
public bool generateLinks
public bool applyToChildren
public Transform root
public bool get_overrideArea()
public void set_overrideArea(bool value)
public int get_area()
public void set_area(int value)
public bool get_overrideIgnore()
public void set_overrideIgnore(bool value)
public bool get_ignoreFromBuild()
public void set_ignoreFromBuild(bool value)
public bool get_overrideGenerateLinks()
public void set_overrideGenerateLinks(bool value)
public bool get_generateLinks()
public void set_generateLinks(bool value)
public bool get_applyToChildren()
public void set_applyToChildren(bool value)
public Transform get_root()
public void set_root(Transform value)
private Transform InternalGetRootGO(int instanceID)
}
public UnityEngine.AI.NavMeshBuildSettings : ValueType {
private int m_AgentTypeID
private float m_AgentRadius
private float m_AgentHeight
private float m_AgentSlope
private float m_AgentClimb
private float m_LedgeDropHeight
private float m_MaxJumpAcrossDistance
private float m_MinRegionArea
private int m_OverrideVoxelSize
private float m_VoxelSize
private int m_OverrideTileSize
private int m_TileSize
private int m_BuildHeightMesh
private UInt32 m_MaxJobWorkers
private int m_PreserveTilesOutsideBounds
private NavMeshBuildDebugSettings m_Debug
public int agentTypeID
public float agentRadius
public float agentHeight
public float agentSlope
public float agentClimb
public float ledgeDropHeight
public float maxJumpAcrossDistance
public float minRegionArea
public bool overrideVoxelSize
public float voxelSize
public bool overrideTileSize
public int tileSize
public UInt32 maxJobWorkers
public bool preserveTilesOutsideBounds
public bool buildHeightMesh
public NavMeshBuildDebugSettings debug
public int get_agentTypeID()
public void set_agentTypeID(int value)
public float get_agentRadius()
public void set_agentRadius(float value)
public float get_agentHeight()
public void set_agentHeight(float value)
public float get_agentSlope()
public void set_agentSlope(float value)
public float get_agentClimb()
public void set_agentClimb(float value)
public float get_ledgeDropHeight()
public void set_ledgeDropHeight(float value)
public float get_maxJumpAcrossDistance()
public void set_maxJumpAcrossDistance(float value)
public float get_minRegionArea()
public void set_minRegionArea(float value)
public bool get_overrideVoxelSize()
public void set_overrideVoxelSize(bool value)
public float get_voxelSize()
public void set_voxelSize(float value)
public bool get_overrideTileSize()
public void set_overrideTileSize(bool value)
public int get_tileSize()
public void set_tileSize(int value)
public UInt32 get_maxJobWorkers()
public void set_maxJobWorkers(UInt32 value)
public bool get_preserveTilesOutsideBounds()
public void set_preserveTilesOutsideBounds(bool value)
public bool get_buildHeightMesh()
public void set_buildHeightMesh(bool value)
public NavMeshBuildDebugSettings get_debug()
public void set_debug(NavMeshBuildDebugSettings value)
public String[] ValidationReport(Bounds buildBounds)
private String[] InternalValidationReport(NavMeshBuildSettings buildSettings, Bounds buildBounds)
private String[] InternalValidationReport_Injected(NavMeshBuildSettings& buildSettings, Bounds& buildBounds)
}
public UnityEngine.AI.NavMeshBuildSource : ValueType {
private Matrix4x4 m_Transform
private Vector3 m_Size
private NavMeshBuildSourceShape m_Shape
private int m_Area
private int m_InstanceID
private int m_ComponentID
private int m_GenerateLinks
public Matrix4x4 transform
public Vector3 size
public NavMeshBuildSourceShape shape
public int area
public bool generateLinks
public Object sourceObject
public Component component
public Matrix4x4 get_transform()
public void set_transform(Matrix4x4 value)
public Vector3 get_size()
public void set_size(Vector3 value)
public NavMeshBuildSourceShape get_shape()
public void set_shape(NavMeshBuildSourceShape value)
public int get_area()
public void set_area(int value)
public bool get_generateLinks()
public void set_generateLinks(bool value)
public Object get_sourceObject()
public void set_sourceObject(Object value)
public Component get_component()
public void set_component(Component value)
private Component InternalGetComponent(int instanceID)
private Object InternalGetObject(int instanceID)
}
public UnityEngine.AI.NavMeshBuildSourceShape : Enum {
public int value__
public NavMeshBuildSourceShape Mesh
public NavMeshBuildSourceShape Terrain
public NavMeshBuildSourceShape Box
public NavMeshBuildSourceShape Sphere
public NavMeshBuildSourceShape Capsule
public NavMeshBuildSourceShape ModifierBox
}
public UnityEngine.AI.NavMeshCollectGeometry : Enum {
public int value__
public NavMeshCollectGeometry RenderMeshes
public NavMeshCollectGeometry PhysicsColliders
}
public UnityEngine.AI.NavMeshData : Object {
public Bounds sourceBounds
public Vector3 position
public Quaternion rotation
internal bool hasHeightMeshData
internal NavMeshBuildSettings buildSettings
public void .ctor(int agentTypeID)
private void Internal_Create(NavMeshData mono, int agentTypeID)
public Bounds get_sourceBounds()
public Vector3 get_position()
public void set_position(Vector3 value)
public Quaternion get_rotation()
public void set_rotation(Quaternion value)
internal bool get_hasHeightMeshData()
internal NavMeshBuildSettings get_buildSettings()
private void get_sourceBounds_Injected(Bounds& ret)
private void get_position_Injected(Vector3& ret)
private void set_position_Injected(Vector3& value)
private void get_rotation_Injected(Quaternion& ret)
private void set_rotation_Injected(Quaternion& value)
private void get_buildSettings_Injected(NavMeshBuildSettings& ret)
}
public UnityEngine.AI.NavMeshDataInstance : ValueType {
private int <id>k__BackingField
public bool valid
internal int id
public Object owner
public bool get_valid()
internal int get_id()
internal void set_id(int value)
public void Remove()
public Object get_owner()
public void set_owner(Object value)
}
public UnityEngine.AI.NavMeshHit : ValueType {
private Vector3 m_Position
private Vector3 m_Normal
private float m_Distance
private int m_Mask
private int m_Hit
public Vector3 position
public Vector3 normal
public float distance
public int mask
public bool hit
public Vector3 get_position()
public void set_position(Vector3 value)
public Vector3 get_normal()
public void set_normal(Vector3 value)
public float get_distance()
public void set_distance(float value)
public int get_mask()
public void set_mask(int value)
public bool get_hit()
public void set_hit(bool value)
}
public UnityEngine.AI.NavMeshLinkData : ValueType {
private Vector3 m_StartPosition
private Vector3 m_EndPosition
private float m_CostModifier
private int m_Bidirectional
private float m_Width
private int m_Area
private int m_AgentTypeID
public Vector3 startPosition
public Vector3 endPosition
public float costModifier
public bool bidirectional
public float width
public int area
public int agentTypeID
public Vector3 get_startPosition()
public void set_startPosition(Vector3 value)
public Vector3 get_endPosition()
public void set_endPosition(Vector3 value)
public float get_costModifier()
public void set_costModifier(float value)
public bool get_bidirectional()
public void set_bidirectional(bool value)
public float get_width()
public void set_width(float value)
public int get_area()
public void set_area(int value)
public int get_agentTypeID()
public void set_agentTypeID(int value)
}
public UnityEngine.AI.NavMeshLinkInstance : ValueType {
private int <id>k__BackingField
public bool valid
internal int id
public Object owner
public bool get_valid()
internal int get_id()
internal void set_id(int value)
public void Remove()
public Object get_owner()
public void set_owner(Object value)
}
public UnityEngine.AI.NavMeshObstacle : Behaviour {
public float height
public float radius
public Vector3 velocity
public bool carving
public bool carveOnlyStationary
public float carvingMoveThreshold
public float carvingTimeToStationary
public NavMeshObstacleShape shape
public Vector3 center
public Vector3 size
public float get_height()
public void set_height(float value)
public float get_radius()
public void set_radius(float value)
public Vector3 get_velocity()
public void set_velocity(Vector3 value)
public bool get_carving()
public void set_carving(bool value)
public bool get_carveOnlyStationary()
public void set_carveOnlyStationary(bool value)
public float get_carvingMoveThreshold()
public void set_carvingMoveThreshold(float value)
public float get_carvingTimeToStationary()
public void set_carvingTimeToStationary(float value)
public NavMeshObstacleShape get_shape()
public void set_shape(NavMeshObstacleShape value)
public Vector3 get_center()
public void set_center(Vector3 value)
public Vector3 get_size()
public void set_size(Vector3 value)
internal void FitExtents()
private void get_velocity_Injected(Vector3& ret)
private void set_velocity_Injected(Vector3& value)
private void get_center_Injected(Vector3& ret)
private void set_center_Injected(Vector3& value)
private void get_size_Injected(Vector3& ret)
private void set_size_Injected(Vector3& value)
}
public UnityEngine.AI.NavMeshObstacleShape : Enum {
public int value__
public NavMeshObstacleShape Capsule
public NavMeshObstacleShape Box
}
public UnityEngine.AI.NavMeshPath : object {
internal IntPtr m_Ptr
internal Vector3[] m_Corners
public Vector3[] corners
public NavMeshPathStatus status
protected void Finalize()
private IntPtr InitializeNavMeshPath()
private void DestroyNavMeshPath(IntPtr ptr)
public int GetCornersNonAlloc(Vector3[] results)
private Vector3[] CalculateCornersInternal()
private void ClearCornersInternal()
public void ClearCorners()
private void CalculateCorners()
public Vector3[] get_corners()
public NavMeshPathStatus get_status()
}
public UnityEngine.AI.NavMeshPathStatus : Enum {
public int value__
public NavMeshPathStatus PathComplete
public NavMeshPathStatus PathPartial
public NavMeshPathStatus PathInvalid
}
public UnityEngine.AI.NavMeshQueryFilter : ValueType {
private int k_AreaCostElementCount
private Single[] <costs>k__BackingField
private int <areaMask>k__BackingField
private int <agentTypeID>k__BackingField
internal Single[] costs
public int areaMask
public int agentTypeID
internal Single[] get_costs()
private void set_costs(Single[] value)
public int get_areaMask()
public void set_areaMask(int value)
public int get_agentTypeID()
public void set_agentTypeID(int value)
public float GetAreaCost(int areaIndex)
public void SetAreaCost(int areaIndex, float cost)
}
public UnityEngine.AI.NavMeshTriangulation : ValueType {
public Vector3[] vertices
public Int32[] indices
public Int32[] areas
public Int32[] layers
public Int32[] get_layers()
}
public UnityEngine.AI.ObstacleAvoidanceType : Enum {
public int value__
public ObstacleAvoidanceType NoObstacleAvoidance
public ObstacleAvoidanceType LowQualityObstacleAvoidance
public ObstacleAvoidanceType MedQualityObstacleAvoidance
public ObstacleAvoidanceType GoodQualityObstacleAvoidance
public ObstacleAvoidanceType HighQualityObstacleAvoidance
}
public UnityEngine.AI.OffMeshLink : Behaviour {
public bool activated
public bool occupied
public float costOverride
public bool biDirectional
public int navMeshLayer
public int area
public bool autoUpdatePositions
public Transform startTransform
public Transform endTransform
public bool get_activated()
public void set_activated(bool value)
public bool get_occupied()
public float get_costOverride()
public void set_costOverride(float value)
public bool get_biDirectional()
public void set_biDirectional(bool value)
public void UpdatePositions()
public int get_navMeshLayer()
public void set_navMeshLayer(int value)
public int get_area()
public void set_area(int value)
public bool get_autoUpdatePositions()
public void set_autoUpdatePositions(bool value)
public Transform get_startTransform()
public void set_startTransform(Transform value)
public Transform get_endTransform()
public void set_endTransform(Transform value)
}
public UnityEngine.AI.OffMeshLinkData : ValueType {
internal int m_Valid
internal int m_Activated
internal int m_InstanceID
internal OffMeshLinkType m_LinkType
internal Vector3 m_StartPos
internal Vector3 m_EndPos
public bool valid
public bool activated
public OffMeshLinkType linkType
public Vector3 startPos
public Vector3 endPos
public OffMeshLink offMeshLink
public bool get_valid()
public bool get_activated()
public OffMeshLinkType get_linkType()
public Vector3 get_startPos()
public Vector3 get_endPos()
public OffMeshLink get_offMeshLink()
internal OffMeshLink GetOffMeshLinkInternal(int instanceID)
}
public UnityEngine.AI.OffMeshLinkType : Enum {
public int value__
public OffMeshLinkType LinkTypeManual
public OffMeshLinkType LinkTypeDropDown
public OffMeshLinkType LinkTypeJumpAcross
}
public UnityEngine.Experimental.AI.NavMeshLocation : ValueType {
private PolygonId <polygon>k__BackingField
private Vector3 <position>k__BackingField
public PolygonId polygon
public Vector3 position
public PolygonId get_polygon()
public Vector3 get_position()
internal void .ctor(Vector3 position, PolygonId polygon)
}
public UnityEngine.Experimental.AI.NavMeshPolyTypes : Enum {
public int value__
public NavMeshPolyTypes Ground
public NavMeshPolyTypes OffMeshConnection
}
public UnityEngine.Experimental.AI.NavMeshQuery : ValueType {
internal IntPtr m_NavMeshQuery
public void .ctor(NavMeshWorld world, Allocator allocator, int pathNodePoolSize)
public void Dispose()
private IntPtr Create(NavMeshWorld world, int nodePoolSize)
private void Destroy(IntPtr navMeshQuery)
public PathQueryStatus BeginFindPath(NavMeshLocation start, NavMeshLocation end, int areaMask, NativeArray`1<float> costs)
public PathQueryStatus UpdateFindPath(int iterations, Int32& iterationsPerformed)
public PathQueryStatus EndFindPath(Int32& pathSize)
public int GetPathResult(NativeSlice`1<PolygonId> path)
private PathQueryStatus BeginFindPath(IntPtr navMeshQuery, NavMeshLocation start, NavMeshLocation end, int areaMask, Void* costs)
private PathQueryStatus UpdateFindPath(IntPtr navMeshQuery, int iterations, Int32& iterationsPerformed)
private PathQueryStatus EndFindPath(IntPtr navMeshQuery, Int32& pathSize)
private int GetPathResult(IntPtr navMeshQuery, Void* path, int maxPath)
private bool IsValidPolygon(IntPtr navMeshQuery, PolygonId polygon)
public bool IsValid(PolygonId polygon)
public bool IsValid(NavMeshLocation location)
private int GetAgentTypeIdForPolygon(IntPtr navMeshQuery, PolygonId polygon)
public int GetAgentTypeIdForPolygon(PolygonId polygon)
private bool IsPositionInPolygon(IntPtr navMeshQuery, Vector3 position, PolygonId polygon)
private PathQueryStatus GetClosestPointOnPoly(IntPtr navMeshQuery, PolygonId polygon, Vector3 position, Vector3& nearest)
public NavMeshLocation CreateLocation(Vector3 position, PolygonId polygon)
private NavMeshLocation MapLocation(IntPtr navMeshQuery, Vector3 position, Vector3 extents, int agentTypeID, int areaMask)
public NavMeshLocation MapLocation(Vector3 position, Vector3 extents, int agentTypeID, int areaMask)
private void MoveLocations(IntPtr navMeshQuery, Void* locations, Void* targets, Void* areaMasks, int count)
public void MoveLocations(NativeSlice`1<NavMeshLocation> locations, NativeSlice`1<Vector3> targets, NativeSlice`1<int> areaMasks)
private void MoveLocationsInSameAreas(IntPtr navMeshQuery, Void* locations, Void* targets, int count, int areaMask)
public void MoveLocationsInSameAreas(NativeSlice`1<NavMeshLocation> locations, NativeSlice`1<Vector3> targets, int areaMask)
private NavMeshLocation MoveLocation(IntPtr navMeshQuery, NavMeshLocation location, Vector3 target, int areaMask)
public NavMeshLocation MoveLocation(NavMeshLocation location, Vector3 target, int areaMask)
private bool GetPortalPoints(IntPtr navMeshQuery, PolygonId polygon, PolygonId neighbourPolygon, Vector3& left, Vector3& right)
public bool GetPortalPoints(PolygonId polygon, PolygonId neighbourPolygon, Vector3& left, Vector3& right)
private Matrix4x4 PolygonLocalToWorldMatrix(IntPtr navMeshQuery, PolygonId polygon)
public Matrix4x4 PolygonLocalToWorldMatrix(PolygonId polygon)
private Matrix4x4 PolygonWorldToLocalMatrix(IntPtr navMeshQuery, PolygonId polygon)
public Matrix4x4 PolygonWorldToLocalMatrix(PolygonId polygon)
private NavMeshPolyTypes GetPolygonType(IntPtr navMeshQuery, PolygonId polygon)
public NavMeshPolyTypes GetPolygonType(PolygonId polygon)
private PathQueryStatus Raycast(IntPtr navMeshQuery, NavMeshLocation start, Vector3 targetPosition, int areaMask, Void* costs, NavMeshHit& hit, Void* path, Int32& pathCount, int maxPath)
public PathQueryStatus Raycast(NavMeshHit& hit, NavMeshLocation start, Vector3 targetPosition, int areaMask, NativeArray`1<float> costs)
public PathQueryStatus Raycast(NavMeshHit& hit, NativeSlice`1<PolygonId> path, Int32& pathCount, NavMeshLocation start, Vector3 targetPosition, int areaMask, NativeArray`1<float> costs)
private PathQueryStatus GetEdgesAndNeighbors(IntPtr navMeshQuery, PolygonId node, int maxVerts, int maxNei, Void* verts, Void* neighbors, Void* edgeIndices, Int32& vertCount, Int32& neighborsCount)
public PathQueryStatus GetEdgesAndNeighbors(PolygonId node, NativeSlice`1<Vector3> edgeVertices, NativeSlice`1<PolygonId> neighbors, NativeSlice`1<byte> edgeIndices, Int32& verticesCount, Int32& neighborsCount)
private IntPtr Create_Injected(NavMeshWorld& world, int nodePoolSize)
private PathQueryStatus BeginFindPath_Injected(IntPtr navMeshQuery, NavMeshLocation& start, NavMeshLocation& end, int areaMask, Void* costs)
private bool IsValidPolygon_Injected(IntPtr navMeshQuery, PolygonId& polygon)
private int GetAgentTypeIdForPolygon_Injected(IntPtr navMeshQuery, PolygonId& polygon)
private bool IsPositionInPolygon_Injected(IntPtr navMeshQuery, Vector3& position, PolygonId& polygon)
private PathQueryStatus GetClosestPointOnPoly_Injected(IntPtr navMeshQuery, PolygonId& polygon, Vector3& position, Vector3& nearest)
private void MapLocation_Injected(IntPtr navMeshQuery, Vector3& position, Vector3& extents, int agentTypeID, int areaMask, NavMeshLocation& ret)
private void MoveLocation_Injected(IntPtr navMeshQuery, NavMeshLocation& location, Vector3& target, int areaMask, NavMeshLocation& ret)
private bool GetPortalPoints_Injected(IntPtr navMeshQuery, PolygonId& polygon, PolygonId& neighbourPolygon, Vector3& left, Vector3& right)
private void PolygonLocalToWorldMatrix_Injected(IntPtr navMeshQuery, PolygonId& polygon, Matrix4x4& ret)
private void PolygonWorldToLocalMatrix_Injected(IntPtr navMeshQuery, PolygonId& polygon, Matrix4x4& ret)
private NavMeshPolyTypes GetPolygonType_Injected(IntPtr navMeshQuery, PolygonId& polygon)
private PathQueryStatus Raycast_Injected(IntPtr navMeshQuery, NavMeshLocation& start, Vector3& targetPosition, int areaMask, Void* costs, NavMeshHit& hit, Void* path, Int32& pathCount, int maxPath)
private PathQueryStatus GetEdgesAndNeighbors_Injected(IntPtr navMeshQuery, PolygonId& node, int maxVerts, int maxNei, Void* verts, Void* neighbors, Void* edgeIndices, Int32& vertCount, Int32& neighborsCount)
}
public UnityEngine.Experimental.AI.NavMeshWorld : ValueType {
internal IntPtr world
public bool IsValid()
public NavMeshWorld GetDefaultWorld()
private void AddDependencyInternal(IntPtr navmesh, JobHandle handle)
public void AddDependency(JobHandle job)
private void GetDefaultWorld_Injected(NavMeshWorld& ret)
private void AddDependencyInternal_Injected(IntPtr navmesh, JobHandle& handle)
}
public UnityEngine.Experimental.AI.PathQueryStatus : Enum {
public int value__
public PathQueryStatus Failure
public PathQueryStatus Success
public PathQueryStatus InProgress
public PathQueryStatus StatusDetailMask
public PathQueryStatus WrongMagic
public PathQueryStatus WrongVersion
public PathQueryStatus OutOfMemory
public PathQueryStatus InvalidParam
public PathQueryStatus BufferTooSmall
public PathQueryStatus OutOfNodes
public PathQueryStatus PartialResult
}
public UnityEngine.Experimental.AI.PolygonId : ValueType {
internal ulong polyRef
public bool IsNull()
public bool op_Equality(PolygonId x, PolygonId y)
public bool op_Inequality(PolygonId x, PolygonId y)
public int GetHashCode()
public bool Equals(PolygonId rhs)
public bool Equals(object obj)
}
