public UnityEngine.Networking.CertificateHandler : object {
internal IntPtr m_Ptr
private IntPtr Create(CertificateHandler obj)
private void Release()
protected void Finalize()
protected bool ValidateCertificate(Byte[] certificateData)
internal bool ValidateCertificateNative(Byte[] certificateData)
public void Dispose()
}
public UnityEngine.Networking.DownloadHandler : object {
internal IntPtr m_Ptr
public bool isDone
public Byte[] data
public string text
private void Release()
protected void Finalize()
public void Dispose()
public bool get_isDone()
private bool IsDone()
public Byte[] get_data()
public string get_text()
protected Byte[] GetData()
protected string GetText()
private Encoding GetTextEncoder()
private string GetContentType()
protected bool ReceiveData(Byte[] data, int dataLength)
protected void ReceiveContentLengthHeader(ulong contentLength)
protected void ReceiveContentLength(int contentLength)
protected void CompleteContent()
protected float GetProgress()
protected T GetCheckedDownloader(UnityWebRequest www)
internal Byte[] InternalGetByteArray(DownloadHandler dh)
}
public UnityEngine.Networking.DownloadHandlerBuffer : DownloadHandler {
private IntPtr Create(DownloadHandlerBuffer obj)
private void InternalCreateBuffer()
protected Byte[] GetData()
private Byte[] InternalGetData()
public string GetContent(UnityWebRequest www)
}
public UnityEngine.Networking.DownloadHandlerFile : DownloadHandler {
public bool removeFileOnAbort
private IntPtr Create(DownloadHandlerFile obj, string path, bool append)
private void InternalCreateVFS(string path, bool append)
public void .ctor(string path)
public void .ctor(string path, bool append)
protected Byte[] GetData()
protected string GetText()
public bool get_removeFileOnAbort()
public void set_removeFileOnAbort(bool value)
}
public UnityEngine.Networking.DownloadHandlerScript : DownloadHandler {
private IntPtr Create(DownloadHandlerScript obj)
private IntPtr CreatePreallocated(DownloadHandlerScript obj, Byte[] preallocatedBuffer)
private void InternalCreateScript()
private void InternalCreateScript(Byte[] preallocatedBuffer)
public void .ctor(Byte[] preallocatedBuffer)
}
public UnityEngine.Networking.IMultipartFormSection {
public string sectionName
public Byte[] sectionData
public string fileName
public string contentType
public string get_sectionName()
public Byte[] get_sectionData()
public string get_fileName()
public string get_contentType()
}
public UnityEngine.Networking.MultipartFormDataSection : object {
private string name
private Byte[] data
private string content
public string sectionName
public Byte[] sectionData
public string fileName
public string contentType
public void .ctor(string name, Byte[] data, string contentType)
public void .ctor(string name, Byte[] data)
public void .ctor(Byte[] data)
public void .ctor(string name, string data, Encoding encoding, string contentType)
public void .ctor(string name, string data, string contentType)
public void .ctor(string name, string data)
public void .ctor(string data)
public string get_sectionName()
public Byte[] get_sectionData()
public string get_fileName()
public string get_contentType()
}
public UnityEngine.Networking.MultipartFormFileSection : object {
private string name
private Byte[] data
private string file
private string content
public string sectionName
public Byte[] sectionData
public string fileName
public string contentType
private void Init(string name, Byte[] data, string fileName, string contentType)
public void .ctor(string name, Byte[] data, string fileName, string contentType)
public void .ctor(Byte[] data)
public void .ctor(string fileName, Byte[] data)
public void .ctor(string name, string data, Encoding dataEncoding, string fileName)
public void .ctor(string data, Encoding dataEncoding, string fileName)
public void .ctor(string data, string fileName)
public string get_sectionName()
public Byte[] get_sectionData()
public string get_fileName()
public string get_contentType()
}
public UnityEngine.Networking.UnityWebRequest : object {
internal IntPtr m_Ptr
internal DownloadHandler m_DownloadHandler
internal UploadHandler m_UploadHandler
internal CertificateHandler m_CertificateHandler
internal Uri m_Uri
public string kHttpVerbGET
public string kHttpVerbHEAD
public string kHttpVerbPOST
public string kHttpVerbPUT
public string kHttpVerbCREATE
public string kHttpVerbDELETE
private bool <disposeCertificateHandlerOnDispose>k__BackingField
private bool <disposeDownloadHandlerOnDispose>k__BackingField
private bool <disposeUploadHandlerOnDispose>k__BackingField
public bool disposeCertificateHandlerOnDispose
public bool disposeDownloadHandlerOnDispose
public bool disposeUploadHandlerOnDispose
public string method
public string error
private bool use100Continue
public bool useHttpContinue
public string url
public Uri uri
public long responseCode
public float uploadProgress
public bool isModifiable
public bool isDone
public bool isNetworkError
public bool isHttpError
public float downloadProgress
public ulong uploadedBytes
public ulong downloadedBytes
public int redirectLimit
public bool chunkedTransfer
public UploadHandler uploadHandler
public DownloadHandler downloadHandler
public CertificateHandler certificateHandler
public int timeout
internal bool suppressErrorsToConsole
private string GetWebErrorString(UnityWebRequestError err)
internal string GetHTTPStatusString(long responseCode)
public bool get_disposeCertificateHandlerOnDispose()
public void set_disposeCertificateHandlerOnDispose(bool value)
public bool get_disposeDownloadHandlerOnDispose()
public void set_disposeDownloadHandlerOnDispose(bool value)
public bool get_disposeUploadHandlerOnDispose()
public void set_disposeUploadHandlerOnDispose(bool value)
public void ClearCookieCache()
public void ClearCookieCache(Uri uri)
private void ClearCookieCache(string domain, string path)
internal IntPtr Create()
private void Release()
internal void InternalDestroy()
private void InternalSetDefaults()
public void .ctor(string url)
public void .ctor(Uri uri)
public void .ctor(string url, string method)
public void .ctor(Uri uri, string method)
public void .ctor(string url, string method, DownloadHandler downloadHandler, UploadHandler uploadHandler)
public void .ctor(Uri uri, string method, DownloadHandler downloadHandler, UploadHandler uploadHandler)
protected void Finalize()
public void Dispose()
private void DisposeHandlers()
internal UnityWebRequestAsyncOperation BeginWebRequest()
public AsyncOperation Send()
public UnityWebRequestAsyncOperation SendWebRequest()
public void Abort()
private UnityWebRequestError SetMethod(UnityWebRequestMethod methodType)
internal void InternalSetMethod(UnityWebRequestMethod methodType)
private UnityWebRequestError SetCustomMethod(string customMethodName)
internal void InternalSetCustomMethod(string customMethodName)
internal UnityWebRequestMethod GetMethod()
internal string GetCustomMethod()
public string get_method()
public void set_method(string value)
private UnityWebRequestError GetError()
public string get_error()
private bool get_use100Continue()
private void set_use100Continue(bool value)
public bool get_useHttpContinue()
public void set_useHttpContinue(bool value)
public string get_url()
public void set_url(string value)
public Uri get_uri()
public void set_uri(Uri value)
private string GetUrl()
private UnityWebRequestError SetUrl(string url)
private void InternalSetUrl(string url)
public long get_responseCode()
private float GetUploadProgress()
private bool IsExecuting()
public float get_uploadProgress()
public bool get_isModifiable()
public bool get_isDone()
public bool get_isNetworkError()
public bool get_isHttpError()
private float GetDownloadProgress()
public float get_downloadProgress()
public ulong get_uploadedBytes()
public ulong get_downloadedBytes()
private int GetRedirectLimit()
private void SetRedirectLimitFromScripting(int limit)
public int get_redirectLimit()
public void set_redirectLimit(int value)
private bool GetChunked()
private UnityWebRequestError SetChunked(bool chunked)
public bool get_chunkedTransfer()
public void set_chunkedTransfer(bool value)
public string GetRequestHeader(string name)
internal UnityWebRequestError InternalSetRequestHeader(string name, string value)
public void SetRequestHeader(string name, string value)
public string GetResponseHeader(string name)
internal String[] GetResponseHeaderKeys()
public Dictionary`2<string, string> GetResponseHeaders()
private UnityWebRequestError SetUploadHandler(UploadHandler uh)
public UploadHandler get_uploadHandler()
public void set_uploadHandler(UploadHandler value)
private UnityWebRequestError SetDownloadHandler(DownloadHandler dh)
public DownloadHandler get_downloadHandler()
public void set_downloadHandler(DownloadHandler value)
private UnityWebRequestError SetCertificateHandler(CertificateHandler ch)
public CertificateHandler get_certificateHandler()
public void set_certificateHandler(CertificateHandler value)
private int GetTimeoutMsec()
private UnityWebRequestError SetTimeoutMsec(int timeout)
public int get_timeout()
public void set_timeout(int value)
private bool GetSuppressErrorsToConsole()
private UnityWebRequestError SetSuppressErrorsToConsole(bool suppress)
internal bool get_suppressErrorsToConsole()
internal void set_suppressErrorsToConsole(bool value)
public UnityWebRequest Get(string uri)
public UnityWebRequest Get(Uri uri)
public UnityWebRequest Delete(string uri)
public UnityWebRequest Delete(Uri uri)
public UnityWebRequest Head(string uri)
public UnityWebRequest Head(Uri uri)
public UnityWebRequest GetTexture(string uri)
public UnityWebRequest GetTexture(string uri, bool nonReadable)
public UnityWebRequest GetAudioClip(string uri, AudioType audioType)
public UnityWebRequest GetAssetBundle(string uri)
public UnityWebRequest GetAssetBundle(string uri, UInt32 crc)
public UnityWebRequest GetAssetBundle(string uri, UInt32 version, UInt32 crc)
public UnityWebRequest GetAssetBundle(string uri, Hash128 hash, UInt32 crc)
public UnityWebRequest GetAssetBundle(string uri, CachedAssetBundle cachedAssetBundle, UInt32 crc)
public UnityWebRequest Put(string uri, Byte[] bodyData)
public UnityWebRequest Put(Uri uri, Byte[] bodyData)
public UnityWebRequest Put(string uri, string bodyData)
public UnityWebRequest Put(Uri uri, string bodyData)
public UnityWebRequest Post(string uri, string postData)
public UnityWebRequest Post(Uri uri, string postData)
private void SetupPost(UnityWebRequest request, string postData)
public UnityWebRequest Post(string uri, WWWForm formData)
public UnityWebRequest Post(Uri uri, WWWForm formData)
private void SetupPost(UnityWebRequest request, WWWForm formData)
public UnityWebRequest Post(string uri, List`1<IMultipartFormSection> multipartFormSections)
public UnityWebRequest Post(Uri uri, List`1<IMultipartFormSection> multipartFormSections)
public UnityWebRequest Post(string uri, List`1<IMultipartFormSection> multipartFormSections, Byte[] boundary)
public UnityWebRequest Post(Uri uri, List`1<IMultipartFormSection> multipartFormSections, Byte[] boundary)
private void SetupPost(UnityWebRequest request, List`1<IMultipartFormSection> multipartFormSections, Byte[] boundary)
public UnityWebRequest Post(string uri, Dictionary`2<string, string> formFields)
public UnityWebRequest Post(Uri uri, Dictionary`2<string, string> formFields)
private void SetupPost(UnityWebRequest request, Dictionary`2<string, string> formFields)
public string EscapeURL(string s)
public string EscapeURL(string s, Encoding e)
public string UnEscapeURL(string s)
public string UnEscapeURL(string s, Encoding e)
public Byte[] SerializeFormSections(List`1<IMultipartFormSection> multipartFormSections, Byte[] boundary)
public Byte[] GenerateBoundary()
public Byte[] SerializeSimpleForm(Dictionary`2<string, string> formFields)
}
public UnityEngine.Networking.UnityWebRequestAsyncOperation : AsyncOperation {
private UnityWebRequest <webRequest>k__BackingField
public UnityWebRequest webRequest
public UnityWebRequest get_webRequest()
internal void set_webRequest(UnityWebRequest value)
}
public UnityEngine.Networking.UploadHandler : object {
internal IntPtr m_Ptr
public Byte[] data
public string contentType
public float progress
private void Release()
protected void Finalize()
public void Dispose()
public Byte[] get_data()
public string get_contentType()
public void set_contentType(string value)
public float get_progress()
internal Byte[] GetData()
internal string GetContentType()
internal void SetContentType(string newContentType)
internal float GetProgress()
private string InternalGetContentType()
private void InternalSetContentType(string newContentType)
private float InternalGetProgress()
}
public UnityEngine.Networking.UploadHandlerFile : UploadHandler {
private IntPtr Create(UploadHandlerFile self, string filePath)
public void .ctor(string filePath)
}
public UnityEngine.Networking.UploadHandlerRaw : UploadHandler {
private IntPtr Create(UploadHandlerRaw self, Byte[] data)
public void .ctor(Byte[] data)
private Byte[] InternalGetData()
internal Byte[] GetData()
}
public UnityEngine.WWWForm : object {
private List`1<Byte[]> formData
private List`1<string> fieldNames
private List`1<string> fileNames
private List`1<string> types
private Byte[] boundary
private bool containsFiles
internal Encoding DefaultEncoding
public Dictionary`2<string, string> headers
public Byte[] data
internal Encoding get_DefaultEncoding()
public void AddField(string fieldName, string value)
public void AddField(string fieldName, string value, Encoding e)
public void AddField(string fieldName, int i)
public void AddBinaryData(string fieldName, Byte[] contents)
public void AddBinaryData(string fieldName, Byte[] contents, string fileName)
public void AddBinaryData(string fieldName, Byte[] contents, string fileName, string mimeType)
public Dictionary`2<string, string> get_headers()
public Byte[] get_data()
}
internal UnityEngine.WWWTranscoder : object {
private Byte[] ucHexChars
private Byte[] lcHexChars
private byte urlEscapeChar
private Byte[] urlSpace
private Byte[] dataSpace
private Byte[] urlForbidden
private byte qpEscapeChar
private Byte[] qpSpace
private Byte[] qpForbidden
private byte Hex2Byte(Byte[] b, int offset)
private Byte[] Byte2Hex(byte b, Byte[] hexChars)
public string URLEncode(string toEncode)
public string URLEncode(string toEncode, Encoding e)
public Byte[] URLEncode(Byte[] toEncode)
public string DataEncode(string toEncode)
public string DataEncode(string toEncode, Encoding e)
public Byte[] DataEncode(Byte[] toEncode)
public string QPEncode(string toEncode)
public string QPEncode(string toEncode, Encoding e)
public Byte[] QPEncode(Byte[] toEncode)
public Byte[] Encode(Byte[] input, byte escapeChar, Byte[] space, Byte[] forbidden, bool uppercase)
private bool ByteArrayContains(Byte[] array, byte b)
public string URLDecode(string toEncode)
public string URLDecode(string toEncode, Encoding e)
public Byte[] URLDecode(Byte[] toEncode)
public string DataDecode(string toDecode)
public string DataDecode(string toDecode, Encoding e)
public Byte[] DataDecode(Byte[] toDecode)
public string QPDecode(string toEncode)
public string QPDecode(string toEncode, Encoding e)
public Byte[] QPDecode(Byte[] toEncode)
private bool ByteSubArrayEquals(Byte[] array, int index, Byte[] comperand)
public Byte[] Decode(Byte[] input, byte escapeChar, Byte[] space)
public bool SevenBitClean(string s)
public bool SevenBitClean(string s, Encoding e)
public bool SevenBitClean(Byte[] input)
}
internal UnityEngineInternal.WebRequestUtils : object {
private Regex domainRegex
internal string RedirectTo(string baseUri, string redirectUri)
internal string MakeInitialUrl(string targetUrl, string localUrl)
internal string MakeUriString(Uri targetUri, string targetUrl, bool prependProtocol)
private string URLDecode(string encoded)
}
