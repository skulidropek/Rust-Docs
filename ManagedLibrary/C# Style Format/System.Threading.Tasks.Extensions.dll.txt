internal System.ExceptionArgument : Enum {
public int value__
public ExceptionArgument task
public ExceptionArgument source
public ExceptionArgument state
}
public System.Runtime.CompilerServices.AsyncMethodBuilderAttribute : Attribute {
private Type <BuilderType>k__BackingField
public Type BuilderType
public void .ctor(Type builderType)
public Type get_BuilderType()
}
public System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder : ValueType {
private AsyncTaskMethodBuilder _methodBuilder
private bool _haveResult
private bool _useBuilder
public ValueTask Task
public AsyncValueTaskMethodBuilder Create()
public void Start(TStateMachine& stateMachine)
public void SetStateMachine(IAsyncStateMachine stateMachine)
public void SetResult()
public void SetException(Exception exception)
public ValueTask get_Task()
public void AwaitOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine)
public void AwaitUnsafeOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine)
}
public System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1 : ValueType {
private AsyncTaskMethodBuilder`1<TResult> _methodBuilder
private TResult _result
private bool _haveResult
private bool _useBuilder
public ValueTask`1<TResult> Task
public AsyncValueTaskMethodBuilder`1<TResult> Create()
public void Start(TStateMachine& stateMachine)
public void SetStateMachine(IAsyncStateMachine stateMachine)
public void SetResult(TResult result)
public void SetException(Exception exception)
public ValueTask`1<TResult> get_Task()
public void AwaitOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine)
public void AwaitUnsafeOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine)
}
public System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable : ValueType {
private ValueTask _value
internal void .ctor(ValueTask value)
public ConfiguredValueTaskAwaiter GetAwaiter()
}
public System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1 : ValueType {
private ValueTask`1<TResult> _value
internal void .ctor(ValueTask`1<TResult> value)
public ConfiguredValueTaskAwaiter<TResult> GetAwaiter()
}
public System.Runtime.CompilerServices.ValueTaskAwaiter : ValueType {
internal Action`1<object> s_invokeActionDelegate
private ValueTask _value
public bool IsCompleted
internal void .ctor(ValueTask value)
public bool get_IsCompleted()
public void GetResult()
public void OnCompleted(Action continuation)
public void UnsafeOnCompleted(Action continuation)
}
public System.Runtime.CompilerServices.ValueTaskAwaiter`1 : ValueType {
private ValueTask`1<TResult> _value
public bool IsCompleted
internal void .ctor(ValueTask`1<TResult> value)
public bool get_IsCompleted()
public TResult GetResult()
public void OnCompleted(Action continuation)
public void UnsafeOnCompleted(Action continuation)
}
public System.Threading.Tasks.Sources.IValueTaskSource {
public ValueTaskSourceStatus GetStatus(short token)
public void OnCompleted(Action`1<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
public void GetResult(short token)
}
public System.Threading.Tasks.Sources.IValueTaskSource`1 {
public ValueTaskSourceStatus GetStatus(short token)
public void OnCompleted(Action`1<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
public TResult GetResult(short token)
}
public System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags : Enum {
public int value__
public ValueTaskSourceOnCompletedFlags None
public ValueTaskSourceOnCompletedFlags UseSchedulingContext
public ValueTaskSourceOnCompletedFlags FlowExecutionContext
}
public System.Threading.Tasks.Sources.ValueTaskSourceStatus : Enum {
public int value__
public ValueTaskSourceStatus Pending
public ValueTaskSourceStatus Succeeded
public ValueTaskSourceStatus Faulted
public ValueTaskSourceStatus Canceled
}
public System.Threading.Tasks.ValueTask : ValueType {
private Task s_canceledTask
private Task <CompletedTask>k__BackingField
internal object _obj
internal short _token
internal bool _continueOnCapturedContext
internal Task CompletedTask
public bool IsCompleted
public bool IsCompletedSuccessfully
public bool IsFaulted
public bool IsCanceled
internal Task get_CompletedTask()
public void .ctor(Task task)
public void .ctor(IValueTaskSource source, short token)
private void .ctor(object obj, short token, bool continueOnCapturedContext)
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(ValueTask other)
public bool op_Equality(ValueTask left, ValueTask right)
public bool op_Inequality(ValueTask left, ValueTask right)
public Task AsTask()
public ValueTask Preserve()
private Task GetTaskForValueTaskSource(IValueTaskSource t)
public bool get_IsCompleted()
public bool get_IsCompletedSuccessfully()
public bool get_IsFaulted()
public bool get_IsCanceled()
internal void ThrowIfCompletedUnsuccessfully()
public ValueTaskAwaiter GetAwaiter()
public ConfiguredValueTaskAwaitable ConfigureAwait(bool continueOnCapturedContext)
}
public System.Threading.Tasks.ValueTask`1 : ValueType {
private Task`1<TResult> s_canceledTask
internal object _obj
internal TResult _result
internal short _token
internal bool _continueOnCapturedContext
public bool IsCompleted
public bool IsCompletedSuccessfully
public bool IsFaulted
public bool IsCanceled
public TResult Result
public void .ctor(TResult result)
public void .ctor(Task`1<TResult> task)
public void .ctor(IValueTaskSource`1<TResult> source, short token)
private void .ctor(object obj, TResult result, short token, bool continueOnCapturedContext)
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(ValueTask`1<TResult> other)
public bool op_Equality(ValueTask`1<TResult> left, ValueTask`1<TResult> right)
public bool op_Inequality(ValueTask`1<TResult> left, ValueTask`1<TResult> right)
public Task`1<TResult> AsTask()
public ValueTask`1<TResult> Preserve()
private Task`1<TResult> GetTaskForValueTaskSource(IValueTaskSource`1<TResult> t)
public bool get_IsCompleted()
public bool get_IsCompletedSuccessfully()
public bool get_IsFaulted()
public bool get_IsCanceled()
public TResult get_Result()
public ValueTaskAwaiter`1<TResult> GetAwaiter()
public ConfiguredValueTaskAwaitable`1<TResult> ConfigureAwait(bool continueOnCapturedContext)
public string ToString()
}
internal System.ThrowHelper : object {
internal void ThrowArgumentNullException(ExceptionArgument argument)
internal void ThrowArgumentOutOfRangeException(ExceptionArgument argument)
private ArgumentNullException GetArgumentNullException(ExceptionArgument argument)
private ArgumentOutOfRangeException GetArgumentOutOfRangeException(ExceptionArgument argument)
private string GetArgumentName(ExceptionArgument argument)
}
